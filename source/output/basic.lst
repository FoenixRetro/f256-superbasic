
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 26 21:13:49 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PLOT                             = $c1; $c1 PLOT
=$c2					KWD_PRINT                            = $c2; $c2 PRINT
=$c3					KWD_READ                             = $c3; $c3 READ
=$c4					KWD_RECT                             = $c4; $c4 RECT
=$c5					KWD_REM                              = $c5; $c5 REM
=$c6					KWD_RETURN                           = $c6; $c6 RETURN
=$c7					KWD_SOLID                            = $c7; $c7 SOLID
=$c8					KWD_SPRITE                           = $c8; $c8 SPRITE
=$c9					KWD_TEXT                             = $c9; $c9 TEXT
=$ca					KWD_TO                               = $ca; $ca TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 90 b5	jsr $b590			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.8014	20 16 93	jsr $9316			jsr 	NewCommand 					; erase current program
.8017	20 f4 a6	jsr $a6f4			jsr 	BackloadProgram
.801a	4c 63 8b	jmp $8b63			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 26-Oct-2022. Build 2306."
>8065	64 6e 65 73 64 61 79 20 32 36 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 32 33 30 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSprite:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 4b		bra $80dd			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.809a	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a4	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 2a 06	sta $062a			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b2	68		pla				pla 								; get command back
.80b3	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b5	48		pha				pha 								; push back.
.80b6	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b8	f0 17		beq $80d1			beq 	_GDCopyToWorkArea
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bd	f0 07		beq $80c6			beq 	_GDCheckY
.80bf	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c2	c9 40		cmp #$40			cmp 	#64
.80c4	b0 08		bcs $80ce			bcs 	_GDError1
.80c6					_GDCheckY:
.80c6	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c9	cd 3e 06	cmp $063e			cmp 	gxHeight
.80cc	90 03		bcc $80d1			bcc 	_GDCopyToWorkArea
.80ce					_GDError1:
.80ce	68		pla				pla
.80cf					_GDError2:
.80cf	38		sec				sec
.80d0	60		rts				rts
.80d1					_GDCopyToWorkArea:
.80d1	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d3					_GDCopy2:
.80d3	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d6	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d9	ca		dex				dex
.80da	10 f7		bpl $80d3			bpl 	_GDCopy2
.80dc	68		pla				pla 								; get command
.80dd					_GDExecuteA:
.80dd	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80df	b0 ee		bcs $80cf			bcs 	_GDError2
.80e1	aa		tax				tax
.80e2	7c e8 80	jmp ($80e8,x)			jmp 	(GRVectorTable,x)
.80e5					GXMove:
.80e5	18		clc				clc
.80e6	60		rts				rts
.80e7					GRUndefined:
>80e7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e8					GRVectorTable:
>80e8	b7 82					.word	GXInitialise             ; $00 Initialise
>80ea	ce 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ec	16 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ee	69 82					.word	GXClearBitmap            ; $03 Clear
>80f0	94 84					.word	GXSetColourMode          ; $04 Colour
>80f2	5f 86					.word	GXFontHandler            ; $05 DrawFont
>80f4	a7 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f6	13 87					.word	GXSelect                 ; $07 SPRUSE
>80f8	39 87					.word	GXSelectImage            ; $08 SPRIMG
>80fa	e7 80					.word	GRUndefined              ; $09
>80fc	e7 80					.word	GRUndefined              ; $0a
>80fe	e7 80					.word	GRUndefined              ; $0b
>8100	e7 80					.word	GRUndefined              ; $0c
>8102	e7 80					.word	GRUndefined              ; $0d
>8104	e7 80					.word	GRUndefined              ; $0e
>8106	e7 80					.word	GRUndefined              ; $0f
>8108	e5 80					.word	GXMove                   ; $10 Move
>810a	62 83					.word	GXLine                   ; $11 Line
>810c	dd 84					.word	GXFrameRectangle         ; $12 FrameRect
>810e	da 84					.word	GXFillRectangle          ; $13 FillRect
>8110	20 81					.word	GXFrameCircle            ; $14 FrameCircle
>8112	1c 81					.word	GXFillCircle             ; $15 FillCircle
>8114	e7 80					.word	GRUndefined              ; $16
>8116	e7 80					.word	GRUndefined              ; $17
>8118	c2 84					.word	GXPlotPoint              ; $18 Plot
>811a	a3 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811c					GXFillCircle:
.811c	a9 ff		lda #$ff			lda 	#255
.811e	80 02		bra $8122			bra 	GXCircle
.8120					GXFrameCircle:
.8120	a9 00		lda #$00			lda 	#0
.8122					GXCircle:
.8122	8d 4d 06	sta $064d			sta 	gxIsFillMode					; save Fill flag
.8125	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8128	f0 26		beq $8150			beq 	_GXCFail
.812a	20 b5 88	jsr $88b5			jsr 	GXSortXY 					; topleft/bottomright
.812d	20 df 87	jsr $87df			jsr 	GXOpenBitmap 				; start drawing
.8130	20 22 82	jsr $8222			jsr 	GXCircleSetup 				; set up for drawing
.8133	9c 4e 06	stz $064e			stz 	gxYChanged
.8136					_GXCircleDraw:
.8136	ad 4b 06	lda $064b			lda 	gXCentre					; while x <= y
.8139	cd 4c 06	cmp $064c			cmp 	gYCentre
.813c	90 0a		bcc $8148			bcc 	_GXCircleContinue
.813e	d0 03		bne $8143			bne 	_GXNoLast
.8140	20 55 81	jsr $8155			jsr 	GXPlot1
.8143					_GXNoLast:
.8143	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap 				; close the bitmap
.8146	18		clc				clc
.8147	60		rts				rts
.8148					_GXCircleContinue:
.8148	20 52 81	jsr $8152			jsr 	GXPlot2 					; draw it
.814b	20 cf 81	jsr $81cf			jsr 	GXCircleMove 				; adjust the coordinates
.814e	80 e6		bra $8136			bra 	_GXCircleDraw
.8150					_GXCFail:
.8150	38		sec				sec
.8151	60		rts				rts
.8152					GXPlot2:
.8152	20 55 81	jsr $8155			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8155					GXPlot1:
.8155	ad 4c 06	lda $064c			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8158	f0 03		beq $815d			beq 	_GXPlot1Only
.815a	20 79 81	jsr $8179			jsr 	GXPlot0 						; plot and negate
.815d					_GXPlot1Only:
.815d	20 79 81	jsr $8179			jsr 	GXPlot0 						; twice, undoing negation
.8160	ad 4b 06	lda $064b			lda 	gXCentre 						; swap X and Y
.8163	ae 4c 06	ldx $064c			ldx	 	gYCentre
.8166	8d 4c 06	sta $064c			sta 	gYCentre
.8169	8e 4b 06	stx $064b			stx 	gXCentre
.816c	ad 4e 06	lda $064e			lda 	gxYChanged 						; toggle Y Changed flag
.816f	a9 ff		lda #$ff			lda 	#$FF
.8171	8d 4e 06	sta $064e			sta 	gxYChanged
.8174	60		rts				rts
.8175	20 79 81	jsr $8179			jsr 	GXPlot0 						; do once
.8178	60		rts				rts
.8179	ad 4d 06	lda $064d	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817c	f0 05		beq $8183			beq 	_GXPlot0Always
.817e	ad 4e 06	lda $064e			lda 	gxYChanged						; fill mode, only draw if changed.
.8181	f0 2d		beq $81b0			beq 	GXPlot0Exit
.8183					_GXPlot0Always:
.8183	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8185	ad 4c 06	lda $064c			lda 	gYCentre
.8188	20 b1 81	jsr $81b1			jsr 	GXSubCopy
.818b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818d	ad 4b 06	lda $064b			lda 	gXCentre
.8190	20 b1 81	jsr $81b1			jsr 	GXSubCopy
.8193	48		pha				pha 									; save last offset X
.8194	20 fd 87	jsr $87fd			jsr 	GXPositionCalc 					; calculate position/offset.
.8197	68		pla				pla
.8198	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8199	85 36		sta $36				sta 	gxzTemp0
.819b	64 37		stz $37				stz 	gxzTemp0+1
.819d	26 37		rol $37				rol 	gxzTemp0+1
.819f	ad 4d 06	lda $064d			lda 	gxIsFillMode
.81a2	69 80		adc #$80			adc 	#128
.81a4	20 2d 85	jsr $852d			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a7	38		sec				sec 									; GY = -GY
.81a8	a9 00		lda #$00			lda 	#0
.81aa	ed 4c 06	sbc $064c			sbc 	gYCentre
.81ad	8d 4c 06	sta $064c			sta 	gYCentre
.81b0					GXPlot0Exit:
.81b0	60		rts				rts
.81b1					GXSubCopy:
.81b1	85 36		sta $36				sta 	gxzTemp0
.81b3	64 37		stz $37				stz 	gxzTemp0+1
.81b5	29 80		and #$80			and 	#$80
.81b7	f0 02		beq $81bb			beq 	_GXNoSx
.81b9	c6 37		dec $37				dec 	gxzTemp0+1
.81bb					_GXNoSx:
.81bb	38		sec				sec
.81bc	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bf	e5 36		sbc $36				sbc 	gxzTemp0
.81c1	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c4	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c7	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c9	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81cc	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81ce	60		rts				rts
.81cf					GXCircleMove:
.81cf	9c 4e 06	stz $064e			stz 	gxYChanged 					; clear Y changed flag
.81d2	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d4	10 0d		bpl $81e3			bpl 	_GXEMPositive
.81d6	ee 4b 06	inc $064b			inc 	gXCentre 					; X++
.81d9	ad 4b 06	lda $064b			lda 	gXCentre
.81dc	20 02 82	jsr $8202			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81df	a9 06		lda #$06			lda 	#6  						; and add 6
.81e1	80 15		bra $81f8			bra 	_GXEMAddD
.81e3					_GXEMPositive:
.81e3	ee 4b 06	inc $064b			inc 	gXCentre					; X++
.81e6	ce 4c 06	dec $064c			dec 	gyCentre 					; Y--
.81e9	38		sec				sec 								; calculate X-Y
.81ea	ad 4b 06	lda $064b			lda 	gXCentre
.81ed	ed 4c 06	sbc $064c			sbc 	gYCentre
.81f0	20 02 82	jsr $8202			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f3	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f5	ce 4e 06	dec $064e			dec 	gxYChanged
.81f8					_GXEMAddD:
.81f8	18		clc				clc
.81f9	65 38		adc $38				adc 	gxzTemp1
.81fb	85 38		sta $38				sta 	gxzTemp1
.81fd	90 02		bcc $8201			bcc 	_GXEMNoCarry
.81ff	e6 39		inc $39				inc 	gxzTemp1+1
.8201					_GXEMNoCarry:
.8201	60		rts				rts
.8202					_GXAdd4TimesToD:
.8202	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8204	29 80		and #$80			and 	#$80
.8206	f0 02		beq $820a			beq 	_GXA4Unsigned
.8208	a9 ff		lda #$ff			lda 	#$FF
.820a					_GXA4Unsigned:
.820a	85 37		sta $37				sta 	gxzTemp0+1
.820c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820e	26 37		rol $37				rol 	gxzTemp0+1
.8210	06 36		asl $36				asl 	gxzTemp0
.8212	26 37		rol $37				rol 	gxzTemp0+1
.8214	18		clc				clc 								; add
.8215	a5 36		lda $36				lda		gxzTemp0
.8217	65 38		adc $38				adc 	gxzTemp1
.8219	85 38		sta $38				sta 	gxzTemp1
.821b	a5 37		lda $37				lda		gxzTemp0+1
.821d	65 39		adc $39				adc 	gxzTemp1+1
.821f	85 39		sta $39				sta 	gxzTemp1+1
.8221	60		rts				rts
.8222					GXCircleSetup:
.8222	38		sec				sec
.8223	ad 38 06	lda $0638			lda 	gxY1
.8226	ed 34 06	sbc $0634			sbc 	gxY0
.8229	4a		lsr a				lsr 	a
.822a	8d 4a 06	sta $064a			sta 	gxRadius
.822d	a2 00		ldx #$00			ldx 	#0
.822f	20 51 82	jsr $8251			jsr 	_GXCalculateCentre
.8232	a2 02		ldx #$02			ldx 	#2
.8234	20 51 82	jsr $8251			jsr 	_GXCalculateCentre
.8237	9c 4b 06	stz $064b			stz 	gXCentre
.823a	ad 4a 06	lda $064a			lda 	gxRadius
.823d	8d 4c 06	sta $064c			sta 	gYCentre
.8240	0a		asl a				asl 	a 							; R x 2
.8241	85 36		sta $36				sta 	gxzTemp0
.8243	38		sec				sec
.8244	a9 03		lda #$03			lda 	#3
.8246	e5 36		sbc $36				sbc 	gxzTemp0
.8248	85 38		sta $38				sta 	gxzTemp1
.824a	a9 00		lda #$00			lda 	#0
.824c	e9 00		sbc #$00			sbc 	#0
.824e	85 39		sta $39				sta 	gxzTemp1+1
.8250	60		rts				rts
.8251					_GXCalculateCentre:
.8251	38		sec				sec
.8252	bd 36 06	lda $0636,x			lda 	gxX1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0,x
.8258	9d 36 06	sta $0636,x			sta 	gXX1,x
.825b	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825e	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.8261	4a		lsr a				lsr 	a
.8262	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8265	7e 36 06	ror $0636,x			ror 	gXX1,x
.8268	60		rts				rts
.064a					gxRadius:
>064a							.fill 	1
.064b					gXCentre:
>064b							.fill 	1
.064c					gYCentre:
>064c							.fill 	1
.064d					gxIsFillMode:
>064d							.fill 	1
.064e					gxYChanged:
>064e							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8269					GXClearBitmap:
.8269	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826c	f0 24		beq $8292			beq 	_GXCBFail
.826e	20 df 87	jsr $87df			jsr 	GXOpenBitmap 				; start access
.8271	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8273	ad 3e 06	lda $063e			lda 	gxHeight
.8276	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8278	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.827a					_GXCalcLastPage:
.827a	98		tya				tya 								; add to base page
.827b	18		clc				clc
.827c	6d 3c 06	adc $063c			adc 	gxBasePage
.827f	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8281					_GXClearAll:
.8281	20 94 82	jsr $8294			jsr 	_GXClearBlock 				; clear 8k block
.8284	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8286	a5 0b		lda $0b				lda 	GXEditSlot
.8288	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.828b	b0 f4		bcs $8281			bcs 	_GXClearAll
.828d	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap	 			; stop access
.8290	18		clc				clc
.8291	60		rts				rts
.8292					_GXCBFail:
.8292	38		sec				sec
.8293	60		rts				rts
.8294					_GXClearBlock:
.8294	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8296	85 38		sta $38				sta 	0+gxzTemp1
.8298	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.829a	85 39		sta $39				sta 	1+gxzTemp1
.829c					_GXCB0:
.829c	a5 36		lda $36				lda 	gxzTemp0
.829e	a0 00		ldy #$00			ldy 	#0
.82a0					_GXCB1:
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82ab	c8		iny				iny
.82ac	d0 f2		bne $82a0			bne 	_GXCB1
.82ae	e6 39		inc $39				inc 	gxzTemp1+1
.82b0	a5 39		lda $39				lda 	gxzTemp1+1
.82b2	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b4	d0 e6		bne $829c			bne 	_GXCB0
.82b6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b7					GXInitialise:
.82b7	64 01		stz $01				stz 	1
.82b9	a9 01		lda #$01			lda 	#1
.82bb	8d 00 d0	sta $d000			sta 	$D000
.82be	18		clc				clc
.82bf	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c2	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c5	a2 0f		ldx #$0f			ldx 	#15
.82c7					_GXIClear:
.82c7	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82ca	ca		dex				dex
.82cb	10 fa		bpl $82c7			bpl 	_GXIClear
.82cd	60		rts				rts
.82ce					GXControlBitmap:
.82ce	64 01		stz $01				stz 	1
.82d0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d2	29 01		and #$01			and 	#1 							; set bitmap flag
.82d4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82db	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82df	90 02		bcc $82e3			bcc 	_CBNotOn
.82e1	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e3					_CBNotOn:
.82e3	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e6	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e8	29 07		and #$07			and 	#7
.82ea	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ed	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ef	d0 02		bne $82f3			bne 	_CBNotDefault
.82f1	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f3					_CBNotDefault:
.82f3	8d 3c 06	sta $063c			sta 	gxBasePage
.82f6	20 54 83	jsr $8354			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f9	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fb	8d 03 d1	sta $d103			sta 	$D103
.82fe	a5 36		lda $36				lda 	gxzTemp0
.8300	8d 02 d1	sta $d102			sta 	$D102
.8303	9c 01 d1	stz $d101			stz 	$D101
.8306	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8308	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830b	29 01		and #$01			and 	#1
.830d	f0 02		beq $8311			beq 	_CBHaveHeight
.830f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8311					_CBHaveHeight
.8311	8e 3e 06	stx $063e			stx 	gxHeight
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXControlSprite:
.8316	64 01		stz $01				stz 	1
.8318	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831a	29 01		and #$01			and 	#1 							; set sprites flag
.831c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8320	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8323	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8325	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8327	90 02		bcc $832b			bcc 	_CSNotOn
.8329	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832b					_CSNotOn:
.832b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8330	d0 02		bne $8334			bne 	_CSNotDefault
.8332	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8334					_CSNotDefault:
.8334	8d 3d 06	sta $063d			sta 	gxSpritePage
.8337	20 54 83	jsr $8354			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833a	a5 36		lda $36				lda 	zTemp0
.833c	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833f	a5 37		lda $37				lda 	zTemp0+1
.8341	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8344	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8346					_CSClear:
.8346	9e 00 d9	stz $d900,x			stz 	$D900,x
.8349	9e 00 da	stz $da00,x			stz 	$DA00,x
.834c	ca		dex				dex
.834d	d0 f7		bne $8346			bne 	_CSClear
.834f	9c 47 06	stz $0647			stz 	GSCurrentSprite+1 			; no sprite selected.
.8352	18		clc				clc
.8353	60		rts				rts
.8354					GXCalculateBaseAddress:
.8354	85 36		sta $36				sta 	gxzTemp0
.8356	64 37		stz $37				stz 	gxzTemp0+1
.8358	a9 05		lda #$05			lda 	#5
.835a					_GXShift:
.835a	06 36		asl $36				asl 	gxzTemp0
.835c	26 37		rol $37				rol 	gxzTemp0+1
.835e	3a		dec a				dec		a
.835f	d0 f9		bne $835a			bne 	_GXShift
.8361	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8362					GXLine:
.8362	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8365	f0 28		beq $838f			beq 	_GXLFail
.8367	20 df 87	jsr $87df			jsr 	GXOpenBitmap
.836a	20 d3 88	jsr $88d3			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836d	20 35 84	jsr $8435			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8370	20 fd 87	jsr $87fd			jsr 	GXPositionCalc 				; calculate position/offset.
.8373					_GXDrawLoop:
.8373	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8376	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8378	2d 42 06	and $0642			and 	gxANDValue
.837b	4d 41 06	eor $0641			eor 	gxEORValue
.837e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8380	20 91 83	jsr $8391			jsr 	GXLineIsComplete 			; is the line complete ?
.8383	f0 05		beq $838a			beq 	_GXLExit
.8385	20 ac 83	jsr $83ac			jsr 	GXLineAdvance 				; code as per advance method
.8388	80 e9		bra $8373			bra 	_GXDrawLoop
.838a					_GXLExit:
.838a	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap
.838d	18		clc				clc
.838e	60		rts				rts
.838f					_GXLFail:
.838f	38		sec				sec
.8390	60		rts				rts
.8391					GXLineIsComplete:
.8391	ad 51 06	lda $0651			lda 	GXIsDiffYLarger 			; is dy larger
.8394	d0 0f		bne $83a5			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8396	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.8399	4d 36 06	eor $0636			eor 	GXX1
.839c	d0 06		bne $83a4			bne 	_GXLICExit
.839e	ad 33 06	lda $0633			lda 	GXX0+1
.83a1	4d 37 06	eor $0637			eor 	GXX1+1
.83a4					_GXLICExit:
.83a4	60		rts				rts
.83a5					_GXLICCompareY:
.83a5	ad 38 06	lda $0638			lda 	GXY1
.83a8	4d 34 06	eor $0634			eor 	GXY0
.83ab	60		rts				rts
.83ac					GXLineAdvance:
.83ac	18		clc				clc 								; add adjust to position
.83ad	ad 53 06	lda $0653			lda 	GXPosition
.83b0	6d 54 06	adc $0654			adc 	GXAdjust
.83b3	8d 53 06	sta $0653			sta 	GXPosition
.83b6	9c 56 06	stz $0656			stz 	GXAddSelect 				; clear add select flag
.83b9	b0 05		bcs $83c0			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83bb	cd 55 06	cmp $0655			cmp 	GXTotal 					; if exceeded total
.83be	90 0a		bcc $83ca			bcc 	_GXLANoExtra
.83c0					_GXLAOverflow:
.83c0	ce 56 06	dec $0656			dec 	GXAddSelect 				; set addselect to $FF
.83c3	38		sec				sec 								; subtract total and write back
.83c4	ed 55 06	sbc $0655			sbc 	GXTotal
.83c7	8d 53 06	sta $0653			sta 	GXPosition
.83ca					_GXLANoExtra:
.83ca	ad 51 06	lda $0651			lda 	GXIsDiffYLarger
.83cd	f0 0d		beq $83dc			beq 	_GXDXLarger
.83cf	20 2e 84	jsr $842e			jsr 	GXIncrementY
.83d2	ad 56 06	lda $0656			lda 	GXAddSelect
.83d5	f0 10		beq $83e7			beq 	_GXLAExit
.83d7	20 e8 83	jsr $83e8			jsr 	GXAdjustX
.83da	80 0b		bra $83e7			bra 	_GXLAExit
.83dc					_GXDXLarger:
.83dc	20 e8 83	jsr $83e8			jsr 	GXAdjustX
.83df	ad 56 06	lda $0656			lda 	GXAddSelect
.83e2	f0 03		beq $83e7			beq 	_GXLAExit
.83e4	20 2e 84	jsr $842e			jsr 	GXIncrementY
.83e7					_GXLAExit:
.83e7	60		rts				rts
.83e8					GXAdjustX:
.83e8	ad 52 06	lda $0652			lda 	GXDXNegative
.83eb	10 25		bpl $8412			bpl 	_GXAXRight
.83ed	ad 32 06	lda $0632			lda 	GXX0
.83f0	d0 03		bne $83f5			bne 	_GXAXNoBorrow
.83f2	ce 33 06	dec $0633			dec 	GXX0+1
.83f5					_GXAXNoBorrow:
.83f5	ce 32 06	dec $0632			dec 	GXX0
.83f8	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.83fb	ad 45 06	lda $0645			lda 	gsOffset
.83fe	c9 ff		cmp #$ff			cmp 	#$FF
.8400	d0 0f		bne $8411			bne 	_GXAYExit 					; underflow
.8402	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8404	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8406	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8408	b0 07		bcs $8411			bcs 	_GXAYExit
.840a	18		clc				clc
.840b	69 20		adc #$20			adc 	#$20 						; fix up
.840d	85 3d		sta $3d				sta 	gxzScreen+1
.840f	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8411					_GXAYExit:
.8411	60		rts				rts
.8412					_GXAXRight:
.8412	ee 32 06	inc $0632			inc 	GXX0
.8415	d0 03		bne $841a			bne 	_GXAXNoCarry
.8417	ee 33 06	inc $0633			inc 	GXX0+1
.841a					_GXAXNoCarry:
.841a	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.841d	d0 0e		bne $842d			bne 	_GXAXExit 					; if not overflowed, exit.
.841f	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8421	a5 3d		lda $3d				lda 	gxzScreen+1
.8423	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8425	90 06		bcc $842d			bcc 	_GXAXExit
.8427	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8429	85 3d		sta $3d				sta 	gxzScreen+1
.842b	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842d					_GXAXExit:
.842d	60		rts				rts
.842e					GXIncrementY:
.842e	ee 34 06	inc $0634			inc 	GXY0
.8431	20 53 88	jsr $8853			jsr 	GXMovePositionDown
.8434	60		rts				rts
.8435					GXLineSetup:
.8435	ad 38 06	lda $0638			lda 	GXY1
.8438	38		sec				sec
.8439	ed 34 06	sbc $0634			sbc 	GXY0
.843c	4a		lsr a				lsr 	a
.843d	8d 50 06	sta $0650			sta 	GXDiffY
.8440	9c 52 06	stz $0652			stz 	GXDXNegative 				; clear -ve flag
.8443	38		sec				sec
.8444	ad 36 06	lda $0636			lda 	GXX1
.8447	ed 32 06	sbc $0632			sbc 	GXX0
.844a	8d 4f 06	sta $064f			sta 	GXDiffX
.844d	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8450	ed 33 06	sbc $0633			sbc 	GXX0+1
.8453	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8454	6e 4f 06	ror $064f			ror 	GXDiffX
.8457	0a		asl a				asl 	a
.8458	10 0c		bpl $8466			bpl 	_GDXNotNegative
.845a	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.845c	38		sec				sec
.845d	ed 4f 06	sbc $064f			sbc 	GXDiffX
.8460	8d 4f 06	sta $064f			sta 	GXDiffX
.8463	ce 52 06	dec $0652			dec 	GXDXNegative 				; -ve flag = $FF.
.8466					_GDXNotNegative:
.8466	9c 51 06	stz $0651			stz 	GXIsDiffYLarger 			; clear larger flag
.8469	ad 50 06	lda $0650			lda 	GXDiffY 					; set adjust and total.
.846c	8d 54 06	sta $0654			sta 	GXAdjust
.846f	ad 4f 06	lda $064f			lda 	GXDiffX
.8472	8d 55 06	sta $0655			sta 	GXTotal
.8475	ad 50 06	lda $0650			lda 	GXDiffY 					; if dy > dx
.8478	cd 4f 06	cmp $064f			cmp 	GXDiffX
.847b	90 0f		bcc $848c			bcc 	_GDXNotLarger
.847d	ce 51 06	dec $0651			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8480	ad 4f 06	lda $064f			lda 	GXDiffX 					; set adjust and total other way round
.8483	8d 54 06	sta $0654			sta 	GXAdjust
.8486	ad 50 06	lda $0650			lda 	GXDiffY
.8489	8d 55 06	sta $0655			sta 	GXTotal
.848c					_GDXNotLarger:
.848c	ad 55 06	lda $0655			lda 	GXTotal
.848f	4a		lsr a				lsr 	a
.8490	8d 53 06	sta $0653			sta 	GXPosition
.8493	60		rts				rts
.064f					GXDiffX:
>064f							.fill 	1
.0650					GXDiffY:
>0650							.fill 	1
.0651					GXIsDiffYLarger:
>0651							.fill 	1
.0652					GXDXNegative:
>0652							.fill 	1
.0653					GXPosition:
>0653							.fill 	1
.0654					GXAdjust:
>0654							.fill 	1
.0655					GXTotal:
>0655							.fill 	1
.0656					GXAddSelect:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8494					GXSetColourMode:
.8494	a6 36		ldx $36				ldx 	gxzTemp0
.8496	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.8499	a5 37		lda $37				lda 	gxzTemp0+1 								;
.849b	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.849e	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84a0	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a3	ae 40 06	ldx $0640			ldx 	gxColour
.84a6	8e 41 06	stx $0641			stx 	gxEORValue
.84a9	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84ab	90 03		bcc $84b0			bcc 	_GXSDCNotAndColour
.84ad	8e 42 06	stx $0642			stx 	gxANDValue
.84b0					_GXSDCNotAndColour:
.84b0	d0 03		bne $84b5			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84b2	9c 41 06	stz $0641			stz 	gxEORValue
.84b5					_GXSDCNotAnd:
.84b5	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b6	90 08		bcc $84c0			bcc 	_GXSDCNoFlip
.84b8	ad 42 06	lda $0642			lda	 	gxANDValue
.84bb	49 ff		eor #$ff			eor 	#$FF
.84bd	8d 42 06	sta $0642			sta 	gxANDValue
.84c0					_GXSDCNoFlip:
.84c0	18		clc				clc
.84c1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84c2					GXPlotPoint:
.84c2	20 df 87	jsr $87df			jsr 	GXOpenBitmap 				; start drawing
.84c5	20 fd 87	jsr $87fd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c8	ac 45 06	ldy $0645			ldy 	gsOffset
.84cb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84cd	2d 42 06	and $0642			and 	gxANDValue
.84d0	4d 41 06	eor $0641			eor 	gxEORValue
.84d3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d5	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d8	18		clc				clc
.84d9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84da					GXFillRectangle:
.84da	38		sec				sec
.84db	80 01		bra $84de			bra 	GXRectangle
.84dd					GXFrameRectangle:
.84dd	18		clc				clc
.84de					GXRectangle:
.84de	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84e1	f0 35		beq $8518			beq 	_GXRFail
.84e3	08		php				php 								; save Fill flag (CS)
.84e4	20 df 87	jsr $87df			jsr 	GXOpenBitmap 				; start drawing
.84e7	20 b5 88	jsr $88b5			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84ea	20 fd 87	jsr $87fd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ed	38		sec				sec 								; sec = Draw line
.84ee	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84f1	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.84f4	cd 38 06	cmp $0638			cmp 	gxY1
.84f7	f0 19		beq $8512			beq 	_GXRectangleExit
.84f9					_GXRectLoop:
.84f9	20 53 88	jsr $8853			jsr 	GXMovePositionDown 			; down one.
.84fc	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.84ff	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8502	cd 38 06	cmp $0638			cmp 	gXY1
.8505	f0 07		beq $850e			beq 	_GXLastLine
.8507	28		plp				plp 								; get flag back
.8508	08		php				php
.8509	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0 				; draw horizontal line
.850c	80 eb		bra $84f9			bra 	_GXRectLoop
.850e					_GXLastLine:
.850e	38		sec				sec
.850f	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0
.8512					_GXRectangleExit:
.8512	68		pla				pla 								; throw fill flag.
.8513	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap 				; stop drawing and exit
.8516	18		clc				clc
.8517	60		rts				rts
.8518					_GXRFail:
.8518	38		sec				sec
.8519	60		rts				rts
.851a					GXDrawLineX1X0:
.851a	08		php				php 								; save solid/either-end
.851b	38		sec				sec
.851c	ad 36 06	lda $0636			lda		gXX1
.851f	ed 32 06	sbc $0632			sbc 	gXX0
.8522	85 36		sta $36				sta 	gxzTemp0
.8524	ad 37 06	lda $0637			lda 	gXX1+1
.8527	ed 33 06	sbc $0633			sbc 	gXX0+1
.852a	85 37		sta $37				sta 	gxzTemp0+1
.852c	28		plp				plp
.852d					GXDrawLineTemp0:
.852d	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852f	48		pha				pha
.8530	a5 3d		lda $3d				lda 	gxzScreen+1
.8532	48		pha				pha
.8533	ad 45 06	lda $0645			lda 	gsOffset
.8536	48		pha				pha
.8537	a5 0b		lda $0b				lda 	GXEditSlot
.8539	48		pha				pha
.853a	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.853d	90 1e		bcc $855d			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853f					_GXDLTLine:
.853f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8541	2d 42 06	and $0642			and 	gxANDValue
.8544	4d 41 06	eor $0641			eor 	gxEORValue
.8547	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8549	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.854b	d0 04		bne $8551			bne 	_GXDLTNoBorrow
.854d	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854f	30 2e		bmi $857f			bmi 	_GXDLTExit
.8551					_GXDLTNoBorrow:
.8551	c6 36		dec $36				dec 	gxzTemp0
.8553	c8		iny				iny 								; next slot.
.8554	d0 e9		bne $853f			bne 	_GXDLTLine
.8556	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8558	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap				; check for new page.
.855b	80 e2		bra $853f			bra 	_GXDLTLine
.855d					_GXDLTEndPoints:
.855d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855f	2d 42 06	and $0642			and 	gxANDValue
.8562	4d 41 06	eor $0641			eor 	gxEORValue
.8565	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8567	98		tya				tya 								; advance to right side
.8568	18		clc				clc
.8569	65 36		adc $36				adc 	gxzTemp0
.856b	a8		tay				tay
.856c	a5 3d		lda $3d				lda 	gxzScreen+1
.856e	65 37		adc $37				adc 	gxzTemp0+1
.8570	85 3d		sta $3d				sta 	gxzScreen+1
.8572	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap 			; fix up.
.8575	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8577	2d 42 06	and $0642			and 	gxANDValue
.857a	4d 41 06	eor $0641			eor 	gxEORValue
.857d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857f					_GXDLTExit:
.857f	68		pla				pla
.8580	85 0b		sta $0b				sta 	GXEditSlot
.8582	68		pla				pla
.8583	8d 45 06	sta $0645			sta 	gsOffset
.8586	68		pla				pla
.8587	85 3d		sta $3d				sta 	gxzScreen+1
.8589	68		pla				pla
.858a	85 3c		sta $3c				sta 	gxzScreen
.858c	60		rts				rts
.858d					GXDLTCheckWrap:
.858d	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8591	90 06		bcc $8599			bcc 	_GXDLTCWExit
.8593	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8595	85 3d		sta $3d				sta 	gxzScreen+1
.8597	e6 0b		inc $0b				inc 	GXEditSlot
.8599					_GXDLTCWExit:
.8599	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.859a					GXDrawGraphicElement:
.859a	8d 57 06	sta $0657			sta 	gxSize 						; save size
.859d	3a		dec a				dec 	a
.859e	8d 58 06	sta $0658			sta 	gxMask 						; and mask
.85a1	9c 5c 06	stz $065c			stz 	gxVFlip 					; set the flip bytes
.85a4	9c 5d 06	stz $065d			stz 	gxHFlip
.85a7	2c 5e 06	bit $065e			bit 	gxUseMode
.85aa	10 03		bpl $85af			bpl 	_GXNotVertical
.85ac	8d 5c 06	sta $065c			sta 	gxVFlip
.85af					_GXNotVertical:
.85af	50 03		bvc $85b4			bvc 	_GXNotHorizontal
.85b1	8d 5d 06	sta $065d			sta 	gxHFlip
.85b4					_GXNotHorizontal:
.85b4	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b7	f0 5f		beq $8618			beq 	_GXSLFail
.85b9	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bc	48		pha				pha
.85bd	8c 5a 06	sty $065a			sty 	gxAcquireVector+1 			; and acquisition vector
.85c0	8e 59 06	stx $0659			stx 	gxAcquireVector
.85c3	20 df 87	jsr $87df			jsr 	gxOpenBitmap 				; open the bitmap.
.85c6	ad 5e 06	lda $065e			lda 	gxUseMode 					; scale bits
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	4a		lsr a				lsr 	a
.85cc	29 07		and #$07			and		#7
.85ce	1a		inc a				inc 	a
.85cf	8d 5b 06	sta $065b			sta 	gxScale
.85d2	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d4					_GXGELoop:
.85d4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d6	4d 5c 06	eor $065c			eor 	gxVFlip
.85d9	aa		tax				tax 								; get the Xth line.
.85da	20 1a 86	jsr $861a			jsr 	_GXCallAcquire 				; get that data.
.85dd	ad 5b 06	lda $065b			lda 	gxScale 					; do scale identical copies of that line.
.85e0	85 39		sta $39				sta 	gxzTemp1+1
.85e2					_GXGELoop2:
.85e2	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85e5	cd 3e 06	cmp $063e			cmp 	gxHeight
.85e8	b0 10		bcs $85fa			bcs 	_GXDGEExit
.85ea	20 1d 86	jsr $861d			jsr 	GXRenderOneLine 			; render line
.85ed	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85ef	d0 f1		bne $85e2			bne 	_GXGELoop2
.85f1	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f3	a5 38		lda $38				lda 	gxzTemp1
.85f5	cd 57 06	cmp $0657			cmp 	gxSize
.85f8	d0 da		bne $85d4			bne 	_GXGELoop
.85fa					_GXDGEExit:
.85fa	68		pla				pla 								; restore Y for next time
.85fb	8d 34 06	sta $0634			sta 	gxY0
.85fe	ae 5b 06	ldx $065b			ldx 	gxScale 					; get scale (1-8)
.8601					_GXShiftLeft:
.8601	18		clc				clc
.8602	ad 57 06	lda $0657			lda 	gxSize
.8605	6d 32 06	adc $0632			adc 	gxX0
.8608	8d 32 06	sta $0632			sta 	gxX0
.860b	90 03		bcc $8610			bcc 	_GXSLNoCarry
.860d	ee 33 06	inc $0633			inc 	gxX0+1
.8610					_GXSLNoCarry:
.8610	ca		dex				dex
.8611	d0 ee		bne $8601			bne 	_GXShiftLeft
.8613	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap
.8616	18		clc				clc
.8617	60		rts				rts
.8618					_GXSLFail:
.8618	38		sec				sec
.8619	60		rts				rts
.861a					_GXCallAcquire:
.861a	6c 59 06	jmp ($0659)			jmp 	(gxAcquireVector)
.861d					GXRenderOneLine:
.861d	20 fd 87	jsr $87fd			jsr 	GXPositionCalc 				; calculate position/offset.
.8620	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.8623	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8625					_GXROLLoop1:
.8625	ad 5b 06	lda $065b			lda 	gxScale 					; set to do 'scale' times
.8628	85 3b		sta $3b				sta 	gxzTemp2+1
.862a					_GXROLLoop2:
.862a	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.862c	4d 5d 06	eor $065d			eor 	gxHFlip
.862f	aa		tax				tax 								; read from the pixel buffer
.8630	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8633	d0 07		bne $863c			bne 	_GXDraw 					; draw if non zero
.8635	ad 5e 06	lda $065e			lda 	gxUseMode 					; check to see if solid background
.8638	29 04		and #$04			and 	#4
.863a	f0 0a		beq $8646			beq 	_GXZeroPixel
.863c					_GXDraw:
.863c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.863e	2d 42 06	and $0642			and 	gxANDValue
.8641	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8644	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8646					_GXZeroPixel:
.8646	c8		iny				iny 								; advance pointer
.8647	d0 05		bne $864e			bne 	_GXNoShift
.8649	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.864b	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap				; check for new page.
.864e					_GXNoShift:
.864e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8650	d0 d8		bne $862a			bne 	_GXROLLoop2
.8652	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8654	a5 3a		lda $3a				lda 	gxzTemp2
.8656	cd 57 06	cmp $0657			cmp 	gxSize
.8659	d0 ca		bne $8625			bne 	_GXROLLoop1
.865b	ee 34 06	inc $0634			inc 	gxY0
.865e	60		rts				rts
.0657					gxSize:
>0657							.fill 	1
.0658					gxMask:
>0658							.fill 	1
.0659					gxAcquireVector:
>0659							.fill 	2
.065b					gxScale:
>065b							.fill 	1
.065c					gxVFlip:
>065c							.fill 	1
.065d					gxHFlip:
>065d							.fill 	1
.065e					gxUseMode:
>065e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.865f					GXFontHandler:
.865f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8661	4d 3f 06	eor $063f			eor 	gxMode
.8664	8d 5e 06	sta $065e			sta 	gxUseMode
.8667	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8669	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.866b	26 37		rol $37				rol	 	gxzTemp0+1
.866d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.866f	26 37		rol $37				rol	 	gxzTemp0+1
.8671	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8673	26 37		rol $37				rol	 	gxzTemp0+1
.8675	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8677	09 c0		ora #$c0			ora 	#$C0
.8679	85 37		sta $37				sta 	gxzTemp0+1
.867b	a9 08		lda #$08			lda 	#8 							; size 8x8
.867d	a2 85		ldx #$85			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.867f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8681	20 9a 85	jsr $859a			jsr 	GXDrawGraphicElement
.8684	60		rts				rts
.8685					GXGetGraphicDataFont:
.8685	8a		txa				txa 								; X->Y
.8686	a8		tay				tay
.8687	a6 01		ldx $01				ldx 	1 							; preserve old value
.8689	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.868b	85 01		sta $01				sta 	1
.868d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.868f	86 01		stx $01				stx 	1 							; put old value back.
.8691	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8693					_GXExpand:
.8693	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8696	0a		asl a				asl 	a 							; shift bit 7 into C
.8697	90 08		bcc $86a1			bcc 	_GXNoPixel
.8699	48		pha				pha 								; if set, set pixel buffer to current colour.
.869a	ad 40 06	lda $0640			lda 	gxColour
.869d	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86a0	68		pla				pla
.86a1					_GXNoPixel:
.86a1	e8		inx				inx 								; do the whole byte.
.86a2	e0 08		cpx #$08			cpx 	#8
.86a4	d0 ed		bne $8693			bne 	_GXExpand
.86a6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a7					GXSpriteHandler:
.86a7	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a9	4d 3f 06	eor $063f			eor 	gxMode
.86ac	8d 5e 06	sta $065e			sta 	gxUseMode
.86af	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86b1	da		phx				phx
.86b2	20 df 87	jsr $87df			jsr 	GXOpenBitmap 				; can access sprite information
.86b5	68		pla				pla
.86b6	20 6e 88	jsr $886e			jsr 	GXFindSprite 				; get the sprite address
.86b9	08		php				php
.86ba	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap
.86bd	28		plp				plp
.86be	b0 0a		bcs $86ca			bcs		_GXSHExit 					; exit if find failed.
.86c0	ad 5f 06	lda $065f			lda 	GXSizePixels 				; return size
.86c3	a2 cb		ldx #$cb			ldx 	#GXSpriteAcquire & $FF
.86c5	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c7	20 9a 85	jsr $859a			jsr 	GXDrawGraphicElement
.86ca					_GXSHExit:
.86ca	60		rts				rts
.86cb					GXSpriteAcquire:
.86cb	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86ce	85 0b		sta $0b				sta 	GXEditSlot
.86d0	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86d2	a9 00		lda #$00			lda 	#0
.86d4	ae 60 06	ldx $0660			ldx 	GXSizeBits
.86d7					_GXTimesRowNumber:
.86d7	18		clc				clc
.86d8	65 36		adc $36				adc 	zTemp0
.86da	ca		dex				dex
.86db	10 fa		bpl $86d7			bpl 	_GXTimesRowNumber
.86dd	64 37		stz $37				stz 	gxzTemp0+1
.86df	0a		asl a				asl 	a 							; row x 2,4,6,8
.86e0	26 37		rol $37				rol 	gxzTemp0+1
.86e2	0a		asl a				asl 	a 							; row x 4,8,12,16
.86e3	26 37		rol $37				rol 	gxzTemp0+1
.86e5	0a		asl a				asl 	a 							; row x 8,16,24,32
.86e6	26 37		rol $37				rol 	gxzTemp0+1
.86e8	85 36		sta $36				sta 	gxzTemp0
.86ea	18		clc				clc 								; add base address.
.86eb	a5 36		lda $36				lda 	gxzTemp0
.86ed	6d 62 06	adc $0662			adc 	GXSpriteOffset
.86f0	85 36		sta $36				sta 	gxzTemp0
.86f2	a5 37		lda $37				lda 	gxzTemp0+1
.86f4	6d 63 06	adc $0663			adc 	GXSpriteOffset+1
.86f7					_GXSAFindPage:
.86f7	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f9	90 06		bcc $8701			bcc 	_GXSAFoundPage
.86fb	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86fd	e6 0b		inc $0b				inc 	GXEditSlot
.86ff	80 f6		bra $86f7			bra 	_GXSAFindPage
.8701					_GXSAFoundPage:
.8701	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8703	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8705	a0 00		ldy #$00			ldy 	#0
.8707					_GXSACopyLoop:
.8707	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8709	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.870c	c8		iny				iny
.870d	cc 5f 06	cpy $065f			cpy 	GXSizePixels
.8710	d0 f5		bne $8707			bne 	_GXSACopyLoop
.8712	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8713					GXSelect:
.8713	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8716	f0 1f		beq $8737			beq 	_GXSFail
.8718	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.871a	c9 40		cmp #$40			cmp 	#64
.871c	b0 19		bcs $8737			bcs 	_GXSFail
.871e	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8720	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8722	06 36		asl $36				asl 	gxzTemp0
.8724	06 36		asl $36				asl 	gxzTemp0
.8726	06 36		asl $36				asl 	gxzTemp0
.8728	2a		rol a				rol 	a
.8729	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.872b	8d 47 06	sta $0647			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.872e	85 37		sta $37				sta 	gxzTemp0+1
.8730	a5 36		lda $36				lda 	gxzTemp0
.8732	8d 46 06	sta $0646			sta 	GSCurrentSprite
.8735	18		clc				clc
.8736	60		rts				rts
.8737					_GXSFail:
.8737	38		sec				sec
.8738	60		rts				rts
.8739					GXSelectImage:
.8739	ad 3a 06	lda $063a			lda 	gxSpritesOn
.873c	f0 63		beq $87a1			beq 	_GXSIFail
.873e	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.8741	f0 5e		beq $87a1			beq 	_GXSIFail
.8743	64 01		stz $01				stz 	1
.8745	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8747	d0 45		bne $878e			bne 	_GXSIHide
.8749	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.874b	48		pha				pha
.874c	20 df 87	jsr $87df			jsr 	GXOpenBitmap
.874f	68		pla				pla
.8750	20 6e 88	jsr $886e			jsr 	GXFindSprite
.8753	b0 49		bcs $879e			bcs 	_GXSICloseFail 				; no image
.8755	a0 01		ldy #$01			ldy 	#1
.8757	ad 46 06	lda $0646			lda 	GSCurrentSprite
.875a	85 36		sta $36				sta 	gxzTemp0
.875c	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.875f	85 37		sta $37				sta 	gxzTemp0+1
.8761	ad 62 06	lda $0662			lda 	GXSpriteOffset
.8764	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8766	18		clc				clc
.8767	ad 63 06	lda $0663			lda 	GXSpriteOffset+1
.876a	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.876d	c8		iny				iny
.876e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8770	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.8773	69 00		adc #$00			adc 	#0
.8775	c8		iny				iny
.8776	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8778	ad 60 06	lda $0660			lda 	GXSizeBits 					; get raw size
.877b	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.877d	2a		rol a				rol 	a 							; x 2
.877e	0a		asl a				asl 	a 							; x 4
.877f	0a		asl a				asl 	a 							; x 8
.8780	0a		asl a				asl 	a 							; x 16
.8781	0d 61 06	ora $0661			ora 	GXSpriteLUT 						; Or with LUT
.8784	0a		asl a				asl 	a 							; 1 shift
.8785	09 01		ora #$01			ora 	#1 							; enable sprite.
.8787	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8789	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap
.878c	18		clc				clc
.878d	60		rts				rts
.878e					_GXSIHide:
.878e	ad 46 06	lda $0646			lda 	GSCurrentSprite
.8791	85 36		sta $36				sta 	gxzTemp0
.8793	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8796	85 37		sta $37				sta 	gxzTemp0+1
.8798	a9 00		lda #$00			lda 	#0
.879a	92 36		sta ($36)			sta 	(gxzTemp0)
.879c	18		clc				clc
.879d	60		rts				rts
.879e					_GXSICloseFail:
.879e	20 f0 87	jsr $87f0			jsr 	GXCloseBitmap
.87a1					_GXSIFail:
.87a1	38		sec				sec
.87a2	60		rts				rts
.87a3					GXMoveSprite:
.87a3	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87a6	f0 35		beq $87dd			beq 	_GXSIFail
.87a8	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.87ab	f0 30		beq $87dd			beq 	_GXSIFail
.87ad	85 37		sta $37				sta 	gxzTemp0+1
.87af	a0 04		ldy #$04			ldy 	#4
.87b1	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87b4	85 36		sta $36				sta 	gxzTemp0
.87b6	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87b8	38		sec				sec
.87b9	ed 5f 06	sbc $065f			sbc 	GXSizePixels
.87bc	4a		lsr a				lsr 	a
.87bd	48		pha				pha
.87be	18		clc				clc
.87bf	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.87c2	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c4	c8		iny				iny
.87c5	ad 33 06	lda $0633			lda 	gxX0+1
.87c8	69 00		adc #$00			adc 	#0
.87ca	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87cc	c8		iny				iny
.87cd	68		pla				pla
.87ce	18		clc				clc
.87cf	6d 34 06	adc $0634			adc 	gxY0
.87d2	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d4	a9 00		lda #$00			lda 	#0
.87d6	69 00		adc #$00			adc 	#0
.87d8	c8		iny				iny
.87d9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87db	18		clc				clc
.87dc	60		rts				rts
.87dd					_GXSIFail:
.87dd	38		sec				sec
.87de	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87df					GXOpenBitmap:
.87df	78		sei				sei 								; no interrupts here
.87e0	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87e2	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.87e5	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87e7	85 00		sta $00				sta 	0
.87e9	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87eb	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.87ee	58		cli				cli
.87ef	60		rts				rts
.87f0					GXCloseBitmap:
.87f0	78		sei				sei
.87f1	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87f4	85 0b		sta $0b				sta 	GXEditSlot
.87f6	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87f9	85 00		sta $00				sta 	0
.87fb	58		cli				cli
.87fc	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87fd					GXPositionCalc:
.87fd	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87ff	48		pha				pha
.8800	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8803	85 3c		sta $3c				sta 	gxzScreen
.8805	64 3d		stz $3d				stz 	gxzScreen+1
.8807	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8809	26 3d		rol $3d				rol 	gxzScreen+1
.880b	06 3c		asl $3c				asl 	gxzScreen
.880d	26 3d		rol $3d				rol 	gxzScreen+1
.880f	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8810	65 3c		adc $3c				adc 	gxzScreen
.8812	85 3c		sta $3c				sta 	gxzScreen
.8814	90 02		bcc $8818			bcc 	_GXPCNoCarry
.8816	e6 3d		inc $3d				inc 	gxzScreen+1
.8818					_GXPCNoCarry:
.8818	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.881a	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.881c	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.881e	85 36		sta $36				sta 	gxzTemp0
.8820	64 3d		stz $3d				stz 	gxzScreen+1
.8822	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8824					_GXPCMultiply32:
.8824	06 3c		asl $3c				asl 	gxzScreen
.8826	26 3d		rol $3d				rol 	gxzScreen+1
.8828	3a		dec a				dec 	a
.8829	d0 f9		bne $8824			bne 	_GXPCMultiply32
.882b	18		clc				clc
.882c	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.882f	65 3c		adc $3c				adc 	gxzScreen
.8831	8d 45 06	sta $0645			sta 	gsOffset
.8834	ad 33 06	lda $0633			lda 	GXX0+1
.8837	65 3d		adc $3d				adc 	gxzScreen+1
.8839	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.883b	90 04		bcc $8841			bcc 	_GXPCNoOverflow
.883d	29 1f		and #$1f			and 	#$1F 						; fix it up
.883f	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8841					_GXPCNoOverflow:
.8841	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8843	85 3d		sta $3d				sta 	gxzScreen+1
.8845	64 3c		stz $3c				stz 	gxzScreen
.8847	18		clc				clc
.8848	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.884a	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.884d	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.884f	68		pla				pla
.8850	85 36		sta $36				sta 	gxzTemp0
.8852	60		rts				rts
.8853					GXMovePositionDown:
.8853	18		clc				clc 								; add 320 to offset/temp+1
.8854	ad 45 06	lda $0645			lda 	gsOffset
.8857	69 40		adc #$40			adc 	#64
.8859	8d 45 06	sta $0645			sta 	gsOffset
.885c	a5 3d		lda $3d				lda 	gxzScreen+1
.885e	69 01		adc #$01			adc 	#1
.8860	85 3d		sta $3d				sta 	gxzScreen+1
.8862	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8864	90 07		bcc $886d			bcc 	_GXMPDExit
.8866	38		sec				sec  								; next page
.8867	e9 20		sbc #$20			sbc 	#$20
.8869	85 3d		sta $3d				sta 	gxzScreen+1
.886b	e6 0b		inc $0b				inc 	GXEditSlot
.886d					_GXMPDExit:
.886d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.886e					GXFindSprite:
.886e	aa		tax				tax
.886f	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8872	85 0b		sta $0b				sta 	GXEditSlot
.8874	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.8877	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.887a	f0 33		beq $88af			beq 	_GXFSFail
.887c	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.887f	8d 63 06	sta $0663			sta 	GXSpriteOffset+1
.8882	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8885	48		pha				pha 								; save twice
.8886	48		pha				pha
.8887	29 03		and #$03			and 	#3 							; get sprite size
.8889	8d 60 06	sta $0660			sta 	GXSizeBits 					; save raw (0-3)
.888c	aa		tax				tax
.888d	bd b1 88	lda $88b1,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8890	8d 5f 06	sta $065f			sta 	GXSizePixels 					; save (8/16/24/32)
.8893	68		pla				pla 								; get LUT
.8894	4a		lsr a				lsr		a
.8895	4a		lsr a				lsr		a
.8896	29 03		and #$03			and 	#3
.8898	8d 61 06	sta $0661			sta 	GXSpriteLUT
.889b	68		pla				pla 								; address, neeeds to be x 4
.889c	29 f0		and #$f0			and 	#$F0
.889e	8d 62 06	sta $0662			sta 	GXSpriteOffset
.88a1	0e 62 06	asl $0662			asl 	GXSpriteOffset
.88a4	2e 63 06	rol $0663			rol 	GXSpriteOffset+1
.88a7	0e 62 06	asl $0662			asl 	GXSpriteOffset
.88aa	2e 63 06	rol $0663			rol 	GXSpriteOffset+1
.88ad	18		clc				clc
.88ae	60		rts				rts
.88af					_GXFSFail:
.88af	38		sec				sec
.88b0	60		rts				rts
.88b1					_GXFXSSTTable:
>88b1	08 10 18 20					.byte 	8,16,24,32
.065f					GXSizePixels:
>065f							.fill 	1
.0660					GXSizeBits:
>0660							.fill 	1
.0661					GXSpriteLUT:
>0661							.fill 	1
.0662					GXSpriteOffset:
>0662							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88b5					GXSortXY:
.88b5	20 d3 88	jsr $88d3			jsr 	GXSortY 					; will be sorted on Y now
.88b8	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.88bb	cd 36 06	cmp $0636			cmp 	gxX1
.88be	ad 33 06	lda $0633			lda 	gXX0+1
.88c1	ed 37 06	sbc $0637			sbc 	gXX1+1
.88c4	90 0c		bcc $88d2			bcc 	_GXSXYExit 					; X0 < X1 exit
.88c6	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88c8	a0 04		ldy #$04			ldy 	#4
.88ca	20 e7 88	jsr $88e7			jsr 	GXSwapXY
.88cd	e8		inx				inx
.88ce	c8		iny				iny
.88cf	20 e7 88	jsr $88e7			jsr 	GXSwapXY
.88d2					_GXSXYExit:
.88d2	60		rts				rts
.88d3					GXSortY:
.88d3	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.88d6	cd 38 06	cmp $0638			cmp 	gxY1
.88d9	90 0b		bcc $88e6			bcc 	_GXSYSorted
.88db	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88dd	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88df					_GXSwap1:
.88df	20 e7 88	jsr $88e7			jsr 	GXSwapXY
.88e2	88		dey				dey
.88e3	ca		dex				dex
.88e4	10 f9		bpl $88df			bpl 	_GXSwap1
.88e6					_GXSYSorted:
.88e6	60		rts				rts
.88e7					GXSwapXY:
.88e7	bd 32 06	lda $0632,x			lda 	gxX0,x
.88ea	48		pha				pha
.88eb	b9 32 06	lda $0632,y			lda 	gxX0,y
.88ee	9d 32 06	sta $0632,x			sta 	gxX0,x
.88f1	68		pla				pla
.88f2	99 32 06	sta $0632,y			sta 	gxX0,y
.88f5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88f6					AssembleGroup1:
.88f6	a9 ff		lda #$ff			lda 	#$FF
.88f8	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88fb	80 02		bra $88ff			bra 	AsmGroup12
.88fd					AssembleGroup2:
.88fd	a5 00		lda $00				lda 	$00
.88ff					AsmGroup12:
.88ff	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8902	68		pla				pla 								; pop the return address to access the information following.
.8903	fa		plx				plx
.8904	20 8d 89	jsr $898d			jsr 	AccessParameters 			; get opcode and save as base
.8907	8d a4 04	sta $04a4			sta 	BaseOpcode
.890a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.890d	d0 08		bne $8917			bne 	_AG12HaveMask
.890f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8911	20 95 89	jsr $8995			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8914	8d a5 04	sta $04a5			sta 	ModeMask
.8917					_AG12HaveMask:
.8917	20 d0 8a	jsr $8ad0			jsr 	TypeAndCalculateOperand 	; get zero page type
.891a	da		phx				phx 								; save found address mode
.891b	20 f9 89	jsr $89f9			jsr 	AssembleModeX
.891e	fa		plx				plx  								; restore address mode
.891f	b0 0b		bcs $892c			bcs 	_AG12Exit
.8921	20 2d 89	jsr $892d			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8924	20 f9 89	jsr $89f9			jsr 	AssembleModeX
.8927	b0 03		bcs $892c			bcs 	_AG12Exit
.8929	4c e9 b3	jmp $b3e9			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.892c					_AG12Exit:
.892c	60		rts				rts
.892d					PromoteToAbsolute:
.892d	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.892f	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8931	f0 19		beq $894c			beq 	_PTADo
.8933	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8935	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8937	f0 13		beq $894c			beq 	_PTADo
.8939	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.893b	e0 80		cpx #$80			cpx 	#AM_ZEROY
.893d	f0 0d		beq $894c			beq 	_PTADo
.893f	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8941	e0 d1		cpx #$d1			cpx 	#AM_IND
.8943	f0 07		beq $894c			beq 	_PTADo
.8945	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8947	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8949	f0 01		beq $894c			beq 	_PTADo
.894b	60		rts				rts
.894c					_PTADo:
.894c	aa		tax				tax
.894d	60		rts				rts
.894e					AssembleGroup3:
.894e	68		pla				pla 								; get parameters, which is just the opcode.
.894f	fa		plx				plx
.8950	20 8d 89	jsr $898d			jsr 	AccessParameters 			; get and output opcode
.8953	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte
.8956	20 34 8b	jsr $8b34			jsr 	CalculateOperand 			; get a 16 bit operand
.8959	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.895c	38		sec				sec
.895d	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8960	48		pha				pha 								; LSB in A
.8961	ad 10 04	lda $0410			lda 	NSMantissa1
.8964	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8967	aa		tax				tax 								; MSB in X
.8968	68		pla				pla
.8969	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.896a	69 7f		adc #$7f			adc 	#$7F
.896c	90 01		bcc $896f			bcc 	_AG3NoCarry
.896e	e8		inx				inx
.896f					_AG3NoCarry:
.896f	38		sec				sec 								; fix back and write out anyways.
.8970	e9 80		sbc #$80			sbc 	#$80
.8972	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte
.8975	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8977	f0 0a		beq $8983			beq 	_AG3Exit
.8979	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.897c	29 01		and #$01			and 	#1
.897e	f0 03		beq $8983			beq 	_AG3Exit
.8980	4c ee b3	jmp $b3ee			jmp 	RangeError 					; no, branch is out of range
.8983					_AG3Exit:
.8983	60		rts				rts
.8984					AssembleGroup4:
.8984	68		pla				pla 								; pop address
.8985	fa		plx				plx
.8986	20 8d 89	jsr $898d			jsr 	AccessParameters 			; access and get first
.8989	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte 			; output it.
.898c	60		rts				rts
.898d					AccessParameters:
.898d	8d a1 04	sta $04a1			sta 	ParamStart
.8990	8e a2 04	stx $04a2			stx 	ParamStart+1
.8993	a9 01		lda #$01			lda 	#1
.8995					GetParameter:
.8995	5a		phy				phy
.8996	a8		tay				tay
.8997	ad a1 04	lda $04a1			lda 	ParamStart
.899a	85 36		sta $36				sta 	zTemp0
.899c	ad a2 04	lda $04a2			lda 	ParamStart+1
.899f	85 37		sta $37				sta 	zTemp0+1
.89a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.89a3	7a		ply				ply
.89a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.89a5					AssemblerWriteByte:
.89a5	48		pha			pha
.89a6	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.89a9	29 02		and #$02		and 	#2
.89ab	f0 1b		beq $89c8		beq 	_AWBNoPrint
.89ad	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.89b0	20 e3 89	jsr $89e3		jsr 	PrintHex
.89b3	ad 9e 04	lda $049e		lda		AssemblerAddress
.89b6	20 e3 89	jsr $89e3		jsr 	PrintHex
.89b9	a9 20		lda #$20		lda 	#' '
.89bb	20 a4 b5	jsr $b5a4		jsr 	EXTPrintCharacter
.89be	68		pla			pla 									; print byte
.89bf	48		pha			pha
.89c0	20 e3 89	jsr $89e3		jsr 	PrintHex
.89c3	a9 0d		lda #$0d		lda 	#13
.89c5	20 a4 b5	jsr $b5a4		jsr 	EXTPrintCharacter
.89c8					_AWBNoPrint:
.89c8	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89cb	85 36		sta $36			sta 	zTemp0
.89cd	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89d0	f0 0e		beq $89e0		beq 	_AWBRange
.89d2	85 37		sta $37			sta 	zTemp0+1
.89d4	68		pla			pla 									; write byte out
.89d5	92 36		sta ($36)		sta 	(zTemp0)
.89d7	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89da	d0 03		bne $89df		bne 	_AWBNoCarry
.89dc	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89df					_AWBNoCarry:
.89df	60		rts			rts
.89e0					_AWBRange:
.89e0	4c ee b3	jmp $b3ee		jmp 	RangeError
.89e3					PrintHex:
.89e3	48		pha				pha
.89e4	4a		lsr a				lsr 	a
.89e5	4a		lsr a				lsr 	a
.89e6	4a		lsr a				lsr 	a
.89e7	4a		lsr a				lsr 	a
.89e8	20 ec 89	jsr $89ec			jsr 	_PrintNibble
.89eb	68		pla				pla
.89ec					_PrintNibble:
.89ec	29 0f		and #$0f			and 	#15
.89ee	c9 0a		cmp #$0a			cmp 	#10
.89f0	90 02		bcc $89f4			bcc 	_NoShift
.89f2	69 06		adc #$06			adc 	#6
.89f4					_NoShift:
.89f4	69 30		adc #$30			adc 	#48
.89f6	4c a4 b5	jmp $b5a4			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89f9					AssembleModeX:
.89f9	5a		phy				phy
.89fa	ad a3 04	lda $04a3			lda 	IsGroup1
.89fd	f0 17		beq $8a16			beq 	_AMXGroup2
.89ff	8a		txa				txa 							; is it in group # 1
.8a00	29 40		and #$40			and 	#AM_ISG1
.8a02	f0 50		beq $8a54			beq 	_AMXFail 				; no, give up.
.8a04	8a		txa				txa 							; get back.
.8a05	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a07	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a09	d0 22		bne $8a2d			bne 	_AMXHaveInfo
.8a0b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a0e	c9 81		cmp #$81			cmp 	#$81
.8a10	f0 42		beq $8a54			beq 	_AMXFail
.8a12	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a14	80 17		bra $8a2d			bra 	_AMXHaveInfo 			; odd design decision there.
.8a16					_AMXGroup2:
.8a16	8a		txa				txa 							; is it in group 2 ?
.8a17	29 20		and #$20			and 	#AM_ISG2
.8a19	f0 39		beq $8a54			beq 	_AMXFail 				; no, give up.
.8a1b	8a		txa				txa 							; get the offset into Y
.8a1c	29 1f		and #$1f			and 	#$1F
.8a1e	4a		lsr a				lsr 	a 						; make it 0-7.
.8a1f	4a		lsr a				lsr  	a
.8a20	a8		tay				tay
.8a21	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a24					_AMXCheckOkay:
.8a24	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a25	88		dey				dey
.8a26	10 fc		bpl $8a24			bpl 	_AMXCheckOkay
.8a28	90 2a		bcc $8a54			bcc 	_AMXFail 				; not allowed.
.8a2a	8a		txa				txa  							; get mask back
.8a2b	29 1f		and #$1f			and 	#$1F
.8a2d					_AMXHaveInfo:
.8a2d	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a2f	10 05		bpl $8a36			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a31	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a34	d0 1e		bne $8a54			bne 	_AMXFail
.8a36					_AMXAnySize:
.8a36	18		clc				clc 							; add offset to the base opcode
.8a37	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a3a					_AMXOutputCode:
.8a3a	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a3d	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a3f	f0 10		beq $8a51			beq 	_AMXExit
.8a41	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a44	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte
.8a47	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a49	30 06		bmi $8a51			bmi 	_AMXExit
.8a4b	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a4e	20 a5 89	jsr $89a5			jsr 	AssemblerWriteByte
.8a51					_AMXExit:
.8a51	7a		ply				ply
.8a52	38		sec				sec
.8a53	60		rts				rts
.8a54					_AMXFail:
.8a54	a0 00		ldy #$00			ldy 	#0
.8a56					_AMXCheckOddities:
.8a56	8a		txa				txa
.8a57	d9 7f 8a	cmp $8a7f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a5a	d0 16		bne $8a72			bne 	_AMXCONext
.8a5c	b9 7d 8a	lda $8a7d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a5f	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a62	d0 0e		bne $8a72			bne 	_AMXCONext
.8a64	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a66	10 05		bpl $8a6d			bpl 	_AMXCONotZero
.8a68	ad 10 04	lda $0410			lda 	NSMantissa1
.8a6b	d0 05		bne $8a72			bne 	_AMXCONext
.8a6d					_AMXCONotZero:
.8a6d	b9 7e 8a	lda $8a7e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a70	80 c8		bra $8a3a			bra 	_AMXOutputCode 			; and assemble it
.8a72					_AMXCONext:
.8a72	c8		iny				iny
.8a73	c8		iny				iny
.8a74	c8		iny				iny
.8a75	b9 7d 8a	lda $8a7d,y			lda 	ExtraOpcode+0,y 		; end of table
.8a78	d0 dc		bne $8a56			bne 	_AMXCheckOddities
.8a7a					_AMXCOFail:
.8a7a	7a		ply				ply
.8a7b	18		clc				clc
.8a7c	60		rts				rts
.8a7d					ExtraOpcode:
>8a7d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a80	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a83	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a86	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a89	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a8c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a8f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a92	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a95	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a98	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a9b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a9c					LabelHere:
.8a9c	c8		iny				iny 								; skip .
.8a9d	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a9f	20 75 a0	jsr $a075			jsr 	EvaluateTerm 				; get a term
.8aa2	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8aa5	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8aa7	d0 24		bne $8acd			bne 	_ALType
.8aa9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8aac	85 36		sta $36				sta 	zTemp0
.8aae	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ab1	85 37		sta $37				sta 	zTemp0+1
.8ab3	5a		phy				phy 								; copy address in.
.8ab4	a0 01		ldy #$01			ldy 	#1
.8ab6	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8ab9	92 36		sta ($36)			sta 	(zTemp0)
.8abb	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8abe	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac0	c8		iny				iny
.8ac1	a9 00		lda #$00			lda 	#0
.8ac3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac5	c8		iny				iny
.8ac6	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac8	c8		iny				iny
.8ac9	91 36		sta ($36),y			sta 	(zTemp0),y
.8acb	7a		ply				ply
.8acc	60		rts				rts
.8acd					_ALType:
.8acd	4c f3 b3	jmp $b3f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8ad0					TypeAndCalculateOperand:
.8ad0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad2	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ad4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ad6	f0 5b		beq $8b33			beq 	_TACOExit
.8ad8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ada	f0 57		beq $8b33			beq 	_TACOExit
.8adc	c8		iny				iny
.8add	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8adf	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ae1	f0 51		beq $8b34			beq 	CalculateOperand
.8ae3	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ae5	f0 1f		beq $8b06			beq 	_TACOIndirect
.8ae7	88		dey				dey 								; undo get of first character
.8ae8	20 34 8b	jsr $8b34			jsr 	CalculateOperand 			; get operand
.8aeb	b1 30		lda ($30),y			lda 	(codePtr),y
.8aed	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8aef	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8af1	d0 40		bne $8b33			bne 	_TACOExit
.8af3	c8		iny				iny
.8af4	20 7a ad	jsr $ad7a			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8af7	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8af9	c9 58		cmp #$58			cmp 	#'X'
.8afb	f0 36		beq $8b33			beq 	_TACOExit
.8afd	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8aff	c9 59		cmp #$59			cmp 	#'Y'
.8b01	f0 30		beq $8b33			beq 	_TACOExit
.8b03					_TACOSyntax:
.8b03	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.8b06					_TACOIndirect:
.8b06	20 34 8b	jsr $8b34			jsr 	CalculateOperand 			; get the operand
.8b09	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b0d	f0 17		beq $8b26			beq 	_TACOIndX
.8b0f	20 03 ae	jsr $ae03			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b12	b1 30		lda ($30),y			lda 	(codePtr),y
.8b14	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b16	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b18	d0 19		bne $8b33			bne 	_TACOExit
.8b1a	c8		iny				iny
.8b1b	20 7a ad	jsr $ad7a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b1e	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b20	d0 e1		bne $8b03			bne 	_TACOSyntax
.8b22	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b24	80 0d		bra $8b33			bra 	_TACOExit
.8b26					_TACOIndX:
.8b26	c8		iny				iny
.8b27	20 7a ad	jsr $ad7a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b2a	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b2c	d0 d5		bne $8b03			bne 	_TACOSyntax
.8b2e	20 03 ae	jsr $ae03			jsr 	CheckRightBracket			; check )
.8b31	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b33					_TACOExit:
.8b33	60		rts				rts
.8b34					CalculateOperand:
.8b34	48		pha				pha
.8b35	da		phx				phx
.8b36	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b38	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.8b3b	fa		plx				plx
.8b3c	68		pla				pla
.8b3d	60		rts				rts
.ad7a					TACOCheckXY:
.ad7a	b1 30		lda ($30),y			lda 	(codePtr),y
.ad7c	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ad7e	c9 40		cmp #$40			cmp 	#$40
.ad80	d0 21		bne $ada3			bne 	_TCXYFail
.ad82	b1 30		lda ($30),y			lda 	(codePtr),y
.ad84	18		clc				clc
.ad85	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad87	85 37		sta $37				sta 	zTemp0+1
.ad89	c8		iny				iny
.ad8a	b1 30		lda ($30),y			lda 	(codePtr),y
.ad8c	c8		iny				iny
.ad8d	85 36		sta $36				sta 	zTemp0
.ad8f	5a		phy				phy 								; save position
.ad90	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad92	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad94	d0 0c		bne $ada2			bne 	_TCXYPopFail
.ad96	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad98	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad9a	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ad9c	f0 08		beq $ada6			beq 	_TCXYFound
.ad9e	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ada0	f0 04		beq $ada6			beq 	_TCXYFound
.ada2					_TCXYPopFail:
.ada2	7a		ply				ply
.ada3					_TCXYFail:
.ada3	a9 00		lda #$00			lda 	#0
.ada5	60		rts				rts
.ada6					_TCXYFound:
.ada6	7a		ply				ply 								; restore position
.ada7	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ada9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b3e					EditProgramCode:
.8b3e	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8b41	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8b44	20 2d a6	jsr $a62d			jsr 	MemorySearch
.8b47	90 05		bcc $8b4e			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b49	d0 03		bne $8b4e			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b4b	20 2f b6	jsr $b62f			jsr 	MemoryDeleteLine 			; delete the line
.8b4e					_EPCNoDelete:
.8b4e	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8b51	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b53	f0 0d		beq $8b62			beq 	_EPCNoInsert
.8b55	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b58	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b5b	20 2d a6	jsr $a62d			jsr 	MemorySearch
.8b5e	18		clc				clc 								; insert at this point.
.8b5f	20 66 b6	jsr $b666			jsr 	MemoryInsertLine 			; insert the line
.8b62					_EPCNoInsert:
.8b62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b63					WarmStart:
.8b63	a2 ff		ldx #$ff			ldx 	#$FF
.8b65	9a		txs				txs
.8b66	20 ba b5	jsr $b5ba			jsr 	EXTInputLine 				; get line to lineBuffer
.8b69	20 fb aa	jsr $aafb			jsr 	TokeniseLine 				; tokenise the line
.8b6c	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8b6f	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8b72	d0 17		bne $8b8b			bne 	_WSEditCode 				; if so,edit code.
.8b74	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b77	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8b79	85 30		sta $30				sta 	codePtr
.8b7b	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b7d	85 31		sta $31				sta 	codePtr+1
.8b7f	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8b82	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b84	f0 dd		beq $8b63			beq 	WarmStart
.8b86	20 a3 94	jsr $94a3			jsr 	RUNCodePointerLine 			; execute that line.
.8b89	80 d8		bra $8b63			bra 	WarmStart
.8b8b					_WSEditCode:
.8b8b	20 3e 8b	jsr $8b3e			jsr 	EditProgramCode
.8b8e	20 fc 8b	jsr $8bfc			jsr 	ClearCommand
.8b91	80 d0		bra $8b63			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b93					AssembleCommand:
.8b93	a2 00		ldx #$00			ldx 	#0
.8b95	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger 		; start address
.8b98	ad 08 04	lda $0408			lda 	NSMantissa0
.8b9b	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b9e	ad 10 04	lda $0410			lda 	NSMantissa1
.8ba1	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8ba4	20 0b ae	jsr $ae0b			jsr 	CheckComma
.8ba7	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; options
.8baa	ad 08 04	lda $0408			lda 	NSMantissa0
.8bad	8d a0 04	sta $04a0			sta 	AssemblerControl
.8bb0	60		rts				rts
.8bb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8bb2					AssertCommand:
.8bb2	a2 00		ldx #$00			ldx 	#0
.8bb4	20 31 a5	jsr $a531			jsr 	EvaluateInteger 			; the assert test
.8bb7	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; exit if result is non zero.
.8bba	d0 05		bne $8bc1			bne 	_ACExit
.8bbc	a9 0a		lda #$0a		lda	#10
.8bbe	4c 9b 99	jmp $999b		jmp	ErrorHandler
.8bc1					_ACExit:
.8bc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bc2					CallCommand:
.8bc2	a2 00		ldx #$00			ldx 	#0
.8bc4	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.8bc7					_CCClear
.8bc7	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bc8	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.8bcb	e0 04		cpx #$04			cpx 	#4
.8bcd	d0 f8		bne $8bc7			bne 	_CCClear
.8bcf	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bd1					_CCCParam:
.8bd1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bd5	d0 09		bne $8be0			bne 	_CCCRun6502
.8bd7	c8		iny				iny 								; skip comma
.8bd8	e8		inx				inx	 								; next level
.8bd9	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bdc	e0 03		cpx #$03			cpx 	#3
.8bde	90 f1		bcc $8bd1			bcc 	_CCCParam 					; done all 3 ?
.8be0					_CCCRun6502:
.8be0	5a		phy				phy 								; save position
.8be1	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8be4	85 37		sta $37				sta 	zTemp0+1
.8be6	ad 08 04	lda $0408			lda 	NSMantissa0
.8be9	85 36		sta $36				sta 	zTemp0
.8beb	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bee	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bf1	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bf4	20 f9 8b	jsr $8bf9			jsr 	_CCCZTemp0 					; call zTemp0
.8bf7	7a		ply				ply 								; restore position and exit
.8bf8	60		rts				rts
.8bf9					_CCCZTemp0:
.8bf9	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bfc					ClearCommand:
.8bfc	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bfe	85 36		sta $36				sta 	0+zTemp0
.8c00	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c02	85 37		sta $37				sta 	1+zTemp0
.8c04					_ClearZeroLoop:
.8c04	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c06	f0 24		beq $8c2c			beq 	_ClearZeroEnd
.8c08	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c0a	a9 00		lda #$00			lda 	#0
.8c0c					_ClearOneVariable:
.8c0c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0e	c8		iny				iny
.8c0f	c0 08		cpy #$08			cpy 	#8
.8c11	d0 f9		bne $8c0c			bne 	_ClearOneVariable
.8c13	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c15	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c17	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c19	d0 04		bne $8c1f			bne 	_ClearNotProcedure
.8c1b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c1d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c1f					_ClearNotProcedure:
.8c1f	18		clc				clc 								; go to the next variable
.8c20	b2 36		lda ($36)			lda 	(zTemp0)
.8c22	65 36		adc $36				adc 	zTemp0
.8c24	85 36		sta $36				sta 	zTemp0
.8c26	90 dc		bcc $8c04			bcc 	_ClearZeroLoop
.8c28	e6 37		inc $37				inc 	zTemp0+1
.8c2a	80 d8		bra $8c04			bra 	_ClearZeroLoop
.8c2c					_ClearZeroEnd:
.8c2c	18		clc				clc
.8c2d	a5 36		lda $36				lda 	zTemp0
.8c2f	69 01		adc #$01			adc 	#1
.8c31	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c34	a5 37		lda $37				lda 	zTemp0+1
.8c36	69 00		adc #$00			adc 	#0
.8c38	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c3b	20 e7 a6	jsr $a6e7			jsr 	StackReset
.8c3e	20 49 b7	jsr $b749			jsr 	StringSystemInitialise
.8c41	20 a4 98	jsr $98a4			jsr 	ProcedureScan
.8c44	20 5f 94	jsr $945f			jsr 	Command_Restore
.8c47	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c4a	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c4d	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c50	20 68 a2	jsr $a268			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c54					ClearScreen:
.8c54	5a		phy				phy
.8c55	20 a1 b5	jsr $b5a1			jsr 	EXTClearScreen
.8c58	7a		ply				ply
.8c59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c5a					Command_Data:
.8c5a	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c5c	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c5e	20 f6 98	jsr $98f6			jsr 	ScanForward
.8c61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c62					DimCommand:
.8c62	b1 30		lda ($30),y			lda 	(codePtr),y
.8c64	29 c0		and #$c0			and 	#$C0
.8c66	c9 40		cmp #$40			cmp 	#$40
.8c68	d0 7a		bne $8ce4			bne 	_DCSyntax
.8c6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6c	18		clc				clc
.8c6d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c6f	85 3f		sta $3f				sta 	zaTemp+1
.8c71	c8		iny				iny
.8c72	b1 30		lda ($30),y			lda 	(codePtr),y
.8c74	c8		iny				iny
.8c75	85 3e		sta $3e				sta 	zaTemp
.8c77	5a		phy				phy
.8c78	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c7a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c7c	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c7e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c80	f0 62		beq $8ce4			beq 	_DCSyntax
.8c82	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c84	29 04		and #$04			and 	#NSBIsArray
.8c86	f0 64		beq $8cec			beq 	_DCType
.8c88	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c8a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c8c	d0 59		bne $8ce7			bne 	_DCRedefine
.8c8e	7a		ply				ply
.8c8f	20 ef 8c	jsr $8cef			jsr 	_DCGetSize 				; get array size, check it.
.8c92	5a		phy				phy
.8c93	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c95	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c97	7a		ply				ply 							; is there a second (e.g. ,x)
.8c98	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c9c	d0 0a		bne $8ca8			bne 	_DCOneDimension
.8c9e	c8		iny				iny 							; skip comma
.8c9f	20 ef 8c	jsr $8cef			jsr 	_DCGetSize 				; get 2nd array size
.8ca2	5a		phy				phy
.8ca3	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8ca5	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca7	7a		ply				ply
.8ca8					_DCOneDimension:
.8ca8	5a		phy				phy 							; save position
.8ca9	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8cab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cad	aa		tax				tax
.8cae	c8		iny				iny
.8caf	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cb1	e8		inx				inx 							; bump them.
.8cb2	1a		inc a				inc 	a
.8cb3	20 85 b2	jsr $b285			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8cb6	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8cb8	29 e0		and #$e0			and 	#$E0
.8cba	d0 23		bne $8cdf			bne 	_DCSize
.8cbc	a0 02		ldy #$02			ldy 	#2 						; get base type
.8cbe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cc0	20 fd 8c	jsr $8cfd			jsr 	ScaleByBaseType 		; scale by base type
.8cc3	a5 36		lda $36				lda 	zTemp0
.8cc5	a6 37		ldx $37				ldx 	zTemp0+1
.8cc7	20 2a a2	jsr $a22a			jsr 	AllocateXABytes 		; allocate memory
.8cca	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8ccc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cce	c8		iny				iny
.8ccf	8a		txa				txa
.8cd0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cd2	7a		ply				ply 							; get position back
.8cd3	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 		; check )
.8cd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd8	c8		iny				iny 							; consume in case
.8cd9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cdb	f0 85		beq $8c62			beq 	DimCommand
.8cdd	88		dey				dey 							; undo consume
.8cde	60		rts				rts
.8cdf					_DCSize:
.8cdf	a9 16		lda #$16		lda	#22
.8ce1	4c 9b 99	jmp $999b		jmp	ErrorHandler
.8ce4					_DCSyntax:
.8ce4	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.8ce7					_DCRedefine:
.8ce7	a9 15		lda #$15		lda	#21
.8ce9	4c 9b 99	jmp $999b		jmp	ErrorHandler
.8cec					_DCType:
.8cec	4c f3 b3	jmp $b3f3			jmp 	TypeError
.8cef					_DCGetSize:
.8cef	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cf1	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 	; get array dimension
.8cf4	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cf6	f0 e7		beq $8cdf			beq 	_DCSize
.8cf8	c9 fe		cmp #$fe			cmp 	#254
.8cfa	f0 e3		beq $8cdf			beq 	_DCSize
.8cfc	60		rts				rts
.8cfd					ScaleByBaseType:
.8cfd	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cff	d0 19		bne $8d1a			bne 	_SBBTString
.8d01	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8d03	48		pha				pha
.8d04	a5 36		lda $36				lda 	zTemp0
.8d06	48		pha				pha
.8d07	06 36		asl $36				asl 	zTemp0 					; x 2
.8d09	26 37		rol $37				rol 	zTemp0+1
.8d0b	06 36		asl $36				asl 	zTemp0 					; x 4
.8d0d	26 37		rol $37				rol 	zTemp0+1
.8d0f	68		pla				pla 							; add stacked value = x 5
.8d10	65 36		adc $36				adc 	zTemp0
.8d12	85 36		sta $36				sta 	zTemp0
.8d14	68		pla				pla
.8d15	65 37		adc $37				adc 	zTemp0+1
.8d17	85 37		sta $37				sta 	zTemp0+1
.8d19	60		rts				rts
.8d1a					_SBBTString:
.8d1a	06 36		asl $36				asl 	zTemp0
.8d1c	26 37		rol $37				rol 	zTemp0+1
.8d1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d1f					EndCommand:
.8d1f	4c 63 8b	jmp $8b63			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d22					UnaryEvent:
.8d22	fa		plx				plx
.8d23	20 e3 96	jsr $96e3			jsr 	TimerToStackX 				; timer in +0
.8d26	e8		inx				inx  								; put reference into +1
.8d27	20 75 a0	jsr $a075			jsr 	EvaluateTerm
.8d2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d2d	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d2f	d0 57		bne $8d88			bne 	_UEType
.8d31	e8		inx				inx 								; put the step in +2
.8d32	20 0b ae	jsr $ae0b			jsr 	CheckComma
.8d35	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.8d38	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.8d3b	ca		dex				dex
.8d3c	ca		dex				dex
.8d3d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8d40	85 36		sta $36				sta 	zTemp0
.8d42	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8d45	85 37		sta $37				sta 	zTemp0+1
.8d47	5a		phy				phy
.8d48	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d4a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d4c	30 36		bmi $8d84			bmi 	_UEFalse 					; exit if signed.
.8d4e	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d53	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d55	c8		iny				iny
.8d56	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d59	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d5b	c8		iny				iny
.8d5c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d5f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d61	90 21		bcc $8d84			bcc 	_UEFalse 					; no, return FALSE.
.8d63	18		clc				clc
.8d64	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d69	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d6c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d6e	c8		iny				iny
.8d6f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d72	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d75	91 36		sta ($36),y			sta 	(zTemp0),y
.8d77	c8		iny				iny
.8d78	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d7b	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d7e	91 36		sta ($36),y			sta 	(zTemp0),y
.8d80	7a		ply				ply
.8d81	4c 08 9a	jmp $9a08			jmp 	ReturnTrue
.8d84					_UEFalse:
.8d84	7a		ply				ply 								; restore Y
.8d85	4c 14 9a	jmp $9a14			jmp 	ReturnFalse 				; and return False
.8d88					_UEType:
.8d88	4c f3 b3	jmp $b3f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d8b					ForCommand:
.8d8b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d8d	20 82 a6	jsr $a682			jsr 	StackOpen
.8d90	a2 00		ldx #$00			ldx 	#0
.8d92	20 75 a0	jsr $a075			jsr 	EvaluateTerm
.8d95	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d98	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d9a	d0 49		bne $8de5			bne		_FCError
.8d9c	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d9e	20 13 ae	jsr $ae13			jsr 	CheckNextA
.8da1	e8		inx				inx
.8da2	20 31 a5	jsr $a531			jsr 	EvaluateInteger 			; <from> in +1
.8da5	b1 30		lda ($30),y			lda 	(codePtr),y
.8da7	c8		iny				iny 								; consume it
.8da8	48		pha				pha 								; save on stack for later
.8da9	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8dab	f0 04		beq $8db1			beq 	_FCNoSyntax
.8dad	c9 ca		cmp #$ca			cmp 	#KWD_TO
.8daf	d0 37		bne $8de8			bne 	_FCSyntaxError
.8db1					_FCNoSyntax:
.8db1	e8		inx				inx
.8db2	20 31 a5	jsr $a531			jsr 	EvaluateInteger
.8db5	20 c6 a6	jsr $a6c6			jsr 	STKSaveCodePosition 		; save loop back position
.8db8	68		pla				pla 								; restore DOWNTO or TO
.8db9	5a		phy				phy 								; save Y on the stack
.8dba	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8dbc	f0 02		beq $8dc0			beq 	_FCNotDownTo
.8dbe	a9 02		lda #$02			lda 	#2
.8dc0					_FCNotDownTo:
.8dc0	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dc1	a0 10		ldy #$10			ldy 	#16
.8dc3	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dc5	a0 06		ldy #$06			ldy 	#6
.8dc7	ad 08 04	lda $0408			lda 	NSMantissa0
.8dca	91 34		sta ($34),y			sta 	(basicStack),y
.8dcc	ad 10 04	lda $0410			lda 	NSMantissa1
.8dcf	c8		iny				iny
.8dd0	91 34		sta ($34),y			sta 	(basicStack),y
.8dd2	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dd4	a2 01		ldx #$01			ldx 	#1
.8dd6	20 eb 8d	jsr $8deb			jsr 	FCIntegerToStack
.8dd9	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ddb	a2 02		ldx #$02			ldx 	#2
.8ddd	20 eb 8d	jsr $8deb			jsr 	FCIntegerToStack
.8de0	20 0b 8e	jsr $8e0b			jsr 	CopyIndexToReference
.8de3	7a		ply				ply 								; restore position
.8de4	60		rts				rts
.8de5					_FCError:
.8de5	4c f3 b3	jmp $b3f3			jmp 	TypeError
.8de8					_FCSyntaxError:
.8de8	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.8deb					FCIntegerToStack:
.8deb	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dee	10 03		bpl $8df3			bpl	 	_FCNotNegative
.8df0	20 83 a5	jsr $a583			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8df3					_FCNotNegative:
.8df3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8df6	91 34		sta ($34),y			sta 	(basicStack),y
.8df8	c8		iny				iny
.8df9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dfc	91 34		sta ($34),y			sta 	(basicStack),y
.8dfe	c8		iny				iny
.8dff	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e02	91 34		sta ($34),y			sta 	(basicStack),y
.8e04	c8		iny				iny
.8e05	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e08	91 34		sta ($34),y			sta 	(basicStack),y
.8e0a	60		rts				rts
.8e0b					CopyIndexToReference:
.8e0b	5a		phy				phy
.8e0c	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e0e	38		sec				sec 								; (because we copy from offset 8)
.8e0f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e11	e9 08		sbc #$08			sbc 	#8
.8e13	85 36		sta $36				sta 	zTemp0
.8e15	c8		iny				iny
.8e16	b1 34		lda ($34),y			lda 	(basicStack),y
.8e18	e9 00		sbc #$00			sbc 	#0
.8e1a	85 37		sta $37				sta 	zTemp0+1
.8e1c	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e1e	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e20	b1 34		lda ($34),y			lda 	(basicStack),y
.8e22	0a		asl a				asl 	a 							; into carry
.8e23	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e25	90 14		bcc $8e3b			bcc 	_CITRNormal
.8e27	38		sec				sec
.8e28					_CITRNegative:
.8e28	a9 00		lda #$00			lda 	#0
.8e2a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e2c	91 36		sta ($36),y			sta 	(zTemp0),y
.8e2e	c8		iny				iny
.8e2f	ca		dex				dex
.8e30	d0 f6		bne $8e28			bne 	_CITRNegative
.8e32	88		dey				dey 								; look at MSB of mantissa
.8e33	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e35	09 80		ora #$80			ora 	#$80
.8e37	91 36		sta ($36),y			sta 	(zTemp0),y
.8e39	7a		ply				ply
.8e3a	60		rts				rts
.8e3b					_CITRNormal:
.8e3b	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e3d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3f	c8		iny				iny
.8e40	ca		dex				dex
.8e41	d0 f8		bne $8e3b			bne 	_CITRNormal
.8e43	7a		ply				ply 								; and exit.
.8e44	60		rts				rts
.8e45					NextCommand:
.8e45	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e47	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e49	20 ae a6	jsr $a6ae			jsr 	StackCheckFrame
.8e4c	5a		phy				phy
.8e4d	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e4f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e51	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e53	30 02		bmi $8e57			bmi 	_NCStepNeg
.8e55	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e57					_NCStepNeg:
.8e57	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e59	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e5b	18		clc				clc
.8e5c					_NCBump:
.8e5c	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e5e	91 34		sta ($34),y			sta 	(basicStack),y
.8e60	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e62	c8		iny				iny 								; next byte
.8e63	ca		dex				dex 								; do four times
.8e64	d0 f6		bne $8e5c			bne 	_NCBump
.8e66	20 0b 8e	jsr $8e0b			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e69	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e6b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e6d	0a		asl a				asl 	a 							; sign bit to carry
.8e6e	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e70	85 38		sta $38				sta 	zTemp1
.8e72	90 02		bcc $8e76			bcc 	_NCCompRev 					; use if step is +ve
.8e74	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e76					_NCCompRev:
.8e76	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e78	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e7a	85 39		sta $39				sta 	zTemp1+1
.8e7c	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e7e	38		sec				sec
.8e7f					_NCCompare:
.8e7f	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e81	b1 34		lda ($34),y			lda 	(basicStack),y
.8e83	a4 39		ldy $39				ldy 	zTemp1+1
.8e85	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e87	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e89	e6 39		inc $39				inc 	zTemp1+1
.8e8b	ca		dex				dex 								; do it 4 times.
.8e8c	d0 f1		bne $8e7f			bne 	_NCCompare
.8e8e	50 02		bvc $8e92			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e90	49 80		eor #$80			eor 	#$80
.8e92					_NCNoOverflow:
.8e92	7a		ply				ply 								; restore Y position
.8e93	0a		asl a				asl 	a 							; is bit 7 set.
.8e94	90 04		bcc $8e9a			bcc 	_NCLoopback 				; if no , >= so loop back
.8e96	20 a0 a6	jsr $a6a0			jsr 	StackClose 					; exit the loop
.8e99	60		rts				rts
.8e9a					_NCLoopBack:
.8e9a	20 d7 a6	jsr $a6d7			jsr 	STKLoadCodePosition 		; loop back
.8e9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e9e					RectangleCommand:
.8e9e	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8ea0	80 02		bra $8ea4			bra 	ShapeDrawCmd
.8ea2					CircleCommand:
.8ea2	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8ea4					ShapeDrawCmd:
.8ea4	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8ea7					ShapeDraw:
.8ea7	0d 65 06	ora $0665			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8eaa	4c 26 8f	jmp $8f26			jmp 	ExecuteGraphicCommand	 	; and complete
.8ead					SpriteCommand:
.8ead	a2 00		ldx #$00			ldx 	#0
.8eaf	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get image number.
.8eb2	5a		phy				phy
.8eb3	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8eb5	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb8	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8eba	b0 0d		bcs $8ec9			bcs 	_SCRange
.8ebc	a0 ff		ldy #$ff			ldy 	#255
.8ebe	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ec1	a9 32		lda #$32			lda 	#25*2
.8ec3	7a		ply				ply
.8ec4	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8ec7	80 5d		bra $8f26			bra 	ExecuteGraphicCommand
.8ec9					_SCRange:
.8ec9	4c ee b3	jmp $b3ee			jmp 	RangeError
.8ecc					ImageCommand:
.8ecc	a2 00		ldx #$00			ldx 	#0
.8ece	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get image number.
.8ed1	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8ed4					ImageRunDraw:
.8ed4	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ed6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ed9	ad 6b 06	lda $066b			lda 	gxDrawScale
.8edc	0a		asl a				asl 	a
.8edd	0a		asl a				asl 	a
.8ede	0a		asl a				asl 	a
.8edf	a8		tay				tay
.8ee0	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ee2	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ee5	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ee8	60		rts				rts
.8ee9					TextCommand:
.8ee9	a2 00		ldx #$00			ldx 	#0
.8eeb	20 19 a5	jsr $a519			jsr 	EvaluateString 				; get text
.8eee	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8ef1					TextRunDraw:
.8ef1	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ef3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ef6	a0 00		ldy #$00			ldy 	#0
.8ef8					_IRDLoop:
.8ef8	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8efb	85 37		sta $37				sta 	zTemp0+1
.8efd	ad 08 04	lda $0408			lda 	NSMantissa0
.8f00	85 36		sta $36				sta 	zTemp0
.8f02	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f04	f0 13		beq $8f19			beq 	_IRDExit
.8f06	5a		phy				phy									; save string pos
.8f07	48		pha				pha 								; save char
.8f08	ad 6b 06	lda $066b			lda 	gxDrawScale 				; get scale
.8f0b	0a		asl a				asl 	a
.8f0c	0a		asl a				asl 	a
.8f0d	0a		asl a				asl 	a
.8f0e	a8		tay				tay
.8f0f	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f11	fa		plx				plx 								; char to draw
.8f12	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f15	7a		ply				ply 								; restore string pos
.8f16	c8		iny				iny
.8f17	90 df		bcc $8ef8			bcc 	_IRDLoop 					; go back if no error.
.8f19					_IRDExit:
.8f19	60		rts				rts
.8f1a					PlotCommand:
.8f1a	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f1c	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8f1f	80 05		bra $8f26			bra 	ExecuteGraphicCommand
.8f21					LineCommand:
.8f21	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f23	20 32 8f	jsr $8f32			jsr 	RunGraphicsCommand
.8f26					ExecuteGraphicCommand:
.8f26	0d 64 06	ora $0664			ora 	gxCommandID 				; make a full command
.8f29	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8f2c	b0 01		bcs $8f2f			bcs 	_EGCError
.8f2e	60		rts				rts
.8f2f					_EGCError:
.8f2f	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.8f32					RunGraphicsCommand:
.8f32	8d 64 06	sta $0664			sta 	gxCommandID					; save TODO graphics command.
.8f35	68		pla				pla 								; pop handler address
.8f36	fa		plx				plx
.8f37	1a		inc a				inc 	a
.8f38	d0 01		bne $8f3b			bne 	_RGINoCarry
.8f3a	e8		inx				inx
.8f3b					_RGINoCarry:
.8f3b	8d 69 06	sta $0669			sta 	GXHandler
.8f3e	8e 6a 06	stx $066a			stx 	GXHandler+1
.8f41					_RGICommandLoop:
.8f41	b1 30		lda ($30),y			lda 	(codePtr),y
.8f43	c8		iny				iny
.8f44	c9 ca		cmp #$ca			cmp 	#KWD_TO						; is it TO x,y
.8f46	f0 53		beq $8f9b			beq 	_RGI_To
.8f48	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f4a	f0 55		beq $8fa1			beq 	_RGI_Here
.8f4c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f4e	f0 3d		beq $8f8d			beq 	_RGI_Exit
.8f50	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f52	f0 39		beq $8f8d			beq 	_RGI_Exit
.8f54	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f56	f0 3e		beq $8f96			beq 	_RGI_Frame
.8f58	c9 c7		cmp #$c7			cmp 	#KWD_SOLID
.8f5a	f0 33		beq $8f8f			beq 	_RGI_Solid
.8f5c	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f5e	f0 4b		beq $8fab			beq 	_RGI_By
.8f60	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f62	f0 17		beq $8f7b			beq 	_RGI_Move2
.8f64	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f66	f0 65		beq $8fcd			beq 	_RGI_Dim
.8f68	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f6a	f0 78		beq $8fe4			beq 	_RGI_Colour
.8f6c	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f6e	f0 74		beq $8fe4			beq 	_RGI_Colour
.8f70	ae 64 06	ldx $0664			ldx 	gxCommandID
.8f73	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f75	d0 03		bne $8f7a			bne 	_RGI_Move 					; move
.8f77	4c 0e 90	jmp $900e			jmp		_RGI_SpriteInstructions
.8f7a					_RGI_Move:
.8f7a	88		dey				dey 								; unpick get.
.8f7b					_RGI_Move2:
.8f7b	20 34 90	jsr $9034			jsr 	GCGetCoordinatePair 		; move to here
.8f7e	20 5b 90	jsr $905b			jsr 	GCCopyPairToStore 			; save
.8f81	5a		phy				phy
.8f82	20 51 90	jsr $9051			jsr 	GCLoadAXY 					; load in
.8f85	09 20		ora #$20			ora 	#16*2 						; move there
.8f87	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f8a	7a		ply				ply
.8f8b	80 b4		bra $8f41			bra 	_RGICommandLoop 			; and go round
.8f8d					_RGI_Exit:
.8f8d	88		dey				dey 								; unpick : / EOL
.8f8e	60		rts				rts
.8f8f					_RGI_Solid:
.8f8f	a9 02		lda #$02			lda 	#2
.8f91	8d 65 06	sta $0665			sta 	gxFillSolid
.8f94	80 ab		bra $8f41			bra 	_RGICommandLoop
.8f96					_RGI_Frame:
.8f96	9c 65 06	stz $0665			stz 	gxFillSolid
.8f99	80 a6		bra $8f41			bra 	_RGICommandLoop
.8f9b					_RGI_To:
.8f9b	20 34 90	jsr $9034			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f9e	20 5b 90	jsr $905b			jsr 	GCCopyPairToStore
.8fa1					_RGI_Here:
.8fa1	5a		phy				phy
.8fa2	20 51 90	jsr $9051			jsr 	GCLoadAXY 					; load it into AXY
.8fa5	20 0b 90	jsr $900b			jsr 	_RGICallHandler 			; go do whatever it is.
.8fa8	7a		ply				ply
.8fa9	80 96		bra $8f41			bra 	_RGICommandLoop 			; and go round
.8fab					_RGI_By:
.8fab	20 41 90	jsr $9041			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8fae	18		clc				clc
.8faf	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fb2	6d 66 06	adc $0666			adc 	gxxPos
.8fb5	8d 66 06	sta $0666			sta 	gxXPos
.8fb8	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fbb	6d 67 06	adc $0667			adc 	gxxPos+1
.8fbe	8d 67 06	sta $0667			sta 	gxXPos+1
.8fc1	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fc4	18		clc				clc
.8fc5	6d 68 06	adc $0668			adc 	gxYPos
.8fc8	8d 68 06	sta $0668			sta 	gxYPos
.8fcb	80 d4		bra $8fa1			bra 	_RGI_Here
.8fcd					_RGI_Dim:
.8fcd	a2 01		ldx #$01			ldx	 	#1
.8fcf	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger
.8fd2	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fd5	c9 00		cmp #$00			cmp 	#0
.8fd7	f0 2f		beq $9008			beq 	_RGIRange
.8fd9	c9 09		cmp #$09			cmp 	#8+1
.8fdb	b0 2b		bcs $9008			bcs		_RGIRange
.8fdd	3a		dec a				dec 	a
.8fde	8d 6b 06	sta $066b			sta 	gxDrawScale
.8fe1	4c 41 8f	jmp $8f41			jmp 	_RGICommandLoop
.8fe4					_RGI_Colour:
.8fe4	a2 01		ldx #$01			ldx 	#1 							; colour
.8fe6	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger
.8fe9	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8feb	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.8fee	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8ff2	d0 04		bne $8ff8			bne 	_RGICDefaultMode
.8ff4	c8		iny				iny
.8ff5	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger
.8ff8					_RGICDefaultMode:
.8ff8	5a		phy				phy
.8ff9	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8ffb	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8ffe	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9001	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9004	7a		ply				ply
.9005	4c 41 8f	jmp $8f41			jmp 	_RGICommandLoop 			; and go round
.9008					_RGIRange:
.9008	4c ee b3	jmp $b3ee			jmp 	RangeError
.900b					_RGICallHandler:
.900b	6c 69 06	jmp ($0669)			jmp 	(GXHandler)
.900e					_RGI_SpriteInstructions:
.900e	c9 be		cmp #$be			cmp 	#KWD_OFF
.9010	f0 07		beq $9019			beq 	_RGISpriteOff
.9012	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.9014	f0 13		beq $9029			beq 	_RGISetImage
.9016	4c 7a 8f	jmp $8f7a			jmp 	_RGI_Move
.9019					_RGISpriteOff:
.9019	5a		phy				phy
.901a	a0 01		ldy #$01			ldy 	#1
.901c	a2 00		ldx #$00			ldx 	#0
.901e					_RGIDoCommandLoop:
.901e	a9 10		lda #$10			lda 	#8*2
.9020	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9023	7a		ply				ply
.9024	b0 e2		bcs $9008			bcs 	_RGIRange
.9026	4c 41 8f	jmp $8f41			jmp 	_RGICommandLoop
.9029					_RGISetImage:
.9029	a2 01		ldx #$01			ldx 	#1
.902b	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger
.902e	5a		phy				phy
.902f	aa		tax				tax
.9030	a0 00		ldy #$00			ldy 	#0
.9032	80 ea		bra $901e			bra 	_RGIDoCommandLoop
.9034					GCGetCoordinatePair:
.9034	a2 01		ldx #$01			ldx 	#1
.9036	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.9039	20 0b ae	jsr $ae0b			jsr 	CheckComma
.903c	e8		inx				inx
.903d	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.9040	60		rts				rts
.9041					GCSignedCoordinatePair:
.9041	a2 01		ldx #$01			ldx 	#1
.9043	20 52 a5	jsr $a552			jsr 	Evaluate16BitIntegerSigned
.9046	20 0b ae	jsr $ae0b			jsr 	CheckComma
.9049	e8		inx				inx
.904a	20 52 a5	jsr $a552			jsr 	Evaluate16BitIntegerSigned
.904d	60		rts				rts
.904e					_GCCPRange:
.904e	4c ee b3	jmp $b3ee			jmp 	RangeError
.9051					GCLoadAXY:
.9051	ad 67 06	lda $0667			lda 	gxXPos+1
.9054	ae 66 06	ldx $0666			ldx 	gxXPos
.9057	ac 68 06	ldy $0668			ldy 	gxYPos
.905a	60		rts				rts
.905b					GCCopyPairToStore:
.905b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.905e	8d 66 06	sta $0666			sta 	gxXPos
.9061	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9064	8d 67 06	sta $0667			sta 	gxXPos+1
.9067	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.906a	8d 68 06	sta $0668			sta 	gxYPos
.906d	60		rts				rts
.0664					gxCommandID:
>0664							.fill 	1
.0665					gxFillSolid:
>0665							.fill 	1
.0666					gxXPos:
>0666							.fill 	2
.0668					gxYPos:
>0668							.fill 	1
.0669					gxHandler:
>0669							.fill 	2
.066b					gxDrawScale:
>066b							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.906e					BitmapCtrl:
.906e	b1 30		lda ($30),y			lda 	(codePtr),y
.9070	c8		iny				iny
.9071	a2 01		ldx #$01			ldx 	#1
.9073	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9075	f0 11		beq $9088			beq 	BitmapSwitch
.9077	ca		dex				dex
.9078	c9 be		cmp #$be			cmp 	#KWD_OFF
.907a	f0 0c		beq $9088			beq 	BitmapSwitch
.907c	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get the colour
.907f	5a		phy				phy
.9080	aa		tax				tax
.9081	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9083	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9086	7a		ply				ply
.9087	60		rts				rts
.9088					BitmapSwitch:
.9088	5a		phy				phy
.9089	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.908b	a9 02		lda #$02			lda 	#1*2
.908d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9090	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9092	a0 00		ldy #$00			ldy 	#0
.9094	a2 ff		ldx #$ff			ldx 	#$FF
.9096	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9099	9c 65 06	stz $0665			stz 	gxFillSolid
.909c	9c 66 06	stz $0666			stz 	gxXPos
.909f	9c 67 06	stz $0667			stz 	gxXPos+1
.90a2	9c 68 06	stz $0668			stz 	gxYPos
.90a5	9c 6b 06	stz $066b			stz 	gxDrawScale
.90a8	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90aa	a2 00		ldx #$00			ldx 	#0
.90ac	a0 00		ldy #$00			ldy 	#0
.90ae	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90b1	7a		ply				ply
.90b2	60		rts				rts
.90b3					SpritesCtrl:
.90b3	b1 30		lda ($30),y			lda 	(codePtr),y
.90b5	c8		iny				iny
.90b6	a2 01		ldx #$01			ldx 	#1
.90b8	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90ba	f0 08		beq $90c4			beq 	SpriteSwitch
.90bc	ca		dex				dex
.90bd	c9 be		cmp #$be			cmp 	#KWD_OFF
.90bf	f0 03		beq $90c4			beq 	SpriteSwitch
.90c1	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.90c4					SpriteSwitch:
.90c4	5a		phy				phy
.90c5	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90c7	a9 04		lda #$04			lda 	#2*2
.90c9	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90cc	7a		ply				ply
.90cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90ce					GfxCommand:
.90ce	a2 00		ldx #$00			ldx 	#0
.90d0	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; command
.90d3	20 0b ae	jsr $ae0b			jsr 	CheckComma
.90d6	e8		inx				inx
.90d7	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger 		; X
.90da	20 0b ae	jsr $ae0b			jsr 	CheckComma
.90dd	e8		inx				inx
.90de	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; Y
.90e1	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90e4	4a		lsr a				lsr 	a
.90e5	d0 16		bne $90fd			bne 	_GfxError
.90e7	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90ea	b0 11		bcs $90fd			bcs 	_GfxError 					; bit 7 should have been zero
.90ec	5a		phy				phy 								; save pos
.90ed	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90f0	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90f3	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90f6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90f9	b0 02		bcs $90fd			bcs 	_GfxError
.90fb	7a		ply				ply 								; restore pos and exit.
.90fc	60		rts				rts
.90fd					_GfxError:
.90fd	4c ee b3	jmp $b3ee			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.9100					Command_GOSUB:
.9100	a2 00		ldx #$00			ldx 	#0
.9102	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.9105	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9107	20 82 a6	jsr $a682			jsr 	StackOpen 					; create frame
.910a	20 c6 a6	jsr $a6c6			jsr 	STKSaveCodePosition 		; save current position
.910d	4c 23 91	jmp $9123			jmp 	GotoStackX
.9110					Command_RETURN:
.9110	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.9112	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.9114	20 ae a6	jsr $a6ae			jsr 	StackCheckFrame
.9117	20 d7 a6	jsr $a6d7			jsr 	STKLoadCodePosition 		; restore code position
.911a	20 a0 a6	jsr $a6a0			jsr 	StackClose
.911d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.911e					GotoCommand:
.911e	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9120	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.9123					GotoStackX:
.9123	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9126	48		pha				pha 								; it is slightly inefficient, just in cases.
.9127	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.912a	fa		plx				plx
.912b	20 2d a6	jsr $a62d			jsr 	MemorySearch 				; transfer to line number AX.
.912e	90 05		bcc $9135			bcc 	_GotoError 					; not found, off end.
.9130	d0 03		bne $9135			bne 	_GotoError 					; not found exactly
.9132	4c 9c 94	jmp $949c			jmp 	RunNewLine 					; and go straight to new line code.
.9135					_GotoError:
.9135	a9 0d		lda #$0d		lda	#13
.9137	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.913a					IfCommand:
.913a	a2 00		ldx #$00			ldx 	#0 							; If what.
.913c	20 0e a5	jsr $a50e			jsr 	EvaluateNumber
.913f	b1 30		lda ($30),y			lda 	(codePtr),y
.9141	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9143	d0 0a		bne $914f			bne 	_IFStructured
.9145	c8		iny				iny 								; consume THEN
.9146	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; is it zero
.9149	f0 01		beq $914c			beq 	_IfFail 					; if fail, go to next line
.914b	60		rts				rts 								; if THEN just continue
.914c					_IfFail:
.914c	4c 01 95	jmp $9501			jmp 	EOLCommand
.914f					_IfStructured:
.914f	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; is it zero
.9152	d0 07		bne $915b			bne 	_IfExit 					; if not, then continue normally.
.9154	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.9156	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9158	20 f6 98	jsr $98f6			jsr 	ScanForward 				; and run from there/
.915b					_IfExit:
.915b	60		rts				rts
.915c					ElseCode:
.915c	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.915e	aa		tax				tax 								; so just go to the structure exit
.915f	20 f6 98	jsr $98f6			jsr 	ScanForward
.9162	60		rts				rts
.9163					EndIf:
.9163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9164					UnaryJoyX:
.9164	18		clc				clc
.9165	80 01		bra $9168			bra 	JoyMain
.9167					UnaryJoyY:
.9167	38		sec				sec
.9168					JoyMain:
.9168	fa		plx				plx 								; get pos
.9169	08		php				php 								; save carry (set for Y)
.916a	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; ignore the parameter
.916d	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.9170	20 e8 b5	jsr $b5e8			jsr 	EXTReadController 			; read the controller.
.9173	28		plp				plp
.9174	90 02		bcc $9178			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9176	4a		lsr a				lsr 	a
.9177	4a		lsr a				lsr 	a
.9178					_JMNoShift:
.9178	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9179	b0 0a		bcs $9185			bcs 	_JMIsRight
.917b	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.917c	b0 04		bcs $9182			bcs 	_JMIsLeft
.917e	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; zero result
.9181	60		rts				rts
.9182					_JMIsLeft:
.9182	4c 08 9a	jmp $9a08			jmp 	ReturnTrue
.9185					_JMIsRight:
.9185	a9 01		lda #$01			lda 	#1
.9187	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.918a	60		rts				rts
.918b					UnaryJoyB:
.918b	fa		plx				plx 								; get pos
.918c	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; ignore the parameter
.918f	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.9192	20 e8 b5	jsr $b5e8			jsr 	EXTReadController 			; read the controller.
.9195	4a		lsr a				lsr 	a
.9196	4a		lsr a				lsr 	a
.9197	4a		lsr a				lsr 	a
.9198	4a		lsr a				lsr 	a
.9199	29 01		and #$01			and 	#1
.919b	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.919e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.919f					LetCommand:
.919f	a2 00		ldx #$00			ldx 	#0
.91a1	b1 30		lda ($30),y			lda 	(codePtr),y
.91a3	c9 10		cmp #$10			cmp 	#KWD_AT
.91a5	d0 16		bne $91bd			bne 	_LCStandard
.91a7	c8		iny				iny 								; skip equal
.91a8	20 75 a0	jsr $a075			jsr 	EvaluateTerm 				; get a number
.91ab	20 b9 9e	jsr $9eb9			jsr 	Dereference 				; dereference it
.91ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.91b1	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.91b3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91b6	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91b8	d0 10		bne $91ca			bne 	_LCMain
.91ba	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; was a reference before.
.91bd					_LCStandard:
.91bd	ad 8c 9d	lda $9d8c			lda 	PrecedenceLevel+"*"			; precedence > this
.91c0	20 a6 9d	jsr $9da6			jsr 	EvaluateExpressionAtPrecedence
.91c3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91c6	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91c8	f0 0e		beq $91d8			beq 	_LetGoProc 					; it's a procedure call.
.91ca					_LCMain:
.91ca	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91cc	20 13 ae	jsr $ae13			jsr 	CheckNextA
.91cf	e8		inx				inx 								; RHS
.91d0	20 05 a5	jsr $a505			jsr 	EvaluateValue
.91d3	ca		dex				dex
.91d4	20 db 91	jsr $91db			jsr 	AssignVariable
.91d7	60		rts				rts
.91d8					_LetGoProc:
.91d8	4c 77 93	jmp $9377			jmp 	CallProcedure
.91db					AssignVariable:
.91db	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91de	48		pha				pha 								; save a copy
.91df	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91e2	29 10		and #$10			and 	#NSBIsString
.91e4	d0 0b		bne $91f1			bne 	_ASError
.91e6	68		pla				pla 								; get back
.91e7	29 10		and #$10			and 	#NSBIsString 				; check type
.91e9	d0 03		bne $91ee			bne 	_ASString
.91eb	4c e1 9d	jmp $9de1			jmp 	AssignNumber
.91ee					_ASString:
.91ee	4c 4f 9e	jmp $9e4f			jmp 	AssignString
.91f1					_ASError:
.91f1	4c f3 b3	jmp $b3f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91f4					Command_List:
.91f4	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.91f7	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91fa	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91fd	a9 ff		lda #$ff			lda 	#$FF
.91ff	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9202	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9205	b1 30		lda ($30),y			lda 	(codePtr),y
.9207	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9209	f0 1e		beq $9229			beq 	_CLSecond
.920b	20 87 92	jsr $9287			jsr 	CLIsDigit 					; if not digit, list all
.920e	b0 24		bcs $9234			bcs 	_CLStart
.9210	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9212	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.9215	b1 30		lda ($30),y			lda 	(codePtr),y
.9217	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9219	f0 0e		beq $9229			beq 	_CLSecond 					; if so go get it
.921b	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.921e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9221	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9224	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9227	80 0b		bra $9234			bra 	_CLStart
.9229					_CLSecond:
.9229	c8		iny				iny 								; consume comma
.922a	20 87 92	jsr $9287			jsr 	CLIsDigit 					; digit found
.922d	b0 05		bcs $9234			bcs 	_CLStart 					; if not, continue listing
.922f	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9231	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger
.9234					_CLStart
.9234	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9236	85 30		sta $30				sta 	codePtr
.9238	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.923a	85 31		sta $31				sta 	codePtr+1
.923c					_CLLoop:
.923c	20 e5 b5	jsr $b5e5			jsr 	EXTBreakCheck 				; break check
.923f	f0 30		beq $9271			beq 	_CLExit
.9241	b2 30		lda ($30)			lda 	(codePtr)
.9243	f0 2c		beq $9271			beq 	_CLExit
.9245	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9247	20 74 92	jsr $9274			jsr 	CLCompareLineNo
.924a	90 18		bcc $9264			bcc 	_CLNext
.924c	a2 07		ldx #$07			ldx 	#7
.924e	20 74 92	jsr $9274			jsr 	CLCompareLineNo
.9251	f0 02		beq $9255			beq 	_CLDoThisOne
.9253	b0 0f		bcs $9264			bcs 	_CLNext
.9255					_CLDoThisOne:
.9255	20 fb 96	jsr $96fb			jsr 	ListConvertLine 			; convert line into token Buffer
.9258	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.925a	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.925c	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.925f	a9 0d		lda #$0d			lda 	#13 						; new line
.9261	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.9264					_CLNext:
.9264	18		clc				clc
.9265	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9267	65 30		adc $30				adc 	codePtr
.9269	85 30		sta $30				sta 	codePtr
.926b	90 02		bcc $926f			bcc 	_CREExit
.926d	e6 31		inc $31				inc 	codePtr+1
.926f					_CREExit:
.926f	80 cb		bra $923c			bra 	_CLLoop
.9271					_CLExit:
.9271	4c 63 8b	jmp $8b63			jmp 	WarmStart
.9274					CLCompareLineNo:
.9274	38		sec				sec
.9275	a0 01		ldy #$01			ldy 	#1
.9277	b1 30		lda ($30),y			lda 	(codePtr),y
.9279	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.927c	85 36		sta $36				sta 	zTemp0
.927e	c8		iny				iny
.927f	b1 30		lda ($30),y			lda 	(codePtr),y
.9281	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9284	05 36		ora $36				ora 	zTemp0
.9286	60		rts				rts
.9287					CLIsDigit:
.9287	b1 30		lda ($30),y			lda 	(codePtr),y
.9289	c9 30		cmp #$30			cmp 	#"0"
.928b	90 03		bcc $9290			bcc	 	_CLIDExitFalse
.928d	c9 3a		cmp #$3a			cmp 	#"9"+1
.928f	60		rts				rts
.9290					_CLIDExitFalse:
.9290	38		sec				sec
.9291	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9292					Command_LOCAL:
.9292	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9294	20 a0 92	jsr $92a0			jsr 	LocaliseNextTerm 			; convert term to a local.
.9297	b1 30		lda ($30),y			lda 	(codePtr),y
.9299	c8		iny				iny
.929a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.929c	f0 f4		beq $9292			beq 	Command_LOCAL
.929e	88		dey				dey 								; unpick pre-get
.929f	60		rts				rts
.92a0					LocaliseNextTerm:
.92a0	20 75 a0	jsr $a075			jsr 	EvaluateTerm 				; evaluate the term
.92a3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92a6	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.92a8	f0 69		beq $9313			beq		_LNTError
.92aa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.92ad	85 36		sta $36				sta 	zTemp0
.92af	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92b2	85 37		sta $37				sta  	zTemp0+1
.92b4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92b7	29 10		and #$10			and 	#NSBIsString
.92b9	d0 22		bne $92dd			bne 	_LNTPushString
.92bb	5a		phy				phy
.92bc	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92be					_LNTPushNumLoop:
.92be	b1 36		lda ($36),y			lda		(zTemp0),y
.92c0	20 60 a6	jsr $a660			jsr 	StackPushByte
.92c3	a9 00		lda #$00			lda 	#0
.92c5	91 36		sta ($36),y			sta 	(zTemp0),y
.92c7	c8		iny				iny
.92c8	c0 05		cpy #$05			cpy 	#5
.92ca	d0 f2		bne $92be			bne 	_LNTPushNumLoop
.92cc	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92ce	20 60 a6	jsr $a660			jsr 	StackPushByte
.92d1	a5 37		lda $37				lda 	zTemp0+1
.92d3	20 60 a6	jsr $a660			jsr 	StackPushByte
.92d6	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92d8	20 60 a6	jsr $a660			jsr 	StackPushByte
.92db	7a		ply				ply
.92dc	60		rts				rts
.92dd					_LNTPushString:
.92dd	5a		phy				phy
.92de	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92e0	85 38		sta $38				sta 	zTemp1
.92e2	a0 01		ldy #$01			ldy 	#1
.92e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.92e6	85 39		sta $39				sta 	zTemp1+1
.92e8	a0 00		ldy #$00			ldy 	#0 							; output string
.92ea	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92ec	f0 0a		beq $92f8			beq 	_LNTStringOut
.92ee					_LNTPushStrLoop:
.92ee	b1 38		lda ($38),y			lda 	(zTemp1),y
.92f0	f0 06		beq $92f8			beq 	_LNTStringOut
.92f2	20 60 a6	jsr $a660			jsr 	StackPushByte
.92f5	c8		iny				iny
.92f6	80 f6		bra $92ee			bra 	_LNTPushStrLoop
.92f8					_LNTStringOut:
.92f8	98		tya				tya									; output length
.92f9	20 60 a6	jsr $a660			jsr 	StackPushByte
.92fc	a9 00		lda #$00			lda 	#0 							; clear original string.
.92fe	92 38		sta ($38)			sta 	(zTemp1)
.9300	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9303	20 60 a6	jsr $a660			jsr 	StackPushByte
.9306	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9309	20 60 a6	jsr $a660			jsr 	StackPushByte
.930c	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.930e	20 60 a6	jsr $a660			jsr 	StackPushByte
.9311	7a		ply				ply
.9312	60		rts				rts
.9313					_LNTError:
.9313	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.adaa					LocalPopValue:
.adaa	20 79 a6	jsr $a679			jsr 	StackPopByte
.adad	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.adaf	d0 17		bne $adc8			bne 	_LPVString
.adb1	20 79 a6	jsr $a679			jsr 	StackPopByte 				; address
.adb4	85 37		sta $37				sta 	zTemp0+1
.adb6	20 79 a6	jsr $a679			jsr 	StackPopByte
.adb9	85 36		sta $36				sta 	zTemp0
.adbb	5a		phy				phy
.adbc	a0 04		ldy #$04			ldy 	#4 							; copy back
.adbe					_LPVNumberCopy:
.adbe	20 79 a6	jsr $a679			jsr 	StackPopByte
.adc1	91 36		sta ($36),y			sta 	(zTemp0),y
.adc3	88		dey				dey
.adc4	10 f8		bpl $adbe			bpl 	_LPVNumberCopy
.adc6	7a		ply				ply 								; and complete
.adc7	60		rts				rts
.adc8					_LPVString:
.adc8	20 79 a6	jsr $a679			jsr 	StackPopByte 				; address of record => zTemp0
.adcb	85 37		sta $37				sta 	zTemp0+1
.adcd	20 79 a6	jsr $a679			jsr 	StackPopByte
.add0	85 36		sta $36				sta 	zTemp0
.add2	5a		phy				phy
.add3	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.add5	85 38		sta $38				sta 	zTemp1
.add7	a0 01		ldy #$01			ldy 	#1
.add9	b1 36		lda ($36),y			lda 	(zTemp0),y
.addb	85 39		sta $39				sta 	zTemp1+1
.addd	20 79 a6	jsr $a679			jsr 	StackPopByte 				; # to get => y
.ade0	a8		tay				tay
.ade1	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ade3	f0 0e		beq $adf3			beq 	_LPVStringCopied
.ade5	a9 00		lda #$00			lda 	#0 							; NULL on end
.ade7	91 38		sta ($38),y			sta 	(zTemp1),y
.ade9					_LPVStringCopy:
.ade9	88		dey				dey
.adea	30 07		bmi $adf3			bmi 	_LPVStringCopied
.adec	20 79 a6	jsr $a679			jsr 	StackPopByte
.adef	91 38		sta ($38),y			sta 	(zTemp1),y
.adf1	80 f6		bra $ade9			bra 	_LPVStringCopy
.adf3					_LPVStringCopied:
.adf3	fa		plx				plx
.adf4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9316					NewCommand:
.9316	20 0b a6	jsr $a60b			jsr 	MemoryNew
.9319	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.931c	20 fc 8b	jsr $8bfc			jsr 	ClearCommand 				; clear everything.
.931f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9320					Command_Print:
.9320	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9321					_CPLoop:
.9321	08		php				php 								; save last action flag
.9322	b1 30		lda ($30),y			lda 	(codePtr),y
.9324	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9326	f0 46		beq $936e			beq 	_CPExit
.9328	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.932a	f0 42		beq $936e			beq 	_CPExit
.932c	68		pla				pla 								; throw last action flag
.932d	b1 30		lda ($30),y			lda 	(codePtr),y
.932f	c8		iny				iny
.9330	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9332	f0 37		beq $936b			beq 	_CPContinueWithSameLine
.9334	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9336	f0 2e		beq $9366			beq 	_CPTab
.9338	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.933a	f0 26		beq $9362			beq 	_CPNewLine
.933c	88		dey				dey 								; undo the get.
.933d	a2 00		ldx #$00			ldx 	#0
.933f	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; get a value into slot 0
.9342	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9345	29 10		and #$10			and 	#NSBIsString
.9347	f0 0b		beq $9354			beq 	_CPNumber
.9349	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.934c	ad 08 04	lda $0408			lda 	NSMantissa0
.934f	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.9352	80 cc		bra $9320			bra 	Command_Print 				; loop round clearing carry so NL if end
.9354					_CPNumber:
.9354	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9356	20 db a3	jsr $a3db			jsr 	ConvertNumberToString 		; convert to string
.9359	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.935b	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.935d	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.9360	80 be		bra $9320			bra 	Command_Print 				; loop round clearing carry so NL if end
.9362					_CPNewLine:
.9362	a9 0d		lda #$0d			lda 	#13
.9364	80 02		bra $9368			bra 	_CPPrintChar
.9366					_CPTab:
.9366	a9 09		lda #$09			lda 	#9 							; print TAB
.9368					_CPPrintChar:
.9368	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.936b					_CPContinueWithSameLine:
.936b	38		sec				sec 								; loop round with carry set, which
.936c	80 b3		bra $9321			bra 	_CPLoop 					; will inhibit final CR
.936e					_CPExit:
.936e	28		plp				plp 								; get last action flag
.936f	b0 05		bcs $9376			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9371	a9 0d		lda #$0d			lda 	#13 						; print new line
.9373	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.9376					_CPExit2:
.9376	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9377					CallProcedure:
.9377	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9379	b1 30		lda ($30),y			lda 	(codePtr),y
.937b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.937d	f0 0c		beq $938b			beq 	_CPEndParam
.937f					_CPParamLoop:
.937f	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; get parameter onto stack
.9382	e8		inx				inx 								; bump next stack
.9383	b1 30		lda ($30),y			lda 	(codePtr),y
.9385	c8		iny				iny
.9386	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9388	f0 f5		beq $937f			beq 	_CPParamLoop
.938a	88		dey				dey 								; unpick.
.938b					_CPEndParam:
.938b	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.938e	c8		iny				iny									; skip right bracket
.938f	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9391	20 82 a6	jsr $a682			jsr 	StackOpen
.9394	20 c6 a6	jsr $a6c6			jsr 	STKSaveCodePosition 		; save loop position
.9397	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.939a	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.939c	ad 10 04	lda $0410			lda 	NSMantissa1
.939f	85 37		sta $37				sta 	zTemp0+1
.93a1	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.93a3	b2 36		lda ($36)			lda 	(zTemp0)
.93a5	85 30		sta $30				sta 	safePtr
.93a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a9	85 31		sta $31				sta 	safePtr+1
.93ab	c8		iny				iny
.93ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ae	85 32		sta $32				sta 	safePtr+2
.93b0	c8		iny				iny
.93b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.93b3	85 33		sta $33				sta 	safePtr+3
.93b5	c8		iny				iny 								; get Y offset -> Y
.93b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.93b8	a8		tay				tay
.93b9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93bb	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93be	f0 13		beq $93d3			beq 	_ParamExit 					; if so, exit.
.93c0					_ParamExtract:
.93c0	ca		dex				dex 								; put a local term on the level before
.93c1	20 a0 92	jsr $92a0			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93c4	20 db 91	jsr $91db			jsr 	AssignVariable 				; assign stacked value to the variable.
.93c7	e8		inx				inx 								; advance to next parameter to do.
.93c8	e8		inx				inx
.93c9	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93cc	f0 05		beq $93d3			beq 	_ParamExit
.93ce	20 0b ae	jsr $ae0b			jsr 	CheckComma 					; comma seperating parameters
.93d1	80 ed		bra $93c0			bra 	_ParamExtract
.93d3					_ParamExit:
.93d3	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; check )
.93d6	60		rts				rts 								; and continue from here
.adf5					Command_ENDPROC:
.adf5	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.adf7	a2 14		ldx #$14			ldx 	#ERRID_PROC
.adf9	20 ae a6	jsr $a6ae			jsr 	StackCheckFrame
.adfc	20 d7 a6	jsr $a6d7			jsr 	STKLoadCodePosition 		; restore code position
.adff	20 a0 a6	jsr $a6a0			jsr 	StackClose
.ae02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93d7					Command_Read:
.93d7	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93d9	20 75 a0	jsr $a075			jsr 	EvaluateTerm
.93dc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93df	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93e1	f0 4a		beq $942d			beq 	_CRSyntax 					; check reference (bit 0)
.93e3	20 76 94	jsr $9476			jsr 	SwapDataCodePtrs 			; swap code and data
.93e6	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93e9	d0 20		bne $940b			bne 	_CRContinueData
.93eb					_CRKeepSearching:
.93eb	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.93ed	aa		tax				tax
.93ee	20 f6 98	jsr $98f6			jsr 	ScanForward
.93f1	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.93f3	f0 16		beq $940b			beq 	_CRHaveData 				; found it
.93f5	18		clc				clc
.93f6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93f8	65 30		adc $30				adc 	codePtr
.93fa	85 30		sta $30				sta 	codePtr
.93fc	90 02		bcc $9400			bcc 	_CREExit
.93fe	e6 31		inc $31				inc 	codePtr+1
.9400					_CREExit:
.9400	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9402	b2 30		lda ($30)			lda 	(codePtr)
.9404	d0 e5		bne $93eb			bne 	_CRKeepSearching
.9406	a9 0b		lda #$0b		lda	#11
.9408	4c 9b 99	jmp $999b		jmp	ErrorHandler
.940b					_CRHaveData:
.940b					_CRContinueData:
.940b	a2 01		ldx #$01			ldx 	#1
.940d	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9410	ca		dex				dex
.9411	20 db 91	jsr $91db			jsr		AssignVariable 				; do the assignment
.9414	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9417	b1 30		lda ($30),y			lda 	(codePtr),y
.9419	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.941b	d0 04		bne $9421			bne 	_CRSwapBack
.941d	c8		iny				iny 								; consume comma
.941e	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9421					_CRSwapBack:
.9421	20 76 94	jsr $9476			jsr 	SwapDataCodePtrs			; swap them back.
.9424	b1 30		lda ($30),y			lda 	(codePtr),y
.9426	c8		iny				iny
.9427	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9429	f0 ac		beq $93d7			beq 	Command_Read 				; if so go round again.
.942b	88		dey				dey 								; unpick get.
.942c	60		rts				rts
.942d					_CRSyntax:
.942d	4c e9 b3	jmp $b3e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9430					RemCommand:
.9430	b1 30		lda ($30),y			lda 	(codePtr),y
.9432	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9434	d0 06		bne $943c			bne 	_RMExit
.9436	c8		iny				iny
.9437	98		tya				tya
.9438	38		sec				sec
.9439	71 30		adc ($30),y			adc 	(codePtr),y
.943b	a8		tay				tay
.943c					_RMExit:
.943c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.943d					Command_REPEAT:
.943d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.943f	20 82 a6	jsr $a682			jsr 	StackOpen
.9442	20 c6 a6	jsr $a6c6			jsr 	STKSaveCodePosition 		; save loop position
.9445	60		rts				rts
.9446					Command_UNTIL:
.9446	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9448	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.944a	20 ae a6	jsr $a6ae			jsr 	StackCheckFrame
.944d	a2 00		ldx #$00			ldx 	#0
.944f	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; work out the number
.9452	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; check if zero
.9455	f0 04		beq $945b			beq 	_CULoopBack 				; if so keep looping
.9457	20 a0 a6	jsr $a6a0			jsr 	StackClose		 			; return
.945a	60		rts				rts
.945b					_CULoopBack:
.945b	20 d7 a6	jsr $a6d7			jsr 	STKLoadCodePosition 		; loop back
.945e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.945f					Command_Restore:
.945f	20 76 94	jsr $9476			jsr 	SwapDataCodePtrs 			; swap code and data
.9462	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9464	85 30		sta $30				sta 	codePtr
.9466	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9468	85 31		sta $31				sta 	codePtr+1
.946a	20 76 94	jsr $9476			jsr 	SwapDataCodePtrs 			; put them back
.946d	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.946f	8d 9b 04	sta $049b			sta 	dataPointer+4
.9472	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9475	60		rts				rts
.9476					SwapDataCodePtrs:
.9476	da		phx				phx
.9477	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9479					_SDCPLoop:
.9479	b5 30		lda $30,x			lda 	safePtr,x
.947b	48		pha				pha
.947c	bd 97 04	lda $0497,x			lda 	dataPointer,x
.947f	95 30		sta $30,x			sta 	safePtr,x
.9481	68		pla				pla
.9482	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9485	ca		dex				dex
.9486	10 f1		bpl $9479			bpl 	_SDCPLoop
.9488	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.948b	8c 9b 04	sty $049b			sty 	dataPointer+4
.948e	a8		tay				tay
.948f	fa		plx				plx
.9490	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9491					CommandRUN:
.9491	20 fc 8b	jsr $8bfc			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9494	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9496	85 30		sta $30				sta 	codePtr
.9498	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.949a	85 31		sta $31				sta 	codePtr+1
.949c					RUNNewLine:
.949c	b2 30		lda ($30)			lda 	(codePtr)
.949e	f0 5e		beq $94fe			beq 	CRNoProgram         		; no then END.
.94a0	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.94a2	9a		txs				txs
.94a3					RUNCodePointerLine:
.94a3	a0 02		ldy #$02			ldy 	#2 							; start of program
.94a5					_CRIncMainLoop:
.94a5	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.94a8	d0 05		bne $94af			bne 	_CRNoBreakCheck
.94aa	20 e5 b5	jsr $b5e5			jsr 	EXTBreakCheck 				; break check
.94ad	f0 4a		beq $94f9			beq 	_CRBreak
.94af					_CRNoBreakCheck:
.94af	c8		iny				iny
.94b0					_CRMainLoop:
.94b0	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.94b3	b1 30		lda ($30),y			lda 	(codePtr),y
.94b5	10 10		bpl $94c7			bpl 	_CRNotKeyword
.94b7	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.94b9	b0 04		bcs $94bf			bcs 	_CRIsKeyword
.94bb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94bd	b0 34		bcs $94f3			bcs		_CRSyntaxError
.94bf					_CRIsKeyword:
.94bf	c8		iny				iny 								; consume command
.94c0	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94c1	aa		tax				tax 								; put in X for vector jump
.94c2	20 f6 94	jsr $94f6			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94c5	80 e9		bra $94b0			bra 	_CRMainLoop 				; and loop round
.94c7					_CRNotKeyword:
.94c7	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94c9	f0 da		beq $94a5			beq 	_CRIncMainLoop
.94cb	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94cd	90 05		bcc $94d4			bcc 	_CRNotVariable
.94cf					_CRGoLet:
.94cf	20 9f 91	jsr $919f			jsr 	LetCommand
.94d2	80 dc		bra $94b0			bra 	_CRMainLoop
.94d4					_CRNotVariable:
.94d4	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94d6	f0 f7		beq $94cf			beq 	_CRGoLet
.94d8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94da	f0 f3		beq $94cf			beq 	_CRGoLet
.94dc	c9 21		cmp #$21			cmp 	#KWD_PLING
.94de	f0 ef		beq $94cf			beq 	_CRGoLet
.94e0	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94e2	f0 09		beq $94ed			beq 	_CRGoRem
.94e4	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94e6	d0 0b		bne $94f3			bne 	_CRSyntaxError
.94e8	20 9c 8a	jsr $8a9c			jsr 	LabelHere
.94eb	80 c3		bra $94b0			bra 	_CRMainLoop
.94ed					_CRGoRem:
.94ed	c8		iny				iny
.94ee	20 30 94	jsr $9430			jsr 	RemCommand
.94f1	80 bd		bra $94b0			bra 	_CRMainLoop
.94f3					_CRSyntaxError:
.94f3	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.94f6					_CRCallVector0:
.94f6	7c a2 95	jmp ($95a2,x)			jmp 	(VectorSet0,x)
.94f9					_CRBreak:
.94f9	a9 01		lda #$01		lda	#1
.94fb	4c 9b 99	jmp $999b		jmp	ErrorHandler
.94fe					CRNoProgram:
.94fe	4c 1f 8d	jmp $8d1f			jmp 	EndCommand
.9501					EOLCommand:
.9501	18		clc				clc
.9502	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9504	65 30		adc $30				adc 	codePtr
.9506	85 30		sta $30				sta 	codePtr
.9508	90 02		bcc $950c			bcc 	_CREExit
.950a	e6 31		inc $31				inc 	codePtr+1
.950c					_CREExit:
.950c	80 8e		bra $949c			bra 	RunNewLine
.950e					Shift1Command:
.950e	b1 30		lda ($30),y			lda 	(codePtr),y
.9510	c8		iny				iny
.9511	0a		asl a				asl 	a
.9512	aa		tax				tax
.9513	7c 38 96	jmp ($9638,x)			jmp 	(VectorSet1,x)
.9516					Shift2Command:
.9516	b1 30		lda ($30),y			lda 	(codePtr),y
.9518	c8		iny				iny
.9519	0a		asl a				asl 	a
.951a	aa		tax				tax
.951b	7c 52 96	jmp ($9652,x)			jmp 	(VectorSet2,x)
.951e					Unused1:
.951e					Unused2:
.951e					Unused3:
.951e					Unused4:
.951e	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
>9521							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9522					VectorSetPunc:
>9522	45 9b					.word	ShiftLeft                        ; $00 <<
>9524	3f 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9526	35 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9528	e9 b3					.word	SyntaxError                      ; $03 !!3
>952a	e9 b3					.word	SyntaxError                      ; $04 ><
>952c	49 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>952e	48 9b					.word	ShiftRight                       ; $06 >>
>9530	e9 b3					.word	SyntaxError                      ; $07 !!7
>9532	e9 b3					.word	SyntaxError                      ; $08 !!8
>9534	e9 b3					.word	SyntaxError                      ; $09 !!9
>9536	e9 b3					.word	SyntaxError                      ; $0a !!10
>9538	e9 b3					.word	SyntaxError                      ; $0b !!11
>953a	e9 b3					.word	SyntaxError                      ; $0c !!12
>953c	e9 b3					.word	SyntaxError                      ; $0d !!13
>953e	e9 b3					.word	SyntaxError                      ; $0e !!14
>9540	e9 b3					.word	SyntaxError                      ; $0f !!15
>9542	e9 b3					.word	SyntaxError                      ; $10 @
>9544	e9 b3					.word	SyntaxError                      ; $11 !!17
>9546	e9 b3					.word	SyntaxError                      ; $12 !!18
>9548	e9 b3					.word	SyntaxError                      ; $13 [
>954a	1c ae					.word	IntegerDivide                    ; $14 \
>954c	e9 b3					.word	SyntaxError                      ; $15 ]
>954e	ce 9c					.word	EorInteger                       ; $16 ^
>9550	e9 b3					.word	SyntaxError                      ; $17 _
>9552	e9 b3					.word	SyntaxError                      ; $18 `
>9554	e9 b3					.word	SyntaxError                      ; $19 !!25
>9556	e9 b3					.word	SyntaxError                      ; $1a !!26
>9558	e9 b3					.word	SyntaxError                      ; $1b {
>955a	88 9c					.word	OraInteger                       ; $1c |
>955c	e9 b3					.word	SyntaxError                      ; $1d }
>955e	e9 b3					.word	SyntaxError                      ; $1e ~
>9560	e9 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>9562	e9 b3					.word	SyntaxError                      ; $20
>9564	14 9d					.word	WordIndirect                     ; $21 !
>9566	e9 b3					.word	SyntaxError                      ; $22 "
>9568	e9 b3					.word	SyntaxError                      ; $23 #
>956a	e9 b3					.word	SyntaxError                      ; $24 $
>956c	69 ae					.word	IntegerModulus                   ; $25 %
>956e	42 9c					.word	AndInteger                       ; $26 &
>9570	e9 b3					.word	SyntaxError                      ; $27 '
>9572	e9 b3					.word	SyntaxError                      ; $28 (
>9574	e9 b3					.word	SyntaxError                      ; $29 )
>9576	de ae					.word	MulInteger                       ; $2a *
>9578	dc 9b					.word	AddInteger                       ; $2b +
>957a	e9 b3					.word	SyntaxError                      ; $2c ,
>957c	17 9c					.word	SubInteger                       ; $2d -
>957e	e9 b3					.word	SyntaxError                      ; $2e .
>9580	75 b0					.word	FDivideCommand                   ; $2f /
>9582	e9 b3					.word	SyntaxError                      ; $30 0
>9584	e9 b3					.word	SyntaxError                      ; $31 1
>9586	e9 b3					.word	SyntaxError                      ; $32 2
>9588	e9 b3					.word	SyntaxError                      ; $33 3
>958a	e9 b3					.word	SyntaxError                      ; $34 4
>958c	e9 b3					.word	SyntaxError                      ; $35 5
>958e	e9 b3					.word	SyntaxError                      ; $36 6
>9590	e9 b3					.word	SyntaxError                      ; $37 7
>9592	e9 b3					.word	SyntaxError                      ; $38 8
>9594	e9 b3					.word	SyntaxError                      ; $39 9
>9596	e9 b3					.word	SyntaxError                      ; $3a :
>9598	e9 b3					.word	SyntaxError                      ; $3b ;
>959a	21 9a					.word	BinaryCompareLess                ; $3c <
>959c	17 9a					.word	BinaryCompareEqual               ; $3d =
>959e	2b 9a					.word	BinaryCompareGreater             ; $3e >
>95a0	3b 9d					.word	ByteIndirect                     ; $3f ?
.95a2					VectorSet0:
>95a2	01 95					.word	EOLCommand                       ; $80 !0:EOF
>95a4	0e 95					.word	Shift1Command                    ; $81 !1:SH1
>95a6	16 95					.word	Shift2Command                    ; $82 !2:SH2
>95a8	bb b1					.word	AbsUnary                         ; $83 ABS(
>95aa	0b a2					.word	AllocUnary                       ; $84 ALLOC(
>95ac	cb b1					.word	AscUnary                         ; $85 ASC(
>95ae	8c a3					.word	ChrUnary                         ; $86 CHR$(
>95b0	22 8d					.word	UnaryEvent                       ; $87 EVENT(
>95b2	13 9a					.word	UnaryFalse                       ; $88 FALSE
>95b4	d8 b1					.word	FracUnary                        ; $89 FRAC(
>95b6	e9 b3					.word	SyntaxError                      ; $8a HIT(
>95b8	ee b1					.word	IntUnary                         ; $8b INT(
>95ba	44 b2					.word	IsValUnary                       ; $8c ISVAL(
>95bc	8b 91					.word	UnaryJoyB                        ; $8d JOYB(
>95be	64 91					.word	UnaryJoyX                        ; $8e JOYX(
>95c0	67 91					.word	UnaryJoyY                        ; $8f JOYY(
>95c2	66 a4					.word	Unary_Left                       ; $90 LEFT$(
>95c4	00 b2					.word	LenUnary                         ; $91 LEN(
>95c6	7f a2					.word	Unary_Max                        ; $92 MAX(
>95c8	90 a4					.word	Unary_Mid                        ; $93 MID$(
>95ca	7b a2					.word	Unary_Min                        ; $94 MIN(
>95cc	d6 a2					.word	Unary_Not                        ; $95 NOT(
>95ce	ec a2					.word	Unary_Random                     ; $96 RANDOM(
>95d0	76 a4					.word	Unary_Right                      ; $97 RIGHT$(
>95d2	0b a3					.word	Unary_Rnd                        ; $98 RND(
>95d4	1a b2					.word	SgnUnary                         ; $99 SGN(
>95d6	9e a3					.word	SpcUnary                         ; $9a SPC(
>95d8	b9 a3					.word	Unary_Str                        ; $9b STR$(
>95da	df 96					.word	UnaryTimer                       ; $9c TIMER(
>95dc	07 9a					.word	UnaryTrue                        ; $9d TRUE
>95de	3a b2					.word	ValUnary                         ; $9e VAL(
>95e0	8b 8d					.word	ForCommand                       ; $9f FOR
>95e2	3a 91					.word	IfCommand                        ; $a0 IF
>95e4	1e 95					.word	Unused1                          ; $a1 PROC
>95e6	3d 94					.word	Command_REPEAT                   ; $a2 REPEAT
>95e8	6c 99					.word	Command_WHILE                    ; $a3 WHILE
>95ea	63 91					.word	EndIf                            ; $a4 ENDIF
>95ec	f5 ad					.word	Command_ENDPROC                  ; $a5 ENDPROC
>95ee	45 8e					.word	NextCommand                      ; $a6 NEXT
>95f0	1e 95					.word	Unused4                          ; $a7 THEN
>95f2	46 94					.word	Command_UNTIL                    ; $a8 UNTIL
>95f4	8d 99					.word	Command_WEND                     ; $a9 WEND
>95f6	e9 b3					.word	SyntaxError                      ; $aa BY
>95f8	c2 8b					.word	CallCommand                      ; $ab CALL
>95fa	a2 8e					.word	CircleCommand                    ; $ac CIRCLE
>95fc	fc 8b					.word	ClearCommand                     ; $ad CLEAR
>95fe	54 8c					.word	ClearScreen                      ; $ae CLS
>9600	e9 b3					.word	SyntaxError                      ; $af COLOR
>9602	e9 b3					.word	SyntaxError                      ; $b0 COLOUR
>9604	5a 8c					.word	Command_Data                     ; $b1 DATA
>9606	62 8c					.word	DimCommand                       ; $b2 DIM
>9608	1e 95					.word	Unused3                          ; $b3 DOWNTO
>960a	5c 91					.word	ElseCode                         ; $b4 ELSE
>960c	e9 b3					.word	SyntaxError                      ; $b5 FROM
>960e	ce 90					.word	GfxCommand                       ; $b6 GFX
>9610	00 91					.word	Command_GOSUB                    ; $b7 GOSUB
>9612	1e 91					.word	GotoCommand                      ; $b8 GOTO
>9614	e9 b3					.word	SyntaxError                      ; $b9 HERE
>9616	cc 8e					.word	ImageCommand                     ; $ba IMAGE
>9618	9f 91					.word	LetCommand                       ; $bb LET
>961a	21 8f					.word	LineCommand                      ; $bc LINE
>961c	92 92					.word	Command_LOCAL                    ; $bd LOCAL
>961e	e9 b3					.word	SyntaxError                      ; $be OFF
>9620	e9 b3					.word	SyntaxError                      ; $bf ON
>9622	e9 b3					.word	SyntaxError                      ; $c0 OUTLINE
>9624	1a 8f					.word	PlotCommand                      ; $c1 PLOT
>9626	20 93					.word	Command_Print                    ; $c2 PRINT
>9628	d7 93					.word	Command_Read                     ; $c3 READ
>962a	9e 8e					.word	RectangleCommand                 ; $c4 RECT
>962c	30 94					.word	RemCommand                       ; $c5 REM
>962e	10 91					.word	Command_RETURN                   ; $c6 RETURN
>9630	e9 b3					.word	SyntaxError                      ; $c7 SOLID
>9632	ad 8e					.word	SpriteCommand                    ; $c8 SPRITE
>9634	e9 8e					.word	TextCommand                      ; $c9 TEXT
>9636	1e 95					.word	Unused2                          ; $ca TO
.9638					VectorSet1:
>9638	e9 b3					.word	SyntaxError                      ; $80 !0:EOF
>963a	e9 b3					.word	SyntaxError                      ; $81 !1:SH1
>963c	e9 b3					.word	SyntaxError                      ; $82 !2:SH2
>963e	93 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9640	b2 8b					.word	AssertCommand                    ; $84 ASSERT
>9642	6e 90					.word	BitmapCtrl                       ; $85 BITMAP
>9644	1f 8d					.word	EndCommand                       ; $86 END
>9646	f4 91					.word	Command_List                     ; $87 LIST
>9648	16 93					.word	NewCommand                       ; $88 NEW
>964a	5f 94					.word	Command_Restore                  ; $89 RESTORE
>964c	91 94					.word	CommandRUN                       ; $8a RUN
>964e	b3 90					.word	SpritesCtrl                      ; $8b SPRITES
>9650	da 96					.word	StopCommand                      ; $8c STOP
.9652					VectorSet2:
>9652	e9 b3					.word	SyntaxError                      ; $80 !0:EOF
>9654	e9 b3					.word	SyntaxError                      ; $81 !1:SH1
>9656	e9 b3					.word	SyntaxError                      ; $82 !2:SH2
>9658	a8 b2					.word	Assemble_adc                     ; $83 ADC
>965a	a0 b2					.word	Assemble_and                     ; $84 AND
>965c	bc b2					.word	Assemble_asl                     ; $85 ASL
>965e	26 b3					.word	Assemble_bcc                     ; $86 BCC
>9660	2a b3					.word	Assemble_bcs                     ; $87 BCS
>9662	32 b3					.word	Assemble_beq                     ; $88 BEQ
>9664	e9 b2					.word	Assemble_bit                     ; $89 BIT
>9666	1a b3					.word	Assemble_bmi                     ; $8a BMI
>9668	2e b3					.word	Assemble_bne                     ; $8b BNE
>966a	16 b3					.word	Assemble_bpl                     ; $8c BPL
>966c	36 b3					.word	Assemble_bra                     ; $8d BRA
>966e	3a b3					.word	Assemble_brk                     ; $8e BRK
>9670	1e b3					.word	Assemble_bvc                     ; $8f BVC
>9672	22 b3					.word	Assemble_bvs                     ; $90 BVS
>9674	42 b3					.word	Assemble_clc                     ; $91 CLC
>9676	96 b3					.word	Assemble_cld                     ; $92 CLD
>9678	56 b3					.word	Assemble_cli                     ; $93 CLI
>967a	86 b3					.word	Assemble_clv                     ; $94 CLV
>967c	b4 b2					.word	Assemble_cmp                     ; $95 CMP
>967e	fd b2					.word	Assemble_cpx                     ; $96 CPX
>9680	f8 b2					.word	Assemble_cpy                     ; $97 CPY
>9682	da b2					.word	Assemble_dec                     ; $98 DEC
>9684	92 b3					.word	Assemble_dex                     ; $99 DEX
>9686	6e b3					.word	Assemble_dey                     ; $9a DEY
>9688	a4 b2					.word	Assemble_eor                     ; $9b EOR
>968a	df b2					.word	Assemble_inc                     ; $9c INC
>968c	a2 b3					.word	Assemble_inx                     ; $9d INX
>968e	8e b3					.word	Assemble_iny                     ; $9e INY
>9690	11 b3					.word	Assemble_jmp                     ; $9f JMP
>9692	0c b3					.word	Assemble_jsr                     ; $a0 JSR
>9694	b0 b2					.word	Assemble_lda                     ; $a1 LDA
>9696	d5 b2					.word	Assemble_ldx                     ; $a2 LDX
>9698	f3 b2					.word	Assemble_ldy                     ; $a3 LDY
>969a	c6 b2					.word	Assemble_lsr                     ; $a4 LSR
>969c	a6 b3					.word	Assemble_nop                     ; $a5 NOP
>969e	9c b2					.word	Assemble_ora                     ; $a6 ORA
>96a0	52 b3					.word	Assemble_pha                     ; $a7 PHA
>96a2	3e b3					.word	Assemble_php                     ; $a8 PHP
>96a4	9a b3					.word	Assemble_phx                     ; $a9 PHX
>96a6	5a b3					.word	Assemble_phy                     ; $aa PHY
>96a8	62 b3					.word	Assemble_pla                     ; $ab PLA
>96aa	46 b3					.word	Assemble_plp                     ; $ac PLP
>96ac	ae b3					.word	Assemble_plx                     ; $ad PLX
>96ae	6a b3					.word	Assemble_ply                     ; $ae PLY
>96b0	c1 b2					.word	Assemble_rol                     ; $af ROL
>96b2	cb b2					.word	Assemble_ror                     ; $b0 ROR
>96b4	4e b3					.word	Assemble_rti                     ; $b1 RTI
>96b6	5e b3					.word	Assemble_rts                     ; $b2 RTS
>96b8	b8 b2					.word	Assemble_sbc                     ; $b3 SBC
>96ba	4a b3					.word	Assemble_sec                     ; $b4 SEC
>96bc	aa b3					.word	Assemble_sed                     ; $b5 SED
>96be	66 b3					.word	Assemble_sei                     ; $b6 SEI
>96c0	ac b2					.word	Assemble_sta                     ; $b7 STA
>96c2	9e b3					.word	Assemble_stp                     ; $b8 STP
>96c4	d0 b2					.word	Assemble_stx                     ; $b9 STX
>96c6	ee b2					.word	Assemble_sty                     ; $ba STY
>96c8	e4 b2					.word	Assemble_stz                     ; $bb STZ
>96ca	82 b3					.word	Assemble_tax                     ; $bc TAX
>96cc	7e b3					.word	Assemble_tay                     ; $bd TAY
>96ce	07 b3					.word	Assemble_trb                     ; $be TRB
>96d0	02 b3					.word	Assemble_tsb                     ; $bf TSB
>96d2	8a b3					.word	Assemble_tsx                     ; $c0 TSX
>96d4	72 b3					.word	Assemble_txa                     ; $c1 TXA
>96d6	7a b3					.word	Assemble_txs                     ; $c2 TXS
>96d8	76 b3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96da					StopCommand:
.96da	a9 08		lda #$08		lda	#8
.96dc	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96df					UnaryTimer:
.96df	fa		plx				plx
.96e0	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.96e3					TimerToStackX:
.96e3	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; zero result
.96e6	64 01		stz $01				stz 	1 							; access I/O
.96e8	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96eb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96ee	ad 5a d6	lda $d65a			lda 	$D65A
.96f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96f4	ad 5b d6	lda $d65b			lda 	$D65B
.96f7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96fb					ListConvertLine:
.96fb	9c 9d 04	stz $049d			stz 	tbOffset
.96fe	9c aa 04	stz $04aa			stz 	tokenBuffer
.9701	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9703	b1 30		lda ($30),y			lda 	(codePtr),y
.9705	aa		tax				tax
.9706	88		dey				dey
.9707	b1 30		lda ($30),y			lda 	(codePtr),y
.9709	20 5f af	jsr $af5f			jsr 	ConvertInt16
.970c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.970e	86 37		stx $37				stx 	zTemp0+1
.9710	a0 00		ldy #$00			ldy 	#0
.9712					_LCCopyNumber:
.9712	b1 36		lda ($36),y			lda 	(zTemp0),y
.9714	20 40 98	jsr $9840			jsr 	LCLWrite
.9717	c8		iny				iny
.9718	b1 36		lda ($36),y			lda 	(zTemp0),y
.971a	d0 f6		bne $9712			bne 	_LCCopyNumber
.971c	20 59 99	jsr $9959			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.971f	48		pha				pha 								; save on stack
.9720	10 0c		bpl $972e			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9722	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9723	6d a6 04	adc $04a6			adc 	listIndent
.9726	8d a6 04	sta $04a6			sta 	listIndent
.9729	10 03		bpl $972e			bpl 	_LCNoAdjust
.972b	9c a6 04	stz $04a6			stz 	listIndent
.972e					_LCNoAdjust:
.972e	18		clc				clc		 							; work out actual indent.
.972f	ad a6 04	lda $04a6			lda 	listIndent
.9732	0a		asl a				asl 	a
.9733	69 06		adc #$06			adc 	#6
.9735	85 36		sta $36				sta 	zTemp0
.9737					_LCPadOut:
.9737	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9739	20 40 98	jsr $9840			jsr 	LCLWrite
.973c	ad 9d 04	lda $049d			lda 	tbOffset
.973f	c5 36		cmp $36				cmp 	zTemp0
.9741	d0 f4		bne $9737			bne 	_LCPadOut
.9743	a0 03		ldy #$03			ldy 	#3 							; start position.
.9745					_LCMainLoop:
.9745	b1 30		lda ($30),y			lda 	(codePtr),y
.9747	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9749	f0 17		beq $9762			beq 	_LCExit
.974b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.974d	90 1e		bcc $976d			bcc 	_LCDoubles
.974f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9751	90 2a		bcc $977d			bcc 	_LCShiftPunc
.9753	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9755	90 35		bcc $978c			bcc 	_LCPunctuation
.9757	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9759	90 3e		bcc $9799			bcc 	_LCIdentifiers
.975b	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.975d	90 5a		bcc $97b9			bcc 	_LCTokens
.975f	4c 14 98	jmp $9814			jmp 	_LCData 					; 254-5 are data objects
.9762					_LCExit:
.9762	68		pla				pla 								; get old indent adjust
.9763	30 07		bmi $976c			bmi 	_LCExit2
.9765	18		clc				clc 								; add to indent if +ve
.9766	6d a6 04	adc $04a6			adc 	listIndent
.9769	8d a6 04	sta $04a6			sta 	listIndent
.976c					_LCExit2:
.976c	60		rts				rts
.976d					_LCDoubles:
.976d	48		pha				pha
.976e	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.976f	29 02		and #$02			and 	#2
.9771	09 3c		ora #$3c			ora 	#60 						; make < >
.9773	20 40 98	jsr $9840			jsr 	LCLWrite
.9776	68		pla				pla 								; restore, do lower bit
.9777	29 03		and #$03			and 	#3
.9779	09 3c		ora #$3c			ora 	#60
.977b	80 0f		bra $978c			bra		_LCPunctuation 				; print, increment, loop
.977d					_LCShiftPunc:
.977d	aa		tax				tax 								; save in X
.977e	29 07		and #$07			and 	#7 							; lower 3 bits
.9780	f0 02		beq $9784			beq 	_LCNoAdd
.9782	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9784					_LCNoAdd:
.9784	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9786	90 02		bcc $978a			bcc 	_LCNoAdd2
.9788	09 20		ora #$20			ora 	#32 						; adds $20
.978a					_LCNoAdd2:
.978a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.978c					_LCPunctuation:
.978c	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.978e	d0 03		bne $9793			bne 	_LCPContinue
.9790	20 4f 98	jsr $984f			jsr 	LCDeleteLastSpace
.9793					_LCPContinue:
.9793	c8		iny				iny 								; consume character
.9794	20 40 98	jsr $9840			jsr 	LCLWrite 					; write it out.
.9797	80 ac		bra $9745			bra 	_LCMainLoop 				; go round again.
.9799					_LCIdentifiers:
.9799	18		clc				clc 								; convert to physical address
.979a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.979c	85 37		sta $37				sta 	zTemp0+1
.979e	c8		iny				iny
.979f	b1 30		lda ($30),y			lda 	(codePtr),y
.97a1	85 36		sta $36				sta 	zTemp0
.97a3	c8		iny				iny
.97a4	5a		phy				phy 								; save position
.97a5	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.97a7					_LCOutIdentifier:
.97a7	c8		iny				iny
.97a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.97aa	29 7f		and #$7f			and 	#$7F
.97ac	20 8e 98	jsr $988e			jsr 	LCLLowerCase
.97af	20 40 98	jsr $9840			jsr 	LCLWrite
.97b2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.97b4	10 f1		bpl $97a7			bpl 	_LCOutIdentifier
.97b6	7a		ply				ply 								; restore position
.97b7	80 8c		bra $9745			bra 	_LCMainLoop
.97b9					_LCTokens:
.97b9	aa		tax				tax 								; token in X
.97ba	a9 af		lda #$af			lda 	#((KeywordSet2) & $FF)
.97bc	85 36		sta $36				sta 	0+zTemp0
.97be	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.97c0	85 37		sta $37				sta 	1+zTemp0
.97c2	e0 82		cpx #$82			cpx 	#$82
.97c4	f0 16		beq $97dc			beq 	_LCUseShift
.97c6	a9 61		lda #$61			lda 	#((KeywordSet1) & $FF)
.97c8	85 36		sta $36				sta 	0+zTemp0
.97ca	a9 a9		lda #$a9			lda 	#((KeywordSet1) >> 8)
.97cc	85 37		sta $37				sta 	1+zTemp0
.97ce	e0 81		cpx #$81			cpx 	#$81
.97d0	f0 0a		beq $97dc			beq 	_LCUseShift
.97d2	a9 85		lda #$85			lda 	#((KeywordSet0) & $FF)
.97d4	85 36		sta $36				sta 	0+zTemp0
.97d6	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.97d8	85 37		sta $37				sta 	1+zTemp0
.97da	80 01		bra $97dd			bra 	_LCNoShift
.97dc					_LCUseShift:
.97dc	c8		iny				iny
.97dd					_LCNoShift:
.97dd	20 63 98	jsr $9863			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.97e0	b1 30		lda ($30),y			lda 	(codePtr),y
.97e2	aa		tax				tax 								; into X
.97e3					_LCFindText:
.97e3	ca		dex				dex
.97e4	10 0e		bpl $97f4			bpl 	_LCFoundText 				; found text.
.97e6	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.97e8	1a		inc a				inc 	a 							; one extra for size
.97e9	38		sec				sec 								; one extra for checksum
.97ea	65 36		adc $36				adc 	zTemp0 						; go to next token
.97ec	85 36		sta $36				sta 	zTemp0
.97ee	90 f3		bcc $97e3			bcc 	_LCFindText
.97f0	e6 37		inc $37				inc 	zTemp0+1
.97f2	80 ef		bra $97e3			bra 	_LCFindText
.97f4					_LCFoundText:
.97f4	5a		phy				phy 								; save List position
.97f5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97f7	aa		tax				tax
.97f8	a0 02		ldy #$02			ldy 	#2
.97fa					_LCCopyToken:
.97fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.97fc	20 8e 98	jsr $988e			jsr 	LCLLowerCase
.97ff	20 40 98	jsr $9840			jsr 	LCLWrite
.9802	c8		iny				iny
.9803	ca		dex				dex
.9804	d0 f4		bne $97fa			bne 	_LCCopyToken
.9806	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9808	f0 05		beq $980f			beq 	_LCNoSpace
.980a	a9 20		lda #$20			lda 	#' '
.980c	20 40 98	jsr $9840			jsr 	LCLWrite
.980f					_LCNoSpace:
.980f	7a		ply				ply 								; restore position.
.9810	c8		iny				iny 								; consume token
.9811	4c 45 97	jmp $9745			jmp 	_LCMainLoop 				; and go around again.
.9814					_LCData:
.9814	48		pha				pha 								; save type $FE/$FF
.9815	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9817	c9 fe		cmp #$fe			cmp 	#$FE
.9819	f0 02		beq $981d			beq 	_LCHaveOpener
.981b	a2 22		ldx #$22			ldx 	#'"'
.981d					_LCHaveOpener:
.981d	8a		txa				txa 								; output prefix (# or ")
.981e	20 40 98	jsr $9840			jsr 	LCLWrite
.9821	c8		iny				iny 								; get count
.9822	b1 30		lda ($30),y			lda 	(codePtr),y
.9824	aa		tax				tax
.9825	c8		iny				iny 								; point at first character
.9826					_LCOutData:
.9826	b1 30		lda ($30),y			lda 	(codePtr),y
.9828	c9 00		cmp #$00			cmp 	#0
.982a	f0 03		beq $982f			beq 	_LCNoPrint
.982c	20 40 98	jsr $9840			jsr 	LCLWrite
.982f					_LCNoPrint:
.982f	c8		iny				iny
.9830	ca		dex				dex
.9831	d0 f3		bne $9826			bne 	_LCOutData
.9833	68		pla				pla 								; closing " required ?
.9834	c9 ff		cmp #$ff			cmp 	#$FF
.9836	d0 05		bne $983d			bne 	_LCNoQuote
.9838	a9 22		lda #$22			lda 	#'"'
.983a	20 40 98	jsr $9840			jsr 	LCLWrite
.983d					_LCNoQuote:
.983d	4c 45 97	jmp $9745			jmp 	_LCMainLoop
.9840					LCLWrite:
.9840	da		phx				phx
.9841	ae 9d 04	ldx $049d			ldx 	tbOffset
.9844	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9847	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.984a	ee 9d 04	inc $049d			inc 	tbOffset
.984d	fa		plx				plx
.984e	60		rts				rts
.984f					LCDeleteLastSpace:
.984f	48		pha				pha
.9850	da		phx				phx
.9851	ae 9d 04	ldx $049d			ldx 	tbOffset
.9854	f0 0a		beq $9860			beq 	_LCDLSExit
.9856	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9859	c9 20		cmp #$20			cmp 	#' '
.985b	d0 03		bne $9860			bne 	_LCDLSExit
.985d	ce 9d 04	dec $049d			dec 	tbOffset
.9860					_LCDLSExit:
.9860	fa		plx				plx
.9861	68		pla				pla
.9862	60		rts				rts
.9863					LCCheckSpaceRequired:
.9863	ae 9d 04	ldx $049d			ldx 	tbOffset
.9866	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9869	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.986b	f0 1b		beq $9888			beq 	_LCCSRSpace
.986d	c9 29		cmp #$29			cmp 	#')'
.986f	f0 17		beq $9888			beq 	_LCCSRSpace
.9871	c9 23		cmp #$23			cmp 	#'#'
.9873	f0 13		beq $9888			beq 	_LCCSRSpace
.9875	20 8e 98	jsr $988e			jsr 	LCLLowerCase 				; saves a little effort
.9878	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.987a	90 11		bcc $988d			bcc 	_LCCSRExit
.987c	c9 3a		cmp #$3a			cmp 	#"9"+1
.987e	90 08		bcc $9888			bcc 	_LCCSRSpace
.9880	c9 61		cmp #$61			cmp 	#"a"
.9882	90 09		bcc $988d			bcc 	_LCCSRExit
.9884	c9 7b		cmp #$7b			cmp 	#"z"+1
.9886	b0 05		bcs $988d			bcs 	_LCCSRExit
.9888					_LCCSRSpace:
.9888	a9 20		lda #$20			lda 	#' '
.988a	20 40 98	jsr $9840			jsr 	LCLWrite
.988d					_LCCSRExit:
.988d	60		rts				rts
.988e					LCLLowerCase:
.988e	c9 41		cmp #$41			cmp 	#"A"
.9890	90 06		bcc $9898			bcc 	_LCLLCOut
.9892	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9894	b0 02		bcs $9898			bcs 	_LCLLCOut
.9896	69 20		adc #$20			adc 	#$20
.9898					_LCLLCOut:
.9898	60		rts				rts
.9899					LCLUpperCase:
.9899	c9 61		cmp #$61			cmp 	#"a"
.989b	90 06		bcc $98a3			bcc 	_LCLUCOut
.989d	c9 7b		cmp #$7b			cmp 	#"z"+1
.989f	b0 02		bcs $98a3			bcs 	_LCLUCOut
.98a1	e9 1f		sbc #$1f			sbc 	#$1F
.98a3					_LCLUCOut:
.98a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.98a4					ProcedureScan:
.98a4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.98a6	85 30		sta $30				sta 	codePtr
.98a8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.98aa	85 31		sta $31				sta 	codePtr+1
.98ac					_PSLoop:
.98ac	b2 30		lda ($30)			lda 	(codePtr)
.98ae	f0 42		beq $98f2			beq 	_PSExit
.98b0	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.98b2	b1 30		lda ($30),y			lda 	(codePtr),y
.98b4	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.98b6	d0 2d		bne $98e5			bne 	_PSNext
.98b8	c8		iny				iny 								; get the address of the record to zTemp0 and
.98b9	b1 30		lda ($30),y			lda 	(codePtr),y
.98bb	29 c0		and #$c0			and 	#$C0
.98bd	c9 40		cmp #$40			cmp 	#$40
.98bf	d0 32		bne $98f3			bne 	_PSSyntax
.98c1	b1 30		lda ($30),y			lda 	(codePtr),y
.98c3	18		clc				clc
.98c4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98c6	85 37		sta $37				sta 	zTemp0+1
.98c8	c8		iny				iny 								; LSB
.98c9	b1 30		lda ($30),y			lda 	(codePtr),y
.98cb	85 36		sta $36				sta 	zTemp0
.98cd	c8		iny				iny 								; character after variable call.
.98ce	98		tya				tya 								; save Y offset at +7
.98cf	a0 07		ldy #$07			ldy 	#7
.98d1	91 36		sta ($36),y			sta 	(zTemp0),y
.98d3	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.98d5	a0 02		ldy #$02			ldy 	#2
.98d7	91 36		sta ($36),y			sta 	(zTemp0),y
.98d9	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.98db					_PSCopy:
.98db	b5 30		lda $30,x			lda 	safePtr,x
.98dd	c8		iny				iny
.98de	91 36		sta ($36),y			sta 	(zTemp0),y
.98e0	e8		inx				inx
.98e1	e0 04		cpx #$04			cpx 	#4
.98e3	d0 f6		bne $98db			bne 	_PSCopy
.98e5					_PSNext:
.98e5	18		clc				clc
.98e6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98e8	65 30		adc $30				adc 	codePtr
.98ea	85 30		sta $30				sta 	codePtr
.98ec	90 02		bcc $98f0			bcc 	_CREExit
.98ee	e6 31		inc $31				inc 	codePtr+1
.98f0					_CREExit:
.98f0	80 ba		bra $98ac			bra 	_PSLoop
.98f2					_PSExit:
.98f2	60		rts				rts
.98f3					_PSSyntax:
.98f3	4c e9 b3	jmp $b3e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.98f6					ScanForward:
.98f6	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.98f8	86 37		stx $37				stx 	zTemp0+1
.98fa	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.98fc					_ScanLoop:
.98fc	b1 30		lda ($30),y			lda 	(codePtr),y
.98fe	c8		iny				iny
.98ff	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9901	d0 0e		bne $9911			bne 	_ScanGoNext
.9903	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9905	f0 04		beq $990b			beq 	_ScanMatch
.9907	c5 37		cmp $37				cmp 	zTemp0+1
.9909	d0 06		bne $9911			bne 	_ScanGoNext
.990b					_ScanMatch:
.990b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.990d	d0 01		bne $9910			bne 	_ScanNotEndEOL
.990f	88		dey				dey
.9910					_ScanNotEndEOL:
.9910	60		rts				rts
.9911					_ScanGoNext:
.9911	20 16 99	jsr $9916			jsr  	ScanForwardOne
.9914	80 e6		bra $98fc			bra 	_ScanLoop
.9916					ScanForwardOne:
.9916	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9918	90 3e		bcc $9958			bcc 	_SFWExit
.991a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.991c	90 18		bcc $9936			bcc 	_ScanSkipOne
.991e	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9920	b0 2f		bcs $9951			bcs 	_ScanSkipData
.9922	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9924	90 32		bcc $9958			bcc 	_SFWExit 					; if not, ordinary keywords.
.9926	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9928	b0 2e		bcs $9958			bcs 	_SFWExit
.992a	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.992c	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.992e	b0 28		bcs $9958			bcs 	_SFWExit
.9930	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9932	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9934	80 22		bra $9958			bra 	_SFWExit
.9936					_ScanSkipOne:
.9936	c8		iny				iny 								; consume the extra one.
.9937	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9939	d0 1d		bne $9958			bne 	_SFWExit
.993b	18		clc				clc
.993c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.993e	65 30		adc $30				adc 	codePtr
.9940	85 30		sta $30				sta 	codePtr
.9942	90 02		bcc $9946			bcc 	_CREExit
.9944	e6 31		inc $31				inc 	codePtr+1
.9946					_CREExit:
.9946	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9948	b2 30		lda ($30)			lda 	(codePtr)
.994a	d0 0c		bne $9958			bne 	_SFWExit 					; if not zero, more to scan
.994c	a9 13		lda #$13		lda	#19
.994e	4c 9b 99	jmp $999b		jmp	ErrorHandler
.9951					_ScanSkipData:
.9951	88		dey				dey 								; point at data token
.9952	c8		iny				iny
.9953	98		tya				tya
.9954	38		sec				sec
.9955	71 30		adc ($30),y			adc 	(codePtr),y
.9957	a8		tay				tay
.9958					_SFWExit:
.9958	60		rts				rts
.9959					ScanGetCurrentLineStep:
.9959	64 38		stz $38				stz 	zTemp1
.995b	a0 03		ldy #$03			ldy 	#3
.995d					_SGCLSLoop:
.995d	b1 30		lda ($30),y			lda 	(codePtr),y
.995f	c8		iny				iny
.9960	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9962	f0 05		beq $9969			beq 	_SGCLSExit
.9964	20 16 99	jsr $9916			jsr 	ScanForwardOne
.9967	80 f4		bra $995d			bra 	_SGCLSLoop
.9969					_SGCLSExit:
.9969	a5 38		lda $38				lda 	zTemp1
.996b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.996c					Command_WHILE:
.996c	5a		phy				phy 								; save position of the test
.996d	a2 00		ldx #$00			ldx 	#0
.996f	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; work out the number
.9972	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; check if zero
.9975	f0 0e		beq $9985			beq 	_WHExitLoop 				; if so exit the loop
.9977	98		tya				tya 								; position *after* test.
.9978	7a		ply				ply 								; restore position before test, at WHILE
.9979	88		dey				dey
.997a	48		pha				pha 								; push after test on the stack
.997b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.997d	20 82 a6	jsr $a682			jsr 	StackOpen
.9980	20 c6 a6	jsr $a6c6			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9983	7a		ply				ply 								; restore the position *after* the test
.9984	60		rts				rts
.9985					_WHExitLoop:
.9985	68		pla				pla 								; throw post loop position
.9986	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9988	aa		tax				tax
.9989	20 f6 98	jsr $98f6			jsr 	ScanForward
.998c	60		rts				rts
.998d					Command_WEND:
.998d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.998f	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9991	20 ae a6	jsr $a6ae			jsr 	StackCheckFrame
.9994	20 d7 a6	jsr $a6d7			jsr 	STKLoadCodePosition 		; loop back
.9997	20 a0 a6	jsr $a6a0			jsr 	StackClose		 			; erase the frame
.999a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ae03					CheckRightBracket:
.ae03	b1 30		lda ($30),y			lda 	(codePtr),y
.ae05	c8		iny				iny
.ae06	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ae08	d0 0f		bne $ae19			bne 	CNAFail
.ae0a	60		rts				rts
.ae0b					CheckComma:
.ae0b	b1 30		lda ($30),y			lda 	(codePtr),y
.ae0d	c8		iny				iny
.ae0e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ae10	d0 07		bne $ae19			bne 	CNAFail
.ae12	60		rts				rts
.ae13					CheckNextA:
.ae13	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ae15	d0 02		bne $ae19			bne 	CNAFail
.ae17	c8		iny				iny 								; skip character
.ae18	60		rts				rts 								; and exit
.ae19					CNAFail:
.ae19	4c e9 b3	jmp $b3e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.999b					ErrorHandler:
.999b	a8		tay				tay 								; find the error text
.999c	f0 49		beq $99e7			beq 	_EHEnd
.999e	a2 00		ldx #$00			ldx 	#0
.99a0	a9 02		lda #$02			lda 	#((ErrorText) & $FF)
.99a2	85 36		sta $36				sta 	0+zTemp0
.99a4	a9 b4		lda #$b4			lda 	#((ErrorText) >> 8)
.99a6	85 37		sta $37				sta 	1+zTemp0
.99a8					_EHFind:
.99a8	88		dey				dey 								; found the error text ?
.99a9	f0 0e		beq $99b9			beq 	_EHFound
.99ab					_EHFindZero:
.99ab	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.99ad	e6 36		inc $36				inc 	zTemp0
.99af	d0 02		bne $99b3			bne 	_EHFNoCarry
.99b1	e6 37		inc $37				inc 	zTemp0+1
.99b3					_EHFNoCarry:
.99b3	c9 00		cmp #$00			cmp 	#0
.99b5	d0 f4		bne $99ab			bne 	_EHFindZero
.99b7	80 ef		bra $99a8			bra 	_EHFind
.99b9					_EHFound:
.99b9	a5 36		lda $36				lda 	zTemp0 						; print message
.99bb	a6 37		ldx $37				ldx 	zTemp0+1
.99bd	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.99c0	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.99c2	b1 30		lda ($30),y			lda 	(codePtr),y
.99c4	d0 05		bne $99cb			bne 	_EHAtMsg
.99c6	c8		iny				iny
.99c7	b1 30		lda ($30),y			lda 	(codePtr),y
.99c9	f0 17		beq $99e2			beq 	_EHCREnd
.99cb					_EHAtMsg:
.99cb	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.99cd	a9 ea		lda #$ea			lda 	#_AtMsg & $FF
.99cf	20 f4 99	jsr $99f4			jsr 	PrintStringXA
.99d2	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.99d4	b1 30		lda ($30),y			lda 	(codePtr),y
.99d6	48		pha				pha
.99d7	c8		iny				iny
.99d8	b1 30		lda ($30),y			lda 	(codePtr),y
.99da	aa		tax				tax
.99db	68		pla				pla
.99dc	20 5f af	jsr $af5f			jsr 	ConvertInt16 				; convert XA to string
.99df	20 f4 99	jsr $99f4			jsr 	PrintStringXA 				; and print it.
.99e2					_EHCREnd:
.99e2	a9 0d		lda #$0d			lda 	#13 						; new line
.99e4	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.99e7					_EHEnd:
.99e7	4c 63 8b	jmp $8b63			jmp 	WarmStart
>99ea	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>99f2	20 00
.99f4					PrintStringXA:
.99f4	5a		phy				phy
.99f5	86 37		stx $37				stx 	zTemp0+1
.99f7	85 36		sta $36				sta 	zTemp0
.99f9	a0 00		ldy #$00			ldy 	#0
.99fb					_PSXALoop:
.99fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.99fd	f0 06		beq $9a05			beq 	_PSXAExit
.99ff	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.9a02	c8		iny				iny
.9a03	80 f6		bra $99fb			bra 	_PSXALoop
.9a05					_PSXAExit:
.9a05	7a		ply				ply
.9a06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9a07					UnaryTrue:
.9a07	fa		plx				plx
.9a08					ReturnTrue:
.9a08	a9 01		lda #$01			lda 	#1  						; set to 1
.9a0a	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.9a0d	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9a0f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a12	60		rts				rts
.9a13					UnaryFalse:
.9a13	fa		plx				plx
.9a14					ReturnFalse:
.9a14	4c ce a5	jmp $a5ce			jmp 	NSMSetZero 					; set it all to zero
.9a17					BinaryCompareEqual:
.9a17	fa		plx				plx
.9a18	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a1b	c9 00		cmp #$00			cmp 	#0
.9a1d	f0 e9		beq $9a08			beq 	ReturnTrue
.9a1f	80 f3		bra $9a14			bra 	ReturnFalse
.9a21					BinaryCompareLess:
.9a21	fa		plx				plx
.9a22	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a25	c9 ff		cmp #$ff			cmp 	#$FF
.9a27	f0 df		beq $9a08			beq 	ReturnTrue
.9a29	80 e9		bra $9a14			bra 	ReturnFalse
.9a2b					BinaryCompareGreater:
.9a2b	fa		plx				plx
.9a2c	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a2f	c9 01		cmp #$01			cmp 	#1
.9a31	f0 d5		beq $9a08			beq 	ReturnTrue
.9a33	80 df		bra $9a14			bra 	ReturnFalse
.9a35					BinaryCompareNotEqual:
.9a35	fa		plx				plx
.9a36	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a39	c9 00		cmp #$00			cmp 	#0
.9a3b	d0 cb		bne $9a08			bne 	ReturnTrue
.9a3d	80 d5		bra $9a14			bra 	ReturnFalse
.9a3f					BinaryCompareLessEqual:
.9a3f	fa		plx				plx
.9a40	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a43	c9 01		cmp #$01			cmp 	#1
.9a45	d0 c1		bne $9a08			bne 	ReturnTrue
.9a47	80 cb		bra $9a14			bra 	ReturnFalse
.9a49					BinaryCompareGreaterEqual:
.9a49	fa		plx				plx
.9a4a	20 53 9a	jsr $9a53			jsr 	CompareBaseCode
.9a4d	c9 ff		cmp #$ff			cmp 	#$FF
.9a4f	d0 b7		bne $9a08			bne 	ReturnTrue
.9a51	80 c1		bra $9a14			bra 	ReturnFalse
.9a53					CompareBaseCode:
.9a53	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; make both values if references.
.9a56	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9a59	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a5c	29 10		and #$10			and 	#NSTString
.9a5e	d0 40		bne $9aa0			bne 	_CBCString
.9a60	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9a63	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a66	d0 3b		bne $9aa3			bne 	_CBCFloat
.9a68	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a6b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a6e	29 08		and #$08			and 	#NSTFloat
.9a70	d0 31		bne $9aa3			bne 	_CBCFloat
.9a72	20 a6 9a	jsr $9aa6			jsr 	CompareFixMinusZero
.9a75	e8		inx				inx
.9a76	20 a6 9a	jsr $9aa6			jsr 	CompareFixMinusZero
.9a79	ca		dex				dex
.9a7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9a7d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9a80	10 0b		bpl $9a8d			bpl 	_CDCSameSign
.9a82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9a85	30 16		bmi $9a9d			bmi 	_CBCLess 					; return $FF
.9a87					_CBCGreater:
.9a87	a9 01		lda #$01			lda 	#1
.9a89	60		rts				rts
.9a8a					_CBCEqual:
.9a8a	a9 00		lda #$00			lda 	#0
.9a8c	60		rts				rts
.9a8d					_CDCSameSign:
.9a8d	20 b6 9b	jsr $9bb6			jsr 	SubTopTwoStack 				; unsigned subtract
.9a90	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; or the mantissa together
.9a93	f0 f5		beq $9a8a			beq 	_CBCEqual 					; -0 == 0
.9a95	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a98	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a9b	10 ea		bpl $9a87			bpl 	_CBCGreater
.9a9d					_CBCLess:
.9a9d	a9 ff		lda #$ff			lda 	#$FF
.9a9f	60		rts				rts
.9aa0					_CBCString:
.9aa0	4c 0c 9b	jmp $9b0c			jmp 	CompareStrings
.9aa3					_CBCFloat:
.9aa3	4c 5b b0	jmp $b05b			jmp 	CompareFloat
.9aa6					CompareFixMinusZero:
.9aa6	20 fe a5	jsr $a5fe			jsr 	NSMIsZero
.9aa9	d0 03		bne $9aae			bne 	_CFXMZNotZero
.9aab	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9aae					_CFXMZNotZero:
.9aae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9aaf					StringConcat:
.9aaf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9ab2	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9ab5	29 18		and #$18			and 	#NSBTypeMask
.9ab7	c9 10		cmp #$10			cmp 	#NSTString
.9ab9	d0 4e		bne $9b09			bne		_SCType
.9abb	64 38		stz $38				stz 	zTemp1 						; counting total length
.9abd	e8		inx				inx
.9abe	20 dc 9a	jsr $9adc			jsr 	_SCSetupZ0 					; setup for second
.9ac1	20 e7 9a	jsr $9ae7			jsr 	_SCLengthZ0 				; length for second
.9ac4	ca		dex				dex
.9ac5	20 dc 9a	jsr $9adc			jsr 	_SCSetupZ0 					; setup for first
.9ac8	20 e7 9a	jsr $9ae7			jsr 	_SCLengthZ0 				; length for first
.9acb	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9acd	20 6d b7	jsr $b76d			jsr 	StringTempAllocate
.9ad0	20 fa 9a	jsr $9afa			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9ad3	e8		inx				inx
.9ad4	20 dc 9a	jsr $9adc			jsr 	_SCSetupZ0 					; copy second out
.9ad7	20 fa 9a	jsr $9afa			jsr 	_SCCopy
.9ada	ca		dex				dex
.9adb	60		rts				rts
.9adc					_SCSetupZ0:
.9adc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9adf	85 36		sta $36				sta 	zTemp0
.9ae1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ae4	85 37		sta $37				sta 	zTemp0+1
.9ae6	60		rts				rts
.9ae7					_SCLengthZ0:
.9ae7	5a		phy				phy
.9ae8	a0 00		ldy #$00			ldy 	#0
.9aea					_SCLenLoop:
.9aea	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aec	f0 0a		beq $9af8			beq 	_SCLExit
.9aee	c8		iny				iny
.9aef	e6 38		inc $38				inc 	zTemp1
.9af1	10 f7		bpl $9aea			bpl		_SCLenLoop
.9af3	a9 09		lda #$09		lda	#9
.9af5	4c 9b 99	jmp $999b		jmp	ErrorHandler
.9af8					_SCLExit:
.9af8	7a		ply				ply
.9af9	60		rts				rts
.9afa					_SCCopy:
.9afa	5a		phy				phy
.9afb	a0 00		ldy #$00			ldy 	#0
.9afd					_SCCopyLoop:
.9afd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aff	f0 06		beq $9b07			beq 	_SCCExit
.9b01	20 ab b7	jsr $b7ab			jsr 	StringTempWrite
.9b04	c8		iny				iny
.9b05	80 f6		bra $9afd			bra 	_SCCopyLoop
.9b07					_SCCExit:
.9b07	7a		ply				ply
.9b08	60		rts				rts
.9b09					_SCType:
.9b09	4c f3 b3	jmp $b3f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ae1c					IntegerDivide:
.ae1c	fa		plx				plx
.ae1d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae20	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae23	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae24	0a		asl a				asl 	a
.ae25	10 05		bpl $ae2c			bpl 	_NotRef
.ae27	48		pha				pha
.ae28	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae2b	68		pla				pla
.ae2c					_NotRef:
.ae2c	0a		asl a				asl 	a
.ae2d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae2f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae32	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae35	f0 03		beq $ae3a			beq 	_IntegerCode 				; if clear, then we have two integers
.ae37	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.ae3a					_IntegerCode:
.ae3a	20 5c ae	jsr $ae5c			jsr 	CheckDivideZero 			; do div zero check
.ae3d	20 94 ae	jsr $ae94			jsr 	Int32Divide 				; do the division
.ae40	20 51 af	jsr $af51			jsr 	CalculateSign 				; calculate result sign
.ae43					NSMCopyPlusTwoToZero:
.ae43	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ae46	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ae49	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ae4c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae4f	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ae52	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae55	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ae58	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae5b	60		rts				rts
.ae5c					CheckDivideZero:
.ae5c	e8		inx				inx
.ae5d	20 fe a5	jsr $a5fe			jsr 	NSMIsZero
.ae60	f0 02		beq $ae64			beq 	_CDVError
.ae62	ca		dex				dex
.ae63	60		rts				rts
.ae64					_CDVError:
.ae64	a9 03		lda #$03		lda	#3
.ae66	4c 9b 99	jmp $999b		jmp	ErrorHandler
.ae69					IntegerModulus:
.ae69	fa		plx				plx
.ae6a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae6d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae70	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae71	0a		asl a				asl 	a
.ae72	10 05		bpl $ae79			bpl 	_NotRef
.ae74	48		pha				pha
.ae75	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae78	68		pla				pla
.ae79					_NotRef:
.ae79	0a		asl a				asl 	a
.ae7a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae7c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae7f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae82	f0 03		beq $ae87			beq 	_IntegerCode 				; if clear, then we have two integers
.ae84	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.ae87					_IntegerCode:
.ae87					IntegerModulusNoCheck:
.ae87	20 5c ae	jsr $ae5c			jsr 	CheckDivideZero 			; do div zero check
.ae8a	20 94 ae	jsr $ae94			jsr 	Int32Divide 				; do the division
.ae8d	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae90	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae93	60		rts				rts
.ae94					Int32Divide:
.ae94	48		pha				pha 								; save AXY
.ae95	5a		phy				phy
.ae96	20 a5 a5	jsr $a5a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae99	20 ca a5	jsr $a5ca			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ae9c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ae9e					_I32DivideLoop:
.ae9e	e8		inx				inx
.ae9f	e8		inx				inx
.aea0	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aea3	ca		dex				dex
.aea4	ca		dex				dex
.aea5	20 e4 a5	jsr $a5e4			jsr 	NSMRotateLeft
.aea8	20 d4 ae	jsr $aed4			jsr 	DivideCheckSubtract 		; check if subtract possible
.aeab	90 03		bcc $aeb0			bcc 	_I32DivideNoCarryIn
.aead	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aeb0					_I32DivideNoCarryIn:
.aeb0	88		dey				dey 								; loop round till division completed.
.aeb1	d0 eb		bne $ae9e			bne 	_I32DivideLoop
.aeb3	7a		ply				ply 								; restore AXY and exit
.aeb4	68		pla				pla
.aeb5	60		rts				rts
.aeb6					Int32ShiftDivide:
.aeb6	48		pha				pha 								; save AY
.aeb7	5a		phy				phy
.aeb8	e8		inx				inx 								; clear S[X+2]
.aeb9	e8		inx				inx
.aeba	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.aebd	ca		dex				dex
.aebe	ca		dex				dex
.aebf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aec1					_I32SDLoop:
.aec1	20 d4 ae	jsr $aed4			jsr 	DivideCheckSubtract 		; check if subtract possible
.aec4	e8		inx				inx
.aec5	e8		inx				inx
.aec6	20 e4 a5	jsr $a5e4			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aec9	ca		dex				dex
.aeca	ca		dex				dex
.aecb	20 e4 a5	jsr $a5e4			jsr 	NSMRotateLeft
.aece	88		dey				dey 	 							; do 31 times
.aecf	d0 f0		bne $aec1			bne 	_I32SDLoop
.aed1	7a		ply				ply 								; restore AY and exit
.aed2	68		pla				pla
.aed3	60		rts				rts
.aed4					DivideCheckSubtract:
.aed4	20 b6 9b	jsr $9bb6			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.aed7	b0 04		bcs $aedd			bcs 	_DCSExit 					; if carry set, then could do, exit
.aed9	20 90 9b	jsr $9b90			jsr 	AddTopTwoStack 				; add it back in
.aedc	18		clc				clc 								; and return False
.aedd					_DCSExit:
.aedd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aede					MulInteger:
.aede	fa		plx				plx
.aedf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aee2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aee5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aee6	0a		asl a				asl 	a
.aee7	10 05		bpl $aeee			bpl 	_NotRef
.aee9	48		pha				pha
.aeea	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aeed	68		pla				pla
.aeee					_NotRef:
.aeee	0a		asl a				asl 	a 							; put MSB of type into A:7
.aeef	30 0b		bmi $aefc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aef1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aef4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aef7	f0 06		beq $aeff			beq 	_IntegerCode 				; if clear, then we have two integers
.aef9	4c 32 b1	jmp $b132			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.aefc					_StringData:
.aefc	4c fd b3	jmp $b3fd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.aeff					_IntegerCode:
.aeff	20 0c af	jsr $af0c			jsr 	MultiplyShort
.af02	c9 00		cmp #$00			cmp 	#0
.af04	f0 05		beq $af0b			beq 	_MIExit
.af06	a9 04		lda #$04		lda	#4
.af08	4c 9b 99	jmp $999b		jmp	ErrorHandler
.af0b					_MIExit:
.af0b	60		rts				rts
.af0c					MultiplyShort:
.af0c	5a		phy				phy 								; save Y
.af0d	20 a5 a5	jsr $a5a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af10	20 ca a5	jsr $a5ca			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.af13	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.af15					_I32MLoop:
.af15	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.af18	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.af1b	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.af1e	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.af21	f0 28		beq $af4b			beq 	_I32MExit 					; exit if zero
.af23	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.af26	29 01		and #$01			and 	#1
.af28	f0 0e		beq $af38			beq 	_I32MNoAdd
.af2a	20 90 9b	jsr $9b90			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.af2d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.af30	10 06		bpl $af38			bpl 	_I32MNoAdd
.af32					_I32ShiftRight:
.af32	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight 				; shift S[X] right
.af35	c8		iny				iny 								; increment shift count
.af36	80 0a		bra $af42			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.af38					_I32MNoAdd:
.af38	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.af3b	70 f5		bvs $af32			bvs 	_I32ShiftRight 				; instead.
.af3d	e8		inx				inx
.af3e	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.af41	ca		dex				dex
.af42					_I32MShiftUpper:
.af42	e8		inx				inx 								; shift S[X+2] right
.af43	e8		inx				inx
.af44	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight
.af47	ca		dex				dex
.af48	ca		dex				dex
.af49	80 ca		bra $af15			bra 	_I32MLoop 					; try again.
.af4b					_I32MExit:
.af4b	20 51 af	jsr $af51			jsr 	CalculateSign
.af4e	98		tya				tya 								; shift in A
.af4f	7a		ply				ply 								; restore Y and exit
.af50	60		rts				rts
.af51					CalculateSign:
.af51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.af54	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.af57	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af5a	0a		asl a				asl 	a 							; shift bit 7 into carry
.af5b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.af5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b0c					CompareStrings:
.9b0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9b0f	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b12	29 10		and #$10			and 	#NSBIsString
.9b14	f0 2c		beq $9b42			beq 	_CSTypeError
.9b16	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b19	85 36		sta $36				sta 	zTemp0
.9b1b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b1e	85 37		sta $37				sta 	zTemp0+1
.9b20	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b23	85 38		sta $38				sta 	zTemp1
.9b25	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b28	85 39		sta $39				sta 	zTemp1+1
.9b2a	5a		phy				phy 								; save Y so we can access strings
.9b2b	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b2d					_CSLoop:
.9b2d	c8		iny				iny
.9b2e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b30	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b32	d0 06		bne $9b3a			bne 	_CSDifferent
.9b34	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b36	d0 f5		bne $9b2d			bne 	_CSLoop 					; still comparing
.9b38					_CSExit:
.9b38	7a		ply				ply 								; reached end, return zero in A from EOS
.9b39	60		rts				rts
.9b3a					_CSDifferent:
.9b3a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b3c	90 fa		bcc $9b38			bcc		_CSExit
.9b3e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b40	80 f6		bra $9b38			bra 	_CSExit
.9b42					_CSTypeError:
.9b42	4c f3 b3	jmp $b3f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b45					ShiftLeft:
.9b45	38		sec				sec
.9b46	80 01		bra $9b49			bra 	ShiftMain
.9b48					ShiftRight:
.9b48	18		clc				clc
.9b49					ShiftMain:
.9b49	fa		plx				plx 								; restore X
.9b4a	08		php				php 								; save direction
.9b4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b4e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b51	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b52	0a		asl a				asl 	a
.9b53	10 05		bpl $9b5a			bpl 	_NotRef
.9b55	48		pha				pha
.9b56	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b59	68		pla				pla
.9b5a					_NotRef:
.9b5a	0a		asl a				asl 	a
.9b5b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b5d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b60	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b63	f0 03		beq $9b68			beq 	_IntegerCode 				; if clear, then we have two integers
.9b65	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9b68					_IntegerCode:
.9b68	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9b6b	29 e0		and #$e0			and 	#$E0
.9b6d	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9b70	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9b73	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b76	d0 13		bne $9b8b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9b78					_SMLoop:
.9b78	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9b7b	30 11		bmi $9b8e			bmi 	_SMExit 					; exit if done.
.9b7d	28		plp				plp 								; restore direcition setting
.9b7e	08		php				php
.9b7f	90 05		bcc $9b86			bcc 	_SMRight
.9b81	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; shift left if CS
.9b84	80 f2		bra $9b78			bra 	_SMLoop
.9b86					_SMRight:
.9b86	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight 				; shift right if CC
.9b89	80 ed		bra $9b78			bra 	_SMLoop
.9b8b					_SMExit0:
.9b8b	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; return zero.
.9b8e					_SMExit:
.9b8e	28		plp				plp 								; throw direction
.9b8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b90					AddTopTwoStack:
.9b90	18		clc				clc
.9b91	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b94	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b97	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b9a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b9d	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9ba0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ba3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ba6	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9ba9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bac	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9baf	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9bb2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bb5	60		rts				rts
.9bb6					SubTopTwoStack:
.9bb6	38		sec				sec
.9bb7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bba	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9bbd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bc0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bc3	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9bc6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bc9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bcc	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9bcf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bd2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bd5	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9bd8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bdb	60		rts				rts
.9bdc					AddInteger:
.9bdc	fa		plx				plx
.9bdd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9be0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9be3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be4	0a		asl a				asl 	a
.9be5	10 05		bpl $9bec			bpl 	_NotRef
.9be7	48		pha				pha
.9be8	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9beb	68		pla				pla
.9bec					_NotRef:
.9bec	0a		asl a				asl 	a 							; put MSB of type into A:7
.9bed	30 0b		bmi $9bfa			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9bef	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bf5	f0 06		beq $9bfd			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf7	4c ba af	jmp $afba			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9bfa					_StringData:
.9bfa	4c af 9a	jmp $9aaf			jmp 	StringConcat							; at least one string - don't know both are strings.
.9bfd					_IntegerCode:
.9bfd					AddCode:
.9bfd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9c00	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9c03	10 8b		bpl $9b90			bpl 	AddTopTwoStack
.9c05	20 b6 9b	jsr $9bb6			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c08	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c0b	10 09		bpl $9c16			bpl 	_AddExit
.9c0d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c10	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c13	20 83 a5	jsr $a583			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c16					_AddExit:
.9c16	60		rts				rts
.9c17					SubInteger:
.9c17	fa		plx				plx
.9c18	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c1b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c1e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c1f	0a		asl a				asl 	a
.9c20	10 05		bpl $9c27			bpl 	_NotRef
.9c22	48		pha				pha
.9c23	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c26	68		pla				pla
.9c27					_NotRef:
.9c27	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c28	30 0b		bmi $9c35			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c2a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c2d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c30	f0 06		beq $9c38			beq 	_IntegerCode 				; if clear, then we have two integers
.9c32	4c bf af	jmp $afbf			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c35					_StringData:
.9c35	4c fd b3	jmp $b3fd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c38					_IntegerCode:
.9c38	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c3b	49 80		eor #$80			eor 	#$80
.9c3d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c40	80 bb		bra $9bfd			bra 	AddCode 					; and do the same code as add.
.9c42					AndInteger:
.9c42	fa		plx				plx
.9c43	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c46	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c49	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4a	0a		asl a				asl 	a
.9c4b	10 05		bpl $9c52			bpl 	_NotRef
.9c4d	48		pha				pha
.9c4e	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c51	68		pla				pla
.9c52					_NotRef:
.9c52	0a		asl a				asl 	a
.9c53	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c55	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c58	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c5b	f0 03		beq $9c60			beq 	_IntegerCode 				; if clear, then we have two integers
.9c5d	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9c60					_IntegerCode:
.9c60	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c63	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9c66	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c69	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c6c	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9c6f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c72	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c75	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9c78	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c7b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c7e	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9c81	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c84	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c87	60		rts				rts
.9c88					OraInteger:
.9c88	fa		plx				plx
.9c89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c90	0a		asl a				asl 	a
.9c91	10 05		bpl $9c98			bpl 	_NotRef
.9c93	48		pha				pha
.9c94	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c97	68		pla				pla
.9c98					_NotRef:
.9c98	0a		asl a				asl 	a
.9c99	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c9e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca1	f0 03		beq $9ca6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca3	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9ca6					_IntegerCode:
.9ca6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ca9	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9cac	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9caf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cb2	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9cb5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cb8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cbb	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9cbe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cc1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cc4	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9cc7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cca	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9ccd	60		rts				rts
.9cce					EorInteger:
.9cce	fa		plx				plx
.9ccf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cd2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cd5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cd6	0a		asl a				asl 	a
.9cd7	10 05		bpl $9cde			bpl 	_NotRef
.9cd9	48		pha				pha
.9cda	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cdd	68		pla				pla
.9cde					_NotRef:
.9cde	0a		asl a				asl 	a
.9cdf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ce1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ce4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ce7	f0 03		beq $9cec			beq 	_IntegerCode 				; if clear, then we have two integers
.9ce9	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9cec					_IntegerCode:
.9cec	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cef	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9cf2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cf5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cf8	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9cfb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cfe	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d01	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9d04	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d07	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d0a	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9d0d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d10	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d13	60		rts				rts
.9d14					WordIndirect:
.9d14	fa		plx				plx
.9d15	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d18	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d1b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d1c	0a		asl a				asl 	a
.9d1d	10 05		bpl $9d24			bpl 	_NotRef
.9d1f	48		pha				pha
.9d20	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d23	68		pla				pla
.9d24					_NotRef:
.9d24	0a		asl a				asl 	a
.9d25	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d27	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d2a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d2d	f0 03		beq $9d32			beq 	_IntegerCode 				; if clear, then we have two integers
.9d2f	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9d32					_IntegerCode:
.9d32	20 fd 9b	jsr $9bfd			jsr 	AddCode 					; add the two values
.9d35	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d37	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d3a	60		rts				rts
.9d3b					ByteIndirect:
.9d3b	fa		plx				plx
.9d3c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d3f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d42	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d43	0a		asl a				asl 	a
.9d44	10 05		bpl $9d4b			bpl 	_NotRef
.9d46	48		pha				pha
.9d47	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d4a	68		pla				pla
.9d4b					_NotRef:
.9d4b	0a		asl a				asl 	a
.9d4c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d4e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d51	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d54	f0 03		beq $9d59			beq 	_IntegerCode 				; if clear, then we have two integers
.9d56	4c f3 b3	jmp $b3f3			jmp 	TypeError 					; anything else, type mismatch.
.9d59					_IntegerCode:
.9d59	20 fd 9b	jsr $9bfd			jsr 	AddCode 					; add the two values
.9d5c	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d5e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.af5f					ConvertInt16:
.af5f	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.af62	8e 10 04	stx $0410			stx 	NSMantissa1
.af65	9c 18 04	stz $0418			stz 	NSMantissa2
.af68	9c 20 04	stz $0420			stz 	NSMantissa3
.af6b	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.af6e	a2 00		ldx #$00			ldx 	#0 							; stack level
.af70	a9 0a		lda #$0a			lda 	#10 						; base
.af72	80 00		bra $af74			bra 	ConvertInt32
.af74					ConvertInt32:
.af74	5a		phy				phy
.af75	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.af77	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.af7a	10 08		bpl $af84			bpl 	_CI32NotNeg
.af7c	48		pha				pha
.af7d	a9 2d		lda #$2d			lda 	#'-'
.af7f	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af82	c8		iny				iny
.af83	68		pla				pla
.af84					_CI32NotNeg:
.af84	20 92 af	jsr $af92			jsr 	_CI32DivideConvert 			; recursive conversion
.af87	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af89	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af8c	7a		ply				ply
.af8d	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af8f	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.af91	60		rts				rts
.af92					_CI32DivideConvert:
.af92	e8		inx				inx 								; write to next slot up
.af93	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.af96	ca		dex				dex
.af97	20 94 ae	jsr $ae94			jsr 	Int32Divide 				; divide
.af9a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.af9d	48		pha				pha
.af9e	20 43 ae	jsr $ae43			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.afa1	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; is it zero ?
.afa4	f0 06		beq $afac			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.afa6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.afa9	20 92 af	jsr $af92			jsr 	_CI32DivideConvert 			; and recusrively call.
.afac					_CI32NoRecurse:
.afac	68		pla				pla 								; remainder
.afad	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.afaf	90 02		bcc $afb3			bcc 	_CI32NotHex
.afb1	69 26		adc #$26			adc 	#6+32
.afb3					_CI32NotHex:
.afb3	69 30		adc #$30			adc 	#48
.afb5	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.afb8	c8		iny				iny
.afb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9d62					PrecedenceLevel:
>9d62	04					.byte	 4	; $00 <<
>9d63	02					.byte	 2	; $01 <=
>9d64	02					.byte	 2	; $02 <>
>9d65	00					.byte	 0	; $03 !!3
>9d66	00					.byte	 0	; $04 ><
>9d67	02					.byte	 2	; $05 >=
>9d68	04					.byte	 4	; $06 >>
>9d69	00					.byte	 0	; $07 !!7
>9d6a	00					.byte	 0	; $08 !!8
>9d6b	00					.byte	 0	; $09 !!9
>9d6c	00					.byte	 0	; $0a !!10
>9d6d	00					.byte	 0	; $0b !!11
>9d6e	00					.byte	 0	; $0c !!12
>9d6f	00					.byte	 0	; $0d !!13
>9d70	00					.byte	 0	; $0e !!14
>9d71	00					.byte	 0	; $0f !!15
>9d72	00					.byte	 0	; $10 @
>9d73	00					.byte	 0	; $11 !!17
>9d74	00					.byte	 0	; $12 !!18
>9d75	00					.byte	 0	; $13 [
>9d76	04					.byte	 4	; $14 \
>9d77	00					.byte	 0	; $15 ]
>9d78	01					.byte	 1	; $16 ^
>9d79	00					.byte	 0	; $17 _
>9d7a	00					.byte	 0	; $18 `
>9d7b	00					.byte	 0	; $19 !!25
>9d7c	00					.byte	 0	; $1a !!26
>9d7d	00					.byte	 0	; $1b {
>9d7e	01					.byte	 1	; $1c |
>9d7f	00					.byte	 0	; $1d }
>9d80	00					.byte	 0	; $1e ~
>9d81	00					.byte	 0	; $1f [7m<7F>[m
>9d82	00					.byte	 0	; $20
>9d83	05					.byte	 5	; $21 !
>9d84	00					.byte	 0	; $22 "
>9d85	00					.byte	 0	; $23 #
>9d86	05					.byte	 5	; $24 $
>9d87	04					.byte	 4	; $25 %
>9d88	01					.byte	 1	; $26 &
>9d89	00					.byte	 0	; $27 '
>9d8a	00					.byte	 0	; $28 (
>9d8b	00					.byte	 0	; $29 )
>9d8c	04					.byte	 4	; $2a *
>9d8d	03					.byte	 3	; $2b +
>9d8e	00					.byte	 0	; $2c ,
>9d8f	03					.byte	 3	; $2d -
>9d90	00					.byte	 0	; $2e .
>9d91	04					.byte	 4	; $2f /
>9d92	00					.byte	 0	; $30 0
>9d93	00					.byte	 0	; $31 1
>9d94	00					.byte	 0	; $32 2
>9d95	00					.byte	 0	; $33 3
>9d96	00					.byte	 0	; $34 4
>9d97	00					.byte	 0	; $35 5
>9d98	00					.byte	 0	; $36 6
>9d99	00					.byte	 0	; $37 7
>9d9a	00					.byte	 0	; $38 8
>9d9b	00					.byte	 0	; $39 9
>9d9c	00					.byte	 0	; $3a :
>9d9d	00					.byte	 0	; $3b ;
>9d9e	02					.byte	 2	; $3c <
>9d9f	02					.byte	 2	; $3d =
>9da0	02					.byte	 2	; $3e >
>9da1	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9da2					EvaluateExpressionAt0:
.9da2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9da4					EvaluateExpression:
.9da4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9da6					EvaluateExpressionAtPrecedence:
.9da6	48		pha				pha 								; save precedence level
.9da7	20 75 a0	jsr $a075			jsr 	EvaluateTerm 				; evaluate term into level X.
.9daa	68		pla				pla 								; restore precedence level.
.9dab					_EXPRLoop:
.9dab	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9dad	b1 30		lda ($30),y			lda 	(codePtr),y
.9daf	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9db1	b0 25		bcs $9dd8			bcs 	_EXPRExit
.9db3	da		phx				phx 								; read the operator precedence
.9db4	aa		tax				tax
.9db5	bd 62 9d	lda $9d62,x			lda 	PrecedenceLevel,x
.9db8	fa		plx				plx
.9db9	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9dbb	f0 1b		beq $9dd8			beq 	_EXPRExit
.9dbd	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9dbf	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dc1	c5 37		cmp $37				cmp 	zTemp0+1
.9dc3	b0 13		bcs $9dd8			bcs		_EXPRExit 					; if current >= operator exit
.9dc5	48		pha				pha 								; save current precedence.
.9dc6	b1 30		lda ($30),y			lda 	(codePtr),y
.9dc8	c8		iny				iny
.9dc9	48		pha				pha
.9dca	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9dcc	e8		inx				inx 								; work out the right hand side.
.9dcd	20 a6 9d	jsr $9da6			jsr 	EvaluateExpressionAtPrecedence
.9dd0	ca		dex				dex
.9dd1	68		pla				pla 								; get operator, call the code.
.9dd2	20 db 9d	jsr $9ddb			jsr 	_EXPRCaller
.9dd5	68		pla				pla 								; restore precedence level
.9dd6	80 d3		bra $9dab			bra 	_EXPRLoop 					; and go round.
.9dd8					_EXPRExit:
.9dd8	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9dda	60		rts				rts
.9ddb					_EXPRCaller:
.9ddb	da		phx				phx 								; save on stack, first thing is to restore it
.9ddc	0a		asl a				asl 	a 							; double so can use vectors into X
.9ddd	aa		tax				tax
.9dde	7c 22 95	jmp ($9522,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.afba					FloatingPointAdd:
.afba	20 5b b1	jsr $b15b			jsr 	FloatPrepare 				; prepare for floats
.afbd	80 0b		bra $afca			bra 	FloatAdd
.afbf					FloatingPointSub:
.afbf	20 5b b1	jsr $b15b			jsr 	FloatPrepare 				; prepare for floats
.afc2					FloatSubtract:
.afc2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.afc5	49 80		eor #$80			eor 	#$80
.afc7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.afca					FloatAdd:
.afca	48		pha				pha
.afcb	5a		phy				phy
.afcc	20 6c b1	jsr $b16c			jsr 	NSNormalise 				; normalise S[X]
.afcf	f0 54		beq $b025			beq 	_FAReturn1
.afd1	e8		inx				inx 								; normalise S[X+1]
.afd2	20 6c b1	jsr $b16c			jsr 	NSNormalise
.afd5	ca		dex				dex
.afd6	c9 00		cmp #$00			cmp 	#0
.afd8	f0 6f		beq $b049			beq 	_FAExit 					; if so, just return A
.afda	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.afdd	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.afe0	f0 1b		beq $affd			beq 	_FAExponentsEqual
.afe2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.afe5	a8		tay				tay
.afe6	38		sec				sec 								; do a signed comparison of the exponents.
.afe7	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.afea	50 02		bvc $afee			bvc 	_FANoSignedChange
.afec	49 80		eor #$80			eor 	#$80
.afee					_FANoSignedChange:
.afee	29 80		and #$80			and 	#$80
.aff0	10 03		bpl $aff5			bpl 	_FAHaveMax
.aff2	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aff5					_FAHaveMax:
.aff5	20 4c b0	jsr $b04c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aff8	e8		inx				inx
.aff9	20 4c b0	jsr $b04c			jsr 	_FAShiftToExponent
.affc	ca		dex				dex
.affd					_FAExponentsEqual:
.affd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b000	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b003	30 10		bmi $b015			bmi 	_FADifferentSigns
.b005	20 90 9b	jsr $9b90			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b008	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b00b	10 3c		bpl $b049			bpl 	_FAExit 					; if no, we are done.
.b00d	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b010	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b013	80 34		bra $b049			bra 	_FAExit
.b015					_FADifferentSigns:
.b015	20 b6 9b	jsr $9bb6			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b018	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b01b	10 2c		bpl $b049			bpl 	_FAExit 					; if no, we are done.
.b01d	20 7a a5	jsr $a57a			jsr 	NSMNegate 					; netate result
.b020	20 83 a5	jsr $a583			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b023	80 24		bra $b049			bra 	_FAExit
.b025					_FAReturn1:
.b025	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b028	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b02b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b02e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b031	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b034	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b037	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b03a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b03d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b040	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b043	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b046	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b049					_FAExit:
.b049	7a		ply				ply
.b04a	68		pla				pla
.b04b	60		rts				rts
.b04c					_FAShiftToExponent:
.b04c					_FAShiftToExponent2:
.b04c	98		tya				tya 								; compare Y to exponent
.b04d	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b050	f0 08		beq $b05a			beq 	_FASEExit 					; exit if so.
.b052	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight	 			; shift the mantissa right
.b055	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b058	80 f2		bra $b04c			bra 	_FAShiftToExponent2
.b05a					_FASEExit:
.b05a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b05b					CompareFloat:
.b05b	20 c2 af	jsr $afc2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b05e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b061	29 f8		and #$f8			and 	#$F8
.b063	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b066	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b069	f0 09		beq $b074			beq 	_FCExit 					; zero, so approximately identical
.b06b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b06d	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b070	10 02		bpl $b074			bpl 	_FCExit
.b072					_FCNegative:
.b072	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b074					_FCExit:
.b074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b075					FDivideCommand:
.b075	fa		plx				plx	 								; restore stack position
.b076	20 5b b1	jsr $b15b			jsr 	FloatPrepare 				; prepare for floats
.b079					FloatDivide:
.b079	48		pha				pha
.b07a	e8		inx				inx
.b07b	20 6c b1	jsr $b16c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b07e	ca		dex				dex
.b07f	c9 00		cmp #$00			cmp 	#0
.b081	f0 20		beq $b0a3			beq 	_FDZero
.b083	20 6c b1	jsr $b16c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b086	f0 19		beq $b0a1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b088	20 b6 ae	jsr $aeb6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b08b	20 43 ae	jsr $ae43			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b08e	20 6c b1	jsr $b16c			jsr		NSNormalise 				; renormalise
.b091	20 51 af	jsr $af51			jsr 	CalculateSign 				; calculate result sign
.b094	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b097	38		sec				sec
.b098	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b09b	38		sec				sec
.b09c	e9 1e		sbc #$1e			sbc 	#30
.b09e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0a1					_FDExit:
.b0a1	68		pla				pla
.b0a2	60		rts				rts
.b0a3					_FDZero:
.b0a3	a9 03		lda #$03		lda	#3
.b0a5	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b0a8					FloatFractionalPart:
.b0a8	5a		phy				phy
.b0a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b0ac	29 7f		and #$7f			and 	#$7F
.b0ae	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0b1	20 6c b1	jsr $b16c			jsr 	NSNormalise
.b0b4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b0b7	38		sec				sec
.b0b8	e9 e0		sbc #$e0			sbc 	#$E0
.b0ba	90 31		bcc $b0ed			bcc 	_FFPExit 					; already fractional
.b0bc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b0be	b0 2a		bcs $b0ea			bcs 	_FFPZero
.b0c0	a8		tay				tay 								; put count to do in Y
.b0c1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b0c4	20 ef b0	jsr $b0ef			jsr 	_FFPPartial
.b0c7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b0ca	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b0cd	20 ef b0	jsr $b0ef			jsr 	_FFPPartial
.b0d0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b0d3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b0d6	20 ef b0	jsr $b0ef			jsr 	_FFPPartial
.b0d9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0dc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b0df	20 ef b0	jsr $b0ef			jsr 	_FFPPartial
.b0e2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b0e5	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; zeroed check.
.b0e8	d0 03		bne $b0ed			bne 	_FFPExit
.b0ea					_FFPZero:
.b0ea	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.b0ed					_FFPExit:
.b0ed	7a		ply				ply
.b0ee	60		rts				rts
.b0ef					_FFPPartial:
.b0ef	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b0f1	f0 17		beq $b10a			beq 	_FFFPPExit
.b0f3	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b0f5	b0 0c		bcs $b103			bcs 	_FFFPPWholeByte
.b0f7	5a		phy				phy
.b0f8					_FFFPPLeft:
.b0f8	0a		asl a				asl 	a
.b0f9	88		dey				dey
.b0fa	d0 fc		bne $b0f8			bne 	_FFFPPLeft
.b0fc	7a		ply				ply
.b0fd					_FFFPPRight:
.b0fd	4a		lsr a				lsr 	a
.b0fe	88		dey				dey
.b0ff	d0 fc		bne $b0fd			bne 	_FFFPPRight
.b101	80 07		bra $b10a			bra 	_FFFPPExit
.b103					_FFFPPWholeByte:
.b103	98		tya				tya 								; subtract 8 from count
.b104	38		sec				sec
.b105	e9 08		sbc #$08			sbc 	#8
.b107	a8		tay				tay
.b108	a9 00		lda #$00			lda 	#0 							; and clear all
.b10a					_FFFPPExit:
.b10a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b10b					FloatIntegerPart:
.b10b	48		pha				pha
.b10c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b10f	f0 1f		beq $b130			beq 	_FIPExit 					; if so do nothing
.b111	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; is it zero ?
.b114	f0 17		beq $b12d			beq 	_FIPZero 					; if so return zero.
.b116	20 6c b1	jsr $b16c			jsr 	NSNormalise 				; normalise
.b119	f0 12		beq $b12d			beq 	_FIPZero 					; normalised to zero, exit zero
.b11b					_FIPShift:
.b11b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b11e	10 08		bpl $b128			bpl 	_FIPCheckZero
.b120	20 f1 a5	jsr $a5f1			jsr 	NSMShiftRight 				; shift mantissa right
.b123	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b126	80 f3		bra $b11b			bra 	_FIPShift
.b128					_FIPCheckZero:
.b128	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; avoid -0 problem
.b12b	d0 03		bne $b130			bne 	_FIPExit 					; set to zero if mantissa zero.
.b12d					_FIPZero:
.b12d	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.b130					_FIPExit:
.b130	68		pla				pla
.b131	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b132					FloatingPointMultiply:
.b132	20 5b b1	jsr $b15b			jsr 	FloatPrepare 				; prepare for floats
.b135					FloatMultiply:
.b135	48		pha				pha
.b136	20 6c b1	jsr $b16c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b139	f0 1b		beq $b156			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b13b	e8		inx				inx
.b13c	20 6c b1	jsr $b16c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b13f	ca		dex				dex
.b140	c9 00		cmp #$00			cmp 	#0
.b142	f0 0f		beq $b153			beq 	_FDSetZero
.b144	20 0c af	jsr $af0c			jsr 	MultiplyShort 				; calculate the result.
.b147	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b14a	18		clc				clc
.b14b	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b14e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b151	80 03		bra $b156			bra 	_FDExit
.b153					_FDSetZero:
.b153	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; return 0
.b156					_FDExit:
.b156	20 6c b1	jsr $b16c			jsr 	NSNormalise 				; normalise the result
.b159	68		pla				pla
.b15a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b15b					FloatPrepare:
.b15b	20 b4 9e	jsr $9eb4			jsr 	DereferenceTopTwo 			; dereference the top two values
.b15e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b161	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b164	29 10		and #$10			and 	#NSBIsString
.b166	d0 01		bne $b169			bne 	_FDType
.b168	60		rts				rts
.b169					_FDType:
.b169	4c f3 b3	jmp $b3f3			jmp 	TypeError
.b16c					NSNormalise:
.b16c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b16f	29 80		and #$80			and 	#$80
.b171	09 08		ora #$08			ora 	#NSTFloat
.b173	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b176	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; if zero exit
.b179	d0 09		bne $b184			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b17b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b17e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b181	a9 00		lda #$00			lda 	#0 							; set Z flag
.b183	60		rts				rts
.b184					_NSNormaliseOptimise:
.b184	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b187	d0 22		bne $b1ab			bne 	_NSNormaliseLoop
.b189	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b18c	30 1d		bmi $b1ab			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b18e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b191	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b194	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b197	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b19a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b19d	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b1a0	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b1a3	38		sec				sec
.b1a4	e9 08		sbc #$08			sbc 	#8
.b1a6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1a9	80 d9		bra $b184			bra 	_NSNormaliseOptimise
.b1ab					_NSNormaliseLoop:
.b1ab	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b1ae	70 08		bvs $b1b8			bvs 	_NSNExit 					; exit if so with Z flag clear
.b1b0	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; shift mantissa left
.b1b3	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b1b6	80 f3		bra $b1ab			bra 	_NSNormaliseLoop
.b1b8					_NSNExit:
.b1b8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b1ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9de1					AssignNumber:
.9de1	5a		phy				phy
.9de2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9de5	85 36		sta $36				sta 	zTemp0
.9de7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dea	85 37		sta $37				sta 	zTemp0+1
.9dec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9def	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9df1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9df4	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9df6	c9 08		cmp #$08			cmp 	#NSTFloat
.9df8	f0 2a		beq $9e24			beq 	_ANFloat
.9dfa	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9dfd	f0 05		beq $9e04			beq		_ANNotFloat
.9dff	e8		inx				inx
.9e00	20 0b b1	jsr $b10b			jsr 	FloatIntegerPart 			; make it an integer
.9e03	ca		dex				dex
.9e04					_ANNotFloat:
.9e04	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e07	29 03		and #$03			and 	#3
.9e09	d0 05		bne $9e10			bne 	_ANByteWord
.9e0b	20 30 9e	jsr $9e30			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e0e	80 1e		bra $9e2e			bra 	_ANExit
.9e10					_ANByteWord:
.9e10	48		pha				pha 								; save count
.9e11	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9e14	92 36		sta ($36)			sta 	(zTemp0)
.9e16	68		pla				pla
.9e17	c9 01		cmp #$01			cmp	 	#1
.9e19	f0 13		beq $9e2e			beq 	_ANExit
.9e1b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e1e	a0 01		ldy #$01			ldy 	#1
.9e20	91 36		sta ($36),y			sta 	(zTemp0),y
.9e22	80 0a		bra $9e2e			bra 	_ANExit
.9e24					_ANFloat:
.9e24	20 30 9e	jsr $9e30			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e27	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e2a	a0 04		ldy #$04			ldy 	#4
.9e2c	91 36		sta ($36),y			sta 	(zTemp0),y
.9e2e					_ANExit:
.9e2e	7a		ply				ply
.9e2f	60		rts				rts
.9e30					_ANCopy4PackSign:
.9e30	a0 03		ldy #$03			ldy 	#3
.9e32	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e35	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e37	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e3a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e3c	88		dey				dey
.9e3d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e40	91 36		sta ($36),y			sta 	(zTemp0),y
.9e42	88		dey				dey
.9e43	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e46	91 36		sta ($36),y			sta 	(zTemp0),y
.9e48	88		dey				dey
.9e49	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e4c	91 36		sta ($36),y			sta 	(zTemp0),y
.9e4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e4f					AssignString:
.9e4f	5a		phy				phy
.9e50	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e53	85 38		sta $38				sta 	zTemp1
.9e55	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e58	85 39		sta $39				sta 	zTemp1+1
.9e5a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e5d	85 36		sta $36				sta 	zTemp0
.9e5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e62	85 37		sta $37				sta 	zTemp0+1
.9e64	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9e66	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e68	f0 23		beq $9e8d			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9e6a	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9e6b	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9e6d	e9 02		sbc #$02			sbc 	#2
.9e6f	85 3c		sta $3c				sta 	zsTemp
.9e71	a0 01		ldy #$01			ldy 	#1
.9e73	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e75	e9 00		sbc #$00			sbc 	#0
.9e77	85 3d		sta $3d				sta 	zsTemp+1
.9e79	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9e7b					_ASGetLength:
.9e7b	c8		iny				iny
.9e7c	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e7e	d0 fb		bne $9e7b			bne 	_ASGetLength
.9e80	98		tya				tya 								; is this length <= current length
.9e81	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e83	90 20		bcc $9ea5			bcc 	_ASCopyString
.9e85	f0 1e		beq $9ea5			beq 	_ASCopyString
.9e87	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e89	a0 01		ldy #$01			ldy 	#1
.9e8b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e8d					_ASNewStringRequired:
.9e8d	e8		inx				inx 								; concrete the new string.
.9e8e	20 ec b6	jsr $b6ec			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e91	ca		dex				dex
.9e92	18		clc				clc
.9e93	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e96	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e98	92 36		sta ($36)			sta 	(zTemp0)
.9e9a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e9d	69 00		adc #$00			adc 	#0
.9e9f	a0 01		ldy #$01			ldy 	#1
.9ea1	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea3	80 0d		bra $9eb2			bra 	_ASExit
.9ea5					_ASCopyString:
.9ea5	a0 00		ldy #$00			ldy 	#0
.9ea7					_ASCopyLoop:
.9ea7	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ea9	c8		iny				iny
.9eaa	c8		iny				iny
.9eab	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ead	88		dey				dey
.9eae	c9 00		cmp #$00			cmp 	#0
.9eb0	d0 f5		bne $9ea7			bne 	_ASCopyLoop
.9eb2					_ASExit:
.9eb2	7a		ply				ply
.9eb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9eb4					DereferenceTopTwo:
.9eb4	e8		inx				inx
.9eb5	20 b9 9e	jsr $9eb9			jsr 	Dereference 				; deref x+1
.9eb8	ca		dex				dex  								; falls through to deref x
.9eb9					Dereference:
.9eb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ebc	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ebe	f0 57		beq $9f17			beq 	_DRFExit 					; not a reference
.9ec0	5a		phy				phy
.9ec1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ec4	85 36		sta $36				sta 	zTemp0
.9ec6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ec9	85 37		sta $37				sta 	zTemp0+1
.9ecb	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9ece	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9ed0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ed3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9ed6	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ed8	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9eda	f0 0f		beq $9eeb			beq 	_DRFDereferenceTwo
.9edc	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ede	f0 39		beq $9f19			beq 	_DRFFull
.9ee0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ee3	29 03		and #$03			and 	#3
.9ee5	f0 32		beq $9f19			beq 	_DRFFull 					; the whole word
.9ee7	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9ee9	f0 07		beq $9ef2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9eeb					_DRFDereferenceTwo:
.9eeb	a0 01		ldy #$01			ldy 	#1
.9eed	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eef	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ef2					_DRFClear23:
.9ef2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ef5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ef8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9efb	29 18		and #$18			and 	#NSBTypeMask
.9efd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f00	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f02	d0 12		bne $9f16			bne 	_DRFNotString
.9f04	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9f07	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f0a	d0 0a		bne $9f16			bne 	_DRFNotString
.9f0c	a9 18		lda #$18			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9f11	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f13	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f16					_DRFNotString
.9f16	7a		ply				ply 								; restore Y and exit
.9f17					_DRFExit:
.9f17	60		rts				rts
.9f18					_DRFNullString:
>9f18	00						.byte 	0
.9f19					_DRFFull:
.9f19	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f1d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f20	c8		iny				iny
.9f21	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f23	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f26	c8		iny				iny
.9f27	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f29	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f2c	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f2f	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f32	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f34	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f37	f0 06		beq $9f3f			beq 	_DRFNoExponent
.9f39	c8		iny				iny 								; if not, read the exponent as well.
.9f3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f3c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f3f					_DRFNoExponent:
.9f3f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f42	10 0d		bpl $9f51			bpl 	_DRFExit2 					; if not, then exit.
.9f44	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f46	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f49	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9f4c	09 80		ora #$80			ora 	#NSBIsNegative
.9f4e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f51					_DRFExit2:
.9f51	7a		ply				ply
.9f52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9f53					EncodeNumberStart:
.9f53	38		sec				sec
.9f54	80 01		bra $9f57			bra 	EncodeNumberContinue+1
.9f56					EncodeNumberContinue:
.9f56	18		clc				clc
.9f57					EncodeNumber:
.9f57	08		php				php 								; save reset.
.9f58	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f5a	f0 12		beq $9f6e			beq 	_ENIsOkay
.9f5c	c9 30		cmp #$30			cmp 	#"0"
.9f5e	90 04		bcc $9f64			bcc 	_ENBadNumber
.9f60	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f62	90 0a		bcc $9f6e			bcc 	_ENIsOkay
.9f64					_ENBadNumber:
.9f64	28		plp				plp 								; throw saved reset
.9f65	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9f68	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f6a	f0 7e		beq $9fea			beq 	_ENConstructFinal
.9f6c					_ENFail:
.9f6c	18		clc				clc 								; not allowed
.9f6d	60		rts				rts
.9f6e					_ENIsOkay:
.9f6e	28		plp				plp 								; are we restarting
.9f6f	90 15		bcc $9f86			bcc 	_ENNoRestart
.9f71					_ENStartEncode:
.9f71	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9f73	f0 0c		beq $9f81			beq 	_ENFirstDP
.9f75	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9f77	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.9f7a	a9 01		lda #$01			lda 	#ESTA_Low
.9f7c					_ENExitChange:
.9f7c	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9f7f	38		sec				sec
.9f80	60		rts				rts
.9f81					_ENFirstDP:
.9f81	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; clear integer part
.9f84	80 3f		bra $9fc5			bra 	_ESTASwitchFloat			; go straight to float and exi
.9f86					_ENNoRestart:
.9f86	48		pha				pha 								; save on stack.
.9f87	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f8a	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f8c	f0 09		beq $9f97			beq  	_ESTALowState
.9f8e	c9 02		cmp #$02			cmp 	#ESTA_High
.9f90	f0 29		beq $9fbb			beq 	_ESTAHighState
.9f92	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f94	f0 3b		beq $9fd1			beq 	_ESTADecimalState
>9f96	db						.byte 	$DB 						; causes a break in the emulator
.9f97					_ESTALowState:
.9f97	68		pla				pla 								; get value back
.9f98	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f9a	f0 29		beq $9fc5			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f9c	29 0f		and #$0f			and 	#15 						; make digit
.9f9e	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9fa1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9fa4	0a		asl a				asl 	a
.9fa5	0a		asl a				asl 	a
.9fa6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fa9	0a		asl a				asl 	a
.9faa	6d 86 04	adc $0486			adc 	DigitTemp
.9fad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fb0	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9fb2	90 05		bcc $9fb9			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9fb4	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fb6	8d 85 04	sta $0485			sta 	EncodeState
.9fb9					_ESTANoSwitch:
.9fb9	38		sec				sec
.9fba	60		rts				rts
.9fbb					_ESTAHighState:
.9fbb	68		pla				pla 								; get value back
.9fbc	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9fbe	f0 05		beq $9fc5			beq 	_ESTASwitchFloat
.9fc0	20 24 a0	jsr $a024			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9fc3	38		sec				sec
.9fc4	60		rts				rts
.9fc5					_ESTASwitchFloat:
.9fc5	9c 87 04	stz $0487			stz 	DecimalCount
.9fc8	e8		inx				inx 								; zero the decimal additive.
.9fc9	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.9fcc	ca		dex				dex
.9fcd	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9fcf	80 ab		bra $9f7c			bra 	_ENExitChange
.9fd1					_ESTADecimalState:
.9fd1	68		pla				pla 								; digit.
.9fd2	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9fd4	f0 96		beq $9f6c			beq 	_ENFail
.9fd6	e8		inx				inx 								; put digit into fractional part of X+1
.9fd7	20 24 a0	jsr $a024			jsr 	ESTAShiftDigitIntoMantissa
.9fda	ca		dex				dex
.9fdb	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9fde	ad 87 04	lda $0487			lda 	DecimalCount
.9fe1	c9 0b		cmp #$0b			cmp 	#11
.9fe3	f0 02		beq $9fe7			beq 	_ESTADSFail
.9fe5	38		sec				sec
.9fe6	60		rts				rts
.9fe7					_ESTADSFail:
.9fe7	4c ee b3	jmp $b3ee			jmp 	RangeError
.9fea					_ENConstructFinal:
.9fea	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9fed	f0 33		beq $a022			beq 	_ENCFExit 					; no decimals
.9fef	5a		phy				phy
.9ff0	0a		asl a				asl 	a 							; x 4 and CLC
.9ff1	0a		asl a				asl 	a
.9ff2	6d 87 04	adc $0487			adc 	DecimalCount
.9ff5	a8		tay				tay
.9ff6	b9 ad b3	lda $b3ad,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ff9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ffc	b9 ae b3	lda $b3ae,y			lda 	DecimalScalarTable-5+1,y
.9fff	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a002	b9 af b3	lda $b3af,y			lda 	DecimalScalarTable-5+2,y
.a005	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a008	b9 b0 b3	lda $b3b0,y			lda 	DecimalScalarTable-5+3,y
.a00b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a00e	b9 b1 b3	lda $b3b1,y			lda 	DecimalScalarTable-5+4,y
.a011	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a014	a9 08		lda #$08			lda 	#NSTFloat
.a016	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a019	7a		ply				ply
.a01a	e8		inx				inx 								; multiply decimal const by decimal scalar
.a01b	20 35 b1	jsr $b135			jsr 	FloatMultiply
.a01e	ca		dex				dex
.a01f	20 ca af	jsr $afca			jsr 	FloatAdd 					; add to integer part.
.a022					_ENCFExit:
.a022	18		clc				clc 								; reject the digit.
.a023	60		rts				rts
.a024					ESTAShiftDigitIntoMantissa:
.a024	29 0f		and #$0f			and 	#15 						; save digit
.a026	48		pha				pha
.a027	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a02a	48		pha				pha
.a02b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a02e	48		pha				pha
.a02f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a032	48		pha				pha
.a033	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a036	48		pha				pha
.a037	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 2
.a03a	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 4
.a03d	18		clc				clc 								; pop mantissa and add
.a03e	68		pla				pla
.a03f	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a042	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a045	68		pla				pla
.a046	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a049	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a04c	68		pla				pla
.a04d	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a050	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a053	68		pla				pla
.a054	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a057	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a05a	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 10
.a05d	68		pla				pla 								; add digit
.a05e	18		clc				clc
.a05f	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a062	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a065	90 0d		bcc $a074			bcc 	_ESTASDExit
.a067	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a06a	d0 08		bne $a074			bne 	_ESTASDExit
.a06c	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a06f	d0 03		bne $a074			bne 	_ESTASDExit
.a071	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a074					_ESTASDExit:
.a074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a075					EvaluateTerm:
.a075	b1 30		lda ($30),y			lda 	(codePtr),y
.a077	30 18		bmi $a091			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a079	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a07b	b0 6f		bcs $a0ec			bcs 	_ETVariable
.a07d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a07f	90 6e		bcc $a0ef			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a081	c9 3a		cmp #$3a			cmp 	#'9'+1
.a083	b0 6a		bcs $a0ef			bcs 	_ETPuncUnary
.a085	20 53 9f	jsr $9f53			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a088					_ETNumber:
.a088	c8		iny				iny 								; keep encoding until we have the numbers
.a089	b1 30		lda ($30),y			lda 	(codePtr),y
.a08b	20 56 9f	jsr $9f56			jsr 	EncodeNumberContinue
.a08e	b0 f8		bcs $a088			bcs 	_ETNumber 					; go back if accepted.
.a090	60		rts				rts
.a091					_ETCheckUnary:
.a091	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a093	f0 41		beq $a0d6			beq 	_ETString
.a095	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a097	f0 12		beq $a0ab			beq 	_ETHexConstant
.a099	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a09b	90 0b		bcc $a0a8			bcc 	_ETSyntaxError
.a09d	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a09f	b0 07		bcs $a0a8			bcs 	_ETSyntaxError
.a0a1	da		phx				phx 								; push X on the stack
.a0a2	0a		asl a				asl 	a 							; put vector x 2 into X
.a0a3	aa		tax				tax
.a0a4	c8		iny				iny 								; consume unary function token
.a0a5	7c a2 95	jmp ($95a2,x)			jmp 	(VectorSet0,x) 				; and do it.
.a0a8					_ETSyntaxError:
.a0a8	4c e9 b3	jmp $b3e9			jmp 	SyntaxError
.a0ab					_ETHexConstant:
.a0ab	c8		iny				iny 								; skip #
.a0ac	c8		iny				iny 								; skip count
.a0ad	20 ce a5	jsr $a5ce			jsr 	NSMSetZero 					; clear result
.a0b0					_ETHLoop:
.a0b0	b1 30		lda ($30),y			lda 	(codePtr),y
.a0b2	c8		iny				iny 								; and consume
.a0b3	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a0b5	f0 1e		beq $a0d5			beq 	_ETHExit
.a0b7	48		pha				pha 								; save on stack.
.a0b8	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 2
.a0bb	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 4
.a0be	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 8
.a0c1	20 e3 a5	jsr $a5e3			jsr 	NSMShiftLeft 				; x 16
.a0c4	68		pla				pla 								; ASCII
.a0c5	c9 41		cmp #$41			cmp 	#'A'
.a0c7	90 02		bcc $a0cb			bcc 	_ETHNotChar
.a0c9	e9 07		sbc #$07			sbc 	#7
.a0cb					_ETHNotChar:
.a0cb	29 0f		and #$0f			and 	#15 						; digit now
.a0cd	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0d0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0d3	80 db		bra $a0b0			bra 	_ETHLoop 					; go round.
.a0d5					_ETHExit:
.a0d5	60		rts				rts
.a0d6					_ETString:
.a0d6	c8		iny				iny 								; look at length
.a0d7	b1 30		lda ($30),y			lda 	(codePtr),y
.a0d9	48		pha				pha
.a0da	c8		iny				iny 								; first character
.a0db	20 18 a6	jsr $a618			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0de	68		pla				pla 								; restore count and save
.a0df	85 36		sta $36				sta 	zTemp0
.a0e1	98		tya				tya 								; add length to Y to skip it.
.a0e2	18		clc				clc
.a0e3	65 36		adc $36				adc 	zTemp0
.a0e5	a8		tay				tay
.a0e6	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a0e8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0eb	60		rts				rts
.a0ec					_ETVariable:
.a0ec	4c 46 a1	jmp $a146			jmp 	VariableHandler
.a0ef					_ETPuncUnary:
.a0ef	c8		iny				iny 								; consume the unary character
.a0f0	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a0f2	f0 2d		beq $a121			beq 	_ETUnaryNegate
.a0f4	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a0f6	f0 39		beq $a131			beq 	_ETDereference
.a0f8	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a0fa	f0 43		beq $a13f			beq 	_ETParenthesis
.a0fc	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a0fe	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a100	f0 06		beq $a108			beq 	_ETIndirection
.a102	e6 36		inc $36				inc 	zTemp0
.a104	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a106	d0 a0		bne $a0a8			bne 	_ETSyntaxError
.a108					_ETIndirection:
.a108	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a10a	1a		inc a				inc 	a
.a10b	48		pha				pha
.a10c	20 75 a0	jsr $a075			jsr 	EvaluateTerm				; evaluate the term
.a10f	20 b9 9e	jsr $9eb9			jsr 	Dereference 				; dereference it.
.a112	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a115	d0 07		bne $a11e			bne 	_ETTypeMismatch
.a117	68		pla				pla 								; indirection 1-2
.a118	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a11a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a11d	60		rts				rts
.a11e					_ETTypeMismatch:
.a11e	4c f3 b3	jmp $b3f3			jmp 	TypeError
.a121					_ETUnaryNegate:
.a121	20 75 a0	jsr $a075			jsr 	EvaluateTerm				; evaluate the term
.a124	20 b9 9e	jsr $9eb9			jsr 	Dereference 				; dereference it.
.a127	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a12a	29 10		and #$10			and 	#NSTString
.a12c	d0 f0		bne $a11e			bne 	_ETTypeMismatch
.a12e	4c 7a a5	jmp $a57a			jmp 	NSMNegate  					; just toggles the sign bit.
.a131					_ETDereference:
.a131	20 75 a0	jsr $a075			jsr 	EvaluateTerm				; evaluate the term
.a134	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a137	29 20		and #$20			and 	#NSBIsReference
.a139	f0 e3		beq $a11e			beq 	_ETTypeMismatch
.a13b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a13e	60		rts				rts
.a13f					_ETParenthesis:
.a13f	20 a4 9d	jsr $9da4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a142	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; check for )
.a145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a146					VariableHandler:
.a146	b1 30		lda ($30),y			lda 	(codePtr),y
.a148	18		clc				clc
.a149	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a14b	85 37		sta $37				sta 	zTemp0+1
.a14d	c8		iny				iny
.a14e	b1 30		lda ($30),y			lda 	(codePtr),y
.a150	85 36		sta $36				sta 	zTemp0
.a152	c8		iny				iny
.a153	18		clc				clc									; copy variable address+3 to mantissa
.a154	69 03		adc #$03			adc 	#3
.a156	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a159	a5 37		lda $37				lda 	zTemp0+1
.a15b	69 00		adc #$00			adc 	#0
.a15d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a160	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a163	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a166	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a169	5a		phy				phy
.a16a	a0 02		ldy #$02			ldy 	#2 							; read type
.a16c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a16e	7a		ply				ply
.a16f	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a171	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a173	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a176	29 04		and #$04			and 	#NSBIsArray
.a178	d0 01		bne $a17b			bne 	_VHArray
.a17a	60		rts				rts
.a17b					_VHArray:
.a17b	e8		inx				inx
.a17c	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a17f	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a181	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a184	b1 30		lda ($30),y			lda 	(codePtr),y
.a186	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a188	d0 06		bne $a190			bne 	_VHNoSecondIndex
.a18a	c8		iny				iny 								; skip the comma
.a18b	e8		inx				inx
.a18c	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a18f	ca		dex				dex
.a190					_VHNoSecondIndex:
.a190	ca		dex				dex 								; set X back.
.a191	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; and check the right bracket.
.a194	5a		phy				phy 								; save position
.a195	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a197	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a199	f0 6b		beq $a206			beq 	_VHBadIndex
.a19b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a19e	85 3e		sta $3e				sta 	zaTemp
.a1a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1a3	85 3f		sta $3f				sta 	zaTemp+1
.a1a5	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1a7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1a9	f0 02		beq $a1ad			beq 	_VHHas2Mask
.a1ab	a9 ff		lda #$ff			lda 	#$FF
.a1ad					_VHHas2Mask:
.a1ad	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a1b0	f0 54		beq $a206			beq 	_VHBadIndex
.a1b2	0a		asl a				asl 	a 							; carry will be set if a second index
.a1b3	90 09		bcc $a1be			bcc 	_VHCheckFirstIndex
.a1b5	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1b7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1b9	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a1bc	90 48		bcc $a206			bcc 	_VHBadIndex
.a1be					_VHCheckFirstIndex:
.a1be	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1c0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1c2	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a1c5	90 3f		bcc $a206			bcc 	_VHBadIndex
.a1c7	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1c9	64 37		stz $37				stz 	zTemp0+1
.a1cb	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1ce	30 0f		bmi $a1df			bmi 	_VHNoMultiply
.a1d0	da		phx				phx
.a1d1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1d4	48		pha				pha
.a1d5	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1d7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1d9	1a		inc a				inc 	a 							; add 1 for zero base
.a1da	fa		plx				plx
.a1db	20 85 b2	jsr $b285			jsr 	Multiply8x8 				; calculate -> Z0
.a1de	fa		plx				plx
.a1df					_VHNoMultiply:
.a1df	18		clc				clc
.a1e0	a5 36		lda $36				lda 	zTemp0
.a1e2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a1e5	85 36		sta $36				sta 	zTemp0
.a1e7	a5 37		lda $37				lda 	zTemp0+1
.a1e9	69 00		adc #$00			adc 	#0
.a1eb	85 37		sta $37				sta 	zTemp0+1
.a1ed	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1f0	20 fd 8c	jsr $8cfd			jsr 	ScaleByBaseType
.a1f3	18		clc				clc
.a1f4	b2 3e		lda ($3e)			lda 	(zaTemp)
.a1f6	65 36		adc $36				adc 	zTemp0
.a1f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fb	a0 01		ldy #$01			ldy 	#1
.a1fd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1ff	65 37		adc $37				adc 	zTemp0+1
.a201	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a204	7a		ply				ply 								; restore position
.a205	60		rts				rts
.a206					_VHBadIndex:
.a206	a9 17		lda #$17		lda	#23
.a208	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b1bb					AbsUnary:
.b1bb	fa		plx				plx 								; restore stack pos
.b1bc	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; get a float or int
.b1bf	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b1c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b1c5	29 7f		and #$7f			and 	#$7F
.b1c7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a20b					AllocUnary:
.a20b	fa		plx				plx 								; restore stack pos
.a20c	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger		; get bytes required.
.a20f	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.a212	da		phx				phx 								; save X/Y
.a213	5a		phy				phy
.a214	8a		txa				txa 								; copy X into Y
.a215	a8		tay				tay
.a216	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a219	aa		tax				tax
.a21a	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a21d	20 2a a2	jsr $a22a			jsr 	AllocateXABytes 			; allocate memory
.a220	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a223	8a		txa				txa
.a224	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a227	7a		ply				ply
.a228	fa		plx				plx
.a229	60		rts				rts
.a22a					AllocateXABytes:
.a22a	5a		phy				phy
.a22b	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a22e	84 36		sty $36				sty 	zTemp0
.a230	5a		phy				phy
.a231	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a234	84 37		sty $37				sty 	zTemp0+1
.a236	5a		phy				phy
.a237	18		clc				clc 								; add to low memory pointer
.a238	6d 8c 04	adc $048c			adc 	lowMemPtr
.a23b	8d 8c 04	sta $048c			sta 	lowMemPtr
.a23e	8a		txa				txa
.a23f	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a242	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a245	b0 2f		bcs $a276			bcs 	CISSMemory
.a247	20 68 a2	jsr $a268			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a24a					_ClearMemory:
.a24a	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a24d	c5 36		cmp $36				cmp 	zTemp0
.a24f	d0 07		bne $a258			bne 	_CMClearNext
.a251	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a254	c5 37		cmp $37				cmp 	zTemp0+1
.a256	f0 0c		beq $a264			beq 	_CMExit
.a258					_CMClearNext:
.a258	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a25a	92 36		sta ($36)			sta 	(zTemp0)
.a25c	e6 36		inc $36				inc 	zTemp0
.a25e	d0 ea		bne $a24a			bne 	_ClearMemory
.a260	e6 37		inc $37				inc		zTemp0+1
.a262	80 e6		bra $a24a			bra 	_ClearMemory
.a264					_CMExit:
.a264	fa		plx				plx
.a265	68		pla				pla
.a266	7a		ply				ply
.a267	60		rts				rts
.a268					CheckIdentifierStringSpace:
.a268	48		pha				pha
.a269	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a26c	18		clc				clc
.a26d	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a26f	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a272	b0 02		bcs $a276			bcs 	CISSMemory
.a274	68		pla				pla
.a275	60		rts				rts
.a276					CISSMemory:
.a276	a9 06		lda #$06		lda	#6
.a278	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b1cb					AscUnary:
.b1cb	fa		plx				plx 								; restore stack pos
.b1cc	20 19 a5	jsr $a519			jsr 	EvaluateString 				; get a string
.b1cf	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b1d1	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.b1d4	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b1d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b1d8					FracUnary:
.b1d8	fa		plx				plx 								; restore stack pos
.b1d9	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; get a float or int
.b1dc	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b1df	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b1e2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b1e4	f0 04		beq $b1ea			beq 	_IUZero
.b1e6	20 a8 b0	jsr $b0a8			jsr 	FloatFractionalPart
.b1e9	60		rts				rts
.b1ea					_IUZero:
.b1ea	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.b1ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b1ee					IntUnary:
.b1ee	fa		plx				plx 								; restore stack pos
.b1ef	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; get a float or int
.b1f2	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b1f5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b1f8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b1fa	f0 03		beq $b1ff			beq 	_IUExit
.b1fc	20 0b b1	jsr $b10b			jsr 	FloatIntegerPart
.b1ff					_IUExit:
.b1ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b200					LenUnary:
.b200	fa		plx				plx 								; restore stack pos
.b201	20 19 a5	jsr $a519			jsr 	EvaluateString 				; get a string
.b204	5a		phy				phy
.b205	a0 00		ldy #$00			ldy 	#0 							; find length
.b207					_LenFind:
.b207	b1 36		lda ($36),y			lda 	(zTemp0),y
.b209	f0 06		beq $b211			beq 	_LenExit
.b20b	c8		iny				iny
.b20c	d0 f9		bne $b207			bne 	_LenFind
.b20e	4c ee b3	jmp $b3ee			jmp 	RangeError 					; string > 255
.b211					_LenExit:
.b211	98		tya				tya
.b212	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.b215	7a		ply				ply
.b216	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b219	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a27b					Unary_Min:
.a27b	a9 01		lda #$01			lda 	#1
.a27d	80 02		bra $a281			bra 	UnaryMinMaxMain
.a27f					Unary_Max:
.a27f	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a281					UnaryMinMaxMain:
.a281	fa		plx				plx 								; get index on number stack
.a282	48		pha				pha 								; save comparator
.a283	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; get the first value.
.a286					_UMMMLoop:
.a286	b1 30		lda ($30),y			lda 	(codePtr),y
.a288	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a28a	f0 22		beq $a2ae			beq 	_UMMMDone
.a28c	20 0b ae	jsr $ae0b			jsr 	CheckComma 					; must be a comma
.a28f	e8		inx				inx
.a290	20 05 a5	jsr $a505			jsr 	EvaluateValue
.a293	ca		dex				dex
.a294	20 a5 a5	jsr $a5a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a297	e8		inx				inx
.a298	20 a5 a5	jsr $a5a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a29b	e8		inx				inx
.a29c	20 53 9a	jsr $9a53			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a29f	ca		dex				dex
.a2a0	ca		dex				dex
.a2a1	85 36		sta $36				sta 	zTemp0 						; save required result
.a2a3	68		pla				pla 								; get and save comparator
.a2a4	48		pha				pha
.a2a5	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a2a7	d0 dd		bne $a286			bne 	_UMMMLoop
.a2a9	20 b1 a2	jsr $a2b1			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a2ac	80 d8		bra $a286			bra 	_UMMMLoop
.a2ae					_UMMMDone:
.a2ae	68		pla				pla 								; throw the comparator
.a2af	c8		iny				iny 								; skip )
.a2b0	60		rts				rts
.a2b1					ExpCopyAboveDown:
.a2b1	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a2b4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2b7	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a2ba	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a2bd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a2c0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2c3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a2c6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2c9	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a2cc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2cf	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a2d2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a2d6					Unary_Not:
.a2d6	fa		plx				plx
.a2d7	20 31 a5	jsr $a531			jsr 	EvaluateInteger 			; get integer
.a2da	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.a2dd	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; zero mantissa ?
.a2e0	f0 04		beq $a2e6			beq 	_NotZero
.a2e2	20 ce a5	jsr $a5ce			jsr 	NSMSetZero
.a2e5	60		rts				rts
.a2e6					_NotZero:
.a2e6	4c 08 9a	jmp $9a08			jmp 	ReturnTrue
.a2e9					_UNBad:
.a2e9	4c f8 b3	jmp $b3f8			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a2ec					Unary_Random:
.a2ec	fa		plx				plx
.a2ed	20 6b a3	jsr $a36b			jsr 	Random32Bit 				; get a random number
.a2f0	20 50 a3	jsr $a350			jsr 	URCopyToMantissa  			; put in mantissa
.a2f3	b1 30		lda ($30),y			lda 	(codePtr),y
.a2f5	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a2f7	f0 08		beq $a301			beq 	_URNoModulus
.a2f9	e8		inx				inx
.a2fa	20 46 a5	jsr $a546			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a2fd	ca		dex				dex
.a2fe	20 87 ae	jsr $ae87			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a301					_URNoModulus:
.a301	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a304	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a307	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.a30a	60		rts				rts
.a30b					Unary_Rnd:
.a30b	fa		plx				plx
.a30c	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; number to use.
.a30f	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; closing bracket
.a312	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a315	f0 2b		beq $a342			beq 	_URCopySeed
.a317	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a31a	10 23		bpl $a33f			bpl 	_URDontSeed
.a31c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a31f	49 17		eor #$17			eor 	#$17
.a321	8d 88 04	sta $0488			sta 	RandomSeed+0
.a324	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a327	49 a5		eor #$a5			eor 	#$A5
.a329	8d 89 04	sta $0489			sta 	RandomSeed+1
.a32c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a32f	49 c2		eor #$c2			eor 	#$C2
.a331	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a334	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a337	49 9d		eor #$9d			eor 	#$9D
.a339	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a33c	20 6b a3	jsr $a36b			jsr 	Random32Bit
.a33f					_URDontSeed:
.a33f	20 6b a3	jsr $a36b			jsr 	Random32Bit 				; generate a number.
.a342					_URCopySeed:
.a342	20 50 a3	jsr $a350			jsr 	URCopyToMantissa 			; copy into mantissa
.a345	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a347	8d 28 04	sta $0428			sta 	NSExponent
.a34a	a9 08		lda #$08			lda 	#NSTFloat
.a34c	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a34f	60		rts				rts
.a350					URCopyToMantissa:
.a350	ad 88 04	lda $0488			lda 	RandomSeed+0
.a353	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a356	ad 89 04	lda $0489			lda 	RandomSeed+1
.a359	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a35c	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a35f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a362	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a365	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a367	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a36a	60		rts				rts
.a36b					Random32Bit:
.a36b	5a		phy				phy
.a36c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a36e	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a371	d0 03		bne $a376			bne 	_Random1
.a373	a8		tay				tay 								; if so do it 256 times
.a374	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a376					_Random1:
.a376	0a		asl a				asl 	a 							; LSFR RNG
.a377	2e 89 04	rol $0489			rol 	RandomSeed+1
.a37a	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a37d	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a380	90 02		bcc $a384			bcc 	_Random2
.a382	49 c5		eor #$c5			eor 	#$C5
.a384					_Random2:
.a384	88		dey				dey
.a385	d0 ef		bne $a376			bne 	_Random1
.a387	8d 88 04	sta $0488			sta 	RandomSeed+0
.a38a	7a		ply				ply
.a38b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b21a					SgnUnary:
.b21a	fa		plx				plx 								; restore stack pos
.b21b	20 0e a5	jsr $a50e			jsr 	EvaluateNumber 				; get a float or int
.b21e	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.b221	20 fe a5	jsr $a5fe			jsr 	NSMIsZero 					; if zero
.b224	f0 10		beq $b236			beq 	_SGZero  					; return Int Zero
.b226	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b229	48		pha				pha
.b22a	a9 01		lda #$01			lda 	#1 							; set to 1
.b22c	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.b22f	68		pla				pla
.b230	29 80		and #$80			and		#$80 						; copy the sign byte out
.b232	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b235	60		rts				rts
.b236	20 ce a5	jsr $a5ce	_SGZero:jsr 	NSMSetZero
.b239	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b23a					ValUnary:
.b23a	fa		plx				plx 								; restore stack pos
.b23b	20 50 b2	jsr $b250			jsr 	ValMainCode 				; do the main val() code
.b23e	b0 01		bcs $b241			bcs 	_VUError 					; couldn't convert
.b240	60		rts				rts
.b241					_VUError:
.b241	4c f3 b3	jmp $b3f3			jmp 	TypeError
.b244					IsValUnary:
.b244	fa		plx				plx 								; restore stack pos
.b245	20 50 b2	jsr $b250			jsr 	ValMainCode 				; do the main val() code
.b248	b0 03		bcs $b24d			bcs 	_VUBad
.b24a	4c 08 9a	jmp $9a08			jmp 	ReturnTrue
.b24d					_VUBad:
.b24d	4c 14 9a	jmp $9a14			jmp 	ReturnFalse
.b250					ValMainCode:
.b250	20 19 a5	jsr $a519			jsr 	EvaluateString 				; get a string
.b253	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; check right bracket present
.b256	5a		phy				phy
.b257	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b259	f0 17		beq $b272			beq 	_VMCFail2
.b25b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b25d	48		pha				pha 								; save first character
.b25e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b260	d0 01		bne $b263			bne 	_VMCStart
.b262	c8		iny				iny 								; skip over -
.b263					_VMCStart:
.b263	38		sec				sec 								; initialise first time round.
.b264					_VMCNext:
.b264	c8		iny				iny 								; pre-increment
.b265	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b267	f0 0c		beq $b275			beq 	_VMCSuccess 				; successful.
.b269	20 57 9f	jsr $9f57			jsr 	EncodeNumber 				; send it to the number-builder
.b26c	90 03		bcc $b271			bcc 	_VMCFail 					; if failed, give up.
.b26e	18		clc				clc 								; next time round, countinue
.b26f	80 f3		bra $b264			bra 	_VMCNext
.b271					_VMCFail:
.b271	68		pla				pla
.b272					_VMCFail2:
.b272	7a		ply				ply
.b273	38		sec				sec
.b274	60		rts				rts
.b275					_VMCSuccess:
.b275	a9 00		lda #$00			lda 	#0 							; construct final
.b277	20 57 9f	jsr $9f57			jsr 	EncodeNumber
.b27a	68		pla				pla
.b27b	c9 2d		cmp #$2d			cmp 	#"-"
.b27d	d0 03		bne $b282			bne 	_VMCNotNegative
.b27f	20 7a a5	jsr $a57a			jsr		NSMNegate
.b282					_VMCNotNegative:
.b282	7a		ply				ply
.b283	18		clc				clc
.b284	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a38c					ChrUnary:
.a38c	fa		plx				plx 								; restore stack pos
.a38d	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger			; get value
.a390	48		pha				pha
.a391	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.a394	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a396	20 6d b7	jsr $b76d			jsr 	StringTempAllocate
.a399	68		pla				pla 								; write number to it
.a39a	20 ab b7	jsr $b7ab			jsr 	StringTempWrite
.a39d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a39e					SpcUnary:
.a39e	fa		plx				plx 								; restore stack pos
.a39f	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger			; get value
.a3a2	5a		phy				phy
.a3a3	48		pha				pha 								; save count
.a3a4	20 6d b7	jsr $b76d			jsr 	StringTempAllocate
.a3a7	7a		ply				ply 								; to do count in Y
.a3a8					_SpcLoop:
.a3a8	c0 00		cpy #$00			cpy 	#0
.a3aa	f0 08		beq $a3b4			beq 	_SpcExit
.a3ac	a9 20		lda #$20			lda 	#32
.a3ae	20 ab b7	jsr $b7ab			jsr 	StringTempWrite
.a3b1	88		dey				dey
.a3b2	80 f4		bra $a3a8			bra 	_SPCLoop
.a3b4					_SpcExit:
.a3b4	7a		ply				ply
.a3b5	20 03 ae	jsr $ae03			jsr 	CheckRightBracket
.a3b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3b9					Unary_Str:
.a3b9	fa		plx				plx
.a3ba	20 0e a5	jsr $a50e			jsr 	EvaluateNumber  			; get number
.a3bd	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; closing bracket
.a3c0	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a3c2	20 db a3	jsr $a3db			jsr 	ConvertNumberToString 		; do the conversion.
.a3c5	a9 21		lda #$21			lda		#33 						; create buffer
.a3c7	20 6d b7	jsr $b76d			jsr 	StringTempAllocate 			; allocate memory
.a3ca	da		phx				phx
.a3cb	a2 00		ldx #$00			ldx 	#0
.a3cd					_USCopy:
.a3cd	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3d0	20 ab b7	jsr $b7ab			jsr 	StringTempWrite
.a3d3	e8		inx				inx
.a3d4	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3d7	d0 f4		bne $a3cd			bne 	_USCopy
.a3d9	fa		plx				plx
.a3da	60		rts				rts
.a3db					ConvertNumberToString:
.a3db	5a		phy				phy 								; save code position
.a3dc	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a3df	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a3e2	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a3e5	10 0a		bpl $a3f1			bpl 	_CNTSNotNegative
.a3e7	29 7f		and #$7f			and 	#$7F 						; make +ve
.a3e9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3ec	a9 2d		lda #$2d			lda 	#"-"
.a3ee	20 57 a4	jsr $a457			jsr 	WriteDecimalBuffer
.a3f1					_CNTSNotNegative:
.a3f1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a3f4	f0 15		beq $a40b			beq 	_CNTSNotFloat
.a3f6	e8		inx				inx 								; round up
.a3f7	a9 01		lda #$01			lda 	#1
.a3f9	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.a3fc	ca		dex				dex
.a3fd	bd 28 04	lda $0428,x			lda		NSExponent,x
.a400	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a403	a9 08		lda #$08			lda 	#NSTFloat
.a405	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a408	20 ca af	jsr $afca			jsr 	FloatAdd
.a40b					_CNTSNotFloat:
.a40b	20 39 a4	jsr $a439			jsr 	MakePlusTwoString
.a40e	20 a8 b0	jsr $b0a8			jsr 	FloatFractionalPart 		; get the fractional part
.a411	20 6c b1	jsr $b16c			jsr 	NSNormalise					; normalise , exit if zero
.a414	f0 21		beq $a437			beq 	_CNTSExit
.a416	a9 2e		lda #$2e			lda 	#"."
.a418	20 57 a4	jsr $a457			jsr 	WriteDecimalBuffer 			; write decimal place
.a41b					_CNTSDecimal:
.a41b	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a41e	30 17		bmi $a437			bmi 	_CNTSExit
.a420	e8		inx				inx 								; x 10.0
.a421	a9 0a		lda #$0a			lda 	#10
.a423	20 d0 a5	jsr $a5d0			jsr 	NSMSetByte
.a426	a9 08		lda #$08			lda 	#NSTFloat
.a428	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a42b	ca		dex				dex
.a42c	20 35 b1	jsr $b135			jsr 	FloatMultiply
.a42f	20 39 a4	jsr $a439			jsr 	MakePlusTwoString
.a432	20 a8 b0	jsr $b0a8			jsr 	FloatFractionalPart 		; get the fractional part
.a435	80 e4		bra $a41b			bra 	_CNTSDecimal 				; keep going.
.a437					_CNTSExit:
.a437	7a		ply				ply
.a438	60		rts				rts
.a439					MakePlusTwoString:
.a439	da		phx				phx
.a43a	20 a5 a5	jsr $a5a5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a43d	e8		inx				inx 								; access it
.a43e	e8		inx				inx
.a43f	20 0b b1	jsr $b10b			jsr 	FloatIntegerPart 			; make it an integer
.a442	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a444	20 74 af	jsr $af74			jsr 	ConvertInt32
.a447	a2 00		ldx #$00			ldx	 	#0
.a449					_MPTSCopy:
.a449	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a44c	20 57 a4	jsr $a457			jsr 	WriteDecimalBuffer
.a44f	e8		inx				inx
.a450	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a453	d0 f4		bne $a449			bne 	_MPTSCopy
.a455	fa		plx				plx
.a456	60		rts				rts
.a457					WriteDecimalBuffer:
.a457	da		phx				phx
.a458	ae 95 04	ldx $0495			ldx 	dbOffset
.a45b	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a45e	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a461	ee 95 04	inc $0495			inc 	dbOffset
.a464	fa		plx				plx
.a465	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a466					Unary_Left:
.a466	fa		plx				plx
.a467	18		clc				clc 								; only one parameter
.a468	20 dd a4	jsr $a4dd			jsr 	SubstringInitial 			; set up.
.a46b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a46e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a471	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a474	80 2c		bra $a4a2			bra 	SubstringMain
.a476					Unary_Right:
.a476	fa		plx				plx
.a477	18		clc				clc 								; only one parameter
.a478	20 dd a4	jsr $a4dd			jsr 	SubstringInitial 			; set up.
.a47b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a47e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a481	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a484	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a487	b0 02		bcs $a48b			bcs 	_URNotUnderflow
.a489	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a48b					_URNotUnderFlow:
.a48b	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a48e	80 12		bra $a4a2			bra 	SubStringMain
.a490					Unary_Mid:
.a490	fa		plx				plx
.a491	38		sec				sec 								; two parameters
.a492	20 dd a4	jsr $a4dd			jsr 	SubstringInitial 			; set up.
.a495	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a498	f0 05		beq $a49f			beq 	_UMError
.a49a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a49d	80 03		bra $a4a2			bra 	SubStringMain
.a49f					_UMError:
.a49f	4c f8 b3	jmp $b3f8			jmp 	ArgumentError
.a4a2					SubStringMain:
.a4a2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a4a5	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a4a8	b0 2d		bcs $a4d7			bcs 	_SSMNull 					; if so, return an empty string.
.a4aa	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a4ad	f0 28		beq $a4d7			beq 	_SSMNull 					; return empty string.
.a4af	18		clc				clc 								; add the offset +1 to the address and
.a4b0	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a4b3	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a4b6	85 36		sta $36				sta 	zTemp0
.a4b8	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a4bb	69 00		adc #$00			adc 	#0
.a4bd	85 37		sta $37				sta 	zTemp0+1
.a4bf					_SSMNoCarry:
.a4bf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a4c2	20 6d b7	jsr $b76d			jsr 	StringTempAllocate 			; allocate that many characters
.a4c5	5a		phy				phy 								; save Y
.a4c6	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a4c8					_SSMCopy:
.a4c8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a4ca	f0 09		beq $a4d5			beq 	_SSMEString 				; no more to copy
.a4cc	20 ab b7	jsr $b7ab			jsr 	StringTempWrite 			; and write it out.
.a4cf	c8		iny				iny
.a4d0	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a4d3	d0 f3		bne $a4c8			bne 	_SSMCopy
.a4d5					_SSMEString:
.a4d5	7a		ply				ply
.a4d6					_SSMExit:
.a4d6	60		rts				rts
.a4d7					_SSMNull:
.a4d7	a9 00		lda #$00			lda 	#0
.a4d9	20 6d b7	jsr $b76d			jsr 	StringTempAllocate
.a4dc	60		rts				rts
.a4dd					SubstringInitial:
.a4dd	da		phx				phx 								; save initial stack position
.a4de	08		php				php 								; save carry on stack indicating 2 parameters
.a4df	20 19 a5	jsr $a519			jsr 	EvaluateString 				; get a string
.a4e2	5a		phy				phy 								; calculate length to exponent.
.a4e3	a0 ff		ldy #$ff			ldy 	#$FF
.a4e5					_SIFindLength:
.a4e5	c8		iny				iny
.a4e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a4e8	d0 fb		bne $a4e5			bne 	_SIFindLength
.a4ea	98		tya				tya
.a4eb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4ee	7a		ply				ply
.a4ef	e8		inx				inx
.a4f0	20 0b ae	jsr $ae0b			jsr 	CheckComma 					; comma next
.a4f3	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get next parameter
.a4f6	28		plp				plp 								; is it the last parameter ?
.a4f7	90 07		bcc $a500			bcc 	_SSIExit 					; if so, exit.
.a4f9	e8		inx				inx
.a4fa	20 0b ae	jsr $ae0b			jsr 	CheckComma 					; comma next
.a4fd	20 66 a5	jsr $a566			jsr 	Evaluate8BitInteger 		; get last parameter
.a500					_SSIExit:
.a500	fa		plx				plx
.a501	20 03 ae	jsr $ae03			jsr 	CheckRightBracket 			; check closing bracket
.a504	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a505					EvaluateValue:
.a505	48		pha				pha
.a506	20 a4 9d	jsr $9da4			jsr		EvaluateExpression 			; expression
.a509	20 b9 9e	jsr $9eb9			jsr 	Dereference					; derefernce it
.a50c	68		pla				pla
.a50d	60		rts				rts
.a50e					EvaluateNumber:
.a50e	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; get a value
.a511	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a514	29 10		and #$10			and 	#NSBIsString
.a516	d0 16		bne $a52e			bne 	HelperTypeError
.a518	60		rts				rts
.a519					EvaluateString:
.a519	20 05 a5	jsr $a505			jsr 	EvaluateValue 				; get a value
.a51c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a51f	29 10		and #$10			and 	#NSBIsString
.a521	f0 0b		beq $a52e			beq 	HelperTypeError
.a523					CopyAddressToTemp0:
.a523	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a526	85 36		sta $36				sta 	zTemp0
.a528	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a52b	85 37		sta $37				sta 	zTemp0+1
.a52d	60		rts				rts
.a52e					HelperTypeError:
.a52e	4c f3 b3	jmp $b3f3			jmp 	TypeError
.a531					EvaluateInteger:
.a531	20 0e a5	jsr $a50e			jsr 	EvaluateNumber
.a534	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a537	d0 0a		bne $a543			bne 	HelperValueError 			; if not, it's a float.
.a539	60		rts				rts
.a53a					EvaluateUnsignedInteger:
.a53a	20 31 a5	jsr $a531			jsr 	EvaluateInteger 			; check integer is +ve
.a53d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a540	30 01		bmi $a543			bmi 	HelperValueError
.a542	60		rts				rts
.a543					HelperValueError:
.a543	4c f8 b3	jmp $b3f8			jmp 	ArgumentError
.a546					Evaluate16BitInteger:
.a546	20 3a a5	jsr $a53a			jsr	 	EvaluateUnsignedInteger		; get integer
.a549	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a54c	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a54f	d0 f2		bne $a543			bne 	HelperValueError
.a551	60		rts				rts
.a552					Evaluate16BitIntegerSigned:
.a552	20 31 a5	jsr $a531			jsr	 	EvaluateInteger				; get integer
.a555	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a558	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a55b	d0 e6		bne $a543			bne 	HelperValueError
.a55d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a560	10 03		bpl $a565			bpl 	_EISNotSigned
.a562	20 83 a5	jsr $a583			jsr 	NSMNegateMantissa
.a565					_EISNotSigned:
.a565	60		rts				rts
.a566					Evaluate8BitInteger:
.a566	20 3a a5	jsr $a53a			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a569	d0 d8		bne $a543			bne 	HelperValueError
.a56b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a56e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a571	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a574	d0 cd		bne $a543			bne 	HelperValueError
.a576	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a579	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b285					Multiply8x8:
.b285	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b286	85 36		sta $36			  	sta 	zTemp0
.b288	86 37		stx $37				stx 	zTemp0+1
.b28a	a9 00		lda #$00			lda 	#0
.b28c	a2 08		ldx #$08			ldx 	#8
.b28e					_M88Loop:
.b28e	90 03		bcc $b293			bcc 	_M88NoAdd
.b290	18		clc				clc
.b291	65 37		adc $37				adc 	zTemp0+1
.b293					_M88NoAdd:
.b293	6a		ror a				ror 	a
.b294	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b296	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b297	d0 f5		bne $b28e			bne 	_M88Loop
.b299	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b29b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a57a					NSMNegate:
.a57a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a57d	49 80		eor #$80			eor 	#NSBIsNegative
.a57f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a582	60		rts				rts
.a583					NSMNegateMantissa:
.a583	38		sec				sec
.a584	a9 00		lda #$00			lda 	#0
.a586	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a589	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a58c	a9 00		lda #$00			lda 	#0
.a58e	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a591	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a594	a9 00		lda #$00			lda 	#0
.a596	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a599	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a59c	a9 00		lda #$00			lda 	#0
.a59e	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a5a1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5a4	60		rts				rts
.a5a5					NSMShiftUpTwo:
.a5a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5a8	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5ab	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a5ae	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a5b1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a5b4	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a5b7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a5ba	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a5bd	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a5c0	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a5c3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5c6	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a5c9	60		rts				rts
.a5ca					NSMSetZeroMantissaOnly:
.a5ca	a9 00		lda #$00			lda 	#0
.a5cc	80 08		bra $a5d6			bra 	NSMSetMantissa
.a5ce					NSMSetZero:
.a5ce	a9 00		lda #$00			lda 	#0
.a5d0					NSMSetByte:
.a5d0	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a5d3	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a5d6					NSMSetMantissa:
.a5d6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a5d9	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a5dc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a5df	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5e2	60		rts				rts
.a5e3					NSMShiftLeft:
.a5e3	18		clc				clc
.a5e4					NSMRotateLeft:
.a5e4	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a5e7	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a5ea	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a5ed	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a5f0	60		rts				rts
.a5f1					NSMShiftRight:
.a5f1	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a5f4	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a5f7	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a5fa	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a5fd	60		rts				rts
.a5fe					NSMIsZero:
.a5fe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a601	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a604	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a607	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a60a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b29c					Assemble_ora:
.b29c	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b29f	01					.byte $01
.b2a0					Assemble_and:
.b2a0	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2a3	21					.byte $21
.b2a4					Assemble_eor:
.b2a4	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2a7	41					.byte $41
.b2a8					Assemble_adc:
.b2a8	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2ab	61					.byte $61
.b2ac					Assemble_sta:
.b2ac	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2af	81					.byte $81
.b2b0					Assemble_lda:
.b2b0	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2b3	a1					.byte $a1
.b2b4					Assemble_cmp:
.b2b4	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2b7	c1					.byte $c1
.b2b8					Assemble_sbc:
.b2b8	20 f6 88	jsr $88f6		jsr	AssembleGroup1
>b2bb	e1					.byte $e1
.b2bc					Assemble_asl:
.b2bc	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2bf	02					.byte $02
>b2c0	75					.byte $75
.b2c1					Assemble_rol:
.b2c1	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2c4	22					.byte $22
>b2c5	75					.byte $75
.b2c6					Assemble_lsr:
.b2c6	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2c9	42					.byte $42
>b2ca	75					.byte $75
.b2cb					Assemble_ror:
.b2cb	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2ce	62					.byte $62
>b2cf	75					.byte $75
.b2d0					Assemble_stx:
.b2d0	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2d3	82					.byte $82
>b2d4	50					.byte $50
.b2d5					Assemble_ldx:
.b2d5	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2d8	a2					.byte $a2
>b2d9	d0					.byte $d0
.b2da					Assemble_dec:
.b2da	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2dd	c2					.byte $c2
>b2de	55					.byte $55
.b2df					Assemble_inc:
.b2df	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2e2	e2					.byte $e2
>b2e3	55					.byte $55
.b2e4					Assemble_stz:
.b2e4	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2e7	60					.byte $60
>b2e8	44					.byte $44
.b2e9					Assemble_bit:
.b2e9	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2ec	20					.byte $20
>b2ed	55					.byte $55
.b2ee					Assemble_sty:
.b2ee	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2f1	80					.byte $80
>b2f2	54					.byte $54
.b2f3					Assemble_ldy:
.b2f3	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2f6	a0					.byte $a0
>b2f7	d5					.byte $d5
.b2f8					Assemble_cpy:
.b2f8	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b2fb	c0					.byte $c0
>b2fc	d4					.byte $d4
.b2fd					Assemble_cpx:
.b2fd	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b300	e0					.byte $e0
>b301	d0					.byte $d0
.b302					Assemble_tsb:
.b302	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b305	00					.byte $00
>b306	50					.byte $50
.b307					Assemble_trb:
.b307	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b30a	10					.byte $10
>b30b	50					.byte $50
.b30c					Assemble_jsr:
.b30c	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b30f	14					.byte $14
>b310	10					.byte $10
.b311					Assemble_jmp:
.b311	20 fd 88	jsr $88fd		jsr	AssembleGroup2
>b314	40					.byte $40
>b315	10					.byte $10
.b316					Assemble_bpl:
.b316	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b319	10					.byte $10
.b31a					Assemble_bmi:
.b31a	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b31d	30					.byte $30
.b31e					Assemble_bvc:
.b31e	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b321	50					.byte $50
.b322					Assemble_bvs:
.b322	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b325	70					.byte $70
.b326					Assemble_bcc:
.b326	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b329	90					.byte $90
.b32a					Assemble_bcs:
.b32a	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b32d	b0					.byte $b0
.b32e					Assemble_bne:
.b32e	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b331	d0					.byte $d0
.b332					Assemble_beq:
.b332	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b335	f0					.byte $f0
.b336					Assemble_bra:
.b336	20 4e 89	jsr $894e		jsr	AssembleGroup3
>b339	80					.byte $80
.b33a					Assemble_brk:
.b33a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b33d	00					.byte $00
.b33e					Assemble_php:
.b33e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b341	08					.byte $08
.b342					Assemble_clc:
.b342	20 84 89	jsr $8984		jsr	AssembleGroup4
>b345	18					.byte $18
.b346					Assemble_plp:
.b346	20 84 89	jsr $8984		jsr	AssembleGroup4
>b349	28					.byte $28
.b34a					Assemble_sec:
.b34a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b34d	38					.byte $38
.b34e					Assemble_rti:
.b34e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b351	40					.byte $40
.b352					Assemble_pha:
.b352	20 84 89	jsr $8984		jsr	AssembleGroup4
>b355	48					.byte $48
.b356					Assemble_cli:
.b356	20 84 89	jsr $8984		jsr	AssembleGroup4
>b359	58					.byte $58
.b35a					Assemble_phy:
.b35a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b35d	5a					.byte $5a
.b35e					Assemble_rts:
.b35e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b361	60					.byte $60
.b362					Assemble_pla:
.b362	20 84 89	jsr $8984		jsr	AssembleGroup4
>b365	68					.byte $68
.b366					Assemble_sei:
.b366	20 84 89	jsr $8984		jsr	AssembleGroup4
>b369	78					.byte $78
.b36a					Assemble_ply:
.b36a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b36d	7a					.byte $7a
.b36e					Assemble_dey:
.b36e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b371	88					.byte $88
.b372					Assemble_txa:
.b372	20 84 89	jsr $8984		jsr	AssembleGroup4
>b375	8a					.byte $8a
.b376					Assemble_tya:
.b376	20 84 89	jsr $8984		jsr	AssembleGroup4
>b379	98					.byte $98
.b37a					Assemble_txs:
.b37a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b37d	9a					.byte $9a
.b37e					Assemble_tay:
.b37e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b381	a8					.byte $a8
.b382					Assemble_tax:
.b382	20 84 89	jsr $8984		jsr	AssembleGroup4
>b385	aa					.byte $aa
.b386					Assemble_clv:
.b386	20 84 89	jsr $8984		jsr	AssembleGroup4
>b389	b8					.byte $b8
.b38a					Assemble_tsx:
.b38a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b38d	ba					.byte $ba
.b38e					Assemble_iny:
.b38e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b391	c8					.byte $c8
.b392					Assemble_dex:
.b392	20 84 89	jsr $8984		jsr	AssembleGroup4
>b395	ca					.byte $ca
.b396					Assemble_cld:
.b396	20 84 89	jsr $8984		jsr	AssembleGroup4
>b399	d8					.byte $d8
.b39a					Assemble_phx:
.b39a	20 84 89	jsr $8984		jsr	AssembleGroup4
>b39d	da					.byte $da
.b39e					Assemble_stp:
.b39e	20 84 89	jsr $8984		jsr	AssembleGroup4
>b3a1	db					.byte $db
.b3a2					Assemble_inx:
.b3a2	20 84 89	jsr $8984		jsr	AssembleGroup4
>b3a5	e8					.byte $e8
.b3a6					Assemble_nop:
.b3a6	20 84 89	jsr $8984		jsr	AssembleGroup4
>b3a9	ea					.byte $ea
.b3aa					Assemble_sed:
.b3aa	20 84 89	jsr $8984		jsr	AssembleGroup4
>b3ad	f8					.byte $f8
.b3ae					Assemble_plx:
.b3ae	20 84 89	jsr $8984		jsr	AssembleGroup4
>b3b1	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b3b2					DecimalScalarTable:
>b3b2	66 66 66 66				.dword $66666666 ; 0.1
>b3b6	de					.byte $de
>b3b7	1f 85 eb 51				.dword $51eb851f ; 0.01
>b3bb	db					.byte $db
>b3bc	4c 37 89 41				.dword $4189374c ; 0.001
>b3c0	d8					.byte $d8
>b3c1	ac 8b db 68				.dword $68db8bac ; 0.0001
>b3c5	d4					.byte $d4
>b3c6	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b3ca	d1					.byte $d1
>b3cb	83 de 1b 43				.dword $431bde83 ; 1e-06
>b3cf	ce					.byte $ce
>b3d0	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b3d4	ca					.byte $ca
>b3d5	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b3d9	c7					.byte $c7
>b3da	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b3de	c4					.byte $c4
>b3df	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b3e3	c0					.byte $c0
>b3e4	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b3e8	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b3e9					SyntaxError:
.b3e9	a9 02		lda #$02		lda	#2
.b3eb	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b3ee					RangeError:
.b3ee	a9 04		lda #$04		lda	#4
.b3f0	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b3f3					TypeError:
.b3f3	a9 05		lda #$05		lda	#5
.b3f5	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b3f8					ArgumentError:
.b3f8	a9 07		lda #$07		lda	#7
.b3fa	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b3fd					NotDoneError:
.b3fd	a9 0c		lda #$0c		lda	#12
.b3ff	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b402					ErrorText:
>b402	42 72 65 61 6b 00			.text	"Break",0
>b408	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b410	72 72 6f 72 00
>b415	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b41d	20 62 79 20 7a 65 72 6f 00
>b426	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b42e	61 6e 67 65 00
>b433	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b43b	6d 61 74 63 68 00
>b441	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b449	65 6d 6f 72 79 00
>b44f	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b457	61 72 67 75 6d 65 6e 74 00
>b460	53 74 6f 70 00				.text	"Stop",0
>b465	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b46d	6f 6f 20 6c 6f 6e 67 00
>b475	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b47d	6e 20 66 61 69 6c 65 64 00
>b486	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b48e	61 74 61 00
>b492	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b49a	65 6e 74 65 64 00
>b4a0	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b4a8	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b4b4	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b4bc	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b4c9	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b4d1	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b4de	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b4e6	68 6f 75 74 20 57 68 69 6c 65 00
>b4f1	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b4f9	68 6f 75 74 20 46 6f 72 00
>b502	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b50a	61 63 6b 20 66 75 6c 6c 00
>b513	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b51b	75 63 74 75 72 65 00
>b522	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b52a	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b537	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b53f	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b54d	41 72 72 61 79 20 73 69			.text	"Array size",0
>b555	7a 65 00
>b558	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b560	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b568	42 75 69 6c 74 20 57 65			.text "Built Wednesday 26-Oct-2022. Build 2306."
>b570	64 6e 65 73 64 61 79 20 32 36 2d 4f 63 74 2d 32
>b580	30 32 32 2e 20 42 75 69 6c 64 20 32 33 30 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b590					EXTInitialise:
.b590	64 01		stz $01				stz 	1 							; Access I/O
.b592	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b595	9c 08 d0	stz $d008			stz 	$D008
.b598	9c 09 d0	stz $d009			stz 	$D009
.b59b	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b59d	8d 58 d6	sta $d658			sta 	$D658
.b5a0	60		rts				rts
.b5a1					EXTClearScreen:
.b5a1	4c ea ff	jmp $ffea			jmp 	$FFEA
.b5a4					EXTPrintCharacter:
.b5a4	48		pha				pha
.b5a5	da		phx				phx
.b5a6	5a		phy				phy
.b5a7	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b5aa	7a		ply				ply
.b5ab	fa		plx				plx
.b5ac	68		pla				pla
.b5ad	60		rts				rts
.b5ae					EXTInputSingleCharacter:
.b5ae	da		phx				phx
.b5af	5a		phy				phy
.b5b0					_EISCWait:
.b5b0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b5b3	c9 00		cmp #$00			cmp 	#0
.b5b5	f0 f9		beq $b5b0			beq 	_EISCWait
.b5b7	7a		ply				ply
.b5b8	fa		plx				plx
.b5b9	60		rts				rts
.b5ba					EXTInputLine:
.b5ba	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b5bc					_ILLoop:
.b5bc	da		phx				phx 								; read character in
.b5bd	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b5c0	fa		plx				plx
.b5c1	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b5c3	f0 12		beq $b5d7			beq 	_ILBackspace
.b5c5	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b5c7	f0 15		beq $b5de			beq 	_ILExit
.b5c9	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b5cb	90 ef		bcc $b5bc			bcc 	_ILLoop
.b5cd	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b5cf	f0 eb		beq $b5bc			beq 	_ILLoop
.b5d1	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b5d4	e8		inx				inx
.b5d5	80 e5		bra $b5bc			bra 	_ILLoop
.b5d7					_ILBackspace:
.b5d7	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b5d9	f0 e1		beq $b5bc			beq 	_ILLoop
.b5db	ca		dex				dex 								; back one.
.b5dc	80 de		bra $b5bc			bra 	_ILLoop
.b5de					_ILExit:
.b5de	20 a4 b5	jsr $b5a4			jsr 	EXTPrintCharacter
.b5e1	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b5e4	60		rts				rts
.b5e5					EXTBreakCheck:
.b5e5	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b5e8					EXTReadController:
.b5e8	da		phx				phx
.b5e9	a2 00		ldx #$00			ldx 	#0
.b5eb	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b5ed	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5f0	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b5f2	f0 04		beq $b5f8			beq 	_NoSet1
.b5f4	8a		txa				txa
.b5f5	09 01		ora #$01			ora 	#1
.b5f7	aa		tax				tax
.b5f8					_NoSet1:
.b5f8	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b5fa	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5fd	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b5ff	f0 04		beq $b605			beq 	_NoSet1
.b601	8a		txa				txa
.b602	09 02		ora #$02			ora 	#2
.b604	aa		tax				tax
.b605					_NoSet1:
.b605	a9 06		lda #$06			lda 	#(($32) >> 3)
.b607	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b60a	29 04		and #$04			and 	#($01 << (($32) & 7))
.b60c	f0 04		beq $b612			beq 	_NoSet1
.b60e	8a		txa				txa
.b60f	09 04		ora #$04			ora 	#4
.b611	aa		tax				tax
.b612					_NoSet1:
.b612	a9 04		lda #$04			lda 	#(($25) >> 3)
.b614	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b617	29 20		and #$20			and 	#($01 << (($25) & 7))
.b619	f0 04		beq $b61f			beq 	_NoSet1
.b61b	8a		txa				txa
.b61c	09 08		ora #$08			ora 	#8
.b61e	aa		tax				tax
.b61f					_NoSet1:
.b61f	a9 04		lda #$04			lda 	#(($26) >> 3)
.b621	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b624	29 40		and #$40			and 	#($01 << (($26) & 7))
.b626	f0 04		beq $b62c			beq 	_NoSet1
.b628	8a		txa				txa
.b629	09 10		ora #$10			ora 	#16
.b62b	aa		tax				tax
.b62c					_NoSet1:
.b62c	8a		txa				txa
.b62d	fa		plx				plx
.b62e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b62f					MemoryDeleteLine:
.b62f	20 4e b6	jsr $b64e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b632	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b634	a8		tay				tay
.b635					_MDDLLoop:
.b635	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b637	92 30		sta ($30)			sta 	(codePtr)
.b639	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b63b	c5 3a		cmp $3a				cmp 	zTemp2
.b63d	d0 07		bne $b646			bne 	_MDLDLNext
.b63f	a5 31		lda $31				lda 	codePtr+1
.b641	c5 3b		cmp $3b				cmp 	zTemp2+1
.b643	d0 01		bne $b646			bne 	_MDLDLNext
.b645					_MDDLExit:
.b645	60		rts				rts
.b646					_MDLDLNext:
.b646	e6 30		inc $30				inc 	codePtr						; next byte
.b648	d0 eb		bne $b635			bne 	_MDDLLoop
.b64a	e6 31		inc $31				inc 	codePtr+1
.b64c	80 e7		bra $b635			bra 	_MDDLLoop
.b64e					IMemoryFindEnd:
.b64e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b650	85 3a		sta $3a				sta 	0+zTemp2
.b652	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b654	85 3b		sta $3b				sta 	1+zTemp2
.b656					_MDLFELoop:
.b656	b2 3a		lda ($3a)			lda 	(zTemp2)
.b658	f0 0b		beq $b665			beq 	_MDLFEExit
.b65a	18		clc				clc
.b65b	65 3a		adc $3a				adc 	zTemp2
.b65d	85 3a		sta $3a				sta 	zTemp2
.b65f	90 f5		bcc $b656			bcc 	_MDLFELoop
.b661	e6 3b		inc $3b				inc 	zTemp2+1
.b663	80 f1		bra $b656			bra 	_MDLFELoop
.b665					_MDLFEExit:
.b665	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b666					MemoryInsertLine:
.b666	08		php				php
.b667	20 4e b6	jsr $b64e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b66a	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b66c	1a		inc a				inc 	a
.b66d	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b66f	b0 36		bcs $b6a7			bcs 	_MDLIError
.b671	28		plp				plp
.b672	90 08		bcc $b67c			bcc 	_MDLIFound
.b674	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b676	85 30		sta $30				sta 	codePtr
.b678	a5 3b		lda $3b				lda 	zTemp2+1
.b67a	85 31		sta $31				sta 	codePtr+1
.b67c					_MDLIFound:
.b67c	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b67f	a8		tay				tay
.b680					_MDLIInsert:
.b680	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b682	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b684	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b686	c5 3a		cmp $3a				cmp 	zTemp2
.b688	d0 06		bne $b690			bne 	_MDLINext
.b68a	a5 31		lda $31				lda 	codePtr+1
.b68c	c5 3b		cmp $3b				cmp 	zTemp2+1
.b68e	f0 0a		beq $b69a			beq 	_MDLIHaveSpace
.b690					_MDLINext:
.b690	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b692	d0 02		bne $b696			bne 	_MDLINoBorrow
.b694	c6 3b		dec $3b				dec 	zTemp2+1
.b696					_MDLINoBorrow:
.b696	c6 3a		dec $3a				dec 	zTemp2
.b698	80 e6		bra $b680			bra 	_MDLIInsert
.b69a					_MDLIHaveSpace:
.b69a	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b69d	88		dey				dey 								; from offset-1 to 0
.b69e					_MDLICopy:
.b69e	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b6a1	91 30		sta ($30),y			sta 	(codePtr),y
.b6a3	88		dey				dey
.b6a4	10 f8		bpl $b69e			bpl 	_MDLICopy
.b6a6	60		rts				rts
.b6a7					_MDLIError:
.b6a7	a9 06		lda #$06		lda	#6
.b6a9	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b6ac					MDLAppendLine:
.b6ac	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b6ae	85 36		sta $36				sta 	zTemp0
.b6b0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6b2	85 38		sta $38				sta 	0+zTemp1
.b6b4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6b6	85 39		sta $39				sta 	1+zTemp1
.b6b8	b2 38		lda ($38)			lda 	(zTemp1)
.b6ba	d0 0a		bne $b6c6			bne 	_MDLANoInitialise
.b6bc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6be	8d 6c 06	sta $066c			sta 	0+AppendPointer
.b6c1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6c3	8d 6d 06	sta $066d			sta 	1+AppendPointer
.b6c6					_MDLANoInitialise:
.b6c6	18		clc				clc
.b6c7	ad 6c 06	lda $066c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b6ca	85 38		sta $38				sta 	zTemp1
.b6cc	72 36		adc ($36)			adc 	(zTemp0)
.b6ce	8d 6c 06	sta $066c			sta 	AppendPointer
.b6d1	ad 6d 06	lda $066d			lda 	AppendPointer+1
.b6d4	85 39		sta $39				sta 	zTemp1+1
.b6d6	69 00		adc #$00			adc 	#0
.b6d8	8d 6d 06	sta $066d			sta 	AppendPointer+1
.b6db	a0 00		ldy #$00			ldy 	#0
.b6dd					_MDLACopy:
.b6dd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b6df	91 38		sta ($38),y			sta 	(zTemp1),y
.b6e1	c8		iny				iny
.b6e2	98		tya				tya
.b6e3	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b6e5	d0 f6		bne $b6dd			bne 	_MDLACopy
.b6e7	a9 00		lda #$00			lda 	#0 							; end of program.
.b6e9	91 38		sta ($38),y			sta 	(zTemp1),y
.b6eb	60		rts				rts
.066c					AppendPointer:
>066c							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a60b					MemoryNew:
.a60b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a60d	85 30		sta $30				sta 	codePtr
.a60f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a611	85 31		sta $31				sta 	codePtr+1
.a613	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a615	92 30		sta ($30)			sta 	(codePtr)
.a617	60		rts				rts
.a618					MemoryInline:
.a618	98		tya				tya 								; put address into stack,x
.a619	18		clc				clc
.a61a	65 30		adc $30				adc 	codePtr
.a61c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a61f	a5 31		lda $31				lda 	codePtr+1
.a621	69 00		adc #$00			adc 	#0
.a623	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a626	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a629	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a62c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a62d					MemorySearch:
.a62d	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a62f	86 37		stx $37				stx 	zTemp0+1
.a631	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a633	85 30		sta $30				sta 	codePtr
.a635	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a637	85 31		sta $31				sta 	codePtr+1
.a639					_MTAXLoop:
.a639	b2 30		lda ($30)			lda 	(codePtr)
.a63b	18		clc				clc
.a63c	f0 21		beq $a65f			beq 	_MTAXExit 					; reached end, exit with CC.
.a63e	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a640	b1 30		lda ($30),y			lda 	(codePtr),y
.a642	38		sec				sec
.a643	e5 36		sbc $36				sbc 	zTemp0
.a645	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a647	c8		iny				iny 								; do the MSB
.a648	b1 30		lda ($30),y			lda 	(codePtr),y
.a64a	e5 37		sbc $37				sbc 	zTemp0+1
.a64c	05 38		ora $38				ora 	zTemp1
.a64e	f0 0f		beq $a65f			beq 	_MTAXExit	 				; found
.a650	b0 0d		bcs $a65f			bcs 	_MTAXExit 					; current < required exit
.a652	18		clc				clc
.a653	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a655	65 30		adc $30				adc 	codePtr
.a657	85 30		sta $30				sta 	codePtr
.a659	90 02		bcc $a65d			bcc 	_CREExit
.a65b	e6 31		inc $31				inc 	codePtr+1
.a65d					_CREExit:
.a65d	80 da		bra $a639			bra 	_MTAXLoop
.a65f					_MTAXExit:
.a65f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a660					StackPushByte:
.a660	48		pha				pha 								; save byte
.a661	a5 34		lda $34				lda 	BasicStack
.a663	d0 09		bne $a66e			bne 	_SPBNoBorrow
.a665	c6 35		dec $35				dec 	BasicStack+1
.a667	48		pha				pha
.a668	a5 35		lda $35				lda 	BasicStack+1
.a66a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a66c	90 06		bcc $a674			bcc 	_SPBMemory
.a66e					_SPBNoBorrow:
.a66e	c6 34		dec $34				dec 	BasicStack
.a670	68		pla				pla 								; get back and write
.a671	92 34		sta ($34)			sta 	(BasicStack)
.a673	60		rts				rts
.a674					_SPBMemory:
.a674	a9 12		lda #$12		lda	#18
.a676	4c 9b 99	jmp $999b		jmp	ErrorHandler
.a679					StackPopByte:
.a679	b2 34		lda ($34)			lda 	(BasicStack)
.a67b	e6 34		inc $34				inc 	BasicStack
.a67d	d0 02		bne $a681			bne 	_SPBNoCarry
.a67f	e6 35		inc $35				inc 	BasicStack+1
.a681					_SPBNoCarry:
.a681	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a682					StackOpen:
.a682	48		pha				pha 								; save frame byte
.a683	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a685	0a		asl a				asl 	a 							; claim twice this for storage
.a686	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a688	38		sec				sec 								; so basically subtracting from
.a689	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a68b	85 34		sta $34				sta 	basicStack
.a68d	b0 08		bcs $a697			bcs 	_SONoBorrow
.a68f	c6 35		dec $35				dec 	basicStack+1
.a691	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a693	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a695	90 04		bcc $a69b			bcc 	_SOMemory
.a697					_SONoBorrow:
.a697	68		pla				pla 								; get marker back and write at TOS
.a698	92 34		sta ($34)			sta 	(basicStack)
.a69a	60		rts				rts
.a69b					_SOMemory:
.a69b	a9 12		lda #$12		lda	#18
.a69d	4c 9b 99	jmp $999b		jmp	ErrorHandler
.a6a0					StackClose:
.a6a0	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6a2	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6a4	0a		asl a				asl 	a 							; claim twice this.
.a6a5	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6a7	85 34		sta $34				sta 	basicStack
.a6a9	90 02		bcc $a6ad			bcc 	_SCExit
.a6ab	e6 35		inc $35				inc 	basicStack+1
.a6ad					_SCExit:
.a6ad	60		rts				rts
.a6ae					StackCheckFrame:
.a6ae	48		pha				pha
.a6af					_StackRemoveLocals:
.a6af	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a6b1	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a6b3	b0 05		bcs $a6ba			bcs 	_SCNoLocal
.a6b5	20 aa ad	jsr $adaa			jsr 	LocalPopValue
.a6b8	80 f5		bra $a6af			bra 	_StackRemoveLocals
.a6ba					_SCNoLocal:
.a6ba	68		pla				pla
.a6bb	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a6bd	29 f0		and #$f0			and 	#$F0 						; check type bits
.a6bf	d0 01		bne $a6c2			bne 	_SCFError 					; different, we have structures mixed up
.a6c1	60		rts				rts
.a6c2					_SCFError:
.a6c2	8a		txa				txa 								; report error X
.a6c3	4c 9b 99	jmp $999b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a6c6					STKSaveCodePosition:
.a6c6	5a		phy				phy
.a6c7	98		tya				tya 								; save Y
.a6c8	a0 05		ldy #$05			ldy 	#5
.a6ca	91 34		sta ($34),y			sta 	(basicStack),y
.a6cc	88		dey				dey 								; save Code Pointer
.a6cd					_STKSaveLoop:
.a6cd	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a6d0	91 34		sta ($34),y			sta 	(basicStack),y
.a6d2	88		dey				dey
.a6d3	d0 f8		bne $a6cd			bne 	_STKSaveLoop
.a6d5	7a		ply				ply
.a6d6	60		rts				rts
.a6d7					STKLoadCodePosition:
.a6d7	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a6d9					_STKLoadLoop:
.a6d9	b1 34		lda ($34),y			lda 	(basicStack),y
.a6db	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a6de	c8		iny				iny
.a6df	c0 05		cpy #$05			cpy 	#5
.a6e1	d0 f6		bne $a6d9			bne 	_STKLoadLoop
.a6e3	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a6e5	a8		tay				tay
.a6e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a6e7					StackReset:
.a6e7	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a6e9	85 34		sta $34				sta 	0+basicStack
.a6eb	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a6ed	85 35		sta $35				sta 	1+basicStack
.a6ef	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a6f1	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a6f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b6ec					StringConcrete:
.b6ec	5a		phy				phy 								; save position on stack
.b6ed	20 68 a2	jsr $a268			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6f0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b6f3	85 38		sta $38				sta 	zTemp1
.b6f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b6f8	85 39		sta $39				sta 	zTemp1+1
.b6fa	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b6fc					_SALength:
.b6fc	c8		iny				iny
.b6fd	b1 38		lda ($38),y			lda 	(zTemp1),y
.b6ff	d0 fb		bne $b6fc			bne 	_SALength
.b701	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b703	b0 3f		bcs $b744			bcs 	_SALengthError
.b705	98		tya				tya 				 				; length of the new string
.b706	18		clc				clc
.b707	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b709	90 02		bcc $b70d			bcc 	_SAHaveLength
.b70b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b70d					_SAHaveLength:
.b70d	48		pha				pha 								; save length.
.b70e	38		sec				sec
.b70f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b711	6d 8e 04	adc $048e			adc 	StringMemory
.b714	8d 8e 04	sta $048e			sta 	StringMemory
.b717	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b719	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b71c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b71e	6d 8f 04	adc $048f			adc 	StringMemory+1
.b721	8d 8f 04	sta $048f			sta 	StringMemory+1
.b724	85 3b		sta $3b				sta 	zTemp2+1
.b726	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b729	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b72a	38		sec				sec
.b72b	e9 03		sbc #$03			sbc 	#3
.b72d	92 3a		sta ($3a)			sta 	(zTemp2)
.b72f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b731	a0 01		ldy #$01			ldy 	#1
.b733	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b735					_SACopyNewString:
.b735	a0 00		ldy #$00			ldy 	#0
.b737					_SACopyNSLoop:
.b737	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b739	c8		iny				iny 								; write two on in string storage
.b73a	c8		iny				iny
.b73b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b73d	88		dey				dey 								; this makes it one one.
.b73e	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b740	d0 f5		bne $b737			bne 	_SACopyNSLoop
.b742	7a		ply				ply
.b743	60		rts				rts
.b744					_SALengthError:
.b744	a9 09		lda #$09		lda	#9
.b746	4c 9b 99	jmp $999b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b749					StringSystemInitialise:
.b749	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b74b	8d 8e 04	sta $048e			sta 	0+StringMemory
.b74e	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b750	8d 8f 04	sta $048f			sta 	1+StringMemory
.b753	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b756	60		rts				rts
.b757					StringSpaceInitialise:
.b757	20 68 a2	jsr $a268			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b75a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b75c	8d 90 04	sta $0490			sta 	StringInitialised
.b75f	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b762	8d 91 04	sta $0491			sta 	StringTempPointer
.b765	ad 8f 04	lda $048f			lda 	StringMemory+1
.b768	3a		dec a				dec 	a
.b769	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b76c	60		rts				rts
.b76d					StringTempAllocate:
.b76d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b76f	b0 35		bcs $b7a6			bcs 	_STALength
.b771	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b774	30 05		bmi $b77b			bmi 	_STAAllocate
.b776	48		pha				pha 								; save value to subtract.
.b777	20 57 b7	jsr $b757			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b77a	68		pla				pla 								; restore it
.b77b					_STAAllocate:
.b77b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b77d	18		clc				clc  								; deliberate allows one more
.b77e	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b781	8d 91 04	sta $0491			sta 	StringTempPointer
.b784	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b787	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b789	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b78c	69 ff		adc #$ff			adc 	#$FF
.b78e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b791	85 3d		sta $3d				sta 	zsTemp+1
.b793	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b796	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b799	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b79c	a9 10		lda #$10			lda 	#NSTString
.b79e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b7a1	a9 00		lda #$00			lda 	#0 							; clear the target string
.b7a3	92 3c		sta ($3c)			sta 	(zsTemp)
.b7a5	60		rts				rts
.b7a6					_STALength:
.b7a6	a9 09		lda #$09		lda	#9
.b7a8	4c 9b 99	jmp $999b		jmp	ErrorHandler
.b7ab					StringTempWrite:
.b7ab	48		pha				pha
.b7ac	92 3c		sta ($3c)			sta 	(zsTemp)
.b7ae	e6 3c		inc $3c				inc 	zsTemp
.b7b0	d0 02		bne $b7b4			bne 	_STWNoCarry
.b7b2	e6 3d		inc $3d				inc 	zsTemp+1
.b7b4					_STWNoCarry:
.b7b4	a9 00		lda #$00			lda 	#0
.b7b6	92 3c		sta ($3c)			sta 	(zsTemp)
.b7b8	68		pla				pla
.b7b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a6f4					BackloadProgram:
.a6f4	a2 ff		ldx #$ff			ldx 	#$FF
.a6f6	20 1e a7	jsr $a71e			jsr 	BLReadByte
.a6f9	30 1f		bmi $a71a			bmi 	_BPExit
.a6fb					_BPCopy:
.a6fb	e8		inx				inx  								; copy byte in
.a6fc	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a6ff	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a702	20 1e a7	jsr $a71e			jsr 	BLReadByte 					; read next byte
.a705	30 0a		bmi $a711			bmi 	_BPEndLine 					; -ve = EOL
.a707	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a709	d0 02		bne $a70d			bne 	_BPNotTab
.a70b	a9 20		lda #$20			lda 	#' '
.a70d					_BPNotTab:
.a70d	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a70f	b0 ea		bcs $a6fb			bcs 	_BPCopy
.a711					_BPEndLine:
.a711	20 fb aa	jsr $aafb			jsr 	TokeniseLine 				; tokenise the line.
.a714	38		sec				sec 								; append not insert
.a715	20 66 b6	jsr $b666			jsr 	MemoryInsertLine 			; append to current program
.a718	80 da		bra $a6f4			bra 	BackloadProgram
.a71a					_BPExit:
.a71a	20 fc 8b	jsr $8bfc			jsr 	ClearCommand 				; clear variables etc.
.a71d	60		rts				rts
.a71e					BLReadByte:
.a71e					_BLLoad:
.a71e	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a721	ee 1f a7	inc $a71f			inc 	_BLLoad+1
.a724	d0 03		bne $a729			bne 	_BLNoCarry
.a726	ee 20 a7	inc $a720			inc 	_BLLoad+2
.a729					_BLNoCarry:
.a729	c9 00		cmp #$00			cmp 	#0
.a72b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a72c					TokeniseSearchTable:
.a72c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a72e	85 36		sta $36				sta 	zTemp0
.a730	a0 00		ldy #$00			ldy 	#0
.a732	a9 80		lda #$80			lda 	#$80 						; token #
.a734	85 38		sta $38				sta 	zTemp1
.a736					_TSTLoop:
.a736	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a738	30 49		bmi $a783			bmi 	_TSTFail 					; -ve = end of table
.a73a	f0 2e		beq $a76a			beq 	_TSTNext 					; zero, check next it's a dummy
.a73c	c8		iny				iny 								; get the hash
.a73d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a73f	88		dey				dey
.a740	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a743	d0 25		bne $a76a			bne 	_TSTNext
.a745	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a748	38		sec				sec
.a749	ed 80 04	sbc $0480			sbc 	identStart
.a74c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a74e	d0 1a		bne $a76a			bne 	_TSTNext
.a750	5a		phy				phy 								; save Y , we might fail
.a751	c8		iny				iny 								; point to text
.a752	c8		iny				iny
.a753	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a756					_TSTCompareName:
.a756	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a759	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a75b	d0 0c		bne $a769			bne 	_TSTNextPullY 				; fail, pullY and do next
.a75d	e8		inx				inx
.a75e	c8		iny				iny
.a75f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a762	d0 f2		bne $a756			bne 	_TSTCompareName
.a764	7a		ply				ply 								; throw Y
.a765	a5 38		lda $38				lda 	zTemp1 						; get token #
.a767	38		sec				sec 								; return with CS = passed.
.a768	60		rts				rts
.a769					_TSTNextPullY:
.a769	7a		ply				ply 								; restore current, fall through.
.a76a					_TSTNext:
.a76a	e6 38		inc $38				inc 	zTemp1 						; token counter
.a76c	98		tya				tya
.a76d	18		clc				clc
.a76e	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a770	1a		inc a				inc 	a 							; +1
.a771	1a		inc a				inc 	a 							; +2
.a772	a8		tay				tay
.a773	10 c1		bpl $a736			bpl 	_TSTLoop 					; if Y < $80 loop back
.a775	98		tya				tya 								; add Y to zTemp0 and reset Y
.a776	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a778	18		clc				clc  								; but have tables > 255 bytes
.a779	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a77b	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a77d	90 b7		bcc $a736			bcc 	_TSTLoop
.a77f	e6 37		inc $37				inc 	zTemp0+1
.a781	80 b3		bra $a736			bra 	_TSTLoop
.a783					_TSTFail:
.a783	18		clc				clc
.a784	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a785					KeywordSet0:
>a785	00 65					.text	0,$65,""               ; $80 !0:EOF
>a787	00 58					.text	0,$58,""               ; $81 !1:SH1
>a789	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a78b	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a791	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a799	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a79f	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a7a6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a7ae	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a7b5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a7bc	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a7c2	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a7c8	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a7d0	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a7d7	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a7de	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a7e5	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a7ed	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a7f3	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a7f9	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a800	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a806	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a80c	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a814	28
>a815	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a81d	28
>a81e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a824	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a82a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a830	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a837	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a83f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a845	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a84b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a850	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a854	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a85a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a862	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a869	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a870	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a878	43
>a879	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a87f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a885	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a88c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a892	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a896	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a89c	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a8a4	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a8ab	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a8b0	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a8b7	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a8bf	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a8c5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a8ca	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a8d2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a8d8	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a8de	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a8e3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a8ea	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a8f0	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a8f6	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a8fd	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a902	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a908	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a90f	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a914	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a918	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a920	45
>a921	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c1 PLOT
>a927	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c2 PRINT
>a92e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c3 READ
>a934	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c4 RECT
>a93a	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c5 REM
>a93f	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c6 RETURN
>a947	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c7 SOLID
>a94e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c8 SPRITE
>a956	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c9 TEXT
>a95c	02 a3 54 4f				.text	2,$a3,"TO"             ; $ca TO
>a960	ff					.text	$FF
.a961					KeywordSet1:
>a961	00 65					.text	0,$65,""               ; $80 !0:EOF
>a963	00 58					.text	0,$58,""               ; $81 !1:SH1
>a965	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a967	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a96f	4c 45
>a971	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a979	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a981	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a986	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a98c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a991	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a999	45
>a99a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a99f	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a9a7	53
>a9a8	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a9ae	ff					.text	$FF
.a9af					KeywordSet2:
>a9af	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9b1	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9b3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9b5	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a9ba	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a9bf	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a9c4	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a9c9	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a9ce	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a9d3	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a9d8	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a9dd	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a9e2	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a9e7	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a9ec	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a9f1	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a9f6	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a9fb	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>aa00	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>aa05	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>aa0a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>aa0f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aa14	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aa19	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aa1e	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aa23	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aa28	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aa2d	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aa32	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aa37	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aa3c	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aa41	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aa46	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aa4b	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aa50	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aa55	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aa5a	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aa5f	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aa64	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aa69	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>aa6e	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>aa73	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>aa78	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>aa7d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>aa82	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa87	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa8c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa91	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa96	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aa9b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aaa0	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aaa5	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aaaa	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aaaf	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aab4	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aab9	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aabe	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aac3	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aac8	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aacd	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aad2	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aad7	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aadc	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aae1	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aae6	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aaeb	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aaf0	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aaf5	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>aafa	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.aafb					TokeniseLine:
.aafb	20 83 ac	jsr $ac83			jsr 	FixLineBufferCase 			; fix line case
.aafe	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ab00	8d a7 04	sta $04a7			sta 	tokenOffset
.ab03	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ab06	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ab09	a2 ff		ldx #$ff			ldx 	#$FF
.ab0b					_TKFindFirst:
.ab0b	e8		inx				inx
.ab0c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ab0f	f0 79		beq $ab8a			beq 	_TKExit
.ab11	c9 20		cmp #$20			cmp 	#' '
.ab13	90 f6		bcc $ab0b			bcc 	_TKFindFirst
.ab15	c9 30		cmp #$30			cmp 	#'0'
.ab17	90 07		bcc $ab20			bcc 	_TKNoLineNumber
.ab19	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab1b	b0 03		bcs $ab20			bcs 	_TKNoLineNumber
.ab1d	20 ad ac	jsr $acad			jsr 	TokeniseExtractLineNumber
.ab20					_TKNoLineNumber:
.ab20					_TKTokeniseLoop:
.ab20	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ab23	f0 65		beq $ab8a			beq 	_TKExit
.ab25	e8		inx				inx
.ab26	c9 20		cmp #$20			cmp 	#' '
.ab28	f0 f6		beq $ab20			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ab2a	ca		dex				dex 								; undo last get, A contains character, X is position.
.ab2b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ab2d	f0 61		beq $ab90			beq 	_TKTokeniseIdentifier
.ab2f	c9 41		cmp #$41			cmp 	#'A'
.ab31	90 04		bcc $ab37			bcc 	_TKTokenisePunctuation
.ab33	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ab35	90 59		bcc $ab90			bcc 	_TKTokeniseIdentifier
.ab37					_TKTokenisePunctuation:
.ab37	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ab39	f0 27		beq $ab62			beq 	_TKString
.ab3b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ab3d	f0 28		beq $ab67			beq 	_TKHexConstant
.ab3f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ab41	f0 29		beq $ab6c			beq 	_TKCheckDouble
.ab43	c9 3e		cmp #$3e			cmp 	#'>'
.ab45	f0 25		beq $ab6c			beq 	_TKCheckDouble
.ab47					_TKStandardPunctuation:
.ab47	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ab4a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ab4c	90 0e		bcc $ab5c			bcc 	_TKNoShift
.ab4e	48		pha				pha 								; save
.ab4f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ab51	85 36		sta $36				sta 	zTemp0
.ab53	68		pla				pla
.ab54	29 20		and #$20			and 	#32 						; bit 5
.ab56	4a		lsr a				lsr 	a 							; shift into bit 3
.ab57	4a		lsr a				lsr 	a
.ab58	05 36		ora $36				ora 	zTemp0
.ab5a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ab5c					_TKNoShift:
.ab5c	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte 			; write the punctuation character
.ab5f	e8		inx				inx 								; consume the character
.ab60	80 be		bra $ab20			bra 	_TKTokeniseLoop 			; and loop round again.
.ab62					_TKString:
.ab62	20 12 ac	jsr $ac12			jsr 	TokeniseString
.ab65	80 b9		bra $ab20			bra 	_TKTokeniseLoop
.ab67					_TKHexConstant:
.ab67	20 4d ac	jsr $ac4d			jsr 	TokeniseHexConstant
.ab6a	80 b4		bra $ab20			bra 	_TKTokeniseLoop
.ab6c					_TKCheckDouble:
.ab6c	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.ab6f	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.ab71	90 d4		bcc $ab47			bcc 	_TKStandardPunctuation
.ab73	c9 3f		cmp #$3f			cmp 	#'>'+1
.ab75	b0 d0		bcs $ab47			bcs 	_TKStandardPunctuation
.ab77	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.ab7a	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.ab7c	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.ab7d	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.ab80	38		sec				sec
.ab81	e9 3c		sbc #$3c			sbc 	#'<'
.ab83	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab86	e8		inx				inx 								; consume both
.ab87	e8		inx				inx
.ab88	80 96		bra $ab20			bra 	_TKTokeniseLoop
.ab8a	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab8c	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ab8f	60		rts				rts
.ab90					_TKTokeniseIdentifier:
.ab90	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab93	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab96					_TKCheckLoop:
.ab96	e8		inx				inx 								; look at next, we know first is identifier.
.ab97	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.ab9a	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ab9c	f0 f8		beq $ab96			beq 	_TKCheckLoop
.ab9e	c9 30		cmp #$30			cmp	 	#"0"
.aba0	90 0c		bcc $abae			bcc 	_TKEndIdentifier
.aba2	c9 3a		cmp #$3a			cmp 	#"9"+1
.aba4	90 f0		bcc $ab96			bcc 	_TKCheckLoop
.aba6	c9 41		cmp #$41			cmp	 	#"A"
.aba8	90 04		bcc $abae			bcc 	_TKEndIdentifier
.abaa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.abac	90 e8		bcc $ab96			bcc 	_TKCheckLoop
.abae					_TKEndIdentifier:
.abae	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.abb1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.abb3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.abb5	f0 06		beq $abbd			beq 	_TKHasTypeCharacter
.abb7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.abb9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.abbb	d0 07		bne $abc4			bne 	_TKNoTypeCharacter
.abbd					_TKHasTypeCharacter:
.abbd	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.abc0	e8		inx				inx 								; read next
.abc1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.abc4					_TKNoTypeCharacter:
.abc4	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.abc6	d0 09		bne $abd1			bne 	_TKNoArray
.abc8	e8		inx				inx 								; skip the (
.abc9	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.abcc	09 04		ora #$04			ora 	#$04
.abce	8d 84 04	sta $0484			sta 	identTypeByte
.abd1					_TKNoArray:
.abd1	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.abd4	20 6e ac	jsr $ac6e			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.abd7	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.abd9	a9 85		lda #$85			lda 	#(KeywordSet0) & $FF
.abdb	20 2c a7	jsr $a72c			jsr 	TokeniseSearchTable
.abde	a2 00		ldx #$00			ldx 	#0
.abe0	b0 1f		bcs $ac01			bcs 	_TKFoundToken
.abe2	a0 a9		ldy #$a9			ldy 	#(KeywordSet1) >> 8
.abe4	a9 61		lda #$61			lda 	#(KeywordSet1) & $FF
.abe6	20 2c a7	jsr $a72c			jsr 	TokeniseSearchTable
.abe9	a2 81		ldx #$81			ldx 	#$81
.abeb	b0 14		bcs $ac01			bcs 	_TKFoundToken
.abed	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.abef	a9 af		lda #$af			lda 	#(KeywordSet2) & $FF
.abf1	20 2c a7	jsr $a72c			jsr 	TokeniseSearchTable
.abf4	a2 82		ldx #$82			ldx 	#$82
.abf6	b0 09		bcs $ac01			bcs 	_TKFoundToken
.abf8	20 fe ac	jsr $acfe			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.abfb	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.abfe	4c 20 ab	jmp $ab20			jmp 	_TKTokeniseLoop 			; and go round again.
.ac01					_TKFoundToken:
.ac01	48		pha				pha 								; save token
.ac02	8a		txa				txa 								; shift in X, is there one ?
.ac03	f0 03		beq $ac08			beq 	_TKNoTShift
.ac05	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte 			; if so, write it out
.ac08					_TKNoTShift:
.ac08	68		pla				pla 								; restore and write token
.ac09	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac0c	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac0f	4c 20 ab	jmp $ab20			jmp 	_TKTokeniseLoop 			; and go round again.
.ac12					TokeniseString:
.ac12	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ac14	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac17	e8		inx				inx									; start of quoted string.
.ac18	da		phx				phx 								; push start of string on top
.ac19	ca		dex				dex
.ac1a					_TSFindEnd:
.ac1a	e8		inx				inx
.ac1b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ac1e	f0 04		beq $ac24			beq 	_TSEndOfString
.ac20	c9 22		cmp #$22			cmp 	#'"'
.ac22	d0 f6		bne $ac1a			bne 	_TSFindEnd
.ac24					_TSEndOfString:
.ac24	7a		ply				ply  								; so now Y is first character, X is character after end.
.ac25	48		pha				pha 								; save terminating character
.ac26	20 2e ac	jsr $ac2e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ac29	68		pla				pla 								; terminating character
.ac2a	f0 01		beq $ac2d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ac2c	e8		inx				inx
.ac2d					_TSNotQuote:
.ac2d	60		rts				rts
.ac2e					TOWriteBlockXY:
.ac2e	86 36		stx $36				stx 	zTemp0 						; write end character
.ac30	98		tya				tya
.ac31	49 ff		eor #$ff			eor 	#$FF
.ac33	38		sec				sec
.ac34	65 36		adc $36				adc 	zTemp0
.ac36	1a		inc a				inc 	a 							; one extra for NULL
.ac37	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac3a					_TOBlockLoop:
.ac3a	c4 36		cpy $36				cpy 	zTemp0
.ac3c	f0 09		beq $ac47			beq 	_TOBlockExit
.ac3e	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ac41	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac44	c8		iny				iny
.ac45	80 f3		bra $ac3a			bra 	_TOBlockLoop
.ac47					_TOBlockExit:
.ac47	a9 00		lda #$00			lda 	#0
.ac49	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac4c	60		rts				rts
.ac4d					TokeniseHexConstant:
.ac4d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ac4f	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ac52	e8		inx				inx									; start of quoted string.
.ac53	da		phx				phx 								; push start of constant on top
.ac54	ca		dex				dex
.ac55					_THFindLoop:
.ac55	e8		inx				inx
.ac56	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac59	c9 30		cmp #$30			cmp 	#"0"
.ac5b	90 0c		bcc $ac69			bcc 	_THFoundEnd
.ac5d	c9 3a		cmp #$3a			cmp 	#"9"+1
.ac5f	90 f4		bcc $ac55			bcc 	_THFindLoop
.ac61	c9 41		cmp #$41			cmp 	#"A"
.ac63	90 04		bcc $ac69			bcc 	_THFoundEnd
.ac65	c9 47		cmp #$47			cmp 	#"F"+1
.ac67	90 ec		bcc $ac55			bcc 	_THFindLoop
.ac69					_THFoundEnd:
.ac69	7a		ply				ply 								; restore start
.ac6a	20 2e ac	jsr $ac2e			jsr 	TOWriteBlockXY 				; output the block
.ac6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ac6e					TokeniseCalculateHash:
.ac6e	da		phx				phx
.ac6f	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ac72	a9 00		lda #$00			lda 	#0
.ac74					_TCHLoop:
.ac74	18		clc				clc
.ac75	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.ac78	e8		inx				inx
.ac79	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ac7c	d0 f6		bne $ac74			bne 	_TCHLoop
.ac7e	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ac81	fa		plx				plx
.ac82	60		rts				rts
.ac83					FixLineBufferCase:
.ac83	a2 00		ldx #$00			ldx 	#0
.ac85					_FLBCLoop:
.ac85	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ac88	f0 22		beq $acac			beq 	_FLBCExit 					; end of string.
.ac8a	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac8c	f0 11		beq $ac9f			beq 	_FLBCInQuotes
.ac8e	e8		inx				inx
.ac8f	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac91	90 f2		bcc $ac85			bcc 	_FLBCLoop
.ac93	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac95	b0 ee		bcs $ac85			bcs 	_FLBCLoop
.ac97	38		sec				sec 								; make U/C
.ac98	e9 20		sbc #$20			sbc 	#32
.ac9a	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ac9d	80 e6		bra $ac85			bra 	_FLBCLoop
.ac9f					_FLBCInQuotes:
.ac9f	e8		inx				inx 								; advance
.aca0	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.aca3	f0 07		beq $acac			beq 	_FLBCExit 					; exit on EOS
.aca5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.aca7	d0 f6		bne $ac9f			bne 	_FLBCInQuotes
.aca9	e8		inx				inx 								; skip over it
.acaa	80 d9		bra $ac85			bra 	_FLBCLoop
.acac					_FLBCExit:
.acac	60		rts				rts
.acad					TokeniseExtractLineNumber:
.acad	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.acb0	48		pha				pha
.acb1	ad a8 04	lda $04a8			lda 	tokenLineNumber
.acb4	48		pha				pha
.acb5	20 eb ac	jsr $aceb			jsr 	_TELNTimes2 				; line # x 4
.acb8	20 eb ac	jsr $aceb			jsr 	_TELNTimes2 				; line # x 2
.acbb	18		clc				clc 								; add stacked value
.acbc	68		pla				pla
.acbd	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acc0	8d a8 04	sta $04a8			sta 	tokenLineNumber
.acc3	68		pla				pla
.acc4	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.acc7	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.acca	20 eb ac	jsr $aceb			jsr 	_TELNTimes2 				; line # x 10
.accd	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.acd0	e8		inx				inx
.acd1	29 0f		and #$0f			and 	#15 						; add to line #
.acd3	18		clc				clc
.acd4	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acd7	8d a8 04	sta $04a8			sta 	tokenLineNumber
.acda	90 03		bcc $acdf			bcc 	_TLENNoCarry
.acdc	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.acdf					_TLENNoCarry:
.acdf	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ace2	c9 30		cmp #$30			cmp 	#'0'
.ace4	90 04		bcc $acea			bcc 	_TLENExit
.ace6	c9 3a		cmp #$3a			cmp 	#'9'+1
.ace8	90 c3		bcc $acad			bcc 	TokeniseExtractLineNumber
.acea					_TLENExit:
.acea	60		rts				rts
.aceb					_TELNTimes2:
.aceb	0e a8 04	asl $04a8			asl 	tokenLineNumber
.acee	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.acf1	60		rts				rts
.acf2					TokeniseWriteByte:
.acf2	da		phx				phx
.acf3	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.acf6	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.acf9	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.acfc	fa		plx				plx
.acfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.acfe					CheckCreateVariableRecord:
.acfe	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ad00	85 36		sta $36				sta 	0+zTemp0
.ad02	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ad04	85 37		sta $37				sta 	1+zTemp0
.ad06					_CCVSearch:
.ad06	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ad08	f0 2c		beq $ad36			beq 	_CCVFail
.ad0a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ad0c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ad0e	cd 83 04	cmp $0483			cmp 	identHash
.ad11	d0 16		bne $ad29			bne 	_CCVNext
.ad13	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ad15	ae 80 04	ldx $0480			ldx 	identStart
.ad18					_CCVCompare:
.ad18	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ad1b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ad1d	e8		inx				inx 								; advance pointers
.ad1e	c8		iny				iny
.ad1f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ad20	d0 07		bne $ad29			bne 	_CCVNext  					; didn't match go to next.
.ad22	90 f4		bcc $ad18			bcc 	_CCVCompare 				; not finished yet.
.ad24	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ad27	f0 41		beq $ad6a			beq 	_CCVFound 					; yes, we were successful
.ad29					_CCVNext:
.ad29	18		clc				clc
.ad2a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ad2c	65 36		adc $36				adc 	zTemp0
.ad2e	85 36		sta $36				sta 	zTemp0
.ad30	90 d4		bcc $ad06			bcc 	_CCVSearch
.ad32	e6 37		inc $37				inc 	zTemp0+1
.ad34	80 d0		bra $ad06			bra 	_CCVSearch
.ad36					_CCVFail:
.ad36	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ad38	ad 83 04	lda $0483			lda 	identHash
.ad3b	91 36		sta ($36),y			sta 	(zTemp0),y
.ad3d	c8		iny				iny 								; offset 2 is the type byte
.ad3e	ad 84 04	lda $0484			lda 	identTypeByte
.ad41	91 36		sta ($36),y			sta 	(zTemp0),y
.ad43	c8		iny				iny
.ad44					_CCVData:
.ad44	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ad46	91 36		sta ($36),y			sta 	(zTemp0),y
.ad48	c8		iny				iny
.ad49	c0 08		cpy #$08			cpy 	#8
.ad4b	90 f7		bcc $ad44			bcc 	_CCVData
.ad4d	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ad50					_CCVCopyName:
.ad50	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad53	91 36		sta ($36),y			sta 	(zTemp0),y
.ad55	e8		inx				inx
.ad56	c8		iny				iny
.ad57	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ad5a	d0 f4		bne $ad50			bne 	_CCVCopyName
.ad5c	98		tya				tya 								; patch offset
.ad5d	92 36		sta ($36)			sta 	(zTemp0)
.ad5f	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ad61	91 36		sta ($36),y			sta 	(zTemp0),y
.ad63	88		dey				dey
.ad64	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ad66	09 80		ora #$80			ora 	#$80
.ad68	91 36		sta ($36),y			sta 	(zTemp0),y
.ad6a					_CCVFound:
.ad6a	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ad6c	38		sec				sec
.ad6d	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ad6f	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ad71	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ad74	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ad76	20 f2 ac	jsr $acf2			jsr 	TokeniseWriteByte
.ad79	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
