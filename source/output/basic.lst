
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 16:45:19 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 dc 83	jsr $83dc			jsr 	NewCommand 					; erase current program
.8006	20 4e 91	jsr $914e			jsr 	BackloadProgram
.8009	4c 9d 84	jmp $849d			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	8f 87					.word	ShiftLeft                        ; $00 <<
>8016	89 86					.word	BinaryCompareLessEqual           ; $01 <=
>8018	7f 86					.word	BinaryCompareNotEqual            ; $02 <>
>801a	27 9b					.word	SyntaxError                      ; $03 !!3
>801c	27 9b					.word	SyntaxError                      ; $04 ><
>801e	93 86					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	92 87					.word	ShiftRight                       ; $06 >>
>8022	27 9b					.word	SyntaxError                      ; $07 !!7
>8024	27 9b					.word	SyntaxError                      ; $08 !!8
>8026	27 9b					.word	SyntaxError                      ; $09 !!9
>8028	27 9b					.word	SyntaxError                      ; $0a !!10
>802a	27 9b					.word	SyntaxError                      ; $0b !!11
>802c	27 9b					.word	SyntaxError                      ; $0c !!12
>802e	27 9b					.word	SyntaxError                      ; $0d !!13
>8030	27 9b					.word	SyntaxError                      ; $0e !!14
>8032	27 9b					.word	SyntaxError                      ; $0f !!15
>8034	27 9b					.word	SyntaxError                      ; $10 @
>8036	27 9b					.word	SyntaxError                      ; $11 !!17
>8038	27 9b					.word	SyntaxError                      ; $12 !!18
>803a	27 9b					.word	SyntaxError                      ; $13 [
>803c	70 96					.word	IntegerDivide                    ; $14 \
>803e	27 9b					.word	SyntaxError                      ; $15 ]
>8040	18 89					.word	EorInteger                       ; $16 ^
>8042	27 9b					.word	SyntaxError                      ; $17 _
>8044	27 9b					.word	SyntaxError                      ; $18 `
>8046	27 9b					.word	SyntaxError                      ; $19 !!25
>8048	27 9b					.word	SyntaxError                      ; $1a !!26
>804a	27 9b					.word	SyntaxError                      ; $1b {
>804c	d2 88					.word	OraInteger                       ; $1c |
>804e	27 9b					.word	SyntaxError                      ; $1d }
>8050	27 9b					.word	SyntaxError                      ; $1e ~
>8052	27 9b					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	27 9b					.word	SyntaxError                      ; $20
>8056	5e 89					.word	WordIndirect                     ; $21 !
>8058	27 9b					.word	SyntaxError                      ; $22 "
>805a	27 9b					.word	SyntaxError                      ; $23 #
>805c	27 9b					.word	SyntaxError                      ; $24 $
>805e	bd 96					.word	IntegerModulus                   ; $25 %
>8060	8c 88					.word	AndInteger                       ; $26 &
>8062	27 9b					.word	SyntaxError                      ; $27 '
>8064	27 9b					.word	SyntaxError                      ; $28 (
>8066	27 9b					.word	SyntaxError                      ; $29 )
>8068	32 97					.word	MulInteger                       ; $2a *
>806a	26 88					.word	AddInteger                       ; $2b +
>806c	27 9b					.word	SyntaxError                      ; $2c ,
>806e	61 88					.word	SubInteger                       ; $2d -
>8070	27 9b					.word	SyntaxError                      ; $2e .
>8072	c9 98					.word	FDivideCommand                   ; $2f /
>8074	27 9b					.word	SyntaxError                      ; $30 0
>8076	27 9b					.word	SyntaxError                      ; $31 1
>8078	27 9b					.word	SyntaxError                      ; $32 2
>807a	27 9b					.word	SyntaxError                      ; $33 3
>807c	27 9b					.word	SyntaxError                      ; $34 4
>807e	27 9b					.word	SyntaxError                      ; $35 5
>8080	27 9b					.word	SyntaxError                      ; $36 6
>8082	27 9b					.word	SyntaxError                      ; $37 7
>8084	27 9b					.word	SyntaxError                      ; $38 8
>8086	27 9b					.word	SyntaxError                      ; $39 9
>8088	27 9b					.word	SyntaxError                      ; $3a :
>808a	27 9b					.word	SyntaxError                      ; $3b ;
>808c	6b 86					.word	BinaryCompareLess                ; $3c <
>808e	61 86					.word	BinaryCompareEqual               ; $3d =
>8090	75 86					.word	BinaryCompareGreater             ; $3e >
>8092	85 89					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	f2 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	ff 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	27 9b					.word	SyntaxError                      ; $82 !2:SH2
>809a	0f 9a					.word	AbsUnary                         ; $83 ABS(
>809c	c8 8d					.word	AllocUnary                       ; $84 ALLOC(
>809e	1f 9a					.word	AscUnary                         ; $85 ASC(
>80a0	83 8e					.word	ChrUnary                         ; $86 CHR$(
>80a2	5d 86					.word	UnaryFalse                       ; $87 FALSE
>80a4	2c 9a					.word	FracUnary                        ; $88 FRAC(
>80a6	42 9a					.word	IntUnary                         ; $89 INT(
>80a8	98 9a					.word	IsValUnary                       ; $8a ISVAL(
>80aa	5d 8f					.word	Unary_Left                       ; $8b LEFT$(
>80ac	54 9a					.word	LenUnary                         ; $8c LEN(
>80ae	87 8f					.word	Unary_Mid                        ; $8d MID$(
>80b0	20 8e					.word	Unary_Not                        ; $8e NOT(
>80b2	6d 8f					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	36 8e					.word	Unary_Rnd                        ; $90 RND(
>80b6	6e 9a					.word	SgnUnary                         ; $91 SGN(
>80b8	95 8e					.word	SpcUnary                         ; $92 SPC(
>80ba	b0 8e					.word	Unary_Str                        ; $93 STR$(
>80bc	51 86					.word	UnaryTrue                        ; $94 TRUE
>80be	8e 9a					.word	ValUnary                         ; $95 VAL(
>80c0	35 82					.word	ForCommand                       ; $96 FOR
>80c2	79 83					.word	IfCommand                        ; $97 IF
>80c4	07 85					.word	Unused1                          ; $98 PROC
>80c6	7b 84					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	b6 85					.word	Command_WHILE                    ; $9a WHILE
>80ca	a2 83					.word	EndIf                            ; $9b ENDIF
>80cc	49 96					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	ef 82					.word	NextCommand                      ; $9d NEXT
>80d0	27 9b					.word	SyntaxError                      ; $9e THEN
>80d2	84 84					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	d7 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	27 9b					.word	SyntaxError                      ; $a2 CLS
>80da	27 9b					.word	SyntaxError                      ; $a3 DATA
>80dc	75 81					.word	DimCommand                       ; $a4 DIM
>80de	07 85					.word	Unused3                          ; $a5 DOWNTO
>80e0	9b 83					.word	ElseCode                         ; $a6 ELSE
>80e2	48 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	66 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	a3 83					.word	LetCommand                       ; $a9 LET
>80e8	e6 83					.word	Command_Print                    ; $aa PRINT
>80ea	27 9b					.word	SyntaxError                      ; $ab READ
>80ec	6e 84					.word	RemCommand                       ; $ac REM
>80ee	58 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	07 85					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	27 9b					.word	SyntaxError                      ; $80 !0:EOF
>80f4	27 9b					.word	SyntaxError                      ; $81 !1:SH1
>80f6	27 9b					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	32 82					.word	EndCommand                       ; $85 END
>80fe	27 9b					.word	SyntaxError                      ; $86 LIST
>8100	dc 83					.word	NewCommand                       ; $87 NEW
>8102	27 9b					.word	SyntaxError                      ; $88 RESTORE
>8104	9d 84					.word	CommandRUN                       ; $89 RUN
>8106	27 9b					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	27 9b					.word	SyntaxError                      ; $80 !0:EOF
>810a	27 9b					.word	SyntaxError                      ; $81 !1:SH1
>810c	27 9b					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 28 90	jsr $9028			jsr 	EvaluateInteger 			; the assert test
.8113	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c e5 85	jmp $85e5		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 3d 90	jsr $903d			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 41 91	jsr $9141			jsr 	StackReset
.816e	20 f0 9c	jsr $9cf0			jsr 	StringSystemInitialise
.8171	20 0a 85	jsr $850a			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8175					DimCommand:
.8175	b1 30		lda ($30),y			lda 	(codePtr),y
.8177	29 c0		and #$c0			and 	#$C0
.8179	c9 40		cmp #$40			cmp 	#$40
.817b	d0 7a		bne $81f7			bne 	_DCSyntax
.817d	b1 30		lda ($30),y			lda 	(codePtr),y
.817f	18		clc				clc
.8180	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8182	85 3f		sta $3f				sta 	zaTemp+1
.8184	c8		iny				iny
.8185	b1 30		lda ($30),y			lda 	(codePtr),y
.8187	c8		iny				iny
.8188	85 3e		sta $3e				sta 	zaTemp
.818a	5a		phy				phy
.818b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.818d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.818f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8191	c9 18		cmp #$18			cmp 	#NSTProcedure
.8193	f0 62		beq $81f7			beq 	_DCSyntax
.8195	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8197	29 04		and #$04			and 	#NSBIsArray
.8199	f0 64		beq $81ff			beq 	_DCType
.819b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.819d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819f	d0 59		bne $81fa			bne 	_DCRedefine
.81a1	7a		ply				ply
.81a2	20 02 82	jsr $8202			jsr 	_DCGetSize 				; get array size, check it.
.81a5	5a		phy				phy
.81a6	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81a8	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81aa	7a		ply				ply 							; is there a second (e.g. ,x)
.81ab	b1 30		lda ($30),y			lda 	(codePtr),y
.81ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81af	d0 0a		bne $81bb			bne 	_DCOneDimension
.81b1	c8		iny				iny 							; skip comma
.81b2	20 02 82	jsr $8202			jsr 	_DCGetSize 				; get 2nd array size
.81b5	5a		phy				phy
.81b6	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81b8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ba	7a		ply				ply
.81bb					_DCOneDimension:
.81bb	5a		phy				phy 							; save position
.81bc	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81be	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c0	aa		tax				tax
.81c1	c8		iny				iny
.81c2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c4	e8		inx				inx 							; bump them.
.81c5	1a		inc a				inc 	a
.81c6	20 d9 9a	jsr $9ad9			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81c9	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81cb	29 e0		and #$e0			and 	#$E0
.81cd	d0 23		bne $81f2			bne 	_DCSize
.81cf	a0 02		ldy #$02			ldy 	#2 						; get base type
.81d1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81d3	20 10 82	jsr $8210			jsr 	ScaleByBaseType 		; scale by base type
.81d6	a5 36		lda $36				lda 	zTemp0
.81d8	a6 37		ldx $37				ldx 	zTemp0+1
.81da	20 e7 8d	jsr $8de7			jsr 	AllocateXABytes 		; allocate memory
.81dd	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81df	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e1	c8		iny				iny
.81e2	8a		txa				txa
.81e3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e5	7a		ply				ply 							; get position back
.81e6	20 57 96	jsr $9657			jsr 	CheckRightBracket 		; check )
.81e9	b1 30		lda ($30),y			lda 	(codePtr),y
.81eb	c8		iny				iny 							; consume in case
.81ec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81ee	f0 85		beq $8175			beq 	DimCommand
.81f0	88		dey				dey 							; undo consume
.81f1	60		rts				rts
.81f2					_DCSize:
.81f2	a9 16		lda #$16		lda	#22
.81f4	4c e5 85	jmp $85e5		jmp	ErrorHandler
.81f7					_DCSyntax:
.81f7	4c 27 9b	jmp $9b27			jmp 	SyntaxError
.81fa					_DCRedefine:
.81fa	a9 15		lda #$15		lda	#21
.81fc	4c e5 85	jmp $85e5		jmp	ErrorHandler
.81ff					_DCType:
.81ff	4c 31 9b	jmp $9b31			jmp 	TypeError
.8202					_DCGetSize:
.8202	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8204	20 49 90	jsr $9049			jsr 	Evaluate8BitInteger 	; get array dimension
.8207	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8209	f0 e7		beq $81f2			beq 	_DCSize
.820b	c9 fe		cmp #$fe			cmp 	#254
.820d	f0 e3		beq $81f2			beq 	_DCSize
.820f	60		rts				rts
.8210					ScaleByBaseType:
.8210	29 10		and #$10			and 	#NSBIsString 			; is it string
.8212	d0 19		bne $822d			bne 	_SBBTString
.8214	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8216	48		pha				pha
.8217	a5 36		lda $36				lda 	zTemp0
.8219	48		pha				pha
.821a	06 36		asl $36				asl 	zTemp0 					; x 2
.821c	26 37		rol $37				rol 	zTemp0+1
.821e	06 36		asl $36				asl 	zTemp0 					; x 4
.8220	26 37		rol $37				rol 	zTemp0+1
.8222	68		pla				pla 							; add stacked value = x 5
.8223	65 36		adc $36				adc 	zTemp0
.8225	85 36		sta $36				sta 	zTemp0
.8227	68		pla				pla
.8228	65 37		adc $37				adc 	zTemp0+1
.822a	85 37		sta $37				sta 	zTemp0+1
.822c	60		rts				rts
.822d					_SBBTString:
.822d	06 36		asl $36				asl 	zTemp0
.822f	26 37		rol $37				rol 	zTemp0+1
.8231	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8232					EndCommand:
.8232	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8235					ForCommand:
.8235	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8237	20 ee 90	jsr $90ee			jsr 	StackOpen
.823a	a2 00		ldx #$00			ldx 	#0
.823c	20 bf 8c	jsr $8cbf			jsr 	EvaluateTerm
.823f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8242	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8244	d0 49		bne $828f			bne		_FCError
.8246	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8248	20 67 96	jsr $9667			jsr 	CheckNextA
.824b	e8		inx				inx
.824c	20 28 90	jsr $9028			jsr 	EvaluateInteger 			; <from> in +1
.824f	b1 30		lda ($30),y			lda 	(codePtr),y
.8251	c8		iny				iny 								; consume it
.8252	48		pha				pha 								; save on stack for later
.8253	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8255	f0 04		beq $825b			beq 	_FCNoSyntax
.8257	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8259	d0 37		bne $8292			bne 	_FCSyntaxError
.825b					_FCNoSyntax:
.825b	e8		inx				inx
.825c	20 28 90	jsr $9028			jsr 	EvaluateInteger
.825f	20 20 91	jsr $9120			jsr 	STKSaveCodePosition 		; save loop back position
.8262	68		pla				pla 								; restore DOWNTO or TO
.8263	5a		phy				phy 								; save Y on the stack
.8264	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8266	f0 02		beq $826a			beq 	_FCNotDownTo
.8268	a9 02		lda #$02			lda 	#2
.826a					_FCNotDownTo:
.826a	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.826b	a0 10		ldy #$10			ldy 	#16
.826d	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.826f	a0 06		ldy #$06			ldy 	#6
.8271	ad 08 06	lda $0608			lda 	NSMantissa0
.8274	91 34		sta ($34),y			sta 	(basicStack),y
.8276	ad 10 06	lda $0610			lda 	NSMantissa1
.8279	c8		iny				iny
.827a	91 34		sta ($34),y			sta 	(basicStack),y
.827c	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.827e	a2 01		ldx #$01			ldx 	#1
.8280	20 95 82	jsr $8295			jsr 	FCIntegerToStack
.8283	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8285	a2 02		ldx #$02			ldx 	#2
.8287	20 95 82	jsr $8295			jsr 	FCIntegerToStack
.828a	20 b5 82	jsr $82b5			jsr 	CopyIndexToReference
.828d	7a		ply				ply 								; restore position
.828e	60		rts				rts
.828f					_FCError:
.828f	4c 31 9b	jmp $9b31			jmp 	TypeError
.8292					_FCSyntaxError:
.8292	4c 27 9b	jmp $9b27			jmp 	SyntaxError
.8295					FCIntegerToStack:
.8295	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8298	10 03		bpl $829d			bpl	 	_FCNotNegative
.829a	20 66 90	jsr $9066			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.829d					_FCNotNegative:
.829d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82a0	91 34		sta ($34),y			sta 	(basicStack),y
.82a2	c8		iny				iny
.82a3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82a6	91 34		sta ($34),y			sta 	(basicStack),y
.82a8	c8		iny				iny
.82a9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82ac	91 34		sta ($34),y			sta 	(basicStack),y
.82ae	c8		iny				iny
.82af	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82b2	91 34		sta ($34),y			sta 	(basicStack),y
.82b4	60		rts				rts
.82b5					CopyIndexToReference:
.82b5	5a		phy				phy
.82b6	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82b8	38		sec				sec 								; (because we copy from offset 8)
.82b9	b1 34		lda ($34),y			lda 	(basicStack),y
.82bb	e9 08		sbc #$08			sbc 	#8
.82bd	85 36		sta $36				sta 	zTemp0
.82bf	c8		iny				iny
.82c0	b1 34		lda ($34),y			lda 	(basicStack),y
.82c2	e9 00		sbc #$00			sbc 	#0
.82c4	85 37		sta $37				sta 	zTemp0+1
.82c6	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82c8	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82ca	b1 34		lda ($34),y			lda 	(basicStack),y
.82cc	0a		asl a				asl 	a 							; into carry
.82cd	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82cf	90 14		bcc $82e5			bcc 	_CITRNormal
.82d1	38		sec				sec
.82d2					_CITRNegative:
.82d2	a9 00		lda #$00			lda 	#0
.82d4	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82d6	91 36		sta ($36),y			sta 	(zTemp0),y
.82d8	c8		iny				iny
.82d9	ca		dex				dex
.82da	d0 f6		bne $82d2			bne 	_CITRNegative
.82dc	88		dey				dey 								; look at MSB of mantissa
.82dd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82df	09 80		ora #$80			ora 	#$80
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	7a		ply				ply
.82e4	60		rts				rts
.82e5					_CITRNormal:
.82e5	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82e7	91 36		sta ($36),y			sta 	(zTemp0),y
.82e9	c8		iny				iny
.82ea	ca		dex				dex
.82eb	d0 f8		bne $82e5			bne 	_CITRNormal
.82ed	7a		ply				ply 								; and exit.
.82ee	60		rts				rts
.82ef					NextCommand:
.82ef	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82f1	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82f3	20 15 91	jsr $9115			jsr 	StackCheckFrame
.82f6	5a		phy				phy
.82f7	a0 10		ldy #$10			ldy 	#16 						; get the step count
.82f9	b1 34		lda ($34),y			lda 	(basicStack),y
.82fb	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.82fd	30 02		bmi $8301			bmi 	_NCStepNeg
.82ff	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8301					_NCStepNeg:
.8301	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8303	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8305	18		clc				clc
.8306					_NCBump:
.8306	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8308	91 34		sta ($34),y			sta 	(basicStack),y
.830a	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.830c	c8		iny				iny 								; next byte
.830d	ca		dex				dex 								; do four times
.830e	d0 f6		bne $8306			bne 	_NCBump
.8310	20 b5 82	jsr $82b5			jsr		CopyIndexToReference		; copy it to the reference variable.
.8313	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8315	b1 34		lda ($34),y			lda 	(basicStack),y
.8317	0a		asl a				asl 	a 							; sign bit to carry
.8318	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.831a	85 38		sta $38				sta 	zTemp1
.831c	90 02		bcc $8320			bcc 	_NCCompRev 					; use if step is +ve
.831e	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8320					_NCCompRev:
.8320	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8322	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8324	85 39		sta $39				sta 	zTemp1+1
.8326	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8328	38		sec				sec
.8329					_NCCompare:
.8329	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.832b	b1 34		lda ($34),y			lda 	(basicStack),y
.832d	a4 39		ldy $39				ldy 	zTemp1+1
.832f	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8331	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8333	e6 39		inc $39				inc 	zTemp1+1
.8335	ca		dex				dex 								; do it 4 times.
.8336	d0 f1		bne $8329			bne 	_NCCompare
.8338	50 02		bvc $833c			bvc 	_NCNoOverflow 				; convert to signed comparison
.833a	49 80		eor #$80			eor 	#$80
.833c					_NCNoOverflow:
.833c	7a		ply				ply 								; restore Y position
.833d	0a		asl a				asl 	a 							; is bit 7 set.
.833e	90 04		bcc $8344			bcc 	_NCLoopback 				; if no , >= so loop back
.8340	20 07 91	jsr $9107			jsr 	StackClose 					; exit the loop
.8343	60		rts				rts
.8344					_NCLoopBack:
.8344	20 31 91	jsr $9131			jsr 	STKLoadCodePosition 		; loop back
.8347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8348					Command_GOSUB:
.8348	a2 00		ldx #$00			ldx 	#0
.834a	20 3d 90	jsr $903d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.834d	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.834f	20 ee 90	jsr $90ee			jsr 	StackOpen 					; create frame
.8352	20 20 91	jsr $9120			jsr 	STKSaveCodePosition 		; save current position
.8355	4c 6b 83	jmp $836b			jmp 	GotoStackX
.8358					Command_RETURN:
.8358	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.835a	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.835c	20 15 91	jsr $9115			jsr 	StackCheckFrame
.835f	20 31 91	jsr $9131			jsr 	STKLoadCodePosition 		; restore code position
.8362	20 07 91	jsr $9107			jsr 	StackClose
.8365	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8366					GotoCommand:
.8366	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8368	20 3d 90	jsr $903d			jsr 	Evaluate16BitInteger
.836b					GotoStackX:
.836b	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.836e	48		pha				pha 								; it is slightly inefficient, just in cases.
.836f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8372	fa		plx				plx
.8373	20 17 96	jsr $9617			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8376	4c a8 84	jmp $84a8			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8379					IfCommand:
.8379	a2 00		ldx #$00			ldx 	#0 							; If what.
.837b	20 05 90	jsr $9005			jsr 	EvaluateNumber
.837e	b1 30		lda ($30),y			lda 	(codePtr),y
.8380	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8382	d0 0a		bne $838e			bne 	_IFStructured
.8384	c8		iny				iny 								; consume THEN
.8385	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; is it zero
.8388	f0 01		beq $838b			beq 	_IfFail 					; if fail, go to next line
.838a	60		rts				rts 								; if THEN just continue
.838b					_IfFail:
.838b	4c f2 84	jmp $84f2			jmp 	EOLCommand
.838e					_IfStructured:
.838e	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; is it zero
.8391	d0 07		bne $839a			bne 	_IfExit 					; if not, then continue normally.
.8393	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8395	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8397	20 5c 85	jsr $855c			jsr 	ScanForward 				; and run from there/
.839a					_IfExit:
.839a	60		rts				rts
.839b					ElseCode:
.839b	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.839d	aa		tax				tax 								; so just go to the structure exit
.839e	20 5c 85	jsr $855c			jsr 	ScanForward
.83a1	60		rts				rts
.83a2					EndIf:
.83a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83a3					LetCommand:
.83a3	a2 00		ldx #$00			ldx 	#0
.83a5	ad d6 89	lda $89d6			lda 	PrecedenceLevel+"*"			; precedence > this
.83a8	20 f0 89	jsr $89f0			jsr 	EvaluateExpressionAtPrecedence
.83ab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83ae	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83b0	f0 0e		beq $83c0			beq 	_LetGoProc 					; it's a procedure call.
.83b2	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83b4	20 67 96	jsr $9667			jsr 	CheckNextA
.83b7	e8		inx				inx 								; RHS
.83b8	20 fc 8f	jsr $8ffc			jsr 	EvaluateValue
.83bb	ca		dex				dex
.83bc	20 c3 83	jsr $83c3			jsr 	AssignVariable
.83bf	60		rts				rts
.83c0					_LetGoProc:
.83c0	4c 3d 84	jmp $843d			jmp 	CallProcedure
.83c3					AssignVariable:
.83c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83c6	48		pha				pha 								; save a copy
.83c7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83ca	29 10		and #$10			and 	#NSBIsString
.83cc	d0 0b		bne $83d9			bne 	_ASError
.83ce	68		pla				pla 								; get back
.83cf	29 10		and #$10			and 	#NSBIsString 				; check type
.83d1	d0 03		bne $83d6			bne 	_ASString
.83d3	4c 2b 8a	jmp $8a2b			jmp 	AssignNumber
.83d6					_ASString:
.83d6	4c 99 8a	jmp $8a99			jmp 	AssignString
.83d9					_ASError:
.83d9	4c 31 9b	jmp $9b31			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.83dc					NewCommand:
.83dc	20 c6 95	jsr $95c6			jsr 	MemoryNew
.83df	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.83e2	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.83e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.83e6					Command_Print:
.83e6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.83e7					_CPLoop:
.83e7	08		php				php 								; save last action flag
.83e8	b1 30		lda ($30),y			lda 	(codePtr),y
.83ea	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.83ec	f0 46		beq $8434			beq 	_CPExit
.83ee	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83f0	f0 42		beq $8434			beq 	_CPExit
.83f2	68		pla				pla 								; throw last action flag
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	c8		iny				iny
.83f6	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.83f8	f0 37		beq $8431			beq 	_CPContinueWithSameLine
.83fa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.83fc	f0 2e		beq $842c			beq 	_CPTab
.83fe	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8400	f0 26		beq $8428			beq 	_CPNewLine
.8402	88		dey				dey 								; undo the get.
.8403	a2 00		ldx #$00			ldx 	#0
.8405	20 fc 8f	jsr $8ffc			jsr 	EvaluateValue 				; get a value into slot 0
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.840b	29 10		and #$10			and 	#NSBIsString
.840d	f0 0b		beq $841a			beq 	_CPNumber
.840f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8412	ad 08 06	lda $0608			lda 	NSMantissa0
.8415	20 3e 86	jsr $863e			jsr 	PrintStringXA
.8418	80 cc		bra $83e6			bra 	Command_Print 				; loop round clearing carry so NL if end
.841a					_CPNumber:
.841a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.841c	20 d2 8e	jsr $8ed2			jsr 	ConvertNumberToString 		; convert to string
.841f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8421	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8423	20 3e 86	jsr $863e			jsr 	PrintStringXA
.8426	80 be		bra $83e6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8428					_CPNewLine:
.8428	a9 0d		lda #$0d			lda 	#13
.842a	80 02		bra $842e			bra 	_CPPrintChar
.842c					_CPTab:
.842c	a9 09		lda #$09			lda 	#9 							; print TAB
.842e					_CPPrintChar:
.842e	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.8431					_CPContinueWithSameLine:
.8431	38		sec				sec 								; loop round with carry set, which
.8432	80 b3		bra $83e7			bra 	_CPLoop 					; will inhibit final CR
.8434					_CPExit:
.8434	28		plp				plp 								; get last action flag
.8435	b0 05		bcs $843c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8437	a9 0d		lda #$0d			lda 	#13 						; print new line
.8439	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.843c					_CPExit2:
.843c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.843d					CallProcedure:
.843d	20 57 96	jsr $9657			jsr 	CheckRightBracket
.8440	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8442	20 ee 90	jsr $90ee			jsr 	StackOpen
.8445	20 20 91	jsr $9120			jsr 	STKSaveCodePosition 		; save loop position
.8448	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.844b	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.844d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8450	85 37		sta $37				sta 	zTemp0+1
.8452	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8454	b2 36		lda ($36)			lda 	(zTemp0)
.8456	85 30		sta $30				sta 	safePtr
.8458	b1 36		lda ($36),y			lda 	(zTemp0),y
.845a	85 31		sta $31				sta 	safePtr+1
.845c	c8		iny				iny
.845d	b1 36		lda ($36),y			lda 	(zTemp0),y
.845f	85 32		sta $32				sta 	safePtr+2
.8461	c8		iny				iny
.8462	b1 36		lda ($36),y			lda 	(zTemp0),y
.8464	85 33		sta $33				sta 	safePtr+3
.8466	c8		iny				iny 								; get Y offset -> Y
.8467	b1 36		lda ($36),y			lda 	(zTemp0),y
.8469	a8		tay				tay
.846a	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; check )
.846d	60		rts				rts 								; and continue from here
.9649					Command_ENDPROC:
.9649	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.964b	a2 14		ldx #$14			ldx 	#ERRID_PROC
.964d	20 15 91	jsr $9115			jsr 	StackCheckFrame
.9650	20 31 91	jsr $9131			jsr 	STKLoadCodePosition 		; restore code position
.9653	20 07 91	jsr $9107			jsr 	StackClose
.9656	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.846e					RemCommand:
.846e	b1 30		lda ($30),y			lda 	(codePtr),y
.8470	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8472	d0 06		bne $847a			bne 	_RMExit
.8474	c8		iny				iny
.8475	98		tya				tya
.8476	38		sec				sec
.8477	71 30		adc ($30),y			adc 	(codePtr),y
.8479	a8		tay				tay
.847a					_RMExit:
.847a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.847b					Command_REPEAT:
.847b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.847d	20 ee 90	jsr $90ee			jsr 	StackOpen
.8480	20 20 91	jsr $9120			jsr 	STKSaveCodePosition 		; save loop position
.8483	60		rts				rts
.8484					Command_UNTIL:
.8484	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8486	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8488	20 15 91	jsr $9115			jsr 	StackCheckFrame
.848b	a2 00		ldx #$00			ldx 	#0
.848d	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; work out the number
.8490	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; check if zero
.8493	f0 04		beq $8499			beq 	_CULoopBack 				; if so keep looping
.8495	20 07 91	jsr $9107			jsr 	StackClose		 			; return
.8498	60		rts				rts
.8499					_CULoopBack:
.8499	20 31 91	jsr $9131			jsr 	STKLoadCodePosition 		; loop back
.849c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.849d					CommandRUN:
.849d	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.84a0	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.84a2	85 30		sta $30				sta 	codePtr
.84a4	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.84a6	85 31		sta $31				sta 	codePtr+1
.84a8					RUNNewLine:
.84a8	b2 30		lda ($30)			lda 	(codePtr)
.84aa	f0 43		beq $84ef			beq 	CRNoProgram         		; no then END.
.84ac	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.84ae	9a		txs				txs
.84af					RUNCodePointerLine:
.84af	a0 02		ldy #$02			ldy 	#2 							; start of program
.84b1					_CRIncMainLoop:
.84b1	c8		iny				iny
.84b2					_CRMainLoop:
.84b2	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.84b5	b1 30		lda ($30),y			lda 	(codePtr),y
.84b7	10 10		bpl $84c9			bpl 	_CRNotKeyword
.84b9	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.84bb	b0 04		bcs $84c1			bcs 	_CRIsKeyword
.84bd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.84bf	b0 28		bcs $84e9			bcs		_CRSyntaxError
.84c1					_CRIsKeyword:
.84c1	c8		iny				iny 								; consume command
.84c2	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.84c3	aa		tax				tax 								; put in X for vector jump
.84c4	20 ec 84	jsr $84ec			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.84c7	80 e9		bra $84b2			bra 	_CRMainLoop 				; and loop round
.84c9					_CRNotKeyword:
.84c9	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.84cb	f0 e4		beq $84b1			beq 	_CRIncMainLoop
.84cd	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.84cf	90 05		bcc $84d6			bcc 	_CRNotVariable
.84d1					_CRGoLet:
.84d1	20 a3 83	jsr $83a3			jsr 	LetCommand
.84d4	80 dc		bra $84b2			bra 	_CRMainLoop
.84d6					_CRNotVariable:
.84d6	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.84d8	f0 f7		beq $84d1			beq 	_CRGoLet
.84da	c9 21		cmp #$21			cmp 	#KWD_PLING
.84dc	f0 f3		beq $84d1			beq 	_CRGoLet
.84de	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.84e0	f0 01		beq $84e3			beq 	_CRGoRem
>84e2	db						.byte 	$DB 						; causes a break in the emulator
.84e3					_CRGoRem:
.84e3	c8		iny				iny
.84e4	20 6e 84	jsr $846e			jsr 	RemCommand
.84e7	80 c9		bra $84b2			bra 	_CRMainLoop
.84e9					_CRSyntaxError:
.84e9	4c 27 9b	jmp $9b27			jmp 	SyntaxError
.84ec					_CRCallVector0:
.84ec	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.84ef					CRNoProgram:
.84ef	4c 32 82	jmp $8232			jmp 	EndCommand
.84f2					EOLCommand:
.84f2	18		clc				clc
.84f3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84f5	65 30		adc $30				adc 	codePtr
.84f7	85 30		sta $30				sta 	codePtr
.84f9	90 02		bcc $84fd			bcc 	_CREExit
.84fb	e6 31		inc $31				inc 	codePtr+1
.84fd					_CREExit:
.84fd	80 a9		bra $84a8			bra 	RunNewLine
.84ff					Shift1Command:
.84ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8501	c8		iny				iny
.8502	0a		asl a				asl 	a
.8503	aa		tax				tax
.8504	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8507					Unused1:
.8507					Unused2:
.8507					Unused3:
.8507	4c 27 9b	jmp $9b27			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.850a					ProcedureScan:
.850a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.850c	85 30		sta $30				sta 	codePtr
.850e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8510	85 31		sta $31				sta 	codePtr+1
.8512					_PSLoop:
.8512	b2 30		lda ($30)			lda 	(codePtr)
.8514	f0 42		beq $8558			beq 	_PSExit
.8516	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8518	b1 30		lda ($30),y			lda 	(codePtr),y
.851a	c9 98		cmp #$98			cmp 	#KWD_PROC
.851c	d0 2d		bne $854b			bne 	_PSNext
.851e	c8		iny				iny 								; get the address of the record to zTemp0 and
.851f	b1 30		lda ($30),y			lda 	(codePtr),y
.8521	29 c0		and #$c0			and 	#$C0
.8523	c9 40		cmp #$40			cmp 	#$40
.8525	d0 32		bne $8559			bne 	_PSSyntax
.8527	b1 30		lda ($30),y			lda 	(codePtr),y
.8529	18		clc				clc
.852a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.852c	85 37		sta $37				sta 	zTemp0+1
.852e	c8		iny				iny 								; LSB
.852f	b1 30		lda ($30),y			lda 	(codePtr),y
.8531	85 36		sta $36				sta 	zTemp0
.8533	c8		iny				iny 								; character after variable call.
.8534	98		tya				tya 								; save Y offset at +7
.8535	a0 07		ldy #$07			ldy 	#7
.8537	91 36		sta ($36),y			sta 	(zTemp0),y
.8539	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.853b	a0 02		ldy #$02			ldy 	#2
.853d	91 36		sta ($36),y			sta 	(zTemp0),y
.853f	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8541					_PSCopy:
.8541	b5 30		lda $30,x			lda 	safePtr,x
.8543	c8		iny				iny
.8544	91 36		sta ($36),y			sta 	(zTemp0),y
.8546	e8		inx				inx
.8547	e0 04		cpx #$04			cpx 	#4
.8549	d0 f6		bne $8541			bne 	_PSCopy
.854b					_PSNext:
.854b	18		clc				clc
.854c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.854e	65 30		adc $30				adc 	codePtr
.8550	85 30		sta $30				sta 	codePtr
.8552	90 02		bcc $8556			bcc 	_CREExit
.8554	e6 31		inc $31				inc 	codePtr+1
.8556					_CREExit:
.8556	80 ba		bra $8512			bra 	_PSLoop
.8558					_PSExit:
.8558	60		rts				rts
.8559					_PSSyntax:
.8559	4c 27 9b	jmp $9b27			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.855c					ScanForward:
.855c	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.855e	86 37		stx $37				stx 	zTemp0+1
.8560	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8562					_ScanLoop:
.8562	b1 30		lda ($30),y			lda 	(codePtr),y
.8564	c8		iny				iny
.8565	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8567	d0 09		bne $8572			bne 	_ScanGoNext
.8569	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.856b	f0 04		beq $8571			beq 	_ScanMatch
.856d	c5 37		cmp $37				cmp 	zTemp0+1
.856f	d0 01		bne $8572			bne 	_ScanGoNext
.8571					_ScanMatch:
.8571	60		rts				rts
.8572					_ScanGoNext:
.8572	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8574	90 ec		bcc $8562			bcc 	_ScanLoop
.8576	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8578	90 18		bcc $8592			bcc 	_ScanSkipOne
.857a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.857c	b0 2f		bcs $85ad			bcs 	_ScanSkipData
.857e	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8580	90 e0		bcc $8562			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8582	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8584	b0 dc		bcs $8562			bcs 	_ScanLoop
.8586	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8588	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.858a	b0 d6		bcs $8562			bcs 	_ScanLoop
.858c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.858e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8590	80 d0		bra $8562			bra 	_ScanLoop
.8592					_ScanSkipOne:
.8592	c8		iny				iny 								; consume the extra one.
.8593	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8595	d0 cb		bne $8562			bne 	_ScanLoop
.8597	18		clc				clc
.8598	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.859a	65 30		adc $30				adc 	codePtr
.859c	85 30		sta $30				sta 	codePtr
.859e	90 02		bcc $85a2			bcc 	_CREExit
.85a0	e6 31		inc $31				inc 	codePtr+1
.85a2					_CREExit:
.85a2	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.85a4	b2 30		lda ($30)			lda 	(codePtr)
.85a6	d0 ba		bne $8562			bne 	_ScanLoop 					; if not zero, more to scan
.85a8	a9 13		lda #$13		lda	#19
.85aa	4c e5 85	jmp $85e5		jmp	ErrorHandler
.85ad					_ScanSkipData:
.85ad	88		dey				dey 								; point at data token
.85ae	c8		iny				iny
.85af	98		tya				tya
.85b0	38		sec				sec
.85b1	71 30		adc ($30),y			adc 	(codePtr),y
.85b3	a8		tay				tay
.85b4	80 ac		bra $8562			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.85b6					Command_WHILE:
.85b6	5a		phy				phy 								; save position of the test
.85b7	a2 00		ldx #$00			ldx 	#0
.85b9	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; work out the number
.85bc	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; check if zero
.85bf	f0 0e		beq $85cf			beq 	_WHExitLoop 				; if so exit the loop
.85c1	98		tya				tya 								; position *after* test.
.85c2	7a		ply				ply 								; restore position before test, at WHILE
.85c3	88		dey				dey
.85c4	48		pha				pha 								; push after test on the stack
.85c5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.85c7	20 ee 90	jsr $90ee			jsr 	StackOpen
.85ca	20 20 91	jsr $9120			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.85cd	7a		ply				ply 								; restore the position *after* the test
.85ce	60		rts				rts
.85cf					_WHExitLoop:
.85cf	68		pla				pla 								; throw post loop position
.85d0	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.85d2	aa		tax				tax
.85d3	20 5c 85	jsr $855c			jsr 	ScanForward
.85d6	60		rts				rts
.85d7					Command_WEND:
.85d7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.85d9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.85db	20 15 91	jsr $9115			jsr 	StackCheckFrame
.85de	20 31 91	jsr $9131			jsr 	STKLoadCodePosition 		; loop back
.85e1	20 07 91	jsr $9107			jsr 	StackClose		 			; erase the frame
.85e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9657					CheckRightBracket:
.9657	b1 30		lda ($30),y			lda 	(codePtr),y
.9659	c8		iny				iny
.965a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.965c	d0 0f		bne $966d			bne 	CNAFail
.965e	60		rts				rts
.965f					CheckComma:
.965f	b1 30		lda ($30),y			lda 	(codePtr),y
.9661	c8		iny				iny
.9662	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9664	d0 07		bne $966d			bne 	CNAFail
.9666	60		rts				rts
.9667					CheckNextA:
.9667	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9669	d0 02		bne $966d			bne 	CNAFail
.966b	c8		iny				iny 								; skip character
.966c	60		rts				rts 								; and exit
.966d					CNAFail:
.966d	4c 27 9b	jmp $9b27			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.85e5					ErrorHandler:
.85e5	a8		tay				tay 								; find the error text
.85e6	f0 49		beq $8631			beq 	_EHEnd
.85e8	a2 00		ldx #$00			ldx 	#0
.85ea	a9 40		lda #$40			lda 	#((ErrorText) & $FF)
.85ec	85 36		sta $36				sta 	0+zTemp0
.85ee	a9 9b		lda #$9b			lda 	#((ErrorText) >> 8)
.85f0	85 37		sta $37				sta 	1+zTemp0
.85f2					_EHFind:
.85f2	88		dey				dey 								; found the error text ?
.85f3	f0 0e		beq $8603			beq 	_EHFound
.85f5					_EHFindZero:
.85f5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.85f7	e6 36		inc $36				inc 	zTemp0
.85f9	d0 02		bne $85fd			bne 	_EHFNoCarry
.85fb	e6 37		inc $37				inc 	zTemp0+1
.85fd					_EHFNoCarry:
.85fd	c9 00		cmp #$00			cmp 	#0
.85ff	d0 f4		bne $85f5			bne 	_EHFindZero
.8601	80 ef		bra $85f2			bra 	_EHFind
.8603					_EHFound:
.8603	a5 36		lda $36				lda 	zTemp0 						; print message
.8605	a6 37		ldx $37				ldx 	zTemp0+1
.8607	20 3e 86	jsr $863e			jsr 	PrintStringXA
.860a	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.860c	b1 30		lda ($30),y			lda 	(codePtr),y
.860e	d0 05		bne $8615			bne 	_EHAtMsg
.8610	c8		iny				iny
.8611	b1 30		lda ($30),y			lda 	(codePtr),y
.8613	f0 17		beq $862c			beq 	_EHCREnd
.8615					_EHAtMsg:
.8615	a2 86		ldx #$86			ldx 	#_AtMsg >> 8 				; print " at "
.8617	a9 34		lda #$34			lda 	#_AtMsg & $FF
.8619	20 3e 86	jsr $863e			jsr 	PrintStringXA
.861c	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.861e	b1 30		lda ($30),y			lda 	(codePtr),y
.8620	48		pha				pha
.8621	c8		iny				iny
.8622	b1 30		lda ($30),y			lda 	(codePtr),y
.8624	aa		tax				tax
.8625	68		pla				pla
.8626	20 b3 97	jsr $97b3			jsr 	ConvertInt16 				; convert XA to string
.8629	20 3e 86	jsr $863e			jsr 	PrintStringXA 				; and print it.
.862c					_EHCREnd:
.862c	a9 0d		lda #$0d			lda 	#13 						; new line
.862e	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.8631					_EHEnd:
.8631	4c 0c 80	jmp $800c			jmp 	WarmStart
>8634	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>863c	20 00
.863e					PrintStringXA:
.863e	5a		phy				phy
.863f	86 37		stx $37				stx 	zTemp0+1
.8641	85 36		sta $36				sta 	zTemp0
.8643	a0 00		ldy #$00			ldy 	#0
.8645					_PSXALoop:
.8645	b1 36		lda ($36),y			lda 	(zTemp0),y
.8647	f0 06		beq $864f			beq 	_PSXAExit
.8649	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.864c	c8		iny				iny
.864d	80 f6		bra $8645			bra 	_PSXALoop
.864f					_PSXAExit:
.864f	7a		ply				ply
.8650	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8651					UnaryTrue:
.8651	fa		plx				plx
.8652					ReturnTrue:
.8652	a9 01		lda #$01			lda 	#1  						; set to 1
.8654	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.8657	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8659	9d 00 06	sta $0600,x			sta 	NSStatus,x
.865c	60		rts				rts
.865d					UnaryFalse:
.865d	fa		plx				plx
.865e					ReturnFalse:
.865e	4c b1 90	jmp $90b1			jmp 	NSMSetZero 					; set it all to zero
.8661					BinaryCompareEqual:
.8661	fa		plx				plx
.8662	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.8665	c9 00		cmp #$00			cmp 	#0
.8667	f0 e9		beq $8652			beq 	ReturnTrue
.8669	80 f3		bra $865e			bra 	ReturnFalse
.866b					BinaryCompareLess:
.866b	fa		plx				plx
.866c	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.866f	c9 ff		cmp #$ff			cmp 	#$FF
.8671	f0 df		beq $8652			beq 	ReturnTrue
.8673	80 e9		bra $865e			bra 	ReturnFalse
.8675					BinaryCompareGreater:
.8675	fa		plx				plx
.8676	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.8679	c9 01		cmp #$01			cmp 	#1
.867b	f0 d5		beq $8652			beq 	ReturnTrue
.867d	80 df		bra $865e			bra 	ReturnFalse
.867f					BinaryCompareNotEqual:
.867f	fa		plx				plx
.8680	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.8683	c9 00		cmp #$00			cmp 	#0
.8685	d0 cb		bne $8652			bne 	ReturnTrue
.8687	80 d5		bra $865e			bra 	ReturnFalse
.8689					BinaryCompareLessEqual:
.8689	fa		plx				plx
.868a	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.868d	c9 01		cmp #$01			cmp 	#1
.868f	d0 c1		bne $8652			bne 	ReturnTrue
.8691	80 cb		bra $865e			bra 	ReturnFalse
.8693					BinaryCompareGreaterEqual:
.8693	fa		plx				plx
.8694	20 9d 86	jsr $869d			jsr 	CompareBaseCode
.8697	c9 ff		cmp #$ff			cmp 	#$FF
.8699	d0 b7		bne $8652			bne 	ReturnTrue
.869b	80 c1		bra $865e			bra 	ReturnFalse
.869d					CompareBaseCode:
.869d	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; make both values if references.
.86a0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.86a3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86a6	29 10		and #$10			and 	#NSTString
.86a8	d0 40		bne $86ea			bne 	_CBCString
.86aa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.86ad	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86b0	d0 3b		bne $86ed			bne 	_CBCFloat
.86b2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86b5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86b8	29 08		and #$08			and 	#NSTFloat
.86ba	d0 31		bne $86ed			bne 	_CBCFloat
.86bc	20 f0 86	jsr $86f0			jsr 	CompareFixMinusZero
.86bf	e8		inx				inx
.86c0	20 f0 86	jsr $86f0			jsr 	CompareFixMinusZero
.86c3	ca		dex				dex
.86c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.86c7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86ca	10 0b		bpl $86d7			bpl 	_CDCSameSign
.86cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.86cf	30 16		bmi $86e7			bmi 	_CBCLess 					; return $FF
.86d1					_CBCGreater:
.86d1	a9 01		lda #$01			lda 	#1
.86d3	60		rts				rts
.86d4					_CBCEqual:
.86d4	a9 00		lda #$00			lda 	#0
.86d6	60		rts				rts
.86d7					_CDCSameSign:
.86d7	20 00 88	jsr $8800			jsr 	SubTopTwoStack 				; unsigned subtract
.86da	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; or the mantissa together
.86dd	f0 f5		beq $86d4			beq 	_CBCEqual 					; -0 == 0
.86df	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.86e2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.86e5	10 ea		bpl $86d1			bpl 	_CBCGreater
.86e7					_CBCLess:
.86e7	a9 ff		lda #$ff			lda 	#$FF
.86e9	60		rts				rts
.86ea					_CBCString:
.86ea	4c 56 87	jmp $8756			jmp 	CompareStrings
.86ed					_CBCFloat:
.86ed	4c af 98	jmp $98af			jmp 	CompareFloat
.86f0					CompareFixMinusZero:
.86f0	20 e1 90	jsr $90e1			jsr 	NSMIsZero
.86f3	d0 03		bne $86f8			bne 	_CFXMZNotZero
.86f5	9e 00 06	stz $0600,x			stz 	NSStatus,x
.86f8					_CFXMZNotZero:
.86f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.86f9					StringConcat:
.86f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.86fc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.86ff	29 18		and #$18			and 	#NSBTypeMask
.8701	c9 10		cmp #$10			cmp 	#NSTString
.8703	d0 4e		bne $8753			bne		_SCType
.8705	64 38		stz $38				stz 	zTemp1 						; counting total length
.8707	e8		inx				inx
.8708	20 26 87	jsr $8726			jsr 	_SCSetupZ0 					; setup for second
.870b	20 31 87	jsr $8731			jsr 	_SCLengthZ0 				; length for second
.870e	ca		dex				dex
.870f	20 26 87	jsr $8726			jsr 	_SCSetupZ0 					; setup for first
.8712	20 31 87	jsr $8731			jsr 	_SCLengthZ0 				; length for first
.8715	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8717	20 11 9d	jsr $9d11			jsr 	StringTempAllocate
.871a	20 44 87	jsr $8744			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.871d	e8		inx				inx
.871e	20 26 87	jsr $8726			jsr 	_SCSetupZ0 					; copy second out
.8721	20 44 87	jsr $8744			jsr 	_SCCopy
.8724	ca		dex				dex
.8725	60		rts				rts
.8726					_SCSetupZ0:
.8726	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8729	85 36		sta $36				sta 	zTemp0
.872b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.872e	85 37		sta $37				sta 	zTemp0+1
.8730	60		rts				rts
.8731					_SCLengthZ0:
.8731	5a		phy				phy
.8732	a0 00		ldy #$00			ldy 	#0
.8734					_SCLenLoop:
.8734	b1 36		lda ($36),y			lda 	(zTemp0),y
.8736	f0 0a		beq $8742			beq 	_SCLExit
.8738	c8		iny				iny
.8739	e6 38		inc $38				inc 	zTemp1
.873b	10 f7		bpl $8734			bpl		_SCLenLoop
.873d	a9 09		lda #$09		lda	#9
.873f	4c e5 85	jmp $85e5		jmp	ErrorHandler
.8742					_SCLExit:
.8742	7a		ply				ply
.8743	60		rts				rts
.8744					_SCCopy:
.8744	5a		phy				phy
.8745	a0 00		ldy #$00			ldy 	#0
.8747					_SCCopyLoop:
.8747	b1 36		lda ($36),y			lda 	(zTemp0),y
.8749	f0 06		beq $8751			beq 	_SCCExit
.874b	20 4f 9d	jsr $9d4f			jsr 	StringTempWrite
.874e	c8		iny				iny
.874f	80 f6		bra $8747			bra 	_SCCopyLoop
.8751					_SCCExit:
.8751	7a		ply				ply
.8752	60		rts				rts
.8753					_SCType:
.8753	4c 31 9b	jmp $9b31			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9670					IntegerDivide:
.9670	fa		plx				plx
.9671	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9674	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9677	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9678	0a		asl a				asl 	a
.9679	10 05		bpl $9680			bpl 	_NotRef
.967b	48		pha				pha
.967c	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.967f	68		pla				pla
.9680					_NotRef:
.9680	0a		asl a				asl 	a
.9681	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9683	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9686	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9689	f0 03		beq $968e			beq 	_IntegerCode 				; if clear, then we have two integers
.968b	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.968e					_IntegerCode:
.968e	20 b0 96	jsr $96b0			jsr 	CheckDivideZero 			; do div zero check
.9691	20 e8 96	jsr $96e8			jsr 	Int32Divide 				; do the division
.9694	20 a5 97	jsr $97a5			jsr 	CalculateSign 				; calculate result sign
.9697					NSMCopyPlusTwoToZero:
.9697	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.969a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.969d	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.96a0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96a3	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.96a6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96a9	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.96ac	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96af	60		rts				rts
.96b0					CheckDivideZero:
.96b0	e8		inx				inx
.96b1	20 e1 90	jsr $90e1			jsr 	NSMIsZero
.96b4	f0 02		beq $96b8			beq 	_CDVError
.96b6	ca		dex				dex
.96b7	60		rts				rts
.96b8					_CDVError:
.96b8	a9 03		lda #$03		lda	#3
.96ba	4c e5 85	jmp $85e5		jmp	ErrorHandler
.96bd					IntegerModulus:
.96bd	fa		plx				plx
.96be	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.96c1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.96c4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96c5	0a		asl a				asl 	a
.96c6	10 05		bpl $96cd			bpl 	_NotRef
.96c8	48		pha				pha
.96c9	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96cc	68		pla				pla
.96cd					_NotRef:
.96cd	0a		asl a				asl 	a
.96ce	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96d0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96d3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.96d6	f0 03		beq $96db			beq 	_IntegerCode 				; if clear, then we have two integers
.96d8	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.96db					_IntegerCode:
.96db	20 b0 96	jsr $96b0			jsr 	CheckDivideZero 			; do div zero check
.96de	20 e8 96	jsr $96e8			jsr 	Int32Divide 				; do the division
.96e1	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.96e4	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.96e7	60		rts				rts
.96e8					Int32Divide:
.96e8	48		pha				pha 								; save AXY
.96e9	5a		phy				phy
.96ea	20 88 90	jsr $9088			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.96ed	20 ad 90	jsr $90ad			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.96f0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.96f2					_I32DivideLoop:
.96f2	e8		inx				inx
.96f3	e8		inx				inx
.96f4	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.96f7	ca		dex				dex
.96f8	ca		dex				dex
.96f9	20 c7 90	jsr $90c7			jsr 	NSMRotateLeft
.96fc	20 28 97	jsr $9728			jsr 	DivideCheckSubtract 		; check if subtract possible
.96ff	90 03		bcc $9704			bcc 	_I32DivideNoCarryIn
.9701	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9704					_I32DivideNoCarryIn:
.9704	88		dey				dey 								; loop round till division completed.
.9705	d0 eb		bne $96f2			bne 	_I32DivideLoop
.9707	7a		ply				ply 								; restore AXY and exit
.9708	68		pla				pla
.9709	60		rts				rts
.970a					Int32ShiftDivide:
.970a	48		pha				pha 								; save AY
.970b	5a		phy				phy
.970c	e8		inx				inx 								; clear S[X+2]
.970d	e8		inx				inx
.970e	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.9711	ca		dex				dex
.9712	ca		dex				dex
.9713	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9715					_I32SDLoop:
.9715	20 28 97	jsr $9728			jsr 	DivideCheckSubtract 		; check if subtract possible
.9718	e8		inx				inx
.9719	e8		inx				inx
.971a	20 c7 90	jsr $90c7			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.971d	ca		dex				dex
.971e	ca		dex				dex
.971f	20 c7 90	jsr $90c7			jsr 	NSMRotateLeft
.9722	88		dey				dey 	 							; do 31 times
.9723	d0 f0		bne $9715			bne 	_I32SDLoop
.9725	7a		ply				ply 								; restore AY and exit
.9726	68		pla				pla
.9727	60		rts				rts
.9728					DivideCheckSubtract:
.9728	20 00 88	jsr $8800			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.972b	b0 04		bcs $9731			bcs 	_DCSExit 					; if carry set, then could do, exit
.972d	20 da 87	jsr $87da			jsr 	AddTopTwoStack 				; add it back in
.9730	18		clc				clc 								; and return False
.9731					_DCSExit:
.9731	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9732					MulInteger:
.9732	fa		plx				plx
.9733	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9736	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9739	0a		asl a				asl 	a 							; shift reference bit into sign bit
.973a	0a		asl a				asl 	a
.973b	10 05		bpl $9742			bpl 	_NotRef
.973d	48		pha				pha
.973e	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9741	68		pla				pla
.9742					_NotRef:
.9742	0a		asl a				asl 	a 							; put MSB of type into A:7
.9743	30 0b		bmi $9750			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9745	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9748	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.974b	f0 06		beq $9753			beq 	_IntegerCode 				; if clear, then we have two integers
.974d	4c 86 99	jmp $9986			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9750					_StringData:
.9750	4c 3b 9b	jmp $9b3b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9753					_IntegerCode:
.9753	20 60 97	jsr $9760			jsr 	MultiplyShort
.9756	c9 00		cmp #$00			cmp 	#0
.9758	f0 05		beq $975f			beq 	_MIExit
.975a	a9 04		lda #$04		lda	#4
.975c	4c e5 85	jmp $85e5		jmp	ErrorHandler
.975f					_MIExit:
.975f	60		rts				rts
.9760					MultiplyShort:
.9760	5a		phy				phy 								; save Y
.9761	20 88 90	jsr $9088			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9764	20 ad 90	jsr $90ad			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9767	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9769					_I32MLoop:
.9769	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.976c	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.976f	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9772	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9775	f0 28		beq $979f			beq 	_I32MExit 					; exit if zero
.9777	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.977a	29 01		and #$01			and 	#1
.977c	f0 0e		beq $978c			beq 	_I32MNoAdd
.977e	20 da 87	jsr $87da			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9781	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9784	10 06		bpl $978c			bpl 	_I32MNoAdd
.9786					_I32ShiftRight:
.9786	20 d4 90	jsr $90d4			jsr 	NSMShiftRight 				; shift S[X] right
.9789	c8		iny				iny 								; increment shift count
.978a	80 0a		bra $9796			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.978c					_I32MNoAdd:
.978c	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.978f	70 f5		bvs $9786			bvs 	_I32ShiftRight 				; instead.
.9791	e8		inx				inx
.9792	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9795	ca		dex				dex
.9796					_I32MShiftUpper:
.9796	e8		inx				inx 								; shift S[X+2] right
.9797	e8		inx				inx
.9798	20 d4 90	jsr $90d4			jsr 	NSMShiftRight
.979b	ca		dex				dex
.979c	ca		dex				dex
.979d	80 ca		bra $9769			bra 	_I32MLoop 					; try again.
.979f					_I32MExit:
.979f	20 a5 97	jsr $97a5			jsr 	CalculateSign
.97a2	98		tya				tya 								; shift in A
.97a3	7a		ply				ply 								; restore Y and exit
.97a4	60		rts				rts
.97a5					CalculateSign:
.97a5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.97a8	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.97ab	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.97ae	0a		asl a				asl 	a 							; shift bit 7 into carry
.97af	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.97b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8756					CompareStrings:
.8756	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8759	3d 01 06	and $0601,x			and 	NSStatus+1,x
.875c	29 10		and #$10			and 	#NSBIsString
.875e	f0 2c		beq $878c			beq 	_CSTypeError
.8760	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8763	85 36		sta $36				sta 	zTemp0
.8765	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8768	85 37		sta $37				sta 	zTemp0+1
.876a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.876d	85 38		sta $38				sta 	zTemp1
.876f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8772	85 39		sta $39				sta 	zTemp1+1
.8774	5a		phy				phy 								; save Y so we can access strings
.8775	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8777					_CSLoop:
.8777	c8		iny				iny
.8778	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.877a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.877c	d0 06		bne $8784			bne 	_CSDifferent
.877e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8780	d0 f5		bne $8777			bne 	_CSLoop 					; still comparing
.8782					_CSExit:
.8782	7a		ply				ply 								; reached end, return zero in A from EOS
.8783	60		rts				rts
.8784					_CSDifferent:
.8784	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8786	90 fa		bcc $8782			bcc		_CSExit
.8788	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.878a	80 f6		bra $8782			bra 	_CSExit
.878c					_CSTypeError:
.878c	4c 31 9b	jmp $9b31			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.878f					ShiftLeft:
.878f	38		sec				sec
.8790	80 01		bra $8793			bra 	ShiftMain
.8792					ShiftRight:
.8792	18		clc				clc
.8793					ShiftMain:
.8793	fa		plx				plx 								; restore X
.8794	08		php				php 								; save direction
.8795	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8798	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.879b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.879c	0a		asl a				asl 	a
.879d	10 05		bpl $87a4			bpl 	_NotRef
.879f	48		pha				pha
.87a0	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87a3	68		pla				pla
.87a4					_NotRef:
.87a4	0a		asl a				asl 	a
.87a5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87a7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87aa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87ad	f0 03		beq $87b2			beq 	_IntegerCode 				; if clear, then we have two integers
.87af	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.87b2					_IntegerCode:
.87b2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.87b5	29 e0		and #$e0			and 	#$E0
.87b7	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.87ba	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.87bd	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.87c0	d0 13		bne $87d5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.87c2					_SMLoop:
.87c2	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.87c5	30 11		bmi $87d8			bmi 	_SMExit 					; exit if done.
.87c7	28		plp				plp 								; restore direcition setting
.87c8	08		php				php
.87c9	90 05		bcc $87d0			bcc 	_SMRight
.87cb	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; shift left if CS
.87ce	80 f2		bra $87c2			bra 	_SMLoop
.87d0					_SMRight:
.87d0	20 d4 90	jsr $90d4			jsr 	NSMShiftRight 				; shift right if CC
.87d3	80 ed		bra $87c2			bra 	_SMLoop
.87d5					_SMExit0:
.87d5	20 b1 90	jsr $90b1			jsr 	NSMSetZero 					; return zero.
.87d8					_SMExit:
.87d8	28		plp				plp 								; throw direction
.87d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.87da					AddTopTwoStack:
.87da	18		clc				clc
.87db	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87de	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.87e1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87e4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87e7	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.87ea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87ed	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87f0	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.87f3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87f6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87f9	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.87fc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87ff	60		rts				rts
.8800					SubTopTwoStack:
.8800	38		sec				sec
.8801	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8804	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8807	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.880d	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8810	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8813	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8816	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8819	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.881c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.881f	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8822	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8825	60		rts				rts
.8826					AddInteger:
.8826	fa		plx				plx
.8827	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.882a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.882d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.882e	0a		asl a				asl 	a
.882f	10 05		bpl $8836			bpl 	_NotRef
.8831	48		pha				pha
.8832	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8835	68		pla				pla
.8836					_NotRef:
.8836	0a		asl a				asl 	a 							; put MSB of type into A:7
.8837	30 0b		bmi $8844			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8839	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.883c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.883f	f0 06		beq $8847			beq 	_IntegerCode 				; if clear, then we have two integers
.8841	4c 0e 98	jmp $980e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8844					_StringData:
.8844	4c f9 86	jmp $86f9			jmp 	StringConcat							; at least one string - don't know both are strings.
.8847					_IntegerCode:
.8847					AddCode:
.8847	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.884a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.884d	10 8b		bpl $87da			bpl 	AddTopTwoStack
.884f	20 00 88	jsr $8800			jsr 	SubTopTwoStack 				; do a physical subtraction
.8852	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8855	10 09		bpl $8860			bpl 	_AddExit
.8857	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.885a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.885d	20 66 90	jsr $9066			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8860					_AddExit:
.8860	60		rts				rts
.8861					SubInteger:
.8861	fa		plx				plx
.8862	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8865	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8868	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8869	0a		asl a				asl 	a
.886a	10 05		bpl $8871			bpl 	_NotRef
.886c	48		pha				pha
.886d	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8870	68		pla				pla
.8871					_NotRef:
.8871	0a		asl a				asl 	a 							; put MSB of type into A:7
.8872	30 0b		bmi $887f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8874	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8877	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.887a	f0 06		beq $8882			beq 	_IntegerCode 				; if clear, then we have two integers
.887c	4c 13 98	jmp $9813			jmp 	FloatingPointSub 							; otherwise at least one float.
.887f					_StringData:
.887f	4c 3b 9b	jmp $9b3b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8882					_IntegerCode:
.8882	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8885	49 80		eor #$80			eor 	#$80
.8887	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.888a	80 bb		bra $8847			bra 	AddCode 					; and do the same code as add.
.888c					AndInteger:
.888c	fa		plx				plx
.888d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8890	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8893	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8894	0a		asl a				asl 	a
.8895	10 05		bpl $889c			bpl 	_NotRef
.8897	48		pha				pha
.8898	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.889b	68		pla				pla
.889c					_NotRef:
.889c	0a		asl a				asl 	a
.889d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.889f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88a2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88a5	f0 03		beq $88aa			beq 	_IntegerCode 				; if clear, then we have two integers
.88a7	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.88aa					_IntegerCode:
.88aa	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88ad	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.88b0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88b3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88b6	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.88b9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88bc	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.88bf	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.88c2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88c5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.88c8	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.88cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88ce	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.88d1	60		rts				rts
.88d2					OraInteger:
.88d2	fa		plx				plx
.88d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88d6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88d9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88da	0a		asl a				asl 	a
.88db	10 05		bpl $88e2			bpl 	_NotRef
.88dd	48		pha				pha
.88de	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88e1	68		pla				pla
.88e2					_NotRef:
.88e2	0a		asl a				asl 	a
.88e3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88e5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88e8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88eb	f0 03		beq $88f0			beq 	_IntegerCode 				; if clear, then we have two integers
.88ed	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.88f0					_IntegerCode:
.88f0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88f3	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.88f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88f9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88fc	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.88ff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8902	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8905	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8908	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.890b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.890e	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8911	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8914	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8917	60		rts				rts
.8918					EorInteger:
.8918	fa		plx				plx
.8919	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.891c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.891f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8920	0a		asl a				asl 	a
.8921	10 05		bpl $8928			bpl 	_NotRef
.8923	48		pha				pha
.8924	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8927	68		pla				pla
.8928					_NotRef:
.8928	0a		asl a				asl 	a
.8929	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.892b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.892e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8931	f0 03		beq $8936			beq 	_IntegerCode 				; if clear, then we have two integers
.8933	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.8936					_IntegerCode:
.8936	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8939	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.893c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.893f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8942	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8945	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8948	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.894b	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.894e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8951	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8954	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8957	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.895a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.895d	60		rts				rts
.895e					WordIndirect:
.895e	fa		plx				plx
.895f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8962	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8965	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8966	0a		asl a				asl 	a
.8967	10 05		bpl $896e			bpl 	_NotRef
.8969	48		pha				pha
.896a	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.896d	68		pla				pla
.896e					_NotRef:
.896e	0a		asl a				asl 	a
.896f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8971	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8974	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8977	f0 03		beq $897c			beq 	_IntegerCode 				; if clear, then we have two integers
.8979	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.897c					_IntegerCode:
.897c	20 47 88	jsr $8847			jsr 	AddCode 					; add the two values
.897f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8981	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8984	60		rts				rts
.8985					ByteIndirect:
.8985	fa		plx				plx
.8986	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8989	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.898c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.898d	0a		asl a				asl 	a
.898e	10 05		bpl $8995			bpl 	_NotRef
.8990	48		pha				pha
.8991	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8994	68		pla				pla
.8995					_NotRef:
.8995	0a		asl a				asl 	a
.8996	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8998	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.899b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.899e	f0 03		beq $89a3			beq 	_IntegerCode 				; if clear, then we have two integers
.89a0	4c 31 9b	jmp $9b31			jmp 	TypeError 					; anything else, type mismatch.
.89a3					_IntegerCode:
.89a3	20 47 88	jsr $8847			jsr 	AddCode 					; add the two values
.89a6	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.89a8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.97b3					ConvertInt16:
.97b3	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.97b6	8e 10 06	stx $0610			stx 	NSMantissa1
.97b9	9c 18 06	stz $0618			stz 	NSMantissa2
.97bc	9c 20 06	stz $0620			stz 	NSMantissa3
.97bf	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.97c2	a2 00		ldx #$00			ldx 	#0 							; stack level
.97c4	a9 0a		lda #$0a			lda 	#10 						; base
.97c6	80 00		bra $97c8			bra 	ConvertInt32
.97c8					ConvertInt32:
.97c8	5a		phy				phy
.97c9	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.97cb	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.97ce	10 08		bpl $97d8			bpl 	_CI32NotNeg
.97d0	48		pha				pha
.97d1	a9 2d		lda #$2d			lda 	#'-'
.97d3	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.97d6	c8		iny				iny
.97d7	68		pla				pla
.97d8					_CI32NotNeg:
.97d8	20 e6 97	jsr $97e6			jsr 	_CI32DivideConvert 			; recursive conversion
.97db	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.97dd	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.97e0	7a		ply				ply
.97e1	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.97e3	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.97e5	60		rts				rts
.97e6					_CI32DivideConvert:
.97e6	e8		inx				inx 								; write to next slot up
.97e7	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.97ea	ca		dex				dex
.97eb	20 e8 96	jsr $96e8			jsr 	Int32Divide 				; divide
.97ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.97f1	48		pha				pha
.97f2	20 97 96	jsr $9697			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.97f5	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; is it zero ?
.97f8	f0 06		beq $9800			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.97fa	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.97fd	20 e6 97	jsr $97e6			jsr 	_CI32DivideConvert 			; and recusrively call.
.9800					_CI32NoRecurse:
.9800	68		pla				pla 								; remainder
.9801	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9803	90 02		bcc $9807			bcc 	_CI32NotHex
.9805	69 26		adc #$26			adc 	#6+32
.9807					_CI32NotHex:
.9807	69 30		adc #$30			adc 	#48
.9809	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.980c	c8		iny				iny
.980d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.89ac					PrecedenceLevel:
>89ac	04					.byte	 4	; $00 <<
>89ad	02					.byte	 2	; $01 <=
>89ae	02					.byte	 2	; $02 <>
>89af	00					.byte	 0	; $03 !!3
>89b0	00					.byte	 0	; $04 ><
>89b1	02					.byte	 2	; $05 >=
>89b2	04					.byte	 4	; $06 >>
>89b3	00					.byte	 0	; $07 !!7
>89b4	00					.byte	 0	; $08 !!8
>89b5	00					.byte	 0	; $09 !!9
>89b6	00					.byte	 0	; $0a !!10
>89b7	00					.byte	 0	; $0b !!11
>89b8	00					.byte	 0	; $0c !!12
>89b9	00					.byte	 0	; $0d !!13
>89ba	00					.byte	 0	; $0e !!14
>89bb	00					.byte	 0	; $0f !!15
>89bc	00					.byte	 0	; $10 @
>89bd	00					.byte	 0	; $11 !!17
>89be	00					.byte	 0	; $12 !!18
>89bf	00					.byte	 0	; $13 [
>89c0	04					.byte	 4	; $14 \
>89c1	00					.byte	 0	; $15 ]
>89c2	01					.byte	 1	; $16 ^
>89c3	00					.byte	 0	; $17 _
>89c4	00					.byte	 0	; $18 `
>89c5	00					.byte	 0	; $19 !!25
>89c6	00					.byte	 0	; $1a !!26
>89c7	00					.byte	 0	; $1b {
>89c8	01					.byte	 1	; $1c |
>89c9	00					.byte	 0	; $1d }
>89ca	00					.byte	 0	; $1e ~
>89cb	00					.byte	 0	; $1f [7m<7F>[m
>89cc	00					.byte	 0	; $20
>89cd	05					.byte	 5	; $21 !
>89ce	00					.byte	 0	; $22 "
>89cf	00					.byte	 0	; $23 #
>89d0	05					.byte	 5	; $24 $
>89d1	04					.byte	 4	; $25 %
>89d2	01					.byte	 1	; $26 &
>89d3	00					.byte	 0	; $27 '
>89d4	00					.byte	 0	; $28 (
>89d5	00					.byte	 0	; $29 )
>89d6	04					.byte	 4	; $2a *
>89d7	03					.byte	 3	; $2b +
>89d8	00					.byte	 0	; $2c ,
>89d9	03					.byte	 3	; $2d -
>89da	00					.byte	 0	; $2e .
>89db	04					.byte	 4	; $2f /
>89dc	00					.byte	 0	; $30 0
>89dd	00					.byte	 0	; $31 1
>89de	00					.byte	 0	; $32 2
>89df	00					.byte	 0	; $33 3
>89e0	00					.byte	 0	; $34 4
>89e1	00					.byte	 0	; $35 5
>89e2	00					.byte	 0	; $36 6
>89e3	00					.byte	 0	; $37 7
>89e4	00					.byte	 0	; $38 8
>89e5	00					.byte	 0	; $39 9
>89e6	00					.byte	 0	; $3a :
>89e7	00					.byte	 0	; $3b ;
>89e8	02					.byte	 2	; $3c <
>89e9	02					.byte	 2	; $3d =
>89ea	02					.byte	 2	; $3e >
>89eb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.89ec					EvaluateExpressionAt0:
.89ec	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.89ee					EvaluateExpression:
.89ee	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.89f0					EvaluateExpressionAtPrecedence:
.89f0	48		pha				pha 								; save precedence level
.89f1	20 bf 8c	jsr $8cbf			jsr 	EvaluateTerm 				; evaluate term into level X.
.89f4	68		pla				pla 								; restore precedence level.
.89f5					_EXPRLoop:
.89f5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.89f7	b1 30		lda ($30),y			lda 	(codePtr),y
.89f9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.89fb	b0 25		bcs $8a22			bcs 	_EXPRExit
.89fd	da		phx				phx 								; read the operator precedence
.89fe	aa		tax				tax
.89ff	bd ac 89	lda $89ac,x			lda 	PrecedenceLevel,x
.8a02	fa		plx				plx
.8a03	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8a05	f0 1b		beq $8a22			beq 	_EXPRExit
.8a07	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8a09	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8a0b	c5 37		cmp $37				cmp 	zTemp0+1
.8a0d	b0 13		bcs $8a22			bcs		_EXPRExit 					; if current >= operator exit
.8a0f	48		pha				pha 								; save current precedence.
.8a10	b1 30		lda ($30),y			lda 	(codePtr),y
.8a12	c8		iny				iny
.8a13	48		pha				pha
.8a14	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8a16	e8		inx				inx 								; work out the right hand side.
.8a17	20 f0 89	jsr $89f0			jsr 	EvaluateExpressionAtPrecedence
.8a1a	ca		dex				dex
.8a1b	68		pla				pla 								; get operator, call the code.
.8a1c	20 25 8a	jsr $8a25			jsr 	_EXPRCaller
.8a1f	68		pla				pla 								; restore precedence level
.8a20	80 d3		bra $89f5			bra 	_EXPRLoop 					; and go round.
.8a22					_EXPRExit:
.8a22	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8a24	60		rts				rts
.8a25					_EXPRCaller:
.8a25	da		phx				phx 								; save on stack, first thing is to restore it
.8a26	0a		asl a				asl 	a 							; double so can use vectors into X
.8a27	aa		tax				tax
.8a28	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.980e					FloatingPointAdd:
.980e	20 af 99	jsr $99af			jsr 	FloatPrepare 				; prepare for floats
.9811	80 0b		bra $981e			bra 	FloatAdd
.9813					FloatingPointSub:
.9813	20 af 99	jsr $99af			jsr 	FloatPrepare 				; prepare for floats
.9816					FloatSubtract:
.9816	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9819	49 80		eor #$80			eor 	#$80
.981b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.981e					FloatAdd:
.981e	48		pha				pha
.981f	5a		phy				phy
.9820	20 c0 99	jsr $99c0			jsr 	NSNormalise 				; normalise S[X]
.9823	f0 54		beq $9879			beq 	_FAReturn1
.9825	e8		inx				inx 								; normalise S[X+1]
.9826	20 c0 99	jsr $99c0			jsr 	NSNormalise
.9829	ca		dex				dex
.982a	c9 00		cmp #$00			cmp 	#0
.982c	f0 6f		beq $989d			beq 	_FAExit 					; if so, just return A
.982e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9831	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9834	f0 1b		beq $9851			beq 	_FAExponentsEqual
.9836	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9839	a8		tay				tay
.983a	38		sec				sec 								; do a signed comparison of the exponents.
.983b	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.983e	50 02		bvc $9842			bvc 	_FANoSignedChange
.9840	49 80		eor #$80			eor 	#$80
.9842					_FANoSignedChange:
.9842	29 80		and #$80			and 	#$80
.9844	10 03		bpl $9849			bpl 	_FAHaveMax
.9846	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9849					_FAHaveMax:
.9849	20 a0 98	jsr $98a0			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.984c	e8		inx				inx
.984d	20 a0 98	jsr $98a0			jsr 	_FAShiftToExponent
.9850	ca		dex				dex
.9851					_FAExponentsEqual:
.9851	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9854	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9857	30 10		bmi $9869			bmi 	_FADifferentSigns
.9859	20 da 87	jsr $87da			jsr 	AddTopTwoStack 				; do the add of the mantissae
.985c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.985f	10 3c		bpl $989d			bpl 	_FAExit 					; if no, we are done.
.9861	20 d4 90	jsr $90d4			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9864	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9867	80 34		bra $989d			bra 	_FAExit
.9869					_FADifferentSigns:
.9869	20 00 88	jsr $8800			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.986c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.986f	10 2c		bpl $989d			bpl 	_FAExit 					; if no, we are done.
.9871	20 5d 90	jsr $905d			jsr 	NSMNegate 					; netate result
.9874	20 66 90	jsr $9066			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9877	80 24		bra $989d			bra 	_FAExit
.9879					_FAReturn1:
.9879	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.987c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.987f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9882	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9885	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9888	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.988b	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.988e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9891	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9894	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9897	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.989a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.989d					_FAExit:
.989d	7a		ply				ply
.989e	68		pla				pla
.989f	60		rts				rts
.98a0					_FAShiftToExponent:
.98a0					_FAShiftToExponent2:
.98a0	98		tya				tya 								; compare Y to exponent
.98a1	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.98a4	f0 08		beq $98ae			beq 	_FASEExit 					; exit if so.
.98a6	20 d4 90	jsr $90d4			jsr 	NSMShiftRight	 			; shift the mantissa right
.98a9	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.98ac	80 f2		bra $98a0			bra 	_FAShiftToExponent2
.98ae					_FASEExit:
.98ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.98af					CompareFloat:
.98af	20 16 98	jsr $9816			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.98b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.98b5	29 f8		and #$f8			and 	#$F8
.98b7	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.98ba	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.98bd	f0 09		beq $98c8			beq 	_FCExit 					; zero, so approximately identical
.98bf	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.98c1	3c 00 06	bit $0600,x			bit 	NSStatus,x
.98c4	10 02		bpl $98c8			bpl 	_FCExit
.98c6					_FCNegative:
.98c6	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.98c8					_FCExit:
.98c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.98c9					FDivideCommand:
.98c9	fa		plx				plx	 								; restore stack position
.98ca	20 af 99	jsr $99af			jsr 	FloatPrepare 				; prepare for floats
.98cd					FloatDivide:
.98cd	48		pha				pha
.98ce	e8		inx				inx
.98cf	20 c0 99	jsr $99c0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98d2	ca		dex				dex
.98d3	c9 00		cmp #$00			cmp 	#0
.98d5	f0 20		beq $98f7			beq 	_FDZero
.98d7	20 c0 99	jsr $99c0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98da	f0 19		beq $98f5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98dc	20 0a 97	jsr $970a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.98df	20 97 96	jsr $9697			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.98e2	20 c0 99	jsr $99c0			jsr		NSNormalise 				; renormalise
.98e5	20 a5 97	jsr $97a5			jsr 	CalculateSign 				; calculate result sign
.98e8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.98eb	38		sec				sec
.98ec	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.98ef	38		sec				sec
.98f0	e9 1e		sbc #$1e			sbc 	#30
.98f2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98f5					_FDExit:
.98f5	68		pla				pla
.98f6	60		rts				rts
.98f7					_FDZero:
.98f7	a9 03		lda #$03		lda	#3
.98f9	4c e5 85	jmp $85e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.98fc					FloatFractionalPart:
.98fc	5a		phy				phy
.98fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9900	29 7f		and #$7f			and 	#$7F
.9902	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9905	20 c0 99	jsr $99c0			jsr 	NSNormalise
.9908	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.990b	38		sec				sec
.990c	e9 e0		sbc #$e0			sbc 	#$E0
.990e	90 31		bcc $9941			bcc 	_FFPExit 					; already fractional
.9910	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9912	b0 2a		bcs $993e			bcs 	_FFPZero
.9914	a8		tay				tay 								; put count to do in Y
.9915	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9918	20 43 99	jsr $9943			jsr 	_FFPPartial
.991b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.991e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9921	20 43 99	jsr $9943			jsr 	_FFPPartial
.9924	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9927	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.992a	20 43 99	jsr $9943			jsr 	_FFPPartial
.992d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9930	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9933	20 43 99	jsr $9943			jsr 	_FFPPartial
.9936	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9939	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; zeroed check.
.993c	d0 03		bne $9941			bne 	_FFPExit
.993e					_FFPZero:
.993e	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.9941					_FFPExit:
.9941	7a		ply				ply
.9942	60		rts				rts
.9943					_FFPPartial:
.9943	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9945	f0 17		beq $995e			beq 	_FFFPPExit
.9947	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9949	b0 0c		bcs $9957			bcs 	_FFFPPWholeByte
.994b	5a		phy				phy
.994c					_FFFPPLeft:
.994c	0a		asl a				asl 	a
.994d	88		dey				dey
.994e	d0 fc		bne $994c			bne 	_FFFPPLeft
.9950	7a		ply				ply
.9951					_FFFPPRight:
.9951	4a		lsr a				lsr 	a
.9952	88		dey				dey
.9953	d0 fc		bne $9951			bne 	_FFFPPRight
.9955	80 07		bra $995e			bra 	_FFFPPExit
.9957					_FFFPPWholeByte:
.9957	98		tya				tya 								; subtract 8 from count
.9958	38		sec				sec
.9959	e9 08		sbc #$08			sbc 	#8
.995b	a8		tay				tay
.995c	a9 00		lda #$00			lda 	#0 							; and clear all
.995e					_FFFPPExit:
.995e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.995f					FloatIntegerPart:
.995f	48		pha				pha
.9960	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9963	f0 1f		beq $9984			beq 	_FIPExit 					; if so do nothing
.9965	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; is it zero ?
.9968	f0 17		beq $9981			beq 	_FIPZero 					; if so return zero.
.996a	20 c0 99	jsr $99c0			jsr 	NSNormalise 				; normalise
.996d	f0 12		beq $9981			beq 	_FIPZero 					; normalised to zero, exit zero
.996f					_FIPShift:
.996f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9972	10 08		bpl $997c			bpl 	_FIPCheckZero
.9974	20 d4 90	jsr $90d4			jsr 	NSMShiftRight 				; shift mantissa right
.9977	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.997a	80 f3		bra $996f			bra 	_FIPShift
.997c					_FIPCheckZero:
.997c	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; avoid -0 problem
.997f	d0 03		bne $9984			bne 	_FIPExit 					; set to zero if mantissa zero.
.9981					_FIPZero:
.9981	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.9984					_FIPExit:
.9984	68		pla				pla
.9985	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9986					FloatingPointMultiply:
.9986	20 af 99	jsr $99af			jsr 	FloatPrepare 				; prepare for floats
.9989					FloatMultiply:
.9989	48		pha				pha
.998a	20 c0 99	jsr $99c0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.998d	f0 1b		beq $99aa			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.998f	e8		inx				inx
.9990	20 c0 99	jsr $99c0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9993	ca		dex				dex
.9994	c9 00		cmp #$00			cmp 	#0
.9996	f0 0f		beq $99a7			beq 	_FDSetZero
.9998	20 60 97	jsr $9760			jsr 	MultiplyShort 				; calculate the result.
.999b	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.999e	18		clc				clc
.999f	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.99a2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.99a5	80 03		bra $99aa			bra 	_FDExit
.99a7					_FDSetZero:
.99a7	20 b1 90	jsr $90b1			jsr 	NSMSetZero 					; return 0
.99aa					_FDExit:
.99aa	20 c0 99	jsr $99c0			jsr 	NSNormalise 				; normalise the result
.99ad	68		pla				pla
.99ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.99af					FloatPrepare:
.99af	20 fe 8a	jsr $8afe			jsr 	DereferenceTopTwo 			; dereference the top two values
.99b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.99b5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.99b8	29 10		and #$10			and 	#NSBIsString
.99ba	d0 01		bne $99bd			bne 	_FDType
.99bc	60		rts				rts
.99bd					_FDType:
.99bd	4c 31 9b	jmp $9b31			jmp 	TypeError
.99c0					NSNormalise:
.99c0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.99c3	29 80		and #$80			and 	#$80
.99c5	09 08		ora #$08			ora 	#NSTFloat
.99c7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99ca	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; if zero exit
.99cd	d0 09		bne $99d8			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.99cf	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.99d2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.99d5	a9 00		lda #$00			lda 	#0 							; set Z flag
.99d7	60		rts				rts
.99d8					_NSNormaliseOptimise:
.99d8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.99db	d0 22		bne $99ff			bne 	_NSNormaliseLoop
.99dd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.99e0	30 1d		bmi $99ff			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.99e2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.99e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.99e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.99eb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.99ee	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99f1	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.99f4	bd 28 06	lda $0628,x			lda 	NSExponent,x
.99f7	38		sec				sec
.99f8	e9 08		sbc #$08			sbc 	#8
.99fa	9d 28 06	sta $0628,x			sta 	NSExponent,x
.99fd	80 d9		bra $99d8			bra 	_NSNormaliseOptimise
.99ff					_NSNormaliseLoop:
.99ff	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a02	70 08		bvs $9a0c			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a04	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; shift mantissa left
.9a07	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9a0a	80 f3		bra $99ff			bra 	_NSNormaliseLoop
.9a0c					_NSNExit:
.9a0c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8a2b					AssignNumber:
.8a2b	5a		phy				phy
.8a2c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8a2f	85 36		sta $36				sta 	zTemp0
.8a31	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a34	85 37		sta $37				sta 	zTemp0+1
.8a36	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8a39	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8a3b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a3e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8a40	c9 08		cmp #$08			cmp 	#NSTFloat
.8a42	f0 2a		beq $8a6e			beq 	_ANFloat
.8a44	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8a47	f0 05		beq $8a4e			beq		_ANNotFloat
.8a49	e8		inx				inx
.8a4a	20 5f 99	jsr $995f			jsr 	FloatIntegerPart 			; make it an integer
.8a4d	ca		dex				dex
.8a4e					_ANNotFloat:
.8a4e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8a51	29 03		and #$03			and 	#3
.8a53	d0 05		bne $8a5a			bne 	_ANByteWord
.8a55	20 7a 8a	jsr $8a7a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8a58	80 1e		bra $8a78			bra 	_ANExit
.8a5a					_ANByteWord:
.8a5a	48		pha				pha 								; save count
.8a5b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8a5e	92 36		sta ($36)			sta 	(zTemp0)
.8a60	68		pla				pla
.8a61	c9 01		cmp #$01			cmp	 	#1
.8a63	f0 13		beq $8a78			beq 	_ANExit
.8a65	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8a68	a0 01		ldy #$01			ldy 	#1
.8a6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a6c	80 0a		bra $8a78			bra 	_ANExit
.8a6e					_ANFloat:
.8a6e	20 7a 8a	jsr $8a7a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8a71	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8a74	a0 04		ldy #$04			ldy 	#4
.8a76	91 36		sta ($36),y			sta 	(zTemp0),y
.8a78					_ANExit:
.8a78	7a		ply				ply
.8a79	60		rts				rts
.8a7a					_ANCopy4PackSign:
.8a7a	a0 03		ldy #$03			ldy 	#3
.8a7c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8a7f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8a81	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8a84	91 36		sta ($36),y			sta 	(zTemp0),y
.8a86	88		dey				dey
.8a87	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8a8a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a8c	88		dey				dey
.8a8d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a90	91 36		sta ($36),y			sta 	(zTemp0),y
.8a92	88		dey				dey
.8a93	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a96	91 36		sta ($36),y			sta 	(zTemp0),y
.8a98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8a99					AssignString:
.8a99	5a		phy				phy
.8a9a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a9d	85 38		sta $38				sta 	zTemp1
.8a9f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8aa2	85 39		sta $39				sta 	zTemp1+1
.8aa4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8aa7	85 36		sta $36				sta 	zTemp0
.8aa9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8aac	85 37		sta $37				sta 	zTemp0+1
.8aae	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8ab0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab2	f0 23		beq $8ad7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8ab4	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8ab5	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8ab7	e9 02		sbc #$02			sbc 	#2
.8ab9	85 3c		sta $3c				sta 	zsTemp
.8abb	a0 01		ldy #$01			ldy 	#1
.8abd	b1 36		lda ($36),y			lda 	(zTemp0),y
.8abf	e9 00		sbc #$00			sbc 	#0
.8ac1	85 3d		sta $3d				sta 	zsTemp+1
.8ac3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8ac5					_ASGetLength:
.8ac5	c8		iny				iny
.8ac6	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ac8	d0 fb		bne $8ac5			bne 	_ASGetLength
.8aca	98		tya				tya 								; is this length <= current length
.8acb	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8acd	90 20		bcc $8aef			bcc 	_ASCopyString
.8acf	f0 1e		beq $8aef			beq 	_ASCopyString
.8ad1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8ad3	a0 01		ldy #$01			ldy 	#1
.8ad5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8ad7					_ASNewStringRequired:
.8ad7	e8		inx				inx 								; concrete the new string.
.8ad8	20 96 9c	jsr $9c96			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8adb	ca		dex				dex
.8adc	18		clc				clc
.8add	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8ae0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8ae2	92 36		sta ($36)			sta 	(zTemp0)
.8ae4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ae7	69 00		adc #$00			adc 	#0
.8ae9	a0 01		ldy #$01			ldy 	#1
.8aeb	91 36		sta ($36),y			sta 	(zTemp0),y
.8aed	80 0d		bra $8afc			bra 	_ASExit
.8aef					_ASCopyString:
.8aef	a0 00		ldy #$00			ldy 	#0
.8af1					_ASCopyLoop:
.8af1	b1 38		lda ($38),y			lda 	(zTemp1),y
.8af3	c8		iny				iny
.8af4	c8		iny				iny
.8af5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8af7	88		dey				dey
.8af8	c9 00		cmp #$00			cmp 	#0
.8afa	d0 f5		bne $8af1			bne 	_ASCopyLoop
.8afc					_ASExit:
.8afc	7a		ply				ply
.8afd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8afe					DereferenceTopTwo:
.8afe	e8		inx				inx
.8aff	20 03 8b	jsr $8b03			jsr 	Dereference 				; deref x+1
.8b02	ca		dex				dex  								; falls through to deref x
.8b03					Dereference:
.8b03	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8b06	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8b08	f0 57		beq $8b61			beq 	_DRFExit 					; not a reference
.8b0a	5a		phy				phy
.8b0b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8b0e	85 36		sta $36				sta 	zTemp0
.8b10	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b13	85 37		sta $37				sta 	zTemp0+1
.8b15	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8b18	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8b1a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b1d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8b20	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8b22	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8b24	f0 0f		beq $8b35			beq 	_DRFDereferenceTwo
.8b26	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8b28	f0 39		beq $8b63			beq 	_DRFFull
.8b2a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8b2d	29 03		and #$03			and 	#3
.8b2f	f0 32		beq $8b63			beq 	_DRFFull 					; the whole word
.8b31	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8b33	f0 07		beq $8b3c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8b35					_DRFDereferenceTwo:
.8b35	a0 01		ldy #$01			ldy 	#1
.8b37	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b39	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b3c					_DRFClear23:
.8b3c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8b3f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b42	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8b45	29 18		and #$18			and 	#NSBTypeMask
.8b47	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b4a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8b4c	d0 12		bne $8b60			bne 	_DRFNotString
.8b4e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8b51	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b54	d0 0a		bne $8b60			bne 	_DRFNotString
.8b56	a9 62		lda #$62			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8b58	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8b5b	a9 8b		lda #$8b			lda 	#_DRFNullString >> 8
.8b5d	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8b60					_DRFNotString
.8b60	7a		ply				ply 								; restore Y and exit
.8b61					_DRFExit:
.8b61	60		rts				rts
.8b62					_DRFNullString:
>8b62	00						.byte 	0
.8b63					_DRFFull:
.8b63	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8b65	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b67	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b6a	c8		iny				iny
.8b6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b70	c8		iny				iny
.8b71	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b73	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b76	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8b79	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8b7c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8b7e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8b81	f0 06		beq $8b89			beq 	_DRFNoExponent
.8b83	c8		iny				iny 								; if not, read the exponent as well.
.8b84	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b86	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b89					_DRFNoExponent:
.8b89	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8b8c	10 0d		bpl $8b9b			bpl 	_DRFExit2 					; if not, then exit.
.8b8e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8b90	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b93	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8b96	09 80		ora #$80			ora 	#NSBIsNegative
.8b98	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b9b					_DRFExit2:
.8b9b	7a		ply				ply
.8b9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8b9d					EncodeNumberStart:
.8b9d	38		sec				sec
.8b9e	80 01		bra $8ba1			bra 	EncodeNumberContinue+1
.8ba0					EncodeNumberContinue:
.8ba0	18		clc				clc
.8ba1					EncodeNumber:
.8ba1	08		php				php 								; save reset.
.8ba2	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ba4	f0 12		beq $8bb8			beq 	_ENIsOkay
.8ba6	c9 30		cmp #$30			cmp 	#"0"
.8ba8	90 04		bcc $8bae			bcc 	_ENBadNumber
.8baa	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bac	90 0a		bcc $8bb8			bcc 	_ENIsOkay
.8bae					_ENBadNumber:
.8bae	28		plp				plp 								; throw saved reset
.8baf	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8bb2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8bb4	f0 7e		beq $8c34			beq 	_ENConstructFinal
.8bb6					_ENFail:
.8bb6	18		clc				clc 								; not allowed
.8bb7	60		rts				rts
.8bb8					_ENIsOkay:
.8bb8	28		plp				plp 								; are we restarting
.8bb9	90 15		bcc $8bd0			bcc 	_ENNoRestart
.8bbb					_ENStartEncode:
.8bbb	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8bbd	f0 0c		beq $8bcb			beq 	_ENFirstDP
.8bbf	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8bc1	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.8bc4	a9 01		lda #$01			lda 	#ESTA_Low
.8bc6					_ENExitChange:
.8bc6	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8bc9	38		sec				sec
.8bca	60		rts				rts
.8bcb					_ENFirstDP:
.8bcb	20 b1 90	jsr $90b1			jsr 	NSMSetZero 					; clear integer part
.8bce	80 3f		bra $8c0f			bra 	_ESTASwitchFloat			; go straight to float and exi
.8bd0					_ENNoRestart:
.8bd0	48		pha				pha 								; save on stack.
.8bd1	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8bd4	c9 01		cmp #$01			cmp 	#ESTA_Low
.8bd6	f0 09		beq $8be1			beq  	_ESTALowState
.8bd8	c9 02		cmp #$02			cmp 	#ESTA_High
.8bda	f0 29		beq $8c05			beq 	_ESTAHighState
.8bdc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8bde	f0 3b		beq $8c1b			beq 	_ESTADecimalState
>8be0	db						.byte 	$DB 						; causes a break in the emulator
.8be1					_ESTALowState:
.8be1	68		pla				pla 								; get value back
.8be2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8be4	f0 29		beq $8c0f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8be6	29 0f		and #$0f			and 	#15 						; make digit
.8be8	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8beb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8bee	0a		asl a				asl 	a
.8bef	0a		asl a				asl 	a
.8bf0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bf3	0a		asl a				asl 	a
.8bf4	6d 06 07	adc $0706			adc 	DigitTemp
.8bf7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bfa	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8bfc	90 05		bcc $8c03			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8bfe	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8c00	8d 05 07	sta $0705			sta 	EncodeState
.8c03					_ESTANoSwitch:
.8c03	38		sec				sec
.8c04	60		rts				rts
.8c05					_ESTAHighState:
.8c05	68		pla				pla 								; get value back
.8c06	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8c08	f0 05		beq $8c0f			beq 	_ESTASwitchFloat
.8c0a	20 6e 8c	jsr $8c6e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8c0d	38		sec				sec
.8c0e	60		rts				rts
.8c0f					_ESTASwitchFloat:
.8c0f	9c 07 07	stz $0707			stz 	DecimalCount
.8c12	e8		inx				inx 								; zero the decimal additive.
.8c13	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.8c16	ca		dex				dex
.8c17	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8c19	80 ab		bra $8bc6			bra 	_ENExitChange
.8c1b					_ESTADecimalState:
.8c1b	68		pla				pla 								; digit.
.8c1c	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8c1e	f0 96		beq $8bb6			beq 	_ENFail
.8c20	e8		inx				inx 								; put digit into fractional part of X+1
.8c21	20 6e 8c	jsr $8c6e			jsr 	ESTAShiftDigitIntoMantissa
.8c24	ca		dex				dex
.8c25	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8c28	ad 07 07	lda $0707			lda 	DecimalCount
.8c2b	c9 0b		cmp #$0b			cmp 	#11
.8c2d	f0 02		beq $8c31			beq 	_ESTADSFail
.8c2f	38		sec				sec
.8c30	60		rts				rts
.8c31					_ESTADSFail:
.8c31	4c 2c 9b	jmp $9b2c			jmp 	RangeError
.8c34					_ENConstructFinal:
.8c34	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8c37	f0 33		beq $8c6c			beq 	_ENCFExit 					; no decimals
.8c39	5a		phy				phy
.8c3a	0a		asl a				asl 	a 							; x 4 and CLC
.8c3b	0a		asl a				asl 	a
.8c3c	6d 07 07	adc $0707			adc 	DecimalCount
.8c3f	a8		tay				tay
.8c40	b9 eb 9a	lda $9aeb,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8c43	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c46	b9 ec 9a	lda $9aec,y			lda 	DecimalScalarTable-5+1,y
.8c49	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c4c	b9 ed 9a	lda $9aed,y			lda 	DecimalScalarTable-5+2,y
.8c4f	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c52	b9 ee 9a	lda $9aee,y			lda 	DecimalScalarTable-5+3,y
.8c55	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c58	b9 ef 9a	lda $9aef,y			lda 	DecimalScalarTable-5+4,y
.8c5b	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c5e	a9 08		lda #$08			lda 	#NSTFloat
.8c60	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c63	7a		ply				ply
.8c64	e8		inx				inx 								; multiply decimal const by decimal scalar
.8c65	20 89 99	jsr $9989			jsr 	FloatMultiply
.8c68	ca		dex				dex
.8c69	20 1e 98	jsr $981e			jsr 	FloatAdd 					; add to integer part.
.8c6c					_ENCFExit:
.8c6c	18		clc				clc 								; reject the digit.
.8c6d	60		rts				rts
.8c6e					ESTAShiftDigitIntoMantissa:
.8c6e	29 0f		and #$0f			and 	#15 						; save digit
.8c70	48		pha				pha
.8c71	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8c74	48		pha				pha
.8c75	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c78	48		pha				pha
.8c79	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c7c	48		pha				pha
.8c7d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c80	48		pha				pha
.8c81	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 2
.8c84	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 4
.8c87	18		clc				clc 								; pop mantissa and add
.8c88	68		pla				pla
.8c89	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8c8c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c8f	68		pla				pla
.8c90	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8c93	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c96	68		pla				pla
.8c97	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8c9a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c9d	68		pla				pla
.8c9e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8ca1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8ca4	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 10
.8ca7	68		pla				pla 								; add digit
.8ca8	18		clc				clc
.8ca9	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8cac	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8caf	90 0d		bcc $8cbe			bcc 	_ESTASDExit
.8cb1	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8cb4	d0 08		bne $8cbe			bne 	_ESTASDExit
.8cb6	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8cb9	d0 03		bne $8cbe			bne 	_ESTASDExit
.8cbb	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8cbe					_ESTASDExit:
.8cbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8cbf					EvaluateTerm:
.8cbf	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc1	30 18		bmi $8cdb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8cc3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8cc5	b0 6f		bcs $8d36			bcs 	_ETVariable
.8cc7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8cc9	90 6e		bcc $8d39			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8ccb	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ccd	b0 6a		bcs $8d39			bcs 	_ETPuncUnary
.8ccf	20 9d 8b	jsr $8b9d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8cd2					_ETNumber:
.8cd2	c8		iny				iny 								; keep encoding until we have the numbers
.8cd3	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd5	20 a0 8b	jsr $8ba0			jsr 	EncodeNumberContinue
.8cd8	b0 f8		bcs $8cd2			bcs 	_ETNumber 					; go back if accepted.
.8cda	60		rts				rts
.8cdb					_ETCheckUnary:
.8cdb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8cdd	f0 41		beq $8d20			beq 	_ETString
.8cdf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8ce1	f0 12		beq $8cf5			beq 	_ETHexConstant
.8ce3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8ce5	90 0b		bcc $8cf2			bcc 	_ETSyntaxError
.8ce7	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8ce9	b0 07		bcs $8cf2			bcs 	_ETSyntaxError
.8ceb	da		phx				phx 								; push X on the stack
.8cec	0a		asl a				asl 	a 							; put vector x 2 into X
.8ced	aa		tax				tax
.8cee	c8		iny				iny 								; consume unary function token
.8cef	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8cf2					_ETSyntaxError:
.8cf2	4c 27 9b	jmp $9b27			jmp 	SyntaxError
.8cf5					_ETHexConstant:
.8cf5	c8		iny				iny 								; skip #
.8cf6	c8		iny				iny 								; skip count
.8cf7	20 b1 90	jsr $90b1			jsr 	NSMSetZero 					; clear result
.8cfa					_ETHLoop:
.8cfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfc	c8		iny				iny 								; and consume
.8cfd	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8cff	f0 1e		beq $8d1f			beq 	_ETHExit
.8d01	48		pha				pha 								; save on stack.
.8d02	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 2
.8d05	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 4
.8d08	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 8
.8d0b	20 c6 90	jsr $90c6			jsr 	NSMShiftLeft 				; x 16
.8d0e	68		pla				pla 								; ASCII
.8d0f	c9 41		cmp #$41			cmp 	#'A'
.8d11	90 02		bcc $8d15			bcc 	_ETHNotChar
.8d13	e9 07		sbc #$07			sbc 	#7
.8d15					_ETHNotChar:
.8d15	29 0f		and #$0f			and 	#15 						; digit now
.8d17	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8d1a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d1d	80 db		bra $8cfa			bra 	_ETHLoop 					; go round.
.8d1f					_ETHExit:
.8d1f	60		rts				rts
.8d20					_ETString:
.8d20	c8		iny				iny 								; look at length
.8d21	b1 30		lda ($30),y			lda 	(codePtr),y
.8d23	48		pha				pha
.8d24	c8		iny				iny 								; first character
.8d25	20 02 96	jsr $9602			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8d28	68		pla				pla 								; restore count and save
.8d29	85 36		sta $36				sta 	zTemp0
.8d2b	98		tya				tya 								; add length to Y to skip it.
.8d2c	18		clc				clc
.8d2d	65 36		adc $36				adc 	zTemp0
.8d2f	a8		tay				tay
.8d30	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8d32	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d35	60		rts				rts
.8d36					_ETVariable:
.8d36	4c 90 8d	jmp $8d90			jmp 	VariableHandler
.8d39					_ETPuncUnary:
.8d39	c8		iny				iny 								; consume the unary character
.8d3a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8d3c	f0 2d		beq $8d6b			beq 	_ETUnaryNegate
.8d3e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8d40	f0 39		beq $8d7b			beq 	_ETDereference
.8d42	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8d44	f0 43		beq $8d89			beq 	_ETParenthesis
.8d46	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8d48	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8d4a	f0 06		beq $8d52			beq 	_ETIndirection
.8d4c	e6 36		inc $36				inc 	zTemp0
.8d4e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8d50	d0 a0		bne $8cf2			bne 	_ETSyntaxError
.8d52					_ETIndirection:
.8d52	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8d54	1a		inc a				inc 	a
.8d55	48		pha				pha
.8d56	20 bf 8c	jsr $8cbf			jsr 	EvaluateTerm				; evaluate the term
.8d59	20 03 8b	jsr $8b03			jsr 	Dereference 				; dereference it.
.8d5c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8d5f	d0 07		bne $8d68			bne 	_ETTypeMismatch
.8d61	68		pla				pla 								; indirection 1-2
.8d62	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8d64	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d67	60		rts				rts
.8d68					_ETTypeMismatch:
.8d68	4c 31 9b	jmp $9b31			jmp 	TypeError
.8d6b					_ETUnaryNegate:
.8d6b	20 bf 8c	jsr $8cbf			jsr 	EvaluateTerm				; evaluate the term
.8d6e	20 03 8b	jsr $8b03			jsr 	Dereference 				; dereference it.
.8d71	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8d74	29 10		and #$10			and 	#NSTString
.8d76	d0 f0		bne $8d68			bne 	_ETTypeMismatch
.8d78	4c 5d 90	jmp $905d			jmp 	NSMNegate  					; just toggles the sign bit.
.8d7b					_ETDereference:
.8d7b	20 bf 8c	jsr $8cbf			jsr 	EvaluateTerm				; evaluate the term
.8d7e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8d81	29 20		and #$20			and 	#NSBIsReference
.8d83	f0 e3		beq $8d68			beq 	_ETTypeMismatch
.8d85	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8d88	60		rts				rts
.8d89					_ETParenthesis:
.8d89	20 ee 89	jsr $89ee			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8d8c	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; check for )
.8d8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8d90					VariableHandler:
.8d90	b1 30		lda ($30),y			lda 	(codePtr),y
.8d92	18		clc				clc
.8d93	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d95	85 37		sta $37				sta 	zTemp0+1
.8d97	c8		iny				iny
.8d98	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9a	85 36		sta $36				sta 	zTemp0
.8d9c	c8		iny				iny
.8d9d	18		clc				clc									; copy variable address+3 to mantissa
.8d9e	69 03		adc #$03			adc 	#3
.8da0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8da3	a5 37		lda $37				lda 	zTemp0+1
.8da5	69 00		adc #$00			adc 	#0
.8da7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8daa	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8dad	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8db0	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8db3	5a		phy				phy
.8db4	a0 02		ldy #$02			ldy 	#2 							; read type
.8db6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db8	7a		ply				ply
.8db9	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8dbb	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8dbd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dc0	29 04		and #$04			and 	#NSBIsArray
.8dc2	d0 01		bne $8dc5			bne 	_VHArray
.8dc4	60		rts				rts
.8dc5					_VHArray:
>8dc5	db						.byte 	$DB 						; causes a break in the emulator
.8dc6	80 fd		bra $8dc5			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9a0f					AbsUnary:
.9a0f	fa		plx				plx 								; restore stack pos
.9a10	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; get a float or int
.9a13	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a16	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9a19	29 7f		and #$7f			and 	#$7F
.9a1b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8dc8					AllocUnary:
.8dc8	fa		plx				plx 								; restore stack pos
.8dc9	20 3d 90	jsr $903d			jsr 	Evaluate16BitInteger		; get bytes required.
.8dcc	20 57 96	jsr $9657			jsr 	CheckRightBracket
.8dcf	da		phx				phx 								; save X/Y
.8dd0	5a		phy				phy
.8dd1	8a		txa				txa 								; copy X into Y
.8dd2	a8		tay				tay
.8dd3	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8dd6	aa		tax				tax
.8dd7	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8dda	20 e7 8d	jsr $8de7			jsr 	AllocateXABytes 			; allocate memory
.8ddd	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8de0	8a		txa				txa
.8de1	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8de4	7a		ply				ply
.8de5	fa		plx				plx
.8de6	60		rts				rts
.8de7					AllocateXABytes:
.8de7	5a		phy				phy
.8de8	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.8deb	84 36		sty $36				sty 	zTemp0
.8ded	5a		phy				phy
.8dee	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8df1	84 37		sty $37				sty 	zTemp0+1
.8df3	5a		phy				phy
.8df4	18		clc				clc 								; add to low memory pointer
.8df5	6d 0c 07	adc $070c			adc 	lowMemPtr
.8df8	8d 0c 07	sta $070c			sta 	lowMemPtr
.8dfb	8a		txa				txa
.8dfc	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8dff	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8e02					_ClearMemory:
.8e02	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.8e05	c5 36		cmp $36				cmp 	zTemp0
.8e07	d0 07		bne $8e10			bne 	_CMClearNext
.8e09	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.8e0c	c5 37		cmp $37				cmp 	zTemp0+1
.8e0e	f0 0c		beq $8e1c			beq 	_CMExit
.8e10					_CMClearNext:
.8e10	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.8e12	92 36		sta ($36)			sta 	(zTemp0)
.8e14	e6 36		inc $36				inc 	zTemp0
.8e16	d0 ea		bne $8e02			bne 	_ClearMemory
.8e18	e6 37		inc $37				inc		zTemp0+1
.8e1a	80 e6		bra $8e02			bra 	_ClearMemory
.8e1c					_CMExit:
.8e1c	fa		plx				plx
.8e1d	68		pla				pla
.8e1e	7a		ply				ply
.8e1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a1f					AscUnary:
.9a1f	fa		plx				plx 								; restore stack pos
.9a20	20 10 90	jsr $9010			jsr 	EvaluateString 				; get a string
.9a23	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9a25	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.9a28	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a2c					FracUnary:
.9a2c	fa		plx				plx 								; restore stack pos
.9a2d	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; get a float or int
.9a30	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a33	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9a36	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a38	f0 04		beq $9a3e			beq 	_IUZero
.9a3a	20 fc 98	jsr $98fc			jsr 	FloatFractionalPart
.9a3d	60		rts				rts
.9a3e					_IUZero:
.9a3e	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.9a41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a42					IntUnary:
.9a42	fa		plx				plx 								; restore stack pos
.9a43	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; get a float or int
.9a46	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a49	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9a4c	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a4e	f0 03		beq $9a53			beq 	_IUExit
.9a50	20 5f 99	jsr $995f			jsr 	FloatIntegerPart
.9a53					_IUExit:
.9a53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a54					LenUnary:
.9a54	fa		plx				plx 								; restore stack pos
.9a55	20 10 90	jsr $9010			jsr 	EvaluateString 				; get a string
.9a58	5a		phy				phy
.9a59	a0 00		ldy #$00			ldy 	#0 							; find length
.9a5b					_LenFind:
.9a5b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a5d	f0 06		beq $9a65			beq 	_LenExit
.9a5f	c8		iny				iny
.9a60	d0 f9		bne $9a5b			bne 	_LenFind
.9a62	4c 2c 9b	jmp $9b2c			jmp 	RangeError 					; string > 255
.9a65					_LenExit:
.9a65	98		tya				tya
.9a66	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.9a69	7a		ply				ply
.9a6a	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8e20					Unary_Not:
.8e20	fa		plx				plx
.8e21	20 28 90	jsr $9028			jsr 	EvaluateInteger 			; get integer
.8e24	20 57 96	jsr $9657			jsr 	CheckRightBracket
.8e27	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; zero mantissa ?
.8e2a	f0 04		beq $8e30			beq 	_NotZero
.8e2c	20 b1 90	jsr $90b1			jsr 	NSMSetZero
.8e2f	60		rts				rts
.8e30					_NotZero:
.8e30	4c 52 86	jmp $8652			jmp 	ReturnTrue
.8e33					_UNBad:
.8e33	4c 36 9b	jmp $9b36			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8e36					Unary_Rnd:
.8e36	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; number to use.
.8e39	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; closing bracket
.8e3c	20 65 8e	jsr $8e65			jsr 	Random32Bit 				; generate a number.
.8e3f	ad 08 07	lda $0708			lda 	RandomSeed+0
.8e42	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e45	ad 09 07	lda $0709			lda 	RandomSeed+1
.8e48	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e4b	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8e4e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e51	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8e54	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8e56	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e59	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8e5b	8d 28 06	sta $0628			sta 	NSExponent
.8e5e	a9 08		lda #$08			lda 	#NSTFloat
.8e60	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8e63	db						.byte 	$DB 						; causes a break in the emulator
.8e64	60		rts				rts
.8e65					Random32Bit:
.8e65	5a		phy				phy
.8e66	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8e68	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8e6b	d0 03		bne $8e70			bne 	_Random1
.8e6d	a8		tay				tay 								; if so do it 256 times
.8e6e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8e70					_Random1:
.8e70	0a		asl a				asl 	a 							; LSFR RNG
.8e71	2e 09 07	rol $0709			rol 	RandomSeed+1
.8e74	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8e77	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8e7a	90 02		bcc $8e7e			bcc 	_Random2
.8e7c	49 c5		eor #$c5			eor 	#$C5
.8e7e					_Random2:
.8e7e	88		dey				dey
.8e7f	d0 ef		bne $8e70			bne 	_Random1
.8e81	7a		ply				ply
.8e82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9a6e					SgnUnary:
.9a6e	fa		plx				plx 								; restore stack pos
.9a6f	20 05 90	jsr $9005			jsr 	EvaluateNumber 				; get a float or int
.9a72	20 57 96	jsr $9657			jsr 	CheckRightBracket
.9a75	20 e1 90	jsr $90e1			jsr 	NSMIsZero 					; if zero
.9a78	f0 10		beq $9a8a			beq 	_SGZero  					; return Int Zero
.9a7a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9a7d	48		pha				pha
.9a7e	a9 01		lda #$01			lda 	#1 							; set to 1
.9a80	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.9a83	68		pla				pla
.9a84	29 80		and #$80			and		#$80 						; copy the sign byte out
.9a86	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a89	60		rts				rts
.9a8a	20 b1 90	jsr $90b1	_SGZero:jsr 	NSMSetZero
.9a8d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9a8e					ValUnary:
.9a8e	fa		plx				plx 								; restore stack pos
.9a8f	20 a4 9a	jsr $9aa4			jsr 	ValMainCode 				; do the main val() code
.9a92	b0 01		bcs $9a95			bcs 	_VUError 					; couldn't convert
.9a94	60		rts				rts
.9a95					_VUError:
.9a95	4c 31 9b	jmp $9b31			jmp 	TypeError
.9a98					IsValUnary:
.9a98	fa		plx				plx 								; restore stack pos
.9a99	20 a4 9a	jsr $9aa4			jsr 	ValMainCode 				; do the main val() code
.9a9c	b0 03		bcs $9aa1			bcs 	_VUBad
.9a9e	4c 52 86	jmp $8652			jmp 	ReturnTrue
.9aa1					_VUBad:
.9aa1	4c 5e 86	jmp $865e			jmp 	ReturnFalse
.9aa4					ValMainCode:
.9aa4	20 10 90	jsr $9010			jsr 	EvaluateString 				; get a string
.9aa7	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; check right bracket present
.9aaa	5a		phy				phy
.9aab	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9aad	f0 17		beq $9ac6			beq 	_VMCFail2
.9aaf	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9ab1	48		pha				pha 								; save first character
.9ab2	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9ab4	d0 01		bne $9ab7			bne 	_VMCStart
.9ab6	c8		iny				iny 								; skip over -
.9ab7					_VMCStart:
.9ab7	38		sec				sec 								; initialise first time round.
.9ab8					_VMCNext:
.9ab8	c8		iny				iny 								; pre-increment
.9ab9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9abb	f0 0c		beq $9ac9			beq 	_VMCSuccess 				; successful.
.9abd	20 a1 8b	jsr $8ba1			jsr 	EncodeNumber 				; send it to the number-builder
.9ac0	90 03		bcc $9ac5			bcc 	_VMCFail 					; if failed, give up.
.9ac2	18		clc				clc 								; next time round, countinue
.9ac3	80 f3		bra $9ab8			bra 	_VMCNext
.9ac5					_VMCFail:
.9ac5	68		pla				pla
.9ac6					_VMCFail2:
.9ac6	7a		ply				ply
.9ac7	38		sec				sec
.9ac8	60		rts				rts
.9ac9					_VMCSuccess:
.9ac9	a9 00		lda #$00			lda 	#0 							; construct final
.9acb	20 a1 8b	jsr $8ba1			jsr 	EncodeNumber
.9ace	68		pla				pla
.9acf	c9 2d		cmp #$2d			cmp 	#"-"
.9ad1	d0 03		bne $9ad6			bne 	_VMCNotNegative
.9ad3	20 5d 90	jsr $905d			jsr		NSMNegate
.9ad6					_VMCNotNegative:
.9ad6	7a		ply				ply
.9ad7	18		clc				clc
.9ad8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8e83					ChrUnary:
.8e83	fa		plx				plx 								; restore stack pos
.8e84	20 49 90	jsr $9049			jsr 	Evaluate8BitInteger			; get value
.8e87	48		pha				pha
.8e88	20 57 96	jsr $9657			jsr 	CheckRightBracket
.8e8b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8e8d	20 11 9d	jsr $9d11			jsr 	StringTempAllocate
.8e90	68		pla				pla 								; write number to it
.8e91	20 4f 9d	jsr $9d4f			jsr 	StringTempWrite
.8e94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8e95					SpcUnary:
.8e95	fa		plx				plx 								; restore stack pos
.8e96	20 49 90	jsr $9049			jsr 	Evaluate8BitInteger			; get value
.8e99	5a		phy				phy
.8e9a	48		pha				pha 								; save count
.8e9b	20 11 9d	jsr $9d11			jsr 	StringTempAllocate
.8e9e	7a		ply				ply 								; to do count in Y
.8e9f					_SpcLoop:
.8e9f	c0 00		cpy #$00			cpy 	#0
.8ea1	f0 08		beq $8eab			beq 	_SpcExit
.8ea3	a9 20		lda #$20			lda 	#32
.8ea5	20 4f 9d	jsr $9d4f			jsr 	StringTempWrite
.8ea8	88		dey				dey
.8ea9	80 f4		bra $8e9f			bra 	_SPCLoop
.8eab					_SpcExit:
.8eab	7a		ply				ply
.8eac	20 57 96	jsr $9657			jsr 	CheckRightBracket
.8eaf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8eb0					Unary_Str:
.8eb0	fa		plx				plx
.8eb1	20 05 90	jsr $9005			jsr 	EvaluateNumber  			; get number
.8eb4	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; closing bracket
.8eb7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8eb9	20 d2 8e	jsr $8ed2			jsr 	ConvertNumberToString 		; do the conversion.
.8ebc	a9 21		lda #$21			lda		#33 						; create buffer
.8ebe	20 11 9d	jsr $9d11			jsr 	StringTempAllocate 			; allocate memory
.8ec1	da		phx				phx
.8ec2	a2 00		ldx #$00			ldx 	#0
.8ec4					_USCopy:
.8ec4	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ec7	20 4f 9d	jsr $9d4f			jsr 	StringTempWrite
.8eca	e8		inx				inx
.8ecb	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ece	d0 f4		bne $8ec4			bne 	_USCopy
.8ed0	fa		plx				plx
.8ed1	60		rts				rts
.8ed2					ConvertNumberToString:
.8ed2	5a		phy				phy 								; save code position
.8ed3	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8ed6	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8ed9	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8edc	10 0a		bpl $8ee8			bpl 	_CNTSNotNegative
.8ede	29 7f		and #$7f			and 	#$7F 						; make +ve
.8ee0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ee3	a9 2d		lda #$2d			lda 	#"-"
.8ee5	20 4e 8f	jsr $8f4e			jsr 	WriteDecimalBuffer
.8ee8					_CNTSNotNegative:
.8ee8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8eeb	f0 15		beq $8f02			beq 	_CNTSNotFloat
.8eed	e8		inx				inx 								; round up
.8eee	a9 01		lda #$01			lda 	#1
.8ef0	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.8ef3	ca		dex				dex
.8ef4	bd 28 06	lda $0628,x			lda		NSExponent,x
.8ef7	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8efa	a9 08		lda #$08			lda 	#NSTFloat
.8efc	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8eff	20 1e 98	jsr $981e			jsr 	FloatAdd
.8f02					_CNTSNotFloat:
.8f02	20 30 8f	jsr $8f30			jsr 	MakePlusTwoString
.8f05	20 fc 98	jsr $98fc			jsr 	FloatFractionalPart 		; get the fractional part
.8f08	20 c0 99	jsr $99c0			jsr 	NSNormalise					; normalise , exit if zero
.8f0b	f0 21		beq $8f2e			beq 	_CNTSExit
.8f0d	a9 2e		lda #$2e			lda 	#"."
.8f0f	20 4e 8f	jsr $8f4e			jsr 	WriteDecimalBuffer 			; write decimal place
.8f12					_CNTSDecimal:
.8f12	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8f15	30 17		bmi $8f2e			bmi 	_CNTSExit
.8f17	e8		inx				inx 								; x 10.0
.8f18	a9 0a		lda #$0a			lda 	#10
.8f1a	20 b3 90	jsr $90b3			jsr 	NSMSetByte
.8f1d	a9 08		lda #$08			lda 	#NSTFloat
.8f1f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f22	ca		dex				dex
.8f23	20 89 99	jsr $9989			jsr 	FloatMultiply
.8f26	20 30 8f	jsr $8f30			jsr 	MakePlusTwoString
.8f29	20 fc 98	jsr $98fc			jsr 	FloatFractionalPart 		; get the fractional part
.8f2c	80 e4		bra $8f12			bra 	_CNTSDecimal 				; keep going.
.8f2e					_CNTSExit:
.8f2e	7a		ply				ply
.8f2f	60		rts				rts
.8f30					MakePlusTwoString:
.8f30	da		phx				phx
.8f31	20 88 90	jsr $9088			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8f34	e8		inx				inx 								; access it
.8f35	e8		inx				inx
.8f36	20 5f 99	jsr $995f			jsr 	FloatIntegerPart 			; make it an integer
.8f39	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8f3b	20 c8 97	jsr $97c8			jsr 	ConvertInt32
.8f3e	a2 00		ldx #$00			ldx	 	#0
.8f40					_MPTSCopy:
.8f40	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8f43	20 4e 8f	jsr $8f4e			jsr 	WriteDecimalBuffer
.8f46	e8		inx				inx
.8f47	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8f4a	d0 f4		bne $8f40			bne 	_MPTSCopy
.8f4c	fa		plx				plx
.8f4d	60		rts				rts
.8f4e					WriteDecimalBuffer:
.8f4e	da		phx				phx
.8f4f	ae 14 07	ldx $0714			ldx 	dbOffset
.8f52	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8f55	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8f58	ee 14 07	inc $0714			inc 	dbOffset
.8f5b	fa		plx				plx
.8f5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8f5d					Unary_Left:
.8f5d	fa		plx				plx
.8f5e	18		clc				clc 								; only one parameter
.8f5f	20 d4 8f	jsr $8fd4			jsr 	SubstringInitial 			; set up.
.8f62	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8f65	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f68	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8f6b	80 2c		bra $8f99			bra 	SubstringMain
.8f6d					Unary_Right:
.8f6d	fa		plx				plx
.8f6e	18		clc				clc 								; only one parameter
.8f6f	20 d4 8f	jsr $8fd4			jsr 	SubstringInitial 			; set up.
.8f72	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8f75	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f78	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8f7b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8f7e	b0 02		bcs $8f82			bcs 	_URNotUnderflow
.8f80	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8f82					_URNotUnderFlow:
.8f82	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8f85	80 12		bra $8f99			bra 	SubStringMain
.8f87					Unary_Mid:
.8f87	fa		plx				plx
.8f88	38		sec				sec 								; two parameters
.8f89	20 d4 8f	jsr $8fd4			jsr 	SubstringInitial 			; set up.
.8f8c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8f8f	f0 05		beq $8f96			beq 	_UMError
.8f91	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8f94	80 03		bra $8f99			bra 	SubStringMain
.8f96					_UMError:
.8f96	4c 36 9b	jmp $9b36			jmp 	ArgumentError
.8f99					SubStringMain:
.8f99	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8f9c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8f9f	b0 2d		bcs $8fce			bcs 	_SSMNull 					; if so, return an empty string.
.8fa1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8fa4	f0 28		beq $8fce			beq 	_SSMNull 					; return empty string.
.8fa6	18		clc				clc 								; add the offset +1 to the address and
.8fa7	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8faa	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8fad	85 36		sta $36				sta 	zTemp0
.8faf	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8fb2	69 00		adc #$00			adc 	#0
.8fb4	85 37		sta $37				sta 	zTemp0+1
.8fb6					_SSMNoCarry:
.8fb6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8fb9	20 11 9d	jsr $9d11			jsr 	StringTempAllocate 			; allocate that many characters
.8fbc	5a		phy				phy 								; save Y
.8fbd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8fbf					_SSMCopy:
.8fbf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8fc1	f0 09		beq $8fcc			beq 	_SSMEString 				; no more to copy
.8fc3	20 4f 9d	jsr $9d4f			jsr 	StringTempWrite 			; and write it out.
.8fc6	c8		iny				iny
.8fc7	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8fca	d0 f3		bne $8fbf			bne 	_SSMCopy
.8fcc					_SSMEString:
.8fcc	7a		ply				ply
.8fcd					_SSMExit:
.8fcd	60		rts				rts
.8fce					_SSMNull:
.8fce	a9 00		lda #$00			lda 	#0
.8fd0	20 11 9d	jsr $9d11			jsr 	StringTempAllocate
.8fd3	60		rts				rts
.8fd4					SubstringInitial:
.8fd4	da		phx				phx 								; save initial stack position
.8fd5	08		php				php 								; save carry on stack indicating 2 parameters
.8fd6	20 10 90	jsr $9010			jsr 	EvaluateString 				; get a string
.8fd9	5a		phy				phy 								; calculate length to exponent.
.8fda	a0 ff		ldy #$ff			ldy 	#$FF
.8fdc					_SIFindLength:
.8fdc	c8		iny				iny
.8fdd	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fdf	d0 fb		bne $8fdc			bne 	_SIFindLength
.8fe1	98		tya				tya
.8fe2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8fe5	7a		ply				ply
.8fe6	e8		inx				inx
.8fe7	20 5f 96	jsr $965f			jsr 	CheckComma 					; comma next
.8fea	20 49 90	jsr $9049			jsr 	Evaluate8BitInteger 		; get next parameter
.8fed	28		plp				plp 								; is it the last parameter ?
.8fee	90 07		bcc $8ff7			bcc 	_SSIExit 					; if so, exit.
.8ff0	e8		inx				inx
.8ff1	20 5f 96	jsr $965f			jsr 	CheckComma 					; comma next
.8ff4	20 49 90	jsr $9049			jsr 	Evaluate8BitInteger 		; get last parameter
.8ff7					_SSIExit:
.8ff7	fa		plx				plx
.8ff8	20 57 96	jsr $9657			jsr 	CheckRightBracket 			; check closing bracket
.8ffb	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8ffc					EvaluateValue:
.8ffc	48		pha				pha
.8ffd	20 ee 89	jsr $89ee			jsr		EvaluateExpression 			; expression
.9000	20 03 8b	jsr $8b03			jsr 	Dereference					; derefernce it
.9003	68		pla				pla
.9004	60		rts				rts
.9005					EvaluateNumber:
.9005	20 fc 8f	jsr $8ffc			jsr 	EvaluateValue 				; get a value
.9008	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.900b	29 10		and #$10			and 	#NSBIsString
.900d	d0 16		bne $9025			bne 	HelperTypeError
.900f	60		rts				rts
.9010					EvaluateString:
.9010	20 fc 8f	jsr $8ffc			jsr 	EvaluateValue 				; get a value
.9013	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9016	29 10		and #$10			and 	#NSBIsString
.9018	f0 0b		beq $9025			beq 	HelperTypeError
.901a					CopyAddressToTemp0:
.901a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.901d	85 36		sta $36				sta 	zTemp0
.901f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9022	85 37		sta $37				sta 	zTemp0+1
.9024	60		rts				rts
.9025					HelperTypeError:
.9025	4c 31 9b	jmp $9b31			jmp 	TypeError
.9028					EvaluateInteger:
.9028	20 05 90	jsr $9005			jsr 	EvaluateNumber
.902b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.902e	d0 0a		bne $903a			bne 	HelperValueError 			; if not, it's a float.
.9030	60		rts				rts
.9031					EvaluateUnsignedInteger:
.9031	20 28 90	jsr $9028			jsr 	EvaluateInteger 			; check integer is +ve
.9034	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9037	30 01		bmi $903a			bmi 	HelperValueError
.9039	60		rts				rts
.903a					HelperValueError:
.903a	4c 36 9b	jmp $9b36			jmp 	ArgumentError
.903d					Evaluate16BitInteger:
.903d	20 31 90	jsr $9031			jsr	 	EvaluateUnsignedInteger		; get integer
.9040	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9043	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9046	d0 f2		bne $903a			bne 	HelperValueError
.9048	60		rts				rts
.9049					Evaluate8BitInteger:
.9049	20 31 90	jsr $9031			jsr	 	EvaluateUnsignedInteger 	; get an integer
.904c	d0 ec		bne $903a			bne 	HelperValueError
.904e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9051	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9054	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9057	d0 e1		bne $903a			bne 	HelperValueError
.9059	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.905c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9ad9					Multiply8x8:
.9ad9	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9ada	85 36		sta $36			  	sta 	zTemp0
.9adc	86 37		stx $37				stx 	zTemp0+1
.9ade	a9 00		lda #$00			lda 	#0
.9ae0	a2 08		ldx #$08			ldx 	#8
.9ae2					_M88Loop:
.9ae2	90 03		bcc $9ae7			bcc 	_M88NoAdd
.9ae4	18		clc				clc
.9ae5	65 37		adc $37				adc 	zTemp0+1
.9ae7					_M88NoAdd:
.9ae7	6a		ror a				ror 	a
.9ae8	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9aea	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9aeb	d0 f5		bne $9ae2			bne 	_M88Loop
.9aed	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9aef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.905d					NSMNegate:
.905d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9060	49 80		eor #$80			eor 	#NSBIsNegative
.9062	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9065	60		rts				rts
.9066					NSMNegateMantissa:
.9066	38		sec				sec
.9067	a9 00		lda #$00			lda 	#0
.9069	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.906c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.906f	a9 00		lda #$00			lda 	#0
.9071	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9074	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9077	a9 00		lda #$00			lda 	#0
.9079	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.907c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.907f	a9 00		lda #$00			lda 	#0
.9081	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9084	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9087	60		rts				rts
.9088					NSMShiftUpTwo:
.9088	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.908b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.908e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9091	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9094	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9097	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.909a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.909d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.90a0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.90a3	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.90a6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.90a9	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.90ac	60		rts				rts
.90ad					NSMSetZeroMantissaOnly:
.90ad	a9 00		lda #$00			lda 	#0
.90af	80 08		bra $90b9			bra 	NSMSetMantissa
.90b1					NSMSetZero:
.90b1	a9 00		lda #$00			lda 	#0
.90b3					NSMSetByte:
.90b3	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.90b6	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.90b9					NSMSetMantissa:
.90b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.90bc	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.90bf	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.90c2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.90c5	60		rts				rts
.90c6					NSMShiftLeft:
.90c6	18		clc				clc
.90c7					NSMRotateLeft:
.90c7	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.90ca	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.90cd	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.90d0	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.90d3	60		rts				rts
.90d4					NSMShiftRight:
.90d4	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.90d7	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.90da	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.90dd	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.90e0	60		rts				rts
.90e1					NSMIsZero:
.90e1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.90e4	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.90e7	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.90ea	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.90ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9af0					DecimalScalarTable:
>9af0	66 66 66 66				.dword $66666666 ; 0.1
>9af4	de					.byte $de
>9af5	1f 85 eb 51				.dword $51eb851f ; 0.01
>9af9	db					.byte $db
>9afa	4c 37 89 41				.dword $4189374c ; 0.001
>9afe	d8					.byte $d8
>9aff	ac 8b db 68				.dword $68db8bac ; 0.0001
>9b03	d4					.byte $d4
>9b04	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9b08	d1					.byte $d1
>9b09	83 de 1b 43				.dword $431bde83 ; 1e-06
>9b0d	ce					.byte $ce
>9b0e	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9b12	ca					.byte $ca
>9b13	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9b17	c7					.byte $c7
>9b18	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9b1c	c4					.byte $c4
>9b1d	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9b21	c0					.byte $c0
>9b22	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9b26	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9b27					SyntaxError:
.9b27	a9 02		lda #$02		lda	#2
.9b29	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9b2c					RangeError:
.9b2c	a9 04		lda #$04		lda	#4
.9b2e	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9b31					TypeError:
.9b31	a9 05		lda #$05		lda	#5
.9b33	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9b36					ArgumentError:
.9b36	a9 07		lda #$07		lda	#7
.9b38	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9b3b					NotDoneError:
.9b3b	a9 0c		lda #$0c		lda	#12
.9b3d	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9b40					ErrorText:
>9b40	42 72 65 61 6b 00			.text	"Break",0
>9b46	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9b4e	72 72 6f 72 00
>9b53	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9b5b	20 62 79 20 7a 65 72 6f 00
>9b64	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9b6c	61 6e 67 65 00
>9b71	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9b79	6d 61 74 63 68 00
>9b7f	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9b87	65 6d 6f 72 79 00
>9b8d	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9b95	61 72 67 75 6d 65 6e 74 00
>9b9e	53 74 6f 70 00				.text	"Stop",0
>9ba3	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9bab	6f 6f 20 6c 6f 6e 67 00
>9bb3	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9bbb	6e 20 66 61 69 6c 65 64 00
>9bc4	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9bcc	61 74 61 00
>9bd0	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9bd8	65 6e 74 65 64 00
>9bde	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9be6	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9bf2	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9bfa	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9c07	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9c0f	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9c1c	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9c24	68 6f 75 74 20 57 68 69 6c 65 00
>9c2f	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9c37	68 6f 75 74 20 46 6f 72 00
>9c40	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9c48	61 63 6b 20 66 75 6c 6c 00
>9c51	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9c59	75 63 74 75 72 65 00
>9c60	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9c68	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9c75	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9c7d	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9c8b	41 72 72 61 79 20 73 69			.text	"Array size",0
>9c93	7a 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.90ee					StackOpen:
.90ee	48		pha				pha 								; save frame byte
.90ef	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.90f1	0a		asl a				asl 	a 							; claim twice this for storage
.90f2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.90f4	38		sec				sec 								; so basically subtracting from
.90f5	65 34		adc $34				adc 	basicStack 	 				; basicStack
.90f7	85 34		sta $34				sta 	basicStack
.90f9	b0 08		bcs $9103			bcs 	_SONoBorrow
.90fb	c6 35		dec $35				dec 	basicStack+1
.90fd	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.90ff	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9101	90 04		bcc $9107			bcc 	_SOMemory
.9103					_SONoBorrow:
.9103	68		pla				pla 								; get marker back and write at TOS
.9104	92 34		sta ($34)			sta 	(basicStack)
.9106	60		rts				rts
.9107					_SOMemory:
.9107							ERR_STACK
.9107					StackClose:
.9107	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9109	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.910b	0a		asl a				asl 	a 							; claim twice this.
.910c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.910e	85 34		sta $34				sta 	basicStack
.9110	90 02		bcc $9114			bcc 	_SCExit
.9112	e6 35		inc $35				inc 	basicStack+1
.9114					_SCExit:
.9114	60		rts				rts
.9115					StackCheckFrame:
.9115	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9117	29 f0		and #$f0			and 	#$F0 						; check type bits
.9119	d0 01		bne $911c			bne 	_SCFError 					; different, we have structures mixed up
.911b	60		rts				rts
.911c					_SCFError:
.911c	8a		txa				txa 								; report error X
.911d	4c e5 85	jmp $85e5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9120					STKSaveCodePosition:
.9120	5a		phy				phy
.9121	98		tya				tya 								; save Y
.9122	a0 05		ldy #$05			ldy 	#5
.9124	91 34		sta ($34),y			sta 	(basicStack),y
.9126	88		dey				dey 								; save Code Pointer
.9127					_STKSaveLoop:
.9127	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.912a	91 34		sta ($34),y			sta 	(basicStack),y
.912c	88		dey				dey
.912d	d0 f8		bne $9127			bne 	_STKSaveLoop
.912f	7a		ply				ply
.9130	60		rts				rts
.9131					STKLoadCodePosition:
.9131	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9133					_STKLoadLoop:
.9133	b1 34		lda ($34),y			lda 	(basicStack),y
.9135	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9138	c8		iny				iny
.9139	c0 05		cpy #$05			cpy 	#5
.913b	d0 f6		bne $9133			bne 	_STKLoadLoop
.913d	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.913f	a8		tay				tay
.9140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9141					StackReset:
.9141	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9143	85 34		sta $34				sta 	0+basicStack
.9145	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9147	85 35		sta $35				sta 	1+basicStack
.9149	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.914b	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.914d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9c96					StringConcrete:
.9c96	5a		phy				phy 								; save position on stack
.9c97	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9c9a	85 38		sta $38				sta 	zTemp1
.9c9c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9c9f	85 39		sta $39				sta 	zTemp1+1
.9ca1	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9ca3					_SALength:
.9ca3	c8		iny				iny
.9ca4	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ca6	d0 fb		bne $9ca3			bne 	_SALength
.9ca8	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9caa	b0 3f		bcs $9ceb			bcs 	_SALengthError
.9cac	98		tya				tya 				 				; length of the new string
.9cad	18		clc				clc
.9cae	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9cb0	90 02		bcc $9cb4			bcc 	_SAHaveLength
.9cb2	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9cb4					_SAHaveLength:
.9cb4	48		pha				pha 								; save length.
.9cb5	38		sec				sec
.9cb6	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9cb8	6d 0e 07	adc $070e			adc 	StringMemory
.9cbb	8d 0e 07	sta $070e			sta 	StringMemory
.9cbe	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9cc0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9cc3	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9cc5	6d 0f 07	adc $070f			adc 	StringMemory+1
.9cc8	8d 0f 07	sta $070f			sta 	StringMemory+1
.9ccb	85 3b		sta $3b				sta 	zTemp2+1
.9ccd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9cd0	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9cd1	38		sec				sec
.9cd2	e9 03		sbc #$03			sbc 	#3
.9cd4	92 3a		sta ($3a)			sta 	(zTemp2)
.9cd6	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9cd8	a0 01		ldy #$01			ldy 	#1
.9cda	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9cdc					_SACopyNewString:
.9cdc	a0 00		ldy #$00			ldy 	#0
.9cde					_SACopyNSLoop:
.9cde	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9ce0	c8		iny				iny 								; write two on in string storage
.9ce1	c8		iny				iny
.9ce2	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9ce4	88		dey				dey 								; this makes it one one.
.9ce5	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9ce7	d0 f5		bne $9cde			bne 	_SACopyNSLoop
.9ce9	7a		ply				ply
.9cea	60		rts				rts
.9ceb					_SALengthError:
.9ceb	a9 09		lda #$09		lda	#9
.9ced	4c e5 85	jmp $85e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9cf0					StringSystemInitialise:
.9cf0	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9cf2	8d 0e 07	sta $070e			sta 	0+StringMemory
.9cf5	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9cf7	8d 0f 07	sta $070f			sta 	1+StringMemory
.9cfa	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9cfd	60		rts				rts
.9cfe					StringSpaceInitialise:
.9cfe	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9d00	8d 10 07	sta $0710			sta 	StringInitialised
.9d03	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9d06	8d 11 07	sta $0711			sta 	StringTempPointer
.9d09	ad 0f 07	lda $070f			lda 	StringMemory+1
.9d0c	3a		dec a				dec 	a
.9d0d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9d10	60		rts				rts
.9d11					StringTempAllocate:
.9d11	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9d13	b0 35		bcs $9d4a			bcs 	_STALength
.9d15	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9d18	30 05		bmi $9d1f			bmi 	_STAAllocate
.9d1a	48		pha				pha 								; save value to subtract.
.9d1b	20 fe 9c	jsr $9cfe			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9d1e	68		pla				pla 								; restore it
.9d1f					_STAAllocate:
.9d1f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9d21	18		clc				clc  								; deliberate allows one more
.9d22	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9d25	8d 11 07	sta $0711			sta 	StringTempPointer
.9d28	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9d2b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9d2d	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9d30	69 ff		adc #$ff			adc 	#$FF
.9d32	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9d35	85 3d		sta $3d				sta 	zsTemp+1
.9d37	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d3a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9d3d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9d40	a9 10		lda #$10			lda 	#NSTString
.9d42	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d45	a9 00		lda #$00			lda 	#0 							; clear the target string
.9d47	92 3c		sta ($3c)			sta 	(zsTemp)
.9d49	60		rts				rts
.9d4a					_STALength:
.9d4a	a9 09		lda #$09		lda	#9
.9d4c	4c e5 85	jmp $85e5		jmp	ErrorHandler
.9d4f					StringTempWrite:
.9d4f	48		pha				pha
.9d50	92 3c		sta ($3c)			sta 	(zsTemp)
.9d52	e6 3c		inc $3c				inc 	zsTemp
.9d54	d0 02		bne $9d58			bne 	_STWNoCarry
.9d56	e6 3d		inc $3d				inc 	zsTemp+1
.9d58					_STWNoCarry:
.9d58	a9 00		lda #$00			lda 	#0
.9d5a	92 3c		sta ($3c)			sta 	(zsTemp)
.9d5c	68		pla				pla
.9d5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.914e					BackloadProgram:
.914e	a2 ff		ldx #$ff			ldx 	#$FF
.9150	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9153	20 7d 91	jsr $917d			jsr 	BLReadByte
.9156	30 1e		bmi $9176			bmi 	_BPExit
.9158					_BPCopy:
.9158	e8		inx				inx  								; copy byte in
.9159	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.915c	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.915f	20 7d 91	jsr $917d			jsr 	BLReadByte 					; read next byte
.9162	30 0a		bmi $916e			bmi 	_BPEndLine 					; -ve = EOL
.9164	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9166	d0 02		bne $916a			bne 	_BPNotTab
.9168	a9 20		lda #$20			lda 	#' '
.916a					_BPNotTab:
.916a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.916c	b0 ea		bcs $9158			bcs 	_BPCopy
.916e					_BPEndLine:
.916e	20 47 93	jsr $9347			jsr 	TokeniseLine 				; tokenise the line.
.9171	20 d3 95	jsr $95d3			jsr 	MemoryAppend 				; append to current program
.9174	80 d8		bra $914e			bra 	BackloadProgram
.9176					_BPExit:
.9176	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9179	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.917c	60		rts				rts
.917d					BLReadByte:
.917d					_BLLoad:
.917d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9180	ee 7e 91	inc $917e			inc 	_BLLoad+1
.9183	d0 03		bne $9188			bne 	_BLNoCarry
.9185	ee 7f 91	inc $917f			inc 	_BLLoad+2
.9188					_BLNoCarry:
.9188	c9 00		cmp #$00			cmp 	#0
.918a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.918b					TokeniseSearchTable:
.918b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.918d	85 36		sta $36				sta 	zTemp0
.918f	a0 00		ldy #$00			ldy 	#0
.9191	a9 80		lda #$80			lda 	#$80 						; token #
.9193	85 38		sta $38				sta 	zTemp1
.9195					_TSTLoop:
.9195	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9197	30 49		bmi $91e2			bmi 	_TSTFail 					; -ve = end of table
.9199	f0 2e		beq $91c9			beq 	_TSTNext 					; zero, check next it's a dummy
.919b	c8		iny				iny 								; get the hash
.919c	b1 36		lda ($36),y			lda 	(zTemp0),y
.919e	88		dey				dey
.919f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.91a2	d0 25		bne $91c9			bne 	_TSTNext
.91a4	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.91a7	38		sec				sec
.91a8	ed 00 07	sbc $0700			sbc 	identStart
.91ab	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.91ad	d0 1a		bne $91c9			bne 	_TSTNext
.91af	5a		phy				phy 								; save Y , we might fail
.91b0	c8		iny				iny 								; point to text
.91b1	c8		iny				iny
.91b2	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.91b5					_TSTCompareName:
.91b5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.91b8	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.91ba	d0 0c		bne $91c8			bne 	_TSTNextPullY 				; fail, pullY and do next
.91bc	e8		inx				inx
.91bd	c8		iny				iny
.91be	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.91c1	d0 f2		bne $91b5			bne 	_TSTCompareName
.91c3	7a		ply				ply 								; throw Y
.91c4	a5 38		lda $38				lda 	zTemp1 						; get token #
.91c6	38		sec				sec 								; return with CS = passed.
.91c7	60		rts				rts
.91c8					_TSTNextPullY:
.91c8	7a		ply				ply 								; restore current, fall through.
.91c9					_TSTNext:
.91c9	e6 38		inc $38				inc 	zTemp1 						; token counter
.91cb	98		tya				tya
.91cc	18		clc				clc
.91cd	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.91cf	1a		inc a				inc 	a 							; +1
.91d0	1a		inc a				inc 	a 							; +2
.91d1	a8		tay				tay
.91d2	10 c1		bpl $9195			bpl 	_TSTLoop 					; if Y < $80 loop back
.91d4	98		tya				tya 								; add Y to zTemp0 and reset Y
.91d5	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.91d7	18		clc				clc  								; but have tables > 255 bytes
.91d8	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.91da	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.91dc	90 b7		bcc $9195			bcc 	_TSTLoop
.91de	e6 37		inc $37				inc 	zTemp0+1
.91e0	80 b3		bra $9195			bra 	_TSTLoop
.91e2					_TSTFail:
.91e2	18		clc				clc
.91e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.91e4					KeywordSet0:
>91e4	00 65					.text	0,$65,""               ; $80 !0:EOF
>91e6	00 58					.text	0,$58,""               ; $81 !1:SH1
>91e8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>91ea	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>91f0	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>91f8	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>91fe	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9205	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>920c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9213	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9219	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9221	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9229	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>922f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9236	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>923c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9244	28
>9245	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>924b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9251	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9257	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>925e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9264	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>926a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>926f	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9273	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9279	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9281	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9288	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>928f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9297	43
>9298	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>929e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>92a4	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>92ab	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>92b1	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>92b7	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>92bc	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>92c2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>92c7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>92cf	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>92d5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>92dc	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>92e2	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>92e7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>92ee	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>92f4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>92f9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9301	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9305	ff					.text	$FF
.9306					KeywordSet1:
>9306	00 65					.text	0,$65,""               ; $80 !0:EOF
>9308	00 58					.text	0,$58,""               ; $81 !1:SH1
>930a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>930c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9314	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>931b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9320	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9326	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>932b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9333	45
>9334	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9339	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>933f	ff					.text	$FF
.9340					KeywordSet2:
>9340	00 65					.text	0,$65,""               ; $80 !0:EOF
>9342	00 58					.text	0,$58,""               ; $81 !1:SH1
>9344	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9346	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9347					TokeniseLine:
.9347	20 cf 94	jsr $94cf			jsr 	FixLineBufferCase 			; fix line case
.934a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.934c	8d 15 07	sta $0715			sta 	tokenOffset
.934f	9c 16 07	stz $0716			stz 	tokenLineNumber
.9352	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9355	a2 ff		ldx #$ff			ldx 	#$FF
.9357					_TKFindFirst:
.9357	e8		inx				inx
.9358	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.935b	f0 79		beq $93d6			beq 	_TKExit
.935d	c9 20		cmp #$20			cmp 	#' '
.935f	90 f6		bcc $9357			bcc 	_TKFindFirst
.9361	c9 30		cmp #$30			cmp 	#'0'
.9363	90 07		bcc $936c			bcc 	_TKNoLineNumber
.9365	c9 3a		cmp #$3a			cmp 	#'9'+1
.9367	b0 03		bcs $936c			bcs 	_TKNoLineNumber
.9369	20 f9 94	jsr $94f9			jsr 	TokeniseExtractLineNumber
.936c					_TKNoLineNumber:
.936c					_TKTokeniseLoop:
.936c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.936f	f0 65		beq $93d6			beq 	_TKExit
.9371	e8		inx				inx
.9372	c9 20		cmp #$20			cmp 	#' '
.9374	f0 f6		beq $936c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9376	ca		dex				dex 								; undo last get, A contains character, X is position.
.9377	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9379	f0 61		beq $93dc			beq 	_TKTokeniseIdentifier
.937b	c9 41		cmp #$41			cmp 	#'A'
.937d	90 04		bcc $9383			bcc 	_TKTokenisePunctuation
.937f	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9381	90 59		bcc $93dc			bcc 	_TKTokeniseIdentifier
.9383					_TKTokenisePunctuation:
.9383	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9385	f0 27		beq $93ae			beq 	_TKString
.9387	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9389	f0 28		beq $93b3			beq 	_TKHexConstant
.938b	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.938d	f0 29		beq $93b8			beq 	_TKCheckDouble
.938f	c9 3e		cmp #$3e			cmp 	#'>'
.9391	f0 25		beq $93b8			beq 	_TKCheckDouble
.9393					_TKStandardPunctuation:
.9393	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9396	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9398	90 0e		bcc $93a8			bcc 	_TKNoShift
.939a	48		pha				pha 								; save
.939b	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.939d	85 36		sta $36				sta 	zTemp0
.939f	68		pla				pla
.93a0	29 20		and #$20			and 	#32 						; bit 5
.93a2	4a		lsr a				lsr 	a 							; shift into bit 3
.93a3	4a		lsr a				lsr 	a
.93a4	05 36		ora $36				ora 	zTemp0
.93a6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.93a8					_TKNoShift:
.93a8	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte 			; write the punctuation character
.93ab	e8		inx				inx 								; consume the character
.93ac	80 be		bra $936c			bra 	_TKTokeniseLoop 			; and loop round again.
.93ae					_TKString:
.93ae	20 5e 94	jsr $945e			jsr 	TokeniseString
.93b1	80 b9		bra $936c			bra 	_TKTokeniseLoop
.93b3					_TKHexConstant:
.93b3	20 99 94	jsr $9499			jsr 	TokeniseHexConstant
.93b6	80 b4		bra $936c			bra 	_TKTokeniseLoop
.93b8					_TKCheckDouble:
.93b8	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.93bb	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.93bd	90 d4		bcc $9393			bcc 	_TKStandardPunctuation
.93bf	c9 3f		cmp #$3f			cmp 	#'>'+1
.93c1	b0 d0		bcs $9393			bcs 	_TKStandardPunctuation
.93c3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.93c6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.93c8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.93c9	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.93cc	38		sec				sec
.93cd	e9 3c		sbc #$3c			sbc 	#'<'
.93cf	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.93d2	e8		inx				inx 								; consume both
.93d3	e8		inx				inx
.93d4	80 96		bra $936c			bra 	_TKTokeniseLoop
.93d6	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.93d8	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.93db	60		rts				rts
.93dc					_TKTokeniseIdentifier:
.93dc	8e 00 07	stx $0700			stx 	identStart 					; save start
.93df	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.93e2					_TKCheckLoop:
.93e2	e8		inx				inx 								; look at next, we know first is identifier.
.93e3	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.93e6	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.93e8	f0 f8		beq $93e2			beq 	_TKCheckLoop
.93ea	c9 30		cmp #$30			cmp	 	#"0"
.93ec	90 0c		bcc $93fa			bcc 	_TKEndIdentifier
.93ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.93f0	90 f0		bcc $93e2			bcc 	_TKCheckLoop
.93f2	c9 41		cmp #$41			cmp	 	#"A"
.93f4	90 04		bcc $93fa			bcc 	_TKEndIdentifier
.93f6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.93f8	90 e8		bcc $93e2			bcc 	_TKCheckLoop
.93fa					_TKEndIdentifier:
.93fa	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.93fd	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.93ff	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9401	f0 06		beq $9409			beq 	_TKHasTypeCharacter
.9403	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9405	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9407	d0 07		bne $9410			bne 	_TKNoTypeCharacter
.9409					_TKHasTypeCharacter:
.9409	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.940c	e8		inx				inx 								; read next
.940d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9410					_TKNoTypeCharacter:
.9410	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9412	d0 09		bne $941d			bne 	_TKNoArray
.9414	e8		inx				inx 								; skip the (
.9415	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9418	09 04		ora #$04			ora 	#$04
.941a	8d 04 07	sta $0704			sta 	identTypeByte
.941d					_TKNoArray:
.941d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9420	20 ba 94	jsr $94ba			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9423	a0 91		ldy #$91			ldy 	#(KeywordSet0) >> 8
.9425	a9 e4		lda #$e4			lda 	#(KeywordSet0) & $FF
.9427	20 8b 91	jsr $918b			jsr 	TokeniseSearchTable
.942a	a2 00		ldx #$00			ldx 	#0
.942c	b0 1f		bcs $944d			bcs 	_TKFoundToken
.942e	a0 93		ldy #$93			ldy 	#(KeywordSet1) >> 8
.9430	a9 06		lda #$06			lda 	#(KeywordSet1) & $FF
.9432	20 8b 91	jsr $918b			jsr 	TokeniseSearchTable
.9435	a2 81		ldx #$81			ldx 	#$81
.9437	b0 14		bcs $944d			bcs 	_TKFoundToken
.9439	a0 93		ldy #$93			ldy 	#(KeywordSet1) >> 8
.943b	a9 06		lda #$06			lda 	#(KeywordSet1) & $FF
.943d	20 8b 91	jsr $918b			jsr 	TokeniseSearchTable
.9440	a2 82		ldx #$82			ldx 	#$82
.9442	b0 09		bcs $944d			bcs 	_TKFoundToken
.9444	20 4a 95	jsr $954a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9447	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.944a	4c 6c 93	jmp $936c			jmp 	_TKTokeniseLoop 			; and go round again.
.944d					_TKFoundToken:
.944d	48		pha				pha 								; save token
.944e	8a		txa				txa 								; shift in X, is there one ?
.944f	f0 03		beq $9454			beq 	_TKNoTShift
.9451	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte 			; if so, write it out
.9454					_TKNoTShift:
.9454	68		pla				pla 								; restore and write token
.9455	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.9458	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.945b	4c 6c 93	jmp $936c			jmp 	_TKTokeniseLoop 			; and go round again.
.945e					TokeniseString:
.945e	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9460	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.9463	e8		inx				inx									; start of quoted string.
.9464	da		phx				phx 								; push start of string on top
.9465	ca		dex				dex
.9466					_TSFindEnd:
.9466	e8		inx				inx
.9467	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.946a	f0 04		beq $9470			beq 	_TSEndOfString
.946c	c9 22		cmp #$22			cmp 	#'"'
.946e	d0 f6		bne $9466			bne 	_TSFindEnd
.9470					_TSEndOfString:
.9470	7a		ply				ply  								; so now Y is first character, X is character after end.
.9471	48		pha				pha 								; save terminating character
.9472	20 7a 94	jsr $947a			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9475	68		pla				pla 								; terminating character
.9476	f0 01		beq $9479			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9478	e8		inx				inx
.9479					_TSNotQuote:
.9479	60		rts				rts
.947a					TOWriteBlockXY:
.947a	86 36		stx $36				stx 	zTemp0 						; write end character
.947c	98		tya				tya
.947d	49 ff		eor #$ff			eor 	#$FF
.947f	38		sec				sec
.9480	65 36		adc $36				adc 	zTemp0
.9482	1a		inc a				inc 	a 							; one extra for NULL
.9483	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.9486					_TOBlockLoop:
.9486	c4 36		cpy $36				cpy 	zTemp0
.9488	f0 09		beq $9493			beq 	_TOBlockExit
.948a	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.948d	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.9490	c8		iny				iny
.9491	80 f3		bra $9486			bra 	_TOBlockLoop
.9493					_TOBlockExit:
.9493	a9 00		lda #$00			lda 	#0
.9495	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.9498	60		rts				rts
.9499					TokeniseHexConstant:
.9499	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.949b	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.949e	e8		inx				inx									; start of quoted string.
.949f	da		phx				phx 								; push start of constant on top
.94a0	ca		dex				dex
.94a1					_THFindLoop:
.94a1	e8		inx				inx
.94a2	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.94a5	c9 30		cmp #$30			cmp 	#"0"
.94a7	90 0c		bcc $94b5			bcc 	_THFoundEnd
.94a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.94ab	90 f4		bcc $94a1			bcc 	_THFindLoop
.94ad	c9 41		cmp #$41			cmp 	#"A"
.94af	90 04		bcc $94b5			bcc 	_THFoundEnd
.94b1	c9 47		cmp #$47			cmp 	#"F"+1
.94b3	90 ec		bcc $94a1			bcc 	_THFindLoop
.94b5					_THFoundEnd:
.94b5	7a		ply				ply 								; restore start
.94b6	20 7a 94	jsr $947a			jsr 	TOWriteBlockXY 				; output the block
.94b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.94ba					TokeniseCalculateHash:
.94ba	da		phx				phx
.94bb	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.94be	a9 00		lda #$00			lda 	#0
.94c0					_TCHLoop:
.94c0	18		clc				clc
.94c1	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.94c4	e8		inx				inx
.94c5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.94c8	d0 f6		bne $94c0			bne 	_TCHLoop
.94ca	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.94cd	fa		plx				plx
.94ce	60		rts				rts
.94cf					FixLineBufferCase:
.94cf	a2 00		ldx #$00			ldx 	#0
.94d1					_FLBCLoop:
.94d1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.94d4	f0 22		beq $94f8			beq 	_FLBCExit 					; end of string.
.94d6	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.94d8	f0 11		beq $94eb			beq 	_FLBCInQuotes
.94da	e8		inx				inx
.94db	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.94dd	90 f2		bcc $94d1			bcc 	_FLBCLoop
.94df	c9 7b		cmp #$7b			cmp 	#'z'+1
.94e1	b0 ee		bcs $94d1			bcs 	_FLBCLoop
.94e3	38		sec				sec 								; make U/C
.94e4	e9 20		sbc #$20			sbc 	#32
.94e6	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.94e9	80 e6		bra $94d1			bra 	_FLBCLoop
.94eb					_FLBCInQuotes:
.94eb	e8		inx				inx 								; advance
.94ec	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.94ef	f0 07		beq $94f8			beq 	_FLBCExit 					; exit on EOS
.94f1	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.94f3	d0 f6		bne $94eb			bne 	_FLBCInQuotes
.94f5	e8		inx				inx 								; skip over it
.94f6	80 d9		bra $94d1			bra 	_FLBCLoop
.94f8					_FLBCExit:
.94f8	60		rts				rts
.94f9					TokeniseExtractLineNumber:
.94f9	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.94fc	48		pha				pha
.94fd	ad 16 07	lda $0716			lda 	tokenLineNumber
.9500	48		pha				pha
.9501	20 37 95	jsr $9537			jsr 	_TELNTimes2 				; line # x 4
.9504	20 37 95	jsr $9537			jsr 	_TELNTimes2 				; line # x 2
.9507	18		clc				clc 								; add stacked value
.9508	68		pla				pla
.9509	6d 16 07	adc $0716			adc 	tokenLineNumber
.950c	8d 16 07	sta $0716			sta 	tokenLineNumber
.950f	68		pla				pla
.9510	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9513	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9516	20 37 95	jsr $9537			jsr 	_TELNTimes2 				; line # x 10
.9519	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.951c	e8		inx				inx
.951d	29 0f		and #$0f			and 	#15 						; add to line #
.951f	18		clc				clc
.9520	6d 16 07	adc $0716			adc 	tokenLineNumber
.9523	8d 16 07	sta $0716			sta 	tokenLineNumber
.9526	90 03		bcc $952b			bcc 	_TLENNoCarry
.9528	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.952b					_TLENNoCarry:
.952b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.952e	c9 30		cmp #$30			cmp 	#'0'
.9530	90 04		bcc $9536			bcc 	_TLENExit
.9532	c9 3a		cmp #$3a			cmp 	#'9'+1
.9534	90 c3		bcc $94f9			bcc 	TokeniseExtractLineNumber
.9536					_TLENExit:
.9536	60		rts				rts
.9537					_TELNTimes2:
.9537	0e 16 07	asl $0716			asl 	tokenLineNumber
.953a	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.953d	60		rts				rts
.953e					TokeniseWriteByte:
.953e	da		phx				phx
.953f	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9542	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9545	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9548	fa		plx				plx
.9549	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.954a					CheckCreateVariableRecord:
.954a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.954c	85 36		sta $36				sta 	0+zTemp0
.954e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9550	85 37		sta $37				sta 	1+zTemp0
.9552					_CCVSearch:
.9552	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9554	f0 2c		beq $9582			beq 	_CCVFail
.9556	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9558	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.955a	cd 03 07	cmp $0703			cmp 	identHash
.955d	d0 16		bne $9575			bne 	_CCVNext
.955f	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9561	ae 00 07	ldx $0700			ldx 	identStart
.9564					_CCVCompare:
.9564	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9567	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9569	e8		inx				inx 								; advance pointers
.956a	c8		iny				iny
.956b	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.956c	d0 07		bne $9575			bne 	_CCVNext  					; didn't match go to next.
.956e	90 f4		bcc $9564			bcc 	_CCVCompare 				; not finished yet.
.9570	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9573	f0 41		beq $95b6			beq 	_CCVFound 					; yes, we were successful
.9575					_CCVNext:
.9575	18		clc				clc
.9576	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9578	65 36		adc $36				adc 	zTemp0
.957a	85 36		sta $36				sta 	zTemp0
.957c	90 d4		bcc $9552			bcc 	_CCVSearch
.957e	e6 37		inc $37				inc 	zTemp0+1
.9580	80 d0		bra $9552			bra 	_CCVSearch
.9582					_CCVFail:
.9582	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9584	ad 03 07	lda $0703			lda 	identHash
.9587	91 36		sta ($36),y			sta 	(zTemp0),y
.9589	c8		iny				iny 								; offset 2 is the type byte
.958a	ad 04 07	lda $0704			lda 	identTypeByte
.958d	91 36		sta ($36),y			sta 	(zTemp0),y
.958f	c8		iny				iny
.9590					_CCVData:
.9590	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9592	91 36		sta ($36),y			sta 	(zTemp0),y
.9594	c8		iny				iny
.9595	c0 08		cpy #$08			cpy 	#8
.9597	90 f7		bcc $9590			bcc 	_CCVData
.9599	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.959c					_CCVCopyName:
.959c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.959f	91 36		sta ($36),y			sta 	(zTemp0),y
.95a1	e8		inx				inx
.95a2	c8		iny				iny
.95a3	ec 02 07	cpx $0702			cpx 	identTypeEnd
.95a6	d0 f4		bne $959c			bne 	_CCVCopyName
.95a8	98		tya				tya 								; patch offset
.95a9	92 36		sta ($36)			sta 	(zTemp0)
.95ab	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.95ad	91 36		sta ($36),y			sta 	(zTemp0),y
.95af	88		dey				dey
.95b0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.95b2	09 80		ora #$80			ora 	#$80
.95b4	91 36		sta ($36),y			sta 	(zTemp0),y
.95b6					_CCVFound:
.95b6	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.95b8	38		sec				sec
.95b9	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.95bb	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.95bd	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.95c0	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.95c2	20 3e 95	jsr $953e			jsr 	TokeniseWriteByte
.95c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9d5e					MemoryPeek:
.9d5e	b2 36		lda ($36)			lda 	(zTemp0)
.9d60	60		rts				rts
.9d61					MemoryPoke:
.9d61	92 36		sta ($36)			sta 	(zTemp0)
.9d63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9d64					PrintHex:
.9d64	48		pha				pha
.9d65	4a		lsr a				lsr 	a
.9d66	4a		lsr a				lsr 	a
.9d67	4a		lsr a				lsr 	a
.9d68	4a		lsr a				lsr 	a
.9d69	20 6d 9d	jsr $9d6d			jsr 	_PrintNibble
.9d6c	68		pla				pla
.9d6d					_PrintNibble:
.9d6d	29 0f		and #$0f			and 	#15
.9d6f	c9 0a		cmp #$0a			cmp 	#10
.9d71	90 02		bcc $9d75			bcc 	_NoShift
.9d73	69 06		adc #$06			adc 	#6
.9d75					_NoShift:
.9d75	69 30		adc #$30			adc 	#48
.9d77	4c 7a 9d	jmp $9d7a			jmp 	EXTPrintCharacter
.9d7a					EXTPrintCharacter:
.9d7a	48		pha				pha
.9d7b	da		phx				phx
.9d7c	5a		phy				phy
.9d7d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9d80	7a		ply				ply
.9d81	fa		plx				plx
.9d82	68		pla				pla
.9d83	60		rts				rts
.9d84					EXTInputSingleCharacter:
.9d84	da		phx				phx
.9d85	5a		phy				phy
.9d86					_EISCWait:
.9d86	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9d89	c9 00		cmp #$00			cmp 	#0
.9d8b	f0 f9		beq $9d86			beq 	_EISCWait
.9d8d	7a		ply				ply
.9d8e	fa		plx				plx
.9d8f	60		rts				rts
.9d90					EXTInputLine:
.9d90	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9d92					_ILLoop:
.9d92	da		phx				phx 								; read character in
.9d93	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9d96	fa		plx				plx
.9d97	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9d99	f0 12		beq $9dad			beq 	_ILBackspace
.9d9b	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9d9d	f0 15		beq $9db4			beq 	_ILExit
.9d9f	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9da1	90 ef		bcc $9d92			bcc 	_ILLoop
.9da3	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9da5	f0 eb		beq $9d92			beq 	_ILLoop
.9da7	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9daa	e8		inx				inx
.9dab	80 e5		bra $9d92			bra 	_ILLoop
.9dad					_ILBackspace:
.9dad	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9daf	f0 e1		beq $9d92			beq 	_ILLoop
.9db1	ca		dex				dex 								; back one.
.9db2	80 de		bra $9d92			bra 	_ILLoop
.9db4					_ILExit:
.9db4	20 7a 9d	jsr $9d7a			jsr 	EXTPrintCharacter
.9db7	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9dba	60		rts				rts
.9dbb					EXTBreakCheck:
.9dbb	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.95c6					MemoryNew:
.95c6	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.95c8	85 30		sta $30				sta 	codePtr
.95ca	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.95cc	85 31		sta $31				sta 	codePtr+1
.95ce	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.95d0	92 30		sta ($30)			sta 	(codePtr)
.95d2	60		rts				rts
.95d3					MemoryAppend:
.95d3	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.95d5	85 30		sta $30				sta 	codePtr
.95d7	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.95d9	85 31		sta $31				sta 	codePtr+1
.95db					_MAFindEnd:
.95db	b2 30		lda ($30)			lda 	(codePtr)
.95dd	f0 0d		beq $95ec			beq 	_MAFoundEnd
.95df	18		clc				clc
.95e0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.95e2	65 30		adc $30				adc 	codePtr
.95e4	85 30		sta $30				sta 	codePtr
.95e6	90 02		bcc $95ea			bcc 	_CREExit
.95e8	e6 31		inc $31				inc 	codePtr+1
.95ea					_CREExit:
.95ea	80 ef		bra $95db			bra 	_MAFindEnd
.95ec					_MAFoundEnd:
.95ec	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.95ef	c0 04		cpy #$04			cpy 	#4 							; blank line
.95f1	f0 0e		beq $9601			beq 	_MANoLine
.95f3	a9 00		lda #$00			lda 	#0 							; end of program
.95f5	91 30		sta ($30),y			sta 	(codePtr),y
.95f7					_MACopy:
.95f7	88		dey				dey
.95f8	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.95fb	91 30		sta ($30),y			sta 	(codePtr),y
.95fd	c0 00		cpy #$00			cpy 	#0
.95ff	d0 f6		bne $95f7			bne 	_MACopy
.9601					_MANoLine:
.9601	60		rts				rts
.9602					MemoryInline:
.9602	98		tya				tya 								; put address into stack,x
.9603	18		clc				clc
.9604	65 30		adc $30				adc 	codePtr
.9606	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9609	a5 31		lda $31				lda 	codePtr+1
.960b	69 00		adc #$00			adc 	#0
.960d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9610	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9613	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9616	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9617					MemoryTransferAX:
.9617	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9619	86 37		stx $37				stx 	zTemp0+1
.961b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.961d	85 30		sta $30				sta 	codePtr
.961f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9621	85 31		sta $31				sta 	codePtr+1
.9623					_MTAXLoop:
.9623	b2 30		lda ($30)			lda 	(codePtr)
.9625	f0 1d		beq $9644			beq 	_MTAXError 					; not found.
.9627	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9629	b1 30		lda ($30),y			lda 	(codePtr),y
.962b	c5 36		cmp $36				cmp 	zTemp0
.962d	d0 07		bne $9636			bne 	_MTAXNext
.962f	c8		iny				iny 								; check MSB
.9630	b1 30		lda ($30),y			lda 	(codePtr),y
.9632	c5 37		cmp $37				cmp 	zTemp0+1
.9634	f0 0d		beq $9643			beq 	_MTAXExit 					; success !
.9636					_MTAXNext:
.9636	18		clc				clc
.9637	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9639	65 30		adc $30				adc 	codePtr
.963b	85 30		sta $30				sta 	codePtr
.963d	90 02		bcc $9641			bcc 	_CREExit
.963f	e6 31		inc $31				inc 	codePtr+1
.9641					_CREExit:
.9641	80 e0		bra $9623			bra 	_MTAXLoop
.9643					_MTAXExit:
.9643	60		rts				rts
.9644					_MTAXError:
.9644	a9 0d		lda #$0d		lda	#13
.9646	4c e5 85	jmp $85e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
