
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Dec 14 12:22:20 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_DEEKLPAREN                       = $87; $87 DEEK(
=$88						KWD_EVENTLPAREN                      = $88; $88 EVENT(
=$89						KWD_FALSE                            = $89; $89 FALSE
=$8a						KWD_FRACLPAREN                       = $8a; $8a FRAC(
=$8b						KWD_HITLPAREN                        = $8b; $8b HIT(
=$8c						KWD_INTLPAREN                        = $8c; $8c INT(
=$8d						KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e						KWD_JOYBLPAREN                       = $8e; $8e JOYB(
=$8f						KWD_JOYXLPAREN                       = $8f; $8f JOYX(
=$90						KWD_JOYYLPAREN                       = $90; $90 JOYY(
=$91						KWD_LEFTDOLLARLPAREN                 = $91; $91 LEFT$(
=$92						KWD_LENLPAREN                        = $92; $92 LEN(
=$93						KWD_MAXLPAREN                        = $93; $93 MAX(
=$94						KWD_MIDDOLLARLPAREN                  = $94; $94 MID$(
=$95						KWD_MINLPAREN                        = $95; $95 MIN(
=$96						KWD_NOTLPAREN                        = $96; $96 NOT(
=$97						KWD_PEEKLPAREN                       = $97; $97 PEEK(
=$98						KWD_PLAYINGLPAREN                    = $98; $98 PLAYING(
=$99						KWD_RANDOMLPAREN                     = $99; $99 RANDOM(
=$9a						KWD_RIGHTDOLLARLPAREN                = $9a; $9a RIGHT$(
=$9b						KWD_RNDLPAREN                        = $9b; $9b RND(
=$9c						KWD_SGNLPAREN                        = $9c; $9c SGN(
=$9d						KWD_SPCLPAREN                        = $9d; $9d SPC(
=$9e						KWD_STRDOLLARLPAREN                  = $9e; $9e STR$(
=$9f						KWD_TIMERLPAREN                      = $9f; $9f TIMER(
=$a0						KWD_TRUE                             = $a0; $a0 TRUE
=$a1						KWD_VALLPAREN                        = $a1; $a1 VAL(
=$a2						KWD_FOR                              = $a2; $a2 FOR
=$a3						KWD_IF                               = $a3; $a3 IF
=$a4						KWD_PROC                             = $a4; $a4 PROC
=$a5						KWD_REPEAT                           = $a5; $a5 REPEAT
=$a6						KWD_WHILE                            = $a6; $a6 WHILE
=$a7						KWD_ENDIF                            = $a7; $a7 ENDIF
=$a8						KWD_ENDPROC                          = $a8; $a8 ENDPROC
=$a9						KWD_NEXT                             = $a9; $a9 NEXT
=$aa						KWD_THEN                             = $aa; $aa THEN
=$ab						KWD_UNTIL                            = $ab; $ab UNTIL
=$ac						KWD_WEND                             = $ac; $ac WEND
=$ad						KWD_BY                               = $ad; $ad BY
=$ae						KWD_CALL                             = $ae; $ae CALL
=$af						KWD_CIRCLE                           = $af; $af CIRCLE
=$b0						KWD_CLEAR                            = $b0; $b0 CLEAR
=$b1						KWD_CLS                              = $b1; $b1 CLS
=$b2						KWD_COLOR                            = $b2; $b2 COLOR
=$b3						KWD_COLOUR                           = $b3; $b3 COLOUR
=$b4						KWD_DATA                             = $b4; $b4 DATA
=$b5						KWD_DIM                              = $b5; $b5 DIM
=$b6						KWD_DOKE                             = $b6; $b6 DOKE
=$b7						KWD_DOWNTO                           = $b7; $b7 DOWNTO
=$b8						KWD_ELSE                             = $b8; $b8 ELSE
=$b9						KWD_FROM                             = $b9; $b9 FROM
=$ba						KWD_GFX                              = $ba; $ba GFX
=$bb						KWD_GOSUB                            = $bb; $bb GOSUB
=$bc						KWD_GOTO                             = $bc; $bc GOTO
=$bd						KWD_HERE                             = $bd; $bd HERE
=$be						KWD_IMAGE                            = $be; $be IMAGE
=$bf						KWD_INPUT                            = $bf; $bf INPUT
=$c0						KWD_LET                              = $c0; $c0 LET
=$c1						KWD_LINE                             = $c1; $c1 LINE
=$c2						KWD_LOCAL                            = $c2; $c2 LOCAL
=$c3						KWD_OFF                              = $c3; $c3 OFF
=$c4						KWD_ON                               = $c4; $c4 ON
=$c5						KWD_OUTLINE                          = $c5; $c5 OUTLINE
=$c6						KWD_PALETTE                          = $c6; $c6 PALETTE
=$c7						KWD_PLOT                             = $c7; $c7 PLOT
=$c8						KWD_POKE                             = $c8; $c8 POKE
=$c9						KWD_PRINT                            = $c9; $c9 PRINT
=$ca						KWD_READ                             = $ca; $ca READ
=$cb						KWD_RECT                             = $cb; $cb RECT
=$cc						KWD_REM                              = $cc; $cc REM
=$cd						KWD_RETURN                           = $cd; $cd RETURN
=$ce						KWD_SOLID                            = $ce; $ce SOLID
=$cf						KWD_SOUND                            = $cf; $cf SOUND
=$d0						KWD_SPRITE                           = $d0; $d0 SPRITE
=$d1						KWD_TEXT                             = $d1; $d1 TEXT
=$d2						KWD_TO                               = $d2; $d2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a2						KWC_FIRST_STRUCTURE = $a2
=$a7						KWC_FIRST_STRUCTURE_DEC = $a7
=$ac						KWC_LAST_STRUCTURE = $ac
=$83						KWC_FIRST_UNARY = $83
=$a1						KWC_LAST_UNARY = $a1

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 71 80	jmp $8071	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 99 a2	jsr $a299		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInputSingleCharacter:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 cd a2	jsr $a2cd		jsr	Export_EXTInputSingleCharacter
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTBreakCheck:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 f3 a2	jsr $a2f3		jsr	Export_EXTBreakCheck
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTReadController:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 f6 a2	jsr $a2f6		jsr	Export_EXTReadController
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						EXTInputLine:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 af a1	jsr $a1af		jsr	Export_EXTInputLine
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						GXGraphicDraw:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 0e a8	jsr $a80e		jsr	Export_GXGraphicDraw
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDCommand:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 f3 ba	jsr $baf3		jsr	Export_SNDCommand
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						SNDUpdate:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 26 bb	jsr $bb26		jsr	Export_SNDUpdate
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKListConvertLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 e9 b4	jsr $b4e9		jsr	Export_TKListConvertLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						TKTokeniseLine:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 7d b7	jsr $b77d		jsr	Export_TKTokeniseLine
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8071		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8073		9a		txs				txs
.8074		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8076		09 80		ora #$80			ora 	#$80
.8078		85 00		sta $00				sta 	0
.807a		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.807d		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807f		aa		tax				tax
.8080		a8		tay				tay
.8081		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.8084		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8086		20 49 80	jsr $8049			jsr 	SNDCommand
.8089		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.808b		a9 99		lda #$99			lda 	#Prompt & $FF
.808d		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA
.8090		20 3b 8a	jsr $8a3b			jsr 	NewProgram 					; erase current program
.8093		4c e4 83	jmp $83e4			jmp 	WarmStart					; make same size.
.8096		4c e4 83	jmp $83e4			jmp 	WarmStart
.8099						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8099		41 6c 70 68 61 20 31 35			.text "Alpha 15 built 12-Dec-22. "
>80a1		20 62 75 69 6c 74 20 31 32 2d 44 65 63 2d 32 32
>80b1		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80b3		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80b6						AssembleGroup1:
.80b6		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80b8		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80bb		80 02		bra $80bf			bra 	AsmGroup12
.80bd						AssembleGroup2:
.80bd		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80bf						AsmGroup12:
.80bf		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80c2		68		pla				pla 								; pop the return address to access the information following.
.80c3		fa		plx				plx
.80c4		20 4b 81	jsr $814b			jsr 	AccessParameters 			; get opcode and save as base
.80c7		8d 24 04	sta $0424			sta 	BaseOpcode
.80ca		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80cd		d0 08		bne $80d7			bne 	_AG12HaveMask
.80cf		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80d1		20 53 81	jsr $8153			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80d4		8d 25 04	sta $0425			sta 	ModeMask
.80d7						_AG12HaveMask:
.80d7		20 87 82	jsr $8287			jsr 	TypeAndCalculateOperand 	; get zero page type
.80da		da		phx				phx 								; save found address mode
.80db		20 b7 81	jsr $81b7			jsr 	AssembleModeX
.80de		fa		plx				plx  								; restore address mode
.80df		b0 0b		bcs $80ec			bcs 	_AG12Exit
.80e1		20 ed 80	jsr $80ed			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80e4		20 b7 81	jsr $81b7			jsr 	AssembleModeX
.80e7		b0 03		bcs $80ec			bcs 	_AG12Exit
.80e9		4c aa 9f	jmp $9faa			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ec						_AG12Exit:
.80ec		60		rts				rts
.80ed						PromoteToAbsolute:
.80ed		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80ef		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80f1		f0 19		beq $810c			beq 	_PTADo
.80f3		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80f5		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80f7		f0 13		beq $810c			beq 	_PTADo
.80f9		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80fb		e0 80		cpx #$80			cpx 	#AM_ZEROY
.80fd		f0 0d		beq $810c			beq 	_PTADo
.80ff		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8101		e0 d1		cpx #$d1			cpx 	#AM_IND
.8103		f0 07		beq $810c			beq 	_PTADo
.8105		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8107		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8109		f0 01		beq $810c			beq 	_PTADo
.810b		60		rts				rts
.810c						_PTADo:
.810c		aa		tax				tax
.810d		60		rts				rts
.810e						AssembleGroup3:
.810e		68		pla				pla 								; get parameters, which is just the opcode.
.810f		fa		plx				plx
.8110		20 4b 81	jsr $814b			jsr 	AccessParameters 			; get and output opcode
.8113		20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8116		20 eb 82	jsr $82eb			jsr 	CalculateOperand 			; get a 16 bit operand
.8119		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.811b		38		sec				sec
.811c		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.811f		48		pha				pha 								; LSB in A
.8120		a5 60		lda $60				lda 	NSMantissa1
.8122		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8125		aa		tax				tax 								; MSB in X
.8126		68		pla				pla
.8127		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8128		69 7f		adc #$7f			adc 	#$7F
.812a		90 01		bcc $812d			bcc 	_AG3NoCarry
.812c		e8		inx				inx
.812d						_AG3NoCarry:
.812d		38		sec				sec 								; fix back and write out anyways.
.812e		e9 80		sbc #$80			sbc 	#$80
.8130		20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8133		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8135		f0 0a		beq $8141			beq 	_AG3Exit
.8137		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.813a		29 01		and #$01			and 	#1
.813c		f0 03		beq $8141			beq 	_AG3Exit
.813e		4c af 9f	jmp $9faf			jmp 	RangeError 					; no, branch is out of range
.8141						_AG3Exit:
.8141		60		rts				rts
.8142						AssembleGroup4:
.8142		68		pla				pla 								; pop address
.8143		fa		plx				plx
.8144		20 4b 81	jsr $814b			jsr 	AccessParameters 			; access and get first
.8147		20 63 81	jsr $8163			jsr 	AssemblerWriteByte 			; output it.
.814a		60		rts				rts
.814b						AccessParameters:
.814b		8d 21 04	sta $0421			sta 	ParamStart
.814e		8e 22 04	stx $0422			stx 	ParamStart+1
.8151		a9 01		lda #$01			lda 	#1
.8153						GetParameter:
.8153		5a		phy				phy
.8154		a8		tay				tay
.8155		ad 21 04	lda $0421			lda 	ParamStart
.8158		85 36		sta $36				sta 	zTemp0
.815a		ad 22 04	lda $0422			lda 	ParamStart+1
.815d		85 37		sta $37				sta 	zTemp0+1
.815f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8161		7a		ply				ply
.8162		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8163						AssemblerWriteByte:
.8163		48		pha			pha
.8164		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8167		29 02		and #$02		and 	#2
.8169		f0 1b		beq $8186		beq 	_AWBNoPrint
.816b		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.816e		20 a1 81	jsr $81a1		jsr 	PrintHex
.8171		ad 1e 04	lda $041e		lda		AssemblerAddress
.8174		20 a1 81	jsr $81a1		jsr 	PrintHex
.8177		a9 20		lda #$20		lda 	#' '
.8179		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.817c		68		pla			pla 									; print byte
.817d		48		pha			pha
.817e		20 a1 81	jsr $81a1		jsr 	PrintHex
.8181		a9 0d		lda #$0d		lda 	#13
.8183		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8186						_AWBNoPrint:
.8186		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8189		85 36		sta $36			sta 	zTemp0
.818b		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.818e		f0 0e		beq $819e		beq 	_AWBRange
.8190		85 37		sta $37			sta 	zTemp0+1
.8192		68		pla			pla 									; write byte out
.8193		92 36		sta ($36)		sta 	(zTemp0)
.8195		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.8198		d0 03		bne $819d		bne 	_AWBNoCarry
.819a		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.819d						_AWBNoCarry:
.819d		60		rts			rts
.819e						_AWBRange:
.819e		4c af 9f	jmp $9faf		jmp 	RangeError
.81a1						PrintHex:
.81a1		48		pha				pha
.81a2		4a		lsr a				lsr 	a
.81a3		4a		lsr a				lsr 	a
.81a4		4a		lsr a				lsr 	a
.81a5		4a		lsr a				lsr 	a
.81a6		20 aa 81	jsr $81aa			jsr 	_PrintNibble
.81a9		68		pla				pla
.81aa						_PrintNibble:
.81aa		29 0f		and #$0f			and 	#15
.81ac		c9 0a		cmp #$0a			cmp 	#10
.81ae		90 02		bcc $81b2			bcc 	_NoShift
.81b0		69 06		adc #$06			adc 	#6
.81b2						_NoShift:
.81b2		69 30		adc #$30			adc 	#48
.81b4		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81b7						AssembleModeX:
.81b7		5a		phy				phy
.81b8		ad 23 04	lda $0423			lda 	IsGroup1
.81bb		f0 17		beq $81d4			beq 	_AMXGroup2
.81bd		8a		txa				txa 							; is it in group # 1
.81be		29 40		and #$40			and 	#AM_ISG1
.81c0		f0 4d		beq $820f			beq 	_AMXFail 				; no, give up.
.81c2		8a		txa				txa 							; get back.
.81c3		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81c5		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81c7		d0 22		bne $81eb			bne 	_AMXHaveInfo
.81c9		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81cc		c9 81		cmp #$81			cmp 	#$81
.81ce		f0 3f		beq $820f			beq 	_AMXFail
.81d0		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81d2		80 17		bra $81eb			bra 	_AMXHaveInfo 			; odd design decision there.
.81d4						_AMXGroup2:
.81d4		8a		txa				txa 							; is it in group 2 ?
.81d5		29 20		and #$20			and 	#AM_ISG2
.81d7		f0 36		beq $820f			beq 	_AMXFail 				; no, give up.
.81d9		8a		txa				txa 							; get the offset into Y
.81da		29 1f		and #$1f			and 	#$1F
.81dc		4a		lsr a				lsr 	a 						; make it 0-7.
.81dd		4a		lsr a				lsr  	a
.81de		a8		tay				tay
.81df		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81e2						_AMXCheckOkay:
.81e2		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81e3		88		dey				dey
.81e4		10 fc		bpl $81e2			bpl 	_AMXCheckOkay
.81e6		90 27		bcc $820f			bcc 	_AMXFail 				; not allowed.
.81e8		8a		txa				txa  							; get mask back
.81e9		29 1f		and #$1f			and 	#$1F
.81eb						_AMXHaveInfo:
.81eb		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81ed		10 04		bpl $81f3			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81ef		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81f1		d0 1c		bne $820f			bne 	_AMXFail
.81f3						_AMXAnySize:
.81f3		18		clc				clc 							; add offset to the base opcode
.81f4		6d 24 04	adc $0424			adc 	BaseOpcode
.81f7						_AMXOutputCode:
.81f7		20 63 81	jsr $8163			jsr 	AssemblerWriteByte 		; write the opcode out.
.81fa		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.81fc		f0 0e		beq $820c			beq 	_AMXExit
.81fe		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8200		20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8203		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8205		30 05		bmi $820c			bmi 	_AMXExit
.8207		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8209		20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.820c						_AMXExit:
.820c		7a		ply				ply
.820d		38		sec				sec
.820e		60		rts				rts
.820f						_AMXFail:
.820f		a0 00		ldy #$00			ldy 	#0
.8211						_AMXCheckOddities:
.8211		8a		txa				txa
.8212		d9 39 82	cmp $8239,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8215		d0 15		bne $822c			bne 	_AMXCONext
.8217		b9 37 82	lda $8237,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.821a		cd 24 04	cmp $0424			cmp 	BaseOpcode
.821d		d0 0d		bne $822c			bne 	_AMXCONext
.821f		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8221		10 04		bpl $8227			bpl 	_AMXCONotZero
.8223		a5 60		lda $60				lda 	NSMantissa1
.8225		d0 05		bne $822c			bne 	_AMXCONext
.8227						_AMXCONotZero:
.8227		b9 38 82	lda $8238,y			lda 	ExtraOpcode+1,y 		; get new opcode
.822a		80 cb		bra $81f7			bra 	_AMXOutputCode 			; and assemble it
.822c						_AMXCONext:
.822c		c8		iny				iny
.822d		c8		iny				iny
.822e		c8		iny				iny
.822f		b9 37 82	lda $8237,y			lda 	ExtraOpcode+0,y 		; end of table
.8232		d0 dd		bne $8211			bne 	_AMXCheckOddities
.8234						_AMXCOFail:
.8234		7a		ply				ply
.8235		18		clc				clc
.8236		60		rts				rts
.8237						ExtraOpcode:
>8237		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>823a		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>823d		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8240		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8243		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8246		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8249		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>824c		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>824f		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8252		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8255		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8256						LabelHere:
.8256		c8		iny				iny 								; skip .
.8257		a2 00		ldx #$00			ldx 	#0 							; get a term
.8259		20 53 98	jsr $9853			jsr 	EvaluateTerm
.825c		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.825e		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8260		d0 22		bne $8284			bne 	_ALType 					; otherwise typing error
.8262		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8264		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8266		b5 60		lda $60,x			lda 	NSMantissa1,x
.8268		85 37		sta $37				sta 	zTemp0+1
.826a		5a		phy				phy 								; copy address in (64k)
.826b		a0 01		ldy #$01			ldy 	#1
.826d		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8270		92 36		sta ($36)			sta 	(zTemp0)
.8272		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8275		91 36		sta ($36),y			sta 	(zTemp0),y
.8277		c8		iny				iny
.8278		a9 00		lda #$00			lda 	#0 							; zero the rest.
.827a		91 36		sta ($36),y			sta 	(zTemp0),y
.827c		c8		iny				iny
.827d		91 36		sta ($36),y			sta 	(zTemp0),y
.827f		c8		iny				iny
.8280		91 36		sta ($36),y			sta 	(zTemp0),y
.8282		7a		ply				ply
.8283		60		rts				rts
.8284						_ALType:
.8284		4c b4 9f	jmp $9fb4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8287						TypeAndCalculateOperand:
.8287		b1 30		lda ($30),y			lda 	(codePtr),y
.8289		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.828b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.828d		f0 5b		beq $82ea			beq 	_TACOExit
.828f		c9 80		cmp #$80			cmp 	#KWC_EOL
.8291		f0 57		beq $82ea			beq 	_TACOExit
.8293		c8		iny				iny
.8294		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8296		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8298		f0 51		beq $82eb			beq 	CalculateOperand
.829a		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.829c		f0 1f		beq $82bd			beq 	_TACOIndirect
.829e		88		dey				dey 								; undo get of first character
.829f		20 eb 82	jsr $82eb			jsr 	CalculateOperand 			; get operand
.82a2		b1 30		lda ($30),y			lda 	(codePtr),y
.82a4		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82a6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82a8		d0 40		bne $82ea			bne 	_TACOExit
.82aa		c8		iny				iny
.82ab		20 f5 82	jsr $82f5			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82ae		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82b0		c9 58		cmp #$58			cmp 	#'X'
.82b2		f0 36		beq $82ea			beq 	_TACOExit
.82b4		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82b6		c9 59		cmp #$59			cmp 	#'Y'
.82b8		f0 30		beq $82ea			beq 	_TACOExit
.82ba						_TACOSyntax:
.82ba		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.82bd						_TACOIndirect:
.82bd		20 eb 82	jsr $82eb			jsr 	CalculateOperand 			; get the operand
.82c0		b1 30		lda ($30),y			lda 	(codePtr),y
.82c2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82c4		f0 17		beq $82dd			beq 	_TACOIndX
.82c6		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82c9		b1 30		lda ($30),y			lda 	(codePtr),y
.82cb		a2 d1		ldx #$d1			ldx 	#AM_IND
.82cd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82cf		d0 19		bne $82ea			bne 	_TACOExit
.82d1		c8		iny				iny
.82d2		20 f5 82	jsr $82f5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82d5		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82d7		d0 e1		bne $82ba			bne 	_TACOSyntax
.82d9		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82db		80 0d		bra $82ea			bra 	_TACOExit
.82dd						_TACOIndX:
.82dd		c8		iny				iny
.82de		20 f5 82	jsr $82f5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e1		c9 58		cmp #$58			cmp 	#'X' 						; check X
.82e3		d0 d5		bne $82ba			bne 	_TACOSyntax
.82e5		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket			; check )
.82e8		a2 c0		ldx #$c0			ldx 	#AM_INDX
.82ea						_TACOExit:
.82ea		60		rts				rts
.82eb						CalculateOperand:
.82eb		48		pha				pha
.82ec		da		phx				phx
.82ed		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82ef		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.82f2		fa		plx				plx
.82f3		68		pla				pla
.82f4		60		rts				rts
.82f5						TACOCheckXY:
.82f5		b1 30		lda ($30),y			lda 	(codePtr),y
.82f7		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82f9		c9 40		cmp #$40			cmp 	#$40
.82fb		d0 21		bne $831e			bne 	_TCXYFail
.82fd		b1 30		lda ($30),y			lda 	(codePtr),y
.82ff		18		clc				clc
.8300		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8302		85 37		sta $37				sta 	zTemp0+1
.8304		c8		iny				iny
.8305		b1 30		lda ($30),y			lda 	(codePtr),y
.8307		c8		iny				iny
.8308		85 36		sta $36				sta 	zTemp0
.830a		5a		phy				phy 								; save position
.830b		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.830d		b1 36		lda ($36),y			lda 	(zTemp0),y
.830f		d0 0c		bne $831d			bne 	_TCXYPopFail
.8311		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8313		b1 36		lda ($36),y			lda 	(zTemp0),y
.8315		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8317		f0 08		beq $8321			beq 	_TCXYFound
.8319		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.831b		f0 04		beq $8321			beq 	_TCXYFound
.831d						_TCXYPopFail:
.831d		7a		ply				ply
.831e						_TCXYFail:
.831e		a9 00		lda #$00			lda 	#0
.8320		60		rts				rts
.8321						_TCXYFound:
.8321		7a		ply				ply 								; restore position
.8322		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8324		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8325						BackloadProgram:
.8325		20 3b 8a	jsr $8a3b			jsr 	NewProgram 					; does the actual NEW.
.8328		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.832a		a9 7c		lda #$7c			lda 	#_BLLoad & $FF
.832c		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA
.832f		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8331		8d 59 06	sta $0659			sta 	BackLoadPage
.8334		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8336		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.8339		a9 60		lda #$60			lda 	#(($6000) >> 8)
.833b		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.833e		a9 ff		lda #$ff			lda 	#$FF
.8340		8d fa ff	sta $fffa			sta 	$FFFA
.8343						_BPLoop:
.8343		a2 ff		ldx #$ff			ldx 	#$FF
.8345		20 91 83	jsr $8391			jsr 	BLReadByte 					; read a byte
.8348		c9 00		cmp #$00			cmp 	#0
.834a		f0 29		beq $8375			beq 	_BPExit 					; if 0 exit
.834c		30 27		bmi $8375			bmi 	_BPExit 					; if -ve exit
.834e						_BPCopy:
.834e		e8		inx				inx  								; copy byte into the lineBuffer
.834f		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8352		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8355		20 91 83	jsr $8391			jsr 	BLReadByte 					; read next byte
.8358		30 0a		bmi $8364			bmi 	_BPEndLine 					; -ve = EOL
.835a		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.835c		d0 02		bne $8360			bne 	_BPNotTab
.835e		a9 20		lda #$20			lda 	#' '
.8360						_BPNotTab:
.8360		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8362		b0 ea		bcs $834e			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8364						_BPEndLine:
.8364		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line.
.8367		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number = 0
.836a		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.836d		f0 d4		beq $8343			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.836f		38		sec				sec 								; append not insert
.8370		20 04 a5	jsr $a504			jsr 	MemoryInsertLine 			; append to current program
.8373		80 ce		bra $8343			bra 	_BPLoop
.8375						_BPExit:
.8375		9c fa ff	stz $fffa			stz 	$FFFA
.8378		20 7a 84	jsr $847a			jsr 	ClearCommand 				; clear variables etc.
.837b		60		rts				rts
.837c						_BLLoad:
>837c		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8384		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8391						BLReadByte:
.8391		da		phx				phx
.8392		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8394		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.8397		85 0b		sta $0b				sta 	8+3
.8399		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.839c		85 36		sta $36				sta 	zTemp0
.839e		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83a1		85 37		sta $37				sta 	zTemp0+1
.83a3		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83a5		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83a8		d0 0f		bne $83b9			bne 	_BLNoCarry
.83aa		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ad		10 0a		bpl $83b9			bpl 	_BLNoCarry 					; need a new page
.83af		48		pha				pha
.83b0		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83b2		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83b5		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83b8		68		pla				pla
.83b9						_BLNoCarry:
.83b9		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83bb		fa		plx				plx
.83bc		c9 00		cmp #$00			cmp 	#0
.83be		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83bf						EditProgramCode:
.83bf		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; try to find the line.
.83c2		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1
.83c5		20 a8 a5	jsr $a5a8			jsr 	MemorySearch
.83c8		90 05		bcc $83cf			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83ca		d0 03		bne $83cf			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83cc		20 cd a4	jsr $a4cd			jsr 	MemoryDeleteLine 			; delete the line
.83cf						_EPCNoDelete:
.83cf		ad 2d 04	lda $042d			lda 	TokenBuffer 				; buffer empty - we just want to delete a line.
.83d2		c9 80		cmp #$80			cmp 	#KWC_EOL
.83d4		f0 0d		beq $83e3			beq 	_EPCNoInsert
.83d6		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83d9		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83dc		20 a8 a5	jsr $a5a8			jsr 	MemorySearch
.83df		18		clc				clc 								; insert at this point.
.83e0		20 04 a5	jsr $a504			jsr 	MemoryInsertLine 			; insert the line
.83e3						_EPCNoInsert:
.83e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83e4						WarmStart:
.83e4		a2 ff		ldx #$ff			ldx 	#$FF
.83e6		9a		txs				txs
.83e7		a9 85		lda #$85			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.83e9		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.83ec		20 35 80	jsr $8035			jsr 	EXTInputLine 				; get line to lineBuffer
.83ef		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line
.83f2		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number <> 0
.83f5		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.83f8		d0 17		bne $8411			bne 	_WSEditCode 				; if so,edit code.
.83fa		9c 2a 04	stz $042a			stz 	TokenOffset 				; zero the "offset", meaning it only runs one line.
.83fd		a9 2a		lda #$2a			lda 	#((TokenOffset) & $FF)
.83ff		85 30		sta $30				sta 	codePtr
.8401		a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8403		85 31		sta $31				sta 	codePtr+1
.8405		ad 2d 04	lda $042d			lda 	TokenBuffer 				; nothing to run
.8408		c9 80		cmp #$80			cmp 	#KWC_EOL
.840a		f0 d8		beq $83e4			beq 	WarmStart
.840c		20 8e 8b	jsr $8b8e			jsr 	RUNCodePointerLine 			; execute that line.
.840f		80 d3		bra $83e4			bra 	WarmStart
.8411						_WSEditCode:
.8411		20 bf 83	jsr $83bf			jsr 	EditProgramCode 			; edit the program code
.8414		20 7a 84	jsr $847a			jsr 	ClearCommand 				; clear all variables etc.
.8417		80 cb		bra $83e4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8419						AssembleCommand:
.8419		a2 00		ldx #$00			ldx 	#0
.841b		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; start address
.841e		a5 58		lda $58				lda 	NSMantissa0
.8420		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8423		a5 60		lda $60				lda 	NSMantissa1
.8425		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8428		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.842b		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; options 0-3
.842e		a5 58		lda $58				lda 	NSMantissa0
.8430		8d 20 04	sta $0420			sta 	AssemblerControl
.8433		60		rts				rts
.8434		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8435						AssertCommand:
.8435		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8437		20 99 9d	jsr $9d99			jsr 	EvaluateInteger 			; the assert test
.843a		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; exit if result is non zero.
.843d		d0 05		bne $8444			bne 	_ACExit
.843f		a9 0a		lda #$0a		lda	#10
.8441		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.8444						_ACExit:
.8444		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8445						CallCommand:
.8445		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8447		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.844a						_CCClear
.844a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.844b		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; these are optional sequentially.
.844e		e0 04		cpx #$04			cpx 	#4
.8450		d0 f8		bne $844a			bne 	_CCClear
.8452		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8454						_CCCParam:
.8454		b1 30		lda ($30),y			lda 	(codePtr),y
.8456		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8458		d0 09		bne $8463			bne 	_CCCRun6502
.845a		c8		iny				iny 								; skip comma
.845b		e8		inx				inx	 								; next level
.845c		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get A/X/Y
.845f		e0 03		cpx #$03			cpx 	#3
.8461		90 f1		bcc $8454			bcc 	_CCCParam 					; done all 3 ?
.8463						_CCCRun6502:
.8463		5a		phy				phy 								; save position
.8464		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8466		85 37		sta $37				sta 	zTemp0+1
.8468		a5 58		lda $58				lda 	NSMantissa0
.846a		85 36		sta $36				sta 	zTemp0
.846c		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.846e		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8470		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8472		20 77 84	jsr $8477			jsr 	_CCCZTemp0 					; call zTemp0
.8475		7a		ply				ply 								; restore position and exit
.8476		60		rts				rts
.8477						_CCCZTemp0:
.8477		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.847a						ClearCommand:
.847a		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.847c		85 36		sta $36				sta 	0+zTemp0
.847e		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8480		85 37		sta $37				sta 	1+zTemp0
.8482						_ClearZeroLoop:
.8482		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8484		f0 24		beq $84aa			beq 	_ClearZeroEnd
.8486		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8488		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.848a						_ClearOneVariable:
.848a		91 36		sta ($36),y			sta 	(zTemp0),y
.848c		c8		iny				iny
.848d		c0 08		cpy #$08			cpy 	#8
.848f		d0 f9		bne $848a			bne 	_ClearOneVariable
.8491		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8493		b1 36		lda ($36),y			lda 	(zTemp0),y
.8495		c9 18		cmp #$18			cmp 	#NSTProcedure
.8497		d0 04		bne $849d			bne 	_ClearNotProcedure
.8499		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.849b		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.849d						_ClearNotProcedure:
.849d		18		clc				clc 								; go to the next variable
.849e		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84a0		65 36		adc $36				adc 	zTemp0
.84a2		85 36		sta $36				sta 	zTemp0
.84a4		90 dc		bcc $8482			bcc 	_ClearZeroLoop
.84a6		e6 37		inc $37				inc 	zTemp0+1
.84a8		80 d8		bra $8482			bra 	_ClearZeroLoop
.84aa						_ClearZeroEnd:
.84aa		18		clc				clc
.84ab		a5 36		lda $36				lda 	zTemp0
.84ad		69 01		adc #$01			adc 	#1
.84af		8d 0c 04	sta $040c			sta 	lowMemPtr
.84b2		a5 37		lda $37				lda 	zTemp0+1
.84b4		69 00		adc #$00			adc 	#0
.84b6		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84b9		20 34 a7	jsr $a734			jsr 	StackReset
.84bc		20 9a a7	jsr $a79a			jsr 	StringSystemInitialise
.84bf		20 f5 8d	jsr $8df5			jsr 	ProcedureScan
.84c2		20 3d 8b	jsr $8b3d			jsr 	Command_Restore
.84c5		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84c8		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84cb		9c 20 04	stz $0420			stz 	AssemblerControl
.84ce		20 3f 9a	jsr $9a3f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84d1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84d2						ClearScreen:
.84d2		5a		phy				phy
.84d3		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84d5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84d8		7a		ply				ply
.84d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84da						Command_Data:
.84da		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84dc		a2 80		ldx #$80			ldx 	#KWC_EOL
.84de		20 47 8e	jsr $8e47			jsr 	ScanForward
.84e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e2						DimCommand:
.84e2		b1 30		lda ($30),y			lda 	(codePtr),y
.84e4		29 c0		and #$c0			and 	#$C0
.84e6		c9 40		cmp #$40			cmp 	#$40
.84e8		d0 7a		bne $8564			bne 	_DCSyntax 				; n o, error.
.84ea		b1 30		lda ($30),y			lda 	(codePtr),y
.84ec		18		clc				clc
.84ed		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84ef		85 3f		sta $3f				sta 	zaTemp+1
.84f1		c8		iny				iny
.84f2		b1 30		lda ($30),y			lda 	(codePtr),y
.84f4		c8		iny				iny
.84f5		85 3e		sta $3e				sta 	zaTemp
.84f7		5a		phy				phy
.84f8		a0 02		ldy #$02			ldy 	#2 						; read type byte
.84fa		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84fc		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.84fe		c9 18		cmp #$18			cmp 	#NSTProcedure
.8500		f0 62		beq $8564			beq 	_DCSyntax
.8502		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8504		29 04		and #$04			and 	#NSBIsArray
.8506		f0 64		beq $856c			beq 	_DCType
.8508		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.850a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850c		d0 59		bne $8567			bne 	_DCRedefine
.850e		7a		ply				ply
.850f		20 6f 85	jsr $856f			jsr 	_DCGetSize 				; get array size, check it.
.8512		5a		phy				phy
.8513		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8515		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8517		7a		ply				ply 							; is there a second (e.g. ,x)
.8518		b1 30		lda ($30),y			lda 	(codePtr),y
.851a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.851c		d0 0a		bne $8528			bne 	_DCOneDimension
.851e		c8		iny				iny 							; skip comma
.851f		20 6f 85	jsr $856f			jsr 	_DCGetSize 				; get 2nd array size
.8522		5a		phy				phy
.8523		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8525		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8527		7a		ply				ply
.8528						_DCOneDimension:
.8528		5a		phy				phy 							; save position
.8529		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.852b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.852d		aa		tax				tax
.852e		c8		iny				iny
.852f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8531		e8		inx				inx 							; bump them.
.8532		1a		inc a				inc 	a
.8533		20 d7 9d	jsr $9dd7			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8536		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8538		29 e0		and #$e0			and 	#$E0
.853a		d0 23		bne $855f			bne 	_DCSize
.853c		a0 02		ldy #$02			ldy 	#2 						; get base type
.853e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8540		20 7d 85	jsr $857d			jsr 	ScaleByBaseType 		; scale by base type
.8543		a5 36		lda $36				lda 	zTemp0
.8545		a6 37		ldx $37				ldx 	zTemp0+1
.8547		20 01 9a	jsr $9a01			jsr 	AllocateXABytes 		; allocate memory
.854a		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.854c		91 3e		sta ($3e),y			sta 	(zaTemp),y
.854e		c8		iny				iny
.854f		8a		txa				txa
.8550		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8552		7a		ply				ply 							; get position back
.8553		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 		; check )
.8556		b1 30		lda ($30),y			lda 	(codePtr),y
.8558		c8		iny				iny 							; consume in case
.8559		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.855b		f0 85		beq $84e2			beq 	DimCommand
.855d		88		dey				dey 							; undo consume
.855e		60		rts				rts
.855f						_DCSize:
.855f		a9 16		lda #$16		lda	#22
.8561		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.8564						_DCSyntax:
.8564		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.8567						_DCRedefine:
.8567		a9 15		lda #$15		lda	#21
.8569		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.856c						_DCType:
.856c		4c b4 9f	jmp $9fb4			jmp 	TypeError
.856f						_DCGetSize:
.856f		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8571		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 	; get array dimension
.8574		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8576		f0 e7		beq $855f			beq 	_DCSize
.8578		c9 fe		cmp #$fe			cmp 	#254
.857a		f0 e3		beq $855f			beq 	_DCSize
.857c		60		rts				rts
.857d						ScaleByBaseType:
.857d		29 10		and #$10			and 	#NSBIsString 			; is it string
.857f		d0 19		bne $859a			bne 	_SBBTString
.8581		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8583		48		pha				pha
.8584		a5 36		lda $36				lda 	zTemp0
.8586		48		pha				pha
.8587		06 36		asl $36				asl 	zTemp0 					; x 2
.8589		26 37		rol $37				rol 	zTemp0+1
.858b		06 36		asl $36				asl 	zTemp0 					; x 4
.858d		26 37		rol $37				rol 	zTemp0+1
.858f		68		pla				pla 							; add stacked value = x 5
.8590		65 36		adc $36				adc 	zTemp0
.8592		85 36		sta $36				sta 	zTemp0
.8594		68		pla				pla
.8595		65 37		adc $37				adc 	zTemp0+1
.8597		85 37		sta $37				sta 	zTemp0+1
.8599		60		rts				rts
.859a						_SBBTString:
.859a		06 36		asl $36				asl 	zTemp0
.859c		26 37		rol $37				rol 	zTemp0+1
.859e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dokepoke.asm

.859f						PokeCommand:
.859f		18		clc				clc
.85a0		80 01		bra $85a3			bra 	DPCommand
.85a2						DokeCommand:
.85a2		38		sec				sec
.85a3						DPCommand:
.85a3		08		php				php									; save on stack, CS = Doke, CC = Poke
.85a4		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.85a6		20 ac 9d	jsr $9dac			jsr		Evaluate16BitInteger 		; address
.85a9		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.85ac		e8		inx				inx
.85ad		20 ac 9d	jsr $9dac			jsr		Evaluate16BitInteger 		; data
.85b0		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.85b2		85 36		sta $36				sta 	zTemp0
.85b4		a5 60		lda $60				lda 	NSMantissa1
.85b6		85 37		sta $37				sta 	zTemp0+1
.85b8		a5 59		lda $59				lda 	NSMantissa0+1 				; low byte
.85ba		92 36		sta ($36)			sta 	(zTemp0)
.85bc		28		plp				plp 								; done if POKE
.85bd		90 08		bcc $85c7			bcc 	_DPExit
.85bf		5a		phy				phy 								; write high byte out.
.85c0		a0 01		ldy #$01			ldy 	#1
.85c2		a5 61		lda $61				lda 	NSMantissa1+1
.85c4		91 36		sta ($36),y			sta 	(zTemp0),y
.85c6		7a		ply				ply
.85c7						_DPExit:
.85c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85c8						EndCommand:
.85c8		4c e4 83	jmp $83e4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85cb						ForCommand:
.85cb		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85cd		20 ce a6	jsr $a6ce			jsr 	StackOpen
.85d0		a2 00		ldx #$00			ldx 	#0
.85d2		20 53 98	jsr $9853			jsr 	EvaluateTerm
.85d5		b5 50		lda $50,x			lda 	NSStatus,x
.85d7		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85d9		d0 47		bne $8622			bne		_FCError
.85db		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85dd		20 fc 8e	jsr $8efc			jsr 	CheckNextA
.85e0		e8		inx				inx
.85e1		20 99 9d	jsr $9d99			jsr 	EvaluateInteger 			; <from> in +1
.85e4		b1 30		lda ($30),y			lda 	(codePtr),y
.85e6		c8		iny				iny 								; consume it
.85e7		48		pha				pha 								; save on stack for later
.85e8		c9 b7		cmp #$b7			cmp 	#KWD_DOWNTO
.85ea		f0 04		beq $85f0			beq 	_FCNoSyntax
.85ec		c9 d2		cmp #$d2			cmp 	#KWD_TO
.85ee		d0 35		bne $8625			bne 	_FCSyntaxError
.85f0						_FCNoSyntax:
.85f0		e8		inx				inx
.85f1		20 99 9d	jsr $9d99			jsr 	EvaluateInteger
.85f4		20 13 a7	jsr $a713			jsr 	STKSaveCodePosition 		; save loop back position
.85f7		68		pla				pla 								; restore DOWNTO or TO
.85f8		5a		phy				phy 								; save Y on the stack
.85f9		49 b7		eor #$b7			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85fb		f0 02		beq $85ff			beq 	_FCNotDownTo
.85fd		a9 02		lda #$02			lda 	#2
.85ff						_FCNotDownTo:
.85ff		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8600		a0 10		ldy #$10			ldy 	#16
.8602		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8604		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8606		a5 58		lda $58				lda 	NSMantissa0
.8608		91 34		sta ($34),y			sta 	(basicStack),y
.860a		a5 60		lda $60				lda 	NSMantissa1
.860c		c8		iny				iny
.860d		91 34		sta ($34),y			sta 	(basicStack),y
.860f		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8611		a2 01		ldx #$01			ldx 	#1
.8613		20 28 86	jsr $8628			jsr 	FCIntegerToStack
.8616		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8618		a2 02		ldx #$02			ldx 	#2
.861a		20 28 86	jsr $8628			jsr 	FCIntegerToStack
.861d		20 43 86	jsr $8643			jsr 	CopyIndexToReference
.8620		7a		ply				ply 								; restore position
.8621		60		rts				rts
.8622						_FCError:
.8622		4c b4 9f	jmp $9fb4			jmp 	TypeError
.8625						_FCSyntaxError:
.8625		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.8628						FCIntegerToStack:
.8628		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.862a		10 03		bpl $862f			bpl	 	_FCNotNegative
.862c		20 f5 9d	jsr $9df5			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.862f						_FCNotNegative:
.862f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8631		91 34		sta ($34),y			sta 	(basicStack),y
.8633		c8		iny				iny
.8634		b5 60		lda $60,x			lda 	NSMantissa1,x
.8636		91 34		sta ($34),y			sta 	(basicStack),y
.8638		c8		iny				iny
.8639		b5 68		lda $68,x			lda 	NSMantissa2,x
.863b		91 34		sta ($34),y			sta 	(basicStack),y
.863d		c8		iny				iny
.863e		b5 70		lda $70,x			lda 	NSMantissa3,x
.8640		91 34		sta ($34),y			sta 	(basicStack),y
.8642		60		rts				rts
.8643						CopyIndexToReference:
.8643		5a		phy				phy
.8644		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8646		38		sec				sec 								; (because we copy from offset 8)
.8647		b1 34		lda ($34),y			lda 	(basicStack),y
.8649		e9 08		sbc #$08			sbc 	#8
.864b		85 36		sta $36				sta 	zTemp0
.864d		c8		iny				iny
.864e		b1 34		lda ($34),y			lda 	(basicStack),y
.8650		e9 00		sbc #$00			sbc 	#0
.8652		85 37		sta $37				sta 	zTemp0+1
.8654		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8656		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8658		b1 34		lda ($34),y			lda 	(basicStack),y
.865a		0a		asl a				asl 	a 							; into carry
.865b		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.865d		90 14		bcc $8673			bcc 	_CITRNormal
.865f		38		sec				sec
.8660						_CITRNegative:
.8660		a9 00		lda #$00			lda 	#0
.8662		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8664		91 36		sta ($36),y			sta 	(zTemp0),y
.8666		c8		iny				iny
.8667		ca		dex				dex
.8668		d0 f6		bne $8660			bne 	_CITRNegative
.866a		88		dey				dey 								; look at MSB of mantissa
.866b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.866d		09 80		ora #$80			ora 	#$80
.866f		91 36		sta ($36),y			sta 	(zTemp0),y
.8671		7a		ply				ply
.8672		60		rts				rts
.8673						_CITRNormal:
.8673		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8675		91 36		sta ($36),y			sta 	(zTemp0),y
.8677		c8		iny				iny
.8678		ca		dex				dex
.8679		d0 f8		bne $8673			bne 	_CITRNormal
.867b		7a		ply				ply 								; and exit.
.867c		60		rts				rts
.867d						NextCommand:
.867d		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.867f		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8681		20 fb a6	jsr $a6fb			jsr 	StackCheckFrame
.8684		5a		phy				phy
.8685		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8687		b1 34		lda ($34),y			lda 	(basicStack),y
.8689		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.868b		30 02		bmi $868f			bmi 	_NCStepNeg
.868d		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.868f						_NCStepNeg:
.868f		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8691		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8693		18		clc				clc
.8694						_NCBump:
.8694		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8696		91 34		sta ($34),y			sta 	(basicStack),y
.8698		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.869a		c8		iny				iny 								; next byte
.869b		ca		dex				dex 								; do four times
.869c		d0 f6		bne $8694			bne 	_NCBump
.869e		20 43 86	jsr $8643			jsr		CopyIndexToReference		; copy it to the reference variable.
.86a1		a0 10		ldy #$10			ldy 	#16 						; get step count again
.86a3		b1 34		lda ($34),y			lda 	(basicStack),y
.86a5		0a		asl a				asl 	a 							; sign bit to carry
.86a6		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86a8		85 38		sta $38				sta 	zTemp1
.86aa		90 02		bcc $86ae			bcc 	_NCCompRev 					; use if step is +ve
.86ac		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86ae						_NCCompRev:
.86ae		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86b0		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86b2		85 39		sta $39				sta 	zTemp1+1
.86b4		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86b6		38		sec				sec
.86b7						_NCCompare:
.86b7		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86b9		b1 34		lda ($34),y			lda 	(basicStack),y
.86bb		a4 39		ldy $39				ldy 	zTemp1+1
.86bd		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86bf		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86c1		e6 39		inc $39				inc 	zTemp1+1
.86c3		ca		dex				dex 								; do it 4 times.
.86c4		d0 f1		bne $86b7			bne 	_NCCompare
.86c6		50 02		bvc $86ca			bvc 	_NCNoOverflow 				; convert to signed comparison
.86c8		49 80		eor #$80			eor 	#$80
.86ca						_NCNoOverflow:
.86ca		7a		ply				ply 								; restore Y position
.86cb		0a		asl a				asl 	a 							; is bit 7 set.
.86cc		90 04		bcc $86d2			bcc 	_NCLoopback 				; if no , >= so loop back
.86ce		20 ed a6	jsr $a6ed			jsr 	StackClose 					; exit the loop
.86d1		60		rts				rts
.86d2						_NCLoopBack:
.86d2		20 24 a7	jsr $a724			jsr 	STKLoadCodePosition 		; loop back
.86d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86d6						Command_GOSUB:
.86d6		a2 00		ldx #$00			ldx 	#0
.86d8		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86db		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86dd		20 ce a6	jsr $a6ce			jsr 	StackOpen 					; create frame
.86e0		20 13 a7	jsr $a713			jsr 	STKSaveCodePosition 		; save current position
.86e3		4c f9 86	jmp $86f9			jmp 	GotoStackX
.86e6						Command_RETURN:
.86e6		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86e8		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86ea		20 fb a6	jsr $a6fb			jsr 	StackCheckFrame
.86ed		20 24 a7	jsr $a724			jsr 	STKLoadCodePosition 		; restore code position
.86f0		20 ed a6	jsr $a6ed			jsr 	StackClose
.86f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86f4						GotoCommand:
.86f4		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86f6		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.86f9						GotoStackX:
.86f9		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86fb		48		pha				pha 								; it is slightly inefficient, just in cases.
.86fc		b5 58		lda $58,x			lda 	NSMantissa0,x
.86fe		fa		plx				plx
.86ff		20 a8 a5	jsr $a5a8			jsr 	MemorySearch 				; transfer to line number AX.
.8702		90 05		bcc $8709			bcc 	_GotoError 					; not found, off end.
.8704		d0 03		bne $8709			bne 	_GotoError 					; not found exactly
.8706		4c 87 8b	jmp $8b87			jmp 	RunNewLine 					; and go straight to new line code.
.8709						_GotoError:
.8709		a9 0d		lda #$0d		lda	#13
.870b		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.870e						IfCommand:
.870e		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8710		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber
.8713		b1 30		lda ($30),y			lda 	(codePtr),y
.8715		c9 aa		cmp #$aa			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8717		d0 0a		bne $8723			bne 	_IFStructured 				; we still support it.
.8719		c8		iny				iny 								; consume THEN
.871a		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; is it zero
.871d		f0 01		beq $8720			beq 	_IfFail 					; if fail, go to next line
.871f		60		rts				rts 								; if THEN just continue
.8720						_IfFail:
.8720		4c 6f 8b	jmp $8b6f			jmp 	EOLCommand
.8723						_IfStructured:
.8723		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; is it zero
.8726		d0 07		bne $872f			bne 	_IfExit 					; if not, then continue normally.
.8728		a9 b8		lda #$b8			lda 	#KWD_ELSE 					; look for else/endif
.872a		a2 a7		ldx #$a7			ldx 	#KWD_ENDIF
.872c		20 47 8e	jsr $8e47			jsr 	ScanForward 				; and run from there
.872f						_IfExit:
.872f		60		rts				rts
.8730						ElseCode:
.8730		a9 a7		lda #$a7			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8732		aa		tax				tax 								; so just go to the structure exit
.8733		20 47 8e	jsr $8e47			jsr 	ScanForward
.8736		60		rts				rts
.8737						EndIf:
.8737		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8738						Command_Input:
.8738		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.873a		8d 28 04	sta $0428			sta 	IsInputFlag
.873d		80 03		bra $8742			bra 	Command_IP_Main
.873f						Command_Print:
.873f		9c 28 04	stz $0428			stz 	IsInputFlag 				; clear input flag
.8742						Command_IP_Main:
.8742		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8743						_CPLoop:
.8743		08		php				php 								; save last action flag
.8744		b1 30		lda ($30),y			lda 	(codePtr),y
.8746		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8748		f0 54		beq $879e			beq 	_CPExit
.874a		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874c		f0 50		beq $879e			beq 	_CPExit
.874e		68		pla				pla 								; throw last action flag
.874f		b1 30		lda ($30),y			lda 	(codePtr),y
.8751		c8		iny				iny
.8752		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8754		f0 45		beq $879b			beq 	_CPContinueWithSameLine
.8756		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8758		f0 3c		beq $8796			beq 	_CPTab
.875a		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.875c		f0 34		beq $8792			beq 	_CPNewLine
.875e		88		dey				dey 								; undo the get.
.875f		20 07 94	jsr $9407			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8762		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8764		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8766		f0 0d		beq $8775			beq 	_CPIsValue 					; no, display it.
.8768		ad 28 04	lda $0428			lda 	IsInputFlag 				; if print, dereference and print.
.876b		f0 05		beq $8772			beq 	_CPIsPrint 					; otherwise display.
.876d		20 a7 87	jsr $87a7			jsr 	CIInputValue 				; input a value to the reference
.8770		80 20		bra $8792			bra 	_CPNewLine
.8772						_CPIsPrint:
.8772		20 cc 96	jsr $96cc			jsr 	Dereference 				; dereference if required.
.8775						_CPIsValue:
.8775		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8777		29 10		and #$10			and 	#NSBIsString
.8779		f0 09		beq $8784			beq 	_CPNumber
.877b		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.877d		a5 58		lda $58				lda 	NSMantissa0
.877f		20 0a 88	jsr $880a			jsr 	CPPrintStringXA
.8782		80 be		bra $8742			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8784						_CPNumber:
.8784		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8786		20 61 9c	jsr $9c61			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8789		a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.878b		a9 49		lda #$49			lda 	#DecimalBuffer & $FF
.878d		20 0a 88	jsr $880a			jsr 	CPPrintStringXA 			; print it.
.8790		80 b0		bra $8742			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8792						_CPNewLine:
.8792		a9 0d		lda #$0d			lda 	#13
.8794		80 02		bra $8798			bra 	_CPPrintChar
.8796						_CPTab:
.8796		a9 09		lda #$09			lda 	#9 							; print TAB
.8798						_CPPrintChar:
.8798		20 1d 88	jsr $881d			jsr 	CPPrintVector
.879b						_CPContinueWithSameLine:
.879b		38		sec				sec 								; loop round with carry set, which
.879c		80 a5		bra $8743			bra 	_CPLoop 					; will inhibit final CR
.879e						_CPExit:
.879e		28		plp				plp 								; get last action flag
.879f		b0 05		bcs $87a6			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87a1		a9 0d		lda #$0d			lda 	#13 						; print new line
.87a3		20 1d 88	jsr $881d			jsr 	CPPrintVector
.87a6						_CPExit2:
.87a6		60		rts				rts
.87a7						CIInputValue:
.87a7		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87a9						_CIInputLine:
.87a9		20 20 88	jsr $8820			jsr 	CPInputVector 				; get key
.87ac		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87ae		f0 1f		beq $87cf			beq 	_CIHaveValue
.87b0		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87b2		f0 11		beq $87c5			beq 	_CIBackspace
.87b4		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87b6		90 f1		bcc $87a9			bcc 	_CIInputLine
.87b8		e0 50		cpx #$50			cpx 	#80 						; max length
.87ba		b0 ed		bcs $87a9			bcs 	_CIInputLine
.87bc		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87bf		e8		inx				inx
.87c0		20 1d 88	jsr $881d			jsr 	CPPrintVector 				; echo it.
.87c3		80 e4		bra $87a9			bra 	_CIInputLine
.87c5						_CIBackSpace:
.87c5		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87c7		f0 e0		beq $87a9			beq 	_CIInputLine
.87c9		20 1d 88	jsr $881d			jsr 	CPPrintVector 				; echo it.
.87cc		ca		dex				dex
.87cd		80 da		bra $87a9			bra 	_CIInputLine
.87cf						_CIHaveValue:
.87cf		9e 2a 05	stz $052a,x			stz 	LineBuffer,x 				; ASCIIZ string now in line buffer.
.87d2		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87d4		29 10		and #$10			and 	#NSBIsString
.87d6		f0 17		beq $87ef			beq 	_CIAssignNumber 			; assign a number
.87d8		a2 01		ldx #$01			ldx 	#1
.87da		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87dc		95 58		sta $58,x			sta 	NSMantissa0,x
.87de		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87e0		95 60		sta $60,x			sta 	NSMantissa1,x
.87e2		74 68		stz $68,x			stz 	NSMantissa2,x
.87e4		74 70		stz $70,x			stz 	NSMantissa3,x
.87e6		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87e8		95 50		sta $50,x			sta  	NSStatus,x
.87ea		ca		dex				dex 								; X = 0
.87eb		20 5c 88	jsr $885c			jsr 	AssignVariable
.87ee		60		rts				rts
.87ef						_CIAssignNumber:
.87ef		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87f1		85 36		sta $36				sta 	zTemp0
.87f3		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87f5		85 37		sta $37				sta 	zTemp0+1
.87f7		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87f9		20 e3 9b	jsr $9be3			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87fc		90 07		bcc $8805			bcc 	_CIIsOkay
.87fe		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8800		20 1d 88	jsr $881d			jsr 	CPPrintVector
.8803		80 a2		bra $87a7			bra 	CIInputValue
.8805						_CIIsOkay:
.8805		ca		dex				dex 								; X = 0
.8806		20 5c 88	jsr $885c			jsr 	AssignVariable
.8809		60		rts				rts
.880a						CPPrintStringXA:
.880a		5a		phy				phy
.880b		86 37		stx $37				stx 	zTemp0+1
.880d		85 36		sta $36				sta 	zTemp0
.880f		a0 00		ldy #$00			ldy 	#0
.8811						_PSXALoop:
.8811		b1 36		lda ($36),y			lda 	(zTemp0),y
.8813		f0 06		beq $881b			beq 	_PSXAExit
.8815		20 1d 88	jsr $881d			jsr 	CPPrintVector
.8818		c8		iny				iny
.8819		80 f6		bra $8811			bra 	_PSXALoop
.881b						_PSXAExit:
.881b		7a		ply				ply
.881c		60		rts				rts
.881d						CPPrintVector:
.881d		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8820						CPInputVector:
.8820		4c 17 80	jmp $8017			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8823						LetCommand:
.8823		a2 00		ldx #$00			ldx 	#0
.8825		b1 30		lda ($30),y			lda 	(codePtr),y
.8827		c9 10		cmp #$10			cmp 	#KWD_AT
.8829		d0 14		bne $883f			bne 	_LCStandard
.882b		c8		iny				iny 								; skip equal
.882c		20 53 98	jsr $9853			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.882f		20 cc 96	jsr $96cc			jsr 	Dereference 				; dereference it to a value
.8832		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8834		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8836		95 50		sta $50,x			sta 	NSStatus,x
.8838		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.883a		d0 0f		bne $884b			bne 	_LCMain
.883c		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; was a reference before.
.883f						_LCStandard:
.883f		ad f1 93	lda $93f1			lda 	PrecedenceLevel+"*"			; precedence > this
.8842		20 0b 94	jsr $940b			jsr 	EvaluateExpressionAtPrecedence
.8845		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8847		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8849		f0 0e		beq $8859			beq 	_LetGoProc 					; it's a procedure call.
.884b						_LCMain:
.884b		a9 3d		lda #$3d			lda 	#"=" 						; check =
.884d		20 fc 8e	jsr $8efc			jsr 	CheckNextA
.8850		e8		inx				inx 								; RHS
.8851		20 71 9d	jsr $9d71			jsr 	EvaluateValue
.8854		ca		dex				dex
.8855		20 5c 88	jsr $885c			jsr 	AssignVariable
.8858		60		rts				rts
.8859						_LetGoProc:
.8859		4c 45 8a	jmp $8a45			jmp 	CallProcedure
.885c						AssignVariable:
.885c		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.885e		48		pha				pha 								; save a copy
.885f		55 51		eor $51,x			eor 	NSStatus+1,x
.8861		29 10		and #$10			and 	#NSBIsString
.8863		d0 0b		bne $8870			bne 	_ASError
.8865		68		pla				pla 								; get back
.8866		29 10		and #$10			and 	#NSBIsString 				; check type
.8868		d0 03		bne $886d			bne 	_ASString
.886a		4c 0a 96	jmp $960a			jmp 	AssignNumber
.886d						_ASString:
.886d		4c 68 96	jmp $9668			jmp 	AssignString
.8870						_ASError:
.8870		4c b4 9f	jmp $9fb4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8873						Command_List:
.8873		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8876		b1 30		lda ($30),y			lda 	(codePtr),y
.8878		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.887a		c9 40		cmp #$40			cmp 	#$40  						; of code.
.887c		f0 6e		beq $88ec			beq 	_CLListProcedure
.887e		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8880		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8882		a9 ff		lda #$ff			lda 	#$FF
.8884		85 5f		sta $5f				sta 	NSMantissa0+7
.8886		85 67		sta $67				sta 	NSMantissa1+7
.8888		b1 30		lda ($30),y			lda 	(codePtr),y
.888a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.888c		f0 1a		beq $88a8			beq 	_CLSecond
.888e		20 69 89	jsr $8969			jsr 	CLIsDigit 					; if not digit, list all
.8891		b0 20		bcs $88b3			bcs 	_CLStart
.8893		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8895		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.8898		b1 30		lda ($30),y			lda 	(codePtr),y
.889a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.889c		f0 0a		beq $88a8			beq 	_CLSecond 					; if so go get it
.889e		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.88a0		85 5f		sta $5f				sta 	NSMantissa0+7
.88a2		a5 64		lda $64				lda 	NSMantissa1+4
.88a4		85 67		sta $67				sta 	NSMantissa1+7
.88a6		80 0b		bra $88b3			bra 	_CLStart
.88a8						_CLSecond:
.88a8		c8		iny				iny 								; consume comma
.88a9		20 69 89	jsr $8969			jsr 	CLIsDigit 					; digit found
.88ac		b0 05		bcs $88b3			bcs 	_CLStart 					; if not, continue listing
.88ae		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88b0		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.88b3						_CLStart
.88b3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88b5		85 30		sta $30				sta 	codePtr
.88b7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88b9		85 31		sta $31				sta 	codePtr+1
.88bb						_CLLoop:
.88bb		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88be		f0 27		beq $88e7			beq 	_CLBreak
.88c0		b2 30		lda ($30)			lda 	(codePtr)
.88c2		f0 20		beq $88e4			beq 	_CLExit
.88c4		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88c6		20 58 89	jsr $8958			jsr 	CLCompareLineNo
.88c9		90 0c		bcc $88d7			bcc 	_CLNext
.88cb		a2 07		ldx #$07			ldx 	#7
.88cd		20 58 89	jsr $8958			jsr 	CLCompareLineNo
.88d0		f0 02		beq $88d4			beq 	_CLDoThisOne
.88d2		b0 03		bcs $88d7			bcs 	_CLNext
.88d4						_CLDoThisOne:
.88d4		20 45 89	jsr $8945			jsr 	CLListOneLine 				; routine to list the current line.
.88d7						_CLNext:
.88d7		18		clc				clc
.88d8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88da		65 30		adc $30				adc 	codePtr
.88dc		85 30		sta $30				sta 	codePtr
.88de		90 02		bcc $88e2			bcc 	_CREExit
.88e0		e6 31		inc $31				inc 	codePtr+1 					; carry
.88e2						_CREExit:
.88e2		80 d7		bra $88bb			bra 	_CLLoop
.88e4						_CLExit:
.88e4		4c e4 83	jmp $83e4			jmp 	WarmStart
.88e7						_CLBreak:
.88e7		a9 01		lda #$01		lda	#1
.88e9		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.88ec						_CLListProcedure:
.88ec		b1 30		lda ($30),y			lda 	(codePtr),y
.88ee		85 38		sta $38				sta 	zTemp1
.88f0		c8		iny				iny
.88f1		b1 30		lda ($30),y			lda 	(codePtr),y
.88f3		85 39		sta $39				sta 	zTemp1+1
.88f5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88f7		85 30		sta $30				sta 	codePtr
.88f9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88fb		85 31		sta $31				sta 	codePtr+1
.88fd						_CLLPSearch:
.88fd		b2 30		lda ($30)			lda 	(codePtr)
.88ff		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8901		f0 e1		beq $88e4			beq 	_CLExit
.8903		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8905		b1 30		lda ($30),y			lda 	(codePtr),y
.8907		c9 a4		cmp #$a4			cmp 	#KWD_PROC
.8909		d0 0e		bne $8919			bne 	_CLLPNext
.890b		c8		iny				iny 								; check if PROC this.
.890c		b1 30		lda ($30),y			lda 	(codePtr),y
.890e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8910		d0 07		bne $8919			bne 	_CLLPNext
.8912		c8		iny				iny
.8913		b1 30		lda ($30),y			lda 	(codePtr),y
.8915		c5 39		cmp $39				cmp 	zTemp1+1
.8917		f0 0d		beq $8926			beq 	_CLLPFound
.8919						_CLLPNext:
.8919		18		clc				clc
.891a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.891c		65 30		adc $30				adc 	codePtr
.891e		85 30		sta $30				sta 	codePtr
.8920		90 02		bcc $8924			bcc 	_CREExit
.8922		e6 31		inc $31				inc 	codePtr+1 					; carry
.8924						_CREExit:
.8924		80 d7		bra $88fd			bra 	_CLLPSearch
.8926						_CLLPFound:
.8926		b2 30		lda ($30)			lda 	(codePtr)
.8928		f0 ba		beq $88e4			beq 	_CLExit
.892a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.892c		b1 30		lda ($30),y			lda 	(codePtr),y
.892e		48		pha				pha
.892f		20 45 89	jsr $8945			jsr 	CLListOneLine 				; list line and go forward
.8932		18		clc				clc
.8933		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8935		65 30		adc $30				adc 	codePtr
.8937		85 30		sta $30				sta 	codePtr
.8939		90 02		bcc $893d			bcc 	_CREExit
.893b		e6 31		inc $31				inc 	codePtr+1 					; carry
.893d						_CREExit:
.893d		68		pla				pla 								; reached ENDPROC ?
.893e		c9 a8		cmp #$a8			cmp 	#KWD_ENDPROC
.8940		d0 e4		bne $8926			bne 	_CLLPFound
.8942		4c e4 83	jmp $83e4			jmp 	WarmStart
.8945						CLListOneLine:
.8945		20 aa 8e	jsr $8eaa			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8948		20 5d 80	jsr $805d			jsr 	TKListConvertLine 			; convert line into token Buffer
.894b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.894d		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.894f		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA
.8952		a9 0d		lda #$0d			lda 	#13 						; new line
.8954		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8957		60		rts				rts
.8958						CLCompareLineNo:
.8958		38		sec				sec
.8959		a0 01		ldy #$01			ldy 	#1
.895b		b1 30		lda ($30),y			lda 	(codePtr),y
.895d		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.895f		85 36		sta $36				sta 	zTemp0
.8961		c8		iny				iny
.8962		b1 30		lda ($30),y			lda 	(codePtr),y
.8964		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8966		05 36		ora $36				ora 	zTemp0
.8968		60		rts				rts
.8969						CLIsDigit:
.8969		b1 30		lda ($30),y			lda 	(codePtr),y
.896b		c9 30		cmp #$30			cmp 	#"0"
.896d		90 03		bcc $8972			bcc	 	_CLIDExitFalse
.896f		c9 3a		cmp #$3a			cmp 	#"9"+1
.8971		60		rts				rts
.8972						_CLIDExitFalse:
.8972		38		sec				sec
.8973		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8974						Command_LOCAL:
.8974		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8976		20 82 89	jsr $8982			jsr 	LocaliseNextTerm 			; convert term to a local.
.8979		b1 30		lda ($30),y			lda 	(codePtr),y
.897b		c8		iny				iny
.897c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.897e		f0 f4		beq $8974			beq 	Command_LOCAL 				; if so, localise another variable.
.8980		88		dey				dey 								; unpick pre-get
.8981		60		rts				rts
.8982						LocaliseNextTerm:
.8982		20 53 98	jsr $9853			jsr 	EvaluateTerm 				; evaluate the term
.8985		b5 50		lda $50,x			lda 	NSStatus,x
.8987		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8989		f0 5c		beq $89e7			beq		_LNTError
.898b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.898d		85 36		sta $36				sta 	zTemp0
.898f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8991		85 37		sta $37				sta  	zTemp0+1
.8993		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8995		29 10		and #$10			and 	#NSBIsString
.8997		d0 1e		bne $89b7			bne 	_LNTPushString
.8999		5a		phy				phy
.899a		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.899c						_LNTPushNumLoop:
.899c		b1 36		lda ($36),y			lda		(zTemp0),y
.899e		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89a1		c8		iny				iny
.89a2		c0 05		cpy #$05			cpy 	#5
.89a4		d0 f6		bne $899c			bne 	_LNTPushNumLoop
.89a6		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.89a8		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89ab		a5 37		lda $37				lda 	zTemp0+1
.89ad		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89b0		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.89b2		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89b5		7a		ply				ply
.89b6		60		rts				rts
.89b7						_LNTPushString:
.89b7		5a		phy				phy
.89b8		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.89ba		85 38		sta $38				sta 	zTemp1
.89bc		a0 01		ldy #$01			ldy 	#1
.89be		b1 36		lda ($36),y			lda 	(zTemp0),y
.89c0		85 39		sta $39				sta 	zTemp1+1
.89c2		a0 00		ldy #$00			ldy 	#0 							; output string
.89c4		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89c6		f0 0a		beq $89d2			beq 	_LNTStringOut
.89c8						_LNTPushStrLoop:
.89c8		b1 38		lda ($38),y			lda 	(zTemp1),y
.89ca		f0 06		beq $89d2			beq 	_LNTStringOut
.89cc		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89cf		c8		iny				iny
.89d0		80 f6		bra $89c8			bra 	_LNTPushStrLoop
.89d2						_LNTStringOut:
.89d2		98		tya				tya									; output length (chars written).
.89d3		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89d6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89d8		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89db		b5 60		lda $60,x			lda 	NSMantissa1,x
.89dd		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89e0		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89e2		20 ad a6	jsr $a6ad			jsr 	StackPushByte
.89e5		7a		ply				ply
.89e6		60		rts				rts
.89e7						_LNTError:
.89e7		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.89ea						LocalPopValue:
.89ea		20 c5 a6	jsr $a6c5			jsr 	StackPopByte
.89ed		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.89ef		d0 17		bne $8a08			bne 	_LPVString
.89f1		20 c5 a6	jsr $a6c5			jsr 	StackPopByte 				; address
.89f4		85 37		sta $37				sta 	zTemp0+1
.89f6		20 c5 a6	jsr $a6c5			jsr 	StackPopByte
.89f9		85 36		sta $36				sta 	zTemp0
.89fb		5a		phy				phy
.89fc		a0 04		ldy #$04			ldy 	#4 							; copy back
.89fe						_LPVNumberCopy:
.89fe		20 c5 a6	jsr $a6c5			jsr 	StackPopByte
.8a01		91 36		sta ($36),y			sta 	(zTemp0),y
.8a03		88		dey				dey
.8a04		10 f8		bpl $89fe			bpl 	_LPVNumberCopy
.8a06		7a		ply				ply 								; and complete
.8a07		60		rts				rts
.8a08						_LPVString:
.8a08		20 c5 a6	jsr $a6c5			jsr 	StackPopByte 				; address of record copied to zTemp0
.8a0b		85 37		sta $37				sta 	zTemp0+1
.8a0d		20 c5 a6	jsr $a6c5			jsr 	StackPopByte
.8a10		85 36		sta $36				sta 	zTemp0
.8a12		5a		phy				phy
.8a13		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8a15		85 38		sta $38				sta 	zTemp1
.8a17		a0 01		ldy #$01			ldy 	#1
.8a19		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a1b		85 39		sta $39				sta 	zTemp1+1
.8a1d		20 c5 a6	jsr $a6c5			jsr 	StackPopByte 				; # chars to get => y
.8a20		a8		tay				tay
.8a21		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a23		f0 0e		beq $8a33			beq 	_LPVStringCopied
.8a25		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a27		91 38		sta ($38),y			sta 	(zTemp1),y
.8a29						_LPVStringCopy:
.8a29		88		dey				dey
.8a2a		30 07		bmi $8a33			bmi 	_LPVStringCopied
.8a2c		20 c5 a6	jsr $a6c5			jsr 	StackPopByte
.8a2f		91 38		sta ($38),y			sta 	(zTemp1),y
.8a31		80 f6		bra $8a29			bra 	_LPVStringCopy
.8a33						_LPVStringCopied:
.8a33		fa		plx				plx
.8a34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a35						NewCommand:
.8a35		20 3b 8a	jsr $8a3b			jsr 	NewProgram 					; does the actual NEW.
.8a38		4c e4 83	jmp $83e4			jmp 	WarmStart 					; and warm starts straight away.
.8a3b						NewProgram:
.8a3b		20 8a a5	jsr $a58a			jsr 	MemoryNew
.8a3e		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a41		20 7a 84	jsr $847a			jsr 	ClearCommand 				; clear everything.
.8a44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a45						CallProcedure:
.8a45		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a47		b1 30		lda ($30),y			lda 	(codePtr),y
.8a49		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a4b		f0 0c		beq $8a59			beq 	_CPEndParam
.8a4d						_CPParamLoop:
.8a4d		20 71 9d	jsr $9d71			jsr 	EvaluateValue 				; get parameter onto stack
.8a50		e8		inx				inx 								; bump next stack
.8a51		b1 30		lda ($30),y			lda 	(codePtr),y
.8a53		c8		iny				iny
.8a54		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a56		f0 f5		beq $8a4d			beq 	_CPParamLoop
.8a58		88		dey				dey 								; unpick.
.8a59						_CPEndParam:
.8a59		8e 16 04	stx $0416			stx 	LastParameter 				; save the last parameters index.
.8a5c		c8		iny				iny									; skip right bracket
.8a5d		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a5f		20 ce a6	jsr $a6ce			jsr 	StackOpen
.8a62		20 13 a7	jsr $a713			jsr 	STKSaveCodePosition 		; save loop position
.8a65		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a67		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a69		a5 60		lda $60				lda 	NSMantissa1
.8a6b		85 37		sta $37				sta 	zTemp0+1
.8a6d		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a6f		b2 36		lda ($36)			lda 	(zTemp0)
.8a71		85 30		sta $30				sta 	safePtr
.8a73		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a75		85 31		sta $31				sta 	safePtr+1
.8a77		c8		iny				iny
.8a78		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a7a		85 32		sta $32				sta 	safePtr+2
.8a7c		c8		iny				iny
.8a7d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a7f		85 33		sta $33				sta 	safePtr+3
.8a81		c8		iny				iny 								; get Y offset -> Y
.8a82		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a84		a8		tay				tay
.8a85		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8a87		ec 16 04	cpx $0416			cpx	 	LastParameter 				; check zero parameters at the start
.8a8a		f0 13		beq $8a9f			beq 	_ParamExit 					; if so, exit.
.8a8c						_ParamExtract:
.8a8c		ca		dex				dex 								; put a local term on the level before
.8a8d		20 82 89	jsr $8982			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8a90		20 5c 88	jsr $885c			jsr 	AssignVariable 				; assign stacked value to the variable.
.8a93		e8		inx				inx 								; advance to next parameter to do.
.8a94		e8		inx				inx
.8a95		ec 16 04	cpx $0416			cpx 	LastParameter 				; are we done ?
.8a98		f0 05		beq $8a9f			beq 	_ParamExit
.8a9a		20 f4 8e	jsr $8ef4			jsr 	CheckComma 					; comma seperating parameters
.8a9d		80 ed		bra $8a8c			bra 	_ParamExtract
.8a9f						_ParamExit:
.8a9f		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; check )
.8aa2		60		rts				rts 								; and continue from here
.8aa3						Command_ENDPROC:
.8aa3		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8aa5		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8aa7		20 fb a6	jsr $a6fb			jsr 	StackCheckFrame
.8aaa		20 24 a7	jsr $a724			jsr 	STKLoadCodePosition 		; restore code position
.8aad		20 ed a6	jsr $a6ed			jsr 	StackClose
.8ab0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ab1						Command_Read:
.8ab1		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8ab3		20 53 98	jsr $9853			jsr 	EvaluateTerm
.8ab6		b5 50		lda $50,x			lda 	NSStatus,x
.8ab8		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8aba		f0 4f		beq $8b0b			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8abc		20 54 8b	jsr $8b54			jsr 	SwapDataCodePtrs 			; swap code and data
.8abf		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ac2		d0 25		bne $8ae9			bne 	_CRContinueData  			; forward for the next one.
.8ac4		b2 30		lda ($30)			lda 	(codePtr)
.8ac6		f0 1c		beq $8ae4			beq 	_CRNoData
.8ac8						_CRKeepSearching:
.8ac8		a9 b4		lda #$b4			lda 	#KWD_DATA 					; scan for instruction
.8aca		a2 80		ldx #$80			ldx 	#KWC_EOL
.8acc		20 47 8e	jsr $8e47			jsr 	ScanForward
.8acf		c9 b4		cmp #$b4			cmp 	#KWD_DATA 					; found data ?
.8ad1		f0 16		beq $8ae9			beq 	_CRHaveData 				; found it
.8ad3		18		clc				clc
.8ad4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ad6		65 30		adc $30				adc 	codePtr
.8ad8		85 30		sta $30				sta 	codePtr
.8ada		90 02		bcc $8ade			bcc 	_CREExit
.8adc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ade						_CREExit:
.8ade		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ae0		b2 30		lda ($30)			lda 	(codePtr)
.8ae2		d0 e4		bne $8ac8			bne 	_CRKeepSearching
.8ae4						_CRNoData:
.8ae4		a9 0b		lda #$0b		lda	#11
.8ae6		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.8ae9						_CRHaveData:
.8ae9						_CRContinueData:
.8ae9		a2 01		ldx #$01			ldx 	#1
.8aeb		20 71 9d	jsr $9d71			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8aee		ca		dex				dex
.8aef		20 5c 88	jsr $885c			jsr		AssignVariable 				; do the assignment
.8af2		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8af5		b1 30		lda ($30),y			lda 	(codePtr),y
.8af7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8af9		d0 04		bne $8aff			bne 	_CRSwapBack
.8afb		c8		iny				iny 								; consume comma
.8afc		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8aff						_CRSwapBack:
.8aff		20 54 8b	jsr $8b54			jsr 	SwapDataCodePtrs			; swap them back.
.8b02		b1 30		lda ($30),y			lda 	(codePtr),y
.8b04		c8		iny				iny
.8b05		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b07		f0 a8		beq $8ab1			beq 	Command_Read 				; if so go round again.
.8b09		88		dey				dey 								; unpick get.
.8b0a		60		rts				rts
.8b0b						_CRSyntax:
.8b0b		4c aa 9f	jmp $9faa			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b0e						RemCommand:
.8b0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b10		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b12		d0 06		bne $8b1a			bne 	_RMExit
.8b14		c8		iny				iny 								; point to offset
.8b15		98		tya				tya 								; A = offset position
.8b16		38		sec				sec 								; add size +1 hence SEC
.8b17		71 30		adc ($30),y			adc 	(codePtr),y
.8b19		a8		tay				tay 								; make current position.
.8b1a						_RMExit:
.8b1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b1b						Command_REPEAT:
.8b1b		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b1d		20 ce a6	jsr $a6ce			jsr 	StackOpen
.8b20		20 13 a7	jsr $a713			jsr 	STKSaveCodePosition 		; save loop position
.8b23		60		rts				rts
.8b24						Command_UNTIL:
.8b24		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b26		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b28		20 fb a6	jsr $a6fb			jsr 	StackCheckFrame
.8b2b		a2 00		ldx #$00			ldx 	#0
.8b2d		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; work out the number
.8b30		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; check if zero
.8b33		f0 04		beq $8b39			beq 	_CULoopBack 				; if so keep looping
.8b35		20 ed a6	jsr $a6ed			jsr 	StackClose		 			; return
.8b38		60		rts				rts
.8b39						_CULoopBack:
.8b39		20 24 a7	jsr $a724			jsr 	STKLoadCodePosition 		; loop back
.8b3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b3d						Command_Restore:
.8b3d		20 54 8b	jsr $8b54			jsr 	SwapDataCodePtrs 			; swap code and data
.8b40		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b42		85 30		sta $30				sta 	codePtr
.8b44		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b46		85 31		sta $31				sta 	codePtr+1
.8b48		20 54 8b	jsr $8b54			jsr 	SwapDataCodePtrs 			; put them back
.8b4b		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b4d		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8b50		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8b53		60		rts				rts
.8b54						SwapDataCodePtrs:
.8b54		da		phx				phx
.8b55		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b57						_SDCPLoop:
.8b57		b5 30		lda $30,x			lda 	safePtr,x
.8b59		48		pha				pha
.8b5a		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8b5d		95 30		sta $30,x			sta 	safePtr,x
.8b5f		68		pla				pla
.8b60		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8b63		ca		dex				dex
.8b64		10 f1		bpl $8b57			bpl 	_SDCPLoop
.8b66		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8b69		8c 1b 04	sty $041b			sty 	dataPointer+4
.8b6c		a8		tay				tay
.8b6d		fa		plx				plx
.8b6e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b6f						EOLCommand:
.8b6f		18		clc				clc
.8b70		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b72		65 30		adc $30				adc 	codePtr
.8b74		85 30		sta $30				sta 	codePtr
.8b76		90 02		bcc $8b7a			bcc 	_CREExit
.8b78		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b7a						_CREExit:
.8b7a		80 0b		bra $8b87			bra 	RunNewLine
.8b7c						CommandRUN:
.8b7c		20 7a 84	jsr $847a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8b7f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b81		85 30		sta $30				sta 	codePtr
.8b83		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b85		85 31		sta $31				sta 	codePtr+1
.8b87						RUNNewLine:
.8b87		b2 30		lda ($30)			lda 	(codePtr)
.8b89		f0 7b		beq $8c06			beq 	CRNoProgram         		; no then END.
.8b8b		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8b8d		9a		txs				txs
.8b8e						RUNCodePointerLine:
.8b8e		a0 02		ldy #$02			ldy 	#2 							; start of program
.8b90						_CRIncMainLoop:
.8b90		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8b93		d0 22		bne $8bb7			bne 	_CRNoBreakCheck
.8b95		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8b98		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check
.8b9b		f0 64		beq $8c01			beq 	_CRBreak
.8b9d		a5 01		lda $01				lda 	1 							; save I/O 0
.8b9f		48		pha				pha
.8ba0		64 01		stz $01				stz 	1 							; access I/O Page 0
.8ba2		38		sec				sec 								; calculate timer - LastTick
.8ba3		ad 59 d6	lda $d659			lda 	$D659
.8ba6		aa		tax				tax 								; saving timer in X
.8ba7		ed 5c 06	sbc $065c			sbc 	LastTick
.8baa		c9 03		cmp #$03			cmp 	#3
.8bac		90 06		bcc $8bb4			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8bae		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8bb1		20 57 9e	jsr $9e57			jsr 	TickHandler 							; go do the code.
.8bb4						_NoFireTick:
.8bb4		68		pla				pla 								; restore I/O 0
.8bb5		85 01		sta $01				sta 	1
.8bb7						_CRNoBreakCheck:
.8bb7		c8		iny				iny									; next token
.8bb8						_CRMainLoop:
.8bb8		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8bbb		b1 30		lda ($30),y			lda 	(codePtr),y
.8bbd		10 10		bpl $8bcf			bpl 	_CRNotKeyword				; not a token.
.8bbf		c9 a2		cmp #$a2			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8bc1		b0 04		bcs $8bc7			bcs 	_CRIsKeyword
.8bc3		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8bc5		b0 34		bcs $8bfb			bcs		_CRSyntaxError
.8bc7						_CRIsKeyword:
.8bc7		c8		iny				iny 								; consume command
.8bc8		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8bc9		aa		tax				tax 								; put in X for vector jump
.8bca		20 fe 8b	jsr $8bfe			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8bcd		80 e9		bra $8bb8			bra 	_CRMainLoop 				; and loop round
.8bcf						_CRNotKeyword:
.8bcf		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8bd1		f0 bd		beq $8b90			beq 	_CRIncMainLoop
.8bd3		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8bd5		90 05		bcc $8bdc			bcc 	_CRNotVariable
.8bd7						_CRGoLet:
.8bd7		20 23 88	jsr $8823			jsr 	LetCommand
.8bda		80 dc		bra $8bb8			bra 	_CRMainLoop
.8bdc						_CRNotVariable:
.8bdc		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8bde		f0 f7		beq $8bd7			beq 	_CRGoLet
.8be0		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8be2		f0 f3		beq $8bd7			beq 	_CRGoLet
.8be4		c9 21		cmp #$21			cmp 	#KWD_PLING
.8be6		f0 ef		beq $8bd7			beq 	_CRGoLet
.8be8		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8bea		f0 09		beq $8bf5			beq 	_CRGoRem
.8bec		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8bee		d0 0b		bne $8bfb			bne 	_CRSyntaxError
.8bf0		20 56 82	jsr $8256			jsr 	LabelHere
.8bf3		80 c3		bra $8bb8			bra 	_CRMainLoop
.8bf5						_CRGoRem:
.8bf5		c8		iny				iny
.8bf6		20 0e 8b	jsr $8b0e			jsr 	RemCommand
.8bf9		80 bd		bra $8bb8			bra 	_CRMainLoop
.8bfb						_CRSyntaxError:
.8bfb		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.8bfe						_CRCallVector0:
.8bfe		7c 9c 8c	jmp ($8c9c,x)			jmp 	(VectorSet0,x)
.8c01						_CRBreak:
.8c01		a9 01		lda #$01		lda	#1
.8c03		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.8c06						CRNoProgram:
.8c06		4c c8 85	jmp $85c8			jmp 	EndCommand
.8c09						Shift1Command:
.8c09		b1 30		lda ($30),y			lda 	(codePtr),y
.8c0b		c8		iny				iny
.8c0c		0a		asl a				asl 	a
.8c0d		aa		tax				tax
.8c0e		7c 42 8d	jmp ($8d42,x)			jmp 	(VectorSet1,x)
.8c11						Shift2Command:
.8c11		b1 30		lda ($30),y			lda 	(codePtr),y
.8c13		c8		iny				iny
.8c14		0a		asl a				asl 	a
.8c15		aa		tax				tax
.8c16		7c 68 8d	jmp ($8d68,x)			jmp 	(VectorSet2,x)
.8c19						Unused1:
.8c19						Unused2:
.8c19						Unused3:
.8c19						Unused4:
.8c19		4c aa 9f	jmp $9faa			jmp 	SyntaxError
>8c1c								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c1c						VectorSetPunc:
>8c1c		bd 91					.word	ShiftLeft                        ; $00 <<
>8c1e		a8 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8c20		9e 8f					.word	BinaryCompareNotEqual            ; $02 <>
>8c22		aa 9f					.word	SyntaxError                      ; $03 !!3
>8c24		aa 9f					.word	SyntaxError                      ; $04 ><
>8c26		b2 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c28		c0 91					.word	ShiftRight                       ; $06 >>
>8c2a		aa 9f					.word	SyntaxError                      ; $07 !!7
>8c2c		aa 9f					.word	SyntaxError                      ; $08 !!8
>8c2e		aa 9f					.word	SyntaxError                      ; $09 !!9
>8c30		aa 9f					.word	SyntaxError                      ; $0a !!10
>8c32		aa 9f					.word	SyntaxError                      ; $0b !!11
>8c34		aa 9f					.word	SyntaxError                      ; $0c !!12
>8c36		aa 9f					.word	SyntaxError                      ; $0d !!13
>8c38		aa 9f					.word	SyntaxError                      ; $0e !!14
>8c3a		aa 9f					.word	SyntaxError                      ; $0f !!15
>8c3c		aa 9f					.word	SyntaxError                      ; $10 @
>8c3e		aa 9f					.word	SyntaxError                      ; $11 !!17
>8c40		aa 9f					.word	SyntaxError                      ; $12 !!18
>8c42		aa 9f					.word	SyntaxError                      ; $13 [
>8c44		69 90					.word	IntegerDivide                    ; $14 \
>8c46		aa 9f					.word	SyntaxError                      ; $15 ]
>8c48		fb 92					.word	EorInteger                       ; $16 ^
>8c4a		aa 9f					.word	SyntaxError                      ; $17 _
>8c4c		aa 9f					.word	SyntaxError                      ; $18 `
>8c4e		aa 9f					.word	SyntaxError                      ; $19 !!25
>8c50		aa 9f					.word	SyntaxError                      ; $1a !!26
>8c52		aa 9f					.word	SyntaxError                      ; $1b {
>8c54		c6 92					.word	OraInteger                       ; $1c |
>8c56		aa 9f					.word	SyntaxError                      ; $1d }
>8c58		aa 9f					.word	SyntaxError                      ; $1e ~
>8c5a		aa 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8c5c		aa 9f					.word	SyntaxError                      ; $20
>8c5e		30 93					.word	WordIndirect                     ; $21 !
>8c60		aa 9f					.word	SyntaxError                      ; $22 "
>8c62		aa 9f					.word	SyntaxError                      ; $23 #
>8c64		aa 9f					.word	SyntaxError                      ; $24 $
>8c66		aa 90					.word	IntegerModulus                   ; $25 %
>8c68		91 92					.word	AndInteger                       ; $26 &
>8c6a		aa 9f					.word	SyntaxError                      ; $27 '
>8c6c		aa 9f					.word	SyntaxError                      ; $28 (
>8c6e		aa 9f					.word	SyntaxError                      ; $29 )
>8c70		18 91					.word	MulInteger                       ; $2a *
>8c72		33 92					.word	AddInteger                       ; $2b +
>8c74		aa 9f					.word	SyntaxError                      ; $2c ,
>8c76		6c 92					.word	SubInteger                       ; $2d -
>8c78		aa 9f					.word	SyntaxError                      ; $2e .
>8c7a		ea 94					.word	FDivideCommand                   ; $2f /
>8c7c		aa 9f					.word	SyntaxError                      ; $30 0
>8c7e		aa 9f					.word	SyntaxError                      ; $31 1
>8c80		aa 9f					.word	SyntaxError                      ; $32 2
>8c82		aa 9f					.word	SyntaxError                      ; $33 3
>8c84		aa 9f					.word	SyntaxError                      ; $34 4
>8c86		aa 9f					.word	SyntaxError                      ; $35 5
>8c88		aa 9f					.word	SyntaxError                      ; $36 6
>8c8a		aa 9f					.word	SyntaxError                      ; $37 7
>8c8c		aa 9f					.word	SyntaxError                      ; $38 8
>8c8e		aa 9f					.word	SyntaxError                      ; $39 9
>8c90		aa 9f					.word	SyntaxError                      ; $3a :
>8c92		aa 9f					.word	SyntaxError                      ; $3b ;
>8c94		8a 8f					.word	BinaryCompareLess                ; $3c <
>8c96		80 8f					.word	BinaryCompareEqual               ; $3d =
>8c98		94 8f					.word	BinaryCompareGreater             ; $3e >
>8c9a		52 93					.word	ByteIndirect                     ; $3f ?
.8c9c						VectorSet0:
>8c9c		6f 8b					.word	EOLCommand                       ; $80 !0:EOF
>8c9e		09 8c					.word	Shift1Command                    ; $81 !1:SH1
>8ca0		11 8c					.word	Shift2Command                    ; $82 !2:SH2
>8ca2		d4 99					.word	AbsUnary                         ; $83 ABS(
>8ca4		e2 99					.word	AllocUnary                       ; $84 ALLOC(
>8ca6		52 9a					.word	AscUnary                         ; $85 ASC(
>8ca8		12 9c					.word	ChrUnary                         ; $86 CHR$(
>8caa		62 9a					.word	DeekUnary                        ; $87 DEEK(
>8cac		0a a4					.word	UnaryEvent                       ; $88 EVENT(
>8cae		7c 8f					.word	UnaryFalse                       ; $89 FALSE
>8cb0		74 9a					.word	FracUnary                        ; $8a FRAC(
>8cb2		a6 a3					.word	UnaryHit                         ; $8b HIT(
>8cb4		89 9a					.word	IntUnary                         ; $8c INT(
>8cb6		d1 9b					.word	IsValUnary                       ; $8d ISVAL(
>8cb8		8e a4					.word	UnaryJoyB                        ; $8e JOYB(
>8cba		67 a4					.word	UnaryJoyX                        ; $8f JOYX(
>8cbc		6a a4					.word	UnaryJoyY                        ; $90 JOYY(
>8cbe		e5 9c					.word	Unary_Left                       ; $91 LEFT$(
>8cc0		9a 9a					.word	LenUnary                         ; $92 LEN(
>8cc2		b8 9a					.word	Unary_Max                        ; $93 MAX(
>8cc4		07 9d					.word	Unary_Mid                        ; $94 MID$(
>8cc6		b4 9a					.word	Unary_Min                        ; $95 MIN(
>8cc8		03 9b					.word	Unary_Not                        ; $96 NOT(
>8cca		5f 9a					.word	PeekUnary                        ; $97 PEEK(
>8ccc		2b a6					.word	UnaryPlaying                     ; $98 PLAYING(
>8cce		16 9b					.word	Unary_Random                     ; $99 RANDOM(
>8cd0		f2 9c					.word	Unary_Right                      ; $9a RIGHT$(
>8cd2		33 9b					.word	Unary_Rnd                        ; $9b RND(
>8cd4		a9 9b					.word	SgnUnary                         ; $9c SGN(
>8cd6		24 9c					.word	SpcUnary                         ; $9d SPC(
>8cd8		3f 9c					.word	Unary_Str                        ; $9e STR$(
>8cda		b4 a4					.word	UnaryTimer                       ; $9f TIMER(
>8cdc		71 8f					.word	UnaryTrue                        ; $a0 TRUE
>8cde		c7 9b					.word	ValUnary                         ; $a1 VAL(
>8ce0		cb 85					.word	ForCommand                       ; $a2 FOR
>8ce2		0e 87					.word	IfCommand                        ; $a3 IF
>8ce4		19 8c					.word	Unused1                          ; $a4 PROC
>8ce6		1b 8b					.word	Command_REPEAT                   ; $a5 REPEAT
>8ce8		bd 8e					.word	Command_WHILE                    ; $a6 WHILE
>8cea		37 87					.word	EndIf                            ; $a7 ENDIF
>8cec		a3 8a					.word	Command_ENDPROC                  ; $a8 ENDPROC
>8cee		7d 86					.word	NextCommand                      ; $a9 NEXT
>8cf0		19 8c					.word	Unused4                          ; $aa THEN
>8cf2		24 8b					.word	Command_UNTIL                    ; $ab UNTIL
>8cf4		de 8e					.word	Command_WEND                     ; $ac WEND
>8cf6		aa 9f					.word	SyntaxError                      ; $ad BY
>8cf8		45 84					.word	CallCommand                      ; $ae CALL
>8cfa		5a a1					.word	CircleCommand                    ; $af CIRCLE
>8cfc		7a 84					.word	ClearCommand                     ; $b0 CLEAR
>8cfe		d2 84					.word	ClearScreen                      ; $b1 CLS
>8d00		aa 9f					.word	SyntaxError                      ; $b2 COLOR
>8d02		aa 9f					.word	SyntaxError                      ; $b3 COLOUR
>8d04		da 84					.word	Command_Data                     ; $b4 DATA
>8d06		e2 84					.word	DimCommand                       ; $b5 DIM
>8d08		a2 85					.word	DokeCommand                      ; $b6 DOKE
>8d0a		19 8c					.word	Unused3                          ; $b7 DOWNTO
>8d0c		30 87					.word	ElseCode                         ; $b8 ELSE
>8d0e		aa 9f					.word	SyntaxError                      ; $b9 FROM
>8d10		79 a3					.word	GfxCommand                       ; $ba GFX
>8d12		d6 86					.word	Command_GOSUB                    ; $bb GOSUB
>8d14		f4 86					.word	GotoCommand                      ; $bc GOTO
>8d16		aa 9f					.word	SyntaxError                      ; $bd HERE
>8d18		83 a1					.word	ImageCommand                     ; $be IMAGE
>8d1a		38 87					.word	Command_Input                    ; $bf INPUT
>8d1c		23 88					.word	LetCommand                       ; $c0 LET
>8d1e		d5 a1					.word	LineCommand                      ; $c1 LINE
>8d20		74 89					.word	Command_LOCAL                    ; $c2 LOCAL
>8d22		aa 9f					.word	SyntaxError                      ; $c3 OFF
>8d24		aa 9f					.word	SyntaxError                      ; $c4 ON
>8d26		aa 9f					.word	SyntaxError                      ; $c5 OUTLINE
>8d28		ca a3					.word	PaletteCommand                   ; $c6 PALETTE
>8d2a		ce a1					.word	PlotCommand                      ; $c7 PLOT
>8d2c		9f 85					.word	PokeCommand                      ; $c8 POKE
>8d2e		3f 87					.word	Command_Print                    ; $c9 PRINT
>8d30		b1 8a					.word	Command_Read                     ; $ca READ
>8d32		56 a1					.word	RectangleCommand                 ; $cb RECT
>8d34		0e 8b					.word	RemCommand                       ; $cc REM
>8d36		e6 86					.word	Command_RETURN                   ; $cd RETURN
>8d38		aa 9f					.word	SyntaxError                      ; $ce SOLID
>8d3a		47 a6					.word	SoundCommand                     ; $cf SOUND
>8d3c		65 a1					.word	SpriteCommand                    ; $d0 SPRITE
>8d3e		9f a1					.word	TextCommand                      ; $d1 TEXT
>8d40		19 8c					.word	Unused2                          ; $d2 TO
.8d42						VectorSet1:
>8d42		aa 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d44		aa 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d46		aa 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d48		19 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d4a		35 84					.word	AssertCommand                    ; $84 ASSERT
>8d4c		19 a3					.word	BitmapCtrl                       ; $85 BITMAP
>8d4e		c8 85					.word	EndCommand                       ; $86 END
>8d50		ff a5					.word	Explode                          ; $87 EXPLODE
>8d52		ab a4					.word	GoCommand                        ; $88 GO
>8d54		73 88					.word	Command_List                     ; $89 LIST
>8d56		a2 a4					.word	LoadCommand                      ; $8a LOAD
>8d58		35 8a					.word	NewCommand                       ; $8b NEW
>8d5a		db a5					.word	PingCommand                      ; $8c PING
>8d5c		3d 8b					.word	Command_Restore                  ; $8d RESTORE
>8d5e		7c 8b					.word	CommandRUN                       ; $8e RUN
>8d60		f3 a5					.word	ShootCommand                     ; $8f SHOOT
>8d62		5e a3					.word	SpritesCtrl                      ; $90 SPRITES
>8d64		f0 8d					.word	StopCommand                      ; $91 STOP
>8d66		e7 a5					.word	ZapCommand                       ; $92 ZAP
.8d68						VectorSet2:
>8d68		aa 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d6a		aa 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d6c		aa 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d6e		69 9e					.word	Assemble_adc                     ; $83 ADC
>8d70		61 9e					.word	Assemble_and                     ; $84 AND
>8d72		7d 9e					.word	Assemble_asl                     ; $85 ASL
>8d74		e7 9e					.word	Assemble_bcc                     ; $86 BCC
>8d76		eb 9e					.word	Assemble_bcs                     ; $87 BCS
>8d78		f3 9e					.word	Assemble_beq                     ; $88 BEQ
>8d7a		aa 9e					.word	Assemble_bit                     ; $89 BIT
>8d7c		db 9e					.word	Assemble_bmi                     ; $8a BMI
>8d7e		ef 9e					.word	Assemble_bne                     ; $8b BNE
>8d80		d7 9e					.word	Assemble_bpl                     ; $8c BPL
>8d82		f7 9e					.word	Assemble_bra                     ; $8d BRA
>8d84		fb 9e					.word	Assemble_brk                     ; $8e BRK
>8d86		df 9e					.word	Assemble_bvc                     ; $8f BVC
>8d88		e3 9e					.word	Assemble_bvs                     ; $90 BVS
>8d8a		03 9f					.word	Assemble_clc                     ; $91 CLC
>8d8c		57 9f					.word	Assemble_cld                     ; $92 CLD
>8d8e		17 9f					.word	Assemble_cli                     ; $93 CLI
>8d90		47 9f					.word	Assemble_clv                     ; $94 CLV
>8d92		75 9e					.word	Assemble_cmp                     ; $95 CMP
>8d94		be 9e					.word	Assemble_cpx                     ; $96 CPX
>8d96		b9 9e					.word	Assemble_cpy                     ; $97 CPY
>8d98		9b 9e					.word	Assemble_dec                     ; $98 DEC
>8d9a		53 9f					.word	Assemble_dex                     ; $99 DEX
>8d9c		2f 9f					.word	Assemble_dey                     ; $9a DEY
>8d9e		65 9e					.word	Assemble_eor                     ; $9b EOR
>8da0		a0 9e					.word	Assemble_inc                     ; $9c INC
>8da2		63 9f					.word	Assemble_inx                     ; $9d INX
>8da4		4f 9f					.word	Assemble_iny                     ; $9e INY
>8da6		d2 9e					.word	Assemble_jmp                     ; $9f JMP
>8da8		cd 9e					.word	Assemble_jsr                     ; $a0 JSR
>8daa		71 9e					.word	Assemble_lda                     ; $a1 LDA
>8dac		96 9e					.word	Assemble_ldx                     ; $a2 LDX
>8dae		b4 9e					.word	Assemble_ldy                     ; $a3 LDY
>8db0		87 9e					.word	Assemble_lsr                     ; $a4 LSR
>8db2		67 9f					.word	Assemble_nop                     ; $a5 NOP
>8db4		5d 9e					.word	Assemble_ora                     ; $a6 ORA
>8db6		13 9f					.word	Assemble_pha                     ; $a7 PHA
>8db8		ff 9e					.word	Assemble_php                     ; $a8 PHP
>8dba		5b 9f					.word	Assemble_phx                     ; $a9 PHX
>8dbc		1b 9f					.word	Assemble_phy                     ; $aa PHY
>8dbe		23 9f					.word	Assemble_pla                     ; $ab PLA
>8dc0		07 9f					.word	Assemble_plp                     ; $ac PLP
>8dc2		6f 9f					.word	Assemble_plx                     ; $ad PLX
>8dc4		2b 9f					.word	Assemble_ply                     ; $ae PLY
>8dc6		82 9e					.word	Assemble_rol                     ; $af ROL
>8dc8		8c 9e					.word	Assemble_ror                     ; $b0 ROR
>8dca		0f 9f					.word	Assemble_rti                     ; $b1 RTI
>8dcc		1f 9f					.word	Assemble_rts                     ; $b2 RTS
>8dce		79 9e					.word	Assemble_sbc                     ; $b3 SBC
>8dd0		0b 9f					.word	Assemble_sec                     ; $b4 SEC
>8dd2		6b 9f					.word	Assemble_sed                     ; $b5 SED
>8dd4		27 9f					.word	Assemble_sei                     ; $b6 SEI
>8dd6		6d 9e					.word	Assemble_sta                     ; $b7 STA
>8dd8		5f 9f					.word	Assemble_stp                     ; $b8 STP
>8dda		91 9e					.word	Assemble_stx                     ; $b9 STX
>8ddc		af 9e					.word	Assemble_sty                     ; $ba STY
>8dde		a5 9e					.word	Assemble_stz                     ; $bb STZ
>8de0		43 9f					.word	Assemble_tax                     ; $bc TAX
>8de2		3f 9f					.word	Assemble_tay                     ; $bd TAY
>8de4		c8 9e					.word	Assemble_trb                     ; $be TRB
>8de6		c3 9e					.word	Assemble_tsb                     ; $bf TSB
>8de8		4b 9f					.word	Assemble_tsx                     ; $c0 TSX
>8dea		33 9f					.word	Assemble_txa                     ; $c1 TXA
>8dec		3b 9f					.word	Assemble_txs                     ; $c2 TXS
>8dee		37 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8df0						StopCommand:
.8df0		a9 08		lda #$08		lda	#8
.8df2		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8df5						ProcedureScan:
.8df5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8df7		85 30		sta $30				sta 	codePtr
.8df9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dfb		85 31		sta $31				sta 	codePtr+1
.8dfd						_PSLoop:
.8dfd		b2 30		lda ($30)			lda 	(codePtr)
.8dff		f0 42		beq $8e43			beq 	_PSExit
.8e01		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e03		b1 30		lda ($30),y			lda 	(codePtr),y
.8e05		c9 a4		cmp #$a4			cmp 	#KWD_PROC
.8e07		d0 2d		bne $8e36			bne 	_PSNext
.8e09		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e0c		29 c0		and #$c0			and 	#$C0
.8e0e		c9 40		cmp #$40			cmp 	#$40
.8e10		d0 32		bne $8e44			bne 	_PSSyntax
.8e12		b1 30		lda ($30),y			lda 	(codePtr),y
.8e14		18		clc				clc
.8e15		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e17		85 37		sta $37				sta 	zTemp0+1
.8e19		c8		iny				iny 								; LSB
.8e1a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1c		85 36		sta $36				sta 	zTemp0
.8e1e		c8		iny				iny 								; character after variable call.
.8e1f		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e20		a0 07		ldy #$07			ldy 	#7
.8e22		91 36		sta ($36),y			sta 	(zTemp0),y
.8e24		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e26		a0 02		ldy #$02			ldy 	#2
.8e28		91 36		sta ($36),y			sta 	(zTemp0),y
.8e2a		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e2c						_PSCopy:
.8e2c		b5 30		lda $30,x			lda 	safePtr,x
.8e2e		c8		iny				iny
.8e2f		91 36		sta ($36),y			sta 	(zTemp0),y
.8e31		e8		inx				inx
.8e32		e0 04		cpx #$04			cpx 	#4
.8e34		d0 f6		bne $8e2c			bne 	_PSCopy
.8e36						_PSNext:
.8e36		18		clc				clc
.8e37		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e39		65 30		adc $30				adc 	codePtr
.8e3b		85 30		sta $30				sta 	codePtr
.8e3d		90 02		bcc $8e41			bcc 	_CREExit
.8e3f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e41						_CREExit:
.8e41		80 ba		bra $8dfd			bra 	_PSLoop
.8e43						_PSExit:
.8e43		60		rts				rts
.8e44						_PSSyntax:
.8e44		4c aa 9f	jmp $9faa			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8e47						ScanForward:
.8e47		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8e49		86 37		stx $37				stx 	zTemp0+1
.8e4b		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8e4d						_ScanLoop:
.8e4d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4f		c8		iny				iny
.8e50		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8e52		d0 0e		bne $8e62			bne 	_ScanGoNext
.8e54		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8e56		f0 04		beq $8e5c			beq 	_ScanMatch
.8e58		c5 37		cmp $37				cmp 	zTemp0+1
.8e5a		d0 06		bne $8e62			bne 	_ScanGoNext
.8e5c						_ScanMatch:
.8e5c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8e5e		d0 01		bne $8e61			bne 	_ScanNotEndEOL
.8e60		88		dey				dey
.8e61						_ScanNotEndEOL:
.8e61		60		rts				rts
.8e62						_ScanGoNext:
.8e62		20 67 8e	jsr $8e67			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8e65		80 e6		bra $8e4d			bra 	_ScanLoop
.8e67						ScanForwardOne:
.8e67		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8e69		90 3e		bcc $8ea9			bcc 	_SFWExit
.8e6b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8e6d		90 18		bcc $8e87			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8e6f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8e71		b0 2f		bcs $8ea2			bcs 	_ScanSkipData
.8e73		c9 a2		cmp #$a2			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8e75		90 32		bcc $8ea9			bcc 	_SFWExit 					; if not, ordinary keywords.
.8e77		c9 ad		cmp #$ad			cmp 	#KWC_LAST_STRUCTURE+1
.8e79		b0 2e		bcs $8ea9			bcs 	_SFWExit
.8e7b		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8e7d		c9 a7		cmp #$a7			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8e7f		b0 28		bcs $8ea9			bcs 	_SFWExit
.8e81		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8e83		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8e85		80 22		bra $8ea9			bra 	_SFWExit
.8e87						_ScanSkipOne:
.8e87		c8		iny				iny 								; consume the extra one.
.8e88		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8e8a		d0 1d		bne $8ea9			bne 	_SFWExit
.8e8c		18		clc				clc
.8e8d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e8f		65 30		adc $30				adc 	codePtr
.8e91		85 30		sta $30				sta 	codePtr
.8e93		90 02		bcc $8e97			bcc 	_CREExit
.8e95		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e97						_CREExit:
.8e97		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8e99		b2 30		lda ($30)			lda 	(codePtr)
.8e9b		d0 0c		bne $8ea9			bne 	_SFWExit 					; if not zero, more to scan
.8e9d		a9 13		lda #$13		lda	#19
.8e9f		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.8ea2						_ScanSkipData:
.8ea2		88		dey				dey 								; point at data token
.8ea3		c8		iny				iny 								; point to offset
.8ea4		98		tya				tya 								; A = offset position
.8ea5		38		sec				sec 								; add size +1 hence SEC
.8ea6		71 30		adc ($30),y			adc 	(codePtr),y
.8ea8		a8		tay				tay 								; make current position.
.8ea9						_SFWExit:
.8ea9		60		rts				rts
.8eaa						ScanGetCurrentLineStep:
.8eaa		64 38		stz $38				stz 	zTemp1
.8eac		a0 03		ldy #$03			ldy 	#3
.8eae						_SGCLSLoop:
.8eae		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb0		c8		iny				iny
.8eb1		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8eb3		f0 05		beq $8eba			beq 	_SGCLSExit
.8eb5		20 67 8e	jsr $8e67			jsr 	ScanForwardOne
.8eb8		80 f4		bra $8eae			bra 	_SGCLSLoop
.8eba						_SGCLSExit:
.8eba		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8ebc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ebd						Command_WHILE:
.8ebd		5a		phy				phy 								; save position of the test
.8ebe		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8ec0		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber
.8ec3		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; check if zero
.8ec6		f0 0e		beq $8ed6			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8ec8		98		tya				tya 								; position *after* test.
.8ec9		7a		ply				ply 								; restore position before test, at WHILE
.8eca		88		dey				dey 								; so we execute the WHILE command again.
.8ecb		48		pha				pha 								; push after test on the stack
.8ecc		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ece		20 ce a6	jsr $a6ce			jsr 	StackOpen
.8ed1		20 13 a7	jsr $a713			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8ed4		7a		ply				ply 								; restore the position *after* the test
.8ed5		60		rts				rts
.8ed6						_WHExitLoop:
.8ed6		68		pla				pla 								; throw post loop position
.8ed7		a9 ac		lda #$ac			lda 	#KWD_WEND 					; scan forward past WEND
.8ed9		aa		tax				tax
.8eda		20 47 8e	jsr $8e47			jsr 	ScanForward
.8edd		60		rts				rts
.8ede						Command_WEND:
.8ede		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8ee0		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8ee2		20 fb a6	jsr $a6fb			jsr 	StackCheckFrame
.8ee5		20 24 a7	jsr $a724			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8ee8		20 ed a6	jsr $a6ed			jsr 	StackClose		 			; erase the frame
.8eeb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8eec						CheckRightBracket:
.8eec		b1 30		lda ($30),y			lda 	(codePtr),y
.8eee		c8		iny				iny
.8eef		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8ef1		d0 0f		bne $8f02			bne 	CNAFail
.8ef3		60		rts				rts
.8ef4						CheckComma:
.8ef4		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef6		c8		iny				iny
.8ef7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8ef9		d0 07		bne $8f02			bne 	CNAFail
.8efb		60		rts				rts
.8efc						CheckNextA:
.8efc		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8efe		d0 02		bne $8f02			bne 	CNAFail
.8f00		c8		iny				iny 								; skip character
.8f01		60		rts				rts 								; and exit
.8f02						CNAFail:
.8f02		4c aa 9f	jmp $9faa			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f05						ErrorHandler:
.8f05		a8		tay				tay 								; find the error text
.8f06		f0 49		beq $8f51			beq 	_EHEnd
.8f08		a2 00		ldx #$00			ldx 	#0
.8f0a		a9 c3		lda #$c3			lda 	#((ErrorText) & $FF)
.8f0c		85 36		sta $36				sta 	0+zTemp0
.8f0e		a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8f10		85 37		sta $37				sta 	1+zTemp0
.8f12						_EHFind:
.8f12		88		dey				dey 								; keep looking through text
.8f13		f0 0e		beq $8f23			beq 	_EHFound
.8f15						_EHFindZero:
.8f15		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f17		e6 36		inc $36				inc 	zTemp0
.8f19		d0 02		bne $8f1d			bne 	_EHFNoCarry
.8f1b		e6 37		inc $37				inc 	zTemp0+1
.8f1d						_EHFNoCarry:
.8f1d		c9 00		cmp #$00			cmp 	#0
.8f1f		d0 f4		bne $8f15			bne 	_EHFindZero
.8f21		80 ef		bra $8f12			bra 	_EHFind
.8f23						_EHFound:
.8f23		a5 36		lda $36				lda 	zTemp0 						; print message
.8f25		a6 37		ldx $37				ldx 	zTemp0+1
.8f27		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA
.8f2a		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f2c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f2e		d0 05		bne $8f35			bne 	_EHAtMsg
.8f30		c8		iny				iny
.8f31		b1 30		lda ($30),y			lda 	(codePtr),y
.8f33		f0 17		beq $8f4c			beq 	_EHCREnd
.8f35						_EHAtMsg:
.8f35		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8f37		a9 54		lda #$54			lda 	#_AtMsg & $FF
.8f39		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA
.8f3c		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8f3e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f40		48		pha				pha
.8f41		c8		iny				iny
.8f42		b1 30		lda ($30),y			lda 	(codePtr),y
.8f44		aa		tax				tax
.8f45		68		pla				pla
.8f46		20 74 93	jsr $9374			jsr 	ConvertInt16 				; convert XA to string
.8f49		20 5e 8f	jsr $8f5e			jsr 	PrintStringXA 				; and print it.
.8f4c						_EHCREnd:
.8f4c		a9 0d		lda #$0d			lda 	#13 						; new line
.8f4e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f51						_EHEnd:
.8f51		4c e4 83	jmp $83e4			jmp 	WarmStart
>8f54		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8f5c		20 00
.8f5e						PrintStringXA:
.8f5e		5a		phy				phy
.8f5f		86 37		stx $37				stx 	zTemp0+1
.8f61		85 36		sta $36				sta 	zTemp0
.8f63		a0 00		ldy #$00			ldy 	#0
.8f65						_PSXALoop:
.8f65		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f67		f0 06		beq $8f6f			beq 	_PSXAExit
.8f69		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f6c		c8		iny				iny
.8f6d		80 f6		bra $8f65			bra 	_PSXALoop
.8f6f						_PSXAExit:
.8f6f		7a		ply				ply
.8f70		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8f71						UnaryTrue:
.8f71		fa		plx				plx
.8f72						ReturnTrue:
.8f72		a9 01		lda #$01			lda 	#1  						; set to 1
.8f74		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.8f77		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8f79		95 50		sta $50,x			sta 	NSStatus,x
.8f7b		60		rts				rts
.8f7c						UnaryFalse:
.8f7c		fa		plx				plx
.8f7d						ReturnFalse:
.8f7d		4c 2c 9e	jmp $9e2c			jmp 	NSMSetZero 					; set it all to zero
.8f80						BinaryCompareEqual:
.8f80		fa		plx				plx
.8f81		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8f84		c9 00		cmp #$00			cmp 	#0
.8f86		f0 ea		beq $8f72			beq 	ReturnTrue
.8f88		80 f3		bra $8f7d			bra 	ReturnFalse
.8f8a						BinaryCompareLess:
.8f8a		fa		plx				plx
.8f8b		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8f8e		c9 ff		cmp #$ff			cmp 	#$FF
.8f90		f0 e0		beq $8f72			beq 	ReturnTrue
.8f92		80 e9		bra $8f7d			bra 	ReturnFalse
.8f94						BinaryCompareGreater:
.8f94		fa		plx				plx
.8f95		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8f98		c9 01		cmp #$01			cmp 	#1
.8f9a		f0 d6		beq $8f72			beq 	ReturnTrue
.8f9c		80 df		bra $8f7d			bra 	ReturnFalse
.8f9e						BinaryCompareNotEqual:
.8f9e		fa		plx				plx
.8f9f		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8fa2		c9 00		cmp #$00			cmp 	#0
.8fa4		d0 cc		bne $8f72			bne 	ReturnTrue
.8fa6		80 d5		bra $8f7d			bra 	ReturnFalse
.8fa8						BinaryCompareLessEqual:
.8fa8		fa		plx				plx
.8fa9		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8fac		c9 01		cmp #$01			cmp 	#1
.8fae		d0 c2		bne $8f72			bne 	ReturnTrue
.8fb0		80 cb		bra $8f7d			bra 	ReturnFalse
.8fb2						BinaryCompareGreaterEqual:
.8fb2		fa		plx				plx
.8fb3		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode
.8fb6		c9 ff		cmp #$ff			cmp 	#$FF
.8fb8		d0 b8		bne $8f72			bne 	ReturnTrue
.8fba		80 c1		bra $8f7d			bra 	ReturnFalse
.8fbc						CompareBaseCode:
.8fbc		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; make both values if references.
.8fbf		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.8fc1		15 51		ora $51,x			ora 	NSStatus+1,x
.8fc3		29 10		and #$10			and 	#NSTString
.8fc5		d0 37		bne $8ffe			bne 	_CBCString 					; if so do string code, which will check if both.
.8fc7		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.8fc9		15 79		ora $79,x			ora 	NSExponent+1,x
.8fcb		d0 34		bne $9001			bne 	_CBCFloat
.8fcd		b5 50		lda $50,x			lda 	NSStatus,x
.8fcf		15 51		ora $51,x			ora 	NSStatus+1,x
.8fd1		29 08		and #$08			and 	#NSTFloat
.8fd3		d0 2c		bne $9001			bne 	_CBCFloat
.8fd5		20 04 90	jsr $9004			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.8fd8		e8		inx				inx
.8fd9		20 04 90	jsr $9004			jsr 	CompareFixMinusZero
.8fdc		ca		dex				dex
.8fdd		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.8fdf		55 51		eor $51,x			eor 	NSStatus+1,x
.8fe1		10 0a		bpl $8fed			bpl 	_CDCSameSign
.8fe3		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.8fe5		30 14		bmi $8ffb			bmi 	_CBCLess 					; return $FF
.8fe7						_CBCGreater:
.8fe7		a9 01		lda #$01			lda 	#1
.8fe9		60		rts				rts
.8fea						_CBCEqual:
.8fea		a9 00		lda #$00			lda 	#0
.8fec		60		rts				rts
.8fed						_CDCSameSign:
.8fed		20 19 92	jsr $9219			jsr 	SubTopTwoStack 				; unsigned subtract
.8ff0		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; or the mantissa together
.8ff3		f0 f5		beq $8fea			beq 	_CBCEqual 					; -0 == 0
.8ff5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8ff7		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8ff9		10 ec		bpl $8fe7			bpl 	_CBCGreater
.8ffb						_CBCLess:
.8ffb		a9 ff		lda #$ff			lda 	#$FF
.8ffd		60		rts				rts
.8ffe						_CBCString:
.8ffe		4c 8a 91	jmp $918a			jmp 	CompareStrings
.9001						_CBCFloat:
.9001		4c d4 94	jmp $94d4			jmp 	CompareFloat
.9004						CompareFixMinusZero:
.9004		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero
.9007		d0 02		bne $900b			bne 	_CFXMZNotZero
.9009		74 50		stz $50,x			stz 	NSStatus,x
.900b						_CFXMZNotZero:
.900b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.900c						StringConcat:
.900c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.900e		35 51		and $51,x			and 	NSStatus+1,x
.9010		29 18		and #$18			and 	#NSBTypeMask
.9012		c9 10		cmp #$10			cmp 	#NSTString
.9014		d0 50		bne $9066			bne		_SCType
.9016		64 38		stz $38				stz 	zTemp1 						; counting total length
.9018		e8		inx				inx
.9019		20 37 90	jsr $9037			jsr 	_SCSetupZ0 					; setup for second
.901c		20 40 90	jsr $9040			jsr 	_SCLengthZ0 				; length for second
.901f		ca		dex				dex
.9020		20 37 90	jsr $9037			jsr 	_SCSetupZ0 					; setup for first
.9023		20 40 90	jsr $9040			jsr 	_SCLengthZ0 				; length for first
.9026		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9028		20 be a7	jsr $a7be			jsr 	StringTempAllocate
.902b		20 57 90	jsr $9057			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.902e		e8		inx				inx
.902f		20 37 90	jsr $9037			jsr 	_SCSetupZ0 					; copy second out
.9032		20 57 90	jsr $9057			jsr 	_SCCopy
.9035		ca		dex				dex
.9036		60		rts				rts
.9037						_SCSetupZ0:
.9037		b5 58		lda $58,x			lda 	NSMantissa0,x
.9039		85 36		sta $36				sta 	zTemp0
.903b		b5 60		lda $60,x			lda 	NSMantissa1,x
.903d		85 37		sta $37				sta 	zTemp0+1
.903f		60		rts				rts
.9040						_SCLengthZ0:
.9040		5a		phy				phy
.9041		a0 00		ldy #$00			ldy 	#0
.9043						_SCLenLoop:
.9043		b1 36		lda ($36),y			lda 	(zTemp0),y
.9045		f0 0e		beq $9055			beq 	_SCLExit
.9047		c8		iny				iny
.9048		e6 38		inc $38				inc 	zTemp1
.904a		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.904c		c9 fd		cmp #$fd			cmp 	#253
.904e		d0 f3		bne $9043			bne		_SCLenLoop
.9050		a9 09		lda #$09		lda	#9
.9052		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9055						_SCLExit:
.9055		7a		ply				ply
.9056		60		rts				rts
.9057						_SCCopy:
.9057		5a		phy				phy
.9058		a0 00		ldy #$00			ldy 	#0
.905a						_SCCopyLoop:
.905a		b1 36		lda ($36),y			lda 	(zTemp0),y
.905c		f0 06		beq $9064			beq 	_SCCExit
.905e		20 f7 a7	jsr $a7f7			jsr 	StringTempWrite
.9061		c8		iny				iny
.9062		80 f6		bra $905a			bra 	_SCCopyLoop
.9064						_SCCExit:
.9064		7a		ply				ply
.9065		60		rts				rts
.9066						_SCType:
.9066		4c b4 9f	jmp $9fb4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9069						IntegerDivide:
.9069		fa		plx				plx
.906a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.906c		15 51		ora $51,x			ora 	NSStatus+1,x
.906e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.906f		0a		asl a				asl 	a
.9070		10 05		bpl $9077			bpl 	_NotRef
.9072		48		pha				pha
.9073		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9076		68		pla				pla
.9077						_NotRef:
.9077		0a		asl a				asl 	a
.9078		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.907a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.907c		15 79		ora $79,x			ora 	NSExponent+1,x
.907e		f0 03		beq $9083			beq 	_IntegerCode 				; if clear, then we have two integers
.9080		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.9083						_IntegerCode:
.9083		20 9d 90	jsr $909d			jsr 	CheckDivideZero 			; do div zero check
.9086		20 cf 90	jsr $90cf			jsr 	Int32Divide 				; do the division
.9089		20 80 91	jsr $9180			jsr 	CalculateSign 				; calculate result sign
.908c						NSMCopyPlusTwoToZero:
.908c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.908e		95 58		sta $58,x			sta 	NSMantissa0,x
.9090		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9092		95 60		sta $60,x			sta 	NSMantissa1,x
.9094		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9096		95 68		sta $68,x			sta 	NSMantissa2,x
.9098		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.909a		95 70		sta $70,x			sta 	NSMantissa3,x
.909c		60		rts				rts
.909d						CheckDivideZero:
.909d		e8		inx				inx
.909e		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero
.90a1		f0 02		beq $90a5			beq 	_CDVError
.90a3		ca		dex				dex
.90a4		60		rts				rts
.90a5						_CDVError:
.90a5		a9 03		lda #$03		lda	#3
.90a7		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.90aa						IntegerModulus:
.90aa		fa		plx				plx
.90ab		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90ad		15 51		ora $51,x			ora 	NSStatus+1,x
.90af		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90b0		0a		asl a				asl 	a
.90b1		10 05		bpl $90b8			bpl 	_NotRef
.90b3		48		pha				pha
.90b4		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90b7		68		pla				pla
.90b8						_NotRef:
.90b8		0a		asl a				asl 	a
.90b9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90bb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90bd		15 79		ora $79,x			ora 	NSExponent+1,x
.90bf		f0 03		beq $90c4			beq 	_IntegerCode 				; if clear, then we have two integers
.90c1		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.90c4						_IntegerCode:
.90c4						IntegerModulusNoCheck:
.90c4		20 9d 90	jsr $909d			jsr 	CheckDivideZero 			; do div zero check
.90c7		20 cf 90	jsr $90cf			jsr 	Int32Divide 				; do the division
.90ca		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.90cc		56 50		lsr $50,x			lsr 	NSStatus,x
.90ce		60		rts				rts
.90cf						Int32Divide:
.90cf		48		pha				pha 								; save AXY
.90d0		5a		phy				phy
.90d1		20 0f 9e	jsr $9e0f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.90d4		20 28 9e	jsr $9e28			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.90d7		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.90d9						_I32DivideLoop:
.90d9		e8		inx				inx
.90da		e8		inx				inx
.90db		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.90de		ca		dex				dex
.90df		ca		dex				dex
.90e0		20 3c 9e	jsr $9e3c			jsr 	NSMRotateLeft
.90e3		20 0e 91	jsr $910e			jsr 	DivideCheckSubtract 		; check if subtract possible
.90e6		90 02		bcc $90ea			bcc 	_I32DivideNoCarryIn
.90e8		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.90ea						_I32DivideNoCarryIn:
.90ea		88		dey				dey 								; loop round till division completed.
.90eb		d0 ec		bne $90d9			bne 	_I32DivideLoop
.90ed		7a		ply				ply 								; restore AXY and exit
.90ee		68		pla				pla
.90ef		60		rts				rts
.90f0						Int32ShiftDivide:
.90f0		48		pha				pha 								; save AY
.90f1		5a		phy				phy
.90f2		e8		inx				inx 								; clear S[X+2]
.90f3		e8		inx				inx
.90f4		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.90f7		ca		dex				dex
.90f8		ca		dex				dex
.90f9		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.90fb						_I32SDLoop:
.90fb		20 0e 91	jsr $910e			jsr 	DivideCheckSubtract 		; check if subtract possible
.90fe		e8		inx				inx
.90ff		e8		inx				inx
.9100		20 3c 9e	jsr $9e3c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9103		ca		dex				dex
.9104		ca		dex				dex
.9105		20 3c 9e	jsr $9e3c			jsr 	NSMRotateLeft
.9108		88		dey				dey 	 							; do 31 times
.9109		d0 f0		bne $90fb			bne 	_I32SDLoop
.910b		7a		ply				ply 								; restore AY and exit
.910c		68		pla				pla
.910d		60		rts				rts
.910e						DivideCheckSubtract:
.910e		20 19 92	jsr $9219			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9111		b0 04		bcs $9117			bcs 	_DCSExit 					; if carry set, then could do, exit
.9113		20 ff 91	jsr $91ff			jsr 	AddTopTwoStack 				; add it back in
.9116		18		clc				clc 								; and return False
.9117						_DCSExit:
.9117		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9118						MulInteger:
.9118		fa		plx				plx
.9119		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.911b		15 51		ora $51,x			ora 	NSStatus+1,x
.911d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.911e		0a		asl a				asl 	a
.911f		10 05		bpl $9126			bpl 	_NotRef
.9121		48		pha				pha
.9122		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9125		68		pla				pla
.9126						_NotRef:
.9126		0a		asl a				asl 	a 							; put MSB of type into A:7
.9127		30 09		bmi $9132			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9129		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.912b		15 79		ora $79,x			ora 	NSExponent+1,x
.912d		f0 06		beq $9135			beq 	_IntegerCode 				; if clear, then we have two integers
.912f		4c 96 95	jmp $9596			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9132						_StringData:
.9132		4c be 9f	jmp $9fbe			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9135						_IntegerCode:
.9135		20 42 91	jsr $9142			jsr 	MultiplyShort
.9138		c9 00		cmp #$00			cmp 	#0
.913a		f0 05		beq $9141			beq 	_MIExit
.913c		a9 04		lda #$04		lda	#4
.913e		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9141						_MIExit:
.9141		60		rts				rts
.9142						MultiplyShort:
.9142		5a		phy				phy 								; save Y
.9143		20 0f 9e	jsr $9e0f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9146		20 28 9e	jsr $9e28			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9149		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.914b						_I32MLoop:
.914b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.914d		15 62		ora $62,x			ora 	NSMantissa1+2,x
.914f		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9151		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9153		f0 25		beq $917a			beq 	_I32MExit 					; exit if zero
.9155		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9157		29 01		and #$01			and 	#1
.9159		f0 0d		beq $9168			beq 	_I32MNoAdd
.915b		20 ff 91	jsr $91ff			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.915e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9160		10 06		bpl $9168			bpl 	_I32MNoAdd
.9162						_I32ShiftRight:
.9162		20 45 9e	jsr $9e45			jsr 	NSMShiftRight 				; shift S[X] right
.9165		c8		iny				iny 								; increment shift count
.9166		80 09		bra $9171			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9168						_I32MNoAdd:
.9168		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.916a		70 f6		bvs $9162			bvs 	_I32ShiftRight 				; instead.
.916c		e8		inx				inx
.916d		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9170		ca		dex				dex
.9171						_I32MShiftUpper:
.9171		e8		inx				inx 								; shift S[X+2] right
.9172		e8		inx				inx
.9173		20 45 9e	jsr $9e45			jsr 	NSMShiftRight
.9176		ca		dex				dex
.9177		ca		dex				dex
.9178		80 d1		bra $914b			bra 	_I32MLoop 					; try again.
.917a						_I32MExit:
.917a		20 80 91	jsr $9180			jsr 	CalculateSign
.917d		98		tya				tya 								; shift in A
.917e		7a		ply				ply 								; restore Y and exit
.917f		60		rts				rts
.9180						CalculateSign:
.9180		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9182		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9184		55 51		eor $51,x			eor 	NSStatus+1,x
.9186		0a		asl a				asl 	a 							; shift bit 7 into carry
.9187		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9189		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.918a						CompareStrings:
.918a		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.918c		35 51		and $51,x			and 	NSStatus+1,x
.918e		29 10		and #$10			and 	#NSBIsString
.9190		f0 28		beq $91ba			beq 	_CSTypeError
.9192		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9194		85 36		sta $36				sta 	zTemp0
.9196		b5 60		lda $60,x			lda 	NSMantissa1,x
.9198		85 37		sta $37				sta 	zTemp0+1
.919a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.919c		85 38		sta $38				sta 	zTemp1
.919e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.91a0		85 39		sta $39				sta 	zTemp1+1
.91a2		5a		phy				phy 								; save Y so we can access strings
.91a3		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91a5						_CSLoop:
.91a5		c8		iny				iny
.91a6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91a8		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91aa		d0 06		bne $91b2			bne 	_CSDifferent
.91ac		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91ae		d0 f5		bne $91a5			bne 	_CSLoop 					; still comparing
.91b0						_CSExit:
.91b0		7a		ply				ply 								; reached end, return zero in A from EOS
.91b1		60		rts				rts
.91b2						_CSDifferent:
.91b2		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91b4		90 fa		bcc $91b0			bcc		_CSExit
.91b6		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91b8		80 f6		bra $91b0			bra 	_CSExit
.91ba						_CSTypeError:
.91ba		4c b4 9f	jmp $9fb4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91bd						ShiftLeft:
.91bd		38		sec				sec 								; common code, carry determines which way.
.91be		80 01		bra $91c1			bra 	ShiftMain
.91c0						ShiftRight:
.91c0		18		clc				clc
.91c1						ShiftMain:
.91c1		fa		plx				plx 								; restore X
.91c2		08		php				php 								; save direction
.91c3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91c5		15 51		ora $51,x			ora 	NSStatus+1,x
.91c7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91c8		0a		asl a				asl 	a
.91c9		10 05		bpl $91d0			bpl 	_NotRef
.91cb		48		pha				pha
.91cc		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91cf		68		pla				pla
.91d0						_NotRef:
.91d0		0a		asl a				asl 	a
.91d1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91d3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91d5		15 79		ora $79,x			ora 	NSExponent+1,x
.91d7		f0 03		beq $91dc			beq 	_IntegerCode 				; if clear, then we have two integers
.91d9		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.91dc						_IntegerCode:
.91dc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.91de		29 e0		and #$e0			and 	#$E0
.91e0		15 61		ora $61,x			ora 	NSMantissa1+1,x
.91e2		15 69		ora $69,x			ora 	NSMantissa2+1,x
.91e4		15 71		ora $71,x			ora 	NSMantissa3+1,x
.91e6		d0 12		bne $91fa			bne 	_SMExit0 					; if >= 32 it will always return zero.
.91e8						_SMLoop:
.91e8		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.91ea		30 11		bmi $91fd			bmi 	_SMExit 					; exit if done.
.91ec		28		plp				plp 								; restore direction setting
.91ed		08		php				php
.91ee		90 05		bcc $91f5			bcc 	_SMRight
.91f0		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; shift left if CS
.91f3		80 f3		bra $91e8			bra 	_SMLoop
.91f5						_SMRight:
.91f5		20 45 9e	jsr $9e45			jsr 	NSMShiftRight 				; shift right if CC
.91f8		80 ee		bra $91e8			bra 	_SMLoop
.91fa						_SMExit0:
.91fa		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; return zero.
.91fd						_SMExit:
.91fd		28		plp				plp 								; throw direction
.91fe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.91ff						AddTopTwoStack:
.91ff		18		clc				clc
.9200		b5 58		lda $58,x			lda		NSMantissa0,x
.9202		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9204		95 58		sta $58,x			sta 	NSMantissa0,x
.9206		b5 60		lda $60,x			lda		NSMantissa1,x
.9208		75 61		adc $61,x			adc 		NSMantissa1+1,x
.920a		95 60		sta $60,x			sta 	NSMantissa1,x
.920c		b5 68		lda $68,x			lda		NSMantissa2,x
.920e		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9210		95 68		sta $68,x			sta 	NSMantissa2,x
.9212		b5 70		lda $70,x			lda		NSMantissa3,x
.9214		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9216		95 70		sta $70,x			sta 	NSMantissa3,x
.9218		60		rts				rts
.9219						SubTopTwoStack:
.9219		38		sec				sec
.921a		b5 58		lda $58,x			lda		NSMantissa0,x
.921c		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.921e		95 58		sta $58,x			sta 	NSMantissa0,x
.9220		b5 60		lda $60,x			lda		NSMantissa1,x
.9222		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9224		95 60		sta $60,x			sta 	NSMantissa1,x
.9226		b5 68		lda $68,x			lda		NSMantissa2,x
.9228		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.922a		95 68		sta $68,x			sta 	NSMantissa2,x
.922c		b5 70		lda $70,x			lda		NSMantissa3,x
.922e		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9230		95 70		sta $70,x			sta 	NSMantissa3,x
.9232		60		rts				rts
.9233						AddInteger:
.9233		fa		plx				plx
.9234		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9236		15 51		ora $51,x			ora 	NSStatus+1,x
.9238		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9239		0a		asl a				asl 	a
.923a		10 05		bpl $9241			bpl 	_NotRef
.923c		48		pha				pha
.923d		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9240		68		pla				pla
.9241						_NotRef:
.9241		0a		asl a				asl 	a 							; put MSB of type into A:7
.9242		30 09		bmi $924d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9244		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9246		15 79		ora $79,x			ora 	NSExponent+1,x
.9248		f0 06		beq $9250			beq 	_IntegerCode 				; if clear, then we have two integers
.924a		4c 46 94	jmp $9446			jmp 	FloatingPointAdd 							; otherwise at least one float.
.924d						_StringData:
.924d		4c 0c 90	jmp $900c			jmp 	StringConcat							; at least one string - don't know both are strings.
.9250						_IntegerCode:
.9250						AddCode:
.9250		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9252		55 51		eor $51,x			eor 	NSStatus+1,x
.9254		10 a9		bpl $91ff			bpl 	AddTopTwoStack
.9256		20 19 92	jsr $9219			jsr 	SubTopTwoStack 				; do a physical subtraction
.9259		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.925b		10 07		bpl $9264			bpl 	_AddExit
.925d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.925f		95 50		sta $50,x			sta 	NSStatus,x
.9261		20 f5 9d	jsr $9df5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9264						_AddExit:
.9264		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; check for -0
.9267		d0 02		bne $926b			bne 	_AddNonZero
.9269		74 50		stz $50,x			stz 	NSStatus,x
.926b						_AddNonZero:
.926b		60		rts				rts
.926c						SubInteger:
.926c		fa		plx				plx
.926d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.926f		15 51		ora $51,x			ora 	NSStatus+1,x
.9271		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9272		0a		asl a				asl 	a
.9273		10 05		bpl $927a			bpl 	_NotRef
.9275		48		pha				pha
.9276		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9279		68		pla				pla
.927a						_NotRef:
.927a		0a		asl a				asl 	a 							; put MSB of type into A:7
.927b		30 09		bmi $9286			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.927d		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.927f		15 79		ora $79,x			ora 	NSExponent+1,x
.9281		f0 06		beq $9289			beq 	_IntegerCode 				; if clear, then we have two integers
.9283		4c 4b 94	jmp $944b			jmp 	FloatingPointSub 							; otherwise at least one float.
.9286						_StringData:
.9286		4c be 9f	jmp $9fbe			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9289						_IntegerCode:
.9289		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.928b		49 80		eor #$80			eor 	#$80
.928d		95 51		sta $51,x			sta 	NSStatus+1,x
.928f		80 bf		bra $9250			bra 	AddCode 					; and do the same code as add.
.9291						AndInteger:
.9291		fa		plx				plx
.9292		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9294		15 51		ora $51,x			ora 	NSStatus+1,x
.9296		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9297		0a		asl a				asl 	a
.9298		10 05		bpl $929f			bpl 	_NotRef
.929a		48		pha				pha
.929b		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.929e		68		pla				pla
.929f						_NotRef:
.929f		0a		asl a				asl 	a
.92a0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92a2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92a4		15 79		ora $79,x			ora 	NSExponent+1,x
.92a6		f0 03		beq $92ab			beq 	_IntegerCode 				; if clear, then we have two integers
.92a8		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.92ab						_IntegerCode:
.92ab		b5 58		lda $58,x			lda		NSMantissa0,x
.92ad		35 59		and $59,x			and 		NSMantissa0+1,x
.92af		95 58		sta $58,x			sta 	NSMantissa0,x
.92b1		b5 60		lda $60,x			lda		NSMantissa1,x
.92b3		35 61		and $61,x			and 		NSMantissa1+1,x
.92b5		95 60		sta $60,x			sta 	NSMantissa1,x
.92b7		b5 68		lda $68,x			lda		NSMantissa2,x
.92b9		35 69		and $69,x			and 		NSMantissa2+1,x
.92bb		95 68		sta $68,x			sta 	NSMantissa2,x
.92bd		b5 70		lda $70,x			lda		NSMantissa3,x
.92bf		35 71		and $71,x			and 		NSMantissa3+1,x
.92c1		95 70		sta $70,x			sta 	NSMantissa3,x
.92c3		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.92c5		60		rts				rts
.92c6						OraInteger:
.92c6		fa		plx				plx
.92c7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92c9		15 51		ora $51,x			ora 	NSStatus+1,x
.92cb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92cc		0a		asl a				asl 	a
.92cd		10 05		bpl $92d4			bpl 	_NotRef
.92cf		48		pha				pha
.92d0		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92d3		68		pla				pla
.92d4						_NotRef:
.92d4		0a		asl a				asl 	a
.92d5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92d7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92d9		15 79		ora $79,x			ora 	NSExponent+1,x
.92db		f0 03		beq $92e0			beq 	_IntegerCode 				; if clear, then we have two integers
.92dd		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.92e0						_IntegerCode:
.92e0		b5 58		lda $58,x			lda		NSMantissa0,x
.92e2		15 59		ora $59,x			ora 		NSMantissa0+1,x
.92e4		95 58		sta $58,x			sta 	NSMantissa0,x
.92e6		b5 60		lda $60,x			lda		NSMantissa1,x
.92e8		15 61		ora $61,x			ora 		NSMantissa1+1,x
.92ea		95 60		sta $60,x			sta 	NSMantissa1,x
.92ec		b5 68		lda $68,x			lda		NSMantissa2,x
.92ee		15 69		ora $69,x			ora 		NSMantissa2+1,x
.92f0		95 68		sta $68,x			sta 	NSMantissa2,x
.92f2		b5 70		lda $70,x			lda		NSMantissa3,x
.92f4		15 71		ora $71,x			ora 		NSMantissa3+1,x
.92f6		95 70		sta $70,x			sta 	NSMantissa3,x
.92f8		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.92fa		60		rts				rts
.92fb						EorInteger:
.92fb		fa		plx				plx
.92fc		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92fe		15 51		ora $51,x			ora 	NSStatus+1,x
.9300		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9301		0a		asl a				asl 	a
.9302		10 05		bpl $9309			bpl 	_NotRef
.9304		48		pha				pha
.9305		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9308		68		pla				pla
.9309						_NotRef:
.9309		0a		asl a				asl 	a
.930a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.930c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.930e		15 79		ora $79,x			ora 	NSExponent+1,x
.9310		f0 03		beq $9315			beq 	_IntegerCode 				; if clear, then we have two integers
.9312		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.9315						_IntegerCode:
.9315		b5 58		lda $58,x			lda		NSMantissa0,x
.9317		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9319		95 58		sta $58,x			sta 	NSMantissa0,x
.931b		b5 60		lda $60,x			lda		NSMantissa1,x
.931d		55 61		eor $61,x			eor 		NSMantissa1+1,x
.931f		95 60		sta $60,x			sta 	NSMantissa1,x
.9321		b5 68		lda $68,x			lda		NSMantissa2,x
.9323		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9325		95 68		sta $68,x			sta 	NSMantissa2,x
.9327		b5 70		lda $70,x			lda		NSMantissa3,x
.9329		55 71		eor $71,x			eor 		NSMantissa3+1,x
.932b		95 70		sta $70,x			sta 	NSMantissa3,x
.932d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.932f		60		rts				rts
.9330						WordIndirect:
.9330		fa		plx				plx
.9331		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9333		15 51		ora $51,x			ora 	NSStatus+1,x
.9335		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9336		0a		asl a				asl 	a
.9337		10 05		bpl $933e			bpl 	_NotRef
.9339		48		pha				pha
.933a		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.933d		68		pla				pla
.933e						_NotRef:
.933e		0a		asl a				asl 	a
.933f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9341		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9343		15 79		ora $79,x			ora 	NSExponent+1,x
.9345		f0 03		beq $934a			beq 	_IntegerCode 				; if clear, then we have two integers
.9347		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.934a						_IntegerCode:
.934a		20 50 92	jsr $9250			jsr 	AddCode 					; add the two values
.934d		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.934f		95 50		sta $50,x			sta 	NSStatus,x
.9351		60		rts				rts
.9352						ByteIndirect:
.9352		fa		plx				plx
.9353		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9355		15 51		ora $51,x			ora 	NSStatus+1,x
.9357		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9358		0a		asl a				asl 	a
.9359		10 05		bpl $9360			bpl 	_NotRef
.935b		48		pha				pha
.935c		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.935f		68		pla				pla
.9360						_NotRef:
.9360		0a		asl a				asl 	a
.9361		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9363		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9365		15 79		ora $79,x			ora 	NSExponent+1,x
.9367		f0 03		beq $936c			beq 	_IntegerCode 				; if clear, then we have two integers
.9369		4c b4 9f	jmp $9fb4			jmp 	TypeError 					; anything else, type mismatch.
.936c						_IntegerCode:
.936c		20 50 92	jsr $9250			jsr 	AddCode 					; add the two values
.936f		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9371		95 50		sta $50,x			sta 	NSStatus,x
.9373		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9374						ConvertInt16:
.9374		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9376		86 60		stx $60				stx 	NSMantissa1
.9378		64 68		stz $68				stz 	NSMantissa2
.937a		64 70		stz $70				stz 	NSMantissa3
.937c		64 50		stz $50				stz 	NSStatus 					; positive integer
.937e		a2 00		ldx #$00			ldx 	#0 							; stack level
.9380		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9382		80 00		bra $9384			bra 	ConvertInt32
.9384						ConvertInt32:
.9384		5a		phy				phy
.9385		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9387		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9389		10 08		bpl $9393			bpl 	_CI32NotNeg
.938b		48		pha				pha
.938c		a9 2d		lda #$2d			lda 	#'-'
.938e		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.9391		c8		iny				iny
.9392		68		pla				pla
.9393						_CI32NotNeg:
.9393		20 a1 93	jsr $93a1			jsr 	_CI32DivideConvert 			; recursive conversion
.9396		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9398		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.939b		7a		ply				ply
.939c		a2 06		ldx #$06			ldx 	#NumberBuffer >> 8 			; return address in XA
.939e		a9 27		lda #$27			lda 	#NumberBuffer & $FF
.93a0		60		rts				rts
.93a1						_CI32DivideConvert:
.93a1		e8		inx				inx 								; write to next slot up
.93a2		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte 		 			; write the base out.
.93a5		ca		dex				dex
.93a6		20 cf 90	jsr $90cf			jsr 	Int32Divide 				; divide
.93a9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.93ab		48		pha				pha
.93ac		20 8c 90	jsr $908c			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93af		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; is it zero ?
.93b2		f0 05		beq $93b9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93b4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93b6		20 a1 93	jsr $93a1			jsr 	_CI32DivideConvert 			; and recusrively call.
.93b9						_CI32NoRecurse:
.93b9		68		pla				pla 								; remainder
.93ba		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.93bc		90 02		bcc $93c0			bcc 	_CI32NotHex
.93be		69 26		adc #$26			adc 	#6+32
.93c0						_CI32NotHex:
.93c0		69 30		adc #$30			adc 	#48
.93c2		99 27 06	sta $0627,y			sta 	NumberBuffer,y 				; write out and exit
.93c5		c8		iny				iny
.93c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.93c7						PrecedenceLevel:
>93c7		04					.byte	 4	; $00 <<
>93c8		02					.byte	 2	; $01 <=
>93c9		02					.byte	 2	; $02 <>
>93ca		00					.byte	 0	; $03 !!3
>93cb		00					.byte	 0	; $04 ><
>93cc		02					.byte	 2	; $05 >=
>93cd		04					.byte	 4	; $06 >>
>93ce		00					.byte	 0	; $07 !!7
>93cf		00					.byte	 0	; $08 !!8
>93d0		00					.byte	 0	; $09 !!9
>93d1		00					.byte	 0	; $0a !!10
>93d2		00					.byte	 0	; $0b !!11
>93d3		00					.byte	 0	; $0c !!12
>93d4		00					.byte	 0	; $0d !!13
>93d5		00					.byte	 0	; $0e !!14
>93d6		00					.byte	 0	; $0f !!15
>93d7		00					.byte	 0	; $10 @
>93d8		00					.byte	 0	; $11 !!17
>93d9		00					.byte	 0	; $12 !!18
>93da		00					.byte	 0	; $13 [
>93db		04					.byte	 4	; $14 \
>93dc		00					.byte	 0	; $15 ]
>93dd		01					.byte	 1	; $16 ^
>93de		00					.byte	 0	; $17 _
>93df		00					.byte	 0	; $18 `
>93e0		00					.byte	 0	; $19 !!25
>93e1		00					.byte	 0	; $1a !!26
>93e2		00					.byte	 0	; $1b {
>93e3		01					.byte	 1	; $1c |
>93e4		00					.byte	 0	; $1d }
>93e5		00					.byte	 0	; $1e ~
>93e6		00					.byte	 0	; $1f [7m<7F>[m
>93e7		00					.byte	 0	; $20
>93e8		05					.byte	 5	; $21 !
>93e9		00					.byte	 0	; $22 "
>93ea		00					.byte	 0	; $23 #
>93eb		05					.byte	 5	; $24 $
>93ec		04					.byte	 4	; $25 %
>93ed		01					.byte	 1	; $26 &
>93ee		00					.byte	 0	; $27 '
>93ef		00					.byte	 0	; $28 (
>93f0		00					.byte	 0	; $29 )
>93f1		04					.byte	 4	; $2a *
>93f2		03					.byte	 3	; $2b +
>93f3		00					.byte	 0	; $2c ,
>93f4		03					.byte	 3	; $2d -
>93f5		00					.byte	 0	; $2e .
>93f6		04					.byte	 4	; $2f /
>93f7		00					.byte	 0	; $30 0
>93f8		00					.byte	 0	; $31 1
>93f9		00					.byte	 0	; $32 2
>93fa		00					.byte	 0	; $33 3
>93fb		00					.byte	 0	; $34 4
>93fc		00					.byte	 0	; $35 5
>93fd		00					.byte	 0	; $36 6
>93fe		00					.byte	 0	; $37 7
>93ff		00					.byte	 0	; $38 8
>9400		00					.byte	 0	; $39 9
>9401		00					.byte	 0	; $3a :
>9402		00					.byte	 0	; $3b ;
>9403		02					.byte	 2	; $3c <
>9404		02					.byte	 2	; $3d =
>9405		02					.byte	 2	; $3e >
>9406		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9407						EvaluateExpressionAt0:
.9407		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9409						EvaluateExpression:
.9409		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.940b						EvaluateExpressionAtPrecedence:
.940b		48		pha				pha 								; save precedence level
.940c		20 53 98	jsr $9853			jsr 	EvaluateTerm 				; evaluate term into level X.
.940f		68		pla				pla 								; restore precedence level.
.9410						_EXPRLoop:
.9410		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9412		b1 30		lda ($30),y			lda 	(codePtr),y
.9414		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9416		b0 25		bcs $943d			bcs 	_EXPRExit
.9418		da		phx				phx 								; read the operator precedence
.9419		aa		tax				tax
.941a		bd c7 93	lda $93c7,x			lda 	PrecedenceLevel,x
.941d		fa		plx				plx
.941e		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9420		f0 1b		beq $943d			beq 	_EXPRExit
.9422		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9424		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9426		c5 37		cmp $37				cmp 	zTemp0+1
.9428		b0 13		bcs $943d			bcs		_EXPRExit 					; if current >= operator exit
.942a		48		pha				pha 								; save current precedence.
.942b		b1 30		lda ($30),y			lda 	(codePtr),y
.942d		c8		iny				iny
.942e		48		pha				pha
.942f		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9431		e8		inx				inx 								; work out the right hand side.
.9432		20 0b 94	jsr $940b			jsr 	EvaluateExpressionAtPrecedence
.9435		ca		dex				dex
.9436		68		pla				pla 								; get operator, call the code.
.9437		20 40 94	jsr $9440			jsr 	_EXPRCaller
.943a		68		pla				pla 								; restore precedence level
.943b		80 d3		bra $9410			bra 	_EXPRLoop 					; and go round.
.943d						_EXPRExit:
.943d		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.943f		60		rts				rts
.9440						_EXPRCaller:
.9440		da		phx				phx 								; save on stack, first thing is to restore it
.9441		0a		asl a				asl 	a 							; double so can use vectors into X
.9442		aa		tax				tax
.9443		7c 1c 8c	jmp ($8c1c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9446						FloatingPointAdd:
.9446		20 bc 95	jsr $95bc			jsr 	FloatPrepare 				; prepare for floats
.9449		80 09		bra $9454			bra 	FloatAdd
.944b						FloatingPointSub:
.944b		20 bc 95	jsr $95bc			jsr 	FloatPrepare 				; prepare for floats
.944e						FloatSubtract:
.944e		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9450		49 80		eor #$80			eor 	#$80
.9452		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9454						FloatAdd:
.9454		48		pha				pha
.9455		5a		phy				phy
.9456		20 cb 95	jsr $95cb			jsr 	NSNormalise 				; normalise S[X]
.9459		f0 51		beq $94ac			beq 	_FAReturn1
.945b		e8		inx				inx 								; normalise S[X+1]
.945c		20 cb 95	jsr $95cb			jsr 	NSNormalise
.945f		ca		dex				dex
.9460		c9 00		cmp #$00			cmp 	#0
.9462		f0 60		beq $94c4			beq 	_FAExit 					; if so, just return A
.9464		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9466		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9468		f0 18		beq $9482			beq 	_FAExponentsEqual
.946a		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.946c		a8		tay				tay
.946d		38		sec				sec 								; do a signed comparison of the exponents.
.946e		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9470		50 02		bvc $9474			bvc 	_FANoSignedChange
.9472		49 80		eor #$80			eor 	#$80
.9474						_FANoSignedChange:
.9474		29 80		and #$80			and 	#$80
.9476		10 02		bpl $947a			bpl 	_FAHaveMax
.9478		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.947a						_FAHaveMax:
.947a		20 c7 94	jsr $94c7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.947d		e8		inx				inx
.947e		20 c7 94	jsr $94c7			jsr 	_FAShiftToExponent
.9481		ca		dex				dex
.9482						_FAExponentsEqual:
.9482		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9484		55 51		eor $51,x			eor 	NSStatus+1,x
.9486		30 0e		bmi $9496			bmi 	_FADifferentSigns
.9488		20 ff 91	jsr $91ff			jsr 	AddTopTwoStack 				; do the add of the mantissae
.948b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.948d		10 35		bpl $94c4			bpl 	_FAExit 					; if no, we are done.
.948f		20 45 9e	jsr $9e45			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9492		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9494		80 2e		bra $94c4			bra 	_FAExit
.9496						_FADifferentSigns:
.9496		20 19 92	jsr $9219			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9499		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.949b		10 06		bpl $94a3			bpl 	_FACheckZero 				; if no, check for -0
.949d		20 ee 9d	jsr $9dee			jsr 	NSMNegate 					; netate result
.94a0		20 f5 9d	jsr $9df5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94a3						_FACheckZero:
.94a3		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero	 				; check for -0
.94a6		d0 1c		bne $94c4			bne 	_FAExit
.94a8		74 50		stz $50,x			stz 	NSStatus,x
.94aa		80 18		bra $94c4			bra 	_FAExit
.94ac						_FAReturn1:
.94ac		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.94ae		95 58		sta $58,x			sta 	NSMantissa0,x
.94b0		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94b2		95 60		sta $60,x			sta 	NSMantissa1,x
.94b4		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.94b6		95 68		sta $68,x			sta 	NSMantissa2,x
.94b8		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.94ba		95 70		sta $70,x			sta 	NSMantissa3,x
.94bc		b5 79		lda $79,x			lda 	NSExponent+1,x
.94be		95 78		sta $78,x			sta 	NSExponent,x
.94c0		b5 51		lda $51,x			lda 	NSStatus+1,x
.94c2		95 50		sta $50,x			sta 	NSStatus,x
.94c4						_FAExit:
.94c4		7a		ply				ply
.94c5		68		pla				pla
.94c6		60		rts				rts
.94c7						_FAShiftToExponent:
.94c7						_FAShiftToExponent2:
.94c7		98		tya				tya 								; compare Y to exponent
.94c8		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.94ca		f0 07		beq $94d3			beq 	_FASEExit 					; exit if so.
.94cc		20 45 9e	jsr $9e45			jsr 	NSMShiftRight	 			; shift the mantissa right
.94cf		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.94d1		80 f4		bra $94c7			bra 	_FAShiftToExponent2
.94d3						_FASEExit:
.94d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.94d4						CompareFloat:
.94d4		20 4e 94	jsr $944e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.94d7		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.94d9		29 f8		and #$f8			and 	#$F8
.94db		15 68		ora $68,x			ora 	NSMantissa2,x
.94dd		15 70		ora $70,x			ora 	NSMantissa3,x
.94df		f0 08		beq $94e9			beq 	_FCExit 					; zero, so approximately identical
.94e1		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.94e3		34 50		bit $50,x			bit 	NSStatus,x
.94e5		10 02		bpl $94e9			bpl 	_FCExit
.94e7						_FCNegative:
.94e7		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.94e9						_FCExit:
.94e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.94ea						FDivideCommand:
.94ea		fa		plx				plx	 								; restore stack position
.94eb		20 bc 95	jsr $95bc			jsr 	FloatPrepare 				; prepare for floats
.94ee						FloatDivide:
.94ee		48		pha				pha
.94ef		e8		inx				inx
.94f0		20 cb 95	jsr $95cb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94f3		ca		dex				dex
.94f4		c9 00		cmp #$00			cmp 	#0
.94f6		f0 1d		beq $9515			beq 	_FDZero
.94f8		20 cb 95	jsr $95cb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94fb		f0 16		beq $9513			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94fd		20 f0 90	jsr $90f0			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9500		20 8c 90	jsr $908c			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9503		20 cb 95	jsr $95cb			jsr		NSNormalise 				; renormalise
.9506		20 80 91	jsr $9180			jsr 	CalculateSign 				; calculate result sign
.9509		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.950b		38		sec				sec
.950c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.950e		38		sec				sec
.950f		e9 1e		sbc #$1e			sbc 	#30
.9511		95 78		sta $78,x			sta 	NSExponent,x
.9513						_FDExit:
.9513		68		pla				pla
.9514		60		rts				rts
.9515						_FDZero:
.9515		a9 03		lda #$03		lda	#3
.9517		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.951a						FloatFractionalPart:
.951a		5a		phy				phy
.951b		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.951d		29 7f		and #$7f			and 	#$7F
.951f		95 50		sta $50,x			sta 	NSStatus,x
.9521		20 cb 95	jsr $95cb			jsr 	NSNormalise
.9524		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9526		38		sec				sec
.9527		e9 e0		sbc #$e0			sbc 	#$E0
.9529		90 29		bcc $9554			bcc 	_FFPExit 					; already fractional
.952b		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.952d		b0 22		bcs $9551			bcs 	_FFPZero
.952f		a8		tay				tay 								; put count to do in Y
.9530		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9532		20 56 95	jsr $9556			jsr 	_FFPPartial
.9535		95 70		sta $70,x			sta 	NSMantissa3,x
.9537		b5 68		lda $68,x			lda 	NSMantissa2,x
.9539		20 56 95	jsr $9556			jsr 	_FFPPartial
.953c		95 68		sta $68,x			sta 	NSMantissa2,x
.953e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9540		20 56 95	jsr $9556			jsr 	_FFPPartial
.9543		95 60		sta $60,x			sta 	NSMantissa1,x
.9545		b5 58		lda $58,x			lda 	NSMantissa0,x
.9547		20 56 95	jsr $9556			jsr 	_FFPPartial
.954a		95 58		sta $58,x			sta 	NSMantissa0,x
.954c		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; zeroed check.
.954f		d0 03		bne $9554			bne 	_FFPExit
.9551						_FFPZero:
.9551		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.9554						_FFPExit:
.9554		7a		ply				ply
.9555		60		rts				rts
.9556						_FFPPartial:
.9556		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9558		f0 17		beq $9571			beq 	_FFFPPExit
.955a		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.955c		b0 0c		bcs $956a			bcs 	_FFFPPWholeByte
.955e		5a		phy				phy
.955f						_FFFPPLeft:
.955f		0a		asl a				asl 	a
.9560		88		dey				dey
.9561		d0 fc		bne $955f			bne 	_FFFPPLeft
.9563		7a		ply				ply
.9564						_FFFPPRight:
.9564		4a		lsr a				lsr 	a
.9565		88		dey				dey
.9566		d0 fc		bne $9564			bne 	_FFFPPRight
.9568		80 07		bra $9571			bra 	_FFFPPExit
.956a						_FFFPPWholeByte:
.956a		98		tya				tya 								; subtract 8 from count
.956b		38		sec				sec
.956c		e9 08		sbc #$08			sbc 	#8
.956e		a8		tay				tay
.956f		a9 00		lda #$00			lda 	#0 							; and clear all
.9571						_FFFPPExit:
.9571		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9572						FloatIntegerPart:
.9572		48		pha				pha
.9573		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9575		f0 1d		beq $9594			beq 	_FIPExit 					; if so do nothing
.9577		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; is it zero ?
.957a		f0 15		beq $9591			beq 	_FIPZero 					; if so return zero.
.957c		20 cb 95	jsr $95cb			jsr 	NSNormalise 				; normalise
.957f		f0 10		beq $9591			beq 	_FIPZero 					; normalised to zero, exit zero
.9581						_FIPShift:
.9581		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9583		10 07		bpl $958c			bpl 	_FIPCheckZero
.9585		20 45 9e	jsr $9e45			jsr 	NSMShiftRight 				; shift mantissa right
.9588		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.958a		80 f5		bra $9581			bra 	_FIPShift
.958c						_FIPCheckZero:
.958c		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; avoid -0 problem
.958f		d0 03		bne $9594			bne 	_FIPExit 					; set to zero if mantissa zero.
.9591						_FIPZero:
.9591		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.9594						_FIPExit:
.9594		68		pla				pla
.9595		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9596						FloatingPointMultiply:
.9596		20 bc 95	jsr $95bc			jsr 	FloatPrepare 				; prepare for floats
.9599						FloatMultiply:
.9599		48		pha				pha
.959a		20 cb 95	jsr $95cb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.959d		f0 18		beq $95b7			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.959f		e8		inx				inx
.95a0		20 cb 95	jsr $95cb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95a3		ca		dex				dex
.95a4		c9 00		cmp #$00			cmp 	#0
.95a6		f0 0c		beq $95b4			beq 	_FDSetZero
.95a8		20 42 91	jsr $9142			jsr 	MultiplyShort 				; calculate the result.
.95ab		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95ad		18		clc				clc
.95ae		75 79		adc $79,x			adc 	NSExponent+1,x
.95b0		95 78		sta $78,x			sta 	NSExponent,x
.95b2		80 03		bra $95b7			bra 	_FDExit
.95b4						_FDSetZero:
.95b4		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; return 0
.95b7						_FDExit:
.95b7		20 cb 95	jsr $95cb			jsr 	NSNormalise 				; normalise the result
.95ba		68		pla				pla
.95bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95bc						FloatPrepare:
.95bc		20 c7 96	jsr $96c7			jsr 	DereferenceTopTwo 			; dereference the top two values
.95bf		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.95c1		15 51		ora $51,x			ora 	NSStatus+1,x
.95c3		29 10		and #$10			and 	#NSBIsString
.95c5		d0 01		bne $95c8			bne 	_FDType
.95c7		60		rts				rts
.95c8						_FDType:
.95c8		4c b4 9f	jmp $9fb4			jmp 	TypeError
.95cb						NSNormalise:
.95cb		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.95cd		29 80		and #$80			and 	#$80
.95cf		09 08		ora #$08			ora 	#NSTFloat
.95d1		95 50		sta $50,x			sta 	NSStatus,x
.95d3		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; if zero exit
.95d6		d0 07		bne $95df			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.95d8		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.95da		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.95dc		a9 00		lda #$00			lda 	#0 							; set Z flag
.95de		60		rts				rts
.95df						_NSNormaliseOptimise:
.95df		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.95e1		d0 19		bne $95fc			bne 	_NSNormaliseLoop
.95e3		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.95e5		30 15		bmi $95fc			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.95e7		95 70		sta $70,x			sta 	NSMantissa3,x
.95e9		b5 60		lda $60,x			lda 	NSMantissa1,x
.95eb		95 68		sta $68,x			sta 	NSMantissa2,x
.95ed		b5 58		lda $58,x			lda 	NSMantissa0,x
.95ef		95 60		sta $60,x			sta 	NSMantissa1,x
.95f1		74 58		stz $58,x			stz 	NSMantissa0,x
.95f3		b5 78		lda $78,x			lda 	NSExponent,x
.95f5		38		sec				sec
.95f6		e9 08		sbc #$08			sbc 	#8
.95f8		95 78		sta $78,x			sta 	NSExponent,x
.95fa		80 e3		bra $95df			bra 	_NSNormaliseOptimise
.95fc						_NSNormaliseLoop:
.95fc		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.95fe		70 07		bvs $9607			bvs 	_NSNExit 					; exit if so with Z flag clear
.9600		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; shift mantissa left
.9603		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9605		80 f5		bra $95fc			bra 	_NSNormaliseLoop
.9607						_NSNExit:
.9607		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9609		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.960a						AssignNumber:
.960a		5a		phy				phy
.960b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.960d		85 36		sta $36				sta 	zTemp0
.960f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9611		85 37		sta $37				sta 	zTemp0+1
.9613		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9615		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9617		95 50		sta $50,x			sta 	NSStatus,x
.9619		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.961b		c9 08		cmp #$08			cmp 	#NSTFloat
.961d		f0 24		beq $9643			beq 	_ANFloat
.961f		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9621		f0 03		beq $9626			beq		_ANNotFloat
.9623		4c af 9f	jmp $9faf			jmp 	RangeError					; if it is, report an error.
.9626						_ANNotFloat:
.9626		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9628		29 03		and #$03			and 	#3
.962a		d0 05		bne $9631			bne 	_ANByteWord
.962c		20 4e 96	jsr $964e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.962f		80 1b		bra $964c			bra 	_ANExit
.9631						_ANByteWord:
.9631		48		pha				pha 								; save count
.9632		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9634		92 36		sta ($36)			sta 	(zTemp0)
.9636		68		pla				pla
.9637		c9 01		cmp #$01			cmp	 	#1
.9639		f0 11		beq $964c			beq 	_ANExit
.963b		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.963d		a0 01		ldy #$01			ldy 	#1
.963f		91 36		sta ($36),y			sta 	(zTemp0),y
.9641		80 09		bra $964c			bra 	_ANExit
.9643						_ANFloat:
.9643		20 4e 96	jsr $964e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9646		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9648		a0 04		ldy #$04			ldy 	#4
.964a		91 36		sta ($36),y			sta 	(zTemp0),y
.964c						_ANExit:
.964c		7a		ply				ply
.964d		60		rts				rts
.964e						_ANCopy4PackSign:
.964e		a0 03		ldy #$03			ldy 	#3
.9650		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9652		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9654		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9656		91 36		sta ($36),y			sta 	(zTemp0),y
.9658		88		dey				dey
.9659		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.965b		91 36		sta ($36),y			sta 	(zTemp0),y
.965d		88		dey				dey
.965e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9660		91 36		sta ($36),y			sta 	(zTemp0),y
.9662		88		dey				dey
.9663		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9665		91 36		sta ($36),y			sta 	(zTemp0),y
.9667		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9668						AssignString:
.9668		5a		phy				phy
.9669		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.966b		85 38		sta $38				sta 	zTemp1
.966d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.966f		85 39		sta $39				sta 	zTemp1+1
.9671		b5 58		lda $58,x			lda 	NSMantissa0,x
.9673		85 36		sta $36				sta 	zTemp0
.9675		b5 60		lda $60,x			lda 	NSMantissa1,x
.9677		85 37		sta $37				sta 	zTemp0+1
.9679		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.967b		b1 36		lda ($36),y			lda 	(zTemp0),y
.967d		f0 23		beq $96a2			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.967f		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9680		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9682		e9 02		sbc #$02			sbc 	#2
.9684		85 3c		sta $3c				sta 	zsTemp
.9686		a0 01		ldy #$01			ldy 	#1
.9688		b1 36		lda ($36),y			lda 	(zTemp0),y
.968a		e9 00		sbc #$00			sbc 	#0
.968c		85 3d		sta $3d				sta 	zsTemp+1
.968e		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9690						_ASGetLength:
.9690		c8		iny				iny
.9691		b1 38		lda ($38),y			lda 	(zTemp1),y
.9693		d0 fb		bne $9690			bne 	_ASGetLength
.9695		98		tya				tya 								; is this length <= current length
.9696		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9698		90 1e		bcc $96b8			bcc 	_ASCopyString
.969a		f0 1c		beq $96b8			beq 	_ASCopyString
.969c		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.969e		a0 01		ldy #$01			ldy 	#1
.96a0		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96a2						_ASNewStringRequired:
.96a2		e8		inx				inx 								; concrete the new string.
.96a3		20 41 a7	jsr $a741			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.96a6		ca		dex				dex
.96a7		18		clc				clc
.96a8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.96aa		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.96ac		92 36		sta ($36)			sta 	(zTemp0)
.96ae		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96b0		69 00		adc #$00			adc 	#0
.96b2		a0 01		ldy #$01			ldy 	#1
.96b4		91 36		sta ($36),y			sta 	(zTemp0),y
.96b6		80 0d		bra $96c5			bra 	_ASExit
.96b8						_ASCopyString:
.96b8		a0 00		ldy #$00			ldy 	#0
.96ba						_ASCopyLoop:
.96ba		b1 38		lda ($38),y			lda 	(zTemp1),y
.96bc		c8		iny				iny
.96bd		c8		iny				iny
.96be		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96c0		88		dey				dey
.96c1		c9 00		cmp #$00			cmp 	#0
.96c3		d0 f5		bne $96ba			bne 	_ASCopyLoop
.96c5						_ASExit:
.96c5		7a		ply				ply
.96c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.96c7						DereferenceTopTwo:
.96c7		e8		inx				inx
.96c8		20 cc 96	jsr $96cc			jsr 	Dereference 				; deref x+1
.96cb		ca		dex				dex  								; falls through to deref x
.96cc						Dereference:
.96cc		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.96ce		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.96d0		f0 48		beq $971a			beq 	_DRFExit 					; not a reference, so exit.
.96d2		5a		phy				phy
.96d3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.96d5		85 36		sta $36				sta 	zTemp0
.96d7		b5 60		lda $60,x			lda 	NSMantissa1,x
.96d9		85 37		sta $37				sta 	zTemp0+1
.96db		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.96dd		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.96df		95 58		sta $58,x			sta 	NSMantissa0,x
.96e1		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.96e3		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.96e5		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.96e7		f0 0e		beq $96f7			beq 	_DRFDereferenceTwo
.96e9		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.96eb		f0 2f		beq $971c			beq 	_DRFFull
.96ed		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.96ef		29 03		and #$03			and 	#3
.96f1		f0 29		beq $971c			beq 	_DRFFull 					; the whole word
.96f3		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.96f5		f0 06		beq $96fd			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.96f7						_DRFDereferenceTwo:
.96f7		a0 01		ldy #$01			ldy 	#1
.96f9		b1 36		lda ($36),y			lda 	(zTemp0),y
.96fb		95 60		sta $60,x			sta 	NSMantissa1,x
.96fd						_DRFClear23:
.96fd		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.96ff		74 70		stz $70,x			stz 	NSMantissa3,x
.9701		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9703		29 18		and #$18			and 	#NSBTypeMask
.9705		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9707		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9709		d0 0e		bne $9719			bne 	_DRFNotString
.970b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.970d		15 60		ora $60,x			ora 	NSMantissa1,x
.970f		d0 08		bne $9719			bne 	_DRFNotString
.9711		a9 1b		lda #$1b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9713		95 58		sta $58,x			sta 	NSMantissa0,X
.9715		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.9717		95 60		sta $60,x			sta 	NSMantissa1,X
.9719						_DRFNotString
.9719		7a		ply				ply 								; restore Y and exit
.971a						_DRFExit:
.971a		60		rts				rts
.971b						_DRFNullString:
>971b		00						.byte 	0
.971c						_DRFFull:
.971c		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.971e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9720		95 60		sta $60,x			sta 	NSMantissa1,x
.9722		c8		iny				iny
.9723		b1 36		lda ($36),y			lda 	(zTemp0),y
.9725		95 68		sta $68,x			sta 	NSMantissa2,x
.9727		c8		iny				iny
.9728		b1 36		lda ($36),y			lda 	(zTemp0),y
.972a		95 70		sta $70,x			sta 	NSMantissa3,x
.972c		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.972e		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9730		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9732		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9734		f0 05		beq $973b			beq 	_DRFNoExponent
.9736		c8		iny				iny 								; if not, read the exponent as well.
.9737		b1 36		lda ($36),y			lda 	(zTemp0),y
.9739		95 78		sta $78,x			sta 	NSExponent,x
.973b						_DRFNoExponent:
.973b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.973d		10 0a		bpl $9749			bpl 	_DRFExit2 					; if not, then exit.
.973f		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9741		95 70		sta $70,x			sta 	NSMantissa3,x
.9743		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9745		09 80		ora #$80			ora 	#NSBIsNegative
.9747		95 50		sta $50,x			sta 	NSStatus,x
.9749						_DRFExit2:
.9749		7a		ply				ply
.974a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.974b						EncodeNumberStart:
.974b		38		sec				sec
.974c		80 01		bra $974f			bra 	EncodeNumberContinue+1
.974e						EncodeNumberContinue:
.974e		18		clc				clc
.974f						EncodeNumber:
.974f		08		php				php 								; save reset flag.
.9750		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9752		f0 12		beq $9766			beq 	_ENIsOkay
.9754		c9 30		cmp #$30			cmp 	#"0"
.9756		90 04		bcc $975c			bcc 	_ENBadNumber
.9758		c9 3a		cmp #$3a			cmp 	#"9"+1
.975a		90 0a		bcc $9766			bcc 	_ENIsOkay
.975c						_ENBadNumber:
.975c		28		plp				plp 								; throw saved reset
.975d		ad 05 04	lda $0405			lda 	EncodeState 				; if in decimal mode, construct final number
.9760		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9762		f0 7b		beq $97df			beq 	_ENConstructFinal
.9764						_ENFail:
.9764		18		clc				clc 								; not allowed
.9765		60		rts				rts
.9766						_ENIsOkay:
.9766		28		plp				plp 								; are we restarting
.9767		90 15		bcc $977e			bcc 	_ENNoRestart
.9769						_ENStartEncode:
.9769		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.976b		f0 0c		beq $9779			beq 	_ENFirstDP
.976d		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.976f		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte 					; in single byte mode.
.9772		a9 01		lda #$01			lda 	#ESTA_Low
.9774						_ENExitChange:
.9774		8d 05 04	sta $0405			sta 	EncodeState 				; save new state
.9777		38		sec				sec
.9778		60		rts				rts
.9779						_ENFirstDP:
.9779		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; clear integer part
.977c		80 3c		bra $97ba			bra 	_ESTASwitchFloat			; go straight to float and exi
.977e						_ENNoRestart:
.977e		48		pha				pha 								; save digit or DP on stack.
.977f		ad 05 04	lda $0405			lda 	EncodeState 				; get current state
.9782		c9 01		cmp #$01			cmp 	#ESTA_Low
.9784		f0 09		beq $978f			beq  	_ESTALowState
.9786		c9 02		cmp #$02			cmp 	#ESTA_High
.9788		f0 26		beq $97b0			beq 	_ESTAHighState
.978a		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.978c		f0 38		beq $97c6			beq 	_ESTADecimalState
>978e		db						.byte 	$DB 						; causes a break in the emulator
.978f						_ESTALowState:
.978f		68		pla				pla 								; get value back
.9790		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9792		f0 26		beq $97ba			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9794		29 0f		and #$0f			and 	#15 						; make digit
.9796		8d 06 04	sta $0406			sta 	DigitTemp 					; save it.
.9799		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.979b		0a		asl a				asl 	a
.979c		0a		asl a				asl 	a
.979d		75 58		adc $58,x			adc 	NSMantissa0,x
.979f		0a		asl a				asl 	a
.97a0		6d 06 04	adc $0406			adc 	DigitTemp
.97a3		95 58		sta $58,x			sta 	NSMantissa0,x
.97a5		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.97a7		90 05		bcc $97ae			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.97a9		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.97ab		8d 05 04	sta $0405			sta 	EncodeState
.97ae						_ESTANoSwitch:
.97ae		38		sec				sec
.97af		60		rts				rts
.97b0						_ESTAHighState:
.97b0		68		pla				pla 								; get value back
.97b1		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97b3		f0 05		beq $97ba			beq 	_ESTASwitchFloat
.97b5		20 13 98	jsr $9813			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97b8		38		sec				sec
.97b9		60		rts				rts
.97ba						_ESTASwitchFloat:
.97ba		9c 07 04	stz $0407			stz 	DecimalCount 				; reset the count of digits - we divide by 10^n at the end.
.97bd		e8		inx				inx 								; zero the decimal additive.
.97be		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.97c1		ca		dex				dex
.97c2		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.97c4		80 ae		bra $9774			bra 	_ENExitChange
.97c6						_ESTADecimalState:
.97c6		68		pla				pla 								; digit.
.97c7		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.97c9		f0 99		beq $9764			beq 	_ENFail
.97cb		e8		inx				inx 								; put digit into fractional part of X+1
.97cc		20 13 98	jsr $9813			jsr 	ESTAShiftDigitIntoMantissa
.97cf		ca		dex				dex
.97d0		ee 07 04	inc $0407			inc 	DecimalCount 				; bump the count of decimals
.97d3		ad 07 04	lda $0407			lda 	DecimalCount 				; too many decimal digits.
.97d6		c9 0b		cmp #$0b			cmp 	#11
.97d8		f0 02		beq $97dc			beq 	_ESTADSFail
.97da		38		sec				sec
.97db		60		rts				rts
.97dc						_ESTADSFail:
.97dc		4c af 9f	jmp $9faf			jmp 	RangeError
.97df						_ENConstructFinal:
.97df		ad 07 04	lda $0407			lda 	DecimalCount 				; get decimal count
.97e2		f0 2d		beq $9811			beq 	_ENCFExit 					; no decimals
.97e4		5a		phy				phy
.97e5		0a		asl a				asl 	a 							; x 4 and CLC
.97e6		0a		asl a				asl 	a
.97e7		6d 07 04	adc $0407			adc 	DecimalCount
.97ea		a8		tay				tay
.97eb		b9 6e 9f	lda $9f6e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.97ee		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.97f0		b9 6f 9f	lda $9f6f,y			lda 	DecimalScalarTable-5+1,y
.97f3		95 62		sta $62,x			sta 	NSMantissa1+2,x
.97f5		b9 70 9f	lda $9f70,y			lda 	DecimalScalarTable-5+2,y
.97f8		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.97fa		b9 71 9f	lda $9f71,y			lda 	DecimalScalarTable-5+3,y
.97fd		95 72		sta $72,x			sta 	NSMantissa3+2,x
.97ff		b9 72 9f	lda $9f72,y			lda 	DecimalScalarTable-5+4,y
.9802		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9804		a9 08		lda #$08			lda 	#NSTFloat
.9806		95 52		sta $52,x			sta 	NSStatus+2,x
.9808		7a		ply				ply
.9809		e8		inx				inx 								; multiply decimal const by decimal scalar
.980a		20 99 95	jsr $9599			jsr 	FloatMultiply
.980d		ca		dex				dex
.980e		20 54 94	jsr $9454			jsr 	FloatAdd 					; add to integer part.
.9811						_ENCFExit:
.9811		18		clc				clc 								; reject the digit.
.9812		60		rts				rts
.9813						ESTAShiftDigitIntoMantissa:
.9813		29 0f		and #$0f			and 	#15 						; save digit
.9815		48		pha				pha
.9816		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9818		48		pha				pha
.9819		b5 68		lda $68,x			lda 	NSMantissa2,x
.981b		48		pha				pha
.981c		b5 60		lda $60,x			lda 	NSMantissa1,x
.981e		48		pha				pha
.981f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9821		48		pha				pha
.9822		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 2
.9825		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 4
.9828		18		clc				clc 								; pop mantissa and add
.9829		68		pla				pla
.982a		75 58		adc $58,x			adc 	NSMantissa0,x
.982c		95 58		sta $58,x			sta 	NSMantissa0,x
.982e		68		pla				pla
.982f		75 60		adc $60,x			adc 	NSMantissa1,x
.9831		95 60		sta $60,x			sta 	NSMantissa1,x
.9833		68		pla				pla
.9834		75 68		adc $68,x			adc 	NSMantissa2,x
.9836		95 68		sta $68,x			sta 	NSMantissa2,x
.9838		68		pla				pla
.9839		75 70		adc $70,x			adc 	NSMantissa3,x
.983b		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.983d		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 10
.9840		68		pla				pla 								; add digit
.9841		18		clc				clc
.9842		75 58		adc $58,x			adc 	NSMantissa0,x
.9844		95 58		sta $58,x			sta 	NSMantissa0,x
.9846		90 0a		bcc $9852			bcc 	_ESTASDExit
.9848		f6 60		inc $60,x			inc 	NSMantissa1,x
.984a		d0 06		bne $9852			bne 	_ESTASDExit
.984c		f6 68		inc $68,x			inc 	NSMantissa2,x
.984e		d0 02		bne $9852			bne 	_ESTASDExit
.9850		f6 70		inc $70,x			inc 	NSMantissa3,x
.9852						_ESTASDExit:
.9852		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9853						EvaluateTerm:
.9853		b1 30		lda ($30),y			lda 	(codePtr),y
.9855		30 18		bmi $986f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9857		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9859		b0 6c		bcs $98c7			bcs 	_ETVariable
.985b		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.985d		90 6b		bcc $98ca			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.985f		c9 3a		cmp #$3a			cmp 	#'9'+1
.9861		b0 67		bcs $98ca			bcs 	_ETPuncUnary
.9863		20 4b 97	jsr $974b			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9866						_ETNumber:
.9866		c8		iny				iny 								; keep encoding until we have the numbers
.9867		b1 30		lda ($30),y			lda 	(codePtr),y
.9869		20 4e 97	jsr $974e			jsr 	EncodeNumberContinue
.986c		b0 f8		bcs $9866			bcs 	_ETNumber 					; go back if accepted.
.986e		60		rts				rts
.986f						_ETCheckUnary:
.986f		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9871		f0 3f		beq $98b2			beq 	_ETString
.9873		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9875		f0 12		beq $9889			beq 	_ETHexConstant
.9877		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9879		90 0b		bcc $9886			bcc 	_ETSyntaxError
.987b		c9 a2		cmp #$a2			cmp 	#KWC_LAST_UNARY+1
.987d		b0 07		bcs $9886			bcs 	_ETSyntaxError
.987f		da		phx				phx 								; push X on the stack
.9880		0a		asl a				asl 	a 							; put vector x 2 into X
.9881		aa		tax				tax
.9882		c8		iny				iny 								; consume unary function token
.9883		7c 9c 8c	jmp ($8c9c,x)			jmp 	(VectorSet0,x) 				; and do it.
.9886						_ETSyntaxError:
.9886		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.9889						_ETHexConstant:
.9889		c8		iny				iny 								; skip #
.988a		c8		iny				iny 								; skip count
.988b		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; clear result
.988e						_ETHLoop:
.988e		b1 30		lda ($30),y			lda 	(codePtr),y
.9890		c8		iny				iny 								; and consume
.9891		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9893		f0 1c		beq $98b1			beq 	_ETHExit
.9895		48		pha				pha 								; save on stack.
.9896		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 2
.9899		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 4
.989c		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 8
.989f		20 3b 9e	jsr $9e3b			jsr 	NSMShiftLeft 				; x 16
.98a2		68		pla				pla 								; ASCII
.98a3		c9 41		cmp #$41			cmp 	#'A'
.98a5		90 02		bcc $98a9			bcc 	_ETHNotChar
.98a7		e9 07		sbc #$07			sbc 	#7
.98a9						_ETHNotChar:
.98a9		29 0f		and #$0f			and 	#15 						; digit now
.98ab		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98ad		95 58		sta $58,x			sta 	NSMantissa0,x
.98af		80 dd		bra $988e			bra 	_ETHLoop 					; go round.
.98b1						_ETHExit:
.98b1		60		rts				rts
.98b2						_ETString:
.98b2		c8		iny				iny 								; look at length
.98b3		b1 30		lda ($30),y			lda 	(codePtr),y
.98b5		48		pha				pha
.98b6		c8		iny				iny 								; first character
.98b7		20 97 a5	jsr $a597			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98ba		68		pla				pla 								; restore count and save
.98bb		85 36		sta $36				sta 	zTemp0
.98bd		98		tya				tya 								; add length to Y to skip it.
.98be		18		clc				clc
.98bf		65 36		adc $36				adc 	zTemp0
.98c1		a8		tay				tay
.98c2		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.98c4		95 50		sta $50,x			sta 	NSStatus,x
.98c6		60		rts				rts
.98c7						_ETVariable:
.98c7		4c 1c 99	jmp $991c			jmp 	VariableHandler
.98ca						_ETPuncUnary:
.98ca		c8		iny				iny 								; consume the unary character
.98cb		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.98cd		f0 2b		beq $98fa			beq 	_ETUnaryNegate
.98cf		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.98d1		f0 36		beq $9909			beq 	_ETDereference
.98d3		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.98d5		f0 3e		beq $9915			beq 	_ETParenthesis
.98d7		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.98d9		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.98db		f0 06		beq $98e3			beq 	_ETIndirection
.98dd		e6 36		inc $36				inc 	zTemp0
.98df		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.98e1		d0 a3		bne $9886			bne 	_ETSyntaxError
.98e3						_ETIndirection:
.98e3		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.98e5		1a		inc a				inc 	a
.98e6		48		pha				pha
.98e7		20 53 98	jsr $9853			jsr 	EvaluateTerm				; evaluate the term
.98ea		20 cc 96	jsr $96cc			jsr 	Dereference 				; dereference it.
.98ed		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.98ef		d0 06		bne $98f7			bne 	_ETTypeMismatch
.98f1		68		pla				pla 								; indirection 1-2
.98f2		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.98f4		95 50		sta $50,x			sta 	NSStatus,x
.98f6		60		rts				rts
.98f7						_ETTypeMismatch:
.98f7		4c b4 9f	jmp $9fb4			jmp 	TypeError
.98fa						_ETUnaryNegate:
.98fa		20 53 98	jsr $9853			jsr 	EvaluateTerm				; evaluate the term
.98fd		20 cc 96	jsr $96cc			jsr 	Dereference 				; dereference it.
.9900		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9902		29 10		and #$10			and 	#NSTString
.9904		d0 f1		bne $98f7			bne 	_ETTypeMismatch
.9906		4c ee 9d	jmp $9dee			jmp 	NSMNegate  					; just toggles the sign bit.
.9909						_ETDereference:
.9909		20 53 98	jsr $9853			jsr 	EvaluateTerm				; evaluate the term
.990c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.990e		29 20		and #$20			and 	#NSBIsReference
.9910		f0 e5		beq $98f7			beq 	_ETTypeMismatch
.9912		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9914		60		rts				rts
.9915						_ETParenthesis:
.9915		20 09 94	jsr $9409			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9918		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; check for )
.991b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.991c						VariableHandler:
.991c		b1 30		lda ($30),y			lda 	(codePtr),y
.991e		18		clc				clc
.991f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9921		85 37		sta $37				sta 	zTemp0+1
.9923		c8		iny				iny
.9924		b1 30		lda ($30),y			lda 	(codePtr),y
.9926		85 36		sta $36				sta 	zTemp0
.9928		c8		iny				iny
.9929		18		clc				clc									; copy variable address+3 to mantissa
.992a		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.992c		95 58		sta $58,x			sta 	NSMantissa0,x
.992e		a5 37		lda $37				lda 	zTemp0+1
.9930		69 00		adc #$00			adc 	#0
.9932		95 60		sta $60,x			sta 	NSMantissa1,x
.9934		74 68		stz $68,x			stz 	NSMantissa2,x
.9936		74 70		stz $70,x			stz 	NSMantissa3,x
.9938		74 78		stz $78,x			stz 	NSExponent,x
.993a		5a		phy				phy
.993b		a0 02		ldy #$02			ldy 	#2 							; read type
.993d		b1 36		lda ($36),y			lda 	(zTemp0),y
.993f		7a		ply				ply
.9940		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9942		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9944		95 50		sta $50,x			sta 	NSStatus,x
.9946		29 04		and #$04			and 	#NSBIsArray
.9948		d0 01		bne $994b			bne 	_VHArray
.994a		60		rts				rts
.994b						_VHArray:
.994b		e8		inx				inx
.994c		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get the 1st index.
.994f		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9951		95 51		sta $51,x			sta 	NSStatus+1,x
.9953		b1 30		lda ($30),y			lda 	(codePtr),y
.9955		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9957		d0 06		bne $995f			bne 	_VHNoSecondIndex
.9959		c8		iny				iny 								; skip the comma
.995a		e8		inx				inx
.995b		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.995e		ca		dex				dex
.995f						_VHNoSecondIndex:
.995f		ca		dex				dex 								; set X back.
.9960		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; and check the right bracket.
.9963		5a		phy				phy 								; save position
.9964		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9966		85 3e		sta $3e				sta 	zaTemp
.9968		b5 60		lda $60,x			lda 	NSMantissa1,x
.996a		85 3f		sta $3f				sta 	zaTemp+1
.996c		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.996e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9970		f0 5d		beq $99cf			beq 	_VHBadArray
.9972		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9974		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9976		f0 02		beq $997a			beq 	_VHHas2Mask
.9978		a9 ff		lda #$ff			lda 	#$FF
.997a						_VHHas2Mask:
.997a		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.997c		f0 4c		beq $99ca			beq 	_VHBadIndex
.997e		0a		asl a				asl 	a 							; carry will be set if a second index
.997f		90 08		bcc $9989			bcc 	_VHCheckFirstIndex
.9981		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9983		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9985		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9987		90 41		bcc $99ca			bcc 	_VHBadIndex
.9989						_VHCheckFirstIndex:
.9989		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.998b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.998d		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.998f		90 39		bcc $99ca			bcc 	_VHBadIndex
.9991		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9993		64 37		stz $37				stz 	zTemp0+1
.9995		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9997		30 0e		bmi $99a7			bmi 	_VHNoMultiply
.9999		da		phx				phx
.999a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.999c		48		pha				pha
.999d		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.999f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99a1		1a		inc a				inc 	a 							; add 1 for zero base
.99a2		fa		plx				plx
.99a3		20 d7 9d	jsr $9dd7			jsr 	Multiply8x8 				; calculate -> Z0
.99a6		fa		plx				plx
.99a7						_VHNoMultiply:
.99a7		18		clc				clc
.99a8		a5 36		lda $36				lda 	zTemp0
.99aa		75 59		adc $59,x			adc 	NSMantissa0+1,x
.99ac		85 36		sta $36				sta 	zTemp0
.99ae		a5 37		lda $37				lda 	zTemp0+1
.99b0		69 00		adc #$00			adc 	#0
.99b2		85 37		sta $37				sta 	zTemp0+1
.99b4		b5 50		lda $50,x			lda 	NSStatus,x
.99b6		20 7d 85	jsr $857d			jsr 	ScaleByBaseType
.99b9		18		clc				clc
.99ba		b2 3e		lda ($3e)			lda 	(zaTemp)
.99bc		65 36		adc $36				adc 	zTemp0
.99be		95 58		sta $58,x			sta 	NSMantissa0,x
.99c0		a0 01		ldy #$01			ldy 	#1
.99c2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99c4		65 37		adc $37				adc 	zTemp0+1
.99c6		95 60		sta $60,x			sta 	NSMantissa1,x
.99c8		7a		ply				ply 								; restore position
.99c9		60		rts				rts
.99ca						_VHBadIndex:
.99ca		a9 17		lda #$17		lda	#23
.99cc		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.99cf						_VHBadArray:
.99cf		a9 18		lda #$18		lda	#24
.99d1		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.99d4						AbsUnary:
.99d4		fa		plx				plx 								; restore stack pos
.99d5		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; get a float or int
.99d8		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.99db		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.99dd		29 7f		and #$7f			and 	#$7F
.99df		95 50		sta $50,x			sta 	NSStatus,x
.99e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.99e2						AllocUnary:
.99e2		fa		plx				plx 								; restore stack pos
.99e3		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger		; get bytes required.
.99e6		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.99e9		da		phx				phx 								; save X/Y
.99ea		5a		phy				phy
.99eb		8a		txa				txa 								; copy X into Y
.99ec		a8		tay				tay
.99ed		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.99f0		aa		tax				tax
.99f1		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.99f4		20 01 9a	jsr $9a01			jsr 	AllocateXABytes 			; allocate memory
.99f7		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.99fa		8a		txa				txa 	 							; typing is 16 bit integer.
.99fb		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.99fe		7a		ply				ply
.99ff		fa		plx				plx
.9a00		60		rts				rts
.9a01						AllocateXABytes:
.9a01		5a		phy				phy
.9a02		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a05		84 36		sty $36				sty 	zTemp0
.9a07		5a		phy				phy
.9a08		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a0b		84 37		sty $37				sty 	zTemp0+1
.9a0d		5a		phy				phy
.9a0e		18		clc				clc 								; add to low memory pointer
.9a0f		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a12		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a15		8a		txa				txa
.9a16		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a19		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a1c		b0 2f		bcs $9a4d			bcs 	CISSMemory
.9a1e		20 3f 9a	jsr $9a3f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a21						_ClearMemory:
.9a21		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a24		c5 36		cmp $36				cmp 	zTemp0
.9a26		d0 07		bne $9a2f			bne 	_CMClearNext
.9a28		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a2b		c5 37		cmp $37				cmp 	zTemp0+1
.9a2d		f0 0c		beq $9a3b			beq 	_CMExit
.9a2f						_CMClearNext:
.9a2f		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a31		92 36		sta ($36)			sta 	(zTemp0)
.9a33		e6 36		inc $36				inc 	zTemp0
.9a35		d0 ea		bne $9a21			bne 	_ClearMemory
.9a37		e6 37		inc $37				inc		zTemp0+1
.9a39		80 e6		bra $9a21			bra 	_ClearMemory
.9a3b						_CMExit:
.9a3b		fa		plx				plx
.9a3c		68		pla				pla
.9a3d		7a		ply				ply
.9a3e		60		rts				rts
.9a3f						CheckIdentifierStringSpace:
.9a3f		48		pha				pha
.9a40		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9a43		18		clc				clc
.9a44		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a46		cd 0f 04	cmp $040f			cmp 	StringMemory+1 				; is it >= StringMemory
.9a49		b0 02		bcs $9a4d			bcs 	CISSMemory
.9a4b		68		pla				pla
.9a4c		60		rts				rts
.9a4d						CISSMemory:
.9a4d		a9 06		lda #$06		lda	#6
.9a4f		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a52						AscUnary:
.9a52		fa		plx				plx 								; restore stack pos
.9a53		20 84 9d	jsr $9d84			jsr 	EvaluateString 				; get a string
.9a56		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9a58		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte 					; ASC("") will return zero.
.9a5b		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9a5e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/deekpeek.asm

.9a5f						PeekUnary:
.9a5f		18		clc				clc
.9a60		80 01		bra $9a63			bra 	DPUnary
.9a62						DeekUnary:
.9a62		38		sec				sec
.9a63						DPUnary:
.9a63		fa		plx				plx 								; restore position.
.9a64		08		php				php									; save on stack, CS = Deek, CC = Peek
.9a65		20 ac 9d	jsr $9dac			jsr		Evaluate16BitInteger 		; address as constant.
.9a68		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9a6b		28		plp				plp 								; function back.
.9a6c		a9 21		lda #$21			lda 	#NSBIsReference+NSTInteger+1 ; 1 byte read
.9a6e		90 01		bcc $9a71			bcc 	_DPUpdate
.9a70		1a		inc a				inc 	a 							; 2 byte read
.9a71						_DPUpdate:
.9a71		95 50		sta $50,x			sta 	NSStatus,x 					; set to 1/2 byte reference.
.9a73		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a74						FracUnary:
.9a74		fa		plx				plx 								; restore stack pos
.9a75		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; get a float or int
.9a78		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9a7b		b5 50		lda $50,x			lda 	NSStatus,x
.9a7d		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a7f		f0 04		beq $9a85			beq 	_IUZero
.9a81		20 1a 95	jsr $951a			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9a84		60		rts				rts
.9a85						_IUZero:
.9a85		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.9a88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a89						IntUnary:
.9a89		fa		plx				plx 								; restore stack pos
.9a8a		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; get a float or int
.9a8d		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9a90		b5 50		lda $50,x			lda 	NSStatus,x
.9a92		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a94		f0 03		beq $9a99			beq 	_IUExit
.9a96		20 72 95	jsr $9572			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9a99						_IUExit:
.9a99		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a9a						LenUnary:
.9a9a		fa		plx				plx 								; restore stack pos
.9a9b		20 84 9d	jsr $9d84			jsr 	EvaluateString 				; get a string
.9a9e		5a		phy				phy
.9a9f		a0 00		ldy #$00			ldy 	#0 							; find length
.9aa1						_LenFind:
.9aa1		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9aa3		f0 06		beq $9aab			beq 	_LenExit
.9aa5		c8		iny				iny
.9aa6		d0 f9		bne $9aa1			bne 	_LenFind
.9aa8		4c af 9f	jmp $9faf			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9aab						_LenExit:
.9aab		98		tya				tya		 							; return length
.9aac		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.9aaf		7a		ply				ply
.9ab0		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9ab3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9ab4						Unary_Min:
.9ab4		a9 01		lda #$01			lda 	#1
.9ab6		80 02		bra $9aba			bra 	UnaryMinMaxMain
.9ab8						Unary_Max:
.9ab8		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9aba						UnaryMinMaxMain:
.9aba		fa		plx				plx 								; get index on number stack
.9abb		48		pha				pha 								; save comparator
.9abc		20 71 9d	jsr $9d71			jsr 	EvaluateValue 				; get the first value.
.9abf						_UMMMLoop:
.9abf		b1 30		lda ($30),y			lda 	(codePtr),y
.9ac1		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ac3		f0 22		beq $9ae7			beq 	_UMMMDone
.9ac5		20 f4 8e	jsr $8ef4			jsr 	CheckComma 					; must be a comma
.9ac8		e8		inx				inx
.9ac9		20 71 9d	jsr $9d71			jsr 	EvaluateValue
.9acc		ca		dex				dex
.9acd		20 0f 9e	jsr $9e0f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9ad0		e8		inx				inx
.9ad1		20 0f 9e	jsr $9e0f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9ad4		e8		inx				inx
.9ad5		20 bc 8f	jsr $8fbc			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9ad8		ca		dex				dex
.9ad9		ca		dex				dex
.9ada		85 36		sta $36				sta 	zTemp0 						; save required result
.9adc		68		pla				pla 								; get and save comparator
.9add		48		pha				pha
.9ade		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9ae0		d0 dd		bne $9abf			bne 	_UMMMLoop
.9ae2		20 ea 9a	jsr $9aea			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9ae5		80 d8		bra $9abf			bra 	_UMMMLoop
.9ae7						_UMMMDone:
.9ae7		68		pla				pla 								; throw the comparator
.9ae8		c8		iny				iny 								; skip )
.9ae9		60		rts				rts
.9aea						ExpCopyAboveDown:
.9aea		b5 51		lda $51,x			lda 	NSStatus+1,x
.9aec		95 50		sta $50,x			sta 	NSStatus,x
.9aee		b5 79		lda $79,x			lda 	NSExponent+1,x
.9af0		95 78		sta $78,x			sta 	NSExponent,x
.9af2		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9af4		95 58		sta $58,x			sta 	NSMantissa0,x
.9af6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9af8		95 60		sta $60,x			sta 	NSMantissa1,x
.9afa		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9afc		95 68		sta $68,x			sta 	NSMantissa2,x
.9afe		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b00		95 70		sta $70,x			sta 	NSMantissa3,x
.9b02		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b03						Unary_Not:
.9b03		fa		plx				plx
.9b04		20 99 9d	jsr $9d99			jsr 	EvaluateInteger 			; get integer
.9b07		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9b0a		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; zero mantissa ?
.9b0d		f0 04		beq $9b13			beq 	_NotZero
.9b0f		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.9b12		60		rts				rts
.9b13						_NotZero:
.9b13		4c 72 8f	jmp $8f72			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b16						Unary_Random:
.9b16		fa		plx				plx
.9b17		20 88 9b	jsr $9b88			jsr 	Random32Bit 				; get a random number
.9b1a		20 71 9b	jsr $9b71			jsr 	URCopyToMantissa  			; put in mantissa
.9b1d		b1 30		lda ($30),y			lda 	(codePtr),y
.9b1f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9b21		f0 08		beq $9b2b			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9b23		e8		inx				inx
.9b24		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b27		ca		dex				dex
.9b28		20 c4 90	jsr $90c4			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9b2b						_URNoModulus:
.9b2b		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9b2d		74 78		stz $78,x			stz 	NSExponent,x
.9b2f		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9b32		60		rts				rts
.9b33						Unary_Rnd:
.9b33		fa		plx				plx
.9b34		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; number to use.
.9b37		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; closing bracket
.9b3a		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b3d		f0 26		beq $9b65			beq 	_URCopySeed
.9b3f		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b41		10 1f		bpl $9b62			bpl 	_URDontSeed
.9b43		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b45		49 17		eor #$17			eor 	#$17
.9b47		8d 08 04	sta $0408			sta 	RandomSeed+0
.9b4a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4c		49 a5		eor #$a5			eor 	#$A5
.9b4e		8d 09 04	sta $0409			sta 	RandomSeed+1
.9b51		b5 68		lda $68,x			lda 	NSMantissa2,x
.9b53		49 c2		eor #$c2			eor 	#$C2
.9b55		8d 0a 04	sta $040a			sta 	RandomSeed+2
.9b58		b5 70		lda $70,x			lda 	NSMantissa3,x
.9b5a		49 9d		eor #$9d			eor 	#$9D
.9b5c		8d 0b 04	sta $040b			sta 	RandomSeed+3
.9b5f		20 88 9b	jsr $9b88			jsr 	Random32Bit
.9b62						_URDontSeed:
.9b62		20 88 9b	jsr $9b88			jsr 	Random32Bit 				; generate a number
.9b65						_URCopySeed:
.9b65		20 71 9b	jsr $9b71			jsr 	URCopyToMantissa 			; copy into mantissa
.9b68		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9b6a		95 78		sta $78,x			sta 	NSExponent,x
.9b6c		a9 08		lda #$08			lda 	#NSTFloat
.9b6e		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9b70		60		rts				rts
.9b71						URCopyToMantissa:
.9b71		ad 08 04	lda $0408			lda 	RandomSeed+0
.9b74		95 58		sta $58,x			sta 	NSMantissa0,x
.9b76		ad 09 04	lda $0409			lda 	RandomSeed+1
.9b79		95 60		sta $60,x			sta 	NSMantissa1,x
.9b7b		ad 0a 04	lda $040a			lda 	RandomSeed+2
.9b7e		95 68		sta $68,x			sta 	NSMantissa2,x
.9b80		ad 0b 04	lda $040b			lda 	RandomSeed+3
.9b83		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b85		95 70		sta $70,x			sta 	NSMantissa3,x
.9b87		60		rts				rts
.9b88						Random32Bit:
.9b88		5a		phy				phy
.9b89		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b8b		ad 08 04	lda $0408			lda 	RandomSeed+0 				; check the seed isn't zero
.9b8e		d0 03		bne $9b93			bne 	_Random1
.9b90		a8		tay				tay 								; if so do it 256 times
.9b91		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b93						_Random1:
.9b93		0a		asl a				asl 	a 							; LSFR RNG
.9b94		2e 09 04	rol $0409			rol 	RandomSeed+1
.9b97		2e 0a 04	rol $040a			rol 	RandomSeed+2
.9b9a		2e 0b 04	rol $040b			rol 	RandomSeed+3
.9b9d		90 02		bcc $9ba1			bcc 	_Random2
.9b9f		49 c5		eor #$c5			eor 	#$C5
.9ba1						_Random2:
.9ba1		88		dey				dey
.9ba2		d0 ef		bne $9b93			bne 	_Random1
.9ba4		8d 08 04	sta $0408			sta 	RandomSeed+0
.9ba7		7a		ply				ply
.9ba8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9ba9						SgnUnary:
.9ba9		fa		plx				plx 								; restore stack pos
.9baa		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber 				; get a float or int
.9bad		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9bb0		20 4e 9e	jsr $9e4e			jsr 	NSMIsZero 					; if zero
.9bb3		f0 0e		beq $9bc3			beq 	_SGZero  					; return Int Zero
.9bb5		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9bb7		48		pha				pha
.9bb8		a9 01		lda #$01			lda 	#1 							; set to 1
.9bba		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.9bbd		68		pla				pla
.9bbe		29 80		and #$80			and		#$80 						; copy the sign byte out
.9bc0		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9bc2		60		rts				rts
.9bc3		20 2c 9e	jsr $9e2c	_SGZero:jsr 	NSMSetZero
.9bc6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9bc7						ValUnary:
.9bc7		fa		plx				plx 								; restore stack pos
.9bc8		20 dd 9b	jsr $9bdd			jsr 	ValMainCode 				; do the main val() code
.9bcb		b0 01		bcs $9bce			bcs 	_VUError 					; couldn't convert
.9bcd		60		rts				rts
.9bce						_VUError:
.9bce		4c b4 9f	jmp $9fb4			jmp 	TypeError
.9bd1						IsValUnary:
.9bd1		fa		plx				plx 								; restore stack pos
.9bd2		20 dd 9b	jsr $9bdd			jsr 	ValMainCode 				; do the main val() code
.9bd5		b0 03		bcs $9bda			bcs 	_VUBad
.9bd7		4c 72 8f	jmp $8f72			jmp 	ReturnTrue
.9bda						_VUBad:
.9bda		4c 7d 8f	jmp $8f7d			jmp 	ReturnFalse
.9bdd						ValMainCode:
.9bdd		20 84 9d	jsr $9d84			jsr 	EvaluateString 				; get a string
.9be0		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; check right bracket present
.9be3						ValEvaluateZTemp0:
.9be3		5a		phy				phy
.9be4		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9be6		f0 17		beq $9bff			beq 	_VMCFail2
.9be8		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9bea		48		pha				pha 								; save first character
.9beb		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9bed		d0 01		bne $9bf0			bne 	_VMCStart
.9bef		c8		iny				iny 								; skip over -
.9bf0						_VMCStart:
.9bf0		38		sec				sec 								; initialise first time round.
.9bf1						_VMCNext:
.9bf1		c8		iny				iny 								; pre-increment
.9bf2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9bf4		f0 0c		beq $9c02			beq 	_VMCSuccess 				; successful.
.9bf6		20 4f 97	jsr $974f			jsr 	EncodeNumber 				; send it to the number-builder
.9bf9		90 03		bcc $9bfe			bcc 	_VMCFail 					; if failed, give up.
.9bfb		18		clc				clc 								; next time round, countinue
.9bfc		80 f3		bra $9bf1			bra 	_VMCNext
.9bfe						_VMCFail:
.9bfe		68		pla				pla
.9bff						_VMCFail2:
.9bff		7a		ply				ply
.9c00		38		sec				sec
.9c01		60		rts				rts
.9c02						_VMCSuccess:
.9c02		a9 00		lda #$00			lda 	#0 							; construct final
.9c04		20 4f 97	jsr $974f			jsr 	EncodeNumber 				; by sending a duff value.
.9c07		68		pla				pla 								; if it was -ve
.9c08		c9 2d		cmp #$2d			cmp 	#"-"
.9c0a		d0 03		bne $9c0f			bne 	_VMCNotNegative
.9c0c		20 ee 9d	jsr $9dee			jsr		NSMNegate 					; negate it.
.9c0f						_VMCNotNegative:
.9c0f		7a		ply				ply
.9c10		18		clc				clc
.9c11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c12						ChrUnary:
.9c12		fa		plx				plx 								; restore stack pos
.9c13		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9c16		48		pha				pha
.9c17		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9c1a		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c1c		20 be a7	jsr $a7be			jsr 	StringTempAllocate
.9c1f		68		pla				pla 								; write number to it
.9c20		20 f7 a7	jsr $a7f7			jsr 	StringTempWrite
.9c23		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c24						SpcUnary:
.9c24		fa		plx				plx 								; restore stack pos
.9c25		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger			; get value
.9c28		5a		phy				phy
.9c29		48		pha				pha 								; save count
.9c2a		20 be a7	jsr $a7be			jsr 	StringTempAllocate
.9c2d		7a		ply				ply 								; to do count in Y
.9c2e						_SpcLoop:
.9c2e		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9c30		f0 08		beq $9c3a			beq 	_SpcExit
.9c32		a9 20		lda #$20			lda 	#32
.9c34		20 f7 a7	jsr $a7f7			jsr 	StringTempWrite
.9c37		88		dey				dey
.9c38		80 f4		bra $9c2e			bra 	_SPCLoop
.9c3a						_SpcExit:
.9c3a		7a		ply				ply
.9c3b		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.9c3e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c3f						Unary_Str:
.9c3f		fa		plx				plx
.9c40		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber  			; get number
.9c43		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; closing bracket
.9c46		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c48		20 61 9c	jsr $9c61			jsr 	ConvertNumberToString 		; do the conversion.
.9c4b		a9 21		lda #$21			lda		#33 						; create buffer
.9c4d		20 be a7	jsr $a7be			jsr 	StringTempAllocate 			; allocate memory
.9c50		da		phx				phx  								; copy the converted string into the buffer.
.9c51		a2 00		ldx #$00			ldx 	#0
.9c53						_USCopy:
.9c53		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9c56		20 f7 a7	jsr $a7f7			jsr 	StringTempWrite
.9c59		e8		inx				inx
.9c5a		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9c5d		d0 f4		bne $9c53			bne 	_USCopy
.9c5f		fa		plx				plx
.9c60		60		rts				rts
.9c61						ConvertNumberToString:
.9c61		5a		phy				phy 								; save code position
.9c62		8d 14 04	sta $0414			sta 	DecimalPlaces	 			; save number of DPs.
.9c65		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9c68		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9c6a		10 09		bpl $9c75			bpl 	_CNTSNotNegative
.9c6c		29 7f		and #$7f			and 	#$7F 						; make +ve
.9c6e		95 50		sta $50,x			sta 	NSStatus,x
.9c70		a9 2d		lda #$2d			lda 	#"-"
.9c72		20 d6 9c	jsr $9cd6			jsr 	WriteDecimalBuffer
.9c75						_CNTSNotNegative:
.9c75		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9c77		f0 12		beq $9c8b			beq 	_CNTSNotFloat
.9c79		e8		inx				inx 								; round up so we don't get too many 6.999999
.9c7a		a9 01		lda #$01			lda 	#1
.9c7c		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.9c7f		ca		dex				dex
.9c80		b5 78		lda $78,x			lda		NSExponent,x
.9c82		95 79		sta $79,x			sta 	NSExponent+1,x
.9c84		a9 08		lda #$08			lda 	#NSTFloat
.9c86		95 51		sta $51,x			sta 	NSStatus+1,x
.9c88		20 54 94	jsr $9454			jsr 	FloatAdd
.9c8b						_CNTSNotFloat:
.9c8b		20 b8 9c	jsr $9cb8			jsr 	MakePlusTwoString 			; do the integer part.
.9c8e		20 1a 95	jsr $951a			jsr 	FloatFractionalPart 		; get the fractional part
.9c91		20 cb 95	jsr $95cb			jsr 	NSNormalise					; normalise , exit if zero
.9c94		f0 20		beq $9cb6			beq 	_CNTSExit
.9c96		a9 2e		lda #$2e			lda 	#"."
.9c98		20 d6 9c	jsr $9cd6			jsr 	WriteDecimalBuffer 			; write decimal place
.9c9b						_CNTSDecimal:
.9c9b		ce 14 04	dec $0414			dec 	DecimalPlaces 				; done all the decimals
.9c9e		30 16		bmi $9cb6			bmi 	_CNTSExit
.9ca0		e8		inx				inx 								; x 10.0
.9ca1		a9 0a		lda #$0a			lda 	#10
.9ca3		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.9ca6		a9 08		lda #$08			lda 	#NSTFloat
.9ca8		95 50		sta $50,x			sta 	NSStatus,x
.9caa		ca		dex				dex
.9cab		20 99 95	jsr $9599			jsr 	FloatMultiply
.9cae		20 b8 9c	jsr $9cb8			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9cb1		20 1a 95	jsr $951a			jsr 	FloatFractionalPart 		; get the fractional part
.9cb4		80 e5		bra $9c9b			bra 	_CNTSDecimal 				; keep going.
.9cb6						_CNTSExit:
.9cb6		7a		ply				ply
.9cb7		60		rts				rts
.9cb8						MakePlusTwoString:
.9cb8		da		phx				phx
.9cb9		20 0f 9e	jsr $9e0f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9cbc		e8		inx				inx 								; access it
.9cbd		e8		inx				inx
.9cbe		20 72 95	jsr $9572			jsr 	FloatIntegerPart 			; make it an integer
.9cc1		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9cc3		20 84 93	jsr $9384			jsr 	ConvertInt32
.9cc6		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9cc8						_MPTSCopy:
.9cc8		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9ccb		20 d6 9c	jsr $9cd6			jsr 	WriteDecimalBuffer
.9cce		e8		inx				inx
.9ccf		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9cd2		d0 f4		bne $9cc8			bne 	_MPTSCopy
.9cd4		fa		plx				plx
.9cd5		60		rts				rts
.9cd6						WriteDecimalBuffer:
.9cd6		da		phx				phx
.9cd7		ae 15 04	ldx $0415			ldx 	dbOffset
.9cda		9d 49 06	sta $0649,x			sta 	DecimalBuffer,x
.9cdd		9e 4a 06	stz $064a,x			stz 	DecimalBuffer+1,x
.9ce0		ee 15 04	inc $0415			inc 	dbOffset
.9ce3		fa		plx				plx
.9ce4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ce5						Unary_Left:
.9ce5		fa		plx				plx
.9ce6		18		clc				clc 								; only one parameter
.9ce7		20 4a 9d	jsr $9d4a			jsr 	SubstringInitial 			; set up.
.9cea		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9cec		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9cee		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9cf0		80 25		bra $9d17			bra 	SubstringMain
.9cf2						Unary_Right:
.9cf2		fa		plx				plx
.9cf3		18		clc				clc 								; only one parameter
.9cf4		20 4a 9d	jsr $9d4a			jsr 	SubstringInitial 			; set up.
.9cf7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cf9		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9cfb		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9cfd		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cff		b0 02		bcs $9d03			bcs 	_URNotUnderflow
.9d01		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d03						_URNotUnderFlow:
.9d03		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d05		80 10		bra $9d17			bra 	SubStringMain
.9d07						Unary_Mid:
.9d07		fa		plx				plx
.9d08		38		sec				sec 								; two parameters
.9d09		20 4a 9d	jsr $9d4a			jsr 	SubstringInitial 			; set up.
.9d0c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d0e		f0 04		beq $9d14			beq 	_UMError
.9d10		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d12		80 03		bra $9d17			bra 	SubStringMain
.9d14						_UMError:
.9d14		4c b9 9f	jmp $9fb9			jmp 	ArgumentError
.9d17						SubStringMain:
.9d17		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d19		d5 78		cmp $78,x			cmp 	NSExponent,x
.9d1b		b0 27		bcs $9d44			bcs 	_SSMNull 					; if so, return an empty string.
.9d1d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d1f		f0 23		beq $9d44			beq 	_SSMNull 					; return empty string.
.9d21		18		clc				clc 								; add the offset +1 to the address and
.9d22		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9d24		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d26		85 36		sta $36				sta 	zTemp0
.9d28		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9d2a		69 00		adc #$00			adc 	#0
.9d2c		85 37		sta $37				sta 	zTemp0+1
.9d2e						_SSMNoCarry:
.9d2e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d30		20 be a7	jsr $a7be			jsr 	StringTempAllocate 			; allocate that many characters
.9d33		5a		phy				phy 								; save Y
.9d34		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d36						_SSMCopy:
.9d36		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d38		f0 08		beq $9d42			beq 	_SSMEString 				; no more to copy
.9d3a		20 f7 a7	jsr $a7f7			jsr 	StringTempWrite 			; and write it out.
.9d3d		c8		iny				iny
.9d3e		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9d40		d0 f4		bne $9d36			bne 	_SSMCopy
.9d42						_SSMEString:
.9d42		7a		ply				ply
.9d43						_SSMExit:
.9d43		60		rts				rts
.9d44						_SSMNull:
.9d44		a9 00		lda #$00			lda 	#0
.9d46		20 be a7	jsr $a7be			jsr 	StringTempAllocate
.9d49		60		rts				rts
.9d4a						SubstringInitial:
.9d4a		da		phx				phx 								; save initial stack position
.9d4b		08		php				php 								; save carry on stack indicating 2 parameters
.9d4c		20 84 9d	jsr $9d84			jsr 	EvaluateString 				; get a string
.9d4f		5a		phy				phy 								; calculate length to exponent.
.9d50		a0 ff		ldy #$ff			ldy 	#$FF
.9d52						_SIFindLength:
.9d52		c8		iny				iny
.9d53		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d55		d0 fb		bne $9d52			bne 	_SIFindLength
.9d57		98		tya				tya
.9d58		95 78		sta $78,x			sta 	NSExponent,x
.9d5a		7a		ply				ply
.9d5b		e8		inx				inx
.9d5c		20 f4 8e	jsr $8ef4			jsr 	CheckComma 					; comma next
.9d5f		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get next parameter
.9d62		28		plp				plp 								; is it the last parameter ?
.9d63		90 07		bcc $9d6c			bcc 	_SSIExit 					; if so, exit.
.9d65		e8		inx				inx
.9d66		20 f4 8e	jsr $8ef4			jsr 	CheckComma 					; comma next
.9d69		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get last parameter
.9d6c						_SSIExit:
.9d6c		fa		plx				plx
.9d6d		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket 			; check closing bracket
.9d70		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d71						EvaluateValue:
.9d71		48		pha				pha
.9d72		20 09 94	jsr $9409			jsr		EvaluateExpression 			; expression
.9d75		20 cc 96	jsr $96cc			jsr 	Dereference					; derefernce it
.9d78		68		pla				pla
.9d79		60		rts				rts
.9d7a						EvaluateNumber:
.9d7a		20 71 9d	jsr $9d71			jsr 	EvaluateValue 				; get a value
.9d7d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9d7f		29 10		and #$10			and 	#NSBIsString
.9d81		d0 13		bne $9d96			bne 	HelperTypeError
.9d83		60		rts				rts
.9d84						EvaluateString:
.9d84		20 71 9d	jsr $9d71			jsr 	EvaluateValue 				; get a value
.9d87		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9d89		29 10		and #$10			and 	#NSBIsString
.9d8b		f0 09		beq $9d96			beq 	HelperTypeError
.9d8d						CopyAddressToTemp0:
.9d8d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d8f		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9d91		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d93		85 37		sta $37				sta 	zTemp0+1
.9d95		60		rts				rts
.9d96						HelperTypeError:
.9d96		4c b4 9f	jmp $9fb4			jmp 	TypeError
.9d99						EvaluateInteger:
.9d99		20 7a 9d	jsr $9d7a			jsr 	EvaluateNumber
.9d9c		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9d9e		d0 09		bne $9da9			bne 	HelperValueError 			; if not, it's a float.
.9da0		60		rts				rts
.9da1						EvaluateUnsignedInteger:
.9da1		20 99 9d	jsr $9d99			jsr 	EvaluateInteger 			; check integer is +ve
.9da4		b5 50		lda $50,x			lda 	NSStatus,x
.9da6		30 01		bmi $9da9			bmi 	HelperValueError
.9da8		60		rts				rts
.9da9						HelperValueError:
.9da9		4c b9 9f	jmp $9fb9			jmp 	ArgumentError
.9dac						Evaluate16BitInteger:
.9dac		20 a1 9d	jsr $9da1			jsr	 	EvaluateUnsignedInteger		; get integer
.9daf		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9db1		15 68		ora $68,x			ora 	NSMantissa2,x
.9db3		d0 f4		bne $9da9			bne 	HelperValueError
.9db5		60		rts				rts
.9db6						Evaluate16BitIntegerSigned:
.9db6		20 99 9d	jsr $9d99			jsr	 	EvaluateInteger				; get integer
.9db9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9dbb		15 68		ora $68,x			ora 	NSMantissa2,x
.9dbd		d0 ea		bne $9da9			bne 	HelperValueError
.9dbf		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9dc1		10 03		bpl $9dc6			bpl 	_EISNotSigned
.9dc3		20 f5 9d	jsr $9df5			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9dc6						_EISNotSigned:
.9dc6		60		rts				rts
.9dc7						Evaluate8BitInteger:
.9dc7		20 a1 9d	jsr $9da1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9dca		d0 dd		bne $9da9			bne 	HelperValueError
.9dcc		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9dce		15 68		ora $68,x			ora 	NSMantissa2,x
.9dd0		15 60		ora $60,x			ora 	NSMantissa1,x
.9dd2		d0 d5		bne $9da9			bne 	HelperValueError
.9dd4		b5 58		lda $58,x			lda 	NSMantissa0,x
.9dd6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9dd7						Multiply8x8:
.9dd7		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9dd8		85 36		sta $36			  	sta 	zTemp0
.9dda		86 37		stx $37				stx 	zTemp0+1
.9ddc		a9 00		lda #$00			lda 	#0
.9dde		a2 08		ldx #$08			ldx 	#8
.9de0						_M88Loop:
.9de0		90 03		bcc $9de5			bcc 	_M88NoAdd
.9de2		18		clc				clc
.9de3		65 37		adc $37				adc 	zTemp0+1
.9de5						_M88NoAdd:
.9de5		6a		ror a				ror 	a
.9de6		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9de8		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9de9		d0 f5		bne $9de0			bne 	_M88Loop
.9deb		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9ded		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dee						NSMNegate:
.9dee		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9df0		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9df2		95 50		sta $50,x			sta 	NSStatus,x
.9df4		60		rts				rts
.9df5						NSMNegateMantissa:
.9df5		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9df6		a9 00		lda #$00			lda 	#0
.9df8		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9dfa		95 58		sta $58,x			sta 	NSMantissa0,x
.9dfc		a9 00		lda #$00			lda 	#0
.9dfe		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e00		95 60		sta $60,x			sta 	NSMantissa1,x
.9e02		a9 00		lda #$00			lda 	#0
.9e04		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e06		95 68		sta $68,x			sta 	NSMantissa2,x
.9e08		a9 00		lda #$00			lda 	#0
.9e0a		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9e0c		95 70		sta $70,x			sta 	NSMantissa3,x
.9e0e		60		rts				rts
.9e0f						NSMShiftUpTwo:
.9e0f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e11		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e13		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e15		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e17		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e19		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e1b		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e1d		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e1f		b5 78		lda $78,x			lda 	NSExponent,x
.9e21		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9e23		b5 50		lda $50,x			lda 	NSStatus,x
.9e25		95 52		sta $52,x			sta 	NSStatus+2,x
.9e27		60		rts				rts
.9e28						NSMSetZeroMantissaOnly:
.9e28		a9 00		lda #$00			lda 	#0
.9e2a		80 06		bra $9e32			bra 	NSMSetMantissa
.9e2c						NSMSetZero:
.9e2c		a9 00		lda #$00			lda 	#0
.9e2e						NSMSetByte:
.9e2e		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e30		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9e32						NSMSetMantissa:
.9e32		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9e34		74 60		stz $60,x			stz 	NSMantissa1,x
.9e36		74 68		stz $68,x			stz 	NSMantissa2,x
.9e38		74 70		stz $70,x			stz 	NSMantissa3,x
.9e3a		60		rts				rts
.9e3b						NSMShiftLeft:
.9e3b		18		clc				clc
.9e3c						NSMRotateLeft:
.9e3c		36 58		rol $58,x			rol 	NSMantissa0,x
.9e3e		36 60		rol $60,x			rol		NSMantissa1,x
.9e40		36 68		rol $68,x			rol		NSMantissa2,x
.9e42		36 70		rol $70,x			rol		NSMantissa3,x
.9e44		60		rts				rts
.9e45						NSMShiftRight:
.9e45		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9e47		76 68		ror $68,x			ror		NSMantissa2,x
.9e49		76 60		ror $60,x			ror		NSMantissa1,x
.9e4b		76 58		ror $58,x			ror		NSMantissa0,x
.9e4d		60		rts				rts
.9e4e						NSMIsZero:
.9e4e		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e50		15 68		ora $68,x			ora		NSMantissa2,x
.9e52		15 60		ora $60,x			ora		NSMantissa1,x
.9e54		15 58		ora $58,x			ora		NSMantissa0,x
.9e56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9e57						TickHandler:
.9e57		5a		phy				phy 								; need to preserve Y
.9e58		20 53 80	jsr $8053			jsr 	SNDUpdate 					; update sound
.9e5b		7a		ply				ply
.9e5c		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e5d						Assemble_ora:
.9e5d		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e60		01					.byte $01
.9e61						Assemble_and:
.9e61		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e64		21					.byte $21
.9e65						Assemble_eor:
.9e65		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e68		41					.byte $41
.9e69						Assemble_adc:
.9e69		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e6c		61					.byte $61
.9e6d						Assemble_sta:
.9e6d		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e70		81					.byte $81
.9e71						Assemble_lda:
.9e71		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e74		a1					.byte $a1
.9e75						Assemble_cmp:
.9e75		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e78		c1					.byte $c1
.9e79						Assemble_sbc:
.9e79		20 b6 80	jsr $80b6		jsr	AssembleGroup1
>9e7c		e1					.byte $e1
.9e7d						Assemble_asl:
.9e7d		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e80		02					.byte $02
>9e81		75					.byte $75
.9e82						Assemble_rol:
.9e82		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e85		22					.byte $22
>9e86		75					.byte $75
.9e87						Assemble_lsr:
.9e87		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e8a		42					.byte $42
>9e8b		75					.byte $75
.9e8c						Assemble_ror:
.9e8c		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e8f		62					.byte $62
>9e90		75					.byte $75
.9e91						Assemble_stx:
.9e91		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e94		82					.byte $82
>9e95		50					.byte $50
.9e96						Assemble_ldx:
.9e96		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e99		a2					.byte $a2
>9e9a		d0					.byte $d0
.9e9b						Assemble_dec:
.9e9b		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9e9e		c2					.byte $c2
>9e9f		55					.byte $55
.9ea0						Assemble_inc:
.9ea0		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ea3		e2					.byte $e2
>9ea4		55					.byte $55
.9ea5						Assemble_stz:
.9ea5		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ea8		60					.byte $60
>9ea9		44					.byte $44
.9eaa						Assemble_bit:
.9eaa		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ead		20					.byte $20
>9eae		55					.byte $55
.9eaf						Assemble_sty:
.9eaf		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9eb2		80					.byte $80
>9eb3		54					.byte $54
.9eb4						Assemble_ldy:
.9eb4		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9eb7		a0					.byte $a0
>9eb8		d5					.byte $d5
.9eb9						Assemble_cpy:
.9eb9		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ebc		c0					.byte $c0
>9ebd		d4					.byte $d4
.9ebe						Assemble_cpx:
.9ebe		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ec1		e0					.byte $e0
>9ec2		d0					.byte $d0
.9ec3						Assemble_tsb:
.9ec3		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ec6		00					.byte $00
>9ec7		50					.byte $50
.9ec8						Assemble_trb:
.9ec8		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ecb		10					.byte $10
>9ecc		50					.byte $50
.9ecd						Assemble_jsr:
.9ecd		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ed0		14					.byte $14
>9ed1		10					.byte $10
.9ed2						Assemble_jmp:
.9ed2		20 bd 80	jsr $80bd		jsr	AssembleGroup2
>9ed5		40					.byte $40
>9ed6		10					.byte $10
.9ed7						Assemble_bpl:
.9ed7		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9eda		10					.byte $10
.9edb						Assemble_bmi:
.9edb		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9ede		30					.byte $30
.9edf						Assemble_bvc:
.9edf		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9ee2		50					.byte $50
.9ee3						Assemble_bvs:
.9ee3		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9ee6		70					.byte $70
.9ee7						Assemble_bcc:
.9ee7		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9eea		90					.byte $90
.9eeb						Assemble_bcs:
.9eeb		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9eee		b0					.byte $b0
.9eef						Assemble_bne:
.9eef		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9ef2		d0					.byte $d0
.9ef3						Assemble_beq:
.9ef3		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9ef6		f0					.byte $f0
.9ef7						Assemble_bra:
.9ef7		20 0e 81	jsr $810e		jsr	AssembleGroup3
>9efa		80					.byte $80
.9efb						Assemble_brk:
.9efb		20 42 81	jsr $8142		jsr	AssembleGroup4
>9efe		00					.byte $00
.9eff						Assemble_php:
.9eff		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f02		08					.byte $08
.9f03						Assemble_clc:
.9f03		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f06		18					.byte $18
.9f07						Assemble_plp:
.9f07		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f0a		28					.byte $28
.9f0b						Assemble_sec:
.9f0b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f0e		38					.byte $38
.9f0f						Assemble_rti:
.9f0f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f12		40					.byte $40
.9f13						Assemble_pha:
.9f13		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f16		48					.byte $48
.9f17						Assemble_cli:
.9f17		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f1a		58					.byte $58
.9f1b						Assemble_phy:
.9f1b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f1e		5a					.byte $5a
.9f1f						Assemble_rts:
.9f1f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f22		60					.byte $60
.9f23						Assemble_pla:
.9f23		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f26		68					.byte $68
.9f27						Assemble_sei:
.9f27		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f2a		78					.byte $78
.9f2b						Assemble_ply:
.9f2b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f2e		7a					.byte $7a
.9f2f						Assemble_dey:
.9f2f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f32		88					.byte $88
.9f33						Assemble_txa:
.9f33		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f36		8a					.byte $8a
.9f37						Assemble_tya:
.9f37		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f3a		98					.byte $98
.9f3b						Assemble_txs:
.9f3b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f3e		9a					.byte $9a
.9f3f						Assemble_tay:
.9f3f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f42		a8					.byte $a8
.9f43						Assemble_tax:
.9f43		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f46		aa					.byte $aa
.9f47						Assemble_clv:
.9f47		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f4a		b8					.byte $b8
.9f4b						Assemble_tsx:
.9f4b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f4e		ba					.byte $ba
.9f4f						Assemble_iny:
.9f4f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f52		c8					.byte $c8
.9f53						Assemble_dex:
.9f53		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f56		ca					.byte $ca
.9f57						Assemble_cld:
.9f57		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f5a		d8					.byte $d8
.9f5b						Assemble_phx:
.9f5b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f5e		da					.byte $da
.9f5f						Assemble_stp:
.9f5f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f62		db					.byte $db
.9f63						Assemble_inx:
.9f63		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f66		e8					.byte $e8
.9f67						Assemble_nop:
.9f67		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f6a		ea					.byte $ea
.9f6b						Assemble_sed:
.9f6b		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f6e		f8					.byte $f8
.9f6f						Assemble_plx:
.9f6f		20 42 81	jsr $8142		jsr	AssembleGroup4
>9f72		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f73						DecimalScalarTable:
>9f73		66 66 66 66				.dword $66666666 ; 0.1
>9f77		de					.byte $de
>9f78		1f 85 eb 51				.dword $51eb851f ; 0.01
>9f7c		db					.byte $db
>9f7d		4c 37 89 41				.dword $4189374c ; 0.001
>9f81		d8					.byte $d8
>9f82		ac 8b db 68				.dword $68db8bac ; 0.0001
>9f86		d4					.byte $d4
>9f87		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f8b		d1					.byte $d1
>9f8c		83 de 1b 43				.dword $431bde83 ; 1e-06
>9f90		ce					.byte $ce
>9f91		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f95		ca					.byte $ca
>9f96		89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f9a		c7					.byte $c7
>9f9b		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f9f		c4					.byte $c4
>9fa0		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9fa4		c0					.byte $c0
>9fa5		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9fa9		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9faa						SyntaxError:
.9faa		a9 02		lda #$02		lda	#2
.9fac		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9faf						RangeError:
.9faf		a9 04		lda #$04		lda	#4
.9fb1		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9fb4						TypeError:
.9fb4		a9 05		lda #$05		lda	#5
.9fb6		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9fb9						ArgumentError:
.9fb9		a9 07		lda #$07		lda	#7
.9fbb		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9fbe						NotDoneError:
.9fbe		a9 0c		lda #$0c		lda	#12
.9fc0		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.9fc3						ErrorText:
>9fc3		42 72 65 61 6b 00			.text	"Break",0
>9fc9		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fd1		72 72 6f 72 00
>9fd6		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fde		20 62 79 20 7a 65 72 6f 00
>9fe7		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fef		61 6e 67 65 00
>9ff4		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ffc		6d 61 74 63 68 00
>a002		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a00a		65 6d 6f 72 79 00
>a010		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a018		61 72 67 75 6d 65 6e 74 00
>a021		53 74 6f 70 00				.text	"Stop",0
>a026		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a02e		6f 6f 20 6c 6f 6e 67 00
>a036		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a03e		6e 20 66 61 69 6c 65 64 00
>a047		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a04f		61 74 61 00
>a053		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a05b		65 6e 74 65 64 00
>a061		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a069		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a075		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a07d		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a08a		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a092		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a09f		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0a7		68 6f 75 74 20 57 68 69 6c 65 00
>a0b2		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0ba		68 6f 75 74 20 46 6f 72 00
>a0c3		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0cb		61 63 6b 20 66 75 6c 6c 00
>a0d4		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0dc		75 63 74 75 72 65 00
>a0e3		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0eb		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0f8		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a100		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a10e		41 72 72 61 79 20 73 69			.text	"Array size",0
>a116		7a 65 00
>a119		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a121		79 20 69 6e 64 65 78 00
>a129		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a131		74 20 64 65 63 6c 61 72 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a13c		41 6c 70 68 61 20 31 35			.text "Alpha 15 built 12-Dec-22. "
>a144		20 62 75 69 6c 74 20 31 32 2d 44 65 63 2d 32 32
>a154		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a156						RectangleCommand:
.a156		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a158		80 02		bra $a15c			bra 	ShapeDrawCmd
.a15a						CircleCommand:
.a15a		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a15c						ShapeDrawCmd:
.a15c		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a15f						ShapeDraw:
.a15f		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a162		4c da a1	jmp $a1da			jmp 	ExecuteGraphicCommand	 	; and complete
.a165						SpriteCommand:
.a165		a2 00		ldx #$00			ldx 	#0
.a167		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get image number.
.a16a		5a		phy				phy
.a16b		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a16d		a6 58		ldx $58				ldx 	NSMantissa0
.a16f		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a171		b0 0d		bcs $a180			bcs 	_SCRange
.a173		a0 ff		ldy #$ff			ldy 	#255
.a175		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a178		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a17a		7a		ply				ply
.a17b		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a17e		80 5a		bra $a1da			bra 	ExecuteGraphicCommand
.a180						_SCRange:
.a180		4c af 9f	jmp $9faf			jmp 	RangeError
.a183						ImageCommand:
.a183		a2 00		ldx #$00			ldx 	#0
.a185		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get image number.
.a188		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a18b						ImageRunDraw:
.a18b		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a18d		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a190		ad 64 06	lda $0664			lda 	gxDrawScale
.a193		0a		asl a				asl 	a
.a194		0a		asl a				asl 	a
.a195		0a		asl a				asl 	a
.a196		a8		tay				tay
.a197		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a199		a6 58		ldx $58				ldx 	NSMantissa0
.a19b		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a19e		60		rts				rts
.a19f						TextCommand:
.a19f		a2 00		ldx #$00			ldx 	#0
.a1a1		20 84 9d	jsr $9d84			jsr 	EvaluateString 				; get text
.a1a4		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a1a7						TextRunDraw:
.a1a7		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a1a9		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1ac		a0 00		ldy #$00			ldy 	#0
.a1ae						_IRDLoop:
.a1ae		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a1b0		85 37		sta $37				sta 	zTemp0+1
.a1b2		a5 58		lda $58				lda 	NSMantissa0
.a1b4		85 36		sta $36				sta 	zTemp0
.a1b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1b8		f0 13		beq $a1cd			beq 	_IRDExit
.a1ba		5a		phy				phy									; save string pos
.a1bb		48		pha				pha 								; save char
.a1bc		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a1bf		0a		asl a				asl 	a
.a1c0		0a		asl a				asl 	a
.a1c1		0a		asl a				asl 	a
.a1c2		a8		tay				tay
.a1c3		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a1c5		fa		plx				plx 								; char to draw
.a1c6		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1c9		7a		ply				ply 								; restore string pos
.a1ca		c8		iny				iny
.a1cb		90 e1		bcc $a1ae			bcc 	_IRDLoop 					; go back if no error.
.a1cd						_IRDExit:
.a1cd		60		rts				rts
.a1ce						PlotCommand:
.a1ce		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a1d0		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a1d3		80 05		bra $a1da			bra 	ExecuteGraphicCommand
.a1d5						LineCommand:
.a1d5		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a1d7		20 e6 a1	jsr $a1e6			jsr 	RunGraphicsCommand
.a1da						ExecuteGraphicCommand:
.a1da		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a1dd		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; draw it and exit
.a1e0		b0 01		bcs $a1e3			bcs 	_EGCError
.a1e2		60		rts				rts
.a1e3						_EGCError:
.a1e3		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.a1e6						RunGraphicsCommand:
.a1e6		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a1e9		68		pla				pla 								; pop handler address
.a1ea		fa		plx				plx
.a1eb		1a		inc a				inc 	a
.a1ec		d0 01		bne $a1ef			bne 	_RGINoCarry
.a1ee		e8		inx				inx
.a1ef						_RGINoCarry:
.a1ef		8d 62 06	sta $0662			sta 	GXHandler
.a1f2		8e 63 06	stx $0663			stx 	GXHandler+1
.a1f5						_RGICommandLoop:
.a1f5		b1 30		lda ($30),y			lda 	(codePtr),y
.a1f7		c8		iny				iny
.a1f8		c9 d2		cmp #$d2			cmp 	#KWD_TO						; is it TO x,y
.a1fa		f0 53		beq $a24f			beq 	_RGI_To
.a1fc		c9 bd		cmp #$bd			cmp 	#KWD_HERE 					; do it here.
.a1fe		f0 55		beq $a255			beq 	_RGI_Here
.a200		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a202		f0 3d		beq $a241			beq 	_RGI_Exit
.a204		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a206		f0 39		beq $a241			beq 	_RGI_Exit
.a208		c9 c5		cmp #$c5			cmp 	#KWD_OUTLINE 				; solid or outline
.a20a		f0 3e		beq $a24a			beq 	_RGI_Frame
.a20c		c9 ce		cmp #$ce			cmp 	#KWD_SOLID
.a20e		f0 33		beq $a243			beq 	_RGI_Solid
.a210		c9 ad		cmp #$ad			cmp 	#KWD_BY 					; by offset
.a212		f0 4b		beq $a25f			beq 	_RGI_By
.a214		c9 b9		cmp #$b9			cmp 	#KWD_FROM 					; from
.a216		f0 17		beq $a22f			beq 	_RGI_Move2
.a218		c9 b5		cmp #$b5			cmp 	#KWD_DIM 					; dim (set scale)
.a21a		f0 62		beq $a27e			beq 	_RGI_Dim
.a21c		c9 b3		cmp #$b3			cmp 	#KWD_COLOUR 				; colour or Color
.a21e		f0 74		beq $a294			beq 	_RGI_Colour
.a220		c9 b2		cmp #$b2			cmp 	#KWD_COLOR
.a222		f0 70		beq $a294			beq 	_RGI_Colour
.a224		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a227		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a229		d0 03		bne $a22e			bne 	_RGI_Move 					; move
.a22b		4c bc a2	jmp $a2bc			jmp		_RGI_SpriteInstructions
.a22e						_RGI_Move:
.a22e		88		dey				dey 								; unpick get.
.a22f						_RGI_Move2:
.a22f		20 e2 a2	jsr $a2e2			jsr 	GCGetCoordinatePair 		; move to here
.a232		20 09 a3	jsr $a309			jsr 	GCCopyPairToStore 			; save
.a235		5a		phy				phy
.a236		20 ff a2	jsr $a2ff			jsr 	GCLoadAXY 					; load in
.a239		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a23b		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a23e		7a		ply				ply
.a23f		80 b4		bra $a1f5			bra 	_RGICommandLoop 			; and go round
.a241						_RGI_Exit:
.a241		88		dey				dey 								; unpick : / EOL
.a242		60		rts				rts
.a243						_RGI_Solid:
.a243		a9 02		lda #$02			lda 	#2
.a245		8d 5e 06	sta $065e			sta 	gxFillSolid
.a248		80 ab		bra $a1f5			bra 	_RGICommandLoop
.a24a						_RGI_Frame:
.a24a		9c 5e 06	stz $065e			stz 	gxFillSolid
.a24d		80 a6		bra $a1f5			bra 	_RGICommandLoop
.a24f						_RGI_To:
.a24f		20 e2 a2	jsr $a2e2			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a252		20 09 a3	jsr $a309			jsr 	GCCopyPairToStore
.a255						_RGI_Here:
.a255		5a		phy				phy
.a256		20 ff a2	jsr $a2ff			jsr 	GCLoadAXY 					; load it into AXY
.a259		20 b9 a2	jsr $a2b9			jsr 	_RGICallHandler 			; go do whatever it is.
.a25c		7a		ply				ply
.a25d		80 96		bra $a1f5			bra 	_RGICommandLoop 			; and go round
.a25f						_RGI_By:
.a25f		20 ef a2	jsr $a2ef			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a262		18		clc				clc
.a263		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a265		6d 5f 06	adc $065f			adc 	gxxPos
.a268		8d 5f 06	sta $065f			sta 	gxXPos
.a26b		a5 61		lda $61				lda 	NSMantissa1+1
.a26d		6d 60 06	adc $0660			adc 	gxxPos+1
.a270		8d 60 06	sta $0660			sta 	gxXPos+1
.a273		a5 5a		lda $5a				lda 	NSMantissa0+2
.a275		18		clc				clc
.a276		6d 61 06	adc $0661			adc 	gxYPos
.a279		8d 61 06	sta $0661			sta 	gxYPos
.a27c		80 d7		bra $a255			bra 	_RGI_Here
.a27e						_RGI_Dim:
.a27e		a2 01		ldx #$01			ldx	 	#1
.a280		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger
.a283		a5 59		lda $59				lda 	NSMantissa0+1
.a285		c9 00		cmp #$00			cmp 	#0
.a287		f0 2d		beq $a2b6			beq 	_RGIRange
.a289		c9 09		cmp #$09			cmp 	#8+1
.a28b		b0 29		bcs $a2b6			bcs		_RGIRange
.a28d		3a		dec a				dec 	a
.a28e		8d 64 06	sta $0664			sta 	gxDrawScale
.a291		4c f5 a1	jmp $a1f5			jmp 	_RGICommandLoop
.a294						_RGI_Colour:
.a294		a2 01		ldx #$01			ldx 	#1 							; colour
.a296		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger
.a299		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a29b		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero
.a29e		b1 30		lda ($30),y			lda 	(codePtr),y
.a2a0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a2a2		d0 04		bne $a2a8			bne 	_RGICDefaultMode
.a2a4		c8		iny				iny
.a2a5		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger
.a2a8						_RGICDefaultMode:
.a2a8		5a		phy				phy
.a2a9		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a2ab		a6 59		ldx $59				ldx 	NSMantissa0+1
.a2ad		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a2af		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a2b2		7a		ply				ply
.a2b3		4c f5 a1	jmp $a1f5			jmp 	_RGICommandLoop 			; and go round
.a2b6						_RGIRange:
.a2b6		4c af 9f	jmp $9faf			jmp 	RangeError
.a2b9						_RGICallHandler:
.a2b9		6c 62 06	jmp ($0662)			jmp 	(GXHandler)
.a2bc						_RGI_SpriteInstructions:
.a2bc		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a2be		f0 07		beq $a2c7			beq 	_RGISpriteOff
.a2c0		c9 be		cmp #$be			cmp 	#KWD_IMAGE
.a2c2		f0 13		beq $a2d7			beq 	_RGISetImage
.a2c4		4c 2e a2	jmp $a22e			jmp 	_RGI_Move
.a2c7						_RGISpriteOff:
.a2c7		5a		phy				phy
.a2c8		a0 01		ldy #$01			ldy 	#1
.a2ca		a2 00		ldx #$00			ldx 	#0
.a2cc						_RGIDoCommandLoop:
.a2cc		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a2ce		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a2d1		7a		ply				ply
.a2d2		b0 e2		bcs $a2b6			bcs 	_RGIRange
.a2d4		4c f5 a1	jmp $a1f5			jmp 	_RGICommandLoop
.a2d7						_RGISetImage:
.a2d7		a2 01		ldx #$01			ldx 	#1
.a2d9		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger
.a2dc		5a		phy				phy
.a2dd		aa		tax				tax
.a2de		a0 00		ldy #$00			ldy 	#0
.a2e0		80 ea		bra $a2cc			bra 	_RGIDoCommandLoop
.a2e2						GCGetCoordinatePair:
.a2e2		a2 01		ldx #$01			ldx 	#1
.a2e4		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.a2e7		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a2ea		e8		inx				inx
.a2eb		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.a2ee		60		rts				rts
.a2ef						GCSignedCoordinatePair:
.a2ef		a2 01		ldx #$01			ldx 	#1
.a2f1		20 b6 9d	jsr $9db6			jsr 	Evaluate16BitIntegerSigned
.a2f4		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a2f7		e8		inx				inx
.a2f8		20 b6 9d	jsr $9db6			jsr 	Evaluate16BitIntegerSigned
.a2fb		60		rts				rts
.a2fc						_GCCPRange:
.a2fc		4c af 9f	jmp $9faf			jmp 	RangeError
.a2ff						GCLoadAXY:
.a2ff		ad 60 06	lda $0660			lda 	gxXPos+1
.a302		ae 5f 06	ldx $065f			ldx 	gxXPos
.a305		ac 61 06	ldy $0661			ldy 	gxYPos
.a308		60		rts				rts
.a309						GCCopyPairToStore:
.a309		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a30b		8d 5f 06	sta $065f			sta 	gxXPos
.a30e		a5 61		lda $61				lda 	NSMantissa1+1
.a310		8d 60 06	sta $0660			sta 	gxXPos+1
.a313		a5 5a		lda $5a				lda 	NSMantissa0+2
.a315		8d 61 06	sta $0661			sta 	gxYPos
.a318		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a319						BitmapCtrl:
.a319		b1 30		lda ($30),y			lda 	(codePtr),y
.a31b		c8		iny				iny
.a31c		a2 01		ldx #$01			ldx 	#1
.a31e		c9 c4		cmp #$c4			cmp 	#KWD_ON
.a320		f0 11		beq $a333			beq 	BitmapSwitch
.a322		ca		dex				dex
.a323		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a325		f0 0c		beq $a333			beq 	BitmapSwitch
.a327		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get the colour
.a32a		5a		phy				phy
.a32b		aa		tax				tax
.a32c		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a32e		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a331		7a		ply				ply
.a332		60		rts				rts
.a333						BitmapSwitch:
.a333		5a		phy				phy
.a334		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a336		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a338		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a33b		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a33d		a0 00		ldy #$00			ldy 	#0
.a33f		a2 ff		ldx #$ff			ldx 	#$FF
.a341		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a344		9c 5e 06	stz $065e			stz 	gxFillSolid
.a347		9c 5f 06	stz $065f			stz 	gxXPos
.a34a		9c 60 06	stz $0660			stz 	gxXPos+1
.a34d		9c 61 06	stz $0661			stz 	gxYPos
.a350		9c 64 06	stz $0664			stz 	gxDrawScale
.a353		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a355		a2 00		ldx #$00			ldx 	#0
.a357		a0 00		ldy #$00			ldy 	#0
.a359		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a35c		7a		ply				ply
.a35d		60		rts				rts
.a35e						SpritesCtrl:
.a35e		b1 30		lda ($30),y			lda 	(codePtr),y
.a360		c8		iny				iny
.a361		a2 01		ldx #$01			ldx 	#1
.a363		c9 c4		cmp #$c4			cmp 	#KWD_ON
.a365		f0 08		beq $a36f			beq 	SpriteSwitch
.a367		ca		dex				dex
.a368		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a36a		f0 03		beq $a36f			beq 	SpriteSwitch
.a36c		4c aa 9f	jmp $9faa			jmp 	SyntaxError
.a36f						SpriteSwitch:
.a36f		5a		phy				phy
.a370		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a372		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a374		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a377		7a		ply				ply
.a378		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a379						GfxCommand:
.a379		a2 00		ldx #$00			ldx 	#0
.a37b		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; command
.a37e		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a381		e8		inx				inx
.a382		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; X
.a385		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a388		e8		inx				inx
.a389		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; Y
.a38c		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a38e		4a		lsr a				lsr 	a
.a38f		d0 12		bne $a3a3			bne 	_GfxError
.a391		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a393		b0 0e		bcs $a3a3			bcs 	_GfxError 					; bit 7 should have been zero
.a395		5a		phy				phy 								; save pos
.a396		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a398		a6 59		ldx $59				ldx 	NSMantissa0+1
.a39a		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a39c		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a39f		b0 02		bcs $a3a3			bcs 	_GfxError
.a3a1		7a		ply				ply 								; restore pos and exit.
.a3a2		60		rts				rts
.a3a3						_GfxError:
.a3a3		4c af 9f	jmp $9faf			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a3a6						UnaryHit:
.a3a6		fa		plx				plx
.a3a7		a9 36		lda #$36			lda 	#zTemp0
.a3a9		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a3ac		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a3af		e8		inx				inx
.a3b0		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a3b3		20 ec 8e	jsr $8eec			jsr		CheckRightBracket
.a3b6		ca		dex				dex 								; fix back up again.
.a3b7		da		phx				phx 								; save X/Y
.a3b8		5a		phy				phy
.a3b9		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a3bb		b5 58		lda $58,x			lda 	NSMantissa0,x
.a3bd		aa		tax				tax
.a3be		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a3c0		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; calculate result
.a3c3		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a3c4		7a		ply				ply 								; restore XY
.a3c5		fa		plx				plx
.a3c6		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte 					; return the hit result
.a3c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a3ca						PaletteCommand:
.a3ca		a2 00		ldx #$00			ldx 	#0
.a3cc		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; colour
.a3cf		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a3d2		e8		inx				inx
.a3d3		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; r
.a3d6		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a3d9		e8		inx				inx
.a3da		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; g
.a3dd		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a3e0		e8		inx				inx
.a3e1		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; b
.a3e4		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a3e6		85 36		sta $36				sta 	zTemp0
.a3e8		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a3ea		85 37		sta $37				sta 	zTemp0+1
.a3ec		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a3ee		26 37		rol $37				rol	 	zTemp0+1
.a3f0		06 36		asl $36				asl 	zTemp0
.a3f2		26 37		rol $37				rol	 	zTemp0+1
.a3f4		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a3f6		85 01		sta $01				sta 	1
.a3f8		5a		phy				phy
.a3f9		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a3fb		92 36		sta ($36)			sta 	(zTemp0)
.a3fd		a0 01		ldy #$01			ldy 	#1
.a3ff		a5 5a		lda $5a				lda 	NSMantissa0+2
.a401		91 36		sta ($36),y			sta 	(zTemp0),y
.a403		a5 59		lda $59				lda 	NSMantissa0+1
.a405		c8		iny				iny
.a406		91 36		sta ($36),y			sta 	(zTemp0),y
.a408		7a		ply				ply
.a409		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a40a						UnaryEvent:
.a40a		fa		plx				plx
.a40b		20 b8 a4	jsr $a4b8			jsr 	TimerToStackX 				; timer in +0
.a40e		e8		inx				inx  								; put reference into +1
.a40f		20 53 98	jsr $9853			jsr 	EvaluateTerm
.a412		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a414		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a416		d0 4c		bne $a464			bne 	_UEType
.a418		e8		inx				inx 								; put the step in +2
.a419		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a41c		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger
.a41f		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.a422		ca		dex				dex
.a423		ca		dex				dex
.a424		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a426		85 36		sta $36				sta 	zTemp0
.a428		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a42a		85 37		sta $37				sta 	zTemp0+1
.a42c		5a		phy				phy
.a42d		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a42f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a431		30 2d		bmi $a460			bmi 	_UEFalse 					; exit if signed.
.a433		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a435		b5 58		lda $58,x			lda 	NSMantissa0,x
.a437		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a439		c8		iny				iny
.a43a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a43c		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a43e		c8		iny				iny
.a43f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a441		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a443		90 1b		bcc $a460			bcc 	_UEFalse 					; no, return FALSE.
.a445		18		clc				clc
.a446		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a448		b5 58		lda $58,x			lda 	NSMantissa0,x
.a44a		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a44c		91 36		sta ($36),y			sta 	(zTemp0),y
.a44e		c8		iny				iny
.a44f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a451		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a453		91 36		sta ($36),y			sta 	(zTemp0),y
.a455		c8		iny				iny
.a456		b5 68		lda $68,x			lda 	NSMantissa2,x
.a458		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a45a		91 36		sta ($36),y			sta 	(zTemp0),y
.a45c		7a		ply				ply
.a45d		4c 72 8f	jmp $8f72			jmp 	ReturnTrue
.a460						_UEFalse:
.a460		7a		ply				ply 								; restore Y
.a461		4c 7d 8f	jmp $8f7d			jmp 	ReturnFalse 				; and return False
.a464						_UEType:
.a464		4c b4 9f	jmp $9fb4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a467						UnaryJoyX:
.a467		18		clc				clc
.a468		80 01		bra $a46b			bra 	JoyMain
.a46a						UnaryJoyY:
.a46a		38		sec				sec
.a46b						JoyMain:
.a46b		fa		plx				plx 								; get pos
.a46c		08		php				php 								; save carry (set for Y)
.a46d		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a470		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.a473		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a476		28		plp				plp
.a477		90 02		bcc $a47b			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a479		4a		lsr a				lsr 	a
.a47a		4a		lsr a				lsr 	a
.a47b						_JMNoShift:
.a47b		4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a47c		b0 0a		bcs $a488			bcs 	_JMIsRight
.a47e		4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a47f		b0 04		bcs $a485			bcs 	_JMIsLeft
.a481		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; zero result
.a484		60		rts				rts
.a485						_JMIsLeft:
.a485		4c 72 8f	jmp $8f72			jmp 	ReturnTrue
.a488						_JMIsRight:
.a488		a9 01		lda #$01			lda 	#1
.a48a		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.a48d		60		rts				rts
.a48e						UnaryJoyB:
.a48e		fa		plx				plx 								; get pos
.a48f		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a492		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.a495		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a498		4a		lsr a				lsr 	a
.a499		4a		lsr a				lsr 	a
.a49a		4a		lsr a				lsr 	a
.a49b		4a		lsr a				lsr 	a
.a49c		29 01		and #$01			and 	#1
.a49e		20 2e 9e	jsr $9e2e			jsr 	NSMSetByte
.a4a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/load.asm

.a4a2						LoadCommand:
.a4a2		20 3b 8a	jsr $8a3b			jsr 	NewProgram
.a4a5		20 25 83	jsr $8325			jsr 	BackLoadProgram
.a4a8		4c e4 83	jmp $83e4			jmp 	WarmStart
.a4ab						GoCommand:
.a4ab		20 3b 8a	jsr $8a3b			jsr 	NewProgram
.a4ae		20 25 83	jsr $8325			jsr 	BackLoadProgram
.a4b1		4c 7c 8b	jmp $8b7c			jmp 	CommandRun

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a4b4						UnaryTimer:
.a4b4		fa		plx				plx
.a4b5		20 ec 8e	jsr $8eec			jsr 	CheckRightBracket
.a4b8						TimerToStackX:
.a4b8		20 2c 9e	jsr $9e2c			jsr 	NSMSetZero 					; zero result
.a4bb		64 01		stz $01				stz 	1 							; access I/O
.a4bd		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a4c0		95 58		sta $58,x			sta 	NSMantissa0,x
.a4c2		ad 5a d6	lda $d65a			lda 	$D65A
.a4c5		95 60		sta $60,x			sta 	NSMantissa1,x
.a4c7		ad 5b d6	lda $d65b			lda 	$D65B
.a4ca		95 68		sta $68,x			sta 	NSMantissa2,x
.a4cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a4cd						MemoryDeleteLine:
.a4cd		20 ec a4	jsr $a4ec			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a4d0		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a4d2		a8		tay				tay
.a4d3						_MDDLLoop:
.a4d3		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a4d5		92 30		sta ($30)			sta 	(codePtr)
.a4d7		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a4d9		c5 3a		cmp $3a				cmp 	zTemp2
.a4db		d0 07		bne $a4e4			bne 	_MDLDLNext
.a4dd		a5 31		lda $31				lda 	codePtr+1
.a4df		c5 3b		cmp $3b				cmp 	zTemp2+1
.a4e1		d0 01		bne $a4e4			bne 	_MDLDLNext
.a4e3						_MDDLExit:
.a4e3		60		rts				rts
.a4e4						_MDLDLNext:
.a4e4		e6 30		inc $30				inc 	codePtr						; next byte
.a4e6		d0 eb		bne $a4d3			bne 	_MDDLLoop
.a4e8		e6 31		inc $31				inc 	codePtr+1
.a4ea		80 e7		bra $a4d3			bra 	_MDDLLoop
.a4ec						IMemoryFindEnd:
.a4ec		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a4ee		85 3a		sta $3a				sta 	0+zTemp2
.a4f0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a4f2		85 3b		sta $3b				sta 	1+zTemp2
.a4f4						_MDLFELoop:
.a4f4		b2 3a		lda ($3a)			lda 	(zTemp2)
.a4f6		f0 0b		beq $a503			beq 	_MDLFEExit
.a4f8		18		clc				clc
.a4f9		65 3a		adc $3a				adc 	zTemp2
.a4fb		85 3a		sta $3a				sta 	zTemp2
.a4fd		90 f5		bcc $a4f4			bcc 	_MDLFELoop
.a4ff		e6 3b		inc $3b				inc 	zTemp2+1
.a501		80 f1		bra $a4f4			bra 	_MDLFELoop
.a503						_MDLFEExit:
.a503		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a504						MemoryInsertLine:
.a504		08		php				php
.a505		20 ec a4	jsr $a4ec			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a508		a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a50a		1a		inc a				inc 	a
.a50b		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a50d		b0 36		bcs $a545			bcs 	_MDLIError
.a50f		28		plp				plp
.a510		90 08		bcc $a51a			bcc 	_MDLIFound
.a512		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a514		85 30		sta $30				sta 	codePtr
.a516		a5 3b		lda $3b				lda 	zTemp2+1
.a518		85 31		sta $31				sta 	codePtr+1
.a51a						_MDLIFound:
.a51a		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a51d		a8		tay				tay
.a51e						_MDLIInsert:
.a51e		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a520		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a522		a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a524		c5 3a		cmp $3a				cmp 	zTemp2
.a526		d0 06		bne $a52e			bne 	_MDLINext
.a528		a5 31		lda $31				lda 	codePtr+1
.a52a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a52c		f0 0a		beq $a538			beq 	_MDLIHaveSpace
.a52e						_MDLINext:
.a52e		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a530		d0 02		bne $a534			bne 	_MDLINoBorrow
.a532		c6 3b		dec $3b				dec 	zTemp2+1
.a534						_MDLINoBorrow:
.a534		c6 3a		dec $3a				dec 	zTemp2
.a536		80 e6		bra $a51e			bra 	_MDLIInsert
.a538						_MDLIHaveSpace:
.a538		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a53b		88		dey				dey 								; from offset-1 to 0
.a53c						_MDLICopy:
.a53c		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a53f		91 30		sta ($30),y			sta 	(codePtr),y
.a541		88		dey				dey
.a542		10 f8		bpl $a53c			bpl 	_MDLICopy
.a544		60		rts				rts
.a545						_MDLIError:
.a545		a9 06		lda #$06		lda	#6
.a547		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.a54a						MDLAppendLine:
.a54a		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a54c		85 36		sta $36				sta 	zTemp0
.a54e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a550		85 38		sta $38				sta 	0+zTemp1
.a552		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a554		85 39		sta $39				sta 	1+zTemp1
.a556		b2 38		lda ($38)			lda 	(zTemp1)
.a558		d0 0a		bne $a564			bne 	_MDLANoInitialise
.a55a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a55c		8d 65 06	sta $0665			sta 	0+AppendPointer
.a55f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a561		8d 66 06	sta $0666			sta 	1+AppendPointer
.a564						_MDLANoInitialise:
.a564		18		clc				clc
.a565		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a568		85 38		sta $38				sta 	zTemp1
.a56a		72 36		adc ($36)			adc 	(zTemp0)
.a56c		8d 65 06	sta $0665			sta 	AppendPointer
.a56f		ad 66 06	lda $0666			lda 	AppendPointer+1
.a572		85 39		sta $39				sta 	zTemp1+1
.a574		69 00		adc #$00			adc 	#0
.a576		8d 66 06	sta $0666			sta 	AppendPointer+1
.a579		a0 00		ldy #$00			ldy 	#0
.a57b						_MDLACopy:
.a57b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a57d		91 38		sta ($38),y			sta 	(zTemp1),y
.a57f		c8		iny				iny
.a580		98		tya				tya
.a581		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a583		d0 f6		bne $a57b			bne 	_MDLACopy
.a585		a9 00		lda #$00			lda 	#0 							; end of program.
.a587		91 38		sta ($38),y			sta 	(zTemp1),y
.a589		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a58a						MemoryNew:
.a58a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a58c		85 30		sta $30				sta 	codePtr
.a58e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a590		85 31		sta $31				sta 	codePtr+1
.a592		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a594		92 30		sta ($30)			sta 	(codePtr)
.a596		60		rts				rts
.a597						MemoryInline:
.a597		98		tya				tya 								; put address into stack,x
.a598		18		clc				clc  								; get the offset, add codePtr
.a599		65 30		adc $30				adc 	codePtr
.a59b		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a59d		a5 31		lda $31				lda 	codePtr+1
.a59f		69 00		adc #$00			adc 	#0
.a5a1		95 60		sta $60,x			sta 	NSMantissa1,x
.a5a3		74 68		stz $68,x			stz 	NSMantissa2,x
.a5a5		74 70		stz $70,x			stz 	NSMantissa3,x
.a5a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a5a8						MemorySearch:
.a5a8		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a5aa		86 37		stx $37				stx 	zTemp0+1
.a5ac		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5ae		85 30		sta $30				sta 	codePtr
.a5b0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5b2		85 31		sta $31				sta 	codePtr+1
.a5b4						_MTAXLoop:
.a5b4		b2 30		lda ($30)			lda 	(codePtr)
.a5b6		18		clc				clc
.a5b7		f0 21		beq $a5da			beq 	_MTAXExit 					; reached end, exit with CC.
.a5b9		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a5bb		b1 30		lda ($30),y			lda 	(codePtr),y
.a5bd		38		sec				sec
.a5be		e5 36		sbc $36				sbc 	zTemp0
.a5c0		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a5c2		c8		iny				iny 								; do the MSB
.a5c3		b1 30		lda ($30),y			lda 	(codePtr),y
.a5c5		e5 37		sbc $37				sbc 	zTemp0+1
.a5c7		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a5c9		f0 0f		beq $a5da			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a5cb		b0 0d		bcs $a5da			bcs 	_MTAXExit 					; current < required exit
.a5cd		18		clc				clc
.a5ce		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a5d0		65 30		adc $30				adc 	codePtr
.a5d2		85 30		sta $30				sta 	codePtr
.a5d4		90 02		bcc $a5d8			bcc 	_CREExit
.a5d6		e6 31		inc $31				inc 	codePtr+1 					; carry
.a5d8						_CREExit:
.a5d8		80 da		bra $a5b4			bra 	_MTAXLoop
.a5da						_MTAXExit:
.a5da		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.a5db						PingCommand:
.a5db		5a		phy				phy 								; save pos
.a5dc		a9 01		lda #$01			lda 	#1 						; push channel.
.a5de		48		pha				pha
.a5df		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.a5e1		a2 03		ldx #$03			ldx 	#3 						; length
.a5e3		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.a5e5		80 24		bra $a60b			bra 	SoundEffectCommand
.a5e7						ZapCommand:
.a5e7		5a		phy				phy 								; save pos
.a5e8		a9 01		lda #$01			lda 	#1 						; push channel.
.a5ea		48		pha				pha
.a5eb		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.a5ed		a2 05		ldx #$05			ldx 	#5 						; length
.a5ef		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.a5f1		80 18		bra $a60b			bra 	SoundEffectCommand
.a5f3						ShootCommand:
.a5f3		5a		phy				phy 								; save pos
.a5f4		a9 03		lda #$03			lda 	#3 						; push channel.
.a5f6		48		pha				pha
.a5f7		a9 20		lda #$20			lda 	#32 						; pitch LSB
.a5f9		a2 02		ldx #$02			ldx 	#2 						; length
.a5fb		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.a5fd		80 0c		bra $a60b			bra 	SoundEffectCommand
.a5ff						Explode:
.a5ff		5a		phy				phy 								; save pos
.a600		a9 03		lda #$03			lda 	#3 						; push channel.
.a602		48		pha				pha
.a603		a9 50		lda #$50			lda 	#80 						; pitch LSB
.a605		a2 05		ldx #$05			ldx 	#5 						; length
.a607		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.a609		80 00		bra $a60b			bra 	SoundEffectCommand
.a60b						SoundEffectCommand:
.a60b		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.a60e		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.a611		a9 0f		lda #$0f			lda 	#15
.a613		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.a616		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.a619		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.a61c		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.a61f		68		pla				pla
.a620		09 10		ora #$10			ora 	#$10  						; execute command $11
.a622		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.a624		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.a626		20 49 80	jsr $8049			jsr 	SNDCommand
.a629		7a		ply				ply
.a62a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.a62b						UnaryPlaying:
.a62b		fa		plx				plx
.a62c		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; get channel #
.a62f		48		pha				pha
.a630		20 ec 8e	jsr $8eec			jsr		CheckRightBracket
.a633		68		pla				pla
.a634		c9 04		cmp #$04			cmp 	#4
.a636		b0 0c		bcs $a644			bcs 	_UPNotPlaying
.a638		09 20		ora #$20			ora 	#$20 						; query playing ?
.a63a		20 49 80	jsr $8049			jsr 	SNDCommand
.a63d		c9 00		cmp #$00			cmp 	#0
.a63f		f0 03		beq $a644			beq 	_UPNotPlaying
.a641		4c 72 8f	jmp $8f72			jmp 	ReturnTrue
.a644						_UPNotPlaying:
.a644		4c 7d 8f	jmp $8f7d			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.a647						SoundCommand:
.a647		b1 30		lda ($30),y			lda 	(codePtr),y
.a649		c9 c3		cmp #$c3			cmp 	#KWD_OFF 					; SOUND OFF ?
.a64b		d0 09		bne $a656			bne 	_SNDMain
.a64d		c8		iny				iny 								; skip OFF
.a64e		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.a650		5a		phy				phy
.a651		20 49 80	jsr $8049			jsr 	SNDCommand
.a654		7a		ply				ply
.a655		60		rts				rts
.a656						_SNDMain:
.a656		a2 00		ldx #$00			ldx 	#0
.a658		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; channel
.a65b		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.a65d		b0 4b		bcs $a6aa			bcs 	_SndError
.a65f		e8		inx				inx 								; do the rest in slot 1.
.a660		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a663		20 ac 9d	jsr $9dac			jsr 	Evaluate16BitInteger 		; Pitch
.a666		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.a668		c9 10		cmp #$10			cmp 	#16
.a66a		b0 3e		bcs $a6aa			bcs 	_SndError
.a66c		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.a66f		b5 58		lda $58,x			lda 	NSMantissa0,x
.a671		8d 67 06	sta $0667			sta 	SoundCommandBlock
.a674		20 f4 8e	jsr $8ef4			jsr 	CheckComma
.a677		20 c7 9d	jsr $9dc7			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.a67a		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.a67d		a9 0f		lda #$0f			lda 	#15
.a67f		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.a682		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.a685		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.a688		b1 30		lda ($30),y			lda 	(codePtr),y
.a68a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a68c		d0 0e		bne $a69c			bne 	_SNDPlay
.a68e		c8		iny				iny
.a68f		20 b6 9d	jsr $9db6			jsr 	Evaluate16BitIntegerSigned 	; Slide
.a692		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.a694		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.a697		b5 60		lda $60,x			lda 	NSMantissa1,x
.a699		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.a69c						_SNDPlay:
.a69c		5a		phy				phy
.a69d		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.a69f		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.a6a1		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.a6a3		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.a6a5		20 49 80	jsr $8049			jsr 	SNDCommand
.a6a8		7a		ply				ply
.a6a9		60		rts				rts
.a6aa						_SndError:
.a6aa		4c af 9f	jmp $9faf			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a6ad						StackPushByte:
.a6ad		48		pha				pha 								; save byte on stack
.a6ae		a5 34		lda $34				lda 	BasicStack 					; decrement basic stack pointer
.a6b0		d0 08		bne $a6ba			bne 	_SPBNoBorrow
.a6b2		c6 35		dec $35				dec 	BasicStack+1 				; borrow
.a6b4		a5 35		lda $35				lda 	BasicStack+1 				; check range.
.a6b6		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6b8		90 06		bcc $a6c0			bcc 	_SPBMemory
.a6ba						_SPBNoBorrow:
.a6ba		c6 34		dec $34				dec 	BasicStack
.a6bc		68		pla				pla 								; get back and write
.a6bd		92 34		sta ($34)			sta 	(BasicStack)
.a6bf		60		rts				rts
.a6c0						_SPBMemory:
.a6c0		a9 12		lda #$12		lda	#18
.a6c2		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.a6c5						StackPopByte:
.a6c5		b2 34		lda ($34)			lda 	(BasicStack) 				; bump the stack pointer.
.a6c7		e6 34		inc $34				inc 	BasicStack
.a6c9		d0 02		bne $a6cd			bne 	_SPBNoCarry
.a6cb		e6 35		inc $35				inc 	BasicStack+1
.a6cd						_SPBNoCarry:
.a6cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a6ce						StackOpen:
.a6ce		48		pha				pha 								; save frame byte
.a6cf		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a6d1		0a		asl a				asl 	a 							; claim twice this for storage
.a6d2		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a6d4		38		sec				sec 								; so basically subtracting from
.a6d5		65 34		adc $34				adc 	basicStack 	 				; basicStack
.a6d7		85 34		sta $34				sta 	basicStack
.a6d9		b0 09		bcs $a6e4			bcs 	_SONoBorrow
>a6db		db						.byte 	$DB 						; causes a break in the emulator
.a6dc		c6 35		dec $35				dec 	basicStack+1
.a6de		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a6e0		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6e2		90 04		bcc $a6e8			bcc 	_SOMemory
.a6e4						_SONoBorrow:
.a6e4		68		pla				pla 								; get marker back and write at TOS
.a6e5		92 34		sta ($34)			sta 	(basicStack)
.a6e7		60		rts				rts
.a6e8						_SOMemory:
.a6e8		a9 12		lda #$12		lda	#18
.a6ea		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.a6ed						StackClose:
.a6ed		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6ef		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6f1		0a		asl a				asl 	a 							; claim twice this.
.a6f2		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6f4		85 34		sta $34				sta 	basicStack
.a6f6		90 02		bcc $a6fa			bcc 	_SCExit
.a6f8		e6 35		inc $35				inc 	basicStack+1
.a6fa						_SCExit:
.a6fa		60		rts				rts
.a6fb						StackCheckFrame:
.a6fb		48		pha				pha
.a6fc						_StackRemoveLocals:
.a6fc		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a6fe		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.a700		b0 05		bcs $a707			bcs 	_SCNoLocal
.a702		20 ea 89	jsr $89ea			jsr 	LocalPopValue 				; restore the local value
.a705		80 f5		bra $a6fc			bra 	_StackRemoveLocals 			; gr round again
.a707						_SCNoLocal:
.a707		68		pla				pla 								; get the frame check.
.a708		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a70a		29 f0		and #$f0			and 	#$F0 						; check type bits
.a70c		d0 01		bne $a70f			bne 	_SCFError 					; different, we have structures mixed up
.a70e		60		rts				rts
.a70f						_SCFError:
.a70f		8a		txa				txa 								; report error X
.a710		4c 05 8f	jmp $8f05			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a713						STKSaveCodePosition:
.a713		5a		phy				phy
.a714		98		tya				tya 								; save Y
.a715		a0 05		ldy #$05			ldy 	#5
.a717		91 34		sta ($34),y			sta 	(basicStack),y
.a719		88		dey				dey 								; save Code Pointer
.a71a						_STKSaveLoop:
.a71a		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a71d		91 34		sta ($34),y			sta 	(basicStack),y
.a71f		88		dey				dey
.a720		d0 f8		bne $a71a			bne 	_STKSaveLoop
.a722		7a		ply				ply
.a723		60		rts				rts
.a724						STKLoadCodePosition:
.a724		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a726						_STKLoadLoop:
.a726		b1 34		lda ($34),y			lda 	(basicStack),y
.a728		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a72b		c8		iny				iny
.a72c		c0 05		cpy #$05			cpy 	#5
.a72e		d0 f6		bne $a726			bne 	_STKLoadLoop
.a730		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a732		a8		tay				tay
.a733		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a734						StackReset:
.a734		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a736		85 34		sta $34				sta 	0+basicStack
.a738		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a73a		85 35		sta $35				sta 	1+basicStack
.a73c		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a73e		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a740		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a741						StringConcrete:
.a741		5a		phy				phy 								; save position on stack
.a742		20 3f 9a	jsr $9a3f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a745		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a747		85 38		sta $38				sta 	zTemp1
.a749		b5 60		lda $60,x			lda 	NSMantissa1,x
.a74b		85 39		sta $39				sta 	zTemp1+1
.a74d		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a74f						_SALength:
.a74f		c8		iny				iny
.a750		b1 38		lda ($38),y			lda 	(zTemp1),y
.a752		d0 fb		bne $a74f			bne 	_SALength
.a754		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.a756		b0 3d		bcs $a795			bcs 	_SALengthError
.a758		98		tya				tya 				 				; length of the new string
.a759		18		clc				clc
.a75a		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a75c		90 02		bcc $a760			bcc 	_SAHaveLength
.a75e		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a760						_SAHaveLength:
.a760		48		pha				pha 								; save length.
.a761		38		sec				sec
.a762		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a764		6d 0e 04	adc $040e			adc 	StringMemory
.a767		8d 0e 04	sta $040e			sta 	StringMemory
.a76a		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a76c		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.a76e		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a770		6d 0f 04	adc $040f			adc 	StringMemory+1
.a773		8d 0f 04	sta $040f			sta 	StringMemory+1
.a776		85 3b		sta $3b				sta 	zTemp2+1
.a778		95 60		sta $60,x			sta 	NSMantissa1,x
.a77a		68		pla				pla 								; save length-3 (chars allowed) in first byte
.a77b		38		sec				sec
.a77c		e9 03		sbc #$03			sbc 	#3
.a77e		92 3a		sta ($3a)			sta 	(zTemp2)
.a780		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a782		a0 01		ldy #$01			ldy 	#1
.a784		91 3a		sta ($3a),y			sta 	(zTemp2),y
.a786						_SACopyNewString:
.a786		a0 00		ldy #$00			ldy 	#0
.a788						_SACopyNSLoop:
.a788		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a78a		c8		iny				iny 								; write two on in string storage
.a78b		c8		iny				iny
.a78c		91 3a		sta ($3a),y			sta 	(zTemp2),y
.a78e		88		dey				dey 								; this makes it one one.
.a78f		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a791		d0 f5		bne $a788			bne 	_SACopyNSLoop
.a793		7a		ply				ply
.a794		60		rts				rts
.a795						_SALengthError:
.a795		a9 09		lda #$09		lda	#9
.a797		4c 05 8f	jmp $8f05		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a79a						StringSystemInitialise:
.a79a		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a79c		8d 0e 04	sta $040e			sta 	0+StringMemory
.a79f		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a7a1		8d 0f 04	sta $040f			sta 	1+StringMemory
.a7a4		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a7a7		60		rts				rts
.a7a8						StringSpaceInitialise:
.a7a8		20 3f 9a	jsr $9a3f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a7ab		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a7ad		8d 10 04	sta $0410			sta 	StringInitialised
.a7b0		ad 0e 04	lda $040e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a7b3		8d 11 04	sta $0411			sta 	StringTempPointer 			; so temporary string space is allocated below that.
.a7b6		ad 0f 04	lda $040f			lda 	StringMemory+1
.a7b9		3a		dec a				dec 	a
.a7ba		8d 12 04	sta $0412			sta 	StringTempPointer+1
.a7bd		60		rts				rts
.a7be						StringTempAllocate:
.a7be		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a7c0		b0 30		bcs $a7f2			bcs 	_STALength
.a7c2		2c 10 04	bit $0410			bit 	StringInitialised 			; already initialised
.a7c5		30 05		bmi $a7cc			bmi 	_STAAllocate
.a7c7		48		pha				pha 								; save value to subtract.
.a7c8		20 a8 a7	jsr $a7a8			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a7cb		68		pla				pla 								; restore it
.a7cc						_STAAllocate:
.a7cc		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a7ce		18		clc				clc  								; deliberate allows one more
.a7cf		6d 11 04	adc $0411			adc 	StringTempPointer 			; subtract from temp pointer
.a7d2		8d 11 04	sta $0411			sta 	StringTempPointer
.a7d5		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.a7d7		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a7d9		ad 12 04	lda $0412			lda 	StringTempPointer+1
.a7dc		69 ff		adc #$ff			adc 	#$FF
.a7de		8d 12 04	sta $0412			sta 	StringTempPointer+1
.a7e1		85 3d		sta $3d				sta 	zsTemp+1
.a7e3		95 60		sta $60,x			sta 	NSMantissa1,x
.a7e5		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.a7e7		74 70		stz $70,x			stz 	NSMantissa3,x
.a7e9		a9 10		lda #$10			lda 	#NSTString
.a7eb		95 50		sta $50,x			sta 	NSStatus,x
.a7ed		a9 00		lda #$00			lda 	#0 							; clear the target string
.a7ef		92 3c		sta ($3c)			sta 	(zsTemp)
.a7f1		60		rts				rts
.a7f2						_STALength:
.a7f2		a9 09		lda #$09		lda	#9
.a7f4		4c 05 8f	jmp $8f05		jmp	ErrorHandler
.a7f7						StringTempWrite:
.a7f7		48		pha				pha
.a7f8		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.a7fa		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.a7fc		d0 02		bne $a800			bne 	_STWNoCarry
.a7fe		e6 3d		inc $3d				inc 	zsTemp+1
.a800						_STWNoCarry:
.a800		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a802		92 3c		sta ($3c)			sta 	(zsTemp)
.a804		68		pla				pla
.a805		60		rts				rts

;******  Return to file: _basic.asm

.a806						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONWhite = 1
=2						CONRed = 2
=3						CONCyan = 3
=4						CONPurple = 4
=5						CONGreen = 5
=6						CONBlue = 6
=7						CONYellow = 7
=8						CONOrange = 8
=9						CONBrown = 9
=10						CONYellowGreen = 10
=11						CONRosa = 11
=12						CONBlueGreen = 12
=13						CONLightBlue = 13
=14						CONPink = 14
=15						CONLightGreen = 15
=7						CONForeground = CONYellow
=6						CONBackground = CONBlue
=5						CLICommandLine = CONGreen
=0						CLIFComment = CONBlack
=7						CLIBComment = CONYellow
=9						CLILineNumber = CONBrown
=3						CLIToken = CONCyan
=13						CLIConstant = CONLightBlue
=7						CLIIdentifier = CONYellow
=10						CLIPunctuation = CONYellowGreen
=1						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 90 a1	jsr $a190			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 4d a1	jsr $a14d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackspace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					EXTClearScreenCode:
.c14d	a14d	a9 02		lda #$02			lda 	#2 							; select text page
.c14f	a14f	85 01		sta $01				sta 	1
.c151	a151	a9 20		lda #$20			lda		#32 						; fill with space
.c153	a153	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c156	a156	e6 01		inc $01				inc 	1 							; select colour page
.c158	a158	ad 6f 06	lda $066f			lda 	EXTTextColour
.c15b	a15b	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c15e	a15e	80 22		bra $a182			bra 	EXTHomeCursor
.c160	a160					_EXTCSFill:
.c160	a160	aa		tax				tax
.c161	a161	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c163	a163	85 40		sta $40				sta 	EXTAddress
.c165	a165	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c167	a167	85 41		sta $41				sta 	EXTAddress+1
.c169	a169					_EXTCSFill1:
.c169	a169	a0 00		ldy #$00			ldy 	#0
.c16b	a16b	8a		txa				txa
.c16c	a16c					_EXTCSFill2:
.c16c	a16c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c16e	a16e	c8		iny				iny
.c16f	a16f	d0 fb		bne $a16c			bne 	_EXTCSFill2
.c171	a171	e6 41		inc $41				inc 	EXTAddress+1
.c173	a173	a5 41		lda $41				lda 	EXTAddress+1
.c175	a175	c9 d2		cmp #$d2			cmp 	#$D2
.c177	a177	d0 f0		bne $a169			bne 	_EXTCSFill1
.c179	a179	8a		txa				txa
.c17a	a17a					_EXTCSFill3:
.c17a	a17a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c17c	a17c	c8		iny				iny
.c17d	a17d	c0 c0		cpy #$c0			cpy 	#$C0
.c17f	a17f	d0 f9		bne $a17a			bne 	_EXTCSFill3
.c181	a181	60		rts				rts
.c182	a182					EXTHomeCursor:
.c182	a182	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c185	a185	9c 6e 06	stz $066e			stz 	EXTColumn
.c188	a188	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c18a	a18a	85 40		sta $40				sta 	EXTAddress
.c18c	a18c	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c18e	a18e	85 41		sta $41				sta 	EXTAddress+1
.c190	a190					EXTSetHardwareCursor:
.c190	a190	64 01		stz $01				stz 	1 							; I/O Page zero
.c192	a192	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c194	a194	8d 10 d0	sta $d010			sta 	$D010
.c197	a197	a9 b1		lda #$b1			lda 	#$B1
.c199	a199	8d 12 d0	sta $d012			sta 	$D012
.c19c	a19c	ad 6e 06	lda $066e			lda 	EXTColumn
.c19f	a19f	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1a2	a1a2	9c 15 d0	stz $d015			stz 	$D015
.c1a5	a1a5	ad 6d 06	lda $066d			lda 	EXTRow
.c1a8	a1a8	8d 16 d0	sta $d016			sta 	$D016
.c1ab	a1ab	9c 17 d0	stz $d017			stz 	$D017
.c1ae	a1ae	60		rts				rts
.c1af	a1af					Export_EXTInputLine:
.c1af	a1af	48		pha				pha
.c1b0	a1b0	da		phx				phx
.c1b1	a1b1	5a		phy				phy
.c1b2	a1b2	a5 01		lda $01				lda 	1 							; save I/O page
.c1b4	a1b4	48		pha				pha
.c1b5	a1b5					_EILLoop:
.c1b5	a1b5	20 cd a2	jsr $a2cd			jsr 	PagedInputSingleCharacter
.c1b8	a1b8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1ba	a1ba	f0 44		beq $a200			beq 	_EILExit
.c1bc	a1bc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1be	a1be	f0 2a		beq $a1ea			beq 	_EILDelete
.c1c0	a1c0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1c2	a1c2	f0 1c		beq $a1e0			beq 	_EILBackspace
.c1c4	a1c4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1c6	a1c6	90 12		bcc $a1da			bcc 	_EILPrintLoop
.c1c8	a1c8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ca	a1ca	b0 0e		bcs $a1da			bcs 	_EILPrintLoop
.c1cc	a1cc	48		pha				pha 								; save character
.c1cd	a1cd	a9 02		lda #$02			lda 	#2  						; insert a space
.c1cf	a1cf	85 01		sta $01				sta 	1
.c1d1	a1d1	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in text screen
.c1d4	a1d4	e6 01		inc $01				inc 	1
.c1d6	a1d6	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in colour screen
.c1d9	a1d9	68		pla				pla 								; get character back.
.c1da	a1da					_EILPrintLoop:
.c1da	a1da	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1dd	a1dd	80 d6		bra $a1b5			bra 	_EILLoop
.c1df	a1df	60		rts				rts
.c1e0	a1e0					_EILBackspace:
.c1e0	a1e0	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c1e3	a1e3	f0 d0		beq $a1b5			beq 	_EILLoop
.c1e5	a1e5	a9 02		lda #$02			lda 	#2 							; move cursor left
.c1e7	a1e7	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1ea	a1ea					_EILDelete
.c1ea	a1ea	a9 02		lda #$02			lda 	#2 							; text block
.c1ec	a1ec	85 01		sta $01				sta 	1
.c1ee	a1ee	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c1f0	a1f0	20 2d a2	jsr $a22d			jsr 	EXTILDelete
.c1f3	a1f3	e6 01		inc $01				inc 	1 							; colour block
.c1f5	a1f5	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c1f8	a1f8	88		dey				dey
.c1f9	a1f9	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c1fb	a1fb	20 2d a2	jsr $a22d			jsr 	EXTILDelete 				; backspace attribute
.c1fe	a1fe	80 b5		bra $a1b5			bra 	_EILLoop 					; and go round.
.c200	a200					_EILExit:
.c200	a200	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c202	a202	85 01		sta $01				sta 	1
.c204	a204	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c206	a206					_EILScrapeLine:
.c206	a206	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c208	a208	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c20b	a20b	c8		iny				iny
.c20c	a20c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c20f	a20f	d0 f5		bne $a206			bne 	_EILScrapeLine
.c211	a211					_EILTrimSpaces:
.c211	a211	88		dey				dey
.c212	a212	f0 08		beq $a21c			beq 	_EILEndTrim
.c214	a214	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c217	a217	c9 20		cmp #$20			cmp 	#' '
.c219	a219	f0 f6		beq $a211			beq 	_EILTrimSpaces
.c21b	a21b	c8		iny				iny 								; trim after non space character.
.c21c	a21c					_EILEndTrim:
.c21c	a21c	a9 00		lda #$00			lda 	#0 							; trim here.
.c21e	a21e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c221	a221	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c223	a223	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c226	a226	68		pla				pla 								; reset I/O page
.c227	a227	85 01		sta $01				sta 	1
.c229	a229	7a		ply				ply
.c22a	a22a	fa		plx				plx
.c22b	a22b	68		pla				pla
.c22c	a22c	60		rts				rts
.c22d	a22d					EXTILDelete:
.c22d	a22d	48		pha				pha 								; save the new character
.c22e	a22e	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c231	a231					_EXTDLoop:
.c231	a231	c8		iny				iny 								; copy one byte down.
.c232	a232	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c234	a234	88		dey				dey
.c235	a235	91 40		sta ($40),y			sta 	(EXTAddress),y
.c237	a237	c8		iny				iny 								; do till end of line.
.c238	a238	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c23b	a23b	90 f4		bcc $a231			bcc 	_EXTDLoop
.c23d	a23d	88		dey				dey 	 							; write in last slot.
.c23e	a23e	68		pla				pla
.c23f	a23f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c241	a241	60		rts				rts
.c242	a242					EXTILInsert:
.c242	a242	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c245	a245					_EXTILoop:
.c245	a245	88		dey				dey 								; back one
.c246	a246	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c249	a249	f0 08		beq $a253			beq 	_EXTIExit
.c24b	a24b	88		dey				dey 								; copy one byte up.
.c24c	a24c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c24e	a24e	c8		iny				iny
.c24f	a24f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c251	a251	80 f2		bra $a245			bra 	_EXTILoop
.c253	a253					_EXTIExit:
.c253	a253	60		rts				rts
.c254	a254					EXTScrollFill:
.c254	a254	aa		tax				tax									; save value to fill with
.c255	a255	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c257	a257	48		pha				pha
.c258	a258	a5 37		lda $37				lda 	zTemp0+1
.c25a	a25a	48		pha				pha
.c25b	a25b	a5 38		lda $38				lda 	zTemp1
.c25d	a25d	48		pha				pha
.c25e	a25e	a5 39		lda $39				lda 	zTemp1+1
.c260	a260	48		pha				pha
.c261	a261	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c263	a263	85 37		sta $37				sta 	zTemp0+1
.c265	a265	85 39		sta $39				sta 	zTemp1+1
.c267	a267	64 36		stz $36				stz 	zTemp0
.c269	a269	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c26c	a26c	85 38		sta $38				sta 	zTemp1
.c26e	a26e	a0 00		ldy #$00			ldy 	#0
.c270	a270					_EXSFCopy1:
.c270	a270	b1 38		lda ($38),y			lda 	(zTemp1),y
.c272	a272	91 36		sta ($36),y			sta 	(zTemp0),y
.c274	a274	c8		iny				iny
.c275	a275	d0 f9		bne $a270			bne 	_EXSFCopy1
.c277	a277	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c279	a279	e6 39		inc $39				inc 	zTemp1+1
.c27b	a27b	a5 39		lda $39				lda 	zTemp1+1
.c27d	a27d	c9 d3		cmp #$d3			cmp 	#$D3
.c27f	a27f	d0 ef		bne $a270			bne 	_EXSFCopy1
.c281	a281	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c284	a284	8a		txa				txa
.c285	a285					_EXSFFill1:
.c285	a285	88		dey				dey
.c286	a286	91 40		sta ($40),y			sta 	(EXTAddress),y
.c288	a288	c0 00		cpy #$00			cpy 	#0
.c28a	a28a	10 f9		bpl $a285			bpl 	_EXSFFill1
.c28c	a28c	68		pla				pla
.c28d	a28d	85 39		sta $39				sta 	zTemp1+1
.c28f	a28f	68		pla				pla
.c290	a290	85 38		sta $38				sta 	zTemp1
.c292	a292	68		pla				pla
.c293	a293	85 37		sta $37				sta 	zTemp0+1
.c295	a295	68		pla				pla
.c296	a296	85 36		sta $36				sta 	zTemp0
.c298	a298	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c299	a299					Export_EXTInitialise:
.c299	a299	64 01		stz $01				stz 	1 							; Access I/O page 0
.c29b	a29b	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c29e	a29e	9c 08 d0	stz $d008			stz 	$D008
.c2a1	a2a1	9c 09 d0	stz $d009			stz 	$D009
.c2a4	a2a4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2a6	a2a6	8d 58 d6	sta $d658			sta 	$D658
.c2a9	a2a9	a9 52		lda #$52			lda 	#$52
.c2ab	a2ab	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2ae	a2ae	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2b0	a2b0	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2b3	a2b3	a9 3c		lda #$3c			lda 	#60
.c2b5	a2b5	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2b8	a2b8	20 4d a1	jsr $a14d			jsr 	EXTClearScreenCode 			; clear the screen
.c2bb	a2bb					_EXMoveDown:
.c2bb	a2bb	a9 0d		lda #$0d			lda 	#13
.c2bd	a2bd	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2c0	a2c0	ad 6d 06	lda $066d			lda 	EXTRow
.c2c3	a2c3	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2c5	a2c5	d0 f4		bne $a2bb			bne 	_EXMoveDown
.c2c7	a2c7	20 3d a3	jsr $a33d			jsr 	EXTShowHeader
.c2ca	a2ca	64 01		stz $01				stz 	1
.c2cc	a2cc	60		rts				rts
.c2cd	a2cd					Export_EXTInputSingleCharacter:
.c2cd	a2cd					PagedInputSingleCharacter:
.c2cd	a2cd	da		phx				phx
.c2ce	a2ce	5a		phy				phy
.c2cf	a2cf					_EISCWait:
.c2cf	a2cf	a5 01		lda $01				lda 	1 							; save I/O 0
.c2d1	a2d1	48		pha				pha
.c2d2	a2d2	64 01		stz $01				stz 	1 							; access I/O Page 0
.c2d4	a2d4	38		sec				sec 								; calculate timer - LastTick
.c2d5	a2d5	ad 59 d6	lda $d659			lda 	$D659
.c2d8	a2d8	aa		tax				tax 								; saving timer in X
.c2d9	a2d9	ed 5c 06	sbc $065c			sbc 	LastTick
.c2dc	a2dc	c9 03		cmp #$03			cmp 	#3
.c2de	a2de	90 06		bcc $a2e6			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.c2e0	a2e0	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.c2e3	a2e3	20 26 bb	jsr $bb26			jsr 	PagedSNDUpdate 							; go do the code.
.c2e6	a2e6					_NoFireTick:
.c2e6	a2e6	68		pla				pla 								; restore I/O 0
.c2e7	a2e7	85 01		sta $01				sta 	1
.c2e9	a2e9	20 e4 ff	jsr $ffe4			jsr 	$FFE4 						; get a key
.c2ec	a2ec	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c2ee	a2ee	f0 df		beq $a2cf			beq 	_EISCWait
.c2f0	a2f0	7a		ply				ply
.c2f1	a2f1	fa		plx				plx
.c2f2	a2f2	60		rts				rts
.c2f3	a2f3					Export_EXTBreakCheck:
.c2f3	a2f3	4c e1 ff	jmp $ffe1			jmp		$FFE1
=3						KP_Z_ROW = 3
=$04						KP_Z_COL = $04
=4						KP_X_ROW = 4
=$04						KP_X_COL = $04
=8						KP_K_ROW = 8
=$04						KP_K_COL = $04
=7						KP_M_ROW = 7
=$04						KP_M_COL = $04
=9						KP_L_ROW = 9
=$08						KP_L_COL = $08
.c2f6	a2f6					Export_EXTReadController:
.c2f6	a2f6	da		phx				phx
.c2f7	a2f7	a2 00		ldx #$00		ldx 	#0
.c2f9	a2f9	a9 04		lda #$04			lda 	#KP_X_ROW
.c2fb	a2fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c2fe	a2fe	29 04		and #$04			and 	#KP_X_COL
.c300	a300	f0 04		beq $a306			beq 	_NoSet1
.c302	a302	8a		txa				txa
.c303	a303	09 01		ora #$01			ora 	#1
.c305	a305	aa		tax				tax
.c306	a306					_NoSet1:
.c306	a306	a9 03		lda #$03			lda 	#KP_Z_ROW
.c308	a308	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c30b	a30b	29 04		and #$04			and 	#KP_Z_COL
.c30d	a30d	f0 04		beq $a313			beq 	_NoSet1
.c30f	a30f	8a		txa				txa
.c310	a310	09 02		ora #$02			ora 	#2
.c312	a312	aa		tax				tax
.c313	a313					_NoSet1:
.c313	a313	a9 07		lda #$07			lda 	#KP_M_ROW
.c315	a315	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c318	a318	29 04		and #$04			and 	#KP_M_COL
.c31a	a31a	f0 04		beq $a320			beq 	_NoSet1
.c31c	a31c	8a		txa				txa
.c31d	a31d	09 04		ora #$04			ora 	#4
.c31f	a31f	aa		tax				tax
.c320	a320					_NoSet1:
.c320	a320	a9 08		lda #$08			lda 	#KP_K_ROW
.c322	a322	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c325	a325	29 04		and #$04			and 	#KP_K_COL
.c327	a327	f0 04		beq $a32d			beq 	_NoSet1
.c329	a329	8a		txa				txa
.c32a	a32a	09 08		ora #$08			ora 	#8
.c32c	a32c	aa		tax				tax
.c32d	a32d					_NoSet1:
.c32d	a32d	a9 09		lda #$09			lda 	#KP_L_ROW
.c32f	a32f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c332	a332	29 08		and #$08			and 	#KP_L_COL
.c334	a334	f0 04		beq $a33a			beq 	_NoSet1
.c336	a336	8a		txa				txa
.c337	a337	09 10		ora #$10			ora 	#16
.c339	a339	aa		tax				tax
.c33a	a33a					_NoSet1:
.c33a	a33a	8a		txa				txa
.c33b	a33b	fa		plx				plx
.c33c	a33c	60		rts				rts
.c33d	a33d					EXTShowHeader:
.c33d	a33d	a5 01		lda $01				lda 	1
.c33f	a33f	48		pha				pha
.c340	a340	a9 02		lda #$02			lda 	#2
.c342	a342	a2 42		ldx #$42			ldx 	#(Header_Chars & $FF)
.c344	a344	a0 a5		ldy #$a5			ldy 	#(Header_Chars >> 8)
.c346	a346	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c349	a349	a9 03		lda #$03			lda 	#3
.c34b	a34b	a2 aa		ldx #$aa			ldx 	#(Header_Attrs & $FF)
.c34d	a34d	a0 a3		ldy #$a3			ldy 	#(Header_Attrs >> 8)
.c34f	a34f	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c352	a352	64 01		stz $01				stz 	1
.c354	a354	a2 3f		ldx #$3f			ldx 	#16*4-1
.c356	a356					_EXTCopyLUT:
.c356	a356	bd 72 a7	lda $a772,x			lda 	Header_Palette,x
.c359	a359	9d 00 d8	sta $d800,x			sta 	$D800,x
.c35c	a35c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c35f	a35f	ca		dex				dex
.c360	a360	10 f4		bpl $a356			bpl 	_EXTCopyLUT
.c362	a362	68		pla				pla
.c363	a363	60		rts				rts
.c364	a364					_ESHCopyBlock:
.c364	a364	85 01		sta $01				sta 	1
.c366	a366	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c368	a368	84 37		sty $37				sty 	zTemp0+1
.c36a	a36a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c36c	a36c	85 38		sta $38				sta 	0+zTemp1
.c36e	a36e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c370	a370	85 39		sta $39				sta 	1+zTemp1
.c372	a372					_ESHCopyLoop:
.c372	a372	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c374	a374	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c376	a376	f0 1b		beq $a393			beq 	_ESHUnpack
.c378	a378	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c37a	a37a	a9 01		lda #$01			lda 	#1 							; source add 1
.c37c	a37c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c37e	a37e					_ESHNext:
.c37e	a37e	18		clc				clc 								; zTemp0 + A
.c37f	a37f	65 36		adc $36				adc 	zTemp0
.c381	a381	85 36		sta $36				sta 	zTemp0
.c383	a383	90 02		bcc $a387			bcc 	_ESHNoCarry
.c385	a385	e6 37		inc $37				inc 	zTemp0+1
.c387	a387					_ESHNoCarry:
.c387	a387	98		tya				tya 								; zTemp1 + Y
.c388	a388	18		clc				clc
.c389	a389	65 38		adc $38				adc 	zTemp1
.c38b	a38b	85 38		sta $38				sta 	zTemp1
.c38d	a38d	90 e3		bcc $a372			bcc 	_ESHCopyLoop
.c38f	a38f	e6 39		inc $39				inc 	zTemp1+1
.c391	a391	80 df		bra $a372			bra 	_ESHCopyLoop
.c393	a393					_ESHUnpack:
.c393	a393	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c395	a395	b1 36		lda ($36),y			lda 	(zTemp0),y
.c397	a397	aa		tax				tax
.c398	a398	88		dey				dey 								; byte into A
.c399	a399	b1 36		lda ($36),y			lda 	(zTemp0),y
.c39b	a39b	f0 0c		beq $a3a9			beq 	_ESHExit 					; exit if zero.
.c39d	a39d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c39f	a39f					_ESHCopyOut:
.c39f	a39f	91 38		sta ($38),y			sta 	(zTemp1),y
.c3a1	a3a1	c8		iny				iny
.c3a2	a3a2	ca		dex				dex
.c3a3	a3a3	d0 fa		bne $a39f			bne 	_ESHCopyOut
.c3a5	a3a5	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c3a7	a3a7	80 d5		bra $a37e			bra 	_ESHNext
.c3a9	a3a9					_ESHExit:
.c3a9	a3a9	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c3aa	a3aa					Header_attrs:
>c3aa	a3aa	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c3b2	a3b2	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3c2	a3c2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3d2	a3d2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3e2	a3e2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3f2	a3f2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c402	a402	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c412	a412	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c422	a422	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c432	a432	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c442	a442	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c452	a452	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c462	a462	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c472	a472	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c482	a482	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c492	a492	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c4a2	a4a2	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c4b2	a4b2	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4c2	a4c2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4d2	a4d2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4e2	a4e2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4f2	a4f2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c502	a502	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c512	a512	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c522	a522	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c532	a532	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c542	a542					Header_chars:
>c542	a542	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c54a	a54a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c55a	a55a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c56a	a56a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c57a	a57a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c58a	a58a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c59a	a59a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c5aa	a5aa	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c5ba	a5ba	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5ca	a5ca	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5da	a5da	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ea	a5ea	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5fa	a5fa	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c60a	a60a	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c61a	a61a	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c62a	a62a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c63a	a63a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c64a	a64a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c65a	a65a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c66a	a66a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c67a	a67a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c68a	a68a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c69a	a69a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c6aa	a6aa	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c6ba	a6ba	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6ca	a6ca	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6da	a6da	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ea	a6ea	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6fa	a6fa	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c70a	a70a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c71a	a71a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c72a	a72a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c73a	a73a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c74a	a74a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c75a	a75a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c76a	a76a	9d ff 96 18 96 a3 ff 00
.c772	a772					Header_Palette:
>c772	a772	00 00 00 00				.dword $000000
>c776	a776	66 66 66 00				.dword $666666
>c77a	a77a	aa 00 00 00				.dword $0000aa
>c77e	a77e	00 aa 00 00				.dword $00aa00
>c782	a782	ea 41 c0 00				.dword $c041ea
>c786	a786	00 48 87 00				.dword $874800
>c78a	a78a	00 9c ff 00				.dword $ff9c00
>c78e	a78e	ff db 57 00				.dword $57dbff
>c792	a792	28 3f 3f 00				.dword $3f3f28
>c796	a796	8a aa aa 00				.dword $aaaa8a
>c79a	a79a	ff 55 55 00				.dword $5555ff
>c79e	a79e	55 ff 55 00				.dword $55ff55
>c7a2	a7a2	ed 8d ff 00				.dword $ff8ded
>c7a6	a7a6	00 00 ff 00				.dword $ff0000
>c7aa	a7aa	55 ff ff 00				.dword $ffff55
>c7ae	a7ae	ff ff ff 00				.dword $ffffff
>c7b2	a7b2	ff ff ff 00				.dword $ffffff
>c7b6	a7b6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c7ba	a7ba					GRVectorTable:
>c7ba	a7ba	09 aa					.word	GXInitialise             ; $00 Initialise
>c7bc	a7bc	23 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c7be	a7be	6b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7c0	a7c0	bb a9					.word	GXClearBitmap            ; $03 Clear
>c7c2	a7c2	fa ab					.word	GXSetColourMode          ; $04 Colour
>c7c4	a7c4	c2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7c6	a7c6	0a ae					.word	GXSpriteHandler          ; $06 DrawSprite
>c7c8	a7c8	7b ae					.word	GXSelect                 ; $07 SpriteUse
>c7ca	a7ca	a4 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7cc	a7cc	2b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ce	a7ce	6d a8					.word	GRUndefined              ; $0a
>c7d0	a7d0	6d a8					.word	GRUndefined              ; $0b
>c7d2	a7d2	6d a8					.word	GRUndefined              ; $0c
>c7d4	a7d4	6d a8					.word	GRUndefined              ; $0d
>c7d6	a7d6	6d a8					.word	GRUndefined              ; $0e
>c7d8	a7d8	6d a8					.word	GRUndefined              ; $0f
>c7da	a7da	6d a8					.word	GRUndefined              ; $10
>c7dc	a7dc	6d a8					.word	GRUndefined              ; $11
>c7de	a7de	6d a8					.word	GRUndefined              ; $12
>c7e0	a7e0	6d a8					.word	GRUndefined              ; $13
>c7e2	a7e2	6d a8					.word	GRUndefined              ; $14
>c7e4	a7e4	6d a8					.word	GRUndefined              ; $15
>c7e6	a7e6	6d a8					.word	GRUndefined              ; $16
>c7e8	a7e8	6d a8					.word	GRUndefined              ; $17
>c7ea	a7ea	6d a8					.word	GRUndefined              ; $18
>c7ec	a7ec	6d a8					.word	GRUndefined              ; $19
>c7ee	a7ee	6d a8					.word	GRUndefined              ; $1a
>c7f0	a7f0	6d a8					.word	GRUndefined              ; $1b
>c7f2	a7f2	6d a8					.word	GRUndefined              ; $1c
>c7f4	a7f4	6d a8					.word	GRUndefined              ; $1d
>c7f6	a7f6	6d a8					.word	GRUndefined              ; $1e
>c7f8	a7f8	6d a8					.word	GRUndefined              ; $1f
>c7fa	a7fa	6b a8					.word	GXMove                   ; $20 Move
>c7fc	a7fc	c8 aa					.word	GXLine                   ; $21 Line
>c7fe	a7fe	43 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c800	a800	40 ac					.word	GXFillRectangle          ; $23 FillRect
>c802	a802	72 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c804	a804	6e a8					.word	GXFillCircle             ; $25 FillCircle
>c806	a806	6d a8					.word	GRUndefined              ; $26
>c808	a808	6d a8					.word	GRUndefined              ; $27
>c80a	a80a	28 ac					.word	GXPlotPoint              ; $28 Plot
>c80c	a80c	3a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gsOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						GXSpriteOffsetBase:
>0690								.fill 	2
.0692						GXSpriteLow:
>0692								.fill 	64
.06d2						GXSpriteHigh:
>06d2								.fill 	64
.c80e	a80e					Export_GXGraphicDraw:
.c80e	a80e	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c810	a810	b0 06		bcs $a818			bcs 	_GDCoordinate
.c812	a812	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c814	a814	84 37		sty $37				sty 	gxzTemp0+1
.c816	a816	80 4b		bra $a863			bra 	_GDExecuteA 				; and execute
.c818	a818					_GDCoordinate:
.c818	a818	48		pha				pha 								; save AXY
.c819	a819	da		phx				phx
.c81a	a81a	5a		phy				phy
.c81b	a81b	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c81d	a81d					_GDCopy1:
.c81d	a81d	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c820	a820	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c823	a823	ca		dex				dex
.c824	a824	10 f7		bpl $a81d			bpl 	_GDCopy1
.c826	a826	68		pla				pla 								; update Y
.c827	a827	8d 74 06	sta $0674			sta 	gxCurrentY
.c82a	a82a	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c82d	a82d	68		pla				pla
.c82e	a82e	8d 72 06	sta $0672			sta 	gxCurrentX
.c831	a831	68		pla				pla 								; get A (command+X.1) back
.c832	a832	48		pha				pha
.c833	a833	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c835	a835	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c838	a838	68		pla				pla 								; get command back
.c839	a839	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c83b	a83b	48		pha				pha 								; push back.
.c83c	a83c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c83e	a83e	f0 17		beq $a857			beq 	_GDCopyToWorkArea
.c840	a840	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c843	a843	f0 07		beq $a84c			beq 	_GDCheckY
.c845	a845	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c848	a848	c9 40		cmp #$40			cmp 	#64
.c84a	a84a	b0 08		bcs $a854			bcs 	_GDError1
.c84c	a84c					_GDCheckY:
.c84c	a84c	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c84f	a84f	cd 86 06	cmp $0686			cmp 	gxHeight
.c852	a852	90 03		bcc $a857			bcc 	_GDCopyToWorkArea
.c854	a854					_GDError1:
.c854	a854	68		pla				pla
.c855	a855					_GDError2:
.c855	a855	38		sec				sec
.c856	a856	60		rts				rts
.c857	a857					_GDCopyToWorkArea:
.c857	a857	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c859	a859					_GDCopy2:
.c859	a859	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c85c	a85c	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c85f	a85f	ca		dex				dex
.c860	a860	10 f7		bpl $a859			bpl 	_GDCopy2
.c862	a862	68		pla				pla 								; get command
.c863	a863					_GDExecuteA:
.c863	a863	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c865	a865	b0 ee		bcs $a855			bcs 	_GDError2
.c867	a867	aa		tax				tax
.c868	a868	7c ba a7	jmp ($a7ba,x)			jmp 	(GRVectorTable,x)
.c86b	a86b					GXMove:
.c86b	a86b	18		clc				clc
.c86c	a86c	60		rts				rts
.c86d	a86d					GRUndefined:
>c86d	a86d	db						.byte 	$DB 						; causes a break in the emulator
.c86e	a86e					GXFillCircle:
.c86e	a86e	a9 ff		lda #$ff			lda 	#255
.c870	a870	80 02		bra $a874			bra 	GXCircle
.c872	a872					GXFrameCircle:
.c872	a872	a9 00		lda #$00			lda 	#0
.c874	a874					GXCircle:
.c874	a874	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c877	a877	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c87a	a87a	f0 26		beq $a8a2			beq 	_GXCFail
.c87c	a87c	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; topleft/bottomright
.c87f	a87f	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.c882	a882	20 74 a9	jsr $a974			jsr 	GXCircleSetup 				; set up for drawing
.c885	a885	9c 16 07	stz $0716			stz 	gxYChanged
.c888	a888					_GXCircleDraw:
.c888	a888	ad 13 07	lda $0713			lda 	gXCentre					; while x <= y
.c88b	a88b	cd 14 07	cmp $0714			cmp 	gYCentre
.c88e	a88e	90 0a		bcc $a89a			bcc 	_GXCircleContinue
.c890	a890	d0 03		bne $a895			bne 	_GXNoLast
.c892	a892	20 a7 a8	jsr $a8a7			jsr 	GXPlot1
.c895	a895					_GXNoLast:
.c895	a895	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; close the bitmap
.c898	a898	18		clc				clc
.c899	a899	60		rts				rts
.c89a	a89a					_GXCircleContinue:
.c89a	a89a	20 a4 a8	jsr $a8a4			jsr 	GXPlot2 					; draw it
.c89d	a89d	20 21 a9	jsr $a921			jsr 	GXCircleMove 				; adjust the coordinates
.c8a0	a8a0	80 e6		bra $a888			bra 	_GXCircleDraw
.c8a2	a8a2					_GXCFail:
.c8a2	a8a2	38		sec				sec
.c8a3	a8a3	60		rts				rts
.c8a4	a8a4					GXPlot2:
.c8a4	a8a4	20 a7 a8	jsr $a8a7			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c8a7	a8a7					GXPlot1:
.c8a7	a8a7	ad 14 07	lda $0714			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.c8aa	a8aa	f0 03		beq $a8af			beq 	_GXPlot1Only
.c8ac	a8ac	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; plot and negate
.c8af	a8af					_GXPlot1Only:
.c8af	a8af	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; twice, undoing negation
.c8b2	a8b2	ad 13 07	lda $0713			lda 	gXCentre 						; swap X and Y
.c8b5	a8b5	ae 14 07	ldx $0714			ldx	 	gYCentre
.c8b8	a8b8	8d 14 07	sta $0714			sta 	gYCentre
.c8bb	a8bb	8e 13 07	stx $0713			stx 	gXCentre
.c8be	a8be	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c8c1	a8c1	a9 ff		lda #$ff			lda 	#$FF
.c8c3	a8c3	8d 16 07	sta $0716			sta 	gxYChanged
.c8c6	a8c6	60		rts				rts
.c8c7	a8c7	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; do once
.c8ca	a8ca	60		rts				rts
.c8cb	a8cb	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ce	a8ce	f0 05		beq $a8d5			beq 	_GXPlot0Always
.c8d0	a8d0	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c8d3	a8d3	f0 2d		beq $a902			beq 	GXPlot0Exit
.c8d5	a8d5					_GXPlot0Always:
.c8d5	a8d5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8d7	a8d7	ad 14 07	lda $0714			lda 	gYCentre
.c8da	a8da	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8dd	a8dd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8df	a8df	ad 13 07	lda $0713			lda 	gXCentre
.c8e2	a8e2	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8e5	a8e5	48		pha				pha 									; save last offset X
.c8e6	a8e6	20 ba af	jsr $afba			jsr 	GXPositionCalc 					; calculate position/offset.
.c8e9	a8e9	68		pla				pla
.c8ea	a8ea	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8eb	a8eb	85 36		sta $36				sta 	gxzTemp0
.c8ed	a8ed	64 37		stz $37				stz 	gxzTemp0+1
.c8ef	a8ef	26 37		rol $37				rol 	gxzTemp0+1
.c8f1	a8f1	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8f4	a8f4	69 80		adc #$80			adc 	#128
.c8f6	a8f6	20 93 ac	jsr $ac93			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8f9	a8f9	38		sec				sec 									; GY = -GY
.c8fa	a8fa	a9 00		lda #$00			lda 	#0
.c8fc	a8fc	ed 14 07	sbc $0714			sbc 	gYCentre
.c8ff	a8ff	8d 14 07	sta $0714			sta 	gYCentre
.c902	a902					GXPlot0Exit:
.c902	a902	60		rts				rts
.c903	a903					GXSubCopy:
.c903	a903	85 36		sta $36				sta 	gxzTemp0
.c905	a905	64 37		stz $37				stz 	gxzTemp0+1
.c907	a907	29 80		and #$80			and 	#$80
.c909	a909	f0 02		beq $a90d			beq 	_GXNoSx
.c90b	a90b	c6 37		dec $37				dec 	gxzTemp0+1
.c90d	a90d					_GXNoSx:
.c90d	a90d	38		sec				sec
.c90e	a90e	bd 7e 06	lda $067e,x			lda 	gXX1,x
.c911	a911	e5 36		sbc $36				sbc 	gxzTemp0
.c913	a913	9d 7a 06	sta $067a,x			sta 	gXX0,x
.c916	a916	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c919	a919	e5 37		sbc $37				sbc 	gxzTemp0+1
.c91b	a91b	9d 7b 06	sta $067b,x			sta 	gXX0+1,x
.c91e	a91e	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c920	a920	60		rts				rts
.c921	a921					GXCircleMove:
.c921	a921	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c924	a924	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c926	a926	10 0d		bpl $a935			bpl 	_GXEMPositive
.c928	a928	ee 13 07	inc $0713			inc 	gXCentre 					; X++
.c92b	a92b	ad 13 07	lda $0713			lda 	gXCentre
.c92e	a92e	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c931	a931	a9 06		lda #$06			lda 	#6  						; and add 6
.c933	a933	80 15		bra $a94a			bra 	_GXEMAddD
.c935	a935					_GXEMPositive:
.c935	a935	ee 13 07	inc $0713			inc 	gXCentre					; X++
.c938	a938	ce 14 07	dec $0714			dec 	gyCentre 					; Y--
.c93b	a93b	38		sec				sec 								; calculate X-Y
.c93c	a93c	ad 13 07	lda $0713			lda 	gXCentre
.c93f	a93f	ed 14 07	sbc $0714			sbc 	gYCentre
.c942	a942	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c945	a945	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c947	a947	ce 16 07	dec $0716			dec 	gxYChanged
.c94a	a94a					_GXEMAddD:
.c94a	a94a	18		clc				clc
.c94b	a94b	65 38		adc $38				adc 	gxzTemp1
.c94d	a94d	85 38		sta $38				sta 	gxzTemp1
.c94f	a94f	90 02		bcc $a953			bcc 	_GXEMNoCarry
.c951	a951	e6 39		inc $39				inc 	gxzTemp1+1
.c953	a953					_GXEMNoCarry:
.c953	a953	60		rts				rts
.c954	a954					_GXAdd4TimesToD:
.c954	a954	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c956	a956	29 80		and #$80			and 	#$80
.c958	a958	f0 02		beq $a95c			beq 	_GXA4Unsigned
.c95a	a95a	a9 ff		lda #$ff			lda 	#$FF
.c95c	a95c					_GXA4Unsigned:
.c95c	a95c	85 37		sta $37				sta 	gxzTemp0+1
.c95e	a95e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c960	a960	26 37		rol $37				rol 	gxzTemp0+1
.c962	a962	06 36		asl $36				asl 	gxzTemp0
.c964	a964	26 37		rol $37				rol 	gxzTemp0+1
.c966	a966	18		clc				clc 								; add
.c967	a967	a5 36		lda $36				lda		gxzTemp0
.c969	a969	65 38		adc $38				adc 	gxzTemp1
.c96b	a96b	85 38		sta $38				sta 	gxzTemp1
.c96d	a96d	a5 37		lda $37				lda		gxzTemp0+1
.c96f	a96f	65 39		adc $39				adc 	gxzTemp1+1
.c971	a971	85 39		sta $39				sta 	gxzTemp1+1
.c973	a973	60		rts				rts
.c974	a974					GXCircleSetup:
.c974	a974	38		sec				sec
.c975	a975	ad 80 06	lda $0680			lda 	gxY1
.c978	a978	ed 7c 06	sbc $067c			sbc 	gxY0
.c97b	a97b	4a		lsr a				lsr 	a
.c97c	a97c	8d 12 07	sta $0712			sta 	gxRadius
.c97f	a97f	a2 00		ldx #$00			ldx 	#0
.c981	a981	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c984	a984	a2 02		ldx #$02			ldx 	#2
.c986	a986	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c989	a989	9c 13 07	stz $0713			stz 	gXCentre
.c98c	a98c	ad 12 07	lda $0712			lda 	gxRadius
.c98f	a98f	8d 14 07	sta $0714			sta 	gYCentre
.c992	a992	0a		asl a				asl 	a 							; R x 2
.c993	a993	85 36		sta $36				sta 	gxzTemp0
.c995	a995	38		sec				sec
.c996	a996	a9 03		lda #$03			lda 	#3
.c998	a998	e5 36		sbc $36				sbc 	gxzTemp0
.c99a	a99a	85 38		sta $38				sta 	gxzTemp1
.c99c	a99c	a9 00		lda #$00			lda 	#0
.c99e	a99e	e9 00		sbc #$00			sbc 	#0
.c9a0	a9a0	85 39		sta $39				sta 	gxzTemp1+1
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXCalculateCentre:
.c9a3	a9a3	38		sec				sec
.c9a4	a9a4	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c9a7	a9a7	7d 7a 06	adc $067a,x			adc 	gXX0,x
.c9aa	a9aa	9d 7e 06	sta $067e,x			sta 	gXX1,x
.c9ad	a9ad	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c9b0	a9b0	7d 7b 06	adc $067b,x			adc 	gXX0+1,x
.c9b3	a9b3	4a		lsr a				lsr 	a
.c9b4	a9b4	9d 7f 06	sta $067f,x			sta 	gXX1+1,x
.c9b7	a9b7	7e 7e 06	ror $067e,x			ror 	gXX1,x
.c9ba	a9ba	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gXCentre:
>0713								.fill 	1
.0714						gYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c9bb	a9bb					GXClearBitmap:
.c9bb	a9bb	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c9be	a9be	f0 24		beq $a9e4			beq 	_GXCBFail
.c9c0	a9c0	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start access
.c9c3	a9c3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9c5	a9c5	ad 86 06	lda $0686			lda 	gxHeight
.c9c8	a9c8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9ca	a9ca	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9cc	a9cc					_GXCalcLastPage:
.c9cc	a9cc	98		tya				tya 								; add to base page
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	6d 84 06	adc $0684			adc 	gxBasePage
.c9d1	a9d1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9d3	a9d3					_GXClearAll:
.c9d3	a9d3	20 e6 a9	jsr $a9e6			jsr 	_GXClearBlock 				; clear 8k block
.c9d6	a9d6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9d8	a9d8	a5 0b		lda $0b				lda 	GXEditSlot
.c9da	a9da	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c9dd	a9dd	b0 f4		bcs $a9d3			bcs 	_GXClearAll
.c9df	a9df	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap	 			; stop access
.c9e2	a9e2	18		clc				clc
.c9e3	a9e3	60		rts				rts
.c9e4	a9e4					_GXCBFail:
.c9e4	a9e4	38		sec				sec
.c9e5	a9e5	60		rts				rts
.c9e6	a9e6					_GXClearBlock:
.c9e6	a9e6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9e8	a9e8	85 38		sta $38				sta 	0+gxzTemp1
.c9ea	a9ea	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9ec	a9ec	85 39		sta $39				sta 	1+gxzTemp1
.c9ee	a9ee					_GXCB0:
.c9ee	a9ee	a5 36		lda $36				lda 	gxzTemp0
.c9f0	a9f0	a0 00		ldy #$00			ldy 	#0
.c9f2	a9f2					_GXCB1:
.c9f2	a9f2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f4	a9f4	c8		iny				iny
.c9f5	a9f5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f7	a9f7	c8		iny				iny
.c9f8	a9f8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fa	a9fa	c8		iny				iny
.c9fb	a9fb	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fd	a9fd	c8		iny				iny
.c9fe	a9fe	d0 f2		bne $a9f2			bne 	_GXCB1
.ca00	aa00	e6 39		inc $39				inc 	gxzTemp1+1
.ca02	aa02	a5 39		lda $39				lda 	gxzTemp1+1
.ca04	aa04	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ca06	aa06	d0 e6		bne $a9ee			bne 	_GXCB0
.ca08	aa08	60		rts				rts
.ca09	aa09					GXInitialise:
.ca09	aa09	64 01		stz $01				stz 	1
.ca0b	aa0b	a9 01		lda #$01			lda 	#1
.ca0d	aa0d	8d 00 d0	sta $d000			sta 	$D000
.ca10	aa10	18		clc				clc
.ca11	aa11	9c 82 06	stz $0682			stz 	GXSpritesOn
.ca14	aa14	9c 83 06	stz $0683			stz 	GXBitmapsOn
.ca17	aa17	a2 0f		ldx #$0f			ldx 	#15
.ca19	aa19					_GXIClear:
.ca19	aa19	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.ca1c	aa1c	ca		dex				dex
.ca1d	aa1d	10 fa		bpl $aa19			bpl 	_GXIClear
.ca1f	aa1f	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.ca22	aa22	60		rts				rts
.ca23	aa23					GXControlBitmap:
.ca23	aa23	64 01		stz $01				stz 	1
.ca25	aa25	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca27	aa27	29 01		and #$01			and 	#1 							; set bitmap flag
.ca29	aa29	8d 83 06	sta $0683			sta 	gxBitmapsOn
.ca2c	aa2c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca2d	aa2d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca30	aa30	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca32	aa32	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca34	aa34	90 02		bcc $aa38			bcc 	_CBNotOn
.ca36	aa36	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca38	aa38					_CBNotOn:
.ca38	aa38	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca3b	aa3b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca3d	aa3d	29 07		and #$07			and 	#7
.ca3f	aa3f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca42	aa42	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca44	aa44	d0 02		bne $aa48			bne 	_CBNotDefault
.ca46	aa46	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca48	aa48					_CBNotDefault:
.ca48	aa48	8d 84 06	sta $0684			sta 	gxBasePage
.ca4b	aa4b	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4e	aa4e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca50	aa50	8d 03 d1	sta $d103			sta 	$D103
.ca53	aa53	a5 36		lda $36				lda 	gxzTemp0
.ca55	aa55	8d 02 d1	sta $d102			sta 	$D102
.ca58	aa58	9c 01 d1	stz $d101			stz 	$D101
.ca5b	aa5b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca5d	aa5d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca60	aa60	29 01		and #$01			and 	#1
.ca62	aa62	f0 02		beq $aa66			beq 	_CBHaveHeight
.ca64	aa64	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca66	aa66					_CBHaveHeight
.ca66	aa66	8e 86 06	stx $0686			stx 	gxHeight
.ca69	aa69	18		clc				clc
.ca6a	aa6a	60		rts				rts
.ca6b	aa6b					GXControlSprite:
.ca6b	aa6b	64 01		stz $01				stz 	1
.ca6d	aa6d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca6f	aa6f	29 01		and #$01			and 	#1 							; set sprites flag
.ca71	aa71	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca74	aa74	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca75	aa75	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca78	aa78	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca7a	aa7a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca7c	aa7c	90 02		bcc $aa80			bcc 	_CSNotOn
.ca7e	aa7e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca80	aa80					_CSNotOn:
.ca80	aa80	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca83	aa83	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca85	aa85	d0 02		bne $aa89			bne 	_CSNotDefault
.ca87	aa87	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca89	aa89					_CSNotDefault:
.ca89	aa89	8d 85 06	sta $0685			sta 	gxSpritePage
.ca8c	aa8c	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca8f	aa8f	a5 36		lda $36				lda 	zTemp0
.ca91	aa91	8d 90 06	sta $0690			sta 	GXSpriteOffsetBase
.ca94	aa94	a5 37		lda $37				lda 	zTemp0+1
.ca96	aa96	8d 91 06	sta $0691			sta 	GXSpriteOffsetBase+1
.ca99	aa99	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca9b	aa9b					_CSClear:
.ca9b	aa9b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca9e	aa9e	9e 00 da	stz $da00,x			stz 	$DA00,x
.caa1	aaa1	ca		dex				dex
.caa2	aaa2	d0 f7		bne $aa9b			bne 	_CSClear
.caa4	aaa4	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.caa7	aaa7	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.caaa	aaaa	18		clc				clc
.caab	aaab	60		rts				rts
.caac	aaac					GXCalculateBaseAddress:
.caac	aaac	85 36		sta $36				sta 	gxzTemp0
.caae	aaae	64 37		stz $37				stz 	gxzTemp0+1
.cab0	aab0	a9 05		lda #$05			lda 	#5
.cab2	aab2					_GXShift:
.cab2	aab2	06 36		asl $36				asl 	gxzTemp0
.cab4	aab4	26 37		rol $37				rol 	gxzTemp0+1
.cab6	aab6	3a		dec a				dec		a
.cab7	aab7	d0 f9		bne $aab2			bne 	_GXShift
.cab9	aab9	60		rts				rts
.caba	aaba					GXClearSpriteStore:
.caba	aaba	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.cabc	aabc					_GXCSSLoop:
.cabc	aabc	9e d2 06	stz $06d2,x			stz 	GXSpriteHigh,x
.cabf	aabf	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.cac1	aac1	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cac4	aac4	ca		dex				dex
.cac5	aac5	10 f5		bpl $aabc			bpl 	_GXCSSLoop
.cac7	aac7	60		rts				rts
.cac8	aac8					GXLine:
.cac8	aac8	ad 83 06	lda $0683			lda 	GXBitmapsOn
.cacb	aacb	f0 28		beq $aaf5			beq 	_GXLFail
.cacd	aacd	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.cad0	aad0	20 f0 b0	jsr $b0f0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cad3	aad3	20 9b ab	jsr $ab9b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cad6	aad6	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cad9	aad9					_GXDrawLoop:
.cad9	aad9	ac 8c 06	ldy $068c			ldy 	gsOffset 					; draw the pixel
.cadc	aadc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cade	aade	2d 8a 06	and $068a			and 	gxANDValue
.cae1	aae1	4d 89 06	eor $0689			eor 	gxEORValue
.cae4	aae4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cae6	aae6	20 f7 aa	jsr $aaf7			jsr 	GXLineIsComplete 			; is the line complete ?
.cae9	aae9	f0 05		beq $aaf0			beq 	_GXLExit
.caeb	aaeb	20 12 ab	jsr $ab12			jsr 	GXLineAdvance 				; code as per advance method
.caee	aaee	80 e9		bra $aad9			bra 	_GXDrawLoop
.caf0	aaf0					_GXLExit:
.caf0	aaf0	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.caf3	aaf3	18		clc				clc
.caf4	aaf4	60		rts				rts
.caf5	aaf5					_GXLFail:
.caf5	aaf5	38		sec				sec
.caf6	aaf6	60		rts				rts
.caf7	aaf7					GXLineIsComplete:
.caf7	aaf7	ad 19 07	lda $0719			lda 	GXIsDiffYLarger 			; is dy larger
.cafa	aafa	d0 0f		bne $ab0b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cafc	aafc	ad 7a 06	lda $067a			lda 	GXX0 						; compare X, LSB and MSB
.caff	aaff	4d 7e 06	eor $067e			eor 	GXX1
.cb02	ab02	d0 06		bne $ab0a			bne 	_GXLICExit
.cb04	ab04	ad 7b 06	lda $067b			lda 	GXX0+1
.cb07	ab07	4d 7f 06	eor $067f			eor 	GXX1+1
.cb0a	ab0a					_GXLICExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					_GXLICCompareY:
.cb0b	ab0b	ad 80 06	lda $0680			lda 	GXY1
.cb0e	ab0e	4d 7c 06	eor $067c			eor 	GXY0
.cb11	ab11	60		rts				rts
.cb12	ab12					GXLineAdvance:
.cb12	ab12	18		clc				clc 								; add adjust to position
.cb13	ab13	ad 1b 07	lda $071b			lda 	GXPosition
.cb16	ab16	6d 1c 07	adc $071c			adc 	GXAdjust
.cb19	ab19	8d 1b 07	sta $071b			sta 	GXPosition
.cb1c	ab1c	9c 1e 07	stz $071e			stz 	GXAddSelect 				; clear add select flag
.cb1f	ab1f	b0 05		bcs $ab26			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb21	ab21	cd 1d 07	cmp $071d			cmp 	GXTotal 					; if exceeded total
.cb24	ab24	90 0a		bcc $ab30			bcc 	_GXLANoExtra
.cb26	ab26					_GXLAOverflow:
.cb26	ab26	ce 1e 07	dec $071e			dec 	GXAddSelect 				; set addselect to $FF
.cb29	ab29	38		sec				sec 								; subtract total and write back
.cb2a	ab2a	ed 1d 07	sbc $071d			sbc 	GXTotal
.cb2d	ab2d	8d 1b 07	sta $071b			sta 	GXPosition
.cb30	ab30					_GXLANoExtra:
.cb30	ab30	ad 19 07	lda $0719			lda 	GXIsDiffYLarger
.cb33	ab33	f0 0d		beq $ab42			beq 	_GXDXLarger
.cb35	ab35	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb38	ab38	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb3b	ab3b	f0 10		beq $ab4d			beq 	_GXLAExit
.cb3d	ab3d	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb40	ab40	80 0b		bra $ab4d			bra 	_GXLAExit
.cb42	ab42					_GXDXLarger:
.cb42	ab42	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb45	ab45	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb48	ab48	f0 03		beq $ab4d			beq 	_GXLAExit
.cb4a	ab4a	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb4d	ab4d					_GXLAExit:
.cb4d	ab4d	60		rts				rts
.cb4e	ab4e					GXAdjustX:
.cb4e	ab4e	ad 1a 07	lda $071a			lda 	GXDXNegative
.cb51	ab51	10 25		bpl $ab78			bpl 	_GXAXRight
.cb53	ab53	ad 7a 06	lda $067a			lda 	GXX0
.cb56	ab56	d0 03		bne $ab5b			bne 	_GXAXNoBorrow
.cb58	ab58	ce 7b 06	dec $067b			dec 	GXX0+1
.cb5b	ab5b					_GXAXNoBorrow:
.cb5b	ab5b	ce 7a 06	dec $067a			dec 	GXX0
.cb5e	ab5e	ce 8c 06	dec $068c			dec 	gsOffset 					; pixel left
.cb61	ab61	ad 8c 06	lda $068c			lda 	gsOffset
.cb64	ab64	c9 ff		cmp #$ff			cmp 	#$FF
.cb66	ab66	d0 0f		bne $ab77			bne 	_GXAYExit 					; underflow
.cb68	ab68	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb6a	ab6a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb6c	ab6c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb6e	ab6e	b0 07		bcs $ab77			bcs 	_GXAYExit
.cb70	ab70	18		clc				clc
.cb71	ab71	69 20		adc #$20			adc 	#$20 						; fix up
.cb73	ab73	85 3d		sta $3d				sta 	gxzScreen+1
.cb75	ab75	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb77	ab77					_GXAYExit:
.cb77	ab77	60		rts				rts
.cb78	ab78					_GXAXRight:
.cb78	ab78	ee 7a 06	inc $067a			inc 	GXX0
.cb7b	ab7b	d0 03		bne $ab80			bne 	_GXAXNoCarry
.cb7d	ab7d	ee 7b 06	inc $067b			inc 	GXX0+1
.cb80	ab80					_GXAXNoCarry:
.cb80	ab80	ee 8c 06	inc $068c			inc 	gsOffset 					; pixel right
.cb83	ab83	d0 0e		bne $ab93			bne 	_GXAXExit 					; if not overflowed, exit.
.cb85	ab85	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb87	ab87	a5 3d		lda $3d				lda 	gxzScreen+1
.cb89	ab89	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb8b	ab8b	90 06		bcc $ab93			bcc 	_GXAXExit
.cb8d	ab8d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb8f	ab8f	85 3d		sta $3d				sta 	gxzScreen+1
.cb91	ab91	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb93	ab93					_GXAXExit:
.cb93	ab93	60		rts				rts
.cb94	ab94					GXIncrementY:
.cb94	ab94	ee 7c 06	inc $067c			inc 	GXY0
.cb97	ab97	20 10 b0	jsr $b010			jsr 	GXMovePositionDown
.cb9a	ab9a	60		rts				rts
.cb9b	ab9b					GXLineSetup:
.cb9b	ab9b	ad 80 06	lda $0680			lda 	GXY1
.cb9e	ab9e	38		sec				sec
.cb9f	ab9f	ed 7c 06	sbc $067c			sbc 	GXY0
.cba2	aba2	4a		lsr a				lsr 	a
.cba3	aba3	8d 18 07	sta $0718			sta 	GXDiffY
.cba6	aba6	9c 1a 07	stz $071a			stz 	GXDXNegative 				; clear -ve flag
.cba9	aba9	38		sec				sec
.cbaa	abaa	ad 7e 06	lda $067e			lda 	GXX1
.cbad	abad	ed 7a 06	sbc $067a			sbc 	GXX0
.cbb0	abb0	8d 17 07	sta $0717			sta 	GXDiffX
.cbb3	abb3	ad 7f 06	lda $067f			lda 	GXX1+1 						; calculate MSB
.cbb6	abb6	ed 7b 06	sbc $067b			sbc 	GXX0+1
.cbb9	abb9	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cbba	abba	6e 17 07	ror $0717			ror 	GXDiffX
.cbbd	abbd	0a		asl a				asl 	a
.cbbe	abbe	10 0c		bpl $abcc			bpl 	_GDXNotNegative
.cbc0	abc0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cbc2	abc2	38		sec				sec
.cbc3	abc3	ed 17 07	sbc $0717			sbc 	GXDiffX
.cbc6	abc6	8d 17 07	sta $0717			sta 	GXDiffX
.cbc9	abc9	ce 1a 07	dec $071a			dec 	GXDXNegative 				; -ve flag = $FF.
.cbcc	abcc					_GDXNotNegative:
.cbcc	abcc	9c 19 07	stz $0719			stz 	GXIsDiffYLarger 			; clear larger flag
.cbcf	abcf	ad 18 07	lda $0718			lda 	GXDiffY 					; set adjust and total.
.cbd2	abd2	8d 1c 07	sta $071c			sta 	GXAdjust
.cbd5	abd5	ad 17 07	lda $0717			lda 	GXDiffX
.cbd8	abd8	8d 1d 07	sta $071d			sta 	GXTotal
.cbdb	abdb	ad 18 07	lda $0718			lda 	GXDiffY 					; if dy > dx
.cbde	abde	cd 17 07	cmp $0717			cmp 	GXDiffX
.cbe1	abe1	90 0f		bcc $abf2			bcc 	_GDXNotLarger
.cbe3	abe3	ce 19 07	dec $0719			dec 	GXIsDiffYLarger 			; set the dy larger flag
.cbe6	abe6	ad 17 07	lda $0717			lda 	GXDiffX 					; set adjust and total other way round
.cbe9	abe9	8d 1c 07	sta $071c			sta 	GXAdjust
.cbec	abec	ad 18 07	lda $0718			lda 	GXDiffY
.cbef	abef	8d 1d 07	sta $071d			sta 	GXTotal
.cbf2	abf2					_GDXNotLarger:
.cbf2	abf2	ad 1d 07	lda $071d			lda 	GXTotal
.cbf5	abf5	4a		lsr a				lsr 	a
.cbf6	abf6	8d 1b 07	sta $071b			sta 	GXPosition
.cbf9	abf9	60		rts				rts
.0717						GXDiffX:
>0717								.fill 	1
.0718						GXDiffY:
>0718								.fill 	1
.0719						GXIsDiffYLarger:
>0719								.fill 	1
.071a						GXDXNegative:
>071a								.fill 	1
.071b						GXPosition:
>071b								.fill 	1
.071c						GXAdjust:
>071c								.fill 	1
.071d						GXTotal:
>071d								.fill 	1
.071e						GXAddSelect:
>071e								.fill 	1
.cbfa	abfa					GXSetColourMode:
.cbfa	abfa	a6 36		ldx $36				ldx 	gxzTemp0
.cbfc	abfc	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbff	abff	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cc01	ac01	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cc04	ac04	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cc06	ac06	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cc09	ac09	ae 88 06	ldx $0688			ldx 	gxColour
.cc0c	ac0c	8e 89 06	stx $0689			stx 	gxEORValue
.cc0f	ac0f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cc11	ac11	90 03		bcc $ac16			bcc 	_GXSDCNotAndColour
.cc13	ac13	8e 8a 06	stx $068a			stx 	gxANDValue
.cc16	ac16					_GXSDCNotAndColour:
.cc16	ac16	d0 03		bne $ac1b			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cc18	ac18	9c 89 06	stz $0689			stz 	gxEORValue
.cc1b	ac1b					_GXSDCNotAnd:
.cc1b	ac1b	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cc1c	ac1c	90 08		bcc $ac26			bcc 	_GXSDCNoFlip
.cc1e	ac1e	ad 8a 06	lda $068a			lda	 	gxANDValue
.cc21	ac21	49 ff		eor #$ff			eor 	#$FF
.cc23	ac23	8d 8a 06	sta $068a			sta 	gxANDValue
.cc26	ac26					_GXSDCNoFlip:
.cc26	ac26	18		clc				clc
.cc27	ac27	60		rts				rts
.cc28	ac28					GXPlotPoint:
.cc28	ac28	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc2b	ac2b	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc2e	ac2e	ac 8c 06	ldy $068c			ldy 	gsOffset
.cc31	ac31	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc33	ac33	2d 8a 06	and $068a			and 	gxANDValue
.cc36	ac36	4d 89 06	eor $0689			eor 	gxEORValue
.cc39	ac39	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc3b	ac3b	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc3e	ac3e	18		clc				clc
.cc3f	ac3f	60		rts				rts
.cc40	ac40					GXFillRectangle:
.cc40	ac40	38		sec				sec
.cc41	ac41	80 01		bra $ac44			bra 	GXRectangle
.cc43	ac43					GXFrameRectangle:
.cc43	ac43	18		clc				clc
.cc44	ac44					GXRectangle:
.cc44	ac44	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cc47	ac47	f0 35		beq $ac7e			beq 	_GXRFail
.cc49	ac49	08		php				php 								; save Fill flag (CS)
.cc4a	ac4a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc4d	ac4d	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc50	ac50	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc53	ac53	38		sec				sec 								; sec = Draw line
.cc54	ac54	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc57	ac57	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc5a	ac5a	cd 80 06	cmp $0680			cmp 	gxY1
.cc5d	ac5d	f0 19		beq $ac78			beq 	_GXRectangleExit
.cc5f	ac5f					_GXRectLoop:
.cc5f	ac5f	20 10 b0	jsr $b010			jsr 	GXMovePositionDown 			; down one.
.cc62	ac62	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc65	ac65	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc68	ac68	cd 80 06	cmp $0680			cmp 	gXY1
.cc6b	ac6b	f0 07		beq $ac74			beq 	_GXLastLine
.cc6d	ac6d	28		plp				plp 								; get flag back
.cc6e	ac6e	08		php				php
.cc6f	ac6f	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc72	ac72	80 eb		bra $ac5f			bra 	_GXRectLoop
.cc74	ac74					_GXLastLine:
.cc74	ac74	38		sec				sec
.cc75	ac75	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0
.cc78	ac78					_GXRectangleExit:
.cc78	ac78	68		pla				pla 								; throw fill flag.
.cc79	ac79	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc7c	ac7c	18		clc				clc
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					_GXRFail:
.cc7e	ac7e	38		sec				sec
.cc7f	ac7f	60		rts				rts
.cc80	ac80					GXDrawLineX1X0:
.cc80	ac80	08		php				php 								; save solid/either-end
.cc81	ac81	38		sec				sec
.cc82	ac82	ad 7e 06	lda $067e			lda		gXX1
.cc85	ac85	ed 7a 06	sbc $067a			sbc 	gXX0
.cc88	ac88	85 36		sta $36				sta 	gxzTemp0
.cc8a	ac8a	ad 7f 06	lda $067f			lda 	gXX1+1
.cc8d	ac8d	ed 7b 06	sbc $067b			sbc 	gXX0+1
.cc90	ac90	85 37		sta $37				sta 	gxzTemp0+1
.cc92	ac92	28		plp				plp
.cc93	ac93					GXDrawLineTemp0:
.cc93	ac93	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.cc95	ac95	48		pha				pha
.cc96	ac96	a5 3d		lda $3d				lda 	gxzScreen+1
.cc98	ac98	48		pha				pha
.cc99	ac99	ad 8c 06	lda $068c			lda 	gsOffset
.cc9c	ac9c	48		pha				pha
.cc9d	ac9d	a5 0b		lda $0b				lda 	GXEditSlot
.cc9f	ac9f	48		pha				pha
.cca0	aca0	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y offset
.cca3	aca3	90 1e		bcc $acc3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cca5	aca5					_GXDLTLine:
.cca5	aca5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca7	aca7	2d 8a 06	and $068a			and 	gxANDValue
.ccaa	acaa	4d 89 06	eor $0689			eor 	gxEORValue
.ccad	acad	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccaf	acaf	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.ccb1	acb1	d0 04		bne $acb7			bne 	_GXDLTNoBorrow
.ccb3	acb3	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.ccb5	acb5	30 2e		bmi $ace5			bmi 	_GXDLTExit
.ccb7	acb7					_GXDLTNoBorrow:
.ccb7	acb7	c6 36		dec $36				dec 	gxzTemp0
.ccb9	acb9	c8		iny				iny 								; next slot.
.ccba	acba	d0 e9		bne $aca5			bne 	_GXDLTLine
.ccbc	acbc	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ccbe	acbe	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.ccc1	acc1	80 e2		bra $aca5			bra 	_GXDLTLine
.ccc3	acc3					_GXDLTEndPoints:
.ccc3	acc3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ccc5	acc5	2d 8a 06	and $068a			and 	gxANDValue
.ccc8	acc8	4d 89 06	eor $0689			eor 	gxEORValue
.cccb	accb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cccd	accd	98		tya				tya 								; advance to right side
.ccce	acce	18		clc				clc
.cccf	accf	65 36		adc $36				adc 	gxzTemp0
.ccd1	acd1	a8		tay				tay
.ccd2	acd2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccd4	acd4	65 37		adc $37				adc 	gxzTemp0+1
.ccd6	acd6	85 3d		sta $3d				sta 	gxzScreen+1
.ccd8	acd8	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap 			; fix up.
.ccdb	acdb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccdd	acdd	2d 8a 06	and $068a			and 	gxANDValue
.cce0	ace0	4d 89 06	eor $0689			eor 	gxEORValue
.cce3	ace3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cce5	ace5					_GXDLTExit:
.cce5	ace5	68		pla				pla
.cce6	ace6	85 0b		sta $0b				sta 	GXEditSlot
.cce8	ace8	68		pla				pla
.cce9	ace9	8d 8c 06	sta $068c			sta 	gsOffset
.ccec	acec	68		pla				pla
.cced	aced	85 3d		sta $3d				sta 	gxzScreen+1
.ccef	acef	68		pla				pla
.ccf0	acf0	85 3c		sta $3c				sta 	gxzScreen
.ccf2	acf2	60		rts				rts
.ccf3	acf3					GXDLTCheckWrap:
.ccf3	acf3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccf5	acf5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccf7	acf7	90 06		bcc $acff			bcc 	_GXDLTCWExit
.ccf9	acf9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccfb	acfb	85 3d		sta $3d				sta 	gxzScreen+1
.ccfd	acfd	e6 0b		inc $0b				inc 	GXEditSlot
.ccff	acff					_GXDLTCWExit:
.ccff	acff	60		rts				rts
.cd00	ad00					GXDrawGraphicElement:
.cd00	ad00	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.cd03	ad03	3a		dec a				dec 	a
.cd04	ad04	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.cd07	ad07	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.cd0a	ad0a	f0 67		beq $ad73			beq 	_GXSLFail
.cd0c	ad0c	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.cd0f	ad0f	48		pha				pha
.cd10	ad10	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.cd13	ad13	8e 21 07	stx $0721			stx 	gxAcquireVector
.cd16	ad16	20 aa af	jsr $afaa			jsr 	gxOpenBitmap 				; open the bitmap.
.cd19	ad19	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.cd1c	ad1c	4a		lsr a				lsr 	a
.cd1d	ad1d	4a		lsr a				lsr 	a
.cd1e	ad1e	4a		lsr a				lsr 	a
.cd1f	ad1f	29 07		and #$07			and		#7
.cd21	ad21	1a		inc a				inc 	a
.cd22	ad22	8d 23 07	sta $0723			sta 	gxScale
.cd25	ad25	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd27	ad27					_GXGELoop:
.cd27	ad27	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd29	ad29	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.cd2c	ad2c	10 06		bpl $ad34			bpl		_GXNoVFlip
.cd2e	ad2e	ad 20 07	lda $0720			lda 	gxMask
.cd31	ad31	38		sec				sec
.cd32	ad32	e5 38		sbc $38				sbc 	gxzTemp1
.cd34	ad34					_GXNoVFlip:
.cd34	ad34	aa		tax				tax 								; get the Xth line.
.cd35	ad35	20 75 ad	jsr $ad75			jsr 	_GXCallAcquire 				; get that data.
.cd38	ad38	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cd3b	ad3b	85 39		sta $39				sta 	gxzTemp1+1
.cd3d	ad3d					_GXGELoop2:
.cd3d	ad3d	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.cd40	ad40	cd 86 06	cmp $0686			cmp 	gxHeight
.cd43	ad43	b0 10		bcs $ad55			bcs 	_GXDGEExit
.cd45	ad45	20 78 ad	jsr $ad78			jsr 	GXRenderOneLine 			; render line
.cd48	ad48	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd4a	ad4a	d0 f1		bne $ad3d			bne 	_GXGELoop2
.cd4c	ad4c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd4e	ad4e	a5 38		lda $38				lda 	gxzTemp1
.cd50	ad50	cd 1f 07	cmp $071f			cmp 	gxSize
.cd53	ad53	d0 d2		bne $ad27			bne 	_GXGELoop
.cd55	ad55					_GXDGEExit:
.cd55	ad55	68		pla				pla 								; restore Y for next time
.cd56	ad56	8d 7c 06	sta $067c			sta 	gxY0
.cd59	ad59	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd5c	ad5c					_GXShiftLeft:
.cd5c	ad5c	18		clc				clc
.cd5d	ad5d	ad 1f 07	lda $071f			lda 	gxSize
.cd60	ad60	6d 7a 06	adc $067a			adc 	gxX0
.cd63	ad63	8d 7a 06	sta $067a			sta 	gxX0
.cd66	ad66	90 03		bcc $ad6b			bcc 	_GXSLNoCarry
.cd68	ad68	ee 7b 06	inc $067b			inc 	gxX0+1
.cd6b	ad6b					_GXSLNoCarry:
.cd6b	ad6b	ca		dex				dex
.cd6c	ad6c	d0 ee		bne $ad5c			bne 	_GXShiftLeft
.cd6e	ad6e	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cd71	ad71	18		clc				clc
.cd72	ad72	60		rts				rts
.cd73	ad73					_GXSLFail:
.cd73	ad73	38		sec				sec
.cd74	ad74	60		rts				rts
.cd75	ad75					_GXCallAcquire:
.cd75	ad75	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd78	ad78					GXRenderOneLine:
.cd78	ad78	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cd7b	ad7b	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y contains position.
.cd7e	ad7e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd80	ad80					_GXROLLoop1:
.cd80	ad80	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd83	ad83	85 3b		sta $3b				sta 	gxzTemp2+1
.cd85	ad85					_GXROLLoop2:
.cd85	ad85	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd87	ad87	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd8a	ad8a	50 06		bvc $ad92			bvc 	_GXNoHFlip
.cd8c	ad8c	ad 20 07	lda $0720			lda 	gxMask
.cd8f	ad8f	38		sec				sec
.cd90	ad90	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd92	ad92					_GXNoHFlip:
.cd92	ad92	aa		tax				tax 								; read from the pixel buffer
.cd93	ad93	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd96	ad96	d0 07		bne $ad9f			bne 	_GXDraw 					; draw if non zero
.cd98	ad98	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd9b	ad9b	29 04		and #$04			and 	#4
.cd9d	ad9d	f0 0a		beq $ada9			beq 	_GXZeroPixel
.cd9f	ad9f					_GXDraw:
.cd9f	ad9f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cda1	ada1	2d 8a 06	and $068a			and 	gxANDValue
.cda4	ada4	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cda7	ada7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cda9	ada9					_GXZeroPixel:
.cda9	ada9	c8		iny				iny 								; advance pointer
.cdaa	adaa	d0 05		bne $adb1			bne 	_GXNoShift
.cdac	adac	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cdae	adae	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.cdb1	adb1					_GXNoShift:
.cdb1	adb1	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cdb3	adb3	d0 d0		bne $ad85			bne 	_GXROLLoop2
.cdb5	adb5	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cdb7	adb7	a5 3a		lda $3a				lda 	gxzTemp2
.cdb9	adb9	cd 1f 07	cmp $071f			cmp 	gxSize
.cdbc	adbc	d0 c2		bne $ad80			bne 	_GXROLLoop1
.cdbe	adbe	ee 7c 06	inc $067c			inc 	gxY0
.cdc1	adc1	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cdc2	adc2					GXFontHandler:
.cdc2	adc2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc4	adc4	4d 87 06	eor $0687			eor 	gxMode
.cdc7	adc7	8d 24 07	sta $0724			sta 	gxUseMode
.cdca	adca	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdcc	adcc	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdce	adce	26 37		rol $37				rol	 	gxzTemp0+1
.cdd0	add0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdd2	add2	26 37		rol $37				rol	 	gxzTemp0+1
.cdd4	add4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdd6	add6	26 37		rol $37				rol	 	gxzTemp0+1
.cdd8	add8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdda	adda	09 c0		ora #$c0			ora 	#$C0
.cddc	addc	85 37		sta $37				sta 	gxzTemp0+1
.cdde	adde	a9 08		lda #$08			lda 	#8 							; size 8x8
.cde0	ade0	a2 e8		ldx #$e8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cde2	ade2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cde4	ade4	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.cde7	ade7	60		rts				rts
.cde8	ade8					GXGetGraphicDataFont:
.cde8	ade8	8a		txa				txa 								; X->Y
.cde9	ade9	a8		tay				tay
.cdea	adea	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdec	adec	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdee	adee	85 01		sta $01				sta 	1
.cdf0	adf0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdf2	adf2	86 01		stx $01				stx 	1 							; put old value back.
.cdf4	adf4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdf6	adf6					_GXExpand:
.cdf6	adf6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdf9	adf9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdfa	adfa	90 08		bcc $ae04			bcc 	_GXNoPixel
.cdfc	adfc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdfd	adfd	ad 88 06	lda $0688			lda 	gxColour
.ce00	ae00	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.ce03	ae03	68		pla				pla
.ce04	ae04					_GXNoPixel:
.ce04	ae04	e8		inx				inx 								; do the whole byte.
.ce05	ae05	e0 08		cpx #$08			cpx 	#8
.ce07	ae07	d0 ed		bne $adf6			bne 	_GXExpand
.ce09	ae09	60		rts				rts
.ce0a	ae0a					GXSpriteHandler:
.ce0a	ae0a	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.ce0d	ae0d	f0 23		beq $ae32			beq 	_GXSHExit
.ce0f	ae0f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ce11	ae11	4d 87 06	eor $0687			eor 	gxMode
.ce14	ae14	8d 24 07	sta $0724			sta 	gxUseMode
.ce17	ae17	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ce19	ae19	da		phx				phx
.ce1a	ae1a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; can access sprite information
.ce1d	ae1d	68		pla				pla
.ce1e	ae1e	20 8b b0	jsr $b08b			jsr 	GXFindSprite 				; get the sprite address
.ce21	ae21	08		php				php
.ce22	ae22	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.ce25	ae25	28		plp				plp
.ce26	ae26	b0 0a		bcs $ae32			bcs		_GXSHExit 					; exit if find failed.
.ce28	ae28	ad 25 07	lda $0725			lda 	GXSizePixels 				; return size
.ce2b	ae2b	a2 33		ldx #$33			ldx 	#GXSpriteAcquire & $FF
.ce2d	ae2d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce2f	ae2f	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.ce32	ae32					_GXSHExit:
.ce32	ae32	60		rts				rts
.ce33	ae33					GXSpriteAcquire:
.ce33	ae33	ad 85 06	lda $0685			lda 	GXSpritePage				; point to base page
.ce36	ae36	85 0b		sta $0b				sta 	GXEditSlot
.ce38	ae38	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.ce3a	ae3a	a9 00		lda #$00			lda 	#0
.ce3c	ae3c	ae 26 07	ldx $0726			ldx 	GXSizeBits
.ce3f	ae3f					_GXTimesRowNumber:
.ce3f	ae3f	18		clc				clc
.ce40	ae40	65 36		adc $36				adc 	zTemp0
.ce42	ae42	ca		dex				dex
.ce43	ae43	10 fa		bpl $ae3f			bpl 	_GXTimesRowNumber
.ce45	ae45	64 37		stz $37				stz 	gxzTemp0+1
.ce47	ae47	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce48	ae48	26 37		rol $37				rol 	gxzTemp0+1
.ce4a	ae4a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce4b	ae4b	26 37		rol $37				rol 	gxzTemp0+1
.ce4d	ae4d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce4e	ae4e	26 37		rol $37				rol 	gxzTemp0+1
.ce50	ae50	85 36		sta $36				sta 	gxzTemp0
.ce52	ae52	18		clc				clc 								; add base address.
.ce53	ae53	a5 36		lda $36				lda 	gxzTemp0
.ce55	ae55	6d 28 07	adc $0728			adc 	GXSpriteOffset
.ce58	ae58	85 36		sta $36				sta 	gxzTemp0
.ce5a	ae5a	a5 37		lda $37				lda 	gxzTemp0+1
.ce5c	ae5c	6d 29 07	adc $0729			adc 	GXSpriteOffset+1
.ce5f	ae5f					_GXSAFindPage:
.ce5f	ae5f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce61	ae61	90 06		bcc $ae69			bcc 	_GXSAFoundPage
.ce63	ae63	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce65	ae65	e6 0b		inc $0b				inc 	GXEditSlot
.ce67	ae67	80 f6		bra $ae5f			bra 	_GXSAFindPage
.ce69	ae69					_GXSAFoundPage:
.ce69	ae69	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce6b	ae6b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce6d	ae6d	a0 00		ldy #$00			ldy 	#0
.ce6f	ae6f					_GXSACopyLoop:
.ce6f	ae6f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce71	ae71	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce74	ae74	c8		iny				iny
.ce75	ae75	cc 25 07	cpy $0725			cpy 	GXSizePixels
.ce78	ae78	d0 f5		bne $ae6f			bne 	_GXSACopyLoop
.ce7a	ae7a	60		rts				rts
.ce7b	ae7b					GXSelect:
.ce7b	ae7b	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce7e	ae7e	f0 22		beq $aea2			beq 	_GXSFail
.ce80	ae80	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce82	ae82	c9 40		cmp #$40			cmp 	#64
.ce84	ae84	b0 1c		bcs $aea2			bcs 	_GXSFail
.ce86	ae86	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce89	ae89	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce8b	ae8b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce8d	ae8d	06 36		asl $36				asl 	gxzTemp0
.ce8f	ae8f	06 36		asl $36				asl 	gxzTemp0
.ce91	ae91	06 36		asl $36				asl 	gxzTemp0
.ce93	ae93	2a		rol a				rol 	a
.ce94	ae94	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce96	ae96	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce99	ae99	85 37		sta $37				sta 	gxzTemp0+1
.ce9b	ae9b	a5 36		lda $36				lda 	gxzTemp0
.ce9d	ae9d	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.cea0	aea0	18		clc				clc
.cea1	aea1	60		rts				rts
.cea2	aea2					_GXSFail:
.cea2	aea2	38		sec				sec
.cea3	aea3	60		rts				rts
.cea4	aea4					GXSelectImage:
.cea4	aea4	ad 82 06	lda $0682			lda 	gxSpritesOn
.cea7	aea7	f0 74		beq $af1d			beq 	_GXSIFail
.cea9	aea9	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceac	aeac	f0 6f		beq $af1d			beq 	_GXSIFail 					; (checking the MSB)
.ceae	aeae	64 01		stz $01				stz 	1
.ceb0	aeb0	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ceb2	aeb2	d0 6b		bne $af1f			bne 	_GXSIHide
.ceb4	aeb4	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ceb6	aeb6	48		pha				pha
.ceb7	aeb7	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.ceba	aeba	68		pla				pla
.cebb	aebb	20 8b b0	jsr $b08b			jsr 	GXFindSprite
.cebe	aebe	b0 5a		bcs $af1a			bcs 	_GXSICloseFail 				; no image
.cec0	aec0	a0 01		ldy #$01			ldy 	#1
.cec2	aec2	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cec5	aec5	85 36		sta $36				sta 	gxzTemp0
.cec7	aec7	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ceca	aeca	85 37		sta $37				sta 	gxzTemp0+1
.cecc	aecc	ad 28 07	lda $0728			lda 	GXSpriteOffset
.cecf	aecf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ced1	aed1	18		clc				clc
.ced2	aed2	ad 29 07	lda $0729			lda 	GXSpriteOffset+1
.ced5	aed5	6d 90 06	adc $0690			adc 	GXSpriteOffsetBase
.ced8	aed8	c8		iny				iny
.ced9	aed9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cedb	aedb	ad 91 06	lda $0691			lda 	GXSpriteOffsetBase+1
.cede	aede	69 00		adc #$00			adc 	#0
.cee0	aee0	c8		iny				iny
.cee1	aee1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cee3	aee3	ad 26 07	lda $0726			lda 	GXSizeBits 					; get raw size
.cee6	aee6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cee8	aee8	2a		rol a				rol 	a 							; x 2
.cee9	aee9	0a		asl a				asl 	a 							; x 4
.ceea	aeea	0a		asl a				asl 	a 							; x 8
.ceeb	aeeb	0a		asl a				asl 	a 							; x 16
.ceec	aeec	0d 27 07	ora $0727			ora 	GXSpriteLUT 				; Or with LUT
.ceef	aeef	0a		asl a				asl 	a 							; 1 shift
.cef0	aef0	09 01		ora #$01			ora 	#1 							; enable sprite.
.cef2	aef2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cef4	aef4	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cef7	aef7	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cefa	aefa	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.cefd	aefd	29 3f		and #$3f			and 	#$3F
.ceff	aeff	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf02	af02	ad 26 07	lda $0726			lda 	GXSizeBits 					; get bit size
.cf05	af05	6a		ror a				ror 	a 							; shift into bits 6/7
.cf06	af06	6a		ror a				ror 	a
.cf07	af07	6a		ror a				ror 	a
.cf08	af08	29 c0		and #$c0			and 	#$C0
.cf0a	af0a	1d d2 06	ora $06d2,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cf0d	af0d	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf10	af10	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.cf13	af13	29 7f		and #$7f			and 	#$7F
.cf15	af15	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					_GXSICloseFail:
.cf1a	af1a	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cf1d	af1d					_GXSIFail:
.cf1d	af1d	38		sec				sec
.cf1e	af1e	60		rts				rts
.cf1f	af1f					_GXSIHide:
.cf1f	af1f	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf22	af22	85 36		sta $36				sta 	gxzTemp0
.cf24	af24	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.cf27	af27	85 37		sta $37				sta 	gxzTemp0+1
.cf29	af29	a9 00		lda #$00			lda 	#0
.cf2b	af2b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf2d	af2d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf30	af30	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.cf33	af33	09 80		ora #$80			ora 	#$80
.cf35	af35	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf38	af38	18		clc				clc
.cf39	af39	60		rts				rts
.cf3a	af3a					GXMoveSprite:
.cf3a	af3a	ad 82 06	lda $0682			lda 	gxSpritesOn
.cf3d	af3d	f0 65		beq $afa4			beq 	_GXSIFail
.cf3f	af3f	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf42	af42	f0 60		beq $afa4			beq 	_GXSIFail
.cf44	af44	85 37		sta $37				sta 	gxzTemp0+1
.cf46	af46	a0 04		ldy #$04			ldy 	#4
.cf48	af48	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cf4b	af4b	85 36		sta $36				sta 	gxzTemp0
.cf4d	af4d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf50	af50	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf53	af53	2a		rol a				rol 	a	 						; into bits 0,1.
.cf54	af54	2a		rol a				rol 	a
.cf55	af55	2a		rol a				rol 	a
.cf56	af56	29 03		and #$03			and 	#3
.cf58	af58	aa		tax				tax
.cf59	af59	bd a6 af	lda $afa6,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf5c	af5c	48		pha				pha
.cf5d	af5d	18		clc				clc
.cf5e	af5e	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf61	af61	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf63	af63	c8		iny				iny
.cf64	af64	ad 7b 06	lda $067b			lda 	gxX0+1
.cf67	af67	69 00		adc #$00			adc 	#0
.cf69	af69	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf6b	af6b	c8		iny				iny
.cf6c	af6c	68		pla				pla
.cf6d	af6d	18		clc				clc
.cf6e	af6e	6d 7c 06	adc $067c			adc 	gxY0
.cf71	af71	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf73	af73	a9 00		lda #$00			lda 	#0
.cf75	af75	69 00		adc #$00			adc 	#0
.cf77	af77	c8		iny				iny
.cf78	af78	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf7a	af7a	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf7d	af7d	6e 7a 06	ror $067a			ror 	gxX0
.cf80	af80	4e 7a 06	lsr $067a			lsr 	gxX0
.cf83	af83	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf86	af86	4e 7c 06	lsr $067c			lsr 	gxY0
.cf89	af89	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf8c	af8c	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x
.cf8f	af8f	29 80		and #$80			and 	#$80
.cf91	af91	0d 7a 06	ora $067a			ora 	gxX0
.cf94	af94	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf97	af97	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf9a	af9a	29 c0		and #$c0			and 	#$C0
.cf9c	af9c	0d 7c 06	ora $067c			ora 	gxY0
.cf9f	af9f	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cfa2	afa2	18		clc				clc
.cfa3	afa3	60		rts				rts
.cfa4	afa4					_GXSIFail:
.cfa4	afa4	38		sec				sec
.cfa5	afa5	60		rts				rts
.cfa6	afa6					_GXMSOffset:
>cfa6	afa6	1c						.byte 	32-8/2
>cfa7	afa7	18						.byte 	32-16/2
>cfa8	afa8	14						.byte 	32-24/2
>cfa9	afa9	10						.byte 	32-32/2
.cfaa	afaa					GXOpenBitmap:
.cfaa	afaa	78		sei				sei 								; no interrupts here
.cfab	afab	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cfad	afad	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cfb0	afb0	58		cli				cli
.cfb1	afb1	60		rts				rts
.cfb2	afb2					GXCloseBitmap:
.cfb2	afb2	78		sei				sei
.cfb3	afb3	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cfb6	afb6	85 0b		sta $0b				sta 	GXEditSlot
.cfb8	afb8	58		cli				cli
.cfb9	afb9	60		rts				rts
.cfba	afba					GXPositionCalc:
.cfba	afba	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cfbc	afbc	48		pha				pha
.cfbd	afbd	ad 7c 06	lda $067c			lda 	GXY0 						; gxzScreen = Y0
.cfc0	afc0	85 3c		sta $3c				sta 	gxzScreen
.cfc2	afc2	64 3d		stz $3d				stz 	gxzScreen+1
.cfc4	afc4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfc6	afc6	26 3d		rol $3d				rol 	gxzScreen+1
.cfc8	afc8	06 3c		asl $3c				asl 	gxzScreen
.cfca	afca	26 3d		rol $3d				rol 	gxzScreen+1
.cfcc	afcc	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfcd	afcd	65 3c		adc $3c				adc 	gxzScreen
.cfcf	afcf	85 3c		sta $3c				sta 	gxzScreen
.cfd1	afd1	90 02		bcc $afd5			bcc 	_GXPCNoCarry
.cfd3	afd3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfd5	afd5					_GXPCNoCarry:
.cfd5	afd5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfd7	afd7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfd9	afd9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfdb	afdb	85 36		sta $36				sta 	gxzTemp0
.cfdd	afdd	64 3d		stz $3d				stz 	gxzScreen+1
.cfdf	afdf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfe1	afe1					_GXPCMultiply32:
.cfe1	afe1	06 3c		asl $3c				asl 	gxzScreen
.cfe3	afe3	26 3d		rol $3d				rol 	gxzScreen+1
.cfe5	afe5	3a		dec a				dec 	a
.cfe6	afe6	d0 f9		bne $afe1			bne 	_GXPCMultiply32
.cfe8	afe8	18		clc				clc
.cfe9	afe9	ad 7a 06	lda $067a			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.cfec	afec	65 3c		adc $3c				adc 	gxzScreen
.cfee	afee	8d 8c 06	sta $068c			sta 	gsOffset
.cff1	aff1	ad 7b 06	lda $067b			lda 	GXX0+1
.cff4	aff4	65 3d		adc $3d				adc 	gxzScreen+1
.cff6	aff6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cff8	aff8	90 04		bcc $affe			bcc 	_GXPCNoOverflow
.cffa	affa	29 1f		and #$1f			and 	#$1F 						; fix it up
.cffc	affc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cffe	affe					_GXPCNoOverflow:
.cffe	affe	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.d000	b000	85 3d		sta $3d				sta 	gxzScreen+1
.d002	b002	64 3c		stz $3c				stz 	gxzScreen
.d004	b004	18		clc				clc
.d005	b005	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.d007	b007	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.d00a	b00a	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.d00c	b00c	68		pla				pla
.d00d	b00d	85 36		sta $36				sta 	gxzTemp0
.d00f	b00f	60		rts				rts
.d010	b010					GXMovePositionDown:
.d010	b010	18		clc				clc 								; add 320 to offset/temp+1
.d011	b011	ad 8c 06	lda $068c			lda 	gsOffset
.d014	b014	69 40		adc #$40			adc 	#64
.d016	b016	8d 8c 06	sta $068c			sta 	gsOffset
.d019	b019	a5 3d		lda $3d				lda 	gxzScreen+1
.d01b	b01b	69 01		adc #$01			adc 	#1
.d01d	b01d	85 3d		sta $3d				sta 	gxzScreen+1
.d01f	b01f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d021	b021	90 07		bcc $b02a			bcc 	_GXMPDExit
.d023	b023	38		sec				sec  								; next page
.d024	b024	e9 20		sbc #$20			sbc 	#$20
.d026	b026	85 3d		sta $3d				sta 	gxzScreen+1
.d028	b028	e6 0b		inc $0b				inc 	GXEditSlot
.d02a	b02a					_GXMPDExit:
.d02a	b02a	60		rts				rts
.d02b	b02b					GXCollide:
.d02b	b02b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d02d	b02d	aa		tax				tax
.d02e	b02e	05 37		ora $37				ora 	gxzTemp0+1
.d030	b030	29 c0		and #$c0			and 	#$C0
.d032	b032	38		sec				sec
.d033	b033	d0 53		bne $b088			bne 	_GXCollideFail 				; if either >= 64, fail.
.d035	b035	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d037	b037	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.d03a	b03a	1d 92 06	ora $0692,x			ora 	GXSpriteLow,x
.d03d	b03d	30 48		bmi $b087			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d03f	b03f	18		clc				clc 								; need to calculate sum of sizes.
.d040	b040	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y
.d043	b043	7d d2 06	adc $06d2,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d046	b046	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d048	b048	6a		ror a				ror 	a 							; 5/6/7
.d049	b049	4a		lsr a				lsr 	a 							; 4/5/6
.d04a	b04a	4a		lsr a				lsr 	a 							; 3/4/5
.d04b	b04b	4a		lsr a				lsr 	a 							; 2/3/4
.d04c	b04c	18		clc				clc
.d04d	b04d	69 08		adc #$08			adc 	#$08
.d04f	b04f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d050	b050	4a		lsr a				lsr 	a
.d051	b051	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d053	b053	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.d056	b056	29 3f		and #$3f			and 	#$3F
.d058	b058	85 39		sta $39				sta 	gxzTemp1+1
.d05a	b05a	38		sec				sec
.d05b	b05b	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.d05e	b05e	29 3f		and #$3f			and 	#$3F
.d060	b060	e5 39		sbc $39				sbc 	gxzTemp1+1
.d062	b062	b0 03		bcs $b067			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d064	b064	49 ff		eor #$ff			eor 	#$FF
.d066	b066	1a		inc a				inc 	a
.d067	b067					_GXCAbs1:
.d067	b067	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d069	b069	b0 1c		bcs $b087			bcs 	_GXOkayFail
.d06b	b06b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d06d	b06d	38		sec				sec 								; calculate |x1-x0|
.d06e	b06e	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y
.d071	b071	fd 92 06	sbc $0692,x			sbc 	GXSpriteLow,x
.d074	b074	b0 03		bcs $b079			bcs 	_GXCAbs2
.d076	b076	49 ff		eor #$ff			eor 	#$FF
.d078	b078	1a		inc a				inc 	a
.d079	b079					_GXCAbs2:
.d079	b079	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d07b	b07b	b0 0a		bcs $b087			bcs 	_GXOkayFail
.d07d	b07d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d07f	b07f	90 02		bcc $b083			bcc 	_GXCHaveLowest
.d081	b081	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d083	b083					_GXCHaveLowest:
.d083	b083	0a		asl a				asl 	a 							; scale to allow for >> 2
.d084	b084	0a		asl a				asl 	a
.d085	b085	18		clc				clc
.d086	b086	60		rts				rts
.d087	b087					_GXOkayFail:
.d087	b087	18		clc				clc
.d088	b088					_GXCollideFail:
.d088	b088	a9 ff		lda #$ff			lda 	#$FF
.d08a	b08a	60		rts				rts
.d08b	b08b					GXFindSprite:
.d08b	b08b	aa		tax				tax
.d08c	b08c	ad 85 06	lda $0685			lda 	GXSpritePage 				; access the base page of the sprite
.d08f	b08f	85 0b		sta $0b				sta 	GXEditSlot
.d091	b091	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d094	b094	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d097	b097	f0 33		beq $b0cc			beq 	_GXFSFail
.d099	b099	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d09c	b09c	8d 29 07	sta $0729			sta 	GXSpriteOffset+1
.d09f	b09f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d0a2	b0a2	48		pha				pha 								; save twice
.d0a3	b0a3	48		pha				pha
.d0a4	b0a4	29 03		and #$03			and 	#3 							; get sprite size
.d0a6	b0a6	8d 26 07	sta $0726			sta 	GXSizeBits 					; save raw (0-3)
.d0a9	b0a9	aa		tax				tax
.d0aa	b0aa	bd ce b0	lda $b0ce,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d0ad	b0ad	8d 25 07	sta $0725			sta 	GXSizePixels 					; save (8/16/24/32)
.d0b0	b0b0	68		pla				pla 								; get LUT
.d0b1	b0b1	4a		lsr a				lsr		a
.d0b2	b0b2	4a		lsr a				lsr		a
.d0b3	b0b3	29 03		and #$03			and 	#3
.d0b5	b0b5	8d 27 07	sta $0727			sta 	GXSpriteLUT
.d0b8	b0b8	68		pla				pla 								; address, neeeds to be x 4
.d0b9	b0b9	29 f0		and #$f0			and 	#$F0
.d0bb	b0bb	8d 28 07	sta $0728			sta 	GXSpriteOffset
.d0be	b0be	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c1	b0c1	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0c4	b0c4	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c7	b0c7	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0ca	b0ca	18		clc				clc
.d0cb	b0cb	60		rts				rts
.d0cc	b0cc					_GXFSFail:
.d0cc	b0cc	38		sec				sec
.d0cd	b0cd	60		rts				rts
.d0ce	b0ce					_GXFXSSTTable:
>d0ce	b0ce	08 10 18 20					.byte 	8,16,24,32
.0725						GXSizePixels:
>0725								.fill 	1
.0726						GXSizeBits:
>0726								.fill 	1
.0727						GXSpriteLUT:
>0727								.fill 	1
.0728						GXSpriteOffset:
>0728								.fill 	2
.d0d2	b0d2					GXSortXY:
.d0d2	b0d2	20 f0 b0	jsr $b0f0			jsr 	GXSortY 					; will be sorted on Y now
.d0d5	b0d5	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d0d8	b0d8	cd 7e 06	cmp $067e			cmp 	gxX1
.d0db	b0db	ad 7b 06	lda $067b			lda 	gXX0+1
.d0de	b0de	ed 7f 06	sbc $067f			sbc 	gXX1+1
.d0e1	b0e1	90 0c		bcc $b0ef			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0e3	b0e3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0e5	b0e5	a0 04		ldy #$04			ldy 	#4
.d0e7	b0e7	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ea	b0ea	e8		inx				inx
.d0eb	b0eb	c8		iny				iny
.d0ec	b0ec	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ef	b0ef					_GXSXYExit:
.d0ef	b0ef	60		rts				rts
.d0f0	b0f0					GXSortY:
.d0f0	b0f0	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0f3	b0f3	cd 80 06	cmp $0680			cmp 	gxY1
.d0f6	b0f6	90 0b		bcc $b103			bcc 	_GXSYSorted
.d0f8	b0f8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0fa	b0fa	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0fc	b0fc					_GXSwap1:
.d0fc	b0fc	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ff	b0ff	88		dey				dey
.d100	b100	ca		dex				dex
.d101	b101	10 f9		bpl $b0fc			bpl 	_GXSwap1
.d103	b103					_GXSYSorted:
.d103	b103	60		rts				rts
.d104	b104					GXSwapXY:
.d104	b104	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d107	b107	48		pha				pha
.d108	b108	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d10b	b10b	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d10e	b10e	68		pla				pla
.d10f	b10f	99 7a 06	sta $067a,y			sta 	gxX0,y
.d112	b112	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d113	b113					KeywordSet0:
>d113	b113	00 65					.text	0,$65,""               ; $80 !0:EOF
>d115	b115	00 58					.text	0,$58,""               ; $81 !1:SH1
>d117	b117	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d119	b119	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d11f	b11f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d127	b127	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d12d	b12d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d134	b134	05 41 44 45 45 4b 28			.text	5,$41,"DEEK("          ; $87 DEEK(
>d13b	b13b	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $88 EVENT(
>d143	b143	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $89 FALSE
>d14a	b14a	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $8a FRAC(
>d151	b151	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8b HIT(
>d157	b157	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>d15d	b15d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>d165	b165	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8e JOYB(
>d16c	b16c	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8f JOYX(
>d173	b173	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $90 JOYY(
>d17a	b17a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $91 LEFT$(
>d182	b182	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $92 LEN(
>d188	b188	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $93 MAX(
>d18e	b18e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $94 MID$(
>d195	b195	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $95 MIN(
>d19b	b19b	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $96 NOT(
>d1a1	b1a1	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $97 PEEK(
>d1a8	b1a8	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $98 PLAYING(
>d1b0	b1b0	47 28
>d1b2	b1b2	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $99 RANDOM(
>d1ba	b1ba	28
>d1bb	b1bb	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9a RIGHT$(
>d1c3	b1c3	28
>d1c4	b1c4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9b RND(
>d1ca	b1ca	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9c SGN(
>d1d0	b1d0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9d SPC(
>d1d6	b1d6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9e STR$(
>d1dd	b1dd	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9f TIMER(
>d1e5	b1e5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a0 TRUE
>d1eb	b1eb	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a1 VAL(
>d1f1	b1f1	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a2 FOR
>d1f6	b1f6	02 8f 49 46				.text	2,$8f,"IF"             ; $a3 IF
>d1fa	b1fa	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a4 PROC
>d200	b200	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a5 REPEAT
>d208	b208	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a6 WHILE
>d20f	b20f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a7 ENDIF
>d216	b216	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a8 ENDPROC
>d21e	b21e	43
>d21f	b21f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a9 NEXT
>d225	b225	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $aa THEN
>d22b	b22b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $ab UNTIL
>d232	b232	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $ac WEND
>d238	b238	02 9b 42 59				.text	2,$9b,"BY"             ; $ad BY
>d23c	b23c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ae CALL
>d242	b242	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $af CIRCLE
>d24a	b24a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b0 CLEAR
>d251	b251	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b1 CLS
>d256	b256	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b2 COLOR
>d25d	b25d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b3 COLOUR
>d265	b265	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b4 DATA
>d26b	b26b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b5 DIM
>d270	b270	04 23 44 4f 4b 45			.text	4,$23,"DOKE"           ; $b6 DOKE
>d276	b276	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b7 DOWNTO
>d27e	b27e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b8 ELSE
>d284	b284	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b9 FROM
>d28a	b28a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $ba GFX
>d28f	b28f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bb GOSUB
>d296	b296	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bc GOTO
>d29c	b29c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $bd HERE
>d2a2	b2a2	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $be IMAGE
>d2a9	b2a9	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $bf INPUT
>d2b0	b2b0	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c0 LET
>d2b5	b2b5	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c1 LINE
>d2bb	b2bb	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c2 LOCAL
>d2c2	b2c2	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c3 OFF
>d2c7	b2c7	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c4 ON
>d2cb	b2cb	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c5 OUTLINE
>d2d3	b2d3	45
>d2d4	b2d4	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c6 PALETTE
>d2dc	b2dc	45
>d2dd	b2dd	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c7 PLOT
>d2e3	b2e3	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $c8 POKE
>d2e9	b2e9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c9 PRINT
>d2f0	b2f0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ca READ
>d2f6	b2f6	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $cb RECT
>d2fc	b2fc	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $cc REM
>d301	b301	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $cd RETURN
>d309	b309	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $ce SOLID
>d310	b310	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $cf SOUND
>d317	b317	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d0 SPRITE
>d31f	b31f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d1 TEXT
>d325	b325	02 a3 54 4f				.text	2,$a3,"TO"             ; $d2 TO
>d329	b329	ff					.text	$FF
.d32a	b32a					KeywordSet1:
>d32a	b32a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d32c	b32c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d32e	b32e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d330	b330	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d338	b338	4c 45
>d33a	b33a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d342	b342	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d34a	b34a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d34f	b34f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d357	b357	45
>d358	b358	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d35c	b35c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d362	b362	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d368	b368	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d36d	b36d	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d373	b373	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d37b	b37b	45
>d37c	b37c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $8f SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $90 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $91 STOP
>d397	b397	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $92 ZAP
>d39c	b39c	ff					.text	$FF
.d39d	b39d					KeywordSet2:
>d39d	b39d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d39f	b39f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3a1	b3a1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3a3	b3a3	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3a8	b3a8	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3ad	b3ad	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3b2	b3b2	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3b7	b3b7	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3bc	b3bc	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3c1	b3c1	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3c6	b3c6	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3cb	b3cb	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3d0	b3d0	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3d5	b3d5	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3da	b3da	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3df	b3df	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3e4	b3e4	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3e9	b3e9	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d3ee	b3ee	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d3f3	b3f3	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d3f8	b3f8	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d3fd	b3fd	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d402	b402	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d407	b407	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d40c	b40c	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d411	b411	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d416	b416	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d41b	b41b	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d420	b420	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d425	b425	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d42a	b42a	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d42f	b42f	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d434	b434	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d439	b439	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d43e	b43e	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d443	b443	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d448	b448	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d44d	b44d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d452	b452	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d457	b457	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d45c	b45c	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d461	b461	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d466	b466	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d46b	b46b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d470	b470	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d475	b475	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d47a	b47a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d47f	b47f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d484	b484	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d489	b489	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d48e	b48e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d493	b493	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d498	b498	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d49d	b49d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4a2	b4a2	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4a7	b4a7	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4ac	b4ac	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4b1	b4b1	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4b6	b4b6	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4bb	b4bb	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4c0	b4c0	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4c5	b4c5	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4ca	b4ca	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4cf	b4cf	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4d4	b4d4	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4d9	b4d9	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4de	b4de	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4e3	b4e3	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4e8	b4e8	ff					.text	$FF
.d4e9	b4e9					Export_TKListConvertLine:
.d4e9	b4e9	48		pha				pha 								; save indent on the stack
.d4ea	b4ea	9c 1d 04	stz $041d			stz 	tbOffset
.d4ed	b4ed	9c 2d 04	stz $042d			stz 	tokenBuffer
.d4f0	b4f0	9c 29 04	stz $0429			stz 	currentListColour
.d4f3	b4f3	a9 89		lda #$89			lda 	#CLILineNumber+$80
.d4f5	b4f5	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d4f8	b4f8	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d4fa	b4fa	b1 30		lda ($30),y			lda 	(codePtr),y
.d4fc	b4fc	aa		tax				tax
.d4fd	b4fd	88		dey				dey
.d4fe	b4fe	b1 30		lda ($30),y			lda 	(codePtr),y
.d500	b500	20 e3 b6	jsr $b6e3			jsr 	LCLWriteNumberXA
.d503	b503	68		pla				pla 								; adjustment to indent
.d504	b504	48		pha				pha 								; save on stack
.d505	b505	10 0c		bpl $b513			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d507	b507	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d508	b508	6d 26 04	adc $0426			adc 	listIndent
.d50b	b50b	8d 26 04	sta $0426			sta 	listIndent
.d50e	b50e	10 03		bpl $b513			bpl 	_LCNoAdjust
.d510	b510	9c 26 04	stz $0426			stz 	listIndent
.d513	b513					_LCNoAdjust:
.d513	b513	18		clc				clc		 							; work out actual indent.
.d514	b514	ad 26 04	lda $0426			lda 	listIndent
.d517	b517	0a		asl a				asl 	a
.d518	b518	69 07		adc #$07			adc 	#7
.d51a	b51a	85 36		sta $36				sta 	zTemp0
.d51c	b51c					_LCPadOut:
.d51c	b51c	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d51e	b51e	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d521	b521	ad 1d 04	lda $041d			lda 	tbOffset
.d524	b524	c5 36		cmp $36				cmp 	zTemp0
.d526	b526	d0 f4		bne $b51c			bne 	_LCPadOut
.d528	b528	a0 03		ldy #$03			ldy 	#3 							; start position.
.d52a	b52a					_LCMainLoop:
.d52a	b52a	a9 8a		lda #$8a			lda 	#CLIPunctuation+$80
.d52c	b52c	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d52f	b52f	b1 30		lda ($30),y			lda 	(codePtr),y
.d531	b531	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d533	b533	f0 17		beq $b54c			beq 	_LCExit
.d535	b535	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d537	b537	90 1e		bcc $b557			bcc 	_LCDoubles
.d539	b539	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d53b	b53b	90 2a		bcc $b567			bcc 	_LCShiftPunc
.d53d	b53d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d53f	b53f	90 35		bcc $b576			bcc 	_LCPunctuation
.d541	b541	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d543	b543	90 51		bcc $b596			bcc 	_LCIdentifiers
.d545	b545	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d547	b547	90 73		bcc $b5bc			bcc 	_LCTokens
.d549	b549	4c 1c b6	jmp $b61c			jmp 	_LCData 					; 254-5 are data objects
.d54c	b54c					_LCExit:
.d54c	b54c	68		pla				pla 								; get old indent adjust
.d54d	b54d	30 07		bmi $b556			bmi 	_LCExit2
.d54f	b54f	18		clc				clc 								; add to indent if +ve
.d550	b550	6d 26 04	adc $0426			adc 	listIndent
.d553	b553	8d 26 04	sta $0426			sta 	listIndent
.d556	b556					_LCExit2:
.d556	b556	60		rts				rts
.d557	b557					_LCDoubles:
.d557	b557	48		pha				pha
.d558	b558	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d559	b559	29 02		and #$02			and 	#2
.d55b	b55b	09 3c		ora #$3c			ora 	#60 						; make < >
.d55d	b55d	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d560	b560	68		pla				pla 								; restore, do lower bit
.d561	b561	29 03		and #$03			and 	#3
.d563	b563	09 3c		ora #$3c			ora 	#60
.d565	b565	80 0f		bra $b576			bra		_LCPunctuation 				; print, increment, loop
.d567	b567					_LCShiftPunc:
.d567	b567	aa		tax				tax 								; save in X
.d568	b568	29 07		and #$07			and 	#7 							; lower 3 bits
.d56a	b56a	f0 02		beq $b56e			beq 	_LCNoAdd
.d56c	b56c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d56e	b56e					_LCNoAdd:
.d56e	b56e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d570	b570	90 02		bcc $b574			bcc 	_LCNoAdd2
.d572	b572	09 20		ora #$20			ora 	#32 						; adds $20
.d574	b574					_LCNoAdd2:
.d574	b574	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d576	b576					_LCPunctuation:
.d576	b576	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d578	b578	d0 03		bne $b57d			bne 	_LCPContinue
.d57a	b57a	20 91 b6	jsr $b691			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d57d	b57d					_LCPContinue:
.d57d	b57d	c9 2e		cmp #$2e			cmp 	#'.'
.d57f	b57f	f0 08		beq $b589			beq 	_LCPIsConstant
.d581	b581	c9 30		cmp #$30			cmp 	#'0'
.d583	b583	90 0b		bcc $b590			bcc 	_LCPNotConstant
.d585	b585	c9 3a		cmp #$3a			cmp 	#'9'+1
.d587	b587	b0 07		bcs $b590			bcs 	_LCPNotConstant
.d589	b589					_LCPIsConstant:
.d589	b589	48		pha				pha
.d58a	b58a	a9 8d		lda #$8d			lda 	#CLIConstant+$80
.d58c	b58c	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d58f	b58f	68		pla				pla
.d590	b590					_LCPNotConstant:
.d590	b590	c8		iny				iny 								; consume character
.d591	b591	20 7b b6	jsr $b67b			jsr 	LCLWrite 					; write it out.
.d594	b594	80 94		bra $b52a			bra 	_LCMainLoop 				; go round again.
.d596	b596					_LCIdentifiers:
.d596	b596	18		clc				clc 								; convert to physical address
.d597	b597	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d599	b599	85 37		sta $37				sta 	zTemp0+1
.d59b	b59b	c8		iny				iny
.d59c	b59c	b1 30		lda ($30),y			lda 	(codePtr),y
.d59e	b59e	85 36		sta $36				sta 	zTemp0
.d5a0	b5a0	c8		iny				iny
.d5a1	b5a1	5a		phy				phy 								; save position
.d5a2	b5a2	a9 87		lda #$87			lda 	#CLIIdentifier+$80
.d5a4	b5a4	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d5a7	b5a7	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5a9	b5a9					_LCOutIdentifier:
.d5a9	b5a9	c8		iny				iny
.d5aa	b5aa	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5ac	b5ac	29 7f		and #$7f			and 	#$7F
.d5ae	b5ae	20 cd b6	jsr $b6cd			jsr 	LCLLowerCase
.d5b1	b5b1	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d5b4	b5b4	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5b6	b5b6	10 f1		bpl $b5a9			bpl 	_LCOutIdentifier
.d5b8	b5b8	7a		ply				ply 								; restore position
.d5b9	b5b9	4c 2a b5	jmp $b52a			jmp 	_LCMainLoop
.d5bc	b5bc					_LCTokens:
.d5bc	b5bc	aa		tax				tax 								; token in X
.d5bd	b5bd	a9 9d		lda #$9d			lda 	#((KeywordSet2) & $FF)
.d5bf	b5bf	85 36		sta $36				sta 	0+zTemp0
.d5c1	b5c1	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5c3	b5c3	85 37		sta $37				sta 	1+zTemp0
.d5c5	b5c5	e0 82		cpx #$82			cpx 	#$82
.d5c7	b5c7	f0 16		beq $b5df			beq 	_LCUseShift
.d5c9	b5c9	a9 2a		lda #$2a			lda 	#((KeywordSet1) & $FF)
.d5cb	b5cb	85 36		sta $36				sta 	0+zTemp0
.d5cd	b5cd	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5cf	b5cf	85 37		sta $37				sta 	1+zTemp0
.d5d1	b5d1	e0 81		cpx #$81			cpx 	#$81
.d5d3	b5d3	f0 0a		beq $b5df			beq 	_LCUseShift
.d5d5	b5d5	a9 13		lda #$13			lda 	#((KeywordSet0) & $FF)
.d5d7	b5d7	85 36		sta $36				sta 	0+zTemp0
.d5d9	b5d9	a9 b1		lda #$b1			lda 	#((KeywordSet0) >> 8)
.d5db	b5db	85 37		sta $37				sta 	1+zTemp0
.d5dd	b5dd	80 01		bra $b5e0			bra 	_LCNoShift
.d5df	b5df					_LCUseShift:
.d5df	b5df	c8		iny				iny
.d5e0	b5e0					_LCNoShift:
.d5e0	b5e0	20 a5 b6	jsr $b6a5			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5e3	b5e3	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e5	b5e5	aa		tax				tax 								; into X
.d5e6	b5e6					_LCFindText:
.d5e6	b5e6	ca		dex				dex
.d5e7	b5e7	10 0e		bpl $b5f7			bpl 	_LCFoundText 				; found text.
.d5e9	b5e9	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5eb	b5eb	1a		inc a				inc 	a 							; one extra for size
.d5ec	b5ec	38		sec				sec 								; one extra for checksum
.d5ed	b5ed	65 36		adc $36				adc 	zTemp0 						; go to next token
.d5ef	b5ef	85 36		sta $36				sta 	zTemp0
.d5f1	b5f1	90 f3		bcc $b5e6			bcc 	_LCFindText
.d5f3	b5f3	e6 37		inc $37				inc 	zTemp0+1
.d5f5	b5f5	80 ef		bra $b5e6			bra 	_LCFindText
.d5f7	b5f7					_LCFoundText:
.d5f7	b5f7	5a		phy				phy 								; save List position
.d5f8	b5f8	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d5fa	b5fa	aa		tax				tax
.d5fb	b5fb	a9 83		lda #$83			lda 	#CLIToken+$80
.d5fd	b5fd	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d600	b600	a0 02		ldy #$02			ldy 	#2
.d602	b602					_LCCopyToken:
.d602	b602	b1 36		lda ($36),y			lda 	(zTemp0),y
.d604	b604	20 cd b6	jsr $b6cd			jsr 	LCLLowerCase
.d607	b607	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d60a	b60a	c8		iny				iny
.d60b	b60b	ca		dex				dex
.d60c	b60c	d0 f4		bne $b602			bne 	_LCCopyToken
.d60e	b60e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d610	b610	f0 05		beq $b617			beq 	_LCNoSpace
.d612	b612	a9 20		lda #$20			lda 	#' '
.d614	b614	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d617	b617					_LCNoSpace:
.d617	b617	7a		ply				ply 								; restore position.
.d618	b618	c8		iny				iny 								; consume token
.d619	b619	4c 2a b5	jmp $b52a			jmp 	_LCMainLoop 				; and go around again.
.d61c	b61c					_LCData:
.d61c	b61c	48		pha				pha 								; save type $FE/$FF
.d61d	b61d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d61f	b61f	c9 fe		cmp #$fe			cmp 	#$FE
.d621	b621	f0 22		beq $b645			beq 	_LCHaveOpener
.d623	b623	a2 22		ldx #$22			ldx 	#'"'
.d625	b625	a9 81		lda #$81			lda 	#CLIData+$80
.d627	b627	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d62a	b62a	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d62c	b62c	d0 17		bne $b645			bne 	_LCHaveOpener
.d62e	b62e	88		dey				dey 								; what precedes it ?
.d62f	b62f	b1 30		lda ($30),y			lda 	(codePtr),y
.d631	b631	c8		iny				iny
.d632	b632	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d634	b634	d0 0f		bne $b645			bne 	_LCHaveOpener
.d636	b636	a9 09		lda #$09			lda 	#9 							; tab
.d638	b638	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d63b	b63b	a9 97		lda #$97			lda 	#$90+CLIBComment
.d63d	b63d	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d640	b640	a9 80		lda #$80			lda 	#CLIFComment+$80
.d642	b642	20 72 b6	jsr $b672			jsr 	LCLWriteColour
.d645	b645					_LCHaveOpener:
.d645	b645	8a		txa				txa 								; output prefix (# or ")
.d646	b646	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d649	b649	c8		iny				iny 								; get count
.d64a	b64a	b1 30		lda ($30),y			lda 	(codePtr),y
.d64c	b64c	aa		tax				tax
.d64d	b64d	c8		iny				iny 								; point at first character
.d64e	b64e					_LCOutData:
.d64e	b64e	b1 30		lda ($30),y			lda 	(codePtr),y
.d650	b650	c9 00		cmp #$00			cmp 	#0
.d652	b652	f0 03		beq $b657			beq 	_LCNoPrint
.d654	b654	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d657	b657					_LCNoPrint:
.d657	b657	c8		iny				iny
.d658	b658	ca		dex				dex
.d659	b659	d0 f3		bne $b64e			bne 	_LCOutData
.d65b	b65b	68		pla				pla 								; closing " required ?
.d65c	b65c	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d65e	b65e	d0 0f		bne $b66f			bne 	_LCNoQuote
.d660	b660	a9 22		lda #$22			lda 	#'"'
.d662	b662	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d665	b665	ad 6f 06	lda $066f			lda 	EXTTextColour
.d668	b668	29 0f		and #$0f			and 	#$0F
.d66a	b66a	09 90		ora #$90			ora 	#$90
.d66c	b66c	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d66f	b66f					_LCNoQuote:
.d66f	b66f	4c 2a b5	jmp $b52a			jmp 	_LCMainLoop
.d672	b672					LCLWriteColour:
.d672	b672	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d675	b675	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d678	b678	d0 01		bne $b67b			bne 	LCLWrite 					; if different, output it
.d67a	b67a	60		rts				rts
.d67b	b67b					LCLWrite:
.d67b	b67b	da		phx				phx
.d67c	b67c	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d67f	b67f	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d682	b682	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d685	b685	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d688	b688	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d68a	b68a	30 03		bmi $b68f			bmi 	_LCLNoColour
.d68c	b68c	8d 27 04	sta $0427			sta 	LCLastCharacter
.d68f	b68f					_LCLNoColour:
.d68f	b68f	fa		plx				plx
.d690	b690	60		rts				rts
.d691	b691					LCLDeleteLastSpace:
.d691	b691	48		pha				pha
.d692	b692	da		phx				phx
.d693	b693	ae 1d 04	ldx $041d			ldx 	tbOffset
.d696	b696	f0 0a		beq $b6a2			beq 	_LCDLSExit
.d698	b698	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d69b	b69b	c9 20		cmp #$20			cmp 	#' '
.d69d	b69d	d0 03		bne $b6a2			bne 	_LCDLSExit
.d69f	b69f	ce 1d 04	dec $041d			dec 	tbOffset
.d6a2	b6a2					_LCDLSExit:
.d6a2	b6a2	fa		plx				plx
.d6a3	b6a3	68		pla				pla
.d6a4	b6a4	60		rts				rts
.d6a5	b6a5					LCLCheckSpaceRequired:
.d6a5	b6a5	ad 27 04	lda $0427			lda 	LCLastCharacter 			; check last character
.d6a8	b6a8	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6aa	b6aa	f0 1b		beq $b6c7			beq 	_LCCSRSpace
.d6ac	b6ac	c9 29		cmp #$29			cmp 	#')'
.d6ae	b6ae	f0 17		beq $b6c7			beq 	_LCCSRSpace
.d6b0	b6b0	c9 23		cmp #$23			cmp 	#'#'
.d6b2	b6b2	f0 13		beq $b6c7			beq 	_LCCSRSpace
.d6b4	b6b4	20 cd b6	jsr $b6cd			jsr 	LCLLowerCase 				; saves a little effort
.d6b7	b6b7	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6b9	b6b9	90 11		bcc $b6cc			bcc 	_LCCSRExit
.d6bb	b6bb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6bd	b6bd	90 08		bcc $b6c7			bcc 	_LCCSRSpace
.d6bf	b6bf	c9 61		cmp #$61			cmp 	#"a"
.d6c1	b6c1	90 09		bcc $b6cc			bcc 	_LCCSRExit
.d6c3	b6c3	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6c5	b6c5	b0 05		bcs $b6cc			bcs 	_LCCSRExit
.d6c7	b6c7					_LCCSRSpace:
.d6c7	b6c7	a9 20		lda #$20			lda 	#' '
.d6c9	b6c9	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d6cc	b6cc					_LCCSRExit:
.d6cc	b6cc	60		rts				rts
.d6cd	b6cd					LCLLowerCase:
.d6cd	b6cd	c9 41		cmp #$41			cmp 	#"A"
.d6cf	b6cf	90 06		bcc $b6d7			bcc 	_LCLLCOut
.d6d1	b6d1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6d3	b6d3	b0 02		bcs $b6d7			bcs 	_LCLLCOut
.d6d5	b6d5	69 20		adc #$20			adc 	#$20
.d6d7	b6d7					_LCLLCOut:
.d6d7	b6d7	60		rts				rts
.d6d8	b6d8					LCLUpperCase:
.d6d8	b6d8	c9 61		cmp #$61			cmp 	#"a"
.d6da	b6da	90 06		bcc $b6e2			bcc 	_LCLUCOut
.d6dc	b6dc	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6de	b6de	b0 02		bcs $b6e2			bcs 	_LCLUCOut
.d6e0	b6e0	e9 1f		sbc #$1f			sbc 	#$1F
.d6e2	b6e2					_LCLUCOut:
.d6e2	b6e2	60		rts				rts
.d6e3	b6e3					LCLWriteNumberXA:
.d6e3	b6e3	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6e5	b6e5					_LCLWNLoop1:
.d6e5	b6e5	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6e7	b6e7					_LCLWNLoop2:
.d6e7	b6e7	48		pha				pha 								; save initial LSB
.d6e8	b6e8	38		sec				sec
.d6e9	b6e9	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6eb	b6eb	f9 1c b7	sbc $b71c,y			sbc 	_LCLWNTable,y
.d6ee	b6ee	48		pha				pha
.d6ef	b6ef	8a		txa				txa
.d6f0	b6f0	f9 1d b7	sbc $b71d,y			sbc 	_LCLWNTable+1,y
.d6f3	b6f3	90 07		bcc $b6fc			bcc 	_LCLWNUnderflow
.d6f5	b6f5	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d6f7	b6f7	aa		tax				tax 								; update X
.d6f8	b6f8	68		pla				pla 								; restore A
.d6f9	b6f9	7a		ply				ply 								; throw original
.d6fa	b6fa	80 eb		bra $b6e7			bra 	_LCLWNLoop2 				; try again.
.d6fc	b6fc					_LCLWNUnderflow:
.d6fc	b6fc	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d6fe	b6fe	d0 06		bne $b706			bne 	_LCLWNOut
.d700	b700	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d703	b703	3a		dec a				dec 	a
.d704	b704	f0 04		beq $b70a			beq 	_LCLWNNext
.d706	b706					_LCLWNOut:
.d706	b706	98		tya				tya
.d707	b707	20 16 b7	jsr $b716			jsr 	_LCLWNOutDigit
.d70a	b70a					_LCLWNNext:
.d70a	b70a	7a		ply				ply 							 	; restore original value.
.d70b	b70b	68		pla				pla
.d70c	b70c	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d70e	b70e	c8		iny				iny
.d70f	b70f	c8		iny				iny
.d710	b710	84 37		sty $37				sty 	zTemp0+1
.d712	b712	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d714	b714	d0 cf		bne $b6e5			bne 	_LCLWNLoop1
.d716	b716					_LCLWNOutDigit:
.d716	b716	09 30		ora #$30			ora 	#'0'
.d718	b718	20 7b b6	jsr $b67b			jsr 	LCLWrite
.d71b	b71b	60		rts				rts
.d71c	b71c					_LCLWNTable:
>d71c	b71c	10 27						.word 	10000
>d71e	b71e	e8 03						.word 	1000
>d720	b720	64 00						.word 	100
>d722	b722	0a 00						.word 	10
.d724	b724					TOKSearchTable:
.d724	b724	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d726	b726	85 36		sta $36				sta 	zTemp0
.d728	b728	a0 00		ldy #$00			ldy 	#0
.d72a	b72a	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d72c	b72c	85 38		sta $38				sta 	zTemp1
.d72e	b72e					_TSTLoop:
.d72e	b72e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d730	b730	30 49		bmi $b77b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d732	b732	f0 2e		beq $b762			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d734	b734	c8		iny				iny 								; get the hash
.d735	b735	b1 36		lda ($36),y			lda 	(zTemp0),y
.d737	b737	88		dey				dey
.d738	b738	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d73b	b73b	d0 25		bne $b762			bne 	_TSTNext
.d73d	b73d	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d740	b740	38		sec				sec
.d741	b741	ed 00 04	sbc $0400			sbc 	identStart
.d744	b744	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d746	b746	d0 1a		bne $b762			bne 	_TSTNext
.d748	b748	5a		phy				phy 								; save Y , we might fail to match.
.d749	b749	c8		iny				iny 								; point to text
.d74a	b74a	c8		iny				iny
.d74b	b74b	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d74e	b74e					_TSTCompareName:
.d74e	b74e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d751	b751	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d753	b753	d0 0c		bne $b761			bne 	_TSTNextPullY 				; fail, pullY and do next
.d755	b755	e8		inx				inx
.d756	b756	c8		iny				iny
.d757	b757	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d75a	b75a	d0 f2		bne $b74e			bne 	_TSTCompareName
.d75c	b75c	7a		ply				ply 								; throw Y
.d75d	b75d	a5 38		lda $38				lda 	zTemp1 						; get token #
.d75f	b75f	38		sec				sec 								; return with CS = passed.
.d760	b760	60		rts				rts
.d761	b761					_TSTNextPullY:
.d761	b761	7a		ply				ply 								; restore current, fall through.
.d762	b762					_TSTNext:
.d762	b762	e6 38		inc $38				inc 	zTemp1 						; token counter
.d764	b764	98		tya				tya
.d765	b765	18		clc				clc
.d766	b766	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d768	b768	1a		inc a				inc 	a 							; +1
.d769	b769	1a		inc a				inc 	a 							; +2
.d76a	b76a	a8		tay				tay
.d76b	b76b	10 c1		bpl $b72e			bpl 	_TSTLoop 					; if Y < $80 loop back
.d76d	b76d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d76e	b76e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d770	b770	18		clc				clc  								; but have tables > 255 bytes
.d771	b771	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d773	b773	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d775	b775	90 b7		bcc $b72e			bcc 	_TSTLoop
.d777	b777	e6 37		inc $37				inc 	zTemp0+1
.d779	b779	80 b3		bra $b72e			bra 	_TSTLoop
.d77b	b77b					_TSTFail:
.d77b	b77b	18		clc				clc
.d77c	b77c	60		rts				rts
.d77d	b77d					Export_TKTokeniseLine:
.d77d	b77d	20 05 b9	jsr $b905			jsr 	LCLFixLineBufferCase 		; fix line case
.d780	b780	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d782	b782	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d785	b785	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d788	b788	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d78b	b78b	a2 ff		ldx #$ff			ldx 	#$FF
.d78d	b78d					_TKFindFirst:
.d78d	b78d	e8		inx				inx
.d78e	b78e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d791	b791	f0 79		beq $b80c			beq 	_TKExit
.d793	b793	c9 20		cmp #$20			cmp 	#' '
.d795	b795	90 f6		bcc $b78d			bcc 	_TKFindFirst
.d797	b797	c9 30		cmp #$30			cmp 	#'0'
.d799	b799	90 07		bcc $b7a2			bcc 	_TKNoLineNumber
.d79b	b79b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d79d	b79d	b0 03		bcs $b7a2			bcs 	_TKNoLineNumber
.d79f	b79f	20 2f b9	jsr $b92f			jsr 	TOKExtractLineNumber
.d7a2	b7a2					_TKNoLineNumber:
.d7a2	b7a2					_TKTokeniseLoop:
.d7a2	b7a2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7a5	b7a5	f0 65		beq $b80c			beq 	_TKExit
.d7a7	b7a7	e8		inx				inx
.d7a8	b7a8	c9 20		cmp #$20			cmp 	#' '
.d7aa	b7aa	f0 f6		beq $b7a2			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7ac	b7ac	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7ad	b7ad	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7af	b7af	f0 61		beq $b812			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7b1	b7b1	c9 41		cmp #$41			cmp 	#'A'
.d7b3	b7b3	90 04		bcc $b7b9			bcc 	_TKTokenisePunctuation
.d7b5	b7b5	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7b7	b7b7	90 59		bcc $b812			bcc 	_TKTokeniseIdentifier
.d7b9	b7b9					_TKTokenisePunctuation:
.d7b9	b7b9	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7bb	b7bb	f0 27		beq $b7e4			beq 	_TKString
.d7bd	b7bd	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7bf	b7bf	f0 28		beq $b7e9			beq 	_TKHexConstant
.d7c1	b7c1	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7c3	b7c3	f0 29		beq $b7ee			beq 	_TKCheckDouble
.d7c5	b7c5	c9 3e		cmp #$3e			cmp 	#'>'
.d7c7	b7c7	f0 25		beq $b7ee			beq 	_TKCheckDouble
.d7c9	b7c9					_TKStandardPunctuation:
.d7c9	b7c9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7cc	b7cc	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7ce	b7ce	90 0e		bcc $b7de			bcc 	_TKNoShift
.d7d0	b7d0	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7d1	b7d1	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7d3	b7d3	85 36		sta $36				sta 	zTemp0
.d7d5	b7d5	68		pla				pla
.d7d6	b7d6	29 20		and #$20			and 	#32 						; bit 5
.d7d8	b7d8	4a		lsr a				lsr 	a 							; shift into bit 3
.d7d9	b7d9	4a		lsr a				lsr 	a
.d7da	b7da	05 36		ora $36				ora 	zTemp0
.d7dc	b7dc	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7de	b7de					_TKNoShift:
.d7de	b7de	20 74 b9	jsr $b974			jsr 	TOKWriteByte 				; write the punctuation character
.d7e1	b7e1	e8		inx				inx 								; consume the character
.d7e2	b7e2	80 be		bra $b7a2			bra 	_TKTokeniseLoop 			; and loop round again.
.d7e4	b7e4					_TKString:
.d7e4	b7e4	20 94 b8	jsr $b894			jsr 	TOKTokenString
.d7e7	b7e7	80 b9		bra $b7a2			bra 	_TKTokeniseLoop
.d7e9	b7e9					_TKHexConstant:
.d7e9	b7e9	20 cf b8	jsr $b8cf			jsr 	TOKHexConstant
.d7ec	b7ec	80 b4		bra $b7a2			bra 	_TKTokeniseLoop
.d7ee	b7ee					_TKCheckDouble:
.d7ee	b7ee	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d7f1	b7f1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d7f3	b7f3	90 d4		bcc $b7c9			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d7f5	b7f5	c9 3f		cmp #$3f			cmp 	#'>'+1
.d7f7	b7f7	b0 d0		bcs $b7c9			bcs 	_TKStandardPunctuation
.d7f9	b7f9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d7fc	b7fc	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d7fe	b7fe	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d7ff	b7ff	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d802	b802	38		sec				sec
.d803	b803	e9 3c		sbc #$3c			sbc 	#'<'
.d805	b805	20 74 b9	jsr $b974			jsr 	TOKWriteByte 				; this is in the range 0-7
.d808	b808	e8		inx				inx 								; consume both
.d809	b809	e8		inx				inx
.d80a	b80a	80 96		bra $b7a2			bra 	_TKTokeniseLoop
.d80c	b80c	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d80e	b80e	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d811	b811	60		rts				rts
.d812	b812					_TKTokeniseIdentifier:
.d812	b812	8e 00 04	stx $0400			stx 	identStart 					; save start
.d815	b815	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d818	b818					_TKCheckLoop:
.d818	b818	e8		inx				inx 								; look at next, we know first is identifier already.
.d819	b819	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d81c	b81c	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d81e	b81e	f0 f8		beq $b818			beq 	_TKCheckLoop
.d820	b820	c9 30		cmp #$30			cmp	 	#"0"
.d822	b822	90 0c		bcc $b830			bcc 	_TKEndIdentifier
.d824	b824	c9 3a		cmp #$3a			cmp 	#"9"+1
.d826	b826	90 f0		bcc $b818			bcc 	_TKCheckLoop
.d828	b828	c9 41		cmp #$41			cmp	 	#"A"
.d82a	b82a	90 04		bcc $b830			bcc 	_TKEndIdentifier
.d82c	b82c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d82e	b82e	90 e8		bcc $b818			bcc 	_TKCheckLoop
.d830	b830					_TKEndIdentifier:
.d830	b830	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d833	b833	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d835	b835	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d837	b837	f0 06		beq $b83f			beq 	_TKHasTypeCharacter
.d839	b839	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d83b	b83b	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d83d	b83d	d0 07		bne $b846			bne 	_TKNoTypeCharacter
.d83f	b83f					_TKHasTypeCharacter:
.d83f	b83f	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d842	b842	e8		inx				inx 								; consume the type character
.d843	b843	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d846	b846					_TKNoTypeCharacter:
.d846	b846	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d848	b848	d0 09		bne $b853			bne 	_TKNoArray
.d84a	b84a	e8		inx				inx 								; skip the (
.d84b	b84b	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d84e	b84e	09 04		ora #$04			ora 	#$04
.d850	b850	8d 04 04	sta $0404			sta 	identTypeByte
.d853	b853					_TKNoArray:
.d853	b853	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d856	b856	20 f0 b8	jsr $b8f0			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d859	b859	a0 b1		ldy #$b1			ldy 	#(KeywordSet0) >> 8
.d85b	b85b	a9 13		lda #$13			lda 	#(KeywordSet0) & $FF
.d85d	b85d	20 24 b7	jsr $b724			jsr 	TOKSearchTable
.d860	b860	a2 00		ldx #$00			ldx 	#0
.d862	b862	b0 1f		bcs $b883			bcs 	_TKFoundToken
.d864	b864	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d866	b866	a9 2a		lda #$2a			lda 	#(KeywordSet1) & $FF
.d868	b868	20 24 b7	jsr $b724			jsr 	TOKSearchTable
.d86b	b86b	a2 81		ldx #$81			ldx 	#$81
.d86d	b86d	b0 14		bcs $b883			bcs 	_TKFoundToken
.d86f	b86f	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d871	b871	a9 9d		lda #$9d			lda 	#(KeywordSet2) & $FF
.d873	b873	20 24 b7	jsr $b724			jsr 	TOKSearchTable
.d876	b876	a2 82		ldx #$82			ldx 	#$82
.d878	b878	b0 09		bcs $b883			bcs 	_TKFoundToken
.d87a	b87a	20 80 b9	jsr $b980			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d87d	b87d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d880	b880	4c a2 b7	jmp $b7a2			jmp 	_TKTokeniseLoop 			; and go round again.
.d883	b883					_TKFoundToken:
.d883	b883	48		pha				pha 								; save token
.d884	b884	8a		txa				txa 								; shift in X, is there one ?
.d885	b885	f0 03		beq $b88a			beq 	_TKNoTShift
.d887	b887	20 74 b9	jsr $b974			jsr 	TOKWriteByte 				; if so, write it out
.d88a	b88a					_TKNoTShift:
.d88a	b88a	68		pla				pla 								; restore and write token
.d88b	b88b	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d88e	b88e	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d891	b891	4c a2 b7	jmp $b7a2			jmp 	_TKTokeniseLoop 			; and go round again.
.d894	b894					TOKTokenString:
.d894	b894	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d896	b896	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d899	b899	e8		inx				inx									; start of quoted string.
.d89a	b89a	da		phx				phx 								; push start of string on top
.d89b	b89b	ca		dex				dex 								; because we pre-increment
.d89c	b89c					_TSFindEnd:
.d89c	b89c	e8		inx				inx
.d89d	b89d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8a0	b8a0	f0 04		beq $b8a6			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8a2	b8a2	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8a4	b8a4	d0 f6		bne $b89c			bne 	_TSFindEnd
.d8a6	b8a6					_TSEndOfString:
.d8a6	b8a6	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8a7	b8a7	48		pha				pha 								; save terminating character
.d8a8	b8a8	20 b0 b8	jsr $b8b0			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d8ab	b8ab	68		pla				pla 								; terminating character
.d8ac	b8ac	f0 01		beq $b8af			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d8ae	b8ae	e8		inx				inx
.d8af	b8af					_TSNotQuote:
.d8af	b8af	60		rts				rts
.d8b0	b8b0					TOKWriteBlockXY:
.d8b0	b8b0	86 36		stx $36				stx 	zTemp0 						; save end character
.d8b2	b8b2	98		tya				tya 								; use 2's complement to work out the byte size
.d8b3	b8b3	49 ff		eor #$ff			eor 	#$FF
.d8b5	b8b5	38		sec				sec
.d8b6	b8b6	65 36		adc $36				adc 	zTemp0
.d8b8	b8b8	1a		inc a				inc 	a 							; one extra for NULL
.d8b9	b8b9	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d8bc	b8bc					_TOBlockLoop:
.d8bc	b8bc	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d8be	b8be	f0 09		beq $b8c9			beq 	_TOBlockExit
.d8c0	b8c0	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d8c3	b8c3	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d8c6	b8c6	c8		iny				iny
.d8c7	b8c7	80 f3		bra $b8bc			bra 	_TOBlockLoop
.d8c9	b8c9					_TOBlockExit:
.d8c9	b8c9	a9 00		lda #$00			lda 	#0 							; add NULL.
.d8cb	b8cb	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d8ce	b8ce	60		rts				rts
.d8cf	b8cf					TOKHexConstant:
.d8cf	b8cf	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d8d1	b8d1	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d8d4	b8d4	e8		inx				inx									; start of quoted string.
.d8d5	b8d5	da		phx				phx 								; push start of constant on top
.d8d6	b8d6	ca		dex				dex
.d8d7	b8d7					_THFindLoop:
.d8d7	b8d7	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d8d8	b8d8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d8db	b8db	c9 30		cmp #$30			cmp 	#"0"
.d8dd	b8dd	90 0c		bcc $b8eb			bcc 	_THFoundEnd
.d8df	b8df	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8e1	b8e1	90 f4		bcc $b8d7			bcc 	_THFindLoop
.d8e3	b8e3	c9 41		cmp #$41			cmp 	#"A"
.d8e5	b8e5	90 04		bcc $b8eb			bcc 	_THFoundEnd
.d8e7	b8e7	c9 47		cmp #$47			cmp 	#"F"+1
.d8e9	b8e9	90 ec		bcc $b8d7			bcc 	_THFindLoop
.d8eb	b8eb					_THFoundEnd:
.d8eb	b8eb	7a		ply				ply 								; restore start
.d8ec	b8ec	20 b0 b8	jsr $b8b0			jsr 	TOKWriteBlockXY 			; output the block
.d8ef	b8ef	60		rts				rts
.d8f0	b8f0					TOKCalculateHash:
.d8f0	b8f0	da		phx				phx
.d8f1	b8f1	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d8f4	b8f4	a9 00		lda #$00			lda 	#0
.d8f6	b8f6					_TCHLoop:
.d8f6	b8f6	18		clc				clc
.d8f7	b8f7	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d8fa	b8fa	e8		inx				inx
.d8fb	b8fb	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d8fe	b8fe	d0 f6		bne $b8f6			bne 	_TCHLoop
.d900	b900	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d903	b903	fa		plx				plx
.d904	b904	60		rts				rts
.d905	b905					LCLFixLineBufferCase:
.d905	b905	a2 00		ldx #$00			ldx 	#0
.d907	b907					_FLBCLoop:
.d907	b907	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d90a	b90a	f0 22		beq $b92e			beq 	_FLBCExit 					; end of string.
.d90c	b90c	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d90e	b90e	f0 11		beq $b921			beq 	_FLBCInQuotes
.d910	b910	e8		inx				inx
.d911	b911	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d913	b913	90 f2		bcc $b907			bcc 	_FLBCLoop
.d915	b915	c9 7b		cmp #$7b			cmp 	#'z'+1
.d917	b917	b0 ee		bcs $b907			bcs 	_FLBCLoop
.d919	b919	38		sec				sec 								; make U/C
.d91a	b91a	e9 20		sbc #$20			sbc 	#32
.d91c	b91c	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d91f	b91f	80 e6		bra $b907			bra 	_FLBCLoop
.d921	b921					_FLBCInQuotes:
.d921	b921	e8		inx				inx 								; advance
.d922	b922	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d925	b925	f0 07		beq $b92e			beq 	_FLBCExit 					; exit on EOS
.d927	b927	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d929	b929	d0 f6		bne $b921			bne 	_FLBCInQuotes
.d92b	b92b	e8		inx				inx 								; skip over it
.d92c	b92c	80 d9		bra $b907			bra 	_FLBCLoop
.d92e	b92e					_FLBCExit:
.d92e	b92e	60		rts				rts
.d92f	b92f					TOKExtractLineNumber:
.d92f	b92f	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d932	b932	48		pha				pha
.d933	b933	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d936	b936	48		pha				pha
.d937	b937	20 6d b9	jsr $b96d			jsr 	_LCLNTimes2 				; line # x 2
.d93a	b93a	20 6d b9	jsr $b96d			jsr 	_LCLNTimes2 				; line # x 4
.d93d	b93d	18		clc				clc 								; add stacked value
.d93e	b93e	68		pla				pla
.d93f	b93f	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d942	b942	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d945	b945	68		pla				pla
.d946	b946	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d949	b949	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d94c	b94c	20 6d b9	jsr $b96d			jsr 	_LCLNTimes2 				; line # x 10
.d94f	b94f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d952	b952	e8		inx				inx
.d953	b953	29 0f		and #$0f			and 	#15 						; add to line #
.d955	b955	18		clc				clc
.d956	b956	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d959	b959	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d95c	b95c	90 03		bcc $b961			bcc 	_TLENNoCarry
.d95e	b95e	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d961	b961					_TLENNoCarry:
.d961	b961	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d964	b964	c9 30		cmp #$30			cmp 	#'0'
.d966	b966	90 04		bcc $b96c			bcc 	_TLENExit
.d968	b968	c9 3a		cmp #$3a			cmp 	#'9'+1
.d96a	b96a	90 c3		bcc $b92f			bcc 	TOKExtractLineNumber
.d96c	b96c					_TLENExit:
.d96c	b96c	60		rts				rts
.d96d	b96d					_LCLNTimes2:
.d96d	b96d	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d970	b970	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d973	b973	60		rts				rts
.d974	b974					TOKWriteByte:
.d974	b974	da		phx				phx
.d975	b975	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d978	b978	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d97b	b97b	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d97e	b97e	fa		plx				plx
.d97f	b97f	60		rts				rts
.d980	b980					TOKCheckCreateVariableRecord:
.d980	b980	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d982	b982	85 36		sta $36				sta 	0+zTemp0
.d984	b984	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d986	b986	85 37		sta $37				sta 	1+zTemp0
.d988	b988					_CCVSearch:
.d988	b988	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d98a	b98a	f0 2c		beq $b9b8			beq 	_CCVFail
.d98c	b98c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d98e	b98e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d990	b990	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d993	b993	d0 16		bne $b9ab			bne 	_CCVNext
.d995	b995	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d997	b997	ae 00 04	ldx $0400			ldx 	identStart
.d99a	b99a					_CCVCompare:
.d99a	b99a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d99d	b99d	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d99f	b99f	e8		inx				inx 								; advance pointers
.d9a0	b9a0	c8		iny				iny
.d9a1	b9a1	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9a2	b9a2	d0 07		bne $b9ab			bne 	_CCVNext  					; didn't match go to next.
.d9a4	b9a4	90 f4		bcc $b99a			bcc 	_CCVCompare 				; not finished yet.
.d9a6	b9a6	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d9a9	b9a9	f0 41		beq $b9ec			beq 	_CCVFound 					; yes, we were successful
.d9ab	b9ab					_CCVNext:
.d9ab	b9ab	18		clc				clc 								; go to next record.
.d9ac	b9ac	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d9ae	b9ae	65 36		adc $36				adc 	zTemp0
.d9b0	b9b0	85 36		sta $36				sta 	zTemp0
.d9b2	b9b2	90 d4		bcc $b988			bcc 	_CCVSearch
.d9b4	b9b4	e6 37		inc $37				inc 	zTemp0+1
.d9b6	b9b6	80 d0		bra $b988			bra 	_CCVSearch
.d9b8	b9b8					_CCVFail:
.d9b8	b9b8	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d9ba	b9ba	ad 03 04	lda $0403			lda 	identHash
.d9bd	b9bd	91 36		sta ($36),y			sta 	(zTemp0),y
.d9bf	b9bf	c8		iny				iny 								; offset 2 is the type byte
.d9c0	b9c0	ad 04 04	lda $0404			lda 	identTypeByte
.d9c3	b9c3	91 36		sta ($36),y			sta 	(zTemp0),y
.d9c5	b9c5	c8		iny				iny
.d9c6	b9c6					_CCVData:
.d9c6	b9c6	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d9c8	b9c8	91 36		sta ($36),y			sta 	(zTemp0),y
.d9ca	b9ca	c8		iny				iny
.d9cb	b9cb	c0 08		cpy #$08			cpy 	#8
.d9cd	b9cd	90 f7		bcc $b9c6			bcc 	_CCVData
.d9cf	b9cf	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d9d2	b9d2					_CCVCopyName:
.d9d2	b9d2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d9d5	b9d5	91 36		sta ($36),y			sta 	(zTemp0),y
.d9d7	b9d7	e8		inx				inx
.d9d8	b9d8	c8		iny				iny
.d9d9	b9d9	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d9dc	b9dc	d0 f4		bne $b9d2			bne 	_CCVCopyName
.d9de	b9de	98		tya				tya 								; patch offset
.d9df	b9df	92 36		sta ($36)			sta 	(zTemp0)
.d9e1	b9e1	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d9e3	b9e3	91 36		sta ($36),y			sta 	(zTemp0),y
.d9e5	b9e5	88		dey				dey
.d9e6	b9e6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d9e8	b9e8	09 80		ora #$80			ora 	#$80
.d9ea	b9ea	91 36		sta ($36),y			sta 	(zTemp0),y
.d9ec	b9ec					_CCVFound:
.d9ec	b9ec	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d9ee	b9ee	38		sec				sec
.d9ef	b9ef	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d9f1	b9f1	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d9f3	b9f3	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d9f6	b9f6	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d9f8	b9f8	20 74 b9	jsr $b974			jsr 	TOKWriteByte
.d9fb	b9fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d9fc	b9fc					SNDCheckChannel:
.d9fc	b9fc	aa		tax				tax
.d9fd	b9fd	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da00	ba00	d0 38		bne $ba3a			bne 	_SNDCCExit
.da02	ba02	da		phx				phx 								; save current channel
.da03	ba03	8a		txa				txa 								; put in A
.da04	ba04	20 80 ba	jsr $ba80			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da07	ba07	68		pla				pla 								; channel # in A
.da08	ba08	90 30		bcc $ba3a			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da0a	ba0a	a8		tay				tay 								; Y is the channel #
.da0b	ba0b	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da0e	ba0e	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da11	ba11	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da14	ba14	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da17	ba17	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da1a	ba1a	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da1d	ba1d	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da20	ba20	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da23	ba23	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da26	ba26	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da29	ba29	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da2c	ba2c	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da2f	ba2f	5a		phy				phy 								; save channel #
.da30	ba30	20 9a ba	jsr $ba9a			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da33	ba33	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da36	ba36	68		pla				pla
.da37	ba37	20 3b ba	jsr $ba3b			jsr 	SNDUpdateNote 				; update channel A
.da3a	ba3a					_SNDCCExit:
.da3a	ba3a	60		rts				rts
.da3b	ba3b					SNDUpdateNote:
.da3b	ba3b	aa		tax				tax 								; so we can access records
.da3c	ba3c	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da3d	ba3d	0a		asl a				asl 	a
.da3e	ba3e	0a		asl a				asl 	a
.da3f	ba3f	0a		asl a				asl 	a
.da40	ba40	0a		asl a				asl 	a
.da41	ba41	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da44	ba44	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da47	ba47	f0 2e		beq $ba77			beq 	_SNDUNIsSilent
.da49	ba49	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.da4c	ba4c	48		pha				pha
.da4d	ba4d	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.da50	ba50	29 0f		and #$0f			and 	#$0F
.da52	ba52	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.da55	ba55	09 80		ora #$80			ora 	#$80 						; write to pitch register
.da57	ba57	20 e4 ba	jsr $bae4			jsr 	SNDWritePorts
.da5a	ba5a	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.da5d	ba5d	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da60	ba60	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.da63	ba63	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.da66	ba66	6a		ror a				ror 	a
.da67	ba67	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.da6a	ba6a	6a		ror a				ror 	a
.da6b	ba6b	4a		lsr a				lsr 	a 							; put in bits 0-5
.da6c	ba6c	4a		lsr a				lsr 	a
.da6d	ba6d	20 e4 ba	jsr $bae4			jsr 	SNDWritePorts 				; write as rest of pitch register
.da70	ba70	68		pla				pla
.da71	ba71	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.da73	ba73	20 e4 ba	jsr $bae4			jsr 	SNDWritePorts
.da76	ba76	60		rts				rts
.da77	ba77					_SNDUNIsSilent:
.da77	ba77	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.da7a	ba7a	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.da7c	ba7c	20 e4 ba	jsr $bae4			jsr 	SNDWritePorts 				; write to the ports
.da7f	ba7f	60		rts				rts
.da80	ba80					SNDFindNextNoteForA:
.da80	ba80	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.da83	ba83	f0 13		beq $ba98			beq 	_SNDFNNFail 				; queue empty.
.da85	ba85	a2 00		ldx #$00			ldx 	#0
.da87	ba87					_SNDFNNSearch:
.da87	ba87	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.da8a	ba8a	38		sec				sec
.da8b	ba8b	f0 0c		beq $ba99			beq 	_SNDFNNExit 				; if so exit with CS.
.da8d	ba8d	e8		inx				inx 								; next queue slot.
.da8e	ba8e	e8		inx				inx
.da8f	ba8f	e8		inx				inx
.da90	ba90	e8		inx				inx
.da91	ba91	e8		inx				inx
.da92	ba92	e8		inx				inx
.da93	ba93	e8		inx				inx
.da94	ba94	e8		inx				inx
.da95	ba95	88		dey				dey 								; done the whole queue
.da96	ba96	d0 ef		bne $ba87			bne 	_SNDFNNSearch 				; no, go back.
.da98	ba98					_SNDFNNFail:
.da98	ba98	18		clc				clc
.da99	ba99					_SNDFNNexit:
.da99	ba99	60		rts				rts
.da9a	ba9a					SNDDeleteXFromQueue:
.da9a	ba9a	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.da9c	ba9c	f0 09		beq $baa7			beq 	_SNDDXExit
.da9e	ba9e	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.daa1	baa1	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.daa4	baa4	e8		inx				inx
.daa5	baa5	80 f3		bra $ba9a			bra 	SNDDeleteXFromQueue
.daa7	baa7					_SNDDXExit:
.daa7	baa7	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.daa8	baa8					SNDQueueRequest:
.daa8	baa8	86 36		stx $36				stx 	zTemp0						; save queue address
.daaa	baaa	84 37		sty $37				sty 	zTemp0+1
.daac	baac	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.daaf	baaf	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dab1	bab1	f0 21		beq $bad4			beq 	_SNDQRExit
.dab3	bab3	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dab5	bab5	48		pha				pha
.dab6	bab6	8a		txa				txa  								; get offset in queue buffer/
.dab7	bab7	0a		asl a				asl 	a
.dab8	bab8	0a		asl a				asl 	a
.dab9	bab9	0a		asl a				asl 	a
.daba	baba	aa		tax				tax
.dabb	babb	68		pla				pla 								; get back and push again
.dabc	babc	48		pha				pha
.dabd	babd	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.dac0	bac0	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dac2	bac2					_SNDQCopy:
.dac2	bac2	b1 36		lda ($36),y			lda 	(zTemp0),y
.dac4	bac4	e8		inx				inx
.dac5	bac5	c8		iny				iny
.dac6	bac6	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dac9	bac9	c0 06		cpy #$06			cpy 	#6
.dacb	bacb	d0 f5		bne $bac2			bne 	_SNDQCopy
.dacd	bacd	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.dad0	bad0	68		pla				pla 								; get channel # back
.dad1	bad1	20 fc b9	jsr $b9fc			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dad4	bad4					_SNDQRExit:
.dad4	bad4	60		rts				rts
.dad5	bad5					SNDSilenceChannel:
.dad5	bad5	aa		tax				tax 								; zero time left.
.dad6	bad6	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.dad9	bad9	0a		asl a				asl 	a 							; shift into position
.dada	bada	0a		asl a				asl 	a
.dadb	badb	0a		asl a				asl 	a
.dadc	badc	0a		asl a				asl 	a
.dadd	badd	0a		asl a				asl 	a
.dade	bade	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dae0	bae0	20 e4 ba	jsr $bae4			jsr 	SNDWritePorts
.dae3	bae3	60		rts				rts
.dae4	bae4					SNDWritePorts:
.dae4	bae4	da		phx				phx 								; save X
.dae5	bae5	a6 01		ldx $01				ldx 	1 							; save I/O status
.dae7	bae7	64 01		stz $01				stz 	1 							; access I/O page 0
.dae9	bae9	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.daec	baec	8d 10 d6	sta $d610			sta 	$D610
.daef	baef	86 01		stx $01				stx 	1 							; restore I/O
.daf1	baf1	fa		plx				plx 								; restore X
.daf2	baf2	60		rts				rts
.daf3	baf3					Export_SNDCommand:
.daf3	baf3	da		phx				phx 								; save XY
.daf4	baf4	5a		phy				phy
.daf5	baf5	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.daf7	baf7	f0 1d		beq $bb16			beq 	_SNDInitialise
.daf9	baf9	90 28		bcc $bb23			bcc 	_SNDExit
.dafb	bafb	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dafd	bafd	f0 17		beq $bb16			beq 	_SNDSilence
.daff	baff	b0 22		bcs $bb23			bcs 	_SNDExit
.db01	bb01	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db03	bb03	b0 09		bcs $bb0e			bcs 	_SNDQueryPlay
.db05	bb05	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db07	bb07	b0 1a		bcs $bb23			bcs 	_SNDExit
.db09	bb09	20 a8 ba	jsr $baa8			jsr 	SNDQueueRequest
.db0c	bb0c	80 15		bra $bb23			bra 	_SNDExit
.db0e	bb0e					_SNDQueryPlay:
.db0e	bb0e	29 03		and #$03			and 	#3 							; get channel #
.db10	bb10	aa		tax				tax
.db11	bb11	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db14	bb14	80 0d		bra $bb23			bra 	_SNDExit
.db16	bb16					_SNDInitialise:
.db16	bb16					_SNDSilence:
.db16	bb16	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db19	bb19	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db1b	bb1b					_SNDSilenceLoop:
.db1b	bb1b	48		pha				pha
.db1c	bb1c	20 d5 ba	jsr $bad5			jsr 	SNDSilenceChannel
.db1f	bb1f	68		pla				pla
.db20	bb20	3a		dec a				dec 	a
.db21	bb21	10 f8		bpl $bb1b			bpl 	_SNDSilenceLoop
.db23	bb23					_SNDExit:
.db23	bb23	7a		ply				ply
.db24	bb24	fa		plx				plx
.db25	bb25	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db26	bb26					Export_SNDUpdate:
.db26	bb26					PagedSNDUpdate:
.db26	bb26	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db29	bb29	f0 05		beq $bb30			beq 	_SNDUNot0 					; not playing
.db2b	bb2b	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db2d	bb2d	20 4f bb	jsr $bb4f			jsr 	SNDUpdateChannel 			; update it.
.db30	bb30					_SNDUNot0:
.db30	bb30	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db33	bb33	f0 05		beq $bb3a			beq 	_SNDUNot1
.db35	bb35	a2 01		ldx #$01			ldx 	#1
.db37	bb37	20 4f bb	jsr $bb4f			jsr 	SNDUpdateChannel
.db3a	bb3a					_SNDUNot1:
.db3a	bb3a	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db3d	bb3d	f0 05		beq $bb44			beq 	_SNDUNot2
.db3f	bb3f	a2 02		ldx #$02			ldx 	#2
.db41	bb41	20 4f bb	jsr $bb4f			jsr 	SNDUpdateChannel
.db44	bb44					_SNDUNot2:
.db44	bb44	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db47	bb47	f0 05		beq $bb4e			beq 	_SNDUNot3
.db49	bb49	a2 03		ldx #$03			ldx 	#3
.db4b	bb4b	20 4f bb	jsr $bb4f			jsr 	SNDUpdateChannel
.db4e	bb4e					_SNDUNot3:
.db4e	bb4e	60		rts				rts
.db4f	bb4f					SNDUpdateChannel:
.db4f	bb4f	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.db51	bb51	f0 2c		beq $bb7f			beq 	_SNDUCExit
.db53	bb53	3a		dec a				dec 	a 							; decrement and update timer
.db54	bb54	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.db57	bb57	f0 1d		beq $bb76			beq 	_SNDUCUpdate 				; if zero, silence channel
.db59	bb59	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.db5c	bb5c	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.db5f	bb5f	f0 1e		beq $bb7f			beq 	_SNDUCExit 					; if zero carry on at current tone.
.db61	bb61	18		clc				clc 								; add adjust, forcing into a 10 bit range
.db62	bb62	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.db65	bb65	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.db68	bb68	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.db6b	bb6b	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.db6e	bb6e	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.db71	bb71	29 03		and #$03			and 	#3
.db73	bb73	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.db76	bb76					_SNDUCUpdate:
.db76	bb76	8a		txa				txa 								; which channel.
.db77	bb77	48		pha				pha
.db78	bb78	20 3b ba	jsr $ba3b			jsr 	SNDUpdateNote 				; update the current note
.db7b	bb7b	68		pla				pla
.db7c	bb7c	20 fc b9	jsr $b9fc			jsr 	SNDCheckChannel 			; more to do ?
.db7f	bb7f					_SNDUCExit:
.db7f	bb7f	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
