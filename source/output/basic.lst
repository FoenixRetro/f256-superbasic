
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 12:56:44 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 20 83	jsr $8320			jsr 	NewCommand 					; erase current program
.8006	20 6d 90	jsr $906d			jsr 	BackloadProgram
.8009	4c e1 83	jmp $83e1			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	cc 86					.word	ShiftLeft                        ; $00 <<
>8016	c6 85					.word	BinaryCompareLessEqual           ; $01 <=
>8018	bc 85					.word	BinaryCompareNotEqual            ; $02 <>
>801a	46 9a					.word	SyntaxError                      ; $03 !!3
>801c	46 9a					.word	SyntaxError                      ; $04 ><
>801e	d0 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	cf 86					.word	ShiftRight                       ; $06 >>
>8022	46 9a					.word	SyntaxError                      ; $07 !!7
>8024	46 9a					.word	SyntaxError                      ; $08 !!8
>8026	46 9a					.word	SyntaxError                      ; $09 !!9
>8028	46 9a					.word	SyntaxError                      ; $0a !!10
>802a	46 9a					.word	SyntaxError                      ; $0b !!11
>802c	46 9a					.word	SyntaxError                      ; $0c !!12
>802e	46 9a					.word	SyntaxError                      ; $0d !!13
>8030	46 9a					.word	SyntaxError                      ; $0e !!14
>8032	46 9a					.word	SyntaxError                      ; $0f !!15
>8034	46 9a					.word	SyntaxError                      ; $10 @
>8036	46 9a					.word	SyntaxError                      ; $11 !!17
>8038	46 9a					.word	SyntaxError                      ; $12 !!18
>803a	46 9a					.word	SyntaxError                      ; $13 [
>803c	8f 95					.word	IntegerDivide                    ; $14 \
>803e	46 9a					.word	SyntaxError                      ; $15 ]
>8040	55 88					.word	EorInteger                       ; $16 ^
>8042	46 9a					.word	SyntaxError                      ; $17 _
>8044	46 9a					.word	SyntaxError                      ; $18 `
>8046	46 9a					.word	SyntaxError                      ; $19 !!25
>8048	46 9a					.word	SyntaxError                      ; $1a !!26
>804a	46 9a					.word	SyntaxError                      ; $1b {
>804c	0f 88					.word	OraInteger                       ; $1c |
>804e	46 9a					.word	SyntaxError                      ; $1d }
>8050	46 9a					.word	SyntaxError                      ; $1e ~
>8052	46 9a					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	46 9a					.word	SyntaxError                      ; $20
>8056	9b 88					.word	WordIndirect                     ; $21 !
>8058	46 9a					.word	SyntaxError                      ; $22 "
>805a	46 9a					.word	SyntaxError                      ; $23 #
>805c	46 9a					.word	SyntaxError                      ; $24 $
>805e	dc 95					.word	IntegerModulus                   ; $25 %
>8060	c9 87					.word	AndInteger                       ; $26 &
>8062	46 9a					.word	SyntaxError                      ; $27 '
>8064	46 9a					.word	SyntaxError                      ; $28 (
>8066	46 9a					.word	SyntaxError                      ; $29 )
>8068	51 96					.word	MulInteger                       ; $2a *
>806a	63 87					.word	AddInteger                       ; $2b +
>806c	46 9a					.word	SyntaxError                      ; $2c ,
>806e	9e 87					.word	SubInteger                       ; $2d -
>8070	46 9a					.word	SyntaxError                      ; $2e .
>8072	e8 97					.word	FDivideCommand                   ; $2f /
>8074	46 9a					.word	SyntaxError                      ; $30 0
>8076	46 9a					.word	SyntaxError                      ; $31 1
>8078	46 9a					.word	SyntaxError                      ; $32 2
>807a	46 9a					.word	SyntaxError                      ; $33 3
>807c	46 9a					.word	SyntaxError                      ; $34 4
>807e	46 9a					.word	SyntaxError                      ; $35 5
>8080	46 9a					.word	SyntaxError                      ; $36 6
>8082	46 9a					.word	SyntaxError                      ; $37 7
>8084	46 9a					.word	SyntaxError                      ; $38 8
>8086	46 9a					.word	SyntaxError                      ; $39 9
>8088	46 9a					.word	SyntaxError                      ; $3a :
>808a	46 9a					.word	SyntaxError                      ; $3b ;
>808c	a8 85					.word	BinaryCompareLess                ; $3c <
>808e	9e 85					.word	BinaryCompareEqual               ; $3d =
>8090	b2 85					.word	BinaryCompareGreater             ; $3e >
>8092	c2 88					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	36 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	43 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	46 9a					.word	SyntaxError                      ; $82 !2:SH2
>809a	2e 99					.word	AbsUnary                         ; $83 ABS(
>809c	05 8d					.word	AllocUnary                       ; $84 ALLOC(
>809e	3e 99					.word	AscUnary                         ; $85 ASC(
>80a0	a2 8d					.word	ChrUnary                         ; $86 CHR$(
>80a2	9a 85					.word	UnaryFalse                       ; $87 FALSE
>80a4	4b 99					.word	FracUnary                        ; $88 FRAC(
>80a6	61 99					.word	IntUnary                         ; $89 INT(
>80a8	b7 99					.word	IsValUnary                       ; $8a ISVAL(
>80aa	7c 8e					.word	Unary_Left                       ; $8b LEFT$(
>80ac	73 99					.word	LenUnary                         ; $8c LEN(
>80ae	a6 8e					.word	Unary_Mid                        ; $8d MID$(
>80b0	3f 8d					.word	Unary_Not                        ; $8e NOT(
>80b2	8c 8e					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	55 8d					.word	Unary_Rnd                        ; $90 RND(
>80b6	8d 99					.word	SgnUnary                         ; $91 SGN(
>80b8	b4 8d					.word	SpcUnary                         ; $92 SPC(
>80ba	cf 8d					.word	Unary_Str                        ; $93 STR$(
>80bc	8e 85					.word	UnaryTrue                        ; $94 TRUE
>80be	ad 99					.word	ValUnary                         ; $95 VAL(
>80c0	79 81					.word	ForCommand                       ; $96 FOR
>80c2	bd 82					.word	IfCommand                        ; $97 IF
>80c4	4b 84					.word	Unused1                          ; $98 PROC
>80c6	bf 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	fa 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	e6 82					.word	EndIf                            ; $9b ENDIF
>80cc	68 95					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	33 82					.word	NextCommand                      ; $9d NEXT
>80d0	46 9a					.word	SyntaxError                      ; $9e THEN
>80d2	c8 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	1b 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	46 9a					.word	SyntaxError                      ; $a2 CLS
>80da	46 9a					.word	SyntaxError                      ; $a3 DATA
>80dc	75 81					.word	DimCommand                       ; $a4 DIM
>80de	4b 84					.word	Unused3                          ; $a5 DOWNTO
>80e0	df 82					.word	ElseCode                         ; $a6 ELSE
>80e2	8c 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	aa 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	e7 82					.word	LetCommand                       ; $a9 LET
>80e8	2a 83					.word	Command_Print                    ; $aa PRINT
>80ea	46 9a					.word	SyntaxError                      ; $ab READ
>80ec	b2 83					.word	RemCommand                       ; $ac REM
>80ee	9c 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	4b 84					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	46 9a					.word	SyntaxError                      ; $80 !0:EOF
>80f4	46 9a					.word	SyntaxError                      ; $81 !1:SH1
>80f6	46 9a					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	76 81					.word	EndCommand                       ; $85 END
>80fe	46 9a					.word	SyntaxError                      ; $86 LIST
>8100	20 83					.word	NewCommand                       ; $87 NEW
>8102	46 9a					.word	SyntaxError                      ; $88 RESTORE
>8104	e1 83					.word	CommandRUN                       ; $89 RUN
>8106	46 9a					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	46 9a					.word	SyntaxError                      ; $80 !0:EOF
>810a	46 9a					.word	SyntaxError                      ; $81 !1:SH1
>810c	46 9a					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 47 8f	jsr $8f47			jsr 	EvaluateInteger 			; the assert test
.8113	20 00 90	jsr $9000			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 29 85	jmp $8529		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 5c 8f	jsr $8f5c			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 60 90	jsr $9060			jsr 	StackReset
.816e	20 ee 9b	jsr $9bee			jsr 	StringSystemInitialise
.8171	20 4e 84	jsr $844e			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8175					DimCommand:
>8175	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8176					EndCommand:
.8176	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8179					ForCommand:
.8179	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.817b	20 0d 90	jsr $900d			jsr 	StackOpen
.817e	a2 00		ldx #$00			ldx 	#0
.8180	20 fc 8b	jsr $8bfc			jsr 	EvaluateTerm
.8183	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8186	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8188	d0 49		bne $81d3			bne		_FCError
.818a	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.818c	20 86 95	jsr $9586			jsr 	CheckNextA
.818f	e8		inx				inx
.8190	20 47 8f	jsr $8f47			jsr 	EvaluateInteger 			; <from> in +1
.8193	b1 30		lda ($30),y			lda 	(codePtr),y
.8195	c8		iny				iny 								; consume it
.8196	48		pha				pha 								; save on stack for later
.8197	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8199	f0 04		beq $819f			beq 	_FCNoSyntax
.819b	c9 ae		cmp #$ae			cmp 	#KWD_TO
.819d	d0 37		bne $81d6			bne 	_FCSyntaxError
.819f					_FCNoSyntax:
.819f	e8		inx				inx
.81a0	20 47 8f	jsr $8f47			jsr 	EvaluateInteger
.81a3	20 3f 90	jsr $903f			jsr 	STKSaveCodePosition 		; save loop back position
.81a6	68		pla				pla 								; restore DOWNTO or TO
.81a7	5a		phy				phy 								; save Y on the stack
.81a8	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.81aa	f0 02		beq $81ae			beq 	_FCNotDownTo
.81ac	a9 02		lda #$02			lda 	#2
.81ae					_FCNotDownTo:
.81ae	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.81af	a0 10		ldy #$10			ldy 	#16
.81b1	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81b3	a0 06		ldy #$06			ldy 	#6
.81b5	ad 08 06	lda $0608			lda 	NSMantissa0
.81b8	91 34		sta ($34),y			sta 	(basicStack),y
.81ba	ad 10 06	lda $0610			lda 	NSMantissa1
.81bd	c8		iny				iny
.81be	91 34		sta ($34),y			sta 	(basicStack),y
.81c0	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81c2	a2 01		ldx #$01			ldx 	#1
.81c4	20 d9 81	jsr $81d9			jsr 	FCIntegerToStack
.81c7	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81c9	a2 02		ldx #$02			ldx 	#2
.81cb	20 d9 81	jsr $81d9			jsr 	FCIntegerToStack
.81ce	20 f9 81	jsr $81f9			jsr 	CopyIndexToReference
.81d1	7a		ply				ply 								; restore position
.81d2	60		rts				rts
.81d3					_FCError:
.81d3	4c 50 9a	jmp $9a50			jmp 	TypeError
.81d6					_FCSyntaxError:
.81d6	4c 46 9a	jmp $9a46			jmp 	SyntaxError
.81d9					FCIntegerToStack:
.81d9	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81dc	10 03		bpl $81e1			bpl	 	_FCNotNegative
.81de	20 85 8f	jsr $8f85			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81e1					_FCNotNegative:
.81e1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81e4	91 34		sta ($34),y			sta 	(basicStack),y
.81e6	c8		iny				iny
.81e7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81ea	91 34		sta ($34),y			sta 	(basicStack),y
.81ec	c8		iny				iny
.81ed	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81f0	91 34		sta ($34),y			sta 	(basicStack),y
.81f2	c8		iny				iny
.81f3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81f6	91 34		sta ($34),y			sta 	(basicStack),y
.81f8	60		rts				rts
.81f9					CopyIndexToReference:
.81f9	5a		phy				phy
.81fa	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81fc	38		sec				sec 								; (because we copy from offset 8)
.81fd	b1 34		lda ($34),y			lda 	(basicStack),y
.81ff	e9 08		sbc #$08			sbc 	#8
.8201	85 36		sta $36				sta 	zTemp0
.8203	c8		iny				iny
.8204	b1 34		lda ($34),y			lda 	(basicStack),y
.8206	e9 00		sbc #$00			sbc 	#0
.8208	85 37		sta $37				sta 	zTemp0+1
.820a	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.820c	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.820e	b1 34		lda ($34),y			lda 	(basicStack),y
.8210	0a		asl a				asl 	a 							; into carry
.8211	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8213	90 14		bcc $8229			bcc 	_CITRNormal
.8215	38		sec				sec
.8216					_CITRNegative:
.8216	a9 00		lda #$00			lda 	#0
.8218	f1 34		sbc ($34),y			sbc 	(basicStack),y
.821a	91 36		sta ($36),y			sta 	(zTemp0),y
.821c	c8		iny				iny
.821d	ca		dex				dex
.821e	d0 f6		bne $8216			bne 	_CITRNegative
.8220	88		dey				dey 								; look at MSB of mantissa
.8221	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8223	09 80		ora #$80			ora 	#$80
.8225	91 36		sta ($36),y			sta 	(zTemp0),y
.8227	7a		ply				ply
.8228	60		rts				rts
.8229					_CITRNormal:
.8229	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.822b	91 36		sta ($36),y			sta 	(zTemp0),y
.822d	c8		iny				iny
.822e	ca		dex				dex
.822f	d0 f8		bne $8229			bne 	_CITRNormal
.8231	7a		ply				ply 								; and exit.
.8232	60		rts				rts
.8233					NextCommand:
.8233	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8235	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8237	20 34 90	jsr $9034			jsr 	StackCheckFrame
.823a	5a		phy				phy
.823b	a0 10		ldy #$10			ldy 	#16 						; get the step count
.823d	b1 34		lda ($34),y			lda 	(basicStack),y
.823f	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8241	30 02		bmi $8245			bmi 	_NCStepNeg
.8243	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8245					_NCStepNeg:
.8245	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8247	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8249	18		clc				clc
.824a					_NCBump:
.824a	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.824c	91 34		sta ($34),y			sta 	(basicStack),y
.824e	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8250	c8		iny				iny 								; next byte
.8251	ca		dex				dex 								; do four times
.8252	d0 f6		bne $824a			bne 	_NCBump
.8254	20 f9 81	jsr $81f9			jsr		CopyIndexToReference		; copy it to the reference variable.
.8257	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8259	b1 34		lda ($34),y			lda 	(basicStack),y
.825b	0a		asl a				asl 	a 							; sign bit to carry
.825c	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.825e	85 38		sta $38				sta 	zTemp1
.8260	90 02		bcc $8264			bcc 	_NCCompRev 					; use if step is +ve
.8262	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8264					_NCCompRev:
.8264	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8266	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8268	85 39		sta $39				sta 	zTemp1+1
.826a	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.826c	38		sec				sec
.826d					_NCCompare:
.826d	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.826f	b1 34		lda ($34),y			lda 	(basicStack),y
.8271	a4 39		ldy $39				ldy 	zTemp1+1
.8273	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8275	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8277	e6 39		inc $39				inc 	zTemp1+1
.8279	ca		dex				dex 								; do it 4 times.
.827a	d0 f1		bne $826d			bne 	_NCCompare
.827c	50 02		bvc $8280			bvc 	_NCNoOverflow 				; convert to signed comparison
.827e	49 80		eor #$80			eor 	#$80
.8280					_NCNoOverflow:
.8280	7a		ply				ply 								; restore Y position
.8281	0a		asl a				asl 	a 							; is bit 7 set.
.8282	90 04		bcc $8288			bcc 	_NCLoopback 				; if no , >= so loop back
.8284	20 26 90	jsr $9026			jsr 	StackClose 					; exit the loop
.8287	60		rts				rts
.8288					_NCLoopBack:
.8288	20 50 90	jsr $9050			jsr 	STKLoadCodePosition 		; loop back
.828b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.828c					Command_GOSUB:
.828c	a2 00		ldx #$00			ldx 	#0
.828e	20 5c 8f	jsr $8f5c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8291	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8293	20 0d 90	jsr $900d			jsr 	StackOpen 					; create frame
.8296	20 3f 90	jsr $903f			jsr 	STKSaveCodePosition 		; save current position
.8299	4c af 82	jmp $82af			jmp 	GotoStackX
.829c					Command_RETURN:
.829c	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.829e	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.82a0	20 34 90	jsr $9034			jsr 	StackCheckFrame
.82a3	20 50 90	jsr $9050			jsr 	STKLoadCodePosition 		; restore code position
.82a6	20 26 90	jsr $9026			jsr 	StackClose
.82a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.82aa					GotoCommand:
.82aa	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.82ac	20 5c 8f	jsr $8f5c			jsr 	Evaluate16BitInteger
.82af					GotoStackX:
.82af	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82b2	48		pha				pha 								; it is slightly inefficient, just in cases.
.82b3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82b6	fa		plx				plx
.82b7	20 36 95	jsr $9536			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82ba	4c ec 83	jmp $83ec			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82bd					IfCommand:
.82bd	a2 00		ldx #$00			ldx 	#0 							; If what.
.82bf	20 24 8f	jsr $8f24			jsr 	EvaluateNumber
.82c2	b1 30		lda ($30),y			lda 	(codePtr),y
.82c4	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82c6	d0 0a		bne $82d2			bne 	_IFStructured
.82c8	c8		iny				iny 								; consume THEN
.82c9	20 00 90	jsr $9000			jsr 	NSMIsZero 					; is it zero
.82cc	f0 01		beq $82cf			beq 	_IfFail 					; if fail, go to next line
.82ce	60		rts				rts 								; if THEN just continue
.82cf					_IfFail:
.82cf	4c 36 84	jmp $8436			jmp 	EOLCommand
.82d2					_IfStructured:
.82d2	20 00 90	jsr $9000			jsr 	NSMIsZero 					; is it zero
.82d5	d0 07		bne $82de			bne 	_IfExit 					; if not, then continue normally.
.82d7	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82d9	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82db	20 a0 84	jsr $84a0			jsr 	ScanForward 				; and run from there/
.82de					_IfExit:
.82de	60		rts				rts
.82df					ElseCode:
.82df	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82e1	aa		tax				tax 								; so just go to the structure exit
.82e2	20 a0 84	jsr $84a0			jsr 	ScanForward
.82e5	60		rts				rts
.82e6					EndIf:
.82e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82e7					LetCommand:
.82e7	a2 00		ldx #$00			ldx 	#0
.82e9	ad 13 89	lda $8913			lda 	PrecedenceLevel+"*"			; precedence > this
.82ec	20 2d 89	jsr $892d			jsr 	EvaluateExpressionAtPrecedence
.82ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.82f2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.82f4	f0 0e		beq $8304			beq 	_LetGoProc 					; it's a procedure call.
.82f6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82f8	20 86 95	jsr $9586			jsr 	CheckNextA
.82fb	e8		inx				inx 								; RHS
.82fc	20 1b 8f	jsr $8f1b			jsr 	EvaluateValue
.82ff	ca		dex				dex
.8300	20 07 83	jsr $8307			jsr 	AssignVariable
.8303	60		rts				rts
.8304					_LetGoProc:
.8304	4c 81 83	jmp $8381			jmp 	CallProcedure
.8307					AssignVariable:
.8307	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.830a	48		pha				pha 								; save a copy
.830b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.830e	29 10		and #$10			and 	#NSBIsString
.8310	d0 0b		bne $831d			bne 	_ASError
.8312	68		pla				pla 								; get back
.8313	29 10		and #$10			and 	#NSBIsString 				; check type
.8315	d0 03		bne $831a			bne 	_ASString
.8317	4c 68 89	jmp $8968			jmp 	AssignNumber
.831a					_ASString:
.831a	4c d6 89	jmp $89d6			jmp 	AssignString
.831d					_ASError:
.831d	4c 50 9a	jmp $9a50			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8320					NewCommand:
.8320	20 e5 94	jsr $94e5			jsr 	MemoryNew
.8323	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8326	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.8329	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.832a					Command_Print:
.832a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.832b					_CPLoop:
.832b	08		php				php 								; save last action flag
.832c	b1 30		lda ($30),y			lda 	(codePtr),y
.832e	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8330	f0 46		beq $8378			beq 	_CPExit
.8332	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8334	f0 42		beq $8378			beq 	_CPExit
.8336	68		pla				pla 								; throw last action flag
.8337	b1 30		lda ($30),y			lda 	(codePtr),y
.8339	c8		iny				iny
.833a	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.833c	f0 37		beq $8375			beq 	_CPContinueWithSameLine
.833e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8340	f0 2e		beq $8370			beq 	_CPTab
.8342	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8344	f0 26		beq $836c			beq 	_CPNewLine
.8346	88		dey				dey 								; undo the get.
.8347	a2 00		ldx #$00			ldx 	#0
.8349	20 1b 8f	jsr $8f1b			jsr 	EvaluateValue 				; get a value into slot 0
.834c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.834f	29 10		and #$10			and 	#NSBIsString
.8351	f0 0b		beq $835e			beq 	_CPNumber
.8353	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8356	ad 08 06	lda $0608			lda 	NSMantissa0
.8359	20 7b 85	jsr $857b			jsr 	PrintStringXA
.835c	80 cc		bra $832a			bra 	Command_Print 				; loop round clearing carry so NL if end
.835e					_CPNumber:
.835e	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8360	20 f1 8d	jsr $8df1			jsr 	ConvertNumberToString 		; convert to string
.8363	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8365	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8367	20 7b 85	jsr $857b			jsr 	PrintStringXA
.836a	80 be		bra $832a			bra 	Command_Print 				; loop round clearing carry so NL if end
.836c					_CPNewLine:
.836c	a9 0d		lda #$0d			lda 	#13
.836e	80 02		bra $8372			bra 	_CPPrintChar
.8370					_CPTab:
.8370	a9 09		lda #$09			lda 	#9 							; print TAB
.8372					_CPPrintChar:
.8372	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.8375					_CPContinueWithSameLine:
.8375	38		sec				sec 								; loop round with carry set, which
.8376	80 b3		bra $832b			bra 	_CPLoop 					; will inhibit final CR
.8378					_CPExit:
.8378	28		plp				plp 								; get last action flag
.8379	b0 05		bcs $8380			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.837b	a9 0d		lda #$0d			lda 	#13 						; print new line
.837d	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.8380					_CPExit2:
.8380	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8381					CallProcedure:
.8381	20 76 95	jsr $9576			jsr 	CheckRightBracket
.8384	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8386	20 0d 90	jsr $900d			jsr 	StackOpen
.8389	20 3f 90	jsr $903f			jsr 	STKSaveCodePosition 		; save loop position
.838c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.838f	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8391	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8394	85 37		sta $37				sta 	zTemp0+1
.8396	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8398	b2 36		lda ($36)			lda 	(zTemp0)
.839a	85 30		sta $30				sta 	codePtr
.839c	b1 36		lda ($36),y			lda 	(zTemp0),y
.839e	85 31		sta $31				sta 	codePtr+1
.83a0	c8		iny				iny
.83a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a3	85 32		sta $32				sta 	codePtr+2
.83a5	c8		iny				iny
.83a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a8	85 33		sta $33				sta 	codePtr+3
.83aa	c8		iny				iny 								; get Y offset -> Y
.83ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ad	a8		tay				tay
.83ae	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; check )
.83b1	60		rts				rts 								; and continue from here
.9568					Command_ENDPROC:
.9568	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.956a	a2 14		ldx #$14			ldx 	#ERRID_PROC
.956c	20 34 90	jsr $9034			jsr 	StackCheckFrame
.956f	20 50 90	jsr $9050			jsr 	STKLoadCodePosition 		; restore code position
.9572	20 26 90	jsr $9026			jsr 	StackClose
.9575	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.83b2					RemCommand:
.83b2	b1 30		lda ($30),y			lda 	(codePtr),y
.83b4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.83b6	d0 06		bne $83be			bne 	_RMExit
.83b8	c8		iny				iny
.83b9	98		tya				tya
.83ba	38		sec				sec
.83bb	71 30		adc ($30),y			adc 	(codePtr),y
.83bd	a8		tay				tay
.83be					_RMExit:
.83be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.83bf					Command_REPEAT:
.83bf	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.83c1	20 0d 90	jsr $900d			jsr 	StackOpen
.83c4	20 3f 90	jsr $903f			jsr 	STKSaveCodePosition 		; save loop position
.83c7	60		rts				rts
.83c8					Command_UNTIL:
.83c8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.83ca	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.83cc	20 34 90	jsr $9034			jsr 	StackCheckFrame
.83cf	a2 00		ldx #$00			ldx 	#0
.83d1	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; work out the number
.83d4	20 00 90	jsr $9000			jsr 	NSMIsZero 					; check if zero
.83d7	f0 04		beq $83dd			beq 	_CULoopBack 				; if so keep looping
.83d9	20 26 90	jsr $9026			jsr 	StackClose		 			; return
.83dc	60		rts				rts
.83dd					_CULoopBack:
.83dd	20 50 90	jsr $9050			jsr 	STKLoadCodePosition 		; loop back
.83e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.83e1					CommandRUN:
.83e1	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.83e4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83e6	85 30		sta $30				sta 	codePtr
.83e8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83ea	85 31		sta $31				sta 	codePtr+1
.83ec					RUNNewLine:
.83ec	b2 30		lda ($30)			lda 	(codePtr)
.83ee	f0 43		beq $8433			beq 	CRNoProgram         		; no then END.
.83f0	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83f2	9a		txs				txs
.83f3					RUNCodePointerLine:
.83f3	a0 02		ldy #$02			ldy 	#2 							; start of program
.83f5					_CRIncMainLoop:
.83f5	c8		iny				iny
.83f6					_CRMainLoop:
.83f6	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83f9	b1 30		lda ($30),y			lda 	(codePtr),y
.83fb	10 10		bpl $840d			bpl 	_CRNotKeyword
.83fd	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.83ff	b0 04		bcs $8405			bcs 	_CRIsKeyword
.8401	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8403	b0 28		bcs $842d			bcs		_CRSyntaxError
.8405					_CRIsKeyword:
.8405	c8		iny				iny 								; consume command
.8406	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8407	aa		tax				tax 								; put in X for vector jump
.8408	20 30 84	jsr $8430			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.840b	80 e9		bra $83f6			bra 	_CRMainLoop 				; and loop round
.840d					_CRNotKeyword:
.840d	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.840f	f0 e4		beq $83f5			beq 	_CRIncMainLoop
.8411	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8413	90 05		bcc $841a			bcc 	_CRNotVariable
.8415					_CRGoLet:
.8415	20 e7 82	jsr $82e7			jsr 	LetCommand
.8418	80 dc		bra $83f6			bra 	_CRMainLoop
.841a					_CRNotVariable:
.841a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.841c	f0 f7		beq $8415			beq 	_CRGoLet
.841e	c9 21		cmp #$21			cmp 	#KWD_PLING
.8420	f0 f3		beq $8415			beq 	_CRGoLet
.8422	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8424	f0 01		beq $8427			beq 	_CRGoRem
>8426	db						.byte 	$DB 						; causes a break in the emulator
.8427					_CRGoRem:
.8427	c8		iny				iny
.8428	20 b2 83	jsr $83b2			jsr 	RemCommand
.842b	80 c9		bra $83f6			bra 	_CRMainLoop
.842d					_CRSyntaxError:
.842d	4c 46 9a	jmp $9a46			jmp 	SyntaxError
.8430					_CRCallVector0:
.8430	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8433					CRNoProgram:
.8433	4c 76 81	jmp $8176			jmp 	EndCommand
.8436					EOLCommand:
.8436	18		clc				clc
.8437	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8439	65 30		adc $30				adc 	codePtr
.843b	85 30		sta $30				sta 	codePtr
.843d	90 02		bcc $8441			bcc 	_CREExit
.843f	e6 31		inc $31				inc 	codePtr+1
.8441					_CREExit:
.8441	80 a9		bra $83ec			bra 	RunNewLine
.8443					Shift1Command:
.8443	b1 30		lda ($30),y			lda 	(codePtr),y
.8445	c8		iny				iny
.8446	0a		asl a				asl 	a
.8447	aa		tax				tax
.8448	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.844b					Unused1:
.844b					Unused2:
.844b					Unused3:
.844b	4c 46 9a	jmp $9a46			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.844e					ProcedureScan:
.844e	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8450	85 30		sta $30				sta 	codePtr
.8452	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8454	85 31		sta $31				sta 	codePtr+1
.8456					_PSLoop:
.8456	b2 30		lda ($30)			lda 	(codePtr)
.8458	f0 42		beq $849c			beq 	_PSExit
.845a	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	c9 98		cmp #$98			cmp 	#KWD_PROC
.8460	d0 2d		bne $848f			bne 	_PSNext
.8462	c8		iny				iny 								; get the address of the record to zTemp0 and
.8463	b1 30		lda ($30),y			lda 	(codePtr),y
.8465	29 c0		and #$c0			and 	#$C0
.8467	c9 40		cmp #$40			cmp 	#$40
.8469	d0 32		bne $849d			bne 	_PSSyntax
.846b	b1 30		lda ($30),y			lda 	(codePtr),y
.846d	18		clc				clc
.846e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8470	85 37		sta $37				sta 	zTemp0+1
.8472	c8		iny				iny 								; LSB
.8473	b1 30		lda ($30),y			lda 	(codePtr),y
.8475	85 36		sta $36				sta 	zTemp0
.8477	c8		iny				iny 								; character after variable call.
.8478	98		tya				tya 								; save Y offset at +7
.8479	a0 07		ldy #$07			ldy 	#7
.847b	91 36		sta ($36),y			sta 	(zTemp0),y
.847d	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.847f	a0 02		ldy #$02			ldy 	#2
.8481	91 36		sta ($36),y			sta 	(zTemp0),y
.8483	a2 00		ldx #$00			ldx 	#0 							; copy codePtr in
.8485					_PSCopy:
.8485	b5 30		lda $30,x			lda 	codePtr,x
.8487	c8		iny				iny
.8488	91 36		sta ($36),y			sta 	(zTemp0),y
.848a	e8		inx				inx
.848b	e0 04		cpx #$04			cpx 	#4
.848d	d0 f6		bne $8485			bne 	_PSCopy
.848f					_PSNext:
.848f	18		clc				clc
.8490	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8492	65 30		adc $30				adc 	codePtr
.8494	85 30		sta $30				sta 	codePtr
.8496	90 02		bcc $849a			bcc 	_CREExit
.8498	e6 31		inc $31				inc 	codePtr+1
.849a					_CREExit:
.849a	80 ba		bra $8456			bra 	_PSLoop
.849c					_PSExit:
.849c	60		rts				rts
.849d					_PSSyntax:
.849d	4c 46 9a	jmp $9a46			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.84a0					ScanForward:
.84a0	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.84a2	86 37		stx $37				stx 	zTemp0+1
.84a4	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.84a6					_ScanLoop:
.84a6	b1 30		lda ($30),y			lda 	(codePtr),y
.84a8	c8		iny				iny
.84a9	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.84ab	d0 09		bne $84b6			bne 	_ScanGoNext
.84ad	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.84af	f0 04		beq $84b5			beq 	_ScanMatch
.84b1	c5 37		cmp $37				cmp 	zTemp0+1
.84b3	d0 01		bne $84b6			bne 	_ScanGoNext
.84b5					_ScanMatch:
.84b5	60		rts				rts
.84b6					_ScanGoNext:
.84b6	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.84b8	90 ec		bcc $84a6			bcc 	_ScanLoop
.84ba	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.84bc	90 18		bcc $84d6			bcc 	_ScanSkipOne
.84be	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.84c0	b0 2f		bcs $84f1			bcs 	_ScanSkipData
.84c2	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.84c4	90 e0		bcc $84a6			bcc 	_ScanLoop 					; if not, ordinary keywords.
.84c6	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.84c8	b0 dc		bcs $84a6			bcs 	_ScanLoop
.84ca	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.84cc	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.84ce	b0 d6		bcs $84a6			bcs 	_ScanLoop
.84d0	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.84d2	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.84d4	80 d0		bra $84a6			bra 	_ScanLoop
.84d6					_ScanSkipOne:
.84d6	c8		iny				iny 								; consume the extra one.
.84d7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.84d9	d0 cb		bne $84a6			bne 	_ScanLoop
.84db	18		clc				clc
.84dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84de	65 30		adc $30				adc 	codePtr
.84e0	85 30		sta $30				sta 	codePtr
.84e2	90 02		bcc $84e6			bcc 	_CREExit
.84e4	e6 31		inc $31				inc 	codePtr+1
.84e6					_CREExit:
.84e6	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.84e8	b2 30		lda ($30)			lda 	(codePtr)
.84ea	d0 ba		bne $84a6			bne 	_ScanLoop 					; if not zero, more to scan
.84ec	a9 13		lda #$13		lda	#19
.84ee	4c 29 85	jmp $8529		jmp	ErrorHandler
.84f1					_ScanSkipData:
.84f1	88		dey				dey 								; point at data token
.84f2	c8		iny				iny
.84f3	98		tya				tya
.84f4	38		sec				sec
.84f5	71 30		adc ($30),y			adc 	(codePtr),y
.84f7	a8		tay				tay
.84f8	80 ac		bra $84a6			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.84fa					Command_WHILE:
.84fa	5a		phy				phy 								; save position of the test
.84fb	a2 00		ldx #$00			ldx 	#0
.84fd	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; work out the number
.8500	20 00 90	jsr $9000			jsr 	NSMIsZero 					; check if zero
.8503	f0 0e		beq $8513			beq 	_WHExitLoop 				; if so exit the loop
.8505	98		tya				tya 								; position *after* test.
.8506	7a		ply				ply 								; restore position before test, at WHILE
.8507	88		dey				dey
.8508	48		pha				pha 								; push after test on the stack
.8509	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.850b	20 0d 90	jsr $900d			jsr 	StackOpen
.850e	20 3f 90	jsr $903f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8511	7a		ply				ply 								; restore the position *after* the test
.8512	60		rts				rts
.8513					_WHExitLoop:
.8513	68		pla				pla 								; throw post loop position
.8514	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8516	aa		tax				tax
.8517	20 a0 84	jsr $84a0			jsr 	ScanForward
.851a	60		rts				rts
.851b					Command_WEND:
.851b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.851d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.851f	20 34 90	jsr $9034			jsr 	StackCheckFrame
.8522	20 50 90	jsr $9050			jsr 	STKLoadCodePosition 		; loop back
.8525	20 26 90	jsr $9026			jsr 	StackClose		 			; erase the frame
.8528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9576					CheckRightBracket:
.9576	b1 30		lda ($30),y			lda 	(codePtr),y
.9578	c8		iny				iny
.9579	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.957b	d0 0f		bne $958c			bne 	CNAFail
.957d	60		rts				rts
.957e					CheckComma:
.957e	b1 30		lda ($30),y			lda 	(codePtr),y
.9580	c8		iny				iny
.9581	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9583	d0 07		bne $958c			bne 	CNAFail
.9585	60		rts				rts
.9586					CheckNextA:
.9586	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9588	d0 02		bne $958c			bne 	CNAFail
.958a	c8		iny				iny 								; skip character
.958b	60		rts				rts 								; and exit
.958c					CNAFail:
.958c	4c 46 9a	jmp $9a46			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8529					ErrorHandler:
.8529	a8		tay				tay 								; find the error text
.852a	f0 42		beq $856e			beq 	_EHEnd
.852c	a2 00		ldx #$00			ldx 	#0
.852e					_EHFind:
.852e	88		dey				dey 								; found the error text ?
.852f	f0 0a		beq $853b			beq 	_EHFound
.8531					_EHFindZero:
.8531	bd 5f 9a	lda $9a5f,x			lda 	ErrorText,x 				; find the next error
.8534	e8		inx				inx
.8535	c9 00		cmp #$00			cmp 	#0
.8537	d0 f8		bne $8531			bne 	_EHFindZero
.8539	80 f3		bra $852e			bra 	_EHFind
.853b					_EHFound:
.853b	bd 5f 9a	lda $9a5f,x			lda 	ErrorText,x 				; print the message
.853e	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.8541	e8		inx				inx
.8542	bd 5f 9a	lda $9a5f,x			lda 	ErrorText,x
.8545	d0 f4		bne $853b			bne 	_EHFound
.8547	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8549	b1 30		lda ($30),y			lda 	(codePtr),y
.854b	d0 05		bne $8552			bne 	_EHAtMsg
.854d	c8		iny				iny
.854e	b1 30		lda ($30),y			lda 	(codePtr),y
.8550	f0 17		beq $8569			beq 	_EHCREnd
.8552					_EHAtMsg:
.8552	a2 85		ldx #$85			ldx 	#_AtMsg >> 8 				; print " at "
.8554	a9 71		lda #$71			lda 	#_AtMsg & $FF
.8556	20 7b 85	jsr $857b			jsr 	PrintStringXA
.8559	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.855b	b1 30		lda ($30),y			lda 	(codePtr),y
.855d	48		pha				pha
.855e	c8		iny				iny
.855f	b1 30		lda ($30),y			lda 	(codePtr),y
.8561	aa		tax				tax
.8562	68		pla				pla
.8563	20 d2 96	jsr $96d2			jsr 	ConvertInt16 				; convert XA to string
.8566	20 7b 85	jsr $857b			jsr 	PrintStringXA 				; and print it.
.8569					_EHCREnd:
.8569	a9 0d		lda #$0d			lda 	#13 						; new line
.856b	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.856e					_EHEnd:
.856e	4c 0c 80	jmp $800c			jmp 	WarmStart
>8571	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8579	20 00
.857b					PrintStringXA:
.857b	5a		phy				phy
.857c	86 37		stx $37				stx 	zTemp0+1
.857e	85 36		sta $36				sta 	zTemp0
.8580	a0 00		ldy #$00			ldy 	#0
.8582					_PSXALoop:
.8582	b1 36		lda ($36),y			lda 	(zTemp0),y
.8584	f0 06		beq $858c			beq 	_PSXAExit
.8586	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.8589	c8		iny				iny
.858a	80 f6		bra $8582			bra 	_PSXALoop
.858c					_PSXAExit:
.858c	7a		ply				ply
.858d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.858e					UnaryTrue:
.858e	fa		plx				plx
.858f					ReturnTrue:
.858f	a9 01		lda #$01			lda 	#1  						; set to 1
.8591	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.8594	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8596	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8599	60		rts				rts
.859a					UnaryFalse:
.859a	fa		plx				plx
.859b					ReturnFalse:
.859b	4c d0 8f	jmp $8fd0			jmp 	NSMSetZero 					; set it all to zero
.859e					BinaryCompareEqual:
.859e	fa		plx				plx
.859f	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85a2	c9 00		cmp #$00			cmp 	#0
.85a4	f0 e9		beq $858f			beq 	ReturnTrue
.85a6	80 f3		bra $859b			bra 	ReturnFalse
.85a8					BinaryCompareLess:
.85a8	fa		plx				plx
.85a9	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85ac	c9 ff		cmp #$ff			cmp 	#$FF
.85ae	f0 df		beq $858f			beq 	ReturnTrue
.85b0	80 e9		bra $859b			bra 	ReturnFalse
.85b2					BinaryCompareGreater:
.85b2	fa		plx				plx
.85b3	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85b6	c9 01		cmp #$01			cmp 	#1
.85b8	f0 d5		beq $858f			beq 	ReturnTrue
.85ba	80 df		bra $859b			bra 	ReturnFalse
.85bc					BinaryCompareNotEqual:
.85bc	fa		plx				plx
.85bd	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85c0	c9 00		cmp #$00			cmp 	#0
.85c2	d0 cb		bne $858f			bne 	ReturnTrue
.85c4	80 d5		bra $859b			bra 	ReturnFalse
.85c6					BinaryCompareLessEqual:
.85c6	fa		plx				plx
.85c7	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85ca	c9 01		cmp #$01			cmp 	#1
.85cc	d0 c1		bne $858f			bne 	ReturnTrue
.85ce	80 cb		bra $859b			bra 	ReturnFalse
.85d0					BinaryCompareGreaterEqual:
.85d0	fa		plx				plx
.85d1	20 da 85	jsr $85da			jsr 	CompareBaseCode
.85d4	c9 ff		cmp #$ff			cmp 	#$FF
.85d6	d0 b7		bne $858f			bne 	ReturnTrue
.85d8	80 c1		bra $859b			bra 	ReturnFalse
.85da					CompareBaseCode:
.85da	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; make both values if references.
.85dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.85e0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e3	29 10		and #$10			and 	#NSTString
.85e5	d0 40		bne $8627			bne 	_CBCString
.85e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.85ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ed	d0 3b		bne $862a			bne 	_CBCFloat
.85ef	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85f2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85f5	29 08		and #$08			and 	#NSTFloat
.85f7	d0 31		bne $862a			bne 	_CBCFloat
.85f9	20 2d 86	jsr $862d			jsr 	CompareFixMinusZero
.85fc	e8		inx				inx
.85fd	20 2d 86	jsr $862d			jsr 	CompareFixMinusZero
.8600	ca		dex				dex
.8601	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8604	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8607	10 0b		bpl $8614			bpl 	_CDCSameSign
.8609	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.860c	30 16		bmi $8624			bmi 	_CBCLess 					; return $FF
.860e					_CBCGreater:
.860e	a9 01		lda #$01			lda 	#1
.8610	60		rts				rts
.8611					_CBCEqual:
.8611	a9 00		lda #$00			lda 	#0
.8613	60		rts				rts
.8614					_CDCSameSign:
.8614	20 3d 87	jsr $873d			jsr 	SubTopTwoStack 				; unsigned subtract
.8617	20 00 90	jsr $9000			jsr 	NSMIsZero 					; or the mantissa together
.861a	f0 f5		beq $8611			beq 	_CBCEqual 					; -0 == 0
.861c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.861f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8622	10 ea		bpl $860e			bpl 	_CBCGreater
.8624					_CBCLess:
.8624	a9 ff		lda #$ff			lda 	#$FF
.8626	60		rts				rts
.8627					_CBCString:
.8627	4c 93 86	jmp $8693			jmp 	CompareStrings
.862a					_CBCFloat:
.862a	4c ce 97	jmp $97ce			jmp 	CompareFloat
.862d					CompareFixMinusZero:
.862d	20 00 90	jsr $9000			jsr 	NSMIsZero
.8630	d0 03		bne $8635			bne 	_CFXMZNotZero
.8632	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8635					_CFXMZNotZero:
.8635	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8636					StringConcat:
.8636	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8639	3d 01 06	and $0601,x			and 	NSStatus+1,x
.863c	29 18		and #$18			and 	#NSBTypeMask
.863e	c9 10		cmp #$10			cmp 	#NSTString
.8640	d0 4e		bne $8690			bne		_SCType
.8642	64 38		stz $38				stz 	zTemp1 						; counting total length
.8644	e8		inx				inx
.8645	20 63 86	jsr $8663			jsr 	_SCSetupZ0 					; setup for second
.8648	20 6e 86	jsr $866e			jsr 	_SCLengthZ0 				; length for second
.864b	ca		dex				dex
.864c	20 63 86	jsr $8663			jsr 	_SCSetupZ0 					; setup for first
.864f	20 6e 86	jsr $866e			jsr 	_SCLengthZ0 				; length for first
.8652	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8654	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate
.8657	20 81 86	jsr $8681			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.865a	e8		inx				inx
.865b	20 63 86	jsr $8663			jsr 	_SCSetupZ0 					; copy second out
.865e	20 81 86	jsr $8681			jsr 	_SCCopy
.8661	ca		dex				dex
.8662	60		rts				rts
.8663					_SCSetupZ0:
.8663	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8666	85 36		sta $36				sta 	zTemp0
.8668	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.866b	85 37		sta $37				sta 	zTemp0+1
.866d	60		rts				rts
.866e					_SCLengthZ0:
.866e	5a		phy				phy
.866f	a0 00		ldy #$00			ldy 	#0
.8671					_SCLenLoop:
.8671	b1 36		lda ($36),y			lda 	(zTemp0),y
.8673	f0 0a		beq $867f			beq 	_SCLExit
.8675	c8		iny				iny
.8676	e6 38		inc $38				inc 	zTemp1
.8678	10 f7		bpl $8671			bpl		_SCLenLoop
.867a	a9 09		lda #$09		lda	#9
.867c	4c 29 85	jmp $8529		jmp	ErrorHandler
.867f					_SCLExit:
.867f	7a		ply				ply
.8680	60		rts				rts
.8681					_SCCopy:
.8681	5a		phy				phy
.8682	a0 00		ldy #$00			ldy 	#0
.8684					_SCCopyLoop:
.8684	b1 36		lda ($36),y			lda 	(zTemp0),y
.8686	f0 06		beq $868e			beq 	_SCCExit
.8688	20 4d 9c	jsr $9c4d			jsr 	StringTempWrite
.868b	c8		iny				iny
.868c	80 f6		bra $8684			bra 	_SCCopyLoop
.868e					_SCCExit:
.868e	7a		ply				ply
.868f	60		rts				rts
.8690					_SCType:
.8690	4c 50 9a	jmp $9a50			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.958f					IntegerDivide:
.958f	fa		plx				plx
.9590	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9593	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9596	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9597	0a		asl a				asl 	a
.9598	10 05		bpl $959f			bpl 	_NotRef
.959a	48		pha				pha
.959b	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.959e	68		pla				pla
.959f					_NotRef:
.959f	0a		asl a				asl 	a
.95a0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95a8	f0 03		beq $95ad			beq 	_IntegerCode 				; if clear, then we have two integers
.95aa	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.95ad					_IntegerCode:
.95ad	20 cf 95	jsr $95cf			jsr 	CheckDivideZero 			; do div zero check
.95b0	20 07 96	jsr $9607			jsr 	Int32Divide 				; do the division
.95b3	20 c4 96	jsr $96c4			jsr 	CalculateSign 				; calculate result sign
.95b6					NSMCopyPlusTwoToZero:
.95b6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.95b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95bc	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.95bf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95c2	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.95c5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95c8	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.95cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95ce	60		rts				rts
.95cf					CheckDivideZero:
.95cf	e8		inx				inx
.95d0	20 00 90	jsr $9000			jsr 	NSMIsZero
.95d3	f0 02		beq $95d7			beq 	_CDVError
.95d5	ca		dex				dex
.95d6	60		rts				rts
.95d7					_CDVError:
.95d7	a9 03		lda #$03		lda	#3
.95d9	4c 29 85	jmp $8529		jmp	ErrorHandler
.95dc					IntegerModulus:
.95dc	fa		plx				plx
.95dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.95e0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95e3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e4	0a		asl a				asl 	a
.95e5	10 05		bpl $95ec			bpl 	_NotRef
.95e7	48		pha				pha
.95e8	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95eb	68		pla				pla
.95ec					_NotRef:
.95ec	0a		asl a				asl 	a
.95ed	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95ef	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95f5	f0 03		beq $95fa			beq 	_IntegerCode 				; if clear, then we have two integers
.95f7	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.95fa					_IntegerCode:
.95fa	20 cf 95	jsr $95cf			jsr 	CheckDivideZero 			; do div zero check
.95fd	20 07 96	jsr $9607			jsr 	Int32Divide 				; do the division
.9600	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9603	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9606	60		rts				rts
.9607					Int32Divide:
.9607	48		pha				pha 								; save AXY
.9608	5a		phy				phy
.9609	20 a7 8f	jsr $8fa7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.960c	20 cc 8f	jsr $8fcc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.960f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9611					_I32DivideLoop:
.9611	e8		inx				inx
.9612	e8		inx				inx
.9613	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9616	ca		dex				dex
.9617	ca		dex				dex
.9618	20 e6 8f	jsr $8fe6			jsr 	NSMRotateLeft
.961b	20 47 96	jsr $9647			jsr 	DivideCheckSubtract 		; check if subtract possible
.961e	90 03		bcc $9623			bcc 	_I32DivideNoCarryIn
.9620	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9623					_I32DivideNoCarryIn:
.9623	88		dey				dey 								; loop round till division completed.
.9624	d0 eb		bne $9611			bne 	_I32DivideLoop
.9626	7a		ply				ply 								; restore AXY and exit
.9627	68		pla				pla
.9628	60		rts				rts
.9629					Int32ShiftDivide:
.9629	48		pha				pha 								; save AY
.962a	5a		phy				phy
.962b	e8		inx				inx 								; clear S[X+2]
.962c	e8		inx				inx
.962d	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.9630	ca		dex				dex
.9631	ca		dex				dex
.9632	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9634					_I32SDLoop:
.9634	20 47 96	jsr $9647			jsr 	DivideCheckSubtract 		; check if subtract possible
.9637	e8		inx				inx
.9638	e8		inx				inx
.9639	20 e6 8f	jsr $8fe6			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.963c	ca		dex				dex
.963d	ca		dex				dex
.963e	20 e6 8f	jsr $8fe6			jsr 	NSMRotateLeft
.9641	88		dey				dey 	 							; do 31 times
.9642	d0 f0		bne $9634			bne 	_I32SDLoop
.9644	7a		ply				ply 								; restore AY and exit
.9645	68		pla				pla
.9646	60		rts				rts
.9647					DivideCheckSubtract:
.9647	20 3d 87	jsr $873d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.964a	b0 04		bcs $9650			bcs 	_DCSExit 					; if carry set, then could do, exit
.964c	20 17 87	jsr $8717			jsr 	AddTopTwoStack 				; add it back in
.964f	18		clc				clc 								; and return False
.9650					_DCSExit:
.9650	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9651					MulInteger:
.9651	fa		plx				plx
.9652	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9655	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9658	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9659	0a		asl a				asl 	a
.965a	10 05		bpl $9661			bpl 	_NotRef
.965c	48		pha				pha
.965d	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9660	68		pla				pla
.9661					_NotRef:
.9661	0a		asl a				asl 	a 							; put MSB of type into A:7
.9662	30 0b		bmi $966f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9664	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9667	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.966a	f0 06		beq $9672			beq 	_IntegerCode 				; if clear, then we have two integers
.966c	4c a5 98	jmp $98a5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.966f					_StringData:
.966f	4c 5a 9a	jmp $9a5a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9672					_IntegerCode:
.9672	20 7f 96	jsr $967f			jsr 	MultiplyShort
.9675	c9 00		cmp #$00			cmp 	#0
.9677	f0 05		beq $967e			beq 	_MIExit
.9679	a9 04		lda #$04		lda	#4
.967b	4c 29 85	jmp $8529		jmp	ErrorHandler
.967e					_MIExit:
.967e	60		rts				rts
.967f					MultiplyShort:
.967f	5a		phy				phy 								; save Y
.9680	20 a7 8f	jsr $8fa7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9683	20 cc 8f	jsr $8fcc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9686	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9688					_I32MLoop:
.9688	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.968b	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.968e	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9691	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9694	f0 28		beq $96be			beq 	_I32MExit 					; exit if zero
.9696	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9699	29 01		and #$01			and 	#1
.969b	f0 0e		beq $96ab			beq 	_I32MNoAdd
.969d	20 17 87	jsr $8717			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.96a0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.96a3	10 06		bpl $96ab			bpl 	_I32MNoAdd
.96a5					_I32ShiftRight:
.96a5	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight 				; shift S[X] right
.96a8	c8		iny				iny 								; increment shift count
.96a9	80 0a		bra $96b5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.96ab					_I32MNoAdd:
.96ab	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.96ae	70 f5		bvs $96a5			bvs 	_I32ShiftRight 				; instead.
.96b0	e8		inx				inx
.96b1	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.96b4	ca		dex				dex
.96b5					_I32MShiftUpper:
.96b5	e8		inx				inx 								; shift S[X+2] right
.96b6	e8		inx				inx
.96b7	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight
.96ba	ca		dex				dex
.96bb	ca		dex				dex
.96bc	80 ca		bra $9688			bra 	_I32MLoop 					; try again.
.96be					_I32MExit:
.96be	20 c4 96	jsr $96c4			jsr 	CalculateSign
.96c1	98		tya				tya 								; shift in A
.96c2	7a		ply				ply 								; restore Y and exit
.96c3	60		rts				rts
.96c4					CalculateSign:
.96c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.96c7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.96ca	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.96cd	0a		asl a				asl 	a 							; shift bit 7 into carry
.96ce	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.96d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8693					CompareStrings:
.8693	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8696	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8699	29 10		and #$10			and 	#NSBIsString
.869b	f0 2c		beq $86c9			beq 	_CSTypeError
.869d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.86a0	85 36		sta $36				sta 	zTemp0
.86a2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a5	85 37		sta $37				sta 	zTemp0+1
.86a7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.86aa	85 38		sta $38				sta 	zTemp1
.86ac	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.86af	85 39		sta $39				sta 	zTemp1+1
.86b1	5a		phy				phy 								; save Y so we can access strings
.86b2	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.86b4					_CSLoop:
.86b4	c8		iny				iny
.86b5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.86b7	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.86b9	d0 06		bne $86c1			bne 	_CSDifferent
.86bb	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.86bd	d0 f5		bne $86b4			bne 	_CSLoop 					; still comparing
.86bf					_CSExit:
.86bf	7a		ply				ply 								; reached end, return zero in A from EOS
.86c0	60		rts				rts
.86c1					_CSDifferent:
.86c1	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.86c3	90 fa		bcc $86bf			bcc		_CSExit
.86c5	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.86c7	80 f6		bra $86bf			bra 	_CSExit
.86c9					_CSTypeError:
.86c9	4c 50 9a	jmp $9a50			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.86cc					ShiftLeft:
.86cc	38		sec				sec
.86cd	80 01		bra $86d0			bra 	ShiftMain
.86cf					ShiftRight:
.86cf	18		clc				clc
.86d0					ShiftMain:
.86d0	fa		plx				plx 								; restore X
.86d1	08		php				php 								; save direction
.86d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86d9	0a		asl a				asl 	a
.86da	10 05		bpl $86e1			bpl 	_NotRef
.86dc	48		pha				pha
.86dd	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86e0	68		pla				pla
.86e1					_NotRef:
.86e1	0a		asl a				asl 	a
.86e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86e4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ea	f0 03		beq $86ef			beq 	_IntegerCode 				; if clear, then we have two integers
.86ec	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.86ef					_IntegerCode:
.86ef	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.86f2	29 e0		and #$e0			and 	#$E0
.86f4	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.86f7	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.86fa	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86fd	d0 13		bne $8712			bne 	_SMExit0 					; if >= 32 it will always return zero.
.86ff					_SMLoop:
.86ff	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8702	30 11		bmi $8715			bmi 	_SMExit 					; exit if done.
.8704	28		plp				plp 								; restore direcition setting
.8705	08		php				php
.8706	90 05		bcc $870d			bcc 	_SMRight
.8708	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; shift left if CS
.870b	80 f2		bra $86ff			bra 	_SMLoop
.870d					_SMRight:
.870d	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight 				; shift right if CC
.8710	80 ed		bra $86ff			bra 	_SMLoop
.8712					_SMExit0:
.8712	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero 					; return zero.
.8715					_SMExit:
.8715	28		plp				plp 								; throw direction
.8716	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8717					AddTopTwoStack:
.8717	18		clc				clc
.8718	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.871b	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.871e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8721	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8724	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8727	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.872a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.872d	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8730	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8733	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8736	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8739	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.873c	60		rts				rts
.873d					SubTopTwoStack:
.873d	38		sec				sec
.873e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8741	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8744	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8747	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.874a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.874d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8750	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8753	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8756	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8759	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.875c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.875f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8762	60		rts				rts
.8763					AddInteger:
.8763	fa		plx				plx
.8764	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8767	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.876a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.876b	0a		asl a				asl 	a
.876c	10 05		bpl $8773			bpl 	_NotRef
.876e	48		pha				pha
.876f	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8772	68		pla				pla
.8773					_NotRef:
.8773	0a		asl a				asl 	a 							; put MSB of type into A:7
.8774	30 0b		bmi $8781			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8776	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8779	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.877c	f0 06		beq $8784			beq 	_IntegerCode 				; if clear, then we have two integers
.877e	4c 2d 97	jmp $972d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8781					_StringData:
.8781	4c 36 86	jmp $8636			jmp 	StringConcat							; at least one string - don't know both are strings.
.8784					_IntegerCode:
.8784					AddCode:
.8784	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8787	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.878a	10 8b		bpl $8717			bpl 	AddTopTwoStack
.878c	20 3d 87	jsr $873d			jsr 	SubTopTwoStack 				; do a physical subtraction
.878f	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8792	10 09		bpl $879d			bpl 	_AddExit
.8794	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8797	9d 00 06	sta $0600,x			sta 	NSStatus,x
.879a	20 85 8f	jsr $8f85			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.879d					_AddExit:
.879d	60		rts				rts
.879e					SubInteger:
.879e	fa		plx				plx
.879f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87a2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87a5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87a6	0a		asl a				asl 	a
.87a7	10 05		bpl $87ae			bpl 	_NotRef
.87a9	48		pha				pha
.87aa	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87ad	68		pla				pla
.87ae					_NotRef:
.87ae	0a		asl a				asl 	a 							; put MSB of type into A:7
.87af	30 0b		bmi $87bc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.87b1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87b4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87b7	f0 06		beq $87bf			beq 	_IntegerCode 				; if clear, then we have two integers
.87b9	4c 32 97	jmp $9732			jmp 	FloatingPointSub 							; otherwise at least one float.
.87bc					_StringData:
.87bc	4c 5a 9a	jmp $9a5a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.87bf					_IntegerCode:
.87bf	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.87c2	49 80		eor #$80			eor 	#$80
.87c4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.87c7	80 bb		bra $8784			bra 	AddCode 					; and do the same code as add.
.87c9					AndInteger:
.87c9	fa		plx				plx
.87ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87cd	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87d0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87d1	0a		asl a				asl 	a
.87d2	10 05		bpl $87d9			bpl 	_NotRef
.87d4	48		pha				pha
.87d5	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87d8	68		pla				pla
.87d9					_NotRef:
.87d9	0a		asl a				asl 	a
.87da	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87dc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87df	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87e2	f0 03		beq $87e7			beq 	_IntegerCode 				; if clear, then we have two integers
.87e4	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.87e7					_IntegerCode:
.87e7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87ea	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.87ed	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87f0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87f3	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.87f6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87fc	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.87ff	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8802	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8805	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8808	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.880b	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.880e	60		rts				rts
.880f					OraInteger:
.880f	fa		plx				plx
.8810	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8813	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8816	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8817	0a		asl a				asl 	a
.8818	10 05		bpl $881f			bpl 	_NotRef
.881a	48		pha				pha
.881b	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.881e	68		pla				pla
.881f					_NotRef:
.881f	0a		asl a				asl 	a
.8820	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8822	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8825	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8828	f0 03		beq $882d			beq 	_IntegerCode 				; if clear, then we have two integers
.882a	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.882d					_IntegerCode:
.882d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8830	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8833	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8836	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8839	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.883c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.883f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8842	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8845	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8848	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.884b	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.884e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8851	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8854	60		rts				rts
.8855					EorInteger:
.8855	fa		plx				plx
.8856	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8859	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.885c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.885d	0a		asl a				asl 	a
.885e	10 05		bpl $8865			bpl 	_NotRef
.8860	48		pha				pha
.8861	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8864	68		pla				pla
.8865					_NotRef:
.8865	0a		asl a				asl 	a
.8866	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8868	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.886b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.886e	f0 03		beq $8873			beq 	_IntegerCode 				; if clear, then we have two integers
.8870	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.8873					_IntegerCode:
.8873	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8876	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8879	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.887c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.887f	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8882	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8885	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8888	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.888b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.888e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8891	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8894	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8897	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.889a	60		rts				rts
.889b					WordIndirect:
.889b	fa		plx				plx
.889c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.889f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88a2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88a3	0a		asl a				asl 	a
.88a4	10 05		bpl $88ab			bpl 	_NotRef
.88a6	48		pha				pha
.88a7	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88aa	68		pla				pla
.88ab					_NotRef:
.88ab	0a		asl a				asl 	a
.88ac	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88ae	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88b1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88b4	f0 03		beq $88b9			beq 	_IntegerCode 				; if clear, then we have two integers
.88b6	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.88b9					_IntegerCode:
.88b9	20 84 87	jsr $8784			jsr 	AddCode 					; add the two values
.88bc	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.88be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88c1	60		rts				rts
.88c2					ByteIndirect:
.88c2	fa		plx				plx
.88c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88c6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88ca	0a		asl a				asl 	a
.88cb	10 05		bpl $88d2			bpl 	_NotRef
.88cd	48		pha				pha
.88ce	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88d1	68		pla				pla
.88d2					_NotRef:
.88d2	0a		asl a				asl 	a
.88d3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88d5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88d8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88db	f0 03		beq $88e0			beq 	_IntegerCode 				; if clear, then we have two integers
.88dd	4c 50 9a	jmp $9a50			jmp 	TypeError 					; anything else, type mismatch.
.88e0					_IntegerCode:
.88e0	20 84 87	jsr $8784			jsr 	AddCode 					; add the two values
.88e3	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.88e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.96d2					ConvertInt16:
.96d2	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.96d5	8e 10 06	stx $0610			stx 	NSMantissa1
.96d8	9c 18 06	stz $0618			stz 	NSMantissa2
.96db	9c 20 06	stz $0620			stz 	NSMantissa3
.96de	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.96e1	a2 00		ldx #$00			ldx 	#0 							; stack level
.96e3	a9 0a		lda #$0a			lda 	#10 						; base
.96e5	80 00		bra $96e7			bra 	ConvertInt32
.96e7					ConvertInt32:
.96e7	5a		phy				phy
.96e8	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.96ea	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.96ed	10 08		bpl $96f7			bpl 	_CI32NotNeg
.96ef	48		pha				pha
.96f0	a9 2d		lda #$2d			lda 	#'-'
.96f2	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96f5	c8		iny				iny
.96f6	68		pla				pla
.96f7					_CI32NotNeg:
.96f7	20 05 97	jsr $9705			jsr 	_CI32DivideConvert 			; recursive conversion
.96fa	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.96fc	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96ff	7a		ply				ply
.9700	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9702	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9704	60		rts				rts
.9705					_CI32DivideConvert:
.9705	e8		inx				inx 								; write to next slot up
.9706	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.9709	ca		dex				dex
.970a	20 07 96	jsr $9607			jsr 	Int32Divide 				; divide
.970d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9710	48		pha				pha
.9711	20 b6 95	jsr $95b6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9714	20 00 90	jsr $9000			jsr 	NSMIsZero 					; is it zero ?
.9717	f0 06		beq $971f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9719	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.971c	20 05 97	jsr $9705			jsr 	_CI32DivideConvert 			; and recusrively call.
.971f					_CI32NoRecurse:
.971f	68		pla				pla 								; remainder
.9720	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9722	90 02		bcc $9726			bcc 	_CI32NotHex
.9724	69 26		adc #$26			adc 	#6+32
.9726					_CI32NotHex:
.9726	69 30		adc #$30			adc 	#48
.9728	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.972b	c8		iny				iny
.972c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.88e9					PrecedenceLevel:
>88e9	04					.byte	 4	; $00 <<
>88ea	02					.byte	 2	; $01 <=
>88eb	02					.byte	 2	; $02 <>
>88ec	00					.byte	 0	; $03 !!3
>88ed	00					.byte	 0	; $04 ><
>88ee	02					.byte	 2	; $05 >=
>88ef	04					.byte	 4	; $06 >>
>88f0	00					.byte	 0	; $07 !!7
>88f1	00					.byte	 0	; $08 !!8
>88f2	00					.byte	 0	; $09 !!9
>88f3	00					.byte	 0	; $0a !!10
>88f4	00					.byte	 0	; $0b !!11
>88f5	00					.byte	 0	; $0c !!12
>88f6	00					.byte	 0	; $0d !!13
>88f7	00					.byte	 0	; $0e !!14
>88f8	00					.byte	 0	; $0f !!15
>88f9	00					.byte	 0	; $10 @
>88fa	00					.byte	 0	; $11 !!17
>88fb	00					.byte	 0	; $12 !!18
>88fc	00					.byte	 0	; $13 [
>88fd	04					.byte	 4	; $14 \
>88fe	00					.byte	 0	; $15 ]
>88ff	01					.byte	 1	; $16 ^
>8900	00					.byte	 0	; $17 _
>8901	00					.byte	 0	; $18 `
>8902	00					.byte	 0	; $19 !!25
>8903	00					.byte	 0	; $1a !!26
>8904	00					.byte	 0	; $1b {
>8905	01					.byte	 1	; $1c |
>8906	00					.byte	 0	; $1d }
>8907	00					.byte	 0	; $1e ~
>8908	00					.byte	 0	; $1f [7m<7F>[m
>8909	00					.byte	 0	; $20
>890a	05					.byte	 5	; $21 !
>890b	00					.byte	 0	; $22 "
>890c	00					.byte	 0	; $23 #
>890d	05					.byte	 5	; $24 $
>890e	04					.byte	 4	; $25 %
>890f	01					.byte	 1	; $26 &
>8910	00					.byte	 0	; $27 '
>8911	00					.byte	 0	; $28 (
>8912	00					.byte	 0	; $29 )
>8913	04					.byte	 4	; $2a *
>8914	03					.byte	 3	; $2b +
>8915	00					.byte	 0	; $2c ,
>8916	03					.byte	 3	; $2d -
>8917	00					.byte	 0	; $2e .
>8918	04					.byte	 4	; $2f /
>8919	00					.byte	 0	; $30 0
>891a	00					.byte	 0	; $31 1
>891b	00					.byte	 0	; $32 2
>891c	00					.byte	 0	; $33 3
>891d	00					.byte	 0	; $34 4
>891e	00					.byte	 0	; $35 5
>891f	00					.byte	 0	; $36 6
>8920	00					.byte	 0	; $37 7
>8921	00					.byte	 0	; $38 8
>8922	00					.byte	 0	; $39 9
>8923	00					.byte	 0	; $3a :
>8924	00					.byte	 0	; $3b ;
>8925	02					.byte	 2	; $3c <
>8926	02					.byte	 2	; $3d =
>8927	02					.byte	 2	; $3e >
>8928	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8929					EvaluateExpressionAt0:
.8929	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.892b					EvaluateExpression:
.892b	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.892d					EvaluateExpressionAtPrecedence:
.892d	48		pha				pha 								; save precedence level
.892e	20 fc 8b	jsr $8bfc			jsr 	EvaluateTerm 				; evaluate term into level X.
.8931	68		pla				pla 								; restore precedence level.
.8932					_EXPRLoop:
.8932	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8934	b1 30		lda ($30),y			lda 	(codePtr),y
.8936	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8938	b0 25		bcs $895f			bcs 	_EXPRExit
.893a	da		phx				phx 								; read the operator precedence
.893b	aa		tax				tax
.893c	bd e9 88	lda $88e9,x			lda 	PrecedenceLevel,x
.893f	fa		plx				plx
.8940	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8942	f0 1b		beq $895f			beq 	_EXPRExit
.8944	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8946	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8948	c5 37		cmp $37				cmp 	zTemp0+1
.894a	b0 13		bcs $895f			bcs		_EXPRExit 					; if current >= operator exit
.894c	48		pha				pha 								; save current precedence.
.894d	b1 30		lda ($30),y			lda 	(codePtr),y
.894f	c8		iny				iny
.8950	48		pha				pha
.8951	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8953	e8		inx				inx 								; work out the right hand side.
.8954	20 2d 89	jsr $892d			jsr 	EvaluateExpressionAtPrecedence
.8957	ca		dex				dex
.8958	68		pla				pla 								; get operator, call the code.
.8959	20 62 89	jsr $8962			jsr 	_EXPRCaller
.895c	68		pla				pla 								; restore precedence level
.895d	80 d3		bra $8932			bra 	_EXPRLoop 					; and go round.
.895f					_EXPRExit:
.895f	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8961	60		rts				rts
.8962					_EXPRCaller:
.8962	da		phx				phx 								; save on stack, first thing is to restore it
.8963	0a		asl a				asl 	a 							; double so can use vectors into X
.8964	aa		tax				tax
.8965	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.972d					FloatingPointAdd:
.972d	20 ce 98	jsr $98ce			jsr 	FloatPrepare 				; prepare for floats
.9730	80 0b		bra $973d			bra 	FloatAdd
.9732					FloatingPointSub:
.9732	20 ce 98	jsr $98ce			jsr 	FloatPrepare 				; prepare for floats
.9735					FloatSubtract:
.9735	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9738	49 80		eor #$80			eor 	#$80
.973a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.973d					FloatAdd:
.973d	48		pha				pha
.973e	5a		phy				phy
.973f	20 df 98	jsr $98df			jsr 	NSNormalise 				; normalise S[X]
.9742	f0 54		beq $9798			beq 	_FAReturn1
.9744	e8		inx				inx 								; normalise S[X+1]
.9745	20 df 98	jsr $98df			jsr 	NSNormalise
.9748	ca		dex				dex
.9749	c9 00		cmp #$00			cmp 	#0
.974b	f0 6f		beq $97bc			beq 	_FAExit 					; if so, just return A
.974d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9750	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9753	f0 1b		beq $9770			beq 	_FAExponentsEqual
.9755	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9758	a8		tay				tay
.9759	38		sec				sec 								; do a signed comparison of the exponents.
.975a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.975d	50 02		bvc $9761			bvc 	_FANoSignedChange
.975f	49 80		eor #$80			eor 	#$80
.9761					_FANoSignedChange:
.9761	29 80		and #$80			and 	#$80
.9763	10 03		bpl $9768			bpl 	_FAHaveMax
.9765	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9768					_FAHaveMax:
.9768	20 bf 97	jsr $97bf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.976b	e8		inx				inx
.976c	20 bf 97	jsr $97bf			jsr 	_FAShiftToExponent
.976f	ca		dex				dex
.9770					_FAExponentsEqual:
.9770	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9773	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9776	30 10		bmi $9788			bmi 	_FADifferentSigns
.9778	20 17 87	jsr $8717			jsr 	AddTopTwoStack 				; do the add of the mantissae
.977b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.977e	10 3c		bpl $97bc			bpl 	_FAExit 					; if no, we are done.
.9780	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9783	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9786	80 34		bra $97bc			bra 	_FAExit
.9788					_FADifferentSigns:
.9788	20 3d 87	jsr $873d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.978b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.978e	10 2c		bpl $97bc			bpl 	_FAExit 					; if no, we are done.
.9790	20 7c 8f	jsr $8f7c			jsr 	NSMNegate 					; netate result
.9793	20 85 8f	jsr $8f85			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9796	80 24		bra $97bc			bra 	_FAExit
.9798					_FAReturn1:
.9798	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.979b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.979e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.97a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97a4	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.97a7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97aa	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.97ad	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97b0	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.97b3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97b6	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.97b9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97bc					_FAExit:
.97bc	7a		ply				ply
.97bd	68		pla				pla
.97be	60		rts				rts
.97bf					_FAShiftToExponent:
.97bf					_FAShiftToExponent2:
.97bf	98		tya				tya 								; compare Y to exponent
.97c0	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.97c3	f0 08		beq $97cd			beq 	_FASEExit 					; exit if so.
.97c5	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight	 			; shift the mantissa right
.97c8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.97cb	80 f2		bra $97bf			bra 	_FAShiftToExponent2
.97cd					_FASEExit:
.97cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.97ce					CompareFloat:
.97ce	20 35 97	jsr $9735			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.97d1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.97d4	29 f8		and #$f8			and 	#$F8
.97d6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97d9	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.97dc	f0 09		beq $97e7			beq 	_FCExit 					; zero, so approximately identical
.97de	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.97e0	3c 00 06	bit $0600,x			bit 	NSStatus,x
.97e3	10 02		bpl $97e7			bpl 	_FCExit
.97e5					_FCNegative:
.97e5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.97e7					_FCExit:
.97e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.97e8					FDivideCommand:
.97e8	fa		plx				plx	 								; restore stack position
.97e9	20 ce 98	jsr $98ce			jsr 	FloatPrepare 				; prepare for floats
.97ec					FloatDivide:
.97ec	48		pha				pha
.97ed	e8		inx				inx
.97ee	20 df 98	jsr $98df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97f1	ca		dex				dex
.97f2	c9 00		cmp #$00			cmp 	#0
.97f4	f0 20		beq $9816			beq 	_FDZero
.97f6	20 df 98	jsr $98df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97f9	f0 19		beq $9814			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97fb	20 29 96	jsr $9629			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.97fe	20 b6 95	jsr $95b6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9801	20 df 98	jsr $98df			jsr		NSNormalise 				; renormalise
.9804	20 c4 96	jsr $96c4			jsr 	CalculateSign 				; calculate result sign
.9807	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.980a	38		sec				sec
.980b	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.980e	38		sec				sec
.980f	e9 1e		sbc #$1e			sbc 	#30
.9811	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9814					_FDExit:
.9814	68		pla				pla
.9815	60		rts				rts
.9816					_FDZero:
.9816	a9 03		lda #$03		lda	#3
.9818	4c 29 85	jmp $8529		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.981b					FloatFractionalPart:
.981b	5a		phy				phy
.981c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.981f	29 7f		and #$7f			and 	#$7F
.9821	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9824	20 df 98	jsr $98df			jsr 	NSNormalise
.9827	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.982a	38		sec				sec
.982b	e9 e0		sbc #$e0			sbc 	#$E0
.982d	90 31		bcc $9860			bcc 	_FFPExit 					; already fractional
.982f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9831	b0 2a		bcs $985d			bcs 	_FFPZero
.9833	a8		tay				tay 								; put count to do in Y
.9834	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9837	20 62 98	jsr $9862			jsr 	_FFPPartial
.983a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.983d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9840	20 62 98	jsr $9862			jsr 	_FFPPartial
.9843	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9846	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9849	20 62 98	jsr $9862			jsr 	_FFPPartial
.984c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.984f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9852	20 62 98	jsr $9862			jsr 	_FFPPartial
.9855	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9858	20 00 90	jsr $9000			jsr 	NSMIsZero 					; zeroed check.
.985b	d0 03		bne $9860			bne 	_FFPExit
.985d					_FFPZero:
.985d	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.9860					_FFPExit:
.9860	7a		ply				ply
.9861	60		rts				rts
.9862					_FFPPartial:
.9862	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9864	f0 17		beq $987d			beq 	_FFFPPExit
.9866	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9868	b0 0c		bcs $9876			bcs 	_FFFPPWholeByte
.986a	5a		phy				phy
.986b					_FFFPPLeft:
.986b	0a		asl a				asl 	a
.986c	88		dey				dey
.986d	d0 fc		bne $986b			bne 	_FFFPPLeft
.986f	7a		ply				ply
.9870					_FFFPPRight:
.9870	4a		lsr a				lsr 	a
.9871	88		dey				dey
.9872	d0 fc		bne $9870			bne 	_FFFPPRight
.9874	80 07		bra $987d			bra 	_FFFPPExit
.9876					_FFFPPWholeByte:
.9876	98		tya				tya 								; subtract 8 from count
.9877	38		sec				sec
.9878	e9 08		sbc #$08			sbc 	#8
.987a	a8		tay				tay
.987b	a9 00		lda #$00			lda 	#0 							; and clear all
.987d					_FFFPPExit:
.987d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.987e					FloatIntegerPart:
.987e	48		pha				pha
.987f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9882	f0 1f		beq $98a3			beq 	_FIPExit 					; if so do nothing
.9884	20 00 90	jsr $9000			jsr 	NSMIsZero 					; is it zero ?
.9887	f0 17		beq $98a0			beq 	_FIPZero 					; if so return zero.
.9889	20 df 98	jsr $98df			jsr 	NSNormalise 				; normalise
.988c	f0 12		beq $98a0			beq 	_FIPZero 					; normalised to zero, exit zero
.988e					_FIPShift:
.988e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9891	10 08		bpl $989b			bpl 	_FIPCheckZero
.9893	20 f3 8f	jsr $8ff3			jsr 	NSMShiftRight 				; shift mantissa right
.9896	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9899	80 f3		bra $988e			bra 	_FIPShift
.989b					_FIPCheckZero:
.989b	20 00 90	jsr $9000			jsr 	NSMIsZero 					; avoid -0 problem
.989e	d0 03		bne $98a3			bne 	_FIPExit 					; set to zero if mantissa zero.
.98a0					_FIPZero:
.98a0	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.98a3					_FIPExit:
.98a3	68		pla				pla
.98a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.98a5					FloatingPointMultiply:
.98a5	20 ce 98	jsr $98ce			jsr 	FloatPrepare 				; prepare for floats
.98a8					FloatMultiply:
.98a8	48		pha				pha
.98a9	20 df 98	jsr $98df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98ac	f0 1b		beq $98c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98ae	e8		inx				inx
.98af	20 df 98	jsr $98df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98b2	ca		dex				dex
.98b3	c9 00		cmp #$00			cmp 	#0
.98b5	f0 0f		beq $98c6			beq 	_FDSetZero
.98b7	20 7f 96	jsr $967f			jsr 	MultiplyShort 				; calculate the result.
.98ba	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.98bd	18		clc				clc
.98be	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.98c1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98c4	80 03		bra $98c9			bra 	_FDExit
.98c6					_FDSetZero:
.98c6	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero 					; return 0
.98c9					_FDExit:
.98c9	20 df 98	jsr $98df			jsr 	NSNormalise 				; normalise the result
.98cc	68		pla				pla
.98cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.98ce					FloatPrepare:
.98ce	20 3b 8a	jsr $8a3b			jsr 	DereferenceTopTwo 			; dereference the top two values
.98d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.98d4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.98d7	29 10		and #$10			and 	#NSBIsString
.98d9	d0 01		bne $98dc			bne 	_FDType
.98db	60		rts				rts
.98dc					_FDType:
.98dc	4c 50 9a	jmp $9a50			jmp 	TypeError
.98df					NSNormalise:
.98df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.98e2	29 80		and #$80			and 	#$80
.98e4	09 08		ora #$08			ora 	#NSTFloat
.98e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98e9	20 00 90	jsr $9000			jsr 	NSMIsZero 					; if zero exit
.98ec	d0 09		bne $98f7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98ee	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.98f1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.98f4	a9 00		lda #$00			lda 	#0 							; set Z flag
.98f6	60		rts				rts
.98f7					_NSNormaliseOptimise:
.98f7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98fa	d0 22		bne $991e			bne 	_NSNormaliseLoop
.98fc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.98ff	30 1d		bmi $991e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9901	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9904	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9907	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.990a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.990d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9910	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9913	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9916	38		sec				sec
.9917	e9 08		sbc #$08			sbc 	#8
.9919	9d 28 06	sta $0628,x			sta 	NSExponent,x
.991c	80 d9		bra $98f7			bra 	_NSNormaliseOptimise
.991e					_NSNormaliseLoop:
.991e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9921	70 08		bvs $992b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9923	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; shift mantissa left
.9926	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9929	80 f3		bra $991e			bra 	_NSNormaliseLoop
.992b					_NSNExit:
.992b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.992d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8968					AssignNumber:
.8968	5a		phy				phy
.8969	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.896c	85 36		sta $36				sta 	zTemp0
.896e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8971	85 37		sta $37				sta 	zTemp0+1
.8973	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8976	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8978	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897b	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.897d	c9 08		cmp #$08			cmp 	#NSTFloat
.897f	f0 2a		beq $89ab			beq 	_ANFloat
.8981	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8984	f0 05		beq $898b			beq		_ANNotFloat
.8986	e8		inx				inx
.8987	20 7e 98	jsr $987e			jsr 	FloatIntegerPart 			; make it an integer
.898a	ca		dex				dex
.898b					_ANNotFloat:
.898b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.898e	29 03		and #$03			and 	#3
.8990	d0 05		bne $8997			bne 	_ANByteWord
.8992	20 b7 89	jsr $89b7			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8995	80 1e		bra $89b5			bra 	_ANExit
.8997					_ANByteWord:
.8997	48		pha				pha 								; save count
.8998	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.899b	92 36		sta ($36)			sta 	(zTemp0)
.899d	68		pla				pla
.899e	c9 01		cmp #$01			cmp	 	#1
.89a0	f0 13		beq $89b5			beq 	_ANExit
.89a2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.89a5	a0 01		ldy #$01			ldy 	#1
.89a7	91 36		sta ($36),y			sta 	(zTemp0),y
.89a9	80 0a		bra $89b5			bra 	_ANExit
.89ab					_ANFloat:
.89ab	20 b7 89	jsr $89b7			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.89ae	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.89b1	a0 04		ldy #$04			ldy 	#4
.89b3	91 36		sta ($36),y			sta 	(zTemp0),y
.89b5					_ANExit:
.89b5	7a		ply				ply
.89b6	60		rts				rts
.89b7					_ANCopy4PackSign:
.89b7	a0 03		ldy #$03			ldy 	#3
.89b9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.89bc	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.89be	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.89c1	91 36		sta ($36),y			sta 	(zTemp0),y
.89c3	88		dey				dey
.89c4	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.89c7	91 36		sta ($36),y			sta 	(zTemp0),y
.89c9	88		dey				dey
.89ca	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89cd	91 36		sta ($36),y			sta 	(zTemp0),y
.89cf	88		dey				dey
.89d0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89d3	91 36		sta ($36),y			sta 	(zTemp0),y
.89d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.89d6					AssignString:
.89d6	5a		phy				phy
.89d7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89da	85 38		sta $38				sta 	zTemp1
.89dc	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89df	85 39		sta $39				sta 	zTemp1+1
.89e1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89e4	85 36		sta $36				sta 	zTemp0
.89e6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89e9	85 37		sta $37				sta 	zTemp0+1
.89eb	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.89ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ef	f0 23		beq $8a14			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.89f1	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.89f2	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.89f4	e9 02		sbc #$02			sbc 	#2
.89f6	85 3c		sta $3c				sta 	zsTemp
.89f8	a0 01		ldy #$01			ldy 	#1
.89fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.89fc	e9 00		sbc #$00			sbc 	#0
.89fe	85 3d		sta $3d				sta 	zsTemp+1
.8a00	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8a02					_ASGetLength:
.8a02	c8		iny				iny
.8a03	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a05	d0 fb		bne $8a02			bne 	_ASGetLength
.8a07	98		tya				tya 								; is this length <= current length
.8a08	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8a0a	90 20		bcc $8a2c			bcc 	_ASCopyString
.8a0c	f0 1e		beq $8a2c			beq 	_ASCopyString
.8a0e	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8a10	a0 01		ldy #$01			ldy 	#1
.8a12	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a14					_ASNewStringRequired:
.8a14	e8		inx				inx 								; concrete the new string.
.8a15	20 94 9b	jsr $9b94			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8a18	ca		dex				dex
.8a19	18		clc				clc
.8a1a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8a1d	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8a1f	92 36		sta ($36)			sta 	(zTemp0)
.8a21	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a24	69 00		adc #$00			adc 	#0
.8a26	a0 01		ldy #$01			ldy 	#1
.8a28	91 36		sta ($36),y			sta 	(zTemp0),y
.8a2a	80 0d		bra $8a39			bra 	_ASExit
.8a2c					_ASCopyString:
.8a2c	a0 00		ldy #$00			ldy 	#0
.8a2e					_ASCopyLoop:
.8a2e	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a30	c8		iny				iny
.8a31	c8		iny				iny
.8a32	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a34	88		dey				dey
.8a35	c9 00		cmp #$00			cmp 	#0
.8a37	d0 f5		bne $8a2e			bne 	_ASCopyLoop
.8a39					_ASExit:
.8a39	7a		ply				ply
.8a3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8a3b					DereferenceTopTwo:
.8a3b	e8		inx				inx
.8a3c	20 40 8a	jsr $8a40			jsr 	Dereference 				; deref x+1
.8a3f	ca		dex				dex  								; falls through to deref x
.8a40					Dereference:
.8a40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8a43	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8a45	f0 57		beq $8a9e			beq 	_DRFExit 					; not a reference
.8a47	5a		phy				phy
.8a48	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8a4b	85 36		sta $36				sta 	zTemp0
.8a4d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a50	85 37		sta $37				sta 	zTemp0+1
.8a52	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8a55	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8a57	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a5a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8a5d	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8a5f	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8a61	f0 0f		beq $8a72			beq 	_DRFDereferenceTwo
.8a63	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8a65	f0 39		beq $8aa0			beq 	_DRFFull
.8a67	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8a6a	29 03		and #$03			and 	#3
.8a6c	f0 32		beq $8aa0			beq 	_DRFFull 					; the whole word
.8a6e	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8a70	f0 07		beq $8a79			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8a72					_DRFDereferenceTwo:
.8a72	a0 01		ldy #$01			ldy 	#1
.8a74	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a76	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a79					_DRFClear23:
.8a79	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8a7c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a7f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8a82	29 18		and #$18			and 	#NSBTypeMask
.8a84	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a87	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8a89	d0 12		bne $8a9d			bne 	_DRFNotString
.8a8b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8a8e	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8a91	d0 0a		bne $8a9d			bne 	_DRFNotString
.8a93	a9 9f		lda #$9f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8a95	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8a98	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.8a9a	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a9d					_DRFNotString
.8a9d	7a		ply				ply 								; restore Y and exit
.8a9e					_DRFExit:
.8a9e	60		rts				rts
.8a9f					_DRFNullString:
>8a9f	00						.byte 	0
.8aa0					_DRFFull:
.8aa0	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8aa2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8aa7	c8		iny				iny
.8aa8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aaa	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aad	c8		iny				iny
.8aae	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ab3	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8ab6	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8ab9	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8abb	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8abe	f0 06		beq $8ac6			beq 	_DRFNoExponent
.8ac0	c8		iny				iny 								; if not, read the exponent as well.
.8ac1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ac3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8ac6					_DRFNoExponent:
.8ac6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8ac9	10 0d		bpl $8ad8			bpl 	_DRFExit2 					; if not, then exit.
.8acb	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8acd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ad0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8ad3	09 80		ora #$80			ora 	#NSBIsNegative
.8ad5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ad8					_DRFExit2:
.8ad8	7a		ply				ply
.8ad9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8ada					EncodeNumberStart:
.8ada	38		sec				sec
.8adb	80 01		bra $8ade			bra 	EncodeNumberContinue+1
.8add					EncodeNumberContinue:
.8add	18		clc				clc
.8ade					EncodeNumber:
.8ade	08		php				php 								; save reset.
.8adf	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ae1	f0 12		beq $8af5			beq 	_ENIsOkay
.8ae3	c9 30		cmp #$30			cmp 	#"0"
.8ae5	90 04		bcc $8aeb			bcc 	_ENBadNumber
.8ae7	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ae9	90 0a		bcc $8af5			bcc 	_ENIsOkay
.8aeb					_ENBadNumber:
.8aeb	28		plp				plp 								; throw saved reset
.8aec	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8aef	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8af1	f0 7e		beq $8b71			beq 	_ENConstructFinal
.8af3					_ENFail:
.8af3	18		clc				clc 								; not allowed
.8af4	60		rts				rts
.8af5					_ENIsOkay:
.8af5	28		plp				plp 								; are we restarting
.8af6	90 15		bcc $8b0d			bcc 	_ENNoRestart
.8af8					_ENStartEncode:
.8af8	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8afa	f0 0c		beq $8b08			beq 	_ENFirstDP
.8afc	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8afe	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.8b01	a9 01		lda #$01			lda 	#ESTA_Low
.8b03					_ENExitChange:
.8b03	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8b06	38		sec				sec
.8b07	60		rts				rts
.8b08					_ENFirstDP:
.8b08	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero 					; clear integer part
.8b0b	80 3f		bra $8b4c			bra 	_ESTASwitchFloat			; go straight to float and exi
.8b0d					_ENNoRestart:
.8b0d	48		pha				pha 								; save on stack.
.8b0e	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8b11	c9 01		cmp #$01			cmp 	#ESTA_Low
.8b13	f0 09		beq $8b1e			beq  	_ESTALowState
.8b15	c9 02		cmp #$02			cmp 	#ESTA_High
.8b17	f0 29		beq $8b42			beq 	_ESTAHighState
.8b19	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8b1b	f0 3b		beq $8b58			beq 	_ESTADecimalState
>8b1d	db						.byte 	$DB 						; causes a break in the emulator
.8b1e					_ESTALowState:
.8b1e	68		pla				pla 								; get value back
.8b1f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8b21	f0 29		beq $8b4c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8b23	29 0f		and #$0f			and 	#15 						; make digit
.8b25	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8b28	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8b2b	0a		asl a				asl 	a
.8b2c	0a		asl a				asl 	a
.8b2d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b30	0a		asl a				asl 	a
.8b31	6d 06 07	adc $0706			adc 	DigitTemp
.8b34	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b37	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8b39	90 05		bcc $8b40			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8b3b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8b3d	8d 05 07	sta $0705			sta 	EncodeState
.8b40					_ESTANoSwitch:
.8b40	38		sec				sec
.8b41	60		rts				rts
.8b42					_ESTAHighState:
.8b42	68		pla				pla 								; get value back
.8b43	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8b45	f0 05		beq $8b4c			beq 	_ESTASwitchFloat
.8b47	20 ab 8b	jsr $8bab			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8b4a	38		sec				sec
.8b4b	60		rts				rts
.8b4c					_ESTASwitchFloat:
.8b4c	9c 07 07	stz $0707			stz 	DecimalCount
.8b4f	e8		inx				inx 								; zero the decimal additive.
.8b50	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.8b53	ca		dex				dex
.8b54	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8b56	80 ab		bra $8b03			bra 	_ENExitChange
.8b58					_ESTADecimalState:
.8b58	68		pla				pla 								; digit.
.8b59	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8b5b	f0 96		beq $8af3			beq 	_ENFail
.8b5d	e8		inx				inx 								; put digit into fractional part of X+1
.8b5e	20 ab 8b	jsr $8bab			jsr 	ESTAShiftDigitIntoMantissa
.8b61	ca		dex				dex
.8b62	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8b65	ad 07 07	lda $0707			lda 	DecimalCount
.8b68	c9 0b		cmp #$0b			cmp 	#11
.8b6a	f0 02		beq $8b6e			beq 	_ESTADSFail
.8b6c	38		sec				sec
.8b6d	60		rts				rts
.8b6e					_ESTADSFail:
.8b6e	4c 4b 9a	jmp $9a4b			jmp 	RangeError
.8b71					_ENConstructFinal:
.8b71	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8b74	f0 33		beq $8ba9			beq 	_ENCFExit 					; no decimals
.8b76	5a		phy				phy
.8b77	0a		asl a				asl 	a 							; x 4 and CLC
.8b78	0a		asl a				asl 	a
.8b79	6d 07 07	adc $0707			adc 	DecimalCount
.8b7c	a8		tay				tay
.8b7d	b9 0a 9a	lda $9a0a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8b80	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b83	b9 0b 9a	lda $9a0b,y			lda 	DecimalScalarTable-5+1,y
.8b86	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8b89	b9 0c 9a	lda $9a0c,y			lda 	DecimalScalarTable-5+2,y
.8b8c	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b8f	b9 0d 9a	lda $9a0d,y			lda 	DecimalScalarTable-5+3,y
.8b92	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b95	b9 0e 9a	lda $9a0e,y			lda 	DecimalScalarTable-5+4,y
.8b98	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b9b	a9 08		lda #$08			lda 	#NSTFloat
.8b9d	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ba0	7a		ply				ply
.8ba1	e8		inx				inx 								; multiply decimal const by decimal scalar
.8ba2	20 a8 98	jsr $98a8			jsr 	FloatMultiply
.8ba5	ca		dex				dex
.8ba6	20 3d 97	jsr $973d			jsr 	FloatAdd 					; add to integer part.
.8ba9					_ENCFExit:
.8ba9	18		clc				clc 								; reject the digit.
.8baa	60		rts				rts
.8bab					ESTAShiftDigitIntoMantissa:
.8bab	29 0f		and #$0f			and 	#15 						; save digit
.8bad	48		pha				pha
.8bae	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8bb1	48		pha				pha
.8bb2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8bb5	48		pha				pha
.8bb6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bb9	48		pha				pha
.8bba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bbd	48		pha				pha
.8bbe	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 2
.8bc1	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 4
.8bc4	18		clc				clc 								; pop mantissa and add
.8bc5	68		pla				pla
.8bc6	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bc9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bcc	68		pla				pla
.8bcd	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8bd0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bd3	68		pla				pla
.8bd4	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8bd7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bda	68		pla				pla
.8bdb	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8bde	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8be1	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 10
.8be4	68		pla				pla 								; add digit
.8be5	18		clc				clc
.8be6	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8be9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bec	90 0d		bcc $8bfb			bcc 	_ESTASDExit
.8bee	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8bf1	d0 08		bne $8bfb			bne 	_ESTASDExit
.8bf3	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8bf6	d0 03		bne $8bfb			bne 	_ESTASDExit
.8bf8	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8bfb					_ESTASDExit:
.8bfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8bfc					EvaluateTerm:
.8bfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfe	30 18		bmi $8c18			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8c00	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8c02	b0 6f		bcs $8c73			bcs 	_ETVariable
.8c04	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8c06	90 6e		bcc $8c76			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8c08	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c0a	b0 6a		bcs $8c76			bcs 	_ETPuncUnary
.8c0c	20 da 8a	jsr $8ada			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8c0f					_ETNumber:
.8c0f	c8		iny				iny 								; keep encoding until we have the numbers
.8c10	b1 30		lda ($30),y			lda 	(codePtr),y
.8c12	20 dd 8a	jsr $8add			jsr 	EncodeNumberContinue
.8c15	b0 f8		bcs $8c0f			bcs 	_ETNumber 					; go back if accepted.
.8c17	60		rts				rts
.8c18					_ETCheckUnary:
.8c18	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8c1a	f0 41		beq $8c5d			beq 	_ETString
.8c1c	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8c1e	f0 12		beq $8c32			beq 	_ETHexConstant
.8c20	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8c22	90 0b		bcc $8c2f			bcc 	_ETSyntaxError
.8c24	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8c26	b0 07		bcs $8c2f			bcs 	_ETSyntaxError
.8c28	da		phx				phx 								; push X on the stack
.8c29	0a		asl a				asl 	a 							; put vector x 2 into X
.8c2a	aa		tax				tax
.8c2b	c8		iny				iny 								; consume unary function token
.8c2c	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8c2f					_ETSyntaxError:
.8c2f	4c 46 9a	jmp $9a46			jmp 	SyntaxError
.8c32					_ETHexConstant:
.8c32	c8		iny				iny 								; skip #
.8c33	c8		iny				iny 								; skip count
.8c34	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero 					; clear result
.8c37					_ETHLoop:
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c8		iny				iny 								; and consume
.8c3a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8c3c	f0 1e		beq $8c5c			beq 	_ETHExit
.8c3e	48		pha				pha 								; save on stack.
.8c3f	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 2
.8c42	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 4
.8c45	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 8
.8c48	20 e5 8f	jsr $8fe5			jsr 	NSMShiftLeft 				; x 16
.8c4b	68		pla				pla 								; ASCII
.8c4c	c9 41		cmp #$41			cmp 	#'A'
.8c4e	90 02		bcc $8c52			bcc 	_ETHNotChar
.8c50	e9 07		sbc #$07			sbc 	#7
.8c52					_ETHNotChar:
.8c52	29 0f		and #$0f			and 	#15 						; digit now
.8c54	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8c57	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c5a	80 db		bra $8c37			bra 	_ETHLoop 					; go round.
.8c5c					_ETHExit:
.8c5c	60		rts				rts
.8c5d					_ETString:
.8c5d	c8		iny				iny 								; look at length
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	48		pha				pha
.8c61	c8		iny				iny 								; first character
.8c62	20 21 95	jsr $9521			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8c65	68		pla				pla 								; restore count and save
.8c66	85 36		sta $36				sta 	zTemp0
.8c68	98		tya				tya 								; add length to Y to skip it.
.8c69	18		clc				clc
.8c6a	65 36		adc $36				adc 	zTemp0
.8c6c	a8		tay				tay
.8c6d	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8c6f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c72	60		rts				rts
.8c73					_ETVariable:
.8c73	4c cd 8c	jmp $8ccd			jmp 	VariableHandler
.8c76					_ETPuncUnary:
.8c76	c8		iny				iny 								; consume the unary character
.8c77	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8c79	f0 2d		beq $8ca8			beq 	_ETUnaryNegate
.8c7b	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8c7d	f0 39		beq $8cb8			beq 	_ETDereference
.8c7f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8c81	f0 43		beq $8cc6			beq 	_ETParenthesis
.8c83	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8c85	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8c87	f0 06		beq $8c8f			beq 	_ETIndirection
.8c89	e6 36		inc $36				inc 	zTemp0
.8c8b	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8c8d	d0 a0		bne $8c2f			bne 	_ETSyntaxError
.8c8f					_ETIndirection:
.8c8f	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8c91	1a		inc a				inc 	a
.8c92	48		pha				pha
.8c93	20 fc 8b	jsr $8bfc			jsr 	EvaluateTerm				; evaluate the term
.8c96	20 40 8a	jsr $8a40			jsr 	Dereference 				; dereference it.
.8c99	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8c9c	d0 07		bne $8ca5			bne 	_ETTypeMismatch
.8c9e	68		pla				pla 								; indirection 1-2
.8c9f	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8ca1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ca4	60		rts				rts
.8ca5					_ETTypeMismatch:
.8ca5	4c 50 9a	jmp $9a50			jmp 	TypeError
.8ca8					_ETUnaryNegate:
.8ca8	20 fc 8b	jsr $8bfc			jsr 	EvaluateTerm				; evaluate the term
.8cab	20 40 8a	jsr $8a40			jsr 	Dereference 				; dereference it.
.8cae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8cb1	29 10		and #$10			and 	#NSTString
.8cb3	d0 f0		bne $8ca5			bne 	_ETTypeMismatch
.8cb5	4c 7c 8f	jmp $8f7c			jmp 	NSMNegate  					; just toggles the sign bit.
.8cb8					_ETDereference:
.8cb8	20 fc 8b	jsr $8bfc			jsr 	EvaluateTerm				; evaluate the term
.8cbb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8cbe	29 20		and #$20			and 	#NSBIsReference
.8cc0	f0 e3		beq $8ca5			beq 	_ETTypeMismatch
.8cc2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8cc5	60		rts				rts
.8cc6					_ETParenthesis:
.8cc6	20 2b 89	jsr $892b			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8cc9	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; check for )
.8ccc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8ccd					VariableHandler:
.8ccd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ccf	18		clc				clc
.8cd0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cd2	85 37		sta $37				sta 	zTemp0+1
.8cd4	c8		iny				iny
.8cd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd7	85 36		sta $36				sta 	zTemp0
.8cd9	c8		iny				iny
.8cda	18		clc				clc									; copy variable address+3 to mantissa
.8cdb	69 03		adc #$03			adc 	#3
.8cdd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ce0	a5 37		lda $37				lda 	zTemp0+1
.8ce2	69 00		adc #$00			adc 	#0
.8ce4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ce7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8cea	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8ced	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8cf0	5a		phy				phy
.8cf1	a0 02		ldy #$02			ldy 	#2 							; read type
.8cf3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cf5	7a		ply				ply
.8cf6	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8cf8	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8cfa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cfd	29 04		and #$04			and 	#NSBIsArray
.8cff	d0 01		bne $8d02			bne 	_VHArray
.8d01	60		rts				rts
.8d02					_VHArray:
>8d02	db						.byte 	$DB 						; causes a break in the emulator
.8d03	80 fd		bra $8d02			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.992e					AbsUnary:
.992e	fa		plx				plx 								; restore stack pos
.992f	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; get a float or int
.9932	20 76 95	jsr $9576			jsr 	CheckRightBracket
.9935	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9938	29 7f		and #$7f			and 	#$7F
.993a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.993d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8d05					AllocUnary:
.8d05	fa		plx				plx 								; restore stack pos
.8d06	20 5c 8f	jsr $8f5c			jsr 	Evaluate16BitInteger		; get bytes required.
.8d09	20 76 95	jsr $9576			jsr 	CheckRightBracket
.8d0c	da		phx				phx 								; save X/Y
.8d0d	5a		phy				phy
.8d0e	8a		txa				txa 								; copy X into Y
.8d0f	a8		tay				tay
.8d10	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8d13	aa		tax				tax
.8d14	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8d17	20 24 8d	jsr $8d24			jsr 	AllocateXABytes 			; allocate memory
.8d1a	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8d1d	8a		txa				txa
.8d1e	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8d21	7a		ply				ply
.8d22	fa		plx				plx
.8d23	60		rts				rts
.8d24					AllocateXABytes:
.8d24	5a		phy				phy
.8d25	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8d28	5a		phy				phy
.8d29	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8d2c	5a		phy				phy
.8d2d	18		clc				clc
.8d2e	6d 0c 07	adc $070c			adc 	lowMemPtr
.8d31	8d 0c 07	sta $070c			sta 	lowMemPtr
.8d34	8a		txa				txa
.8d35	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8d38	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8d3b	fa		plx				plx
.8d3c	68		pla				pla
.8d3d	7a		ply				ply
.8d3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.993e					AscUnary:
.993e	fa		plx				plx 								; restore stack pos
.993f	20 2f 8f	jsr $8f2f			jsr 	EvaluateString 				; get a string
.9942	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9944	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.9947	20 76 95	jsr $9576			jsr 	CheckRightBracket
.994a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.994b					FracUnary:
.994b	fa		plx				plx 								; restore stack pos
.994c	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; get a float or int
.994f	20 76 95	jsr $9576			jsr 	CheckRightBracket
.9952	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9955	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9957	f0 04		beq $995d			beq 	_IUZero
.9959	20 1b 98	jsr $981b			jsr 	FloatFractionalPart
.995c	60		rts				rts
.995d					_IUZero:
.995d	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.9960	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9961					IntUnary:
.9961	fa		plx				plx 								; restore stack pos
.9962	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; get a float or int
.9965	20 76 95	jsr $9576			jsr 	CheckRightBracket
.9968	bd 00 06	lda $0600,x			lda 	NSStatus,x
.996b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.996d	f0 03		beq $9972			beq 	_IUExit
.996f	20 7e 98	jsr $987e			jsr 	FloatIntegerPart
.9972					_IUExit:
.9972	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9973					LenUnary:
.9973	fa		plx				plx 								; restore stack pos
.9974	20 2f 8f	jsr $8f2f			jsr 	EvaluateString 				; get a string
.9977	5a		phy				phy
.9978	a0 00		ldy #$00			ldy 	#0 							; find length
.997a					_LenFind:
.997a	b1 36		lda ($36),y			lda 	(zTemp0),y
.997c	f0 06		beq $9984			beq 	_LenExit
.997e	c8		iny				iny
.997f	d0 f9		bne $997a			bne 	_LenFind
.9981	4c 4b 9a	jmp $9a4b			jmp 	RangeError 					; string > 255
.9984					_LenExit:
.9984	98		tya				tya
.9985	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.9988	7a		ply				ply
.9989	20 76 95	jsr $9576			jsr 	CheckRightBracket
.998c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8d3f					Unary_Not:
.8d3f	fa		plx				plx
.8d40	20 47 8f	jsr $8f47			jsr 	EvaluateInteger 			; get integer
.8d43	20 76 95	jsr $9576			jsr 	CheckRightBracket
.8d46	20 00 90	jsr $9000			jsr 	NSMIsZero 					; zero mantissa ?
.8d49	f0 04		beq $8d4f			beq 	_NotZero
.8d4b	20 d0 8f	jsr $8fd0			jsr 	NSMSetZero
.8d4e	60		rts				rts
.8d4f					_NotZero:
.8d4f	4c 8f 85	jmp $858f			jmp 	ReturnTrue
.8d52					_UNBad:
.8d52	4c 55 9a	jmp $9a55			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8d55					Unary_Rnd:
.8d55	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; number to use.
.8d58	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; closing bracket
.8d5b	20 84 8d	jsr $8d84			jsr 	Random32Bit 				; generate a number.
.8d5e	ad 08 07	lda $0708			lda 	RandomSeed+0
.8d61	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d64	ad 09 07	lda $0709			lda 	RandomSeed+1
.8d67	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d6a	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8d6d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d70	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8d73	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8d75	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d78	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8d7a	8d 28 06	sta $0628			sta 	NSExponent
.8d7d	a9 08		lda #$08			lda 	#NSTFloat
.8d7f	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8d82	db						.byte 	$DB 						; causes a break in the emulator
.8d83	60		rts				rts
.8d84					Random32Bit:
.8d84	5a		phy				phy
.8d85	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8d87	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8d8a	d0 03		bne $8d8f			bne 	_Random1
.8d8c	a8		tay				tay 								; if so do it 256 times
.8d8d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8d8f					_Random1:
.8d8f	0a		asl a				asl 	a 							; LSFR RNG
.8d90	2e 09 07	rol $0709			rol 	RandomSeed+1
.8d93	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8d96	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8d99	90 02		bcc $8d9d			bcc 	_Random2
.8d9b	49 c5		eor #$c5			eor 	#$C5
.8d9d					_Random2:
.8d9d	88		dey				dey
.8d9e	d0 ef		bne $8d8f			bne 	_Random1
.8da0	7a		ply				ply
.8da1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.998d					SgnUnary:
.998d	fa		plx				plx 								; restore stack pos
.998e	20 24 8f	jsr $8f24			jsr 	EvaluateNumber 				; get a float or int
.9991	20 76 95	jsr $9576			jsr 	CheckRightBracket
.9994	20 00 90	jsr $9000			jsr 	NSMIsZero 					; if zero
.9997	f0 10		beq $99a9			beq 	_SGZero  					; return Int Zero
.9999	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.999c	48		pha				pha
.999d	a9 01		lda #$01			lda 	#1 							; set to 1
.999f	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.99a2	68		pla				pla
.99a3	29 80		and #$80			and		#$80 						; copy the sign byte out
.99a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99a8	60		rts				rts
.99a9	20 d0 8f	jsr $8fd0	_SGZero:jsr 	NSMSetZero
.99ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.99ad					ValUnary:
.99ad	fa		plx				plx 								; restore stack pos
.99ae	20 c3 99	jsr $99c3			jsr 	ValMainCode 				; do the main val() code
.99b1	b0 01		bcs $99b4			bcs 	_VUError 					; couldn't convert
.99b3	60		rts				rts
.99b4					_VUError:
.99b4	4c 50 9a	jmp $9a50			jmp 	TypeError
.99b7					IsValUnary:
.99b7	fa		plx				plx 								; restore stack pos
.99b8	20 c3 99	jsr $99c3			jsr 	ValMainCode 				; do the main val() code
.99bb	b0 03		bcs $99c0			bcs 	_VUBad
.99bd	4c 8f 85	jmp $858f			jmp 	ReturnTrue
.99c0					_VUBad:
.99c0	4c 9b 85	jmp $859b			jmp 	ReturnFalse
.99c3					ValMainCode:
.99c3	20 2f 8f	jsr $8f2f			jsr 	EvaluateString 				; get a string
.99c6	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; check right bracket present
.99c9	5a		phy				phy
.99ca	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.99cc	f0 17		beq $99e5			beq 	_VMCFail2
.99ce	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.99d0	48		pha				pha 								; save first character
.99d1	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.99d3	d0 01		bne $99d6			bne 	_VMCStart
.99d5	c8		iny				iny 								; skip over -
.99d6					_VMCStart:
.99d6	38		sec				sec 								; initialise first time round.
.99d7					_VMCNext:
.99d7	c8		iny				iny 								; pre-increment
.99d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.99da	f0 0c		beq $99e8			beq 	_VMCSuccess 				; successful.
.99dc	20 de 8a	jsr $8ade			jsr 	EncodeNumber 				; send it to the number-builder
.99df	90 03		bcc $99e4			bcc 	_VMCFail 					; if failed, give up.
.99e1	18		clc				clc 								; next time round, countinue
.99e2	80 f3		bra $99d7			bra 	_VMCNext
.99e4					_VMCFail:
.99e4	68		pla				pla
.99e5					_VMCFail2:
.99e5	7a		ply				ply
.99e6	38		sec				sec
.99e7	60		rts				rts
.99e8					_VMCSuccess:
.99e8	a9 00		lda #$00			lda 	#0 							; construct final
.99ea	20 de 8a	jsr $8ade			jsr 	EncodeNumber
.99ed	68		pla				pla
.99ee	c9 2d		cmp #$2d			cmp 	#"-"
.99f0	d0 03		bne $99f5			bne 	_VMCNotNegative
.99f2	20 7c 8f	jsr $8f7c			jsr		NSMNegate
.99f5					_VMCNotNegative:
.99f5	7a		ply				ply
.99f6	18		clc				clc
.99f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8da2					ChrUnary:
.8da2	fa		plx				plx 								; restore stack pos
.8da3	20 68 8f	jsr $8f68			jsr 	Evaluate8BitInteger			; get value
.8da6	48		pha				pha
.8da7	20 76 95	jsr $9576			jsr 	CheckRightBracket
.8daa	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8dac	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate
.8daf	68		pla				pla 								; write number to it
.8db0	20 4d 9c	jsr $9c4d			jsr 	StringTempWrite
.8db3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8db4					SpcUnary:
.8db4	fa		plx				plx 								; restore stack pos
.8db5	20 68 8f	jsr $8f68			jsr 	Evaluate8BitInteger			; get value
.8db8	5a		phy				phy
.8db9	48		pha				pha 								; save count
.8dba	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate
.8dbd	7a		ply				ply 								; to do count in Y
.8dbe					_SpcLoop:
.8dbe	c0 00		cpy #$00			cpy 	#0
.8dc0	f0 08		beq $8dca			beq 	_SpcExit
.8dc2	a9 20		lda #$20			lda 	#32
.8dc4	20 4d 9c	jsr $9c4d			jsr 	StringTempWrite
.8dc7	88		dey				dey
.8dc8	80 f4		bra $8dbe			bra 	_SPCLoop
.8dca					_SpcExit:
.8dca	7a		ply				ply
.8dcb	20 76 95	jsr $9576			jsr 	CheckRightBracket
.8dce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8dcf					Unary_Str:
.8dcf	fa		plx				plx
.8dd0	20 24 8f	jsr $8f24			jsr 	EvaluateNumber  			; get number
.8dd3	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; closing bracket
.8dd6	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8dd8	20 f1 8d	jsr $8df1			jsr 	ConvertNumberToString 		; do the conversion.
.8ddb	a9 21		lda #$21			lda		#33 						; create buffer
.8ddd	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate 			; allocate memory
.8de0	da		phx				phx
.8de1	a2 00		ldx #$00			ldx 	#0
.8de3					_USCopy:
.8de3	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8de6	20 4d 9c	jsr $9c4d			jsr 	StringTempWrite
.8de9	e8		inx				inx
.8dea	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ded	d0 f4		bne $8de3			bne 	_USCopy
.8def	fa		plx				plx
.8df0	60		rts				rts
.8df1					ConvertNumberToString:
.8df1	5a		phy				phy 								; save code position
.8df2	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8df5	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8df8	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8dfb	10 0a		bpl $8e07			bpl 	_CNTSNotNegative
.8dfd	29 7f		and #$7f			and 	#$7F 						; make +ve
.8dff	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e02	a9 2d		lda #$2d			lda 	#"-"
.8e04	20 6d 8e	jsr $8e6d			jsr 	WriteDecimalBuffer
.8e07					_CNTSNotNegative:
.8e07	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8e0a	f0 15		beq $8e21			beq 	_CNTSNotFloat
.8e0c	e8		inx				inx 								; round up
.8e0d	a9 01		lda #$01			lda 	#1
.8e0f	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.8e12	ca		dex				dex
.8e13	bd 28 06	lda $0628,x			lda		NSExponent,x
.8e16	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8e19	a9 08		lda #$08			lda 	#NSTFloat
.8e1b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e1e	20 3d 97	jsr $973d			jsr 	FloatAdd
.8e21					_CNTSNotFloat:
.8e21	20 4f 8e	jsr $8e4f			jsr 	MakePlusTwoString
.8e24	20 1b 98	jsr $981b			jsr 	FloatFractionalPart 		; get the fractional part
.8e27	20 df 98	jsr $98df			jsr 	NSNormalise					; normalise , exit if zero
.8e2a	f0 21		beq $8e4d			beq 	_CNTSExit
.8e2c	a9 2e		lda #$2e			lda 	#"."
.8e2e	20 6d 8e	jsr $8e6d			jsr 	WriteDecimalBuffer 			; write decimal place
.8e31					_CNTSDecimal:
.8e31	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8e34	30 17		bmi $8e4d			bmi 	_CNTSExit
.8e36	e8		inx				inx 								; x 10.0
.8e37	a9 0a		lda #$0a			lda 	#10
.8e39	20 d2 8f	jsr $8fd2			jsr 	NSMSetByte
.8e3c	a9 08		lda #$08			lda 	#NSTFloat
.8e3e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e41	ca		dex				dex
.8e42	20 a8 98	jsr $98a8			jsr 	FloatMultiply
.8e45	20 4f 8e	jsr $8e4f			jsr 	MakePlusTwoString
.8e48	20 1b 98	jsr $981b			jsr 	FloatFractionalPart 		; get the fractional part
.8e4b	80 e4		bra $8e31			bra 	_CNTSDecimal 				; keep going.
.8e4d					_CNTSExit:
.8e4d	7a		ply				ply
.8e4e	60		rts				rts
.8e4f					MakePlusTwoString:
.8e4f	da		phx				phx
.8e50	20 a7 8f	jsr $8fa7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8e53	e8		inx				inx 								; access it
.8e54	e8		inx				inx
.8e55	20 7e 98	jsr $987e			jsr 	FloatIntegerPart 			; make it an integer
.8e58	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8e5a	20 e7 96	jsr $96e7			jsr 	ConvertInt32
.8e5d	a2 00		ldx #$00			ldx	 	#0
.8e5f					_MPTSCopy:
.8e5f	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e62	20 6d 8e	jsr $8e6d			jsr 	WriteDecimalBuffer
.8e65	e8		inx				inx
.8e66	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e69	d0 f4		bne $8e5f			bne 	_MPTSCopy
.8e6b	fa		plx				plx
.8e6c	60		rts				rts
.8e6d					WriteDecimalBuffer:
.8e6d	da		phx				phx
.8e6e	ae 14 07	ldx $0714			ldx 	dbOffset
.8e71	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8e74	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8e77	ee 14 07	inc $0714			inc 	dbOffset
.8e7a	fa		plx				plx
.8e7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8e7c					Unary_Left:
.8e7c	fa		plx				plx
.8e7d	18		clc				clc 								; only one parameter
.8e7e	20 f3 8e	jsr $8ef3			jsr 	SubstringInitial 			; set up.
.8e81	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8e84	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e87	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8e8a	80 2c		bra $8eb8			bra 	SubstringMain
.8e8c					Unary_Right:
.8e8c	fa		plx				plx
.8e8d	18		clc				clc 								; only one parameter
.8e8e	20 f3 8e	jsr $8ef3			jsr 	SubstringInitial 			; set up.
.8e91	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8e94	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e97	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8e9a	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e9d	b0 02		bcs $8ea1			bcs 	_URNotUnderflow
.8e9f	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8ea1					_URNotUnderFlow:
.8ea1	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8ea4	80 12		bra $8eb8			bra 	SubStringMain
.8ea6					Unary_Mid:
.8ea6	fa		plx				plx
.8ea7	38		sec				sec 								; two parameters
.8ea8	20 f3 8e	jsr $8ef3			jsr 	SubstringInitial 			; set up.
.8eab	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8eae	f0 05		beq $8eb5			beq 	_UMError
.8eb0	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8eb3	80 03		bra $8eb8			bra 	SubStringMain
.8eb5					_UMError:
.8eb5	4c 55 9a	jmp $9a55			jmp 	ArgumentError
.8eb8					SubStringMain:
.8eb8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8ebb	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8ebe	b0 2d		bcs $8eed			bcs 	_SSMNull 					; if so, return an empty string.
.8ec0	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8ec3	f0 28		beq $8eed			beq 	_SSMNull 					; return empty string.
.8ec5	18		clc				clc 								; add the offset +1 to the address and
.8ec6	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8ec9	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ecc	85 36		sta $36				sta 	zTemp0
.8ece	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ed1	69 00		adc #$00			adc 	#0
.8ed3	85 37		sta $37				sta 	zTemp0+1
.8ed5					_SSMNoCarry:
.8ed5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8ed8	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate 			; allocate that many characters
.8edb	5a		phy				phy 								; save Y
.8edc	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8ede					_SSMCopy:
.8ede	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8ee0	f0 09		beq $8eeb			beq 	_SSMEString 				; no more to copy
.8ee2	20 4d 9c	jsr $9c4d			jsr 	StringTempWrite 			; and write it out.
.8ee5	c8		iny				iny
.8ee6	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8ee9	d0 f3		bne $8ede			bne 	_SSMCopy
.8eeb					_SSMEString:
.8eeb	7a		ply				ply
.8eec					_SSMExit:
.8eec	60		rts				rts
.8eed					_SSMNull:
.8eed	a9 00		lda #$00			lda 	#0
.8eef	20 0f 9c	jsr $9c0f			jsr 	StringTempAllocate
.8ef2	60		rts				rts
.8ef3					SubstringInitial:
.8ef3	da		phx				phx 								; save initial stack position
.8ef4	08		php				php 								; save carry on stack indicating 2 parameters
.8ef5	20 2f 8f	jsr $8f2f			jsr 	EvaluateString 				; get a string
.8ef8	5a		phy				phy 								; calculate length to exponent.
.8ef9	a0 ff		ldy #$ff			ldy 	#$FF
.8efb					_SIFindLength:
.8efb	c8		iny				iny
.8efc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8efe	d0 fb		bne $8efb			bne 	_SIFindLength
.8f00	98		tya				tya
.8f01	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f04	7a		ply				ply
.8f05	e8		inx				inx
.8f06	20 7e 95	jsr $957e			jsr 	CheckComma 					; comma next
.8f09	20 68 8f	jsr $8f68			jsr 	Evaluate8BitInteger 		; get next parameter
.8f0c	28		plp				plp 								; is it the last parameter ?
.8f0d	90 07		bcc $8f16			bcc 	_SSIExit 					; if so, exit.
.8f0f	e8		inx				inx
.8f10	20 7e 95	jsr $957e			jsr 	CheckComma 					; comma next
.8f13	20 68 8f	jsr $8f68			jsr 	Evaluate8BitInteger 		; get last parameter
.8f16					_SSIExit:
.8f16	fa		plx				plx
.8f17	20 76 95	jsr $9576			jsr 	CheckRightBracket 			; check closing bracket
.8f1a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8f1b					EvaluateValue:
.8f1b	48		pha				pha
.8f1c	20 2b 89	jsr $892b			jsr		EvaluateExpression 			; expression
.8f1f	20 40 8a	jsr $8a40			jsr 	Dereference					; derefernce it
.8f22	68		pla				pla
.8f23	60		rts				rts
.8f24					EvaluateNumber:
.8f24	20 1b 8f	jsr $8f1b			jsr 	EvaluateValue 				; get a value
.8f27	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f2a	29 10		and #$10			and 	#NSBIsString
.8f2c	d0 16		bne $8f44			bne 	HelperTypeError
.8f2e	60		rts				rts
.8f2f					EvaluateString:
.8f2f	20 1b 8f	jsr $8f1b			jsr 	EvaluateValue 				; get a value
.8f32	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f35	29 10		and #$10			and 	#NSBIsString
.8f37	f0 0b		beq $8f44			beq 	HelperTypeError
.8f39					CopyAddressToTemp0:
.8f39	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8f3c	85 36		sta $36				sta 	zTemp0
.8f3e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f41	85 37		sta $37				sta 	zTemp0+1
.8f43	60		rts				rts
.8f44					HelperTypeError:
.8f44	4c 50 9a	jmp $9a50			jmp 	TypeError
.8f47					EvaluateInteger:
.8f47	20 24 8f	jsr $8f24			jsr 	EvaluateNumber
.8f4a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8f4d	d0 0a		bne $8f59			bne 	HelperValueError 			; if not, it's a float.
.8f4f	60		rts				rts
.8f50					EvaluateUnsignedInteger:
.8f50	20 47 8f	jsr $8f47			jsr 	EvaluateInteger 			; check integer is +ve
.8f53	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f56	30 01		bmi $8f59			bmi 	HelperValueError
.8f58	60		rts				rts
.8f59					HelperValueError:
.8f59	4c 55 9a	jmp $9a55			jmp 	ArgumentError
.8f5c					Evaluate16BitInteger:
.8f5c	20 50 8f	jsr $8f50			jsr	 	EvaluateUnsignedInteger		; get integer
.8f5f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8f62	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f65	d0 f2		bne $8f59			bne 	HelperValueError
.8f67	60		rts				rts
.8f68					Evaluate8BitInteger:
.8f68	20 50 8f	jsr $8f50			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8f6b	d0 ec		bne $8f59			bne 	HelperValueError
.8f6d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8f70	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f73	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8f76	d0 e1		bne $8f59			bne 	HelperValueError
.8f78	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.99f8					Multiply8x8:
.99f8	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.99f9	85 36		sta $36			  	sta 	zTemp0
.99fb	86 37		stx $37				stx 	zTemp0+1
.99fd	a9 00		lda #$00			lda 	#0
.99ff	a2 08		ldx #$08			ldx 	#8
.9a01					_M88Loop:
.9a01	90 03		bcc $9a06			bcc 	_M88NoAdd
.9a03	18		clc				clc
.9a04	65 37		adc $37				adc 	zTemp0+1
.9a06					_M88NoAdd:
.9a06	6a		ror a				ror 	a
.9a07	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9a09	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9a0a	d0 f5		bne $9a01			bne 	_M88Loop
.9a0c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9a0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8f7c					NSMNegate:
.8f7c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f7f	49 80		eor #$80			eor 	#NSBIsNegative
.8f81	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f84	60		rts				rts
.8f85					NSMNegateMantissa:
.8f85	38		sec				sec
.8f86	a9 00		lda #$00			lda 	#0
.8f88	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8f8b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f8e	a9 00		lda #$00			lda 	#0
.8f90	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8f93	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f96	a9 00		lda #$00			lda 	#0
.8f98	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8f9b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f9e	a9 00		lda #$00			lda 	#0
.8fa0	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8fa3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fa6	60		rts				rts
.8fa7					NSMShiftUpTwo:
.8fa7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8faa	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8fad	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fb0	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8fb3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8fb6	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8fb9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8fbc	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8fbf	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8fc2	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8fc5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8fc8	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8fcb	60		rts				rts
.8fcc					NSMSetZeroMantissaOnly:
.8fcc	a9 00		lda #$00			lda 	#0
.8fce	80 08		bra $8fd8			bra 	NSMSetMantissa
.8fd0					NSMSetZero:
.8fd0	a9 00		lda #$00			lda 	#0
.8fd2					NSMSetByte:
.8fd2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8fd5	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8fd8					NSMSetMantissa:
.8fd8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8fdb	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8fde	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8fe1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8fe4	60		rts				rts
.8fe5					NSMShiftLeft:
.8fe5	18		clc				clc
.8fe6					NSMRotateLeft:
.8fe6	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8fe9	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8fec	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8fef	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8ff2	60		rts				rts
.8ff3					NSMShiftRight:
.8ff3	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8ff6	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8ff9	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8ffc	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8fff	60		rts				rts
.9000					NSMIsZero:
.9000	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9003	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9006	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9009	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.900c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9a0f					DecimalScalarTable:
>9a0f	66 66 66 66				.dword $66666666 ; 0.1
>9a13	de					.byte $de
>9a14	1f 85 eb 51				.dword $51eb851f ; 0.01
>9a18	db					.byte $db
>9a19	4c 37 89 41				.dword $4189374c ; 0.001
>9a1d	d8					.byte $d8
>9a1e	ac 8b db 68				.dword $68db8bac ; 0.0001
>9a22	d4					.byte $d4
>9a23	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9a27	d1					.byte $d1
>9a28	83 de 1b 43				.dword $431bde83 ; 1e-06
>9a2c	ce					.byte $ce
>9a2d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9a31	ca					.byte $ca
>9a32	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9a36	c7					.byte $c7
>9a37	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9a3b	c4					.byte $c4
>9a3c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9a40	c0					.byte $c0
>9a41	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9a45	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9a46					SyntaxError:
.9a46	a9 02		lda #$02		lda	#2
.9a48	4c 29 85	jmp $8529		jmp	ErrorHandler
.9a4b					RangeError:
.9a4b	a9 04		lda #$04		lda	#4
.9a4d	4c 29 85	jmp $8529		jmp	ErrorHandler
.9a50					TypeError:
.9a50	a9 05		lda #$05		lda	#5
.9a52	4c 29 85	jmp $8529		jmp	ErrorHandler
.9a55					ArgumentError:
.9a55	a9 07		lda #$07		lda	#7
.9a57	4c 29 85	jmp $8529		jmp	ErrorHandler
.9a5a					NotDoneError:
.9a5a	a9 0c		lda #$0c		lda	#12
.9a5c	4c 29 85	jmp $8529		jmp	ErrorHandler
.9a5f					ErrorText:
>9a5f	42 72 65 61 6b 00			.text	"Break",0
>9a65	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9a6d	72 72 6f 72 00
>9a72	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9a7a	20 62 79 20 7a 65 72 6f 00
>9a83	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9a8b	61 6e 67 65 00
>9a90	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9a98	6d 61 74 63 68 00
>9a9e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9aa6	65 6d 6f 72 79 00
>9aac	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ab4	61 72 67 75 6d 65 6e 74 00
>9abd	53 74 6f 70 00				.text	"Stop",0
>9ac2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9aca	6f 6f 20 6c 6f 6e 67 00
>9ad2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9ada	6e 20 66 61 69 6c 65 64 00
>9ae3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9aeb	61 74 61 00
>9aef	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9af7	65 6e 74 65 64 00
>9afd	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9b05	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9b11	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9b19	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9b26	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9b2e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9b3b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9b43	68 6f 75 74 20 57 68 69 6c 65 00
>9b4e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9b56	68 6f 75 74 20 46 6f 72 00
>9b5f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9b67	61 63 6b 20 66 75 6c 6c 00
>9b70	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9b78	75 63 74 75 72 65 00
>9b7f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9b87	77 69 74 68 6f 75 74 20 63 61 6c 6c 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.900d					StackOpen:
.900d	48		pha				pha 								; save frame byte
.900e	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9010	0a		asl a				asl 	a 							; claim twice this for storage
.9011	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9013	38		sec				sec 								; so basically subtracting from
.9014	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9016	85 34		sta $34				sta 	basicStack
.9018	b0 08		bcs $9022			bcs 	_SONoBorrow
.901a	c6 35		dec $35				dec 	basicStack+1
.901c	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.901e	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9020	90 04		bcc $9026			bcc 	_SOMemory
.9022					_SONoBorrow:
.9022	68		pla				pla 								; get marker back and write at TOS
.9023	92 34		sta ($34)			sta 	(basicStack)
.9025	60		rts				rts
.9026					_SOMemory:
.9026							ERR_STACK
.9026					StackClose:
.9026	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9028	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.902a	0a		asl a				asl 	a 							; claim twice this.
.902b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.902d	85 34		sta $34				sta 	basicStack
.902f	90 02		bcc $9033			bcc 	_SCExit
.9031	e6 35		inc $35				inc 	basicStack+1
.9033					_SCExit:
.9033	60		rts				rts
.9034					StackCheckFrame:
.9034	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9036	29 f0		and #$f0			and 	#$F0 						; check type bits
.9038	d0 01		bne $903b			bne 	_SCFError 					; different, we have structures mixed up
.903a	60		rts				rts
.903b					_SCFError:
.903b	8a		txa				txa 								; report error X
.903c	4c 29 85	jmp $8529			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.903f					STKSaveCodePosition:
.903f	5a		phy				phy
.9040	98		tya				tya 								; save Y
.9041	a0 05		ldy #$05			ldy 	#5
.9043	91 34		sta ($34),y			sta 	(basicStack),y
.9045	88		dey				dey 								; save Code Pointer
.9046					_STKSaveLoop:
.9046	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.9049	91 34		sta ($34),y			sta 	(basicStack),y
.904b	88		dey				dey
.904c	d0 f8		bne $9046			bne 	_STKSaveLoop
.904e	7a		ply				ply
.904f	60		rts				rts
.9050					STKLoadCodePosition:
.9050	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9052					_STKLoadLoop:
.9052	b1 34		lda ($34),y			lda 	(basicStack),y
.9054	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.9057	c8		iny				iny
.9058	c0 05		cpy #$05			cpy 	#5
.905a	d0 f6		bne $9052			bne 	_STKLoadLoop
.905c	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.905e	a8		tay				tay
.905f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9060					StackReset:
.9060	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9062	85 34		sta $34				sta 	0+basicStack
.9064	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9066	85 35		sta $35				sta 	1+basicStack
.9068	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.906a	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.906c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9b94					StringConcrete:
.9b94	5a		phy				phy 								; save position on stack
.9b95	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9b98	85 38		sta $38				sta 	zTemp1
.9b9a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9b9d	85 39		sta $39				sta 	zTemp1+1
.9b9f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9ba1					_SALength:
.9ba1	c8		iny				iny
.9ba2	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ba4	d0 fb		bne $9ba1			bne 	_SALength
.9ba6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9ba8	b0 3f		bcs $9be9			bcs 	_SALengthError
.9baa	98		tya				tya 				 				; length of the new string
.9bab	18		clc				clc
.9bac	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9bae	90 02		bcc $9bb2			bcc 	_SAHaveLength
.9bb0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9bb2					_SAHaveLength:
.9bb2	48		pha				pha 								; save length.
.9bb3	38		sec				sec
.9bb4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9bb6	6d 0e 07	adc $070e			adc 	StringMemory
.9bb9	8d 0e 07	sta $070e			sta 	StringMemory
.9bbc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9bbe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9bc1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9bc3	6d 0f 07	adc $070f			adc 	StringMemory+1
.9bc6	8d 0f 07	sta $070f			sta 	StringMemory+1
.9bc9	85 3b		sta $3b				sta 	zTemp2+1
.9bcb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9bce	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9bcf	38		sec				sec
.9bd0	e9 03		sbc #$03			sbc 	#3
.9bd2	92 3a		sta ($3a)			sta 	(zTemp2)
.9bd4	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9bd6	a0 01		ldy #$01			ldy 	#1
.9bd8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9bda					_SACopyNewString:
.9bda	a0 00		ldy #$00			ldy 	#0
.9bdc					_SACopyNSLoop:
.9bdc	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9bde	c8		iny				iny 								; write two on in string storage
.9bdf	c8		iny				iny
.9be0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9be2	88		dey				dey 								; this makes it one one.
.9be3	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9be5	d0 f5		bne $9bdc			bne 	_SACopyNSLoop
.9be7	7a		ply				ply
.9be8	60		rts				rts
.9be9					_SALengthError:
.9be9	a9 09		lda #$09		lda	#9
.9beb	4c 29 85	jmp $8529		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9bee					StringSystemInitialise:
.9bee	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9bf0	8d 0e 07	sta $070e			sta 	0+StringMemory
.9bf3	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9bf5	8d 0f 07	sta $070f			sta 	1+StringMemory
.9bf8	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9bfb	60		rts				rts
.9bfc					StringSpaceInitialise:
.9bfc	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9bfe	8d 10 07	sta $0710			sta 	StringInitialised
.9c01	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9c04	8d 11 07	sta $0711			sta 	StringTempPointer
.9c07	ad 0f 07	lda $070f			lda 	StringMemory+1
.9c0a	3a		dec a				dec 	a
.9c0b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c0e	60		rts				rts
.9c0f					StringTempAllocate:
.9c0f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9c11	b0 35		bcs $9c48			bcs 	_STALength
.9c13	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9c16	30 05		bmi $9c1d			bmi 	_STAAllocate
.9c18	48		pha				pha 								; save value to subtract.
.9c19	20 fc 9b	jsr $9bfc			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9c1c	68		pla				pla 								; restore it
.9c1d					_STAAllocate:
.9c1d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9c1f	18		clc				clc  								; deliberate allows one more
.9c20	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9c23	8d 11 07	sta $0711			sta 	StringTempPointer
.9c26	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9c29	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9c2b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9c2e	69 ff		adc #$ff			adc 	#$FF
.9c30	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c33	85 3d		sta $3d				sta 	zsTemp+1
.9c35	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c38	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9c3b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9c3e	a9 10		lda #$10			lda 	#NSTString
.9c40	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9c43	a9 00		lda #$00			lda 	#0 							; clear the target string
.9c45	92 3c		sta ($3c)			sta 	(zsTemp)
.9c47	60		rts				rts
.9c48					_STALength:
.9c48	a9 09		lda #$09		lda	#9
.9c4a	4c 29 85	jmp $8529		jmp	ErrorHandler
.9c4d					StringTempWrite:
.9c4d	48		pha				pha
.9c4e	92 3c		sta ($3c)			sta 	(zsTemp)
.9c50	e6 3c		inc $3c				inc 	zsTemp
.9c52	d0 02		bne $9c56			bne 	_STWNoCarry
.9c54	e6 3d		inc $3d				inc 	zsTemp+1
.9c56					_STWNoCarry:
.9c56	a9 00		lda #$00			lda 	#0
.9c58	92 3c		sta ($3c)			sta 	(zsTemp)
.9c5a	68		pla				pla
.9c5b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.906d					BackloadProgram:
.906d	a2 ff		ldx #$ff			ldx 	#$FF
.906f	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9072	20 9c 90	jsr $909c			jsr 	BLReadByte
.9075	30 1e		bmi $9095			bmi 	_BPExit
.9077					_BPCopy:
.9077	e8		inx				inx  								; copy byte in
.9078	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.907b	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.907e	20 9c 90	jsr $909c			jsr 	BLReadByte 					; read next byte
.9081	30 0a		bmi $908d			bmi 	_BPEndLine 					; -ve = EOL
.9083	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9085	d0 02		bne $9089			bne 	_BPNotTab
.9087	a9 20		lda #$20			lda 	#' '
.9089					_BPNotTab:
.9089	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.908b	b0 ea		bcs $9077			bcs 	_BPCopy
.908d					_BPEndLine:
.908d	20 66 92	jsr $9266			jsr 	TokeniseLine 				; tokenise the line.
.9090	20 f2 94	jsr $94f2			jsr 	MemoryAppend 				; append to current program
.9093	80 d8		bra $906d			bra 	BackloadProgram
.9095					_BPExit:
.9095	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9098	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.909b	60		rts				rts
.909c					BLReadByte:
.909c					_BLLoad:
.909c	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.909f	ee 9d 90	inc $909d			inc 	_BLLoad+1
.90a2	d0 03		bne $90a7			bne 	_BLNoCarry
.90a4	ee 9e 90	inc $909e			inc 	_BLLoad+2
.90a7					_BLNoCarry:
.90a7	c9 00		cmp #$00			cmp 	#0
.90a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.90aa					TokeniseSearchTable:
.90aa	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.90ac	85 36		sta $36				sta 	zTemp0
.90ae	a0 00		ldy #$00			ldy 	#0
.90b0	a9 80		lda #$80			lda 	#$80 						; token #
.90b2	85 38		sta $38				sta 	zTemp1
.90b4					_TSTLoop:
.90b4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.90b6	30 49		bmi $9101			bmi 	_TSTFail 					; -ve = end of table
.90b8	f0 2e		beq $90e8			beq 	_TSTNext 					; zero, check next it's a dummy
.90ba	c8		iny				iny 								; get the hash
.90bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.90bd	88		dey				dey
.90be	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.90c1	d0 25		bne $90e8			bne 	_TSTNext
.90c3	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.90c6	38		sec				sec
.90c7	ed 00 07	sbc $0700			sbc 	identStart
.90ca	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.90cc	d0 1a		bne $90e8			bne 	_TSTNext
.90ce	5a		phy				phy 								; save Y , we might fail
.90cf	c8		iny				iny 								; point to text
.90d0	c8		iny				iny
.90d1	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.90d4					_TSTCompareName:
.90d4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.90d7	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.90d9	d0 0c		bne $90e7			bne 	_TSTNextPullY 				; fail, pullY and do next
.90db	e8		inx				inx
.90dc	c8		iny				iny
.90dd	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.90e0	d0 f2		bne $90d4			bne 	_TSTCompareName
.90e2	7a		ply				ply 								; throw Y
.90e3	a5 38		lda $38				lda 	zTemp1 						; get token #
.90e5	38		sec				sec 								; return with CS = passed.
.90e6	60		rts				rts
.90e7					_TSTNextPullY:
.90e7	7a		ply				ply 								; restore current, fall through.
.90e8					_TSTNext:
.90e8	e6 38		inc $38				inc 	zTemp1 						; token counter
.90ea	98		tya				tya
.90eb	18		clc				clc
.90ec	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.90ee	1a		inc a				inc 	a 							; +1
.90ef	1a		inc a				inc 	a 							; +2
.90f0	a8		tay				tay
.90f1	10 c1		bpl $90b4			bpl 	_TSTLoop 					; if Y < $80 loop back
.90f3	98		tya				tya 								; add Y to zTemp0 and reset Y
.90f4	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.90f6	18		clc				clc  								; but have tables > 255 bytes
.90f7	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.90f9	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.90fb	90 b7		bcc $90b4			bcc 	_TSTLoop
.90fd	e6 37		inc $37				inc 	zTemp0+1
.90ff	80 b3		bra $90b4			bra 	_TSTLoop
.9101					_TSTFail:
.9101	18		clc				clc
.9102	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9103					KeywordSet0:
>9103	00 65					.text	0,$65,""               ; $80 !0:EOF
>9105	00 58					.text	0,$58,""               ; $81 !1:SH1
>9107	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9109	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>910f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9117	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>911d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9124	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>912b	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9132	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9138	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9140	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9148	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>914e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9155	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>915b	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9163	28
>9164	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>916a	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9170	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9176	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>917d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9183	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9189	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>918e	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9192	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9198	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>91a0	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>91a7	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>91ae	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>91b6	43
>91b7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>91bd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>91c3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>91ca	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>91d0	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>91d6	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>91db	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>91e1	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>91e6	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>91ee	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>91f4	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>91fb	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9201	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9206	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>920d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9213	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9218	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9220	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9224	ff					.text	$FF
.9225					KeywordSet1:
>9225	00 65					.text	0,$65,""               ; $80 !0:EOF
>9227	00 58					.text	0,$58,""               ; $81 !1:SH1
>9229	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>922b	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9233	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>923a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>923f	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9245	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>924a	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9252	45
>9253	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9258	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>925e	ff					.text	$FF
.925f					KeywordSet2:
>925f	00 65					.text	0,$65,""               ; $80 !0:EOF
>9261	00 58					.text	0,$58,""               ; $81 !1:SH1
>9263	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9265	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9266					TokeniseLine:
.9266	20 ee 93	jsr $93ee			jsr 	FixLineBufferCase 			; fix line case
.9269	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.926b	8d 15 07	sta $0715			sta 	tokenOffset
.926e	9c 16 07	stz $0716			stz 	tokenLineNumber
.9271	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9274	a2 ff		ldx #$ff			ldx 	#$FF
.9276					_TKFindFirst:
.9276	e8		inx				inx
.9277	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.927a	f0 79		beq $92f5			beq 	_TKExit
.927c	c9 20		cmp #$20			cmp 	#' '
.927e	90 f6		bcc $9276			bcc 	_TKFindFirst
.9280	c9 30		cmp #$30			cmp 	#'0'
.9282	90 07		bcc $928b			bcc 	_TKNoLineNumber
.9284	c9 3a		cmp #$3a			cmp 	#'9'+1
.9286	b0 03		bcs $928b			bcs 	_TKNoLineNumber
.9288	20 18 94	jsr $9418			jsr 	TokeniseExtractLineNumber
.928b					_TKNoLineNumber:
.928b					_TKTokeniseLoop:
.928b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.928e	f0 65		beq $92f5			beq 	_TKExit
.9290	e8		inx				inx
.9291	c9 20		cmp #$20			cmp 	#' '
.9293	f0 f6		beq $928b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9295	ca		dex				dex 								; undo last get, A contains character, X is position.
.9296	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9298	f0 61		beq $92fb			beq 	_TKTokeniseIdentifier
.929a	c9 41		cmp #$41			cmp 	#'A'
.929c	90 04		bcc $92a2			bcc 	_TKTokenisePunctuation
.929e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.92a0	90 59		bcc $92fb			bcc 	_TKTokeniseIdentifier
.92a2					_TKTokenisePunctuation:
.92a2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.92a4	f0 27		beq $92cd			beq 	_TKString
.92a6	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.92a8	f0 28		beq $92d2			beq 	_TKHexConstant
.92aa	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.92ac	f0 29		beq $92d7			beq 	_TKCheckDouble
.92ae	c9 3e		cmp #$3e			cmp 	#'>'
.92b0	f0 25		beq $92d7			beq 	_TKCheckDouble
.92b2					_TKStandardPunctuation:
.92b2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.92b5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.92b7	90 0e		bcc $92c7			bcc 	_TKNoShift
.92b9	48		pha				pha 								; save
.92ba	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.92bc	85 36		sta $36				sta 	zTemp0
.92be	68		pla				pla
.92bf	29 20		and #$20			and 	#32 						; bit 5
.92c1	4a		lsr a				lsr 	a 							; shift into bit 3
.92c2	4a		lsr a				lsr 	a
.92c3	05 36		ora $36				ora 	zTemp0
.92c5	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.92c7					_TKNoShift:
.92c7	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte 			; write the punctuation character
.92ca	e8		inx				inx 								; consume the character
.92cb	80 be		bra $928b			bra 	_TKTokeniseLoop 			; and loop round again.
.92cd					_TKString:
.92cd	20 7d 93	jsr $937d			jsr 	TokeniseString
.92d0	80 b9		bra $928b			bra 	_TKTokeniseLoop
.92d2					_TKHexConstant:
.92d2	20 b8 93	jsr $93b8			jsr 	TokeniseHexConstant
.92d5	80 b4		bra $928b			bra 	_TKTokeniseLoop
.92d7					_TKCheckDouble:
.92d7	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.92da	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.92dc	90 d4		bcc $92b2			bcc 	_TKStandardPunctuation
.92de	c9 3f		cmp #$3f			cmp 	#'>'+1
.92e0	b0 d0		bcs $92b2			bcs 	_TKStandardPunctuation
.92e2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.92e5	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.92e7	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.92e8	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.92eb	38		sec				sec
.92ec	e9 3c		sbc #$3c			sbc 	#'<'
.92ee	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.92f1	e8		inx				inx 								; consume both
.92f2	e8		inx				inx
.92f3	80 96		bra $928b			bra 	_TKTokeniseLoop
.92f5	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.92f7	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.92fa	60		rts				rts
.92fb					_TKTokeniseIdentifier:
.92fb	8e 00 07	stx $0700			stx 	identStart 					; save start
.92fe	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9301					_TKCheckLoop:
.9301	e8		inx				inx 								; look at next, we know first is identifier.
.9302	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9305	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9307	f0 f8		beq $9301			beq 	_TKCheckLoop
.9309	c9 30		cmp #$30			cmp	 	#"0"
.930b	90 0c		bcc $9319			bcc 	_TKEndIdentifier
.930d	c9 3a		cmp #$3a			cmp 	#"9"+1
.930f	90 f0		bcc $9301			bcc 	_TKCheckLoop
.9311	c9 41		cmp #$41			cmp	 	#"A"
.9313	90 04		bcc $9319			bcc 	_TKEndIdentifier
.9315	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9317	90 e8		bcc $9301			bcc 	_TKCheckLoop
.9319					_TKEndIdentifier:
.9319	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.931c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.931e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9320	f0 06		beq $9328			beq 	_TKHasTypeCharacter
.9322	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9324	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9326	d0 07		bne $932f			bne 	_TKNoTypeCharacter
.9328					_TKHasTypeCharacter:
.9328	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.932b	e8		inx				inx 								; read next
.932c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.932f					_TKNoTypeCharacter:
.932f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9331	d0 09		bne $933c			bne 	_TKNoArray
.9333	e8		inx				inx 								; skip the (
.9334	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9337	09 04		ora #$04			ora 	#$04
.9339	8d 04 07	sta $0704			sta 	identTypeByte
.933c					_TKNoArray:
.933c	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.933f	20 d9 93	jsr $93d9			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9342	a0 91		ldy #$91			ldy 	#(KeywordSet0) >> 8
.9344	a9 03		lda #$03			lda 	#(KeywordSet0) & $FF
.9346	20 aa 90	jsr $90aa			jsr 	TokeniseSearchTable
.9349	a2 00		ldx #$00			ldx 	#0
.934b	b0 1f		bcs $936c			bcs 	_TKFoundToken
.934d	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.934f	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.9351	20 aa 90	jsr $90aa			jsr 	TokeniseSearchTable
.9354	a2 81		ldx #$81			ldx 	#$81
.9356	b0 14		bcs $936c			bcs 	_TKFoundToken
.9358	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.935a	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.935c	20 aa 90	jsr $90aa			jsr 	TokeniseSearchTable
.935f	a2 82		ldx #$82			ldx 	#$82
.9361	b0 09		bcs $936c			bcs 	_TKFoundToken
.9363	20 69 94	jsr $9469			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9366	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9369	4c 8b 92	jmp $928b			jmp 	_TKTokeniseLoop 			; and go round again.
.936c					_TKFoundToken:
.936c	48		pha				pha 								; save token
.936d	8a		txa				txa 								; shift in X, is there one ?
.936e	f0 03		beq $9373			beq 	_TKNoTShift
.9370	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte 			; if so, write it out
.9373					_TKNoTShift:
.9373	68		pla				pla 								; restore and write token
.9374	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.9377	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.937a	4c 8b 92	jmp $928b			jmp 	_TKTokeniseLoop 			; and go round again.
.937d					TokeniseString:
.937d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.937f	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.9382	e8		inx				inx									; start of quoted string.
.9383	da		phx				phx 								; push start of string on top
.9384	ca		dex				dex
.9385					_TSFindEnd:
.9385	e8		inx				inx
.9386	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9389	f0 04		beq $938f			beq 	_TSEndOfString
.938b	c9 22		cmp #$22			cmp 	#'"'
.938d	d0 f6		bne $9385			bne 	_TSFindEnd
.938f					_TSEndOfString:
.938f	7a		ply				ply  								; so now Y is first character, X is character after end.
.9390	48		pha				pha 								; save terminating character
.9391	20 99 93	jsr $9399			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9394	68		pla				pla 								; terminating character
.9395	f0 01		beq $9398			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9397	e8		inx				inx
.9398					_TSNotQuote:
.9398	60		rts				rts
.9399					TOWriteBlockXY:
.9399	86 36		stx $36				stx 	zTemp0 						; write end character
.939b	98		tya				tya
.939c	49 ff		eor #$ff			eor 	#$FF
.939e	38		sec				sec
.939f	65 36		adc $36				adc 	zTemp0
.93a1	1a		inc a				inc 	a 							; one extra for NULL
.93a2	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.93a5					_TOBlockLoop:
.93a5	c4 36		cpy $36				cpy 	zTemp0
.93a7	f0 09		beq $93b2			beq 	_TOBlockExit
.93a9	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.93ac	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.93af	c8		iny				iny
.93b0	80 f3		bra $93a5			bra 	_TOBlockLoop
.93b2					_TOBlockExit:
.93b2	a9 00		lda #$00			lda 	#0
.93b4	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.93b7	60		rts				rts
.93b8					TokeniseHexConstant:
.93b8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.93ba	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.93bd	e8		inx				inx									; start of quoted string.
.93be	da		phx				phx 								; push start of constant on top
.93bf	ca		dex				dex
.93c0					_THFindLoop:
.93c0	e8		inx				inx
.93c1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93c4	c9 30		cmp #$30			cmp 	#"0"
.93c6	90 0c		bcc $93d4			bcc 	_THFoundEnd
.93c8	c9 3a		cmp #$3a			cmp 	#"9"+1
.93ca	90 f4		bcc $93c0			bcc 	_THFindLoop
.93cc	c9 41		cmp #$41			cmp 	#"A"
.93ce	90 04		bcc $93d4			bcc 	_THFoundEnd
.93d0	c9 47		cmp #$47			cmp 	#"F"+1
.93d2	90 ec		bcc $93c0			bcc 	_THFindLoop
.93d4					_THFoundEnd:
.93d4	7a		ply				ply 								; restore start
.93d5	20 99 93	jsr $9399			jsr 	TOWriteBlockXY 				; output the block
.93d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.93d9					TokeniseCalculateHash:
.93d9	da		phx				phx
.93da	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.93dd	a9 00		lda #$00			lda 	#0
.93df					_TCHLoop:
.93df	18		clc				clc
.93e0	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.93e3	e8		inx				inx
.93e4	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.93e7	d0 f6		bne $93df			bne 	_TCHLoop
.93e9	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.93ec	fa		plx				plx
.93ed	60		rts				rts
.93ee					FixLineBufferCase:
.93ee	a2 00		ldx #$00			ldx 	#0
.93f0					_FLBCLoop:
.93f0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.93f3	f0 22		beq $9417			beq 	_FLBCExit 					; end of string.
.93f5	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.93f7	f0 11		beq $940a			beq 	_FLBCInQuotes
.93f9	e8		inx				inx
.93fa	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.93fc	90 f2		bcc $93f0			bcc 	_FLBCLoop
.93fe	c9 7b		cmp #$7b			cmp 	#'z'+1
.9400	b0 ee		bcs $93f0			bcs 	_FLBCLoop
.9402	38		sec				sec 								; make U/C
.9403	e9 20		sbc #$20			sbc 	#32
.9405	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9408	80 e6		bra $93f0			bra 	_FLBCLoop
.940a					_FLBCInQuotes:
.940a	e8		inx				inx 								; advance
.940b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.940e	f0 07		beq $9417			beq 	_FLBCExit 					; exit on EOS
.9410	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9412	d0 f6		bne $940a			bne 	_FLBCInQuotes
.9414	e8		inx				inx 								; skip over it
.9415	80 d9		bra $93f0			bra 	_FLBCLoop
.9417					_FLBCExit:
.9417	60		rts				rts
.9418					TokeniseExtractLineNumber:
.9418	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.941b	48		pha				pha
.941c	ad 16 07	lda $0716			lda 	tokenLineNumber
.941f	48		pha				pha
.9420	20 56 94	jsr $9456			jsr 	_TELNTimes2 				; line # x 4
.9423	20 56 94	jsr $9456			jsr 	_TELNTimes2 				; line # x 2
.9426	18		clc				clc 								; add stacked value
.9427	68		pla				pla
.9428	6d 16 07	adc $0716			adc 	tokenLineNumber
.942b	8d 16 07	sta $0716			sta 	tokenLineNumber
.942e	68		pla				pla
.942f	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9432	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9435	20 56 94	jsr $9456			jsr 	_TELNTimes2 				; line # x 10
.9438	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.943b	e8		inx				inx
.943c	29 0f		and #$0f			and 	#15 						; add to line #
.943e	18		clc				clc
.943f	6d 16 07	adc $0716			adc 	tokenLineNumber
.9442	8d 16 07	sta $0716			sta 	tokenLineNumber
.9445	90 03		bcc $944a			bcc 	_TLENNoCarry
.9447	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.944a					_TLENNoCarry:
.944a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.944d	c9 30		cmp #$30			cmp 	#'0'
.944f	90 04		bcc $9455			bcc 	_TLENExit
.9451	c9 3a		cmp #$3a			cmp 	#'9'+1
.9453	90 c3		bcc $9418			bcc 	TokeniseExtractLineNumber
.9455					_TLENExit:
.9455	60		rts				rts
.9456					_TELNTimes2:
.9456	0e 16 07	asl $0716			asl 	tokenLineNumber
.9459	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.945c	60		rts				rts
.945d					TokeniseWriteByte:
.945d	da		phx				phx
.945e	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9461	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9464	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9467	fa		plx				plx
.9468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9469					CheckCreateVariableRecord:
.9469	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.946b	85 36		sta $36				sta 	0+zTemp0
.946d	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.946f	85 37		sta $37				sta 	1+zTemp0
.9471					_CCVSearch:
.9471	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9473	f0 2c		beq $94a1			beq 	_CCVFail
.9475	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9477	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9479	cd 03 07	cmp $0703			cmp 	identHash
.947c	d0 16		bne $9494			bne 	_CCVNext
.947e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9480	ae 00 07	ldx $0700			ldx 	identStart
.9483					_CCVCompare:
.9483	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9486	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9488	e8		inx				inx 								; advance pointers
.9489	c8		iny				iny
.948a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.948b	d0 07		bne $9494			bne 	_CCVNext  					; didn't match go to next.
.948d	90 f4		bcc $9483			bcc 	_CCVCompare 				; not finished yet.
.948f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9492	f0 41		beq $94d5			beq 	_CCVFound 					; yes, we were successful
.9494					_CCVNext:
.9494	18		clc				clc
.9495	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9497	65 36		adc $36				adc 	zTemp0
.9499	85 36		sta $36				sta 	zTemp0
.949b	90 d4		bcc $9471			bcc 	_CCVSearch
.949d	e6 37		inc $37				inc 	zTemp0+1
.949f	80 d0		bra $9471			bra 	_CCVSearch
.94a1					_CCVFail:
.94a1	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.94a3	ad 03 07	lda $0703			lda 	identHash
.94a6	91 36		sta ($36),y			sta 	(zTemp0),y
.94a8	c8		iny				iny 								; offset 2 is the type byte
.94a9	ad 04 07	lda $0704			lda 	identTypeByte
.94ac	91 36		sta ($36),y			sta 	(zTemp0),y
.94ae	c8		iny				iny
.94af					_CCVData:
.94af	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.94b1	91 36		sta ($36),y			sta 	(zTemp0),y
.94b3	c8		iny				iny
.94b4	c0 08		cpy #$08			cpy 	#8
.94b6	90 f7		bcc $94af			bcc 	_CCVData
.94b8	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.94bb					_CCVCopyName:
.94bb	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.94be	91 36		sta ($36),y			sta 	(zTemp0),y
.94c0	e8		inx				inx
.94c1	c8		iny				iny
.94c2	ec 02 07	cpx $0702			cpx 	identTypeEnd
.94c5	d0 f4		bne $94bb			bne 	_CCVCopyName
.94c7	98		tya				tya 								; patch offset
.94c8	92 36		sta ($36)			sta 	(zTemp0)
.94ca	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.94cc	91 36		sta ($36),y			sta 	(zTemp0),y
.94ce	88		dey				dey
.94cf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.94d1	09 80		ora #$80			ora 	#$80
.94d3	91 36		sta ($36),y			sta 	(zTemp0),y
.94d5					_CCVFound:
.94d5	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.94d7	38		sec				sec
.94d8	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.94da	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.94dc	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.94df	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.94e1	20 5d 94	jsr $945d			jsr 	TokeniseWriteByte
.94e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9c5c					MemoryPeek:
.9c5c	b2 36		lda ($36)			lda 	(zTemp0)
.9c5e	60		rts				rts
.9c5f					MemoryPoke:
.9c5f	92 36		sta ($36)			sta 	(zTemp0)
.9c61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9c62					PrintHex:
.9c62	48		pha				pha
.9c63	4a		lsr a				lsr 	a
.9c64	4a		lsr a				lsr 	a
.9c65	4a		lsr a				lsr 	a
.9c66	4a		lsr a				lsr 	a
.9c67	20 6b 9c	jsr $9c6b			jsr 	_PrintNibble
.9c6a	68		pla				pla
.9c6b					_PrintNibble:
.9c6b	29 0f		and #$0f			and 	#15
.9c6d	c9 0a		cmp #$0a			cmp 	#10
.9c6f	90 02		bcc $9c73			bcc 	_NoShift
.9c71	69 06		adc #$06			adc 	#6
.9c73					_NoShift:
.9c73	69 30		adc #$30			adc 	#48
.9c75	4c 78 9c	jmp $9c78			jmp 	EXTPrintCharacter
.9c78					EXTPrintCharacter:
.9c78	48		pha				pha
.9c79	da		phx				phx
.9c7a	5a		phy				phy
.9c7b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9c7e	7a		ply				ply
.9c7f	fa		plx				plx
.9c80	68		pla				pla
.9c81	60		rts				rts
.9c82					EXTInputSingleCharacter:
.9c82	da		phx				phx
.9c83	5a		phy				phy
.9c84					_EISCWait:
.9c84	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9c87	c9 00		cmp #$00			cmp 	#0
.9c89	f0 f9		beq $9c84			beq 	_EISCWait
.9c8b	7a		ply				ply
.9c8c	fa		plx				plx
.9c8d	60		rts				rts
.9c8e					EXTInputLine:
.9c8e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9c90					_ILLoop:
.9c90	da		phx				phx 								; read character in
.9c91	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9c94	fa		plx				plx
.9c95	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9c97	f0 12		beq $9cab			beq 	_ILBackspace
.9c99	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9c9b	f0 15		beq $9cb2			beq 	_ILExit
.9c9d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9c9f	90 ef		bcc $9c90			bcc 	_ILLoop
.9ca1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9ca3	f0 eb		beq $9c90			beq 	_ILLoop
.9ca5	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9ca8	e8		inx				inx
.9ca9	80 e5		bra $9c90			bra 	_ILLoop
.9cab					_ILBackspace:
.9cab	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9cad	f0 e1		beq $9c90			beq 	_ILLoop
.9caf	ca		dex				dex 								; back one.
.9cb0	80 de		bra $9c90			bra 	_ILLoop
.9cb2					_ILExit:
.9cb2	20 78 9c	jsr $9c78			jsr 	EXTPrintCharacter
.9cb5	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9cb8	60		rts				rts
.9cb9					EXTBreakCheck:
.9cb9	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.94e5					MemoryNew:
.94e5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94e7	85 30		sta $30				sta 	codePtr
.94e9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94eb	85 31		sta $31				sta 	codePtr+1
.94ed	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.94ef	92 30		sta ($30)			sta 	(codePtr)
.94f1	60		rts				rts
.94f2					MemoryAppend:
.94f2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94f4	85 30		sta $30				sta 	codePtr
.94f6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94f8	85 31		sta $31				sta 	codePtr+1
.94fa					_MAFindEnd:
.94fa	b2 30		lda ($30)			lda 	(codePtr)
.94fc	f0 0d		beq $950b			beq 	_MAFoundEnd
.94fe	18		clc				clc
.94ff	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9501	65 30		adc $30				adc 	codePtr
.9503	85 30		sta $30				sta 	codePtr
.9505	90 02		bcc $9509			bcc 	_CREExit
.9507	e6 31		inc $31				inc 	codePtr+1
.9509					_CREExit:
.9509	80 ef		bra $94fa			bra 	_MAFindEnd
.950b					_MAFoundEnd:
.950b	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.950e	c0 04		cpy #$04			cpy 	#4 							; blank line
.9510	f0 0e		beq $9520			beq 	_MANoLine
.9512	a9 00		lda #$00			lda 	#0 							; end of program
.9514	91 30		sta ($30),y			sta 	(codePtr),y
.9516					_MACopy:
.9516	88		dey				dey
.9517	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.951a	91 30		sta ($30),y			sta 	(codePtr),y
.951c	c0 00		cpy #$00			cpy 	#0
.951e	d0 f6		bne $9516			bne 	_MACopy
.9520					_MANoLine:
.9520	60		rts				rts
.9521					MemoryInline:
.9521	98		tya				tya 								; put address into stack,x
.9522	18		clc				clc
.9523	65 30		adc $30				adc 	codePtr
.9525	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9528	a5 31		lda $31				lda 	codePtr+1
.952a	69 00		adc #$00			adc 	#0
.952c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.952f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9532	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9535	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9536					MemoryTransferAX:
.9536	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9538	86 37		stx $37				stx 	zTemp0+1
.953a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.953c	85 30		sta $30				sta 	codePtr
.953e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9540	85 31		sta $31				sta 	codePtr+1
.9542					_MTAXLoop:
.9542	b2 30		lda ($30)			lda 	(codePtr)
.9544	f0 1d		beq $9563			beq 	_MTAXError 					; not found.
.9546	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9548	b1 30		lda ($30),y			lda 	(codePtr),y
.954a	c5 36		cmp $36				cmp 	zTemp0
.954c	d0 07		bne $9555			bne 	_MTAXNext
.954e	c8		iny				iny 								; check MSB
.954f	b1 30		lda ($30),y			lda 	(codePtr),y
.9551	c5 37		cmp $37				cmp 	zTemp0+1
.9553	f0 0d		beq $9562			beq 	_MTAXExit 					; success !
.9555					_MTAXNext:
.9555	18		clc				clc
.9556	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9558	65 30		adc $30				adc 	codePtr
.955a	85 30		sta $30				sta 	codePtr
.955c	90 02		bcc $9560			bcc 	_CREExit
.955e	e6 31		inc $31				inc 	codePtr+1
.9560					_CREExit:
.9560	80 e0		bra $9542			bra 	_MTAXLoop
.9562					_MTAXExit:
.9562	60		rts				rts
.9563					_MTAXError:
.9563	a9 0d		lda #$0d		lda	#13
.9565	4c 29 85	jmp $8529		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
