
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 15:04:14 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 22 83	jsr $8322			jsr 	NewCommand 					; erase current program
.8006	20 6f 90	jsr $906f			jsr 	BackloadProgram
.8009	4c e3 83	jmp $83e3			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	ce 86					.word	ShiftLeft                        ; $00 <<
>8016	c8 85					.word	BinaryCompareLessEqual           ; $01 <=
>8018	be 85					.word	BinaryCompareNotEqual            ; $02 <>
>801a	48 9a					.word	SyntaxError                      ; $03 !!3
>801c	48 9a					.word	SyntaxError                      ; $04 ><
>801e	d2 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	d1 86					.word	ShiftRight                       ; $06 >>
>8022	48 9a					.word	SyntaxError                      ; $07 !!7
>8024	48 9a					.word	SyntaxError                      ; $08 !!8
>8026	48 9a					.word	SyntaxError                      ; $09 !!9
>8028	48 9a					.word	SyntaxError                      ; $0a !!10
>802a	48 9a					.word	SyntaxError                      ; $0b !!11
>802c	48 9a					.word	SyntaxError                      ; $0c !!12
>802e	48 9a					.word	SyntaxError                      ; $0d !!13
>8030	48 9a					.word	SyntaxError                      ; $0e !!14
>8032	48 9a					.word	SyntaxError                      ; $0f !!15
>8034	48 9a					.word	SyntaxError                      ; $10 @
>8036	48 9a					.word	SyntaxError                      ; $11 !!17
>8038	48 9a					.word	SyntaxError                      ; $12 !!18
>803a	48 9a					.word	SyntaxError                      ; $13 [
>803c	91 95					.word	IntegerDivide                    ; $14 \
>803e	48 9a					.word	SyntaxError                      ; $15 ]
>8040	57 88					.word	EorInteger                       ; $16 ^
>8042	48 9a					.word	SyntaxError                      ; $17 _
>8044	48 9a					.word	SyntaxError                      ; $18 `
>8046	48 9a					.word	SyntaxError                      ; $19 !!25
>8048	48 9a					.word	SyntaxError                      ; $1a !!26
>804a	48 9a					.word	SyntaxError                      ; $1b {
>804c	11 88					.word	OraInteger                       ; $1c |
>804e	48 9a					.word	SyntaxError                      ; $1d }
>8050	48 9a					.word	SyntaxError                      ; $1e ~
>8052	48 9a					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	48 9a					.word	SyntaxError                      ; $20
>8056	9d 88					.word	WordIndirect                     ; $21 !
>8058	48 9a					.word	SyntaxError                      ; $22 "
>805a	48 9a					.word	SyntaxError                      ; $23 #
>805c	48 9a					.word	SyntaxError                      ; $24 $
>805e	de 95					.word	IntegerModulus                   ; $25 %
>8060	cb 87					.word	AndInteger                       ; $26 &
>8062	48 9a					.word	SyntaxError                      ; $27 '
>8064	48 9a					.word	SyntaxError                      ; $28 (
>8066	48 9a					.word	SyntaxError                      ; $29 )
>8068	53 96					.word	MulInteger                       ; $2a *
>806a	65 87					.word	AddInteger                       ; $2b +
>806c	48 9a					.word	SyntaxError                      ; $2c ,
>806e	a0 87					.word	SubInteger                       ; $2d -
>8070	48 9a					.word	SyntaxError                      ; $2e .
>8072	ea 97					.word	FDivideCommand                   ; $2f /
>8074	48 9a					.word	SyntaxError                      ; $30 0
>8076	48 9a					.word	SyntaxError                      ; $31 1
>8078	48 9a					.word	SyntaxError                      ; $32 2
>807a	48 9a					.word	SyntaxError                      ; $33 3
>807c	48 9a					.word	SyntaxError                      ; $34 4
>807e	48 9a					.word	SyntaxError                      ; $35 5
>8080	48 9a					.word	SyntaxError                      ; $36 6
>8082	48 9a					.word	SyntaxError                      ; $37 7
>8084	48 9a					.word	SyntaxError                      ; $38 8
>8086	48 9a					.word	SyntaxError                      ; $39 9
>8088	48 9a					.word	SyntaxError                      ; $3a :
>808a	48 9a					.word	SyntaxError                      ; $3b ;
>808c	aa 85					.word	BinaryCompareLess                ; $3c <
>808e	a0 85					.word	BinaryCompareEqual               ; $3d =
>8090	b4 85					.word	BinaryCompareGreater             ; $3e >
>8092	c4 88					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	38 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	45 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	48 9a					.word	SyntaxError                      ; $82 !2:SH2
>809a	30 99					.word	AbsUnary                         ; $83 ABS(
>809c	07 8d					.word	AllocUnary                       ; $84 ALLOC(
>809e	40 99					.word	AscUnary                         ; $85 ASC(
>80a0	a4 8d					.word	ChrUnary                         ; $86 CHR$(
>80a2	9c 85					.word	UnaryFalse                       ; $87 FALSE
>80a4	4d 99					.word	FracUnary                        ; $88 FRAC(
>80a6	63 99					.word	IntUnary                         ; $89 INT(
>80a8	b9 99					.word	IsValUnary                       ; $8a ISVAL(
>80aa	7e 8e					.word	Unary_Left                       ; $8b LEFT$(
>80ac	75 99					.word	LenUnary                         ; $8c LEN(
>80ae	a8 8e					.word	Unary_Mid                        ; $8d MID$(
>80b0	41 8d					.word	Unary_Not                        ; $8e NOT(
>80b2	8e 8e					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	57 8d					.word	Unary_Rnd                        ; $90 RND(
>80b6	8f 99					.word	SgnUnary                         ; $91 SGN(
>80b8	b6 8d					.word	SpcUnary                         ; $92 SPC(
>80ba	d1 8d					.word	Unary_Str                        ; $93 STR$(
>80bc	90 85					.word	UnaryTrue                        ; $94 TRUE
>80be	af 99					.word	ValUnary                         ; $95 VAL(
>80c0	7b 81					.word	ForCommand                       ; $96 FOR
>80c2	bf 82					.word	IfCommand                        ; $97 IF
>80c4	4d 84					.word	Unused1                          ; $98 PROC
>80c6	c1 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	fc 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	e8 82					.word	EndIf                            ; $9b ENDIF
>80cc	6a 95					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	35 82					.word	NextCommand                      ; $9d NEXT
>80d0	48 9a					.word	SyntaxError                      ; $9e THEN
>80d2	ca 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	1d 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	48 9a					.word	SyntaxError                      ; $a2 CLS
>80da	48 9a					.word	SyntaxError                      ; $a3 DATA
>80dc	75 81					.word	DimCommand                       ; $a4 DIM
>80de	4d 84					.word	Unused3                          ; $a5 DOWNTO
>80e0	e1 82					.word	ElseCode                         ; $a6 ELSE
>80e2	8e 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	ac 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	e9 82					.word	LetCommand                       ; $a9 LET
>80e8	2c 83					.word	Command_Print                    ; $aa PRINT
>80ea	48 9a					.word	SyntaxError                      ; $ab READ
>80ec	b4 83					.word	RemCommand                       ; $ac REM
>80ee	9e 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	4d 84					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	48 9a					.word	SyntaxError                      ; $80 !0:EOF
>80f4	48 9a					.word	SyntaxError                      ; $81 !1:SH1
>80f6	48 9a					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	78 81					.word	EndCommand                       ; $85 END
>80fe	48 9a					.word	SyntaxError                      ; $86 LIST
>8100	22 83					.word	NewCommand                       ; $87 NEW
>8102	48 9a					.word	SyntaxError                      ; $88 RESTORE
>8104	e3 83					.word	CommandRUN                       ; $89 RUN
>8106	48 9a					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	48 9a					.word	SyntaxError                      ; $80 !0:EOF
>810a	48 9a					.word	SyntaxError                      ; $81 !1:SH1
>810c	48 9a					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 49 8f	jsr $8f49			jsr 	EvaluateInteger 			; the assert test
.8113	20 02 90	jsr $9002			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 2b 85	jmp $852b		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 5e 8f	jsr $8f5e			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 62 90	jsr $9062			jsr 	StackReset
.816e	20 f0 9b	jsr $9bf0			jsr 	StringSystemInitialise
.8171	20 50 84	jsr $8450			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8175					DimCommand:
>8175	db						.byte 	$DB 						; causes a break in the emulator
.8176	b1 30		lda ($30),y			lda 	(codePtr),y

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8178					EndCommand:
.8178	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.817b					ForCommand:
.817b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.817d	20 0f 90	jsr $900f			jsr 	StackOpen
.8180	a2 00		ldx #$00			ldx 	#0
.8182	20 fe 8b	jsr $8bfe			jsr 	EvaluateTerm
.8185	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8188	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.818a	d0 49		bne $81d5			bne		_FCError
.818c	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.818e	20 88 95	jsr $9588			jsr 	CheckNextA
.8191	e8		inx				inx
.8192	20 49 8f	jsr $8f49			jsr 	EvaluateInteger 			; <from> in +1
.8195	b1 30		lda ($30),y			lda 	(codePtr),y
.8197	c8		iny				iny 								; consume it
.8198	48		pha				pha 								; save on stack for later
.8199	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.819b	f0 04		beq $81a1			beq 	_FCNoSyntax
.819d	c9 ae		cmp #$ae			cmp 	#KWD_TO
.819f	d0 37		bne $81d8			bne 	_FCSyntaxError
.81a1					_FCNoSyntax:
.81a1	e8		inx				inx
.81a2	20 49 8f	jsr $8f49			jsr 	EvaluateInteger
.81a5	20 41 90	jsr $9041			jsr 	STKSaveCodePosition 		; save loop back position
.81a8	68		pla				pla 								; restore DOWNTO or TO
.81a9	5a		phy				phy 								; save Y on the stack
.81aa	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.81ac	f0 02		beq $81b0			beq 	_FCNotDownTo
.81ae	a9 02		lda #$02			lda 	#2
.81b0					_FCNotDownTo:
.81b0	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.81b1	a0 10		ldy #$10			ldy 	#16
.81b3	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81b5	a0 06		ldy #$06			ldy 	#6
.81b7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ba	91 34		sta ($34),y			sta 	(basicStack),y
.81bc	ad 10 06	lda $0610			lda 	NSMantissa1
.81bf	c8		iny				iny
.81c0	91 34		sta ($34),y			sta 	(basicStack),y
.81c2	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81c4	a2 01		ldx #$01			ldx 	#1
.81c6	20 db 81	jsr $81db			jsr 	FCIntegerToStack
.81c9	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81cb	a2 02		ldx #$02			ldx 	#2
.81cd	20 db 81	jsr $81db			jsr 	FCIntegerToStack
.81d0	20 fb 81	jsr $81fb			jsr 	CopyIndexToReference
.81d3	7a		ply				ply 								; restore position
.81d4	60		rts				rts
.81d5					_FCError:
.81d5	4c 52 9a	jmp $9a52			jmp 	TypeError
.81d8					_FCSyntaxError:
.81d8	4c 48 9a	jmp $9a48			jmp 	SyntaxError
.81db					FCIntegerToStack:
.81db	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81de	10 03		bpl $81e3			bpl	 	_FCNotNegative
.81e0	20 87 8f	jsr $8f87			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81e3					_FCNotNegative:
.81e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81e6	91 34		sta ($34),y			sta 	(basicStack),y
.81e8	c8		iny				iny
.81e9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81ec	91 34		sta ($34),y			sta 	(basicStack),y
.81ee	c8		iny				iny
.81ef	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81f2	91 34		sta ($34),y			sta 	(basicStack),y
.81f4	c8		iny				iny
.81f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81f8	91 34		sta ($34),y			sta 	(basicStack),y
.81fa	60		rts				rts
.81fb					CopyIndexToReference:
.81fb	5a		phy				phy
.81fc	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81fe	38		sec				sec 								; (because we copy from offset 8)
.81ff	b1 34		lda ($34),y			lda 	(basicStack),y
.8201	e9 08		sbc #$08			sbc 	#8
.8203	85 36		sta $36				sta 	zTemp0
.8205	c8		iny				iny
.8206	b1 34		lda ($34),y			lda 	(basicStack),y
.8208	e9 00		sbc #$00			sbc 	#0
.820a	85 37		sta $37				sta 	zTemp0+1
.820c	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.820e	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8210	b1 34		lda ($34),y			lda 	(basicStack),y
.8212	0a		asl a				asl 	a 							; into carry
.8213	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8215	90 14		bcc $822b			bcc 	_CITRNormal
.8217	38		sec				sec
.8218					_CITRNegative:
.8218	a9 00		lda #$00			lda 	#0
.821a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.821c	91 36		sta ($36),y			sta 	(zTemp0),y
.821e	c8		iny				iny
.821f	ca		dex				dex
.8220	d0 f6		bne $8218			bne 	_CITRNegative
.8222	88		dey				dey 								; look at MSB of mantissa
.8223	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8225	09 80		ora #$80			ora 	#$80
.8227	91 36		sta ($36),y			sta 	(zTemp0),y
.8229	7a		ply				ply
.822a	60		rts				rts
.822b					_CITRNormal:
.822b	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.822d	91 36		sta ($36),y			sta 	(zTemp0),y
.822f	c8		iny				iny
.8230	ca		dex				dex
.8231	d0 f8		bne $822b			bne 	_CITRNormal
.8233	7a		ply				ply 								; and exit.
.8234	60		rts				rts
.8235					NextCommand:
.8235	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8237	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8239	20 36 90	jsr $9036			jsr 	StackCheckFrame
.823c	5a		phy				phy
.823d	a0 10		ldy #$10			ldy 	#16 						; get the step count
.823f	b1 34		lda ($34),y			lda 	(basicStack),y
.8241	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8243	30 02		bmi $8247			bmi 	_NCStepNeg
.8245	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8247					_NCStepNeg:
.8247	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8249	a2 04		ldx #$04			ldx 	#4 							; count to bump
.824b	18		clc				clc
.824c					_NCBump:
.824c	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.824e	91 34		sta ($34),y			sta 	(basicStack),y
.8250	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8252	c8		iny				iny 								; next byte
.8253	ca		dex				dex 								; do four times
.8254	d0 f6		bne $824c			bne 	_NCBump
.8256	20 fb 81	jsr $81fb			jsr		CopyIndexToReference		; copy it to the reference variable.
.8259	a0 10		ldy #$10			ldy 	#16 						; get step count again
.825b	b1 34		lda ($34),y			lda 	(basicStack),y
.825d	0a		asl a				asl 	a 							; sign bit to carry
.825e	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8260	85 38		sta $38				sta 	zTemp1
.8262	90 02		bcc $8266			bcc 	_NCCompRev 					; use if step is +ve
.8264	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8266					_NCCompRev:
.8266	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8268	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.826a	85 39		sta $39				sta 	zTemp1+1
.826c	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.826e	38		sec				sec
.826f					_NCCompare:
.826f	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8271	b1 34		lda ($34),y			lda 	(basicStack),y
.8273	a4 39		ldy $39				ldy 	zTemp1+1
.8275	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8277	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8279	e6 39		inc $39				inc 	zTemp1+1
.827b	ca		dex				dex 								; do it 4 times.
.827c	d0 f1		bne $826f			bne 	_NCCompare
.827e	50 02		bvc $8282			bvc 	_NCNoOverflow 				; convert to signed comparison
.8280	49 80		eor #$80			eor 	#$80
.8282					_NCNoOverflow:
.8282	7a		ply				ply 								; restore Y position
.8283	0a		asl a				asl 	a 							; is bit 7 set.
.8284	90 04		bcc $828a			bcc 	_NCLoopback 				; if no , >= so loop back
.8286	20 28 90	jsr $9028			jsr 	StackClose 					; exit the loop
.8289	60		rts				rts
.828a					_NCLoopBack:
.828a	20 52 90	jsr $9052			jsr 	STKLoadCodePosition 		; loop back
.828d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.828e					Command_GOSUB:
.828e	a2 00		ldx #$00			ldx 	#0
.8290	20 5e 8f	jsr $8f5e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8293	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8295	20 0f 90	jsr $900f			jsr 	StackOpen 					; create frame
.8298	20 41 90	jsr $9041			jsr 	STKSaveCodePosition 		; save current position
.829b	4c b1 82	jmp $82b1			jmp 	GotoStackX
.829e					Command_RETURN:
.829e	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.82a0	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.82a2	20 36 90	jsr $9036			jsr 	StackCheckFrame
.82a5	20 52 90	jsr $9052			jsr 	STKLoadCodePosition 		; restore code position
.82a8	20 28 90	jsr $9028			jsr 	StackClose
.82ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.82ac					GotoCommand:
.82ac	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.82ae	20 5e 8f	jsr $8f5e			jsr 	Evaluate16BitInteger
.82b1					GotoStackX:
.82b1	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82b4	48		pha				pha 								; it is slightly inefficient, just in cases.
.82b5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82b8	fa		plx				plx
.82b9	20 38 95	jsr $9538			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82bc	4c ee 83	jmp $83ee			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82bf					IfCommand:
.82bf	a2 00		ldx #$00			ldx 	#0 							; If what.
.82c1	20 26 8f	jsr $8f26			jsr 	EvaluateNumber
.82c4	b1 30		lda ($30),y			lda 	(codePtr),y
.82c6	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82c8	d0 0a		bne $82d4			bne 	_IFStructured
.82ca	c8		iny				iny 								; consume THEN
.82cb	20 02 90	jsr $9002			jsr 	NSMIsZero 					; is it zero
.82ce	f0 01		beq $82d1			beq 	_IfFail 					; if fail, go to next line
.82d0	60		rts				rts 								; if THEN just continue
.82d1					_IfFail:
.82d1	4c 38 84	jmp $8438			jmp 	EOLCommand
.82d4					_IfStructured:
.82d4	20 02 90	jsr $9002			jsr 	NSMIsZero 					; is it zero
.82d7	d0 07		bne $82e0			bne 	_IfExit 					; if not, then continue normally.
.82d9	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82db	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82dd	20 a2 84	jsr $84a2			jsr 	ScanForward 				; and run from there/
.82e0					_IfExit:
.82e0	60		rts				rts
.82e1					ElseCode:
.82e1	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82e3	aa		tax				tax 								; so just go to the structure exit
.82e4	20 a2 84	jsr $84a2			jsr 	ScanForward
.82e7	60		rts				rts
.82e8					EndIf:
.82e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82e9					LetCommand:
.82e9	a2 00		ldx #$00			ldx 	#0
.82eb	ad 15 89	lda $8915			lda 	PrecedenceLevel+"*"			; precedence > this
.82ee	20 2f 89	jsr $892f			jsr 	EvaluateExpressionAtPrecedence
.82f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.82f4	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.82f6	f0 0e		beq $8306			beq 	_LetGoProc 					; it's a procedure call.
.82f8	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82fa	20 88 95	jsr $9588			jsr 	CheckNextA
.82fd	e8		inx				inx 								; RHS
.82fe	20 1d 8f	jsr $8f1d			jsr 	EvaluateValue
.8301	ca		dex				dex
.8302	20 09 83	jsr $8309			jsr 	AssignVariable
.8305	60		rts				rts
.8306					_LetGoProc:
.8306	4c 83 83	jmp $8383			jmp 	CallProcedure
.8309					AssignVariable:
.8309	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.830c	48		pha				pha 								; save a copy
.830d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8310	29 10		and #$10			and 	#NSBIsString
.8312	d0 0b		bne $831f			bne 	_ASError
.8314	68		pla				pla 								; get back
.8315	29 10		and #$10			and 	#NSBIsString 				; check type
.8317	d0 03		bne $831c			bne 	_ASString
.8319	4c 6a 89	jmp $896a			jmp 	AssignNumber
.831c					_ASString:
.831c	4c d8 89	jmp $89d8			jmp 	AssignString
.831f					_ASError:
.831f	4c 52 9a	jmp $9a52			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8322					NewCommand:
.8322	20 e7 94	jsr $94e7			jsr 	MemoryNew
.8325	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8328	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.832b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.832c					Command_Print:
.832c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.832d					_CPLoop:
.832d	08		php				php 								; save last action flag
.832e	b1 30		lda ($30),y			lda 	(codePtr),y
.8330	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8332	f0 46		beq $837a			beq 	_CPExit
.8334	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8336	f0 42		beq $837a			beq 	_CPExit
.8338	68		pla				pla 								; throw last action flag
.8339	b1 30		lda ($30),y			lda 	(codePtr),y
.833b	c8		iny				iny
.833c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.833e	f0 37		beq $8377			beq 	_CPContinueWithSameLine
.8340	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8342	f0 2e		beq $8372			beq 	_CPTab
.8344	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8346	f0 26		beq $836e			beq 	_CPNewLine
.8348	88		dey				dey 								; undo the get.
.8349	a2 00		ldx #$00			ldx 	#0
.834b	20 1d 8f	jsr $8f1d			jsr 	EvaluateValue 				; get a value into slot 0
.834e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8351	29 10		and #$10			and 	#NSBIsString
.8353	f0 0b		beq $8360			beq 	_CPNumber
.8355	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8358	ad 08 06	lda $0608			lda 	NSMantissa0
.835b	20 7d 85	jsr $857d			jsr 	PrintStringXA
.835e	80 cc		bra $832c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8360					_CPNumber:
.8360	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8362	20 f3 8d	jsr $8df3			jsr 	ConvertNumberToString 		; convert to string
.8365	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8367	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8369	20 7d 85	jsr $857d			jsr 	PrintStringXA
.836c	80 be		bra $832c			bra 	Command_Print 				; loop round clearing carry so NL if end
.836e					_CPNewLine:
.836e	a9 0d		lda #$0d			lda 	#13
.8370	80 02		bra $8374			bra 	_CPPrintChar
.8372					_CPTab:
.8372	a9 09		lda #$09			lda 	#9 							; print TAB
.8374					_CPPrintChar:
.8374	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.8377					_CPContinueWithSameLine:
.8377	38		sec				sec 								; loop round with carry set, which
.8378	80 b3		bra $832d			bra 	_CPLoop 					; will inhibit final CR
.837a					_CPExit:
.837a	28		plp				plp 								; get last action flag
.837b	b0 05		bcs $8382			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.837d	a9 0d		lda #$0d			lda 	#13 						; print new line
.837f	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.8382					_CPExit2:
.8382	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8383					CallProcedure:
.8383	20 78 95	jsr $9578			jsr 	CheckRightBracket
.8386	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8388	20 0f 90	jsr $900f			jsr 	StackOpen
.838b	20 41 90	jsr $9041			jsr 	STKSaveCodePosition 		; save loop position
.838e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8391	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8393	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8396	85 37		sta $37				sta 	zTemp0+1
.8398	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.839a	b2 36		lda ($36)			lda 	(zTemp0)
.839c	85 30		sta $30				sta 	safePtr
.839e	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a0	85 31		sta $31				sta 	safePtr+1
.83a2	c8		iny				iny
.83a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a5	85 32		sta $32				sta 	safePtr+2
.83a7	c8		iny				iny
.83a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.83aa	85 33		sta $33				sta 	safePtr+3
.83ac	c8		iny				iny 								; get Y offset -> Y
.83ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.83af	a8		tay				tay
.83b0	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; check )
.83b3	60		rts				rts 								; and continue from here
.956a					Command_ENDPROC:
.956a	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.956c	a2 14		ldx #$14			ldx 	#ERRID_PROC
.956e	20 36 90	jsr $9036			jsr 	StackCheckFrame
.9571	20 52 90	jsr $9052			jsr 	STKLoadCodePosition 		; restore code position
.9574	20 28 90	jsr $9028			jsr 	StackClose
.9577	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.83b4					RemCommand:
.83b4	b1 30		lda ($30),y			lda 	(codePtr),y
.83b6	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.83b8	d0 06		bne $83c0			bne 	_RMExit
.83ba	c8		iny				iny
.83bb	98		tya				tya
.83bc	38		sec				sec
.83bd	71 30		adc ($30),y			adc 	(codePtr),y
.83bf	a8		tay				tay
.83c0					_RMExit:
.83c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.83c1					Command_REPEAT:
.83c1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.83c3	20 0f 90	jsr $900f			jsr 	StackOpen
.83c6	20 41 90	jsr $9041			jsr 	STKSaveCodePosition 		; save loop position
.83c9	60		rts				rts
.83ca					Command_UNTIL:
.83ca	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.83cc	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.83ce	20 36 90	jsr $9036			jsr 	StackCheckFrame
.83d1	a2 00		ldx #$00			ldx 	#0
.83d3	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; work out the number
.83d6	20 02 90	jsr $9002			jsr 	NSMIsZero 					; check if zero
.83d9	f0 04		beq $83df			beq 	_CULoopBack 				; if so keep looping
.83db	20 28 90	jsr $9028			jsr 	StackClose		 			; return
.83de	60		rts				rts
.83df					_CULoopBack:
.83df	20 52 90	jsr $9052			jsr 	STKLoadCodePosition 		; loop back
.83e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.83e3					CommandRUN:
.83e3	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.83e6	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83e8	85 30		sta $30				sta 	codePtr
.83ea	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83ec	85 31		sta $31				sta 	codePtr+1
.83ee					RUNNewLine:
.83ee	b2 30		lda ($30)			lda 	(codePtr)
.83f0	f0 43		beq $8435			beq 	CRNoProgram         		; no then END.
.83f2	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83f4	9a		txs				txs
.83f5					RUNCodePointerLine:
.83f5	a0 02		ldy #$02			ldy 	#2 							; start of program
.83f7					_CRIncMainLoop:
.83f7	c8		iny				iny
.83f8					_CRMainLoop:
.83f8	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83fb	b1 30		lda ($30),y			lda 	(codePtr),y
.83fd	10 10		bpl $840f			bpl 	_CRNotKeyword
.83ff	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8401	b0 04		bcs $8407			bcs 	_CRIsKeyword
.8403	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8405	b0 28		bcs $842f			bcs		_CRSyntaxError
.8407					_CRIsKeyword:
.8407	c8		iny				iny 								; consume command
.8408	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8409	aa		tax				tax 								; put in X for vector jump
.840a	20 32 84	jsr $8432			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.840d	80 e9		bra $83f8			bra 	_CRMainLoop 				; and loop round
.840f					_CRNotKeyword:
.840f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8411	f0 e4		beq $83f7			beq 	_CRIncMainLoop
.8413	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8415	90 05		bcc $841c			bcc 	_CRNotVariable
.8417					_CRGoLet:
.8417	20 e9 82	jsr $82e9			jsr 	LetCommand
.841a	80 dc		bra $83f8			bra 	_CRMainLoop
.841c					_CRNotVariable:
.841c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.841e	f0 f7		beq $8417			beq 	_CRGoLet
.8420	c9 21		cmp #$21			cmp 	#KWD_PLING
.8422	f0 f3		beq $8417			beq 	_CRGoLet
.8424	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8426	f0 01		beq $8429			beq 	_CRGoRem
>8428	db						.byte 	$DB 						; causes a break in the emulator
.8429					_CRGoRem:
.8429	c8		iny				iny
.842a	20 b4 83	jsr $83b4			jsr 	RemCommand
.842d	80 c9		bra $83f8			bra 	_CRMainLoop
.842f					_CRSyntaxError:
.842f	4c 48 9a	jmp $9a48			jmp 	SyntaxError
.8432					_CRCallVector0:
.8432	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8435					CRNoProgram:
.8435	4c 78 81	jmp $8178			jmp 	EndCommand
.8438					EOLCommand:
.8438	18		clc				clc
.8439	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.843b	65 30		adc $30				adc 	codePtr
.843d	85 30		sta $30				sta 	codePtr
.843f	90 02		bcc $8443			bcc 	_CREExit
.8441	e6 31		inc $31				inc 	codePtr+1
.8443					_CREExit:
.8443	80 a9		bra $83ee			bra 	RunNewLine
.8445					Shift1Command:
.8445	b1 30		lda ($30),y			lda 	(codePtr),y
.8447	c8		iny				iny
.8448	0a		asl a				asl 	a
.8449	aa		tax				tax
.844a	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.844d					Unused1:
.844d					Unused2:
.844d					Unused3:
.844d	4c 48 9a	jmp $9a48			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8450					ProcedureScan:
.8450	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8452	85 30		sta $30				sta 	codePtr
.8454	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8456	85 31		sta $31				sta 	codePtr+1
.8458					_PSLoop:
.8458	b2 30		lda ($30)			lda 	(codePtr)
.845a	f0 42		beq $849e			beq 	_PSExit
.845c	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.845e	b1 30		lda ($30),y			lda 	(codePtr),y
.8460	c9 98		cmp #$98			cmp 	#KWD_PROC
.8462	d0 2d		bne $8491			bne 	_PSNext
.8464	c8		iny				iny 								; get the address of the record to zTemp0 and
.8465	b1 30		lda ($30),y			lda 	(codePtr),y
.8467	29 c0		and #$c0			and 	#$C0
.8469	c9 40		cmp #$40			cmp 	#$40
.846b	d0 32		bne $849f			bne 	_PSSyntax
.846d	b1 30		lda ($30),y			lda 	(codePtr),y
.846f	18		clc				clc
.8470	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8472	85 37		sta $37				sta 	zTemp0+1
.8474	c8		iny				iny 								; LSB
.8475	b1 30		lda ($30),y			lda 	(codePtr),y
.8477	85 36		sta $36				sta 	zTemp0
.8479	c8		iny				iny 								; character after variable call.
.847a	98		tya				tya 								; save Y offset at +7
.847b	a0 07		ldy #$07			ldy 	#7
.847d	91 36		sta ($36),y			sta 	(zTemp0),y
.847f	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8481	a0 02		ldy #$02			ldy 	#2
.8483	91 36		sta ($36),y			sta 	(zTemp0),y
.8485	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8487					_PSCopy:
.8487	b5 30		lda $30,x			lda 	safePtr,x
.8489	c8		iny				iny
.848a	91 36		sta ($36),y			sta 	(zTemp0),y
.848c	e8		inx				inx
.848d	e0 04		cpx #$04			cpx 	#4
.848f	d0 f6		bne $8487			bne 	_PSCopy
.8491					_PSNext:
.8491	18		clc				clc
.8492	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8494	65 30		adc $30				adc 	codePtr
.8496	85 30		sta $30				sta 	codePtr
.8498	90 02		bcc $849c			bcc 	_CREExit
.849a	e6 31		inc $31				inc 	codePtr+1
.849c					_CREExit:
.849c	80 ba		bra $8458			bra 	_PSLoop
.849e					_PSExit:
.849e	60		rts				rts
.849f					_PSSyntax:
.849f	4c 48 9a	jmp $9a48			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.84a2					ScanForward:
.84a2	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.84a4	86 37		stx $37				stx 	zTemp0+1
.84a6	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.84a8					_ScanLoop:
.84a8	b1 30		lda ($30),y			lda 	(codePtr),y
.84aa	c8		iny				iny
.84ab	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.84ad	d0 09		bne $84b8			bne 	_ScanGoNext
.84af	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.84b1	f0 04		beq $84b7			beq 	_ScanMatch
.84b3	c5 37		cmp $37				cmp 	zTemp0+1
.84b5	d0 01		bne $84b8			bne 	_ScanGoNext
.84b7					_ScanMatch:
.84b7	60		rts				rts
.84b8					_ScanGoNext:
.84b8	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.84ba	90 ec		bcc $84a8			bcc 	_ScanLoop
.84bc	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.84be	90 18		bcc $84d8			bcc 	_ScanSkipOne
.84c0	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.84c2	b0 2f		bcs $84f3			bcs 	_ScanSkipData
.84c4	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.84c6	90 e0		bcc $84a8			bcc 	_ScanLoop 					; if not, ordinary keywords.
.84c8	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.84ca	b0 dc		bcs $84a8			bcs 	_ScanLoop
.84cc	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.84ce	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.84d0	b0 d6		bcs $84a8			bcs 	_ScanLoop
.84d2	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.84d4	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.84d6	80 d0		bra $84a8			bra 	_ScanLoop
.84d8					_ScanSkipOne:
.84d8	c8		iny				iny 								; consume the extra one.
.84d9	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.84db	d0 cb		bne $84a8			bne 	_ScanLoop
.84dd	18		clc				clc
.84de	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84e0	65 30		adc $30				adc 	codePtr
.84e2	85 30		sta $30				sta 	codePtr
.84e4	90 02		bcc $84e8			bcc 	_CREExit
.84e6	e6 31		inc $31				inc 	codePtr+1
.84e8					_CREExit:
.84e8	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.84ea	b2 30		lda ($30)			lda 	(codePtr)
.84ec	d0 ba		bne $84a8			bne 	_ScanLoop 					; if not zero, more to scan
.84ee	a9 13		lda #$13		lda	#19
.84f0	4c 2b 85	jmp $852b		jmp	ErrorHandler
.84f3					_ScanSkipData:
.84f3	88		dey				dey 								; point at data token
.84f4	c8		iny				iny
.84f5	98		tya				tya
.84f6	38		sec				sec
.84f7	71 30		adc ($30),y			adc 	(codePtr),y
.84f9	a8		tay				tay
.84fa	80 ac		bra $84a8			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.84fc					Command_WHILE:
.84fc	5a		phy				phy 								; save position of the test
.84fd	a2 00		ldx #$00			ldx 	#0
.84ff	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; work out the number
.8502	20 02 90	jsr $9002			jsr 	NSMIsZero 					; check if zero
.8505	f0 0e		beq $8515			beq 	_WHExitLoop 				; if so exit the loop
.8507	98		tya				tya 								; position *after* test.
.8508	7a		ply				ply 								; restore position before test, at WHILE
.8509	88		dey				dey
.850a	48		pha				pha 								; push after test on the stack
.850b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.850d	20 0f 90	jsr $900f			jsr 	StackOpen
.8510	20 41 90	jsr $9041			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8513	7a		ply				ply 								; restore the position *after* the test
.8514	60		rts				rts
.8515					_WHExitLoop:
.8515	68		pla				pla 								; throw post loop position
.8516	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8518	aa		tax				tax
.8519	20 a2 84	jsr $84a2			jsr 	ScanForward
.851c	60		rts				rts
.851d					Command_WEND:
.851d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.851f	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8521	20 36 90	jsr $9036			jsr 	StackCheckFrame
.8524	20 52 90	jsr $9052			jsr 	STKLoadCodePosition 		; loop back
.8527	20 28 90	jsr $9028			jsr 	StackClose		 			; erase the frame
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9578					CheckRightBracket:
.9578	b1 30		lda ($30),y			lda 	(codePtr),y
.957a	c8		iny				iny
.957b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.957d	d0 0f		bne $958e			bne 	CNAFail
.957f	60		rts				rts
.9580					CheckComma:
.9580	b1 30		lda ($30),y			lda 	(codePtr),y
.9582	c8		iny				iny
.9583	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9585	d0 07		bne $958e			bne 	CNAFail
.9587	60		rts				rts
.9588					CheckNextA:
.9588	d1 30		cmp ($30),y			cmp 	(codePtr),y
.958a	d0 02		bne $958e			bne 	CNAFail
.958c	c8		iny				iny 								; skip character
.958d	60		rts				rts 								; and exit
.958e					CNAFail:
.958e	4c 48 9a	jmp $9a48			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.852b					ErrorHandler:
.852b	a8		tay				tay 								; find the error text
.852c	f0 42		beq $8570			beq 	_EHEnd
.852e	a2 00		ldx #$00			ldx 	#0
.8530					_EHFind:
.8530	88		dey				dey 								; found the error text ?
.8531	f0 0a		beq $853d			beq 	_EHFound
.8533					_EHFindZero:
.8533	bd 61 9a	lda $9a61,x			lda 	ErrorText,x 				; find the next error
.8536	e8		inx				inx
.8537	c9 00		cmp #$00			cmp 	#0
.8539	d0 f8		bne $8533			bne 	_EHFindZero
.853b	80 f3		bra $8530			bra 	_EHFind
.853d					_EHFound:
.853d	bd 61 9a	lda $9a61,x			lda 	ErrorText,x 				; print the message
.8540	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.8543	e8		inx				inx
.8544	bd 61 9a	lda $9a61,x			lda 	ErrorText,x
.8547	d0 f4		bne $853d			bne 	_EHFound
.8549	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.854b	b1 30		lda ($30),y			lda 	(codePtr),y
.854d	d0 05		bne $8554			bne 	_EHAtMsg
.854f	c8		iny				iny
.8550	b1 30		lda ($30),y			lda 	(codePtr),y
.8552	f0 17		beq $856b			beq 	_EHCREnd
.8554					_EHAtMsg:
.8554	a2 85		ldx #$85			ldx 	#_AtMsg >> 8 				; print " at "
.8556	a9 73		lda #$73			lda 	#_AtMsg & $FF
.8558	20 7d 85	jsr $857d			jsr 	PrintStringXA
.855b	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.855d	b1 30		lda ($30),y			lda 	(codePtr),y
.855f	48		pha				pha
.8560	c8		iny				iny
.8561	b1 30		lda ($30),y			lda 	(codePtr),y
.8563	aa		tax				tax
.8564	68		pla				pla
.8565	20 d4 96	jsr $96d4			jsr 	ConvertInt16 				; convert XA to string
.8568	20 7d 85	jsr $857d			jsr 	PrintStringXA 				; and print it.
.856b					_EHCREnd:
.856b	a9 0d		lda #$0d			lda 	#13 						; new line
.856d	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.8570					_EHEnd:
.8570	4c 0c 80	jmp $800c			jmp 	WarmStart
>8573	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>857b	20 00
.857d					PrintStringXA:
.857d	5a		phy				phy
.857e	86 37		stx $37				stx 	zTemp0+1
.8580	85 36		sta $36				sta 	zTemp0
.8582	a0 00		ldy #$00			ldy 	#0
.8584					_PSXALoop:
.8584	b1 36		lda ($36),y			lda 	(zTemp0),y
.8586	f0 06		beq $858e			beq 	_PSXAExit
.8588	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.858b	c8		iny				iny
.858c	80 f6		bra $8584			bra 	_PSXALoop
.858e					_PSXAExit:
.858e	7a		ply				ply
.858f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8590					UnaryTrue:
.8590	fa		plx				plx
.8591					ReturnTrue:
.8591	a9 01		lda #$01			lda 	#1  						; set to 1
.8593	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.8596	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8598	9d 00 06	sta $0600,x			sta 	NSStatus,x
.859b	60		rts				rts
.859c					UnaryFalse:
.859c	fa		plx				plx
.859d					ReturnFalse:
.859d	4c d2 8f	jmp $8fd2			jmp 	NSMSetZero 					; set it all to zero
.85a0					BinaryCompareEqual:
.85a0	fa		plx				plx
.85a1	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85a4	c9 00		cmp #$00			cmp 	#0
.85a6	f0 e9		beq $8591			beq 	ReturnTrue
.85a8	80 f3		bra $859d			bra 	ReturnFalse
.85aa					BinaryCompareLess:
.85aa	fa		plx				plx
.85ab	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85ae	c9 ff		cmp #$ff			cmp 	#$FF
.85b0	f0 df		beq $8591			beq 	ReturnTrue
.85b2	80 e9		bra $859d			bra 	ReturnFalse
.85b4					BinaryCompareGreater:
.85b4	fa		plx				plx
.85b5	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85b8	c9 01		cmp #$01			cmp 	#1
.85ba	f0 d5		beq $8591			beq 	ReturnTrue
.85bc	80 df		bra $859d			bra 	ReturnFalse
.85be					BinaryCompareNotEqual:
.85be	fa		plx				plx
.85bf	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85c2	c9 00		cmp #$00			cmp 	#0
.85c4	d0 cb		bne $8591			bne 	ReturnTrue
.85c6	80 d5		bra $859d			bra 	ReturnFalse
.85c8					BinaryCompareLessEqual:
.85c8	fa		plx				plx
.85c9	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85cc	c9 01		cmp #$01			cmp 	#1
.85ce	d0 c1		bne $8591			bne 	ReturnTrue
.85d0	80 cb		bra $859d			bra 	ReturnFalse
.85d2					BinaryCompareGreaterEqual:
.85d2	fa		plx				plx
.85d3	20 dc 85	jsr $85dc			jsr 	CompareBaseCode
.85d6	c9 ff		cmp #$ff			cmp 	#$FF
.85d8	d0 b7		bne $8591			bne 	ReturnTrue
.85da	80 c1		bra $859d			bra 	ReturnFalse
.85dc					CompareBaseCode:
.85dc	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; make both values if references.
.85df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.85e2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e5	29 10		and #$10			and 	#NSTString
.85e7	d0 40		bne $8629			bne 	_CBCString
.85e9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.85ec	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ef	d0 3b		bne $862c			bne 	_CBCFloat
.85f1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85f4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85f7	29 08		and #$08			and 	#NSTFloat
.85f9	d0 31		bne $862c			bne 	_CBCFloat
.85fb	20 2f 86	jsr $862f			jsr 	CompareFixMinusZero
.85fe	e8		inx				inx
.85ff	20 2f 86	jsr $862f			jsr 	CompareFixMinusZero
.8602	ca		dex				dex
.8603	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8606	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8609	10 0b		bpl $8616			bpl 	_CDCSameSign
.860b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.860e	30 16		bmi $8626			bmi 	_CBCLess 					; return $FF
.8610					_CBCGreater:
.8610	a9 01		lda #$01			lda 	#1
.8612	60		rts				rts
.8613					_CBCEqual:
.8613	a9 00		lda #$00			lda 	#0
.8615	60		rts				rts
.8616					_CDCSameSign:
.8616	20 3f 87	jsr $873f			jsr 	SubTopTwoStack 				; unsigned subtract
.8619	20 02 90	jsr $9002			jsr 	NSMIsZero 					; or the mantissa together
.861c	f0 f5		beq $8613			beq 	_CBCEqual 					; -0 == 0
.861e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8621	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8624	10 ea		bpl $8610			bpl 	_CBCGreater
.8626					_CBCLess:
.8626	a9 ff		lda #$ff			lda 	#$FF
.8628	60		rts				rts
.8629					_CBCString:
.8629	4c 95 86	jmp $8695			jmp 	CompareStrings
.862c					_CBCFloat:
.862c	4c d0 97	jmp $97d0			jmp 	CompareFloat
.862f					CompareFixMinusZero:
.862f	20 02 90	jsr $9002			jsr 	NSMIsZero
.8632	d0 03		bne $8637			bne 	_CFXMZNotZero
.8634	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8637					_CFXMZNotZero:
.8637	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8638					StringConcat:
.8638	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.863b	3d 01 06	and $0601,x			and 	NSStatus+1,x
.863e	29 18		and #$18			and 	#NSBTypeMask
.8640	c9 10		cmp #$10			cmp 	#NSTString
.8642	d0 4e		bne $8692			bne		_SCType
.8644	64 38		stz $38				stz 	zTemp1 						; counting total length
.8646	e8		inx				inx
.8647	20 65 86	jsr $8665			jsr 	_SCSetupZ0 					; setup for second
.864a	20 70 86	jsr $8670			jsr 	_SCLengthZ0 				; length for second
.864d	ca		dex				dex
.864e	20 65 86	jsr $8665			jsr 	_SCSetupZ0 					; setup for first
.8651	20 70 86	jsr $8670			jsr 	_SCLengthZ0 				; length for first
.8654	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8656	20 11 9c	jsr $9c11			jsr 	StringTempAllocate
.8659	20 83 86	jsr $8683			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.865c	e8		inx				inx
.865d	20 65 86	jsr $8665			jsr 	_SCSetupZ0 					; copy second out
.8660	20 83 86	jsr $8683			jsr 	_SCCopy
.8663	ca		dex				dex
.8664	60		rts				rts
.8665					_SCSetupZ0:
.8665	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8668	85 36		sta $36				sta 	zTemp0
.866a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.866d	85 37		sta $37				sta 	zTemp0+1
.866f	60		rts				rts
.8670					_SCLengthZ0:
.8670	5a		phy				phy
.8671	a0 00		ldy #$00			ldy 	#0
.8673					_SCLenLoop:
.8673	b1 36		lda ($36),y			lda 	(zTemp0),y
.8675	f0 0a		beq $8681			beq 	_SCLExit
.8677	c8		iny				iny
.8678	e6 38		inc $38				inc 	zTemp1
.867a	10 f7		bpl $8673			bpl		_SCLenLoop
.867c	a9 09		lda #$09		lda	#9
.867e	4c 2b 85	jmp $852b		jmp	ErrorHandler
.8681					_SCLExit:
.8681	7a		ply				ply
.8682	60		rts				rts
.8683					_SCCopy:
.8683	5a		phy				phy
.8684	a0 00		ldy #$00			ldy 	#0
.8686					_SCCopyLoop:
.8686	b1 36		lda ($36),y			lda 	(zTemp0),y
.8688	f0 06		beq $8690			beq 	_SCCExit
.868a	20 4f 9c	jsr $9c4f			jsr 	StringTempWrite
.868d	c8		iny				iny
.868e	80 f6		bra $8686			bra 	_SCCopyLoop
.8690					_SCCExit:
.8690	7a		ply				ply
.8691	60		rts				rts
.8692					_SCType:
.8692	4c 52 9a	jmp $9a52			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9591					IntegerDivide:
.9591	fa		plx				plx
.9592	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9595	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9598	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9599	0a		asl a				asl 	a
.959a	10 05		bpl $95a1			bpl 	_NotRef
.959c	48		pha				pha
.959d	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95a0	68		pla				pla
.95a1					_NotRef:
.95a1	0a		asl a				asl 	a
.95a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95aa	f0 03		beq $95af			beq 	_IntegerCode 				; if clear, then we have two integers
.95ac	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.95af					_IntegerCode:
.95af	20 d1 95	jsr $95d1			jsr 	CheckDivideZero 			; do div zero check
.95b2	20 09 96	jsr $9609			jsr 	Int32Divide 				; do the division
.95b5	20 c6 96	jsr $96c6			jsr 	CalculateSign 				; calculate result sign
.95b8					NSMCopyPlusTwoToZero:
.95b8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.95bb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95be	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.95c1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95c4	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.95c7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95ca	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.95cd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95d0	60		rts				rts
.95d1					CheckDivideZero:
.95d1	e8		inx				inx
.95d2	20 02 90	jsr $9002			jsr 	NSMIsZero
.95d5	f0 02		beq $95d9			beq 	_CDVError
.95d7	ca		dex				dex
.95d8	60		rts				rts
.95d9					_CDVError:
.95d9	a9 03		lda #$03		lda	#3
.95db	4c 2b 85	jmp $852b		jmp	ErrorHandler
.95de					IntegerModulus:
.95de	fa		plx				plx
.95df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.95e2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95e5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e6	0a		asl a				asl 	a
.95e7	10 05		bpl $95ee			bpl 	_NotRef
.95e9	48		pha				pha
.95ea	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ed	68		pla				pla
.95ee					_NotRef:
.95ee	0a		asl a				asl 	a
.95ef	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95f1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95f7	f0 03		beq $95fc			beq 	_IntegerCode 				; if clear, then we have two integers
.95f9	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.95fc					_IntegerCode:
.95fc	20 d1 95	jsr $95d1			jsr 	CheckDivideZero 			; do div zero check
.95ff	20 09 96	jsr $9609			jsr 	Int32Divide 				; do the division
.9602	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9605	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9608	60		rts				rts
.9609					Int32Divide:
.9609	48		pha				pha 								; save AXY
.960a	5a		phy				phy
.960b	20 a9 8f	jsr $8fa9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.960e	20 ce 8f	jsr $8fce			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9611	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9613					_I32DivideLoop:
.9613	e8		inx				inx
.9614	e8		inx				inx
.9615	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9618	ca		dex				dex
.9619	ca		dex				dex
.961a	20 e8 8f	jsr $8fe8			jsr 	NSMRotateLeft
.961d	20 49 96	jsr $9649			jsr 	DivideCheckSubtract 		; check if subtract possible
.9620	90 03		bcc $9625			bcc 	_I32DivideNoCarryIn
.9622	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9625					_I32DivideNoCarryIn:
.9625	88		dey				dey 								; loop round till division completed.
.9626	d0 eb		bne $9613			bne 	_I32DivideLoop
.9628	7a		ply				ply 								; restore AXY and exit
.9629	68		pla				pla
.962a	60		rts				rts
.962b					Int32ShiftDivide:
.962b	48		pha				pha 								; save AY
.962c	5a		phy				phy
.962d	e8		inx				inx 								; clear S[X+2]
.962e	e8		inx				inx
.962f	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.9632	ca		dex				dex
.9633	ca		dex				dex
.9634	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9636					_I32SDLoop:
.9636	20 49 96	jsr $9649			jsr 	DivideCheckSubtract 		; check if subtract possible
.9639	e8		inx				inx
.963a	e8		inx				inx
.963b	20 e8 8f	jsr $8fe8			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.963e	ca		dex				dex
.963f	ca		dex				dex
.9640	20 e8 8f	jsr $8fe8			jsr 	NSMRotateLeft
.9643	88		dey				dey 	 							; do 31 times
.9644	d0 f0		bne $9636			bne 	_I32SDLoop
.9646	7a		ply				ply 								; restore AY and exit
.9647	68		pla				pla
.9648	60		rts				rts
.9649					DivideCheckSubtract:
.9649	20 3f 87	jsr $873f			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.964c	b0 04		bcs $9652			bcs 	_DCSExit 					; if carry set, then could do, exit
.964e	20 19 87	jsr $8719			jsr 	AddTopTwoStack 				; add it back in
.9651	18		clc				clc 								; and return False
.9652					_DCSExit:
.9652	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9653					MulInteger:
.9653	fa		plx				plx
.9654	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9657	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.965a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.965b	0a		asl a				asl 	a
.965c	10 05		bpl $9663			bpl 	_NotRef
.965e	48		pha				pha
.965f	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9662	68		pla				pla
.9663					_NotRef:
.9663	0a		asl a				asl 	a 							; put MSB of type into A:7
.9664	30 0b		bmi $9671			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9666	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9669	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.966c	f0 06		beq $9674			beq 	_IntegerCode 				; if clear, then we have two integers
.966e	4c a7 98	jmp $98a7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9671					_StringData:
.9671	4c 5c 9a	jmp $9a5c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9674					_IntegerCode:
.9674	20 81 96	jsr $9681			jsr 	MultiplyShort
.9677	c9 00		cmp #$00			cmp 	#0
.9679	f0 05		beq $9680			beq 	_MIExit
.967b	a9 04		lda #$04		lda	#4
.967d	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9680					_MIExit:
.9680	60		rts				rts
.9681					MultiplyShort:
.9681	5a		phy				phy 								; save Y
.9682	20 a9 8f	jsr $8fa9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9685	20 ce 8f	jsr $8fce			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9688	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.968a					_I32MLoop:
.968a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.968d	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9690	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9693	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9696	f0 28		beq $96c0			beq 	_I32MExit 					; exit if zero
.9698	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.969b	29 01		and #$01			and 	#1
.969d	f0 0e		beq $96ad			beq 	_I32MNoAdd
.969f	20 19 87	jsr $8719			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.96a2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.96a5	10 06		bpl $96ad			bpl 	_I32MNoAdd
.96a7					_I32ShiftRight:
.96a7	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight 				; shift S[X] right
.96aa	c8		iny				iny 								; increment shift count
.96ab	80 0a		bra $96b7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.96ad					_I32MNoAdd:
.96ad	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.96b0	70 f5		bvs $96a7			bvs 	_I32ShiftRight 				; instead.
.96b2	e8		inx				inx
.96b3	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.96b6	ca		dex				dex
.96b7					_I32MShiftUpper:
.96b7	e8		inx				inx 								; shift S[X+2] right
.96b8	e8		inx				inx
.96b9	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight
.96bc	ca		dex				dex
.96bd	ca		dex				dex
.96be	80 ca		bra $968a			bra 	_I32MLoop 					; try again.
.96c0					_I32MExit:
.96c0	20 c6 96	jsr $96c6			jsr 	CalculateSign
.96c3	98		tya				tya 								; shift in A
.96c4	7a		ply				ply 								; restore Y and exit
.96c5	60		rts				rts
.96c6					CalculateSign:
.96c6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.96c9	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.96cc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.96cf	0a		asl a				asl 	a 							; shift bit 7 into carry
.96d0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.96d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8695					CompareStrings:
.8695	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8698	3d 01 06	and $0601,x			and 	NSStatus+1,x
.869b	29 10		and #$10			and 	#NSBIsString
.869d	f0 2c		beq $86cb			beq 	_CSTypeError
.869f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.86a2	85 36		sta $36				sta 	zTemp0
.86a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a7	85 37		sta $37				sta 	zTemp0+1
.86a9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.86ac	85 38		sta $38				sta 	zTemp1
.86ae	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.86b1	85 39		sta $39				sta 	zTemp1+1
.86b3	5a		phy				phy 								; save Y so we can access strings
.86b4	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.86b6					_CSLoop:
.86b6	c8		iny				iny
.86b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.86b9	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.86bb	d0 06		bne $86c3			bne 	_CSDifferent
.86bd	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.86bf	d0 f5		bne $86b6			bne 	_CSLoop 					; still comparing
.86c1					_CSExit:
.86c1	7a		ply				ply 								; reached end, return zero in A from EOS
.86c2	60		rts				rts
.86c3					_CSDifferent:
.86c3	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.86c5	90 fa		bcc $86c1			bcc		_CSExit
.86c7	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.86c9	80 f6		bra $86c1			bra 	_CSExit
.86cb					_CSTypeError:
.86cb	4c 52 9a	jmp $9a52			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.86ce					ShiftLeft:
.86ce	38		sec				sec
.86cf	80 01		bra $86d2			bra 	ShiftMain
.86d1					ShiftRight:
.86d1	18		clc				clc
.86d2					ShiftMain:
.86d2	fa		plx				plx 								; restore X
.86d3	08		php				php 								; save direction
.86d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86da	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86db	0a		asl a				asl 	a
.86dc	10 05		bpl $86e3			bpl 	_NotRef
.86de	48		pha				pha
.86df	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86e2	68		pla				pla
.86e3					_NotRef:
.86e3	0a		asl a				asl 	a
.86e4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86e6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ec	f0 03		beq $86f1			beq 	_IntegerCode 				; if clear, then we have two integers
.86ee	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.86f1					_IntegerCode:
.86f1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.86f4	29 e0		and #$e0			and 	#$E0
.86f6	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.86f9	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.86fc	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86ff	d0 13		bne $8714			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8701					_SMLoop:
.8701	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8704	30 11		bmi $8717			bmi 	_SMExit 					; exit if done.
.8706	28		plp				plp 								; restore direcition setting
.8707	08		php				php
.8708	90 05		bcc $870f			bcc 	_SMRight
.870a	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; shift left if CS
.870d	80 f2		bra $8701			bra 	_SMLoop
.870f					_SMRight:
.870f	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight 				; shift right if CC
.8712	80 ed		bra $8701			bra 	_SMLoop
.8714					_SMExit0:
.8714	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero 					; return zero.
.8717					_SMExit:
.8717	28		plp				plp 								; throw direction
.8718	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8719					AddTopTwoStack:
.8719	18		clc				clc
.871a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.871d	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8720	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8723	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8726	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8729	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.872c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.872f	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8732	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8735	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8738	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.873b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.873e	60		rts				rts
.873f					SubTopTwoStack:
.873f	38		sec				sec
.8740	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8743	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8746	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8749	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.874c	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.874f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8752	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8755	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8758	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.875b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.875e	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8761	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8764	60		rts				rts
.8765					AddInteger:
.8765	fa		plx				plx
.8766	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8769	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.876c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.876d	0a		asl a				asl 	a
.876e	10 05		bpl $8775			bpl 	_NotRef
.8770	48		pha				pha
.8771	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8774	68		pla				pla
.8775					_NotRef:
.8775	0a		asl a				asl 	a 							; put MSB of type into A:7
.8776	30 0b		bmi $8783			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8778	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.877b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.877e	f0 06		beq $8786			beq 	_IntegerCode 				; if clear, then we have two integers
.8780	4c 2f 97	jmp $972f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8783					_StringData:
.8783	4c 38 86	jmp $8638			jmp 	StringConcat							; at least one string - don't know both are strings.
.8786					_IntegerCode:
.8786					AddCode:
.8786	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8789	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.878c	10 8b		bpl $8719			bpl 	AddTopTwoStack
.878e	20 3f 87	jsr $873f			jsr 	SubTopTwoStack 				; do a physical subtraction
.8791	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8794	10 09		bpl $879f			bpl 	_AddExit
.8796	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8799	9d 00 06	sta $0600,x			sta 	NSStatus,x
.879c	20 87 8f	jsr $8f87			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.879f					_AddExit:
.879f	60		rts				rts
.87a0					SubInteger:
.87a0	fa		plx				plx
.87a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87a4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87a8	0a		asl a				asl 	a
.87a9	10 05		bpl $87b0			bpl 	_NotRef
.87ab	48		pha				pha
.87ac	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87af	68		pla				pla
.87b0					_NotRef:
.87b0	0a		asl a				asl 	a 							; put MSB of type into A:7
.87b1	30 0b		bmi $87be			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.87b3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87b6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87b9	f0 06		beq $87c1			beq 	_IntegerCode 				; if clear, then we have two integers
.87bb	4c 34 97	jmp $9734			jmp 	FloatingPointSub 							; otherwise at least one float.
.87be					_StringData:
.87be	4c 5c 9a	jmp $9a5c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.87c1					_IntegerCode:
.87c1	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.87c4	49 80		eor #$80			eor 	#$80
.87c6	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.87c9	80 bb		bra $8786			bra 	AddCode 					; and do the same code as add.
.87cb					AndInteger:
.87cb	fa		plx				plx
.87cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87cf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87d2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87d3	0a		asl a				asl 	a
.87d4	10 05		bpl $87db			bpl 	_NotRef
.87d6	48		pha				pha
.87d7	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87da	68		pla				pla
.87db					_NotRef:
.87db	0a		asl a				asl 	a
.87dc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87de	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87e1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87e4	f0 03		beq $87e9			beq 	_IntegerCode 				; if clear, then we have two integers
.87e6	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.87e9					_IntegerCode:
.87e9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87ec	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.87ef	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87f2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87f5	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.87f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87fb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87fe	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8801	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8804	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8807	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.880a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.880d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8810	60		rts				rts
.8811					OraInteger:
.8811	fa		plx				plx
.8812	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8815	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8818	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8819	0a		asl a				asl 	a
.881a	10 05		bpl $8821			bpl 	_NotRef
.881c	48		pha				pha
.881d	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8820	68		pla				pla
.8821					_NotRef:
.8821	0a		asl a				asl 	a
.8822	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8824	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8827	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.882a	f0 03		beq $882f			beq 	_IntegerCode 				; if clear, then we have two integers
.882c	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.882f					_IntegerCode:
.882f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8832	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8835	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8838	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.883b	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.883e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8841	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8844	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8847	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.884a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.884d	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8850	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8853	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8856	60		rts				rts
.8857					EorInteger:
.8857	fa		plx				plx
.8858	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.885b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.885e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.885f	0a		asl a				asl 	a
.8860	10 05		bpl $8867			bpl 	_NotRef
.8862	48		pha				pha
.8863	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8866	68		pla				pla
.8867					_NotRef:
.8867	0a		asl a				asl 	a
.8868	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.886a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.886d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8870	f0 03		beq $8875			beq 	_IntegerCode 				; if clear, then we have two integers
.8872	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.8875					_IntegerCode:
.8875	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8878	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.887b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.887e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8881	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8884	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8887	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.888a	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.888d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8890	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8893	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8896	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8899	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.889c	60		rts				rts
.889d					WordIndirect:
.889d	fa		plx				plx
.889e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88a1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88a4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88a5	0a		asl a				asl 	a
.88a6	10 05		bpl $88ad			bpl 	_NotRef
.88a8	48		pha				pha
.88a9	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88ac	68		pla				pla
.88ad					_NotRef:
.88ad	0a		asl a				asl 	a
.88ae	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88b0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88b3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88b6	f0 03		beq $88bb			beq 	_IntegerCode 				; if clear, then we have two integers
.88b8	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.88bb					_IntegerCode:
.88bb	20 86 87	jsr $8786			jsr 	AddCode 					; add the two values
.88be	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.88c0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88c3	60		rts				rts
.88c4					ByteIndirect:
.88c4	fa		plx				plx
.88c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88c8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88cb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88cc	0a		asl a				asl 	a
.88cd	10 05		bpl $88d4			bpl 	_NotRef
.88cf	48		pha				pha
.88d0	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88d3	68		pla				pla
.88d4					_NotRef:
.88d4	0a		asl a				asl 	a
.88d5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88d7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88da	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88dd	f0 03		beq $88e2			beq 	_IntegerCode 				; if clear, then we have two integers
.88df	4c 52 9a	jmp $9a52			jmp 	TypeError 					; anything else, type mismatch.
.88e2					_IntegerCode:
.88e2	20 86 87	jsr $8786			jsr 	AddCode 					; add the two values
.88e5	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.88e7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.96d4					ConvertInt16:
.96d4	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.96d7	8e 10 06	stx $0610			stx 	NSMantissa1
.96da	9c 18 06	stz $0618			stz 	NSMantissa2
.96dd	9c 20 06	stz $0620			stz 	NSMantissa3
.96e0	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.96e3	a2 00		ldx #$00			ldx 	#0 							; stack level
.96e5	a9 0a		lda #$0a			lda 	#10 						; base
.96e7	80 00		bra $96e9			bra 	ConvertInt32
.96e9					ConvertInt32:
.96e9	5a		phy				phy
.96ea	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.96ec	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.96ef	10 08		bpl $96f9			bpl 	_CI32NotNeg
.96f1	48		pha				pha
.96f2	a9 2d		lda #$2d			lda 	#'-'
.96f4	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96f7	c8		iny				iny
.96f8	68		pla				pla
.96f9					_CI32NotNeg:
.96f9	20 07 97	jsr $9707			jsr 	_CI32DivideConvert 			; recursive conversion
.96fc	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.96fe	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9701	7a		ply				ply
.9702	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9704	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9706	60		rts				rts
.9707					_CI32DivideConvert:
.9707	e8		inx				inx 								; write to next slot up
.9708	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.970b	ca		dex				dex
.970c	20 09 96	jsr $9609			jsr 	Int32Divide 				; divide
.970f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9712	48		pha				pha
.9713	20 b8 95	jsr $95b8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9716	20 02 90	jsr $9002			jsr 	NSMIsZero 					; is it zero ?
.9719	f0 06		beq $9721			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.971b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.971e	20 07 97	jsr $9707			jsr 	_CI32DivideConvert 			; and recusrively call.
.9721					_CI32NoRecurse:
.9721	68		pla				pla 								; remainder
.9722	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9724	90 02		bcc $9728			bcc 	_CI32NotHex
.9726	69 26		adc #$26			adc 	#6+32
.9728					_CI32NotHex:
.9728	69 30		adc #$30			adc 	#48
.972a	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.972d	c8		iny				iny
.972e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.88eb					PrecedenceLevel:
>88eb	04					.byte	 4	; $00 <<
>88ec	02					.byte	 2	; $01 <=
>88ed	02					.byte	 2	; $02 <>
>88ee	00					.byte	 0	; $03 !!3
>88ef	00					.byte	 0	; $04 ><
>88f0	02					.byte	 2	; $05 >=
>88f1	04					.byte	 4	; $06 >>
>88f2	00					.byte	 0	; $07 !!7
>88f3	00					.byte	 0	; $08 !!8
>88f4	00					.byte	 0	; $09 !!9
>88f5	00					.byte	 0	; $0a !!10
>88f6	00					.byte	 0	; $0b !!11
>88f7	00					.byte	 0	; $0c !!12
>88f8	00					.byte	 0	; $0d !!13
>88f9	00					.byte	 0	; $0e !!14
>88fa	00					.byte	 0	; $0f !!15
>88fb	00					.byte	 0	; $10 @
>88fc	00					.byte	 0	; $11 !!17
>88fd	00					.byte	 0	; $12 !!18
>88fe	00					.byte	 0	; $13 [
>88ff	04					.byte	 4	; $14 \
>8900	00					.byte	 0	; $15 ]
>8901	01					.byte	 1	; $16 ^
>8902	00					.byte	 0	; $17 _
>8903	00					.byte	 0	; $18 `
>8904	00					.byte	 0	; $19 !!25
>8905	00					.byte	 0	; $1a !!26
>8906	00					.byte	 0	; $1b {
>8907	01					.byte	 1	; $1c |
>8908	00					.byte	 0	; $1d }
>8909	00					.byte	 0	; $1e ~
>890a	00					.byte	 0	; $1f [7m<7F>[m
>890b	00					.byte	 0	; $20
>890c	05					.byte	 5	; $21 !
>890d	00					.byte	 0	; $22 "
>890e	00					.byte	 0	; $23 #
>890f	05					.byte	 5	; $24 $
>8910	04					.byte	 4	; $25 %
>8911	01					.byte	 1	; $26 &
>8912	00					.byte	 0	; $27 '
>8913	00					.byte	 0	; $28 (
>8914	00					.byte	 0	; $29 )
>8915	04					.byte	 4	; $2a *
>8916	03					.byte	 3	; $2b +
>8917	00					.byte	 0	; $2c ,
>8918	03					.byte	 3	; $2d -
>8919	00					.byte	 0	; $2e .
>891a	04					.byte	 4	; $2f /
>891b	00					.byte	 0	; $30 0
>891c	00					.byte	 0	; $31 1
>891d	00					.byte	 0	; $32 2
>891e	00					.byte	 0	; $33 3
>891f	00					.byte	 0	; $34 4
>8920	00					.byte	 0	; $35 5
>8921	00					.byte	 0	; $36 6
>8922	00					.byte	 0	; $37 7
>8923	00					.byte	 0	; $38 8
>8924	00					.byte	 0	; $39 9
>8925	00					.byte	 0	; $3a :
>8926	00					.byte	 0	; $3b ;
>8927	02					.byte	 2	; $3c <
>8928	02					.byte	 2	; $3d =
>8929	02					.byte	 2	; $3e >
>892a	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.892b					EvaluateExpressionAt0:
.892b	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.892d					EvaluateExpression:
.892d	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.892f					EvaluateExpressionAtPrecedence:
.892f	48		pha				pha 								; save precedence level
.8930	20 fe 8b	jsr $8bfe			jsr 	EvaluateTerm 				; evaluate term into level X.
.8933	68		pla				pla 								; restore precedence level.
.8934					_EXPRLoop:
.8934	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8936	b1 30		lda ($30),y			lda 	(codePtr),y
.8938	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.893a	b0 25		bcs $8961			bcs 	_EXPRExit
.893c	da		phx				phx 								; read the operator precedence
.893d	aa		tax				tax
.893e	bd eb 88	lda $88eb,x			lda 	PrecedenceLevel,x
.8941	fa		plx				plx
.8942	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8944	f0 1b		beq $8961			beq 	_EXPRExit
.8946	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8948	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.894a	c5 37		cmp $37				cmp 	zTemp0+1
.894c	b0 13		bcs $8961			bcs		_EXPRExit 					; if current >= operator exit
.894e	48		pha				pha 								; save current precedence.
.894f	b1 30		lda ($30),y			lda 	(codePtr),y
.8951	c8		iny				iny
.8952	48		pha				pha
.8953	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8955	e8		inx				inx 								; work out the right hand side.
.8956	20 2f 89	jsr $892f			jsr 	EvaluateExpressionAtPrecedence
.8959	ca		dex				dex
.895a	68		pla				pla 								; get operator, call the code.
.895b	20 64 89	jsr $8964			jsr 	_EXPRCaller
.895e	68		pla				pla 								; restore precedence level
.895f	80 d3		bra $8934			bra 	_EXPRLoop 					; and go round.
.8961					_EXPRExit:
.8961	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8963	60		rts				rts
.8964					_EXPRCaller:
.8964	da		phx				phx 								; save on stack, first thing is to restore it
.8965	0a		asl a				asl 	a 							; double so can use vectors into X
.8966	aa		tax				tax
.8967	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.972f					FloatingPointAdd:
.972f	20 d0 98	jsr $98d0			jsr 	FloatPrepare 				; prepare for floats
.9732	80 0b		bra $973f			bra 	FloatAdd
.9734					FloatingPointSub:
.9734	20 d0 98	jsr $98d0			jsr 	FloatPrepare 				; prepare for floats
.9737					FloatSubtract:
.9737	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.973a	49 80		eor #$80			eor 	#$80
.973c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.973f					FloatAdd:
.973f	48		pha				pha
.9740	5a		phy				phy
.9741	20 e1 98	jsr $98e1			jsr 	NSNormalise 				; normalise S[X]
.9744	f0 54		beq $979a			beq 	_FAReturn1
.9746	e8		inx				inx 								; normalise S[X+1]
.9747	20 e1 98	jsr $98e1			jsr 	NSNormalise
.974a	ca		dex				dex
.974b	c9 00		cmp #$00			cmp 	#0
.974d	f0 6f		beq $97be			beq 	_FAExit 					; if so, just return A
.974f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9752	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9755	f0 1b		beq $9772			beq 	_FAExponentsEqual
.9757	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.975a	a8		tay				tay
.975b	38		sec				sec 								; do a signed comparison of the exponents.
.975c	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.975f	50 02		bvc $9763			bvc 	_FANoSignedChange
.9761	49 80		eor #$80			eor 	#$80
.9763					_FANoSignedChange:
.9763	29 80		and #$80			and 	#$80
.9765	10 03		bpl $976a			bpl 	_FAHaveMax
.9767	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.976a					_FAHaveMax:
.976a	20 c1 97	jsr $97c1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.976d	e8		inx				inx
.976e	20 c1 97	jsr $97c1			jsr 	_FAShiftToExponent
.9771	ca		dex				dex
.9772					_FAExponentsEqual:
.9772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9775	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9778	30 10		bmi $978a			bmi 	_FADifferentSigns
.977a	20 19 87	jsr $8719			jsr 	AddTopTwoStack 				; do the add of the mantissae
.977d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9780	10 3c		bpl $97be			bpl 	_FAExit 					; if no, we are done.
.9782	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9785	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9788	80 34		bra $97be			bra 	_FAExit
.978a					_FADifferentSigns:
.978a	20 3f 87	jsr $873f			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.978d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9790	10 2c		bpl $97be			bpl 	_FAExit 					; if no, we are done.
.9792	20 7e 8f	jsr $8f7e			jsr 	NSMNegate 					; netate result
.9795	20 87 8f	jsr $8f87			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9798	80 24		bra $97be			bra 	_FAExit
.979a					_FAReturn1:
.979a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.979d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97a0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.97a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97a6	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.97a9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97ac	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.97af	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97b2	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.97b5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97b8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.97bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97be					_FAExit:
.97be	7a		ply				ply
.97bf	68		pla				pla
.97c0	60		rts				rts
.97c1					_FAShiftToExponent:
.97c1					_FAShiftToExponent2:
.97c1	98		tya				tya 								; compare Y to exponent
.97c2	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.97c5	f0 08		beq $97cf			beq 	_FASEExit 					; exit if so.
.97c7	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight	 			; shift the mantissa right
.97ca	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.97cd	80 f2		bra $97c1			bra 	_FAShiftToExponent2
.97cf					_FASEExit:
.97cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.97d0					CompareFloat:
.97d0	20 37 97	jsr $9737			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.97d3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.97d6	29 f8		and #$f8			and 	#$F8
.97d8	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97db	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.97de	f0 09		beq $97e9			beq 	_FCExit 					; zero, so approximately identical
.97e0	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.97e2	3c 00 06	bit $0600,x			bit 	NSStatus,x
.97e5	10 02		bpl $97e9			bpl 	_FCExit
.97e7					_FCNegative:
.97e7	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.97e9					_FCExit:
.97e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.97ea					FDivideCommand:
.97ea	fa		plx				plx	 								; restore stack position
.97eb	20 d0 98	jsr $98d0			jsr 	FloatPrepare 				; prepare for floats
.97ee					FloatDivide:
.97ee	48		pha				pha
.97ef	e8		inx				inx
.97f0	20 e1 98	jsr $98e1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97f3	ca		dex				dex
.97f4	c9 00		cmp #$00			cmp 	#0
.97f6	f0 20		beq $9818			beq 	_FDZero
.97f8	20 e1 98	jsr $98e1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97fb	f0 19		beq $9816			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97fd	20 2b 96	jsr $962b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9800	20 b8 95	jsr $95b8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9803	20 e1 98	jsr $98e1			jsr		NSNormalise 				; renormalise
.9806	20 c6 96	jsr $96c6			jsr 	CalculateSign 				; calculate result sign
.9809	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.980c	38		sec				sec
.980d	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9810	38		sec				sec
.9811	e9 1e		sbc #$1e			sbc 	#30
.9813	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9816					_FDExit:
.9816	68		pla				pla
.9817	60		rts				rts
.9818					_FDZero:
.9818	a9 03		lda #$03		lda	#3
.981a	4c 2b 85	jmp $852b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.981d					FloatFractionalPart:
.981d	5a		phy				phy
.981e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9821	29 7f		and #$7f			and 	#$7F
.9823	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9826	20 e1 98	jsr $98e1			jsr 	NSNormalise
.9829	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.982c	38		sec				sec
.982d	e9 e0		sbc #$e0			sbc 	#$E0
.982f	90 31		bcc $9862			bcc 	_FFPExit 					; already fractional
.9831	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9833	b0 2a		bcs $985f			bcs 	_FFPZero
.9835	a8		tay				tay 								; put count to do in Y
.9836	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9839	20 64 98	jsr $9864			jsr 	_FFPPartial
.983c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.983f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9842	20 64 98	jsr $9864			jsr 	_FFPPartial
.9845	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9848	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.984b	20 64 98	jsr $9864			jsr 	_FFPPartial
.984e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9851	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9854	20 64 98	jsr $9864			jsr 	_FFPPartial
.9857	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.985a	20 02 90	jsr $9002			jsr 	NSMIsZero 					; zeroed check.
.985d	d0 03		bne $9862			bne 	_FFPExit
.985f					_FFPZero:
.985f	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.9862					_FFPExit:
.9862	7a		ply				ply
.9863	60		rts				rts
.9864					_FFPPartial:
.9864	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9866	f0 17		beq $987f			beq 	_FFFPPExit
.9868	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.986a	b0 0c		bcs $9878			bcs 	_FFFPPWholeByte
.986c	5a		phy				phy
.986d					_FFFPPLeft:
.986d	0a		asl a				asl 	a
.986e	88		dey				dey
.986f	d0 fc		bne $986d			bne 	_FFFPPLeft
.9871	7a		ply				ply
.9872					_FFFPPRight:
.9872	4a		lsr a				lsr 	a
.9873	88		dey				dey
.9874	d0 fc		bne $9872			bne 	_FFFPPRight
.9876	80 07		bra $987f			bra 	_FFFPPExit
.9878					_FFFPPWholeByte:
.9878	98		tya				tya 								; subtract 8 from count
.9879	38		sec				sec
.987a	e9 08		sbc #$08			sbc 	#8
.987c	a8		tay				tay
.987d	a9 00		lda #$00			lda 	#0 							; and clear all
.987f					_FFFPPExit:
.987f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9880					FloatIntegerPart:
.9880	48		pha				pha
.9881	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9884	f0 1f		beq $98a5			beq 	_FIPExit 					; if so do nothing
.9886	20 02 90	jsr $9002			jsr 	NSMIsZero 					; is it zero ?
.9889	f0 17		beq $98a2			beq 	_FIPZero 					; if so return zero.
.988b	20 e1 98	jsr $98e1			jsr 	NSNormalise 				; normalise
.988e	f0 12		beq $98a2			beq 	_FIPZero 					; normalised to zero, exit zero
.9890					_FIPShift:
.9890	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9893	10 08		bpl $989d			bpl 	_FIPCheckZero
.9895	20 f5 8f	jsr $8ff5			jsr 	NSMShiftRight 				; shift mantissa right
.9898	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.989b	80 f3		bra $9890			bra 	_FIPShift
.989d					_FIPCheckZero:
.989d	20 02 90	jsr $9002			jsr 	NSMIsZero 					; avoid -0 problem
.98a0	d0 03		bne $98a5			bne 	_FIPExit 					; set to zero if mantissa zero.
.98a2					_FIPZero:
.98a2	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.98a5					_FIPExit:
.98a5	68		pla				pla
.98a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.98a7					FloatingPointMultiply:
.98a7	20 d0 98	jsr $98d0			jsr 	FloatPrepare 				; prepare for floats
.98aa					FloatMultiply:
.98aa	48		pha				pha
.98ab	20 e1 98	jsr $98e1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98ae	f0 1b		beq $98cb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98b0	e8		inx				inx
.98b1	20 e1 98	jsr $98e1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98b4	ca		dex				dex
.98b5	c9 00		cmp #$00			cmp 	#0
.98b7	f0 0f		beq $98c8			beq 	_FDSetZero
.98b9	20 81 96	jsr $9681			jsr 	MultiplyShort 				; calculate the result.
.98bc	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.98bf	18		clc				clc
.98c0	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.98c3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98c6	80 03		bra $98cb			bra 	_FDExit
.98c8					_FDSetZero:
.98c8	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero 					; return 0
.98cb					_FDExit:
.98cb	20 e1 98	jsr $98e1			jsr 	NSNormalise 				; normalise the result
.98ce	68		pla				pla
.98cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.98d0					FloatPrepare:
.98d0	20 3d 8a	jsr $8a3d			jsr 	DereferenceTopTwo 			; dereference the top two values
.98d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.98d6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.98d9	29 10		and #$10			and 	#NSBIsString
.98db	d0 01		bne $98de			bne 	_FDType
.98dd	60		rts				rts
.98de					_FDType:
.98de	4c 52 9a	jmp $9a52			jmp 	TypeError
.98e1					NSNormalise:
.98e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.98e4	29 80		and #$80			and 	#$80
.98e6	09 08		ora #$08			ora 	#NSTFloat
.98e8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98eb	20 02 90	jsr $9002			jsr 	NSMIsZero 					; if zero exit
.98ee	d0 09		bne $98f9			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98f0	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.98f3	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.98f6	a9 00		lda #$00			lda 	#0 							; set Z flag
.98f8	60		rts				rts
.98f9					_NSNormaliseOptimise:
.98f9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98fc	d0 22		bne $9920			bne 	_NSNormaliseLoop
.98fe	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9901	30 1d		bmi $9920			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9903	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9906	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9909	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.990c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.990f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9912	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9915	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9918	38		sec				sec
.9919	e9 08		sbc #$08			sbc 	#8
.991b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.991e	80 d9		bra $98f9			bra 	_NSNormaliseOptimise
.9920					_NSNormaliseLoop:
.9920	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9923	70 08		bvs $992d			bvs 	_NSNExit 					; exit if so with Z flag clear
.9925	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; shift mantissa left
.9928	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.992b	80 f3		bra $9920			bra 	_NSNormaliseLoop
.992d					_NSNExit:
.992d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.992f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.896a					AssignNumber:
.896a	5a		phy				phy
.896b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.896e	85 36		sta $36				sta 	zTemp0
.8970	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8973	85 37		sta $37				sta 	zTemp0+1
.8975	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8978	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.897a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897d	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.897f	c9 08		cmp #$08			cmp 	#NSTFloat
.8981	f0 2a		beq $89ad			beq 	_ANFloat
.8983	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8986	f0 05		beq $898d			beq		_ANNotFloat
.8988	e8		inx				inx
.8989	20 80 98	jsr $9880			jsr 	FloatIntegerPart 			; make it an integer
.898c	ca		dex				dex
.898d					_ANNotFloat:
.898d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8990	29 03		and #$03			and 	#3
.8992	d0 05		bne $8999			bne 	_ANByteWord
.8994	20 b9 89	jsr $89b9			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8997	80 1e		bra $89b7			bra 	_ANExit
.8999					_ANByteWord:
.8999	48		pha				pha 								; save count
.899a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.899d	92 36		sta ($36)			sta 	(zTemp0)
.899f	68		pla				pla
.89a0	c9 01		cmp #$01			cmp	 	#1
.89a2	f0 13		beq $89b7			beq 	_ANExit
.89a4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.89a7	a0 01		ldy #$01			ldy 	#1
.89a9	91 36		sta ($36),y			sta 	(zTemp0),y
.89ab	80 0a		bra $89b7			bra 	_ANExit
.89ad					_ANFloat:
.89ad	20 b9 89	jsr $89b9			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.89b0	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.89b3	a0 04		ldy #$04			ldy 	#4
.89b5	91 36		sta ($36),y			sta 	(zTemp0),y
.89b7					_ANExit:
.89b7	7a		ply				ply
.89b8	60		rts				rts
.89b9					_ANCopy4PackSign:
.89b9	a0 03		ldy #$03			ldy 	#3
.89bb	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.89be	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.89c0	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.89c3	91 36		sta ($36),y			sta 	(zTemp0),y
.89c5	88		dey				dey
.89c6	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.89c9	91 36		sta ($36),y			sta 	(zTemp0),y
.89cb	88		dey				dey
.89cc	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89cf	91 36		sta ($36),y			sta 	(zTemp0),y
.89d1	88		dey				dey
.89d2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89d5	91 36		sta ($36),y			sta 	(zTemp0),y
.89d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.89d8					AssignString:
.89d8	5a		phy				phy
.89d9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89dc	85 38		sta $38				sta 	zTemp1
.89de	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89e1	85 39		sta $39				sta 	zTemp1+1
.89e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89e6	85 36		sta $36				sta 	zTemp0
.89e8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89eb	85 37		sta $37				sta 	zTemp0+1
.89ed	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.89ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.89f1	f0 23		beq $8a16			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.89f3	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.89f4	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.89f6	e9 02		sbc #$02			sbc 	#2
.89f8	85 3c		sta $3c				sta 	zsTemp
.89fa	a0 01		ldy #$01			ldy 	#1
.89fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.89fe	e9 00		sbc #$00			sbc 	#0
.8a00	85 3d		sta $3d				sta 	zsTemp+1
.8a02	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8a04					_ASGetLength:
.8a04	c8		iny				iny
.8a05	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a07	d0 fb		bne $8a04			bne 	_ASGetLength
.8a09	98		tya				tya 								; is this length <= current length
.8a0a	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8a0c	90 20		bcc $8a2e			bcc 	_ASCopyString
.8a0e	f0 1e		beq $8a2e			beq 	_ASCopyString
.8a10	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8a12	a0 01		ldy #$01			ldy 	#1
.8a14	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a16					_ASNewStringRequired:
.8a16	e8		inx				inx 								; concrete the new string.
.8a17	20 96 9b	jsr $9b96			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8a1a	ca		dex				dex
.8a1b	18		clc				clc
.8a1c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8a1f	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8a21	92 36		sta ($36)			sta 	(zTemp0)
.8a23	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a26	69 00		adc #$00			adc 	#0
.8a28	a0 01		ldy #$01			ldy 	#1
.8a2a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a2c	80 0d		bra $8a3b			bra 	_ASExit
.8a2e					_ASCopyString:
.8a2e	a0 00		ldy #$00			ldy 	#0
.8a30					_ASCopyLoop:
.8a30	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a32	c8		iny				iny
.8a33	c8		iny				iny
.8a34	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a36	88		dey				dey
.8a37	c9 00		cmp #$00			cmp 	#0
.8a39	d0 f5		bne $8a30			bne 	_ASCopyLoop
.8a3b					_ASExit:
.8a3b	7a		ply				ply
.8a3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8a3d					DereferenceTopTwo:
.8a3d	e8		inx				inx
.8a3e	20 42 8a	jsr $8a42			jsr 	Dereference 				; deref x+1
.8a41	ca		dex				dex  								; falls through to deref x
.8a42					Dereference:
.8a42	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8a45	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8a47	f0 57		beq $8aa0			beq 	_DRFExit 					; not a reference
.8a49	5a		phy				phy
.8a4a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8a4d	85 36		sta $36				sta 	zTemp0
.8a4f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a52	85 37		sta $37				sta 	zTemp0+1
.8a54	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8a57	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8a59	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a5c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8a5f	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8a61	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8a63	f0 0f		beq $8a74			beq 	_DRFDereferenceTwo
.8a65	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8a67	f0 39		beq $8aa2			beq 	_DRFFull
.8a69	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8a6c	29 03		and #$03			and 	#3
.8a6e	f0 32		beq $8aa2			beq 	_DRFFull 					; the whole word
.8a70	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8a72	f0 07		beq $8a7b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8a74					_DRFDereferenceTwo:
.8a74	a0 01		ldy #$01			ldy 	#1
.8a76	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a78	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a7b					_DRFClear23:
.8a7b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8a7e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a81	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8a84	29 18		and #$18			and 	#NSBTypeMask
.8a86	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a89	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8a8b	d0 12		bne $8a9f			bne 	_DRFNotString
.8a8d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8a90	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8a93	d0 0a		bne $8a9f			bne 	_DRFNotString
.8a95	a9 a1		lda #$a1			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8a97	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8a9a	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.8a9c	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a9f					_DRFNotString
.8a9f	7a		ply				ply 								; restore Y and exit
.8aa0					_DRFExit:
.8aa0	60		rts				rts
.8aa1					_DRFNullString:
>8aa1	00						.byte 	0
.8aa2					_DRFFull:
.8aa2	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8aa4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8aa9	c8		iny				iny
.8aaa	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aac	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aaf	c8		iny				iny
.8ab0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ab5	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8ab8	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8abb	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8abd	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8ac0	f0 06		beq $8ac8			beq 	_DRFNoExponent
.8ac2	c8		iny				iny 								; if not, read the exponent as well.
.8ac3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ac5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8ac8					_DRFNoExponent:
.8ac8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8acb	10 0d		bpl $8ada			bpl 	_DRFExit2 					; if not, then exit.
.8acd	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8acf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ad2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8ad5	09 80		ora #$80			ora 	#NSBIsNegative
.8ad7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ada					_DRFExit2:
.8ada	7a		ply				ply
.8adb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8adc					EncodeNumberStart:
.8adc	38		sec				sec
.8add	80 01		bra $8ae0			bra 	EncodeNumberContinue+1
.8adf					EncodeNumberContinue:
.8adf	18		clc				clc
.8ae0					EncodeNumber:
.8ae0	08		php				php 								; save reset.
.8ae1	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ae3	f0 12		beq $8af7			beq 	_ENIsOkay
.8ae5	c9 30		cmp #$30			cmp 	#"0"
.8ae7	90 04		bcc $8aed			bcc 	_ENBadNumber
.8ae9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8aeb	90 0a		bcc $8af7			bcc 	_ENIsOkay
.8aed					_ENBadNumber:
.8aed	28		plp				plp 								; throw saved reset
.8aee	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8af1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8af3	f0 7e		beq $8b73			beq 	_ENConstructFinal
.8af5					_ENFail:
.8af5	18		clc				clc 								; not allowed
.8af6	60		rts				rts
.8af7					_ENIsOkay:
.8af7	28		plp				plp 								; are we restarting
.8af8	90 15		bcc $8b0f			bcc 	_ENNoRestart
.8afa					_ENStartEncode:
.8afa	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8afc	f0 0c		beq $8b0a			beq 	_ENFirstDP
.8afe	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8b00	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.8b03	a9 01		lda #$01			lda 	#ESTA_Low
.8b05					_ENExitChange:
.8b05	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8b08	38		sec				sec
.8b09	60		rts				rts
.8b0a					_ENFirstDP:
.8b0a	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero 					; clear integer part
.8b0d	80 3f		bra $8b4e			bra 	_ESTASwitchFloat			; go straight to float and exi
.8b0f					_ENNoRestart:
.8b0f	48		pha				pha 								; save on stack.
.8b10	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8b13	c9 01		cmp #$01			cmp 	#ESTA_Low
.8b15	f0 09		beq $8b20			beq  	_ESTALowState
.8b17	c9 02		cmp #$02			cmp 	#ESTA_High
.8b19	f0 29		beq $8b44			beq 	_ESTAHighState
.8b1b	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8b1d	f0 3b		beq $8b5a			beq 	_ESTADecimalState
>8b1f	db						.byte 	$DB 						; causes a break in the emulator
.8b20					_ESTALowState:
.8b20	68		pla				pla 								; get value back
.8b21	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8b23	f0 29		beq $8b4e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8b25	29 0f		and #$0f			and 	#15 						; make digit
.8b27	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8b2a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8b2d	0a		asl a				asl 	a
.8b2e	0a		asl a				asl 	a
.8b2f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b32	0a		asl a				asl 	a
.8b33	6d 06 07	adc $0706			adc 	DigitTemp
.8b36	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b39	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8b3b	90 05		bcc $8b42			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8b3d	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8b3f	8d 05 07	sta $0705			sta 	EncodeState
.8b42					_ESTANoSwitch:
.8b42	38		sec				sec
.8b43	60		rts				rts
.8b44					_ESTAHighState:
.8b44	68		pla				pla 								; get value back
.8b45	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8b47	f0 05		beq $8b4e			beq 	_ESTASwitchFloat
.8b49	20 ad 8b	jsr $8bad			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8b4c	38		sec				sec
.8b4d	60		rts				rts
.8b4e					_ESTASwitchFloat:
.8b4e	9c 07 07	stz $0707			stz 	DecimalCount
.8b51	e8		inx				inx 								; zero the decimal additive.
.8b52	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.8b55	ca		dex				dex
.8b56	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8b58	80 ab		bra $8b05			bra 	_ENExitChange
.8b5a					_ESTADecimalState:
.8b5a	68		pla				pla 								; digit.
.8b5b	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8b5d	f0 96		beq $8af5			beq 	_ENFail
.8b5f	e8		inx				inx 								; put digit into fractional part of X+1
.8b60	20 ad 8b	jsr $8bad			jsr 	ESTAShiftDigitIntoMantissa
.8b63	ca		dex				dex
.8b64	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8b67	ad 07 07	lda $0707			lda 	DecimalCount
.8b6a	c9 0b		cmp #$0b			cmp 	#11
.8b6c	f0 02		beq $8b70			beq 	_ESTADSFail
.8b6e	38		sec				sec
.8b6f	60		rts				rts
.8b70					_ESTADSFail:
.8b70	4c 4d 9a	jmp $9a4d			jmp 	RangeError
.8b73					_ENConstructFinal:
.8b73	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8b76	f0 33		beq $8bab			beq 	_ENCFExit 					; no decimals
.8b78	5a		phy				phy
.8b79	0a		asl a				asl 	a 							; x 4 and CLC
.8b7a	0a		asl a				asl 	a
.8b7b	6d 07 07	adc $0707			adc 	DecimalCount
.8b7e	a8		tay				tay
.8b7f	b9 0c 9a	lda $9a0c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8b82	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b85	b9 0d 9a	lda $9a0d,y			lda 	DecimalScalarTable-5+1,y
.8b88	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8b8b	b9 0e 9a	lda $9a0e,y			lda 	DecimalScalarTable-5+2,y
.8b8e	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b91	b9 0f 9a	lda $9a0f,y			lda 	DecimalScalarTable-5+3,y
.8b94	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b97	b9 10 9a	lda $9a10,y			lda 	DecimalScalarTable-5+4,y
.8b9a	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b9d	a9 08		lda #$08			lda 	#NSTFloat
.8b9f	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ba2	7a		ply				ply
.8ba3	e8		inx				inx 								; multiply decimal const by decimal scalar
.8ba4	20 aa 98	jsr $98aa			jsr 	FloatMultiply
.8ba7	ca		dex				dex
.8ba8	20 3f 97	jsr $973f			jsr 	FloatAdd 					; add to integer part.
.8bab					_ENCFExit:
.8bab	18		clc				clc 								; reject the digit.
.8bac	60		rts				rts
.8bad					ESTAShiftDigitIntoMantissa:
.8bad	29 0f		and #$0f			and 	#15 						; save digit
.8baf	48		pha				pha
.8bb0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8bb3	48		pha				pha
.8bb4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8bb7	48		pha				pha
.8bb8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bbb	48		pha				pha
.8bbc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bbf	48		pha				pha
.8bc0	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 2
.8bc3	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 4
.8bc6	18		clc				clc 								; pop mantissa and add
.8bc7	68		pla				pla
.8bc8	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bcb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bce	68		pla				pla
.8bcf	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8bd2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bd5	68		pla				pla
.8bd6	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8bd9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bdc	68		pla				pla
.8bdd	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8be0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8be3	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 10
.8be6	68		pla				pla 								; add digit
.8be7	18		clc				clc
.8be8	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8beb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bee	90 0d		bcc $8bfd			bcc 	_ESTASDExit
.8bf0	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8bf3	d0 08		bne $8bfd			bne 	_ESTASDExit
.8bf5	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8bf8	d0 03		bne $8bfd			bne 	_ESTASDExit
.8bfa	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8bfd					_ESTASDExit:
.8bfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8bfe					EvaluateTerm:
.8bfe	b1 30		lda ($30),y			lda 	(codePtr),y
.8c00	30 18		bmi $8c1a			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8c02	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8c04	b0 6f		bcs $8c75			bcs 	_ETVariable
.8c06	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8c08	90 6e		bcc $8c78			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8c0a	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c0c	b0 6a		bcs $8c78			bcs 	_ETPuncUnary
.8c0e	20 dc 8a	jsr $8adc			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8c11					_ETNumber:
.8c11	c8		iny				iny 								; keep encoding until we have the numbers
.8c12	b1 30		lda ($30),y			lda 	(codePtr),y
.8c14	20 df 8a	jsr $8adf			jsr 	EncodeNumberContinue
.8c17	b0 f8		bcs $8c11			bcs 	_ETNumber 					; go back if accepted.
.8c19	60		rts				rts
.8c1a					_ETCheckUnary:
.8c1a	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8c1c	f0 41		beq $8c5f			beq 	_ETString
.8c1e	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8c20	f0 12		beq $8c34			beq 	_ETHexConstant
.8c22	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8c24	90 0b		bcc $8c31			bcc 	_ETSyntaxError
.8c26	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8c28	b0 07		bcs $8c31			bcs 	_ETSyntaxError
.8c2a	da		phx				phx 								; push X on the stack
.8c2b	0a		asl a				asl 	a 							; put vector x 2 into X
.8c2c	aa		tax				tax
.8c2d	c8		iny				iny 								; consume unary function token
.8c2e	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8c31					_ETSyntaxError:
.8c31	4c 48 9a	jmp $9a48			jmp 	SyntaxError
.8c34					_ETHexConstant:
.8c34	c8		iny				iny 								; skip #
.8c35	c8		iny				iny 								; skip count
.8c36	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero 					; clear result
.8c39					_ETHLoop:
.8c39	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3b	c8		iny				iny 								; and consume
.8c3c	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8c3e	f0 1e		beq $8c5e			beq 	_ETHExit
.8c40	48		pha				pha 								; save on stack.
.8c41	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 2
.8c44	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 4
.8c47	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 8
.8c4a	20 e7 8f	jsr $8fe7			jsr 	NSMShiftLeft 				; x 16
.8c4d	68		pla				pla 								; ASCII
.8c4e	c9 41		cmp #$41			cmp 	#'A'
.8c50	90 02		bcc $8c54			bcc 	_ETHNotChar
.8c52	e9 07		sbc #$07			sbc 	#7
.8c54					_ETHNotChar:
.8c54	29 0f		and #$0f			and 	#15 						; digit now
.8c56	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8c59	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c5c	80 db		bra $8c39			bra 	_ETHLoop 					; go round.
.8c5e					_ETHExit:
.8c5e	60		rts				rts
.8c5f					_ETString:
.8c5f	c8		iny				iny 								; look at length
.8c60	b1 30		lda ($30),y			lda 	(codePtr),y
.8c62	48		pha				pha
.8c63	c8		iny				iny 								; first character
.8c64	20 23 95	jsr $9523			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8c67	68		pla				pla 								; restore count and save
.8c68	85 36		sta $36				sta 	zTemp0
.8c6a	98		tya				tya 								; add length to Y to skip it.
.8c6b	18		clc				clc
.8c6c	65 36		adc $36				adc 	zTemp0
.8c6e	a8		tay				tay
.8c6f	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8c71	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c74	60		rts				rts
.8c75					_ETVariable:
.8c75	4c cf 8c	jmp $8ccf			jmp 	VariableHandler
.8c78					_ETPuncUnary:
.8c78	c8		iny				iny 								; consume the unary character
.8c79	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8c7b	f0 2d		beq $8caa			beq 	_ETUnaryNegate
.8c7d	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8c7f	f0 39		beq $8cba			beq 	_ETDereference
.8c81	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8c83	f0 43		beq $8cc8			beq 	_ETParenthesis
.8c85	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8c87	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8c89	f0 06		beq $8c91			beq 	_ETIndirection
.8c8b	e6 36		inc $36				inc 	zTemp0
.8c8d	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8c8f	d0 a0		bne $8c31			bne 	_ETSyntaxError
.8c91					_ETIndirection:
.8c91	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8c93	1a		inc a				inc 	a
.8c94	48		pha				pha
.8c95	20 fe 8b	jsr $8bfe			jsr 	EvaluateTerm				; evaluate the term
.8c98	20 42 8a	jsr $8a42			jsr 	Dereference 				; dereference it.
.8c9b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8c9e	d0 07		bne $8ca7			bne 	_ETTypeMismatch
.8ca0	68		pla				pla 								; indirection 1-2
.8ca1	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8ca3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ca6	60		rts				rts
.8ca7					_ETTypeMismatch:
.8ca7	4c 52 9a	jmp $9a52			jmp 	TypeError
.8caa					_ETUnaryNegate:
.8caa	20 fe 8b	jsr $8bfe			jsr 	EvaluateTerm				; evaluate the term
.8cad	20 42 8a	jsr $8a42			jsr 	Dereference 				; dereference it.
.8cb0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8cb3	29 10		and #$10			and 	#NSTString
.8cb5	d0 f0		bne $8ca7			bne 	_ETTypeMismatch
.8cb7	4c 7e 8f	jmp $8f7e			jmp 	NSMNegate  					; just toggles the sign bit.
.8cba					_ETDereference:
.8cba	20 fe 8b	jsr $8bfe			jsr 	EvaluateTerm				; evaluate the term
.8cbd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8cc0	29 20		and #$20			and 	#NSBIsReference
.8cc2	f0 e3		beq $8ca7			beq 	_ETTypeMismatch
.8cc4	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8cc7	60		rts				rts
.8cc8					_ETParenthesis:
.8cc8	20 2d 89	jsr $892d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8ccb	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; check for )
.8cce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8ccf					VariableHandler:
.8ccf	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd1	18		clc				clc
.8cd2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cd4	85 37		sta $37				sta 	zTemp0+1
.8cd6	c8		iny				iny
.8cd7	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd9	85 36		sta $36				sta 	zTemp0
.8cdb	c8		iny				iny
.8cdc	18		clc				clc									; copy variable address+3 to mantissa
.8cdd	69 03		adc #$03			adc 	#3
.8cdf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ce2	a5 37		lda $37				lda 	zTemp0+1
.8ce4	69 00		adc #$00			adc 	#0
.8ce6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ce9	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8cec	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8cef	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8cf2	5a		phy				phy
.8cf3	a0 02		ldy #$02			ldy 	#2 							; read type
.8cf5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cf7	7a		ply				ply
.8cf8	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8cfa	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8cfc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cff	29 04		and #$04			and 	#NSBIsArray
.8d01	d0 01		bne $8d04			bne 	_VHArray
.8d03	60		rts				rts
.8d04					_VHArray:
>8d04	db						.byte 	$DB 						; causes a break in the emulator
.8d05	80 fd		bra $8d04			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9930					AbsUnary:
.9930	fa		plx				plx 								; restore stack pos
.9931	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; get a float or int
.9934	20 78 95	jsr $9578			jsr 	CheckRightBracket
.9937	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.993a	29 7f		and #$7f			and 	#$7F
.993c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.993f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8d07					AllocUnary:
.8d07	fa		plx				plx 								; restore stack pos
.8d08	20 5e 8f	jsr $8f5e			jsr 	Evaluate16BitInteger		; get bytes required.
.8d0b	20 78 95	jsr $9578			jsr 	CheckRightBracket
.8d0e	da		phx				phx 								; save X/Y
.8d0f	5a		phy				phy
.8d10	8a		txa				txa 								; copy X into Y
.8d11	a8		tay				tay
.8d12	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8d15	aa		tax				tax
.8d16	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8d19	20 26 8d	jsr $8d26			jsr 	AllocateXABytes 			; allocate memory
.8d1c	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8d1f	8a		txa				txa
.8d20	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8d23	7a		ply				ply
.8d24	fa		plx				plx
.8d25	60		rts				rts
.8d26					AllocateXABytes:
.8d26	5a		phy				phy
.8d27	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8d2a	5a		phy				phy
.8d2b	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8d2e	5a		phy				phy
.8d2f	18		clc				clc
.8d30	6d 0c 07	adc $070c			adc 	lowMemPtr
.8d33	8d 0c 07	sta $070c			sta 	lowMemPtr
.8d36	8a		txa				txa
.8d37	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8d3a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8d3d	fa		plx				plx
.8d3e	68		pla				pla
.8d3f	7a		ply				ply
.8d40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9940					AscUnary:
.9940	fa		plx				plx 								; restore stack pos
.9941	20 31 8f	jsr $8f31			jsr 	EvaluateString 				; get a string
.9944	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9946	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.9949	20 78 95	jsr $9578			jsr 	CheckRightBracket
.994c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.994d					FracUnary:
.994d	fa		plx				plx 								; restore stack pos
.994e	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; get a float or int
.9951	20 78 95	jsr $9578			jsr 	CheckRightBracket
.9954	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9957	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9959	f0 04		beq $995f			beq 	_IUZero
.995b	20 1d 98	jsr $981d			jsr 	FloatFractionalPart
.995e	60		rts				rts
.995f					_IUZero:
.995f	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.9962	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9963					IntUnary:
.9963	fa		plx				plx 								; restore stack pos
.9964	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; get a float or int
.9967	20 78 95	jsr $9578			jsr 	CheckRightBracket
.996a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.996d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.996f	f0 03		beq $9974			beq 	_IUExit
.9971	20 80 98	jsr $9880			jsr 	FloatIntegerPart
.9974					_IUExit:
.9974	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9975					LenUnary:
.9975	fa		plx				plx 								; restore stack pos
.9976	20 31 8f	jsr $8f31			jsr 	EvaluateString 				; get a string
.9979	5a		phy				phy
.997a	a0 00		ldy #$00			ldy 	#0 							; find length
.997c					_LenFind:
.997c	b1 36		lda ($36),y			lda 	(zTemp0),y
.997e	f0 06		beq $9986			beq 	_LenExit
.9980	c8		iny				iny
.9981	d0 f9		bne $997c			bne 	_LenFind
.9983	4c 4d 9a	jmp $9a4d			jmp 	RangeError 					; string > 255
.9986					_LenExit:
.9986	98		tya				tya
.9987	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.998a	7a		ply				ply
.998b	20 78 95	jsr $9578			jsr 	CheckRightBracket
.998e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8d41					Unary_Not:
.8d41	fa		plx				plx
.8d42	20 49 8f	jsr $8f49			jsr 	EvaluateInteger 			; get integer
.8d45	20 78 95	jsr $9578			jsr 	CheckRightBracket
.8d48	20 02 90	jsr $9002			jsr 	NSMIsZero 					; zero mantissa ?
.8d4b	f0 04		beq $8d51			beq 	_NotZero
.8d4d	20 d2 8f	jsr $8fd2			jsr 	NSMSetZero
.8d50	60		rts				rts
.8d51					_NotZero:
.8d51	4c 91 85	jmp $8591			jmp 	ReturnTrue
.8d54					_UNBad:
.8d54	4c 57 9a	jmp $9a57			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8d57					Unary_Rnd:
.8d57	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; number to use.
.8d5a	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; closing bracket
.8d5d	20 86 8d	jsr $8d86			jsr 	Random32Bit 				; generate a number.
.8d60	ad 08 07	lda $0708			lda 	RandomSeed+0
.8d63	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d66	ad 09 07	lda $0709			lda 	RandomSeed+1
.8d69	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d6c	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8d6f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d72	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8d75	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8d77	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d7a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8d7c	8d 28 06	sta $0628			sta 	NSExponent
.8d7f	a9 08		lda #$08			lda 	#NSTFloat
.8d81	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8d84	db						.byte 	$DB 						; causes a break in the emulator
.8d85	60		rts				rts
.8d86					Random32Bit:
.8d86	5a		phy				phy
.8d87	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8d89	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8d8c	d0 03		bne $8d91			bne 	_Random1
.8d8e	a8		tay				tay 								; if so do it 256 times
.8d8f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8d91					_Random1:
.8d91	0a		asl a				asl 	a 							; LSFR RNG
.8d92	2e 09 07	rol $0709			rol 	RandomSeed+1
.8d95	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8d98	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8d9b	90 02		bcc $8d9f			bcc 	_Random2
.8d9d	49 c5		eor #$c5			eor 	#$C5
.8d9f					_Random2:
.8d9f	88		dey				dey
.8da0	d0 ef		bne $8d91			bne 	_Random1
.8da2	7a		ply				ply
.8da3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.998f					SgnUnary:
.998f	fa		plx				plx 								; restore stack pos
.9990	20 26 8f	jsr $8f26			jsr 	EvaluateNumber 				; get a float or int
.9993	20 78 95	jsr $9578			jsr 	CheckRightBracket
.9996	20 02 90	jsr $9002			jsr 	NSMIsZero 					; if zero
.9999	f0 10		beq $99ab			beq 	_SGZero  					; return Int Zero
.999b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.999e	48		pha				pha
.999f	a9 01		lda #$01			lda 	#1 							; set to 1
.99a1	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.99a4	68		pla				pla
.99a5	29 80		and #$80			and		#$80 						; copy the sign byte out
.99a7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99aa	60		rts				rts
.99ab	20 d2 8f	jsr $8fd2	_SGZero:jsr 	NSMSetZero
.99ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.99af					ValUnary:
.99af	fa		plx				plx 								; restore stack pos
.99b0	20 c5 99	jsr $99c5			jsr 	ValMainCode 				; do the main val() code
.99b3	b0 01		bcs $99b6			bcs 	_VUError 					; couldn't convert
.99b5	60		rts				rts
.99b6					_VUError:
.99b6	4c 52 9a	jmp $9a52			jmp 	TypeError
.99b9					IsValUnary:
.99b9	fa		plx				plx 								; restore stack pos
.99ba	20 c5 99	jsr $99c5			jsr 	ValMainCode 				; do the main val() code
.99bd	b0 03		bcs $99c2			bcs 	_VUBad
.99bf	4c 91 85	jmp $8591			jmp 	ReturnTrue
.99c2					_VUBad:
.99c2	4c 9d 85	jmp $859d			jmp 	ReturnFalse
.99c5					ValMainCode:
.99c5	20 31 8f	jsr $8f31			jsr 	EvaluateString 				; get a string
.99c8	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; check right bracket present
.99cb	5a		phy				phy
.99cc	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.99ce	f0 17		beq $99e7			beq 	_VMCFail2
.99d0	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.99d2	48		pha				pha 								; save first character
.99d3	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.99d5	d0 01		bne $99d8			bne 	_VMCStart
.99d7	c8		iny				iny 								; skip over -
.99d8					_VMCStart:
.99d8	38		sec				sec 								; initialise first time round.
.99d9					_VMCNext:
.99d9	c8		iny				iny 								; pre-increment
.99da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.99dc	f0 0c		beq $99ea			beq 	_VMCSuccess 				; successful.
.99de	20 e0 8a	jsr $8ae0			jsr 	EncodeNumber 				; send it to the number-builder
.99e1	90 03		bcc $99e6			bcc 	_VMCFail 					; if failed, give up.
.99e3	18		clc				clc 								; next time round, countinue
.99e4	80 f3		bra $99d9			bra 	_VMCNext
.99e6					_VMCFail:
.99e6	68		pla				pla
.99e7					_VMCFail2:
.99e7	7a		ply				ply
.99e8	38		sec				sec
.99e9	60		rts				rts
.99ea					_VMCSuccess:
.99ea	a9 00		lda #$00			lda 	#0 							; construct final
.99ec	20 e0 8a	jsr $8ae0			jsr 	EncodeNumber
.99ef	68		pla				pla
.99f0	c9 2d		cmp #$2d			cmp 	#"-"
.99f2	d0 03		bne $99f7			bne 	_VMCNotNegative
.99f4	20 7e 8f	jsr $8f7e			jsr		NSMNegate
.99f7					_VMCNotNegative:
.99f7	7a		ply				ply
.99f8	18		clc				clc
.99f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8da4					ChrUnary:
.8da4	fa		plx				plx 								; restore stack pos
.8da5	20 6a 8f	jsr $8f6a			jsr 	Evaluate8BitInteger			; get value
.8da8	48		pha				pha
.8da9	20 78 95	jsr $9578			jsr 	CheckRightBracket
.8dac	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8dae	20 11 9c	jsr $9c11			jsr 	StringTempAllocate
.8db1	68		pla				pla 								; write number to it
.8db2	20 4f 9c	jsr $9c4f			jsr 	StringTempWrite
.8db5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8db6					SpcUnary:
.8db6	fa		plx				plx 								; restore stack pos
.8db7	20 6a 8f	jsr $8f6a			jsr 	Evaluate8BitInteger			; get value
.8dba	5a		phy				phy
.8dbb	48		pha				pha 								; save count
.8dbc	20 11 9c	jsr $9c11			jsr 	StringTempAllocate
.8dbf	7a		ply				ply 								; to do count in Y
.8dc0					_SpcLoop:
.8dc0	c0 00		cpy #$00			cpy 	#0
.8dc2	f0 08		beq $8dcc			beq 	_SpcExit
.8dc4	a9 20		lda #$20			lda 	#32
.8dc6	20 4f 9c	jsr $9c4f			jsr 	StringTempWrite
.8dc9	88		dey				dey
.8dca	80 f4		bra $8dc0			bra 	_SPCLoop
.8dcc					_SpcExit:
.8dcc	7a		ply				ply
.8dcd	20 78 95	jsr $9578			jsr 	CheckRightBracket
.8dd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8dd1					Unary_Str:
.8dd1	fa		plx				plx
.8dd2	20 26 8f	jsr $8f26			jsr 	EvaluateNumber  			; get number
.8dd5	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; closing bracket
.8dd8	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8dda	20 f3 8d	jsr $8df3			jsr 	ConvertNumberToString 		; do the conversion.
.8ddd	a9 21		lda #$21			lda		#33 						; create buffer
.8ddf	20 11 9c	jsr $9c11			jsr 	StringTempAllocate 			; allocate memory
.8de2	da		phx				phx
.8de3	a2 00		ldx #$00			ldx 	#0
.8de5					_USCopy:
.8de5	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8de8	20 4f 9c	jsr $9c4f			jsr 	StringTempWrite
.8deb	e8		inx				inx
.8dec	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8def	d0 f4		bne $8de5			bne 	_USCopy
.8df1	fa		plx				plx
.8df2	60		rts				rts
.8df3					ConvertNumberToString:
.8df3	5a		phy				phy 								; save code position
.8df4	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8df7	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8dfa	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8dfd	10 0a		bpl $8e09			bpl 	_CNTSNotNegative
.8dff	29 7f		and #$7f			and 	#$7F 						; make +ve
.8e01	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e04	a9 2d		lda #$2d			lda 	#"-"
.8e06	20 6f 8e	jsr $8e6f			jsr 	WriteDecimalBuffer
.8e09					_CNTSNotNegative:
.8e09	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8e0c	f0 15		beq $8e23			beq 	_CNTSNotFloat
.8e0e	e8		inx				inx 								; round up
.8e0f	a9 01		lda #$01			lda 	#1
.8e11	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.8e14	ca		dex				dex
.8e15	bd 28 06	lda $0628,x			lda		NSExponent,x
.8e18	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8e1b	a9 08		lda #$08			lda 	#NSTFloat
.8e1d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e20	20 3f 97	jsr $973f			jsr 	FloatAdd
.8e23					_CNTSNotFloat:
.8e23	20 51 8e	jsr $8e51			jsr 	MakePlusTwoString
.8e26	20 1d 98	jsr $981d			jsr 	FloatFractionalPart 		; get the fractional part
.8e29	20 e1 98	jsr $98e1			jsr 	NSNormalise					; normalise , exit if zero
.8e2c	f0 21		beq $8e4f			beq 	_CNTSExit
.8e2e	a9 2e		lda #$2e			lda 	#"."
.8e30	20 6f 8e	jsr $8e6f			jsr 	WriteDecimalBuffer 			; write decimal place
.8e33					_CNTSDecimal:
.8e33	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8e36	30 17		bmi $8e4f			bmi 	_CNTSExit
.8e38	e8		inx				inx 								; x 10.0
.8e39	a9 0a		lda #$0a			lda 	#10
.8e3b	20 d4 8f	jsr $8fd4			jsr 	NSMSetByte
.8e3e	a9 08		lda #$08			lda 	#NSTFloat
.8e40	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e43	ca		dex				dex
.8e44	20 aa 98	jsr $98aa			jsr 	FloatMultiply
.8e47	20 51 8e	jsr $8e51			jsr 	MakePlusTwoString
.8e4a	20 1d 98	jsr $981d			jsr 	FloatFractionalPart 		; get the fractional part
.8e4d	80 e4		bra $8e33			bra 	_CNTSDecimal 				; keep going.
.8e4f					_CNTSExit:
.8e4f	7a		ply				ply
.8e50	60		rts				rts
.8e51					MakePlusTwoString:
.8e51	da		phx				phx
.8e52	20 a9 8f	jsr $8fa9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8e55	e8		inx				inx 								; access it
.8e56	e8		inx				inx
.8e57	20 80 98	jsr $9880			jsr 	FloatIntegerPart 			; make it an integer
.8e5a	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8e5c	20 e9 96	jsr $96e9			jsr 	ConvertInt32
.8e5f	a2 00		ldx #$00			ldx	 	#0
.8e61					_MPTSCopy:
.8e61	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e64	20 6f 8e	jsr $8e6f			jsr 	WriteDecimalBuffer
.8e67	e8		inx				inx
.8e68	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e6b	d0 f4		bne $8e61			bne 	_MPTSCopy
.8e6d	fa		plx				plx
.8e6e	60		rts				rts
.8e6f					WriteDecimalBuffer:
.8e6f	da		phx				phx
.8e70	ae 14 07	ldx $0714			ldx 	dbOffset
.8e73	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8e76	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8e79	ee 14 07	inc $0714			inc 	dbOffset
.8e7c	fa		plx				plx
.8e7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8e7e					Unary_Left:
.8e7e	fa		plx				plx
.8e7f	18		clc				clc 								; only one parameter
.8e80	20 f5 8e	jsr $8ef5			jsr 	SubstringInitial 			; set up.
.8e83	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8e86	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e89	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8e8c	80 2c		bra $8eba			bra 	SubstringMain
.8e8e					Unary_Right:
.8e8e	fa		plx				plx
.8e8f	18		clc				clc 								; only one parameter
.8e90	20 f5 8e	jsr $8ef5			jsr 	SubstringInitial 			; set up.
.8e93	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8e96	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e99	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8e9c	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e9f	b0 02		bcs $8ea3			bcs 	_URNotUnderflow
.8ea1	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8ea3					_URNotUnderFlow:
.8ea3	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8ea6	80 12		bra $8eba			bra 	SubStringMain
.8ea8					Unary_Mid:
.8ea8	fa		plx				plx
.8ea9	38		sec				sec 								; two parameters
.8eaa	20 f5 8e	jsr $8ef5			jsr 	SubstringInitial 			; set up.
.8ead	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8eb0	f0 05		beq $8eb7			beq 	_UMError
.8eb2	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8eb5	80 03		bra $8eba			bra 	SubStringMain
.8eb7					_UMError:
.8eb7	4c 57 9a	jmp $9a57			jmp 	ArgumentError
.8eba					SubStringMain:
.8eba	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8ebd	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8ec0	b0 2d		bcs $8eef			bcs 	_SSMNull 					; if so, return an empty string.
.8ec2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8ec5	f0 28		beq $8eef			beq 	_SSMNull 					; return empty string.
.8ec7	18		clc				clc 								; add the offset +1 to the address and
.8ec8	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8ecb	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ece	85 36		sta $36				sta 	zTemp0
.8ed0	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ed3	69 00		adc #$00			adc 	#0
.8ed5	85 37		sta $37				sta 	zTemp0+1
.8ed7					_SSMNoCarry:
.8ed7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8eda	20 11 9c	jsr $9c11			jsr 	StringTempAllocate 			; allocate that many characters
.8edd	5a		phy				phy 								; save Y
.8ede	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8ee0					_SSMCopy:
.8ee0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8ee2	f0 09		beq $8eed			beq 	_SSMEString 				; no more to copy
.8ee4	20 4f 9c	jsr $9c4f			jsr 	StringTempWrite 			; and write it out.
.8ee7	c8		iny				iny
.8ee8	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8eeb	d0 f3		bne $8ee0			bne 	_SSMCopy
.8eed					_SSMEString:
.8eed	7a		ply				ply
.8eee					_SSMExit:
.8eee	60		rts				rts
.8eef					_SSMNull:
.8eef	a9 00		lda #$00			lda 	#0
.8ef1	20 11 9c	jsr $9c11			jsr 	StringTempAllocate
.8ef4	60		rts				rts
.8ef5					SubstringInitial:
.8ef5	da		phx				phx 								; save initial stack position
.8ef6	08		php				php 								; save carry on stack indicating 2 parameters
.8ef7	20 31 8f	jsr $8f31			jsr 	EvaluateString 				; get a string
.8efa	5a		phy				phy 								; calculate length to exponent.
.8efb	a0 ff		ldy #$ff			ldy 	#$FF
.8efd					_SIFindLength:
.8efd	c8		iny				iny
.8efe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f00	d0 fb		bne $8efd			bne 	_SIFindLength
.8f02	98		tya				tya
.8f03	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f06	7a		ply				ply
.8f07	e8		inx				inx
.8f08	20 80 95	jsr $9580			jsr 	CheckComma 					; comma next
.8f0b	20 6a 8f	jsr $8f6a			jsr 	Evaluate8BitInteger 		; get next parameter
.8f0e	28		plp				plp 								; is it the last parameter ?
.8f0f	90 07		bcc $8f18			bcc 	_SSIExit 					; if so, exit.
.8f11	e8		inx				inx
.8f12	20 80 95	jsr $9580			jsr 	CheckComma 					; comma next
.8f15	20 6a 8f	jsr $8f6a			jsr 	Evaluate8BitInteger 		; get last parameter
.8f18					_SSIExit:
.8f18	fa		plx				plx
.8f19	20 78 95	jsr $9578			jsr 	CheckRightBracket 			; check closing bracket
.8f1c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8f1d					EvaluateValue:
.8f1d	48		pha				pha
.8f1e	20 2d 89	jsr $892d			jsr		EvaluateExpression 			; expression
.8f21	20 42 8a	jsr $8a42			jsr 	Dereference					; derefernce it
.8f24	68		pla				pla
.8f25	60		rts				rts
.8f26					EvaluateNumber:
.8f26	20 1d 8f	jsr $8f1d			jsr 	EvaluateValue 				; get a value
.8f29	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f2c	29 10		and #$10			and 	#NSBIsString
.8f2e	d0 16		bne $8f46			bne 	HelperTypeError
.8f30	60		rts				rts
.8f31					EvaluateString:
.8f31	20 1d 8f	jsr $8f1d			jsr 	EvaluateValue 				; get a value
.8f34	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f37	29 10		and #$10			and 	#NSBIsString
.8f39	f0 0b		beq $8f46			beq 	HelperTypeError
.8f3b					CopyAddressToTemp0:
.8f3b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8f3e	85 36		sta $36				sta 	zTemp0
.8f40	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f43	85 37		sta $37				sta 	zTemp0+1
.8f45	60		rts				rts
.8f46					HelperTypeError:
.8f46	4c 52 9a	jmp $9a52			jmp 	TypeError
.8f49					EvaluateInteger:
.8f49	20 26 8f	jsr $8f26			jsr 	EvaluateNumber
.8f4c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8f4f	d0 0a		bne $8f5b			bne 	HelperValueError 			; if not, it's a float.
.8f51	60		rts				rts
.8f52					EvaluateUnsignedInteger:
.8f52	20 49 8f	jsr $8f49			jsr 	EvaluateInteger 			; check integer is +ve
.8f55	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f58	30 01		bmi $8f5b			bmi 	HelperValueError
.8f5a	60		rts				rts
.8f5b					HelperValueError:
.8f5b	4c 57 9a	jmp $9a57			jmp 	ArgumentError
.8f5e					Evaluate16BitInteger:
.8f5e	20 52 8f	jsr $8f52			jsr	 	EvaluateUnsignedInteger		; get integer
.8f61	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8f64	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f67	d0 f2		bne $8f5b			bne 	HelperValueError
.8f69	60		rts				rts
.8f6a					Evaluate8BitInteger:
.8f6a	20 52 8f	jsr $8f52			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8f6d	d0 ec		bne $8f5b			bne 	HelperValueError
.8f6f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8f72	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f75	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8f78	d0 e1		bne $8f5b			bne 	HelperValueError
.8f7a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.99fa					Multiply8x8:
.99fa	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.99fb	85 36		sta $36			  	sta 	zTemp0
.99fd	86 37		stx $37				stx 	zTemp0+1
.99ff	a9 00		lda #$00			lda 	#0
.9a01	a2 08		ldx #$08			ldx 	#8
.9a03					_M88Loop:
.9a03	90 03		bcc $9a08			bcc 	_M88NoAdd
.9a05	18		clc				clc
.9a06	65 37		adc $37				adc 	zTemp0+1
.9a08					_M88NoAdd:
.9a08	6a		ror a				ror 	a
.9a09	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9a0b	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9a0c	d0 f5		bne $9a03			bne 	_M88Loop
.9a0e	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9a10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8f7e					NSMNegate:
.8f7e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f81	49 80		eor #$80			eor 	#NSBIsNegative
.8f83	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f86	60		rts				rts
.8f87					NSMNegateMantissa:
.8f87	38		sec				sec
.8f88	a9 00		lda #$00			lda 	#0
.8f8a	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8f8d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f90	a9 00		lda #$00			lda 	#0
.8f92	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8f95	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f98	a9 00		lda #$00			lda 	#0
.8f9a	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8f9d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fa0	a9 00		lda #$00			lda 	#0
.8fa2	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8fa5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fa8	60		rts				rts
.8fa9					NSMShiftUpTwo:
.8fa9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8fac	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8faf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fb2	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8fb5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8fb8	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8fbb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8fbe	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8fc1	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8fc4	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8fc7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8fca	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8fcd	60		rts				rts
.8fce					NSMSetZeroMantissaOnly:
.8fce	a9 00		lda #$00			lda 	#0
.8fd0	80 08		bra $8fda			bra 	NSMSetMantissa
.8fd2					NSMSetZero:
.8fd2	a9 00		lda #$00			lda 	#0
.8fd4					NSMSetByte:
.8fd4	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8fd7	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8fda					NSMSetMantissa:
.8fda	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8fdd	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8fe0	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8fe3	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8fe6	60		rts				rts
.8fe7					NSMShiftLeft:
.8fe7	18		clc				clc
.8fe8					NSMRotateLeft:
.8fe8	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8feb	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8fee	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8ff1	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8ff4	60		rts				rts
.8ff5					NSMShiftRight:
.8ff5	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8ff8	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8ffb	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8ffe	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9001	60		rts				rts
.9002					NSMIsZero:
.9002	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9005	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9008	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.900b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.900e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9a11					DecimalScalarTable:
>9a11	66 66 66 66				.dword $66666666 ; 0.1
>9a15	de					.byte $de
>9a16	1f 85 eb 51				.dword $51eb851f ; 0.01
>9a1a	db					.byte $db
>9a1b	4c 37 89 41				.dword $4189374c ; 0.001
>9a1f	d8					.byte $d8
>9a20	ac 8b db 68				.dword $68db8bac ; 0.0001
>9a24	d4					.byte $d4
>9a25	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9a29	d1					.byte $d1
>9a2a	83 de 1b 43				.dword $431bde83 ; 1e-06
>9a2e	ce					.byte $ce
>9a2f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9a33	ca					.byte $ca
>9a34	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9a38	c7					.byte $c7
>9a39	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9a3d	c4					.byte $c4
>9a3e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9a42	c0					.byte $c0
>9a43	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9a47	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9a48					SyntaxError:
.9a48	a9 02		lda #$02		lda	#2
.9a4a	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9a4d					RangeError:
.9a4d	a9 04		lda #$04		lda	#4
.9a4f	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9a52					TypeError:
.9a52	a9 05		lda #$05		lda	#5
.9a54	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9a57					ArgumentError:
.9a57	a9 07		lda #$07		lda	#7
.9a59	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9a5c					NotDoneError:
.9a5c	a9 0c		lda #$0c		lda	#12
.9a5e	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9a61					ErrorText:
>9a61	42 72 65 61 6b 00			.text	"Break",0
>9a67	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9a6f	72 72 6f 72 00
>9a74	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9a7c	20 62 79 20 7a 65 72 6f 00
>9a85	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9a8d	61 6e 67 65 00
>9a92	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9a9a	6d 61 74 63 68 00
>9aa0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9aa8	65 6d 6f 72 79 00
>9aae	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ab6	61 72 67 75 6d 65 6e 74 00
>9abf	53 74 6f 70 00				.text	"Stop",0
>9ac4	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9acc	6f 6f 20 6c 6f 6e 67 00
>9ad4	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9adc	6e 20 66 61 69 6c 65 64 00
>9ae5	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9aed	61 74 61 00
>9af1	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9af9	65 6e 74 65 64 00
>9aff	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9b07	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9b13	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9b1b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9b28	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9b30	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9b3d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9b45	68 6f 75 74 20 57 68 69 6c 65 00
>9b50	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9b58	68 6f 75 74 20 46 6f 72 00
>9b61	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9b69	61 63 6b 20 66 75 6c 6c 00
>9b72	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9b7a	75 63 74 75 72 65 00
>9b81	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9b89	77 69 74 68 6f 75 74 20 63 61 6c 6c 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.900f					StackOpen:
.900f	48		pha				pha 								; save frame byte
.9010	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9012	0a		asl a				asl 	a 							; claim twice this for storage
.9013	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9015	38		sec				sec 								; so basically subtracting from
.9016	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9018	85 34		sta $34				sta 	basicStack
.901a	b0 08		bcs $9024			bcs 	_SONoBorrow
.901c	c6 35		dec $35				dec 	basicStack+1
.901e	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9020	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9022	90 04		bcc $9028			bcc 	_SOMemory
.9024					_SONoBorrow:
.9024	68		pla				pla 								; get marker back and write at TOS
.9025	92 34		sta ($34)			sta 	(basicStack)
.9027	60		rts				rts
.9028					_SOMemory:
.9028							ERR_STACK
.9028					StackClose:
.9028	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.902a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.902c	0a		asl a				asl 	a 							; claim twice this.
.902d	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.902f	85 34		sta $34				sta 	basicStack
.9031	90 02		bcc $9035			bcc 	_SCExit
.9033	e6 35		inc $35				inc 	basicStack+1
.9035					_SCExit:
.9035	60		rts				rts
.9036					StackCheckFrame:
.9036	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9038	29 f0		and #$f0			and 	#$F0 						; check type bits
.903a	d0 01		bne $903d			bne 	_SCFError 					; different, we have structures mixed up
.903c	60		rts				rts
.903d					_SCFError:
.903d	8a		txa				txa 								; report error X
.903e	4c 2b 85	jmp $852b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9041					STKSaveCodePosition:
.9041	5a		phy				phy
.9042	98		tya				tya 								; save Y
.9043	a0 05		ldy #$05			ldy 	#5
.9045	91 34		sta ($34),y			sta 	(basicStack),y
.9047	88		dey				dey 								; save Code Pointer
.9048					_STKSaveLoop:
.9048	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.904b	91 34		sta ($34),y			sta 	(basicStack),y
.904d	88		dey				dey
.904e	d0 f8		bne $9048			bne 	_STKSaveLoop
.9050	7a		ply				ply
.9051	60		rts				rts
.9052					STKLoadCodePosition:
.9052	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9054					_STKLoadLoop:
.9054	b1 34		lda ($34),y			lda 	(basicStack),y
.9056	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9059	c8		iny				iny
.905a	c0 05		cpy #$05			cpy 	#5
.905c	d0 f6		bne $9054			bne 	_STKLoadLoop
.905e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9060	a8		tay				tay
.9061	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9062					StackReset:
.9062	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9064	85 34		sta $34				sta 	0+basicStack
.9066	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9068	85 35		sta $35				sta 	1+basicStack
.906a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.906c	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.906e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9b96					StringConcrete:
.9b96	5a		phy				phy 								; save position on stack
.9b97	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9b9a	85 38		sta $38				sta 	zTemp1
.9b9c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9b9f	85 39		sta $39				sta 	zTemp1+1
.9ba1	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9ba3					_SALength:
.9ba3	c8		iny				iny
.9ba4	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ba6	d0 fb		bne $9ba3			bne 	_SALength
.9ba8	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9baa	b0 3f		bcs $9beb			bcs 	_SALengthError
.9bac	98		tya				tya 				 				; length of the new string
.9bad	18		clc				clc
.9bae	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9bb0	90 02		bcc $9bb4			bcc 	_SAHaveLength
.9bb2	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9bb4					_SAHaveLength:
.9bb4	48		pha				pha 								; save length.
.9bb5	38		sec				sec
.9bb6	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9bb8	6d 0e 07	adc $070e			adc 	StringMemory
.9bbb	8d 0e 07	sta $070e			sta 	StringMemory
.9bbe	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9bc0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9bc3	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9bc5	6d 0f 07	adc $070f			adc 	StringMemory+1
.9bc8	8d 0f 07	sta $070f			sta 	StringMemory+1
.9bcb	85 3b		sta $3b				sta 	zTemp2+1
.9bcd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9bd0	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9bd1	38		sec				sec
.9bd2	e9 03		sbc #$03			sbc 	#3
.9bd4	92 3a		sta ($3a)			sta 	(zTemp2)
.9bd6	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9bd8	a0 01		ldy #$01			ldy 	#1
.9bda	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9bdc					_SACopyNewString:
.9bdc	a0 00		ldy #$00			ldy 	#0
.9bde					_SACopyNSLoop:
.9bde	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9be0	c8		iny				iny 								; write two on in string storage
.9be1	c8		iny				iny
.9be2	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9be4	88		dey				dey 								; this makes it one one.
.9be5	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9be7	d0 f5		bne $9bde			bne 	_SACopyNSLoop
.9be9	7a		ply				ply
.9bea	60		rts				rts
.9beb					_SALengthError:
.9beb	a9 09		lda #$09		lda	#9
.9bed	4c 2b 85	jmp $852b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9bf0					StringSystemInitialise:
.9bf0	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9bf2	8d 0e 07	sta $070e			sta 	0+StringMemory
.9bf5	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9bf7	8d 0f 07	sta $070f			sta 	1+StringMemory
.9bfa	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9bfd	60		rts				rts
.9bfe					StringSpaceInitialise:
.9bfe	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9c00	8d 10 07	sta $0710			sta 	StringInitialised
.9c03	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9c06	8d 11 07	sta $0711			sta 	StringTempPointer
.9c09	ad 0f 07	lda $070f			lda 	StringMemory+1
.9c0c	3a		dec a				dec 	a
.9c0d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c10	60		rts				rts
.9c11					StringTempAllocate:
.9c11	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9c13	b0 35		bcs $9c4a			bcs 	_STALength
.9c15	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9c18	30 05		bmi $9c1f			bmi 	_STAAllocate
.9c1a	48		pha				pha 								; save value to subtract.
.9c1b	20 fe 9b	jsr $9bfe			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9c1e	68		pla				pla 								; restore it
.9c1f					_STAAllocate:
.9c1f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9c21	18		clc				clc  								; deliberate allows one more
.9c22	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9c25	8d 11 07	sta $0711			sta 	StringTempPointer
.9c28	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9c2b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9c2d	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9c30	69 ff		adc #$ff			adc 	#$FF
.9c32	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c35	85 3d		sta $3d				sta 	zsTemp+1
.9c37	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c3a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9c3d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9c40	a9 10		lda #$10			lda 	#NSTString
.9c42	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9c45	a9 00		lda #$00			lda 	#0 							; clear the target string
.9c47	92 3c		sta ($3c)			sta 	(zsTemp)
.9c49	60		rts				rts
.9c4a					_STALength:
.9c4a	a9 09		lda #$09		lda	#9
.9c4c	4c 2b 85	jmp $852b		jmp	ErrorHandler
.9c4f					StringTempWrite:
.9c4f	48		pha				pha
.9c50	92 3c		sta ($3c)			sta 	(zsTemp)
.9c52	e6 3c		inc $3c				inc 	zsTemp
.9c54	d0 02		bne $9c58			bne 	_STWNoCarry
.9c56	e6 3d		inc $3d				inc 	zsTemp+1
.9c58					_STWNoCarry:
.9c58	a9 00		lda #$00			lda 	#0
.9c5a	92 3c		sta ($3c)			sta 	(zsTemp)
.9c5c	68		pla				pla
.9c5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.906f					BackloadProgram:
.906f	a2 ff		ldx #$ff			ldx 	#$FF
.9071	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9074	20 9e 90	jsr $909e			jsr 	BLReadByte
.9077	30 1e		bmi $9097			bmi 	_BPExit
.9079					_BPCopy:
.9079	e8		inx				inx  								; copy byte in
.907a	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.907d	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.9080	20 9e 90	jsr $909e			jsr 	BLReadByte 					; read next byte
.9083	30 0a		bmi $908f			bmi 	_BPEndLine 					; -ve = EOL
.9085	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9087	d0 02		bne $908b			bne 	_BPNotTab
.9089	a9 20		lda #$20			lda 	#' '
.908b					_BPNotTab:
.908b	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.908d	b0 ea		bcs $9079			bcs 	_BPCopy
.908f					_BPEndLine:
.908f	20 68 92	jsr $9268			jsr 	TokeniseLine 				; tokenise the line.
.9092	20 f4 94	jsr $94f4			jsr 	MemoryAppend 				; append to current program
.9095	80 d8		bra $906f			bra 	BackloadProgram
.9097					_BPExit:
.9097	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.909a	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.909d	60		rts				rts
.909e					BLReadByte:
.909e					_BLLoad:
.909e	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.90a1	ee 9f 90	inc $909f			inc 	_BLLoad+1
.90a4	d0 03		bne $90a9			bne 	_BLNoCarry
.90a6	ee a0 90	inc $90a0			inc 	_BLLoad+2
.90a9					_BLNoCarry:
.90a9	c9 00		cmp #$00			cmp 	#0
.90ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.90ac					TokeniseSearchTable:
.90ac	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.90ae	85 36		sta $36				sta 	zTemp0
.90b0	a0 00		ldy #$00			ldy 	#0
.90b2	a9 80		lda #$80			lda 	#$80 						; token #
.90b4	85 38		sta $38				sta 	zTemp1
.90b6					_TSTLoop:
.90b6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.90b8	30 49		bmi $9103			bmi 	_TSTFail 					; -ve = end of table
.90ba	f0 2e		beq $90ea			beq 	_TSTNext 					; zero, check next it's a dummy
.90bc	c8		iny				iny 								; get the hash
.90bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.90bf	88		dey				dey
.90c0	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.90c3	d0 25		bne $90ea			bne 	_TSTNext
.90c5	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.90c8	38		sec				sec
.90c9	ed 00 07	sbc $0700			sbc 	identStart
.90cc	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.90ce	d0 1a		bne $90ea			bne 	_TSTNext
.90d0	5a		phy				phy 								; save Y , we might fail
.90d1	c8		iny				iny 								; point to text
.90d2	c8		iny				iny
.90d3	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.90d6					_TSTCompareName:
.90d6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.90d9	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.90db	d0 0c		bne $90e9			bne 	_TSTNextPullY 				; fail, pullY and do next
.90dd	e8		inx				inx
.90de	c8		iny				iny
.90df	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.90e2	d0 f2		bne $90d6			bne 	_TSTCompareName
.90e4	7a		ply				ply 								; throw Y
.90e5	a5 38		lda $38				lda 	zTemp1 						; get token #
.90e7	38		sec				sec 								; return with CS = passed.
.90e8	60		rts				rts
.90e9					_TSTNextPullY:
.90e9	7a		ply				ply 								; restore current, fall through.
.90ea					_TSTNext:
.90ea	e6 38		inc $38				inc 	zTemp1 						; token counter
.90ec	98		tya				tya
.90ed	18		clc				clc
.90ee	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.90f0	1a		inc a				inc 	a 							; +1
.90f1	1a		inc a				inc 	a 							; +2
.90f2	a8		tay				tay
.90f3	10 c1		bpl $90b6			bpl 	_TSTLoop 					; if Y < $80 loop back
.90f5	98		tya				tya 								; add Y to zTemp0 and reset Y
.90f6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.90f8	18		clc				clc  								; but have tables > 255 bytes
.90f9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.90fb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.90fd	90 b7		bcc $90b6			bcc 	_TSTLoop
.90ff	e6 37		inc $37				inc 	zTemp0+1
.9101	80 b3		bra $90b6			bra 	_TSTLoop
.9103					_TSTFail:
.9103	18		clc				clc
.9104	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9105					KeywordSet0:
>9105	00 65					.text	0,$65,""               ; $80 !0:EOF
>9107	00 58					.text	0,$58,""               ; $81 !1:SH1
>9109	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>910b	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9111	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9119	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>911f	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9126	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>912d	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9134	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>913a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9142	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>914a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9150	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9157	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>915d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9165	28
>9166	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>916c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9172	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9178	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>917f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9185	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>918b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9190	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9194	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>919a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>91a2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>91a9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>91b0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>91b8	43
>91b9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>91bf	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>91c5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>91cc	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>91d2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>91d8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>91dd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>91e3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>91e8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>91f0	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>91f6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>91fd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9203	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9208	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>920f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9215	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>921a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9222	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9226	ff					.text	$FF
.9227					KeywordSet1:
>9227	00 65					.text	0,$65,""               ; $80 !0:EOF
>9229	00 58					.text	0,$58,""               ; $81 !1:SH1
>922b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>922d	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9235	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>923c	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9241	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9247	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>924c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9254	45
>9255	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>925a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9260	ff					.text	$FF
.9261					KeywordSet2:
>9261	00 65					.text	0,$65,""               ; $80 !0:EOF
>9263	00 58					.text	0,$58,""               ; $81 !1:SH1
>9265	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9267	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9268					TokeniseLine:
.9268	20 f0 93	jsr $93f0			jsr 	FixLineBufferCase 			; fix line case
.926b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.926d	8d 15 07	sta $0715			sta 	tokenOffset
.9270	9c 16 07	stz $0716			stz 	tokenLineNumber
.9273	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9276	a2 ff		ldx #$ff			ldx 	#$FF
.9278					_TKFindFirst:
.9278	e8		inx				inx
.9279	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.927c	f0 79		beq $92f7			beq 	_TKExit
.927e	c9 20		cmp #$20			cmp 	#' '
.9280	90 f6		bcc $9278			bcc 	_TKFindFirst
.9282	c9 30		cmp #$30			cmp 	#'0'
.9284	90 07		bcc $928d			bcc 	_TKNoLineNumber
.9286	c9 3a		cmp #$3a			cmp 	#'9'+1
.9288	b0 03		bcs $928d			bcs 	_TKNoLineNumber
.928a	20 1a 94	jsr $941a			jsr 	TokeniseExtractLineNumber
.928d					_TKNoLineNumber:
.928d					_TKTokeniseLoop:
.928d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9290	f0 65		beq $92f7			beq 	_TKExit
.9292	e8		inx				inx
.9293	c9 20		cmp #$20			cmp 	#' '
.9295	f0 f6		beq $928d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9297	ca		dex				dex 								; undo last get, A contains character, X is position.
.9298	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.929a	f0 61		beq $92fd			beq 	_TKTokeniseIdentifier
.929c	c9 41		cmp #$41			cmp 	#'A'
.929e	90 04		bcc $92a4			bcc 	_TKTokenisePunctuation
.92a0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.92a2	90 59		bcc $92fd			bcc 	_TKTokeniseIdentifier
.92a4					_TKTokenisePunctuation:
.92a4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.92a6	f0 27		beq $92cf			beq 	_TKString
.92a8	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.92aa	f0 28		beq $92d4			beq 	_TKHexConstant
.92ac	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.92ae	f0 29		beq $92d9			beq 	_TKCheckDouble
.92b0	c9 3e		cmp #$3e			cmp 	#'>'
.92b2	f0 25		beq $92d9			beq 	_TKCheckDouble
.92b4					_TKStandardPunctuation:
.92b4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.92b7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.92b9	90 0e		bcc $92c9			bcc 	_TKNoShift
.92bb	48		pha				pha 								; save
.92bc	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.92be	85 36		sta $36				sta 	zTemp0
.92c0	68		pla				pla
.92c1	29 20		and #$20			and 	#32 						; bit 5
.92c3	4a		lsr a				lsr 	a 							; shift into bit 3
.92c4	4a		lsr a				lsr 	a
.92c5	05 36		ora $36				ora 	zTemp0
.92c7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.92c9					_TKNoShift:
.92c9	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte 			; write the punctuation character
.92cc	e8		inx				inx 								; consume the character
.92cd	80 be		bra $928d			bra 	_TKTokeniseLoop 			; and loop round again.
.92cf					_TKString:
.92cf	20 7f 93	jsr $937f			jsr 	TokeniseString
.92d2	80 b9		bra $928d			bra 	_TKTokeniseLoop
.92d4					_TKHexConstant:
.92d4	20 ba 93	jsr $93ba			jsr 	TokeniseHexConstant
.92d7	80 b4		bra $928d			bra 	_TKTokeniseLoop
.92d9					_TKCheckDouble:
.92d9	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.92dc	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.92de	90 d4		bcc $92b4			bcc 	_TKStandardPunctuation
.92e0	c9 3f		cmp #$3f			cmp 	#'>'+1
.92e2	b0 d0		bcs $92b4			bcs 	_TKStandardPunctuation
.92e4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.92e7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.92e9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.92ea	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.92ed	38		sec				sec
.92ee	e9 3c		sbc #$3c			sbc 	#'<'
.92f0	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.92f3	e8		inx				inx 								; consume both
.92f4	e8		inx				inx
.92f5	80 96		bra $928d			bra 	_TKTokeniseLoop
.92f7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.92f9	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.92fc	60		rts				rts
.92fd					_TKTokeniseIdentifier:
.92fd	8e 00 07	stx $0700			stx 	identStart 					; save start
.9300	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9303					_TKCheckLoop:
.9303	e8		inx				inx 								; look at next, we know first is identifier.
.9304	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9307	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9309	f0 f8		beq $9303			beq 	_TKCheckLoop
.930b	c9 30		cmp #$30			cmp	 	#"0"
.930d	90 0c		bcc $931b			bcc 	_TKEndIdentifier
.930f	c9 3a		cmp #$3a			cmp 	#"9"+1
.9311	90 f0		bcc $9303			bcc 	_TKCheckLoop
.9313	c9 41		cmp #$41			cmp	 	#"A"
.9315	90 04		bcc $931b			bcc 	_TKEndIdentifier
.9317	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9319	90 e8		bcc $9303			bcc 	_TKCheckLoop
.931b					_TKEndIdentifier:
.931b	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.931e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9320	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9322	f0 06		beq $932a			beq 	_TKHasTypeCharacter
.9324	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9326	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9328	d0 07		bne $9331			bne 	_TKNoTypeCharacter
.932a					_TKHasTypeCharacter:
.932a	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.932d	e8		inx				inx 								; read next
.932e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9331					_TKNoTypeCharacter:
.9331	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9333	d0 09		bne $933e			bne 	_TKNoArray
.9335	e8		inx				inx 								; skip the (
.9336	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9339	09 04		ora #$04			ora 	#$04
.933b	8d 04 07	sta $0704			sta 	identTypeByte
.933e					_TKNoArray:
.933e	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9341	20 db 93	jsr $93db			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9344	a0 91		ldy #$91			ldy 	#(KeywordSet0) >> 8
.9346	a9 05		lda #$05			lda 	#(KeywordSet0) & $FF
.9348	20 ac 90	jsr $90ac			jsr 	TokeniseSearchTable
.934b	a2 00		ldx #$00			ldx 	#0
.934d	b0 1f		bcs $936e			bcs 	_TKFoundToken
.934f	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.9351	a9 27		lda #$27			lda 	#(KeywordSet1) & $FF
.9353	20 ac 90	jsr $90ac			jsr 	TokeniseSearchTable
.9356	a2 81		ldx #$81			ldx 	#$81
.9358	b0 14		bcs $936e			bcs 	_TKFoundToken
.935a	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.935c	a9 27		lda #$27			lda 	#(KeywordSet1) & $FF
.935e	20 ac 90	jsr $90ac			jsr 	TokeniseSearchTable
.9361	a2 82		ldx #$82			ldx 	#$82
.9363	b0 09		bcs $936e			bcs 	_TKFoundToken
.9365	20 6b 94	jsr $946b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9368	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.936b	4c 8d 92	jmp $928d			jmp 	_TKTokeniseLoop 			; and go round again.
.936e					_TKFoundToken:
.936e	48		pha				pha 								; save token
.936f	8a		txa				txa 								; shift in X, is there one ?
.9370	f0 03		beq $9375			beq 	_TKNoTShift
.9372	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte 			; if so, write it out
.9375					_TKNoTShift:
.9375	68		pla				pla 								; restore and write token
.9376	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.9379	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.937c	4c 8d 92	jmp $928d			jmp 	_TKTokeniseLoop 			; and go round again.
.937f					TokeniseString:
.937f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9381	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.9384	e8		inx				inx									; start of quoted string.
.9385	da		phx				phx 								; push start of string on top
.9386	ca		dex				dex
.9387					_TSFindEnd:
.9387	e8		inx				inx
.9388	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.938b	f0 04		beq $9391			beq 	_TSEndOfString
.938d	c9 22		cmp #$22			cmp 	#'"'
.938f	d0 f6		bne $9387			bne 	_TSFindEnd
.9391					_TSEndOfString:
.9391	7a		ply				ply  								; so now Y is first character, X is character after end.
.9392	48		pha				pha 								; save terminating character
.9393	20 9b 93	jsr $939b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9396	68		pla				pla 								; terminating character
.9397	f0 01		beq $939a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9399	e8		inx				inx
.939a					_TSNotQuote:
.939a	60		rts				rts
.939b					TOWriteBlockXY:
.939b	86 36		stx $36				stx 	zTemp0 						; write end character
.939d	98		tya				tya
.939e	49 ff		eor #$ff			eor 	#$FF
.93a0	38		sec				sec
.93a1	65 36		adc $36				adc 	zTemp0
.93a3	1a		inc a				inc 	a 							; one extra for NULL
.93a4	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.93a7					_TOBlockLoop:
.93a7	c4 36		cpy $36				cpy 	zTemp0
.93a9	f0 09		beq $93b4			beq 	_TOBlockExit
.93ab	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.93ae	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.93b1	c8		iny				iny
.93b2	80 f3		bra $93a7			bra 	_TOBlockLoop
.93b4					_TOBlockExit:
.93b4	a9 00		lda #$00			lda 	#0
.93b6	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.93b9	60		rts				rts
.93ba					TokeniseHexConstant:
.93ba	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.93bc	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.93bf	e8		inx				inx									; start of quoted string.
.93c0	da		phx				phx 								; push start of constant on top
.93c1	ca		dex				dex
.93c2					_THFindLoop:
.93c2	e8		inx				inx
.93c3	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93c6	c9 30		cmp #$30			cmp 	#"0"
.93c8	90 0c		bcc $93d6			bcc 	_THFoundEnd
.93ca	c9 3a		cmp #$3a			cmp 	#"9"+1
.93cc	90 f4		bcc $93c2			bcc 	_THFindLoop
.93ce	c9 41		cmp #$41			cmp 	#"A"
.93d0	90 04		bcc $93d6			bcc 	_THFoundEnd
.93d2	c9 47		cmp #$47			cmp 	#"F"+1
.93d4	90 ec		bcc $93c2			bcc 	_THFindLoop
.93d6					_THFoundEnd:
.93d6	7a		ply				ply 								; restore start
.93d7	20 9b 93	jsr $939b			jsr 	TOWriteBlockXY 				; output the block
.93da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.93db					TokeniseCalculateHash:
.93db	da		phx				phx
.93dc	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.93df	a9 00		lda #$00			lda 	#0
.93e1					_TCHLoop:
.93e1	18		clc				clc
.93e2	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.93e5	e8		inx				inx
.93e6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.93e9	d0 f6		bne $93e1			bne 	_TCHLoop
.93eb	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.93ee	fa		plx				plx
.93ef	60		rts				rts
.93f0					FixLineBufferCase:
.93f0	a2 00		ldx #$00			ldx 	#0
.93f2					_FLBCLoop:
.93f2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.93f5	f0 22		beq $9419			beq 	_FLBCExit 					; end of string.
.93f7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.93f9	f0 11		beq $940c			beq 	_FLBCInQuotes
.93fb	e8		inx				inx
.93fc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.93fe	90 f2		bcc $93f2			bcc 	_FLBCLoop
.9400	c9 7b		cmp #$7b			cmp 	#'z'+1
.9402	b0 ee		bcs $93f2			bcs 	_FLBCLoop
.9404	38		sec				sec 								; make U/C
.9405	e9 20		sbc #$20			sbc 	#32
.9407	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.940a	80 e6		bra $93f2			bra 	_FLBCLoop
.940c					_FLBCInQuotes:
.940c	e8		inx				inx 								; advance
.940d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9410	f0 07		beq $9419			beq 	_FLBCExit 					; exit on EOS
.9412	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9414	d0 f6		bne $940c			bne 	_FLBCInQuotes
.9416	e8		inx				inx 								; skip over it
.9417	80 d9		bra $93f2			bra 	_FLBCLoop
.9419					_FLBCExit:
.9419	60		rts				rts
.941a					TokeniseExtractLineNumber:
.941a	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.941d	48		pha				pha
.941e	ad 16 07	lda $0716			lda 	tokenLineNumber
.9421	48		pha				pha
.9422	20 58 94	jsr $9458			jsr 	_TELNTimes2 				; line # x 4
.9425	20 58 94	jsr $9458			jsr 	_TELNTimes2 				; line # x 2
.9428	18		clc				clc 								; add stacked value
.9429	68		pla				pla
.942a	6d 16 07	adc $0716			adc 	tokenLineNumber
.942d	8d 16 07	sta $0716			sta 	tokenLineNumber
.9430	68		pla				pla
.9431	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9434	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9437	20 58 94	jsr $9458			jsr 	_TELNTimes2 				; line # x 10
.943a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.943d	e8		inx				inx
.943e	29 0f		and #$0f			and 	#15 						; add to line #
.9440	18		clc				clc
.9441	6d 16 07	adc $0716			adc 	tokenLineNumber
.9444	8d 16 07	sta $0716			sta 	tokenLineNumber
.9447	90 03		bcc $944c			bcc 	_TLENNoCarry
.9449	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.944c					_TLENNoCarry:
.944c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.944f	c9 30		cmp #$30			cmp 	#'0'
.9451	90 04		bcc $9457			bcc 	_TLENExit
.9453	c9 3a		cmp #$3a			cmp 	#'9'+1
.9455	90 c3		bcc $941a			bcc 	TokeniseExtractLineNumber
.9457					_TLENExit:
.9457	60		rts				rts
.9458					_TELNTimes2:
.9458	0e 16 07	asl $0716			asl 	tokenLineNumber
.945b	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.945e	60		rts				rts
.945f					TokeniseWriteByte:
.945f	da		phx				phx
.9460	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9463	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9466	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9469	fa		plx				plx
.946a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.946b					CheckCreateVariableRecord:
.946b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.946d	85 36		sta $36				sta 	0+zTemp0
.946f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9471	85 37		sta $37				sta 	1+zTemp0
.9473					_CCVSearch:
.9473	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9475	f0 2c		beq $94a3			beq 	_CCVFail
.9477	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9479	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.947b	cd 03 07	cmp $0703			cmp 	identHash
.947e	d0 16		bne $9496			bne 	_CCVNext
.9480	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9482	ae 00 07	ldx $0700			ldx 	identStart
.9485					_CCVCompare:
.9485	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9488	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.948a	e8		inx				inx 								; advance pointers
.948b	c8		iny				iny
.948c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.948d	d0 07		bne $9496			bne 	_CCVNext  					; didn't match go to next.
.948f	90 f4		bcc $9485			bcc 	_CCVCompare 				; not finished yet.
.9491	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9494	f0 41		beq $94d7			beq 	_CCVFound 					; yes, we were successful
.9496					_CCVNext:
.9496	18		clc				clc
.9497	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9499	65 36		adc $36				adc 	zTemp0
.949b	85 36		sta $36				sta 	zTemp0
.949d	90 d4		bcc $9473			bcc 	_CCVSearch
.949f	e6 37		inc $37				inc 	zTemp0+1
.94a1	80 d0		bra $9473			bra 	_CCVSearch
.94a3					_CCVFail:
.94a3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.94a5	ad 03 07	lda $0703			lda 	identHash
.94a8	91 36		sta ($36),y			sta 	(zTemp0),y
.94aa	c8		iny				iny 								; offset 2 is the type byte
.94ab	ad 04 07	lda $0704			lda 	identTypeByte
.94ae	91 36		sta ($36),y			sta 	(zTemp0),y
.94b0	c8		iny				iny
.94b1					_CCVData:
.94b1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.94b3	91 36		sta ($36),y			sta 	(zTemp0),y
.94b5	c8		iny				iny
.94b6	c0 08		cpy #$08			cpy 	#8
.94b8	90 f7		bcc $94b1			bcc 	_CCVData
.94ba	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.94bd					_CCVCopyName:
.94bd	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.94c0	91 36		sta ($36),y			sta 	(zTemp0),y
.94c2	e8		inx				inx
.94c3	c8		iny				iny
.94c4	ec 02 07	cpx $0702			cpx 	identTypeEnd
.94c7	d0 f4		bne $94bd			bne 	_CCVCopyName
.94c9	98		tya				tya 								; patch offset
.94ca	92 36		sta ($36)			sta 	(zTemp0)
.94cc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.94ce	91 36		sta ($36),y			sta 	(zTemp0),y
.94d0	88		dey				dey
.94d1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.94d3	09 80		ora #$80			ora 	#$80
.94d5	91 36		sta ($36),y			sta 	(zTemp0),y
.94d7					_CCVFound:
.94d7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.94d9	38		sec				sec
.94da	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.94dc	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.94de	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.94e1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.94e3	20 5f 94	jsr $945f			jsr 	TokeniseWriteByte
.94e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9c5e					MemoryPeek:
.9c5e	b2 36		lda ($36)			lda 	(zTemp0)
.9c60	60		rts				rts
.9c61					MemoryPoke:
.9c61	92 36		sta ($36)			sta 	(zTemp0)
.9c63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9c64					PrintHex:
.9c64	48		pha				pha
.9c65	4a		lsr a				lsr 	a
.9c66	4a		lsr a				lsr 	a
.9c67	4a		lsr a				lsr 	a
.9c68	4a		lsr a				lsr 	a
.9c69	20 6d 9c	jsr $9c6d			jsr 	_PrintNibble
.9c6c	68		pla				pla
.9c6d					_PrintNibble:
.9c6d	29 0f		and #$0f			and 	#15
.9c6f	c9 0a		cmp #$0a			cmp 	#10
.9c71	90 02		bcc $9c75			bcc 	_NoShift
.9c73	69 06		adc #$06			adc 	#6
.9c75					_NoShift:
.9c75	69 30		adc #$30			adc 	#48
.9c77	4c 7a 9c	jmp $9c7a			jmp 	EXTPrintCharacter
.9c7a					EXTPrintCharacter:
.9c7a	48		pha				pha
.9c7b	da		phx				phx
.9c7c	5a		phy				phy
.9c7d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9c80	7a		ply				ply
.9c81	fa		plx				plx
.9c82	68		pla				pla
.9c83	60		rts				rts
.9c84					EXTInputSingleCharacter:
.9c84	da		phx				phx
.9c85	5a		phy				phy
.9c86					_EISCWait:
.9c86	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9c89	c9 00		cmp #$00			cmp 	#0
.9c8b	f0 f9		beq $9c86			beq 	_EISCWait
.9c8d	7a		ply				ply
.9c8e	fa		plx				plx
.9c8f	60		rts				rts
.9c90					EXTInputLine:
.9c90	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9c92					_ILLoop:
.9c92	da		phx				phx 								; read character in
.9c93	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9c96	fa		plx				plx
.9c97	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9c99	f0 12		beq $9cad			beq 	_ILBackspace
.9c9b	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9c9d	f0 15		beq $9cb4			beq 	_ILExit
.9c9f	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9ca1	90 ef		bcc $9c92			bcc 	_ILLoop
.9ca3	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9ca5	f0 eb		beq $9c92			beq 	_ILLoop
.9ca7	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9caa	e8		inx				inx
.9cab	80 e5		bra $9c92			bra 	_ILLoop
.9cad					_ILBackspace:
.9cad	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9caf	f0 e1		beq $9c92			beq 	_ILLoop
.9cb1	ca		dex				dex 								; back one.
.9cb2	80 de		bra $9c92			bra 	_ILLoop
.9cb4					_ILExit:
.9cb4	20 7a 9c	jsr $9c7a			jsr 	EXTPrintCharacter
.9cb7	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9cba	60		rts				rts
.9cbb					EXTBreakCheck:
.9cbb	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.94e7					MemoryNew:
.94e7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94e9	85 30		sta $30				sta 	codePtr
.94eb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94ed	85 31		sta $31				sta 	codePtr+1
.94ef	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.94f1	92 30		sta ($30)			sta 	(codePtr)
.94f3	60		rts				rts
.94f4					MemoryAppend:
.94f4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94f6	85 30		sta $30				sta 	codePtr
.94f8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94fa	85 31		sta $31				sta 	codePtr+1
.94fc					_MAFindEnd:
.94fc	b2 30		lda ($30)			lda 	(codePtr)
.94fe	f0 0d		beq $950d			beq 	_MAFoundEnd
.9500	18		clc				clc
.9501	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9503	65 30		adc $30				adc 	codePtr
.9505	85 30		sta $30				sta 	codePtr
.9507	90 02		bcc $950b			bcc 	_CREExit
.9509	e6 31		inc $31				inc 	codePtr+1
.950b					_CREExit:
.950b	80 ef		bra $94fc			bra 	_MAFindEnd
.950d					_MAFoundEnd:
.950d	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9510	c0 04		cpy #$04			cpy 	#4 							; blank line
.9512	f0 0e		beq $9522			beq 	_MANoLine
.9514	a9 00		lda #$00			lda 	#0 							; end of program
.9516	91 30		sta ($30),y			sta 	(codePtr),y
.9518					_MACopy:
.9518	88		dey				dey
.9519	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.951c	91 30		sta ($30),y			sta 	(codePtr),y
.951e	c0 00		cpy #$00			cpy 	#0
.9520	d0 f6		bne $9518			bne 	_MACopy
.9522					_MANoLine:
.9522	60		rts				rts
.9523					MemoryInline:
.9523	98		tya				tya 								; put address into stack,x
.9524	18		clc				clc
.9525	65 30		adc $30				adc 	codePtr
.9527	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.952a	a5 31		lda $31				lda 	codePtr+1
.952c	69 00		adc #$00			adc 	#0
.952e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9531	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9534	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9537	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9538					MemoryTransferAX:
.9538	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.953a	86 37		stx $37				stx 	zTemp0+1
.953c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.953e	85 30		sta $30				sta 	codePtr
.9540	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9542	85 31		sta $31				sta 	codePtr+1
.9544					_MTAXLoop:
.9544	b2 30		lda ($30)			lda 	(codePtr)
.9546	f0 1d		beq $9565			beq 	_MTAXError 					; not found.
.9548	a0 01		ldy #$01			ldy 	#1 							; check LSB
.954a	b1 30		lda ($30),y			lda 	(codePtr),y
.954c	c5 36		cmp $36				cmp 	zTemp0
.954e	d0 07		bne $9557			bne 	_MTAXNext
.9550	c8		iny				iny 								; check MSB
.9551	b1 30		lda ($30),y			lda 	(codePtr),y
.9553	c5 37		cmp $37				cmp 	zTemp0+1
.9555	f0 0d		beq $9564			beq 	_MTAXExit 					; success !
.9557					_MTAXNext:
.9557	18		clc				clc
.9558	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.955a	65 30		adc $30				adc 	codePtr
.955c	85 30		sta $30				sta 	codePtr
.955e	90 02		bcc $9562			bcc 	_CREExit
.9560	e6 31		inc $31				inc 	codePtr+1
.9562					_CREExit:
.9562	80 e0		bra $9544			bra 	_MTAXLoop
.9564					_MTAXExit:
.9564	60		rts				rts
.9565					_MTAXError:
.9565	a9 0d		lda #$0d		lda	#13
.9567	4c 2b 85	jmp $852b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
