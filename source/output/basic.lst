
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 19:32:04 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLEAR                            = $a9; $a9 CLEAR
=$aa					KWD_CLS                              = $aa; $aa CLS
=$ab					KWD_COLOR                            = $ab; $ab COLOR
=$ac					KWD_COLOUR                           = $ac; $ac COLOUR
=$ad					KWD_DATA                             = $ad; $ad DATA
=$ae					KWD_DIM                              = $ae; $ae DIM
=$af					KWD_DOWNTO                           = $af; $af DOWNTO
=$b0					KWD_ELSE                             = $b0; $b0 ELSE
=$b1					KWD_FROM                             = $b1; $b1 FROM
=$b2					KWD_GFX                              = $b2; $b2 GFX
=$b3					KWD_GOSUB                            = $b3; $b3 GOSUB
=$b4					KWD_GOTO                             = $b4; $b4 GOTO
=$b5					KWD_HERE                             = $b5; $b5 HERE
=$b6					KWD_IMAGE                            = $b6; $b6 IMAGE
=$b7					KWD_LET                              = $b7; $b7 LET
=$b8					KWD_LINE                             = $b8; $b8 LINE
=$b9					KWD_LOCAL                            = $b9; $b9 LOCAL
=$ba					KWD_OUTLINE                          = $ba; $ba OUTLINE
=$bb					KWD_PRINT                            = $bb; $bb PRINT
=$bc					KWD_READ                             = $bc; $bc READ
=$bd					KWD_RECT                             = $bd; $bd RECT
=$be					KWD_REM                              = $be; $be REM
=$bf					KWD_RETURN                           = $bf; $bf RETURN
=$c0					KWD_SOLID                            = $c0; $c0 SOLID
=$c1					KWD_SPRITE                           = $c1; $c1 SPRITE
=$c2					KWD_TEXT                             = $c2; $c2 TEXT
=$c3					KWD_TO                               = $c3; $c3 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 2c b4	jsr $b42c			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 38 99	jsr $9938			jsr 	PrintStringXA
.8014	20 f2 92	jsr $92f2			jsr 	NewCommand 					; erase current program
.8017	20 bd a5	jsr $a5bd			jsr 	BackloadProgram
.801a	4c 09 8c	jmp $8c09			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1873."
>8065	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 31 38 37 33 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 3d		bra $80cf			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	f0 07		beq $80bb			beq 	_GDXOkay 					; check X range
.80b4	ad 29 06	lda $0629			lda 	gxCurrentX
.80b7	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b9	b0 1e		bcs $80d9			bcs 	_GDError
.80bb					_GDXOkay:
.80bb	ad 2b 06	lda $062b			lda 	gxCurrentY
.80be	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c1	b0 16		bcs $80d9			bcs 	_GDError
.80c3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c5					_GDCopy2:
.80c5	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c8	9d 31 06	sta $0631,x			sta 	gxX0,x
.80cb	ca		dex				dex
.80cc	10 f7		bpl $80c5			bpl 	_GDCopy2
.80ce	68		pla				pla 								; get command back
.80cf					_GDExecuteA:
.80cf	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d1	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d3	b0 05		bcs $80da			bcs 	_GDError2
.80d5	aa		tax				tax
.80d6	7c df 80	jmp ($80df,x)			jmp 	(GRVectorTable,x)
.80d9					_GDError:
.80d9	68		pla				pla 								; throw command
.80da					_GDError2:
.80da	38		sec				sec
.80db	60		rts				rts
.80dc					GXMove:
.80dc	18		clc				clc
.80dd	60		rts				rts
.80de					GRUndefined:
>80de	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80df					GRVectorTable:
>80df	ae 82					.word	GXInitialise             ; $00 Initialise
>80e1	c5 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e3	0d 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e5	60 82					.word	GXClearBitmap            ; $03 Clear
>80e7	8b 84					.word	GXSetColourMode          ; $04 Colour
>80e9	4f 86					.word	GXFontHandler            ; $05 DrawFont
>80eb	97 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ed	ff 86					.word	GXSelect                 ; $07 SPRUSE
>80ef	25 87					.word	GXSelectImage            ; $08 SPRIMG
>80f1	de 80					.word	GRUndefined              ; $09
>80f3	de 80					.word	GRUndefined              ; $0a
>80f5	de 80					.word	GRUndefined              ; $0b
>80f7	de 80					.word	GRUndefined              ; $0c
>80f9	de 80					.word	GRUndefined              ; $0d
>80fb	de 80					.word	GRUndefined              ; $0e
>80fd	de 80					.word	GRUndefined              ; $0f
>80ff	dc 80					.word	GXMove                   ; $10 Move
>8101	59 83					.word	GXLine                   ; $11 Line
>8103	d4 84					.word	GXFrameRectangle         ; $12 FrameRect
>8105	d1 84					.word	GXFillRectangle          ; $13 FillRect
>8107	17 81					.word	GXFrameCircle            ; $14 FrameCircle
>8109	13 81					.word	GXFillCircle             ; $15 FillCircle
>810b	de 80					.word	GRUndefined              ; $16
>810d	de 80					.word	GRUndefined              ; $17
>810f	b9 84					.word	GXPlotPoint              ; $18 Plot
>8111	8a 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8113					GXFillCircle:
.8113	a9 ff		lda #$ff			lda 	#255
.8115	80 02		bra $8119			bra 	GXCircle
.8117					GXFrameCircle:
.8117	a9 00		lda #$00			lda 	#0
.8119					GXCircle:
.8119	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811c	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811f	f0 26		beq $8147			beq 	_GXCFail
.8121	20 8a 88	jsr $888a			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap 				; start drawing
.8127	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 4d 06	stz $064d			stz 	gxYChanged
.812d					_GXCircleDraw:
.812d	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8130	cd 4b 06	cmp $064b			cmp 	gYCentre
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4c 81	jsr $814c			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8142	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					_GXCFail:
.8147	38		sec				sec
.8148	60		rts				rts
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.815a	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815d	8d 4b 06	sta $064b			sta 	gYCentre
.8160	8e 4a 06	stx $064a			stx 	gXCentre
.8163	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 4d 06	sta $064d			sta 	gxYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 4b 06	lda $064b			lda 	gYCentre
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 4a 06	lda $064a			lda 	gXCentre
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 dd 87	jsr $87dd			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8190	85 36		sta $36				sta 	gxzTemp0
.8192	64 37		stz $37				stz 	gxzTemp0+1
.8194	26 37		rol $37				rol 	gxzTemp0+1
.8196	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 24 85	jsr $8524			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a4	8d 4b 06	sta $064b			sta 	gYCentre
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gxzTemp0
.81aa	64 37		stz $37				stz 	gxzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gxzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gxzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d0	ad 4a 06	lda $064a			lda 	gXCentre
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dd	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 4a 06	lda $064a			lda 	gXCentre
.81e4	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 4d 06	dec $064d			dec 	gxYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gxzTemp1
.81f2	85 38		sta $38				sta 	gxzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gxzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gxzTemp0+1
.8203	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gxzTemp0+1
.8207	06 36		asl $36				asl 	gxzTemp0
.8209	26 37		rol $37				rol 	gxzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gxzTemp0
.820e	65 38		adc $38				adc 	gxzTemp1
.8210	85 38		sta $38				sta 	gxzTemp1
.8212	a5 37		lda $37				lda		gxzTemp0+1
.8214	65 39		adc $39				adc 	gxzTemp1+1
.8216	85 39		sta $39				sta 	gxzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 49 06	sta $0649			sta 	gxRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 4a 06	stz $064a			stz 	gXCentre
.8231	ad 49 06	lda $0649			lda 	gxRadius
.8234	8d 4b 06	sta $064b			sta 	gYCentre
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gxzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gxzTemp0
.823f	85 38		sta $38				sta 	gxzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gxzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8263	f0 24		beq $8289			beq 	_GXCBFail
.8265	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap 				; start access
.8268	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.826a	ad 3d 06	lda $063d			lda 	gxHeight
.826d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8271					_GXCalcLastPage:
.8271	98		tya				tya 								; add to base page
.8272	18		clc				clc
.8273	6d 3b 06	adc $063b			adc 	gxBasePage
.8276	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8278					_GXClearAll:
.8278	20 8b 82	jsr $828b			jsr 	_GXClearBlock 				; clear 8k block
.827b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827d	a5 0b		lda $0b				lda 	GXEditSlot
.827f	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8282	b0 f4		bcs $8278			bcs 	_GXClearAll
.8284	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap	 			; stop access
.8287	18		clc				clc
.8288	60		rts				rts
.8289					_GXCBFail:
.8289	38		sec				sec
.828a	60		rts				rts
.828b					_GXClearBlock:
.828b	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828d	85 38		sta $38				sta 	0+gxzTemp1
.828f	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8291	85 39		sta $39				sta 	1+gxzTemp1
.8293					_GXCB0:
.8293	a5 36		lda $36				lda 	gxzTemp0
.8295	a0 00		ldy #$00			ldy 	#0
.8297					_GXCB1:
.8297	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8299	c8		iny				iny
.829a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829c	c8		iny				iny
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	d0 f2		bne $8297			bne 	_GXCB1
.82a5	e6 39		inc $39				inc 	gxzTemp1+1
.82a7	a5 39		lda $39				lda 	gxzTemp1+1
.82a9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82ab	d0 e6		bne $8293			bne 	_GXCB0
.82ad	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ae					GXInitialise:
.82ae	64 01		stz $01				stz 	1
.82b0	a9 01		lda #$01			lda 	#1
.82b2	8d 00 d0	sta $d000			sta 	$D000
.82b5	18		clc				clc
.82b6	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b9	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bc	a2 0f		ldx #$0f			ldx 	#15
.82be					_GXIClear:
.82be	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c1	ca		dex				dex
.82c2	10 fa		bpl $82be			bpl 	_GXIClear
.82c4	60		rts				rts
.82c5					GXControlBitmap:
.82c5	64 01		stz $01				stz 	1
.82c7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c9	29 01		and #$01			and 	#1 							; set bitmap flag
.82cb	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82ce	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82cf	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d6	90 02		bcc $82da			bcc 	_CBNotOn
.82d8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82da					_CBNotOn:
.82da	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dd	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82df	29 07		and #$07			and 	#7
.82e1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e6	d0 02		bne $82ea			bne 	_CBNotDefault
.82e8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ea					_CBNotDefault:
.82ea	8d 3b 06	sta $063b			sta 	gxBasePage
.82ed	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f2	8d 03 d1	sta $d103			sta 	$D103
.82f5	a5 36		lda $36				lda 	gxzTemp0
.82f7	8d 02 d1	sta $d102			sta 	$D102
.82fa	9c 01 d1	stz $d101			stz 	$D101
.82fd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ff	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8302	29 01		and #$01			and 	#1
.8304	f0 02		beq $8308			beq 	_CBHaveHeight
.8306	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8308					_CBHaveHeight
.8308	8e 3d 06	stx $063d			stx 	gxHeight
.830b	18		clc				clc
.830c	60		rts				rts
.830d					GXControlSprite:
.830d	64 01		stz $01				stz 	1
.830f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8311	29 01		and #$01			and 	#1 							; set sprites flag
.8313	8d 39 06	sta $0639			sta 	gxSpritesOn
.8316	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8317	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.831a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831e	90 02		bcc $8322			bcc 	_CSNotOn
.8320	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8322					_CSNotOn:
.8322	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8325	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8327	d0 02		bne $832b			bne 	_CSNotDefault
.8329	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832b					_CSNotDefault:
.832b	8d 3c 06	sta $063c			sta 	gxSpritePage
.832e	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8331	a5 36		lda $36				lda 	zTemp0
.8333	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8336	a5 37		lda $37				lda 	zTemp0+1
.8338	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833d					_CSClear:
.833d	9e 00 d9	stz $d900,x			stz 	$D900,x
.8340	9e 00 da	stz $da00,x			stz 	$DA00,x
.8343	ca		dex				dex
.8344	d0 f7		bne $833d			bne 	_CSClear
.8346	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8349	18		clc				clc
.834a	60		rts				rts
.834b					GXCalculateBaseAddress:
.834b	85 36		sta $36				sta 	gxzTemp0
.834d	64 37		stz $37				stz 	gxzTemp0+1
.834f	a9 05		lda #$05			lda 	#5
.8351					_GXShift:
.8351	06 36		asl $36				asl 	gxzTemp0
.8353	26 37		rol $37				rol 	gxzTemp0+1
.8355	3a		dec a				dec		a
.8356	d0 f9		bne $8351			bne 	_GXShift
.8358	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8359					GXLine:
.8359	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835c	f0 28		beq $8386			beq 	_GXLFail
.835e	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap
.8361	20 a8 88	jsr $88a8			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8364	20 2c 84	jsr $842c			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8367	20 dd 87	jsr $87dd			jsr 	GXPositionCalc 				; calculate position/offset.
.836a					_GXDrawLoop:
.836a	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836f	2d 41 06	and $0641			and 	gxANDValue
.8372	4d 40 06	eor $0640			eor 	gxEORValue
.8375	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8377	20 88 83	jsr $8388			jsr 	GXLineIsComplete 			; is the line complete ?
.837a	f0 05		beq $8381			beq 	_GXLExit
.837c	20 a3 83	jsr $83a3			jsr 	GXLineAdvance 				; code as per advance method
.837f	80 e9		bra $836a			bra 	_GXDrawLoop
.8381					_GXLExit:
.8381	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap
.8384	18		clc				clc
.8385	60		rts				rts
.8386					_GXLFail:
.8386	38		sec				sec
.8387	60		rts				rts
.8388					GXLineIsComplete:
.8388	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838b	d0 0f		bne $839c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8390	4d 35 06	eor $0635			eor 	GXX1
.8393	d0 06		bne $839b			bne 	_GXLICExit
.8395	ad 32 06	lda $0632			lda 	GXX0+1
.8398	4d 36 06	eor $0636			eor 	GXX1+1
.839b					_GXLICExit:
.839b	60		rts				rts
.839c					_GXLICCompareY:
.839c	ad 37 06	lda $0637			lda 	GXY1
.839f	4d 33 06	eor $0633			eor 	GXY0
.83a2	60		rts				rts
.83a3					GXLineAdvance:
.83a3	18		clc				clc 								; add adjust to position
.83a4	ad 52 06	lda $0652			lda 	GXPosition
.83a7	6d 53 06	adc $0653			adc 	GXAdjust
.83aa	8d 52 06	sta $0652			sta 	GXPosition
.83ad	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b0	b0 05		bcs $83b7			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b2	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b5	90 0a		bcc $83c1			bcc 	_GXLANoExtra
.83b7					_GXLAOverflow:
.83b7	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83ba	38		sec				sec 								; subtract total and write back
.83bb	ed 54 06	sbc $0654			sbc 	GXTotal
.83be	8d 52 06	sta $0652			sta 	GXPosition
.83c1					_GXLANoExtra:
.83c1	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c4	f0 0d		beq $83d3			beq 	_GXDXLarger
.83c6	20 25 84	jsr $8425			jsr 	GXIncrementY
.83c9	ad 55 06	lda $0655			lda 	GXAddSelect
.83cc	f0 10		beq $83de			beq 	_GXLAExit
.83ce	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d1	80 0b		bra $83de			bra 	_GXLAExit
.83d3					_GXDXLarger:
.83d3	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d6	ad 55 06	lda $0655			lda 	GXAddSelect
.83d9	f0 03		beq $83de			beq 	_GXLAExit
.83db	20 25 84	jsr $8425			jsr 	GXIncrementY
.83de					_GXLAExit:
.83de	60		rts				rts
.83df					GXAdjustX:
.83df	ad 51 06	lda $0651			lda 	GXDXNegative
.83e2	10 25		bpl $8409			bpl 	_GXAXRight
.83e4	ad 31 06	lda $0631			lda 	GXX0
.83e7	d0 03		bne $83ec			bne 	_GXAXNoBorrow
.83e9	ce 32 06	dec $0632			dec 	GXX0+1
.83ec					_GXAXNoBorrow:
.83ec	ce 31 06	dec $0631			dec 	GXX0
.83ef	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f2	ad 44 06	lda $0644			lda 	gsOffset
.83f5	c9 ff		cmp #$ff			cmp 	#$FF
.83f7	d0 0f		bne $8408			bne 	_GXAYExit 					; underflow
.83f9	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fb	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fd	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ff	b0 07		bcs $8408			bcs 	_GXAYExit
.8401	18		clc				clc
.8402	69 20		adc #$20			adc 	#$20 						; fix up
.8404	85 3d		sta $3d				sta 	gxzScreen+1
.8406	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8408					_GXAYExit:
.8408	60		rts				rts
.8409					_GXAXRight:
.8409	ee 31 06	inc $0631			inc 	GXX0
.840c	d0 03		bne $8411			bne 	_GXAXNoCarry
.840e	ee 32 06	inc $0632			inc 	GXX0+1
.8411					_GXAXNoCarry:
.8411	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8414	d0 0e		bne $8424			bne 	_GXAXExit 					; if not overflowed, exit.
.8416	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8418	a5 3d		lda $3d				lda 	gxzScreen+1
.841a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841c	90 06		bcc $8424			bcc 	_GXAXExit
.841e	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8424					_GXAXExit:
.8424	60		rts				rts
.8425					GXIncrementY:
.8425	ee 33 06	inc $0633			inc 	GXY0
.8428	20 33 88	jsr $8833			jsr 	GXMovePositionDown
.842b	60		rts				rts
.842c					GXLineSetup:
.842c	ad 37 06	lda $0637			lda 	GXY1
.842f	38		sec				sec
.8430	ed 33 06	sbc $0633			sbc 	GXY0
.8433	4a		lsr a				lsr 	a
.8434	8d 4f 06	sta $064f			sta 	GXDiffY
.8437	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.843a	38		sec				sec
.843b	ad 35 06	lda $0635			lda 	GXX1
.843e	ed 31 06	sbc $0631			sbc 	GXX0
.8441	8d 4e 06	sta $064e			sta 	GXDiffX
.8444	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8447	ed 32 06	sbc $0632			sbc 	GXX0+1
.844a	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844b	6e 4e 06	ror $064e			ror 	GXDiffX
.844e	0a		asl a				asl 	a
.844f	10 0c		bpl $845d			bpl 	_GDXNotNegative
.8451	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8453	38		sec				sec
.8454	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8457	8d 4e 06	sta $064e			sta 	GXDiffX
.845a	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845d					_GDXNotNegative:
.845d	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8460	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8463	8d 53 06	sta $0653			sta 	GXAdjust
.8466	ad 4e 06	lda $064e			lda 	GXDiffX
.8469	8d 54 06	sta $0654			sta 	GXTotal
.846c	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846f	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8472	90 0f		bcc $8483			bcc 	_GDXNotLarger
.8474	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8477	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.847a	8d 53 06	sta $0653			sta 	GXAdjust
.847d	ad 4f 06	lda $064f			lda 	GXDiffY
.8480	8d 54 06	sta $0654			sta 	GXTotal
.8483					_GDXNotLarger:
.8483	ad 54 06	lda $0654			lda 	GXTotal
.8486	4a		lsr a				lsr 	a
.8487	8d 52 06	sta $0652			sta 	GXPosition
.848a	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848b					GXSetColourMode:
.848b	a6 36		ldx $36				ldx 	gxzTemp0
.848d	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8490	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8492	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8495	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8497	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.849a	ae 3f 06	ldx $063f			ldx 	gxColour
.849d	8e 40 06	stx $0640			stx 	gxEORValue
.84a0	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a2	90 03		bcc $84a7			bcc 	_GXSDCNotAndColour
.84a4	8e 41 06	stx $0641			stx 	gxANDValue
.84a7					_GXSDCNotAndColour:
.84a7	d0 03		bne $84ac			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a9	9c 40 06	stz $0640			stz 	gxEORValue
.84ac					_GXSDCNotAnd:
.84ac	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ad	90 08		bcc $84b7			bcc 	_GXSDCNoFlip
.84af	ad 41 06	lda $0641			lda	 	gxANDValue
.84b2	49 ff		eor #$ff			eor 	#$FF
.84b4	8d 41 06	sta $0641			sta 	gxANDValue
.84b7					_GXSDCNoFlip:
.84b7	18		clc				clc
.84b8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b9					GXPlotPoint:
.84b9	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap 				; start drawing
.84bc	20 dd 87	jsr $87dd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84bf	ac 44 06	ldy $0644			ldy 	gsOffset
.84c2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c4	2d 41 06	and $0641			and 	gxANDValue
.84c7	4d 40 06	eor $0640			eor 	gxEORValue
.84ca	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cc	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cf	18		clc				clc
.84d0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d1					GXFillRectangle:
.84d1	38		sec				sec
.84d2	80 01		bra $84d5			bra 	GXRectangle
.84d4					GXFrameRectangle:
.84d4	18		clc				clc
.84d5					GXRectangle:
.84d5	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d8	f0 35		beq $850f			beq 	_GXRFail
.84da	08		php				php 								; save Fill flag (CS)
.84db	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap 				; start drawing
.84de	20 8a 88	jsr $888a			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e1	20 dd 87	jsr $87dd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e4	38		sec				sec 								; sec = Draw line
.84e5	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84eb	cd 37 06	cmp $0637			cmp 	gxY1
.84ee	f0 19		beq $8509			beq 	_GXRectangleExit
.84f0					_GXRectLoop:
.84f0	20 33 88	jsr $8833			jsr 	GXMovePositionDown 			; down one.
.84f3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f9	cd 37 06	cmp $0637			cmp 	gXY1
.84fc	f0 07		beq $8505			beq 	_GXLastLine
.84fe	28		plp				plp 								; get flag back
.84ff	08		php				php
.8500	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8503	80 eb		bra $84f0			bra 	_GXRectLoop
.8505					_GXLastLine:
.8505	38		sec				sec
.8506	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0
.8509					_GXRectangleExit:
.8509	68		pla				pla 								; throw fill flag.
.850a	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap 				; stop drawing and exit
.850d	18		clc				clc
.850e	60		rts				rts
.850f					_GXRFail:
.850f	38		sec				sec
.8510	60		rts				rts
.8511					GXDrawLineX1X0:
.8511	08		php				php 								; save solid/either-end
.8512	38		sec				sec
.8513	ad 35 06	lda $0635			lda		gXX1
.8516	ed 31 06	sbc $0631			sbc 	gXX0
.8519	85 36		sta $36				sta 	gxzTemp0
.851b	ad 36 06	lda $0636			lda 	gXX1+1
.851e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8521	85 37		sta $37				sta 	gxzTemp0+1
.8523	28		plp				plp
.8524					GXDrawLineTemp0:
.8524	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8526	48		pha				pha
.8527	a5 3d		lda $3d				lda 	gxzScreen+1
.8529	48		pha				pha
.852a	ad 44 06	lda $0644			lda 	gsOffset
.852d	48		pha				pha
.852e	a5 0b		lda $0b				lda 	GXEditSlot
.8530	48		pha				pha
.8531	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8534	90 1e		bcc $8554			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8536					_GXDLTLine:
.8536	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8538	2d 41 06	and $0641			and 	gxANDValue
.853b	4d 40 06	eor $0640			eor 	gxEORValue
.853e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8540	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8542	d0 04		bne $8548			bne 	_GXDLTNoBorrow
.8544	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8546	30 2e		bmi $8576			bmi 	_GXDLTExit
.8548					_GXDLTNoBorrow:
.8548	c6 36		dec $36				dec 	gxzTemp0
.854a	c8		iny				iny 								; next slot.
.854b	d0 e9		bne $8536			bne 	_GXDLTLine
.854d	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854f	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8552	80 e2		bra $8536			bra 	_GXDLTLine
.8554					_GXDLTEndPoints:
.8554	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8556	2d 41 06	and $0641			and 	gxANDValue
.8559	4d 40 06	eor $0640			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855e	98		tya				tya 								; advance to right side
.855f	18		clc				clc
.8560	65 36		adc $36				adc 	gxzTemp0
.8562	a8		tay				tay
.8563	a5 3d		lda $3d				lda 	gxzScreen+1
.8565	65 37		adc $37				adc 	gxzTemp0+1
.8567	85 3d		sta $3d				sta 	gxzScreen+1
.8569	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap 			; fix up.
.856c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856e	2d 41 06	and $0641			and 	gxANDValue
.8571	4d 40 06	eor $0640			eor 	gxEORValue
.8574	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8576					_GXDLTExit:
.8576	68		pla				pla
.8577	85 0b		sta $0b				sta 	GXEditSlot
.8579	68		pla				pla
.857a	8d 44 06	sta $0644			sta 	gsOffset
.857d	68		pla				pla
.857e	85 3d		sta $3d				sta 	gxzScreen+1
.8580	68		pla				pla
.8581	85 3c		sta $3c				sta 	gxzScreen
.8583	60		rts				rts
.8584					GXDLTCheckWrap:
.8584	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8586	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8588	90 06		bcc $8590			bcc 	_GXDLTCWExit
.858a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858c	85 3d		sta $3d				sta 	gxzScreen+1
.858e	e6 0b		inc $0b				inc 	GXEditSlot
.8590					_GXDLTCWExit:
.8590	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8591					GXDrawGraphicElement:
.8591	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8594	3a		dec a				dec 	a
.8595	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8598	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859b	9c 5c 06	stz $065c			stz 	gxHFlip
.859e	2c 5d 06	bit $065d			bit 	gxUseMode
.85a1	10 03		bpl $85a6			bpl 	_GXNotVertical
.85a3	8d 5b 06	sta $065b			sta 	gxVFlip
.85a6					_GXNotVertical:
.85a6	50 03		bvc $85ab			bvc 	_GXNotHorizontal
.85a8	8d 5c 06	sta $065c			sta 	gxHFlip
.85ab					_GXNotHorizontal:
.85ab	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ae	f0 5f		beq $860f			beq 	_GXSLFail
.85b0	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b3	48		pha				pha
.85b4	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b7	8e 58 06	stx $0658			stx 	gxAcquireVector
.85ba	20 bf 87	jsr $87bf			jsr 	gxOpenBitmap 				; open the bitmap.
.85bd	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	4a		lsr a				lsr 	a
.85c3	29 07		and #$07			and		#7
.85c5	1a		inc a				inc 	a
.85c6	8d 5a 06	sta $065a			sta 	gxScale
.85c9	64 38		stz $38				stz 	gxzTemp1						; start first line
.85cb					_GXGELoop:
.85cb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cd	4d 5b 06	eor $065b			eor 	gxVFlip
.85d0	aa		tax				tax 								; get the Xth line.
.85d1	20 11 86	jsr $8611			jsr 	_GXCallAcquire 				; get that data.
.85d4	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d7	85 39		sta $39				sta 	gxzTemp1+1
.85d9					_GXGELoop2:
.85d9	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85dc	cd 3d 06	cmp $063d			cmp 	gxHeight
.85df	b0 10		bcs $85f1			bcs 	_GXDGEExit
.85e1	20 14 86	jsr $8614			jsr 	GXRenderOneLine 			; render line
.85e4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e6	d0 f1		bne $85d9			bne 	_GXGELoop2
.85e8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85ea	a5 38		lda $38				lda 	gxzTemp1
.85ec	cd 56 06	cmp $0656			cmp 	gxSize
.85ef	d0 da		bne $85cb			bne 	_GXGELoop
.85f1					_GXDGEExit:
.85f1	68		pla				pla 								; restore Y for next time
.85f2	8d 33 06	sta $0633			sta 	gxY0
.85f5	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f8					_GXShiftLeft:
.85f8	18		clc				clc
.85f9	ad 56 06	lda $0656			lda 	gxSize
.85fc	6d 31 06	adc $0631			adc 	gxX0
.85ff	8d 31 06	sta $0631			sta 	gxX0
.8602	90 03		bcc $8607			bcc 	_GXSLNoCarry
.8604	ee 32 06	inc $0632			inc 	gxX0+1
.8607					_GXSLNoCarry:
.8607	ca		dex				dex
.8608	d0 ee		bne $85f8			bne 	_GXShiftLeft
.860a	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap
.860d	18		clc				clc
.860e	60		rts				rts
.860f					_GXSLFail:
.860f	38		sec				sec
.8610	60		rts				rts
.8611					_GXCallAcquire:
.8611	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8614					GXRenderOneLine:
.8614	20 dd 87	jsr $87dd			jsr 	GXPositionCalc 				; calculate position/offset.
.8617	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.861a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861c					_GXROLLoop1:
.861c	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861f	85 3b		sta $3b				sta 	gxzTemp2+1
.8621					_GXROLLoop2:
.8621	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8623	4d 5c 06	eor $065c			eor 	gxHFlip
.8626	aa		tax				tax 								; read from the pixel buffer
.8627	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.862a	f0 0a		beq $8636			beq 	_GXZeroPixel 				; don't draw if zero.
.862c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862e	2d 41 06	and $0641			and 	gxANDValue
.8631	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8634	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8636					_GXZeroPixel:
.8636	c8		iny				iny 								; advance pointer
.8637	d0 05		bne $863e			bne 	_GXNoShift
.8639	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863b	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.863e					_GXNoShift:
.863e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8640	d0 df		bne $8621			bne 	_GXROLLoop2
.8642	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8644	a5 3a		lda $3a				lda 	gxzTemp2
.8646	cd 56 06	cmp $0656			cmp 	gxSize
.8649	d0 d1		bne $861c			bne 	_GXROLLoop1
.864b	ee 33 06	inc $0633			inc 	gxY0
.864e	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864f					GXFontHandler:
.864f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8651	4d 3e 06	eor $063e			eor 	gxMode
.8654	8d 5d 06	sta $065d			sta 	gxUseMode
.8657	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8659	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865b	26 37		rol $37				rol	 	gxzTemp0+1
.865d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865f	26 37		rol $37				rol	 	gxzTemp0+1
.8661	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8663	26 37		rol $37				rol	 	gxzTemp0+1
.8665	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8667	09 c0		ora #$c0			ora 	#$C0
.8669	85 37		sta $37				sta 	gxzTemp0+1
.866b	a9 08		lda #$08			lda 	#8 							; size 8x8
.866d	a2 75		ldx #$75			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8671	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.8674	60		rts				rts
.8675					GXGetGraphicDataFont:
.8675	8a		txa				txa 								; X->Y
.8676	a8		tay				tay
.8677	a6 01		ldx $01				ldx 	1 							; preserve old value
.8679	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867b	85 01		sta $01				sta 	1
.867d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867f	86 01		stx $01				stx 	1 							; put old value back.
.8681	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8683					_GXExpand:
.8683	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8686	0a		asl a				asl 	a 							; shift bit 7 into C
.8687	90 08		bcc $8691			bcc 	_GXNoPixel
.8689	48		pha				pha 								; if set, set pixel buffer to current colour.
.868a	ad 3f 06	lda $063f			lda 	gxColour
.868d	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8690	68		pla				pla
.8691					_GXNoPixel:
.8691	e8		inx				inx 								; do the whole byte.
.8692	e0 08		cpx #$08			cpx 	#8
.8694	d0 ed		bne $8683			bne 	_GXExpand
.8696	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8697					GXSpriteHandler:
.8697	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8699	4d 3e 06	eor $063e			eor 	gxMode
.869c	8d 5d 06	sta $065d			sta 	gxUseMode
.869f	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a1	da		phx				phx
.86a2	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap 				; can access sprite information
.86a5	68		pla				pla
.86a6	20 4e 88	jsr $884e			jsr 	GXFindSprite 				; get the sprite address
.86a9	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap
.86ac	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86af	a2 b7		ldx #$b7			ldx 	#GXSpriteAcquire & $FF
.86b1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b3	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.86b6	60		rts				rts
.86b7					GXSpriteAcquire:
.86b7	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86ba	85 0b		sta $0b				sta 	GXEditSlot
.86bc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86be	a9 00		lda #$00			lda 	#0
.86c0	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c3					_GXTimesRowNumber:
.86c3	18		clc				clc
.86c4	65 36		adc $36				adc 	zTemp0
.86c6	ca		dex				dex
.86c7	10 fa		bpl $86c3			bpl 	_GXTimesRowNumber
.86c9	64 37		stz $37				stz 	gxzTemp0+1
.86cb	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cc	26 37		rol $37				rol 	gxzTemp0+1
.86ce	0a		asl a				asl 	a 							; row x 4,8,12,16
.86cf	26 37		rol $37				rol 	gxzTemp0+1
.86d1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d2	26 37		rol $37				rol 	gxzTemp0+1
.86d4	85 36		sta $36				sta 	gxzTemp0
.86d6	18		clc				clc 								; add base address.
.86d7	a5 36		lda $36				lda 	gxzTemp0
.86d9	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86dc	85 36		sta $36				sta 	gxzTemp0
.86de	a5 37		lda $37				lda 	gxzTemp0+1
.86e0	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e3					_GXSAFindPage:
.86e3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e5	90 06		bcc $86ed			bcc 	_GXSAFoundPage
.86e7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e9	e6 0b		inc $0b				inc 	GXEditSlot
.86eb	80 f6		bra $86e3			bra 	_GXSAFindPage
.86ed					_GXSAFoundPage:
.86ed	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ef	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f1	a0 00		ldy #$00			ldy 	#0
.86f3					_GXSACopyLoop:
.86f3	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f5	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f8	c8		iny				iny
.86f9	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fc	d0 f5		bne $86f3			bne 	_GXSACopyLoop
.86fe	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86ff					GXSelect:
.86ff	ad 39 06	lda $0639			lda 	gxSpritesOn
.8702	f0 1f		beq $8723			beq 	_GXSFail
.8704	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8706	c9 40		cmp #$40			cmp 	#64
.8708	b0 19		bcs $8723			bcs 	_GXSFail
.870a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870e	06 36		asl $36				asl 	gxzTemp0
.8710	06 36		asl $36				asl 	gxzTemp0
.8712	06 36		asl $36				asl 	gxzTemp0
.8714	2a		rol a				rol 	a
.8715	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8717	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.871a	85 37		sta $37				sta 	gxzTemp0+1
.871c	a5 36		lda $36				lda 	gxzTemp0
.871e	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8721	18		clc				clc
.8722	60		rts				rts
.8723					_GXSFail:
.8723	38		sec				sec
.8724	60		rts				rts
.8725					GXSelectImage:
.8725	ad 39 06	lda $0639			lda 	gxSpritesOn
.8728	f0 5e		beq $8788			beq 	_GXSIFail
.872a	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.872d	f0 59		beq $8788			beq 	_GXSIFail
.872f	64 01		stz $01				stz 	1
.8731	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8733	d0 43		bne $8778			bne 	_GXSIHide
.8735	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8737	48		pha				pha
.8738	20 bf 87	jsr $87bf			jsr 	GXOpenBitmap
.873b	68		pla				pla
.873c	20 4e 88	jsr $884e			jsr 	GXFindSprite
.873f	a0 01		ldy #$01			ldy 	#1
.8741	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8744	85 36		sta $36				sta 	gxzTemp0
.8746	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8749	85 37		sta $37				sta 	gxzTemp0+1
.874b	ad 61 06	lda $0661			lda 	GXSpriteOffset
.874e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8750	18		clc				clc
.8751	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8754	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8757	c8		iny				iny
.8758	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875a	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.875d	69 00		adc #$00			adc 	#0
.875f	c8		iny				iny
.8760	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8762	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8765	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8767	2a		rol a				rol 	a 							; x 2
.8768	0a		asl a				asl 	a 							; x 4
.8769	0a		asl a				asl 	a 							; x 8
.876a	0a		asl a				asl 	a 							; x 16
.876b	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.876e	0a		asl a				asl 	a 							; 1 shift
.876f	09 01		ora #$01			ora 	#1 							; enable sprite.
.8771	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8773	20 d0 87	jsr $87d0			jsr 	GXCloseBitmap
.8776	18		clc				clc
.8777	60		rts				rts
.8778					_GXSIHide:
.8778	ad 45 06	lda $0645			lda 	GSCurrentSprite
.877b	85 36		sta $36				sta 	gxzTemp0
.877d	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8780	85 37		sta $37				sta 	gxzTemp0+1
.8782	a9 00		lda #$00			lda 	#0
.8784	92 36		sta ($36)			sta 	(gxzTemp0)
.8786	18		clc				clc
.8787	60		rts				rts
.8788					_GXSIFail:
.8788	38		sec				sec
.8789	60		rts				rts
.878a					GXMoveSprite:
.878a	ad 39 06	lda $0639			lda 	gxSpritesOn
.878d	f0 2e		beq $87bd			beq 	_GXSIFail
.878f	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8792	f0 29		beq $87bd			beq 	_GXSIFail
.8794	85 37		sta $37				sta 	gxzTemp0+1
.8796	a0 04		ldy #$04			ldy 	#4
.8798	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879b	85 36		sta $36				sta 	gxzTemp0
.879d	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.879f	38		sec				sec
.87a0	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a3	4a		lsr a				lsr 	a
.87a4	48		pha				pha
.87a5	18		clc				clc
.87a6	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87a9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ab	c8		iny				iny
.87ac	ad 32 06	lda $0632			lda 	gxX0+1
.87af	69 00		adc #$00			adc 	#0
.87b1	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b3	c8		iny				iny
.87b4	68		pla				pla
.87b5	18		clc				clc
.87b6	6d 33 06	adc $0633			adc 	gxY0
.87b9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87bb	18		clc				clc
.87bc	60		rts				rts
.87bd					_GXSIFail:
.87bd	38		sec				sec
.87be	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87bf					GXOpenBitmap:
.87bf	78		sei				sei 								; no interrupts here
.87c0	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c2	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c5	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c7	85 00		sta $00				sta 	0
.87c9	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87cb	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87ce	58		cli				cli
.87cf	60		rts				rts
.87d0					GXCloseBitmap:
.87d0	78		sei				sei
.87d1	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d4	85 0b		sta $0b				sta 	GXEditSlot
.87d6	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d9	85 00		sta $00				sta 	0
.87db	58		cli				cli
.87dc	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87dd					GXPositionCalc:
.87dd	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87df	48		pha				pha
.87e0	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e3	85 3c		sta $3c				sta 	gxzScreen
.87e5	64 3d		stz $3d				stz 	gxzScreen+1
.87e7	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e9	26 3d		rol $3d				rol 	gxzScreen+1
.87eb	06 3c		asl $3c				asl 	gxzScreen
.87ed	26 3d		rol $3d				rol 	gxzScreen+1
.87ef	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87f0	65 3c		adc $3c				adc 	gxzScreen
.87f2	85 3c		sta $3c				sta 	gxzScreen
.87f4	90 02		bcc $87f8			bcc 	_GXPCNoCarry
.87f6	e6 3d		inc $3d				inc 	gxzScreen+1
.87f8					_GXPCNoCarry:
.87f8	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87fa	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fc	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fe	85 36		sta $36				sta 	gxzTemp0
.8800	64 3d		stz $3d				stz 	gxzScreen+1
.8802	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8804					_GXPCMultiply32:
.8804	06 3c		asl $3c				asl 	gxzScreen
.8806	26 3d		rol $3d				rol 	gxzScreen+1
.8808	3a		dec a				dec 	a
.8809	d0 f9		bne $8804			bne 	_GXPCMultiply32
.880b	18		clc				clc
.880c	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880f	65 3c		adc $3c				adc 	gxzScreen
.8811	8d 44 06	sta $0644			sta 	gsOffset
.8814	ad 32 06	lda $0632			lda 	GXX0+1
.8817	65 3d		adc $3d				adc 	gxzScreen+1
.8819	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881b	90 04		bcc $8821			bcc 	_GXPCNoOverflow
.881d	29 1f		and #$1f			and 	#$1F 						; fix it up
.881f	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8821					_GXPCNoOverflow:
.8821	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8823	85 3d		sta $3d				sta 	gxzScreen+1
.8825	64 3c		stz $3c				stz 	gxzScreen
.8827	18		clc				clc
.8828	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.882a	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882d	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882f	68		pla				pla
.8830	85 36		sta $36				sta 	gxzTemp0
.8832	60		rts				rts
.8833					GXMovePositionDown:
.8833	18		clc				clc 								; add 320 to offset/temp+1
.8834	ad 44 06	lda $0644			lda 	gsOffset
.8837	69 40		adc #$40			adc 	#64
.8839	8d 44 06	sta $0644			sta 	gsOffset
.883c	a5 3d		lda $3d				lda 	gxzScreen+1
.883e	69 01		adc #$01			adc 	#1
.8840	85 3d		sta $3d				sta 	gxzScreen+1
.8842	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8844	90 07		bcc $884d			bcc 	_GXMPDExit
.8846	38		sec				sec  								; next page
.8847	e9 20		sbc #$20			sbc 	#$20
.8849	85 3d		sta $3d				sta 	gxzScreen+1
.884b	e6 0b		inc $0b				inc 	GXEditSlot
.884d					_GXMPDExit:
.884d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884e					GXFindSprite:
.884e	aa		tax				tax
.884f	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8852	85 0b		sta $0b				sta 	GXEditSlot
.8854	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8857	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.885a	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885d	48		pha				pha 								; save twice
.885e	48		pha				pha
.885f	29 03		and #$03			and 	#3 							; get sprite size
.8861	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8864	aa		tax				tax
.8865	bd 86 88	lda $8886,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8868	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886b	68		pla				pla 								; get LUT
.886c	4a		lsr a				lsr		a
.886d	4a		lsr a				lsr		a
.886e	29 03		and #$03			and 	#3
.8870	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8873	68		pla				pla 								; address, neeeds to be x 4
.8874	29 f0		and #$f0			and 	#$F0
.8876	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8879	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887c	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887f	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8882	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8885	60		rts				rts
.8886					_GXFXSSTTable:
>8886	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.888a					GXSortXY:
.888a	20 a8 88	jsr $88a8			jsr 	GXSortY 					; will be sorted on Y now
.888d	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8890	cd 35 06	cmp $0635			cmp 	gxX1
.8893	ad 32 06	lda $0632			lda 	gXX0+1
.8896	ed 36 06	sbc $0636			sbc 	gXX1+1
.8899	90 0c		bcc $88a7			bcc 	_GXSXYExit 					; X0 < X1 exit
.889b	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889d	a0 04		ldy #$04			ldy 	#4
.889f	20 bc 88	jsr $88bc			jsr 	GXSwapXY
.88a2	e8		inx				inx
.88a3	c8		iny				iny
.88a4	20 bc 88	jsr $88bc			jsr 	GXSwapXY
.88a7					_GXSXYExit:
.88a7	60		rts				rts
.88a8					GXSortY:
.88a8	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88ab	cd 37 06	cmp $0637			cmp 	gxY1
.88ae	90 0b		bcc $88bb			bcc 	_GXSYSorted
.88b0	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b2	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b4					_GXSwap1:
.88b4	20 bc 88	jsr $88bc			jsr 	GXSwapXY
.88b7	88		dey				dey
.88b8	ca		dex				dex
.88b9	10 f9		bpl $88b4			bpl 	_GXSwap1
.88bb					_GXSYSorted:
.88bb	60		rts				rts
.88bc					GXSwapXY:
.88bc	bd 31 06	lda $0631,x			lda 	gxX0,x
.88bf	48		pha				pha
.88c0	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c3	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c6	68		pla				pla
.88c7	99 31 06	sta $0631,y			sta 	gxX0,y
.88ca	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88cb					RunDemos:
.88cb					loop:
.88cb	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88cd	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88cf	a0 00		ldy #$00			ldy 	#(0)
.88d1	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88d4	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d6	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d8	a0 00		ldy #$00			ldy 	#(0)
.88da	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88dd	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88df	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e1	a0 00		ldy #$00			ldy 	#(0)
.88e3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88e6	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e8	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88ea	a0 00		ldy #$00			ldy 	#(0)
.88ec	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88ef	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f1	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f3	a0 1e		ldy #$1e			ldy 	#(30)
.88f5	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f8	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88fa	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fc	a0 08		ldy #$08			ldy 	#(1*8)
.88fe	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8901	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8903	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8905	a0 08		ldy #$08			ldy 	#(1*8)
.8907	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.890a	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890c	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890e	a0 08		ldy #$08			ldy 	#(1*8)
.8910	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8913	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8915	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8917	a0 08		ldy #$08			ldy 	#(1*8)
.8919	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.891c	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891e	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8920	a0 08		ldy #$08			ldy 	#(1*8)
.8922	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8925	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8927	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8929	a0 0a		ldy #$0a			ldy 	#(10)
.892b	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.892e	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.8930	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8932	a0 64		ldy #$64			ldy 	#(100)
.8934	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8937	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.8939	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893b	a0 01		ldy #$01			ldy 	#(1)
.893d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8940	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8942	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8944	a0 00		ldy #$00			ldy 	#(0)
.8946	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8949	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894b	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894d	a0 c8		ldy #$c8			ldy 	#(200)
.894f	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8952	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8954	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8956	a0 01		ldy #$01			ldy 	#(1)
.8958	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.895b	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895d	a2 01		ldx #$01			ldx 	#((1) & $FF)
.895f	a0 00		ldy #$00			ldy 	#(0)
.8961	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8964	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8966	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8968	a0 c8		ldy #$c8			ldy 	#(200)
.896a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.896d	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.896f	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8971	a0 01		ldy #$01			ldy 	#(1)
.8973	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8976	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8978	a2 00		ldx #$00			ldx 	#((0) & $FF)
.897a	a0 00		ldy #$00			ldy 	#(0)
.897c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.897f	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8981	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8983	a0 c8		ldy #$c8			ldy 	#(200)
.8985	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8988	60		rts				rts
.8989	20 48 a2	jsr $a248	demo:	jsr 	Random32Bit
.898c	ee 40 06	inc $0640			inc 	gxEORValue
.898f	a9 30		lda #$30			lda 	#24*2
.8991	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8994	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8997	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.899a	80 ed		bra $8989			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899c					AssembleGroup1:
.899c	a9 ff		lda #$ff			lda 	#$FF
.899e	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a1	80 02		bra $89a5			bra 	AsmGroup12
.89a3					AssembleGroup2:
.89a3	a5 00		lda $00				lda 	$00
.89a5					AsmGroup12:
.89a5	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a8	68		pla				pla 								; pop the return address to access the information following.
.89a9	fa		plx				plx
.89aa	20 33 8a	jsr $8a33			jsr 	AccessParameters 			; get opcode and save as base
.89ad	8d a4 04	sta $04a4			sta 	BaseOpcode
.89b0	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b3	d0 08		bne $89bd			bne 	_AG12HaveMask
.89b5	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b7	20 3b 8a	jsr $8a3b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89ba	8d a5 04	sta $04a5			sta 	ModeMask
.89bd					_AG12HaveMask:
.89bd	20 76 8b	jsr $8b76			jsr 	TypeAndCalculateOperand 	; get zero page type
.89c0	da		phx				phx 								; save found address mode
.89c1	20 9f 8a	jsr $8a9f			jsr 	AssembleModeX
.89c4	fa		plx				plx  								; restore address mode
.89c5	b0 0b		bcs $89d2			bcs 	_AG12Exit
.89c7	20 d3 89	jsr $89d3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89ca	20 9f 8a	jsr $8a9f			jsr 	AssembleModeX
.89cd	b0 03		bcs $89d2			bcs 	_AG12Exit
.89cf	4c 85 b2	jmp $b285			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d2					_AG12Exit:
.89d2	60		rts				rts
.89d3					PromoteToAbsolute:
.89d3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d7	f0 19		beq $89f2			beq 	_PTADo
.89d9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89db	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89dd	f0 13		beq $89f2			beq 	_PTADo
.89df	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e1	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e3	f0 0d		beq $89f2			beq 	_PTADo
.89e5	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e7	e0 d1		cpx #$d1			cpx 	#AM_IND
.89e9	f0 07		beq $89f2			beq 	_PTADo
.89eb	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ed	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89ef	f0 01		beq $89f2			beq 	_PTADo
.89f1	60		rts				rts
.89f2					_PTADo:
.89f2	aa		tax				tax
.89f3	60		rts				rts
.89f4					AssembleGroup3:
.89f4	68		pla				pla 								; get parameters, which is just the opcode.
.89f5	fa		plx				plx
.89f6	20 33 8a	jsr $8a33			jsr 	AccessParameters 			; get and output opcode
.89f9	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte
.89fc	20 da 8b	jsr $8bda			jsr 	CalculateOperand 			; get a 16 bit operand
.89ff	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a02	38		sec				sec
.8a03	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a06	48		pha				pha 								; LSB in A
.8a07	ad 10 04	lda $0410			lda 	NSMantissa1
.8a0a	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0d	aa		tax				tax 								; MSB in X
.8a0e	68		pla				pla
.8a0f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a10	69 7f		adc #$7f			adc 	#$7F
.8a12	90 01		bcc $8a15			bcc 	_AG3NoCarry
.8a14	e8		inx				inx
.8a15					_AG3NoCarry:
.8a15	38		sec				sec 								; fix back and write out anyways.
.8a16	e9 80		sbc #$80			sbc 	#$80
.8a18	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte
.8a1b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1d	f0 0a		beq $8a29			beq 	_AG3Exit
.8a1f	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a22	29 01		and #$01			and 	#1
.8a24	f0 03		beq $8a29			beq 	_AG3Exit
.8a26	4c 8a b2	jmp $b28a			jmp 	RangeError 					; no, branch is out of range
.8a29					_AG3Exit:
.8a29	60		rts				rts
.8a2a					AssembleGroup4:
.8a2a	68		pla				pla 								; pop address
.8a2b	fa		plx				plx
.8a2c	20 33 8a	jsr $8a33			jsr 	AccessParameters 			; access and get first
.8a2f	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte 			; output it.
.8a32	60		rts				rts
.8a33					AccessParameters:
.8a33	8d a1 04	sta $04a1			sta 	ParamStart
.8a36	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a39	a9 01		lda #$01			lda 	#1
.8a3b					GetParameter:
.8a3b	5a		phy				phy
.8a3c	a8		tay				tay
.8a3d	ad a1 04	lda $04a1			lda 	ParamStart
.8a40	85 36		sta $36				sta 	zTemp0
.8a42	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a45	85 37		sta $37				sta 	zTemp0+1
.8a47	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a49	7a		ply				ply
.8a4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4b					AssemblerWriteByte:
.8a4b	48		pha			pha
.8a4c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a4f	29 02		and #$02		and 	#2
.8a51	f0 1b		beq $8a6e		beq 	_AWBNoPrint
.8a53	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a56	20 89 8a	jsr $8a89		jsr 	PrintHex
.8a59	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5c	20 89 8a	jsr $8a89		jsr 	PrintHex
.8a5f	a9 20		lda #$20		lda 	#' '
.8a61	20 38 b4	jsr $b438		jsr 	EXTPrintCharacter
.8a64	68		pla			pla 									; print byte
.8a65	48		pha			pha
.8a66	20 89 8a	jsr $8a89		jsr 	PrintHex
.8a69	a9 0d		lda #$0d		lda 	#13
.8a6b	20 38 b4	jsr $b438		jsr 	EXTPrintCharacter
.8a6e					_AWBNoPrint:
.8a6e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a71	85 36		sta $36			sta 	zTemp0
.8a73	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a76	f0 0e		beq $8a86		beq 	_AWBRange
.8a78	85 37		sta $37			sta 	zTemp0+1
.8a7a	68		pla			pla 									; write byte out
.8a7b	92 36		sta ($36)		sta 	(zTemp0)
.8a7d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a80	d0 03		bne $8a85		bne 	_AWBNoCarry
.8a82	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a85					_AWBNoCarry:
.8a85	60		rts			rts
.8a86					_AWBRange:
.8a86	4c 8a b2	jmp $b28a		jmp 	RangeError
.8a89					PrintHex:
.8a89	48		pha				pha
.8a8a	4a		lsr a				lsr 	a
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	4a		lsr a				lsr 	a
.8a8e	20 92 8a	jsr $8a92			jsr 	_PrintNibble
.8a91	68		pla				pla
.8a92					_PrintNibble:
.8a92	29 0f		and #$0f			and 	#15
.8a94	c9 0a		cmp #$0a			cmp 	#10
.8a96	90 02		bcc $8a9a			bcc 	_NoShift
.8a98	69 06		adc #$06			adc 	#6
.8a9a					_NoShift:
.8a9a	69 30		adc #$30			adc 	#48
.8a9c	4c 38 b4	jmp $b438			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a9f					AssembleModeX:
.8a9f	5a		phy				phy
.8aa0	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa3	f0 17		beq $8abc			beq 	_AMXGroup2
.8aa5	8a		txa				txa 							; is it in group # 1
.8aa6	29 40		and #$40			and 	#AM_ISG1
.8aa8	f0 50		beq $8afa			beq 	_AMXFail 				; no, give up.
.8aaa	8a		txa				txa 							; get back.
.8aab	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aad	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8aaf	d0 22		bne $8ad3			bne 	_AMXHaveInfo
.8ab1	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab4	c9 81		cmp #$81			cmp 	#$81
.8ab6	f0 42		beq $8afa			beq 	_AMXFail
.8ab8	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8aba	80 17		bra $8ad3			bra 	_AMXHaveInfo 			; odd design decision there.
.8abc					_AMXGroup2:
.8abc	8a		txa				txa 							; is it in group 2 ?
.8abd	29 20		and #$20			and 	#AM_ISG2
.8abf	f0 39		beq $8afa			beq 	_AMXFail 				; no, give up.
.8ac1	8a		txa				txa 							; get the offset into Y
.8ac2	29 1f		and #$1f			and 	#$1F
.8ac4	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac5	4a		lsr a				lsr  	a
.8ac6	a8		tay				tay
.8ac7	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8aca					_AMXCheckOkay:
.8aca	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8acb	88		dey				dey
.8acc	10 fc		bpl $8aca			bpl 	_AMXCheckOkay
.8ace	90 2a		bcc $8afa			bcc 	_AMXFail 				; not allowed.
.8ad0	8a		txa				txa  							; get mask back
.8ad1	29 1f		and #$1f			and 	#$1F
.8ad3					_AMXHaveInfo:
.8ad3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad5	10 05		bpl $8adc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8ada	d0 1e		bne $8afa			bne 	_AMXFail
.8adc					_AMXAnySize:
.8adc	18		clc				clc 							; add offset to the base opcode
.8add	6d a4 04	adc $04a4			adc 	BaseOpcode
.8ae0					_AMXOutputCode:
.8ae0	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae3	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae5	f0 10		beq $8af7			beq 	_AMXExit
.8ae7	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aea	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte
.8aed	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8aef	30 06		bmi $8af7			bmi 	_AMXExit
.8af1	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af4	20 4b 8a	jsr $8a4b			jsr 	AssemblerWriteByte
.8af7					_AMXExit:
.8af7	7a		ply				ply
.8af8	38		sec				sec
.8af9	60		rts				rts
.8afa					_AMXFail:
.8afa	a0 00		ldy #$00			ldy 	#0
.8afc					_AMXCheckOddities:
.8afc	8a		txa				txa
.8afd	d9 25 8b	cmp $8b25,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b00	d0 16		bne $8b18			bne 	_AMXCONext
.8b02	b9 23 8b	lda $8b23,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b05	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b08	d0 0e		bne $8b18			bne 	_AMXCONext
.8b0a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0c	10 05		bpl $8b13			bpl 	_AMXCONotZero
.8b0e	ad 10 04	lda $0410			lda 	NSMantissa1
.8b11	d0 05		bne $8b18			bne 	_AMXCONext
.8b13					_AMXCONotZero:
.8b13	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b16	80 c8		bra $8ae0			bra 	_AMXOutputCode 			; and assemble it
.8b18					_AMXCONext:
.8b18	c8		iny				iny
.8b19	c8		iny				iny
.8b1a	c8		iny				iny
.8b1b	b9 23 8b	lda $8b23,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1e	d0 dc		bne $8afc			bne 	_AMXCheckOddities
.8b20					_AMXCOFail:
.8b20	7a		ply				ply
.8b21	18		clc				clc
.8b22	60		rts				rts
.8b23					ExtraOpcode:
>8b23	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b26	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b29	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b2f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b32	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b35	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b38	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b41	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b42					LabelHere:
.8b42	c8		iny				iny 								; skip .
.8b43	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b45	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm 				; get a term
.8b48	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4d	d0 24		bne $8b73			bne 	_ALType
.8b4f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b52	85 36		sta $36				sta 	zTemp0
.8b54	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b57	85 37		sta $37				sta 	zTemp0+1
.8b59	5a		phy				phy 								; copy address in.
.8b5a	a0 01		ldy #$01			ldy 	#1
.8b5c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b5f	92 36		sta ($36)			sta 	(zTemp0)
.8b61	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b64	91 36		sta ($36),y			sta 	(zTemp0),y
.8b66	c8		iny				iny
.8b67	a9 00		lda #$00			lda 	#0
.8b69	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6b	c8		iny				iny
.8b6c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6e	c8		iny				iny
.8b6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b71	7a		ply				ply
.8b72	60		rts				rts
.8b73					_ALType:
.8b73	4c 8f b2	jmp $b28f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b76					TypeAndCalculateOperand:
.8b76	b1 30		lda ($30),y			lda 	(codePtr),y
.8b78	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b7a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7c	f0 5b		beq $8bd9			beq 	_TACOExit
.8b7e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b80	f0 57		beq $8bd9			beq 	_TACOExit
.8b82	c8		iny				iny
.8b83	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b85	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b87	f0 51		beq $8bda			beq 	CalculateOperand
.8b89	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8b	f0 1f		beq $8bac			beq 	_TACOIndirect
.8b8d	88		dey				dey 								; undo get of first character
.8b8e	20 da 8b	jsr $8bda			jsr 	CalculateOperand 			; get operand
.8b91	b1 30		lda ($30),y			lda 	(codePtr),y
.8b93	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b95	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b97	d0 40		bne $8bd9			bne 	_TACOExit
.8b99	c8		iny				iny
.8b9a	20 16 ac	jsr $ac16			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9d	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b9f	c9 58		cmp #$58			cmp 	#'X'
.8ba1	f0 36		beq $8bd9			beq 	_TACOExit
.8ba3	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba5	c9 59		cmp #$59			cmp 	#'Y'
.8ba7	f0 30		beq $8bd9			beq 	_TACOExit
.8ba9					_TACOSyntax:
.8ba9	4c 85 b2	jmp $b285			jmp 	SyntaxError
.8bac					_TACOIndirect:
.8bac	20 da 8b	jsr $8bda			jsr 	CalculateOperand 			; get the operand
.8baf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb3	f0 17		beq $8bcc			beq 	_TACOIndX
.8bb5	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bba	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbe	d0 19		bne $8bd9			bne 	_TACOExit
.8bc0	c8		iny				iny
.8bc1	20 16 ac	jsr $ac16			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc4	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc6	d0 e1		bne $8ba9			bne 	_TACOSyntax
.8bc8	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bca	80 0d		bra $8bd9			bra 	_TACOExit
.8bcc					_TACOIndX:
.8bcc	c8		iny				iny
.8bcd	20 16 ac	jsr $ac16			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bd0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd2	d0 d5		bne $8ba9			bne 	_TACOSyntax
.8bd4	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket			; check )
.8bd7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bd9					_TACOExit:
.8bd9	60		rts				rts
.8bda					CalculateOperand:
.8bda	48		pha				pha
.8bdb	da		phx				phx
.8bdc	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bde	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.8be1	fa		plx				plx
.8be2	68		pla				pla
.8be3	60		rts				rts
.ac16					TACOCheckXY:
.ac16	b1 30		lda ($30),y			lda 	(codePtr),y
.ac18	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac1a	c9 40		cmp #$40			cmp 	#$40
.ac1c	d0 21		bne $ac3f			bne 	_TCXYFail
.ac1e	b1 30		lda ($30),y			lda 	(codePtr),y
.ac20	18		clc				clc
.ac21	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac23	85 37		sta $37				sta 	zTemp0+1
.ac25	c8		iny				iny
.ac26	b1 30		lda ($30),y			lda 	(codePtr),y
.ac28	c8		iny				iny
.ac29	85 36		sta $36				sta 	zTemp0
.ac2b	5a		phy				phy 								; save position
.ac2c	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac30	d0 0c		bne $ac3e			bne 	_TCXYPopFail
.ac32	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac34	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac36	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac38	f0 08		beq $ac42			beq 	_TCXYFound
.ac3a	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac3c	f0 04		beq $ac42			beq 	_TCXYFound
.ac3e					_TCXYPopFail:
.ac3e	7a		ply				ply
.ac3f					_TCXYFail:
.ac3f	a9 00		lda #$00			lda 	#0
.ac41	60		rts				rts
.ac42					_TCXYFound:
.ac42	7a		ply				ply 								; restore position
.ac43	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ac45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be4					EditProgramCode:
.8be4	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be7	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8bea	20 f6 a4	jsr $a4f6			jsr 	MemorySearch
.8bed	90 05		bcc $8bf4			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bef	d0 03		bne $8bf4			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf1	20 7c b4	jsr $b47c			jsr 	MemoryDeleteLine 			; delete the line
.8bf4					_EPCNoDelete:
.8bf4	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf7	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bf9	f0 0d		beq $8c08			beq 	_EPCNoInsert
.8bfb	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bfe	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c01	20 f6 a4	jsr $a4f6			jsr 	MemorySearch
.8c04	18		clc				clc 								; insert at this point.
.8c05	20 b3 b4	jsr $b4b3			jsr 	MemoryInsertLine 			; insert the line
.8c08					_EPCNoInsert:
.8c08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c09					WarmStart:
.8c09	a2 ff		ldx #$ff			ldx 	#$FF
.8c0b	9a		txs				txs
.8c0c	20 4e b4	jsr $b44e			jsr 	EXTInputLine 				; get line to lineBuffer
.8c0f	20 97 a9	jsr $a997			jsr 	TokeniseLine 				; tokenise the line
.8c12	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c15	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c18	d0 17		bne $8c31			bne 	_WSEditCode 				; if so,edit code.
.8c1a	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1d	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c1f	85 30		sta $30				sta 	codePtr
.8c21	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c23	85 31		sta $31				sta 	codePtr+1
.8c25	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c28	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c2a	f0 dd		beq $8c09			beq 	WarmStart
.8c2c	20 7f 94	jsr $947f			jsr 	RUNCodePointerLine 			; execute that line.
.8c2f	80 d8		bra $8c09			bra 	WarmStart
.8c31					_WSEditCode:
.8c31	20 e4 8b	jsr $8be4			jsr 	EditProgramCode
.8c34	20 a2 8c	jsr $8ca2			jsr 	ClearCommand
.8c37	80 d0		bra $8c09			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c39					AssembleCommand:
.8c39	a2 00		ldx #$00			ldx 	#0
.8c3b	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger 		; start address
.8c3e	ad 08 04	lda $0408			lda 	NSMantissa0
.8c41	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c44	ad 10 04	lda $0410			lda 	NSMantissa1
.8c47	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c4a	20 a7 ac	jsr $aca7			jsr 	CheckComma
.8c4d	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; options
.8c50	ad 08 04	lda $0408			lda 	NSMantissa0
.8c53	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c56	60		rts				rts
.8c57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c58					AssertCommand:
.8c58	a2 00		ldx #$00			ldx 	#0
.8c5a	20 0e a4	jsr $a40e			jsr 	EvaluateInteger 			; the assert test
.8c5d	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; exit if result is non zero.
.8c60	d0 05		bne $8c67			bne 	_ACExit
.8c62	a9 0a		lda #$0a		lda	#10
.8c64	4c df 98	jmp $98df		jmp	ErrorHandler
.8c67					_ACExit:
.8c67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c68					CallCommand:
.8c68	a2 00		ldx #$00			ldx 	#0
.8c6a	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.8c6d					_CCClear
.8c6d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6e	20 97 a4	jsr $a497			jsr 	NSMSetZero
.8c71	e0 04		cpx #$04			cpx 	#4
.8c73	d0 f8		bne $8c6d			bne 	_CCClear
.8c75	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c77					_CCCParam:
.8c77	b1 30		lda ($30),y			lda 	(codePtr),y
.8c79	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7b	d0 09		bne $8c86			bne 	_CCCRun6502
.8c7d	c8		iny				iny 								; skip comma
.8c7e	e8		inx				inx	 								; next level
.8c7f	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c82	e0 03		cpx #$03			cpx 	#3
.8c84	90 f1		bcc $8c77			bcc 	_CCCParam 					; done all 3 ?
.8c86					_CCCRun6502:
.8c86	5a		phy				phy 								; save position
.8c87	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c8a	85 37		sta $37				sta 	zTemp0+1
.8c8c	ad 08 04	lda $0408			lda 	NSMantissa0
.8c8f	85 36		sta $36				sta 	zTemp0
.8c91	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c94	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c97	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c9a	20 9f 8c	jsr $8c9f			jsr 	_CCCZTemp0 					; call zTemp0
.8c9d	7a		ply				ply 								; restore position and exit
.8c9e	60		rts				rts
.8c9f					_CCCZTemp0:
.8c9f	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca2					ClearCommand:
.8ca2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca4	85 36		sta $36				sta 	0+zTemp0
.8ca6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca8	85 37		sta $37				sta 	1+zTemp0
.8caa					_ClearZeroLoop:
.8caa	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cac	f0 24		beq $8cd2			beq 	_ClearZeroEnd
.8cae	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cb0	a9 00		lda #$00			lda 	#0
.8cb2					_ClearOneVariable:
.8cb2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb4	c8		iny				iny
.8cb5	c0 08		cpy #$08			cpy 	#8
.8cb7	d0 f9		bne $8cb2			bne 	_ClearOneVariable
.8cb9	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cbb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbd	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cbf	d0 04		bne $8cc5			bne 	_ClearNotProcedure
.8cc1	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc5					_ClearNotProcedure:
.8cc5	18		clc				clc 								; go to the next variable
.8cc6	b2 36		lda ($36)			lda 	(zTemp0)
.8cc8	65 36		adc $36				adc 	zTemp0
.8cca	85 36		sta $36				sta 	zTemp0
.8ccc	90 dc		bcc $8caa			bcc 	_ClearZeroLoop
.8cce	e6 37		inc $37				inc 	zTemp0+1
.8cd0	80 d8		bra $8caa			bra 	_ClearZeroLoop
.8cd2					_ClearZeroEnd:
.8cd2	18		clc				clc
.8cd3	a5 36		lda $36				lda 	zTemp0
.8cd5	69 01		adc #$01			adc 	#1
.8cd7	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cda	a5 37		lda $37				lda 	zTemp0+1
.8cdc	69 00		adc #$00			adc 	#0
.8cde	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce1	20 b0 a5	jsr $a5b0			jsr 	StackReset
.8ce4	20 96 b5	jsr $b596			jsr 	StringSystemInitialise
.8ce7	20 ff 97	jsr $97ff			jsr 	ProcedureScan
.8cea	20 3b 94	jsr $943b			jsr 	Command_Restore
.8ced	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cf0	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf3	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf6	20 a6 a1	jsr $a1a6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cf9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cfa					Command_Data:
.8cfa	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfc	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cfe	20 51 98	jsr $9851			jsr 	ScanForward
.8d01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d02					DimCommand:
.8d02	b1 30		lda ($30),y			lda 	(codePtr),y
.8d04	29 c0		and #$c0			and 	#$C0
.8d06	c9 40		cmp #$40			cmp 	#$40
.8d08	d0 7a		bne $8d84			bne 	_DCSyntax
.8d0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0c	18		clc				clc
.8d0d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d0f	85 3f		sta $3f				sta 	zaTemp+1
.8d11	c8		iny				iny
.8d12	b1 30		lda ($30),y			lda 	(codePtr),y
.8d14	c8		iny				iny
.8d15	85 3e		sta $3e				sta 	zaTemp
.8d17	5a		phy				phy
.8d18	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d1a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1c	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d20	f0 62		beq $8d84			beq 	_DCSyntax
.8d22	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d24	29 04		and #$04			and 	#NSBIsArray
.8d26	f0 64		beq $8d8c			beq 	_DCType
.8d28	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d2a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2c	d0 59		bne $8d87			bne 	_DCRedefine
.8d2e	7a		ply				ply
.8d2f	20 8f 8d	jsr $8d8f			jsr 	_DCGetSize 				; get array size, check it.
.8d32	5a		phy				phy
.8d33	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d35	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d37	7a		ply				ply 							; is there a second (e.g. ,x)
.8d38	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3c	d0 0a		bne $8d48			bne 	_DCOneDimension
.8d3e	c8		iny				iny 							; skip comma
.8d3f	20 8f 8d	jsr $8d8f			jsr 	_DCGetSize 				; get 2nd array size
.8d42	5a		phy				phy
.8d43	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d45	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d47	7a		ply				ply
.8d48					_DCOneDimension:
.8d48	5a		phy				phy 							; save position
.8d49	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4d	aa		tax				tax
.8d4e	c8		iny				iny
.8d4f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d51	e8		inx				inx 							; bump them.
.8d52	1a		inc a				inc 	a
.8d53	20 21 b1	jsr $b121			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d56	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d58	29 e0		and #$e0			and 	#$E0
.8d5a	d0 23		bne $8d7f			bne 	_DCSize
.8d5c	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d60	20 9d 8d	jsr $8d9d			jsr 	ScaleByBaseType 		; scale by base type
.8d63	a5 36		lda $36				lda 	zTemp0
.8d65	a6 37		ldx $37				ldx 	zTemp0+1
.8d67	20 68 a1	jsr $a168			jsr 	AllocateXABytes 		; allocate memory
.8d6a	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6e	c8		iny				iny
.8d6f	8a		txa				txa
.8d70	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d72	7a		ply				ply 							; get position back
.8d73	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 		; check )
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	c8		iny				iny 							; consume in case
.8d79	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7b	f0 85		beq $8d02			beq 	DimCommand
.8d7d	88		dey				dey 							; undo consume
.8d7e	60		rts				rts
.8d7f					_DCSize:
.8d7f	a9 16		lda #$16		lda	#22
.8d81	4c df 98	jmp $98df		jmp	ErrorHandler
.8d84					_DCSyntax:
.8d84	4c 85 b2	jmp $b285			jmp 	SyntaxError
.8d87					_DCRedefine:
.8d87	a9 15		lda #$15		lda	#21
.8d89	4c df 98	jmp $98df		jmp	ErrorHandler
.8d8c					_DCType:
.8d8c	4c 8f b2	jmp $b28f			jmp 	TypeError
.8d8f					_DCGetSize:
.8d8f	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d91	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 	; get array dimension
.8d94	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d96	f0 e7		beq $8d7f			beq 	_DCSize
.8d98	c9 fe		cmp #$fe			cmp 	#254
.8d9a	f0 e3		beq $8d7f			beq 	_DCSize
.8d9c	60		rts				rts
.8d9d					ScaleByBaseType:
.8d9d	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d9f	d0 19		bne $8dba			bne 	_SBBTString
.8da1	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da3	48		pha				pha
.8da4	a5 36		lda $36				lda 	zTemp0
.8da6	48		pha				pha
.8da7	06 36		asl $36				asl 	zTemp0 					; x 2
.8da9	26 37		rol $37				rol 	zTemp0+1
.8dab	06 36		asl $36				asl 	zTemp0 					; x 4
.8dad	26 37		rol $37				rol 	zTemp0+1
.8daf	68		pla				pla 							; add stacked value = x 5
.8db0	65 36		adc $36				adc 	zTemp0
.8db2	85 36		sta $36				sta 	zTemp0
.8db4	68		pla				pla
.8db5	65 37		adc $37				adc 	zTemp0+1
.8db7	85 37		sta $37				sta 	zTemp0+1
.8db9	60		rts				rts
.8dba					_SBBTString:
.8dba	06 36		asl $36				asl 	zTemp0
.8dbc	26 37		rol $37				rol 	zTemp0+1
.8dbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dbf					EndCommand:
.8dbf	4c 09 8c	jmp $8c09			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8dc2					ForCommand:
.8dc2	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8dc4	20 4b a5	jsr $a54b			jsr 	StackOpen
.8dc7	a2 00		ldx #$00			ldx 	#0
.8dc9	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm
.8dcc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dcf	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dd1	d0 49		bne $8e1c			bne		_FCError
.8dd3	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dd5	20 af ac	jsr $acaf			jsr 	CheckNextA
.8dd8	e8		inx				inx
.8dd9	20 0e a4	jsr $a40e			jsr 	EvaluateInteger 			; <from> in +1
.8ddc	b1 30		lda ($30),y			lda 	(codePtr),y
.8dde	c8		iny				iny 								; consume it
.8ddf	48		pha				pha 								; save on stack for later
.8de0	c9 af		cmp #$af			cmp 	#KWD_DOWNTO
.8de2	f0 04		beq $8de8			beq 	_FCNoSyntax
.8de4	c9 c3		cmp #$c3			cmp 	#KWD_TO
.8de6	d0 37		bne $8e1f			bne 	_FCSyntaxError
.8de8					_FCNoSyntax:
.8de8	e8		inx				inx
.8de9	20 0e a4	jsr $a40e			jsr 	EvaluateInteger
.8dec	20 8f a5	jsr $a58f			jsr 	STKSaveCodePosition 		; save loop back position
.8def	68		pla				pla 								; restore DOWNTO or TO
.8df0	5a		phy				phy 								; save Y on the stack
.8df1	49 af		eor #$af			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8df3	f0 02		beq $8df7			beq 	_FCNotDownTo
.8df5	a9 02		lda #$02			lda 	#2
.8df7					_FCNotDownTo:
.8df7	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8df8	a0 10		ldy #$10			ldy 	#16
.8dfa	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dfc	a0 06		ldy #$06			ldy 	#6
.8dfe	ad 08 04	lda $0408			lda 	NSMantissa0
.8e01	91 34		sta ($34),y			sta 	(basicStack),y
.8e03	ad 10 04	lda $0410			lda 	NSMantissa1
.8e06	c8		iny				iny
.8e07	91 34		sta ($34),y			sta 	(basicStack),y
.8e09	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e0b	a2 01		ldx #$01			ldx 	#1
.8e0d	20 22 8e	jsr $8e22			jsr 	FCIntegerToStack
.8e10	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e12	a2 02		ldx #$02			ldx 	#2
.8e14	20 22 8e	jsr $8e22			jsr 	FCIntegerToStack
.8e17	20 42 8e	jsr $8e42			jsr 	CopyIndexToReference
.8e1a	7a		ply				ply 								; restore position
.8e1b	60		rts				rts
.8e1c					_FCError:
.8e1c	4c 8f b2	jmp $b28f			jmp 	TypeError
.8e1f					_FCSyntaxError:
.8e1f	4c 85 b2	jmp $b285			jmp 	SyntaxError
.8e22					FCIntegerToStack:
.8e22	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e25	10 03		bpl $8e2a			bpl	 	_FCNotNegative
.8e27	20 4c a4	jsr $a44c			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e2a					_FCNotNegative:
.8e2a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e2d	91 34		sta ($34),y			sta 	(basicStack),y
.8e2f	c8		iny				iny
.8e30	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e33	91 34		sta ($34),y			sta 	(basicStack),y
.8e35	c8		iny				iny
.8e36	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e39	91 34		sta ($34),y			sta 	(basicStack),y
.8e3b	c8		iny				iny
.8e3c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e3f	91 34		sta ($34),y			sta 	(basicStack),y
.8e41	60		rts				rts
.8e42					CopyIndexToReference:
.8e42	5a		phy				phy
.8e43	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e45	38		sec				sec 								; (because we copy from offset 8)
.8e46	b1 34		lda ($34),y			lda 	(basicStack),y
.8e48	e9 08		sbc #$08			sbc 	#8
.8e4a	85 36		sta $36				sta 	zTemp0
.8e4c	c8		iny				iny
.8e4d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e4f	e9 00		sbc #$00			sbc 	#0
.8e51	85 37		sta $37				sta 	zTemp0+1
.8e53	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e55	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e57	b1 34		lda ($34),y			lda 	(basicStack),y
.8e59	0a		asl a				asl 	a 							; into carry
.8e5a	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e5c	90 14		bcc $8e72			bcc 	_CITRNormal
.8e5e	38		sec				sec
.8e5f					_CITRNegative:
.8e5f	a9 00		lda #$00			lda 	#0
.8e61	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e63	91 36		sta ($36),y			sta 	(zTemp0),y
.8e65	c8		iny				iny
.8e66	ca		dex				dex
.8e67	d0 f6		bne $8e5f			bne 	_CITRNegative
.8e69	88		dey				dey 								; look at MSB of mantissa
.8e6a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e6c	09 80		ora #$80			ora 	#$80
.8e6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8e70	7a		ply				ply
.8e71	60		rts				rts
.8e72					_CITRNormal:
.8e72	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e74	91 36		sta ($36),y			sta 	(zTemp0),y
.8e76	c8		iny				iny
.8e77	ca		dex				dex
.8e78	d0 f8		bne $8e72			bne 	_CITRNormal
.8e7a	7a		ply				ply 								; and exit.
.8e7b	60		rts				rts
.8e7c					NextCommand:
.8e7c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e7e	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e80	20 77 a5	jsr $a577			jsr 	StackCheckFrame
.8e83	5a		phy				phy
.8e84	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e86	b1 34		lda ($34),y			lda 	(basicStack),y
.8e88	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e8a	30 02		bmi $8e8e			bmi 	_NCStepNeg
.8e8c	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e8e					_NCStepNeg:
.8e8e	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e90	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e92	18		clc				clc
.8e93					_NCBump:
.8e93	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e95	91 34		sta ($34),y			sta 	(basicStack),y
.8e97	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e99	c8		iny				iny 								; next byte
.8e9a	ca		dex				dex 								; do four times
.8e9b	d0 f6		bne $8e93			bne 	_NCBump
.8e9d	20 42 8e	jsr $8e42			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ea0	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ea2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ea4	0a		asl a				asl 	a 							; sign bit to carry
.8ea5	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ea7	85 38		sta $38				sta 	zTemp1
.8ea9	90 02		bcc $8ead			bcc 	_NCCompRev 					; use if step is +ve
.8eab	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8ead					_NCCompRev:
.8ead	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8eaf	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8eb1	85 39		sta $39				sta 	zTemp1+1
.8eb3	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8eb5	38		sec				sec
.8eb6					_NCCompare:
.8eb6	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8eb8	b1 34		lda ($34),y			lda 	(basicStack),y
.8eba	a4 39		ldy $39				ldy 	zTemp1+1
.8ebc	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ebe	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ec0	e6 39		inc $39				inc 	zTemp1+1
.8ec2	ca		dex				dex 								; do it 4 times.
.8ec3	d0 f1		bne $8eb6			bne 	_NCCompare
.8ec5	50 02		bvc $8ec9			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ec7	49 80		eor #$80			eor 	#$80
.8ec9					_NCNoOverflow:
.8ec9	7a		ply				ply 								; restore Y position
.8eca	0a		asl a				asl 	a 							; is bit 7 set.
.8ecb	90 04		bcc $8ed1			bcc 	_NCLoopback 				; if no , >= so loop back
.8ecd	20 69 a5	jsr $a569			jsr 	StackClose 					; exit the loop
.8ed0	60		rts				rts
.8ed1					_NCLoopBack:
.8ed1	20 a0 a5	jsr $a5a0			jsr 	STKLoadCodePosition 		; loop back
.8ed4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8ed5					RectangleCommand:
.8ed5	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8ed7	80 02		bra $8edb			bra 	ShapeDrawCmd
.8ed9					CircleCommand:
.8ed9	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8edb					ShapeDrawCmd:
.8edb	20 5b 8f	jsr $8f5b			jsr 	RunGraphicsCommand
.8ede					ShapeDraw:
.8ede	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ee1	4c 4f 8f	jmp $8f4f			jmp 	ExecuteGraphicCommand	 	; and complete
.8ee4					SpriteCommand:
.8ee4	a2 00		ldx #$00			ldx 	#0
.8ee6	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get image number.
.8ee9	5a		phy				phy
.8eea	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8eec	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eef	a0 ff		ldy #$ff			ldy 	#255
.8ef1	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ef4	a9 32		lda #$32			lda 	#25*2
.8ef6	7a		ply				ply
.8ef7	20 5b 8f	jsr $8f5b			jsr 	RunGraphicsCommand
.8efa	80 53		bra $8f4f			bra 	ExecuteGraphicCommand
.8efc					ImageCommand:
.8efc	a2 00		ldx #$00			ldx 	#0
.8efe	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get image number.
.8f01	20 5b 8f	jsr $8f5b			jsr 	RunGraphicsCommand
.8f04					ImageRunDraw:
.8f04	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f06	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f09	ad 6a 06	lda $066a			lda 	gxDrawScale
.8f0c	0a		asl a				asl 	a
.8f0d	0a		asl a				asl 	a
.8f0e	0a		asl a				asl 	a
.8f0f	a8		tay				tay
.8f10	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8f12	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f15	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f18	60		rts				rts
.8f19					TextCommand:
.8f19	a2 00		ldx #$00			ldx 	#0
.8f1b	20 f6 a3	jsr $a3f6			jsr 	EvaluateString 				; get text
.8f1e	20 5b 8f	jsr $8f5b			jsr 	RunGraphicsCommand
.8f21					TextRunDraw:
.8f21	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8f23	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f26	a0 00		ldy #$00			ldy 	#0
.8f28					_IRDLoop:
.8f28	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8f2b	85 37		sta $37				sta 	zTemp0+1
.8f2d	ad 08 04	lda $0408			lda 	NSMantissa0
.8f30	85 36		sta $36				sta 	zTemp0
.8f32	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f34	f0 13		beq $8f49			beq 	_IRDExit
.8f36	5a		phy				phy									; save string pos
.8f37	48		pha				pha 								; save char
.8f38	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8f3b	0a		asl a				asl 	a
.8f3c	0a		asl a				asl 	a
.8f3d	0a		asl a				asl 	a
.8f3e	a8		tay				tay
.8f3f	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f41	fa		plx				plx 								; char to draw
.8f42	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f45	7a		ply				ply 								; restore string pos
.8f46	c8		iny				iny
.8f47	90 df		bcc $8f28			bcc 	_IRDLoop 					; go back if no error.
.8f49					_IRDExit:
.8f49	60		rts				rts
.8f4a					LineCommand:
.8f4a	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f4c	20 5b 8f	jsr $8f5b			jsr 	RunGraphicsCommand
.8f4f					ExecuteGraphicCommand:
.8f4f	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8f52	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8f55	b0 01		bcs $8f58			bcs 	_EGCError
.8f57	60		rts				rts
.8f58					_EGCError:
.8f58	4c 85 b2	jmp $b285			jmp 	SyntaxError
.8f5b					RunGraphicsCommand:
.8f5b	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f5e	68		pla				pla 								; pop handler address
.8f5f	fa		plx				plx
.8f60	1a		inc a				inc 	a
.8f61	d0 01		bne $8f64			bne 	_RGINoCarry
.8f63	e8		inx				inx
.8f64					_RGINoCarry:
.8f64	8d 68 06	sta $0668			sta 	GXHandler
.8f67	8e 69 06	stx $0669			stx 	GXHandler+1
.8f6a					_RGICommandLoop:
.8f6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8f6c	c8		iny				iny
.8f6d	c9 c3		cmp #$c3			cmp 	#KWD_TO						; is it TO x,y
.8f6f	f0 53		beq $8fc4			beq 	_RGI_To
.8f71	c9 b5		cmp #$b5			cmp 	#KWD_HERE 					; do it here.
.8f73	f0 55		beq $8fca			beq 	_RGI_Here
.8f75	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f77	f0 3d		beq $8fb6			beq 	_RGI_Exit
.8f79	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f7b	f0 39		beq $8fb6			beq 	_RGI_Exit
.8f7d	c9 ba		cmp #$ba			cmp 	#KWD_OUTLINE 				; solid or outline
.8f7f	f0 3e		beq $8fbf			beq 	_RGI_Frame
.8f81	c9 c0		cmp #$c0			cmp 	#KWD_SOLID
.8f83	f0 33		beq $8fb8			beq 	_RGI_Solid
.8f85	c9 a6		cmp #$a6			cmp 	#KWD_BY 					; by offset
.8f87	f0 4b		beq $8fd4			beq 	_RGI_By
.8f89	c9 b1		cmp #$b1			cmp 	#KWD_FROM 					; from
.8f8b	f0 17		beq $8fa4			beq 	_RGI_Move2
.8f8d	c9 ae		cmp #$ae			cmp 	#KWD_DIM 					; dim (set scale)
.8f8f	f0 65		beq $8ff6			beq 	_RGI_Dim
.8f91	c9 ac		cmp #$ac			cmp 	#KWD_COLOUR 				; colour or Color
.8f93	f0 78		beq $900d			beq 	_RGI_Colour
.8f95	c9 ab		cmp #$ab			cmp 	#KWD_COLOR
.8f97	f0 74		beq $900d			beq 	_RGI_Colour
.8f99	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f9c	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f9e	d0 03		bne $8fa3			bne 	_RGI_Move 					; move
.8fa0	4c 37 90	jmp $9037			jmp		_RGI_SpriteInstructions
.8fa3					_RGI_Move:
.8fa3	88		dey				dey 								; unpick get.
.8fa4					_RGI_Move2:
.8fa4	20 5b 90	jsr $905b			jsr 	GCGetCoordinatePair 		; move to here
.8fa7	20 75 90	jsr $9075			jsr 	GCCopyPairToStore 			; save
.8faa	5a		phy				phy
.8fab	20 6b 90	jsr $906b			jsr 	GCLoadAXY 					; load in
.8fae	09 20		ora #$20			ora 	#16*2 						; move there
.8fb0	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fb3	7a		ply				ply
.8fb4	80 b4		bra $8f6a			bra 	_RGICommandLoop 			; and go round
.8fb6					_RGI_Exit:
.8fb6	88		dey				dey 								; unpick : / EOL
.8fb7	60		rts				rts
.8fb8					_RGI_Solid:
.8fb8	a9 02		lda #$02			lda 	#2
.8fba	8d 64 06	sta $0664			sta 	gxFillSolid
.8fbd	80 ab		bra $8f6a			bra 	_RGICommandLoop
.8fbf					_RGI_Frame:
.8fbf	9c 64 06	stz $0664			stz 	gxFillSolid
.8fc2	80 a6		bra $8f6a			bra 	_RGICommandLoop
.8fc4					_RGI_To:
.8fc4	20 5b 90	jsr $905b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8fc7	20 75 90	jsr $9075			jsr 	GCCopyPairToStore
.8fca					_RGI_Here:
.8fca	5a		phy				phy
.8fcb	20 6b 90	jsr $906b			jsr 	GCLoadAXY 					; load it into AXY
.8fce	20 34 90	jsr $9034			jsr 	_RGICallHandler 			; go do whatever it is.
.8fd1	7a		ply				ply
.8fd2	80 96		bra $8f6a			bra 	_RGICommandLoop 			; and go round
.8fd4					_RGI_By:
.8fd4	20 5b 90	jsr $905b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8fd7	18		clc				clc
.8fd8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fdb	6d 65 06	adc $0665			adc 	gxxPos
.8fde	8d 65 06	sta $0665			sta 	gxXPos
.8fe1	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fe4	6d 66 06	adc $0666			adc 	gxxPos+1
.8fe7	8d 66 06	sta $0666			sta 	gxXPos+1
.8fea	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fed	18		clc				clc
.8fee	6d 67 06	adc $0667			adc 	gxYPos
.8ff1	8d 67 06	sta $0667			sta 	gxYPos
.8ff4	80 d4		bra $8fca			bra 	_RGI_Here
.8ff6					_RGI_Dim:
.8ff6	a2 01		ldx #$01			ldx	 	#1
.8ff8	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger
.8ffb	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8ffe	c9 00		cmp #$00			cmp 	#0
.9000	f0 2f		beq $9031			beq 	_RGIRange
.9002	c9 09		cmp #$09			cmp 	#8+1
.9004	b0 2b		bcs $9031			bcs		_RGIRange
.9006	3a		dec a				dec 	a
.9007	8d 6a 06	sta $066a			sta 	gxDrawScale
.900a	4c 6a 8f	jmp $8f6a			jmp 	_RGICommandLoop
.900d					_RGI_Colour:
.900d	a2 01		ldx #$01			ldx 	#1 							; colour
.900f	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger
.9012	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.9014	20 97 a4	jsr $a497			jsr 	NSMSetZero
.9017	b1 30		lda ($30),y			lda 	(codePtr),y
.9019	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.901b	d0 04		bne $9021			bne 	_RGICDefaultMode
.901d	c8		iny				iny
.901e	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger
.9021					_RGICDefaultMode:
.9021	5a		phy				phy
.9022	a9 08		lda #$08			lda 	#4*2 						; set colour.
.9024	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9027	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.902a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.902d	7a		ply				ply
.902e	4c 6a 8f	jmp $8f6a			jmp 	_RGICommandLoop 			; and go round
.9031					_RGIRange:
.9031	4c 8a b2	jmp $b28a			jmp 	RangeError
.9034					_RGICallHandler:
.9034	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.9037					_RGI_SpriteInstructions:
.9037	c9 90		cmp #$90			cmp 	#KWD_OFF
.9039	f0 07		beq $9042			beq 	_RGISpriteOff
.903b	c9 b6		cmp #$b6			cmp 	#KWD_IMAGE
.903d	f0 11		beq $9050			beq 	_RGISetImage
.903f	4c a3 8f	jmp $8fa3			jmp 	_RGI_Move
.9042					_RGISpriteOff:
.9042	5a		phy				phy
.9043	a0 01		ldy #$01			ldy 	#1
.9045	a2 00		ldx #$00			ldx 	#0
.9047					_RGIDoCommandLoop:
.9047	a9 10		lda #$10			lda 	#8*2
.9049	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.904c	7a		ply				ply
.904d	4c 6a 8f	jmp $8f6a			jmp 	_RGICommandLoop
.9050					_RGISetImage:
.9050	a2 01		ldx #$01			ldx 	#1
.9052	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger
.9055	5a		phy				phy
.9056	aa		tax				tax
.9057	a0 00		ldy #$00			ldy 	#0
.9059	80 ec		bra $9047			bra 	_RGIDoCommandLoop
.905b					GCGetCoordinatePair:
.905b	a2 01		ldx #$01			ldx 	#1
.905d	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.9060	20 a7 ac	jsr $aca7			jsr 	CheckComma
.9063	e8		inx				inx
.9064	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.9067	60		rts				rts
.9068					_GCCPRange:
.9068	4c 8a b2	jmp $b28a			jmp 	RangeError
.906b					GCLoadAXY:
.906b	ad 66 06	lda $0666			lda 	gxXPos+1
.906e	ae 65 06	ldx $0665			ldx 	gxXPos
.9071	ac 67 06	ldy $0667			ldy 	gxYPos
.9074	60		rts				rts
.9075					GCCopyPairToStore:
.9075	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9078	8d 65 06	sta $0665			sta 	gxXPos
.907b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.907e	8d 66 06	sta $0666			sta 	gxXPos+1
.9081	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9084	8d 67 06	sta $0667			sta 	gxYPos
.9087	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9088					BitmapCtrl:
.9088	b1 30		lda ($30),y			lda 	(codePtr),y
.908a	c8		iny				iny
.908b	a2 01		ldx #$01			ldx 	#1
.908d	c9 91		cmp #$91			cmp 	#KWD_ON
.908f	f0 11		beq $90a2			beq 	BitmapSwitch
.9091	ca		dex				dex
.9092	c9 90		cmp #$90			cmp 	#KWD_OFF
.9094	f0 0c		beq $90a2			beq 	BitmapSwitch
.9096	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get the colour
.9099	5a		phy				phy
.909a	aa		tax				tax
.909b	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.909d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90a0	7a		ply				ply
.90a1	60		rts				rts
.90a2					BitmapSwitch:
.90a2	5a		phy				phy
.90a3	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.90a5	a9 02		lda #$02			lda 	#1*2
.90a7	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90aa	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.90ac	a0 00		ldy #$00			ldy 	#0
.90ae	a2 ff		ldx #$ff			ldx 	#$FF
.90b0	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90b3	9c 64 06	stz $0664			stz 	gxFillSolid
.90b6	9c 65 06	stz $0665			stz 	gxXPos
.90b9	9c 66 06	stz $0666			stz 	gxXPos+1
.90bc	9c 67 06	stz $0667			stz 	gxYPos
.90bf	9c 6a 06	stz $066a			stz 	gxDrawScale
.90c2	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90c4	a2 00		ldx #$00			ldx 	#0
.90c6	a0 00		ldy #$00			ldy 	#0
.90c8	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90cb	7a		ply				ply
.90cc	60		rts				rts
.90cd					SpritesCtrl:
.90cd	b1 30		lda ($30),y			lda 	(codePtr),y
.90cf	c8		iny				iny
.90d0	a2 01		ldx #$01			ldx 	#1
.90d2	c9 91		cmp #$91			cmp 	#KWD_ON
.90d4	f0 08		beq $90de			beq 	SpriteSwitch
.90d6	ca		dex				dex
.90d7	c9 90		cmp #$90			cmp 	#KWD_OFF
.90d9	f0 03		beq $90de			beq 	SpriteSwitch
.90db	4c 85 b2	jmp $b285			jmp 	SyntaxError
.90de					SpriteSwitch:
.90de	5a		phy				phy
.90df	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90e1	a9 04		lda #$04			lda 	#2*2
.90e3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90e6	7a		ply				ply
.90e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90e8					GfxCommand:
.90e8	a2 00		ldx #$00			ldx 	#0
.90ea	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; command
.90ed	20 a7 ac	jsr $aca7			jsr 	CheckComma
.90f0	e8		inx				inx
.90f1	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger 		; X
.90f4	20 a7 ac	jsr $aca7			jsr 	CheckComma
.90f7	e8		inx				inx
.90f8	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; Y
.90fb	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90fe	4a		lsr a				lsr 	a
.90ff	d0 16		bne $9117			bne 	_GfxError
.9101	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.9104	b0 11		bcs $9117			bcs 	_GfxError 					; bit 7 should have been zero
.9106	5a		phy				phy 								; save pos
.9107	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.910a	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.910d	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9110	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9113	b0 02		bcs $9117			bcs 	_GfxError
.9115	7a		ply				ply 								; restore pos and exit.
.9116	60		rts				rts
.9117					_GfxError:
.9117	4c 8a b2	jmp $b28a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.911a					Command_GOSUB:
.911a	a2 00		ldx #$00			ldx 	#0
.911c	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.911f	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9121	20 4b a5	jsr $a54b			jsr 	StackOpen 					; create frame
.9124	20 8f a5	jsr $a58f			jsr 	STKSaveCodePosition 		; save current position
.9127	4c 3d 91	jmp $913d			jmp 	GotoStackX
.912a					Command_RETURN:
.912a	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.912c	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.912e	20 77 a5	jsr $a577			jsr 	StackCheckFrame
.9131	20 a0 a5	jsr $a5a0			jsr 	STKLoadCodePosition 		; restore code position
.9134	20 69 a5	jsr $a569			jsr 	StackClose
.9137	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9138					GotoCommand:
.9138	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.913a	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.913d					GotoStackX:
.913d	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9140	48		pha				pha 								; it is slightly inefficient, just in cases.
.9141	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9144	fa		plx				plx
.9145	20 f6 a4	jsr $a4f6			jsr 	MemorySearch 				; transfer to line number AX.
.9148	90 05		bcc $914f			bcc 	_GotoError 					; not found, off end.
.914a	d0 03		bne $914f			bne 	_GotoError 					; not found exactly
.914c	4c 78 94	jmp $9478			jmp 	RunNewLine 					; and go straight to new line code.
.914f					_GotoError:
.914f	a9 0d		lda #$0d		lda	#13
.9151	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9154					IfCommand:
.9154	a2 00		ldx #$00			ldx 	#0 							; If what.
.9156	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber
.9159	b1 30		lda ($30),y			lda 	(codePtr),y
.915b	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.915d	d0 0a		bne $9169			bne 	_IFStructured
.915f	c8		iny				iny 								; consume THEN
.9160	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; is it zero
.9163	f0 01		beq $9166			beq 	_IfFail 					; if fail, go to next line
.9165	60		rts				rts 								; if THEN just continue
.9166					_IfFail:
.9166	4c dd 94	jmp $94dd			jmp 	EOLCommand
.9169					_IfStructured:
.9169	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; is it zero
.916c	d0 07		bne $9175			bne 	_IfExit 					; if not, then continue normally.
.916e	a9 b0		lda #$b0			lda 	#KWD_ELSE 					; look for else/endif
.9170	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.9172	20 51 98	jsr $9851			jsr 	ScanForward 				; and run from there/
.9175					_IfExit:
.9175	60		rts				rts
.9176					ElseCode:
.9176	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9178	aa		tax				tax 								; so just go to the structure exit
.9179	20 51 98	jsr $9851			jsr 	ScanForward
.917c	60		rts				rts
.917d					EndIf:
.917d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.917e					LetCommand:
.917e	a2 00		ldx #$00			ldx 	#0
.9180	b1 30		lda ($30),y			lda 	(codePtr),y
.9182	c9 10		cmp #$10			cmp 	#KWD_AT
.9184	d0 16		bne $919c			bne 	_LCStandard
.9186	c8		iny				iny 								; skip equal
.9187	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm 				; get a number
.918a	20 fd 9d	jsr $9dfd			jsr 	Dereference 				; dereference it
.918d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9190	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9192	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9195	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9197	d0 10		bne $91a9			bne 	_LCMain
.9199	4c 8f b2	jmp $b28f			jmp 	TypeError 					; was a reference before.
.919c					_LCStandard:
.919c	ad d0 9c	lda $9cd0			lda 	PrecedenceLevel+"*"			; precedence > this
.919f	20 ea 9c	jsr $9cea			jsr 	EvaluateExpressionAtPrecedence
.91a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91a5	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91a7	f0 0e		beq $91b7			beq 	_LetGoProc 					; it's a procedure call.
.91a9					_LCMain:
.91a9	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91ab	20 af ac	jsr $acaf			jsr 	CheckNextA
.91ae	e8		inx				inx 								; RHS
.91af	20 e2 a3	jsr $a3e2			jsr 	EvaluateValue
.91b2	ca		dex				dex
.91b3	20 ba 91	jsr $91ba			jsr 	AssignVariable
.91b6	60		rts				rts
.91b7					_LetGoProc:
.91b7	4c 53 93	jmp $9353			jmp 	CallProcedure
.91ba					AssignVariable:
.91ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91bd	48		pha				pha 								; save a copy
.91be	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91c1	29 10		and #$10			and 	#NSBIsString
.91c3	d0 0b		bne $91d0			bne 	_ASError
.91c5	68		pla				pla 								; get back
.91c6	29 10		and #$10			and 	#NSBIsString 				; check type
.91c8	d0 03		bne $91cd			bne 	_ASString
.91ca	4c 25 9d	jmp $9d25			jmp 	AssignNumber
.91cd					_ASString:
.91cd	4c 93 9d	jmp $9d93			jmp 	AssignString
.91d0					_ASError:
.91d0	4c 8f b2	jmp $b28f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91d3					Command_List:
.91d3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91d6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91d9	a9 ff		lda #$ff			lda 	#$FF
.91db	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91de	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91e1	b1 30		lda ($30),y			lda 	(codePtr),y
.91e3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91e5	f0 1e		beq $9205			beq 	_CLSecond
.91e7	20 63 92	jsr $9263			jsr 	CLIsDigit 					; if not digit, list all
.91ea	b0 24		bcs $9210			bcs 	_CLStart
.91ec	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91ee	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.91f1	b1 30		lda ($30),y			lda 	(codePtr),y
.91f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91f5	f0 0e		beq $9205			beq 	_CLSecond 					; if so go get it
.91f7	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.91fa	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91fd	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9200	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9203	80 0b		bra $9210			bra 	_CLStart
.9205					_CLSecond:
.9205	c8		iny				iny 								; consume comma
.9206	20 63 92	jsr $9263			jsr 	CLIsDigit 					; digit found
.9209	b0 05		bcs $9210			bcs 	_CLStart 					; if not, continue listing
.920b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.920d	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger
.9210					_CLStart
.9210	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9212	85 30		sta $30				sta 	codePtr
.9214	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9216	85 31		sta $31				sta 	codePtr+1
.9218					_CLLoop:
.9218	20 79 b4	jsr $b479			jsr 	EXTBreakCheck 				; break check
.921b	f0 30		beq $924d			beq 	_CLExit
.921d	b2 30		lda ($30)			lda 	(codePtr)
.921f	f0 2c		beq $924d			beq 	_CLExit
.9221	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9223	20 50 92	jsr $9250			jsr 	CLCompareLineNo
.9226	90 18		bcc $9240			bcc 	_CLNext
.9228	a2 07		ldx #$07			ldx 	#7
.922a	20 50 92	jsr $9250			jsr 	CLCompareLineNo
.922d	f0 02		beq $9231			beq 	_CLDoThisOne
.922f	b0 0f		bcs $9240			bcs 	_CLNext
.9231					_CLDoThisOne:
.9231	20 ad 96	jsr $96ad			jsr 	ListConvertLine 			; convert line into token Buffer
.9234	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9236	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9238	20 38 99	jsr $9938			jsr 	PrintStringXA
.923b	a9 0d		lda #$0d			lda 	#13 						; new line
.923d	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.9240					_CLNext:
.9240	18		clc				clc
.9241	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9243	65 30		adc $30				adc 	codePtr
.9245	85 30		sta $30				sta 	codePtr
.9247	90 02		bcc $924b			bcc 	_CREExit
.9249	e6 31		inc $31				inc 	codePtr+1
.924b					_CREExit:
.924b	80 cb		bra $9218			bra 	_CLLoop
.924d					_CLExit:
.924d	4c 09 8c	jmp $8c09			jmp 	WarmStart
.9250					CLCompareLineNo:
.9250	38		sec				sec
.9251	a0 01		ldy #$01			ldy 	#1
.9253	b1 30		lda ($30),y			lda 	(codePtr),y
.9255	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9258	85 36		sta $36				sta 	zTemp0
.925a	c8		iny				iny
.925b	b1 30		lda ($30),y			lda 	(codePtr),y
.925d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9260	05 36		ora $36				ora 	zTemp0
.9262	60		rts				rts
.9263					CLIsDigit:
.9263	b1 30		lda ($30),y			lda 	(codePtr),y
.9265	c9 30		cmp #$30			cmp 	#"0"
.9267	90 03		bcc $926c			bcc	 	_CLIDExitFalse
.9269	c9 3a		cmp #$3a			cmp 	#"9"+1
.926b	60		rts				rts
.926c					_CLIDExitFalse:
.926c	38		sec				sec
.926d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.926e					Command_LOCAL:
.926e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9270	20 7c 92	jsr $927c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9273	b1 30		lda ($30),y			lda 	(codePtr),y
.9275	c8		iny				iny
.9276	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9278	f0 f4		beq $926e			beq 	Command_LOCAL
.927a	88		dey				dey 								; unpick pre-get
.927b	60		rts				rts
.927c					LocaliseNextTerm:
.927c	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm 				; evaluate the term
.927f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9282	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9284	f0 69		beq $92ef			beq		_LNTError
.9286	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9289	85 36		sta $36				sta 	zTemp0
.928b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.928e	85 37		sta $37				sta  	zTemp0+1
.9290	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9293	29 10		and #$10			and 	#NSBIsString
.9295	d0 22		bne $92b9			bne 	_LNTPushString
.9297	5a		phy				phy
.9298	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.929a					_LNTPushNumLoop:
.929a	b1 36		lda ($36),y			lda		(zTemp0),y
.929c	20 29 a5	jsr $a529			jsr 	StackPushByte
.929f	a9 00		lda #$00			lda 	#0
.92a1	91 36		sta ($36),y			sta 	(zTemp0),y
.92a3	c8		iny				iny
.92a4	c0 05		cpy #$05			cpy 	#5
.92a6	d0 f2		bne $929a			bne 	_LNTPushNumLoop
.92a8	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92aa	20 29 a5	jsr $a529			jsr 	StackPushByte
.92ad	a5 37		lda $37				lda 	zTemp0+1
.92af	20 29 a5	jsr $a529			jsr 	StackPushByte
.92b2	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92b4	20 29 a5	jsr $a529			jsr 	StackPushByte
.92b7	7a		ply				ply
.92b8	60		rts				rts
.92b9					_LNTPushString:
.92b9	5a		phy				phy
.92ba	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92bc	85 38		sta $38				sta 	zTemp1
.92be	a0 01		ldy #$01			ldy 	#1
.92c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c2	85 39		sta $39				sta 	zTemp1+1
.92c4	a0 00		ldy #$00			ldy 	#0 							; output string
.92c6	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92c8	f0 0a		beq $92d4			beq 	_LNTStringOut
.92ca					_LNTPushStrLoop:
.92ca	b1 38		lda ($38),y			lda 	(zTemp1),y
.92cc	f0 06		beq $92d4			beq 	_LNTStringOut
.92ce	20 29 a5	jsr $a529			jsr 	StackPushByte
.92d1	c8		iny				iny
.92d2	80 f6		bra $92ca			bra 	_LNTPushStrLoop
.92d4					_LNTStringOut:
.92d4	98		tya				tya									; output length
.92d5	20 29 a5	jsr $a529			jsr 	StackPushByte
.92d8	a9 00		lda #$00			lda 	#0 							; clear original string.
.92da	92 38		sta ($38)			sta 	(zTemp1)
.92dc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92df	20 29 a5	jsr $a529			jsr 	StackPushByte
.92e2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92e5	20 29 a5	jsr $a529			jsr 	StackPushByte
.92e8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92ea	20 29 a5	jsr $a529			jsr 	StackPushByte
.92ed	7a		ply				ply
.92ee	60		rts				rts
.92ef					_LNTError:
.92ef	4c 85 b2	jmp $b285			jmp 	SyntaxError
.ac46					LocalPopValue:
.ac46	20 42 a5	jsr $a542			jsr 	StackPopByte
.ac49	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ac4b	d0 17		bne $ac64			bne 	_LPVString
.ac4d	20 42 a5	jsr $a542			jsr 	StackPopByte 				; address
.ac50	85 37		sta $37				sta 	zTemp0+1
.ac52	20 42 a5	jsr $a542			jsr 	StackPopByte
.ac55	85 36		sta $36				sta 	zTemp0
.ac57	5a		phy				phy
.ac58	a0 04		ldy #$04			ldy 	#4 							; copy back
.ac5a					_LPVNumberCopy:
.ac5a	20 42 a5	jsr $a542			jsr 	StackPopByte
.ac5d	91 36		sta ($36),y			sta 	(zTemp0),y
.ac5f	88		dey				dey
.ac60	10 f8		bpl $ac5a			bpl 	_LPVNumberCopy
.ac62	7a		ply				ply 								; and complete
.ac63	60		rts				rts
.ac64					_LPVString:
.ac64	20 42 a5	jsr $a542			jsr 	StackPopByte 				; address of record => zTemp0
.ac67	85 37		sta $37				sta 	zTemp0+1
.ac69	20 42 a5	jsr $a542			jsr 	StackPopByte
.ac6c	85 36		sta $36				sta 	zTemp0
.ac6e	5a		phy				phy
.ac6f	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ac71	85 38		sta $38				sta 	zTemp1
.ac73	a0 01		ldy #$01			ldy 	#1
.ac75	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac77	85 39		sta $39				sta 	zTemp1+1
.ac79	20 42 a5	jsr $a542			jsr 	StackPopByte 				; # to get => y
.ac7c	a8		tay				tay
.ac7d	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ac7f	f0 0e		beq $ac8f			beq 	_LPVStringCopied
.ac81	a9 00		lda #$00			lda 	#0 							; NULL on end
.ac83	91 38		sta ($38),y			sta 	(zTemp1),y
.ac85					_LPVStringCopy:
.ac85	88		dey				dey
.ac86	30 07		bmi $ac8f			bmi 	_LPVStringCopied
.ac88	20 42 a5	jsr $a542			jsr 	StackPopByte
.ac8b	91 38		sta ($38),y			sta 	(zTemp1),y
.ac8d	80 f6		bra $ac85			bra 	_LPVStringCopy
.ac8f					_LPVStringCopied:
.ac8f	fa		plx				plx
.ac90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92f2					NewCommand:
.92f2	20 d4 a4	jsr $a4d4			jsr 	MemoryNew
.92f5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.92f8	20 a2 8c	jsr $8ca2			jsr 	ClearCommand 				; clear everything.
.92fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.92fc					Command_Print:
.92fc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.92fd					_CPLoop:
.92fd	08		php				php 								; save last action flag
.92fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9300	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9302	f0 46		beq $934a			beq 	_CPExit
.9304	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9306	f0 42		beq $934a			beq 	_CPExit
.9308	68		pla				pla 								; throw last action flag
.9309	b1 30		lda ($30),y			lda 	(codePtr),y
.930b	c8		iny				iny
.930c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.930e	f0 37		beq $9347			beq 	_CPContinueWithSameLine
.9310	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9312	f0 2e		beq $9342			beq 	_CPTab
.9314	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9316	f0 26		beq $933e			beq 	_CPNewLine
.9318	88		dey				dey 								; undo the get.
.9319	a2 00		ldx #$00			ldx 	#0
.931b	20 e2 a3	jsr $a3e2			jsr 	EvaluateValue 				; get a value into slot 0
.931e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9321	29 10		and #$10			and 	#NSBIsString
.9323	f0 0b		beq $9330			beq 	_CPNumber
.9325	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9328	ad 08 04	lda $0408			lda 	NSMantissa0
.932b	20 38 99	jsr $9938			jsr 	PrintStringXA
.932e	80 cc		bra $92fc			bra 	Command_Print 				; loop round clearing carry so NL if end
.9330					_CPNumber:
.9330	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9332	20 b8 a2	jsr $a2b8			jsr 	ConvertNumberToString 		; convert to string
.9335	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9337	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9339	20 38 99	jsr $9938			jsr 	PrintStringXA
.933c	80 be		bra $92fc			bra 	Command_Print 				; loop round clearing carry so NL if end
.933e					_CPNewLine:
.933e	a9 0d		lda #$0d			lda 	#13
.9340	80 02		bra $9344			bra 	_CPPrintChar
.9342					_CPTab:
.9342	a9 09		lda #$09			lda 	#9 							; print TAB
.9344					_CPPrintChar:
.9344	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.9347					_CPContinueWithSameLine:
.9347	38		sec				sec 								; loop round with carry set, which
.9348	80 b3		bra $92fd			bra 	_CPLoop 					; will inhibit final CR
.934a					_CPExit:
.934a	28		plp				plp 								; get last action flag
.934b	b0 05		bcs $9352			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.934d	a9 0d		lda #$0d			lda 	#13 						; print new line
.934f	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.9352					_CPExit2:
.9352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9353					CallProcedure:
.9353	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9355	b1 30		lda ($30),y			lda 	(codePtr),y
.9357	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9359	f0 0c		beq $9367			beq 	_CPEndParam
.935b					_CPParamLoop:
.935b	20 e8 9c	jsr $9ce8			jsr 	EvaluateExpression 			; get parameter onto stack
.935e	e8		inx				inx 								; bump next stack
.935f	b1 30		lda ($30),y			lda 	(codePtr),y
.9361	c8		iny				iny
.9362	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9364	f0 f5		beq $935b			beq 	_CPParamLoop
.9366	88		dey				dey 								; unpick.
.9367					_CPEndParam:
.9367	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.936a	c8		iny				iny									; skip right bracket
.936b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.936d	20 4b a5	jsr $a54b			jsr 	StackOpen
.9370	20 8f a5	jsr $a58f			jsr 	STKSaveCodePosition 		; save loop position
.9373	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9376	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9378	ad 10 04	lda $0410			lda 	NSMantissa1
.937b	85 37		sta $37				sta 	zTemp0+1
.937d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.937f	b2 36		lda ($36)			lda 	(zTemp0)
.9381	85 30		sta $30				sta 	safePtr
.9383	b1 36		lda ($36),y			lda 	(zTemp0),y
.9385	85 31		sta $31				sta 	safePtr+1
.9387	c8		iny				iny
.9388	b1 36		lda ($36),y			lda 	(zTemp0),y
.938a	85 32		sta $32				sta 	safePtr+2
.938c	c8		iny				iny
.938d	b1 36		lda ($36),y			lda 	(zTemp0),y
.938f	85 33		sta $33				sta 	safePtr+3
.9391	c8		iny				iny 								; get Y offset -> Y
.9392	b1 36		lda ($36),y			lda 	(zTemp0),y
.9394	a8		tay				tay
.9395	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9397	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.939a	f0 13		beq $93af			beq 	_ParamExit 					; if so, exit.
.939c					_ParamExtract:
.939c	ca		dex				dex 								; put a local term on the level before
.939d	20 7c 92	jsr $927c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93a0	20 ba 91	jsr $91ba			jsr 	AssignVariable 				; assign stacked value to the variable.
.93a3	e8		inx				inx 								; advance to next parameter to do.
.93a4	e8		inx				inx
.93a5	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93a8	f0 05		beq $93af			beq 	_ParamExit
.93aa	20 a7 ac	jsr $aca7			jsr 	CheckComma 					; comma seperating parameters
.93ad	80 ed		bra $939c			bra 	_ParamExtract
.93af					_ParamExit:
.93af	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; check )
.93b2	60		rts				rts 								; and continue from here
.ac91					Command_ENDPROC:
.ac91	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ac93	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ac95	20 77 a5	jsr $a577			jsr 	StackCheckFrame
.ac98	20 a0 a5	jsr $a5a0			jsr 	STKLoadCodePosition 		; restore code position
.ac9b	20 69 a5	jsr $a569			jsr 	StackClose
.ac9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93b3					Command_Read:
.93b3	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93b5	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm
.93b8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93bb	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93bd	f0 4a		beq $9409			beq 	_CRSyntax 					; check reference (bit 0)
.93bf	20 52 94	jsr $9452			jsr 	SwapDataCodePtrs 			; swap code and data
.93c2	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93c5	d0 20		bne $93e7			bne 	_CRContinueData
.93c7					_CRKeepSearching:
.93c7	a9 ad		lda #$ad			lda 	#KWD_DATA 					; scan for instruction
.93c9	aa		tax				tax
.93ca	20 51 98	jsr $9851			jsr 	ScanForward
.93cd	c9 ad		cmp #$ad			cmp 	#KWD_DATA 					; found data ?
.93cf	f0 16		beq $93e7			beq 	_CRHaveData 				; found it
.93d1	18		clc				clc
.93d2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93d4	65 30		adc $30				adc 	codePtr
.93d6	85 30		sta $30				sta 	codePtr
.93d8	90 02		bcc $93dc			bcc 	_CREExit
.93da	e6 31		inc $31				inc 	codePtr+1
.93dc					_CREExit:
.93dc	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93de	b2 30		lda ($30)			lda 	(codePtr)
.93e0	d0 e5		bne $93c7			bne 	_CRKeepSearching
.93e2	a9 0b		lda #$0b		lda	#11
.93e4	4c df 98	jmp $98df		jmp	ErrorHandler
.93e7					_CRHaveData:
.93e7					_CRContinueData:
.93e7	a2 01		ldx #$01			ldx 	#1
.93e9	20 e2 a3	jsr $a3e2			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93ec	ca		dex				dex
.93ed	20 ba 91	jsr $91ba			jsr		AssignVariable 				; do the assignment
.93f0	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93f3	b1 30		lda ($30),y			lda 	(codePtr),y
.93f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93f7	d0 04		bne $93fd			bne 	_CRSwapBack
.93f9	c8		iny				iny 								; consume comma
.93fa	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.93fd					_CRSwapBack:
.93fd	20 52 94	jsr $9452			jsr 	SwapDataCodePtrs			; swap them back.
.9400	b1 30		lda ($30),y			lda 	(codePtr),y
.9402	c8		iny				iny
.9403	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9405	f0 ac		beq $93b3			beq 	Command_Read 				; if so go round again.
.9407	88		dey				dey 								; unpick get.
.9408	60		rts				rts
.9409					_CRSyntax:
.9409	4c 85 b2	jmp $b285			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.940c					RemCommand:
.940c	b1 30		lda ($30),y			lda 	(codePtr),y
.940e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9410	d0 06		bne $9418			bne 	_RMExit
.9412	c8		iny				iny
.9413	98		tya				tya
.9414	38		sec				sec
.9415	71 30		adc ($30),y			adc 	(codePtr),y
.9417	a8		tay				tay
.9418					_RMExit:
.9418	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9419					Command_REPEAT:
.9419	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.941b	20 4b a5	jsr $a54b			jsr 	StackOpen
.941e	20 8f a5	jsr $a58f			jsr 	STKSaveCodePosition 		; save loop position
.9421	60		rts				rts
.9422					Command_UNTIL:
.9422	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9424	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9426	20 77 a5	jsr $a577			jsr 	StackCheckFrame
.9429	a2 00		ldx #$00			ldx 	#0
.942b	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; work out the number
.942e	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; check if zero
.9431	f0 04		beq $9437			beq 	_CULoopBack 				; if so keep looping
.9433	20 69 a5	jsr $a569			jsr 	StackClose		 			; return
.9436	60		rts				rts
.9437					_CULoopBack:
.9437	20 a0 a5	jsr $a5a0			jsr 	STKLoadCodePosition 		; loop back
.943a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.943b					Command_Restore:
.943b	20 52 94	jsr $9452			jsr 	SwapDataCodePtrs 			; swap code and data
.943e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9440	85 30		sta $30				sta 	codePtr
.9442	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9444	85 31		sta $31				sta 	codePtr+1
.9446	20 52 94	jsr $9452			jsr 	SwapDataCodePtrs 			; put them back
.9449	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.944b	8d 9b 04	sta $049b			sta 	dataPointer+4
.944e	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9451	60		rts				rts
.9452					SwapDataCodePtrs:
.9452	da		phx				phx
.9453	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9455					_SDCPLoop:
.9455	b5 30		lda $30,x			lda 	safePtr,x
.9457	48		pha				pha
.9458	bd 97 04	lda $0497,x			lda 	dataPointer,x
.945b	95 30		sta $30,x			sta 	safePtr,x
.945d	68		pla				pla
.945e	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9461	ca		dex				dex
.9462	10 f1		bpl $9455			bpl 	_SDCPLoop
.9464	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9467	8c 9b 04	sty $049b			sty 	dataPointer+4
.946a	a8		tay				tay
.946b	fa		plx				plx
.946c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.946d					CommandRUN:
.946d	20 a2 8c	jsr $8ca2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9470	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9472	85 30		sta $30				sta 	codePtr
.9474	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9476	85 31		sta $31				sta 	codePtr+1
.9478					RUNNewLine:
.9478	b2 30		lda ($30)			lda 	(codePtr)
.947a	f0 5e		beq $94da			beq 	CRNoProgram         		; no then END.
.947c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.947e	9a		txs				txs
.947f					RUNCodePointerLine:
.947f	a0 02		ldy #$02			ldy 	#2 							; start of program
.9481					_CRIncMainLoop:
.9481	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9484	d0 05		bne $948b			bne 	_CRNoBreakCheck
.9486	20 79 b4	jsr $b479			jsr 	EXTBreakCheck 				; break check
.9489	f0 4a		beq $94d5			beq 	_CRBreak
.948b					_CRNoBreakCheck:
.948b	c8		iny				iny
.948c					_CRMainLoop:
.948c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.948f	b1 30		lda ($30),y			lda 	(codePtr),y
.9491	10 10		bpl $94a3			bpl 	_CRNotKeyword
.9493	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9495	b0 04		bcs $949b			bcs 	_CRIsKeyword
.9497	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9499	b0 34		bcs $94cf			bcs		_CRSyntaxError
.949b					_CRIsKeyword:
.949b	c8		iny				iny 								; consume command
.949c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.949d	aa		tax				tax 								; put in X for vector jump
.949e	20 d2 94	jsr $94d2			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94a1	80 e9		bra $948c			bra 	_CRMainLoop 				; and loop round
.94a3					_CRNotKeyword:
.94a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94a5	f0 da		beq $9481			beq 	_CRIncMainLoop
.94a7	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94a9	90 05		bcc $94b0			bcc 	_CRNotVariable
.94ab					_CRGoLet:
.94ab	20 7e 91	jsr $917e			jsr 	LetCommand
.94ae	80 dc		bra $948c			bra 	_CRMainLoop
.94b0					_CRNotVariable:
.94b0	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94b2	f0 f7		beq $94ab			beq 	_CRGoLet
.94b4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94b6	f0 f3		beq $94ab			beq 	_CRGoLet
.94b8	c9 21		cmp #$21			cmp 	#KWD_PLING
.94ba	f0 ef		beq $94ab			beq 	_CRGoLet
.94bc	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94be	f0 09		beq $94c9			beq 	_CRGoRem
.94c0	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94c2	d0 0b		bne $94cf			bne 	_CRSyntaxError
.94c4	20 42 8b	jsr $8b42			jsr 	LabelHere
.94c7	80 c3		bra $948c			bra 	_CRMainLoop
.94c9					_CRGoRem:
.94c9	c8		iny				iny
.94ca	20 0c 94	jsr $940c			jsr 	RemCommand
.94cd	80 bd		bra $948c			bra 	_CRMainLoop
.94cf					_CRSyntaxError:
.94cf	4c 85 b2	jmp $b285			jmp 	SyntaxError
.94d2					_CRCallVector0:
.94d2	7c 7e 95	jmp ($957e,x)			jmp 	(VectorSet0,x)
.94d5					_CRBreak:
.94d5	a9 01		lda #$01		lda	#1
.94d7	4c df 98	jmp $98df		jmp	ErrorHandler
.94da					CRNoProgram:
.94da	4c bf 8d	jmp $8dbf			jmp 	EndCommand
.94dd					EOLCommand:
.94dd	18		clc				clc
.94de	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94e0	65 30		adc $30				adc 	codePtr
.94e2	85 30		sta $30				sta 	codePtr
.94e4	90 02		bcc $94e8			bcc 	_CREExit
.94e6	e6 31		inc $31				inc 	codePtr+1
.94e8					_CREExit:
.94e8	80 8e		bra $9478			bra 	RunNewLine
.94ea					Shift1Command:
.94ea	b1 30		lda ($30),y			lda 	(codePtr),y
.94ec	c8		iny				iny
.94ed	0a		asl a				asl 	a
.94ee	aa		tax				tax
.94ef	7c 06 96	jmp ($9606,x)			jmp 	(VectorSet1,x)
.94f2					Shift2Command:
.94f2	b1 30		lda ($30),y			lda 	(codePtr),y
.94f4	c8		iny				iny
.94f5	0a		asl a				asl 	a
.94f6	aa		tax				tax
.94f7	7c 20 96	jmp ($9620,x)			jmp 	(VectorSet2,x)
.94fa					Unused1:
.94fa					Unused2:
.94fa					Unused3:
.94fa					Unused4:
.94fa	4c 85 b2	jmp $b285			jmp 	SyntaxError
>94fd							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94fe					VectorSetPunc:
>94fe	89 9a					.word	ShiftLeft                        ; $00 <<
>9500	83 99					.word	BinaryCompareLessEqual           ; $01 <=
>9502	79 99					.word	BinaryCompareNotEqual            ; $02 <>
>9504	85 b2					.word	SyntaxError                      ; $03 !!3
>9506	85 b2					.word	SyntaxError                      ; $04 ><
>9508	8d 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>950a	8c 9a					.word	ShiftRight                       ; $06 >>
>950c	85 b2					.word	SyntaxError                      ; $07 !!7
>950e	85 b2					.word	SyntaxError                      ; $08 !!8
>9510	85 b2					.word	SyntaxError                      ; $09 !!9
>9512	85 b2					.word	SyntaxError                      ; $0a !!10
>9514	85 b2					.word	SyntaxError                      ; $0b !!11
>9516	85 b2					.word	SyntaxError                      ; $0c !!12
>9518	85 b2					.word	SyntaxError                      ; $0d !!13
>951a	85 b2					.word	SyntaxError                      ; $0e !!14
>951c	85 b2					.word	SyntaxError                      ; $0f !!15
>951e	85 b2					.word	SyntaxError                      ; $10 @
>9520	85 b2					.word	SyntaxError                      ; $11 !!17
>9522	85 b2					.word	SyntaxError                      ; $12 !!18
>9524	85 b2					.word	SyntaxError                      ; $13 [
>9526	b8 ac					.word	IntegerDivide                    ; $14 \
>9528	85 b2					.word	SyntaxError                      ; $15 ]
>952a	12 9c					.word	EorInteger                       ; $16 ^
>952c	85 b2					.word	SyntaxError                      ; $17 _
>952e	85 b2					.word	SyntaxError                      ; $18 `
>9530	85 b2					.word	SyntaxError                      ; $19 !!25
>9532	85 b2					.word	SyntaxError                      ; $1a !!26
>9534	85 b2					.word	SyntaxError                      ; $1b {
>9536	cc 9b					.word	OraInteger                       ; $1c |
>9538	85 b2					.word	SyntaxError                      ; $1d }
>953a	85 b2					.word	SyntaxError                      ; $1e ~
>953c	85 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>953e	85 b2					.word	SyntaxError                      ; $20
>9540	58 9c					.word	WordIndirect                     ; $21 !
>9542	85 b2					.word	SyntaxError                      ; $22 "
>9544	85 b2					.word	SyntaxError                      ; $23 #
>9546	85 b2					.word	SyntaxError                      ; $24 $
>9548	05 ad					.word	IntegerModulus                   ; $25 %
>954a	86 9b					.word	AndInteger                       ; $26 &
>954c	85 b2					.word	SyntaxError                      ; $27 '
>954e	85 b2					.word	SyntaxError                      ; $28 (
>9550	85 b2					.word	SyntaxError                      ; $29 )
>9552	7a ad					.word	MulInteger                       ; $2a *
>9554	20 9b					.word	AddInteger                       ; $2b +
>9556	85 b2					.word	SyntaxError                      ; $2c ,
>9558	5b 9b					.word	SubInteger                       ; $2d -
>955a	85 b2					.word	SyntaxError                      ; $2e .
>955c	11 af					.word	FDivideCommand                   ; $2f /
>955e	85 b2					.word	SyntaxError                      ; $30 0
>9560	85 b2					.word	SyntaxError                      ; $31 1
>9562	85 b2					.word	SyntaxError                      ; $32 2
>9564	85 b2					.word	SyntaxError                      ; $33 3
>9566	85 b2					.word	SyntaxError                      ; $34 4
>9568	85 b2					.word	SyntaxError                      ; $35 5
>956a	85 b2					.word	SyntaxError                      ; $36 6
>956c	85 b2					.word	SyntaxError                      ; $37 7
>956e	85 b2					.word	SyntaxError                      ; $38 8
>9570	85 b2					.word	SyntaxError                      ; $39 9
>9572	85 b2					.word	SyntaxError                      ; $3a :
>9574	85 b2					.word	SyntaxError                      ; $3b ;
>9576	65 99					.word	BinaryCompareLess                ; $3c <
>9578	5b 99					.word	BinaryCompareEqual               ; $3d =
>957a	6f 99					.word	BinaryCompareGreater             ; $3e >
>957c	7f 9c					.word	ByteIndirect                     ; $3f ?
.957e					VectorSet0:
>957e	dd 94					.word	EOLCommand                       ; $80 !0:EOF
>9580	ea 94					.word	Shift1Command                    ; $81 !1:SH1
>9582	f2 94					.word	Shift2Command                    ; $82 !2:SH2
>9584	57 b0					.word	AbsUnary                         ; $83 ABS(
>9586	49 a1					.word	AllocUnary                       ; $84 ALLOC(
>9588	67 b0					.word	AscUnary                         ; $85 ASC(
>958a	69 a2					.word	ChrUnary                         ; $86 CHR$(
>958c	85 b2					.word	SyntaxError                      ; $87 EVENT(
>958e	57 99					.word	UnaryFalse                       ; $88 FALSE
>9590	74 b0					.word	FracUnary                        ; $89 FRAC(
>9592	8a b0					.word	IntUnary                         ; $8a INT(
>9594	e0 b0					.word	IsValUnary                       ; $8b ISVAL(
>9596	43 a3					.word	Unary_Left                       ; $8c LEFT$(
>9598	9c b0					.word	LenUnary                         ; $8d LEN(
>959a	6d a3					.word	Unary_Mid                        ; $8e MID$(
>959c	b9 a1					.word	Unary_Not                        ; $8f NOT(
>959e	85 b2					.word	SyntaxError                      ; $90 OFF
>95a0	85 b2					.word	SyntaxError                      ; $91 ON
>95a2	cf a1					.word	Unary_Random                     ; $92 RANDOM(
>95a4	53 a3					.word	Unary_Right                      ; $93 RIGHT$(
>95a6	e8 a1					.word	Unary_Rnd                        ; $94 RND(
>95a8	b6 b0					.word	SgnUnary                         ; $95 SGN(
>95aa	7b a2					.word	SpcUnary                         ; $96 SPC(
>95ac	96 a2					.word	Unary_Str                        ; $97 STR$(
>95ae	85 b2					.word	SyntaxError                      ; $98 TIMER(
>95b0	4b 99					.word	UnaryTrue                        ; $99 TRUE
>95b2	d6 b0					.word	ValUnary                         ; $9a VAL(
>95b4	c2 8d					.word	ForCommand                       ; $9b FOR
>95b6	54 91					.word	IfCommand                        ; $9c IF
>95b8	fa 94					.word	Unused1                          ; $9d PROC
>95ba	19 94					.word	Command_REPEAT                   ; $9e REPEAT
>95bc	b0 98					.word	Command_WHILE                    ; $9f WHILE
>95be	7d 91					.word	EndIf                            ; $a0 ENDIF
>95c0	91 ac					.word	Command_ENDPROC                  ; $a1 ENDPROC
>95c2	7c 8e					.word	NextCommand                      ; $a2 NEXT
>95c4	fa 94					.word	Unused4                          ; $a3 THEN
>95c6	22 94					.word	Command_UNTIL                    ; $a4 UNTIL
>95c8	d1 98					.word	Command_WEND                     ; $a5 WEND
>95ca	85 b2					.word	SyntaxError                      ; $a6 BY
>95cc	68 8c					.word	CallCommand                      ; $a7 CALL
>95ce	d9 8e					.word	CircleCommand                    ; $a8 CIRCLE
>95d0	a2 8c					.word	ClearCommand                     ; $a9 CLEAR
>95d2	85 b2					.word	SyntaxError                      ; $aa CLS
>95d4	85 b2					.word	SyntaxError                      ; $ab COLOR
>95d6	85 b2					.word	SyntaxError                      ; $ac COLOUR
>95d8	fa 8c					.word	Command_Data                     ; $ad DATA
>95da	02 8d					.word	DimCommand                       ; $ae DIM
>95dc	fa 94					.word	Unused3                          ; $af DOWNTO
>95de	76 91					.word	ElseCode                         ; $b0 ELSE
>95e0	85 b2					.word	SyntaxError                      ; $b1 FROM
>95e2	e8 90					.word	GfxCommand                       ; $b2 GFX
>95e4	1a 91					.word	Command_GOSUB                    ; $b3 GOSUB
>95e6	38 91					.word	GotoCommand                      ; $b4 GOTO
>95e8	85 b2					.word	SyntaxError                      ; $b5 HERE
>95ea	fc 8e					.word	ImageCommand                     ; $b6 IMAGE
>95ec	7e 91					.word	LetCommand                       ; $b7 LET
>95ee	4a 8f					.word	LineCommand                      ; $b8 LINE
>95f0	6e 92					.word	Command_LOCAL                    ; $b9 LOCAL
>95f2	85 b2					.word	SyntaxError                      ; $ba OUTLINE
>95f4	fc 92					.word	Command_Print                    ; $bb PRINT
>95f6	b3 93					.word	Command_Read                     ; $bc READ
>95f8	d5 8e					.word	RectangleCommand                 ; $bd RECT
>95fa	0c 94					.word	RemCommand                       ; $be REM
>95fc	2a 91					.word	Command_RETURN                   ; $bf RETURN
>95fe	85 b2					.word	SyntaxError                      ; $c0 SOLID
>9600	e4 8e					.word	SpriteCommand                    ; $c1 SPRITE
>9602	19 8f					.word	TextCommand                      ; $c2 TEXT
>9604	fa 94					.word	Unused2                          ; $c3 TO
.9606					VectorSet1:
>9606	85 b2					.word	SyntaxError                      ; $80 !0:EOF
>9608	85 b2					.word	SyntaxError                      ; $81 !1:SH1
>960a	85 b2					.word	SyntaxError                      ; $82 !2:SH2
>960c	39 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>960e	58 8c					.word	AssertCommand                    ; $84 ASSERT
>9610	88 90					.word	BitmapCtrl                       ; $85 BITMAP
>9612	bf 8d					.word	EndCommand                       ; $86 END
>9614	d3 91					.word	Command_List                     ; $87 LIST
>9616	f2 92					.word	NewCommand                       ; $88 NEW
>9618	3b 94					.word	Command_Restore                  ; $89 RESTORE
>961a	6d 94					.word	CommandRUN                       ; $8a RUN
>961c	cd 90					.word	SpritesCtrl                      ; $8b SPRITES
>961e	a8 96					.word	StopCommand                      ; $8c STOP
.9620					VectorSet2:
>9620	85 b2					.word	SyntaxError                      ; $80 !0:EOF
>9622	85 b2					.word	SyntaxError                      ; $81 !1:SH1
>9624	85 b2					.word	SyntaxError                      ; $82 !2:SH2
>9626	44 b1					.word	Assemble_adc                     ; $83 ADC
>9628	3c b1					.word	Assemble_and                     ; $84 AND
>962a	58 b1					.word	Assemble_asl                     ; $85 ASL
>962c	c2 b1					.word	Assemble_bcc                     ; $86 BCC
>962e	c6 b1					.word	Assemble_bcs                     ; $87 BCS
>9630	ce b1					.word	Assemble_beq                     ; $88 BEQ
>9632	85 b1					.word	Assemble_bit                     ; $89 BIT
>9634	b6 b1					.word	Assemble_bmi                     ; $8a BMI
>9636	ca b1					.word	Assemble_bne                     ; $8b BNE
>9638	b2 b1					.word	Assemble_bpl                     ; $8c BPL
>963a	d2 b1					.word	Assemble_bra                     ; $8d BRA
>963c	d6 b1					.word	Assemble_brk                     ; $8e BRK
>963e	ba b1					.word	Assemble_bvc                     ; $8f BVC
>9640	be b1					.word	Assemble_bvs                     ; $90 BVS
>9642	de b1					.word	Assemble_clc                     ; $91 CLC
>9644	32 b2					.word	Assemble_cld                     ; $92 CLD
>9646	f2 b1					.word	Assemble_cli                     ; $93 CLI
>9648	22 b2					.word	Assemble_clv                     ; $94 CLV
>964a	50 b1					.word	Assemble_cmp                     ; $95 CMP
>964c	99 b1					.word	Assemble_cpx                     ; $96 CPX
>964e	94 b1					.word	Assemble_cpy                     ; $97 CPY
>9650	76 b1					.word	Assemble_dec                     ; $98 DEC
>9652	2e b2					.word	Assemble_dex                     ; $99 DEX
>9654	0a b2					.word	Assemble_dey                     ; $9a DEY
>9656	40 b1					.word	Assemble_eor                     ; $9b EOR
>9658	7b b1					.word	Assemble_inc                     ; $9c INC
>965a	3e b2					.word	Assemble_inx                     ; $9d INX
>965c	2a b2					.word	Assemble_iny                     ; $9e INY
>965e	ad b1					.word	Assemble_jmp                     ; $9f JMP
>9660	a8 b1					.word	Assemble_jsr                     ; $a0 JSR
>9662	4c b1					.word	Assemble_lda                     ; $a1 LDA
>9664	71 b1					.word	Assemble_ldx                     ; $a2 LDX
>9666	8f b1					.word	Assemble_ldy                     ; $a3 LDY
>9668	62 b1					.word	Assemble_lsr                     ; $a4 LSR
>966a	42 b2					.word	Assemble_nop                     ; $a5 NOP
>966c	38 b1					.word	Assemble_ora                     ; $a6 ORA
>966e	ee b1					.word	Assemble_pha                     ; $a7 PHA
>9670	da b1					.word	Assemble_php                     ; $a8 PHP
>9672	36 b2					.word	Assemble_phx                     ; $a9 PHX
>9674	f6 b1					.word	Assemble_phy                     ; $aa PHY
>9676	fe b1					.word	Assemble_pla                     ; $ab PLA
>9678	e2 b1					.word	Assemble_plp                     ; $ac PLP
>967a	4a b2					.word	Assemble_plx                     ; $ad PLX
>967c	06 b2					.word	Assemble_ply                     ; $ae PLY
>967e	5d b1					.word	Assemble_rol                     ; $af ROL
>9680	67 b1					.word	Assemble_ror                     ; $b0 ROR
>9682	ea b1					.word	Assemble_rti                     ; $b1 RTI
>9684	fa b1					.word	Assemble_rts                     ; $b2 RTS
>9686	54 b1					.word	Assemble_sbc                     ; $b3 SBC
>9688	e6 b1					.word	Assemble_sec                     ; $b4 SEC
>968a	46 b2					.word	Assemble_sed                     ; $b5 SED
>968c	02 b2					.word	Assemble_sei                     ; $b6 SEI
>968e	48 b1					.word	Assemble_sta                     ; $b7 STA
>9690	3a b2					.word	Assemble_stp                     ; $b8 STP
>9692	6c b1					.word	Assemble_stx                     ; $b9 STX
>9694	8a b1					.word	Assemble_sty                     ; $ba STY
>9696	80 b1					.word	Assemble_stz                     ; $bb STZ
>9698	1e b2					.word	Assemble_tax                     ; $bc TAX
>969a	1a b2					.word	Assemble_tay                     ; $bd TAY
>969c	a3 b1					.word	Assemble_trb                     ; $be TRB
>969e	9e b1					.word	Assemble_tsb                     ; $bf TSB
>96a0	26 b2					.word	Assemble_tsx                     ; $c0 TSX
>96a2	0e b2					.word	Assemble_txa                     ; $c1 TXA
>96a4	16 b2					.word	Assemble_txs                     ; $c2 TXS
>96a6	12 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96a8					StopCommand:
.96a8	a9 08		lda #$08		lda	#8
.96aa	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96ad					ListConvertLine:
.96ad	9c 9d 04	stz $049d			stz 	tbOffset
.96b0	9c a9 04	stz $04a9			stz 	tokenBuffer
.96b3	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96b5	b1 30		lda ($30),y			lda 	(codePtr),y
.96b7	aa		tax				tax
.96b8	88		dey				dey
.96b9	b1 30		lda ($30),y			lda 	(codePtr),y
.96bb	20 fb ad	jsr $adfb			jsr 	ConvertInt16
.96be	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96c0	86 37		stx $37				stx 	zTemp0+1
.96c2	a0 00		ldy #$00			ldy 	#0
.96c4					_LCCopyNumber:
.96c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.96c6	20 c6 97	jsr $97c6			jsr 	LCLWrite
.96c9	c8		iny				iny
.96ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.96cc	d0 f6		bne $96c4			bne 	_LCCopyNumber
.96ce					_LCPadOut:
.96ce	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96d0	20 c6 97	jsr $97c6			jsr 	LCLWrite
.96d3	ad 9d 04	lda $049d			lda 	tbOffset
.96d6	c9 06		cmp #$06			cmp 	#6
.96d8	d0 f4		bne $96ce			bne 	_LCPadOut
.96da	a0 03		ldy #$03			ldy 	#3 							; start position.
.96dc					_LCMainLoop:
.96dc	b1 30		lda ($30),y			lda 	(codePtr),y
.96de	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.96e0	f0 17		beq $96f9			beq 	_LCExit
.96e2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.96e4	90 14		bcc $96fa			bcc 	_LCDoubles
.96e6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.96e8	90 20		bcc $970a			bcc 	_LCShiftPunc
.96ea	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.96ec	90 2b		bcc $9719			bcc 	_LCPunctuation
.96ee	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.96f0	90 2d		bcc $971f			bcc 	_LCIdentifiers
.96f2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.96f4	90 49		bcc $973f			bcc 	_LCTokens
.96f6	4c 9a 97	jmp $979a			jmp 	_LCData 					; 254-5 are data objects
.96f9					_LCExit:
.96f9	60		rts				rts
.96fa					_LCDoubles:
.96fa	48		pha				pha
.96fb	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.96fc	29 02		and #$02			and 	#2
.96fe	09 3c		ora #$3c			ora 	#60 						; make < >
.9700	20 c6 97	jsr $97c6			jsr 	LCLWrite
.9703	68		pla				pla 								; restore, do lower bit
.9704	29 03		and #$03			and 	#3
.9706	09 3c		ora #$3c			ora 	#60
.9708	80 0f		bra $9719			bra		_LCPunctuation 				; print, increment, loop
.970a					_LCShiftPunc:
.970a	aa		tax				tax 								; save in X
.970b	29 07		and #$07			and 	#7 							; lower 3 bits
.970d	f0 02		beq $9711			beq 	_LCNoAdd
.970f	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9711					_LCNoAdd:
.9711	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9713	90 02		bcc $9717			bcc 	_LCNoAdd2
.9715	09 20		ora #$20			ora 	#32 						; adds $20
.9717					_LCNoAdd2:
.9717	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9719					_LCPunctuation:
.9719	c8		iny				iny 								; consume character
.971a	20 c6 97	jsr $97c6			jsr 	LCLWrite 					; write it out.
.971d	80 bd		bra $96dc			bra 	_LCMainLoop 				; go round again.
.971f					_LCIdentifiers:
.971f	18		clc				clc 								; convert to physical address
.9720	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9722	85 37		sta $37				sta 	zTemp0+1
.9724	c8		iny				iny
.9725	b1 30		lda ($30),y			lda 	(codePtr),y
.9727	85 36		sta $36				sta 	zTemp0
.9729	c8		iny				iny
.972a	5a		phy				phy 								; save position
.972b	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.972d					_LCOutIdentifier:
.972d	c8		iny				iny
.972e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9730	29 7f		and #$7f			and 	#$7F
.9732	20 f4 97	jsr $97f4			jsr 	LCLLowerCase
.9735	20 c6 97	jsr $97c6			jsr 	LCLWrite
.9738	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.973a	10 f1		bpl $972d			bpl 	_LCOutIdentifier
.973c	7a		ply				ply 								; restore position
.973d	80 9d		bra $96dc			bra 	_LCMainLoop
.973f					_LCTokens:
.973f	aa		tax				tax 								; token in X
.9740	a9 4b		lda #$4b			lda 	#((KeywordSet2) & $FF)
.9742	85 36		sta $36				sta 	0+zTemp0
.9744	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.9746	85 37		sta $37				sta 	1+zTemp0
.9748	e0 82		cpx #$82			cpx 	#$82
.974a	f0 16		beq $9762			beq 	_LCUseShift
.974c	a9 fd		lda #$fd			lda 	#((KeywordSet1) & $FF)
.974e	85 36		sta $36				sta 	0+zTemp0
.9750	a9 a7		lda #$a7			lda 	#((KeywordSet1) >> 8)
.9752	85 37		sta $37				sta 	1+zTemp0
.9754	e0 81		cpx #$81			cpx 	#$81
.9756	f0 0a		beq $9762			beq 	_LCUseShift
.9758	a9 4e		lda #$4e			lda 	#((KeywordSet0) & $FF)
.975a	85 36		sta $36				sta 	0+zTemp0
.975c	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.975e	85 37		sta $37				sta 	1+zTemp0
.9760	80 01		bra $9763			bra 	_LCNoShift
.9762					_LCUseShift:
.9762	c8		iny				iny
.9763					_LCNoShift:
.9763	20 d5 97	jsr $97d5			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9766	b1 30		lda ($30),y			lda 	(codePtr),y
.9768	aa		tax				tax 								; into X
.9769					_LCFindText:
.9769	ca		dex				dex
.976a	10 0e		bpl $977a			bpl 	_LCFoundText 				; found text.
.976c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.976e	1a		inc a				inc 	a 							; one extra for size
.976f	38		sec				sec 								; one extra for checksum
.9770	65 36		adc $36				adc 	zTemp0 						; go to next token
.9772	85 36		sta $36				sta 	zTemp0
.9774	90 f3		bcc $9769			bcc 	_LCFindText
.9776	e6 37		inc $37				inc 	zTemp0+1
.9778	80 ef		bra $9769			bra 	_LCFindText
.977a					_LCFoundText:
.977a	5a		phy				phy 								; save List position
.977b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.977d	aa		tax				tax
.977e	a0 02		ldy #$02			ldy 	#2
.9780					_LCCopyToken:
.9780	b1 36		lda ($36),y			lda 	(zTemp0),y
.9782	20 f4 97	jsr $97f4			jsr 	LCLLowerCase
.9785	20 c6 97	jsr $97c6			jsr 	LCLWrite
.9788	c8		iny				iny
.9789	ca		dex				dex
.978a	d0 f4		bne $9780			bne 	_LCCopyToken
.978c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.978e	f0 05		beq $9795			beq 	_LCNoSpace
.9790	a9 20		lda #$20			lda 	#' '
.9792	20 c6 97	jsr $97c6			jsr 	LCLWrite
.9795					_LCNoSpace:
.9795	7a		ply				ply 								; restore position.
.9796	c8		iny				iny 								; consume token
.9797	4c dc 96	jmp $96dc			jmp 	_LCMainLoop 				; and go around again.
.979a					_LCData:
.979a	48		pha				pha 								; save type $FE/$FF
.979b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.979d	c9 fe		cmp #$fe			cmp 	#$FE
.979f	f0 02		beq $97a3			beq 	_LCHaveOpener
.97a1	a2 22		ldx #$22			ldx 	#'"'
.97a3					_LCHaveOpener:
.97a3	8a		txa				txa 								; output prefix (# or ")
.97a4	20 c6 97	jsr $97c6			jsr 	LCLWrite
.97a7	c8		iny				iny 								; get count
.97a8	b1 30		lda ($30),y			lda 	(codePtr),y
.97aa	aa		tax				tax
.97ab	c8		iny				iny 								; point at first character
.97ac					_LCOutData:
.97ac	b1 30		lda ($30),y			lda 	(codePtr),y
.97ae	c9 00		cmp #$00			cmp 	#0
.97b0	f0 03		beq $97b5			beq 	_LCNoPrint
.97b2	20 c6 97	jsr $97c6			jsr 	LCLWrite
.97b5					_LCNoPrint:
.97b5	c8		iny				iny
.97b6	ca		dex				dex
.97b7	d0 f3		bne $97ac			bne 	_LCOutData
.97b9	68		pla				pla 								; closing " required ?
.97ba	c9 ff		cmp #$ff			cmp 	#$FF
.97bc	d0 05		bne $97c3			bne 	_LCNoQuote
.97be	a9 22		lda #$22			lda 	#'"'
.97c0	20 c6 97	jsr $97c6			jsr 	LCLWrite
.97c3					_LCNoQuote:
.97c3	4c dc 96	jmp $96dc			jmp 	_LCMainLoop
.97c6					LCLWrite:
.97c6	da		phx				phx
.97c7	ae 9d 04	ldx $049d			ldx 	tbOffset
.97ca	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97cd	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97d0	ee 9d 04	inc $049d			inc 	tbOffset
.97d3	fa		plx				plx
.97d4	60		rts				rts
.97d5					LCCheckSpaceRequired:
.97d5	ae 9d 04	ldx $049d			ldx 	tbOffset
.97d8	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.97db	20 f4 97	jsr $97f4			jsr 	LCLLowerCase 				; saves a little effort
.97de	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.97e0	90 11		bcc $97f3			bcc 	_LCCSRExit
.97e2	c9 3a		cmp #$3a			cmp 	#"9"+1
.97e4	90 08		bcc $97ee			bcc 	_LCCSRSpace
.97e6	c9 61		cmp #$61			cmp 	#"a"
.97e8	90 09		bcc $97f3			bcc 	_LCCSRExit
.97ea	c9 7b		cmp #$7b			cmp 	#"z"+1
.97ec	b0 05		bcs $97f3			bcs 	_LCCSRExit
.97ee					_LCCSRSpace:
.97ee	a9 20		lda #$20			lda 	#' '
.97f0	20 c6 97	jsr $97c6			jsr 	LCLWrite
.97f3					_LCCSRExit:
.97f3	60		rts				rts
.97f4					LCLLowerCase:
.97f4	c9 41		cmp #$41			cmp 	#"A"
.97f6	90 06		bcc $97fe			bcc 	_LCLLCOut
.97f8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.97fa	b0 02		bcs $97fe			bcs 	_LCLLCOut
.97fc	69 20		adc #$20			adc 	#$20
.97fe					_LCLLCOut:
.97fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.97ff					ProcedureScan:
.97ff	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9801	85 30		sta $30				sta 	codePtr
.9803	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9805	85 31		sta $31				sta 	codePtr+1
.9807					_PSLoop:
.9807	b2 30		lda ($30)			lda 	(codePtr)
.9809	f0 42		beq $984d			beq 	_PSExit
.980b	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.980d	b1 30		lda ($30),y			lda 	(codePtr),y
.980f	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9811	d0 2d		bne $9840			bne 	_PSNext
.9813	c8		iny				iny 								; get the address of the record to zTemp0 and
.9814	b1 30		lda ($30),y			lda 	(codePtr),y
.9816	29 c0		and #$c0			and 	#$C0
.9818	c9 40		cmp #$40			cmp 	#$40
.981a	d0 32		bne $984e			bne 	_PSSyntax
.981c	b1 30		lda ($30),y			lda 	(codePtr),y
.981e	18		clc				clc
.981f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9821	85 37		sta $37				sta 	zTemp0+1
.9823	c8		iny				iny 								; LSB
.9824	b1 30		lda ($30),y			lda 	(codePtr),y
.9826	85 36		sta $36				sta 	zTemp0
.9828	c8		iny				iny 								; character after variable call.
.9829	98		tya				tya 								; save Y offset at +7
.982a	a0 07		ldy #$07			ldy 	#7
.982c	91 36		sta ($36),y			sta 	(zTemp0),y
.982e	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9830	a0 02		ldy #$02			ldy 	#2
.9832	91 36		sta ($36),y			sta 	(zTemp0),y
.9834	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9836					_PSCopy:
.9836	b5 30		lda $30,x			lda 	safePtr,x
.9838	c8		iny				iny
.9839	91 36		sta ($36),y			sta 	(zTemp0),y
.983b	e8		inx				inx
.983c	e0 04		cpx #$04			cpx 	#4
.983e	d0 f6		bne $9836			bne 	_PSCopy
.9840					_PSNext:
.9840	18		clc				clc
.9841	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9843	65 30		adc $30				adc 	codePtr
.9845	85 30		sta $30				sta 	codePtr
.9847	90 02		bcc $984b			bcc 	_CREExit
.9849	e6 31		inc $31				inc 	codePtr+1
.984b					_CREExit:
.984b	80 ba		bra $9807			bra 	_PSLoop
.984d					_PSExit:
.984d	60		rts				rts
.984e					_PSSyntax:
.984e	4c 85 b2	jmp $b285			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9851					ScanForward:
.9851	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9853	86 37		stx $37				stx 	zTemp0+1
.9855	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9857					_ScanLoop:
.9857	b1 30		lda ($30),y			lda 	(codePtr),y
.9859	c8		iny				iny
.985a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.985c	d0 0e		bne $986c			bne 	_ScanGoNext
.985e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9860	f0 04		beq $9866			beq 	_ScanMatch
.9862	c5 37		cmp $37				cmp 	zTemp0+1
.9864	d0 06		bne $986c			bne 	_ScanGoNext
.9866					_ScanMatch:
.9866	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9868	d0 01		bne $986b			bne 	_ScanNotEndEOL
.986a	88		dey				dey
.986b					_ScanNotEndEOL:
.986b	60		rts				rts
.986c					_ScanGoNext:
.986c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.986e	90 e7		bcc $9857			bcc 	_ScanLoop
.9870	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9872	90 18		bcc $988c			bcc 	_ScanSkipOne
.9874	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9876	b0 2f		bcs $98a7			bcs 	_ScanSkipData
.9878	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.987a	90 db		bcc $9857			bcc 	_ScanLoop 					; if not, ordinary keywords.
.987c	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.987e	b0 d7		bcs $9857			bcs 	_ScanLoop
.9880	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9882	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9884	b0 d1		bcs $9857			bcs 	_ScanLoop
.9886	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9888	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.988a	80 cb		bra $9857			bra 	_ScanLoop
.988c					_ScanSkipOne:
.988c	c8		iny				iny 								; consume the extra one.
.988d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.988f	d0 c6		bne $9857			bne 	_ScanLoop
.9891	18		clc				clc
.9892	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9894	65 30		adc $30				adc 	codePtr
.9896	85 30		sta $30				sta 	codePtr
.9898	90 02		bcc $989c			bcc 	_CREExit
.989a	e6 31		inc $31				inc 	codePtr+1
.989c					_CREExit:
.989c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.989e	b2 30		lda ($30)			lda 	(codePtr)
.98a0	d0 b5		bne $9857			bne 	_ScanLoop 					; if not zero, more to scan
.98a2	a9 13		lda #$13		lda	#19
.98a4	4c df 98	jmp $98df		jmp	ErrorHandler
.98a7					_ScanSkipData:
.98a7	88		dey				dey 								; point at data token
.98a8	c8		iny				iny
.98a9	98		tya				tya
.98aa	38		sec				sec
.98ab	71 30		adc ($30),y			adc 	(codePtr),y
.98ad	a8		tay				tay
.98ae	80 a7		bra $9857			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98b0					Command_WHILE:
.98b0	5a		phy				phy 								; save position of the test
.98b1	a2 00		ldx #$00			ldx 	#0
.98b3	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; work out the number
.98b6	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; check if zero
.98b9	f0 0e		beq $98c9			beq 	_WHExitLoop 				; if so exit the loop
.98bb	98		tya				tya 								; position *after* test.
.98bc	7a		ply				ply 								; restore position before test, at WHILE
.98bd	88		dey				dey
.98be	48		pha				pha 								; push after test on the stack
.98bf	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98c1	20 4b a5	jsr $a54b			jsr 	StackOpen
.98c4	20 8f a5	jsr $a58f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98c7	7a		ply				ply 								; restore the position *after* the test
.98c8	60		rts				rts
.98c9					_WHExitLoop:
.98c9	68		pla				pla 								; throw post loop position
.98ca	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.98cc	aa		tax				tax
.98cd	20 51 98	jsr $9851			jsr 	ScanForward
.98d0	60		rts				rts
.98d1					Command_WEND:
.98d1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98d3	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98d5	20 77 a5	jsr $a577			jsr 	StackCheckFrame
.98d8	20 a0 a5	jsr $a5a0			jsr 	STKLoadCodePosition 		; loop back
.98db	20 69 a5	jsr $a569			jsr 	StackClose		 			; erase the frame
.98de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ac9f					CheckRightBracket:
.ac9f	b1 30		lda ($30),y			lda 	(codePtr),y
.aca1	c8		iny				iny
.aca2	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.aca4	d0 0f		bne $acb5			bne 	CNAFail
.aca6	60		rts				rts
.aca7					CheckComma:
.aca7	b1 30		lda ($30),y			lda 	(codePtr),y
.aca9	c8		iny				iny
.acaa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.acac	d0 07		bne $acb5			bne 	CNAFail
.acae	60		rts				rts
.acaf					CheckNextA:
.acaf	d1 30		cmp ($30),y			cmp 	(codePtr),y
.acb1	d0 02		bne $acb5			bne 	CNAFail
.acb3	c8		iny				iny 								; skip character
.acb4	60		rts				rts 								; and exit
.acb5					CNAFail:
.acb5	4c 85 b2	jmp $b285			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98df					ErrorHandler:
.98df	a8		tay				tay 								; find the error text
.98e0	f0 49		beq $992b			beq 	_EHEnd
.98e2	a2 00		ldx #$00			ldx 	#0
.98e4	a9 9e		lda #$9e			lda 	#((ErrorText) & $FF)
.98e6	85 36		sta $36				sta 	0+zTemp0
.98e8	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.98ea	85 37		sta $37				sta 	1+zTemp0
.98ec					_EHFind:
.98ec	88		dey				dey 								; found the error text ?
.98ed	f0 0e		beq $98fd			beq 	_EHFound
.98ef					_EHFindZero:
.98ef	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.98f1	e6 36		inc $36				inc 	zTemp0
.98f3	d0 02		bne $98f7			bne 	_EHFNoCarry
.98f5	e6 37		inc $37				inc 	zTemp0+1
.98f7					_EHFNoCarry:
.98f7	c9 00		cmp #$00			cmp 	#0
.98f9	d0 f4		bne $98ef			bne 	_EHFindZero
.98fb	80 ef		bra $98ec			bra 	_EHFind
.98fd					_EHFound:
.98fd	a5 36		lda $36				lda 	zTemp0 						; print message
.98ff	a6 37		ldx $37				ldx 	zTemp0+1
.9901	20 38 99	jsr $9938			jsr 	PrintStringXA
.9904	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9906	b1 30		lda ($30),y			lda 	(codePtr),y
.9908	d0 05		bne $990f			bne 	_EHAtMsg
.990a	c8		iny				iny
.990b	b1 30		lda ($30),y			lda 	(codePtr),y
.990d	f0 17		beq $9926			beq 	_EHCREnd
.990f					_EHAtMsg:
.990f	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.9911	a9 2e		lda #$2e			lda 	#_AtMsg & $FF
.9913	20 38 99	jsr $9938			jsr 	PrintStringXA
.9916	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9918	b1 30		lda ($30),y			lda 	(codePtr),y
.991a	48		pha				pha
.991b	c8		iny				iny
.991c	b1 30		lda ($30),y			lda 	(codePtr),y
.991e	aa		tax				tax
.991f	68		pla				pla
.9920	20 fb ad	jsr $adfb			jsr 	ConvertInt16 				; convert XA to string
.9923	20 38 99	jsr $9938			jsr 	PrintStringXA 				; and print it.
.9926					_EHCREnd:
.9926	a9 0d		lda #$0d			lda 	#13 						; new line
.9928	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.992b					_EHEnd:
.992b	4c 09 8c	jmp $8c09			jmp 	WarmStart
>992e	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9936	20 00
.9938					PrintStringXA:
.9938	5a		phy				phy
.9939	86 37		stx $37				stx 	zTemp0+1
.993b	85 36		sta $36				sta 	zTemp0
.993d	a0 00		ldy #$00			ldy 	#0
.993f					_PSXALoop:
.993f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9941	f0 06		beq $9949			beq 	_PSXAExit
.9943	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.9946	c8		iny				iny
.9947	80 f6		bra $993f			bra 	_PSXALoop
.9949					_PSXAExit:
.9949	7a		ply				ply
.994a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.994b					UnaryTrue:
.994b	fa		plx				plx
.994c					ReturnTrue:
.994c	a9 01		lda #$01			lda 	#1  						; set to 1
.994e	20 99 a4	jsr $a499			jsr 	NSMSetByte
.9951	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9953	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9956	60		rts				rts
.9957					UnaryFalse:
.9957	fa		plx				plx
.9958					ReturnFalse:
.9958	4c 97 a4	jmp $a497			jmp 	NSMSetZero 					; set it all to zero
.995b					BinaryCompareEqual:
.995b	fa		plx				plx
.995c	20 97 99	jsr $9997			jsr 	CompareBaseCode
.995f	c9 00		cmp #$00			cmp 	#0
.9961	f0 e9		beq $994c			beq 	ReturnTrue
.9963	80 f3		bra $9958			bra 	ReturnFalse
.9965					BinaryCompareLess:
.9965	fa		plx				plx
.9966	20 97 99	jsr $9997			jsr 	CompareBaseCode
.9969	c9 ff		cmp #$ff			cmp 	#$FF
.996b	f0 df		beq $994c			beq 	ReturnTrue
.996d	80 e9		bra $9958			bra 	ReturnFalse
.996f					BinaryCompareGreater:
.996f	fa		plx				plx
.9970	20 97 99	jsr $9997			jsr 	CompareBaseCode
.9973	c9 01		cmp #$01			cmp 	#1
.9975	f0 d5		beq $994c			beq 	ReturnTrue
.9977	80 df		bra $9958			bra 	ReturnFalse
.9979					BinaryCompareNotEqual:
.9979	fa		plx				plx
.997a	20 97 99	jsr $9997			jsr 	CompareBaseCode
.997d	c9 00		cmp #$00			cmp 	#0
.997f	d0 cb		bne $994c			bne 	ReturnTrue
.9981	80 d5		bra $9958			bra 	ReturnFalse
.9983					BinaryCompareLessEqual:
.9983	fa		plx				plx
.9984	20 97 99	jsr $9997			jsr 	CompareBaseCode
.9987	c9 01		cmp #$01			cmp 	#1
.9989	d0 c1		bne $994c			bne 	ReturnTrue
.998b	80 cb		bra $9958			bra 	ReturnFalse
.998d					BinaryCompareGreaterEqual:
.998d	fa		plx				plx
.998e	20 97 99	jsr $9997			jsr 	CompareBaseCode
.9991	c9 ff		cmp #$ff			cmp 	#$FF
.9993	d0 b7		bne $994c			bne 	ReturnTrue
.9995	80 c1		bra $9958			bra 	ReturnFalse
.9997					CompareBaseCode:
.9997	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; make both values if references.
.999a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.999d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99a0	29 10		and #$10			and 	#NSTString
.99a2	d0 40		bne $99e4			bne 	_CBCString
.99a4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99a7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99aa	d0 3b		bne $99e7			bne 	_CBCFloat
.99ac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99af	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b2	29 08		and #$08			and 	#NSTFloat
.99b4	d0 31		bne $99e7			bne 	_CBCFloat
.99b6	20 ea 99	jsr $99ea			jsr 	CompareFixMinusZero
.99b9	e8		inx				inx
.99ba	20 ea 99	jsr $99ea			jsr 	CompareFixMinusZero
.99bd	ca		dex				dex
.99be	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99c1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99c4	10 0b		bpl $99d1			bpl 	_CDCSameSign
.99c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99c9	30 16		bmi $99e1			bmi 	_CBCLess 					; return $FF
.99cb					_CBCGreater:
.99cb	a9 01		lda #$01			lda 	#1
.99cd	60		rts				rts
.99ce					_CBCEqual:
.99ce	a9 00		lda #$00			lda 	#0
.99d0	60		rts				rts
.99d1					_CDCSameSign:
.99d1	20 fa 9a	jsr $9afa			jsr 	SubTopTwoStack 				; unsigned subtract
.99d4	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; or the mantissa together
.99d7	f0 f5		beq $99ce			beq 	_CBCEqual 					; -0 == 0
.99d9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99dc	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99df	10 ea		bpl $99cb			bpl 	_CBCGreater
.99e1					_CBCLess:
.99e1	a9 ff		lda #$ff			lda 	#$FF
.99e3	60		rts				rts
.99e4					_CBCString:
.99e4	4c 50 9a	jmp $9a50			jmp 	CompareStrings
.99e7					_CBCFloat:
.99e7	4c f7 ae	jmp $aef7			jmp 	CompareFloat
.99ea					CompareFixMinusZero:
.99ea	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero
.99ed	d0 03		bne $99f2			bne 	_CFXMZNotZero
.99ef	9e 00 04	stz $0400,x			stz 	NSStatus,x
.99f2					_CFXMZNotZero:
.99f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.99f3					StringConcat:
.99f3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.99f6	3d 01 04	and $0401,x			and 	NSStatus+1,x
.99f9	29 18		and #$18			and 	#NSBTypeMask
.99fb	c9 10		cmp #$10			cmp 	#NSTString
.99fd	d0 4e		bne $9a4d			bne		_SCType
.99ff	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a01	e8		inx				inx
.9a02	20 20 9a	jsr $9a20			jsr 	_SCSetupZ0 					; setup for second
.9a05	20 2b 9a	jsr $9a2b			jsr 	_SCLengthZ0 				; length for second
.9a08	ca		dex				dex
.9a09	20 20 9a	jsr $9a20			jsr 	_SCSetupZ0 					; setup for first
.9a0c	20 2b 9a	jsr $9a2b			jsr 	_SCLengthZ0 				; length for first
.9a0f	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a11	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate
.9a14	20 3e 9a	jsr $9a3e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a17	e8		inx				inx
.9a18	20 20 9a	jsr $9a20			jsr 	_SCSetupZ0 					; copy second out
.9a1b	20 3e 9a	jsr $9a3e			jsr 	_SCCopy
.9a1e	ca		dex				dex
.9a1f	60		rts				rts
.9a20					_SCSetupZ0:
.9a20	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a23	85 36		sta $36				sta 	zTemp0
.9a25	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a28	85 37		sta $37				sta 	zTemp0+1
.9a2a	60		rts				rts
.9a2b					_SCLengthZ0:
.9a2b	5a		phy				phy
.9a2c	a0 00		ldy #$00			ldy 	#0
.9a2e					_SCLenLoop:
.9a2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a30	f0 0a		beq $9a3c			beq 	_SCLExit
.9a32	c8		iny				iny
.9a33	e6 38		inc $38				inc 	zTemp1
.9a35	10 f7		bpl $9a2e			bpl		_SCLenLoop
.9a37	a9 09		lda #$09		lda	#9
.9a39	4c df 98	jmp $98df		jmp	ErrorHandler
.9a3c					_SCLExit:
.9a3c	7a		ply				ply
.9a3d	60		rts				rts
.9a3e					_SCCopy:
.9a3e	5a		phy				phy
.9a3f	a0 00		ldy #$00			ldy 	#0
.9a41					_SCCopyLoop:
.9a41	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a43	f0 06		beq $9a4b			beq 	_SCCExit
.9a45	20 f8 b5	jsr $b5f8			jsr 	StringTempWrite
.9a48	c8		iny				iny
.9a49	80 f6		bra $9a41			bra 	_SCCopyLoop
.9a4b					_SCCExit:
.9a4b	7a		ply				ply
.9a4c	60		rts				rts
.9a4d					_SCType:
.9a4d	4c 8f b2	jmp $b28f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.acb8					IntegerDivide:
.acb8	fa		plx				plx
.acb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.acbc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.acbf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.acc0	0a		asl a				asl 	a
.acc1	10 05		bpl $acc8			bpl 	_NotRef
.acc3	48		pha				pha
.acc4	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.acc7	68		pla				pla
.acc8					_NotRef:
.acc8	0a		asl a				asl 	a
.acc9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.accb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.acce	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.acd1	f0 03		beq $acd6			beq 	_IntegerCode 				; if clear, then we have two integers
.acd3	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.acd6					_IntegerCode:
.acd6	20 f8 ac	jsr $acf8			jsr 	CheckDivideZero 			; do div zero check
.acd9	20 30 ad	jsr $ad30			jsr 	Int32Divide 				; do the division
.acdc	20 ed ad	jsr $aded			jsr 	CalculateSign 				; calculate result sign
.acdf					NSMCopyPlusTwoToZero:
.acdf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ace2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ace5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ace8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aceb	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.acee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.acf1	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.acf4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.acf7	60		rts				rts
.acf8					CheckDivideZero:
.acf8	e8		inx				inx
.acf9	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero
.acfc	f0 02		beq $ad00			beq 	_CDVError
.acfe	ca		dex				dex
.acff	60		rts				rts
.ad00					_CDVError:
.ad00	a9 03		lda #$03		lda	#3
.ad02	4c df 98	jmp $98df		jmp	ErrorHandler
.ad05					IntegerModulus:
.ad05	fa		plx				plx
.ad06	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad09	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad0c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad0d	0a		asl a				asl 	a
.ad0e	10 05		bpl $ad15			bpl 	_NotRef
.ad10	48		pha				pha
.ad11	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad14	68		pla				pla
.ad15					_NotRef:
.ad15	0a		asl a				asl 	a
.ad16	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad18	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad1b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad1e	f0 03		beq $ad23			beq 	_IntegerCode 				; if clear, then we have two integers
.ad20	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.ad23					_IntegerCode:
.ad23					IntegerModulusNoCheck:
.ad23	20 f8 ac	jsr $acf8			jsr 	CheckDivideZero 			; do div zero check
.ad26	20 30 ad	jsr $ad30			jsr 	Int32Divide 				; do the division
.ad29	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad2c	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad2f	60		rts				rts
.ad30					Int32Divide:
.ad30	48		pha				pha 								; save AXY
.ad31	5a		phy				phy
.ad32	20 6e a4	jsr $a46e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad35	20 93 a4	jsr $a493			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad38	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad3a					_I32DivideLoop:
.ad3a	e8		inx				inx
.ad3b	e8		inx				inx
.ad3c	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad3f	ca		dex				dex
.ad40	ca		dex				dex
.ad41	20 ad a4	jsr $a4ad			jsr 	NSMRotateLeft
.ad44	20 70 ad	jsr $ad70			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad47	90 03		bcc $ad4c			bcc 	_I32DivideNoCarryIn
.ad49	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ad4c					_I32DivideNoCarryIn:
.ad4c	88		dey				dey 								; loop round till division completed.
.ad4d	d0 eb		bne $ad3a			bne 	_I32DivideLoop
.ad4f	7a		ply				ply 								; restore AXY and exit
.ad50	68		pla				pla
.ad51	60		rts				rts
.ad52					Int32ShiftDivide:
.ad52	48		pha				pha 								; save AY
.ad53	5a		phy				phy
.ad54	e8		inx				inx 								; clear S[X+2]
.ad55	e8		inx				inx
.ad56	20 97 a4	jsr $a497			jsr 	NSMSetZero
.ad59	ca		dex				dex
.ad5a	ca		dex				dex
.ad5b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ad5d					_I32SDLoop:
.ad5d	20 70 ad	jsr $ad70			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad60	e8		inx				inx
.ad61	e8		inx				inx
.ad62	20 ad a4	jsr $a4ad			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ad65	ca		dex				dex
.ad66	ca		dex				dex
.ad67	20 ad a4	jsr $a4ad			jsr 	NSMRotateLeft
.ad6a	88		dey				dey 	 							; do 31 times
.ad6b	d0 f0		bne $ad5d			bne 	_I32SDLoop
.ad6d	7a		ply				ply 								; restore AY and exit
.ad6e	68		pla				pla
.ad6f	60		rts				rts
.ad70					DivideCheckSubtract:
.ad70	20 fa 9a	jsr $9afa			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ad73	b0 04		bcs $ad79			bcs 	_DCSExit 					; if carry set, then could do, exit
.ad75	20 d4 9a	jsr $9ad4			jsr 	AddTopTwoStack 				; add it back in
.ad78	18		clc				clc 								; and return False
.ad79					_DCSExit:
.ad79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ad7a					MulInteger:
.ad7a	fa		plx				plx
.ad7b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad7e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad81	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad82	0a		asl a				asl 	a
.ad83	10 05		bpl $ad8a			bpl 	_NotRef
.ad85	48		pha				pha
.ad86	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad89	68		pla				pla
.ad8a					_NotRef:
.ad8a	0a		asl a				asl 	a 							; put MSB of type into A:7
.ad8b	30 0b		bmi $ad98			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ad8d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad90	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad93	f0 06		beq $ad9b			beq 	_IntegerCode 				; if clear, then we have two integers
.ad95	4c ce af	jmp $afce			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ad98					_StringData:
.ad98	4c 99 b2	jmp $b299			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ad9b					_IntegerCode:
.ad9b	20 a8 ad	jsr $ada8			jsr 	MultiplyShort
.ad9e	c9 00		cmp #$00			cmp 	#0
.ada0	f0 05		beq $ada7			beq 	_MIExit
.ada2	a9 04		lda #$04		lda	#4
.ada4	4c df 98	jmp $98df		jmp	ErrorHandler
.ada7					_MIExit:
.ada7	60		rts				rts
.ada8					MultiplyShort:
.ada8	5a		phy				phy 								; save Y
.ada9	20 6e a4	jsr $a46e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.adac	20 93 a4	jsr $a493			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.adaf	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.adb1					_I32MLoop:
.adb1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.adb4	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.adb7	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.adba	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.adbd	f0 28		beq $ade7			beq 	_I32MExit 					; exit if zero
.adbf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.adc2	29 01		and #$01			and 	#1
.adc4	f0 0e		beq $add4			beq 	_I32MNoAdd
.adc6	20 d4 9a	jsr $9ad4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.adc9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.adcc	10 06		bpl $add4			bpl 	_I32MNoAdd
.adce					_I32ShiftRight:
.adce	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight 				; shift S[X] right
.add1	c8		iny				iny 								; increment shift count
.add2	80 0a		bra $adde			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.add4					_I32MNoAdd:
.add4	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.add7	70 f5		bvs $adce			bvs 	_I32ShiftRight 				; instead.
.add9	e8		inx				inx
.adda	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.addd	ca		dex				dex
.adde					_I32MShiftUpper:
.adde	e8		inx				inx 								; shift S[X+2] right
.addf	e8		inx				inx
.ade0	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight
.ade3	ca		dex				dex
.ade4	ca		dex				dex
.ade5	80 ca		bra $adb1			bra 	_I32MLoop 					; try again.
.ade7					_I32MExit:
.ade7	20 ed ad	jsr $aded			jsr 	CalculateSign
.adea	98		tya				tya 								; shift in A
.adeb	7a		ply				ply 								; restore Y and exit
.adec	60		rts				rts
.aded					CalculateSign:
.aded	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.adf0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.adf3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.adf6	0a		asl a				asl 	a 							; shift bit 7 into carry
.adf7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.adfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a50					CompareStrings:
.9a50	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a53	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a56	29 10		and #$10			and 	#NSBIsString
.9a58	f0 2c		beq $9a86			beq 	_CSTypeError
.9a5a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a5d	85 36		sta $36				sta 	zTemp0
.9a5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a62	85 37		sta $37				sta 	zTemp0+1
.9a64	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a67	85 38		sta $38				sta 	zTemp1
.9a69	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a6c	85 39		sta $39				sta 	zTemp1+1
.9a6e	5a		phy				phy 								; save Y so we can access strings
.9a6f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a71					_CSLoop:
.9a71	c8		iny				iny
.9a72	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a74	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a76	d0 06		bne $9a7e			bne 	_CSDifferent
.9a78	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a7a	d0 f5		bne $9a71			bne 	_CSLoop 					; still comparing
.9a7c					_CSExit:
.9a7c	7a		ply				ply 								; reached end, return zero in A from EOS
.9a7d	60		rts				rts
.9a7e					_CSDifferent:
.9a7e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a80	90 fa		bcc $9a7c			bcc		_CSExit
.9a82	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a84	80 f6		bra $9a7c			bra 	_CSExit
.9a86					_CSTypeError:
.9a86	4c 8f b2	jmp $b28f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a89					ShiftLeft:
.9a89	38		sec				sec
.9a8a	80 01		bra $9a8d			bra 	ShiftMain
.9a8c					ShiftRight:
.9a8c	18		clc				clc
.9a8d					ShiftMain:
.9a8d	fa		plx				plx 								; restore X
.9a8e	08		php				php 								; save direction
.9a8f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a92	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a95	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a96	0a		asl a				asl 	a
.9a97	10 05		bpl $9a9e			bpl 	_NotRef
.9a99	48		pha				pha
.9a9a	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a9d	68		pla				pla
.9a9e					_NotRef:
.9a9e	0a		asl a				asl 	a
.9a9f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aa1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9aa4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9aa7	f0 03		beq $9aac			beq 	_IntegerCode 				; if clear, then we have two integers
.9aa9	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9aac					_IntegerCode:
.9aac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9aaf	29 e0		and #$e0			and 	#$E0
.9ab1	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ab4	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ab7	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9aba	d0 13		bne $9acf			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9abc					_SMLoop:
.9abc	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9abf	30 11		bmi $9ad2			bmi 	_SMExit 					; exit if done.
.9ac1	28		plp				plp 								; restore direcition setting
.9ac2	08		php				php
.9ac3	90 05		bcc $9aca			bcc 	_SMRight
.9ac5	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; shift left if CS
.9ac8	80 f2		bra $9abc			bra 	_SMLoop
.9aca					_SMRight:
.9aca	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight 				; shift right if CC
.9acd	80 ed		bra $9abc			bra 	_SMLoop
.9acf					_SMExit0:
.9acf	20 97 a4	jsr $a497			jsr 	NSMSetZero 					; return zero.
.9ad2					_SMExit:
.9ad2	28		plp				plp 								; throw direction
.9ad3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ad4					AddTopTwoStack:
.9ad4	18		clc				clc
.9ad5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ad8	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9adb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ade	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ae1	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9ae4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ae7	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9aea	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9aed	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9af0	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9af3	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9af6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9af9	60		rts				rts
.9afa					SubTopTwoStack:
.9afa	38		sec				sec
.9afb	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9afe	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b01	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b04	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b07	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b0a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b0d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b10	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b13	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b16	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b19	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b1c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b1f	60		rts				rts
.9b20					AddInteger:
.9b20	fa		plx				plx
.9b21	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b24	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b27	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b28	0a		asl a				asl 	a
.9b29	10 05		bpl $9b30			bpl 	_NotRef
.9b2b	48		pha				pha
.9b2c	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b2f	68		pla				pla
.9b30					_NotRef:
.9b30	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b31	30 0b		bmi $9b3e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b33	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b36	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b39	f0 06		beq $9b41			beq 	_IntegerCode 				; if clear, then we have two integers
.9b3b	4c 56 ae	jmp $ae56			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b3e					_StringData:
.9b3e	4c f3 99	jmp $99f3			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b41					_IntegerCode:
.9b41					AddCode:
.9b41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b44	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b47	10 8b		bpl $9ad4			bpl 	AddTopTwoStack
.9b49	20 fa 9a	jsr $9afa			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b4c	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b4f	10 09		bpl $9b5a			bpl 	_AddExit
.9b51	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b57	20 4c a4	jsr $a44c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b5a					_AddExit:
.9b5a	60		rts				rts
.9b5b					SubInteger:
.9b5b	fa		plx				plx
.9b5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b5f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b62	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b63	0a		asl a				asl 	a
.9b64	10 05		bpl $9b6b			bpl 	_NotRef
.9b66	48		pha				pha
.9b67	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b6a	68		pla				pla
.9b6b					_NotRef:
.9b6b	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b6c	30 0b		bmi $9b79			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b6e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b71	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b74	f0 06		beq $9b7c			beq 	_IntegerCode 				; if clear, then we have two integers
.9b76	4c 5b ae	jmp $ae5b			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b79					_StringData:
.9b79	4c 99 b2	jmp $b299			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b7c					_IntegerCode:
.9b7c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9b7f	49 80		eor #$80			eor 	#$80
.9b81	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b84	80 bb		bra $9b41			bra 	AddCode 					; and do the same code as add.
.9b86					AndInteger:
.9b86	fa		plx				plx
.9b87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b8a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b8d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b8e	0a		asl a				asl 	a
.9b8f	10 05		bpl $9b96			bpl 	_NotRef
.9b91	48		pha				pha
.9b92	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b95	68		pla				pla
.9b96					_NotRef:
.9b96	0a		asl a				asl 	a
.9b97	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b99	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b9f	f0 03		beq $9ba4			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba1	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9ba4					_IntegerCode:
.9ba4	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ba7	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9baa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bad	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bb0	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bb3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bb6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bb9	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bbc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bbf	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bc2	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bc5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bc8	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bcb	60		rts				rts
.9bcc					OraInteger:
.9bcc	fa		plx				plx
.9bcd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bd0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bd3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bd4	0a		asl a				asl 	a
.9bd5	10 05		bpl $9bdc			bpl 	_NotRef
.9bd7	48		pha				pha
.9bd8	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bdb	68		pla				pla
.9bdc					_NotRef:
.9bdc	0a		asl a				asl 	a
.9bdd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bdf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9be2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9be5	f0 03		beq $9bea			beq 	_IntegerCode 				; if clear, then we have two integers
.9be7	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9bea					_IntegerCode:
.9bea	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bed	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9bf0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bf3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bf6	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9bf9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bfc	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bff	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c02	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c05	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c08	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c0b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c0e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c11	60		rts				rts
.9c12					EorInteger:
.9c12	fa		plx				plx
.9c13	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c16	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c19	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c1a	0a		asl a				asl 	a
.9c1b	10 05		bpl $9c22			bpl 	_NotRef
.9c1d	48		pha				pha
.9c1e	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c21	68		pla				pla
.9c22					_NotRef:
.9c22	0a		asl a				asl 	a
.9c23	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c25	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c28	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c2b	f0 03		beq $9c30			beq 	_IntegerCode 				; if clear, then we have two integers
.9c2d	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9c30					_IntegerCode:
.9c30	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c33	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c36	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c39	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c3c	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c3f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c42	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c45	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c48	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c4b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c4e	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c51	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c54	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c57	60		rts				rts
.9c58					WordIndirect:
.9c58	fa		plx				plx
.9c59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c5c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c5f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c60	0a		asl a				asl 	a
.9c61	10 05		bpl $9c68			bpl 	_NotRef
.9c63	48		pha				pha
.9c64	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c67	68		pla				pla
.9c68					_NotRef:
.9c68	0a		asl a				asl 	a
.9c69	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c6b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c6e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c71	f0 03		beq $9c76			beq 	_IntegerCode 				; if clear, then we have two integers
.9c73	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9c76					_IntegerCode:
.9c76	20 41 9b	jsr $9b41			jsr 	AddCode 					; add the two values
.9c79	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c7b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c7e	60		rts				rts
.9c7f					ByteIndirect:
.9c7f	fa		plx				plx
.9c80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c83	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c86	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c87	0a		asl a				asl 	a
.9c88	10 05		bpl $9c8f			bpl 	_NotRef
.9c8a	48		pha				pha
.9c8b	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c8e	68		pla				pla
.9c8f					_NotRef:
.9c8f	0a		asl a				asl 	a
.9c90	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c92	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c95	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c98	f0 03		beq $9c9d			beq 	_IntegerCode 				; if clear, then we have two integers
.9c9a	4c 8f b2	jmp $b28f			jmp 	TypeError 					; anything else, type mismatch.
.9c9d					_IntegerCode:
.9c9d	20 41 9b	jsr $9b41			jsr 	AddCode 					; add the two values
.9ca0	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ca2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ca5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.adfb					ConvertInt16:
.adfb	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.adfe	8e 10 04	stx $0410			stx 	NSMantissa1
.ae01	9c 18 04	stz $0418			stz 	NSMantissa2
.ae04	9c 20 04	stz $0420			stz 	NSMantissa3
.ae07	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae0a	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae0c	a9 0a		lda #$0a			lda 	#10 						; base
.ae0e	80 00		bra $ae10			bra 	ConvertInt32
.ae10					ConvertInt32:
.ae10	5a		phy				phy
.ae11	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae13	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae16	10 08		bpl $ae20			bpl 	_CI32NotNeg
.ae18	48		pha				pha
.ae19	a9 2d		lda #$2d			lda 	#'-'
.ae1b	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae1e	c8		iny				iny
.ae1f	68		pla				pla
.ae20					_CI32NotNeg:
.ae20	20 2e ae	jsr $ae2e			jsr 	_CI32DivideConvert 			; recursive conversion
.ae23	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae25	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae28	7a		ply				ply
.ae29	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae2b	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae2d	60		rts				rts
.ae2e					_CI32DivideConvert:
.ae2e	e8		inx				inx 								; write to next slot up
.ae2f	20 99 a4	jsr $a499			jsr 	NSMSetByte
.ae32	ca		dex				dex
.ae33	20 30 ad	jsr $ad30			jsr 	Int32Divide 				; divide
.ae36	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae39	48		pha				pha
.ae3a	20 df ac	jsr $acdf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae3d	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; is it zero ?
.ae40	f0 06		beq $ae48			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ae42	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ae45	20 2e ae	jsr $ae2e			jsr 	_CI32DivideConvert 			; and recusrively call.
.ae48					_CI32NoRecurse:
.ae48	68		pla				pla 								; remainder
.ae49	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ae4b	90 02		bcc $ae4f			bcc 	_CI32NotHex
.ae4d	69 26		adc #$26			adc 	#6+32
.ae4f					_CI32NotHex:
.ae4f	69 30		adc #$30			adc 	#48
.ae51	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.ae54	c8		iny				iny
.ae55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9ca6					PrecedenceLevel:
>9ca6	04					.byte	 4	; $00 <<
>9ca7	02					.byte	 2	; $01 <=
>9ca8	02					.byte	 2	; $02 <>
>9ca9	00					.byte	 0	; $03 !!3
>9caa	00					.byte	 0	; $04 ><
>9cab	02					.byte	 2	; $05 >=
>9cac	04					.byte	 4	; $06 >>
>9cad	00					.byte	 0	; $07 !!7
>9cae	00					.byte	 0	; $08 !!8
>9caf	00					.byte	 0	; $09 !!9
>9cb0	00					.byte	 0	; $0a !!10
>9cb1	00					.byte	 0	; $0b !!11
>9cb2	00					.byte	 0	; $0c !!12
>9cb3	00					.byte	 0	; $0d !!13
>9cb4	00					.byte	 0	; $0e !!14
>9cb5	00					.byte	 0	; $0f !!15
>9cb6	00					.byte	 0	; $10 @
>9cb7	00					.byte	 0	; $11 !!17
>9cb8	00					.byte	 0	; $12 !!18
>9cb9	00					.byte	 0	; $13 [
>9cba	04					.byte	 4	; $14 \
>9cbb	00					.byte	 0	; $15 ]
>9cbc	01					.byte	 1	; $16 ^
>9cbd	00					.byte	 0	; $17 _
>9cbe	00					.byte	 0	; $18 `
>9cbf	00					.byte	 0	; $19 !!25
>9cc0	00					.byte	 0	; $1a !!26
>9cc1	00					.byte	 0	; $1b {
>9cc2	01					.byte	 1	; $1c |
>9cc3	00					.byte	 0	; $1d }
>9cc4	00					.byte	 0	; $1e ~
>9cc5	00					.byte	 0	; $1f [7m<7F>[m
>9cc6	00					.byte	 0	; $20
>9cc7	05					.byte	 5	; $21 !
>9cc8	00					.byte	 0	; $22 "
>9cc9	00					.byte	 0	; $23 #
>9cca	05					.byte	 5	; $24 $
>9ccb	04					.byte	 4	; $25 %
>9ccc	01					.byte	 1	; $26 &
>9ccd	00					.byte	 0	; $27 '
>9cce	00					.byte	 0	; $28 (
>9ccf	00					.byte	 0	; $29 )
>9cd0	04					.byte	 4	; $2a *
>9cd1	03					.byte	 3	; $2b +
>9cd2	00					.byte	 0	; $2c ,
>9cd3	03					.byte	 3	; $2d -
>9cd4	00					.byte	 0	; $2e .
>9cd5	04					.byte	 4	; $2f /
>9cd6	00					.byte	 0	; $30 0
>9cd7	00					.byte	 0	; $31 1
>9cd8	00					.byte	 0	; $32 2
>9cd9	00					.byte	 0	; $33 3
>9cda	00					.byte	 0	; $34 4
>9cdb	00					.byte	 0	; $35 5
>9cdc	00					.byte	 0	; $36 6
>9cdd	00					.byte	 0	; $37 7
>9cde	00					.byte	 0	; $38 8
>9cdf	00					.byte	 0	; $39 9
>9ce0	00					.byte	 0	; $3a :
>9ce1	00					.byte	 0	; $3b ;
>9ce2	02					.byte	 2	; $3c <
>9ce3	02					.byte	 2	; $3d =
>9ce4	02					.byte	 2	; $3e >
>9ce5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ce6					EvaluateExpressionAt0:
.9ce6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9ce8					EvaluateExpression:
.9ce8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cea					EvaluateExpressionAtPrecedence:
.9cea	48		pha				pha 								; save precedence level
.9ceb	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm 				; evaluate term into level X.
.9cee	68		pla				pla 								; restore precedence level.
.9cef					_EXPRLoop:
.9cef	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9cf1	b1 30		lda ($30),y			lda 	(codePtr),y
.9cf3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9cf5	b0 25		bcs $9d1c			bcs 	_EXPRExit
.9cf7	da		phx				phx 								; read the operator precedence
.9cf8	aa		tax				tax
.9cf9	bd a6 9c	lda $9ca6,x			lda 	PrecedenceLevel,x
.9cfc	fa		plx				plx
.9cfd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9cff	f0 1b		beq $9d1c			beq 	_EXPRExit
.9d01	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d03	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d05	c5 37		cmp $37				cmp 	zTemp0+1
.9d07	b0 13		bcs $9d1c			bcs		_EXPRExit 					; if current >= operator exit
.9d09	48		pha				pha 								; save current precedence.
.9d0a	b1 30		lda ($30),y			lda 	(codePtr),y
.9d0c	c8		iny				iny
.9d0d	48		pha				pha
.9d0e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d10	e8		inx				inx 								; work out the right hand side.
.9d11	20 ea 9c	jsr $9cea			jsr 	EvaluateExpressionAtPrecedence
.9d14	ca		dex				dex
.9d15	68		pla				pla 								; get operator, call the code.
.9d16	20 1f 9d	jsr $9d1f			jsr 	_EXPRCaller
.9d19	68		pla				pla 								; restore precedence level
.9d1a	80 d3		bra $9cef			bra 	_EXPRLoop 					; and go round.
.9d1c					_EXPRExit:
.9d1c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d1e	60		rts				rts
.9d1f					_EXPRCaller:
.9d1f	da		phx				phx 								; save on stack, first thing is to restore it
.9d20	0a		asl a				asl 	a 							; double so can use vectors into X
.9d21	aa		tax				tax
.9d22	7c fe 94	jmp ($94fe,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.ae56					FloatingPointAdd:
.ae56	20 f7 af	jsr $aff7			jsr 	FloatPrepare 				; prepare for floats
.ae59	80 0b		bra $ae66			bra 	FloatAdd
.ae5b					FloatingPointSub:
.ae5b	20 f7 af	jsr $aff7			jsr 	FloatPrepare 				; prepare for floats
.ae5e					FloatSubtract:
.ae5e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.ae61	49 80		eor #$80			eor 	#$80
.ae63	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.ae66					FloatAdd:
.ae66	48		pha				pha
.ae67	5a		phy				phy
.ae68	20 08 b0	jsr $b008			jsr 	NSNormalise 				; normalise S[X]
.ae6b	f0 54		beq $aec1			beq 	_FAReturn1
.ae6d	e8		inx				inx 								; normalise S[X+1]
.ae6e	20 08 b0	jsr $b008			jsr 	NSNormalise
.ae71	ca		dex				dex
.ae72	c9 00		cmp #$00			cmp 	#0
.ae74	f0 6f		beq $aee5			beq 	_FAExit 					; if so, just return A
.ae76	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ae79	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ae7c	f0 1b		beq $ae99			beq 	_FAExponentsEqual
.ae7e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ae81	a8		tay				tay
.ae82	38		sec				sec 								; do a signed comparison of the exponents.
.ae83	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ae86	50 02		bvc $ae8a			bvc 	_FANoSignedChange
.ae88	49 80		eor #$80			eor 	#$80
.ae8a					_FANoSignedChange:
.ae8a	29 80		and #$80			and 	#$80
.ae8c	10 03		bpl $ae91			bpl 	_FAHaveMax
.ae8e	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ae91					_FAHaveMax:
.ae91	20 e8 ae	jsr $aee8			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ae94	e8		inx				inx
.ae95	20 e8 ae	jsr $aee8			jsr 	_FAShiftToExponent
.ae98	ca		dex				dex
.ae99					_FAExponentsEqual:
.ae99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ae9c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae9f	30 10		bmi $aeb1			bmi 	_FADifferentSigns
.aea1	20 d4 9a	jsr $9ad4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aea4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aea7	10 3c		bpl $aee5			bpl 	_FAExit 					; if no, we are done.
.aea9	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aeac	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.aeaf	80 34		bra $aee5			bra 	_FAExit
.aeb1					_FADifferentSigns:
.aeb1	20 fa 9a	jsr $9afa			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.aeb4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.aeb7	10 2c		bpl $aee5			bpl 	_FAExit 					; if no, we are done.
.aeb9	20 43 a4	jsr $a443			jsr 	NSMNegate 					; netate result
.aebc	20 4c a4	jsr $a44c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.aebf	80 24		bra $aee5			bra 	_FAExit
.aec1					_FAReturn1:
.aec1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.aec4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aec7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.aeca	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aecd	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.aed0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aed3	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.aed6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aed9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.aedc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aedf	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.aee2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aee5					_FAExit:
.aee5	7a		ply				ply
.aee6	68		pla				pla
.aee7	60		rts				rts
.aee8					_FAShiftToExponent:
.aee8					_FAShiftToExponent2:
.aee8	98		tya				tya 								; compare Y to exponent
.aee9	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.aeec	f0 08		beq $aef6			beq 	_FASEExit 					; exit if so.
.aeee	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight	 			; shift the mantissa right
.aef1	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.aef4	80 f2		bra $aee8			bra 	_FAShiftToExponent2
.aef6					_FASEExit:
.aef6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.aef7					CompareFloat:
.aef7	20 5e ae	jsr $ae5e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.aefa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.aefd	29 f8		and #$f8			and 	#$F8
.aeff	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af02	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af05	f0 09		beq $af10			beq 	_FCExit 					; zero, so approximately identical
.af07	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af09	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af0c	10 02		bpl $af10			bpl 	_FCExit
.af0e					_FCNegative:
.af0e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af10					_FCExit:
.af10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af11					FDivideCommand:
.af11	fa		plx				plx	 								; restore stack position
.af12	20 f7 af	jsr $aff7			jsr 	FloatPrepare 				; prepare for floats
.af15					FloatDivide:
.af15	48		pha				pha
.af16	e8		inx				inx
.af17	20 08 b0	jsr $b008			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af1a	ca		dex				dex
.af1b	c9 00		cmp #$00			cmp 	#0
.af1d	f0 20		beq $af3f			beq 	_FDZero
.af1f	20 08 b0	jsr $b008			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af22	f0 19		beq $af3d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af24	20 52 ad	jsr $ad52			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af27	20 df ac	jsr $acdf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af2a	20 08 b0	jsr $b008			jsr		NSNormalise 				; renormalise
.af2d	20 ed ad	jsr $aded			jsr 	CalculateSign 				; calculate result sign
.af30	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af33	38		sec				sec
.af34	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af37	38		sec				sec
.af38	e9 1e		sbc #$1e			sbc 	#30
.af3a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af3d					_FDExit:
.af3d	68		pla				pla
.af3e	60		rts				rts
.af3f					_FDZero:
.af3f	a9 03		lda #$03		lda	#3
.af41	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.af44					FloatFractionalPart:
.af44	5a		phy				phy
.af45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.af48	29 7f		and #$7f			and 	#$7F
.af4a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af4d	20 08 b0	jsr $b008			jsr 	NSNormalise
.af50	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.af53	38		sec				sec
.af54	e9 e0		sbc #$e0			sbc 	#$E0
.af56	90 31		bcc $af89			bcc 	_FFPExit 					; already fractional
.af58	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.af5a	b0 2a		bcs $af86			bcs 	_FFPZero
.af5c	a8		tay				tay 								; put count to do in Y
.af5d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.af60	20 8b af	jsr $af8b			jsr 	_FFPPartial
.af63	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af66	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.af69	20 8b af	jsr $af8b			jsr 	_FFPPartial
.af6c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af6f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af72	20 8b af	jsr $af8b			jsr 	_FFPPartial
.af75	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.af7b	20 8b af	jsr $af8b			jsr 	_FFPPartial
.af7e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af81	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; zeroed check.
.af84	d0 03		bne $af89			bne 	_FFPExit
.af86					_FFPZero:
.af86	20 97 a4	jsr $a497			jsr 	NSMSetZero
.af89					_FFPExit:
.af89	7a		ply				ply
.af8a	60		rts				rts
.af8b					_FFPPartial:
.af8b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.af8d	f0 17		beq $afa6			beq 	_FFFPPExit
.af8f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.af91	b0 0c		bcs $af9f			bcs 	_FFFPPWholeByte
.af93	5a		phy				phy
.af94					_FFFPPLeft:
.af94	0a		asl a				asl 	a
.af95	88		dey				dey
.af96	d0 fc		bne $af94			bne 	_FFFPPLeft
.af98	7a		ply				ply
.af99					_FFFPPRight:
.af99	4a		lsr a				lsr 	a
.af9a	88		dey				dey
.af9b	d0 fc		bne $af99			bne 	_FFFPPRight
.af9d	80 07		bra $afa6			bra 	_FFFPPExit
.af9f					_FFFPPWholeByte:
.af9f	98		tya				tya 								; subtract 8 from count
.afa0	38		sec				sec
.afa1	e9 08		sbc #$08			sbc 	#8
.afa3	a8		tay				tay
.afa4	a9 00		lda #$00			lda 	#0 							; and clear all
.afa6					_FFFPPExit:
.afa6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.afa7					FloatIntegerPart:
.afa7	48		pha				pha
.afa8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.afab	f0 1f		beq $afcc			beq 	_FIPExit 					; if so do nothing
.afad	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; is it zero ?
.afb0	f0 17		beq $afc9			beq 	_FIPZero 					; if so return zero.
.afb2	20 08 b0	jsr $b008			jsr 	NSNormalise 				; normalise
.afb5	f0 12		beq $afc9			beq 	_FIPZero 					; normalised to zero, exit zero
.afb7					_FIPShift:
.afb7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.afba	10 08		bpl $afc4			bpl 	_FIPCheckZero
.afbc	20 ba a4	jsr $a4ba			jsr 	NSMShiftRight 				; shift mantissa right
.afbf	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.afc2	80 f3		bra $afb7			bra 	_FIPShift
.afc4					_FIPCheckZero:
.afc4	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; avoid -0 problem
.afc7	d0 03		bne $afcc			bne 	_FIPExit 					; set to zero if mantissa zero.
.afc9					_FIPZero:
.afc9	20 97 a4	jsr $a497			jsr 	NSMSetZero
.afcc					_FIPExit:
.afcc	68		pla				pla
.afcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.afce					FloatingPointMultiply:
.afce	20 f7 af	jsr $aff7			jsr 	FloatPrepare 				; prepare for floats
.afd1					FloatMultiply:
.afd1	48		pha				pha
.afd2	20 08 b0	jsr $b008			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.afd5	f0 1b		beq $aff2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.afd7	e8		inx				inx
.afd8	20 08 b0	jsr $b008			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.afdb	ca		dex				dex
.afdc	c9 00		cmp #$00			cmp 	#0
.afde	f0 0f		beq $afef			beq 	_FDSetZero
.afe0	20 a8 ad	jsr $ada8			jsr 	MultiplyShort 				; calculate the result.
.afe3	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.afe6	18		clc				clc
.afe7	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.afea	9d 28 04	sta $0428,x			sta 	NSExponent,x
.afed	80 03		bra $aff2			bra 	_FDExit
.afef					_FDSetZero:
.afef	20 97 a4	jsr $a497			jsr 	NSMSetZero 					; return 0
.aff2					_FDExit:
.aff2	20 08 b0	jsr $b008			jsr 	NSNormalise 				; normalise the result
.aff5	68		pla				pla
.aff6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aff7					FloatPrepare:
.aff7	20 f8 9d	jsr $9df8			jsr 	DereferenceTopTwo 			; dereference the top two values
.affa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.affd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b000	29 10		and #$10			and 	#NSBIsString
.b002	d0 01		bne $b005			bne 	_FDType
.b004	60		rts				rts
.b005					_FDType:
.b005	4c 8f b2	jmp $b28f			jmp 	TypeError
.b008					NSNormalise:
.b008	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b00b	29 80		and #$80			and 	#$80
.b00d	09 08		ora #$08			ora 	#NSTFloat
.b00f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b012	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; if zero exit
.b015	d0 09		bne $b020			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b017	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b01a	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b01d	a9 00		lda #$00			lda 	#0 							; set Z flag
.b01f	60		rts				rts
.b020					_NSNormaliseOptimise:
.b020	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b023	d0 22		bne $b047			bne 	_NSNormaliseLoop
.b025	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b028	30 1d		bmi $b047			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b02a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b02d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b030	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b033	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b036	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b039	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b03c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b03f	38		sec				sec
.b040	e9 08		sbc #$08			sbc 	#8
.b042	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b045	80 d9		bra $b020			bra 	_NSNormaliseOptimise
.b047					_NSNormaliseLoop:
.b047	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b04a	70 08		bvs $b054			bvs 	_NSNExit 					; exit if so with Z flag clear
.b04c	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; shift mantissa left
.b04f	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b052	80 f3		bra $b047			bra 	_NSNormaliseLoop
.b054					_NSNExit:
.b054	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b056	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d25					AssignNumber:
.9d25	5a		phy				phy
.9d26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d29	85 36		sta $36				sta 	zTemp0
.9d2b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d2e	85 37		sta $37				sta 	zTemp0+1
.9d30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d33	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d35	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d38	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d3a	c9 08		cmp #$08			cmp 	#NSTFloat
.9d3c	f0 2a		beq $9d68			beq 	_ANFloat
.9d3e	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d41	f0 05		beq $9d48			beq		_ANNotFloat
.9d43	e8		inx				inx
.9d44	20 a7 af	jsr $afa7			jsr 	FloatIntegerPart 			; make it an integer
.9d47	ca		dex				dex
.9d48					_ANNotFloat:
.9d48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d4b	29 03		and #$03			and 	#3
.9d4d	d0 05		bne $9d54			bne 	_ANByteWord
.9d4f	20 74 9d	jsr $9d74			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d52	80 1e		bra $9d72			bra 	_ANExit
.9d54					_ANByteWord:
.9d54	48		pha				pha 								; save count
.9d55	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d58	92 36		sta ($36)			sta 	(zTemp0)
.9d5a	68		pla				pla
.9d5b	c9 01		cmp #$01			cmp	 	#1
.9d5d	f0 13		beq $9d72			beq 	_ANExit
.9d5f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d62	a0 01		ldy #$01			ldy 	#1
.9d64	91 36		sta ($36),y			sta 	(zTemp0),y
.9d66	80 0a		bra $9d72			bra 	_ANExit
.9d68					_ANFloat:
.9d68	20 74 9d	jsr $9d74			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d6b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d6e	a0 04		ldy #$04			ldy 	#4
.9d70	91 36		sta ($36),y			sta 	(zTemp0),y
.9d72					_ANExit:
.9d72	7a		ply				ply
.9d73	60		rts				rts
.9d74					_ANCopy4PackSign:
.9d74	a0 03		ldy #$03			ldy 	#3
.9d76	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9d79	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d7b	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9d7e	91 36		sta ($36),y			sta 	(zTemp0),y
.9d80	88		dey				dey
.9d81	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9d84	91 36		sta ($36),y			sta 	(zTemp0),y
.9d86	88		dey				dey
.9d87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d8a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d8c	88		dey				dey
.9d8d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9d90	91 36		sta ($36),y			sta 	(zTemp0),y
.9d92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d93					AssignString:
.9d93	5a		phy				phy
.9d94	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9d97	85 38		sta $38				sta 	zTemp1
.9d99	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d9c	85 39		sta $39				sta 	zTemp1+1
.9d9e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9da1	85 36		sta $36				sta 	zTemp0
.9da3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9da6	85 37		sta $37				sta 	zTemp0+1
.9da8	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9daa	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dac	f0 23		beq $9dd1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dae	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9daf	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9db1	e9 02		sbc #$02			sbc 	#2
.9db3	85 3c		sta $3c				sta 	zsTemp
.9db5	a0 01		ldy #$01			ldy 	#1
.9db7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9db9	e9 00		sbc #$00			sbc 	#0
.9dbb	85 3d		sta $3d				sta 	zsTemp+1
.9dbd	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dbf					_ASGetLength:
.9dbf	c8		iny				iny
.9dc0	b1 38		lda ($38),y			lda 	(zTemp1),y
.9dc2	d0 fb		bne $9dbf			bne 	_ASGetLength
.9dc4	98		tya				tya 								; is this length <= current length
.9dc5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9dc7	90 20		bcc $9de9			bcc 	_ASCopyString
.9dc9	f0 1e		beq $9de9			beq 	_ASCopyString
.9dcb	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9dcd	a0 01		ldy #$01			ldy 	#1
.9dcf	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dd1					_ASNewStringRequired:
.9dd1	e8		inx				inx 								; concrete the new string.
.9dd2	20 39 b5	jsr $b539			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9dd5	ca		dex				dex
.9dd6	18		clc				clc
.9dd7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9dda	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9ddc	92 36		sta ($36)			sta 	(zTemp0)
.9dde	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9de1	69 00		adc #$00			adc 	#0
.9de3	a0 01		ldy #$01			ldy 	#1
.9de5	91 36		sta ($36),y			sta 	(zTemp0),y
.9de7	80 0d		bra $9df6			bra 	_ASExit
.9de9					_ASCopyString:
.9de9	a0 00		ldy #$00			ldy 	#0
.9deb					_ASCopyLoop:
.9deb	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ded	c8		iny				iny
.9dee	c8		iny				iny
.9def	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9df1	88		dey				dey
.9df2	c9 00		cmp #$00			cmp 	#0
.9df4	d0 f5		bne $9deb			bne 	_ASCopyLoop
.9df6					_ASExit:
.9df6	7a		ply				ply
.9df7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9df8					DereferenceTopTwo:
.9df8	e8		inx				inx
.9df9	20 fd 9d	jsr $9dfd			jsr 	Dereference 				; deref x+1
.9dfc	ca		dex				dex  								; falls through to deref x
.9dfd					Dereference:
.9dfd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e00	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e02	f0 57		beq $9e5b			beq 	_DRFExit 					; not a reference
.9e04	5a		phy				phy
.9e05	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e08	85 36		sta $36				sta 	zTemp0
.9e0a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e0d	85 37		sta $37				sta 	zTemp0+1
.9e0f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e12	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e14	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e1a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e1c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e1e	f0 0f		beq $9e2f			beq 	_DRFDereferenceTwo
.9e20	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e22	f0 39		beq $9e5d			beq 	_DRFFull
.9e24	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e27	29 03		and #$03			and 	#3
.9e29	f0 32		beq $9e5d			beq 	_DRFFull 					; the whole word
.9e2b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e2d	f0 07		beq $9e36			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e2f					_DRFDereferenceTwo:
.9e2f	a0 01		ldy #$01			ldy 	#1
.9e31	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e33	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e36					_DRFClear23:
.9e36	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e39	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e3c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e3f	29 18		and #$18			and 	#NSBTypeMask
.9e41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e44	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e46	d0 12		bne $9e5a			bne 	_DRFNotString
.9e48	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e4b	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e4e	d0 0a		bne $9e5a			bne 	_DRFNotString
.9e50	a9 5c		lda #$5c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e52	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e55	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e57	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e5a					_DRFNotString
.9e5a	7a		ply				ply 								; restore Y and exit
.9e5b					_DRFExit:
.9e5b	60		rts				rts
.9e5c					_DRFNullString:
>9e5c	00						.byte 	0
.9e5d					_DRFFull:
.9e5d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e61	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e64	c8		iny				iny
.9e65	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e67	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e6a	c8		iny				iny
.9e6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e6d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e70	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e73	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9e76	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e78	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9e7b	f0 06		beq $9e83			beq 	_DRFNoExponent
.9e7d	c8		iny				iny 								; if not, read the exponent as well.
.9e7e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e80	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e83					_DRFNoExponent:
.9e83	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e86	10 0d		bpl $9e95			bpl 	_DRFExit2 					; if not, then exit.
.9e88	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e8a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e8d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9e90	09 80		ora #$80			ora 	#NSBIsNegative
.9e92	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e95					_DRFExit2:
.9e95	7a		ply				ply
.9e96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9e97					EncodeNumberStart:
.9e97	38		sec				sec
.9e98	80 01		bra $9e9b			bra 	EncodeNumberContinue+1
.9e9a					EncodeNumberContinue:
.9e9a	18		clc				clc
.9e9b					EncodeNumber:
.9e9b	08		php				php 								; save reset.
.9e9c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9e9e	f0 12		beq $9eb2			beq 	_ENIsOkay
.9ea0	c9 30		cmp #$30			cmp 	#"0"
.9ea2	90 04		bcc $9ea8			bcc 	_ENBadNumber
.9ea4	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ea6	90 0a		bcc $9eb2			bcc 	_ENIsOkay
.9ea8					_ENBadNumber:
.9ea8	28		plp				plp 								; throw saved reset
.9ea9	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9eac	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eae	f0 7e		beq $9f2e			beq 	_ENConstructFinal
.9eb0					_ENFail:
.9eb0	18		clc				clc 								; not allowed
.9eb1	60		rts				rts
.9eb2					_ENIsOkay:
.9eb2	28		plp				plp 								; are we restarting
.9eb3	90 15		bcc $9eca			bcc 	_ENNoRestart
.9eb5					_ENStartEncode:
.9eb5	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9eb7	f0 0c		beq $9ec5			beq 	_ENFirstDP
.9eb9	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ebb	20 99 a4	jsr $a499			jsr 	NSMSetByte
.9ebe	a9 01		lda #$01			lda 	#ESTA_Low
.9ec0					_ENExitChange:
.9ec0	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ec3	38		sec				sec
.9ec4	60		rts				rts
.9ec5					_ENFirstDP:
.9ec5	20 97 a4	jsr $a497			jsr 	NSMSetZero 					; clear integer part
.9ec8	80 3f		bra $9f09			bra 	_ESTASwitchFloat			; go straight to float and exi
.9eca					_ENNoRestart:
.9eca	48		pha				pha 								; save on stack.
.9ecb	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9ece	c9 01		cmp #$01			cmp 	#ESTA_Low
.9ed0	f0 09		beq $9edb			beq  	_ESTALowState
.9ed2	c9 02		cmp #$02			cmp 	#ESTA_High
.9ed4	f0 29		beq $9eff			beq 	_ESTAHighState
.9ed6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ed8	f0 3b		beq $9f15			beq 	_ESTADecimalState
>9eda	db						.byte 	$DB 						; causes a break in the emulator
.9edb					_ESTALowState:
.9edb	68		pla				pla 								; get value back
.9edc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ede	f0 29		beq $9f09			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ee0	29 0f		and #$0f			and 	#15 						; make digit
.9ee2	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9ee5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ee8	0a		asl a				asl 	a
.9ee9	0a		asl a				asl 	a
.9eea	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9eed	0a		asl a				asl 	a
.9eee	6d 86 04	adc $0486			adc 	DigitTemp
.9ef1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ef4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9ef6	90 05		bcc $9efd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ef8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9efa	8d 85 04	sta $0485			sta 	EncodeState
.9efd					_ESTANoSwitch:
.9efd	38		sec				sec
.9efe	60		rts				rts
.9eff					_ESTAHighState:
.9eff	68		pla				pla 								; get value back
.9f00	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f02	f0 05		beq $9f09			beq 	_ESTASwitchFloat
.9f04	20 68 9f	jsr $9f68			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f07	38		sec				sec
.9f08	60		rts				rts
.9f09					_ESTASwitchFloat:
.9f09	9c 87 04	stz $0487			stz 	DecimalCount
.9f0c	e8		inx				inx 								; zero the decimal additive.
.9f0d	20 97 a4	jsr $a497			jsr 	NSMSetZero
.9f10	ca		dex				dex
.9f11	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f13	80 ab		bra $9ec0			bra 	_ENExitChange
.9f15					_ESTADecimalState:
.9f15	68		pla				pla 								; digit.
.9f16	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f18	f0 96		beq $9eb0			beq 	_ENFail
.9f1a	e8		inx				inx 								; put digit into fractional part of X+1
.9f1b	20 68 9f	jsr $9f68			jsr 	ESTAShiftDigitIntoMantissa
.9f1e	ca		dex				dex
.9f1f	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f22	ad 87 04	lda $0487			lda 	DecimalCount
.9f25	c9 0b		cmp #$0b			cmp 	#11
.9f27	f0 02		beq $9f2b			beq 	_ESTADSFail
.9f29	38		sec				sec
.9f2a	60		rts				rts
.9f2b					_ESTADSFail:
.9f2b	4c 8a b2	jmp $b28a			jmp 	RangeError
.9f2e					_ENConstructFinal:
.9f2e	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f31	f0 33		beq $9f66			beq 	_ENCFExit 					; no decimals
.9f33	5a		phy				phy
.9f34	0a		asl a				asl 	a 							; x 4 and CLC
.9f35	0a		asl a				asl 	a
.9f36	6d 87 04	adc $0487			adc 	DecimalCount
.9f39	a8		tay				tay
.9f3a	b9 49 b2	lda $b249,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f3d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f40	b9 4a b2	lda $b24a,y			lda 	DecimalScalarTable-5+1,y
.9f43	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f46	b9 4b b2	lda $b24b,y			lda 	DecimalScalarTable-5+2,y
.9f49	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f4c	b9 4c b2	lda $b24c,y			lda 	DecimalScalarTable-5+3,y
.9f4f	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f52	b9 4d b2	lda $b24d,y			lda 	DecimalScalarTable-5+4,y
.9f55	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f58	a9 08		lda #$08			lda 	#NSTFloat
.9f5a	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f5d	7a		ply				ply
.9f5e	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f5f	20 d1 af	jsr $afd1			jsr 	FloatMultiply
.9f62	ca		dex				dex
.9f63	20 66 ae	jsr $ae66			jsr 	FloatAdd 					; add to integer part.
.9f66					_ENCFExit:
.9f66	18		clc				clc 								; reject the digit.
.9f67	60		rts				rts
.9f68					ESTAShiftDigitIntoMantissa:
.9f68	29 0f		and #$0f			and 	#15 						; save digit
.9f6a	48		pha				pha
.9f6b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f6e	48		pha				pha
.9f6f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f72	48		pha				pha
.9f73	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f76	48		pha				pha
.9f77	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f7a	48		pha				pha
.9f7b	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 2
.9f7e	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 4
.9f81	18		clc				clc 								; pop mantissa and add
.9f82	68		pla				pla
.9f83	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f86	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f89	68		pla				pla
.9f8a	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9f8d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f90	68		pla				pla
.9f91	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9f94	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f97	68		pla				pla
.9f98	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9f9b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9f9e	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 10
.9fa1	68		pla				pla 								; add digit
.9fa2	18		clc				clc
.9fa3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fa6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fa9	90 0d		bcc $9fb8			bcc 	_ESTASDExit
.9fab	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fae	d0 08		bne $9fb8			bne 	_ESTASDExit
.9fb0	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fb3	d0 03		bne $9fb8			bne 	_ESTASDExit
.9fb5	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fb8					_ESTASDExit:
.9fb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fb9					EvaluateTerm:
.9fb9	b1 30		lda ($30),y			lda 	(codePtr),y
.9fbb	30 18		bmi $9fd5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fbd	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fbf	b0 6f		bcs $a030			bcs 	_ETVariable
.9fc1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fc3	90 6e		bcc $a033			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fc5	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fc7	b0 6a		bcs $a033			bcs 	_ETPuncUnary
.9fc9	20 97 9e	jsr $9e97			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fcc					_ETNumber:
.9fcc	c8		iny				iny 								; keep encoding until we have the numbers
.9fcd	b1 30		lda ($30),y			lda 	(codePtr),y
.9fcf	20 9a 9e	jsr $9e9a			jsr 	EncodeNumberContinue
.9fd2	b0 f8		bcs $9fcc			bcs 	_ETNumber 					; go back if accepted.
.9fd4	60		rts				rts
.9fd5					_ETCheckUnary:
.9fd5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9fd7	f0 41		beq $a01a			beq 	_ETString
.9fd9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fdb	f0 12		beq $9fef			beq 	_ETHexConstant
.9fdd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9fdf	90 0b		bcc $9fec			bcc 	_ETSyntaxError
.9fe1	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9fe3	b0 07		bcs $9fec			bcs 	_ETSyntaxError
.9fe5	da		phx				phx 								; push X on the stack
.9fe6	0a		asl a				asl 	a 							; put vector x 2 into X
.9fe7	aa		tax				tax
.9fe8	c8		iny				iny 								; consume unary function token
.9fe9	7c 7e 95	jmp ($957e,x)			jmp 	(VectorSet0,x) 				; and do it.
.9fec					_ETSyntaxError:
.9fec	4c 85 b2	jmp $b285			jmp 	SyntaxError
.9fef					_ETHexConstant:
.9fef	c8		iny				iny 								; skip #
.9ff0	c8		iny				iny 								; skip count
.9ff1	20 97 a4	jsr $a497			jsr 	NSMSetZero 					; clear result
.9ff4					_ETHLoop:
.9ff4	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff6	c8		iny				iny 								; and consume
.9ff7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ff9	f0 1e		beq $a019			beq 	_ETHExit
.9ffb	48		pha				pha 								; save on stack.
.9ffc	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 2
.9fff	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 4
.a002	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 8
.a005	20 ac a4	jsr $a4ac			jsr 	NSMShiftLeft 				; x 16
.a008	68		pla				pla 								; ASCII
.a009	c9 41		cmp #$41			cmp 	#'A'
.a00b	90 02		bcc $a00f			bcc 	_ETHNotChar
.a00d	e9 07		sbc #$07			sbc 	#7
.a00f					_ETHNotChar:
.a00f	29 0f		and #$0f			and 	#15 						; digit now
.a011	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a014	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a017	80 db		bra $9ff4			bra 	_ETHLoop 					; go round.
.a019					_ETHExit:
.a019	60		rts				rts
.a01a					_ETString:
.a01a	c8		iny				iny 								; look at length
.a01b	b1 30		lda ($30),y			lda 	(codePtr),y
.a01d	48		pha				pha
.a01e	c8		iny				iny 								; first character
.a01f	20 e1 a4	jsr $a4e1			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a022	68		pla				pla 								; restore count and save
.a023	85 36		sta $36				sta 	zTemp0
.a025	98		tya				tya 								; add length to Y to skip it.
.a026	18		clc				clc
.a027	65 36		adc $36				adc 	zTemp0
.a029	a8		tay				tay
.a02a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a02c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a02f	60		rts				rts
.a030					_ETVariable:
.a030	4c 8a a0	jmp $a08a			jmp 	VariableHandler
.a033					_ETPuncUnary:
.a033	c8		iny				iny 								; consume the unary character
.a034	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a036	f0 2d		beq $a065			beq 	_ETUnaryNegate
.a038	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a03a	f0 39		beq $a075			beq 	_ETDereference
.a03c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a03e	f0 43		beq $a083			beq 	_ETParenthesis
.a040	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a042	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a044	f0 06		beq $a04c			beq 	_ETIndirection
.a046	e6 36		inc $36				inc 	zTemp0
.a048	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a04a	d0 a0		bne $9fec			bne 	_ETSyntaxError
.a04c					_ETIndirection:
.a04c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a04e	1a		inc a				inc 	a
.a04f	48		pha				pha
.a050	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm				; evaluate the term
.a053	20 fd 9d	jsr $9dfd			jsr 	Dereference 				; dereference it.
.a056	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a059	d0 07		bne $a062			bne 	_ETTypeMismatch
.a05b	68		pla				pla 								; indirection 1-2
.a05c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a05e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a061	60		rts				rts
.a062					_ETTypeMismatch:
.a062	4c 8f b2	jmp $b28f			jmp 	TypeError
.a065					_ETUnaryNegate:
.a065	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm				; evaluate the term
.a068	20 fd 9d	jsr $9dfd			jsr 	Dereference 				; dereference it.
.a06b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a06e	29 10		and #$10			and 	#NSTString
.a070	d0 f0		bne $a062			bne 	_ETTypeMismatch
.a072	4c 43 a4	jmp $a443			jmp 	NSMNegate  					; just toggles the sign bit.
.a075					_ETDereference:
.a075	20 b9 9f	jsr $9fb9			jsr 	EvaluateTerm				; evaluate the term
.a078	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a07b	29 20		and #$20			and 	#NSBIsReference
.a07d	f0 e3		beq $a062			beq 	_ETTypeMismatch
.a07f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a082	60		rts				rts
.a083					_ETParenthesis:
.a083	20 e8 9c	jsr $9ce8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a086	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; check for )
.a089	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a08a					VariableHandler:
.a08a	b1 30		lda ($30),y			lda 	(codePtr),y
.a08c	18		clc				clc
.a08d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a08f	85 37		sta $37				sta 	zTemp0+1
.a091	c8		iny				iny
.a092	b1 30		lda ($30),y			lda 	(codePtr),y
.a094	85 36		sta $36				sta 	zTemp0
.a096	c8		iny				iny
.a097	18		clc				clc									; copy variable address+3 to mantissa
.a098	69 03		adc #$03			adc 	#3
.a09a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a09d	a5 37		lda $37				lda 	zTemp0+1
.a09f	69 00		adc #$00			adc 	#0
.a0a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0a4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0a7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0aa	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0ad	5a		phy				phy
.a0ae	a0 02		ldy #$02			ldy 	#2 							; read type
.a0b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b2	7a		ply				ply
.a0b3	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0b5	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0ba	29 04		and #$04			and 	#NSBIsArray
.a0bc	d0 01		bne $a0bf			bne 	_VHArray
.a0be	60		rts				rts
.a0bf					_VHArray:
.a0bf	e8		inx				inx
.a0c0	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0c3	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0c5	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0c8	b1 30		lda ($30),y			lda 	(codePtr),y
.a0ca	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0cc	d0 06		bne $a0d4			bne 	_VHNoSecondIndex
.a0ce	c8		iny				iny 								; skip the comma
.a0cf	e8		inx				inx
.a0d0	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0d3	ca		dex				dex
.a0d4					_VHNoSecondIndex:
.a0d4	ca		dex				dex 								; set X back.
.a0d5	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; and check the right bracket.
.a0d8	5a		phy				phy 								; save position
.a0d9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a0dc	85 3e		sta $3e				sta 	zaTemp
.a0de	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0e1	85 3f		sta $3f				sta 	zaTemp+1
.a0e3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0e7	f0 02		beq $a0eb			beq 	_VHHas2Mask
.a0e9	a9 ff		lda #$ff			lda 	#$FF
.a0eb					_VHHas2Mask:
.a0eb	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a0ee	f0 54		beq $a144			beq 	_VHBadIndex
.a0f0	0a		asl a				asl 	a 							; carry will be set if a second index
.a0f1	90 09		bcc $a0fc			bcc 	_VHCheckFirstIndex
.a0f3	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a0f5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f7	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a0fa	90 48		bcc $a144			bcc 	_VHBadIndex
.a0fc					_VHCheckFirstIndex:
.a0fc	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a0fe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a100	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a103	90 3f		bcc $a144			bcc 	_VHBadIndex
.a105	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a107	64 37		stz $37				stz 	zTemp0+1
.a109	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a10c	30 0f		bmi $a11d			bmi 	_VHNoMultiply
.a10e	da		phx				phx
.a10f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a112	48		pha				pha
.a113	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a115	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a117	1a		inc a				inc 	a 							; add 1 for zero base
.a118	fa		plx				plx
.a119	20 21 b1	jsr $b121			jsr 	Multiply8x8 				; calculate -> Z0
.a11c	fa		plx				plx
.a11d					_VHNoMultiply:
.a11d	18		clc				clc
.a11e	a5 36		lda $36				lda 	zTemp0
.a120	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a123	85 36		sta $36				sta 	zTemp0
.a125	a5 37		lda $37				lda 	zTemp0+1
.a127	69 00		adc #$00			adc 	#0
.a129	85 37		sta $37				sta 	zTemp0+1
.a12b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a12e	20 9d 8d	jsr $8d9d			jsr 	ScaleByBaseType
.a131	18		clc				clc
.a132	b2 3e		lda ($3e)			lda 	(zaTemp)
.a134	65 36		adc $36				adc 	zTemp0
.a136	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a139	a0 01		ldy #$01			ldy 	#1
.a13b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a13d	65 37		adc $37				adc 	zTemp0+1
.a13f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a142	7a		ply				ply 								; restore position
.a143	60		rts				rts
.a144					_VHBadIndex:
.a144	a9 17		lda #$17		lda	#23
.a146	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b057					AbsUnary:
.b057	fa		plx				plx 								; restore stack pos
.b058	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; get a float or int
.b05b	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b05e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b061	29 7f		and #$7f			and 	#$7F
.b063	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b066	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a149					AllocUnary:
.a149	fa		plx				plx 								; restore stack pos
.a14a	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger		; get bytes required.
.a14d	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.a150	da		phx				phx 								; save X/Y
.a151	5a		phy				phy
.a152	8a		txa				txa 								; copy X into Y
.a153	a8		tay				tay
.a154	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a157	aa		tax				tax
.a158	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a15b	20 68 a1	jsr $a168			jsr 	AllocateXABytes 			; allocate memory
.a15e	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a161	8a		txa				txa
.a162	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a165	7a		ply				ply
.a166	fa		plx				plx
.a167	60		rts				rts
.a168					AllocateXABytes:
.a168	5a		phy				phy
.a169	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a16c	84 36		sty $36				sty 	zTemp0
.a16e	5a		phy				phy
.a16f	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a172	84 37		sty $37				sty 	zTemp0+1
.a174	5a		phy				phy
.a175	18		clc				clc 								; add to low memory pointer
.a176	6d 8c 04	adc $048c			adc 	lowMemPtr
.a179	8d 8c 04	sta $048c			sta 	lowMemPtr
.a17c	8a		txa				txa
.a17d	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a180	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a183	b0 2f		bcs $a1b4			bcs 	CISSMemory
.a185	20 a6 a1	jsr $a1a6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a188					_ClearMemory:
.a188	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a18b	c5 36		cmp $36				cmp 	zTemp0
.a18d	d0 07		bne $a196			bne 	_CMClearNext
.a18f	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a192	c5 37		cmp $37				cmp 	zTemp0+1
.a194	f0 0c		beq $a1a2			beq 	_CMExit
.a196					_CMClearNext:
.a196	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a198	92 36		sta ($36)			sta 	(zTemp0)
.a19a	e6 36		inc $36				inc 	zTemp0
.a19c	d0 ea		bne $a188			bne 	_ClearMemory
.a19e	e6 37		inc $37				inc		zTemp0+1
.a1a0	80 e6		bra $a188			bra 	_ClearMemory
.a1a2					_CMExit:
.a1a2	fa		plx				plx
.a1a3	68		pla				pla
.a1a4	7a		ply				ply
.a1a5	60		rts				rts
.a1a6					CheckIdentifierStringSpace:
.a1a6	48		pha				pha
.a1a7	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1aa	18		clc				clc
.a1ab	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1ad	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1b0	b0 02		bcs $a1b4			bcs 	CISSMemory
.a1b2	68		pla				pla
.a1b3	60		rts				rts
.a1b4					CISSMemory:
.a1b4	a9 06		lda #$06		lda	#6
.a1b6	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b067					AscUnary:
.b067	fa		plx				plx 								; restore stack pos
.b068	20 f6 a3	jsr $a3f6			jsr 	EvaluateString 				; get a string
.b06b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b06d	20 99 a4	jsr $a499			jsr 	NSMSetByte
.b070	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b073	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b074					FracUnary:
.b074	fa		plx				plx 								; restore stack pos
.b075	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; get a float or int
.b078	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b07b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b07e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b080	f0 04		beq $b086			beq 	_IUZero
.b082	20 44 af	jsr $af44			jsr 	FloatFractionalPart
.b085	60		rts				rts
.b086					_IUZero:
.b086	20 97 a4	jsr $a497			jsr 	NSMSetZero
.b089	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b08a					IntUnary:
.b08a	fa		plx				plx 								; restore stack pos
.b08b	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; get a float or int
.b08e	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b091	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b094	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b096	f0 03		beq $b09b			beq 	_IUExit
.b098	20 a7 af	jsr $afa7			jsr 	FloatIntegerPart
.b09b					_IUExit:
.b09b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b09c					LenUnary:
.b09c	fa		plx				plx 								; restore stack pos
.b09d	20 f6 a3	jsr $a3f6			jsr 	EvaluateString 				; get a string
.b0a0	5a		phy				phy
.b0a1	a0 00		ldy #$00			ldy 	#0 							; find length
.b0a3					_LenFind:
.b0a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.b0a5	f0 06		beq $b0ad			beq 	_LenExit
.b0a7	c8		iny				iny
.b0a8	d0 f9		bne $b0a3			bne 	_LenFind
.b0aa	4c 8a b2	jmp $b28a			jmp 	RangeError 					; string > 255
.b0ad					_LenExit:
.b0ad	98		tya				tya
.b0ae	20 99 a4	jsr $a499			jsr 	NSMSetByte
.b0b1	7a		ply				ply
.b0b2	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b0b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1b9					Unary_Not:
.a1b9	fa		plx				plx
.a1ba	20 0e a4	jsr $a40e			jsr 	EvaluateInteger 			; get integer
.a1bd	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.a1c0	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; zero mantissa ?
.a1c3	f0 04		beq $a1c9			beq 	_NotZero
.a1c5	20 97 a4	jsr $a497			jsr 	NSMSetZero
.a1c8	60		rts				rts
.a1c9					_NotZero:
.a1c9	4c 4c 99	jmp $994c			jmp 	ReturnTrue
.a1cc					_UNBad:
.a1cc	4c 94 b2	jmp $b294			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1cf					Unary_Random:
.a1cf	fa		plx				plx
.a1d0	20 48 a2	jsr $a248			jsr 	Random32Bit 				; get a random number
.a1d3	20 2d a2	jsr $a22d			jsr 	URCopyToMantissa  			; put in mantissa
.a1d6	e8		inx				inx
.a1d7	20 23 a4	jsr $a423			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a1da	ca		dex				dex
.a1db	20 23 ad	jsr $ad23			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a1de	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a1e1	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a1e4	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.a1e7	60		rts				rts
.a1e8					Unary_Rnd:
.a1e8	fa		plx				plx
.a1e9	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; number to use.
.a1ec	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; closing bracket
.a1ef	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a1f2	f0 2b		beq $a21f			beq 	_URCopySeed
.a1f4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a1f7	10 23		bpl $a21c			bpl 	_URDontSeed
.a1f9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a1fc	49 17		eor #$17			eor 	#$17
.a1fe	8d 88 04	sta $0488			sta 	RandomSeed+0
.a201	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a204	49 a5		eor #$a5			eor 	#$A5
.a206	8d 89 04	sta $0489			sta 	RandomSeed+1
.a209	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a20c	49 c2		eor #$c2			eor 	#$C2
.a20e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a211	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a214	49 9d		eor #$9d			eor 	#$9D
.a216	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a219	20 48 a2	jsr $a248			jsr 	Random32Bit
.a21c					_URDontSeed:
.a21c	20 48 a2	jsr $a248			jsr 	Random32Bit 				; generate a number.
.a21f					_URCopySeed:
.a21f	20 2d a2	jsr $a22d			jsr 	URCopyToMantissa 			; copy into mantissa
.a222	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a224	8d 28 04	sta $0428			sta 	NSExponent
.a227	a9 08		lda #$08			lda 	#NSTFloat
.a229	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a22c	60		rts				rts
.a22d					URCopyToMantissa:
.a22d	ad 88 04	lda $0488			lda 	RandomSeed+0
.a230	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a233	ad 89 04	lda $0489			lda 	RandomSeed+1
.a236	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a239	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a23c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a23f	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a242	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.a244	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a247	60		rts				rts
.a248					Random32Bit:
.a248	5a		phy				phy
.a249	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a24b	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a24e	d0 03		bne $a253			bne 	_Random1
.a250	a8		tay				tay 								; if so do it 256 times
.a251	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a253					_Random1:
.a253	0a		asl a				asl 	a 							; LSFR RNG
.a254	2e 89 04	rol $0489			rol 	RandomSeed+1
.a257	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a25a	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a25d	90 02		bcc $a261			bcc 	_Random2
.a25f	49 c5		eor #$c5			eor 	#$C5
.a261					_Random2:
.a261	88		dey				dey
.a262	d0 ef		bne $a253			bne 	_Random1
.a264	8d 88 04	sta $0488			sta 	RandomSeed+0
.a267	7a		ply				ply
.a268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b0b6					SgnUnary:
.b0b6	fa		plx				plx 								; restore stack pos
.b0b7	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber 				; get a float or int
.b0ba	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.b0bd	20 c7 a4	jsr $a4c7			jsr 	NSMIsZero 					; if zero
.b0c0	f0 10		beq $b0d2			beq 	_SGZero  					; return Int Zero
.b0c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b0c5	48		pha				pha
.b0c6	a9 01		lda #$01			lda 	#1 							; set to 1
.b0c8	20 99 a4	jsr $a499			jsr 	NSMSetByte
.b0cb	68		pla				pla
.b0cc	29 80		and #$80			and		#$80 						; copy the sign byte out
.b0ce	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0d1	60		rts				rts
.b0d2	20 97 a4	jsr $a497	_SGZero:jsr 	NSMSetZero
.b0d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b0d6					ValUnary:
.b0d6	fa		plx				plx 								; restore stack pos
.b0d7	20 ec b0	jsr $b0ec			jsr 	ValMainCode 				; do the main val() code
.b0da	b0 01		bcs $b0dd			bcs 	_VUError 					; couldn't convert
.b0dc	60		rts				rts
.b0dd					_VUError:
.b0dd	4c 8f b2	jmp $b28f			jmp 	TypeError
.b0e0					IsValUnary:
.b0e0	fa		plx				plx 								; restore stack pos
.b0e1	20 ec b0	jsr $b0ec			jsr 	ValMainCode 				; do the main val() code
.b0e4	b0 03		bcs $b0e9			bcs 	_VUBad
.b0e6	4c 4c 99	jmp $994c			jmp 	ReturnTrue
.b0e9					_VUBad:
.b0e9	4c 58 99	jmp $9958			jmp 	ReturnFalse
.b0ec					ValMainCode:
.b0ec	20 f6 a3	jsr $a3f6			jsr 	EvaluateString 				; get a string
.b0ef	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; check right bracket present
.b0f2	5a		phy				phy
.b0f3	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b0f5	f0 17		beq $b10e			beq 	_VMCFail2
.b0f7	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b0f9	48		pha				pha 								; save first character
.b0fa	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b0fc	d0 01		bne $b0ff			bne 	_VMCStart
.b0fe	c8		iny				iny 								; skip over -
.b0ff					_VMCStart:
.b0ff	38		sec				sec 								; initialise first time round.
.b100					_VMCNext:
.b100	c8		iny				iny 								; pre-increment
.b101	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b103	f0 0c		beq $b111			beq 	_VMCSuccess 				; successful.
.b105	20 9b 9e	jsr $9e9b			jsr 	EncodeNumber 				; send it to the number-builder
.b108	90 03		bcc $b10d			bcc 	_VMCFail 					; if failed, give up.
.b10a	18		clc				clc 								; next time round, countinue
.b10b	80 f3		bra $b100			bra 	_VMCNext
.b10d					_VMCFail:
.b10d	68		pla				pla
.b10e					_VMCFail2:
.b10e	7a		ply				ply
.b10f	38		sec				sec
.b110	60		rts				rts
.b111					_VMCSuccess:
.b111	a9 00		lda #$00			lda 	#0 							; construct final
.b113	20 9b 9e	jsr $9e9b			jsr 	EncodeNumber
.b116	68		pla				pla
.b117	c9 2d		cmp #$2d			cmp 	#"-"
.b119	d0 03		bne $b11e			bne 	_VMCNotNegative
.b11b	20 43 a4	jsr $a443			jsr		NSMNegate
.b11e					_VMCNotNegative:
.b11e	7a		ply				ply
.b11f	18		clc				clc
.b120	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a269					ChrUnary:
.a269	fa		plx				plx 								; restore stack pos
.a26a	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger			; get value
.a26d	48		pha				pha
.a26e	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.a271	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a273	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate
.a276	68		pla				pla 								; write number to it
.a277	20 f8 b5	jsr $b5f8			jsr 	StringTempWrite
.a27a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a27b					SpcUnary:
.a27b	fa		plx				plx 								; restore stack pos
.a27c	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger			; get value
.a27f	5a		phy				phy
.a280	48		pha				pha 								; save count
.a281	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate
.a284	7a		ply				ply 								; to do count in Y
.a285					_SpcLoop:
.a285	c0 00		cpy #$00			cpy 	#0
.a287	f0 08		beq $a291			beq 	_SpcExit
.a289	a9 20		lda #$20			lda 	#32
.a28b	20 f8 b5	jsr $b5f8			jsr 	StringTempWrite
.a28e	88		dey				dey
.a28f	80 f4		bra $a285			bra 	_SPCLoop
.a291					_SpcExit:
.a291	7a		ply				ply
.a292	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket
.a295	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a296					Unary_Str:
.a296	fa		plx				plx
.a297	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber  			; get number
.a29a	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; closing bracket
.a29d	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a29f	20 b8 a2	jsr $a2b8			jsr 	ConvertNumberToString 		; do the conversion.
.a2a2	a9 21		lda #$21			lda		#33 						; create buffer
.a2a4	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate 			; allocate memory
.a2a7	da		phx				phx
.a2a8	a2 00		ldx #$00			ldx 	#0
.a2aa					_USCopy:
.a2aa	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2ad	20 f8 b5	jsr $b5f8			jsr 	StringTempWrite
.a2b0	e8		inx				inx
.a2b1	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2b4	d0 f4		bne $a2aa			bne 	_USCopy
.a2b6	fa		plx				plx
.a2b7	60		rts				rts
.a2b8					ConvertNumberToString:
.a2b8	5a		phy				phy 								; save code position
.a2b9	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2bc	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2bf	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2c2	10 0a		bpl $a2ce			bpl 	_CNTSNotNegative
.a2c4	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2c6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2c9	a9 2d		lda #$2d			lda 	#"-"
.a2cb	20 34 a3	jsr $a334			jsr 	WriteDecimalBuffer
.a2ce					_CNTSNotNegative:
.a2ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a2d1	f0 15		beq $a2e8			beq 	_CNTSNotFloat
.a2d3	e8		inx				inx 								; round up
.a2d4	a9 01		lda #$01			lda 	#1
.a2d6	20 99 a4	jsr $a499			jsr 	NSMSetByte
.a2d9	ca		dex				dex
.a2da	bd 28 04	lda $0428,x			lda		NSExponent,x
.a2dd	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a2e0	a9 08		lda #$08			lda 	#NSTFloat
.a2e2	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2e5	20 66 ae	jsr $ae66			jsr 	FloatAdd
.a2e8					_CNTSNotFloat:
.a2e8	20 16 a3	jsr $a316			jsr 	MakePlusTwoString
.a2eb	20 44 af	jsr $af44			jsr 	FloatFractionalPart 		; get the fractional part
.a2ee	20 08 b0	jsr $b008			jsr 	NSNormalise					; normalise , exit if zero
.a2f1	f0 21		beq $a314			beq 	_CNTSExit
.a2f3	a9 2e		lda #$2e			lda 	#"."
.a2f5	20 34 a3	jsr $a334			jsr 	WriteDecimalBuffer 			; write decimal place
.a2f8					_CNTSDecimal:
.a2f8	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a2fb	30 17		bmi $a314			bmi 	_CNTSExit
.a2fd	e8		inx				inx 								; x 10.0
.a2fe	a9 0a		lda #$0a			lda 	#10
.a300	20 99 a4	jsr $a499			jsr 	NSMSetByte
.a303	a9 08		lda #$08			lda 	#NSTFloat
.a305	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a308	ca		dex				dex
.a309	20 d1 af	jsr $afd1			jsr 	FloatMultiply
.a30c	20 16 a3	jsr $a316			jsr 	MakePlusTwoString
.a30f	20 44 af	jsr $af44			jsr 	FloatFractionalPart 		; get the fractional part
.a312	80 e4		bra $a2f8			bra 	_CNTSDecimal 				; keep going.
.a314					_CNTSExit:
.a314	7a		ply				ply
.a315	60		rts				rts
.a316					MakePlusTwoString:
.a316	da		phx				phx
.a317	20 6e a4	jsr $a46e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a31a	e8		inx				inx 								; access it
.a31b	e8		inx				inx
.a31c	20 a7 af	jsr $afa7			jsr 	FloatIntegerPart 			; make it an integer
.a31f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a321	20 10 ae	jsr $ae10			jsr 	ConvertInt32
.a324	a2 00		ldx #$00			ldx	 	#0
.a326					_MPTSCopy:
.a326	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a329	20 34 a3	jsr $a334			jsr 	WriteDecimalBuffer
.a32c	e8		inx				inx
.a32d	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a330	d0 f4		bne $a326			bne 	_MPTSCopy
.a332	fa		plx				plx
.a333	60		rts				rts
.a334					WriteDecimalBuffer:
.a334	da		phx				phx
.a335	ae 95 04	ldx $0495			ldx 	dbOffset
.a338	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a33b	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a33e	ee 95 04	inc $0495			inc 	dbOffset
.a341	fa		plx				plx
.a342	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a343					Unary_Left:
.a343	fa		plx				plx
.a344	18		clc				clc 								; only one parameter
.a345	20 ba a3	jsr $a3ba			jsr 	SubstringInitial 			; set up.
.a348	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a34b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a34e	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a351	80 2c		bra $a37f			bra 	SubstringMain
.a353					Unary_Right:
.a353	fa		plx				plx
.a354	18		clc				clc 								; only one parameter
.a355	20 ba a3	jsr $a3ba			jsr 	SubstringInitial 			; set up.
.a358	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a35b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a35e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a361	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a364	b0 02		bcs $a368			bcs 	_URNotUnderflow
.a366	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a368					_URNotUnderFlow:
.a368	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a36b	80 12		bra $a37f			bra 	SubStringMain
.a36d					Unary_Mid:
.a36d	fa		plx				plx
.a36e	38		sec				sec 								; two parameters
.a36f	20 ba a3	jsr $a3ba			jsr 	SubstringInitial 			; set up.
.a372	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a375	f0 05		beq $a37c			beq 	_UMError
.a377	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a37a	80 03		bra $a37f			bra 	SubStringMain
.a37c					_UMError:
.a37c	4c 94 b2	jmp $b294			jmp 	ArgumentError
.a37f					SubStringMain:
.a37f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a382	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a385	b0 2d		bcs $a3b4			bcs 	_SSMNull 					; if so, return an empty string.
.a387	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a38a	f0 28		beq $a3b4			beq 	_SSMNull 					; return empty string.
.a38c	18		clc				clc 								; add the offset +1 to the address and
.a38d	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a390	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a393	85 36		sta $36				sta 	zTemp0
.a395	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a398	69 00		adc #$00			adc 	#0
.a39a	85 37		sta $37				sta 	zTemp0+1
.a39c					_SSMNoCarry:
.a39c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a39f	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate 			; allocate that many characters
.a3a2	5a		phy				phy 								; save Y
.a3a3	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3a5					_SSMCopy:
.a3a5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3a7	f0 09		beq $a3b2			beq 	_SSMEString 				; no more to copy
.a3a9	20 f8 b5	jsr $b5f8			jsr 	StringTempWrite 			; and write it out.
.a3ac	c8		iny				iny
.a3ad	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3b0	d0 f3		bne $a3a5			bne 	_SSMCopy
.a3b2					_SSMEString:
.a3b2	7a		ply				ply
.a3b3					_SSMExit:
.a3b3	60		rts				rts
.a3b4					_SSMNull:
.a3b4	a9 00		lda #$00			lda 	#0
.a3b6	20 ba b5	jsr $b5ba			jsr 	StringTempAllocate
.a3b9	60		rts				rts
.a3ba					SubstringInitial:
.a3ba	da		phx				phx 								; save initial stack position
.a3bb	08		php				php 								; save carry on stack indicating 2 parameters
.a3bc	20 f6 a3	jsr $a3f6			jsr 	EvaluateString 				; get a string
.a3bf	5a		phy				phy 								; calculate length to exponent.
.a3c0	a0 ff		ldy #$ff			ldy 	#$FF
.a3c2					_SIFindLength:
.a3c2	c8		iny				iny
.a3c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c5	d0 fb		bne $a3c2			bne 	_SIFindLength
.a3c7	98		tya				tya
.a3c8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3cb	7a		ply				ply
.a3cc	e8		inx				inx
.a3cd	20 a7 ac	jsr $aca7			jsr 	CheckComma 					; comma next
.a3d0	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get next parameter
.a3d3	28		plp				plp 								; is it the last parameter ?
.a3d4	90 07		bcc $a3dd			bcc 	_SSIExit 					; if so, exit.
.a3d6	e8		inx				inx
.a3d7	20 a7 ac	jsr $aca7			jsr 	CheckComma 					; comma next
.a3da	20 2f a4	jsr $a42f			jsr 	Evaluate8BitInteger 		; get last parameter
.a3dd					_SSIExit:
.a3dd	fa		plx				plx
.a3de	20 9f ac	jsr $ac9f			jsr 	CheckRightBracket 			; check closing bracket
.a3e1	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a3e2					EvaluateValue:
.a3e2	48		pha				pha
.a3e3	20 e8 9c	jsr $9ce8			jsr		EvaluateExpression 			; expression
.a3e6	20 fd 9d	jsr $9dfd			jsr 	Dereference					; derefernce it
.a3e9	68		pla				pla
.a3ea	60		rts				rts
.a3eb					EvaluateNumber:
.a3eb	20 e2 a3	jsr $a3e2			jsr 	EvaluateValue 				; get a value
.a3ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a3f1	29 10		and #$10			and 	#NSBIsString
.a3f3	d0 16		bne $a40b			bne 	HelperTypeError
.a3f5	60		rts				rts
.a3f6					EvaluateString:
.a3f6	20 e2 a3	jsr $a3e2			jsr 	EvaluateValue 				; get a value
.a3f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a3fc	29 10		and #$10			and 	#NSBIsString
.a3fe	f0 0b		beq $a40b			beq 	HelperTypeError
.a400					CopyAddressToTemp0:
.a400	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a403	85 36		sta $36				sta 	zTemp0
.a405	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a408	85 37		sta $37				sta 	zTemp0+1
.a40a	60		rts				rts
.a40b					HelperTypeError:
.a40b	4c 8f b2	jmp $b28f			jmp 	TypeError
.a40e					EvaluateInteger:
.a40e	20 eb a3	jsr $a3eb			jsr 	EvaluateNumber
.a411	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a414	d0 0a		bne $a420			bne 	HelperValueError 			; if not, it's a float.
.a416	60		rts				rts
.a417					EvaluateUnsignedInteger:
.a417	20 0e a4	jsr $a40e			jsr 	EvaluateInteger 			; check integer is +ve
.a41a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a41d	30 01		bmi $a420			bmi 	HelperValueError
.a41f	60		rts				rts
.a420					HelperValueError:
.a420	4c 94 b2	jmp $b294			jmp 	ArgumentError
.a423					Evaluate16BitInteger:
.a423	20 17 a4	jsr $a417			jsr	 	EvaluateUnsignedInteger		; get integer
.a426	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a429	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a42c	d0 f2		bne $a420			bne 	HelperValueError
.a42e	60		rts				rts
.a42f					Evaluate8BitInteger:
.a42f	20 17 a4	jsr $a417			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a432	d0 ec		bne $a420			bne 	HelperValueError
.a434	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a437	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a43a	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a43d	d0 e1		bne $a420			bne 	HelperValueError
.a43f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a442	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b121					Multiply8x8:
.b121	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b122	85 36		sta $36			  	sta 	zTemp0
.b124	86 37		stx $37				stx 	zTemp0+1
.b126	a9 00		lda #$00			lda 	#0
.b128	a2 08		ldx #$08			ldx 	#8
.b12a					_M88Loop:
.b12a	90 03		bcc $b12f			bcc 	_M88NoAdd
.b12c	18		clc				clc
.b12d	65 37		adc $37				adc 	zTemp0+1
.b12f					_M88NoAdd:
.b12f	6a		ror a				ror 	a
.b130	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b132	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b133	d0 f5		bne $b12a			bne 	_M88Loop
.b135	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b137	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a443					NSMNegate:
.a443	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a446	49 80		eor #$80			eor 	#NSBIsNegative
.a448	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a44b	60		rts				rts
.a44c					NSMNegateMantissa:
.a44c	38		sec				sec
.a44d	a9 00		lda #$00			lda 	#0
.a44f	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a452	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a455	a9 00		lda #$00			lda 	#0
.a457	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a45a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a45d	a9 00		lda #$00			lda 	#0
.a45f	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a462	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a465	a9 00		lda #$00			lda 	#0
.a467	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a46a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a46d	60		rts				rts
.a46e					NSMShiftUpTwo:
.a46e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a471	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a474	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a477	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a47a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a47d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a480	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a483	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a486	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a489	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a48c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a48f	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a492	60		rts				rts
.a493					NSMSetZeroMantissaOnly:
.a493	a9 00		lda #$00			lda 	#0
.a495	80 08		bra $a49f			bra 	NSMSetMantissa
.a497					NSMSetZero:
.a497	a9 00		lda #$00			lda 	#0
.a499					NSMSetByte:
.a499	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a49c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a49f					NSMSetMantissa:
.a49f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4a2	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4a5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4a8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4ab	60		rts				rts
.a4ac					NSMShiftLeft:
.a4ac	18		clc				clc
.a4ad					NSMRotateLeft:
.a4ad	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4b0	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4b3	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4b6	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4b9	60		rts				rts
.a4ba					NSMShiftRight:
.a4ba	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4bd	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4c0	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a4c3	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a4c6	60		rts				rts
.a4c7					NSMIsZero:
.a4c7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4ca	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a4cd	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a4d0	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a4d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b138					Assemble_ora:
.b138	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b13b	01					.byte $01
.b13c					Assemble_and:
.b13c	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b13f	21					.byte $21
.b140					Assemble_eor:
.b140	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b143	41					.byte $41
.b144					Assemble_adc:
.b144	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b147	61					.byte $61
.b148					Assemble_sta:
.b148	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b14b	81					.byte $81
.b14c					Assemble_lda:
.b14c	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b14f	a1					.byte $a1
.b150					Assemble_cmp:
.b150	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b153	c1					.byte $c1
.b154					Assemble_sbc:
.b154	20 9c 89	jsr $899c		jsr	AssembleGroup1
>b157	e1					.byte $e1
.b158					Assemble_asl:
.b158	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b15b	02					.byte $02
>b15c	75					.byte $75
.b15d					Assemble_rol:
.b15d	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b160	22					.byte $22
>b161	75					.byte $75
.b162					Assemble_lsr:
.b162	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b165	42					.byte $42
>b166	75					.byte $75
.b167					Assemble_ror:
.b167	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b16a	62					.byte $62
>b16b	75					.byte $75
.b16c					Assemble_stx:
.b16c	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b16f	82					.byte $82
>b170	50					.byte $50
.b171					Assemble_ldx:
.b171	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b174	a2					.byte $a2
>b175	d0					.byte $d0
.b176					Assemble_dec:
.b176	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b179	c2					.byte $c2
>b17a	55					.byte $55
.b17b					Assemble_inc:
.b17b	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b17e	e2					.byte $e2
>b17f	55					.byte $55
.b180					Assemble_stz:
.b180	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b183	60					.byte $60
>b184	44					.byte $44
.b185					Assemble_bit:
.b185	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b188	20					.byte $20
>b189	55					.byte $55
.b18a					Assemble_sty:
.b18a	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b18d	80					.byte $80
>b18e	54					.byte $54
.b18f					Assemble_ldy:
.b18f	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b192	a0					.byte $a0
>b193	d5					.byte $d5
.b194					Assemble_cpy:
.b194	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b197	c0					.byte $c0
>b198	d4					.byte $d4
.b199					Assemble_cpx:
.b199	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b19c	e0					.byte $e0
>b19d	d0					.byte $d0
.b19e					Assemble_tsb:
.b19e	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b1a1	00					.byte $00
>b1a2	50					.byte $50
.b1a3					Assemble_trb:
.b1a3	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b1a6	10					.byte $10
>b1a7	50					.byte $50
.b1a8					Assemble_jsr:
.b1a8	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b1ab	14					.byte $14
>b1ac	10					.byte $10
.b1ad					Assemble_jmp:
.b1ad	20 a3 89	jsr $89a3		jsr	AssembleGroup2
>b1b0	40					.byte $40
>b1b1	10					.byte $10
.b1b2					Assemble_bpl:
.b1b2	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1b5	10					.byte $10
.b1b6					Assemble_bmi:
.b1b6	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1b9	30					.byte $30
.b1ba					Assemble_bvc:
.b1ba	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1bd	50					.byte $50
.b1be					Assemble_bvs:
.b1be	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1c1	70					.byte $70
.b1c2					Assemble_bcc:
.b1c2	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1c5	90					.byte $90
.b1c6					Assemble_bcs:
.b1c6	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1c9	b0					.byte $b0
.b1ca					Assemble_bne:
.b1ca	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1cd	d0					.byte $d0
.b1ce					Assemble_beq:
.b1ce	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1d1	f0					.byte $f0
.b1d2					Assemble_bra:
.b1d2	20 f4 89	jsr $89f4		jsr	AssembleGroup3
>b1d5	80					.byte $80
.b1d6					Assemble_brk:
.b1d6	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1d9	00					.byte $00
.b1da					Assemble_php:
.b1da	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1dd	08					.byte $08
.b1de					Assemble_clc:
.b1de	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1e1	18					.byte $18
.b1e2					Assemble_plp:
.b1e2	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1e5	28					.byte $28
.b1e6					Assemble_sec:
.b1e6	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1e9	38					.byte $38
.b1ea					Assemble_rti:
.b1ea	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1ed	40					.byte $40
.b1ee					Assemble_pha:
.b1ee	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1f1	48					.byte $48
.b1f2					Assemble_cli:
.b1f2	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1f5	58					.byte $58
.b1f6					Assemble_phy:
.b1f6	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1f9	5a					.byte $5a
.b1fa					Assemble_rts:
.b1fa	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b1fd	60					.byte $60
.b1fe					Assemble_pla:
.b1fe	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b201	68					.byte $68
.b202					Assemble_sei:
.b202	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b205	78					.byte $78
.b206					Assemble_ply:
.b206	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b209	7a					.byte $7a
.b20a					Assemble_dey:
.b20a	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b20d	88					.byte $88
.b20e					Assemble_txa:
.b20e	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b211	8a					.byte $8a
.b212					Assemble_tya:
.b212	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b215	98					.byte $98
.b216					Assemble_txs:
.b216	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b219	9a					.byte $9a
.b21a					Assemble_tay:
.b21a	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b21d	a8					.byte $a8
.b21e					Assemble_tax:
.b21e	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b221	aa					.byte $aa
.b222					Assemble_clv:
.b222	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b225	b8					.byte $b8
.b226					Assemble_tsx:
.b226	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b229	ba					.byte $ba
.b22a					Assemble_iny:
.b22a	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b22d	c8					.byte $c8
.b22e					Assemble_dex:
.b22e	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b231	ca					.byte $ca
.b232					Assemble_cld:
.b232	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b235	d8					.byte $d8
.b236					Assemble_phx:
.b236	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b239	da					.byte $da
.b23a					Assemble_stp:
.b23a	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b23d	db					.byte $db
.b23e					Assemble_inx:
.b23e	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b241	e8					.byte $e8
.b242					Assemble_nop:
.b242	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b245	ea					.byte $ea
.b246					Assemble_sed:
.b246	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b249	f8					.byte $f8
.b24a					Assemble_plx:
.b24a	20 2a 8a	jsr $8a2a		jsr	AssembleGroup4
>b24d	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b24e					DecimalScalarTable:
>b24e	66 66 66 66				.dword $66666666 ; 0.1
>b252	de					.byte $de
>b253	1f 85 eb 51				.dword $51eb851f ; 0.01
>b257	db					.byte $db
>b258	4c 37 89 41				.dword $4189374c ; 0.001
>b25c	d8					.byte $d8
>b25d	ac 8b db 68				.dword $68db8bac ; 0.0001
>b261	d4					.byte $d4
>b262	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b266	d1					.byte $d1
>b267	83 de 1b 43				.dword $431bde83 ; 1e-06
>b26b	ce					.byte $ce
>b26c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b270	ca					.byte $ca
>b271	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b275	c7					.byte $c7
>b276	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b27a	c4					.byte $c4
>b27b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b27f	c0					.byte $c0
>b280	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b284	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b285					SyntaxError:
.b285	a9 02		lda #$02		lda	#2
.b287	4c df 98	jmp $98df		jmp	ErrorHandler
.b28a					RangeError:
.b28a	a9 04		lda #$04		lda	#4
.b28c	4c df 98	jmp $98df		jmp	ErrorHandler
.b28f					TypeError:
.b28f	a9 05		lda #$05		lda	#5
.b291	4c df 98	jmp $98df		jmp	ErrorHandler
.b294					ArgumentError:
.b294	a9 07		lda #$07		lda	#7
.b296	4c df 98	jmp $98df		jmp	ErrorHandler
.b299					NotDoneError:
.b299	a9 0c		lda #$0c		lda	#12
.b29b	4c df 98	jmp $98df		jmp	ErrorHandler
.b29e					ErrorText:
>b29e	42 72 65 61 6b 00			.text	"Break",0
>b2a4	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b2ac	72 72 6f 72 00
>b2b1	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b2b9	20 62 79 20 7a 65 72 6f 00
>b2c2	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b2ca	61 6e 67 65 00
>b2cf	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b2d7	6d 61 74 63 68 00
>b2dd	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b2e5	65 6d 6f 72 79 00
>b2eb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b2f3	61 72 67 75 6d 65 6e 74 00
>b2fc	53 74 6f 70 00				.text	"Stop",0
>b301	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b309	6f 6f 20 6c 6f 6e 67 00
>b311	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b319	6e 20 66 61 69 6c 65 64 00
>b322	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b32a	61 74 61 00
>b32e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b336	65 6e 74 65 64 00
>b33c	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b344	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b350	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b358	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b365	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b36d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b37a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b382	68 6f 75 74 20 57 68 69 6c 65 00
>b38d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b395	68 6f 75 74 20 46 6f 72 00
>b39e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b3a6	61 63 6b 20 66 75 6c 6c 00
>b3af	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b3b7	75 63 74 75 72 65 00
>b3be	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b3c6	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b3d3	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b3db	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b3e9	41 72 72 61 79 20 73 69			.text	"Array size",0
>b3f1	7a 65 00
>b3f4	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b3fc	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b404	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1873."
>b40c	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b41c	30 32 32 2e 20 42 75 69 6c 64 20 31 38 37 33 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b42c					EXTInitialise:
.b42c	64 01		stz $01				stz 	1
.b42e	9c 04 d0	stz $d004			stz 	$D004
.b431	9c 08 d0	stz $d008			stz 	$D008
.b434	9c 09 d0	stz $d009			stz 	$D009
.b437	60		rts				rts
.b438					EXTPrintCharacter:
.b438	48		pha				pha
.b439	da		phx				phx
.b43a	5a		phy				phy
.b43b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b43e	7a		ply				ply
.b43f	fa		plx				plx
.b440	68		pla				pla
.b441	60		rts				rts
.b442					EXTInputSingleCharacter:
.b442	da		phx				phx
.b443	5a		phy				phy
.b444					_EISCWait:
.b444	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b447	c9 00		cmp #$00			cmp 	#0
.b449	f0 f9		beq $b444			beq 	_EISCWait
.b44b	7a		ply				ply
.b44c	fa		plx				plx
.b44d	60		rts				rts
.b44e					EXTInputLine:
.b44e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b450					_ILLoop:
.b450	da		phx				phx 								; read character in
.b451	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b454	fa		plx				plx
.b455	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b457	f0 12		beq $b46b			beq 	_ILBackspace
.b459	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b45b	f0 15		beq $b472			beq 	_ILExit
.b45d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b45f	90 ef		bcc $b450			bcc 	_ILLoop
.b461	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b463	f0 eb		beq $b450			beq 	_ILLoop
.b465	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b468	e8		inx				inx
.b469	80 e5		bra $b450			bra 	_ILLoop
.b46b					_ILBackspace:
.b46b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b46d	f0 e1		beq $b450			beq 	_ILLoop
.b46f	ca		dex				dex 								; back one.
.b470	80 de		bra $b450			bra 	_ILLoop
.b472					_ILExit:
.b472	20 38 b4	jsr $b438			jsr 	EXTPrintCharacter
.b475	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b478	60		rts				rts
.b479					EXTBreakCheck:
.b479	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b47c					MemoryDeleteLine:
.b47c	20 9b b4	jsr $b49b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b47f	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b481	a8		tay				tay
.b482					_MDDLLoop:
.b482	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b484	92 30		sta ($30)			sta 	(codePtr)
.b486	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b488	c5 3a		cmp $3a				cmp 	zTemp2
.b48a	d0 07		bne $b493			bne 	_MDLDLNext
.b48c	a5 31		lda $31				lda 	codePtr+1
.b48e	c5 3b		cmp $3b				cmp 	zTemp2+1
.b490	d0 01		bne $b493			bne 	_MDLDLNext
.b492					_MDDLExit:
.b492	60		rts				rts
.b493					_MDLDLNext:
.b493	e6 30		inc $30				inc 	codePtr						; next byte
.b495	d0 eb		bne $b482			bne 	_MDDLLoop
.b497	e6 31		inc $31				inc 	codePtr+1
.b499	80 e7		bra $b482			bra 	_MDDLLoop
.b49b					IMemoryFindEnd:
.b49b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b49d	85 3a		sta $3a				sta 	0+zTemp2
.b49f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b4a1	85 3b		sta $3b				sta 	1+zTemp2
.b4a3					_MDLFELoop:
.b4a3	b2 3a		lda ($3a)			lda 	(zTemp2)
.b4a5	f0 0b		beq $b4b2			beq 	_MDLFEExit
.b4a7	18		clc				clc
.b4a8	65 3a		adc $3a				adc 	zTemp2
.b4aa	85 3a		sta $3a				sta 	zTemp2
.b4ac	90 f5		bcc $b4a3			bcc 	_MDLFELoop
.b4ae	e6 3b		inc $3b				inc 	zTemp2+1
.b4b0	80 f1		bra $b4a3			bra 	_MDLFELoop
.b4b2					_MDLFEExit:
.b4b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b4b3					MemoryInsertLine:
.b4b3	08		php				php
.b4b4	20 9b b4	jsr $b49b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b4b7	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b4b9	1a		inc a				inc 	a
.b4ba	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b4bc	b0 36		bcs $b4f4			bcs 	_MDLIError
.b4be	28		plp				plp
.b4bf	90 08		bcc $b4c9			bcc 	_MDLIFound
.b4c1	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b4c3	85 30		sta $30				sta 	codePtr
.b4c5	a5 3b		lda $3b				lda 	zTemp2+1
.b4c7	85 31		sta $31				sta 	codePtr+1
.b4c9					_MDLIFound:
.b4c9	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b4cc	a8		tay				tay
.b4cd					_MDLIInsert:
.b4cd	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b4cf	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b4d1	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b4d3	c5 3a		cmp $3a				cmp 	zTemp2
.b4d5	d0 06		bne $b4dd			bne 	_MDLINext
.b4d7	a5 31		lda $31				lda 	codePtr+1
.b4d9	c5 3b		cmp $3b				cmp 	zTemp2+1
.b4db	f0 0a		beq $b4e7			beq 	_MDLIHaveSpace
.b4dd					_MDLINext:
.b4dd	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b4df	d0 02		bne $b4e3			bne 	_MDLINoBorrow
.b4e1	c6 3b		dec $3b				dec 	zTemp2+1
.b4e3					_MDLINoBorrow:
.b4e3	c6 3a		dec $3a				dec 	zTemp2
.b4e5	80 e6		bra $b4cd			bra 	_MDLIInsert
.b4e7					_MDLIHaveSpace:
.b4e7	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b4ea	88		dey				dey 								; from offset-1 to 0
.b4eb					_MDLICopy:
.b4eb	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b4ee	91 30		sta ($30),y			sta 	(codePtr),y
.b4f0	88		dey				dey
.b4f1	10 f8		bpl $b4eb			bpl 	_MDLICopy
.b4f3	60		rts				rts
.b4f4					_MDLIError:
.b4f4	a9 06		lda #$06		lda	#6
.b4f6	4c df 98	jmp $98df		jmp	ErrorHandler
.b4f9					MDLAppendLine:
.b4f9	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b4fb	85 36		sta $36				sta 	zTemp0
.b4fd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b4ff	85 38		sta $38				sta 	0+zTemp1
.b501	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b503	85 39		sta $39				sta 	1+zTemp1
.b505	b2 38		lda ($38)			lda 	(zTemp1)
.b507	d0 0a		bne $b513			bne 	_MDLANoInitialise
.b509	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b50b	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b50e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b510	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b513					_MDLANoInitialise:
.b513	18		clc				clc
.b514	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b517	85 38		sta $38				sta 	zTemp1
.b519	72 36		adc ($36)			adc 	(zTemp0)
.b51b	8d 6b 06	sta $066b			sta 	AppendPointer
.b51e	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b521	85 39		sta $39				sta 	zTemp1+1
.b523	69 00		adc #$00			adc 	#0
.b525	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b528	a0 00		ldy #$00			ldy 	#0
.b52a					_MDLACopy:
.b52a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b52c	91 38		sta ($38),y			sta 	(zTemp1),y
.b52e	c8		iny				iny
.b52f	98		tya				tya
.b530	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b532	d0 f6		bne $b52a			bne 	_MDLACopy
.b534	a9 00		lda #$00			lda 	#0 							; end of program.
.b536	91 38		sta ($38),y			sta 	(zTemp1),y
.b538	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a4d4					MemoryNew:
.a4d4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a4d6	85 30		sta $30				sta 	codePtr
.a4d8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a4da	85 31		sta $31				sta 	codePtr+1
.a4dc	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a4de	92 30		sta ($30)			sta 	(codePtr)
.a4e0	60		rts				rts
.a4e1					MemoryInline:
.a4e1	98		tya				tya 								; put address into stack,x
.a4e2	18		clc				clc
.a4e3	65 30		adc $30				adc 	codePtr
.a4e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a4e8	a5 31		lda $31				lda 	codePtr+1
.a4ea	69 00		adc #$00			adc 	#0
.a4ec	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4ef	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4f2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a4f6					MemorySearch:
.a4f6	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a4f8	86 37		stx $37				stx 	zTemp0+1
.a4fa	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a4fc	85 30		sta $30				sta 	codePtr
.a4fe	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a500	85 31		sta $31				sta 	codePtr+1
.a502					_MTAXLoop:
.a502	b2 30		lda ($30)			lda 	(codePtr)
.a504	18		clc				clc
.a505	f0 21		beq $a528			beq 	_MTAXExit 					; reached end, exit with CC.
.a507	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a509	b1 30		lda ($30),y			lda 	(codePtr),y
.a50b	38		sec				sec
.a50c	e5 36		sbc $36				sbc 	zTemp0
.a50e	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a510	c8		iny				iny 								; do the MSB
.a511	b1 30		lda ($30),y			lda 	(codePtr),y
.a513	e5 37		sbc $37				sbc 	zTemp0+1
.a515	05 38		ora $38				ora 	zTemp1
.a517	f0 0f		beq $a528			beq 	_MTAXExit	 				; found
.a519	b0 0d		bcs $a528			bcs 	_MTAXExit 					; current < required exit
.a51b	18		clc				clc
.a51c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a51e	65 30		adc $30				adc 	codePtr
.a520	85 30		sta $30				sta 	codePtr
.a522	90 02		bcc $a526			bcc 	_CREExit
.a524	e6 31		inc $31				inc 	codePtr+1
.a526					_CREExit:
.a526	80 da		bra $a502			bra 	_MTAXLoop
.a528					_MTAXExit:
.a528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a529					StackPushByte:
.a529	48		pha				pha 								; save byte
.a52a	a5 34		lda $34				lda 	BasicStack
.a52c	d0 09		bne $a537			bne 	_SPBNoBorrow
.a52e	c6 35		dec $35				dec 	BasicStack+1
.a530	48		pha				pha
.a531	a5 35		lda $35				lda 	BasicStack+1
.a533	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a535	90 06		bcc $a53d			bcc 	_SPBMemory
.a537					_SPBNoBorrow:
.a537	c6 34		dec $34				dec 	BasicStack
.a539	68		pla				pla 								; get back and write
.a53a	92 34		sta ($34)			sta 	(BasicStack)
.a53c	60		rts				rts
.a53d					_SPBMemory:
.a53d	a9 12		lda #$12		lda	#18
.a53f	4c df 98	jmp $98df		jmp	ErrorHandler
.a542					StackPopByte:
.a542	b2 34		lda ($34)			lda 	(BasicStack)
.a544	e6 34		inc $34				inc 	BasicStack
.a546	d0 02		bne $a54a			bne 	_SPBNoCarry
.a548	e6 35		inc $35				inc 	BasicStack+1
.a54a					_SPBNoCarry:
.a54a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a54b					StackOpen:
.a54b	48		pha				pha 								; save frame byte
.a54c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a54e	0a		asl a				asl 	a 							; claim twice this for storage
.a54f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a551	38		sec				sec 								; so basically subtracting from
.a552	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a554	85 34		sta $34				sta 	basicStack
.a556	b0 08		bcs $a560			bcs 	_SONoBorrow
.a558	c6 35		dec $35				dec 	basicStack+1
.a55a	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a55c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a55e	90 04		bcc $a564			bcc 	_SOMemory
.a560					_SONoBorrow:
.a560	68		pla				pla 								; get marker back and write at TOS
.a561	92 34		sta ($34)			sta 	(basicStack)
.a563	60		rts				rts
.a564					_SOMemory:
.a564	a9 12		lda #$12		lda	#18
.a566	4c df 98	jmp $98df		jmp	ErrorHandler
.a569					StackClose:
.a569	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a56b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a56d	0a		asl a				asl 	a 							; claim twice this.
.a56e	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a570	85 34		sta $34				sta 	basicStack
.a572	90 02		bcc $a576			bcc 	_SCExit
.a574	e6 35		inc $35				inc 	basicStack+1
.a576					_SCExit:
.a576	60		rts				rts
.a577					StackCheckFrame:
.a577	48		pha				pha
.a578					_StackRemoveLocals:
.a578	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a57a	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a57c	b0 05		bcs $a583			bcs 	_SCNoLocal
.a57e	20 46 ac	jsr $ac46			jsr 	LocalPopValue
.a581	80 f5		bra $a578			bra 	_StackRemoveLocals
.a583					_SCNoLocal:
.a583	68		pla				pla
.a584	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a586	29 f0		and #$f0			and 	#$F0 						; check type bits
.a588	d0 01		bne $a58b			bne 	_SCFError 					; different, we have structures mixed up
.a58a	60		rts				rts
.a58b					_SCFError:
.a58b	8a		txa				txa 								; report error X
.a58c	4c df 98	jmp $98df			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a58f					STKSaveCodePosition:
.a58f	5a		phy				phy
.a590	98		tya				tya 								; save Y
.a591	a0 05		ldy #$05			ldy 	#5
.a593	91 34		sta ($34),y			sta 	(basicStack),y
.a595	88		dey				dey 								; save Code Pointer
.a596					_STKSaveLoop:
.a596	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a599	91 34		sta ($34),y			sta 	(basicStack),y
.a59b	88		dey				dey
.a59c	d0 f8		bne $a596			bne 	_STKSaveLoop
.a59e	7a		ply				ply
.a59f	60		rts				rts
.a5a0					STKLoadCodePosition:
.a5a0	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5a2					_STKLoadLoop:
.a5a2	b1 34		lda ($34),y			lda 	(basicStack),y
.a5a4	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5a7	c8		iny				iny
.a5a8	c0 05		cpy #$05			cpy 	#5
.a5aa	d0 f6		bne $a5a2			bne 	_STKLoadLoop
.a5ac	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5ae	a8		tay				tay
.a5af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5b0					StackReset:
.a5b0	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5b2	85 34		sta $34				sta 	0+basicStack
.a5b4	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5b6	85 35		sta $35				sta 	1+basicStack
.a5b8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5ba	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b539					StringConcrete:
.b539	5a		phy				phy 								; save position on stack
.b53a	20 a6 a1	jsr $a1a6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b53d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b540	85 38		sta $38				sta 	zTemp1
.b542	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b545	85 39		sta $39				sta 	zTemp1+1
.b547	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b549					_SALength:
.b549	c8		iny				iny
.b54a	b1 38		lda ($38),y			lda 	(zTemp1),y
.b54c	d0 fb		bne $b549			bne 	_SALength
.b54e	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b550	b0 3f		bcs $b591			bcs 	_SALengthError
.b552	98		tya				tya 				 				; length of the new string
.b553	18		clc				clc
.b554	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b556	90 02		bcc $b55a			bcc 	_SAHaveLength
.b558	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b55a					_SAHaveLength:
.b55a	48		pha				pha 								; save length.
.b55b	38		sec				sec
.b55c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b55e	6d 8e 04	adc $048e			adc 	StringMemory
.b561	8d 8e 04	sta $048e			sta 	StringMemory
.b564	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b566	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b569	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b56b	6d 8f 04	adc $048f			adc 	StringMemory+1
.b56e	8d 8f 04	sta $048f			sta 	StringMemory+1
.b571	85 3b		sta $3b				sta 	zTemp2+1
.b573	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b576	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b577	38		sec				sec
.b578	e9 03		sbc #$03			sbc 	#3
.b57a	92 3a		sta ($3a)			sta 	(zTemp2)
.b57c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b57e	a0 01		ldy #$01			ldy 	#1
.b580	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b582					_SACopyNewString:
.b582	a0 00		ldy #$00			ldy 	#0
.b584					_SACopyNSLoop:
.b584	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b586	c8		iny				iny 								; write two on in string storage
.b587	c8		iny				iny
.b588	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b58a	88		dey				dey 								; this makes it one one.
.b58b	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b58d	d0 f5		bne $b584			bne 	_SACopyNSLoop
.b58f	7a		ply				ply
.b590	60		rts				rts
.b591					_SALengthError:
.b591	a9 09		lda #$09		lda	#9
.b593	4c df 98	jmp $98df		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b596					StringSystemInitialise:
.b596	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b598	8d 8e 04	sta $048e			sta 	0+StringMemory
.b59b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b59d	8d 8f 04	sta $048f			sta 	1+StringMemory
.b5a0	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b5a3	60		rts				rts
.b5a4					StringSpaceInitialise:
.b5a4	20 a6 a1	jsr $a1a6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5a7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b5a9	8d 90 04	sta $0490			sta 	StringInitialised
.b5ac	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b5af	8d 91 04	sta $0491			sta 	StringTempPointer
.b5b2	ad 8f 04	lda $048f			lda 	StringMemory+1
.b5b5	3a		dec a				dec 	a
.b5b6	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b5b9	60		rts				rts
.b5ba					StringTempAllocate:
.b5ba	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b5bc	b0 35		bcs $b5f3			bcs 	_STALength
.b5be	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b5c1	30 05		bmi $b5c8			bmi 	_STAAllocate
.b5c3	48		pha				pha 								; save value to subtract.
.b5c4	20 a4 b5	jsr $b5a4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b5c7	68		pla				pla 								; restore it
.b5c8					_STAAllocate:
.b5c8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b5ca	18		clc				clc  								; deliberate allows one more
.b5cb	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b5ce	8d 91 04	sta $0491			sta 	StringTempPointer
.b5d1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b5d4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b5d6	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b5d9	69 ff		adc #$ff			adc 	#$FF
.b5db	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b5de	85 3d		sta $3d				sta 	zsTemp+1
.b5e0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b5e3	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b5e6	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b5e9	a9 10		lda #$10			lda 	#NSTString
.b5eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b5ee	a9 00		lda #$00			lda 	#0 							; clear the target string
.b5f0	92 3c		sta ($3c)			sta 	(zsTemp)
.b5f2	60		rts				rts
.b5f3					_STALength:
.b5f3	a9 09		lda #$09		lda	#9
.b5f5	4c df 98	jmp $98df		jmp	ErrorHandler
.b5f8					StringTempWrite:
.b5f8	48		pha				pha
.b5f9	92 3c		sta ($3c)			sta 	(zsTemp)
.b5fb	e6 3c		inc $3c				inc 	zsTemp
.b5fd	d0 02		bne $b601			bne 	_STWNoCarry
.b5ff	e6 3d		inc $3d				inc 	zsTemp+1
.b601					_STWNoCarry:
.b601	a9 00		lda #$00			lda 	#0
.b603	92 3c		sta ($3c)			sta 	(zsTemp)
.b605	68		pla				pla
.b606	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5bd					BackloadProgram:
.a5bd	a2 ff		ldx #$ff			ldx 	#$FF
.a5bf	20 e7 a5	jsr $a5e7			jsr 	BLReadByte
.a5c2	30 1f		bmi $a5e3			bmi 	_BPExit
.a5c4					_BPCopy:
.a5c4	e8		inx				inx  								; copy byte in
.a5c5	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a5c8	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a5cb	20 e7 a5	jsr $a5e7			jsr 	BLReadByte 					; read next byte
.a5ce	30 0a		bmi $a5da			bmi 	_BPEndLine 					; -ve = EOL
.a5d0	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a5d2	d0 02		bne $a5d6			bne 	_BPNotTab
.a5d4	a9 20		lda #$20			lda 	#' '
.a5d6					_BPNotTab:
.a5d6	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a5d8	b0 ea		bcs $a5c4			bcs 	_BPCopy
.a5da					_BPEndLine:
.a5da	20 97 a9	jsr $a997			jsr 	TokeniseLine 				; tokenise the line.
.a5dd	38		sec				sec 								; append not insert
.a5de	20 b3 b4	jsr $b4b3			jsr 	MemoryInsertLine 			; append to current program
.a5e1	80 da		bra $a5bd			bra 	BackloadProgram
.a5e3					_BPExit:
.a5e3	20 a2 8c	jsr $8ca2			jsr 	ClearCommand 				; clear variables etc.
.a5e6	60		rts				rts
.a5e7					BLReadByte:
.a5e7					_BLLoad:
.a5e7	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a5ea	ee e8 a5	inc $a5e8			inc 	_BLLoad+1
.a5ed	d0 03		bne $a5f2			bne 	_BLNoCarry
.a5ef	ee e9 a5	inc $a5e9			inc 	_BLLoad+2
.a5f2					_BLNoCarry:
.a5f2	c9 00		cmp #$00			cmp 	#0
.a5f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a5f5					TokeniseSearchTable:
.a5f5	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a5f7	85 36		sta $36				sta 	zTemp0
.a5f9	a0 00		ldy #$00			ldy 	#0
.a5fb	a9 80		lda #$80			lda 	#$80 						; token #
.a5fd	85 38		sta $38				sta 	zTemp1
.a5ff					_TSTLoop:
.a5ff	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a601	30 49		bmi $a64c			bmi 	_TSTFail 					; -ve = end of table
.a603	f0 2e		beq $a633			beq 	_TSTNext 					; zero, check next it's a dummy
.a605	c8		iny				iny 								; get the hash
.a606	b1 36		lda ($36),y			lda 	(zTemp0),y
.a608	88		dey				dey
.a609	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a60c	d0 25		bne $a633			bne 	_TSTNext
.a60e	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a611	38		sec				sec
.a612	ed 80 04	sbc $0480			sbc 	identStart
.a615	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a617	d0 1a		bne $a633			bne 	_TSTNext
.a619	5a		phy				phy 								; save Y , we might fail
.a61a	c8		iny				iny 								; point to text
.a61b	c8		iny				iny
.a61c	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a61f					_TSTCompareName:
.a61f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a622	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a624	d0 0c		bne $a632			bne 	_TSTNextPullY 				; fail, pullY and do next
.a626	e8		inx				inx
.a627	c8		iny				iny
.a628	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a62b	d0 f2		bne $a61f			bne 	_TSTCompareName
.a62d	7a		ply				ply 								; throw Y
.a62e	a5 38		lda $38				lda 	zTemp1 						; get token #
.a630	38		sec				sec 								; return with CS = passed.
.a631	60		rts				rts
.a632					_TSTNextPullY:
.a632	7a		ply				ply 								; restore current, fall through.
.a633					_TSTNext:
.a633	e6 38		inc $38				inc 	zTemp1 						; token counter
.a635	98		tya				tya
.a636	18		clc				clc
.a637	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a639	1a		inc a				inc 	a 							; +1
.a63a	1a		inc a				inc 	a 							; +2
.a63b	a8		tay				tay
.a63c	10 c1		bpl $a5ff			bpl 	_TSTLoop 					; if Y < $80 loop back
.a63e	98		tya				tya 								; add Y to zTemp0 and reset Y
.a63f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a641	18		clc				clc  								; but have tables > 255 bytes
.a642	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a644	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a646	90 b7		bcc $a5ff			bcc 	_TSTLoop
.a648	e6 37		inc $37				inc 	zTemp0+1
.a64a	80 b3		bra $a5ff			bra 	_TSTLoop
.a64c					_TSTFail:
.a64c	18		clc				clc
.a64d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a64e					KeywordSet0:
>a64e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a650	00 58					.text	0,$58,""               ; $81 !1:SH1
>a652	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a654	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a65a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a662	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a668	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a66f	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a677	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a67e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a685	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a68b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a693	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a69b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a6a1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a6a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a6ae	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a6b3	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a6b7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a6bf	28
>a6c0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a6c8	28
>a6c9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a6cf	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a6d5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a6db	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a6e2	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a6ea	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a6f0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a6f6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a6fb	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a6ff	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a705	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a70d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a714	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a71b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a723	43
>a724	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a72a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a730	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a737	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a73d	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a741	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a747	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a74f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $a9 CLEAR
>a756	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $aa CLS
>a75b	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ab COLOR
>a762	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ac COLOUR
>a76a	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ad DATA
>a770	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ae DIM
>a775	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $af DOWNTO
>a77d	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b0 ELSE
>a783	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b1 FROM
>a789	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b2 GFX
>a78e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b3 GOSUB
>a795	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b4 GOTO
>a79b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b5 HERE
>a7a1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b6 IMAGE
>a7a8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b7 LET
>a7ad	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b8 LINE
>a7b3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b9 LOCAL
>a7ba	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ba OUTLINE
>a7c2	45
>a7c3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bb PRINT
>a7ca	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $bc READ
>a7d0	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $bd RECT
>a7d6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $be REM
>a7db	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bf RETURN
>a7e3	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c0 SOLID
>a7ea	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c1 SPRITE
>a7f2	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c2 TEXT
>a7f8	02 a3 54 4f				.text	2,$a3,"TO"             ; $c3 TO
>a7fc	ff					.text	$FF
.a7fd					KeywordSet1:
>a7fd	00 65					.text	0,$65,""               ; $80 !0:EOF
>a7ff	00 58					.text	0,$58,""               ; $81 !1:SH1
>a801	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a803	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a80b	4c 45
>a80d	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a815	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a81d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a822	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a828	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a82d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a835	45
>a836	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a83b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a843	53
>a844	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a84a	ff					.text	$FF
.a84b					KeywordSet2:
>a84b	00 65					.text	0,$65,""               ; $80 !0:EOF
>a84d	00 58					.text	0,$58,""               ; $81 !1:SH1
>a84f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a851	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a856	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a85b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a860	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a865	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a86a	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a86f	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a874	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a879	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a87e	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a883	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a888	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a88d	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a892	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a897	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a89c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8a1	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a8a6	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a8ab	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a8b0	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a8b5	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a8ba	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a8bf	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a8c4	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a8c9	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a8ce	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a8d3	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a8d8	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a8dd	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a8e2	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a8e7	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a8ec	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a8f1	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a8f6	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a8fb	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a900	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a905	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a90a	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a90f	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a914	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a919	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a91e	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a923	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a928	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a92d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a932	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a937	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a93c	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a941	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a946	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a94b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a950	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a955	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a95a	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a95f	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a964	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a969	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a96e	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a973	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a978	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a97d	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a982	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a987	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a98c	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a991	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a996	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a997					TokeniseLine:
.a997	20 1f ab	jsr $ab1f			jsr 	FixLineBufferCase 			; fix line case
.a99a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a99c	8d a6 04	sta $04a6			sta 	tokenOffset
.a99f	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a9a2	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a9a5	a2 ff		ldx #$ff			ldx 	#$FF
.a9a7					_TKFindFirst:
.a9a7	e8		inx				inx
.a9a8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9ab	f0 79		beq $aa26			beq 	_TKExit
.a9ad	c9 20		cmp #$20			cmp 	#' '
.a9af	90 f6		bcc $a9a7			bcc 	_TKFindFirst
.a9b1	c9 30		cmp #$30			cmp 	#'0'
.a9b3	90 07		bcc $a9bc			bcc 	_TKNoLineNumber
.a9b5	c9 3a		cmp #$3a			cmp 	#'9'+1
.a9b7	b0 03		bcs $a9bc			bcs 	_TKNoLineNumber
.a9b9	20 49 ab	jsr $ab49			jsr 	TokeniseExtractLineNumber
.a9bc					_TKNoLineNumber:
.a9bc					_TKTokeniseLoop:
.a9bc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a9bf	f0 65		beq $aa26			beq 	_TKExit
.a9c1	e8		inx				inx
.a9c2	c9 20		cmp #$20			cmp 	#' '
.a9c4	f0 f6		beq $a9bc			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a9c6	ca		dex				dex 								; undo last get, A contains character, X is position.
.a9c7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a9c9	f0 61		beq $aa2c			beq 	_TKTokeniseIdentifier
.a9cb	c9 41		cmp #$41			cmp 	#'A'
.a9cd	90 04		bcc $a9d3			bcc 	_TKTokenisePunctuation
.a9cf	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a9d1	90 59		bcc $aa2c			bcc 	_TKTokeniseIdentifier
.a9d3					_TKTokenisePunctuation:
.a9d3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a9d5	f0 27		beq $a9fe			beq 	_TKString
.a9d7	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a9d9	f0 28		beq $aa03			beq 	_TKHexConstant
.a9db	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a9dd	f0 29		beq $aa08			beq 	_TKCheckDouble
.a9df	c9 3e		cmp #$3e			cmp 	#'>'
.a9e1	f0 25		beq $aa08			beq 	_TKCheckDouble
.a9e3					_TKStandardPunctuation:
.a9e3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a9e6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a9e8	90 0e		bcc $a9f8			bcc 	_TKNoShift
.a9ea	48		pha				pha 								; save
.a9eb	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a9ed	85 36		sta $36				sta 	zTemp0
.a9ef	68		pla				pla
.a9f0	29 20		and #$20			and 	#32 						; bit 5
.a9f2	4a		lsr a				lsr 	a 							; shift into bit 3
.a9f3	4a		lsr a				lsr 	a
.a9f4	05 36		ora $36				ora 	zTemp0
.a9f6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a9f8					_TKNoShift:
.a9f8	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte 			; write the punctuation character
.a9fb	e8		inx				inx 								; consume the character
.a9fc	80 be		bra $a9bc			bra 	_TKTokeniseLoop 			; and loop round again.
.a9fe					_TKString:
.a9fe	20 ae aa	jsr $aaae			jsr 	TokeniseString
.aa01	80 b9		bra $a9bc			bra 	_TKTokeniseLoop
.aa03					_TKHexConstant:
.aa03	20 e9 aa	jsr $aae9			jsr 	TokeniseHexConstant
.aa06	80 b4		bra $a9bc			bra 	_TKTokeniseLoop
.aa08					_TKCheckDouble:
.aa08	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa0b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa0d	90 d4		bcc $a9e3			bcc 	_TKStandardPunctuation
.aa0f	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa11	b0 d0		bcs $a9e3			bcs 	_TKStandardPunctuation
.aa13	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa16	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa18	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa19	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa1c	38		sec				sec
.aa1d	e9 3c		sbc #$3c			sbc 	#'<'
.aa1f	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa22	e8		inx				inx 								; consume both
.aa23	e8		inx				inx
.aa24	80 96		bra $a9bc			bra 	_TKTokeniseLoop
.aa26	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa28	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aa2b	60		rts				rts
.aa2c					_TKTokeniseIdentifier:
.aa2c	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa2f	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa32					_TKCheckLoop:
.aa32	e8		inx				inx 								; look at next, we know first is identifier.
.aa33	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa36	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa38	f0 f8		beq $aa32			beq 	_TKCheckLoop
.aa3a	c9 30		cmp #$30			cmp	 	#"0"
.aa3c	90 0c		bcc $aa4a			bcc 	_TKEndIdentifier
.aa3e	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa40	90 f0		bcc $aa32			bcc 	_TKCheckLoop
.aa42	c9 41		cmp #$41			cmp	 	#"A"
.aa44	90 04		bcc $aa4a			bcc 	_TKEndIdentifier
.aa46	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aa48	90 e8		bcc $aa32			bcc 	_TKCheckLoop
.aa4a					_TKEndIdentifier:
.aa4a	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aa4d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aa4f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aa51	f0 06		beq $aa59			beq 	_TKHasTypeCharacter
.aa53	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aa55	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aa57	d0 07		bne $aa60			bne 	_TKNoTypeCharacter
.aa59					_TKHasTypeCharacter:
.aa59	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aa5c	e8		inx				inx 								; read next
.aa5d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa60					_TKNoTypeCharacter:
.aa60	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aa62	d0 09		bne $aa6d			bne 	_TKNoArray
.aa64	e8		inx				inx 								; skip the (
.aa65	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aa68	09 04		ora #$04			ora 	#$04
.aa6a	8d 84 04	sta $0484			sta 	identTypeByte
.aa6d					_TKNoArray:
.aa6d	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aa70	20 0a ab	jsr $ab0a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aa73	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aa75	a9 4e		lda #$4e			lda 	#(KeywordSet0) & $FF
.aa77	20 f5 a5	jsr $a5f5			jsr 	TokeniseSearchTable
.aa7a	a2 00		ldx #$00			ldx 	#0
.aa7c	b0 1f		bcs $aa9d			bcs 	_TKFoundToken
.aa7e	a0 a7		ldy #$a7			ldy 	#(KeywordSet1) >> 8
.aa80	a9 fd		lda #$fd			lda 	#(KeywordSet1) & $FF
.aa82	20 f5 a5	jsr $a5f5			jsr 	TokeniseSearchTable
.aa85	a2 81		ldx #$81			ldx 	#$81
.aa87	b0 14		bcs $aa9d			bcs 	_TKFoundToken
.aa89	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aa8b	a9 4b		lda #$4b			lda 	#(KeywordSet2) & $FF
.aa8d	20 f5 a5	jsr $a5f5			jsr 	TokeniseSearchTable
.aa90	a2 82		ldx #$82			ldx 	#$82
.aa92	b0 09		bcs $aa9d			bcs 	_TKFoundToken
.aa94	20 9a ab	jsr $ab9a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aa97	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aa9a	4c bc a9	jmp $a9bc			jmp 	_TKTokeniseLoop 			; and go round again.
.aa9d					_TKFoundToken:
.aa9d	48		pha				pha 								; save token
.aa9e	8a		txa				txa 								; shift in X, is there one ?
.aa9f	f0 03		beq $aaa4			beq 	_TKNoTShift
.aaa1	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte 			; if so, write it out
.aaa4					_TKNoTShift:
.aaa4	68		pla				pla 								; restore and write token
.aaa5	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aaa8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaab	4c bc a9	jmp $a9bc			jmp 	_TKTokeniseLoop 			; and go round again.
.aaae					TokeniseString:
.aaae	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.aab0	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aab3	e8		inx				inx									; start of quoted string.
.aab4	da		phx				phx 								; push start of string on top
.aab5	ca		dex				dex
.aab6					_TSFindEnd:
.aab6	e8		inx				inx
.aab7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.aaba	f0 04		beq $aac0			beq 	_TSEndOfString
.aabc	c9 22		cmp #$22			cmp 	#'"'
.aabe	d0 f6		bne $aab6			bne 	_TSFindEnd
.aac0					_TSEndOfString:
.aac0	7a		ply				ply  								; so now Y is first character, X is character after end.
.aac1	48		pha				pha 								; save terminating character
.aac2	20 ca aa	jsr $aaca			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.aac5	68		pla				pla 								; terminating character
.aac6	f0 01		beq $aac9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.aac8	e8		inx				inx
.aac9					_TSNotQuote:
.aac9	60		rts				rts
.aaca					TOWriteBlockXY:
.aaca	86 36		stx $36				stx 	zTemp0 						; write end character
.aacc	98		tya				tya
.aacd	49 ff		eor #$ff			eor 	#$FF
.aacf	38		sec				sec
.aad0	65 36		adc $36				adc 	zTemp0
.aad2	1a		inc a				inc 	a 							; one extra for NULL
.aad3	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aad6					_TOBlockLoop:
.aad6	c4 36		cpy $36				cpy 	zTemp0
.aad8	f0 09		beq $aae3			beq 	_TOBlockExit
.aada	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.aadd	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aae0	c8		iny				iny
.aae1	80 f3		bra $aad6			bra 	_TOBlockLoop
.aae3					_TOBlockExit:
.aae3	a9 00		lda #$00			lda 	#0
.aae5	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aae8	60		rts				rts
.aae9					TokeniseHexConstant:
.aae9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.aaeb	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.aaee	e8		inx				inx									; start of quoted string.
.aaef	da		phx				phx 								; push start of constant on top
.aaf0	ca		dex				dex
.aaf1					_THFindLoop:
.aaf1	e8		inx				inx
.aaf2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aaf5	c9 30		cmp #$30			cmp 	#"0"
.aaf7	90 0c		bcc $ab05			bcc 	_THFoundEnd
.aaf9	c9 3a		cmp #$3a			cmp 	#"9"+1
.aafb	90 f4		bcc $aaf1			bcc 	_THFindLoop
.aafd	c9 41		cmp #$41			cmp 	#"A"
.aaff	90 04		bcc $ab05			bcc 	_THFoundEnd
.ab01	c9 47		cmp #$47			cmp 	#"F"+1
.ab03	90 ec		bcc $aaf1			bcc 	_THFindLoop
.ab05					_THFoundEnd:
.ab05	7a		ply				ply 								; restore start
.ab06	20 ca aa	jsr $aaca			jsr 	TOWriteBlockXY 				; output the block
.ab09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab0a					TokeniseCalculateHash:
.ab0a	da		phx				phx
.ab0b	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab0e	a9 00		lda #$00			lda 	#0
.ab10					_TCHLoop:
.ab10	18		clc				clc
.ab11	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab14	e8		inx				inx
.ab15	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab18	d0 f6		bne $ab10			bne 	_TCHLoop
.ab1a	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab1d	fa		plx				plx
.ab1e	60		rts				rts
.ab1f					FixLineBufferCase:
.ab1f	a2 00		ldx #$00			ldx 	#0
.ab21					_FLBCLoop:
.ab21	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab24	f0 22		beq $ab48			beq 	_FLBCExit 					; end of string.
.ab26	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab28	f0 11		beq $ab3b			beq 	_FLBCInQuotes
.ab2a	e8		inx				inx
.ab2b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab2d	90 f2		bcc $ab21			bcc 	_FLBCLoop
.ab2f	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab31	b0 ee		bcs $ab21			bcs 	_FLBCLoop
.ab33	38		sec				sec 								; make U/C
.ab34	e9 20		sbc #$20			sbc 	#32
.ab36	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab39	80 e6		bra $ab21			bra 	_FLBCLoop
.ab3b					_FLBCInQuotes:
.ab3b	e8		inx				inx 								; advance
.ab3c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab3f	f0 07		beq $ab48			beq 	_FLBCExit 					; exit on EOS
.ab41	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ab43	d0 f6		bne $ab3b			bne 	_FLBCInQuotes
.ab45	e8		inx				inx 								; skip over it
.ab46	80 d9		bra $ab21			bra 	_FLBCLoop
.ab48					_FLBCExit:
.ab48	60		rts				rts
.ab49					TokeniseExtractLineNumber:
.ab49	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ab4c	48		pha				pha
.ab4d	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ab50	48		pha				pha
.ab51	20 87 ab	jsr $ab87			jsr 	_TELNTimes2 				; line # x 4
.ab54	20 87 ab	jsr $ab87			jsr 	_TELNTimes2 				; line # x 2
.ab57	18		clc				clc 								; add stacked value
.ab58	68		pla				pla
.ab59	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ab5c	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ab5f	68		pla				pla
.ab60	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.ab63	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.ab66	20 87 ab	jsr $ab87			jsr 	_TELNTimes2 				; line # x 10
.ab69	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.ab6c	e8		inx				inx
.ab6d	29 0f		and #$0f			and 	#15 						; add to line #
.ab6f	18		clc				clc
.ab70	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ab73	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ab76	90 03		bcc $ab7b			bcc 	_TLENNoCarry
.ab78	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.ab7b					_TLENNoCarry:
.ab7b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.ab7e	c9 30		cmp #$30			cmp 	#'0'
.ab80	90 04		bcc $ab86			bcc 	_TLENExit
.ab82	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab84	90 c3		bcc $ab49			bcc 	TokeniseExtractLineNumber
.ab86					_TLENExit:
.ab86	60		rts				rts
.ab87					_TELNTimes2:
.ab87	0e a7 04	asl $04a7			asl 	tokenLineNumber
.ab8a	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.ab8d	60		rts				rts
.ab8e					TokeniseWriteByte:
.ab8e	da		phx				phx
.ab8f	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.ab92	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.ab95	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.ab98	fa		plx				plx
.ab99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ab9a					CheckCreateVariableRecord:
.ab9a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ab9c	85 36		sta $36				sta 	0+zTemp0
.ab9e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.aba0	85 37		sta $37				sta 	1+zTemp0
.aba2					_CCVSearch:
.aba2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.aba4	f0 2c		beq $abd2			beq 	_CCVFail
.aba6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.aba8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.abaa	cd 83 04	cmp $0483			cmp 	identHash
.abad	d0 16		bne $abc5			bne 	_CCVNext
.abaf	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.abb1	ae 80 04	ldx $0480			ldx 	identStart
.abb4					_CCVCompare:
.abb4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.abb7	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.abb9	e8		inx				inx 								; advance pointers
.abba	c8		iny				iny
.abbb	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.abbc	d0 07		bne $abc5			bne 	_CCVNext  					; didn't match go to next.
.abbe	90 f4		bcc $abb4			bcc 	_CCVCompare 				; not finished yet.
.abc0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.abc3	f0 41		beq $ac06			beq 	_CCVFound 					; yes, we were successful
.abc5					_CCVNext:
.abc5	18		clc				clc
.abc6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.abc8	65 36		adc $36				adc 	zTemp0
.abca	85 36		sta $36				sta 	zTemp0
.abcc	90 d4		bcc $aba2			bcc 	_CCVSearch
.abce	e6 37		inc $37				inc 	zTemp0+1
.abd0	80 d0		bra $aba2			bra 	_CCVSearch
.abd2					_CCVFail:
.abd2	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.abd4	ad 83 04	lda $0483			lda 	identHash
.abd7	91 36		sta ($36),y			sta 	(zTemp0),y
.abd9	c8		iny				iny 								; offset 2 is the type byte
.abda	ad 84 04	lda $0484			lda 	identTypeByte
.abdd	91 36		sta ($36),y			sta 	(zTemp0),y
.abdf	c8		iny				iny
.abe0					_CCVData:
.abe0	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.abe2	91 36		sta ($36),y			sta 	(zTemp0),y
.abe4	c8		iny				iny
.abe5	c0 08		cpy #$08			cpy 	#8
.abe7	90 f7		bcc $abe0			bcc 	_CCVData
.abe9	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.abec					_CCVCopyName:
.abec	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.abef	91 36		sta ($36),y			sta 	(zTemp0),y
.abf1	e8		inx				inx
.abf2	c8		iny				iny
.abf3	ec 82 04	cpx $0482			cpx 	identTypeEnd
.abf6	d0 f4		bne $abec			bne 	_CCVCopyName
.abf8	98		tya				tya 								; patch offset
.abf9	92 36		sta ($36)			sta 	(zTemp0)
.abfb	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.abfd	91 36		sta ($36),y			sta 	(zTemp0),y
.abff	88		dey				dey
.ac00	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac02	09 80		ora #$80			ora 	#$80
.ac04	91 36		sta ($36),y			sta 	(zTemp0),y
.ac06					_CCVFound:
.ac06	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac08	38		sec				sec
.ac09	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac0b	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac0d	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.ac10	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac12	20 8e ab	jsr $ab8e			jsr 	TokeniseWriteByte
.ac15	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
