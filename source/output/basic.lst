
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 15:51:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_STACK = 16

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ea 81	jsr $81ea			jsr 	NewCommand 					; erase current program
.8006	20 1e 8e	jsr $8e1e			jsr 	BackloadProgram
.8009	4c 7a 82	jmp $827a			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	7d 84					.word	ShiftLeft                        ; $00 <<
>8016	77 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	6d 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	c4 97					.word	SyntaxError                      ; $03 !!3
>801c	c4 97					.word	SyntaxError                      ; $04 ><
>801e	81 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	80 84					.word	ShiftRight                       ; $06 >>
>8022	c4 97					.word	SyntaxError                      ; $07 !!7
>8024	c4 97					.word	SyntaxError                      ; $08 !!8
>8026	c4 97					.word	SyntaxError                      ; $09 !!9
>8028	c4 97					.word	SyntaxError                      ; $0a !!10
>802a	c4 97					.word	SyntaxError                      ; $0b !!11
>802c	c4 97					.word	SyntaxError                      ; $0c !!12
>802e	c4 97					.word	SyntaxError                      ; $0d !!13
>8030	c4 97					.word	SyntaxError                      ; $0e !!14
>8032	c4 97					.word	SyntaxError                      ; $0f !!15
>8034	c4 97					.word	SyntaxError                      ; $10 @
>8036	c4 97					.word	SyntaxError                      ; $11 !!17
>8038	c4 97					.word	SyntaxError                      ; $12 !!18
>803a	c4 97					.word	SyntaxError                      ; $13 [
>803c	24 93					.word	IntegerDivide                    ; $14 \
>803e	c4 97					.word	SyntaxError                      ; $15 ]
>8040	06 86					.word	EorInteger                       ; $16 ^
>8042	c4 97					.word	SyntaxError                      ; $17 _
>8044	c4 97					.word	SyntaxError                      ; $18 `
>8046	c4 97					.word	SyntaxError                      ; $19 !!25
>8048	c4 97					.word	SyntaxError                      ; $1a !!26
>804a	c4 97					.word	SyntaxError                      ; $1b {
>804c	c0 85					.word	OraInteger                       ; $1c |
>804e	c4 97					.word	SyntaxError                      ; $1d }
>8050	c4 97					.word	SyntaxError                      ; $1e ~
>8052	c4 97					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	c4 97					.word	SyntaxError                      ; $20
>8056	4c 86					.word	WordIndirect                     ; $21 !
>8058	c4 97					.word	SyntaxError                      ; $22 "
>805a	c4 97					.word	SyntaxError                      ; $23 #
>805c	c4 97					.word	SyntaxError                      ; $24 $
>805e	71 93					.word	IntegerModulus                   ; $25 %
>8060	7a 85					.word	AndInteger                       ; $26 &
>8062	c4 97					.word	SyntaxError                      ; $27 '
>8064	c4 97					.word	SyntaxError                      ; $28 (
>8066	c4 97					.word	SyntaxError                      ; $29 )
>8068	e6 93					.word	MulInteger                       ; $2a *
>806a	14 85					.word	AddInteger                       ; $2b +
>806c	c4 97					.word	SyntaxError                      ; $2c ,
>806e	4f 85					.word	SubInteger                       ; $2d -
>8070	c4 97					.word	SyntaxError                      ; $2e .
>8072	7d 95					.word	FDivideCommand                   ; $2f /
>8074	c4 97					.word	SyntaxError                      ; $30 0
>8076	c4 97					.word	SyntaxError                      ; $31 1
>8078	c4 97					.word	SyntaxError                      ; $32 2
>807a	c4 97					.word	SyntaxError                      ; $33 3
>807c	c4 97					.word	SyntaxError                      ; $34 4
>807e	c4 97					.word	SyntaxError                      ; $35 5
>8080	c4 97					.word	SyntaxError                      ; $36 6
>8082	c4 97					.word	SyntaxError                      ; $37 7
>8084	c4 97					.word	SyntaxError                      ; $38 8
>8086	c4 97					.word	SyntaxError                      ; $39 9
>8088	c4 97					.word	SyntaxError                      ; $3a :
>808a	c4 97					.word	SyntaxError                      ; $3b ;
>808c	59 83					.word	BinaryCompareLess                ; $3c <
>808e	4f 83					.word	BinaryCompareEqual               ; $3d =
>8090	63 83					.word	BinaryCompareGreater             ; $3e >
>8092	73 86					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	c5 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	d2 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	c4 97					.word	SyntaxError                      ; $82 !2:SH2
>809a	c3 96					.word	AbsUnary                         ; $83 ABS(
>809c	b6 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	d3 96					.word	AscUnary                         ; $85 ASC(
>80a0	53 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	4b 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	e0 96					.word	FracUnary                        ; $88 FRAC(
>80a6	f6 96					.word	IntUnary                         ; $89 INT(
>80a8	4c 97					.word	IsValUnary                       ; $8a ISVAL(
>80aa	2d 8c					.word	Unary_Left                       ; $8b LEFT$(
>80ac	08 97					.word	LenUnary                         ; $8c LEN(
>80ae	57 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	f0 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	3d 8c					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	06 8b					.word	Unary_Rnd                        ; $90 RND(
>80b6	22 97					.word	SgnUnary                         ; $91 SGN(
>80b8	65 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	80 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	3f 83					.word	UnaryTrue                        ; $94 TRUE
>80be	42 97					.word	ValUnary                         ; $95 VAL(
>80c0	c4 97					.word	SyntaxError                      ; $96 FOR
>80c2	96 81					.word	IfCommand                        ; $97 IF
>80c4	c4 97					.word	SyntaxError                      ; $98 PROC
>80c6	58 82					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	c4 97					.word	SyntaxError                      ; $9a WHILE
>80ca	c4 97					.word	SyntaxError                      ; $9b ENDIF
>80cc	c4 97					.word	SyntaxError                      ; $9c ENDPROC
>80ce	c4 97					.word	SyntaxError                      ; $9d NEXT
>80d0	61 82					.word	Command_UNTIL                    ; $9e UNTIL
>80d2	c4 97					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	c4 97					.word	SyntaxError                      ; $a1 CLS
>80d8	c4 97					.word	SyntaxError                      ; $a2 DATA
>80da	c4 97					.word	SyntaxError                      ; $a3 DIM
>80dc	65 81					.word	Command_GOSUB                    ; $a4 GOSUB
>80de	83 81					.word	GotoCommand                      ; $a5 GOTO
>80e0	bb 81					.word	LetCommand                       ; $a6 LET
>80e2	f4 81					.word	Command_Print                    ; $a7 PRINT
>80e4	c4 97					.word	SyntaxError                      ; $a8 READ
>80e6	4b 82					.word	RemCommand                       ; $a9 REM
>80e8	75 81					.word	Command_RETURN                   ; $aa RETURN
>80ea	c4 97					.word	SyntaxError                      ; $ab THEN
>80ec	c4 97					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	c4 97					.word	SyntaxError                      ; $80 !0:EOF
>80f0	c4 97					.word	SyntaxError                      ; $81 !1:SH1
>80f2	c4 97					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	62 81					.word	EndCommand                       ; $85 END
>80fa	c4 97					.word	SyntaxError                      ; $86 LIST
>80fc	ea 81					.word	NewCommand                       ; $87 NEW
>80fe	c4 97					.word	SyntaxError                      ; $88 RESTORE
>8100	7a 82					.word	CommandRUN                       ; $89 RUN
>8102	c4 97					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	c4 97					.word	SyntaxError                      ; $80 !0:EOF
>8106	c4 97					.word	SyntaxError                      ; $81 !1:SH1
>8108	c4 97					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 f8 8c	jsr $8cf8			jsr 	EvaluateInteger 			; the assert test
.810f	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c da 82	jmp $82da		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 0d 8d	jsr $8d0d			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 11 8e	jsr $8e11			jsr 	StackReset
.815e	20 24 99	jsr $9924			jsr 	StringSystemInitialise
.8161	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8162					EndCommand:
.8162	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8165					Command_GOSUB:
.8165	a2 00		ldx #$00			ldx 	#0
.8167	20 0d 8d	jsr $8d0d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.816a	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.816c	20 be 8d	jsr $8dbe			jsr 	StackOpen 					; create frame
.816f	20 f0 8d	jsr $8df0			jsr 	STKSaveCodePosition 		; save current position
.8172	4c 88 81	jmp $8188			jmp 	GotoStackX
.8175					Command_RETURN:
.8175	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8177	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8179	20 e5 8d	jsr $8de5			jsr 	StackCheckFrame
.817c	20 01 8e	jsr $8e01			jsr 	STKLoadCodePosition 		; restore code position
.817f	20 d7 8d	jsr $8dd7			jsr 	StackClose
.8182	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8183					GotoCommand:
.8183	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8185	20 0d 8d	jsr $8d0d			jsr 	Evaluate16BitInteger
.8188					GotoStackX:
.8188	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.818b	48		pha				pha 								; it is slightly inefficient, just in cases.
.818c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.818f	fa		plx				plx
.8190	20 d9 92	jsr $92d9			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8193	4c 85 82	jmp $8285			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8196					IfCommand:
.8196	a2 00		ldx #$00			ldx 	#0 							; If what.
.8198	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber
.819b	b1 30		lda ($30),y			lda 	(codePtr),y
.819d	c9 ab		cmp #$ab			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.819f	f0 04		beq $81a5			beq 	_IfOldStyle
.81a1	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.81a3	d0 13		bne $81b8			bne 	_IfStructured
.81a5					_IfOldStyle:
.81a5	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; is it zero
.81a8	f0 0b		beq $81b5			beq 	_IfFail 					; if fail, go to next line
.81aa	b1 30		lda ($30),y			lda 	(codePtr),y
.81ac	c8		iny				iny 								; consume GOTO or THEN
.81ad	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.81af	f0 01		beq $81b2			beq 	_IfGoto
.81b1	60		rts				rts 								; if THEN just continue
.81b2					_IfGoto:
.81b2	4c 83 81	jmp $8183			jmp 	GotoCommand
.81b5					_IfFail:
.81b5	4c c5 82	jmp $82c5			jmp 	EOLCommand
.81b8					_IfStructured:
>81b8	db						.byte 	$DB 						; causes a break in the emulator
.81b9	80 fd		bra $81b8			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.81bb					LetCommand:
.81bb	a2 00		ldx #$00			ldx 	#0
.81bd	ad c4 86	lda $86c4			lda 	PrecedenceLevel+"*"			; precedence > this
.81c0	20 de 86	jsr $86de			jsr 	EvaluateExpressionAtPrecedence
.81c3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81c5	20 1b 93	jsr $931b			jsr 	CheckNextA
.81c8	e8		inx				inx 								; RHS
.81c9	20 dc 86	jsr $86dc			jsr 	EvaluateExpression
.81cc	ca		dex				dex
.81cd	20 d1 81	jsr $81d1			jsr 	AssignVariable
.81d0	60		rts				rts
.81d1					AssignVariable:
.81d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81d4	48		pha				pha 								; save a copy
.81d5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81d8	29 10		and #$10			and 	#NSBIsString
.81da	d0 0b		bne $81e7			bne 	_ASError
.81dc	68		pla				pla 								; get back
.81dd	29 10		and #$10			and 	#NSBIsString 				; check type
.81df	d0 03		bne $81e4			bne 	_ASString
.81e1	4c 19 87	jmp $8719			jmp 	AssignNumber
.81e4					_ASString:
.81e4	4c 87 87	jmp $8787			jmp 	AssignString
.81e7					_ASError:
.81e7	4c ce 97	jmp $97ce			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81ea					NewCommand:
.81ea	20 88 92	jsr $9288			jsr 	MemoryNew
.81ed	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81f0	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.81f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81f4					Command_Print:
.81f4	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81f5					_CPLoop:
.81f5	08		php				php 								; save last action flag
.81f6	b1 30		lda ($30),y			lda 	(codePtr),y
.81f8	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81fa	f0 46		beq $8242			beq 	_CPExit
.81fc	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81fe	f0 42		beq $8242			beq 	_CPExit
.8200	68		pla				pla 								; throw last action flag
.8201	b1 30		lda ($30),y			lda 	(codePtr),y
.8203	c8		iny				iny
.8204	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8206	f0 37		beq $823f			beq 	_CPContinueWithSameLine
.8208	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.820a	f0 2e		beq $823a			beq 	_CPTab
.820c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.820e	f0 26		beq $8236			beq 	_CPNewLine
.8210	88		dey				dey 								; undo the get.
.8211	a2 00		ldx #$00			ldx 	#0
.8213	20 cc 8c	jsr $8ccc			jsr 	EvaluateValue 				; get a value into slot 0
.8216	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8219	29 10		and #$10			and 	#NSBIsString
.821b	f0 0b		beq $8228			beq 	_CPNumber
.821d	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8220	ad 08 06	lda $0608			lda 	NSMantissa0
.8223	20 2c 83	jsr $832c			jsr 	PrintStringXA
.8226	80 cc		bra $81f4			bra 	Command_Print 				; loop round clearing carry so NL if end
.8228					_CPNumber:
.8228	a9 05		lda #$05			lda 	#5 							; maximum decimals
.822a	20 a2 8b	jsr $8ba2			jsr 	ConvertNumberToString 		; convert to string
.822d	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.822f	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8231	20 2c 83	jsr $832c			jsr 	PrintStringXA
.8234	80 be		bra $81f4			bra 	Command_Print 				; loop round clearing carry so NL if end
.8236					_CPNewLine:
.8236	a9 0d		lda #$0d			lda 	#13
.8238	80 02		bra $823c			bra 	_CPPrintChar
.823a					_CPTab:
.823a	a9 09		lda #$09			lda 	#9 							; print TAB
.823c					_CPPrintChar:
.823c	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.823f					_CPContinueWithSameLine:
.823f	38		sec				sec 								; loop round with carry set, which
.8240	80 b3		bra $81f5			bra 	_CPLoop 					; will inhibit final CR
.8242					_CPExit:
.8242	28		plp				plp 								; get last action flag
.8243	b0 05		bcs $824a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8245	a9 0d		lda #$0d			lda 	#13 						; print new line
.8247	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.824a					_CPExit2:
.824a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.824b					RemCommand:
.824b	b1 30		lda ($30),y			lda 	(codePtr),y
.824d	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.824f	d0 06		bne $8257			bne 	_RMExit
.8251	c8		iny				iny
.8252	98		tya				tya
.8253	38		sec				sec
.8254	71 30		adc ($30),y			adc 	(codePtr),y
.8256	a8		tay				tay
.8257					_RMExit:
.8257	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8258					Command_REPEAT:
.8258	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.825a	20 be 8d	jsr $8dbe			jsr 	StackOpen
.825d	20 f0 8d	jsr $8df0			jsr 	STKSaveCodePosition 		; save loop position
.8260	60		rts				rts
.8261					Command_UNTIL:
.8261	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8263	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8265	20 e5 8d	jsr $8de5			jsr 	StackCheckFrame
.8268	a2 00		ldx #$00			ldx 	#0
.826a	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; work out the number
.826d	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; check if zero
.8270	f0 04		beq $8276			beq 	_CULoopBack 				; if so keep looping
.8272	20 d7 8d	jsr $8dd7			jsr 	StackClose		 			; return
.8275	60		rts				rts
.8276					_CULoopBack:
.8276	20 01 8e	jsr $8e01			jsr 	STKLoadCodePosition 		; loop back
.8279	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.827a					CommandRUN:
.827a	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.827d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.827f	85 30		sta $30				sta 	codePtr
.8281	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8283	85 31		sta $31				sta 	codePtr+1
.8285					RUNNewLine:
.8285	b2 30		lda ($30)			lda 	(codePtr)
.8287	f0 39		beq $82c2			beq 	CRNoProgram         		; no then END.
.8289	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.828b	9a		txs				txs
.828c					RUNCodePointerLine:
.828c	a0 02		ldy #$02			ldy 	#2 							; start of program
.828e					_CRIncMainLoop:
.828e	c8		iny				iny
.828f					_CRMainLoop:
.828f	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8292	b1 30		lda ($30),y			lda 	(codePtr),y
.8294	10 10		bpl $82a6			bpl 	_CRNotKeyword
.8296	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8298	b0 04		bcs $829e			bcs 	_CRIsKeyword
.829a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.829c	b0 1e		bcs $82bc			bcs		_CRSyntaxError
.829e					_CRIsKeyword:
.829e	c8		iny				iny 								; consume command
.829f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.82a0	aa		tax				tax 								; put in X for vector jump
.82a1	20 bf 82	jsr $82bf			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.82a4	80 e9		bra $828f			bra 	_CRMainLoop 				; and loop round
.82a6					_CRNotKeyword:
.82a6	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.82a8	f0 e4		beq $828e			beq 	_CRIncMainLoop
.82aa	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.82ac	90 05		bcc $82b3			bcc 	_CRNotVariable
.82ae					_CRGoLet:
.82ae	20 bb 81	jsr $81bb			jsr 	LetCommand
.82b1	80 dc		bra $828f			bra 	_CRMainLoop
.82b3					_CRNotVariable:
.82b3	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.82b5	f0 f7		beq $82ae			beq 	_CRGoLet
.82b7	c9 21		cmp #$21			cmp 	#KWD_PLING
.82b9	f0 f3		beq $82ae			beq 	_CRGoLet
>82bb	db						.byte 	$DB 						; causes a break in the emulator
.82bc					_CRSyntaxError:
.82bc	4c c4 97	jmp $97c4			jmp 	SyntaxError
.82bf					_CRCallVector0:
.82bf	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.82c2					CRNoProgram:
.82c2	4c 62 81	jmp $8162			jmp 	EndCommand
.82c5					EOLCommand:
.82c5	18		clc				clc
.82c6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.82c8	65 30		adc $30				adc 	codePtr
.82ca	85 30		sta $30				sta 	codePtr
.82cc	90 02		bcc $82d0			bcc 	_CREExit
.82ce	e6 31		inc $31				inc 	codePtr+1
.82d0					_CREExit:
.82d0	80 b3		bra $8285			bra 	RunNewLine
.82d2					Shift1Command:
.82d2	b1 30		lda ($30),y			lda 	(codePtr),y
.82d4	c8		iny				iny
.82d5	0a		asl a				asl 	a
.82d6	aa		tax				tax
.82d7	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.930b					CheckRightBracket:
.930b	b1 30		lda ($30),y			lda 	(codePtr),y
.930d	c8		iny				iny
.930e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9310	d0 0f		bne $9321			bne 	CNAFail
.9312	60		rts				rts
.9313					CheckComma:
.9313	b1 30		lda ($30),y			lda 	(codePtr),y
.9315	c8		iny				iny
.9316	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9318	d0 07		bne $9321			bne 	CNAFail
.931a	60		rts				rts
.931b					CheckNextA:
.931b	d1 30		cmp ($30),y			cmp 	(codePtr),y
.931d	d0 02		bne $9321			bne 	CNAFail
.931f	c8		iny				iny 								; skip character
.9320	60		rts				rts 								; and exit
.9321					CNAFail:
.9321	4c c4 97	jmp $97c4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.82da					ErrorHandler:
.82da	a8		tay				tay 								; find the error text
.82db	f0 42		beq $831f			beq 	_EHEnd
.82dd	a2 00		ldx #$00			ldx 	#0
.82df					_EHFind:
.82df	88		dey				dey 								; found the error text ?
.82e0	f0 0a		beq $82ec			beq 	_EHFound
.82e2					_EHFindZero:
.82e2	bd dd 97	lda $97dd,x			lda 	ErrorText,x 				; find the next error
.82e5	e8		inx				inx
.82e6	c9 00		cmp #$00			cmp 	#0
.82e8	d0 f8		bne $82e2			bne 	_EHFindZero
.82ea	80 f3		bra $82df			bra 	_EHFind
.82ec					_EHFound:
.82ec	bd dd 97	lda $97dd,x			lda 	ErrorText,x 				; print the message
.82ef	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.82f2	e8		inx				inx
.82f3	bd dd 97	lda $97dd,x			lda 	ErrorText,x
.82f6	d0 f4		bne $82ec			bne 	_EHFound
.82f8	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.82fa	b1 30		lda ($30),y			lda 	(codePtr),y
.82fc	d0 05		bne $8303			bne 	_EHAtMsg
.82fe	c8		iny				iny
.82ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8301	f0 17		beq $831a			beq 	_EHCREnd
.8303					_EHAtMsg:
.8303	a2 83		ldx #$83			ldx 	#_AtMsg >> 8 				; print " at "
.8305	a9 22		lda #$22			lda 	#_AtMsg & $FF
.8307	20 2c 83	jsr $832c			jsr 	PrintStringXA
.830a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.830c	b1 30		lda ($30),y			lda 	(codePtr),y
.830e	48		pha				pha
.830f	c8		iny				iny
.8310	b1 30		lda ($30),y			lda 	(codePtr),y
.8312	aa		tax				tax
.8313	68		pla				pla
.8314	20 67 94	jsr $9467			jsr 	ConvertInt16 				; convert XA to string
.8317	20 2c 83	jsr $832c			jsr 	PrintStringXA 				; and print it.
.831a					_EHCREnd:
.831a	a9 0d		lda #$0d			lda 	#13 						; new line
.831c	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.831f					_EHEnd:
.831f	4c 0c 80	jmp $800c			jmp 	WarmStart
>8322	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>832a	20 00
.832c					PrintStringXA:
.832c	5a		phy				phy
.832d	86 37		stx $37				stx 	zTemp0+1
.832f	85 36		sta $36				sta 	zTemp0
.8331	a0 00		ldy #$00			ldy 	#0
.8333					_PSXALoop:
.8333	b1 36		lda ($36),y			lda 	(zTemp0),y
.8335	f0 06		beq $833d			beq 	_PSXAExit
.8337	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.833a	c8		iny				iny
.833b	80 f6		bra $8333			bra 	_PSXALoop
.833d					_PSXAExit:
.833d	7a		ply				ply
.833e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.833f					UnaryTrue:
.833f	fa		plx				plx
.8340					ReturnTrue:
.8340	a9 01		lda #$01			lda 	#1  						; set to 1
.8342	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.8345	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8347	9d 00 06	sta $0600,x			sta 	NSStatus,x
.834a	60		rts				rts
.834b					UnaryFalse:
.834b	fa		plx				plx
.834c					ReturnFalse:
.834c	4c 81 8d	jmp $8d81			jmp 	NSMSetZero 					; set it all to zero
.834f					BinaryCompareEqual:
.834f	fa		plx				plx
.8350	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.8353	c9 00		cmp #$00			cmp 	#0
.8355	f0 e9		beq $8340			beq 	ReturnTrue
.8357	80 f3		bra $834c			bra 	ReturnFalse
.8359					BinaryCompareLess:
.8359	fa		plx				plx
.835a	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.835d	c9 ff		cmp #$ff			cmp 	#$FF
.835f	f0 df		beq $8340			beq 	ReturnTrue
.8361	80 e9		bra $834c			bra 	ReturnFalse
.8363					BinaryCompareGreater:
.8363	fa		plx				plx
.8364	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.8367	c9 01		cmp #$01			cmp 	#1
.8369	f0 d5		beq $8340			beq 	ReturnTrue
.836b	80 df		bra $834c			bra 	ReturnFalse
.836d					BinaryCompareNotEqual:
.836d	fa		plx				plx
.836e	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.8371	c9 00		cmp #$00			cmp 	#0
.8373	d0 cb		bne $8340			bne 	ReturnTrue
.8375	80 d5		bra $834c			bra 	ReturnFalse
.8377					BinaryCompareLessEqual:
.8377	fa		plx				plx
.8378	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.837b	c9 01		cmp #$01			cmp 	#1
.837d	d0 c1		bne $8340			bne 	ReturnTrue
.837f	80 cb		bra $834c			bra 	ReturnFalse
.8381					BinaryCompareGreaterEqual:
.8381	fa		plx				plx
.8382	20 8b 83	jsr $838b			jsr 	CompareBaseCode
.8385	c9 ff		cmp #$ff			cmp 	#$FF
.8387	d0 b7		bne $8340			bne 	ReturnTrue
.8389	80 c1		bra $834c			bra 	ReturnFalse
.838b					CompareBaseCode:
.838b	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; make both values if references.
.838e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8391	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8394	29 10		and #$10			and 	#NSTString
.8396	d0 40		bne $83d8			bne 	_CBCString
.8398	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.839b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.839e	d0 3b		bne $83db			bne 	_CBCFloat
.83a0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.83a3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83a6	29 08		and #$08			and 	#NSTFloat
.83a8	d0 31		bne $83db			bne 	_CBCFloat
.83aa	20 de 83	jsr $83de			jsr 	CompareFixMinusZero
.83ad	e8		inx				inx
.83ae	20 de 83	jsr $83de			jsr 	CompareFixMinusZero
.83b1	ca		dex				dex
.83b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.83b5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83b8	10 0b		bpl $83c5			bpl 	_CDCSameSign
.83ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.83bd	30 16		bmi $83d5			bmi 	_CBCLess 					; return $FF
.83bf					_CBCGreater:
.83bf	a9 01		lda #$01			lda 	#1
.83c1	60		rts				rts
.83c2					_CBCEqual:
.83c2	a9 00		lda #$00			lda 	#0
.83c4	60		rts				rts
.83c5					_CDCSameSign:
.83c5	20 ee 84	jsr $84ee			jsr 	SubTopTwoStack 				; unsigned subtract
.83c8	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; or the mantissa together
.83cb	f0 f5		beq $83c2			beq 	_CBCEqual 					; -0 == 0
.83cd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.83d0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.83d3	10 ea		bpl $83bf			bpl 	_CBCGreater
.83d5					_CBCLess:
.83d5	a9 ff		lda #$ff			lda 	#$FF
.83d7	60		rts				rts
.83d8					_CBCString:
.83d8	4c 44 84	jmp $8444			jmp 	CompareStrings
.83db					_CBCFloat:
.83db	4c 63 95	jmp $9563			jmp 	CompareFloat
.83de					CompareFixMinusZero:
.83de	20 b1 8d	jsr $8db1			jsr 	NSMIsZero
.83e1	d0 03		bne $83e6			bne 	_CFXMZNotZero
.83e3	9e 00 06	stz $0600,x			stz 	NSStatus,x
.83e6					_CFXMZNotZero:
.83e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.83e7					StringConcat:
.83e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.83ea	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83ed	29 18		and #$18			and 	#NSBTypeMask
.83ef	c9 10		cmp #$10			cmp 	#NSTString
.83f1	d0 4e		bne $8441			bne		_SCType
.83f3	64 38		stz $38				stz 	zTemp1 						; counting total length
.83f5	e8		inx				inx
.83f6	20 14 84	jsr $8414			jsr 	_SCSetupZ0 					; setup for second
.83f9	20 1f 84	jsr $841f			jsr 	_SCLengthZ0 				; length for second
.83fc	ca		dex				dex
.83fd	20 14 84	jsr $8414			jsr 	_SCSetupZ0 					; setup for first
.8400	20 1f 84	jsr $841f			jsr 	_SCLengthZ0 				; length for first
.8403	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8405	20 45 99	jsr $9945			jsr 	StringTempAllocate
.8408	20 32 84	jsr $8432			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.840b	e8		inx				inx
.840c	20 14 84	jsr $8414			jsr 	_SCSetupZ0 					; copy second out
.840f	20 32 84	jsr $8432			jsr 	_SCCopy
.8412	ca		dex				dex
.8413	60		rts				rts
.8414					_SCSetupZ0:
.8414	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8417	85 36		sta $36				sta 	zTemp0
.8419	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.841c	85 37		sta $37				sta 	zTemp0+1
.841e	60		rts				rts
.841f					_SCLengthZ0:
.841f	5a		phy				phy
.8420	a0 00		ldy #$00			ldy 	#0
.8422					_SCLenLoop:
.8422	b1 36		lda ($36),y			lda 	(zTemp0),y
.8424	f0 0a		beq $8430			beq 	_SCLExit
.8426	c8		iny				iny
.8427	e6 38		inc $38				inc 	zTemp1
.8429	10 f7		bpl $8422			bpl		_SCLenLoop
.842b	a9 09		lda #$09		lda	#9
.842d	4c da 82	jmp $82da		jmp	ErrorHandler
.8430					_SCLExit:
.8430	7a		ply				ply
.8431	60		rts				rts
.8432					_SCCopy:
.8432	5a		phy				phy
.8433	a0 00		ldy #$00			ldy 	#0
.8435					_SCCopyLoop:
.8435	b1 36		lda ($36),y			lda 	(zTemp0),y
.8437	f0 06		beq $843f			beq 	_SCCExit
.8439	20 83 99	jsr $9983			jsr 	StringTempWrite
.843c	c8		iny				iny
.843d	80 f6		bra $8435			bra 	_SCCopyLoop
.843f					_SCCExit:
.843f	7a		ply				ply
.8440	60		rts				rts
.8441					_SCType:
.8441	4c ce 97	jmp $97ce			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9324					IntegerDivide:
.9324	fa		plx				plx
.9325	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.932b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.932c	0a		asl a				asl 	a
.932d	10 05		bpl $9334			bpl 	_NotRef
.932f	48		pha				pha
.9330	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9333	68		pla				pla
.9334					_NotRef:
.9334	0a		asl a				asl 	a
.9335	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9337	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.933a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.933d	f0 03		beq $9342			beq 	_IntegerCode 				; if clear, then we have two integers
.933f	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.9342					_IntegerCode:
.9342	20 64 93	jsr $9364			jsr 	CheckDivideZero 			; do div zero check
.9345	20 9c 93	jsr $939c			jsr 	Int32Divide 				; do the division
.9348	20 59 94	jsr $9459			jsr 	CalculateSign 				; calculate result sign
.934b					NSMCopyPlusTwoToZero:
.934b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.934e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9351	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9354	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9357	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.935a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.935d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9360	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9363	60		rts				rts
.9364					CheckDivideZero:
.9364	e8		inx				inx
.9365	20 b1 8d	jsr $8db1			jsr 	NSMIsZero
.9368	f0 02		beq $936c			beq 	_CDVError
.936a	ca		dex				dex
.936b	60		rts				rts
.936c					_CDVError:
.936c	a9 03		lda #$03		lda	#3
.936e	4c da 82	jmp $82da		jmp	ErrorHandler
.9371					IntegerModulus:
.9371	fa		plx				plx
.9372	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9375	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9378	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9379	0a		asl a				asl 	a
.937a	10 05		bpl $9381			bpl 	_NotRef
.937c	48		pha				pha
.937d	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9380	68		pla				pla
.9381					_NotRef:
.9381	0a		asl a				asl 	a
.9382	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9384	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9387	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.938a	f0 03		beq $938f			beq 	_IntegerCode 				; if clear, then we have two integers
.938c	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.938f					_IntegerCode:
.938f	20 64 93	jsr $9364			jsr 	CheckDivideZero 			; do div zero check
.9392	20 9c 93	jsr $939c			jsr 	Int32Divide 				; do the division
.9395	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9398	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.939b	60		rts				rts
.939c					Int32Divide:
.939c	48		pha				pha 								; save AXY
.939d	5a		phy				phy
.939e	20 58 8d	jsr $8d58			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93a1	20 7d 8d	jsr $8d7d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.93a4	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.93a6					_I32DivideLoop:
.93a6	e8		inx				inx
.93a7	e8		inx				inx
.93a8	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.93ab	ca		dex				dex
.93ac	ca		dex				dex
.93ad	20 97 8d	jsr $8d97			jsr 	NSMRotateLeft
.93b0	20 dc 93	jsr $93dc			jsr 	DivideCheckSubtract 		; check if subtract possible
.93b3	90 03		bcc $93b8			bcc 	_I32DivideNoCarryIn
.93b5	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.93b8					_I32DivideNoCarryIn:
.93b8	88		dey				dey 								; loop round till division completed.
.93b9	d0 eb		bne $93a6			bne 	_I32DivideLoop
.93bb	7a		ply				ply 								; restore AXY and exit
.93bc	68		pla				pla
.93bd	60		rts				rts
.93be					Int32ShiftDivide:
.93be	48		pha				pha 								; save AY
.93bf	5a		phy				phy
.93c0	e8		inx				inx 								; clear S[X+2]
.93c1	e8		inx				inx
.93c2	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.93c5	ca		dex				dex
.93c6	ca		dex				dex
.93c7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.93c9					_I32SDLoop:
.93c9	20 dc 93	jsr $93dc			jsr 	DivideCheckSubtract 		; check if subtract possible
.93cc	e8		inx				inx
.93cd	e8		inx				inx
.93ce	20 97 8d	jsr $8d97			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.93d1	ca		dex				dex
.93d2	ca		dex				dex
.93d3	20 97 8d	jsr $8d97			jsr 	NSMRotateLeft
.93d6	88		dey				dey 	 							; do 31 times
.93d7	d0 f0		bne $93c9			bne 	_I32SDLoop
.93d9	7a		ply				ply 								; restore AY and exit
.93da	68		pla				pla
.93db	60		rts				rts
.93dc					DivideCheckSubtract:
.93dc	20 ee 84	jsr $84ee			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.93df	b0 04		bcs $93e5			bcs 	_DCSExit 					; if carry set, then could do, exit
.93e1	20 c8 84	jsr $84c8			jsr 	AddTopTwoStack 				; add it back in
.93e4	18		clc				clc 								; and return False
.93e5					_DCSExit:
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.93e6					MulInteger:
.93e6	fa		plx				plx
.93e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.93ea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93ed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93ee	0a		asl a				asl 	a
.93ef	10 05		bpl $93f6			bpl 	_NotRef
.93f1	48		pha				pha
.93f2	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93f5	68		pla				pla
.93f6					_NotRef:
.93f6	0a		asl a				asl 	a 							; put MSB of type into A:7
.93f7	30 0b		bmi $9404			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93f9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93fc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.93ff	f0 06		beq $9407			beq 	_IntegerCode 				; if clear, then we have two integers
.9401	4c 3a 96	jmp $963a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9404					_StringData:
.9404	4c d8 97	jmp $97d8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9407					_IntegerCode:
.9407	20 14 94	jsr $9414			jsr 	MultiplyShort
.940a	c9 00		cmp #$00			cmp 	#0
.940c	f0 05		beq $9413			beq 	_MIExit
.940e	a9 04		lda #$04		lda	#4
.9410	4c da 82	jmp $82da		jmp	ErrorHandler
.9413					_MIExit:
.9413	60		rts				rts
.9414					MultiplyShort:
.9414	5a		phy				phy 								; save Y
.9415	20 58 8d	jsr $8d58			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9418	20 7d 8d	jsr $8d7d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.941b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.941d					_I32MLoop:
.941d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9420	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9423	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9426	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9429	f0 28		beq $9453			beq 	_I32MExit 					; exit if zero
.942b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.942e	29 01		and #$01			and 	#1
.9430	f0 0e		beq $9440			beq 	_I32MNoAdd
.9432	20 c8 84	jsr $84c8			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9435	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9438	10 06		bpl $9440			bpl 	_I32MNoAdd
.943a					_I32ShiftRight:
.943a	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight 				; shift S[X] right
.943d	c8		iny				iny 								; increment shift count
.943e	80 0a		bra $944a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9440					_I32MNoAdd:
.9440	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9443	70 f5		bvs $943a			bvs 	_I32ShiftRight 				; instead.
.9445	e8		inx				inx
.9446	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9449	ca		dex				dex
.944a					_I32MShiftUpper:
.944a	e8		inx				inx 								; shift S[X+2] right
.944b	e8		inx				inx
.944c	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight
.944f	ca		dex				dex
.9450	ca		dex				dex
.9451	80 ca		bra $941d			bra 	_I32MLoop 					; try again.
.9453					_I32MExit:
.9453	20 59 94	jsr $9459			jsr 	CalculateSign
.9456	98		tya				tya 								; shift in A
.9457	7a		ply				ply 								; restore Y and exit
.9458	60		rts				rts
.9459					CalculateSign:
.9459	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.945c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.945f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9462	0a		asl a				asl 	a 							; shift bit 7 into carry
.9463	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9466	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8444					CompareStrings:
.8444	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8447	3d 01 06	and $0601,x			and 	NSStatus+1,x
.844a	29 10		and #$10			and 	#NSBIsString
.844c	f0 2c		beq $847a			beq 	_CSTypeError
.844e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8451	85 36		sta $36				sta 	zTemp0
.8453	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8456	85 37		sta $37				sta 	zTemp0+1
.8458	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.845b	85 38		sta $38				sta 	zTemp1
.845d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8460	85 39		sta $39				sta 	zTemp1+1
.8462	5a		phy				phy 								; save Y so we can access strings
.8463	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8465					_CSLoop:
.8465	c8		iny				iny
.8466	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8468	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.846a	d0 06		bne $8472			bne 	_CSDifferent
.846c	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.846e	d0 f5		bne $8465			bne 	_CSLoop 					; still comparing
.8470					_CSExit:
.8470	7a		ply				ply 								; reached end, return zero in A from EOS
.8471	60		rts				rts
.8472					_CSDifferent:
.8472	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8474	90 fa		bcc $8470			bcc		_CSExit
.8476	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8478	80 f6		bra $8470			bra 	_CSExit
.847a					_CSTypeError:
.847a	4c ce 97	jmp $97ce			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.847d					ShiftLeft:
.847d	38		sec				sec
.847e	80 01		bra $8481			bra 	ShiftMain
.8480					ShiftRight:
.8480	18		clc				clc
.8481					ShiftMain:
.8481	fa		plx				plx 								; restore X
.8482	08		php				php 								; save direction
.8483	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8486	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8489	0a		asl a				asl 	a 							; shift reference bit into sign bit
.848a	0a		asl a				asl 	a
.848b	10 05		bpl $8492			bpl 	_NotRef
.848d	48		pha				pha
.848e	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8491	68		pla				pla
.8492					_NotRef:
.8492	0a		asl a				asl 	a
.8493	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8495	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8498	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.849b	f0 03		beq $84a0			beq 	_IntegerCode 				; if clear, then we have two integers
.849d	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.84a0					_IntegerCode:
.84a0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.84a3	29 e0		and #$e0			and 	#$E0
.84a5	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.84a8	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.84ab	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.84ae	d0 13		bne $84c3			bne 	_SMExit0 					; if >= 32 it will always return zero.
.84b0					_SMLoop:
.84b0	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.84b3	30 11		bmi $84c6			bmi 	_SMExit 					; exit if done.
.84b5	28		plp				plp 								; restore direcition setting
.84b6	08		php				php
.84b7	90 05		bcc $84be			bcc 	_SMRight
.84b9	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; shift left if CS
.84bc	80 f2		bra $84b0			bra 	_SMLoop
.84be					_SMRight:
.84be	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight 				; shift right if CC
.84c1	80 ed		bra $84b0			bra 	_SMLoop
.84c3					_SMExit0:
.84c3	20 81 8d	jsr $8d81			jsr 	NSMSetZero 					; return zero.
.84c6					_SMExit:
.84c6	28		plp				plp 								; throw direction
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.84c8					AddTopTwoStack:
.84c8	18		clc				clc
.84c9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84cc	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.84cf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84d2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84d5	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.84d8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84db	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84de	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.84e1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84e4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84e7	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.84ea	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84ed	60		rts				rts
.84ee					SubTopTwoStack:
.84ee	38		sec				sec
.84ef	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84f2	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.84f5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84f8	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84fb	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.84fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8501	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8504	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8507	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.850a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.850d	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8510	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8513	60		rts				rts
.8514					AddInteger:
.8514	fa		plx				plx
.8515	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8518	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.851b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.851c	0a		asl a				asl 	a
.851d	10 05		bpl $8524			bpl 	_NotRef
.851f	48		pha				pha
.8520	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8523	68		pla				pla
.8524					_NotRef:
.8524	0a		asl a				asl 	a 							; put MSB of type into A:7
.8525	30 0b		bmi $8532			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8527	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.852a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.852d	f0 06		beq $8535			beq 	_IntegerCode 				; if clear, then we have two integers
.852f	4c c2 94	jmp $94c2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8532					_StringData:
.8532	4c e7 83	jmp $83e7			jmp 	StringConcat							; at least one string - don't know both are strings.
.8535					_IntegerCode:
.8535					AddCode:
.8535	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8538	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.853b	10 8b		bpl $84c8			bpl 	AddTopTwoStack
.853d	20 ee 84	jsr $84ee			jsr 	SubTopTwoStack 				; do a physical subtraction
.8540	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8543	10 09		bpl $854e			bpl 	_AddExit
.8545	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8548	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854b	20 36 8d	jsr $8d36			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.854e					_AddExit:
.854e	60		rts				rts
.854f					SubInteger:
.854f	fa		plx				plx
.8550	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8553	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8556	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8557	0a		asl a				asl 	a
.8558	10 05		bpl $855f			bpl 	_NotRef
.855a	48		pha				pha
.855b	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.855e	68		pla				pla
.855f					_NotRef:
.855f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8560	30 0b		bmi $856d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8562	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8565	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8568	f0 06		beq $8570			beq 	_IntegerCode 				; if clear, then we have two integers
.856a	4c c7 94	jmp $94c7			jmp 	FloatingPointSub 							; otherwise at least one float.
.856d					_StringData:
.856d	4c d8 97	jmp $97d8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8570					_IntegerCode:
.8570	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8573	49 80		eor #$80			eor 	#$80
.8575	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8578	80 bb		bra $8535			bra 	AddCode 					; and do the same code as add.
.857a					AndInteger:
.857a	fa		plx				plx
.857b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.857e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8581	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8582	0a		asl a				asl 	a
.8583	10 05		bpl $858a			bpl 	_NotRef
.8585	48		pha				pha
.8586	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8589	68		pla				pla
.858a					_NotRef:
.858a	0a		asl a				asl 	a
.858b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.858d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8590	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8593	f0 03		beq $8598			beq 	_IntegerCode 				; if clear, then we have two integers
.8595	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.8598					_IntegerCode:
.8598	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.859b	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.859e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85a4	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.85a7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85aa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85ad	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.85b0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85b3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85b6	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.85b9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85bc	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85bf	60		rts				rts
.85c0					OraInteger:
.85c0	fa		plx				plx
.85c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85c4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85c7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85c8	0a		asl a				asl 	a
.85c9	10 05		bpl $85d0			bpl 	_NotRef
.85cb	48		pha				pha
.85cc	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85cf	68		pla				pla
.85d0					_NotRef:
.85d0	0a		asl a				asl 	a
.85d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85d3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85d6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85d9	f0 03		beq $85de			beq 	_IntegerCode 				; if clear, then we have two integers
.85db	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.85de					_IntegerCode:
.85de	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85e1	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.85e4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85e7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85ea	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.85ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85f0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85f3	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.85f6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85f9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85fc	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.85ff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8602	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8605	60		rts				rts
.8606					EorInteger:
.8606	fa		plx				plx
.8607	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.860d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.860e	0a		asl a				asl 	a
.860f	10 05		bpl $8616			bpl 	_NotRef
.8611	48		pha				pha
.8612	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8615	68		pla				pla
.8616					_NotRef:
.8616	0a		asl a				asl 	a
.8617	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8619	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.861c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.861f	f0 03		beq $8624			beq 	_IntegerCode 				; if clear, then we have two integers
.8621	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.8624					_IntegerCode:
.8624	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8627	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.862a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.862d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8630	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8633	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8636	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8639	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.863c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.863f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8642	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8645	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8648	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.864b	60		rts				rts
.864c					WordIndirect:
.864c	fa		plx				plx
.864d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8650	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8653	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8654	0a		asl a				asl 	a
.8655	10 05		bpl $865c			bpl 	_NotRef
.8657	48		pha				pha
.8658	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.865b	68		pla				pla
.865c					_NotRef:
.865c	0a		asl a				asl 	a
.865d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.865f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8662	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8665	f0 03		beq $866a			beq 	_IntegerCode 				; if clear, then we have two integers
.8667	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.866a					_IntegerCode:
.866a	20 35 85	jsr $8535			jsr 	AddCode 					; add the two values
.866d	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.866f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8672	60		rts				rts
.8673					ByteIndirect:
.8673	fa		plx				plx
.8674	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8677	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.867a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.867b	0a		asl a				asl 	a
.867c	10 05		bpl $8683			bpl 	_NotRef
.867e	48		pha				pha
.867f	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8682	68		pla				pla
.8683					_NotRef:
.8683	0a		asl a				asl 	a
.8684	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8686	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8689	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.868c	f0 03		beq $8691			beq 	_IntegerCode 				; if clear, then we have two integers
.868e	4c ce 97	jmp $97ce			jmp 	TypeError 					; anything else, type mismatch.
.8691					_IntegerCode:
.8691	20 35 85	jsr $8535			jsr 	AddCode 					; add the two values
.8694	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8696	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8699	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9467					ConvertInt16:
.9467	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.946a	8e 10 06	stx $0610			stx 	NSMantissa1
.946d	9c 18 06	stz $0618			stz 	NSMantissa2
.9470	9c 20 06	stz $0620			stz 	NSMantissa3
.9473	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9476	a2 00		ldx #$00			ldx 	#0 							; stack level
.9478	a9 0a		lda #$0a			lda 	#10 						; base
.947a	80 00		bra $947c			bra 	ConvertInt32
.947c					ConvertInt32:
.947c	5a		phy				phy
.947d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.947f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9482	10 08		bpl $948c			bpl 	_CI32NotNeg
.9484	48		pha				pha
.9485	a9 2d		lda #$2d			lda 	#'-'
.9487	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.948a	c8		iny				iny
.948b	68		pla				pla
.948c					_CI32NotNeg:
.948c	20 9a 94	jsr $949a			jsr 	_CI32DivideConvert 			; recursive conversion
.948f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9491	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9494	7a		ply				ply
.9495	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9497	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9499	60		rts				rts
.949a					_CI32DivideConvert:
.949a	e8		inx				inx 								; write to next slot up
.949b	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.949e	ca		dex				dex
.949f	20 9c 93	jsr $939c			jsr 	Int32Divide 				; divide
.94a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.94a5	48		pha				pha
.94a6	20 4b 93	jsr $934b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.94a9	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; is it zero ?
.94ac	f0 06		beq $94b4			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.94ae	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.94b1	20 9a 94	jsr $949a			jsr 	_CI32DivideConvert 			; and recusrively call.
.94b4					_CI32NoRecurse:
.94b4	68		pla				pla 								; remainder
.94b5	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.94b7	90 02		bcc $94bb			bcc 	_CI32NotHex
.94b9	69 26		adc #$26			adc 	#6+32
.94bb					_CI32NotHex:
.94bb	69 30		adc #$30			adc 	#48
.94bd	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.94c0	c8		iny				iny
.94c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.869a					PrecedenceLevel:
>869a	04					.byte	 4	; $00 <<
>869b	02					.byte	 2	; $01 <=
>869c	02					.byte	 2	; $02 <>
>869d	00					.byte	 0	; $03 !!3
>869e	00					.byte	 0	; $04 ><
>869f	02					.byte	 2	; $05 >=
>86a0	04					.byte	 4	; $06 >>
>86a1	00					.byte	 0	; $07 !!7
>86a2	00					.byte	 0	; $08 !!8
>86a3	00					.byte	 0	; $09 !!9
>86a4	00					.byte	 0	; $0a !!10
>86a5	00					.byte	 0	; $0b !!11
>86a6	00					.byte	 0	; $0c !!12
>86a7	00					.byte	 0	; $0d !!13
>86a8	00					.byte	 0	; $0e !!14
>86a9	00					.byte	 0	; $0f !!15
>86aa	00					.byte	 0	; $10 @
>86ab	00					.byte	 0	; $11 !!17
>86ac	00					.byte	 0	; $12 !!18
>86ad	00					.byte	 0	; $13 [
>86ae	04					.byte	 4	; $14 \
>86af	00					.byte	 0	; $15 ]
>86b0	01					.byte	 1	; $16 ^
>86b1	00					.byte	 0	; $17 _
>86b2	00					.byte	 0	; $18 `
>86b3	00					.byte	 0	; $19 !!25
>86b4	00					.byte	 0	; $1a !!26
>86b5	00					.byte	 0	; $1b {
>86b6	01					.byte	 1	; $1c |
>86b7	00					.byte	 0	; $1d }
>86b8	00					.byte	 0	; $1e ~
>86b9	00					.byte	 0	; $1f [7m<7F>[m
>86ba	00					.byte	 0	; $20
>86bb	05					.byte	 5	; $21 !
>86bc	00					.byte	 0	; $22 "
>86bd	00					.byte	 0	; $23 #
>86be	05					.byte	 5	; $24 $
>86bf	04					.byte	 4	; $25 %
>86c0	01					.byte	 1	; $26 &
>86c1	00					.byte	 0	; $27 '
>86c2	00					.byte	 0	; $28 (
>86c3	00					.byte	 0	; $29 )
>86c4	04					.byte	 4	; $2a *
>86c5	03					.byte	 3	; $2b +
>86c6	00					.byte	 0	; $2c ,
>86c7	03					.byte	 3	; $2d -
>86c8	00					.byte	 0	; $2e .
>86c9	04					.byte	 4	; $2f /
>86ca	00					.byte	 0	; $30 0
>86cb	00					.byte	 0	; $31 1
>86cc	00					.byte	 0	; $32 2
>86cd	00					.byte	 0	; $33 3
>86ce	00					.byte	 0	; $34 4
>86cf	00					.byte	 0	; $35 5
>86d0	00					.byte	 0	; $36 6
>86d1	00					.byte	 0	; $37 7
>86d2	00					.byte	 0	; $38 8
>86d3	00					.byte	 0	; $39 9
>86d4	00					.byte	 0	; $3a :
>86d5	00					.byte	 0	; $3b ;
>86d6	02					.byte	 2	; $3c <
>86d7	02					.byte	 2	; $3d =
>86d8	02					.byte	 2	; $3e >
>86d9	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.86da					EvaluateExpressionAt0:
.86da	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.86dc					EvaluateExpression:
.86dc	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.86de					EvaluateExpressionAtPrecedence:
.86de	48		pha				pha 								; save precedence level
.86df	20 ad 89	jsr $89ad			jsr 	EvaluateTerm 				; evaluate term into level X.
.86e2	68		pla				pla 								; restore precedence level.
.86e3					_EXPRLoop:
.86e3	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.86e5	b1 30		lda ($30),y			lda 	(codePtr),y
.86e7	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.86e9	b0 25		bcs $8710			bcs 	_EXPRExit
.86eb	da		phx				phx 								; read the operator precedence
.86ec	aa		tax				tax
.86ed	bd 9a 86	lda $869a,x			lda 	PrecedenceLevel,x
.86f0	fa		plx				plx
.86f1	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.86f3	f0 1b		beq $8710			beq 	_EXPRExit
.86f5	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.86f7	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.86f9	c5 37		cmp $37				cmp 	zTemp0+1
.86fb	b0 13		bcs $8710			bcs		_EXPRExit 					; if current >= operator exit
.86fd	48		pha				pha 								; save current precedence.
.86fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8700	c8		iny				iny
.8701	48		pha				pha
.8702	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8704	e8		inx				inx 								; work out the right hand side.
.8705	20 de 86	jsr $86de			jsr 	EvaluateExpressionAtPrecedence
.8708	ca		dex				dex
.8709	68		pla				pla 								; get operator, call the code.
.870a	20 13 87	jsr $8713			jsr 	_EXPRCaller
.870d	68		pla				pla 								; restore precedence level
.870e	80 d3		bra $86e3			bra 	_EXPRLoop 					; and go round.
.8710					_EXPRExit:
.8710	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8712	60		rts				rts
.8713					_EXPRCaller:
.8713	da		phx				phx 								; save on stack, first thing is to restore it
.8714	0a		asl a				asl 	a 							; double so can use vectors into X
.8715	aa		tax				tax
.8716	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.94c2					FloatingPointAdd:
.94c2	20 63 96	jsr $9663			jsr 	FloatPrepare 				; prepare for floats
.94c5	80 0b		bra $94d2			bra 	FloatAdd
.94c7					FloatingPointSub:
.94c7	20 63 96	jsr $9663			jsr 	FloatPrepare 				; prepare for floats
.94ca					FloatSubtract:
.94ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.94cd	49 80		eor #$80			eor 	#$80
.94cf	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.94d2					FloatAdd:
.94d2	48		pha				pha
.94d3	5a		phy				phy
.94d4	20 74 96	jsr $9674			jsr 	NSNormalise 				; normalise S[X]
.94d7	f0 54		beq $952d			beq 	_FAReturn1
.94d9	e8		inx				inx 								; normalise S[X+1]
.94da	20 74 96	jsr $9674			jsr 	NSNormalise
.94dd	ca		dex				dex
.94de	c9 00		cmp #$00			cmp 	#0
.94e0	f0 6f		beq $9551			beq 	_FAExit 					; if so, just return A
.94e2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.94e5	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.94e8	f0 1b		beq $9505			beq 	_FAExponentsEqual
.94ea	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.94ed	a8		tay				tay
.94ee	38		sec				sec 								; do a signed comparison of the exponents.
.94ef	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.94f2	50 02		bvc $94f6			bvc 	_FANoSignedChange
.94f4	49 80		eor #$80			eor 	#$80
.94f6					_FANoSignedChange:
.94f6	29 80		and #$80			and 	#$80
.94f8	10 03		bpl $94fd			bpl 	_FAHaveMax
.94fa	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.94fd					_FAHaveMax:
.94fd	20 54 95	jsr $9554			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9500	e8		inx				inx
.9501	20 54 95	jsr $9554			jsr 	_FAShiftToExponent
.9504	ca		dex				dex
.9505					_FAExponentsEqual:
.9505	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9508	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.950b	30 10		bmi $951d			bmi 	_FADifferentSigns
.950d	20 c8 84	jsr $84c8			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9510	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9513	10 3c		bpl $9551			bpl 	_FAExit 					; if no, we are done.
.9515	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9518	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.951b	80 34		bra $9551			bra 	_FAExit
.951d					_FADifferentSigns:
.951d	20 ee 84	jsr $84ee			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9520	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9523	10 2c		bpl $9551			bpl 	_FAExit 					; if no, we are done.
.9525	20 2d 8d	jsr $8d2d			jsr 	NSMNegate 					; netate result
.9528	20 36 8d	jsr $8d36			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.952b	80 24		bra $9551			bra 	_FAExit
.952d					_FAReturn1:
.952d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9530	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9533	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9536	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9539	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.953c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.953f	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9542	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9545	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9548	9d 28 06	sta $0628,x			sta 	NSExponent,x
.954b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.954e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9551					_FAExit:
.9551	7a		ply				ply
.9552	68		pla				pla
.9553	60		rts				rts
.9554					_FAShiftToExponent:
.9554					_FAShiftToExponent2:
.9554	98		tya				tya 								; compare Y to exponent
.9555	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9558	f0 08		beq $9562			beq 	_FASEExit 					; exit if so.
.955a	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight	 			; shift the mantissa right
.955d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9560	80 f2		bra $9554			bra 	_FAShiftToExponent2
.9562					_FASEExit:
.9562	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9563					CompareFloat:
.9563	20 ca 94	jsr $94ca			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9566	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9569	29 f8		and #$f8			and 	#$F8
.956b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.956e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9571	f0 09		beq $957c			beq 	_FCExit 					; zero, so approximately identical
.9573	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9575	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9578	10 02		bpl $957c			bpl 	_FCExit
.957a					_FCNegative:
.957a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.957c					_FCExit:
.957c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.957d					FDivideCommand:
.957d	fa		plx				plx	 								; restore stack position
.957e	20 63 96	jsr $9663			jsr 	FloatPrepare 				; prepare for floats
.9581					FloatDivide:
.9581	48		pha				pha
.9582	e8		inx				inx
.9583	20 74 96	jsr $9674			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9586	ca		dex				dex
.9587	c9 00		cmp #$00			cmp 	#0
.9589	f0 20		beq $95ab			beq 	_FDZero
.958b	20 74 96	jsr $9674			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.958e	f0 19		beq $95a9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9590	20 be 93	jsr $93be			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9593	20 4b 93	jsr $934b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9596	20 74 96	jsr $9674			jsr		NSNormalise 				; renormalise
.9599	20 59 94	jsr $9459			jsr 	CalculateSign 				; calculate result sign
.959c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.959f	38		sec				sec
.95a0	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.95a3	38		sec				sec
.95a4	e9 1e		sbc #$1e			sbc 	#30
.95a6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95a9					_FDExit:
.95a9	68		pla				pla
.95aa	60		rts				rts
.95ab					_FDZero:
.95ab	a9 03		lda #$03		lda	#3
.95ad	4c da 82	jmp $82da		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.95b0					FloatFractionalPart:
.95b0	5a		phy				phy
.95b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.95b4	29 7f		and #$7f			and 	#$7F
.95b6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95b9	20 74 96	jsr $9674			jsr 	NSNormalise
.95bc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.95bf	38		sec				sec
.95c0	e9 e0		sbc #$e0			sbc 	#$E0
.95c2	90 31		bcc $95f5			bcc 	_FFPExit 					; already fractional
.95c4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.95c6	b0 2a		bcs $95f2			bcs 	_FFPZero
.95c8	a8		tay				tay 								; put count to do in Y
.95c9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.95cc	20 f7 95	jsr $95f7			jsr 	_FFPPartial
.95cf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95d2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.95d5	20 f7 95	jsr $95f7			jsr 	_FFPPartial
.95d8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95db	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95de	20 f7 95	jsr $95f7			jsr 	_FFPPartial
.95e1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95e4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95e7	20 f7 95	jsr $95f7			jsr 	_FFPPartial
.95ea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95ed	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; zeroed check.
.95f0	d0 03		bne $95f5			bne 	_FFPExit
.95f2					_FFPZero:
.95f2	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.95f5					_FFPExit:
.95f5	7a		ply				ply
.95f6	60		rts				rts
.95f7					_FFPPartial:
.95f7	c0 00		cpy #$00			cpy 	#0 							; no more to do
.95f9	f0 17		beq $9612			beq 	_FFFPPExit
.95fb	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.95fd	b0 0c		bcs $960b			bcs 	_FFFPPWholeByte
.95ff	5a		phy				phy
.9600					_FFFPPLeft:
.9600	0a		asl a				asl 	a
.9601	88		dey				dey
.9602	d0 fc		bne $9600			bne 	_FFFPPLeft
.9604	7a		ply				ply
.9605					_FFFPPRight:
.9605	4a		lsr a				lsr 	a
.9606	88		dey				dey
.9607	d0 fc		bne $9605			bne 	_FFFPPRight
.9609	80 07		bra $9612			bra 	_FFFPPExit
.960b					_FFFPPWholeByte:
.960b	98		tya				tya 								; subtract 8 from count
.960c	38		sec				sec
.960d	e9 08		sbc #$08			sbc 	#8
.960f	a8		tay				tay
.9610	a9 00		lda #$00			lda 	#0 							; and clear all
.9612					_FFFPPExit:
.9612	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9613					FloatIntegerPart:
.9613	48		pha				pha
.9614	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9617	f0 1f		beq $9638			beq 	_FIPExit 					; if so do nothing
.9619	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; is it zero ?
.961c	f0 17		beq $9635			beq 	_FIPZero 					; if so return zero.
.961e	20 74 96	jsr $9674			jsr 	NSNormalise 				; normalise
.9621	f0 12		beq $9635			beq 	_FIPZero 					; normalised to zero, exit zero
.9623					_FIPShift:
.9623	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9626	10 08		bpl $9630			bpl 	_FIPCheckZero
.9628	20 a4 8d	jsr $8da4			jsr 	NSMShiftRight 				; shift mantissa right
.962b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.962e	80 f3		bra $9623			bra 	_FIPShift
.9630					_FIPCheckZero:
.9630	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; avoid -0 problem
.9633	d0 03		bne $9638			bne 	_FIPExit 					; set to zero if mantissa zero.
.9635					_FIPZero:
.9635	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.9638					_FIPExit:
.9638	68		pla				pla
.9639	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.963a					FloatingPointMultiply:
.963a	20 63 96	jsr $9663			jsr 	FloatPrepare 				; prepare for floats
.963d					FloatMultiply:
.963d	48		pha				pha
.963e	20 74 96	jsr $9674			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9641	f0 1b		beq $965e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9643	e8		inx				inx
.9644	20 74 96	jsr $9674			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9647	ca		dex				dex
.9648	c9 00		cmp #$00			cmp 	#0
.964a	f0 0f		beq $965b			beq 	_FDSetZero
.964c	20 14 94	jsr $9414			jsr 	MultiplyShort 				; calculate the result.
.964f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9652	18		clc				clc
.9653	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9656	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9659	80 03		bra $965e			bra 	_FDExit
.965b					_FDSetZero:
.965b	20 81 8d	jsr $8d81			jsr 	NSMSetZero 					; return 0
.965e					_FDExit:
.965e	20 74 96	jsr $9674			jsr 	NSNormalise 				; normalise the result
.9661	68		pla				pla
.9662	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9663					FloatPrepare:
.9663	20 ec 87	jsr $87ec			jsr 	DereferenceTopTwo 			; dereference the top two values
.9666	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9669	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.966c	29 10		and #$10			and 	#NSBIsString
.966e	d0 01		bne $9671			bne 	_FDType
.9670	60		rts				rts
.9671					_FDType:
.9671	4c ce 97	jmp $97ce			jmp 	TypeError
.9674					NSNormalise:
.9674	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9677	29 80		and #$80			and 	#$80
.9679	09 08		ora #$08			ora 	#NSTFloat
.967b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.967e	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; if zero exit
.9681	d0 09		bne $968c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9683	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9686	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9689	a9 00		lda #$00			lda 	#0 							; set Z flag
.968b	60		rts				rts
.968c					_NSNormaliseOptimise:
.968c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.968f	d0 22		bne $96b3			bne 	_NSNormaliseLoop
.9691	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9694	30 1d		bmi $96b3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9696	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9699	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.969c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.969f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96a2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96a5	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.96a8	bd 28 06	lda $0628,x			lda 	NSExponent,x
.96ab	38		sec				sec
.96ac	e9 08		sbc #$08			sbc 	#8
.96ae	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96b1	80 d9		bra $968c			bra 	_NSNormaliseOptimise
.96b3					_NSNormaliseLoop:
.96b3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.96b6	70 08		bvs $96c0			bvs 	_NSNExit 					; exit if so with Z flag clear
.96b8	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; shift mantissa left
.96bb	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.96be	80 f3		bra $96b3			bra 	_NSNormaliseLoop
.96c0					_NSNExit:
.96c0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.96c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8719					AssignNumber:
.8719	5a		phy				phy
.871a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.871d	85 36		sta $36				sta 	zTemp0
.871f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8722	85 37		sta $37				sta 	zTemp0+1
.8724	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8727	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8729	9d 00 06	sta $0600,x			sta 	NSStatus,x
.872c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.872e	c9 08		cmp #$08			cmp 	#NSTFloat
.8730	f0 2a		beq $875c			beq 	_ANFloat
.8732	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8735	f0 05		beq $873c			beq		_ANNotFloat
.8737	e8		inx				inx
.8738	20 13 96	jsr $9613			jsr 	FloatIntegerPart 			; make it an integer
.873b	ca		dex				dex
.873c					_ANNotFloat:
.873c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.873f	29 03		and #$03			and 	#3
.8741	d0 05		bne $8748			bne 	_ANByteWord
.8743	20 68 87	jsr $8768			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8746	80 1e		bra $8766			bra 	_ANExit
.8748					_ANByteWord:
.8748	48		pha				pha 								; save count
.8749	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.874c	92 36		sta ($36)			sta 	(zTemp0)
.874e	68		pla				pla
.874f	c9 01		cmp #$01			cmp	 	#1
.8751	f0 13		beq $8766			beq 	_ANExit
.8753	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8756	a0 01		ldy #$01			ldy 	#1
.8758	91 36		sta ($36),y			sta 	(zTemp0),y
.875a	80 0a		bra $8766			bra 	_ANExit
.875c					_ANFloat:
.875c	20 68 87	jsr $8768			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.875f	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8762	a0 04		ldy #$04			ldy 	#4
.8764	91 36		sta ($36),y			sta 	(zTemp0),y
.8766					_ANExit:
.8766	7a		ply				ply
.8767	60		rts				rts
.8768					_ANCopy4PackSign:
.8768	a0 03		ldy #$03			ldy 	#3
.876a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.876d	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.876f	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8772	91 36		sta ($36),y			sta 	(zTemp0),y
.8774	88		dey				dey
.8775	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8778	91 36		sta ($36),y			sta 	(zTemp0),y
.877a	88		dey				dey
.877b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.877e	91 36		sta ($36),y			sta 	(zTemp0),y
.8780	88		dey				dey
.8781	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8784	91 36		sta ($36),y			sta 	(zTemp0),y
.8786	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8787					AssignString:
.8787	5a		phy				phy
.8788	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.878b	85 38		sta $38				sta 	zTemp1
.878d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8790	85 39		sta $39				sta 	zTemp1+1
.8792	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8795	85 36		sta $36				sta 	zTemp0
.8797	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.879a	85 37		sta $37				sta 	zTemp0+1
.879c	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.879e	b1 36		lda ($36),y			lda 	(zTemp0),y
.87a0	f0 23		beq $87c5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.87a2	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.87a3	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.87a5	e9 02		sbc #$02			sbc 	#2
.87a7	85 3c		sta $3c				sta 	zsTemp
.87a9	a0 01		ldy #$01			ldy 	#1
.87ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.87ad	e9 00		sbc #$00			sbc 	#0
.87af	85 3d		sta $3d				sta 	zsTemp+1
.87b1	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.87b3					_ASGetLength:
.87b3	c8		iny				iny
.87b4	b1 38		lda ($38),y			lda 	(zTemp1),y
.87b6	d0 fb		bne $87b3			bne 	_ASGetLength
.87b8	98		tya				tya 								; is this length <= current length
.87b9	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.87bb	90 20		bcc $87dd			bcc 	_ASCopyString
.87bd	f0 1e		beq $87dd			beq 	_ASCopyString
.87bf	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.87c1	a0 01		ldy #$01			ldy 	#1
.87c3	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87c5					_ASNewStringRequired:
.87c5	e8		inx				inx 								; concrete the new string.
.87c6	20 ca 98	jsr $98ca			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.87c9	ca		dex				dex
.87ca	18		clc				clc
.87cb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.87ce	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.87d0	92 36		sta ($36)			sta 	(zTemp0)
.87d2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.87d5	69 00		adc #$00			adc 	#0
.87d7	a0 01		ldy #$01			ldy 	#1
.87d9	91 36		sta ($36),y			sta 	(zTemp0),y
.87db	80 0d		bra $87ea			bra 	_ASExit
.87dd					_ASCopyString:
.87dd	a0 00		ldy #$00			ldy 	#0
.87df					_ASCopyLoop:
.87df	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e1	c8		iny				iny
.87e2	c8		iny				iny
.87e3	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87e5	88		dey				dey
.87e6	c9 00		cmp #$00			cmp 	#0
.87e8	d0 f5		bne $87df			bne 	_ASCopyLoop
.87ea					_ASExit:
.87ea	7a		ply				ply
.87eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.87ec					DereferenceTopTwo:
.87ec	e8		inx				inx
.87ed	20 f1 87	jsr $87f1			jsr 	Dereference 				; deref x+1
.87f0	ca		dex				dex  								; falls through to deref x
.87f1					Dereference:
.87f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.87f4	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.87f6	f0 57		beq $884f			beq 	_DRFExit 					; not a reference
.87f8	5a		phy				phy
.87f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.87fc	85 36		sta $36				sta 	zTemp0
.87fe	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8801	85 37		sta $37				sta 	zTemp0+1
.8803	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8806	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8808	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.880e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8810	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8812	f0 0f		beq $8823			beq 	_DRFDereferenceTwo
.8814	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8816	f0 39		beq $8851			beq 	_DRFFull
.8818	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.881b	29 03		and #$03			and 	#3
.881d	f0 32		beq $8851			beq 	_DRFFull 					; the whole word
.881f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8821	f0 07		beq $882a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8823					_DRFDereferenceTwo:
.8823	a0 01		ldy #$01			ldy 	#1
.8825	b1 36		lda ($36),y			lda 	(zTemp0),y
.8827	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.882a					_DRFClear23:
.882a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.882d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8830	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8833	29 18		and #$18			and 	#NSBTypeMask
.8835	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8838	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.883a	d0 12		bne $884e			bne 	_DRFNotString
.883c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.883f	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8842	d0 0a		bne $884e			bne 	_DRFNotString
.8844	a9 50		lda #$50			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8846	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8849	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.884b	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.884e					_DRFNotString
.884e	7a		ply				ply 								; restore Y and exit
.884f					_DRFExit:
.884f	60		rts				rts
.8850					_DRFNullString:
>8850	00						.byte 	0
.8851					_DRFFull:
.8851	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8853	b1 36		lda ($36),y			lda 	(zTemp0),y
.8855	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8858	c8		iny				iny
.8859	b1 36		lda ($36),y			lda 	(zTemp0),y
.885b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.885e	c8		iny				iny
.885f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8861	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8864	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8867	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.886a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.886c	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.886f	f0 06		beq $8877			beq 	_DRFNoExponent
.8871	c8		iny				iny 								; if not, read the exponent as well.
.8872	b1 36		lda ($36),y			lda 	(zTemp0),y
.8874	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8877					_DRFNoExponent:
.8877	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.887a	10 0d		bpl $8889			bpl 	_DRFExit2 					; if not, then exit.
.887c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.887e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8881	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8884	09 80		ora #$80			ora 	#NSBIsNegative
.8886	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8889					_DRFExit2:
.8889	7a		ply				ply
.888a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.888b					EncodeNumberStart:
.888b	38		sec				sec
.888c	80 01		bra $888f			bra 	EncodeNumberContinue+1
.888e					EncodeNumberContinue:
.888e	18		clc				clc
.888f					EncodeNumber:
.888f	08		php				php 								; save reset.
.8890	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8892	f0 12		beq $88a6			beq 	_ENIsOkay
.8894	c9 30		cmp #$30			cmp 	#"0"
.8896	90 04		bcc $889c			bcc 	_ENBadNumber
.8898	c9 3a		cmp #$3a			cmp 	#"9"+1
.889a	90 0a		bcc $88a6			bcc 	_ENIsOkay
.889c					_ENBadNumber:
.889c	28		plp				plp 								; throw saved reset
.889d	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.88a0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.88a2	f0 7e		beq $8922			beq 	_ENConstructFinal
.88a4					_ENFail:
.88a4	18		clc				clc 								; not allowed
.88a5	60		rts				rts
.88a6					_ENIsOkay:
.88a6	28		plp				plp 								; are we restarting
.88a7	90 15		bcc $88be			bcc 	_ENNoRestart
.88a9					_ENStartEncode:
.88a9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.88ab	f0 0c		beq $88b9			beq 	_ENFirstDP
.88ad	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.88af	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.88b2	a9 01		lda #$01			lda 	#ESTA_Low
.88b4					_ENExitChange:
.88b4	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.88b7	38		sec				sec
.88b8	60		rts				rts
.88b9					_ENFirstDP:
.88b9	20 81 8d	jsr $8d81			jsr 	NSMSetZero 					; clear integer part
.88bc	80 3f		bra $88fd			bra 	_ESTASwitchFloat			; go straight to float and exi
.88be					_ENNoRestart:
.88be	48		pha				pha 								; save on stack.
.88bf	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.88c2	c9 01		cmp #$01			cmp 	#ESTA_Low
.88c4	f0 09		beq $88cf			beq  	_ESTALowState
.88c6	c9 02		cmp #$02			cmp 	#ESTA_High
.88c8	f0 29		beq $88f3			beq 	_ESTAHighState
.88ca	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.88cc	f0 3b		beq $8909			beq 	_ESTADecimalState
>88ce	db						.byte 	$DB 						; causes a break in the emulator
.88cf					_ESTALowState:
.88cf	68		pla				pla 								; get value back
.88d0	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.88d2	f0 29		beq $88fd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.88d4	29 0f		and #$0f			and 	#15 						; make digit
.88d6	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.88d9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.88dc	0a		asl a				asl 	a
.88dd	0a		asl a				asl 	a
.88de	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88e1	0a		asl a				asl 	a
.88e2	6d 06 07	adc $0706			adc 	DigitTemp
.88e5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88e8	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.88ea	90 05		bcc $88f1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.88ec	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.88ee	8d 05 07	sta $0705			sta 	EncodeState
.88f1					_ESTANoSwitch:
.88f1	38		sec				sec
.88f2	60		rts				rts
.88f3					_ESTAHighState:
.88f3	68		pla				pla 								; get value back
.88f4	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.88f6	f0 05		beq $88fd			beq 	_ESTASwitchFloat
.88f8	20 5c 89	jsr $895c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.88fb	38		sec				sec
.88fc	60		rts				rts
.88fd					_ESTASwitchFloat:
.88fd	9c 07 07	stz $0707			stz 	DecimalCount
.8900	e8		inx				inx 								; zero the decimal additive.
.8901	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.8904	ca		dex				dex
.8905	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8907	80 ab		bra $88b4			bra 	_ENExitChange
.8909					_ESTADecimalState:
.8909	68		pla				pla 								; digit.
.890a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.890c	f0 96		beq $88a4			beq 	_ENFail
.890e	e8		inx				inx 								; put digit into fractional part of X+1
.890f	20 5c 89	jsr $895c			jsr 	ESTAShiftDigitIntoMantissa
.8912	ca		dex				dex
.8913	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8916	ad 07 07	lda $0707			lda 	DecimalCount
.8919	c9 0b		cmp #$0b			cmp 	#11
.891b	f0 02		beq $891f			beq 	_ESTADSFail
.891d	38		sec				sec
.891e	60		rts				rts
.891f					_ESTADSFail:
.891f	4c c9 97	jmp $97c9			jmp 	RangeError
.8922					_ENConstructFinal:
.8922	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8925	f0 33		beq $895a			beq 	_ENCFExit 					; no decimals
.8927	5a		phy				phy
.8928	0a		asl a				asl 	a 							; x 4 and CLC
.8929	0a		asl a				asl 	a
.892a	6d 07 07	adc $0707			adc 	DecimalCount
.892d	a8		tay				tay
.892e	b9 88 97	lda $9788,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8931	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8934	b9 89 97	lda $9789,y			lda 	DecimalScalarTable-5+1,y
.8937	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.893a	b9 8a 97	lda $978a,y			lda 	DecimalScalarTable-5+2,y
.893d	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8940	b9 8b 97	lda $978b,y			lda 	DecimalScalarTable-5+3,y
.8943	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8946	b9 8c 97	lda $978c,y			lda 	DecimalScalarTable-5+4,y
.8949	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.894c	a9 08		lda #$08			lda 	#NSTFloat
.894e	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8951	7a		ply				ply
.8952	e8		inx				inx 								; multiply decimal const by decimal scalar
.8953	20 3d 96	jsr $963d			jsr 	FloatMultiply
.8956	ca		dex				dex
.8957	20 d2 94	jsr $94d2			jsr 	FloatAdd 					; add to integer part.
.895a					_ENCFExit:
.895a	18		clc				clc 								; reject the digit.
.895b	60		rts				rts
.895c					ESTAShiftDigitIntoMantissa:
.895c	29 0f		and #$0f			and 	#15 						; save digit
.895e	48		pha				pha
.895f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8962	48		pha				pha
.8963	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8966	48		pha				pha
.8967	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.896a	48		pha				pha
.896b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.896e	48		pha				pha
.896f	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 2
.8972	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 4
.8975	18		clc				clc 								; pop mantissa and add
.8976	68		pla				pla
.8977	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.897a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.897d	68		pla				pla
.897e	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8981	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8984	68		pla				pla
.8985	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8988	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.898b	68		pla				pla
.898c	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.898f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8992	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 10
.8995	68		pla				pla 								; add digit
.8996	18		clc				clc
.8997	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.899a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.899d	90 0d		bcc $89ac			bcc 	_ESTASDExit
.899f	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.89a2	d0 08		bne $89ac			bne 	_ESTASDExit
.89a4	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.89a7	d0 03		bne $89ac			bne 	_ESTASDExit
.89a9	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.89ac					_ESTASDExit:
.89ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.89ad					EvaluateTerm:
.89ad	b1 30		lda ($30),y			lda 	(codePtr),y
.89af	30 18		bmi $89c9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.89b1	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.89b3	b0 6f		bcs $8a24			bcs 	_ETVariable
.89b5	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.89b7	90 6e		bcc $8a27			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.89b9	c9 3a		cmp #$3a			cmp 	#'9'+1
.89bb	b0 6a		bcs $8a27			bcs 	_ETPuncUnary
.89bd	20 8b 88	jsr $888b			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.89c0					_ETNumber:
.89c0	c8		iny				iny 								; keep encoding until we have the numbers
.89c1	b1 30		lda ($30),y			lda 	(codePtr),y
.89c3	20 8e 88	jsr $888e			jsr 	EncodeNumberContinue
.89c6	b0 f8		bcs $89c0			bcs 	_ETNumber 					; go back if accepted.
.89c8	60		rts				rts
.89c9					_ETCheckUnary:
.89c9	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.89cb	f0 41		beq $8a0e			beq 	_ETString
.89cd	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.89cf	f0 12		beq $89e3			beq 	_ETHexConstant
.89d1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.89d3	90 0b		bcc $89e0			bcc 	_ETSyntaxError
.89d5	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.89d7	b0 07		bcs $89e0			bcs 	_ETSyntaxError
.89d9	da		phx				phx 								; push X on the stack
.89da	0a		asl a				asl 	a 							; put vector x 2 into X
.89db	aa		tax				tax
.89dc	c8		iny				iny 								; consume unary function token
.89dd	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.89e0					_ETSyntaxError:
.89e0	4c c4 97	jmp $97c4			jmp 	SyntaxError
.89e3					_ETHexConstant:
.89e3	c8		iny				iny 								; skip #
.89e4	c8		iny				iny 								; skip count
.89e5	20 81 8d	jsr $8d81			jsr 	NSMSetZero 					; clear result
.89e8					_ETHLoop:
.89e8	b1 30		lda ($30),y			lda 	(codePtr),y
.89ea	c8		iny				iny 								; and consume
.89eb	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.89ed	f0 1e		beq $8a0d			beq 	_ETHExit
.89ef	48		pha				pha 								; save on stack.
.89f0	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 2
.89f3	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 4
.89f6	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 8
.89f9	20 96 8d	jsr $8d96			jsr 	NSMShiftLeft 				; x 16
.89fc	68		pla				pla 								; ASCII
.89fd	c9 41		cmp #$41			cmp 	#'A'
.89ff	90 02		bcc $8a03			bcc 	_ETHNotChar
.8a01	e9 07		sbc #$07			sbc 	#7
.8a03					_ETHNotChar:
.8a03	29 0f		and #$0f			and 	#15 						; digit now
.8a05	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8a08	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0b	80 db		bra $89e8			bra 	_ETHLoop 					; go round.
.8a0d					_ETHExit:
.8a0d	60		rts				rts
.8a0e					_ETString:
.8a0e	c8		iny				iny 								; look at length
.8a0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a11	48		pha				pha
.8a12	c8		iny				iny 								; first character
.8a13	20 c4 92	jsr $92c4			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8a16	68		pla				pla 								; restore count and save
.8a17	85 36		sta $36				sta 	zTemp0
.8a19	98		tya				tya 								; add length to Y to skip it.
.8a1a	18		clc				clc
.8a1b	65 36		adc $36				adc 	zTemp0
.8a1d	a8		tay				tay
.8a1e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8a20	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a23	60		rts				rts
.8a24					_ETVariable:
.8a24	4c 7e 8a	jmp $8a7e			jmp 	VariableHandler
.8a27					_ETPuncUnary:
.8a27	c8		iny				iny 								; consume the unary character
.8a28	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8a2a	f0 2d		beq $8a59			beq 	_ETUnaryNegate
.8a2c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8a2e	f0 39		beq $8a69			beq 	_ETDereference
.8a30	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8a32	f0 43		beq $8a77			beq 	_ETParenthesis
.8a34	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8a36	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8a38	f0 06		beq $8a40			beq 	_ETIndirection
.8a3a	e6 36		inc $36				inc 	zTemp0
.8a3c	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8a3e	d0 a0		bne $89e0			bne 	_ETSyntaxError
.8a40					_ETIndirection:
.8a40	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8a42	1a		inc a				inc 	a
.8a43	48		pha				pha
.8a44	20 ad 89	jsr $89ad			jsr 	EvaluateTerm				; evaluate the term
.8a47	20 f1 87	jsr $87f1			jsr 	Dereference 				; dereference it.
.8a4a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8a4d	d0 07		bne $8a56			bne 	_ETTypeMismatch
.8a4f	68		pla				pla 								; indirection 1-2
.8a50	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8a52	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a55	60		rts				rts
.8a56					_ETTypeMismatch:
.8a56	4c ce 97	jmp $97ce			jmp 	TypeError
.8a59					_ETUnaryNegate:
.8a59	20 ad 89	jsr $89ad			jsr 	EvaluateTerm				; evaluate the term
.8a5c	20 f1 87	jsr $87f1			jsr 	Dereference 				; dereference it.
.8a5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8a62	29 10		and #$10			and 	#NSTString
.8a64	d0 f0		bne $8a56			bne 	_ETTypeMismatch
.8a66	4c 2d 8d	jmp $8d2d			jmp 	NSMNegate  					; just toggles the sign bit.
.8a69					_ETDereference:
.8a69	20 ad 89	jsr $89ad			jsr 	EvaluateTerm				; evaluate the term
.8a6c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8a6f	29 20		and #$20			and 	#NSBIsReference
.8a71	f0 e3		beq $8a56			beq 	_ETTypeMismatch
.8a73	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8a76	60		rts				rts
.8a77					_ETParenthesis:
.8a77	20 dc 86	jsr $86dc			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a7a	20 0b 93	jsr $930b			jsr 	CheckRightBracket 			; check for )
.8a7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a7e					VariableHandler:
.8a7e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a80	18		clc				clc
.8a81	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a83	85 37		sta $37				sta 	zTemp0+1
.8a85	c8		iny				iny
.8a86	b1 30		lda ($30),y			lda 	(codePtr),y
.8a88	85 36		sta $36				sta 	zTemp0
.8a8a	c8		iny				iny
.8a8b	18		clc				clc									; copy variable address+3 to mantissa
.8a8c	69 03		adc #$03			adc 	#3
.8a8e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a91	a5 37		lda $37				lda 	zTemp0+1
.8a93	69 00		adc #$00			adc 	#0
.8a95	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a98	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a9b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a9e	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8aa1	5a		phy				phy
.8aa2	a0 02		ldy #$02			ldy 	#2 							; read type
.8aa4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa6	7a		ply				ply
.8aa7	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8aa9	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8aab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8aae	29 04		and #$04			and 	#NSBIsArray
.8ab0	d0 01		bne $8ab3			bne 	_VHArray
.8ab2	60		rts				rts
.8ab3					_VHArray:
>8ab3	db						.byte 	$DB 						; causes a break in the emulator
.8ab4	80 fd		bra $8ab3			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.96c3					AbsUnary:
.96c3	fa		plx				plx 								; restore stack pos
.96c4	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; get a float or int
.96c7	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.96ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.96cd	29 7f		and #$7f			and 	#$7F
.96cf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8ab6					AllocUnary:
.8ab6	fa		plx				plx 								; restore stack pos
.8ab7	20 0d 8d	jsr $8d0d			jsr 	Evaluate16BitInteger		; get bytes required.
.8aba	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.8abd	da		phx				phx 								; save X/Y
.8abe	5a		phy				phy
.8abf	8a		txa				txa 								; copy X into Y
.8ac0	a8		tay				tay
.8ac1	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8ac4	aa		tax				tax
.8ac5	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8ac8	20 d5 8a	jsr $8ad5			jsr 	AllocateXABytes 			; allocate memory
.8acb	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8ace	8a		txa				txa
.8acf	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8ad2	7a		ply				ply
.8ad3	fa		plx				plx
.8ad4	60		rts				rts
.8ad5					AllocateXABytes:
.8ad5	5a		phy				phy
.8ad6	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8ad9	5a		phy				phy
.8ada	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8add	5a		phy				phy
.8ade	18		clc				clc
.8adf	6d 0c 07	adc $070c			adc 	lowMemPtr
.8ae2	8d 0c 07	sta $070c			sta 	lowMemPtr
.8ae5	8a		txa				txa
.8ae6	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8ae9	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8aec	fa		plx				plx
.8aed	68		pla				pla
.8aee	7a		ply				ply
.8aef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.96d3					AscUnary:
.96d3	fa		plx				plx 								; restore stack pos
.96d4	20 e0 8c	jsr $8ce0			jsr 	EvaluateString 				; get a string
.96d7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.96d9	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.96dc	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.96df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.96e0					FracUnary:
.96e0	fa		plx				plx 								; restore stack pos
.96e1	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; get a float or int
.96e4	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.96e7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96ea	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.96ec	f0 04		beq $96f2			beq 	_IUZero
.96ee	20 b0 95	jsr $95b0			jsr 	FloatFractionalPart
.96f1	60		rts				rts
.96f2					_IUZero:
.96f2	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.96f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.96f6					IntUnary:
.96f6	fa		plx				plx 								; restore stack pos
.96f7	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; get a float or int
.96fa	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.96fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9700	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9702	f0 03		beq $9707			beq 	_IUExit
.9704	20 13 96	jsr $9613			jsr 	FloatIntegerPart
.9707					_IUExit:
.9707	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9708					LenUnary:
.9708	fa		plx				plx 								; restore stack pos
.9709	20 e0 8c	jsr $8ce0			jsr 	EvaluateString 				; get a string
.970c	5a		phy				phy
.970d	a0 00		ldy #$00			ldy 	#0 							; find length
.970f					_LenFind:
.970f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9711	f0 06		beq $9719			beq 	_LenExit
.9713	c8		iny				iny
.9714	d0 f9		bne $970f			bne 	_LenFind
.9716	4c c9 97	jmp $97c9			jmp 	RangeError 					; string > 255
.9719					_LenExit:
.9719	98		tya				tya
.971a	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.971d	7a		ply				ply
.971e	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.9721	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8af0					Unary_Not:
.8af0	fa		plx				plx
.8af1	20 f8 8c	jsr $8cf8			jsr 	EvaluateInteger 			; get integer
.8af4	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.8af7	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; zero mantissa ?
.8afa	f0 04		beq $8b00			beq 	_NotZero
.8afc	20 81 8d	jsr $8d81			jsr 	NSMSetZero
.8aff	60		rts				rts
.8b00					_NotZero:
.8b00	4c 40 83	jmp $8340			jmp 	ReturnTrue
.8b03					_UNBad:
.8b03	4c d3 97	jmp $97d3			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8b06					Unary_Rnd:
.8b06	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; number to use.
.8b09	20 0b 93	jsr $930b			jsr 	CheckRightBracket 			; closing bracket
.8b0c	20 35 8b	jsr $8b35			jsr 	Random32Bit 				; generate a number.
.8b0f	ad 08 07	lda $0708			lda 	RandomSeed+0
.8b12	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b15	ad 09 07	lda $0709			lda 	RandomSeed+1
.8b18	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b1b	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8b1e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b21	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8b24	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8b26	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b29	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8b2b	8d 28 06	sta $0628			sta 	NSExponent
.8b2e	a9 08		lda #$08			lda 	#NSTFloat
.8b30	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8b33	db						.byte 	$DB 						; causes a break in the emulator
.8b34	60		rts				rts
.8b35					Random32Bit:
.8b35	5a		phy				phy
.8b36	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8b38	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8b3b	d0 03		bne $8b40			bne 	_Random1
.8b3d	a8		tay				tay 								; if so do it 256 times
.8b3e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8b40					_Random1:
.8b40	0a		asl a				asl 	a 							; LSFR RNG
.8b41	2e 09 07	rol $0709			rol 	RandomSeed+1
.8b44	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8b47	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8b4a	90 02		bcc $8b4e			bcc 	_Random2
.8b4c	49 c5		eor #$c5			eor 	#$C5
.8b4e					_Random2:
.8b4e	88		dey				dey
.8b4f	d0 ef		bne $8b40			bne 	_Random1
.8b51	7a		ply				ply
.8b52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9722					SgnUnary:
.9722	fa		plx				plx 								; restore stack pos
.9723	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber 				; get a float or int
.9726	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.9729	20 b1 8d	jsr $8db1			jsr 	NSMIsZero 					; if zero
.972c	f0 10		beq $973e			beq 	_SGZero  					; return Int Zero
.972e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9731	48		pha				pha
.9732	a9 01		lda #$01			lda 	#1 							; set to 1
.9734	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.9737	68		pla				pla
.9738	29 80		and #$80			and		#$80 						; copy the sign byte out
.973a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.973d	60		rts				rts
.973e	20 81 8d	jsr $8d81	_SGZero:jsr 	NSMSetZero
.9741	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9742					ValUnary:
.9742	fa		plx				plx 								; restore stack pos
.9743	20 58 97	jsr $9758			jsr 	ValMainCode 				; do the main val() code
.9746	b0 01		bcs $9749			bcs 	_VUError 					; couldn't convert
.9748	60		rts				rts
.9749					_VUError:
.9749	4c ce 97	jmp $97ce			jmp 	TypeError
.974c					IsValUnary:
.974c	fa		plx				plx 								; restore stack pos
.974d	20 58 97	jsr $9758			jsr 	ValMainCode 				; do the main val() code
.9750	b0 03		bcs $9755			bcs 	_VUBad
.9752	4c 40 83	jmp $8340			jmp 	ReturnTrue
.9755					_VUBad:
.9755	4c 4c 83	jmp $834c			jmp 	ReturnFalse
.9758					ValMainCode:
.9758	20 e0 8c	jsr $8ce0			jsr 	EvaluateString 				; get a string
.975b	20 0b 93	jsr $930b			jsr 	CheckRightBracket 			; check right bracket present
.975e	5a		phy				phy
.975f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9761	f0 17		beq $977a			beq 	_VMCFail2
.9763	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9765	48		pha				pha 								; save first character
.9766	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9768	d0 01		bne $976b			bne 	_VMCStart
.976a	c8		iny				iny 								; skip over -
.976b					_VMCStart:
.976b	38		sec				sec 								; initialise first time round.
.976c					_VMCNext:
.976c	c8		iny				iny 								; pre-increment
.976d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.976f	f0 0c		beq $977d			beq 	_VMCSuccess 				; successful.
.9771	20 8f 88	jsr $888f			jsr 	EncodeNumber 				; send it to the number-builder
.9774	90 03		bcc $9779			bcc 	_VMCFail 					; if failed, give up.
.9776	18		clc				clc 								; next time round, countinue
.9777	80 f3		bra $976c			bra 	_VMCNext
.9779					_VMCFail:
.9779	68		pla				pla
.977a					_VMCFail2:
.977a	7a		ply				ply
.977b	38		sec				sec
.977c	60		rts				rts
.977d					_VMCSuccess:
.977d	a9 00		lda #$00			lda 	#0 							; construct final
.977f	20 8f 88	jsr $888f			jsr 	EncodeNumber
.9782	68		pla				pla
.9783	c9 2d		cmp #$2d			cmp 	#"-"
.9785	d0 03		bne $978a			bne 	_VMCNotNegative
.9787	20 2d 8d	jsr $8d2d			jsr		NSMNegate
.978a					_VMCNotNegative:
.978a	7a		ply				ply
.978b	18		clc				clc
.978c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8b53					ChrUnary:
.8b53	fa		plx				plx 								; restore stack pos
.8b54	20 19 8d	jsr $8d19			jsr 	Evaluate8BitInteger			; get value
.8b57	48		pha				pha
.8b58	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.8b5b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8b5d	20 45 99	jsr $9945			jsr 	StringTempAllocate
.8b60	68		pla				pla 								; write number to it
.8b61	20 83 99	jsr $9983			jsr 	StringTempWrite
.8b64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8b65					SpcUnary:
.8b65	fa		plx				plx 								; restore stack pos
.8b66	20 19 8d	jsr $8d19			jsr 	Evaluate8BitInteger			; get value
.8b69	5a		phy				phy
.8b6a	48		pha				pha 								; save count
.8b6b	20 45 99	jsr $9945			jsr 	StringTempAllocate
.8b6e	7a		ply				ply 								; to do count in Y
.8b6f					_SpcLoop:
.8b6f	c0 00		cpy #$00			cpy 	#0
.8b71	f0 08		beq $8b7b			beq 	_SpcExit
.8b73	a9 20		lda #$20			lda 	#32
.8b75	20 83 99	jsr $9983			jsr 	StringTempWrite
.8b78	88		dey				dey
.8b79	80 f4		bra $8b6f			bra 	_SPCLoop
.8b7b					_SpcExit:
.8b7b	7a		ply				ply
.8b7c	20 0b 93	jsr $930b			jsr 	CheckRightBracket
.8b7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b80					Unary_Str:
.8b80	fa		plx				plx
.8b81	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber  			; get number
.8b84	20 0b 93	jsr $930b			jsr 	CheckRightBracket 			; closing bracket
.8b87	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b89	20 a2 8b	jsr $8ba2			jsr 	ConvertNumberToString 		; do the conversion.
.8b8c	a9 21		lda #$21			lda		#33 						; create buffer
.8b8e	20 45 99	jsr $9945			jsr 	StringTempAllocate 			; allocate memory
.8b91	da		phx				phx
.8b92	a2 00		ldx #$00			ldx 	#0
.8b94					_USCopy:
.8b94	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b97	20 83 99	jsr $9983			jsr 	StringTempWrite
.8b9a	e8		inx				inx
.8b9b	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b9e	d0 f4		bne $8b94			bne 	_USCopy
.8ba0	fa		plx				plx
.8ba1	60		rts				rts
.8ba2					ConvertNumberToString:
.8ba2	5a		phy				phy 								; save code position
.8ba3	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8ba6	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8ba9	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8bac	10 0a		bpl $8bb8			bpl 	_CNTSNotNegative
.8bae	29 7f		and #$7f			and 	#$7F 						; make +ve
.8bb0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bb3	a9 2d		lda #$2d			lda 	#"-"
.8bb5	20 1e 8c	jsr $8c1e			jsr 	WriteDecimalBuffer
.8bb8					_CNTSNotNegative:
.8bb8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8bbb	f0 15		beq $8bd2			beq 	_CNTSNotFloat
.8bbd	e8		inx				inx 								; round up
.8bbe	a9 01		lda #$01			lda 	#1
.8bc0	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.8bc3	ca		dex				dex
.8bc4	bd 28 06	lda $0628,x			lda		NSExponent,x
.8bc7	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8bca	a9 08		lda #$08			lda 	#NSTFloat
.8bcc	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8bcf	20 d2 94	jsr $94d2			jsr 	FloatAdd
.8bd2					_CNTSNotFloat:
.8bd2	20 00 8c	jsr $8c00			jsr 	MakePlusTwoString
.8bd5	20 b0 95	jsr $95b0			jsr 	FloatFractionalPart 		; get the fractional part
.8bd8	20 74 96	jsr $9674			jsr 	NSNormalise					; normalise , exit if zero
.8bdb	f0 21		beq $8bfe			beq 	_CNTSExit
.8bdd	a9 2e		lda #$2e			lda 	#"."
.8bdf	20 1e 8c	jsr $8c1e			jsr 	WriteDecimalBuffer 			; write decimal place
.8be2					_CNTSDecimal:
.8be2	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8be5	30 17		bmi $8bfe			bmi 	_CNTSExit
.8be7	e8		inx				inx 								; x 10.0
.8be8	a9 0a		lda #$0a			lda 	#10
.8bea	20 83 8d	jsr $8d83			jsr 	NSMSetByte
.8bed	a9 08		lda #$08			lda 	#NSTFloat
.8bef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bf2	ca		dex				dex
.8bf3	20 3d 96	jsr $963d			jsr 	FloatMultiply
.8bf6	20 00 8c	jsr $8c00			jsr 	MakePlusTwoString
.8bf9	20 b0 95	jsr $95b0			jsr 	FloatFractionalPart 		; get the fractional part
.8bfc	80 e4		bra $8be2			bra 	_CNTSDecimal 				; keep going.
.8bfe					_CNTSExit:
.8bfe	7a		ply				ply
.8bff	60		rts				rts
.8c00					MakePlusTwoString:
.8c00	da		phx				phx
.8c01	20 58 8d	jsr $8d58			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8c04	e8		inx				inx 								; access it
.8c05	e8		inx				inx
.8c06	20 13 96	jsr $9613			jsr 	FloatIntegerPart 			; make it an integer
.8c09	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8c0b	20 7c 94	jsr $947c			jsr 	ConvertInt32
.8c0e	a2 00		ldx #$00			ldx	 	#0
.8c10					_MPTSCopy:
.8c10	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8c13	20 1e 8c	jsr $8c1e			jsr 	WriteDecimalBuffer
.8c16	e8		inx				inx
.8c17	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8c1a	d0 f4		bne $8c10			bne 	_MPTSCopy
.8c1c	fa		plx				plx
.8c1d	60		rts				rts
.8c1e					WriteDecimalBuffer:
.8c1e	da		phx				phx
.8c1f	ae 14 07	ldx $0714			ldx 	dbOffset
.8c22	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8c25	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8c28	ee 14 07	inc $0714			inc 	dbOffset
.8c2b	fa		plx				plx
.8c2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8c2d					Unary_Left:
.8c2d	fa		plx				plx
.8c2e	18		clc				clc 								; only one parameter
.8c2f	20 a4 8c	jsr $8ca4			jsr 	SubstringInitial 			; set up.
.8c32	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8c35	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c38	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8c3b	80 2c		bra $8c69			bra 	SubstringMain
.8c3d					Unary_Right:
.8c3d	fa		plx				plx
.8c3e	18		clc				clc 								; only one parameter
.8c3f	20 a4 8c	jsr $8ca4			jsr 	SubstringInitial 			; set up.
.8c42	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8c45	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c48	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8c4b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8c4e	b0 02		bcs $8c52			bcs 	_URNotUnderflow
.8c50	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8c52					_URNotUnderFlow:
.8c52	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8c55	80 12		bra $8c69			bra 	SubStringMain
.8c57					Unary_Mid:
.8c57	fa		plx				plx
.8c58	38		sec				sec 								; two parameters
.8c59	20 a4 8c	jsr $8ca4			jsr 	SubstringInitial 			; set up.
.8c5c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8c5f	f0 05		beq $8c66			beq 	_UMError
.8c61	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8c64	80 03		bra $8c69			bra 	SubStringMain
.8c66					_UMError:
.8c66	4c d3 97	jmp $97d3			jmp 	ArgumentError
.8c69					SubStringMain:
.8c69	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8c6c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8c6f	b0 2d		bcs $8c9e			bcs 	_SSMNull 					; if so, return an empty string.
.8c71	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8c74	f0 28		beq $8c9e			beq 	_SSMNull 					; return empty string.
.8c76	18		clc				clc 								; add the offset +1 to the address and
.8c77	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c7a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c7d	85 36		sta $36				sta 	zTemp0
.8c7f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c82	69 00		adc #$00			adc 	#0
.8c84	85 37		sta $37				sta 	zTemp0+1
.8c86					_SSMNoCarry:
.8c86	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c89	20 45 99	jsr $9945			jsr 	StringTempAllocate 			; allocate that many characters
.8c8c	5a		phy				phy 								; save Y
.8c8d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c8f					_SSMCopy:
.8c8f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c91	f0 09		beq $8c9c			beq 	_SSMEString 				; no more to copy
.8c93	20 83 99	jsr $9983			jsr 	StringTempWrite 			; and write it out.
.8c96	c8		iny				iny
.8c97	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c9a	d0 f3		bne $8c8f			bne 	_SSMCopy
.8c9c					_SSMEString:
.8c9c	7a		ply				ply
.8c9d					_SSMExit:
.8c9d	60		rts				rts
.8c9e					_SSMNull:
.8c9e	a9 00		lda #$00			lda 	#0
.8ca0	20 45 99	jsr $9945			jsr 	StringTempAllocate
.8ca3	60		rts				rts
.8ca4					SubstringInitial:
.8ca4	da		phx				phx 								; save initial stack position
.8ca5	08		php				php 								; save carry on stack indicating 2 parameters
.8ca6	20 e0 8c	jsr $8ce0			jsr 	EvaluateString 				; get a string
.8ca9	5a		phy				phy 								; calculate length to exponent.
.8caa	a0 ff		ldy #$ff			ldy 	#$FF
.8cac					_SIFindLength:
.8cac	c8		iny				iny
.8cad	b1 36		lda ($36),y			lda 	(zTemp0),y
.8caf	d0 fb		bne $8cac			bne 	_SIFindLength
.8cb1	98		tya				tya
.8cb2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8cb5	7a		ply				ply
.8cb6	e8		inx				inx
.8cb7	20 13 93	jsr $9313			jsr 	CheckComma 					; comma next
.8cba	20 19 8d	jsr $8d19			jsr 	Evaluate8BitInteger 		; get next parameter
.8cbd	28		plp				plp 								; is it the last parameter ?
.8cbe	90 07		bcc $8cc7			bcc 	_SSIExit 					; if so, exit.
.8cc0	e8		inx				inx
.8cc1	20 13 93	jsr $9313			jsr 	CheckComma 					; comma next
.8cc4	20 19 8d	jsr $8d19			jsr 	Evaluate8BitInteger 		; get last parameter
.8cc7					_SSIExit:
.8cc7	fa		plx				plx
.8cc8	20 0b 93	jsr $930b			jsr 	CheckRightBracket 			; check closing bracket
.8ccb	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8ccc					EvaluateValue:
.8ccc	48		pha				pha
.8ccd	20 dc 86	jsr $86dc			jsr		EvaluateExpression 			; expression
.8cd0	20 f1 87	jsr $87f1			jsr 	Dereference					; derefernce it
.8cd3	68		pla				pla
.8cd4	60		rts				rts
.8cd5					EvaluateNumber:
.8cd5	20 cc 8c	jsr $8ccc			jsr 	EvaluateValue 				; get a value
.8cd8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8cdb	29 10		and #$10			and 	#NSBIsString
.8cdd	d0 16		bne $8cf5			bne 	HelperTypeError
.8cdf	60		rts				rts
.8ce0					EvaluateString:
.8ce0	20 cc 8c	jsr $8ccc			jsr 	EvaluateValue 				; get a value
.8ce3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ce6	29 10		and #$10			and 	#NSBIsString
.8ce8	f0 0b		beq $8cf5			beq 	HelperTypeError
.8cea					CopyAddressToTemp0:
.8cea	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8ced	85 36		sta $36				sta 	zTemp0
.8cef	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cf2	85 37		sta $37				sta 	zTemp0+1
.8cf4	60		rts				rts
.8cf5					HelperTypeError:
.8cf5	4c ce 97	jmp $97ce			jmp 	TypeError
.8cf8					EvaluateInteger:
.8cf8	20 d5 8c	jsr $8cd5			jsr 	EvaluateNumber
.8cfb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8cfe	d0 0a		bne $8d0a			bne 	HelperValueError 			; if not, it's a float.
.8d00	60		rts				rts
.8d01					EvaluateUnsignedInteger:
.8d01	20 f8 8c	jsr $8cf8			jsr 	EvaluateInteger 			; check integer is +ve
.8d04	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d07	30 01		bmi $8d0a			bmi 	HelperValueError
.8d09	60		rts				rts
.8d0a					HelperValueError:
.8d0a	4c d3 97	jmp $97d3			jmp 	ArgumentError
.8d0d					Evaluate16BitInteger:
.8d0d	20 01 8d	jsr $8d01			jsr	 	EvaluateUnsignedInteger		; get integer
.8d10	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8d13	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8d16	d0 f2		bne $8d0a			bne 	HelperValueError
.8d18	60		rts				rts
.8d19					Evaluate8BitInteger:
.8d19	20 01 8d	jsr $8d01			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8d1c	d0 ec		bne $8d0a			bne 	HelperValueError
.8d1e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8d21	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8d24	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8d27	d0 e1		bne $8d0a			bne 	HelperValueError
.8d29	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8d2d					NSMNegate:
.8d2d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d30	49 80		eor #$80			eor 	#NSBIsNegative
.8d32	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d35	60		rts				rts
.8d36					NSMNegateMantissa:
.8d36	38		sec				sec
.8d37	a9 00		lda #$00			lda 	#0
.8d39	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8d3c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d3f	a9 00		lda #$00			lda 	#0
.8d41	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8d44	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d47	a9 00		lda #$00			lda 	#0
.8d49	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8d4c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d4f	a9 00		lda #$00			lda 	#0
.8d51	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8d54	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d57	60		rts				rts
.8d58					NSMShiftUpTwo:
.8d58	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d5b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d5e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d61	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8d64	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8d67	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8d6a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d6d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8d70	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8d73	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8d76	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d79	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d7c	60		rts				rts
.8d7d					NSMSetZeroMantissaOnly:
.8d7d	a9 00		lda #$00			lda 	#0
.8d7f	80 08		bra $8d89			bra 	NSMSetMantissa
.8d81					NSMSetZero:
.8d81	a9 00		lda #$00			lda 	#0
.8d83					NSMSetByte:
.8d83	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d86	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d89					NSMSetMantissa:
.8d89	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d8c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d8f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d92	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d95	60		rts				rts
.8d96					NSMShiftLeft:
.8d96	18		clc				clc
.8d97					NSMRotateLeft:
.8d97	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d9a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d9d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8da0	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8da3	60		rts				rts
.8da4					NSMShiftRight:
.8da4	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8da7	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8daa	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8dad	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8db0	60		rts				rts
.8db1					NSMIsZero:
.8db1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8db4	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8db7	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8dba	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8dbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.978d					DecimalScalarTable:
>978d	66 66 66 66				.dword $66666666 ; 0.1
>9791	de					.byte $de
>9792	1f 85 eb 51				.dword $51eb851f ; 0.01
>9796	db					.byte $db
>9797	4c 37 89 41				.dword $4189374c ; 0.001
>979b	d8					.byte $d8
>979c	ac 8b db 68				.dword $68db8bac ; 0.0001
>97a0	d4					.byte $d4
>97a1	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>97a5	d1					.byte $d1
>97a6	83 de 1b 43				.dword $431bde83 ; 1e-06
>97aa	ce					.byte $ce
>97ab	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>97af	ca					.byte $ca
>97b0	89 3b e6 55				.dword $55e63b89 ; 1e-08
>97b4	c7					.byte $c7
>97b5	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>97b9	c4					.byte $c4
>97ba	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>97be	c0					.byte $c0
>97bf	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>97c3	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.97c4					SyntaxError:
.97c4	a9 02		lda #$02		lda	#2
.97c6	4c da 82	jmp $82da		jmp	ErrorHandler
.97c9					RangeError:
.97c9	a9 04		lda #$04		lda	#4
.97cb	4c da 82	jmp $82da		jmp	ErrorHandler
.97ce					TypeError:
.97ce	a9 05		lda #$05		lda	#5
.97d0	4c da 82	jmp $82da		jmp	ErrorHandler
.97d3					ArgumentError:
.97d3	a9 07		lda #$07		lda	#7
.97d5	4c da 82	jmp $82da		jmp	ErrorHandler
.97d8					NotDoneError:
.97d8	a9 0c		lda #$0c		lda	#12
.97da	4c da 82	jmp $82da		jmp	ErrorHandler
.97dd					ErrorText:
>97dd	42 72 65 61 6b 00			.text	"Break",0
>97e3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>97eb	72 72 6f 72 00
>97f0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>97f8	20 62 79 20 7a 65 72 6f 00
>9801	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9809	61 6e 67 65 00
>980e	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9816	6d 61 74 63 68 00
>981c	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9824	65 6d 6f 72 79 00
>982a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9832	61 72 67 75 6d 65 6e 74 00
>983b	53 74 6f 70 00				.text	"Stop",0
>9840	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9848	6f 6f 20 6c 6f 6e 67 00
>9850	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9858	6e 20 66 61 69 6c 65 64 00
>9861	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9869	61 74 61 00
>986d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9875	65 6e 74 65 64 00
>987b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9883	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>988f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9897	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>98a4	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>98ac	74 68 6f 75 74 20 52 65 70 65 61 74 00
>98b9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>98c1	61 63 6b 20 66 75 6c 6c 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8dbe					StackOpen:
.8dbe	48		pha				pha 								; save frame byte
.8dbf	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8dc1	0a		asl a				asl 	a 							; claim twice this for storage
.8dc2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8dc4	38		sec				sec 								; so basically subtracting from
.8dc5	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8dc7	85 34		sta $34				sta 	basicStack
.8dc9	b0 08		bcs $8dd3			bcs 	_SONoBorrow
.8dcb	c6 35		dec $35				dec 	basicStack+1
.8dcd	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8dcf	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8dd1	90 04		bcc $8dd7			bcc 	_SOMemory
.8dd3					_SONoBorrow:
.8dd3	68		pla				pla 								; get marker back and write at TOS
.8dd4	92 34		sta ($34)			sta 	(basicStack)
.8dd6	60		rts				rts
.8dd7					_SOMemory:
.8dd7							ERR_STACK
.8dd7					StackClose:
.8dd7	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8dd9	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8ddb	0a		asl a				asl 	a 							; claim twice this.
.8ddc	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8dde	85 34		sta $34				sta 	basicStack
.8de0	90 02		bcc $8de4			bcc 	_SCExit
.8de2	e6 35		inc $35				inc 	basicStack+1
.8de4					_SCExit:
.8de4	60		rts				rts
.8de5					StackCheckFrame:
.8de5	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8de7	29 f0		and #$f0			and 	#$F0 						; check type bits
.8de9	d0 01		bne $8dec			bne 	_SCFError 					; different, we have structures mixed up
.8deb	60		rts				rts
.8dec					_SCFError:
.8dec	8a		txa				txa 								; report error X
.8ded	4c da 82	jmp $82da			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8df0					STKSaveCodePosition:
.8df0	5a		phy				phy
.8df1	98		tya				tya 								; save Y
.8df2	a0 05		ldy #$05			ldy 	#5
.8df4	91 34		sta ($34),y			sta 	(basicStack),y
.8df6	88		dey				dey 								; save Code Pointer
.8df7					_STKSaveLoop:
.8df7	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8dfa	91 34		sta ($34),y			sta 	(basicStack),y
.8dfc	88		dey				dey
.8dfd	d0 f8		bne $8df7			bne 	_STKSaveLoop
.8dff	7a		ply				ply
.8e00	60		rts				rts
.8e01					STKLoadCodePosition:
.8e01	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8e03					_STKLoadLoop:
.8e03	b1 34		lda ($34),y			lda 	(basicStack),y
.8e05	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8e08	c8		iny				iny
.8e09	c0 05		cpy #$05			cpy 	#5
.8e0b	d0 f6		bne $8e03			bne 	_STKLoadLoop
.8e0d	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8e0f	a8		tay				tay
.8e10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8e11					StackReset:
.8e11	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8e13	85 34		sta $34				sta 	0+basicStack
.8e15	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8e17	85 35		sta $35				sta 	1+basicStack
.8e19	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8e1b	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8e1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.98ca					StringConcrete:
.98ca	5a		phy				phy 								; save position on stack
.98cb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.98ce	85 38		sta $38				sta 	zTemp1
.98d0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.98d3	85 39		sta $39				sta 	zTemp1+1
.98d5	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.98d7					_SALength:
.98d7	c8		iny				iny
.98d8	b1 38		lda ($38),y			lda 	(zTemp1),y
.98da	d0 fb		bne $98d7			bne 	_SALength
.98dc	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.98de	b0 3f		bcs $991f			bcs 	_SALengthError
.98e0	98		tya				tya 				 				; length of the new string
.98e1	18		clc				clc
.98e2	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.98e4	90 02		bcc $98e8			bcc 	_SAHaveLength
.98e6	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.98e8					_SAHaveLength:
.98e8	48		pha				pha 								; save length.
.98e9	38		sec				sec
.98ea	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.98ec	6d 0e 07	adc $070e			adc 	StringMemory
.98ef	8d 0e 07	sta $070e			sta 	StringMemory
.98f2	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.98f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.98f7	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.98f9	6d 0f 07	adc $070f			adc 	StringMemory+1
.98fc	8d 0f 07	sta $070f			sta 	StringMemory+1
.98ff	85 3b		sta $3b				sta 	zTemp2+1
.9901	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9904	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9905	38		sec				sec
.9906	e9 03		sbc #$03			sbc 	#3
.9908	92 3a		sta ($3a)			sta 	(zTemp2)
.990a	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.990c	a0 01		ldy #$01			ldy 	#1
.990e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9910					_SACopyNewString:
.9910	a0 00		ldy #$00			ldy 	#0
.9912					_SACopyNSLoop:
.9912	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9914	c8		iny				iny 								; write two on in string storage
.9915	c8		iny				iny
.9916	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9918	88		dey				dey 								; this makes it one one.
.9919	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.991b	d0 f5		bne $9912			bne 	_SACopyNSLoop
.991d	7a		ply				ply
.991e	60		rts				rts
.991f					_SALengthError:
.991f	a9 09		lda #$09		lda	#9
.9921	4c da 82	jmp $82da		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9924					StringSystemInitialise:
.9924	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9926	8d 0e 07	sta $070e			sta 	0+StringMemory
.9929	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.992b	8d 0f 07	sta $070f			sta 	1+StringMemory
.992e	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9931	60		rts				rts
.9932					StringSpaceInitialise:
.9932	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9934	8d 10 07	sta $0710			sta 	StringInitialised
.9937	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.993a	8d 11 07	sta $0711			sta 	StringTempPointer
.993d	ad 0f 07	lda $070f			lda 	StringMemory+1
.9940	3a		dec a				dec 	a
.9941	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9944	60		rts				rts
.9945					StringTempAllocate:
.9945	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9947	b0 35		bcs $997e			bcs 	_STALength
.9949	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.994c	30 05		bmi $9953			bmi 	_STAAllocate
.994e	48		pha				pha 								; save value to subtract.
.994f	20 32 99	jsr $9932			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9952	68		pla				pla 								; restore it
.9953					_STAAllocate:
.9953	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9955	18		clc				clc  								; deliberate allows one more
.9956	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9959	8d 11 07	sta $0711			sta 	StringTempPointer
.995c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.995f	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9961	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9964	69 ff		adc #$ff			adc 	#$FF
.9966	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9969	85 3d		sta $3d				sta 	zsTemp+1
.996b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.996e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9971	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9974	a9 10		lda #$10			lda 	#NSTString
.9976	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9979	a9 00		lda #$00			lda 	#0 							; clear the target string
.997b	92 3c		sta ($3c)			sta 	(zsTemp)
.997d	60		rts				rts
.997e					_STALength:
.997e	a9 09		lda #$09		lda	#9
.9980	4c da 82	jmp $82da		jmp	ErrorHandler
.9983					StringTempWrite:
.9983	48		pha				pha
.9984	92 3c		sta ($3c)			sta 	(zsTemp)
.9986	e6 3c		inc $3c				inc 	zsTemp
.9988	d0 02		bne $998c			bne 	_STWNoCarry
.998a	e6 3d		inc $3d				inc 	zsTemp+1
.998c					_STWNoCarry:
.998c	a9 00		lda #$00			lda 	#0
.998e	92 3c		sta ($3c)			sta 	(zsTemp)
.9990	68		pla				pla
.9991	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8e1e					BackloadProgram:
.8e1e	a2 ff		ldx #$ff			ldx 	#$FF
.8e20	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8e23	20 4d 8e	jsr $8e4d			jsr 	BLReadByte
.8e26	30 1e		bmi $8e46			bmi 	_BPExit
.8e28					_BPCopy:
.8e28	e8		inx				inx  								; copy byte in
.8e29	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8e2c	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8e2f	20 4d 8e	jsr $8e4d			jsr 	BLReadByte 					; read next byte
.8e32	30 0a		bmi $8e3e			bmi 	_BPEndLine 					; -ve = EOL
.8e34	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8e36	d0 02		bne $8e3a			bne 	_BPNotTab
.8e38	a9 20		lda #$20			lda 	#' '
.8e3a					_BPNotTab:
.8e3a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8e3c	b0 ea		bcs $8e28			bcs 	_BPCopy
.8e3e					_BPEndLine:
.8e3e	20 09 90	jsr $9009			jsr 	TokeniseLine 				; tokenise the line.
.8e41	20 95 92	jsr $9295			jsr 	MemoryAppend 				; append to current program
.8e44	80 d8		bra $8e1e			bra 	BackloadProgram
.8e46					_BPExit:
.8e46	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8e49	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8e4c	60		rts				rts
.8e4d					BLReadByte:
.8e4d					_BLLoad:
.8e4d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8e50	ee 4e 8e	inc $8e4e			inc 	_BLLoad+1
.8e53	d0 03		bne $8e58			bne 	_BLNoCarry
.8e55	ee 4f 8e	inc $8e4f			inc 	_BLLoad+2
.8e58					_BLNoCarry:
.8e58	c9 00		cmp #$00			cmp 	#0
.8e5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8e5b					TokeniseSearchTable:
.8e5b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8e5d	85 36		sta $36				sta 	zTemp0
.8e5f	a0 00		ldy #$00			ldy 	#0
.8e61	a9 80		lda #$80			lda 	#$80 						; token #
.8e63	85 38		sta $38				sta 	zTemp1
.8e65					_TSTLoop:
.8e65	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8e67	30 49		bmi $8eb2			bmi 	_TSTFail 					; -ve = end of table
.8e69	f0 2e		beq $8e99			beq 	_TSTNext 					; zero, check next it's a dummy
.8e6b	c8		iny				iny 								; get the hash
.8e6c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6e	88		dey				dey
.8e6f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8e72	d0 25		bne $8e99			bne 	_TSTNext
.8e74	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8e77	38		sec				sec
.8e78	ed 00 07	sbc $0700			sbc 	identStart
.8e7b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8e7d	d0 1a		bne $8e99			bne 	_TSTNext
.8e7f	5a		phy				phy 								; save Y , we might fail
.8e80	c8		iny				iny 								; point to text
.8e81	c8		iny				iny
.8e82	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8e85					_TSTCompareName:
.8e85	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8e88	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e8a	d0 0c		bne $8e98			bne 	_TSTNextPullY 				; fail, pullY and do next
.8e8c	e8		inx				inx
.8e8d	c8		iny				iny
.8e8e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8e91	d0 f2		bne $8e85			bne 	_TSTCompareName
.8e93	7a		ply				ply 								; throw Y
.8e94	a5 38		lda $38				lda 	zTemp1 						; get token #
.8e96	38		sec				sec 								; return with CS = passed.
.8e97	60		rts				rts
.8e98					_TSTNextPullY:
.8e98	7a		ply				ply 								; restore current, fall through.
.8e99					_TSTNext:
.8e99	e6 38		inc $38				inc 	zTemp1 						; token counter
.8e9b	98		tya				tya
.8e9c	18		clc				clc
.8e9d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8e9f	1a		inc a				inc 	a 							; +1
.8ea0	1a		inc a				inc 	a 							; +2
.8ea1	a8		tay				tay
.8ea2	10 c1		bpl $8e65			bpl 	_TSTLoop 					; if Y < $80 loop back
.8ea4	98		tya				tya 								; add Y to zTemp0 and reset Y
.8ea5	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8ea7	18		clc				clc  								; but have tables > 255 bytes
.8ea8	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8eaa	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8eac	90 b7		bcc $8e65			bcc 	_TSTLoop
.8eae	e6 37		inc $37				inc 	zTemp0+1
.8eb0	80 b3		bra $8e65			bra 	_TSTLoop
.8eb2					_TSTFail:
.8eb2	18		clc				clc
.8eb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8eb4					KeywordSet0:
>8eb4	00 65					.text	0,$65,""               ; $80 !0:EOF
>8eb6	00 58					.text	0,$58,""               ; $81 !1:SH1
>8eb8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8eba	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8ec0	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8ec8	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8ece	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8ed5	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8edc	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8ee3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8ee9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8ef1	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8ef9	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8eff	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8f06	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8f0c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8f14	28
>8f15	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8f1b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8f21	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8f27	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8f2e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8f34	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8f3a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8f3f	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8f43	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8f49	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8f51	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8f58	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8f5f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8f67	43
>8f68	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8f6e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8f75	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8f7b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8f81	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8f86	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8f8c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8f91	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8f98	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8f9e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8fa3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8faa	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8fb0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8fb5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8fbd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8fc3	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8fc7	ff					.text	$FF
.8fc8					KeywordSet1:
>8fc8	00 65					.text	0,$65,""               ; $80 !0:EOF
>8fca	00 58					.text	0,$58,""               ; $81 !1:SH1
>8fcc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8fce	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8fd6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8fdd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8fe2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8fe8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8fed	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8ff5	45
>8ff6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8ffb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9001	ff					.text	$FF
.9002					KeywordSet2:
>9002	00 65					.text	0,$65,""               ; $80 !0:EOF
>9004	00 58					.text	0,$58,""               ; $81 !1:SH1
>9006	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9008	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9009					TokeniseLine:
.9009	20 91 91	jsr $9191			jsr 	FixLineBufferCase 			; fix line case
.900c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.900e	8d 15 07	sta $0715			sta 	tokenOffset
.9011	9c 16 07	stz $0716			stz 	tokenLineNumber
.9014	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9017	a2 ff		ldx #$ff			ldx 	#$FF
.9019					_TKFindFirst:
.9019	e8		inx				inx
.901a	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.901d	f0 79		beq $9098			beq 	_TKExit
.901f	c9 20		cmp #$20			cmp 	#' '
.9021	90 f6		bcc $9019			bcc 	_TKFindFirst
.9023	c9 30		cmp #$30			cmp 	#'0'
.9025	90 07		bcc $902e			bcc 	_TKNoLineNumber
.9027	c9 3a		cmp #$3a			cmp 	#'9'+1
.9029	b0 03		bcs $902e			bcs 	_TKNoLineNumber
.902b	20 bb 91	jsr $91bb			jsr 	TokeniseExtractLineNumber
.902e					_TKNoLineNumber:
.902e					_TKTokeniseLoop:
.902e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9031	f0 65		beq $9098			beq 	_TKExit
.9033	e8		inx				inx
.9034	c9 20		cmp #$20			cmp 	#' '
.9036	f0 f6		beq $902e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9038	ca		dex				dex 								; undo last get, A contains character, X is position.
.9039	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.903b	f0 61		beq $909e			beq 	_TKTokeniseIdentifier
.903d	c9 41		cmp #$41			cmp 	#'A'
.903f	90 04		bcc $9045			bcc 	_TKTokenisePunctuation
.9041	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9043	90 59		bcc $909e			bcc 	_TKTokeniseIdentifier
.9045					_TKTokenisePunctuation:
.9045	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9047	f0 27		beq $9070			beq 	_TKString
.9049	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.904b	f0 28		beq $9075			beq 	_TKHexConstant
.904d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.904f	f0 29		beq $907a			beq 	_TKCheckDouble
.9051	c9 3e		cmp #$3e			cmp 	#'>'
.9053	f0 25		beq $907a			beq 	_TKCheckDouble
.9055					_TKStandardPunctuation:
.9055	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9058	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.905a	90 0e		bcc $906a			bcc 	_TKNoShift
.905c	48		pha				pha 								; save
.905d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.905f	85 36		sta $36				sta 	zTemp0
.9061	68		pla				pla
.9062	29 20		and #$20			and 	#32 						; bit 5
.9064	4a		lsr a				lsr 	a 							; shift into bit 3
.9065	4a		lsr a				lsr 	a
.9066	05 36		ora $36				ora 	zTemp0
.9068	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.906a					_TKNoShift:
.906a	20 00 92	jsr $9200			jsr 	TokeniseWriteByte 			; write the punctuation character
.906d	e8		inx				inx 								; consume the character
.906e	80 be		bra $902e			bra 	_TKTokeniseLoop 			; and loop round again.
.9070					_TKString:
.9070	20 20 91	jsr $9120			jsr 	TokeniseString
.9073	80 b9		bra $902e			bra 	_TKTokeniseLoop
.9075					_TKHexConstant:
.9075	20 5b 91	jsr $915b			jsr 	TokeniseHexConstant
.9078	80 b4		bra $902e			bra 	_TKTokeniseLoop
.907a					_TKCheckDouble:
.907a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.907d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.907f	90 d4		bcc $9055			bcc 	_TKStandardPunctuation
.9081	c9 3f		cmp #$3f			cmp 	#'>'+1
.9083	b0 d0		bcs $9055			bcs 	_TKStandardPunctuation
.9085	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9088	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.908a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.908b	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.908e	38		sec				sec
.908f	e9 3c		sbc #$3c			sbc 	#'<'
.9091	20 00 92	jsr $9200			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9094	e8		inx				inx 								; consume both
.9095	e8		inx				inx
.9096	80 96		bra $902e			bra 	_TKTokeniseLoop
.9098	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.909a	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.909d	60		rts				rts
.909e					_TKTokeniseIdentifier:
.909e	8e 00 07	stx $0700			stx 	identStart 					; save start
.90a1	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.90a4					_TKCheckLoop:
.90a4	e8		inx				inx 								; look at next, we know first is identifier.
.90a5	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.90a8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.90aa	f0 f8		beq $90a4			beq 	_TKCheckLoop
.90ac	c9 30		cmp #$30			cmp	 	#"0"
.90ae	90 0c		bcc $90bc			bcc 	_TKEndIdentifier
.90b0	c9 3a		cmp #$3a			cmp 	#"9"+1
.90b2	90 f0		bcc $90a4			bcc 	_TKCheckLoop
.90b4	c9 41		cmp #$41			cmp	 	#"A"
.90b6	90 04		bcc $90bc			bcc 	_TKEndIdentifier
.90b8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.90ba	90 e8		bcc $90a4			bcc 	_TKCheckLoop
.90bc					_TKEndIdentifier:
.90bc	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.90bf	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.90c1	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.90c3	f0 06		beq $90cb			beq 	_TKHasTypeCharacter
.90c5	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.90c7	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.90c9	d0 07		bne $90d2			bne 	_TKNoTypeCharacter
.90cb					_TKHasTypeCharacter:
.90cb	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.90ce	e8		inx				inx 								; read next
.90cf	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90d2					_TKNoTypeCharacter:
.90d2	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.90d4	d0 09		bne $90df			bne 	_TKNoArray
.90d6	e8		inx				inx 								; skip the (
.90d7	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.90da	09 04		ora #$04			ora 	#$04
.90dc	8d 04 07	sta $0704			sta 	identTypeByte
.90df					_TKNoArray:
.90df	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.90e2	20 7c 91	jsr $917c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.90e5	a0 8e		ldy #$8e			ldy 	#(KeywordSet0) >> 8
.90e7	a9 b4		lda #$b4			lda 	#(KeywordSet0) & $FF
.90e9	20 5b 8e	jsr $8e5b			jsr 	TokeniseSearchTable
.90ec	a2 00		ldx #$00			ldx 	#0
.90ee	b0 1f		bcs $910f			bcs 	_TKFoundToken
.90f0	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.90f2	a9 c8		lda #$c8			lda 	#(KeywordSet1) & $FF
.90f4	20 5b 8e	jsr $8e5b			jsr 	TokeniseSearchTable
.90f7	a2 81		ldx #$81			ldx 	#$81
.90f9	b0 14		bcs $910f			bcs 	_TKFoundToken
.90fb	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.90fd	a9 c8		lda #$c8			lda 	#(KeywordSet1) & $FF
.90ff	20 5b 8e	jsr $8e5b			jsr 	TokeniseSearchTable
.9102	a2 82		ldx #$82			ldx 	#$82
.9104	b0 09		bcs $910f			bcs 	_TKFoundToken
.9106	20 0c 92	jsr $920c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9109	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.910c	4c 2e 90	jmp $902e			jmp 	_TKTokeniseLoop 			; and go round again.
.910f					_TKFoundToken:
.910f	48		pha				pha 								; save token
.9110	8a		txa				txa 								; shift in X, is there one ?
.9111	f0 03		beq $9116			beq 	_TKNoTShift
.9113	20 00 92	jsr $9200			jsr 	TokeniseWriteByte 			; if so, write it out
.9116					_TKNoTShift:
.9116	68		pla				pla 								; restore and write token
.9117	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.911a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.911d	4c 2e 90	jmp $902e			jmp 	_TKTokeniseLoop 			; and go round again.
.9120					TokeniseString:
.9120	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9122	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9125	e8		inx				inx									; start of quoted string.
.9126	da		phx				phx 								; push start of string on top
.9127	ca		dex				dex
.9128					_TSFindEnd:
.9128	e8		inx				inx
.9129	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.912c	f0 04		beq $9132			beq 	_TSEndOfString
.912e	c9 22		cmp #$22			cmp 	#'"'
.9130	d0 f6		bne $9128			bne 	_TSFindEnd
.9132					_TSEndOfString:
.9132	7a		ply				ply  								; so now Y is first character, X is character after end.
.9133	48		pha				pha 								; save terminating character
.9134	20 3c 91	jsr $913c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9137	68		pla				pla 								; terminating character
.9138	f0 01		beq $913b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.913a	e8		inx				inx
.913b					_TSNotQuote:
.913b	60		rts				rts
.913c					TOWriteBlockXY:
.913c	86 36		stx $36				stx 	zTemp0 						; write end character
.913e	98		tya				tya
.913f	49 ff		eor #$ff			eor 	#$FF
.9141	38		sec				sec
.9142	65 36		adc $36				adc 	zTemp0
.9144	1a		inc a				inc 	a 							; one extra for NULL
.9145	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9148					_TOBlockLoop:
.9148	c4 36		cpy $36				cpy 	zTemp0
.914a	f0 09		beq $9155			beq 	_TOBlockExit
.914c	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.914f	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9152	c8		iny				iny
.9153	80 f3		bra $9148			bra 	_TOBlockLoop
.9155					_TOBlockExit:
.9155	a9 00		lda #$00			lda 	#0
.9157	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.915a	60		rts				rts
.915b					TokeniseHexConstant:
.915b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.915d	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9160	e8		inx				inx									; start of quoted string.
.9161	da		phx				phx 								; push start of constant on top
.9162	ca		dex				dex
.9163					_THFindLoop:
.9163	e8		inx				inx
.9164	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9167	c9 30		cmp #$30			cmp 	#"0"
.9169	90 0c		bcc $9177			bcc 	_THFoundEnd
.916b	c9 3a		cmp #$3a			cmp 	#"9"+1
.916d	90 f4		bcc $9163			bcc 	_THFindLoop
.916f	c9 41		cmp #$41			cmp 	#"A"
.9171	90 04		bcc $9177			bcc 	_THFoundEnd
.9173	c9 47		cmp #$47			cmp 	#"F"+1
.9175	90 ec		bcc $9163			bcc 	_THFindLoop
.9177					_THFoundEnd:
.9177	7a		ply				ply 								; restore start
.9178	20 3c 91	jsr $913c			jsr 	TOWriteBlockXY 				; output the block
.917b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.917c					TokeniseCalculateHash:
.917c	da		phx				phx
.917d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9180	a9 00		lda #$00			lda 	#0
.9182					_TCHLoop:
.9182	18		clc				clc
.9183	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9186	e8		inx				inx
.9187	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.918a	d0 f6		bne $9182			bne 	_TCHLoop
.918c	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.918f	fa		plx				plx
.9190	60		rts				rts
.9191					FixLineBufferCase:
.9191	a2 00		ldx #$00			ldx 	#0
.9193					_FLBCLoop:
.9193	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9196	f0 22		beq $91ba			beq 	_FLBCExit 					; end of string.
.9198	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.919a	f0 11		beq $91ad			beq 	_FLBCInQuotes
.919c	e8		inx				inx
.919d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.919f	90 f2		bcc $9193			bcc 	_FLBCLoop
.91a1	c9 7b		cmp #$7b			cmp 	#'z'+1
.91a3	b0 ee		bcs $9193			bcs 	_FLBCLoop
.91a5	38		sec				sec 								; make U/C
.91a6	e9 20		sbc #$20			sbc 	#32
.91a8	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.91ab	80 e6		bra $9193			bra 	_FLBCLoop
.91ad					_FLBCInQuotes:
.91ad	e8		inx				inx 								; advance
.91ae	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.91b1	f0 07		beq $91ba			beq 	_FLBCExit 					; exit on EOS
.91b3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.91b5	d0 f6		bne $91ad			bne 	_FLBCInQuotes
.91b7	e8		inx				inx 								; skip over it
.91b8	80 d9		bra $9193			bra 	_FLBCLoop
.91ba					_FLBCExit:
.91ba	60		rts				rts
.91bb					TokeniseExtractLineNumber:
.91bb	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.91be	48		pha				pha
.91bf	ad 16 07	lda $0716			lda 	tokenLineNumber
.91c2	48		pha				pha
.91c3	20 f9 91	jsr $91f9			jsr 	_TELNTimes2 				; line # x 4
.91c6	20 f9 91	jsr $91f9			jsr 	_TELNTimes2 				; line # x 2
.91c9	18		clc				clc 								; add stacked value
.91ca	68		pla				pla
.91cb	6d 16 07	adc $0716			adc 	tokenLineNumber
.91ce	8d 16 07	sta $0716			sta 	tokenLineNumber
.91d1	68		pla				pla
.91d2	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.91d5	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.91d8	20 f9 91	jsr $91f9			jsr 	_TELNTimes2 				; line # x 10
.91db	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.91de	e8		inx				inx
.91df	29 0f		and #$0f			and 	#15 						; add to line #
.91e1	18		clc				clc
.91e2	6d 16 07	adc $0716			adc 	tokenLineNumber
.91e5	8d 16 07	sta $0716			sta 	tokenLineNumber
.91e8	90 03		bcc $91ed			bcc 	_TLENNoCarry
.91ea	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.91ed					_TLENNoCarry:
.91ed	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.91f0	c9 30		cmp #$30			cmp 	#'0'
.91f2	90 04		bcc $91f8			bcc 	_TLENExit
.91f4	c9 3a		cmp #$3a			cmp 	#'9'+1
.91f6	90 c3		bcc $91bb			bcc 	TokeniseExtractLineNumber
.91f8					_TLENExit:
.91f8	60		rts				rts
.91f9					_TELNTimes2:
.91f9	0e 16 07	asl $0716			asl 	tokenLineNumber
.91fc	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.91ff	60		rts				rts
.9200					TokeniseWriteByte:
.9200	da		phx				phx
.9201	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9204	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9207	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.920a	fa		plx				plx
.920b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.920c					CheckCreateVariableRecord:
.920c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.920e	85 36		sta $36				sta 	0+zTemp0
.9210	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9212	85 37		sta $37				sta 	1+zTemp0
.9214					_CCVSearch:
.9214	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9216	f0 2c		beq $9244			beq 	_CCVFail
.9218	a0 01		ldy #$01			ldy 	#1 							; read the hash
.921a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.921c	cd 03 07	cmp $0703			cmp 	identHash
.921f	d0 16		bne $9237			bne 	_CCVNext
.9221	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9223	ae 00 07	ldx $0700			ldx 	identStart
.9226					_CCVCompare:
.9226	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9229	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.922b	e8		inx				inx 								; advance pointers
.922c	c8		iny				iny
.922d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.922e	d0 07		bne $9237			bne 	_CCVNext  					; didn't match go to next.
.9230	90 f4		bcc $9226			bcc 	_CCVCompare 				; not finished yet.
.9232	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9235	f0 41		beq $9278			beq 	_CCVFound 					; yes, we were successful
.9237					_CCVNext:
.9237	18		clc				clc
.9238	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.923a	65 36		adc $36				adc 	zTemp0
.923c	85 36		sta $36				sta 	zTemp0
.923e	90 d4		bcc $9214			bcc 	_CCVSearch
.9240	e6 37		inc $37				inc 	zTemp0+1
.9242	80 d0		bra $9214			bra 	_CCVSearch
.9244					_CCVFail:
.9244	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9246	ad 03 07	lda $0703			lda 	identHash
.9249	91 36		sta ($36),y			sta 	(zTemp0),y
.924b	c8		iny				iny 								; offset 2 is the type byte
.924c	ad 04 07	lda $0704			lda 	identTypeByte
.924f	91 36		sta ($36),y			sta 	(zTemp0),y
.9251	c8		iny				iny
.9252					_CCVData:
.9252	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9254	91 36		sta ($36),y			sta 	(zTemp0),y
.9256	c8		iny				iny
.9257	c0 08		cpy #$08			cpy 	#8
.9259	90 f7		bcc $9252			bcc 	_CCVData
.925b	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.925e					_CCVCopyName:
.925e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9261	91 36		sta ($36),y			sta 	(zTemp0),y
.9263	e8		inx				inx
.9264	c8		iny				iny
.9265	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9268	d0 f4		bne $925e			bne 	_CCVCopyName
.926a	98		tya				tya 								; patch offset
.926b	92 36		sta ($36)			sta 	(zTemp0)
.926d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.926f	91 36		sta ($36),y			sta 	(zTemp0),y
.9271	88		dey				dey
.9272	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9274	09 80		ora #$80			ora 	#$80
.9276	91 36		sta ($36),y			sta 	(zTemp0),y
.9278					_CCVFound:
.9278	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.927a	38		sec				sec
.927b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.927d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.927f	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9282	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9284	20 00 92	jsr $9200			jsr 	TokeniseWriteByte
.9287	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9992					MemoryPeek:
.9992	b2 36		lda ($36)			lda 	(zTemp0)
.9994	60		rts				rts
.9995					MemoryPoke:
.9995	92 36		sta ($36)			sta 	(zTemp0)
.9997	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9998					EXTPrintCharacter:
.9998	48		pha				pha
.9999	da		phx				phx
.999a	5a		phy				phy
.999b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.999e	7a		ply				ply
.999f	fa		plx				plx
.99a0	68		pla				pla
.99a1	60		rts				rts
.99a2					EXTInputSingleCharacter:
.99a2	da		phx				phx
.99a3	5a		phy				phy
.99a4					_EISCWait:
.99a4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.99a7	c9 00		cmp #$00			cmp 	#0
.99a9	f0 f9		beq $99a4			beq 	_EISCWait
.99ab	7a		ply				ply
.99ac	fa		plx				plx
.99ad	60		rts				rts
.99ae					EXTInputLine:
.99ae	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.99b0					_ILLoop:
.99b0	da		phx				phx 								; read character in
.99b1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.99b4	fa		plx				plx
.99b5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.99b7	f0 12		beq $99cb			beq 	_ILBackspace
.99b9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.99bb	f0 15		beq $99d2			beq 	_ILExit
.99bd	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.99bf	90 ef		bcc $99b0			bcc 	_ILLoop
.99c1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.99c3	f0 eb		beq $99b0			beq 	_ILLoop
.99c5	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.99c8	e8		inx				inx
.99c9	80 e5		bra $99b0			bra 	_ILLoop
.99cb					_ILBackspace:
.99cb	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.99cd	f0 e1		beq $99b0			beq 	_ILLoop
.99cf	ca		dex				dex 								; back one.
.99d0	80 de		bra $99b0			bra 	_ILLoop
.99d2					_ILExit:
.99d2	20 98 99	jsr $9998			jsr 	EXTPrintCharacter
.99d5	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.99d8	60		rts				rts
.99d9					EXTBreakCheck:
.99d9	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9288					MemoryNew:
.9288	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.928a	85 30		sta $30				sta 	codePtr
.928c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.928e	85 31		sta $31				sta 	codePtr+1
.9290	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9292	92 30		sta ($30)			sta 	(codePtr)
.9294	60		rts				rts
.9295					MemoryAppend:
.9295	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9297	85 30		sta $30				sta 	codePtr
.9299	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.929b	85 31		sta $31				sta 	codePtr+1
.929d					_MAFindEnd:
.929d	b2 30		lda ($30)			lda 	(codePtr)
.929f	f0 0d		beq $92ae			beq 	_MAFoundEnd
.92a1	18		clc				clc
.92a2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92a4	65 30		adc $30				adc 	codePtr
.92a6	85 30		sta $30				sta 	codePtr
.92a8	90 02		bcc $92ac			bcc 	_CREExit
.92aa	e6 31		inc $31				inc 	codePtr+1
.92ac					_CREExit:
.92ac	80 ef		bra $929d			bra 	_MAFindEnd
.92ae					_MAFoundEnd:
.92ae	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.92b1	c0 04		cpy #$04			cpy 	#4 							; blank line
.92b3	f0 0e		beq $92c3			beq 	_MANoLine
.92b5	a9 00		lda #$00			lda 	#0 							; end of program
.92b7	91 30		sta ($30),y			sta 	(codePtr),y
.92b9					_MACopy:
.92b9	88		dey				dey
.92ba	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.92bd	91 30		sta ($30),y			sta 	(codePtr),y
.92bf	c0 00		cpy #$00			cpy 	#0
.92c1	d0 f6		bne $92b9			bne 	_MACopy
.92c3					_MANoLine:
.92c3	60		rts				rts
.92c4					MemoryInline:
.92c4	98		tya				tya 								; put address into stack,x
.92c5	18		clc				clc
.92c6	65 30		adc $30				adc 	codePtr
.92c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92cb	a5 31		lda $31				lda 	codePtr+1
.92cd	69 00		adc #$00			adc 	#0
.92cf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92d2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.92d5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.92d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.92d9					MemoryTransferAX:
.92d9	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.92db	86 37		stx $37				stx 	zTemp0+1
.92dd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.92df	85 30		sta $30				sta 	codePtr
.92e1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.92e3	85 31		sta $31				sta 	codePtr+1
.92e5					_MTAXLoop:
.92e5	b2 30		lda ($30)			lda 	(codePtr)
.92e7	f0 1d		beq $9306			beq 	_MTAXError 					; not found.
.92e9	a0 01		ldy #$01			ldy 	#1 							; check LSB
.92eb	b1 30		lda ($30),y			lda 	(codePtr),y
.92ed	c5 36		cmp $36				cmp 	zTemp0
.92ef	d0 07		bne $92f8			bne 	_MTAXNext
.92f1	c8		iny				iny 								; check MSB
.92f2	b1 30		lda ($30),y			lda 	(codePtr),y
.92f4	c5 37		cmp $37				cmp 	zTemp0+1
.92f6	f0 0d		beq $9305			beq 	_MTAXExit 					; success !
.92f8					_MTAXNext:
.92f8	18		clc				clc
.92f9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92fb	65 30		adc $30				adc 	codePtr
.92fd	85 30		sta $30				sta 	codePtr
.92ff	90 02		bcc $9303			bcc 	_CREExit
.9301	e6 31		inc $31				inc 	codePtr+1
.9303					_CREExit:
.9303	80 e0		bra $92e5			bra 	_MTAXLoop
.9305					_MTAXExit:
.9305	60		rts				rts
.9306					_MTAXError:
.9306	a9 0d		lda #$0d		lda	#13
.9308	4c da 82	jmp $82da		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
