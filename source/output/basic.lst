
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Tue Sep 20 17:05:36 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_GETDATEDOLLARLPAREN              = $88; $88 GETDATE$(
=$89					KWD_GETTIMEDOLLARLPAREN              = $89; $89 GETTIME$(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_PAGE                             = $91; $91 PAGE
=$92					KWD_RIGHTDOLLARLPAREN                = $92; $92 RIGHT$(
=$93					KWD_RNDLPAREN                        = $93; $93 RND(
=$94					KWD_SGNLPAREN                        = $94; $94 SGN(
=$95					KWD_SPCLPAREN                        = $95; $95 SPC(
=$96					KWD_STRDOLLARLPAREN                  = $96; $96 STR$(
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 34 81	jsr $8134			jsr 	NewCommand 					; erase current program
.8016	20 c3 83	jsr $83c3			jsr 	BackloadProgram
.8019	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.801b	85 30		sta $30				sta 	0+codePtr
.801d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.801f	85 31		sta $31				sta 	1+codePtr
.8021	a0 04		ldy #$04			ldy 	#4
.8023	a2 01		ldx #$01			ldx 	#1
.8025	20 86 82	jsr $8286			jsr 	EvaluateTerm
>8028	db						.byte 	$DB 						; causes a break in the emulator
.8029	a9 20		lda #$20			lda 	#$20+$00
.802b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.802e	20 3e 81	jsr $813e			jsr 	Dereference
.8031					WarmStart:
>8031	db						.byte 	$DB 						; causes a break in the emulator
.8032	80 fd		bra $8031			bra 	WarmStart
.8034					ErrorHandler:
>8034	db						.byte 	$DB 						; causes a break in the emulator
.8035	4c 34 80	jmp $8034			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.8038					VectorSetPunc:
>8038	fe 87					.word	SyntaxError                      ; $00 <<
>803a	fe 87					.word	SyntaxError                      ; $01 <=
>803c	fe 87					.word	SyntaxError                      ; $02 <>
>803e	fe 87					.word	SyntaxError                      ; $03 !!3
>8040	fe 87					.word	SyntaxError                      ; $04 ><
>8042	fe 87					.word	SyntaxError                      ; $05 >=
>8044	fe 87					.word	SyntaxError                      ; $06 >>
>8046	fe 87					.word	SyntaxError                      ; $07 !!7
>8048	fe 87					.word	SyntaxError                      ; $08 !!8
>804a	fe 87					.word	SyntaxError                      ; $09 !!9
>804c	fe 87					.word	SyntaxError                      ; $0a !!10
>804e	fe 87					.word	SyntaxError                      ; $0b !!11
>8050	fe 87					.word	SyntaxError                      ; $0c !!12
>8052	fe 87					.word	SyntaxError                      ; $0d !!13
>8054	fe 87					.word	SyntaxError                      ; $0e !!14
>8056	fe 87					.word	SyntaxError                      ; $0f !!15
>8058	fe 87					.word	SyntaxError                      ; $10 @
>805a	fe 87					.word	SyntaxError                      ; $11 !!17
>805c	fe 87					.word	SyntaxError                      ; $12 !!18
>805e	fe 87					.word	SyntaxError                      ; $13 [
>8060	fe 87					.word	SyntaxError                      ; $14 \
>8062	fe 87					.word	SyntaxError                      ; $15 ]
>8064	fe 87					.word	SyntaxError                      ; $16 ^
>8066	fe 87					.word	SyntaxError                      ; $17 _
>8068	fe 87					.word	SyntaxError                      ; $18 `
>806a	fe 87					.word	SyntaxError                      ; $19 !!25
>806c	fe 87					.word	SyntaxError                      ; $1a !!26
>806e	fe 87					.word	SyntaxError                      ; $1b {
>8070	fe 87					.word	SyntaxError                      ; $1c |
>8072	fe 87					.word	SyntaxError                      ; $1d }
>8074	fe 87					.word	SyntaxError                      ; $1e ~
>8076	fe 87					.word	SyntaxError                      ; $1f [7m<7F>[m
>8078	fe 87					.word	SyntaxError                      ; $20
>807a	fe 87					.word	SyntaxError                      ; $21 !
>807c	fe 87					.word	SyntaxError                      ; $22 "
>807e	fe 87					.word	SyntaxError                      ; $23 #
>8080	fe 87					.word	SyntaxError                      ; $24 $
>8082	fe 87					.word	SyntaxError                      ; $25 %
>8084	fe 87					.word	SyntaxError                      ; $26 &
>8086	fe 87					.word	SyntaxError                      ; $27 '
>8088	fe 87					.word	SyntaxError                      ; $28 (
>808a	fe 87					.word	SyntaxError                      ; $29 )
>808c	fe 87					.word	SyntaxError                      ; $2a *
>808e	fe 87					.word	SyntaxError                      ; $2b +
>8090	fe 87					.word	SyntaxError                      ; $2c ,
>8092	fe 87					.word	SyntaxError                      ; $2d -
>8094	fe 87					.word	SyntaxError                      ; $2e .
>8096	fe 87					.word	SyntaxError                      ; $2f /
>8098	fe 87					.word	SyntaxError                      ; $30 0
>809a	fe 87					.word	SyntaxError                      ; $31 1
>809c	fe 87					.word	SyntaxError                      ; $32 2
>809e	fe 87					.word	SyntaxError                      ; $33 3
>80a0	fe 87					.word	SyntaxError                      ; $34 4
>80a2	fe 87					.word	SyntaxError                      ; $35 5
>80a4	fe 87					.word	SyntaxError                      ; $36 6
>80a6	fe 87					.word	SyntaxError                      ; $37 7
>80a8	fe 87					.word	SyntaxError                      ; $38 8
>80aa	fe 87					.word	SyntaxError                      ; $39 9
>80ac	fe 87					.word	SyntaxError                      ; $3a :
>80ae	fe 87					.word	SyntaxError                      ; $3b ;
>80b0	fe 87					.word	SyntaxError                      ; $3c <
>80b2	fe 87					.word	SyntaxError                      ; $3d =
>80b4	fe 87					.word	SyntaxError                      ; $3e >
>80b6	fe 87					.word	SyntaxError                      ; $3f ?
.80b8					VectorSet0:
>80b8	fe 87					.word	SyntaxError                      ; $80 !0:EOF
>80ba	fe 87					.word	SyntaxError                      ; $81 !1:SH1
>80bc	fe 87					.word	SyntaxError                      ; $82 !2:SH2
>80be	fe 87					.word	SyntaxError                      ; $83 ABS(
>80c0	fe 87					.word	SyntaxError                      ; $84 ALLOC(
>80c2	fe 87					.word	SyntaxError                      ; $85 ASC(
>80c4	fe 87					.word	SyntaxError                      ; $86 CHR$(
>80c6	fe 87					.word	SyntaxError                      ; $87 DEC(
>80c8	fe 87					.word	SyntaxError                      ; $88 GETDATE$(
>80ca	fe 87					.word	SyntaxError                      ; $89 GETTIME$(
>80cc	fe 87					.word	SyntaxError                      ; $8a HEX$(
>80ce	fe 87					.word	SyntaxError                      ; $8b INT(
>80d0	fe 87					.word	SyntaxError                      ; $8c ISVAL(
>80d2	fe 87					.word	SyntaxError                      ; $8d LEFT$(
>80d4	fe 87					.word	SyntaxError                      ; $8e LEN(
>80d6	fe 87					.word	SyntaxError                      ; $8f MID$(
>80d8	fe 87					.word	SyntaxError                      ; $90 NOT
>80da	fe 87					.word	SyntaxError                      ; $91 PAGE
>80dc	fe 87					.word	SyntaxError                      ; $92 RIGHT$(
>80de	fe 87					.word	SyntaxError                      ; $93 RND(
>80e0	fe 87					.word	SyntaxError                      ; $94 SGN(
>80e2	fe 87					.word	SyntaxError                      ; $95 SPC(
>80e4	fe 87					.word	SyntaxError                      ; $96 STR$(
>80e6	fe 87					.word	SyntaxError                      ; $97 VAL(
>80e8	fe 87					.word	SyntaxError                      ; $98 FOR
>80ea	fe 87					.word	SyntaxError                      ; $99 IF
>80ec	fe 87					.word	SyntaxError                      ; $9a PROC
>80ee	fe 87					.word	SyntaxError                      ; $9b REPEAT
>80f0	fe 87					.word	SyntaxError                      ; $9c WHILE
>80f2	fe 87					.word	SyntaxError                      ; $9d ENDIF
>80f4	fe 87					.word	SyntaxError                      ; $9e ENDPROC
>80f6	fe 87					.word	SyntaxError                      ; $9f NEXT
>80f8	fe 87					.word	SyntaxError                      ; $a0 UNTIL
>80fa	fe 87					.word	SyntaxError                      ; $a1 WEND
>80fc	fe 87					.word	SyntaxError                      ; $a2 CLS
>80fe	fe 87					.word	SyntaxError                      ; $a3 DATA
>8100	fe 87					.word	SyntaxError                      ; $a4 DIM
>8102	fe 87					.word	SyntaxError                      ; $a5 GOSUB
>8104	fe 87					.word	SyntaxError                      ; $a6 GOTO
>8106	fe 87					.word	SyntaxError                      ; $a7 LET
>8108	fe 87					.word	SyntaxError                      ; $a8 PRINT
>810a	fe 87					.word	SyntaxError                      ; $a9 READ
>810c	fe 87					.word	SyntaxError                      ; $aa REM
>810e	fe 87					.word	SyntaxError                      ; $ab RETURN
>8110	fe 87					.word	SyntaxError                      ; $ac THEN
>8112	fe 87					.word	SyntaxError                      ; $ad TO
.8114					VectorSet1:
>8114	fe 87					.word	SyntaxError                      ; $80 !0:EOF
>8116	fe 87					.word	SyntaxError                      ; $81 !1:SH1
>8118	fe 87					.word	SyntaxError                      ; $82 !2:SH2
>811a	fe 87					.word	SyntaxError                      ; $83 ASSERT
>811c	fe 87					.word	SyntaxError                      ; $84 CLEAR
>811e	fe 87					.word	SyntaxError                      ; $85 END
>8120	fe 87					.word	SyntaxError                      ; $86 LIST
>8122	fe 87					.word	SyntaxError                      ; $87 NEW
>8124	fe 87					.word	SyntaxError                      ; $88 RESTORE
>8126	fe 87					.word	SyntaxError                      ; $89 RUN
>8128	fe 87					.word	SyntaxError                      ; $8a STOP
.812a					VectorSet2:
>812a	fe 87					.word	SyntaxError                      ; $80 !0:EOF
>812c	fe 87					.word	SyntaxError                      ; $81 !1:SH1
>812e	fe 87					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8130					ClearCommand:
.8130	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8131					EndCommand:
.8131	4c 31 80	jmp $8031			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8134					NewCommand:
.8134	20 70 83	jsr $8370			jsr 	MemoryNew
.8137	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.813a	20 30 81	jsr $8130			jsr 	ClearCommand 				; clear everything.
.813d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.813e					Dereference:
.813e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8141	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8143	f0 57		beq $819c			beq 	_DRFExit 					; not a reference
.8145	5a		phy				phy
.8146	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8149	85 36		sta $36				sta 	zTemp0
.814b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.814e	85 37		sta $37				sta 	zTemp0+1
.8150	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8153	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8155	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8158	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.815b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.815d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.815f	f0 0f		beq $8170			beq 	_DRFDereferenceTwo
.8161	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8163	f0 39		beq $819e			beq 	_DRFFull
.8165	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8168	29 03		and #$03			and 	#3
.816a	f0 32		beq $819e			beq 	_DRFFull 					; the whole word
.816c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.816e	f0 07		beq $8177			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8170					_DRFDereferenceTwo:
.8170	a0 01		ldy #$01			ldy 	#1
.8172	b1 36		lda ($36),y			lda 	(zTemp0),y
.8174	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8177					_DRFClear23:
.8177	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.817a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.817d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8180	29 18		and #$18			and 	#NSBTypeMask
.8182	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8185	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8187	d0 12		bne $819b			bne 	_DRFNotString
.8189	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.818c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.818f	d0 0a		bne $819b			bne 	_DRFNotString
.8191	a9 9d		lda #$9d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8193	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8196	a9 81		lda #$81			lda 	#_DRFNullString >> 8
.8198	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.819b					_DRFNotString
.819b	7a		ply				ply 								; restore Y and exit
.819c					_DRFExit:
.819c	60		rts				rts
.819d					_DRFNullString:
>819d	00						.byte 	0
.819e					_DRFFull:
.819e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.81a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.81a2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81a5	c8		iny				iny
.81a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.81a8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81ab	c8		iny				iny
.81ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.81ae	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81b1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.81b4	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.81b7	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.81b9	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.81bc	f0 06		beq $81c4			beq 	_DRFNoExponent
.81be	c8		iny				iny 								; if not, read the exponent as well.
.81bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.81c1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.81c4					_DRFNoExponent:
.81c4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.81c7	10 0d		bpl $81d6			bpl 	_DRFExit2 					; if not, then exit.
.81c9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.81cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.81d1	09 80		ora #$80			ora 	#NSBIsNegative
.81d3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.81d6					_DRFExit2:
.81d6	7a		ply				ply
.81d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.81d8					EncodeNumberStart:
.81d8	38		sec				sec
.81d9	80 01		bra $81dc			bra 	EncodeNumberContinue+1
.81db					EncodeNumberContinue:
.81db	18		clc				clc
.81dc	08		php				php 								; save reset.
.81dd	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.81df	f0 0b		beq $81ec			beq 	_ENIsOkay
.81e1	c9 30		cmp #$30			cmp 	#"0"
.81e3	90 04		bcc $81e9			bcc 	_ENBadNumber
.81e5	c9 3a		cmp #$3a			cmp 	#"9"+1
.81e7	90 03		bcc $81ec			bcc 	_ENIsOkay
.81e9					_ENBadNumber:
.81e9	28		plp				plp 								; throw saved reset
.81ea					_ENFail:
.81ea	18		clc				clc 								; not allowed
.81eb	60		rts				rts
.81ec					_ENIsOkay:
.81ec	28		plp				plp 								; are we restarting
.81ed	90 0c		bcc $81fb			bcc 	_ENNoRestart
.81ef					_ENStartEncode:
.81ef	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.81f1	20 43 83	jsr $8343			jsr 	NSMMantissaByte
.81f4	a9 01		lda #$01			lda 	#ESTA_Low
.81f6					_ENExitChange:
.81f6	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.81f9	38		sec				sec
.81fa	60		rts				rts
.81fb					_ENNoRestart:
.81fb	48		pha				pha 								; save on stack.
.81fc	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.81ff	c9 01		cmp #$01			cmp 	#ESTA_Low
.8201	f0 05		beq $8208			beq  	_ESTALowState
.8203	c9 02		cmp #$02			cmp 	#ESTA_High
.8205	f0 23		beq $822a			beq 	_ESTAHighState
>8207	db						.byte 	$DB 						; causes a break in the emulator
.8208					_ESTALowState:
.8208	68		pla				pla 								; get value back
.8209	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.820b	f0 27		beq $8234			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.820d	29 0f		and #$0f			and 	#15 						; make digit
.820f	85 36		sta $36				sta 	zTemp0 						; save it.
.8211	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8214	0a		asl a				asl 	a
.8215	0a		asl a				asl 	a
.8216	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8219	0a		asl a				asl 	a
.821a	65 36		adc $36				adc 	zTemp0
.821c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.821f	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8221	90 05		bcc $8228			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8223	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8225	8d 05 07	sta $0705			sta 	EncodeState
.8228					_ESTANoSwitch:
.8228	38		sec				sec
.8229	60		rts				rts
.822a					_ESTAHighState:
.822a	68		pla				pla 								; get value back
.822b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.822d	f0 05		beq $8234			beq 	_ESTASwitchFloat
.822f	20 35 82	jsr $8235			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8232	38		sec				sec
.8233	60		rts				rts
.8234					_ESTASwitchFloat:
>8234	db						.byte 	$DB 						; causes a break in the emulator
.8235					ESTAShiftDigitIntoMantissa:
.8235	29 0f		and #$0f			and 	#15 						; save digit
.8237	48		pha				pha
.8238	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.823b	48		pha				pha
.823c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.823f	48		pha				pha
.8240	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8243	48		pha				pha
.8244	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8247	48		pha				pha
.8248	20 56 83	jsr $8356			jsr 	NSMShiftLeft 				; x 2
.824b	20 56 83	jsr $8356			jsr 	NSMShiftLeft 				; x 4
.824e	18		clc				clc 								; pop mantissa and add
.824f	68		pla				pla
.8250	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8253	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8256	68		pla				pla
.8257	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.825a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.825d	68		pla				pla
.825e	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8261	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8264	68		pla				pla
.8265	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8268	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.826b	20 56 83	jsr $8356			jsr 	NSMShiftLeft 				; x 10
.826e	68		pla				pla 								; add digit
.826f	18		clc				clc
.8270	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8273	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8276	90 0d		bcc $8285			bcc 	_ESTASDExit
.8278	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.827b	d0 08		bne $8285			bne 	_ESTASDExit
.827d	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8280	d0 03		bne $8285			bne 	_ESTASDExit
.8282	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8285					_ESTASDExit:
.8285	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8286					EvaluateTerm:
.8286	b1 30		lda ($30),y			lda 	(codePtr),y
.8288	30 18		bmi $82a2			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.828a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.828c	b0 3f		bcs $82cd			bcs 	_ETVariable
.828e	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8290	90 3f		bcc $82d1			bcc 	_ETPuncUnary
.8292	c9 3a		cmp #$3a			cmp 	#'9'+1
.8294	b0 3b		bcs $82d1			bcs 	_ETPuncUnary
.8296	20 d8 81	jsr $81d8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8299					_ETNumber:
.8299	c8		iny				iny 								; keep encoding until we have the numbers
.829a	b1 30		lda ($30),y			lda 	(codePtr),y
.829c	20 db 81	jsr $81db			jsr 	EncodeNumberContinue
.829f	b0 f8		bcs $8299			bcs 	_ETNumber
.82a1	60		rts				rts
.82a2					_ETCheckUnary:
.82a2	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.82a4	f0 11		beq $82b7			beq 	_ETString
.82a6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.82a8	90 0a		bcc $82b4			bcc 	_ETSyntaxError
.82aa	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.82ac	b0 06		bcs $82b4			bcs 	_ETSyntaxError
.82ae	da		phx				phx 								; push X on the stack
.82af	0a		asl a				asl 	a 							; put vector x 2 into X
.82b0	aa		tax				tax
.82b1	7c b8 80	jmp ($80b8,x)			jmp 	(VectorSet0,x) 				; and do it.
.82b4					_ETSyntaxError:
.82b4	4c fe 87	jmp $87fe			jmp 	SyntaxError
.82b7					_ETString:
.82b7	c8		iny				iny 								; look at length
.82b8	b1 30		lda ($30),y			lda 	(codePtr),y
.82ba	48		pha				pha
.82bb	c8		iny				iny 								; first character
.82bc	20 ac 83	jsr $83ac			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.82bf	68		pla				pla 								; restore count and save
.82c0	85 36		sta $36				sta 	zTemp0
.82c2	98		tya				tya 								; add length to Y
.82c3	18		clc				clc
.82c4	65 36		adc $36				adc 	zTemp0
.82c6	a8		tay				tay
.82c7	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.82c9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cc	60		rts				rts
.82cd					_ETVariable:
>82cd	db						.byte 	$DB 						; causes a break in the emulator
.82ce	4c ff ff	jmp $ffff			jmp 	$FFFF
.82d1					_ETPuncUnary:
.82d1	c8		iny				iny 								; consume the unary character
.82d2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.82d4	f0 31		beq $8307			beq 	_ETUnaryNegate
.82d6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.82d8	f0 3d		beq $8317			beq 	_ETDereference
.82da	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.82dc	f0 57		beq $8335			beq 	_ETParenthesis
.82de	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.82e0	f0 42		beq $8324			beq 	_ETStringReference
.82e2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.82e4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.82e6	f0 06		beq $82ee			beq 	_ETIndirection
.82e8	e6 36		inc $36				inc 	zTemp0
.82ea	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.82ec	d0 c6		bne $82b4			bne 	_ETSyntaxError
.82ee					_ETIndirection:
.82ee	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.82f0	1a		inc a				inc 	a
.82f1	48		pha				pha
.82f2	20 86 82	jsr $8286			jsr 	EvaluateTerm				; evaluate the term
.82f5	20 3e 81	jsr $813e			jsr 	Dereference 				; dereference it.
.82f8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.82fb	d0 07		bne $8304			bne 	_ETTypeMismatch
.82fd	68		pla				pla 								; indirection 1-2
.82fe	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8300	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8303	60		rts				rts
.8304					_ETTypeMismatch:
.8304	4c 08 88	jmp $8808			jmp 	TypeError
.8307					_ETUnaryNegate:
.8307	20 86 82	jsr $8286			jsr 	EvaluateTerm				; evaluate the term
.830a	20 3e 81	jsr $813e			jsr 	Dereference 				; dereference it.
.830d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8310	29 10		and #$10			and 	#NSTString
.8312	d0 f0		bne $8304			bne 	_ETTypeMismatch
.8314	4c 38 83	jmp $8338			jmp 	NSMNegate
.8317					_ETDereference:
.8317	20 86 82	jsr $8286			jsr 	EvaluateTerm				; evaluate the term
.831a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.831d	29 20		and #$20			and 	#NSBIsReference
.831f	f0 e3		beq $8304			beq 	_ETTypeMismatch
.8321	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer
.8324					_ETStringReference:
.8324	20 86 82	jsr $8286			jsr 	EvaluateTerm				; evaluate the term
.8327	20 3e 81	jsr $813e			jsr 	Dereference 				; dereference it.
.832a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.832d	d0 d5		bne $8304			bne 	_ETTypeMismatch
.832f	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8331	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8334	60		rts				rts
.8335					_ETParenthesis:
>8335	db						.byte 	$DB 						; causes a break in the emulator
.8336	80 fd		bra $8335			bra 	_ETParenthesis

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8338					NSMNegate:
.8338	bd 00 06	lda $0600,x			lda 	NSStatus,x
.833b	49 80		eor #$80			eor 	#NSBIsNegative
.833d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8340	60		rts				rts
.8341					NSMMantissaZero:
.8341	a9 00		lda #$00			lda 	#0
.8343					NSMMantissaByte:
.8343	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8346	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8349	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.834c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.834f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8352	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8355	60		rts				rts
.8356					NSMShiftLeft:
.8356	1e 08 06	asl $0608,x			asl 	NSMantissa0,x
.8359	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.835c	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.835f	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8362	60		rts				rts
.8363					NSMShiftRight:
.8363	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8366	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8369	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.836c	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.836f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.87fe					SyntaxError:
.87fe	a9 02		lda #$02		lda	#2
.8800	4c 34 80	jmp $8034		jmp	ErrorHandler
.8803					RangeError:
.8803	a9 04		lda #$04		lda	#4
.8805	4c 34 80	jmp $8034		jmp	ErrorHandler
.8808					TypeError:
.8808	a9 05		lda #$05		lda	#5
.880a	4c 34 80	jmp $8034		jmp	ErrorHandler
.880d					ErrorText:
>880d	42 72 65 61 6b 00			.text	"Break",0
>8813	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>881b	72 72 6f 72 00
>8820	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8828	20 62 79 20 7a 65 72 6f 00
>8831	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8839	61 6e 67 65 00
>883e	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8846	6d 61 74 63 68 00
>884c	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8854	65 6d 6f 72 79 00
>885a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8862	61 72 67 75 6d 65 6e 74 00
>886b	53 74 6f 70 00				.text	"Stop",0
>8870	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8878	6f 6f 20 6c 6f 6e 67 00
>8880	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8888	6e 20 66 61 69 6c 65 64 00
>8891	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8899	61 74 61 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.8370					MemoryNew:
.8370	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8372	85 30		sta $30				sta 	codePtr
.8374	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8376	85 31		sta $31				sta 	codePtr+1
.8378	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.837a	92 30		sta ($30)			sta 	(codePtr)
.837c	60		rts				rts
.837d					MemoryAppend:
.837d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.837f	85 30		sta $30				sta 	codePtr
.8381	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8383	85 31		sta $31				sta 	codePtr+1
.8385					_MAFindEnd:
.8385	b2 30		lda ($30)			lda 	(codePtr)
.8387	f0 0d		beq $8396			beq 	_MAFoundEnd
.8389	18		clc				clc
.838a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.838c	65 30		adc $30				adc 	codePtr
.838e	85 30		sta $30				sta 	codePtr
.8390	90 02		bcc $8394			bcc 	_CREExit
.8392	e6 31		inc $31				inc 	codePtr+1
.8394					_CREExit:
.8394	80 ef		bra $8385			bra 	_MAFindEnd
.8396					_MAFoundEnd:
.8396	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8399	c0 04		cpy #$04			cpy 	#4 							; blank line
.839b	f0 0e		beq $83ab			beq 	_MANoLine
.839d	a9 00		lda #$00			lda 	#0 							; end of program
.839f	91 30		sta ($30),y			sta 	(codePtr),y
.83a1					_MACopy:
.83a1	88		dey				dey
.83a2	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.83a5	91 30		sta ($30),y			sta 	(codePtr),y
.83a7	c0 00		cpy #$00			cpy 	#0
.83a9	d0 f6		bne $83a1			bne 	_MACopy
.83ab					_MANoLine:
.83ab	60		rts				rts
.83ac					MemoryInline:
.83ac	98		tya				tya 								; put address into stack,x
.83ad	18		clc				clc
.83ae	65 30		adc $30				adc 	codePtr
.83b0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83b3	a5 31		lda $31				lda 	codePtr+1
.83b5	69 00		adc #$00			adc 	#0
.83b7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83ba	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.83bd	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.83c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.83c1					VariableOpen:
.83c1	60		rts				rts
.83c2					VariableClose:
.83c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.83c3					BackloadProgram:
.83c3	a2 ff		ldx #$ff			ldx 	#$FF
.83c5	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.83c8	30 1e		bmi $83e8			bmi 	_BPExit
.83ca					_BPCopy:
.83ca	e8		inx				inx  								; copy byte in
.83cb	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.83ce	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.83d1	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.83d4	30 0a		bmi $83e0			bmi 	_BPEndLine 					; -ve = EOL
.83d6	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.83d8	d0 02		bne $83dc			bne 	_BPNotTab
.83da	a9 20		lda #$20			lda 	#' '
.83dc					_BPNotTab:
.83dc	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83de	b0 ea		bcs $83ca			bcs 	_BPCopy
.83e0					_BPEndLine:
.83e0	20 a5 85	jsr $85a5			jsr 	TokeniseLine 				; tokenise the line.
.83e3	20 7d 83	jsr $837d			jsr 	MemoryAppend 				; append to current program
.83e6	80 db		bra $83c3			bra 	BackloadProgram
.83e8					_BPExit:
.83e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.83e9					TokeniseSearchTable:
.83e9	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.83eb	85 36		sta $36				sta 	zTemp0
.83ed	a0 00		ldy #$00			ldy 	#0
.83ef	a9 80		lda #$80			lda 	#$80 						; token #
.83f1	85 38		sta $38				sta 	zTemp1
.83f3					_TSTLoop:
.83f3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.83f5	30 49		bmi $8440			bmi 	_TSTFail 					; -ve = end of table
.83f7	f0 2e		beq $8427			beq 	_TSTNext 					; zero, check next it's a dummy
.83f9	c8		iny				iny 								; get the hash
.83fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.83fc	88		dey				dey
.83fd	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8400	d0 25		bne $8427			bne 	_TSTNext
.8402	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8405	38		sec				sec
.8406	ed 00 07	sbc $0700			sbc 	identStart
.8409	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.840b	d0 1a		bne $8427			bne 	_TSTNext
.840d	5a		phy				phy 								; save Y , we might fail
.840e	c8		iny				iny 								; point to text
.840f	c8		iny				iny
.8410	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8413					_TSTCompareName:
.8413	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.8416	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8418	d0 0c		bne $8426			bne 	_TSTNextPullY 				; fail, pullY and do next
.841a	e8		inx				inx
.841b	c8		iny				iny
.841c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.841f	d0 f2		bne $8413			bne 	_TSTCompareName
.8421	7a		ply				ply 								; throw Y
.8422	a5 38		lda $38				lda 	zTemp1 						; get token #
.8424	38		sec				sec 								; return with CS = passed.
.8425	60		rts				rts
.8426					_TSTNextPullY:
.8426	7a		ply				ply 								; restore current, fall through.
.8427					_TSTNext:
.8427	e6 38		inc $38				inc 	zTemp1 						; token counter
.8429	98		tya				tya
.842a	18		clc				clc
.842b	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.842d	1a		inc a				inc 	a 							; +1
.842e	1a		inc a				inc 	a 							; +2
.842f	a8		tay				tay
.8430	10 c1		bpl $83f3			bpl 	_TSTLoop 					; if Y < $80 loop back
.8432	98		tya				tya 								; add Y to zTemp0 and reset Y
.8433	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8435	18		clc				clc  								; but have tables > 255 bytes
.8436	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8438	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.843a	90 b7		bcc $83f3			bcc 	_TSTLoop
.843c	e6 37		inc $37				inc 	zTemp0+1
.843e	80 b3		bra $83f3			bra 	_TSTLoop
.8440					_TSTFail:
.8440	18		clc				clc
.8441	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8442					KeywordSet0:
>8442	00 65					.text	0,$65,""               ; $80 !0:EOF
>8444	00 58					.text	0,$58,""               ; $81 !1:SH1
>8446	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8448	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>844e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8456	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>845c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8463	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8469	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $88 GETDATE$(
>8471	45 24 28
>8474	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $89 GETTIME$(
>847c	45 24 28
>847f	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>8486	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>848c	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>8494	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>849c	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>84a2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>84a9	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>84ae	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $91 PAGE
>84b4	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $92 RIGHT$(
>84bc	28
>84bd	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $93 RND(
>84c3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $94 SGN(
>84c9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $95 SPC(
>84cf	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $96 STR$(
>84d6	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>84dc	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>84e1	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>84e5	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>84eb	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>84f3	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>84fa	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>8501	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>8509	43
>850a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>8510	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>8517	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>851d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>8522	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>8528	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>852d	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>8534	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>853a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>853f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>8546	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>854c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>8551	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>8559	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>855f	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>8563	ff					.text	$FF
.8564					KeywordSet1:
>8564	00 65					.text	0,$65,""               ; $80 !0:EOF
>8566	00 58					.text	0,$58,""               ; $81 !1:SH1
>8568	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>856a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8572	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8579	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>857e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8584	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8589	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8591	45
>8592	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8597	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>859d	ff					.text	$FF
.859e					KeywordSet2:
>859e	00 65					.text	0,$65,""               ; $80 !0:EOF
>85a0	00 58					.text	0,$58,""               ; $81 !1:SH1
>85a2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>85a4	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.85a5					TokeniseLine:
.85a5	20 01 87	jsr $8701			jsr 	FixLineBufferCase 			; fix line case
.85a8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.85aa	8d 06 07	sta $0706			sta 	tokenOffset
.85ad	9c 07 07	stz $0707			stz 	tokenLineNumber
.85b0	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.85b3	a2 ff		ldx #$ff			ldx 	#$FF
.85b5					_TKFindFirst:
.85b5	e8		inx				inx
.85b6	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.85b9	f0 70		beq $862b			beq 	_TKExit
.85bb	c9 20		cmp #$20			cmp 	#' '
.85bd	90 f6		bcc $85b5			bcc 	_TKFindFirst
.85bf	c9 30		cmp #$30			cmp 	#'0'
.85c1	90 07		bcc $85ca			bcc 	_TKNoLineNumber
.85c3	c9 3a		cmp #$3a			cmp 	#'9'+1
.85c5	b0 03		bcs $85ca			bcs 	_TKNoLineNumber
.85c7	20 2b 87	jsr $872b			jsr 	TokeniseExtractLineNumber
.85ca					_TKNoLineNumber:
.85ca					_TKTokeniseLoop:
.85ca	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.85cd	f0 5c		beq $862b			beq 	_TKExit
.85cf	e8		inx				inx
.85d0	c9 20		cmp #$20			cmp 	#' '
.85d2	f0 f6		beq $85ca			beq 	_TKTokeniseLoop 			; keep looping if space found.
.85d4	ca		dex				dex 								; undo last get, A contains character, X is position.
.85d5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.85d7	f0 58		beq $8631			beq 	_TKTokeniseIdentifier
.85d9	c9 41		cmp #$41			cmp 	#'A'
.85db	90 04		bcc $85e1			bcc 	_TKTokenisePunctuation
.85dd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.85df	90 50		bcc $8631			bcc 	_TKTokeniseIdentifier
.85e1					_TKTokenisePunctuation:
.85e1	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.85e3	f0 23		beq $8608			beq 	_TKString
.85e5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.85e7	f0 24		beq $860d			beq 	_TKCheckDouble
.85e9	c9 3e		cmp #$3e			cmp 	#'>'
.85eb	f0 20		beq $860d			beq 	_TKCheckDouble
.85ed					_TKStandardPunctuation:
.85ed	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.85f0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.85f2	90 0e		bcc $8602			bcc 	_TKNoShift
.85f4	48		pha				pha 								; save
.85f5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.85f7	85 36		sta $36				sta 	zTemp0
.85f9	68		pla				pla
.85fa	29 20		and #$20			and 	#32 						; bit 5
.85fc	4a		lsr a				lsr 	a 							; shift into bit 3
.85fd	4a		lsr a				lsr 	a
.85fe	05 36		ora $36				ora 	zTemp0
.8600	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8602					_TKNoShift:
.8602	20 70 87	jsr $8770			jsr 	TokeniseWriteByte 			; write the punctuation character
.8605	e8		inx				inx 								; consume the character
.8606	80 c2		bra $85ca			bra 	_TKTokeniseLoop 			; and loop round again.
.8608					_TKString:
.8608	20 b3 86	jsr $86b3			jsr 	TokeniseString
.860b	80 bd		bra $85ca			bra 	_TKTokeniseLoop
.860d					_TKCheckDouble:
.860d	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8610	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8612	90 d9		bcc $85ed			bcc 	_TKStandardPunctuation
.8614	c9 3f		cmp #$3f			cmp 	#'>'+1
.8616	b0 d5		bcs $85ed			bcs 	_TKStandardPunctuation
.8618	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.861b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.861d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.861e	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8621	38		sec				sec
.8622	e9 3c		sbc #$3c			sbc 	#'<'
.8624	20 70 87	jsr $8770			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8627	e8		inx				inx 								; consume both
.8628	e8		inx				inx
.8629	80 9f		bra $85ca			bra 	_TKTokeniseLoop
.862b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.862d	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.8630	60		rts				rts
.8631					_TKTokeniseIdentifier:
.8631	8e 00 07	stx $0700			stx 	identStart 					; save start
.8634	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8637					_TKCheckLoop:
.8637	e8		inx				inx 								; look at next, we know first is identifier.
.8638	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.863b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.863d	f0 f8		beq $8637			beq 	_TKCheckLoop
.863f	c9 30		cmp #$30			cmp	 	#"0"
.8641	90 0c		bcc $864f			bcc 	_TKEndIdentifier
.8643	c9 3a		cmp #$3a			cmp 	#"9"+1
.8645	90 f0		bcc $8637			bcc 	_TKCheckLoop
.8647	c9 41		cmp #$41			cmp	 	#"A"
.8649	90 04		bcc $864f			bcc 	_TKEndIdentifier
.864b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.864d	90 e8		bcc $8637			bcc 	_TKCheckLoop
.864f					_TKEndIdentifier:
.864f	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8652	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8654	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8656	f0 06		beq $865e			beq 	_TKHasTypeCharacter
.8658	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.865a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.865c	d0 07		bne $8665			bne 	_TKNoTypeCharacter
.865e					_TKHasTypeCharacter:
.865e	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8661	e8		inx				inx 								; read next
.8662	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8665					_TKNoTypeCharacter:
.8665	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8667	d0 09		bne $8672			bne 	_TKNoArray
.8669	e8		inx				inx 								; skip the (
.866a	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.866d	09 04		ora #$04			ora 	#$04
.866f	8d 04 07	sta $0704			sta 	identTypeByte
.8672					_TKNoArray:
.8672	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8675	20 ec 86	jsr $86ec			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8678	a0 84		ldy #$84			ldy 	#(KeywordSet0) >> 8
.867a	a9 42		lda #$42			lda 	#(KeywordSet0) & $FF
.867c	20 e9 83	jsr $83e9			jsr 	TokeniseSearchTable
.867f	a2 00		ldx #$00			ldx 	#0
.8681	b0 1f		bcs $86a2			bcs 	_TKFoundToken
.8683	a0 85		ldy #$85			ldy 	#(KeywordSet1) >> 8
.8685	a9 64		lda #$64			lda 	#(KeywordSet1) & $FF
.8687	20 e9 83	jsr $83e9			jsr 	TokeniseSearchTable
.868a	a2 81		ldx #$81			ldx 	#$81
.868c	b0 14		bcs $86a2			bcs 	_TKFoundToken
.868e	a0 85		ldy #$85			ldy 	#(KeywordSet1) >> 8
.8690	a9 64		lda #$64			lda 	#(KeywordSet1) & $FF
.8692	20 e9 83	jsr $83e9			jsr 	TokeniseSearchTable
.8695	a2 82		ldx #$82			ldx 	#$82
.8697	b0 09		bcs $86a2			bcs 	_TKFoundToken
.8699	20 7c 87	jsr $877c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.869c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.869f	4c ca 85	jmp $85ca			jmp 	_TKTokeniseLoop 			; and go round again.
.86a2					_TKFoundToken:
.86a2	48		pha				pha 								; save token
.86a3	8a		txa				txa 								; shift in X, is there one ?
.86a4	f0 03		beq $86a9			beq 	_TKNoTShift
.86a6	20 70 87	jsr $8770			jsr 	TokeniseWriteByte 			; if so, write it out
.86a9					_TKNoTShift:
.86a9	68		pla				pla 								; restore and write token
.86aa	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.86ad	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.86b0	4c ca 85	jmp $85ca			jmp 	_TKTokeniseLoop 			; and go round again.
.86b3					TokeniseString:
.86b3	e8		inx				inx									; start of quoted string.
.86b4	da		phx				phx 								; push start of string on top
.86b5	ca		dex				dex
.86b6					_TSFindEnd:
.86b6	e8		inx				inx
.86b7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.86ba	f0 04		beq $86c0			beq 	_TSEndOfString
.86bc	c9 22		cmp #$22			cmp 	#'"'
.86be	d0 f6		bne $86b6			bne 	_TSFindEnd
.86c0					_TSEndOfString:
.86c0	7a		ply				ply  								; so now Y is first character, X is character after end.
.86c1	48		pha				pha 								; save what we terminated with, so we know whether to skip.
.86c2	86 36		stx $36				stx 	zTemp0 						; save the end point.
.86c4	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.86c6	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.86c9	98		tya				tya 								; work out the string length including the EOS.
.86ca	49 ff		eor #$ff			eor 	#$FF
.86cc	38		sec				sec
.86cd	65 36		adc $36				adc 	zTemp0
.86cf	1a		inc a				inc 	a
.86d0	20 70 87	jsr $8770			jsr 	TokeniseWriteByte 			; write that length.
.86d3					_TSOutputString:
.86d3	c4 36		cpy $36				cpy 	zTemp0 						; reached the end.
.86d5	f0 09		beq $86e0			beq 	_TSEndString
.86d7	b9 06 08	lda $0806,y			lda 	lineBuffer,y 				; output one
.86da	c8		iny				iny
.86db	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.86de	80 f3		bra $86d3			bra 	_TSOutputString
.86e0					_TSEndString:
.86e0	a9 00		lda #$00			lda 	#0		 					; output EOS
.86e2	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.86e5	68		pla				pla 								; did we end in " ?
.86e6	c9 22		cmp #$22			cmp 	#'"'
.86e8	d0 01		bne $86eb			bne 	_TSNoEndQuote
.86ea	e8		inx				inx
.86eb					_TSNoEndQuote:
.86eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.86ec					TokeniseCalculateHash:
.86ec	da		phx				phx
.86ed	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.86f0	a9 00		lda #$00			lda 	#0
.86f2					_TCHLoop:
.86f2	18		clc				clc
.86f3	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.86f6	e8		inx				inx
.86f7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.86fa	d0 f6		bne $86f2			bne 	_TCHLoop
.86fc	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.86ff	fa		plx				plx
.8700	60		rts				rts
.8701					FixLineBufferCase:
.8701	a2 00		ldx #$00			ldx 	#0
.8703					_FLBCLoop:
.8703	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8706	f0 22		beq $872a			beq 	_FLBCExit 					; end of string.
.8708	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.870a	f0 11		beq $871d			beq 	_FLBCInQuotes
.870c	e8		inx				inx
.870d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.870f	90 f2		bcc $8703			bcc 	_FLBCLoop
.8711	c9 7b		cmp #$7b			cmp 	#'z'+1
.8713	b0 ee		bcs $8703			bcs 	_FLBCLoop
.8715	38		sec				sec 								; make U/C
.8716	e9 20		sbc #$20			sbc 	#32
.8718	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.871b	80 e6		bra $8703			bra 	_FLBCLoop
.871d					_FLBCInQuotes:
.871d	e8		inx				inx 								; advance
.871e	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8721	f0 07		beq $872a			beq 	_FLBCExit 					; exit on EOS
.8723	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8725	d0 f6		bne $871d			bne 	_FLBCInQuotes
.8727	e8		inx				inx 								; skip over it
.8728	80 d9		bra $8703			bra 	_FLBCLoop
.872a					_FLBCExit:
.872a	60		rts				rts
.872b					TokeniseExtractLineNumber:
.872b	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.872e	48		pha				pha
.872f	ad 07 07	lda $0707			lda 	tokenLineNumber
.8732	48		pha				pha
.8733	20 69 87	jsr $8769			jsr 	_TELNTimes2 				; line # x 4
.8736	20 69 87	jsr $8769			jsr 	_TELNTimes2 				; line # x 2
.8739	18		clc				clc 								; add stacked value
.873a	68		pla				pla
.873b	6d 07 07	adc $0707			adc 	tokenLineNumber
.873e	8d 07 07	sta $0707			sta 	tokenLineNumber
.8741	68		pla				pla
.8742	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8745	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8748	20 69 87	jsr $8769			jsr 	_TELNTimes2 				; line # x 10
.874b	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.874e	e8		inx				inx
.874f	29 0f		and #$0f			and 	#15 						; add to line #
.8751	18		clc				clc
.8752	6d 07 07	adc $0707			adc 	tokenLineNumber
.8755	8d 07 07	sta $0707			sta 	tokenLineNumber
.8758	90 03		bcc $875d			bcc 	_TLENNoCarry
.875a	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.875d					_TLENNoCarry:
.875d	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8760	c9 30		cmp #$30			cmp 	#'0'
.8762	90 04		bcc $8768			bcc 	_TLENExit
.8764	c9 3a		cmp #$3a			cmp 	#'9'+1
.8766	90 c3		bcc $872b			bcc 	TokeniseExtractLineNumber
.8768					_TLENExit:
.8768	60		rts				rts
.8769					_TELNTimes2:
.8769	0e 07 07	asl $0707			asl 	tokenLineNumber
.876c	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.876f	60		rts				rts
.8770					TokeniseWriteByte:
.8770	da		phx				phx
.8771	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8774	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8777	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.877a	fa		plx				plx
.877b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.877c					CheckCreateVariableRecord:
.877c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.877e	85 36		sta $36				sta 	0+zTemp0
.8780	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8782	85 37		sta $37				sta 	1+zTemp0
.8784	20 c1 83	jsr $83c1			jsr 	VariableOpen 				; make variable space available
.8787					_CCVSearch:
.8787	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8789	f0 2c		beq $87b7			beq 	_CCVFail
.878b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.878d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.878f	cd 03 07	cmp $0703			cmp 	identHash
.8792	d0 16		bne $87aa			bne 	_CCVNext
.8794	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8796	ae 00 07	ldx $0700			ldx 	identStart
.8799					_CCVCompare:
.8799	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.879c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.879e	e8		inx				inx 								; advance pointers
.879f	c8		iny				iny
.87a0	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.87a1	d0 07		bne $87aa			bne 	_CCVNext  					; didn't match go to next.
.87a3	90 f4		bcc $8799			bcc 	_CCVCompare 				; not finished yet.
.87a5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.87a8	f0 41		beq $87eb			beq 	_CCVFound 					; yes, we were successful
.87aa					_CCVNext:
.87aa	18		clc				clc
.87ab	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.87ad	65 36		adc $36				adc 	zTemp0
.87af	85 36		sta $36				sta 	zTemp0
.87b1	90 d4		bcc $8787			bcc 	_CCVSearch
.87b3	e6 37		inc $37				inc 	zTemp0+1
.87b5	80 d0		bra $8787			bra 	_CCVSearch
.87b7					_CCVFail:
.87b7	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.87b9	ad 03 07	lda $0703			lda 	identHash
.87bc	91 36		sta ($36),y			sta 	(zTemp0),y
.87be	c8		iny				iny 								; offset 2 is the type byte
.87bf	ad 04 07	lda $0704			lda 	identTypeByte
.87c2	91 36		sta ($36),y			sta 	(zTemp0),y
.87c4	c8		iny				iny
.87c5					_CCVData:
.87c5	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.87c7	91 36		sta ($36),y			sta 	(zTemp0),y
.87c9	c8		iny				iny
.87ca	c0 08		cpy #$08			cpy 	#8
.87cc	90 f7		bcc $87c5			bcc 	_CCVData
.87ce	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.87d1					_CCVCopyName:
.87d1	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.87d4	91 36		sta ($36),y			sta 	(zTemp0),y
.87d6	e8		inx				inx
.87d7	c8		iny				iny
.87d8	ec 02 07	cpx $0702			cpx 	identTypeEnd
.87db	d0 f4		bne $87d1			bne 	_CCVCopyName
.87dd	98		tya				tya 								; patch offset
.87de	92 36		sta ($36)			sta 	(zTemp0)
.87e0	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.87e2	91 36		sta ($36),y			sta 	(zTemp0),y
.87e4	88		dey				dey
.87e5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.87e7	09 80		ora #$80			ora 	#$80
.87e9	91 36		sta ($36),y			sta 	(zTemp0),y
.87eb					_CCVFound:
.87eb	20 c2 83	jsr $83c2			jsr 	VariableClose 				; map out variables, perhaps.
.87ee	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.87f0	38		sec				sec
.87f1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.87f3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.87f5	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.87f8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.87fa	20 70 87	jsr $8770			jsr 	TokeniseWriteByte
.87fd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
