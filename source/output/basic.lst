
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 19:28:40 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					tokenOffset:
>0713							.fill 	1
.0714					tokenLineNumber:
>0714							.fill 	2
.0716					tokenBuffer:
>0716							.fill 	253
.0813					lineBuffer:
>0813							.fill 	MaxLineSize+1
.0864					numberBuffer:
>0864							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b5 81	jsr $81b5			jsr 	NewCommand 					; erase current program
.8006	20 04 8a	jsr $8a04			jsr 	BackloadProgram
.8009	4c cc 81	jmp $81cc			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 77 8e	jsr $8e77			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	b7 82					.word	ShiftLeft                        ; $00 <<
>8016	0c 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8018	02 8f					.word	BinaryCompareNotEqual            ; $02 <>
>801a	85 94					.word	SyntaxError                      ; $03 !!3
>801c	85 94					.word	SyntaxError                      ; $04 ><
>801e	16 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	ba 82					.word	ShiftRight                       ; $06 >>
>8022	85 94					.word	SyntaxError                      ; $07 !!7
>8024	85 94					.word	SyntaxError                      ; $08 !!8
>8026	85 94					.word	SyntaxError                      ; $09 !!9
>8028	85 94					.word	SyntaxError                      ; $0a !!10
>802a	85 94					.word	SyntaxError                      ; $0b !!11
>802c	85 94					.word	SyntaxError                      ; $0c !!12
>802e	85 94					.word	SyntaxError                      ; $0d !!13
>8030	85 94					.word	SyntaxError                      ; $0e !!14
>8032	85 94					.word	SyntaxError                      ; $0f !!15
>8034	85 94					.word	SyntaxError                      ; $10 @
>8036	85 94					.word	SyntaxError                      ; $11 !!17
>8038	85 94					.word	SyntaxError                      ; $12 !!18
>803a	85 94					.word	SyntaxError                      ; $13 [
>803c	7c 8f					.word	IntegerDivide                    ; $14 \
>803e	85 94					.word	SyntaxError                      ; $15 ]
>8040	3d 84					.word	EorInteger                       ; $16 ^
>8042	85 94					.word	SyntaxError                      ; $17 _
>8044	85 94					.word	SyntaxError                      ; $18 `
>8046	85 94					.word	SyntaxError                      ; $19 !!25
>8048	85 94					.word	SyntaxError                      ; $1a !!26
>804a	85 94					.word	SyntaxError                      ; $1b {
>804c	f8 83					.word	OraInteger                       ; $1c |
>804e	85 94					.word	SyntaxError                      ; $1d }
>8050	85 94					.word	SyntaxError                      ; $1e ~
>8052	85 94					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	85 94					.word	SyntaxError                      ; $20
>8056	85 94					.word	SyntaxError                      ; $21 !
>8058	85 94					.word	SyntaxError                      ; $22 "
>805a	85 94					.word	SyntaxError                      ; $23 #
>805c	85 94					.word	SyntaxError                      ; $24 $
>805e	c8 8f					.word	IntegerModulus                   ; $25 %
>8060	b3 83					.word	AndInteger                       ; $26 &
>8062	85 94					.word	SyntaxError                      ; $27 '
>8064	85 94					.word	SyntaxError                      ; $28 (
>8066	85 94					.word	SyntaxError                      ; $29 )
>8068	3c 90					.word	MulInteger                       ; $2a *
>806a	4d 83					.word	AddInteger                       ; $2b +
>806c	85 94					.word	SyntaxError                      ; $2c ,
>806e	88 83					.word	SubInteger                       ; $2d -
>8070	85 94					.word	SyntaxError                      ; $2e .
>8072	d3 91					.word	FDivideCommand                   ; $2f /
>8074	85 94					.word	SyntaxError                      ; $30 0
>8076	85 94					.word	SyntaxError                      ; $31 1
>8078	85 94					.word	SyntaxError                      ; $32 2
>807a	85 94					.word	SyntaxError                      ; $33 3
>807c	85 94					.word	SyntaxError                      ; $34 4
>807e	85 94					.word	SyntaxError                      ; $35 5
>8080	85 94					.word	SyntaxError                      ; $36 6
>8082	85 94					.word	SyntaxError                      ; $37 7
>8084	85 94					.word	SyntaxError                      ; $38 8
>8086	85 94					.word	SyntaxError                      ; $39 9
>8088	85 94					.word	SyntaxError                      ; $3a :
>808a	85 94					.word	SyntaxError                      ; $3b ;
>808c	ee 8e					.word	BinaryCompareLess                ; $3c <
>808e	e4 8e					.word	BinaryCompareEqual               ; $3d =
>8090	f8 8e					.word	BinaryCompareGreater             ; $3e >
>8092	85 94					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	06 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	13 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	85 94					.word	SyntaxError                      ; $82 !2:SH2
>809a	19 93					.word	AbsUnary                         ; $83 ABS(
>809c	a9 87					.word	AllocUnary                       ; $84 ALLOC(
>809e	29 93					.word	AscUnary                         ; $85 ASC(
>80a0	46 88					.word	ChrUnary                         ; $86 CHR$(
>80a2	e0 8e					.word	UnaryFalse                       ; $87 FALSE
>80a4	36 93					.word	FracUnary                        ; $88 FRAC(
>80a6	4c 93					.word	IntUnary                         ; $89 INT(
>80a8	a2 93					.word	IsValUnary                       ; $8a ISVAL(
>80aa	73 88					.word	Unary_Left                       ; $8b LEFT$(
>80ac	5e 93					.word	LenUnary                         ; $8c LEN(
>80ae	9d 88					.word	Unary_Mid                        ; $8d MID$(
>80b0	e3 87					.word	Unary_Not                        ; $8e NOT(
>80b2	83 88					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	f9 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	78 93					.word	SgnUnary                         ; $91 SGN(
>80b8	58 88					.word	SpcUnary                         ; $92 SPC(
>80ba	85 94					.word	SyntaxError                      ; $93 STR$(
>80bc	d4 8e					.word	UnaryTrue                        ; $94 TRUE
>80be	98 93					.word	ValUnary                         ; $95 VAL(
>80c0	85 94					.word	SyntaxError                      ; $96 FOR
>80c2	85 94					.word	SyntaxError                      ; $97 IF
>80c4	85 94					.word	SyntaxError                      ; $98 PROC
>80c6	85 94					.word	SyntaxError                      ; $99 REPEAT
>80c8	85 94					.word	SyntaxError                      ; $9a WHILE
>80ca	85 94					.word	SyntaxError                      ; $9b ENDIF
>80cc	85 94					.word	SyntaxError                      ; $9c ENDPROC
>80ce	85 94					.word	SyntaxError                      ; $9d NEXT
>80d0	85 94					.word	SyntaxError                      ; $9e UNTIL
>80d2	85 94					.word	SyntaxError                      ; $9f WEND
>80d4	6d 81					.word	CallCommand                      ; $a0 CALL
>80d6	85 94					.word	SyntaxError                      ; $a1 CLS
>80d8	85 94					.word	SyntaxError                      ; $a2 DATA
>80da	85 94					.word	SyntaxError                      ; $a3 DIM
>80dc	85 94					.word	SyntaxError                      ; $a4 GOSUB
>80de	85 94					.word	SyntaxError                      ; $a5 GOTO
>80e0	85 94					.word	SyntaxError                      ; $a6 LET
>80e2	85 94					.word	SyntaxError                      ; $a7 PRINT
>80e4	85 94					.word	SyntaxError                      ; $a8 READ
>80e6	bf 81					.word	RemCommand                       ; $a9 REM
>80e8	85 94					.word	SyntaxError                      ; $aa RETURN
>80ea	85 94					.word	SyntaxError                      ; $ab THEN
>80ec	85 94					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	85 94					.word	SyntaxError                      ; $80 !0:EOF
>80f0	85 94					.word	SyntaxError                      ; $81 !1:SH1
>80f2	85 94					.word	SyntaxError                      ; $82 !2:SH2
>80f4	5d 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	7b 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	b2 81					.word	EndCommand                       ; $85 END
>80fa	85 94					.word	SyntaxError                      ; $86 LIST
>80fc	b5 81					.word	NewCommand                       ; $87 NEW
>80fe	85 94					.word	SyntaxError                      ; $88 RESTORE
>8100	cc 81					.word	CommandRUN                       ; $89 RUN
>8102	85 94					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	85 94					.word	SyntaxError                      ; $80 !0:EOF
>8106	85 94					.word	SyntaxError                      ; $81 !1:SH1
>8108	85 94					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/memory.asm

.8e71					MemoryPeek:
.8e71	b2 36		lda ($36)			lda 	(zTemp0)
.8e73	60		rts				rts
.8e74					MemoryPoke:
.8e74	92 36		sta ($36)			sta 	(zTemp0)
.8e76	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/vectors.asm

.8e77					EXTPrintCharacter:
.8e77	48		pha				pha
.8e78	da		phx				phx
.8e79	5a		phy				phy
.8e7a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.8e7d	7a		ply				ply
.8e7e	fa		plx				plx
.8e7f	68		pla				pla
.8e80	60		rts				rts
.8e81					EXTInputSingleCharacter:
.8e81	da		phx				phx
.8e82	5a		phy				phy
.8e83					_EISCWait:
.8e83	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.8e86	c9 00		cmp #$00			cmp 	#0
.8e88	f0 f9		beq $8e83			beq 	_EISCWait
.8e8a	7a		ply				ply
.8e8b	fa		plx				plx
.8e8c	60		rts				rts
.8e8d					EXTInputLine:
.8e8d	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.8e8f					_ILLoop:
.8e8f	da		phx				phx 								; read character in
.8e90	20 cf ff	jsr $ffcf			jsr 	$FFCF
.8e93	fa		plx				plx
.8e94	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.8e96	f0 12		beq $8eaa			beq 	_ILBackspace
.8e98	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.8e9a	f0 15		beq $8eb1			beq 	_ILExit
.8e9c	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.8e9e	90 ef		bcc $8e8f			bcc 	_ILLoop
.8ea0	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.8ea2	f0 eb		beq $8e8f			beq 	_ILLoop
.8ea4	9d 13 08	sta $0813,x			sta 	lineBuffer,x 				; save it
.8ea7	e8		inx				inx
.8ea8	80 e5		bra $8e8f			bra 	_ILLoop
.8eaa					_ILBackspace:
.8eaa	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.8eac	f0 e1		beq $8e8f			beq 	_ILLoop
.8eae	ca		dex				dex 								; back one.
.8eaf	80 de		bra $8e8f			bra 	_ILLoop
.8eb1					_ILExit:
.8eb1	20 77 8e	jsr $8e77			jsr 	EXTPrintCharacter
.8eb4	9e 13 08	stz $0813,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.8eb7	60		rts				rts
.8eb8					EXTBreakCheck:
.8eb8	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/memory.asm

.810a					MemoryNew:
.810a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.810c	85 30		sta $30				sta 	codePtr
.810e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8110	85 31		sta $31				sta 	codePtr+1
.8112	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8114	92 30		sta ($30)			sta 	(codePtr)
.8116	60		rts				rts
.8117					MemoryAppend:
.8117	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8119	85 30		sta $30				sta 	codePtr
.811b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.811d	85 31		sta $31				sta 	codePtr+1
.811f					_MAFindEnd:
.811f	b2 30		lda ($30)			lda 	(codePtr)
.8121	f0 0d		beq $8130			beq 	_MAFoundEnd
.8123	18		clc				clc
.8124	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8126	65 30		adc $30				adc 	codePtr
.8128	85 30		sta $30				sta 	codePtr
.812a	90 02		bcc $812e			bcc 	_CREExit
.812c	e6 31		inc $31				inc 	codePtr+1
.812e					_CREExit:
.812e	80 ef		bra $811f			bra 	_MAFindEnd
.8130					_MAFoundEnd:
.8130	ac 13 07	ldy $0713			ldy 	tokenOffset 				; bytes to copy
.8133	c0 04		cpy #$04			cpy 	#4 							; blank line
.8135	f0 0e		beq $8145			beq 	_MANoLine
.8137	a9 00		lda #$00			lda 	#0 							; end of program
.8139	91 30		sta ($30),y			sta 	(codePtr),y
.813b					_MACopy:
.813b	88		dey				dey
.813c	b9 13 07	lda $0713,y			lda 	tokenOffset,y
.813f	91 30		sta ($30),y			sta 	(codePtr),y
.8141	c0 00		cpy #$00			cpy 	#0
.8143	d0 f6		bne $813b			bne 	_MACopy
.8145					_MANoLine:
.8145	60		rts				rts
.8146					MemoryInline:
.8146	98		tya				tya 								; put address into stack,x
.8147	18		clc				clc
.8148	65 30		adc $30				adc 	codePtr
.814a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814d	a5 31		lda $31				lda 	codePtr+1
.814f	69 00		adc #$00			adc 	#0
.8151	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8154	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8157	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/variable.asm

.815b					VariableOpen:
.815b	60		rts				rts
.815c					VariableClose:
.815c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/assert.asm

.815d					AssertCommand:
.815d	a2 00		ldx #$00			ldx 	#0
.815f	20 3e 89	jsr $893e			jsr 	EvaluateInteger 			; the assert test
.8162	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; exit if result is non zero.
.8165	d0 05		bne $816c			bne 	_ACExit
.8167	a9 0a		lda #$0a		lda	#10
.8169	4c 1b 82	jmp $821b		jmp	ErrorHandler
.816c					_ACExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/call.asm

.816d					CallCommand:
.816d	a2 00		ldx #$00			ldx 	#0
.816f	20 53 89	jsr $8953			jsr 	Evaluate16BitInteger
.8172	ad 10 06	lda $0610			lda 	NSMantissa1
.8175	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8178	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/clear.asm

.817b					ClearCommand:
.817b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.817d	85 36		sta $36				sta 	0+zTemp0
.817f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8181	85 37		sta $37				sta 	1+zTemp0
.8183					_ClearZeroLoop:
.8183	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8185	f0 18		beq $819f			beq 	_ClearZeroEnd
.8187	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8189	a9 00		lda #$00			lda 	#0
.818b					_ClearOneVariable:
.818b	91 36		sta ($36),y			sta 	(zTemp0),y
.818d	c8		iny				iny
.818e	c0 08		cpy #$08			cpy 	#8
.8190	d0 f9		bne $818b			bne 	_ClearOneVariable
.8192	18		clc				clc 								; go to the next variable
.8193	b2 36		lda ($36)			lda 	(zTemp0)
.8195	65 36		adc $36				adc 	zTemp0
.8197	85 36		sta $36				sta 	zTemp0
.8199	90 e8		bcc $8183			bcc 	_ClearZeroLoop
.819b	e6 37		inc $37				inc 	zTemp0+1
.819d	80 e4		bra $8183			bra 	_ClearZeroLoop
.819f					_ClearZeroEnd:
.819f	18		clc				clc
.81a0	a5 36		lda $36				lda 	zTemp0
.81a2	69 01		adc #$01			adc 	#1
.81a4	8d 0c 07	sta $070c			sta 	lowMemPtr
.81a7	a5 37		lda $37				lda 	zTemp0+1
.81a9	69 00		adc #$00			adc 	#0
.81ab	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81ae	20 e3 93	jsr $93e3			jsr 	StringSystemInitialise
.81b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/end.asm

.81b2					EndCommand:
.81b2	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/new.asm

.81b5					NewCommand:
.81b5	20 0a 81	jsr $810a			jsr 	MemoryNew
.81b8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81bb	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear everything.
.81be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/rem.asm

.81bf					RemCommand:
.81bf	b1 30		lda ($30),y			lda 	(codePtr),y
.81c1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81c3	d0 06		bne $81cb			bne 	_RMExit
.81c5	c8		iny				iny
.81c6	98		tya				tya
.81c7	38		sec				sec
.81c8	71 30		adc ($30),y			adc 	(codePtr),y
.81ca	a8		tay				tay
.81cb					_RMExit:
.81cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/run.asm

.81cc					CommandRUN:
.81cc	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.81cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.81d1	85 30		sta $30				sta 	codePtr
.81d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.81d5	85 31		sta $31				sta 	codePtr+1
.81d7					RUNNewLine:
.81d7	b2 30		lda ($30)			lda 	(codePtr)
.81d9	f0 28		beq $8203			beq 	CRNoProgram         		; no then END.
.81db	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.81dd	9a		txs				txs
.81de					RUNCodePointerLine:
.81de	a0 02		ldy #$02			ldy 	#2 							; start of program
.81e0					_CRIncMainLoop:
.81e0	c8		iny				iny
.81e1					_CRMainLoop:
.81e1	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.81e4	b1 30		lda ($30),y			lda 	(codePtr),y
.81e6	10 10		bpl $81f8			bpl 	_CRNotKeyword
.81e8	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.81ea	b0 04		bcs $81f0			bcs 	_CRIsKeyword
.81ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.81ee	b0 0d		bcs $81fd			bcs		_CRSyntaxError
.81f0					_CRIsKeyword:
.81f0	c8		iny				iny 								; consume command
.81f1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81f2	aa		tax				tax 								; put in X for vector jump
.81f3	20 00 82	jsr $8200			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81f6	80 e9		bra $81e1			bra 	_CRMainLoop 				; and loop round
.81f8					_CRNotKeyword:
.81f8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81fa	f0 e4		beq $81e0			beq 	_CRIncMainLoop
>81fc	db						.byte 	$DB 						; causes a break in the emulator
.81fd					_CRSyntaxError:
.81fd	4c 85 94	jmp $9485			jmp 	SyntaxError
.8200					_CRCallVector0:
.8200	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8203					CRNoProgram:
.8203	4c b2 81	jmp $81b2			jmp 	EndCommand
.8206					EOLCommand:
.8206	18		clc				clc
.8207	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8209	65 30		adc $30				adc 	codePtr
.820b	85 30		sta $30				sta 	codePtr
.820d	90 02		bcc $8211			bcc 	_CREExit
.820f	e6 31		inc $31				inc 	codePtr+1
.8211					_CREExit:
.8211	80 c4		bra $81d7			bra 	RunNewLine
.8213					Shift1Command:
.8213	b1 30		lda ($30),y			lda 	(codePtr),y
.8215	c8		iny				iny
.8216	0a		asl a				asl 	a
.8217	aa		tax				tax
.8218	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/charcheck.asm

.8ebb					CheckRightBracket:
.8ebb	b1 30		lda ($30),y			lda 	(codePtr),y
.8ebd	c8		iny				iny
.8ebe	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8ec0	d0 0f		bne $8ed1			bne 	CNAFail
.8ec2	60		rts				rts
.8ec3					CheckComma:
.8ec3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec5	c8		iny				iny
.8ec6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8ec8	d0 07		bne $8ed1			bne 	CNAFail
.8eca	60		rts				rts
.8ecb					CheckNextA:
.8ecb	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8ecd	d0 02		bne $8ed1			bne 	CNAFail
.8ecf	c8		iny				iny 								; skip character
.8ed0	60		rts				rts 								; and exit
.8ed1					CNAFail:
.8ed1	4c 85 94	jmp $9485			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/errors.asm

.821b					ErrorHandler:
.821b	a8		tay				tay 								; find the error text
.821c	f0 42		beq $8260			beq 	_EHEnd
.821e	a2 00		ldx #$00			ldx 	#0
.8220					_EHFind:
.8220	88		dey				dey 								; found the error text ?
.8221	f0 0a		beq $822d			beq 	_EHFound
.8223					_EHFindZero:
.8223	bd 9e 94	lda $949e,x			lda 	ErrorText,x 				; find the next error
.8226	e8		inx				inx
.8227	c9 00		cmp #$00			cmp 	#0
.8229	d0 f8		bne $8223			bne 	_EHFindZero
.822b	80 f3		bra $8220			bra 	_EHFind
.822d					_EHFound:
.822d	bd 9e 94	lda $949e,x			lda 	ErrorText,x 				; print the message
.8230	20 77 8e	jsr $8e77			jsr 	EXTPrintCharacter
.8233	e8		inx				inx
.8234	bd 9e 94	lda $949e,x			lda 	ErrorText,x
.8237	d0 f4		bne $822d			bne 	_EHFound
.8239	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.823b	b1 30		lda ($30),y			lda 	(codePtr),y
.823d	d0 05		bne $8244			bne 	_EHAtMsg
.823f	c8		iny				iny
.8240	b1 30		lda ($30),y			lda 	(codePtr),y
.8242	f0 17		beq $825b			beq 	_EHCREnd
.8244					_EHAtMsg:
.8244	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8246	a9 63		lda #$63			lda 	#_AtMsg & $FF
.8248	20 6d 82	jsr $826d			jsr 	PrintStringXA
.824b	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	48		pha				pha
.8250	c8		iny				iny
.8251	b1 30		lda ($30),y			lda 	(codePtr),y
.8253	aa		tax				tax
.8254	68		pla				pla
.8255	20 bd 90	jsr $90bd			jsr 	ConvertInt16 				; convert XA to string
.8258	20 6d 82	jsr $826d			jsr 	PrintStringXA 				; and print it.
.825b					_EHCREnd:
.825b	a9 0d		lda #$0d			lda 	#13 						; new line
.825d	20 77 8e	jsr $8e77			jsr 	EXTPrintCharacter
.8260					_EHEnd:
.8260	4c 0c 80	jmp $800c			jmp 	WarmStart
>8263	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>826b	20 00
.826d					PrintStringXA:
.826d	86 37		stx $37				stx 	zTemp0+1
.826f	85 36		sta $36				sta 	zTemp0
.8271	a0 00		ldy #$00			ldy 	#0
.8273					_PSXALoop:
.8273	b1 36		lda ($36),y			lda 	(zTemp0),y
.8275	f0 06		beq $827d			beq 	_PSXAExit
.8277	20 77 8e	jsr $8e77			jsr 	EXTPrintCharacter
.827a	c8		iny				iny
.827b	80 f6		bra $8273			bra 	_PSXALoop
.827d					_PSXAExit:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/compare.asm

.8ed4					UnaryTrue:
.8ed4	fa		plx				plx
.8ed5					ReturnTrue:
.8ed5	a9 01		lda #$01			lda 	#1  						; set to 1
.8ed7	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.8eda	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8edc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8edf	60		rts				rts
.8ee0					UnaryFalse:
.8ee0	fa		plx				plx
.8ee1					ReturnFalse:
.8ee1	4c c7 89	jmp $89c7			jmp 	NSMSetZero 					; set it all to zero
.8ee4					BinaryCompareEqual:
.8ee4	fa		plx				plx
.8ee5	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8ee8	c9 00		cmp #$00			cmp 	#0
.8eea	f0 e9		beq $8ed5			beq 	ReturnTrue
.8eec	80 f3		bra $8ee1			bra 	ReturnFalse
.8eee					BinaryCompareLess:
.8eee	fa		plx				plx
.8eef	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8ef2	c9 ff		cmp #$ff			cmp 	#$FF
.8ef4	f0 df		beq $8ed5			beq 	ReturnTrue
.8ef6	80 e9		bra $8ee1			bra 	ReturnFalse
.8ef8					BinaryCompareGreater:
.8ef8	fa		plx				plx
.8ef9	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8efc	c9 01		cmp #$01			cmp 	#1
.8efe	f0 d5		beq $8ed5			beq 	ReturnTrue
.8f00	80 df		bra $8ee1			bra 	ReturnFalse
.8f02					BinaryCompareNotEqual:
.8f02	fa		plx				plx
.8f03	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8f06	c9 00		cmp #$00			cmp 	#0
.8f08	d0 cb		bne $8ed5			bne 	ReturnTrue
.8f0a	80 d5		bra $8ee1			bra 	ReturnFalse
.8f0c					BinaryCompareLessEqual:
.8f0c	fa		plx				plx
.8f0d	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8f10	c9 01		cmp #$01			cmp 	#1
.8f12	d0 c1		bne $8ed5			bne 	ReturnTrue
.8f14	80 cb		bra $8ee1			bra 	ReturnFalse
.8f16					BinaryCompareGreaterEqual:
.8f16	fa		plx				plx
.8f17	20 20 8f	jsr $8f20			jsr 	CompareBaseCode
.8f1a	c9 ff		cmp #$ff			cmp 	#$FF
.8f1c	d0 b7		bne $8ed5			bne 	ReturnTrue
.8f1e	80 c1		bra $8ee1			bra 	ReturnFalse
.8f20					CompareBaseCode:
.8f20	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; make both values if references.
.8f23	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8f26	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f29	29 10		and #$10			and 	#NSTString
.8f2b	d0 40		bne $8f6d			bne 	_CBCString
.8f2d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8f30	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f33	d0 3b		bne $8f70			bne 	_CBCFloat
.8f35	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f38	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f3b	29 08		and #$08			and 	#NSTFloat
.8f3d	d0 31		bne $8f70			bne 	_CBCFloat
.8f3f	20 73 8f	jsr $8f73			jsr 	CompareFixMinusZero
.8f42	e8		inx				inx
.8f43	20 73 8f	jsr $8f73			jsr 	CompareFixMinusZero
.8f46	ca		dex				dex
.8f47	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8f4a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f4d	10 0b		bpl $8f5a			bpl 	_CDCSameSign
.8f4f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8f52	30 16		bmi $8f6a			bmi 	_CBCLess 					; return $FF
.8f54					_CBCGreater:
.8f54	a9 01		lda #$01			lda 	#1
.8f56	60		rts				rts
.8f57					_CBCEqual:
.8f57	a9 00		lda #$00			lda 	#0
.8f59	60		rts				rts
.8f5a					_CDCSameSign:
.8f5a	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; unsigned subtract
.8f5d	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; or the mantissa together
.8f60	f0 f5		beq $8f57			beq 	_CBCEqual 					; -0 == 0
.8f62	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8f65	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8f68	10 ea		bpl $8f54			bpl 	_CBCGreater
.8f6a					_CBCLess:
.8f6a	a9 ff		lda #$ff			lda 	#$FF
.8f6c	60		rts				rts
.8f6d					_CBCString:
.8f6d	4c 7e 82	jmp $827e			jmp 	CompareStrings
.8f70					_CBCFloat:
.8f70	4c b9 91	jmp $91b9			jmp 	CompareFloat
.8f73					CompareFixMinusZero:
.8f73	20 f7 89	jsr $89f7			jsr 	NSMIsZero
.8f76	d0 03		bne $8f7b			bne 	_CFXMZNotZero
.8f78	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8f7b					_CFXMZNotZero:
.8f7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/divide.asm

.8f7c					IntegerDivide:
.8f7c	fa		plx				plx
.8f7d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f80	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f83	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f84	0a		asl a				asl 	a
.8f85	10 05		bpl $8f8c			bpl 	_NotRef
.8f87	48		pha				pha
.8f88	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f8b	68		pla				pla
.8f8c					_NotRef:
.8f8c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f8e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f91	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f94	f0 03		beq $8f99			beq 	_IntegerCode 				; if clear, then we have two integers
.8f96	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.8f99					_IntegerCode:
.8f99	20 bb 8f	jsr $8fbb			jsr 	CheckDivideZero 			; do div zero check
.8f9c	20 f2 8f	jsr $8ff2			jsr 	Int32Divide 				; do the division
.8f9f	20 af 90	jsr $90af			jsr 	CalculateSign 				; calculate result sign
.8fa2					NSMCopyPlusTwoToZero:
.8fa2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8fa5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fa8	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8fab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fae	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8fb1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fb4	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8fb7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fba	60		rts				rts
.8fbb					CheckDivideZero:
.8fbb	e8		inx				inx
.8fbc	20 f7 89	jsr $89f7			jsr 	NSMIsZero
.8fbf	f0 02		beq $8fc3			beq 	_CDVError
.8fc1	ca		dex				dex
.8fc2	60		rts				rts
.8fc3					_CDVError:
.8fc3	a9 03		lda #$03		lda	#3
.8fc5	4c 1b 82	jmp $821b		jmp	ErrorHandler
.8fc8					IntegerModulus:
.8fc8	fa		plx				plx
.8fc9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fcc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fcf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fd0	0a		asl a				asl 	a
.8fd1	10 05		bpl $8fd8			bpl 	_NotRef
.8fd3	48		pha				pha
.8fd4	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fd7	68		pla				pla
.8fd8					_NotRef:
.8fd8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fda	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fdd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fe0	f0 03		beq $8fe5			beq 	_IntegerCode 				; if clear, then we have two integers
.8fe2	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.8fe5					_IntegerCode:
.8fe5	20 bb 8f	jsr $8fbb			jsr 	CheckDivideZero 			; do div zero check
.8fe8	20 f2 8f	jsr $8ff2			jsr 	Int32Divide 				; do the division
.8feb	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8fee	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8ff1	60		rts				rts
.8ff2					Int32Divide:
.8ff2	48		pha				pha 								; save AXY
.8ff3	5a		phy				phy
.8ff4	20 9e 89	jsr $899e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ff7	20 c3 89	jsr $89c3			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8ffa	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8ffc					_I32DivideLoop:
.8ffc	e8		inx				inx
.8ffd	e8		inx				inx
.8ffe	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9001	ca		dex				dex
.9002	ca		dex				dex
.9003	20 dd 89	jsr $89dd			jsr 	NSMRotateLeft
.9006	20 32 90	jsr $9032			jsr 	DivideCheckSubtract 		; check if subtract possible
.9009	90 03		bcc $900e			bcc 	_I32DivideNoCarryIn
.900b	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.900e					_I32DivideNoCarryIn:
.900e	88		dey				dey 								; loop round till division completed.
.900f	d0 eb		bne $8ffc			bne 	_I32DivideLoop
.9011	7a		ply				ply 								; restore AXY and exit
.9012	68		pla				pla
.9013	60		rts				rts
.9014					Int32ShiftDivide:
.9014	48		pha				pha 								; save AY
.9015	5a		phy				phy
.9016	e8		inx				inx 								; clear S[X+2]
.9017	e8		inx				inx
.9018	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.901b	ca		dex				dex
.901c	ca		dex				dex
.901d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.901f					_I32SDLoop:
.901f	20 32 90	jsr $9032			jsr 	DivideCheckSubtract 		; check if subtract possible
.9022	e8		inx				inx
.9023	e8		inx				inx
.9024	20 dd 89	jsr $89dd			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9027	ca		dex				dex
.9028	ca		dex				dex
.9029	20 dd 89	jsr $89dd			jsr 	NSMRotateLeft
.902c	88		dey				dey 	 							; do 31 times
.902d	d0 f0		bne $901f			bne 	_I32SDLoop
.902f	7a		ply				ply 								; restore AY and exit
.9030	68		pla				pla
.9031	60		rts				rts
.9032					DivideCheckSubtract:
.9032	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9035	b0 04		bcs $903b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9037	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; add it back in
.903a	18		clc				clc 								; and return False
.903b					_DCSExit:
.903b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/multiply.asm

.903c					MulInteger:
.903c	fa		plx				plx
.903d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9040	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9043	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9044	0a		asl a				asl 	a
.9045	10 05		bpl $904c			bpl 	_NotRef
.9047	48		pha				pha
.9048	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.904b	68		pla				pla
.904c					_NotRef:
.904c	0a		asl a				asl 	a 							; put MSB of type into A:7
.904d	30 0b		bmi $905a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.904f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9052	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9055	f0 06		beq $905d			beq 	_IntegerCode 				; if clear, then we have two integers
.9057	4c 90 92	jmp $9290			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.905a					_StringData:
.905a	4c 99 94	jmp $9499			jmp 	NotDoneError							; at least one string - don't know both are strings.
.905d					_IntegerCode:
.905d	20 6a 90	jsr $906a			jsr 	MultiplyShort
.9060	c9 00		cmp #$00			cmp 	#0
.9062	f0 05		beq $9069			beq 	_MIExit
.9064	a9 04		lda #$04		lda	#4
.9066	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9069					_MIExit:
.9069	60		rts				rts
.906a					MultiplyShort:
.906a	5a		phy				phy 								; save Y
.906b	20 9e 89	jsr $899e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.906e	20 c3 89	jsr $89c3			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9071	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9073					_I32MLoop:
.9073	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9076	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9079	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.907c	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.907f	f0 28		beq $90a9			beq 	_I32MExit 					; exit if zero
.9081	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9084	29 01		and #$01			and 	#1
.9086	f0 0e		beq $9096			beq 	_I32MNoAdd
.9088	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.908b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.908e	10 06		bpl $9096			bpl 	_I32MNoAdd
.9090					_I32ShiftRight:
.9090	20 ea 89	jsr $89ea			jsr 	NSMShiftRight 				; shift S[X] right
.9093	c8		iny				iny 								; increment shift count
.9094	80 0a		bra $90a0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9096					_I32MNoAdd:
.9096	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9099	70 f5		bvs $9090			bvs 	_I32ShiftRight 				; instead.
.909b	e8		inx				inx
.909c	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.909f	ca		dex				dex
.90a0					_I32MShiftUpper:
.90a0	e8		inx				inx 								; shift S[X+2] right
.90a1	e8		inx				inx
.90a2	20 ea 89	jsr $89ea			jsr 	NSMShiftRight
.90a5	ca		dex				dex
.90a6	ca		dex				dex
.90a7	80 ca		bra $9073			bra 	_I32MLoop 					; try again.
.90a9					_I32MExit:
.90a9	20 af 90	jsr $90af			jsr 	CalculateSign
.90ac	98		tya				tya 								; shift in A
.90ad	7a		ply				ply 								; restore Y and exit
.90ae	60		rts				rts
.90af					CalculateSign:
.90af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.90b2	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.90b5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.90b8	0a		asl a				asl 	a 							; shift bit 7 into carry
.90b9	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.90bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/scompare.asm

.827e					CompareStrings:
.827e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8281	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8284	29 10		and #$10			and 	#NSBIsString
.8286	f0 2c		beq $82b4			beq 	_CSTypeError
.8288	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.828b	85 36		sta $36				sta 	zTemp0
.828d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8290	85 37		sta $37				sta 	zTemp0+1
.8292	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8295	85 38		sta $38				sta 	zTemp1
.8297	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.829a	85 39		sta $39				sta 	zTemp1+1
.829c	5a		phy				phy 								; save Y so we can access strings
.829d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.829f					_CSLoop:
.829f	c8		iny				iny
.82a0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.82a2	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.82a4	d0 06		bne $82ac			bne 	_CSDifferent
.82a6	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.82a8	d0 f5		bne $829f			bne 	_CSLoop 					; still comparing
.82aa					_CSExit:
.82aa	7a		ply				ply 								; reached end, return zero in A from EOS
.82ab	60		rts				rts
.82ac					_CSDifferent:
.82ac	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.82ae	90 fa		bcc $82aa			bcc		_CSExit
.82b0	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.82b2	80 f6		bra $82aa			bra 	_CSExit
.82b4					_CSTypeError:
.82b4	4c 8f 94	jmp $948f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/shifts.asm

.82b7					ShiftLeft:
.82b7	38		sec				sec
.82b8	80 01		bra $82bb			bra 	ShiftMain
.82ba					ShiftRight:
.82ba	18		clc				clc
.82bb					ShiftMain:
.82bb	fa		plx				plx 								; restore X
.82bc	08		php				php 								; save direction
.82bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82c4	0a		asl a				asl 	a
.82c5	10 05		bpl $82cc			bpl 	_NotRef
.82c7	48		pha				pha
.82c8	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82cb	68		pla				pla
.82cc					_NotRef:
.82cc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82ce	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82d1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82d4	f0 03		beq $82d9			beq 	_IntegerCode 				; if clear, then we have two integers
.82d6	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.82d9					_IntegerCode:
.82d9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.82dc	29 e0		and #$e0			and 	#$E0
.82de	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.82e1	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.82e4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.82e7	d0 13		bne $82fc			bne 	_SMExit0 					; if >= 32 it will always return zero.
.82e9					_SMLoop:
.82e9	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.82ec	30 11		bmi $82ff			bmi 	_SMExit 					; exit if done.
.82ee	28		plp				plp 								; restore direcition setting
.82ef	08		php				php
.82f0	90 05		bcc $82f7			bcc 	_SMRight
.82f2	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; shift left if CS
.82f5	80 f2		bra $82e9			bra 	_SMLoop
.82f7					_SMRight:
.82f7	20 ea 89	jsr $89ea			jsr 	NSMShiftRight 				; shift right if CC
.82fa	80 ed		bra $82e9			bra 	_SMLoop
.82fc					_SMExit0:
.82fc	20 c7 89	jsr $89c7			jsr 	NSMSetZero 					; return zero.
.82ff					_SMExit:
.82ff	28		plp				plp 								; throw direction
.8300	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/simple.asm

.8301					AddTopTwoStack:
.8301	18		clc				clc
.8302	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8305	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8308	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.830b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.830e	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8311	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8314	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8317	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.831a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.831d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8320	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8323	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8326	60		rts				rts
.8327					SubTopTwoStack:
.8327	38		sec				sec
.8328	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.832b	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.832e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8331	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8334	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8337	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.833a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.833d	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8340	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8343	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8346	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8349	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.834c	60		rts				rts
.834d					AddInteger:
.834d	fa		plx				plx
.834e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8351	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8354	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8355	0a		asl a				asl 	a
.8356	10 05		bpl $835d			bpl 	_NotRef
.8358	48		pha				pha
.8359	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.835c	68		pla				pla
.835d					_NotRef:
.835d	0a		asl a				asl 	a 							; put MSB of type into A:7
.835e	30 0b		bmi $836b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8360	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8363	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8366	f0 06		beq $836e			beq 	_IntegerCode 				; if clear, then we have two integers
.8368	4c 18 91	jmp $9118			jmp 	FloatingPointAdd 							; otherwise at least one float.
.836b					_StringData:
.836b	4c 99 94	jmp $9499			jmp 	NotDoneError							; at least one string - don't know both are strings.
.836e					_IntegerCode:
.836e					AddCode:
.836e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8371	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8374	10 8b		bpl $8301			bpl 	AddTopTwoStack
.8376	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; do a physical subtraction
.8379	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.837c	10 09		bpl $8387			bpl 	_AddExit
.837e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8381	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8384	20 7c 89	jsr $897c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8387					_AddExit:
.8387	60		rts				rts
.8388					SubInteger:
.8388	fa		plx				plx
.8389	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.838c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.838f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8390	0a		asl a				asl 	a
.8391	10 05		bpl $8398			bpl 	_NotRef
.8393	48		pha				pha
.8394	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8397	68		pla				pla
.8398					_NotRef:
.8398	0a		asl a				asl 	a 							; put MSB of type into A:7
.8399	30 0b		bmi $83a6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.839b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.839e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a1	f0 06		beq $83a9			beq 	_IntegerCode 				; if clear, then we have two integers
.83a3	4c 1d 91	jmp $911d			jmp 	FloatingPointSub 							; otherwise at least one float.
.83a6					_StringData:
.83a6	4c 99 94	jmp $9499			jmp 	NotDoneError							; at least one string - don't know both are strings.
.83a9					_IntegerCode:
.83a9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.83ac	49 80		eor #$80			eor 	#$80
.83ae	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.83b1	80 bb		bra $836e			bra 	AddCode 					; and do the same code as add.
.83b3					AndInteger:
.83b3	fa		plx				plx
.83b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83b7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83bb	0a		asl a				asl 	a
.83bc	10 05		bpl $83c3			bpl 	_NotRef
.83be	48		pha				pha
.83bf	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83c2	68		pla				pla
.83c3					_NotRef:
.83c3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83c5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83c8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83cb	f0 03		beq $83d0			beq 	_IntegerCode 				; if clear, then we have two integers
.83cd	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.83d0					_IntegerCode:
.83d0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83d3	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.83d6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83d9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83dc	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.83df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83e2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83e5	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.83e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83eb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83ee	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.83f1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83f4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83f7	60		rts				rts
.83f8					OraInteger:
.83f8	fa		plx				plx
.83f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8400	0a		asl a				asl 	a
.8401	10 05		bpl $8408			bpl 	_NotRef
.8403	48		pha				pha
.8404	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8407	68		pla				pla
.8408					_NotRef:
.8408	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.840a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.840d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8410	f0 03		beq $8415			beq 	_IntegerCode 				; if clear, then we have two integers
.8412	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.8415					_IntegerCode:
.8415	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8418	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.841b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.841e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8421	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8424	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8427	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.842a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.842d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8430	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8433	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8436	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8439	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.843c	60		rts				rts
.843d					EorInteger:
.843d	fa		plx				plx
.843e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8441	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8444	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8445	0a		asl a				asl 	a
.8446	10 05		bpl $844d			bpl 	_NotRef
.8448	48		pha				pha
.8449	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.844c	68		pla				pla
.844d					_NotRef:
.844d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.844f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8452	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8455	f0 03		beq $845a			beq 	_IntegerCode 				; if clear, then we have two integers
.8457	4c 8f 94	jmp $948f			jmp 	TypeError 					; anything else, type mismatch.
.845a					_IntegerCode:
.845a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.845d	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8460	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8463	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8466	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8469	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.846c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.846f	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8472	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8475	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8478	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.847b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.847e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/tostring.asm

.90bd					ConvertInt16:
.90bd	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.90c0	8e 10 06	stx $0610			stx 	NSMantissa1
.90c3	9c 18 06	stz $0618			stz 	NSMantissa2
.90c6	9c 20 06	stz $0620			stz 	NSMantissa3
.90c9	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.90cc	a2 00		ldx #$00			ldx 	#0 							; stack level
.90ce	a9 0a		lda #$0a			lda 	#10 						; base
.90d0	80 00		bra $90d2			bra 	ConvertInt32
.90d2					ConvertInt32:
.90d2	5a		phy				phy
.90d3	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.90d5	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.90d8	10 08		bpl $90e2			bpl 	_CI32NotNeg
.90da	48		pha				pha
.90db	a9 2d		lda #$2d			lda 	#'-'
.90dd	99 64 08	sta $0864,y			sta 	NumberBuffer,y
.90e0	c8		iny				iny
.90e1	68		pla				pla
.90e2					_CI32NotNeg:
.90e2	20 f0 90	jsr $90f0			jsr 	_CI32DivideConvert 			; recursive conversion
.90e5	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.90e7	99 64 08	sta $0864,y			sta 	NumberBuffer,y
.90ea	7a		ply				ply
.90eb	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.90ed	a9 64		lda #$64			lda 	#NumberBuffer & $FF
.90ef	60		rts				rts
.90f0					_CI32DivideConvert:
.90f0	e8		inx				inx 								; write to next slot up
.90f1	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.90f4	ca		dex				dex
.90f5	20 f2 8f	jsr $8ff2			jsr 	Int32Divide 				; divide
.90f8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.90fb	48		pha				pha
.90fc	20 a2 8f	jsr $8fa2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.90ff	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; is it zero ?
.9102	f0 06		beq $910a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9104	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9107	20 f0 90	jsr $90f0			jsr 	_CI32DivideConvert 			; and recusrively call.
.910a					_CI32NoRecurse:
.910a	68		pla				pla 								; remainder
.910b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.910d	90 02		bcc $9111			bcc 	_CI32NotHex
.910f	69 26		adc #$26			adc 	#6+32
.9111					_CI32NotHex:
.9111	69 30		adc #$30			adc 	#48
.9113	99 64 08	sta $0864,y			sta 	NumberBuffer,y 				; write out and exit
.9116	c8		iny				iny
.9117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/expression.asm


;******  Processing file: ./core/expressions/../../generated/precedence.dat

.8482					PrecedenceLevel:
>8482	04					.byte	 4	; $00 <<
>8483	02					.byte	 2	; $01 <=
>8484	02					.byte	 2	; $02 <>
>8485	00					.byte	 0	; $03 !!3
>8486	00					.byte	 0	; $04 ><
>8487	02					.byte	 2	; $05 >=
>8488	04					.byte	 4	; $06 >>
>8489	00					.byte	 0	; $07 !!7
>848a	00					.byte	 0	; $08 !!8
>848b	00					.byte	 0	; $09 !!9
>848c	00					.byte	 0	; $0a !!10
>848d	00					.byte	 0	; $0b !!11
>848e	00					.byte	 0	; $0c !!12
>848f	00					.byte	 0	; $0d !!13
>8490	00					.byte	 0	; $0e !!14
>8491	00					.byte	 0	; $0f !!15
>8492	00					.byte	 0	; $10 @
>8493	00					.byte	 0	; $11 !!17
>8494	00					.byte	 0	; $12 !!18
>8495	00					.byte	 0	; $13 [
>8496	04					.byte	 4	; $14 \
>8497	00					.byte	 0	; $15 ]
>8498	01					.byte	 1	; $16 ^
>8499	00					.byte	 0	; $17 _
>849a	00					.byte	 0	; $18 `
>849b	00					.byte	 0	; $19 !!25
>849c	00					.byte	 0	; $1a !!26
>849d	00					.byte	 0	; $1b {
>849e	01					.byte	 1	; $1c |
>849f	00					.byte	 0	; $1d }
>84a0	00					.byte	 0	; $1e ~
>84a1	00					.byte	 0	; $1f [7m<7F>[m
>84a2	00					.byte	 0	; $20
>84a3	05					.byte	 5	; $21 !
>84a4	00					.byte	 0	; $22 "
>84a5	00					.byte	 0	; $23 #
>84a6	05					.byte	 5	; $24 $
>84a7	04					.byte	 4	; $25 %
>84a8	01					.byte	 1	; $26 &
>84a9	00					.byte	 0	; $27 '
>84aa	00					.byte	 0	; $28 (
>84ab	00					.byte	 0	; $29 )
>84ac	04					.byte	 4	; $2a *
>84ad	03					.byte	 3	; $2b +
>84ae	00					.byte	 0	; $2c ,
>84af	03					.byte	 3	; $2d -
>84b0	00					.byte	 0	; $2e .
>84b1	04					.byte	 4	; $2f /
>84b2	00					.byte	 0	; $30 0
>84b3	00					.byte	 0	; $31 1
>84b4	00					.byte	 0	; $32 2
>84b5	00					.byte	 0	; $33 3
>84b6	00					.byte	 0	; $34 4
>84b7	00					.byte	 0	; $35 5
>84b8	00					.byte	 0	; $36 6
>84b9	00					.byte	 0	; $37 7
>84ba	00					.byte	 0	; $38 8
>84bb	00					.byte	 0	; $39 9
>84bc	00					.byte	 0	; $3a :
>84bd	00					.byte	 0	; $3b ;
>84be	02					.byte	 2	; $3c <
>84bf	02					.byte	 2	; $3d =
>84c0	02					.byte	 2	; $3e >
>84c1	05					.byte	 5	; $3f ?

;******  Return to file: ./core/expressions/expression.asm

.84c2					EvaluateExpressionAt0:
.84c2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.84c4					EvaluateExpression:
.84c4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.84c6					EvaluateExpressionAtPrecedence:
.84c6	48		pha				pha 								; save precedence level
.84c7	20 c2 86	jsr $86c2			jsr 	EvaluateTerm 				; evaluate term into level X.
.84ca	68		pla				pla 								; restore precedence level.
.84cb					_EXPRLoop:
.84cb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.84cd	b1 30		lda ($30),y			lda 	(codePtr),y
.84cf	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.84d1	b0 25		bcs $84f8			bcs 	_EXPRExit
.84d3	da		phx				phx 								; read the operator precedence
.84d4	aa		tax				tax
.84d5	bd 82 84	lda $8482,x			lda 	PrecedenceLevel,x
.84d8	fa		plx				plx
.84d9	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.84db	f0 1b		beq $84f8			beq 	_EXPRExit
.84dd	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.84df	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.84e1	c5 37		cmp $37				cmp 	zTemp0+1
.84e3	b0 13		bcs $84f8			bcs		_EXPRExit 					; if current >= operator exit
.84e5	48		pha				pha 								; save current precedence.
.84e6	b1 30		lda ($30),y			lda 	(codePtr),y
.84e8	c8		iny				iny
.84e9	48		pha				pha
.84ea	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.84ec	e8		inx				inx 								; work out the right hand side.
.84ed	20 c6 84	jsr $84c6			jsr 	EvaluateExpressionAtPrecedence
.84f0	ca		dex				dex
.84f1	68		pla				pla 								; get operator, call the code.
.84f2	20 fb 84	jsr $84fb			jsr 	_EXPRCaller
.84f5	68		pla				pla 								; restore precedence level
.84f6	80 d3		bra $84cb			bra 	_EXPRLoop 					; and go round.
.84f8					_EXPRExit:
.84f8	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.84fa	60		rts				rts
.84fb					_EXPRCaller:
.84fb	da		phx				phx 								; save on stack, first thing is to restore it
.84fc	0a		asl a				asl 	a 							; double so can use vectors into X
.84fd	aa		tax				tax
.84fe	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/addsub.asm

.9118					FloatingPointAdd:
.9118	20 b9 92	jsr $92b9			jsr 	FloatPrepare 				; prepare for floats
.911b	80 0b		bra $9128			bra 	FloatAdd
.911d					FloatingPointSub:
.911d	20 b9 92	jsr $92b9			jsr 	FloatPrepare 				; prepare for floats
.9120					FloatSubtract:
.9120	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9123	49 80		eor #$80			eor 	#$80
.9125	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9128					FloatAdd:
.9128	48		pha				pha
.9129	5a		phy				phy
.912a	20 ca 92	jsr $92ca			jsr 	NSNormalise 				; normalise S[X]
.912d	f0 54		beq $9183			beq 	_FAReturn1
.912f	e8		inx				inx 								; normalise S[X+1]
.9130	20 ca 92	jsr $92ca			jsr 	NSNormalise
.9133	ca		dex				dex
.9134	c9 00		cmp #$00			cmp 	#0
.9136	f0 6f		beq $91a7			beq 	_FAExit 					; if so, just return A
.9138	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.913b	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.913e	f0 1b		beq $915b			beq 	_FAExponentsEqual
.9140	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9143	a8		tay				tay
.9144	38		sec				sec 								; do a signed comparison of the exponents.
.9145	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9148	50 02		bvc $914c			bvc 	_FANoSignedChange
.914a	49 80		eor #$80			eor 	#$80
.914c					_FANoSignedChange:
.914c	29 80		and #$80			and 	#$80
.914e	10 03		bpl $9153			bpl 	_FAHaveMax
.9150	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9153					_FAHaveMax:
.9153	20 aa 91	jsr $91aa			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9156	e8		inx				inx
.9157	20 aa 91	jsr $91aa			jsr 	_FAShiftToExponent
.915a	ca		dex				dex
.915b					_FAExponentsEqual:
.915b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.915e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9161	30 10		bmi $9173			bmi 	_FADifferentSigns
.9163	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9166	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9169	10 3c		bpl $91a7			bpl 	_FAExit 					; if no, we are done.
.916b	20 ea 89	jsr $89ea			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.916e	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9171	80 34		bra $91a7			bra 	_FAExit
.9173					_FADifferentSigns:
.9173	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9176	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9179	10 2c		bpl $91a7			bpl 	_FAExit 					; if no, we are done.
.917b	20 73 89	jsr $8973			jsr 	NSMNegate 					; netate result
.917e	20 7c 89	jsr $897c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9181	80 24		bra $91a7			bra 	_FAExit
.9183					_FAReturn1:
.9183	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9186	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9189	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.918c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.918f	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9192	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9195	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9198	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.919b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.919e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91a1	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.91a4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91a7					_FAExit:
.91a7	7a		ply				ply
.91a8	68		pla				pla
.91a9	60		rts				rts
.91aa					_FAShiftToExponent:
.91aa					_FAShiftToExponent2:
.91aa	98		tya				tya 								; compare Y to exponent
.91ab	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.91ae	f0 08		beq $91b8			beq 	_FASEExit 					; exit if so.
.91b0	20 ea 89	jsr $89ea			jsr 	NSMShiftRight	 			; shift the mantissa right
.91b3	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.91b6	80 f2		bra $91aa			bra 	_FAShiftToExponent2
.91b8					_FASEExit:
.91b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/compare.asm

.91b9					CompareFloat:
.91b9	20 20 91	jsr $9120			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.91bc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.91bf	29 fc		and #$fc			and 	#$FC
.91c1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.91c4	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.91c7	f0 09		beq $91d2			beq 	_FCExit 					; zero, so approximately identical
.91c9	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.91cb	3c 00 06	bit $0600,x			bit 	NSStatus,x
.91ce	10 02		bpl $91d2			bpl 	_FCExit
.91d0					_FCNegative:
.91d0	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.91d2					_FCExit:
.91d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/divide.asm

.91d3					FDivideCommand:
.91d3	fa		plx				plx	 								; restore stack position
.91d4	20 b9 92	jsr $92b9			jsr 	FloatPrepare 				; prepare for floats
.91d7					FloatDivide:
.91d7	48		pha				pha
.91d8	e8		inx				inx
.91d9	20 ca 92	jsr $92ca			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.91dc	ca		dex				dex
.91dd	c9 00		cmp #$00			cmp 	#0
.91df	f0 20		beq $9201			beq 	_FDZero
.91e1	20 ca 92	jsr $92ca			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.91e4	f0 19		beq $91ff			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.91e6	20 14 90	jsr $9014			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.91e9	20 a2 8f	jsr $8fa2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.91ec	20 ca 92	jsr $92ca			jsr		NSNormalise 				; renormalise
.91ef	20 af 90	jsr $90af			jsr 	CalculateSign 				; calculate result sign
.91f2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.91f5	38		sec				sec
.91f6	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.91f9	38		sec				sec
.91fa	e9 1e		sbc #$1e			sbc 	#30
.91fc	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91ff					_FDExit:
.91ff	68		pla				pla
.9200	60		rts				rts
.9201					_FDZero:
.9201	a9 03		lda #$03		lda	#3
.9203	4c 1b 82	jmp $821b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/fractional.asm

.9206					FloatFractionalPart:
.9206	5a		phy				phy
.9207	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.920a	29 7f		and #$7f			and 	#$7F
.920c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.920f	20 ca 92	jsr $92ca			jsr 	NSNormalise
.9212	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9215	38		sec				sec
.9216	e9 e0		sbc #$e0			sbc 	#$E0
.9218	90 31		bcc $924b			bcc 	_FFPExit 					; already fractional
.921a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.921c	b0 2a		bcs $9248			bcs 	_FFPZero
.921e	a8		tay				tay 								; put count to do in Y
.921f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9222	20 4d 92	jsr $924d			jsr 	_FFPPartial
.9225	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9228	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.922b	20 4d 92	jsr $924d			jsr 	_FFPPartial
.922e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9231	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9234	20 4d 92	jsr $924d			jsr 	_FFPPartial
.9237	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.923a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.923d	20 4d 92	jsr $924d			jsr 	_FFPPartial
.9240	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9243	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; zeroed check.
.9246	d0 03		bne $924b			bne 	_FFPExit
.9248					_FFPZero:
.9248	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.924b					_FFPExit:
.924b	7a		ply				ply
.924c	60		rts				rts
.924d					_FFPPartial:
.924d	c0 00		cpy #$00			cpy 	#0 							; no more to do
.924f	f0 17		beq $9268			beq 	_FFFPPExit
.9251	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9253	b0 0c		bcs $9261			bcs 	_FFFPPWholeByte
.9255	5a		phy				phy
.9256					_FFFPPLeft:
.9256	0a		asl a				asl 	a
.9257	88		dey				dey
.9258	d0 fc		bne $9256			bne 	_FFFPPLeft
.925a	7a		ply				ply
.925b					_FFFPPRight:
.925b	4a		lsr a				lsr 	a
.925c	88		dey				dey
.925d	d0 fc		bne $925b			bne 	_FFFPPRight
.925f	80 07		bra $9268			bra 	_FFFPPExit
.9261					_FFFPPWholeByte:
.9261	98		tya				tya 								; subtract 8 from count
.9262	38		sec				sec
.9263	e9 08		sbc #$08			sbc 	#8
.9265	a8		tay				tay
.9266	a9 00		lda #$00			lda 	#0 							; and clear all
.9268					_FFFPPExit:
.9268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/integer.asm

.9269					FloatIntegerPart:
.9269	48		pha				pha
.926a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.926d	f0 1f		beq $928e			beq 	_FIPExit 					; if so do nothing
.926f	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; is it zero ?
.9272	f0 17		beq $928b			beq 	_FIPZero 					; if so return zero.
.9274	20 ca 92	jsr $92ca			jsr 	NSNormalise 				; normalise
.9277	f0 12		beq $928b			beq 	_FIPZero 					; normalised to zero, exit zero
.9279					_FIPShift:
.9279	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.927c	10 08		bpl $9286			bpl 	_FIPCheckZero
.927e	20 ea 89	jsr $89ea			jsr 	NSMShiftRight 				; shift mantissa right
.9281	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9284	80 f3		bra $9279			bra 	_FIPShift
.9286					_FIPCheckZero:
.9286	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; avoid -0 problem
.9289	d0 03		bne $928e			bne 	_FIPExit 					; set to zero if mantissa zero.
.928b					_FIPZero:
.928b	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.928e					_FIPExit:
.928e	68		pla				pla
.928f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/multiply.asm

.9290					FloatingPointMultiply:
.9290	20 b9 92	jsr $92b9			jsr 	FloatPrepare 				; prepare for floats
.9293					FloatMultiply:
.9293	48		pha				pha
.9294	20 ca 92	jsr $92ca			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9297	f0 1b		beq $92b4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9299	e8		inx				inx
.929a	20 ca 92	jsr $92ca			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.929d	ca		dex				dex
.929e	c9 00		cmp #$00			cmp 	#0
.92a0	f0 0f		beq $92b1			beq 	_FDSetZero
.92a2	20 6a 90	jsr $906a			jsr 	MultiplyShort 				; calculate the result.
.92a5	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.92a8	18		clc				clc
.92a9	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.92ac	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92af	80 03		bra $92b4			bra 	_FDExit
.92b1					_FDSetZero:
.92b1	20 c7 89	jsr $89c7			jsr 	NSMSetZero 					; return 0
.92b4					_FDExit:
.92b4	20 ca 92	jsr $92ca			jsr 	NSNormalise 				; normalise the result
.92b7	68		pla				pla
.92b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/utility.asm

.92b9					FloatPrepare:
.92b9	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; dereference the top two values
.92bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.92bf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92c2	29 10		and #$10			and 	#NSBIsString
.92c4	d0 01		bne $92c7			bne 	_FDType
.92c6	60		rts				rts
.92c7					_FDType:
.92c7	4c 8f 94	jmp $948f			jmp 	TypeError
.92ca					NSNormalise:
.92ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.92cd	29 80		and #$80			and 	#$80
.92cf	09 08		ora #$08			ora 	#NSTFloat
.92d1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92d4	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; if zero exit
.92d7	d0 09		bne $92e2			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.92d9	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.92dc	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.92df	a9 00		lda #$00			lda 	#0 							; set Z flag
.92e1	60		rts				rts
.92e2					_NSNormaliseOptimise:
.92e2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.92e5	d0 22		bne $9309			bne 	_NSNormaliseLoop
.92e7	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.92ea	30 1d		bmi $9309			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.92ec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92ef	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92f2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92f5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.92f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92fb	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.92fe	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9301	38		sec				sec
.9302	e9 08		sbc #$08			sbc 	#8
.9304	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9307	80 d9		bra $92e2			bra 	_NSNormaliseOptimise
.9309					_NSNormaliseLoop:
.9309	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.930c	70 08		bvs $9316			bvs 	_NSNExit 					; exit if so with Z flag clear
.930e	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; shift mantissa left
.9311	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9314	80 f3		bra $9309			bra 	_NSNormaliseLoop
.9316					_NSNExit:
.9316	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9318	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/dereference.asm

.8501					DereferenceTopTwo:
.8501	e8		inx				inx
.8502	20 06 85	jsr $8506			jsr 	Dereference 				; deref x+1
.8505	ca		dex				dex  								; falls through to deref x
.8506					Dereference:
.8506	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8509	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.850b	f0 57		beq $8564			beq 	_DRFExit 					; not a reference
.850d	5a		phy				phy
.850e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8511	85 36		sta $36				sta 	zTemp0
.8513	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8516	85 37		sta $37				sta 	zTemp0+1
.8518	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.851b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.851d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8520	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8523	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8525	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8527	f0 0f		beq $8538			beq 	_DRFDereferenceTwo
.8529	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.852b	f0 39		beq $8566			beq 	_DRFFull
.852d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8530	29 03		and #$03			and 	#3
.8532	f0 32		beq $8566			beq 	_DRFFull 					; the whole word
.8534	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8536	f0 07		beq $853f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8538					_DRFDereferenceTwo:
.8538	a0 01		ldy #$01			ldy 	#1
.853a	b1 36		lda ($36),y			lda 	(zTemp0),y
.853c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.853f					_DRFClear23:
.853f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8542	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8545	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8548	29 18		and #$18			and 	#NSBTypeMask
.854a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.854f	d0 12		bne $8563			bne 	_DRFNotString
.8551	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8554	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8557	d0 0a		bne $8563			bne 	_DRFNotString
.8559	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.855b	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.855e	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.8560	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8563					_DRFNotString
.8563	7a		ply				ply 								; restore Y and exit
.8564					_DRFExit:
.8564	60		rts				rts
.8565					_DRFNullString:
>8565	00						.byte 	0
.8566					_DRFFull:
.8566	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8568	b1 36		lda ($36),y			lda 	(zTemp0),y
.856a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856d	c8		iny				iny
.856e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8570	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8573	c8		iny				iny
.8574	b1 36		lda ($36),y			lda 	(zTemp0),y
.8576	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8579	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.857c	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.857f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8581	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8584	f0 06		beq $858c			beq 	_DRFNoExponent
.8586	c8		iny				iny 								; if not, read the exponent as well.
.8587	b1 36		lda ($36),y			lda 	(zTemp0),y
.8589	9d 28 06	sta $0628,x			sta 	NSExponent,x
.858c					_DRFNoExponent:
.858c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.858f	10 0d		bpl $859e			bpl 	_DRFExit2 					; if not, then exit.
.8591	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8593	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8596	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8599	09 80		ora #$80			ora 	#NSBIsNegative
.859b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.859e					_DRFExit2:
.859e	7a		ply				ply
.859f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.85a0					EncodeNumberStart:
.85a0	38		sec				sec
.85a1	80 01		bra $85a4			bra 	EncodeNumberContinue+1
.85a3					EncodeNumberContinue:
.85a3	18		clc				clc
.85a4					EncodeNumber:
.85a4	08		php				php 								; save reset.
.85a5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.85a7	f0 12		beq $85bb			beq 	_ENIsOkay
.85a9	c9 30		cmp #$30			cmp 	#"0"
.85ab	90 04		bcc $85b1			bcc 	_ENBadNumber
.85ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.85af	90 0a		bcc $85bb			bcc 	_ENIsOkay
.85b1					_ENBadNumber:
.85b1	28		plp				plp 								; throw saved reset
.85b2	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.85b5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85b7	f0 7e		beq $8637			beq 	_ENConstructFinal
.85b9					_ENFail:
.85b9	18		clc				clc 								; not allowed
.85ba	60		rts				rts
.85bb					_ENIsOkay:
.85bb	28		plp				plp 								; are we restarting
.85bc	90 15		bcc $85d3			bcc 	_ENNoRestart
.85be					_ENStartEncode:
.85be	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.85c0	f0 0c		beq $85ce			beq 	_ENFirstDP
.85c2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.85c4	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.85c7	a9 01		lda #$01			lda 	#ESTA_Low
.85c9					_ENExitChange:
.85c9	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.85cc	38		sec				sec
.85cd	60		rts				rts
.85ce					_ENFirstDP:
.85ce	20 c7 89	jsr $89c7			jsr 	NSMSetZero 					; clear integer part
.85d1	80 3f		bra $8612			bra 	_ESTASwitchFloat			; go straight to float and exi
.85d3					_ENNoRestart:
.85d3	48		pha				pha 								; save on stack.
.85d4	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.85d7	c9 01		cmp #$01			cmp 	#ESTA_Low
.85d9	f0 09		beq $85e4			beq  	_ESTALowState
.85db	c9 02		cmp #$02			cmp 	#ESTA_High
.85dd	f0 29		beq $8608			beq 	_ESTAHighState
.85df	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85e1	f0 3b		beq $861e			beq 	_ESTADecimalState
>85e3	db						.byte 	$DB 						; causes a break in the emulator
.85e4					_ESTALowState:
.85e4	68		pla				pla 								; get value back
.85e5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.85e7	f0 29		beq $8612			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.85e9	29 0f		and #$0f			and 	#15 						; make digit
.85eb	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.85ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.85f1	0a		asl a				asl 	a
.85f2	0a		asl a				asl 	a
.85f3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85f6	0a		asl a				asl 	a
.85f7	6d 06 07	adc $0706			adc 	DigitTemp
.85fa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85fd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.85ff	90 05		bcc $8606			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8601	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8603	8d 05 07	sta $0705			sta 	EncodeState
.8606					_ESTANoSwitch:
.8606	38		sec				sec
.8607	60		rts				rts
.8608					_ESTAHighState:
.8608	68		pla				pla 								; get value back
.8609	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.860b	f0 05		beq $8612			beq 	_ESTASwitchFloat
.860d	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8610	38		sec				sec
.8611	60		rts				rts
.8612					_ESTASwitchFloat:
.8612	9c 07 07	stz $0707			stz 	DecimalCount
.8615	e8		inx				inx 								; zero the decimal additive.
.8616	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.8619	ca		dex				dex
.861a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.861c	80 ab		bra $85c9			bra 	_ENExitChange
.861e					_ESTADecimalState:
.861e	68		pla				pla 								; digit.
.861f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8621	f0 96		beq $85b9			beq 	_ENFail
.8623	e8		inx				inx 								; put digit into fractional part of X+1
.8624	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa
.8627	ca		dex				dex
.8628	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.862b	ad 07 07	lda $0707			lda 	DecimalCount
.862e	c9 0b		cmp #$0b			cmp 	#11
.8630	f0 02		beq $8634			beq 	_ESTADSFail
.8632	38		sec				sec
.8633	60		rts				rts
.8634					_ESTADSFail:
.8634	4c 8a 94	jmp $948a			jmp 	RangeError
.8637					_ENConstructFinal:
.8637	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.863a	f0 33		beq $866f			beq 	_ENCFExit 					; no decimals
.863c	5a		phy				phy
.863d	0a		asl a				asl 	a 							; x 4 and CLC
.863e	0a		asl a				asl 	a
.863f	6d 07 07	adc $0707			adc 	DecimalCount
.8642	a8		tay				tay
.8643	b9 49 94	lda $9449,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8646	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8649	b9 4a 94	lda $944a,y			lda 	DecimalScalarTable-5+1,y
.864c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.864f	b9 4b 94	lda $944b,y			lda 	DecimalScalarTable-5+2,y
.8652	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8655	b9 4c 94	lda $944c,y			lda 	DecimalScalarTable-5+3,y
.8658	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.865b	b9 4d 94	lda $944d,y			lda 	DecimalScalarTable-5+4,y
.865e	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8661	a9 08		lda #$08			lda 	#NSTFloat
.8663	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8666	7a		ply				ply
.8667	e8		inx				inx 								; multiply decimal const by decimal scalar
.8668	20 93 92	jsr $9293			jsr 	FloatMultiply
.866b	ca		dex				dex
.866c	20 28 91	jsr $9128			jsr 	FloatAdd 					; add to integer part.
.866f					_ENCFExit:
.866f	18		clc				clc 								; reject the digit.
.8670	60		rts				rts
.8671					ESTAShiftDigitIntoMantissa:
.8671	29 0f		and #$0f			and 	#15 						; save digit
.8673	48		pha				pha
.8674	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8677	48		pha				pha
.8678	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.867b	48		pha				pha
.867c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.867f	48		pha				pha
.8680	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8683	48		pha				pha
.8684	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 2
.8687	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 4
.868a	18		clc				clc 								; pop mantissa and add
.868b	68		pla				pla
.868c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.868f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8692	68		pla				pla
.8693	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8696	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8699	68		pla				pla
.869a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.869d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86a0	68		pla				pla
.86a1	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.86a4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.86a7	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 10
.86aa	68		pla				pla 								; add digit
.86ab	18		clc				clc
.86ac	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.86af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b2	90 0d		bcc $86c1			bcc 	_ESTASDExit
.86b4	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.86b7	d0 08		bne $86c1			bne 	_ESTASDExit
.86b9	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.86bc	d0 03		bne $86c1			bne 	_ESTASDExit
.86be	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.86c1					_ESTASDExit:
.86c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/term.asm

.86c2					EvaluateTerm:
.86c2	b1 30		lda ($30),y			lda 	(codePtr),y
.86c4	30 18		bmi $86de			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.86c6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.86c8	b0 6f		bcs $8739			bcs 	_ETVariable
.86ca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.86cc	90 6f		bcc $873d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.86ce	c9 3a		cmp #$3a			cmp 	#'9'+1
.86d0	b0 6b		bcs $873d			bcs 	_ETPuncUnary
.86d2	20 a0 85	jsr $85a0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.86d5					_ETNumber:
.86d5	c8		iny				iny 								; keep encoding until we have the numbers
.86d6	b1 30		lda ($30),y			lda 	(codePtr),y
.86d8	20 a3 85	jsr $85a3			jsr 	EncodeNumberContinue
.86db	b0 f8		bcs $86d5			bcs 	_ETNumber 					; go back if accepted.
.86dd	60		rts				rts
.86de					_ETCheckUnary:
.86de	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.86e0	f0 41		beq $8723			beq 	_ETString
.86e2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.86e4	f0 12		beq $86f8			beq 	_ETHexConstant
.86e6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.86e8	90 0b		bcc $86f5			bcc 	_ETSyntaxError
.86ea	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.86ec	b0 07		bcs $86f5			bcs 	_ETSyntaxError
.86ee	da		phx				phx 								; push X on the stack
.86ef	0a		asl a				asl 	a 							; put vector x 2 into X
.86f0	aa		tax				tax
.86f1	c8		iny				iny 								; consume unary function token
.86f2	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.86f5					_ETSyntaxError:
.86f5	4c 85 94	jmp $9485			jmp 	SyntaxError
.86f8					_ETHexConstant:
.86f8	c8		iny				iny 								; skip #
.86f9	c8		iny				iny 								; skip count
.86fa	20 c7 89	jsr $89c7			jsr 	NSMSetZero 					; clear result
.86fd					_ETHLoop:
.86fd	b1 30		lda ($30),y			lda 	(codePtr),y
.86ff	c8		iny				iny 								; and consume
.8700	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8702	f0 1e		beq $8722			beq 	_ETHExit
.8704	48		pha				pha 								; save on stack.
.8705	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 2
.8708	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 4
.870b	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 8
.870e	20 dc 89	jsr $89dc			jsr 	NSMShiftLeft 				; x 16
.8711	68		pla				pla 								; ASCII
.8712	c9 41		cmp #$41			cmp 	#'A'
.8714	90 02		bcc $8718			bcc 	_ETHNotChar
.8716	e9 07		sbc #$07			sbc 	#7
.8718					_ETHNotChar:
.8718	29 0f		and #$0f			and 	#15 						; digit now
.871a	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.871d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8720	80 db		bra $86fd			bra 	_ETHLoop 					; go round.
.8722					_ETHExit:
.8722	60		rts				rts
.8723					_ETString:
.8723	c8		iny				iny 								; look at length
.8724	b1 30		lda ($30),y			lda 	(codePtr),y
.8726	48		pha				pha
.8727	c8		iny				iny 								; first character
.8728	20 46 81	jsr $8146			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.872b	68		pla				pla 								; restore count and save
.872c	85 36		sta $36				sta 	zTemp0
.872e	98		tya				tya 								; add length to Y to skip it.
.872f	18		clc				clc
.8730	65 36		adc $36				adc 	zTemp0
.8732	a8		tay				tay
.8733	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8735	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8738	60		rts				rts
.8739					_ETVariable:
>8739	db						.byte 	$DB 						; causes a break in the emulator
.873a	4c ff ff	jmp $ffff			jmp 	$FFFF
.873d					_ETPuncUnary:
.873d	c8		iny				iny 								; consume the unary character
.873e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8740	f0 31		beq $8773			beq 	_ETUnaryNegate
.8742	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8744	f0 3d		beq $8783			beq 	_ETDereference
.8746	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8748	f0 58		beq $87a2			beq 	_ETParenthesis
.874a	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.874c	f0 43		beq $8791			beq 	_ETStringReference
.874e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8750	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8752	f0 06		beq $875a			beq 	_ETIndirection
.8754	e6 36		inc $36				inc 	zTemp0
.8756	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8758	d0 9b		bne $86f5			bne 	_ETSyntaxError
.875a					_ETIndirection:
.875a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.875c	1a		inc a				inc 	a
.875d	48		pha				pha
.875e	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8761	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8764	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8767	d0 07		bne $8770			bne 	_ETTypeMismatch
.8769	68		pla				pla 								; indirection 1-2
.876a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.876c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.876f	60		rts				rts
.8770					_ETTypeMismatch:
.8770	4c 8f 94	jmp $948f			jmp 	TypeError
.8773					_ETUnaryNegate:
.8773	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8776	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.877c	29 10		and #$10			and 	#NSTString
.877e	d0 f0		bne $8770			bne 	_ETTypeMismatch
.8780	4c 73 89	jmp $8973			jmp 	NSMNegate  					; just toggles the sign bit.
.8783					_ETDereference:
.8783	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8786	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8789	29 20		and #$20			and 	#NSBIsReference
.878b	f0 e3		beq $8770			beq 	_ETTypeMismatch
.878d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8790	60		rts				rts
.8791					_ETStringReference:
.8791	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8794	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8797	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.879a	d0 d4		bne $8770			bne 	_ETTypeMismatch
.879c	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.879e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87a1	60		rts				rts
.87a2					_ETParenthesis:
.87a2	20 c4 84	jsr $84c4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.87a5	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket 			; check for )
.87a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/abs.asm

.9319					AbsUnary:
.9319	fa		plx				plx 								; restore stack pos
.931a	20 1b 89	jsr $891b			jsr 	EvaluateNumber 				; get a float or int
.931d	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.9320	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9323	29 7f		and #$7f			and 	#$7F
.9325	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9328	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/alloc.asm

.87a9					AllocUnary:
.87a9	fa		plx				plx 								; restore stack pos
.87aa	20 53 89	jsr $8953			jsr 	Evaluate16BitInteger		; get bytes required.
.87ad	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.87b0	da		phx				phx 								; save X/Y
.87b1	5a		phy				phy
.87b2	8a		txa				txa 								; copy X into Y
.87b3	a8		tay				tay
.87b4	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.87b7	aa		tax				tax
.87b8	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.87bb	20 c8 87	jsr $87c8			jsr 	AllocateXABytes 			; allocate memory
.87be	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.87c1	8a		txa				txa
.87c2	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.87c5	7a		ply				ply
.87c6	fa		plx				plx
.87c7	60		rts				rts
.87c8					AllocateXABytes:
.87c8	5a		phy				phy
.87c9	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.87cc	5a		phy				phy
.87cd	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.87d0	5a		phy				phy
.87d1	18		clc				clc
.87d2	6d 0c 07	adc $070c			adc 	lowMemPtr
.87d5	8d 0c 07	sta $070c			sta 	lowMemPtr
.87d8	8a		txa				txa
.87d9	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.87dc	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.87df	fa		plx				plx
.87e0	68		pla				pla
.87e1	7a		ply				ply
.87e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/asc.asm

.9329					AscUnary:
.9329	fa		plx				plx 								; restore stack pos
.932a	20 26 89	jsr $8926			jsr 	EvaluateString 				; get a string
.932d	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.932f	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.9332	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.9335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/frac.asm

.9336					FracUnary:
.9336	fa		plx				plx 								; restore stack pos
.9337	20 1b 89	jsr $891b			jsr 	EvaluateNumber 				; get a float or int
.933a	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.933d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9340	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9342	f0 04		beq $9348			beq 	_IUZero
.9344	20 06 92	jsr $9206			jsr 	FloatFractionalPart
.9347	60		rts				rts
.9348					_IUZero:
.9348	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.934b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/int.asm

.934c					IntUnary:
.934c	fa		plx				plx 								; restore stack pos
.934d	20 1b 89	jsr $891b			jsr 	EvaluateNumber 				; get a float or int
.9350	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.9353	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9356	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9358	f0 03		beq $935d			beq 	_IUExit
.935a	20 69 92	jsr $9269			jsr 	FloatIntegerPart
.935d					_IUExit:
.935d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/len.asm

.935e					LenUnary:
.935e	fa		plx				plx 								; restore stack pos
.935f	20 26 89	jsr $8926			jsr 	EvaluateString 				; get a string
.9362	5a		phy				phy
.9363	a0 00		ldy #$00			ldy 	#0 							; find length
.9365					_LenFind:
.9365	b1 36		lda ($36),y			lda 	(zTemp0),y
.9367	f0 06		beq $936f			beq 	_LenExit
.9369	c8		iny				iny
.936a	d0 f9		bne $9365			bne 	_LenFind
.936c	4c 8a 94	jmp $948a			jmp 	RangeError 					; string > 255
.936f					_LenExit:
.936f	98		tya				tya
.9370	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.9373	7a		ply				ply
.9374	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.9377	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/not.asm

.87e3					Unary_Not:
.87e3	fa		plx				plx
.87e4	20 3e 89	jsr $893e			jsr 	EvaluateInteger 			; get integer
.87e7	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.87ea	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; zero mantissa ?
.87ed	f0 04		beq $87f3			beq 	_NotZero
.87ef	20 c7 89	jsr $89c7			jsr 	NSMSetZero
.87f2	60		rts				rts
.87f3					_NotZero:
.87f3	4c d5 8e	jmp $8ed5			jmp 	ReturnTrue
.87f6					_UNBad:
.87f6	4c 94 94	jmp $9494			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/rnd.asm

.87f9					Unary_Rnd:
.87f9	20 1b 89	jsr $891b			jsr 	EvaluateNumber 				; number to use.
.87fc	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket 			; closing bracket
.87ff	20 28 88	jsr $8828			jsr 	Random32Bit 				; generate a number.
.8802	ad 08 07	lda $0708			lda 	RandomSeed+0
.8805	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8808	ad 09 07	lda $0709			lda 	RandomSeed+1
.880b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.880e	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8811	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8814	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8817	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8819	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.881c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.881e	8d 28 06	sta $0628			sta 	NSExponent
.8821	a9 08		lda #$08			lda 	#NSTFloat
.8823	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8826	db						.byte 	$DB 						; causes a break in the emulator
.8827	60		rts				rts
.8828					Random32Bit:
.8828	5a		phy				phy
.8829	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.882b	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.882e	d0 03		bne $8833			bne 	_Random1
.8830	a8		tay				tay 								; if so do it 256 times
.8831	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8833					_Random1:
.8833	0a		asl a				asl 	a 							; LSFR RNG
.8834	2e 09 07	rol $0709			rol 	RandomSeed+1
.8837	2e 0a 07	rol $070a			rol 	RandomSeed+2
.883a	2e 0b 07	rol $070b			rol 	RandomSeed+3
.883d	90 02		bcc $8841			bcc 	_Random2
.883f	49 c5		eor #$c5			eor 	#$C5
.8841					_Random2:
.8841	88		dey				dey
.8842	d0 ef		bne $8833			bne 	_Random1
.8844	7a		ply				ply
.8845	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/sgn.asm

.9378					SgnUnary:
.9378	fa		plx				plx 								; restore stack pos
.9379	20 1b 89	jsr $891b			jsr 	EvaluateNumber 				; get a float or int
.937c	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.937f	20 f7 89	jsr $89f7			jsr 	NSMIsZero 					; if zero
.9382	f0 10		beq $9394			beq 	_SGZero  					; return Int Zero
.9384	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9387	48		pha				pha
.9388	a9 01		lda #$01			lda 	#1 							; set to 1
.938a	20 c9 89	jsr $89c9			jsr 	NSMSetByte
.938d	68		pla				pla
.938e	29 80		and #$80			and		#$80 						; copy the sign byte out
.9390	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9393	60		rts				rts
.9394	20 c7 89	jsr $89c7	_SGZero:jsr 	NSMSetZero
.9397	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/val.asm

.9398					ValUnary:
.9398	fa		plx				plx 								; restore stack pos
.9399	20 ae 93	jsr $93ae			jsr 	ValMainCode 				; do the main val() code
.939c	b0 01		bcs $939f			bcs 	_VUError 					; couldn't convert
.939e	60		rts				rts
.939f					_VUError:
.939f	4c 8f 94	jmp $948f			jmp 	TypeError
.93a2					IsValUnary:
.93a2	fa		plx				plx 								; restore stack pos
.93a3	20 ae 93	jsr $93ae			jsr 	ValMainCode 				; do the main val() code
.93a6	b0 03		bcs $93ab			bcs 	_VUBad
.93a8	4c d5 8e	jmp $8ed5			jmp 	ReturnTrue
.93ab					_VUBad:
.93ab	4c e1 8e	jmp $8ee1			jmp 	ReturnFalse
.93ae					ValMainCode:
.93ae	20 26 89	jsr $8926			jsr 	EvaluateString 				; get a string
.93b1	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket 			; check right bracket present
.93b4	5a		phy				phy
.93b5	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.93b7	f0 17		beq $93d0			beq 	_VMCFail2
.93b9	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.93bb	48		pha				pha 								; save first character
.93bc	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.93be	d0 01		bne $93c1			bne 	_VMCStart
.93c0	c8		iny				iny 								; skip over -
.93c1					_VMCStart:
.93c1	38		sec				sec 								; initialise first time round.
.93c2					_VMCNext:
.93c2	c8		iny				iny 								; pre-increment
.93c3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.93c5	f0 0c		beq $93d3			beq 	_VMCSuccess 				; successful.
.93c7	20 a4 85	jsr $85a4			jsr 	EncodeNumber 				; send it to the number-builder
.93ca	90 03		bcc $93cf			bcc 	_VMCFail 					; if failed, give up.
.93cc	18		clc				clc 								; next time round, countinue
.93cd	80 f3		bra $93c2			bra 	_VMCNext
.93cf					_VMCFail:
.93cf	68		pla				pla
.93d0					_VMCFail2:
.93d0	7a		ply				ply
.93d1	38		sec				sec
.93d2	60		rts				rts
.93d3					_VMCSuccess:
.93d3	a9 00		lda #$00			lda 	#0 							; construct final
.93d5	20 a4 85	jsr $85a4			jsr 	EncodeNumber
.93d8	68		pla				pla
.93d9	c9 2d		cmp #$2d			cmp 	#"-"
.93db	d0 03		bne $93e0			bne 	_VMCNotNegative
.93dd	20 73 89	jsr $8973			jsr		NSMNegate
.93e0					_VMCNotNegative:
.93e0	7a		ply				ply
.93e1	18		clc				clc
.93e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/chr.asm

.8846					ChrUnary:
.8846	fa		plx				plx 								; restore stack pos
.8847	20 5f 89	jsr $895f			jsr 	Evaluate8BitInteger			; get value
.884a	48		pha				pha
.884b	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.884e	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8850	20 01 94	jsr $9401			jsr 	StringTempAllocate
.8853	68		pla				pla 								; write number to it
.8854	20 3f 94	jsr $943f			jsr 	StringTempWrite
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/spc.asm

.8858					SpcUnary:
.8858	fa		plx				plx 								; restore stack pos
.8859	20 5f 89	jsr $895f			jsr 	Evaluate8BitInteger			; get value
.885c	5a		phy				phy
.885d	48		pha				pha 								; save count
.885e	20 01 94	jsr $9401			jsr 	StringTempAllocate
.8861	7a		ply				ply 								; to do count in Y
.8862					_SpcLoop:
.8862	c0 00		cpy #$00			cpy 	#0
.8864	f0 08		beq $886e			beq 	_SpcExit
.8866	a9 20		lda #$20			lda 	#32
.8868	20 3f 94	jsr $943f			jsr 	StringTempWrite
.886b	88		dey				dey
.886c	80 f4		bra $8862			bra 	_SPCLoop
.886e					_SpcExit:
.886e	7a		ply				ply
.886f	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket
.8872	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/substring.asm

.8873					Unary_Left:
.8873	fa		plx				plx
.8874	18		clc				clc 								; only one parameter
.8875	20 ea 88	jsr $88ea			jsr 	SubstringInitial 			; set up.
.8878	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.887b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.887e	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8881	80 2c		bra $88af			bra 	SubstringMain
.8883					Unary_Right:
.8883	fa		plx				plx
.8884	18		clc				clc 								; only one parameter
.8885	20 ea 88	jsr $88ea			jsr 	SubstringInitial 			; set up.
.8888	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.888b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.888e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8891	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8894	b0 02		bcs $8898			bcs 	_URNotUnderflow
.8896	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8898					_URNotUnderFlow:
.8898	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.889b	80 12		bra $88af			bra 	SubStringMain
.889d					Unary_Mid:
.889d	fa		plx				plx
.889e	38		sec				sec 								; two parameters
.889f	20 ea 88	jsr $88ea			jsr 	SubstringInitial 			; set up.
.88a2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.88a5	f0 05		beq $88ac			beq 	_UMError
.88a7	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.88aa	80 03		bra $88af			bra 	SubStringMain
.88ac					_UMError:
.88ac	4c 94 94	jmp $9494			jmp 	ArgumentError
.88af					SubStringMain:
.88af	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.88b2	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.88b5	b0 2d		bcs $88e4			bcs 	_SSMNull 					; if so, return an empty string.
.88b7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.88ba	f0 28		beq $88e4			beq 	_SSMNull 					; return empty string.
.88bc	18		clc				clc 								; add the offset +1 to the address and
.88bd	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.88c0	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.88c3	85 36		sta $36				sta 	zTemp0
.88c5	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.88c8	69 00		adc #$00			adc 	#0
.88ca	85 37		sta $37				sta 	zTemp0+1
.88cc					_SSMNoCarry:
.88cc	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.88cf	20 01 94	jsr $9401			jsr 	StringTempAllocate 			; allocate that many characters
.88d2	5a		phy				phy 								; save Y
.88d3	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.88d5					_SSMCopy:
.88d5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.88d7	f0 09		beq $88e2			beq 	_SSMEString 				; no more to copy
.88d9	20 3f 94	jsr $943f			jsr 	StringTempWrite 			; and write it out.
.88dc	c8		iny				iny
.88dd	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.88e0	d0 f3		bne $88d5			bne 	_SSMCopy
.88e2					_SSMEString:
.88e2	7a		ply				ply
.88e3					_SSMExit:
.88e3	60		rts				rts
.88e4					_SSMNull:
.88e4	a9 00		lda #$00			lda 	#0
.88e6	20 01 94	jsr $9401			jsr 	StringTempAllocate
.88e9	60		rts				rts
.88ea					SubstringInitial:
.88ea	da		phx				phx 								; save initial stack position
.88eb	08		php				php 								; save carry on stack indicating 2 parameters
.88ec	20 26 89	jsr $8926			jsr 	EvaluateString 				; get a string
.88ef	5a		phy				phy 								; calculate length to exponent.
.88f0	a0 ff		ldy #$ff			ldy 	#$FF
.88f2					_SIFindLength:
.88f2	c8		iny				iny
.88f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f5	d0 fb		bne $88f2			bne 	_SIFindLength
.88f7	98		tya				tya
.88f8	9d 28 06	sta $0628,x			sta 	NSExponent,x
.88fb	7a		ply				ply
.88fc	e8		inx				inx
.88fd	20 c3 8e	jsr $8ec3			jsr 	CheckComma 					; comma next
.8900	20 5f 89	jsr $895f			jsr 	Evaluate8BitInteger 		; get next parameter
.8903	28		plp				plp 								; is it the last parameter ?
.8904	90 07		bcc $890d			bcc 	_SSIExit 					; if so, exit.
.8906	e8		inx				inx
.8907	20 c3 8e	jsr $8ec3			jsr 	CheckComma 					; comma next
.890a	20 5f 89	jsr $895f			jsr 	Evaluate8BitInteger 		; get last parameter
.890d					_SSIExit:
.890d	fa		plx				plx
.890e	20 bb 8e	jsr $8ebb			jsr 	CheckRightBracket 			; check closing bracket
.8911	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/exprhelper.asm

.8912					EvaluateValue:
.8912	48		pha				pha
.8913	20 c4 84	jsr $84c4			jsr		EvaluateExpression 			; expression
.8916	20 06 85	jsr $8506			jsr 	Dereference					; derefernce it
.8919	68		pla				pla
.891a	60		rts				rts
.891b					EvaluateNumber:
.891b	20 12 89	jsr $8912			jsr 	EvaluateValue 				; get a value
.891e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8921	29 10		and #$10			and 	#NSBIsString
.8923	d0 16		bne $893b			bne 	HelperTypeError
.8925	60		rts				rts
.8926					EvaluateString:
.8926	20 12 89	jsr $8912			jsr 	EvaluateValue 				; get a value
.8929	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.892c	29 10		and #$10			and 	#NSBIsString
.892e	f0 0b		beq $893b			beq 	HelperTypeError
.8930					CopyAddressToTemp0:
.8930	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8933	85 36		sta $36				sta 	zTemp0
.8935	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8938	85 37		sta $37				sta 	zTemp0+1
.893a	60		rts				rts
.893b					HelperTypeError:
.893b	4c 8f 94	jmp $948f			jmp 	TypeError
.893e					EvaluateInteger:
.893e	20 1b 89	jsr $891b			jsr 	EvaluateNumber
.8941	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8944	d0 0a		bne $8950			bne 	HelperValueError 			; if not, it's a float.
.8946	60		rts				rts
.8947					EvaluateUnsignedInteger:
.8947	20 3e 89	jsr $893e			jsr 	EvaluateInteger 			; check integer is +ve
.894a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.894d	30 01		bmi $8950			bmi 	HelperValueError
.894f	60		rts				rts
.8950					HelperValueError:
.8950	4c 94 94	jmp $9494			jmp 	ArgumentError
.8953					Evaluate16BitInteger:
.8953	20 47 89	jsr $8947			jsr	 	EvaluateUnsignedInteger		; get integer
.8956	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8959	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.895c	d0 f2		bne $8950			bne 	HelperValueError
.895e	60		rts				rts
.895f					Evaluate8BitInteger:
.895f	20 47 89	jsr $8947			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8962	d0 ec		bne $8950			bne 	HelperValueError
.8964	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8967	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.896a	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.896d	d0 e1		bne $8950			bne 	HelperValueError
.896f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8972	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/utility.asm

.8973					NSMNegate:
.8973	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8976	49 80		eor #$80			eor 	#NSBIsNegative
.8978	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897b	60		rts				rts
.897c					NSMNegateMantissa:
.897c	38		sec				sec
.897d	a9 00		lda #$00			lda 	#0
.897f	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8982	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8985	a9 00		lda #$00			lda 	#0
.8987	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.898a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.898d	a9 00		lda #$00			lda 	#0
.898f	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8992	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8995	a9 00		lda #$00			lda 	#0
.8997	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.899a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.899d	60		rts				rts
.899e					NSMShiftUpTwo:
.899e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89a1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.89a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89a7	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.89aa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.89ad	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.89b0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.89b3	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.89b6	bd 28 06	lda $0628,x			lda 	NSExponent,x
.89b9	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.89bc	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89bf	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.89c2	60		rts				rts
.89c3					NSMSetZeroMantissaOnly:
.89c3	a9 00		lda #$00			lda 	#0
.89c5	80 08		bra $89cf			bra 	NSMSetMantissa
.89c7					NSMSetZero:
.89c7	a9 00		lda #$00			lda 	#0
.89c9					NSMSetByte:
.89c9	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.89cc	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.89cf					NSMSetMantissa:
.89cf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.89d2	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.89d5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.89d8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.89db	60		rts				rts
.89dc					NSMShiftLeft:
.89dc	18		clc				clc
.89dd					NSMRotateLeft:
.89dd	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.89e0	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.89e3	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.89e6	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.89e9	60		rts				rts
.89ea					NSMShiftRight:
.89ea	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.89ed	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.89f0	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.89f3	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.89f6	60		rts				rts
.89f7					NSMIsZero:
.89f7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.89fa	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.89fd	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8a00	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8a03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/strings/stringalloc.asm

.93e3					StringSystemInitialise:
.93e3	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.93e5	8d 0e 07	sta $070e			sta 	0+StringMemory
.93e8	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.93ea	8d 0f 07	sta $070f			sta 	1+StringMemory
.93ed	60		rts				rts
.93ee					StringSpaceInitialise:
.93ee	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.93f0	8d 10 07	sta $0710			sta 	StringInitialised
.93f3	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.93f6	8d 11 07	sta $0711			sta 	StringTempPointer
.93f9	ad 0f 07	lda $070f			lda 	StringMemory+1
.93fc	3a		dec a				dec 	a
.93fd	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9400	60		rts				rts
.9401					StringTempAllocate:
.9401	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9403	b0 35		bcs $943a			bcs 	_STALength
.9405	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9408	30 05		bmi $940f			bmi 	_STAAllocate
.940a	48		pha				pha 								; save value to subtract.
.940b	20 ee 93	jsr $93ee			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.940e	68		pla				pla 								; restore it
.940f					_STAAllocate:
.940f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9411	18		clc				clc  								; deliberate allows one more
.9412	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9415	8d 11 07	sta $0711			sta 	StringTempPointer
.9418	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.941b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.941d	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9420	69 ff		adc #$ff			adc 	#$FF
.9422	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9425	85 3d		sta $3d				sta 	zsTemp+1
.9427	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.942a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.942d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9430	a9 10		lda #$10			lda 	#NSTString
.9432	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9435	a9 00		lda #$00			lda 	#0 							; clear the target string
.9437	92 3c		sta ($3c)			sta 	(zsTemp)
.9439	60		rts				rts
.943a					_STALength:
.943a	a9 09		lda #$09		lda	#9
.943c	4c 1b 82	jmp $821b		jmp	ErrorHandler
.943f					StringTempWrite:
.943f	48		pha				pha
.9440	92 3c		sta ($3c)			sta 	(zsTemp)
.9442	e6 3c		inc $3c				inc 	zsTemp
.9444	d0 02		bne $9448			bne 	_STWNoCarry
.9446	e6 3d		inc $3d				inc 	zsTemp+1
.9448					_STWNoCarry:
.9448	a9 00		lda #$00			lda 	#0
.944a	92 3c		sta ($3c)			sta 	(zsTemp)
.944c	68		pla				pla
.944d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/backload.asm

.8a04					BackloadProgram:
.8a04	a2 ff		ldx #$ff			ldx 	#$FF
.8a06	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8a09	20 30 8a	jsr $8a30			jsr 	BLReadByte
.8a0c	30 1e		bmi $8a2c			bmi 	_BPExit
.8a0e					_BPCopy:
.8a0e	e8		inx				inx  								; copy byte in
.8a0f	9d 13 08	sta $0813,x			sta 	lineBuffer,x
.8a12	9e 14 08	stz $0814,x			stz 	lineBuffer+1,x
.8a15	20 30 8a	jsr $8a30			jsr 	BLReadByte 					; read next byte
.8a18	30 0a		bmi $8a24			bmi 	_BPEndLine 					; -ve = EOL
.8a1a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8a1c	d0 02		bne $8a20			bne 	_BPNotTab
.8a1e	a9 20		lda #$20			lda 	#' '
.8a20					_BPNotTab:
.8a20	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8a22	b0 ea		bcs $8a0e			bcs 	_BPCopy
.8a24					_BPEndLine:
.8a24	20 ec 8b	jsr $8bec			jsr 	TokeniseLine 				; tokenise the line.
.8a27	20 17 81	jsr $8117			jsr 	MemoryAppend 				; append to current program
.8a2a	80 d8		bra $8a04			bra 	BackloadProgram
.8a2c					_BPExit:
.8a2c	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variables etc.
.8a2f	60		rts				rts
.8a30					BLReadByte:
.8a30					_BLLoad:
.8a30	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8a33	ee 31 8a	inc $8a31			inc 	_BLLoad+1
.8a36	d0 03		bne $8a3b			bne 	_BLNoCarry
.8a38	ee 32 8a	inc $8a32			inc 	_BLLoad+2
.8a3b					_BLNoCarry:
.8a3b	c9 00		cmp #$00			cmp 	#0
.8a3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/searchtokens.asm

.8a3e					TokeniseSearchTable:
.8a3e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8a40	85 36		sta $36				sta 	zTemp0
.8a42	a0 00		ldy #$00			ldy 	#0
.8a44	a9 80		lda #$80			lda 	#$80 						; token #
.8a46	85 38		sta $38				sta 	zTemp1
.8a48					_TSTLoop:
.8a48	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8a4a	30 49		bmi $8a95			bmi 	_TSTFail 					; -ve = end of table
.8a4c	f0 2e		beq $8a7c			beq 	_TSTNext 					; zero, check next it's a dummy
.8a4e	c8		iny				iny 								; get the hash
.8a4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a51	88		dey				dey
.8a52	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8a55	d0 25		bne $8a7c			bne 	_TSTNext
.8a57	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8a5a	38		sec				sec
.8a5b	ed 00 07	sbc $0700			sbc 	identStart
.8a5e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8a60	d0 1a		bne $8a7c			bne 	_TSTNext
.8a62	5a		phy				phy 								; save Y , we might fail
.8a63	c8		iny				iny 								; point to text
.8a64	c8		iny				iny
.8a65	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8a68					_TSTCompareName:
.8a68	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; compare text.
.8a6b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8a6d	d0 0c		bne $8a7b			bne 	_TSTNextPullY 				; fail, pullY and do next
.8a6f	e8		inx				inx
.8a70	c8		iny				iny
.8a71	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8a74	d0 f2		bne $8a68			bne 	_TSTCompareName
.8a76	7a		ply				ply 								; throw Y
.8a77	a5 38		lda $38				lda 	zTemp1 						; get token #
.8a79	38		sec				sec 								; return with CS = passed.
.8a7a	60		rts				rts
.8a7b					_TSTNextPullY:
.8a7b	7a		ply				ply 								; restore current, fall through.
.8a7c					_TSTNext:
.8a7c	e6 38		inc $38				inc 	zTemp1 						; token counter
.8a7e	98		tya				tya
.8a7f	18		clc				clc
.8a80	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8a82	1a		inc a				inc 	a 							; +1
.8a83	1a		inc a				inc 	a 							; +2
.8a84	a8		tay				tay
.8a85	10 c1		bpl $8a48			bpl 	_TSTLoop 					; if Y < $80 loop back
.8a87	98		tya				tya 								; add Y to zTemp0 and reset Y
.8a88	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8a8a	18		clc				clc  								; but have tables > 255 bytes
.8a8b	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8a8d	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8a8f	90 b7		bcc $8a48			bcc 	_TSTLoop
.8a91	e6 37		inc $37				inc 	zTemp0+1
.8a93	80 b3		bra $8a48			bra 	_TSTLoop
.8a95					_TSTFail:
.8a95	18		clc				clc
.8a96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/tokenise.asm


;******  Processing file: ./core/tokeniser/../../generated/kwdtext.dat

.8a97					KeywordSet0:
>8a97	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a99	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a9b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a9d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8aa3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8aab	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8ab1	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8ab8	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8abf	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8ac6	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8acc	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8ad4	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8adc	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8ae2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8ae9	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8aef	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8af7	28
>8af8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8afe	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8b04	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8b0a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8b11	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8b17	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8b1d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8b22	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8b26	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8b2c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8b34	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8b3b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8b42	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8b4a	43
>8b4b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8b51	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8b58	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8b5e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8b64	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8b69	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8b6f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8b74	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8b7b	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8b81	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8b86	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8b8d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8b93	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8b98	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8ba0	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8ba6	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8baa	ff					.text	$FF
.8bab					KeywordSet1:
>8bab	00 65					.text	0,$65,""               ; $80 !0:EOF
>8bad	00 58					.text	0,$58,""               ; $81 !1:SH1
>8baf	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8bb1	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8bb9	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8bc0	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8bc5	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8bcb	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8bd0	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8bd8	45
>8bd9	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8bde	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8be4	ff					.text	$FF
.8be5					KeywordSet2:
>8be5	00 65					.text	0,$65,""               ; $80 !0:EOF
>8be7	00 58					.text	0,$58,""               ; $81 !1:SH1
>8be9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8beb	ff					.text	$FF

;******  Return to file: ./core/tokeniser/tokenise.asm

.8bec					TokeniseLine:
.8bec	20 74 8d	jsr $8d74			jsr 	FixLineBufferCase 			; fix line case
.8bef	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8bf1	8d 13 07	sta $0713			sta 	tokenOffset
.8bf4	9c 14 07	stz $0714			stz 	tokenLineNumber
.8bf7	9c 15 07	stz $0715			stz 	tokenLineNumber+1
.8bfa	a2 ff		ldx #$ff			ldx 	#$FF
.8bfc					_TKFindFirst:
.8bfc	e8		inx				inx
.8bfd	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8c00	f0 79		beq $8c7b			beq 	_TKExit
.8c02	c9 20		cmp #$20			cmp 	#' '
.8c04	90 f6		bcc $8bfc			bcc 	_TKFindFirst
.8c06	c9 30		cmp #$30			cmp 	#'0'
.8c08	90 07		bcc $8c11			bcc 	_TKNoLineNumber
.8c0a	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c0c	b0 03		bcs $8c11			bcs 	_TKNoLineNumber
.8c0e	20 9e 8d	jsr $8d9e			jsr 	TokeniseExtractLineNumber
.8c11					_TKNoLineNumber:
.8c11					_TKTokeniseLoop:
.8c11	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8c14	f0 65		beq $8c7b			beq 	_TKExit
.8c16	e8		inx				inx
.8c17	c9 20		cmp #$20			cmp 	#' '
.8c19	f0 f6		beq $8c11			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8c1b	ca		dex				dex 								; undo last get, A contains character, X is position.
.8c1c	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8c1e	f0 61		beq $8c81			beq 	_TKTokeniseIdentifier
.8c20	c9 41		cmp #$41			cmp 	#'A'
.8c22	90 04		bcc $8c28			bcc 	_TKTokenisePunctuation
.8c24	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8c26	90 59		bcc $8c81			bcc 	_TKTokeniseIdentifier
.8c28					_TKTokenisePunctuation:
.8c28	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8c2a	f0 27		beq $8c53			beq 	_TKString
.8c2c	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8c2e	f0 28		beq $8c58			beq 	_TKHexConstant
.8c30	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8c32	f0 29		beq $8c5d			beq 	_TKCheckDouble
.8c34	c9 3e		cmp #$3e			cmp 	#'>'
.8c36	f0 25		beq $8c5d			beq 	_TKCheckDouble
.8c38					_TKStandardPunctuation:
.8c38	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get it back.
.8c3b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8c3d	90 0e		bcc $8c4d			bcc 	_TKNoShift
.8c3f	48		pha				pha 								; save
.8c40	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8c42	85 36		sta $36				sta 	zTemp0
.8c44	68		pla				pla
.8c45	29 20		and #$20			and 	#32 						; bit 5
.8c47	4a		lsr a				lsr 	a 							; shift into bit 3
.8c48	4a		lsr a				lsr 	a
.8c49	05 36		ora $36				ora 	zTemp0
.8c4b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8c4d					_TKNoShift:
.8c4d	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte 			; write the punctuation character
.8c50	e8		inx				inx 								; consume the character
.8c51	80 be		bra $8c11			bra 	_TKTokeniseLoop 			; and loop round again.
.8c53					_TKString:
.8c53	20 03 8d	jsr $8d03			jsr 	TokeniseString
.8c56	80 b9		bra $8c11			bra 	_TKTokeniseLoop
.8c58					_TKHexConstant:
.8c58	20 3e 8d	jsr $8d3e			jsr 	TokeniseHexConstant
.8c5b	80 b4		bra $8c11			bra 	_TKTokeniseLoop
.8c5d					_TKCheckDouble:
.8c5d	bd 14 08	lda $0814,x			lda 	lineBuffer+1,x 				; get next character
.8c60	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8c62	90 d4		bcc $8c38			bcc 	_TKStandardPunctuation
.8c64	c9 3f		cmp #$3f			cmp 	#'>'+1
.8c66	b0 d0		bcs $8c38			bcs 	_TKStandardPunctuation
.8c68	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8c6b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8c6d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8c6e	7d 14 08	adc $0814,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8c71	38		sec				sec
.8c72	e9 3c		sbc #$3c			sbc 	#'<'
.8c74	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8c77	e8		inx				inx 								; consume both
.8c78	e8		inx				inx
.8c79	80 96		bra $8c11			bra 	_TKTokeniseLoop
.8c7b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8c7d	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8c80	60		rts				rts
.8c81					_TKTokeniseIdentifier:
.8c81	8e 00 07	stx $0700			stx 	identStart 					; save start
.8c84	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8c87					_TKCheckLoop:
.8c87	e8		inx				inx 								; look at next, we know first is identifier.
.8c88	bd 13 08	lda $0813,x			lda  	lineBuffer,x
.8c8b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8c8d	f0 f8		beq $8c87			beq 	_TKCheckLoop
.8c8f	c9 30		cmp #$30			cmp	 	#"0"
.8c91	90 0c		bcc $8c9f			bcc 	_TKEndIdentifier
.8c93	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c95	90 f0		bcc $8c87			bcc 	_TKCheckLoop
.8c97	c9 41		cmp #$41			cmp	 	#"A"
.8c99	90 04		bcc $8c9f			bcc 	_TKEndIdentifier
.8c9b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8c9d	90 e8		bcc $8c87			bcc 	_TKCheckLoop
.8c9f					_TKEndIdentifier:
.8c9f	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8ca2	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8ca4	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8ca6	f0 06		beq $8cae			beq 	_TKHasTypeCharacter
.8ca8	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8caa	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8cac	d0 07		bne $8cb5			bne 	_TKNoTypeCharacter
.8cae					_TKHasTypeCharacter:
.8cae	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8cb1	e8		inx				inx 								; read next
.8cb2	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8cb5					_TKNoTypeCharacter:
.8cb5	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8cb7	d0 09		bne $8cc2			bne 	_TKNoArray
.8cb9	e8		inx				inx 								; skip the (
.8cba	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8cbd	09 04		ora #$04			ora 	#$04
.8cbf	8d 04 07	sta $0704			sta 	identTypeByte
.8cc2					_TKNoArray:
.8cc2	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8cc5	20 5f 8d	jsr $8d5f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8cc8	a0 8a		ldy #$8a			ldy 	#(KeywordSet0) >> 8
.8cca	a9 97		lda #$97			lda 	#(KeywordSet0) & $FF
.8ccc	20 3e 8a	jsr $8a3e			jsr 	TokeniseSearchTable
.8ccf	a2 00		ldx #$00			ldx 	#0
.8cd1	b0 1f		bcs $8cf2			bcs 	_TKFoundToken
.8cd3	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8cd5	a9 ab		lda #$ab			lda 	#(KeywordSet1) & $FF
.8cd7	20 3e 8a	jsr $8a3e			jsr 	TokeniseSearchTable
.8cda	a2 81		ldx #$81			ldx 	#$81
.8cdc	b0 14		bcs $8cf2			bcs 	_TKFoundToken
.8cde	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8ce0	a9 ab		lda #$ab			lda 	#(KeywordSet1) & $FF
.8ce2	20 3e 8a	jsr $8a3e			jsr 	TokeniseSearchTable
.8ce5	a2 82		ldx #$82			ldx 	#$82
.8ce7	b0 09		bcs $8cf2			bcs 	_TKFoundToken
.8ce9	20 ef 8d	jsr $8def			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8cec	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8cef	4c 11 8c	jmp $8c11			jmp 	_TKTokeniseLoop 			; and go round again.
.8cf2					_TKFoundToken:
.8cf2	48		pha				pha 								; save token
.8cf3	8a		txa				txa 								; shift in X, is there one ?
.8cf4	f0 03		beq $8cf9			beq 	_TKNoTShift
.8cf6	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte 			; if so, write it out
.8cf9					_TKNoTShift:
.8cf9	68		pla				pla 								; restore and write token
.8cfa	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8cfd	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8d00	4c 11 8c	jmp $8c11			jmp 	_TKTokeniseLoop 			; and go round again.
.8d03					TokeniseString:
.8d03	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8d05	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8d08	e8		inx				inx									; start of quoted string.
.8d09	da		phx				phx 								; push start of string on top
.8d0a	ca		dex				dex
.8d0b					_TSFindEnd:
.8d0b	e8		inx				inx
.8d0c	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; next character
.8d0f	f0 04		beq $8d15			beq 	_TSEndOfString
.8d11	c9 22		cmp #$22			cmp 	#'"'
.8d13	d0 f6		bne $8d0b			bne 	_TSFindEnd
.8d15					_TSEndOfString:
.8d15	7a		ply				ply  								; so now Y is first character, X is character after end.
.8d16	48		pha				pha 								; save terminating character
.8d17	20 1f 8d	jsr $8d1f			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8d1a	68		pla				pla 								; terminating character
.8d1b	f0 01		beq $8d1e			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8d1d	e8		inx				inx
.8d1e					_TSNotQuote:
.8d1e	60		rts				rts
.8d1f					TOWriteBlockXY:
.8d1f	86 36		stx $36				stx 	zTemp0 						; write end character
.8d21	98		tya				tya
.8d22	49 ff		eor #$ff			eor 	#$FF
.8d24	38		sec				sec
.8d25	65 36		adc $36				adc 	zTemp0
.8d27	1a		inc a				inc 	a 							; one extra for NULL
.8d28	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8d2b					_TOBlockLoop:
.8d2b	c4 36		cpy $36				cpy 	zTemp0
.8d2d	f0 09		beq $8d38			beq 	_TOBlockExit
.8d2f	b9 13 08	lda $0813,y			lda 	lineBuffer,y
.8d32	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8d35	c8		iny				iny
.8d36	80 f3		bra $8d2b			bra 	_TOBlockLoop
.8d38					_TOBlockExit:
.8d38	a9 00		lda #$00			lda 	#0
.8d3a	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8d3d	60		rts				rts
.8d3e					TokeniseHexConstant:
.8d3e	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8d40	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8d43	e8		inx				inx									; start of quoted string.
.8d44	da		phx				phx 								; push start of constant on top
.8d45	ca		dex				dex
.8d46					_THFindLoop:
.8d46	e8		inx				inx
.8d47	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8d4a	c9 30		cmp #$30			cmp 	#"0"
.8d4c	90 0c		bcc $8d5a			bcc 	_THFoundEnd
.8d4e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d50	90 f4		bcc $8d46			bcc 	_THFindLoop
.8d52	c9 41		cmp #$41			cmp 	#"A"
.8d54	90 04		bcc $8d5a			bcc 	_THFoundEnd
.8d56	c9 47		cmp #$47			cmp 	#"F"+1
.8d58	90 ec		bcc $8d46			bcc 	_THFindLoop
.8d5a					_THFoundEnd:
.8d5a	7a		ply				ply 								; restore start
.8d5b	20 1f 8d	jsr $8d1f			jsr 	TOWriteBlockXY 				; output the block
.8d5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/utility.asm

.8d5f					TokeniseCalculateHash:
.8d5f	da		phx				phx
.8d60	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8d63	a9 00		lda #$00			lda 	#0
.8d65					_TCHLoop:
.8d65	18		clc				clc
.8d66	7d 13 08	adc $0813,x			adc 	lineBuffer,x
.8d69	e8		inx				inx
.8d6a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8d6d	d0 f6		bne $8d65			bne 	_TCHLoop
.8d6f	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8d72	fa		plx				plx
.8d73	60		rts				rts
.8d74					FixLineBufferCase:
.8d74	a2 00		ldx #$00			ldx 	#0
.8d76					_FLBCLoop:
.8d76	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get next character
.8d79	f0 22		beq $8d9d			beq 	_FLBCExit 					; end of string.
.8d7b	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8d7d	f0 11		beq $8d90			beq 	_FLBCInQuotes
.8d7f	e8		inx				inx
.8d80	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8d82	90 f2		bcc $8d76			bcc 	_FLBCLoop
.8d84	c9 7b		cmp #$7b			cmp 	#'z'+1
.8d86	b0 ee		bcs $8d76			bcs 	_FLBCLoop
.8d88	38		sec				sec 								; make U/C
.8d89	e9 20		sbc #$20			sbc 	#32
.8d8b	9d 12 08	sta $0812,x			sta	 	lineBuffer-1,x 				; write back
.8d8e	80 e6		bra $8d76			bra 	_FLBCLoop
.8d90					_FLBCInQuotes:
.8d90	e8		inx				inx 								; advance
.8d91	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get next
.8d94	f0 07		beq $8d9d			beq 	_FLBCExit 					; exit on EOS
.8d96	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8d98	d0 f6		bne $8d90			bne 	_FLBCInQuotes
.8d9a	e8		inx				inx 								; skip over it
.8d9b	80 d9		bra $8d76			bra 	_FLBCLoop
.8d9d					_FLBCExit:
.8d9d	60		rts				rts
.8d9e					TokeniseExtractLineNumber:
.8d9e	ad 15 07	lda $0715			lda 	tokenLineNumber+1 			; push current value on stack
.8da1	48		pha				pha
.8da2	ad 14 07	lda $0714			lda 	tokenLineNumber
.8da5	48		pha				pha
.8da6	20 dc 8d	jsr $8ddc			jsr 	_TELNTimes2 				; line # x 4
.8da9	20 dc 8d	jsr $8ddc			jsr 	_TELNTimes2 				; line # x 2
.8dac	18		clc				clc 								; add stacked value
.8dad	68		pla				pla
.8dae	6d 14 07	adc $0714			adc 	tokenLineNumber
.8db1	8d 14 07	sta $0714			sta 	tokenLineNumber
.8db4	68		pla				pla
.8db5	6d 15 07	adc $0715			adc 	tokenLineNumber+1
.8db8	8d 15 07	sta $0715			sta 	tokenLineNumber+1 			; line # x 5
.8dbb	20 dc 8d	jsr $8ddc			jsr 	_TELNTimes2 				; line # x 10
.8dbe	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get and consume character
.8dc1	e8		inx				inx
.8dc2	29 0f		and #$0f			and 	#15 						; add to line #
.8dc4	18		clc				clc
.8dc5	6d 14 07	adc $0714			adc 	tokenLineNumber
.8dc8	8d 14 07	sta $0714			sta 	tokenLineNumber
.8dcb	90 03		bcc $8dd0			bcc 	_TLENNoCarry
.8dcd	ee 15 07	inc $0715			inc 	tokenLineNumber+1
.8dd0					_TLENNoCarry:
.8dd0	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; more digits ?
.8dd3	c9 30		cmp #$30			cmp 	#'0'
.8dd5	90 04		bcc $8ddb			bcc 	_TLENExit
.8dd7	c9 3a		cmp #$3a			cmp 	#'9'+1
.8dd9	90 c3		bcc $8d9e			bcc 	TokeniseExtractLineNumber
.8ddb					_TLENExit:
.8ddb	60		rts				rts
.8ddc					_TELNTimes2:
.8ddc	0e 14 07	asl $0714			asl 	tokenLineNumber
.8ddf	2e 15 07	rol $0715			rol 	tokenLineNumber+1
.8de2	60		rts				rts
.8de3					TokeniseWriteByte:
.8de3	da		phx				phx
.8de4	ae 13 07	ldx $0713			ldx 	tokenOffset 				; next slot to write to
.8de7	9d 13 07	sta $0713,x			sta 	tokenOffset,x 				; write byte out
.8dea	ee 13 07	inc $0713			inc 	tokenOffset 				; advance slot.
.8ded	fa		plx				plx
.8dee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/variablerecord.asm

.8def					CheckCreateVariableRecord:
.8def	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8df1	85 36		sta $36				sta 	0+zTemp0
.8df3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8df5	85 37		sta $37				sta 	1+zTemp0
.8df7	20 5b 81	jsr $815b			jsr 	VariableOpen 				; make variable space available
.8dfa					_CCVSearch:
.8dfa	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8dfc	f0 2c		beq $8e2a			beq 	_CCVFail
.8dfe	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8e00	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8e02	cd 03 07	cmp $0703			cmp 	identHash
.8e05	d0 16		bne $8e1d			bne 	_CCVNext
.8e07	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8e09	ae 00 07	ldx $0700			ldx 	identStart
.8e0c					_CCVCompare:
.8e0c	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8e0f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8e11	e8		inx				inx 								; advance pointers
.8e12	c8		iny				iny
.8e13	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8e14	d0 07		bne $8e1d			bne 	_CCVNext  					; didn't match go to next.
.8e16	90 f4		bcc $8e0c			bcc 	_CCVCompare 				; not finished yet.
.8e18	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8e1b	f0 41		beq $8e5e			beq 	_CCVFound 					; yes, we were successful
.8e1d					_CCVNext:
.8e1d	18		clc				clc
.8e1e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8e20	65 36		adc $36				adc 	zTemp0
.8e22	85 36		sta $36				sta 	zTemp0
.8e24	90 d4		bcc $8dfa			bcc 	_CCVSearch
.8e26	e6 37		inc $37				inc 	zTemp0+1
.8e28	80 d0		bra $8dfa			bra 	_CCVSearch
.8e2a					_CCVFail:
.8e2a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8e2c	ad 03 07	lda $0703			lda 	identHash
.8e2f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e31	c8		iny				iny 								; offset 2 is the type byte
.8e32	ad 04 07	lda $0704			lda 	identTypeByte
.8e35	91 36		sta ($36),y			sta 	(zTemp0),y
.8e37	c8		iny				iny
.8e38					_CCVData:
.8e38	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8e3a	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3c	c8		iny				iny
.8e3d	c0 08		cpy #$08			cpy 	#8
.8e3f	90 f7		bcc $8e38			bcc 	_CCVData
.8e41	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8e44					_CCVCopyName:
.8e44	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8e47	91 36		sta ($36),y			sta 	(zTemp0),y
.8e49	e8		inx				inx
.8e4a	c8		iny				iny
.8e4b	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8e4e	d0 f4		bne $8e44			bne 	_CCVCopyName
.8e50	98		tya				tya 								; patch offset
.8e51	92 36		sta ($36)			sta 	(zTemp0)
.8e53	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8e55	91 36		sta ($36),y			sta 	(zTemp0),y
.8e57	88		dey				dey
.8e58	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8e5a	09 80		ora #$80			ora 	#$80
.8e5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8e5e					_CCVFound:
.8e5e	20 5c 81	jsr $815c			jsr 	VariableClose 				; map out variables, perhaps.
.8e61	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8e63	38		sec				sec
.8e64	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8e66	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8e68	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8e6b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8e6d	20 e3 8d	jsr $8de3			jsr 	TokeniseWriteByte
.8e70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.944e					DecimalScalarTable:
>944e	66 66 66 66				.dword $66666666 ; 0.1
>9452	de					.byte $de
>9453	1f 85 eb 51				.dword $51eb851f ; 0.01
>9457	db					.byte $db
>9458	4c 37 89 41				.dword $4189374c ; 0.001
>945c	d8					.byte $d8
>945d	ac 8b db 68				.dword $68db8bac ; 0.0001
>9461	d4					.byte $d4
>9462	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9466	d1					.byte $d1
>9467	83 de 1b 43				.dword $431bde83 ; 1e-06
>946b	ce					.byte $ce
>946c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9470	ca					.byte $ca
>9471	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9475	c7					.byte $c7
>9476	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>947a	c4					.byte $c4
>947b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>947f	c0					.byte $c0
>9480	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9484	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.9485					SyntaxError:
.9485	a9 02		lda #$02		lda	#2
.9487	4c 1b 82	jmp $821b		jmp	ErrorHandler
.948a					RangeError:
.948a	a9 04		lda #$04		lda	#4
.948c	4c 1b 82	jmp $821b		jmp	ErrorHandler
.948f					TypeError:
.948f	a9 05		lda #$05		lda	#5
.9491	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9494					ArgumentError:
.9494	a9 07		lda #$07		lda	#7
.9496	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9499					NotDoneError:
.9499	a9 0c		lda #$0c		lda	#12
.949b	4c 1b 82	jmp $821b		jmp	ErrorHandler
.949e					ErrorText:
>949e	42 72 65 61 6b 00			.text	"Break",0
>94a4	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>94ac	72 72 6f 72 00
>94b1	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>94b9	20 62 79 20 7a 65 72 6f 00
>94c2	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>94ca	61 6e 67 65 00
>94cf	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>94d7	6d 61 74 63 68 00
>94dd	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>94e5	65 6d 6f 72 79 00
>94eb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>94f3	61 72 67 75 6d 65 6e 74 00
>94fc	53 74 6f 70 00				.text	"Stop",0
>9501	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9509	6f 6f 20 6c 6f 6e 67 00
>9511	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9519	6e 20 66 61 69 6c 65 64 00
>9522	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>952a	61 74 61 00
>952e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9536	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  End of listing
