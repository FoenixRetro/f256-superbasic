
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sun Jan  1 21:07:58 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c ad 80	jmp $80ad	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 43 bc	jsr $bc43		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 46 bc	jsr $bc46		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 02 bc	jsr $bc02		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 52 bc	jsr $bc52		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 ac bc	jsr $bcac		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 b6 bc	jsr $bcb6		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLWriteBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 15 bd	jsr $bd15		jsr	Export_KNLWriteBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLCloseFile:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 92 bc	jsr $bc92		jsr	Export_KNLCloseFile
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						GXGraphicDraw:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						SNDCommand:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 75 bb	jsr $bb75		jsr	Export_SNDCommand
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDUpdate:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 a8 bb	jsr $bba8		jsr	Export_SNDUpdate
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						TKListConvertLine:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 26 b5	jsr $b526		jsr	Export_TKListConvertLine
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKTokeniseLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 ba b7	jsr $b7ba		jsr	Export_TKTokeniseLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80ad		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80af		9a		txs				txs
.80b0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80b2		09 80		ora #$80			ora 	#$80
.80b4		85 00		sta $00				sta 	0
.80b6		20 4e a8	jsr $a84e			jsr		UpdateFont 					; update font if between FPGA updates.
.80b9		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.80bc		9c 5c 06	stz $065c			stz 	DefaultDrive 				; zero the default drive.
.80bf		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c1		aa		tax				tax
.80c2		a8		tay				tay
.80c3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.80c6		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80c8		20 85 80	jsr $8085			jsr 	SNDCommand
.80cb		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80cd		a9 db		lda #$db			lda 	#Prompt & $FF
.80cf		20 84 91	jsr $9184			jsr 	PrintStringXA
.80d2		20 7c 8b	jsr $8b7c			jsr 	NewProgram 					; erase current program
.80d5		4c 26 84	jmp $8426			jmp 	WarmStart					; make same size.
.80d8		4c 26 84	jmp $8426			jmp 	WarmStart
.80db						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80db		41 6c 70 68 61 20 32 33			.text "Alpha 23 built 01-Jan-23. "
>80e3		20 62 75 69 6c 74 20 30 31 2d 4a 61 6e 2d 32 33
>80f3		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80f5		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80f8						AssembleGroup1:
.80f8		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80fa		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80fd		80 02		bra $8101			bra 	AsmGroup12
.80ff						AssembleGroup2:
.80ff		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8101						AsmGroup12:
.8101		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8104		68		pla				pla 								; pop the return address to access the information following.
.8105		fa		plx				plx
.8106		20 8d 81	jsr $818d			jsr 	AccessParameters 			; get opcode and save as base
.8109		8d 24 04	sta $0424			sta 	BaseOpcode
.810c		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.810f		d0 08		bne $8119			bne 	_AG12HaveMask
.8111		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8113		20 95 81	jsr $8195			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8116		8d 25 04	sta $0425			sta 	ModeMask
.8119						_AG12HaveMask:
.8119		20 c9 82	jsr $82c9			jsr 	TypeAndCalculateOperand 	; get zero page type
.811c		da		phx				phx 								; save found address mode
.811d		20 f9 81	jsr $81f9			jsr 	AssembleModeX
.8120		fa		plx				plx  								; restore address mode
.8121		b0 0b		bcs $812e			bcs 	_AG12Exit
.8123		20 2f 81	jsr $812f			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8126		20 f9 81	jsr $81f9			jsr 	AssembleModeX
.8129		b0 03		bcs $812e			bcs 	_AG12Exit
.812b		4c f4 a1	jmp $a1f4			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.812e						_AG12Exit:
.812e		60		rts				rts
.812f						PromoteToAbsolute:
.812f		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8131		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8133		f0 19		beq $814e			beq 	_PTADo
.8135		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8137		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8139		f0 13		beq $814e			beq 	_PTADo
.813b		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813d		e0 80		cpx #$80			cpx 	#AM_ZEROY
.813f		f0 0d		beq $814e			beq 	_PTADo
.8141		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8143		e0 d1		cpx #$d1			cpx 	#AM_IND
.8145		f0 07		beq $814e			beq 	_PTADo
.8147		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8149		e0 c0		cpx #$c0			cpx 	#AM_INDX
.814b		f0 01		beq $814e			beq 	_PTADo
.814d		60		rts				rts
.814e						_PTADo:
.814e		aa		tax				tax
.814f		60		rts				rts
.8150						AssembleGroup3:
.8150		68		pla				pla 								; get parameters, which is just the opcode.
.8151		fa		plx				plx
.8152		20 8d 81	jsr $818d			jsr 	AccessParameters 			; get and output opcode
.8155		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8158		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get a 16 bit operand
.815b		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815d		38		sec				sec
.815e		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8161		48		pha				pha 								; LSB in A
.8162		a5 60		lda $60				lda 	NSMantissa1
.8164		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8167		aa		tax				tax 								; MSB in X
.8168		68		pla				pla
.8169		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.816a		69 7f		adc #$7f			adc 	#$7F
.816c		90 01		bcc $816f			bcc 	_AG3NoCarry
.816e		e8		inx				inx
.816f						_AG3NoCarry:
.816f		38		sec				sec 								; fix back and write out anyways.
.8170		e9 80		sbc #$80			sbc 	#$80
.8172		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8175		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8177		f0 0a		beq $8183			beq 	_AG3Exit
.8179		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.817c		29 01		and #$01			and 	#1
.817e		f0 03		beq $8183			beq 	_AG3Exit
.8180		4c f9 a1	jmp $a1f9			jmp 	RangeError 					; no, branch is out of range
.8183						_AG3Exit:
.8183		60		rts				rts
.8184						AssembleGroup4:
.8184		68		pla				pla 								; pop address
.8185		fa		plx				plx
.8186		20 8d 81	jsr $818d			jsr 	AccessParameters 			; access and get first
.8189		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte 			; output it.
.818c		60		rts				rts
.818d						AccessParameters:
.818d		8d 21 04	sta $0421			sta 	ParamStart
.8190		8e 22 04	stx $0422			stx 	ParamStart+1
.8193		a9 01		lda #$01			lda 	#1
.8195						GetParameter:
.8195		5a		phy				phy
.8196		a8		tay				tay
.8197		ad 21 04	lda $0421			lda 	ParamStart
.819a		85 36		sta $36				sta 	zTemp0
.819c		ad 22 04	lda $0422			lda 	ParamStart+1
.819f		85 37		sta $37				sta 	zTemp0+1
.81a1		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a3		7a		ply				ply
.81a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a5						AssemblerWriteByte:
.81a5		48		pha			pha
.81a6		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81a9		29 02		and #$02		and 	#2
.81ab		f0 1b		beq $81c8		beq 	_AWBNoPrint
.81ad		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81b0		20 e3 81	jsr $81e3		jsr 	PrintHex
.81b3		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b6		20 e3 81	jsr $81e3		jsr 	PrintHex
.81b9		a9 20		lda #$20		lda 	#' '
.81bb		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81be		68		pla			pla 									; print byte
.81bf		48		pha			pha
.81c0		20 e3 81	jsr $81e3		jsr 	PrintHex
.81c3		a9 0d		lda #$0d		lda 	#13
.81c5		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c8						_AWBNoPrint:
.81c8		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81cb		85 36		sta $36			sta 	zTemp0
.81cd		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81d0		f0 0e		beq $81e0		beq 	_AWBRange
.81d2		85 37		sta $37			sta 	zTemp0+1
.81d4		68		pla			pla 									; write byte out
.81d5		92 36		sta ($36)		sta 	(zTemp0)
.81d7		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81da		d0 03		bne $81df		bne 	_AWBNoCarry
.81dc		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81df						_AWBNoCarry:
.81df		60		rts			rts
.81e0						_AWBRange:
.81e0		4c f9 a1	jmp $a1f9		jmp 	RangeError
.81e3						PrintHex:
.81e3		48		pha				pha
.81e4		4a		lsr a				lsr 	a
.81e5		4a		lsr a				lsr 	a
.81e6		4a		lsr a				lsr 	a
.81e7		4a		lsr a				lsr 	a
.81e8		20 ec 81	jsr $81ec			jsr 	_PrintNibble
.81eb		68		pla				pla
.81ec						_PrintNibble:
.81ec		29 0f		and #$0f			and 	#15
.81ee		c9 0a		cmp #$0a			cmp 	#10
.81f0		90 02		bcc $81f4			bcc 	_NoShift
.81f2		69 06		adc #$06			adc 	#6
.81f4						_NoShift:
.81f4		69 30		adc #$30			adc 	#48
.81f6		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81f9						AssembleModeX:
.81f9		5a		phy				phy
.81fa		ad 23 04	lda $0423			lda 	IsGroup1
.81fd		f0 17		beq $8216			beq 	_AMXGroup2
.81ff		8a		txa				txa 							; is it in group # 1
.8200		29 40		and #$40			and 	#AM_ISG1
.8202		f0 4d		beq $8251			beq 	_AMXFail 				; no, give up.
.8204		8a		txa				txa 							; get back.
.8205		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8207		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8209		d0 22		bne $822d			bne 	_AMXHaveInfo
.820b		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.820e		c9 81		cmp #$81			cmp 	#$81
.8210		f0 3f		beq $8251			beq 	_AMXFail
.8212		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8214		80 17		bra $822d			bra 	_AMXHaveInfo 			; odd design decision there.
.8216						_AMXGroup2:
.8216		8a		txa				txa 							; is it in group 2 ?
.8217		29 20		and #$20			and 	#AM_ISG2
.8219		f0 36		beq $8251			beq 	_AMXFail 				; no, give up.
.821b		8a		txa				txa 							; get the offset into Y
.821c		29 1f		and #$1f			and 	#$1F
.821e		4a		lsr a				lsr 	a 						; make it 0-7.
.821f		4a		lsr a				lsr  	a
.8220		a8		tay				tay
.8221		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8224						_AMXCheckOkay:
.8224		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8225		88		dey				dey
.8226		10 fc		bpl $8224			bpl 	_AMXCheckOkay
.8228		90 27		bcc $8251			bcc 	_AMXFail 				; not allowed.
.822a		8a		txa				txa  							; get mask back
.822b		29 1f		and #$1f			and 	#$1F
.822d						_AMXHaveInfo:
.822d		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.822f		10 04		bpl $8235			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8231		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8233		d0 1c		bne $8251			bne 	_AMXFail
.8235						_AMXAnySize:
.8235		18		clc				clc 							; add offset to the base opcode
.8236		6d 24 04	adc $0424			adc 	BaseOpcode
.8239						_AMXOutputCode:
.8239		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte 		; write the opcode out.
.823c		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.823e		f0 0e		beq $824e			beq 	_AMXExit
.8240		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8242		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8245		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8247		30 05		bmi $824e			bmi 	_AMXExit
.8249		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.824b		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.824e						_AMXExit:
.824e		7a		ply				ply
.824f		38		sec				sec
.8250		60		rts				rts
.8251						_AMXFail:
.8251		a0 00		ldy #$00			ldy 	#0
.8253						_AMXCheckOddities:
.8253		8a		txa				txa
.8254		d9 7b 82	cmp $827b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8257		d0 15		bne $826e			bne 	_AMXCONext
.8259		b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825c		cd 24 04	cmp $0424			cmp 	BaseOpcode
.825f		d0 0d		bne $826e			bne 	_AMXCONext
.8261		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8263		10 04		bpl $8269			bpl 	_AMXCONotZero
.8265		a5 60		lda $60				lda 	NSMantissa1
.8267		d0 05		bne $826e			bne 	_AMXCONext
.8269						_AMXCONotZero:
.8269		b9 7a 82	lda $827a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826c		80 cb		bra $8239			bra 	_AMXOutputCode 			; and assemble it
.826e						_AMXCONext:
.826e		c8		iny				iny
.826f		c8		iny				iny
.8270		c8		iny				iny
.8271		b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; end of table
.8274		d0 dd		bne $8253			bne 	_AMXCheckOddities
.8276						_AMXCOFail:
.8276		7a		ply				ply
.8277		18		clc				clc
.8278		60		rts				rts
.8279						ExtraOpcode:
>8279		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>827c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>827f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8282		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8285		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8288		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>828e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8291		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8294		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8297		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8298						LabelHere:
.8298		c8		iny				iny 								; skip .
.8299		a2 00		ldx #$00			ldx 	#0 							; get a term
.829b		20 79 9a	jsr $9a79			jsr 	EvaluateTerm
.829e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82a0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a2		d0 22		bne $82c6			bne 	_ALType 					; otherwise typing error
.82a4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a6		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82a8		b5 60		lda $60,x			lda 	NSMantissa1,x
.82aa		85 37		sta $37				sta 	zTemp0+1
.82ac		5a		phy				phy 								; copy address in (64k)
.82ad		a0 01		ldy #$01			ldy 	#1
.82af		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82b2		92 36		sta ($36)			sta 	(zTemp0)
.82b4		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b7		91 36		sta ($36),y			sta 	(zTemp0),y
.82b9		c8		iny				iny
.82ba		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82bc		91 36		sta ($36),y			sta 	(zTemp0),y
.82be		c8		iny				iny
.82bf		91 36		sta ($36),y			sta 	(zTemp0),y
.82c1		c8		iny				iny
.82c2		91 36		sta ($36),y			sta 	(zTemp0),y
.82c4		7a		ply				ply
.82c5		60		rts				rts
.82c6						_ALType:
.82c6		4c fe a1	jmp $a1fe			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82c9						TypeAndCalculateOperand:
.82c9		b1 30		lda ($30),y			lda 	(codePtr),y
.82cb		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82cd		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82cf		f0 5b		beq $832c			beq 	_TACOExit
.82d1		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d3		f0 57		beq $832c			beq 	_TACOExit
.82d5		c8		iny				iny
.82d6		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82d8		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82da		f0 51		beq $832d			beq 	CalculateOperand
.82dc		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82de		f0 1f		beq $82ff			beq 	_TACOIndirect
.82e0		88		dey				dey 								; undo get of first character
.82e1		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get operand
.82e4		b1 30		lda ($30),y			lda 	(codePtr),y
.82e6		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82e8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ea		d0 40		bne $832c			bne 	_TACOExit
.82ec		c8		iny				iny
.82ed		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f0		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f2		c9 58		cmp #$58			cmp 	#'X'
.82f4		f0 36		beq $832c			beq 	_TACOExit
.82f6		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82f8		c9 59		cmp #$59			cmp 	#'Y'
.82fa		f0 30		beq $832c			beq 	_TACOExit
.82fc						_TACOSyntax:
.82fc		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.82ff						_TACOIndirect:
.82ff		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get the operand
.8302		b1 30		lda ($30),y			lda 	(codePtr),y
.8304		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8306		f0 17		beq $831f			beq 	_TACOIndX
.8308		20 12 91	jsr $9112			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830b		b1 30		lda ($30),y			lda 	(codePtr),y
.830d		a2 d1		ldx #$d1			ldx 	#AM_IND
.830f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8311		d0 19		bne $832c			bne 	_TACOExit
.8313		c8		iny				iny
.8314		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8317		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8319		d0 e1		bne $82fc			bne 	_TACOSyntax
.831b		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831d		80 0d		bra $832c			bra 	_TACOExit
.831f						_TACOIndX:
.831f		c8		iny				iny
.8320		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8323		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8325		d0 d5		bne $82fc			bne 	_TACOSyntax
.8327		20 12 91	jsr $9112			jsr 	CheckRightBracket			; check )
.832a		a2 c0		ldx #$c0			ldx 	#AM_INDX
.832c						_TACOExit:
.832c		60		rts				rts
.832d						CalculateOperand:
.832d		48		pha				pha
.832e		da		phx				phx
.832f		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8331		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.8334		fa		plx				plx
.8335		68		pla				pla
.8336		60		rts				rts
.8337						TACOCheckXY:
.8337		b1 30		lda ($30),y			lda 	(codePtr),y
.8339		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.833b		c9 40		cmp #$40			cmp 	#$40
.833d		d0 21		bne $8360			bne 	_TCXYFail
.833f		b1 30		lda ($30),y			lda 	(codePtr),y
.8341		18		clc				clc
.8342		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8344		85 37		sta $37				sta 	zTemp0+1
.8346		c8		iny				iny
.8347		b1 30		lda ($30),y			lda 	(codePtr),y
.8349		c8		iny				iny
.834a		85 36		sta $36				sta 	zTemp0
.834c		5a		phy				phy 								; save position
.834d		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.834f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8351		d0 0c		bne $835f			bne 	_TCXYPopFail
.8353		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8355		b1 36		lda ($36),y			lda 	(zTemp0),y
.8357		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8359		f0 08		beq $8363			beq 	_TCXYFound
.835b		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835d		f0 04		beq $8363			beq 	_TCXYFound
.835f						_TCXYPopFail:
.835f		7a		ply				ply
.8360						_TCXYFail:
.8360		a9 00		lda #$00			lda 	#0
.8362		60		rts				rts
.8363						_TCXYFound:
.8363		7a		ply				ply 								; restore position
.8364		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8366		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8367						BackloadProgram:
.8367		20 7c 8b	jsr $8b7c			jsr 	NewProgram 					; does the actual NEW.
.836a		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.836c		a9 be		lda #$be			lda 	#_BLLoad & $FF
.836e		20 84 91	jsr $9184			jsr 	PrintStringXA
.8371		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8373		8d 59 06	sta $0659			sta 	BackLoadPage
.8376		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8378		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.837b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837d		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8380		a9 ff		lda #$ff			lda 	#$FF
.8382		8d fa ff	sta $fffa			sta 	$FFFA
.8385						_BPLoop:
.8385		a2 ff		ldx #$ff			ldx 	#$FF
.8387		20 d3 83	jsr $83d3			jsr 	BLReadByte 					; read a byte
.838a		c9 00		cmp #$00			cmp 	#0
.838c		f0 29		beq $83b7			beq 	_BPExit 					; if 0 exit
.838e		30 27		bmi $83b7			bmi 	_BPExit 					; if -ve exit
.8390						_BPCopy:
.8390		e8		inx				inx  								; copy byte into the lineBuffer
.8391		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8394		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8397		20 d3 83	jsr $83d3			jsr 	BLReadByte 					; read next byte
.839a		30 0a		bmi $83a6			bmi 	_BPEndLine 					; -ve = EOL
.839c		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.839e		d0 02		bne $83a2			bne 	_BPNotTab
.83a0		a9 20		lda #$20			lda 	#' '
.83a2						_BPNotTab:
.83a2		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a4		b0 ea		bcs $8390			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a6						_BPEndLine:
.83a6		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.83a9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83ac		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83af		f0 d4		beq $8385			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83b1		38		sec				sec 								; append not insert
.83b2		20 77 a7	jsr $a777			jsr 	MemoryInsertLine 			; append to current program
.83b5		80 ce		bra $8385			bra 	_BPLoop
.83b7						_BPExit:
.83b7		9c fa ff	stz $fffa			stz 	$FFFA
.83ba		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear variables etc.
.83bd		60		rts				rts
.83be						_BLLoad:
>83be		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c6		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d3						BLReadByte:
.83d3		da		phx				phx
.83d4		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d6		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83d9		85 0b		sta $0b				sta 	8+3
.83db		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83de		85 36		sta $36				sta 	zTemp0
.83e0		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e3		85 37		sta $37				sta 	zTemp0+1
.83e5		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e7		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ea		d0 0f		bne $83fb			bne 	_BLNoCarry
.83ec		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ef		10 0a		bpl $83fb			bpl 	_BLNoCarry 					; need a new page
.83f1		48		pha				pha
.83f2		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f4		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f7		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83fa		68		pla				pla
.83fb						_BLNoCarry:
.83fb		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83fd		fa		plx				plx
.83fe		c9 00		cmp #$00			cmp 	#0
.8400		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8401						EditProgramCode:
.8401		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8404		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8407		20 1b a8	jsr $a81b			jsr 	MemorySearch
.840a		90 05		bcc $8411			bcc 	_EPCNoDelete 				; reached the end : don't delete
.840c		d0 03		bne $8411			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.840e		20 40 a7	jsr $a740			jsr 	MemoryDeleteLine 			; delete the line
.8411						_EPCNoDelete:
.8411		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8414		c9 80		cmp #$80			cmp 	#KWC_EOL
.8416		f0 0d		beq $8425			beq 	_EPCNoInsert
.8418		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.841b		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.841e		20 1b a8	jsr $a81b			jsr 	MemorySearch
.8421		18		clc				clc 								; insert at this point.
.8422		20 77 a7	jsr $a777			jsr 	MemoryInsertLine 			; insert the line
.8425						_EPCNoInsert:
.8425		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8426						WarmStart:
.8426		a2 ff		ldx #$ff			ldx 	#$FF
.8428		9a		txs				txs
.8429		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.842b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.842e		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8431		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line
.8434		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8437		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.843a		d0 17		bne $8453			bne 	_WSEditCode 				; if so,edit code.
.843c		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.843f		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8441		85 30		sta $30				sta 	codePtr
.8443		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8445		85 31		sta $31				sta 	codePtr+1
.8447		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.844a		c9 80		cmp #$80			cmp 	#KWC_EOL
.844c		f0 d8		beq $8426			beq 	WarmStart
.844e		20 0c 8d	jsr $8d0c			jsr 	RUNCodePointerLine 			; execute that line.
.8451		80 d3		bra $8426			bra 	WarmStart
.8453						_WSEditCode:
.8453		20 01 84	jsr $8401			jsr 	EditProgramCode 			; edit the program code
.8456		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear all variables etc.
.8459		80 cb		bra $8426			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.845b						AssembleCommand:
.845b		a2 00		ldx #$00			ldx 	#0
.845d		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; start address
.8460		a5 58		lda $58				lda 	NSMantissa0
.8462		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8465		a5 60		lda $60				lda 	NSMantissa1
.8467		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.846a		20 1a 91	jsr $911a			jsr 	CheckComma
.846d		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; options 0-3
.8470		a5 58		lda $58				lda 	NSMantissa0
.8472		8d 20 04	sta $0420			sta 	AssemblerControl
.8475		60		rts				rts
.8476		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8477						AssertCommand:
.8477		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8479		20 e3 9f	jsr $9fe3			jsr 	EvaluateInteger 			; the assert test
.847c		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; exit if result is non zero.
.847f		d0 05		bne $8486			bne 	_ACExit
.8481		a9 0a		lda #$0a		lda	#10
.8483		4c 2b 91	jmp $912b		jmp	ErrorHandler
.8486						_ACExit:
.8486		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8487						CallCommand:
.8487		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8489		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.848c						_CCClear
.848c		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.848d		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; these are optional sequentially.
.8490		e0 04		cpx #$04			cpx 	#4
.8492		d0 f8		bne $848c			bne 	_CCClear
.8494		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8496						_CCCParam:
.8496		b1 30		lda ($30),y			lda 	(codePtr),y
.8498		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.849a		d0 09		bne $84a5			bne 	_CCCRun6502
.849c		c8		iny				iny 								; skip comma
.849d		e8		inx				inx	 								; next level
.849e		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get A/X/Y
.84a1		e0 03		cpx #$03			cpx 	#3
.84a3		90 f1		bcc $8496			bcc 	_CCCParam 					; done all 3 ?
.84a5						_CCCRun6502:
.84a5		5a		phy				phy 								; save position
.84a6		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.84a8		85 37		sta $37				sta 	zTemp0+1
.84aa		a5 58		lda $58				lda 	NSMantissa0
.84ac		85 36		sta $36				sta 	zTemp0
.84ae		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.84b0		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.84b2		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.84b4		20 b9 84	jsr $84b9			jsr 	_CCCZTemp0 					; call zTemp0
.84b7		7a		ply				ply 								; restore position and exit
.84b8		60		rts				rts
.84b9						_CCCZTemp0:
.84b9		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84bc						ClearCommand:
.84bc		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84be		85 36		sta $36				sta 	0+zTemp0
.84c0		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84c2		85 37		sta $37				sta 	1+zTemp0
.84c4						_ClearZeroLoop:
.84c4		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84c6		f0 24		beq $84ec			beq 	_ClearZeroEnd
.84c8		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84ca		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84cc						_ClearOneVariable:
.84cc		91 36		sta ($36),y			sta 	(zTemp0),y
.84ce		c8		iny				iny
.84cf		c0 08		cpy #$08			cpy 	#8
.84d1		d0 f9		bne $84cc			bne 	_ClearOneVariable
.84d3		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84d5		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d7		c9 18		cmp #$18			cmp 	#NSTProcedure
.84d9		d0 04		bne $84df			bne 	_ClearNotProcedure
.84db		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84dd		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84df						_ClearNotProcedure:
.84df		18		clc				clc 								; go to the next variable
.84e0		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84e2		65 36		adc $36				adc 	zTemp0
.84e4		85 36		sta $36				sta 	zTemp0
.84e6		90 dc		bcc $84c4			bcc 	_ClearZeroLoop
.84e8		e6 37		inc $37				inc 	zTemp0+1
.84ea		80 d8		bra $84c4			bra 	_ClearZeroLoop
.84ec						_ClearZeroEnd:
.84ec		18		clc				clc
.84ed		a5 36		lda $36				lda 	zTemp0
.84ef		69 01		adc #$01			adc 	#1
.84f1		8d 0c 04	sta $040c			sta 	lowMemPtr
.84f4		a5 37		lda $37				lda 	zTemp0+1
.84f6		69 00		adc #$00			adc 	#0
.84f8		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84fb		20 d5 b1	jsr $b1d5			jsr 	StackReset
.84fe		20 3b b2	jsr $b23b			jsr 	StringSystemInitialise
.8501		20 1b 90	jsr $901b			jsr 	ProcedureScan
.8504		20 bb 8c	jsr $8cbb			jsr 	Command_Restore
.8507		9c 1e 04	stz $041e			stz 	AssemblerAddress
.850a		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.850d		9c 20 04	stz $0420			stz 	AssemblerControl
.8510		20 65 9c	jsr $9c65			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8514						ClearScreen:
.8514		5a		phy				phy
.8515		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8517		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.851a		7a		ply				ply
.851b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.851c						Command_Data:
.851c		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.851e		a2 80		ldx #$80			ldx 	#KWC_EOL
.8520		20 6d 90	jsr $906d			jsr 	ScanForward
.8523		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8524						DimCommand:
.8524		b1 30		lda ($30),y			lda 	(codePtr),y
.8526		29 c0		and #$c0			and 	#$C0
.8528		c9 40		cmp #$40			cmp 	#$40
.852a		d0 7a		bne $85a6			bne 	_DCSyntax 				; n o, error.
.852c		b1 30		lda ($30),y			lda 	(codePtr),y
.852e		18		clc				clc
.852f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8531		85 3f		sta $3f				sta 	zaTemp+1
.8533		c8		iny				iny
.8534		b1 30		lda ($30),y			lda 	(codePtr),y
.8536		c8		iny				iny
.8537		85 3e		sta $3e				sta 	zaTemp
.8539		5a		phy				phy
.853a		a0 02		ldy #$02			ldy 	#2 						; read type byte
.853c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.853e		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8540		c9 18		cmp #$18			cmp 	#NSTProcedure
.8542		f0 62		beq $85a6			beq 	_DCSyntax
.8544		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8546		29 04		and #$04			and 	#NSBIsArray
.8548		f0 64		beq $85ae			beq 	_DCType
.854a		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.854c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854e		d0 59		bne $85a9			bne 	_DCRedefine
.8550		7a		ply				ply
.8551		20 b1 85	jsr $85b1			jsr 	_DCGetSize 				; get array size, check it.
.8554		5a		phy				phy
.8555		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8557		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8559		7a		ply				ply 							; is there a second (e.g. ,x)
.855a		b1 30		lda ($30),y			lda 	(codePtr),y
.855c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.855e		d0 0a		bne $856a			bne 	_DCOneDimension
.8560		c8		iny				iny 							; skip comma
.8561		20 b1 85	jsr $85b1			jsr 	_DCGetSize 				; get 2nd array size
.8564		5a		phy				phy
.8565		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8567		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8569		7a		ply				ply
.856a						_DCOneDimension:
.856a		5a		phy				phy 							; save position
.856b		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.856d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.856f		aa		tax				tax
.8570		c8		iny				iny
.8571		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8573		e8		inx				inx 							; bump them.
.8574		1a		inc a				inc 	a
.8575		20 21 a0	jsr $a021			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8578		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.857a		29 e0		and #$e0			and 	#$E0
.857c		d0 23		bne $85a1			bne 	_DCSize
.857e		a0 02		ldy #$02			ldy 	#2 						; get base type
.8580		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582		20 bf 85	jsr $85bf			jsr 	ScaleByBaseType 		; scale by base type
.8585		a5 36		lda $36				lda 	zTemp0
.8587		a6 37		ldx $37				ldx 	zTemp0+1
.8589		20 27 9c	jsr $9c27			jsr 	AllocateXABytes 		; allocate memory
.858c		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.858e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8590		c8		iny				iny
.8591		8a		txa				txa
.8592		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8594		7a		ply				ply 							; get position back
.8595		20 12 91	jsr $9112			jsr 	CheckRightBracket 		; check )
.8598		b1 30		lda ($30),y			lda 	(codePtr),y
.859a		c8		iny				iny 							; consume in case
.859b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.859d		f0 85		beq $8524			beq 	DimCommand
.859f		88		dey				dey 							; undo consume
.85a0		60		rts				rts
.85a1						_DCSize:
.85a1		a9 16		lda #$16		lda	#22
.85a3		4c 2b 91	jmp $912b		jmp	ErrorHandler
.85a6						_DCSyntax:
.85a6		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.85a9						_DCRedefine:
.85a9		a9 15		lda #$15		lda	#21
.85ab		4c 2b 91	jmp $912b		jmp	ErrorHandler
.85ae						_DCType:
.85ae		4c fe a1	jmp $a1fe			jmp 	TypeError
.85b1						_DCGetSize:
.85b1		a2 00		ldx #$00			ldx 	#0 						; get first index.
.85b3		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 	; get array dimension
.85b6		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85b8		f0 e7		beq $85a1			beq 	_DCSize
.85ba		c9 fe		cmp #$fe			cmp 	#254
.85bc		f0 e3		beq $85a1			beq 	_DCSize
.85be		60		rts				rts
.85bf						ScaleByBaseType:
.85bf		29 10		and #$10			and 	#NSBIsString 			; is it string
.85c1		d0 19		bne $85dc			bne 	_SBBTString
.85c3		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85c5		48		pha				pha
.85c6		a5 36		lda $36				lda 	zTemp0
.85c8		48		pha				pha
.85c9		06 36		asl $36				asl 	zTemp0 					; x 2
.85cb		26 37		rol $37				rol 	zTemp0+1
.85cd		06 36		asl $36				asl 	zTemp0 					; x 4
.85cf		26 37		rol $37				rol 	zTemp0+1
.85d1		68		pla				pla 							; add stacked value = x 5
.85d2		65 36		adc $36				adc 	zTemp0
.85d4		85 36		sta $36				sta 	zTemp0
.85d6		68		pla				pla
.85d7		65 37		adc $37				adc 	zTemp0+1
.85d9		85 37		sta $37				sta 	zTemp0+1
.85db		60		rts				rts
.85dc						_SBBTString:
.85dc		06 36		asl $36				asl 	zTemp0
.85de		26 37		rol $37				rol 	zTemp0+1
.85e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.85e1						Command_Dir:
.85e1		ad 5c 06	lda $065c			lda     DefaultDrive				; set drive to list.
.85e4		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.85e6		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.85e8		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.85eb		b0 56		bcs $8643			bcs     _CDExit
.85ed						_CDEventLoop:
.85ed		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.85f0		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.85f3		b0 f8		bcs $85ed			bcs     _CDEventLoop
.85f5		ad 47 08	lda $0847			lda     event.type
.85f8		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.85fa		f0 47		beq $8643			beq    	_CDExit
.85fc		20 01 86	jsr $8601			jsr     _CDMessages 				; handle various messages
.85ff		80 ec		bra $85ed			bra     _CDEventLoop
.8601						_CDMessages:
.8601		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8603		f0 15		beq $861a			beq     _CDEVRead
.8605		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8607		f0 19		beq $8622			beq     _CDEVVolume
.8609		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.860b		f0 17		beq $8624			beq     _CDEVFile
.860d		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.860f		f0 28		beq $8639			beq     _CDEVFree
.8611		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8613		f0 26		beq $863b			beq     _CDEVEOF
.8615		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8617		f0 22		beq $863b			beq     _CDEVEOF
.8619		60		rts				rts
.861a						_CDEVRead:
.861a		ad 4a 08	lda $084a			lda     event.directory.stream
.861d		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.861f		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8622						_CDEVVolume:
.8622		80 f6		bra $861a			bra     _CDEVRead
.8624						_CDEVFile:
.8624		a9 20		lda #$20			lda 	#32
.8626		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8629		ad 4c 08	lda $084c			lda     event.directory.file.len
.862c		20 46 86	jsr $8646			jsr     _CDReadData
.862f		20 84 91	jsr $9184			jsr 	PrintStringXA
.8632		a9 0d		lda #$0d			lda 	#13
.8634		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8637		80 e1		bra $861a			bra     _CDEVRead
.8639						_CDEVFree:
.8639		80 00		bra $863b			bra     _CDEVEOF
.863b						_CDEVEOF:
.863b		ad 4a 08	lda $084a			lda     event.directory.stream
.863e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8640		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8643						_CDExit:
.8643		4c 26 84	jmp $8426			jmp 	WarmStart
.8646						_CDReadData:
.8646		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8648		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.864a		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.864c		a9 05		lda #$05			lda     #lineBuffer >> 8
.864e		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8650		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8653		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8655		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8658		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.865a		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.865c		60		rts				rts
.865d						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.865d						Command_Drive:
.865d		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger
.8660		8d 5c 06	sta $065c			sta 	DefaultDrive
.8663		60		rts				rts
.065c						DefaultDrive:
>065c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8664						EndCommand:
.8664		4c 26 84	jmp $8426			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8667						ForCommand:
.8667		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8669		20 6f b1	jsr $b16f			jsr 	StackOpen
.866c		a2 00		ldx #$00			ldx 	#0
.866e		20 79 9a	jsr $9a79			jsr 	EvaluateTerm
.8671		b5 50		lda $50,x			lda 	NSStatus,x
.8673		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8675		d0 47		bne $86be			bne		_FCError
.8677		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8679		20 22 91	jsr $9122			jsr 	CheckNextA
.867c		e8		inx				inx
.867d		20 e3 9f	jsr $9fe3			jsr 	EvaluateInteger 			; <from> in +1
.8680		b1 30		lda ($30),y			lda 	(codePtr),y
.8682		c8		iny				iny 								; consume it
.8683		48		pha				pha 								; save on stack for later
.8684		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.8686		f0 04		beq $868c			beq 	_FCNoSyntax
.8688		c9 d9		cmp #$d9			cmp 	#KWD_TO
.868a		d0 35		bne $86c1			bne 	_FCSyntaxError
.868c						_FCNoSyntax:
.868c		e8		inx				inx
.868d		20 e3 9f	jsr $9fe3			jsr 	EvaluateInteger
.8690		20 b4 b1	jsr $b1b4			jsr 	STKSaveCodePosition 		; save loop back position
.8693		68		pla				pla 								; restore DOWNTO or TO
.8694		5a		phy				phy 								; save Y on the stack
.8695		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8697		f0 02		beq $869b			beq 	_FCNotDownTo
.8699		a9 02		lda #$02			lda 	#2
.869b						_FCNotDownTo:
.869b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.869c		a0 10		ldy #$10			ldy 	#16
.869e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.86a0		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.86a2		a5 58		lda $58				lda 	NSMantissa0
.86a4		91 34		sta ($34),y			sta 	(basicStack),y
.86a6		a5 60		lda $60				lda 	NSMantissa1
.86a8		c8		iny				iny
.86a9		91 34		sta ($34),y			sta 	(basicStack),y
.86ab		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.86ad		a2 01		ldx #$01			ldx 	#1
.86af		20 c4 86	jsr $86c4			jsr 	FCIntegerToStack
.86b2		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.86b4		a2 02		ldx #$02			ldx 	#2
.86b6		20 c4 86	jsr $86c4			jsr 	FCIntegerToStack
.86b9		20 df 86	jsr $86df			jsr 	CopyIndexToReference
.86bc		7a		ply				ply 								; restore position
.86bd		60		rts				rts
.86be						_FCError:
.86be		4c fe a1	jmp $a1fe			jmp 	TypeError
.86c1						_FCSyntaxError:
.86c1		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.86c4						FCIntegerToStack:
.86c4		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.86c6		10 03		bpl $86cb			bpl	 	_FCNotNegative
.86c8		20 3f a0	jsr $a03f			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.86cb						_FCNotNegative:
.86cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.86cd		91 34		sta ($34),y			sta 	(basicStack),y
.86cf		c8		iny				iny
.86d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.86d2		91 34		sta ($34),y			sta 	(basicStack),y
.86d4		c8		iny				iny
.86d5		b5 68		lda $68,x			lda 	NSMantissa2,x
.86d7		91 34		sta ($34),y			sta 	(basicStack),y
.86d9		c8		iny				iny
.86da		b5 70		lda $70,x			lda 	NSMantissa3,x
.86dc		91 34		sta ($34),y			sta 	(basicStack),y
.86de		60		rts				rts
.86df						CopyIndexToReference:
.86df		5a		phy				phy
.86e0		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.86e2		38		sec				sec 								; (because we copy from offset 8)
.86e3		b1 34		lda ($34),y			lda 	(basicStack),y
.86e5		e9 08		sbc #$08			sbc 	#8
.86e7		85 36		sta $36				sta 	zTemp0
.86e9		c8		iny				iny
.86ea		b1 34		lda ($34),y			lda 	(basicStack),y
.86ec		e9 00		sbc #$00			sbc 	#0
.86ee		85 37		sta $37				sta 	zTemp0+1
.86f0		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.86f2		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.86f4		b1 34		lda ($34),y			lda 	(basicStack),y
.86f6		0a		asl a				asl 	a 							; into carry
.86f7		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.86f9		90 14		bcc $870f			bcc 	_CITRNormal
.86fb		38		sec				sec
.86fc						_CITRNegative:
.86fc		a9 00		lda #$00			lda 	#0
.86fe		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8700		91 36		sta ($36),y			sta 	(zTemp0),y
.8702		c8		iny				iny
.8703		ca		dex				dex
.8704		d0 f6		bne $86fc			bne 	_CITRNegative
.8706		88		dey				dey 								; look at MSB of mantissa
.8707		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8709		09 80		ora #$80			ora 	#$80
.870b		91 36		sta ($36),y			sta 	(zTemp0),y
.870d		7a		ply				ply
.870e		60		rts				rts
.870f						_CITRNormal:
.870f		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8711		91 36		sta ($36),y			sta 	(zTemp0),y
.8713		c8		iny				iny
.8714		ca		dex				dex
.8715		d0 f8		bne $870f			bne 	_CITRNormal
.8717		7a		ply				ply 								; and exit.
.8718		60		rts				rts
.8719						NextCommand:
.8719		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.871b		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.871d		20 9c b1	jsr $b19c			jsr 	StackCheckFrame
.8720		5a		phy				phy
.8721		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8723		b1 34		lda ($34),y			lda 	(basicStack),y
.8725		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8727		30 02		bmi $872b			bmi 	_NCStepNeg
.8729		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.872b						_NCStepNeg:
.872b		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.872d		a2 04		ldx #$04			ldx 	#4 							; count to bump
.872f		18		clc				clc
.8730						_NCBump:
.8730		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8732		91 34		sta ($34),y			sta 	(basicStack),y
.8734		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8736		c8		iny				iny 								; next byte
.8737		ca		dex				dex 								; do four times
.8738		d0 f6		bne $8730			bne 	_NCBump
.873a		20 df 86	jsr $86df			jsr		CopyIndexToReference		; copy it to the reference variable.
.873d		a0 10		ldy #$10			ldy 	#16 						; get step count again
.873f		b1 34		lda ($34),y			lda 	(basicStack),y
.8741		0a		asl a				asl 	a 							; sign bit to carry
.8742		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8744		85 38		sta $38				sta 	zTemp1
.8746		90 02		bcc $874a			bcc 	_NCCompRev 					; use if step is +ve
.8748		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.874a						_NCCompRev:
.874a		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.874c		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.874e		85 39		sta $39				sta 	zTemp1+1
.8750		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8752		38		sec				sec
.8753						_NCCompare:
.8753		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8755		b1 34		lda ($34),y			lda 	(basicStack),y
.8757		a4 39		ldy $39				ldy 	zTemp1+1
.8759		f1 34		sbc ($34),y			sbc 	(basicStack),y
.875b		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.875d		e6 39		inc $39				inc 	zTemp1+1
.875f		ca		dex				dex 								; do it 4 times.
.8760		d0 f1		bne $8753			bne 	_NCCompare
.8762		50 02		bvc $8766			bvc 	_NCNoOverflow 				; convert to signed comparison
.8764		49 80		eor #$80			eor 	#$80
.8766						_NCNoOverflow:
.8766		7a		ply				ply 								; restore Y position
.8767		0a		asl a				asl 	a 							; is bit 7 set.
.8768		90 04		bcc $876e			bcc 	_NCLoopBack 				; if no , >= so loop back
.876a		20 8e b1	jsr $b18e			jsr 	StackClose 					; exit the loop
.876d		60		rts				rts
.876e						_NCLoopBack:
.876e		20 c5 b1	jsr $b1c5			jsr 	STKLoadCodePosition 		; loop back
.8771		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8772						Command_GOSUB:
.8772		a2 00		ldx #$00			ldx 	#0
.8774		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8777		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8779		20 6f b1	jsr $b16f			jsr 	StackOpen 					; create frame
.877c		20 b4 b1	jsr $b1b4			jsr 	STKSaveCodePosition 		; save current position
.877f		4c 95 87	jmp $8795			jmp 	GotoStackX
.8782						Command_RETURN:
.8782		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8784		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8786		20 9c b1	jsr $b19c			jsr 	StackCheckFrame
.8789		20 c5 b1	jsr $b1c5			jsr 	STKLoadCodePosition 		; restore code position
.878c		20 8e b1	jsr $b18e			jsr 	StackClose
.878f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8790						GotoCommand:
.8790		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8792		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.8795						GotoStackX:
.8795		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8797		48		pha				pha 								; it is slightly inefficient, just in cases.
.8798		b5 58		lda $58,x			lda 	NSMantissa0,x
.879a		fa		plx				plx
.879b		20 1b a8	jsr $a81b			jsr 	MemorySearch 				; transfer to line number AX.
.879e		90 05		bcc $87a5			bcc 	_GotoError 					; not found, off end.
.87a0		d0 03		bne $87a5			bne 	_GotoError 					; not found exactly
.87a2		4c 05 8d	jmp $8d05			jmp 	RunNewLine 					; and go straight to new line code.
.87a5						_GotoError:
.87a5		a9 0d		lda #$0d		lda	#13
.87a7		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.87aa						IfCommand:
.87aa		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.87ac		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber
.87af		b1 30		lda ($30),y			lda 	(codePtr),y
.87b1		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.87b3		d0 0a		bne $87bf			bne 	_IfStructured 				; we still support it.
.87b5		c8		iny				iny 								; consume THEN
.87b6		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; is it zero
.87b9		f0 01		beq $87bc			beq 	_IfFail 					; if fail, go to next line
.87bb		60		rts				rts 								; if THEN just continue
.87bc						_IfFail:
.87bc		4c ed 8c	jmp $8ced			jmp 	EOLCommand
.87bf						_IfStructured:
.87bf		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; is it zero
.87c2		d0 07		bne $87cb			bne 	_IfExit 					; if not, then continue normally.
.87c4		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.87c6		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.87c8		20 6d 90	jsr $906d			jsr 	ScanForward 				; and run from there
.87cb						_IfExit:
.87cb		60		rts				rts
.87cc						ElseCode:
.87cc		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.87ce		aa		tax				tax 								; so just go to the structure exit
.87cf		20 6d 90	jsr $906d			jsr 	ScanForward
.87d2		60		rts				rts
.87d3						EndIf:
.87d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.87d4						Command_Input:
.87d4		9c 28 04	stz $0428			stz 	isPrintFlag
.87d7		80 05		bra $87de			bra 	Command_IP_Main
.87d9						Command_Print:
.87d9		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.87db		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.87de						Command_IP_Main:
.87de		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87df						_CPLoop:
.87df		08		php				php 								; save last action flag
.87e0		b1 30		lda ($30),y			lda 	(codePtr),y
.87e2		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87e4		f0 54		beq $883a			beq 	_CPExit
.87e6		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87e8		f0 50		beq $883a			beq 	_CPExit
.87ea		68		pla				pla 								; throw last action flag
.87eb		b1 30		lda ($30),y			lda 	(codePtr),y
.87ed		c8		iny				iny
.87ee		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87f0		f0 45		beq $8837			beq 	_CPContinueWithSameLine
.87f2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87f4		f0 3c		beq $8832			beq 	_CPTab
.87f6		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.87f8		f0 34		beq $882e			beq 	_CPNewLine
.87fa		88		dey				dey 								; undo the get.
.87fb		20 2d 96	jsr $962d			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.87fe		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8800		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8802		f0 0d		beq $8811			beq 	_CPIsValue 					; no, display it.
.8804		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8807		d0 05		bne $880e			bne 	_CPIsPrint 					; otherwise display.
.8809		20 43 88	jsr $8843			jsr 	CIInputValue 				; input a value to the reference
.880c		80 20		bra $882e			bra 	_CPNewLine
.880e						_CPIsPrint:
.880e		20 f2 98	jsr $98f2			jsr 	Dereference 				; dereference if required.
.8811						_CPIsValue:
.8811		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8813		29 10		and #$10			and 	#NSBIsString
.8815		f0 09		beq $8820			beq 	_CPNumber
.8817		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8819		a5 58		lda $58				lda 	NSMantissa0
.881b		20 a6 88	jsr $88a6			jsr 	CPPrintStringXA
.881e		80 be		bra $87de			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8820						_CPNumber:
.8820		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8822		20 ab 9e	jsr $9eab			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8825		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8827		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8829		20 a6 88	jsr $88a6			jsr 	CPPrintStringXA 			; print it.
.882c		80 b0		bra $87de			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.882e						_CPNewLine:
.882e		a9 0d		lda #$0d			lda 	#13
.8830		80 02		bra $8834			bra 	_CPPrintChar
.8832						_CPTab:
.8832		a9 09		lda #$09			lda 	#9 							; print TAB
.8834						_CPPrintChar:
.8834		20 b9 88	jsr $88b9			jsr 	CPPrintVector
.8837						_CPContinueWithSameLine:
.8837		38		sec				sec 								; loop round with carry set, which
.8838		80 a5		bra $87df			bra 	_CPLoop 					; will inhibit final CR
.883a						_CPExit:
.883a		28		plp				plp 								; get last action flag
.883b		b0 05		bcs $8842			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.883d		a9 0d		lda #$0d			lda 	#13 						; print new line
.883f		20 b9 88	jsr $88b9			jsr 	CPPrintVector
.8842						_CPExit2:
.8842		60		rts				rts
.8843						CIInputValue:
.8843		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8845						_CIInputLine:
.8845		20 bc 88	jsr $88bc			jsr 	CPInputVector 				; get key
.8848		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.884a		f0 1f		beq $886b			beq 	_CIHaveValue
.884c		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.884e		f0 11		beq $8861			beq 	_CIBackspace
.8850		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8852		90 f1		bcc $8845			bcc 	_CIInputLine
.8854		e0 50		cpx #$50			cpx 	#80 						; max length
.8856		b0 ed		bcs $8845			bcs 	_CIInputLine
.8858		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.885b		e8		inx				inx
.885c		20 b9 88	jsr $88b9			jsr 	CPPrintVector 				; echo it.
.885f		80 e4		bra $8845			bra 	_CIInputLine
.8861						_CIBackspace:
.8861		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8863		f0 e0		beq $8845			beq 	_CIInputLine
.8865		20 b9 88	jsr $88b9			jsr 	CPPrintVector 				; echo it.
.8868		ca		dex				dex
.8869		80 da		bra $8845			bra 	_CIInputLine
.886b						_CIHaveValue:
.886b		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.886e		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8870		29 10		and #$10			and 	#NSBIsString
.8872		f0 17		beq $888b			beq 	_CIAssignNumber 			; assign a number
.8874		a2 01		ldx #$01			ldx 	#1
.8876		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8878		95 58		sta $58,x			sta 	NSMantissa0,x
.887a		a9 05		lda #$05			lda 	#lineBuffer >> 8
.887c		95 60		sta $60,x			sta 	NSMantissa1,x
.887e		74 68		stz $68,x			stz 	NSMantissa2,x
.8880		74 70		stz $70,x			stz 	NSMantissa3,x
.8882		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8884		95 50		sta $50,x			sta  	NSStatus,x
.8886		ca		dex				dex 								; X = 0
.8887		20 f8 88	jsr $88f8			jsr 	AssignVariable
.888a		60		rts				rts
.888b						_CIAssignNumber:
.888b		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.888d		85 36		sta $36				sta 	zTemp0
.888f		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8891		85 37		sta $37				sta 	zTemp0+1
.8893		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8895		20 2d 9e	jsr $9e2d			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8898		90 07		bcc $88a1			bcc 	_CIIsOkay
.889a		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.889c		20 b9 88	jsr $88b9			jsr 	CPPrintVector
.889f		80 a2		bra $8843			bra 	CIInputValue
.88a1						_CIIsOkay:
.88a1		ca		dex				dex 								; X = 0
.88a2		20 f8 88	jsr $88f8			jsr 	AssignVariable
.88a5		60		rts				rts
.88a6						CPPrintStringXA:
.88a6		5a		phy				phy
.88a7		86 37		stx $37				stx 	zTemp0+1
.88a9		85 36		sta $36				sta 	zTemp0
.88ab		a0 00		ldy #$00			ldy 	#0
.88ad						_PSXALoop:
.88ad		b1 36		lda ($36),y			lda 	(zTemp0),y
.88af		f0 06		beq $88b7			beq 	_PSXAExit
.88b1		20 b9 88	jsr $88b9			jsr 	CPPrintVector
.88b4		c8		iny				iny
.88b5		80 f6		bra $88ad			bra 	_PSXALoop
.88b7						_PSXAExit:
.88b7		7a		ply				ply
.88b8		60		rts				rts
.88b9						CPPrintVector:
.88b9		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.88bc						CPInputVector:
.88bc		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.88bf						LetCommand:
.88bf		a2 00		ldx #$00			ldx 	#0
.88c1		b1 30		lda ($30),y			lda 	(codePtr),y
.88c3		c9 10		cmp #$10			cmp 	#KWD_AT
.88c5		d0 14		bne $88db			bne 	_LCStandard
.88c7		c8		iny				iny 								; skip equal
.88c8		20 79 9a	jsr $9a79			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.88cb		20 f2 98	jsr $98f2			jsr 	Dereference 				; dereference it to a value
.88ce		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.88d0		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.88d2		95 50		sta $50,x			sta 	NSStatus,x
.88d4		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.88d6		d0 0f		bne $88e7			bne 	_LCMain
.88d8		4c fe a1	jmp $a1fe			jmp 	TypeError 					; was a reference before.
.88db						_LCStandard:
.88db		ad 17 96	lda $9617			lda 	PrecedenceLevel+"*"			; precedence > this
.88de		20 31 96	jsr $9631			jsr 	EvaluateExpressionAtPrecedence
.88e1		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.88e3		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.88e5		f0 0e		beq $88f5			beq 	_LetGoProc 					; it's a procedure call.
.88e7						_LCMain:
.88e7		a9 3d		lda #$3d			lda 	#"=" 						; check =
.88e9		20 22 91	jsr $9122			jsr 	CheckNextA
.88ec		e8		inx				inx 								; RHS
.88ed		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue
.88f0		ca		dex				dex
.88f1		20 f8 88	jsr $88f8			jsr 	AssignVariable
.88f4		60		rts				rts
.88f5						_LetGoProc:
.88f5		4c c3 8b	jmp $8bc3			jmp 	CallProcedure
.88f8						AssignVariable:
.88f8		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.88fa		48		pha				pha 								; save a copy
.88fb		55 51		eor $51,x			eor 	NSStatus+1,x
.88fd		29 10		and #$10			and 	#NSBIsString
.88ff		d0 0b		bne $890c			bne 	_ASError
.8901		68		pla				pla 								; get back
.8902		29 10		and #$10			and 	#NSBIsString 				; check type
.8904		d0 03		bne $8909			bne 	_ASString
.8906		4c 30 98	jmp $9830			jmp 	AssignNumber
.8909						_ASString:
.8909		4c 8e 98	jmp $988e			jmp 	AssignString
.890c						_ASError:
.890c		4c fe a1	jmp $a1fe			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.890f						Command_List:
.890f		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8912		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8914		20 85 80	jsr $8085			jsr 	SNDCommand
.8917		b1 30		lda ($30),y			lda 	(codePtr),y
.8919		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.891b		c9 40		cmp #$40			cmp 	#$40  						; of code.
.891d		f0 6e		beq $898d			beq 	_CLListProcedure
.891f		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8921		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8923		a9 ff		lda #$ff			lda 	#$FF
.8925		85 5f		sta $5f				sta 	NSMantissa0+7
.8927		85 67		sta $67				sta 	NSMantissa1+7
.8929		b1 30		lda ($30),y			lda 	(codePtr),y
.892b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.892d		f0 1a		beq $8949			beq 	_CLSecond
.892f		20 0a 8a	jsr $8a0a			jsr 	CLIsDigit 					; if not digit, list all
.8932		b0 20		bcs $8954			bcs 	_CLStart
.8934		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8936		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.8939		b1 30		lda ($30),y			lda 	(codePtr),y
.893b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.893d		f0 0a		beq $8949			beq 	_CLSecond 					; if so go get it
.893f		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8941		85 5f		sta $5f				sta 	NSMantissa0+7
.8943		a5 64		lda $64				lda 	NSMantissa1+4
.8945		85 67		sta $67				sta 	NSMantissa1+7
.8947		80 0b		bra $8954			bra 	_CLStart
.8949						_CLSecond:
.8949		c8		iny				iny 								; consume comma
.894a		20 0a 8a	jsr $8a0a			jsr 	CLIsDigit 					; digit found
.894d		b0 05		bcs $8954			bcs 	_CLStart 					; if not, continue listing
.894f		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8951		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.8954						_CLStart
.8954		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8956		85 30		sta $30				sta 	codePtr
.8958		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.895a		85 31		sta $31				sta 	codePtr+1
.895c						_CLLoop:
.895c		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.895f		f0 27		beq $8988			beq 	_CLBreak
.8961		b2 30		lda ($30)			lda 	(codePtr)
.8963		f0 20		beq $8985			beq 	_CLExit
.8965		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8967		20 f9 89	jsr $89f9			jsr 	CLCompareLineNo
.896a		90 0c		bcc $8978			bcc 	_CLNext
.896c		a2 07		ldx #$07			ldx 	#7
.896e		20 f9 89	jsr $89f9			jsr 	CLCompareLineNo
.8971		f0 02		beq $8975			beq 	_CLDoThisOne
.8973		b0 03		bcs $8978			bcs 	_CLNext
.8975						_CLDoThisOne:
.8975		20 e6 89	jsr $89e6			jsr 	CLListOneLine 				; routine to list the current line.
.8978						_CLNext:
.8978		18		clc				clc
.8979		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.897b		65 30		adc $30				adc 	codePtr
.897d		85 30		sta $30				sta 	codePtr
.897f		90 02		bcc $8983			bcc 	_CREExit
.8981		e6 31		inc $31				inc 	codePtr+1 					; carry
.8983						_CREExit:
.8983		80 d7		bra $895c			bra 	_CLLoop
.8985						_CLExit:
.8985		4c 26 84	jmp $8426			jmp 	WarmStart
.8988						_CLBreak:
.8988		a9 01		lda #$01		lda	#1
.898a		4c 2b 91	jmp $912b		jmp	ErrorHandler
.898d						_CLListProcedure:
.898d		b1 30		lda ($30),y			lda 	(codePtr),y
.898f		85 38		sta $38				sta 	zTemp1
.8991		c8		iny				iny
.8992		b1 30		lda ($30),y			lda 	(codePtr),y
.8994		85 39		sta $39				sta 	zTemp1+1
.8996		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8998		85 30		sta $30				sta 	codePtr
.899a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.899c		85 31		sta $31				sta 	codePtr+1
.899e						_CLLPSearch:
.899e		b2 30		lda ($30)			lda 	(codePtr)
.89a0		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.89a2		f0 e1		beq $8985			beq 	_CLExit
.89a4		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.89a6		b1 30		lda ($30),y			lda 	(codePtr),y
.89a8		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.89aa		d0 0e		bne $89ba			bne 	_CLLPNext
.89ac		c8		iny				iny 								; check if PROC this.
.89ad		b1 30		lda ($30),y			lda 	(codePtr),y
.89af		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.89b1		d0 07		bne $89ba			bne 	_CLLPNext
.89b3		c8		iny				iny
.89b4		b1 30		lda ($30),y			lda 	(codePtr),y
.89b6		c5 39		cmp $39				cmp 	zTemp1+1
.89b8		f0 0d		beq $89c7			beq 	_CLLPFound
.89ba						_CLLPNext:
.89ba		18		clc				clc
.89bb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89bd		65 30		adc $30				adc 	codePtr
.89bf		85 30		sta $30				sta 	codePtr
.89c1		90 02		bcc $89c5			bcc 	_CREExit
.89c3		e6 31		inc $31				inc 	codePtr+1 					; carry
.89c5						_CREExit:
.89c5		80 d7		bra $899e			bra 	_CLLPSearch
.89c7						_CLLPFound:
.89c7		b2 30		lda ($30)			lda 	(codePtr)
.89c9		f0 ba		beq $8985			beq 	_CLExit
.89cb		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.89cd		b1 30		lda ($30),y			lda 	(codePtr),y
.89cf		48		pha				pha
.89d0		20 e6 89	jsr $89e6			jsr 	CLListOneLine 				; list line and go forward
.89d3		18		clc				clc
.89d4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89d6		65 30		adc $30				adc 	codePtr
.89d8		85 30		sta $30				sta 	codePtr
.89da		90 02		bcc $89de			bcc 	_CREExit
.89dc		e6 31		inc $31				inc 	codePtr+1 					; carry
.89de						_CREExit:
.89de		68		pla				pla 								; reached ENDPROC ?
.89df		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.89e1		d0 e4		bne $89c7			bne 	_CLLPFound
.89e3		4c 26 84	jmp $8426			jmp 	WarmStart
.89e6						CLListOneLine:
.89e6		20 d0 90	jsr $90d0			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.89e9		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.89ec		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.89ee		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.89f0		20 84 91	jsr $9184			jsr 	PrintStringXA
.89f3		a9 0d		lda #$0d			lda 	#13 						; new line
.89f5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89f8		60		rts				rts
.89f9						CLCompareLineNo:
.89f9		38		sec				sec
.89fa		a0 01		ldy #$01			ldy 	#1
.89fc		b1 30		lda ($30),y			lda 	(codePtr),y
.89fe		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8a00		85 36		sta $36				sta 	zTemp0
.8a02		c8		iny				iny
.8a03		b1 30		lda ($30),y			lda 	(codePtr),y
.8a05		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8a07		05 36		ora $36				ora 	zTemp0
.8a09		60		rts				rts
.8a0a						CLIsDigit:
.8a0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8a0c		c9 30		cmp #$30			cmp 	#"0"
.8a0e		90 03		bcc $8a13			bcc	 	_CLIDExitFalse
.8a10		c9 3a		cmp #$3a			cmp 	#"9"+1
.8a12		60		rts				rts
.8a13						_CLIDExitFalse:
.8a13		38		sec				sec
.8a14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8a15						Command_Load:
.8a15		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; file name to load
.8a18		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a1a		a5 36		lda $36				lda 	zTemp0
.8a1c		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8a1f		b0 44		bcs $8a65			bcs 	CLErrorHandler 				; error, so fail.
.8a21		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8a24		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8a27		20 7c 8b	jsr $8b7c			jsr 	NewProgram 					; does the actual NEW.
.8a2a		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a2d						_CLLoop:
.8a2d		20 73 8a	jsr $8a73			jsr 	LoadReadLine 				; get next line.
.8a30		f0 10		beq $8a42			beq 	_CLExit 					; end, exit.
.8a32		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.8a35		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8a38		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8a3b		f0 f0		beq $8a2d			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a3d		20 01 84	jsr $8401			jsr 	EditProgramCode 			; do the editing etc.
.8a40		80 eb		bra $8a2d			bra 	_CLLoop
.8a42						_CLExit:
.8a42		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a45		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a48						CLComplete:
.8a48		a9 52		lda #$52			lda 	#_CLCMsg & $FF
.8a4a		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a4c		20 84 91	jsr $9184			jsr 	PrintStringXA
.8a4f		4c 26 84	jmp $8426			jmp 	WarmStart
.8a52						_CLCMsg:
>8a52		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a5a		2e 0d 00
.8a5d						CLCloseError:
.8a5d		48		pha				pha
.8a5e		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a61		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a64		68		pla				pla
.8a65						CLErrorHandler:
.8a65		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a67		f0 05		beq $8a6e			beq 	_CLEHNotFound
.8a69		a9 1a		lda #$1a		lda	#26
.8a6b		4c 2b 91	jmp $912b		jmp	ErrorHandler
.8a6e						_CLEHNotFound:
.8a6e		a9 19		lda #$19		lda	#25
.8a70		4c 2b 91	jmp $912b		jmp	ErrorHandler
.8a73						LoadReadLine:
.8a73		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a75		20 8f 8a	jsr $8a8f			jsr 	LoadReadCharacter
.8a78		f0 14		beq $8a8e			beq 	_LRLExit 					; eof ?
.8a7a		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a7c		90 f5		bcc $8a73			bcc 	LoadReadLine
.8a7e						_LRLLoop:
.8a7e		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8a81		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a84		e8		inx				inx
.8a85		20 8f 8a	jsr $8a8f			jsr 	LoadReadCharacter 			; next line
.8a88		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a8a		b0 f2		bcs $8a7e			bcs 	_LRLLoop
.8a8c		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a8e						_LRLExit:
.8a8e		60		rts				rts
.8a8f						LoadReadCharacter:
.8a8f		da		phx				phx
.8a90		5a		phy				phy
.8a91		ad 5d 06	lda $065d			lda 	LoadEOFFlag 				; already done EOF.
.8a94		d0 0c		bne $8aa2			bne 	_LRCIsEOF
.8a96		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8a99		90 09		bcc $8aa4			bcc		_LRCExit 					; read okay.
.8a9b		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8a9d		d0 be		bne $8a5d			bne 	CLCloseError
.8a9f		ce 5d 06	dec $065d			dec 	LoadEOFFlag
.8aa2						_LRCIsEOF:
.8aa2		a9 00		lda #$00			lda 	#0
.8aa4						_LRCExit:
.8aa4		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8aa6		d0 02		bne $8aaa			bne 	_LRCNotTab
.8aa8		a9 20		lda #$20			lda 	#' '
.8aaa						_LRCNotTab:
.8aaa		c9 0a		cmp #$0a			cmp 	#$0A
.8aac		d0 02		bne $8ab0			bne 	_LRCNotLF
.8aae		a9 0d		lda #$0d			lda 	#$0D
.8ab0						_LRCNotLF:
.8ab0		7a		ply				ply
.8ab1		fa		plx				plx
.8ab2		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8ab4		60		rts				rts
.065d						LoadEOFFlag:
>065d								.fill 	1
.065e						CurrentFileStream:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8ab5						Command_LOCAL:
.8ab5		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8ab7		20 c3 8a	jsr $8ac3			jsr 	LocaliseNextTerm 			; convert term to a local.
.8aba		b1 30		lda ($30),y			lda 	(codePtr),y
.8abc		c8		iny				iny
.8abd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8abf		f0 f4		beq $8ab5			beq 	Command_LOCAL 				; if so, localise another variable.
.8ac1		88		dey				dey 								; unpick pre-get
.8ac2		60		rts				rts
.8ac3						LocaliseNextTerm:
.8ac3		20 79 9a	jsr $9a79			jsr 	EvaluateTerm 				; evaluate the term
.8ac6		b5 50		lda $50,x			lda 	NSStatus,x
.8ac8		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8aca		f0 5c		beq $8b28			beq		_LNTError
.8acc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ace		85 36		sta $36				sta 	zTemp0
.8ad0		b5 60		lda $60,x			lda 	NSMantissa1,x
.8ad2		85 37		sta $37				sta  	zTemp0+1
.8ad4		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8ad6		29 10		and #$10			and 	#NSBIsString
.8ad8		d0 1e		bne $8af8			bne 	_LNTPushString
.8ada		5a		phy				phy
.8adb		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8add						_LNTPushNumLoop:
.8add		b1 36		lda ($36),y			lda		(zTemp0),y
.8adf		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8ae2		c8		iny				iny
.8ae3		c0 05		cpy #$05			cpy 	#5
.8ae5		d0 f6		bne $8add			bne 	_LNTPushNumLoop
.8ae7		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8ae9		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8aec		a5 37		lda $37				lda 	zTemp0+1
.8aee		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8af1		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8af3		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8af6		7a		ply				ply
.8af7		60		rts				rts
.8af8						_LNTPushString:
.8af8		5a		phy				phy
.8af9		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8afb		85 38		sta $38				sta 	zTemp1
.8afd		a0 01		ldy #$01			ldy 	#1
.8aff		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b01		85 39		sta $39				sta 	zTemp1+1
.8b03		a0 00		ldy #$00			ldy 	#0 							; output string
.8b05		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8b07		f0 0a		beq $8b13			beq 	_LNTStringOut
.8b09						_LNTPushStrLoop:
.8b09		b1 38		lda ($38),y			lda 	(zTemp1),y
.8b0b		f0 06		beq $8b13			beq 	_LNTStringOut
.8b0d		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8b10		c8		iny				iny
.8b11		80 f6		bra $8b09			bra 	_LNTPushStrLoop
.8b13						_LNTStringOut:
.8b13		98		tya				tya									; output length (chars written).
.8b14		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8b17		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b19		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8b1c		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b1e		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8b21		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b23		20 4e b1	jsr $b14e			jsr 	StackPushByte
.8b26		7a		ply				ply
.8b27		60		rts				rts
.8b28						_LNTError:
.8b28		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.8b2b						LocalPopValue:
.8b2b		20 66 b1	jsr $b166			jsr 	StackPopByte
.8b2e		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8b30		d0 17		bne $8b49			bne 	_LPVString
.8b32		20 66 b1	jsr $b166			jsr 	StackPopByte 				; address
.8b35		85 37		sta $37				sta 	zTemp0+1
.8b37		20 66 b1	jsr $b166			jsr 	StackPopByte
.8b3a		85 36		sta $36				sta 	zTemp0
.8b3c		5a		phy				phy
.8b3d		a0 04		ldy #$04			ldy 	#4 							; copy back
.8b3f						_LPVNumberCopy:
.8b3f		20 66 b1	jsr $b166			jsr 	StackPopByte
.8b42		91 36		sta ($36),y			sta 	(zTemp0),y
.8b44		88		dey				dey
.8b45		10 f8		bpl $8b3f			bpl 	_LPVNumberCopy
.8b47		7a		ply				ply 								; and complete
.8b48		60		rts				rts
.8b49						_LPVString:
.8b49		20 66 b1	jsr $b166			jsr 	StackPopByte 				; address of record copied to zTemp0
.8b4c		85 37		sta $37				sta 	zTemp0+1
.8b4e		20 66 b1	jsr $b166			jsr 	StackPopByte
.8b51		85 36		sta $36				sta 	zTemp0
.8b53		5a		phy				phy
.8b54		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8b56		85 38		sta $38				sta 	zTemp1
.8b58		a0 01		ldy #$01			ldy 	#1
.8b5a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b5c		85 39		sta $39				sta 	zTemp1+1
.8b5e		20 66 b1	jsr $b166			jsr 	StackPopByte 				; # chars to get => y
.8b61		a8		tay				tay
.8b62		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8b64		f0 0e		beq $8b74			beq 	_LPVStringCopied
.8b66		a9 00		lda #$00			lda 	#0 							; NULL on end
.8b68		91 38		sta ($38),y			sta 	(zTemp1),y
.8b6a						_LPVStringCopy:
.8b6a		88		dey				dey
.8b6b		30 07		bmi $8b74			bmi 	_LPVStringCopied
.8b6d		20 66 b1	jsr $b166			jsr 	StackPopByte
.8b70		91 38		sta ($38),y			sta 	(zTemp1),y
.8b72		80 f6		bra $8b6a			bra 	_LPVStringCopy
.8b74						_LPVStringCopied:
.8b74		fa		plx				plx
.8b75		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b76						NewCommand:
.8b76		20 7c 8b	jsr $8b7c			jsr 	NewProgram 					; does the actual NEW.
.8b79		4c 26 84	jmp $8426			jmp 	WarmStart 					; and warm starts straight away.
.8b7c						NewProgram:
.8b7c		20 fd a7	jsr $a7fd			jsr 	MemoryNew
.8b7f		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b82		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear everything.
.8b85		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8b86						PokeBCommand:
.8b86		a9 01		lda #$01			lda 	#1
.8b88		80 0c		bra $8b96			bra 	PokeCommand
.8b8a						PokeWCommand:
.8b8a		a9 02		lda #$02			lda 	#2
.8b8c		80 08		bra $8b96			bra 	PokeCommand
.8b8e						PokeLCommand:
.8b8e		a9 03		lda #$03			lda 	#3
.8b90		80 04		bra $8b96			bra 	PokeCommand
.8b92						PokeDCommand:
.8b92		a9 04		lda #$04			lda 	#4
.8b94		80 00		bra $8b96			bra 	PokeCommand
.8b96						PokeCommand:
.8b96		48		pha				pha 								; save count on stack
.8b97		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8b99		20 f6 9f	jsr $9ff6			jsr		Evaluate16BitInteger 		; address
.8b9c		20 1a 91	jsr $911a			jsr 	CheckComma
.8b9f		e8		inx				inx
.8ba0		20 e3 9f	jsr $9fe3			jsr		EvaluateInteger 			; data
.8ba3		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8ba5		85 36		sta $36				sta 	zTemp0
.8ba7		a5 60		lda $60				lda 	NSMantissa1
.8ba9		85 37		sta $37				sta 	zTemp0+1
.8bab		68		pla				pla 								; count -> zTemp1
.8bac		85 38		sta $38				sta 	zTemp1
.8bae		5a		phy				phy 								; save Y position.
.8baf		a0 00		ldy #$00			ldy 	#0 							; index to write
.8bb1		a2 00		ldx #$00			ldx 	#0 							; index to read
.8bb3						_PCLoop:
.8bb3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8bb5		91 36		sta ($36),y			sta 	(zTemp0),y
.8bb7		c8		iny				iny 								; next byte to write
.8bb8		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8bb9		18		clc				clc
.8bba		69 08		adc #$08			adc 	#MathStackSize
.8bbc		aa		tax				tax
.8bbd		c6 38		dec $38				dec 	zTemp1 						; done them all
.8bbf		d0 f2		bne $8bb3			bne 	_PCLoop
.8bc1		7a		ply				ply 								; restore position.
.8bc2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8bc3						CallProcedure:
.8bc3		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8bc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc7		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8bc9		f0 0c		beq $8bd7			beq 	_CPEndParam
.8bcb						_CPParamLoop:
.8bcb		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue 				; get parameter onto stack
.8bce		e8		inx				inx 								; bump next stack
.8bcf		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd1		c8		iny				iny
.8bd2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8bd4		f0 f5		beq $8bcb			beq 	_CPParamLoop
.8bd6		88		dey				dey 								; unpick.
.8bd7						_CPEndParam:
.8bd7		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8bda		c8		iny				iny									; skip right bracket
.8bdb		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8bdd		20 6f b1	jsr $b16f			jsr 	StackOpen
.8be0		20 b4 b1	jsr $b1b4			jsr 	STKSaveCodePosition 		; save loop position
.8be3		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8be5		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8be7		a5 60		lda $60				lda 	NSMantissa1
.8be9		85 37		sta $37				sta 	zTemp0+1
.8beb		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8bed		b2 36		lda ($36)			lda 	(zTemp0)
.8bef		85 30		sta $30				sta 	safePtr
.8bf1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf3		85 31		sta $31				sta 	safePtr+1
.8bf5		c8		iny				iny
.8bf6		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf8		85 32		sta $32				sta 	safePtr+2
.8bfa		c8		iny				iny
.8bfb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bfd		85 33		sta $33				sta 	safePtr+3
.8bff		c8		iny				iny 								; get Y offset -> Y
.8c00		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c02		a8		tay				tay
.8c03		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c05		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8c08		f0 13		beq $8c1d			beq 	_ParamExit 					; if so, exit.
.8c0a						_ParamExtract:
.8c0a		ca		dex				dex 								; put a local term on the level before
.8c0b		20 c3 8a	jsr $8ac3			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c0e		20 f8 88	jsr $88f8			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c11		e8		inx				inx 								; advance to next parameter to do.
.8c12		e8		inx				inx
.8c13		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8c16		f0 05		beq $8c1d			beq 	_ParamExit
.8c18		20 1a 91	jsr $911a			jsr 	CheckComma 					; comma seperating parameters
.8c1b		80 ed		bra $8c0a			bra 	_ParamExtract
.8c1d						_ParamExit:
.8c1d		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; check )
.8c20		60		rts				rts 								; and continue from here
.8c21						Command_ENDPROC:
.8c21		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8c23		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8c25		20 9c b1	jsr $b19c			jsr 	StackCheckFrame
.8c28		20 c5 b1	jsr $b1c5			jsr 	STKLoadCodePosition 		; restore code position
.8c2b		20 8e b1	jsr $b18e			jsr 	StackClose
.8c2e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c2f						Command_Read:
.8c2f		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c31		20 79 9a	jsr $9a79			jsr 	EvaluateTerm
.8c34		b5 50		lda $50,x			lda 	NSStatus,x
.8c36		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c38		f0 4f		beq $8c89			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8c3a		20 d2 8c	jsr $8cd2			jsr 	SwapDataCodePtrs 			; swap code and data
.8c3d		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c40		d0 25		bne $8c67			bne 	_CRContinueData  			; forward for the next one.
.8c42		b2 30		lda ($30)			lda 	(codePtr)
.8c44		f0 1c		beq $8c62			beq 	_CRNoData
.8c46						_CRKeepSearching:
.8c46		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8c48		a2 80		ldx #$80			ldx 	#KWC_EOL
.8c4a		20 6d 90	jsr $906d			jsr 	ScanForward
.8c4d		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8c4f		f0 16		beq $8c67			beq 	_CRHaveData 				; found it
.8c51		18		clc				clc
.8c52		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c54		65 30		adc $30				adc 	codePtr
.8c56		85 30		sta $30				sta 	codePtr
.8c58		90 02		bcc $8c5c			bcc 	_CREExit
.8c5a		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c5c						_CREExit:
.8c5c		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8c5e		b2 30		lda ($30)			lda 	(codePtr)
.8c60		d0 e4		bne $8c46			bne 	_CRKeepSearching
.8c62						_CRNoData:
.8c62		a9 0b		lda #$0b		lda	#11
.8c64		4c 2b 91	jmp $912b		jmp	ErrorHandler
.8c67						_CRHaveData:
.8c67						_CRContinueData:
.8c67		a2 01		ldx #$01			ldx 	#1
.8c69		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8c6c		ca		dex				dex
.8c6d		20 f8 88	jsr $88f8			jsr		AssignVariable 				; do the assignment
.8c70		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8c73		b1 30		lda ($30),y			lda 	(codePtr),y
.8c75		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8c77		d0 04		bne $8c7d			bne 	_CRSwapBack
.8c79		c8		iny				iny 								; consume comma
.8c7a		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8c7d						_CRSwapBack:
.8c7d		20 d2 8c	jsr $8cd2			jsr 	SwapDataCodePtrs			; swap them back.
.8c80		b1 30		lda ($30),y			lda 	(codePtr),y
.8c82		c8		iny				iny
.8c83		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c85		f0 a8		beq $8c2f			beq 	Command_Read 				; if so go round again.
.8c87		88		dey				dey 								; unpick get.
.8c88		60		rts				rts
.8c89						_CRSyntax:
.8c89		4c f4 a1	jmp $a1f4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8c8c						RemCommand:
.8c8c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8e		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8c90		d0 06		bne $8c98			bne 	_RMExit
.8c92		c8		iny				iny 								; point to offset
.8c93		98		tya				tya 								; A = offset position
.8c94		38		sec				sec 								; add size +1 hence SEC
.8c95		71 30		adc ($30),y			adc 	(codePtr),y
.8c97		a8		tay				tay 								; make current position.
.8c98						_RMExit:
.8c98		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8c99						Command_REPEAT:
.8c99		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8c9b		20 6f b1	jsr $b16f			jsr 	StackOpen
.8c9e		20 b4 b1	jsr $b1b4			jsr 	STKSaveCodePosition 		; save loop position
.8ca1		60		rts				rts
.8ca2						Command_UNTIL:
.8ca2		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8ca4		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8ca6		20 9c b1	jsr $b19c			jsr 	StackCheckFrame
.8ca9		a2 00		ldx #$00			ldx 	#0
.8cab		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; work out the number
.8cae		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; check if zero
.8cb1		f0 04		beq $8cb7			beq 	_CULoopBack 				; if so keep looping
.8cb3		20 8e b1	jsr $b18e			jsr 	StackClose		 			; return
.8cb6		60		rts				rts
.8cb7						_CULoopBack:
.8cb7		20 c5 b1	jsr $b1c5			jsr 	STKLoadCodePosition 		; loop back
.8cba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8cbb						Command_Restore:
.8cbb		20 d2 8c	jsr $8cd2			jsr 	SwapDataCodePtrs 			; swap code and data
.8cbe		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cc0		85 30		sta $30				sta 	codePtr
.8cc2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cc4		85 31		sta $31				sta 	codePtr+1
.8cc6		20 d2 8c	jsr $8cd2			jsr 	SwapDataCodePtrs 			; put them back
.8cc9		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ccb		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8cce		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8cd1		60		rts				rts
.8cd2						SwapDataCodePtrs:
.8cd2		da		phx				phx
.8cd3		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8cd5						_SDCPLoop:
.8cd5		b5 30		lda $30,x			lda 	safePtr,x
.8cd7		48		pha				pha
.8cd8		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8cdb		95 30		sta $30,x			sta 	safePtr,x
.8cdd		68		pla				pla
.8cde		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8ce1		ca		dex				dex
.8ce2		10 f1		bpl $8cd5			bpl 	_SDCPLoop
.8ce4		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8ce7		8c 1b 04	sty $041b			sty 	dataPointer+4
.8cea		a8		tay				tay
.8ceb		fa		plx				plx
.8cec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8ced						EOLCommand:
.8ced		18		clc				clc
.8cee		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cf0		65 30		adc $30				adc 	codePtr
.8cf2		85 30		sta $30				sta 	codePtr
.8cf4		90 02		bcc $8cf8			bcc 	_CREExit
.8cf6		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cf8						_CREExit:
.8cf8		80 0b		bra $8d05			bra 	RunNewLine
.8cfa						CommandRUN:
.8cfa		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8cfd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cff		85 30		sta $30				sta 	codePtr
.8d01		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d03		85 31		sta $31				sta 	codePtr+1
.8d05						RunNewLine:
.8d05		b2 30		lda ($30)			lda 	(codePtr)
.8d07		f0 7b		beq $8d84			beq 	CRNoProgram         		; no then END.
.8d09		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d0b		9a		txs				txs
.8d0c						RUNCodePointerLine:
.8d0c		a0 02		ldy #$02			ldy 	#2 							; start of program
.8d0e						_CRIncMainLoop:
.8d0e		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8d11		d0 22		bne $8d35			bne 	_CRNoBreakCheck
.8d13		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8d16		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8d19		f0 64		beq $8d7f			beq 	_CRBreak
.8d1b		a5 01		lda $01				lda 	1 							; save I/O 0
.8d1d		48		pha				pha
.8d1e		64 01		stz $01				stz 	1 							; access I/O Page 0
.8d20		38		sec				sec 								; calculate timer - LastTick
.8d21		ad 59 d6	lda $d659			lda 	$D659
.8d24		aa		tax				tax 								; saving timer in X
.8d25		ed 5f 06	sbc $065f			sbc 	LastTick
.8d28		c9 03		cmp #$03			cmp 	#3
.8d2a		90 06		bcc $8d32			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8d2c		8e 5f 06	stx $065f			stx 	LastTick 					; update last timer
.8d2f		20 a1 a0	jsr $a0a1			jsr 	TickHandler 							; go do the code.
.8d32						_NoFireTick:
.8d32		68		pla				pla 								; restore I/O 0
.8d33		85 01		sta $01				sta 	1
.8d35						_CRNoBreakCheck:
.8d35		c8		iny				iny									; next token
.8d36						_CRMainLoop:
.8d36		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d39		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b		10 10		bpl $8d4d			bpl 	_CRNotKeyword				; not a token.
.8d3d		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d3f		b0 04		bcs $8d45			bcs 	_CRIsKeyword
.8d41		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d43		b0 34		bcs $8d79			bcs		_CRSyntaxError
.8d45						_CRIsKeyword:
.8d45		c8		iny				iny 								; consume command
.8d46		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d47		aa		tax				tax 								; put in X for vector jump
.8d48		20 7c 8d	jsr $8d7c			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d4b		80 e9		bra $8d36			bra 	_CRMainLoop 				; and loop round
.8d4d						_CRNotKeyword:
.8d4d		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d4f		f0 bd		beq $8d0e			beq 	_CRIncMainLoop
.8d51		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d53		90 05		bcc $8d5a			bcc 	_CRNotVariable
.8d55						_CRGoLet:
.8d55		20 bf 88	jsr $88bf			jsr 	LetCommand
.8d58		80 dc		bra $8d36			bra 	_CRMainLoop
.8d5a						_CRNotVariable:
.8d5a		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d5c		f0 f7		beq $8d55			beq 	_CRGoLet
.8d5e		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d60		f0 f3		beq $8d55			beq 	_CRGoLet
.8d62		c9 21		cmp #$21			cmp 	#KWD_PLING
.8d64		f0 ef		beq $8d55			beq 	_CRGoLet
.8d66		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d68		f0 09		beq $8d73			beq 	_CRGoRem
.8d6a		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d6c		d0 0b		bne $8d79			bne 	_CRSyntaxError
.8d6e		20 98 82	jsr $8298			jsr 	LabelHere
.8d71		80 c3		bra $8d36			bra 	_CRMainLoop
.8d73						_CRGoRem:
.8d73		c8		iny				iny
.8d74		20 8c 8c	jsr $8c8c			jsr 	RemCommand
.8d77		80 bd		bra $8d36			bra 	_CRMainLoop
.8d79						_CRSyntaxError:
.8d79		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.8d7c						_CRCallVector0:
.8d7c		7c 1a 8e	jmp ($8e1a,x)			jmp 	(VectorSet0,x)
.8d7f						_CRBreak:
.8d7f		a9 01		lda #$01		lda	#1
.8d81		4c 2b 91	jmp $912b		jmp	ErrorHandler
.8d84						CRNoProgram:
.8d84		4c 64 86	jmp $8664			jmp 	EndCommand
.8d87						Shift1Command:
.8d87		b1 30		lda ($30),y			lda 	(codePtr),y
.8d89		c8		iny				iny
.8d8a		0a		asl a				asl 	a
.8d8b		aa		tax				tax
.8d8c		7c ce 8e	jmp ($8ece,x)			jmp 	(VectorSet1,x)
.8d8f						Shift2Command:
.8d8f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d91		c8		iny				iny
.8d92		0a		asl a				asl 	a
.8d93		aa		tax				tax
.8d94		7c 0a 8f	jmp ($8f0a,x)			jmp 	(VectorSet2,x)
.8d97						Unused1:
.8d97						Unused2:
.8d97						Unused3:
.8d97						Unused4:
.8d97		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
>8d9a								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8d9a						VectorSetPunc:
>8d9a		e3 93					.word	ShiftLeft                        ; $00 <<
>8d9c		ce 91					.word	BinaryCompareLessEqual           ; $01 <=
>8d9e		c4 91					.word	BinaryCompareNotEqual            ; $02 <>
>8da0		f4 a1					.word	SyntaxError                      ; $03 !!3
>8da2		f4 a1					.word	SyntaxError                      ; $04 ><
>8da4		d8 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8da6		e6 93					.word	ShiftRight                       ; $06 >>
>8da8		f4 a1					.word	SyntaxError                      ; $07 !!7
>8daa		f4 a1					.word	SyntaxError                      ; $08 !!8
>8dac		f4 a1					.word	SyntaxError                      ; $09 !!9
>8dae		f4 a1					.word	SyntaxError                      ; $0a !!10
>8db0		f4 a1					.word	SyntaxError                      ; $0b !!11
>8db2		f4 a1					.word	SyntaxError                      ; $0c !!12
>8db4		f4 a1					.word	SyntaxError                      ; $0d !!13
>8db6		f4 a1					.word	SyntaxError                      ; $0e !!14
>8db8		f4 a1					.word	SyntaxError                      ; $0f !!15
>8dba		f4 a1					.word	SyntaxError                      ; $10 @
>8dbc		f4 a1					.word	SyntaxError                      ; $11 !!17
>8dbe		f4 a1					.word	SyntaxError                      ; $12 !!18
>8dc0		f4 a1					.word	SyntaxError                      ; $13 [
>8dc2		8f 92					.word	IntegerDivide                    ; $14 \
>8dc4		f4 a1					.word	SyntaxError                      ; $15 ]
>8dc6		21 95					.word	EorInteger                       ; $16 ^
>8dc8		f4 a1					.word	SyntaxError                      ; $17 _
>8dca		f4 a1					.word	SyntaxError                      ; $18 `
>8dcc		f4 a1					.word	SyntaxError                      ; $19 !!25
>8dce		f4 a1					.word	SyntaxError                      ; $1a !!26
>8dd0		f4 a1					.word	SyntaxError                      ; $1b {
>8dd2		ec 94					.word	OraInteger                       ; $1c |
>8dd4		f4 a1					.word	SyntaxError                      ; $1d }
>8dd6		f4 a1					.word	SyntaxError                      ; $1e ~
>8dd8		f4 a1					.word	SyntaxError                      ; $1f [7m<7F>[m
>8dda		f4 a1					.word	SyntaxError                      ; $20
>8ddc		56 95					.word	WordIndirect                     ; $21 !
>8dde		f4 a1					.word	SyntaxError                      ; $22 "
>8de0		f4 a1					.word	SyntaxError                      ; $23 #
>8de2		f4 a1					.word	SyntaxError                      ; $24 $
>8de4		d0 92					.word	IntegerModulus                   ; $25 %
>8de6		b7 94					.word	AndInteger                       ; $26 &
>8de8		f4 a1					.word	SyntaxError                      ; $27 '
>8dea		f4 a1					.word	SyntaxError                      ; $28 (
>8dec		f4 a1					.word	SyntaxError                      ; $29 )
>8dee		3e 93					.word	MulInteger                       ; $2a *
>8df0		59 94					.word	AddInteger                       ; $2b +
>8df2		f4 a1					.word	SyntaxError                      ; $2c ,
>8df4		92 94					.word	SubInteger                       ; $2d -
>8df6		f4 a1					.word	SyntaxError                      ; $2e .
>8df8		10 97					.word	FDivideCommand                   ; $2f /
>8dfa		f4 a1					.word	SyntaxError                      ; $30 0
>8dfc		f4 a1					.word	SyntaxError                      ; $31 1
>8dfe		f4 a1					.word	SyntaxError                      ; $32 2
>8e00		f4 a1					.word	SyntaxError                      ; $33 3
>8e02		f4 a1					.word	SyntaxError                      ; $34 4
>8e04		f4 a1					.word	SyntaxError                      ; $35 5
>8e06		f4 a1					.word	SyntaxError                      ; $36 6
>8e08		f4 a1					.word	SyntaxError                      ; $37 7
>8e0a		f4 a1					.word	SyntaxError                      ; $38 8
>8e0c		f4 a1					.word	SyntaxError                      ; $39 9
>8e0e		f4 a1					.word	SyntaxError                      ; $3a :
>8e10		f4 a1					.word	SyntaxError                      ; $3b ;
>8e12		b0 91					.word	BinaryCompareLess                ; $3c <
>8e14		a6 91					.word	BinaryCompareEqual               ; $3d =
>8e16		ba 91					.word	BinaryCompareGreater             ; $3e >
>8e18		78 95					.word	ByteIndirect                     ; $3f ?
.8e1a						VectorSet0:
>8e1a		ed 8c					.word	EOLCommand                       ; $80 !0:EOF
>8e1c		87 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e1e		8f 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e20		fa 9b					.word	AbsUnary                         ; $83 ABS(
>8e22		08 9c					.word	AllocUnary                       ; $84 ALLOC(
>8e24		78 9c					.word	AscUnary                         ; $85 ASC(
>8e26		5c 9e					.word	ChrUnary                         ; $86 CHR$(
>8e28		91 a6					.word	UnaryEvent                       ; $87 EVENT(
>8e2a		a2 91					.word	UnaryFalse                       ; $88 FALSE
>8e2c		85 9c					.word	FracUnary                        ; $89 FRAC(
>8e2e		f4 a1					.word	SyntaxError                      ; $8a GETDATE$(
>8e30		f4 a1					.word	SyntaxError                      ; $8b GETTIME$(
>8e32		1b a6					.word	UnaryHit                         ; $8c HIT(
>8e34		9a 9c					.word	IntUnary                         ; $8d INT(
>8e36		1b 9e					.word	IsValUnary                       ; $8e ISVAL(
>8e38		15 a7					.word	UnaryJoyB                        ; $8f JOYB(
>8e3a		ee a6					.word	UnaryJoyX                        ; $90 JOYX(
>8e3c		f1 a6					.word	UnaryJoyY                        ; $91 JOYY(
>8e3e		2f 9f					.word	Unary_Left                       ; $92 LEFT$(
>8e40		ab 9c					.word	LenUnary                         ; $93 LEN(
>8e42		c9 9c					.word	Unary_Max                        ; $94 MAX(
>8e44		51 9f					.word	Unary_Mid                        ; $95 MID$(
>8e46		c5 9c					.word	Unary_Min                        ; $96 MIN(
>8e48		14 9d					.word	Unary_Not                        ; $97 NOT(
>8e4a		27 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8e4c		33 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8e4e		2f 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8e50		2b 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8e52		cc b0					.word	UnaryPlaying                     ; $9c PLAYING(
>8e54		60 9d					.word	Unary_Random                     ; $9d RANDOM(
>8e56		3c 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8e58		7d 9d					.word	Unary_Rnd                        ; $9f RND(
>8e5a		f3 9d					.word	SgnUnary                         ; $a0 SGN(
>8e5c		6e 9e					.word	SpcUnary                         ; $a1 SPC(
>8e5e		89 9e					.word	Unary_Str                        ; $a2 STR$(
>8e60		27 a7					.word	UnaryTimer                       ; $a3 TIMER(
>8e62		97 91					.word	UnaryTrue                        ; $a4 TRUE
>8e64		11 9e					.word	ValUnary                         ; $a5 VAL(
>8e66		67 86					.word	ForCommand                       ; $a6 FOR
>8e68		aa 87					.word	IfCommand                        ; $a7 IF
>8e6a		97 8d					.word	Unused1                          ; $a8 PROC
>8e6c		99 8c					.word	Command_REPEAT                   ; $a9 REPEAT
>8e6e		e3 90					.word	Command_WHILE                    ; $aa WHILE
>8e70		d3 87					.word	EndIf                            ; $ab ENDIF
>8e72		21 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8e74		19 87					.word	NextCommand                      ; $ad NEXT
>8e76		97 8d					.word	Unused4                          ; $ae THEN
>8e78		a2 8c					.word	Command_UNTIL                    ; $af UNTIL
>8e7a		04 91					.word	Command_WEND                     ; $b0 WEND
>8e7c		f4 a1					.word	SyntaxError                      ; $b1 BY
>8e7e		87 84					.word	CallCommand                      ; $b2 CALL
>8e80		cf a3					.word	CircleCommand                    ; $b3 CIRCLE
>8e82		bc 84					.word	ClearCommand                     ; $b4 CLEAR
>8e84		14 85					.word	ClearScreen                      ; $b5 CLS
>8e86		f4 a1					.word	SyntaxError                      ; $b6 COLOR
>8e88		f4 a1					.word	SyntaxError                      ; $b7 COLOUR
>8e8a		f4 a1					.word	SyntaxError                      ; $b8 CPRINT
>8e8c		1c 85					.word	Command_Data                     ; $b9 DATA
>8e8e		24 85					.word	DimCommand                       ; $ba DIM
>8e90		97 8d					.word	Unused3                          ; $bb DOWNTO
>8e92		cc 87					.word	ElseCode                         ; $bc ELSE
>8e94		f4 a1					.word	SyntaxError                      ; $bd FROM
>8e96		ee a5					.word	GfxCommand                       ; $be GFX
>8e98		72 87					.word	Command_GOSUB                    ; $bf GOSUB
>8e9a		90 87					.word	GotoCommand                      ; $c0 GOTO
>8e9c		f4 a1					.word	SyntaxError                      ; $c1 HERE
>8e9e		f8 a3					.word	ImageCommand                     ; $c2 IMAGE
>8ea0		d4 87					.word	Command_Input                    ; $c3 INPUT
>8ea2		bf 88					.word	LetCommand                       ; $c4 LET
>8ea4		4a a4					.word	LineCommand                      ; $c5 LINE
>8ea6		b5 8a					.word	Command_LOCAL                    ; $c6 LOCAL
>8ea8		f4 a1					.word	SyntaxError                      ; $c7 OFF
>8eaa		f4 a1					.word	SyntaxError                      ; $c8 ON
>8eac		f4 a1					.word	SyntaxError                      ; $c9 OUTLINE
>8eae		3f a6					.word	PaletteCommand                   ; $ca PALETTE
>8eb0		43 a4					.word	PlotCommand                      ; $cb PLOT
>8eb2		86 8b					.word	PokeBCommand                     ; $cc POKE
>8eb4		92 8b					.word	PokeDCommand                     ; $cd POKED
>8eb6		8e 8b					.word	PokeLCommand                     ; $ce POKEL
>8eb8		8a 8b					.word	PokeWCommand                     ; $cf POKEW
>8eba		d9 87					.word	Command_Print                    ; $d0 PRINT
>8ebc		2f 8c					.word	Command_Read                     ; $d1 READ
>8ebe		cb a3					.word	RectangleCommand                 ; $d2 RECT
>8ec0		8c 8c					.word	RemCommand                       ; $d3 REM
>8ec2		82 87					.word	Command_RETURN                   ; $d4 RETURN
>8ec4		f4 a1					.word	SyntaxError                      ; $d5 SOLID
>8ec6		e8 b0					.word	SoundCommand                     ; $d6 SOUND
>8ec8		da a3					.word	SpriteCommand                    ; $d7 SPRITE
>8eca		14 a4					.word	TextCommand                      ; $d8 TEXT
>8ecc		97 8d					.word	Unused2                          ; $d9 TO
.8ece						VectorSet1:
>8ece		f4 a1					.word	SyntaxError                      ; $80 !0:EOF
>8ed0		f4 a1					.word	SyntaxError                      ; $81 !1:SH1
>8ed2		f4 a1					.word	SyntaxError                      ; $82 !2:SH2
>8ed4		5b 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ed6		77 84					.word	AssertCommand                    ; $84 ASSERT
>8ed8		8e a5					.word	BitmapCtrl                       ; $85 BITMAP
>8eda		f4 a1					.word	SyntaxError                      ; $86 BLOAD
>8edc		f4 a1					.word	SyntaxError                      ; $87 BSAVE
>8ede		e1 85					.word	Command_Dir                      ; $88 DIR
>8ee0		5d 86					.word	Command_Drive                    ; $89 DRIVE
>8ee2		64 86					.word	EndCommand                       ; $8a END
>8ee4		a0 b0					.word	Explode                          ; $8b EXPLODE
>8ee6		f4 a1					.word	SyntaxError                      ; $8c GO
>8ee8		f4 a1					.word	SyntaxError                      ; $8d HIMEM
>8eea		0f 89					.word	Command_List                     ; $8e LIST
>8eec		15 8a					.word	Command_Load                     ; $8f LOAD
>8eee		76 8b					.word	NewCommand                       ; $90 NEW
>8ef0		7c b0					.word	PingCommand                      ; $91 PING
>8ef2		bb 8c					.word	Command_Restore                  ; $92 RESTORE
>8ef4		fa 8c					.word	CommandRUN                       ; $93 RUN
>8ef6		92 8f					.word	Command_Save                     ; $94 SAVE
>8ef8		f4 a1					.word	SyntaxError                      ; $95 SETDATE
>8efa		f4 a1					.word	SyntaxError                      ; $96 SETTIME
>8efc		94 b0					.word	ShootCommand                     ; $97 SHOOT
>8efe		d3 a5					.word	SpritesCtrl                      ; $98 SPRITES
>8f00		16 90					.word	StopCommand                      ; $99 STOP
>8f02		a7 b2					.word	Command_VERIFY                   ; $9a VERIFY
>8f04		88 a6					.word	XGoCommand                       ; $9b XGO
>8f06		7f a6					.word	XLoadCommand                     ; $9c XLOAD
>8f08		88 b0					.word	ZapCommand                       ; $9d ZAP
.8f0a						VectorSet2:
>8f0a		f4 a1					.word	SyntaxError                      ; $80 !0:EOF
>8f0c		f4 a1					.word	SyntaxError                      ; $81 !1:SH1
>8f0e		f4 a1					.word	SyntaxError                      ; $82 !2:SH2
>8f10		b3 a0					.word	Assemble_adc                     ; $83 ADC
>8f12		ab a0					.word	Assemble_and                     ; $84 AND
>8f14		c7 a0					.word	Assemble_asl                     ; $85 ASL
>8f16		31 a1					.word	Assemble_bcc                     ; $86 BCC
>8f18		35 a1					.word	Assemble_bcs                     ; $87 BCS
>8f1a		3d a1					.word	Assemble_beq                     ; $88 BEQ
>8f1c		f4 a0					.word	Assemble_bit                     ; $89 BIT
>8f1e		25 a1					.word	Assemble_bmi                     ; $8a BMI
>8f20		39 a1					.word	Assemble_bne                     ; $8b BNE
>8f22		21 a1					.word	Assemble_bpl                     ; $8c BPL
>8f24		41 a1					.word	Assemble_bra                     ; $8d BRA
>8f26		45 a1					.word	Assemble_brk                     ; $8e BRK
>8f28		29 a1					.word	Assemble_bvc                     ; $8f BVC
>8f2a		2d a1					.word	Assemble_bvs                     ; $90 BVS
>8f2c		4d a1					.word	Assemble_clc                     ; $91 CLC
>8f2e		a1 a1					.word	Assemble_cld                     ; $92 CLD
>8f30		61 a1					.word	Assemble_cli                     ; $93 CLI
>8f32		91 a1					.word	Assemble_clv                     ; $94 CLV
>8f34		bf a0					.word	Assemble_cmp                     ; $95 CMP
>8f36		08 a1					.word	Assemble_cpx                     ; $96 CPX
>8f38		03 a1					.word	Assemble_cpy                     ; $97 CPY
>8f3a		e5 a0					.word	Assemble_dec                     ; $98 DEC
>8f3c		9d a1					.word	Assemble_dex                     ; $99 DEX
>8f3e		79 a1					.word	Assemble_dey                     ; $9a DEY
>8f40		af a0					.word	Assemble_eor                     ; $9b EOR
>8f42		ea a0					.word	Assemble_inc                     ; $9c INC
>8f44		ad a1					.word	Assemble_inx                     ; $9d INX
>8f46		99 a1					.word	Assemble_iny                     ; $9e INY
>8f48		1c a1					.word	Assemble_jmp                     ; $9f JMP
>8f4a		17 a1					.word	Assemble_jsr                     ; $a0 JSR
>8f4c		bb a0					.word	Assemble_lda                     ; $a1 LDA
>8f4e		e0 a0					.word	Assemble_ldx                     ; $a2 LDX
>8f50		fe a0					.word	Assemble_ldy                     ; $a3 LDY
>8f52		d1 a0					.word	Assemble_lsr                     ; $a4 LSR
>8f54		b1 a1					.word	Assemble_nop                     ; $a5 NOP
>8f56		a7 a0					.word	Assemble_ora                     ; $a6 ORA
>8f58		5d a1					.word	Assemble_pha                     ; $a7 PHA
>8f5a		49 a1					.word	Assemble_php                     ; $a8 PHP
>8f5c		a5 a1					.word	Assemble_phx                     ; $a9 PHX
>8f5e		65 a1					.word	Assemble_phy                     ; $aa PHY
>8f60		6d a1					.word	Assemble_pla                     ; $ab PLA
>8f62		51 a1					.word	Assemble_plp                     ; $ac PLP
>8f64		b9 a1					.word	Assemble_plx                     ; $ad PLX
>8f66		75 a1					.word	Assemble_ply                     ; $ae PLY
>8f68		cc a0					.word	Assemble_rol                     ; $af ROL
>8f6a		d6 a0					.word	Assemble_ror                     ; $b0 ROR
>8f6c		59 a1					.word	Assemble_rti                     ; $b1 RTI
>8f6e		69 a1					.word	Assemble_rts                     ; $b2 RTS
>8f70		c3 a0					.word	Assemble_sbc                     ; $b3 SBC
>8f72		55 a1					.word	Assemble_sec                     ; $b4 SEC
>8f74		b5 a1					.word	Assemble_sed                     ; $b5 SED
>8f76		71 a1					.word	Assemble_sei                     ; $b6 SEI
>8f78		b7 a0					.word	Assemble_sta                     ; $b7 STA
>8f7a		a9 a1					.word	Assemble_stp                     ; $b8 STP
>8f7c		db a0					.word	Assemble_stx                     ; $b9 STX
>8f7e		f9 a0					.word	Assemble_sty                     ; $ba STY
>8f80		ef a0					.word	Assemble_stz                     ; $bb STZ
>8f82		8d a1					.word	Assemble_tax                     ; $bc TAX
>8f84		89 a1					.word	Assemble_tay                     ; $bd TAY
>8f86		12 a1					.word	Assemble_trb                     ; $be TRB
>8f88		0d a1					.word	Assemble_tsb                     ; $bf TSB
>8f8a		95 a1					.word	Assemble_tsx                     ; $c0 TSX
>8f8c		7d a1					.word	Assemble_txa                     ; $c1 TXA
>8f8e		85 a1					.word	Assemble_txs                     ; $c2 TXS
>8f90		81 a1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.8f92						Command_Save:
.8f92		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; file name to load
.8f95		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8f97		a5 36		lda $36				lda 	zTemp0
.8f99		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.8f9c		b0 2f		bcs $8fcd			bcs 	CSErrorHandler 				; error, so fail.
.8f9e		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8fa1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fa3		85 30		sta $30				sta 	codePtr
.8fa5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fa7		85 31		sta $31				sta 	codePtr+1
.8fa9						_CSLoop:
.8fa9		b2 30		lda ($30)			lda 	(codePtr)
.8fab		f0 17		beq $8fc4			beq 	_CSExit
.8fad		20 f1 8f	jsr $8ff1			jsr 	CSGetCleanLine
.8fb0		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8fb2		85 36		sta $36				sta 	zTemp0
.8fb4		20 d0 8f	jsr $8fd0			jsr 	CLWriteByteBlock 			; write the block out.
.8fb7		18		clc				clc
.8fb8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fba		65 30		adc $30				adc 	codePtr
.8fbc		85 30		sta $30				sta 	codePtr
.8fbe		90 02		bcc $8fc2			bcc 	_CREExit
.8fc0		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fc2						_CREExit:
.8fc2		80 e5		bra $8fa9			bra 	_CSLoop
.8fc4						_CSExit:
.8fc4		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; close file
.8fc7		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8fca		4c 48 8a	jmp $8a48			jmp 	CLComplete 					; display complete message.
.8fcd						CSErrorHandler:
.8fcd		4c 65 8a	jmp $8a65			jmp 	CLErrorHandler
.8fd0						CLWriteByteBlock:
.8fd0		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8fd2		f0 1c		beq $8ff0			beq 	_CLWBBExit					; if so, exit
.8fd4		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; stream to write, count in X
.8fd7		20 67 80	jsr $8067			jsr 	KNLWriteBlock 				; call one write attempt
.8fda		b0 f1		bcs $8fcd			bcs 	CSErrorHandler 				; error occurred
.8fdc		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8fde		8a		txa				txa 								; subtract bytes written from X, total count.
.8fdf		38		sec				sec
.8fe0		e5 38		sbc $38				sbc 	zTemp1
.8fe2		aa		tax				tax
.8fe3		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8fe4		a5 36		lda $36				lda 	zTemp0
.8fe6		65 38		adc $38				adc 	zTemp1
.8fe8		85 36		sta $36				sta 	zTemp0
.8fea		90 e4		bcc $8fd0			bcc 	CLWriteByteBlock
.8fec		e6 37		inc $37				inc 	zTemp0+1
.8fee		80 e0		bra $8fd0			bra 	CLWriteByteBlock 			; and retry write out.
.8ff0						_CLWBBExit:
.8ff0		60		rts				rts
.8ff1						CSGetCleanLine:
.8ff1		a9 00		lda #$00			lda 	#0 							; no indent.
.8ff3		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ff6		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8ff8		a0 00		ldy #$00			ldy 	#0
.8ffa						_CSClean:
.8ffa		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.8ffd		f0 09		beq $9008			beq 	_CSDoneClean
.8fff		30 04		bmi $9005			bmi 	_CSIgnoreCharacter
.9001		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9004		e8		inx				inx
.9005						_CSIgnoreCharacter:
.9005		c8		iny				iny
.9006		80 f2		bra $8ffa			bra 	_CSClean
.9008						_CSDoneClean:
.9008		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.900a		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.900d		e8		inx				inx
.900e		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.9011		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9013		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9015		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9016						StopCommand:
.9016		a9 08		lda #$08		lda	#8
.9018		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.901b						ProcedureScan:
.901b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.901d		85 30		sta $30				sta 	codePtr
.901f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9021		85 31		sta $31				sta 	codePtr+1
.9023						_PSLoop:
.9023		b2 30		lda ($30)			lda 	(codePtr)
.9025		f0 42		beq $9069			beq 	_PSExit
.9027		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9029		b1 30		lda ($30),y			lda 	(codePtr),y
.902b		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.902d		d0 2d		bne $905c			bne 	_PSNext
.902f		c8		iny				iny 								; get the address of the record to zTemp0 and
.9030		b1 30		lda ($30),y			lda 	(codePtr),y
.9032		29 c0		and #$c0			and 	#$C0
.9034		c9 40		cmp #$40			cmp 	#$40
.9036		d0 32		bne $906a			bne 	_PSSyntax
.9038		b1 30		lda ($30),y			lda 	(codePtr),y
.903a		18		clc				clc
.903b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.903d		85 37		sta $37				sta 	zTemp0+1
.903f		c8		iny				iny 								; LSB
.9040		b1 30		lda ($30),y			lda 	(codePtr),y
.9042		85 36		sta $36				sta 	zTemp0
.9044		c8		iny				iny 								; character after variable call.
.9045		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9046		a0 07		ldy #$07			ldy 	#7
.9048		91 36		sta ($36),y			sta 	(zTemp0),y
.904a		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.904c		a0 02		ldy #$02			ldy 	#2
.904e		91 36		sta ($36),y			sta 	(zTemp0),y
.9050		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9052						_PSCopy:
.9052		b5 30		lda $30,x			lda 	safePtr,x
.9054		c8		iny				iny
.9055		91 36		sta ($36),y			sta 	(zTemp0),y
.9057		e8		inx				inx
.9058		e0 04		cpx #$04			cpx 	#4
.905a		d0 f6		bne $9052			bne 	_PSCopy
.905c						_PSNext:
.905c		18		clc				clc
.905d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.905f		65 30		adc $30				adc 	codePtr
.9061		85 30		sta $30				sta 	codePtr
.9063		90 02		bcc $9067			bcc 	_CREExit
.9065		e6 31		inc $31				inc 	codePtr+1 					; carry
.9067						_CREExit:
.9067		80 ba		bra $9023			bra 	_PSLoop
.9069						_PSExit:
.9069		60		rts				rts
.906a						_PSSyntax:
.906a		4c f4 a1	jmp $a1f4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.906d						ScanForward:
.906d		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.906f		86 37		stx $37				stx 	zTemp0+1
.9071		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9073						_ScanLoop:
.9073		b1 30		lda ($30),y			lda 	(codePtr),y
.9075		c8		iny				iny
.9076		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9078		d0 0e		bne $9088			bne 	_ScanGoNext
.907a		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.907c		f0 04		beq $9082			beq 	_ScanMatch
.907e		c5 37		cmp $37				cmp 	zTemp0+1
.9080		d0 06		bne $9088			bne 	_ScanGoNext
.9082						_ScanMatch:
.9082		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9084		d0 01		bne $9087			bne 	_ScanNotEndEOL
.9086		88		dey				dey
.9087						_ScanNotEndEOL:
.9087		60		rts				rts
.9088						_ScanGoNext:
.9088		20 8d 90	jsr $908d			jsr  	ScanForwardOne 				; allows for shifts and so on.
.908b		80 e6		bra $9073			bra 	_ScanLoop
.908d						ScanForwardOne:
.908d		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.908f		90 3e		bcc $90cf			bcc 	_SFWExit
.9091		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9093		90 18		bcc $90ad			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9095		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9097		b0 2f		bcs $90c8			bcs 	_ScanSkipData
.9099		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.909b		90 32		bcc $90cf			bcc 	_SFWExit 					; if not, ordinary keywords.
.909d		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.909f		b0 2e		bcs $90cf			bcs 	_SFWExit
.90a1		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.90a3		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.90a5		b0 28		bcs $90cf			bcs 	_SFWExit
.90a7		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.90a9		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.90ab		80 22		bra $90cf			bra 	_SFWExit
.90ad						_ScanSkipOne:
.90ad		c8		iny				iny 								; consume the extra one.
.90ae		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.90b0		d0 1d		bne $90cf			bne 	_SFWExit
.90b2		18		clc				clc
.90b3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90b5		65 30		adc $30				adc 	codePtr
.90b7		85 30		sta $30				sta 	codePtr
.90b9		90 02		bcc $90bd			bcc 	_CREExit
.90bb		e6 31		inc $31				inc 	codePtr+1 					; carry
.90bd						_CREExit:
.90bd		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.90bf		b2 30		lda ($30)			lda 	(codePtr)
.90c1		d0 0c		bne $90cf			bne 	_SFWExit 					; if not zero, more to scan
.90c3		a9 13		lda #$13		lda	#19
.90c5		4c 2b 91	jmp $912b		jmp	ErrorHandler
.90c8						_ScanSkipData:
.90c8		88		dey				dey 								; point at data token
.90c9		c8		iny				iny 								; point to offset
.90ca		98		tya				tya 								; A = offset position
.90cb		38		sec				sec 								; add size +1 hence SEC
.90cc		71 30		adc ($30),y			adc 	(codePtr),y
.90ce		a8		tay				tay 								; make current position.
.90cf						_SFWExit:
.90cf		60		rts				rts
.90d0						ScanGetCurrentLineStep:
.90d0		64 38		stz $38				stz 	zTemp1
.90d2		a0 03		ldy #$03			ldy 	#3
.90d4						_SGCLSLoop:
.90d4		b1 30		lda ($30),y			lda 	(codePtr),y
.90d6		c8		iny				iny
.90d7		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.90d9		f0 05		beq $90e0			beq 	_SGCLSExit
.90db		20 8d 90	jsr $908d			jsr 	ScanForwardOne
.90de		80 f4		bra $90d4			bra 	_SGCLSLoop
.90e0						_SGCLSExit:
.90e0		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.90e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.90e3						Command_WHILE:
.90e3		5a		phy				phy 								; save position of the test
.90e4		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.90e6		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber
.90e9		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; check if zero
.90ec		f0 0e		beq $90fc			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.90ee		98		tya				tya 								; position *after* test.
.90ef		7a		ply				ply 								; restore position before test, at WHILE
.90f0		88		dey				dey 								; so we execute the WHILE command again.
.90f1		48		pha				pha 								; push after test on the stack
.90f2		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.90f4		20 6f b1	jsr $b16f			jsr 	StackOpen
.90f7		20 b4 b1	jsr $b1b4			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.90fa		7a		ply				ply 								; restore the position *after* the test
.90fb		60		rts				rts
.90fc						_WHExitLoop:
.90fc		68		pla				pla 								; throw post loop position
.90fd		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.90ff		aa		tax				tax
.9100		20 6d 90	jsr $906d			jsr 	ScanForward
.9103		60		rts				rts
.9104						Command_WEND:
.9104		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9106		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9108		20 9c b1	jsr $b19c			jsr 	StackCheckFrame
.910b		20 c5 b1	jsr $b1c5			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.910e		20 8e b1	jsr $b18e			jsr 	StackClose		 			; erase the frame
.9111		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9112						CheckRightBracket:
.9112		b1 30		lda ($30),y			lda 	(codePtr),y
.9114		c8		iny				iny
.9115		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9117		d0 0f		bne $9128			bne 	CNAFail
.9119		60		rts				rts
.911a						CheckComma:
.911a		b1 30		lda ($30),y			lda 	(codePtr),y
.911c		c8		iny				iny
.911d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.911f		d0 07		bne $9128			bne 	CNAFail
.9121		60		rts				rts
.9122						CheckNextA:
.9122		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9124		d0 02		bne $9128			bne 	CNAFail
.9126		c8		iny				iny 								; skip character
.9127		60		rts				rts 								; and exit
.9128						CNAFail:
.9128		4c f4 a1	jmp $a1f4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.912b						ErrorHandler:
.912b		a8		tay				tay 								; find the error text
.912c		f0 49		beq $9177			beq 	_EHEnd
.912e		a2 00		ldx #$00			ldx 	#0
.9130		a9 0d		lda #$0d			lda 	#((ErrorText) & $FF)
.9132		85 36		sta $36				sta 	0+zTemp0
.9134		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.9136		85 37		sta $37				sta 	1+zTemp0
.9138						_EHFind:
.9138		88		dey				dey 								; keep looking through text
.9139		f0 0e		beq $9149			beq 	_EHFound
.913b						_EHFindZero:
.913b		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.913d		e6 36		inc $36				inc 	zTemp0
.913f		d0 02		bne $9143			bne 	_EHFNoCarry
.9141		e6 37		inc $37				inc 	zTemp0+1
.9143						_EHFNoCarry:
.9143		c9 00		cmp #$00			cmp 	#0
.9145		d0 f4		bne $913b			bne 	_EHFindZero
.9147		80 ef		bra $9138			bra 	_EHFind
.9149						_EHFound:
.9149		a5 36		lda $36				lda 	zTemp0 						; print message
.914b		a6 37		ldx $37				ldx 	zTemp0+1
.914d		20 84 91	jsr $9184			jsr 	PrintStringXA
.9150		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9152		b1 30		lda ($30),y			lda 	(codePtr),y
.9154		d0 05		bne $915b			bne 	_EHAtMsg
.9156		c8		iny				iny
.9157		b1 30		lda ($30),y			lda 	(codePtr),y
.9159		f0 17		beq $9172			beq 	_EHCREnd
.915b						_EHAtMsg:
.915b		a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.915d		a9 7a		lda #$7a			lda 	#_AtMsg & $FF
.915f		20 84 91	jsr $9184			jsr 	PrintStringXA
.9162		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9164		b1 30		lda ($30),y			lda 	(codePtr),y
.9166		48		pha				pha
.9167		c8		iny				iny
.9168		b1 30		lda ($30),y			lda 	(codePtr),y
.916a		aa		tax				tax
.916b		68		pla				pla
.916c		20 9a 95	jsr $959a			jsr 	ConvertInt16 				; convert XA to string
.916f		20 84 91	jsr $9184			jsr 	PrintStringXA 				; and print it.
.9172						_EHCREnd:
.9172		a9 0d		lda #$0d			lda 	#13 						; new line
.9174		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9177						_EHEnd:
.9177		4c 26 84	jmp $8426			jmp 	WarmStart
>917a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9182		20 00
.9184						PrintStringXA:
.9184		5a		phy				phy
.9185		86 37		stx $37				stx 	zTemp0+1
.9187		85 36		sta $36				sta 	zTemp0
.9189		a0 00		ldy #$00			ldy 	#0
.918b						_PSXALoop:
.918b		b1 36		lda ($36),y			lda 	(zTemp0),y
.918d		f0 06		beq $9195			beq 	_PSXAExit
.918f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9192		c8		iny				iny
.9193		80 f6		bra $918b			bra 	_PSXALoop
.9195						_PSXAExit:
.9195		7a		ply				ply
.9196		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9197						UnaryTrue:
.9197		fa		plx				plx
.9198						ReturnTrue:
.9198		a9 01		lda #$01			lda 	#1  						; set to 1
.919a		20 78 a0	jsr $a078			jsr 	NSMSetByte
.919d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.919f		95 50		sta $50,x			sta 	NSStatus,x
.91a1		60		rts				rts
.91a2						UnaryFalse:
.91a2		fa		plx				plx
.91a3						ReturnFalse:
.91a3		4c 76 a0	jmp $a076			jmp 	NSMSetZero 					; set it all to zero
.91a6						BinaryCompareEqual:
.91a6		fa		plx				plx
.91a7		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91aa		c9 00		cmp #$00			cmp 	#0
.91ac		f0 ea		beq $9198			beq 	ReturnTrue
.91ae		80 f3		bra $91a3			bra 	ReturnFalse
.91b0						BinaryCompareLess:
.91b0		fa		plx				plx
.91b1		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91b4		c9 ff		cmp #$ff			cmp 	#$FF
.91b6		f0 e0		beq $9198			beq 	ReturnTrue
.91b8		80 e9		bra $91a3			bra 	ReturnFalse
.91ba						BinaryCompareGreater:
.91ba		fa		plx				plx
.91bb		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91be		c9 01		cmp #$01			cmp 	#1
.91c0		f0 d6		beq $9198			beq 	ReturnTrue
.91c2		80 df		bra $91a3			bra 	ReturnFalse
.91c4						BinaryCompareNotEqual:
.91c4		fa		plx				plx
.91c5		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91c8		c9 00		cmp #$00			cmp 	#0
.91ca		d0 cc		bne $9198			bne 	ReturnTrue
.91cc		80 d5		bra $91a3			bra 	ReturnFalse
.91ce						BinaryCompareLessEqual:
.91ce		fa		plx				plx
.91cf		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91d2		c9 01		cmp #$01			cmp 	#1
.91d4		d0 c2		bne $9198			bne 	ReturnTrue
.91d6		80 cb		bra $91a3			bra 	ReturnFalse
.91d8						BinaryCompareGreaterEqual:
.91d8		fa		plx				plx
.91d9		20 e2 91	jsr $91e2			jsr 	CompareBaseCode
.91dc		c9 ff		cmp #$ff			cmp 	#$FF
.91de		d0 b8		bne $9198			bne 	ReturnTrue
.91e0		80 c1		bra $91a3			bra 	ReturnFalse
.91e2						CompareBaseCode:
.91e2		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; make both values if references.
.91e5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.91e7		15 51		ora $51,x			ora 	NSStatus+1,x
.91e9		29 10		and #$10			and 	#NSTString
.91eb		d0 37		bne $9224			bne 	_CBCString 					; if so do string code, which will check if both.
.91ed		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.91ef		15 79		ora $79,x			ora 	NSExponent+1,x
.91f1		d0 34		bne $9227			bne 	_CBCFloat
.91f3		b5 50		lda $50,x			lda 	NSStatus,x
.91f5		15 51		ora $51,x			ora 	NSStatus+1,x
.91f7		29 08		and #$08			and 	#NSTFloat
.91f9		d0 2c		bne $9227			bne 	_CBCFloat
.91fb		20 2a 92	jsr $922a			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.91fe		e8		inx				inx
.91ff		20 2a 92	jsr $922a			jsr 	CompareFixMinusZero
.9202		ca		dex				dex
.9203		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9205		55 51		eor $51,x			eor 	NSStatus+1,x
.9207		10 0a		bpl $9213			bpl 	_CDCSameSign
.9209		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.920b		30 14		bmi $9221			bmi 	_CBCLess 					; return $FF
.920d						_CBCGreater:
.920d		a9 01		lda #$01			lda 	#1
.920f		60		rts				rts
.9210						_CBCEqual:
.9210		a9 00		lda #$00			lda 	#0
.9212		60		rts				rts
.9213						_CDCSameSign:
.9213		20 3f 94	jsr $943f			jsr 	SubTopTwoStack 				; unsigned subtract
.9216		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; or the mantissa together
.9219		f0 f5		beq $9210			beq 	_CBCEqual 					; -0 == 0
.921b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.921d		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.921f		10 ec		bpl $920d			bpl 	_CBCGreater
.9221						_CBCLess:
.9221		a9 ff		lda #$ff			lda 	#$FF
.9223		60		rts				rts
.9224						_CBCString:
.9224		4c b0 93	jmp $93b0			jmp 	CompareStrings
.9227						_CBCFloat:
.9227		4c fa 96	jmp $96fa			jmp 	CompareFloat
.922a						CompareFixMinusZero:
.922a		20 98 a0	jsr $a098			jsr 	NSMIsZero
.922d		d0 02		bne $9231			bne 	_CFXMZNotZero
.922f		74 50		stz $50,x			stz 	NSStatus,x
.9231						_CFXMZNotZero:
.9231		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9232						StringConcat:
.9232		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9234		35 51		and $51,x			and 	NSStatus+1,x
.9236		29 18		and #$18			and 	#NSBTypeMask
.9238		c9 10		cmp #$10			cmp 	#NSTString
.923a		d0 50		bne $928c			bne		_SCType
.923c		64 38		stz $38				stz 	zTemp1 						; counting total length
.923e		e8		inx				inx
.923f		20 5d 92	jsr $925d			jsr 	_SCSetupZ0 					; setup for second
.9242		20 66 92	jsr $9266			jsr 	_SCLengthZ0 				; length for second
.9245		ca		dex				dex
.9246		20 5d 92	jsr $925d			jsr 	_SCSetupZ0 					; setup for first
.9249		20 66 92	jsr $9266			jsr 	_SCLengthZ0 				; length for first
.924c		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.924e		20 5f b2	jsr $b25f			jsr 	StringTempAllocate
.9251		20 7d 92	jsr $927d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9254		e8		inx				inx
.9255		20 5d 92	jsr $925d			jsr 	_SCSetupZ0 					; copy second out
.9258		20 7d 92	jsr $927d			jsr 	_SCCopy
.925b		ca		dex				dex
.925c		60		rts				rts
.925d						_SCSetupZ0:
.925d		b5 58		lda $58,x			lda 	NSMantissa0,x
.925f		85 36		sta $36				sta 	zTemp0
.9261		b5 60		lda $60,x			lda 	NSMantissa1,x
.9263		85 37		sta $37				sta 	zTemp0+1
.9265		60		rts				rts
.9266						_SCLengthZ0:
.9266		5a		phy				phy
.9267		a0 00		ldy #$00			ldy 	#0
.9269						_SCLenLoop:
.9269		b1 36		lda ($36),y			lda 	(zTemp0),y
.926b		f0 0e		beq $927b			beq 	_SCLExit
.926d		c8		iny				iny
.926e		e6 38		inc $38				inc 	zTemp1
.9270		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9272		c9 fd		cmp #$fd			cmp 	#253
.9274		d0 f3		bne $9269			bne		_SCLenLoop
.9276		a9 09		lda #$09		lda	#9
.9278		4c 2b 91	jmp $912b		jmp	ErrorHandler
.927b						_SCLExit:
.927b		7a		ply				ply
.927c		60		rts				rts
.927d						_SCCopy:
.927d		5a		phy				phy
.927e		a0 00		ldy #$00			ldy 	#0
.9280						_SCCopyLoop:
.9280		b1 36		lda ($36),y			lda 	(zTemp0),y
.9282		f0 06		beq $928a			beq 	_SCCExit
.9284		20 98 b2	jsr $b298			jsr 	StringTempWrite
.9287		c8		iny				iny
.9288		80 f6		bra $9280			bra 	_SCCopyLoop
.928a						_SCCExit:
.928a		7a		ply				ply
.928b		60		rts				rts
.928c						_SCType:
.928c		4c fe a1	jmp $a1fe			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.928f						IntegerDivide:
.928f		fa		plx				plx
.9290		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9292		15 51		ora $51,x			ora 	NSStatus+1,x
.9294		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9295		0a		asl a				asl 	a
.9296		10 05		bpl $929d			bpl 	_NotRef
.9298		48		pha				pha
.9299		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.929c		68		pla				pla
.929d						_NotRef:
.929d		0a		asl a				asl 	a
.929e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92a0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92a2		15 79		ora $79,x			ora 	NSExponent+1,x
.92a4		f0 03		beq $92a9			beq 	_IntegerCode 				; if clear, then we have two integers
.92a6		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.92a9						_IntegerCode:
.92a9		20 c3 92	jsr $92c3			jsr 	CheckDivideZero 			; do div zero check
.92ac		20 f5 92	jsr $92f5			jsr 	Int32Divide 				; do the division
.92af		20 a6 93	jsr $93a6			jsr 	CalculateSign 				; calculate result sign
.92b2						NSMCopyPlusTwoToZero:
.92b2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.92b4		95 58		sta $58,x			sta 	NSMantissa0,x
.92b6		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.92b8		95 60		sta $60,x			sta 	NSMantissa1,x
.92ba		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.92bc		95 68		sta $68,x			sta 	NSMantissa2,x
.92be		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.92c0		95 70		sta $70,x			sta 	NSMantissa3,x
.92c2		60		rts				rts
.92c3						CheckDivideZero:
.92c3		e8		inx				inx
.92c4		20 98 a0	jsr $a098			jsr 	NSMIsZero
.92c7		f0 02		beq $92cb			beq 	_CDVError
.92c9		ca		dex				dex
.92ca		60		rts				rts
.92cb						_CDVError:
.92cb		a9 03		lda #$03		lda	#3
.92cd		4c 2b 91	jmp $912b		jmp	ErrorHandler
.92d0						IntegerModulus:
.92d0		fa		plx				plx
.92d1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92d3		15 51		ora $51,x			ora 	NSStatus+1,x
.92d5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92d6		0a		asl a				asl 	a
.92d7		10 05		bpl $92de			bpl 	_NotRef
.92d9		48		pha				pha
.92da		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92dd		68		pla				pla
.92de						_NotRef:
.92de		0a		asl a				asl 	a
.92df		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e3		15 79		ora $79,x			ora 	NSExponent+1,x
.92e5		f0 03		beq $92ea			beq 	_IntegerCode 				; if clear, then we have two integers
.92e7		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.92ea						_IntegerCode:
.92ea						IntegerModulusNoCheck:
.92ea		20 c3 92	jsr $92c3			jsr 	CheckDivideZero 			; do div zero check
.92ed		20 f5 92	jsr $92f5			jsr 	Int32Divide 				; do the division
.92f0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.92f2		56 50		lsr $50,x			lsr 	NSStatus,x
.92f4		60		rts				rts
.92f5						Int32Divide:
.92f5		48		pha				pha 								; save AXY
.92f6		5a		phy				phy
.92f7		20 59 a0	jsr $a059			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92fa		20 72 a0	jsr $a072			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.92fd		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.92ff						_I32DivideLoop:
.92ff		e8		inx				inx
.9300		e8		inx				inx
.9301		20 85 a0	jsr $a085			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9304		ca		dex				dex
.9305		ca		dex				dex
.9306		20 86 a0	jsr $a086			jsr 	NSMRotateLeft
.9309		20 34 93	jsr $9334			jsr 	DivideCheckSubtract 		; check if subtract possible
.930c		90 02		bcc $9310			bcc 	_I32DivideNoCarryIn
.930e		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9310						_I32DivideNoCarryIn:
.9310		88		dey				dey 								; loop round till division completed.
.9311		d0 ec		bne $92ff			bne 	_I32DivideLoop
.9313		7a		ply				ply 								; restore AXY and exit
.9314		68		pla				pla
.9315		60		rts				rts
.9316						Int32ShiftDivide:
.9316		48		pha				pha 								; save AY
.9317		5a		phy				phy
.9318		e8		inx				inx 								; clear S[X+2]
.9319		e8		inx				inx
.931a		20 76 a0	jsr $a076			jsr 	NSMSetZero
.931d		ca		dex				dex
.931e		ca		dex				dex
.931f		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9321						_I32SDLoop:
.9321		20 34 93	jsr $9334			jsr 	DivideCheckSubtract 		; check if subtract possible
.9324		e8		inx				inx
.9325		e8		inx				inx
.9326		20 86 a0	jsr $a086			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9329		ca		dex				dex
.932a		ca		dex				dex
.932b		20 86 a0	jsr $a086			jsr 	NSMRotateLeft
.932e		88		dey				dey 	 							; do 31 times
.932f		d0 f0		bne $9321			bne 	_I32SDLoop
.9331		7a		ply				ply 								; restore AY and exit
.9332		68		pla				pla
.9333		60		rts				rts
.9334						DivideCheckSubtract:
.9334		20 3f 94	jsr $943f			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9337		b0 04		bcs $933d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9339		20 25 94	jsr $9425			jsr 	AddTopTwoStack 				; add it back in
.933c		18		clc				clc 								; and return False
.933d						_DCSExit:
.933d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.933e						MulInteger:
.933e		fa		plx				plx
.933f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9341		15 51		ora $51,x			ora 	NSStatus+1,x
.9343		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9344		0a		asl a				asl 	a
.9345		10 05		bpl $934c			bpl 	_NotRef
.9347		48		pha				pha
.9348		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.934b		68		pla				pla
.934c						_NotRef:
.934c		0a		asl a				asl 	a 							; put MSB of type into A:7
.934d		30 09		bmi $9358			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.934f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9351		15 79		ora $79,x			ora 	NSExponent+1,x
.9353		f0 06		beq $935b			beq 	_IntegerCode 				; if clear, then we have two integers
.9355		4c bc 97	jmp $97bc			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9358						_StringData:
.9358		4c 08 a2	jmp $a208			jmp 	NotDoneError							; at least one string - don't know both are strings.
.935b						_IntegerCode:
.935b		20 68 93	jsr $9368			jsr 	MultiplyShort
.935e		c9 00		cmp #$00			cmp 	#0
.9360		f0 05		beq $9367			beq 	_MIExit
.9362		a9 04		lda #$04		lda	#4
.9364		4c 2b 91	jmp $912b		jmp	ErrorHandler
.9367						_MIExit:
.9367		60		rts				rts
.9368						MultiplyShort:
.9368		5a		phy				phy 								; save Y
.9369		20 59 a0	jsr $a059			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.936c		20 72 a0	jsr $a072			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.936f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9371						_I32MLoop:
.9371		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9373		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9375		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9377		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9379		f0 25		beq $93a0			beq 	_I32MExit 					; exit if zero
.937b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.937d		29 01		and #$01			and 	#1
.937f		f0 0d		beq $938e			beq 	_I32MNoAdd
.9381		20 25 94	jsr $9425			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9384		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9386		10 06		bpl $938e			bpl 	_I32MNoAdd
.9388						_I32ShiftRight:
.9388		20 8f a0	jsr $a08f			jsr 	NSMShiftRight 				; shift S[X] right
.938b		c8		iny				iny 								; increment shift count
.938c		80 09		bra $9397			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.938e						_I32MNoAdd:
.938e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9390		70 f6		bvs $9388			bvs 	_I32ShiftRight 				; instead.
.9392		e8		inx				inx
.9393		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9396		ca		dex				dex
.9397						_I32MShiftUpper:
.9397		e8		inx				inx 								; shift S[X+2] right
.9398		e8		inx				inx
.9399		20 8f a0	jsr $a08f			jsr 	NSMShiftRight
.939c		ca		dex				dex
.939d		ca		dex				dex
.939e		80 d1		bra $9371			bra 	_I32MLoop 					; try again.
.93a0						_I32MExit:
.93a0		20 a6 93	jsr $93a6			jsr 	CalculateSign
.93a3		98		tya				tya 								; shift in A
.93a4		7a		ply				ply 								; restore Y and exit
.93a5		60		rts				rts
.93a6						CalculateSign:
.93a6		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.93a8		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.93aa		55 51		eor $51,x			eor 	NSStatus+1,x
.93ac		0a		asl a				asl 	a 							; shift bit 7 into carry
.93ad		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.93af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93b0						CompareStrings:
.93b0		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.93b2		35 51		and $51,x			and 	NSStatus+1,x
.93b4		29 10		and #$10			and 	#NSBIsString
.93b6		f0 28		beq $93e0			beq 	_CSTypeError
.93b8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93ba		85 36		sta $36				sta 	zTemp0
.93bc		b5 60		lda $60,x			lda 	NSMantissa1,x
.93be		85 37		sta $37				sta 	zTemp0+1
.93c0		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.93c2		85 38		sta $38				sta 	zTemp1
.93c4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.93c6		85 39		sta $39				sta 	zTemp1+1
.93c8		5a		phy				phy 								; save Y so we can access strings
.93c9		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93cb						_CSLoop:
.93cb		c8		iny				iny
.93cc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93ce		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93d0		d0 06		bne $93d8			bne 	_CSDifferent
.93d2		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93d4		d0 f5		bne $93cb			bne 	_CSLoop 					; still comparing
.93d6						_CSExit:
.93d6		7a		ply				ply 								; reached end, return zero in A from EOS
.93d7		60		rts				rts
.93d8						_CSDifferent:
.93d8		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93da		90 fa		bcc $93d6			bcc		_CSExit
.93dc		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93de		80 f6		bra $93d6			bra 	_CSExit
.93e0						_CSTypeError:
.93e0		4c fe a1	jmp $a1fe			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93e3						ShiftLeft:
.93e3		38		sec				sec 								; common code, carry determines which way.
.93e4		80 01		bra $93e7			bra 	ShiftMain
.93e6						ShiftRight:
.93e6		18		clc				clc
.93e7						ShiftMain:
.93e7		fa		plx				plx 								; restore X
.93e8		08		php				php 								; save direction
.93e9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93eb		15 51		ora $51,x			ora 	NSStatus+1,x
.93ed		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93ee		0a		asl a				asl 	a
.93ef		10 05		bpl $93f6			bpl 	_NotRef
.93f1		48		pha				pha
.93f2		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93f5		68		pla				pla
.93f6						_NotRef:
.93f6		0a		asl a				asl 	a
.93f7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93f9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93fb		15 79		ora $79,x			ora 	NSExponent+1,x
.93fd		f0 03		beq $9402			beq 	_IntegerCode 				; if clear, then we have two integers
.93ff		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.9402						_IntegerCode:
.9402		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9404		29 e0		and #$e0			and 	#$E0
.9406		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9408		15 69		ora $69,x			ora 	NSMantissa2+1,x
.940a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.940c		d0 12		bne $9420			bne 	_SMExit0 					; if >= 32 it will always return zero.
.940e						_SMLoop:
.940e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9410		30 11		bmi $9423			bmi 	_SMExit 					; exit if done.
.9412		28		plp				plp 								; restore direction setting
.9413		08		php				php
.9414		90 05		bcc $941b			bcc 	_SMRight
.9416		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; shift left if CS
.9419		80 f3		bra $940e			bra 	_SMLoop
.941b						_SMRight:
.941b		20 8f a0	jsr $a08f			jsr 	NSMShiftRight 				; shift right if CC
.941e		80 ee		bra $940e			bra 	_SMLoop
.9420						_SMExit0:
.9420		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; return zero.
.9423						_SMExit:
.9423		28		plp				plp 								; throw direction
.9424		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9425						AddTopTwoStack:
.9425		18		clc				clc
.9426		b5 58		lda $58,x			lda		NSMantissa0,x
.9428		75 59		adc $59,x			adc 		NSMantissa0+1,x
.942a		95 58		sta $58,x			sta 	NSMantissa0,x
.942c		b5 60		lda $60,x			lda		NSMantissa1,x
.942e		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9430		95 60		sta $60,x			sta 	NSMantissa1,x
.9432		b5 68		lda $68,x			lda		NSMantissa2,x
.9434		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9436		95 68		sta $68,x			sta 	NSMantissa2,x
.9438		b5 70		lda $70,x			lda		NSMantissa3,x
.943a		75 71		adc $71,x			adc 		NSMantissa3+1,x
.943c		95 70		sta $70,x			sta 	NSMantissa3,x
.943e		60		rts				rts
.943f						SubTopTwoStack:
.943f		38		sec				sec
.9440		b5 58		lda $58,x			lda		NSMantissa0,x
.9442		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9444		95 58		sta $58,x			sta 	NSMantissa0,x
.9446		b5 60		lda $60,x			lda		NSMantissa1,x
.9448		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.944a		95 60		sta $60,x			sta 	NSMantissa1,x
.944c		b5 68		lda $68,x			lda		NSMantissa2,x
.944e		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9450		95 68		sta $68,x			sta 	NSMantissa2,x
.9452		b5 70		lda $70,x			lda		NSMantissa3,x
.9454		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9456		95 70		sta $70,x			sta 	NSMantissa3,x
.9458		60		rts				rts
.9459						AddInteger:
.9459		fa		plx				plx
.945a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.945c		15 51		ora $51,x			ora 	NSStatus+1,x
.945e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.945f		0a		asl a				asl 	a
.9460		10 05		bpl $9467			bpl 	_NotRef
.9462		48		pha				pha
.9463		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9466		68		pla				pla
.9467						_NotRef:
.9467		0a		asl a				asl 	a 							; put MSB of type into A:7
.9468		30 09		bmi $9473			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.946a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.946c		15 79		ora $79,x			ora 	NSExponent+1,x
.946e		f0 06		beq $9476			beq 	_IntegerCode 				; if clear, then we have two integers
.9470		4c 6c 96	jmp $966c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9473						_StringData:
.9473		4c 32 92	jmp $9232			jmp 	StringConcat							; at least one string - don't know both are strings.
.9476						_IntegerCode:
.9476						AddCode:
.9476		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9478		55 51		eor $51,x			eor 	NSStatus+1,x
.947a		10 a9		bpl $9425			bpl 	AddTopTwoStack
.947c		20 3f 94	jsr $943f			jsr 	SubTopTwoStack 				; do a physical subtraction
.947f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9481		10 07		bpl $948a			bpl 	_AddExit
.9483		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9485		95 50		sta $50,x			sta 	NSStatus,x
.9487		20 3f a0	jsr $a03f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.948a						_AddExit:
.948a		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; check for -0
.948d		d0 02		bne $9491			bne 	_AddNonZero
.948f		74 50		stz $50,x			stz 	NSStatus,x
.9491						_AddNonZero:
.9491		60		rts				rts
.9492						SubInteger:
.9492		fa		plx				plx
.9493		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9495		15 51		ora $51,x			ora 	NSStatus+1,x
.9497		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9498		0a		asl a				asl 	a
.9499		10 05		bpl $94a0			bpl 	_NotRef
.949b		48		pha				pha
.949c		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.949f		68		pla				pla
.94a0						_NotRef:
.94a0		0a		asl a				asl 	a 							; put MSB of type into A:7
.94a1		30 09		bmi $94ac			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94a3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a5		15 79		ora $79,x			ora 	NSExponent+1,x
.94a7		f0 06		beq $94af			beq 	_IntegerCode 				; if clear, then we have two integers
.94a9		4c 71 96	jmp $9671			jmp 	FloatingPointSub 							; otherwise at least one float.
.94ac						_StringData:
.94ac		4c 08 a2	jmp $a208			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94af						_IntegerCode:
.94af		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.94b1		49 80		eor #$80			eor 	#$80
.94b3		95 51		sta $51,x			sta 	NSStatus+1,x
.94b5		80 bf		bra $9476			bra 	AddCode 					; and do the same code as add.
.94b7						AndInteger:
.94b7		fa		plx				plx
.94b8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94ba		15 51		ora $51,x			ora 	NSStatus+1,x
.94bc		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94bd		0a		asl a				asl 	a
.94be		10 05		bpl $94c5			bpl 	_NotRef
.94c0		48		pha				pha
.94c1		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94c4		68		pla				pla
.94c5						_NotRef:
.94c5		0a		asl a				asl 	a
.94c6		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94c8		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94ca		15 79		ora $79,x			ora 	NSExponent+1,x
.94cc		f0 03		beq $94d1			beq 	_IntegerCode 				; if clear, then we have two integers
.94ce		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.94d1						_IntegerCode:
.94d1		b5 58		lda $58,x			lda		NSMantissa0,x
.94d3		35 59		and $59,x			and 		NSMantissa0+1,x
.94d5		95 58		sta $58,x			sta 	NSMantissa0,x
.94d7		b5 60		lda $60,x			lda		NSMantissa1,x
.94d9		35 61		and $61,x			and 		NSMantissa1+1,x
.94db		95 60		sta $60,x			sta 	NSMantissa1,x
.94dd		b5 68		lda $68,x			lda		NSMantissa2,x
.94df		35 69		and $69,x			and 		NSMantissa2+1,x
.94e1		95 68		sta $68,x			sta 	NSMantissa2,x
.94e3		b5 70		lda $70,x			lda		NSMantissa3,x
.94e5		35 71		and $71,x			and 		NSMantissa3+1,x
.94e7		95 70		sta $70,x			sta 	NSMantissa3,x
.94e9		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.94eb		60		rts				rts
.94ec						OraInteger:
.94ec		fa		plx				plx
.94ed		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94ef		15 51		ora $51,x			ora 	NSStatus+1,x
.94f1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f2		0a		asl a				asl 	a
.94f3		10 05		bpl $94fa			bpl 	_NotRef
.94f5		48		pha				pha
.94f6		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94f9		68		pla				pla
.94fa						_NotRef:
.94fa		0a		asl a				asl 	a
.94fb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94fd		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94ff		15 79		ora $79,x			ora 	NSExponent+1,x
.9501		f0 03		beq $9506			beq 	_IntegerCode 				; if clear, then we have two integers
.9503		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.9506						_IntegerCode:
.9506		b5 58		lda $58,x			lda		NSMantissa0,x
.9508		15 59		ora $59,x			ora 		NSMantissa0+1,x
.950a		95 58		sta $58,x			sta 	NSMantissa0,x
.950c		b5 60		lda $60,x			lda		NSMantissa1,x
.950e		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9510		95 60		sta $60,x			sta 	NSMantissa1,x
.9512		b5 68		lda $68,x			lda		NSMantissa2,x
.9514		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9516		95 68		sta $68,x			sta 	NSMantissa2,x
.9518		b5 70		lda $70,x			lda		NSMantissa3,x
.951a		15 71		ora $71,x			ora 		NSMantissa3+1,x
.951c		95 70		sta $70,x			sta 	NSMantissa3,x
.951e		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9520		60		rts				rts
.9521						EorInteger:
.9521		fa		plx				plx
.9522		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9524		15 51		ora $51,x			ora 	NSStatus+1,x
.9526		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9527		0a		asl a				asl 	a
.9528		10 05		bpl $952f			bpl 	_NotRef
.952a		48		pha				pha
.952b		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952e		68		pla				pla
.952f						_NotRef:
.952f		0a		asl a				asl 	a
.9530		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9532		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9534		15 79		ora $79,x			ora 	NSExponent+1,x
.9536		f0 03		beq $953b			beq 	_IntegerCode 				; if clear, then we have two integers
.9538		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.953b						_IntegerCode:
.953b		b5 58		lda $58,x			lda		NSMantissa0,x
.953d		55 59		eor $59,x			eor 		NSMantissa0+1,x
.953f		95 58		sta $58,x			sta 	NSMantissa0,x
.9541		b5 60		lda $60,x			lda		NSMantissa1,x
.9543		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9545		95 60		sta $60,x			sta 	NSMantissa1,x
.9547		b5 68		lda $68,x			lda		NSMantissa2,x
.9549		55 69		eor $69,x			eor 		NSMantissa2+1,x
.954b		95 68		sta $68,x			sta 	NSMantissa2,x
.954d		b5 70		lda $70,x			lda		NSMantissa3,x
.954f		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9551		95 70		sta $70,x			sta 	NSMantissa3,x
.9553		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9555		60		rts				rts
.9556						WordIndirect:
.9556		fa		plx				plx
.9557		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9559		15 51		ora $51,x			ora 	NSStatus+1,x
.955b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.955c		0a		asl a				asl 	a
.955d		10 05		bpl $9564			bpl 	_NotRef
.955f		48		pha				pha
.9560		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9563		68		pla				pla
.9564						_NotRef:
.9564		0a		asl a				asl 	a
.9565		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9567		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9569		15 79		ora $79,x			ora 	NSExponent+1,x
.956b		f0 03		beq $9570			beq 	_IntegerCode 				; if clear, then we have two integers
.956d		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.9570						_IntegerCode:
.9570		20 76 94	jsr $9476			jsr 	AddCode 					; add the two values
.9573		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9575		95 50		sta $50,x			sta 	NSStatus,x
.9577		60		rts				rts
.9578						ByteIndirect:
.9578		fa		plx				plx
.9579		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.957b		15 51		ora $51,x			ora 	NSStatus+1,x
.957d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.957e		0a		asl a				asl 	a
.957f		10 05		bpl $9586			bpl 	_NotRef
.9581		48		pha				pha
.9582		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9585		68		pla				pla
.9586						_NotRef:
.9586		0a		asl a				asl 	a
.9587		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9589		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958b		15 79		ora $79,x			ora 	NSExponent+1,x
.958d		f0 03		beq $9592			beq 	_IntegerCode 				; if clear, then we have two integers
.958f		4c fe a1	jmp $a1fe			jmp 	TypeError 					; anything else, type mismatch.
.9592						_IntegerCode:
.9592		20 76 94	jsr $9476			jsr 	AddCode 					; add the two values
.9595		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9597		95 50		sta $50,x			sta 	NSStatus,x
.9599		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.959a						ConvertInt16:
.959a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.959c		86 60		stx $60				stx 	NSMantissa1
.959e		64 68		stz $68				stz 	NSMantissa2
.95a0		64 70		stz $70				stz 	NSMantissa3
.95a2		64 50		stz $50				stz 	NSStatus 					; positive integer
.95a4		a2 00		ldx #$00			ldx 	#0 							; stack level
.95a6		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.95a8		80 00		bra $95aa			bra 	ConvertInt32
.95aa						ConvertInt32:
.95aa		5a		phy				phy
.95ab		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95ad		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.95af		10 08		bpl $95b9			bpl 	_CI32NotNeg
.95b1		48		pha				pha
.95b2		a9 2d		lda #$2d			lda 	#'-'
.95b4		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95b7		c8		iny				iny
.95b8		68		pla				pla
.95b9						_CI32NotNeg:
.95b9		20 c7 95	jsr $95c7			jsr 	_CI32DivideConvert 			; recursive conversion
.95bc		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95be		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95c1		7a		ply				ply
.95c2		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.95c4		a9 27		lda #$27			lda 	#numberBuffer & $FF
.95c6		60		rts				rts
.95c7						_CI32DivideConvert:
.95c7		e8		inx				inx 								; write to next slot up
.95c8		20 78 a0	jsr $a078			jsr 	NSMSetByte 		 			; write the base out.
.95cb		ca		dex				dex
.95cc		20 f5 92	jsr $92f5			jsr 	Int32Divide 				; divide
.95cf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.95d1		48		pha				pha
.95d2		20 b2 92	jsr $92b2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.95d5		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; is it zero ?
.95d8		f0 05		beq $95df			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.95da		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.95dc		20 c7 95	jsr $95c7			jsr 	_CI32DivideConvert 			; and recusrively call.
.95df						_CI32NoRecurse:
.95df		68		pla				pla 								; remainder
.95e0		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.95e2		90 02		bcc $95e6			bcc 	_CI32NotHex
.95e4		69 26		adc #$26			adc 	#6+32
.95e6						_CI32NotHex:
.95e6		69 30		adc #$30			adc 	#48
.95e8		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.95eb		c8		iny				iny
.95ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.95ed						PrecedenceLevel:
>95ed		04					.byte	 4	; $00 <<
>95ee		02					.byte	 2	; $01 <=
>95ef		02					.byte	 2	; $02 <>
>95f0		00					.byte	 0	; $03 !!3
>95f1		00					.byte	 0	; $04 ><
>95f2		02					.byte	 2	; $05 >=
>95f3		04					.byte	 4	; $06 >>
>95f4		00					.byte	 0	; $07 !!7
>95f5		00					.byte	 0	; $08 !!8
>95f6		00					.byte	 0	; $09 !!9
>95f7		00					.byte	 0	; $0a !!10
>95f8		00					.byte	 0	; $0b !!11
>95f9		00					.byte	 0	; $0c !!12
>95fa		00					.byte	 0	; $0d !!13
>95fb		00					.byte	 0	; $0e !!14
>95fc		00					.byte	 0	; $0f !!15
>95fd		00					.byte	 0	; $10 @
>95fe		00					.byte	 0	; $11 !!17
>95ff		00					.byte	 0	; $12 !!18
>9600		00					.byte	 0	; $13 [
>9601		04					.byte	 4	; $14 \
>9602		00					.byte	 0	; $15 ]
>9603		01					.byte	 1	; $16 ^
>9604		00					.byte	 0	; $17 _
>9605		00					.byte	 0	; $18 `
>9606		00					.byte	 0	; $19 !!25
>9607		00					.byte	 0	; $1a !!26
>9608		00					.byte	 0	; $1b {
>9609		01					.byte	 1	; $1c |
>960a		00					.byte	 0	; $1d }
>960b		00					.byte	 0	; $1e ~
>960c		00					.byte	 0	; $1f [7m<7F>[m
>960d		00					.byte	 0	; $20
>960e		05					.byte	 5	; $21 !
>960f		00					.byte	 0	; $22 "
>9610		00					.byte	 0	; $23 #
>9611		05					.byte	 5	; $24 $
>9612		04					.byte	 4	; $25 %
>9613		01					.byte	 1	; $26 &
>9614		00					.byte	 0	; $27 '
>9615		00					.byte	 0	; $28 (
>9616		00					.byte	 0	; $29 )
>9617		04					.byte	 4	; $2a *
>9618		03					.byte	 3	; $2b +
>9619		00					.byte	 0	; $2c ,
>961a		03					.byte	 3	; $2d -
>961b		00					.byte	 0	; $2e .
>961c		04					.byte	 4	; $2f /
>961d		00					.byte	 0	; $30 0
>961e		00					.byte	 0	; $31 1
>961f		00					.byte	 0	; $32 2
>9620		00					.byte	 0	; $33 3
>9621		00					.byte	 0	; $34 4
>9622		00					.byte	 0	; $35 5
>9623		00					.byte	 0	; $36 6
>9624		00					.byte	 0	; $37 7
>9625		00					.byte	 0	; $38 8
>9626		00					.byte	 0	; $39 9
>9627		00					.byte	 0	; $3a :
>9628		00					.byte	 0	; $3b ;
>9629		02					.byte	 2	; $3c <
>962a		02					.byte	 2	; $3d =
>962b		02					.byte	 2	; $3e >
>962c		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.962d						EvaluateExpressionAt0:
.962d		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.962f						EvaluateExpression:
.962f		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9631						EvaluateExpressionAtPrecedence:
.9631		48		pha				pha 								; save precedence level
.9632		20 79 9a	jsr $9a79			jsr 	EvaluateTerm 				; evaluate term into level X.
.9635		68		pla				pla 								; restore precedence level.
.9636						_EXPRLoop:
.9636		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9638		b1 30		lda ($30),y			lda 	(codePtr),y
.963a		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.963c		b0 25		bcs $9663			bcs 	_EXPRExit
.963e		da		phx				phx 								; read the operator precedence
.963f		aa		tax				tax
.9640		bd ed 95	lda $95ed,x			lda 	PrecedenceLevel,x
.9643		fa		plx				plx
.9644		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9646		f0 1b		beq $9663			beq 	_EXPRExit
.9648		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.964a		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.964c		c5 37		cmp $37				cmp 	zTemp0+1
.964e		b0 13		bcs $9663			bcs		_EXPRExit 					; if current >= operator exit
.9650		48		pha				pha 								; save current precedence.
.9651		b1 30		lda ($30),y			lda 	(codePtr),y
.9653		c8		iny				iny
.9654		48		pha				pha
.9655		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9657		e8		inx				inx 								; work out the right hand side.
.9658		20 31 96	jsr $9631			jsr 	EvaluateExpressionAtPrecedence
.965b		ca		dex				dex
.965c		68		pla				pla 								; get operator, call the code.
.965d		20 66 96	jsr $9666			jsr 	_EXPRCaller
.9660		68		pla				pla 								; restore precedence level
.9661		80 d3		bra $9636			bra 	_EXPRLoop 					; and go round.
.9663						_EXPRExit:
.9663		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9665		60		rts				rts
.9666						_EXPRCaller:
.9666		da		phx				phx 								; save on stack, first thing is to restore it
.9667		0a		asl a				asl 	a 							; double so can use vectors into X
.9668		aa		tax				tax
.9669		7c 9a 8d	jmp ($8d9a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.966c						FloatingPointAdd:
.966c		20 e2 97	jsr $97e2			jsr 	FloatPrepare 				; prepare for floats
.966f		80 09		bra $967a			bra 	FloatAdd
.9671						FloatingPointSub:
.9671		20 e2 97	jsr $97e2			jsr 	FloatPrepare 				; prepare for floats
.9674						FloatSubtract:
.9674		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9676		49 80		eor #$80			eor 	#$80
.9678		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.967a						FloatAdd:
.967a		48		pha				pha
.967b		5a		phy				phy
.967c		20 f1 97	jsr $97f1			jsr 	NSNormalise 				; normalise S[X]
.967f		f0 51		beq $96d2			beq 	_FAReturn1
.9681		e8		inx				inx 								; normalise S[X+1]
.9682		20 f1 97	jsr $97f1			jsr 	NSNormalise
.9685		ca		dex				dex
.9686		c9 00		cmp #$00			cmp 	#0
.9688		f0 60		beq $96ea			beq 	_FAExit 					; if so, just return A
.968a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.968c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.968e		f0 18		beq $96a8			beq 	_FAExponentsEqual
.9690		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9692		a8		tay				tay
.9693		38		sec				sec 								; do a signed comparison of the exponents.
.9694		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9696		50 02		bvc $969a			bvc 	_FANoSignedChange
.9698		49 80		eor #$80			eor 	#$80
.969a						_FANoSignedChange:
.969a		29 80		and #$80			and 	#$80
.969c		10 02		bpl $96a0			bpl 	_FAHaveMax
.969e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.96a0						_FAHaveMax:
.96a0		20 ed 96	jsr $96ed			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96a3		e8		inx				inx
.96a4		20 ed 96	jsr $96ed			jsr 	_FAShiftToExponent
.96a7		ca		dex				dex
.96a8						_FAExponentsEqual:
.96a8		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.96aa		55 51		eor $51,x			eor 	NSStatus+1,x
.96ac		30 0e		bmi $96bc			bmi 	_FADifferentSigns
.96ae		20 25 94	jsr $9425			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96b1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96b3		10 35		bpl $96ea			bpl 	_FAExit 					; if no, we are done.
.96b5		20 8f a0	jsr $a08f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96b8		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.96ba		80 2e		bra $96ea			bra 	_FAExit
.96bc						_FADifferentSigns:
.96bc		20 3f 94	jsr $943f			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96bf		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.96c1		10 06		bpl $96c9			bpl 	_FACheckZero 				; if no, check for -0
.96c3		20 38 a0	jsr $a038			jsr 	NSMNegate 					; netate result
.96c6		20 3f a0	jsr $a03f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96c9						_FACheckZero:
.96c9		20 98 a0	jsr $a098			jsr 	NSMIsZero	 				; check for -0
.96cc		d0 1c		bne $96ea			bne 	_FAExit
.96ce		74 50		stz $50,x			stz 	NSStatus,x
.96d0		80 18		bra $96ea			bra 	_FAExit
.96d2						_FAReturn1:
.96d2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.96d4		95 58		sta $58,x			sta 	NSMantissa0,x
.96d6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96d8		95 60		sta $60,x			sta 	NSMantissa1,x
.96da		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.96dc		95 68		sta $68,x			sta 	NSMantissa2,x
.96de		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.96e0		95 70		sta $70,x			sta 	NSMantissa3,x
.96e2		b5 79		lda $79,x			lda 	NSExponent+1,x
.96e4		95 78		sta $78,x			sta 	NSExponent,x
.96e6		b5 51		lda $51,x			lda 	NSStatus+1,x
.96e8		95 50		sta $50,x			sta 	NSStatus,x
.96ea						_FAExit:
.96ea		7a		ply				ply
.96eb		68		pla				pla
.96ec		60		rts				rts
.96ed						_FAShiftToExponent:
.96ed						_FAShiftToExponent2:
.96ed		98		tya				tya 								; compare Y to exponent
.96ee		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96f0		f0 07		beq $96f9			beq 	_FASEExit 					; exit if so.
.96f2		20 8f a0	jsr $a08f			jsr 	NSMShiftRight	 			; shift the mantissa right
.96f5		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.96f7		80 f4		bra $96ed			bra 	_FAShiftToExponent2
.96f9						_FASEExit:
.96f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.96fa						CompareFloat:
.96fa		20 74 96	jsr $9674			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.96fd		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.96ff		29 f8		and #$f8			and 	#$F8
.9701		15 68		ora $68,x			ora 	NSMantissa2,x
.9703		15 70		ora $70,x			ora 	NSMantissa3,x
.9705		f0 08		beq $970f			beq 	_FCExit 					; zero, so approximately identical
.9707		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9709		34 50		bit $50,x			bit 	NSStatus,x
.970b		10 02		bpl $970f			bpl 	_FCExit
.970d						_FCNegative:
.970d		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.970f						_FCExit:
.970f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9710						FDivideCommand:
.9710		fa		plx				plx	 								; restore stack position
.9711		20 e2 97	jsr $97e2			jsr 	FloatPrepare 				; prepare for floats
.9714						FloatDivide:
.9714		48		pha				pha
.9715		e8		inx				inx
.9716		20 f1 97	jsr $97f1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9719		ca		dex				dex
.971a		c9 00		cmp #$00			cmp 	#0
.971c		f0 1d		beq $973b			beq 	_FDZero
.971e		20 f1 97	jsr $97f1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9721		f0 16		beq $9739			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9723		20 16 93	jsr $9316			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9726		20 b2 92	jsr $92b2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9729		20 f1 97	jsr $97f1			jsr		NSNormalise 				; renormalise
.972c		20 a6 93	jsr $93a6			jsr 	CalculateSign 				; calculate result sign
.972f		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9731		38		sec				sec
.9732		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9734		38		sec				sec
.9735		e9 1e		sbc #$1e			sbc 	#30
.9737		95 78		sta $78,x			sta 	NSExponent,x
.9739						_FDExit:
.9739		68		pla				pla
.973a		60		rts				rts
.973b						_FDZero:
.973b		a9 03		lda #$03		lda	#3
.973d		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9740						FloatFractionalPart:
.9740		5a		phy				phy
.9741		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9743		29 7f		and #$7f			and 	#$7F
.9745		95 50		sta $50,x			sta 	NSStatus,x
.9747		20 f1 97	jsr $97f1			jsr 	NSNormalise
.974a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.974c		38		sec				sec
.974d		e9 e0		sbc #$e0			sbc 	#$E0
.974f		90 29		bcc $977a			bcc 	_FFPExit 					; already fractional
.9751		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9753		b0 22		bcs $9777			bcs 	_FFPZero
.9755		a8		tay				tay 								; put count to do in Y
.9756		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9758		20 7c 97	jsr $977c			jsr 	_FFPPartial
.975b		95 70		sta $70,x			sta 	NSMantissa3,x
.975d		b5 68		lda $68,x			lda 	NSMantissa2,x
.975f		20 7c 97	jsr $977c			jsr 	_FFPPartial
.9762		95 68		sta $68,x			sta 	NSMantissa2,x
.9764		b5 60		lda $60,x			lda 	NSMantissa1,x
.9766		20 7c 97	jsr $977c			jsr 	_FFPPartial
.9769		95 60		sta $60,x			sta 	NSMantissa1,x
.976b		b5 58		lda $58,x			lda 	NSMantissa0,x
.976d		20 7c 97	jsr $977c			jsr 	_FFPPartial
.9770		95 58		sta $58,x			sta 	NSMantissa0,x
.9772		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; zeroed check.
.9775		d0 03		bne $977a			bne 	_FFPExit
.9777						_FFPZero:
.9777		20 76 a0	jsr $a076			jsr 	NSMSetZero
.977a						_FFPExit:
.977a		7a		ply				ply
.977b		60		rts				rts
.977c						_FFPPartial:
.977c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.977e		f0 17		beq $9797			beq 	_FFFPPExit
.9780		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9782		b0 0c		bcs $9790			bcs 	_FFFPPWholeByte
.9784		5a		phy				phy
.9785						_FFFPPLeft:
.9785		0a		asl a				asl 	a
.9786		88		dey				dey
.9787		d0 fc		bne $9785			bne 	_FFFPPLeft
.9789		7a		ply				ply
.978a						_FFFPPRight:
.978a		4a		lsr a				lsr 	a
.978b		88		dey				dey
.978c		d0 fc		bne $978a			bne 	_FFFPPRight
.978e		80 07		bra $9797			bra 	_FFFPPExit
.9790						_FFFPPWholeByte:
.9790		98		tya				tya 								; subtract 8 from count
.9791		38		sec				sec
.9792		e9 08		sbc #$08			sbc 	#8
.9794		a8		tay				tay
.9795		a9 00		lda #$00			lda 	#0 							; and clear all
.9797						_FFFPPExit:
.9797		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9798						FloatIntegerPart:
.9798		48		pha				pha
.9799		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.979b		f0 1d		beq $97ba			beq 	_FIPExit 					; if so do nothing
.979d		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; is it zero ?
.97a0		f0 15		beq $97b7			beq 	_FIPZero 					; if so return zero.
.97a2		20 f1 97	jsr $97f1			jsr 	NSNormalise 				; normalise
.97a5		f0 10		beq $97b7			beq 	_FIPZero 					; normalised to zero, exit zero
.97a7						_FIPShift:
.97a7		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97a9		10 07		bpl $97b2			bpl 	_FIPCheckZero
.97ab		20 8f a0	jsr $a08f			jsr 	NSMShiftRight 				; shift mantissa right
.97ae		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.97b0		80 f5		bra $97a7			bra 	_FIPShift
.97b2						_FIPCheckZero:
.97b2		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; avoid -0 problem
.97b5		d0 03		bne $97ba			bne 	_FIPExit 					; set to zero if mantissa zero.
.97b7						_FIPZero:
.97b7		20 76 a0	jsr $a076			jsr 	NSMSetZero
.97ba						_FIPExit:
.97ba		68		pla				pla
.97bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97bc						FloatingPointMultiply:
.97bc		20 e2 97	jsr $97e2			jsr 	FloatPrepare 				; prepare for floats
.97bf						FloatMultiply:
.97bf		48		pha				pha
.97c0		20 f1 97	jsr $97f1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97c3		f0 18		beq $97dd			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.97c5		e8		inx				inx
.97c6		20 f1 97	jsr $97f1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97c9		ca		dex				dex
.97ca		c9 00		cmp #$00			cmp 	#0
.97cc		f0 0c		beq $97da			beq 	_FDSetZero
.97ce		20 68 93	jsr $9368			jsr 	MultiplyShort 				; calculate the result.
.97d1		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97d3		18		clc				clc
.97d4		75 79		adc $79,x			adc 	NSExponent+1,x
.97d6		95 78		sta $78,x			sta 	NSExponent,x
.97d8		80 03		bra $97dd			bra 	_FDExit
.97da						_FDSetZero:
.97da		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; return 0
.97dd						_FDExit:
.97dd		20 f1 97	jsr $97f1			jsr 	NSNormalise 				; normalise the result
.97e0		68		pla				pla
.97e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97e2						FloatPrepare:
.97e2		20 ed 98	jsr $98ed			jsr 	DereferenceTopTwo 			; dereference the top two values
.97e5		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.97e7		15 51		ora $51,x			ora 	NSStatus+1,x
.97e9		29 10		and #$10			and 	#NSBIsString
.97eb		d0 01		bne $97ee			bne 	_FDType
.97ed		60		rts				rts
.97ee						_FDType:
.97ee		4c fe a1	jmp $a1fe			jmp 	TypeError
.97f1						NSNormalise:
.97f1		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.97f3		29 80		and #$80			and 	#$80
.97f5		09 08		ora #$08			ora 	#NSTFloat
.97f7		95 50		sta $50,x			sta 	NSStatus,x
.97f9		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; if zero exit
.97fc		d0 07		bne $9805			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.97fe		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9800		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9802		a9 00		lda #$00			lda 	#0 							; set Z flag
.9804		60		rts				rts
.9805						_NSNormaliseOptimise:
.9805		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9807		d0 19		bne $9822			bne 	_NSNormaliseLoop
.9809		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.980b		30 15		bmi $9822			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.980d		95 70		sta $70,x			sta 	NSMantissa3,x
.980f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9811		95 68		sta $68,x			sta 	NSMantissa2,x
.9813		b5 58		lda $58,x			lda 	NSMantissa0,x
.9815		95 60		sta $60,x			sta 	NSMantissa1,x
.9817		74 58		stz $58,x			stz 	NSMantissa0,x
.9819		b5 78		lda $78,x			lda 	NSExponent,x
.981b		38		sec				sec
.981c		e9 08		sbc #$08			sbc 	#8
.981e		95 78		sta $78,x			sta 	NSExponent,x
.9820		80 e3		bra $9805			bra 	_NSNormaliseOptimise
.9822						_NSNormaliseLoop:
.9822		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9824		70 07		bvs $982d			bvs 	_NSNExit 					; exit if so with Z flag clear
.9826		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; shift mantissa left
.9829		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.982b		80 f5		bra $9822			bra 	_NSNormaliseLoop
.982d						_NSNExit:
.982d		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.982f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9830						AssignNumber:
.9830		5a		phy				phy
.9831		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9833		85 36		sta $36				sta 	zTemp0
.9835		b5 60		lda $60,x			lda 	NSMantissa1,x
.9837		85 37		sta $37				sta 	zTemp0+1
.9839		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.983b		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.983d		95 50		sta $50,x			sta 	NSStatus,x
.983f		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9841		c9 08		cmp #$08			cmp 	#NSTFloat
.9843		f0 24		beq $9869			beq 	_ANFloat
.9845		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9847		f0 03		beq $984c			beq		_ANNotFloat
.9849		4c f9 a1	jmp $a1f9			jmp 	RangeError					; if it is, report an error.
.984c						_ANNotFloat:
.984c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.984e		29 03		and #$03			and 	#3
.9850		d0 05		bne $9857			bne 	_ANByteWord
.9852		20 74 98	jsr $9874			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9855		80 1b		bra $9872			bra 	_ANExit
.9857						_ANByteWord:
.9857		48		pha				pha 								; save count
.9858		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.985a		92 36		sta ($36)			sta 	(zTemp0)
.985c		68		pla				pla
.985d		c9 01		cmp #$01			cmp	 	#1
.985f		f0 11		beq $9872			beq 	_ANExit
.9861		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9863		a0 01		ldy #$01			ldy 	#1
.9865		91 36		sta ($36),y			sta 	(zTemp0),y
.9867		80 09		bra $9872			bra 	_ANExit
.9869						_ANFloat:
.9869		20 74 98	jsr $9874			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.986c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.986e		a0 04		ldy #$04			ldy 	#4
.9870		91 36		sta ($36),y			sta 	(zTemp0),y
.9872						_ANExit:
.9872		7a		ply				ply
.9873		60		rts				rts
.9874						_ANCopy4PackSign:
.9874		a0 03		ldy #$03			ldy 	#3
.9876		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9878		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.987a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.987c		91 36		sta ($36),y			sta 	(zTemp0),y
.987e		88		dey				dey
.987f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9881		91 36		sta ($36),y			sta 	(zTemp0),y
.9883		88		dey				dey
.9884		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9886		91 36		sta ($36),y			sta 	(zTemp0),y
.9888		88		dey				dey
.9889		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.988b		91 36		sta ($36),y			sta 	(zTemp0),y
.988d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.988e						AssignString:
.988e		5a		phy				phy
.988f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9891		85 38		sta $38				sta 	zTemp1
.9893		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9895		85 39		sta $39				sta 	zTemp1+1
.9897		b5 58		lda $58,x			lda 	NSMantissa0,x
.9899		85 36		sta $36				sta 	zTemp0
.989b		b5 60		lda $60,x			lda 	NSMantissa1,x
.989d		85 37		sta $37				sta 	zTemp0+1
.989f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.98a1		b1 36		lda ($36),y			lda 	(zTemp0),y
.98a3		f0 23		beq $98c8			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.98a5		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.98a6		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.98a8		e9 02		sbc #$02			sbc 	#2
.98aa		85 3c		sta $3c				sta 	zsTemp
.98ac		a0 01		ldy #$01			ldy 	#1
.98ae		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b0		e9 00		sbc #$00			sbc 	#0
.98b2		85 3d		sta $3d				sta 	zsTemp+1
.98b4		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98b6						_ASGetLength:
.98b6		c8		iny				iny
.98b7		b1 38		lda ($38),y			lda 	(zTemp1),y
.98b9		d0 fb		bne $98b6			bne 	_ASGetLength
.98bb		98		tya				tya 								; is this length <= current length
.98bc		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98be		90 1e		bcc $98de			bcc 	_ASCopyString
.98c0		f0 1c		beq $98de			beq 	_ASCopyString
.98c2		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98c4		a0 01		ldy #$01			ldy 	#1
.98c6		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98c8						_ASNewStringRequired:
.98c8		e8		inx				inx 								; concrete the new string.
.98c9		20 e2 b1	jsr $b1e2			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.98cc		ca		dex				dex
.98cd		18		clc				clc
.98ce		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.98d0		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.98d2		92 36		sta ($36)			sta 	(zTemp0)
.98d4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98d6		69 00		adc #$00			adc 	#0
.98d8		a0 01		ldy #$01			ldy 	#1
.98da		91 36		sta ($36),y			sta 	(zTemp0),y
.98dc		80 0d		bra $98eb			bra 	_ASExit
.98de						_ASCopyString:
.98de		a0 00		ldy #$00			ldy 	#0
.98e0						_ASCopyLoop:
.98e0		b1 38		lda ($38),y			lda 	(zTemp1),y
.98e2		c8		iny				iny
.98e3		c8		iny				iny
.98e4		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98e6		88		dey				dey
.98e7		c9 00		cmp #$00			cmp 	#0
.98e9		d0 f5		bne $98e0			bne 	_ASCopyLoop
.98eb						_ASExit:
.98eb		7a		ply				ply
.98ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98ed						DereferenceTopTwo:
.98ed		e8		inx				inx
.98ee		20 f2 98	jsr $98f2			jsr 	Dereference 				; deref x+1
.98f1		ca		dex				dex  								; falls through to deref x
.98f2						Dereference:
.98f2		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.98f4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.98f6		f0 48		beq $9940			beq 	_DRFExit 					; not a reference, so exit.
.98f8		5a		phy				phy
.98f9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.98fb		85 36		sta $36				sta 	zTemp0
.98fd		b5 60		lda $60,x			lda 	NSMantissa1,x
.98ff		85 37		sta $37				sta 	zTemp0+1
.9901		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9903		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9905		95 58		sta $58,x			sta 	NSMantissa0,x
.9907		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9909		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.990b		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.990d		f0 0e		beq $991d			beq 	_DRFDereferenceTwo
.990f		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9911		f0 2f		beq $9942			beq 	_DRFFull
.9913		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9915		29 03		and #$03			and 	#3
.9917		f0 29		beq $9942			beq 	_DRFFull 					; the whole word
.9919		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.991b		f0 06		beq $9923			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.991d						_DRFDereferenceTwo:
.991d		a0 01		ldy #$01			ldy 	#1
.991f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9921		95 60		sta $60,x			sta 	NSMantissa1,x
.9923						_DRFClear23:
.9923		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9925		74 70		stz $70,x			stz 	NSMantissa3,x
.9927		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9929		29 18		and #$18			and 	#NSBTypeMask
.992b		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.992d		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.992f		d0 0e		bne $993f			bne 	_DRFNotString
.9931		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9933		15 60		ora $60,x			ora 	NSMantissa1,x
.9935		d0 08		bne $993f			bne 	_DRFNotString
.9937		a9 41		lda #$41			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9939		95 58		sta $58,x			sta 	NSMantissa0,x
.993b		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.993d		95 60		sta $60,x			sta 	NSMantissa1,x
.993f						_DRFNotString
.993f		7a		ply				ply 								; restore Y and exit
.9940						_DRFExit:
.9940		60		rts				rts
.9941						_DRFNullString:
>9941		00						.byte 	0
.9942						_DRFFull:
.9942		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9944		b1 36		lda ($36),y			lda 	(zTemp0),y
.9946		95 60		sta $60,x			sta 	NSMantissa1,x
.9948		c8		iny				iny
.9949		b1 36		lda ($36),y			lda 	(zTemp0),y
.994b		95 68		sta $68,x			sta 	NSMantissa2,x
.994d		c8		iny				iny
.994e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9950		95 70		sta $70,x			sta 	NSMantissa3,x
.9952		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9954		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9956		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9958		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.995a		f0 05		beq $9961			beq 	_DRFNoExponent
.995c		c8		iny				iny 								; if not, read the exponent as well.
.995d		b1 36		lda ($36),y			lda 	(zTemp0),y
.995f		95 78		sta $78,x			sta 	NSExponent,x
.9961						_DRFNoExponent:
.9961		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9963		10 0a		bpl $996f			bpl 	_DRFExit2 					; if not, then exit.
.9965		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9967		95 70		sta $70,x			sta 	NSMantissa3,x
.9969		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.996b		09 80		ora #$80			ora 	#NSBIsNegative
.996d		95 50		sta $50,x			sta 	NSStatus,x
.996f						_DRFExit2:
.996f		7a		ply				ply
.9970		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9971						EncodeNumberStart:
.9971		38		sec				sec
.9972		80 01		bra $9975			bra 	EncodeNumberContinue+1
.9974						EncodeNumberContinue:
.9974		18		clc				clc
.9975						EncodeNumber:
.9975		08		php				php 								; save reset flag.
.9976		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9978		f0 12		beq $998c			beq 	_ENIsOkay
.997a		c9 30		cmp #$30			cmp 	#"0"
.997c		90 04		bcc $9982			bcc 	_ENBadNumber
.997e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9980		90 0a		bcc $998c			bcc 	_ENIsOkay
.9982						_ENBadNumber:
.9982		28		plp				plp 								; throw saved reset
.9983		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9986		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9988		f0 7b		beq $9a05			beq 	_ENConstructFinal
.998a						_ENFail:
.998a		18		clc				clc 								; not allowed
.998b		60		rts				rts
.998c						_ENIsOkay:
.998c		28		plp				plp 								; are we restarting
.998d		90 15		bcc $99a4			bcc 	_ENNoRestart
.998f						_ENStartEncode:
.998f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9991		f0 0c		beq $999f			beq 	_ENFirstDP
.9993		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9995		20 78 a0	jsr $a078			jsr 	NSMSetByte 					; in single byte mode.
.9998		a9 01		lda #$01			lda 	#ESTA_Low
.999a						_ENExitChange:
.999a		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.999d		38		sec				sec
.999e		60		rts				rts
.999f						_ENFirstDP:
.999f		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; clear integer part
.99a2		80 3c		bra $99e0			bra 	_ESTASwitchFloat			; go straight to float and exi
.99a4						_ENNoRestart:
.99a4		48		pha				pha 								; save digit or DP on stack.
.99a5		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.99a8		c9 01		cmp #$01			cmp 	#ESTA_Low
.99aa		f0 09		beq $99b5			beq  	_ESTALowState
.99ac		c9 02		cmp #$02			cmp 	#ESTA_High
.99ae		f0 26		beq $99d6			beq 	_ESTAHighState
.99b0		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99b2		f0 38		beq $99ec			beq 	_ESTADecimalState
>99b4		db						.byte 	$DB 						; causes a break in the emulator
.99b5						_ESTALowState:
.99b5		68		pla				pla 								; get value back
.99b6		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.99b8		f0 26		beq $99e0			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.99ba		29 0f		and #$0f			and 	#15 						; make digit
.99bc		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.99bf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99c1		0a		asl a				asl 	a
.99c2		0a		asl a				asl 	a
.99c3		75 58		adc $58,x			adc 	NSMantissa0,x
.99c5		0a		asl a				asl 	a
.99c6		6d 06 04	adc $0406			adc 	digitTemp
.99c9		95 58		sta $58,x			sta 	NSMantissa0,x
.99cb		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99cd		90 05		bcc $99d4			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99cf		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99d1		8d 05 04	sta $0405			sta 	encodeState
.99d4						_ESTANoSwitch:
.99d4		38		sec				sec
.99d5		60		rts				rts
.99d6						_ESTAHighState:
.99d6		68		pla				pla 								; get value back
.99d7		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99d9		f0 05		beq $99e0			beq 	_ESTASwitchFloat
.99db		20 39 9a	jsr $9a39			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99de		38		sec				sec
.99df		60		rts				rts
.99e0						_ESTASwitchFloat:
.99e0		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.99e3		e8		inx				inx 								; zero the decimal additive.
.99e4		20 76 a0	jsr $a076			jsr 	NSMSetZero
.99e7		ca		dex				dex
.99e8		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99ea		80 ae		bra $999a			bra 	_ENExitChange
.99ec						_ESTADecimalState:
.99ec		68		pla				pla 								; digit.
.99ed		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99ef		f0 99		beq $998a			beq 	_ENFail
.99f1		e8		inx				inx 								; put digit into fractional part of X+1
.99f2		20 39 9a	jsr $9a39			jsr 	ESTAShiftDigitIntoMantissa
.99f5		ca		dex				dex
.99f6		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.99f9		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.99fc		c9 0b		cmp #$0b			cmp 	#11
.99fe		f0 02		beq $9a02			beq 	_ESTADSFail
.9a00		38		sec				sec
.9a01		60		rts				rts
.9a02						_ESTADSFail:
.9a02		4c f9 a1	jmp $a1f9			jmp 	RangeError
.9a05						_ENConstructFinal:
.9a05		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9a08		f0 2d		beq $9a37			beq 	_ENCFExit 					; no decimals
.9a0a		5a		phy				phy
.9a0b		0a		asl a				asl 	a 							; x 4 and CLC
.9a0c		0a		asl a				asl 	a
.9a0d		6d 07 04	adc $0407			adc 	decimalCount
.9a10		a8		tay				tay
.9a11		b9 b8 a1	lda $a1b8,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a14		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9a16		b9 b9 a1	lda $a1b9,y			lda 	DecimalScalarTable-5+1,y
.9a19		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9a1b		b9 ba a1	lda $a1ba,y			lda 	DecimalScalarTable-5+2,y
.9a1e		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9a20		b9 bb a1	lda $a1bb,y			lda 	DecimalScalarTable-5+3,y
.9a23		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9a25		b9 bc a1	lda $a1bc,y			lda 	DecimalScalarTable-5+4,y
.9a28		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9a2a		a9 08		lda #$08			lda 	#NSTFloat
.9a2c		95 52		sta $52,x			sta 	NSStatus+2,x
.9a2e		7a		ply				ply
.9a2f		e8		inx				inx 								; multiply decimal const by decimal scalar
.9a30		20 bf 97	jsr $97bf			jsr 	FloatMultiply
.9a33		ca		dex				dex
.9a34		20 7a 96	jsr $967a			jsr 	FloatAdd 					; add to integer part.
.9a37						_ENCFExit:
.9a37		18		clc				clc 								; reject the digit.
.9a38		60		rts				rts
.9a39						ESTAShiftDigitIntoMantissa:
.9a39		29 0f		and #$0f			and 	#15 						; save digit
.9a3b		48		pha				pha
.9a3c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a3e		48		pha				pha
.9a3f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a41		48		pha				pha
.9a42		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a44		48		pha				pha
.9a45		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a47		48		pha				pha
.9a48		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 2
.9a4b		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 4
.9a4e		18		clc				clc 								; pop mantissa and add
.9a4f		68		pla				pla
.9a50		75 58		adc $58,x			adc 	NSMantissa0,x
.9a52		95 58		sta $58,x			sta 	NSMantissa0,x
.9a54		68		pla				pla
.9a55		75 60		adc $60,x			adc 	NSMantissa1,x
.9a57		95 60		sta $60,x			sta 	NSMantissa1,x
.9a59		68		pla				pla
.9a5a		75 68		adc $68,x			adc 	NSMantissa2,x
.9a5c		95 68		sta $68,x			sta 	NSMantissa2,x
.9a5e		68		pla				pla
.9a5f		75 70		adc $70,x			adc 	NSMantissa3,x
.9a61		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9a63		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 10
.9a66		68		pla				pla 								; add digit
.9a67		18		clc				clc
.9a68		75 58		adc $58,x			adc 	NSMantissa0,x
.9a6a		95 58		sta $58,x			sta 	NSMantissa0,x
.9a6c		90 0a		bcc $9a78			bcc 	_ESTASDExit
.9a6e		f6 60		inc $60,x			inc 	NSMantissa1,x
.9a70		d0 06		bne $9a78			bne 	_ESTASDExit
.9a72		f6 68		inc $68,x			inc 	NSMantissa2,x
.9a74		d0 02		bne $9a78			bne 	_ESTASDExit
.9a76		f6 70		inc $70,x			inc 	NSMantissa3,x
.9a78						_ESTASDExit:
.9a78		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a79						EvaluateTerm:
.9a79		b1 30		lda ($30),y			lda 	(codePtr),y
.9a7b		30 18		bmi $9a95			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a7d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a7f		b0 6c		bcs $9aed			bcs 	_ETVariable
.9a81		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a83		90 6b		bcc $9af0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a85		c9 3a		cmp #$3a			cmp 	#'9'+1
.9a87		b0 67		bcs $9af0			bcs 	_ETPuncUnary
.9a89		20 71 99	jsr $9971			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a8c						_ETNumber:
.9a8c		c8		iny				iny 								; keep encoding until we have the numbers
.9a8d		b1 30		lda ($30),y			lda 	(codePtr),y
.9a8f		20 74 99	jsr $9974			jsr 	EncodeNumberContinue
.9a92		b0 f8		bcs $9a8c			bcs 	_ETNumber 					; go back if accepted.
.9a94		60		rts				rts
.9a95						_ETCheckUnary:
.9a95		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a97		f0 3f		beq $9ad8			beq 	_ETString
.9a99		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a9b		f0 12		beq $9aaf			beq 	_ETHexConstant
.9a9d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9a9f		90 0b		bcc $9aac			bcc 	_ETSyntaxError
.9aa1		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9aa3		b0 07		bcs $9aac			bcs 	_ETSyntaxError
.9aa5		da		phx				phx 								; push X on the stack
.9aa6		0a		asl a				asl 	a 							; put vector x 2 into X
.9aa7		aa		tax				tax
.9aa8		c8		iny				iny 								; consume unary function token
.9aa9		7c 1a 8e	jmp ($8e1a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9aac						_ETSyntaxError:
.9aac		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.9aaf						_ETHexConstant:
.9aaf		c8		iny				iny 								; skip #
.9ab0		c8		iny				iny 								; skip count
.9ab1		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; clear result
.9ab4						_ETHLoop:
.9ab4		b1 30		lda ($30),y			lda 	(codePtr),y
.9ab6		c8		iny				iny 								; and consume
.9ab7		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ab9		f0 1c		beq $9ad7			beq 	_ETHExit
.9abb		48		pha				pha 								; save on stack.
.9abc		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 2
.9abf		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 4
.9ac2		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 8
.9ac5		20 85 a0	jsr $a085			jsr 	NSMShiftLeft 				; x 16
.9ac8		68		pla				pla 								; ASCII
.9ac9		c9 41		cmp #$41			cmp 	#'A'
.9acb		90 02		bcc $9acf			bcc 	_ETHNotChar
.9acd		e9 07		sbc #$07			sbc 	#7
.9acf						_ETHNotChar:
.9acf		29 0f		and #$0f			and 	#15 						; digit now
.9ad1		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ad3		95 58		sta $58,x			sta 	NSMantissa0,x
.9ad5		80 dd		bra $9ab4			bra 	_ETHLoop 					; go round.
.9ad7						_ETHExit:
.9ad7		60		rts				rts
.9ad8						_ETString:
.9ad8		c8		iny				iny 								; look at length
.9ad9		b1 30		lda ($30),y			lda 	(codePtr),y
.9adb		48		pha				pha
.9adc		c8		iny				iny 								; first character
.9add		20 0a a8	jsr $a80a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ae0		68		pla				pla 								; restore count and save
.9ae1		85 36		sta $36				sta 	zTemp0
.9ae3		98		tya				tya 								; add length to Y to skip it.
.9ae4		18		clc				clc
.9ae5		65 36		adc $36				adc 	zTemp0
.9ae7		a8		tay				tay
.9ae8		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9aea		95 50		sta $50,x			sta 	NSStatus,x
.9aec		60		rts				rts
.9aed						_ETVariable:
.9aed		4c 42 9b	jmp $9b42			jmp 	VariableHandler
.9af0						_ETPuncUnary:
.9af0		c8		iny				iny 								; consume the unary character
.9af1		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9af3		f0 2b		beq $9b20			beq 	_ETUnaryNegate
.9af5		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9af7		f0 36		beq $9b2f			beq 	_ETDereference
.9af9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9afb		f0 3e		beq $9b3b			beq 	_ETParenthesis
.9afd		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9aff		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b01		f0 06		beq $9b09			beq 	_ETIndirection
.9b03		e6 36		inc $36				inc 	zTemp0
.9b05		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b07		d0 a3		bne $9aac			bne 	_ETSyntaxError
.9b09						_ETIndirection:
.9b09		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b0b		1a		inc a				inc 	a
.9b0c		48		pha				pha
.9b0d		20 79 9a	jsr $9a79			jsr 	EvaluateTerm				; evaluate the term
.9b10		20 f2 98	jsr $98f2			jsr 	Dereference 				; dereference it.
.9b13		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b15		d0 06		bne $9b1d			bne 	_ETTypeMismatch
.9b17		68		pla				pla 								; indirection 1-2
.9b18		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b1a		95 50		sta $50,x			sta 	NSStatus,x
.9b1c		60		rts				rts
.9b1d						_ETTypeMismatch:
.9b1d		4c fe a1	jmp $a1fe			jmp 	TypeError
.9b20						_ETUnaryNegate:
.9b20		20 79 9a	jsr $9a79			jsr 	EvaluateTerm				; evaluate the term
.9b23		20 f2 98	jsr $98f2			jsr 	Dereference 				; dereference it.
.9b26		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9b28		29 10		and #$10			and 	#NSTString
.9b2a		d0 f1		bne $9b1d			bne 	_ETTypeMismatch
.9b2c		4c 38 a0	jmp $a038			jmp 	NSMNegate  					; just toggles the sign bit.
.9b2f						_ETDereference:
.9b2f		20 79 9a	jsr $9a79			jsr 	EvaluateTerm				; evaluate the term
.9b32		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9b34		29 20		and #$20			and 	#NSBIsReference
.9b36		f0 e5		beq $9b1d			beq 	_ETTypeMismatch
.9b38		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9b3a		60		rts				rts
.9b3b						_ETParenthesis:
.9b3b		20 2f 96	jsr $962f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b3e		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; check for )
.9b41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b42						VariableHandler:
.9b42		b1 30		lda ($30),y			lda 	(codePtr),y
.9b44		18		clc				clc
.9b45		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b47		85 37		sta $37				sta 	zTemp0+1
.9b49		c8		iny				iny
.9b4a		b1 30		lda ($30),y			lda 	(codePtr),y
.9b4c		85 36		sta $36				sta 	zTemp0
.9b4e		c8		iny				iny
.9b4f		18		clc				clc									; copy variable address+3 to mantissa
.9b50		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9b52		95 58		sta $58,x			sta 	NSMantissa0,x
.9b54		a5 37		lda $37				lda 	zTemp0+1
.9b56		69 00		adc #$00			adc 	#0
.9b58		95 60		sta $60,x			sta 	NSMantissa1,x
.9b5a		74 68		stz $68,x			stz 	NSMantissa2,x
.9b5c		74 70		stz $70,x			stz 	NSMantissa3,x
.9b5e		74 78		stz $78,x			stz 	NSExponent,x
.9b60		5a		phy				phy
.9b61		a0 02		ldy #$02			ldy 	#2 							; read type
.9b63		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b65		7a		ply				ply
.9b66		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b68		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b6a		95 50		sta $50,x			sta 	NSStatus,x
.9b6c		29 04		and #$04			and 	#NSBIsArray
.9b6e		d0 01		bne $9b71			bne 	_VHArray
.9b70		60		rts				rts
.9b71						_VHArray:
.9b71		e8		inx				inx
.9b72		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b75		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b77		95 51		sta $51,x			sta 	NSStatus+1,x
.9b79		b1 30		lda ($30),y			lda 	(codePtr),y
.9b7b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b7d		d0 06		bne $9b85			bne 	_VHNoSecondIndex
.9b7f		c8		iny				iny 								; skip the comma
.9b80		e8		inx				inx
.9b81		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b84		ca		dex				dex
.9b85						_VHNoSecondIndex:
.9b85		ca		dex				dex 								; set X back.
.9b86		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; and check the right bracket.
.9b89		5a		phy				phy 								; save position
.9b8a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9b8c		85 3e		sta $3e				sta 	zaTemp
.9b8e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b90		85 3f		sta $3f				sta 	zaTemp+1
.9b92		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9b94		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b96		f0 5d		beq $9bf5			beq 	_VHBadArray
.9b98		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b9a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b9c		f0 02		beq $9ba0			beq 	_VHHas2Mask
.9b9e		a9 ff		lda #$ff			lda 	#$FF
.9ba0						_VHHas2Mask:
.9ba0		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9ba2		f0 4c		beq $9bf0			beq 	_VHBadIndex
.9ba4		0a		asl a				asl 	a 							; carry will be set if a second index
.9ba5		90 08		bcc $9baf			bcc 	_VHCheckFirstIndex
.9ba7		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ba9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bab		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9bad		90 41		bcc $9bf0			bcc 	_VHBadIndex
.9baf						_VHCheckFirstIndex:
.9baf		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bb1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bb3		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9bb5		90 39		bcc $9bf0			bcc 	_VHBadIndex
.9bb7		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bb9		64 37		stz $37				stz 	zTemp0+1
.9bbb		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bbd		30 0e		bmi $9bcd			bmi 	_VHNoMultiply
.9bbf		da		phx				phx
.9bc0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bc2		48		pha				pha
.9bc3		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bc5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bc7		1a		inc a				inc 	a 							; add 1 for zero base
.9bc8		fa		plx				plx
.9bc9		20 21 a0	jsr $a021			jsr 	Multiply8x8 				; calculate -> Z0
.9bcc		fa		plx				plx
.9bcd						_VHNoMultiply:
.9bcd		18		clc				clc
.9bce		a5 36		lda $36				lda 	zTemp0
.9bd0		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9bd2		85 36		sta $36				sta 	zTemp0
.9bd4		a5 37		lda $37				lda 	zTemp0+1
.9bd6		69 00		adc #$00			adc 	#0
.9bd8		85 37		sta $37				sta 	zTemp0+1
.9bda		b5 50		lda $50,x			lda 	NSStatus,x
.9bdc		20 bf 85	jsr $85bf			jsr 	ScaleByBaseType
.9bdf		18		clc				clc
.9be0		b2 3e		lda ($3e)			lda 	(zaTemp)
.9be2		65 36		adc $36				adc 	zTemp0
.9be4		95 58		sta $58,x			sta 	NSMantissa0,x
.9be6		a0 01		ldy #$01			ldy 	#1
.9be8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bea		65 37		adc $37				adc 	zTemp0+1
.9bec		95 60		sta $60,x			sta 	NSMantissa1,x
.9bee		7a		ply				ply 								; restore position
.9bef		60		rts				rts
.9bf0						_VHBadIndex:
.9bf0		a9 17		lda #$17		lda	#23
.9bf2		4c 2b 91	jmp $912b		jmp	ErrorHandler
.9bf5						_VHBadArray:
.9bf5		a9 18		lda #$18		lda	#24
.9bf7		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9bfa						AbsUnary:
.9bfa		fa		plx				plx 								; restore stack pos
.9bfb		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; get a float or int
.9bfe		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9c01		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9c03		29 7f		and #$7f			and 	#$7F
.9c05		95 50		sta $50,x			sta 	NSStatus,x
.9c07		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c08						AllocUnary:
.9c08		fa		plx				plx 								; restore stack pos
.9c09		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger		; get bytes required.
.9c0c		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9c0f		da		phx				phx 								; save X/Y
.9c10		5a		phy				phy
.9c11		8a		txa				txa 								; copy X into Y
.9c12		a8		tay				tay
.9c13		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9c16		aa		tax				tax
.9c17		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9c1a		20 27 9c	jsr $9c27			jsr 	AllocateXABytes 			; allocate memory
.9c1d		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9c20		8a		txa				txa 	 							; typing is 16 bit integer.
.9c21		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9c24		7a		ply				ply
.9c25		fa		plx				plx
.9c26		60		rts				rts
.9c27						AllocateXABytes:
.9c27		5a		phy				phy
.9c28		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c2b		84 36		sty $36				sty 	zTemp0
.9c2d		5a		phy				phy
.9c2e		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9c31		84 37		sty $37				sty 	zTemp0+1
.9c33		5a		phy				phy
.9c34		18		clc				clc 								; add to low memory pointer
.9c35		6d 0c 04	adc $040c			adc 	lowMemPtr
.9c38		8d 0c 04	sta $040c			sta 	lowMemPtr
.9c3b		8a		txa				txa
.9c3c		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9c3f		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9c42		b0 2f		bcs $9c73			bcs 	CISSMemory
.9c44		20 65 9c	jsr $9c65			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c47						_ClearMemory:
.9c47		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9c4a		c5 36		cmp $36				cmp 	zTemp0
.9c4c		d0 07		bne $9c55			bne 	_CMClearNext
.9c4e		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9c51		c5 37		cmp $37				cmp 	zTemp0+1
.9c53		f0 0c		beq $9c61			beq 	_CMExit
.9c55						_CMClearNext:
.9c55		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c57		92 36		sta ($36)			sta 	(zTemp0)
.9c59		e6 36		inc $36				inc 	zTemp0
.9c5b		d0 ea		bne $9c47			bne 	_ClearMemory
.9c5d		e6 37		inc $37				inc		zTemp0+1
.9c5f		80 e6		bra $9c47			bra 	_ClearMemory
.9c61						_CMExit:
.9c61		fa		plx				plx
.9c62		68		pla				pla
.9c63		7a		ply				ply
.9c64		60		rts				rts
.9c65						CheckIdentifierStringSpace:
.9c65		48		pha				pha
.9c66		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9c69		18		clc				clc
.9c6a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c6c		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9c6f		b0 02		bcs $9c73			bcs 	CISSMemory
.9c71		68		pla				pla
.9c72		60		rts				rts
.9c73						CISSMemory:
.9c73		a9 06		lda #$06		lda	#6
.9c75		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9c78						AscUnary:
.9c78		fa		plx				plx 								; restore stack pos
.9c79		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; get a string
.9c7c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9c7e		20 78 a0	jsr $a078			jsr 	NSMSetByte 					; ASC("") will return zero.
.9c81		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9c84		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9c85						FracUnary:
.9c85		fa		plx				plx 								; restore stack pos
.9c86		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; get a float or int
.9c89		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9c8c		b5 50		lda $50,x			lda 	NSStatus,x
.9c8e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9c90		f0 04		beq $9c96			beq 	_IUZero
.9c92		20 40 97	jsr $9740			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9c95		60		rts				rts
.9c96						_IUZero:
.9c96		20 76 a0	jsr $a076			jsr 	NSMSetZero
.9c99		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9c9a						IntUnary:
.9c9a		fa		plx				plx 								; restore stack pos
.9c9b		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; get a float or int
.9c9e		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9ca1		b5 50		lda $50,x			lda 	NSStatus,x
.9ca3		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ca5		f0 03		beq $9caa			beq 	_IUExit
.9ca7		20 98 97	jsr $9798			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9caa						_IUExit:
.9caa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9cab						LenUnary:
.9cab		fa		plx				plx 								; restore stack pos
.9cac		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; get a string
.9caf		5a		phy				phy
.9cb0		a0 00		ldy #$00			ldy 	#0 							; find length
.9cb2						_LenFind:
.9cb2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9cb4		f0 06		beq $9cbc			beq 	_LenExit
.9cb6		c8		iny				iny
.9cb7		d0 f9		bne $9cb2			bne 	_LenFind
.9cb9		4c f9 a1	jmp $a1f9			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9cbc						_LenExit:
.9cbc		98		tya				tya		 							; return length
.9cbd		20 78 a0	jsr $a078			jsr 	NSMSetByte
.9cc0		7a		ply				ply
.9cc1		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9cc4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9cc5						Unary_Min:
.9cc5		a9 01		lda #$01			lda 	#1
.9cc7		80 02		bra $9ccb			bra 	UnaryMinMaxMain
.9cc9						Unary_Max:
.9cc9		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9ccb						UnaryMinMaxMain:
.9ccb		fa		plx				plx 								; get index on number stack
.9ccc		48		pha				pha 								; save comparator
.9ccd		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue 				; get the first value.
.9cd0						_UMMMLoop:
.9cd0		b1 30		lda ($30),y			lda 	(codePtr),y
.9cd2		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9cd4		f0 22		beq $9cf8			beq 	_UMMMDone
.9cd6		20 1a 91	jsr $911a			jsr 	CheckComma 					; must be a comma
.9cd9		e8		inx				inx
.9cda		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue
.9cdd		ca		dex				dex
.9cde		20 59 a0	jsr $a059			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9ce1		e8		inx				inx
.9ce2		20 59 a0	jsr $a059			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9ce5		e8		inx				inx
.9ce6		20 e2 91	jsr $91e2			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9ce9		ca		dex				dex
.9cea		ca		dex				dex
.9ceb		85 36		sta $36				sta 	zTemp0 						; save required result
.9ced		68		pla				pla 								; get and save comparator
.9cee		48		pha				pha
.9cef		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9cf1		d0 dd		bne $9cd0			bne 	_UMMMLoop
.9cf3		20 fb 9c	jsr $9cfb			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9cf6		80 d8		bra $9cd0			bra 	_UMMMLoop
.9cf8						_UMMMDone:
.9cf8		68		pla				pla 								; throw the comparator
.9cf9		c8		iny				iny 								; skip )
.9cfa		60		rts				rts
.9cfb						ExpCopyAboveDown:
.9cfb		b5 51		lda $51,x			lda 	NSStatus+1,x
.9cfd		95 50		sta $50,x			sta 	NSStatus,x
.9cff		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d01		95 78		sta $78,x			sta 	NSExponent,x
.9d03		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d05		95 58		sta $58,x			sta 	NSMantissa0,x
.9d07		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d09		95 60		sta $60,x			sta 	NSMantissa1,x
.9d0b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d0d		95 68		sta $68,x			sta 	NSMantissa2,x
.9d0f		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d11		95 70		sta $70,x			sta 	NSMantissa3,x
.9d13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d14						Unary_Not:
.9d14		fa		plx				plx
.9d15		20 e3 9f	jsr $9fe3			jsr 	EvaluateInteger 			; get integer
.9d18		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9d1b		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; zero mantissa ?
.9d1e		f0 04		beq $9d24			beq 	_NotZero
.9d20		20 76 a0	jsr $a076			jsr 	NSMSetZero
.9d23		60		rts				rts
.9d24						_NotZero:
.9d24		4c 98 91	jmp $9198			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9d27						PeekByteUnary:
.9d27		a9 01		lda #$01			lda 	#1
.9d29		80 0a		bra $9d35			bra 	PeekUnary
.9d2b						PeekWUnary:
.9d2b		a9 02		lda #$02			lda 	#2
.9d2d		80 06		bra $9d35			bra 	PeekUnary
.9d2f						PeekLUnary:
.9d2f		a9 03		lda #$03			lda 	#3
.9d31		80 02		bra $9d35			bra 	PeekUnary
.9d33						PeekDUnary:
.9d33		a9 04		lda #$04			lda 	#4
.9d35						PeekUnary:
.9d35		fa		plx				plx 								; restore position.
.9d36		48		pha				pha 								; save count to copy on stack
.9d37		20 f6 9f	jsr $9ff6			jsr		Evaluate16BitInteger 		; address as constant.
.9d3a		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9d3d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9d3f		85 36		sta $36				sta 	zTemp0
.9d41		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d43		85 37		sta $37				sta 	zTemp0+1
.9d45		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; clear the result to zero.
.9d48		68		pla				pla 								; count in zTemp2
.9d49		85 3a		sta $3a				sta 	zTemp2
.9d4b		da		phx				phx 								; save stack position and offset of read
.9d4c		5a		phy				phy
.9d4d		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9d4f						_PULoop:
.9d4f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9d51		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9d53		c8		iny				iny 								; next byte to write
.9d54		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9d55		18		clc				clc
.9d56		69 08		adc #$08			adc 	#MathStackSize
.9d58		aa		tax				tax
.9d59		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9d5b		d0 f2		bne $9d4f			bne 	_PULoop
.9d5d		7a		ply				ply 								; restore stack/code pos and exit.
.9d5e		fa		plx				plx
.9d5f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d60						Unary_Random:
.9d60		fa		plx				plx
.9d61		20 d2 9d	jsr $9dd2			jsr 	Random32Bit 				; get a random number
.9d64		20 bb 9d	jsr $9dbb			jsr 	URCopyToMantissa  			; put in mantissa
.9d67		b1 30		lda ($30),y			lda 	(codePtr),y
.9d69		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9d6b		f0 08		beq $9d75			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9d6d		e8		inx				inx
.9d6e		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d71		ca		dex				dex
.9d72		20 ea 92	jsr $92ea			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9d75						_URNoModulus:
.9d75		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9d77		74 78		stz $78,x			stz 	NSExponent,x
.9d79		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9d7c		60		rts				rts
.9d7d						Unary_Rnd:
.9d7d		fa		plx				plx
.9d7e		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; number to use.
.9d81		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; closing bracket
.9d84		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d87		f0 26		beq $9daf			beq 	_URCopySeed
.9d89		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d8b		10 1f		bpl $9dac			bpl 	_URDontSeed
.9d8d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d8f		49 17		eor #$17			eor 	#$17
.9d91		8d 08 04	sta $0408			sta 	randomSeed+0
.9d94		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d96		49 a5		eor #$a5			eor 	#$A5
.9d98		8d 09 04	sta $0409			sta 	randomSeed+1
.9d9b		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d9d		49 c2		eor #$c2			eor 	#$C2
.9d9f		8d 0a 04	sta $040a			sta 	randomSeed+2
.9da2		b5 70		lda $70,x			lda 	NSMantissa3,x
.9da4		49 9d		eor #$9d			eor 	#$9D
.9da6		8d 0b 04	sta $040b			sta 	randomSeed+3
.9da9		20 d2 9d	jsr $9dd2			jsr 	Random32Bit
.9dac						_URDontSeed:
.9dac		20 d2 9d	jsr $9dd2			jsr 	Random32Bit 				; generate a number
.9daf						_URCopySeed:
.9daf		20 bb 9d	jsr $9dbb			jsr 	URCopyToMantissa 			; copy into mantissa
.9db2		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9db4		95 78		sta $78,x			sta 	NSExponent,x
.9db6		a9 08		lda #$08			lda 	#NSTFloat
.9db8		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9dba		60		rts				rts
.9dbb						URCopyToMantissa:
.9dbb		ad 08 04	lda $0408			lda 	randomSeed+0
.9dbe		95 58		sta $58,x			sta 	NSMantissa0,x
.9dc0		ad 09 04	lda $0409			lda 	randomSeed+1
.9dc3		95 60		sta $60,x			sta 	NSMantissa1,x
.9dc5		ad 0a 04	lda $040a			lda 	randomSeed+2
.9dc8		95 68		sta $68,x			sta 	NSMantissa2,x
.9dca		ad 0b 04	lda $040b			lda 	randomSeed+3
.9dcd		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9dcf		95 70		sta $70,x			sta 	NSMantissa3,x
.9dd1		60		rts				rts
.9dd2						Random32Bit:
.9dd2		5a		phy				phy
.9dd3		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9dd5		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9dd8		d0 03		bne $9ddd			bne 	_Random1
.9dda		a8		tay				tay 								; if so do it 256 times
.9ddb		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9ddd						_Random1:
.9ddd		0a		asl a				asl 	a 							; LSFR RNG
.9dde		2e 09 04	rol $0409			rol 	randomSeed+1
.9de1		2e 0a 04	rol $040a			rol 	randomSeed+2
.9de4		2e 0b 04	rol $040b			rol 	randomSeed+3
.9de7		90 02		bcc $9deb			bcc 	_Random2
.9de9		49 c5		eor #$c5			eor 	#$C5
.9deb						_Random2:
.9deb		88		dey				dey
.9dec		d0 ef		bne $9ddd			bne 	_Random1
.9dee		8d 08 04	sta $0408			sta 	randomSeed+0
.9df1		7a		ply				ply
.9df2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9df3						SgnUnary:
.9df3		fa		plx				plx 								; restore stack pos
.9df4		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber 				; get a float or int
.9df7		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9dfa		20 98 a0	jsr $a098			jsr 	NSMIsZero 					; if zero
.9dfd		f0 0e		beq $9e0d			beq 	_SGZero  					; return Int Zero
.9dff		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9e01		48		pha				pha
.9e02		a9 01		lda #$01			lda 	#1 							; set to 1
.9e04		20 78 a0	jsr $a078			jsr 	NSMSetByte
.9e07		68		pla				pla
.9e08		29 80		and #$80			and		#$80 						; copy the sign byte out
.9e0a		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9e0c		60		rts				rts
.9e0d		20 76 a0	jsr $a076	_SGZero:jsr 	NSMSetZero
.9e10		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9e11						ValUnary:
.9e11		fa		plx				plx 								; restore stack pos
.9e12		20 27 9e	jsr $9e27			jsr 	ValMainCode 				; do the main val() code
.9e15		b0 01		bcs $9e18			bcs 	_VUError 					; couldn't convert
.9e17		60		rts				rts
.9e18						_VUError:
.9e18		4c fe a1	jmp $a1fe			jmp 	TypeError
.9e1b						IsValUnary:
.9e1b		fa		plx				plx 								; restore stack pos
.9e1c		20 27 9e	jsr $9e27			jsr 	ValMainCode 				; do the main val() code
.9e1f		b0 03		bcs $9e24			bcs 	_VUBad
.9e21		4c 98 91	jmp $9198			jmp 	ReturnTrue
.9e24						_VUBad:
.9e24		4c a3 91	jmp $91a3			jmp 	ReturnFalse
.9e27						ValMainCode:
.9e27		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; get a string
.9e2a		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; check right bracket present
.9e2d						ValEvaluateZTemp0:
.9e2d		5a		phy				phy
.9e2e		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9e30		f0 17		beq $9e49			beq 	_VMCFail2
.9e32		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9e34		48		pha				pha 								; save first character
.9e35		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9e37		d0 01		bne $9e3a			bne 	_VMCStart
.9e39		c8		iny				iny 								; skip over -
.9e3a						_VMCStart:
.9e3a		38		sec				sec 								; initialise first time round.
.9e3b						_VMCNext:
.9e3b		c8		iny				iny 								; pre-increment
.9e3c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9e3e		f0 0c		beq $9e4c			beq 	_VMCSuccess 				; successful.
.9e40		20 75 99	jsr $9975			jsr 	EncodeNumber 				; send it to the number-builder
.9e43		90 03		bcc $9e48			bcc 	_VMCFail 					; if failed, give up.
.9e45		18		clc				clc 								; next time round, countinue
.9e46		80 f3		bra $9e3b			bra 	_VMCNext
.9e48						_VMCFail:
.9e48		68		pla				pla
.9e49						_VMCFail2:
.9e49		7a		ply				ply
.9e4a		38		sec				sec
.9e4b		60		rts				rts
.9e4c						_VMCSuccess:
.9e4c		a9 00		lda #$00			lda 	#0 							; construct final
.9e4e		20 75 99	jsr $9975			jsr 	EncodeNumber 				; by sending a duff value.
.9e51		68		pla				pla 								; if it was -ve
.9e52		c9 2d		cmp #$2d			cmp 	#"-"
.9e54		d0 03		bne $9e59			bne 	_VMCNotNegative
.9e56		20 38 a0	jsr $a038			jsr		NSMNegate 					; negate it.
.9e59						_VMCNotNegative:
.9e59		7a		ply				ply
.9e5a		18		clc				clc
.9e5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9e5c						ChrUnary:
.9e5c		fa		plx				plx 								; restore stack pos
.9e5d		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9e60		48		pha				pha
.9e61		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9e64		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e66		20 5f b2	jsr $b25f			jsr 	StringTempAllocate
.9e69		68		pla				pla 								; write number to it
.9e6a		20 98 b2	jsr $b298			jsr 	StringTempWrite
.9e6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e6e						SpcUnary:
.9e6e		fa		plx				plx 								; restore stack pos
.9e6f		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger			; get value
.9e72		5a		phy				phy
.9e73		48		pha				pha 								; save count
.9e74		20 5f b2	jsr $b25f			jsr 	StringTempAllocate
.9e77		7a		ply				ply 								; to do count in Y
.9e78						_SpcLoop:
.9e78		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9e7a		f0 08		beq $9e84			beq 	_SpcExit
.9e7c		a9 20		lda #$20			lda 	#32
.9e7e		20 98 b2	jsr $b298			jsr 	StringTempWrite
.9e81		88		dey				dey
.9e82		80 f4		bra $9e78			bra 	_SpcLoop
.9e84						_SpcExit:
.9e84		7a		ply				ply
.9e85		20 12 91	jsr $9112			jsr 	CheckRightBracket
.9e88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e89						Unary_Str:
.9e89		fa		plx				plx
.9e8a		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber  			; get number
.9e8d		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; closing bracket
.9e90		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e92		20 ab 9e	jsr $9eab			jsr 	ConvertNumberToString 		; do the conversion.
.9e95		a9 21		lda #$21			lda		#33 						; create buffer
.9e97		20 5f b2	jsr $b25f			jsr 	StringTempAllocate 			; allocate memory
.9e9a		da		phx				phx  								; copy the converted string into the buffer.
.9e9b		a2 00		ldx #$00			ldx 	#0
.9e9d						_USCopy:
.9e9d		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9ea0		20 98 b2	jsr $b298			jsr 	StringTempWrite
.9ea3		e8		inx				inx
.9ea4		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9ea7		d0 f4		bne $9e9d			bne 	_USCopy
.9ea9		fa		plx				plx
.9eaa		60		rts				rts
.9eab						ConvertNumberToString:
.9eab		5a		phy				phy 								; save code position
.9eac		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9eaf		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9eb2		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9eb4		10 09		bpl $9ebf			bpl 	_CNTSNotNegative
.9eb6		29 7f		and #$7f			and 	#$7F 						; make +ve
.9eb8		95 50		sta $50,x			sta 	NSStatus,x
.9eba		a9 2d		lda #$2d			lda 	#"-"
.9ebc		20 20 9f	jsr $9f20			jsr 	WriteDecimalBuffer
.9ebf						_CNTSNotNegative:
.9ebf		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9ec1		f0 12		beq $9ed5			beq 	_CNTSNotFloat
.9ec3		e8		inx				inx 								; round up so we don't get too many 6.999999
.9ec4		a9 01		lda #$01			lda 	#1
.9ec6		20 78 a0	jsr $a078			jsr 	NSMSetByte
.9ec9		ca		dex				dex
.9eca		b5 78		lda $78,x			lda		NSExponent,x
.9ecc		95 79		sta $79,x			sta 	NSExponent+1,x
.9ece		a9 08		lda #$08			lda 	#NSTFloat
.9ed0		95 51		sta $51,x			sta 	NSStatus+1,x
.9ed2		20 7a 96	jsr $967a			jsr 	FloatAdd
.9ed5						_CNTSNotFloat:
.9ed5		20 02 9f	jsr $9f02			jsr 	MakePlusTwoString 			; do the integer part.
.9ed8		20 40 97	jsr $9740			jsr 	FloatFractionalPart 		; get the fractional part
.9edb		20 f1 97	jsr $97f1			jsr 	NSNormalise					; normalise , exit if zero
.9ede		f0 20		beq $9f00			beq 	_CNTSExit
.9ee0		a9 2e		lda #$2e			lda 	#"."
.9ee2		20 20 9f	jsr $9f20			jsr 	WriteDecimalBuffer 			; write decimal place
.9ee5						_CNTSDecimal:
.9ee5		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9ee8		30 16		bmi $9f00			bmi 	_CNTSExit
.9eea		e8		inx				inx 								; x 10.0
.9eeb		a9 0a		lda #$0a			lda 	#10
.9eed		20 78 a0	jsr $a078			jsr 	NSMSetByte
.9ef0		a9 08		lda #$08			lda 	#NSTFloat
.9ef2		95 50		sta $50,x			sta 	NSStatus,x
.9ef4		ca		dex				dex
.9ef5		20 bf 97	jsr $97bf			jsr 	FloatMultiply
.9ef8		20 02 9f	jsr $9f02			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9efb		20 40 97	jsr $9740			jsr 	FloatFractionalPart 		; get the fractional part
.9efe		80 e5		bra $9ee5			bra 	_CNTSDecimal 				; keep going.
.9f00						_CNTSExit:
.9f00		7a		ply				ply
.9f01		60		rts				rts
.9f02						MakePlusTwoString:
.9f02		da		phx				phx
.9f03		20 59 a0	jsr $a059			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f06		e8		inx				inx 								; access it
.9f07		e8		inx				inx
.9f08		20 98 97	jsr $9798			jsr 	FloatIntegerPart 			; make it an integer
.9f0b		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f0d		20 aa 95	jsr $95aa			jsr 	ConvertInt32
.9f10		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9f12						_MPTSCopy:
.9f12		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f15		20 20 9f	jsr $9f20			jsr 	WriteDecimalBuffer
.9f18		e8		inx				inx
.9f19		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f1c		d0 f4		bne $9f12			bne 	_MPTSCopy
.9f1e		fa		plx				plx
.9f1f		60		rts				rts
.9f20						WriteDecimalBuffer:
.9f20		da		phx				phx
.9f21		ae 15 04	ldx $0415			ldx 	dbOffset
.9f24		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9f27		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9f2a		ee 15 04	inc $0415			inc 	dbOffset
.9f2d		fa		plx				plx
.9f2e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9f2f						Unary_Left:
.9f2f		fa		plx				plx
.9f30		18		clc				clc 								; only one parameter
.9f31		20 94 9f	jsr $9f94			jsr 	SubstringInitial 			; set up.
.9f34		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9f36		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f38		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9f3a		80 25		bra $9f61			bra 	SubstringMain
.9f3c						Unary_Right:
.9f3c		fa		plx				plx
.9f3d		18		clc				clc 								; only one parameter
.9f3e		20 94 9f	jsr $9f94			jsr 	SubstringInitial 			; set up.
.9f41		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9f43		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f45		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9f47		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9f49		b0 02		bcs $9f4d			bcs 	_URNotUnderflow
.9f4b		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9f4d						_URNotUnderflow:
.9f4d		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f4f		80 10		bra $9f61			bra 	SubstringMain
.9f51						Unary_Mid:
.9f51		fa		plx				plx
.9f52		38		sec				sec 								; two parameters
.9f53		20 94 9f	jsr $9f94			jsr 	SubstringInitial 			; set up.
.9f56		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f58		f0 04		beq $9f5e			beq 	_UMError
.9f5a		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f5c		80 03		bra $9f61			bra 	SubstringMain
.9f5e						_UMError:
.9f5e		4c 03 a2	jmp $a203			jmp 	ArgumentError
.9f61						SubstringMain:
.9f61		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f63		d5 78		cmp $78,x			cmp 	NSExponent,x
.9f65		b0 27		bcs $9f8e			bcs 	_SSMNull 					; if so, return an empty string.
.9f67		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f69		f0 23		beq $9f8e			beq 	_SSMNull 					; return empty string.
.9f6b		18		clc				clc 								; add the offset +1 to the address and
.9f6c		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9f6e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f70		85 36		sta $36				sta 	zTemp0
.9f72		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9f74		69 00		adc #$00			adc 	#0
.9f76		85 37		sta $37				sta 	zTemp0+1
.9f78						_SSMNoCarry:
.9f78		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f7a		20 5f b2	jsr $b25f			jsr 	StringTempAllocate 			; allocate that many characters
.9f7d		5a		phy				phy 								; save Y
.9f7e		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f80						_SSMCopy:
.9f80		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f82		f0 08		beq $9f8c			beq 	_SSMEString 				; no more to copy
.9f84		20 98 b2	jsr $b298			jsr 	StringTempWrite 			; and write it out.
.9f87		c8		iny				iny
.9f88		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9f8a		d0 f4		bne $9f80			bne 	_SSMCopy
.9f8c						_SSMEString:
.9f8c		7a		ply				ply
.9f8d						_SSMExit:
.9f8d		60		rts				rts
.9f8e						_SSMNull:
.9f8e		a9 00		lda #$00			lda 	#0
.9f90		20 5f b2	jsr $b25f			jsr 	StringTempAllocate
.9f93		60		rts				rts
.9f94						SubstringInitial:
.9f94		da		phx				phx 								; save initial stack position
.9f95		08		php				php 								; save carry on stack indicating 2 parameters
.9f96		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; get a string
.9f99		5a		phy				phy 								; calculate length to exponent.
.9f9a		a0 ff		ldy #$ff			ldy 	#$FF
.9f9c						_SIFindLength:
.9f9c		c8		iny				iny
.9f9d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f9f		d0 fb		bne $9f9c			bne 	_SIFindLength
.9fa1		98		tya				tya
.9fa2		95 78		sta $78,x			sta 	NSExponent,x
.9fa4		7a		ply				ply
.9fa5		e8		inx				inx
.9fa6		20 1a 91	jsr $911a			jsr 	CheckComma 					; comma next
.9fa9		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get next parameter
.9fac		28		plp				plp 								; is it the last parameter ?
.9fad		90 07		bcc $9fb6			bcc 	_SSIExit 					; if so, exit.
.9faf		e8		inx				inx
.9fb0		20 1a 91	jsr $911a			jsr 	CheckComma 					; comma next
.9fb3		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get last parameter
.9fb6						_SSIExit:
.9fb6		fa		plx				plx
.9fb7		20 12 91	jsr $9112			jsr 	CheckRightBracket 			; check closing bracket
.9fba		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9fbb						EvaluateValue:
.9fbb		48		pha				pha
.9fbc		20 2f 96	jsr $962f			jsr		EvaluateExpression 			; expression
.9fbf		20 f2 98	jsr $98f2			jsr 	Dereference					; derefernce it
.9fc2		68		pla				pla
.9fc3		60		rts				rts
.9fc4						EvaluateNumber:
.9fc4		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue 				; get a value
.9fc7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fc9		29 10		and #$10			and 	#NSBIsString
.9fcb		d0 13		bne $9fe0			bne 	HelperTypeError
.9fcd		60		rts				rts
.9fce						EvaluateString:
.9fce		20 bb 9f	jsr $9fbb			jsr 	EvaluateValue 				; get a value
.9fd1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fd3		29 10		and #$10			and 	#NSBIsString
.9fd5		f0 09		beq $9fe0			beq 	HelperTypeError
.9fd7						CopyAddressToTemp0:
.9fd7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9fd9		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9fdb		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fdd		85 37		sta $37				sta 	zTemp0+1
.9fdf		60		rts				rts
.9fe0						HelperTypeError:
.9fe0		4c fe a1	jmp $a1fe			jmp 	TypeError
.9fe3						EvaluateInteger:
.9fe3		20 c4 9f	jsr $9fc4			jsr 	EvaluateNumber
.9fe6		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9fe8		d0 09		bne $9ff3			bne 	HelperValueError 			; if not, it's a float.
.9fea		60		rts				rts
.9feb						EvaluateUnsignedInteger:
.9feb		20 e3 9f	jsr $9fe3			jsr 	EvaluateInteger 			; check integer is +ve
.9fee		b5 50		lda $50,x			lda 	NSStatus,x
.9ff0		30 01		bmi $9ff3			bmi 	HelperValueError
.9ff2		60		rts				rts
.9ff3						HelperValueError:
.9ff3		4c 03 a2	jmp $a203			jmp 	ArgumentError
.9ff6						Evaluate16BitInteger:
.9ff6		20 eb 9f	jsr $9feb			jsr	 	EvaluateUnsignedInteger		; get integer
.9ff9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ffb		15 68		ora $68,x			ora 	NSMantissa2,x
.9ffd		d0 f4		bne $9ff3			bne 	HelperValueError
.9fff		60		rts				rts
.a000						Evaluate16BitIntegerSigned:
.a000		20 e3 9f	jsr $9fe3			jsr	 	EvaluateInteger				; get integer
.a003		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a005		15 68		ora $68,x			ora 	NSMantissa2,x
.a007		d0 ea		bne $9ff3			bne 	HelperValueError
.a009		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a00b		10 03		bpl $a010			bpl 	_EISNotSigned
.a00d		20 3f a0	jsr $a03f			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a010						_EISNotSigned:
.a010		60		rts				rts
.a011						Evaluate8BitInteger:
.a011		20 eb 9f	jsr $9feb			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a014		d0 dd		bne $9ff3			bne 	HelperValueError
.a016		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a018		15 68		ora $68,x			ora 	NSMantissa2,x
.a01a		15 60		ora $60,x			ora 	NSMantissa1,x
.a01c		d0 d5		bne $9ff3			bne 	HelperValueError
.a01e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a020		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a021						Multiply8x8:
.a021		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a022		85 36		sta $36			  	sta 	zTemp0
.a024		86 37		stx $37				stx 	zTemp0+1
.a026		a9 00		lda #$00			lda 	#0
.a028		a2 08		ldx #$08			ldx 	#8
.a02a						_M88Loop:
.a02a		90 03		bcc $a02f			bcc 	_M88NoAdd
.a02c		18		clc				clc
.a02d		65 37		adc $37				adc 	zTemp0+1
.a02f						_M88NoAdd:
.a02f		6a		ror a				ror 	a
.a030		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a032		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a033		d0 f5		bne $a02a			bne 	_M88Loop
.a035		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a037		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a038						NSMNegate:
.a038		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a03a		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a03c		95 50		sta $50,x			sta 	NSStatus,x
.a03e		60		rts				rts
.a03f						NSMNegateMantissa:
.a03f		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a040		a9 00		lda #$00			lda 	#0
.a042		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a044		95 58		sta $58,x			sta 	NSMantissa0,x
.a046		a9 00		lda #$00			lda 	#0
.a048		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a04a		95 60		sta $60,x			sta 	NSMantissa1,x
.a04c		a9 00		lda #$00			lda 	#0
.a04e		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a050		95 68		sta $68,x			sta 	NSMantissa2,x
.a052		a9 00		lda #$00			lda 	#0
.a054		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a056		95 70		sta $70,x			sta 	NSMantissa3,x
.a058		60		rts				rts
.a059						NSMShiftUpTwo:
.a059		b5 58		lda $58,x			lda 	NSMantissa0,x
.a05b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a05d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a05f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a061		b5 68		lda $68,x			lda 	NSMantissa2,x
.a063		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a065		b5 70		lda $70,x			lda 	NSMantissa3,x
.a067		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a069		b5 78		lda $78,x			lda 	NSExponent,x
.a06b		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a06d		b5 50		lda $50,x			lda 	NSStatus,x
.a06f		95 52		sta $52,x			sta 	NSStatus+2,x
.a071		60		rts				rts
.a072						NSMSetZeroMantissaOnly:
.a072		a9 00		lda #$00			lda 	#0
.a074		80 06		bra $a07c			bra 	NSMSetMantissa
.a076						NSMSetZero:
.a076		a9 00		lda #$00			lda 	#0
.a078						NSMSetByte:
.a078		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a07a		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a07c						NSMSetMantissa:
.a07c		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a07e		74 60		stz $60,x			stz 	NSMantissa1,x
.a080		74 68		stz $68,x			stz 	NSMantissa2,x
.a082		74 70		stz $70,x			stz 	NSMantissa3,x
.a084		60		rts				rts
.a085						NSMShiftLeft:
.a085		18		clc				clc
.a086						NSMRotateLeft:
.a086		36 58		rol $58,x			rol 	NSMantissa0,x
.a088		36 60		rol $60,x			rol		NSMantissa1,x
.a08a		36 68		rol $68,x			rol		NSMantissa2,x
.a08c		36 70		rol $70,x			rol		NSMantissa3,x
.a08e		60		rts				rts
.a08f						NSMShiftRight:
.a08f		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a091		76 68		ror $68,x			ror		NSMantissa2,x
.a093		76 60		ror $60,x			ror		NSMantissa1,x
.a095		76 58		ror $58,x			ror		NSMantissa0,x
.a097		60		rts				rts
.a098						NSMIsZero:
.a098		b5 70		lda $70,x			lda 	NSMantissa3,x
.a09a		15 68		ora $68,x			ora		NSMantissa2,x
.a09c		15 60		ora $60,x			ora		NSMantissa1,x
.a09e		15 58		ora $58,x			ora		NSMantissa0,x
.a0a0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a0a1						TickHandler:
.a0a1		5a		phy				phy 								; need to preserve Y
.a0a2		20 8f 80	jsr $808f			jsr 	SNDUpdate 					; update sound
.a0a5		7a		ply				ply
.a0a6		60		rts				rts
.065f						LastTick:
>065f								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a0a7						Assemble_ora:
.a0a7		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0aa		01					.byte $01
.a0ab						Assemble_and:
.a0ab		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0ae		21					.byte $21
.a0af						Assemble_eor:
.a0af		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0b2		41					.byte $41
.a0b3						Assemble_adc:
.a0b3		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0b6		61					.byte $61
.a0b7						Assemble_sta:
.a0b7		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0ba		81					.byte $81
.a0bb						Assemble_lda:
.a0bb		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0be		a1					.byte $a1
.a0bf						Assemble_cmp:
.a0bf		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0c2		c1					.byte $c1
.a0c3						Assemble_sbc:
.a0c3		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0c6		e1					.byte $e1
.a0c7						Assemble_asl:
.a0c7		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0ca		02					.byte $02
>a0cb		75					.byte $75
.a0cc						Assemble_rol:
.a0cc		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0cf		22					.byte $22
>a0d0		75					.byte $75
.a0d1						Assemble_lsr:
.a0d1		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0d4		42					.byte $42
>a0d5		75					.byte $75
.a0d6						Assemble_ror:
.a0d6		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0d9		62					.byte $62
>a0da		75					.byte $75
.a0db						Assemble_stx:
.a0db		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0de		82					.byte $82
>a0df		50					.byte $50
.a0e0						Assemble_ldx:
.a0e0		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0e3		a2					.byte $a2
>a0e4		d0					.byte $d0
.a0e5						Assemble_dec:
.a0e5		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0e8		c2					.byte $c2
>a0e9		55					.byte $55
.a0ea						Assemble_inc:
.a0ea		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0ed		e2					.byte $e2
>a0ee		55					.byte $55
.a0ef						Assemble_stz:
.a0ef		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0f2		60					.byte $60
>a0f3		44					.byte $44
.a0f4						Assemble_bit:
.a0f4		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0f7		20					.byte $20
>a0f8		55					.byte $55
.a0f9						Assemble_sty:
.a0f9		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0fc		80					.byte $80
>a0fd		54					.byte $54
.a0fe						Assemble_ldy:
.a0fe		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a101		a0					.byte $a0
>a102		d5					.byte $d5
.a103						Assemble_cpy:
.a103		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a106		c0					.byte $c0
>a107		d4					.byte $d4
.a108						Assemble_cpx:
.a108		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a10b		e0					.byte $e0
>a10c		d0					.byte $d0
.a10d						Assemble_tsb:
.a10d		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a110		00					.byte $00
>a111		50					.byte $50
.a112						Assemble_trb:
.a112		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a115		10					.byte $10
>a116		50					.byte $50
.a117						Assemble_jsr:
.a117		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a11a		14					.byte $14
>a11b		10					.byte $10
.a11c						Assemble_jmp:
.a11c		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a11f		40					.byte $40
>a120		10					.byte $10
.a121						Assemble_bpl:
.a121		20 50 81	jsr $8150		jsr	AssembleGroup3
>a124		10					.byte $10
.a125						Assemble_bmi:
.a125		20 50 81	jsr $8150		jsr	AssembleGroup3
>a128		30					.byte $30
.a129						Assemble_bvc:
.a129		20 50 81	jsr $8150		jsr	AssembleGroup3
>a12c		50					.byte $50
.a12d						Assemble_bvs:
.a12d		20 50 81	jsr $8150		jsr	AssembleGroup3
>a130		70					.byte $70
.a131						Assemble_bcc:
.a131		20 50 81	jsr $8150		jsr	AssembleGroup3
>a134		90					.byte $90
.a135						Assemble_bcs:
.a135		20 50 81	jsr $8150		jsr	AssembleGroup3
>a138		b0					.byte $b0
.a139						Assemble_bne:
.a139		20 50 81	jsr $8150		jsr	AssembleGroup3
>a13c		d0					.byte $d0
.a13d						Assemble_beq:
.a13d		20 50 81	jsr $8150		jsr	AssembleGroup3
>a140		f0					.byte $f0
.a141						Assemble_bra:
.a141		20 50 81	jsr $8150		jsr	AssembleGroup3
>a144		80					.byte $80
.a145						Assemble_brk:
.a145		20 84 81	jsr $8184		jsr	AssembleGroup4
>a148		00					.byte $00
.a149						Assemble_php:
.a149		20 84 81	jsr $8184		jsr	AssembleGroup4
>a14c		08					.byte $08
.a14d						Assemble_clc:
.a14d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a150		18					.byte $18
.a151						Assemble_plp:
.a151		20 84 81	jsr $8184		jsr	AssembleGroup4
>a154		28					.byte $28
.a155						Assemble_sec:
.a155		20 84 81	jsr $8184		jsr	AssembleGroup4
>a158		38					.byte $38
.a159						Assemble_rti:
.a159		20 84 81	jsr $8184		jsr	AssembleGroup4
>a15c		40					.byte $40
.a15d						Assemble_pha:
.a15d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a160		48					.byte $48
.a161						Assemble_cli:
.a161		20 84 81	jsr $8184		jsr	AssembleGroup4
>a164		58					.byte $58
.a165						Assemble_phy:
.a165		20 84 81	jsr $8184		jsr	AssembleGroup4
>a168		5a					.byte $5a
.a169						Assemble_rts:
.a169		20 84 81	jsr $8184		jsr	AssembleGroup4
>a16c		60					.byte $60
.a16d						Assemble_pla:
.a16d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a170		68					.byte $68
.a171						Assemble_sei:
.a171		20 84 81	jsr $8184		jsr	AssembleGroup4
>a174		78					.byte $78
.a175						Assemble_ply:
.a175		20 84 81	jsr $8184		jsr	AssembleGroup4
>a178		7a					.byte $7a
.a179						Assemble_dey:
.a179		20 84 81	jsr $8184		jsr	AssembleGroup4
>a17c		88					.byte $88
.a17d						Assemble_txa:
.a17d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a180		8a					.byte $8a
.a181						Assemble_tya:
.a181		20 84 81	jsr $8184		jsr	AssembleGroup4
>a184		98					.byte $98
.a185						Assemble_txs:
.a185		20 84 81	jsr $8184		jsr	AssembleGroup4
>a188		9a					.byte $9a
.a189						Assemble_tay:
.a189		20 84 81	jsr $8184		jsr	AssembleGroup4
>a18c		a8					.byte $a8
.a18d						Assemble_tax:
.a18d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a190		aa					.byte $aa
.a191						Assemble_clv:
.a191		20 84 81	jsr $8184		jsr	AssembleGroup4
>a194		b8					.byte $b8
.a195						Assemble_tsx:
.a195		20 84 81	jsr $8184		jsr	AssembleGroup4
>a198		ba					.byte $ba
.a199						Assemble_iny:
.a199		20 84 81	jsr $8184		jsr	AssembleGroup4
>a19c		c8					.byte $c8
.a19d						Assemble_dex:
.a19d		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a0		ca					.byte $ca
.a1a1						Assemble_cld:
.a1a1		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a4		d8					.byte $d8
.a1a5						Assemble_phx:
.a1a5		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a8		da					.byte $da
.a1a9						Assemble_stp:
.a1a9		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1ac		db					.byte $db
.a1ad						Assemble_inx:
.a1ad		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b0		e8					.byte $e8
.a1b1						Assemble_nop:
.a1b1		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b4		ea					.byte $ea
.a1b5						Assemble_sed:
.a1b5		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b8		f8					.byte $f8
.a1b9						Assemble_plx:
.a1b9		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1bc		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a1bd						DecimalScalarTable:
>a1bd		66 66 66 66				.dword $66666666 ; 0.1
>a1c1		de					.byte $de
>a1c2		1f 85 eb 51				.dword $51eb851f ; 0.01
>a1c6		db					.byte $db
>a1c7		4c 37 89 41				.dword $4189374c ; 0.001
>a1cb		d8					.byte $d8
>a1cc		ac 8b db 68				.dword $68db8bac ; 0.0001
>a1d0		d4					.byte $d4
>a1d1		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a1d5		d1					.byte $d1
>a1d6		83 de 1b 43				.dword $431bde83 ; 1e-06
>a1da		ce					.byte $ce
>a1db		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a1df		ca					.byte $ca
>a1e0		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a1e4		c7					.byte $c7
>a1e5		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a1e9		c4					.byte $c4
>a1ea		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a1ee		c0					.byte $c0
>a1ef		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a1f3		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a1f4						SyntaxError:
.a1f4		a9 02		lda #$02		lda	#2
.a1f6		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a1f9						RangeError:
.a1f9		a9 04		lda #$04		lda	#4
.a1fb		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a1fe						TypeError:
.a1fe		a9 05		lda #$05		lda	#5
.a200		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a203						ArgumentError:
.a203		a9 07		lda #$07		lda	#7
.a205		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a208						NotDoneError:
.a208		a9 0c		lda #$0c		lda	#12
.a20a		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a20d						ErrorText:
>a20d		42 72 65 61 6b 00			.text	"Break",0
>a213		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a21b		72 72 6f 72 00
>a220		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a228		20 62 79 20 7a 65 72 6f 00
>a231		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a239		61 6e 67 65 00
>a23e		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a246		6d 61 74 63 68 00
>a24c		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a254		65 6d 6f 72 79 00
>a25a		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a262		61 72 67 75 6d 65 6e 74 00
>a26b		53 74 6f 70 00				.text	"Stop",0
>a270		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a278		6f 6f 20 6c 6f 6e 67 00
>a280		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a288		6e 20 66 61 69 6c 65 64 00
>a291		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a299		61 74 61 00
>a29d		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a2a5		65 6e 74 65 64 00
>a2ab		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a2b3		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a2bf		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a2c7		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a2d4		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a2dc		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a2e9		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a2f1		68 6f 75 74 20 57 68 69 6c 65 00
>a2fc		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a304		68 6f 75 74 20 46 6f 72 00
>a30d		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a315		61 63 6b 20 66 75 6c 6c 00
>a31e		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a326		75 63 74 75 72 65 00
>a32d		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a335		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a342		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a34a		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a358		41 72 72 61 79 20 73 69			.text	"Array size",0
>a360		7a 65 00
>a363		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a36b		79 20 69 6e 64 65 78 00
>a373		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a37b		74 20 64 65 63 6c 61 72 65 64 00
>a386		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a38e		20 66 6f 75 6e 64 00
>a395		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a39d		65 72 72 6f 72 00
>a3a3		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a3ab		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a3b1		41 6c 70 68 61 20 32 33			.text "Alpha 23 built 01-Jan-23. "
>a3b9		20 62 75 69 6c 74 20 30 31 2d 4a 61 6e 2d 32 33
>a3c9		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a3cb						RectangleCommand:
.a3cb		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a3cd		80 02		bra $a3d1			bra 	ShapeDrawCmd
.a3cf						CircleCommand:
.a3cf		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a3d1						ShapeDrawCmd:
.a3d1		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a3d4						ShapeDraw:
.a3d4		0d 61 06	ora $0661			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a3d7		4c 4f a4	jmp $a44f			jmp 	ExecuteGraphicCommand	 	; and complete
.a3da						SpriteCommand:
.a3da		a2 00		ldx #$00			ldx 	#0
.a3dc		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get image number.
.a3df		5a		phy				phy
.a3e0		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a3e2		a6 58		ldx $58				ldx 	NSMantissa0
.a3e4		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a3e6		b0 0d		bcs $a3f5			bcs 	_SCRange
.a3e8		a0 ff		ldy #$ff			ldy 	#255
.a3ea		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3ed		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a3ef		7a		ply				ply
.a3f0		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a3f3		80 5a		bra $a44f			bra 	ExecuteGraphicCommand
.a3f5						_SCRange:
.a3f5		4c f9 a1	jmp $a1f9			jmp 	RangeError
.a3f8						ImageCommand:
.a3f8		a2 00		ldx #$00			ldx 	#0
.a3fa		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get image number.
.a3fd		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a400						ImageRunDraw:
.a400		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a402		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a405		ad 67 06	lda $0667			lda 	gxDrawScale
.a408		0a		asl a				asl 	a
.a409		0a		asl a				asl 	a
.a40a		0a		asl a				asl 	a
.a40b		a8		tay				tay
.a40c		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a40e		a6 58		ldx $58				ldx 	NSMantissa0
.a410		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a413		60		rts				rts
.a414						TextCommand:
.a414		a2 00		ldx #$00			ldx 	#0
.a416		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; get text
.a419		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a41c						TextRunDraw:
.a41c		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a41e		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a421		a0 00		ldy #$00			ldy 	#0
.a423						_IRDLoop:
.a423		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a425		85 37		sta $37				sta 	zTemp0+1
.a427		a5 58		lda $58				lda 	NSMantissa0
.a429		85 36		sta $36				sta 	zTemp0
.a42b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a42d		f0 13		beq $a442			beq 	_IRDExit
.a42f		5a		phy				phy									; save string pos
.a430		48		pha				pha 								; save char
.a431		ad 67 06	lda $0667			lda 	gxDrawScale 				; get scale
.a434		0a		asl a				asl 	a
.a435		0a		asl a				asl 	a
.a436		0a		asl a				asl 	a
.a437		a8		tay				tay
.a438		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a43a		fa		plx				plx 								; char to draw
.a43b		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a43e		7a		ply				ply 								; restore string pos
.a43f		c8		iny				iny
.a440		90 e1		bcc $a423			bcc 	_IRDLoop 					; go back if no error.
.a442						_IRDExit:
.a442		60		rts				rts
.a443						PlotCommand:
.a443		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a445		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a448		80 05		bra $a44f			bra 	ExecuteGraphicCommand
.a44a						LineCommand:
.a44a		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a44c		20 5b a4	jsr $a45b			jsr 	RunGraphicsCommand
.a44f						ExecuteGraphicCommand:
.a44f		0d 60 06	ora $0660			ora 	gxCommandID 				; make a full command
.a452		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; draw it and exit
.a455		b0 01		bcs $a458			bcs 	_EGCError
.a457		60		rts				rts
.a458						_EGCError:
.a458		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.a45b						RunGraphicsCommand:
.a45b		8d 60 06	sta $0660			sta 	gxCommandID					; save TODO graphics command.
.a45e		68		pla				pla 								; pop handler address
.a45f		fa		plx				plx
.a460		1a		inc a				inc 	a
.a461		d0 01		bne $a464			bne 	_RGINoCarry
.a463		e8		inx				inx
.a464						_RGINoCarry:
.a464		8d 65 06	sta $0665			sta 	gxHandler
.a467		8e 66 06	stx $0666			stx 	gxHandler+1
.a46a						_RGICommandLoop:
.a46a		b1 30		lda ($30),y			lda 	(codePtr),y
.a46c		c8		iny				iny
.a46d		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a46f		f0 53		beq $a4c4			beq 	_RGI_To
.a471		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a473		f0 55		beq $a4ca			beq 	_RGI_Here
.a475		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a477		f0 3d		beq $a4b6			beq 	_RGI_Exit
.a479		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a47b		f0 39		beq $a4b6			beq 	_RGI_Exit
.a47d		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a47f		f0 3e		beq $a4bf			beq 	_RGI_Frame
.a481		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a483		f0 33		beq $a4b8			beq 	_RGI_Solid
.a485		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a487		f0 4b		beq $a4d4			beq 	_RGI_By
.a489		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a48b		f0 17		beq $a4a4			beq 	_RGI_Move2
.a48d		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a48f		f0 62		beq $a4f3			beq 	_RGI_Dim
.a491		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a493		f0 74		beq $a509			beq 	_RGI_Colour
.a495		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a497		f0 70		beq $a509			beq 	_RGI_Colour
.a499		ae 60 06	ldx $0660			ldx 	gxCommandID
.a49c		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a49e		d0 03		bne $a4a3			bne 	_RGI_Move 					; move
.a4a0		4c 31 a5	jmp $a531			jmp		_RGI_SpriteInstructions
.a4a3						_RGI_Move:
.a4a3		88		dey				dey 								; unpick get.
.a4a4						_RGI_Move2:
.a4a4		20 57 a5	jsr $a557			jsr 	GCGetCoordinatePair 		; move to here
.a4a7		20 7e a5	jsr $a57e			jsr 	GCCopyPairToStore 			; save
.a4aa		5a		phy				phy
.a4ab		20 74 a5	jsr $a574			jsr 	GCLoadAXY 					; load in
.a4ae		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4b0		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a4b3		7a		ply				ply
.a4b4		80 b4		bra $a46a			bra 	_RGICommandLoop 			; and go round
.a4b6						_RGI_Exit:
.a4b6		88		dey				dey 								; unpick : / EOL
.a4b7		60		rts				rts
.a4b8						_RGI_Solid:
.a4b8		a9 02		lda #$02			lda 	#2
.a4ba		8d 61 06	sta $0661			sta 	gxFillSolid
.a4bd		80 ab		bra $a46a			bra 	_RGICommandLoop
.a4bf						_RGI_Frame:
.a4bf		9c 61 06	stz $0661			stz 	gxFillSolid
.a4c2		80 a6		bra $a46a			bra 	_RGICommandLoop
.a4c4						_RGI_To:
.a4c4		20 57 a5	jsr $a557			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a4c7		20 7e a5	jsr $a57e			jsr 	GCCopyPairToStore
.a4ca						_RGI_Here:
.a4ca		5a		phy				phy
.a4cb		20 74 a5	jsr $a574			jsr 	GCLoadAXY 					; load it into AXY
.a4ce		20 2e a5	jsr $a52e			jsr 	_RGICallHandler 			; go do whatever it is.
.a4d1		7a		ply				ply
.a4d2		80 96		bra $a46a			bra 	_RGICommandLoop 			; and go round
.a4d4						_RGI_By:
.a4d4		20 64 a5	jsr $a564			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a4d7		18		clc				clc
.a4d8		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a4da		6d 62 06	adc $0662			adc 	gxXPos
.a4dd		8d 62 06	sta $0662			sta 	gxXPos
.a4e0		a5 61		lda $61				lda 	NSMantissa1+1
.a4e2		6d 63 06	adc $0663			adc 	gxXPos+1
.a4e5		8d 63 06	sta $0663			sta 	gxXPos+1
.a4e8		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4ea		18		clc				clc
.a4eb		6d 64 06	adc $0664			adc 	gxYPos
.a4ee		8d 64 06	sta $0664			sta 	gxYPos
.a4f1		80 d7		bra $a4ca			bra 	_RGI_Here
.a4f3						_RGI_Dim:
.a4f3		a2 01		ldx #$01			ldx	 	#1
.a4f5		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger
.a4f8		a5 59		lda $59				lda 	NSMantissa0+1
.a4fa		c9 00		cmp #$00			cmp 	#0
.a4fc		f0 2d		beq $a52b			beq 	_RGIRange
.a4fe		c9 09		cmp #$09			cmp 	#8+1
.a500		b0 29		bcs $a52b			bcs		_RGIRange
.a502		3a		dec a				dec 	a
.a503		8d 67 06	sta $0667			sta 	gxDrawScale
.a506		4c 6a a4	jmp $a46a			jmp 	_RGICommandLoop
.a509						_RGI_Colour:
.a509		a2 01		ldx #$01			ldx 	#1 							; colour
.a50b		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger
.a50e		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a510		20 76 a0	jsr $a076			jsr 	NSMSetZero
.a513		b1 30		lda ($30),y			lda 	(codePtr),y
.a515		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a517		d0 04		bne $a51d			bne 	_RGICDefaultMode
.a519		c8		iny				iny
.a51a		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger
.a51d						_RGICDefaultMode:
.a51d		5a		phy				phy
.a51e		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a520		a6 59		ldx $59				ldx 	NSMantissa0+1
.a522		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a524		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a527		7a		ply				ply
.a528		4c 6a a4	jmp $a46a			jmp 	_RGICommandLoop 			; and go round
.a52b						_RGIRange:
.a52b		4c f9 a1	jmp $a1f9			jmp 	RangeError
.a52e						_RGICallHandler:
.a52e		6c 65 06	jmp ($0665)			jmp 	(gxHandler)
.a531						_RGI_SpriteInstructions:
.a531		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a533		f0 07		beq $a53c			beq 	_RGISpriteOff
.a535		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a537		f0 13		beq $a54c			beq 	_RGISetImage
.a539		4c a3 a4	jmp $a4a3			jmp 	_RGI_Move
.a53c						_RGISpriteOff:
.a53c		5a		phy				phy
.a53d		a0 01		ldy #$01			ldy 	#1
.a53f		a2 00		ldx #$00			ldx 	#0
.a541						_RGIDoCommandLoop:
.a541		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a543		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a546		7a		ply				ply
.a547		b0 e2		bcs $a52b			bcs 	_RGIRange
.a549		4c 6a a4	jmp $a46a			jmp 	_RGICommandLoop
.a54c						_RGISetImage:
.a54c		a2 01		ldx #$01			ldx 	#1
.a54e		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger
.a551		5a		phy				phy
.a552		aa		tax				tax
.a553		a0 00		ldy #$00			ldy 	#0
.a555		80 ea		bra $a541			bra 	_RGIDoCommandLoop
.a557						GCGetCoordinatePair:
.a557		a2 01		ldx #$01			ldx 	#1
.a559		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.a55c		20 1a 91	jsr $911a			jsr 	CheckComma
.a55f		e8		inx				inx
.a560		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.a563		60		rts				rts
.a564						GCSignedCoordinatePair:
.a564		a2 01		ldx #$01			ldx 	#1
.a566		20 00 a0	jsr $a000			jsr 	Evaluate16BitIntegerSigned
.a569		20 1a 91	jsr $911a			jsr 	CheckComma
.a56c		e8		inx				inx
.a56d		20 00 a0	jsr $a000			jsr 	Evaluate16BitIntegerSigned
.a570		60		rts				rts
.a571						_GCCPRange:
.a571		4c f9 a1	jmp $a1f9			jmp 	RangeError
.a574						GCLoadAXY:
.a574		ad 63 06	lda $0663			lda 	gxXPos+1
.a577		ae 62 06	ldx $0662			ldx 	gxXPos
.a57a		ac 64 06	ldy $0664			ldy 	gxYPos
.a57d		60		rts				rts
.a57e						GCCopyPairToStore:
.a57e		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a580		8d 62 06	sta $0662			sta 	gxXPos
.a583		a5 61		lda $61				lda 	NSMantissa1+1
.a585		8d 63 06	sta $0663			sta 	gxXPos+1
.a588		a5 5a		lda $5a				lda 	NSMantissa0+2
.a58a		8d 64 06	sta $0664			sta 	gxYPos
.a58d		60		rts				rts
.0660						gxCommandID:
>0660								.fill 	1
.0661						gxFillSolid:
>0661								.fill 	1
.0662						gxXPos:
>0662								.fill 	2
.0664						gxYPos:
>0664								.fill 	1
.0665						gxHandler:
>0665								.fill 	2
.0667						gxDrawScale:
>0667								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a58e						BitmapCtrl:
.a58e		b1 30		lda ($30),y			lda 	(codePtr),y
.a590		c8		iny				iny
.a591		a2 01		ldx #$01			ldx 	#1
.a593		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a595		f0 11		beq $a5a8			beq 	BitmapSwitch
.a597		ca		dex				dex
.a598		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a59a		f0 0c		beq $a5a8			beq 	BitmapSwitch
.a59c		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get the colour
.a59f		5a		phy				phy
.a5a0		aa		tax				tax
.a5a1		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5a3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5a6		7a		ply				ply
.a5a7		60		rts				rts
.a5a8						BitmapSwitch:
.a5a8		5a		phy				phy
.a5a9		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5ab		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5ad		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5b0		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5b2		a0 00		ldy #$00			ldy 	#0
.a5b4		a2 ff		ldx #$ff			ldx 	#$FF
.a5b6		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5b9		9c 61 06	stz $0661			stz 	gxFillSolid
.a5bc		9c 62 06	stz $0662			stz 	gxXPos
.a5bf		9c 63 06	stz $0663			stz 	gxXPos+1
.a5c2		9c 64 06	stz $0664			stz 	gxYPos
.a5c5		9c 67 06	stz $0667			stz 	gxDrawScale
.a5c8		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a5ca		a2 00		ldx #$00			ldx 	#0
.a5cc		a0 00		ldy #$00			ldy 	#0
.a5ce		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5d1		7a		ply				ply
.a5d2		60		rts				rts
.a5d3						SpritesCtrl:
.a5d3		b1 30		lda ($30),y			lda 	(codePtr),y
.a5d5		c8		iny				iny
.a5d6		a2 01		ldx #$01			ldx 	#1
.a5d8		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a5da		f0 08		beq $a5e4			beq 	SpriteSwitch
.a5dc		ca		dex				dex
.a5dd		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5df		f0 03		beq $a5e4			beq 	SpriteSwitch
.a5e1		4c f4 a1	jmp $a1f4			jmp 	SyntaxError
.a5e4						SpriteSwitch:
.a5e4		5a		phy				phy
.a5e5		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a5e7		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a5e9		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5ec		7a		ply				ply
.a5ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a5ee						GfxCommand:
.a5ee		a2 00		ldx #$00			ldx 	#0
.a5f0		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; command
.a5f3		20 1a 91	jsr $911a			jsr 	CheckComma
.a5f6		e8		inx				inx
.a5f7		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; X
.a5fa		20 1a 91	jsr $911a			jsr 	CheckComma
.a5fd		e8		inx				inx
.a5fe		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; Y
.a601		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a603		4a		lsr a				lsr 	a
.a604		d0 12		bne $a618			bne 	_GfxError
.a606		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a608		b0 0e		bcs $a618			bcs 	_GfxError 					; bit 7 should have been zero
.a60a		5a		phy				phy 								; save pos
.a60b		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a60d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a60f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a611		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a614		b0 02		bcs $a618			bcs 	_GfxError
.a616		7a		ply				ply 								; restore pos and exit.
.a617		60		rts				rts
.a618						_GfxError:
.a618		4c f9 a1	jmp $a1f9			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a61b						UnaryHit:
.a61b		fa		plx				plx
.a61c		a9 36		lda #$36			lda 	#zTemp0
.a61e		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a621		20 1a 91	jsr $911a			jsr 	CheckComma
.a624		e8		inx				inx
.a625		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a628		20 12 91	jsr $9112			jsr		CheckRightBracket
.a62b		ca		dex				dex 								; fix back up again.
.a62c		da		phx				phx 								; save X/Y
.a62d		5a		phy				phy
.a62e		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a630		b5 58		lda $58,x			lda 	NSMantissa0,x
.a632		aa		tax				tax
.a633		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a635		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; calculate result
.a638		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a639		7a		ply				ply 								; restore XY
.a63a		fa		plx				plx
.a63b		20 78 a0	jsr $a078			jsr 	NSMSetByte 					; return the hit result
.a63e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a63f						PaletteCommand:
.a63f		a2 00		ldx #$00			ldx 	#0
.a641		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; colour
.a644		20 1a 91	jsr $911a			jsr 	CheckComma
.a647		e8		inx				inx
.a648		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; r
.a64b		20 1a 91	jsr $911a			jsr 	CheckComma
.a64e		e8		inx				inx
.a64f		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; g
.a652		20 1a 91	jsr $911a			jsr 	CheckComma
.a655		e8		inx				inx
.a656		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; b
.a659		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a65b		85 36		sta $36				sta 	zTemp0
.a65d		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a65f		85 37		sta $37				sta 	zTemp0+1
.a661		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a663		26 37		rol $37				rol	 	zTemp0+1
.a665		06 36		asl $36				asl 	zTemp0
.a667		26 37		rol $37				rol	 	zTemp0+1
.a669		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a66b		85 01		sta $01				sta 	1
.a66d		5a		phy				phy
.a66e		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a670		92 36		sta ($36)			sta 	(zTemp0)
.a672		a0 01		ldy #$01			ldy 	#1
.a674		a5 5a		lda $5a				lda 	NSMantissa0+2
.a676		91 36		sta ($36),y			sta 	(zTemp0),y
.a678		a5 59		lda $59				lda 	NSMantissa0+1
.a67a		c8		iny				iny
.a67b		91 36		sta ($36),y			sta 	(zTemp0),y
.a67d		7a		ply				ply
.a67e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a67f						XLoadCommand:
.a67f		20 7c 8b	jsr $8b7c			jsr 	NewProgram
.a682		20 67 83	jsr $8367			jsr 	BackloadProgram
.a685		4c 26 84	jmp $8426			jmp 	WarmStart
.a688						XGoCommand:
.a688		20 7c 8b	jsr $8b7c			jsr 	NewProgram
.a68b		20 67 83	jsr $8367			jsr 	BackloadProgram
.a68e		4c fa 8c	jmp $8cfa			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a691						UnaryEvent:
.a691		fa		plx				plx
.a692		20 2b a7	jsr $a72b			jsr 	TimerToStackX 				; timer in +0
.a695		e8		inx				inx  								; put reference into +1
.a696		20 79 9a	jsr $9a79			jsr 	EvaluateTerm
.a699		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a69b		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a69d		d0 4c		bne $a6eb			bne 	_UEType
.a69f		e8		inx				inx 								; put the step in +2
.a6a0		20 1a 91	jsr $911a			jsr 	CheckComma
.a6a3		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger
.a6a6		20 12 91	jsr $9112			jsr 	CheckRightBracket
.a6a9		ca		dex				dex
.a6aa		ca		dex				dex
.a6ab		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a6ad		85 36		sta $36				sta 	zTemp0
.a6af		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a6b1		85 37		sta $37				sta 	zTemp0+1
.a6b3		5a		phy				phy
.a6b4		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a6b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6b8		30 2d		bmi $a6e7			bmi 	_UEFalse 					; exit if signed.
.a6ba		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a6bc		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6be		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6c0		c8		iny				iny
.a6c1		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6c3		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6c5		c8		iny				iny
.a6c6		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6c8		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6ca		90 1b		bcc $a6e7			bcc 	_UEFalse 					; no, return FALSE.
.a6cc		18		clc				clc
.a6cd		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a6cf		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6d1		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a6d3		91 36		sta ($36),y			sta 	(zTemp0),y
.a6d5		c8		iny				iny
.a6d6		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6d8		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a6da		91 36		sta ($36),y			sta 	(zTemp0),y
.a6dc		c8		iny				iny
.a6dd		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6df		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a6e1		91 36		sta ($36),y			sta 	(zTemp0),y
.a6e3		7a		ply				ply
.a6e4		4c 98 91	jmp $9198			jmp 	ReturnTrue
.a6e7						_UEFalse:
.a6e7		7a		ply				ply 								; restore Y
.a6e8		4c a3 91	jmp $91a3			jmp 	ReturnFalse 				; and return False
.a6eb						_UEType:
.a6eb		4c fe a1	jmp $a1fe			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a6ee						UnaryJoyX:
.a6ee		18		clc				clc
.a6ef		80 01		bra $a6f2			bra 	JoyMain
.a6f1						UnaryJoyY:
.a6f1		38		sec				sec
.a6f2						JoyMain:
.a6f2		fa		plx				plx 								; get pos
.a6f3		08		php				php 								; save carry (set for Y)
.a6f4		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6f7		20 12 91	jsr $9112			jsr 	CheckRightBracket
.a6fa		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a6fd		28		plp				plp
.a6fe		b0 02		bcs $a702			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a700		4a		lsr a				lsr 	a
.a701		4a		lsr a				lsr 	a
.a702						_JMNoShift:
.a702		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a703		b0 07		bcs $a70c			bcs 	JMIsLeft
.a705		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a706		b0 07		bcs $a70f			bcs 	JMIsRight
.a708		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; zero result
.a70b		60		rts				rts
.a70c						JMIsLeft:
.a70c		4c 98 91	jmp $9198			jmp 	ReturnTrue
.a70f						JMIsRight:
.a70f		a9 01		lda #$01			lda 	#1
.a711		20 78 a0	jsr $a078			jsr 	NSMSetByte
.a714		60		rts				rts
.a715						UnaryJoyB:
.a715		fa		plx				plx 								; get pos
.a716		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a719		20 12 91	jsr $9112			jsr 	CheckRightBracket
.a71c		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a71f		29 10		and #$10			and 	#$10
.a721		d0 e9		bne $a70c			bne 	JMIsLeft
.a723		20 76 a0	jsr $a076			jsr 	NSMSetZero
.a726		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a727						UnaryTimer:
.a727		fa		plx				plx
.a728		20 12 91	jsr $9112			jsr 	CheckRightBracket
.a72b						TimerToStackX:
.a72b		20 76 a0	jsr $a076			jsr 	NSMSetZero 					; zero result
.a72e		64 01		stz $01				stz 	1 							; access I/O
.a730		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a733		95 58		sta $58,x			sta 	NSMantissa0,x
.a735		ad 5a d6	lda $d65a			lda 	$D65A
.a738		95 60		sta $60,x			sta 	NSMantissa1,x
.a73a		ad 5b d6	lda $d65b			lda 	$D65B
.a73d		95 68		sta $68,x			sta 	NSMantissa2,x
.a73f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a740						MemoryDeleteLine:
.a740		20 5f a7	jsr $a75f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a743		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a745		a8		tay				tay
.a746						_MDDLLoop:
.a746		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a748		92 30		sta ($30)			sta 	(codePtr)
.a74a		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a74c		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a74e		d0 07		bne $a757			bne 	_MDLDLNext
.a750		a5 31		lda $31				lda 	codePtr+1
.a752		c5 3b		cmp $3b				cmp 	zTemp2+1
.a754		d0 01		bne $a757			bne 	_MDLDLNext
.a756						_MDDLExit:
.a756		60		rts				rts
.a757						_MDLDLNext:
.a757		e6 30		inc $30				inc 	codePtr						; next byte
.a759		d0 eb		bne $a746			bne 	_MDDLLoop
.a75b		e6 31		inc $31				inc 	codePtr+1
.a75d		80 e7		bra $a746			bra 	_MDDLLoop
.a75f						IMemoryFindEnd:
.a75f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a761		85 3a		sta $3a				sta 	0+zTemp2
.a763		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a765		85 3b		sta $3b				sta 	1+zTemp2
.a767						_MDLFELoop:
.a767		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a769		f0 0b		beq $a776			beq 	_MDLFEExit
.a76b		18		clc				clc
.a76c		65 3a		adc $3a				adc 	zTemp2
.a76e		85 3a		sta $3a				sta 	zTemp2
.a770		90 f5		bcc $a767			bcc 	_MDLFELoop
.a772		e6 3b		inc $3b				inc 	zTemp2+1
.a774		80 f1		bra $a767			bra 	_MDLFELoop
.a776						_MDLFEExit:
.a776		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a777						MemoryInsertLine:
.a777		08		php				php
.a778		20 5f a7	jsr $a75f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a77b		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a77d		1a		inc a				inc 	a
.a77e		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a780		b0 36		bcs $a7b8			bcs 	_MDLIError 					; no, fail.
.a782		28		plp				plp 								; do at a specific point or the end ?
.a783		90 08		bcc $a78d			bcc 	_MDLIFound 					; if specific point already set.
.a785		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a787		85 30		sta $30				sta 	codePtr 					; end.
.a789		a5 3b		lda $3b				lda 	zTemp2+1
.a78b		85 31		sta $31				sta 	codePtr+1
.a78d						_MDLIFound:
.a78d		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a790		a8		tay				tay
.a791						_MDLIInsert:
.a791		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a793		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a795		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a797		c5 3a		cmp $3a				cmp 	zTemp2
.a799		d0 06		bne $a7a1			bne 	_MDLINext
.a79b		a5 31		lda $31				lda 	codePtr+1
.a79d		c5 3b		cmp $3b				cmp 	zTemp2+1
.a79f		f0 0a		beq $a7ab			beq 	_MDLIHaveSpace
.a7a1						_MDLINext:
.a7a1		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a7a3		d0 02		bne $a7a7			bne 	_MDLINoBorrow
.a7a5		c6 3b		dec $3b				dec 	zTemp2+1
.a7a7						_MDLINoBorrow:
.a7a7		c6 3a		dec $3a				dec 	zTemp2
.a7a9		80 e6		bra $a791			bra 	_MDLIInsert
.a7ab						_MDLIHaveSpace:
.a7ab		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a7ae		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a7af						_MDLICopy:
.a7af		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a7b2		91 30		sta ($30),y			sta 	(codePtr),y
.a7b4		88		dey				dey
.a7b5		10 f8		bpl $a7af			bpl 	_MDLICopy
.a7b7		60		rts				rts
.a7b8						_MDLIError:
.a7b8		a9 06		lda #$06		lda	#6
.a7ba		4c 2b 91	jmp $912b		jmp	ErrorHandler
.a7bd						MDLAppendLine:
.a7bd		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a7bf		85 36		sta $36				sta 	zTemp0
.a7c1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7c3		85 38		sta $38				sta 	0+zTemp1
.a7c5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7c7		85 39		sta $39				sta 	1+zTemp1
.a7c9		b2 38		lda ($38)			lda 	(zTemp1)
.a7cb		d0 0a		bne $a7d7			bne 	_MDLANoInitialise
.a7cd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7cf		8d 68 06	sta $0668			sta 	0+AppendPointer
.a7d2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7d4		8d 69 06	sta $0669			sta 	1+AppendPointer
.a7d7						_MDLANoInitialise:
.a7d7		18		clc				clc
.a7d8		ad 68 06	lda $0668			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7db		85 38		sta $38				sta 	zTemp1
.a7dd		72 36		adc ($36)			adc 	(zTemp0)
.a7df		8d 68 06	sta $0668			sta 	AppendPointer
.a7e2		ad 69 06	lda $0669			lda 	AppendPointer+1
.a7e5		85 39		sta $39				sta 	zTemp1+1
.a7e7		69 00		adc #$00			adc 	#0
.a7e9		8d 69 06	sta $0669			sta 	AppendPointer+1
.a7ec		a0 00		ldy #$00			ldy 	#0
.a7ee						_MDLACopy:
.a7ee		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7f0		91 38		sta ($38),y			sta 	(zTemp1),y
.a7f2		c8		iny				iny
.a7f3		98		tya				tya
.a7f4		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a7f6		d0 f6		bne $a7ee			bne 	_MDLACopy
.a7f8		a9 00		lda #$00			lda 	#0 							; end of program.
.a7fa		91 38		sta ($38),y			sta 	(zTemp1),y
.a7fc		60		rts				rts
.0668						AppendPointer:
>0668								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a7fd						MemoryNew:
.a7fd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7ff		85 30		sta $30				sta 	codePtr
.a801		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a803		85 31		sta $31				sta 	codePtr+1
.a805		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a807		92 30		sta ($30)			sta 	(codePtr)
.a809		60		rts				rts
.a80a						MemoryInline:
.a80a		98		tya				tya 								; put address into stack,x
.a80b		18		clc				clc  								; get the offset, add codePtr
.a80c		65 30		adc $30				adc 	codePtr
.a80e		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a810		a5 31		lda $31				lda 	codePtr+1
.a812		69 00		adc #$00			adc 	#0
.a814		95 60		sta $60,x			sta 	NSMantissa1,x
.a816		74 68		stz $68,x			stz 	NSMantissa2,x
.a818		74 70		stz $70,x			stz 	NSMantissa3,x
.a81a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a81b						MemorySearch:
.a81b		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a81d		86 37		stx $37				stx 	zTemp0+1
.a81f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a821		85 30		sta $30				sta 	codePtr
.a823		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a825		85 31		sta $31				sta 	codePtr+1
.a827						_MTAXLoop:
.a827		b2 30		lda ($30)			lda 	(codePtr)
.a829		18		clc				clc
.a82a		f0 21		beq $a84d			beq 	_MTAXExit 					; reached end, exit with CC.
.a82c		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a82e		b1 30		lda ($30),y			lda 	(codePtr),y
.a830		38		sec				sec
.a831		e5 36		sbc $36				sbc 	zTemp0
.a833		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a835		c8		iny				iny 								; do the MSB
.a836		b1 30		lda ($30),y			lda 	(codePtr),y
.a838		e5 37		sbc $37				sbc 	zTemp0+1
.a83a		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a83c		f0 0f		beq $a84d			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a83e		b0 0d		bcs $a84d			bcs 	_MTAXExit 					; current < required exit
.a840		18		clc				clc
.a841		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a843		65 30		adc $30				adc 	codePtr
.a845		85 30		sta $30				sta 	codePtr
.a847		90 02		bcc $a84b			bcc 	_CREExit
.a849		e6 31		inc $31				inc 	codePtr+1 					; carry
.a84b						_CREExit:
.a84b		80 da		bra $a827			bra 	_MTAXLoop
.a84d						_MTAXExit:
.a84d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a84e						UpdateFont:
.a84e		a5 01		lda $01				lda 	1 							; save position
.a850		48		pha				pha
.a851		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a853		85 01		sta $01				sta 	1
.a855		a9 7c		lda #$7c			lda 	#((FontBinary) & $FF)
.a857		85 36		sta $36				sta 	0+zTemp0
.a859		a9 a8		lda #$a8			lda 	#((FontBinary) >> 8)
.a85b		85 37		sta $37				sta 	1+zTemp0
.a85d		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a85f		85 38		sta $38				sta 	0+zTemp1
.a861		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a863		85 39		sta $39				sta 	1+zTemp1
.a865						_UFCopy1:
.a865		a0 00		ldy #$00			ldy 	#0
.a867						_UFCopy2:
.a867		b1 36		lda ($36),y			lda 	(zTemp0),y
.a869		91 38		sta ($38),y			sta 	(zTemp1),y
.a86b		c8		iny				iny
.a86c		d0 f9		bne $a867			bne 	_UFCopy2
.a86e		e6 37		inc $37				inc 	zTemp0+1
.a870		e6 39		inc $39				inc 	zTemp1+1
.a872		a5 39		lda $39				lda 	zTemp1+1
.a874		c9 c8		cmp #$c8			cmp 	#$C8
.a876		d0 ed		bne $a865			bne 	_UFCopy1
.a878		68		pla				pla 								; restore.
.a879		85 01		sta $01				sta 	1
.a87b		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a87c						FontBinary:
>a87c		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a884		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a894		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a8a4		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a8b4		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a8c4		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a8d4		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a8e4		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a8f4		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a904		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a914		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a924		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a934		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a944		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a954		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a964		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a974		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a984		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a994		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a9a4		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a9b4		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a9c4		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a9d4		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a9e4		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a9f4		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aa04		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aa14		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aa24		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aa34		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aa44		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aa54		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aa64		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>aa74		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>aa84		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>aa94		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>aaa4		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>aab4		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>aac4		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>aad4		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aae4		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>aaf4		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ab04		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ab14		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ab24		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ab34		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ab44		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ab54		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ab64		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ab74		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ab84		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ab94		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>aba4		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>abb4		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>abc4		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>abd4		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>abe4		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>abf4		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ac04		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ac14		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ac24		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ac34		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ac44		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ac54		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ac64		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ac74		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ac84		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ac94		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aca4		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>acb4		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>acc4		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>acd4		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ace4		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>acf4		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ad04		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ad14		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ad24		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ad34		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ad44		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ad54		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ad64		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ad74		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ad84		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ad94		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ada4		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>adb4		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>adc4		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>add4		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ade4		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>adf4		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ae04		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ae14		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ae24		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ae34		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ae44		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ae54		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ae64		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ae74		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ae84		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ae94		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>aea4		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>aeb4		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>aec4		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>aed4		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>aee4		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>aef4		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>af04		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>af14		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>af24		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>af34		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>af44		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>af54		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>af64		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>af74		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>af84		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>af94		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>afa4		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>afb4		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>afc4		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>afd4		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>afe4		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>aff4		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b004		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b014		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b024		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b034		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b044		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b054		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b064		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b074		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b07c						PingCommand:
.b07c		5a		phy				phy 								; save pos
.b07d		a9 01		lda #$01			lda 	#1 						; push channel.
.b07f		48		pha				pha
.b080		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b082		a2 03		ldx #$03			ldx 	#3 						; length
.b084		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b086		80 24		bra $b0ac			bra 	SoundEffectCommand
.b088						ZapCommand:
.b088		5a		phy				phy 								; save pos
.b089		a9 01		lda #$01			lda 	#1 						; push channel.
.b08b		48		pha				pha
.b08c		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b08e		a2 05		ldx #$05			ldx 	#5 						; length
.b090		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.b092		80 18		bra $b0ac			bra 	SoundEffectCommand
.b094						ShootCommand:
.b094		5a		phy				phy 								; save pos
.b095		a9 03		lda #$03			lda 	#3 						; push channel.
.b097		48		pha				pha
.b098		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b09a		a2 02		ldx #$02			ldx 	#2 						; length
.b09c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b09e		80 0c		bra $b0ac			bra 	SoundEffectCommand
.b0a0						Explode:
.b0a0		5a		phy				phy 								; save pos
.b0a1		a9 03		lda #$03			lda 	#3 						; push channel.
.b0a3		48		pha				pha
.b0a4		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b0a6		a2 05		ldx #$05			ldx 	#5 						; length
.b0a8		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b0aa		80 00		bra $b0ac			bra 	SoundEffectCommand
.b0ac						SoundEffectCommand:
.b0ac		8d 6a 06	sta $066a			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b0af		9c 6b 06	stz $066b			stz 	SoundCommandBlock+1
.b0b2		a9 0f		lda #$0f			lda 	#15
.b0b4		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2
.b0b7		8e 6d 06	stx $066d			stx 	SoundCommandBlock+3
.b0ba		8c 6e 06	sty $066e			sty 	SoundCommandBlock+4
.b0bd		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b0c0		68		pla				pla
.b0c1		09 10		ora #$10			ora 	#$10  						; execute command $11
.b0c3		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b0c5		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b0c7		20 85 80	jsr $8085			jsr 	SNDCommand
.b0ca		7a		ply				ply
.b0cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b0cc						UnaryPlaying:
.b0cc		fa		plx				plx
.b0cd		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; get channel #
.b0d0		48		pha				pha
.b0d1		20 12 91	jsr $9112			jsr		CheckRightBracket
.b0d4		68		pla				pla
.b0d5		c9 04		cmp #$04			cmp 	#4
.b0d7		b0 0c		bcs $b0e5			bcs 	_UPNotPlaying
.b0d9		09 20		ora #$20			ora 	#$20 						; query playing ?
.b0db		20 85 80	jsr $8085			jsr 	SNDCommand
.b0de		c9 00		cmp #$00			cmp 	#0
.b0e0		f0 03		beq $b0e5			beq 	_UPNotPlaying
.b0e2		4c 98 91	jmp $9198			jmp 	ReturnTrue
.b0e5						_UPNotPlaying:
.b0e5		4c a3 91	jmp $91a3			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b0e8						SoundCommand:
.b0e8		b1 30		lda ($30),y			lda 	(codePtr),y
.b0ea		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b0ec		d0 09		bne $b0f7			bne 	_SNDMain
.b0ee		c8		iny				iny 								; skip OFF
.b0ef		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b0f1		5a		phy				phy
.b0f2		20 85 80	jsr $8085			jsr 	SNDCommand
.b0f5		7a		ply				ply
.b0f6		60		rts				rts
.b0f7						_SNDMain:
.b0f7		a2 00		ldx #$00			ldx 	#0
.b0f9		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; channel
.b0fc		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b0fe		b0 4b		bcs $b14b			bcs 	_SndError
.b100		e8		inx				inx 								; do the rest in slot 1.
.b101		20 1a 91	jsr $911a			jsr 	CheckComma
.b104		20 f6 9f	jsr $9ff6			jsr 	Evaluate16BitInteger 		; Pitch
.b107		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b109		c9 10		cmp #$10			cmp 	#16
.b10b		b0 3e		bcs $b14b			bcs 	_SndError
.b10d		8d 6b 06	sta $066b			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b110		b5 58		lda $58,x			lda 	NSMantissa0,x
.b112		8d 6a 06	sta $066a			sta 	SoundCommandBlock
.b115		20 1a 91	jsr $911a			jsr 	CheckComma
.b118		20 11 a0	jsr $a011			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b11b		8d 6d 06	sta $066d			sta 	SoundCommandBlock+3
.b11e		a9 0f		lda #$0f			lda 	#15
.b120		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b123		9c 6e 06	stz $066e			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b126		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b129		b1 30		lda ($30),y			lda 	(codePtr),y
.b12b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b12d		d0 0e		bne $b13d			bne 	_SNDPlay
.b12f		c8		iny				iny
.b130		20 00 a0	jsr $a000			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b133		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b135		8d 6e 06	sta $066e			sta 	SoundCommandBlock+4
.b138		b5 60		lda $60,x			lda 	NSMantissa1,x
.b13a		8d 6f 06	sta $066f			sta 	SoundCommandBlock+5
.b13d						_SNDPlay:
.b13d		5a		phy				phy
.b13e		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b140		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b142		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b144		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b146		20 85 80	jsr $8085			jsr 	SNDCommand
.b149		7a		ply				ply
.b14a		60		rts				rts
.b14b						_SndError:
.b14b		4c f9 a1	jmp $a1f9			jmp 	RangeError
.066a						SoundCommandBlock:
>066a								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b14e						StackPushByte:
.b14e		48		pha				pha 								; save byte on stack
.b14f		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b151		d0 08		bne $b15b			bne 	_SPBNoBorrow
.b153		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b155		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b157		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b159		90 06		bcc $b161			bcc 	_SPBMemory
.b15b						_SPBNoBorrow:
.b15b		c6 34		dec $34				dec 	basicStack
.b15d		68		pla				pla 								; get back and write
.b15e		92 34		sta ($34)			sta 	(basicStack)
.b160		60		rts				rts
.b161						_SPBMemory:
.b161		a9 12		lda #$12		lda	#18
.b163		4c 2b 91	jmp $912b		jmp	ErrorHandler
.b166						StackPopByte:
.b166		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b168		e6 34		inc $34				inc 	basicStack
.b16a		d0 02		bne $b16e			bne 	_SPBNoCarry
.b16c		e6 35		inc $35				inc 	basicStack+1
.b16e						_SPBNoCarry:
.b16e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b16f						StackOpen:
.b16f		48		pha				pha 								; save frame byte
.b170		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b172		0a		asl a				asl 	a 							; claim twice this for storage
.b173		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b175		38		sec				sec 								; so basically subtracting from
.b176		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b178		85 34		sta $34				sta 	basicStack
.b17a		b0 09		bcs $b185			bcs 	_SONoBorrow
>b17c		db						.byte 	$DB 						; causes a break in the emulator
.b17d		c6 35		dec $35				dec 	basicStack+1
.b17f		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b181		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b183		90 04		bcc $b189			bcc 	_SOMemory
.b185						_SONoBorrow:
.b185		68		pla				pla 								; get marker back and write at TOS
.b186		92 34		sta ($34)			sta 	(basicStack)
.b188		60		rts				rts
.b189						_SOMemory:
.b189		a9 12		lda #$12		lda	#18
.b18b		4c 2b 91	jmp $912b		jmp	ErrorHandler
.b18e						StackClose:
.b18e		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b190		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b192		0a		asl a				asl 	a 							; claim twice this.
.b193		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b195		85 34		sta $34				sta 	basicStack
.b197		90 02		bcc $b19b			bcc 	_SCExit
.b199		e6 35		inc $35				inc 	basicStack+1
.b19b						_SCExit:
.b19b		60		rts				rts
.b19c						StackCheckFrame:
.b19c		48		pha				pha
.b19d						_StackRemoveLocals:
.b19d		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b19f		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b1a1		b0 05		bcs $b1a8			bcs 	_SCNoLocal
.b1a3		20 2b 8b	jsr $8b2b			jsr 	LocalPopValue 				; restore the local value
.b1a6		80 f5		bra $b19d			bra 	_StackRemoveLocals 			; gr round again
.b1a8						_SCNoLocal:
.b1a8		68		pla				pla 								; get the frame check.
.b1a9		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b1ab		29 f0		and #$f0			and 	#$F0 						; check type bits
.b1ad		d0 01		bne $b1b0			bne 	_SCFError 					; different, we have structures mixed up
.b1af		60		rts				rts
.b1b0						_SCFError:
.b1b0		8a		txa				txa 								; report error X
.b1b1		4c 2b 91	jmp $912b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b1b4						STKSaveCodePosition:
.b1b4		5a		phy				phy
.b1b5		98		tya				tya 								; save Y
.b1b6		a0 05		ldy #$05			ldy 	#5
.b1b8		91 34		sta ($34),y			sta 	(basicStack),y
.b1ba		88		dey				dey 								; save Code Pointer
.b1bb						_STKSaveLoop:
.b1bb		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b1be		91 34		sta ($34),y			sta 	(basicStack),y
.b1c0		88		dey				dey
.b1c1		d0 f8		bne $b1bb			bne 	_STKSaveLoop
.b1c3		7a		ply				ply
.b1c4		60		rts				rts
.b1c5						STKLoadCodePosition:
.b1c5		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b1c7						_STKLoadLoop:
.b1c7		b1 34		lda ($34),y			lda 	(basicStack),y
.b1c9		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b1cc		c8		iny				iny
.b1cd		c0 05		cpy #$05			cpy 	#5
.b1cf		d0 f6		bne $b1c7			bne 	_STKLoadLoop
.b1d1		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b1d3		a8		tay				tay
.b1d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b1d5						StackReset:
.b1d5		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b1d7		85 34		sta $34				sta 	0+basicStack
.b1d9		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b1db		85 35		sta $35				sta 	1+basicStack
.b1dd		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b1df		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b1e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1e2						StringConcrete:
.b1e2		5a		phy				phy 								; save position on stack
.b1e3		20 65 9c	jsr $9c65			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1e6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1e8		85 38		sta $38				sta 	zTemp1
.b1ea		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1ec		85 39		sta $39				sta 	zTemp1+1
.b1ee		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1f0						_SALength:
.b1f0		c8		iny				iny
.b1f1		b1 38		lda ($38),y			lda 	(zTemp1),y
.b1f3		d0 fb		bne $b1f0			bne 	_SALength
.b1f5		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b1f7		b0 3d		bcs $b236			bcs 	_SALengthError
.b1f9		98		tya				tya 				 				; length of the new string
.b1fa		18		clc				clc
.b1fb		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1fd		90 02		bcc $b201			bcc 	_SAHaveLength
.b1ff		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b201						_SAHaveLength:
.b201		48		pha				pha 								; save length.
.b202		38		sec				sec
.b203		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b205		6d 0e 04	adc $040e			adc 	stringMemory
.b208		8d 0e 04	sta $040e			sta 	stringMemory
.b20b		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b20d		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b20f		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b211		6d 0f 04	adc $040f			adc 	stringMemory+1
.b214		8d 0f 04	sta $040f			sta 	stringMemory+1
.b217		85 3b		sta $3b				sta 	zTemp2+1
.b219		95 60		sta $60,x			sta 	NSMantissa1,x
.b21b		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b21c		38		sec				sec
.b21d		e9 03		sbc #$03			sbc 	#3
.b21f		92 3a		sta ($3a)			sta 	(zTemp2)
.b221		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b223		a0 01		ldy #$01			ldy 	#1
.b225		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b227						_SACopyNewString:
.b227		a0 00		ldy #$00			ldy 	#0
.b229						_SACopyNSLoop:
.b229		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b22b		c8		iny				iny 								; write two on in string storage
.b22c		c8		iny				iny
.b22d		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b22f		88		dey				dey 								; this makes it one one.
.b230		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b232		d0 f5		bne $b229			bne 	_SACopyNSLoop
.b234		7a		ply				ply
.b235		60		rts				rts
.b236						_SALengthError:
.b236		a9 09		lda #$09		lda	#9
.b238		4c 2b 91	jmp $912b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b23b						StringSystemInitialise:
.b23b		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b23d		8d 0e 04	sta $040e			sta 	0+stringMemory
.b240		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b242		8d 0f 04	sta $040f			sta 	1+stringMemory
.b245		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b248		60		rts				rts
.b249						StringSpaceInitialise:
.b249		20 65 9c	jsr $9c65			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b24c		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b24e		8d 10 04	sta $0410			sta 	stringInitialised
.b251		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b254		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b257		ad 0f 04	lda $040f			lda 	stringMemory+1
.b25a		3a		dec a				dec 	a
.b25b		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b25e		60		rts				rts
.b25f						StringTempAllocate:
.b25f		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b261		b0 30		bcs $b293			bcs 	_STALength
.b263		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b266		30 05		bmi $b26d			bmi 	_STAAllocate
.b268		48		pha				pha 								; save value to subtract.
.b269		20 49 b2	jsr $b249			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b26c		68		pla				pla 								; restore it
.b26d						_STAAllocate:
.b26d		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b26f		18		clc				clc  								; deliberate allows one more
.b270		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b273		8d 11 04	sta $0411			sta 	stringTempPointer
.b276		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b278		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b27a		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b27d		69 ff		adc #$ff			adc 	#$FF
.b27f		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b282		85 3d		sta $3d				sta 	zsTemp+1
.b284		95 60		sta $60,x			sta 	NSMantissa1,x
.b286		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b288		74 70		stz $70,x			stz 	NSMantissa3,x
.b28a		a9 10		lda #$10			lda 	#NSTString
.b28c		95 50		sta $50,x			sta 	NSStatus,x
.b28e		a9 00		lda #$00			lda 	#0 							; clear the target string
.b290		92 3c		sta ($3c)			sta 	(zsTemp)
.b292		60		rts				rts
.b293						_STALength:
.b293		a9 09		lda #$09		lda	#9
.b295		4c 2b 91	jmp $912b		jmp	ErrorHandler
.b298						StringTempWrite:
.b298		48		pha				pha
.b299		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b29b		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b29d		d0 02		bne $b2a1			bne 	_STWNoCarry
.b29f		e6 3d		inc $3d				inc 	zsTemp+1
.b2a1						_STWNoCarry:
.b2a1		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b2a3		92 3c		sta ($3c)			sta 	(zsTemp)
.b2a5		68		pla				pla
.b2a6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b2a7						Command_VERIFY:
.b2a7		20 ce 9f	jsr $9fce			jsr 	EvaluateString 				; file name to verify
.b2aa		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b2ac		a5 36		lda $36				lda 	zTemp0
.b2ae		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b2b1		b0 4b		bcs $b2fe			bcs 	_CVErrorHandler 			; error, so fail.
.b2b3		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.b2b6		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b2b9		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.b2bc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b2be		85 30		sta $30				sta 	codePtr
.b2c0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2c2		85 31		sta $31				sta 	codePtr+1
.b2c4						_CVLoop:
.b2c4		20 73 8a	jsr $8a73			jsr 	LoadReadLine 				; get next line.
.b2c7		f0 27		beq $b2f0			beq 	_CVExit 					; end, exit.
.b2c9		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.b2cc		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b2cf		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b2d2		f0 f0		beq $b2c4			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b2d4		a0 00		ldy #$00			ldy 	#0 							; start compare
.b2d6						_CVCompareLoop:
.b2d6		b1 30		lda ($30),y			lda 	(codePtr),y
.b2d8		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b2db		d0 1c		bne $b2f9			bne 	_CVCompareError
.b2dd		c8		iny				iny
.b2de		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b2e1		d0 f3		bne $b2d6			bne 	_CVCompareLoop
.b2e3		18		clc				clc
.b2e4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b2e6		65 30		adc $30				adc 	codePtr
.b2e8		85 30		sta $30				sta 	codePtr
.b2ea		90 02		bcc $b2ee			bcc 	_CREExit
.b2ec		e6 31		inc $31				inc 	codePtr+1 					; carry
.b2ee						_CREExit:
.b2ee		80 d4		bra $b2c4			bra 	_CVLoop
.b2f0						_CVExit:
.b2f0		ad 5e 06	lda $065e			lda 	CurrentFileStream
.b2f3		20 71 80	jsr $8071			jsr 	KNLCloseFile
.b2f6		4c 48 8a	jmp $8a48			jmp 	CLComplete
.b2f9						_CVCompareError:
.b2f9		a9 1b		lda #$1b		lda	#27
.b2fb		4c 2b 91	jmp $912b		jmp	ErrorHandler
.b2fe						_CVErrorHandler:
.b2fe		4c 65 8a	jmp $8a65			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b301						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 72 06	lda $0672			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 71 06	sty $0671			sty 	EXTColumn
.c022	a022	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 70 06	inc $0670			inc 	EXTRow  					; bump row
.c02a	a02a	9c 71 06	stz $0671			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 70 06	lda $0670			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 74 06	cmp $0674			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 71 06	dec $0671			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 71 06	stz $0671			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 70 06	dec $0670			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 70 06	lda $0670			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 70 06	dec $0670			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 73 06	sbc $0673			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 71 06	sty $0671			sty 	EXTColumn
.c081	a081	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 71 06	sty $0671			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 74 06	lda $0674			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 70 06	cmp $0670			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 70 06	inc $0670			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 71 06	lda $0671			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 71 06	sta $0671			sta 	EXTColumn
.c0be	a0be	cd 73 06	cmp $0673			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 71 06	dec $0671			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 72 06	and $0672			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 72 06	sta $0672			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 72 06	ora $0672			ora 	EXTTextColour
.c131	a131	8d 72 06	sta $0672			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 72 06	lda $0672			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 72 06	lda $0672			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 70 06	stz $0670			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 71 06	stz $0671			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 71 06	lda $0671			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 70 06	lda $0670			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 02 bc	jsr $bc02			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 71 06	lda $0671			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 71 06	ldy $0671			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 71 06	ldy $0671			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 71 06	cpy $0671			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 73 06	lda $0673			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0670						EXTRow:
>0670								.fill 	1
.0671						EXTColumn:
>0671								.fill 	1
.0672						EXTTextColour:
>0672								.fill 	1
.0673						EXTScreenWidth:
>0673								.fill 	1
.0674						EXTScreenHeight:
>0674								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 72 06	sta $0672			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 73 06	sta $0673			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 74 06	sta $0674			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 70 06	lda $0670			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0675						gxCurrentX:
>0675								.fill 	2
.0677						gxCurrentY:
>0677								.fill 	2
.0679						gxLastX:
>0679								.fill 	2
.067b						gxLastY:
>067b								.fill 	2
.067d						gxX0:
>067d								.fill 	2
.067f						gxY0:
>067f								.fill 	2
.0681						gxX1:
>0681								.fill 	2
.0683						gxY1:
>0683								.fill 	2
.0685						gxSpritesOn:
>0685								.fill 	1
.0686						gxBitmapsOn:
>0686								.fill 	1
.0687						gxBasePage:
>0687								.fill 	1
.0688						gxSpritePage:
>0688								.fill 	1
.0689						gxHeight:
>0689								.fill 	1
.068a						gxMode:
>068a								.fill 	1
.068b						gxColour:
>068b								.fill 	1
.068c						gxEORValue:
>068c								.fill 	1
.068d						gxANDValue:
>068d								.fill 	1
.068e						gxOriginalLUTValue:
>068e								.fill 	1
.068f						gxOffset:
>068f								.fill 	1
.0690						GSCurrentSpriteID:
>0690								.fill 	1
.0691						GSCurrentSpriteAddr:
>0691								.fill 	2
.0693						gxSpriteOffsetBase:
>0693								.fill 	2
.0695						gxSpriteLow:
>0695								.fill 	64
.06d5						gxSpriteHigh:
>06d5								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 79 06	sta $0679,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 77 06	sta $0677			sta 	gxCurrentY
.c7dc	a7dc	9c 78 06	stz $0678			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 75 06	sta $0675			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 76 06	sta $0676			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 76 06	lda $0676			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 75 06	lda $0675			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 77 06	lda $0677			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 89 06	cmp $0689			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 18 07	sta $0718			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 86 06	lda $0686			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 19 07	stz $0719			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 16 07	lda $0716			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 17 07	cmp $0717			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 17 07	lda $0717			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 16 07	lda $0716			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 17 07	ldx $0717			ldx	 	gxYCentre
.c86a	a86a	8d 17 07	sta $0717			sta 	gxYCentre
.c86d	a86d	8e 16 07	stx $0716			stx 	gxxCentre
.c870	a870	ad 19 07	lda $0719			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 19 07	sta $0719			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 18 07	lda $0718	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 19 07	lda $0719			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 17 07	lda $0717			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 16 07	lda $0716			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 18 07	lda $0718			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8b1	a8b1	8d 17 07	sta $0717			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 81 06	lda $0681,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c8c8	a8c8	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7e 06	sta $067e,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 19 07	stz $0719			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 16 07	inc $0716			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 16 07	lda $0716			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 16 07	inc $0716			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 17 07	dec $0717			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 16 07	lda $0716			lda 	gxxCentre
.c8f1	a8f1	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 19 07	dec $0719			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 83 06	lda $0683			lda 	gxY1
.c92a	a92a	ed 7f 06	sbc $067f			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 15 07	sta $0715			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 16 07	stz $0716			stz 	gxxCentre
.c93e	a93e	ad 15 07	lda $0715			lda 	gxRadius
.c941	a941	8d 17 07	sta $0717			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 81 06	lda $0681,x			lda 	gxX1,x
.c959	a959	7d 7d 06	adc $067d,x			adc 	gxX0,x
.c95c	a95c	9d 81 06	sta $0681,x			sta 	gxX1,x
.c95f	a95f	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c962	a962	7d 7e 06	adc $067e,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 82 06	sta $0682,x			sta 	gxX1+1,x
.c969	a969	7e 81 06	ror $0681,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0715						gxRadius:
>0715								.fill 	1
.0716						gxxCentre:
>0716								.fill 	1
.0717						gxYCentre:
>0717								.fill 	1
.0718						gxIsFillMode:
>0718								.fill 	1
.0719						gxYChanged:
>0719								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 89 06	lda $0689			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 87 06	adc $0687			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 87 06	cmp $0687			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 85 06	stz $0685			stz 	gxSpritesOn
.c9c6	a9c6	9c 86 06	stz $0686			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 75 06	stz $0675,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 86 06	sta $0686			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 87 06	sta $0687			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 89 06	stx $0689			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 85 06	sta $0685			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 88 06	sta $0688			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	gxzTemp0
.ca43	aa43	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	gxzTemp0+1
.ca48	aa48	8d 94 06	sta $0694			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 92 06	stz $0692			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d5 06	stz $06d5,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 86 06	lda $0686			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8f 06	ldy $068f			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8d 06	and $068d			and 	gxANDValue
.ca93	aa93	4d 8c 06	eor $068c			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7d 06	lda $067d			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 81 06	eor $0681			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7e 06	lda $067e			lda 	gxX0+1
.cab9	aab9	4d 82 06	eor $0682			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 83 06	lda $0683			lda 	gxY1
.cac0	aac0	4d 7f 06	eor $067f			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1e 07	lda $071e			lda 	gxPosition
.cac8	aac8	6d 1f 07	adc $071f			adc 	gxAdjust
.cacb	aacb	8d 1e 07	sta $071e			sta 	gxPosition
.cace	aace	9c 21 07	stz $0721			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 20 07	cmp $0720			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 21 07	dec $0721			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 20 07	sbc $0720			sbc 	gxTotal
.cadf	aadf	8d 1e 07	sta $071e			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 21 07	lda $0721			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 21 07	lda $0721			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1d 07	lda $071d			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7d 06	lda $067d			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7e 06	dec $067e			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7d 06	dec $067d			dec 	gxX0
.cb10	ab10	ce 8f 06	dec $068f			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8f 06	lda $068f			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7d 06	inc $067d			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7e 06	inc $067e			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8f 06	inc $068f			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7f 06	inc $067f			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 83 06	lda $0683			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7f 06	sbc $067f			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 1b 07	sta $071b			sta 	gxDiffY
.cb58	ab58	9c 1d 07	stz $071d			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 81 06	lda $0681			lda 	gxX1
.cb5f	ab5f	ed 7d 06	sbc $067d			sbc 	gxX0
.cb62	ab62	8d 1a 07	sta $071a			sta 	gxDiffX
.cb65	ab65	ad 82 06	lda $0682			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 1a 07	ror $071a			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 1a 07	sbc $071a			sbc 	gxDiffX
.cb78	ab78	8d 1a 07	sta $071a			sta 	gxDiffX
.cb7b	ab7b	ce 1d 07	dec $071d			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 1c 07	stz $071c			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 1b 07	lda $071b			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1f 07	sta $071f			sta 	gxAdjust
.cb87	ab87	ad 1a 07	lda $071a			lda 	gxDiffX
.cb8a	ab8a	8d 20 07	sta $0720			sta 	gxTotal
.cb8d	ab8d	ad 1b 07	lda $071b			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 1a 07	cmp $071a			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 1c 07	dec $071c			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 1a 07	lda $071a			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1f 07	sta $071f			sta 	gxAdjust
.cb9e	ab9e	ad 1b 07	lda $071b			lda 	gxDiffY
.cba1	aba1	8d 20 07	sta $0720			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 20 07	lda $0720			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1e 07	sta $071e			sta 	gxPosition
.cbab	abab	60		rts				rts
.071a						gxDiffX:
>071a								.fill 	1
.071b						gxDiffY:
>071b								.fill 	1
.071c						gxIsDiffYLarger:
>071c								.fill 	1
.071d						gxDXNegative:
>071d								.fill 	1
.071e						gxPosition:
>071e								.fill 	1
.071f						gxAdjust:
>071f								.fill 	1
.0720						gxTotal:
>0720								.fill 	1
.0721						gxAddSelect:
>0721								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 8b 06	stx $068b			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 8a 06	sta $068a			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8d 06	stz $068d			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 8b 06	ldx $068b			ldx 	gxColour
.cbbe	abbe	8e 8c 06	stx $068c			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8d 06	stx $068d			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 8c 06	stz $068c			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8d 06	lda $068d			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8d 06	sta $068d			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8f 06	ldy $068f			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8d 06	and $068d			and 	gxANDValue
.cbe8	abe8	4d 8c 06	eor $068c			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 86 06	lda $0686			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7f 06	lda $067f			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 83 06	cmp $0683			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7f 06	inc $067f			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7f 06	lda $067f			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 83 06	cmp $0683			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 81 06	lda $0681			lda		gxX1
.cc37	ac37	ed 7d 06	sbc $067d			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 82 06	lda $0682			lda 	gxX1+1
.cc3f	ac3f	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8f 06	lda $068f			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8d 06	and $068d			and 	gxANDValue
.cc5c	ac5c	4d 8c 06	eor $068c			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8d 06	and $068d			and 	gxANDValue
.cc7a	ac7a	4d 8c 06	eor $068c			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8d 06	and $068d			and 	gxANDValue
.cc92	ac92	4d 8c 06	eor $068c			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8f 06	sta $068f			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 22 07	sta $0722			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 23 07	sta $0723			sta 	gxMask 						; and mask
.ccb9	acb9	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7f 06	lda $067f			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 25 07	sty $0725			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 24 07	stx $0724			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 27 07	lda $0727			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 26 07	sta $0726			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 27 07	bit $0727			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 23 07	lda $0723			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 26 07	lda $0726			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7f 06	lda $067f			lda 	gxY0 						; off screen
.ccf2	acf2	cd 89 06	cmp $0689			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 22 07	cmp $0722			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7f 06	sta $067f			sta 	gxY0
.cd0b	ad0b	ae 26 07	ldx $0726			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 22 07	lda $0722			lda 	gxSize
.cd12	ad12	6d 7d 06	adc $067d			adc 	gxX0
.cd15	ad15	8d 7d 06	sta $067d			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7e 06	inc $067e			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 24 07	jmp ($0724)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 26 07	lda $0726			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 8a 06	bit $068a			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 23 07	lda $0723			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 27 07	lda $0727			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8d 06	and $068d			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 22 07	cmp $0722			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7f 06	inc $067f			inc 	gxY0
.cd73	ad73	60		rts				rts
.0722						gxSize:
>0722								.fill 	1
.0723						gxMask:
>0723								.fill 	1
.0724						gxAcquireVector:
>0724								.fill 	2
.0726						gxScale:
>0726								.fill 	1
.0727						gxUseMode:
>0727								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 8a 06	eor $068a			eor 	gxMode
.cd79	ad79	8d 27 07	sta $0727			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 8b 06	lda $068b			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 85 06	lda $0685			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 8a 06	eor $068a			eor 	gxMode
.cdc6	adc6	8d 27 07	sta $0727			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 28 07	lda $0728			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 88 06	lda $0688			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 29 07	ldx $0729			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	gxzTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 2b 07	adc $072b			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 2c 07	adc $072c			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 28 07	cpy $0728			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 90 06	sta $0690			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 92 06	sta $0692			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 2b 07	lda $072b			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 2c 07	lda $072c			lda 	gxSpriteOffset+1
.ce87	ae87	6d 93 06	adc $0693			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 94 06	lda $0694			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 29 07	lda $0729			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 2a 07	ora $072a			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 29 07	lda $0729			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d5 06	ora $06d5,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 85 06	lda $0685			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7d 06	adc $067d			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7e 06	lda $067e			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7f 06	adc $067f			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7e 06	lsr $067e			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7d 06	ror $067d			ror 	gxX0
.cf32	af32	4e 7d 06	lsr $067d			lsr 	gxX0
.cf35	af35	4e 7f 06	lsr $067f			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7f 06	lsr $067f			lsr 	gxY0
.cf3b	af3b	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7d 06	ora $067d			ora 	gxX0
.cf46	af46	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cf49	af49	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7f 06	ora $067f			ora 	gxY0
.cf51	af51	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8e 06	sta $068e			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8e 06	lda $068e			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7f 06	lda $067f			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7d 06	lda $067d			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8f 06	sta $068f			sta 	gxOffset
.cfa3	afa3	ad 7e 06	lda $067e			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 87 06	adc $0687			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8f 06	lda $068f			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8f 06	sta $068f			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 95 06	ora $0695,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d5 06	adc $06d5,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y
.d023	b023	fd 95 06	sbc $0695,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 88 06	lda $0688			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 2c 07	sta $072c			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 29 07	sta $0729			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 28 07	sta $0728			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 2a 07	sta $072a			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 2b 07	sta $072b			sta 	gxSpriteOffset
.d070	b070	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d073	b073	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d076	b076	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d079	b079	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0728						gxSizePixels:
>0728								.fill 	1
.0729						gxSizeBits:
>0729								.fill 	1
.072a						gxSpriteLUT:
>072a								.fill 	1
.072b						gxSpriteOffset:
>072b								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7d 06	lda $067d			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 81 06	cmp $0681			cmp 	gxX1
.d08d	b08d	ad 7e 06	lda $067e			lda 	gxX0+1
.d090	b090	ed 82 06	sbc $0682			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7f 06	lda $067f			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 83 06	cmp $0683			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7d 06	lda $067d,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7d 06	lda $067d,y			lda 	gxX0,y
.d0bd	b0bd	9d 7d 06	sta $067d,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7d 06	sta $067d,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d246	b246	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d24c	b24c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d251	b251	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d259	b259	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d25f	b25f	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d265	b265	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d26a	b26a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d271	b271	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d277	b277	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d27d	b27d	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d284	b284	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d28b	b28b	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d290	b290	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d296	b296	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d29d	b29d	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2a2	b2a2	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2a6	b2a6	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2ae	b2ae	45
>d2af	b2af	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2b7	b2b7	45
>d2b8	b2b8	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2be	b2be	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2c4	b2c4	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2cb	b2cb	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2d2	b2d2	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2d9	b2d9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2e0	b2e0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2e6	b2e6	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2ec	b2ec	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2f1	b2f1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d2f9	b2f9	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d300	b300	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d307	b307	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d30f	b30f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d315	b315	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d319	b319	ff					.text	$FF
.d31a	b31a					KeywordSet1:
>d31a	b31a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d31c	b31c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d31e	b31e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d320	b320	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d328	b328	4c 45
>d32a	b32a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d332	b332	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d33a	b33a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d341	b341	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d348	b348	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d34d	b34d	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d354	b354	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d359	b359	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d361	b361	45
>d362	b362	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d366	b366	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d36d	b36d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d373	b373	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d379	b379	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d37e	b37e	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d384	b384	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d38c	b38c	45
>d38d	b38d	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d392	b392	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d398	b398	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3a0	b3a0	45
>d3a1	b3a1	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3a9	b3a9	45
>d3aa	b3aa	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3b1	b3b1	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3b9	b3b9	53
>d3ba	b3ba	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3c0	b3c0	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3c8	b3c8	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3cd	b3cd	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3d4	b3d4	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3d9	b3d9	ff					.text	$FF
.d3da	b3da					KeywordSet2:
>d3da	b3da	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3dc	b3dc	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3de	b3de	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3e0	b3e0	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3e5	b3e5	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3ea	b3ea	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3ef	b3ef	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3f4	b3f4	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3f9	b3f9	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3fe	b3fe	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d403	b403	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d408	b408	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d40d	b40d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d412	b412	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d417	b417	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d41c	b41c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d421	b421	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d426	b426	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d42b	b42b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d430	b430	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d435	b435	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d43a	b43a	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d43f	b43f	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d444	b444	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d449	b449	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d44e	b44e	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d453	b453	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d458	b458	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d45d	b45d	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d462	b462	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d467	b467	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d46c	b46c	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d471	b471	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d476	b476	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d47b	b47b	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d480	b480	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d485	b485	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d48a	b48a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d48f	b48f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d494	b494	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d499	b499	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d49e	b49e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4a3	b4a3	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4a8	b4a8	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4ad	b4ad	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4b2	b4b2	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4b7	b4b7	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4bc	b4bc	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4c1	b4c1	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4c6	b4c6	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4cb	b4cb	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4d0	b4d0	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4d5	b4d5	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4da	b4da	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4df	b4df	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4e4	b4e4	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4e9	b4e9	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4ee	b4ee	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4f3	b4f3	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4f8	b4f8	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4fd	b4fd	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d502	b502	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d507	b507	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d50c	b50c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d511	b511	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d516	b516	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d51b	b51b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d520	b520	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d525	b525	ff					.text	$FF
.d526	b526					Export_TKListConvertLine:
.d526	b526	48		pha				pha 								; save indent on the stack
.d527	b527	9c 1d 04	stz $041d			stz 	tbOffset
.d52a	b52a	9c 2d 04	stz $042d			stz 	tokenBuffer
.d52d	b52d	9c 29 04	stz $0429			stz 	currentListColour
.d530	b530	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d532	b532	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d535	b535	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d537	b537	b1 30		lda ($30),y			lda 	(codePtr),y
.d539	b539	aa		tax				tax
.d53a	b53a	88		dey				dey
.d53b	b53b	b1 30		lda ($30),y			lda 	(codePtr),y
.d53d	b53d	20 20 b7	jsr $b720			jsr 	LCLWriteNumberXA
.d540	b540	68		pla				pla 								; adjustment to indent
.d541	b541	48		pha				pha 								; save on stack
.d542	b542	10 0c		bpl $b550			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d544	b544	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d545	b545	6d 26 04	adc $0426			adc 	listIndent
.d548	b548	8d 26 04	sta $0426			sta 	listIndent
.d54b	b54b	10 03		bpl $b550			bpl 	_LCNoAdjust
.d54d	b54d	9c 26 04	stz $0426			stz 	listIndent
.d550	b550					_LCNoAdjust:
.d550	b550	18		clc				clc		 							; work out actual indent.
.d551	b551	ad 26 04	lda $0426			lda 	listIndent
.d554	b554	0a		asl a				asl 	a
.d555	b555	69 07		adc #$07			adc 	#7
.d557	b557	85 36		sta $36				sta 	zTemp0
.d559	b559					_LCPadOut:
.d559	b559	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d55b	b55b	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d55e	b55e	ad 1d 04	lda $041d			lda 	tbOffset
.d561	b561	c5 36		cmp $36				cmp 	zTemp0
.d563	b563	d0 f4		bne $b559			bne 	_LCPadOut
.d565	b565	a0 03		ldy #$03			ldy 	#3 							; start position.
.d567	b567					_LCMainLoop:
.d567	b567	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d569	b569	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d56c	b56c	b1 30		lda ($30),y			lda 	(codePtr),y
.d56e	b56e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d570	b570	f0 17		beq $b589			beq 	_LCExit
.d572	b572	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d574	b574	90 1e		bcc $b594			bcc 	_LCDoubles
.d576	b576	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d578	b578	90 2a		bcc $b5a4			bcc 	_LCShiftPunc
.d57a	b57a	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d57c	b57c	90 35		bcc $b5b3			bcc 	_LCPunctuation
.d57e	b57e	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d580	b580	90 51		bcc $b5d3			bcc 	_LCIdentifiers
.d582	b582	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d584	b584	90 73		bcc $b5f9			bcc 	_LCTokens
.d586	b586	4c 59 b6	jmp $b659			jmp 	_LCData 					; 254-5 are data objects
.d589	b589					_LCExit:
.d589	b589	68		pla				pla 								; get old indent adjust
.d58a	b58a	30 07		bmi $b593			bmi 	_LCExit2
.d58c	b58c	18		clc				clc 								; add to indent if +ve
.d58d	b58d	6d 26 04	adc $0426			adc 	listIndent
.d590	b590	8d 26 04	sta $0426			sta 	listIndent
.d593	b593					_LCExit2:
.d593	b593	60		rts				rts
.d594	b594					_LCDoubles:
.d594	b594	48		pha				pha
.d595	b595	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d596	b596	29 02		and #$02			and 	#2
.d598	b598	09 3c		ora #$3c			ora 	#60 						; make < >
.d59a	b59a	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d59d	b59d	68		pla				pla 								; restore, do lower bit
.d59e	b59e	29 03		and #$03			and 	#3
.d5a0	b5a0	09 3c		ora #$3c			ora 	#60
.d5a2	b5a2	80 0f		bra $b5b3			bra		_LCPunctuation 				; print, increment, loop
.d5a4	b5a4					_LCShiftPunc:
.d5a4	b5a4	aa		tax				tax 								; save in X
.d5a5	b5a5	29 07		and #$07			and 	#7 							; lower 3 bits
.d5a7	b5a7	f0 02		beq $b5ab			beq 	_LCNoAdd
.d5a9	b5a9	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5ab	b5ab					_LCNoAdd:
.d5ab	b5ab	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5ad	b5ad	90 02		bcc $b5b1			bcc 	_LCNoAdd2
.d5af	b5af	09 20		ora #$20			ora 	#32 						; adds $20
.d5b1	b5b1					_LCNoAdd2:
.d5b1	b5b1	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5b3	b5b3					_LCPunctuation:
.d5b3	b5b3	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5b5	b5b5	d0 03		bne $b5ba			bne 	_LCPContinue
.d5b7	b5b7	20 ce b6	jsr $b6ce			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5ba	b5ba					_LCPContinue:
.d5ba	b5ba	c9 2e		cmp #$2e			cmp 	#'.'
.d5bc	b5bc	f0 08		beq $b5c6			beq 	_LCPIsConstant
.d5be	b5be	c9 30		cmp #$30			cmp 	#'0'
.d5c0	b5c0	90 0b		bcc $b5cd			bcc 	_LCPNotConstant
.d5c2	b5c2	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5c4	b5c4	b0 07		bcs $b5cd			bcs 	_LCPNotConstant
.d5c6	b5c6					_LCPIsConstant:
.d5c6	b5c6	48		pha				pha
.d5c7	b5c7	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5c9	b5c9	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d5cc	b5cc	68		pla				pla
.d5cd	b5cd					_LCPNotConstant:
.d5cd	b5cd	c8		iny				iny 								; consume character
.d5ce	b5ce	20 b8 b6	jsr $b6b8			jsr 	LCLWrite 					; write it out.
.d5d1	b5d1	80 94		bra $b567			bra 	_LCMainLoop 				; go round again.
.d5d3	b5d3					_LCIdentifiers:
.d5d3	b5d3	18		clc				clc 								; convert to physical address
.d5d4	b5d4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5d6	b5d6	85 37		sta $37				sta 	zTemp0+1
.d5d8	b5d8	c8		iny				iny
.d5d9	b5d9	b1 30		lda ($30),y			lda 	(codePtr),y
.d5db	b5db	85 36		sta $36				sta 	zTemp0
.d5dd	b5dd	c8		iny				iny
.d5de	b5de	5a		phy				phy 								; save position
.d5df	b5df	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5e1	b5e1	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d5e4	b5e4	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5e6	b5e6					_LCOutIdentifier:
.d5e6	b5e6	c8		iny				iny
.d5e7	b5e7	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5e9	b5e9	29 7f		and #$7f			and 	#$7F
.d5eb	b5eb	20 0a b7	jsr $b70a			jsr 	LCLLowerCase
.d5ee	b5ee	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d5f1	b5f1	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5f3	b5f3	10 f1		bpl $b5e6			bpl 	_LCOutIdentifier
.d5f5	b5f5	7a		ply				ply 								; restore position
.d5f6	b5f6	4c 67 b5	jmp $b567			jmp 	_LCMainLoop
.d5f9	b5f9					_LCTokens:
.d5f9	b5f9	aa		tax				tax 								; token in X
.d5fa	b5fa	a9 da		lda #$da			lda 	#((KeywordSet2) & $FF)
.d5fc	b5fc	85 36		sta $36				sta 	0+zTemp0
.d5fe	b5fe	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d600	b600	85 37		sta $37				sta 	1+zTemp0
.d602	b602	e0 82		cpx #$82			cpx 	#$82
.d604	b604	f0 16		beq $b61c			beq 	_LCUseShift
.d606	b606	a9 1a		lda #$1a			lda 	#((KeywordSet1) & $FF)
.d608	b608	85 36		sta $36				sta 	0+zTemp0
.d60a	b60a	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d60c	b60c	85 37		sta $37				sta 	1+zTemp0
.d60e	b60e	e0 81		cpx #$81			cpx 	#$81
.d610	b610	f0 0a		beq $b61c			beq 	_LCUseShift
.d612	b612	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d614	b614	85 36		sta $36				sta 	0+zTemp0
.d616	b616	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d618	b618	85 37		sta $37				sta 	1+zTemp0
.d61a	b61a	80 01		bra $b61d			bra 	_LCNoShift
.d61c	b61c					_LCUseShift:
.d61c	b61c	c8		iny				iny
.d61d	b61d					_LCNoShift:
.d61d	b61d	20 e2 b6	jsr $b6e2			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d620	b620	b1 30		lda ($30),y			lda 	(codePtr),y
.d622	b622	aa		tax				tax 								; into X
.d623	b623					_LCFindText:
.d623	b623	ca		dex				dex
.d624	b624	10 0e		bpl $b634			bpl 	_LCFoundText 				; found text.
.d626	b626	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d628	b628	1a		inc a				inc 	a 							; one extra for size
.d629	b629	38		sec				sec 								; one extra for checksum
.d62a	b62a	65 36		adc $36				adc 	zTemp0 						; go to next token
.d62c	b62c	85 36		sta $36				sta 	zTemp0
.d62e	b62e	90 f3		bcc $b623			bcc 	_LCFindText
.d630	b630	e6 37		inc $37				inc 	zTemp0+1
.d632	b632	80 ef		bra $b623			bra 	_LCFindText
.d634	b634					_LCFoundText:
.d634	b634	5a		phy				phy 								; save List position
.d635	b635	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d637	b637	aa		tax				tax
.d638	b638	a9 86		lda #$86			lda 	#CLIToken+$80
.d63a	b63a	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d63d	b63d	a0 02		ldy #$02			ldy 	#2
.d63f	b63f					_LCCopyToken:
.d63f	b63f	b1 36		lda ($36),y			lda 	(zTemp0),y
.d641	b641	20 0a b7	jsr $b70a			jsr 	LCLLowerCase
.d644	b644	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d647	b647	c8		iny				iny
.d648	b648	ca		dex				dex
.d649	b649	d0 f4		bne $b63f			bne 	_LCCopyToken
.d64b	b64b	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d64d	b64d	f0 05		beq $b654			beq 	_LCNoSpace
.d64f	b64f	a9 20		lda #$20			lda 	#' '
.d651	b651	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d654	b654					_LCNoSpace:
.d654	b654	7a		ply				ply 								; restore position.
.d655	b655	c8		iny				iny 								; consume token
.d656	b656	4c 67 b5	jmp $b567			jmp 	_LCMainLoop 				; and go around again.
.d659	b659					_LCData:
.d659	b659	48		pha				pha 								; save type $FE/$FF
.d65a	b65a	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d65c	b65c	c9 fe		cmp #$fe			cmp 	#$FE
.d65e	b65e	f0 22		beq $b682			beq 	_LCHaveOpener
.d660	b660	a2 22		ldx #$22			ldx 	#'"'
.d662	b662	a9 8f		lda #$8f			lda 	#CLIData+$80
.d664	b664	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d667	b667	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d669	b669	d0 17		bne $b682			bne 	_LCHaveOpener
.d66b	b66b	88		dey				dey 								; what precedes it ?
.d66c	b66c	b1 30		lda ($30),y			lda 	(codePtr),y
.d66e	b66e	c8		iny				iny
.d66f	b66f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d671	b671	d0 0f		bne $b682			bne 	_LCHaveOpener
.d673	b673	a9 09		lda #$09			lda 	#9 							; tab
.d675	b675	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d678	b678	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d67a	b67a	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d67d	b67d	a9 85		lda #$85			lda 	#CLIFComment+$80
.d67f	b67f	20 af b6	jsr $b6af			jsr 	LCLWriteColour
.d682	b682					_LCHaveOpener:
.d682	b682	8a		txa				txa 								; output prefix (# or ")
.d683	b683	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d686	b686	c8		iny				iny 								; get count
.d687	b687	b1 30		lda ($30),y			lda 	(codePtr),y
.d689	b689	aa		tax				tax
.d68a	b68a	c8		iny				iny 								; point at first character
.d68b	b68b					_LCOutData:
.d68b	b68b	b1 30		lda ($30),y			lda 	(codePtr),y
.d68d	b68d	c9 00		cmp #$00			cmp 	#0
.d68f	b68f	f0 03		beq $b694			beq 	_LCNoPrint
.d691	b691	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d694	b694					_LCNoPrint:
.d694	b694	c8		iny				iny
.d695	b695	ca		dex				dex
.d696	b696	d0 f3		bne $b68b			bne 	_LCOutData
.d698	b698	68		pla				pla 								; closing " required ?
.d699	b699	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d69b	b69b	d0 0f		bne $b6ac			bne 	_LCNoQuote
.d69d	b69d	a9 22		lda #$22			lda 	#'"'
.d69f	b69f	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d6a2	b6a2	ad 72 06	lda $0672			lda 	EXTTextColour
.d6a5	b6a5	29 0f		and #$0f			and 	#$0F
.d6a7	b6a7	09 90		ora #$90			ora 	#$90
.d6a9	b6a9	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d6ac	b6ac					_LCNoQuote:
.d6ac	b6ac	4c 67 b5	jmp $b567			jmp 	_LCMainLoop
.d6af	b6af					LCLWriteColour:
.d6af	b6af	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6b2	b6b2	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6b5	b6b5	d0 01		bne $b6b8			bne 	LCLWrite 					; if different, output it
.d6b7	b6b7	60		rts				rts
.d6b8	b6b8					LCLWrite:
.d6b8	b6b8	da		phx				phx
.d6b9	b6b9	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6bc	b6bc	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6bf	b6bf	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6c2	b6c2	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6c5	b6c5	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6c7	b6c7	30 03		bmi $b6cc			bmi 	_LCLNoColour
.d6c9	b6c9	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6cc	b6cc					_LCLNoColour:
.d6cc	b6cc	fa		plx				plx
.d6cd	b6cd	60		rts				rts
.d6ce	b6ce					LCLDeleteLastSpace:
.d6ce	b6ce	48		pha				pha
.d6cf	b6cf	da		phx				phx
.d6d0	b6d0	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6d3	b6d3	f0 0a		beq $b6df			beq 	_LCDLSExit
.d6d5	b6d5	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6d8	b6d8	c9 20		cmp #$20			cmp 	#' '
.d6da	b6da	d0 03		bne $b6df			bne 	_LCDLSExit
.d6dc	b6dc	ce 1d 04	dec $041d			dec 	tbOffset
.d6df	b6df					_LCDLSExit:
.d6df	b6df	fa		plx				plx
.d6e0	b6e0	68		pla				pla
.d6e1	b6e1	60		rts				rts
.d6e2	b6e2					LCLCheckSpaceRequired:
.d6e2	b6e2	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6e5	b6e5	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6e7	b6e7	f0 1b		beq $b704			beq 	_LCCSRSpace
.d6e9	b6e9	c9 29		cmp #$29			cmp 	#')'
.d6eb	b6eb	f0 17		beq $b704			beq 	_LCCSRSpace
.d6ed	b6ed	c9 23		cmp #$23			cmp 	#'#'
.d6ef	b6ef	f0 13		beq $b704			beq 	_LCCSRSpace
.d6f1	b6f1	20 0a b7	jsr $b70a			jsr 	LCLLowerCase 				; saves a little effort
.d6f4	b6f4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6f6	b6f6	90 11		bcc $b709			bcc 	_LCCSRExit
.d6f8	b6f8	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6fa	b6fa	90 08		bcc $b704			bcc 	_LCCSRSpace
.d6fc	b6fc	c9 61		cmp #$61			cmp 	#"a"
.d6fe	b6fe	90 09		bcc $b709			bcc 	_LCCSRExit
.d700	b700	c9 7b		cmp #$7b			cmp 	#"z"+1
.d702	b702	b0 05		bcs $b709			bcs 	_LCCSRExit
.d704	b704					_LCCSRSpace:
.d704	b704	a9 20		lda #$20			lda 	#' '
.d706	b706	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d709	b709					_LCCSRExit:
.d709	b709	60		rts				rts
.d70a	b70a					LCLLowerCase:
.d70a	b70a	c9 41		cmp #$41			cmp 	#"A"
.d70c	b70c	90 06		bcc $b714			bcc 	_LCLLCOut
.d70e	b70e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d710	b710	b0 02		bcs $b714			bcs 	_LCLLCOut
.d712	b712	69 20		adc #$20			adc 	#$20
.d714	b714					_LCLLCOut:
.d714	b714	60		rts				rts
.d715	b715					LCLUpperCase:
.d715	b715	c9 61		cmp #$61			cmp 	#"a"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLUCOut
.d719	b719	c9 7b		cmp #$7b			cmp 	#"z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLUCOut
.d71d	b71d	e9 1f		sbc #$1f			sbc 	#$1F
.d71f	b71f					_LCLUCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLWriteNumberXA:
.d720	b720	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d722	b722					_LCLWNLoop1:
.d722	b722	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d724	b724					_LCLWNLoop2:
.d724	b724	48		pha				pha 								; save initial LSB
.d725	b725	38		sec				sec
.d726	b726	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d728	b728	f9 59 b7	sbc $b759,y			sbc 	_LCLWNTable,y
.d72b	b72b	48		pha				pha
.d72c	b72c	8a		txa				txa
.d72d	b72d	f9 5a b7	sbc $b75a,y			sbc 	_LCLWNTable+1,y
.d730	b730	90 07		bcc $b739			bcc 	_LCLWNUnderflow
.d732	b732	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d734	b734	aa		tax				tax 								; update X
.d735	b735	68		pla				pla 								; restore A
.d736	b736	7a		ply				ply 								; throw original
.d737	b737	80 eb		bra $b724			bra 	_LCLWNLoop2 				; try again.
.d739	b739					_LCLWNUnderflow:
.d739	b739	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d73b	b73b	d0 06		bne $b743			bne 	_LCLWNOut
.d73d	b73d	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d740	b740	3a		dec a				dec 	a
.d741	b741	f0 04		beq $b747			beq 	_LCLWNNext
.d743	b743					_LCLWNOut:
.d743	b743	98		tya				tya
.d744	b744	20 53 b7	jsr $b753			jsr 	_LCLWNOutDigit
.d747	b747					_LCLWNNext:
.d747	b747	7a		ply				ply 							 	; restore original value.
.d748	b748	68		pla				pla
.d749	b749	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d74b	b74b	c8		iny				iny
.d74c	b74c	c8		iny				iny
.d74d	b74d	84 37		sty $37				sty 	zTemp0+1
.d74f	b74f	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d751	b751	d0 cf		bne $b722			bne 	_LCLWNLoop1
.d753	b753					_LCLWNOutDigit:
.d753	b753	09 30		ora #$30			ora 	#'0'
.d755	b755	20 b8 b6	jsr $b6b8			jsr 	LCLWrite
.d758	b758	60		rts				rts
.d759	b759					_LCLWNTable:
>d759	b759	10 27						.word 	10000
>d75b	b75b	e8 03						.word 	1000
>d75d	b75d	64 00						.word 	100
>d75f	b75f	0a 00						.word 	10
.d761	b761					TOKSearchTable:
.d761	b761	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d763	b763	85 36		sta $36				sta 	zTemp0
.d765	b765	a0 00		ldy #$00			ldy 	#0
.d767	b767	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d769	b769	85 38		sta $38				sta 	zTemp1
.d76b	b76b					_TSTLoop:
.d76b	b76b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d76d	b76d	30 49		bmi $b7b8			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d76f	b76f	f0 2e		beq $b79f			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d771	b771	c8		iny				iny 								; get the hash
.d772	b772	b1 36		lda ($36),y			lda 	(zTemp0),y
.d774	b774	88		dey				dey
.d775	b775	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d778	b778	d0 25		bne $b79f			bne 	_TSTNext
.d77a	b77a	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d77d	b77d	38		sec				sec
.d77e	b77e	ed 00 04	sbc $0400			sbc 	identStart
.d781	b781	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d783	b783	d0 1a		bne $b79f			bne 	_TSTNext
.d785	b785	5a		phy				phy 								; save Y , we might fail to match.
.d786	b786	c8		iny				iny 								; point to text
.d787	b787	c8		iny				iny
.d788	b788	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d78b	b78b					_TSTCompareName:
.d78b	b78b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d78e	b78e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d790	b790	d0 0c		bne $b79e			bne 	_TSTNextPullY 				; fail, pullY and do next
.d792	b792	e8		inx				inx
.d793	b793	c8		iny				iny
.d794	b794	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d797	b797	d0 f2		bne $b78b			bne 	_TSTCompareName
.d799	b799	7a		ply				ply 								; throw Y
.d79a	b79a	a5 38		lda $38				lda 	zTemp1 						; get token #
.d79c	b79c	38		sec				sec 								; return with CS = passed.
.d79d	b79d	60		rts				rts
.d79e	b79e					_TSTNextPullY:
.d79e	b79e	7a		ply				ply 								; restore current, fall through.
.d79f	b79f					_TSTNext:
.d79f	b79f	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7a1	b7a1	98		tya				tya
.d7a2	b7a2	18		clc				clc
.d7a3	b7a3	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7a5	b7a5	1a		inc a				inc 	a 							; +1
.d7a6	b7a6	1a		inc a				inc 	a 							; +2
.d7a7	b7a7	a8		tay				tay
.d7a8	b7a8	10 c1		bpl $b76b			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7aa	b7aa	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7ab	b7ab	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7ad	b7ad	18		clc				clc  								; but have tables > 255 bytes
.d7ae	b7ae	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7b0	b7b0	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7b2	b7b2	90 b7		bcc $b76b			bcc 	_TSTLoop
.d7b4	b7b4	e6 37		inc $37				inc 	zTemp0+1
.d7b6	b7b6	80 b3		bra $b76b			bra 	_TSTLoop
.d7b8	b7b8					_TSTFail:
.d7b8	b7b8	18		clc				clc
.d7b9	b7b9	60		rts				rts
.d7ba	b7ba					Export_TKTokeniseLine:
.d7ba	b7ba	20 87 b9	jsr $b987			jsr 	LCLFixLineBufferCase 		; fix line case
.d7bd	b7bd	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7bf	b7bf	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7c2	b7c2	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7c5	b7c5	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7c8	b7c8	a2 ff		ldx #$ff			ldx 	#$FF
.d7ca	b7ca					_TKFindFirst:
.d7ca	b7ca	e8		inx				inx
.d7cb	b7cb	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7ce	b7ce	f0 62		beq $b832			beq 	_TKExit
.d7d0	b7d0	c9 20		cmp #$20			cmp 	#' '
.d7d2	b7d2	90 f6		bcc $b7ca			bcc 	_TKFindFirst
.d7d4	b7d4	c9 30		cmp #$30			cmp 	#'0'
.d7d6	b7d6	90 07		bcc $b7df			bcc 	_TKNoLineNumber
.d7d8	b7d8	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7da	b7da	b0 03		bcs $b7df			bcs 	_TKNoLineNumber
.d7dc	b7dc	20 b1 b9	jsr $b9b1			jsr 	TOKExtractLineNumber
.d7df	b7df					_TKNoLineNumber:
.d7df	b7df					_TKTokeniseLoop:
.d7df	b7df	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7e2	b7e2	f0 4e		beq $b832			beq 	_TKExit
.d7e4	b7e4	e8		inx				inx
.d7e5	b7e5	c9 20		cmp #$20			cmp 	#' '
.d7e7	b7e7	f0 f6		beq $b7df			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7e9	b7e9	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7ea	b7ea	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7ec	b7ec	f0 68		beq $b856			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7ee	b7ee	c9 41		cmp #$41			cmp 	#'A'
.d7f0	b7f0	90 04		bcc $b7f6			bcc 	_TKTokenisePunctuation
.d7f2	b7f2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7f4	b7f4	90 60		bcc $b856			bcc 	_TKTokeniseIdentifier
.d7f6	b7f6					_TKTokenisePunctuation:
.d7f6	b7f6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7f8	b7f8	f0 2e		beq $b828			beq 	_TKString
.d7fa	b7fa	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7fc	b7fc	f0 2f		beq $b82d			beq 	_TKHexConstant
.d7fe	b7fe	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d800	b800	f0 36		beq $b838			beq 	_TKCheckDouble
.d802	b802	c9 3e		cmp #$3e			cmp 	#'>'
.d804	b804	f0 32		beq $b838			beq 	_TKCheckDouble
.d806	b806					_TKStandardPunctuation:
.d806	b806	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d809	b809	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d80b	b80b	90 0e		bcc $b81b			bcc 	_TKNoShift
.d80d	b80d	48		pha				pha 								; save. we are about to convert this punctuation token from
.d80e	b80e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d810	b810	85 36		sta $36				sta 	zTemp0
.d812	b812	68		pla				pla
.d813	b813	29 20		and #$20			and 	#32 						; bit 5
.d815	b815	4a		lsr a				lsr 	a 							; shift into bit 3
.d816	b816	4a		lsr a				lsr 	a
.d817	b817	05 36		ora $36				ora 	zTemp0
.d819	b819	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d81b	b81b					_TKNoShift:
.d81b	b81b	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte 				; write the punctuation character
.d81e	b81e	e8		inx				inx 								; consume the character
.d81f	b81f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d821	b821	d0 bc		bne $b7df			bne 	_TKTokeniseLoop 			; and loop round again.
.d823	b823	20 e9 b8	jsr $b8e9			jsr 	TOKCheckComment 			; comment checl
.d826	b826	80 b7		bra $b7df			bra 	_TKTokeniseLoop
.d828	b828					_TKString:
.d828	b828	20 16 b9	jsr $b916			jsr 	TOKTokenString
.d82b	b82b	80 b2		bra $b7df			bra 	_TKTokeniseLoop
.d82d	b82d					_TKHexConstant:
.d82d	b82d	20 51 b9	jsr $b951			jsr 	TOKHexConstant
.d830	b830	80 ad		bra $b7df			bra 	_TKTokeniseLoop
.d832	b832	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d834	b834	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d837	b837	60		rts				rts
.d838	b838					_TKCheckDouble:
.d838	b838	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d83b	b83b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d83d	b83d	90 c7		bcc $b806			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d83f	b83f	c9 3f		cmp #$3f			cmp 	#'>'+1
.d841	b841	b0 c3		bcs $b806			bcs 	_TKStandardPunctuation
.d843	b843	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d846	b846	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d848	b848	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d849	b849	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d84c	b84c	38		sec				sec
.d84d	b84d	e9 3c		sbc #$3c			sbc 	#'<'
.d84f	b84f	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte 				; this is in the range 0-7
.d852	b852	e8		inx				inx 								; consume both
.d853	b853	e8		inx				inx
.d854	b854	80 89		bra $b7df			bra 	_TKTokeniseLoop
.d856	b856					_TKTokeniseIdentifier:
.d856	b856	8e 00 04	stx $0400			stx 	identStart 					; save start
.d859	b859	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d85c	b85c					_TKCheckLoop:
.d85c	b85c	e8		inx				inx 								; look at next, we know first is identifier already.
.d85d	b85d	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d860	b860	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d862	b862	f0 f8		beq $b85c			beq 	_TKCheckLoop
.d864	b864	c9 30		cmp #$30			cmp	 	#"0"
.d866	b866	90 0c		bcc $b874			bcc 	_TKEndIdentifier
.d868	b868	c9 3a		cmp #$3a			cmp 	#"9"+1
.d86a	b86a	90 f0		bcc $b85c			bcc 	_TKCheckLoop
.d86c	b86c	c9 41		cmp #$41			cmp	 	#"A"
.d86e	b86e	90 04		bcc $b874			bcc 	_TKEndIdentifier
.d870	b870	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d872	b872	90 e8		bcc $b85c			bcc 	_TKCheckLoop
.d874	b874					_TKEndIdentifier:
.d874	b874	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d877	b877	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d879	b879	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d87b	b87b	f0 06		beq $b883			beq 	_TKHasTypeCharacter
.d87d	b87d	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d87f	b87f	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d881	b881	d0 07		bne $b88a			bne 	_TKNoTypeCharacter
.d883	b883					_TKHasTypeCharacter:
.d883	b883	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d886	b886	e8		inx				inx 								; consume the type character
.d887	b887	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d88a	b88a					_TKNoTypeCharacter:
.d88a	b88a	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d88c	b88c	d0 09		bne $b897			bne 	_TKNoArray
.d88e	b88e	e8		inx				inx 								; skip the (
.d88f	b88f	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d892	b892	09 04		ora #$04			ora 	#$04
.d894	b894	8d 04 04	sta $0404			sta 	identTypeByte
.d897	b897					_TKNoArray:
.d897	b897	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d89a	b89a	20 72 b9	jsr $b972			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d89d	b89d	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d89f	b89f	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d8a1	b8a1	20 61 b7	jsr $b761			jsr 	TOKSearchTable
.d8a4	b8a4	a2 00		ldx #$00			ldx 	#0
.d8a6	b8a6	b0 1f		bcs $b8c7			bcs 	_TKFoundToken
.d8a8	b8a8	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8aa	b8aa	a9 1a		lda #$1a			lda 	#(KeywordSet1) & $FF
.d8ac	b8ac	20 61 b7	jsr $b761			jsr 	TOKSearchTable
.d8af	b8af	a2 81		ldx #$81			ldx 	#$81
.d8b1	b8b1	b0 14		bcs $b8c7			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8b5	b8b5	a9 da		lda #$da			lda 	#(KeywordSet2) & $FF
.d8b7	b8b7	20 61 b7	jsr $b761			jsr 	TOKSearchTable
.d8ba	b8ba	a2 82		ldx #$82			ldx 	#$82
.d8bc	b8bc	b0 09		bcs $b8c7			bcs 	_TKFoundToken
.d8be	b8be	20 02 ba	jsr $ba02			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8c1	b8c1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8c4	b8c4	4c df b7	jmp $b7df			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c7	b8c7					_TKFoundToken:
.d8c7	b8c7	48		pha				pha 								; save token
.d8c8	b8c8	8a		txa				txa 								; shift in X, is there one ?
.d8c9	b8c9	f0 03		beq $b8ce			beq 	_TKNoTShift
.d8cb	b8cb	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte 				; if so, write it out
.d8ce	b8ce					_TKNoTShift:
.d8ce	b8ce	68		pla				pla 								; restore and write token
.d8cf	b8cf	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d8d2	b8d2	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8d4	b8d4	d0 0d		bne $b8e3			bne 	_TKNotRem 			 		; not shifted ?
.d8d6	b8d6	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8d8	b8d8	d0 09		bne $b8e3			bne 	_TKNotRem
.d8da	b8da	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8dd	b8dd	20 e9 b8	jsr $b8e9			jsr 	TOKCheckComment
.d8e0	b8e0	4c df b7	jmp $b7df			jmp 	_TKTokeniseLoop
.d8e3	b8e3					_TKNotRem:
.d8e3	b8e3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8e6	b8e6	4c df b7	jmp $b7df			jmp 	_TKTokeniseLoop 			; and go round again.
.d8e9	b8e9					TOKCheckComment:
.d8e9	b8e9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8ec	b8ec	e8		inx				inx
.d8ed	b8ed	c9 20		cmp #$20			cmp 	#' '
.d8ef	b8ef	f0 f8		beq $b8e9			beq 	TOKCheckComment
.d8f1	b8f1	ca		dex				dex 								; first non space character
.d8f2	b8f2	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8f4	b8f4	f0 1f		beq $b915			beq 	_TOKCCExit 					; then we are okay
.d8f6	b8f6	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8f8	b8f8	f0 1b		beq $b915			beq 	_TOKCCExit 					; then we are okay
.d8fa	b8fa	da		phx				phx
.d8fb	b8fb					_TOKCCLowerCase:
.d8fb	b8fb	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8fe	b8fe	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d900	b900	90 09		bcc $b90b			bcc 	_TOKKCNotUC
.d902	b902	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d904	b904	b0 05		bcs $b90b			bcs 	_TOKKCNotUC
.d906	b906	49 20		eor #$20			eor 	#$20
.d908	b908	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d90b	b90b					_TOKKCNotUC:
.d90b	b90b	e8		inx				inx
.d90c	b90c	c9 00		cmp #$00			cmp 	#0
.d90e	b90e	d0 eb		bne $b8fb			bne 	_TOKCCLowerCase
.d910	b910	fa		plx				plx
.d911	b911	ca		dex				dex 								; tokenise string expects initial skip.
.d912	b912	20 16 b9	jsr $b916			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d915	b915					_TOKCCExit:
.d915	b915	60		rts				rts
.d916	b916					TOKTokenString:
.d916	b916	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d918	b918	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d91b	b91b	e8		inx				inx									; start of quoted string.
.d91c	b91c	da		phx				phx 								; push start of string on top
.d91d	b91d	ca		dex				dex 								; because we pre-increment
.d91e	b91e					_TSFindEnd:
.d91e	b91e	e8		inx				inx
.d91f	b91f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d922	b922	f0 04		beq $b928			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d924	b924	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d926	b926	d0 f6		bne $b91e			bne 	_TSFindEnd
.d928	b928					_TSEndOfString:
.d928	b928	7a		ply				ply  								; so now Y is first character, X is character after end.
.d929	b929	48		pha				pha 								; save terminating character
.d92a	b92a	20 32 b9	jsr $b932			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d92d	b92d	68		pla				pla 								; terminating character
.d92e	b92e	f0 01		beq $b931			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d930	b930	e8		inx				inx
.d931	b931					_TSNotQuote:
.d931	b931	60		rts				rts
.d932	b932					TOKWriteBlockXY:
.d932	b932	86 36		stx $36				stx 	zTemp0 						; save end character
.d934	b934	98		tya				tya 								; use 2's complement to work out the byte size
.d935	b935	49 ff		eor #$ff			eor 	#$FF
.d937	b937	38		sec				sec
.d938	b938	65 36		adc $36				adc 	zTemp0
.d93a	b93a	1a		inc a				inc 	a 							; one extra for NULL
.d93b	b93b	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d93e	b93e					_TOBlockLoop:
.d93e	b93e	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d940	b940	f0 09		beq $b94b			beq 	_TOBlockExit
.d942	b942	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d945	b945	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d948	b948	c8		iny				iny
.d949	b949	80 f3		bra $b93e			bra 	_TOBlockLoop
.d94b	b94b					_TOBlockExit:
.d94b	b94b	a9 00		lda #$00			lda 	#0 							; add NULL.
.d94d	b94d	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d950	b950	60		rts				rts
.d951	b951					TOKHexConstant:
.d951	b951	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d953	b953	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.d956	b956	e8		inx				inx									; start of quoted string.
.d957	b957	da		phx				phx 								; push start of constant on top
.d958	b958	ca		dex				dex
.d959	b959					_THFindLoop:
.d959	b959	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d95a	b95a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d95d	b95d	c9 30		cmp #$30			cmp 	#"0"
.d95f	b95f	90 0c		bcc $b96d			bcc 	_THFoundEnd
.d961	b961	c9 3a		cmp #$3a			cmp 	#"9"+1
.d963	b963	90 f4		bcc $b959			bcc 	_THFindLoop
.d965	b965	c9 41		cmp #$41			cmp 	#"A"
.d967	b967	90 04		bcc $b96d			bcc 	_THFoundEnd
.d969	b969	c9 47		cmp #$47			cmp 	#"F"+1
.d96b	b96b	90 ec		bcc $b959			bcc 	_THFindLoop
.d96d	b96d					_THFoundEnd:
.d96d	b96d	7a		ply				ply 								; restore start
.d96e	b96e	20 32 b9	jsr $b932			jsr 	TOKWriteBlockXY 			; output the block
.d971	b971	60		rts				rts
.d972	b972					TOKCalculateHash:
.d972	b972	da		phx				phx
.d973	b973	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d976	b976	a9 00		lda #$00			lda 	#0
.d978	b978					_TCHLoop:
.d978	b978	18		clc				clc
.d979	b979	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d97c	b97c	e8		inx				inx
.d97d	b97d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d980	b980	d0 f6		bne $b978			bne 	_TCHLoop
.d982	b982	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d985	b985	fa		plx				plx
.d986	b986	60		rts				rts
.d987	b987					LCLFixLineBufferCase:
.d987	b987	a2 00		ldx #$00			ldx 	#0
.d989	b989					_FLBCLoop:
.d989	b989	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d98c	b98c	f0 22		beq $b9b0			beq 	_FLBCExit 					; end of string.
.d98e	b98e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d990	b990	f0 11		beq $b9a3			beq 	_FLBCInQuotes
.d992	b992	e8		inx				inx
.d993	b993	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d995	b995	90 f2		bcc $b989			bcc 	_FLBCLoop
.d997	b997	c9 7b		cmp #$7b			cmp 	#'z'+1
.d999	b999	b0 ee		bcs $b989			bcs 	_FLBCLoop
.d99b	b99b	38		sec				sec 								; make U/C
.d99c	b99c	e9 20		sbc #$20			sbc 	#32
.d99e	b99e	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9a1	b9a1	80 e6		bra $b989			bra 	_FLBCLoop
.d9a3	b9a3					_FLBCInQuotes:
.d9a3	b9a3	e8		inx				inx 								; advance
.d9a4	b9a4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9a7	b9a7	f0 07		beq $b9b0			beq 	_FLBCExit 					; exit on EOS
.d9a9	b9a9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9ab	b9ab	d0 f6		bne $b9a3			bne 	_FLBCInQuotes
.d9ad	b9ad	e8		inx				inx 								; skip over it
.d9ae	b9ae	80 d9		bra $b989			bra 	_FLBCLoop
.d9b0	b9b0					_FLBCExit:
.d9b0	b9b0	60		rts				rts
.d9b1	b9b1					TOKExtractLineNumber:
.d9b1	b9b1	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9b4	b9b4	48		pha				pha
.d9b5	b9b5	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9b8	b9b8	48		pha				pha
.d9b9	b9b9	20 ef b9	jsr $b9ef			jsr 	_LCLNTimes2 				; line # x 2
.d9bc	b9bc	20 ef b9	jsr $b9ef			jsr 	_LCLNTimes2 				; line # x 4
.d9bf	b9bf	18		clc				clc 								; add stacked value
.d9c0	b9c0	68		pla				pla
.d9c1	b9c1	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9c4	b9c4	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9c7	b9c7	68		pla				pla
.d9c8	b9c8	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9cb	b9cb	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9ce	b9ce	20 ef b9	jsr $b9ef			jsr 	_LCLNTimes2 				; line # x 10
.d9d1	b9d1	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9d4	b9d4	e8		inx				inx
.d9d5	b9d5	29 0f		and #$0f			and 	#15 						; add to line #
.d9d7	b9d7	18		clc				clc
.d9d8	b9d8	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9db	b9db	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9de	b9de	90 03		bcc $b9e3			bcc 	_TLENNoCarry
.d9e0	b9e0	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9e3	b9e3					_TLENNoCarry:
.d9e3	b9e3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9e6	b9e6	c9 30		cmp #$30			cmp 	#'0'
.d9e8	b9e8	90 04		bcc $b9ee			bcc 	_TLENExit
.d9ea	b9ea	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9ec	b9ec	90 c3		bcc $b9b1			bcc 	TOKExtractLineNumber
.d9ee	b9ee					_TLENExit:
.d9ee	b9ee	60		rts				rts
.d9ef	b9ef					_LCLNTimes2:
.d9ef	b9ef	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9f2	b9f2	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9f5	b9f5	60		rts				rts
.d9f6	b9f6					TOKWriteByte:
.d9f6	b9f6	da		phx				phx
.d9f7	b9f7	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9fa	b9fa	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9fd	b9fd	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da00	ba00	fa		plx				plx
.da01	ba01	60		rts				rts
.da02	ba02					TOKCheckCreateVariableRecord:
.da02	ba02	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da04	ba04	85 36		sta $36				sta 	0+zTemp0
.da06	ba06	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da08	ba08	85 37		sta $37				sta 	1+zTemp0
.da0a	ba0a					_CCVSearch:
.da0a	ba0a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da0c	ba0c	f0 2c		beq $ba3a			beq 	_CCVFail
.da0e	ba0e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da10	ba10	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da12	ba12	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da15	ba15	d0 16		bne $ba2d			bne 	_CCVNext
.da17	ba17	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da19	ba19	ae 00 04	ldx $0400			ldx 	identStart
.da1c	ba1c					_CCVCompare:
.da1c	ba1c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da1f	ba1f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da21	ba21	e8		inx				inx 								; advance pointers
.da22	ba22	c8		iny				iny
.da23	ba23	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da24	ba24	d0 07		bne $ba2d			bne 	_CCVNext  					; didn't match go to next.
.da26	ba26	90 f4		bcc $ba1c			bcc 	_CCVCompare 				; not finished yet.
.da28	ba28	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da2b	ba2b	f0 41		beq $ba6e			beq 	_CCVFound 					; yes, we were successful
.da2d	ba2d					_CCVNext:
.da2d	ba2d	18		clc				clc 								; go to next record.
.da2e	ba2e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da30	ba30	65 36		adc $36				adc 	zTemp0
.da32	ba32	85 36		sta $36				sta 	zTemp0
.da34	ba34	90 d4		bcc $ba0a			bcc 	_CCVSearch
.da36	ba36	e6 37		inc $37				inc 	zTemp0+1
.da38	ba38	80 d0		bra $ba0a			bra 	_CCVSearch
.da3a	ba3a					_CCVFail:
.da3a	ba3a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da3c	ba3c	ad 03 04	lda $0403			lda 	identHash
.da3f	ba3f	91 36		sta ($36),y			sta 	(zTemp0),y
.da41	ba41	c8		iny				iny 								; offset 2 is the type byte
.da42	ba42	ad 04 04	lda $0404			lda 	identTypeByte
.da45	ba45	91 36		sta ($36),y			sta 	(zTemp0),y
.da47	ba47	c8		iny				iny
.da48	ba48					_CCVData:
.da48	ba48	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny
.da4d	ba4d	c0 08		cpy #$08			cpy 	#8
.da4f	ba4f	90 f7		bcc $ba48			bcc 	_CCVData
.da51	ba51	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da54	ba54					_CCVCopyName:
.da54	ba54	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da57	ba57	91 36		sta ($36),y			sta 	(zTemp0),y
.da59	ba59	e8		inx				inx
.da5a	ba5a	c8		iny				iny
.da5b	ba5b	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da5e	ba5e	d0 f4		bne $ba54			bne 	_CCVCopyName
.da60	ba60	98		tya				tya 								; patch offset
.da61	ba61	92 36		sta ($36)			sta 	(zTemp0)
.da63	ba63	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da65	ba65	91 36		sta ($36),y			sta 	(zTemp0),y
.da67	ba67	88		dey				dey
.da68	ba68	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da6a	ba6a	09 80		ora #$80			ora 	#$80
.da6c	ba6c	91 36		sta ($36),y			sta 	(zTemp0),y
.da6e	ba6e					_CCVFound:
.da6e	ba6e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da70	ba70	38		sec				sec
.da71	ba71	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da73	ba73	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da75	ba75	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.da78	ba78	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da7a	ba7a	20 f6 b9	jsr $b9f6			jsr 	TOKWriteByte
.da7d	ba7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da7e	ba7e					SNDCheckChannel:
.da7e	ba7e	aa		tax				tax
.da7f	ba7f	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da82	ba82	d0 38		bne $babc			bne 	_SNDCCExit
.da84	ba84	da		phx				phx 								; save current channel
.da85	ba85	8a		txa				txa 								; put in A
.da86	ba86	20 02 bb	jsr $bb02			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da89	ba89	68		pla				pla 								; channel # in A
.da8a	ba8a	90 30		bcc $babc			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da8c	ba8c	a8		tay				tay 								; Y is the channel #
.da8d	ba8d	bd 30 07	lda $0730,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da90	ba90	99 2f 08	sta $082f,y			sta 	SNDPitchLow,y
.da93	ba93	bd 31 07	lda $0731,x			lda 	SNDQueue+2,x
.da96	ba96	99 33 08	sta $0833,y			sta 	SNDPitchHigh,y
.da99	ba99	bd 32 07	lda $0732,x			lda 	SNDQueue+3,x
.da9c	ba9c	99 37 08	sta $0837,y			sta 	SNDVolume,y
.da9f	ba9f	bd 33 07	lda $0733,x			lda 	SNDQueue+4,x
.daa2	baa2	99 3b 08	sta $083b,y			sta 	SNDTimeLeft,y
.daa5	baa5	bd 34 07	lda $0734,x			lda 	SNDQueue+5,x
.daa8	baa8	99 3f 08	sta $083f,y			sta 	SNDAdjustLow,y
.daab	baab	bd 35 07	lda $0735,x			lda 	SNDQueue+6,x
.daae	baae	99 43 08	sta $0843,y			sta 	SNDAdjustHigh,y
.dab1	bab1	5a		phy				phy 								; save channel #
.dab2	bab2	20 1c bb	jsr $bb1c			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dab5	bab5	ce 2e 07	dec $072e			dec 	SNDLength 					; reduce the queue length.
.dab8	bab8	68		pla				pla
.dab9	bab9	20 bd ba	jsr $babd			jsr 	SNDUpdateNote 				; update channel A
.dabc	babc					_SNDCCExit:
.dabc	babc	60		rts				rts
.dabd	babd					SNDUpdateNote:
.dabd	babd	aa		tax				tax 								; so we can access records
.dabe	babe	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.dabf	babf	0a		asl a				asl 	a
.dac0	bac0	0a		asl a				asl 	a
.dac1	bac1	0a		asl a				asl 	a
.dac2	bac2	0a		asl a				asl 	a
.dac3	bac3	8d 2d 07	sta $072d			sta 	SNDChannelBits
.dac6	bac6	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; are we silent
.dac9	bac9	f0 2e		beq $baf9			beq 	_SNDUNIsSilent
.dacb	bacb	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; push channel bits on stack
.dace	bace	48		pha				pha
.dacf	bacf	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dad2	bad2	29 0f		and #$0f			and 	#$0F
.dad4	bad4	0d 2d 07	ora $072d			ora 	SNDChannelBits 				; set channel bits
.dad7	bad7	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dad9	bad9	20 66 bb	jsr $bb66			jsr 	SNDWritePorts
.dadc	badc	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dadf	badf	8d 2d 07	sta $072d			sta 	SNDChannelBits
.dae2	bae2	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dae5	bae5	4e 2d 07	lsr $072d			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dae8	bae8	6a		ror a				ror 	a
.dae9	bae9	4e 2d 07	lsr $072d			lsr 	SNDChannelBits
.daec	baec	6a		ror a				ror 	a
.daed	baed	4a		lsr a				lsr 	a 							; put in bits 0-5
.daee	baee	4a		lsr a				lsr 	a
.daef	baef	20 66 bb	jsr $bb66			jsr 	SNDWritePorts 				; write as rest of pitch register
.daf2	baf2	68		pla				pla
.daf3	baf3	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.daf5	baf5	20 66 bb	jsr $bb66			jsr 	SNDWritePorts
.daf8	baf8	60		rts				rts
.daf9	baf9					_SNDUNIsSilent:
.daf9	baf9	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; channel bits
.dafc	bafc	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dafe	bafe	20 66 bb	jsr $bb66			jsr 	SNDWritePorts 				; write to the ports
.db01	bb01	60		rts				rts
.db02	bb02					SNDFindNextNoteForA:
.db02	bb02	ac 2e 07	ldy $072e			ldy 	SNDLength 					; queue size into Y
.db05	bb05	f0 13		beq $bb1a			beq 	_SNDFNNFail 				; queue empty.
.db07	bb07	a2 00		ldx #$00			ldx 	#0
.db09	bb09					_SNDFNNSearch:
.db09	bb09	dd 2f 07	cmp $072f,x			cmp 	SNDQueue,x 					; does it match the channel
.db0c	bb0c	38		sec				sec
.db0d	bb0d	f0 0c		beq $bb1b			beq 	_SNDFNNExit 				; if so exit with CS.
.db0f	bb0f	e8		inx				inx 								; next queue slot.
.db10	bb10	e8		inx				inx
.db11	bb11	e8		inx				inx
.db12	bb12	e8		inx				inx
.db13	bb13	e8		inx				inx
.db14	bb14	e8		inx				inx
.db15	bb15	e8		inx				inx
.db16	bb16	e8		inx				inx
.db17	bb17	88		dey				dey 								; done the whole queue
.db18	bb18	d0 ef		bne $bb09			bne 	_SNDFNNSearch 				; no, go back.
.db1a	bb1a					_SNDFNNFail:
.db1a	bb1a	18		clc				clc
.db1b	bb1b					_SNDFNNExit:
.db1b	bb1b	60		rts				rts
.db1c	bb1c					SNDDeleteXFromQueue:
.db1c	bb1c	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db1e	bb1e	f0 09		beq $bb29			beq 	_SNDDXExit
.db20	bb20	bd 37 07	lda $0737,x			lda 	SNDQueue+8,x
.db23	bb23	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db26	bb26	e8		inx				inx
.db27	bb27	80 f3		bra $bb1c			bra 	SNDDeleteXFromQueue
.db29	bb29					_SNDDXExit:
.db29	bb29	60		rts				rts
.072d						SNDChannelBits:
>072d								.fill 	1
.db2a	bb2a					SNDQueueRequest:
.db2a	bb2a	86 36		stx $36				stx 	zTemp0						; save queue address
.db2c	bb2c	84 37		sty $37				sty 	zTemp0+1
.db2e	bb2e	ae 2e 07	ldx $072e			ldx 	SNDLength 					; queue is full, can't take any more.
.db31	bb31	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db33	bb33	f0 21		beq $bb56			beq 	_SNDQRExit
.db35	bb35	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db37	bb37	48		pha				pha
.db38	bb38	8a		txa				txa  								; get offset in queue buffer/
.db39	bb39	0a		asl a				asl 	a
.db3a	bb3a	0a		asl a				asl 	a
.db3b	bb3b	0a		asl a				asl 	a
.db3c	bb3c	aa		tax				tax
.db3d	bb3d	68		pla				pla 								; get back and push again
.db3e	bb3e	48		pha				pha
.db3f	bb3f	9d 2f 07	sta $072f,x			sta 	SNDQueue+0,x 				; save the channel #
.db42	bb42	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db44	bb44					_SNDQCopy:
.db44	bb44	b1 36		lda ($36),y			lda 	(zTemp0),y
.db46	bb46	e8		inx				inx
.db47	bb47	c8		iny				iny
.db48	bb48	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db4b	bb4b	c0 06		cpy #$06			cpy 	#6
.db4d	bb4d	d0 f5		bne $bb44			bne 	_SNDQCopy
.db4f	bb4f	ee 2e 07	inc $072e			inc 	SNDLength 					; bump queue length.
.db52	bb52	68		pla				pla 								; get channel # back
.db53	bb53	20 7e ba	jsr $ba7e			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db56	bb56					_SNDQRExit:
.db56	bb56	60		rts				rts
.db57	bb57					SNDSilenceChannel:
.db57	bb57	aa		tax				tax 								; zero time left.
.db58	bb58	9e 3b 08	stz $083b,x			stz 	SNDTimeLeft,x
.db5b	bb5b	0a		asl a				asl 	a 							; shift into position
.db5c	bb5c	0a		asl a				asl 	a
.db5d	bb5d	0a		asl a				asl 	a
.db5e	bb5e	0a		asl a				asl 	a
.db5f	bb5f	0a		asl a				asl 	a
.db60	bb60	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db62	bb62	20 66 bb	jsr $bb66			jsr 	SNDWritePorts
.db65	bb65	60		rts				rts
.db66	bb66					SNDWritePorts:
.db66	bb66	da		phx				phx 								; save X
.db67	bb67	a6 01		ldx $01				ldx 	1 							; save I/O status
.db69	bb69	64 01		stz $01				stz 	1 							; access I/O page 0
.db6b	bb6b	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db6e	bb6e	8d 10 d6	sta $d610			sta 	$D610
.db71	bb71	86 01		stx $01				stx 	1 							; restore I/O
.db73	bb73	fa		plx				plx 								; restore X
.db74	bb74	60		rts				rts
.db75	bb75					Export_SNDCommand:
.db75	bb75	da		phx				phx 								; save XY
.db76	bb76	5a		phy				phy
.db77	bb77	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db79	bb79	f0 1d		beq $bb98			beq 	_SNDInitialise
.db7b	bb7b	90 28		bcc $bba5			bcc 	_SNDExit
.db7d	bb7d	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db7f	bb7f	f0 17		beq $bb98			beq 	_SNDSilence
.db81	bb81	b0 22		bcs $bba5			bcs 	_SNDExit
.db83	bb83	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db85	bb85	b0 09		bcs $bb90			bcs 	_SNDQueryPlay
.db87	bb87	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db89	bb89	b0 1a		bcs $bba5			bcs 	_SNDExit
.db8b	bb8b	20 2a bb	jsr $bb2a			jsr 	SNDQueueRequest
.db8e	bb8e	80 15		bra $bba5			bra 	_SNDExit
.db90	bb90					_SNDQueryPlay:
.db90	bb90	29 03		and #$03			and 	#3 							; get channel #
.db92	bb92	aa		tax				tax
.db93	bb93	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db96	bb96	80 0d		bra $bba5			bra 	_SNDExit
.db98	bb98					_SNDInitialise:
.db98	bb98					_SNDSilence:
.db98	bb98	9c 2e 07	stz $072e			stz 	SNDLength 					; empty the queue.
.db9b	bb9b	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db9d	bb9d					_SNDSilenceLoop:
.db9d	bb9d	48		pha				pha
.db9e	bb9e	20 57 bb	jsr $bb57			jsr 	SNDSilenceChannel
.dba1	bba1	68		pla				pla
.dba2	bba2	3a		dec a				dec 	a
.dba3	bba3	10 f8		bpl $bb9d			bpl 	_SNDSilenceLoop
.dba5	bba5					_SNDExit:
.dba5	bba5	7a		ply				ply
.dba6	bba6	fa		plx				plx
.dba7	bba7	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072e						SNDLength:
>072e								.fill 	1
.072f						SNDQueue:
>072f								.fill 	SNDQueueSize * 8
.082f						SNDPitchLow:
>082f								.fill 	4
.0833						SNDPitchHigh:
>0833								.fill 	4
.0837						SNDVolume:
>0837								.fill 	4
.083b						SNDTimeLeft:
>083b								.fill 	4
.083f						SNDAdjustLow:
>083f								.fill 	4
.0843						SNDAdjustHigh:
>0843								.fill 	4
.dba8	bba8					Export_SNDUpdate:
.dba8	bba8					PagedSNDUpdate:
.dba8	bba8	ad 3b 08	lda $083b			lda 	SNDTimeLeft+0 				; look at time remaining
.dbab	bbab	f0 05		beq $bbb2			beq 	_SNDUNot0 					; not playing
.dbad	bbad	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbaf	bbaf	20 d1 bb	jsr $bbd1			jsr 	SNDUpdateChannel 			; update it.
.dbb2	bbb2					_SNDUNot0:
.dbb2	bbb2	ad 3c 08	lda $083c			lda 	SNDTimeLeft+1
.dbb5	bbb5	f0 05		beq $bbbc			beq 	_SNDUNot1
.dbb7	bbb7	a2 01		ldx #$01			ldx 	#1
.dbb9	bbb9	20 d1 bb	jsr $bbd1			jsr 	SNDUpdateChannel
.dbbc	bbbc					_SNDUNot1:
.dbbc	bbbc	ad 3d 08	lda $083d			lda 	SNDTimeLeft+2
.dbbf	bbbf	f0 05		beq $bbc6			beq 	_SNDUNot2
.dbc1	bbc1	a2 02		ldx #$02			ldx 	#2
.dbc3	bbc3	20 d1 bb	jsr $bbd1			jsr 	SNDUpdateChannel
.dbc6	bbc6					_SNDUNot2:
.dbc6	bbc6	ad 3e 08	lda $083e			lda 	SNDTimeLeft+3
.dbc9	bbc9	f0 05		beq $bbd0			beq 	_SNDUNot3
.dbcb	bbcb	a2 03		ldx #$03			ldx 	#3
.dbcd	bbcd	20 d1 bb	jsr $bbd1			jsr 	SNDUpdateChannel
.dbd0	bbd0					_SNDUNot3:
.dbd0	bbd0	60		rts				rts
.dbd1	bbd1					SNDUpdateChannel:
.dbd1	bbd1	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbd3	bbd3	f0 2c		beq $bc01			beq 	_SNDUCExit
.dbd5	bbd5	3a		dec a				dec 	a 							; decrement and update timer
.dbd6	bbd6	9d 3b 08	sta $083b,x			sta 	SNDTimeLeft,x
.dbd9	bbd9	f0 1d		beq $bbf8			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbdb	bbdb	bd 3f 08	lda $083f,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbde	bbde	1d 43 08	ora $0843,x			ora 	SNDAdjustHigh,x
.dbe1	bbe1	f0 1e		beq $bc01			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbe3	bbe3	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbe4	bbe4	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dbe7	bbe7	7d 3f 08	adc $083f,x			adc 	SNDAdjustLow,x
.dbea	bbea	9d 2f 08	sta $082f,x			sta 	SNDPitchLow,x
.dbed	bbed	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x
.dbf0	bbf0	7d 43 08	adc $0843,x			adc 	SNDAdjustHigh,x
.dbf3	bbf3	29 03		and #$03			and 	#3
.dbf5	bbf5	9d 33 08	sta $0833,x			sta 	SNDPitchHigh,x
.dbf8	bbf8					_SNDUCUpdate:
.dbf8	bbf8	8a		txa				txa 								; which channel.
.dbf9	bbf9	48		pha				pha
.dbfa	bbfa	20 bd ba	jsr $babd			jsr 	SNDUpdateNote 				; update the current note
.dbfd	bbfd	68		pla				pla
.dbfe	bbfe	20 7e ba	jsr $ba7e			jsr 	SNDCheckChannel 			; more to do ?
.dc01	bc01					_SNDUCExit:
.dc01	bc01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc02	bc02					Export_KNLInputSingleCharacter:
.dc02	bc02					PagedInputSingleCharacter:
.dc02	bc02	da		phx				phx
.dc03	bc03	5a		phy				phy
.dc04	bc04					_EISCWait:
.dc04	bc04	a5 01		lda $01				lda 	1 							; save I/O 0
.dc06	bc06	48		pha				pha
.dc07	bc07	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc09	bc09	38		sec				sec 								; calculate timer - LastTick
.dc0a	bc0a	ad 59 d6	lda $d659			lda 	$D659
.dc0d	bc0d	aa		tax				tax 								; saving timer in X
.dc0e	bc0e	ed 5f 06	sbc $065f			sbc 	LastTick
.dc11	bc11	c9 03		cmp #$03			cmp 	#3
.dc13	bc13	90 06		bcc $bc1b			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dc15	bc15	8e 5f 06	stx $065f			stx 	LastTick 					; update last timer
.dc18	bc18	20 a8 bb	jsr $bba8			jsr 	PagedSNDUpdate 							; go do the code.
.dc1b	bc1b					_NoFireTick:
.dc1b	bc1b	68		pla				pla 								; restore I/O 0
.dc1c	bc1c	85 01		sta $01				sta 	1
.dc1e	bc1e	20 28 bc	jsr $bc28			jsr 	CheckKeyPressed
.dc21	bc21	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc23	bc23	f0 df		beq $bc04			beq 	_EISCWait
.dc25	bc25	7a		ply				ply
.dc26	bc26	fa		plx				plx
.dc27	bc27	60		rts				rts
.dc28	bc28					Export_KNLInkey:
.dc28	bc28					CheckKeyPressed:
.dc28	bc28	a9 47		lda #$47			lda     #<event 					; tell kernel where events go.
.dc2a	bc2a	85 f0		sta $f0				sta     kernel.args.events+0
.dc2c	bc2c	a9 08		lda #$08			lda     #>event
.dc2e	bc2e	85 f1		sta $f1				sta     kernel.args.events+1
.dc30	bc30	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc33	bc33	b0 0b		bcs $bc40			bcs 	_CKPNoEvent 				; no event
.dc35	bc35	ad 47 08	lda $0847			lda     event.type
.dc38	bc38	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc3a	bc3a	d0 04		bne $bc40			bne 	_CKPNoEvent
.dc3c	bc3c	ad 4c 08	lda $084c			lda     event.key.ascii
.dc3f	bc3f	60		rts				rts
.dc40	bc40					_CKPNoEvent:
.dc40	bc40	a9 00		lda #$00			lda 	#0
.dc42	bc42	60		rts				rts
.dc43	bc43					Export_EXTBreakCheck:
.dc43	bc43	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc46	bc46					Export_EXTReadController:
.dc46	bc46	da		phx				phx
.dc47	bc47	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc49	bc49	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc4b	bc4b	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc4e	bc4e	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc50	bc50	fa		plx				plx
.dc51	bc51	60		rts				rts
.0847						event
>0847						type        .byte   ?   ; Enum above
>0848						buf         .byte   ?   ; page id or zero
>0849						ext         .byte   ?   ; page id or zero
.084a						key
>084a						keyboard    .byte   ?   ; Keyboard ID
>084b						raw         .byte   ?   ; Raw key ID
>084c						ascii       .byte   ?   ; ASCII value
>084d						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084a						mouse
.084a						delta
>084a						x           .byte   ?
>084b						y           .byte   ?
>084c						z           .byte   ?
>084d						buttons     .byte   ?
.084a						clicks
>084a						inner       .byte   ?
>084b						middle      .byte   ?
>084c						outer       .byte   ?
.084a						udp
>084a						token       .byte   ?   ; TODO: break out into fields
.084a						file
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						data
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						read        .byte   ?   ; Number of bytes actually read
.084c						wrote
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						wrote       .byte   ?   ; Number of bytes actually read
.084a						directory
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						volume
>084c						len         .byte   ?   ; Length of volname (in buf)
>084d						flags       .byte   ?   ; block size, text encoding
.084c						file
>084c						len         .byte   ?
>084d						flags       .byte   ?   ; block scale, text encoding, approx size
.084c						free
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc52	bc52					Export_KNLOpenFileWrite:
.dc52	bc52	48		pha				pha
.dc53	bc53	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc55	bc55	80 03		bra $bc5a			bra 	KNLOpenStart
.dc57	bc57					Export_KNLOpenFileRead:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5a	bc5a					KNLOpenStart:
.dc5a	bc5a	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc5c	bc5c	68		pla				pla
.dc5d	bc5d	20 98 bc	jsr $bc98			jsr 	KNLSetupFileName
.dc60	bc60	a9 47		lda #$47			lda     #event & $FF 				; tell kernel where to store event data
.dc62	bc62	85 f0		sta $f0				sta     kernel.args.events+0
.dc64	bc64	a9 08		lda #$08			lda     #event >> 8
.dc66	bc66	85 f1		sta $f1				sta     kernel.args.events+1
.dc68	bc68	ad 5c 06	lda $065c			lda 	DefaultDrive 				; currently drive zero only.
.dc6b	bc6b	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc6d	bc6d	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc70	bc70	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc72	bc72	b0 1d		bcs $bc91			bcs     _out
.dc74	bc74					_loop
.dc74	bc74	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc77	bc77	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7a	bc7a	b0 f8		bcs $bc74			bcs     _loop
.dc7c	bc7c	ad 47 08	lda $0847			lda 	event.type
.dc7f	bc7f	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc81	bc81	f0 0a		beq $bc8d			beq 	_success
.dc83	bc83	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc85	bc85	f0 0a		beq $bc91			beq 	_out
.dc87	bc87	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc89	bc89	f0 06		beq $bc91			beq 	_out
.dc8b	bc8b	80 e7		bra $bc74			bra     _loop
.dc8d	bc8d					_success
.dc8d	bc8d	ad 4a 08	lda $084a			lda     event.file.stream
.dc90	bc90	18		clc				clc
.dc91	bc91					_out
.dc91	bc91	60		rts				rts
.dc92	bc92					Export_KNLCloseFile:
.dc92	bc92	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc94	bc94	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc97	bc97	60		rts				rts
.dc98	bc98					KNLSetupFileName:
.dc98	bc98	5a		phy				phy 								; save Y on stack
.dc99	bc99	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc9b	bc9b	86 37		stx $37				stx 	zTemp0+1
.dc9d	bc9d	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dc9f	bc9f	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca1	bca1	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca3	bca3					_KNLGetLength:
.dca3	bca3	c8		iny				iny
.dca4	bca4	b1 36		lda ($36),y			lda 	(zTemp0),y
.dca6	bca6	d0 fb		bne $bca3			bne 	_KNLGetLength
.dca8	bca8	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaa	bcaa	7a		ply				ply
.dcab	bcab	60		rts				rts
=64						KNLBufLen = 64 								; read buffer size.
.084e						KNLStream:
>084e								.byte   ?
.084f						KNLBuf:
>084f								.fill   KNLBufLen
.088f						KNLNext:
>088f								.byte   ?
.0890						KNLEnd:
>0890								.byte   ?
.dcac	bcac					Export_KNLReadByteInit:
.dcac	bcac	8d 4e 08	sta $084e			sta     KNLStream 					; save stream
.dcaf	bcaf	9c 8f 08	stz $088f			stz     KNLNext 					; reset buffer
.dcb2	bcb2	9c 90 08	stz $0890			stz     KNLEnd
.dcb5	bcb5	60		rts				rts
.dcb6	bcb6					Export_KNLReadByte:
.dcb6	bcb6	da		phx				phx
.dcb7	bcb7	ae 8f 08	ldx $088f			ldx     KNLNext 					; all data consumed ?
.dcba	bcba	ec 90 08	cpx $0890			cpx     KNLEnd
.dcbd	bcbd	d0 0d		bne $bccc			bne     _KNLRBGetNextByte
.dcbf	bcbf	20 d5 bc	jsr $bcd5			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcc2	bcc2	b0 0f		bcs $bcd3			bcs     _KNLRBError 				; error has occurred on read.
.dcc4	bcc4	8d 90 08	sta $0890			sta     KNLEnd 						; # read is the number available
.dcc7	bcc7	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcc9	bcc9	8e 8f 08	stx $088f			stx     KNLNext
.dccc	bccc					_KNLRBGetNextByte:
.dccc	bccc	bd 4f 08	lda $084f,x			lda     KNLBuf,x 					; get the next data item
.dccf	bccf	ee 8f 08	inc $088f			inc     KNLNext 					; and advance the index
.dcd2	bcd2	18		clc				clc 								; succeeded
.dcd3	bcd3					_KNLRBError:
.dcd3	bcd3	fa		plx				plx
.dcd4	bcd4	60		rts				rts
.dcd5	bcd5					KNLRBGetNextBlock:
.dcd5	bcd5	ad 4e 08	lda $084e			lda     KNLStream 					; set stream to read from
.dcd8	bcd8	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcda	bcda	a9 40		lda #$40			lda     #KNLBufLen 					; set bytes to read.
.dcdc	bcdc	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dcde	bcde	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce1	bce1	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce3	bce3	b0 2e		bcs $bd13			bcs     _KGNBExitFail               ; report as general error
.dce5	bce5					_KGRBEventLoop:
.dce5	bce5	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dce8	bce8	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dceb	bceb	b0 f8		bcs $bce5			bcs     _KGRBEventLoop
.dced	bced	ad 47 08	lda $0847			lda 	event.type 					; get event
.dcf0	bcf0	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf2	bcf2	f0 0a		beq $bcfe			beq     _KNLRBGetNextByte
.dcf4	bcf4	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcf6	bcf6	f0 1b		beq $bd13			beq 	_KGNBExitFail
.dcf8	bcf8	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcfa	bcfa	f0 17		beq $bd13			beq 	_KGNBExitFail
.dcfc	bcfc	80 e7		bra $bce5			bra 	_KGRBEventLoop
.dcfe	bcfe					_KNLRBGetNextByte:
.dcfe	bcfe	a9 4f		lda #$4f			lda     #<KNLBuf 					; Set the target buffer
.dd00	bd00	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd02	bd02	a9 08		lda #$08			lda     #>KNLBuf
.dd04	bd04	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd06	bd06	ad 4d 08	lda $084d			lda     event.file.data.read 		; Set the target length
.dd09	bd09	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd0b	bd0b	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd0e	bd0e	ad 4d 08	lda $084d			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd11	bd11	18		clc				clc
.dd12	bd12	60		rts				rts
.dd13	bd13					_KGNBExitFail:
.dd13	bd13	38		sec				sec
.dd14	bd14	60		rts				rts
.dd15	bd15					Export_KNLWriteBlock:
.dd15	bd15	da		phx				phx
.dd16	bd16	5a		phy				phy
.dd17	bd17	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd19	bd19	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd1b	bd1b	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd1d	bd1d	a5 37		lda $37				lda     zTemp0+1
.dd1f	bd1f	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd21	bd21	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd23	bd23	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd26	bd26	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd28	bd28	b0 21		bcs $bd4b			bcs 	_KWBFailed
.dd2a	bd2a					_KNLWLoop:
.dd2a	bd2a	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd2d	bd2d	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd30	bd30	b0 f8		bcs $bd2a			bcs     _KNLWLoop
.dd32	bd32	ad 47 08	lda $0847			lda     event.type 					; various errors.
.dd35	bd35	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd37	bd37	f0 12		beq $bd4b			beq 	_KWBFailed
.dd39	bd39	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd3b	bd3b	f0 0e		beq $bd4b			beq 	_KWBFailed
.dd3d	bd3d	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd3f	bd3f	f0 0a		beq $bd4b			beq 	_KWBFailed
.dd41	bd41	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd43	bd43	d0 e5		bne $bd2a			bne 	_KNLWLoop
.dd45	bd45	18		clc				clc
.dd46	bd46	ad 4d 08	lda $084d			lda    event.file.wrote.wrote 		; get bytes written.
.dd49	bd49	80 01		bra $bd4c			bra 	_KWBExit
.dd4b	bd4b					_KWBFailed:
.dd4b	bd4b	38		sec				sec
.dd4c	bd4c					_KWBExit:
.dd4c	bd4c	7a		ply				ply
.dd4d	bd4d	fa		plx				plx
.dd4e	bd4e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
