
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan 18 19:41:13 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c a7 80	jmp $80a7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						EXTInputSingleCharacter:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						GXGraphicDraw:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDCommand:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 e5 bb	jsr $bbe5		jsr	Export_SNDCommand
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						SNDUpdate:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 18 bc	jsr $bc18		jsr	Export_SNDUpdate
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKListConvertLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 96 b5	jsr $b596		jsr	Export_TKListConvertLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts
.809d						TKTokeniseLine:
.809d		e6 0d		inc $0d			inc 8+5
.809f		20 2a b8	jsr $b82a		jsr	Export_TKTokeniseLine
.80a2		08		php			php
.80a3		c6 0d		dec $0d			dec 8+5
.80a5		28		plp			plp
.80a6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80a7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80a9		9a		txs				txs
.80aa		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80ac		09 80		ora #$80			ora 	#$80
.80ae		85 00		sta $00				sta 	0
.80b0		20 9c ae	jsr $ae9c			jsr		UpdateFont 					; update font if between FPGA updates.
.80b3		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80b6		c9 42		cmp #$42			cmp 	#"B"
.80b8		d0 18		bne $80d2			bne 	_NoMachineCode
.80ba		ad 03 20	lda $2003			lda 	$2003
.80bd		c9 54		cmp #$54			cmp 	#"T"
.80bf		d0 11		bne $80d2			bne 	_NoMachineCode
.80c1		ad 04 20	lda $2004			lda 	$2004
.80c4		c9 36		cmp #$36			cmp 	#"6"
.80c6		d0 0a		bne $80d2			bne 	_NoMachineCode
.80c8		ad 05 20	lda $2005			lda 	$2005
.80cb		c9 35		cmp #$35			cmp 	#"5"
.80cd		d0 03		bne $80d2			bne 	_NoMachineCode
.80cf		4c 00 20	jmp $2000			jmp 	$2000
.80d2						_NoMachineCode:
.80d2		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80d5		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80d7		20 90 81	jsr $8190			jsr 	KNLSetDrive
.80da		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80dc		aa		tax				tax
.80dd		a8		tay				tay
.80de		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.80e1		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80e3		20 7f 80	jsr $807f			jsr 	SNDCommand
.80e6		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80e8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80eb		a9 09		lda #$09			lda 	#9
.80ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f3		64 01		stz $01				stz 	1
.80f5		ad ad d6	lda $d6ad			lda 	$D6AD
.80f8		20 76 83	jsr $8376			jsr 	PrintHex
.80fb		ad ac d6	lda $d6ac			lda 	$D6AC
.80fe		20 76 83	jsr $8376			jsr 	PrintHex
.8101		ad ab d6	lda $d6ab			lda 	$D6AB
.8104		20 76 83	jsr $8376			jsr 	PrintHex
.8107		ad aa d6	lda $d6aa			lda 	$D6AA
.810a		20 76 83	jsr $8376			jsr 	PrintHex
.810d		a9 20		lda #$20			lda 	#32
.810f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8112		ad a8 d6	lda $d6a8			lda 	$D6A8
.8115		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8118		ad a9 d6	lda $d6a9			lda 	$D6A9
.811b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.811e		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8120		a9 2e		lda #$2e			lda 	#Prompt & $FF
.8122		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8125		20 dd 8f	jsr $8fdd			jsr 	NewProgram 					; erase current program
.8128		4c b9 85	jmp $85b9			jmp 	WarmStart					; make same size.
.812b		4c b9 85	jmp $85b9			jmp 	WarmStart
>812e		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8130		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>8138		32 33 20 33 31

;******  Return to file: ./common/aa.system/00start.asm

>813d		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.8141						ProcessEvents:
.8141		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.8144		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8147		b0 27		bcs $8170			bcs 	_PEExitZ 					; nothing left to process.
.8149		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814e		d0 f1		bne $8141			bne 	ProcessEvents
.8150		ad 65 07	lda $0765			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8153		d0 ec		bne $8141			bne 	ProcessEvents
.8155		ad 64 07	lda $0764			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8158		c9 03		cmp #$03			cmp 	#3
.815a		f0 11		beq $816d			beq 	_PEReturnBreak  			; no, keep going.
.815c		da		phx				phx
.815d		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8160		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8162		f0 06		beq $816a			beq 	_PENoQueue
.8164		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8167		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.816a						_PENoQueue:
.816a		fa		plx				plx
.816b		80 d4		bra $8141			bra 	ProcessEvents
.816d						_PEReturnBreak:
.816d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.816f		60		rts				rts
.8170						_PEExitZ:
.8170		a9 00		lda #$00			lda 	#0
.8172		60		rts				rts
.8173						PopKeyboardQueue:
.8173		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8176		f0 17		beq $818f			beq 	_PKQExit 					; zero, then exit.
.8178		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.817b		48		pha				pha
.817c		da		phx				phx 								; drop head of queue
.817d		a2 00		ldx #$00			ldx 	#0
.817f						_PKQLoop:
.817f		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8182		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8185		e8		inx				inx
.8186		e0 07		cpx #$07			cpx 	#7
.8188		d0 f5		bne $817f			bne 	_PKQLoop
.818a		fa		plx				plx
.818b		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.818e		68		pla				pla 								; restore head of queue.
.818f						_PKQExit:
.818f		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8190						KNLSetDrive:
.8190		8d 5e 07	sta $075e			sta 	KNLDefaultDrive
.8193		60		rts				rts
.8194						KNLOpenFileWrite:
.8194		48		pha				pha
.8195		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8197		80 03		bra $819c			bra 	KNLOpenStart
.8199						KNLOpenFileRead:
.8199		48		pha				pha
.819a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.819c						KNLOpenStart:
.819c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.819e		68		pla				pla
.819f		20 da 81	jsr $81da			jsr 	KNLSetupFileName
.81a2		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.81a5		ad 5e 07	lda $075e			lda 	KNLDefaultDrive 			; currently drive zero only.
.81a8		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.81aa		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.81ad		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.81af		b0 1d		bcs $81ce			bcs     _out
.81b1						_loop
.81b1		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81b4		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81b7		b0 f8		bcs $81b1			bcs     _loop
.81b9		ad 5f 07	lda $075f			lda 	KNLEvent.type
.81bc		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.81be		f0 0a		beq $81ca			beq 	_success
.81c0		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.81c2		f0 0a		beq $81ce			beq 	_out
.81c4		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81c6		f0 06		beq $81ce			beq 	_out
.81c8		80 e7		bra $81b1			bra     _loop
.81ca						_success
.81ca		ad 62 07	lda $0762			lda     KNLEvent.file.stream
.81cd		18		clc				clc
.81ce						_out
.81ce		60		rts				rts
.81cf						KNLSetEventPointer:
.81cf		48		pha				pha
.81d0		a9 5f		lda #$5f			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.81d2		85 f0		sta $f0				sta     kernel.args.events+0
.81d4		a9 07		lda #$07			lda     #KNLEvent >> 8
.81d6		85 f1		sta $f1				sta     kernel.args.events+1
.81d8		68		pla				pla
.81d9		60		rts				rts
.81da						KNLSetupFileName:
.81da		5a		phy				phy 								; save Y on stack
.81db		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.81dd		86 37		stx $37				stx 	zTemp0+1
.81df		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.81e1		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.81e3		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.81e5						_KNLGetLength:
.81e5		c8		iny				iny
.81e6		b1 36		lda ($36),y			lda 	(zTemp0),y
.81e8		d0 fb		bne $81e5			bne 	_KNLGetLength
.81ea		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.81ec		7a		ply				ply
.81ed		60		rts				rts
.81ee						KNLReadBlock:
.81ee		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81f0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81f2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81f5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81f7		b0 2e		bcs $8227			bcs     _KGNBExitFail               ; report as general error
.81f9						_KGRBEventLoop:
.81f9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81fc		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81ff		b0 f8		bcs $81f9			bcs     _KGRBEventLoop
.8201		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; get event
.8204		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8206		f0 0a		beq $8212			beq     _KNLRBGetNextByte
.8208		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.820a		f0 1b		beq $8227			beq 	_KGNBExitFail
.820c		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.820e		f0 17		beq $8227			beq 	_KGNBExitFail
.8210		80 e7		bra $81f9			bra 	_KGRBEventLoop
.8212						_KNLRBGetNextByte:
.8212		a9 5e		lda #$5e			lda     #<KNLReadBuffer 			; Set the target buffer
.8214		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8216		a9 06		lda #$06			lda     #>KNLReadBuffer
.8218		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.821a		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Set the target length
.821d		85 fd		sta $fd				sta     kernel.args.recv.buflen
.821f		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8222		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8225		18		clc				clc
.8226		60		rts				rts
.8227						_KGNBExitFail:
.8227		38		sec				sec
.8228		60		rts				rts
.8229						KNLWriteBlock:
.8229		da		phx				phx
.822a		5a		phy				phy
.822b		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.822d		a5 36		lda $36				lda     zTemp0 						; save the data location.
.822f		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8231		a5 37		lda $37				lda     zTemp0+1
.8233		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8235		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8237		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.823a		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.823c		b0 21		bcs $825f			bcs 	_KWBFailed
.823e						_KNLWLoop:
.823e		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8241		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8244		b0 f8		bcs $823e			bcs     _KNLWLoop
.8246		ad 5f 07	lda $075f			lda     KNLEvent.type 				; various errors.
.8249		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.824b		f0 12		beq $825f			beq 	_KWBFailed
.824d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.824f		f0 0e		beq $825f			beq 	_KWBFailed
.8251		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8253		f0 0a		beq $825f			beq 	_KWBFailed
.8255		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8257		d0 e5		bne $823e			bne 	_KNLWLoop
.8259		18		clc				clc
.825a		ad 65 07	lda $0765			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.825d		80 01		bra $8260			bra 	_KWBExit
.825f						_KWBFailed:
.825f		38		sec				sec
.8260						_KWBExit:
.8260		7a		ply				ply
.8261		fa		plx				plx
.8262		60		rts				rts
.8263						KNLCloseFile:
.8263		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8265		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8268		60		rts				rts
.8269						KNLCheckKeyPressed:
.8269		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.826c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.826f		b0 0b		bcs $827c			bcs 	_CKPNoEvent 				; no event
.8271		ad 5f 07	lda $075f			lda     KNLEvent.type
.8274		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8276		d0 04		bne $827c			bne 	_CKPNoEvent
.8278		ad 64 07	lda $0764			lda     KNLEvent.key.ascii
.827b		60		rts				rts
.827c						_CKPNoEvent:
.827c		a9 00		lda #$00			lda 	#0
.827e		60		rts				rts
.827f						EXTReadController:
.827f		da		phx				phx
.8280		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8282		64 01		stz $01				stz 	1 							; switch to I/O 0
.8284		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8287		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8289		fa		plx				plx
.828a		60		rts				rts
.065e						KNLReadBuffer:
>065e								.fill   256
.075e						KNLDefaultDrive:
>075e								.byte 	?
.075f						KNLEvent
>075f						type        .byte   ?   ; Enum above
>0760						buf         .byte   ?   ; page id or zero
>0761						ext         .byte   ?   ; page id or zero
.0762						key
>0762						keyboard    .byte   ?   ; Keyboard ID
>0763						raw         .byte   ?   ; Raw key ID
>0764						ascii       .byte   ?   ; ASCII value
>0765						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0762						mouse
.0762						delta
>0762						x           .byte   ?
>0763						y           .byte   ?
>0764						z           .byte   ?
>0765						buttons     .byte   ?
.0762						clicks
>0762						inner       .byte   ?
>0763						middle      .byte   ?
>0764						outer       .byte   ?
.0762						joystick
>0762						joy0        .byte   ?
>0763						joy1        .byte   ?
.0762						udp
>0762						token       .byte   ?   ; TODO: break out into fields
.0762						file
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						data
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						read        .byte   ?   ; Number of bytes actually read
.0764						wrote
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						wrote       .byte   ?   ; Number of bytes actually read
.0762						directory
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						volume
>0764						len         .byte   ?   ; Length of volname (in buf)
>0765						flags       .byte   ?   ; block size, text encoding
.0764						file
>0764						len         .byte   ?
>0765						flags       .byte   ?   ; block scale, text encoding, approx size
.0764						free
>0764						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.828b						AssembleGroup1:
.828b		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.828d		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8290		80 02		bra $8294			bra 	AsmGroup12
.8292						AssembleGroup2:
.8292		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8294						AsmGroup12:
.8294		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8297		68		pla				pla 								; pop the return address to access the information following.
.8298		fa		plx				plx
.8299		20 20 83	jsr $8320			jsr 	AccessParameters 			; get opcode and save as base
.829c		8d 20 04	sta $0420			sta 	BaseOpcode
.829f		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82a2		d0 08		bne $82ac			bne 	_AG12HaveMask
.82a4		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82a6		20 28 83	jsr $8328			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82a9		8d 21 04	sta $0421			sta 	ModeMask
.82ac						_AG12HaveMask:
.82ac		20 5c 84	jsr $845c			jsr 	TypeAndCalculateOperand 	; get zero page type
.82af		da		phx				phx 								; save found address mode
.82b0		20 8c 83	jsr $838c			jsr 	AssembleModeX
.82b3		fa		plx				plx  								; restore address mode
.82b4		b0 0b		bcs $82c1			bcs 	_AG12Exit
.82b6		20 c2 82	jsr $82c2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82b9		20 8c 83	jsr $838c			jsr 	AssembleModeX
.82bc		b0 03		bcs $82c1			bcs 	_AG12Exit
.82be		4c 5c a8	jmp $a85c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82c1						_AG12Exit:
.82c1		60		rts				rts
.82c2						PromoteToAbsolute:
.82c2		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82c4		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82c6		f0 19		beq $82e1			beq 	_PTADo
.82c8		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82ca		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82cc		f0 13		beq $82e1			beq 	_PTADo
.82ce		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82d0		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82d2		f0 0d		beq $82e1			beq 	_PTADo
.82d4		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82d6		e0 d1		cpx #$d1			cpx 	#AM_IND
.82d8		f0 07		beq $82e1			beq 	_PTADo
.82da		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82dc		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82de		f0 01		beq $82e1			beq 	_PTADo
.82e0		60		rts				rts
.82e1						_PTADo:
.82e1		aa		tax				tax
.82e2		60		rts				rts
.82e3						AssembleGroup3:
.82e3		68		pla				pla 								; get parameters, which is just the opcode.
.82e4		fa		plx				plx
.82e5		20 20 83	jsr $8320			jsr 	AccessParameters 			; get and output opcode
.82e8		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.82eb		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get a 16 bit operand
.82ee		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82f0		38		sec				sec
.82f1		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82f4		48		pha				pha 								; LSB in A
.82f5		a5 60		lda $60				lda 	NSMantissa1
.82f7		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.82fa		aa		tax				tax 								; MSB in X
.82fb		68		pla				pla
.82fc		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82fd		69 7f		adc #$7f			adc 	#$7F
.82ff		90 01		bcc $8302			bcc 	_AG3NoCarry
.8301		e8		inx				inx
.8302						_AG3NoCarry:
.8302		38		sec				sec 								; fix back and write out anyways.
.8303		e9 80		sbc #$80			sbc 	#$80
.8305		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.8308		e0 00		cpx #$00			cpx 	#0 							; was it in range
.830a		f0 0a		beq $8316			beq 	_AG3Exit
.830c		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.830f		29 01		and #$01			and 	#1
.8311		f0 03		beq $8316			beq 	_AG3Exit
.8313		4c 61 a8	jmp $a861			jmp 	RangeError 					; no, branch is out of range
.8316						_AG3Exit:
.8316		60		rts				rts
.8317						AssembleGroup4:
.8317		68		pla				pla 								; pop address
.8318		fa		plx				plx
.8319		20 20 83	jsr $8320			jsr 	AccessParameters 			; access and get first
.831c		20 38 83	jsr $8338			jsr 	AssemblerWriteByte 			; output it.
.831f		60		rts				rts
.8320						AccessParameters:
.8320		8d 1d 04	sta $041d			sta 	ParamStart
.8323		8e 1e 04	stx $041e			stx 	ParamStart+1
.8326		a9 01		lda #$01			lda 	#1
.8328						GetParameter:
.8328		5a		phy				phy
.8329		a8		tay				tay
.832a		ad 1d 04	lda $041d			lda 	ParamStart
.832d		85 36		sta $36				sta 	zTemp0
.832f		ad 1e 04	lda $041e			lda 	ParamStart+1
.8332		85 37		sta $37				sta 	zTemp0+1
.8334		b1 36		lda ($36),y			lda 	(zTemp0),y
.8336		7a		ply				ply
.8337		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8338						AssemblerWriteByte:
.8338		48		pha			pha
.8339		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.833c		29 02		and #$02		and 	#2
.833e		f0 1b		beq $835b		beq 	_AWBNoPrint
.8340		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8343		20 76 83	jsr $8376		jsr 	PrintHex
.8346		ad 1a 04	lda $041a		lda		AssemblerAddress
.8349		20 76 83	jsr $8376		jsr 	PrintHex
.834c		a9 20		lda #$20		lda 	#' '
.834e		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8351		68		pla			pla 									; print byte
.8352		48		pha			pha
.8353		20 76 83	jsr $8376		jsr 	PrintHex
.8356		a9 0d		lda #$0d		lda 	#13
.8358		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.835b						_AWBNoPrint:
.835b		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.835e		85 36		sta $36			sta 	zTemp0
.8360		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8363		f0 0e		beq $8373		beq 	_AWBRange
.8365		85 37		sta $37			sta 	zTemp0+1
.8367		68		pla			pla 									; write byte out
.8368		92 36		sta ($36)		sta 	(zTemp0)
.836a		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.836d		d0 03		bne $8372		bne 	_AWBNoCarry
.836f		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8372						_AWBNoCarry:
.8372		60		rts			rts
.8373						_AWBRange:
.8373		4c 61 a8	jmp $a861		jmp 	RangeError
.8376						PrintHex:
.8376		48		pha				pha
.8377		4a		lsr a				lsr 	a
.8378		4a		lsr a				lsr 	a
.8379		4a		lsr a				lsr 	a
.837a		4a		lsr a				lsr 	a
.837b		20 7f 83	jsr $837f			jsr 	_PrintNibble
.837e		68		pla				pla
.837f						_PrintNibble:
.837f		29 0f		and #$0f			and 	#15
.8381		c9 0a		cmp #$0a			cmp 	#10
.8383		90 02		bcc $8387			bcc 	_NoShift
.8385		69 06		adc #$06			adc 	#6
.8387						_NoShift:
.8387		69 30		adc #$30			adc 	#48
.8389		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.838c						AssembleModeX:
.838c		5a		phy				phy
.838d		ad 1f 04	lda $041f			lda 	IsGroup1
.8390		f0 17		beq $83a9			beq 	_AMXGroup2
.8392		8a		txa				txa 							; is it in group # 1
.8393		29 40		and #$40			and 	#AM_ISG1
.8395		f0 4d		beq $83e4			beq 	_AMXFail 				; no, give up.
.8397		8a		txa				txa 							; get back.
.8398		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.839a		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.839c		d0 22		bne $83c0			bne 	_AMXHaveInfo
.839e		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.83a1		c9 81		cmp #$81			cmp 	#$81
.83a3		f0 3f		beq $83e4			beq 	_AMXFail
.83a5		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83a7		80 17		bra $83c0			bra 	_AMXHaveInfo 			; odd design decision there.
.83a9						_AMXGroup2:
.83a9		8a		txa				txa 							; is it in group 2 ?
.83aa		29 20		and #$20			and 	#AM_ISG2
.83ac		f0 36		beq $83e4			beq 	_AMXFail 				; no, give up.
.83ae		8a		txa				txa 							; get the offset into Y
.83af		29 1f		and #$1f			and 	#$1F
.83b1		4a		lsr a				lsr 	a 						; make it 0-7.
.83b2		4a		lsr a				lsr  	a
.83b3		a8		tay				tay
.83b4		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83b7						_AMXCheckOkay:
.83b7		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83b8		88		dey				dey
.83b9		10 fc		bpl $83b7			bpl 	_AMXCheckOkay
.83bb		90 27		bcc $83e4			bcc 	_AMXFail 				; not allowed.
.83bd		8a		txa				txa  							; get mask back
.83be		29 1f		and #$1f			and 	#$1F
.83c0						_AMXHaveInfo:
.83c0		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83c2		10 04		bpl $83c8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83c4		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83c6		d0 1c		bne $83e4			bne 	_AMXFail
.83c8						_AMXAnySize:
.83c8		18		clc				clc 							; add offset to the base opcode
.83c9		6d 20 04	adc $0420			adc 	BaseOpcode
.83cc						_AMXOutputCode:
.83cc		20 38 83	jsr $8338			jsr 	AssemblerWriteByte 		; write the opcode out.
.83cf		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83d1		f0 0e		beq $83e1			beq 	_AMXExit
.83d3		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83d5		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.83d8		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83da		30 05		bmi $83e1			bmi 	_AMXExit
.83dc		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83de		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.83e1						_AMXExit:
.83e1		7a		ply				ply
.83e2		38		sec				sec
.83e3		60		rts				rts
.83e4						_AMXFail:
.83e4		a0 00		ldy #$00			ldy 	#0
.83e6						_AMXCheckOddities:
.83e6		8a		txa				txa
.83e7		d9 0e 84	cmp $840e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83ea		d0 15		bne $8401			bne 	_AMXCONext
.83ec		b9 0c 84	lda $840c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83ef		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83f2		d0 0d		bne $8401			bne 	_AMXCONext
.83f4		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83f6		10 04		bpl $83fc			bpl 	_AMXCONotZero
.83f8		a5 60		lda $60				lda 	NSMantissa1
.83fa		d0 05		bne $8401			bne 	_AMXCONext
.83fc						_AMXCONotZero:
.83fc		b9 0d 84	lda $840d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83ff		80 cb		bra $83cc			bra 	_AMXOutputCode 			; and assemble it
.8401						_AMXCONext:
.8401		c8		iny				iny
.8402		c8		iny				iny
.8403		c8		iny				iny
.8404		b9 0c 84	lda $840c,y			lda 	ExtraOpcode+0,y 		; end of table
.8407		d0 dd		bne $83e6			bne 	_AMXCheckOddities
.8409						_AMXCOFail:
.8409		7a		ply				ply
.840a		18		clc				clc
.840b		60		rts				rts
.840c						ExtraOpcode:
>840c		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>840f		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8412		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8415		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8418		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>841b		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>841e		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8421		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8424		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8427		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>842a		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.842b						LabelHere:
.842b		c8		iny				iny 								; skip .
.842c		a2 00		ldx #$00			ldx 	#0 							; get a term
.842e		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm
.8431		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8433		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8435		d0 22		bne $8459			bne 	_ALType 					; otherwise typing error
.8437		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8439		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.843b		b5 60		lda $60,x			lda 	NSMantissa1,x
.843d		85 37		sta $37				sta 	zTemp0+1
.843f		5a		phy				phy 								; copy address in (64k)
.8440		a0 01		ldy #$01			ldy 	#1
.8442		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8445		92 36		sta ($36)			sta 	(zTemp0)
.8447		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.844a		91 36		sta ($36),y			sta 	(zTemp0),y
.844c		c8		iny				iny
.844d		a9 00		lda #$00			lda 	#0 							; zero the rest.
.844f		91 36		sta ($36),y			sta 	(zTemp0),y
.8451		c8		iny				iny
.8452		91 36		sta ($36),y			sta 	(zTemp0),y
.8454		c8		iny				iny
.8455		91 36		sta ($36),y			sta 	(zTemp0),y
.8457		7a		ply				ply
.8458		60		rts				rts
.8459						_ALType:
.8459		4c 66 a8	jmp $a866			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.845c						TypeAndCalculateOperand:
.845c		b1 30		lda ($30),y			lda 	(codePtr),y
.845e		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8460		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8462		f0 5b		beq $84bf			beq 	_TACOExit
.8464		c9 80		cmp #$80			cmp 	#KWC_EOL
.8466		f0 57		beq $84bf			beq 	_TACOExit
.8468		c8		iny				iny
.8469		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.846b		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.846d		f0 51		beq $84c0			beq 	CalculateOperand
.846f		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8471		f0 1f		beq $8492			beq 	_TACOIndirect
.8473		88		dey				dey 								; undo get of first character
.8474		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get operand
.8477		b1 30		lda ($30),y			lda 	(codePtr),y
.8479		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.847b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.847d		d0 40		bne $84bf			bne 	_TACOExit
.847f		c8		iny				iny
.8480		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8483		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8485		c9 58		cmp #$58			cmp 	#'X'
.8487		f0 36		beq $84bf			beq 	_TACOExit
.8489		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.848b		c9 59		cmp #$59			cmp 	#'Y'
.848d		f0 30		beq $84bf			beq 	_TACOExit
.848f						_TACOSyntax:
.848f		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.8492						_TACOIndirect:
.8492		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get the operand
.8495		b1 30		lda ($30),y			lda 	(codePtr),y
.8497		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8499		f0 17		beq $84b2			beq 	_TACOIndX
.849b		20 58 96	jsr $9658			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.849e		b1 30		lda ($30),y			lda 	(codePtr),y
.84a0		a2 d1		ldx #$d1			ldx 	#AM_IND
.84a2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84a4		d0 19		bne $84bf			bne 	_TACOExit
.84a6		c8		iny				iny
.84a7		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84aa		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84ac		d0 e1		bne $848f			bne 	_TACOSyntax
.84ae		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84b0		80 0d		bra $84bf			bra 	_TACOExit
.84b2						_TACOIndX:
.84b2		c8		iny				iny
.84b3		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84b6		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84b8		d0 d5		bne $848f			bne 	_TACOSyntax
.84ba		20 58 96	jsr $9658			jsr 	CheckRightBracket			; check )
.84bd		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84bf						_TACOExit:
.84bf		60		rts				rts
.84c0						CalculateOperand:
.84c0		48		pha				pha
.84c1		da		phx				phx
.84c2		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84c4		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.84c7		fa		plx				plx
.84c8		68		pla				pla
.84c9		60		rts				rts
.84ca						TACOCheckXY:
.84ca		b1 30		lda ($30),y			lda 	(codePtr),y
.84cc		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84ce		c9 40		cmp #$40			cmp 	#$40
.84d0		d0 21		bne $84f3			bne 	_TCXYFail
.84d2		b1 30		lda ($30),y			lda 	(codePtr),y
.84d4		18		clc				clc
.84d5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84d7		85 37		sta $37				sta 	zTemp0+1
.84d9		c8		iny				iny
.84da		b1 30		lda ($30),y			lda 	(codePtr),y
.84dc		c8		iny				iny
.84dd		85 36		sta $36				sta 	zTemp0
.84df		5a		phy				phy 								; save position
.84e0		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84e2		b1 36		lda ($36),y			lda 	(zTemp0),y
.84e4		d0 0c		bne $84f2			bne 	_TCXYPopFail
.84e6		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84e8		b1 36		lda ($36),y			lda 	(zTemp0),y
.84ea		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84ec		f0 08		beq $84f6			beq 	_TCXYFound
.84ee		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84f0		f0 04		beq $84f6			beq 	_TCXYFound
.84f2						_TCXYPopFail:
.84f2		7a		ply				ply
.84f3						_TCXYFail:
.84f3		a9 00		lda #$00			lda 	#0
.84f5		60		rts				rts
.84f6						_TCXYFound:
.84f6		7a		ply				ply 								; restore position
.84f7		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84fa						BackloadProgram:
.84fa		20 dd 8f	jsr $8fdd			jsr 	NewProgram 					; does the actual NEW.
.84fd		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84ff		a9 51		lda #$51			lda 	#_BLLoad & $FF
.8501		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8504		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8506		8d 66 07	sta $0766			sta 	BackLoadPage
.8509		a9 00		lda #$00			lda 	#(($6000) & $FF)
.850b		8d 67 07	sta $0767			sta 	0+BackLoadPointer
.850e		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8510		8d 68 07	sta $0768			sta 	1+BackLoadPointer
.8513		a9 ff		lda #$ff			lda 	#$FF
.8515		8d fa ff	sta $fffa			sta 	$FFFA
.8518						_BPLoop:
.8518		a2 ff		ldx #$ff			ldx 	#$FF
.851a		20 66 85	jsr $8566			jsr 	BLReadByte 					; read a byte
.851d		c9 00		cmp #$00			cmp 	#0
.851f		f0 29		beq $854a			beq 	_BPExit 					; if 0 exit
.8521		30 27		bmi $854a			bmi 	_BPExit 					; if -ve exit
.8523						_BPCopy:
.8523		e8		inx				inx  								; copy byte into the lineBuffer
.8524		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8527		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.852a		20 66 85	jsr $8566			jsr 	BLReadByte 					; read next byte
.852d		30 0a		bmi $8539			bmi 	_BPEndLine 					; -ve = EOL
.852f		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8531		d0 02		bne $8535			bne 	_BPNotTab
.8533		a9 20		lda #$20			lda 	#' '
.8535						_BPNotTab:
.8535		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8537		b0 ea		bcs $8523			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8539						_BPEndLine:
.8539		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.853c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.853f		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8542		f0 d4		beq $8518			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8544		38		sec				sec 								; append not insert
.8545		20 c5 ad	jsr $adc5			jsr 	MemoryInsertLine 			; append to current program
.8548		80 ce		bra $8518			bra 	_BPLoop
.854a						_BPExit:
.854a		9c fa ff	stz $fffa			stz 	$FFFA
.854d		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear variables etc.
.8550		60		rts				rts
.8551						_BLLoad:
>8551		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8559		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8566						BLReadByte:
.8566		da		phx				phx
.8567		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8569		ad 66 07	lda $0766			lda 	BackLoadPage	 			; set current page
.856c		85 0b		sta $0b				sta 	8+3
.856e		ad 67 07	lda $0767			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8571		85 36		sta $36				sta 	zTemp0
.8573		ad 68 07	lda $0768			lda 	BackLoadPointer+1
.8576		85 37		sta $37				sta 	zTemp0+1
.8578		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.857a		ee 67 07	inc $0767			inc 	BackLoadPointer 			; bump pointer
.857d		d0 0f		bne $858e			bne 	_BLNoCarry
.857f		ee 68 07	inc $0768			inc 	BackLoadPointer+1
.8582		10 0a		bpl $858e			bpl 	_BLNoCarry 					; need a new page
.8584		48		pha				pha
.8585		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8587		8d 68 07	sta $0768			sta 	BackLoadPointer+1
.858a		ee 66 07	inc $0766			inc 	BackLoadPage 				; next page from source.
.858d		68		pla				pla
.858e						_BLNoCarry:
.858e		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8590		fa		plx				plx
.8591		c9 00		cmp #$00			cmp 	#0
.8593		60		rts				rts
.0766						BackLoadPage:
>0766								.fill  	1
.0767						BackLoadPointer:
>0767								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8594						EditProgramCode:
.8594		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8597		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.859a		20 69 ae	jsr $ae69			jsr 	MemorySearch
.859d		90 05		bcc $85a4			bcc 	_EPCNoDelete 				; reached the end : don't delete
.859f		d0 03		bne $85a4			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.85a1		20 8e ad	jsr $ad8e			jsr 	MemoryDeleteLine 			; delete the line
.85a4						_EPCNoDelete:
.85a4		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.85a7		c9 80		cmp #$80			cmp 	#KWC_EOL
.85a9		f0 0d		beq $85b8			beq 	_EPCNoInsert
.85ab		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85ae		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85b1		20 69 ae	jsr $ae69			jsr 	MemorySearch
.85b4		18		clc				clc 								; insert at this point.
.85b5		20 c5 ad	jsr $adc5			jsr 	MemoryInsertLine 			; insert the line
.85b8						_EPCNoInsert:
.85b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85b9						WarmStart:
.85b9		a2 ff		ldx #$ff			ldx 	#$FF
.85bb		9a		txs				txs
.85bc		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85be		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.85c1		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.85c4		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line
.85c7		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.85ca		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85cd		d0 17		bne $85e6			bne 	_WSEditCode 				; if so,edit code.
.85cf		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85d2		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.85d4		85 30		sta $30				sta 	codePtr
.85d6		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85d8		85 31		sta $31				sta 	codePtr+1
.85da		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.85dd		c9 80		cmp #$80			cmp 	#KWC_EOL
.85df		f0 d8		beq $85b9			beq 	WarmStart
.85e1		20 7a 91	jsr $917a			jsr 	RUNCodePointerLine 			; execute that line.
.85e4		80 d3		bra $85b9			bra 	WarmStart
.85e6						_WSEditCode:
.85e6		20 94 85	jsr $8594			jsr 	EditProgramCode 			; edit the program code
.85e9		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear all variables etc.
.85ec		80 cb		bra $85b9			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85ee						AssembleCommand:
.85ee		a2 00		ldx #$00			ldx 	#0
.85f0		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; start address
.85f3		a5 58		lda $58				lda 	NSMantissa0
.85f5		8d 1a 04	sta $041a			sta 	AssemblerAddress
.85f8		a5 60		lda $60				lda 	NSMantissa1
.85fa		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.85fd		20 60 96	jsr $9660			jsr 	CheckComma
.8600		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; options 0-3
.8603		a5 58		lda $58				lda 	NSMantissa0
.8605		8d 1c 04	sta $041c			sta 	AssemblerControl
.8608		60		rts				rts
.8609		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.860a						AssertCommand:
.860a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.860c		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; the assert test
.860f		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; exit if result is non zero.
.8612		d0 05		bne $8619			bne 	_ACExit
.8614		a9 0a		lda #$0a		lda	#10
.8616		4c 71 96	jmp $9671		jmp	ErrorHandler
.8619						_ACExit:
.8619		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.861a						Command_BLoad:
.861a		a2 00		ldx #$00			ldx 	#0
.861c		20 36 a6	jsr $a636			jsr 	EvaluateString 				; file name to load
.861f		20 60 96	jsr $9660			jsr 	CheckComma 					; consume comma
.8622		e8		inx				inx
.8623		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; load address (full physical address)
.8626		5a		phy				phy
.8627		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8629		a6 60		ldx $60				ldx 	NSMantissa1
.862b		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.862e		b0 4e		bcs $867e			bcs 	CBLErrorHandler 			; error, so fail.
.8630		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8633		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8635		20 81 86	jsr $8681			jsr 	BLOpenPhysicalMemory 		; open for access.
.8638						_BLReadFile:
.8638		ad 6d 07	lda $076d			lda 	BasicFileStream
.863b		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.863d		20 ee 81	jsr $81ee			jsr 	KNLReadBlock 				; read next block
.8640		b0 22		bcs $8664			bcs 	_BLFileError 				; file error, which might be EOF.
.8642		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8644		f0 f2		beq $8638			beq 	_BLReadFile
.8646		8d 6b 07	sta $076b			sta 	BLCopyCounter 				; counter.
.8649		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; copy the buffer out here
.864c		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.864e						_BLCopyLoop:
.864e		bd 5e 06	lda $065e,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8651		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8653		c8		iny				iny
.8654		d0 03		bne $8659			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8656		20 a9 86	jsr $86a9			jsr 	BLAdvancePhysicalMemory
.8659						_BLNoAdjust:
.8659		e8		inx				inx
.865a		ce 6b 07	dec $076b			dec 	BLCopyCounter
.865d		d0 ef		bne $864e			bne 	_BLCopyLoop
.865f		8c 6a 07	sty $076a			sty 	BLYOffset 					; update Y offset
.8662		80 d4		bra $8638			bra 	_BLReadFile 				; go ask for more.
.8664						_BLFileError:
.8664		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8666		d0 16		bne $867e			bne 	CBLErrorHandler				; no, it's an actual error
.8668		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory 		; close the access.
.866b		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.866e		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8671		7a		ply				ply
.8672		60		rts				rts
.8673						CBLCloseError:
.8673		48		pha				pha
.8674		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory
.8677		ad 6d 07	lda $076d			lda 	BasicFileStream
.867a		20 63 82	jsr $8263			jsr 	KNLCloseFile
.867d		68		pla				pla
.867e						CBLErrorHandler:
.867e		4c 88 8d	jmp $8d88			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8681						BLOpenPhysicalMemory:
.8681		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8683		8d 69 07	sta $0769			sta 	BLNormalMapping
.8686		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8688		8d 6a 07	sta $076a			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.868b		64 3a		stz $3a				stz 	zTemp2
.868d		b5 60		lda $60,x			lda 	NSMantissa1,x
.868f		29 1f		and #$1f			and 	#$1F
.8691		09 60		ora #$60			ora 	#BLAccessPage << 5
.8693		85 3b		sta $3b				sta 	zTemp2+1
.8695		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8697		16 60		asl $60,x			asl 	NSMantissa1,x
.8699		2a		rol a				rol 	a
.869a		16 60		asl $60,x			asl 	NSMantissa1,x
.869c		2a		rol a				rol 	a
.869d		16 60		asl $60,x			asl 	NSMantissa1,x
.869f		2a		rol a				rol 	a
.86a0		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.86a2		60		rts				rts
.86a3						BLClosePhysicalMemory:
.86a3		ad 69 07	lda $0769			lda 	BLNormalMapping
.86a6		85 0b		sta $0b				sta 	BLAccessPage+8
.86a8		60		rts				rts
.86a9						BLAdvancePhysicalMemory:
.86a9		48		pha				pha
.86aa		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86ac		a5 3b		lda $3b				lda 	zTemp2+1
.86ae		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86b0		d0 06		bne $86b8			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86b2		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86b4		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86b6		85 3b		sta $3b				sta 	zTemp2+1
.86b8						_BLAPMExit:
.86b8		68		pla				pla
.86b9		60		rts				rts
.0769						BLNormalMapping:
>0769								.fill 	1
.076a						BLYOffset:
>076a								.fill 	1
.076b						BLCopyCounter:
>076b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86ba						Command_BSave:
.86ba		a2 00		ldx #$00			ldx 	#0
.86bc		20 36 a6	jsr $a636			jsr 	EvaluateString 				; file name to load
.86bf		20 60 96	jsr $9660			jsr 	CheckComma 					; consume comma
.86c2		e8		inx				inx
.86c3		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; load address (full physical address)
.86c6		20 60 96	jsr $9660			jsr 	CheckComma 					; consume comma
.86c9		e8		inx				inx
.86ca		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86cd		5a		phy				phy
.86ce		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86d0		a6 60		ldx $60				ldx 	NSMantissa1
.86d2		20 94 81	jsr $8194			jsr 	KNLOpenFileWrite 			; open file for reading
.86d5		b0 62		bcs $8739			bcs 	CBSErrorHandler 			; error, so fail.
.86d7		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.86da		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86dc		20 81 86	jsr $8681			jsr 	BLOpenPhysicalMemory 		; open for access.
.86df		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86e1		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; used for data offset.
.86e4						_BSWriteToFileLoop:
.86e4		38		sec				sec 								; pre decrement count.
.86e5		a5 5a		lda $5a				lda 	NSMantissa0+2
.86e7		e9 01		sbc #$01			sbc 	#1
.86e9		85 5a		sta $5a				sta 	NSMantissa0+2
.86eb		a5 62		lda $62				lda 	NSMantissa1+2
.86ed		e9 00		sbc #$00			sbc 	#0
.86ef		85 62		sta $62				sta 	NSMantissa1+2
.86f1		a5 6a		lda $6a				lda 	NSMantissa2+2
.86f3		e9 00		sbc #$00			sbc 	#0
.86f5		85 6a		sta $6a				sta 	NSMantissa2+2
.86f7		30 15		bmi $870e			bmi 	_BSFileComplete 			; undercounted, so exit.
.86f9		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86fb		9d 5e 06	sta $065e,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86fe		e8		inx				inx
.86ff		c8		iny				iny 								; next byte
.8700		d0 03		bne $8705			bne 	_BSNoCheck
.8702		20 a9 86	jsr $86a9			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8705						_BSNoCheck:
.8705		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8707		d0 db		bne $86e4			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8709		20 1c 87	jsr $871c			jsr 	BSFlushBuffer 				; yes, flush the buffer
.870c		80 d6		bra $86e4			bra 	_BSWriteToFileLoop 			; and keep on going
.870e						_BSFileComplete:
.870e		20 1c 87	jsr $871c			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8711		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory 		; close the access.
.8714		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.8717		20 63 82	jsr $8263			jsr 	KNLCloseFile
.871a		7a		ply				ply
.871b		60		rts				rts
.871c						BSFlushBuffer:
.871c		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.871e		f0 0d		beq $872d			beq 	_BSFBExit 					; if so, exit.
.8720		a9 5e		lda #$5e			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8722		85 36		sta $36				sta 	zTemp0
.8724		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.8726		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8728		20 48 94	jsr $9448			jsr 	CLWriteByteBlock 			; write it.
.872b		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.872d						_BSFBExit:
.872d		60		rts				rts
.872e						CBSSCloseError:
.872e		48		pha				pha
.872f		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory
.8732		ad 6d 07	lda $076d			lda 	BasicFileStream
.8735		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8738		68		pla				pla
.8739						CBSErrorHandler:
.8739		4c 88 8d	jmp $8d88			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.873c						CallCommand:
.873c		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.873e		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.8741						_CCClear
.8741		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8742		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; these are optional sequentially.
.8745		e0 04		cpx #$04			cpx 	#4
.8747		d0 f8		bne $8741			bne 	_CCClear
.8749		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.874b						_CCCParam:
.874b		b1 30		lda ($30),y			lda 	(codePtr),y
.874d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.874f		d0 09		bne $875a			bne 	_CCCRun6502
.8751		c8		iny				iny 								; skip comma
.8752		e8		inx				inx	 								; next level
.8753		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8756		e0 03		cpx #$03			cpx 	#3
.8758		90 f1		bcc $874b			bcc 	_CCCParam 					; done all 3 ?
.875a						_CCCRun6502:
.875a		5a		phy				phy 								; save position
.875b		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.875d		85 37		sta $37				sta 	zTemp0+1
.875f		a5 58		lda $58				lda 	NSMantissa0
.8761		85 36		sta $36				sta 	zTemp0
.8763		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8765		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8767		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8769		20 6e 87	jsr $876e			jsr 	_CCCZTemp0 					; call zTemp0
.876c		7a		ply				ply 								; restore position and exit
.876d		60		rts				rts
.876e						_CCCZTemp0:
.876e		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8771						ClearCommand:
.8771		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8773		85 36		sta $36				sta 	0+zTemp0
.8775		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8777		85 37		sta $37				sta 	1+zTemp0
.8779						_ClearZeroLoop:
.8779		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.877b		f0 24		beq $87a1			beq 	_ClearZeroEnd
.877d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.877f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8781						_ClearOneVariable:
.8781		91 36		sta ($36),y			sta 	(zTemp0),y
.8783		c8		iny				iny
.8784		c0 08		cpy #$08			cpy 	#8
.8786		d0 f9		bne $8781			bne 	_ClearOneVariable
.8788		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.878a		b1 36		lda ($36),y			lda 	(zTemp0),y
.878c		c9 18		cmp #$18			cmp 	#NSTProcedure
.878e		d0 04		bne $8794			bne 	_ClearNotProcedure
.8790		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8792		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8794						_ClearNotProcedure:
.8794		18		clc				clc 								; go to the next variable
.8795		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8797		65 36		adc $36				adc 	zTemp0
.8799		85 36		sta $36				sta 	zTemp0
.879b		90 dc		bcc $8779			bcc 	_ClearZeroLoop
.879d		e6 37		inc $37				inc 	zTemp0+1
.879f		80 d8		bra $8779			bra 	_ClearZeroLoop
.87a1						_ClearZeroEnd:
.87a1		18		clc				clc
.87a2		a5 36		lda $36				lda 	zTemp0
.87a4		69 01		adc #$01			adc 	#1
.87a6		8d 08 04	sta $0408			sta 	lowMemPtr
.87a9		a5 37		lda $37				lda 	zTemp0+1
.87ab		69 00		adc #$00			adc 	#0
.87ad		8d 09 04	sta $0409			sta 	lowMemPtr+1
.87b0		20 23 b8	jsr $b823			jsr 	StackReset
.87b3		20 89 b8	jsr $b889			jsr 	StringSystemInitialise
.87b6		20 07 95	jsr $9507			jsr 	ProcedureScan
.87b9		20 1c 91	jsr $911c			jsr 	Command_Restore
.87bc		9c 1a 04	stz $041a			stz 	AssemblerAddress
.87bf		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.87c2		9c 1c 04	stz $041c			stz 	AssemblerControl
.87c5		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.87c8		20 ab a1	jsr $a1ab			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87cc						ClearScreen:
.87cc		5a		phy				phy
.87cd		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87cf		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87d2		7a		ply				ply
.87d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87d4						Command_Data:
.87d4		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87d6		a2 80		ldx #$80			ldx 	#KWC_EOL
.87d8		20 59 95	jsr $9559			jsr 	ScanForward
.87db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87dc						DimCommand:
.87dc		b1 30		lda ($30),y			lda 	(codePtr),y
.87de		29 c0		and #$c0			and 	#$C0
.87e0		c9 40		cmp #$40			cmp 	#$40
.87e2		d0 7a		bne $885e			bne 	_DCSyntax 				; n o, error.
.87e4		b1 30		lda ($30),y			lda 	(codePtr),y
.87e6		18		clc				clc
.87e7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87e9		85 3f		sta $3f				sta 	zaTemp+1
.87eb		c8		iny				iny
.87ec		b1 30		lda ($30),y			lda 	(codePtr),y
.87ee		c8		iny				iny
.87ef		85 3e		sta $3e				sta 	zaTemp
.87f1		5a		phy				phy
.87f2		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87f4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87f6		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87f8		c9 18		cmp #$18			cmp 	#NSTProcedure
.87fa		f0 62		beq $885e			beq 	_DCSyntax
.87fc		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87fe		29 04		and #$04			and 	#NSBIsArray
.8800		f0 64		beq $8866			beq 	_DCType
.8802		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8804		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8806		d0 59		bne $8861			bne 	_DCRedefine
.8808		7a		ply				ply
.8809		20 69 88	jsr $8869			jsr 	_DCGetSize 				; get array size, check it.
.880c		5a		phy				phy
.880d		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.880f		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8811		7a		ply				ply 							; is there a second (e.g. ,x)
.8812		b1 30		lda ($30),y			lda 	(codePtr),y
.8814		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8816		d0 0a		bne $8822			bne 	_DCOneDimension
.8818		c8		iny				iny 							; skip comma
.8819		20 69 88	jsr $8869			jsr 	_DCGetSize 				; get 2nd array size
.881c		5a		phy				phy
.881d		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.881f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8821		7a		ply				ply
.8822						_DCOneDimension:
.8822		5a		phy				phy 							; save position
.8823		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8825		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8827		aa		tax				tax
.8828		c8		iny				iny
.8829		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.882b		e8		inx				inx 							; bump them.
.882c		1a		inc a				inc 	a
.882d		20 89 a6	jsr $a689			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8830		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8832		29 e0		and #$e0			and 	#$E0
.8834		d0 23		bne $8859			bne 	_DCSize
.8836		a0 02		ldy #$02			ldy 	#2 						; get base type
.8838		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.883a		20 77 88	jsr $8877			jsr 	ScaleByBaseType 		; scale by base type
.883d		a5 36		lda $36				lda 	zTemp0
.883f		a6 37		ldx $37				ldx 	zTemp0+1
.8841		20 6d a1	jsr $a16d			jsr 	AllocateXABytes 		; allocate memory
.8844		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8846		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8848		c8		iny				iny
.8849		8a		txa				txa
.884a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.884c		7a		ply				ply 							; get position back
.884d		20 58 96	jsr $9658			jsr 	CheckRightBracket 		; check )
.8850		b1 30		lda ($30),y			lda 	(codePtr),y
.8852		c8		iny				iny 							; consume in case
.8853		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8855		f0 85		beq $87dc			beq 	DimCommand
.8857		88		dey				dey 							; undo consume
.8858		60		rts				rts
.8859						_DCSize:
.8859		a9 16		lda #$16		lda	#22
.885b		4c 71 96	jmp $9671		jmp	ErrorHandler
.885e						_DCSyntax:
.885e		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.8861						_DCRedefine:
.8861		a9 15		lda #$15		lda	#21
.8863		4c 71 96	jmp $9671		jmp	ErrorHandler
.8866						_DCType:
.8866		4c 66 a8	jmp $a866			jmp 	TypeError
.8869						_DCGetSize:
.8869		a2 00		ldx #$00			ldx 	#0 						; get first index.
.886b		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 	; get array dimension
.886e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8870		f0 e7		beq $8859			beq 	_DCSize
.8872		c9 fe		cmp #$fe			cmp 	#254
.8874		f0 e3		beq $8859			beq 	_DCSize
.8876		60		rts				rts
.8877						ScaleByBaseType:
.8877		29 10		and #$10			and 	#NSBIsString 			; is it string
.8879		d0 19		bne $8894			bne 	_SBBTString
.887b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.887d		48		pha				pha
.887e		a5 36		lda $36				lda 	zTemp0
.8880		48		pha				pha
.8881		06 36		asl $36				asl 	zTemp0 					; x 2
.8883		26 37		rol $37				rol 	zTemp0+1
.8885		06 36		asl $36				asl 	zTemp0 					; x 4
.8887		26 37		rol $37				rol 	zTemp0+1
.8889		68		pla				pla 							; add stacked value = x 5
.888a		65 36		adc $36				adc 	zTemp0
.888c		85 36		sta $36				sta 	zTemp0
.888e		68		pla				pla
.888f		65 37		adc $37				adc 	zTemp0+1
.8891		85 37		sta $37				sta 	zTemp0+1
.8893		60		rts				rts
.8894						_SBBTString:
.8894		06 36		asl $36				asl 	zTemp0
.8896		26 37		rol $37				rol 	zTemp0+1
.8898		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8899						Command_Dir:
.8899		ad 5e 07	lda $075e			lda     KNLDefaultDrive				; set drive to list.
.889c		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.889e		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.88a0		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.88a3		b0 4f		bcs $88f4			bcs     _CDExit
.88a5						_CDEventLoop:
.88a5		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.88a8		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.88ab		b0 f8		bcs $88a5			bcs     _CDEventLoop
.88ad		ad 5f 07	lda $075f			lda     KNLEvent.type
.88b0		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88b2		f0 40		beq $88f4			beq    	_CDExit
.88b4		20 b9 88	jsr $88b9			jsr     _CDMessages 				; handle various messages
.88b7		80 ec		bra $88a5			bra     _CDEventLoop
.88b9						_CDMessages:
.88b9		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88bb		f0 15		beq $88d2			beq     _CDEVRead
.88bd		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88bf		f0 19		beq $88da			beq     _CDEVVolume
.88c1		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88c3		f0 32		beq $88f7			beq     _CDEVFile
.88c5		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88c7		f0 70		beq $8939			beq     _CDEVFree
.88c9		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88cb		f0 6e		beq $893b			beq     _CDEVEOF
.88cd		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88cf		f0 6a		beq $893b			beq     _CDEVEOF
.88d1		60		rts				rts
.88d2						_CDEVRead:
.88d2		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.88d5		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88d7		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88da						_CDEVVolume:
.88da		a9 5b		lda #$5b			lda 	#"["
.88dc		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88df		ad 64 07	lda $0764			lda     KNLEvent.directory.volume.len
.88e2		20 43 89	jsr $8943			jsr     _CDReadData
.88e5		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.88e8		a9 5d		lda #$5d			lda 	#"]"
.88ea		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88ed		a9 0d		lda #$0d			lda 	#13
.88ef		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88f2		80 de		bra $88d2			bra     _CDEVRead
.88f4						_CDExit:
.88f4		4c b9 85	jmp $85b9			jmp 	WarmStart
.88f7						_CDEVFile:
.88f7		a9 20		lda #$20			lda 	#32
.88f9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88fc		ad 64 07	lda $0764			lda     KNLEvent.directory.file.len
.88ff		48		pha				pha
.8900		20 43 89	jsr $8943			jsr     _CDReadData
.8903		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8906		68		pla				pla
.8907		49 ff		eor #$ff			eor 	#$FF
.8909		38		sec				sec
.890a		69 10		adc #$10			adc 	#16
.890c		aa		tax				tax
.890d						_CDEVTab:
.890d		a9 20		lda #$20			lda 	#32
.890f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8912		ca		dex				dex
.8913		10 f8		bpl $890d			bpl 	_CDEVTab
.8915		20 5a 89	jsr $895a			jsr 	_CDReadExtended
.8918		ad 26 05	lda $0526			lda 	lineBuffer
.891b		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.891e		20 e0 9a	jsr $9ae0			jsr 	ConvertInt16
.8921		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8924		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.8926		a9 2d		lda #$2d			lda 	#_CDEVFMessage & $FF
.8928		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.892b		80 a5		bra $88d2			bra     _CDEVRead
.892d						_CDEVFMessage:
>892d		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8935		29 2e 0d 00
.8939						_CDEVFree:
.8939		80 00		bra $893b			bra     _CDEVEOF
.893b						_CDEVEOF:
.893b		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.893e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8940		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8943						_CDReadData:
.8943		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8945		a9 26		lda #$26			lda     #lineBuffer & $FF
.8947		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8949		a9 05		lda #$05			lda     #lineBuffer >> 8
.894b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.894d		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8950		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8952		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8955		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8957		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8959		60		rts				rts
.895a						_CDReadExtended:
.895a		a9 02		lda #$02			lda     #2
.895c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.895e		a9 26		lda #$26			lda     #lineBuffer & $FF
.8960		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8962		a9 05		lda #$05			lda     #lineBuffer >> 8
.8964		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8966		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8969						Command_Drive:
.8969		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.896c		20 90 81	jsr $8190			jsr 	KNLSetDrive
.896f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8970						EndCommand:
.8970		4c b9 85	jmp $85b9			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8973						ForCommand:
.8973		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8975		20 bd b7	jsr $b7bd			jsr 	StackOpen
.8978		a2 00		ldx #$00			ldx 	#0
.897a		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm
.897d		b5 50		lda $50,x			lda 	NSStatus,x
.897f		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8981		d0 47		bne $89ca			bne		_FCError
.8983		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8985		20 68 96	jsr $9668			jsr 	CheckNextA
.8988		e8		inx				inx
.8989		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; <from> in +1
.898c		b1 30		lda ($30),y			lda 	(codePtr),y
.898e		c8		iny				iny 								; consume it
.898f		48		pha				pha 								; save on stack for later
.8990		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8992		f0 04		beq $8998			beq 	_FCNoSyntax
.8994		c9 da		cmp #$da			cmp 	#KWD_TO
.8996		d0 35		bne $89cd			bne 	_FCSyntaxError
.8998						_FCNoSyntax:
.8998		e8		inx				inx
.8999		20 4b a6	jsr $a64b			jsr 	EvaluateInteger
.899c		20 02 b8	jsr $b802			jsr 	STKSaveCodePosition 		; save loop back position
.899f		68		pla				pla 								; restore DOWNTO or TO
.89a0		5a		phy				phy 								; save Y on the stack
.89a1		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89a3		f0 02		beq $89a7			beq 	_FCNotDownTo
.89a5		a9 02		lda #$02			lda 	#2
.89a7						_FCNotDownTo:
.89a7		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89a8		a0 10		ldy #$10			ldy 	#16
.89aa		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89ac		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89ae		a5 58		lda $58				lda 	NSMantissa0
.89b0		91 34		sta ($34),y			sta 	(basicStack),y
.89b2		a5 60		lda $60				lda 	NSMantissa1
.89b4		c8		iny				iny
.89b5		91 34		sta ($34),y			sta 	(basicStack),y
.89b7		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89b9		a2 01		ldx #$01			ldx 	#1
.89bb		20 d0 89	jsr $89d0			jsr 	FCIntegerToStack
.89be		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89c0		a2 02		ldx #$02			ldx 	#2
.89c2		20 d0 89	jsr $89d0			jsr 	FCIntegerToStack
.89c5		20 eb 89	jsr $89eb			jsr 	CopyIndexToReference
.89c8		7a		ply				ply 								; restore position
.89c9		60		rts				rts
.89ca						_FCError:
.89ca		4c 66 a8	jmp $a866			jmp 	TypeError
.89cd						_FCSyntaxError:
.89cd		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.89d0						FCIntegerToStack:
.89d0		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89d2		10 03		bpl $89d7			bpl	 	_FCNotNegative
.89d4		20 a7 a6	jsr $a6a7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89d7						_FCNotNegative:
.89d7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89d9		91 34		sta ($34),y			sta 	(basicStack),y
.89db		c8		iny				iny
.89dc		b5 60		lda $60,x			lda 	NSMantissa1,x
.89de		91 34		sta ($34),y			sta 	(basicStack),y
.89e0		c8		iny				iny
.89e1		b5 68		lda $68,x			lda 	NSMantissa2,x
.89e3		91 34		sta ($34),y			sta 	(basicStack),y
.89e5		c8		iny				iny
.89e6		b5 70		lda $70,x			lda 	NSMantissa3,x
.89e8		91 34		sta ($34),y			sta 	(basicStack),y
.89ea		60		rts				rts
.89eb						CopyIndexToReference:
.89eb		5a		phy				phy
.89ec		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89ee		38		sec				sec 								; (because we copy from offset 8)
.89ef		b1 34		lda ($34),y			lda 	(basicStack),y
.89f1		e9 08		sbc #$08			sbc 	#8
.89f3		85 36		sta $36				sta 	zTemp0
.89f5		c8		iny				iny
.89f6		b1 34		lda ($34),y			lda 	(basicStack),y
.89f8		e9 00		sbc #$00			sbc 	#0
.89fa		85 37		sta $37				sta 	zTemp0+1
.89fc		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89fe		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a00		b1 34		lda ($34),y			lda 	(basicStack),y
.8a02		0a		asl a				asl 	a 							; into carry
.8a03		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a05		90 14		bcc $8a1b			bcc 	_CITRNormal
.8a07		38		sec				sec
.8a08						_CITRNegative:
.8a08		a9 00		lda #$00			lda 	#0
.8a0a		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a0c		91 36		sta ($36),y			sta 	(zTemp0),y
.8a0e		c8		iny				iny
.8a0f		ca		dex				dex
.8a10		d0 f6		bne $8a08			bne 	_CITRNegative
.8a12		88		dey				dey 								; look at MSB of mantissa
.8a13		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a15		09 80		ora #$80			ora 	#$80
.8a17		91 36		sta ($36),y			sta 	(zTemp0),y
.8a19		7a		ply				ply
.8a1a		60		rts				rts
.8a1b						_CITRNormal:
.8a1b		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a1d		91 36		sta ($36),y			sta 	(zTemp0),y
.8a1f		c8		iny				iny
.8a20		ca		dex				dex
.8a21		d0 f8		bne $8a1b			bne 	_CITRNormal
.8a23		7a		ply				ply 								; and exit.
.8a24		60		rts				rts
.8a25						NextCommand:
.8a25		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a27		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a29		20 ea b7	jsr $b7ea			jsr 	StackCheckFrame
.8a2c		5a		phy				phy
.8a2d		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a2f		b1 34		lda ($34),y			lda 	(basicStack),y
.8a31		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a33		30 02		bmi $8a37			bmi 	_NCStepNeg
.8a35		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a37						_NCStepNeg:
.8a37		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a39		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a3b		18		clc				clc
.8a3c						_NCBump:
.8a3c		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a3e		91 34		sta ($34),y			sta 	(basicStack),y
.8a40		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a42		c8		iny				iny 								; next byte
.8a43		ca		dex				dex 								; do four times
.8a44		d0 f6		bne $8a3c			bne 	_NCBump
.8a46		20 eb 89	jsr $89eb			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a49		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a4b		b1 34		lda ($34),y			lda 	(basicStack),y
.8a4d		0a		asl a				asl 	a 							; sign bit to carry
.8a4e		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a50		85 38		sta $38				sta 	zTemp1
.8a52		90 02		bcc $8a56			bcc 	_NCCompRev 					; use if step is +ve
.8a54		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a56						_NCCompRev:
.8a56		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a58		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a5a		85 39		sta $39				sta 	zTemp1+1
.8a5c		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a5e		38		sec				sec
.8a5f						_NCCompare:
.8a5f		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a61		b1 34		lda ($34),y			lda 	(basicStack),y
.8a63		a4 39		ldy $39				ldy 	zTemp1+1
.8a65		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a67		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a69		e6 39		inc $39				inc 	zTemp1+1
.8a6b		ca		dex				dex 								; do it 4 times.
.8a6c		d0 f1		bne $8a5f			bne 	_NCCompare
.8a6e		50 02		bvc $8a72			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a70		49 80		eor #$80			eor 	#$80
.8a72						_NCNoOverflow:
.8a72		7a		ply				ply 								; restore Y position
.8a73		0a		asl a				asl 	a 							; is bit 7 set.
.8a74		90 04		bcc $8a7a			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a76		20 dc b7	jsr $b7dc			jsr 	StackClose 					; exit the loop
.8a79		60		rts				rts
.8a7a						_NCLoopBack:
.8a7a		20 13 b8	jsr $b813			jsr 	STKLoadCodePosition 		; loop back
.8a7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a7e						Command_GOSUB:
.8a7e		a2 00		ldx #$00			ldx 	#0
.8a80		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a83		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a85		20 bd b7	jsr $b7bd			jsr 	StackOpen 					; create frame
.8a88		20 02 b8	jsr $b802			jsr 	STKSaveCodePosition 		; save current position
.8a8b		4c a1 8a	jmp $8aa1			jmp 	GotoStackX
.8a8e						Command_RETURN:
.8a8e		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a90		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a92		20 ea b7	jsr $b7ea			jsr 	StackCheckFrame
.8a95		20 13 b8	jsr $b813			jsr 	STKLoadCodePosition 		; restore code position
.8a98		20 dc b7	jsr $b7dc			jsr 	StackClose
.8a9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a9c						GotoCommand:
.8a9c		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a9e		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.8aa1						GotoStackX:
.8aa1		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8aa3		48		pha				pha 								; it is slightly inefficient, just in cases.
.8aa4		b5 58		lda $58,x			lda 	NSMantissa0,x
.8aa6		fa		plx				plx
.8aa7		20 69 ae	jsr $ae69			jsr 	MemorySearch 				; transfer to line number AX.
.8aaa		90 05		bcc $8ab1			bcc 	_GotoError 					; not found, off end.
.8aac		d0 03		bne $8ab1			bne 	_GotoError 					; not found exactly
.8aae		4c 73 91	jmp $9173			jmp 	RunNewLine 					; and go straight to new line code.
.8ab1						_GotoError:
.8ab1		a9 0d		lda #$0d		lda	#13
.8ab3		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ab6						IfCommand:
.8ab6		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8ab8		20 2c a6	jsr $a62c			jsr 	EvaluateNumber
.8abb		b1 30		lda ($30),y			lda 	(codePtr),y
.8abd		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8abf		d0 0a		bne $8acb			bne 	_IfStructured 				; we still support it.
.8ac1		c8		iny				iny 								; consume THEN
.8ac2		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; is it zero
.8ac5		f0 01		beq $8ac8			beq 	_IfFail 					; if fail, go to next line
.8ac7		60		rts				rts 								; if THEN just continue
.8ac8						_IfFail:
.8ac8		4c 4e 91	jmp $914e			jmp 	EOLCommand
.8acb						_IfStructured:
.8acb		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; is it zero
.8ace		d0 07		bne $8ad7			bne 	_IfExit 					; if not, then continue normally.
.8ad0		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8ad2		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8ad4		20 59 95	jsr $9559			jsr 	ScanForward 				; and run from there
.8ad7						_IfExit:
.8ad7		60		rts				rts
.8ad8						ElseCode:
.8ad8		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ada		aa		tax				tax 								; so just go to the structure exit
.8adb		20 59 95	jsr $9559			jsr 	ScanForward
.8ade		60		rts				rts
.8adf						EndIf:
.8adf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ae0						Command_Input:
.8ae0		9c 24 04	stz $0424			stz 	isPrintFlag
.8ae3		80 0c		bra $8af1			bra 	Command_IP_Main
.8ae5						Command_CPrint:
.8ae5		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ae7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aea		80 05		bra $8af1			bra 	Command_IP_Main
.8aec						Command_Print:
.8aec		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8aee		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8af1						Command_IP_Main:
.8af1		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8af2						_CPLoop:
.8af2		08		php				php 								; save last action flag
.8af3		b1 30		lda ($30),y			lda 	(codePtr),y
.8af5		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8af7		f0 54		beq $8b4d			beq 	_CPExit
.8af9		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8afb		f0 50		beq $8b4d			beq 	_CPExit
.8afd		68		pla				pla 								; throw last action flag
.8afe		b1 30		lda ($30),y			lda 	(codePtr),y
.8b00		c8		iny				iny
.8b01		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8b03		f0 45		beq $8b4a			beq 	_CPContinueWithSameLine
.8b05		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b07		f0 3c		beq $8b45			beq 	_CPTab
.8b09		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b0b		f0 34		beq $8b41			beq 	_CPNewLine
.8b0d		88		dey				dey 								; undo the get.
.8b0e		20 73 9b	jsr $9b73			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b11		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b13		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b15		f0 0d		beq $8b24			beq 	_CPIsValue 					; no, display it.
.8b17		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b1a		d0 05		bne $8b21			bne 	_CPIsPrint 					; otherwise display.
.8b1c		20 56 8b	jsr $8b56			jsr 	CIInputValue 				; input a value to the reference
.8b1f		80 20		bra $8b41			bra 	_CPNewLine
.8b21						_CPIsPrint:
.8b21		20 38 9e	jsr $9e38			jsr 	Dereference 				; dereference if required.
.8b24						_CPIsValue:
.8b24		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b26		29 10		and #$10			and 	#NSBIsString
.8b28		f0 09		beq $8b33			beq 	_CPNumber
.8b2a		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b2c		a5 58		lda $58				lda 	NSMantissa0
.8b2e		20 b9 8b	jsr $8bb9			jsr 	CPPrintStringXA
.8b31		80 be		bra $8af1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b33						_CPNumber:
.8b33		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b35		20 13 a5	jsr $a513			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b38		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b3a		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b3c		20 b9 8b	jsr $8bb9			jsr 	CPPrintStringXA 			; print it.
.8b3f		80 b0		bra $8af1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b41						_CPNewLine:
.8b41		a9 0d		lda #$0d			lda 	#13
.8b43		80 02		bra $8b47			bra 	_CPPrintCharDirect
.8b45						_CPTab:
.8b45		a9 09		lda #$09			lda 	#9 							; print TAB
.8b47						_CPPrintCharDirect:
.8b47		20 d4 8b	jsr $8bd4			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b4a						_CPContinueWithSameLine:
.8b4a		38		sec				sec 								; loop round with carry set, which
.8b4b		80 a5		bra $8af2			bra 	_CPLoop 					; will inhibit final CR
.8b4d						_CPExit:
.8b4d		28		plp				plp 								; get last action flag
.8b4e		b0 05		bcs $8b55			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b50		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b52		20 d4 8b	jsr $8bd4			jsr 	CPPVControl
.8b55						_CPExit2:
.8b55		60		rts				rts
.8b56						CIInputValue:
.8b56		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b58						_CIInputLine:
.8b58		20 d7 8b	jsr $8bd7			jsr 	CPInputVector 				; get key
.8b5b		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b5d		f0 1f		beq $8b7e			beq 	_CIHaveValue
.8b5f		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b61		f0 11		beq $8b74			beq 	_CIBackspace
.8b63		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b65		90 f1		bcc $8b58			bcc 	_CIInputLine
.8b67		e0 50		cpx #$50			cpx 	#80 						; max length
.8b69		b0 ed		bcs $8b58			bcs 	_CIInputLine
.8b6b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b6e		e8		inx				inx
.8b6f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b72		80 e4		bra $8b58			bra 	_CIInputLine
.8b74						_CIBackspace:
.8b74		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b76		f0 e0		beq $8b58			beq 	_CIInputLine
.8b78		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b7b		ca		dex				dex
.8b7c		80 da		bra $8b58			bra 	_CIInputLine
.8b7e						_CIHaveValue:
.8b7e		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b81		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b83		29 10		and #$10			and 	#NSBIsString
.8b85		f0 17		beq $8b9e			beq 	_CIAssignNumber 			; assign a number
.8b87		a2 01		ldx #$01			ldx 	#1
.8b89		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b8b		95 58		sta $58,x			sta 	NSMantissa0,x
.8b8d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b8f		95 60		sta $60,x			sta 	NSMantissa1,x
.8b91		74 68		stz $68,x			stz 	NSMantissa2,x
.8b93		74 70		stz $70,x			stz 	NSMantissa3,x
.8b95		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b97		95 50		sta $50,x			sta  	NSStatus,x
.8b99		ca		dex				dex 								; X = 0
.8b9a		20 13 8c	jsr $8c13			jsr 	AssignVariable
.8b9d		60		rts				rts
.8b9e						_CIAssignNumber:
.8b9e		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8ba0		85 36		sta $36				sta 	zTemp0
.8ba2		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8ba4		85 37		sta $37				sta 	zTemp0+1
.8ba6		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8ba8		20 55 a3	jsr $a355			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8bab		90 07		bcc $8bb4			bcc 	_CIIsOkay
.8bad		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8baf		20 cc 8b	jsr $8bcc			jsr 	CPPrintVector
.8bb2		80 a2		bra $8b56			bra 	CIInputValue
.8bb4						_CIIsOkay:
.8bb4		ca		dex				dex 								; X = 0
.8bb5		20 13 8c	jsr $8c13			jsr 	AssignVariable
.8bb8		60		rts				rts
.8bb9						CPPrintStringXA:
.8bb9		5a		phy				phy
.8bba		86 37		stx $37				stx 	zTemp0+1
.8bbc		85 36		sta $36				sta 	zTemp0
.8bbe		a0 00		ldy #$00			ldy 	#0
.8bc0						_PSXALoop:
.8bc0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bc2		f0 06		beq $8bca			beq 	_PSXAExit
.8bc4		20 cc 8b	jsr $8bcc			jsr 	CPPrintVector
.8bc7		c8		iny				iny
.8bc8		80 f6		bra $8bc0			bra 	_PSXALoop
.8bca						_PSXAExit:
.8bca		7a		ply				ply
.8bcb		60		rts				rts
.8bcc						CPPrintVector:
.8bcc		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bcf		30 03		bmi $8bd4			bmi 	CPPVControl
.8bd1		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bd4						CPPVControl:
.8bd4		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bd7						CPInputVector:
.8bd7		4c 6b 80	jmp $806b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bda						LetCommand:
.8bda		a2 00		ldx #$00			ldx 	#0
.8bdc		b1 30		lda ($30),y			lda 	(codePtr),y
.8bde		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8be0		d0 14		bne $8bf6			bne 	_LCStandard
.8be2		c8		iny				iny 								; skip equal
.8be3		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8be6		20 38 9e	jsr $9e38			jsr 	Dereference 				; dereference it to a value
.8be9		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8beb		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bed		95 50		sta $50,x			sta 	NSStatus,x
.8bef		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bf1		d0 0f		bne $8c02			bne 	_LCMain
.8bf3		4c 66 a8	jmp $a866			jmp 	TypeError 					; was a reference before.
.8bf6						_LCStandard:
.8bf6		ad 5d 9b	lda $9b5d			lda 	PrecedenceLevel+"*"			; precedence > this
.8bf9		20 77 9b	jsr $9b77			jsr 	EvaluateExpressionAtPrecedence
.8bfc		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bfe		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c00		f0 0e		beq $8c10			beq 	_LetGoProc 					; it's a procedure call.
.8c02						_LCMain:
.8c02		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c04		20 68 96	jsr $9668			jsr 	CheckNextA
.8c07		e8		inx				inx 								; RHS
.8c08		20 23 a6	jsr $a623			jsr 	EvaluateValue
.8c0b		ca		dex				dex
.8c0c		20 13 8c	jsr $8c13			jsr 	AssignVariable
.8c0f		60		rts				rts
.8c10						_LetGoProc:
.8c10		4c 24 90	jmp $9024			jmp 	CallProcedure
.8c13						AssignVariable:
.8c13		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c15		48		pha				pha 								; save a copy
.8c16		55 51		eor $51,x			eor 	NSStatus+1,x
.8c18		29 10		and #$10			and 	#NSBIsString
.8c1a		d0 0b		bne $8c27			bne 	_ASError
.8c1c		68		pla				pla 								; get back
.8c1d		29 10		and #$10			and 	#NSBIsString 				; check type
.8c1f		d0 03		bne $8c24			bne 	_ASString
.8c21		4c 76 9d	jmp $9d76			jmp 	AssignNumber
.8c24						_ASString:
.8c24		4c d4 9d	jmp $9dd4			jmp 	AssignString
.8c27						_ASError:
.8c27		4c 66 a8	jmp $a866			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c2a						Command_List:
.8c2a		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c2d		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c2f		20 7f 80	jsr $807f			jsr 	SNDCommand
.8c32		b1 30		lda ($30),y			lda 	(codePtr),y
.8c34		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c36		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c38		f0 72		beq $8cac			beq 	_CLListProcedure
.8c3a		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c3c		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c3e		a9 ff		lda #$ff			lda 	#$FF
.8c40		85 5f		sta $5f				sta 	NSMantissa0+7
.8c42		85 67		sta $67				sta 	NSMantissa1+7
.8c44		b1 30		lda ($30),y			lda 	(codePtr),y
.8c46		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c48		f0 1a		beq $8c64			beq 	_CLSecond
.8c4a		20 29 8d	jsr $8d29			jsr 	CLIsDigit 					; if not digit, list all
.8c4d		b0 20		bcs $8c6f			bcs 	_CLStart
.8c4f		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c51		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.8c54		b1 30		lda ($30),y			lda 	(codePtr),y
.8c56		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c58		f0 0a		beq $8c64			beq 	_CLSecond 					; if so go get it
.8c5a		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c5c		85 5f		sta $5f				sta 	NSMantissa0+7
.8c5e		a5 64		lda $64				lda 	NSMantissa1+4
.8c60		85 67		sta $67				sta 	NSMantissa1+7
.8c62		80 0b		bra $8c6f			bra 	_CLStart
.8c64						_CLSecond:
.8c64		c8		iny				iny 								; consume comma
.8c65		20 29 8d	jsr $8d29			jsr 	CLIsDigit 					; digit found
.8c68		b0 05		bcs $8c6f			bcs 	_CLStart 					; if not, continue listing
.8c6a		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c6c		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.8c6f						_CLStart
.8c6f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c71		85 30		sta $30				sta 	codePtr
.8c73		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c75		85 31		sta $31				sta 	codePtr+1
.8c77						_CLLoop:
.8c77		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c79		f0 03		beq $8c7e			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c7b		20 41 81	jsr $8141			jsr 	ProcessEvents
.8c7e						_NoEvents:
.8c7e		d0 27		bne $8ca7			bne 	_CLBreak
.8c80		b2 30		lda ($30)			lda 	(codePtr)
.8c82		f0 20		beq $8ca4			beq 	_CLExit
.8c84		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c86		20 18 8d	jsr $8d18			jsr 	CLCompareLineNo
.8c89		90 0c		bcc $8c97			bcc 	_CLNext
.8c8b		a2 07		ldx #$07			ldx 	#7
.8c8d		20 18 8d	jsr $8d18			jsr 	CLCompareLineNo
.8c90		f0 02		beq $8c94			beq 	_CLDoThisOne
.8c92		b0 03		bcs $8c97			bcs 	_CLNext
.8c94						_CLDoThisOne:
.8c94		20 05 8d	jsr $8d05			jsr 	CLListOneLine 				; routine to list the current line.
.8c97						_CLNext:
.8c97		18		clc				clc
.8c98		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c9a		65 30		adc $30				adc 	codePtr
.8c9c		85 30		sta $30				sta 	codePtr
.8c9e		90 02		bcc $8ca2			bcc 	_CREExit
.8ca0		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ca2						_CREExit:
.8ca2		80 d3		bra $8c77			bra 	_CLLoop
.8ca4						_CLExit:
.8ca4		4c b9 85	jmp $85b9			jmp 	WarmStart
.8ca7						_CLBreak:
.8ca7		a9 01		lda #$01		lda	#1
.8ca9		4c 71 96	jmp $9671		jmp	ErrorHandler
.8cac						_CLListProcedure:
.8cac		b1 30		lda ($30),y			lda 	(codePtr),y
.8cae		85 38		sta $38				sta 	zTemp1
.8cb0		c8		iny				iny
.8cb1		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb3		85 39		sta $39				sta 	zTemp1+1
.8cb5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cb7		85 30		sta $30				sta 	codePtr
.8cb9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cbb		85 31		sta $31				sta 	codePtr+1
.8cbd						_CLLPSearch:
.8cbd		b2 30		lda ($30)			lda 	(codePtr)
.8cbf		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cc1		f0 e1		beq $8ca4			beq 	_CLExit
.8cc3		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc7		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8cc9		d0 0e		bne $8cd9			bne 	_CLLPNext
.8ccb		c8		iny				iny 								; check if PROC this.
.8ccc		b1 30		lda ($30),y			lda 	(codePtr),y
.8cce		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8cd0		d0 07		bne $8cd9			bne 	_CLLPNext
.8cd2		c8		iny				iny
.8cd3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cd5		c5 39		cmp $39				cmp 	zTemp1+1
.8cd7		f0 0d		beq $8ce6			beq 	_CLLPFound
.8cd9						_CLLPNext:
.8cd9		18		clc				clc
.8cda		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cdc		65 30		adc $30				adc 	codePtr
.8cde		85 30		sta $30				sta 	codePtr
.8ce0		90 02		bcc $8ce4			bcc 	_CREExit
.8ce2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ce4						_CREExit:
.8ce4		80 d7		bra $8cbd			bra 	_CLLPSearch
.8ce6						_CLLPFound:
.8ce6		b2 30		lda ($30)			lda 	(codePtr)
.8ce8		f0 ba		beq $8ca4			beq 	_CLExit
.8cea		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cec		b1 30		lda ($30),y			lda 	(codePtr),y
.8cee		48		pha				pha
.8cef		20 05 8d	jsr $8d05			jsr 	CLListOneLine 				; list line and go forward
.8cf2		18		clc				clc
.8cf3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cf5		65 30		adc $30				adc 	codePtr
.8cf7		85 30		sta $30				sta 	codePtr
.8cf9		90 02		bcc $8cfd			bcc 	_CREExit
.8cfb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cfd						_CREExit:
.8cfd		68		pla				pla 								; reached ENDPROC ?
.8cfe		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8d00		d0 e4		bne $8ce6			bne 	_CLLPFound
.8d02		4c b9 85	jmp $85b9			jmp 	WarmStart
.8d05						CLListOneLine:
.8d05		20 bc 95	jsr $95bc			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d08		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d0b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d0d		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8d0f		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8d12		a9 0d		lda #$0d			lda 	#13 						; new line
.8d14		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d17		60		rts				rts
.8d18						CLCompareLineNo:
.8d18		38		sec				sec
.8d19		a0 01		ldy #$01			ldy 	#1
.8d1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1d		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d1f		85 36		sta $36				sta 	zTemp0
.8d21		c8		iny				iny
.8d22		b1 30		lda ($30),y			lda 	(codePtr),y
.8d24		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d26		05 36		ora $36				ora 	zTemp0
.8d28		60		rts				rts
.8d29						CLIsDigit:
.8d29		b1 30		lda ($30),y			lda 	(codePtr),y
.8d2b		c9 30		cmp #$30			cmp 	#"0"
.8d2d		90 03		bcc $8d32			bcc	 	_CLIDExitFalse
.8d2f		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d31		60		rts				rts
.8d32						_CLIDExitFalse:
.8d32		38		sec				sec
.8d33		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8d34						Command_Load:
.8d34		20 3a 8d	jsr $8d3a			jsr 	LoadFile
.8d37		4c b9 85	jmp $85b9			jmp 	WarmStart
.8d3a						LoadFile:
.8d3a		20 36 a6	jsr $a636			jsr 	EvaluateString 				; file name to load
.8d3d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8d3f		a5 36		lda $36				lda 	zTemp0
.8d41		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.8d44		b0 42		bcs $8d88			bcs 	CLErrorHandler 				; error, so fail.
.8d46		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8d49		20 d8 8d	jsr $8dd8			jsr     LoadReadByteInit            ; Init reader with the stream
.8d4c		20 dd 8f	jsr $8fdd			jsr 	NewProgram 					; does the actual NEW.
.8d4f		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8d52						_CLLoop:
.8d52		20 96 8d	jsr $8d96			jsr 	LoadReadLine 				; get next line.
.8d55		f0 10		beq $8d67			beq 	_CLExit 					; end, exit.
.8d57		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.8d5a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8d5d		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8d60		f0 f0		beq $8d52			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8d62		20 94 85	jsr $8594			jsr 	EditProgramCode 			; do the editing etc.
.8d65		80 eb		bra $8d52			bra 	_CLLoop
.8d67						_CLExit:
.8d67		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d6a		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8d6d						CLComplete:
.8d6d		a9 75		lda #$75			lda 	#_CLCMsg & $FF
.8d6f		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d71		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.8d74		60		rts				rts
.8d75						_CLCMsg:
>8d75		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d7d		2e 0d 00
.8d80						CLCloseError:
.8d80		48		pha				pha
.8d81		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d84		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8d87		68		pla				pla
.8d88						CLErrorHandler:
.8d88		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d8a		f0 05		beq $8d91			beq 	_CLEHNotFound
.8d8c		a9 1a		lda #$1a		lda	#26
.8d8e		4c 71 96	jmp $9671		jmp	ErrorHandler
.8d91						_CLEHNotFound:
.8d91		a9 19		lda #$19		lda	#25
.8d93		4c 71 96	jmp $9671		jmp	ErrorHandler
.8d96						LoadReadLine:
.8d96		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d98		20 b2 8d	jsr $8db2			jsr 	LoadReadCharacter
.8d9b		f0 14		beq $8db1			beq 	_LRLExit 					; eof ?
.8d9d		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d9f		90 f5		bcc $8d96			bcc 	LoadReadLine
.8da1						_LRLLoop:
.8da1		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8da4		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8da7		e8		inx				inx
.8da8		20 b2 8d	jsr $8db2			jsr 	LoadReadCharacter 			; next line
.8dab		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8dad		b0 f2		bcs $8da1			bcs 	_LRLLoop
.8daf		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8db1						_LRLExit:
.8db1		60		rts				rts
.8db2						LoadReadCharacter:
.8db2		da		phx				phx
.8db3		5a		phy				phy
.8db4		ad 6c 07	lda $076c			lda 	LoadEOFFlag 				; already done EOF.
.8db7		d0 0c		bne $8dc5			bne 	_LRCIsEOF
.8db9		20 e2 8d	jsr $8de2			jsr 	LoadReadByte 				; read a byte
.8dbc		90 09		bcc $8dc7			bcc		_LRCExit 					; read okay.
.8dbe		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8dc0		d0 be		bne $8d80			bne 	CLCloseError
.8dc2		ce 6c 07	dec $076c			dec 	LoadEOFFlag
.8dc5						_LRCIsEOF:
.8dc5		a9 00		lda #$00			lda 	#0
.8dc7						_LRCExit:
.8dc7		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8dc9		d0 02		bne $8dcd			bne 	_LRCNotTab
.8dcb		a9 20		lda #$20			lda 	#' '
.8dcd						_LRCNotTab:
.8dcd		c9 0a		cmp #$0a			cmp 	#$0A
.8dcf		d0 02		bne $8dd3			bne 	_LRCNotLF
.8dd1		a9 0d		lda #$0d			lda 	#$0D
.8dd3						_LRCNotLF:
.8dd3		7a		ply				ply
.8dd4		fa		plx				plx
.8dd5		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8dd7		60		rts				rts
.8dd8						LoadReadByteInit:
.8dd8		8d 6e 07	sta $076e			sta     LoadFileStream 				; save stream
.8ddb		9c 6f 07	stz $076f			stz     LoadNextCharacter 			; reset buffer
.8dde		9c 70 07	stz $0770			stz     LoadEndCharacter
.8de1		60		rts				rts
.8de2						LoadReadByte:
.8de2		da		phx				phx
.8de3		ae 6f 07	ldx $076f			ldx     LoadNextCharacter 					; all data consumed ?
.8de6		ec 70 07	cpx $0770			cpx     LoadEndCharacter
.8de9		d0 12		bne $8dfd			bne     _KNLRBGetNextByte
.8deb		ad 6e 07	lda $076e			lda     LoadFileStream
.8dee		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8df0		20 ee 81	jsr $81ee			jsr     KNLReadBlock 				; read next chunk from the stream
.8df3		b0 0f		bcs $8e04			bcs     _KNLRBError 				; error has occurred on read.
.8df5		8d 70 07	sta $0770			sta     LoadEndCharacter 						; # read is the number available
.8df8		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8dfa		8e 6f 07	stx $076f			stx     LoadNextCharacter
.8dfd						_KNLRBGetNextByte:
.8dfd		bd 5e 06	lda $065e,x			lda     KNLReadBuffer,x 			; get the next data item
.8e00		ee 6f 07	inc $076f			inc     LoadNextCharacter 					; and advance the index
.8e03		18		clc				clc 								; succeeded
.8e04						_KNLRBError:
.8e04		fa		plx				plx
.8e05		60		rts				rts
.076c						LoadEOFFlag:
>076c								.fill 	1
.076d						BasicFileStream:
>076d								.fill 	1
.076e						LoadFileStream:
>076e								.byte   ?
.076f						LoadNextCharacter:
>076f								.byte   ?
.0770						LoadEndCharacter:
>0770								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e06						Command_LOCAL:
.8e06		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e08		20 14 8e	jsr $8e14			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e0b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e0d		c8		iny				iny
.8e0e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e10		f0 f4		beq $8e06			beq 	Command_LOCAL 				; if so, localise another variable.
.8e12		88		dey				dey 								; unpick pre-get
.8e13		60		rts				rts
.8e14						LocaliseNextTerm:
.8e14		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm 				; evaluate the term
.8e17		b5 50		lda $50,x			lda 	NSStatus,x
.8e19		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8e1b		f0 5c		beq $8e79			beq		_LNTError
.8e1d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e1f		85 36		sta $36				sta 	zTemp0
.8e21		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e23		85 37		sta $37				sta  	zTemp0+1
.8e25		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8e27		29 10		and #$10			and 	#NSBIsString
.8e29		d0 1e		bne $8e49			bne 	_LNTPushString
.8e2b		5a		phy				phy
.8e2c		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e2e						_LNTPushNumLoop:
.8e2e		b1 36		lda ($36),y			lda		(zTemp0),y
.8e30		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e33		c8		iny				iny
.8e34		c0 05		cpy #$05			cpy 	#5
.8e36		d0 f6		bne $8e2e			bne 	_LNTPushNumLoop
.8e38		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e3a		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e3d		a5 37		lda $37				lda 	zTemp0+1
.8e3f		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e42		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e44		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e47		7a		ply				ply
.8e48		60		rts				rts
.8e49						_LNTPushString:
.8e49		5a		phy				phy
.8e4a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e4c		85 38		sta $38				sta 	zTemp1
.8e4e		a0 01		ldy #$01			ldy 	#1
.8e50		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e52		85 39		sta $39				sta 	zTemp1+1
.8e54		a0 00		ldy #$00			ldy 	#0 							; output string
.8e56		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8e58		f0 0a		beq $8e64			beq 	_LNTStringOut
.8e5a						_LNTPushStrLoop:
.8e5a		b1 38		lda ($38),y			lda 	(zTemp1),y
.8e5c		f0 06		beq $8e64			beq 	_LNTStringOut
.8e5e		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e61		c8		iny				iny
.8e62		80 f6		bra $8e5a			bra 	_LNTPushStrLoop
.8e64						_LNTStringOut:
.8e64		98		tya				tya									; output length (chars written).
.8e65		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e68		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e6a		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e6d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e6f		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e72		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e74		20 9c b7	jsr $b79c			jsr 	StackPushByte
.8e77		7a		ply				ply
.8e78		60		rts				rts
.8e79						_LNTError:
.8e79		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.8e7c						LocalPopValue:
.8e7c		20 b4 b7	jsr $b7b4			jsr 	StackPopByte
.8e7f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e81		d0 17		bne $8e9a			bne 	_LPVString
.8e83		20 b4 b7	jsr $b7b4			jsr 	StackPopByte 				; address
.8e86		85 37		sta $37				sta 	zTemp0+1
.8e88		20 b4 b7	jsr $b7b4			jsr 	StackPopByte
.8e8b		85 36		sta $36				sta 	zTemp0
.8e8d		5a		phy				phy
.8e8e		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e90						_LPVNumberCopy:
.8e90		20 b4 b7	jsr $b7b4			jsr 	StackPopByte
.8e93		91 36		sta ($36),y			sta 	(zTemp0),y
.8e95		88		dey				dey
.8e96		10 f8		bpl $8e90			bpl 	_LPVNumberCopy
.8e98		7a		ply				ply 								; and complete
.8e99		60		rts				rts
.8e9a						_LPVString:
.8e9a		20 b4 b7	jsr $b7b4			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e9d		85 37		sta $37				sta 	zTemp0+1
.8e9f		20 b4 b7	jsr $b7b4			jsr 	StackPopByte
.8ea2		85 36		sta $36				sta 	zTemp0
.8ea4		5a		phy				phy
.8ea5		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8ea7		85 38		sta $38				sta 	zTemp1
.8ea9		a0 01		ldy #$01			ldy 	#1
.8eab		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ead		85 39		sta $39				sta 	zTemp1+1
.8eaf		20 b4 b7	jsr $b7b4			jsr 	StackPopByte 				; # chars to get => y
.8eb2		a8		tay				tay
.8eb3		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8eb5		f0 0e		beq $8ec5			beq 	_LPVStringCopied
.8eb7		a9 00		lda #$00			lda 	#0 							; NULL on end
.8eb9		91 38		sta ($38),y			sta 	(zTemp1),y
.8ebb						_LPVStringCopy:
.8ebb		88		dey				dey
.8ebc		30 07		bmi $8ec5			bmi 	_LPVStringCopied
.8ebe		20 b4 b7	jsr $b7b4			jsr 	StackPopByte
.8ec1		91 38		sta ($38),y			sta 	(zTemp1),y
.8ec3		80 f6		bra $8ebb			bra 	_LPVStringCopy
.8ec5						_LPVStringCopied:
.8ec5		fa		plx				plx
.8ec6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8ec7						MCCommand:
.8ec7		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8ec9		48		pha				pha
.8eca		64 01		stz $01				stz 	1
.8ecc		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8ecf		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8ed1		8d 71 07	sta $0771			sta 	DMAControlByte
.8ed4		20 82 8f	jsr $8f82			jsr 	MCPosition 					; start position
.8ed7		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8ed9		20 53 8f	jsr $8f53			jsr 	MCCopyAddress
.8edc		a2 08		ldx #$08			ldx 	#8
.8ede		20 53 8f	jsr $8f53			jsr 	MCCopyAddress
.8ee1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee3		c8		iny				iny
.8ee4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8ee6		f0 09		beq $8ef1			beq 	_MCSize1D
.8ee8		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8eea		f0 11		beq $8efd			beq 	_MCRect2D
.8eec						_MCSyntax:
.8eec		a9 02		lda #$02		lda	#2
.8eee		4c 71 96	jmp $9671		jmp	ErrorHandler
.8ef1						_MCSize1D:
.8ef1		a2 00		ldx #$00			ldx 	#0 							; get size
.8ef3		20 4b a6	jsr $a64b			jsr 	EvaluateInteger
.8ef6		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8ef8		20 53 8f	jsr $8f53			jsr 	MCCopyAddress
.8efb		80 24		bra $8f21			bra 	_MCDestination
.8efd						_MCRect2D:
.8efd		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8eff		20 70 8f	jsr $8f70			jsr 	MCEvalCopyData16
.8f02		20 60 96	jsr $9660			jsr 	CheckComma
.8f05		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8f07		20 70 8f	jsr $8f70			jsr 	MCEvalCopyData16
.8f0a		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.8f0c		20 68 96	jsr $9668			jsr 	CheckNextA
.8f0f		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8f11		20 70 8f	jsr $8f70			jsr 	MCEvalCopyData16
.8f14		a2 12		ldx #$12			ldx 	#$12
.8f16		20 77 8f	jsr $8f77			jsr 	MCCopyData16
.8f19		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8f1c		09 02		ora #$02			ora 	#$02
.8f1e		8d 71 07	sta $0771			sta 	DMAControlByte
.8f21						_MCDestination:
.8f21		b1 30		lda ($30),y			lda 	(codePtr),y
.8f23		c8		iny				iny
.8f24		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.8f26		f0 0e		beq $8f36			beq 	_MCDestPoke
.8f28		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.8f2a		d0 c0		bne $8eec			bne 	_MCSyntax
.8f2c		20 82 8f	jsr $8f82			jsr 	MCPosition 					; get target address
.8f2f		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8f31		20 53 8f	jsr $8f53			jsr 	MCCopyAddress
.8f34		80 0e		bra $8f44			bra 	_MCDoDMA 					; and we can go.
.8f36						_MCDestPoke:
.8f36		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; POKE what
.8f39		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8f3c		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8f3f		09 04		ora #$04			ora 	#$04
.8f41		8d 71 07	sta $0771			sta 	DMAControlByte
.8f44						_MCDoDMA:
.8f44		ad 71 07	lda $0771			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8f47		8d 00 df	sta $df00			sta 	$DF00
.8f4a						_MCWaitBUSD:
.8f4a		ad 01 df	lda $df01			lda 	$DF01
.8f4d		30 fb		bmi $8f4a			bmi 	_MCWaitBUSD
.8f4f		68		pla				pla 								; restore I/O.
.8f50		85 01		sta $01				sta 	1
.8f52		60		rts				rts
.8f53						MCCopyAddress:
.8f53		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8f55		29 fc		and #$fc			and 	#$FC
.8f57		05 70		ora $70				ora 	NSMantissa3
.8f59		d0 10		bne $8f6b			bne 	_MCRange
.8f5b		a5 58		lda $58				lda 	NSMantissa0
.8f5d		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f60		a5 60		lda $60				lda 	NSMantissa1
.8f62		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f65		a5 68		lda $68				lda 	NSMantissa2
.8f67		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f6a		60		rts				rts
.8f6b						_MCRange:
.8f6b		a9 04		lda #$04		lda	#4
.8f6d		4c 71 96	jmp $9671		jmp	ErrorHandler
.8f70						MCEvalCopyData16:
.8f70		da		phx				phx
.8f71		a2 00		ldx #$00			ldx 	#0
.8f73		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.8f76		fa		plx				plx
.8f77						MCCopyData16:
.8f77		a5 58		lda $58				lda 	NSMantissa0
.8f79		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f7c		a5 60		lda $60				lda 	NSMantissa1
.8f7e		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f81		60		rts				rts
.8f82						MCPosition:
.8f82		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f84		b1 30		lda ($30),y			lda 	(codePtr),y
.8f86		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8f88		f0 04		beq $8f8e			beq 	_MCPAt
.8f8a		20 4b a6	jsr $a64b			jsr 	EvaluateInteger
.8f8d		60		rts				rts
.8f8e						_MCPAt:
.8f8e		c8		iny				iny
.8f8f		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; X position
.8f92		48		pha				pha
.8f93		20 60 96	jsr $9660			jsr 	CheckComma
.8f96		e8		inx				inx
.8f97		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; Y position
.8f9a		ca		dex				dex
.8f9b		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8f9d		64 58		stz $58				stz 	NSMantissa0
.8f9f		64 68		stz $68				stz 	NSMantissa2
.8fa1		64 70		stz $70				stz 	NSMantissa3
.8fa3		46 60		lsr $60				lsr 	NSMantissa1
.8fa5		66 58		ror $58				ror 	NSMantissa0
.8fa7		46 60		lsr $60				lsr 	NSMantissa1
.8fa9		66 58		ror $58				ror 	NSMantissa0
.8fab		68		pla				pla
.8fac		18		clc				clc
.8fad		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8faf		85 58		sta $58				sta 	NSMantissa0
.8fb1		a5 60		lda $60				lda 	NSMantissa1
.8fb3		65 59		adc $59				adc 	NSMantissa0+1
.8fb5		85 60		sta $60				sta 	NSMantissa1
.8fb7		90 02		bcc $8fbb			bcc 	_MCPNoCarry
.8fb9		e6 68		inc $68				inc 	NSMantissa2
.8fbb						_MCPNoCarry:
.8fbb		ad 9b 07	lda $079b			lda 	gxBasePage
.8fbe		85 69		sta $69				sta 	NSMantissa2+1
.8fc0		64 59		stz $59				stz 	NSMantissa0+1
.8fc2		64 61		stz $61				stz 	NSMantissa1+1
.8fc4		64 71		stz $71				stz 	NSMantissa3+1
.8fc6		a2 01		ldx #$01			ldx 	#1
.8fc8		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight
.8fcb		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight
.8fce		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight
.8fd1		a2 00		ldx #$00			ldx 	#0
.8fd3		20 6b 99	jsr $996b			jsr 	AddTopTwoStack
.8fd6		60		rts				rts
.0771						DMAControlByte:
>0771								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8fd7						NewCommand:
.8fd7		20 dd 8f	jsr $8fdd			jsr 	NewProgram 					; does the actual NEW.
.8fda		4c b9 85	jmp $85b9			jmp 	WarmStart 					; and warm starts straight away.
.8fdd						NewProgram:
.8fdd		20 4b ae	jsr $ae4b			jsr 	MemoryNew
.8fe0		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8fe3		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear everything.
.8fe6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8fe7						PokeBCommand:
.8fe7		a9 01		lda #$01			lda 	#1
.8fe9		80 0c		bra $8ff7			bra 	PokeCommand
.8feb						PokeWCommand:
.8feb		a9 02		lda #$02			lda 	#2
.8fed		80 08		bra $8ff7			bra 	PokeCommand
.8fef						PokeLCommand:
.8fef		a9 03		lda #$03			lda 	#3
.8ff1		80 04		bra $8ff7			bra 	PokeCommand
.8ff3						PokeDCommand:
.8ff3		a9 04		lda #$04			lda 	#4
.8ff5		80 00		bra $8ff7			bra 	PokeCommand
.8ff7						PokeCommand:
.8ff7		48		pha				pha 								; save count on stack
.8ff8		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8ffa		20 5e a6	jsr $a65e			jsr		Evaluate16BitInteger 		; address
.8ffd		20 60 96	jsr $9660			jsr 	CheckComma
.9000		e8		inx				inx
.9001		20 4b a6	jsr $a64b			jsr		EvaluateInteger 			; data
.9004		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9006		85 36		sta $36				sta 	zTemp0
.9008		a5 60		lda $60				lda 	NSMantissa1
.900a		85 37		sta $37				sta 	zTemp0+1
.900c		68		pla				pla 								; count -> zTemp1
.900d		85 38		sta $38				sta 	zTemp1
.900f		5a		phy				phy 								; save Y position.
.9010		a0 00		ldy #$00			ldy 	#0 							; index to write
.9012		a2 00		ldx #$00			ldx 	#0 							; index to read
.9014						_PCLoop:
.9014		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9016		91 36		sta ($36),y			sta 	(zTemp0),y
.9018		c8		iny				iny 								; next byte to write
.9019		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.901a		18		clc				clc
.901b		69 08		adc #$08			adc 	#MathStackSize
.901d		aa		tax				tax
.901e		c6 38		dec $38				dec 	zTemp1 						; done them all
.9020		d0 f2		bne $9014			bne 	_PCLoop
.9022		7a		ply				ply 								; restore position.
.9023		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9024						CallProcedure:
.9024		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9026		b1 30		lda ($30),y			lda 	(codePtr),y
.9028		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.902a		f0 0c		beq $9038			beq 	_CPEndParam
.902c						_CPParamLoop:
.902c		20 23 a6	jsr $a623			jsr 	EvaluateValue 				; get parameter onto stack
.902f		e8		inx				inx 								; bump next stack
.9030		b1 30		lda ($30),y			lda 	(codePtr),y
.9032		c8		iny				iny
.9033		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9035		f0 f5		beq $902c			beq 	_CPParamLoop
.9037		88		dey				dey 								; unpick.
.9038						_CPEndParam:
.9038		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.903b		c8		iny				iny									; skip right bracket
.903c		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.903e		20 bd b7	jsr $b7bd			jsr 	StackOpen
.9041		20 02 b8	jsr $b802			jsr 	STKSaveCodePosition 		; save loop position
.9044		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9046		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9048		a5 60		lda $60				lda 	NSMantissa1
.904a		85 37		sta $37				sta 	zTemp0+1
.904c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.904e		b2 36		lda ($36)			lda 	(zTemp0)
.9050		85 30		sta $30				sta 	safePtr
.9052		b1 36		lda ($36),y			lda 	(zTemp0),y
.9054		85 31		sta $31				sta 	safePtr+1
.9056		c8		iny				iny
.9057		b1 36		lda ($36),y			lda 	(zTemp0),y
.9059		85 32		sta $32				sta 	safePtr+2
.905b		c8		iny				iny
.905c		b1 36		lda ($36),y			lda 	(zTemp0),y
.905e		85 33		sta $33				sta 	safePtr+3
.9060		c8		iny				iny 								; get Y offset -> Y
.9061		b1 36		lda ($36),y			lda 	(zTemp0),y
.9063		a8		tay				tay
.9064		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9066		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9069		f0 13		beq $907e			beq 	_ParamExit 					; if so, exit.
.906b						_ParamExtract:
.906b		ca		dex				dex 								; put a local term on the level before
.906c		20 14 8e	jsr $8e14			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.906f		20 13 8c	jsr $8c13			jsr 	AssignVariable 				; assign stacked value to the variable.
.9072		e8		inx				inx 								; advance to next parameter to do.
.9073		e8		inx				inx
.9074		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9077		f0 05		beq $907e			beq 	_ParamExit
.9079		20 60 96	jsr $9660			jsr 	CheckComma 					; comma seperating parameters
.907c		80 ed		bra $906b			bra 	_ParamExtract
.907e						_ParamExit:
.907e		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; check )
.9081		60		rts				rts 								; and continue from here
.9082						Command_ENDPROC:
.9082		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9084		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9086		20 ea b7	jsr $b7ea			jsr 	StackCheckFrame
.9089		20 13 b8	jsr $b813			jsr 	STKLoadCodePosition 		; restore code position
.908c		20 dc b7	jsr $b7dc			jsr 	StackClose
.908f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9090						Command_Read:
.9090		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9092		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm
.9095		b5 50		lda $50,x			lda 	NSStatus,x
.9097		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9099		f0 4f		beq $90ea			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.909b		20 33 91	jsr $9133			jsr 	SwapDataCodePtrs 			; swap code and data
.909e		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.90a1		d0 25		bne $90c8			bne 	_CRContinueData  			; forward for the next one.
.90a3		b2 30		lda ($30)			lda 	(codePtr)
.90a5		f0 1c		beq $90c3			beq 	_CRNoData
.90a7						_CRKeepSearching:
.90a7		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.90a9		a2 80		ldx #$80			ldx 	#KWC_EOL
.90ab		20 59 95	jsr $9559			jsr 	ScanForward
.90ae		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.90b0		f0 16		beq $90c8			beq 	_CRHaveData 				; found it
.90b2		18		clc				clc
.90b3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90b5		65 30		adc $30				adc 	codePtr
.90b7		85 30		sta $30				sta 	codePtr
.90b9		90 02		bcc $90bd			bcc 	_CREExit
.90bb		e6 31		inc $31				inc 	codePtr+1 					; carry
.90bd						_CREExit:
.90bd		a0 03		ldy #$03			ldy 	#3 							; start of line.
.90bf		b2 30		lda ($30)			lda 	(codePtr)
.90c1		d0 e4		bne $90a7			bne 	_CRKeepSearching
.90c3						_CRNoData:
.90c3		a9 0b		lda #$0b		lda	#11
.90c5		4c 71 96	jmp $9671		jmp	ErrorHandler
.90c8						_CRHaveData:
.90c8						_CRContinueData:
.90c8		a2 01		ldx #$01			ldx 	#1
.90ca		20 23 a6	jsr $a623			jsr 	EvaluateValue 				; evaluate value into slot # 1
.90cd		ca		dex				dex
.90ce		20 13 8c	jsr $8c13			jsr		AssignVariable 				; do the assignment
.90d1		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.90d4		b1 30		lda ($30),y			lda 	(codePtr),y
.90d6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.90d8		d0 04		bne $90de			bne 	_CRSwapBack
.90da		c8		iny				iny 								; consume comma
.90db		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.90de						_CRSwapBack:
.90de		20 33 91	jsr $9133			jsr 	SwapDataCodePtrs			; swap them back.
.90e1		b1 30		lda ($30),y			lda 	(codePtr),y
.90e3		c8		iny				iny
.90e4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90e6		f0 a8		beq $9090			beq 	Command_Read 				; if so go round again.
.90e8		88		dey				dey 								; unpick get.
.90e9		60		rts				rts
.90ea						_CRSyntax:
.90ea		4c 5c a8	jmp $a85c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.90ed						RemCommand:
.90ed		b1 30		lda ($30),y			lda 	(codePtr),y
.90ef		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.90f1		d0 06		bne $90f9			bne 	_RMExit
.90f3		c8		iny				iny 								; point to offset
.90f4		98		tya				tya 								; A = offset position
.90f5		38		sec				sec 								; add size +1 hence SEC
.90f6		71 30		adc ($30),y			adc 	(codePtr),y
.90f8		a8		tay				tay 								; make current position.
.90f9						_RMExit:
.90f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.90fa						Command_REPEAT:
.90fa		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.90fc		20 bd b7	jsr $b7bd			jsr 	StackOpen
.90ff		20 02 b8	jsr $b802			jsr 	STKSaveCodePosition 		; save loop position
.9102		60		rts				rts
.9103						Command_UNTIL:
.9103		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9105		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9107		20 ea b7	jsr $b7ea			jsr 	StackCheckFrame
.910a		a2 00		ldx #$00			ldx 	#0
.910c		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; work out the number
.910f		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; check if zero
.9112		f0 04		beq $9118			beq 	_CULoopBack 				; if so keep looping
.9114		20 dc b7	jsr $b7dc			jsr 	StackClose		 			; return
.9117		60		rts				rts
.9118						_CULoopBack:
.9118		20 13 b8	jsr $b813			jsr 	STKLoadCodePosition 		; loop back
.911b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.911c						Command_Restore:
.911c		20 33 91	jsr $9133			jsr 	SwapDataCodePtrs 			; swap code and data
.911f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9121		85 30		sta $30				sta 	codePtr
.9123		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9125		85 31		sta $31				sta 	codePtr+1
.9127		20 33 91	jsr $9133			jsr 	SwapDataCodePtrs 			; put them back
.912a		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.912c		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.912f		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9132		60		rts				rts
.9133						SwapDataCodePtrs:
.9133		da		phx				phx
.9134		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9136						_SDCPLoop:
.9136		b5 30		lda $30,x			lda 	safePtr,x
.9138		48		pha				pha
.9139		bd 13 04	lda $0413,x			lda 	dataPointer,x
.913c		95 30		sta $30,x			sta 	safePtr,x
.913e		68		pla				pla
.913f		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9142		ca		dex				dex
.9143		10 f1		bpl $9136			bpl 	_SDCPLoop
.9145		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9148		8c 17 04	sty $0417			sty 	dataPointer+4
.914b		a8		tay				tay
.914c		fa		plx				plx
.914d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.914e						EOLCommand:
.914e		18		clc				clc
.914f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9151		65 30		adc $30				adc 	codePtr
.9153		85 30		sta $30				sta 	codePtr
.9155		90 02		bcc $9159			bcc 	_CREExit
.9157		e6 31		inc $31				inc 	codePtr+1 					; carry
.9159						_CREExit:
.9159		80 18		bra $9173			bra 	RunNewLine
.915b						CommandRUNOptLoad:
.915b		b1 30		lda ($30),y			lda 	(codePtr),y
.915d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.915f		f0 07		beq $9168			beq 	RunCurrentProgram
.9161		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9163		f0 03		beq $9168			beq 	RunCurrentProgram
.9165		20 3a 8d	jsr $8d3a			jsr 	LoadFile 					; load expected name file.
.9168						RunCurrentProgram:
.9168		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear variable/stacks/etc.
.916b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.916d		85 30		sta $30				sta 	codePtr
.916f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9171		85 31		sta $31				sta 	codePtr+1
.9173						RunNewLine:
.9173		b2 30		lda ($30)			lda 	(codePtr)
.9175		f0 74		beq $91eb			beq 	CRNoProgram         		; no then END.
.9177		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9179		9a		txs				txs
.917a						RUNCodePointerLine:
.917a		a0 02		ldy #$02			ldy 	#2 							; start of program
.917c						_CRIncMainLoop:
.917c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.917e		f0 03		beq $9183			beq 	_NoEvents					; if zero, skip with Z flag set.
.9180		20 41 81	jsr $8141			jsr 	ProcessEvents
.9183						_NoEvents:
.9183		d0 61		bne $91e6			bne 	_CRBreak
.9185		a5 01		lda $01				lda 	1 							; save I/O 0
.9187		48		pha				pha
.9188		64 01		stz $01				stz 	1 							; access I/O Page 0
.918a		38		sec				sec 								; calculate timer - LastTick
.918b		ad 59 d6	lda $d659			lda 	$D659
.918e		cd 73 07	cmp $0773			cmp 	LastTick
.9191		f0 06		beq $9199			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9193		8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.9196		20 09 a7	jsr $a709			jsr 	TickHandler 							; go do the code.
.9199						_NoFireTick:
.9199		68		pla				pla 								; restore I/O 0
.919a		85 01		sta $01				sta 	1
.919c						_CRNoBreakCheck:
.919c		c8		iny				iny									; next token
.919d						_CRMainLoop:
.919d		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.91a0		b1 30		lda ($30),y			lda 	(codePtr),y
.91a2		10 10		bpl $91b4			bpl 	_CRNotKeyword				; not a token.
.91a4		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.91a6		b0 04		bcs $91ac			bcs 	_CRIsKeyword
.91a8		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.91aa		b0 34		bcs $91e0			bcs		_CRSyntaxError
.91ac						_CRIsKeyword:
.91ac		c8		iny				iny 								; consume command
.91ad		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.91ae		aa		tax				tax 								; put in X for vector jump
.91af		20 e3 91	jsr $91e3			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.91b2		80 e9		bra $919d			bra 	_CRMainLoop 				; and loop round
.91b4						_CRNotKeyword:
.91b4		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.91b6		f0 c4		beq $917c			beq 	_CRIncMainLoop
.91b8		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.91ba		90 05		bcc $91c1			bcc 	_CRNotVariable
.91bc						_CRGoLet:
.91bc		20 da 8b	jsr $8bda			jsr 	LetCommand
.91bf		80 dc		bra $919d			bra 	_CRMainLoop
.91c1						_CRNotVariable:
.91c1		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.91c3		f0 f7		beq $91bc			beq 	_CRGoLet
.91c5		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.91c7		f0 f3		beq $91bc			beq 	_CRGoLet
.91c9		c9 21		cmp #$21			cmp 	#KWD_PLING
.91cb		f0 ef		beq $91bc			beq 	_CRGoLet
.91cd		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.91cf		f0 09		beq $91da			beq 	_CRGoRem
.91d1		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.91d3		d0 0b		bne $91e0			bne 	_CRSyntaxError
.91d5		20 2b 84	jsr $842b			jsr 	LabelHere
.91d8		80 c3		bra $919d			bra 	_CRMainLoop
.91da						_CRGoRem:
.91da		c8		iny				iny
.91db		20 ed 90	jsr $90ed			jsr 	RemCommand
.91de		80 bd		bra $919d			bra 	_CRMainLoop
.91e0						_CRSyntaxError:
.91e0		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.91e3						_CRCallVector0:
.91e3		7c 82 92	jmp ($9282,x)			jmp 	(VectorSet0,x)
.91e6						_CRBreak:
.91e6		a9 01		lda #$01		lda	#1
.91e8		4c 71 96	jmp $9671		jmp	ErrorHandler
.91eb						CRNoProgram:
.91eb		4c 70 89	jmp $8970			jmp 	EndCommand
.91ee						Shift1Command:
.91ee		b1 30		lda ($30),y			lda 	(codePtr),y
.91f0		c8		iny				iny
.91f1		0a		asl a				asl 	a
.91f2		aa		tax				tax
.91f3		7c 38 93	jmp ($9338,x)			jmp 	(VectorSet1,x)
.91f6						Shift2Command:
.91f6		b1 30		lda ($30),y			lda 	(codePtr),y
.91f8		c8		iny				iny
.91f9		0a		asl a				asl 	a
.91fa		aa		tax				tax
.91fb		7c 82 93	jmp ($9382,x)			jmp 	(VectorSet2,x)
.91fe						Unused1:
.91fe						Unused2:
.91fe						Unused3:
.91fe						Unused4:
.91fe		4c 5c a8	jmp $a85c			jmp 	SyntaxError
>9201								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9202						VectorSetPunc:
>9202		29 99					.word	ShiftLeft                        ; $00 <<
>9204		14 97					.word	BinaryCompareLessEqual           ; $01 <=
>9206		0a 97					.word	BinaryCompareNotEqual            ; $02 <>
>9208		5c a8					.word	SyntaxError                      ; $03 !!3
>920a		5c a8					.word	SyntaxError                      ; $04 ><
>920c		1e 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>920e		2c 99					.word	ShiftRight                       ; $06 >>
>9210		5c a8					.word	SyntaxError                      ; $07 !!7
>9212		5c a8					.word	SyntaxError                      ; $08 !!8
>9214		5c a8					.word	SyntaxError                      ; $09 !!9
>9216		5c a8					.word	SyntaxError                      ; $0a !!10
>9218		5c a8					.word	SyntaxError                      ; $0b !!11
>921a		5c a8					.word	SyntaxError                      ; $0c !!12
>921c		5c a8					.word	SyntaxError                      ; $0d !!13
>921e		5c a8					.word	SyntaxError                      ; $0e !!14
>9220		5c a8					.word	SyntaxError                      ; $0f !!15
>9222		5c a8					.word	SyntaxError                      ; $10 @
>9224		5c a8					.word	SyntaxError                      ; $11 !!17
>9226		5c a8					.word	SyntaxError                      ; $12 !!18
>9228		5c a8					.word	SyntaxError                      ; $13 [
>922a		d5 97					.word	IntegerDivide                    ; $14 \
>922c		5c a8					.word	SyntaxError                      ; $15 ]
>922e		67 9a					.word	EorInteger                       ; $16 ^
>9230		5c a8					.word	SyntaxError                      ; $17 _
>9232		5c a8					.word	SyntaxError                      ; $18 `
>9234		5c a8					.word	SyntaxError                      ; $19 !!25
>9236		5c a8					.word	SyntaxError                      ; $1a !!26
>9238		5c a8					.word	SyntaxError                      ; $1b {
>923a		32 9a					.word	OraInteger                       ; $1c |
>923c		5c a8					.word	SyntaxError                      ; $1d }
>923e		5c a8					.word	SyntaxError                      ; $1e ~
>9240		5c a8					.word	SyntaxError                      ; $1f <7F>
>9242		5c a8					.word	SyntaxError                      ; $20
>9244		9c 9a					.word	WordIndirect                     ; $21 !
>9246		5c a8					.word	SyntaxError                      ; $22 "
>9248		5c a8					.word	SyntaxError                      ; $23 #
>924a		5c a8					.word	SyntaxError                      ; $24 $
>924c		16 98					.word	IntegerModulus                   ; $25 %
>924e		fd 99					.word	AndInteger                       ; $26 &
>9250		5c a8					.word	SyntaxError                      ; $27 '
>9252		5c a8					.word	SyntaxError                      ; $28 (
>9254		5c a8					.word	SyntaxError                      ; $29 )
>9256		84 98					.word	MulInteger                       ; $2a *
>9258		9f 99					.word	AddInteger                       ; $2b +
>925a		5c a8					.word	SyntaxError                      ; $2c ,
>925c		d8 99					.word	SubInteger                       ; $2d -
>925e		5c a8					.word	SyntaxError                      ; $2e .
>9260		56 9c					.word	FDivideCommand                   ; $2f /
>9262		5c a8					.word	SyntaxError                      ; $30 0
>9264		5c a8					.word	SyntaxError                      ; $31 1
>9266		5c a8					.word	SyntaxError                      ; $32 2
>9268		5c a8					.word	SyntaxError                      ; $33 3
>926a		5c a8					.word	SyntaxError                      ; $34 4
>926c		5c a8					.word	SyntaxError                      ; $35 5
>926e		5c a8					.word	SyntaxError                      ; $36 6
>9270		5c a8					.word	SyntaxError                      ; $37 7
>9272		5c a8					.word	SyntaxError                      ; $38 8
>9274		5c a8					.word	SyntaxError                      ; $39 9
>9276		5c a8					.word	SyntaxError                      ; $3a :
>9278		5c a8					.word	SyntaxError                      ; $3b ;
>927a		f6 96					.word	BinaryCompareLess                ; $3c <
>927c		ec 96					.word	BinaryCompareEqual               ; $3d =
>927e		00 97					.word	BinaryCompareGreater             ; $3e >
>9280		be 9a					.word	ByteIndirect                     ; $3f ?
.9282						VectorSet0:
>9282		4e 91					.word	EOLCommand                       ; $80 !0:EOF
>9284		ee 91					.word	Shift1Command                    ; $81 !1:SH1
>9286		f6 91					.word	Shift2Command                    ; $82 !2:SH2
>9288		40 a1					.word	AbsUnary                         ; $83 ABS(
>928a		4e a1					.word	AllocUnary                       ; $84 ALLOC(
>928c		be a1					.word	AscUnary                         ; $85 ASC(
>928e		84 a3					.word	ChrUnary                         ; $86 CHR$(
>9290		df ac					.word	UnaryEvent                       ; $87 EVENT(
>9292		e8 96					.word	UnaryFalse                       ; $88 FALSE
>9294		cb a1					.word	FracUnary                        ; $89 FRAC(
>9296		14 a4					.word	ChrGet                           ; $8a GET$(
>9298		f0 a3					.word	AscGet                           ; $8b GET(
>929a		9a a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>929c		96 a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>929e		69 ac					.word	UnaryHit                         ; $8e HIT(
>92a0		1b a4					.word	ChrInkey                         ; $8f INKEY$(
>92a2		09 a4					.word	AscInkey                         ; $90 INKEY(
>92a4		e0 a1					.word	IntUnary                         ; $91 INT(
>92a6		43 a3					.word	IsValUnary                       ; $92 ISVAL(
>92a8		34 a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>92aa		58 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>92ac		63 ad					.word	UnaryJoyB                        ; $95 JOYB(
>92ae		3c ad					.word	UnaryJoyX                        ; $96 JOYX(
>92b0		3f ad					.word	UnaryJoyY                        ; $97 JOYY(
>92b2		97 a5					.word	Unary_Left                       ; $98 LEFT$(
>92b4		f1 a1					.word	LenUnary                         ; $99 LEN(
>92b6		0f a2					.word	Unary_Max                        ; $9a MAX(
>92b8		b9 a5					.word	Unary_Mid                        ; $9b MID$(
>92ba		0b a2					.word	Unary_Min                        ; $9c MIN(
>92bc		5a a2					.word	Unary_Not                        ; $9d NOT(
>92be		6d a2					.word	PeekByteUnary                    ; $9e PEEK(
>92c0		79 a2					.word	PeekDUnary                       ; $9f PEEKD(
>92c2		75 a2					.word	PeekLUnary                       ; $a0 PEEKL(
>92c4		71 a2					.word	PeekWUnary                       ; $a1 PEEKW(
>92c6		1a b7					.word	UnaryPlaying                     ; $a2 PLAYING(
>92c8		a6 a2					.word	Unary_Random                     ; $a3 RANDOM(
>92ca		a4 a5					.word	Unary_Right                      ; $a4 RIGHT$(
>92cc		c0 a2					.word	Unary_Rnd                        ; $a5 RND(
>92ce		1b a3					.word	SgnUnary                         ; $a6 SGN(
>92d0		d6 a4					.word	SpcUnary                         ; $a7 SPC(
>92d2		f1 a4					.word	Unary_Str                        ; $a8 STR$(
>92d4		75 ad					.word	UnaryTimer                       ; $a9 TIMER(
>92d6		dd 96					.word	UnaryTrue                        ; $aa TRUE
>92d8		39 a3					.word	ValUnary                         ; $ab VAL(
>92da		73 89					.word	ForCommand                       ; $ac FOR
>92dc		b6 8a					.word	IfCommand                        ; $ad IF
>92de		fe 91					.word	Unused1                          ; $ae PROC
>92e0		fa 90					.word	Command_REPEAT                   ; $af REPEAT
>92e2		29 96					.word	Command_WHILE                    ; $b0 WHILE
>92e4		df 8a					.word	EndIf                            ; $b1 ENDIF
>92e6		82 90					.word	Command_ENDPROC                  ; $b2 ENDPROC
>92e8		25 8a					.word	NextCommand                      ; $b3 NEXT
>92ea		fe 91					.word	Unused4                          ; $b4 THEN
>92ec		03 91					.word	Command_UNTIL                    ; $b5 UNTIL
>92ee		4a 96					.word	Command_WEND                     ; $b6 WEND
>92f0		5c a8					.word	SyntaxError                      ; $b7 AT
>92f2		5c a8					.word	SyntaxError                      ; $b8 BY
>92f4		3c 87					.word	CallCommand                      ; $b9 CALL
>92f6		1d aa					.word	CircleCommand                    ; $ba CIRCLE
>92f8		71 87					.word	ClearCommand                     ; $bb CLEAR
>92fa		5c a8					.word	SyntaxError                      ; $bc COLOR
>92fc		5c a8					.word	SyntaxError                      ; $bd COLOUR
>92fe		d4 87					.word	Command_Data                     ; $be DATA
>9300		dc 87					.word	DimCommand                       ; $bf DIM
>9302		fe 91					.word	Unused3                          ; $c0 DOWNTO
>9304		d8 8a					.word	ElseCode                         ; $c1 ELSE
>9306		5c a8					.word	SyntaxError                      ; $c2 FROM
>9308		3c ac					.word	GfxCommand                       ; $c3 GFX
>930a		5c a8					.word	SyntaxError                      ; $c4 HERE
>930c		46 aa					.word	ImageCommand                     ; $c5 IMAGE
>930e		da 8b					.word	LetCommand                       ; $c6 LET
>9310		98 aa					.word	LineCommand                      ; $c7 LINE
>9312		06 8e					.word	Command_LOCAL                    ; $c8 LOCAL
>9314		c7 8e					.word	MCCommand                        ; $c9 MEMCOPY
>9316		5c a8					.word	SyntaxError                      ; $ca OFF
>9318		5c a8					.word	SyntaxError                      ; $cb ON
>931a		5c a8					.word	SyntaxError                      ; $cc OUTLINE
>931c		8d ac					.word	PaletteCommand                   ; $cd PALETTE
>931e		91 aa					.word	PlotCommand                      ; $ce PLOT
>9320		e7 8f					.word	PokeBCommand                     ; $cf POKE
>9322		f3 8f					.word	PokeDCommand                     ; $d0 POKED
>9324		ef 8f					.word	PokeLCommand                     ; $d1 POKEL
>9326		eb 8f					.word	PokeWCommand                     ; $d2 POKEW
>9328		90 90					.word	Command_Read                     ; $d3 READ
>932a		19 aa					.word	RectangleCommand                 ; $d4 RECT
>932c		ed 90					.word	RemCommand                       ; $d5 REM
>932e		5c a8					.word	SyntaxError                      ; $d6 SOLID
>9330		36 b7					.word	SoundCommand                     ; $d7 SOUND
>9332		28 aa					.word	SpriteCommand                    ; $d8 SPRITE
>9334		62 aa					.word	TextCommand                      ; $d9 TEXT
>9336		fe 91					.word	Unused2                          ; $da TO
.9338						VectorSet1:
>9338		5c a8					.word	SyntaxError                      ; $80 !0:EOF
>933a		5c a8					.word	SyntaxError                      ; $81 !1:SH1
>933c		5c a8					.word	SyntaxError                      ; $82 !2:SH2
>933e		ee 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>9340		0a 86					.word	AssertCommand                    ; $84 ASSERT
>9342		dc ab					.word	BitmapCtrl                       ; $85 BITMAP
>9344		1a 86					.word	Command_BLoad                    ; $86 BLOAD
>9346		ba 86					.word	Command_BSave                    ; $87 BSAVE
>9348		cc 87					.word	ClearScreen                      ; $88 CLS
>934a		e5 8a					.word	Command_CPrint                   ; $89 CPRINT
>934c		99 88					.word	Command_Dir                      ; $8a DIR
>934e		69 89					.word	Command_Drive                    ; $8b DRIVE
>9350		70 89					.word	EndCommand                       ; $8c END
>9352		ee b6					.word	Explode                          ; $8d EXPLODE
>9354		5c a8					.word	SyntaxError                      ; $8e GO
>9356		7e 8a					.word	Command_GOSUB                    ; $8f GOSUB
>9358		9c 8a					.word	GotoCommand                      ; $90 GOTO
>935a		5c a8					.word	SyntaxError                      ; $91 HIMEM
>935c		e0 8a					.word	Command_Input                    ; $92 INPUT
>935e		2a 8c					.word	Command_List                     ; $93 LIST
>9360		34 8d					.word	Command_Load                     ; $94 LOAD
>9362		d7 8f					.word	NewCommand                       ; $95 NEW
>9364		ca b6					.word	PingCommand                      ; $96 PING
>9366		ec 8a					.word	Command_Print                    ; $97 PRINT
>9368		1c 91					.word	Command_Restore                  ; $98 RESTORE
>936a		8e 8a					.word	Command_RETURN                   ; $99 RETURN
>936c		5b 91					.word	CommandRUNOptLoad                ; $9a RUN
>936e		0a 94					.word	Command_Save                     ; $9b SAVE
>9370		8e 94					.word	CommandSetDate                   ; $9c SETDATE
>9372		92 94					.word	CommandSetTime                   ; $9d SETTIME
>9374		e2 b6					.word	ShootCommand                     ; $9e SHOOT
>9376		21 ac					.word	SpritesCtrl                      ; $9f SPRITES
>9378		02 95					.word	StopCommand                      ; $a0 STOP
>937a		cf 95					.word	Command_VERIFY                   ; $a1 VERIFY
>937c		d6 ac					.word	XGoCommand                       ; $a2 XGO
>937e		cd ac					.word	XLoadCommand                     ; $a3 XLOAD
>9380		d6 b6					.word	ZapCommand                       ; $a4 ZAP
.9382						VectorSet2:
>9382		5c a8					.word	SyntaxError                      ; $80 !0:EOF
>9384		5c a8					.word	SyntaxError                      ; $81 !1:SH1
>9386		5c a8					.word	SyntaxError                      ; $82 !2:SH2
>9388		1b a7					.word	Assemble_adc                     ; $83 ADC
>938a		13 a7					.word	Assemble_and                     ; $84 AND
>938c		2f a7					.word	Assemble_asl                     ; $85 ASL
>938e		99 a7					.word	Assemble_bcc                     ; $86 BCC
>9390		9d a7					.word	Assemble_bcs                     ; $87 BCS
>9392		a5 a7					.word	Assemble_beq                     ; $88 BEQ
>9394		5c a7					.word	Assemble_bit                     ; $89 BIT
>9396		8d a7					.word	Assemble_bmi                     ; $8a BMI
>9398		a1 a7					.word	Assemble_bne                     ; $8b BNE
>939a		89 a7					.word	Assemble_bpl                     ; $8c BPL
>939c		a9 a7					.word	Assemble_bra                     ; $8d BRA
>939e		ad a7					.word	Assemble_brk                     ; $8e BRK
>93a0		91 a7					.word	Assemble_bvc                     ; $8f BVC
>93a2		95 a7					.word	Assemble_bvs                     ; $90 BVS
>93a4		b5 a7					.word	Assemble_clc                     ; $91 CLC
>93a6		09 a8					.word	Assemble_cld                     ; $92 CLD
>93a8		c9 a7					.word	Assemble_cli                     ; $93 CLI
>93aa		f9 a7					.word	Assemble_clv                     ; $94 CLV
>93ac		27 a7					.word	Assemble_cmp                     ; $95 CMP
>93ae		70 a7					.word	Assemble_cpx                     ; $96 CPX
>93b0		6b a7					.word	Assemble_cpy                     ; $97 CPY
>93b2		4d a7					.word	Assemble_dec                     ; $98 DEC
>93b4		05 a8					.word	Assemble_dex                     ; $99 DEX
>93b6		e1 a7					.word	Assemble_dey                     ; $9a DEY
>93b8		17 a7					.word	Assemble_eor                     ; $9b EOR
>93ba		52 a7					.word	Assemble_inc                     ; $9c INC
>93bc		15 a8					.word	Assemble_inx                     ; $9d INX
>93be		01 a8					.word	Assemble_iny                     ; $9e INY
>93c0		84 a7					.word	Assemble_jmp                     ; $9f JMP
>93c2		7f a7					.word	Assemble_jsr                     ; $a0 JSR
>93c4		23 a7					.word	Assemble_lda                     ; $a1 LDA
>93c6		48 a7					.word	Assemble_ldx                     ; $a2 LDX
>93c8		66 a7					.word	Assemble_ldy                     ; $a3 LDY
>93ca		39 a7					.word	Assemble_lsr                     ; $a4 LSR
>93cc		19 a8					.word	Assemble_nop                     ; $a5 NOP
>93ce		0f a7					.word	Assemble_ora                     ; $a6 ORA
>93d0		c5 a7					.word	Assemble_pha                     ; $a7 PHA
>93d2		b1 a7					.word	Assemble_php                     ; $a8 PHP
>93d4		0d a8					.word	Assemble_phx                     ; $a9 PHX
>93d6		cd a7					.word	Assemble_phy                     ; $aa PHY
>93d8		d5 a7					.word	Assemble_pla                     ; $ab PLA
>93da		b9 a7					.word	Assemble_plp                     ; $ac PLP
>93dc		21 a8					.word	Assemble_plx                     ; $ad PLX
>93de		dd a7					.word	Assemble_ply                     ; $ae PLY
>93e0		34 a7					.word	Assemble_rol                     ; $af ROL
>93e2		3e a7					.word	Assemble_ror                     ; $b0 ROR
>93e4		c1 a7					.word	Assemble_rti                     ; $b1 RTI
>93e6		d1 a7					.word	Assemble_rts                     ; $b2 RTS
>93e8		2b a7					.word	Assemble_sbc                     ; $b3 SBC
>93ea		bd a7					.word	Assemble_sec                     ; $b4 SEC
>93ec		1d a8					.word	Assemble_sed                     ; $b5 SED
>93ee		d9 a7					.word	Assemble_sei                     ; $b6 SEI
>93f0		1f a7					.word	Assemble_sta                     ; $b7 STA
>93f2		11 a8					.word	Assemble_stp                     ; $b8 STP
>93f4		43 a7					.word	Assemble_stx                     ; $b9 STX
>93f6		61 a7					.word	Assemble_sty                     ; $ba STY
>93f8		57 a7					.word	Assemble_stz                     ; $bb STZ
>93fa		f5 a7					.word	Assemble_tax                     ; $bc TAX
>93fc		f1 a7					.word	Assemble_tay                     ; $bd TAY
>93fe		7a a7					.word	Assemble_trb                     ; $be TRB
>9400		75 a7					.word	Assemble_tsb                     ; $bf TSB
>9402		fd a7					.word	Assemble_tsx                     ; $c0 TSX
>9404		e5 a7					.word	Assemble_txa                     ; $c1 TXA
>9406		ed a7					.word	Assemble_txs                     ; $c2 TXS
>9408		e9 a7					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.940a						Command_Save:
.940a		20 36 a6	jsr $a636			jsr 	EvaluateString 				; file name to load
.940d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.940f		a5 36		lda $36				lda 	zTemp0
.9411		20 94 81	jsr $8194			jsr 	KNLOpenFileWrite 			; open file for writing
.9414		b0 2f		bcs $9445			bcs 	CSErrorHandler 				; error, so fail.
.9416		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.9419		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.941b		85 30		sta $30				sta 	codePtr
.941d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.941f		85 31		sta $31				sta 	codePtr+1
.9421						_CSLoop:
.9421		b2 30		lda ($30)			lda 	(codePtr)
.9423		f0 17		beq $943c			beq 	_CSExit
.9425		20 69 94	jsr $9469			jsr 	CSGetCleanLine
.9428		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.942a		85 36		sta $36				sta 	zTemp0
.942c		20 48 94	jsr $9448			jsr 	CLWriteByteBlock 			; write the block out.
.942f		18		clc				clc
.9430		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9432		65 30		adc $30				adc 	codePtr
.9434		85 30		sta $30				sta 	codePtr
.9436		90 02		bcc $943a			bcc 	_CREExit
.9438		e6 31		inc $31				inc 	codePtr+1 					; carry
.943a						_CREExit:
.943a		80 e5		bra $9421			bra 	_CSLoop
.943c						_CSExit:
.943c		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close file
.943f		20 63 82	jsr $8263			jsr 	KNLCloseFile
.9442		4c 6d 8d	jmp $8d6d			jmp 	CLComplete 					; display complete message.
.9445						CSErrorHandler:
.9445		4c 88 8d	jmp $8d88			jmp 	CLErrorHandler
.9448						CLWriteByteBlock:
.9448		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.944a		f0 1c		beq $9468			beq 	_CLWBBExit					; if so, exit
.944c		ad 6d 07	lda $076d			lda 	BasicFileStream 			; stream to write, count in X
.944f		20 29 82	jsr $8229			jsr 	KNLWriteBlock 				; call one write attempt
.9452		b0 f1		bcs $9445			bcs 	CSErrorHandler 				; error occurred
.9454		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9456		8a		txa				txa 								; subtract bytes written from X, total count.
.9457		38		sec				sec
.9458		e5 38		sbc $38				sbc 	zTemp1
.945a		aa		tax				tax
.945b		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.945c		a5 36		lda $36				lda 	zTemp0
.945e		65 38		adc $38				adc 	zTemp1
.9460		85 36		sta $36				sta 	zTemp0
.9462		90 e4		bcc $9448			bcc 	CLWriteByteBlock
.9464		e6 37		inc $37				inc 	zTemp0+1
.9466		80 e0		bra $9448			bra 	CLWriteByteBlock 			; and retry write out.
.9468						_CLWBBExit:
.9468		60		rts				rts
.9469						CSGetCleanLine:
.9469		a9 00		lda #$00			lda 	#0 							; no indent.
.946b		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.946e		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9470		a0 00		ldy #$00			ldy 	#0
.9472						_CSClean:
.9472		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.9475		f0 09		beq $9480			beq 	_CSDoneClean
.9477		30 04		bmi $947d			bmi 	_CSIgnoreCharacter
.9479		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.947c		e8		inx				inx
.947d						_CSIgnoreCharacter:
.947d		c8		iny				iny
.947e		80 f2		bra $9472			bra 	_CSClean
.9480						_CSDoneClean:
.9480		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9482		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9485		e8		inx				inx
.9486		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.9489		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.948b		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.948d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.948e						CommandSetDate:
.948e		a9 03		lda #$03			lda 	#3
.9490		80 02		bra $9494			bra 	CSDTMain
.9492						CommandSetTime:
.9492		a9 00		lda #$00			lda 	#0
.9494						CSDTMain:
.9494		48		pha				pha 								; save table offsets 0 or 3
.9495		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9497		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.949a		20 60 96	jsr $9660			jsr 	CheckComma
.949d		e8		inx				inx
.949e		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.94a1		20 60 96	jsr $9660			jsr 	CheckComma
.94a4		e8		inx				inx
.94a5		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.94a8		68		pla				pla 								; table offset in Y, saving Y
.94a9		5a		phy				phy
.94aa		a8		tay				tay
.94ab		a2 00		ldx #$00			ldx 	#0 							; first number
.94ad		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.94af		48		pha				pha
.94b0		64 01		stz $01				stz 	1
.94b2						_CSDTCopy:
.94b2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.94b4		d9 f6 94	cmp $94f6,y			cmp 	RTCWMinValues,y 			; check range
.94b7		90 1b		bcc $94d4			bcc 	_CSDTRange
.94b9		d9 fc 94	cmp $94fc,y			cmp 	RTCWMaxValues,y
.94bc		b0 16		bcs $94d4			bcs 	_CSDTRange
.94be		20 d9 94	jsr $94d9			jsr 	CSDTDecimalToBCD
.94c1		da		phx				phx 								; save X
.94c2		be f0 94	ldx $94f0,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.94c5		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.94c8		fa		plx				plx 								; restore X
.94c9		e8		inx				inx 								; next number
.94ca		c8		iny				iny 								; next table entries
.94cb		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.94cd		d0 e3		bne $94b2			bne 	_CSDTCopy
.94cf		68		pla				pla 								; restore I/O space
.94d0		85 01		sta $01				sta 	1
.94d2		7a		ply				ply 								; restore code pos and exit.
.94d3		60		rts				rts
.94d4						_CSDTRange:
.94d4		a9 04		lda #$04		lda	#4
.94d6		4c 71 96	jmp $9671		jmp	ErrorHandler
.94d9						CSDTDecimalToBCD:
.94d9		da		phx				phx 								; 10 count in X
.94da		a2 00		ldx #$00			ldx 	#0
.94dc						_CSDTDBLoop:
.94dc		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.94de		90 05		bcc $94e5			bcc 	_CSDTDBExit
.94e0		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.94e2		e8		inx				inx 								; one more 10s.
.94e3		80 f7		bra $94dc			bra 	_CSDTDBLoop
.94e5						_CSDTDBExit:
.94e5		85 36		sta $36				sta 	zTemp0 						; units
.94e7		8a		txa				txa 								; 10s x 16
.94e8		0a		asl a				asl 	a
.94e9		0a		asl a				asl 	a
.94ea		0a		asl a				asl 	a
.94eb		0a		asl a				asl 	a
.94ec		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.94ee		fa		plx				plx
.94ef		60		rts				rts
.94f0						RTCWOffset:
>94f0		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.94f6						RTCWMinValues:
>94f6		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.94fc						RTCWMaxValues:
>94fc		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9502						StopCommand:
.9502		a9 08		lda #$08		lda	#8
.9504		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9507						ProcedureScan:
.9507		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9509		85 30		sta $30				sta 	codePtr
.950b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.950d		85 31		sta $31				sta 	codePtr+1
.950f						_PSLoop:
.950f		b2 30		lda ($30)			lda 	(codePtr)
.9511		f0 42		beq $9555			beq 	_PSExit
.9513		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9515		b1 30		lda ($30),y			lda 	(codePtr),y
.9517		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.9519		d0 2d		bne $9548			bne 	_PSNext
.951b		c8		iny				iny 								; get the address of the record to zTemp0 and
.951c		b1 30		lda ($30),y			lda 	(codePtr),y
.951e		29 c0		and #$c0			and 	#$C0
.9520		c9 40		cmp #$40			cmp 	#$40
.9522		d0 32		bne $9556			bne 	_PSSyntax
.9524		b1 30		lda ($30),y			lda 	(codePtr),y
.9526		18		clc				clc
.9527		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9529		85 37		sta $37				sta 	zTemp0+1
.952b		c8		iny				iny 								; LSB
.952c		b1 30		lda ($30),y			lda 	(codePtr),y
.952e		85 36		sta $36				sta 	zTemp0
.9530		c8		iny				iny 								; character after variable call.
.9531		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9532		a0 07		ldy #$07			ldy 	#7
.9534		91 36		sta ($36),y			sta 	(zTemp0),y
.9536		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9538		a0 02		ldy #$02			ldy 	#2
.953a		91 36		sta ($36),y			sta 	(zTemp0),y
.953c		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.953e						_PSCopy:
.953e		b5 30		lda $30,x			lda 	safePtr,x
.9540		c8		iny				iny
.9541		91 36		sta ($36),y			sta 	(zTemp0),y
.9543		e8		inx				inx
.9544		e0 04		cpx #$04			cpx 	#4
.9546		d0 f6		bne $953e			bne 	_PSCopy
.9548						_PSNext:
.9548		18		clc				clc
.9549		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.954b		65 30		adc $30				adc 	codePtr
.954d		85 30		sta $30				sta 	codePtr
.954f		90 02		bcc $9553			bcc 	_CREExit
.9551		e6 31		inc $31				inc 	codePtr+1 					; carry
.9553						_CREExit:
.9553		80 ba		bra $950f			bra 	_PSLoop
.9555						_PSExit:
.9555		60		rts				rts
.9556						_PSSyntax:
.9556		4c 5c a8	jmp $a85c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9559						ScanForward:
.9559		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.955b		86 37		stx $37				stx 	zTemp0+1
.955d		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.955f						_ScanLoop:
.955f		b1 30		lda ($30),y			lda 	(codePtr),y
.9561		c8		iny				iny
.9562		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9564		d0 0e		bne $9574			bne 	_ScanGoNext
.9566		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9568		f0 04		beq $956e			beq 	_ScanMatch
.956a		c5 37		cmp $37				cmp 	zTemp0+1
.956c		d0 06		bne $9574			bne 	_ScanGoNext
.956e						_ScanMatch:
.956e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9570		d0 01		bne $9573			bne 	_ScanNotEndEOL
.9572		88		dey				dey
.9573						_ScanNotEndEOL:
.9573		60		rts				rts
.9574						_ScanGoNext:
.9574		20 79 95	jsr $9579			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9577		80 e6		bra $955f			bra 	_ScanLoop
.9579						ScanForwardOne:
.9579		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.957b		90 3e		bcc $95bb			bcc 	_SFWExit
.957d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.957f		90 18		bcc $9599			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9581		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9583		b0 2f		bcs $95b4			bcs 	_ScanSkipData
.9585		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9587		90 32		bcc $95bb			bcc 	_SFWExit 					; if not, ordinary keywords.
.9589		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.958b		b0 2e		bcs $95bb			bcs 	_SFWExit
.958d		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.958f		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9591		b0 28		bcs $95bb			bcs 	_SFWExit
.9593		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9595		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9597		80 22		bra $95bb			bra 	_SFWExit
.9599						_ScanSkipOne:
.9599		c8		iny				iny 								; consume the extra one.
.959a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.959c		d0 1d		bne $95bb			bne 	_SFWExit
.959e		18		clc				clc
.959f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.95a1		65 30		adc $30				adc 	codePtr
.95a3		85 30		sta $30				sta 	codePtr
.95a5		90 02		bcc $95a9			bcc 	_CREExit
.95a7		e6 31		inc $31				inc 	codePtr+1 					; carry
.95a9						_CREExit:
.95a9		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.95ab		b2 30		lda ($30)			lda 	(codePtr)
.95ad		d0 0c		bne $95bb			bne 	_SFWExit 					; if not zero, more to scan
.95af		a9 13		lda #$13		lda	#19
.95b1		4c 71 96	jmp $9671		jmp	ErrorHandler
.95b4						_ScanSkipData:
.95b4		88		dey				dey 								; point at data token
.95b5		c8		iny				iny 								; point to offset
.95b6		98		tya				tya 								; A = offset position
.95b7		38		sec				sec 								; add size +1 hence SEC
.95b8		71 30		adc ($30),y			adc 	(codePtr),y
.95ba		a8		tay				tay 								; make current position.
.95bb						_SFWExit:
.95bb		60		rts				rts
.95bc						ScanGetCurrentLineStep:
.95bc		64 38		stz $38				stz 	zTemp1
.95be		a0 03		ldy #$03			ldy 	#3
.95c0						_SGCLSLoop:
.95c0		b1 30		lda ($30),y			lda 	(codePtr),y
.95c2		c8		iny				iny
.95c3		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.95c5		f0 05		beq $95cc			beq 	_SGCLSExit
.95c7		20 79 95	jsr $9579			jsr 	ScanForwardOne
.95ca		80 f4		bra $95c0			bra 	_SGCLSLoop
.95cc						_SGCLSExit:
.95cc		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.95ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc72						m
.95cf						Command_VERIFY:
.95cf		20 36 a6	jsr $a636			jsr 	EvaluateString 				; file name to verify
.95d2		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.95d4		a5 36		lda $36				lda 	zTemp0
.95d6		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.95d9		b0 4b		bcs $9626			bcs 	_CVErrorHandler 			; error, so fail.
.95db		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.95de		20 d8 8d	jsr $8dd8			jsr     LoadReadByteInit            ; Init reader with the stream
.95e1		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.95e4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95e6		85 30		sta $30				sta 	codePtr
.95e8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95ea		85 31		sta $31				sta 	codePtr+1
.95ec						_CVLoop:
.95ec		20 96 8d	jsr $8d96			jsr 	LoadReadLine 				; get next line.
.95ef		f0 27		beq $9618			beq 	_CVExit 					; end, exit.
.95f1		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.95f4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.95f7		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.95fa		f0 f0		beq $95ec			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.95fc		a0 00		ldy #$00			ldy 	#0 							; start compare
.95fe						_CVCompareLoop:
.95fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9600		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.9603		d0 1c		bne $9621			bne 	_CVCompareError
.9605		c8		iny				iny
.9606		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.9609		d0 f3		bne $95fe			bne 	_CVCompareLoop
.960b		18		clc				clc
.960c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.960e		65 30		adc $30				adc 	codePtr
.9610		85 30		sta $30				sta 	codePtr
.9612		90 02		bcc $9616			bcc 	_CREExit
.9614		e6 31		inc $31				inc 	codePtr+1 					; carry
.9616						_CREExit:
.9616		80 d4		bra $95ec			bra 	_CVLoop
.9618						_CVExit:
.9618		ad 6d 07	lda $076d			lda 	BasicFileStream
.961b		20 63 82	jsr $8263			jsr 	KNLCloseFile
.961e		4c 6d 8d	jmp $8d6d			jmp 	CLComplete
.9621						_CVCompareError:
.9621		a9 1b		lda #$1b		lda	#27
.9623		4c 71 96	jmp $9671		jmp	ErrorHandler
.9626						_CVErrorHandler:
.9626		4c 88 8d	jmp $8d88			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9629						Command_WHILE:
.9629		5a		phy				phy 								; save position of the test
.962a		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.962c		20 2c a6	jsr $a62c			jsr 	EvaluateNumber
.962f		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; check if zero
.9632		f0 0e		beq $9642			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9634		98		tya				tya 								; position *after* test.
.9635		7a		ply				ply 								; restore position before test, at WHILE
.9636		88		dey				dey 								; so we execute the WHILE command again.
.9637		48		pha				pha 								; push after test on the stack
.9638		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.963a		20 bd b7	jsr $b7bd			jsr 	StackOpen
.963d		20 02 b8	jsr $b802			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9640		7a		ply				ply 								; restore the position *after* the test
.9641		60		rts				rts
.9642						_WHExitLoop:
.9642		68		pla				pla 								; throw post loop position
.9643		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.9645		aa		tax				tax
.9646		20 59 95	jsr $9559			jsr 	ScanForward
.9649		60		rts				rts
.964a						Command_WEND:
.964a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.964c		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.964e		20 ea b7	jsr $b7ea			jsr 	StackCheckFrame
.9651		20 13 b8	jsr $b813			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9654		20 dc b7	jsr $b7dc			jsr 	StackClose		 			; erase the frame
.9657		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9658						CheckRightBracket:
.9658		b1 30		lda ($30),y			lda 	(codePtr),y
.965a		c8		iny				iny
.965b		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.965d		d0 0f		bne $966e			bne 	CNAFail
.965f		60		rts				rts
.9660						CheckComma:
.9660		b1 30		lda ($30),y			lda 	(codePtr),y
.9662		c8		iny				iny
.9663		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9665		d0 07		bne $966e			bne 	CNAFail
.9667		60		rts				rts
.9668						CheckNextA:
.9668		d1 30		cmp ($30),y			cmp 	(codePtr),y
.966a		d0 02		bne $966e			bne 	CNAFail
.966c		c8		iny				iny 								; skip character
.966d		60		rts				rts 								; and exit
.966e						CNAFail:
.966e		4c 5c a8	jmp $a85c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9671						ErrorHandler:
.9671		a8		tay				tay 								; find the error text
.9672		f0 49		beq $96bd			beq 	_EHEnd
.9674		a2 00		ldx #$00			ldx 	#0
.9676		a9 75		lda #$75			lda 	#((ErrorText) & $FF)
.9678		85 36		sta $36				sta 	0+zTemp0
.967a		a9 a8		lda #$a8			lda 	#((ErrorText) >> 8)
.967c		85 37		sta $37				sta 	1+zTemp0
.967e						_EHFind:
.967e		88		dey				dey 								; keep looking through text
.967f		f0 0e		beq $968f			beq 	_EHFound
.9681						_EHFindZero:
.9681		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9683		e6 36		inc $36				inc 	zTemp0
.9685		d0 02		bne $9689			bne 	_EHFNoCarry
.9687		e6 37		inc $37				inc 	zTemp0+1
.9689						_EHFNoCarry:
.9689		c9 00		cmp #$00			cmp 	#0
.968b		d0 f4		bne $9681			bne 	_EHFindZero
.968d		80 ef		bra $967e			bra 	_EHFind
.968f						_EHFound:
.968f		a5 36		lda $36				lda 	zTemp0 						; print message
.9691		a6 37		ldx $37				ldx 	zTemp0+1
.9693		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.9696		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9698		b1 30		lda ($30),y			lda 	(codePtr),y
.969a		d0 05		bne $96a1			bne 	_EHAtMsg
.969c		c8		iny				iny
.969d		b1 30		lda ($30),y			lda 	(codePtr),y
.969f		f0 17		beq $96b8			beq 	_EHCREnd
.96a1						_EHAtMsg:
.96a1		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.96a3		a9 c0		lda #$c0			lda 	#_AtMsg & $FF
.96a5		20 ca 96	jsr $96ca			jsr 	PrintStringXA
.96a8		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.96aa		b1 30		lda ($30),y			lda 	(codePtr),y
.96ac		48		pha				pha
.96ad		c8		iny				iny
.96ae		b1 30		lda ($30),y			lda 	(codePtr),y
.96b0		aa		tax				tax
.96b1		68		pla				pla
.96b2		20 e0 9a	jsr $9ae0			jsr 	ConvertInt16 				; convert XA to string
.96b5		20 ca 96	jsr $96ca			jsr 	PrintStringXA 				; and print it.
.96b8						_EHCREnd:
.96b8		a9 0d		lda #$0d			lda 	#13 						; new line
.96ba		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.96bd						_EHEnd:
.96bd		4c b9 85	jmp $85b9			jmp 	WarmStart
>96c0		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>96c8		20 00
.96ca						PrintStringXA:
.96ca		5a		phy				phy
.96cb		86 37		stx $37				stx 	zTemp0+1
.96cd		85 36		sta $36				sta 	zTemp0
.96cf		a0 00		ldy #$00			ldy 	#0
.96d1						_PSXALoop:
.96d1		b1 36		lda ($36),y			lda 	(zTemp0),y
.96d3		f0 06		beq $96db			beq 	_PSXAExit
.96d5		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.96d8		c8		iny				iny
.96d9		80 f6		bra $96d1			bra 	_PSXALoop
.96db						_PSXAExit:
.96db		7a		ply				ply
.96dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.96dd						UnaryTrue:
.96dd		fa		plx				plx
.96de						ReturnTrue:
.96de		a9 01		lda #$01			lda 	#1  						; set to 1
.96e0		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.96e3		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96e5		95 50		sta $50,x			sta 	NSStatus,x
.96e7		60		rts				rts
.96e8						UnaryFalse:
.96e8		fa		plx				plx
.96e9						ReturnFalse:
.96e9		4c de a6	jmp $a6de			jmp 	NSMSetZero 					; set it all to zero
.96ec						BinaryCompareEqual:
.96ec		fa		plx				plx
.96ed		20 28 97	jsr $9728			jsr 	CompareBaseCode
.96f0		c9 00		cmp #$00			cmp 	#0
.96f2		f0 ea		beq $96de			beq 	ReturnTrue
.96f4		80 f3		bra $96e9			bra 	ReturnFalse
.96f6						BinaryCompareLess:
.96f6		fa		plx				plx
.96f7		20 28 97	jsr $9728			jsr 	CompareBaseCode
.96fa		c9 ff		cmp #$ff			cmp 	#$FF
.96fc		f0 e0		beq $96de			beq 	ReturnTrue
.96fe		80 e9		bra $96e9			bra 	ReturnFalse
.9700						BinaryCompareGreater:
.9700		fa		plx				plx
.9701		20 28 97	jsr $9728			jsr 	CompareBaseCode
.9704		c9 01		cmp #$01			cmp 	#1
.9706		f0 d6		beq $96de			beq 	ReturnTrue
.9708		80 df		bra $96e9			bra 	ReturnFalse
.970a						BinaryCompareNotEqual:
.970a		fa		plx				plx
.970b		20 28 97	jsr $9728			jsr 	CompareBaseCode
.970e		c9 00		cmp #$00			cmp 	#0
.9710		d0 cc		bne $96de			bne 	ReturnTrue
.9712		80 d5		bra $96e9			bra 	ReturnFalse
.9714						BinaryCompareLessEqual:
.9714		fa		plx				plx
.9715		20 28 97	jsr $9728			jsr 	CompareBaseCode
.9718		c9 01		cmp #$01			cmp 	#1
.971a		d0 c2		bne $96de			bne 	ReturnTrue
.971c		80 cb		bra $96e9			bra 	ReturnFalse
.971e						BinaryCompareGreaterEqual:
.971e		fa		plx				plx
.971f		20 28 97	jsr $9728			jsr 	CompareBaseCode
.9722		c9 ff		cmp #$ff			cmp 	#$FF
.9724		d0 b8		bne $96de			bne 	ReturnTrue
.9726		80 c1		bra $96e9			bra 	ReturnFalse
.9728						CompareBaseCode:
.9728		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; make both values if references.
.972b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.972d		15 51		ora $51,x			ora 	NSStatus+1,x
.972f		29 10		and #$10			and 	#NSTString
.9731		d0 37		bne $976a			bne 	_CBCString 					; if so do string code, which will check if both.
.9733		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9735		15 79		ora $79,x			ora 	NSExponent+1,x
.9737		d0 34		bne $976d			bne 	_CBCFloat
.9739		b5 50		lda $50,x			lda 	NSStatus,x
.973b		15 51		ora $51,x			ora 	NSStatus+1,x
.973d		29 08		and #$08			and 	#NSTFloat
.973f		d0 2c		bne $976d			bne 	_CBCFloat
.9741		20 70 97	jsr $9770			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9744		e8		inx				inx
.9745		20 70 97	jsr $9770			jsr 	CompareFixMinusZero
.9748		ca		dex				dex
.9749		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.974b		55 51		eor $51,x			eor 	NSStatus+1,x
.974d		10 0a		bpl $9759			bpl 	_CDCSameSign
.974f		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9751		30 14		bmi $9767			bmi 	_CBCLess 					; return $FF
.9753						_CBCGreater:
.9753		a9 01		lda #$01			lda 	#1
.9755		60		rts				rts
.9756						_CBCEqual:
.9756		a9 00		lda #$00			lda 	#0
.9758		60		rts				rts
.9759						_CDCSameSign:
.9759		20 85 99	jsr $9985			jsr 	SubTopTwoStack 				; unsigned subtract
.975c		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; or the mantissa together
.975f		f0 f5		beq $9756			beq 	_CBCEqual 					; -0 == 0
.9761		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9763		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9765		10 ec		bpl $9753			bpl 	_CBCGreater
.9767						_CBCLess:
.9767		a9 ff		lda #$ff			lda 	#$FF
.9769		60		rts				rts
.976a						_CBCString:
.976a		4c f6 98	jmp $98f6			jmp 	CompareStrings
.976d						_CBCFloat:
.976d		4c 40 9c	jmp $9c40			jmp 	CompareFloat
.9770						CompareFixMinusZero:
.9770		20 00 a7	jsr $a700			jsr 	NSMIsZero
.9773		d0 02		bne $9777			bne 	_CFXMZNotZero
.9775		74 50		stz $50,x			stz 	NSStatus,x
.9777						_CFXMZNotZero:
.9777		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9778						StringConcat:
.9778		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.977a		35 51		and $51,x			and 	NSStatus+1,x
.977c		29 18		and #$18			and 	#NSBTypeMask
.977e		c9 10		cmp #$10			cmp 	#NSTString
.9780		d0 50		bne $97d2			bne		_SCType
.9782		64 38		stz $38				stz 	zTemp1 						; counting total length
.9784		e8		inx				inx
.9785		20 a3 97	jsr $97a3			jsr 	_SCSetupZ0 					; setup for second
.9788		20 ac 97	jsr $97ac			jsr 	_SCLengthZ0 				; length for second
.978b		ca		dex				dex
.978c		20 a3 97	jsr $97a3			jsr 	_SCSetupZ0 					; setup for first
.978f		20 ac 97	jsr $97ac			jsr 	_SCLengthZ0 				; length for first
.9792		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9794		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.9797		20 c3 97	jsr $97c3			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.979a		e8		inx				inx
.979b		20 a3 97	jsr $97a3			jsr 	_SCSetupZ0 					; copy second out
.979e		20 c3 97	jsr $97c3			jsr 	_SCCopy
.97a1		ca		dex				dex
.97a2		60		rts				rts
.97a3						_SCSetupZ0:
.97a3		b5 58		lda $58,x			lda 	NSMantissa0,x
.97a5		85 36		sta $36				sta 	zTemp0
.97a7		b5 60		lda $60,x			lda 	NSMantissa1,x
.97a9		85 37		sta $37				sta 	zTemp0+1
.97ab		60		rts				rts
.97ac						_SCLengthZ0:
.97ac		5a		phy				phy
.97ad		a0 00		ldy #$00			ldy 	#0
.97af						_SCLenLoop:
.97af		b1 36		lda ($36),y			lda 	(zTemp0),y
.97b1		f0 0e		beq $97c1			beq 	_SCLExit
.97b3		c8		iny				iny
.97b4		e6 38		inc $38				inc 	zTemp1
.97b6		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.97b8		c9 fd		cmp #$fd			cmp 	#253
.97ba		d0 f3		bne $97af			bne		_SCLenLoop
.97bc		a9 09		lda #$09		lda	#9
.97be		4c 71 96	jmp $9671		jmp	ErrorHandler
.97c1						_SCLExit:
.97c1		7a		ply				ply
.97c2		60		rts				rts
.97c3						_SCCopy:
.97c3		5a		phy				phy
.97c4		a0 00		ldy #$00			ldy 	#0
.97c6						_SCCopyLoop:
.97c6		b1 36		lda ($36),y			lda 	(zTemp0),y
.97c8		f0 06		beq $97d0			beq 	_SCCExit
.97ca		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.97cd		c8		iny				iny
.97ce		80 f6		bra $97c6			bra 	_SCCopyLoop
.97d0						_SCCExit:
.97d0		7a		ply				ply
.97d1		60		rts				rts
.97d2						_SCType:
.97d2		4c 66 a8	jmp $a866			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.97d5						IntegerDivide:
.97d5		fa		plx				plx
.97d6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d8		15 51		ora $51,x			ora 	NSStatus+1,x
.97da		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97db		0a		asl a				asl 	a
.97dc		10 05		bpl $97e3			bpl 	_NotRef
.97de		48		pha				pha
.97df		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e2		68		pla				pla
.97e3						_NotRef:
.97e3		0a		asl a				asl 	a
.97e4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97e6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e8		15 79		ora $79,x			ora 	NSExponent+1,x
.97ea		f0 03		beq $97ef			beq 	_IntegerCode 				; if clear, then we have two integers
.97ec		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.97ef						_IntegerCode:
.97ef		20 09 98	jsr $9809			jsr 	CheckDivideZero 			; do div zero check
.97f2		20 3b 98	jsr $983b			jsr 	Int32Divide 				; do the division
.97f5		20 ec 98	jsr $98ec			jsr 	CalculateSign 				; calculate result sign
.97f8						NSMCopyPlusTwoToZero:
.97f8		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.97fa		95 58		sta $58,x			sta 	NSMantissa0,x
.97fc		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.97fe		95 60		sta $60,x			sta 	NSMantissa1,x
.9800		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9802		95 68		sta $68,x			sta 	NSMantissa2,x
.9804		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9806		95 70		sta $70,x			sta 	NSMantissa3,x
.9808		60		rts				rts
.9809						CheckDivideZero:
.9809		e8		inx				inx
.980a		20 00 a7	jsr $a700			jsr 	NSMIsZero
.980d		f0 02		beq $9811			beq 	_CDVError
.980f		ca		dex				dex
.9810		60		rts				rts
.9811						_CDVError:
.9811		a9 03		lda #$03		lda	#3
.9813		4c 71 96	jmp $9671		jmp	ErrorHandler
.9816						IntegerModulus:
.9816		fa		plx				plx
.9817		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9819		15 51		ora $51,x			ora 	NSStatus+1,x
.981b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.981c		0a		asl a				asl 	a
.981d		10 05		bpl $9824			bpl 	_NotRef
.981f		48		pha				pha
.9820		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9823		68		pla				pla
.9824						_NotRef:
.9824		0a		asl a				asl 	a
.9825		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9827		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9829		15 79		ora $79,x			ora 	NSExponent+1,x
.982b		f0 03		beq $9830			beq 	_IntegerCode 				; if clear, then we have two integers
.982d		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9830						_IntegerCode:
.9830						IntegerModulusNoCheck:
.9830		20 09 98	jsr $9809			jsr 	CheckDivideZero 			; do div zero check
.9833		20 3b 98	jsr $983b			jsr 	Int32Divide 				; do the division
.9836		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9838		56 50		lsr $50,x			lsr 	NSStatus,x
.983a		60		rts				rts
.983b						Int32Divide:
.983b		48		pha				pha 								; save AXY
.983c		5a		phy				phy
.983d		20 c1 a6	jsr $a6c1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9840		20 da a6	jsr $a6da			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9843		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9845						_I32DivideLoop:
.9845		e8		inx				inx
.9846		e8		inx				inx
.9847		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.984a		ca		dex				dex
.984b		ca		dex				dex
.984c		20 ee a6	jsr $a6ee			jsr 	NSMRotateLeft
.984f		20 7a 98	jsr $987a			jsr 	DivideCheckSubtract 		; check if subtract possible
.9852		90 02		bcc $9856			bcc 	_I32DivideNoCarryIn
.9854		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9856						_I32DivideNoCarryIn:
.9856		88		dey				dey 								; loop round till division completed.
.9857		d0 ec		bne $9845			bne 	_I32DivideLoop
.9859		7a		ply				ply 								; restore AXY and exit
.985a		68		pla				pla
.985b		60		rts				rts
.985c						Int32ShiftDivide:
.985c		48		pha				pha 								; save AY
.985d		5a		phy				phy
.985e		e8		inx				inx 								; clear S[X+2]
.985f		e8		inx				inx
.9860		20 de a6	jsr $a6de			jsr 	NSMSetZero
.9863		ca		dex				dex
.9864		ca		dex				dex
.9865		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9867						_I32SDLoop:
.9867		20 7a 98	jsr $987a			jsr 	DivideCheckSubtract 		; check if subtract possible
.986a		e8		inx				inx
.986b		e8		inx				inx
.986c		20 ee a6	jsr $a6ee			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.986f		ca		dex				dex
.9870		ca		dex				dex
.9871		20 ee a6	jsr $a6ee			jsr 	NSMRotateLeft
.9874		88		dey				dey 	 							; do 31 times
.9875		d0 f0		bne $9867			bne 	_I32SDLoop
.9877		7a		ply				ply 								; restore AY and exit
.9878		68		pla				pla
.9879		60		rts				rts
.987a						DivideCheckSubtract:
.987a		20 85 99	jsr $9985			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.987d		b0 04		bcs $9883			bcs 	_DCSExit 					; if carry set, then could do, exit
.987f		20 6b 99	jsr $996b			jsr 	AddTopTwoStack 				; add it back in
.9882		18		clc				clc 								; and return False
.9883						_DCSExit:
.9883		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9884						MulInteger:
.9884		fa		plx				plx
.9885		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9887		15 51		ora $51,x			ora 	NSStatus+1,x
.9889		0a		asl a				asl 	a 							; shift reference bit into sign bit
.988a		0a		asl a				asl 	a
.988b		10 05		bpl $9892			bpl 	_NotRef
.988d		48		pha				pha
.988e		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9891		68		pla				pla
.9892						_NotRef:
.9892		0a		asl a				asl 	a 							; put MSB of type into A:7
.9893		30 09		bmi $989e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9895		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9897		15 79		ora $79,x			ora 	NSExponent+1,x
.9899		f0 06		beq $98a1			beq 	_IntegerCode 				; if clear, then we have two integers
.989b		4c 02 9d	jmp $9d02			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.989e						_StringData:
.989e		4c 70 a8	jmp $a870			jmp 	NotDoneError							; at least one string - don't know both are strings.
.98a1						_IntegerCode:
.98a1		20 ae 98	jsr $98ae			jsr 	MultiplyShort
.98a4		c9 00		cmp #$00			cmp 	#0
.98a6		f0 05		beq $98ad			beq 	_MIExit
.98a8		a9 04		lda #$04		lda	#4
.98aa		4c 71 96	jmp $9671		jmp	ErrorHandler
.98ad						_MIExit:
.98ad		60		rts				rts
.98ae						MultiplyShort:
.98ae		5a		phy				phy 								; save Y
.98af		20 c1 a6	jsr $a6c1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.98b2		20 da a6	jsr $a6da			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.98b5		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.98b7						_I32MLoop:
.98b7		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.98b9		15 62		ora $62,x			ora 	NSMantissa1+2,x
.98bb		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.98bd		15 72		ora $72,x			ora 	NSMantissa3+2,x
.98bf		f0 25		beq $98e6			beq 	_I32MExit 					; exit if zero
.98c1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.98c3		29 01		and #$01			and 	#1
.98c5		f0 0d		beq $98d4			beq 	_I32MNoAdd
.98c7		20 6b 99	jsr $996b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.98ca		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.98cc		10 06		bpl $98d4			bpl 	_I32MNoAdd
.98ce						_I32ShiftRight:
.98ce		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight 				; shift S[X] right
.98d1		c8		iny				iny 								; increment shift count
.98d2		80 09		bra $98dd			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.98d4						_I32MNoAdd:
.98d4		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.98d6		70 f6		bvs $98ce			bvs 	_I32ShiftRight 				; instead.
.98d8		e8		inx				inx
.98d9		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.98dc		ca		dex				dex
.98dd						_I32MShiftUpper:
.98dd		e8		inx				inx 								; shift S[X+2] right
.98de		e8		inx				inx
.98df		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight
.98e2		ca		dex				dex
.98e3		ca		dex				dex
.98e4		80 d1		bra $98b7			bra 	_I32MLoop 					; try again.
.98e6						_I32MExit:
.98e6		20 ec 98	jsr $98ec			jsr 	CalculateSign
.98e9		98		tya				tya 								; shift in A
.98ea		7a		ply				ply 								; restore Y and exit
.98eb		60		rts				rts
.98ec						CalculateSign:
.98ec		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.98ee		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.98f0		55 51		eor $51,x			eor 	NSStatus+1,x
.98f2		0a		asl a				asl 	a 							; shift bit 7 into carry
.98f3		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.98f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.98f6						CompareStrings:
.98f6		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.98f8		35 51		and $51,x			and 	NSStatus+1,x
.98fa		29 10		and #$10			and 	#NSBIsString
.98fc		f0 28		beq $9926			beq 	_CSTypeError
.98fe		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9900		85 36		sta $36				sta 	zTemp0
.9902		b5 60		lda $60,x			lda 	NSMantissa1,x
.9904		85 37		sta $37				sta 	zTemp0+1
.9906		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9908		85 38		sta $38				sta 	zTemp1
.990a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.990c		85 39		sta $39				sta 	zTemp1+1
.990e		5a		phy				phy 								; save Y so we can access strings
.990f		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9911						_CSLoop:
.9911		c8		iny				iny
.9912		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9914		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9916		d0 06		bne $991e			bne 	_CSDifferent
.9918		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.991a		d0 f5		bne $9911			bne 	_CSLoop 					; still comparing
.991c						_CSExit:
.991c		7a		ply				ply 								; reached end, return zero in A from EOS
.991d		60		rts				rts
.991e						_CSDifferent:
.991e		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9920		90 fa		bcc $991c			bcc		_CSExit
.9922		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9924		80 f6		bra $991c			bra 	_CSExit
.9926						_CSTypeError:
.9926		4c 66 a8	jmp $a866			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9929						ShiftLeft:
.9929		38		sec				sec 								; common code, carry determines which way.
.992a		80 01		bra $992d			bra 	ShiftMain
.992c						ShiftRight:
.992c		18		clc				clc
.992d						ShiftMain:
.992d		fa		plx				plx 								; restore X
.992e		08		php				php 								; save direction
.992f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9931		15 51		ora $51,x			ora 	NSStatus+1,x
.9933		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9934		0a		asl a				asl 	a
.9935		10 05		bpl $993c			bpl 	_NotRef
.9937		48		pha				pha
.9938		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.993b		68		pla				pla
.993c						_NotRef:
.993c		0a		asl a				asl 	a
.993d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.993f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9941		15 79		ora $79,x			ora 	NSExponent+1,x
.9943		f0 03		beq $9948			beq 	_IntegerCode 				; if clear, then we have two integers
.9945		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9948						_IntegerCode:
.9948		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.994a		29 e0		and #$e0			and 	#$E0
.994c		15 61		ora $61,x			ora 	NSMantissa1+1,x
.994e		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9950		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9952		d0 12		bne $9966			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9954						_SMLoop:
.9954		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9956		30 11		bmi $9969			bmi 	_SMExit 					; exit if done.
.9958		28		plp				plp 								; restore direction setting
.9959		08		php				php
.995a		90 05		bcc $9961			bcc 	_SMRight
.995c		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; shift left if CS
.995f		80 f3		bra $9954			bra 	_SMLoop
.9961						_SMRight:
.9961		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight 				; shift right if CC
.9964		80 ee		bra $9954			bra 	_SMLoop
.9966						_SMExit0:
.9966		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; return zero.
.9969						_SMExit:
.9969		28		plp				plp 								; throw direction
.996a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.996b						AddTopTwoStack:
.996b		18		clc				clc
.996c		b5 58		lda $58,x			lda		NSMantissa0,x
.996e		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9970		95 58		sta $58,x			sta 	NSMantissa0,x
.9972		b5 60		lda $60,x			lda		NSMantissa1,x
.9974		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9976		95 60		sta $60,x			sta 	NSMantissa1,x
.9978		b5 68		lda $68,x			lda		NSMantissa2,x
.997a		75 69		adc $69,x			adc 		NSMantissa2+1,x
.997c		95 68		sta $68,x			sta 	NSMantissa2,x
.997e		b5 70		lda $70,x			lda		NSMantissa3,x
.9980		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9982		95 70		sta $70,x			sta 	NSMantissa3,x
.9984		60		rts				rts
.9985						SubTopTwoStack:
.9985		38		sec				sec
.9986		b5 58		lda $58,x			lda		NSMantissa0,x
.9988		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.998a		95 58		sta $58,x			sta 	NSMantissa0,x
.998c		b5 60		lda $60,x			lda		NSMantissa1,x
.998e		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9990		95 60		sta $60,x			sta 	NSMantissa1,x
.9992		b5 68		lda $68,x			lda		NSMantissa2,x
.9994		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9996		95 68		sta $68,x			sta 	NSMantissa2,x
.9998		b5 70		lda $70,x			lda		NSMantissa3,x
.999a		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.999c		95 70		sta $70,x			sta 	NSMantissa3,x
.999e		60		rts				rts
.999f						AddInteger:
.999f		fa		plx				plx
.99a0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99a2		15 51		ora $51,x			ora 	NSStatus+1,x
.99a4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99a5		0a		asl a				asl 	a
.99a6		10 05		bpl $99ad			bpl 	_NotRef
.99a8		48		pha				pha
.99a9		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ac		68		pla				pla
.99ad						_NotRef:
.99ad		0a		asl a				asl 	a 							; put MSB of type into A:7
.99ae		30 09		bmi $99b9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99b0		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99b2		15 79		ora $79,x			ora 	NSExponent+1,x
.99b4		f0 06		beq $99bc			beq 	_IntegerCode 				; if clear, then we have two integers
.99b6		4c b2 9b	jmp $9bb2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.99b9						_StringData:
.99b9		4c 78 97	jmp $9778			jmp 	StringConcat							; at least one string - don't know both are strings.
.99bc						_IntegerCode:
.99bc						AddCode:
.99bc		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.99be		55 51		eor $51,x			eor 	NSStatus+1,x
.99c0		10 a9		bpl $996b			bpl 	AddTopTwoStack
.99c2		20 85 99	jsr $9985			jsr 	SubTopTwoStack 				; do a physical subtraction
.99c5		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.99c7		10 07		bpl $99d0			bpl 	_AddExit
.99c9		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.99cb		95 50		sta $50,x			sta 	NSStatus,x
.99cd		20 a7 a6	jsr $a6a7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.99d0						_AddExit:
.99d0		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; check for -0
.99d3		d0 02		bne $99d7			bne 	_AddNonZero
.99d5		74 50		stz $50,x			stz 	NSStatus,x
.99d7						_AddNonZero:
.99d7		60		rts				rts
.99d8						SubInteger:
.99d8		fa		plx				plx
.99d9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99db		15 51		ora $51,x			ora 	NSStatus+1,x
.99dd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99de		0a		asl a				asl 	a
.99df		10 05		bpl $99e6			bpl 	_NotRef
.99e1		48		pha				pha
.99e2		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99e5		68		pla				pla
.99e6						_NotRef:
.99e6		0a		asl a				asl 	a 							; put MSB of type into A:7
.99e7		30 09		bmi $99f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99e9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99eb		15 79		ora $79,x			ora 	NSExponent+1,x
.99ed		f0 06		beq $99f5			beq 	_IntegerCode 				; if clear, then we have two integers
.99ef		4c b7 9b	jmp $9bb7			jmp 	FloatingPointSub 							; otherwise at least one float.
.99f2						_StringData:
.99f2		4c 70 a8	jmp $a870			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99f5						_IntegerCode:
.99f5		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.99f7		49 80		eor #$80			eor 	#$80
.99f9		95 51		sta $51,x			sta 	NSStatus+1,x
.99fb		80 bf		bra $99bc			bra 	AddCode 					; and do the same code as add.
.99fd						AndInteger:
.99fd		fa		plx				plx
.99fe		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a00		15 51		ora $51,x			ora 	NSStatus+1,x
.9a02		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a03		0a		asl a				asl 	a
.9a04		10 05		bpl $9a0b			bpl 	_NotRef
.9a06		48		pha				pha
.9a07		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a0a		68		pla				pla
.9a0b						_NotRef:
.9a0b		0a		asl a				asl 	a
.9a0c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a0e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a10		15 79		ora $79,x			ora 	NSExponent+1,x
.9a12		f0 03		beq $9a17			beq 	_IntegerCode 				; if clear, then we have two integers
.9a14		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9a17						_IntegerCode:
.9a17		b5 58		lda $58,x			lda		NSMantissa0,x
.9a19		35 59		and $59,x			and 		NSMantissa0+1,x
.9a1b		95 58		sta $58,x			sta 	NSMantissa0,x
.9a1d		b5 60		lda $60,x			lda		NSMantissa1,x
.9a1f		35 61		and $61,x			and 		NSMantissa1+1,x
.9a21		95 60		sta $60,x			sta 	NSMantissa1,x
.9a23		b5 68		lda $68,x			lda		NSMantissa2,x
.9a25		35 69		and $69,x			and 		NSMantissa2+1,x
.9a27		95 68		sta $68,x			sta 	NSMantissa2,x
.9a29		b5 70		lda $70,x			lda		NSMantissa3,x
.9a2b		35 71		and $71,x			and 		NSMantissa3+1,x
.9a2d		95 70		sta $70,x			sta 	NSMantissa3,x
.9a2f		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a31		60		rts				rts
.9a32						OraInteger:
.9a32		fa		plx				plx
.9a33		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a35		15 51		ora $51,x			ora 	NSStatus+1,x
.9a37		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a38		0a		asl a				asl 	a
.9a39		10 05		bpl $9a40			bpl 	_NotRef
.9a3b		48		pha				pha
.9a3c		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a3f		68		pla				pla
.9a40						_NotRef:
.9a40		0a		asl a				asl 	a
.9a41		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a43		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a45		15 79		ora $79,x			ora 	NSExponent+1,x
.9a47		f0 03		beq $9a4c			beq 	_IntegerCode 				; if clear, then we have two integers
.9a49		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9a4c						_IntegerCode:
.9a4c		b5 58		lda $58,x			lda		NSMantissa0,x
.9a4e		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9a50		95 58		sta $58,x			sta 	NSMantissa0,x
.9a52		b5 60		lda $60,x			lda		NSMantissa1,x
.9a54		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9a56		95 60		sta $60,x			sta 	NSMantissa1,x
.9a58		b5 68		lda $68,x			lda		NSMantissa2,x
.9a5a		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9a5c		95 68		sta $68,x			sta 	NSMantissa2,x
.9a5e		b5 70		lda $70,x			lda		NSMantissa3,x
.9a60		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9a62		95 70		sta $70,x			sta 	NSMantissa3,x
.9a64		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a66		60		rts				rts
.9a67						EorInteger:
.9a67		fa		plx				plx
.9a68		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a6a		15 51		ora $51,x			ora 	NSStatus+1,x
.9a6c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a6d		0a		asl a				asl 	a
.9a6e		10 05		bpl $9a75			bpl 	_NotRef
.9a70		48		pha				pha
.9a71		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a74		68		pla				pla
.9a75						_NotRef:
.9a75		0a		asl a				asl 	a
.9a76		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a78		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a7a		15 79		ora $79,x			ora 	NSExponent+1,x
.9a7c		f0 03		beq $9a81			beq 	_IntegerCode 				; if clear, then we have two integers
.9a7e		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9a81						_IntegerCode:
.9a81		b5 58		lda $58,x			lda		NSMantissa0,x
.9a83		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a85		95 58		sta $58,x			sta 	NSMantissa0,x
.9a87		b5 60		lda $60,x			lda		NSMantissa1,x
.9a89		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a8b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a8d		b5 68		lda $68,x			lda		NSMantissa2,x
.9a8f		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9a91		95 68		sta $68,x			sta 	NSMantissa2,x
.9a93		b5 70		lda $70,x			lda		NSMantissa3,x
.9a95		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9a97		95 70		sta $70,x			sta 	NSMantissa3,x
.9a99		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a9b		60		rts				rts
.9a9c						WordIndirect:
.9a9c		fa		plx				plx
.9a9d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a9f		15 51		ora $51,x			ora 	NSStatus+1,x
.9aa1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aa2		0a		asl a				asl 	a
.9aa3		10 05		bpl $9aaa			bpl 	_NotRef
.9aa5		48		pha				pha
.9aa6		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9aa9		68		pla				pla
.9aaa						_NotRef:
.9aaa		0a		asl a				asl 	a
.9aab		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aad		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9aaf		15 79		ora $79,x			ora 	NSExponent+1,x
.9ab1		f0 03		beq $9ab6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ab3		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9ab6						_IntegerCode:
.9ab6		20 bc 99	jsr $99bc			jsr 	AddCode 					; add the two values
.9ab9		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9abb		95 50		sta $50,x			sta 	NSStatus,x
.9abd		60		rts				rts
.9abe						ByteIndirect:
.9abe		fa		plx				plx
.9abf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ac1		15 51		ora $51,x			ora 	NSStatus+1,x
.9ac3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ac4		0a		asl a				asl 	a
.9ac5		10 05		bpl $9acc			bpl 	_NotRef
.9ac7		48		pha				pha
.9ac8		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9acb		68		pla				pla
.9acc						_NotRef:
.9acc		0a		asl a				asl 	a
.9acd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9acf		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ad1		15 79		ora $79,x			ora 	NSExponent+1,x
.9ad3		f0 03		beq $9ad8			beq 	_IntegerCode 				; if clear, then we have two integers
.9ad5		4c 66 a8	jmp $a866			jmp 	TypeError 					; anything else, type mismatch.
.9ad8						_IntegerCode:
.9ad8		20 bc 99	jsr $99bc			jsr 	AddCode 					; add the two values
.9adb		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9add		95 50		sta $50,x			sta 	NSStatus,x
.9adf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9ae0						ConvertInt16:
.9ae0		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9ae2		86 60		stx $60				stx 	NSMantissa1
.9ae4		64 68		stz $68				stz 	NSMantissa2
.9ae6		64 70		stz $70				stz 	NSMantissa3
.9ae8		64 50		stz $50				stz 	NSStatus 					; positive integer
.9aea		a2 00		ldx #$00			ldx 	#0 							; stack level
.9aec		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9aee		80 00		bra $9af0			bra 	ConvertInt32
.9af0						ConvertInt32:
.9af0		5a		phy				phy
.9af1		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9af3		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9af5		10 08		bpl $9aff			bpl 	_CI32NotNeg
.9af7		48		pha				pha
.9af8		a9 2d		lda #$2d			lda 	#'-'
.9afa		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9afd		c8		iny				iny
.9afe		68		pla				pla
.9aff						_CI32NotNeg:
.9aff		20 0d 9b	jsr $9b0d			jsr 	_CI32DivideConvert 			; recursive conversion
.9b02		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9b04		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9b07		7a		ply				ply
.9b08		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9b0a		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9b0c		60		rts				rts
.9b0d						_CI32DivideConvert:
.9b0d		e8		inx				inx 								; write to next slot up
.9b0e		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte 		 			; write the base out.
.9b11		ca		dex				dex
.9b12		20 3b 98	jsr $983b			jsr 	Int32Divide 				; divide
.9b15		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9b17		48		pha				pha
.9b18		20 f8 97	jsr $97f8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9b1b		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; is it zero ?
.9b1e		f0 05		beq $9b25			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9b20		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9b22		20 0d 9b	jsr $9b0d			jsr 	_CI32DivideConvert 			; and recusrively call.
.9b25						_CI32NoRecurse:
.9b25		68		pla				pla 								; remainder
.9b26		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9b28		90 02		bcc $9b2c			bcc 	_CI32NotHex
.9b2a		69 26		adc #$26			adc 	#6+32
.9b2c						_CI32NotHex:
.9b2c		69 30		adc #$30			adc 	#48
.9b2e		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9b31		c8		iny				iny
.9b32		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9b33						PrecedenceLevel:
>9b33		04					.byte	 4	; $00 <<
>9b34		02					.byte	 2	; $01 <=
>9b35		02					.byte	 2	; $02 <>
>9b36		00					.byte	 0	; $03 !!3
>9b37		00					.byte	 0	; $04 ><
>9b38		02					.byte	 2	; $05 >=
>9b39		04					.byte	 4	; $06 >>
>9b3a		00					.byte	 0	; $07 !!7
>9b3b		00					.byte	 0	; $08 !!8
>9b3c		00					.byte	 0	; $09 !!9
>9b3d		00					.byte	 0	; $0a !!10
>9b3e		00					.byte	 0	; $0b !!11
>9b3f		00					.byte	 0	; $0c !!12
>9b40		00					.byte	 0	; $0d !!13
>9b41		00					.byte	 0	; $0e !!14
>9b42		00					.byte	 0	; $0f !!15
>9b43		00					.byte	 0	; $10 @
>9b44		00					.byte	 0	; $11 !!17
>9b45		00					.byte	 0	; $12 !!18
>9b46		00					.byte	 0	; $13 [
>9b47		04					.byte	 4	; $14 \
>9b48		00					.byte	 0	; $15 ]
>9b49		01					.byte	 1	; $16 ^
>9b4a		00					.byte	 0	; $17 _
>9b4b		00					.byte	 0	; $18 `
>9b4c		00					.byte	 0	; $19 !!25
>9b4d		00					.byte	 0	; $1a !!26
>9b4e		00					.byte	 0	; $1b {
>9b4f		01					.byte	 1	; $1c |
>9b50		00					.byte	 0	; $1d }
>9b51		00					.byte	 0	; $1e ~
>9b52		00					.byte	 0	; $1f <7F>
>9b53		00					.byte	 0	; $20
>9b54		05					.byte	 5	; $21 !
>9b55		00					.byte	 0	; $22 "
>9b56		00					.byte	 0	; $23 #
>9b57		05					.byte	 5	; $24 $
>9b58		04					.byte	 4	; $25 %
>9b59		01					.byte	 1	; $26 &
>9b5a		00					.byte	 0	; $27 '
>9b5b		00					.byte	 0	; $28 (
>9b5c		00					.byte	 0	; $29 )
>9b5d		04					.byte	 4	; $2a *
>9b5e		03					.byte	 3	; $2b +
>9b5f		00					.byte	 0	; $2c ,
>9b60		03					.byte	 3	; $2d -
>9b61		00					.byte	 0	; $2e .
>9b62		04					.byte	 4	; $2f /
>9b63		00					.byte	 0	; $30 0
>9b64		00					.byte	 0	; $31 1
>9b65		00					.byte	 0	; $32 2
>9b66		00					.byte	 0	; $33 3
>9b67		00					.byte	 0	; $34 4
>9b68		00					.byte	 0	; $35 5
>9b69		00					.byte	 0	; $36 6
>9b6a		00					.byte	 0	; $37 7
>9b6b		00					.byte	 0	; $38 8
>9b6c		00					.byte	 0	; $39 9
>9b6d		00					.byte	 0	; $3a :
>9b6e		00					.byte	 0	; $3b ;
>9b6f		02					.byte	 2	; $3c <
>9b70		02					.byte	 2	; $3d =
>9b71		02					.byte	 2	; $3e >
>9b72		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b73						EvaluateExpressionAt0:
.9b73		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b75						EvaluateExpression:
.9b75		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b77						EvaluateExpressionAtPrecedence:
.9b77		48		pha				pha 								; save precedence level
.9b78		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b7b		68		pla				pla 								; restore precedence level.
.9b7c						_EXPRLoop:
.9b7c		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b7e		b1 30		lda ($30),y			lda 	(codePtr),y
.9b80		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b82		b0 25		bcs $9ba9			bcs 	_EXPRExit
.9b84		da		phx				phx 								; read the operator precedence
.9b85		aa		tax				tax
.9b86		bd 33 9b	lda $9b33,x			lda 	PrecedenceLevel,x
.9b89		fa		plx				plx
.9b8a		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b8c		f0 1b		beq $9ba9			beq 	_EXPRExit
.9b8e		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b90		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b92		c5 37		cmp $37				cmp 	zTemp0+1
.9b94		b0 13		bcs $9ba9			bcs		_EXPRExit 					; if current >= operator exit
.9b96		48		pha				pha 								; save current precedence.
.9b97		b1 30		lda ($30),y			lda 	(codePtr),y
.9b99		c8		iny				iny
.9b9a		48		pha				pha
.9b9b		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b9d		e8		inx				inx 								; work out the right hand side.
.9b9e		20 77 9b	jsr $9b77			jsr 	EvaluateExpressionAtPrecedence
.9ba1		ca		dex				dex
.9ba2		68		pla				pla 								; get operator, call the code.
.9ba3		20 ac 9b	jsr $9bac			jsr 	_EXPRCaller
.9ba6		68		pla				pla 								; restore precedence level
.9ba7		80 d3		bra $9b7c			bra 	_EXPRLoop 					; and go round.
.9ba9						_EXPRExit:
.9ba9		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9bab		60		rts				rts
.9bac						_EXPRCaller:
.9bac		da		phx				phx 								; save on stack, first thing is to restore it
.9bad		0a		asl a				asl 	a 							; double so can use vectors into X
.9bae		aa		tax				tax
.9baf		7c 02 92	jmp ($9202,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9bb2						FloatingPointAdd:
.9bb2		20 28 9d	jsr $9d28			jsr 	FloatPrepare 				; prepare for floats
.9bb5		80 09		bra $9bc0			bra 	FloatAdd
.9bb7						FloatingPointSub:
.9bb7		20 28 9d	jsr $9d28			jsr 	FloatPrepare 				; prepare for floats
.9bba						FloatSubtract:
.9bba		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9bbc		49 80		eor #$80			eor 	#$80
.9bbe		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9bc0						FloatAdd:
.9bc0		48		pha				pha
.9bc1		5a		phy				phy
.9bc2		20 37 9d	jsr $9d37			jsr 	NSNormalise 				; normalise S[X]
.9bc5		f0 51		beq $9c18			beq 	_FAReturn1
.9bc7		e8		inx				inx 								; normalise S[X+1]
.9bc8		20 37 9d	jsr $9d37			jsr 	NSNormalise
.9bcb		ca		dex				dex
.9bcc		c9 00		cmp #$00			cmp 	#0
.9bce		f0 60		beq $9c30			beq 	_FAExit 					; if so, just return A
.9bd0		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9bd2		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9bd4		f0 18		beq $9bee			beq 	_FAExponentsEqual
.9bd6		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9bd8		a8		tay				tay
.9bd9		38		sec				sec 								; do a signed comparison of the exponents.
.9bda		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9bdc		50 02		bvc $9be0			bvc 	_FANoSignedChange
.9bde		49 80		eor #$80			eor 	#$80
.9be0						_FANoSignedChange:
.9be0		29 80		and #$80			and 	#$80
.9be2		10 02		bpl $9be6			bpl 	_FAHaveMax
.9be4		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9be6						_FAHaveMax:
.9be6		20 33 9c	jsr $9c33			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9be9		e8		inx				inx
.9bea		20 33 9c	jsr $9c33			jsr 	_FAShiftToExponent
.9bed		ca		dex				dex
.9bee						_FAExponentsEqual:
.9bee		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9bf0		55 51		eor $51,x			eor 	NSStatus+1,x
.9bf2		30 0e		bmi $9c02			bmi 	_FADifferentSigns
.9bf4		20 6b 99	jsr $996b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9bf7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9bf9		10 35		bpl $9c30			bpl 	_FAExit 					; if no, we are done.
.9bfb		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9bfe		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9c00		80 2e		bra $9c30			bra 	_FAExit
.9c02						_FADifferentSigns:
.9c02		20 85 99	jsr $9985			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9c05		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9c07		10 06		bpl $9c0f			bpl 	_FACheckZero 				; if no, check for -0
.9c09		20 a0 a6	jsr $a6a0			jsr 	NSMNegate 					; netate result
.9c0c		20 a7 a6	jsr $a6a7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9c0f						_FACheckZero:
.9c0f		20 00 a7	jsr $a700			jsr 	NSMIsZero	 				; check for -0
.9c12		d0 1c		bne $9c30			bne 	_FAExit
.9c14		74 50		stz $50,x			stz 	NSStatus,x
.9c16		80 18		bra $9c30			bra 	_FAExit
.9c18						_FAReturn1:
.9c18		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9c1a		95 58		sta $58,x			sta 	NSMantissa0,x
.9c1c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c1e		95 60		sta $60,x			sta 	NSMantissa1,x
.9c20		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9c22		95 68		sta $68,x			sta 	NSMantissa2,x
.9c24		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9c26		95 70		sta $70,x			sta 	NSMantissa3,x
.9c28		b5 79		lda $79,x			lda 	NSExponent+1,x
.9c2a		95 78		sta $78,x			sta 	NSExponent,x
.9c2c		b5 51		lda $51,x			lda 	NSStatus+1,x
.9c2e		95 50		sta $50,x			sta 	NSStatus,x
.9c30						_FAExit:
.9c30		7a		ply				ply
.9c31		68		pla				pla
.9c32		60		rts				rts
.9c33						_FAShiftToExponent:
.9c33						_FAShiftToExponent2:
.9c33		98		tya				tya 								; compare Y to exponent
.9c34		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9c36		f0 07		beq $9c3f			beq 	_FASEExit 					; exit if so.
.9c38		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight	 			; shift the mantissa right
.9c3b		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9c3d		80 f4		bra $9c33			bra 	_FAShiftToExponent2
.9c3f						_FASEExit:
.9c3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9c40						CompareFloat:
.9c40		20 ba 9b	jsr $9bba			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9c43		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9c45		29 f8		and #$f8			and 	#$F8
.9c47		15 68		ora $68,x			ora 	NSMantissa2,x
.9c49		15 70		ora $70,x			ora 	NSMantissa3,x
.9c4b		f0 08		beq $9c55			beq 	_FCExit 					; zero, so approximately identical
.9c4d		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9c4f		34 50		bit $50,x			bit 	NSStatus,x
.9c51		10 02		bpl $9c55			bpl 	_FCExit
.9c53						_FCNegative:
.9c53		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9c55						_FCExit:
.9c55		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9c56						FDivideCommand:
.9c56		fa		plx				plx	 								; restore stack position
.9c57		20 28 9d	jsr $9d28			jsr 	FloatPrepare 				; prepare for floats
.9c5a						FloatDivide:
.9c5a		48		pha				pha
.9c5b		e8		inx				inx
.9c5c		20 37 9d	jsr $9d37			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c5f		ca		dex				dex
.9c60		c9 00		cmp #$00			cmp 	#0
.9c62		f0 1d		beq $9c81			beq 	_FDZero
.9c64		20 37 9d	jsr $9d37			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c67		f0 16		beq $9c7f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c69		20 5c 98	jsr $985c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9c6c		20 f8 97	jsr $97f8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9c6f		20 37 9d	jsr $9d37			jsr		NSNormalise 				; renormalise
.9c72		20 ec 98	jsr $98ec			jsr 	CalculateSign 				; calculate result sign
.9c75		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c77		38		sec				sec
.9c78		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c7a		38		sec				sec
.9c7b		e9 1e		sbc #$1e			sbc 	#30
.9c7d		95 78		sta $78,x			sta 	NSExponent,x
.9c7f						_FDExit:
.9c7f		68		pla				pla
.9c80		60		rts				rts
.9c81						_FDZero:
.9c81		a9 03		lda #$03		lda	#3
.9c83		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c86						FloatFractionalPart:
.9c86		5a		phy				phy
.9c87		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c89		29 7f		and #$7f			and 	#$7F
.9c8b		95 50		sta $50,x			sta 	NSStatus,x
.9c8d		20 37 9d	jsr $9d37			jsr 	NSNormalise
.9c90		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c92		38		sec				sec
.9c93		e9 e0		sbc #$e0			sbc 	#$E0
.9c95		90 29		bcc $9cc0			bcc 	_FFPExit 					; already fractional
.9c97		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c99		b0 22		bcs $9cbd			bcs 	_FFPZero
.9c9b		a8		tay				tay 								; put count to do in Y
.9c9c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9c9e		20 c2 9c	jsr $9cc2			jsr 	_FFPPartial
.9ca1		95 70		sta $70,x			sta 	NSMantissa3,x
.9ca3		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ca5		20 c2 9c	jsr $9cc2			jsr 	_FFPPartial
.9ca8		95 68		sta $68,x			sta 	NSMantissa2,x
.9caa		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cac		20 c2 9c	jsr $9cc2			jsr 	_FFPPartial
.9caf		95 60		sta $60,x			sta 	NSMantissa1,x
.9cb1		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cb3		20 c2 9c	jsr $9cc2			jsr 	_FFPPartial
.9cb6		95 58		sta $58,x			sta 	NSMantissa0,x
.9cb8		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; zeroed check.
.9cbb		d0 03		bne $9cc0			bne 	_FFPExit
.9cbd						_FFPZero:
.9cbd		20 de a6	jsr $a6de			jsr 	NSMSetZero
.9cc0						_FFPExit:
.9cc0		7a		ply				ply
.9cc1		60		rts				rts
.9cc2						_FFPPartial:
.9cc2		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9cc4		f0 17		beq $9cdd			beq 	_FFFPPExit
.9cc6		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9cc8		b0 0c		bcs $9cd6			bcs 	_FFFPPWholeByte
.9cca		5a		phy				phy
.9ccb						_FFFPPLeft:
.9ccb		0a		asl a				asl 	a
.9ccc		88		dey				dey
.9ccd		d0 fc		bne $9ccb			bne 	_FFFPPLeft
.9ccf		7a		ply				ply
.9cd0						_FFFPPRight:
.9cd0		4a		lsr a				lsr 	a
.9cd1		88		dey				dey
.9cd2		d0 fc		bne $9cd0			bne 	_FFFPPRight
.9cd4		80 07		bra $9cdd			bra 	_FFFPPExit
.9cd6						_FFFPPWholeByte:
.9cd6		98		tya				tya 								; subtract 8 from count
.9cd7		38		sec				sec
.9cd8		e9 08		sbc #$08			sbc 	#8
.9cda		a8		tay				tay
.9cdb		a9 00		lda #$00			lda 	#0 							; and clear all
.9cdd						_FFFPPExit:
.9cdd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9cde						FloatIntegerPart:
.9cde		48		pha				pha
.9cdf		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9ce1		f0 1d		beq $9d00			beq 	_FIPExit 					; if so do nothing
.9ce3		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; is it zero ?
.9ce6		f0 15		beq $9cfd			beq 	_FIPZero 					; if so return zero.
.9ce8		20 37 9d	jsr $9d37			jsr 	NSNormalise 				; normalise
.9ceb		f0 10		beq $9cfd			beq 	_FIPZero 					; normalised to zero, exit zero
.9ced						_FIPShift:
.9ced		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9cef		10 07		bpl $9cf8			bpl 	_FIPCheckZero
.9cf1		20 f7 a6	jsr $a6f7			jsr 	NSMShiftRight 				; shift mantissa right
.9cf4		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9cf6		80 f5		bra $9ced			bra 	_FIPShift
.9cf8						_FIPCheckZero:
.9cf8		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; avoid -0 problem
.9cfb		d0 03		bne $9d00			bne 	_FIPExit 					; set to zero if mantissa zero.
.9cfd						_FIPZero:
.9cfd		20 de a6	jsr $a6de			jsr 	NSMSetZero
.9d00						_FIPExit:
.9d00		68		pla				pla
.9d01		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9d02						FloatingPointMultiply:
.9d02		20 28 9d	jsr $9d28			jsr 	FloatPrepare 				; prepare for floats
.9d05						FloatMultiply:
.9d05		48		pha				pha
.9d06		20 37 9d	jsr $9d37			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9d09		f0 18		beq $9d23			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9d0b		e8		inx				inx
.9d0c		20 37 9d	jsr $9d37			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d0f		ca		dex				dex
.9d10		c9 00		cmp #$00			cmp 	#0
.9d12		f0 0c		beq $9d20			beq 	_FDSetZero
.9d14		20 ae 98	jsr $98ae			jsr 	MultiplyShort 				; calculate the result.
.9d17		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9d19		18		clc				clc
.9d1a		75 79		adc $79,x			adc 	NSExponent+1,x
.9d1c		95 78		sta $78,x			sta 	NSExponent,x
.9d1e		80 03		bra $9d23			bra 	_FDExit
.9d20						_FDSetZero:
.9d20		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; return 0
.9d23						_FDExit:
.9d23		20 37 9d	jsr $9d37			jsr 	NSNormalise 				; normalise the result
.9d26		68		pla				pla
.9d27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9d28						FloatPrepare:
.9d28		20 33 9e	jsr $9e33			jsr 	DereferenceTopTwo 			; dereference the top two values
.9d2b		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9d2d		15 51		ora $51,x			ora 	NSStatus+1,x
.9d2f		29 10		and #$10			and 	#NSBIsString
.9d31		d0 01		bne $9d34			bne 	_FDType
.9d33		60		rts				rts
.9d34						_FDType:
.9d34		4c 66 a8	jmp $a866			jmp 	TypeError
.9d37						NSNormalise:
.9d37		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9d39		29 80		and #$80			and 	#$80
.9d3b		09 08		ora #$08			ora 	#NSTFloat
.9d3d		95 50		sta $50,x			sta 	NSStatus,x
.9d3f		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; if zero exit
.9d42		d0 07		bne $9d4b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9d44		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9d46		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9d48		a9 00		lda #$00			lda 	#0 							; set Z flag
.9d4a		60		rts				rts
.9d4b						_NSNormaliseOptimise:
.9d4b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9d4d		d0 19		bne $9d68			bne 	_NSNormaliseLoop
.9d4f		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9d51		30 15		bmi $9d68			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9d53		95 70		sta $70,x			sta 	NSMantissa3,x
.9d55		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d57		95 68		sta $68,x			sta 	NSMantissa2,x
.9d59		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d5b		95 60		sta $60,x			sta 	NSMantissa1,x
.9d5d		74 58		stz $58,x			stz 	NSMantissa0,x
.9d5f		b5 78		lda $78,x			lda 	NSExponent,x
.9d61		38		sec				sec
.9d62		e9 08		sbc #$08			sbc 	#8
.9d64		95 78		sta $78,x			sta 	NSExponent,x
.9d66		80 e3		bra $9d4b			bra 	_NSNormaliseOptimise
.9d68						_NSNormaliseLoop:
.9d68		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9d6a		70 07		bvs $9d73			bvs 	_NSNExit 					; exit if so with Z flag clear
.9d6c		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; shift mantissa left
.9d6f		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9d71		80 f5		bra $9d68			bra 	_NSNormaliseLoop
.9d73						_NSNExit:
.9d73		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d75		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d76						AssignNumber:
.9d76		5a		phy				phy
.9d77		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d79		85 36		sta $36				sta 	zTemp0
.9d7b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d7d		85 37		sta $37				sta 	zTemp0+1
.9d7f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d81		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d83		95 50		sta $50,x			sta 	NSStatus,x
.9d85		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d87		c9 08		cmp #$08			cmp 	#NSTFloat
.9d89		f0 24		beq $9daf			beq 	_ANFloat
.9d8b		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9d8d		f0 03		beq $9d92			beq		_ANNotFloat
.9d8f		4c 61 a8	jmp $a861			jmp 	RangeError					; if it is, report an error.
.9d92						_ANNotFloat:
.9d92		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d94		29 03		and #$03			and 	#3
.9d96		d0 05		bne $9d9d			bne 	_ANByteWord
.9d98		20 ba 9d	jsr $9dba			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d9b		80 1b		bra $9db8			bra 	_ANExit
.9d9d						_ANByteWord:
.9d9d		48		pha				pha 								; save count
.9d9e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9da0		92 36		sta ($36)			sta 	(zTemp0)
.9da2		68		pla				pla
.9da3		c9 01		cmp #$01			cmp	 	#1
.9da5		f0 11		beq $9db8			beq 	_ANExit
.9da7		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9da9		a0 01		ldy #$01			ldy 	#1
.9dab		91 36		sta ($36),y			sta 	(zTemp0),y
.9dad		80 09		bra $9db8			bra 	_ANExit
.9daf						_ANFloat:
.9daf		20 ba 9d	jsr $9dba			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9db2		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9db4		a0 04		ldy #$04			ldy 	#4
.9db6		91 36		sta ($36),y			sta 	(zTemp0),y
.9db8						_ANExit:
.9db8		7a		ply				ply
.9db9		60		rts				rts
.9dba						_ANCopy4PackSign:
.9dba		a0 03		ldy #$03			ldy 	#3
.9dbc		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9dbe		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9dc0		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9dc2		91 36		sta ($36),y			sta 	(zTemp0),y
.9dc4		88		dey				dey
.9dc5		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9dc7		91 36		sta ($36),y			sta 	(zTemp0),y
.9dc9		88		dey				dey
.9dca		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dcc		91 36		sta ($36),y			sta 	(zTemp0),y
.9dce		88		dey				dey
.9dcf		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9dd1		91 36		sta ($36),y			sta 	(zTemp0),y
.9dd3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9dd4						AssignString:
.9dd4		5a		phy				phy
.9dd5		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9dd7		85 38		sta $38				sta 	zTemp1
.9dd9		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ddb		85 39		sta $39				sta 	zTemp1+1
.9ddd		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ddf		85 36		sta $36				sta 	zTemp0
.9de1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9de3		85 37		sta $37				sta 	zTemp0+1
.9de5		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9de7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9de9		f0 23		beq $9e0e			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9deb		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dec		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dee		e9 02		sbc #$02			sbc 	#2
.9df0		85 3c		sta $3c				sta 	zsTemp
.9df2		a0 01		ldy #$01			ldy 	#1
.9df4		b1 36		lda ($36),y			lda 	(zTemp0),y
.9df6		e9 00		sbc #$00			sbc 	#0
.9df8		85 3d		sta $3d				sta 	zsTemp+1
.9dfa		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dfc						_ASGetLength:
.9dfc		c8		iny				iny
.9dfd		b1 38		lda ($38),y			lda 	(zTemp1),y
.9dff		d0 fb		bne $9dfc			bne 	_ASGetLength
.9e01		98		tya				tya 								; is this length <= current length
.9e02		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e04		90 1e		bcc $9e24			bcc 	_ASCopyString
.9e06		f0 1c		beq $9e24			beq 	_ASCopyString
.9e08		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e0a		a0 01		ldy #$01			ldy 	#1
.9e0c		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e0e						_ASNewStringRequired:
.9e0e		e8		inx				inx 								; concrete the new string.
.9e0f		20 30 b8	jsr $b830			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e12		ca		dex				dex
.9e13		18		clc				clc
.9e14		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e16		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e18		92 36		sta ($36)			sta 	(zTemp0)
.9e1a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e1c		69 00		adc #$00			adc 	#0
.9e1e		a0 01		ldy #$01			ldy 	#1
.9e20		91 36		sta ($36),y			sta 	(zTemp0),y
.9e22		80 0d		bra $9e31			bra 	_ASExit
.9e24						_ASCopyString:
.9e24		a0 00		ldy #$00			ldy 	#0
.9e26						_ASCopyLoop:
.9e26		b1 38		lda ($38),y			lda 	(zTemp1),y
.9e28		c8		iny				iny
.9e29		c8		iny				iny
.9e2a		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e2c		88		dey				dey
.9e2d		c9 00		cmp #$00			cmp 	#0
.9e2f		d0 f5		bne $9e26			bne 	_ASCopyLoop
.9e31						_ASExit:
.9e31		7a		ply				ply
.9e32		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e33						DereferenceTopTwo:
.9e33		e8		inx				inx
.9e34		20 38 9e	jsr $9e38			jsr 	Dereference 				; deref x+1
.9e37		ca		dex				dex  								; falls through to deref x
.9e38						Dereference:
.9e38		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9e3a		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9e3c		f0 48		beq $9e86			beq 	_DRFExit 					; not a reference, so exit.
.9e3e		5a		phy				phy
.9e3f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e41		85 36		sta $36				sta 	zTemp0
.9e43		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e45		85 37		sta $37				sta 	zTemp0+1
.9e47		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9e49		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e4b		95 58		sta $58,x			sta 	NSMantissa0,x
.9e4d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9e4f		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e51		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e53		f0 0e		beq $9e63			beq 	_DRFDereferenceTwo
.9e55		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e57		f0 2f		beq $9e88			beq 	_DRFFull
.9e59		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e5b		29 03		and #$03			and 	#3
.9e5d		f0 29		beq $9e88			beq 	_DRFFull 					; the whole word
.9e5f		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e61		f0 06		beq $9e69			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e63						_DRFDereferenceTwo:
.9e63		a0 01		ldy #$01			ldy 	#1
.9e65		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e67		95 60		sta $60,x			sta 	NSMantissa1,x
.9e69						_DRFClear23:
.9e69		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e6b		74 70		stz $70,x			stz 	NSMantissa3,x
.9e6d		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9e6f		29 18		and #$18			and 	#NSBTypeMask
.9e71		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9e73		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e75		d0 0e		bne $9e85			bne 	_DRFNotString
.9e77		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e79		15 60		ora $60,x			ora 	NSMantissa1,x
.9e7b		d0 08		bne $9e85			bne 	_DRFNotString
.9e7d		a9 87		lda #$87			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e7f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e81		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e83		95 60		sta $60,x			sta 	NSMantissa1,x
.9e85						_DRFNotString
.9e85		7a		ply				ply 								; restore Y and exit
.9e86						_DRFExit:
.9e86		60		rts				rts
.9e87						_DRFNullString:
>9e87		00						.byte 	0
.9e88						_DRFFull:
.9e88		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e8a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e8c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e8e		c8		iny				iny
.9e8f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e91		95 68		sta $68,x			sta 	NSMantissa2,x
.9e93		c8		iny				iny
.9e94		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e96		95 70		sta $70,x			sta 	NSMantissa3,x
.9e98		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9e9a		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9e9c		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e9e		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9ea0		f0 05		beq $9ea7			beq 	_DRFNoExponent
.9ea2		c8		iny				iny 								; if not, read the exponent as well.
.9ea3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea5		95 78		sta $78,x			sta 	NSExponent,x
.9ea7						_DRFNoExponent:
.9ea7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ea9		10 0a		bpl $9eb5			bpl 	_DRFExit2 					; if not, then exit.
.9eab		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ead		95 70		sta $70,x			sta 	NSMantissa3,x
.9eaf		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9eb1		09 80		ora #$80			ora 	#NSBIsNegative
.9eb3		95 50		sta $50,x			sta 	NSStatus,x
.9eb5						_DRFExit2:
.9eb5		7a		ply				ply
.9eb6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9eb7						EncodeNumberStart:
.9eb7		38		sec				sec
.9eb8		80 01		bra $9ebb			bra 	EncodeNumberContinue+1
.9eba						EncodeNumberContinue:
.9eba		18		clc				clc
.9ebb						EncodeNumber:
.9ebb		08		php				php 								; save reset flag.
.9ebc		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ebe		f0 12		beq $9ed2			beq 	_ENIsOkay
.9ec0		c9 30		cmp #$30			cmp 	#"0"
.9ec2		90 04		bcc $9ec8			bcc 	_ENBadNumber
.9ec4		c9 3a		cmp #$3a			cmp 	#"9"+1
.9ec6		90 0a		bcc $9ed2			bcc 	_ENIsOkay
.9ec8						_ENBadNumber:
.9ec8		28		plp				plp 								; throw saved reset
.9ec9		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9ecc		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ece		f0 7b		beq $9f4b			beq 	_ENConstructFinal
.9ed0						_ENFail:
.9ed0		18		clc				clc 								; not allowed
.9ed1		60		rts				rts
.9ed2						_ENIsOkay:
.9ed2		28		plp				plp 								; are we restarting
.9ed3		90 15		bcc $9eea			bcc 	_ENNoRestart
.9ed5						_ENStartEncode:
.9ed5		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9ed7		f0 0c		beq $9ee5			beq 	_ENFirstDP
.9ed9		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9edb		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte 					; in single byte mode.
.9ede		a9 01		lda #$01			lda 	#ESTA_Low
.9ee0						_ENExitChange:
.9ee0		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9ee3		38		sec				sec
.9ee4		60		rts				rts
.9ee5						_ENFirstDP:
.9ee5		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; clear integer part
.9ee8		80 3c		bra $9f26			bra 	_ESTASwitchFloat			; go straight to float and exi
.9eea						_ENNoRestart:
.9eea		48		pha				pha 								; save digit or DP on stack.
.9eeb		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9eee		c9 01		cmp #$01			cmp 	#ESTA_Low
.9ef0		f0 09		beq $9efb			beq  	_ESTALowState
.9ef2		c9 02		cmp #$02			cmp 	#ESTA_High
.9ef4		f0 26		beq $9f1c			beq 	_ESTAHighState
.9ef6		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ef8		f0 38		beq $9f32			beq 	_ESTADecimalState
>9efa		db						.byte 	$DB 						; causes a break in the emulator
.9efb						_ESTALowState:
.9efb		68		pla				pla 								; get value back
.9efc		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9efe		f0 26		beq $9f26			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f00		29 0f		and #$0f			and 	#15 						; make digit
.9f02		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9f05		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f07		0a		asl a				asl 	a
.9f08		0a		asl a				asl 	a
.9f09		75 58		adc $58,x			adc 	NSMantissa0,x
.9f0b		0a		asl a				asl 	a
.9f0c		6d 06 04	adc $0406			adc 	digitTemp
.9f0f		95 58		sta $58,x			sta 	NSMantissa0,x
.9f11		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f13		90 05		bcc $9f1a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f15		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f17		8d 05 04	sta $0405			sta 	encodeState
.9f1a						_ESTANoSwitch:
.9f1a		38		sec				sec
.9f1b		60		rts				rts
.9f1c						_ESTAHighState:
.9f1c		68		pla				pla 								; get value back
.9f1d		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f1f		f0 05		beq $9f26			beq 	_ESTASwitchFloat
.9f21		20 7f 9f	jsr $9f7f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f24		38		sec				sec
.9f25		60		rts				rts
.9f26						_ESTASwitchFloat:
.9f26		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9f29		e8		inx				inx 								; zero the decimal additive.
.9f2a		20 de a6	jsr $a6de			jsr 	NSMSetZero
.9f2d		ca		dex				dex
.9f2e		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f30		80 ae		bra $9ee0			bra 	_ENExitChange
.9f32						_ESTADecimalState:
.9f32		68		pla				pla 								; digit.
.9f33		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f35		f0 99		beq $9ed0			beq 	_ENFail
.9f37		e8		inx				inx 								; put digit into fractional part of X+1
.9f38		20 7f 9f	jsr $9f7f			jsr 	ESTAShiftDigitIntoMantissa
.9f3b		ca		dex				dex
.9f3c		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9f3f		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9f42		c9 0b		cmp #$0b			cmp 	#11
.9f44		f0 02		beq $9f48			beq 	_ESTADSFail
.9f46		38		sec				sec
.9f47		60		rts				rts
.9f48						_ESTADSFail:
.9f48		4c 61 a8	jmp $a861			jmp 	RangeError
.9f4b						_ENConstructFinal:
.9f4b		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9f4e		f0 2d		beq $9f7d			beq 	_ENCFExit 					; no decimals
.9f50		5a		phy				phy
.9f51		0a		asl a				asl 	a 							; x 4 and CLC
.9f52		0a		asl a				asl 	a
.9f53		6d 07 04	adc $0407			adc 	decimalCount
.9f56		a8		tay				tay
.9f57		b9 20 a8	lda $a820,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f5a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9f5c		b9 21 a8	lda $a821,y			lda 	DecimalScalarTable-5+1,y
.9f5f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f61		b9 22 a8	lda $a822,y			lda 	DecimalScalarTable-5+2,y
.9f64		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f66		b9 23 a8	lda $a823,y			lda 	DecimalScalarTable-5+3,y
.9f69		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f6b		b9 24 a8	lda $a824,y			lda 	DecimalScalarTable-5+4,y
.9f6e		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f70		a9 08		lda #$08			lda 	#NSTFloat
.9f72		95 52		sta $52,x			sta 	NSStatus+2,x
.9f74		7a		ply				ply
.9f75		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f76		20 05 9d	jsr $9d05			jsr 	FloatMultiply
.9f79		ca		dex				dex
.9f7a		20 c0 9b	jsr $9bc0			jsr 	FloatAdd 					; add to integer part.
.9f7d						_ENCFExit:
.9f7d		18		clc				clc 								; reject the digit.
.9f7e		60		rts				rts
.9f7f						ESTAShiftDigitIntoMantissa:
.9f7f		29 0f		and #$0f			and 	#15 						; save digit
.9f81		48		pha				pha
.9f82		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f84		48		pha				pha
.9f85		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f87		48		pha				pha
.9f88		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f8a		48		pha				pha
.9f8b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f8d		48		pha				pha
.9f8e		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 2
.9f91		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 4
.9f94		18		clc				clc 								; pop mantissa and add
.9f95		68		pla				pla
.9f96		75 58		adc $58,x			adc 	NSMantissa0,x
.9f98		95 58		sta $58,x			sta 	NSMantissa0,x
.9f9a		68		pla				pla
.9f9b		75 60		adc $60,x			adc 	NSMantissa1,x
.9f9d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f9f		68		pla				pla
.9fa0		75 68		adc $68,x			adc 	NSMantissa2,x
.9fa2		95 68		sta $68,x			sta 	NSMantissa2,x
.9fa4		68		pla				pla
.9fa5		75 70		adc $70,x			adc 	NSMantissa3,x
.9fa7		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9fa9		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 10
.9fac		68		pla				pla 								; add digit
.9fad		18		clc				clc
.9fae		75 58		adc $58,x			adc 	NSMantissa0,x
.9fb0		95 58		sta $58,x			sta 	NSMantissa0,x
.9fb2		90 0a		bcc $9fbe			bcc 	_ESTASDExit
.9fb4		f6 60		inc $60,x			inc 	NSMantissa1,x
.9fb6		d0 06		bne $9fbe			bne 	_ESTASDExit
.9fb8		f6 68		inc $68,x			inc 	NSMantissa2,x
.9fba		d0 02		bne $9fbe			bne 	_ESTASDExit
.9fbc		f6 70		inc $70,x			inc 	NSMantissa3,x
.9fbe						_ESTASDExit:
.9fbe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fbf						EvaluateTerm:
.9fbf		b1 30		lda ($30),y			lda 	(codePtr),y
.9fc1		30 18		bmi $9fdb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fc3		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fc5		b0 6c		bcs $a033			bcs 	_ETVariable
.9fc7		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fc9		90 6b		bcc $a036			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fcb		c9 3a		cmp #$3a			cmp 	#'9'+1
.9fcd		b0 67		bcs $a036			bcs 	_ETPuncUnary
.9fcf		20 b7 9e	jsr $9eb7			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fd2						_ETNumber:
.9fd2		c8		iny				iny 								; keep encoding until we have the numbers
.9fd3		b1 30		lda ($30),y			lda 	(codePtr),y
.9fd5		20 ba 9e	jsr $9eba			jsr 	EncodeNumberContinue
.9fd8		b0 f8		bcs $9fd2			bcs 	_ETNumber 					; go back if accepted.
.9fda		60		rts				rts
.9fdb						_ETCheckUnary:
.9fdb		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9fdd		f0 3f		beq $a01e			beq 	_ETString
.9fdf		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fe1		f0 12		beq $9ff5			beq 	_ETHexConstant
.9fe3		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9fe5		90 0b		bcc $9ff2			bcc 	_ETSyntaxError
.9fe7		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.9fe9		b0 07		bcs $9ff2			bcs 	_ETSyntaxError
.9feb		da		phx				phx 								; push X on the stack
.9fec		0a		asl a				asl 	a 							; put vector x 2 into X
.9fed		aa		tax				tax
.9fee		c8		iny				iny 								; consume unary function token
.9fef		7c 82 92	jmp ($9282,x)			jmp 	(VectorSet0,x) 				; and do it.
.9ff2						_ETSyntaxError:
.9ff2		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.9ff5						_ETHexConstant:
.9ff5		c8		iny				iny 								; skip #
.9ff6		c8		iny				iny 								; skip count
.9ff7		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; clear result
.9ffa						_ETHLoop:
.9ffa		b1 30		lda ($30),y			lda 	(codePtr),y
.9ffc		c8		iny				iny 								; and consume
.9ffd		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9fff		f0 1c		beq $a01d			beq 	_ETHExit
.a001		48		pha				pha 								; save on stack.
.a002		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 2
.a005		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 4
.a008		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 8
.a00b		20 ed a6	jsr $a6ed			jsr 	NSMShiftLeft 				; x 16
.a00e		68		pla				pla 								; ASCII
.a00f		c9 41		cmp #$41			cmp 	#'A'
.a011		90 02		bcc $a015			bcc 	_ETHNotChar
.a013		e9 07		sbc #$07			sbc 	#7
.a015						_ETHNotChar:
.a015		29 0f		and #$0f			and 	#15 						; digit now
.a017		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a019		95 58		sta $58,x			sta 	NSMantissa0,x
.a01b		80 dd		bra $9ffa			bra 	_ETHLoop 					; go round.
.a01d						_ETHExit:
.a01d		60		rts				rts
.a01e						_ETString:
.a01e		c8		iny				iny 								; look at length
.a01f		b1 30		lda ($30),y			lda 	(codePtr),y
.a021		48		pha				pha
.a022		c8		iny				iny 								; first character
.a023		20 58 ae	jsr $ae58			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a026		68		pla				pla 								; restore count and save
.a027		85 36		sta $36				sta 	zTemp0
.a029		98		tya				tya 								; add length to Y to skip it.
.a02a		18		clc				clc
.a02b		65 36		adc $36				adc 	zTemp0
.a02d		a8		tay				tay
.a02e		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a030		95 50		sta $50,x			sta 	NSStatus,x
.a032		60		rts				rts
.a033						_ETVariable:
.a033		4c 88 a0	jmp $a088			jmp 	VariableHandler
.a036						_ETPuncUnary:
.a036		c8		iny				iny 								; consume the unary character
.a037		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a039		f0 2b		beq $a066			beq 	_ETUnaryNegate
.a03b		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.a03d		f0 36		beq $a075			beq 	_ETDereference
.a03f		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a041		f0 3e		beq $a081			beq 	_ETParenthesis
.a043		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a045		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a047		f0 06		beq $a04f			beq 	_ETIndirection
.a049		e6 36		inc $36				inc 	zTemp0
.a04b		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a04d		d0 a3		bne $9ff2			bne 	_ETSyntaxError
.a04f						_ETIndirection:
.a04f		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a051		1a		inc a				inc 	a
.a052		48		pha				pha
.a053		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm				; evaluate the term
.a056		20 38 9e	jsr $9e38			jsr 	Dereference 				; dereference it.
.a059		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a05b		d0 06		bne $a063			bne 	_ETTypeMismatch
.a05d		68		pla				pla 								; indirection 1-2
.a05e		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a060		95 50		sta $50,x			sta 	NSStatus,x
.a062		60		rts				rts
.a063						_ETTypeMismatch:
.a063		4c 66 a8	jmp $a866			jmp 	TypeError
.a066						_ETUnaryNegate:
.a066		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm				; evaluate the term
.a069		20 38 9e	jsr $9e38			jsr 	Dereference 				; dereference it.
.a06c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a06e		29 10		and #$10			and 	#NSTString
.a070		d0 f1		bne $a063			bne 	_ETTypeMismatch
.a072		4c a0 a6	jmp $a6a0			jmp 	NSMNegate  					; just toggles the sign bit.
.a075						_ETDereference:
.a075		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm				; evaluate the term
.a078		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a07a		29 20		and #$20			and 	#NSBIsReference
.a07c		f0 e5		beq $a063			beq 	_ETTypeMismatch
.a07e		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a080		60		rts				rts
.a081						_ETParenthesis:
.a081		20 75 9b	jsr $9b75			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a084		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; check for )
.a087		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a088						VariableHandler:
.a088		b1 30		lda ($30),y			lda 	(codePtr),y
.a08a		18		clc				clc
.a08b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a08d		85 37		sta $37				sta 	zTemp0+1
.a08f		c8		iny				iny
.a090		b1 30		lda ($30),y			lda 	(codePtr),y
.a092		85 36		sta $36				sta 	zTemp0
.a094		c8		iny				iny
.a095		18		clc				clc									; copy variable address+3 to mantissa
.a096		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a098		95 58		sta $58,x			sta 	NSMantissa0,x
.a09a		a5 37		lda $37				lda 	zTemp0+1
.a09c		69 00		adc #$00			adc 	#0
.a09e		95 60		sta $60,x			sta 	NSMantissa1,x
.a0a0		74 68		stz $68,x			stz 	NSMantissa2,x
.a0a2		74 70		stz $70,x			stz 	NSMantissa3,x
.a0a4		74 78		stz $78,x			stz 	NSExponent,x
.a0a6		5a		phy				phy
.a0a7		a0 02		ldy #$02			ldy 	#2 							; read type
.a0a9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ab		7a		ply				ply
.a0ac		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0ae		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0b0		95 50		sta $50,x			sta 	NSStatus,x
.a0b2		29 04		and #$04			and 	#NSBIsArray
.a0b4		d0 01		bne $a0b7			bne 	_VHArray
.a0b6		60		rts				rts
.a0b7						_VHArray:
.a0b7		e8		inx				inx
.a0b8		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0bb		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0bd		95 51		sta $51,x			sta 	NSStatus+1,x
.a0bf		b1 30		lda ($30),y			lda 	(codePtr),y
.a0c1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0c3		d0 06		bne $a0cb			bne 	_VHNoSecondIndex
.a0c5		c8		iny				iny 								; skip the comma
.a0c6		e8		inx				inx
.a0c7		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0ca		ca		dex				dex
.a0cb						_VHNoSecondIndex:
.a0cb		ca		dex				dex 								; set X back.
.a0cc		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; and check the right bracket.
.a0cf		5a		phy				phy 								; save position
.a0d0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a0d2		85 3e		sta $3e				sta 	zaTemp
.a0d4		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0d6		85 3f		sta $3f				sta 	zaTemp+1
.a0d8		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0da		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0dc		f0 5d		beq $a13b			beq 	_VHBadArray
.a0de		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0e0		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0e2		f0 02		beq $a0e6			beq 	_VHHas2Mask
.a0e4		a9 ff		lda #$ff			lda 	#$FF
.a0e6						_VHHas2Mask:
.a0e6		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a0e8		f0 4c		beq $a136			beq 	_VHBadIndex
.a0ea		0a		asl a				asl 	a 							; carry will be set if a second index
.a0eb		90 08		bcc $a0f5			bcc 	_VHCheckFirstIndex
.a0ed		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a0ef		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f1		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a0f3		90 41		bcc $a136			bcc 	_VHBadIndex
.a0f5						_VHCheckFirstIndex:
.a0f5		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a0f7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f9		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a0fb		90 39		bcc $a136			bcc 	_VHBadIndex
.a0fd		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a0ff		64 37		stz $37				stz 	zTemp0+1
.a101		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a103		30 0e		bmi $a113			bmi 	_VHNoMultiply
.a105		da		phx				phx
.a106		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a108		48		pha				pha
.a109		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a10b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a10d		1a		inc a				inc 	a 							; add 1 for zero base
.a10e		fa		plx				plx
.a10f		20 89 a6	jsr $a689			jsr 	Multiply8x8 				; calculate -> Z0
.a112		fa		plx				plx
.a113						_VHNoMultiply:
.a113		18		clc				clc
.a114		a5 36		lda $36				lda 	zTemp0
.a116		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a118		85 36		sta $36				sta 	zTemp0
.a11a		a5 37		lda $37				lda 	zTemp0+1
.a11c		69 00		adc #$00			adc 	#0
.a11e		85 37		sta $37				sta 	zTemp0+1
.a120		b5 50		lda $50,x			lda 	NSStatus,x
.a122		20 77 88	jsr $8877			jsr 	ScaleByBaseType
.a125		18		clc				clc
.a126		b2 3e		lda ($3e)			lda 	(zaTemp)
.a128		65 36		adc $36				adc 	zTemp0
.a12a		95 58		sta $58,x			sta 	NSMantissa0,x
.a12c		a0 01		ldy #$01			ldy 	#1
.a12e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a130		65 37		adc $37				adc 	zTemp0+1
.a132		95 60		sta $60,x			sta 	NSMantissa1,x
.a134		7a		ply				ply 								; restore position
.a135		60		rts				rts
.a136						_VHBadIndex:
.a136		a9 17		lda #$17		lda	#23
.a138		4c 71 96	jmp $9671		jmp	ErrorHandler
.a13b						_VHBadArray:
.a13b		a9 18		lda #$18		lda	#24
.a13d		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a140						AbsUnary:
.a140		fa		plx				plx 								; restore stack pos
.a141		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; get a float or int
.a144		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a147		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a149		29 7f		and #$7f			and 	#$7F
.a14b		95 50		sta $50,x			sta 	NSStatus,x
.a14d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a14e						AllocUnary:
.a14e		fa		plx				plx 								; restore stack pos
.a14f		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger		; get bytes required.
.a152		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a155		da		phx				phx 								; save X/Y
.a156		5a		phy				phy
.a157		8a		txa				txa 								; copy X into Y
.a158		a8		tay				tay
.a159		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a15c		aa		tax				tax
.a15d		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a160		20 6d a1	jsr $a16d			jsr 	AllocateXABytes 			; allocate memory
.a163		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a166		8a		txa				txa 	 							; typing is 16 bit integer.
.a167		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a16a		7a		ply				ply
.a16b		fa		plx				plx
.a16c		60		rts				rts
.a16d						AllocateXABytes:
.a16d		5a		phy				phy
.a16e		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a171		84 36		sty $36				sty 	zTemp0
.a173		5a		phy				phy
.a174		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a177		84 37		sty $37				sty 	zTemp0+1
.a179		5a		phy				phy
.a17a		18		clc				clc 								; add to low memory pointer
.a17b		6d 08 04	adc $0408			adc 	lowMemPtr
.a17e		8d 08 04	sta $0408			sta 	lowMemPtr
.a181		8a		txa				txa
.a182		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a185		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a188		b0 2f		bcs $a1b9			bcs 	CISSMemory
.a18a		20 ab a1	jsr $a1ab			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a18d						_ClearMemory:
.a18d		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a190		c5 36		cmp $36				cmp 	zTemp0
.a192		d0 07		bne $a19b			bne 	_CMClearNext
.a194		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a197		c5 37		cmp $37				cmp 	zTemp0+1
.a199		f0 0c		beq $a1a7			beq 	_CMExit
.a19b						_CMClearNext:
.a19b		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a19d		92 36		sta ($36)			sta 	(zTemp0)
.a19f		e6 36		inc $36				inc 	zTemp0
.a1a1		d0 ea		bne $a18d			bne 	_ClearMemory
.a1a3		e6 37		inc $37				inc		zTemp0+1
.a1a5		80 e6		bra $a18d			bra 	_ClearMemory
.a1a7						_CMExit:
.a1a7		fa		plx				plx
.a1a8		68		pla				pla
.a1a9		7a		ply				ply
.a1aa		60		rts				rts
.a1ab						CheckIdentifierStringSpace:
.a1ab		48		pha				pha
.a1ac		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a1af		18		clc				clc
.a1b0		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1b2		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a1b5		b0 02		bcs $a1b9			bcs 	CISSMemory
.a1b7		68		pla				pla
.a1b8		60		rts				rts
.a1b9						CISSMemory:
.a1b9		a9 06		lda #$06		lda	#6
.a1bb		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1be						AscUnary:
.a1be		fa		plx				plx 								; restore stack pos
.a1bf		20 36 a6	jsr $a636			jsr 	EvaluateString 				; get a string
.a1c2		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a1c4		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte 					; ASC("") will return zero.
.a1c7		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a1ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a1cb						FracUnary:
.a1cb		fa		plx				plx 								; restore stack pos
.a1cc		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; get a float or int
.a1cf		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a1d2		b5 50		lda $50,x			lda 	NSStatus,x
.a1d4		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1d6		f0 04		beq $a1dc			beq 	_IUZero
.a1d8		20 86 9c	jsr $9c86			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a1db		60		rts				rts
.a1dc						_IUZero:
.a1dc		20 de a6	jsr $a6de			jsr 	NSMSetZero
.a1df		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1e0						IntUnary:
.a1e0		fa		plx				plx 								; restore stack pos
.a1e1		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; get a float or int
.a1e4		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a1e7		b5 50		lda $50,x			lda 	NSStatus,x
.a1e9		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1eb		f0 03		beq $a1f0			beq 	_IUExit
.a1ed		20 de 9c	jsr $9cde			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a1f0						_IUExit:
.a1f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a1f1						LenUnary:
.a1f1		fa		plx				plx 								; restore stack pos
.a1f2		20 36 a6	jsr $a636			jsr 	EvaluateString 				; get a string
.a1f5		5a		phy				phy
.a1f6		a0 00		ldy #$00			ldy 	#0 							; find length
.a1f8						_LenFind:
.a1f8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a1fa		f0 06		beq $a202			beq 	_LenExit
.a1fc		c8		iny				iny
.a1fd		d0 f9		bne $a1f8			bne 	_LenFind
.a1ff		4c 61 a8	jmp $a861			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a202						_LenExit:
.a202		98		tya				tya		 							; return length
.a203		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a206		7a		ply				ply
.a207		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a20a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a20b						Unary_Min:
.a20b		a9 01		lda #$01			lda 	#1
.a20d		80 02		bra $a211			bra 	UnaryMinMaxMain
.a20f						Unary_Max:
.a20f		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a211						UnaryMinMaxMain:
.a211		fa		plx				plx 								; get index on number stack
.a212		48		pha				pha 								; save comparator
.a213		20 23 a6	jsr $a623			jsr 	EvaluateValue 				; get the first value.
.a216						_UMMMLoop:
.a216		b1 30		lda ($30),y			lda 	(codePtr),y
.a218		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a21a		f0 22		beq $a23e			beq 	_UMMMDone
.a21c		20 60 96	jsr $9660			jsr 	CheckComma 					; must be a comma
.a21f		e8		inx				inx
.a220		20 23 a6	jsr $a623			jsr 	EvaluateValue
.a223		ca		dex				dex
.a224		20 c1 a6	jsr $a6c1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a227		e8		inx				inx
.a228		20 c1 a6	jsr $a6c1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a22b		e8		inx				inx
.a22c		20 28 97	jsr $9728			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a22f		ca		dex				dex
.a230		ca		dex				dex
.a231		85 36		sta $36				sta 	zTemp0 						; save required result
.a233		68		pla				pla 								; get and save comparator
.a234		48		pha				pha
.a235		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a237		d0 dd		bne $a216			bne 	_UMMMLoop
.a239		20 41 a2	jsr $a241			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a23c		80 d8		bra $a216			bra 	_UMMMLoop
.a23e						_UMMMDone:
.a23e		68		pla				pla 								; throw the comparator
.a23f		c8		iny				iny 								; skip )
.a240		60		rts				rts
.a241						ExpCopyAboveDown:
.a241		b5 51		lda $51,x			lda 	NSStatus+1,x
.a243		95 50		sta $50,x			sta 	NSStatus,x
.a245		b5 79		lda $79,x			lda 	NSExponent+1,x
.a247		95 78		sta $78,x			sta 	NSExponent,x
.a249		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a24b		95 58		sta $58,x			sta 	NSMantissa0,x
.a24d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a24f		95 60		sta $60,x			sta 	NSMantissa1,x
.a251		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a253		95 68		sta $68,x			sta 	NSMantissa2,x
.a255		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a257		95 70		sta $70,x			sta 	NSMantissa3,x
.a259		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a25a						Unary_Not:
.a25a		fa		plx				plx
.a25b		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; get integer
.a25e		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a261		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; zero mantissa ?
.a264		f0 04		beq $a26a			beq 	_NotZero
.a266		20 de a6	jsr $a6de			jsr 	NSMSetZero
.a269		60		rts				rts
.a26a						_NotZero:
.a26a		4c de 96	jmp $96de			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a26d						PeekByteUnary:
.a26d		a9 01		lda #$01			lda 	#1
.a26f		80 0a		bra $a27b			bra 	PeekUnary
.a271						PeekWUnary:
.a271		a9 02		lda #$02			lda 	#2
.a273		80 06		bra $a27b			bra 	PeekUnary
.a275						PeekLUnary:
.a275		a9 03		lda #$03			lda 	#3
.a277		80 02		bra $a27b			bra 	PeekUnary
.a279						PeekDUnary:
.a279		a9 04		lda #$04			lda 	#4
.a27b						PeekUnary:
.a27b		fa		plx				plx 								; restore position.
.a27c		48		pha				pha 								; save count to copy on stack
.a27d		20 5e a6	jsr $a65e			jsr		Evaluate16BitInteger 		; address as constant.
.a280		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a283		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a285		85 36		sta $36				sta 	zTemp0
.a287		b5 60		lda $60,x			lda 	NSMantissa1,x
.a289		85 37		sta $37				sta 	zTemp0+1
.a28b		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; clear the result to zero.
.a28e		68		pla				pla 								; count in zTemp2
.a28f		85 3a		sta $3a				sta 	zTemp2
.a291		da		phx				phx 								; save stack position and offset of read
.a292		5a		phy				phy
.a293		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a295						_PULoop:
.a295		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a297		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a299		c8		iny				iny 								; next byte to write
.a29a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a29b		18		clc				clc
.a29c		69 08		adc #$08			adc 	#MathStackSize
.a29e		aa		tax				tax
.a29f		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a2a1		d0 f2		bne $a295			bne 	_PULoop
.a2a3		7a		ply				ply 								; restore stack/code pos and exit.
.a2a4		fa		plx				plx
.a2a5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a2a6						Unary_Random:
.a2a6		fa		plx				plx
.a2a7		20 f7 a2	jsr $a2f7			jsr 	URCopyToMantissa  			; put random # in mantissa
.a2aa		b1 30		lda ($30),y			lda 	(codePtr),y
.a2ac		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a2ae		f0 08		beq $a2b8			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a2b0		e8		inx				inx
.a2b1		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a2b4		ca		dex				dex
.a2b5		20 30 98	jsr $9830			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a2b8						_URNoModulus:
.a2b8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a2ba		74 78		stz $78,x			stz 	NSExponent,x
.a2bc		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a2bf		60		rts				rts
.a2c0						Unary_Rnd:
.a2c0		fa		plx				plx
.a2c1		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; number to use.
.a2c4		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; closing bracket
.a2c7		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a2c9		10 20		bpl $a2eb			bpl 	_URDontSeed
.a2cb		a5 01		lda $01				lda 	1 							; switch to page 0
.a2cd		48		pha				pha
.a2ce		64 01		stz $01				stz 	1
.a2d0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a2d2		49 17		eor #$17			eor 	#$17
.a2d4		8d a4 d6	sta $d6a4			sta 	$D6A4
.a2d7		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2d9		49 a5		eor #$a5			eor 	#$A5
.a2db		8d a5 d6	sta $d6a5			sta 	$D6A5
.a2de		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a2e0		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2e3		a9 01		lda #$01			lda 	#1
.a2e5		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2e8		68		pla				pla
.a2e9		85 01		sta $01				sta 	1
.a2eb						_URDontSeed:
.a2eb		20 f7 a2	jsr $a2f7			jsr 	URCopyToMantissa 			; copy into mantissa
.a2ee		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a2f0		95 78		sta $78,x			sta 	NSExponent,x
.a2f2		a9 08		lda #$08			lda 	#NSTFloat
.a2f4		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a2f6		60		rts				rts
.a2f7						URCopyToMantissa:
.a2f7		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a2f9		48		pha				pha
.a2fa		64 01		stz $01				stz 	1
.a2fc		a9 01		lda #$01			lda 	#1
.a2fe		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a301		ad a4 d6	lda $d6a4			lda 	$D6A4
.a304		95 58		sta $58,x			sta 	NSMantissa0,x
.a306		ad a5 d6	lda $d6a5			lda 	$D6A5
.a309		95 60		sta $60,x			sta 	NSMantissa1,x
.a30b		ad a4 d6	lda $d6a4			lda 	$D6A4
.a30e		95 68		sta $68,x			sta 	NSMantissa2,x
.a310		ad a5 d6	lda $d6a5			lda 	$D6A5
.a313		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a315		95 70		sta $70,x			sta 	NSMantissa3,x
.a317		68		pla				pla
.a318		85 01		sta $01				sta 	1
.a31a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a31b						SgnUnary:
.a31b		fa		plx				plx 								; restore stack pos
.a31c		20 2c a6	jsr $a62c			jsr 	EvaluateNumber 				; get a float or int
.a31f		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a322		20 00 a7	jsr $a700			jsr 	NSMIsZero 					; if zero
.a325		f0 0e		beq $a335			beq 	_SGZero  					; return Int Zero
.a327		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a329		48		pha				pha
.a32a		a9 01		lda #$01			lda 	#1 							; set to 1
.a32c		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a32f		68		pla				pla
.a330		29 80		and #$80			and		#$80 						; copy the sign byte out
.a332		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a334		60		rts				rts
.a335		20 de a6	jsr $a6de	_SGZero:jsr 	NSMSetZero
.a338		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a339						ValUnary:
.a339		fa		plx				plx 								; restore stack pos
.a33a		20 4f a3	jsr $a34f			jsr 	ValMainCode 				; do the main val() code
.a33d		b0 01		bcs $a340			bcs 	_VUError 					; couldn't convert
.a33f		60		rts				rts
.a340						_VUError:
.a340		4c 66 a8	jmp $a866			jmp 	TypeError
.a343						IsValUnary:
.a343		fa		plx				plx 								; restore stack pos
.a344		20 4f a3	jsr $a34f			jsr 	ValMainCode 				; do the main val() code
.a347		b0 03		bcs $a34c			bcs 	_VUBad
.a349		4c de 96	jmp $96de			jmp 	ReturnTrue
.a34c						_VUBad:
.a34c		4c e9 96	jmp $96e9			jmp 	ReturnFalse
.a34f						ValMainCode:
.a34f		20 36 a6	jsr $a636			jsr 	EvaluateString 				; get a string
.a352		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; check right bracket present
.a355						ValEvaluateZTemp0:
.a355		5a		phy				phy
.a356		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a358		f0 17		beq $a371			beq 	_VMCFail2
.a35a		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a35c		48		pha				pha 								; save first character
.a35d		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a35f		d0 01		bne $a362			bne 	_VMCStart
.a361		c8		iny				iny 								; skip over -
.a362						_VMCStart:
.a362		38		sec				sec 								; initialise first time round.
.a363						_VMCNext:
.a363		c8		iny				iny 								; pre-increment
.a364		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a366		f0 0c		beq $a374			beq 	_VMCSuccess 				; successful.
.a368		20 bb 9e	jsr $9ebb			jsr 	EncodeNumber 				; send it to the number-builder
.a36b		90 03		bcc $a370			bcc 	_VMCFail 					; if failed, give up.
.a36d		18		clc				clc 								; next time round, countinue
.a36e		80 f3		bra $a363			bra 	_VMCNext
.a370						_VMCFail:
.a370		68		pla				pla
.a371						_VMCFail2:
.a371		7a		ply				ply
.a372		38		sec				sec
.a373		60		rts				rts
.a374						_VMCSuccess:
.a374		a9 00		lda #$00			lda 	#0 							; construct final
.a376		20 bb 9e	jsr $9ebb			jsr 	EncodeNumber 				; by sending a duff value.
.a379		68		pla				pla 								; if it was -ve
.a37a		c9 2d		cmp #$2d			cmp 	#"-"
.a37c		d0 03		bne $a381			bne 	_VMCNotNegative
.a37e		20 a0 a6	jsr $a6a0			jsr		NSMNegate 					; negate it.
.a381						_VMCNotNegative:
.a381		7a		ply				ply
.a382		18		clc				clc
.a383		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a384						ChrUnary:
.a384		fa		plx				plx 								; restore stack pos
.a385		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a388		48		pha				pha
.a389		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a38c		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a38e		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a391		68		pla				pla 								; write number to it
.a392		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a395		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a396						UnaryGetTime:
.a396		a9 00		lda #$00			lda 	#0
.a398		80 02		bra $a39c			bra 	UGDTMain
.a39a						UnaryGetDate:
.a39a		a9 03		lda #$03			lda 	#3
.a39c						UGDTMain:
.a39c		fa		plx				plx 								; get stack position back
.a39d		48		pha				pha 								; save table offset
.a39e		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger			; ignored parameter
.a3a1		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; closing )
.a3a4		68		pla				pla 								; table offset in A
.a3a5		5a		phy				phy 								; saving Y
.a3a6		a8		tay				tay 								; table offset in Y
.a3a7		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a3a9		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a3ac		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a3ae		48		pha				pha
.a3af		64 01		stz $01				stz 	1
.a3b1		20 c4 a3	jsr $a3c4			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a3b4		20 bf a3	jsr $a3bf			jsr 	UGDTColonDigit
.a3b7		20 bf a3	jsr $a3bf			jsr 	UGDTColonDigit
.a3ba		68		pla				pla 								; restore I/O select
.a3bb		85 01		sta $01				sta 	1
.a3bd		7a		ply				ply  								; restore code position
.a3be		60		rts				rts
.a3bf						UGDTColonDigit:
.a3bf		a9 3a		lda #$3a			lda 	#':'
.a3c1		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a3c4						UGDTDigit:
.a3c4		da		phx				phx 								; save X
.a3c5		b9 e4 a3	lda $a3e4,y			lda 	RTCROffset,y 				; get offset in RTC register
.a3c8		aa		tax				tax
.a3c9		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a3cc		39 ea a3	and $a3ea,y			and 	RTCRMask,y 					; and with Mask.
.a3cf		fa		plx				plx
.a3d0		48		pha				pha 								; output in BCD
.a3d1		4a		lsr a				lsr 	a
.a3d2		4a		lsr a				lsr 	a
.a3d3		4a		lsr a				lsr 	a
.a3d4		4a		lsr a				lsr 	a
.a3d5		09 30		ora #$30			ora 	#48
.a3d7		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a3da		68		pla				pla
.a3db		29 0f		and #$0f			and 	#15
.a3dd		09 30		ora #$30			ora 	#48
.a3df		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a3e2		c8		iny				iny
.a3e3		60		rts				rts
.a3e4						RTCROffset:
>a3e4		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a3ea						RTCRMask:
>a3ea		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getinkey.asm

.a3f0						AscGet:
.a3f0		fa		plx				plx 								; restore stack pos
.a3f1						AscGet2:
.a3f1		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a3f4		20 41 81	jsr $8141	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a3f7		d0 0b		bne $a404			bne 	_AGBreak
.a3f9		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; wait for key.
.a3fc		c9 00		cmp #$00			cmp 	#0
.a3fe		f0 f4		beq $a3f4			beq 	_AGKey
.a400		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a403		60		rts				rts
.a404						_AGBreak:
.a404		a9 01		lda #$01		lda	#1
.a406		4c 71 96	jmp $9671		jmp	ErrorHandler
.a409						AscInkey:
.a409		fa		plx				plx 								; restore stack pos
.a40a						AscInkey2:
.a40a		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a40d		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a410		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a413		60		rts				rts
.a414						ChrGet:
.a414		fa		plx				plx
.a415		20 f1 a3	jsr $a3f1			jsr 	AscGet2
.a418		4c 1f a4	jmp $a41f			jmp 	GetInkeyToString
.a41b						ChrInkey:
.a41b		fa		plx				plx
.a41c		20 0a a4	jsr $a40a			jsr 	AscInkey2
.a41f						GetInkeyToString:
.a41f		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a421		f0 0b		beq $a42e			beq 	_GKISNull
.a423		48		pha				pha
.a424		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a426		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a429		68		pla				pla 								; write number to it
.a42a		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a42d		60		rts				rts
.a42e						_GKISNull:
.a42e		a9 00		lda #$00			lda 	#0
.a430		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a433		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a434						ItemCountUnary:
.a434		fa		plx				plx
.a435		20 36 a6	jsr $a636			jsr 	EvaluateString
.a438		e8		inx				inx
.a439		20 ac a4	jsr $a4ac			jsr 	ICGetSeperator
.a43c		ca		dex				dex
.a43d		20 cd a4	jsr $a4cd			jsr 	ICSetPointer 				; zTemp0 = (string)
.a440		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; zero the result.
.a443		5a		phy				phy
.a444		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a446						_ICULoop:
.a446		c8		iny				iny
.a447		b1 36		lda ($36),y			lda 	(zTemp0),y
.a449		cd 72 07	cmp $0772			cmp 	ICSeperator
.a44c		d0 02		bne $a450			bne 	_ICUNoMatch
.a44e		f6 58		inc $58,x			inc 	NSMantissa0,x
.a450						_ICUNoMatch:
.a450		c9 00		cmp #$00			cmp 	#0
.a452		d0 f2		bne $a446			bne 	_ICULoop
.a454		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a456		7a		ply				ply
.a457		60		rts				rts
.a458						ItemGetUnary:
.a458		fa		plx				plx
.a459		20 36 a6	jsr $a636			jsr 	EvaluateString 				; search string
.a45c		20 60 96	jsr $9660			jsr 	CheckComma
.a45f		e8		inx				inx 								; get count
.a460		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.a463		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a465		f0 61		beq $a4c8			beq 	ICGSRange
.a467		e8		inx				inx 								; get seperator.
.a468		20 ac a4	jsr $a4ac			jsr 	ICGetSeperator
.a46b		ca		dex				dex
.a46c		ca		dex				dex
.a46d		5a		phy				phy
.a46e		20 cd a4	jsr $a4cd			jsr 	ICSetPointer 				; zTemp0 points to string.
.a471		a0 00		ldy #$00			ldy 	#0
.a473		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a475		f0 0e		beq $a485			beq 	_IGUFoundStart
.a477						_IGUFindNext:
.a477		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a479		f0 4d		beq $a4c8			beq 	ICGSRange 					; eol, not found.
.a47b		c8		iny				iny
.a47c		cd 72 07	cmp $0772			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a47f		d0 f6		bne $a477			bne 	_IGUFindNext
.a481		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a483		d0 f2		bne $a477			bne 	_IGUFindNext
.a485						_IGUFoundStart:
.a485		84 38		sty $38				sty 	zTemp1 						; save start
.a487		88		dey				dey
.a488						_IGUFindLength:
.a488		c8		iny				iny 								; forward till seperator/EOS
.a489		b1 36		lda ($36),y			lda 	(zTemp0),y
.a48b		f0 05		beq $a492			beq 	_IGUFoundLength
.a48d		cd 72 07	cmp $0772			cmp 	ICSeperator
.a490		d0 f6		bne $a488			bne 	_IGUFindLength
.a492						_IGUFoundLength:
.a492		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a494		98		tya				tya 								; calculate length of new string.
.a495		38		sec				sec
.a496		e5 38		sbc $38				sbc 	zTemp1
.a498		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate 			; allocate bytes for it.
.a49b		a4 38		ldy $38				ldy 	zTemp1
.a49d						_IGUCopySub:
.a49d		c4 39		cpy $39				cpy 	zTemp1+1
.a49f		f0 08		beq $a4a9			beq 	_IGUCopyOver
.a4a1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4a3		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a4a6		c8		iny				iny
.a4a7		80 f4		bra $a49d			bra 	_IGUCopySub
.a4a9						_IGUCopyOver:
.a4a9		7a		ply				ply
.a4aa		60		rts				rts
>a4ab		db						.byte 	$DB 						; causes a break in the emulator
.a4ac						ICGetSeperator:
.a4ac		20 60 96	jsr $9660			jsr 	CheckComma 					; preceding comma
.a4af		20 36 a6	jsr $a636			jsr 	EvaluateString 				; seperator string
.a4b2		20 cd a4	jsr $a4cd			jsr 	ICSetPointer 				; access it
.a4b5		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a4b7		8d 72 07	sta $0772			sta 	ICSeperator
.a4ba		f0 0c		beq $a4c8			beq 	ICGSRange 					; check LEN(seperator) = 1
.a4bc		5a		phy				phy
.a4bd		a0 01		ldy #$01			ldy 	#1
.a4bf		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c1		d0 05		bne $a4c8			bne 	ICGSRange
.a4c3		7a		ply				ply
.a4c4		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; check following )
.a4c7		60		rts				rts
.a4c8						ICGSRange:
.a4c8		a9 04		lda #$04		lda	#4
.a4ca		4c 71 96	jmp $9671		jmp	ErrorHandler
.a4cd						ICSetPointer:
.a4cd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a4cf		85 36		sta $36				sta 	zTemp0
.a4d1		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4d3		85 37		sta $37				sta 	zTemp0+1
.a4d5		60		rts				rts
.0772						ICSeperator:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4d6						SpcUnary:
.a4d6		fa		plx				plx 								; restore stack pos
.a4d7		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger			; get value
.a4da		5a		phy				phy
.a4db		48		pha				pha 								; save count
.a4dc		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a4df		7a		ply				ply 								; to do count in Y
.a4e0						_SpcLoop:
.a4e0		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a4e2		f0 08		beq $a4ec			beq 	_SpcExit
.a4e4		a9 20		lda #$20			lda 	#32
.a4e6		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a4e9		88		dey				dey
.a4ea		80 f4		bra $a4e0			bra 	_SpcLoop
.a4ec						_SpcExit:
.a4ec		7a		ply				ply
.a4ed		20 58 96	jsr $9658			jsr 	CheckRightBracket
.a4f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4f1						Unary_Str:
.a4f1		fa		plx				plx
.a4f2		20 2c a6	jsr $a62c			jsr 	EvaluateNumber  			; get number
.a4f5		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; closing bracket
.a4f8		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4fa		20 13 a5	jsr $a513			jsr 	ConvertNumberToString 		; do the conversion.
.a4fd		a9 21		lda #$21			lda		#33 						; create buffer
.a4ff		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate 			; allocate memory
.a502		da		phx				phx  								; copy the converted string into the buffer.
.a503		a2 00		ldx #$00			ldx 	#0
.a505						_USCopy:
.a505		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a508		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite
.a50b		e8		inx				inx
.a50c		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a50f		d0 f4		bne $a505			bne 	_USCopy
.a511		fa		plx				plx
.a512		60		rts				rts
.a513						ConvertNumberToString:
.a513		5a		phy				phy 								; save code position
.a514		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a517		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a51a		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a51c		10 09		bpl $a527			bpl 	_CNTSNotNegative
.a51e		29 7f		and #$7f			and 	#$7F 						; make +ve
.a520		95 50		sta $50,x			sta 	NSStatus,x
.a522		a9 2d		lda #$2d			lda 	#"-"
.a524		20 88 a5	jsr $a588			jsr 	WriteDecimalBuffer
.a527						_CNTSNotNegative:
.a527		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a529		f0 12		beq $a53d			beq 	_CNTSNotFloat
.a52b		e8		inx				inx 								; round up so we don't get too many 6.999999
.a52c		a9 01		lda #$01			lda 	#1
.a52e		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a531		ca		dex				dex
.a532		b5 78		lda $78,x			lda		NSExponent,x
.a534		95 79		sta $79,x			sta 	NSExponent+1,x
.a536		a9 08		lda #$08			lda 	#NSTFloat
.a538		95 51		sta $51,x			sta 	NSStatus+1,x
.a53a		20 c0 9b	jsr $9bc0			jsr 	FloatAdd
.a53d						_CNTSNotFloat:
.a53d		20 6a a5	jsr $a56a			jsr 	MakePlusTwoString 			; do the integer part.
.a540		20 86 9c	jsr $9c86			jsr 	FloatFractionalPart 		; get the fractional part
.a543		20 37 9d	jsr $9d37			jsr 	NSNormalise					; normalise , exit if zero
.a546		f0 20		beq $a568			beq 	_CNTSExit
.a548		a9 2e		lda #$2e			lda 	#"."
.a54a		20 88 a5	jsr $a588			jsr 	WriteDecimalBuffer 			; write decimal place
.a54d						_CNTSDecimal:
.a54d		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a550		30 16		bmi $a568			bmi 	_CNTSExit
.a552		e8		inx				inx 								; x 10.0
.a553		a9 0a		lda #$0a			lda 	#10
.a555		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.a558		a9 08		lda #$08			lda 	#NSTFloat
.a55a		95 50		sta $50,x			sta 	NSStatus,x
.a55c		ca		dex				dex
.a55d		20 05 9d	jsr $9d05			jsr 	FloatMultiply
.a560		20 6a a5	jsr $a56a			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a563		20 86 9c	jsr $9c86			jsr 	FloatFractionalPart 		; get the fractional part
.a566		80 e5		bra $a54d			bra 	_CNTSDecimal 				; keep going.
.a568						_CNTSExit:
.a568		7a		ply				ply
.a569		60		rts				rts
.a56a						MakePlusTwoString:
.a56a		da		phx				phx
.a56b		20 c1 a6	jsr $a6c1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a56e		e8		inx				inx 								; access it
.a56f		e8		inx				inx
.a570		20 de 9c	jsr $9cde			jsr 	FloatIntegerPart 			; make it an integer
.a573		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a575		20 f0 9a	jsr $9af0			jsr 	ConvertInt32
.a578		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a57a						_MPTSCopy:
.a57a		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a57d		20 88 a5	jsr $a588			jsr 	WriteDecimalBuffer
.a580		e8		inx				inx
.a581		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a584		d0 f4		bne $a57a			bne 	_MPTSCopy
.a586		fa		plx				plx
.a587		60		rts				rts
.a588						WriteDecimalBuffer:
.a588		da		phx				phx
.a589		ae 11 04	ldx $0411			ldx 	dbOffset
.a58c		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a58f		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a592		ee 11 04	inc $0411			inc 	dbOffset
.a595		fa		plx				plx
.a596		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a597						Unary_Left:
.a597		fa		plx				plx
.a598		18		clc				clc 								; only one parameter
.a599		20 fc a5	jsr $a5fc			jsr 	SubstringInitial 			; set up.
.a59c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a59e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5a0		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5a2		80 25		bra $a5c9			bra 	SubstringMain
.a5a4						Unary_Right:
.a5a4		fa		plx				plx
.a5a5		18		clc				clc 								; only one parameter
.a5a6		20 fc a5	jsr $a5fc			jsr 	SubstringInitial 			; set up.
.a5a9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5ab		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5ad		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5af		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5b1		b0 02		bcs $a5b5			bcs 	_URNotUnderflow
.a5b3		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5b5						_URNotUnderflow:
.a5b5		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5b7		80 10		bra $a5c9			bra 	SubstringMain
.a5b9						Unary_Mid:
.a5b9		fa		plx				plx
.a5ba		38		sec				sec 								; two parameters
.a5bb		20 fc a5	jsr $a5fc			jsr 	SubstringInitial 			; set up.
.a5be		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5c0		f0 04		beq $a5c6			beq 	_UMError
.a5c2		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5c4		80 03		bra $a5c9			bra 	SubstringMain
.a5c6						_UMError:
.a5c6		4c 6b a8	jmp $a86b			jmp 	ArgumentError
.a5c9						SubstringMain:
.a5c9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5cb		d5 78		cmp $78,x			cmp 	NSExponent,x
.a5cd		b0 27		bcs $a5f6			bcs 	_SSMNull 					; if so, return an empty string.
.a5cf		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5d1		f0 23		beq $a5f6			beq 	_SSMNull 					; return empty string.
.a5d3		18		clc				clc 								; add the offset +1 to the address and
.a5d4		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a5d6		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a5d8		85 36		sta $36				sta 	zTemp0
.a5da		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a5dc		69 00		adc #$00			adc 	#0
.a5de		85 37		sta $37				sta 	zTemp0+1
.a5e0						_SSMNoCarry:
.a5e0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5e2		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate 			; allocate that many characters
.a5e5		5a		phy				phy 								; save Y
.a5e6		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5e8						_SSMCopy:
.a5e8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5ea		f0 08		beq $a5f4			beq 	_SSMEString 				; no more to copy
.a5ec		20 e6 b8	jsr $b8e6			jsr 	StringTempWrite 			; and write it out.
.a5ef		c8		iny				iny
.a5f0		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a5f2		d0 f4		bne $a5e8			bne 	_SSMCopy
.a5f4						_SSMEString:
.a5f4		7a		ply				ply
.a5f5						_SSMExit:
.a5f5		60		rts				rts
.a5f6						_SSMNull:
.a5f6		a9 00		lda #$00			lda 	#0
.a5f8		20 ad b8	jsr $b8ad			jsr 	StringTempAllocate
.a5fb		60		rts				rts
.a5fc						SubstringInitial:
.a5fc		da		phx				phx 								; save initial stack position
.a5fd		08		php				php 								; save carry on stack indicating 2 parameters
.a5fe		20 36 a6	jsr $a636			jsr 	EvaluateString 				; get a string
.a601		5a		phy				phy 								; calculate length to exponent.
.a602		a0 ff		ldy #$ff			ldy 	#$FF
.a604						_SIFindLength:
.a604		c8		iny				iny
.a605		b1 36		lda ($36),y			lda 	(zTemp0),y
.a607		d0 fb		bne $a604			bne 	_SIFindLength
.a609		98		tya				tya
.a60a		95 78		sta $78,x			sta 	NSExponent,x
.a60c		7a		ply				ply
.a60d		e8		inx				inx
.a60e		20 60 96	jsr $9660			jsr 	CheckComma 					; comma next
.a611		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get next parameter
.a614		28		plp				plp 								; is it the last parameter ?
.a615		90 07		bcc $a61e			bcc 	_SSIExit 					; if so, exit.
.a617		e8		inx				inx
.a618		20 60 96	jsr $9660			jsr 	CheckComma 					; comma next
.a61b		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get last parameter
.a61e						_SSIExit:
.a61e		fa		plx				plx
.a61f		20 58 96	jsr $9658			jsr 	CheckRightBracket 			; check closing bracket
.a622		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a623						EvaluateValue:
.a623		48		pha				pha
.a624		20 75 9b	jsr $9b75			jsr		EvaluateExpression 			; expression
.a627		20 38 9e	jsr $9e38			jsr 	Dereference					; derefernce it
.a62a		68		pla				pla
.a62b		60		rts				rts
.a62c						EvaluateNumber:
.a62c		20 23 a6	jsr $a623			jsr 	EvaluateValue 				; get a value
.a62f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a631		29 10		and #$10			and 	#NSBIsString
.a633		d0 13		bne $a648			bne 	HelperTypeError
.a635		60		rts				rts
.a636						EvaluateString:
.a636		20 23 a6	jsr $a623			jsr 	EvaluateValue 				; get a value
.a639		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a63b		29 10		and #$10			and 	#NSBIsString
.a63d		f0 09		beq $a648			beq 	HelperTypeError
.a63f						CopyAddressToTemp0:
.a63f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a641		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a643		b5 60		lda $60,x			lda 	NSMantissa1,x
.a645		85 37		sta $37				sta 	zTemp0+1
.a647		60		rts				rts
.a648						HelperTypeError:
.a648		4c 66 a8	jmp $a866			jmp 	TypeError
.a64b						EvaluateInteger:
.a64b		20 2c a6	jsr $a62c			jsr 	EvaluateNumber
.a64e		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a650		d0 09		bne $a65b			bne 	HelperValueError 			; if not, it's a float.
.a652		60		rts				rts
.a653						EvaluateUnsignedInteger:
.a653		20 4b a6	jsr $a64b			jsr 	EvaluateInteger 			; check integer is +ve
.a656		b5 50		lda $50,x			lda 	NSStatus,x
.a658		30 01		bmi $a65b			bmi 	HelperValueError
.a65a		60		rts				rts
.a65b						HelperValueError:
.a65b		4c 6b a8	jmp $a86b			jmp 	ArgumentError
.a65e						Evaluate16BitInteger:
.a65e		20 53 a6	jsr $a653			jsr	 	EvaluateUnsignedInteger		; get integer
.a661		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a663		15 68		ora $68,x			ora 	NSMantissa2,x
.a665		d0 f4		bne $a65b			bne 	HelperValueError
.a667		60		rts				rts
.a668						Evaluate16BitIntegerSigned:
.a668		20 4b a6	jsr $a64b			jsr	 	EvaluateInteger				; get integer
.a66b		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a66d		15 68		ora $68,x			ora 	NSMantissa2,x
.a66f		d0 ea		bne $a65b			bne 	HelperValueError
.a671		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a673		10 03		bpl $a678			bpl 	_EISNotSigned
.a675		20 a7 a6	jsr $a6a7			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a678						_EISNotSigned:
.a678		60		rts				rts
.a679						Evaluate8BitInteger:
.a679		20 53 a6	jsr $a653			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a67c		d0 dd		bne $a65b			bne 	HelperValueError
.a67e		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a680		15 68		ora $68,x			ora 	NSMantissa2,x
.a682		15 60		ora $60,x			ora 	NSMantissa1,x
.a684		d0 d5		bne $a65b			bne 	HelperValueError
.a686		b5 58		lda $58,x			lda 	NSMantissa0,x
.a688		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a689						Multiply8x8:
.a689		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a68a		85 36		sta $36			  	sta 	zTemp0
.a68c		86 37		stx $37				stx 	zTemp0+1
.a68e		a9 00		lda #$00			lda 	#0
.a690		a2 08		ldx #$08			ldx 	#8
.a692						_M88Loop:
.a692		90 03		bcc $a697			bcc 	_M88NoAdd
.a694		18		clc				clc
.a695		65 37		adc $37				adc 	zTemp0+1
.a697						_M88NoAdd:
.a697		6a		ror a				ror 	a
.a698		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a69a		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a69b		d0 f5		bne $a692			bne 	_M88Loop
.a69d		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a69f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6a0						NSMNegate:
.a6a0		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6a2		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6a4		95 50		sta $50,x			sta 	NSStatus,x
.a6a6		60		rts				rts
.a6a7						NSMNegateMantissa:
.a6a7		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6a8		a9 00		lda #$00			lda 	#0
.a6aa		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6ac		95 58		sta $58,x			sta 	NSMantissa0,x
.a6ae		a9 00		lda #$00			lda 	#0
.a6b0		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a6b2		95 60		sta $60,x			sta 	NSMantissa1,x
.a6b4		a9 00		lda #$00			lda 	#0
.a6b6		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a6b8		95 68		sta $68,x			sta 	NSMantissa2,x
.a6ba		a9 00		lda #$00			lda 	#0
.a6bc		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a6be		95 70		sta $70,x			sta 	NSMantissa3,x
.a6c0		60		rts				rts
.a6c1						NSMShiftUpTwo:
.a6c1		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6c3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6c5		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6c7		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a6c9		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6cb		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a6cd		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6cf		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a6d1		b5 78		lda $78,x			lda 	NSExponent,x
.a6d3		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a6d5		b5 50		lda $50,x			lda 	NSStatus,x
.a6d7		95 52		sta $52,x			sta 	NSStatus+2,x
.a6d9		60		rts				rts
.a6da						NSMSetZeroMantissaOnly:
.a6da		a9 00		lda #$00			lda 	#0
.a6dc		80 06		bra $a6e4			bra 	NSMSetMantissa
.a6de						NSMSetZero:
.a6de		a9 00		lda #$00			lda 	#0
.a6e0						NSMSetByte:
.a6e0		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6e2		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a6e4						NSMSetMantissa:
.a6e4		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a6e6		74 60		stz $60,x			stz 	NSMantissa1,x
.a6e8		74 68		stz $68,x			stz 	NSMantissa2,x
.a6ea		74 70		stz $70,x			stz 	NSMantissa3,x
.a6ec		60		rts				rts
.a6ed						NSMShiftLeft:
.a6ed		18		clc				clc
.a6ee						NSMRotateLeft:
.a6ee		36 58		rol $58,x			rol 	NSMantissa0,x
.a6f0		36 60		rol $60,x			rol		NSMantissa1,x
.a6f2		36 68		rol $68,x			rol		NSMantissa2,x
.a6f4		36 70		rol $70,x			rol		NSMantissa3,x
.a6f6		60		rts				rts
.a6f7						NSMShiftRight:
.a6f7		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a6f9		76 68		ror $68,x			ror		NSMantissa2,x
.a6fb		76 60		ror $60,x			ror		NSMantissa1,x
.a6fd		76 58		ror $58,x			ror		NSMantissa0,x
.a6ff		60		rts				rts
.a700						NSMIsZero:
.a700		b5 70		lda $70,x			lda 	NSMantissa3,x
.a702		15 68		ora $68,x			ora		NSMantissa2,x
.a704		15 60		ora $60,x			ora		NSMantissa1,x
.a706		15 58		ora $58,x			ora		NSMantissa0,x
.a708		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a709						TickHandler:
.a709		5a		phy				phy 								; need to preserve Y
.a70a		20 89 80	jsr $8089			jsr 	SNDUpdate 					; update sound
.a70d		7a		ply				ply
.a70e		60		rts				rts
.0773						LastTick:
>0773								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a70f						Assemble_ora:
.a70f		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a712		01					.byte $01
.a713						Assemble_and:
.a713		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a716		21					.byte $21
.a717						Assemble_eor:
.a717		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a71a		41					.byte $41
.a71b						Assemble_adc:
.a71b		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a71e		61					.byte $61
.a71f						Assemble_sta:
.a71f		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a722		81					.byte $81
.a723						Assemble_lda:
.a723		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a726		a1					.byte $a1
.a727						Assemble_cmp:
.a727		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a72a		c1					.byte $c1
.a72b						Assemble_sbc:
.a72b		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a72e		e1					.byte $e1
.a72f						Assemble_asl:
.a72f		20 92 82	jsr $8292		jsr	AssembleGroup2
>a732		02					.byte $02
>a733		75					.byte $75
.a734						Assemble_rol:
.a734		20 92 82	jsr $8292		jsr	AssembleGroup2
>a737		22					.byte $22
>a738		75					.byte $75
.a739						Assemble_lsr:
.a739		20 92 82	jsr $8292		jsr	AssembleGroup2
>a73c		42					.byte $42
>a73d		75					.byte $75
.a73e						Assemble_ror:
.a73e		20 92 82	jsr $8292		jsr	AssembleGroup2
>a741		62					.byte $62
>a742		75					.byte $75
.a743						Assemble_stx:
.a743		20 92 82	jsr $8292		jsr	AssembleGroup2
>a746		82					.byte $82
>a747		50					.byte $50
.a748						Assemble_ldx:
.a748		20 92 82	jsr $8292		jsr	AssembleGroup2
>a74b		a2					.byte $a2
>a74c		d0					.byte $d0
.a74d						Assemble_dec:
.a74d		20 92 82	jsr $8292		jsr	AssembleGroup2
>a750		c2					.byte $c2
>a751		55					.byte $55
.a752						Assemble_inc:
.a752		20 92 82	jsr $8292		jsr	AssembleGroup2
>a755		e2					.byte $e2
>a756		55					.byte $55
.a757						Assemble_stz:
.a757		20 92 82	jsr $8292		jsr	AssembleGroup2
>a75a		60					.byte $60
>a75b		44					.byte $44
.a75c						Assemble_bit:
.a75c		20 92 82	jsr $8292		jsr	AssembleGroup2
>a75f		20					.byte $20
>a760		55					.byte $55
.a761						Assemble_sty:
.a761		20 92 82	jsr $8292		jsr	AssembleGroup2
>a764		80					.byte $80
>a765		54					.byte $54
.a766						Assemble_ldy:
.a766		20 92 82	jsr $8292		jsr	AssembleGroup2
>a769		a0					.byte $a0
>a76a		d5					.byte $d5
.a76b						Assemble_cpy:
.a76b		20 92 82	jsr $8292		jsr	AssembleGroup2
>a76e		c0					.byte $c0
>a76f		d4					.byte $d4
.a770						Assemble_cpx:
.a770		20 92 82	jsr $8292		jsr	AssembleGroup2
>a773		e0					.byte $e0
>a774		d0					.byte $d0
.a775						Assemble_tsb:
.a775		20 92 82	jsr $8292		jsr	AssembleGroup2
>a778		00					.byte $00
>a779		50					.byte $50
.a77a						Assemble_trb:
.a77a		20 92 82	jsr $8292		jsr	AssembleGroup2
>a77d		10					.byte $10
>a77e		50					.byte $50
.a77f						Assemble_jsr:
.a77f		20 92 82	jsr $8292		jsr	AssembleGroup2
>a782		14					.byte $14
>a783		10					.byte $10
.a784						Assemble_jmp:
.a784		20 92 82	jsr $8292		jsr	AssembleGroup2
>a787		40					.byte $40
>a788		10					.byte $10
.a789						Assemble_bpl:
.a789		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a78c		10					.byte $10
.a78d						Assemble_bmi:
.a78d		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a790		30					.byte $30
.a791						Assemble_bvc:
.a791		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a794		50					.byte $50
.a795						Assemble_bvs:
.a795		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a798		70					.byte $70
.a799						Assemble_bcc:
.a799		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a79c		90					.byte $90
.a79d						Assemble_bcs:
.a79d		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a0		b0					.byte $b0
.a7a1						Assemble_bne:
.a7a1		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a4		d0					.byte $d0
.a7a5						Assemble_beq:
.a7a5		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a8		f0					.byte $f0
.a7a9						Assemble_bra:
.a7a9		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7ac		80					.byte $80
.a7ad						Assemble_brk:
.a7ad		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7b0		00					.byte $00
.a7b1						Assemble_php:
.a7b1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7b4		08					.byte $08
.a7b5						Assemble_clc:
.a7b5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7b8		18					.byte $18
.a7b9						Assemble_plp:
.a7b9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7bc		28					.byte $28
.a7bd						Assemble_sec:
.a7bd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7c0		38					.byte $38
.a7c1						Assemble_rti:
.a7c1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7c4		40					.byte $40
.a7c5						Assemble_pha:
.a7c5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7c8		48					.byte $48
.a7c9						Assemble_cli:
.a7c9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7cc		58					.byte $58
.a7cd						Assemble_phy:
.a7cd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d0		5a					.byte $5a
.a7d1						Assemble_rts:
.a7d1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d4		60					.byte $60
.a7d5						Assemble_pla:
.a7d5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d8		68					.byte $68
.a7d9						Assemble_sei:
.a7d9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7dc		78					.byte $78
.a7dd						Assemble_ply:
.a7dd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e0		7a					.byte $7a
.a7e1						Assemble_dey:
.a7e1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e4		88					.byte $88
.a7e5						Assemble_txa:
.a7e5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e8		8a					.byte $8a
.a7e9						Assemble_tya:
.a7e9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7ec		98					.byte $98
.a7ed						Assemble_txs:
.a7ed		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f0		9a					.byte $9a
.a7f1						Assemble_tay:
.a7f1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f4		a8					.byte $a8
.a7f5						Assemble_tax:
.a7f5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f8		aa					.byte $aa
.a7f9						Assemble_clv:
.a7f9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7fc		b8					.byte $b8
.a7fd						Assemble_tsx:
.a7fd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a800		ba					.byte $ba
.a801						Assemble_iny:
.a801		20 17 83	jsr $8317		jsr	AssembleGroup4
>a804		c8					.byte $c8
.a805						Assemble_dex:
.a805		20 17 83	jsr $8317		jsr	AssembleGroup4
>a808		ca					.byte $ca
.a809						Assemble_cld:
.a809		20 17 83	jsr $8317		jsr	AssembleGroup4
>a80c		d8					.byte $d8
.a80d						Assemble_phx:
.a80d		20 17 83	jsr $8317		jsr	AssembleGroup4
>a810		da					.byte $da
.a811						Assemble_stp:
.a811		20 17 83	jsr $8317		jsr	AssembleGroup4
>a814		db					.byte $db
.a815						Assemble_inx:
.a815		20 17 83	jsr $8317		jsr	AssembleGroup4
>a818		e8					.byte $e8
.a819						Assemble_nop:
.a819		20 17 83	jsr $8317		jsr	AssembleGroup4
>a81c		ea					.byte $ea
.a81d						Assemble_sed:
.a81d		20 17 83	jsr $8317		jsr	AssembleGroup4
>a820		f8					.byte $f8
.a821						Assemble_plx:
.a821		20 17 83	jsr $8317		jsr	AssembleGroup4
>a824		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a825						DecimalScalarTable:
>a825		66 66 66 66				.dword $66666666 ; 0.1
>a829		de					.byte $de
>a82a		1f 85 eb 51				.dword $51eb851f ; 0.01
>a82e		db					.byte $db
>a82f		4c 37 89 41				.dword $4189374c ; 0.001
>a833		d8					.byte $d8
>a834		ac 8b db 68				.dword $68db8bac ; 0.0001
>a838		d4					.byte $d4
>a839		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a83d		d1					.byte $d1
>a83e		83 de 1b 43				.dword $431bde83 ; 1e-06
>a842		ce					.byte $ce
>a843		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a847		ca					.byte $ca
>a848		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a84c		c7					.byte $c7
>a84d		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a851		c4					.byte $c4
>a852		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a856		c0					.byte $c0
>a857		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a85b		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a85c						SyntaxError:
.a85c		a9 02		lda #$02		lda	#2
.a85e		4c 71 96	jmp $9671		jmp	ErrorHandler
.a861						RangeError:
.a861		a9 04		lda #$04		lda	#4
.a863		4c 71 96	jmp $9671		jmp	ErrorHandler
.a866						TypeError:
.a866		a9 05		lda #$05		lda	#5
.a868		4c 71 96	jmp $9671		jmp	ErrorHandler
.a86b						ArgumentError:
.a86b		a9 07		lda #$07		lda	#7
.a86d		4c 71 96	jmp $9671		jmp	ErrorHandler
.a870						NotDoneError:
.a870		a9 0c		lda #$0c		lda	#12
.a872		4c 71 96	jmp $9671		jmp	ErrorHandler
.a875						ErrorText:
>a875		42 72 65 61 6b 00			.text	"Break",0
>a87b		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a883		72 72 6f 72 00
>a888		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a890		20 62 79 20 7a 65 72 6f 00
>a899		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a8a1		61 6e 67 65 00
>a8a6		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a8ae		6d 61 74 63 68 00
>a8b4		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a8bc		65 6d 6f 72 79 00
>a8c2		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a8ca		61 72 67 75 6d 65 6e 74 00
>a8d3		53 74 6f 70 00				.text	"Stop",0
>a8d8		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a8e0		6f 6f 20 6c 6f 6e 67 00
>a8e8		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a8f0		6e 20 66 61 69 6c 65 64 00
>a8f9		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a901		61 74 61 00
>a905		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a90d		65 6e 74 65 64 00
>a913		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a91b		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a927		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a92f		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a93c		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a944		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a951		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a959		68 6f 75 74 20 57 68 69 6c 65 00
>a964		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a96c		68 6f 75 74 20 46 6f 72 00
>a975		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a97d		61 63 6b 20 66 75 6c 6c 00
>a986		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a98e		75 63 74 75 72 65 00
>a995		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a99d		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a9aa		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a9b2		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a9c0		41 72 72 61 79 20 73 69			.text	"Array size",0
>a9c8		7a 65 00
>a9cb		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a9d3		79 20 69 6e 64 65 78 00
>a9db		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a9e3		74 20 64 65 63 6c 61 72 65 64 00
>a9ee		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a9f6		20 66 6f 75 6e 64 00
>a9fd		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>aa05		65 72 72 6f 72 00
>aa0b		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>aa13		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc72		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>dc7a		32 33 20 33 31

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.aa19						RectangleCommand:
.aa19		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.aa1b		80 02		bra $aa1f			bra 	ShapeDrawCmd
.aa1d						CircleCommand:
.aa1d		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.aa1f						ShapeDrawCmd:
.aa1f		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa22						ShapeDraw:
.aa22		0d 75 07	ora $0775			ora 	gxFillSolid  				; adjust AXY for solid fill.
.aa25		4c 9d aa	jmp $aa9d			jmp 	ExecuteGraphicCommand	 	; and complete
.aa28						SpriteCommand:
.aa28		a2 00		ldx #$00			ldx 	#0
.aa2a		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get image number.
.aa2d		5a		phy				phy
.aa2e		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.aa30		a6 58		ldx $58				ldx 	NSMantissa0
.aa32		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.aa34		b0 0d		bcs $aa43			bcs 	_SCRange
.aa36		a0 ff		ldy #$ff			ldy 	#255
.aa38		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa3b		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.aa3d		7a		ply				ply
.aa3e		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa41		80 5a		bra $aa9d			bra 	ExecuteGraphicCommand
.aa43						_SCRange:
.aa43		4c 61 a8	jmp $a861			jmp 	RangeError
.aa46						ImageCommand:
.aa46		a2 00		ldx #$00			ldx 	#0
.aa48		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get image number.
.aa4b		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa4e						ImageRunDraw:
.aa4e		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.aa50		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa53		ad 7b 07	lda $077b			lda 	gxDrawScale
.aa56		0a		asl a				asl 	a
.aa57		0a		asl a				asl 	a
.aa58		0a		asl a				asl 	a
.aa59		a8		tay				tay
.aa5a		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.aa5c		a6 58		ldx $58				ldx 	NSMantissa0
.aa5e		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa61		60		rts				rts
.aa62						TextCommand:
.aa62		a2 00		ldx #$00			ldx 	#0
.aa64		20 36 a6	jsr $a636			jsr 	EvaluateString 				; get text
.aa67		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa6a						TextRunDraw:
.aa6a		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.aa6c		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa6f		a0 00		ldy #$00			ldy 	#0
.aa71						_IRDLoop:
.aa71		a5 60		lda $60				lda 	NSMantissa1 				; access character
.aa73		85 37		sta $37				sta 	zTemp0+1
.aa75		a5 58		lda $58				lda 	NSMantissa0
.aa77		85 36		sta $36				sta 	zTemp0
.aa79		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa7b		f0 13		beq $aa90			beq 	_IRDExit
.aa7d		5a		phy				phy									; save string pos
.aa7e		48		pha				pha 								; save char
.aa7f		ad 7b 07	lda $077b			lda 	gxDrawScale 				; get scale
.aa82		0a		asl a				asl 	a
.aa83		0a		asl a				asl 	a
.aa84		0a		asl a				asl 	a
.aa85		a8		tay				tay
.aa86		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.aa88		fa		plx				plx 								; char to draw
.aa89		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa8c		7a		ply				ply 								; restore string pos
.aa8d		c8		iny				iny
.aa8e		90 e1		bcc $aa71			bcc 	_IRDLoop 					; go back if no error.
.aa90						_IRDExit:
.aa90		60		rts				rts
.aa91						PlotCommand:
.aa91		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.aa93		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa96		80 05		bra $aa9d			bra 	ExecuteGraphicCommand
.aa98						LineCommand:
.aa98		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.aa9a		20 a9 aa	jsr $aaa9			jsr 	RunGraphicsCommand
.aa9d						ExecuteGraphicCommand:
.aa9d		0d 74 07	ora $0774			ora 	gxCommandID 				; make a full command
.aaa0		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; draw it and exit
.aaa3		b0 01		bcs $aaa6			bcs 	_EGCError
.aaa5		60		rts				rts
.aaa6						_EGCError:
.aaa6		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.aaa9						RunGraphicsCommand:
.aaa9		8d 74 07	sta $0774			sta 	gxCommandID					; save TODO graphics command.
.aaac		68		pla				pla 								; pop handler address
.aaad		fa		plx				plx
.aaae		1a		inc a				inc 	a
.aaaf		d0 01		bne $aab2			bne 	_RGINoCarry
.aab1		e8		inx				inx
.aab2						_RGINoCarry:
.aab2		8d 79 07	sta $0779			sta 	gxHandler
.aab5		8e 7a 07	stx $077a			stx 	gxHandler+1
.aab8						_RGICommandLoop:
.aab8		b1 30		lda ($30),y			lda 	(codePtr),y
.aaba		c8		iny				iny
.aabb		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.aabd		f0 53		beq $ab12			beq 	_RGI_To
.aabf		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.aac1		f0 55		beq $ab18			beq 	_RGI_Here
.aac3		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.aac5		f0 3d		beq $ab04			beq 	_RGI_Exit
.aac7		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.aac9		f0 39		beq $ab04			beq 	_RGI_Exit
.aacb		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.aacd		f0 3e		beq $ab0d			beq 	_RGI_Frame
.aacf		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.aad1		f0 33		beq $ab06			beq 	_RGI_Solid
.aad3		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.aad5		f0 4b		beq $ab22			beq 	_RGI_By
.aad7		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.aad9		f0 17		beq $aaf2			beq 	_RGI_Move2
.aadb		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.aadd		f0 62		beq $ab41			beq 	_RGI_Dim
.aadf		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.aae1		f0 74		beq $ab57			beq 	_RGI_Colour
.aae3		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.aae5		f0 70		beq $ab57			beq 	_RGI_Colour
.aae7		ae 74 07	ldx $0774			ldx 	gxCommandID
.aaea		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.aaec		d0 03		bne $aaf1			bne 	_RGI_Move 					; move
.aaee		4c 7f ab	jmp $ab7f			jmp		_RGI_SpriteInstructions
.aaf1						_RGI_Move:
.aaf1		88		dey				dey 								; unpick get.
.aaf2						_RGI_Move2:
.aaf2		20 a5 ab	jsr $aba5			jsr 	GCGetCoordinatePair 		; move to here
.aaf5		20 cc ab	jsr $abcc			jsr 	GCCopyPairToStore 			; save
.aaf8		5a		phy				phy
.aaf9		20 c2 ab	jsr $abc2			jsr 	GCLoadAXY 					; load in
.aafc		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.aafe		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ab01		7a		ply				ply
.ab02		80 b4		bra $aab8			bra 	_RGICommandLoop 			; and go round
.ab04						_RGI_Exit:
.ab04		88		dey				dey 								; unpick : / EOL
.ab05		60		rts				rts
.ab06						_RGI_Solid:
.ab06		a9 02		lda #$02			lda 	#2
.ab08		8d 75 07	sta $0775			sta 	gxFillSolid
.ab0b		80 ab		bra $aab8			bra 	_RGICommandLoop
.ab0d						_RGI_Frame:
.ab0d		9c 75 07	stz $0775			stz 	gxFillSolid
.ab10		80 a6		bra $aab8			bra 	_RGICommandLoop
.ab12						_RGI_To:
.ab12		20 a5 ab	jsr $aba5			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.ab15		20 cc ab	jsr $abcc			jsr 	GCCopyPairToStore
.ab18						_RGI_Here:
.ab18		5a		phy				phy
.ab19		20 c2 ab	jsr $abc2			jsr 	GCLoadAXY 					; load it into AXY
.ab1c		20 7c ab	jsr $ab7c			jsr 	_RGICallHandler 			; go do whatever it is.
.ab1f		7a		ply				ply
.ab20		80 96		bra $aab8			bra 	_RGICommandLoop 			; and go round
.ab22						_RGI_By:
.ab22		20 b2 ab	jsr $abb2			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.ab25		18		clc				clc
.ab26		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ab28		6d 76 07	adc $0776			adc 	gxXPos
.ab2b		8d 76 07	sta $0776			sta 	gxXPos
.ab2e		a5 61		lda $61				lda 	NSMantissa1+1
.ab30		6d 77 07	adc $0777			adc 	gxXPos+1
.ab33		8d 77 07	sta $0777			sta 	gxXPos+1
.ab36		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab38		18		clc				clc
.ab39		6d 78 07	adc $0778			adc 	gxYPos
.ab3c		8d 78 07	sta $0778			sta 	gxYPos
.ab3f		80 d7		bra $ab18			bra 	_RGI_Here
.ab41						_RGI_Dim:
.ab41		a2 01		ldx #$01			ldx	 	#1
.ab43		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.ab46		a5 59		lda $59				lda 	NSMantissa0+1
.ab48		c9 00		cmp #$00			cmp 	#0
.ab4a		f0 2d		beq $ab79			beq 	_RGIRange
.ab4c		c9 09		cmp #$09			cmp 	#8+1
.ab4e		b0 29		bcs $ab79			bcs		_RGIRange
.ab50		3a		dec a				dec 	a
.ab51		8d 7b 07	sta $077b			sta 	gxDrawScale
.ab54		4c b8 aa	jmp $aab8			jmp 	_RGICommandLoop
.ab57						_RGI_Colour:
.ab57		a2 01		ldx #$01			ldx 	#1 							; colour
.ab59		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.ab5c		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ab5e		20 de a6	jsr $a6de			jsr 	NSMSetZero
.ab61		b1 30		lda ($30),y			lda 	(codePtr),y
.ab63		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ab65		d0 04		bne $ab6b			bne 	_RGICDefaultMode
.ab67		c8		iny				iny
.ab68		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.ab6b						_RGICDefaultMode:
.ab6b		5a		phy				phy
.ab6c		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.ab6e		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab70		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab72		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ab75		7a		ply				ply
.ab76		4c b8 aa	jmp $aab8			jmp 	_RGICommandLoop 			; and go round
.ab79						_RGIRange:
.ab79		4c 61 a8	jmp $a861			jmp 	RangeError
.ab7c						_RGICallHandler:
.ab7c		6c 79 07	jmp ($0779)			jmp 	(gxHandler)
.ab7f						_RGI_SpriteInstructions:
.ab7f		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab81		f0 07		beq $ab8a			beq 	_RGISpriteOff
.ab83		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.ab85		f0 13		beq $ab9a			beq 	_RGISetImage
.ab87		4c f1 aa	jmp $aaf1			jmp 	_RGI_Move
.ab8a						_RGISpriteOff:
.ab8a		5a		phy				phy
.ab8b		a0 01		ldy #$01			ldy 	#1
.ab8d		a2 00		ldx #$00			ldx 	#0
.ab8f						_RGIDoCommandLoop:
.ab8f		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ab91		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ab94		7a		ply				ply
.ab95		b0 e2		bcs $ab79			bcs 	_RGIRange
.ab97		4c b8 aa	jmp $aab8			jmp 	_RGICommandLoop
.ab9a						_RGISetImage:
.ab9a		a2 01		ldx #$01			ldx 	#1
.ab9c		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger
.ab9f		5a		phy				phy
.aba0		aa		tax				tax
.aba1		a0 00		ldy #$00			ldy 	#0
.aba3		80 ea		bra $ab8f			bra 	_RGIDoCommandLoop
.aba5						GCGetCoordinatePair:
.aba5		a2 01		ldx #$01			ldx 	#1
.aba7		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.abaa		20 60 96	jsr $9660			jsr 	CheckComma
.abad		e8		inx				inx
.abae		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.abb1		60		rts				rts
.abb2						GCSignedCoordinatePair:
.abb2		a2 01		ldx #$01			ldx 	#1
.abb4		20 68 a6	jsr $a668			jsr 	Evaluate16BitIntegerSigned
.abb7		20 60 96	jsr $9660			jsr 	CheckComma
.abba		e8		inx				inx
.abbb		20 68 a6	jsr $a668			jsr 	Evaluate16BitIntegerSigned
.abbe		60		rts				rts
.abbf						_GCCPRange:
.abbf		4c 61 a8	jmp $a861			jmp 	RangeError
.abc2						GCLoadAXY:
.abc2		ad 77 07	lda $0777			lda 	gxXPos+1
.abc5		ae 76 07	ldx $0776			ldx 	gxXPos
.abc8		ac 78 07	ldy $0778			ldy 	gxYPos
.abcb		60		rts				rts
.abcc						GCCopyPairToStore:
.abcc		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.abce		8d 76 07	sta $0776			sta 	gxXPos
.abd1		a5 61		lda $61				lda 	NSMantissa1+1
.abd3		8d 77 07	sta $0777			sta 	gxXPos+1
.abd6		a5 5a		lda $5a				lda 	NSMantissa0+2
.abd8		8d 78 07	sta $0778			sta 	gxYPos
.abdb		60		rts				rts
.0774						gxCommandID:
>0774								.fill 	1
.0775						gxFillSolid:
>0775								.fill 	1
.0776						gxXPos:
>0776								.fill 	2
.0778						gxYPos:
>0778								.fill 	1
.0779						gxHandler:
>0779								.fill 	2
.077b						gxDrawScale:
>077b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.abdc						BitmapCtrl:
.abdc		b1 30		lda ($30),y			lda 	(codePtr),y
.abde		c8		iny				iny
.abdf		a2 01		ldx #$01			ldx 	#1
.abe1		c9 cb		cmp #$cb			cmp 	#KWD_ON
.abe3		f0 11		beq $abf6			beq 	BitmapSwitch
.abe5		ca		dex				dex
.abe6		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.abe8		f0 0c		beq $abf6			beq 	BitmapSwitch
.abea		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get the colour
.abed		5a		phy				phy
.abee		aa		tax				tax
.abef		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.abf1		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.abf4		7a		ply				ply
.abf5		60		rts				rts
.abf6						BitmapSwitch:
.abf6		5a		phy				phy
.abf7		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.abf9		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.abfb		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.abfe		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.ac00		a0 00		ldy #$00			ldy 	#0
.ac02		a2 ff		ldx #$ff			ldx 	#$FF
.ac04		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac07		9c 75 07	stz $0775			stz 	gxFillSolid
.ac0a		9c 76 07	stz $0776			stz 	gxXPos
.ac0d		9c 77 07	stz $0777			stz 	gxXPos+1
.ac10		9c 78 07	stz $0778			stz 	gxYPos
.ac13		9c 7b 07	stz $077b			stz 	gxDrawScale
.ac16		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.ac18		a2 00		ldx #$00			ldx 	#0
.ac1a		a0 00		ldy #$00			ldy 	#0
.ac1c		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac1f		7a		ply				ply
.ac20		60		rts				rts
.ac21						SpritesCtrl:
.ac21		b1 30		lda ($30),y			lda 	(codePtr),y
.ac23		c8		iny				iny
.ac24		a2 01		ldx #$01			ldx 	#1
.ac26		c9 cb		cmp #$cb			cmp 	#KWD_ON
.ac28		f0 08		beq $ac32			beq 	SpriteSwitch
.ac2a		ca		dex				dex
.ac2b		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ac2d		f0 03		beq $ac32			beq 	SpriteSwitch
.ac2f		4c 5c a8	jmp $a85c			jmp 	SyntaxError
.ac32						SpriteSwitch:
.ac32		5a		phy				phy
.ac33		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.ac35		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.ac37		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac3a		7a		ply				ply
.ac3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.ac3c						GfxCommand:
.ac3c		a2 00		ldx #$00			ldx 	#0
.ac3e		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; command
.ac41		20 60 96	jsr $9660			jsr 	CheckComma
.ac44		e8		inx				inx
.ac45		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; X
.ac48		20 60 96	jsr $9660			jsr 	CheckComma
.ac4b		e8		inx				inx
.ac4c		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; Y
.ac4f		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.ac51		4a		lsr a				lsr 	a
.ac52		d0 12		bne $ac66			bne 	_GfxError
.ac54		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.ac56		b0 0e		bcs $ac66			bcs 	_GfxError 					; bit 7 should have been zero
.ac58		5a		phy				phy 								; save pos
.ac59		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.ac5b		a6 59		ldx $59				ldx 	NSMantissa0+1
.ac5d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ac5f		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac62		b0 02		bcs $ac66			bcs 	_GfxError
.ac64		7a		ply				ply 								; restore pos and exit.
.ac65		60		rts				rts
.ac66						_GfxError:
.ac66		4c 61 a8	jmp $a861			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.ac69						UnaryHit:
.ac69		fa		plx				plx
.ac6a		a9 36		lda #$36			lda 	#zTemp0
.ac6c		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get sprite number 0
.ac6f		20 60 96	jsr $9660			jsr 	CheckComma
.ac72		e8		inx				inx
.ac73		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ac76		20 58 96	jsr $9658			jsr		CheckRightBracket
.ac79		ca		dex				dex 								; fix back up again.
.ac7a		da		phx				phx 								; save X/Y
.ac7b		5a		phy				phy
.ac7c		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ac7e		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac80		aa		tax				tax
.ac81		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ac83		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; calculate result
.ac86		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ac87		7a		ply				ply 								; restore XY
.ac88		fa		plx				plx
.ac89		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte 					; return the hit result
.ac8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.ac8d						PaletteCommand:
.ac8d		a2 00		ldx #$00			ldx 	#0
.ac8f		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; colour
.ac92		20 60 96	jsr $9660			jsr 	CheckComma
.ac95		e8		inx				inx
.ac96		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; r
.ac99		20 60 96	jsr $9660			jsr 	CheckComma
.ac9c		e8		inx				inx
.ac9d		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; g
.aca0		20 60 96	jsr $9660			jsr 	CheckComma
.aca3		e8		inx				inx
.aca4		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; b
.aca7		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aca9		85 36		sta $36				sta 	zTemp0
.acab		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.acad		85 37		sta $37				sta 	zTemp0+1
.acaf		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.acb1		26 37		rol $37				rol	 	zTemp0+1
.acb3		06 36		asl $36				asl 	zTemp0
.acb5		26 37		rol $37				rol	 	zTemp0+1
.acb7		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.acb9		85 01		sta $01				sta 	1
.acbb		5a		phy				phy
.acbc		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.acbe		92 36		sta ($36)			sta 	(zTemp0)
.acc0		a0 01		ldy #$01			ldy 	#1
.acc2		a5 5a		lda $5a				lda 	NSMantissa0+2
.acc4		91 36		sta ($36),y			sta 	(zTemp0),y
.acc6		a5 59		lda $59				lda 	NSMantissa0+1
.acc8		c8		iny				iny
.acc9		91 36		sta ($36),y			sta 	(zTemp0),y
.accb		7a		ply				ply
.accc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.accd						XLoadCommand:
.accd		20 dd 8f	jsr $8fdd			jsr 	NewProgram
.acd0		20 fa 84	jsr $84fa			jsr 	BackloadProgram
.acd3		4c b9 85	jmp $85b9			jmp 	WarmStart
.acd6						XGoCommand:
.acd6		20 dd 8f	jsr $8fdd			jsr 	NewProgram
.acd9		20 fa 84	jsr $84fa			jsr 	BackloadProgram
.acdc		4c 68 91	jmp $9168			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.acdf						UnaryEvent:
.acdf		fa		plx				plx
.ace0		20 79 ad	jsr $ad79			jsr 	TimerToStackX 				; timer in +0
.ace3		e8		inx				inx  								; put reference into +1
.ace4		20 bf 9f	jsr $9fbf			jsr 	EvaluateTerm
.ace7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.ace9		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.aceb		d0 4c		bne $ad39			bne 	_UEType
.aced		e8		inx				inx 								; put the step in +2
.acee		20 60 96	jsr $9660			jsr 	CheckComma
.acf1		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger
.acf4		20 58 96	jsr $9658			jsr 	CheckRightBracket
.acf7		ca		dex				dex
.acf8		ca		dex				dex
.acf9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.acfb		85 36		sta $36				sta 	zTemp0
.acfd		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.acff		85 37		sta $37				sta 	zTemp0+1
.ad01		5a		phy				phy
.ad02		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ad04		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad06		30 2d		bmi $ad35			bmi 	_UEFalse 					; exit if signed.
.ad08		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ad0a		b5 58		lda $58,x			lda 	NSMantissa0,x
.ad0c		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ad0e		c8		iny				iny
.ad0f		b5 60		lda $60,x			lda 	NSMantissa1,x
.ad11		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ad13		c8		iny				iny
.ad14		b5 68		lda $68,x			lda 	NSMantissa2,x
.ad16		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ad18		90 1b		bcc $ad35			bcc 	_UEFalse 					; no, return FALSE.
.ad1a		18		clc				clc
.ad1b		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ad1d		b5 58		lda $58,x			lda 	NSMantissa0,x
.ad1f		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ad21		91 36		sta ($36),y			sta 	(zTemp0),y
.ad23		c8		iny				iny
.ad24		b5 60		lda $60,x			lda 	NSMantissa1,x
.ad26		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ad28		91 36		sta ($36),y			sta 	(zTemp0),y
.ad2a		c8		iny				iny
.ad2b		b5 68		lda $68,x			lda 	NSMantissa2,x
.ad2d		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ad2f		91 36		sta ($36),y			sta 	(zTemp0),y
.ad31		7a		ply				ply
.ad32		4c de 96	jmp $96de			jmp 	ReturnTrue
.ad35						_UEFalse:
.ad35		7a		ply				ply 								; restore Y
.ad36		4c e9 96	jmp $96e9			jmp 	ReturnFalse 				; and return False
.ad39						_UEType:
.ad39		4c 66 a8	jmp $a866			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.ad3c						UnaryJoyX:
.ad3c		18		clc				clc
.ad3d		80 01		bra $ad40			bra 	JoyMain
.ad3f						UnaryJoyY:
.ad3f		38		sec				sec
.ad40						JoyMain:
.ad40		fa		plx				plx 								; get pos
.ad41		08		php				php 								; save carry (set for Y)
.ad42		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad45		20 58 96	jsr $9658			jsr 	CheckRightBracket
.ad48		20 7f 82	jsr $827f			jsr 	EXTReadController 			; read the controller.
.ad4b		28		plp				plp
.ad4c		b0 02		bcs $ad50			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.ad4e		4a		lsr a				lsr 	a
.ad4f		4a		lsr a				lsr 	a
.ad50						_JMNoShift:
.ad50		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ad51		b0 07		bcs $ad5a			bcs 	JMIsLeft
.ad53		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ad54		b0 07		bcs $ad5d			bcs 	JMIsRight
.ad56		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; zero result
.ad59		60		rts				rts
.ad5a						JMIsLeft:
.ad5a		4c de 96	jmp $96de			jmp 	ReturnTrue
.ad5d						JMIsRight:
.ad5d		a9 01		lda #$01			lda 	#1
.ad5f		20 e0 a6	jsr $a6e0			jsr 	NSMSetByte
.ad62		60		rts				rts
.ad63						UnaryJoyB:
.ad63		fa		plx				plx 								; get pos
.ad64		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad67		20 58 96	jsr $9658			jsr 	CheckRightBracket
.ad6a		20 7f 82	jsr $827f			jsr 	EXTReadController 			; read the controller.
.ad6d		29 10		and #$10			and 	#$10
.ad6f		d0 e9		bne $ad5a			bne 	JMIsLeft
.ad71		20 de a6	jsr $a6de			jsr 	NSMSetZero
.ad74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ad75						UnaryTimer:
.ad75		fa		plx				plx
.ad76		20 58 96	jsr $9658			jsr 	CheckRightBracket
.ad79						TimerToStackX:
.ad79		20 de a6	jsr $a6de			jsr 	NSMSetZero 					; zero result
.ad7c		64 01		stz $01				stz 	1 							; access I/O
.ad7e		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ad81		95 58		sta $58,x			sta 	NSMantissa0,x
.ad83		ad 5a d6	lda $d65a			lda 	$D65A
.ad86		95 60		sta $60,x			sta 	NSMantissa1,x
.ad88		ad 5b d6	lda $d65b			lda 	$D65B
.ad8b		95 68		sta $68,x			sta 	NSMantissa2,x
.ad8d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ad8e						MemoryDeleteLine:
.ad8e		20 ad ad	jsr $adad			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad91		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad93		a8		tay				tay
.ad94						_MDDLLoop:
.ad94		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad96		92 30		sta ($30)			sta 	(codePtr)
.ad98		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad9a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ad9c		d0 07		bne $ada5			bne 	_MDLDLNext
.ad9e		a5 31		lda $31				lda 	codePtr+1
.ada0		c5 3b		cmp $3b				cmp 	zTemp2+1
.ada2		d0 01		bne $ada5			bne 	_MDLDLNext
.ada4						_MDDLExit:
.ada4		60		rts				rts
.ada5						_MDLDLNext:
.ada5		e6 30		inc $30				inc 	codePtr						; next byte
.ada7		d0 eb		bne $ad94			bne 	_MDDLLoop
.ada9		e6 31		inc $31				inc 	codePtr+1
.adab		80 e7		bra $ad94			bra 	_MDDLLoop
.adad						IMemoryFindEnd:
.adad		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adaf		85 3a		sta $3a				sta 	0+zTemp2
.adb1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adb3		85 3b		sta $3b				sta 	1+zTemp2
.adb5						_MDLFELoop:
.adb5		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.adb7		f0 0b		beq $adc4			beq 	_MDLFEExit
.adb9		18		clc				clc
.adba		65 3a		adc $3a				adc 	zTemp2
.adbc		85 3a		sta $3a				sta 	zTemp2
.adbe		90 f5		bcc $adb5			bcc 	_MDLFELoop
.adc0		e6 3b		inc $3b				inc 	zTemp2+1
.adc2		80 f1		bra $adb5			bra 	_MDLFELoop
.adc4						_MDLFEExit:
.adc4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.adc5						MemoryInsertLine:
.adc5		08		php				php
.adc6		20 ad ad	jsr $adad			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.adc9		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.adcb		1a		inc a				inc 	a
.adcc		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.adce		b0 36		bcs $ae06			bcs 	_MDLIError 					; no, fail.
.add0		28		plp				plp 								; do at a specific point or the end ?
.add1		90 08		bcc $addb			bcc 	_MDLIFound 					; if specific point already set.
.add3		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.add5		85 30		sta $30				sta 	codePtr 					; end.
.add7		a5 3b		lda $3b				lda 	zTemp2+1
.add9		85 31		sta $31				sta 	codePtr+1
.addb						_MDLIFound:
.addb		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.adde		a8		tay				tay
.addf						_MDLIInsert:
.addf		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ade1		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ade3		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ade5		c5 3a		cmp $3a				cmp 	zTemp2
.ade7		d0 06		bne $adef			bne 	_MDLINext
.ade9		a5 31		lda $31				lda 	codePtr+1
.adeb		c5 3b		cmp $3b				cmp 	zTemp2+1
.aded		f0 0a		beq $adf9			beq 	_MDLIHaveSpace
.adef						_MDLINext:
.adef		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.adf1		d0 02		bne $adf5			bne 	_MDLINoBorrow
.adf3		c6 3b		dec $3b				dec 	zTemp2+1
.adf5						_MDLINoBorrow:
.adf5		c6 3a		dec $3a				dec 	zTemp2
.adf7		80 e6		bra $addf			bra 	_MDLIInsert
.adf9						_MDLIHaveSpace:
.adf9		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.adfc		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.adfd						_MDLICopy:
.adfd		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ae00		91 30		sta ($30),y			sta 	(codePtr),y
.ae02		88		dey				dey
.ae03		10 f8		bpl $adfd			bpl 	_MDLICopy
.ae05		60		rts				rts
.ae06						_MDLIError:
.ae06		a9 06		lda #$06		lda	#6
.ae08		4c 71 96	jmp $9671		jmp	ErrorHandler
.ae0b						MDLAppendLine:
.ae0b		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae0d		85 36		sta $36				sta 	zTemp0
.ae0f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae11		85 38		sta $38				sta 	0+zTemp1
.ae13		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae15		85 39		sta $39				sta 	1+zTemp1
.ae17		b2 38		lda ($38)			lda 	(zTemp1)
.ae19		d0 0a		bne $ae25			bne 	_MDLANoInitialise
.ae1b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae1d		8d 7c 07	sta $077c			sta 	0+AppendPointer
.ae20		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae22		8d 7d 07	sta $077d			sta 	1+AppendPointer
.ae25						_MDLANoInitialise:
.ae25		18		clc				clc
.ae26		ad 7c 07	lda $077c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae29		85 38		sta $38				sta 	zTemp1
.ae2b		72 36		adc ($36)			adc 	(zTemp0)
.ae2d		8d 7c 07	sta $077c			sta 	AppendPointer
.ae30		ad 7d 07	lda $077d			lda 	AppendPointer+1
.ae33		85 39		sta $39				sta 	zTemp1+1
.ae35		69 00		adc #$00			adc 	#0
.ae37		8d 7d 07	sta $077d			sta 	AppendPointer+1
.ae3a		a0 00		ldy #$00			ldy 	#0
.ae3c						_MDLACopy:
.ae3c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae3e		91 38		sta ($38),y			sta 	(zTemp1),y
.ae40		c8		iny				iny
.ae41		98		tya				tya
.ae42		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae44		d0 f6		bne $ae3c			bne 	_MDLACopy
.ae46		a9 00		lda #$00			lda 	#0 							; end of program.
.ae48		91 38		sta ($38),y			sta 	(zTemp1),y
.ae4a		60		rts				rts
.077c						AppendPointer:
>077c								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ae4b						MemoryNew:
.ae4b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae4d		85 30		sta $30				sta 	codePtr
.ae4f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae51		85 31		sta $31				sta 	codePtr+1
.ae53		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ae55		92 30		sta ($30)			sta 	(codePtr)
.ae57		60		rts				rts
.ae58						MemoryInline:
.ae58		98		tya				tya 								; put address into stack,x
.ae59		18		clc				clc  								; get the offset, add codePtr
.ae5a		65 30		adc $30				adc 	codePtr
.ae5c		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ae5e		a5 31		lda $31				lda 	codePtr+1
.ae60		69 00		adc #$00			adc 	#0
.ae62		95 60		sta $60,x			sta 	NSMantissa1,x
.ae64		74 68		stz $68,x			stz 	NSMantissa2,x
.ae66		74 70		stz $70,x			stz 	NSMantissa3,x
.ae68		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ae69						MemorySearch:
.ae69		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ae6b		86 37		stx $37				stx 	zTemp0+1
.ae6d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae6f		85 30		sta $30				sta 	codePtr
.ae71		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae73		85 31		sta $31				sta 	codePtr+1
.ae75						_MTAXLoop:
.ae75		b2 30		lda ($30)			lda 	(codePtr)
.ae77		18		clc				clc
.ae78		f0 21		beq $ae9b			beq 	_MTAXExit 					; reached end, exit with CC.
.ae7a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ae7c		b1 30		lda ($30),y			lda 	(codePtr),y
.ae7e		38		sec				sec
.ae7f		e5 36		sbc $36				sbc 	zTemp0
.ae81		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ae83		c8		iny				iny 								; do the MSB
.ae84		b1 30		lda ($30),y			lda 	(codePtr),y
.ae86		e5 37		sbc $37				sbc 	zTemp0+1
.ae88		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ae8a		f0 0f		beq $ae9b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ae8c		b0 0d		bcs $ae9b			bcs 	_MTAXExit 					; current < required exit
.ae8e		18		clc				clc
.ae8f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae91		65 30		adc $30				adc 	codePtr
.ae93		85 30		sta $30				sta 	codePtr
.ae95		90 02		bcc $ae99			bcc 	_CREExit
.ae97		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae99						_CREExit:
.ae99		80 da		bra $ae75			bra 	_MTAXLoop
.ae9b						_MTAXExit:
.ae9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ae9c						UpdateFont:
.ae9c		a5 01		lda $01				lda 	1 							; save position
.ae9e		48		pha				pha
.ae9f		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.aea1		85 01		sta $01				sta 	1
.aea3		a9 ca		lda #$ca			lda 	#((FontBinary) & $FF)
.aea5		85 36		sta $36				sta 	0+zTemp0
.aea7		a9 ae		lda #$ae			lda 	#((FontBinary) >> 8)
.aea9		85 37		sta $37				sta 	1+zTemp0
.aeab		a9 00		lda #$00			lda 	#(($C000) & $FF)
.aead		85 38		sta $38				sta 	0+zTemp1
.aeaf		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.aeb1		85 39		sta $39				sta 	1+zTemp1
.aeb3						_UFCopy1:
.aeb3		a0 00		ldy #$00			ldy 	#0
.aeb5						_UFCopy2:
.aeb5		b1 36		lda ($36),y			lda 	(zTemp0),y
.aeb7		91 38		sta ($38),y			sta 	(zTemp1),y
.aeb9		c8		iny				iny
.aeba		d0 f9		bne $aeb5			bne 	_UFCopy2
.aebc		e6 37		inc $37				inc 	zTemp0+1
.aebe		e6 39		inc $39				inc 	zTemp1+1
.aec0		a5 39		lda $39				lda 	zTemp1+1
.aec2		c9 c8		cmp #$c8			cmp 	#$C8
.aec4		d0 ed		bne $aeb3			bne 	_UFCopy1
.aec6		68		pla				pla 								; restore.
.aec7		85 01		sta $01				sta 	1
.aec9		60		rts				rts
.aeca						FontBinary:
>aeca		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>aed2		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>aee2		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>aef2		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>af02		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>af12		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>af22		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>af32		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>af42		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>af52		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>af62		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>af72		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>af82		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>af92		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>afa2		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>afb2		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>afc2		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>afd2		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>afe2		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aff2		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>b002		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>b012		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>b022		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>b032		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>b042		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>b052		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>b062		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>b072		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>b082		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>b092		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>b0a2		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>b0b2		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>b0c2		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>b0d2		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>b0e2		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>b0f2		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>b102		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>b112		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>b122		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>b132		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b142		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b152		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b162		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b172		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b182		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b192		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b1a2		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b1b2		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b1c2		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b1d2		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b1e2		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b1f2		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b202		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b212		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b222		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b232		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b242		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b252		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b262		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b272		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b282		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b292		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b2a2		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b2b2		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b2c2		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b2d2		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b2e2		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b2f2		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b302		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b312		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b322		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b332		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b342		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b352		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b362		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b372		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b382		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b392		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b3a2		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b3b2		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b3c2		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b3d2		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b3e2		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b3f2		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b402		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b412		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b422		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b432		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b442		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b452		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b462		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b472		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b482		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b492		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b4a2		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b4b2		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b4c2		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b4d2		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b4e2		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b4f2		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b502		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b512		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b522		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b532		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b542		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b552		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b562		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b572		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b582		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b592		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b5a2		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b5b2		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b5c2		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b5d2		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b5e2		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b5f2		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b602		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b612		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b622		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b632		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b642		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b652		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b662		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b672		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b682		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b692		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b6a2		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b6b2		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b6c2		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b6ca						PingCommand:
.b6ca		5a		phy				phy 								; save pos
.b6cb		a9 01		lda #$01			lda 	#1 						; push channel.
.b6cd		48		pha				pha
.b6ce		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b6d0		a2 06		ldx #$06			ldx 	#6 						; length
.b6d2		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6d4		80 24		bra $b6fa			bra 	SoundEffectCommand
.b6d6						ZapCommand:
.b6d6		5a		phy				phy 								; save pos
.b6d7		a9 01		lda #$01			lda 	#1 						; push channel.
.b6d9		48		pha				pha
.b6da		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b6dc		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6de		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b6e0		80 18		bra $b6fa			bra 	SoundEffectCommand
.b6e2						ShootCommand:
.b6e2		5a		phy				phy 								; save pos
.b6e3		a9 03		lda #$03			lda 	#3 						; push channel.
.b6e5		48		pha				pha
.b6e6		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b6e8		a2 04		ldx #$04			ldx 	#4 						; length
.b6ea		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6ec		80 0c		bra $b6fa			bra 	SoundEffectCommand
.b6ee						Explode:
.b6ee		5a		phy				phy 								; save pos
.b6ef		a9 03		lda #$03			lda 	#3 						; push channel.
.b6f1		48		pha				pha
.b6f2		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b6f4		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6f6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6f8		80 00		bra $b6fa			bra 	SoundEffectCommand
.b6fa						SoundEffectCommand:
.b6fa		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b6fd		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b700		a9 0f		lda #$0f			lda 	#15
.b702		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b705		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b708		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b70b		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b70e		68		pla				pla
.b70f		09 10		ora #$10			ora 	#$10  						; execute command $11
.b711		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b713		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b715		20 7f 80	jsr $807f			jsr 	SNDCommand
.b718		7a		ply				ply
.b719		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b71a						UnaryPlaying:
.b71a		fa		plx				plx
.b71b		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; get channel #
.b71e		48		pha				pha
.b71f		20 58 96	jsr $9658			jsr		CheckRightBracket
.b722		68		pla				pla
.b723		c9 04		cmp #$04			cmp 	#4
.b725		b0 0c		bcs $b733			bcs 	_UPNotPlaying
.b727		09 20		ora #$20			ora 	#$20 						; query playing ?
.b729		20 7f 80	jsr $807f			jsr 	SNDCommand
.b72c		c9 00		cmp #$00			cmp 	#0
.b72e		f0 03		beq $b733			beq 	_UPNotPlaying
.b730		4c de 96	jmp $96de			jmp 	ReturnTrue
.b733						_UPNotPlaying:
.b733		4c e9 96	jmp $96e9			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b736						SoundCommand:
.b736		b1 30		lda ($30),y			lda 	(codePtr),y
.b738		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b73a		d0 09		bne $b745			bne 	_SNDMain
.b73c		c8		iny				iny 								; skip OFF
.b73d		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b73f		5a		phy				phy
.b740		20 7f 80	jsr $807f			jsr 	SNDCommand
.b743		7a		ply				ply
.b744		60		rts				rts
.b745						_SNDMain:
.b745		a2 00		ldx #$00			ldx 	#0
.b747		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; channel
.b74a		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b74c		b0 4b		bcs $b799			bcs 	_SndError
.b74e		e8		inx				inx 								; do the rest in slot 1.
.b74f		20 60 96	jsr $9660			jsr 	CheckComma
.b752		20 5e a6	jsr $a65e			jsr 	Evaluate16BitInteger 		; Pitch
.b755		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b757		c9 10		cmp #$10			cmp 	#16
.b759		b0 3e		bcs $b799			bcs 	_SndError
.b75b		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b75e		b5 58		lda $58,x			lda 	NSMantissa0,x
.b760		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b763		20 60 96	jsr $9660			jsr 	CheckComma
.b766		20 79 a6	jsr $a679			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b769		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b76c		a9 0f		lda #$0f			lda 	#15
.b76e		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b771		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b774		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b777		b1 30		lda ($30),y			lda 	(codePtr),y
.b779		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b77b		d0 0e		bne $b78b			bne 	_SNDPlay
.b77d		c8		iny				iny
.b77e		20 68 a6	jsr $a668			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b781		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b783		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b786		b5 60		lda $60,x			lda 	NSMantissa1,x
.b788		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b78b						_SNDPlay:
.b78b		5a		phy				phy
.b78c		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b78e		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b790		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b792		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b794		20 7f 80	jsr $807f			jsr 	SNDCommand
.b797		7a		ply				ply
.b798		60		rts				rts
.b799						_SndError:
.b799		4c 61 a8	jmp $a861			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b79c						StackPushByte:
.b79c		48		pha				pha 								; save byte on stack
.b79d		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b79f		d0 08		bne $b7a9			bne 	_SPBNoBorrow
.b7a1		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b7a3		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b7a5		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7a7		90 06		bcc $b7af			bcc 	_SPBMemory
.b7a9						_SPBNoBorrow:
.b7a9		c6 34		dec $34				dec 	basicStack
.b7ab		68		pla				pla 								; get back and write
.b7ac		92 34		sta ($34)			sta 	(basicStack)
.b7ae		60		rts				rts
.b7af						_SPBMemory:
.b7af		a9 12		lda #$12		lda	#18
.b7b1		4c 71 96	jmp $9671		jmp	ErrorHandler
.b7b4						StackPopByte:
.b7b4		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b7b6		e6 34		inc $34				inc 	basicStack
.b7b8		d0 02		bne $b7bc			bne 	_SPBNoCarry
.b7ba		e6 35		inc $35				inc 	basicStack+1
.b7bc						_SPBNoCarry:
.b7bc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b7bd						StackOpen:
.b7bd		48		pha				pha 								; save frame byte
.b7be		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b7c0		0a		asl a				asl 	a 							; claim twice this for storage
.b7c1		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b7c3		38		sec				sec 								; so basically subtracting from
.b7c4		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b7c6		85 34		sta $34				sta 	basicStack
.b7c8		b0 09		bcs $b7d3			bcs 	_SONoBorrow
>b7ca		db						.byte 	$DB 						; causes a break in the emulator
.b7cb		c6 35		dec $35				dec 	basicStack+1
.b7cd		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b7cf		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7d1		90 04		bcc $b7d7			bcc 	_SOMemory
.b7d3						_SONoBorrow:
.b7d3		68		pla				pla 								; get marker back and write at TOS
.b7d4		92 34		sta ($34)			sta 	(basicStack)
.b7d6		60		rts				rts
.b7d7						_SOMemory:
.b7d7		a9 12		lda #$12		lda	#18
.b7d9		4c 71 96	jmp $9671		jmp	ErrorHandler
.b7dc						StackClose:
.b7dc		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b7de		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b7e0		0a		asl a				asl 	a 							; claim twice this.
.b7e1		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b7e3		85 34		sta $34				sta 	basicStack
.b7e5		90 02		bcc $b7e9			bcc 	_SCExit
.b7e7		e6 35		inc $35				inc 	basicStack+1
.b7e9						_SCExit:
.b7e9		60		rts				rts
.b7ea						StackCheckFrame:
.b7ea		48		pha				pha
.b7eb						_StackRemoveLocals:
.b7eb		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b7ed		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b7ef		b0 05		bcs $b7f6			bcs 	_SCNoLocal
.b7f1		20 7c 8e	jsr $8e7c			jsr 	LocalPopValue 				; restore the local value
.b7f4		80 f5		bra $b7eb			bra 	_StackRemoveLocals 			; gr round again
.b7f6						_SCNoLocal:
.b7f6		68		pla				pla 								; get the frame check.
.b7f7		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b7f9		29 f0		and #$f0			and 	#$F0 						; check type bits
.b7fb		d0 01		bne $b7fe			bne 	_SCFError 					; different, we have structures mixed up
.b7fd		60		rts				rts
.b7fe						_SCFError:
.b7fe		8a		txa				txa 								; report error X
.b7ff		4c 71 96	jmp $9671			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b802						STKSaveCodePosition:
.b802		5a		phy				phy
.b803		98		tya				tya 								; save Y
.b804		a0 05		ldy #$05			ldy 	#5
.b806		91 34		sta ($34),y			sta 	(basicStack),y
.b808		88		dey				dey 								; save Code Pointer
.b809						_STKSaveLoop:
.b809		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b80c		91 34		sta ($34),y			sta 	(basicStack),y
.b80e		88		dey				dey
.b80f		d0 f8		bne $b809			bne 	_STKSaveLoop
.b811		7a		ply				ply
.b812		60		rts				rts
.b813						STKLoadCodePosition:
.b813		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b815						_STKLoadLoop:
.b815		b1 34		lda ($34),y			lda 	(basicStack),y
.b817		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b81a		c8		iny				iny
.b81b		c0 05		cpy #$05			cpy 	#5
.b81d		d0 f6		bne $b815			bne 	_STKLoadLoop
.b81f		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b821		a8		tay				tay
.b822		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b823						StackReset:
.b823		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b825		85 34		sta $34				sta 	0+basicStack
.b827		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b829		85 35		sta $35				sta 	1+basicStack
.b82b		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b82d		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b82f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b830						StringConcrete:
.b830		5a		phy				phy 								; save position on stack
.b831		20 ab a1	jsr $a1ab			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b834		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b836		85 38		sta $38				sta 	zTemp1
.b838		b5 60		lda $60,x			lda 	NSMantissa1,x
.b83a		85 39		sta $39				sta 	zTemp1+1
.b83c		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b83e						_SALength:
.b83e		c8		iny				iny
.b83f		b1 38		lda ($38),y			lda 	(zTemp1),y
.b841		d0 fb		bne $b83e			bne 	_SALength
.b843		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b845		b0 3d		bcs $b884			bcs 	_SALengthError
.b847		98		tya				tya 				 				; length of the new string
.b848		18		clc				clc
.b849		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b84b		90 02		bcc $b84f			bcc 	_SAHaveLength
.b84d		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b84f						_SAHaveLength:
.b84f		48		pha				pha 								; save length.
.b850		38		sec				sec
.b851		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b853		6d 0a 04	adc $040a			adc 	stringMemory
.b856		8d 0a 04	sta $040a			sta 	stringMemory
.b859		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b85b		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b85d		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b85f		6d 0b 04	adc $040b			adc 	stringMemory+1
.b862		8d 0b 04	sta $040b			sta 	stringMemory+1
.b865		85 3b		sta $3b				sta 	zTemp2+1
.b867		95 60		sta $60,x			sta 	NSMantissa1,x
.b869		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b86a		38		sec				sec
.b86b		e9 03		sbc #$03			sbc 	#3
.b86d		92 3a		sta ($3a)			sta 	(zTemp2)
.b86f		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b871		a0 01		ldy #$01			ldy 	#1
.b873		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b875						_SACopyNewString:
.b875		a0 00		ldy #$00			ldy 	#0
.b877						_SACopyNSLoop:
.b877		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b879		c8		iny				iny 								; write two on in string storage
.b87a		c8		iny				iny
.b87b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b87d		88		dey				dey 								; this makes it one one.
.b87e		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b880		d0 f5		bne $b877			bne 	_SACopyNSLoop
.b882		7a		ply				ply
.b883		60		rts				rts
.b884						_SALengthError:
.b884		a9 09		lda #$09		lda	#9
.b886		4c 71 96	jmp $9671		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b889						StringSystemInitialise:
.b889		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b88b		8d 0a 04	sta $040a			sta 	0+stringMemory
.b88e		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b890		8d 0b 04	sta $040b			sta 	1+stringMemory
.b893		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b896		60		rts				rts
.b897						StringSpaceInitialise:
.b897		20 ab a1	jsr $a1ab			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b89a		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b89c		8d 0c 04	sta $040c			sta 	stringInitialised
.b89f		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b8a2		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b8a5		ad 0b 04	lda $040b			lda 	stringMemory+1
.b8a8		3a		dec a				dec 	a
.b8a9		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8ac		60		rts				rts
.b8ad						StringTempAllocate:
.b8ad		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8af		b0 30		bcs $b8e1			bcs 	_STALength
.b8b1		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b8b4		30 05		bmi $b8bb			bmi 	_STAAllocate
.b8b6		48		pha				pha 								; save value to subtract.
.b8b7		20 97 b8	jsr $b897			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8ba		68		pla				pla 								; restore it
.b8bb						_STAAllocate:
.b8bb		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8bd		18		clc				clc  								; deliberate allows one more
.b8be		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b8c1		8d 0d 04	sta $040d			sta 	stringTempPointer
.b8c4		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b8c6		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8c8		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b8cb		69 ff		adc #$ff			adc 	#$FF
.b8cd		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8d0		85 3d		sta $3d				sta 	zsTemp+1
.b8d2		95 60		sta $60,x			sta 	NSMantissa1,x
.b8d4		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b8d6		74 70		stz $70,x			stz 	NSMantissa3,x
.b8d8		a9 10		lda #$10			lda 	#NSTString
.b8da		95 50		sta $50,x			sta 	NSStatus,x
.b8dc		a9 00		lda #$00			lda 	#0 							; clear the target string
.b8de		92 3c		sta ($3c)			sta 	(zsTemp)
.b8e0		60		rts				rts
.b8e1						_STALength:
.b8e1		a9 09		lda #$09		lda	#9
.b8e3		4c 71 96	jmp $9671		jmp	ErrorHandler
.b8e6						StringTempWrite:
.b8e6		48		pha				pha
.b8e7		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b8e9		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b8eb		d0 02		bne $b8ef			bne 	_STWNoCarry
.b8ed		e6 3d		inc $3d				inc 	zsTemp+1
.b8ef						_STWNoCarry:
.b8ef		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b8f1		92 3c		sta ($3c)			sta 	(zsTemp)
.b8f3		68		pla				pla
.b8f4		60		rts				rts

;******  Return to file: _basic.asm

.b8f5						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 73 07	cmp $0773			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 18 bc	jsr $bc18			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 69 82	jsr $8269			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 86 07	sta $0786			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 84 07	lda $0784			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c800	a800	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8b 07	sta $078b			sta 	gxCurrentY
.c80a	a80a	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 89 07	sta $0789			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9d 07	cmp $079d			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c83c	a83c	9d 91 07	sta $0791,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2d 08	stz $082d			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c898	a898	8d 2b 08	sta $082b			sta 	gxYCentre
.c89b	a89b	8e 2a 08	stx $082a			stx 	gxxCentre
.c89e	a89e	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2d 08	sta $082d			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2b 08	lda $082b			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2a 08	lda $082a			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8df	a8df	8d 2b 08	sta $082b			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8f6	a8f6	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2a 08	lda $082a			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c918	a918	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2a 08	lda $082a			lda 	gxxCentre
.c91f	a91f	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2d 08	dec $082d			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 97 07	lda $0797			lda 	gxY1
.c958	a958	ed 93 07	sbc $0793			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 29 08	sta $0829			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2a 08	stz $082a			stz 	gxxCentre
.c96c	a96c	ad 29 08	lda $0829			lda 	gxRadius
.c96f	a96f	8d 2b 08	sta $082b			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 95 07	lda $0795,x			lda 	gxX1,x
.c987	a987	7d 91 07	adc $0791,x			adc 	gxX0,x
.c98a	a98a	9d 95 07	sta $0795,x			sta 	gxX1,x
.c98d	a98d	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c990	a990	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c997	a997	7e 95 07	ror $0795,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9d 07	lda $079d			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9b 07	adc $079b			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9f4	a9f4	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9b 07	sta $079b			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9d 07	stx $079d			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a1 07	and $07a1			and 	gxANDValue
.cac1	aac1	4d a0 07	eor $07a0			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 95 07	eor $0795			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 92 07	lda $0792			lda 	gxX0+1
.cae7	aae7	4d 96 07	eor $0796			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 97 07	lda $0797			lda 	gxY1
.caee	aaee	4d 93 07	eor $0793			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 32 08	lda $0832			lda 	gxPosition
.caf6	aaf6	6d 33 08	adc $0833			adc 	gxAdjust
.caf9	aaf9	8d 32 08	sta $0832			sta 	gxPosition
.cafc	aafc	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 34 08	sbc $0834			sbc 	gxTotal
.cb0d	ab0d	8d 32 08	sta $0832			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 35 08	lda $0835			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 35 08	lda $0835			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 31 08	lda $0831			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 91 07	lda $0791			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 92 07	dec $0792			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 91 07	dec $0791			dec 	gxX0
.cb3e	ab3e	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a3 07	lda $07a3			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 91 07	inc $0791			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 92 07	inc $0792			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 93 07	inc $0793			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 97 07	lda $0797			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 93 07	sbc $0793			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2f 08	sta $082f			sta 	gxDiffY
.cb86	ab86	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 95 07	lda $0795			lda 	gxX1
.cb8d	ab8d	ed 91 07	sbc $0791			sbc 	gxX0
.cb90	ab90	8d 2e 08	sta $082e			sta 	gxDiffX
.cb93	ab93	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2e 08	ror $082e			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cba6	aba6	8d 2e 08	sta $082e			sta 	gxDiffX
.cba9	aba9	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 33 08	sta $0833			sta 	gxAdjust
.cbb5	abb5	ad 2e 08	lda $082e			lda 	gxDiffX
.cbb8	abb8	8d 34 08	sta $0834			sta 	gxTotal
.cbbb	abbb	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 33 08	sta $0833			sta 	gxAdjust
.cbcc	abcc	ad 2f 08	lda $082f			lda 	gxDiffY
.cbcf	abcf	8d 34 08	sta $0834			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 34 08	lda $0834			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 32 08	sta $0832			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9f 07	ldx $079f			ldx 	gxColour
.cbec	abec	8e a0 07	stx $07a0			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a1 07	stx $07a1			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a0 07	stz $07a0			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a1 07	lda $07a1			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a1 07	sta $07a1			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a3 07	ldy $07a3			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a1 07	and $07a1			and 	gxANDValue
.cc16	ac16	4d a0 07	eor $07a0			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 97 07	cmp $0797			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc48	ac48	cd 97 07	cmp $0797			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 95 07	lda $0795			lda		gxX1
.cc65	ac65	ed 91 07	sbc $0791			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 96 07	lda $0796			lda 	gxX1+1
.cc6d	ac6d	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a3 07	lda $07a3			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a1 07	and $07a1			and 	gxANDValue
.cc8a	ac8a	4d a0 07	eor $07a0			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a1 07	and $07a1			and 	gxANDValue
.cca8	aca8	4d a0 07	eor $07a0			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a1 07	and $07a1			and 	gxANDValue
.ccc0	acc0	4d a0 07	eor $07a0			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a3 07	sta $07a3			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 36 08	sta $0836			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.cce7	ace7	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3a 08	sta $083a			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 37 08	lda $0837			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.cd20	ad20	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 36 08	cmp $0836			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 93 07	sta $0793			sta 	gxY0
.cd39	ad39	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 36 08	lda $0836			lda 	gxSize
.cd40	ad40	6d 91 07	adc $0791			adc 	gxX0
.cd43	ad43	8d 91 07	sta $0791			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 92 07	inc $0792			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 37 08	lda $0837			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a1 07	and $07a1			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 36 08	cmp $0836			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 93 07	inc $0793			inc 	gxY0
.cda1	ada1	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9e 07	eor $079e			eor 	gxMode
.cda7	ada7	8d 3b 08	sta $083b			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9f 07	lda $079f			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9e 07	eor $079e			eor 	gxMode
.cdf4	adf4	8d 3b 08	sta $083b			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 99 07	lda $0799			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 92 07	lda $0792			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 93 07	adc $0793			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 91 07	ror $0791			ror 	gxX0
.cf60	af60	4e 91 07	lsr $0791			lsr 	gxX0
.cf63	af63	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 93 07	lsr $0793			lsr 	gxY0
.cf69	af69	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 91 07	ora $0791			ora 	gxX0
.cf74	af74	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf77	af77	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 93 07	ora $0793			ora 	gxY0
.cf7f	af7f	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a3 07	sta $07a3			sta 	gxOffset
.cfd1	afd1	ad 92 07	lda $0792			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a3 07	lda $07a3			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a3 07	sta $07a3			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d023	b023	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d051	b051	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d09e	b09e	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a1	b0a1	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a7	b0a7	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 95 07	cmp $0795			cmp 	gxX1
.d0bb	b0bb	ad 92 07	lda $0792			lda 	gxX0+1
.d0be	b0be	ed 96 07	sbc $0796			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 97 07	cmp $0797			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0eb	b0eb	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 91 07	sta $0791,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d17a	b17a	55 4e 54 28
>d17e	b17e	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d186	b186	54 24 28
>d189	b189	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d190	b190	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d197	b197	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d19e	b19e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d1a6	b1a6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d1ac	b1ac	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d1b2	b1b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d1b9	b1b9	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d1bf	b1bf	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1c5	b1c5	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1cc	b1cc	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1d4	b1d4	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1dc	b1dc	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1e4	b1e4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1ec	b1ec	47 28
>d1ee	b1ee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1f6	b1f6	28
>d1f7	b1f7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1ff	b1ff	28
>d200	b200	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d206	b206	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d20c	b20c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d212	b212	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d219	b219	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d221	b221	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d227	b227	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d22d	b22d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d232	b232	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d236	b236	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d23c	b23c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d244	b244	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d24b	b24b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d252	b252	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d25a	b25a	43
>d25b	b25b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d261	b261	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d267	b267	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d26e	b26e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d274	b274	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d278	b278	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d27c	b27c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d282	b282	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d28a	b28a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d291	b291	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d298	b298	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d2a0	b2a0	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d2a6	b2a6	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d2ab	b2ab	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d2b3	b2b3	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d2b9	b2b9	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d2bf	b2bf	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2c4	b2c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2ca	b2ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2d1	b2d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2d6	b2d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2dc	b2dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2e3	b2e3	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2eb	b2eb	59
>d2ec	b2ec	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2f1	b2f1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2f5	b2f5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2fd	b2fd	45
>d2fe	b2fe	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d306	b306	45
>d307	b307	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d30d	b30d	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d313	b313	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d31a	b31a	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d321	b321	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d328	b328	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d32e	b32e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d334	b334	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d339	b339	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d340	b340	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d347	b347	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d34f	b34f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d355	b355	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d359	b359	ff					.text	$FF
.d35a	b35a					KeywordSet1:
>d35a	b35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d35c	b35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d35e	b35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d360	b360	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d368	b368	4c 45
>d36a	b36a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d372	b372	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d37a	b37a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d381	b381	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d388	b388	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d38d	b38d	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d395	b395	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d39a	b39a	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d3a1	b3a1	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d3a6	b3a6	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d3ae	b3ae	45
>d3af	b3af	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d3b3	b3b3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d3ba	b3ba	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3c0	b3c0	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3c7	b3c7	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3ce	b3ce	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3d4	b3d4	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3da	b3da	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3df	b3df	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3e5	b3e5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3ec	b3ec	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3f4	b3f4	45
>d3f5	b3f5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3fd	b3fd	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d402	b402	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d408	b408	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d410	b410	45
>d411	b411	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d419	b419	45
>d41a	b41a	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d421	b421	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d429	b429	53
>d42a	b42a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d430	b430	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d438	b438	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d43d	b43d	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d444	b444	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d449	b449	ff					.text	$FF
.d44a	b44a					KeywordSet2:
>d44a	b44a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d44c	b44c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d44e	b44e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d450	b450	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d455	b455	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d45a	b45a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d45f	b45f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d464	b464	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d469	b469	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d46e	b46e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d473	b473	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d478	b478	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d47d	b47d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d482	b482	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d487	b487	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d48c	b48c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d491	b491	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d496	b496	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d49b	b49b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d4a0	b4a0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d4a5	b4a5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d4aa	b4aa	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4af	b4af	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4b4	b4b4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4b9	b4b9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4be	b4be	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4c3	b4c3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4c8	b4c8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4cd	b4cd	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4d2	b4d2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4d7	b4d7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4dc	b4dc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4e1	b4e1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4e6	b4e6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4eb	b4eb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4f0	b4f0	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4f5	b4f5	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4fa	b4fa	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4ff	b4ff	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d504	b504	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d509	b509	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d50e	b50e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d513	b513	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d518	b518	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d51d	b51d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d522	b522	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d527	b527	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d52c	b52c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d531	b531	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d536	b536	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d53b	b53b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d540	b540	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d545	b545	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d54a	b54a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d54f	b54f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d554	b554	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d559	b559	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d55e	b55e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d563	b563	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d568	b568	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d56d	b56d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d572	b572	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d577	b577	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d57c	b57c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d581	b581	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d586	b586	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d58b	b58b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d590	b590	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d595	b595	ff					.text	$FF
.d596	b596					Export_TKListConvertLine:
.d596	b596	48		pha				pha 								; save indent on the stack
.d597	b597	9c 19 04	stz $0419			stz 	tbOffset
.d59a	b59a	9c 29 04	stz $0429			stz 	tokenBuffer
.d59d	b59d	9c 25 04	stz $0425			stz 	currentListColour
.d5a0	b5a0	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d5a2	b5a2	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5a5	b5a5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d5a7	b5a7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a9	b5a9	aa		tax				tax
.d5aa	b5aa	88		dey				dey
.d5ab	b5ab	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ad	b5ad	20 90 b7	jsr $b790			jsr 	LCLWriteNumberXA
.d5b0	b5b0	68		pla				pla 								; adjustment to indent
.d5b1	b5b1	48		pha				pha 								; save on stack
.d5b2	b5b2	10 0c		bpl $b5c0			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5b4	b5b4	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5b5	b5b5	6d 22 04	adc $0422			adc 	listIndent
.d5b8	b5b8	8d 22 04	sta $0422			sta 	listIndent
.d5bb	b5bb	10 03		bpl $b5c0			bpl 	_LCNoAdjust
.d5bd	b5bd	9c 22 04	stz $0422			stz 	listIndent
.d5c0	b5c0					_LCNoAdjust:
.d5c0	b5c0	18		clc				clc		 							; work out actual indent.
.d5c1	b5c1	ad 22 04	lda $0422			lda 	listIndent
.d5c4	b5c4	0a		asl a				asl 	a
.d5c5	b5c5	69 07		adc #$07			adc 	#7
.d5c7	b5c7	85 36		sta $36				sta 	zTemp0
.d5c9	b5c9					_LCPadOut:
.d5c9	b5c9	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5cb	b5cb	20 28 b7	jsr $b728			jsr 	LCLWrite
.d5ce	b5ce	ad 19 04	lda $0419			lda 	tbOffset
.d5d1	b5d1	c5 36		cmp $36				cmp 	zTemp0
.d5d3	b5d3	d0 f4		bne $b5c9			bne 	_LCPadOut
.d5d5	b5d5	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5d7	b5d7					_LCMainLoop:
.d5d7	b5d7	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5d9	b5d9	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5dc	b5dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d5de	b5de	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5e0	b5e0	f0 17		beq $b5f9			beq 	_LCExit
.d5e2	b5e2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5e4	b5e4	90 1e		bcc $b604			bcc 	_LCDoubles
.d5e6	b5e6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5e8	b5e8	90 2a		bcc $b614			bcc 	_LCShiftPunc
.d5ea	b5ea	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5ec	b5ec	90 35		bcc $b623			bcc 	_LCPunctuation
.d5ee	b5ee	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5f0	b5f0	90 51		bcc $b643			bcc 	_LCIdentifiers
.d5f2	b5f2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5f4	b5f4	90 73		bcc $b669			bcc 	_LCTokens
.d5f6	b5f6	4c c9 b6	jmp $b6c9			jmp 	_LCData 					; 254-5 are data objects
.d5f9	b5f9					_LCExit:
.d5f9	b5f9	68		pla				pla 								; get old indent adjust
.d5fa	b5fa	30 07		bmi $b603			bmi 	_LCExit2
.d5fc	b5fc	18		clc				clc 								; add to indent if +ve
.d5fd	b5fd	6d 22 04	adc $0422			adc 	listIndent
.d600	b600	8d 22 04	sta $0422			sta 	listIndent
.d603	b603					_LCExit2:
.d603	b603	60		rts				rts
.d604	b604					_LCDoubles:
.d604	b604	48		pha				pha
.d605	b605	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d606	b606	29 02		and #$02			and 	#2
.d608	b608	09 3c		ora #$3c			ora 	#60 						; make < >
.d60a	b60a	20 28 b7	jsr $b728			jsr 	LCLWrite
.d60d	b60d	68		pla				pla 								; restore, do lower bit
.d60e	b60e	29 03		and #$03			and 	#3
.d610	b610	09 3c		ora #$3c			ora 	#60
.d612	b612	80 0f		bra $b623			bra		_LCPunctuation 				; print, increment, loop
.d614	b614					_LCShiftPunc:
.d614	b614	aa		tax				tax 								; save in X
.d615	b615	29 07		and #$07			and 	#7 							; lower 3 bits
.d617	b617	f0 02		beq $b61b			beq 	_LCNoAdd
.d619	b619	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d61b	b61b					_LCNoAdd:
.d61b	b61b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d61d	b61d	90 02		bcc $b621			bcc 	_LCNoAdd2
.d61f	b61f	09 20		ora #$20			ora 	#32 						; adds $20
.d621	b621					_LCNoAdd2:
.d621	b621	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d623	b623					_LCPunctuation:
.d623	b623	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d625	b625	d0 03		bne $b62a			bne 	_LCPContinue
.d627	b627	20 3e b7	jsr $b73e			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d62a	b62a					_LCPContinue:
.d62a	b62a	c9 2e		cmp #$2e			cmp 	#'.'
.d62c	b62c	f0 08		beq $b636			beq 	_LCPIsConstant
.d62e	b62e	c9 30		cmp #$30			cmp 	#'0'
.d630	b630	90 0b		bcc $b63d			bcc 	_LCPNotConstant
.d632	b632	c9 3a		cmp #$3a			cmp 	#'9'+1
.d634	b634	b0 07		bcs $b63d			bcs 	_LCPNotConstant
.d636	b636					_LCPIsConstant:
.d636	b636	48		pha				pha
.d637	b637	a9 87		lda #$87			lda 	#CLIConstant+$80
.d639	b639	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d63c	b63c	68		pla				pla
.d63d	b63d					_LCPNotConstant:
.d63d	b63d	c8		iny				iny 								; consume character
.d63e	b63e	20 28 b7	jsr $b728			jsr 	LCLWrite 					; write it out.
.d641	b641	80 94		bra $b5d7			bra 	_LCMainLoop 				; go round again.
.d643	b643					_LCIdentifiers:
.d643	b643	18		clc				clc 								; convert to physical address
.d644	b644	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d646	b646	85 37		sta $37				sta 	zTemp0+1
.d648	b648	c8		iny				iny
.d649	b649	b1 30		lda ($30),y			lda 	(codePtr),y
.d64b	b64b	85 36		sta $36				sta 	zTemp0
.d64d	b64d	c8		iny				iny
.d64e	b64e	5a		phy				phy 								; save position
.d64f	b64f	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d651	b651	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d654	b654	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d656	b656					_LCOutIdentifier:
.d656	b656	c8		iny				iny
.d657	b657	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d659	b659	29 7f		and #$7f			and 	#$7F
.d65b	b65b	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d65e	b65e	20 28 b7	jsr $b728			jsr 	LCLWrite
.d661	b661	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d663	b663	10 f1		bpl $b656			bpl 	_LCOutIdentifier
.d665	b665	7a		ply				ply 								; restore position
.d666	b666	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d669	b669					_LCTokens:
.d669	b669	aa		tax				tax 								; token in X
.d66a	b66a	a9 4a		lda #$4a			lda 	#((KeywordSet2) & $FF)
.d66c	b66c	85 36		sta $36				sta 	0+zTemp0
.d66e	b66e	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d670	b670	85 37		sta $37				sta 	1+zTemp0
.d672	b672	e0 82		cpx #$82			cpx 	#$82
.d674	b674	f0 16		beq $b68c			beq 	_LCUseShift
.d676	b676	a9 5a		lda #$5a			lda 	#((KeywordSet1) & $FF)
.d678	b678	85 36		sta $36				sta 	0+zTemp0
.d67a	b67a	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d67c	b67c	85 37		sta $37				sta 	1+zTemp0
.d67e	b67e	e0 81		cpx #$81			cpx 	#$81
.d680	b680	f0 0a		beq $b68c			beq 	_LCUseShift
.d682	b682	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d684	b684	85 36		sta $36				sta 	0+zTemp0
.d686	b686	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d688	b688	85 37		sta $37				sta 	1+zTemp0
.d68a	b68a	80 01		bra $b68d			bra 	_LCNoShift
.d68c	b68c					_LCUseShift:
.d68c	b68c	c8		iny				iny
.d68d	b68d					_LCNoShift:
.d68d	b68d	20 52 b7	jsr $b752			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d690	b690	b1 30		lda ($30),y			lda 	(codePtr),y
.d692	b692	aa		tax				tax 								; into X
.d693	b693					_LCFindText:
.d693	b693	ca		dex				dex
.d694	b694	10 0e		bpl $b6a4			bpl 	_LCFoundText 				; found text.
.d696	b696	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d698	b698	1a		inc a				inc 	a 							; one extra for size
.d699	b699	38		sec				sec 								; one extra for checksum
.d69a	b69a	65 36		adc $36				adc 	zTemp0 						; go to next token
.d69c	b69c	85 36		sta $36				sta 	zTemp0
.d69e	b69e	90 f3		bcc $b693			bcc 	_LCFindText
.d6a0	b6a0	e6 37		inc $37				inc 	zTemp0+1
.d6a2	b6a2	80 ef		bra $b693			bra 	_LCFindText
.d6a4	b6a4					_LCFoundText:
.d6a4	b6a4	5a		phy				phy 								; save List position
.d6a5	b6a5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d6a7	b6a7	aa		tax				tax
.d6a8	b6a8	a9 86		lda #$86			lda 	#CLIToken+$80
.d6aa	b6aa	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6ad	b6ad	a0 02		ldy #$02			ldy 	#2
.d6af	b6af					_LCCopyToken:
.d6af	b6af	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6b1	b6b1	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d6b4	b6b4	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6b7	b6b7	c8		iny				iny
.d6b8	b6b8	ca		dex				dex
.d6b9	b6b9	d0 f4		bne $b6af			bne 	_LCCopyToken
.d6bb	b6bb	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6bd	b6bd	f0 05		beq $b6c4			beq 	_LCNoSpace
.d6bf	b6bf	a9 20		lda #$20			lda 	#' '
.d6c1	b6c1	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6c4	b6c4					_LCNoSpace:
.d6c4	b6c4	7a		ply				ply 								; restore position.
.d6c5	b6c5	c8		iny				iny 								; consume token
.d6c6	b6c6	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop 				; and go around again.
.d6c9	b6c9					_LCData:
.d6c9	b6c9	48		pha				pha 								; save type $FE/$FF
.d6ca	b6ca	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6cc	b6cc	c9 fe		cmp #$fe			cmp 	#$FE
.d6ce	b6ce	f0 22		beq $b6f2			beq 	_LCHaveOpener
.d6d0	b6d0	a2 22		ldx #$22			ldx 	#'"'
.d6d2	b6d2	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6d4	b6d4	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6d7	b6d7	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6d9	b6d9	d0 17		bne $b6f2			bne 	_LCHaveOpener
.d6db	b6db	88		dey				dey 								; what precedes it ?
.d6dc	b6dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6de	b6de	c8		iny				iny
.d6df	b6df	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6e1	b6e1	d0 0f		bne $b6f2			bne 	_LCHaveOpener
.d6e3	b6e3	a9 09		lda #$09			lda 	#9 							; tab
.d6e5	b6e5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6e8	b6e8	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6ea	b6ea	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6ed	b6ed	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6ef	b6ef	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6f2	b6f2					_LCHaveOpener:
.d6f2	b6f2	8a		txa				txa 								; output prefix (# or ")
.d6f3	b6f3	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6f6	b6f6	c8		iny				iny 								; get count
.d6f7	b6f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f9	b6f9	aa		tax				tax
.d6fa	b6fa	c8		iny				iny 								; point at first character
.d6fb	b6fb					_LCOutData:
.d6fb	b6fb	b1 30		lda ($30),y			lda 	(codePtr),y
.d6fd	b6fd	c9 00		cmp #$00			cmp 	#0
.d6ff	b6ff	f0 03		beq $b704			beq 	_LCNoPrint
.d701	b701	20 28 b7	jsr $b728			jsr 	LCLWrite
.d704	b704					_LCNoPrint:
.d704	b704	c8		iny				iny
.d705	b705	ca		dex				dex
.d706	b706	d0 f3		bne $b6fb			bne 	_LCOutData
.d708	b708	68		pla				pla 								; closing " required ?
.d709	b709	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d70b	b70b	d0 0f		bne $b71c			bne 	_LCNoQuote
.d70d	b70d	a9 22		lda #$22			lda 	#'"'
.d70f	b70f	20 28 b7	jsr $b728			jsr 	LCLWrite
.d712	b712	ad 86 07	lda $0786			lda 	EXTTextColour
.d715	b715	29 0f		and #$0f			and 	#$0F
.d717	b717	09 90		ora #$90			ora 	#$90
.d719	b719	20 28 b7	jsr $b728			jsr 	LCLWrite
.d71c	b71c					_LCNoQuote:
.d71c	b71c	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d71f	b71f					LCLWriteColour:
.d71f	b71f	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d722	b722	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d725	b725	d0 01		bne $b728			bne 	LCLWrite 					; if different, output it
.d727	b727	60		rts				rts
.d728	b728					LCLWrite:
.d728	b728	da		phx				phx
.d729	b729	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d72c	b72c	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d72f	b72f	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d732	b732	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d735	b735	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d737	b737	30 03		bmi $b73c			bmi 	_LCLNoColour
.d739	b739	8d 23 04	sta $0423			sta 	lcLastCharacter
.d73c	b73c					_LCLNoColour:
.d73c	b73c	fa		plx				plx
.d73d	b73d	60		rts				rts
.d73e	b73e					LCLDeleteLastSpace:
.d73e	b73e	48		pha				pha
.d73f	b73f	da		phx				phx
.d740	b740	ae 19 04	ldx $0419			ldx 	tbOffset
.d743	b743	f0 0a		beq $b74f			beq 	_LCDLSExit
.d745	b745	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d748	b748	c9 20		cmp #$20			cmp 	#' '
.d74a	b74a	d0 03		bne $b74f			bne 	_LCDLSExit
.d74c	b74c	ce 19 04	dec $0419			dec 	tbOffset
.d74f	b74f					_LCDLSExit:
.d74f	b74f	fa		plx				plx
.d750	b750	68		pla				pla
.d751	b751	60		rts				rts
.d752	b752					LCLCheckSpaceRequired:
.d752	b752	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d755	b755	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d757	b757	f0 1b		beq $b774			beq 	_LCCSRSpace
.d759	b759	c9 29		cmp #$29			cmp 	#')'
.d75b	b75b	f0 17		beq $b774			beq 	_LCCSRSpace
.d75d	b75d	c9 23		cmp #$23			cmp 	#'#'
.d75f	b75f	f0 13		beq $b774			beq 	_LCCSRSpace
.d761	b761	20 7a b7	jsr $b77a			jsr 	LCLLowerCase 				; saves a little effort
.d764	b764	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d766	b766	90 11		bcc $b779			bcc 	_LCCSRExit
.d768	b768	c9 3a		cmp #$3a			cmp 	#"9"+1
.d76a	b76a	90 08		bcc $b774			bcc 	_LCCSRSpace
.d76c	b76c	c9 61		cmp #$61			cmp 	#"a"
.d76e	b76e	90 09		bcc $b779			bcc 	_LCCSRExit
.d770	b770	c9 7b		cmp #$7b			cmp 	#"z"+1
.d772	b772	b0 05		bcs $b779			bcs 	_LCCSRExit
.d774	b774					_LCCSRSpace:
.d774	b774	a9 20		lda #$20			lda 	#' '
.d776	b776	20 28 b7	jsr $b728			jsr 	LCLWrite
.d779	b779					_LCCSRExit:
.d779	b779	60		rts				rts
.d77a	b77a					LCLLowerCase:
.d77a	b77a	c9 41		cmp #$41			cmp 	#"A"
.d77c	b77c	90 06		bcc $b784			bcc 	_LCLLCOut
.d77e	b77e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d780	b780	b0 02		bcs $b784			bcs 	_LCLLCOut
.d782	b782	69 20		adc #$20			adc 	#$20
.d784	b784					_LCLLCOut:
.d784	b784	60		rts				rts
.d785	b785					LCLUpperCase:
.d785	b785	c9 61		cmp #$61			cmp 	#"a"
.d787	b787	90 06		bcc $b78f			bcc 	_LCLUCOut
.d789	b789	c9 7b		cmp #$7b			cmp 	#"z"+1
.d78b	b78b	b0 02		bcs $b78f			bcs 	_LCLUCOut
.d78d	b78d	e9 1f		sbc #$1f			sbc 	#$1F
.d78f	b78f					_LCLUCOut:
.d78f	b78f	60		rts				rts
.d790	b790					LCLWriteNumberXA:
.d790	b790	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d792	b792					_LCLWNLoop1:
.d792	b792	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d794	b794					_LCLWNLoop2:
.d794	b794	48		pha				pha 								; save initial LSB
.d795	b795	38		sec				sec
.d796	b796	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d798	b798	f9 c9 b7	sbc $b7c9,y			sbc 	_LCLWNTable,y
.d79b	b79b	48		pha				pha
.d79c	b79c	8a		txa				txa
.d79d	b79d	f9 ca b7	sbc $b7ca,y			sbc 	_LCLWNTable+1,y
.d7a0	b7a0	90 07		bcc $b7a9			bcc 	_LCLWNUnderflow
.d7a2	b7a2	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d7a4	b7a4	aa		tax				tax 								; update X
.d7a5	b7a5	68		pla				pla 								; restore A
.d7a6	b7a6	7a		ply				ply 								; throw original
.d7a7	b7a7	80 eb		bra $b794			bra 	_LCLWNLoop2 				; try again.
.d7a9	b7a9					_LCLWNUnderflow:
.d7a9	b7a9	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d7ab	b7ab	d0 06		bne $b7b3			bne 	_LCLWNOut
.d7ad	b7ad	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7b0	b7b0	3a		dec a				dec 	a
.d7b1	b7b1	f0 04		beq $b7b7			beq 	_LCLWNNext
.d7b3	b7b3					_LCLWNOut:
.d7b3	b7b3	98		tya				tya
.d7b4	b7b4	20 c3 b7	jsr $b7c3			jsr 	_LCLWNOutDigit
.d7b7	b7b7					_LCLWNNext:
.d7b7	b7b7	7a		ply				ply 							 	; restore original value.
.d7b8	b7b8	68		pla				pla
.d7b9	b7b9	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7bb	b7bb	c8		iny				iny
.d7bc	b7bc	c8		iny				iny
.d7bd	b7bd	84 37		sty $37				sty 	zTemp0+1
.d7bf	b7bf	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7c1	b7c1	d0 cf		bne $b792			bne 	_LCLWNLoop1
.d7c3	b7c3					_LCLWNOutDigit:
.d7c3	b7c3	09 30		ora #$30			ora 	#'0'
.d7c5	b7c5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d7c8	b7c8	60		rts				rts
.d7c9	b7c9					_LCLWNTable:
>d7c9	b7c9	10 27						.word 	10000
>d7cb	b7cb	e8 03						.word 	1000
>d7cd	b7cd	64 00						.word 	100
>d7cf	b7cf	0a 00						.word 	10
.d7d1	b7d1					TOKSearchTable:
.d7d1	b7d1	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7d3	b7d3	85 36		sta $36				sta 	zTemp0
.d7d5	b7d5	a0 00		ldy #$00			ldy 	#0
.d7d7	b7d7	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7d9	b7d9	85 38		sta $38				sta 	zTemp1
.d7db	b7db					_TSTLoop:
.d7db	b7db	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7dd	b7dd	30 49		bmi $b828			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7df	b7df	f0 2e		beq $b80f			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7e1	b7e1	c8		iny				iny 								; get the hash
.d7e2	b7e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7e4	b7e4	88		dey				dey
.d7e5	b7e5	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7e8	b7e8	d0 25		bne $b80f			bne 	_TSTNext
.d7ea	b7ea	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7ed	b7ed	38		sec				sec
.d7ee	b7ee	ed 00 04	sbc $0400			sbc 	identStart
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7f3	b7f3	d0 1a		bne $b80f			bne 	_TSTNext
.d7f5	b7f5	5a		phy				phy 								; save Y , we might fail to match.
.d7f6	b7f6	c8		iny				iny 								; point to text
.d7f7	b7f7	c8		iny				iny
.d7f8	b7f8	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7fb	b7fb					_TSTCompareName:
.d7fb	b7fb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7fe	b7fe	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d800	b800	d0 0c		bne $b80e			bne 	_TSTNextPullY 				; fail, pullY and do next
.d802	b802	e8		inx				inx
.d803	b803	c8		iny				iny
.d804	b804	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d807	b807	d0 f2		bne $b7fb			bne 	_TSTCompareName
.d809	b809	7a		ply				ply 								; throw Y
.d80a	b80a	a5 38		lda $38				lda 	zTemp1 						; get token #
.d80c	b80c	38		sec				sec 								; return with CS = passed.
.d80d	b80d	60		rts				rts
.d80e	b80e					_TSTNextPullY:
.d80e	b80e	7a		ply				ply 								; restore current, fall through.
.d80f	b80f					_TSTNext:
.d80f	b80f	e6 38		inc $38				inc 	zTemp1 						; token counter
.d811	b811	98		tya				tya
.d812	b812	18		clc				clc
.d813	b813	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d815	b815	1a		inc a				inc 	a 							; +1
.d816	b816	1a		inc a				inc 	a 							; +2
.d817	b817	a8		tay				tay
.d818	b818	10 c1		bpl $b7db			bpl 	_TSTLoop 					; if Y < $80 loop back
.d81a	b81a	98		tya				tya 								; add Y to zTemp0 and reset Y
.d81b	b81b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d81d	b81d	18		clc				clc  								; but have tables > 255 bytes
.d81e	b81e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d820	b820	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d822	b822	90 b7		bcc $b7db			bcc 	_TSTLoop
.d824	b824	e6 37		inc $37				inc 	zTemp0+1
.d826	b826	80 b3		bra $b7db			bra 	_TSTLoop
.d828	b828					_TSTFail:
.d828	b828	18		clc				clc
.d829	b829	60		rts				rts
.d82a	b82a					Export_TKTokeniseLine:
.d82a	b82a	20 f7 b9	jsr $b9f7			jsr 	LCLFixLineBufferCase 		; fix line case
.d82d	b82d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d82f	b82f	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d832	b832	9c 27 04	stz $0427			stz 	tokenLineNumber
.d835	b835	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d838	b838	a2 ff		ldx #$ff			ldx 	#$FF
.d83a	b83a					_TKFindFirst:
.d83a	b83a	e8		inx				inx
.d83b	b83b	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d83e	b83e	f0 62		beq $b8a2			beq 	_TKExit
.d840	b840	c9 20		cmp #$20			cmp 	#' '
.d842	b842	90 f6		bcc $b83a			bcc 	_TKFindFirst
.d844	b844	c9 30		cmp #$30			cmp 	#'0'
.d846	b846	90 07		bcc $b84f			bcc 	_TKNoLineNumber
.d848	b848	c9 3a		cmp #$3a			cmp 	#'9'+1
.d84a	b84a	b0 03		bcs $b84f			bcs 	_TKNoLineNumber
.d84c	b84c	20 21 ba	jsr $ba21			jsr 	TOKExtractLineNumber
.d84f	b84f					_TKNoLineNumber:
.d84f	b84f					_TKTokeniseLoop:
.d84f	b84f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d852	b852	f0 4e		beq $b8a2			beq 	_TKExit
.d854	b854	e8		inx				inx
.d855	b855	c9 20		cmp #$20			cmp 	#' '
.d857	b857	f0 f6		beq $b84f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d859	b859	ca		dex				dex 								; undo last get, A contains character, X is position.
.d85a	b85a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d85c	b85c	f0 68		beq $b8c6			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d85e	b85e	c9 41		cmp #$41			cmp 	#'A'
.d860	b860	90 04		bcc $b866			bcc 	_TKTokenisePunctuation
.d862	b862	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d864	b864	90 60		bcc $b8c6			bcc 	_TKTokeniseIdentifier
.d866	b866					_TKTokenisePunctuation:
.d866	b866	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d868	b868	f0 2e		beq $b898			beq 	_TKString
.d86a	b86a	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d86c	b86c	f0 2f		beq $b89d			beq 	_TKHexConstant
.d86e	b86e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d870	b870	f0 36		beq $b8a8			beq 	_TKCheckDouble
.d872	b872	c9 3e		cmp #$3e			cmp 	#'>'
.d874	b874	f0 32		beq $b8a8			beq 	_TKCheckDouble
.d876	b876					_TKStandardPunctuation:
.d876	b876	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d879	b879	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d87b	b87b	90 0e		bcc $b88b			bcc 	_TKNoShift
.d87d	b87d	48		pha				pha 								; save. we are about to convert this punctuation token from
.d87e	b87e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d880	b880	85 36		sta $36				sta 	zTemp0
.d882	b882	68		pla				pla
.d883	b883	29 20		and #$20			and 	#32 						; bit 5
.d885	b885	4a		lsr a				lsr 	a 							; shift into bit 3
.d886	b886	4a		lsr a				lsr 	a
.d887	b887	05 36		ora $36				ora 	zTemp0
.d889	b889	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d88b	b88b					_TKNoShift:
.d88b	b88b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; write the punctuation character
.d88e	b88e	e8		inx				inx 								; consume the character
.d88f	b88f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d891	b891	d0 bc		bne $b84f			bne 	_TKTokeniseLoop 			; and loop round again.
.d893	b893	20 59 b9	jsr $b959			jsr 	TOKCheckComment 			; comment checl
.d896	b896	80 b7		bra $b84f			bra 	_TKTokeniseLoop
.d898	b898					_TKString:
.d898	b898	20 86 b9	jsr $b986			jsr 	TOKTokenString
.d89b	b89b	80 b2		bra $b84f			bra 	_TKTokeniseLoop
.d89d	b89d					_TKHexConstant:
.d89d	b89d	20 c1 b9	jsr $b9c1			jsr 	TOKHexConstant
.d8a0	b8a0	80 ad		bra $b84f			bra 	_TKTokeniseLoop
.d8a2	b8a2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d8a4	b8a4	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d8a7	b8a7	60		rts				rts
.d8a8	b8a8					_TKCheckDouble:
.d8a8	b8a8	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d8ab	b8ab	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8ad	b8ad	90 c7		bcc $b876			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8af	b8af	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8b1	b8b1	b0 c3		bcs $b876			bcs 	_TKStandardPunctuation
.d8b3	b8b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8b6	b8b6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8b8	b8b8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8b9	b8b9	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8bc	b8bc	38		sec				sec
.d8bd	b8bd	e9 3c		sbc #$3c			sbc 	#'<'
.d8bf	b8bf	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8c2	b8c2	e8		inx				inx 								; consume both
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	80 89		bra $b84f			bra 	_TKTokeniseLoop
.d8c6	b8c6					_TKTokeniseIdentifier:
.d8c6	b8c6	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8c9	b8c9	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8cc	b8cc					_TKCheckLoop:
.d8cc	b8cc	e8		inx				inx 								; look at next, we know first is identifier already.
.d8cd	b8cd	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8d0	b8d0	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8d2	b8d2	f0 f8		beq $b8cc			beq 	_TKCheckLoop
.d8d4	b8d4	c9 30		cmp #$30			cmp	 	#"0"
.d8d6	b8d6	90 0c		bcc $b8e4			bcc 	_TKEndIdentifier
.d8d8	b8d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8da	b8da	90 f0		bcc $b8cc			bcc 	_TKCheckLoop
.d8dc	b8dc	c9 41		cmp #$41			cmp	 	#"A"
.d8de	b8de	90 04		bcc $b8e4			bcc 	_TKEndIdentifier
.d8e0	b8e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e2	b8e2	90 e8		bcc $b8cc			bcc 	_TKCheckLoop
.d8e4	b8e4					_TKEndIdentifier:
.d8e4	b8e4	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8e7	b8e7	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8e9	b8e9	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8eb	b8eb	f0 06		beq $b8f3			beq 	_TKHasTypeCharacter
.d8ed	b8ed	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8ef	b8ef	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8f1	b8f1	d0 07		bne $b8fa			bne 	_TKNoTypeCharacter
.d8f3	b8f3					_TKHasTypeCharacter:
.d8f3	b8f3	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8f6	b8f6	e8		inx				inx 								; consume the type character
.d8f7	b8f7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8fa	b8fa					_TKNoTypeCharacter:
.d8fa	b8fa	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8fc	b8fc	d0 09		bne $b907			bne 	_TKNoArray
.d8fe	b8fe	e8		inx				inx 								; skip the (
.d8ff	b8ff	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d902	b902	09 04		ora #$04			ora 	#$04
.d904	b904	8d 04 04	sta $0404			sta 	identTypeByte
.d907	b907					_TKNoArray:
.d907	b907	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d90a	b90a	20 e2 b9	jsr $b9e2			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d90d	b90d	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d90f	b90f	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d911	b911	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d914	b914	a2 00		ldx #$00			ldx 	#0
.d916	b916	b0 1f		bcs $b937			bcs 	_TKFoundToken
.d918	b918	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d91a	b91a	a9 5a		lda #$5a			lda 	#(KeywordSet1) & $FF
.d91c	b91c	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d91f	b91f	a2 81		ldx #$81			ldx 	#$81
.d921	b921	b0 14		bcs $b937			bcs 	_TKFoundToken
.d923	b923	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d925	b925	a9 4a		lda #$4a			lda 	#(KeywordSet2) & $FF
.d927	b927	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d92a	b92a	a2 82		ldx #$82			ldx 	#$82
.d92c	b92c	b0 09		bcs $b937			bcs 	_TKFoundToken
.d92e	b92e	20 72 ba	jsr $ba72			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d931	b931	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d934	b934	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d937	b937					_TKFoundToken:
.d937	b937	48		pha				pha 								; save token
.d938	b938	8a		txa				txa 								; shift in X, is there one ?
.d939	b939	f0 03		beq $b93e			beq 	_TKNoTShift
.d93b	b93b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; if so, write it out
.d93e	b93e					_TKNoTShift:
.d93e	b93e	68		pla				pla 								; restore and write token
.d93f	b93f	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d942	b942	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d944	b944	d0 0d		bne $b953			bne 	_TKNotRem 			 		; not shifted ?
.d946	b946	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d948	b948	d0 09		bne $b953			bne 	_TKNotRem
.d94a	b94a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d94d	b94d	20 59 b9	jsr $b959			jsr 	TOKCheckComment
.d950	b950	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop
.d953	b953					_TKNotRem:
.d953	b953	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d956	b956	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d959	b959					TOKCheckComment:
.d959	b959	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d95c	b95c	e8		inx				inx
.d95d	b95d	c9 20		cmp #$20			cmp 	#' '
.d95f	b95f	f0 f8		beq $b959			beq 	TOKCheckComment
.d961	b961	ca		dex				dex 								; first non space character
.d962	b962	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d964	b964	f0 1f		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d966	b966	c9 00		cmp #$00			cmp 	#0 							; EOL
.d968	b968	f0 1b		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d96a	b96a	da		phx				phx
.d96b	b96b					_TOKCCLowerCase:
.d96b	b96b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d96e	b96e	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d970	b970	90 09		bcc $b97b			bcc 	_TOKKCNotUC
.d972	b972	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d974	b974	b0 05		bcs $b97b			bcs 	_TOKKCNotUC
.d976	b976	49 20		eor #$20			eor 	#$20
.d978	b978	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d97b	b97b					_TOKKCNotUC:
.d97b	b97b	e8		inx				inx
.d97c	b97c	c9 00		cmp #$00			cmp 	#0
.d97e	b97e	d0 eb		bne $b96b			bne 	_TOKCCLowerCase
.d980	b980	fa		plx				plx
.d981	b981	ca		dex				dex 								; tokenise string expects initial skip.
.d982	b982	20 86 b9	jsr $b986			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d985	b985					_TOKCCExit:
.d985	b985	60		rts				rts
.d986	b986					TOKTokenString:
.d986	b986	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d988	b988	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d98b	b98b	e8		inx				inx									; start of quoted string.
.d98c	b98c	da		phx				phx 								; push start of string on top
.d98d	b98d	ca		dex				dex 								; because we pre-increment
.d98e	b98e					_TSFindEnd:
.d98e	b98e	e8		inx				inx
.d98f	b98f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d992	b992	f0 04		beq $b998			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d994	b994	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d996	b996	d0 f6		bne $b98e			bne 	_TSFindEnd
.d998	b998					_TSEndOfString:
.d998	b998	7a		ply				ply  								; so now Y is first character, X is character after end.
.d999	b999	48		pha				pha 								; save terminating character
.d99a	b99a	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d99d	b99d	68		pla				pla 								; terminating character
.d99e	b99e	f0 01		beq $b9a1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d9a0	b9a0	e8		inx				inx
.d9a1	b9a1					_TSNotQuote:
.d9a1	b9a1	60		rts				rts
.d9a2	b9a2					TOKWriteBlockXY:
.d9a2	b9a2	86 36		stx $36				stx 	zTemp0 						; save end character
.d9a4	b9a4	98		tya				tya 								; use 2's complement to work out the byte size
.d9a5	b9a5	49 ff		eor #$ff			eor 	#$FF
.d9a7	b9a7	38		sec				sec
.d9a8	b9a8	65 36		adc $36				adc 	zTemp0
.d9aa	b9aa	1a		inc a				inc 	a 							; one extra for NULL
.d9ab	b9ab	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9ae	b9ae					_TOBlockLoop:
.d9ae	b9ae	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9b0	b9b0	f0 09		beq $b9bb			beq 	_TOBlockExit
.d9b2	b9b2	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9b5	b9b5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9b8	b9b8	c8		iny				iny
.d9b9	b9b9	80 f3		bra $b9ae			bra 	_TOBlockLoop
.d9bb	b9bb					_TOBlockExit:
.d9bb	b9bb	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9bd	b9bd	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c0	b9c0	60		rts				rts
.d9c1	b9c1					TOKHexConstant:
.d9c1	b9c1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9c3	b9c3	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c6	b9c6	e8		inx				inx									; start of quoted string.
.d9c7	b9c7	da		phx				phx 								; push start of constant on top
.d9c8	b9c8	ca		dex				dex
.d9c9	b9c9					_THFindLoop:
.d9c9	b9c9	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9ca	b9ca	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9cd	b9cd	c9 30		cmp #$30			cmp 	#"0"
.d9cf	b9cf	90 0c		bcc $b9dd			bcc 	_THFoundEnd
.d9d1	b9d1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9d3	b9d3	90 f4		bcc $b9c9			bcc 	_THFindLoop
.d9d5	b9d5	c9 41		cmp #$41			cmp 	#"A"
.d9d7	b9d7	90 04		bcc $b9dd			bcc 	_THFoundEnd
.d9d9	b9d9	c9 47		cmp #$47			cmp 	#"F"+1
.d9db	b9db	90 ec		bcc $b9c9			bcc 	_THFindLoop
.d9dd	b9dd					_THFoundEnd:
.d9dd	b9dd	7a		ply				ply 								; restore start
.d9de	b9de	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; output the block
.d9e1	b9e1	60		rts				rts
.d9e2	b9e2					TOKCalculateHash:
.d9e2	b9e2	da		phx				phx
.d9e3	b9e3	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9e6	b9e6	a9 00		lda #$00			lda 	#0
.d9e8	b9e8					_TCHLoop:
.d9e8	b9e8	18		clc				clc
.d9e9	b9e9	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9ec	b9ec	e8		inx				inx
.d9ed	b9ed	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9f0	b9f0	d0 f6		bne $b9e8			bne 	_TCHLoop
.d9f2	b9f2	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9f5	b9f5	fa		plx				plx
.d9f6	b9f6	60		rts				rts
.d9f7	b9f7					LCLFixLineBufferCase:
.d9f7	b9f7	a2 00		ldx #$00			ldx 	#0
.d9f9	b9f9					_FLBCLoop:
.d9f9	b9f9	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9fc	b9fc	f0 22		beq $ba20			beq 	_FLBCExit 					; end of string.
.d9fe	b9fe	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.da00	ba00	f0 11		beq $ba13			beq 	_FLBCInQuotes
.da02	ba02	e8		inx				inx
.da03	ba03	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.da05	ba05	90 f2		bcc $b9f9			bcc 	_FLBCLoop
.da07	ba07	c9 7b		cmp #$7b			cmp 	#'z'+1
.da09	ba09	b0 ee		bcs $b9f9			bcs 	_FLBCLoop
.da0b	ba0b	38		sec				sec 								; make U/C
.da0c	ba0c	e9 20		sbc #$20			sbc 	#32
.da0e	ba0e	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da11	ba11	80 e6		bra $b9f9			bra 	_FLBCLoop
.da13	ba13					_FLBCInQuotes:
.da13	ba13	e8		inx				inx 								; advance
.da14	ba14	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da17	ba17	f0 07		beq $ba20			beq 	_FLBCExit 					; exit on EOS
.da19	ba19	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da1b	ba1b	d0 f6		bne $ba13			bne 	_FLBCInQuotes
.da1d	ba1d	e8		inx				inx 								; skip over it
.da1e	ba1e	80 d9		bra $b9f9			bra 	_FLBCLoop
.da20	ba20					_FLBCExit:
.da20	ba20	60		rts				rts
.da21	ba21					TOKExtractLineNumber:
.da21	ba21	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da24	ba24	48		pha				pha
.da25	ba25	ad 27 04	lda $0427			lda 	tokenLineNumber
.da28	ba28	48		pha				pha
.da29	ba29	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 2
.da2c	ba2c	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 4
.da2f	ba2f	18		clc				clc 								; add stacked value
.da30	ba30	68		pla				pla
.da31	ba31	6d 27 04	adc $0427			adc 	tokenLineNumber
.da34	ba34	8d 27 04	sta $0427			sta 	tokenLineNumber
.da37	ba37	68		pla				pla
.da38	ba38	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da3b	ba3b	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da3e	ba3e	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 10
.da41	ba41	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da44	ba44	e8		inx				inx
.da45	ba45	29 0f		and #$0f			and 	#15 						; add to line #
.da47	ba47	18		clc				clc
.da48	ba48	6d 27 04	adc $0427			adc 	tokenLineNumber
.da4b	ba4b	8d 27 04	sta $0427			sta 	tokenLineNumber
.da4e	ba4e	90 03		bcc $ba53			bcc 	_TLENNoCarry
.da50	ba50	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da53	ba53					_TLENNoCarry:
.da53	ba53	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da56	ba56	c9 30		cmp #$30			cmp 	#'0'
.da58	ba58	90 04		bcc $ba5e			bcc 	_TLENExit
.da5a	ba5a	c9 3a		cmp #$3a			cmp 	#'9'+1
.da5c	ba5c	90 c3		bcc $ba21			bcc 	TOKExtractLineNumber
.da5e	ba5e					_TLENExit:
.da5e	ba5e	60		rts				rts
.da5f	ba5f					_LCLNTimes2:
.da5f	ba5f	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da62	ba62	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da65	ba65	60		rts				rts
.da66	ba66					TOKWriteByte:
.da66	ba66	da		phx				phx
.da67	ba67	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da6a	ba6a	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da6d	ba6d	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da70	ba70	fa		plx				plx
.da71	ba71	60		rts				rts
.da72	ba72					TOKCheckCreateVariableRecord:
.da72	ba72	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da74	ba74	85 36		sta $36				sta 	0+zTemp0
.da76	ba76	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da78	ba78	85 37		sta $37				sta 	1+zTemp0
.da7a	ba7a					_CCVSearch:
.da7a	ba7a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da7c	ba7c	f0 2c		beq $baaa			beq 	_CCVFail
.da7e	ba7e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da80	ba80	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da82	ba82	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da85	ba85	d0 16		bne $ba9d			bne 	_CCVNext
.da87	ba87	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da89	ba89	ae 00 04	ldx $0400			ldx 	identStart
.da8c	ba8c					_CCVCompare:
.da8c	ba8c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da8f	ba8f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da91	ba91	e8		inx				inx 								; advance pointers
.da92	ba92	c8		iny				iny
.da93	ba93	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da94	ba94	d0 07		bne $ba9d			bne 	_CCVNext  					; didn't match go to next.
.da96	ba96	90 f4		bcc $ba8c			bcc 	_CCVCompare 				; not finished yet.
.da98	ba98	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da9b	ba9b	f0 41		beq $bade			beq 	_CCVFound 					; yes, we were successful
.da9d	ba9d					_CCVNext:
.da9d	ba9d	18		clc				clc 								; go to next record.
.da9e	ba9e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.daa0	baa0	65 36		adc $36				adc 	zTemp0
.daa2	baa2	85 36		sta $36				sta 	zTemp0
.daa4	baa4	90 d4		bcc $ba7a			bcc 	_CCVSearch
.daa6	baa6	e6 37		inc $37				inc 	zTemp0+1
.daa8	baa8	80 d0		bra $ba7a			bra 	_CCVSearch
.daaa	baaa					_CCVFail:
.daaa	baaa	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.daac	baac	ad 03 04	lda $0403			lda 	identHash
.daaf	baaf	91 36		sta ($36),y			sta 	(zTemp0),y
.dab1	bab1	c8		iny				iny 								; offset 2 is the type byte
.dab2	bab2	ad 04 04	lda $0404			lda 	identTypeByte
.dab5	bab5	91 36		sta ($36),y			sta 	(zTemp0),y
.dab7	bab7	c8		iny				iny
.dab8	bab8					_CCVData:
.dab8	bab8	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	c8		iny				iny
.dabd	babd	c0 08		cpy #$08			cpy 	#8
.dabf	babf	90 f7		bcc $bab8			bcc 	_CCVData
.dac1	bac1	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dac4	bac4					_CCVCopyName:
.dac4	bac4	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dac7	bac7	91 36		sta ($36),y			sta 	(zTemp0),y
.dac9	bac9	e8		inx				inx
.daca	baca	c8		iny				iny
.dacb	bacb	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dace	bace	d0 f4		bne $bac4			bne 	_CCVCopyName
.dad0	bad0	98		tya				tya 								; patch offset
.dad1	bad1	92 36		sta ($36)			sta 	(zTemp0)
.dad3	bad3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dad5	bad5	91 36		sta ($36),y			sta 	(zTemp0),y
.dad7	bad7	88		dey				dey
.dad8	bad8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dada	bada	09 80		ora #$80			ora 	#$80
.dadc	badc	91 36		sta ($36),y			sta 	(zTemp0),y
.dade	bade					_CCVFound:
.dade	bade	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dae0	bae0	38		sec				sec
.dae1	bae1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dae3	bae3	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dae5	bae5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.dae8	bae8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daea	baea	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.daed	baed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daee	baee					SNDCheckChannel:
.daee	baee	aa		tax				tax
.daef	baef	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daf2	baf2	d0 38		bne $bb2c			bne 	_SNDCCExit
.daf4	baf4	da		phx				phx 								; save current channel
.daf5	baf5	8a		txa				txa 								; put in A
.daf6	baf6	20 72 bb	jsr $bb72			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daf9	baf9	68		pla				pla 								; channel # in A
.dafa	bafa	90 30		bcc $bb2c			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dafc	bafc	a8		tay				tay 								; Y is the channel #
.dafd	bafd	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.db00	bb00	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.db03	bb03	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.db06	bb06	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.db09	bb09	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.db0c	bb0c	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.db0f	bb0f	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.db12	bb12	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.db15	bb15	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.db18	bb18	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.db1b	bb1b	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db1e	bb1e	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db21	bb21	5a		phy				phy 								; save channel #
.db22	bb22	20 8c bb	jsr $bb8c			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db25	bb25	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db28	bb28	68		pla				pla
.db29	bb29	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update channel A
.db2c	bb2c					_SNDCCExit:
.db2c	bb2c	60		rts				rts
.db2d	bb2d					SNDUpdateNote:
.db2d	bb2d	aa		tax				tax 								; so we can access records
.db2e	bb2e	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db2f	bb2f	0a		asl a				asl 	a
.db30	bb30	0a		asl a				asl 	a
.db31	bb31	0a		asl a				asl 	a
.db32	bb32	0a		asl a				asl 	a
.db33	bb33	8d 41 08	sta $0841			sta 	SNDChannelBits
.db36	bb36	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db39	bb39	f0 2e		beq $bb69			beq 	_SNDUNIsSilent
.db3b	bb3b	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db3e	bb3e	48		pha				pha
.db3f	bb3f	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db42	bb42	29 0f		and #$0f			and 	#$0F
.db44	bb44	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db47	bb47	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db49	bb49	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db4c	bb4c	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db4f	bb4f	8d 41 08	sta $0841			sta 	SNDChannelBits
.db52	bb52	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db55	bb55	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db58	bb58	6a		ror a				ror 	a
.db59	bb59	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db5c	bb5c	6a		ror a				ror 	a
.db5d	bb5d	4a		lsr a				lsr 	a 							; put in bits 0-5
.db5e	bb5e	4a		lsr a				lsr 	a
.db5f	bb5f	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write as rest of pitch register
.db62	bb62	68		pla				pla
.db63	bb63	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db65	bb65	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db68	bb68	60		rts				rts
.db69	bb69					_SNDUNIsSilent:
.db69	bb69	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db6c	bb6c	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db6e	bb6e	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write to the ports
.db71	bb71	60		rts				rts
.db72	bb72					SNDFindNextNoteForA:
.db72	bb72	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db75	bb75	f0 13		beq $bb8a			beq 	_SNDFNNFail 				; queue empty.
.db77	bb77	a2 00		ldx #$00			ldx 	#0
.db79	bb79					_SNDFNNSearch:
.db79	bb79	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db7c	bb7c	38		sec				sec
.db7d	bb7d	f0 0c		beq $bb8b			beq 	_SNDFNNExit 				; if so exit with CS.
.db7f	bb7f	e8		inx				inx 								; next queue slot.
.db80	bb80	e8		inx				inx
.db81	bb81	e8		inx				inx
.db82	bb82	e8		inx				inx
.db83	bb83	e8		inx				inx
.db84	bb84	e8		inx				inx
.db85	bb85	e8		inx				inx
.db86	bb86	e8		inx				inx
.db87	bb87	88		dey				dey 								; done the whole queue
.db88	bb88	d0 ef		bne $bb79			bne 	_SNDFNNSearch 				; no, go back.
.db8a	bb8a					_SNDFNNFail:
.db8a	bb8a	18		clc				clc
.db8b	bb8b					_SNDFNNExit:
.db8b	bb8b	60		rts				rts
.db8c	bb8c					SNDDeleteXFromQueue:
.db8c	bb8c	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db8e	bb8e	f0 09		beq $bb99			beq 	_SNDDXExit
.db90	bb90	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db93	bb93	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db96	bb96	e8		inx				inx
.db97	bb97	80 f3		bra $bb8c			bra 	SNDDeleteXFromQueue
.db99	bb99					_SNDDXExit:
.db99	bb99	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db9a	bb9a					SNDQueueRequest:
.db9a	bb9a	86 36		stx $36				stx 	zTemp0						; save queue address
.db9c	bb9c	84 37		sty $37				sty 	zTemp0+1
.db9e	bb9e	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.dba1	bba1	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dba3	bba3	f0 21		beq $bbc6			beq 	_SNDQRExit
.dba5	bba5	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dba7	bba7	48		pha				pha
.dba8	bba8	8a		txa				txa  								; get offset in queue buffer/
.dba9	bba9	0a		asl a				asl 	a
.dbaa	bbaa	0a		asl a				asl 	a
.dbab	bbab	0a		asl a				asl 	a
.dbac	bbac	aa		tax				tax
.dbad	bbad	68		pla				pla 								; get back and push again
.dbae	bbae	48		pha				pha
.dbaf	bbaf	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.dbb2	bbb2	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dbb4	bbb4					_SNDQCopy:
.dbb4	bbb4	b1 36		lda ($36),y			lda 	(zTemp0),y
.dbb6	bbb6	e8		inx				inx
.dbb7	bbb7	c8		iny				iny
.dbb8	bbb8	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.dbbb	bbbb	c0 06		cpy #$06			cpy 	#6
.dbbd	bbbd	d0 f5		bne $bbb4			bne 	_SNDQCopy
.dbbf	bbbf	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dbc2	bbc2	68		pla				pla 								; get channel # back
.dbc3	bbc3	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbc6	bbc6					_SNDQRExit:
.dbc6	bbc6	60		rts				rts
.dbc7	bbc7					SNDSilenceChannel:
.dbc7	bbc7	aa		tax				tax 								; zero time left.
.dbc8	bbc8	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbcb	bbcb	0a		asl a				asl 	a 							; shift into position
.dbcc	bbcc	0a		asl a				asl 	a
.dbcd	bbcd	0a		asl a				asl 	a
.dbce	bbce	0a		asl a				asl 	a
.dbcf	bbcf	0a		asl a				asl 	a
.dbd0	bbd0	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbd2	bbd2	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.dbd5	bbd5	60		rts				rts
.dbd6	bbd6					SNDWritePorts:
.dbd6	bbd6	da		phx				phx 								; save X
.dbd7	bbd7	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbd9	bbd9	64 01		stz $01				stz 	1 							; access I/O page 0
.dbdb	bbdb	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbde	bbde	8d 10 d6	sta $d610			sta 	$D610
.dbe1	bbe1	86 01		stx $01				stx 	1 							; restore I/O
.dbe3	bbe3	fa		plx				plx 								; restore X
.dbe4	bbe4	60		rts				rts
.dbe5	bbe5					Export_SNDCommand:
.dbe5	bbe5	da		phx				phx 								; save XY
.dbe6	bbe6	5a		phy				phy
.dbe7	bbe7	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbe9	bbe9	f0 1d		beq $bc08			beq 	_SNDInitialise
.dbeb	bbeb	90 28		bcc $bc15			bcc 	_SNDExit
.dbed	bbed	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbef	bbef	f0 17		beq $bc08			beq 	_SNDSilence
.dbf1	bbf1	b0 22		bcs $bc15			bcs 	_SNDExit
.dbf3	bbf3	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbf5	bbf5	b0 09		bcs $bc00			bcs 	_SNDQueryPlay
.dbf7	bbf7	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbf9	bbf9	b0 1a		bcs $bc15			bcs 	_SNDExit
.dbfb	bbfb	20 9a bb	jsr $bb9a			jsr 	SNDQueueRequest
.dbfe	bbfe	80 15		bra $bc15			bra 	_SNDExit
.dc00	bc00					_SNDQueryPlay:
.dc00	bc00	29 03		and #$03			and 	#3 							; get channel #
.dc02	bc02	aa		tax				tax
.dc03	bc03	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dc06	bc06	80 0d		bra $bc15			bra 	_SNDExit
.dc08	bc08					_SNDInitialise:
.dc08	bc08					_SNDSilence:
.dc08	bc08	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dc0b	bc0b	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc0d	bc0d					_SNDSilenceLoop:
.dc0d	bc0d	48		pha				pha
.dc0e	bc0e	20 c7 bb	jsr $bbc7			jsr 	SNDSilenceChannel
.dc11	bc11	68		pla				pla
.dc12	bc12	3a		dec a				dec 	a
.dc13	bc13	10 f8		bpl $bc0d			bpl 	_SNDSilenceLoop
.dc15	bc15					_SNDExit:
.dc15	bc15	7a		ply				ply
.dc16	bc16	fa		plx				plx
.dc17	bc17	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dc18	bc18					Export_SNDUpdate:
.dc18	bc18					PagedSNDUpdate:
.dc18	bc18	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dc1b	bc1b	f0 05		beq $bc22			beq 	_SNDUNot0 					; not playing
.dc1d	bc1d	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc1f	bc1f	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel 			; update it.
.dc22	bc22					_SNDUNot0:
.dc22	bc22	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc25	bc25	f0 05		beq $bc2c			beq 	_SNDUNot1
.dc27	bc27	a2 01		ldx #$01			ldx 	#1
.dc29	bc29	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc2c	bc2c					_SNDUNot1:
.dc2c	bc2c	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc2f	bc2f	f0 05		beq $bc36			beq 	_SNDUNot2
.dc31	bc31	a2 02		ldx #$02			ldx 	#2
.dc33	bc33	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc36	bc36					_SNDUNot2:
.dc36	bc36	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc39	bc39	f0 05		beq $bc40			beq 	_SNDUNot3
.dc3b	bc3b	a2 03		ldx #$03			ldx 	#3
.dc3d	bc3d	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc40	bc40					_SNDUNot3:
.dc40	bc40	60		rts				rts
.dc41	bc41					SNDUpdateChannel:
.dc41	bc41	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc43	bc43	f0 2c		beq $bc71			beq 	_SNDUCExit
.dc45	bc45	3a		dec a				dec 	a 							; decrement and update timer
.dc46	bc46	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc49	bc49	f0 1d		beq $bc68			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc4b	bc4b	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc4e	bc4e	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc51	bc51	f0 1e		beq $bc71			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc53	bc53	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc54	bc54	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc57	bc57	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc5a	bc5a	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc5d	bc5d	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc60	bc60	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc63	bc63	29 03		and #$03			and 	#3
.dc65	bc65	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc68	bc68					_SNDUCUpdate:
.dc68	bc68	8a		txa				txa 								; which channel.
.dc69	bc69	48		pha				pha
.dc6a	bc6a	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update the current note
.dc6d	bc6d	68		pla				pla
.dc6e	bc6e	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; more to do ?
.dc71	bc71					_SNDUCExit:
.dc71	bc71	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
