
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 21 06:48:39 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_PLAYINGLPAREN                    = $96; $96 PLAYING(
=$97					KWD_RANDOMLPAREN                     = $97; $97 RANDOM(
=$98					KWD_RIGHTDOLLARLPAREN                = $98; $98 RIGHT$(
=$99					KWD_RNDLPAREN                        = $99; $99 RND(
=$9a					KWD_SGNLPAREN                        = $9a; $9a SGN(
=$9b					KWD_SPCLPAREN                        = $9b; $9b SPC(
=$9c					KWD_STRDOLLARLPAREN                  = $9c; $9c STR$(
=$9d					KWD_TIMERLPAREN                      = $9d; $9d TIMER(
=$9e					KWD_TRUE                             = $9e; $9e TRUE
=$9f					KWD_VALLPAREN                        = $9f; $9f VAL(
=$a0					KWD_FOR                              = $a0; $a0 FOR
=$a1					KWD_IF                               = $a1; $a1 IF
=$a2					KWD_PROC                             = $a2; $a2 PROC
=$a3					KWD_REPEAT                           = $a3; $a3 REPEAT
=$a4					KWD_WHILE                            = $a4; $a4 WHILE
=$a5					KWD_ENDIF                            = $a5; $a5 ENDIF
=$a6					KWD_ENDPROC                          = $a6; $a6 ENDPROC
=$a7					KWD_NEXT                             = $a7; $a7 NEXT
=$a8					KWD_THEN                             = $a8; $a8 THEN
=$a9					KWD_UNTIL                            = $a9; $a9 UNTIL
=$aa					KWD_WEND                             = $aa; $aa WEND
=$ab					KWD_BY                               = $ab; $ab BY
=$ac					KWD_CALL                             = $ac; $ac CALL
=$ad					KWD_CIRCLE                           = $ad; $ad CIRCLE
=$ae					KWD_CLEAR                            = $ae; $ae CLEAR
=$af					KWD_CLS                              = $af; $af CLS
=$b0					KWD_COLOR                            = $b0; $b0 COLOR
=$b1					KWD_COLOUR                           = $b1; $b1 COLOUR
=$b2					KWD_DATA                             = $b2; $b2 DATA
=$b3					KWD_DIM                              = $b3; $b3 DIM
=$b4					KWD_DOWNTO                           = $b4; $b4 DOWNTO
=$b5					KWD_ELSE                             = $b5; $b5 ELSE
=$b6					KWD_FROM                             = $b6; $b6 FROM
=$b7					KWD_GFX                              = $b7; $b7 GFX
=$b8					KWD_GOSUB                            = $b8; $b8 GOSUB
=$b9					KWD_GOTO                             = $b9; $b9 GOTO
=$ba					KWD_HERE                             = $ba; $ba HERE
=$bb					KWD_IMAGE                            = $bb; $bb IMAGE
=$bc					KWD_LET                              = $bc; $bc LET
=$bd					KWD_LINE                             = $bd; $bd LINE
=$be					KWD_LOCAL                            = $be; $be LOCAL
=$bf					KWD_OFF                              = $bf; $bf OFF
=$c0					KWD_ON                               = $c0; $c0 ON
=$c1					KWD_OUTLINE                          = $c1; $c1 OUTLINE
=$c2					KWD_PALETTE                          = $c2; $c2 PALETTE
=$c3					KWD_PLOT                             = $c3; $c3 PLOT
=$c4					KWD_PRINT                            = $c4; $c4 PRINT
=$c5					KWD_READ                             = $c5; $c5 READ
=$c6					KWD_RECT                             = $c6; $c6 RECT
=$c7					KWD_REM                              = $c7; $c7 REM
=$c8					KWD_RETURN                           = $c8; $c8 RETURN
=$c9					KWD_SOLID                            = $c9; $c9 SOLID
=$ca					KWD_SOUND                            = $ca; $ca SOUND
=$cb					KWD_SPRITE                           = $cb; $cb SPRITE
=$cc					KWD_TEXT                             = $cc; $cc TEXT
=$cd					KWD_TO                               = $cd; $cd TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$a0					KWC_FIRST_STRUCTURE = $a0
=$a5					KWC_FIRST_STRUCTURE_DEC = $a5
=$aa					KWC_LAST_STRUCTURE = $aa
=$83					KWC_FIRST_UNARY = $83
=$9f					KWC_LAST_UNARY = $9f

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 a2 a9	jsr $a9a2			jsr 	EXTInitialise 				; hardware initialise
.8006	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8008	a9 22		lda #$22			lda 	#(Prompt & $FF)
.800a	20 96 8d	jsr $8d96			jsr 	PrintStringXA
.800d	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.800f	aa		tax				tax
.8010	a8		tay				tay
.8011	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.8014	a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8016	20 b9 b7	jsr $b7b9			jsr 	SNDCommand
.8019	20 3b 88	jsr $883b			jsr 	NewProgram 					; erase current program
.801c	20 e3 82	jsr $82e3			jsr 	BackloadProgram
.801f	4c 40 83	jmp $8340			jmp 	WarmStart
>8022	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>802a	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>803a	53 49 43 20 2a 2a 2a 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8043	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3382."
>804b	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>805b	2e 20 42 75 69 6c 64 20 33 33 38 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8068	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.806b					AssembleGroup1:
.806b	a9 ff		lda #$ff			lda 	#$FF
.806d	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8070	80 02		bra $8074			bra 	AsmGroup12
.8072					AssembleGroup2:
.8072	a9 00		lda #$00			lda 	#$00
.8074					AsmGroup12:
.8074	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8077	68		pla				pla 								; pop the return address to access the information following.
.8078	fa		plx				plx
.8079	20 02 81	jsr $8102			jsr 	AccessParameters 			; get opcode and save as base
.807c	8d a4 04	sta $04a4			sta 	BaseOpcode
.807f	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8082	d0 08		bne $808c			bne 	_AG12HaveMask
.8084	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8086	20 0a 81	jsr $810a			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8089	8d a5 04	sta $04a5			sta 	ModeMask
.808c					_AG12HaveMask:
.808c	20 45 82	jsr $8245			jsr 	TypeAndCalculateOperand 	; get zero page type
.808f	da		phx				phx 								; save found address mode
.8090	20 6e 81	jsr $816e			jsr 	AssembleModeX
.8093	fa		plx				plx  								; restore address mode
.8094	b0 0b		bcs $80a1			bcs 	_AG12Exit
.8096	20 a2 80	jsr $80a2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8099	20 6e 81	jsr $816e			jsr 	AssembleModeX
.809c	b0 03		bcs $80a1			bcs 	_AG12Exit
.809e	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80a1					_AG12Exit:
.80a1	60		rts				rts
.80a2					PromoteToAbsolute:
.80a2	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80a4	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80a6	f0 19		beq $80c1			beq 	_PTADo
.80a8	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80aa	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80ac	f0 13		beq $80c1			beq 	_PTADo
.80ae	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80b0	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80b2	f0 0d		beq $80c1			beq 	_PTADo
.80b4	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80b6	e0 d1		cpx #$d1			cpx 	#AM_IND
.80b8	f0 07		beq $80c1			beq 	_PTADo
.80ba	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80bc	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80be	f0 01		beq $80c1			beq 	_PTADo
.80c0	60		rts				rts
.80c1					_PTADo:
.80c1	aa		tax				tax
.80c2	60		rts				rts
.80c3					AssembleGroup3:
.80c3	68		pla				pla 								; get parameters, which is just the opcode.
.80c4	fa		plx				plx
.80c5	20 02 81	jsr $8102			jsr 	AccessParameters 			; get and output opcode
.80c8	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80cb	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get a 16 bit operand
.80ce	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80d1	38		sec				sec
.80d2	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80d5	48		pha				pha 								; LSB in A
.80d6	ad 10 04	lda $0410			lda 	NSMantissa1
.80d9	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80dc	aa		tax				tax 								; MSB in X
.80dd	68		pla				pla
.80de	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80df	69 7f		adc #$7f			adc 	#$7F
.80e1	90 01		bcc $80e4			bcc 	_AG3NoCarry
.80e3	e8		inx				inx
.80e4					_AG3NoCarry:
.80e4	38		sec				sec 								; fix back and write out anyways.
.80e5	e9 80		sbc #$80			sbc 	#$80
.80e7	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80ea	e0 00		cpx #$00			cpx 	#0 							; was it in range
.80ec	f0 0a		beq $80f8			beq 	_AG3Exit
.80ee	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.80f1	29 01		and #$01			and 	#1
.80f3	f0 03		beq $80f8			beq 	_AG3Exit
.80f5	4c 8f 9f	jmp $9f8f			jmp 	RangeError 					; no, branch is out of range
.80f8					_AG3Exit:
.80f8	60		rts				rts
.80f9					AssembleGroup4:
.80f9	68		pla				pla 								; pop address
.80fa	fa		plx				plx
.80fb	20 02 81	jsr $8102			jsr 	AccessParameters 			; access and get first
.80fe	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 			; output it.
.8101	60		rts				rts
.8102					AccessParameters:
.8102	8d a1 04	sta $04a1			sta 	ParamStart
.8105	8e a2 04	stx $04a2			stx 	ParamStart+1
.8108	a9 01		lda #$01			lda 	#1
.810a					GetParameter:
.810a	5a		phy				phy
.810b	a8		tay				tay
.810c	ad a1 04	lda $04a1			lda 	ParamStart
.810f	85 36		sta $36				sta 	zTemp0
.8111	ad a2 04	lda $04a2			lda 	ParamStart+1
.8114	85 37		sta $37				sta 	zTemp0+1
.8116	b1 36		lda ($36),y			lda 	(zTemp0),y
.8118	7a		ply				ply
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.811a					AssemblerWriteByte:
.811a	48		pha			pha
.811b	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.811e	29 02		and #$02		and 	#2
.8120	f0 1b		beq $813d		beq 	_AWBNoPrint
.8122	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8125	20 58 81	jsr $8158		jsr 	PrintHex
.8128	ad 9e 04	lda $049e		lda		AssemblerAddress
.812b	20 58 81	jsr $8158		jsr 	PrintHex
.812e	a9 20		lda #$20		lda 	#' '
.8130	20 2e a7	jsr $a72e		jsr 	EXTPrintCharacter
.8133	68		pla			pla 									; print byte
.8134	48		pha			pha
.8135	20 58 81	jsr $8158		jsr 	PrintHex
.8138	a9 0d		lda #$0d		lda 	#13
.813a	20 2e a7	jsr $a72e		jsr 	EXTPrintCharacter
.813d					_AWBNoPrint:
.813d	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8140	85 36		sta $36			sta 	zTemp0
.8142	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8145	f0 0e		beq $8155		beq 	_AWBRange
.8147	85 37		sta $37			sta 	zTemp0+1
.8149	68		pla			pla 									; write byte out
.814a	92 36		sta ($36)		sta 	(zTemp0)
.814c	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.814f	d0 03		bne $8154		bne 	_AWBNoCarry
.8151	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8154					_AWBNoCarry:
.8154	60		rts			rts
.8155					_AWBRange:
.8155	4c 8f 9f	jmp $9f8f		jmp 	RangeError
.8158					PrintHex:
.8158	48		pha				pha
.8159	4a		lsr a				lsr 	a
.815a	4a		lsr a				lsr 	a
.815b	4a		lsr a				lsr 	a
.815c	4a		lsr a				lsr 	a
.815d	20 61 81	jsr $8161			jsr 	_PrintNibble
.8160	68		pla				pla
.8161					_PrintNibble:
.8161	29 0f		and #$0f			and 	#15
.8163	c9 0a		cmp #$0a			cmp 	#10
.8165	90 02		bcc $8169			bcc 	_NoShift
.8167	69 06		adc #$06			adc 	#6
.8169					_NoShift:
.8169	69 30		adc #$30			adc 	#48
.816b	4c 2e a7	jmp $a72e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.816e					AssembleModeX:
.816e	5a		phy				phy
.816f	ad a3 04	lda $04a3			lda 	IsGroup1
.8172	f0 17		beq $818b			beq 	_AMXGroup2
.8174	8a		txa				txa 							; is it in group # 1
.8175	29 40		and #$40			and 	#AM_ISG1
.8177	f0 50		beq $81c9			beq 	_AMXFail 				; no, give up.
.8179	8a		txa				txa 							; get back.
.817a	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.817c	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.817e	d0 22		bne $81a2			bne 	_AMXHaveInfo
.8180	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8183	c9 81		cmp #$81			cmp 	#$81
.8185	f0 42		beq $81c9			beq 	_AMXFail
.8187	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8189	80 17		bra $81a2			bra 	_AMXHaveInfo 			; odd design decision there.
.818b					_AMXGroup2:
.818b	8a		txa				txa 							; is it in group 2 ?
.818c	29 20		and #$20			and 	#AM_ISG2
.818e	f0 39		beq $81c9			beq 	_AMXFail 				; no, give up.
.8190	8a		txa				txa 							; get the offset into Y
.8191	29 1f		and #$1f			and 	#$1F
.8193	4a		lsr a				lsr 	a 						; make it 0-7.
.8194	4a		lsr a				lsr  	a
.8195	a8		tay				tay
.8196	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8199					_AMXCheckOkay:
.8199	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.819a	88		dey				dey
.819b	10 fc		bpl $8199			bpl 	_AMXCheckOkay
.819d	90 2a		bcc $81c9			bcc 	_AMXFail 				; not allowed.
.819f	8a		txa				txa  							; get mask back
.81a0	29 1f		and #$1f			and 	#$1F
.81a2					_AMXHaveInfo:
.81a2	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81a4	10 05		bpl $81ab			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81a6	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81a9	d0 1e		bne $81c9			bne 	_AMXFail
.81ab					_AMXAnySize:
.81ab	18		clc				clc 							; add offset to the base opcode
.81ac	6d a4 04	adc $04a4			adc 	BaseOpcode
.81af					_AMXOutputCode:
.81af	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 		; write the opcode out.
.81b2	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81b4	f0 10		beq $81c6			beq 	_AMXExit
.81b6	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81b9	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81bc	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81be	30 06		bmi $81c6			bmi 	_AMXExit
.81c0	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81c3	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81c6					_AMXExit:
.81c6	7a		ply				ply
.81c7	38		sec				sec
.81c8	60		rts				rts
.81c9					_AMXFail:
.81c9	a0 00		ldy #$00			ldy 	#0
.81cb					_AMXCheckOddities:
.81cb	8a		txa				txa
.81cc	d9 f4 81	cmp $81f4,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81cf	d0 16		bne $81e7			bne 	_AMXCONext
.81d1	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81d4	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81d7	d0 0e		bne $81e7			bne 	_AMXCONext
.81d9	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81db	10 05		bpl $81e2			bpl 	_AMXCONotZero
.81dd	ad 10 04	lda $0410			lda 	NSMantissa1
.81e0	d0 05		bne $81e7			bne 	_AMXCONext
.81e2					_AMXCONotZero:
.81e2	b9 f3 81	lda $81f3,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81e5	80 c8		bra $81af			bra 	_AMXOutputCode 			; and assemble it
.81e7					_AMXCONext:
.81e7	c8		iny				iny
.81e8	c8		iny				iny
.81e9	c8		iny				iny
.81ea	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; end of table
.81ed	d0 dc		bne $81cb			bne 	_AMXCheckOddities
.81ef					_AMXCOFail:
.81ef	7a		ply				ply
.81f0	18		clc				clc
.81f1	60		rts				rts
.81f2					ExtraOpcode:
>81f2	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>81f5	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>81f8	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>81fb	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>81fe	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8201	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8204	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8207	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>820a	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>820d	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8210	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8211					LabelHere:
.8211	c8		iny				iny 								; skip .
.8212	a2 00		ldx #$00			ldx 	#0 							; get a term
.8214	20 c6 97	jsr $97c6			jsr 	EvaluateTerm 				; get a term
.8217	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.821a	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.821c	d0 24		bne $8242			bne 	_ALType
.821e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8221	85 36		sta $36				sta 	zTemp0
.8223	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8226	85 37		sta $37				sta 	zTemp0+1
.8228	5a		phy				phy 								; copy address in.
.8229	a0 01		ldy #$01			ldy 	#1
.822b	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.822e	92 36		sta ($36)			sta 	(zTemp0)
.8230	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8233	91 36		sta ($36),y			sta 	(zTemp0),y
.8235	c8		iny				iny
.8236	a9 00		lda #$00			lda 	#0
.8238	91 36		sta ($36),y			sta 	(zTemp0),y
.823a	c8		iny				iny
.823b	91 36		sta ($36),y			sta 	(zTemp0),y
.823d	c8		iny				iny
.823e	91 36		sta ($36),y			sta 	(zTemp0),y
.8240	7a		ply				ply
.8241	60		rts				rts
.8242					_ALType:
.8242	4c 94 9f	jmp $9f94			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8245					TypeAndCalculateOperand:
.8245	b1 30		lda ($30),y			lda 	(codePtr),y
.8247	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8249	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.824b	f0 5b		beq $82a8			beq 	_TACOExit
.824d	c9 80		cmp #$80			cmp 	#KWC_EOL
.824f	f0 57		beq $82a8			beq 	_TACOExit
.8251	c8		iny				iny
.8252	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8254	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8256	f0 51		beq $82a9			beq 	CalculateOperand
.8258	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.825a	f0 1f		beq $827b			beq 	_TACOIndirect
.825c	88		dey				dey 								; undo get of first character
.825d	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get operand
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8264	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8266	d0 40		bne $82a8			bne 	_TACOExit
.8268	c8		iny				iny
.8269	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.826c	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.826e	c9 58		cmp #$58			cmp 	#'X'
.8270	f0 36		beq $82a8			beq 	_TACOExit
.8272	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8274	c9 59		cmp #$59			cmp 	#'Y'
.8276	f0 30		beq $82a8			beq 	_TACOExit
.8278					_TACOSyntax:
.8278	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.827b					_TACOIndirect:
.827b	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get the operand
.827e	b1 30		lda ($30),y			lda 	(codePtr),y
.8280	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8282	f0 17		beq $829b			beq 	_TACOIndX
.8284	20 24 8d	jsr $8d24			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8287	b1 30		lda ($30),y			lda 	(codePtr),y
.8289	a2 d1		ldx #$d1			ldx 	#AM_IND
.828b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.828d	d0 19		bne $82a8			bne 	_TACOExit
.828f	c8		iny				iny
.8290	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8293	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8295	d0 e1		bne $8278			bne 	_TACOSyntax
.8297	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8299	80 0d		bra $82a8			bra 	_TACOExit
.829b					_TACOIndX:
.829b	c8		iny				iny
.829c	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.829f	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82a1	d0 d5		bne $8278			bne 	_TACOSyntax
.82a3	20 24 8d	jsr $8d24			jsr 	CheckRightBracket			; check )
.82a6	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82a8					_TACOExit:
.82a8	60		rts				rts
.82a9					CalculateOperand:
.82a9	48		pha				pha
.82aa	da		phx				phx
.82ab	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82ad	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.82b0	fa		plx				plx
.82b1	68		pla				pla
.82b2	60		rts				rts
.82b3					TACOCheckXY:
.82b3	b1 30		lda ($30),y			lda 	(codePtr),y
.82b5	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82b7	c9 40		cmp #$40			cmp 	#$40
.82b9	d0 21		bne $82dc			bne 	_TCXYFail
.82bb	b1 30		lda ($30),y			lda 	(codePtr),y
.82bd	18		clc				clc
.82be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82c0	85 37		sta $37				sta 	zTemp0+1
.82c2	c8		iny				iny
.82c3	b1 30		lda ($30),y			lda 	(codePtr),y
.82c5	c8		iny				iny
.82c6	85 36		sta $36				sta 	zTemp0
.82c8	5a		phy				phy 								; save position
.82c9	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd	d0 0c		bne $82db			bne 	_TCXYPopFail
.82cf	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.82d3	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82d5	f0 08		beq $82df			beq 	_TCXYFound
.82d7	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82d9	f0 04		beq $82df			beq 	_TCXYFound
.82db					_TCXYPopFail:
.82db	7a		ply				ply
.82dc					_TCXYFail:
.82dc	a9 00		lda #$00			lda 	#0
.82de	60		rts				rts
.82df					_TCXYFound:
.82df	7a		ply				ply 								; restore position
.82e0	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82e3					BackloadProgram:
.82e3	a2 ff		ldx #$ff			ldx 	#$FF
.82e5	20 0d 83	jsr $830d			jsr 	BLReadByte
.82e8	30 1f		bmi $8309			bmi 	_BPExit
.82ea					_BPCopy:
.82ea	e8		inx				inx  								; copy byte in
.82eb	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.82ee	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.82f1	20 0d 83	jsr $830d			jsr 	BLReadByte 					; read next byte
.82f4	30 0a		bmi $8300			bmi 	_BPEndLine 					; -ve = EOL
.82f6	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.82f8	d0 02		bne $82fc			bne 	_BPNotTab
.82fa	a9 20		lda #$20			lda 	#' '
.82fc					_BPNotTab:
.82fc	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.82fe	b0 ea		bcs $82ea			bcs 	_BPCopy
.8300					_BPEndLine:
.8300	20 38 b5	jsr $b538			jsr 	TokeniseLine 				; tokenise the line.
.8303	38		sec				sec 								; append not insert
.8304	20 65 a1	jsr $a165			jsr 	MemoryInsertLine 			; append to current program
.8307	80 da		bra $82e3			bra 	BackloadProgram
.8309					_BPExit:
.8309	20 d9 83	jsr $83d9			jsr 	ClearCommand 				; clear variables etc.
.830c	60		rts				rts
.830d					BLReadByte:
.830d					_BLLoad:
.830d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8310	ee 0e 83	inc $830e			inc 	_BLLoad+1
.8313	d0 03		bne $8318			bne 	_BLNoCarry
.8315	ee 0f 83	inc $830f			inc 	_BLLoad+2
.8318					_BLNoCarry:
.8318	c9 00		cmp #$00			cmp 	#0
.831a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.831b					EditProgramCode:
.831b	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.831e	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.8321	20 0d a2	jsr $a20d			jsr 	MemorySearch
.8324	90 05		bcc $832b			bcc 	_EPCNoDelete 				; reached the end don't delete
.8326	d0 03		bne $832b			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8328	20 2e a1	jsr $a12e			jsr 	MemoryDeleteLine 			; delete the line
.832b					_EPCNoDelete:
.832b	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.832e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8330	f0 0d		beq $833f			beq 	_EPCNoInsert
.8332	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8335	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8338	20 0d a2	jsr $a20d			jsr 	MemorySearch
.833b	18		clc				clc 								; insert at this point.
.833c	20 65 a1	jsr $a165			jsr 	MemoryInsertLine 			; insert the line
.833f					_EPCNoInsert:
.833f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8340					WarmStart:
.8340	a2 ff		ldx #$ff			ldx 	#$FF
.8342	9a		txs				txs
.8343	20 bc a8	jsr $a8bc			jsr 	EXTInputLine 				; get line to lineBuffer
.8346	20 38 b5	jsr $b538			jsr 	TokeniseLine 				; tokenise the line
.8349	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.834c	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.834f	d0 17		bne $8368			bne 	_WSEditCode 				; if so,edit code.
.8351	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8354	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8356	85 30		sta $30				sta 	codePtr
.8358	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.835a	85 31		sta $31				sta 	codePtr+1
.835c	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.835f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8361	f0 dd		beq $8340			beq 	WarmStart
.8363	20 ec 89	jsr $89ec			jsr 	RUNCodePointerLine 			; execute that line.
.8366	80 d8		bra $8340			bra 	WarmStart
.8368					_WSEditCode:
.8368	20 1b 83	jsr $831b			jsr 	EditProgramCode
.836b	20 d9 83	jsr $83d9			jsr 	ClearCommand
.836e	80 d0		bra $8340			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8370					AssembleCommand:
.8370	a2 00		ldx #$00			ldx 	#0
.8372	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger 		; start address
.8375	ad 08 04	lda $0408			lda 	NSMantissa0
.8378	8d 9e 04	sta $049e			sta 	AssemblerAddress
.837b	ad 10 04	lda $0410			lda 	NSMantissa1
.837e	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8381	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.8384	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; options
.8387	ad 08 04	lda $0408			lda 	NSMantissa0
.838a	8d a0 04	sta $04a0			sta 	AssemblerControl
.838d	60		rts				rts
.838e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.838f					AssertCommand:
.838f	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8391	20 4c 9d	jsr $9d4c			jsr 	EvaluateInteger 			; the assert test
.8394	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; exit if result is non zero.
.8397	d0 05		bne $839e			bne 	_ACExit
.8399	a9 0a		lda #$0a		lda	#10
.839b	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.839e					_ACExit:
.839e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.839f					CallCommand:
.839f	a2 00		ldx #$00			ldx 	#0
.83a1	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.83a4					_CCClear
.83a4	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83a5	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.83a8	e0 04		cpx #$04			cpx 	#4
.83aa	d0 f8		bne $83a4			bne 	_CCClear
.83ac	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83ae					_CCCParam:
.83ae	b1 30		lda ($30),y			lda 	(codePtr),y
.83b0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83b2	d0 09		bne $83bd			bne 	_CCCRun6502
.83b4	c8		iny				iny 								; skip comma
.83b5	e8		inx				inx	 								; next level
.83b6	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83b9	e0 03		cpx #$03			cpx 	#3
.83bb	90 f1		bcc $83ae			bcc 	_CCCParam 					; done all 3 ?
.83bd					_CCCRun6502:
.83bd	5a		phy				phy 								; save position
.83be	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83c1	85 37		sta $37				sta 	zTemp0+1
.83c3	ad 08 04	lda $0408			lda 	NSMantissa0
.83c6	85 36		sta $36				sta 	zTemp0
.83c8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83cb	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ce	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83d1	20 d6 83	jsr $83d6			jsr 	_CCCZTemp0 					; call zTemp0
.83d4	7a		ply				ply 								; restore position and exit
.83d5	60		rts				rts
.83d6					_CCCZTemp0:
.83d6	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83d9					ClearCommand:
.83d9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83db	85 36		sta $36				sta 	0+zTemp0
.83dd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83df	85 37		sta $37				sta 	1+zTemp0
.83e1					_ClearZeroLoop:
.83e1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83e3	f0 24		beq $8409			beq 	_ClearZeroEnd
.83e5	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83e7	a9 00		lda #$00			lda 	#0
.83e9					_ClearOneVariable:
.83e9	91 36		sta ($36),y			sta 	(zTemp0),y
.83eb	c8		iny				iny
.83ec	c0 08		cpy #$08			cpy 	#8
.83ee	d0 f9		bne $83e9			bne 	_ClearOneVariable
.83f0	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.83f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.83f4	c9 18		cmp #$18			cmp 	#NSTProcedure
.83f6	d0 04		bne $83fc			bne 	_ClearNotProcedure
.83f8	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.83fa	91 36		sta ($36),y			sta 	(zTemp0),y
.83fc					_ClearNotProcedure:
.83fc	18		clc				clc 								; go to the next variable
.83fd	b2 36		lda ($36)			lda 	(zTemp0)
.83ff	65 36		adc $36				adc 	zTemp0
.8401	85 36		sta $36				sta 	zTemp0
.8403	90 dc		bcc $83e1			bcc 	_ClearZeroLoop
.8405	e6 37		inc $37				inc 	zTemp0+1
.8407	80 d8		bra $83e1			bra 	_ClearZeroLoop
.8409					_ClearZeroEnd:
.8409	18		clc				clc
.840a	a5 36		lda $36				lda 	zTemp0
.840c	69 01		adc #$01			adc 	#1
.840e	8d 8c 04	sta $048c			sta 	lowMemPtr
.8411	a5 37		lda $37				lda 	zTemp0+1
.8413	69 00		adc #$00			adc 	#0
.8415	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8418	20 53 a6	jsr $a653			jsr 	StackReset
.841b	20 bd a6	jsr $a6bd			jsr 	StringSystemInitialise
.841e	20 2d 8c	jsr $8c2d			jsr 	ProcedureScan
.8421	20 a8 89	jsr $89a8			jsr 	Command_Restore
.8424	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8427	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.842a	9c a0 04	stz $04a0			stz 	AssemblerControl
.842d	20 c9 99	jsr $99c9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8430	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8431					ClearScreen:
.8431	5a		phy				phy
.8432	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8434	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8437	7a		ply				ply
.8438	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8439					Command_Data:
.8439	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.843b	a2 80		ldx #$80			ldx 	#KWC_EOL
.843d	20 7f 8c	jsr $8c7f			jsr 	ScanForward
.8440	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8441					DimCommand:
.8441	b1 30		lda ($30),y			lda 	(codePtr),y
.8443	29 c0		and #$c0			and 	#$C0
.8445	c9 40		cmp #$40			cmp 	#$40
.8447	d0 7a		bne $84c3			bne 	_DCSyntax
.8449	b1 30		lda ($30),y			lda 	(codePtr),y
.844b	18		clc				clc
.844c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.844e	85 3f		sta $3f				sta 	zaTemp+1
.8450	c8		iny				iny
.8451	b1 30		lda ($30),y			lda 	(codePtr),y
.8453	c8		iny				iny
.8454	85 3e		sta $3e				sta 	zaTemp
.8456	5a		phy				phy
.8457	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8459	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.845b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.845d	c9 18		cmp #$18			cmp 	#NSTProcedure
.845f	f0 62		beq $84c3			beq 	_DCSyntax
.8461	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8463	29 04		and #$04			and 	#NSBIsArray
.8465	f0 64		beq $84cb			beq 	_DCType
.8467	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8469	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.846b	d0 59		bne $84c6			bne 	_DCRedefine
.846d	7a		ply				ply
.846e	20 ce 84	jsr $84ce			jsr 	_DCGetSize 				; get array size, check it.
.8471	5a		phy				phy
.8472	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8474	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8476	7a		ply				ply 							; is there a second (e.g. ,x)
.8477	b1 30		lda ($30),y			lda 	(codePtr),y
.8479	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.847b	d0 0a		bne $8487			bne 	_DCOneDimension
.847d	c8		iny				iny 							; skip comma
.847e	20 ce 84	jsr $84ce			jsr 	_DCGetSize 				; get 2nd array size
.8481	5a		phy				phy
.8482	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8484	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8486	7a		ply				ply
.8487					_DCOneDimension:
.8487	5a		phy				phy 							; save position
.8488	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.848a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848c	aa		tax				tax
.848d	c8		iny				iny
.848e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8490	e8		inx				inx 							; bump them.
.8491	1a		inc a				inc 	a
.8492	20 95 9d	jsr $9d95			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8495	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8497	29 e0		and #$e0			and 	#$E0
.8499	d0 23		bne $84be			bne 	_DCSize
.849b	a0 02		ldy #$02			ldy 	#2 						; get base type
.849d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849f	20 dc 84	jsr $84dc			jsr 	ScaleByBaseType 		; scale by base type
.84a2	a5 36		lda $36				lda 	zTemp0
.84a4	a6 37		ldx $37				ldx 	zTemp0+1
.84a6	20 8b 99	jsr $998b			jsr 	AllocateXABytes 		; allocate memory
.84a9	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84ab	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ad	c8		iny				iny
.84ae	8a		txa				txa
.84af	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84b1	7a		ply				ply 							; get position back
.84b2	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 		; check )
.84b5	b1 30		lda ($30),y			lda 	(codePtr),y
.84b7	c8		iny				iny 							; consume in case
.84b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84ba	f0 85		beq $8441			beq 	DimCommand
.84bc	88		dey				dey 							; undo consume
.84bd	60		rts				rts
.84be					_DCSize:
.84be	a9 16		lda #$16		lda	#22
.84c0	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.84c3					_DCSyntax:
.84c3	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.84c6					_DCRedefine:
.84c6	a9 15		lda #$15		lda	#21
.84c8	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.84cb					_DCType:
.84cb	4c 94 9f	jmp $9f94			jmp 	TypeError
.84ce					_DCGetSize:
.84ce	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84d0	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 	; get array dimension
.84d3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84d5	f0 e7		beq $84be			beq 	_DCSize
.84d7	c9 fe		cmp #$fe			cmp 	#254
.84d9	f0 e3		beq $84be			beq 	_DCSize
.84db	60		rts				rts
.84dc					ScaleByBaseType:
.84dc	29 10		and #$10			and 	#NSBIsString 			; is it string
.84de	d0 19		bne $84f9			bne 	_SBBTString
.84e0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84e2	48		pha				pha
.84e3	a5 36		lda $36				lda 	zTemp0
.84e5	48		pha				pha
.84e6	06 36		asl $36				asl 	zTemp0 					; x 2
.84e8	26 37		rol $37				rol 	zTemp0+1
.84ea	06 36		asl $36				asl 	zTemp0 					; x 4
.84ec	26 37		rol $37				rol 	zTemp0+1
.84ee	68		pla				pla 							; add stacked value = x 5
.84ef	65 36		adc $36				adc 	zTemp0
.84f1	85 36		sta $36				sta 	zTemp0
.84f3	68		pla				pla
.84f4	65 37		adc $37				adc 	zTemp0+1
.84f6	85 37		sta $37				sta 	zTemp0+1
.84f8	60		rts				rts
.84f9					_SBBTString:
.84f9	06 36		asl $36				asl 	zTemp0
.84fb	26 37		rol $37				rol 	zTemp0+1
.84fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.84fe					EndCommand:
.84fe	4c 40 83	jmp $8340			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8501					ForCommand:
.8501	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8503	20 ee a5	jsr $a5ee			jsr 	StackOpen
.8506	a2 00		ldx #$00			ldx 	#0
.8508	20 c6 97	jsr $97c6			jsr 	EvaluateTerm
.850b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.850e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8510	d0 49		bne $855b			bne		_FCError
.8512	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8514	20 34 8d	jsr $8d34			jsr 	CheckNextA
.8517	e8		inx				inx
.8518	20 4c 9d	jsr $9d4c			jsr 	EvaluateInteger 			; <from> in +1
.851b	b1 30		lda ($30),y			lda 	(codePtr),y
.851d	c8		iny				iny 								; consume it
.851e	48		pha				pha 								; save on stack for later
.851f	c9 b4		cmp #$b4			cmp 	#KWD_DOWNTO
.8521	f0 04		beq $8527			beq 	_FCNoSyntax
.8523	c9 cd		cmp #$cd			cmp 	#KWD_TO
.8525	d0 37		bne $855e			bne 	_FCSyntaxError
.8527					_FCNoSyntax:
.8527	e8		inx				inx
.8528	20 4c 9d	jsr $9d4c			jsr 	EvaluateInteger
.852b	20 32 a6	jsr $a632			jsr 	STKSaveCodePosition 		; save loop back position
.852e	68		pla				pla 								; restore DOWNTO or TO
.852f	5a		phy				phy 								; save Y on the stack
.8530	49 b4		eor #$b4			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8532	f0 02		beq $8536			beq 	_FCNotDownTo
.8534	a9 02		lda #$02			lda 	#2
.8536					_FCNotDownTo:
.8536	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8537	a0 10		ldy #$10			ldy 	#16
.8539	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.853b	a0 06		ldy #$06			ldy 	#6
.853d	ad 08 04	lda $0408			lda 	NSMantissa0
.8540	91 34		sta ($34),y			sta 	(basicStack),y
.8542	ad 10 04	lda $0410			lda 	NSMantissa1
.8545	c8		iny				iny
.8546	91 34		sta ($34),y			sta 	(basicStack),y
.8548	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.854a	a2 01		ldx #$01			ldx 	#1
.854c	20 61 85	jsr $8561			jsr 	FCIntegerToStack
.854f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8551	a2 02		ldx #$02			ldx 	#2
.8553	20 61 85	jsr $8561			jsr 	FCIntegerToStack
.8556	20 81 85	jsr $8581			jsr 	CopyIndexToReference
.8559	7a		ply				ply 								; restore position
.855a	60		rts				rts
.855b					_FCError:
.855b	4c 94 9f	jmp $9f94			jmp 	TypeError
.855e					_FCSyntaxError:
.855e	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.8561					FCIntegerToStack:
.8561	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8564	10 03		bpl $8569			bpl	 	_FCNotNegative
.8566	20 b5 9d	jsr $9db5			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8569					_FCNotNegative:
.8569	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.856c	91 34		sta ($34),y			sta 	(basicStack),y
.856e	c8		iny				iny
.856f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8572	91 34		sta ($34),y			sta 	(basicStack),y
.8574	c8		iny				iny
.8575	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8578	91 34		sta ($34),y			sta 	(basicStack),y
.857a	c8		iny				iny
.857b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.857e	91 34		sta ($34),y			sta 	(basicStack),y
.8580	60		rts				rts
.8581					CopyIndexToReference:
.8581	5a		phy				phy
.8582	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8584	38		sec				sec 								; (because we copy from offset 8)
.8585	b1 34		lda ($34),y			lda 	(basicStack),y
.8587	e9 08		sbc #$08			sbc 	#8
.8589	85 36		sta $36				sta 	zTemp0
.858b	c8		iny				iny
.858c	b1 34		lda ($34),y			lda 	(basicStack),y
.858e	e9 00		sbc #$00			sbc 	#0
.8590	85 37		sta $37				sta 	zTemp0+1
.8592	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8594	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8596	b1 34		lda ($34),y			lda 	(basicStack),y
.8598	0a		asl a				asl 	a 							; into carry
.8599	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.859b	90 14		bcc $85b1			bcc 	_CITRNormal
.859d	38		sec				sec
.859e					_CITRNegative:
.859e	a9 00		lda #$00			lda 	#0
.85a0	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85a2	91 36		sta ($36),y			sta 	(zTemp0),y
.85a4	c8		iny				iny
.85a5	ca		dex				dex
.85a6	d0 f6		bne $859e			bne 	_CITRNegative
.85a8	88		dey				dey 								; look at MSB of mantissa
.85a9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85ab	09 80		ora #$80			ora 	#$80
.85ad	91 36		sta ($36),y			sta 	(zTemp0),y
.85af	7a		ply				ply
.85b0	60		rts				rts
.85b1					_CITRNormal:
.85b1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85b3	91 36		sta ($36),y			sta 	(zTemp0),y
.85b5	c8		iny				iny
.85b6	ca		dex				dex
.85b7	d0 f8		bne $85b1			bne 	_CITRNormal
.85b9	7a		ply				ply 								; and exit.
.85ba	60		rts				rts
.85bb					NextCommand:
.85bb	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85bd	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85bf	20 1a a6	jsr $a61a			jsr 	StackCheckFrame
.85c2	5a		phy				phy
.85c3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85c5	b1 34		lda ($34),y			lda 	(basicStack),y
.85c7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85c9	30 02		bmi $85cd			bmi 	_NCStepNeg
.85cb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85cd					_NCStepNeg:
.85cd	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85cf	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85d1	18		clc				clc
.85d2					_NCBump:
.85d2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85d4	91 34		sta ($34),y			sta 	(basicStack),y
.85d6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85d8	c8		iny				iny 								; next byte
.85d9	ca		dex				dex 								; do four times
.85da	d0 f6		bne $85d2			bne 	_NCBump
.85dc	20 81 85	jsr $8581			jsr		CopyIndexToReference		; copy it to the reference variable.
.85df	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85e1	b1 34		lda ($34),y			lda 	(basicStack),y
.85e3	0a		asl a				asl 	a 							; sign bit to carry
.85e4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85e6	85 38		sta $38				sta 	zTemp1
.85e8	90 02		bcc $85ec			bcc 	_NCCompRev 					; use if step is +ve
.85ea	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85ec					_NCCompRev:
.85ec	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.85ee	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.85f0	85 39		sta $39				sta 	zTemp1+1
.85f2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.85f4	38		sec				sec
.85f5					_NCCompare:
.85f5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.85f7	b1 34		lda ($34),y			lda 	(basicStack),y
.85f9	a4 39		ldy $39				ldy 	zTemp1+1
.85fb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85fd	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.85ff	e6 39		inc $39				inc 	zTemp1+1
.8601	ca		dex				dex 								; do it 4 times.
.8602	d0 f1		bne $85f5			bne 	_NCCompare
.8604	50 02		bvc $8608			bvc 	_NCNoOverflow 				; convert to signed comparison
.8606	49 80		eor #$80			eor 	#$80
.8608					_NCNoOverflow:
.8608	7a		ply				ply 								; restore Y position
.8609	0a		asl a				asl 	a 							; is bit 7 set.
.860a	90 04		bcc $8610			bcc 	_NCLoopback 				; if no , >= so loop back
.860c	20 0c a6	jsr $a60c			jsr 	StackClose 					; exit the loop
.860f	60		rts				rts
.8610					_NCLoopBack:
.8610	20 43 a6	jsr $a643			jsr 	STKLoadCodePosition 		; loop back
.8613	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8614					Command_GOSUB:
.8614	a2 00		ldx #$00			ldx 	#0
.8616	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8619	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.861b	20 ee a5	jsr $a5ee			jsr 	StackOpen 					; create frame
.861e	20 32 a6	jsr $a632			jsr 	STKSaveCodePosition 		; save current position
.8621	4c 37 86	jmp $8637			jmp 	GotoStackX
.8624					Command_RETURN:
.8624	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8626	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8628	20 1a a6	jsr $a61a			jsr 	StackCheckFrame
.862b	20 43 a6	jsr $a643			jsr 	STKLoadCodePosition 		; restore code position
.862e	20 0c a6	jsr $a60c			jsr 	StackClose
.8631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8632					GotoCommand:
.8632	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8634	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.8637					GotoStackX:
.8637	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.863a	48		pha				pha 								; it is slightly inefficient, just in cases.
.863b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.863e	fa		plx				plx
.863f	20 0d a2	jsr $a20d			jsr 	MemorySearch 				; transfer to line number AX.
.8642	90 05		bcc $8649			bcc 	_GotoError 					; not found, off end.
.8644	d0 03		bne $8649			bne 	_GotoError 					; not found exactly
.8646	4c e5 89	jmp $89e5			jmp 	RunNewLine 					; and go straight to new line code.
.8649					_GotoError:
.8649	a9 0d		lda #$0d		lda	#13
.864b	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.864e					IfCommand:
.864e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8650	20 29 9d	jsr $9d29			jsr 	EvaluateNumber
.8653	b1 30		lda ($30),y			lda 	(codePtr),y
.8655	c9 a8		cmp #$a8			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8657	d0 0a		bne $8663			bne 	_IFStructured
.8659	c8		iny				iny 								; consume THEN
.865a	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; is it zero
.865d	f0 01		beq $8660			beq 	_IfFail 					; if fail, go to next line
.865f	60		rts				rts 								; if THEN just continue
.8660					_IfFail:
.8660	4c 4a 8a	jmp $8a4a			jmp 	EOLCommand
.8663					_IfStructured:
.8663	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; is it zero
.8666	d0 07		bne $866f			bne 	_IfExit 					; if not, then continue normally.
.8668	a9 b5		lda #$b5			lda 	#KWD_ELSE 					; look for else/endif
.866a	a2 a5		ldx #$a5			ldx 	#KWD_ENDIF
.866c	20 7f 8c	jsr $8c7f			jsr 	ScanForward 				; and run from there/
.866f					_IfExit:
.866f	60		rts				rts
.8670					ElseCode:
.8670	a9 a5		lda #$a5			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8672	aa		tax				tax 								; so just go to the structure exit
.8673	20 7f 8c	jsr $8c7f			jsr 	ScanForward
.8676	60		rts				rts
.8677					EndIf:
.8677	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8678					LetCommand:
.8678	a2 00		ldx #$00			ldx 	#0
.867a	b1 30		lda ($30),y			lda 	(codePtr),y
.867c	c9 10		cmp #$10			cmp 	#KWD_AT
.867e	d0 16		bne $8696			bne 	_LCStandard
.8680	c8		iny				iny 								; skip equal
.8681	20 c6 97	jsr $97c6			jsr 	EvaluateTerm 				; get a number
.8684	20 0a 96	jsr $960a			jsr 	Dereference 				; dereference it
.8687	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.868a	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.868c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.868f	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8691	d0 10		bne $86a3			bne 	_LCMain
.8693	4c 94 9f	jmp $9f94			jmp 	TypeError 					; was a reference before.
.8696					_LCStandard:
.8696	ad d4 92	lda $92d4			lda 	PrecedenceLevel+"*"			; precedence > this
.8699	20 ee 92	jsr $92ee			jsr 	EvaluateExpressionAtPrecedence
.869c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.869f	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86a1	f0 0e		beq $86b1			beq 	_LetGoProc 					; it's a procedure call.
.86a3					_LCMain:
.86a3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86a5	20 34 8d	jsr $8d34			jsr 	CheckNextA
.86a8	e8		inx				inx 								; RHS
.86a9	20 20 9d	jsr $9d20			jsr 	EvaluateValue
.86ac	ca		dex				dex
.86ad	20 b4 86	jsr $86b4			jsr 	AssignVariable
.86b0	60		rts				rts
.86b1					_LetGoProc:
.86b1	4c b2 88	jmp $88b2			jmp 	CallProcedure
.86b4					AssignVariable:
.86b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86b7	48		pha				pha 								; save a copy
.86b8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86bb	29 10		and #$10			and 	#NSBIsString
.86bd	d0 0b		bne $86ca			bne 	_ASError
.86bf	68		pla				pla 								; get back
.86c0	29 10		and #$10			and 	#NSBIsString 				; check type
.86c2	d0 03		bne $86c7			bne 	_ASString
.86c4	4c 32 95	jmp $9532			jmp 	AssignNumber
.86c7					_ASString:
.86c7	4c a0 95	jmp $95a0			jmp 	AssignString
.86ca					_ASError:
.86ca	4c 94 9f	jmp $9f94			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86cd					Command_List:
.86cd	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86d0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86d3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86d6	a9 ff		lda #$ff			lda 	#$FF
.86d8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86db	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86de	b1 30		lda ($30),y			lda 	(codePtr),y
.86e0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86e2	f0 1e		beq $8702			beq 	_CLSecond
.86e4	20 63 87	jsr $8763			jsr 	CLIsDigit 					; if not digit, list all
.86e7	b0 24		bcs $870d			bcs 	_CLStart
.86e9	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86eb	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.86ee	b1 30		lda ($30),y			lda 	(codePtr),y
.86f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f2	f0 0e		beq $8702			beq 	_CLSecond 					; if so go get it
.86f4	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.86f7	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86fa	ad 14 04	lda $0414			lda 	NSMantissa1+4
.86fd	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8700	80 0b		bra $870d			bra 	_CLStart
.8702					_CLSecond:
.8702	c8		iny				iny 								; consume comma
.8703	20 63 87	jsr $8763			jsr 	CLIsDigit 					; digit found
.8706	b0 05		bcs $870d			bcs 	_CLStart 					; if not, continue listing
.8708	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.870a	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.870d					_CLStart
.870d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.870f	85 30		sta $30				sta 	codePtr
.8711	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8713	85 31		sta $31				sta 	codePtr+1
.8715					_CLLoop:
.8715	20 d0 a9	jsr $a9d0			jsr 	EXTBreakCheck 				; break check
.8718	f0 33		beq $874d			beq 	_CLExit
.871a	b2 30		lda ($30)			lda 	(codePtr)
.871c	f0 2f		beq $874d			beq 	_CLExit
.871e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8720	20 50 87	jsr $8750			jsr 	CLCompareLineNo
.8723	90 1b		bcc $8740			bcc 	_CLNext
.8725	a2 07		ldx #$07			ldx 	#7
.8727	20 50 87	jsr $8750			jsr 	CLCompareLineNo
.872a	f0 02		beq $872e			beq 	_CLDoThisOne
.872c	b0 12		bcs $8740			bcs 	_CLNext
.872e					_CLDoThisOne:
.872e	20 e2 8c	jsr $8ce2			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8731	20 1a b3	jsr $b31a			jsr 	ListConvertLine 			; convert line into token Buffer
.8734	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8736	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8738	20 96 8d	jsr $8d96			jsr 	PrintStringXA
.873b	a9 0d		lda #$0d			lda 	#13 						; new line
.873d	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8740					_CLNext:
.8740	18		clc				clc
.8741	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8743	65 30		adc $30				adc 	codePtr
.8745	85 30		sta $30				sta 	codePtr
.8747	90 02		bcc $874b			bcc 	_CREExit
.8749	e6 31		inc $31				inc 	codePtr+1
.874b					_CREExit:
.874b	80 c8		bra $8715			bra 	_CLLoop
.874d					_CLExit:
.874d	4c 40 83	jmp $8340			jmp 	WarmStart
.8750					CLCompareLineNo:
.8750	38		sec				sec
.8751	a0 01		ldy #$01			ldy 	#1
.8753	b1 30		lda ($30),y			lda 	(codePtr),y
.8755	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8758	85 36		sta $36				sta 	zTemp0
.875a	c8		iny				iny
.875b	b1 30		lda ($30),y			lda 	(codePtr),y
.875d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8760	05 36		ora $36				ora 	zTemp0
.8762	60		rts				rts
.8763					CLIsDigit:
.8763	b1 30		lda ($30),y			lda 	(codePtr),y
.8765	c9 30		cmp #$30			cmp 	#"0"
.8767	90 03		bcc $876c			bcc	 	_CLIDExitFalse
.8769	c9 3a		cmp #$3a			cmp 	#"9"+1
.876b	60		rts				rts
.876c					_CLIDExitFalse:
.876c	38		sec				sec
.876d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.876e					Command_LOCAL:
.876e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8770	20 7c 87	jsr $877c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8773	b1 30		lda ($30),y			lda 	(codePtr),y
.8775	c8		iny				iny
.8776	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8778	f0 f4		beq $876e			beq 	Command_LOCAL
.877a	88		dey				dey 								; unpick pre-get
.877b	60		rts				rts
.877c					LocaliseNextTerm:
.877c	20 c6 97	jsr $97c6			jsr 	EvaluateTerm 				; evaluate the term
.877f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8782	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8784	f0 61		beq $87e7			beq		_LNTError
.8786	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8789	85 36		sta $36				sta 	zTemp0
.878b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.878e	85 37		sta $37				sta  	zTemp0+1
.8790	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8793	29 10		and #$10			and 	#NSBIsString
.8795	d0 1e		bne $87b5			bne 	_LNTPushString
.8797	5a		phy				phy
.8798	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.879a					_LNTPushNumLoop:
.879a	b1 36		lda ($36),y			lda		(zTemp0),y
.879c	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.879f	c8		iny				iny
.87a0	c0 05		cpy #$05			cpy 	#5
.87a2	d0 f6		bne $879a			bne 	_LNTPushNumLoop
.87a4	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87a6	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87a9	a5 37		lda $37				lda 	zTemp0+1
.87ab	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87ae	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87b0	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87b3	7a		ply				ply
.87b4	60		rts				rts
.87b5					_LNTPushString:
.87b5	5a		phy				phy
.87b6	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87b8	85 38		sta $38				sta 	zTemp1
.87ba	a0 01		ldy #$01			ldy 	#1
.87bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.87be	85 39		sta $39				sta 	zTemp1+1
.87c0	a0 00		ldy #$00			ldy 	#0 							; output string
.87c2	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87c4	f0 0a		beq $87d0			beq 	_LNTStringOut
.87c6					_LNTPushStrLoop:
.87c6	b1 38		lda ($38),y			lda 	(zTemp1),y
.87c8	f0 06		beq $87d0			beq 	_LNTStringOut
.87ca	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87cd	c8		iny				iny
.87ce	80 f6		bra $87c6			bra 	_LNTPushStrLoop
.87d0					_LNTStringOut:
.87d0	98		tya				tya									; output length
.87d1	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87d7	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87da	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87dd	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87e0	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87e2	20 cc a5	jsr $a5cc			jsr 	StackPushByte
.87e5	7a		ply				ply
.87e6	60		rts				rts
.87e7					_LNTError:
.87e7	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.87ea					LocalPopValue:
.87ea	20 e5 a5	jsr $a5e5			jsr 	StackPopByte
.87ed	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.87ef	d0 17		bne $8808			bne 	_LPVString
.87f1	20 e5 a5	jsr $a5e5			jsr 	StackPopByte 				; address
.87f4	85 37		sta $37				sta 	zTemp0+1
.87f6	20 e5 a5	jsr $a5e5			jsr 	StackPopByte
.87f9	85 36		sta $36				sta 	zTemp0
.87fb	5a		phy				phy
.87fc	a0 04		ldy #$04			ldy 	#4 							; copy back
.87fe					_LPVNumberCopy:
.87fe	20 e5 a5	jsr $a5e5			jsr 	StackPopByte
.8801	91 36		sta ($36),y			sta 	(zTemp0),y
.8803	88		dey				dey
.8804	10 f8		bpl $87fe			bpl 	_LPVNumberCopy
.8806	7a		ply				ply 								; and complete
.8807	60		rts				rts
.8808					_LPVString:
.8808	20 e5 a5	jsr $a5e5			jsr 	StackPopByte 				; address of record => zTemp0
.880b	85 37		sta $37				sta 	zTemp0+1
.880d	20 e5 a5	jsr $a5e5			jsr 	StackPopByte
.8810	85 36		sta $36				sta 	zTemp0
.8812	5a		phy				phy
.8813	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8815	85 38		sta $38				sta 	zTemp1
.8817	a0 01		ldy #$01			ldy 	#1
.8819	b1 36		lda ($36),y			lda 	(zTemp0),y
.881b	85 39		sta $39				sta 	zTemp1+1
.881d	20 e5 a5	jsr $a5e5			jsr 	StackPopByte 				; # to get => y
.8820	a8		tay				tay
.8821	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8823	f0 0e		beq $8833			beq 	_LPVStringCopied
.8825	a9 00		lda #$00			lda 	#0 							; NULL on end
.8827	91 38		sta ($38),y			sta 	(zTemp1),y
.8829					_LPVStringCopy:
.8829	88		dey				dey
.882a	30 07		bmi $8833			bmi 	_LPVStringCopied
.882c	20 e5 a5	jsr $a5e5			jsr 	StackPopByte
.882f	91 38		sta ($38),y			sta 	(zTemp1),y
.8831	80 f6		bra $8829			bra 	_LPVStringCopy
.8833					_LPVStringCopied:
.8833	fa		plx				plx
.8834	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8835					NewCommand:
.8835	20 3b 88	jsr $883b			jsr 	NewProgram
.8838	4c 40 83	jmp $8340			jmp 	WarmStart
.883b					NewProgram:
.883b	20 eb a1	jsr $a1eb			jsr 	MemoryNew
.883e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8841	20 d9 83	jsr $83d9			jsr 	ClearCommand 				; clear everything.
.8844	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8845					Command_Print:
.8845	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8846					_CPLoop:
.8846	08		php				php 								; save last action flag
.8847	b1 30		lda ($30),y			lda 	(codePtr),y
.8849	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.884b	f0 46		beq $8893			beq 	_CPExit
.884d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.884f	f0 42		beq $8893			beq 	_CPExit
.8851	68		pla				pla 								; throw last action flag
.8852	b1 30		lda ($30),y			lda 	(codePtr),y
.8854	c8		iny				iny
.8855	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8857	f0 37		beq $8890			beq 	_CPContinueWithSameLine
.8859	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.885b	f0 2e		beq $888b			beq 	_CPTab
.885d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.885f	f0 26		beq $8887			beq 	_CPNewLine
.8861	88		dey				dey 								; undo the get.
.8862	a2 00		ldx #$00			ldx 	#0
.8864	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; get a value into slot 0
.8867	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.886a	29 10		and #$10			and 	#NSBIsString
.886c	f0 0b		beq $8879			beq 	_CPNumber
.886e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8871	ad 08 04	lda $0408			lda 	NSMantissa0
.8874	20 9c 88	jsr $889c			jsr 	CPPrintStringXA
.8877	80 cc		bra $8845			bra 	Command_Print 				; loop round clearing carry so NL if end
.8879					_CPNumber:
.8879	a9 05		lda #$05			lda 	#5 							; maximum decimals
.887b	20 f6 9b	jsr $9bf6			jsr 	ConvertNumberToString 		; convert to string
.887e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8880	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.8882	20 9c 88	jsr $889c			jsr 	CPPrintStringXA
.8885	80 be		bra $8845			bra 	Command_Print 				; loop round clearing carry so NL if end
.8887					_CPNewLine:
.8887	a9 0d		lda #$0d			lda 	#13
.8889	80 02		bra $888d			bra 	_CPPrintChar
.888b					_CPTab:
.888b	a9 09		lda #$09			lda 	#9 							; print TAB
.888d					_CPPrintChar:
.888d	20 af 88	jsr $88af			jsr 	CPPrintVector
.8890					_CPContinueWithSameLine:
.8890	38		sec				sec 								; loop round with carry set, which
.8891	80 b3		bra $8846			bra 	_CPLoop 					; will inhibit final CR
.8893					_CPExit:
.8893	28		plp				plp 								; get last action flag
.8894	b0 05		bcs $889b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8896	a9 0d		lda #$0d			lda 	#13 						; print new line
.8898	20 af 88	jsr $88af			jsr 	CPPrintVector
.889b					_CPExit2:
.889b	60		rts				rts
.889c					CPPrintStringXA:
.889c	5a		phy				phy
.889d	86 37		stx $37				stx 	zTemp0+1
.889f	85 36		sta $36				sta 	zTemp0
.88a1	a0 00		ldy #$00			ldy 	#0
.88a3					_PSXALoop:
.88a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a5	f0 06		beq $88ad			beq 	_PSXAExit
.88a7	20 af 88	jsr $88af			jsr 	CPPrintVector
.88aa	c8		iny				iny
.88ab	80 f6		bra $88a3			bra 	_PSXALoop
.88ad					_PSXAExit:
.88ad	7a		ply				ply
.88ae	60		rts				rts
.88af					CPPrintVector:
.88af	4c 2e a7	jmp $a72e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88b2					CallProcedure:
.88b2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b4	b1 30		lda ($30),y			lda 	(codePtr),y
.88b6	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b8	f0 0c		beq $88c6			beq 	_CPEndParam
.88ba					_CPParamLoop:
.88ba	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; get parameter onto stack
.88bd	e8		inx				inx 								; bump next stack
.88be	b1 30		lda ($30),y			lda 	(codePtr),y
.88c0	c8		iny				iny
.88c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c3	f0 f5		beq $88ba			beq 	_CPParamLoop
.88c5	88		dey				dey 								; unpick.
.88c6					_CPEndParam:
.88c6	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c9	c8		iny				iny									; skip right bracket
.88ca	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88cc	20 ee a5	jsr $a5ee			jsr 	StackOpen
.88cf	20 32 a6	jsr $a632			jsr 	STKSaveCodePosition 		; save loop position
.88d2	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d5	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d7	ad 10 04	lda $0410			lda 	NSMantissa1
.88da	85 37		sta $37				sta 	zTemp0+1
.88dc	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88de	b2 36		lda ($36)			lda 	(zTemp0)
.88e0	85 30		sta $30				sta 	safePtr
.88e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e4	85 31		sta $31				sta 	safePtr+1
.88e6	c8		iny				iny
.88e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e9	85 32		sta $32				sta 	safePtr+2
.88eb	c8		iny				iny
.88ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ee	85 33		sta $33				sta 	safePtr+3
.88f0	c8		iny				iny 								; get Y offset -> Y
.88f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f3	a8		tay				tay
.88f4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f6	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f9	f0 13		beq $890e			beq 	_ParamExit 					; if so, exit.
.88fb					_ParamExtract:
.88fb	ca		dex				dex 								; put a local term on the level before
.88fc	20 7c 87	jsr $877c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88ff	20 b4 86	jsr $86b4			jsr 	AssignVariable 				; assign stacked value to the variable.
.8902	e8		inx				inx 								; advance to next parameter to do.
.8903	e8		inx				inx
.8904	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8907	f0 05		beq $890e			beq 	_ParamExit
.8909	20 2c 8d	jsr $8d2c			jsr 	CheckComma 					; comma seperating parameters
.890c	80 ed		bra $88fb			bra 	_ParamExtract
.890e					_ParamExit:
.890e	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; check )
.8911	60		rts				rts 								; and continue from here
.8912					Command_ENDPROC:
.8912	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8914	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8916	20 1a a6	jsr $a61a			jsr 	StackCheckFrame
.8919	20 43 a6	jsr $a643			jsr 	STKLoadCodePosition 		; restore code position
.891c	20 0c a6	jsr $a60c			jsr 	StackClose
.891f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8920					Command_Read:
.8920	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8922	20 c6 97	jsr $97c6			jsr 	EvaluateTerm
.8925	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8928	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.892a	f0 4a		beq $8976			beq 	_CRSyntax 					; check reference (bit 0)
.892c	20 bf 89	jsr $89bf			jsr 	SwapDataCodePtrs 			; swap code and data
.892f	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8932	d0 20		bne $8954			bne 	_CRContinueData
.8934					_CRKeepSearching:
.8934	a9 b2		lda #$b2			lda 	#KWD_DATA 					; scan for instruction
.8936	aa		tax				tax
.8937	20 7f 8c	jsr $8c7f			jsr 	ScanForward
.893a	c9 b2		cmp #$b2			cmp 	#KWD_DATA 					; found data ?
.893c	f0 16		beq $8954			beq 	_CRHaveData 				; found it
.893e	18		clc				clc
.893f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8941	65 30		adc $30				adc 	codePtr
.8943	85 30		sta $30				sta 	codePtr
.8945	90 02		bcc $8949			bcc 	_CREExit
.8947	e6 31		inc $31				inc 	codePtr+1
.8949					_CREExit:
.8949	a0 03		ldy #$03			ldy 	#3 							; start of line.
.894b	b2 30		lda ($30)			lda 	(codePtr)
.894d	d0 e5		bne $8934			bne 	_CRKeepSearching
.894f	a9 0b		lda #$0b		lda	#11
.8951	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8954					_CRHaveData:
.8954					_CRContinueData:
.8954	a2 01		ldx #$01			ldx 	#1
.8956	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8959	ca		dex				dex
.895a	20 b4 86	jsr $86b4			jsr		AssignVariable 				; do the assignment
.895d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8960	b1 30		lda ($30),y			lda 	(codePtr),y
.8962	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8964	d0 04		bne $896a			bne 	_CRSwapBack
.8966	c8		iny				iny 								; consume comma
.8967	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.896a					_CRSwapBack:
.896a	20 bf 89	jsr $89bf			jsr 	SwapDataCodePtrs			; swap them back.
.896d	b1 30		lda ($30),y			lda 	(codePtr),y
.896f	c8		iny				iny
.8970	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8972	f0 ac		beq $8920			beq 	Command_Read 				; if so go round again.
.8974	88		dey				dey 								; unpick get.
.8975	60		rts				rts
.8976					_CRSyntax:
.8976	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8979					RemCommand:
.8979	b1 30		lda ($30),y			lda 	(codePtr),y
.897b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897d	d0 06		bne $8985			bne 	_RMExit
.897f	c8		iny				iny
.8980	98		tya				tya
.8981	38		sec				sec
.8982	71 30		adc ($30),y			adc 	(codePtr),y
.8984	a8		tay				tay
.8985					_RMExit:
.8985	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8986					Command_REPEAT:
.8986	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8988	20 ee a5	jsr $a5ee			jsr 	StackOpen
.898b	20 32 a6	jsr $a632			jsr 	STKSaveCodePosition 		; save loop position
.898e	60		rts				rts
.898f					Command_UNTIL:
.898f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8991	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8993	20 1a a6	jsr $a61a			jsr 	StackCheckFrame
.8996	a2 00		ldx #$00			ldx 	#0
.8998	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; work out the number
.899b	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; check if zero
.899e	f0 04		beq $89a4			beq 	_CULoopBack 				; if so keep looping
.89a0	20 0c a6	jsr $a60c			jsr 	StackClose		 			; return
.89a3	60		rts				rts
.89a4					_CULoopBack:
.89a4	20 43 a6	jsr $a643			jsr 	STKLoadCodePosition 		; loop back
.89a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a8					Command_Restore:
.89a8	20 bf 89	jsr $89bf			jsr 	SwapDataCodePtrs 			; swap code and data
.89ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ad	85 30		sta $30				sta 	codePtr
.89af	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b1	85 31		sta $31				sta 	codePtr+1
.89b3	20 bf 89	jsr $89bf			jsr 	SwapDataCodePtrs 			; put them back
.89b6	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b8	8d 9b 04	sta $049b			sta 	dataPointer+4
.89bb	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89be	60		rts				rts
.89bf					SwapDataCodePtrs:
.89bf	da		phx				phx
.89c0	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c2					_SDCPLoop:
.89c2	b5 30		lda $30,x			lda 	safePtr,x
.89c4	48		pha				pha
.89c5	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c8	95 30		sta $30,x			sta 	safePtr,x
.89ca	68		pla				pla
.89cb	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89ce	ca		dex				dex
.89cf	10 f1		bpl $89c2			bpl 	_SDCPLoop
.89d1	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d4	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d7	a8		tay				tay
.89d8	fa		plx				plx
.89d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89da					CommandRUN:
.89da	20 d9 83	jsr $83d9			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89dd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89df	85 30		sta $30				sta 	codePtr
.89e1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e3	85 31		sta $31				sta 	codePtr+1
.89e5					RUNNewLine:
.89e5	b2 30		lda ($30)			lda 	(codePtr)
.89e7	f0 5e		beq $8a47			beq 	CRNoProgram         		; no then END.
.89e9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89eb	9a		txs				txs
.89ec					RUNCodePointerLine:
.89ec	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ee					_CRIncMainLoop:
.89ee	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89f1	d0 05		bne $89f8			bne 	_CRNoBreakCheck
.89f3	20 d0 a9	jsr $a9d0			jsr 	EXTBreakCheck 				; break check
.89f6	f0 4a		beq $8a42			beq 	_CRBreak
.89f8					_CRNoBreakCheck:
.89f8	c8		iny				iny
.89f9					_CRMainLoop:
.89f9	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89fc	b1 30		lda ($30),y			lda 	(codePtr),y
.89fe	10 10		bpl $8a10			bpl 	_CRNotKeyword
.8a00	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a02	b0 04		bcs $8a08			bcs 	_CRIsKeyword
.8a04	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a06	b0 34		bcs $8a3c			bcs		_CRSyntaxError
.8a08					_CRIsKeyword:
.8a08	c8		iny				iny 								; consume command
.8a09	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a0a	aa		tax				tax 								; put in X for vector jump
.8a0b	20 3f 8a	jsr $8a3f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0e	80 e9		bra $89f9			bra 	_CRMainLoop 				; and loop round
.8a10					_CRNotKeyword:
.8a10	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a12	f0 da		beq $89ee			beq 	_CRIncMainLoop
.8a14	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a16	90 05		bcc $8a1d			bcc 	_CRNotVariable
.8a18					_CRGoLet:
.8a18	20 78 86	jsr $8678			jsr 	LetCommand
.8a1b	80 dc		bra $89f9			bra 	_CRMainLoop
.8a1d					_CRNotVariable:
.8a1d	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1f	f0 f7		beq $8a18			beq 	_CRGoLet
.8a21	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a23	f0 f3		beq $8a18			beq 	_CRGoLet
.8a25	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a27	f0 ef		beq $8a18			beq 	_CRGoLet
.8a29	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a2b	f0 09		beq $8a36			beq 	_CRGoRem
.8a2d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2f	d0 0b		bne $8a3c			bne 	_CRSyntaxError
.8a31	20 11 82	jsr $8211			jsr 	LabelHere
.8a34	80 c3		bra $89f9			bra 	_CRMainLoop
.8a36					_CRGoRem:
.8a36	c8		iny				iny
.8a37	20 79 89	jsr $8979			jsr 	RemCommand
.8a3a	80 bd		bra $89f9			bra 	_CRMainLoop
.8a3c					_CRSyntaxError:
.8a3c	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.8a3f					_CRCallVector0:
.8a3f	7c ea 8a	jmp ($8aea,x)			jmp 	(VectorSet0,x)
.8a42					_CRBreak:
.8a42	a9 01		lda #$01		lda	#1
.8a44	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8a47					CRNoProgram:
.8a47	4c fe 84	jmp $84fe			jmp 	EndCommand
.8a4a					EOLCommand:
.8a4a	18		clc				clc
.8a4b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a4d	65 30		adc $30				adc 	codePtr
.8a4f	85 30		sta $30				sta 	codePtr
.8a51	90 02		bcc $8a55			bcc 	_CREExit
.8a53	e6 31		inc $31				inc 	codePtr+1
.8a55					_CREExit:
.8a55	80 8e		bra $89e5			bra 	RunNewLine
.8a57					Shift1Command:
.8a57	b1 30		lda ($30),y			lda 	(codePtr),y
.8a59	c8		iny				iny
.8a5a	0a		asl a				asl 	a
.8a5b	aa		tax				tax
.8a5c	7c 86 8b	jmp ($8b86,x)			jmp 	(VectorSet1,x)
.8a5f					Shift2Command:
.8a5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a61	c8		iny				iny
.8a62	0a		asl a				asl 	a
.8a63	aa		tax				tax
.8a64	7c a0 8b	jmp ($8ba0,x)			jmp 	(VectorSet2,x)
.8a67					Unused1:
.8a67					Unused2:
.8a67					Unused3:
.8a67					Unused4:
.8a67	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
>8a6a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a6a					VectorSetPunc:
>8a6a	2a 90					.word	ShiftLeft                        ; $00 <<
>8a6c	e1 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6e	d7 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a70	8a 9f					.word	SyntaxError                      ; $03 !!3
>8a72	8a 9f					.word	SyntaxError                      ; $04 ><
>8a74	eb 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a76	2d 90					.word	ShiftRight                       ; $06 >>
>8a78	8a 9f					.word	SyntaxError                      ; $07 !!7
>8a7a	8a 9f					.word	SyntaxError                      ; $08 !!8
>8a7c	8a 9f					.word	SyntaxError                      ; $09 !!9
>8a7e	8a 9f					.word	SyntaxError                      ; $0a !!10
>8a80	8a 9f					.word	SyntaxError                      ; $0b !!11
>8a82	8a 9f					.word	SyntaxError                      ; $0c !!12
>8a84	8a 9f					.word	SyntaxError                      ; $0d !!13
>8a86	8a 9f					.word	SyntaxError                      ; $0e !!14
>8a88	8a 9f					.word	SyntaxError                      ; $0f !!15
>8a8a	8a 9f					.word	SyntaxError                      ; $10 @
>8a8c	8a 9f					.word	SyntaxError                      ; $11 !!17
>8a8e	8a 9f					.word	SyntaxError                      ; $12 !!18
>8a90	8a 9f					.word	SyntaxError                      ; $13 [
>8a92	ae 8e					.word	IntegerDivide                    ; $14 \
>8a94	8a 9f					.word	SyntaxError                      ; $15 ]
>8a96	bb 91					.word	EorInteger                       ; $16 ^
>8a98	8a 9f					.word	SyntaxError                      ; $17 _
>8a9a	8a 9f					.word	SyntaxError                      ; $18 `
>8a9c	8a 9f					.word	SyntaxError                      ; $19 !!25
>8a9e	8a 9f					.word	SyntaxError                      ; $1a !!26
>8aa0	8a 9f					.word	SyntaxError                      ; $1b {
>8aa2	75 91					.word	OraInteger                       ; $1c |
>8aa4	8a 9f					.word	SyntaxError                      ; $1d }
>8aa6	8a 9f					.word	SyntaxError                      ; $1e ~
>8aa8	8a 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aaa	8a 9f					.word	SyntaxError                      ; $20
>8aac	01 92					.word	WordIndirect                     ; $21 !
>8aae	8a 9f					.word	SyntaxError                      ; $22 "
>8ab0	8a 9f					.word	SyntaxError                      ; $23 #
>8ab2	8a 9f					.word	SyntaxError                      ; $24 $
>8ab4	fb 8e					.word	IntegerModulus                   ; $25 %
>8ab6	2f 91					.word	AndInteger                       ; $26 &
>8ab8	8a 9f					.word	SyntaxError                      ; $27 '
>8aba	8a 9f					.word	SyntaxError                      ; $28 (
>8abc	8a 9f					.word	SyntaxError                      ; $29 )
>8abe	70 8f					.word	MulInteger                       ; $2a *
>8ac0	c1 90					.word	AddInteger                       ; $2b +
>8ac2	8a 9f					.word	SyntaxError                      ; $2c ,
>8ac4	04 91					.word	SubInteger                       ; $2d -
>8ac6	8a 9f					.word	SyntaxError                      ; $2e .
>8ac8	ec 93					.word	FDivideCommand                   ; $2f /
>8aca	8a 9f					.word	SyntaxError                      ; $30 0
>8acc	8a 9f					.word	SyntaxError                      ; $31 1
>8ace	8a 9f					.word	SyntaxError                      ; $32 2
>8ad0	8a 9f					.word	SyntaxError                      ; $33 3
>8ad2	8a 9f					.word	SyntaxError                      ; $34 4
>8ad4	8a 9f					.word	SyntaxError                      ; $35 5
>8ad6	8a 9f					.word	SyntaxError                      ; $36 6
>8ad8	8a 9f					.word	SyntaxError                      ; $37 7
>8ada	8a 9f					.word	SyntaxError                      ; $38 8
>8adc	8a 9f					.word	SyntaxError                      ; $39 9
>8ade	8a 9f					.word	SyntaxError                      ; $3a :
>8ae0	8a 9f					.word	SyntaxError                      ; $3b ;
>8ae2	c3 8d					.word	BinaryCompareLess                ; $3c <
>8ae4	b9 8d					.word	BinaryCompareEqual               ; $3d =
>8ae6	cd 8d					.word	BinaryCompareGreater             ; $3e >
>8ae8	28 92					.word	ByteIndirect                     ; $3f ?
.8aea					VectorSet0:
>8aea	4a 8a					.word	EOLCommand                       ; $80 !0:EOF
>8aec	57 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aee	5f 8a					.word	Shift2Command                    ; $82 !2:SH2
>8af0	5c 99					.word	AbsUnary                         ; $83 ABS(
>8af2	6c 99					.word	AllocUnary                       ; $84 ALLOC(
>8af4	dc 99					.word	AscUnary                         ; $85 ASC(
>8af6	a7 9b					.word	ChrUnary                         ; $86 CHR$(
>8af8	0c a5					.word	UnaryEvent                       ; $87 EVENT(
>8afa	b5 8d					.word	UnaryFalse                       ; $88 FALSE
>8afc	e9 99					.word	FracUnary                        ; $89 FRAC(
>8afe	a2 a4					.word	UnaryHit                         ; $8a HIT(
>8b00	ff 99					.word	IntUnary                         ; $8b INT(
>8b02	66 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b04	9c a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b06	75 a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b08	78 a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b0a	81 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b0c	11 9a					.word	LenUnary                         ; $91 LEN(
>8b0e	2f 9a					.word	Unary_Max                        ; $92 MAX(
>8b10	ab 9c					.word	Unary_Mid                        ; $93 MID$(
>8b12	2b 9a					.word	Unary_Min                        ; $94 MIN(
>8b14	86 9a					.word	Unary_Not                        ; $95 NOT(
>8b16	8a 9f					.word	SyntaxError                      ; $96 PLAYING(
>8b18	9c 9a					.word	Unary_Random                     ; $97 RANDOM(
>8b1a	91 9c					.word	Unary_Right                      ; $98 RIGHT$(
>8b1c	bb 9a					.word	Unary_Rnd                        ; $99 RND(
>8b1e	3c 9b					.word	SgnUnary                         ; $9a SGN(
>8b20	b9 9b					.word	SpcUnary                         ; $9b SPC(
>8b22	d4 9b					.word	Unary_Str                        ; $9c STR$(
>8b24	b0 a5					.word	UnaryTimer                       ; $9d TIMER(
>8b26	a9 8d					.word	UnaryTrue                        ; $9e TRUE
>8b28	5c 9b					.word	ValUnary                         ; $9f VAL(
>8b2a	01 85					.word	ForCommand                       ; $a0 FOR
>8b2c	4e 86					.word	IfCommand                        ; $a1 IF
>8b2e	67 8a					.word	Unused1                          ; $a2 PROC
>8b30	86 89					.word	Command_REPEAT                   ; $a3 REPEAT
>8b32	f5 8c					.word	Command_WHILE                    ; $a4 WHILE
>8b34	77 86					.word	EndIf                            ; $a5 ENDIF
>8b36	12 89					.word	Command_ENDPROC                  ; $a6 ENDPROC
>8b38	bb 85					.word	NextCommand                      ; $a7 NEXT
>8b3a	67 8a					.word	Unused4                          ; $a8 THEN
>8b3c	8f 89					.word	Command_UNTIL                    ; $a9 UNTIL
>8b3e	16 8d					.word	Command_WEND                     ; $aa WEND
>8b40	8a 9f					.word	SyntaxError                      ; $ab BY
>8b42	9f 83					.word	CallCommand                      ; $ac CALL
>8b44	44 a2					.word	CircleCommand                    ; $ad CIRCLE
>8b46	d9 83					.word	ClearCommand                     ; $ae CLEAR
>8b48	31 84					.word	ClearScreen                      ; $af CLS
>8b4a	8a 9f					.word	SyntaxError                      ; $b0 COLOR
>8b4c	8a 9f					.word	SyntaxError                      ; $b1 COLOUR
>8b4e	39 84					.word	Command_Data                     ; $b2 DATA
>8b50	41 84					.word	DimCommand                       ; $b3 DIM
>8b52	67 8a					.word	Unused3                          ; $b4 DOWNTO
>8b54	70 86					.word	ElseCode                         ; $b5 ELSE
>8b56	8a 9f					.word	SyntaxError                      ; $b6 FROM
>8b58	70 a4					.word	GfxCommand                       ; $b7 GFX
>8b5a	14 86					.word	Command_GOSUB                    ; $b8 GOSUB
>8b5c	32 86					.word	GotoCommand                      ; $b9 GOTO
>8b5e	8a 9f					.word	SyntaxError                      ; $ba HERE
>8b60	6e a2					.word	ImageCommand                     ; $bb IMAGE
>8b62	78 86					.word	LetCommand                       ; $bc LET
>8b64	c3 a2					.word	LineCommand                      ; $bd LINE
>8b66	6e 87					.word	Command_LOCAL                    ; $be LOCAL
>8b68	8a 9f					.word	SyntaxError                      ; $bf OFF
>8b6a	8a 9f					.word	SyntaxError                      ; $c0 ON
>8b6c	8a 9f					.word	SyntaxError                      ; $c1 OUTLINE
>8b6e	c8 a4					.word	PaletteCommand                   ; $c2 PALETTE
>8b70	bc a2					.word	PlotCommand                      ; $c3 PLOT
>8b72	45 88					.word	Command_Print                    ; $c4 PRINT
>8b74	20 89					.word	Command_Read                     ; $c5 READ
>8b76	40 a2					.word	RectangleCommand                 ; $c6 RECT
>8b78	79 89					.word	RemCommand                       ; $c7 REM
>8b7a	24 86					.word	Command_RETURN                   ; $c8 RETURN
>8b7c	8a 9f					.word	SyntaxError                      ; $c9 SOLID
>8b7e	8a 9f					.word	SyntaxError                      ; $ca SOUND
>8b80	4f a2					.word	SpriteCommand                    ; $cb SPRITE
>8b82	8b a2					.word	TextCommand                      ; $cc TEXT
>8b84	67 8a					.word	Unused2                          ; $cd TO
.8b86					VectorSet1:
>8b86	8a 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b88	8a 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b8a	8a 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b8c	70 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b8e	8f 83					.word	AssertCommand                    ; $84 ASSERT
>8b90	10 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8b92	fe 84					.word	EndCommand                       ; $86 END
>8b94	cd 86					.word	Command_List                     ; $87 LIST
>8b96	35 88					.word	NewCommand                       ; $88 NEW
>8b98	a8 89					.word	Command_Restore                  ; $89 RESTORE
>8b9a	da 89					.word	CommandRUN                       ; $8a RUN
>8b9c	55 a4					.word	SpritesCtrl                      ; $8b SPRITES
>8b9e	28 8c					.word	StopCommand                      ; $8c STOP
.8ba0					VectorSet2:
>8ba0	8a 9f					.word	SyntaxError                      ; $80 !0:EOF
>8ba2	8a 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba4	8a 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba6	49 9e					.word	Assemble_adc                     ; $83 ADC
>8ba8	41 9e					.word	Assemble_and                     ; $84 AND
>8baa	5d 9e					.word	Assemble_asl                     ; $85 ASL
>8bac	c7 9e					.word	Assemble_bcc                     ; $86 BCC
>8bae	cb 9e					.word	Assemble_bcs                     ; $87 BCS
>8bb0	d3 9e					.word	Assemble_beq                     ; $88 BEQ
>8bb2	8a 9e					.word	Assemble_bit                     ; $89 BIT
>8bb4	bb 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb6	cf 9e					.word	Assemble_bne                     ; $8b BNE
>8bb8	b7 9e					.word	Assemble_bpl                     ; $8c BPL
>8bba	d7 9e					.word	Assemble_bra                     ; $8d BRA
>8bbc	db 9e					.word	Assemble_brk                     ; $8e BRK
>8bbe	bf 9e					.word	Assemble_bvc                     ; $8f BVC
>8bc0	c3 9e					.word	Assemble_bvs                     ; $90 BVS
>8bc2	e3 9e					.word	Assemble_clc                     ; $91 CLC
>8bc4	37 9f					.word	Assemble_cld                     ; $92 CLD
>8bc6	f7 9e					.word	Assemble_cli                     ; $93 CLI
>8bc8	27 9f					.word	Assemble_clv                     ; $94 CLV
>8bca	55 9e					.word	Assemble_cmp                     ; $95 CMP
>8bcc	9e 9e					.word	Assemble_cpx                     ; $96 CPX
>8bce	99 9e					.word	Assemble_cpy                     ; $97 CPY
>8bd0	7b 9e					.word	Assemble_dec                     ; $98 DEC
>8bd2	33 9f					.word	Assemble_dex                     ; $99 DEX
>8bd4	0f 9f					.word	Assemble_dey                     ; $9a DEY
>8bd6	45 9e					.word	Assemble_eor                     ; $9b EOR
>8bd8	80 9e					.word	Assemble_inc                     ; $9c INC
>8bda	43 9f					.word	Assemble_inx                     ; $9d INX
>8bdc	2f 9f					.word	Assemble_iny                     ; $9e INY
>8bde	b2 9e					.word	Assemble_jmp                     ; $9f JMP
>8be0	ad 9e					.word	Assemble_jsr                     ; $a0 JSR
>8be2	51 9e					.word	Assemble_lda                     ; $a1 LDA
>8be4	76 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be6	94 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be8	67 9e					.word	Assemble_lsr                     ; $a4 LSR
>8bea	47 9f					.word	Assemble_nop                     ; $a5 NOP
>8bec	3d 9e					.word	Assemble_ora                     ; $a6 ORA
>8bee	f3 9e					.word	Assemble_pha                     ; $a7 PHA
>8bf0	df 9e					.word	Assemble_php                     ; $a8 PHP
>8bf2	3b 9f					.word	Assemble_phx                     ; $a9 PHX
>8bf4	fb 9e					.word	Assemble_phy                     ; $aa PHY
>8bf6	03 9f					.word	Assemble_pla                     ; $ab PLA
>8bf8	e7 9e					.word	Assemble_plp                     ; $ac PLP
>8bfa	4f 9f					.word	Assemble_plx                     ; $ad PLX
>8bfc	0b 9f					.word	Assemble_ply                     ; $ae PLY
>8bfe	62 9e					.word	Assemble_rol                     ; $af ROL
>8c00	6c 9e					.word	Assemble_ror                     ; $b0 ROR
>8c02	ef 9e					.word	Assemble_rti                     ; $b1 RTI
>8c04	ff 9e					.word	Assemble_rts                     ; $b2 RTS
>8c06	59 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c08	eb 9e					.word	Assemble_sec                     ; $b4 SEC
>8c0a	4b 9f					.word	Assemble_sed                     ; $b5 SED
>8c0c	07 9f					.word	Assemble_sei                     ; $b6 SEI
>8c0e	4d 9e					.word	Assemble_sta                     ; $b7 STA
>8c10	3f 9f					.word	Assemble_stp                     ; $b8 STP
>8c12	71 9e					.word	Assemble_stx                     ; $b9 STX
>8c14	8f 9e					.word	Assemble_sty                     ; $ba STY
>8c16	85 9e					.word	Assemble_stz                     ; $bb STZ
>8c18	23 9f					.word	Assemble_tax                     ; $bc TAX
>8c1a	1f 9f					.word	Assemble_tay                     ; $bd TAY
>8c1c	a8 9e					.word	Assemble_trb                     ; $be TRB
>8c1e	a3 9e					.word	Assemble_tsb                     ; $bf TSB
>8c20	2b 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c22	13 9f					.word	Assemble_txa                     ; $c1 TXA
>8c24	1b 9f					.word	Assemble_txs                     ; $c2 TXS
>8c26	17 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c28					StopCommand:
.8c28	a9 08		lda #$08		lda	#8
.8c2a	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c2d					ProcedureScan:
.8c2d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c2f	85 30		sta $30				sta 	codePtr
.8c31	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c33	85 31		sta $31				sta 	codePtr+1
.8c35					_PSLoop:
.8c35	b2 30		lda ($30)			lda 	(codePtr)
.8c37	f0 42		beq $8c7b			beq 	_PSExit
.8c39	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3d	c9 a2		cmp #$a2			cmp 	#KWD_PROC
.8c3f	d0 2d		bne $8c6e			bne 	_PSNext
.8c41	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c42	b1 30		lda ($30),y			lda 	(codePtr),y
.8c44	29 c0		and #$c0			and 	#$C0
.8c46	c9 40		cmp #$40			cmp 	#$40
.8c48	d0 32		bne $8c7c			bne 	_PSSyntax
.8c4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4c	18		clc				clc
.8c4d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c4f	85 37		sta $37				sta 	zTemp0+1
.8c51	c8		iny				iny 								; LSB
.8c52	b1 30		lda ($30),y			lda 	(codePtr),y
.8c54	85 36		sta $36				sta 	zTemp0
.8c56	c8		iny				iny 								; character after variable call.
.8c57	98		tya				tya 								; save Y offset at +7
.8c58	a0 07		ldy #$07			ldy 	#7
.8c5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c5e	a0 02		ldy #$02			ldy 	#2
.8c60	91 36		sta ($36),y			sta 	(zTemp0),y
.8c62	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c64					_PSCopy:
.8c64	b5 30		lda $30,x			lda 	safePtr,x
.8c66	c8		iny				iny
.8c67	91 36		sta ($36),y			sta 	(zTemp0),y
.8c69	e8		inx				inx
.8c6a	e0 04		cpx #$04			cpx 	#4
.8c6c	d0 f6		bne $8c64			bne 	_PSCopy
.8c6e					_PSNext:
.8c6e	18		clc				clc
.8c6f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c71	65 30		adc $30				adc 	codePtr
.8c73	85 30		sta $30				sta 	codePtr
.8c75	90 02		bcc $8c79			bcc 	_CREExit
.8c77	e6 31		inc $31				inc 	codePtr+1
.8c79					_CREExit:
.8c79	80 ba		bra $8c35			bra 	_PSLoop
.8c7b					_PSExit:
.8c7b	60		rts				rts
.8c7c					_PSSyntax:
.8c7c	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c7f					ScanForward:
.8c7f	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c81	86 37		stx $37				stx 	zTemp0+1
.8c83	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c85					_ScanLoop:
.8c85	b1 30		lda ($30),y			lda 	(codePtr),y
.8c87	c8		iny				iny
.8c88	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c8a	d0 0e		bne $8c9a			bne 	_ScanGoNext
.8c8c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c8e	f0 04		beq $8c94			beq 	_ScanMatch
.8c90	c5 37		cmp $37				cmp 	zTemp0+1
.8c92	d0 06		bne $8c9a			bne 	_ScanGoNext
.8c94					_ScanMatch:
.8c94	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c96	d0 01		bne $8c99			bne 	_ScanNotEndEOL
.8c98	88		dey				dey
.8c99					_ScanNotEndEOL:
.8c99	60		rts				rts
.8c9a					_ScanGoNext:
.8c9a	20 9f 8c	jsr $8c9f			jsr  	ScanForwardOne
.8c9d	80 e6		bra $8c85			bra 	_ScanLoop
.8c9f					ScanForwardOne:
.8c9f	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8ca1	90 3e		bcc $8ce1			bcc 	_SFWExit
.8ca3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ca5	90 18		bcc $8cbf			bcc 	_ScanSkipOne
.8ca7	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca9	b0 2f		bcs $8cda			bcs 	_ScanSkipData
.8cab	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cad	90 32		bcc $8ce1			bcc 	_SFWExit 					; if not, ordinary keywords.
.8caf	c9 ab		cmp #$ab			cmp 	#KWC_LAST_STRUCTURE+1
.8cb1	b0 2e		bcs $8ce1			bcs 	_SFWExit
.8cb3	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cb5	c9 a5		cmp #$a5			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb7	b0 28		bcs $8ce1			bcs 	_SFWExit
.8cb9	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cbb	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cbd	80 22		bra $8ce1			bra 	_SFWExit
.8cbf					_ScanSkipOne:
.8cbf	c8		iny				iny 								; consume the extra one.
.8cc0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cc2	d0 1d		bne $8ce1			bne 	_SFWExit
.8cc4	18		clc				clc
.8cc5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc7	65 30		adc $30				adc 	codePtr
.8cc9	85 30		sta $30				sta 	codePtr
.8ccb	90 02		bcc $8ccf			bcc 	_CREExit
.8ccd	e6 31		inc $31				inc 	codePtr+1
.8ccf					_CREExit:
.8ccf	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cd1	b2 30		lda ($30)			lda 	(codePtr)
.8cd3	d0 0c		bne $8ce1			bne 	_SFWExit 					; if not zero, more to scan
.8cd5	a9 13		lda #$13		lda	#19
.8cd7	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8cda					_ScanSkipData:
.8cda	88		dey				dey 								; point at data token
.8cdb	c8		iny				iny
.8cdc	98		tya				tya
.8cdd	38		sec				sec
.8cde	71 30		adc ($30),y			adc 	(codePtr),y
.8ce0	a8		tay				tay
.8ce1					_SFWExit:
.8ce1	60		rts				rts
.8ce2					ScanGetCurrentLineStep:
.8ce2	64 38		stz $38				stz 	zTemp1
.8ce4	a0 03		ldy #$03			ldy 	#3
.8ce6					_SGCLSLoop:
.8ce6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce8	c8		iny				iny
.8ce9	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ceb	f0 05		beq $8cf2			beq 	_SGCLSExit
.8ced	20 9f 8c	jsr $8c9f			jsr 	ScanForwardOne
.8cf0	80 f4		bra $8ce6			bra 	_SGCLSLoop
.8cf2					_SGCLSExit:
.8cf2	a5 38		lda $38				lda 	zTemp1
.8cf4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cf5					Command_WHILE:
.8cf5	5a		phy				phy 								; save position of the test
.8cf6	a2 00		ldx #$00			ldx 	#0
.8cf8	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; work out the number
.8cfb	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; check if zero
.8cfe	f0 0e		beq $8d0e			beq 	_WHExitLoop 				; if so exit the loop
.8d00	98		tya				tya 								; position *after* test.
.8d01	7a		ply				ply 								; restore position before test, at WHILE
.8d02	88		dey				dey
.8d03	48		pha				pha 								; push after test on the stack
.8d04	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d06	20 ee a5	jsr $a5ee			jsr 	StackOpen
.8d09	20 32 a6	jsr $a632			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d0c	7a		ply				ply 								; restore the position *after* the test
.8d0d	60		rts				rts
.8d0e					_WHExitLoop:
.8d0e	68		pla				pla 								; throw post loop position
.8d0f	a9 aa		lda #$aa			lda 	#KWD_WEND 					; scan forward past WEND
.8d11	aa		tax				tax
.8d12	20 7f 8c	jsr $8c7f			jsr 	ScanForward
.8d15	60		rts				rts
.8d16					Command_WEND:
.8d16	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d18	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d1a	20 1a a6	jsr $a61a			jsr 	StackCheckFrame
.8d1d	20 43 a6	jsr $a643			jsr 	STKLoadCodePosition 		; loop back
.8d20	20 0c a6	jsr $a60c			jsr 	StackClose		 			; erase the frame
.8d23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d24					CheckRightBracket:
.8d24	b1 30		lda ($30),y			lda 	(codePtr),y
.8d26	c8		iny				iny
.8d27	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d29	d0 0f		bne $8d3a			bne 	CNAFail
.8d2b	60		rts				rts
.8d2c					CheckComma:
.8d2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2e	c8		iny				iny
.8d2f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d31	d0 07		bne $8d3a			bne 	CNAFail
.8d33	60		rts				rts
.8d34					CheckNextA:
.8d34	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d36	d0 02		bne $8d3a			bne 	CNAFail
.8d38	c8		iny				iny 								; skip character
.8d39	60		rts				rts 								; and exit
.8d3a					CNAFail:
.8d3a	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d3d					ErrorHandler:
.8d3d	a8		tay				tay 								; find the error text
.8d3e	f0 49		beq $8d89			beq 	_EHEnd
.8d40	a2 00		ldx #$00			ldx 	#0
.8d42	a9 a3		lda #$a3			lda 	#((ErrorText) & $FF)
.8d44	85 36		sta $36				sta 	0+zTemp0
.8d46	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d48	85 37		sta $37				sta 	1+zTemp0
.8d4a					_EHFind:
.8d4a	88		dey				dey 								; found the error text ?
.8d4b	f0 0e		beq $8d5b			beq 	_EHFound
.8d4d					_EHFindZero:
.8d4d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d4f	e6 36		inc $36				inc 	zTemp0
.8d51	d0 02		bne $8d55			bne 	_EHFNoCarry
.8d53	e6 37		inc $37				inc 	zTemp0+1
.8d55					_EHFNoCarry:
.8d55	c9 00		cmp #$00			cmp 	#0
.8d57	d0 f4		bne $8d4d			bne 	_EHFindZero
.8d59	80 ef		bra $8d4a			bra 	_EHFind
.8d5b					_EHFound:
.8d5b	a5 36		lda $36				lda 	zTemp0 						; print message
.8d5d	a6 37		ldx $37				ldx 	zTemp0+1
.8d5f	20 96 8d	jsr $8d96			jsr 	PrintStringXA
.8d62	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d64	b1 30		lda ($30),y			lda 	(codePtr),y
.8d66	d0 05		bne $8d6d			bne 	_EHAtMsg
.8d68	c8		iny				iny
.8d69	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6b	f0 17		beq $8d84			beq 	_EHCREnd
.8d6d					_EHAtMsg:
.8d6d	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d6f	a9 8c		lda #$8c			lda 	#_AtMsg & $FF
.8d71	20 96 8d	jsr $8d96			jsr 	PrintStringXA
.8d74	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	48		pha				pha
.8d79	c8		iny				iny
.8d7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7c	aa		tax				tax
.8d7d	68		pla				pla
.8d7e	20 4f 92	jsr $924f			jsr 	LCLConvertInt16 				; convert XA to string
.8d81	20 96 8d	jsr $8d96			jsr 	PrintStringXA 				; and print it.
.8d84					_EHCREnd:
.8d84	a9 0d		lda #$0d			lda 	#13 						; new line
.8d86	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8d89					_EHEnd:
.8d89	4c 40 83	jmp $8340			jmp 	WarmStart
>8d8c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d94	20 00
.8d96					PrintStringXA:
.8d96	5a		phy				phy
.8d97	86 37		stx $37				stx 	zTemp0+1
.8d99	85 36		sta $36				sta 	zTemp0
.8d9b	a0 00		ldy #$00			ldy 	#0
.8d9d					_PSXALoop:
.8d9d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9f	f0 06		beq $8da7			beq 	_PSXAExit
.8da1	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8da4	c8		iny				iny
.8da5	80 f6		bra $8d9d			bra 	_PSXALoop
.8da7					_PSXAExit:
.8da7	7a		ply				ply
.8da8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da9					UnaryTrue:
.8da9	fa		plx				plx
.8daa					ReturnTrue:
.8daa	a9 01		lda #$01			lda 	#1  						; set to 1
.8dac	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.8daf	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8db1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8db4	60		rts				rts
.8db5					UnaryFalse:
.8db5	fa		plx				plx
.8db6					ReturnFalse:
.8db6	4c 00 9e	jmp $9e00			jmp 	NSMSetZero 					; set it all to zero
.8db9					BinaryCompareEqual:
.8db9	fa		plx				plx
.8dba	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8dbd	c9 00		cmp #$00			cmp 	#0
.8dbf	f0 e9		beq $8daa			beq 	ReturnTrue
.8dc1	80 f3		bra $8db6			bra 	ReturnFalse
.8dc3					BinaryCompareLess:
.8dc3	fa		plx				plx
.8dc4	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8dc7	c9 ff		cmp #$ff			cmp 	#$FF
.8dc9	f0 df		beq $8daa			beq 	ReturnTrue
.8dcb	80 e9		bra $8db6			bra 	ReturnFalse
.8dcd					BinaryCompareGreater:
.8dcd	fa		plx				plx
.8dce	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8dd1	c9 01		cmp #$01			cmp 	#1
.8dd3	f0 d5		beq $8daa			beq 	ReturnTrue
.8dd5	80 df		bra $8db6			bra 	ReturnFalse
.8dd7					BinaryCompareNotEqual:
.8dd7	fa		plx				plx
.8dd8	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8ddb	c9 00		cmp #$00			cmp 	#0
.8ddd	d0 cb		bne $8daa			bne 	ReturnTrue
.8ddf	80 d5		bra $8db6			bra 	ReturnFalse
.8de1					BinaryCompareLessEqual:
.8de1	fa		plx				plx
.8de2	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8de5	c9 01		cmp #$01			cmp 	#1
.8de7	d0 c1		bne $8daa			bne 	ReturnTrue
.8de9	80 cb		bra $8db6			bra 	ReturnFalse
.8deb					BinaryCompareGreaterEqual:
.8deb	fa		plx				plx
.8dec	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode
.8def	c9 ff		cmp #$ff			cmp 	#$FF
.8df1	d0 b7		bne $8daa			bne 	ReturnTrue
.8df3	80 c1		bra $8db6			bra 	ReturnFalse
.8df5					CompareBaseCode:
.8df5	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; make both values if references.
.8df8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8dfb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8dfe	29 10		and #$10			and 	#NSTString
.8e00	d0 40		bne $8e42			bne 	_CBCString
.8e02	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e05	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e08	d0 3b		bne $8e45			bne 	_CBCFloat
.8e0a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e0d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e10	29 08		and #$08			and 	#NSTFloat
.8e12	d0 31		bne $8e45			bne 	_CBCFloat
.8e14	20 48 8e	jsr $8e48			jsr 	CompareFixMinusZero
.8e17	e8		inx				inx
.8e18	20 48 8e	jsr $8e48			jsr 	CompareFixMinusZero
.8e1b	ca		dex				dex
.8e1c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e1f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e22	10 0b		bpl $8e2f			bpl 	_CDCSameSign
.8e24	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e27	30 16		bmi $8e3f			bmi 	_CBCLess 					; return $FF
.8e29					_CBCGreater:
.8e29	a9 01		lda #$01			lda 	#1
.8e2b	60		rts				rts
.8e2c					_CBCEqual:
.8e2c	a9 00		lda #$00			lda 	#0
.8e2e	60		rts				rts
.8e2f					_CDCSameSign:
.8e2f	20 9b 90	jsr $909b			jsr 	SubTopTwoStack 				; unsigned subtract
.8e32	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; or the mantissa together
.8e35	f0 f5		beq $8e2c			beq 	_CBCEqual 					; -0 == 0
.8e37	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e3a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e3d	10 ea		bpl $8e29			bpl 	_CBCGreater
.8e3f					_CBCLess:
.8e3f	a9 ff		lda #$ff			lda 	#$FF
.8e41	60		rts				rts
.8e42					_CBCString:
.8e42	4c f1 8f	jmp $8ff1			jmp 	CompareStrings
.8e45					_CBCFloat:
.8e45	4c d2 93	jmp $93d2			jmp 	CompareFloat
.8e48					CompareFixMinusZero:
.8e48	20 30 9e	jsr $9e30			jsr 	NSMIsZero
.8e4b	d0 03		bne $8e50			bne 	_CFXMZNotZero
.8e4d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e50					_CFXMZNotZero:
.8e50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e51					StringConcat:
.8e51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e54	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e57	29 18		and #$18			and 	#NSBTypeMask
.8e59	c9 10		cmp #$10			cmp 	#NSTString
.8e5b	d0 4e		bne $8eab			bne		_SCType
.8e5d	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e5f	e8		inx				inx
.8e60	20 7e 8e	jsr $8e7e			jsr 	_SCSetupZ0 					; setup for second
.8e63	20 89 8e	jsr $8e89			jsr 	_SCLengthZ0 				; length for second
.8e66	ca		dex				dex
.8e67	20 7e 8e	jsr $8e7e			jsr 	_SCSetupZ0 					; setup for first
.8e6a	20 89 8e	jsr $8e89			jsr 	_SCLengthZ0 				; length for first
.8e6d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e6f	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate
.8e72	20 9c 8e	jsr $8e9c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e75	e8		inx				inx
.8e76	20 7e 8e	jsr $8e7e			jsr 	_SCSetupZ0 					; copy second out
.8e79	20 9c 8e	jsr $8e9c			jsr 	_SCCopy
.8e7c	ca		dex				dex
.8e7d	60		rts				rts
.8e7e					_SCSetupZ0:
.8e7e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e81	85 36		sta $36				sta 	zTemp0
.8e83	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e86	85 37		sta $37				sta 	zTemp0+1
.8e88	60		rts				rts
.8e89					_SCLengthZ0:
.8e89	5a		phy				phy
.8e8a	a0 00		ldy #$00			ldy 	#0
.8e8c					_SCLenLoop:
.8e8c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e8e	f0 0a		beq $8e9a			beq 	_SCLExit
.8e90	c8		iny				iny
.8e91	e6 38		inc $38				inc 	zTemp1
.8e93	10 f7		bpl $8e8c			bpl		_SCLenLoop
.8e95	a9 09		lda #$09		lda	#9
.8e97	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8e9a					_SCLExit:
.8e9a	7a		ply				ply
.8e9b	60		rts				rts
.8e9c					_SCCopy:
.8e9c	5a		phy				phy
.8e9d	a0 00		ldy #$00			ldy 	#0
.8e9f					_SCCopyLoop:
.8e9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea1	f0 06		beq $8ea9			beq 	_SCCExit
.8ea3	20 1f a7	jsr $a71f			jsr 	StringTempWrite
.8ea6	c8		iny				iny
.8ea7	80 f6		bra $8e9f			bra 	_SCCopyLoop
.8ea9					_SCCExit:
.8ea9	7a		ply				ply
.8eaa	60		rts				rts
.8eab					_SCType:
.8eab	4c 94 9f	jmp $9f94			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eae					IntegerDivide:
.8eae	fa		plx				plx
.8eaf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eb2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eb5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb6	0a		asl a				asl 	a
.8eb7	10 05		bpl $8ebe			bpl 	_NotRef
.8eb9	48		pha				pha
.8eba	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ebd	68		pla				pla
.8ebe					_NotRef:
.8ebe	0a		asl a				asl 	a
.8ebf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ec1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec7	f0 03		beq $8ecc			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec9	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.8ecc					_IntegerCode:
.8ecc	20 ee 8e	jsr $8eee			jsr 	CheckDivideZero 			; do div zero check
.8ecf	20 26 8f	jsr $8f26			jsr 	Int32Divide 				; do the division
.8ed2	20 e3 8f	jsr $8fe3			jsr 	CalculateSign 				; calculate result sign
.8ed5					NSMCopyPlusTwoToZero:
.8ed5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8edb	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ede	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ee1	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ee4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee7	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8eea	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8eed	60		rts				rts
.8eee					CheckDivideZero:
.8eee	e8		inx				inx
.8eef	20 30 9e	jsr $9e30			jsr 	NSMIsZero
.8ef2	f0 02		beq $8ef6			beq 	_CDVError
.8ef4	ca		dex				dex
.8ef5	60		rts				rts
.8ef6					_CDVError:
.8ef6	a9 03		lda #$03		lda	#3
.8ef8	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8efb					IntegerModulus:
.8efb	fa		plx				plx
.8efc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eff	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f02	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f03	0a		asl a				asl 	a
.8f04	10 05		bpl $8f0b			bpl 	_NotRef
.8f06	48		pha				pha
.8f07	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f0a	68		pla				pla
.8f0b					_NotRef:
.8f0b	0a		asl a				asl 	a
.8f0c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f0e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f11	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f14	f0 03		beq $8f19			beq 	_IntegerCode 				; if clear, then we have two integers
.8f16	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.8f19					_IntegerCode:
.8f19					IntegerModulusNoCheck:
.8f19	20 ee 8e	jsr $8eee			jsr 	CheckDivideZero 			; do div zero check
.8f1c	20 26 8f	jsr $8f26			jsr 	Int32Divide 				; do the division
.8f1f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f22	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f25	60		rts				rts
.8f26					Int32Divide:
.8f26	48		pha				pha 								; save AXY
.8f27	5a		phy				phy
.8f28	20 d7 9d	jsr $9dd7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f2b	20 fc 9d	jsr $9dfc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f2e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f30					_I32DivideLoop:
.8f30	e8		inx				inx
.8f31	e8		inx				inx
.8f32	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f35	ca		dex				dex
.8f36	ca		dex				dex
.8f37	20 16 9e	jsr $9e16			jsr 	NSMRotateLeft
.8f3a	20 66 8f	jsr $8f66			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f3d	90 03		bcc $8f42			bcc 	_I32DivideNoCarryIn
.8f3f	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f42					_I32DivideNoCarryIn:
.8f42	88		dey				dey 								; loop round till division completed.
.8f43	d0 eb		bne $8f30			bne 	_I32DivideLoop
.8f45	7a		ply				ply 								; restore AXY and exit
.8f46	68		pla				pla
.8f47	60		rts				rts
.8f48					Int32ShiftDivide:
.8f48	48		pha				pha 								; save AY
.8f49	5a		phy				phy
.8f4a	e8		inx				inx 								; clear S[X+2]
.8f4b	e8		inx				inx
.8f4c	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.8f4f	ca		dex				dex
.8f50	ca		dex				dex
.8f51	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f53					_I32SDLoop:
.8f53	20 66 8f	jsr $8f66			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f56	e8		inx				inx
.8f57	e8		inx				inx
.8f58	20 16 9e	jsr $9e16			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f5b	ca		dex				dex
.8f5c	ca		dex				dex
.8f5d	20 16 9e	jsr $9e16			jsr 	NSMRotateLeft
.8f60	88		dey				dey 	 							; do 31 times
.8f61	d0 f0		bne $8f53			bne 	_I32SDLoop
.8f63	7a		ply				ply 								; restore AY and exit
.8f64	68		pla				pla
.8f65	60		rts				rts
.8f66					DivideCheckSubtract:
.8f66	20 9b 90	jsr $909b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f69	b0 04		bcs $8f6f			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f6b	20 75 90	jsr $9075			jsr 	AddTopTwoStack 				; add it back in
.8f6e	18		clc				clc 								; and return False
.8f6f					_DCSExit:
.8f6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f70					MulInteger:
.8f70	fa		plx				plx
.8f71	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f74	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f77	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f78	0a		asl a				asl 	a
.8f79	10 05		bpl $8f80			bpl 	_NotRef
.8f7b	48		pha				pha
.8f7c	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f7f	68		pla				pla
.8f80					_NotRef:
.8f80	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f81	30 0b		bmi $8f8e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f83	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f86	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f89	f0 06		beq $8f91			beq 	_IntegerCode 				; if clear, then we have two integers
.8f8b	4c a9 94	jmp $94a9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f8e					_StringData:
.8f8e	4c 9e 9f	jmp $9f9e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f91					_IntegerCode:
.8f91	20 9e 8f	jsr $8f9e			jsr 	MultiplyShort
.8f94	c9 00		cmp #$00			cmp 	#0
.8f96	f0 05		beq $8f9d			beq 	_MIExit
.8f98	a9 04		lda #$04		lda	#4
.8f9a	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.8f9d					_MIExit:
.8f9d	60		rts				rts
.8f9e					MultiplyShort:
.8f9e	5a		phy				phy 								; save Y
.8f9f	20 d7 9d	jsr $9dd7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fa2	20 fc 9d	jsr $9dfc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fa5	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa7					_I32MLoop:
.8fa7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8faa	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fad	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fb0	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fb3	f0 28		beq $8fdd			beq 	_I32MExit 					; exit if zero
.8fb5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb8	29 01		and #$01			and 	#1
.8fba	f0 0e		beq $8fca			beq 	_I32MNoAdd
.8fbc	20 75 90	jsr $9075			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fbf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fc2	10 06		bpl $8fca			bpl 	_I32MNoAdd
.8fc4					_I32ShiftRight:
.8fc4	20 23 9e	jsr $9e23			jsr 	NSMShiftRight 				; shift S[X] right
.8fc7	c8		iny				iny 								; increment shift count
.8fc8	80 0a		bra $8fd4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fca					_I32MNoAdd:
.8fca	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fcd	70 f5		bvs $8fc4			bvs 	_I32ShiftRight 				; instead.
.8fcf	e8		inx				inx
.8fd0	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fd3	ca		dex				dex
.8fd4					_I32MShiftUpper:
.8fd4	e8		inx				inx 								; shift S[X+2] right
.8fd5	e8		inx				inx
.8fd6	20 23 9e	jsr $9e23			jsr 	NSMShiftRight
.8fd9	ca		dex				dex
.8fda	ca		dex				dex
.8fdb	80 ca		bra $8fa7			bra 	_I32MLoop 					; try again.
.8fdd					_I32MExit:
.8fdd	20 e3 8f	jsr $8fe3			jsr 	CalculateSign
.8fe0	98		tya				tya 								; shift in A
.8fe1	7a		ply				ply 								; restore Y and exit
.8fe2	60		rts				rts
.8fe3					CalculateSign:
.8fe3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe6	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fec	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fed	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8ff0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8ff1					CompareStrings:
.8ff1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8ff4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff7	29 10		and #$10			and 	#NSBIsString
.8ff9	f0 2c		beq $9027			beq 	_CSTypeError
.8ffb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ffe	85 36		sta $36				sta 	zTemp0
.9000	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9003	85 37		sta $37				sta 	zTemp0+1
.9005	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9008	85 38		sta $38				sta 	zTemp1
.900a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.900d	85 39		sta $39				sta 	zTemp1+1
.900f	5a		phy				phy 								; save Y so we can access strings
.9010	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9012					_CSLoop:
.9012	c8		iny				iny
.9013	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9015	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9017	d0 06		bne $901f			bne 	_CSDifferent
.9019	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.901b	d0 f5		bne $9012			bne 	_CSLoop 					; still comparing
.901d					_CSExit:
.901d	7a		ply				ply 								; reached end, return zero in A from EOS
.901e	60		rts				rts
.901f					_CSDifferent:
.901f	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9021	90 fa		bcc $901d			bcc		_CSExit
.9023	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9025	80 f6		bra $901d			bra 	_CSExit
.9027					_CSTypeError:
.9027	4c 94 9f	jmp $9f94			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.902a					ShiftLeft:
.902a	38		sec				sec
.902b	80 01		bra $902e			bra 	ShiftMain
.902d					ShiftRight:
.902d	18		clc				clc
.902e					ShiftMain:
.902e	fa		plx				plx 								; restore X
.902f	08		php				php 								; save direction
.9030	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9033	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9036	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9037	0a		asl a				asl 	a
.9038	10 05		bpl $903f			bpl 	_NotRef
.903a	48		pha				pha
.903b	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903e	68		pla				pla
.903f					_NotRef:
.903f	0a		asl a				asl 	a
.9040	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9042	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9045	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9048	f0 03		beq $904d			beq 	_IntegerCode 				; if clear, then we have two integers
.904a	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.904d					_IntegerCode:
.904d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9050	29 e0		and #$e0			and 	#$E0
.9052	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9055	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9058	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.905b	d0 13		bne $9070			bne 	_SMExit0 					; if >= 32 it will always return zero.
.905d					_SMLoop:
.905d	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9060	30 11		bmi $9073			bmi 	_SMExit 					; exit if done.
.9062	28		plp				plp 								; restore direcition setting
.9063	08		php				php
.9064	90 05		bcc $906b			bcc 	_SMRight
.9066	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; shift left if CS
.9069	80 f2		bra $905d			bra 	_SMLoop
.906b					_SMRight:
.906b	20 23 9e	jsr $9e23			jsr 	NSMShiftRight 				; shift right if CC
.906e	80 ed		bra $905d			bra 	_SMLoop
.9070					_SMExit0:
.9070	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; return zero.
.9073					_SMExit:
.9073	28		plp				plp 								; throw direction
.9074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9075					AddTopTwoStack:
.9075	18		clc				clc
.9076	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9079	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.907c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.907f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9082	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9085	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9088	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.908b	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.908e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9091	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9094	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9097	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.909a	60		rts				rts
.909b					SubTopTwoStack:
.909b	38		sec				sec
.909c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.909f	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90a2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90a5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a8	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90ab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90ae	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90b1	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90b4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90ba	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90bd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90c0	60		rts				rts
.90c1					AddInteger:
.90c1	fa		plx				plx
.90c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c9	0a		asl a				asl 	a
.90ca	10 05		bpl $90d1			bpl 	_NotRef
.90cc	48		pha				pha
.90cd	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90d0	68		pla				pla
.90d1					_NotRef:
.90d1	0a		asl a				asl 	a 							; put MSB of type into A:7
.90d2	30 0b		bmi $90df			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90d4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90da	f0 06		beq $90e2			beq 	_IntegerCode 				; if clear, then we have two integers
.90dc	4c 29 93	jmp $9329			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90df					_StringData:
.90df	4c 51 8e	jmp $8e51			jmp 	StringConcat							; at least one string - don't know both are strings.
.90e2					_IntegerCode:
.90e2					AddCode:
.90e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90e5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e8	10 8b		bpl $9075			bpl 	AddTopTwoStack
.90ea	20 9b 90	jsr $909b			jsr 	SubTopTwoStack 				; do a physical subtraction
.90ed	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90f0	10 09		bpl $90fb			bpl 	_AddExit
.90f2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90f5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f8	20 b5 9d	jsr $9db5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90fb					_AddExit:
.90fb	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; check for -0
.90fe	d0 03		bne $9103			bne 	_AddNonZero
.9100	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9103					_AddNonZero:
.9103	60		rts				rts
.9104					SubInteger:
.9104	fa		plx				plx
.9105	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9108	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.910b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.910c	0a		asl a				asl 	a
.910d	10 05		bpl $9114			bpl 	_NotRef
.910f	48		pha				pha
.9110	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9113	68		pla				pla
.9114					_NotRef:
.9114	0a		asl a				asl 	a 							; put MSB of type into A:7
.9115	30 0b		bmi $9122			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9117	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.911a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.911d	f0 06		beq $9125			beq 	_IntegerCode 				; if clear, then we have two integers
.911f	4c 2e 93	jmp $932e			jmp 	FloatingPointSub 							; otherwise at least one float.
.9122					_StringData:
.9122	4c 9e 9f	jmp $9f9e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9125					_IntegerCode:
.9125	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9128	49 80		eor #$80			eor 	#$80
.912a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.912d	80 b3		bra $90e2			bra 	AddCode 					; and do the same code as add.
.912f					AndInteger:
.912f	fa		plx				plx
.9130	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9133	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9136	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9137	0a		asl a				asl 	a
.9138	10 05		bpl $913f			bpl 	_NotRef
.913a	48		pha				pha
.913b	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.913e	68		pla				pla
.913f					_NotRef:
.913f	0a		asl a				asl 	a
.9140	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9142	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9145	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9148	f0 03		beq $914d			beq 	_IntegerCode 				; if clear, then we have two integers
.914a	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.914d					_IntegerCode:
.914d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9150	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9153	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9156	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9159	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.915c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.915f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9162	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9165	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9168	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.916b	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.916e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9171	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9174	60		rts				rts
.9175					OraInteger:
.9175	fa		plx				plx
.9176	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9179	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.917c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.917d	0a		asl a				asl 	a
.917e	10 05		bpl $9185			bpl 	_NotRef
.9180	48		pha				pha
.9181	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9184	68		pla				pla
.9185					_NotRef:
.9185	0a		asl a				asl 	a
.9186	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9188	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.918b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.918e	f0 03		beq $9193			beq 	_IntegerCode 				; if clear, then we have two integers
.9190	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.9193					_IntegerCode:
.9193	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9196	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9199	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.919c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.919f	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91a2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91a5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a8	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91ab	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ae	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91b1	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91b4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b7	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91ba	60		rts				rts
.91bb					EorInteger:
.91bb	fa		plx				plx
.91bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91bf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91c2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91c3	0a		asl a				asl 	a
.91c4	10 05		bpl $91cb			bpl 	_NotRef
.91c6	48		pha				pha
.91c7	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91ca	68		pla				pla
.91cb					_NotRef:
.91cb	0a		asl a				asl 	a
.91cc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91ce	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91d1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91d4	f0 03		beq $91d9			beq 	_IntegerCode 				; if clear, then we have two integers
.91d6	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.91d9					_IntegerCode:
.91d9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91dc	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91e2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91e5	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91eb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91ee	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91f1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91f4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f7	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91fa	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91fd	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9200	60		rts				rts
.9201					WordIndirect:
.9201	fa		plx				plx
.9202	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9205	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9208	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9209	0a		asl a				asl 	a
.920a	10 05		bpl $9211			bpl 	_NotRef
.920c	48		pha				pha
.920d	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9210	68		pla				pla
.9211					_NotRef:
.9211	0a		asl a				asl 	a
.9212	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9214	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9217	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.921a	f0 03		beq $921f			beq 	_IntegerCode 				; if clear, then we have two integers
.921c	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.921f					_IntegerCode:
.921f	20 e2 90	jsr $90e2			jsr 	AddCode 					; add the two values
.9222	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9224	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9227	60		rts				rts
.9228					ByteIndirect:
.9228	fa		plx				plx
.9229	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.922c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.922f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9230	0a		asl a				asl 	a
.9231	10 05		bpl $9238			bpl 	_NotRef
.9233	48		pha				pha
.9234	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9237	68		pla				pla
.9238					_NotRef:
.9238	0a		asl a				asl 	a
.9239	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.923b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.923e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9241	f0 03		beq $9246			beq 	_IntegerCode 				; if clear, then we have two integers
.9243	4c 94 9f	jmp $9f94			jmp 	TypeError 					; anything else, type mismatch.
.9246					_IntegerCode:
.9246	20 e2 90	jsr $90e2			jsr 	AddCode 					; add the two values
.9249	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.924b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.924e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.924f					LCLConvertInt16:
.924f	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9252	8e 10 04	stx $0410			stx 	NSMantissa1
.9255	9c 18 04	stz $0418			stz 	NSMantissa2
.9258	9c 20 04	stz $0420			stz 	NSMantissa3
.925b	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.925e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9260	a9 0a		lda #$0a			lda 	#10 						; base
.9262	80 00		bra $9264			bra 	ConvertInt32
.9264					ConvertInt32:
.9264	5a		phy				phy
.9265	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9267	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.926a	10 08		bpl $9274			bpl 	_CI32NotNeg
.926c	48		pha				pha
.926d	a9 2d		lda #$2d			lda 	#'-'
.926f	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9272	c8		iny				iny
.9273	68		pla				pla
.9274					_CI32NotNeg:
.9274	20 82 92	jsr $9282			jsr 	_CI32DivideConvert 			; recursive conversion
.9277	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9279	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.927c	7a		ply				ply
.927d	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.927f	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.9281	60		rts				rts
.9282					_CI32DivideConvert:
.9282	e8		inx				inx 								; write to next slot up
.9283	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.9286	ca		dex				dex
.9287	20 26 8f	jsr $8f26			jsr 	Int32Divide 				; divide
.928a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.928d	48		pha				pha
.928e	20 d5 8e	jsr $8ed5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9291	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; is it zero ?
.9294	f0 06		beq $929c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9296	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9299	20 82 92	jsr $9282			jsr 	_CI32DivideConvert 			; and recusrively call.
.929c					_CI32NoRecurse:
.929c	68		pla				pla 								; remainder
.929d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.929f	90 02		bcc $92a3			bcc 	_CI32NotHex
.92a1	69 26		adc #$26			adc 	#6+32
.92a3					_CI32NotHex:
.92a3	69 30		adc #$30			adc 	#48
.92a5	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92a8	c8		iny				iny
.92a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92aa					PrecedenceLevel:
>92aa	04					.byte	 4	; $00 <<
>92ab	02					.byte	 2	; $01 <=
>92ac	02					.byte	 2	; $02 <>
>92ad	00					.byte	 0	; $03 !!3
>92ae	00					.byte	 0	; $04 ><
>92af	02					.byte	 2	; $05 >=
>92b0	04					.byte	 4	; $06 >>
>92b1	00					.byte	 0	; $07 !!7
>92b2	00					.byte	 0	; $08 !!8
>92b3	00					.byte	 0	; $09 !!9
>92b4	00					.byte	 0	; $0a !!10
>92b5	00					.byte	 0	; $0b !!11
>92b6	00					.byte	 0	; $0c !!12
>92b7	00					.byte	 0	; $0d !!13
>92b8	00					.byte	 0	; $0e !!14
>92b9	00					.byte	 0	; $0f !!15
>92ba	00					.byte	 0	; $10 @
>92bb	00					.byte	 0	; $11 !!17
>92bc	00					.byte	 0	; $12 !!18
>92bd	00					.byte	 0	; $13 [
>92be	04					.byte	 4	; $14 \
>92bf	00					.byte	 0	; $15 ]
>92c0	01					.byte	 1	; $16 ^
>92c1	00					.byte	 0	; $17 _
>92c2	00					.byte	 0	; $18 `
>92c3	00					.byte	 0	; $19 !!25
>92c4	00					.byte	 0	; $1a !!26
>92c5	00					.byte	 0	; $1b {
>92c6	01					.byte	 1	; $1c |
>92c7	00					.byte	 0	; $1d }
>92c8	00					.byte	 0	; $1e ~
>92c9	00					.byte	 0	; $1f [7m<7F>[m
>92ca	00					.byte	 0	; $20
>92cb	05					.byte	 5	; $21 !
>92cc	00					.byte	 0	; $22 "
>92cd	00					.byte	 0	; $23 #
>92ce	05					.byte	 5	; $24 $
>92cf	04					.byte	 4	; $25 %
>92d0	01					.byte	 1	; $26 &
>92d1	00					.byte	 0	; $27 '
>92d2	00					.byte	 0	; $28 (
>92d3	00					.byte	 0	; $29 )
>92d4	04					.byte	 4	; $2a *
>92d5	03					.byte	 3	; $2b +
>92d6	00					.byte	 0	; $2c ,
>92d7	03					.byte	 3	; $2d -
>92d8	00					.byte	 0	; $2e .
>92d9	04					.byte	 4	; $2f /
>92da	00					.byte	 0	; $30 0
>92db	00					.byte	 0	; $31 1
>92dc	00					.byte	 0	; $32 2
>92dd	00					.byte	 0	; $33 3
>92de	00					.byte	 0	; $34 4
>92df	00					.byte	 0	; $35 5
>92e0	00					.byte	 0	; $36 6
>92e1	00					.byte	 0	; $37 7
>92e2	00					.byte	 0	; $38 8
>92e3	00					.byte	 0	; $39 9
>92e4	00					.byte	 0	; $3a :
>92e5	00					.byte	 0	; $3b ;
>92e6	02					.byte	 2	; $3c <
>92e7	02					.byte	 2	; $3d =
>92e8	02					.byte	 2	; $3e >
>92e9	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92ea					EvaluateExpressionAt0:
.92ea	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92ec					EvaluateExpression:
.92ec	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92ee					EvaluateExpressionAtPrecedence:
.92ee	48		pha				pha 								; save precedence level
.92ef	20 c6 97	jsr $97c6			jsr 	EvaluateTerm 				; evaluate term into level X.
.92f2	68		pla				pla 								; restore precedence level.
.92f3					_EXPRLoop:
.92f3	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92f5	b1 30		lda ($30),y			lda 	(codePtr),y
.92f7	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f9	b0 25		bcs $9320			bcs 	_EXPRExit
.92fb	da		phx				phx 								; read the operator precedence
.92fc	aa		tax				tax
.92fd	bd aa 92	lda $92aa,x			lda 	PrecedenceLevel,x
.9300	fa		plx				plx
.9301	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9303	f0 1b		beq $9320			beq 	_EXPRExit
.9305	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9307	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9309	c5 37		cmp $37				cmp 	zTemp0+1
.930b	b0 13		bcs $9320			bcs		_EXPRExit 					; if current >= operator exit
.930d	48		pha				pha 								; save current precedence.
.930e	b1 30		lda ($30),y			lda 	(codePtr),y
.9310	c8		iny				iny
.9311	48		pha				pha
.9312	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9314	e8		inx				inx 								; work out the right hand side.
.9315	20 ee 92	jsr $92ee			jsr 	EvaluateExpressionAtPrecedence
.9318	ca		dex				dex
.9319	68		pla				pla 								; get operator, call the code.
.931a	20 23 93	jsr $9323			jsr 	_EXPRCaller
.931d	68		pla				pla 								; restore precedence level
.931e	80 d3		bra $92f3			bra 	_EXPRLoop 					; and go round.
.9320					_EXPRExit:
.9320	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9322	60		rts				rts
.9323					_EXPRCaller:
.9323	da		phx				phx 								; save on stack, first thing is to restore it
.9324	0a		asl a				asl 	a 							; double so can use vectors into X
.9325	aa		tax				tax
.9326	7c 6a 8a	jmp ($8a6a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9329					FloatingPointAdd:
.9329	20 d2 94	jsr $94d2			jsr 	FloatPrepare 				; prepare for floats
.932c	80 0b		bra $9339			bra 	FloatAdd
.932e					FloatingPointSub:
.932e	20 d2 94	jsr $94d2			jsr 	FloatPrepare 				; prepare for floats
.9331					FloatSubtract:
.9331	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9334	49 80		eor #$80			eor 	#$80
.9336	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9339					FloatAdd:
.9339	48		pha				pha
.933a	5a		phy				phy
.933b	20 e3 94	jsr $94e3			jsr 	NSNormalise 				; normalise S[X]
.933e	f0 5c		beq $939c			beq 	_FAReturn1
.9340	e8		inx				inx 								; normalise S[X+1]
.9341	20 e3 94	jsr $94e3			jsr 	NSNormalise
.9344	ca		dex				dex
.9345	c9 00		cmp #$00			cmp 	#0
.9347	f0 77		beq $93c0			beq 	_FAExit 					; if so, just return A
.9349	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.934c	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.934f	f0 1b		beq $936c			beq 	_FAExponentsEqual
.9351	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9354	a8		tay				tay
.9355	38		sec				sec 								; do a signed comparison of the exponents.
.9356	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9359	50 02		bvc $935d			bvc 	_FANoSignedChange
.935b	49 80		eor #$80			eor 	#$80
.935d					_FANoSignedChange:
.935d	29 80		and #$80			and 	#$80
.935f	10 03		bpl $9364			bpl 	_FAHaveMax
.9361	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9364					_FAHaveMax:
.9364	20 c3 93	jsr $93c3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9367	e8		inx				inx
.9368	20 c3 93	jsr $93c3			jsr 	_FAShiftToExponent
.936b	ca		dex				dex
.936c					_FAExponentsEqual:
.936c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.936f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9372	30 10		bmi $9384			bmi 	_FADifferentSigns
.9374	20 75 90	jsr $9075			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9377	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.937a	10 44		bpl $93c0			bpl 	_FAExit 					; if no, we are done.
.937c	20 23 9e	jsr $9e23			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.937f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9382	80 3c		bra $93c0			bra 	_FAExit
.9384					_FADifferentSigns:
.9384	20 9b 90	jsr $909b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9387	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.938a	10 06		bpl $9392			bpl 	_FACheckZero 				; if no, check for -0
.938c	20 ac 9d	jsr $9dac			jsr 	NSMNegate 					; netate result
.938f	20 b5 9d	jsr $9db5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9392					_FACheckZero:
.9392	20 30 9e	jsr $9e30			jsr 	NSMIsZero	 				; check for -0
.9395	d0 29		bne $93c0			bne 	_FAExit
.9397	9e 00 04	stz $0400,x			stz 	NSStatus,x
.939a	80 24		bra $93c0			bra 	_FAExit
.939c					_FAReturn1:
.939c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.939f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93a2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93a5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a8	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93ab	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93ae	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93b1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93b4	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93ba	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93bd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93c0					_FAExit:
.93c0	7a		ply				ply
.93c1	68		pla				pla
.93c2	60		rts				rts
.93c3					_FAShiftToExponent:
.93c3					_FAShiftToExponent2:
.93c3	98		tya				tya 								; compare Y to exponent
.93c4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c7	f0 08		beq $93d1			beq 	_FASEExit 					; exit if so.
.93c9	20 23 9e	jsr $9e23			jsr 	NSMShiftRight	 			; shift the mantissa right
.93cc	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93cf	80 f2		bra $93c3			bra 	_FAShiftToExponent2
.93d1					_FASEExit:
.93d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93d2					CompareFloat:
.93d2	20 31 93	jsr $9331			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93d5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d8	29 f8		and #$f8			and 	#$F8
.93da	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93dd	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93e0	f0 09		beq $93eb			beq 	_FCExit 					; zero, so approximately identical
.93e2	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93e4	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e7	10 02		bpl $93eb			bpl 	_FCExit
.93e9					_FCNegative:
.93e9	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93eb					_FCExit:
.93eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93ec					FDivideCommand:
.93ec	fa		plx				plx	 								; restore stack position
.93ed	20 d2 94	jsr $94d2			jsr 	FloatPrepare 				; prepare for floats
.93f0					FloatDivide:
.93f0	48		pha				pha
.93f1	e8		inx				inx
.93f2	20 e3 94	jsr $94e3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93f5	ca		dex				dex
.93f6	c9 00		cmp #$00			cmp 	#0
.93f8	f0 20		beq $941a			beq 	_FDZero
.93fa	20 e3 94	jsr $94e3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93fd	f0 19		beq $9418			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93ff	20 48 8f	jsr $8f48			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9402	20 d5 8e	jsr $8ed5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9405	20 e3 94	jsr $94e3			jsr		NSNormalise 				; renormalise
.9408	20 e3 8f	jsr $8fe3			jsr 	CalculateSign 				; calculate result sign
.940b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.940e	38		sec				sec
.940f	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9412	38		sec				sec
.9413	e9 1e		sbc #$1e			sbc 	#30
.9415	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9418					_FDExit:
.9418	68		pla				pla
.9419	60		rts				rts
.941a					_FDZero:
.941a	a9 03		lda #$03		lda	#3
.941c	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.941f					FloatFractionalPart:
.941f	5a		phy				phy
.9420	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9423	29 7f		and #$7f			and 	#$7F
.9425	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9428	20 e3 94	jsr $94e3			jsr 	NSNormalise
.942b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.942e	38		sec				sec
.942f	e9 e0		sbc #$e0			sbc 	#$E0
.9431	90 31		bcc $9464			bcc 	_FFPExit 					; already fractional
.9433	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9435	b0 2a		bcs $9461			bcs 	_FFPZero
.9437	a8		tay				tay 								; put count to do in Y
.9438	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.943b	20 66 94	jsr $9466			jsr 	_FFPPartial
.943e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9441	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9444	20 66 94	jsr $9466			jsr 	_FFPPartial
.9447	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.944a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.944d	20 66 94	jsr $9466			jsr 	_FFPPartial
.9450	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9453	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9456	20 66 94	jsr $9466			jsr 	_FFPPartial
.9459	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.945c	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; zeroed check.
.945f	d0 03		bne $9464			bne 	_FFPExit
.9461					_FFPZero:
.9461	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.9464					_FFPExit:
.9464	7a		ply				ply
.9465	60		rts				rts
.9466					_FFPPartial:
.9466	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9468	f0 17		beq $9481			beq 	_FFFPPExit
.946a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.946c	b0 0c		bcs $947a			bcs 	_FFFPPWholeByte
.946e	5a		phy				phy
.946f					_FFFPPLeft:
.946f	0a		asl a				asl 	a
.9470	88		dey				dey
.9471	d0 fc		bne $946f			bne 	_FFFPPLeft
.9473	7a		ply				ply
.9474					_FFFPPRight:
.9474	4a		lsr a				lsr 	a
.9475	88		dey				dey
.9476	d0 fc		bne $9474			bne 	_FFFPPRight
.9478	80 07		bra $9481			bra 	_FFFPPExit
.947a					_FFFPPWholeByte:
.947a	98		tya				tya 								; subtract 8 from count
.947b	38		sec				sec
.947c	e9 08		sbc #$08			sbc 	#8
.947e	a8		tay				tay
.947f	a9 00		lda #$00			lda 	#0 							; and clear all
.9481					_FFFPPExit:
.9481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9482					FloatIntegerPart:
.9482	48		pha				pha
.9483	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9486	f0 1f		beq $94a7			beq 	_FIPExit 					; if so do nothing
.9488	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; is it zero ?
.948b	f0 17		beq $94a4			beq 	_FIPZero 					; if so return zero.
.948d	20 e3 94	jsr $94e3			jsr 	NSNormalise 				; normalise
.9490	f0 12		beq $94a4			beq 	_FIPZero 					; normalised to zero, exit zero
.9492					_FIPShift:
.9492	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9495	10 08		bpl $949f			bpl 	_FIPCheckZero
.9497	20 23 9e	jsr $9e23			jsr 	NSMShiftRight 				; shift mantissa right
.949a	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.949d	80 f3		bra $9492			bra 	_FIPShift
.949f					_FIPCheckZero:
.949f	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; avoid -0 problem
.94a2	d0 03		bne $94a7			bne 	_FIPExit 					; set to zero if mantissa zero.
.94a4					_FIPZero:
.94a4	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.94a7					_FIPExit:
.94a7	68		pla				pla
.94a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a9					FloatingPointMultiply:
.94a9	20 d2 94	jsr $94d2			jsr 	FloatPrepare 				; prepare for floats
.94ac					FloatMultiply:
.94ac	48		pha				pha
.94ad	20 e3 94	jsr $94e3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94b0	f0 1b		beq $94cd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94b2	e8		inx				inx
.94b3	20 e3 94	jsr $94e3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b6	ca		dex				dex
.94b7	c9 00		cmp #$00			cmp 	#0
.94b9	f0 0f		beq $94ca			beq 	_FDSetZero
.94bb	20 9e 8f	jsr $8f9e			jsr 	MultiplyShort 				; calculate the result.
.94be	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94c1	18		clc				clc
.94c2	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94c5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c8	80 03		bra $94cd			bra 	_FDExit
.94ca					_FDSetZero:
.94ca	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; return 0
.94cd					_FDExit:
.94cd	20 e3 94	jsr $94e3			jsr 	NSNormalise 				; normalise the result
.94d0	68		pla				pla
.94d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94d2					FloatPrepare:
.94d2	20 05 96	jsr $9605			jsr 	DereferenceTopTwo 			; dereference the top two values
.94d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94db	29 10		and #$10			and 	#NSBIsString
.94dd	d0 01		bne $94e0			bne 	_FDType
.94df	60		rts				rts
.94e0					_FDType:
.94e0	4c 94 9f	jmp $9f94			jmp 	TypeError
.94e3					NSNormalise:
.94e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e6	29 80		and #$80			and 	#$80
.94e8	09 08		ora #$08			ora 	#NSTFloat
.94ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94ed	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; if zero exit
.94f0	d0 09		bne $94fb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94f2	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94f5	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f8	a9 00		lda #$00			lda 	#0 							; set Z flag
.94fa	60		rts				rts
.94fb					_NSNormaliseOptimise:
.94fb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94fe	d0 22		bne $9522			bne 	_NSNormaliseLoop
.9500	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9503	30 1d		bmi $9522			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9505	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9508	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.950b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.950e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9511	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9514	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9517	bd 28 04	lda $0428,x			lda 	NSExponent,x
.951a	38		sec				sec
.951b	e9 08		sbc #$08			sbc 	#8
.951d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9520	80 d9		bra $94fb			bra 	_NSNormaliseOptimise
.9522					_NSNormaliseLoop:
.9522	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9525	70 08		bvs $952f			bvs 	_NSNExit 					; exit if so with Z flag clear
.9527	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; shift mantissa left
.952a	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.952d	80 f3		bra $9522			bra 	_NSNormaliseLoop
.952f					_NSNExit:
.952f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9531	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9532					AssignNumber:
.9532	5a		phy				phy
.9533	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9536	85 36		sta $36				sta 	zTemp0
.9538	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.953b	85 37		sta $37				sta 	zTemp0+1
.953d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9540	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9542	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9545	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9547	c9 08		cmp #$08			cmp 	#NSTFloat
.9549	f0 2a		beq $9575			beq 	_ANFloat
.954b	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.954e	f0 05		beq $9555			beq		_ANNotFloat
.9550	e8		inx				inx
.9551	20 82 94	jsr $9482			jsr 	FloatIntegerPart 			; make it an integer
.9554	ca		dex				dex
.9555					_ANNotFloat:
.9555	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9558	29 03		and #$03			and 	#3
.955a	d0 05		bne $9561			bne 	_ANByteWord
.955c	20 81 95	jsr $9581			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.955f	80 1e		bra $957f			bra 	_ANExit
.9561					_ANByteWord:
.9561	48		pha				pha 								; save count
.9562	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9565	92 36		sta ($36)			sta 	(zTemp0)
.9567	68		pla				pla
.9568	c9 01		cmp #$01			cmp	 	#1
.956a	f0 13		beq $957f			beq 	_ANExit
.956c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.956f	a0 01		ldy #$01			ldy 	#1
.9571	91 36		sta ($36),y			sta 	(zTemp0),y
.9573	80 0a		bra $957f			bra 	_ANExit
.9575					_ANFloat:
.9575	20 81 95	jsr $9581			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9578	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.957b	a0 04		ldy #$04			ldy 	#4
.957d	91 36		sta ($36),y			sta 	(zTemp0),y
.957f					_ANExit:
.957f	7a		ply				ply
.9580	60		rts				rts
.9581					_ANCopy4PackSign:
.9581	a0 03		ldy #$03			ldy 	#3
.9583	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9586	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9588	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.958b	91 36		sta ($36),y			sta 	(zTemp0),y
.958d	88		dey				dey
.958e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593	88		dey				dey
.9594	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9597	91 36		sta ($36),y			sta 	(zTemp0),y
.9599	88		dey				dey
.959a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.959d	91 36		sta ($36),y			sta 	(zTemp0),y
.959f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95a0					AssignString:
.95a0	5a		phy				phy
.95a1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95a4	85 38		sta $38				sta 	zTemp1
.95a6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a9	85 39		sta $39				sta 	zTemp1+1
.95ab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95ae	85 36		sta $36				sta 	zTemp0
.95b0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95b3	85 37		sta $37				sta 	zTemp0+1
.95b5	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b9	f0 23		beq $95de			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95bb	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95bc	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95be	e9 02		sbc #$02			sbc 	#2
.95c0	85 3c		sta $3c				sta 	zsTemp
.95c2	a0 01		ldy #$01			ldy 	#1
.95c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c6	e9 00		sbc #$00			sbc 	#0
.95c8	85 3d		sta $3d				sta 	zsTemp+1
.95ca	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95cc					_ASGetLength:
.95cc	c8		iny				iny
.95cd	b1 38		lda ($38),y			lda 	(zTemp1),y
.95cf	d0 fb		bne $95cc			bne 	_ASGetLength
.95d1	98		tya				tya 								; is this length <= current length
.95d2	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95d4	90 20		bcc $95f6			bcc 	_ASCopyString
.95d6	f0 1e		beq $95f6			beq 	_ASCopyString
.95d8	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95da	a0 01		ldy #$01			ldy 	#1
.95dc	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95de					_ASNewStringRequired:
.95de	e8		inx				inx 								; concrete the new string.
.95df	20 60 a6	jsr $a660			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95e2	ca		dex				dex
.95e3	18		clc				clc
.95e4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e7	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e9	92 36		sta ($36)			sta 	(zTemp0)
.95eb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ee	69 00		adc #$00			adc 	#0
.95f0	a0 01		ldy #$01			ldy 	#1
.95f2	91 36		sta ($36),y			sta 	(zTemp0),y
.95f4	80 0d		bra $9603			bra 	_ASExit
.95f6					_ASCopyString:
.95f6	a0 00		ldy #$00			ldy 	#0
.95f8					_ASCopyLoop:
.95f8	b1 38		lda ($38),y			lda 	(zTemp1),y
.95fa	c8		iny				iny
.95fb	c8		iny				iny
.95fc	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95fe	88		dey				dey
.95ff	c9 00		cmp #$00			cmp 	#0
.9601	d0 f5		bne $95f8			bne 	_ASCopyLoop
.9603					_ASExit:
.9603	7a		ply				ply
.9604	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9605					DereferenceTopTwo:
.9605	e8		inx				inx
.9606	20 0a 96	jsr $960a			jsr 	Dereference 				; deref x+1
.9609	ca		dex				dex  								; falls through to deref x
.960a					Dereference:
.960a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.960d	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.960f	f0 57		beq $9668			beq 	_DRFExit 					; not a reference
.9611	5a		phy				phy
.9612	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9615	85 36		sta $36				sta 	zTemp0
.9617	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.961a	85 37		sta $37				sta 	zTemp0+1
.961c	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.961f	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9621	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9624	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9627	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9629	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.962b	f0 0f		beq $963c			beq 	_DRFDereferenceTwo
.962d	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.962f	f0 39		beq $966a			beq 	_DRFFull
.9631	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9634	29 03		and #$03			and 	#3
.9636	f0 32		beq $966a			beq 	_DRFFull 					; the whole word
.9638	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.963a	f0 07		beq $9643			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.963c					_DRFDereferenceTwo:
.963c	a0 01		ldy #$01			ldy 	#1
.963e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9640	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9643					_DRFClear23:
.9643	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9646	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9649	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.964c	29 18		and #$18			and 	#NSBTypeMask
.964e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9651	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9653	d0 12		bne $9667			bne 	_DRFNotString
.9655	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9658	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.965b	d0 0a		bne $9667			bne 	_DRFNotString
.965d	a9 69		lda #$69			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.965f	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9662	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9664	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9667					_DRFNotString
.9667	7a		ply				ply 								; restore Y and exit
.9668					_DRFExit:
.9668	60		rts				rts
.9669					_DRFNullString:
>9669	00						.byte 	0
.966a					_DRFFull:
.966a	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.966c	b1 36		lda ($36),y			lda 	(zTemp0),y
.966e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9671	c8		iny				iny
.9672	b1 36		lda ($36),y			lda 	(zTemp0),y
.9674	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9677	c8		iny				iny
.9678	b1 36		lda ($36),y			lda 	(zTemp0),y
.967a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.967d	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9680	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9683	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9685	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9688	f0 06		beq $9690			beq 	_DRFNoExponent
.968a	c8		iny				iny 								; if not, read the exponent as well.
.968b	b1 36		lda ($36),y			lda 	(zTemp0),y
.968d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9690					_DRFNoExponent:
.9690	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9693	10 0d		bpl $96a2			bpl 	_DRFExit2 					; if not, then exit.
.9695	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9697	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.969a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.969d	09 80		ora #$80			ora 	#NSBIsNegative
.969f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96a2					_DRFExit2:
.96a2	7a		ply				ply
.96a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96a4					EncodeNumberStart:
.96a4	38		sec				sec
.96a5	80 01		bra $96a8			bra 	EncodeNumberContinue+1
.96a7					EncodeNumberContinue:
.96a7	18		clc				clc
.96a8					EncodeNumber:
.96a8	08		php				php 								; save reset.
.96a9	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96ab	f0 12		beq $96bf			beq 	_ENIsOkay
.96ad	c9 30		cmp #$30			cmp 	#"0"
.96af	90 04		bcc $96b5			bcc 	_ENBadNumber
.96b1	c9 3a		cmp #$3a			cmp 	#"9"+1
.96b3	90 0a		bcc $96bf			bcc 	_ENIsOkay
.96b5					_ENBadNumber:
.96b5	28		plp				plp 								; throw saved reset
.96b6	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96bb	f0 7e		beq $973b			beq 	_ENConstructFinal
.96bd					_ENFail:
.96bd	18		clc				clc 								; not allowed
.96be	60		rts				rts
.96bf					_ENIsOkay:
.96bf	28		plp				plp 								; are we restarting
.96c0	90 15		bcc $96d7			bcc 	_ENNoRestart
.96c2					_ENStartEncode:
.96c2	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96c4	f0 0c		beq $96d2			beq 	_ENFirstDP
.96c6	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c8	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.96cb	a9 01		lda #$01			lda 	#ESTA_Low
.96cd					_ENExitChange:
.96cd	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96d0	38		sec				sec
.96d1	60		rts				rts
.96d2					_ENFirstDP:
.96d2	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; clear integer part
.96d5	80 3f		bra $9716			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d7					_ENNoRestart:
.96d7	48		pha				pha 								; save on stack.
.96d8	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96db	c9 01		cmp #$01			cmp 	#ESTA_Low
.96dd	f0 09		beq $96e8			beq  	_ESTALowState
.96df	c9 02		cmp #$02			cmp 	#ESTA_High
.96e1	f0 29		beq $970c			beq 	_ESTAHighState
.96e3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96e5	f0 3b		beq $9722			beq 	_ESTADecimalState
>96e7	db						.byte 	$DB 						; causes a break in the emulator
.96e8					_ESTALowState:
.96e8	68		pla				pla 								; get value back
.96e9	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96eb	f0 29		beq $9716			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96ed	29 0f		and #$0f			and 	#15 						; make digit
.96ef	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96f2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96f5	0a		asl a				asl 	a
.96f6	0a		asl a				asl 	a
.96f7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96fa	0a		asl a				asl 	a
.96fb	6d 86 04	adc $0486			adc 	DigitTemp
.96fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9701	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9703	90 05		bcc $970a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9705	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9707	8d 85 04	sta $0485			sta 	EncodeState
.970a					_ESTANoSwitch:
.970a	38		sec				sec
.970b	60		rts				rts
.970c					_ESTAHighState:
.970c	68		pla				pla 								; get value back
.970d	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.970f	f0 05		beq $9716			beq 	_ESTASwitchFloat
.9711	20 75 97	jsr $9775			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9714	38		sec				sec
.9715	60		rts				rts
.9716					_ESTASwitchFloat:
.9716	9c 87 04	stz $0487			stz 	DecimalCount
.9719	e8		inx				inx 								; zero the decimal additive.
.971a	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.971d	ca		dex				dex
.971e	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9720	80 ab		bra $96cd			bra 	_ENExitChange
.9722					_ESTADecimalState:
.9722	68		pla				pla 								; digit.
.9723	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9725	f0 96		beq $96bd			beq 	_ENFail
.9727	e8		inx				inx 								; put digit into fractional part of X+1
.9728	20 75 97	jsr $9775			jsr 	ESTAShiftDigitIntoMantissa
.972b	ca		dex				dex
.972c	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.972f	ad 87 04	lda $0487			lda 	DecimalCount
.9732	c9 0b		cmp #$0b			cmp 	#11
.9734	f0 02		beq $9738			beq 	_ESTADSFail
.9736	38		sec				sec
.9737	60		rts				rts
.9738					_ESTADSFail:
.9738	4c 8f 9f	jmp $9f8f			jmp 	RangeError
.973b					_ENConstructFinal:
.973b	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.973e	f0 33		beq $9773			beq 	_ENCFExit 					; no decimals
.9740	5a		phy				phy
.9741	0a		asl a				asl 	a 							; x 4 and CLC
.9742	0a		asl a				asl 	a
.9743	6d 87 04	adc $0487			adc 	DecimalCount
.9746	a8		tay				tay
.9747	b9 4e 9f	lda $9f4e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.974a	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.974d	b9 4f 9f	lda $9f4f,y			lda 	DecimalScalarTable-5+1,y
.9750	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9753	b9 50 9f	lda $9f50,y			lda 	DecimalScalarTable-5+2,y
.9756	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9759	b9 51 9f	lda $9f51,y			lda 	DecimalScalarTable-5+3,y
.975c	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.975f	b9 52 9f	lda $9f52,y			lda 	DecimalScalarTable-5+4,y
.9762	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9765	a9 08		lda #$08			lda 	#NSTFloat
.9767	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.976a	7a		ply				ply
.976b	e8		inx				inx 								; multiply decimal const by decimal scalar
.976c	20 ac 94	jsr $94ac			jsr 	FloatMultiply
.976f	ca		dex				dex
.9770	20 39 93	jsr $9339			jsr 	FloatAdd 					; add to integer part.
.9773					_ENCFExit:
.9773	18		clc				clc 								; reject the digit.
.9774	60		rts				rts
.9775					ESTAShiftDigitIntoMantissa:
.9775	29 0f		and #$0f			and 	#15 						; save digit
.9777	48		pha				pha
.9778	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.977b	48		pha				pha
.977c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.977f	48		pha				pha
.9780	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9783	48		pha				pha
.9784	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9787	48		pha				pha
.9788	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 2
.978b	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 4
.978e	18		clc				clc 								; pop mantissa and add
.978f	68		pla				pla
.9790	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9793	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9796	68		pla				pla
.9797	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.979a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.979d	68		pla				pla
.979e	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97a1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97a4	68		pla				pla
.97a5	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97ab	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 10
.97ae	68		pla				pla 								; add digit
.97af	18		clc				clc
.97b0	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b6	90 0d		bcc $97c5			bcc 	_ESTASDExit
.97b8	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97bb	d0 08		bne $97c5			bne 	_ESTASDExit
.97bd	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97c0	d0 03		bne $97c5			bne 	_ESTASDExit
.97c2	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97c5					_ESTASDExit:
.97c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c6					EvaluateTerm:
.97c6	b1 30		lda ($30),y			lda 	(codePtr),y
.97c8	30 18		bmi $97e2			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97ca	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97cc	b0 6f		bcs $983d			bcs 	_ETVariable
.97ce	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97d0	90 6e		bcc $9840			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97d2	c9 3a		cmp #$3a			cmp 	#'9'+1
.97d4	b0 6a		bcs $9840			bcs 	_ETPuncUnary
.97d6	20 a4 96	jsr $96a4			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d9					_ETNumber:
.97d9	c8		iny				iny 								; keep encoding until we have the numbers
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	20 a7 96	jsr $96a7			jsr 	EncodeNumberContinue
.97df	b0 f8		bcs $97d9			bcs 	_ETNumber 					; go back if accepted.
.97e1	60		rts				rts
.97e2					_ETCheckUnary:
.97e2	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97e4	f0 41		beq $9827			beq 	_ETString
.97e6	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e8	f0 12		beq $97fc			beq 	_ETHexConstant
.97ea	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97ec	90 0b		bcc $97f9			bcc 	_ETSyntaxError
.97ee	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1
.97f0	b0 07		bcs $97f9			bcs 	_ETSyntaxError
.97f2	da		phx				phx 								; push X on the stack
.97f3	0a		asl a				asl 	a 							; put vector x 2 into X
.97f4	aa		tax				tax
.97f5	c8		iny				iny 								; consume unary function token
.97f6	7c ea 8a	jmp ($8aea,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f9					_ETSyntaxError:
.97f9	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.97fc					_ETHexConstant:
.97fc	c8		iny				iny 								; skip #
.97fd	c8		iny				iny 								; skip count
.97fe	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; clear result
.9801					_ETHLoop:
.9801	b1 30		lda ($30),y			lda 	(codePtr),y
.9803	c8		iny				iny 								; and consume
.9804	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9806	f0 1e		beq $9826			beq 	_ETHExit
.9808	48		pha				pha 								; save on stack.
.9809	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 2
.980c	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 4
.980f	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 8
.9812	20 15 9e	jsr $9e15			jsr 	NSMShiftLeft 				; x 16
.9815	68		pla				pla 								; ASCII
.9816	c9 41		cmp #$41			cmp 	#'A'
.9818	90 02		bcc $981c			bcc 	_ETHNotChar
.981a	e9 07		sbc #$07			sbc 	#7
.981c					_ETHNotChar:
.981c	29 0f		and #$0f			and 	#15 						; digit now
.981e	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9821	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9824	80 db		bra $9801			bra 	_ETHLoop 					; go round.
.9826					_ETHExit:
.9826	60		rts				rts
.9827					_ETString:
.9827	c8		iny				iny 								; look at length
.9828	b1 30		lda ($30),y			lda 	(codePtr),y
.982a	48		pha				pha
.982b	c8		iny				iny 								; first character
.982c	20 f8 a1	jsr $a1f8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.982f	68		pla				pla 								; restore count and save
.9830	85 36		sta $36				sta 	zTemp0
.9832	98		tya				tya 								; add length to Y to skip it.
.9833	18		clc				clc
.9834	65 36		adc $36				adc 	zTemp0
.9836	a8		tay				tay
.9837	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9839	9d 00 04	sta $0400,x			sta 	NSStatus,x
.983c	60		rts				rts
.983d					_ETVariable:
.983d	4c 97 98	jmp $9897			jmp 	VariableHandler
.9840					_ETPuncUnary:
.9840	c8		iny				iny 								; consume the unary character
.9841	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9843	f0 2d		beq $9872			beq 	_ETUnaryNegate
.9845	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9847	f0 39		beq $9882			beq 	_ETDereference
.9849	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.984b	f0 43		beq $9890			beq 	_ETParenthesis
.984d	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.984f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9851	f0 06		beq $9859			beq 	_ETIndirection
.9853	e6 36		inc $36				inc 	zTemp0
.9855	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9857	d0 a0		bne $97f9			bne 	_ETSyntaxError
.9859					_ETIndirection:
.9859	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.985b	1a		inc a				inc 	a
.985c	48		pha				pha
.985d	20 c6 97	jsr $97c6			jsr 	EvaluateTerm				; evaluate the term
.9860	20 0a 96	jsr $960a			jsr 	Dereference 				; dereference it.
.9863	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9866	d0 07		bne $986f			bne 	_ETTypeMismatch
.9868	68		pla				pla 								; indirection 1-2
.9869	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.986b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.986e	60		rts				rts
.986f					_ETTypeMismatch:
.986f	4c 94 9f	jmp $9f94			jmp 	TypeError
.9872					_ETUnaryNegate:
.9872	20 c6 97	jsr $97c6			jsr 	EvaluateTerm				; evaluate the term
.9875	20 0a 96	jsr $960a			jsr 	Dereference 				; dereference it.
.9878	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.987b	29 10		and #$10			and 	#NSTString
.987d	d0 f0		bne $986f			bne 	_ETTypeMismatch
.987f	4c ac 9d	jmp $9dac			jmp 	NSMNegate  					; just toggles the sign bit.
.9882					_ETDereference:
.9882	20 c6 97	jsr $97c6			jsr 	EvaluateTerm				; evaluate the term
.9885	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9888	29 20		and #$20			and 	#NSBIsReference
.988a	f0 e3		beq $986f			beq 	_ETTypeMismatch
.988c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.988f	60		rts				rts
.9890					_ETParenthesis:
.9890	20 ec 92	jsr $92ec			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9893	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; check for )
.9896	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9897					VariableHandler:
.9897	b1 30		lda ($30),y			lda 	(codePtr),y
.9899	18		clc				clc
.989a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.989c	85 37		sta $37				sta 	zTemp0+1
.989e	c8		iny				iny
.989f	b1 30		lda ($30),y			lda 	(codePtr),y
.98a1	85 36		sta $36				sta 	zTemp0
.98a3	c8		iny				iny
.98a4	18		clc				clc									; copy variable address+3 to mantissa
.98a5	69 03		adc #$03			adc 	#3
.98a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98aa	a5 37		lda $37				lda 	zTemp0+1
.98ac	69 00		adc #$00			adc 	#0
.98ae	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98b1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98b4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b7	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98ba	5a		phy				phy
.98bb	a0 02		ldy #$02			ldy 	#2 							; read type
.98bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.98bf	7a		ply				ply
.98c0	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98c2	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98c4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c7	29 04		and #$04			and 	#NSBIsArray
.98c9	d0 01		bne $98cc			bne 	_VHArray
.98cb	60		rts				rts
.98cc					_VHArray:
.98cc	e8		inx				inx
.98cd	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98d0	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98d2	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98d5	b1 30		lda ($30),y			lda 	(codePtr),y
.98d7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d9	d0 06		bne $98e1			bne 	_VHNoSecondIndex
.98db	c8		iny				iny 								; skip the comma
.98dc	e8		inx				inx
.98dd	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98e0	ca		dex				dex
.98e1					_VHNoSecondIndex:
.98e1	ca		dex				dex 								; set X back.
.98e2	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; and check the right bracket.
.98e5	5a		phy				phy 								; save position
.98e6	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98ea	f0 6b		beq $9957			beq 	_VHBadIndex
.98ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98ef	85 3e		sta $3e				sta 	zaTemp
.98f1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f4	85 3f		sta $3f				sta 	zaTemp+1
.98f6	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98fa	f0 02		beq $98fe			beq 	_VHHas2Mask
.98fc	a9 ff		lda #$ff			lda 	#$FF
.98fe					_VHHas2Mask:
.98fe	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9901	f0 54		beq $9957			beq 	_VHBadIndex
.9903	0a		asl a				asl 	a 							; carry will be set if a second index
.9904	90 09		bcc $990f			bcc 	_VHCheckFirstIndex
.9906	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9908	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990a	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.990d	90 48		bcc $9957			bcc 	_VHBadIndex
.990f					_VHCheckFirstIndex:
.990f	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9911	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9913	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9916	90 3f		bcc $9957			bcc 	_VHBadIndex
.9918	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.991a	64 37		stz $37				stz 	zTemp0+1
.991c	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.991f	30 0f		bmi $9930			bmi 	_VHNoMultiply
.9921	da		phx				phx
.9922	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9925	48		pha				pha
.9926	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9928	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.992a	1a		inc a				inc 	a 							; add 1 for zero base
.992b	fa		plx				plx
.992c	20 95 9d	jsr $9d95			jsr 	Multiply8x8 				; calculate -> Z0
.992f	fa		plx				plx
.9930					_VHNoMultiply:
.9930	18		clc				clc
.9931	a5 36		lda $36				lda 	zTemp0
.9933	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9936	85 36		sta $36				sta 	zTemp0
.9938	a5 37		lda $37				lda 	zTemp0+1
.993a	69 00		adc #$00			adc 	#0
.993c	85 37		sta $37				sta 	zTemp0+1
.993e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9941	20 dc 84	jsr $84dc			jsr 	ScaleByBaseType
.9944	18		clc				clc
.9945	b2 3e		lda ($3e)			lda 	(zaTemp)
.9947	65 36		adc $36				adc 	zTemp0
.9949	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.994c	a0 01		ldy #$01			ldy 	#1
.994e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9950	65 37		adc $37				adc 	zTemp0+1
.9952	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9955	7a		ply				ply 								; restore position
.9956	60		rts				rts
.9957					_VHBadIndex:
.9957	a9 17		lda #$17		lda	#23
.9959	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.995c					AbsUnary:
.995c	fa		plx				plx 								; restore stack pos
.995d	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; get a float or int
.9960	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9963	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9966	29 7f		and #$7f			and 	#$7F
.9968	9d 00 04	sta $0400,x			sta 	NSStatus,x
.996b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.996c					AllocUnary:
.996c	fa		plx				plx 								; restore stack pos
.996d	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger		; get bytes required.
.9970	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9973	da		phx				phx 								; save X/Y
.9974	5a		phy				phy
.9975	8a		txa				txa 								; copy X into Y
.9976	a8		tay				tay
.9977	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.997a	aa		tax				tax
.997b	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.997e	20 8b 99	jsr $998b			jsr 	AllocateXABytes 			; allocate memory
.9981	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9984	8a		txa				txa
.9985	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9988	7a		ply				ply
.9989	fa		plx				plx
.998a	60		rts				rts
.998b					AllocateXABytes:
.998b	5a		phy				phy
.998c	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.998f	84 36		sty $36				sty 	zTemp0
.9991	5a		phy				phy
.9992	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9995	84 37		sty $37				sty 	zTemp0+1
.9997	5a		phy				phy
.9998	18		clc				clc 								; add to low memory pointer
.9999	6d 8c 04	adc $048c			adc 	lowMemPtr
.999c	8d 8c 04	sta $048c			sta 	lowMemPtr
.999f	8a		txa				txa
.99a0	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99a3	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a6	b0 2f		bcs $99d7			bcs 	CISSMemory
.99a8	20 c9 99	jsr $99c9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99ab					_ClearMemory:
.99ab	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99ae	c5 36		cmp $36				cmp 	zTemp0
.99b0	d0 07		bne $99b9			bne 	_CMClearNext
.99b2	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99b5	c5 37		cmp $37				cmp 	zTemp0+1
.99b7	f0 0c		beq $99c5			beq 	_CMExit
.99b9					_CMClearNext:
.99b9	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99bb	92 36		sta ($36)			sta 	(zTemp0)
.99bd	e6 36		inc $36				inc 	zTemp0
.99bf	d0 ea		bne $99ab			bne 	_ClearMemory
.99c1	e6 37		inc $37				inc		zTemp0+1
.99c3	80 e6		bra $99ab			bra 	_ClearMemory
.99c5					_CMExit:
.99c5	fa		plx				plx
.99c6	68		pla				pla
.99c7	7a		ply				ply
.99c8	60		rts				rts
.99c9					CheckIdentifierStringSpace:
.99c9	48		pha				pha
.99ca	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99cd	18		clc				clc
.99ce	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99d0	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99d3	b0 02		bcs $99d7			bcs 	CISSMemory
.99d5	68		pla				pla
.99d6	60		rts				rts
.99d7					CISSMemory:
.99d7	a9 06		lda #$06		lda	#6
.99d9	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99dc					AscUnary:
.99dc	fa		plx				plx 								; restore stack pos
.99dd	20 34 9d	jsr $9d34			jsr 	EvaluateString 				; get a string
.99e0	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99e2	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.99e5	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.99e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e9					FracUnary:
.99e9	fa		plx				plx 								; restore stack pos
.99ea	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; get a float or int
.99ed	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.99f0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99f3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99f5	f0 04		beq $99fb			beq 	_IUZero
.99f7	20 1f 94	jsr $941f			jsr 	FloatFractionalPart
.99fa	60		rts				rts
.99fb					_IUZero:
.99fb	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.99fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99ff					IntUnary:
.99ff	fa		plx				plx 								; restore stack pos
.9a00	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; get a float or int
.9a03	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9a06	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a09	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a0b	f0 03		beq $9a10			beq 	_IUExit
.9a0d	20 82 94	jsr $9482			jsr 	FloatIntegerPart
.9a10					_IUExit:
.9a10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a11					LenUnary:
.9a11	fa		plx				plx 								; restore stack pos
.9a12	20 34 9d	jsr $9d34			jsr 	EvaluateString 				; get a string
.9a15	5a		phy				phy
.9a16	a0 00		ldy #$00			ldy 	#0 							; find length
.9a18					_LenFind:
.9a18	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a1a	f0 06		beq $9a22			beq 	_LenExit
.9a1c	c8		iny				iny
.9a1d	d0 f9		bne $9a18			bne 	_LenFind
.9a1f	4c 8f 9f	jmp $9f8f			jmp 	RangeError 					; string > 255
.9a22					_LenExit:
.9a22	98		tya				tya
.9a23	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.9a26	7a		ply				ply
.9a27	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9a2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a2b					Unary_Min:
.9a2b	a9 01		lda #$01			lda 	#1
.9a2d	80 02		bra $9a31			bra 	UnaryMinMaxMain
.9a2f					Unary_Max:
.9a2f	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a31					UnaryMinMaxMain:
.9a31	fa		plx				plx 								; get index on number stack
.9a32	48		pha				pha 								; save comparator
.9a33	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; get the first value.
.9a36					_UMMMLoop:
.9a36	b1 30		lda ($30),y			lda 	(codePtr),y
.9a38	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a3a	f0 22		beq $9a5e			beq 	_UMMMDone
.9a3c	20 2c 8d	jsr $8d2c			jsr 	CheckComma 					; must be a comma
.9a3f	e8		inx				inx
.9a40	20 20 9d	jsr $9d20			jsr 	EvaluateValue
.9a43	ca		dex				dex
.9a44	20 d7 9d	jsr $9dd7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a47	e8		inx				inx
.9a48	20 d7 9d	jsr $9dd7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a4b	e8		inx				inx
.9a4c	20 f5 8d	jsr $8df5			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a4f	ca		dex				dex
.9a50	ca		dex				dex
.9a51	85 36		sta $36				sta 	zTemp0 						; save required result
.9a53	68		pla				pla 								; get and save comparator
.9a54	48		pha				pha
.9a55	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a57	d0 dd		bne $9a36			bne 	_UMMMLoop
.9a59	20 61 9a	jsr $9a61			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a5c	80 d8		bra $9a36			bra 	_UMMMLoop
.9a5e					_UMMMDone:
.9a5e	68		pla				pla 								; throw the comparator
.9a5f	c8		iny				iny 								; skip )
.9a60	60		rts				rts
.9a61					ExpCopyAboveDown:
.9a61	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a64	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a67	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a6a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a6d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a70	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a73	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a76	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a79	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a7c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7f	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a82	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a86					Unary_Not:
.9a86	fa		plx				plx
.9a87	20 4c 9d	jsr $9d4c			jsr 	EvaluateInteger 			; get integer
.9a8a	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9a8d	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; zero mantissa ?
.9a90	f0 04		beq $9a96			beq 	_NotZero
.9a92	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.9a95	60		rts				rts
.9a96					_NotZero:
.9a96	4c aa 8d	jmp $8daa			jmp 	ReturnTrue
.9a99					_UNBad:
.9a99	4c 99 9f	jmp $9f99			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a9c					Unary_Random:
.9a9c	fa		plx				plx
.9a9d	20 1b 9b	jsr $9b1b			jsr 	Random32Bit 				; get a random number
.9aa0	20 00 9b	jsr $9b00			jsr 	URCopyToMantissa  			; put in mantissa
.9aa3	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa5	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa7	f0 08		beq $9ab1			beq 	_URNoModulus
.9aa9	e8		inx				inx
.9aaa	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aad	ca		dex				dex
.9aae	20 19 8f	jsr $8f19			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ab1					_URNoModulus:
.9ab1	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ab4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab7	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9aba	60		rts				rts
.9abb					Unary_Rnd:
.9abb	fa		plx				plx
.9abc	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; number to use.
.9abf	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; closing bracket
.9ac2	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ac5	f0 2b		beq $9af2			beq 	_URCopySeed
.9ac7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9aca	10 23		bpl $9aef			bpl 	_URDontSeed
.9acc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9acf	49 17		eor #$17			eor 	#$17
.9ad1	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ad4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad7	49 a5		eor #$a5			eor 	#$A5
.9ad9	8d 89 04	sta $0489			sta 	RandomSeed+1
.9adc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9adf	49 c2		eor #$c2			eor 	#$C2
.9ae1	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ae4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae7	49 9d		eor #$9d			eor 	#$9D
.9ae9	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9aec	20 1b 9b	jsr $9b1b			jsr 	Random32Bit
.9aef					_URDontSeed:
.9aef	20 1b 9b	jsr $9b1b			jsr 	Random32Bit 				; generate a number.
.9af2					_URCopySeed:
.9af2	20 00 9b	jsr $9b00			jsr 	URCopyToMantissa 			; copy into mantissa
.9af5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af7	8d 28 04	sta $0428			sta 	NSExponent
.9afa	a9 08		lda #$08			lda 	#NSTFloat
.9afc	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9aff	60		rts				rts
.9b00					URCopyToMantissa:
.9b00	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b03	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b06	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b09	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b0c	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b0f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b12	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b15	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b17	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b1a	60		rts				rts
.9b1b					Random32Bit:
.9b1b	5a		phy				phy
.9b1c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b1e	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b21	d0 03		bne $9b26			bne 	_Random1
.9b23	a8		tay				tay 								; if so do it 256 times
.9b24	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b26					_Random1:
.9b26	0a		asl a				asl 	a 							; LSFR RNG
.9b27	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b2a	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b2d	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b30	90 02		bcc $9b34			bcc 	_Random2
.9b32	49 c5		eor #$c5			eor 	#$C5
.9b34					_Random2:
.9b34	88		dey				dey
.9b35	d0 ef		bne $9b26			bne 	_Random1
.9b37	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b3a	7a		ply				ply
.9b3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b3c					SgnUnary:
.9b3c	fa		plx				plx 								; restore stack pos
.9b3d	20 29 9d	jsr $9d29			jsr 	EvaluateNumber 				; get a float or int
.9b40	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9b43	20 30 9e	jsr $9e30			jsr 	NSMIsZero 					; if zero
.9b46	f0 10		beq $9b58			beq 	_SGZero  					; return Int Zero
.9b48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b4b	48		pha				pha
.9b4c	a9 01		lda #$01			lda 	#1 							; set to 1
.9b4e	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.9b51	68		pla				pla
.9b52	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b57	60		rts				rts
.9b58	20 00 9e	jsr $9e00	_SGZero:jsr 	NSMSetZero
.9b5b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b5c					ValUnary:
.9b5c	fa		plx				plx 								; restore stack pos
.9b5d	20 72 9b	jsr $9b72			jsr 	ValMainCode 				; do the main val() code
.9b60	b0 01		bcs $9b63			bcs 	_VUError 					; couldn't convert
.9b62	60		rts				rts
.9b63					_VUError:
.9b63	4c 94 9f	jmp $9f94			jmp 	TypeError
.9b66					IsValUnary:
.9b66	fa		plx				plx 								; restore stack pos
.9b67	20 72 9b	jsr $9b72			jsr 	ValMainCode 				; do the main val() code
.9b6a	b0 03		bcs $9b6f			bcs 	_VUBad
.9b6c	4c aa 8d	jmp $8daa			jmp 	ReturnTrue
.9b6f					_VUBad:
.9b6f	4c b6 8d	jmp $8db6			jmp 	ReturnFalse
.9b72					ValMainCode:
.9b72	20 34 9d	jsr $9d34			jsr 	EvaluateString 				; get a string
.9b75	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; check right bracket present
.9b78	5a		phy				phy
.9b79	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b7b	f0 17		beq $9b94			beq 	_VMCFail2
.9b7d	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b7f	48		pha				pha 								; save first character
.9b80	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b82	d0 01		bne $9b85			bne 	_VMCStart
.9b84	c8		iny				iny 								; skip over -
.9b85					_VMCStart:
.9b85	38		sec				sec 								; initialise first time round.
.9b86					_VMCNext:
.9b86	c8		iny				iny 								; pre-increment
.9b87	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b89	f0 0c		beq $9b97			beq 	_VMCSuccess 				; successful.
.9b8b	20 a8 96	jsr $96a8			jsr 	EncodeNumber 				; send it to the number-builder
.9b8e	90 03		bcc $9b93			bcc 	_VMCFail 					; if failed, give up.
.9b90	18		clc				clc 								; next time round, countinue
.9b91	80 f3		bra $9b86			bra 	_VMCNext
.9b93					_VMCFail:
.9b93	68		pla				pla
.9b94					_VMCFail2:
.9b94	7a		ply				ply
.9b95	38		sec				sec
.9b96	60		rts				rts
.9b97					_VMCSuccess:
.9b97	a9 00		lda #$00			lda 	#0 							; construct final
.9b99	20 a8 96	jsr $96a8			jsr 	EncodeNumber
.9b9c	68		pla				pla
.9b9d	c9 2d		cmp #$2d			cmp 	#"-"
.9b9f	d0 03		bne $9ba4			bne 	_VMCNotNegative
.9ba1	20 ac 9d	jsr $9dac			jsr		NSMNegate
.9ba4					_VMCNotNegative:
.9ba4	7a		ply				ply
.9ba5	18		clc				clc
.9ba6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba7					ChrUnary:
.9ba7	fa		plx				plx 								; restore stack pos
.9ba8	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger			; get value
.9bab	48		pha				pha
.9bac	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9baf	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bb1	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate
.9bb4	68		pla				pla 								; write number to it
.9bb5	20 1f a7	jsr $a71f			jsr 	StringTempWrite
.9bb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb9					SpcUnary:
.9bb9	fa		plx				plx 								; restore stack pos
.9bba	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger			; get value
.9bbd	5a		phy				phy
.9bbe	48		pha				pha 								; save count
.9bbf	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate
.9bc2	7a		ply				ply 								; to do count in Y
.9bc3					_SpcLoop:
.9bc3	c0 00		cpy #$00			cpy 	#0
.9bc5	f0 08		beq $9bcf			beq 	_SpcExit
.9bc7	a9 20		lda #$20			lda 	#32
.9bc9	20 1f a7	jsr $a71f			jsr 	StringTempWrite
.9bcc	88		dey				dey
.9bcd	80 f4		bra $9bc3			bra 	_SPCLoop
.9bcf					_SpcExit:
.9bcf	7a		ply				ply
.9bd0	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.9bd3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bd4					Unary_Str:
.9bd4	fa		plx				plx
.9bd5	20 29 9d	jsr $9d29			jsr 	EvaluateNumber  			; get number
.9bd8	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; closing bracket
.9bdb	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bdd	20 f6 9b	jsr $9bf6			jsr 	ConvertNumberToString 		; do the conversion.
.9be0	a9 21		lda #$21			lda		#33 						; create buffer
.9be2	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate 			; allocate memory
.9be5	da		phx				phx
.9be6	a2 00		ldx #$00			ldx 	#0
.9be8					_USCopy:
.9be8	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9beb	20 1f a7	jsr $a71f			jsr 	StringTempWrite
.9bee	e8		inx				inx
.9bef	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bf2	d0 f4		bne $9be8			bne 	_USCopy
.9bf4	fa		plx				plx
.9bf5	60		rts				rts
.9bf6					ConvertNumberToString:
.9bf6	5a		phy				phy 								; save code position
.9bf7	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bfa	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bfd	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c00	10 0a		bpl $9c0c			bpl 	_CNTSNotNegative
.9c02	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c04	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c07	a9 2d		lda #$2d			lda 	#"-"
.9c09	20 72 9c	jsr $9c72			jsr 	WriteDecimalBuffer
.9c0c					_CNTSNotNegative:
.9c0c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c0f	f0 15		beq $9c26			beq 	_CNTSNotFloat
.9c11	e8		inx				inx 								; round up
.9c12	a9 01		lda #$01			lda 	#1
.9c14	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.9c17	ca		dex				dex
.9c18	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c1b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c1e	a9 08		lda #$08			lda 	#NSTFloat
.9c20	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c23	20 39 93	jsr $9339			jsr 	FloatAdd
.9c26					_CNTSNotFloat:
.9c26	20 54 9c	jsr $9c54			jsr 	MakePlusTwoString
.9c29	20 1f 94	jsr $941f			jsr 	FloatFractionalPart 		; get the fractional part
.9c2c	20 e3 94	jsr $94e3			jsr 	NSNormalise					; normalise , exit if zero
.9c2f	f0 21		beq $9c52			beq 	_CNTSExit
.9c31	a9 2e		lda #$2e			lda 	#"."
.9c33	20 72 9c	jsr $9c72			jsr 	WriteDecimalBuffer 			; write decimal place
.9c36					_CNTSDecimal:
.9c36	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c39	30 17		bmi $9c52			bmi 	_CNTSExit
.9c3b	e8		inx				inx 								; x 10.0
.9c3c	a9 0a		lda #$0a			lda 	#10
.9c3e	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.9c41	a9 08		lda #$08			lda 	#NSTFloat
.9c43	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c46	ca		dex				dex
.9c47	20 ac 94	jsr $94ac			jsr 	FloatMultiply
.9c4a	20 54 9c	jsr $9c54			jsr 	MakePlusTwoString
.9c4d	20 1f 94	jsr $941f			jsr 	FloatFractionalPart 		; get the fractional part
.9c50	80 e4		bra $9c36			bra 	_CNTSDecimal 				; keep going.
.9c52					_CNTSExit:
.9c52	7a		ply				ply
.9c53	60		rts				rts
.9c54					MakePlusTwoString:
.9c54	da		phx				phx
.9c55	20 d7 9d	jsr $9dd7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c58	e8		inx				inx 								; access it
.9c59	e8		inx				inx
.9c5a	20 82 94	jsr $9482			jsr 	FloatIntegerPart 			; make it an integer
.9c5d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c5f	20 64 92	jsr $9264			jsr 	ConvertInt32
.9c62	a2 00		ldx #$00			ldx	 	#0
.9c64					_MPTSCopy:
.9c64	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c67	20 72 9c	jsr $9c72			jsr 	WriteDecimalBuffer
.9c6a	e8		inx				inx
.9c6b	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c6e	d0 f4		bne $9c64			bne 	_MPTSCopy
.9c70	fa		plx				plx
.9c71	60		rts				rts
.9c72					WriteDecimalBuffer:
.9c72	da		phx				phx
.9c73	ae 95 04	ldx $0495			ldx 	dbOffset
.9c76	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c79	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c7c	ee 95 04	inc $0495			inc 	dbOffset
.9c7f	fa		plx				plx
.9c80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c81					Unary_Left:
.9c81	fa		plx				plx
.9c82	18		clc				clc 								; only one parameter
.9c83	20 f8 9c	jsr $9cf8			jsr 	SubstringInitial 			; set up.
.9c86	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c89	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c8c	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c8f	80 2c		bra $9cbd			bra 	SubstringMain
.9c91					Unary_Right:
.9c91	fa		plx				plx
.9c92	18		clc				clc 								; only one parameter
.9c93	20 f8 9c	jsr $9cf8			jsr 	SubstringInitial 			; set up.
.9c96	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c99	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c9c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c9f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ca2	b0 02		bcs $9ca6			bcs 	_URNotUnderflow
.9ca4	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca6					_URNotUnderFlow:
.9ca6	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca9	80 12		bra $9cbd			bra 	SubStringMain
.9cab					Unary_Mid:
.9cab	fa		plx				plx
.9cac	38		sec				sec 								; two parameters
.9cad	20 f8 9c	jsr $9cf8			jsr 	SubstringInitial 			; set up.
.9cb0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cb3	f0 05		beq $9cba			beq 	_UMError
.9cb5	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb8	80 03		bra $9cbd			bra 	SubStringMain
.9cba					_UMError:
.9cba	4c 99 9f	jmp $9f99			jmp 	ArgumentError
.9cbd					SubStringMain:
.9cbd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cc0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cc3	b0 2d		bcs $9cf2			bcs 	_SSMNull 					; if so, return an empty string.
.9cc5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc8	f0 28		beq $9cf2			beq 	_SSMNull 					; return empty string.
.9cca	18		clc				clc 								; add the offset +1 to the address and
.9ccb	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cce	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cd1	85 36		sta $36				sta 	zTemp0
.9cd3	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd6	69 00		adc #$00			adc 	#0
.9cd8	85 37		sta $37				sta 	zTemp0+1
.9cda					_SSMNoCarry:
.9cda	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cdd	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate 			; allocate that many characters
.9ce0	5a		phy				phy 								; save Y
.9ce1	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9ce3					_SSMCopy:
.9ce3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ce5	f0 09		beq $9cf0			beq 	_SSMEString 				; no more to copy
.9ce7	20 1f a7	jsr $a71f			jsr 	StringTempWrite 			; and write it out.
.9cea	c8		iny				iny
.9ceb	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cee	d0 f3		bne $9ce3			bne 	_SSMCopy
.9cf0					_SSMEString:
.9cf0	7a		ply				ply
.9cf1					_SSMExit:
.9cf1	60		rts				rts
.9cf2					_SSMNull:
.9cf2	a9 00		lda #$00			lda 	#0
.9cf4	20 e1 a6	jsr $a6e1			jsr 	StringTempAllocate
.9cf7	60		rts				rts
.9cf8					SubstringInitial:
.9cf8	da		phx				phx 								; save initial stack position
.9cf9	08		php				php 								; save carry on stack indicating 2 parameters
.9cfa	20 34 9d	jsr $9d34			jsr 	EvaluateString 				; get a string
.9cfd	5a		phy				phy 								; calculate length to exponent.
.9cfe	a0 ff		ldy #$ff			ldy 	#$FF
.9d00					_SIFindLength:
.9d00	c8		iny				iny
.9d01	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d03	d0 fb		bne $9d00			bne 	_SIFindLength
.9d05	98		tya				tya
.9d06	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d09	7a		ply				ply
.9d0a	e8		inx				inx
.9d0b	20 2c 8d	jsr $8d2c			jsr 	CheckComma 					; comma next
.9d0e	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get next parameter
.9d11	28		plp				plp 								; is it the last parameter ?
.9d12	90 07		bcc $9d1b			bcc 	_SSIExit 					; if so, exit.
.9d14	e8		inx				inx
.9d15	20 2c 8d	jsr $8d2c			jsr 	CheckComma 					; comma next
.9d18	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get last parameter
.9d1b					_SSIExit:
.9d1b	fa		plx				plx
.9d1c	20 24 8d	jsr $8d24			jsr 	CheckRightBracket 			; check closing bracket
.9d1f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d20					EvaluateValue:
.9d20	48		pha				pha
.9d21	20 ec 92	jsr $92ec			jsr		EvaluateExpression 			; expression
.9d24	20 0a 96	jsr $960a			jsr 	Dereference					; derefernce it
.9d27	68		pla				pla
.9d28	60		rts				rts
.9d29					EvaluateNumber:
.9d29	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; get a value
.9d2c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d2f	29 10		and #$10			and 	#NSBIsString
.9d31	d0 16		bne $9d49			bne 	HelperTypeError
.9d33	60		rts				rts
.9d34					EvaluateString:
.9d34	20 20 9d	jsr $9d20			jsr 	EvaluateValue 				; get a value
.9d37	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d3a	29 10		and #$10			and 	#NSBIsString
.9d3c	f0 0b		beq $9d49			beq 	HelperTypeError
.9d3e					CopyAddressToTemp0:
.9d3e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d41	85 36		sta $36				sta 	zTemp0
.9d43	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d46	85 37		sta $37				sta 	zTemp0+1
.9d48	60		rts				rts
.9d49					HelperTypeError:
.9d49	4c 94 9f	jmp $9f94			jmp 	TypeError
.9d4c					EvaluateInteger:
.9d4c	20 29 9d	jsr $9d29			jsr 	EvaluateNumber
.9d4f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d52	d0 0a		bne $9d5e			bne 	HelperValueError 			; if not, it's a float.
.9d54	60		rts				rts
.9d55					EvaluateUnsignedInteger:
.9d55	20 4c 9d	jsr $9d4c			jsr 	EvaluateInteger 			; check integer is +ve
.9d58	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d5b	30 01		bmi $9d5e			bmi 	HelperValueError
.9d5d	60		rts				rts
.9d5e					HelperValueError:
.9d5e	4c 99 9f	jmp $9f99			jmp 	ArgumentError
.9d61					Evaluate16BitInteger:
.9d61	20 55 9d	jsr $9d55			jsr	 	EvaluateUnsignedInteger		; get integer
.9d64	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d67	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d6a	d0 f2		bne $9d5e			bne 	HelperValueError
.9d6c	60		rts				rts
.9d6d					Evaluate16BitIntegerSigned:
.9d6d	20 4c 9d	jsr $9d4c			jsr	 	EvaluateInteger				; get integer
.9d70	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d73	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d76	d0 e6		bne $9d5e			bne 	HelperValueError
.9d78	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d7b	10 03		bpl $9d80			bpl 	_EISNotSigned
.9d7d	20 b5 9d	jsr $9db5			jsr 	NSMNegateMantissa
.9d80					_EISNotSigned:
.9d80	60		rts				rts
.9d81					Evaluate8BitInteger:
.9d81	20 55 9d	jsr $9d55			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d84	d0 d8		bne $9d5e			bne 	HelperValueError
.9d86	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d89	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d8c	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d8f	d0 cd		bne $9d5e			bne 	HelperValueError
.9d91	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d95					Multiply8x8:
.9d95	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d96	85 36		sta $36			  	sta 	zTemp0
.9d98	86 37		stx $37				stx 	zTemp0+1
.9d9a	a9 00		lda #$00			lda 	#0
.9d9c	a2 08		ldx #$08			ldx 	#8
.9d9e					_M88Loop:
.9d9e	90 03		bcc $9da3			bcc 	_M88NoAdd
.9da0	18		clc				clc
.9da1	65 37		adc $37				adc 	zTemp0+1
.9da3					_M88NoAdd:
.9da3	6a		ror a				ror 	a
.9da4	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da6	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da7	d0 f5		bne $9d9e			bne 	_M88Loop
.9da9	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dac					NSMNegate:
.9dac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9daf	49 80		eor #$80			eor 	#NSBIsNegative
.9db1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db4	60		rts				rts
.9db5					NSMNegateMantissa:
.9db5	38		sec				sec
.9db6	a9 00		lda #$00			lda 	#0
.9db8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dbb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dbe	a9 00		lda #$00			lda 	#0
.9dc0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dc3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc6	a9 00		lda #$00			lda 	#0
.9dc8	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dcb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dce	a9 00		lda #$00			lda 	#0
.9dd0	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dd3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd6	60		rts				rts
.9dd7					NSMShiftUpTwo:
.9dd7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dda	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ddd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9de0	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9de3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de6	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9dec	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9def	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9df2	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9df5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9dfb	60		rts				rts
.9dfc					NSMSetZeroMantissaOnly:
.9dfc	a9 00		lda #$00			lda 	#0
.9dfe	80 08		bra $9e08			bra 	NSMSetMantissa
.9e00					NSMSetZero:
.9e00	a9 00		lda #$00			lda 	#0
.9e02					NSMSetByte:
.9e02	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e05	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e08					NSMSetMantissa:
.9e08	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e0b	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e0e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e11	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e14	60		rts				rts
.9e15					NSMShiftLeft:
.9e15	18		clc				clc
.9e16					NSMRotateLeft:
.9e16	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e19	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e1c	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e1f	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e22	60		rts				rts
.9e23					NSMShiftRight:
.9e23	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e26	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e29	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e2c	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e2f	60		rts				rts
.9e30					NSMIsZero:
.9e30	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e33	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e36	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e39	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e3d					Assemble_ora:
.9e3d	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e40	01					.byte $01
.9e41					Assemble_and:
.9e41	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e44	21					.byte $21
.9e45					Assemble_eor:
.9e45	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e48	41					.byte $41
.9e49					Assemble_adc:
.9e49	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e4c	61					.byte $61
.9e4d					Assemble_sta:
.9e4d	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e50	81					.byte $81
.9e51					Assemble_lda:
.9e51	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e54	a1					.byte $a1
.9e55					Assemble_cmp:
.9e55	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e58	c1					.byte $c1
.9e59					Assemble_sbc:
.9e59	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e5c	e1					.byte $e1
.9e5d					Assemble_asl:
.9e5d	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e60	02					.byte $02
>9e61	75					.byte $75
.9e62					Assemble_rol:
.9e62	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e65	22					.byte $22
>9e66	75					.byte $75
.9e67					Assemble_lsr:
.9e67	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e6a	42					.byte $42
>9e6b	75					.byte $75
.9e6c					Assemble_ror:
.9e6c	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e6f	62					.byte $62
>9e70	75					.byte $75
.9e71					Assemble_stx:
.9e71	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e74	82					.byte $82
>9e75	50					.byte $50
.9e76					Assemble_ldx:
.9e76	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e79	a2					.byte $a2
>9e7a	d0					.byte $d0
.9e7b					Assemble_dec:
.9e7b	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e7e	c2					.byte $c2
>9e7f	55					.byte $55
.9e80					Assemble_inc:
.9e80	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e83	e2					.byte $e2
>9e84	55					.byte $55
.9e85					Assemble_stz:
.9e85	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e88	60					.byte $60
>9e89	44					.byte $44
.9e8a					Assemble_bit:
.9e8a	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e8d	20					.byte $20
>9e8e	55					.byte $55
.9e8f					Assemble_sty:
.9e8f	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e92	80					.byte $80
>9e93	54					.byte $54
.9e94					Assemble_ldy:
.9e94	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e97	a0					.byte $a0
>9e98	d5					.byte $d5
.9e99					Assemble_cpy:
.9e99	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e9c	c0					.byte $c0
>9e9d	d4					.byte $d4
.9e9e					Assemble_cpx:
.9e9e	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea1	e0					.byte $e0
>9ea2	d0					.byte $d0
.9ea3					Assemble_tsb:
.9ea3	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea6	00					.byte $00
>9ea7	50					.byte $50
.9ea8					Assemble_trb:
.9ea8	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eab	10					.byte $10
>9eac	50					.byte $50
.9ead					Assemble_jsr:
.9ead	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb0	14					.byte $14
>9eb1	10					.byte $10
.9eb2					Assemble_jmp:
.9eb2	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb5	40					.byte $40
>9eb6	10					.byte $10
.9eb7					Assemble_bpl:
.9eb7	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eba	10					.byte $10
.9ebb					Assemble_bmi:
.9ebb	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ebe	30					.byte $30
.9ebf					Assemble_bvc:
.9ebf	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ec2	50					.byte $50
.9ec3					Assemble_bvs:
.9ec3	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ec6	70					.byte $70
.9ec7					Assemble_bcc:
.9ec7	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eca	90					.byte $90
.9ecb					Assemble_bcs:
.9ecb	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ece	b0					.byte $b0
.9ecf					Assemble_bne:
.9ecf	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed2	d0					.byte $d0
.9ed3					Assemble_beq:
.9ed3	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed6	f0					.byte $f0
.9ed7					Assemble_bra:
.9ed7	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eda	80					.byte $80
.9edb					Assemble_brk:
.9edb	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ede	00					.byte $00
.9edf					Assemble_php:
.9edf	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ee2	08					.byte $08
.9ee3					Assemble_clc:
.9ee3	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ee6	18					.byte $18
.9ee7					Assemble_plp:
.9ee7	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9eea	28					.byte $28
.9eeb					Assemble_sec:
.9eeb	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9eee	38					.byte $38
.9eef					Assemble_rti:
.9eef	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef2	40					.byte $40
.9ef3					Assemble_pha:
.9ef3	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef6	48					.byte $48
.9ef7					Assemble_cli:
.9ef7	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9efa	58					.byte $58
.9efb					Assemble_phy:
.9efb	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9efe	5a					.byte $5a
.9eff					Assemble_rts:
.9eff	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f02	60					.byte $60
.9f03					Assemble_pla:
.9f03	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f06	68					.byte $68
.9f07					Assemble_sei:
.9f07	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f0a	78					.byte $78
.9f0b					Assemble_ply:
.9f0b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f0e	7a					.byte $7a
.9f0f					Assemble_dey:
.9f0f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f12	88					.byte $88
.9f13					Assemble_txa:
.9f13	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f16	8a					.byte $8a
.9f17					Assemble_tya:
.9f17	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f1a	98					.byte $98
.9f1b					Assemble_txs:
.9f1b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f1e	9a					.byte $9a
.9f1f					Assemble_tay:
.9f1f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f22	a8					.byte $a8
.9f23					Assemble_tax:
.9f23	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f26	aa					.byte $aa
.9f27					Assemble_clv:
.9f27	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f2a	b8					.byte $b8
.9f2b					Assemble_tsx:
.9f2b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f2e	ba					.byte $ba
.9f2f					Assemble_iny:
.9f2f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f32	c8					.byte $c8
.9f33					Assemble_dex:
.9f33	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f36	ca					.byte $ca
.9f37					Assemble_cld:
.9f37	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f3a	d8					.byte $d8
.9f3b					Assemble_phx:
.9f3b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f3e	da					.byte $da
.9f3f					Assemble_stp:
.9f3f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f42	db					.byte $db
.9f43					Assemble_inx:
.9f43	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f46	e8					.byte $e8
.9f47					Assemble_nop:
.9f47	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f4a	ea					.byte $ea
.9f4b					Assemble_sed:
.9f4b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f4e	f8					.byte $f8
.9f4f					Assemble_plx:
.9f4f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f52	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f53					DecimalScalarTable:
>9f53	66 66 66 66				.dword $66666666 ; 0.1
>9f57	de					.byte $de
>9f58	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f5c	db					.byte $db
>9f5d	4c 37 89 41				.dword $4189374c ; 0.001
>9f61	d8					.byte $d8
>9f62	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f66	d4					.byte $d4
>9f67	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f6b	d1					.byte $d1
>9f6c	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f70	ce					.byte $ce
>9f71	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f75	ca					.byte $ca
>9f76	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f7a	c7					.byte $c7
>9f7b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f7f	c4					.byte $c4
>9f80	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f84	c0					.byte $c0
>9f85	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f89	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f8a					SyntaxError:
.9f8a	a9 02		lda #$02		lda	#2
.9f8c	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.9f8f					RangeError:
.9f8f	a9 04		lda #$04		lda	#4
.9f91	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.9f94					TypeError:
.9f94	a9 05		lda #$05		lda	#5
.9f96	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.9f99					ArgumentError:
.9f99	a9 07		lda #$07		lda	#7
.9f9b	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.9f9e					NotDoneError:
.9f9e	a9 0c		lda #$0c		lda	#12
.9fa0	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.9fa3					ErrorText:
>9fa3	42 72 65 61 6b 00			.text	"Break",0
>9fa9	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fb1	72 72 6f 72 00
>9fb6	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fbe	20 62 79 20 7a 65 72 6f 00
>9fc7	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fcf	61 6e 67 65 00
>9fd4	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fdc	6d 61 74 63 68 00
>9fe2	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fea	65 6d 6f 72 79 00
>9ff0	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff8	61 72 67 75 6d 65 6e 74 00
>a001	53 74 6f 70 00				.text	"Stop",0
>a006	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a00e	6f 6f 20 6c 6f 6e 67 00
>a016	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a01e	6e 20 66 61 69 6c 65 64 00
>a027	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a02f	61 74 61 00
>a033	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a03b	65 6e 74 65 64 00
>a041	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a049	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a055	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a05d	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a06a	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a072	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a07f	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a087	68 6f 75 74 20 57 68 69 6c 65 00
>a092	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a09a	68 6f 75 74 20 46 6f 72 00
>a0a3	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0ab	61 63 6b 20 66 75 6c 6c 00
>a0b4	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0bc	75 63 74 75 72 65 00
>a0c3	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0cb	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d8	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0e0	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0ee	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f6	7a 65 00
>a0f9	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a101	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a109	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3382."
>a111	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>a121	2e 20 42 75 69 6c 64 20 33 33 38 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12e					MemoryDeleteLine:
.a12e	20 4d a1	jsr $a14d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a131	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a133	a8		tay				tay
.a134					_MDDLLoop:
.a134	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a136	92 30		sta ($30)			sta 	(codePtr)
.a138	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a13a	c5 3a		cmp $3a				cmp 	zTemp2
.a13c	d0 07		bne $a145			bne 	_MDLDLNext
.a13e	a5 31		lda $31				lda 	codePtr+1
.a140	c5 3b		cmp $3b				cmp 	zTemp2+1
.a142	d0 01		bne $a145			bne 	_MDLDLNext
.a144					_MDDLExit:
.a144	60		rts				rts
.a145					_MDLDLNext:
.a145	e6 30		inc $30				inc 	codePtr						; next byte
.a147	d0 eb		bne $a134			bne 	_MDDLLoop
.a149	e6 31		inc $31				inc 	codePtr+1
.a14b	80 e7		bra $a134			bra 	_MDDLLoop
.a14d					IMemoryFindEnd:
.a14d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14f	85 3a		sta $3a				sta 	0+zTemp2
.a151	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a153	85 3b		sta $3b				sta 	1+zTemp2
.a155					_MDLFELoop:
.a155	b2 3a		lda ($3a)			lda 	(zTemp2)
.a157	f0 0b		beq $a164			beq 	_MDLFEExit
.a159	18		clc				clc
.a15a	65 3a		adc $3a				adc 	zTemp2
.a15c	85 3a		sta $3a				sta 	zTemp2
.a15e	90 f5		bcc $a155			bcc 	_MDLFELoop
.a160	e6 3b		inc $3b				inc 	zTemp2+1
.a162	80 f1		bra $a155			bra 	_MDLFELoop
.a164					_MDLFEExit:
.a164	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a165					MemoryInsertLine:
.a165	08		php				php
.a166	20 4d a1	jsr $a14d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a169	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a16b	1a		inc a				inc 	a
.a16c	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16e	b0 36		bcs $a1a6			bcs 	_MDLIError
.a170	28		plp				plp
.a171	90 08		bcc $a17b			bcc 	_MDLIFound
.a173	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a175	85 30		sta $30				sta 	codePtr
.a177	a5 3b		lda $3b				lda 	zTemp2+1
.a179	85 31		sta $31				sta 	codePtr+1
.a17b					_MDLIFound:
.a17b	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17e	a8		tay				tay
.a17f					_MDLIInsert:
.a17f	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a181	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a183	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a185	c5 3a		cmp $3a				cmp 	zTemp2
.a187	d0 06		bne $a18f			bne 	_MDLINext
.a189	a5 31		lda $31				lda 	codePtr+1
.a18b	c5 3b		cmp $3b				cmp 	zTemp2+1
.a18d	f0 0a		beq $a199			beq 	_MDLIHaveSpace
.a18f					_MDLINext:
.a18f	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a191	d0 02		bne $a195			bne 	_MDLINoBorrow
.a193	c6 3b		dec $3b				dec 	zTemp2+1
.a195					_MDLINoBorrow:
.a195	c6 3a		dec $3a				dec 	zTemp2
.a197	80 e6		bra $a17f			bra 	_MDLIInsert
.a199					_MDLIHaveSpace:
.a199	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a19c	88		dey				dey 								; from offset-1 to 0
.a19d					_MDLICopy:
.a19d	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1a0	91 30		sta ($30),y			sta 	(codePtr),y
.a1a2	88		dey				dey
.a1a3	10 f8		bpl $a19d			bpl 	_MDLICopy
.a1a5	60		rts				rts
.a1a6					_MDLIError:
.a1a6	a9 06		lda #$06		lda	#6
.a1a8	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.a1ab					MDLAppendLine:
.a1ab	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1ad	85 36		sta $36				sta 	zTemp0
.a1af	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b1	85 38		sta $38				sta 	0+zTemp1
.a1b3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b5	85 39		sta $39				sta 	1+zTemp1
.a1b7	b2 38		lda ($38)			lda 	(zTemp1)
.a1b9	d0 0a		bne $a1c5			bne 	_MDLANoInitialise
.a1bb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1bd	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1c0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1c2	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1c5					_MDLANoInitialise:
.a1c5	18		clc				clc
.a1c6	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c9	85 38		sta $38				sta 	zTemp1
.a1cb	72 36		adc ($36)			adc 	(zTemp0)
.a1cd	8d 2b 06	sta $062b			sta 	AppendPointer
.a1d0	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1d3	85 39		sta $39				sta 	zTemp1+1
.a1d5	69 00		adc #$00			adc 	#0
.a1d7	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1da	a0 00		ldy #$00			ldy 	#0
.a1dc					_MDLACopy:
.a1dc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1de	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e0	c8		iny				iny
.a1e1	98		tya				tya
.a1e2	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e4	d0 f6		bne $a1dc			bne 	_MDLACopy
.a1e6	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e8	91 38		sta ($38),y			sta 	(zTemp1),y
.a1ea	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1eb					MemoryNew:
.a1eb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ed	85 30		sta $30				sta 	codePtr
.a1ef	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1f1	85 31		sta $31				sta 	codePtr+1
.a1f3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f5	92 30		sta ($30)			sta 	(codePtr)
.a1f7	60		rts				rts
.a1f8					MemoryInline:
.a1f8	98		tya				tya 								; put address into stack,x
.a1f9	18		clc				clc
.a1fa	65 30		adc $30				adc 	codePtr
.a1fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1ff	a5 31		lda $31				lda 	codePtr+1
.a201	69 00		adc #$00			adc 	#0
.a203	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a206	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a209	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a20c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a20d					MemorySearch:
.a20d	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20f	86 37		stx $37				stx 	zTemp0+1
.a211	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a213	85 30		sta $30				sta 	codePtr
.a215	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a217	85 31		sta $31				sta 	codePtr+1
.a219					_MTAXLoop:
.a219	b2 30		lda ($30)			lda 	(codePtr)
.a21b	18		clc				clc
.a21c	f0 21		beq $a23f			beq 	_MTAXExit 					; reached end, exit with CC.
.a21e	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a220	b1 30		lda ($30),y			lda 	(codePtr),y
.a222	38		sec				sec
.a223	e5 36		sbc $36				sbc 	zTemp0
.a225	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a227	c8		iny				iny 								; do the MSB
.a228	b1 30		lda ($30),y			lda 	(codePtr),y
.a22a	e5 37		sbc $37				sbc 	zTemp0+1
.a22c	05 38		ora $38				ora 	zTemp1
.a22e	f0 0f		beq $a23f			beq 	_MTAXExit	 				; found
.a230	b0 0d		bcs $a23f			bcs 	_MTAXExit 					; current < required exit
.a232	18		clc				clc
.a233	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a235	65 30		adc $30				adc 	codePtr
.a237	85 30		sta $30				sta 	codePtr
.a239	90 02		bcc $a23d			bcc 	_CREExit
.a23b	e6 31		inc $31				inc 	codePtr+1
.a23d					_CREExit:
.a23d	80 da		bra $a219			bra 	_MTAXLoop
.a23f					_MTAXExit:
.a23f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a240					RectangleCommand:
.a240	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a242	80 02		bra $a246			bra 	ShapeDrawCmd
.a244					CircleCommand:
.a244	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a246					ShapeDrawCmd:
.a246	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a249					ShapeDraw:
.a249	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a24c	4c c8 a2	jmp $a2c8			jmp 	ExecuteGraphicCommand	 	; and complete
.a24f					SpriteCommand:
.a24f	a2 00		ldx #$00			ldx 	#0
.a251	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get image number.
.a254	5a		phy				phy
.a255	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a257	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a25a	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a25c	b0 0d		bcs $a26b			bcs 	_SCRange
.a25e	a0 ff		ldy #$ff			ldy 	#255
.a260	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a263	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a265	7a		ply				ply
.a266	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a269	80 5d		bra $a2c8			bra 	ExecuteGraphicCommand
.a26b					_SCRange:
.a26b	4c 8f 9f	jmp $9f8f			jmp 	RangeError
.a26e					ImageCommand:
.a26e	a2 00		ldx #$00			ldx 	#0
.a270	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get image number.
.a273	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a276					ImageRunDraw:
.a276	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a278	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a27b	ad 34 06	lda $0634			lda 	gxDrawScale
.a27e	0a		asl a				asl 	a
.a27f	0a		asl a				asl 	a
.a280	0a		asl a				asl 	a
.a281	a8		tay				tay
.a282	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a284	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a287	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a28a	60		rts				rts
.a28b					TextCommand:
.a28b	a2 00		ldx #$00			ldx 	#0
.a28d	20 34 9d	jsr $9d34			jsr 	EvaluateString 				; get text
.a290	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a293					TextRunDraw:
.a293	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a295	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a298	a0 00		ldy #$00			ldy 	#0
.a29a					_IRDLoop:
.a29a	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a29d	85 37		sta $37				sta 	zTemp0+1
.a29f	ad 08 04	lda $0408			lda 	NSMantissa0
.a2a2	85 36		sta $36				sta 	zTemp0
.a2a4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2a6	f0 13		beq $a2bb			beq 	_IRDExit
.a2a8	5a		phy				phy									; save string pos
.a2a9	48		pha				pha 								; save char
.a2aa	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2ad	0a		asl a				asl 	a
.a2ae	0a		asl a				asl 	a
.a2af	0a		asl a				asl 	a
.a2b0	a8		tay				tay
.a2b1	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2b3	fa		plx				plx 								; char to draw
.a2b4	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a2b7	7a		ply				ply 								; restore string pos
.a2b8	c8		iny				iny
.a2b9	90 df		bcc $a29a			bcc 	_IRDLoop 					; go back if no error.
.a2bb					_IRDExit:
.a2bb	60		rts				rts
.a2bc					PlotCommand:
.a2bc	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2be	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a2c1	80 05		bra $a2c8			bra 	ExecuteGraphicCommand
.a2c3					LineCommand:
.a2c3	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2c5	20 d4 a2	jsr $a2d4			jsr 	RunGraphicsCommand
.a2c8					ExecuteGraphicCommand:
.a2c8	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2cb	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw 				; draw it and exit
.a2ce	b0 01		bcs $a2d1			bcs 	_EGCError
.a2d0	60		rts				rts
.a2d1					_EGCError:
.a2d1	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.a2d4					RunGraphicsCommand:
.a2d4	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2d7	68		pla				pla 								; pop handler address
.a2d8	fa		plx				plx
.a2d9	1a		inc a				inc 	a
.a2da	d0 01		bne $a2dd			bne 	_RGINoCarry
.a2dc	e8		inx				inx
.a2dd					_RGINoCarry:
.a2dd	8d 32 06	sta $0632			sta 	GXHandler
.a2e0	8e 33 06	stx $0633			stx 	GXHandler+1
.a2e3					_RGICommandLoop:
.a2e3	b1 30		lda ($30),y			lda 	(codePtr),y
.a2e5	c8		iny				iny
.a2e6	c9 cd		cmp #$cd			cmp 	#KWD_TO						; is it TO x,y
.a2e8	f0 53		beq $a33d			beq 	_RGI_To
.a2ea	c9 ba		cmp #$ba			cmp 	#KWD_HERE 					; do it here.
.a2ec	f0 55		beq $a343			beq 	_RGI_Here
.a2ee	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a2f0	f0 3d		beq $a32f			beq 	_RGI_Exit
.a2f2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a2f4	f0 39		beq $a32f			beq 	_RGI_Exit
.a2f6	c9 c1		cmp #$c1			cmp 	#KWD_OUTLINE 				; solid or outline
.a2f8	f0 3e		beq $a338			beq 	_RGI_Frame
.a2fa	c9 c9		cmp #$c9			cmp 	#KWD_SOLID
.a2fc	f0 33		beq $a331			beq 	_RGI_Solid
.a2fe	c9 ab		cmp #$ab			cmp 	#KWD_BY 					; by offset
.a300	f0 4b		beq $a34d			beq 	_RGI_By
.a302	c9 b6		cmp #$b6			cmp 	#KWD_FROM 					; from
.a304	f0 17		beq $a31d			beq 	_RGI_Move2
.a306	c9 b3		cmp #$b3			cmp 	#KWD_DIM 					; dim (set scale)
.a308	f0 65		beq $a36f			beq 	_RGI_Dim
.a30a	c9 b1		cmp #$b1			cmp 	#KWD_COLOUR 				; colour or Color
.a30c	f0 78		beq $a386			beq 	_RGI_Colour
.a30e	c9 b0		cmp #$b0			cmp 	#KWD_COLOR
.a310	f0 74		beq $a386			beq 	_RGI_Colour
.a312	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a315	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a317	d0 03		bne $a31c			bne 	_RGI_Move 					; move
.a319	4c b0 a3	jmp $a3b0			jmp		_RGI_SpriteInstructions
.a31c					_RGI_Move:
.a31c	88		dey				dey 								; unpick get.
.a31d					_RGI_Move2:
.a31d	20 d6 a3	jsr $a3d6			jsr 	GCGetCoordinatePair 		; move to here
.a320	20 fd a3	jsr $a3fd			jsr 	GCCopyPairToStore 			; save
.a323	5a		phy				phy
.a324	20 f3 a3	jsr $a3f3			jsr 	GCLoadAXY 					; load in
.a327	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a329	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a32c	7a		ply				ply
.a32d	80 b4		bra $a2e3			bra 	_RGICommandLoop 			; and go round
.a32f					_RGI_Exit:
.a32f	88		dey				dey 								; unpick : / EOL
.a330	60		rts				rts
.a331					_RGI_Solid:
.a331	a9 02		lda #$02			lda 	#2
.a333	8d 2e 06	sta $062e			sta 	gxFillSolid
.a336	80 ab		bra $a2e3			bra 	_RGICommandLoop
.a338					_RGI_Frame:
.a338	9c 2e 06	stz $062e			stz 	gxFillSolid
.a33b	80 a6		bra $a2e3			bra 	_RGICommandLoop
.a33d					_RGI_To:
.a33d	20 d6 a3	jsr $a3d6			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a340	20 fd a3	jsr $a3fd			jsr 	GCCopyPairToStore
.a343					_RGI_Here:
.a343	5a		phy				phy
.a344	20 f3 a3	jsr $a3f3			jsr 	GCLoadAXY 					; load it into AXY
.a347	20 ad a3	jsr $a3ad			jsr 	_RGICallHandler 			; go do whatever it is.
.a34a	7a		ply				ply
.a34b	80 96		bra $a2e3			bra 	_RGICommandLoop 			; and go round
.a34d					_RGI_By:
.a34d	20 e3 a3	jsr $a3e3			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a350	18		clc				clc
.a351	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a354	6d 2f 06	adc $062f			adc 	gxxPos
.a357	8d 2f 06	sta $062f			sta 	gxXPos
.a35a	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a35d	6d 30 06	adc $0630			adc 	gxxPos+1
.a360	8d 30 06	sta $0630			sta 	gxXPos+1
.a363	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a366	18		clc				clc
.a367	6d 31 06	adc $0631			adc 	gxYPos
.a36a	8d 31 06	sta $0631			sta 	gxYPos
.a36d	80 d4		bra $a343			bra 	_RGI_Here
.a36f					_RGI_Dim:
.a36f	a2 01		ldx #$01			ldx	 	#1
.a371	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger
.a374	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a377	c9 00		cmp #$00			cmp 	#0
.a379	f0 2f		beq $a3aa			beq 	_RGIRange
.a37b	c9 09		cmp #$09			cmp 	#8+1
.a37d	b0 2b		bcs $a3aa			bcs		_RGIRange
.a37f	3a		dec a				dec 	a
.a380	8d 34 06	sta $0634			sta 	gxDrawScale
.a383	4c e3 a2	jmp $a2e3			jmp 	_RGICommandLoop
.a386					_RGI_Colour:
.a386	a2 01		ldx #$01			ldx 	#1 							; colour
.a388	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger
.a38b	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a38d	20 00 9e	jsr $9e00			jsr 	NSMSetZero
.a390	b1 30		lda ($30),y			lda 	(codePtr),y
.a392	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a394	d0 04		bne $a39a			bne 	_RGICDefaultMode
.a396	c8		iny				iny
.a397	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger
.a39a					_RGICDefaultMode:
.a39a	5a		phy				phy
.a39b	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a39d	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3a0	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3a3	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a3a6	7a		ply				ply
.a3a7	4c e3 a2	jmp $a2e3			jmp 	_RGICommandLoop 			; and go round
.a3aa					_RGIRange:
.a3aa	4c 8f 9f	jmp $9f8f			jmp 	RangeError
.a3ad					_RGICallHandler:
.a3ad	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3b0					_RGI_SpriteInstructions:
.a3b0	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a3b2	f0 07		beq $a3bb			beq 	_RGISpriteOff
.a3b4	c9 bb		cmp #$bb			cmp 	#KWD_IMAGE
.a3b6	f0 13		beq $a3cb			beq 	_RGISetImage
.a3b8	4c 1c a3	jmp $a31c			jmp 	_RGI_Move
.a3bb					_RGISpriteOff:
.a3bb	5a		phy				phy
.a3bc	a0 01		ldy #$01			ldy 	#1
.a3be	a2 00		ldx #$00			ldx 	#0
.a3c0					_RGIDoCommandLoop:
.a3c0	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3c2	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a3c5	7a		ply				ply
.a3c6	b0 e2		bcs $a3aa			bcs 	_RGIRange
.a3c8	4c e3 a2	jmp $a2e3			jmp 	_RGICommandLoop
.a3cb					_RGISetImage:
.a3cb	a2 01		ldx #$01			ldx 	#1
.a3cd	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger
.a3d0	5a		phy				phy
.a3d1	aa		tax				tax
.a3d2	a0 00		ldy #$00			ldy 	#0
.a3d4	80 ea		bra $a3c0			bra 	_RGIDoCommandLoop
.a3d6					GCGetCoordinatePair:
.a3d6	a2 01		ldx #$01			ldx 	#1
.a3d8	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.a3db	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a3de	e8		inx				inx
.a3df	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.a3e2	60		rts				rts
.a3e3					GCSignedCoordinatePair:
.a3e3	a2 01		ldx #$01			ldx 	#1
.a3e5	20 6d 9d	jsr $9d6d			jsr 	Evaluate16BitIntegerSigned
.a3e8	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a3eb	e8		inx				inx
.a3ec	20 6d 9d	jsr $9d6d			jsr 	Evaluate16BitIntegerSigned
.a3ef	60		rts				rts
.a3f0					_GCCPRange:
.a3f0	4c 8f 9f	jmp $9f8f			jmp 	RangeError
.a3f3					GCLoadAXY:
.a3f3	ad 30 06	lda $0630			lda 	gxXPos+1
.a3f6	ae 2f 06	ldx $062f			ldx 	gxXPos
.a3f9	ac 31 06	ldy $0631			ldy 	gxYPos
.a3fc	60		rts				rts
.a3fd					GCCopyPairToStore:
.a3fd	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a400	8d 2f 06	sta $062f			sta 	gxXPos
.a403	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a406	8d 30 06	sta $0630			sta 	gxXPos+1
.a409	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a40c	8d 31 06	sta $0631			sta 	gxYPos
.a40f	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a410					BitmapCtrl:
.a410	b1 30		lda ($30),y			lda 	(codePtr),y
.a412	c8		iny				iny
.a413	a2 01		ldx #$01			ldx 	#1
.a415	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a417	f0 11		beq $a42a			beq 	BitmapSwitch
.a419	ca		dex				dex
.a41a	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a41c	f0 0c		beq $a42a			beq 	BitmapSwitch
.a41e	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get the colour
.a421	5a		phy				phy
.a422	aa		tax				tax
.a423	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a425	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a428	7a		ply				ply
.a429	60		rts				rts
.a42a					BitmapSwitch:
.a42a	5a		phy				phy
.a42b	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a42d	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a42f	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a432	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a434	a0 00		ldy #$00			ldy 	#0
.a436	a2 ff		ldx #$ff			ldx 	#$FF
.a438	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a43b	9c 2e 06	stz $062e			stz 	gxFillSolid
.a43e	9c 2f 06	stz $062f			stz 	gxXPos
.a441	9c 30 06	stz $0630			stz 	gxXPos+1
.a444	9c 31 06	stz $0631			stz 	gxYPos
.a447	9c 34 06	stz $0634			stz 	gxDrawScale
.a44a	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a44c	a2 00		ldx #$00			ldx 	#0
.a44e	a0 00		ldy #$00			ldy 	#0
.a450	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a453	7a		ply				ply
.a454	60		rts				rts
.a455					SpritesCtrl:
.a455	b1 30		lda ($30),y			lda 	(codePtr),y
.a457	c8		iny				iny
.a458	a2 01		ldx #$01			ldx 	#1
.a45a	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a45c	f0 08		beq $a466			beq 	SpriteSwitch
.a45e	ca		dex				dex
.a45f	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a461	f0 03		beq $a466			beq 	SpriteSwitch
.a463	4c 8a 9f	jmp $9f8a			jmp 	SyntaxError
.a466					SpriteSwitch:
.a466	5a		phy				phy
.a467	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a469	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a46b	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a46e	7a		ply				ply
.a46f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a470					GfxCommand:
.a470	a2 00		ldx #$00			ldx 	#0
.a472	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; command
.a475	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a478	e8		inx				inx
.a479	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger 		; X
.a47c	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a47f	e8		inx				inx
.a480	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; Y
.a483	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a486	4a		lsr a				lsr 	a
.a487	d0 16		bne $a49f			bne 	_GfxError
.a489	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a48c	b0 11		bcs $a49f			bcs 	_GfxError 					; bit 7 should have been zero
.a48e	5a		phy				phy 								; save pos
.a48f	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a492	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a495	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a498	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a49b	b0 02		bcs $a49f			bcs 	_GfxError
.a49d	7a		ply				ply 								; restore pos and exit.
.a49e	60		rts				rts
.a49f					_GfxError:
.a49f	4c 8f 9f	jmp $9f8f			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4a2					UnaryHit:
.a4a2	fa		plx				plx
.a4a3	a9 36		lda #$36			lda 	#zTemp0
.a4a5	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4a8	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a4ab	e8		inx				inx
.a4ac	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4af	20 24 8d	jsr $8d24			jsr		CheckRightBracket
.a4b2	ca		dex				dex 								; fix back up again.
.a4b3	da		phx				phx 								; save X/Y
.a4b4	5a		phy				phy
.a4b5	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4b8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4bb	aa		tax				tax
.a4bc	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4be	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw 				; calculate result
.a4c1	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4c2	7a		ply				ply 								; restore XY
.a4c3	fa		plx				plx
.a4c4	20 02 9e	jsr $9e02			jsr 	NSMSetByte 					; return the hit result
.a4c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4c8					PaletteCommand:
.a4c8	a2 00		ldx #$00			ldx 	#0
.a4ca	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; colour
.a4cd	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a4d0	e8		inx				inx
.a4d1	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger 		; r
.a4d4	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a4d7	e8		inx				inx
.a4d8	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; g
.a4db	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a4de	e8		inx				inx
.a4df	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; b
.a4e2	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4e5	85 36		sta $36				sta 	zTemp0
.a4e7	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a4e9	85 37		sta $37				sta 	zTemp0+1
.a4eb	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a4ed	26 37		rol $37				rol	 	zTemp0+1
.a4ef	06 36		asl $36				asl 	zTemp0
.a4f1	26 37		rol $37				rol	 	zTemp0+1
.a4f3	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a4f5	85 01		sta $01				sta 	1
.a4f7	5a		phy				phy
.a4f8	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a4fb	92 36		sta ($36)			sta 	(zTemp0)
.a4fd	a0 01		ldy #$01			ldy 	#1
.a4ff	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a502	91 36		sta ($36),y			sta 	(zTemp0),y
.a504	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a507	c8		iny				iny
.a508	91 36		sta ($36),y			sta 	(zTemp0),y
.a50a	7a		ply				ply
.a50b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/event.asm

.a50c					UnaryEvent:
.a50c	fa		plx				plx
.a50d	20 b4 a5	jsr $a5b4			jsr 	TimerToStackX 				; timer in +0
.a510	e8		inx				inx  								; put reference into +1
.a511	20 c6 97	jsr $97c6			jsr 	EvaluateTerm
.a514	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a517	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a519	d0 57		bne $a572			bne 	_UEType
.a51b	e8		inx				inx 								; put the step in +2
.a51c	20 2c 8d	jsr $8d2c			jsr 	CheckComma
.a51f	20 61 9d	jsr $9d61			jsr 	Evaluate16BitInteger
.a522	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.a525	ca		dex				dex
.a526	ca		dex				dex
.a527	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a52a	85 36		sta $36				sta 	zTemp0
.a52c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a52f	85 37		sta $37				sta 	zTemp0+1
.a531	5a		phy				phy
.a532	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a534	b1 36		lda ($36),y			lda 	(zTemp0),y
.a536	30 36		bmi $a56e			bmi 	_UEFalse 					; exit if signed.
.a538	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a53a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a53d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a53f	c8		iny				iny
.a540	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a543	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a545	c8		iny				iny
.a546	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a549	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a54b	90 21		bcc $a56e			bcc 	_UEFalse 					; no, return FALSE.
.a54d	18		clc				clc
.a54e	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a550	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a553	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a556	91 36		sta ($36),y			sta 	(zTemp0),y
.a558	c8		iny				iny
.a559	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a55c	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a55f	91 36		sta ($36),y			sta 	(zTemp0),y
.a561	c8		iny				iny
.a562	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a565	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a568	91 36		sta ($36),y			sta 	(zTemp0),y
.a56a	7a		ply				ply
.a56b	4c aa 8d	jmp $8daa			jmp 	ReturnTrue
.a56e					_UEFalse:
.a56e	7a		ply				ply 								; restore Y
.a56f	4c b6 8d	jmp $8db6			jmp 	ReturnFalse 				; and return False
.a572					_UEType:
.a572	4c 94 9f	jmp $9f94			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/joy.asm

.a575					UnaryJoyX:
.a575	18		clc				clc
.a576	80 01		bra $a579			bra 	JoyMain
.a578					UnaryJoyY:
.a578	38		sec				sec
.a579					JoyMain:
.a579	fa		plx				plx 								; get pos
.a57a	08		php				php 								; save carry (set for Y)
.a57b	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a57e	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.a581	20 d3 a9	jsr $a9d3			jsr 	EXTReadController 			; read the controller.
.a584	28		plp				plp
.a585	90 02		bcc $a589			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a587	4a		lsr a				lsr 	a
.a588	4a		lsr a				lsr 	a
.a589					_JMNoShift:
.a589	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a58a	b0 0a		bcs $a596			bcs 	_JMIsRight
.a58c	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a58d	b0 04		bcs $a593			bcs 	_JMIsLeft
.a58f	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; zero result
.a592	60		rts				rts
.a593					_JMIsLeft:
.a593	4c aa 8d	jmp $8daa			jmp 	ReturnTrue
.a596					_JMIsRight:
.a596	a9 01		lda #$01			lda 	#1
.a598	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.a59b	60		rts				rts
.a59c					UnaryJoyB:
.a59c	fa		plx				plx 								; get pos
.a59d	20 81 9d	jsr $9d81			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5a0	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.a5a3	20 d3 a9	jsr $a9d3			jsr 	EXTReadController 			; read the controller.
.a5a6	4a		lsr a				lsr 	a
.a5a7	4a		lsr a				lsr 	a
.a5a8	4a		lsr a				lsr 	a
.a5a9	4a		lsr a				lsr 	a
.a5aa	29 01		and #$01			and 	#1
.a5ac	20 02 9e	jsr $9e02			jsr 	NSMSetByte
.a5af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/timer.asm

.a5b0					UnaryTimer:
.a5b0	fa		plx				plx
.a5b1	20 24 8d	jsr $8d24			jsr 	CheckRightBracket
.a5b4					TimerToStackX:
.a5b4	20 00 9e	jsr $9e00			jsr 	NSMSetZero 					; zero result
.a5b7	64 01		stz $01				stz 	1 							; access I/O
.a5b9	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5bc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5bf	ad 5a d6	lda $d65a			lda 	$D65A
.a5c2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5c5	ad 5b d6	lda $d65b			lda 	$D65B
.a5c8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5cc					StackPushByte:
.a5cc	48		pha				pha 								; save byte
.a5cd	a5 34		lda $34				lda 	BasicStack
.a5cf	d0 09		bne $a5da			bne 	_SPBNoBorrow
.a5d1	c6 35		dec $35				dec 	BasicStack+1
.a5d3	48		pha				pha
.a5d4	a5 35		lda $35				lda 	BasicStack+1
.a5d6	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5d8	90 06		bcc $a5e0			bcc 	_SPBMemory
.a5da					_SPBNoBorrow:
.a5da	c6 34		dec $34				dec 	BasicStack
.a5dc	68		pla				pla 								; get back and write
.a5dd	92 34		sta ($34)			sta 	(BasicStack)
.a5df	60		rts				rts
.a5e0					_SPBMemory:
.a5e0	a9 12		lda #$12		lda	#18
.a5e2	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.a5e5					StackPopByte:
.a5e5	b2 34		lda ($34)			lda 	(BasicStack)
.a5e7	e6 34		inc $34				inc 	BasicStack
.a5e9	d0 02		bne $a5ed			bne 	_SPBNoCarry
.a5eb	e6 35		inc $35				inc 	BasicStack+1
.a5ed					_SPBNoCarry:
.a5ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a5ee					StackOpen:
.a5ee	48		pha				pha 								; save frame byte
.a5ef	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a5f1	0a		asl a				asl 	a 							; claim twice this for storage
.a5f2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a5f4	38		sec				sec 								; so basically subtracting from
.a5f5	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a5f7	85 34		sta $34				sta 	basicStack
.a5f9	b0 08		bcs $a603			bcs 	_SONoBorrow
.a5fb	c6 35		dec $35				dec 	basicStack+1
.a5fd	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a5ff	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a601	90 04		bcc $a607			bcc 	_SOMemory
.a603					_SONoBorrow:
.a603	68		pla				pla 								; get marker back and write at TOS
.a604	92 34		sta ($34)			sta 	(basicStack)
.a606	60		rts				rts
.a607					_SOMemory:
.a607	a9 12		lda #$12		lda	#18
.a609	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.a60c					StackClose:
.a60c	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a60e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a610	0a		asl a				asl 	a 							; claim twice this.
.a611	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a613	85 34		sta $34				sta 	basicStack
.a615	90 02		bcc $a619			bcc 	_SCExit
.a617	e6 35		inc $35				inc 	basicStack+1
.a619					_SCExit:
.a619	60		rts				rts
.a61a					StackCheckFrame:
.a61a	48		pha				pha
.a61b					_StackRemoveLocals:
.a61b	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a61d	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a61f	b0 05		bcs $a626			bcs 	_SCNoLocal
.a621	20 ea 87	jsr $87ea			jsr 	LocalPopValue
.a624	80 f5		bra $a61b			bra 	_StackRemoveLocals
.a626					_SCNoLocal:
.a626	68		pla				pla
.a627	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a629	29 f0		and #$f0			and 	#$F0 						; check type bits
.a62b	d0 01		bne $a62e			bne 	_SCFError 					; different, we have structures mixed up
.a62d	60		rts				rts
.a62e					_SCFError:
.a62e	8a		txa				txa 								; report error X
.a62f	4c 3d 8d	jmp $8d3d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a632					STKSaveCodePosition:
.a632	5a		phy				phy
.a633	98		tya				tya 								; save Y
.a634	a0 05		ldy #$05			ldy 	#5
.a636	91 34		sta ($34),y			sta 	(basicStack),y
.a638	88		dey				dey 								; save Code Pointer
.a639					_STKSaveLoop:
.a639	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a63c	91 34		sta ($34),y			sta 	(basicStack),y
.a63e	88		dey				dey
.a63f	d0 f8		bne $a639			bne 	_STKSaveLoop
.a641	7a		ply				ply
.a642	60		rts				rts
.a643					STKLoadCodePosition:
.a643	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a645					_STKLoadLoop:
.a645	b1 34		lda ($34),y			lda 	(basicStack),y
.a647	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a64a	c8		iny				iny
.a64b	c0 05		cpy #$05			cpy 	#5
.a64d	d0 f6		bne $a645			bne 	_STKLoadLoop
.a64f	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a651	a8		tay				tay
.a652	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a653					StackReset:
.a653	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a655	85 34		sta $34				sta 	0+basicStack
.a657	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a659	85 35		sta $35				sta 	1+basicStack
.a65b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a65d	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a65f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a660					StringConcrete:
.a660	5a		phy				phy 								; save position on stack
.a661	20 c9 99	jsr $99c9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a664	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a667	85 38		sta $38				sta 	zTemp1
.a669	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a66c	85 39		sta $39				sta 	zTemp1+1
.a66e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a670					_SALength:
.a670	c8		iny				iny
.a671	b1 38		lda ($38),y			lda 	(zTemp1),y
.a673	d0 fb		bne $a670			bne 	_SALength
.a675	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a677	b0 3f		bcs $a6b8			bcs 	_SALengthError
.a679	98		tya				tya 				 				; length of the new string
.a67a	18		clc				clc
.a67b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a67d	90 02		bcc $a681			bcc 	_SAHaveLength
.a67f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a681					_SAHaveLength:
.a681	48		pha				pha 								; save length.
.a682	38		sec				sec
.a683	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a685	6d 8e 04	adc $048e			adc 	StringMemory
.a688	8d 8e 04	sta $048e			sta 	StringMemory
.a68b	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a68d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a690	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a692	6d 8f 04	adc $048f			adc 	StringMemory+1
.a695	8d 8f 04	sta $048f			sta 	StringMemory+1
.a698	85 3b		sta $3b				sta 	zTemp2+1
.a69a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a69d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a69e	38		sec				sec
.a69f	e9 03		sbc #$03			sbc 	#3
.a6a1	92 3a		sta ($3a)			sta 	(zTemp2)
.a6a3	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6a5	a0 01		ldy #$01			ldy 	#1
.a6a7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6a9					_SACopyNewString:
.a6a9	a0 00		ldy #$00			ldy 	#0
.a6ab					_SACopyNSLoop:
.a6ab	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6ad	c8		iny				iny 								; write two on in string storage
.a6ae	c8		iny				iny
.a6af	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6b1	88		dey				dey 								; this makes it one one.
.a6b2	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6b4	d0 f5		bne $a6ab			bne 	_SACopyNSLoop
.a6b6	7a		ply				ply
.a6b7	60		rts				rts
.a6b8					_SALengthError:
.a6b8	a9 09		lda #$09		lda	#9
.a6ba	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6bd					StringSystemInitialise:
.a6bd	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6bf	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6c2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6c4	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6c7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6ca	60		rts				rts
.a6cb					StringSpaceInitialise:
.a6cb	20 c9 99	jsr $99c9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6ce	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6d0	8d 90 04	sta $0490			sta 	StringInitialised
.a6d3	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6d6	8d 91 04	sta $0491			sta 	StringTempPointer
.a6d9	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6dc	3a		dec a				dec 	a
.a6dd	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6e0	60		rts				rts
.a6e1					StringTempAllocate:
.a6e1	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6e3	b0 35		bcs $a71a			bcs 	_STALength
.a6e5	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a6e8	30 05		bmi $a6ef			bmi 	_STAAllocate
.a6ea	48		pha				pha 								; save value to subtract.
.a6eb	20 cb a6	jsr $a6cb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a6ee	68		pla				pla 								; restore it
.a6ef					_STAAllocate:
.a6ef	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a6f1	18		clc				clc  								; deliberate allows one more
.a6f2	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a6f5	8d 91 04	sta $0491			sta 	StringTempPointer
.a6f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a6fb	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a6fd	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a700	69 ff		adc #$ff			adc 	#$FF
.a702	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a705	85 3d		sta $3d				sta 	zsTemp+1
.a707	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a70a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a70d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a710	a9 10		lda #$10			lda 	#NSTString
.a712	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a715	a9 00		lda #$00			lda 	#0 							; clear the target string
.a717	92 3c		sta ($3c)			sta 	(zsTemp)
.a719	60		rts				rts
.a71a					_STALength:
.a71a	a9 09		lda #$09		lda	#9
.a71c	4c 3d 8d	jmp $8d3d		jmp	ErrorHandler
.a71f					StringTempWrite:
.a71f	48		pha				pha
.a720	92 3c		sta ($3c)			sta 	(zsTemp)
.a722	e6 3c		inc $3c				inc 	zsTemp
.a724	d0 02		bne $a728			bne 	_STWNoCarry
.a726	e6 3d		inc $3d				inc 	zsTemp+1
.a728					_STWNoCarry:
.a728	a9 00		lda #$00			lda 	#0
.a72a	92 3c		sta ($3c)			sta 	(zsTemp)
.a72c	68		pla				pla
.a72d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=7					CLIIdentifier = CONYellow
=10					CLIPunctuation = CONYellowGreen
=1					CLIData = CONWhite
.a72e					EXTPrintCharacter:
.a72e	48		pha				pha
.a72f	da		phx				phx
.a730	5a		phy				phy
.a731	a6 01		ldx $01				ldx 	1
.a733	da		phx				phx
.a734	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a737	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a739	30 48		bmi $a783			bmi 	_EXPCColour
.a73b	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a73d	90 4d		bcc $a78c			bcc 	_EXPCControl
.a73f	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a741	86 01		stx $01				stx 	1
.a743	91 40		sta ($40),y			sta 	(EXTAddress),y
.a745	e6 01		inc $01				inc 	1 							; select colour memory
.a747	ad 37 06	lda $0637			lda 	EXTTextColour
.a74a	91 40		sta ($40),y			sta 	(EXTAddress),y
.a74c	c8		iny				iny 								; advance horizontal position
.a74d	8c 36 06	sty $0636			sty 	EXTColumn
.a750	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a753	90 66		bcc $a7bb			bcc 	_EXPCExit 					; no, then exit.
.a755					_EXPCCRLF:
.a755	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a758	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a75b	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a75e	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a761	f0 18		beq $a77b			beq 	_EXPCScroll
.a763	18		clc				clc 								; add width to address.
.a764	a5 40		lda $40				lda 	EXTAddress
.a766	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a769	85 40		sta $40				sta 	EXTAddress
.a76b	90 4e		bcc $a7bb			bcc 	_EXPCExit
.a76d	e6 41		inc $41				inc 	EXTAddress+1
.a76f	80 4a		bra $a7bb			bra 	_EXPCExit
.a771					_EXPCLeft:
.a771	ce 36 06	dec $0636			dec 	EXTColumn
.a774	10 45		bpl $a7bb			bpl 	_EXPCExit
.a776					_EXPCBegin:
.a776	9c 36 06	stz $0636			stz 	EXTColumn
.a779	80 40		bra $a7bb			bra 	_EXPCExit
.a77b					_EXPCScroll:
.a77b	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a77e	20 48 a8	jsr $a848			jsr 	EXTScreenScroll 			; scroll the screen
.a781	80 38		bra $a7bb			bra 	_EXPCExit
.a783					_EXPCColour:
.a783	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a785	b0 34		bcs $a7bb			bcs 	_EXPCExit
.a787	20 28 a8	jsr $a828			jsr 	_EXPCHandleColour
.a78a	80 2f		bra $a7bb			bra 	_EXPCExit
.a78c					_EXPCControl:
.a78c	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a78e	b0 2b		bcs $a7bb			bcs 	_EXPCExit
.a790	0a		asl a				asl 	a 							; double into X
.a791	aa		tax				tax
.a792	7c 06 a8	jmp ($a806,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a795					_EXPCUp:
.a795	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a798	f0 21		beq $a7bb			beq 	_EXPCExit
.a79a	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a79d	38		sec				sec
.a79e	a5 40		lda $40				lda 	EXTAddress
.a7a0	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7a3	85 40		sta $40				sta 	EXTAddress
.a7a5	b0 14		bcs $a7bb			bcs 	_EXPCExit
.a7a7	c6 41		dec $41				dec 	EXTAddress+1
.a7a9	80 10		bra $a7bb			bra 	_EXPCExit
.a7ab					_EXPCRight:
.a7ab	c8		iny				iny
.a7ac	8c 36 06	sty $0636			sty 	EXTColumn
.a7af	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7b2	d0 07		bne $a7bb			bne 	_EXPCExit
.a7b4					_EXPCEnd:
.a7b4	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7b7	3a		dec a				dec 	a
.a7b8	8d 36 06	sta $0636			sta 	EXTColumn
.a7bb					_EXPCExit:
.a7bb	20 9d a8	jsr $a89d			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7be	68		pla				pla
.a7bf	85 01		sta $01				sta 	1
.a7c1	7a		ply				ply
.a7c2	fa		plx				plx
.a7c3	68		pla				pla
.a7c4	60		rts				rts
.a7c5					_EXPCClearScreen:
.a7c5	20 5a a8	jsr $a85a			jsr		EXTClearScreenCode
.a7c8	80 f1		bra $a7bb			bra 	_EXPCExit
.a7ca					_EXPCDown:
.a7ca	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7cd	3a		dec a				dec 	a
.a7ce	cd 35 06	cmp $0635			cmp 	EXTRow
.a7d1	f0 e8		beq $a7bb			beq 	_EXPCExit
.a7d3	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7d6	18		clc				clc
.a7d7	a5 40		lda $40				lda 	EXTAddress
.a7d9	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7dc	85 40		sta $40				sta 	EXTAddress
.a7de	90 db		bcc $a7bb			bcc 	_EXPCExit
.a7e0	e6 41		inc $41				inc 	EXTAddress+1
.a7e2	80 d7		bra $a7bb			bra 	_EXPCExit
.a7e4					_EXPCTab:
.a7e4	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7e7	29 f8		and #$f8			and 	#$F8
.a7e9	18		clc				clc
.a7ea	69 08		adc #$08			adc 	#8
.a7ec	8d 36 06	sta $0636			sta 	EXTColumn
.a7ef	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7f2	90 c7		bcc $a7bb			bcc 	_EXPCExit
.a7f4	80 be		bra $a7b4			bra 	_EXPCEnd
.a7f6					_EXPCBackSpace:
.a7f6	88		dey				dey
.a7f7	30 c2		bmi $a7bb			bmi 	_EXPCExit
.a7f9	ce 36 06	dec $0636			dec 	EXTColumn
.a7fc	a9 02		lda #$02			lda 	#2
.a7fe	85 01		sta $01				sta 	1
.a800	a9 20		lda #$20			lda 	#32
.a802	91 40		sta ($40),y			sta 	(EXTAddress),y
.a804	80 b5		bra $a7bb			bra 	_EXPCExit
.a806					_EXPCActionTable:
>a806	bb a7						.word 	_EXPCExit 					; 00
>a808	76 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a80a	71 a7						.word 	_EXPCLeft 					; 02 B Left
>a80c	bb a7						.word 	_EXPCExit 					; 03 <Break>
>a80e	bb a7						.word 	_EXPCExit 					; 04
>a810	b4 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a812	ab a7						.word 	_EXPCRight 					; 06 F Right
>a814	bb a7						.word 	_EXPCExit 					; 07
>a816	f6 a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a818	e4 a7						.word 	_EXPCTab 					; 09 I Tab
>a81a	bb a7						.word 	_EXPCExit 					; 0A
>a81c	bb a7						.word 	_EXPCExit 					; 0B
>a81e	c5 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a820	55 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a822	ca a7						.word 	_EXPCDown 					; 0E N Down
>a824	bb a7						.word 	_EXPCExit 					; 0F
>a826	95 a7						.word 	_EXPCUp 					; 10 P Up
.a828					_EXPCHandleColour
.a828	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a82a	b0 16		bcs $a842			bcs 	_EXPCBackground
.a82c	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a82d	0a		asl a				asl 	a
.a82e	0a		asl a				asl 	a
.a82f	0a		asl a				asl 	a
.a830	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a832					_EXPCUpdate:
.a832	48		pha				pha 								; save new colour
.a833	8a		txa				txa 								; get mask
.a834	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a837	8d 37 06	sta $0637			sta 	EXTTextColour
.a83a	68		pla				pla 								; or in new colour
.a83b	0d 37 06	ora $0637			ora 	EXTTextColour
.a83e	8d 37 06	sta $0637			sta 	EXTTextColour
.a841	60		rts				rts
.a842					_EXPCBackground:
.a842	29 0f		and #$0f			and 	#$0F 						; get the colour
.a844	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a846	80 ea		bra $a832			bra 	_EXPCUpdate
.a848					EXTScreenScroll:
.a848	a9 02		lda #$02			lda 	#2 							; select text page
.a84a	85 01		sta $01				sta 	1
.a84c	a9 20		lda #$20			lda		#32 						; fill with space
.a84e	20 5d a9	jsr $a95d			jsr 	EXTScrollFill
.a851	e6 01		inc $01				inc 	1 							; select colour page
.a853	ad 37 06	lda $0637			lda 	EXTTextColour
.a856	20 5d a9	jsr $a95d			jsr 	EXTScrollFill
.a859	60		rts				rts
.a85a					EXTClearScreenCode:
.a85a	a9 02		lda #$02			lda 	#2 							; select text page
.a85c	85 01		sta $01				sta 	1
.a85e	a9 20		lda #$20			lda		#32 						; fill with space
.a860	20 6d a8	jsr $a86d			jsr 	_EXTCSFill
.a863	e6 01		inc $01				inc 	1 							; select colour page
.a865	ad 37 06	lda $0637			lda 	EXTTextColour
.a868	20 6d a8	jsr $a86d			jsr 	_EXTCSFill
.a86b	80 22		bra $a88f			bra 	EXTHomeCursor
.a86d					_EXTCSFill:
.a86d	aa		tax				tax
.a86e	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a870	85 40		sta $40				sta 	EXTAddress
.a872	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a874	85 41		sta $41				sta 	EXTAddress+1
.a876					_EXTCSFill1:
.a876	a0 00		ldy #$00			ldy 	#0
.a878	8a		txa				txa
.a879					_EXTCSFill2:
.a879	91 40		sta ($40),y			sta 	(EXTAddress),y
.a87b	c8		iny				iny
.a87c	d0 fb		bne $a879			bne 	_EXTCSFill2
.a87e	e6 41		inc $41				inc 	EXTAddress+1
.a880	a5 41		lda $41				lda 	EXTAddress+1
.a882	c9 d2		cmp #$d2			cmp 	#$D2
.a884	d0 f0		bne $a876			bne 	_EXTCSFill1
.a886	8a		txa				txa
.a887					_EXTCSFill3:
.a887	91 40		sta ($40),y			sta 	(EXTAddress),y
.a889	c8		iny				iny
.a88a	c0 c0		cpy #$c0			cpy 	#$C0
.a88c	d0 f9		bne $a887			bne 	_EXTCSFill3
.a88e	60		rts				rts
.a88f					EXTHomeCursor:
.a88f	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a892	9c 36 06	stz $0636			stz 	EXTColumn
.a895	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a897	85 40		sta $40				sta 	EXTAddress
.a899	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a89b	85 41		sta $41				sta 	EXTAddress+1
.a89d					EXTSetHardwareCursor:
.a89d	64 01		stz $01				stz 	1 							; I/O Page zero
.a89f	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8a1	8d 10 d0	sta $d010			sta 	$D010
.a8a4	a9 b1		lda #$b1			lda 	#$B1
.a8a6	8d 12 d0	sta $d012			sta 	$D012
.a8a9	ad 36 06	lda $0636			lda 	EXTColumn
.a8ac	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8af	9c 15 d0	stz $d015			stz 	$D015
.a8b2	ad 35 06	lda $0635			lda 	EXTRow
.a8b5	8d 16 d0	sta $d016			sta 	$D016
.a8b8	9c 17 d0	stz $d017			stz 	$D017
.a8bb	60		rts				rts
.a8bc					EXTInputLine:
.a8bc	48		pha				pha
.a8bd	da		phx				phx
.a8be	5a		phy				phy
.a8bf	a5 01		lda $01				lda 	1 							; save I/O page
.a8c1	48		pha				pha
.a8c2					_EILLoop:
.a8c2	20 c4 a9	jsr $a9c4			jsr 	ExtInputSingleCharacter
.a8c5	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8c7	f0 40		beq $a909			beq 	_EILExit
.a8c9	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8cb	f0 1c		beq $a8e9			beq 	_EILBackspace
.a8cd	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8cf	90 12		bcc $a8e3			bcc 	_EILPrintLoop
.a8d1	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8d3	b0 0e		bcs $a8e3			bcs 	_EILPrintLoop
.a8d5	48		pha				pha 								; save character
.a8d6	a9 02		lda #$02			lda 	#2  						; insert a space
.a8d8	85 01		sta $01				sta 	1
.a8da	20 4b a9	jsr $a94b			jsr 	EXTILInsert 				; insert in text screen
.a8dd	e6 01		inc $01				inc 	1
.a8df	20 4b a9	jsr $a94b			jsr 	EXTILInsert 				; insert in colour screen
.a8e2	68		pla				pla 								; get character back.
.a8e3					_EILPrintLoop:
.a8e3	20 2e a7	jsr $a72e			jsr 	ExtPrintCharacter
.a8e6	80 da		bra $a8c2			bra 	_EILLoop
.a8e8	60		rts				rts
.a8e9					_EILBackspace:
.a8e9	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a8ec	f0 d4		beq $a8c2			beq 	_EILLoop
.a8ee	a9 02		lda #$02			lda 	#2 							; move cursor left
.a8f0	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.a8f3	a9 02		lda #$02			lda 	#2 							; text block
.a8f5	85 01		sta $01				sta 	1
.a8f7	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a8f9	20 36 a9	jsr $a936			jsr 	EXTILDelete
.a8fc	e6 01		inc $01				inc 	1 							; colour block
.a8fe	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a901	88		dey				dey
.a902	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a904	20 36 a9	jsr $a936			jsr 	EXTILDelete 				; backspace attribute
.a907	80 b9		bra $a8c2			bra 	_EILLoop 					; and go round.
.a909					_EILExit:
.a909	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a90b	85 01		sta $01				sta 	1
.a90d	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a90f					_EILScrapeLine:
.a90f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a911	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a914	c8		iny				iny
.a915	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a918	d0 f5		bne $a90f			bne 	_EILScrapeLine
.a91a					_EILTrimSpaces:
.a91a	88		dey				dey
.a91b	f0 08		beq $a925			beq 	_EILEndTrim
.a91d	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a920	c9 20		cmp #$20			cmp 	#' '
.a922	f0 f6		beq $a91a			beq 	_EILTrimSpaces
.a924	c8		iny				iny 								; trim after non space character.
.a925					_EILEndTrim:
.a925	a9 00		lda #$00			lda 	#0 							; trim here.
.a927	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a92a	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a92c	20 2e a7	jsr $a72e			jsr 	ExtPrintCharacter
.a92f	68		pla				pla 								; reset I/O page
.a930	85 01		sta $01				sta 	1
.a932	7a		ply				ply
.a933	fa		plx				plx
.a934	68		pla				pla
.a935	60		rts				rts
.a936					EXTILDelete:
.a936	48		pha				pha 								; save the new character
.a937	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a93a					_EXTDLoop:
.a93a	c8		iny				iny 								; copy one byte down.
.a93b	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a93d	88		dey				dey
.a93e	91 40		sta ($40),y			sta 	(EXTAddress),y
.a940	c8		iny				iny 								; do till end of line.
.a941	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a944	90 f4		bcc $a93a			bcc 	_EXTDLoop
.a946	88		dey				dey 	 							; write in last slot.
.a947	68		pla				pla
.a948	91 40		sta ($40),y			sta 	(EXTAddress),y
.a94a	60		rts				rts
.a94b					EXTILInsert:
.a94b	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a94e					_EXTILoop:
.a94e	88		dey				dey 								; back one
.a94f	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a952	f0 08		beq $a95c			beq 	_EXTIExit
.a954	88		dey				dey 								; copy one byte up.
.a955	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a957	c8		iny				iny
.a958	91 40		sta ($40),y			sta 	(EXTAddress),y
.a95a	80 f2		bra $a94e			bra 	_EXTILoop
.a95c					_EXTIExit:
.a95c	60		rts				rts
.a95d					EXTScrollFill:
.a95d	aa		tax				tax									; save value to fill with
.a95e	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a960	48		pha				pha
.a961	a5 37		lda $37				lda 	zTemp0+1
.a963	48		pha				pha
.a964	a5 38		lda $38				lda 	zTemp1
.a966	48		pha				pha
.a967	a5 39		lda $39				lda 	zTemp1+1
.a969	48		pha				pha
.a96a	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a96c	85 37		sta $37				sta 	zTemp0+1
.a96e	85 39		sta $39				sta 	zTemp1+1
.a970	64 36		stz $36				stz 	zTemp0
.a972	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a975	85 38		sta $38				sta 	zTemp1
.a977	a0 00		ldy #$00			ldy 	#0
.a979					_EXSFCopy1:
.a979	b1 38		lda ($38),y			lda 	(zTemp1),y
.a97b	91 36		sta ($36),y			sta 	(zTemp0),y
.a97d	c8		iny				iny
.a97e	d0 f9		bne $a979			bne 	_EXSFCopy1
.a980	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a982	e6 39		inc $39				inc 	zTemp1+1
.a984	a5 39		lda $39				lda 	zTemp1+1
.a986	c9 d3		cmp #$d3			cmp 	#$D3
.a988	d0 ef		bne $a979			bne 	_EXSFCopy1
.a98a	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a98d	8a		txa				txa
.a98e					_EXSFFill1:
.a98e	88		dey				dey
.a98f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a991	c0 00		cpy #$00			cpy 	#0
.a993	10 f9		bpl $a98e			bpl 	_EXSFFill1
.a995	68		pla				pla
.a996	85 39		sta $39				sta 	zTemp1+1
.a998	68		pla				pla
.a999	85 38		sta $38				sta 	zTemp1
.a99b	68		pla				pla
.a99c	85 37		sta $37				sta 	zTemp0+1
.a99e	68		pla				pla
.a99f	85 36		sta $36				sta 	zTemp0
.a9a1	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a9a2					EXTInitialise:
.a9a2	64 01		stz $01				stz 	1 							; Access I/O
.a9a4	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9a7	9c 08 d0	stz $d008			stz 	$D008
.a9aa	9c 09 d0	stz $d009			stz 	$D009
.a9ad	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9af	8d 58 d6	sta $d658			sta 	$D658
.a9b2	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9b4	8d 37 06	sta $0637			sta 	EXTTextColour
.a9b7	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9b9	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9bc	a9 3c		lda #$3c			lda 	#60
.a9be	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9c1	64 01		stz $01				stz 	1
.a9c3	60		rts				rts
.a9c4					EXTInputSingleCharacter:
.a9c4	da		phx				phx
.a9c5	5a		phy				phy
.a9c6					_EISCWait:
.a9c6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9c9	c9 00		cmp #$00			cmp 	#0
.a9cb	f0 f9		beq $a9c6			beq 	_EISCWait
.a9cd	7a		ply				ply
.a9ce	fa		plx				plx
.a9cf	60		rts				rts
.a9d0					EXTBreakCheck:
.a9d0	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9d3					EXTReadController:
.a9d3	da		phx				phx
.a9d4	a2 00		ldx #$00			ldx 	#0
.a9d6	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9d8	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9db	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9dd	f0 04		beq $a9e3			beq 	_NoSet1
.a9df	8a		txa				txa
.a9e0	09 01		ora #$01			ora 	#1
.a9e2	aa		tax				tax
.a9e3					_NoSet1:
.a9e3	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a9e5	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9e8	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a9ea	f0 04		beq $a9f0			beq 	_NoSet1
.a9ec	8a		txa				txa
.a9ed	09 02		ora #$02			ora 	#2
.a9ef	aa		tax				tax
.a9f0					_NoSet1:
.a9f0	a9 06		lda #$06			lda 	#(($32) >> 3)
.a9f2	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9f5	29 04		and #$04			and 	#($01 << (($32) & 7))
.a9f7	f0 04		beq $a9fd			beq 	_NoSet1
.a9f9	8a		txa				txa
.a9fa	09 04		ora #$04			ora 	#4
.a9fc	aa		tax				tax
.a9fd					_NoSet1:
.a9fd	a9 04		lda #$04			lda 	#(($25) >> 3)
.a9ff	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa02	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa04	f0 04		beq $aa0a			beq 	_NoSet1
.aa06	8a		txa				txa
.aa07	09 08		ora #$08			ora 	#8
.aa09	aa		tax				tax
.aa0a					_NoSet1:
.aa0a	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa0c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa0f	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa11	f0 04		beq $aa17			beq 	_NoSet1
.aa13	8a		txa				txa
.aa14	09 10		ora #$10			ora 	#16
.aa16	aa		tax				tax
.aa17					_NoSet1:
.aa17	8a		txa				txa
.aa18	fa		plx				plx
.aa19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7e9					GRVectorTable:
>b7e9	15 ac					.word	GXInitialise             ; $00 Initialise
>b7eb	2f ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7ed	77 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7ef	c7 ab					.word	GXClearBitmap            ; $03 Clear
>b7f1	06 ae					.word	GXSetColourMode          ; $04 Colour
>b7f3	ce af					.word	GXFontHandler            ; $05 DrawFont
>b7f5	16 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7f7	82 b0					.word	GXSelect                 ; $07 SpriteUse
>b7f9	ab b0					.word	GXSelectImage            ; $08 SpriteImage
>b7fb	32 b2					.word	GXCollide                ; $09 SpriteCollide
>b7fd	79 aa					.word	GRUndefined              ; $0a
>b7ff	79 aa					.word	GRUndefined              ; $0b
>b801	79 aa					.word	GRUndefined              ; $0c
>b803	79 aa					.word	GRUndefined              ; $0d
>b805	79 aa					.word	GRUndefined              ; $0e
>b807	79 aa					.word	GRUndefined              ; $0f
>b809	79 aa					.word	GRUndefined              ; $10
>b80b	79 aa					.word	GRUndefined              ; $11
>b80d	79 aa					.word	GRUndefined              ; $12
>b80f	79 aa					.word	GRUndefined              ; $13
>b811	79 aa					.word	GRUndefined              ; $14
>b813	79 aa					.word	GRUndefined              ; $15
>b815	79 aa					.word	GRUndefined              ; $16
>b817	79 aa					.word	GRUndefined              ; $17
>b819	79 aa					.word	GRUndefined              ; $18
>b81b	79 aa					.word	GRUndefined              ; $19
>b81d	79 aa					.word	GRUndefined              ; $1a
>b81f	79 aa					.word	GRUndefined              ; $1b
>b821	79 aa					.word	GRUndefined              ; $1c
>b823	79 aa					.word	GRUndefined              ; $1d
>b825	79 aa					.word	GRUndefined              ; $1e
>b827	79 aa					.word	GRUndefined              ; $1f
>b829	77 aa					.word	GXMove                   ; $20 Move
>b82b	d4 ac					.word	GXLine                   ; $21 Line
>b82d	4f ae					.word	GXFrameRectangle         ; $22 FrameRect
>b82f	4c ae					.word	GXFillRectangle          ; $23 FillRect
>b831	7e aa					.word	GXFrameCircle            ; $24 FrameCircle
>b833	7a aa					.word	GXFillCircle             ; $25 FillCircle
>b835	79 aa					.word	GRUndefined              ; $26
>b837	79 aa					.word	GRUndefined              ; $27
>b839	34 ae					.word	GXPlotPoint              ; $28 Plot
>b83b	41 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa1a					GXGraphicDraw:
.aa1a	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa1c	b0 06		bcs $aa24			bcs 	_GDCoordinate
.aa1e	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa20	84 37		sty $37				sty 	gxzTemp0+1
.aa22	80 4b		bra $aa6f			bra 	_GDExecuteA 				; and execute
.aa24					_GDCoordinate:
.aa24	48		pha				pha 								; save AXY
.aa25	da		phx				phx
.aa26	5a		phy				phy
.aa27	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa29					_GDCopy1:
.aa29	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa2c	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa2f	ca		dex				dex
.aa30	10 f7		bpl $aa29			bpl 	_GDCopy1
.aa32	68		pla				pla 								; update Y
.aa33	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa36	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa39	68		pla				pla
.aa3a	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa3d	68		pla				pla 								; get A (command+X.1) back
.aa3e	48		pha				pha
.aa3f	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa41	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa44	68		pla				pla 								; get command back
.aa45	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa47	48		pha				pha 								; push back.
.aa48	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa4a	f0 17		beq $aa63			beq 	_GDCopyToWorkArea
.aa4c	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa4f	f0 07		beq $aa58			beq 	_GDCheckY
.aa51	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa54	c9 40		cmp #$40			cmp 	#64
.aa56	b0 08		bcs $aa60			bcs 	_GDError1
.aa58					_GDCheckY:
.aa58	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa5b	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa5e	90 03		bcc $aa63			bcc 	_GDCopyToWorkArea
.aa60					_GDError1:
.aa60	68		pla				pla
.aa61					_GDError2:
.aa61	38		sec				sec
.aa62	60		rts				rts
.aa63					_GDCopyToWorkArea:
.aa63	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa65					_GDCopy2:
.aa65	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa68	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa6b	ca		dex				dex
.aa6c	10 f7		bpl $aa65			bpl 	_GDCopy2
.aa6e	68		pla				pla 								; get command
.aa6f					_GDExecuteA:
.aa6f	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa71	b0 ee		bcs $aa61			bcs 	_GDError2
.aa73	aa		tax				tax
.aa74	7c e9 b7	jmp ($b7e9,x)			jmp 	(GRVectorTable,x)
.aa77					GXMove:
.aa77	18		clc				clc
.aa78	60		rts				rts
.aa79					GRUndefined:
>aa79	db						.byte 	$DB 						; causes a break in the emulator
.aa7a					GXFillCircle:
.aa7a	a9 ff		lda #$ff			lda 	#255
.aa7c	80 02		bra $aa80			bra 	GXCircle
.aa7e					GXFrameCircle:
.aa7e	a9 00		lda #$00			lda 	#0
.aa80					GXCircle:
.aa80	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa83	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa86	f0 26		beq $aaae			beq 	_GXCFail
.aa88	20 d9 b2	jsr $b2d9			jsr 	GXSortXY 					; topleft/bottomright
.aa8b	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.aa8e	20 80 ab	jsr $ab80			jsr 	GXCircleSetup 				; set up for drawing
.aa91	9c de 06	stz $06de			stz 	gxYChanged
.aa94					_GXCircleDraw:
.aa94	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aa97	cd dc 06	cmp $06dc			cmp 	gYCentre
.aa9a	90 0a		bcc $aaa6			bcc 	_GXCircleContinue
.aa9c	d0 03		bne $aaa1			bne 	_GXNoLast
.aa9e	20 b3 aa	jsr $aab3			jsr 	GXPlot1
.aaa1					_GXNoLast:
.aaa1	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; close the bitmap
.aaa4	18		clc				clc
.aaa5	60		rts				rts
.aaa6					_GXCircleContinue:
.aaa6	20 b0 aa	jsr $aab0			jsr 	GXPlot2 					; draw it
.aaa9	20 2d ab	jsr $ab2d			jsr 	GXCircleMove 				; adjust the coordinates
.aaac	80 e6		bra $aa94			bra 	_GXCircleDraw
.aaae					_GXCFail:
.aaae	38		sec				sec
.aaaf	60		rts				rts
.aab0					GXPlot2:
.aab0	20 b3 aa	jsr $aab3			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aab3					GXPlot1:
.aab3	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aab6	f0 03		beq $aabb			beq 	_GXPlot1Only
.aab8	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; plot and negate
.aabb					_GXPlot1Only:
.aabb	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; twice, undoing negation
.aabe	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aac1	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aac4	8d dc 06	sta $06dc			sta 	gYCentre
.aac7	8e db 06	stx $06db			stx 	gXCentre
.aaca	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aacd	a9 ff		lda #$ff			lda 	#$FF
.aacf	8d de 06	sta $06de			sta 	gxYChanged
.aad2	60		rts				rts
.aad3	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; do once
.aad6	60		rts				rts
.aad7	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aada	f0 05		beq $aae1			beq 	_GXPlot0Always
.aadc	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aadf	f0 2d		beq $ab0e			beq 	GXPlot0Exit
.aae1					_GXPlot0Always:
.aae1	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aae3	ad dc 06	lda $06dc			lda 	gYCentre
.aae6	20 0f ab	jsr $ab0f			jsr 	GXSubCopy
.aae9	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aaeb	ad db 06	lda $06db			lda 	gXCentre
.aaee	20 0f ab	jsr $ab0f			jsr 	GXSubCopy
.aaf1	48		pha				pha 									; save last offset X
.aaf2	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 					; calculate position/offset.
.aaf5	68		pla				pla
.aaf6	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aaf7	85 36		sta $36				sta 	gxzTemp0
.aaf9	64 37		stz $37				stz 	gxzTemp0+1
.aafb	26 37		rol $37				rol 	gxzTemp0+1
.aafd	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab00	69 80		adc #$80			adc 	#128
.ab02	20 9f ae	jsr $ae9f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab05	38		sec				sec 									; GY = -GY
.ab06	a9 00		lda #$00			lda 	#0
.ab08	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab0b	8d dc 06	sta $06dc			sta 	gYCentre
.ab0e					GXPlot0Exit:
.ab0e	60		rts				rts
.ab0f					GXSubCopy:
.ab0f	85 36		sta $36				sta 	gxzTemp0
.ab11	64 37		stz $37				stz 	gxzTemp0+1
.ab13	29 80		and #$80			and 	#$80
.ab15	f0 02		beq $ab19			beq 	_GXNoSx
.ab17	c6 37		dec $37				dec 	gxzTemp0+1
.ab19					_GXNoSx:
.ab19	38		sec				sec
.ab1a	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab1d	e5 36		sbc $36				sbc 	gxzTemp0
.ab1f	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab22	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab25	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab27	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab2a	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab2c	60		rts				rts
.ab2d					GXCircleMove:
.ab2d	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab30	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab32	10 0d		bpl $ab41			bpl 	_GXEMPositive
.ab34	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab37	ad db 06	lda $06db			lda 	gXCentre
.ab3a	20 60 ab	jsr $ab60			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab3d	a9 06		lda #$06			lda 	#6  						; and add 6
.ab3f	80 15		bra $ab56			bra 	_GXEMAddD
.ab41					_GXEMPositive:
.ab41	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab44	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab47	38		sec				sec 								; calculate X-Y
.ab48	ad db 06	lda $06db			lda 	gXCentre
.ab4b	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab4e	20 60 ab	jsr $ab60			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab51	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab53	ce de 06	dec $06de			dec 	gxYChanged
.ab56					_GXEMAddD:
.ab56	18		clc				clc
.ab57	65 38		adc $38				adc 	gxzTemp1
.ab59	85 38		sta $38				sta 	gxzTemp1
.ab5b	90 02		bcc $ab5f			bcc 	_GXEMNoCarry
.ab5d	e6 39		inc $39				inc 	gxzTemp1+1
.ab5f					_GXEMNoCarry:
.ab5f	60		rts				rts
.ab60					_GXAdd4TimesToD:
.ab60	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab62	29 80		and #$80			and 	#$80
.ab64	f0 02		beq $ab68			beq 	_GXA4Unsigned
.ab66	a9 ff		lda #$ff			lda 	#$FF
.ab68					_GXA4Unsigned:
.ab68	85 37		sta $37				sta 	gxzTemp0+1
.ab6a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab6c	26 37		rol $37				rol 	gxzTemp0+1
.ab6e	06 36		asl $36				asl 	gxzTemp0
.ab70	26 37		rol $37				rol 	gxzTemp0+1
.ab72	18		clc				clc 								; add
.ab73	a5 36		lda $36				lda		gxzTemp0
.ab75	65 38		adc $38				adc 	gxzTemp1
.ab77	85 38		sta $38				sta 	gxzTemp1
.ab79	a5 37		lda $37				lda		gxzTemp0+1
.ab7b	65 39		adc $39				adc 	gxzTemp1+1
.ab7d	85 39		sta $39				sta 	gxzTemp1+1
.ab7f	60		rts				rts
.ab80					GXCircleSetup:
.ab80	38		sec				sec
.ab81	ad 48 06	lda $0648			lda 	gxY1
.ab84	ed 44 06	sbc $0644			sbc 	gxY0
.ab87	4a		lsr a				lsr 	a
.ab88	8d da 06	sta $06da			sta 	gxRadius
.ab8b	a2 00		ldx #$00			ldx 	#0
.ab8d	20 af ab	jsr $abaf			jsr 	_GXCalculateCentre
.ab90	a2 02		ldx #$02			ldx 	#2
.ab92	20 af ab	jsr $abaf			jsr 	_GXCalculateCentre
.ab95	9c db 06	stz $06db			stz 	gXCentre
.ab98	ad da 06	lda $06da			lda 	gxRadius
.ab9b	8d dc 06	sta $06dc			sta 	gYCentre
.ab9e	0a		asl a				asl 	a 							; R x 2
.ab9f	85 36		sta $36				sta 	gxzTemp0
.aba1	38		sec				sec
.aba2	a9 03		lda #$03			lda 	#3
.aba4	e5 36		sbc $36				sbc 	gxzTemp0
.aba6	85 38		sta $38				sta 	gxzTemp1
.aba8	a9 00		lda #$00			lda 	#0
.abaa	e9 00		sbc #$00			sbc 	#0
.abac	85 39		sta $39				sta 	gxzTemp1+1
.abae	60		rts				rts
.abaf					_GXCalculateCentre:
.abaf	38		sec				sec
.abb0	bd 46 06	lda $0646,x			lda 	gxX1,x
.abb3	7d 42 06	adc $0642,x			adc 	gXX0,x
.abb6	9d 46 06	sta $0646,x			sta 	gXX1,x
.abb9	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abbc	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abbf	4a		lsr a				lsr 	a
.abc0	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abc3	7e 46 06	ror $0646,x			ror 	gXX1,x
.abc6	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abc7					GXClearBitmap:
.abc7	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abca	f0 24		beq $abf0			beq 	_GXCBFail
.abcc	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start access
.abcf	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abd1	ad 4e 06	lda $064e			lda 	gxHeight
.abd4	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abd6	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abd8					_GXCalcLastPage:
.abd8	98		tya				tya 								; add to base page
.abd9	18		clc				clc
.abda	6d 4c 06	adc $064c			adc 	gxBasePage
.abdd	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abdf					_GXClearAll:
.abdf	20 f2 ab	jsr $abf2			jsr 	_GXClearBlock 				; clear 8k block
.abe2	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abe4	a5 0b		lda $0b				lda 	GXEditSlot
.abe6	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abe9	b0 f4		bcs $abdf			bcs 	_GXClearAll
.abeb	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap	 			; stop access
.abee	18		clc				clc
.abef	60		rts				rts
.abf0					_GXCBFail:
.abf0	38		sec				sec
.abf1	60		rts				rts
.abf2					_GXClearBlock:
.abf2	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abf4	85 38		sta $38				sta 	0+gxzTemp1
.abf6	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abf8	85 39		sta $39				sta 	1+gxzTemp1
.abfa					_GXCB0:
.abfa	a5 36		lda $36				lda 	gxzTemp0
.abfc	a0 00		ldy #$00			ldy 	#0
.abfe					_GXCB1:
.abfe	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac00	c8		iny				iny
.ac01	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac03	c8		iny				iny
.ac04	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac06	c8		iny				iny
.ac07	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac09	c8		iny				iny
.ac0a	d0 f2		bne $abfe			bne 	_GXCB1
.ac0c	e6 39		inc $39				inc 	gxzTemp1+1
.ac0e	a5 39		lda $39				lda 	gxzTemp1+1
.ac10	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac12	d0 e6		bne $abfa			bne 	_GXCB0
.ac14	60		rts				rts
.ac15					GXInitialise:
.ac15	64 01		stz $01				stz 	1
.ac17	a9 01		lda #$01			lda 	#1
.ac19	8d 00 d0	sta $d000			sta 	$D000
.ac1c	18		clc				clc
.ac1d	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac20	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac23	a2 0f		ldx #$0f			ldx 	#15
.ac25					_GXIClear:
.ac25	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac28	ca		dex				dex
.ac29	10 fa		bpl $ac25			bpl 	_GXIClear
.ac2b	20 c6 ac	jsr $acc6			jsr 	GXClearSpriteStore
.ac2e	60		rts				rts
.ac2f					GXControlBitmap:
.ac2f	64 01		stz $01				stz 	1
.ac31	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac33	29 01		and #$01			and 	#1 							; set bitmap flag
.ac35	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac38	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac39	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac3c	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac3e	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac40	90 02		bcc $ac44			bcc 	_CBNotOn
.ac42	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac44					_CBNotOn:
.ac44	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac47	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac49	29 07		and #$07			and 	#7
.ac4b	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac4e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac50	d0 02		bne $ac54			bne 	_CBNotDefault
.ac52	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac54					_CBNotDefault:
.ac54	8d 4c 06	sta $064c			sta 	gxBasePage
.ac57	20 b8 ac	jsr $acb8			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac5a	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac5c	8d 03 d1	sta $d103			sta 	$D103
.ac5f	a5 36		lda $36				lda 	gxzTemp0
.ac61	8d 02 d1	sta $d102			sta 	$D102
.ac64	9c 01 d1	stz $d101			stz 	$D101
.ac67	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac69	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac6c	29 01		and #$01			and 	#1
.ac6e	f0 02		beq $ac72			beq 	_CBHaveHeight
.ac70	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac72					_CBHaveHeight
.ac72	8e 4e 06	stx $064e			stx 	gxHeight
.ac75	18		clc				clc
.ac76	60		rts				rts
.ac77					GXControlSprite:
.ac77	64 01		stz $01				stz 	1
.ac79	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac7b	29 01		and #$01			and 	#1 							; set sprites flag
.ac7d	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac80	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac81	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac84	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac86	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac88	90 02		bcc $ac8c			bcc 	_CSNotOn
.ac8a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac8c					_CSNotOn:
.ac8c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac8f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac91	d0 02		bne $ac95			bne 	_CSNotDefault
.ac93	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac95					_CSNotDefault:
.ac95	8d 4d 06	sta $064d			sta 	gxSpritePage
.ac98	20 b8 ac	jsr $acb8			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac9b	a5 36		lda $36				lda 	zTemp0
.ac9d	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.aca0	a5 37		lda $37				lda 	zTemp0+1
.aca2	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.aca5	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aca7					_CSClear:
.aca7	9e 00 d9	stz $d900,x			stz 	$D900,x
.acaa	9e 00 da	stz $da00,x			stz 	$DA00,x
.acad	ca		dex				dex
.acae	d0 f7		bne $aca7			bne 	_CSClear
.acb0	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acb3	20 c6 ac	jsr $acc6			jsr 	GXClearSpriteStore
.acb6	18		clc				clc
.acb7	60		rts				rts
.acb8					GXCalculateBaseAddress:
.acb8	85 36		sta $36				sta 	gxzTemp0
.acba	64 37		stz $37				stz 	gxzTemp0+1
.acbc	a9 05		lda #$05			lda 	#5
.acbe					_GXShift:
.acbe	06 36		asl $36				asl 	gxzTemp0
.acc0	26 37		rol $37				rol 	gxzTemp0+1
.acc2	3a		dec a				dec		a
.acc3	d0 f9		bne $acbe			bne 	_GXShift
.acc5	60		rts				rts
.acc6					GXClearSpriteStore:
.acc6	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acc8					_GXCSSLoop:
.acc8	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.accb	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.accd	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.acd0	ca		dex				dex
.acd1	10 f5		bpl $acc8			bpl 	_GXCSSLoop
.acd3	60		rts				rts
.acd4					GXLine:
.acd4	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acd7	f0 28		beq $ad01			beq 	_GXLFail
.acd9	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap
.acdc	20 f7 b2	jsr $b2f7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acdf	20 a7 ad	jsr $ada7			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ace2	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; calculate position/offset.
.ace5					_GXDrawLoop:
.ace5	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ace8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.acea	2d 52 06	and $0652			and 	gxANDValue
.aced	4d 51 06	eor $0651			eor 	gxEORValue
.acf0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acf2	20 03 ad	jsr $ad03			jsr 	GXLineIsComplete 			; is the line complete ?
.acf5	f0 05		beq $acfc			beq 	_GXLExit
.acf7	20 1e ad	jsr $ad1e			jsr 	GXLineAdvance 				; code as per advance method
.acfa	80 e9		bra $ace5			bra 	_GXDrawLoop
.acfc					_GXLExit:
.acfc	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.acff	18		clc				clc
.ad00	60		rts				rts
.ad01					_GXLFail:
.ad01	38		sec				sec
.ad02	60		rts				rts
.ad03					GXLineIsComplete:
.ad03	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad06	d0 0f		bne $ad17			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad08	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad0b	4d 46 06	eor $0646			eor 	GXX1
.ad0e	d0 06		bne $ad16			bne 	_GXLICExit
.ad10	ad 43 06	lda $0643			lda 	GXX0+1
.ad13	4d 47 06	eor $0647			eor 	GXX1+1
.ad16					_GXLICExit:
.ad16	60		rts				rts
.ad17					_GXLICCompareY:
.ad17	ad 48 06	lda $0648			lda 	GXY1
.ad1a	4d 44 06	eor $0644			eor 	GXY0
.ad1d	60		rts				rts
.ad1e					GXLineAdvance:
.ad1e	18		clc				clc 								; add adjust to position
.ad1f	ad e3 06	lda $06e3			lda 	GXPosition
.ad22	6d e4 06	adc $06e4			adc 	GXAdjust
.ad25	8d e3 06	sta $06e3			sta 	GXPosition
.ad28	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad2b	b0 05		bcs $ad32			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad2d	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad30	90 0a		bcc $ad3c			bcc 	_GXLANoExtra
.ad32					_GXLAOverflow:
.ad32	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad35	38		sec				sec 								; subtract total and write back
.ad36	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad39	8d e3 06	sta $06e3			sta 	GXPosition
.ad3c					_GXLANoExtra:
.ad3c	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad3f	f0 0d		beq $ad4e			beq 	_GXDXLarger
.ad41	20 a0 ad	jsr $ada0			jsr 	GXIncrementY
.ad44	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad47	f0 10		beq $ad59			beq 	_GXLAExit
.ad49	20 5a ad	jsr $ad5a			jsr 	GXAdjustX
.ad4c	80 0b		bra $ad59			bra 	_GXLAExit
.ad4e					_GXDXLarger:
.ad4e	20 5a ad	jsr $ad5a			jsr 	GXAdjustX
.ad51	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad54	f0 03		beq $ad59			beq 	_GXLAExit
.ad56	20 a0 ad	jsr $ada0			jsr 	GXIncrementY
.ad59					_GXLAExit:
.ad59	60		rts				rts
.ad5a					GXAdjustX:
.ad5a	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad5d	10 25		bpl $ad84			bpl 	_GXAXRight
.ad5f	ad 42 06	lda $0642			lda 	GXX0
.ad62	d0 03		bne $ad67			bne 	_GXAXNoBorrow
.ad64	ce 43 06	dec $0643			dec 	GXX0+1
.ad67					_GXAXNoBorrow:
.ad67	ce 42 06	dec $0642			dec 	GXX0
.ad6a	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad6d	ad 54 06	lda $0654			lda 	gsOffset
.ad70	c9 ff		cmp #$ff			cmp 	#$FF
.ad72	d0 0f		bne $ad83			bne 	_GXAYExit 					; underflow
.ad74	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad76	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad78	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad7a	b0 07		bcs $ad83			bcs 	_GXAYExit
.ad7c	18		clc				clc
.ad7d	69 20		adc #$20			adc 	#$20 						; fix up
.ad7f	85 3d		sta $3d				sta 	gxzScreen+1
.ad81	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad83					_GXAYExit:
.ad83	60		rts				rts
.ad84					_GXAXRight:
.ad84	ee 42 06	inc $0642			inc 	GXX0
.ad87	d0 03		bne $ad8c			bne 	_GXAXNoCarry
.ad89	ee 43 06	inc $0643			inc 	GXX0+1
.ad8c					_GXAXNoCarry:
.ad8c	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ad8f	d0 0e		bne $ad9f			bne 	_GXAXExit 					; if not overflowed, exit.
.ad91	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad93	a5 3d		lda $3d				lda 	gxzScreen+1
.ad95	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad97	90 06		bcc $ad9f			bcc 	_GXAXExit
.ad99	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad9b	85 3d		sta $3d				sta 	gxzScreen+1
.ad9d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ad9f					_GXAXExit:
.ad9f	60		rts				rts
.ada0					GXIncrementY:
.ada0	ee 44 06	inc $0644			inc 	GXY0
.ada3	20 17 b2	jsr $b217			jsr 	GXMovePositionDown
.ada6	60		rts				rts
.ada7					GXLineSetup:
.ada7	ad 48 06	lda $0648			lda 	GXY1
.adaa	38		sec				sec
.adab	ed 44 06	sbc $0644			sbc 	GXY0
.adae	4a		lsr a				lsr 	a
.adaf	8d e0 06	sta $06e0			sta 	GXDiffY
.adb2	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adb5	38		sec				sec
.adb6	ad 46 06	lda $0646			lda 	GXX1
.adb9	ed 42 06	sbc $0642			sbc 	GXX0
.adbc	8d df 06	sta $06df			sta 	GXDiffX
.adbf	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.adc2	ed 43 06	sbc $0643			sbc 	GXX0+1
.adc5	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.adc6	6e df 06	ror $06df			ror 	GXDiffX
.adc9	0a		asl a				asl 	a
.adca	10 0c		bpl $add8			bpl 	_GDXNotNegative
.adcc	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.adce	38		sec				sec
.adcf	ed df 06	sbc $06df			sbc 	GXDiffX
.add2	8d df 06	sta $06df			sta 	GXDiffX
.add5	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.add8					_GDXNotNegative:
.add8	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.addb	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adde	8d e4 06	sta $06e4			sta 	GXAdjust
.ade1	ad df 06	lda $06df			lda 	GXDiffX
.ade4	8d e5 06	sta $06e5			sta 	GXTotal
.ade7	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.adea	cd df 06	cmp $06df			cmp 	GXDiffX
.aded	90 0f		bcc $adfe			bcc 	_GDXNotLarger
.adef	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adf2	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.adf5	8d e4 06	sta $06e4			sta 	GXAdjust
.adf8	ad e0 06	lda $06e0			lda 	GXDiffY
.adfb	8d e5 06	sta $06e5			sta 	GXTotal
.adfe					_GDXNotLarger:
.adfe	ad e5 06	lda $06e5			lda 	GXTotal
.ae01	4a		lsr a				lsr 	a
.ae02	8d e3 06	sta $06e3			sta 	GXPosition
.ae05	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae06					GXSetColourMode:
.ae06	a6 36		ldx $36				ldx 	gxzTemp0
.ae08	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae0b	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae0d	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae10	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae12	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae15	ae 50 06	ldx $0650			ldx 	gxColour
.ae18	8e 51 06	stx $0651			stx 	gxEORValue
.ae1b	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae1d	90 03		bcc $ae22			bcc 	_GXSDCNotAndColour
.ae1f	8e 52 06	stx $0652			stx 	gxANDValue
.ae22					_GXSDCNotAndColour:
.ae22	d0 03		bne $ae27			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae24	9c 51 06	stz $0651			stz 	gxEORValue
.ae27					_GXSDCNotAnd:
.ae27	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae28	90 08		bcc $ae32			bcc 	_GXSDCNoFlip
.ae2a	ad 52 06	lda $0652			lda	 	gxANDValue
.ae2d	49 ff		eor #$ff			eor 	#$FF
.ae2f	8d 52 06	sta $0652			sta 	gxANDValue
.ae32					_GXSDCNoFlip:
.ae32	18		clc				clc
.ae33	60		rts				rts
.ae34					GXPlotPoint:
.ae34	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.ae37	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae3a	ac 54 06	ldy $0654			ldy 	gsOffset
.ae3d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae3f	2d 52 06	and $0652			and 	gxANDValue
.ae42	4d 51 06	eor $0651			eor 	gxEORValue
.ae45	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae47	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae4a	18		clc				clc
.ae4b	60		rts				rts
.ae4c					GXFillRectangle:
.ae4c	38		sec				sec
.ae4d	80 01		bra $ae50			bra 	GXRectangle
.ae4f					GXFrameRectangle:
.ae4f	18		clc				clc
.ae50					GXRectangle:
.ae50	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae53	f0 35		beq $ae8a			beq 	_GXRFail
.ae55	08		php				php 								; save Fill flag (CS)
.ae56	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.ae59	20 d9 b2	jsr $b2d9			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae5c	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae5f	38		sec				sec 								; sec = Draw line
.ae60	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae63	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae66	cd 48 06	cmp $0648			cmp 	gxY1
.ae69	f0 19		beq $ae84			beq 	_GXRectangleExit
.ae6b					_GXRectLoop:
.ae6b	20 17 b2	jsr $b217			jsr 	GXMovePositionDown 			; down one.
.ae6e	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae71	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae74	cd 48 06	cmp $0648			cmp 	gXY1
.ae77	f0 07		beq $ae80			beq 	_GXLastLine
.ae79	28		plp				plp 								; get flag back
.ae7a	08		php				php
.ae7b	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae7e	80 eb		bra $ae6b			bra 	_GXRectLoop
.ae80					_GXLastLine:
.ae80	38		sec				sec
.ae81	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0
.ae84					_GXRectangleExit:
.ae84	68		pla				pla 								; throw fill flag.
.ae85	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae88	18		clc				clc
.ae89	60		rts				rts
.ae8a					_GXRFail:
.ae8a	38		sec				sec
.ae8b	60		rts				rts
.ae8c					GXDrawLineX1X0:
.ae8c	08		php				php 								; save solid/either-end
.ae8d	38		sec				sec
.ae8e	ad 46 06	lda $0646			lda		gXX1
.ae91	ed 42 06	sbc $0642			sbc 	gXX0
.ae94	85 36		sta $36				sta 	gxzTemp0
.ae96	ad 47 06	lda $0647			lda 	gXX1+1
.ae99	ed 43 06	sbc $0643			sbc 	gXX0+1
.ae9c	85 37		sta $37				sta 	gxzTemp0+1
.ae9e	28		plp				plp
.ae9f					GXDrawLineTemp0:
.ae9f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aea1	48		pha				pha
.aea2	a5 3d		lda $3d				lda 	gxzScreen+1
.aea4	48		pha				pha
.aea5	ad 54 06	lda $0654			lda 	gsOffset
.aea8	48		pha				pha
.aea9	a5 0b		lda $0b				lda 	GXEditSlot
.aeab	48		pha				pha
.aeac	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aeaf	90 1e		bcc $aecf			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aeb1					_GXDLTLine:
.aeb1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeb3	2d 52 06	and $0652			and 	gxANDValue
.aeb6	4d 51 06	eor $0651			eor 	gxEORValue
.aeb9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aebb	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aebd	d0 04		bne $aec3			bne 	_GXDLTNoBorrow
.aebf	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aec1	30 2e		bmi $aef1			bmi 	_GXDLTExit
.aec3					_GXDLTNoBorrow:
.aec3	c6 36		dec $36				dec 	gxzTemp0
.aec5	c8		iny				iny 								; next slot.
.aec6	d0 e9		bne $aeb1			bne 	_GXDLTLine
.aec8	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aeca	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap				; check for new page.
.aecd	80 e2		bra $aeb1			bra 	_GXDLTLine
.aecf					_GXDLTEndPoints:
.aecf	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aed1	2d 52 06	and $0652			and 	gxANDValue
.aed4	4d 51 06	eor $0651			eor 	gxEORValue
.aed7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed9	98		tya				tya 								; advance to right side
.aeda	18		clc				clc
.aedb	65 36		adc $36				adc 	gxzTemp0
.aedd	a8		tay				tay
.aede	a5 3d		lda $3d				lda 	gxzScreen+1
.aee0	65 37		adc $37				adc 	gxzTemp0+1
.aee2	85 3d		sta $3d				sta 	gxzScreen+1
.aee4	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap 			; fix up.
.aee7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aee9	2d 52 06	and $0652			and 	gxANDValue
.aeec	4d 51 06	eor $0651			eor 	gxEORValue
.aeef	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef1					_GXDLTExit:
.aef1	68		pla				pla
.aef2	85 0b		sta $0b				sta 	GXEditSlot
.aef4	68		pla				pla
.aef5	8d 54 06	sta $0654			sta 	gsOffset
.aef8	68		pla				pla
.aef9	85 3d		sta $3d				sta 	gxzScreen+1
.aefb	68		pla				pla
.aefc	85 3c		sta $3c				sta 	gxzScreen
.aefe	60		rts				rts
.aeff					GXDLTCheckWrap:
.aeff	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af01	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af03	90 06		bcc $af0b			bcc 	_GXDLTCWExit
.af05	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af07	85 3d		sta $3d				sta 	gxzScreen+1
.af09	e6 0b		inc $0b				inc 	GXEditSlot
.af0b					_GXDLTCWExit:
.af0b	60		rts				rts
.af0c					GXDrawGraphicElement:
.af0c	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af0f	3a		dec a				dec 	a
.af10	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af13	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af16	f0 67		beq $af7f			beq 	_GXSLFail
.af18	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af1b	48		pha				pha
.af1c	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af1f	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af22	20 b1 b1	jsr $b1b1			jsr 	gxOpenBitmap 				; open the bitmap.
.af25	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af28	4a		lsr a				lsr 	a
.af29	4a		lsr a				lsr 	a
.af2a	4a		lsr a				lsr 	a
.af2b	29 07		and #$07			and		#7
.af2d	1a		inc a				inc 	a
.af2e	8d eb 06	sta $06eb			sta 	gxScale
.af31	64 38		stz $38				stz 	gxzTemp1					; start first line
.af33					_GXGELoop:
.af33	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af35	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af38	10 06		bpl $af40			bpl		_GXNoVFlip
.af3a	ad e8 06	lda $06e8			lda 	gxMask
.af3d	38		sec				sec
.af3e	e5 38		sbc $38				sbc 	gxzTemp1
.af40					_GXNoVFlip:
.af40	aa		tax				tax 								; get the Xth line.
.af41	20 81 af	jsr $af81			jsr 	_GXCallAcquire 				; get that data.
.af44	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af47	85 39		sta $39				sta 	gxzTemp1+1
.af49					_GXGELoop2:
.af49	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af4c	cd 4e 06	cmp $064e			cmp 	gxHeight
.af4f	b0 10		bcs $af61			bcs 	_GXDGEExit
.af51	20 84 af	jsr $af84			jsr 	GXRenderOneLine 			; render line
.af54	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af56	d0 f1		bne $af49			bne 	_GXGELoop2
.af58	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af5a	a5 38		lda $38				lda 	gxzTemp1
.af5c	cd e7 06	cmp $06e7			cmp 	gxSize
.af5f	d0 d2		bne $af33			bne 	_GXGELoop
.af61					_GXDGEExit:
.af61	68		pla				pla 								; restore Y for next time
.af62	8d 44 06	sta $0644			sta 	gxY0
.af65	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af68					_GXShiftLeft:
.af68	18		clc				clc
.af69	ad e7 06	lda $06e7			lda 	gxSize
.af6c	6d 42 06	adc $0642			adc 	gxX0
.af6f	8d 42 06	sta $0642			sta 	gxX0
.af72	90 03		bcc $af77			bcc 	_GXSLNoCarry
.af74	ee 43 06	inc $0643			inc 	gxX0+1
.af77					_GXSLNoCarry:
.af77	ca		dex				dex
.af78	d0 ee		bne $af68			bne 	_GXShiftLeft
.af7a	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.af7d	18		clc				clc
.af7e	60		rts				rts
.af7f					_GXSLFail:
.af7f	38		sec				sec
.af80	60		rts				rts
.af81					_GXCallAcquire:
.af81	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af84					GXRenderOneLine:
.af84	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; calculate position/offset.
.af87	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.af8a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af8c					_GXROLLoop1:
.af8c	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.af8f	85 3b		sta $3b				sta 	gxzTemp2+1
.af91					_GXROLLoop2:
.af91	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af93	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.af96	50 06		bvc $af9e			bvc 	_GXNoHFlip
.af98	ad e8 06	lda $06e8			lda 	gxMask
.af9b	38		sec				sec
.af9c	e5 3a		sbc $3a				sbc 	gxzTemp2
.af9e					_GXNoHFlip:
.af9e	aa		tax				tax 								; read from the pixel buffer
.af9f	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afa2	d0 07		bne $afab			bne 	_GXDraw 					; draw if non zero
.afa4	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afa7	29 04		and #$04			and 	#4
.afa9	f0 0a		beq $afb5			beq 	_GXZeroPixel
.afab					_GXDraw:
.afab	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afad	2d 52 06	and $0652			and 	gxANDValue
.afb0	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afb3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afb5					_GXZeroPixel:
.afb5	c8		iny				iny 								; advance pointer
.afb6	d0 05		bne $afbd			bne 	_GXNoShift
.afb8	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afba	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap				; check for new page.
.afbd					_GXNoShift:
.afbd	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afbf	d0 d0		bne $af91			bne 	_GXROLLoop2
.afc1	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afc3	a5 3a		lda $3a				lda 	gxzTemp2
.afc5	cd e7 06	cmp $06e7			cmp 	gxSize
.afc8	d0 c2		bne $af8c			bne 	_GXROLLoop1
.afca	ee 44 06	inc $0644			inc 	gxY0
.afcd	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afce					GXFontHandler:
.afce	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afd0	4d 4f 06	eor $064f			eor 	gxMode
.afd3	8d ec 06	sta $06ec			sta 	gxUseMode
.afd6	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afd8	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afda	26 37		rol $37				rol	 	gxzTemp0+1
.afdc	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afde	26 37		rol $37				rol	 	gxzTemp0+1
.afe0	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afe2	26 37		rol $37				rol	 	gxzTemp0+1
.afe4	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afe6	09 c0		ora #$c0			ora 	#$C0
.afe8	85 37		sta $37				sta 	gxzTemp0+1
.afea	a9 08		lda #$08			lda 	#8 							; size 8x8
.afec	a2 f4		ldx #$f4			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.afee	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.aff0	20 0c af	jsr $af0c			jsr 	GXDrawGraphicElement
.aff3	60		rts				rts
.aff4					GXGetGraphicDataFont:
.aff4	8a		txa				txa 								; X->Y
.aff5	a8		tay				tay
.aff6	a6 01		ldx $01				ldx 	1 							; preserve old value
.aff8	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.affa	85 01		sta $01				sta 	1
.affc	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.affe	86 01		stx $01				stx 	1 							; put old value back.
.b000	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b002					_GXExpand:
.b002	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b005	0a		asl a				asl 	a 							; shift bit 7 into C
.b006	90 08		bcc $b010			bcc 	_GXNoPixel
.b008	48		pha				pha 								; if set, set pixel buffer to current colour.
.b009	ad 50 06	lda $0650			lda 	gxColour
.b00c	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b00f	68		pla				pla
.b010					_GXNoPixel:
.b010	e8		inx				inx 								; do the whole byte.
.b011	e0 08		cpx #$08			cpx 	#8
.b013	d0 ed		bne $b002			bne 	_GXExpand
.b015	60		rts				rts
.b016					GXSpriteHandler:
.b016	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b018	4d 4f 06	eor $064f			eor 	gxMode
.b01b	8d ec 06	sta $06ec			sta 	gxUseMode
.b01e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b020	da		phx				phx
.b021	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; can access sprite information
.b024	68		pla				pla
.b025	20 92 b2	jsr $b292			jsr 	GXFindSprite 				; get the sprite address
.b028	08		php				php
.b029	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b02c	28		plp				plp
.b02d	b0 0a		bcs $b039			bcs		_GXSHExit 					; exit if find failed.
.b02f	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b032	a2 3a		ldx #$3a			ldx 	#GXSpriteAcquire & $FF
.b034	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b036	20 0c af	jsr $af0c			jsr 	GXDrawGraphicElement
.b039					_GXSHExit:
.b039	60		rts				rts
.b03a					GXSpriteAcquire:
.b03a	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b03d	85 0b		sta $0b				sta 	GXEditSlot
.b03f	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b041	a9 00		lda #$00			lda 	#0
.b043	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b046					_GXTimesRowNumber:
.b046	18		clc				clc
.b047	65 36		adc $36				adc 	zTemp0
.b049	ca		dex				dex
.b04a	10 fa		bpl $b046			bpl 	_GXTimesRowNumber
.b04c	64 37		stz $37				stz 	gxzTemp0+1
.b04e	0a		asl a				asl 	a 							; row x 2,4,6,8
.b04f	26 37		rol $37				rol 	gxzTemp0+1
.b051	0a		asl a				asl 	a 							; row x 4,8,12,16
.b052	26 37		rol $37				rol 	gxzTemp0+1
.b054	0a		asl a				asl 	a 							; row x 8,16,24,32
.b055	26 37		rol $37				rol 	gxzTemp0+1
.b057	85 36		sta $36				sta 	gxzTemp0
.b059	18		clc				clc 								; add base address.
.b05a	a5 36		lda $36				lda 	gxzTemp0
.b05c	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b05f	85 36		sta $36				sta 	gxzTemp0
.b061	a5 37		lda $37				lda 	gxzTemp0+1
.b063	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b066					_GXSAFindPage:
.b066	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b068	90 06		bcc $b070			bcc 	_GXSAFoundPage
.b06a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b06c	e6 0b		inc $0b				inc 	GXEditSlot
.b06e	80 f6		bra $b066			bra 	_GXSAFindPage
.b070					_GXSAFoundPage:
.b070	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b072	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b074	a0 00		ldy #$00			ldy 	#0
.b076					_GXSACopyLoop:
.b076	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b078	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b07b	c8		iny				iny
.b07c	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b07f	d0 f5		bne $b076			bne 	_GXSACopyLoop
.b081	60		rts				rts
.b082					GXSelect:
.b082	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b085	f0 22		beq $b0a9			beq 	_GXSFail
.b087	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b089	c9 40		cmp #$40			cmp 	#64
.b08b	b0 1c		bcs $b0a9			bcs 	_GXSFail
.b08d	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b090	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b092	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b094	06 36		asl $36				asl 	gxzTemp0
.b096	06 36		asl $36				asl 	gxzTemp0
.b098	06 36		asl $36				asl 	gxzTemp0
.b09a	2a		rol a				rol 	a
.b09b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b09d	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0a0	85 37		sta $37				sta 	gxzTemp0+1
.b0a2	a5 36		lda $36				lda 	gxzTemp0
.b0a4	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0a7	18		clc				clc
.b0a8	60		rts				rts
.b0a9					_GXSFail:
.b0a9	38		sec				sec
.b0aa	60		rts				rts
.b0ab					GXSelectImage:
.b0ab	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0ae	f0 74		beq $b124			beq 	_GXSIFail
.b0b0	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0b3	f0 6f		beq $b124			beq 	_GXSIFail 					; (checking the MSB)
.b0b5	64 01		stz $01				stz 	1
.b0b7	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0b9	d0 6b		bne $b126			bne 	_GXSIHide
.b0bb	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0bd	48		pha				pha
.b0be	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap
.b0c1	68		pla				pla
.b0c2	20 92 b2	jsr $b292			jsr 	GXFindSprite
.b0c5	b0 5a		bcs $b121			bcs 	_GXSICloseFail 				; no image
.b0c7	a0 01		ldy #$01			ldy 	#1
.b0c9	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0cc	85 36		sta $36				sta 	gxzTemp0
.b0ce	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0d1	85 37		sta $37				sta 	gxzTemp0+1
.b0d3	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0d6	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0d8	18		clc				clc
.b0d9	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0dc	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0df	c8		iny				iny
.b0e0	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0e2	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0e5	69 00		adc #$00			adc 	#0
.b0e7	c8		iny				iny
.b0e8	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0ea	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b0ed	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0ef	2a		rol a				rol 	a 							; x 2
.b0f0	0a		asl a				asl 	a 							; x 4
.b0f1	0a		asl a				asl 	a 							; x 8
.b0f2	0a		asl a				asl 	a 							; x 16
.b0f3	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b0f6	0a		asl a				asl 	a 							; 1 shift
.b0f7	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0f9	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b0fb	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b0fe	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b101	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b104	29 3f		and #$3f			and 	#$3F
.b106	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b109	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b10c	6a		ror a				ror 	a 							; shift into bits 6/7
.b10d	6a		ror a				ror 	a
.b10e	6a		ror a				ror 	a
.b10f	29 c0		and #$c0			and 	#$C0
.b111	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b114	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b117	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b11a	29 7f		and #$7f			and 	#$7F
.b11c	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b11f	18		clc				clc
.b120	60		rts				rts
.b121					_GXSICloseFail:
.b121	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b124					_GXSIFail:
.b124	38		sec				sec
.b125	60		rts				rts
.b126					_GXSIHide:
.b126	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b129	85 36		sta $36				sta 	gxzTemp0
.b12b	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b12e	85 37		sta $37				sta 	gxzTemp0+1
.b130	a9 00		lda #$00			lda 	#0
.b132	92 36		sta ($36)			sta 	(gxzTemp0)
.b134	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b137	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b13a	09 80		ora #$80			ora 	#$80
.b13c	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b13f	18		clc				clc
.b140	60		rts				rts
.b141					GXMoveSprite:
.b141	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b144	f0 65		beq $b1ab			beq 	_GXSIFail
.b146	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b149	f0 60		beq $b1ab			beq 	_GXSIFail
.b14b	85 37		sta $37				sta 	gxzTemp0+1
.b14d	a0 04		ldy #$04			ldy 	#4
.b14f	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b152	85 36		sta $36				sta 	gxzTemp0
.b154	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b157	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b15a	2a		rol a				rol 	a	 						; into bits 0,1.
.b15b	2a		rol a				rol 	a
.b15c	2a		rol a				rol 	a
.b15d	29 03		and #$03			and 	#3
.b15f	aa		tax				tax
.b160	bd ad b1	lda $b1ad,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b163	48		pha				pha
.b164	18		clc				clc
.b165	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b168	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b16a	c8		iny				iny
.b16b	ad 43 06	lda $0643			lda 	gxX0+1
.b16e	69 00		adc #$00			adc 	#0
.b170	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b172	c8		iny				iny
.b173	68		pla				pla
.b174	18		clc				clc
.b175	6d 44 06	adc $0644			adc 	gxY0
.b178	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b17a	a9 00		lda #$00			lda 	#0
.b17c	69 00		adc #$00			adc 	#0
.b17e	c8		iny				iny
.b17f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b181	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b184	6e 42 06	ror $0642			ror 	gxX0
.b187	4e 42 06	lsr $0642			lsr 	gxX0
.b18a	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b18d	4e 44 06	lsr $0644			lsr 	gxY0
.b190	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b193	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b196	29 80		and #$80			and 	#$80
.b198	0d 42 06	ora $0642			ora 	gxX0
.b19b	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b19e	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1a1	29 c0		and #$c0			and 	#$C0
.b1a3	0d 44 06	ora $0644			ora 	gxY0
.b1a6	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1a9	18		clc				clc
.b1aa	60		rts				rts
.b1ab					_GXSIFail:
.b1ab	38		sec				sec
.b1ac	60		rts				rts
.b1ad					_GXMSOffset:
>b1ad	1c						.byte 	32-8/2
>b1ae	18						.byte 	32-16/2
>b1af	14						.byte 	32-24/2
>b1b0	10						.byte 	32-32/2
.b1b1					GXOpenBitmap:
.b1b1	78		sei				sei 								; no interrupts here
.b1b2	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1b4	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1b7	58		cli				cli
.b1b8	60		rts				rts
.b1b9					GXCloseBitmap:
.b1b9	78		sei				sei
.b1ba	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1bd	85 0b		sta $0b				sta 	GXEditSlot
.b1bf	58		cli				cli
.b1c0	60		rts				rts
.b1c1					GXPositionCalc:
.b1c1	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1c3	48		pha				pha
.b1c4	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1c7	85 3c		sta $3c				sta 	gxzScreen
.b1c9	64 3d		stz $3d				stz 	gxzScreen+1
.b1cb	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1cd	26 3d		rol $3d				rol 	gxzScreen+1
.b1cf	06 3c		asl $3c				asl 	gxzScreen
.b1d1	26 3d		rol $3d				rol 	gxzScreen+1
.b1d3	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1d4	65 3c		adc $3c				adc 	gxzScreen
.b1d6	85 3c		sta $3c				sta 	gxzScreen
.b1d8	90 02		bcc $b1dc			bcc 	_GXPCNoCarry
.b1da	e6 3d		inc $3d				inc 	gxzScreen+1
.b1dc					_GXPCNoCarry:
.b1dc	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1de	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1e0	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1e2	85 36		sta $36				sta 	gxzTemp0
.b1e4	64 3d		stz $3d				stz 	gxzScreen+1
.b1e6	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1e8					_GXPCMultiply32:
.b1e8	06 3c		asl $3c				asl 	gxzScreen
.b1ea	26 3d		rol $3d				rol 	gxzScreen+1
.b1ec	3a		dec a				dec 	a
.b1ed	d0 f9		bne $b1e8			bne 	_GXPCMultiply32
.b1ef	18		clc				clc
.b1f0	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1f3	65 3c		adc $3c				adc 	gxzScreen
.b1f5	8d 54 06	sta $0654			sta 	gsOffset
.b1f8	ad 43 06	lda $0643			lda 	GXX0+1
.b1fb	65 3d		adc $3d				adc 	gxzScreen+1
.b1fd	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b1ff	90 04		bcc $b205			bcc 	_GXPCNoOverflow
.b201	29 1f		and #$1f			and 	#$1F 						; fix it up
.b203	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b205					_GXPCNoOverflow:
.b205	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b207	85 3d		sta $3d				sta 	gxzScreen+1
.b209	64 3c		stz $3c				stz 	gxzScreen
.b20b	18		clc				clc
.b20c	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b20e	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b211	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b213	68		pla				pla
.b214	85 36		sta $36				sta 	gxzTemp0
.b216	60		rts				rts
.b217					GXMovePositionDown:
.b217	18		clc				clc 								; add 320 to offset/temp+1
.b218	ad 54 06	lda $0654			lda 	gsOffset
.b21b	69 40		adc #$40			adc 	#64
.b21d	8d 54 06	sta $0654			sta 	gsOffset
.b220	a5 3d		lda $3d				lda 	gxzScreen+1
.b222	69 01		adc #$01			adc 	#1
.b224	85 3d		sta $3d				sta 	gxzScreen+1
.b226	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b228	90 07		bcc $b231			bcc 	_GXMPDExit
.b22a	38		sec				sec  								; next page
.b22b	e9 20		sbc #$20			sbc 	#$20
.b22d	85 3d		sta $3d				sta 	gxzScreen+1
.b22f	e6 0b		inc $0b				inc 	GXEditSlot
.b231					_GXMPDExit:
.b231	60		rts				rts
.b232					GXCollide:
.b232	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b234	aa		tax				tax
.b235	05 37		ora $37				ora 	gxzTemp0+1
.b237	29 c0		and #$c0			and 	#$C0
.b239	38		sec				sec
.b23a	d0 53		bne $b28f			bne 	_GXCollideFail 				; if either >= 64, fail.
.b23c	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b23e	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b241	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b244	30 48		bmi $b28e			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b246	18		clc				clc 								; need to calculate sum of sizes.
.b247	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b24a	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b24d	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b24f	6a		ror a				ror 	a 							; 5/6/7
.b250	4a		lsr a				lsr 	a 							; 4/5/6
.b251	4a		lsr a				lsr 	a 							; 3/4/5
.b252	4a		lsr a				lsr 	a 							; 2/3/4
.b253	18		clc				clc
.b254	69 08		adc #$08			adc 	#$08
.b256	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b257	4a		lsr a				lsr 	a
.b258	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b25a	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b25d	29 3f		and #$3f			and 	#$3F
.b25f	85 39		sta $39				sta 	gxzTemp1+1
.b261	38		sec				sec
.b262	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b265	29 3f		and #$3f			and 	#$3F
.b267	e5 39		sbc $39				sbc 	gxzTemp1+1
.b269	b0 03		bcs $b26e			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b26b	49 ff		eor #$ff			eor 	#$FF
.b26d	1a		inc a				inc 	a
.b26e					_GXCAbs1:
.b26e	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b270	b0 1c		bcs $b28e			bcs 	_GXOkayFail
.b272	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b274	38		sec				sec 								; calculate |x1-x0|
.b275	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b278	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b27b	b0 03		bcs $b280			bcs 	_GXCAbs2
.b27d	49 ff		eor #$ff			eor 	#$FF
.b27f	1a		inc a				inc 	a
.b280					_GXCAbs2:
.b280	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b282	b0 0a		bcs $b28e			bcs 	_GXOkayFail
.b284	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b286	90 02		bcc $b28a			bcc 	_GXCHaveLowest
.b288	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b28a					_GXCHaveLowest:
.b28a	0a		asl a				asl 	a 							; scale to allow for >> 2
.b28b	0a		asl a				asl 	a
.b28c	18		clc				clc
.b28d	60		rts				rts
.b28e					_GXOkayFail:
.b28e	18		clc				clc
.b28f					_GXCollideFail:
.b28f	a9 ff		lda #$ff			lda 	#$FF
.b291	60		rts				rts
.b292					GXFindSprite:
.b292	aa		tax				tax
.b293	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b296	85 0b		sta $0b				sta 	GXEditSlot
.b298	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b29b	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b29e	f0 33		beq $b2d3			beq 	_GXFSFail
.b2a0	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2a3	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2a6	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2a9	48		pha				pha 								; save twice
.b2aa	48		pha				pha
.b2ab	29 03		and #$03			and 	#3 							; get sprite size
.b2ad	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2b0	aa		tax				tax
.b2b1	bd d5 b2	lda $b2d5,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2b4	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2b7	68		pla				pla 								; get LUT
.b2b8	4a		lsr a				lsr		a
.b2b9	4a		lsr a				lsr		a
.b2ba	29 03		and #$03			and 	#3
.b2bc	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2bf	68		pla				pla 								; address, neeeds to be x 4
.b2c0	29 f0		and #$f0			and 	#$F0
.b2c2	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2c5	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2c8	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2cb	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ce	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2d1	18		clc				clc
.b2d2	60		rts				rts
.b2d3					_GXFSFail:
.b2d3	38		sec				sec
.b2d4	60		rts				rts
.b2d5					_GXFXSSTTable:
>b2d5	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2d9					GXSortXY:
.b2d9	20 f7 b2	jsr $b2f7			jsr 	GXSortY 					; will be sorted on Y now
.b2dc	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2df	cd 46 06	cmp $0646			cmp 	gxX1
.b2e2	ad 43 06	lda $0643			lda 	gXX0+1
.b2e5	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2e8	90 0c		bcc $b2f6			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2ea	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2ec	a0 04		ldy #$04			ldy 	#4
.b2ee	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b2f1	e8		inx				inx
.b2f2	c8		iny				iny
.b2f3	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b2f6					_GXSXYExit:
.b2f6	60		rts				rts
.b2f7					GXSortY:
.b2f7	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b2fa	cd 48 06	cmp $0648			cmp 	gxY1
.b2fd	90 0b		bcc $b30a			bcc 	_GXSYSorted
.b2ff	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b301	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b303					_GXSwap1:
.b303	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b306	88		dey				dey
.b307	ca		dex				dex
.b308	10 f9		bpl $b303			bpl 	_GXSwap1
.b30a					_GXSYSorted:
.b30a	60		rts				rts
.b30b					GXSwapXY:
.b30b	bd 42 06	lda $0642,x			lda 	gxX0,x
.b30e	48		pha				pha
.b30f	b9 42 06	lda $0642,y			lda 	gxX0,y
.b312	9d 42 06	sta $0642,x			sta 	gxX0,x
.b315	68		pla				pla
.b316	99 42 06	sta $0642,y			sta 	gxX0,y
.b319	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b83d					KeywordSet0:
>b83d	00 65					.text	0,$65,""               ; $80 !0:EOF
>b83f	00 58					.text	0,$58,""               ; $81 !1:SH1
>b841	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b843	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b849	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b851	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b857	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b85e	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b866	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b86d	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b874	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b87a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b880	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b888	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b88f	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b896	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b89d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b8a5	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b8ab	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b8b1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b8b8	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8be	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8c4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $96 PLAYING(
>b8cc	47 28
>b8ce	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $97 RANDOM(
>b8d6	28
>b8d7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $98 RIGHT$(
>b8df	28
>b8e0	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $99 RND(
>b8e6	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9a SGN(
>b8ec	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9b SPC(
>b8f2	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9c STR$(
>b8f9	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9d TIMER(
>b901	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9e TRUE
>b907	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9f VAL(
>b90d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a0 FOR
>b912	02 8f 49 46				.text	2,$8f,"IF"             ; $a1 IF
>b916	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a2 PROC
>b91c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a3 REPEAT
>b924	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a4 WHILE
>b92b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a5 ENDIF
>b932	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a6 ENDPROC
>b93a	43
>b93b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a7 NEXT
>b941	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a8 THEN
>b947	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a9 UNTIL
>b94e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $aa WEND
>b954	02 9b 42 59				.text	2,$9b,"BY"             ; $ab BY
>b958	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ac CALL
>b95e	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ad CIRCLE
>b966	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ae CLEAR
>b96d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $af CLS
>b972	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b0 COLOR
>b979	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b1 COLOUR
>b981	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b2 DATA
>b987	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b3 DIM
>b98c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b4 DOWNTO
>b994	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b5 ELSE
>b99a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b6 FROM
>b9a0	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b7 GFX
>b9a5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b8 GOSUB
>b9ac	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b9 GOTO
>b9b2	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $ba HERE
>b9b8	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $bb IMAGE
>b9bf	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bc LET
>b9c4	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bd LINE
>b9ca	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $be LOCAL
>b9d1	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bf OFF
>b9d6	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c0 ON
>b9da	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c1 OUTLINE
>b9e2	45
>b9e3	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c2 PALETTE
>b9eb	45
>b9ec	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c3 PLOT
>b9f2	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c4 PRINT
>b9f9	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c5 READ
>b9ff	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c6 RECT
>ba05	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c7 REM
>ba0a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c8 RETURN
>ba12	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c9 SOLID
>ba19	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $ca SOUND
>ba20	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $cb SPRITE
>ba28	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $cc TEXT
>ba2e	02 a3 54 4f				.text	2,$a3,"TO"             ; $cd TO
>ba32	ff					.text	$FF
.ba33					KeywordSet1:
>ba33	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba35	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba37	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba39	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba41	4c 45
>ba43	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba4b	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba53	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba58	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba5e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba63	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba6b	45
>ba6c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba71	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba79	53
>ba7a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba80	ff					.text	$FF
.ba81					KeywordSet2:
>ba81	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba83	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba85	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba87	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba8c	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba91	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba96	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba9b	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>baa0	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>baa5	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>baaa	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>baaf	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>bab4	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>bab9	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>babe	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>bac3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>bac8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>bacd	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>bad2	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>bad7	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>badc	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bae1	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>bae6	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>baeb	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>baf0	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>baf5	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bafa	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>baff	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bb04	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bb09	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bb0e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bb13	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bb18	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>bb1d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>bb22	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bb27	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb2c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb31	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb36	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb3b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb40	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb45	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb4a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb4f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb54	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb59	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb5e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb63	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb68	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb6d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb72	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb77	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb7c	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb81	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb86	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb8b	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb90	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb95	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb9a	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb9f	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bba4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bba9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bbae	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bbb3	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bbb8	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bbbd	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bbc2	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bbc7	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bbcc	ff					.text	$FF
.b31a					ListConvertLine:
.b31a	48		pha				pha 								; save indent on the stack
.b31b	9c 9d 04	stz $049d			stz 	tbOffset
.b31e	9c ab 04	stz $04ab			stz 	tokenBuffer
.b321	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b323	b1 30		lda ($30),y			lda 	(codePtr),y
.b325	aa		tax				tax
.b326	88		dey				dey
.b327	b1 30		lda ($30),y			lda 	(codePtr),y
.b329	20 4f 92	jsr $924f			jsr 	LCLConvertInt16
.b32c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b32e	86 37		stx $37				stx 	zTemp0+1
.b330	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b332	20 77 b4	jsr $b477			jsr 	LCLWrite
.b335	a0 00		ldy #$00			ldy 	#0
.b337					_LCCopyNumber:
.b337	b1 36		lda ($36),y			lda 	(zTemp0),y
.b339	20 77 b4	jsr $b477			jsr 	LCLWrite
.b33c	c8		iny				iny
.b33d	b1 36		lda ($36),y			lda 	(zTemp0),y
.b33f	d0 f6		bne $b337			bne 	_LCCopyNumber
.b341	68		pla				pla 								; adjustment to indent
.b342	48		pha				pha 								; save on stack
.b343	10 0c		bpl $b351			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b345	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b346	6d a6 04	adc $04a6			adc 	listIndent
.b349	8d a6 04	sta $04a6			sta 	listIndent
.b34c	10 03		bpl $b351			bpl 	_LCNoAdjust
.b34e	9c a6 04	stz $04a6			stz 	listIndent
.b351					_LCNoAdjust:
.b351	18		clc				clc		 							; work out actual indent.
.b352	ad a6 04	lda $04a6			lda 	listIndent
.b355	0a		asl a				asl 	a
.b356	69 06		adc #$06			adc 	#6
.b358	85 36		sta $36				sta 	zTemp0
.b35a					_LCPadOut:
.b35a	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b35c	20 77 b4	jsr $b477			jsr 	LCLWrite
.b35f	ad 9d 04	lda $049d			lda 	tbOffset
.b362	c5 36		cmp $36				cmp 	zTemp0
.b364	d0 f4		bne $b35a			bne 	_LCPadOut
.b366	a0 03		ldy #$03			ldy 	#3 							; start position.
.b368					_LCMainLoop:
.b368	a9 8a		lda #$8a			lda 	#CLIPunctuation+$80
.b36a	20 77 b4	jsr $b477			jsr 	LCLWrite
.b36d	b1 30		lda ($30),y			lda 	(codePtr),y
.b36f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b371	f0 17		beq $b38a			beq 	_LCExit
.b373	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b375	90 1e		bcc $b395			bcc 	_LCDoubles
.b377	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b379	90 2a		bcc $b3a5			bcc 	_LCShiftPunc
.b37b	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b37d	90 35		bcc $b3b4			bcc 	_LCPunctuation
.b37f	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b381	90 3e		bcc $b3c1			bcc 	_LCIdentifiers
.b383	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b385	90 5f		bcc $b3e6			bcc 	_LCTokens
.b387	4c 46 b4	jmp $b446			jmp 	_LCData 					; 254-5 are data objects
.b38a					_LCExit:
.b38a	68		pla				pla 								; get old indent adjust
.b38b	30 07		bmi $b394			bmi 	_LCExit2
.b38d	18		clc				clc 								; add to indent if +ve
.b38e	6d a6 04	adc $04a6			adc 	listIndent
.b391	8d a6 04	sta $04a6			sta 	listIndent
.b394					_LCExit2:
.b394	60		rts				rts
.b395					_LCDoubles:
.b395	48		pha				pha
.b396	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b397	29 02		and #$02			and 	#2
.b399	09 3c		ora #$3c			ora 	#60 						; make < >
.b39b	20 77 b4	jsr $b477			jsr 	LCLWrite
.b39e	68		pla				pla 								; restore, do lower bit
.b39f	29 03		and #$03			and 	#3
.b3a1	09 3c		ora #$3c			ora 	#60
.b3a3	80 0f		bra $b3b4			bra		_LCPunctuation 				; print, increment, loop
.b3a5					_LCShiftPunc:
.b3a5	aa		tax				tax 								; save in X
.b3a6	29 07		and #$07			and 	#7 							; lower 3 bits
.b3a8	f0 02		beq $b3ac			beq 	_LCNoAdd
.b3aa	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3ac					_LCNoAdd:
.b3ac	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3ae	90 02		bcc $b3b2			bcc 	_LCNoAdd2
.b3b0	09 20		ora #$20			ora 	#32 						; adds $20
.b3b2					_LCNoAdd2:
.b3b2	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3b4					_LCPunctuation:
.b3b4	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3b6	d0 03		bne $b3bb			bne 	_LCPContinue
.b3b8	20 8d b4	jsr $b48d			jsr 	LCLDeleteLastSpace
.b3bb					_LCPContinue:
.b3bb	c8		iny				iny 								; consume character
.b3bc	20 77 b4	jsr $b477			jsr 	LCLWrite 					; write it out.
.b3bf	80 a7		bra $b368			bra 	_LCMainLoop 				; go round again.
.b3c1					_LCIdentifiers:
.b3c1	18		clc				clc 								; convert to physical address
.b3c2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3c4	85 37		sta $37				sta 	zTemp0+1
.b3c6	c8		iny				iny
.b3c7	b1 30		lda ($30),y			lda 	(codePtr),y
.b3c9	85 36		sta $36				sta 	zTemp0
.b3cb	c8		iny				iny
.b3cc	5a		phy				phy 								; save position
.b3cd	a9 87		lda #$87			lda 	#CLIIdentifier+$80
.b3cf	20 77 b4	jsr $b477			jsr 	LCLWrite
.b3d2	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3d4					_LCOutIdentifier:
.b3d4	c8		iny				iny
.b3d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3d7	29 7f		and #$7f			and 	#$7F
.b3d9	20 c9 b4	jsr $b4c9			jsr 	LCLLowerCase
.b3dc	20 77 b4	jsr $b477			jsr 	LCLWrite
.b3df	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3e1	10 f1		bpl $b3d4			bpl 	_LCOutIdentifier
.b3e3	7a		ply				ply 								; restore position
.b3e4	80 82		bra $b368			bra 	_LCMainLoop
.b3e6					_LCTokens:
.b3e6	aa		tax				tax 								; token in X
.b3e7	a9 81		lda #$81			lda 	#((KeywordSet2) & $FF)
.b3e9	85 36		sta $36				sta 	0+zTemp0
.b3eb	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b3ed	85 37		sta $37				sta 	1+zTemp0
.b3ef	e0 82		cpx #$82			cpx 	#$82
.b3f1	f0 16		beq $b409			beq 	_LCUseShift
.b3f3	a9 33		lda #$33			lda 	#((KeywordSet1) & $FF)
.b3f5	85 36		sta $36				sta 	0+zTemp0
.b3f7	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b3f9	85 37		sta $37				sta 	1+zTemp0
.b3fb	e0 81		cpx #$81			cpx 	#$81
.b3fd	f0 0a		beq $b409			beq 	_LCUseShift
.b3ff	a9 3d		lda #$3d			lda 	#((KeywordSet0) & $FF)
.b401	85 36		sta $36				sta 	0+zTemp0
.b403	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b405	85 37		sta $37				sta 	1+zTemp0
.b407	80 01		bra $b40a			bra 	_LCNoShift
.b409					_LCUseShift:
.b409	c8		iny				iny
.b40a					_LCNoShift:
.b40a	20 a1 b4	jsr $b4a1			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b40d	b1 30		lda ($30),y			lda 	(codePtr),y
.b40f	aa		tax				tax 								; into X
.b410					_LCFindText:
.b410	ca		dex				dex
.b411	10 0e		bpl $b421			bpl 	_LCFoundText 				; found text.
.b413	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b415	1a		inc a				inc 	a 							; one extra for size
.b416	38		sec				sec 								; one extra for checksum
.b417	65 36		adc $36				adc 	zTemp0 						; go to next token
.b419	85 36		sta $36				sta 	zTemp0
.b41b	90 f3		bcc $b410			bcc 	_LCFindText
.b41d	e6 37		inc $37				inc 	zTemp0+1
.b41f	80 ef		bra $b410			bra 	_LCFindText
.b421					_LCFoundText:
.b421	5a		phy				phy 								; save List position
.b422	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b424	aa		tax				tax
.b425	a9 83		lda #$83			lda 	#CLIToken+$80
.b427	20 77 b4	jsr $b477			jsr 	LCLWrite
.b42a	a0 02		ldy #$02			ldy 	#2
.b42c					_LCCopyToken:
.b42c	b1 36		lda ($36),y			lda 	(zTemp0),y
.b42e	20 c9 b4	jsr $b4c9			jsr 	LCLLowerCase
.b431	20 77 b4	jsr $b477			jsr 	LCLWrite
.b434	c8		iny				iny
.b435	ca		dex				dex
.b436	d0 f4		bne $b42c			bne 	_LCCopyToken
.b438	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b43a	f0 05		beq $b441			beq 	_LCNoSpace
.b43c	a9 20		lda #$20			lda 	#' '
.b43e	20 77 b4	jsr $b477			jsr 	LCLWrite
.b441					_LCNoSpace:
.b441	7a		ply				ply 								; restore position.
.b442	c8		iny				iny 								; consume token
.b443	4c 68 b3	jmp $b368			jmp 	_LCMainLoop 				; and go around again.
.b446					_LCData:
.b446	48		pha				pha 								; save type $FE/$FF
.b447	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b449	c9 fe		cmp #$fe			cmp 	#$FE
.b44b	f0 07		beq $b454			beq 	_LCHaveOpener
.b44d	a2 22		ldx #$22			ldx 	#'"'
.b44f	a9 81		lda #$81			lda 	#CLIData+$80
.b451	20 77 b4	jsr $b477			jsr 	LCLWrite
.b454					_LCHaveOpener:
.b454	8a		txa				txa 								; output prefix (# or ")
.b455	20 77 b4	jsr $b477			jsr 	LCLWrite
.b458	c8		iny				iny 								; get count
.b459	b1 30		lda ($30),y			lda 	(codePtr),y
.b45b	aa		tax				tax
.b45c	c8		iny				iny 								; point at first character
.b45d					_LCOutData:
.b45d	b1 30		lda ($30),y			lda 	(codePtr),y
.b45f	c9 00		cmp #$00			cmp 	#0
.b461	f0 03		beq $b466			beq 	_LCNoPrint
.b463	20 77 b4	jsr $b477			jsr 	LCLWrite
.b466					_LCNoPrint:
.b466	c8		iny				iny
.b467	ca		dex				dex
.b468	d0 f3		bne $b45d			bne 	_LCOutData
.b46a	68		pla				pla 								; closing " required ?
.b46b	c9 ff		cmp #$ff			cmp 	#$FF
.b46d	d0 05		bne $b474			bne 	_LCNoQuote
.b46f	a9 22		lda #$22			lda 	#'"'
.b471	20 77 b4	jsr $b477			jsr 	LCLWrite
.b474					_LCNoQuote:
.b474	4c 68 b3	jmp $b368			jmp 	_LCMainLoop
.b477					LCLWrite:
.b477	da		phx				phx
.b478	ae 9d 04	ldx $049d			ldx 	tbOffset
.b47b	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b47e	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b481	ee 9d 04	inc $049d			inc 	tbOffset
.b484	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b486	30 03		bmi $b48b			bmi 	_LCLNoColour
.b488	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b48b					_LCLNoColour:
.b48b	fa		plx				plx
.b48c	60		rts				rts
.b48d					LCLDeleteLastSpace:
.b48d	48		pha				pha
.b48e	da		phx				phx
.b48f	ae 9d 04	ldx $049d			ldx 	tbOffset
.b492	f0 0a		beq $b49e			beq 	_LCDLSExit
.b494	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b497	c9 20		cmp #$20			cmp 	#' '
.b499	d0 03		bne $b49e			bne 	_LCDLSExit
.b49b	ce 9d 04	dec $049d			dec 	tbOffset
.b49e					_LCDLSExit:
.b49e	fa		plx				plx
.b49f	68		pla				pla
.b4a0	60		rts				rts
.b4a1					LCLCheckSpaceRequired:
.b4a1	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4a4	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4a6	f0 1b		beq $b4c3			beq 	_LCCSRSpace
.b4a8	c9 29		cmp #$29			cmp 	#')'
.b4aa	f0 17		beq $b4c3			beq 	_LCCSRSpace
.b4ac	c9 23		cmp #$23			cmp 	#'#'
.b4ae	f0 13		beq $b4c3			beq 	_LCCSRSpace
.b4b0	20 c9 b4	jsr $b4c9			jsr 	LCLLowerCase 				; saves a little effort
.b4b3	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4b5	90 11		bcc $b4c8			bcc 	_LCCSRExit
.b4b7	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4b9	90 08		bcc $b4c3			bcc 	_LCCSRSpace
.b4bb	c9 61		cmp #$61			cmp 	#"a"
.b4bd	90 09		bcc $b4c8			bcc 	_LCCSRExit
.b4bf	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4c1	b0 05		bcs $b4c8			bcs 	_LCCSRExit
.b4c3					_LCCSRSpace:
.b4c3	a9 20		lda #$20			lda 	#' '
.b4c5	20 77 b4	jsr $b477			jsr 	LCLWrite
.b4c8					_LCCSRExit:
.b4c8	60		rts				rts
.b4c9					LCLLowerCase:
.b4c9	c9 41		cmp #$41			cmp 	#"A"
.b4cb	90 06		bcc $b4d3			bcc 	_LCLLCOut
.b4cd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4cf	b0 02		bcs $b4d3			bcs 	_LCLLCOut
.b4d1	69 20		adc #$20			adc 	#$20
.b4d3					_LCLLCOut:
.b4d3	60		rts				rts
.b4d4					LCLUpperCase:
.b4d4	c9 61		cmp #$61			cmp 	#"a"
.b4d6	90 06		bcc $b4de			bcc 	_LCLUCOut
.b4d8	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4da	b0 02		bcs $b4de			bcs 	_LCLUCOut
.b4dc	e9 1f		sbc #$1f			sbc 	#$1F
.b4de					_LCLUCOut:
.b4de	60		rts				rts
.b4df					TOKSearchTable:
.b4df	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4e1	85 36		sta $36				sta 	zTemp0
.b4e3	a0 00		ldy #$00			ldy 	#0
.b4e5	a9 80		lda #$80			lda 	#$80 						; token #
.b4e7	85 38		sta $38				sta 	zTemp1
.b4e9					_TSTLoop:
.b4e9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b4eb	30 49		bmi $b536			bmi 	_TSTFail 					; -ve = end of table
.b4ed	f0 2e		beq $b51d			beq 	_TSTNext 					; zero, check next it's a dummy
.b4ef	c8		iny				iny 								; get the hash
.b4f0	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4f2	88		dey				dey
.b4f3	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4f6	d0 25		bne $b51d			bne 	_TSTNext
.b4f8	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b4fb	38		sec				sec
.b4fc	ed 80 04	sbc $0480			sbc 	identStart
.b4ff	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b501	d0 1a		bne $b51d			bne 	_TSTNext
.b503	5a		phy				phy 								; save Y , we might fail
.b504	c8		iny				iny 								; point to text
.b505	c8		iny				iny
.b506	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b509					_TSTCompareName:
.b509	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b50c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b50e	d0 0c		bne $b51c			bne 	_TSTNextPullY 				; fail, pullY and do next
.b510	e8		inx				inx
.b511	c8		iny				iny
.b512	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b515	d0 f2		bne $b509			bne 	_TSTCompareName
.b517	7a		ply				ply 								; throw Y
.b518	a5 38		lda $38				lda 	zTemp1 						; get token #
.b51a	38		sec				sec 								; return with CS = passed.
.b51b	60		rts				rts
.b51c					_TSTNextPullY:
.b51c	7a		ply				ply 								; restore current, fall through.
.b51d					_TSTNext:
.b51d	e6 38		inc $38				inc 	zTemp1 						; token counter
.b51f	98		tya				tya
.b520	18		clc				clc
.b521	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b523	1a		inc a				inc 	a 							; +1
.b524	1a		inc a				inc 	a 							; +2
.b525	a8		tay				tay
.b526	10 c1		bpl $b4e9			bpl 	_TSTLoop 					; if Y < $80 loop back
.b528	98		tya				tya 								; add Y to zTemp0 and reset Y
.b529	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b52b	18		clc				clc  								; but have tables > 255 bytes
.b52c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b52e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b530	90 b7		bcc $b4e9			bcc 	_TSTLoop
.b532	e6 37		inc $37				inc 	zTemp0+1
.b534	80 b3		bra $b4e9			bra 	_TSTLoop
.b536					_TSTFail:
.b536	18		clc				clc
.b537	60		rts				rts
.b538					TokeniseLine:
.b538	20 c0 b6	jsr $b6c0			jsr 	LCLFixLineBufferCase 		; fix line case
.b53b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b53d	8d a8 04	sta $04a8			sta 	tokenOffset
.b540	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b543	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b546	a2 ff		ldx #$ff			ldx 	#$FF
.b548					_TKFindFirst:
.b548	e8		inx				inx
.b549	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b54c	f0 79		beq $b5c7			beq 	_TKExit
.b54e	c9 20		cmp #$20			cmp 	#' '
.b550	90 f6		bcc $b548			bcc 	_TKFindFirst
.b552	c9 30		cmp #$30			cmp 	#'0'
.b554	90 07		bcc $b55d			bcc 	_TKNoLineNumber
.b556	c9 3a		cmp #$3a			cmp 	#'9'+1
.b558	b0 03		bcs $b55d			bcs 	_TKNoLineNumber
.b55a	20 ea b6	jsr $b6ea			jsr 	TOKExtractLineNumber
.b55d					_TKNoLineNumber:
.b55d					_TKTokeniseLoop:
.b55d	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b560	f0 65		beq $b5c7			beq 	_TKExit
.b562	e8		inx				inx
.b563	c9 20		cmp #$20			cmp 	#' '
.b565	f0 f6		beq $b55d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b567	ca		dex				dex 								; undo last get, A contains character, X is position.
.b568	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b56a	f0 61		beq $b5cd			beq 	_TKTokeniseIdentifier
.b56c	c9 41		cmp #$41			cmp 	#'A'
.b56e	90 04		bcc $b574			bcc 	_TKTokenisePunctuation
.b570	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b572	90 59		bcc $b5cd			bcc 	_TKTokeniseIdentifier
.b574					_TKTokenisePunctuation:
.b574	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b576	f0 27		beq $b59f			beq 	_TKString
.b578	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b57a	f0 28		beq $b5a4			beq 	_TKHexConstant
.b57c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b57e	f0 29		beq $b5a9			beq 	_TKCheckDouble
.b580	c9 3e		cmp #$3e			cmp 	#'>'
.b582	f0 25		beq $b5a9			beq 	_TKCheckDouble
.b584					_TKStandardPunctuation:
.b584	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b587	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b589	90 0e		bcc $b599			bcc 	_TKNoShift
.b58b	48		pha				pha 								; save
.b58c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b58e	85 36		sta $36				sta 	zTemp0
.b590	68		pla				pla
.b591	29 20		and #$20			and 	#32 						; bit 5
.b593	4a		lsr a				lsr 	a 							; shift into bit 3
.b594	4a		lsr a				lsr 	a
.b595	05 36		ora $36				ora 	zTemp0
.b597	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b599					_TKNoShift:
.b599	20 2f b7	jsr $b72f			jsr 	TOKWriteByte 				; write the punctuation character
.b59c	e8		inx				inx 								; consume the character
.b59d	80 be		bra $b55d			bra 	_TKTokeniseLoop 			; and loop round again.
.b59f					_TKString:
.b59f	20 4f b6	jsr $b64f			jsr 	TOKTokenString
.b5a2	80 b9		bra $b55d			bra 	_TKTokeniseLoop
.b5a4					_TKHexConstant:
.b5a4	20 8a b6	jsr $b68a			jsr 	TOKHexConstant
.b5a7	80 b4		bra $b55d			bra 	_TKTokeniseLoop
.b5a9					_TKCheckDouble:
.b5a9	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5ac	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5ae	90 d4		bcc $b584			bcc 	_TKStandardPunctuation
.b5b0	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5b2	b0 d0		bcs $b584			bcs 	_TKStandardPunctuation
.b5b4	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5b7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5b9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5ba	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5bd	38		sec				sec
.b5be	e9 3c		sbc #$3c			sbc 	#'<'
.b5c0	20 2f b7	jsr $b72f			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5c3	e8		inx				inx 								; consume both
.b5c4	e8		inx				inx
.b5c5	80 96		bra $b55d			bra 	_TKTokeniseLoop
.b5c7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5c9	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b5cc	60		rts				rts
.b5cd					_TKTokeniseIdentifier:
.b5cd	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5d0	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5d3					_TKCheckLoop:
.b5d3	e8		inx				inx 								; look at next, we know first is identifier.
.b5d4	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5d7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5d9	f0 f8		beq $b5d3			beq 	_TKCheckLoop
.b5db	c9 30		cmp #$30			cmp	 	#"0"
.b5dd	90 0c		bcc $b5eb			bcc 	_TKEndIdentifier
.b5df	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5e1	90 f0		bcc $b5d3			bcc 	_TKCheckLoop
.b5e3	c9 41		cmp #$41			cmp	 	#"A"
.b5e5	90 04		bcc $b5eb			bcc 	_TKEndIdentifier
.b5e7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5e9	90 e8		bcc $b5d3			bcc 	_TKCheckLoop
.b5eb					_TKEndIdentifier:
.b5eb	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b5ee	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b5f0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5f2	f0 06		beq $b5fa			beq 	_TKHasTypeCharacter
.b5f4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5f6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5f8	d0 07		bne $b601			bne 	_TKNoTypeCharacter
.b5fa					_TKHasTypeCharacter:
.b5fa	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b5fd	e8		inx				inx 								; read next
.b5fe	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b601					_TKNoTypeCharacter:
.b601	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b603	d0 09		bne $b60e			bne 	_TKNoArray
.b605	e8		inx				inx 								; skip the (
.b606	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b609	09 04		ora #$04			ora 	#$04
.b60b	8d 84 04	sta $0484			sta 	identTypeByte
.b60e					_TKNoArray:
.b60e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b611	20 ab b6	jsr $b6ab			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b614	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b616	a9 3d		lda #$3d			lda 	#(KeywordSet0) & $FF
.b618	20 df b4	jsr $b4df			jsr 	TOKSearchTable
.b61b	a2 00		ldx #$00			ldx 	#0
.b61d	b0 1f		bcs $b63e			bcs 	_TKFoundToken
.b61f	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b621	a9 33		lda #$33			lda 	#(KeywordSet1) & $FF
.b623	20 df b4	jsr $b4df			jsr 	TOKSearchTable
.b626	a2 81		ldx #$81			ldx 	#$81
.b628	b0 14		bcs $b63e			bcs 	_TKFoundToken
.b62a	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b62c	a9 81		lda #$81			lda 	#(KeywordSet2) & $FF
.b62e	20 df b4	jsr $b4df			jsr 	TOKSearchTable
.b631	a2 82		ldx #$82			ldx 	#$82
.b633	b0 09		bcs $b63e			bcs 	_TKFoundToken
.b635	20 3b b7	jsr $b73b			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b638	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b63b	4c 5d b5	jmp $b55d			jmp 	_TKTokeniseLoop 			; and go round again.
.b63e					_TKFoundToken:
.b63e	48		pha				pha 								; save token
.b63f	8a		txa				txa 								; shift in X, is there one ?
.b640	f0 03		beq $b645			beq 	_TKNoTShift
.b642	20 2f b7	jsr $b72f			jsr 	TOKWriteByte 				; if so, write it out
.b645					_TKNoTShift:
.b645	68		pla				pla 								; restore and write token
.b646	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b649	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b64c	4c 5d b5	jmp $b55d			jmp 	_TKTokeniseLoop 			; and go round again.
.b64f					TOKTokenString:
.b64f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b651	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b654	e8		inx				inx									; start of quoted string.
.b655	da		phx				phx 								; push start of string on top
.b656	ca		dex				dex
.b657					_TSFindEnd:
.b657	e8		inx				inx
.b658	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b65b	f0 04		beq $b661			beq 	_TSEndOfString
.b65d	c9 22		cmp #$22			cmp 	#'"'
.b65f	d0 f6		bne $b657			bne 	_TSFindEnd
.b661					_TSEndOfString:
.b661	7a		ply				ply  								; so now Y is first character, X is character after end.
.b662	48		pha				pha 								; save terminating character
.b663	20 6b b6	jsr $b66b			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b666	68		pla				pla 								; terminating character
.b667	f0 01		beq $b66a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b669	e8		inx				inx
.b66a					_TSNotQuote:
.b66a	60		rts				rts
.b66b					TOKWriteBlockXY:
.b66b	86 36		stx $36				stx 	zTemp0 						; write end character
.b66d	98		tya				tya
.b66e	49 ff		eor #$ff			eor 	#$FF
.b670	38		sec				sec
.b671	65 36		adc $36				adc 	zTemp0
.b673	1a		inc a				inc 	a 							; one extra for NULL
.b674	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b677					_TOBlockLoop:
.b677	c4 36		cpy $36				cpy 	zTemp0
.b679	f0 09		beq $b684			beq 	_TOBlockExit
.b67b	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b67e	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b681	c8		iny				iny
.b682	80 f3		bra $b677			bra 	_TOBlockLoop
.b684					_TOBlockExit:
.b684	a9 00		lda #$00			lda 	#0
.b686	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b689	60		rts				rts
.b68a					TOKHexConstant:
.b68a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b68c	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b68f	e8		inx				inx									; start of quoted string.
.b690	da		phx				phx 								; push start of constant on top
.b691	ca		dex				dex
.b692					_THFindLoop:
.b692	e8		inx				inx
.b693	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b696	c9 30		cmp #$30			cmp 	#"0"
.b698	90 0c		bcc $b6a6			bcc 	_THFoundEnd
.b69a	c9 3a		cmp #$3a			cmp 	#"9"+1
.b69c	90 f4		bcc $b692			bcc 	_THFindLoop
.b69e	c9 41		cmp #$41			cmp 	#"A"
.b6a0	90 04		bcc $b6a6			bcc 	_THFoundEnd
.b6a2	c9 47		cmp #$47			cmp 	#"F"+1
.b6a4	90 ec		bcc $b692			bcc 	_THFindLoop
.b6a6					_THFoundEnd:
.b6a6	7a		ply				ply 								; restore start
.b6a7	20 6b b6	jsr $b66b			jsr 	TOKWriteBlockXY 			; output the block
.b6aa	60		rts				rts
.b6ab					TOKCalculateHash:
.b6ab	da		phx				phx
.b6ac	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6af	a9 00		lda #$00			lda 	#0
.b6b1					_TCHLoop:
.b6b1	18		clc				clc
.b6b2	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6b5	e8		inx				inx
.b6b6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6b9	d0 f6		bne $b6b1			bne 	_TCHLoop
.b6bb	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6be	fa		plx				plx
.b6bf	60		rts				rts
.b6c0					LCLFixLineBufferCase:
.b6c0	a2 00		ldx #$00			ldx 	#0
.b6c2					_FLBCLoop:
.b6c2	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6c5	f0 22		beq $b6e9			beq 	_FLBCExit 					; end of string.
.b6c7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6c9	f0 11		beq $b6dc			beq 	_FLBCInQuotes
.b6cb	e8		inx				inx
.b6cc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6ce	90 f2		bcc $b6c2			bcc 	_FLBCLoop
.b6d0	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6d2	b0 ee		bcs $b6c2			bcs 	_FLBCLoop
.b6d4	38		sec				sec 								; make U/C
.b6d5	e9 20		sbc #$20			sbc 	#32
.b6d7	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6da	80 e6		bra $b6c2			bra 	_FLBCLoop
.b6dc					_FLBCInQuotes:
.b6dc	e8		inx				inx 								; advance
.b6dd	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6e0	f0 07		beq $b6e9			beq 	_FLBCExit 					; exit on EOS
.b6e2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6e4	d0 f6		bne $b6dc			bne 	_FLBCInQuotes
.b6e6	e8		inx				inx 								; skip over it
.b6e7	80 d9		bra $b6c2			bra 	_FLBCLoop
.b6e9					_FLBCExit:
.b6e9	60		rts				rts
.b6ea					TOKExtractLineNumber:
.b6ea	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b6ed	48		pha				pha
.b6ee	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b6f1	48		pha				pha
.b6f2	20 28 b7	jsr $b728			jsr 	_LCLNTimes2 				; line # x 4
.b6f5	20 28 b7	jsr $b728			jsr 	_LCLNTimes2 				; line # x 2
.b6f8	18		clc				clc 								; add stacked value
.b6f9	68		pla				pla
.b6fa	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b6fd	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b700	68		pla				pla
.b701	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b704	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b707	20 28 b7	jsr $b728			jsr 	_LCLNTimes2 				; line # x 10
.b70a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b70d	e8		inx				inx
.b70e	29 0f		and #$0f			and 	#15 						; add to line #
.b710	18		clc				clc
.b711	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b714	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b717	90 03		bcc $b71c			bcc 	_TLENNoCarry
.b719	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b71c					_TLENNoCarry:
.b71c	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b71f	c9 30		cmp #$30			cmp 	#'0'
.b721	90 04		bcc $b727			bcc 	_TLENExit
.b723	c9 3a		cmp #$3a			cmp 	#'9'+1
.b725	90 c3		bcc $b6ea			bcc 	TOKExtractLineNumber
.b727					_TLENExit:
.b727	60		rts				rts
.b728					_LCLNTimes2:
.b728	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b72b	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b72e	60		rts				rts
.b72f					TOKWriteByte:
.b72f	da		phx				phx
.b730	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b733	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b736	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b739	fa		plx				plx
.b73a	60		rts				rts
.b73b					TOKCheckCreateVariableRecord:
.b73b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b73d	85 36		sta $36				sta 	0+zTemp0
.b73f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b741	85 37		sta $37				sta 	1+zTemp0
.b743					_CCVSearch:
.b743	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b745	f0 2c		beq $b773			beq 	_CCVFail
.b747	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b749	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b74b	cd 83 04	cmp $0483			cmp 	identHash
.b74e	d0 16		bne $b766			bne 	_CCVNext
.b750	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b752	ae 80 04	ldx $0480			ldx 	identStart
.b755					_CCVCompare:
.b755	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b758	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b75a	e8		inx				inx 								; advance pointers
.b75b	c8		iny				iny
.b75c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b75d	d0 07		bne $b766			bne 	_CCVNext  					; didn't match go to next.
.b75f	90 f4		bcc $b755			bcc 	_CCVCompare 				; not finished yet.
.b761	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b764	f0 41		beq $b7a7			beq 	_CCVFound 					; yes, we were successful
.b766					_CCVNext:
.b766	18		clc				clc
.b767	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b769	65 36		adc $36				adc 	zTemp0
.b76b	85 36		sta $36				sta 	zTemp0
.b76d	90 d4		bcc $b743			bcc 	_CCVSearch
.b76f	e6 37		inc $37				inc 	zTemp0+1
.b771	80 d0		bra $b743			bra 	_CCVSearch
.b773					_CCVFail:
.b773	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b775	ad 83 04	lda $0483			lda 	identHash
.b778	91 36		sta ($36),y			sta 	(zTemp0),y
.b77a	c8		iny				iny 								; offset 2 is the type byte
.b77b	ad 84 04	lda $0484			lda 	identTypeByte
.b77e	91 36		sta ($36),y			sta 	(zTemp0),y
.b780	c8		iny				iny
.b781					_CCVData:
.b781	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b783	91 36		sta ($36),y			sta 	(zTemp0),y
.b785	c8		iny				iny
.b786	c0 08		cpy #$08			cpy 	#8
.b788	90 f7		bcc $b781			bcc 	_CCVData
.b78a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b78d					_CCVCopyName:
.b78d	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b790	91 36		sta ($36),y			sta 	(zTemp0),y
.b792	e8		inx				inx
.b793	c8		iny				iny
.b794	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b797	d0 f4		bne $b78d			bne 	_CCVCopyName
.b799	98		tya				tya 								; patch offset
.b79a	92 36		sta ($36)			sta 	(zTemp0)
.b79c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b79e	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a0	88		dey				dey
.b7a1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7a3	09 80		ora #$80			ora 	#$80
.b7a5	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a7					_CCVFound:
.b7a7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7a9	38		sec				sec
.b7aa	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7ac	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7ae	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b7b1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7b3	20 2f b7	jsr $b72f			jsr 	TOKWriteByte
.b7b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1					soundIntegrated=1
.b7b7					SNDQueueRequest:
>b7b7	db						.byte 	$DB 						; causes a break in the emulator
.b7b8					SNDSilenceChannel:
.b7b8	60		rts				rts
.b7b9					SNDCommand:
.b7b9	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.b7bb	f0 1c		beq $b7d9			beq 	_SNDInitialise
.b7bd	90 29		bcc $b7e8			bcc 	_SNDExit
.b7bf	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.b7c1	f0 16		beq $b7d9			beq 	_SNDSilence
.b7c3	b0 23		bcs $b7e8			bcs 	_SNDExit
.b7c5	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.b7c7	b0 09		bcs $b7d2			bcs 	_SNDQueryPlay
.b7c9	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.b7cb	b0 1b		bcs $b7e8			bcs 	_SNDExit
.b7cd	20 b7 b7	jsr $b7b7			jsr 	SNDQueueRequest
.b7d0	80 16		bra $b7e8			bra 	_SNDExit
.b7d2					_SNDQueryPlay:
.b7d2	29 03		and #$03			and 	#3 							; get channel #
.b7d4	bd fb 07	lda $07fb,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.b7d7	80 0f		bra $b7e8			bra 	_SNDExit
.b7d9					_SNDInitialise:
.b7d9					_SNDSilence:
.b7d9	9c f2 06	stz $06f2			stz 	SNDLength 					; empty the queue.
.b7dc	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.b7de					_SNDSilenceLoop:
.b7de	48		pha				pha
.b7df	20 b8 b7	jsr $b7b8			jsr 	SNDSilenceChannel
.b7e2	68		pla				pla
.b7e3	3a		dec a				dec 	a
.b7e4	c9 2f		cmp #$2f			cmp 	#$2F
.b7e6	d0 f6		bne $b7de			bne 	_SNDSilenceLoop
.b7e8					_SNDExit:
.b7e8	60		rts				rts
=32					SNDQueueSize = 32 							; number of queue entries
.06f2					SNDLength:
>06f2							.fill 	1
.06f3					SNDQueue:
>06f3							.fill 	SNDQueueSize * 8
.07f3					SNDPitchLow:
>07f3							.fill 	4
.07f7					SNDPitchHigh:
>07f7							.fill 	4
.07fb					SNDTimeLeft:
>07fb							.fill 	4
.07ff					SNDAdjustLow:
>07ff							.fill 	4
.0803					SNDAdjustHigh:
>0803							.fill 	4

;******  Return to file: _basic.asm


;******  End of listing
