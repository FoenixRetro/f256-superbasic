
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sun Jan  1 08:41:47 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c ad 80	jmp $80ad	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 1a bc	jsr $bc1a		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 1d bc	jsr $bc1d		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 d9 bb	jsr $bbd9		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 2e bc	jsr $bc2e		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 29 bc	jsr $bc29		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 82 bc	jsr $bc82		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 8c bc	jsr $bc8c		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLWriteBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 eb bc	jsr $bceb		jsr	Export_KNLWriteBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLCloseFile:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 68 bc	jsr $bc68		jsr	Export_KNLCloseFile
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						GXGraphicDraw:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						SNDCommand:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 4c bb	jsr $bb4c		jsr	Export_SNDCommand
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDUpdate:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 7f bb	jsr $bb7f		jsr	Export_SNDUpdate
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						TKListConvertLine:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 fd b4	jsr $b4fd		jsr	Export_TKListConvertLine
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKTokeniseLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 91 b7	jsr $b791		jsr	Export_TKTokeniseLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80ad		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80af		9a		txs				txs
.80b0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80b2		09 80		ora #$80			ora 	#$80
.80b4		85 00		sta $00				sta 	0
.80b6		20 bb a7	jsr $a7bb			jsr		UpdateFont 					; update font if between FPGA updates.
.80b9		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.80bc		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80be		aa		tax				tax
.80bf		a8		tay				tay
.80c0		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.80c3		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80c5		20 85 80	jsr $8085			jsr 	SNDCommand
.80c8		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80ca		a9 d8		lda #$d8			lda 	#Prompt & $FF
.80cc		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.80cf		20 f6 8a	jsr $8af6			jsr 	NewProgram 					; erase current program
.80d2		4c 23 84	jmp $8423			jmp 	WarmStart					; make same size.
.80d5		4c 23 84	jmp $8423			jmp 	WarmStart
.80d8						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80d8		41 6c 70 68 61 20 31 39			.text "Alpha 19 built 31-Dec-22. "
>80e0		20 62 75 69 6c 74 20 33 31 2d 44 65 63 2d 32 32
>80f0		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80f2		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80f5						AssembleGroup1:
.80f5		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80f7		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80fa		80 02		bra $80fe			bra 	AsmGroup12
.80fc						AssembleGroup2:
.80fc		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80fe						AsmGroup12:
.80fe		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8101		68		pla				pla 								; pop the return address to access the information following.
.8102		fa		plx				plx
.8103		20 8a 81	jsr $818a			jsr 	AccessParameters 			; get opcode and save as base
.8106		8d 24 04	sta $0424			sta 	BaseOpcode
.8109		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.810c		d0 08		bne $8116			bne 	_AG12HaveMask
.810e		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8110		20 92 81	jsr $8192			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8113		8d 25 04	sta $0425			sta 	ModeMask
.8116						_AG12HaveMask:
.8116		20 c6 82	jsr $82c6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8119		da		phx				phx 								; save found address mode
.811a		20 f6 81	jsr $81f6			jsr 	AssembleModeX
.811d		fa		plx				plx  								; restore address mode
.811e		b0 0b		bcs $812b			bcs 	_AG12Exit
.8120		20 2c 81	jsr $812c			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8123		20 f6 81	jsr $81f6			jsr 	AssembleModeX
.8126		b0 03		bcs $812b			bcs 	_AG12Exit
.8128		4c 61 a1	jmp $a161			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.812b						_AG12Exit:
.812b		60		rts				rts
.812c						PromoteToAbsolute:
.812c		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.812e		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8130		f0 19		beq $814b			beq 	_PTADo
.8132		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8134		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8136		f0 13		beq $814b			beq 	_PTADo
.8138		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813a		e0 80		cpx #$80			cpx 	#AM_ZEROY
.813c		f0 0d		beq $814b			beq 	_PTADo
.813e		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8140		e0 d1		cpx #$d1			cpx 	#AM_IND
.8142		f0 07		beq $814b			beq 	_PTADo
.8144		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8146		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8148		f0 01		beq $814b			beq 	_PTADo
.814a		60		rts				rts
.814b						_PTADo:
.814b		aa		tax				tax
.814c		60		rts				rts
.814d						AssembleGroup3:
.814d		68		pla				pla 								; get parameters, which is just the opcode.
.814e		fa		plx				plx
.814f		20 8a 81	jsr $818a			jsr 	AccessParameters 			; get and output opcode
.8152		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte
.8155		20 2a 83	jsr $832a			jsr 	CalculateOperand 			; get a 16 bit operand
.8158		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815a		38		sec				sec
.815b		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.815e		48		pha				pha 								; LSB in A
.815f		a5 60		lda $60				lda 	NSMantissa1
.8161		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8164		aa		tax				tax 								; MSB in X
.8165		68		pla				pla
.8166		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8167		69 7f		adc #$7f			adc 	#$7F
.8169		90 01		bcc $816c			bcc 	_AG3NoCarry
.816b		e8		inx				inx
.816c						_AG3NoCarry:
.816c		38		sec				sec 								; fix back and write out anyways.
.816d		e9 80		sbc #$80			sbc 	#$80
.816f		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte
.8172		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8174		f0 0a		beq $8180			beq 	_AG3Exit
.8176		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8179		29 01		and #$01			and 	#1
.817b		f0 03		beq $8180			beq 	_AG3Exit
.817d		4c 66 a1	jmp $a166			jmp 	RangeError 					; no, branch is out of range
.8180						_AG3Exit:
.8180		60		rts				rts
.8181						AssembleGroup4:
.8181		68		pla				pla 								; pop address
.8182		fa		plx				plx
.8183		20 8a 81	jsr $818a			jsr 	AccessParameters 			; access and get first
.8186		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte 			; output it.
.8189		60		rts				rts
.818a						AccessParameters:
.818a		8d 21 04	sta $0421			sta 	ParamStart
.818d		8e 22 04	stx $0422			stx 	ParamStart+1
.8190		a9 01		lda #$01			lda 	#1
.8192						GetParameter:
.8192		5a		phy				phy
.8193		a8		tay				tay
.8194		ad 21 04	lda $0421			lda 	ParamStart
.8197		85 36		sta $36				sta 	zTemp0
.8199		ad 22 04	lda $0422			lda 	ParamStart+1
.819c		85 37		sta $37				sta 	zTemp0+1
.819e		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a0		7a		ply				ply
.81a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a2						AssemblerWriteByte:
.81a2		48		pha			pha
.81a3		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81a6		29 02		and #$02		and 	#2
.81a8		f0 1b		beq $81c5		beq 	_AWBNoPrint
.81aa		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81ad		20 e0 81	jsr $81e0		jsr 	PrintHex
.81b0		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b3		20 e0 81	jsr $81e0		jsr 	PrintHex
.81b6		a9 20		lda #$20		lda 	#' '
.81b8		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81bb		68		pla			pla 									; print byte
.81bc		48		pha			pha
.81bd		20 e0 81	jsr $81e0		jsr 	PrintHex
.81c0		a9 0d		lda #$0d		lda 	#13
.81c2		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c5						_AWBNoPrint:
.81c5		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81c8		85 36		sta $36			sta 	zTemp0
.81ca		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81cd		f0 0e		beq $81dd		beq 	_AWBRange
.81cf		85 37		sta $37			sta 	zTemp0+1
.81d1		68		pla			pla 									; write byte out
.81d2		92 36		sta ($36)		sta 	(zTemp0)
.81d4		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81d7		d0 03		bne $81dc		bne 	_AWBNoCarry
.81d9		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81dc						_AWBNoCarry:
.81dc		60		rts			rts
.81dd						_AWBRange:
.81dd		4c 66 a1	jmp $a166		jmp 	RangeError
.81e0						PrintHex:
.81e0		48		pha				pha
.81e1		4a		lsr a				lsr 	a
.81e2		4a		lsr a				lsr 	a
.81e3		4a		lsr a				lsr 	a
.81e4		4a		lsr a				lsr 	a
.81e5		20 e9 81	jsr $81e9			jsr 	_PrintNibble
.81e8		68		pla				pla
.81e9						_PrintNibble:
.81e9		29 0f		and #$0f			and 	#15
.81eb		c9 0a		cmp #$0a			cmp 	#10
.81ed		90 02		bcc $81f1			bcc 	_NoShift
.81ef		69 06		adc #$06			adc 	#6
.81f1						_NoShift:
.81f1		69 30		adc #$30			adc 	#48
.81f3		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81f6						AssembleModeX:
.81f6		5a		phy				phy
.81f7		ad 23 04	lda $0423			lda 	IsGroup1
.81fa		f0 17		beq $8213			beq 	_AMXGroup2
.81fc		8a		txa				txa 							; is it in group # 1
.81fd		29 40		and #$40			and 	#AM_ISG1
.81ff		f0 4d		beq $824e			beq 	_AMXFail 				; no, give up.
.8201		8a		txa				txa 							; get back.
.8202		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8204		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8206		d0 22		bne $822a			bne 	_AMXHaveInfo
.8208		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.820b		c9 81		cmp #$81			cmp 	#$81
.820d		f0 3f		beq $824e			beq 	_AMXFail
.820f		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8211		80 17		bra $822a			bra 	_AMXHaveInfo 			; odd design decision there.
.8213						_AMXGroup2:
.8213		8a		txa				txa 							; is it in group 2 ?
.8214		29 20		and #$20			and 	#AM_ISG2
.8216		f0 36		beq $824e			beq 	_AMXFail 				; no, give up.
.8218		8a		txa				txa 							; get the offset into Y
.8219		29 1f		and #$1f			and 	#$1F
.821b		4a		lsr a				lsr 	a 						; make it 0-7.
.821c		4a		lsr a				lsr  	a
.821d		a8		tay				tay
.821e		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8221						_AMXCheckOkay:
.8221		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8222		88		dey				dey
.8223		10 fc		bpl $8221			bpl 	_AMXCheckOkay
.8225		90 27		bcc $824e			bcc 	_AMXFail 				; not allowed.
.8227		8a		txa				txa  							; get mask back
.8228		29 1f		and #$1f			and 	#$1F
.822a						_AMXHaveInfo:
.822a		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.822c		10 04		bpl $8232			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.822e		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8230		d0 1c		bne $824e			bne 	_AMXFail
.8232						_AMXAnySize:
.8232		18		clc				clc 							; add offset to the base opcode
.8233		6d 24 04	adc $0424			adc 	BaseOpcode
.8236						_AMXOutputCode:
.8236		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte 		; write the opcode out.
.8239		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.823b		f0 0e		beq $824b			beq 	_AMXExit
.823d		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.823f		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte
.8242		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8244		30 05		bmi $824b			bmi 	_AMXExit
.8246		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8248		20 a2 81	jsr $81a2			jsr 	AssemblerWriteByte
.824b						_AMXExit:
.824b		7a		ply				ply
.824c		38		sec				sec
.824d		60		rts				rts
.824e						_AMXFail:
.824e		a0 00		ldy #$00			ldy 	#0
.8250						_AMXCheckOddities:
.8250		8a		txa				txa
.8251		d9 78 82	cmp $8278,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8254		d0 15		bne $826b			bne 	_AMXCONext
.8256		b9 76 82	lda $8276,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8259		cd 24 04	cmp $0424			cmp 	BaseOpcode
.825c		d0 0d		bne $826b			bne 	_AMXCONext
.825e		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8260		10 04		bpl $8266			bpl 	_AMXCONotZero
.8262		a5 60		lda $60				lda 	NSMantissa1
.8264		d0 05		bne $826b			bne 	_AMXCONext
.8266						_AMXCONotZero:
.8266		b9 77 82	lda $8277,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8269		80 cb		bra $8236			bra 	_AMXOutputCode 			; and assemble it
.826b						_AMXCONext:
.826b		c8		iny				iny
.826c		c8		iny				iny
.826d		c8		iny				iny
.826e		b9 76 82	lda $8276,y			lda 	ExtraOpcode+0,y 		; end of table
.8271		d0 dd		bne $8250			bne 	_AMXCheckOddities
.8273						_AMXCOFail:
.8273		7a		ply				ply
.8274		18		clc				clc
.8275		60		rts				rts
.8276						ExtraOpcode:
>8276		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8279		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>827c		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>827f		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8282		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8285		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8288		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>828b		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>828e		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8291		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8294		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8295						LabelHere:
.8295		c8		iny				iny 								; skip .
.8296		a2 00		ldx #$00			ldx 	#0 							; get a term
.8298		20 e6 99	jsr $99e6			jsr 	EvaluateTerm
.829b		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.829d		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.829f		d0 22		bne $82c3			bne 	_ALType 					; otherwise typing error
.82a1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a3		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82a5		b5 60		lda $60,x			lda 	NSMantissa1,x
.82a7		85 37		sta $37				sta 	zTemp0+1
.82a9		5a		phy				phy 								; copy address in (64k)
.82aa		a0 01		ldy #$01			ldy 	#1
.82ac		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82af		92 36		sta ($36)			sta 	(zTemp0)
.82b1		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b4		91 36		sta ($36),y			sta 	(zTemp0),y
.82b6		c8		iny				iny
.82b7		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82b9		91 36		sta ($36),y			sta 	(zTemp0),y
.82bb		c8		iny				iny
.82bc		91 36		sta ($36),y			sta 	(zTemp0),y
.82be		c8		iny				iny
.82bf		91 36		sta ($36),y			sta 	(zTemp0),y
.82c1		7a		ply				ply
.82c2		60		rts				rts
.82c3						_ALType:
.82c3		4c 6b a1	jmp $a16b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82c6						TypeAndCalculateOperand:
.82c6		b1 30		lda ($30),y			lda 	(codePtr),y
.82c8		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82ca		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82cc		f0 5b		beq $8329			beq 	_TACOExit
.82ce		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d0		f0 57		beq $8329			beq 	_TACOExit
.82d2		c8		iny				iny
.82d3		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82d5		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82d7		f0 51		beq $832a			beq 	CalculateOperand
.82d9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82db		f0 1f		beq $82fc			beq 	_TACOIndirect
.82dd		88		dey				dey 								; undo get of first character
.82de		20 2a 83	jsr $832a			jsr 	CalculateOperand 			; get operand
.82e1		b1 30		lda ($30),y			lda 	(codePtr),y
.82e3		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82e5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82e7		d0 40		bne $8329			bne 	_TACOExit
.82e9		c8		iny				iny
.82ea		20 34 83	jsr $8334			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82ed		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82ef		c9 58		cmp #$58			cmp 	#'X'
.82f1		f0 36		beq $8329			beq 	_TACOExit
.82f3		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82f5		c9 59		cmp #$59			cmp 	#'Y'
.82f7		f0 30		beq $8329			beq 	_TACOExit
.82f9						_TACOSyntax:
.82f9		4c 61 a1	jmp $a161			jmp 	SyntaxError
.82fc						_TACOIndirect:
.82fc		20 2a 83	jsr $832a			jsr 	CalculateOperand 			; get the operand
.82ff		b1 30		lda ($30),y			lda 	(codePtr),y
.8301		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8303		f0 17		beq $831c			beq 	_TACOIndX
.8305		20 7f 90	jsr $907f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8308		b1 30		lda ($30),y			lda 	(codePtr),y
.830a		a2 d1		ldx #$d1			ldx 	#AM_IND
.830c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.830e		d0 19		bne $8329			bne 	_TACOExit
.8310		c8		iny				iny
.8311		20 34 83	jsr $8334			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8314		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8316		d0 e1		bne $82f9			bne 	_TACOSyntax
.8318		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831a		80 0d		bra $8329			bra 	_TACOExit
.831c						_TACOIndX:
.831c		c8		iny				iny
.831d		20 34 83	jsr $8334			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8320		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8322		d0 d5		bne $82f9			bne 	_TACOSyntax
.8324		20 7f 90	jsr $907f			jsr 	CheckRightBracket			; check )
.8327		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8329						_TACOExit:
.8329		60		rts				rts
.832a						CalculateOperand:
.832a		48		pha				pha
.832b		da		phx				phx
.832c		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.832e		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.8331		fa		plx				plx
.8332		68		pla				pla
.8333		60		rts				rts
.8334						TACOCheckXY:
.8334		b1 30		lda ($30),y			lda 	(codePtr),y
.8336		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8338		c9 40		cmp #$40			cmp 	#$40
.833a		d0 21		bne $835d			bne 	_TCXYFail
.833c		b1 30		lda ($30),y			lda 	(codePtr),y
.833e		18		clc				clc
.833f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8341		85 37		sta $37				sta 	zTemp0+1
.8343		c8		iny				iny
.8344		b1 30		lda ($30),y			lda 	(codePtr),y
.8346		c8		iny				iny
.8347		85 36		sta $36				sta 	zTemp0
.8349		5a		phy				phy 								; save position
.834a		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.834c		b1 36		lda ($36),y			lda 	(zTemp0),y
.834e		d0 0c		bne $835c			bne 	_TCXYPopFail
.8350		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8352		b1 36		lda ($36),y			lda 	(zTemp0),y
.8354		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8356		f0 08		beq $8360			beq 	_TCXYFound
.8358		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835a		f0 04		beq $8360			beq 	_TCXYFound
.835c						_TCXYPopFail:
.835c		7a		ply				ply
.835d						_TCXYFail:
.835d		a9 00		lda #$00			lda 	#0
.835f		60		rts				rts
.8360						_TCXYFound:
.8360		7a		ply				ply 								; restore position
.8361		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8363		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8364						BackloadProgram:
.8364		20 f6 8a	jsr $8af6			jsr 	NewProgram 					; does the actual NEW.
.8367		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.8369		a9 bb		lda #$bb			lda 	#_BLLoad & $FF
.836b		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.836e		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8370		8d 59 06	sta $0659			sta 	BackLoadPage
.8373		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8375		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.8378		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837a		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.837d		a9 ff		lda #$ff			lda 	#$FF
.837f		8d fa ff	sta $fffa			sta 	$FFFA
.8382						_BPLoop:
.8382		a2 ff		ldx #$ff			ldx 	#$FF
.8384		20 d0 83	jsr $83d0			jsr 	BLReadByte 					; read a byte
.8387		c9 00		cmp #$00			cmp 	#0
.8389		f0 29		beq $83b4			beq 	_BPExit 					; if 0 exit
.838b		30 27		bmi $83b4			bmi 	_BPExit 					; if -ve exit
.838d						_BPCopy:
.838d		e8		inx				inx  								; copy byte into the lineBuffer
.838e		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8391		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8394		20 d0 83	jsr $83d0			jsr 	BLReadByte 					; read next byte
.8397		30 0a		bmi $83a3			bmi 	_BPEndLine 					; -ve = EOL
.8399		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.839b		d0 02		bne $839f			bne 	_BPNotTab
.839d		a9 20		lda #$20			lda 	#' '
.839f						_BPNotTab:
.839f		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a1		b0 ea		bcs $838d			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a3						_BPEndLine:
.83a3		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.83a6		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83a9		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83ac		f0 d4		beq $8382			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83ae		38		sec				sec 								; append not insert
.83af		20 e4 a6	jsr $a6e4			jsr 	MemoryInsertLine 			; append to current program
.83b2		80 ce		bra $8382			bra 	_BPLoop
.83b4						_BPExit:
.83b4		9c fa ff	stz $fffa			stz 	$FFFA
.83b7		20 b9 84	jsr $84b9			jsr 	ClearCommand 				; clear variables etc.
.83ba		60		rts				rts
.83bb						_BLLoad:
>83bb		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c3		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d0						BLReadByte:
.83d0		da		phx				phx
.83d1		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d3		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83d6		85 0b		sta $0b				sta 	8+3
.83d8		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83db		85 36		sta $36				sta 	zTemp0
.83dd		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e0		85 37		sta $37				sta 	zTemp0+1
.83e2		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e4		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83e7		d0 0f		bne $83f8			bne 	_BLNoCarry
.83e9		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ec		10 0a		bpl $83f8			bpl 	_BLNoCarry 					; need a new page
.83ee		48		pha				pha
.83ef		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f1		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f4		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83f7		68		pla				pla
.83f8						_BLNoCarry:
.83f8		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83fa		fa		plx				plx
.83fb		c9 00		cmp #$00			cmp 	#0
.83fd		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83fe						EditProgramCode:
.83fe		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8401		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8404		20 88 a7	jsr $a788			jsr 	MemorySearch
.8407		90 05		bcc $840e			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8409		d0 03		bne $840e			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.840b		20 ad a6	jsr $a6ad			jsr 	MemoryDeleteLine 			; delete the line
.840e						_EPCNoDelete:
.840e		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8411		c9 80		cmp #$80			cmp 	#KWC_EOL
.8413		f0 0d		beq $8422			beq 	_EPCNoInsert
.8415		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8418		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.841b		20 88 a7	jsr $a788			jsr 	MemorySearch
.841e		18		clc				clc 								; insert at this point.
.841f		20 e4 a6	jsr $a6e4			jsr 	MemoryInsertLine 			; insert the line
.8422						_EPCNoInsert:
.8422		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8423						WarmStart:
.8423		a2 ff		ldx #$ff			ldx 	#$FF
.8425		9a		txs				txs
.8426		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8428		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.842b		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.842e		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line
.8431		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8434		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8437		d0 17		bne $8450			bne 	_WSEditCode 				; if so,edit code.
.8439		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.843c		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.843e		85 30		sta $30				sta 	codePtr
.8440		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8442		85 31		sta $31				sta 	codePtr+1
.8444		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.8447		c9 80		cmp #$80			cmp 	#KWC_EOL
.8449		f0 d8		beq $8423			beq 	WarmStart
.844b		20 86 8c	jsr $8c86			jsr 	RUNCodePointerLine 			; execute that line.
.844e		80 d3		bra $8423			bra 	WarmStart
.8450						_WSEditCode:
.8450		20 fe 83	jsr $83fe			jsr 	EditProgramCode 			; edit the program code
.8453		20 b9 84	jsr $84b9			jsr 	ClearCommand 				; clear all variables etc.
.8456		80 cb		bra $8423			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8458						AssembleCommand:
.8458		a2 00		ldx #$00			ldx 	#0
.845a		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; start address
.845d		a5 58		lda $58				lda 	NSMantissa0
.845f		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8462		a5 60		lda $60				lda 	NSMantissa1
.8464		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8467		20 87 90	jsr $9087			jsr 	CheckComma
.846a		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; options 0-3
.846d		a5 58		lda $58				lda 	NSMantissa0
.846f		8d 20 04	sta $0420			sta 	AssemblerControl
.8472		60		rts				rts
.8473		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8474						AssertCommand:
.8474		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8476		20 50 9f	jsr $9f50			jsr 	EvaluateInteger 			; the assert test
.8479		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; exit if result is non zero.
.847c		d0 05		bne $8483			bne 	_ACExit
.847e		a9 0a		lda #$0a		lda	#10
.8480		4c 98 90	jmp $9098		jmp	ErrorHandler
.8483						_ACExit:
.8483		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8484						CallCommand:
.8484		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8486		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.8489						_CCClear
.8489		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.848a		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; these are optional sequentially.
.848d		e0 04		cpx #$04			cpx 	#4
.848f		d0 f8		bne $8489			bne 	_CCClear
.8491		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8493						_CCCParam:
.8493		b1 30		lda ($30),y			lda 	(codePtr),y
.8495		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8497		d0 09		bne $84a2			bne 	_CCCRun6502
.8499		c8		iny				iny 								; skip comma
.849a		e8		inx				inx	 								; next level
.849b		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get A/X/Y
.849e		e0 03		cpx #$03			cpx 	#3
.84a0		90 f1		bcc $8493			bcc 	_CCCParam 					; done all 3 ?
.84a2						_CCCRun6502:
.84a2		5a		phy				phy 								; save position
.84a3		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.84a5		85 37		sta $37				sta 	zTemp0+1
.84a7		a5 58		lda $58				lda 	NSMantissa0
.84a9		85 36		sta $36				sta 	zTemp0
.84ab		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.84ad		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.84af		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.84b1		20 b6 84	jsr $84b6			jsr 	_CCCZTemp0 					; call zTemp0
.84b4		7a		ply				ply 								; restore position and exit
.84b5		60		rts				rts
.84b6						_CCCZTemp0:
.84b6		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84b9						ClearCommand:
.84b9		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84bb		85 36		sta $36				sta 	0+zTemp0
.84bd		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84bf		85 37		sta $37				sta 	1+zTemp0
.84c1						_ClearZeroLoop:
.84c1		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84c3		f0 24		beq $84e9			beq 	_ClearZeroEnd
.84c5		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84c7		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84c9						_ClearOneVariable:
.84c9		91 36		sta ($36),y			sta 	(zTemp0),y
.84cb		c8		iny				iny
.84cc		c0 08		cpy #$08			cpy 	#8
.84ce		d0 f9		bne $84c9			bne 	_ClearOneVariable
.84d0		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84d2		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d4		c9 18		cmp #$18			cmp 	#NSTProcedure
.84d6		d0 04		bne $84dc			bne 	_ClearNotProcedure
.84d8		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84da		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84dc						_ClearNotProcedure:
.84dc		18		clc				clc 								; go to the next variable
.84dd		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84df		65 36		adc $36				adc 	zTemp0
.84e1		85 36		sta $36				sta 	zTemp0
.84e3		90 dc		bcc $84c1			bcc 	_ClearZeroLoop
.84e5		e6 37		inc $37				inc 	zTemp0+1
.84e7		80 d8		bra $84c1			bra 	_ClearZeroLoop
.84e9						_ClearZeroEnd:
.84e9		18		clc				clc
.84ea		a5 36		lda $36				lda 	zTemp0
.84ec		69 01		adc #$01			adc 	#1
.84ee		8d 0c 04	sta $040c			sta 	lowMemPtr
.84f1		a5 37		lda $37				lda 	zTemp0+1
.84f3		69 00		adc #$00			adc 	#0
.84f5		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84f8		20 42 b1	jsr $b142			jsr 	StackReset
.84fb		20 a8 b1	jsr $b1a8			jsr 	StringSystemInitialise
.84fe		20 88 8f	jsr $8f88			jsr 	ProcedureScan
.8501		20 35 8c	jsr $8c35			jsr 	Command_Restore
.8504		9c 1e 04	stz $041e			stz 	AssemblerAddress
.8507		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.850a		9c 20 04	stz $0420			stz 	AssemblerControl
.850d		20 d2 9b	jsr $9bd2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8510		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8511						ClearScreen:
.8511		5a		phy				phy
.8512		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8514		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8517		7a		ply				ply
.8518		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8519						Command_Data:
.8519		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.851b		a2 80		ldx #$80			ldx 	#KWC_EOL
.851d		20 da 8f	jsr $8fda			jsr 	ScanForward
.8520		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8521						DimCommand:
.8521		b1 30		lda ($30),y			lda 	(codePtr),y
.8523		29 c0		and #$c0			and 	#$C0
.8525		c9 40		cmp #$40			cmp 	#$40
.8527		d0 7a		bne $85a3			bne 	_DCSyntax 				; n o, error.
.8529		b1 30		lda ($30),y			lda 	(codePtr),y
.852b		18		clc				clc
.852c		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.852e		85 3f		sta $3f				sta 	zaTemp+1
.8530		c8		iny				iny
.8531		b1 30		lda ($30),y			lda 	(codePtr),y
.8533		c8		iny				iny
.8534		85 3e		sta $3e				sta 	zaTemp
.8536		5a		phy				phy
.8537		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8539		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.853b		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.853d		c9 18		cmp #$18			cmp 	#NSTProcedure
.853f		f0 62		beq $85a3			beq 	_DCSyntax
.8541		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8543		29 04		and #$04			and 	#NSBIsArray
.8545		f0 64		beq $85ab			beq 	_DCType
.8547		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8549		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854b		d0 59		bne $85a6			bne 	_DCRedefine
.854d		7a		ply				ply
.854e		20 ae 85	jsr $85ae			jsr 	_DCGetSize 				; get array size, check it.
.8551		5a		phy				phy
.8552		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8554		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8556		7a		ply				ply 							; is there a second (e.g. ,x)
.8557		b1 30		lda ($30),y			lda 	(codePtr),y
.8559		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.855b		d0 0a		bne $8567			bne 	_DCOneDimension
.855d		c8		iny				iny 							; skip comma
.855e		20 ae 85	jsr $85ae			jsr 	_DCGetSize 				; get 2nd array size
.8561		5a		phy				phy
.8562		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8564		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8566		7a		ply				ply
.8567						_DCOneDimension:
.8567		5a		phy				phy 							; save position
.8568		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.856a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.856c		aa		tax				tax
.856d		c8		iny				iny
.856e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8570		e8		inx				inx 							; bump them.
.8571		1a		inc a				inc 	a
.8572		20 8e 9f	jsr $9f8e			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8575		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8577		29 e0		and #$e0			and 	#$E0
.8579		d0 23		bne $859e			bne 	_DCSize
.857b		a0 02		ldy #$02			ldy 	#2 						; get base type
.857d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857f		20 bc 85	jsr $85bc			jsr 	ScaleByBaseType 		; scale by base type
.8582		a5 36		lda $36				lda 	zTemp0
.8584		a6 37		ldx $37				ldx 	zTemp0+1
.8586		20 94 9b	jsr $9b94			jsr 	AllocateXABytes 		; allocate memory
.8589		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.858b		91 3e		sta ($3e),y			sta 	(zaTemp),y
.858d		c8		iny				iny
.858e		8a		txa				txa
.858f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8591		7a		ply				ply 							; get position back
.8592		20 7f 90	jsr $907f			jsr 	CheckRightBracket 		; check )
.8595		b1 30		lda ($30),y			lda 	(codePtr),y
.8597		c8		iny				iny 							; consume in case
.8598		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.859a		f0 85		beq $8521			beq 	DimCommand
.859c		88		dey				dey 							; undo consume
.859d		60		rts				rts
.859e						_DCSize:
.859e		a9 16		lda #$16		lda	#22
.85a0		4c 98 90	jmp $9098		jmp	ErrorHandler
.85a3						_DCSyntax:
.85a3		4c 61 a1	jmp $a161			jmp 	SyntaxError
.85a6						_DCRedefine:
.85a6		a9 15		lda #$15		lda	#21
.85a8		4c 98 90	jmp $9098		jmp	ErrorHandler
.85ab						_DCType:
.85ab		4c 6b a1	jmp $a16b			jmp 	TypeError
.85ae						_DCGetSize:
.85ae		a2 00		ldx #$00			ldx 	#0 						; get first index.
.85b0		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 	; get array dimension
.85b3		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85b5		f0 e7		beq $859e			beq 	_DCSize
.85b7		c9 fe		cmp #$fe			cmp 	#254
.85b9		f0 e3		beq $859e			beq 	_DCSize
.85bb		60		rts				rts
.85bc						ScaleByBaseType:
.85bc		29 10		and #$10			and 	#NSBIsString 			; is it string
.85be		d0 19		bne $85d9			bne 	_SBBTString
.85c0		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85c2		48		pha				pha
.85c3		a5 36		lda $36				lda 	zTemp0
.85c5		48		pha				pha
.85c6		06 36		asl $36				asl 	zTemp0 					; x 2
.85c8		26 37		rol $37				rol 	zTemp0+1
.85ca		06 36		asl $36				asl 	zTemp0 					; x 4
.85cc		26 37		rol $37				rol 	zTemp0+1
.85ce		68		pla				pla 							; add stacked value = x 5
.85cf		65 36		adc $36				adc 	zTemp0
.85d1		85 36		sta $36				sta 	zTemp0
.85d3		68		pla				pla
.85d4		65 37		adc $37				adc 	zTemp0+1
.85d6		85 37		sta $37				sta 	zTemp0+1
.85d8		60		rts				rts
.85d9						_SBBTString:
.85d9		06 36		asl $36				asl 	zTemp0
.85db		26 37		rol $37				rol 	zTemp0+1
.85dd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85de						EndCommand:
.85de		4c 23 84	jmp $8423			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85e1						ForCommand:
.85e1		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85e3		20 dc b0	jsr $b0dc			jsr 	StackOpen
.85e6		a2 00		ldx #$00			ldx 	#0
.85e8		20 e6 99	jsr $99e6			jsr 	EvaluateTerm
.85eb		b5 50		lda $50,x			lda 	NSStatus,x
.85ed		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85ef		d0 47		bne $8638			bne		_FCError
.85f1		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85f3		20 8f 90	jsr $908f			jsr 	CheckNextA
.85f6		e8		inx				inx
.85f7		20 50 9f	jsr $9f50			jsr 	EvaluateInteger 			; <from> in +1
.85fa		b1 30		lda ($30),y			lda 	(codePtr),y
.85fc		c8		iny				iny 								; consume it
.85fd		48		pha				pha 								; save on stack for later
.85fe		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.8600		f0 04		beq $8606			beq 	_FCNoSyntax
.8602		c9 d8		cmp #$d8			cmp 	#KWD_TO
.8604		d0 35		bne $863b			bne 	_FCSyntaxError
.8606						_FCNoSyntax:
.8606		e8		inx				inx
.8607		20 50 9f	jsr $9f50			jsr 	EvaluateInteger
.860a		20 21 b1	jsr $b121			jsr 	STKSaveCodePosition 		; save loop back position
.860d		68		pla				pla 								; restore DOWNTO or TO
.860e		5a		phy				phy 								; save Y on the stack
.860f		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8611		f0 02		beq $8615			beq 	_FCNotDownTo
.8613		a9 02		lda #$02			lda 	#2
.8615						_FCNotDownTo:
.8615		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8616		a0 10		ldy #$10			ldy 	#16
.8618		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.861a		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.861c		a5 58		lda $58				lda 	NSMantissa0
.861e		91 34		sta ($34),y			sta 	(basicStack),y
.8620		a5 60		lda $60				lda 	NSMantissa1
.8622		c8		iny				iny
.8623		91 34		sta ($34),y			sta 	(basicStack),y
.8625		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8627		a2 01		ldx #$01			ldx 	#1
.8629		20 3e 86	jsr $863e			jsr 	FCIntegerToStack
.862c		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.862e		a2 02		ldx #$02			ldx 	#2
.8630		20 3e 86	jsr $863e			jsr 	FCIntegerToStack
.8633		20 59 86	jsr $8659			jsr 	CopyIndexToReference
.8636		7a		ply				ply 								; restore position
.8637		60		rts				rts
.8638						_FCError:
.8638		4c 6b a1	jmp $a16b			jmp 	TypeError
.863b						_FCSyntaxError:
.863b		4c 61 a1	jmp $a161			jmp 	SyntaxError
.863e						FCIntegerToStack:
.863e		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8640		10 03		bpl $8645			bpl	 	_FCNotNegative
.8642		20 ac 9f	jsr $9fac			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8645						_FCNotNegative:
.8645		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8647		91 34		sta ($34),y			sta 	(basicStack),y
.8649		c8		iny				iny
.864a		b5 60		lda $60,x			lda 	NSMantissa1,x
.864c		91 34		sta ($34),y			sta 	(basicStack),y
.864e		c8		iny				iny
.864f		b5 68		lda $68,x			lda 	NSMantissa2,x
.8651		91 34		sta ($34),y			sta 	(basicStack),y
.8653		c8		iny				iny
.8654		b5 70		lda $70,x			lda 	NSMantissa3,x
.8656		91 34		sta ($34),y			sta 	(basicStack),y
.8658		60		rts				rts
.8659						CopyIndexToReference:
.8659		5a		phy				phy
.865a		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.865c		38		sec				sec 								; (because we copy from offset 8)
.865d		b1 34		lda ($34),y			lda 	(basicStack),y
.865f		e9 08		sbc #$08			sbc 	#8
.8661		85 36		sta $36				sta 	zTemp0
.8663		c8		iny				iny
.8664		b1 34		lda ($34),y			lda 	(basicStack),y
.8666		e9 00		sbc #$00			sbc 	#0
.8668		85 37		sta $37				sta 	zTemp0+1
.866a		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.866c		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.866e		b1 34		lda ($34),y			lda 	(basicStack),y
.8670		0a		asl a				asl 	a 							; into carry
.8671		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8673		90 14		bcc $8689			bcc 	_CITRNormal
.8675		38		sec				sec
.8676						_CITRNegative:
.8676		a9 00		lda #$00			lda 	#0
.8678		f1 34		sbc ($34),y			sbc 	(basicStack),y
.867a		91 36		sta ($36),y			sta 	(zTemp0),y
.867c		c8		iny				iny
.867d		ca		dex				dex
.867e		d0 f6		bne $8676			bne 	_CITRNegative
.8680		88		dey				dey 								; look at MSB of mantissa
.8681		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8683		09 80		ora #$80			ora 	#$80
.8685		91 36		sta ($36),y			sta 	(zTemp0),y
.8687		7a		ply				ply
.8688		60		rts				rts
.8689						_CITRNormal:
.8689		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.868b		91 36		sta ($36),y			sta 	(zTemp0),y
.868d		c8		iny				iny
.868e		ca		dex				dex
.868f		d0 f8		bne $8689			bne 	_CITRNormal
.8691		7a		ply				ply 								; and exit.
.8692		60		rts				rts
.8693						NextCommand:
.8693		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8695		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8697		20 09 b1	jsr $b109			jsr 	StackCheckFrame
.869a		5a		phy				phy
.869b		a0 10		ldy #$10			ldy 	#16 						; get the step count
.869d		b1 34		lda ($34),y			lda 	(basicStack),y
.869f		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86a1		30 02		bmi $86a5			bmi 	_NCStepNeg
.86a3		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86a5						_NCStepNeg:
.86a5		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86a7		a2 04		ldx #$04			ldx 	#4 							; count to bump
.86a9		18		clc				clc
.86aa						_NCBump:
.86aa		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86ac		91 34		sta ($34),y			sta 	(basicStack),y
.86ae		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86b0		c8		iny				iny 								; next byte
.86b1		ca		dex				dex 								; do four times
.86b2		d0 f6		bne $86aa			bne 	_NCBump
.86b4		20 59 86	jsr $8659			jsr		CopyIndexToReference		; copy it to the reference variable.
.86b7		a0 10		ldy #$10			ldy 	#16 						; get step count again
.86b9		b1 34		lda ($34),y			lda 	(basicStack),y
.86bb		0a		asl a				asl 	a 							; sign bit to carry
.86bc		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86be		85 38		sta $38				sta 	zTemp1
.86c0		90 02		bcc $86c4			bcc 	_NCCompRev 					; use if step is +ve
.86c2		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86c4						_NCCompRev:
.86c4		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86c6		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86c8		85 39		sta $39				sta 	zTemp1+1
.86ca		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86cc		38		sec				sec
.86cd						_NCCompare:
.86cd		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86cf		b1 34		lda ($34),y			lda 	(basicStack),y
.86d1		a4 39		ldy $39				ldy 	zTemp1+1
.86d3		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86d5		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86d7		e6 39		inc $39				inc 	zTemp1+1
.86d9		ca		dex				dex 								; do it 4 times.
.86da		d0 f1		bne $86cd			bne 	_NCCompare
.86dc		50 02		bvc $86e0			bvc 	_NCNoOverflow 				; convert to signed comparison
.86de		49 80		eor #$80			eor 	#$80
.86e0						_NCNoOverflow:
.86e0		7a		ply				ply 								; restore Y position
.86e1		0a		asl a				asl 	a 							; is bit 7 set.
.86e2		90 04		bcc $86e8			bcc 	_NCLoopBack 				; if no , >= so loop back
.86e4		20 fb b0	jsr $b0fb			jsr 	StackClose 					; exit the loop
.86e7		60		rts				rts
.86e8						_NCLoopBack:
.86e8		20 32 b1	jsr $b132			jsr 	STKLoadCodePosition 		; loop back
.86eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86ec						Command_GOSUB:
.86ec		a2 00		ldx #$00			ldx 	#0
.86ee		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86f1		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86f3		20 dc b0	jsr $b0dc			jsr 	StackOpen 					; create frame
.86f6		20 21 b1	jsr $b121			jsr 	STKSaveCodePosition 		; save current position
.86f9		4c 0f 87	jmp $870f			jmp 	GotoStackX
.86fc						Command_RETURN:
.86fc		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86fe		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8700		20 09 b1	jsr $b109			jsr 	StackCheckFrame
.8703		20 32 b1	jsr $b132			jsr 	STKLoadCodePosition 		; restore code position
.8706		20 fb b0	jsr $b0fb			jsr 	StackClose
.8709		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.870a						GotoCommand:
.870a		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.870c		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.870f						GotoStackX:
.870f		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8711		48		pha				pha 								; it is slightly inefficient, just in cases.
.8712		b5 58		lda $58,x			lda 	NSMantissa0,x
.8714		fa		plx				plx
.8715		20 88 a7	jsr $a788			jsr 	MemorySearch 				; transfer to line number AX.
.8718		90 05		bcc $871f			bcc 	_GotoError 					; not found, off end.
.871a		d0 03		bne $871f			bne 	_GotoError 					; not found exactly
.871c		4c 7f 8c	jmp $8c7f			jmp 	RunNewLine 					; and go straight to new line code.
.871f						_GotoError:
.871f		a9 0d		lda #$0d		lda	#13
.8721		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8724						IfCommand:
.8724		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8726		20 31 9f	jsr $9f31			jsr 	EvaluateNumber
.8729		b1 30		lda ($30),y			lda 	(codePtr),y
.872b		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.872d		d0 0a		bne $8739			bne 	_IfStructured 				; we still support it.
.872f		c8		iny				iny 								; consume THEN
.8730		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; is it zero
.8733		f0 01		beq $8736			beq 	_IfFail 					; if fail, go to next line
.8735		60		rts				rts 								; if THEN just continue
.8736						_IfFail:
.8736		4c 67 8c	jmp $8c67			jmp 	EOLCommand
.8739						_IfStructured:
.8739		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; is it zero
.873c		d0 07		bne $8745			bne 	_IfExit 					; if not, then continue normally.
.873e		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.8740		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8742		20 da 8f	jsr $8fda			jsr 	ScanForward 				; and run from there
.8745						_IfExit:
.8745		60		rts				rts
.8746						ElseCode:
.8746		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8748		aa		tax				tax 								; so just go to the structure exit
.8749		20 da 8f	jsr $8fda			jsr 	ScanForward
.874c		60		rts				rts
.874d						EndIf:
.874d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.874e						Command_Input:
.874e		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8750		8d 28 04	sta $0428			sta 	isInputFlag
.8753		80 03		bra $8758			bra 	Command_IP_Main
.8755						Command_Print:
.8755		9c 28 04	stz $0428			stz 	isInputFlag 				; clear input flag
.8758						Command_IP_Main:
.8758		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8759						_CPLoop:
.8759		08		php				php 								; save last action flag
.875a		b1 30		lda ($30),y			lda 	(codePtr),y
.875c		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.875e		f0 54		beq $87b4			beq 	_CPExit
.8760		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8762		f0 50		beq $87b4			beq 	_CPExit
.8764		68		pla				pla 								; throw last action flag
.8765		b1 30		lda ($30),y			lda 	(codePtr),y
.8767		c8		iny				iny
.8768		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.876a		f0 45		beq $87b1			beq 	_CPContinueWithSameLine
.876c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.876e		f0 3c		beq $87ac			beq 	_CPTab
.8770		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8772		f0 34		beq $87a8			beq 	_CPNewLine
.8774		88		dey				dey 								; undo the get.
.8775		20 9a 95	jsr $959a			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8778		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.877a		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.877c		f0 0d		beq $878b			beq 	_CPIsValue 					; no, display it.
.877e		ad 28 04	lda $0428			lda 	isInputFlag 				; if print, dereference and print.
.8781		f0 05		beq $8788			beq 	_CPIsPrint 					; otherwise display.
.8783		20 bd 87	jsr $87bd			jsr 	CIInputValue 				; input a value to the reference
.8786		80 20		bra $87a8			bra 	_CPNewLine
.8788						_CPIsPrint:
.8788		20 5f 98	jsr $985f			jsr 	Dereference 				; dereference if required.
.878b						_CPIsValue:
.878b		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.878d		29 10		and #$10			and 	#NSBIsString
.878f		f0 09		beq $879a			beq 	_CPNumber
.8791		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8793		a5 58		lda $58				lda 	NSMantissa0
.8795		20 20 88	jsr $8820			jsr 	CPPrintStringXA
.8798		80 be		bra $8758			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.879a						_CPNumber:
.879a		a9 05		lda #$05			lda 	#5 							; maximum decimals
.879c		20 18 9e	jsr $9e18			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.879f		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.87a1		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.87a3		20 20 88	jsr $8820			jsr 	CPPrintStringXA 			; print it.
.87a6		80 b0		bra $8758			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.87a8						_CPNewLine:
.87a8		a9 0d		lda #$0d			lda 	#13
.87aa		80 02		bra $87ae			bra 	_CPPrintChar
.87ac						_CPTab:
.87ac		a9 09		lda #$09			lda 	#9 							; print TAB
.87ae						_CPPrintChar:
.87ae		20 33 88	jsr $8833			jsr 	CPPrintVector
.87b1						_CPContinueWithSameLine:
.87b1		38		sec				sec 								; loop round with carry set, which
.87b2		80 a5		bra $8759			bra 	_CPLoop 					; will inhibit final CR
.87b4						_CPExit:
.87b4		28		plp				plp 								; get last action flag
.87b5		b0 05		bcs $87bc			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87b7		a9 0d		lda #$0d			lda 	#13 						; print new line
.87b9		20 33 88	jsr $8833			jsr 	CPPrintVector
.87bc						_CPExit2:
.87bc		60		rts				rts
.87bd						CIInputValue:
.87bd		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87bf						_CIInputLine:
.87bf		20 36 88	jsr $8836			jsr 	CPInputVector 				; get key
.87c2		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87c4		f0 1f		beq $87e5			beq 	_CIHaveValue
.87c6		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87c8		f0 11		beq $87db			beq 	_CIBackspace
.87ca		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87cc		90 f1		bcc $87bf			bcc 	_CIInputLine
.87ce		e0 50		cpx #$50			cpx 	#80 						; max length
.87d0		b0 ed		bcs $87bf			bcs 	_CIInputLine
.87d2		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87d5		e8		inx				inx
.87d6		20 33 88	jsr $8833			jsr 	CPPrintVector 				; echo it.
.87d9		80 e4		bra $87bf			bra 	_CIInputLine
.87db						_CIBackspace:
.87db		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87dd		f0 e0		beq $87bf			beq 	_CIInputLine
.87df		20 33 88	jsr $8833			jsr 	CPPrintVector 				; echo it.
.87e2		ca		dex				dex
.87e3		80 da		bra $87bf			bra 	_CIInputLine
.87e5						_CIHaveValue:
.87e5		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.87e8		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87ea		29 10		and #$10			and 	#NSBIsString
.87ec		f0 17		beq $8805			beq 	_CIAssignNumber 			; assign a number
.87ee		a2 01		ldx #$01			ldx 	#1
.87f0		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87f2		95 58		sta $58,x			sta 	NSMantissa0,x
.87f4		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87f6		95 60		sta $60,x			sta 	NSMantissa1,x
.87f8		74 68		stz $68,x			stz 	NSMantissa2,x
.87fa		74 70		stz $70,x			stz 	NSMantissa3,x
.87fc		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87fe		95 50		sta $50,x			sta  	NSStatus,x
.8800		ca		dex				dex 								; X = 0
.8801		20 72 88	jsr $8872			jsr 	AssignVariable
.8804		60		rts				rts
.8805						_CIAssignNumber:
.8805		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8807		85 36		sta $36				sta 	zTemp0
.8809		a9 05		lda #$05			lda 	#lineBuffer >> 8
.880b		85 37		sta $37				sta 	zTemp0+1
.880d		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.880f		20 9a 9d	jsr $9d9a			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8812		90 07		bcc $881b			bcc 	_CIIsOkay
.8814		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8816		20 33 88	jsr $8833			jsr 	CPPrintVector
.8819		80 a2		bra $87bd			bra 	CIInputValue
.881b						_CIIsOkay:
.881b		ca		dex				dex 								; X = 0
.881c		20 72 88	jsr $8872			jsr 	AssignVariable
.881f		60		rts				rts
.8820						CPPrintStringXA:
.8820		5a		phy				phy
.8821		86 37		stx $37				stx 	zTemp0+1
.8823		85 36		sta $36				sta 	zTemp0
.8825		a0 00		ldy #$00			ldy 	#0
.8827						_PSXALoop:
.8827		b1 36		lda ($36),y			lda 	(zTemp0),y
.8829		f0 06		beq $8831			beq 	_PSXAExit
.882b		20 33 88	jsr $8833			jsr 	CPPrintVector
.882e		c8		iny				iny
.882f		80 f6		bra $8827			bra 	_PSXALoop
.8831						_PSXAExit:
.8831		7a		ply				ply
.8832		60		rts				rts
.8833						CPPrintVector:
.8833		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8836						CPInputVector:
.8836		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8839						LetCommand:
.8839		a2 00		ldx #$00			ldx 	#0
.883b		b1 30		lda ($30),y			lda 	(codePtr),y
.883d		c9 10		cmp #$10			cmp 	#KWD_AT
.883f		d0 14		bne $8855			bne 	_LCStandard
.8841		c8		iny				iny 								; skip equal
.8842		20 e6 99	jsr $99e6			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8845		20 5f 98	jsr $985f			jsr 	Dereference 				; dereference it to a value
.8848		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.884a		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.884c		95 50		sta $50,x			sta 	NSStatus,x
.884e		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8850		d0 0f		bne $8861			bne 	_LCMain
.8852		4c 6b a1	jmp $a16b			jmp 	TypeError 					; was a reference before.
.8855						_LCStandard:
.8855		ad 84 95	lda $9584			lda 	PrecedenceLevel+"*"			; precedence > this
.8858		20 9e 95	jsr $959e			jsr 	EvaluateExpressionAtPrecedence
.885b		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.885d		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.885f		f0 0e		beq $886f			beq 	_LetGoProc 					; it's a procedure call.
.8861						_LCMain:
.8861		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8863		20 8f 90	jsr $908f			jsr 	CheckNextA
.8866		e8		inx				inx 								; RHS
.8867		20 28 9f	jsr $9f28			jsr 	EvaluateValue
.886a		ca		dex				dex
.886b		20 72 88	jsr $8872			jsr 	AssignVariable
.886e		60		rts				rts
.886f						_LetGoProc:
.886f		4c 3d 8b	jmp $8b3d			jmp 	CallProcedure
.8872						AssignVariable:
.8872		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8874		48		pha				pha 								; save a copy
.8875		55 51		eor $51,x			eor 	NSStatus+1,x
.8877		29 10		and #$10			and 	#NSBIsString
.8879		d0 0b		bne $8886			bne 	_ASError
.887b		68		pla				pla 								; get back
.887c		29 10		and #$10			and 	#NSBIsString 				; check type
.887e		d0 03		bne $8883			bne 	_ASString
.8880		4c 9d 97	jmp $979d			jmp 	AssignNumber
.8883						_ASString:
.8883		4c fb 97	jmp $97fb			jmp 	AssignString
.8886						_ASError:
.8886		4c 6b a1	jmp $a16b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8889						Command_List:
.8889		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.888c		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.888e		20 85 80	jsr $8085			jsr 	SNDCommand
.8891		b1 30		lda ($30),y			lda 	(codePtr),y
.8893		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8895		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8897		f0 6e		beq $8907			beq 	_CLListProcedure
.8899		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.889b		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.889d		a9 ff		lda #$ff			lda 	#$FF
.889f		85 5f		sta $5f				sta 	NSMantissa0+7
.88a1		85 67		sta $67				sta 	NSMantissa1+7
.88a3		b1 30		lda ($30),y			lda 	(codePtr),y
.88a5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a7		f0 1a		beq $88c3			beq 	_CLSecond
.88a9		20 84 89	jsr $8984			jsr 	CLIsDigit 					; if not digit, list all
.88ac		b0 20		bcs $88ce			bcs 	_CLStart
.88ae		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.88b0		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.88b3		b1 30		lda ($30),y			lda 	(codePtr),y
.88b5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88b7		f0 0a		beq $88c3			beq 	_CLSecond 					; if so go get it
.88b9		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.88bb		85 5f		sta $5f				sta 	NSMantissa0+7
.88bd		a5 64		lda $64				lda 	NSMantissa1+4
.88bf		85 67		sta $67				sta 	NSMantissa1+7
.88c1		80 0b		bra $88ce			bra 	_CLStart
.88c3						_CLSecond:
.88c3		c8		iny				iny 								; consume comma
.88c4		20 84 89	jsr $8984			jsr 	CLIsDigit 					; digit found
.88c7		b0 05		bcs $88ce			bcs 	_CLStart 					; if not, continue listing
.88c9		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88cb		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.88ce						_CLStart
.88ce		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88d0		85 30		sta $30				sta 	codePtr
.88d2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88d4		85 31		sta $31				sta 	codePtr+1
.88d6						_CLLoop:
.88d6		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88d9		f0 27		beq $8902			beq 	_CLBreak
.88db		b2 30		lda ($30)			lda 	(codePtr)
.88dd		f0 20		beq $88ff			beq 	_CLExit
.88df		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88e1		20 73 89	jsr $8973			jsr 	CLCompareLineNo
.88e4		90 0c		bcc $88f2			bcc 	_CLNext
.88e6		a2 07		ldx #$07			ldx 	#7
.88e8		20 73 89	jsr $8973			jsr 	CLCompareLineNo
.88eb		f0 02		beq $88ef			beq 	_CLDoThisOne
.88ed		b0 03		bcs $88f2			bcs 	_CLNext
.88ef						_CLDoThisOne:
.88ef		20 60 89	jsr $8960			jsr 	CLListOneLine 				; routine to list the current line.
.88f2						_CLNext:
.88f2		18		clc				clc
.88f3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88f5		65 30		adc $30				adc 	codePtr
.88f7		85 30		sta $30				sta 	codePtr
.88f9		90 02		bcc $88fd			bcc 	_CREExit
.88fb		e6 31		inc $31				inc 	codePtr+1 					; carry
.88fd						_CREExit:
.88fd		80 d7		bra $88d6			bra 	_CLLoop
.88ff						_CLExit:
.88ff		4c 23 84	jmp $8423			jmp 	WarmStart
.8902						_CLBreak:
.8902		a9 01		lda #$01		lda	#1
.8904		4c 98 90	jmp $9098		jmp	ErrorHandler
.8907						_CLListProcedure:
.8907		b1 30		lda ($30),y			lda 	(codePtr),y
.8909		85 38		sta $38				sta 	zTemp1
.890b		c8		iny				iny
.890c		b1 30		lda ($30),y			lda 	(codePtr),y
.890e		85 39		sta $39				sta 	zTemp1+1
.8910		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8912		85 30		sta $30				sta 	codePtr
.8914		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8916		85 31		sta $31				sta 	codePtr+1
.8918						_CLLPSearch:
.8918		b2 30		lda ($30)			lda 	(codePtr)
.891a		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.891c		f0 e1		beq $88ff			beq 	_CLExit
.891e		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8920		b1 30		lda ($30),y			lda 	(codePtr),y
.8922		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8924		d0 0e		bne $8934			bne 	_CLLPNext
.8926		c8		iny				iny 								; check if PROC this.
.8927		b1 30		lda ($30),y			lda 	(codePtr),y
.8929		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.892b		d0 07		bne $8934			bne 	_CLLPNext
.892d		c8		iny				iny
.892e		b1 30		lda ($30),y			lda 	(codePtr),y
.8930		c5 39		cmp $39				cmp 	zTemp1+1
.8932		f0 0d		beq $8941			beq 	_CLLPFound
.8934						_CLLPNext:
.8934		18		clc				clc
.8935		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8937		65 30		adc $30				adc 	codePtr
.8939		85 30		sta $30				sta 	codePtr
.893b		90 02		bcc $893f			bcc 	_CREExit
.893d		e6 31		inc $31				inc 	codePtr+1 					; carry
.893f						_CREExit:
.893f		80 d7		bra $8918			bra 	_CLLPSearch
.8941						_CLLPFound:
.8941		b2 30		lda ($30)			lda 	(codePtr)
.8943		f0 ba		beq $88ff			beq 	_CLExit
.8945		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8947		b1 30		lda ($30),y			lda 	(codePtr),y
.8949		48		pha				pha
.894a		20 60 89	jsr $8960			jsr 	CLListOneLine 				; list line and go forward
.894d		18		clc				clc
.894e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8950		65 30		adc $30				adc 	codePtr
.8952		85 30		sta $30				sta 	codePtr
.8954		90 02		bcc $8958			bcc 	_CREExit
.8956		e6 31		inc $31				inc 	codePtr+1 					; carry
.8958						_CREExit:
.8958		68		pla				pla 								; reached ENDPROC ?
.8959		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.895b		d0 e4		bne $8941			bne 	_CLLPFound
.895d		4c 23 84	jmp $8423			jmp 	WarmStart
.8960						CLListOneLine:
.8960		20 3d 90	jsr $903d			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8963		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.8966		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8968		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.896a		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.896d		a9 0d		lda #$0d			lda 	#13 						; new line
.896f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8972		60		rts				rts
.8973						CLCompareLineNo:
.8973		38		sec				sec
.8974		a0 01		ldy #$01			ldy 	#1
.8976		b1 30		lda ($30),y			lda 	(codePtr),y
.8978		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.897a		85 36		sta $36				sta 	zTemp0
.897c		c8		iny				iny
.897d		b1 30		lda ($30),y			lda 	(codePtr),y
.897f		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8981		05 36		ora $36				ora 	zTemp0
.8983		60		rts				rts
.8984						CLIsDigit:
.8984		b1 30		lda ($30),y			lda 	(codePtr),y
.8986		c9 30		cmp #$30			cmp 	#"0"
.8988		90 03		bcc $898d			bcc	 	_CLIDExitFalse
.898a		c9 3a		cmp #$3a			cmp 	#"9"+1
.898c		60		rts				rts
.898d						_CLIDExitFalse:
.898d		38		sec				sec
.898e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.898f						Command_Load:
.898f		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; file name to load
.8992		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8994		a5 36		lda $36				lda 	zTemp0
.8996		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8999		b0 44		bcs $89df			bcs 	CLErrorHandler 				; error, so fail.
.899b		8d 5d 06	sta $065d			sta 	CurrentFileStream 			; save the reading stream.
.899e		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.89a1		20 f6 8a	jsr $8af6			jsr 	NewProgram 					; does the actual NEW.
.89a4		9c 5c 06	stz $065c			stz 	LoadEOFFlag 				; clear EOF Flag.
.89a7						_CLLoop:
.89a7		20 ed 89	jsr $89ed			jsr 	LoadReadLine 				; get next line.
.89aa		f0 10		beq $89bc			beq 	_CLExit 					; end, exit.
.89ac		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.89af		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.89b2		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.89b5		f0 f0		beq $89a7			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.89b7		20 fe 83	jsr $83fe			jsr 	EditProgramCode 			; do the editing etc.
.89ba		80 eb		bra $89a7			bra 	_CLLoop
.89bc						_CLExit:
.89bc		ad 5d 06	lda $065d			lda 	CurrentFileStream
.89bf		20 71 80	jsr $8071			jsr 	KNLCloseFile
.89c2						CLComplete:
.89c2		a9 cc		lda #$cc			lda 	#_CLCMsg & $FF
.89c4		a2 89		ldx #$89			ldx 	#_CLCMsg >> 8
.89c6		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.89c9		4c 23 84	jmp $8423			jmp 	WarmStart
.89cc						_CLCMsg:
>89cc		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>89d4		2e 0d 00
.89d7						CLCloseError:
.89d7		48		pha				pha
.89d8		ad 5d 06	lda $065d			lda 	CurrentFileStream
.89db		20 71 80	jsr $8071			jsr 	KNLCloseFile
.89de		68		pla				pla
.89df						CLErrorHandler:
.89df		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.89e1		f0 05		beq $89e8			beq 	_CLEHNotFound
.89e3		a9 1a		lda #$1a		lda	#26
.89e5		4c 98 90	jmp $9098		jmp	ErrorHandler
.89e8						_CLEHNotFound:
.89e8		a9 19		lda #$19		lda	#25
.89ea		4c 98 90	jmp $9098		jmp	ErrorHandler
.89ed						LoadReadLine:
.89ed		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.89ef		20 09 8a	jsr $8a09			jsr 	LoadReadCharacter
.89f2		f0 14		beq $8a08			beq 	_LRLExit 					; eof ?
.89f4		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.89f6		90 f5		bcc $89ed			bcc 	LoadReadLine
.89f8						_LRLLoop:
.89f8		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.89fb		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.89fe		e8		inx				inx
.89ff		20 09 8a	jsr $8a09			jsr 	LoadReadCharacter 			; next line
.8a02		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a04		b0 f2		bcs $89f8			bcs 	_LRLLoop
.8a06		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a08						_LRLExit:
.8a08		60		rts				rts
.8a09						LoadReadCharacter:
.8a09		da		phx				phx
.8a0a		5a		phy				phy
.8a0b		ad 5c 06	lda $065c			lda 	LoadEOFFlag 				; already done EOF.
.8a0e		d0 0c		bne $8a1c			bne 	_LRCIsEOF
.8a10		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8a13		90 09		bcc $8a1e			bcc		_LRCExit 					; read okay.
.8a15		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8a17		d0 be		bne $89d7			bne 	CLCloseError
.8a19		ce 5c 06	dec $065c			dec 	LoadEOFFlag
.8a1c						_LRCIsEOF:
.8a1c		a9 00		lda #$00			lda 	#0
.8a1e						_LRCExit:
.8a1e		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8a20		d0 02		bne $8a24			bne 	_LRCNotTab
.8a22		a9 20		lda #$20			lda 	#' '
.8a24						_LRCNotTab:
.8a24		c9 0a		cmp #$0a			cmp 	#$0A
.8a26		d0 02		bne $8a2a			bne 	_LRCNotLF
.8a28		a9 0d		lda #$0d			lda 	#$0D
.8a2a						_LRCNotLF:
.8a2a		7a		ply				ply
.8a2b		fa		plx				plx
.8a2c		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8a2e		60		rts				rts
.065c						LoadEOFFlag:
>065c								.fill 	1
.065d						CurrentFileStream:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8a2f						Command_LOCAL:
.8a2f		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8a31		20 3d 8a	jsr $8a3d			jsr 	LocaliseNextTerm 			; convert term to a local.
.8a34		b1 30		lda ($30),y			lda 	(codePtr),y
.8a36		c8		iny				iny
.8a37		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a39		f0 f4		beq $8a2f			beq 	Command_LOCAL 				; if so, localise another variable.
.8a3b		88		dey				dey 								; unpick pre-get
.8a3c		60		rts				rts
.8a3d						LocaliseNextTerm:
.8a3d		20 e6 99	jsr $99e6			jsr 	EvaluateTerm 				; evaluate the term
.8a40		b5 50		lda $50,x			lda 	NSStatus,x
.8a42		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8a44		f0 5c		beq $8aa2			beq		_LNTError
.8a46		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8a48		85 36		sta $36				sta 	zTemp0
.8a4a		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a4c		85 37		sta $37				sta  	zTemp0+1
.8a4e		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8a50		29 10		and #$10			and 	#NSBIsString
.8a52		d0 1e		bne $8a72			bne 	_LNTPushString
.8a54		5a		phy				phy
.8a55		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8a57						_LNTPushNumLoop:
.8a57		b1 36		lda ($36),y			lda		(zTemp0),y
.8a59		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a5c		c8		iny				iny
.8a5d		c0 05		cpy #$05			cpy 	#5
.8a5f		d0 f6		bne $8a57			bne 	_LNTPushNumLoop
.8a61		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8a63		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a66		a5 37		lda $37				lda 	zTemp0+1
.8a68		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a6b		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8a6d		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a70		7a		ply				ply
.8a71		60		rts				rts
.8a72						_LNTPushString:
.8a72		5a		phy				phy
.8a73		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8a75		85 38		sta $38				sta 	zTemp1
.8a77		a0 01		ldy #$01			ldy 	#1
.8a79		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a7b		85 39		sta $39				sta 	zTemp1+1
.8a7d		a0 00		ldy #$00			ldy 	#0 							; output string
.8a7f		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8a81		f0 0a		beq $8a8d			beq 	_LNTStringOut
.8a83						_LNTPushStrLoop:
.8a83		b1 38		lda ($38),y			lda 	(zTemp1),y
.8a85		f0 06		beq $8a8d			beq 	_LNTStringOut
.8a87		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a8a		c8		iny				iny
.8a8b		80 f6		bra $8a83			bra 	_LNTPushStrLoop
.8a8d						_LNTStringOut:
.8a8d		98		tya				tya									; output length (chars written).
.8a8e		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a91		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8a93		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a96		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a98		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8a9b		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8a9d		20 bb b0	jsr $b0bb			jsr 	StackPushByte
.8aa0		7a		ply				ply
.8aa1		60		rts				rts
.8aa2						_LNTError:
.8aa2		4c 61 a1	jmp $a161			jmp 	SyntaxError
.8aa5						LocalPopValue:
.8aa5		20 d3 b0	jsr $b0d3			jsr 	StackPopByte
.8aa8		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8aaa		d0 17		bne $8ac3			bne 	_LPVString
.8aac		20 d3 b0	jsr $b0d3			jsr 	StackPopByte 				; address
.8aaf		85 37		sta $37				sta 	zTemp0+1
.8ab1		20 d3 b0	jsr $b0d3			jsr 	StackPopByte
.8ab4		85 36		sta $36				sta 	zTemp0
.8ab6		5a		phy				phy
.8ab7		a0 04		ldy #$04			ldy 	#4 							; copy back
.8ab9						_LPVNumberCopy:
.8ab9		20 d3 b0	jsr $b0d3			jsr 	StackPopByte
.8abc		91 36		sta ($36),y			sta 	(zTemp0),y
.8abe		88		dey				dey
.8abf		10 f8		bpl $8ab9			bpl 	_LPVNumberCopy
.8ac1		7a		ply				ply 								; and complete
.8ac2		60		rts				rts
.8ac3						_LPVString:
.8ac3		20 d3 b0	jsr $b0d3			jsr 	StackPopByte 				; address of record copied to zTemp0
.8ac6		85 37		sta $37				sta 	zTemp0+1
.8ac8		20 d3 b0	jsr $b0d3			jsr 	StackPopByte
.8acb		85 36		sta $36				sta 	zTemp0
.8acd		5a		phy				phy
.8ace		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8ad0		85 38		sta $38				sta 	zTemp1
.8ad2		a0 01		ldy #$01			ldy 	#1
.8ad4		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ad6		85 39		sta $39				sta 	zTemp1+1
.8ad8		20 d3 b0	jsr $b0d3			jsr 	StackPopByte 				; # chars to get => y
.8adb		a8		tay				tay
.8adc		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ade		f0 0e		beq $8aee			beq 	_LPVStringCopied
.8ae0		a9 00		lda #$00			lda 	#0 							; NULL on end
.8ae2		91 38		sta ($38),y			sta 	(zTemp1),y
.8ae4						_LPVStringCopy:
.8ae4		88		dey				dey
.8ae5		30 07		bmi $8aee			bmi 	_LPVStringCopied
.8ae7		20 d3 b0	jsr $b0d3			jsr 	StackPopByte
.8aea		91 38		sta ($38),y			sta 	(zTemp1),y
.8aec		80 f6		bra $8ae4			bra 	_LPVStringCopy
.8aee						_LPVStringCopied:
.8aee		fa		plx				plx
.8aef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8af0						NewCommand:
.8af0		20 f6 8a	jsr $8af6			jsr 	NewProgram 					; does the actual NEW.
.8af3		4c 23 84	jmp $8423			jmp 	WarmStart 					; and warm starts straight away.
.8af6						NewProgram:
.8af6		20 6a a7	jsr $a76a			jsr 	MemoryNew
.8af9		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8afc		20 b9 84	jsr $84b9			jsr 	ClearCommand 				; clear everything.
.8aff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8b00						PokeBCommand:
.8b00		a9 01		lda #$01			lda 	#1
.8b02		80 0c		bra $8b10			bra 	PokeCommand
.8b04						PokeWCommand:
.8b04		a9 02		lda #$02			lda 	#2
.8b06		80 08		bra $8b10			bra 	PokeCommand
.8b08						PokeLCommand:
.8b08		a9 03		lda #$03			lda 	#3
.8b0a		80 04		bra $8b10			bra 	PokeCommand
.8b0c						PokeDCommand:
.8b0c		a9 04		lda #$04			lda 	#4
.8b0e		80 00		bra $8b10			bra 	PokeCommand
.8b10						PokeCommand:
.8b10		48		pha				pha 								; save count on stack
.8b11		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8b13		20 63 9f	jsr $9f63			jsr		Evaluate16BitInteger 		; address
.8b16		20 87 90	jsr $9087			jsr 	CheckComma
.8b19		e8		inx				inx
.8b1a		20 50 9f	jsr $9f50			jsr		EvaluateInteger 			; data
.8b1d		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8b1f		85 36		sta $36				sta 	zTemp0
.8b21		a5 60		lda $60				lda 	NSMantissa1
.8b23		85 37		sta $37				sta 	zTemp0+1
.8b25		68		pla				pla 								; count -> zTemp1
.8b26		85 38		sta $38				sta 	zTemp1
.8b28		5a		phy				phy 								; save Y position.
.8b29		a0 00		ldy #$00			ldy 	#0 							; index to write
.8b2b		a2 00		ldx #$00			ldx 	#0 							; index to read
.8b2d						_PCLoop:
.8b2d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8b2f		91 36		sta ($36),y			sta 	(zTemp0),y
.8b31		c8		iny				iny 								; next byte to write
.8b32		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8b33		18		clc				clc
.8b34		69 08		adc #$08			adc 	#MathStackSize
.8b36		aa		tax				tax
.8b37		c6 38		dec $38				dec 	zTemp1 						; done them all
.8b39		d0 f2		bne $8b2d			bne 	_PCLoop
.8b3b		7a		ply				ply 								; restore position.
.8b3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8b3d						CallProcedure:
.8b3d		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8b3f		b1 30		lda ($30),y			lda 	(codePtr),y
.8b41		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8b43		f0 0c		beq $8b51			beq 	_CPEndParam
.8b45						_CPParamLoop:
.8b45		20 28 9f	jsr $9f28			jsr 	EvaluateValue 				; get parameter onto stack
.8b48		e8		inx				inx 								; bump next stack
.8b49		b1 30		lda ($30),y			lda 	(codePtr),y
.8b4b		c8		iny				iny
.8b4c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8b4e		f0 f5		beq $8b45			beq 	_CPParamLoop
.8b50		88		dey				dey 								; unpick.
.8b51						_CPEndParam:
.8b51		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8b54		c8		iny				iny									; skip right bracket
.8b55		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8b57		20 dc b0	jsr $b0dc			jsr 	StackOpen
.8b5a		20 21 b1	jsr $b121			jsr 	STKSaveCodePosition 		; save loop position
.8b5d		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8b5f		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8b61		a5 60		lda $60				lda 	NSMantissa1
.8b63		85 37		sta $37				sta 	zTemp0+1
.8b65		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8b67		b2 36		lda ($36)			lda 	(zTemp0)
.8b69		85 30		sta $30				sta 	safePtr
.8b6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6d		85 31		sta $31				sta 	safePtr+1
.8b6f		c8		iny				iny
.8b70		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b72		85 32		sta $32				sta 	safePtr+2
.8b74		c8		iny				iny
.8b75		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b77		85 33		sta $33				sta 	safePtr+3
.8b79		c8		iny				iny 								; get Y offset -> Y
.8b7a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b7c		a8		tay				tay
.8b7d		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8b7f		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8b82		f0 13		beq $8b97			beq 	_ParamExit 					; if so, exit.
.8b84						_ParamExtract:
.8b84		ca		dex				dex 								; put a local term on the level before
.8b85		20 3d 8a	jsr $8a3d			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8b88		20 72 88	jsr $8872			jsr 	AssignVariable 				; assign stacked value to the variable.
.8b8b		e8		inx				inx 								; advance to next parameter to do.
.8b8c		e8		inx				inx
.8b8d		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8b90		f0 05		beq $8b97			beq 	_ParamExit
.8b92		20 87 90	jsr $9087			jsr 	CheckComma 					; comma seperating parameters
.8b95		80 ed		bra $8b84			bra 	_ParamExtract
.8b97						_ParamExit:
.8b97		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; check )
.8b9a		60		rts				rts 								; and continue from here
.8b9b						Command_ENDPROC:
.8b9b		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8b9d		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8b9f		20 09 b1	jsr $b109			jsr 	StackCheckFrame
.8ba2		20 32 b1	jsr $b132			jsr 	STKLoadCodePosition 		; restore code position
.8ba5		20 fb b0	jsr $b0fb			jsr 	StackClose
.8ba8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ba9						Command_Read:
.8ba9		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8bab		20 e6 99	jsr $99e6			jsr 	EvaluateTerm
.8bae		b5 50		lda $50,x			lda 	NSStatus,x
.8bb0		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8bb2		f0 4f		beq $8c03			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8bb4		20 4c 8c	jsr $8c4c			jsr 	SwapDataCodePtrs 			; swap code and data
.8bb7		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8bba		d0 25		bne $8be1			bne 	_CRContinueData  			; forward for the next one.
.8bbc		b2 30		lda ($30)			lda 	(codePtr)
.8bbe		f0 1c		beq $8bdc			beq 	_CRNoData
.8bc0						_CRKeepSearching:
.8bc0		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8bc2		a2 80		ldx #$80			ldx 	#KWC_EOL
.8bc4		20 da 8f	jsr $8fda			jsr 	ScanForward
.8bc7		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8bc9		f0 16		beq $8be1			beq 	_CRHaveData 				; found it
.8bcb		18		clc				clc
.8bcc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bce		65 30		adc $30				adc 	codePtr
.8bd0		85 30		sta $30				sta 	codePtr
.8bd2		90 02		bcc $8bd6			bcc 	_CREExit
.8bd4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bd6						_CREExit:
.8bd6		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8bd8		b2 30		lda ($30)			lda 	(codePtr)
.8bda		d0 e4		bne $8bc0			bne 	_CRKeepSearching
.8bdc						_CRNoData:
.8bdc		a9 0b		lda #$0b		lda	#11
.8bde		4c 98 90	jmp $9098		jmp	ErrorHandler
.8be1						_CRHaveData:
.8be1						_CRContinueData:
.8be1		a2 01		ldx #$01			ldx 	#1
.8be3		20 28 9f	jsr $9f28			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8be6		ca		dex				dex
.8be7		20 72 88	jsr $8872			jsr		AssignVariable 				; do the assignment
.8bea		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8bed		b1 30		lda ($30),y			lda 	(codePtr),y
.8bef		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8bf1		d0 04		bne $8bf7			bne 	_CRSwapBack
.8bf3		c8		iny				iny 								; consume comma
.8bf4		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8bf7						_CRSwapBack:
.8bf7		20 4c 8c	jsr $8c4c			jsr 	SwapDataCodePtrs			; swap them back.
.8bfa		b1 30		lda ($30),y			lda 	(codePtr),y
.8bfc		c8		iny				iny
.8bfd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bff		f0 a8		beq $8ba9			beq 	Command_Read 				; if so go round again.
.8c01		88		dey				dey 								; unpick get.
.8c02		60		rts				rts
.8c03						_CRSyntax:
.8c03		4c 61 a1	jmp $a161			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8c06						RemCommand:
.8c06		b1 30		lda ($30),y			lda 	(codePtr),y
.8c08		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8c0a		d0 06		bne $8c12			bne 	_RMExit
.8c0c		c8		iny				iny 								; point to offset
.8c0d		98		tya				tya 								; A = offset position
.8c0e		38		sec				sec 								; add size +1 hence SEC
.8c0f		71 30		adc ($30),y			adc 	(codePtr),y
.8c11		a8		tay				tay 								; make current position.
.8c12						_RMExit:
.8c12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8c13						Command_REPEAT:
.8c13		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8c15		20 dc b0	jsr $b0dc			jsr 	StackOpen
.8c18		20 21 b1	jsr $b121			jsr 	STKSaveCodePosition 		; save loop position
.8c1b		60		rts				rts
.8c1c						Command_UNTIL:
.8c1c		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8c1e		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8c20		20 09 b1	jsr $b109			jsr 	StackCheckFrame
.8c23		a2 00		ldx #$00			ldx 	#0
.8c25		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; work out the number
.8c28		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; check if zero
.8c2b		f0 04		beq $8c31			beq 	_CULoopBack 				; if so keep looping
.8c2d		20 fb b0	jsr $b0fb			jsr 	StackClose		 			; return
.8c30		60		rts				rts
.8c31						_CULoopBack:
.8c31		20 32 b1	jsr $b132			jsr 	STKLoadCodePosition 		; loop back
.8c34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8c35						Command_Restore:
.8c35		20 4c 8c	jsr $8c4c			jsr 	SwapDataCodePtrs 			; swap code and data
.8c38		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c3a		85 30		sta $30				sta 	codePtr
.8c3c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c3e		85 31		sta $31				sta 	codePtr+1
.8c40		20 4c 8c	jsr $8c4c			jsr 	SwapDataCodePtrs 			; put them back
.8c43		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8c45		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8c48		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8c4b		60		rts				rts
.8c4c						SwapDataCodePtrs:
.8c4c		da		phx				phx
.8c4d		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8c4f						_SDCPLoop:
.8c4f		b5 30		lda $30,x			lda 	safePtr,x
.8c51		48		pha				pha
.8c52		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8c55		95 30		sta $30,x			sta 	safePtr,x
.8c57		68		pla				pla
.8c58		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8c5b		ca		dex				dex
.8c5c		10 f1		bpl $8c4f			bpl 	_SDCPLoop
.8c5e		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8c61		8c 1b 04	sty $041b			sty 	dataPointer+4
.8c64		a8		tay				tay
.8c65		fa		plx				plx
.8c66		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8c67						EOLCommand:
.8c67		18		clc				clc
.8c68		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c6a		65 30		adc $30				adc 	codePtr
.8c6c		85 30		sta $30				sta 	codePtr
.8c6e		90 02		bcc $8c72			bcc 	_CREExit
.8c70		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c72						_CREExit:
.8c72		80 0b		bra $8c7f			bra 	RunNewLine
.8c74						CommandRUN:
.8c74		20 b9 84	jsr $84b9			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8c77		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c79		85 30		sta $30				sta 	codePtr
.8c7b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c7d		85 31		sta $31				sta 	codePtr+1
.8c7f						RunNewLine:
.8c7f		b2 30		lda ($30)			lda 	(codePtr)
.8c81		f0 7b		beq $8cfe			beq 	CRNoProgram         		; no then END.
.8c83		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8c85		9a		txs				txs
.8c86						RUNCodePointerLine:
.8c86		a0 02		ldy #$02			ldy 	#2 							; start of program
.8c88						_CRIncMainLoop:
.8c88		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8c8b		d0 22		bne $8caf			bne 	_CRNoBreakCheck
.8c8d		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8c90		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8c93		f0 64		beq $8cf9			beq 	_CRBreak
.8c95		a5 01		lda $01				lda 	1 							; save I/O 0
.8c97		48		pha				pha
.8c98		64 01		stz $01				stz 	1 							; access I/O Page 0
.8c9a		38		sec				sec 								; calculate timer - LastTick
.8c9b		ad 59 d6	lda $d659			lda 	$D659
.8c9e		aa		tax				tax 								; saving timer in X
.8c9f		ed 5e 06	sbc $065e			sbc 	LastTick
.8ca2		c9 03		cmp #$03			cmp 	#3
.8ca4		90 06		bcc $8cac			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8ca6		8e 5e 06	stx $065e			stx 	LastTick 					; update last timer
.8ca9		20 0e a0	jsr $a00e			jsr 	TickHandler 							; go do the code.
.8cac						_NoFireTick:
.8cac		68		pla				pla 								; restore I/O 0
.8cad		85 01		sta $01				sta 	1
.8caf						_CRNoBreakCheck:
.8caf		c8		iny				iny									; next token
.8cb0						_CRMainLoop:
.8cb0		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8cb3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb5		10 10		bpl $8cc7			bpl 	_CRNotKeyword				; not a token.
.8cb7		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8cb9		b0 04		bcs $8cbf			bcs 	_CRIsKeyword
.8cbb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8cbd		b0 34		bcs $8cf3			bcs		_CRSyntaxError
.8cbf						_CRIsKeyword:
.8cbf		c8		iny				iny 								; consume command
.8cc0		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8cc1		aa		tax				tax 								; put in X for vector jump
.8cc2		20 f6 8c	jsr $8cf6			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8cc5		80 e9		bra $8cb0			bra 	_CRMainLoop 				; and loop round
.8cc7						_CRNotKeyword:
.8cc7		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8cc9		f0 bd		beq $8c88			beq 	_CRIncMainLoop
.8ccb		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8ccd		90 05		bcc $8cd4			bcc 	_CRNotVariable
.8ccf						_CRGoLet:
.8ccf		20 39 88	jsr $8839			jsr 	LetCommand
.8cd2		80 dc		bra $8cb0			bra 	_CRMainLoop
.8cd4						_CRNotVariable:
.8cd4		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8cd6		f0 f7		beq $8ccf			beq 	_CRGoLet
.8cd8		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8cda		f0 f3		beq $8ccf			beq 	_CRGoLet
.8cdc		c9 21		cmp #$21			cmp 	#KWD_PLING
.8cde		f0 ef		beq $8ccf			beq 	_CRGoLet
.8ce0		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ce2		f0 09		beq $8ced			beq 	_CRGoRem
.8ce4		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ce6		d0 0b		bne $8cf3			bne 	_CRSyntaxError
.8ce8		20 95 82	jsr $8295			jsr 	LabelHere
.8ceb		80 c3		bra $8cb0			bra 	_CRMainLoop
.8ced						_CRGoRem:
.8ced		c8		iny				iny
.8cee		20 06 8c	jsr $8c06			jsr 	RemCommand
.8cf1		80 bd		bra $8cb0			bra 	_CRMainLoop
.8cf3						_CRSyntaxError:
.8cf3		4c 61 a1	jmp $a161			jmp 	SyntaxError
.8cf6						_CRCallVector0:
.8cf6		7c 94 8d	jmp ($8d94,x)			jmp 	(VectorSet0,x)
.8cf9						_CRBreak:
.8cf9		a9 01		lda #$01		lda	#1
.8cfb		4c 98 90	jmp $9098		jmp	ErrorHandler
.8cfe						CRNoProgram:
.8cfe		4c de 85	jmp $85de			jmp 	EndCommand
.8d01						Shift1Command:
.8d01		b1 30		lda ($30),y			lda 	(codePtr),y
.8d03		c8		iny				iny
.8d04		0a		asl a				asl 	a
.8d05		aa		tax				tax
.8d06		7c 46 8e	jmp ($8e46,x)			jmp 	(VectorSet1,x)
.8d09						Shift2Command:
.8d09		b1 30		lda ($30),y			lda 	(codePtr),y
.8d0b		c8		iny				iny
.8d0c		0a		asl a				asl 	a
.8d0d		aa		tax				tax
.8d0e		7c 78 8e	jmp ($8e78,x)			jmp 	(VectorSet2,x)
.8d11						Unused1:
.8d11						Unused2:
.8d11						Unused3:
.8d11						Unused4:
.8d11		4c 61 a1	jmp $a161			jmp 	SyntaxError
>8d14								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8d14						VectorSetPunc:
>8d14		50 93					.word	ShiftLeft                        ; $00 <<
>8d16		3b 91					.word	BinaryCompareLessEqual           ; $01 <=
>8d18		31 91					.word	BinaryCompareNotEqual            ; $02 <>
>8d1a		61 a1					.word	SyntaxError                      ; $03 !!3
>8d1c		61 a1					.word	SyntaxError                      ; $04 ><
>8d1e		45 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8d20		53 93					.word	ShiftRight                       ; $06 >>
>8d22		61 a1					.word	SyntaxError                      ; $07 !!7
>8d24		61 a1					.word	SyntaxError                      ; $08 !!8
>8d26		61 a1					.word	SyntaxError                      ; $09 !!9
>8d28		61 a1					.word	SyntaxError                      ; $0a !!10
>8d2a		61 a1					.word	SyntaxError                      ; $0b !!11
>8d2c		61 a1					.word	SyntaxError                      ; $0c !!12
>8d2e		61 a1					.word	SyntaxError                      ; $0d !!13
>8d30		61 a1					.word	SyntaxError                      ; $0e !!14
>8d32		61 a1					.word	SyntaxError                      ; $0f !!15
>8d34		61 a1					.word	SyntaxError                      ; $10 @
>8d36		61 a1					.word	SyntaxError                      ; $11 !!17
>8d38		61 a1					.word	SyntaxError                      ; $12 !!18
>8d3a		61 a1					.word	SyntaxError                      ; $13 [
>8d3c		fc 91					.word	IntegerDivide                    ; $14 \
>8d3e		61 a1					.word	SyntaxError                      ; $15 ]
>8d40		8e 94					.word	EorInteger                       ; $16 ^
>8d42		61 a1					.word	SyntaxError                      ; $17 _
>8d44		61 a1					.word	SyntaxError                      ; $18 `
>8d46		61 a1					.word	SyntaxError                      ; $19 !!25
>8d48		61 a1					.word	SyntaxError                      ; $1a !!26
>8d4a		61 a1					.word	SyntaxError                      ; $1b {
>8d4c		59 94					.word	OraInteger                       ; $1c |
>8d4e		61 a1					.word	SyntaxError                      ; $1d }
>8d50		61 a1					.word	SyntaxError                      ; $1e ~
>8d52		61 a1					.word	SyntaxError                      ; $1f [7m<7F>[m
>8d54		61 a1					.word	SyntaxError                      ; $20
>8d56		c3 94					.word	WordIndirect                     ; $21 !
>8d58		61 a1					.word	SyntaxError                      ; $22 "
>8d5a		61 a1					.word	SyntaxError                      ; $23 #
>8d5c		61 a1					.word	SyntaxError                      ; $24 $
>8d5e		3d 92					.word	IntegerModulus                   ; $25 %
>8d60		24 94					.word	AndInteger                       ; $26 &
>8d62		61 a1					.word	SyntaxError                      ; $27 '
>8d64		61 a1					.word	SyntaxError                      ; $28 (
>8d66		61 a1					.word	SyntaxError                      ; $29 )
>8d68		ab 92					.word	MulInteger                       ; $2a *
>8d6a		c6 93					.word	AddInteger                       ; $2b +
>8d6c		61 a1					.word	SyntaxError                      ; $2c ,
>8d6e		ff 93					.word	SubInteger                       ; $2d -
>8d70		61 a1					.word	SyntaxError                      ; $2e .
>8d72		7d 96					.word	FDivideCommand                   ; $2f /
>8d74		61 a1					.word	SyntaxError                      ; $30 0
>8d76		61 a1					.word	SyntaxError                      ; $31 1
>8d78		61 a1					.word	SyntaxError                      ; $32 2
>8d7a		61 a1					.word	SyntaxError                      ; $33 3
>8d7c		61 a1					.word	SyntaxError                      ; $34 4
>8d7e		61 a1					.word	SyntaxError                      ; $35 5
>8d80		61 a1					.word	SyntaxError                      ; $36 6
>8d82		61 a1					.word	SyntaxError                      ; $37 7
>8d84		61 a1					.word	SyntaxError                      ; $38 8
>8d86		61 a1					.word	SyntaxError                      ; $39 9
>8d88		61 a1					.word	SyntaxError                      ; $3a :
>8d8a		61 a1					.word	SyntaxError                      ; $3b ;
>8d8c		1d 91					.word	BinaryCompareLess                ; $3c <
>8d8e		13 91					.word	BinaryCompareEqual               ; $3d =
>8d90		27 91					.word	BinaryCompareGreater             ; $3e >
>8d92		e5 94					.word	ByteIndirect                     ; $3f ?
.8d94						VectorSet0:
>8d94		67 8c					.word	EOLCommand                       ; $80 !0:EOF
>8d96		01 8d					.word	Shift1Command                    ; $81 !1:SH1
>8d98		09 8d					.word	Shift2Command                    ; $82 !2:SH2
>8d9a		67 9b					.word	AbsUnary                         ; $83 ABS(
>8d9c		75 9b					.word	AllocUnary                       ; $84 ALLOC(
>8d9e		e5 9b					.word	AscUnary                         ; $85 ASC(
>8da0		c9 9d					.word	ChrUnary                         ; $86 CHR$(
>8da2		fe a5					.word	UnaryEvent                       ; $87 EVENT(
>8da4		0f 91					.word	UnaryFalse                       ; $88 FALSE
>8da6		f2 9b					.word	FracUnary                        ; $89 FRAC(
>8da8		61 a1					.word	SyntaxError                      ; $8a GETDATE$(
>8daa		61 a1					.word	SyntaxError                      ; $8b GETTIME$(
>8dac		88 a5					.word	UnaryHit                         ; $8c HIT(
>8dae		07 9c					.word	IntUnary                         ; $8d INT(
>8db0		88 9d					.word	IsValUnary                       ; $8e ISVAL(
>8db2		82 a6					.word	UnaryJoyB                        ; $8f JOYB(
>8db4		5b a6					.word	UnaryJoyX                        ; $90 JOYX(
>8db6		5e a6					.word	UnaryJoyY                        ; $91 JOYY(
>8db8		9c 9e					.word	Unary_Left                       ; $92 LEFT$(
>8dba		18 9c					.word	LenUnary                         ; $93 LEN(
>8dbc		36 9c					.word	Unary_Max                        ; $94 MAX(
>8dbe		be 9e					.word	Unary_Mid                        ; $95 MID$(
>8dc0		32 9c					.word	Unary_Min                        ; $96 MIN(
>8dc2		81 9c					.word	Unary_Not                        ; $97 NOT(
>8dc4		94 9c					.word	PeekByteUnary                    ; $98 PEEK(
>8dc6		a0 9c					.word	PeekDUnary                       ; $99 PEEKD(
>8dc8		9c 9c					.word	PeekLUnary                       ; $9a PEEKL(
>8dca		98 9c					.word	PeekWUnary                       ; $9b PEEKW(
>8dcc		39 b0					.word	UnaryPlaying                     ; $9c PLAYING(
>8dce		cd 9c					.word	Unary_Random                     ; $9d RANDOM(
>8dd0		a9 9e					.word	Unary_Right                      ; $9e RIGHT$(
>8dd2		ea 9c					.word	Unary_Rnd                        ; $9f RND(
>8dd4		60 9d					.word	SgnUnary                         ; $a0 SGN(
>8dd6		db 9d					.word	SpcUnary                         ; $a1 SPC(
>8dd8		f6 9d					.word	Unary_Str                        ; $a2 STR$(
>8dda		94 a6					.word	UnaryTimer                       ; $a3 TIMER(
>8ddc		04 91					.word	UnaryTrue                        ; $a4 TRUE
>8dde		7e 9d					.word	ValUnary                         ; $a5 VAL(
>8de0		e1 85					.word	ForCommand                       ; $a6 FOR
>8de2		24 87					.word	IfCommand                        ; $a7 IF
>8de4		11 8d					.word	Unused1                          ; $a8 PROC
>8de6		13 8c					.word	Command_REPEAT                   ; $a9 REPEAT
>8de8		50 90					.word	Command_WHILE                    ; $aa WHILE
>8dea		4d 87					.word	EndIf                            ; $ab ENDIF
>8dec		9b 8b					.word	Command_ENDPROC                  ; $ac ENDPROC
>8dee		93 86					.word	NextCommand                      ; $ad NEXT
>8df0		11 8d					.word	Unused4                          ; $ae THEN
>8df2		1c 8c					.word	Command_UNTIL                    ; $af UNTIL
>8df4		71 90					.word	Command_WEND                     ; $b0 WEND
>8df6		61 a1					.word	SyntaxError                      ; $b1 BY
>8df8		84 84					.word	CallCommand                      ; $b2 CALL
>8dfa		3c a3					.word	CircleCommand                    ; $b3 CIRCLE
>8dfc		b9 84					.word	ClearCommand                     ; $b4 CLEAR
>8dfe		11 85					.word	ClearScreen                      ; $b5 CLS
>8e00		61 a1					.word	SyntaxError                      ; $b6 COLOR
>8e02		61 a1					.word	SyntaxError                      ; $b7 COLOUR
>8e04		19 85					.word	Command_Data                     ; $b8 DATA
>8e06		21 85					.word	DimCommand                       ; $b9 DIM
>8e08		11 8d					.word	Unused3                          ; $ba DOWNTO
>8e0a		46 87					.word	ElseCode                         ; $bb ELSE
>8e0c		61 a1					.word	SyntaxError                      ; $bc FROM
>8e0e		5b a5					.word	GfxCommand                       ; $bd GFX
>8e10		ec 86					.word	Command_GOSUB                    ; $be GOSUB
>8e12		0a 87					.word	GotoCommand                      ; $bf GOTO
>8e14		61 a1					.word	SyntaxError                      ; $c0 HERE
>8e16		65 a3					.word	ImageCommand                     ; $c1 IMAGE
>8e18		4e 87					.word	Command_Input                    ; $c2 INPUT
>8e1a		39 88					.word	LetCommand                       ; $c3 LET
>8e1c		b7 a3					.word	LineCommand                      ; $c4 LINE
>8e1e		2f 8a					.word	Command_LOCAL                    ; $c5 LOCAL
>8e20		61 a1					.word	SyntaxError                      ; $c6 OFF
>8e22		61 a1					.word	SyntaxError                      ; $c7 ON
>8e24		61 a1					.word	SyntaxError                      ; $c8 OUTLINE
>8e26		ac a5					.word	PaletteCommand                   ; $c9 PALETTE
>8e28		b0 a3					.word	PlotCommand                      ; $ca PLOT
>8e2a		00 8b					.word	PokeBCommand                     ; $cb POKE
>8e2c		0c 8b					.word	PokeDCommand                     ; $cc POKED
>8e2e		08 8b					.word	PokeLCommand                     ; $cd POKEL
>8e30		04 8b					.word	PokeWCommand                     ; $ce POKEW
>8e32		55 87					.word	Command_Print                    ; $cf PRINT
>8e34		a9 8b					.word	Command_Read                     ; $d0 READ
>8e36		38 a3					.word	RectangleCommand                 ; $d1 RECT
>8e38		06 8c					.word	RemCommand                       ; $d2 REM
>8e3a		fc 86					.word	Command_RETURN                   ; $d3 RETURN
>8e3c		61 a1					.word	SyntaxError                      ; $d4 SOLID
>8e3e		55 b0					.word	SoundCommand                     ; $d5 SOUND
>8e40		47 a3					.word	SpriteCommand                    ; $d6 SPRITE
>8e42		81 a3					.word	TextCommand                      ; $d7 TEXT
>8e44		11 8d					.word	Unused2                          ; $d8 TO
.8e46						VectorSet1:
>8e46		61 a1					.word	SyntaxError                      ; $80 !0:EOF
>8e48		61 a1					.word	SyntaxError                      ; $81 !1:SH1
>8e4a		61 a1					.word	SyntaxError                      ; $82 !2:SH2
>8e4c		58 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8e4e		74 84					.word	AssertCommand                    ; $84 ASSERT
>8e50		fb a4					.word	BitmapCtrl                       ; $85 BITMAP
>8e52		de 85					.word	EndCommand                       ; $86 END
>8e54		0d b0					.word	Explode                          ; $87 EXPLODE
>8e56		61 a1					.word	SyntaxError                      ; $88 GO
>8e58		89 88					.word	Command_List                     ; $89 LIST
>8e5a		8f 89					.word	Command_Load                     ; $8a LOAD
>8e5c		f0 8a					.word	NewCommand                       ; $8b NEW
>8e5e		e9 af					.word	PingCommand                      ; $8c PING
>8e60		35 8c					.word	Command_Restore                  ; $8d RESTORE
>8e62		74 8c					.word	CommandRUN                       ; $8e RUN
>8e64		00 8f					.word	Command_Save                     ; $8f SAVE
>8e66		61 a1					.word	SyntaxError                      ; $90 SETDATE
>8e68		61 a1					.word	SyntaxError                      ; $91 SETTIME
>8e6a		01 b0					.word	ShootCommand                     ; $92 SHOOT
>8e6c		40 a5					.word	SpritesCtrl                      ; $93 SPRITES
>8e6e		83 8f					.word	StopCommand                      ; $94 STOP
>8e70		14 b2					.word	Command_VERIFY                   ; $95 VERIFY
>8e72		f5 a5					.word	XGoCommand                       ; $96 XGO
>8e74		ec a5					.word	XLoadCommand                     ; $97 XLOAD
>8e76		f5 af					.word	ZapCommand                       ; $98 ZAP
.8e78						VectorSet2:
>8e78		61 a1					.word	SyntaxError                      ; $80 !0:EOF
>8e7a		61 a1					.word	SyntaxError                      ; $81 !1:SH1
>8e7c		61 a1					.word	SyntaxError                      ; $82 !2:SH2
>8e7e		20 a0					.word	Assemble_adc                     ; $83 ADC
>8e80		18 a0					.word	Assemble_and                     ; $84 AND
>8e82		34 a0					.word	Assemble_asl                     ; $85 ASL
>8e84		9e a0					.word	Assemble_bcc                     ; $86 BCC
>8e86		a2 a0					.word	Assemble_bcs                     ; $87 BCS
>8e88		aa a0					.word	Assemble_beq                     ; $88 BEQ
>8e8a		61 a0					.word	Assemble_bit                     ; $89 BIT
>8e8c		92 a0					.word	Assemble_bmi                     ; $8a BMI
>8e8e		a6 a0					.word	Assemble_bne                     ; $8b BNE
>8e90		8e a0					.word	Assemble_bpl                     ; $8c BPL
>8e92		ae a0					.word	Assemble_bra                     ; $8d BRA
>8e94		b2 a0					.word	Assemble_brk                     ; $8e BRK
>8e96		96 a0					.word	Assemble_bvc                     ; $8f BVC
>8e98		9a a0					.word	Assemble_bvs                     ; $90 BVS
>8e9a		ba a0					.word	Assemble_clc                     ; $91 CLC
>8e9c		0e a1					.word	Assemble_cld                     ; $92 CLD
>8e9e		ce a0					.word	Assemble_cli                     ; $93 CLI
>8ea0		fe a0					.word	Assemble_clv                     ; $94 CLV
>8ea2		2c a0					.word	Assemble_cmp                     ; $95 CMP
>8ea4		75 a0					.word	Assemble_cpx                     ; $96 CPX
>8ea6		70 a0					.word	Assemble_cpy                     ; $97 CPY
>8ea8		52 a0					.word	Assemble_dec                     ; $98 DEC
>8eaa		0a a1					.word	Assemble_dex                     ; $99 DEX
>8eac		e6 a0					.word	Assemble_dey                     ; $9a DEY
>8eae		1c a0					.word	Assemble_eor                     ; $9b EOR
>8eb0		57 a0					.word	Assemble_inc                     ; $9c INC
>8eb2		1a a1					.word	Assemble_inx                     ; $9d INX
>8eb4		06 a1					.word	Assemble_iny                     ; $9e INY
>8eb6		89 a0					.word	Assemble_jmp                     ; $9f JMP
>8eb8		84 a0					.word	Assemble_jsr                     ; $a0 JSR
>8eba		28 a0					.word	Assemble_lda                     ; $a1 LDA
>8ebc		4d a0					.word	Assemble_ldx                     ; $a2 LDX
>8ebe		6b a0					.word	Assemble_ldy                     ; $a3 LDY
>8ec0		3e a0					.word	Assemble_lsr                     ; $a4 LSR
>8ec2		1e a1					.word	Assemble_nop                     ; $a5 NOP
>8ec4		14 a0					.word	Assemble_ora                     ; $a6 ORA
>8ec6		ca a0					.word	Assemble_pha                     ; $a7 PHA
>8ec8		b6 a0					.word	Assemble_php                     ; $a8 PHP
>8eca		12 a1					.word	Assemble_phx                     ; $a9 PHX
>8ecc		d2 a0					.word	Assemble_phy                     ; $aa PHY
>8ece		da a0					.word	Assemble_pla                     ; $ab PLA
>8ed0		be a0					.word	Assemble_plp                     ; $ac PLP
>8ed2		26 a1					.word	Assemble_plx                     ; $ad PLX
>8ed4		e2 a0					.word	Assemble_ply                     ; $ae PLY
>8ed6		39 a0					.word	Assemble_rol                     ; $af ROL
>8ed8		43 a0					.word	Assemble_ror                     ; $b0 ROR
>8eda		c6 a0					.word	Assemble_rti                     ; $b1 RTI
>8edc		d6 a0					.word	Assemble_rts                     ; $b2 RTS
>8ede		30 a0					.word	Assemble_sbc                     ; $b3 SBC
>8ee0		c2 a0					.word	Assemble_sec                     ; $b4 SEC
>8ee2		22 a1					.word	Assemble_sed                     ; $b5 SED
>8ee4		de a0					.word	Assemble_sei                     ; $b6 SEI
>8ee6		24 a0					.word	Assemble_sta                     ; $b7 STA
>8ee8		16 a1					.word	Assemble_stp                     ; $b8 STP
>8eea		48 a0					.word	Assemble_stx                     ; $b9 STX
>8eec		66 a0					.word	Assemble_sty                     ; $ba STY
>8eee		5c a0					.word	Assemble_stz                     ; $bb STZ
>8ef0		fa a0					.word	Assemble_tax                     ; $bc TAX
>8ef2		f6 a0					.word	Assemble_tay                     ; $bd TAY
>8ef4		7f a0					.word	Assemble_trb                     ; $be TRB
>8ef6		7a a0					.word	Assemble_tsb                     ; $bf TSB
>8ef8		02 a1					.word	Assemble_tsx                     ; $c0 TSX
>8efa		ea a0					.word	Assemble_txa                     ; $c1 TXA
>8efc		f2 a0					.word	Assemble_txs                     ; $c2 TXS
>8efe		ee a0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.8f00						Command_Save:
.8f00		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; file name to load
.8f03		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8f05		a5 36		lda $36				lda 	zTemp0
.8f07		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.8f0a		b0 4f		bcs $8f5b			bcs 	_CSErrorHandler 			; error, so fail.
.8f0c		8d 5d 06	sta $065d			sta 	CurrentFileStream 			; save the reading stream.
.8f0f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f11		85 30		sta $30				sta 	codePtr
.8f13		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f15		85 31		sta $31				sta 	codePtr+1
.8f17						_CSLoop:
.8f17		b2 30		lda ($30)			lda 	(codePtr)
.8f19		f0 37		beq $8f52			beq 	_CSExit
.8f1b		20 5e 8f	jsr $8f5e			jsr 	CSGetCleanLine
.8f1e		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8f20		85 36		sta $36				sta 	zTemp0
.8f22		e0 41		cpx #$41			cpx 	#64+1 						; <= 64 bytes to wite
.8f24		90 19		bcc $8f3f			bcc 	_CSWrite1
.8f26		da		phx				phx
.8f27		a2 40		ldx #$40			ldx 	#64 						; write first 64.
.8f29		ad 5d 06	lda $065d			lda 	CurrentFileStream 			; stream to write, count already in X
.8f2c		20 67 80	jsr $8067			jsr 	KNLWriteBlock
.8f2f		68		pla				pla 								; calculate second lot of bytes outout.
.8f30		38		sec				sec
.8f31		e9 40		sbc #$40			sbc 	#64
.8f33		aa		tax				tax
.8f34		18		clc				clc 								; point to second part to write.
.8f35		a5 36		lda $36				lda 	zTemp0
.8f37		69 40		adc #$40			adc 	#64
.8f39		85 36		sta $36				sta 	zTemp0
.8f3b		90 02		bcc $8f3f			bcc 	_CSWrite1
.8f3d		e6 37		inc $37				inc 	zTemp0+1
.8f3f						_CSWrite1:
.8f3f		ad 5d 06	lda $065d			lda 	CurrentFileStream 			; stream to write, count already in X
.8f42		20 67 80	jsr $8067			jsr 	KNLWriteBlock 				; write it out.
.8f45		18		clc				clc
.8f46		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f48		65 30		adc $30				adc 	codePtr
.8f4a		85 30		sta $30				sta 	codePtr
.8f4c		90 02		bcc $8f50			bcc 	_CREExit
.8f4e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f50						_CREExit:
.8f50		80 c5		bra $8f17			bra 	_CSLoop
.8f52						_CSExit:
.8f52		ad 5d 06	lda $065d			lda 	CurrentFileStream 			; close file
.8f55		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8f58		4c c2 89	jmp $89c2			jmp 	CLComplete 					; display complete message.
.8f5b						_CSErrorHandler:
.8f5b		4c df 89	jmp $89df			jmp 	CLErrorHandler
.8f5e						CSGetCleanLine:
.8f5e		a9 00		lda #$00			lda 	#0 							; no indent.
.8f60		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.8f63		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8f65		a0 00		ldy #$00			ldy 	#0
.8f67						_CSClean:
.8f67		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.8f6a		f0 09		beq $8f75			beq 	_CSDoneClean
.8f6c		30 04		bmi $8f72			bmi 	_CSIgnoreCharacter
.8f6e		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8f71		e8		inx				inx
.8f72						_CSIgnoreCharacter:
.8f72		c8		iny				iny
.8f73		80 f2		bra $8f67			bra 	_CSClean
.8f75						_CSDoneClean:
.8f75		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8f77		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8f7a		e8		inx				inx
.8f7b		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.8f7e		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8f80		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.8f82		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8f83						StopCommand:
.8f83		a9 08		lda #$08		lda	#8
.8f85		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8f88						ProcedureScan:
.8f88		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f8a		85 30		sta $30				sta 	codePtr
.8f8c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f8e		85 31		sta $31				sta 	codePtr+1
.8f90						_PSLoop:
.8f90		b2 30		lda ($30)			lda 	(codePtr)
.8f92		f0 42		beq $8fd6			beq 	_PSExit
.8f94		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8f96		b1 30		lda ($30),y			lda 	(codePtr),y
.8f98		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8f9a		d0 2d		bne $8fc9			bne 	_PSNext
.8f9c		c8		iny				iny 								; get the address of the record to zTemp0 and
.8f9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f9f		29 c0		and #$c0			and 	#$C0
.8fa1		c9 40		cmp #$40			cmp 	#$40
.8fa3		d0 32		bne $8fd7			bne 	_PSSyntax
.8fa5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa7		18		clc				clc
.8fa8		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8faa		85 37		sta $37				sta 	zTemp0+1
.8fac		c8		iny				iny 								; LSB
.8fad		b1 30		lda ($30),y			lda 	(codePtr),y
.8faf		85 36		sta $36				sta 	zTemp0
.8fb1		c8		iny				iny 								; character after variable call.
.8fb2		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8fb3		a0 07		ldy #$07			ldy 	#7
.8fb5		91 36		sta ($36),y			sta 	(zTemp0),y
.8fb7		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8fb9		a0 02		ldy #$02			ldy 	#2
.8fbb		91 36		sta ($36),y			sta 	(zTemp0),y
.8fbd		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8fbf						_PSCopy:
.8fbf		b5 30		lda $30,x			lda 	safePtr,x
.8fc1		c8		iny				iny
.8fc2		91 36		sta ($36),y			sta 	(zTemp0),y
.8fc4		e8		inx				inx
.8fc5		e0 04		cpx #$04			cpx 	#4
.8fc7		d0 f6		bne $8fbf			bne 	_PSCopy
.8fc9						_PSNext:
.8fc9		18		clc				clc
.8fca		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fcc		65 30		adc $30				adc 	codePtr
.8fce		85 30		sta $30				sta 	codePtr
.8fd0		90 02		bcc $8fd4			bcc 	_CREExit
.8fd2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fd4						_CREExit:
.8fd4		80 ba		bra $8f90			bra 	_PSLoop
.8fd6						_PSExit:
.8fd6		60		rts				rts
.8fd7						_PSSyntax:
.8fd7		4c 61 a1	jmp $a161			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8fda						ScanForward:
.8fda		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8fdc		86 37		stx $37				stx 	zTemp0+1
.8fde		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8fe0						_ScanLoop:
.8fe0		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe2		c8		iny				iny
.8fe3		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8fe5		d0 0e		bne $8ff5			bne 	_ScanGoNext
.8fe7		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8fe9		f0 04		beq $8fef			beq 	_ScanMatch
.8feb		c5 37		cmp $37				cmp 	zTemp0+1
.8fed		d0 06		bne $8ff5			bne 	_ScanGoNext
.8fef						_ScanMatch:
.8fef		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8ff1		d0 01		bne $8ff4			bne 	_ScanNotEndEOL
.8ff3		88		dey				dey
.8ff4						_ScanNotEndEOL:
.8ff4		60		rts				rts
.8ff5						_ScanGoNext:
.8ff5		20 fa 8f	jsr $8ffa			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8ff8		80 e6		bra $8fe0			bra 	_ScanLoop
.8ffa						ScanForwardOne:
.8ffa		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8ffc		90 3e		bcc $903c			bcc 	_SFWExit
.8ffe		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9000		90 18		bcc $901a			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9002		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9004		b0 2f		bcs $9035			bcs 	_ScanSkipData
.9006		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9008		90 32		bcc $903c			bcc 	_SFWExit 					; if not, ordinary keywords.
.900a		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.900c		b0 2e		bcs $903c			bcs 	_SFWExit
.900e		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9010		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9012		b0 28		bcs $903c			bcs 	_SFWExit
.9014		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9016		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9018		80 22		bra $903c			bra 	_SFWExit
.901a						_ScanSkipOne:
.901a		c8		iny				iny 								; consume the extra one.
.901b		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.901d		d0 1d		bne $903c			bne 	_SFWExit
.901f		18		clc				clc
.9020		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9022		65 30		adc $30				adc 	codePtr
.9024		85 30		sta $30				sta 	codePtr
.9026		90 02		bcc $902a			bcc 	_CREExit
.9028		e6 31		inc $31				inc 	codePtr+1 					; carry
.902a						_CREExit:
.902a		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.902c		b2 30		lda ($30)			lda 	(codePtr)
.902e		d0 0c		bne $903c			bne 	_SFWExit 					; if not zero, more to scan
.9030		a9 13		lda #$13		lda	#19
.9032		4c 98 90	jmp $9098		jmp	ErrorHandler
.9035						_ScanSkipData:
.9035		88		dey				dey 								; point at data token
.9036		c8		iny				iny 								; point to offset
.9037		98		tya				tya 								; A = offset position
.9038		38		sec				sec 								; add size +1 hence SEC
.9039		71 30		adc ($30),y			adc 	(codePtr),y
.903b		a8		tay				tay 								; make current position.
.903c						_SFWExit:
.903c		60		rts				rts
.903d						ScanGetCurrentLineStep:
.903d		64 38		stz $38				stz 	zTemp1
.903f		a0 03		ldy #$03			ldy 	#3
.9041						_SGCLSLoop:
.9041		b1 30		lda ($30),y			lda 	(codePtr),y
.9043		c8		iny				iny
.9044		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9046		f0 05		beq $904d			beq 	_SGCLSExit
.9048		20 fa 8f	jsr $8ffa			jsr 	ScanForwardOne
.904b		80 f4		bra $9041			bra 	_SGCLSLoop
.904d						_SGCLSExit:
.904d		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.904f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9050						Command_WHILE:
.9050		5a		phy				phy 								; save position of the test
.9051		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9053		20 31 9f	jsr $9f31			jsr 	EvaluateNumber
.9056		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; check if zero
.9059		f0 0e		beq $9069			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.905b		98		tya				tya 								; position *after* test.
.905c		7a		ply				ply 								; restore position before test, at WHILE
.905d		88		dey				dey 								; so we execute the WHILE command again.
.905e		48		pha				pha 								; push after test on the stack
.905f		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9061		20 dc b0	jsr $b0dc			jsr 	StackOpen
.9064		20 21 b1	jsr $b121			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9067		7a		ply				ply 								; restore the position *after* the test
.9068		60		rts				rts
.9069						_WHExitLoop:
.9069		68		pla				pla 								; throw post loop position
.906a		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.906c		aa		tax				tax
.906d		20 da 8f	jsr $8fda			jsr 	ScanForward
.9070		60		rts				rts
.9071						Command_WEND:
.9071		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9073		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9075		20 09 b1	jsr $b109			jsr 	StackCheckFrame
.9078		20 32 b1	jsr $b132			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.907b		20 fb b0	jsr $b0fb			jsr 	StackClose		 			; erase the frame
.907e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.907f						CheckRightBracket:
.907f		b1 30		lda ($30),y			lda 	(codePtr),y
.9081		c8		iny				iny
.9082		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9084		d0 0f		bne $9095			bne 	CNAFail
.9086		60		rts				rts
.9087						CheckComma:
.9087		b1 30		lda ($30),y			lda 	(codePtr),y
.9089		c8		iny				iny
.908a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.908c		d0 07		bne $9095			bne 	CNAFail
.908e		60		rts				rts
.908f						CheckNextA:
.908f		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9091		d0 02		bne $9095			bne 	CNAFail
.9093		c8		iny				iny 								; skip character
.9094		60		rts				rts 								; and exit
.9095						CNAFail:
.9095		4c 61 a1	jmp $a161			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9098						ErrorHandler:
.9098		a8		tay				tay 								; find the error text
.9099		f0 49		beq $90e4			beq 	_EHEnd
.909b		a2 00		ldx #$00			ldx 	#0
.909d		a9 7a		lda #$7a			lda 	#((ErrorText) & $FF)
.909f		85 36		sta $36				sta 	0+zTemp0
.90a1		a9 a1		lda #$a1			lda 	#((ErrorText) >> 8)
.90a3		85 37		sta $37				sta 	1+zTemp0
.90a5						_EHFind:
.90a5		88		dey				dey 								; keep looking through text
.90a6		f0 0e		beq $90b6			beq 	_EHFound
.90a8						_EHFindZero:
.90a8		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.90aa		e6 36		inc $36				inc 	zTemp0
.90ac		d0 02		bne $90b0			bne 	_EHFNoCarry
.90ae		e6 37		inc $37				inc 	zTemp0+1
.90b0						_EHFNoCarry:
.90b0		c9 00		cmp #$00			cmp 	#0
.90b2		d0 f4		bne $90a8			bne 	_EHFindZero
.90b4		80 ef		bra $90a5			bra 	_EHFind
.90b6						_EHFound:
.90b6		a5 36		lda $36				lda 	zTemp0 						; print message
.90b8		a6 37		ldx $37				ldx 	zTemp0+1
.90ba		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.90bd		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.90bf		b1 30		lda ($30),y			lda 	(codePtr),y
.90c1		d0 05		bne $90c8			bne 	_EHAtMsg
.90c3		c8		iny				iny
.90c4		b1 30		lda ($30),y			lda 	(codePtr),y
.90c6		f0 17		beq $90df			beq 	_EHCREnd
.90c8						_EHAtMsg:
.90c8		a2 90		ldx #$90			ldx 	#_AtMsg >> 8 				; print " at "
.90ca		a9 e7		lda #$e7			lda 	#_AtMsg & $FF
.90cc		20 f1 90	jsr $90f1			jsr 	PrintStringXA
.90cf		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.90d1		b1 30		lda ($30),y			lda 	(codePtr),y
.90d3		48		pha				pha
.90d4		c8		iny				iny
.90d5		b1 30		lda ($30),y			lda 	(codePtr),y
.90d7		aa		tax				tax
.90d8		68		pla				pla
.90d9		20 07 95	jsr $9507			jsr 	ConvertInt16 				; convert XA to string
.90dc		20 f1 90	jsr $90f1			jsr 	PrintStringXA 				; and print it.
.90df						_EHCREnd:
.90df		a9 0d		lda #$0d			lda 	#13 						; new line
.90e1		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.90e4						_EHEnd:
.90e4		4c 23 84	jmp $8423			jmp 	WarmStart
>90e7		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>90ef		20 00
.90f1						PrintStringXA:
.90f1		5a		phy				phy
.90f2		86 37		stx $37				stx 	zTemp0+1
.90f4		85 36		sta $36				sta 	zTemp0
.90f6		a0 00		ldy #$00			ldy 	#0
.90f8						_PSXALoop:
.90f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.90fa		f0 06		beq $9102			beq 	_PSXAExit
.90fc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.90ff		c8		iny				iny
.9100		80 f6		bra $90f8			bra 	_PSXALoop
.9102						_PSXAExit:
.9102		7a		ply				ply
.9103		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9104						UnaryTrue:
.9104		fa		plx				plx
.9105						ReturnTrue:
.9105		a9 01		lda #$01			lda 	#1  						; set to 1
.9107		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.910a		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.910c		95 50		sta $50,x			sta 	NSStatus,x
.910e		60		rts				rts
.910f						UnaryFalse:
.910f		fa		plx				plx
.9110						ReturnFalse:
.9110		4c e3 9f	jmp $9fe3			jmp 	NSMSetZero 					; set it all to zero
.9113						BinaryCompareEqual:
.9113		fa		plx				plx
.9114		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.9117		c9 00		cmp #$00			cmp 	#0
.9119		f0 ea		beq $9105			beq 	ReturnTrue
.911b		80 f3		bra $9110			bra 	ReturnFalse
.911d						BinaryCompareLess:
.911d		fa		plx				plx
.911e		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.9121		c9 ff		cmp #$ff			cmp 	#$FF
.9123		f0 e0		beq $9105			beq 	ReturnTrue
.9125		80 e9		bra $9110			bra 	ReturnFalse
.9127						BinaryCompareGreater:
.9127		fa		plx				plx
.9128		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.912b		c9 01		cmp #$01			cmp 	#1
.912d		f0 d6		beq $9105			beq 	ReturnTrue
.912f		80 df		bra $9110			bra 	ReturnFalse
.9131						BinaryCompareNotEqual:
.9131		fa		plx				plx
.9132		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.9135		c9 00		cmp #$00			cmp 	#0
.9137		d0 cc		bne $9105			bne 	ReturnTrue
.9139		80 d5		bra $9110			bra 	ReturnFalse
.913b						BinaryCompareLessEqual:
.913b		fa		plx				plx
.913c		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.913f		c9 01		cmp #$01			cmp 	#1
.9141		d0 c2		bne $9105			bne 	ReturnTrue
.9143		80 cb		bra $9110			bra 	ReturnFalse
.9145						BinaryCompareGreaterEqual:
.9145		fa		plx				plx
.9146		20 4f 91	jsr $914f			jsr 	CompareBaseCode
.9149		c9 ff		cmp #$ff			cmp 	#$FF
.914b		d0 b8		bne $9105			bne 	ReturnTrue
.914d		80 c1		bra $9110			bra 	ReturnFalse
.914f						CompareBaseCode:
.914f		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; make both values if references.
.9152		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9154		15 51		ora $51,x			ora 	NSStatus+1,x
.9156		29 10		and #$10			and 	#NSTString
.9158		d0 37		bne $9191			bne 	_CBCString 					; if so do string code, which will check if both.
.915a		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.915c		15 79		ora $79,x			ora 	NSExponent+1,x
.915e		d0 34		bne $9194			bne 	_CBCFloat
.9160		b5 50		lda $50,x			lda 	NSStatus,x
.9162		15 51		ora $51,x			ora 	NSStatus+1,x
.9164		29 08		and #$08			and 	#NSTFloat
.9166		d0 2c		bne $9194			bne 	_CBCFloat
.9168		20 97 91	jsr $9197			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.916b		e8		inx				inx
.916c		20 97 91	jsr $9197			jsr 	CompareFixMinusZero
.916f		ca		dex				dex
.9170		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9172		55 51		eor $51,x			eor 	NSStatus+1,x
.9174		10 0a		bpl $9180			bpl 	_CDCSameSign
.9176		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9178		30 14		bmi $918e			bmi 	_CBCLess 					; return $FF
.917a						_CBCGreater:
.917a		a9 01		lda #$01			lda 	#1
.917c		60		rts				rts
.917d						_CBCEqual:
.917d		a9 00		lda #$00			lda 	#0
.917f		60		rts				rts
.9180						_CDCSameSign:
.9180		20 ac 93	jsr $93ac			jsr 	SubTopTwoStack 				; unsigned subtract
.9183		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; or the mantissa together
.9186		f0 f5		beq $917d			beq 	_CBCEqual 					; -0 == 0
.9188		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.918a		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.918c		10 ec		bpl $917a			bpl 	_CBCGreater
.918e						_CBCLess:
.918e		a9 ff		lda #$ff			lda 	#$FF
.9190		60		rts				rts
.9191						_CBCString:
.9191		4c 1d 93	jmp $931d			jmp 	CompareStrings
.9194						_CBCFloat:
.9194		4c 67 96	jmp $9667			jmp 	CompareFloat
.9197						CompareFixMinusZero:
.9197		20 05 a0	jsr $a005			jsr 	NSMIsZero
.919a		d0 02		bne $919e			bne 	_CFXMZNotZero
.919c		74 50		stz $50,x			stz 	NSStatus,x
.919e						_CFXMZNotZero:
.919e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.919f						StringConcat:
.919f		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.91a1		35 51		and $51,x			and 	NSStatus+1,x
.91a3		29 18		and #$18			and 	#NSBTypeMask
.91a5		c9 10		cmp #$10			cmp 	#NSTString
.91a7		d0 50		bne $91f9			bne		_SCType
.91a9		64 38		stz $38				stz 	zTemp1 						; counting total length
.91ab		e8		inx				inx
.91ac		20 ca 91	jsr $91ca			jsr 	_SCSetupZ0 					; setup for second
.91af		20 d3 91	jsr $91d3			jsr 	_SCLengthZ0 				; length for second
.91b2		ca		dex				dex
.91b3		20 ca 91	jsr $91ca			jsr 	_SCSetupZ0 					; setup for first
.91b6		20 d3 91	jsr $91d3			jsr 	_SCLengthZ0 				; length for first
.91b9		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.91bb		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate
.91be		20 ea 91	jsr $91ea			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.91c1		e8		inx				inx
.91c2		20 ca 91	jsr $91ca			jsr 	_SCSetupZ0 					; copy second out
.91c5		20 ea 91	jsr $91ea			jsr 	_SCCopy
.91c8		ca		dex				dex
.91c9		60		rts				rts
.91ca						_SCSetupZ0:
.91ca		b5 58		lda $58,x			lda 	NSMantissa0,x
.91cc		85 36		sta $36				sta 	zTemp0
.91ce		b5 60		lda $60,x			lda 	NSMantissa1,x
.91d0		85 37		sta $37				sta 	zTemp0+1
.91d2		60		rts				rts
.91d3						_SCLengthZ0:
.91d3		5a		phy				phy
.91d4		a0 00		ldy #$00			ldy 	#0
.91d6						_SCLenLoop:
.91d6		b1 36		lda ($36),y			lda 	(zTemp0),y
.91d8		f0 0e		beq $91e8			beq 	_SCLExit
.91da		c8		iny				iny
.91db		e6 38		inc $38				inc 	zTemp1
.91dd		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.91df		c9 fd		cmp #$fd			cmp 	#253
.91e1		d0 f3		bne $91d6			bne		_SCLenLoop
.91e3		a9 09		lda #$09		lda	#9
.91e5		4c 98 90	jmp $9098		jmp	ErrorHandler
.91e8						_SCLExit:
.91e8		7a		ply				ply
.91e9		60		rts				rts
.91ea						_SCCopy:
.91ea		5a		phy				phy
.91eb		a0 00		ldy #$00			ldy 	#0
.91ed						_SCCopyLoop:
.91ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.91ef		f0 06		beq $91f7			beq 	_SCCExit
.91f1		20 05 b2	jsr $b205			jsr 	StringTempWrite
.91f4		c8		iny				iny
.91f5		80 f6		bra $91ed			bra 	_SCCopyLoop
.91f7						_SCCExit:
.91f7		7a		ply				ply
.91f8		60		rts				rts
.91f9						_SCType:
.91f9		4c 6b a1	jmp $a16b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.91fc						IntegerDivide:
.91fc		fa		plx				plx
.91fd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91ff		15 51		ora $51,x			ora 	NSStatus+1,x
.9201		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9202		0a		asl a				asl 	a
.9203		10 05		bpl $920a			bpl 	_NotRef
.9205		48		pha				pha
.9206		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9209		68		pla				pla
.920a						_NotRef:
.920a		0a		asl a				asl 	a
.920b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.920d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.920f		15 79		ora $79,x			ora 	NSExponent+1,x
.9211		f0 03		beq $9216			beq 	_IntegerCode 				; if clear, then we have two integers
.9213		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.9216						_IntegerCode:
.9216		20 30 92	jsr $9230			jsr 	CheckDivideZero 			; do div zero check
.9219		20 62 92	jsr $9262			jsr 	Int32Divide 				; do the division
.921c		20 13 93	jsr $9313			jsr 	CalculateSign 				; calculate result sign
.921f						NSMCopyPlusTwoToZero:
.921f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9221		95 58		sta $58,x			sta 	NSMantissa0,x
.9223		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9225		95 60		sta $60,x			sta 	NSMantissa1,x
.9227		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9229		95 68		sta $68,x			sta 	NSMantissa2,x
.922b		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.922d		95 70		sta $70,x			sta 	NSMantissa3,x
.922f		60		rts				rts
.9230						CheckDivideZero:
.9230		e8		inx				inx
.9231		20 05 a0	jsr $a005			jsr 	NSMIsZero
.9234		f0 02		beq $9238			beq 	_CDVError
.9236		ca		dex				dex
.9237		60		rts				rts
.9238						_CDVError:
.9238		a9 03		lda #$03		lda	#3
.923a		4c 98 90	jmp $9098		jmp	ErrorHandler
.923d						IntegerModulus:
.923d		fa		plx				plx
.923e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9240		15 51		ora $51,x			ora 	NSStatus+1,x
.9242		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9243		0a		asl a				asl 	a
.9244		10 05		bpl $924b			bpl 	_NotRef
.9246		48		pha				pha
.9247		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.924a		68		pla				pla
.924b						_NotRef:
.924b		0a		asl a				asl 	a
.924c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.924e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9250		15 79		ora $79,x			ora 	NSExponent+1,x
.9252		f0 03		beq $9257			beq 	_IntegerCode 				; if clear, then we have two integers
.9254		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.9257						_IntegerCode:
.9257						IntegerModulusNoCheck:
.9257		20 30 92	jsr $9230			jsr 	CheckDivideZero 			; do div zero check
.925a		20 62 92	jsr $9262			jsr 	Int32Divide 				; do the division
.925d		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.925f		56 50		lsr $50,x			lsr 	NSStatus,x
.9261		60		rts				rts
.9262						Int32Divide:
.9262		48		pha				pha 								; save AXY
.9263		5a		phy				phy
.9264		20 c6 9f	jsr $9fc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9267		20 df 9f	jsr $9fdf			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.926a		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.926c						_I32DivideLoop:
.926c		e8		inx				inx
.926d		e8		inx				inx
.926e		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9271		ca		dex				dex
.9272		ca		dex				dex
.9273		20 f3 9f	jsr $9ff3			jsr 	NSMRotateLeft
.9276		20 a1 92	jsr $92a1			jsr 	DivideCheckSubtract 		; check if subtract possible
.9279		90 02		bcc $927d			bcc 	_I32DivideNoCarryIn
.927b		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.927d						_I32DivideNoCarryIn:
.927d		88		dey				dey 								; loop round till division completed.
.927e		d0 ec		bne $926c			bne 	_I32DivideLoop
.9280		7a		ply				ply 								; restore AXY and exit
.9281		68		pla				pla
.9282		60		rts				rts
.9283						Int32ShiftDivide:
.9283		48		pha				pha 								; save AY
.9284		5a		phy				phy
.9285		e8		inx				inx 								; clear S[X+2]
.9286		e8		inx				inx
.9287		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.928a		ca		dex				dex
.928b		ca		dex				dex
.928c		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.928e						_I32SDLoop:
.928e		20 a1 92	jsr $92a1			jsr 	DivideCheckSubtract 		; check if subtract possible
.9291		e8		inx				inx
.9292		e8		inx				inx
.9293		20 f3 9f	jsr $9ff3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9296		ca		dex				dex
.9297		ca		dex				dex
.9298		20 f3 9f	jsr $9ff3			jsr 	NSMRotateLeft
.929b		88		dey				dey 	 							; do 31 times
.929c		d0 f0		bne $928e			bne 	_I32SDLoop
.929e		7a		ply				ply 								; restore AY and exit
.929f		68		pla				pla
.92a0		60		rts				rts
.92a1						DivideCheckSubtract:
.92a1		20 ac 93	jsr $93ac			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.92a4		b0 04		bcs $92aa			bcs 	_DCSExit 					; if carry set, then could do, exit
.92a6		20 92 93	jsr $9392			jsr 	AddTopTwoStack 				; add it back in
.92a9		18		clc				clc 								; and return False
.92aa						_DCSExit:
.92aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.92ab						MulInteger:
.92ab		fa		plx				plx
.92ac		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92ae		15 51		ora $51,x			ora 	NSStatus+1,x
.92b0		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92b1		0a		asl a				asl 	a
.92b2		10 05		bpl $92b9			bpl 	_NotRef
.92b4		48		pha				pha
.92b5		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b8		68		pla				pla
.92b9						_NotRef:
.92b9		0a		asl a				asl 	a 							; put MSB of type into A:7
.92ba		30 09		bmi $92c5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92bc		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92be		15 79		ora $79,x			ora 	NSExponent+1,x
.92c0		f0 06		beq $92c8			beq 	_IntegerCode 				; if clear, then we have two integers
.92c2		4c 29 97	jmp $9729			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.92c5						_StringData:
.92c5		4c 75 a1	jmp $a175			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92c8						_IntegerCode:
.92c8		20 d5 92	jsr $92d5			jsr 	MultiplyShort
.92cb		c9 00		cmp #$00			cmp 	#0
.92cd		f0 05		beq $92d4			beq 	_MIExit
.92cf		a9 04		lda #$04		lda	#4
.92d1		4c 98 90	jmp $9098		jmp	ErrorHandler
.92d4						_MIExit:
.92d4		60		rts				rts
.92d5						MultiplyShort:
.92d5		5a		phy				phy 								; save Y
.92d6		20 c6 9f	jsr $9fc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92d9		20 df 9f	jsr $9fdf			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.92dc		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.92de						_I32MLoop:
.92de		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.92e0		15 62		ora $62,x			ora 	NSMantissa1+2,x
.92e2		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.92e4		15 72		ora $72,x			ora 	NSMantissa3+2,x
.92e6		f0 25		beq $930d			beq 	_I32MExit 					; exit if zero
.92e8		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.92ea		29 01		and #$01			and 	#1
.92ec		f0 0d		beq $92fb			beq 	_I32MNoAdd
.92ee		20 92 93	jsr $9392			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.92f1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.92f3		10 06		bpl $92fb			bpl 	_I32MNoAdd
.92f5						_I32ShiftRight:
.92f5		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight 				; shift S[X] right
.92f8		c8		iny				iny 								; increment shift count
.92f9		80 09		bra $9304			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.92fb						_I32MNoAdd:
.92fb		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.92fd		70 f6		bvs $92f5			bvs 	_I32ShiftRight 				; instead.
.92ff		e8		inx				inx
.9300		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9303		ca		dex				dex
.9304						_I32MShiftUpper:
.9304		e8		inx				inx 								; shift S[X+2] right
.9305		e8		inx				inx
.9306		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight
.9309		ca		dex				dex
.930a		ca		dex				dex
.930b		80 d1		bra $92de			bra 	_I32MLoop 					; try again.
.930d						_I32MExit:
.930d		20 13 93	jsr $9313			jsr 	CalculateSign
.9310		98		tya				tya 								; shift in A
.9311		7a		ply				ply 								; restore Y and exit
.9312		60		rts				rts
.9313						CalculateSign:
.9313		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9315		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9317		55 51		eor $51,x			eor 	NSStatus+1,x
.9319		0a		asl a				asl 	a 							; shift bit 7 into carry
.931a		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.931c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.931d						CompareStrings:
.931d		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.931f		35 51		and $51,x			and 	NSStatus+1,x
.9321		29 10		and #$10			and 	#NSBIsString
.9323		f0 28		beq $934d			beq 	_CSTypeError
.9325		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9327		85 36		sta $36				sta 	zTemp0
.9329		b5 60		lda $60,x			lda 	NSMantissa1,x
.932b		85 37		sta $37				sta 	zTemp0+1
.932d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.932f		85 38		sta $38				sta 	zTemp1
.9331		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9333		85 39		sta $39				sta 	zTemp1+1
.9335		5a		phy				phy 								; save Y so we can access strings
.9336		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9338						_CSLoop:
.9338		c8		iny				iny
.9339		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.933b		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.933d		d0 06		bne $9345			bne 	_CSDifferent
.933f		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9341		d0 f5		bne $9338			bne 	_CSLoop 					; still comparing
.9343						_CSExit:
.9343		7a		ply				ply 								; reached end, return zero in A from EOS
.9344		60		rts				rts
.9345						_CSDifferent:
.9345		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9347		90 fa		bcc $9343			bcc		_CSExit
.9349		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.934b		80 f6		bra $9343			bra 	_CSExit
.934d						_CSTypeError:
.934d		4c 6b a1	jmp $a16b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9350						ShiftLeft:
.9350		38		sec				sec 								; common code, carry determines which way.
.9351		80 01		bra $9354			bra 	ShiftMain
.9353						ShiftRight:
.9353		18		clc				clc
.9354						ShiftMain:
.9354		fa		plx				plx 								; restore X
.9355		08		php				php 								; save direction
.9356		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9358		15 51		ora $51,x			ora 	NSStatus+1,x
.935a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.935b		0a		asl a				asl 	a
.935c		10 05		bpl $9363			bpl 	_NotRef
.935e		48		pha				pha
.935f		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9362		68		pla				pla
.9363						_NotRef:
.9363		0a		asl a				asl 	a
.9364		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9366		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9368		15 79		ora $79,x			ora 	NSExponent+1,x
.936a		f0 03		beq $936f			beq 	_IntegerCode 				; if clear, then we have two integers
.936c		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.936f						_IntegerCode:
.936f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9371		29 e0		and #$e0			and 	#$E0
.9373		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9375		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9377		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9379		d0 12		bne $938d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.937b						_SMLoop:
.937b		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.937d		30 11		bmi $9390			bmi 	_SMExit 					; exit if done.
.937f		28		plp				plp 								; restore direction setting
.9380		08		php				php
.9381		90 05		bcc $9388			bcc 	_SMRight
.9383		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; shift left if CS
.9386		80 f3		bra $937b			bra 	_SMLoop
.9388						_SMRight:
.9388		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight 				; shift right if CC
.938b		80 ee		bra $937b			bra 	_SMLoop
.938d						_SMExit0:
.938d		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; return zero.
.9390						_SMExit:
.9390		28		plp				plp 								; throw direction
.9391		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9392						AddTopTwoStack:
.9392		18		clc				clc
.9393		b5 58		lda $58,x			lda		NSMantissa0,x
.9395		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9397		95 58		sta $58,x			sta 	NSMantissa0,x
.9399		b5 60		lda $60,x			lda		NSMantissa1,x
.939b		75 61		adc $61,x			adc 		NSMantissa1+1,x
.939d		95 60		sta $60,x			sta 	NSMantissa1,x
.939f		b5 68		lda $68,x			lda		NSMantissa2,x
.93a1		75 69		adc $69,x			adc 		NSMantissa2+1,x
.93a3		95 68		sta $68,x			sta 	NSMantissa2,x
.93a5		b5 70		lda $70,x			lda		NSMantissa3,x
.93a7		75 71		adc $71,x			adc 		NSMantissa3+1,x
.93a9		95 70		sta $70,x			sta 	NSMantissa3,x
.93ab		60		rts				rts
.93ac						SubTopTwoStack:
.93ac		38		sec				sec
.93ad		b5 58		lda $58,x			lda		NSMantissa0,x
.93af		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.93b1		95 58		sta $58,x			sta 	NSMantissa0,x
.93b3		b5 60		lda $60,x			lda		NSMantissa1,x
.93b5		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.93b7		95 60		sta $60,x			sta 	NSMantissa1,x
.93b9		b5 68		lda $68,x			lda		NSMantissa2,x
.93bb		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.93bd		95 68		sta $68,x			sta 	NSMantissa2,x
.93bf		b5 70		lda $70,x			lda		NSMantissa3,x
.93c1		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.93c3		95 70		sta $70,x			sta 	NSMantissa3,x
.93c5		60		rts				rts
.93c6						AddInteger:
.93c6		fa		plx				plx
.93c7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93c9		15 51		ora $51,x			ora 	NSStatus+1,x
.93cb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93cc		0a		asl a				asl 	a
.93cd		10 05		bpl $93d4			bpl 	_NotRef
.93cf		48		pha				pha
.93d0		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93d3		68		pla				pla
.93d4						_NotRef:
.93d4		0a		asl a				asl 	a 							; put MSB of type into A:7
.93d5		30 09		bmi $93e0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93d7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93d9		15 79		ora $79,x			ora 	NSExponent+1,x
.93db		f0 06		beq $93e3			beq 	_IntegerCode 				; if clear, then we have two integers
.93dd		4c d9 95	jmp $95d9			jmp 	FloatingPointAdd 							; otherwise at least one float.
.93e0						_StringData:
.93e0		4c 9f 91	jmp $919f			jmp 	StringConcat							; at least one string - don't know both are strings.
.93e3						_IntegerCode:
.93e3						AddCode:
.93e3		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.93e5		55 51		eor $51,x			eor 	NSStatus+1,x
.93e7		10 a9		bpl $9392			bpl 	AddTopTwoStack
.93e9		20 ac 93	jsr $93ac			jsr 	SubTopTwoStack 				; do a physical subtraction
.93ec		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.93ee		10 07		bpl $93f7			bpl 	_AddExit
.93f0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.93f2		95 50		sta $50,x			sta 	NSStatus,x
.93f4		20 ac 9f	jsr $9fac			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.93f7						_AddExit:
.93f7		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; check for -0
.93fa		d0 02		bne $93fe			bne 	_AddNonZero
.93fc		74 50		stz $50,x			stz 	NSStatus,x
.93fe						_AddNonZero:
.93fe		60		rts				rts
.93ff						SubInteger:
.93ff		fa		plx				plx
.9400		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9402		15 51		ora $51,x			ora 	NSStatus+1,x
.9404		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9405		0a		asl a				asl 	a
.9406		10 05		bpl $940d			bpl 	_NotRef
.9408		48		pha				pha
.9409		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.940c		68		pla				pla
.940d						_NotRef:
.940d		0a		asl a				asl 	a 							; put MSB of type into A:7
.940e		30 09		bmi $9419			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9410		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9412		15 79		ora $79,x			ora 	NSExponent+1,x
.9414		f0 06		beq $941c			beq 	_IntegerCode 				; if clear, then we have two integers
.9416		4c de 95	jmp $95de			jmp 	FloatingPointSub 							; otherwise at least one float.
.9419						_StringData:
.9419		4c 75 a1	jmp $a175			jmp 	NotDoneError							; at least one string - don't know both are strings.
.941c						_IntegerCode:
.941c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.941e		49 80		eor #$80			eor 	#$80
.9420		95 51		sta $51,x			sta 	NSStatus+1,x
.9422		80 bf		bra $93e3			bra 	AddCode 					; and do the same code as add.
.9424						AndInteger:
.9424		fa		plx				plx
.9425		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9427		15 51		ora $51,x			ora 	NSStatus+1,x
.9429		0a		asl a				asl 	a 							; shift reference bit into sign bit
.942a		0a		asl a				asl 	a
.942b		10 05		bpl $9432			bpl 	_NotRef
.942d		48		pha				pha
.942e		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9431		68		pla				pla
.9432						_NotRef:
.9432		0a		asl a				asl 	a
.9433		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9435		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9437		15 79		ora $79,x			ora 	NSExponent+1,x
.9439		f0 03		beq $943e			beq 	_IntegerCode 				; if clear, then we have two integers
.943b		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.943e						_IntegerCode:
.943e		b5 58		lda $58,x			lda		NSMantissa0,x
.9440		35 59		and $59,x			and 		NSMantissa0+1,x
.9442		95 58		sta $58,x			sta 	NSMantissa0,x
.9444		b5 60		lda $60,x			lda		NSMantissa1,x
.9446		35 61		and $61,x			and 		NSMantissa1+1,x
.9448		95 60		sta $60,x			sta 	NSMantissa1,x
.944a		b5 68		lda $68,x			lda		NSMantissa2,x
.944c		35 69		and $69,x			and 		NSMantissa2+1,x
.944e		95 68		sta $68,x			sta 	NSMantissa2,x
.9450		b5 70		lda $70,x			lda		NSMantissa3,x
.9452		35 71		and $71,x			and 		NSMantissa3+1,x
.9454		95 70		sta $70,x			sta 	NSMantissa3,x
.9456		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9458		60		rts				rts
.9459						OraInteger:
.9459		fa		plx				plx
.945a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.945c		15 51		ora $51,x			ora 	NSStatus+1,x
.945e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.945f		0a		asl a				asl 	a
.9460		10 05		bpl $9467			bpl 	_NotRef
.9462		48		pha				pha
.9463		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9466		68		pla				pla
.9467						_NotRef:
.9467		0a		asl a				asl 	a
.9468		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.946a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.946c		15 79		ora $79,x			ora 	NSExponent+1,x
.946e		f0 03		beq $9473			beq 	_IntegerCode 				; if clear, then we have two integers
.9470		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.9473						_IntegerCode:
.9473		b5 58		lda $58,x			lda		NSMantissa0,x
.9475		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9477		95 58		sta $58,x			sta 	NSMantissa0,x
.9479		b5 60		lda $60,x			lda		NSMantissa1,x
.947b		15 61		ora $61,x			ora 		NSMantissa1+1,x
.947d		95 60		sta $60,x			sta 	NSMantissa1,x
.947f		b5 68		lda $68,x			lda		NSMantissa2,x
.9481		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9483		95 68		sta $68,x			sta 	NSMantissa2,x
.9485		b5 70		lda $70,x			lda		NSMantissa3,x
.9487		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9489		95 70		sta $70,x			sta 	NSMantissa3,x
.948b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.948d		60		rts				rts
.948e						EorInteger:
.948e		fa		plx				plx
.948f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9491		15 51		ora $51,x			ora 	NSStatus+1,x
.9493		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9494		0a		asl a				asl 	a
.9495		10 05		bpl $949c			bpl 	_NotRef
.9497		48		pha				pha
.9498		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.949b		68		pla				pla
.949c						_NotRef:
.949c		0a		asl a				asl 	a
.949d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.949f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a1		15 79		ora $79,x			ora 	NSExponent+1,x
.94a3		f0 03		beq $94a8			beq 	_IntegerCode 				; if clear, then we have two integers
.94a5		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.94a8						_IntegerCode:
.94a8		b5 58		lda $58,x			lda		NSMantissa0,x
.94aa		55 59		eor $59,x			eor 		NSMantissa0+1,x
.94ac		95 58		sta $58,x			sta 	NSMantissa0,x
.94ae		b5 60		lda $60,x			lda		NSMantissa1,x
.94b0		55 61		eor $61,x			eor 		NSMantissa1+1,x
.94b2		95 60		sta $60,x			sta 	NSMantissa1,x
.94b4		b5 68		lda $68,x			lda		NSMantissa2,x
.94b6		55 69		eor $69,x			eor 		NSMantissa2+1,x
.94b8		95 68		sta $68,x			sta 	NSMantissa2,x
.94ba		b5 70		lda $70,x			lda		NSMantissa3,x
.94bc		55 71		eor $71,x			eor 		NSMantissa3+1,x
.94be		95 70		sta $70,x			sta 	NSMantissa3,x
.94c0		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.94c2		60		rts				rts
.94c3						WordIndirect:
.94c3		fa		plx				plx
.94c4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94c6		15 51		ora $51,x			ora 	NSStatus+1,x
.94c8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94c9		0a		asl a				asl 	a
.94ca		10 05		bpl $94d1			bpl 	_NotRef
.94cc		48		pha				pha
.94cd		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94d0		68		pla				pla
.94d1						_NotRef:
.94d1		0a		asl a				asl 	a
.94d2		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94d4		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94d6		15 79		ora $79,x			ora 	NSExponent+1,x
.94d8		f0 03		beq $94dd			beq 	_IntegerCode 				; if clear, then we have two integers
.94da		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.94dd						_IntegerCode:
.94dd		20 e3 93	jsr $93e3			jsr 	AddCode 					; add the two values
.94e0		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.94e2		95 50		sta $50,x			sta 	NSStatus,x
.94e4		60		rts				rts
.94e5						ByteIndirect:
.94e5		fa		plx				plx
.94e6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94e8		15 51		ora $51,x			ora 	NSStatus+1,x
.94ea		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94eb		0a		asl a				asl 	a
.94ec		10 05		bpl $94f3			bpl 	_NotRef
.94ee		48		pha				pha
.94ef		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94f2		68		pla				pla
.94f3						_NotRef:
.94f3		0a		asl a				asl 	a
.94f4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94f6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94f8		15 79		ora $79,x			ora 	NSExponent+1,x
.94fa		f0 03		beq $94ff			beq 	_IntegerCode 				; if clear, then we have two integers
.94fc		4c 6b a1	jmp $a16b			jmp 	TypeError 					; anything else, type mismatch.
.94ff						_IntegerCode:
.94ff		20 e3 93	jsr $93e3			jsr 	AddCode 					; add the two values
.9502		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9504		95 50		sta $50,x			sta 	NSStatus,x
.9506		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9507						ConvertInt16:
.9507		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9509		86 60		stx $60				stx 	NSMantissa1
.950b		64 68		stz $68				stz 	NSMantissa2
.950d		64 70		stz $70				stz 	NSMantissa3
.950f		64 50		stz $50				stz 	NSStatus 					; positive integer
.9511		a2 00		ldx #$00			ldx 	#0 							; stack level
.9513		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9515		80 00		bra $9517			bra 	ConvertInt32
.9517						ConvertInt32:
.9517		5a		phy				phy
.9518		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.951a		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.951c		10 08		bpl $9526			bpl 	_CI32NotNeg
.951e		48		pha				pha
.951f		a9 2d		lda #$2d			lda 	#'-'
.9521		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9524		c8		iny				iny
.9525		68		pla				pla
.9526						_CI32NotNeg:
.9526		20 34 95	jsr $9534			jsr 	_CI32DivideConvert 			; recursive conversion
.9529		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.952b		99 27 06	sta $0627,y			sta 	numberBuffer,y
.952e		7a		ply				ply
.952f		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9531		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9533		60		rts				rts
.9534						_CI32DivideConvert:
.9534		e8		inx				inx 								; write to next slot up
.9535		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte 		 			; write the base out.
.9538		ca		dex				dex
.9539		20 62 92	jsr $9262			jsr 	Int32Divide 				; divide
.953c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.953e		48		pha				pha
.953f		20 1f 92	jsr $921f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9542		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; is it zero ?
.9545		f0 05		beq $954c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9547		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9549		20 34 95	jsr $9534			jsr 	_CI32DivideConvert 			; and recusrively call.
.954c						_CI32NoRecurse:
.954c		68		pla				pla 								; remainder
.954d		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.954f		90 02		bcc $9553			bcc 	_CI32NotHex
.9551		69 26		adc #$26			adc 	#6+32
.9553						_CI32NotHex:
.9553		69 30		adc #$30			adc 	#48
.9555		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9558		c8		iny				iny
.9559		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.955a						PrecedenceLevel:
>955a		04					.byte	 4	; $00 <<
>955b		02					.byte	 2	; $01 <=
>955c		02					.byte	 2	; $02 <>
>955d		00					.byte	 0	; $03 !!3
>955e		00					.byte	 0	; $04 ><
>955f		02					.byte	 2	; $05 >=
>9560		04					.byte	 4	; $06 >>
>9561		00					.byte	 0	; $07 !!7
>9562		00					.byte	 0	; $08 !!8
>9563		00					.byte	 0	; $09 !!9
>9564		00					.byte	 0	; $0a !!10
>9565		00					.byte	 0	; $0b !!11
>9566		00					.byte	 0	; $0c !!12
>9567		00					.byte	 0	; $0d !!13
>9568		00					.byte	 0	; $0e !!14
>9569		00					.byte	 0	; $0f !!15
>956a		00					.byte	 0	; $10 @
>956b		00					.byte	 0	; $11 !!17
>956c		00					.byte	 0	; $12 !!18
>956d		00					.byte	 0	; $13 [
>956e		04					.byte	 4	; $14 \
>956f		00					.byte	 0	; $15 ]
>9570		01					.byte	 1	; $16 ^
>9571		00					.byte	 0	; $17 _
>9572		00					.byte	 0	; $18 `
>9573		00					.byte	 0	; $19 !!25
>9574		00					.byte	 0	; $1a !!26
>9575		00					.byte	 0	; $1b {
>9576		01					.byte	 1	; $1c |
>9577		00					.byte	 0	; $1d }
>9578		00					.byte	 0	; $1e ~
>9579		00					.byte	 0	; $1f [7m<7F>[m
>957a		00					.byte	 0	; $20
>957b		05					.byte	 5	; $21 !
>957c		00					.byte	 0	; $22 "
>957d		00					.byte	 0	; $23 #
>957e		05					.byte	 5	; $24 $
>957f		04					.byte	 4	; $25 %
>9580		01					.byte	 1	; $26 &
>9581		00					.byte	 0	; $27 '
>9582		00					.byte	 0	; $28 (
>9583		00					.byte	 0	; $29 )
>9584		04					.byte	 4	; $2a *
>9585		03					.byte	 3	; $2b +
>9586		00					.byte	 0	; $2c ,
>9587		03					.byte	 3	; $2d -
>9588		00					.byte	 0	; $2e .
>9589		04					.byte	 4	; $2f /
>958a		00					.byte	 0	; $30 0
>958b		00					.byte	 0	; $31 1
>958c		00					.byte	 0	; $32 2
>958d		00					.byte	 0	; $33 3
>958e		00					.byte	 0	; $34 4
>958f		00					.byte	 0	; $35 5
>9590		00					.byte	 0	; $36 6
>9591		00					.byte	 0	; $37 7
>9592		00					.byte	 0	; $38 8
>9593		00					.byte	 0	; $39 9
>9594		00					.byte	 0	; $3a :
>9595		00					.byte	 0	; $3b ;
>9596		02					.byte	 2	; $3c <
>9597		02					.byte	 2	; $3d =
>9598		02					.byte	 2	; $3e >
>9599		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.959a						EvaluateExpressionAt0:
.959a		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.959c						EvaluateExpression:
.959c		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.959e						EvaluateExpressionAtPrecedence:
.959e		48		pha				pha 								; save precedence level
.959f		20 e6 99	jsr $99e6			jsr 	EvaluateTerm 				; evaluate term into level X.
.95a2		68		pla				pla 								; restore precedence level.
.95a3						_EXPRLoop:
.95a3		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.95a5		b1 30		lda ($30),y			lda 	(codePtr),y
.95a7		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.95a9		b0 25		bcs $95d0			bcs 	_EXPRExit
.95ab		da		phx				phx 								; read the operator precedence
.95ac		aa		tax				tax
.95ad		bd 5a 95	lda $955a,x			lda 	PrecedenceLevel,x
.95b0		fa		plx				plx
.95b1		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.95b3		f0 1b		beq $95d0			beq 	_EXPRExit
.95b5		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.95b7		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.95b9		c5 37		cmp $37				cmp 	zTemp0+1
.95bb		b0 13		bcs $95d0			bcs		_EXPRExit 					; if current >= operator exit
.95bd		48		pha				pha 								; save current precedence.
.95be		b1 30		lda ($30),y			lda 	(codePtr),y
.95c0		c8		iny				iny
.95c1		48		pha				pha
.95c2		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.95c4		e8		inx				inx 								; work out the right hand side.
.95c5		20 9e 95	jsr $959e			jsr 	EvaluateExpressionAtPrecedence
.95c8		ca		dex				dex
.95c9		68		pla				pla 								; get operator, call the code.
.95ca		20 d3 95	jsr $95d3			jsr 	_EXPRCaller
.95cd		68		pla				pla 								; restore precedence level
.95ce		80 d3		bra $95a3			bra 	_EXPRLoop 					; and go round.
.95d0						_EXPRExit:
.95d0		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.95d2		60		rts				rts
.95d3						_EXPRCaller:
.95d3		da		phx				phx 								; save on stack, first thing is to restore it
.95d4		0a		asl a				asl 	a 							; double so can use vectors into X
.95d5		aa		tax				tax
.95d6		7c 14 8d	jmp ($8d14,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.95d9						FloatingPointAdd:
.95d9		20 4f 97	jsr $974f			jsr 	FloatPrepare 				; prepare for floats
.95dc		80 09		bra $95e7			bra 	FloatAdd
.95de						FloatingPointSub:
.95de		20 4f 97	jsr $974f			jsr 	FloatPrepare 				; prepare for floats
.95e1						FloatSubtract:
.95e1		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.95e3		49 80		eor #$80			eor 	#$80
.95e5		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.95e7						FloatAdd:
.95e7		48		pha				pha
.95e8		5a		phy				phy
.95e9		20 5e 97	jsr $975e			jsr 	NSNormalise 				; normalise S[X]
.95ec		f0 51		beq $963f			beq 	_FAReturn1
.95ee		e8		inx				inx 								; normalise S[X+1]
.95ef		20 5e 97	jsr $975e			jsr 	NSNormalise
.95f2		ca		dex				dex
.95f3		c9 00		cmp #$00			cmp 	#0
.95f5		f0 60		beq $9657			beq 	_FAExit 					; if so, just return A
.95f7		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.95f9		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.95fb		f0 18		beq $9615			beq 	_FAExponentsEqual
.95fd		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.95ff		a8		tay				tay
.9600		38		sec				sec 								; do a signed comparison of the exponents.
.9601		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9603		50 02		bvc $9607			bvc 	_FANoSignedChange
.9605		49 80		eor #$80			eor 	#$80
.9607						_FANoSignedChange:
.9607		29 80		and #$80			and 	#$80
.9609		10 02		bpl $960d			bpl 	_FAHaveMax
.960b		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.960d						_FAHaveMax:
.960d		20 5a 96	jsr $965a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9610		e8		inx				inx
.9611		20 5a 96	jsr $965a			jsr 	_FAShiftToExponent
.9614		ca		dex				dex
.9615						_FAExponentsEqual:
.9615		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9617		55 51		eor $51,x			eor 	NSStatus+1,x
.9619		30 0e		bmi $9629			bmi 	_FADifferentSigns
.961b		20 92 93	jsr $9392			jsr 	AddTopTwoStack 				; do the add of the mantissae
.961e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9620		10 35		bpl $9657			bpl 	_FAExit 					; if no, we are done.
.9622		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9625		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9627		80 2e		bra $9657			bra 	_FAExit
.9629						_FADifferentSigns:
.9629		20 ac 93	jsr $93ac			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.962c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.962e		10 06		bpl $9636			bpl 	_FACheckZero 				; if no, check for -0
.9630		20 a5 9f	jsr $9fa5			jsr 	NSMNegate 					; netate result
.9633		20 ac 9f	jsr $9fac			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9636						_FACheckZero:
.9636		20 05 a0	jsr $a005			jsr 	NSMIsZero	 				; check for -0
.9639		d0 1c		bne $9657			bne 	_FAExit
.963b		74 50		stz $50,x			stz 	NSStatus,x
.963d		80 18		bra $9657			bra 	_FAExit
.963f						_FAReturn1:
.963f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9641		95 58		sta $58,x			sta 	NSMantissa0,x
.9643		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9645		95 60		sta $60,x			sta 	NSMantissa1,x
.9647		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9649		95 68		sta $68,x			sta 	NSMantissa2,x
.964b		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.964d		95 70		sta $70,x			sta 	NSMantissa3,x
.964f		b5 79		lda $79,x			lda 	NSExponent+1,x
.9651		95 78		sta $78,x			sta 	NSExponent,x
.9653		b5 51		lda $51,x			lda 	NSStatus+1,x
.9655		95 50		sta $50,x			sta 	NSStatus,x
.9657						_FAExit:
.9657		7a		ply				ply
.9658		68		pla				pla
.9659		60		rts				rts
.965a						_FAShiftToExponent:
.965a						_FAShiftToExponent2:
.965a		98		tya				tya 								; compare Y to exponent
.965b		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.965d		f0 07		beq $9666			beq 	_FASEExit 					; exit if so.
.965f		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight	 			; shift the mantissa right
.9662		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9664		80 f4		bra $965a			bra 	_FAShiftToExponent2
.9666						_FASEExit:
.9666		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9667						CompareFloat:
.9667		20 e1 95	jsr $95e1			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.966a		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.966c		29 f8		and #$f8			and 	#$F8
.966e		15 68		ora $68,x			ora 	NSMantissa2,x
.9670		15 70		ora $70,x			ora 	NSMantissa3,x
.9672		f0 08		beq $967c			beq 	_FCExit 					; zero, so approximately identical
.9674		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9676		34 50		bit $50,x			bit 	NSStatus,x
.9678		10 02		bpl $967c			bpl 	_FCExit
.967a						_FCNegative:
.967a		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.967c						_FCExit:
.967c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.967d						FDivideCommand:
.967d		fa		plx				plx	 								; restore stack position
.967e		20 4f 97	jsr $974f			jsr 	FloatPrepare 				; prepare for floats
.9681						FloatDivide:
.9681		48		pha				pha
.9682		e8		inx				inx
.9683		20 5e 97	jsr $975e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9686		ca		dex				dex
.9687		c9 00		cmp #$00			cmp 	#0
.9689		f0 1d		beq $96a8			beq 	_FDZero
.968b		20 5e 97	jsr $975e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.968e		f0 16		beq $96a6			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9690		20 83 92	jsr $9283			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9693		20 1f 92	jsr $921f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9696		20 5e 97	jsr $975e			jsr		NSNormalise 				; renormalise
.9699		20 13 93	jsr $9313			jsr 	CalculateSign 				; calculate result sign
.969c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.969e		38		sec				sec
.969f		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.96a1		38		sec				sec
.96a2		e9 1e		sbc #$1e			sbc 	#30
.96a4		95 78		sta $78,x			sta 	NSExponent,x
.96a6						_FDExit:
.96a6		68		pla				pla
.96a7		60		rts				rts
.96a8						_FDZero:
.96a8		a9 03		lda #$03		lda	#3
.96aa		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.96ad						FloatFractionalPart:
.96ad		5a		phy				phy
.96ae		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.96b0		29 7f		and #$7f			and 	#$7F
.96b2		95 50		sta $50,x			sta 	NSStatus,x
.96b4		20 5e 97	jsr $975e			jsr 	NSNormalise
.96b7		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.96b9		38		sec				sec
.96ba		e9 e0		sbc #$e0			sbc 	#$E0
.96bc		90 29		bcc $96e7			bcc 	_FFPExit 					; already fractional
.96be		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.96c0		b0 22		bcs $96e4			bcs 	_FFPZero
.96c2		a8		tay				tay 								; put count to do in Y
.96c3		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.96c5		20 e9 96	jsr $96e9			jsr 	_FFPPartial
.96c8		95 70		sta $70,x			sta 	NSMantissa3,x
.96ca		b5 68		lda $68,x			lda 	NSMantissa2,x
.96cc		20 e9 96	jsr $96e9			jsr 	_FFPPartial
.96cf		95 68		sta $68,x			sta 	NSMantissa2,x
.96d1		b5 60		lda $60,x			lda 	NSMantissa1,x
.96d3		20 e9 96	jsr $96e9			jsr 	_FFPPartial
.96d6		95 60		sta $60,x			sta 	NSMantissa1,x
.96d8		b5 58		lda $58,x			lda 	NSMantissa0,x
.96da		20 e9 96	jsr $96e9			jsr 	_FFPPartial
.96dd		95 58		sta $58,x			sta 	NSMantissa0,x
.96df		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; zeroed check.
.96e2		d0 03		bne $96e7			bne 	_FFPExit
.96e4						_FFPZero:
.96e4		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.96e7						_FFPExit:
.96e7		7a		ply				ply
.96e8		60		rts				rts
.96e9						_FFPPartial:
.96e9		c0 00		cpy #$00			cpy 	#0 							; no more to do
.96eb		f0 17		beq $9704			beq 	_FFFPPExit
.96ed		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.96ef		b0 0c		bcs $96fd			bcs 	_FFFPPWholeByte
.96f1		5a		phy				phy
.96f2						_FFFPPLeft:
.96f2		0a		asl a				asl 	a
.96f3		88		dey				dey
.96f4		d0 fc		bne $96f2			bne 	_FFFPPLeft
.96f6		7a		ply				ply
.96f7						_FFFPPRight:
.96f7		4a		lsr a				lsr 	a
.96f8		88		dey				dey
.96f9		d0 fc		bne $96f7			bne 	_FFFPPRight
.96fb		80 07		bra $9704			bra 	_FFFPPExit
.96fd						_FFFPPWholeByte:
.96fd		98		tya				tya 								; subtract 8 from count
.96fe		38		sec				sec
.96ff		e9 08		sbc #$08			sbc 	#8
.9701		a8		tay				tay
.9702		a9 00		lda #$00			lda 	#0 							; and clear all
.9704						_FFFPPExit:
.9704		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9705						FloatIntegerPart:
.9705		48		pha				pha
.9706		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9708		f0 1d		beq $9727			beq 	_FIPExit 					; if so do nothing
.970a		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; is it zero ?
.970d		f0 15		beq $9724			beq 	_FIPZero 					; if so return zero.
.970f		20 5e 97	jsr $975e			jsr 	NSNormalise 				; normalise
.9712		f0 10		beq $9724			beq 	_FIPZero 					; normalised to zero, exit zero
.9714						_FIPShift:
.9714		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9716		10 07		bpl $971f			bpl 	_FIPCheckZero
.9718		20 fc 9f	jsr $9ffc			jsr 	NSMShiftRight 				; shift mantissa right
.971b		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.971d		80 f5		bra $9714			bra 	_FIPShift
.971f						_FIPCheckZero:
.971f		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; avoid -0 problem
.9722		d0 03		bne $9727			bne 	_FIPExit 					; set to zero if mantissa zero.
.9724						_FIPZero:
.9724		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.9727						_FIPExit:
.9727		68		pla				pla
.9728		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9729						FloatingPointMultiply:
.9729		20 4f 97	jsr $974f			jsr 	FloatPrepare 				; prepare for floats
.972c						FloatMultiply:
.972c		48		pha				pha
.972d		20 5e 97	jsr $975e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9730		f0 18		beq $974a			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9732		e8		inx				inx
.9733		20 5e 97	jsr $975e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9736		ca		dex				dex
.9737		c9 00		cmp #$00			cmp 	#0
.9739		f0 0c		beq $9747			beq 	_FDSetZero
.973b		20 d5 92	jsr $92d5			jsr 	MultiplyShort 				; calculate the result.
.973e		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9740		18		clc				clc
.9741		75 79		adc $79,x			adc 	NSExponent+1,x
.9743		95 78		sta $78,x			sta 	NSExponent,x
.9745		80 03		bra $974a			bra 	_FDExit
.9747						_FDSetZero:
.9747		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; return 0
.974a						_FDExit:
.974a		20 5e 97	jsr $975e			jsr 	NSNormalise 				; normalise the result
.974d		68		pla				pla
.974e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.974f						FloatPrepare:
.974f		20 5a 98	jsr $985a			jsr 	DereferenceTopTwo 			; dereference the top two values
.9752		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9754		15 51		ora $51,x			ora 	NSStatus+1,x
.9756		29 10		and #$10			and 	#NSBIsString
.9758		d0 01		bne $975b			bne 	_FDType
.975a		60		rts				rts
.975b						_FDType:
.975b		4c 6b a1	jmp $a16b			jmp 	TypeError
.975e						NSNormalise:
.975e		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9760		29 80		and #$80			and 	#$80
.9762		09 08		ora #$08			ora 	#NSTFloat
.9764		95 50		sta $50,x			sta 	NSStatus,x
.9766		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; if zero exit
.9769		d0 07		bne $9772			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.976b		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.976d		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.976f		a9 00		lda #$00			lda 	#0 							; set Z flag
.9771		60		rts				rts
.9772						_NSNormaliseOptimise:
.9772		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9774		d0 19		bne $978f			bne 	_NSNormaliseLoop
.9776		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9778		30 15		bmi $978f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.977a		95 70		sta $70,x			sta 	NSMantissa3,x
.977c		b5 60		lda $60,x			lda 	NSMantissa1,x
.977e		95 68		sta $68,x			sta 	NSMantissa2,x
.9780		b5 58		lda $58,x			lda 	NSMantissa0,x
.9782		95 60		sta $60,x			sta 	NSMantissa1,x
.9784		74 58		stz $58,x			stz 	NSMantissa0,x
.9786		b5 78		lda $78,x			lda 	NSExponent,x
.9788		38		sec				sec
.9789		e9 08		sbc #$08			sbc 	#8
.978b		95 78		sta $78,x			sta 	NSExponent,x
.978d		80 e3		bra $9772			bra 	_NSNormaliseOptimise
.978f						_NSNormaliseLoop:
.978f		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9791		70 07		bvs $979a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9793		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; shift mantissa left
.9796		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9798		80 f5		bra $978f			bra 	_NSNormaliseLoop
.979a						_NSNExit:
.979a		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.979c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.979d						AssignNumber:
.979d		5a		phy				phy
.979e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.97a0		85 36		sta $36				sta 	zTemp0
.97a2		b5 60		lda $60,x			lda 	NSMantissa1,x
.97a4		85 37		sta $37				sta 	zTemp0+1
.97a6		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.97a8		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.97aa		95 50		sta $50,x			sta 	NSStatus,x
.97ac		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.97ae		c9 08		cmp #$08			cmp 	#NSTFloat
.97b0		f0 24		beq $97d6			beq 	_ANFloat
.97b2		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.97b4		f0 03		beq $97b9			beq		_ANNotFloat
.97b6		4c 66 a1	jmp $a166			jmp 	RangeError					; if it is, report an error.
.97b9						_ANNotFloat:
.97b9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.97bb		29 03		and #$03			and 	#3
.97bd		d0 05		bne $97c4			bne 	_ANByteWord
.97bf		20 e1 97	jsr $97e1			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.97c2		80 1b		bra $97df			bra 	_ANExit
.97c4						_ANByteWord:
.97c4		48		pha				pha 								; save count
.97c5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.97c7		92 36		sta ($36)			sta 	(zTemp0)
.97c9		68		pla				pla
.97ca		c9 01		cmp #$01			cmp	 	#1
.97cc		f0 11		beq $97df			beq 	_ANExit
.97ce		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.97d0		a0 01		ldy #$01			ldy 	#1
.97d2		91 36		sta ($36),y			sta 	(zTemp0),y
.97d4		80 09		bra $97df			bra 	_ANExit
.97d6						_ANFloat:
.97d6		20 e1 97	jsr $97e1			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.97d9		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.97db		a0 04		ldy #$04			ldy 	#4
.97dd		91 36		sta ($36),y			sta 	(zTemp0),y
.97df						_ANExit:
.97df		7a		ply				ply
.97e0		60		rts				rts
.97e1						_ANCopy4PackSign:
.97e1		a0 03		ldy #$03			ldy 	#3
.97e3		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.97e5		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.97e7		15 71		ora $71,x			ora 	NSMantissa3+1,x
.97e9		91 36		sta ($36),y			sta 	(zTemp0),y
.97eb		88		dey				dey
.97ec		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.97ee		91 36		sta ($36),y			sta 	(zTemp0),y
.97f0		88		dey				dey
.97f1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.97f3		91 36		sta ($36),y			sta 	(zTemp0),y
.97f5		88		dey				dey
.97f6		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.97f8		91 36		sta ($36),y			sta 	(zTemp0),y
.97fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.97fb						AssignString:
.97fb		5a		phy				phy
.97fc		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.97fe		85 38		sta $38				sta 	zTemp1
.9800		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9802		85 39		sta $39				sta 	zTemp1+1
.9804		b5 58		lda $58,x			lda 	NSMantissa0,x
.9806		85 36		sta $36				sta 	zTemp0
.9808		b5 60		lda $60,x			lda 	NSMantissa1,x
.980a		85 37		sta $37				sta 	zTemp0+1
.980c		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.980e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9810		f0 23		beq $9835			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9812		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9813		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9815		e9 02		sbc #$02			sbc 	#2
.9817		85 3c		sta $3c				sta 	zsTemp
.9819		a0 01		ldy #$01			ldy 	#1
.981b		b1 36		lda ($36),y			lda 	(zTemp0),y
.981d		e9 00		sbc #$00			sbc 	#0
.981f		85 3d		sta $3d				sta 	zsTemp+1
.9821		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9823						_ASGetLength:
.9823		c8		iny				iny
.9824		b1 38		lda ($38),y			lda 	(zTemp1),y
.9826		d0 fb		bne $9823			bne 	_ASGetLength
.9828		98		tya				tya 								; is this length <= current length
.9829		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.982b		90 1e		bcc $984b			bcc 	_ASCopyString
.982d		f0 1c		beq $984b			beq 	_ASCopyString
.982f		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9831		a0 01		ldy #$01			ldy 	#1
.9833		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9835						_ASNewStringRequired:
.9835		e8		inx				inx 								; concrete the new string.
.9836		20 4f b1	jsr $b14f			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9839		ca		dex				dex
.983a		18		clc				clc
.983b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.983d		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.983f		92 36		sta ($36)			sta 	(zTemp0)
.9841		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9843		69 00		adc #$00			adc 	#0
.9845		a0 01		ldy #$01			ldy 	#1
.9847		91 36		sta ($36),y			sta 	(zTemp0),y
.9849		80 0d		bra $9858			bra 	_ASExit
.984b						_ASCopyString:
.984b		a0 00		ldy #$00			ldy 	#0
.984d						_ASCopyLoop:
.984d		b1 38		lda ($38),y			lda 	(zTemp1),y
.984f		c8		iny				iny
.9850		c8		iny				iny
.9851		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9853		88		dey				dey
.9854		c9 00		cmp #$00			cmp 	#0
.9856		d0 f5		bne $984d			bne 	_ASCopyLoop
.9858						_ASExit:
.9858		7a		ply				ply
.9859		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.985a						DereferenceTopTwo:
.985a		e8		inx				inx
.985b		20 5f 98	jsr $985f			jsr 	Dereference 				; deref x+1
.985e		ca		dex				dex  								; falls through to deref x
.985f						Dereference:
.985f		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9861		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9863		f0 48		beq $98ad			beq 	_DRFExit 					; not a reference, so exit.
.9865		5a		phy				phy
.9866		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9868		85 36		sta $36				sta 	zTemp0
.986a		b5 60		lda $60,x			lda 	NSMantissa1,x
.986c		85 37		sta $37				sta 	zTemp0+1
.986e		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9870		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9872		95 58		sta $58,x			sta 	NSMantissa0,x
.9874		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9876		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9878		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.987a		f0 0e		beq $988a			beq 	_DRFDereferenceTwo
.987c		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.987e		f0 2f		beq $98af			beq 	_DRFFull
.9880		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9882		29 03		and #$03			and 	#3
.9884		f0 29		beq $98af			beq 	_DRFFull 					; the whole word
.9886		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9888		f0 06		beq $9890			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.988a						_DRFDereferenceTwo:
.988a		a0 01		ldy #$01			ldy 	#1
.988c		b1 36		lda ($36),y			lda 	(zTemp0),y
.988e		95 60		sta $60,x			sta 	NSMantissa1,x
.9890						_DRFClear23:
.9890		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9892		74 70		stz $70,x			stz 	NSMantissa3,x
.9894		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9896		29 18		and #$18			and 	#NSBTypeMask
.9898		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.989a		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.989c		d0 0e		bne $98ac			bne 	_DRFNotString
.989e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.98a0		15 60		ora $60,x			ora 	NSMantissa1,x
.98a2		d0 08		bne $98ac			bne 	_DRFNotString
.98a4		a9 ae		lda #$ae			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.98a6		95 58		sta $58,x			sta 	NSMantissa0,x
.98a8		a9 98		lda #$98			lda 	#_DRFNullString >> 8
.98aa		95 60		sta $60,x			sta 	NSMantissa1,x
.98ac						_DRFNotString
.98ac		7a		ply				ply 								; restore Y and exit
.98ad						_DRFExit:
.98ad		60		rts				rts
.98ae						_DRFNullString:
>98ae		00						.byte 	0
.98af						_DRFFull:
.98af		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.98b1		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b3		95 60		sta $60,x			sta 	NSMantissa1,x
.98b5		c8		iny				iny
.98b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b8		95 68		sta $68,x			sta 	NSMantissa2,x
.98ba		c8		iny				iny
.98bb		b1 36		lda ($36),y			lda 	(zTemp0),y
.98bd		95 70		sta $70,x			sta 	NSMantissa3,x
.98bf		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.98c1		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.98c3		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.98c5		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.98c7		f0 05		beq $98ce			beq 	_DRFNoExponent
.98c9		c8		iny				iny 								; if not, read the exponent as well.
.98ca		b1 36		lda ($36),y			lda 	(zTemp0),y
.98cc		95 78		sta $78,x			sta 	NSExponent,x
.98ce						_DRFNoExponent:
.98ce		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.98d0		10 0a		bpl $98dc			bpl 	_DRFExit2 					; if not, then exit.
.98d2		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.98d4		95 70		sta $70,x			sta 	NSMantissa3,x
.98d6		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.98d8		09 80		ora #$80			ora 	#NSBIsNegative
.98da		95 50		sta $50,x			sta 	NSStatus,x
.98dc						_DRFExit2:
.98dc		7a		ply				ply
.98dd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.98de						EncodeNumberStart:
.98de		38		sec				sec
.98df		80 01		bra $98e2			bra 	EncodeNumberContinue+1
.98e1						EncodeNumberContinue:
.98e1		18		clc				clc
.98e2						EncodeNumber:
.98e2		08		php				php 								; save reset flag.
.98e3		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.98e5		f0 12		beq $98f9			beq 	_ENIsOkay
.98e7		c9 30		cmp #$30			cmp 	#"0"
.98e9		90 04		bcc $98ef			bcc 	_ENBadNumber
.98eb		c9 3a		cmp #$3a			cmp 	#"9"+1
.98ed		90 0a		bcc $98f9			bcc 	_ENIsOkay
.98ef						_ENBadNumber:
.98ef		28		plp				plp 								; throw saved reset
.98f0		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.98f3		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.98f5		f0 7b		beq $9972			beq 	_ENConstructFinal
.98f7						_ENFail:
.98f7		18		clc				clc 								; not allowed
.98f8		60		rts				rts
.98f9						_ENIsOkay:
.98f9		28		plp				plp 								; are we restarting
.98fa		90 15		bcc $9911			bcc 	_ENNoRestart
.98fc						_ENStartEncode:
.98fc		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.98fe		f0 0c		beq $990c			beq 	_ENFirstDP
.9900		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9902		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte 					; in single byte mode.
.9905		a9 01		lda #$01			lda 	#ESTA_Low
.9907						_ENExitChange:
.9907		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.990a		38		sec				sec
.990b		60		rts				rts
.990c						_ENFirstDP:
.990c		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; clear integer part
.990f		80 3c		bra $994d			bra 	_ESTASwitchFloat			; go straight to float and exi
.9911						_ENNoRestart:
.9911		48		pha				pha 								; save digit or DP on stack.
.9912		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9915		c9 01		cmp #$01			cmp 	#ESTA_Low
.9917		f0 09		beq $9922			beq  	_ESTALowState
.9919		c9 02		cmp #$02			cmp 	#ESTA_High
.991b		f0 26		beq $9943			beq 	_ESTAHighState
.991d		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.991f		f0 38		beq $9959			beq 	_ESTADecimalState
>9921		db						.byte 	$DB 						; causes a break in the emulator
.9922						_ESTALowState:
.9922		68		pla				pla 								; get value back
.9923		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9925		f0 26		beq $994d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9927		29 0f		and #$0f			and 	#15 						; make digit
.9929		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.992c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.992e		0a		asl a				asl 	a
.992f		0a		asl a				asl 	a
.9930		75 58		adc $58,x			adc 	NSMantissa0,x
.9932		0a		asl a				asl 	a
.9933		6d 06 04	adc $0406			adc 	digitTemp
.9936		95 58		sta $58,x			sta 	NSMantissa0,x
.9938		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.993a		90 05		bcc $9941			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.993c		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.993e		8d 05 04	sta $0405			sta 	encodeState
.9941						_ESTANoSwitch:
.9941		38		sec				sec
.9942		60		rts				rts
.9943						_ESTAHighState:
.9943		68		pla				pla 								; get value back
.9944		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9946		f0 05		beq $994d			beq 	_ESTASwitchFloat
.9948		20 a6 99	jsr $99a6			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.994b		38		sec				sec
.994c		60		rts				rts
.994d						_ESTASwitchFloat:
.994d		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9950		e8		inx				inx 								; zero the decimal additive.
.9951		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.9954		ca		dex				dex
.9955		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9957		80 ae		bra $9907			bra 	_ENExitChange
.9959						_ESTADecimalState:
.9959		68		pla				pla 								; digit.
.995a		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.995c		f0 99		beq $98f7			beq 	_ENFail
.995e		e8		inx				inx 								; put digit into fractional part of X+1
.995f		20 a6 99	jsr $99a6			jsr 	ESTAShiftDigitIntoMantissa
.9962		ca		dex				dex
.9963		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9966		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9969		c9 0b		cmp #$0b			cmp 	#11
.996b		f0 02		beq $996f			beq 	_ESTADSFail
.996d		38		sec				sec
.996e		60		rts				rts
.996f						_ESTADSFail:
.996f		4c 66 a1	jmp $a166			jmp 	RangeError
.9972						_ENConstructFinal:
.9972		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9975		f0 2d		beq $99a4			beq 	_ENCFExit 					; no decimals
.9977		5a		phy				phy
.9978		0a		asl a				asl 	a 							; x 4 and CLC
.9979		0a		asl a				asl 	a
.997a		6d 07 04	adc $0407			adc 	decimalCount
.997d		a8		tay				tay
.997e		b9 25 a1	lda $a125,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9981		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9983		b9 26 a1	lda $a126,y			lda 	DecimalScalarTable-5+1,y
.9986		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9988		b9 27 a1	lda $a127,y			lda 	DecimalScalarTable-5+2,y
.998b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.998d		b9 28 a1	lda $a128,y			lda 	DecimalScalarTable-5+3,y
.9990		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9992		b9 29 a1	lda $a129,y			lda 	DecimalScalarTable-5+4,y
.9995		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9997		a9 08		lda #$08			lda 	#NSTFloat
.9999		95 52		sta $52,x			sta 	NSStatus+2,x
.999b		7a		ply				ply
.999c		e8		inx				inx 								; multiply decimal const by decimal scalar
.999d		20 2c 97	jsr $972c			jsr 	FloatMultiply
.99a0		ca		dex				dex
.99a1		20 e7 95	jsr $95e7			jsr 	FloatAdd 					; add to integer part.
.99a4						_ENCFExit:
.99a4		18		clc				clc 								; reject the digit.
.99a5		60		rts				rts
.99a6						ESTAShiftDigitIntoMantissa:
.99a6		29 0f		and #$0f			and 	#15 						; save digit
.99a8		48		pha				pha
.99a9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.99ab		48		pha				pha
.99ac		b5 68		lda $68,x			lda 	NSMantissa2,x
.99ae		48		pha				pha
.99af		b5 60		lda $60,x			lda 	NSMantissa1,x
.99b1		48		pha				pha
.99b2		b5 58		lda $58,x			lda 	NSMantissa0,x
.99b4		48		pha				pha
.99b5		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 2
.99b8		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 4
.99bb		18		clc				clc 								; pop mantissa and add
.99bc		68		pla				pla
.99bd		75 58		adc $58,x			adc 	NSMantissa0,x
.99bf		95 58		sta $58,x			sta 	NSMantissa0,x
.99c1		68		pla				pla
.99c2		75 60		adc $60,x			adc 	NSMantissa1,x
.99c4		95 60		sta $60,x			sta 	NSMantissa1,x
.99c6		68		pla				pla
.99c7		75 68		adc $68,x			adc 	NSMantissa2,x
.99c9		95 68		sta $68,x			sta 	NSMantissa2,x
.99cb		68		pla				pla
.99cc		75 70		adc $70,x			adc 	NSMantissa3,x
.99ce		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.99d0		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 10
.99d3		68		pla				pla 								; add digit
.99d4		18		clc				clc
.99d5		75 58		adc $58,x			adc 	NSMantissa0,x
.99d7		95 58		sta $58,x			sta 	NSMantissa0,x
.99d9		90 0a		bcc $99e5			bcc 	_ESTASDExit
.99db		f6 60		inc $60,x			inc 	NSMantissa1,x
.99dd		d0 06		bne $99e5			bne 	_ESTASDExit
.99df		f6 68		inc $68,x			inc 	NSMantissa2,x
.99e1		d0 02		bne $99e5			bne 	_ESTASDExit
.99e3		f6 70		inc $70,x			inc 	NSMantissa3,x
.99e5						_ESTASDExit:
.99e5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.99e6						EvaluateTerm:
.99e6		b1 30		lda ($30),y			lda 	(codePtr),y
.99e8		30 18		bmi $9a02			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.99ea		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.99ec		b0 6c		bcs $9a5a			bcs 	_ETVariable
.99ee		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.99f0		90 6b		bcc $9a5d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.99f2		c9 3a		cmp #$3a			cmp 	#'9'+1
.99f4		b0 67		bcs $9a5d			bcs 	_ETPuncUnary
.99f6		20 de 98	jsr $98de			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.99f9						_ETNumber:
.99f9		c8		iny				iny 								; keep encoding until we have the numbers
.99fa		b1 30		lda ($30),y			lda 	(codePtr),y
.99fc		20 e1 98	jsr $98e1			jsr 	EncodeNumberContinue
.99ff		b0 f8		bcs $99f9			bcs 	_ETNumber 					; go back if accepted.
.9a01		60		rts				rts
.9a02						_ETCheckUnary:
.9a02		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a04		f0 3f		beq $9a45			beq 	_ETString
.9a06		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a08		f0 12		beq $9a1c			beq 	_ETHexConstant
.9a0a		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9a0c		90 0b		bcc $9a19			bcc 	_ETSyntaxError
.9a0e		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9a10		b0 07		bcs $9a19			bcs 	_ETSyntaxError
.9a12		da		phx				phx 								; push X on the stack
.9a13		0a		asl a				asl 	a 							; put vector x 2 into X
.9a14		aa		tax				tax
.9a15		c8		iny				iny 								; consume unary function token
.9a16		7c 94 8d	jmp ($8d94,x)			jmp 	(VectorSet0,x) 				; and do it.
.9a19						_ETSyntaxError:
.9a19		4c 61 a1	jmp $a161			jmp 	SyntaxError
.9a1c						_ETHexConstant:
.9a1c		c8		iny				iny 								; skip #
.9a1d		c8		iny				iny 								; skip count
.9a1e		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; clear result
.9a21						_ETHLoop:
.9a21		b1 30		lda ($30),y			lda 	(codePtr),y
.9a23		c8		iny				iny 								; and consume
.9a24		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9a26		f0 1c		beq $9a44			beq 	_ETHExit
.9a28		48		pha				pha 								; save on stack.
.9a29		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 2
.9a2c		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 4
.9a2f		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 8
.9a32		20 f2 9f	jsr $9ff2			jsr 	NSMShiftLeft 				; x 16
.9a35		68		pla				pla 								; ASCII
.9a36		c9 41		cmp #$41			cmp 	#'A'
.9a38		90 02		bcc $9a3c			bcc 	_ETHNotChar
.9a3a		e9 07		sbc #$07			sbc 	#7
.9a3c						_ETHNotChar:
.9a3c		29 0f		and #$0f			and 	#15 						; digit now
.9a3e		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9a40		95 58		sta $58,x			sta 	NSMantissa0,x
.9a42		80 dd		bra $9a21			bra 	_ETHLoop 					; go round.
.9a44						_ETHExit:
.9a44		60		rts				rts
.9a45						_ETString:
.9a45		c8		iny				iny 								; look at length
.9a46		b1 30		lda ($30),y			lda 	(codePtr),y
.9a48		48		pha				pha
.9a49		c8		iny				iny 								; first character
.9a4a		20 77 a7	jsr $a777			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9a4d		68		pla				pla 								; restore count and save
.9a4e		85 36		sta $36				sta 	zTemp0
.9a50		98		tya				tya 								; add length to Y to skip it.
.9a51		18		clc				clc
.9a52		65 36		adc $36				adc 	zTemp0
.9a54		a8		tay				tay
.9a55		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9a57		95 50		sta $50,x			sta 	NSStatus,x
.9a59		60		rts				rts
.9a5a						_ETVariable:
.9a5a		4c af 9a	jmp $9aaf			jmp 	VariableHandler
.9a5d						_ETPuncUnary:
.9a5d		c8		iny				iny 								; consume the unary character
.9a5e		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9a60		f0 2b		beq $9a8d			beq 	_ETUnaryNegate
.9a62		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9a64		f0 36		beq $9a9c			beq 	_ETDereference
.9a66		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9a68		f0 3e		beq $9aa8			beq 	_ETParenthesis
.9a6a		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9a6c		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9a6e		f0 06		beq $9a76			beq 	_ETIndirection
.9a70		e6 36		inc $36				inc 	zTemp0
.9a72		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9a74		d0 a3		bne $9a19			bne 	_ETSyntaxError
.9a76						_ETIndirection:
.9a76		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9a78		1a		inc a				inc 	a
.9a79		48		pha				pha
.9a7a		20 e6 99	jsr $99e6			jsr 	EvaluateTerm				; evaluate the term
.9a7d		20 5f 98	jsr $985f			jsr 	Dereference 				; dereference it.
.9a80		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9a82		d0 06		bne $9a8a			bne 	_ETTypeMismatch
.9a84		68		pla				pla 								; indirection 1-2
.9a85		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9a87		95 50		sta $50,x			sta 	NSStatus,x
.9a89		60		rts				rts
.9a8a						_ETTypeMismatch:
.9a8a		4c 6b a1	jmp $a16b			jmp 	TypeError
.9a8d						_ETUnaryNegate:
.9a8d		20 e6 99	jsr $99e6			jsr 	EvaluateTerm				; evaluate the term
.9a90		20 5f 98	jsr $985f			jsr 	Dereference 				; dereference it.
.9a93		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9a95		29 10		and #$10			and 	#NSTString
.9a97		d0 f1		bne $9a8a			bne 	_ETTypeMismatch
.9a99		4c a5 9f	jmp $9fa5			jmp 	NSMNegate  					; just toggles the sign bit.
.9a9c						_ETDereference:
.9a9c		20 e6 99	jsr $99e6			jsr 	EvaluateTerm				; evaluate the term
.9a9f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9aa1		29 20		and #$20			and 	#NSBIsReference
.9aa3		f0 e5		beq $9a8a			beq 	_ETTypeMismatch
.9aa5		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9aa7		60		rts				rts
.9aa8						_ETParenthesis:
.9aa8		20 9c 95	jsr $959c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9aab		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; check for )
.9aae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9aaf						VariableHandler:
.9aaf		b1 30		lda ($30),y			lda 	(codePtr),y
.9ab1		18		clc				clc
.9ab2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9ab4		85 37		sta $37				sta 	zTemp0+1
.9ab6		c8		iny				iny
.9ab7		b1 30		lda ($30),y			lda 	(codePtr),y
.9ab9		85 36		sta $36				sta 	zTemp0
.9abb		c8		iny				iny
.9abc		18		clc				clc									; copy variable address+3 to mantissa
.9abd		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9abf		95 58		sta $58,x			sta 	NSMantissa0,x
.9ac1		a5 37		lda $37				lda 	zTemp0+1
.9ac3		69 00		adc #$00			adc 	#0
.9ac5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac7		74 68		stz $68,x			stz 	NSMantissa2,x
.9ac9		74 70		stz $70,x			stz 	NSMantissa3,x
.9acb		74 78		stz $78,x			stz 	NSExponent,x
.9acd		5a		phy				phy
.9ace		a0 02		ldy #$02			ldy 	#2 							; read type
.9ad0		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ad2		7a		ply				ply
.9ad3		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9ad5		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9ad7		95 50		sta $50,x			sta 	NSStatus,x
.9ad9		29 04		and #$04			and 	#NSBIsArray
.9adb		d0 01		bne $9ade			bne 	_VHArray
.9add		60		rts				rts
.9ade						_VHArray:
.9ade		e8		inx				inx
.9adf		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9ae2		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9ae4		95 51		sta $51,x			sta 	NSStatus+1,x
.9ae6		b1 30		lda ($30),y			lda 	(codePtr),y
.9ae8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9aea		d0 06		bne $9af2			bne 	_VHNoSecondIndex
.9aec		c8		iny				iny 								; skip the comma
.9aed		e8		inx				inx
.9aee		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9af1		ca		dex				dex
.9af2						_VHNoSecondIndex:
.9af2		ca		dex				dex 								; set X back.
.9af3		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; and check the right bracket.
.9af6		5a		phy				phy 								; save position
.9af7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9af9		85 3e		sta $3e				sta 	zaTemp
.9afb		b5 60		lda $60,x			lda 	NSMantissa1,x
.9afd		85 3f		sta $3f				sta 	zaTemp+1
.9aff		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9b01		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b03		f0 5d		beq $9b62			beq 	_VHBadArray
.9b05		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b07		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b09		f0 02		beq $9b0d			beq 	_VHHas2Mask
.9b0b		a9 ff		lda #$ff			lda 	#$FF
.9b0d						_VHHas2Mask:
.9b0d		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9b0f		f0 4c		beq $9b5d			beq 	_VHBadIndex
.9b11		0a		asl a				asl 	a 							; carry will be set if a second index
.9b12		90 08		bcc $9b1c			bcc 	_VHCheckFirstIndex
.9b14		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9b16		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b18		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9b1a		90 41		bcc $9b5d			bcc 	_VHBadIndex
.9b1c						_VHCheckFirstIndex:
.9b1c		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9b1e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b20		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9b22		90 39		bcc $9b5d			bcc 	_VHBadIndex
.9b24		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9b26		64 37		stz $37				stz 	zTemp0+1
.9b28		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9b2a		30 0e		bmi $9b3a			bmi 	_VHNoMultiply
.9b2c		da		phx				phx
.9b2d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9b2f		48		pha				pha
.9b30		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9b32		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b34		1a		inc a				inc 	a 							; add 1 for zero base
.9b35		fa		plx				plx
.9b36		20 8e 9f	jsr $9f8e			jsr 	Multiply8x8 				; calculate -> Z0
.9b39		fa		plx				plx
.9b3a						_VHNoMultiply:
.9b3a		18		clc				clc
.9b3b		a5 36		lda $36				lda 	zTemp0
.9b3d		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9b3f		85 36		sta $36				sta 	zTemp0
.9b41		a5 37		lda $37				lda 	zTemp0+1
.9b43		69 00		adc #$00			adc 	#0
.9b45		85 37		sta $37				sta 	zTemp0+1
.9b47		b5 50		lda $50,x			lda 	NSStatus,x
.9b49		20 bc 85	jsr $85bc			jsr 	ScaleByBaseType
.9b4c		18		clc				clc
.9b4d		b2 3e		lda ($3e)			lda 	(zaTemp)
.9b4f		65 36		adc $36				adc 	zTemp0
.9b51		95 58		sta $58,x			sta 	NSMantissa0,x
.9b53		a0 01		ldy #$01			ldy 	#1
.9b55		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b57		65 37		adc $37				adc 	zTemp0+1
.9b59		95 60		sta $60,x			sta 	NSMantissa1,x
.9b5b		7a		ply				ply 								; restore position
.9b5c		60		rts				rts
.9b5d						_VHBadIndex:
.9b5d		a9 17		lda #$17		lda	#23
.9b5f		4c 98 90	jmp $9098		jmp	ErrorHandler
.9b62						_VHBadArray:
.9b62		a9 18		lda #$18		lda	#24
.9b64		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9b67						AbsUnary:
.9b67		fa		plx				plx 								; restore stack pos
.9b68		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; get a float or int
.9b6b		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9b6e		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9b70		29 7f		and #$7f			and 	#$7F
.9b72		95 50		sta $50,x			sta 	NSStatus,x
.9b74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9b75						AllocUnary:
.9b75		fa		plx				plx 								; restore stack pos
.9b76		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger		; get bytes required.
.9b79		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9b7c		da		phx				phx 								; save X/Y
.9b7d		5a		phy				phy
.9b7e		8a		txa				txa 								; copy X into Y
.9b7f		a8		tay				tay
.9b80		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9b83		aa		tax				tax
.9b84		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9b87		20 94 9b	jsr $9b94			jsr 	AllocateXABytes 			; allocate memory
.9b8a		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9b8d		8a		txa				txa 	 							; typing is 16 bit integer.
.9b8e		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9b91		7a		ply				ply
.9b92		fa		plx				plx
.9b93		60		rts				rts
.9b94						AllocateXABytes:
.9b94		5a		phy				phy
.9b95		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9b98		84 36		sty $36				sty 	zTemp0
.9b9a		5a		phy				phy
.9b9b		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9b9e		84 37		sty $37				sty 	zTemp0+1
.9ba0		5a		phy				phy
.9ba1		18		clc				clc 								; add to low memory pointer
.9ba2		6d 0c 04	adc $040c			adc 	lowMemPtr
.9ba5		8d 0c 04	sta $040c			sta 	lowMemPtr
.9ba8		8a		txa				txa
.9ba9		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9bac		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9baf		b0 2f		bcs $9be0			bcs 	CISSMemory
.9bb1		20 d2 9b	jsr $9bd2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9bb4						_ClearMemory:
.9bb4		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9bb7		c5 36		cmp $36				cmp 	zTemp0
.9bb9		d0 07		bne $9bc2			bne 	_CMClearNext
.9bbb		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9bbe		c5 37		cmp $37				cmp 	zTemp0+1
.9bc0		f0 0c		beq $9bce			beq 	_CMExit
.9bc2						_CMClearNext:
.9bc2		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9bc4		92 36		sta ($36)			sta 	(zTemp0)
.9bc6		e6 36		inc $36				inc 	zTemp0
.9bc8		d0 ea		bne $9bb4			bne 	_ClearMemory
.9bca		e6 37		inc $37				inc		zTemp0+1
.9bcc		80 e6		bra $9bb4			bra 	_ClearMemory
.9bce						_CMExit:
.9bce		fa		plx				plx
.9bcf		68		pla				pla
.9bd0		7a		ply				ply
.9bd1		60		rts				rts
.9bd2						CheckIdentifierStringSpace:
.9bd2		48		pha				pha
.9bd3		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9bd6		18		clc				clc
.9bd7		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9bd9		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9bdc		b0 02		bcs $9be0			bcs 	CISSMemory
.9bde		68		pla				pla
.9bdf		60		rts				rts
.9be0						CISSMemory:
.9be0		a9 06		lda #$06		lda	#6
.9be2		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9be5						AscUnary:
.9be5		fa		plx				plx 								; restore stack pos
.9be6		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; get a string
.9be9		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9beb		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte 					; ASC("") will return zero.
.9bee		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9bf1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9bf2						FracUnary:
.9bf2		fa		plx				plx 								; restore stack pos
.9bf3		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; get a float or int
.9bf6		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9bf9		b5 50		lda $50,x			lda 	NSStatus,x
.9bfb		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9bfd		f0 04		beq $9c03			beq 	_IUZero
.9bff		20 ad 96	jsr $96ad			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9c02		60		rts				rts
.9c03						_IUZero:
.9c03		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.9c06		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9c07						IntUnary:
.9c07		fa		plx				plx 								; restore stack pos
.9c08		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; get a float or int
.9c0b		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9c0e		b5 50		lda $50,x			lda 	NSStatus,x
.9c10		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9c12		f0 03		beq $9c17			beq 	_IUExit
.9c14		20 05 97	jsr $9705			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9c17						_IUExit:
.9c17		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9c18						LenUnary:
.9c18		fa		plx				plx 								; restore stack pos
.9c19		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; get a string
.9c1c		5a		phy				phy
.9c1d		a0 00		ldy #$00			ldy 	#0 							; find length
.9c1f						_LenFind:
.9c1f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9c21		f0 06		beq $9c29			beq 	_LenExit
.9c23		c8		iny				iny
.9c24		d0 f9		bne $9c1f			bne 	_LenFind
.9c26		4c 66 a1	jmp $a166			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9c29						_LenExit:
.9c29		98		tya				tya		 							; return length
.9c2a		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.9c2d		7a		ply				ply
.9c2e		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9c31		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9c32						Unary_Min:
.9c32		a9 01		lda #$01			lda 	#1
.9c34		80 02		bra $9c38			bra 	UnaryMinMaxMain
.9c36						Unary_Max:
.9c36		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9c38						UnaryMinMaxMain:
.9c38		fa		plx				plx 								; get index on number stack
.9c39		48		pha				pha 								; save comparator
.9c3a		20 28 9f	jsr $9f28			jsr 	EvaluateValue 				; get the first value.
.9c3d						_UMMMLoop:
.9c3d		b1 30		lda ($30),y			lda 	(codePtr),y
.9c3f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9c41		f0 22		beq $9c65			beq 	_UMMMDone
.9c43		20 87 90	jsr $9087			jsr 	CheckComma 					; must be a comma
.9c46		e8		inx				inx
.9c47		20 28 9f	jsr $9f28			jsr 	EvaluateValue
.9c4a		ca		dex				dex
.9c4b		20 c6 9f	jsr $9fc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9c4e		e8		inx				inx
.9c4f		20 c6 9f	jsr $9fc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9c52		e8		inx				inx
.9c53		20 4f 91	jsr $914f			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9c56		ca		dex				dex
.9c57		ca		dex				dex
.9c58		85 36		sta $36				sta 	zTemp0 						; save required result
.9c5a		68		pla				pla 								; get and save comparator
.9c5b		48		pha				pha
.9c5c		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9c5e		d0 dd		bne $9c3d			bne 	_UMMMLoop
.9c60		20 68 9c	jsr $9c68			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9c63		80 d8		bra $9c3d			bra 	_UMMMLoop
.9c65						_UMMMDone:
.9c65		68		pla				pla 								; throw the comparator
.9c66		c8		iny				iny 								; skip )
.9c67		60		rts				rts
.9c68						ExpCopyAboveDown:
.9c68		b5 51		lda $51,x			lda 	NSStatus+1,x
.9c6a		95 50		sta $50,x			sta 	NSStatus,x
.9c6c		b5 79		lda $79,x			lda 	NSExponent+1,x
.9c6e		95 78		sta $78,x			sta 	NSExponent,x
.9c70		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9c72		95 58		sta $58,x			sta 	NSMantissa0,x
.9c74		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c76		95 60		sta $60,x			sta 	NSMantissa1,x
.9c78		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9c7a		95 68		sta $68,x			sta 	NSMantissa2,x
.9c7c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9c7e		95 70		sta $70,x			sta 	NSMantissa3,x
.9c80		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9c81						Unary_Not:
.9c81		fa		plx				plx
.9c82		20 50 9f	jsr $9f50			jsr 	EvaluateInteger 			; get integer
.9c85		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9c88		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; zero mantissa ?
.9c8b		f0 04		beq $9c91			beq 	_NotZero
.9c8d		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.9c90		60		rts				rts
.9c91						_NotZero:
.9c91		4c 05 91	jmp $9105			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9c94						PeekByteUnary:
.9c94		a9 01		lda #$01			lda 	#1
.9c96		80 0a		bra $9ca2			bra 	PeekUnary
.9c98						PeekWUnary:
.9c98		a9 02		lda #$02			lda 	#2
.9c9a		80 06		bra $9ca2			bra 	PeekUnary
.9c9c						PeekLUnary:
.9c9c		a9 03		lda #$03			lda 	#3
.9c9e		80 02		bra $9ca2			bra 	PeekUnary
.9ca0						PeekDUnary:
.9ca0		a9 04		lda #$04			lda 	#4
.9ca2						PeekUnary:
.9ca2		fa		plx				plx 								; restore position.
.9ca3		48		pha				pha 								; save count to copy on stack
.9ca4		20 63 9f	jsr $9f63			jsr		Evaluate16BitInteger 		; address as constant.
.9ca7		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9caa		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9cac		85 36		sta $36				sta 	zTemp0
.9cae		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cb0		85 37		sta $37				sta 	zTemp0+1
.9cb2		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; clear the result to zero.
.9cb5		68		pla				pla 								; count in zTemp2
.9cb6		85 3a		sta $3a				sta 	zTemp2
.9cb8		da		phx				phx 								; save stack position and offset of read
.9cb9		5a		phy				phy
.9cba		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9cbc						_PULoop:
.9cbc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9cbe		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9cc0		c8		iny				iny 								; next byte to write
.9cc1		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9cc2		18		clc				clc
.9cc3		69 08		adc #$08			adc 	#MathStackSize
.9cc5		aa		tax				tax
.9cc6		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9cc8		d0 f2		bne $9cbc			bne 	_PULoop
.9cca		7a		ply				ply 								; restore stack/code pos and exit.
.9ccb		fa		plx				plx
.9ccc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ccd						Unary_Random:
.9ccd		fa		plx				plx
.9cce		20 3f 9d	jsr $9d3f			jsr 	Random32Bit 				; get a random number
.9cd1		20 28 9d	jsr $9d28			jsr 	URCopyToMantissa  			; put in mantissa
.9cd4		b1 30		lda ($30),y			lda 	(codePtr),y
.9cd6		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9cd8		f0 08		beq $9ce2			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9cda		e8		inx				inx
.9cdb		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9cde		ca		dex				dex
.9cdf		20 57 92	jsr $9257			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9ce2						_URNoModulus:
.9ce2		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9ce4		74 78		stz $78,x			stz 	NSExponent,x
.9ce6		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9ce9		60		rts				rts
.9cea						Unary_Rnd:
.9cea		fa		plx				plx
.9ceb		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; number to use.
.9cee		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; closing bracket
.9cf1		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9cf4		f0 26		beq $9d1c			beq 	_URCopySeed
.9cf6		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9cf8		10 1f		bpl $9d19			bpl 	_URDontSeed
.9cfa		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9cfc		49 17		eor #$17			eor 	#$17
.9cfe		8d 08 04	sta $0408			sta 	randomSeed+0
.9d01		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d03		49 a5		eor #$a5			eor 	#$A5
.9d05		8d 09 04	sta $0409			sta 	randomSeed+1
.9d08		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d0a		49 c2		eor #$c2			eor 	#$C2
.9d0c		8d 0a 04	sta $040a			sta 	randomSeed+2
.9d0f		b5 70		lda $70,x			lda 	NSMantissa3,x
.9d11		49 9d		eor #$9d			eor 	#$9D
.9d13		8d 0b 04	sta $040b			sta 	randomSeed+3
.9d16		20 3f 9d	jsr $9d3f			jsr 	Random32Bit
.9d19						_URDontSeed:
.9d19		20 3f 9d	jsr $9d3f			jsr 	Random32Bit 				; generate a number
.9d1c						_URCopySeed:
.9d1c		20 28 9d	jsr $9d28			jsr 	URCopyToMantissa 			; copy into mantissa
.9d1f		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9d21		95 78		sta $78,x			sta 	NSExponent,x
.9d23		a9 08		lda #$08			lda 	#NSTFloat
.9d25		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9d27		60		rts				rts
.9d28						URCopyToMantissa:
.9d28		ad 08 04	lda $0408			lda 	randomSeed+0
.9d2b		95 58		sta $58,x			sta 	NSMantissa0,x
.9d2d		ad 09 04	lda $0409			lda 	randomSeed+1
.9d30		95 60		sta $60,x			sta 	NSMantissa1,x
.9d32		ad 0a 04	lda $040a			lda 	randomSeed+2
.9d35		95 68		sta $68,x			sta 	NSMantissa2,x
.9d37		ad 0b 04	lda $040b			lda 	randomSeed+3
.9d3a		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9d3c		95 70		sta $70,x			sta 	NSMantissa3,x
.9d3e		60		rts				rts
.9d3f						Random32Bit:
.9d3f		5a		phy				phy
.9d40		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9d42		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9d45		d0 03		bne $9d4a			bne 	_Random1
.9d47		a8		tay				tay 								; if so do it 256 times
.9d48		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9d4a						_Random1:
.9d4a		0a		asl a				asl 	a 							; LSFR RNG
.9d4b		2e 09 04	rol $0409			rol 	randomSeed+1
.9d4e		2e 0a 04	rol $040a			rol 	randomSeed+2
.9d51		2e 0b 04	rol $040b			rol 	randomSeed+3
.9d54		90 02		bcc $9d58			bcc 	_Random2
.9d56		49 c5		eor #$c5			eor 	#$C5
.9d58						_Random2:
.9d58		88		dey				dey
.9d59		d0 ef		bne $9d4a			bne 	_Random1
.9d5b		8d 08 04	sta $0408			sta 	randomSeed+0
.9d5e		7a		ply				ply
.9d5f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9d60						SgnUnary:
.9d60		fa		plx				plx 								; restore stack pos
.9d61		20 31 9f	jsr $9f31			jsr 	EvaluateNumber 				; get a float or int
.9d64		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9d67		20 05 a0	jsr $a005			jsr 	NSMIsZero 					; if zero
.9d6a		f0 0e		beq $9d7a			beq 	_SGZero  					; return Int Zero
.9d6c		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9d6e		48		pha				pha
.9d6f		a9 01		lda #$01			lda 	#1 							; set to 1
.9d71		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.9d74		68		pla				pla
.9d75		29 80		and #$80			and		#$80 						; copy the sign byte out
.9d77		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9d79		60		rts				rts
.9d7a		20 e3 9f	jsr $9fe3	_SGZero:jsr 	NSMSetZero
.9d7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9d7e						ValUnary:
.9d7e		fa		plx				plx 								; restore stack pos
.9d7f		20 94 9d	jsr $9d94			jsr 	ValMainCode 				; do the main val() code
.9d82		b0 01		bcs $9d85			bcs 	_VUError 					; couldn't convert
.9d84		60		rts				rts
.9d85						_VUError:
.9d85		4c 6b a1	jmp $a16b			jmp 	TypeError
.9d88						IsValUnary:
.9d88		fa		plx				plx 								; restore stack pos
.9d89		20 94 9d	jsr $9d94			jsr 	ValMainCode 				; do the main val() code
.9d8c		b0 03		bcs $9d91			bcs 	_VUBad
.9d8e		4c 05 91	jmp $9105			jmp 	ReturnTrue
.9d91						_VUBad:
.9d91		4c 10 91	jmp $9110			jmp 	ReturnFalse
.9d94						ValMainCode:
.9d94		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; get a string
.9d97		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; check right bracket present
.9d9a						ValEvaluateZTemp0:
.9d9a		5a		phy				phy
.9d9b		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9d9d		f0 17		beq $9db6			beq 	_VMCFail2
.9d9f		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9da1		48		pha				pha 								; save first character
.9da2		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9da4		d0 01		bne $9da7			bne 	_VMCStart
.9da6		c8		iny				iny 								; skip over -
.9da7						_VMCStart:
.9da7		38		sec				sec 								; initialise first time round.
.9da8						_VMCNext:
.9da8		c8		iny				iny 								; pre-increment
.9da9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9dab		f0 0c		beq $9db9			beq 	_VMCSuccess 				; successful.
.9dad		20 e2 98	jsr $98e2			jsr 	EncodeNumber 				; send it to the number-builder
.9db0		90 03		bcc $9db5			bcc 	_VMCFail 					; if failed, give up.
.9db2		18		clc				clc 								; next time round, countinue
.9db3		80 f3		bra $9da8			bra 	_VMCNext
.9db5						_VMCFail:
.9db5		68		pla				pla
.9db6						_VMCFail2:
.9db6		7a		ply				ply
.9db7		38		sec				sec
.9db8		60		rts				rts
.9db9						_VMCSuccess:
.9db9		a9 00		lda #$00			lda 	#0 							; construct final
.9dbb		20 e2 98	jsr $98e2			jsr 	EncodeNumber 				; by sending a duff value.
.9dbe		68		pla				pla 								; if it was -ve
.9dbf		c9 2d		cmp #$2d			cmp 	#"-"
.9dc1		d0 03		bne $9dc6			bne 	_VMCNotNegative
.9dc3		20 a5 9f	jsr $9fa5			jsr		NSMNegate 					; negate it.
.9dc6						_VMCNotNegative:
.9dc6		7a		ply				ply
.9dc7		18		clc				clc
.9dc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9dc9						ChrUnary:
.9dc9		fa		plx				plx 								; restore stack pos
.9dca		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9dcd		48		pha				pha
.9dce		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9dd1		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9dd3		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate
.9dd6		68		pla				pla 								; write number to it
.9dd7		20 05 b2	jsr $b205			jsr 	StringTempWrite
.9dda		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9ddb						SpcUnary:
.9ddb		fa		plx				plx 								; restore stack pos
.9ddc		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger			; get value
.9ddf		5a		phy				phy
.9de0		48		pha				pha 								; save count
.9de1		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate
.9de4		7a		ply				ply 								; to do count in Y
.9de5						_SpcLoop:
.9de5		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9de7		f0 08		beq $9df1			beq 	_SpcExit
.9de9		a9 20		lda #$20			lda 	#32
.9deb		20 05 b2	jsr $b205			jsr 	StringTempWrite
.9dee		88		dey				dey
.9def		80 f4		bra $9de5			bra 	_SpcLoop
.9df1						_SpcExit:
.9df1		7a		ply				ply
.9df2		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.9df5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9df6						Unary_Str:
.9df6		fa		plx				plx
.9df7		20 31 9f	jsr $9f31			jsr 	EvaluateNumber  			; get number
.9dfa		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; closing bracket
.9dfd		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9dff		20 18 9e	jsr $9e18			jsr 	ConvertNumberToString 		; do the conversion.
.9e02		a9 21		lda #$21			lda		#33 						; create buffer
.9e04		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate 			; allocate memory
.9e07		da		phx				phx  								; copy the converted string into the buffer.
.9e08		a2 00		ldx #$00			ldx 	#0
.9e0a						_USCopy:
.9e0a		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9e0d		20 05 b2	jsr $b205			jsr 	StringTempWrite
.9e10		e8		inx				inx
.9e11		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9e14		d0 f4		bne $9e0a			bne 	_USCopy
.9e16		fa		plx				plx
.9e17		60		rts				rts
.9e18						ConvertNumberToString:
.9e18		5a		phy				phy 								; save code position
.9e19		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9e1c		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9e1f		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9e21		10 09		bpl $9e2c			bpl 	_CNTSNotNegative
.9e23		29 7f		and #$7f			and 	#$7F 						; make +ve
.9e25		95 50		sta $50,x			sta 	NSStatus,x
.9e27		a9 2d		lda #$2d			lda 	#"-"
.9e29		20 8d 9e	jsr $9e8d			jsr 	WriteDecimalBuffer
.9e2c						_CNTSNotNegative:
.9e2c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9e2e		f0 12		beq $9e42			beq 	_CNTSNotFloat
.9e30		e8		inx				inx 								; round up so we don't get too many 6.999999
.9e31		a9 01		lda #$01			lda 	#1
.9e33		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.9e36		ca		dex				dex
.9e37		b5 78		lda $78,x			lda		NSExponent,x
.9e39		95 79		sta $79,x			sta 	NSExponent+1,x
.9e3b		a9 08		lda #$08			lda 	#NSTFloat
.9e3d		95 51		sta $51,x			sta 	NSStatus+1,x
.9e3f		20 e7 95	jsr $95e7			jsr 	FloatAdd
.9e42						_CNTSNotFloat:
.9e42		20 6f 9e	jsr $9e6f			jsr 	MakePlusTwoString 			; do the integer part.
.9e45		20 ad 96	jsr $96ad			jsr 	FloatFractionalPart 		; get the fractional part
.9e48		20 5e 97	jsr $975e			jsr 	NSNormalise					; normalise , exit if zero
.9e4b		f0 20		beq $9e6d			beq 	_CNTSExit
.9e4d		a9 2e		lda #$2e			lda 	#"."
.9e4f		20 8d 9e	jsr $9e8d			jsr 	WriteDecimalBuffer 			; write decimal place
.9e52						_CNTSDecimal:
.9e52		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9e55		30 16		bmi $9e6d			bmi 	_CNTSExit
.9e57		e8		inx				inx 								; x 10.0
.9e58		a9 0a		lda #$0a			lda 	#10
.9e5a		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.9e5d		a9 08		lda #$08			lda 	#NSTFloat
.9e5f		95 50		sta $50,x			sta 	NSStatus,x
.9e61		ca		dex				dex
.9e62		20 2c 97	jsr $972c			jsr 	FloatMultiply
.9e65		20 6f 9e	jsr $9e6f			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9e68		20 ad 96	jsr $96ad			jsr 	FloatFractionalPart 		; get the fractional part
.9e6b		80 e5		bra $9e52			bra 	_CNTSDecimal 				; keep going.
.9e6d						_CNTSExit:
.9e6d		7a		ply				ply
.9e6e		60		rts				rts
.9e6f						MakePlusTwoString:
.9e6f		da		phx				phx
.9e70		20 c6 9f	jsr $9fc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e73		e8		inx				inx 								; access it
.9e74		e8		inx				inx
.9e75		20 05 97	jsr $9705			jsr 	FloatIntegerPart 			; make it an integer
.9e78		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9e7a		20 17 95	jsr $9517			jsr 	ConvertInt32
.9e7d		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9e7f						_MPTSCopy:
.9e7f		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9e82		20 8d 9e	jsr $9e8d			jsr 	WriteDecimalBuffer
.9e85		e8		inx				inx
.9e86		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9e89		d0 f4		bne $9e7f			bne 	_MPTSCopy
.9e8b		fa		plx				plx
.9e8c		60		rts				rts
.9e8d						WriteDecimalBuffer:
.9e8d		da		phx				phx
.9e8e		ae 15 04	ldx $0415			ldx 	dbOffset
.9e91		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9e94		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9e97		ee 15 04	inc $0415			inc 	dbOffset
.9e9a		fa		plx				plx
.9e9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9e9c						Unary_Left:
.9e9c		fa		plx				plx
.9e9d		18		clc				clc 								; only one parameter
.9e9e		20 01 9f	jsr $9f01			jsr 	SubstringInitial 			; set up.
.9ea1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ea3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9ea5		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ea7		80 25		bra $9ece			bra 	SubstringMain
.9ea9						Unary_Right:
.9ea9		fa		plx				plx
.9eaa		18		clc				clc 								; only one parameter
.9eab		20 01 9f	jsr $9f01			jsr 	SubstringInitial 			; set up.
.9eae		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9eb0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9eb2		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9eb4		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9eb6		b0 02		bcs $9eba			bcs 	_URNotUnderflow
.9eb8		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9eba						_URNotUnderflow:
.9eba		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ebc		80 10		bra $9ece			bra 	SubstringMain
.9ebe						Unary_Mid:
.9ebe		fa		plx				plx
.9ebf		38		sec				sec 								; two parameters
.9ec0		20 01 9f	jsr $9f01			jsr 	SubstringInitial 			; set up.
.9ec3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ec5		f0 04		beq $9ecb			beq 	_UMError
.9ec7		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ec9		80 03		bra $9ece			bra 	SubstringMain
.9ecb						_UMError:
.9ecb		4c 70 a1	jmp $a170			jmp 	ArgumentError
.9ece						SubstringMain:
.9ece		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9ed0		d5 78		cmp $78,x			cmp 	NSExponent,x
.9ed2		b0 27		bcs $9efb			bcs 	_SSMNull 					; if so, return an empty string.
.9ed4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ed6		f0 23		beq $9efb			beq 	_SSMNull 					; return empty string.
.9ed8		18		clc				clc 								; add the offset +1 to the address and
.9ed9		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9edb		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9edd		85 36		sta $36				sta 	zTemp0
.9edf		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9ee1		69 00		adc #$00			adc 	#0
.9ee3		85 37		sta $37				sta 	zTemp0+1
.9ee5						_SSMNoCarry:
.9ee5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9ee7		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate 			; allocate that many characters
.9eea		5a		phy				phy 								; save Y
.9eeb		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9eed						_SSMCopy:
.9eed		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9eef		f0 08		beq $9ef9			beq 	_SSMEString 				; no more to copy
.9ef1		20 05 b2	jsr $b205			jsr 	StringTempWrite 			; and write it out.
.9ef4		c8		iny				iny
.9ef5		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9ef7		d0 f4		bne $9eed			bne 	_SSMCopy
.9ef9						_SSMEString:
.9ef9		7a		ply				ply
.9efa						_SSMExit:
.9efa		60		rts				rts
.9efb						_SSMNull:
.9efb		a9 00		lda #$00			lda 	#0
.9efd		20 cc b1	jsr $b1cc			jsr 	StringTempAllocate
.9f00		60		rts				rts
.9f01						SubstringInitial:
.9f01		da		phx				phx 								; save initial stack position
.9f02		08		php				php 								; save carry on stack indicating 2 parameters
.9f03		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; get a string
.9f06		5a		phy				phy 								; calculate length to exponent.
.9f07		a0 ff		ldy #$ff			ldy 	#$FF
.9f09						_SIFindLength:
.9f09		c8		iny				iny
.9f0a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0c		d0 fb		bne $9f09			bne 	_SIFindLength
.9f0e		98		tya				tya
.9f0f		95 78		sta $78,x			sta 	NSExponent,x
.9f11		7a		ply				ply
.9f12		e8		inx				inx
.9f13		20 87 90	jsr $9087			jsr 	CheckComma 					; comma next
.9f16		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get next parameter
.9f19		28		plp				plp 								; is it the last parameter ?
.9f1a		90 07		bcc $9f23			bcc 	_SSIExit 					; if so, exit.
.9f1c		e8		inx				inx
.9f1d		20 87 90	jsr $9087			jsr 	CheckComma 					; comma next
.9f20		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get last parameter
.9f23						_SSIExit:
.9f23		fa		plx				plx
.9f24		20 7f 90	jsr $907f			jsr 	CheckRightBracket 			; check closing bracket
.9f27		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f28						EvaluateValue:
.9f28		48		pha				pha
.9f29		20 9c 95	jsr $959c			jsr		EvaluateExpression 			; expression
.9f2c		20 5f 98	jsr $985f			jsr 	Dereference					; derefernce it
.9f2f		68		pla				pla
.9f30		60		rts				rts
.9f31						EvaluateNumber:
.9f31		20 28 9f	jsr $9f28			jsr 	EvaluateValue 				; get a value
.9f34		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9f36		29 10		and #$10			and 	#NSBIsString
.9f38		d0 13		bne $9f4d			bne 	HelperTypeError
.9f3a		60		rts				rts
.9f3b						EvaluateString:
.9f3b		20 28 9f	jsr $9f28			jsr 	EvaluateValue 				; get a value
.9f3e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9f40		29 10		and #$10			and 	#NSBIsString
.9f42		f0 09		beq $9f4d			beq 	HelperTypeError
.9f44						CopyAddressToTemp0:
.9f44		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f46		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9f48		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f4a		85 37		sta $37				sta 	zTemp0+1
.9f4c		60		rts				rts
.9f4d						HelperTypeError:
.9f4d		4c 6b a1	jmp $a16b			jmp 	TypeError
.9f50						EvaluateInteger:
.9f50		20 31 9f	jsr $9f31			jsr 	EvaluateNumber
.9f53		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9f55		d0 09		bne $9f60			bne 	HelperValueError 			; if not, it's a float.
.9f57		60		rts				rts
.9f58						EvaluateUnsignedInteger:
.9f58		20 50 9f	jsr $9f50			jsr 	EvaluateInteger 			; check integer is +ve
.9f5b		b5 50		lda $50,x			lda 	NSStatus,x
.9f5d		30 01		bmi $9f60			bmi 	HelperValueError
.9f5f		60		rts				rts
.9f60						HelperValueError:
.9f60		4c 70 a1	jmp $a170			jmp 	ArgumentError
.9f63						Evaluate16BitInteger:
.9f63		20 58 9f	jsr $9f58			jsr	 	EvaluateUnsignedInteger		; get integer
.9f66		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9f68		15 68		ora $68,x			ora 	NSMantissa2,x
.9f6a		d0 f4		bne $9f60			bne 	HelperValueError
.9f6c		60		rts				rts
.9f6d						Evaluate16BitIntegerSigned:
.9f6d		20 50 9f	jsr $9f50			jsr	 	EvaluateInteger				; get integer
.9f70		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9f72		15 68		ora $68,x			ora 	NSMantissa2,x
.9f74		d0 ea		bne $9f60			bne 	HelperValueError
.9f76		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9f78		10 03		bpl $9f7d			bpl 	_EISNotSigned
.9f7a		20 ac 9f	jsr $9fac			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9f7d						_EISNotSigned:
.9f7d		60		rts				rts
.9f7e						Evaluate8BitInteger:
.9f7e		20 58 9f	jsr $9f58			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9f81		d0 dd		bne $9f60			bne 	HelperValueError
.9f83		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9f85		15 68		ora $68,x			ora 	NSMantissa2,x
.9f87		15 60		ora $60,x			ora 	NSMantissa1,x
.9f89		d0 d5		bne $9f60			bne 	HelperValueError
.9f8b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f8d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9f8e						Multiply8x8:
.9f8e		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9f8f		85 36		sta $36			  	sta 	zTemp0
.9f91		86 37		stx $37				stx 	zTemp0+1
.9f93		a9 00		lda #$00			lda 	#0
.9f95		a2 08		ldx #$08			ldx 	#8
.9f97						_M88Loop:
.9f97		90 03		bcc $9f9c			bcc 	_M88NoAdd
.9f99		18		clc				clc
.9f9a		65 37		adc $37				adc 	zTemp0+1
.9f9c						_M88NoAdd:
.9f9c		6a		ror a				ror 	a
.9f9d		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9f9f		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9fa0		d0 f5		bne $9f97			bne 	_M88Loop
.9fa2		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9fa4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9fa5						NSMNegate:
.9fa5		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9fa7		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9fa9		95 50		sta $50,x			sta 	NSStatus,x
.9fab		60		rts				rts
.9fac						NSMNegateMantissa:
.9fac		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9fad		a9 00		lda #$00			lda 	#0
.9faf		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9fb1		95 58		sta $58,x			sta 	NSMantissa0,x
.9fb3		a9 00		lda #$00			lda 	#0
.9fb5		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9fb7		95 60		sta $60,x			sta 	NSMantissa1,x
.9fb9		a9 00		lda #$00			lda 	#0
.9fbb		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9fbd		95 68		sta $68,x			sta 	NSMantissa2,x
.9fbf		a9 00		lda #$00			lda 	#0
.9fc1		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9fc3		95 70		sta $70,x			sta 	NSMantissa3,x
.9fc5		60		rts				rts
.9fc6						NSMShiftUpTwo:
.9fc6		b5 58		lda $58,x			lda 	NSMantissa0,x
.9fc8		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9fca		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fcc		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9fce		b5 68		lda $68,x			lda 	NSMantissa2,x
.9fd0		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9fd2		b5 70		lda $70,x			lda 	NSMantissa3,x
.9fd4		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9fd6		b5 78		lda $78,x			lda 	NSExponent,x
.9fd8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9fda		b5 50		lda $50,x			lda 	NSStatus,x
.9fdc		95 52		sta $52,x			sta 	NSStatus+2,x
.9fde		60		rts				rts
.9fdf						NSMSetZeroMantissaOnly:
.9fdf		a9 00		lda #$00			lda 	#0
.9fe1		80 06		bra $9fe9			bra 	NSMSetMantissa
.9fe3						NSMSetZero:
.9fe3		a9 00		lda #$00			lda 	#0
.9fe5						NSMSetByte:
.9fe5		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9fe7		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9fe9						NSMSetMantissa:
.9fe9		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9feb		74 60		stz $60,x			stz 	NSMantissa1,x
.9fed		74 68		stz $68,x			stz 	NSMantissa2,x
.9fef		74 70		stz $70,x			stz 	NSMantissa3,x
.9ff1		60		rts				rts
.9ff2						NSMShiftLeft:
.9ff2		18		clc				clc
.9ff3						NSMRotateLeft:
.9ff3		36 58		rol $58,x			rol 	NSMantissa0,x
.9ff5		36 60		rol $60,x			rol		NSMantissa1,x
.9ff7		36 68		rol $68,x			rol		NSMantissa2,x
.9ff9		36 70		rol $70,x			rol		NSMantissa3,x
.9ffb		60		rts				rts
.9ffc						NSMShiftRight:
.9ffc		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9ffe		76 68		ror $68,x			ror		NSMantissa2,x
.a000		76 60		ror $60,x			ror		NSMantissa1,x
.a002		76 58		ror $58,x			ror		NSMantissa0,x
.a004		60		rts				rts
.a005						NSMIsZero:
.a005		b5 70		lda $70,x			lda 	NSMantissa3,x
.a007		15 68		ora $68,x			ora		NSMantissa2,x
.a009		15 60		ora $60,x			ora		NSMantissa1,x
.a00b		15 58		ora $58,x			ora		NSMantissa0,x
.a00d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a00e						TickHandler:
.a00e		5a		phy				phy 								; need to preserve Y
.a00f		20 8f 80	jsr $808f			jsr 	SNDUpdate 					; update sound
.a012		7a		ply				ply
.a013		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a014						Assemble_ora:
.a014		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a017		01					.byte $01
.a018						Assemble_and:
.a018		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a01b		21					.byte $21
.a01c						Assemble_eor:
.a01c		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a01f		41					.byte $41
.a020						Assemble_adc:
.a020		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a023		61					.byte $61
.a024						Assemble_sta:
.a024		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a027		81					.byte $81
.a028						Assemble_lda:
.a028		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a02b		a1					.byte $a1
.a02c						Assemble_cmp:
.a02c		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a02f		c1					.byte $c1
.a030						Assemble_sbc:
.a030		20 f5 80	jsr $80f5		jsr	AssembleGroup1
>a033		e1					.byte $e1
.a034						Assemble_asl:
.a034		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a037		02					.byte $02
>a038		75					.byte $75
.a039						Assemble_rol:
.a039		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a03c		22					.byte $22
>a03d		75					.byte $75
.a03e						Assemble_lsr:
.a03e		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a041		42					.byte $42
>a042		75					.byte $75
.a043						Assemble_ror:
.a043		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a046		62					.byte $62
>a047		75					.byte $75
.a048						Assemble_stx:
.a048		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a04b		82					.byte $82
>a04c		50					.byte $50
.a04d						Assemble_ldx:
.a04d		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a050		a2					.byte $a2
>a051		d0					.byte $d0
.a052						Assemble_dec:
.a052		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a055		c2					.byte $c2
>a056		55					.byte $55
.a057						Assemble_inc:
.a057		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a05a		e2					.byte $e2
>a05b		55					.byte $55
.a05c						Assemble_stz:
.a05c		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a05f		60					.byte $60
>a060		44					.byte $44
.a061						Assemble_bit:
.a061		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a064		20					.byte $20
>a065		55					.byte $55
.a066						Assemble_sty:
.a066		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a069		80					.byte $80
>a06a		54					.byte $54
.a06b						Assemble_ldy:
.a06b		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a06e		a0					.byte $a0
>a06f		d5					.byte $d5
.a070						Assemble_cpy:
.a070		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a073		c0					.byte $c0
>a074		d4					.byte $d4
.a075						Assemble_cpx:
.a075		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a078		e0					.byte $e0
>a079		d0					.byte $d0
.a07a						Assemble_tsb:
.a07a		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a07d		00					.byte $00
>a07e		50					.byte $50
.a07f						Assemble_trb:
.a07f		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a082		10					.byte $10
>a083		50					.byte $50
.a084						Assemble_jsr:
.a084		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a087		14					.byte $14
>a088		10					.byte $10
.a089						Assemble_jmp:
.a089		20 fc 80	jsr $80fc		jsr	AssembleGroup2
>a08c		40					.byte $40
>a08d		10					.byte $10
.a08e						Assemble_bpl:
.a08e		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a091		10					.byte $10
.a092						Assemble_bmi:
.a092		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a095		30					.byte $30
.a096						Assemble_bvc:
.a096		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a099		50					.byte $50
.a09a						Assemble_bvs:
.a09a		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a09d		70					.byte $70
.a09e						Assemble_bcc:
.a09e		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a0a1		90					.byte $90
.a0a2						Assemble_bcs:
.a0a2		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a0a5		b0					.byte $b0
.a0a6						Assemble_bne:
.a0a6		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a0a9		d0					.byte $d0
.a0aa						Assemble_beq:
.a0aa		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a0ad		f0					.byte $f0
.a0ae						Assemble_bra:
.a0ae		20 4d 81	jsr $814d		jsr	AssembleGroup3
>a0b1		80					.byte $80
.a0b2						Assemble_brk:
.a0b2		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0b5		00					.byte $00
.a0b6						Assemble_php:
.a0b6		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0b9		08					.byte $08
.a0ba						Assemble_clc:
.a0ba		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0bd		18					.byte $18
.a0be						Assemble_plp:
.a0be		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0c1		28					.byte $28
.a0c2						Assemble_sec:
.a0c2		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0c5		38					.byte $38
.a0c6						Assemble_rti:
.a0c6		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0c9		40					.byte $40
.a0ca						Assemble_pha:
.a0ca		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0cd		48					.byte $48
.a0ce						Assemble_cli:
.a0ce		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0d1		58					.byte $58
.a0d2						Assemble_phy:
.a0d2		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0d5		5a					.byte $5a
.a0d6						Assemble_rts:
.a0d6		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0d9		60					.byte $60
.a0da						Assemble_pla:
.a0da		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0dd		68					.byte $68
.a0de						Assemble_sei:
.a0de		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0e1		78					.byte $78
.a0e2						Assemble_ply:
.a0e2		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0e5		7a					.byte $7a
.a0e6						Assemble_dey:
.a0e6		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0e9		88					.byte $88
.a0ea						Assemble_txa:
.a0ea		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0ed		8a					.byte $8a
.a0ee						Assemble_tya:
.a0ee		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0f1		98					.byte $98
.a0f2						Assemble_txs:
.a0f2		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0f5		9a					.byte $9a
.a0f6						Assemble_tay:
.a0f6		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0f9		a8					.byte $a8
.a0fa						Assemble_tax:
.a0fa		20 81 81	jsr $8181		jsr	AssembleGroup4
>a0fd		aa					.byte $aa
.a0fe						Assemble_clv:
.a0fe		20 81 81	jsr $8181		jsr	AssembleGroup4
>a101		b8					.byte $b8
.a102						Assemble_tsx:
.a102		20 81 81	jsr $8181		jsr	AssembleGroup4
>a105		ba					.byte $ba
.a106						Assemble_iny:
.a106		20 81 81	jsr $8181		jsr	AssembleGroup4
>a109		c8					.byte $c8
.a10a						Assemble_dex:
.a10a		20 81 81	jsr $8181		jsr	AssembleGroup4
>a10d		ca					.byte $ca
.a10e						Assemble_cld:
.a10e		20 81 81	jsr $8181		jsr	AssembleGroup4
>a111		d8					.byte $d8
.a112						Assemble_phx:
.a112		20 81 81	jsr $8181		jsr	AssembleGroup4
>a115		da					.byte $da
.a116						Assemble_stp:
.a116		20 81 81	jsr $8181		jsr	AssembleGroup4
>a119		db					.byte $db
.a11a						Assemble_inx:
.a11a		20 81 81	jsr $8181		jsr	AssembleGroup4
>a11d		e8					.byte $e8
.a11e						Assemble_nop:
.a11e		20 81 81	jsr $8181		jsr	AssembleGroup4
>a121		ea					.byte $ea
.a122						Assemble_sed:
.a122		20 81 81	jsr $8181		jsr	AssembleGroup4
>a125		f8					.byte $f8
.a126						Assemble_plx:
.a126		20 81 81	jsr $8181		jsr	AssembleGroup4
>a129		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a12a						DecimalScalarTable:
>a12a		66 66 66 66				.dword $66666666 ; 0.1
>a12e		de					.byte $de
>a12f		1f 85 eb 51				.dword $51eb851f ; 0.01
>a133		db					.byte $db
>a134		4c 37 89 41				.dword $4189374c ; 0.001
>a138		d8					.byte $d8
>a139		ac 8b db 68				.dword $68db8bac ; 0.0001
>a13d		d4					.byte $d4
>a13e		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a142		d1					.byte $d1
>a143		83 de 1b 43				.dword $431bde83 ; 1e-06
>a147		ce					.byte $ce
>a148		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a14c		ca					.byte $ca
>a14d		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a151		c7					.byte $c7
>a152		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a156		c4					.byte $c4
>a157		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a15b		c0					.byte $c0
>a15c		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a160		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a161						SyntaxError:
.a161		a9 02		lda #$02		lda	#2
.a163		4c 98 90	jmp $9098		jmp	ErrorHandler
.a166						RangeError:
.a166		a9 04		lda #$04		lda	#4
.a168		4c 98 90	jmp $9098		jmp	ErrorHandler
.a16b						TypeError:
.a16b		a9 05		lda #$05		lda	#5
.a16d		4c 98 90	jmp $9098		jmp	ErrorHandler
.a170						ArgumentError:
.a170		a9 07		lda #$07		lda	#7
.a172		4c 98 90	jmp $9098		jmp	ErrorHandler
.a175						NotDoneError:
.a175		a9 0c		lda #$0c		lda	#12
.a177		4c 98 90	jmp $9098		jmp	ErrorHandler
.a17a						ErrorText:
>a17a		42 72 65 61 6b 00			.text	"Break",0
>a180		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a188		72 72 6f 72 00
>a18d		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a195		20 62 79 20 7a 65 72 6f 00
>a19e		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a1a6		61 6e 67 65 00
>a1ab		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a1b3		6d 61 74 63 68 00
>a1b9		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a1c1		65 6d 6f 72 79 00
>a1c7		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a1cf		61 72 67 75 6d 65 6e 74 00
>a1d8		53 74 6f 70 00				.text	"Stop",0
>a1dd		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a1e5		6f 6f 20 6c 6f 6e 67 00
>a1ed		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a1f5		6e 20 66 61 69 6c 65 64 00
>a1fe		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a206		61 74 61 00
>a20a		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a212		65 6e 74 65 64 00
>a218		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a220		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a22c		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a234		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a241		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a249		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a256		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a25e		68 6f 75 74 20 57 68 69 6c 65 00
>a269		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a271		68 6f 75 74 20 46 6f 72 00
>a27a		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a282		61 63 6b 20 66 75 6c 6c 00
>a28b		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a293		75 63 74 75 72 65 00
>a29a		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a2a2		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a2af		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a2b7		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a2c5		41 72 72 61 79 20 73 69			.text	"Array size",0
>a2cd		7a 65 00
>a2d0		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a2d8		79 20 69 6e 64 65 78 00
>a2e0		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a2e8		74 20 64 65 63 6c 61 72 65 64 00
>a2f3		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a2fb		20 66 6f 75 6e 64 00
>a302		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a30a		65 72 72 6f 72 00
>a310		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a318		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a31e		41 6c 70 68 61 20 31 39			.text "Alpha 19 built 31-Dec-22. "
>a326		20 62 75 69 6c 74 20 33 31 2d 44 65 63 2d 32 32
>a336		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a338						RectangleCommand:
.a338		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a33a		80 02		bra $a33e			bra 	ShapeDrawCmd
.a33c						CircleCommand:
.a33c		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a33e						ShapeDrawCmd:
.a33e		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a341						ShapeDraw:
.a341		0d 60 06	ora $0660			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a344		4c bc a3	jmp $a3bc			jmp 	ExecuteGraphicCommand	 	; and complete
.a347						SpriteCommand:
.a347		a2 00		ldx #$00			ldx 	#0
.a349		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get image number.
.a34c		5a		phy				phy
.a34d		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a34f		a6 58		ldx $58				ldx 	NSMantissa0
.a351		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a353		b0 0d		bcs $a362			bcs 	_SCRange
.a355		a0 ff		ldy #$ff			ldy 	#255
.a357		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a35a		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a35c		7a		ply				ply
.a35d		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a360		80 5a		bra $a3bc			bra 	ExecuteGraphicCommand
.a362						_SCRange:
.a362		4c 66 a1	jmp $a166			jmp 	RangeError
.a365						ImageCommand:
.a365		a2 00		ldx #$00			ldx 	#0
.a367		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get image number.
.a36a		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a36d						ImageRunDraw:
.a36d		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a36f		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a372		ad 66 06	lda $0666			lda 	gxDrawScale
.a375		0a		asl a				asl 	a
.a376		0a		asl a				asl 	a
.a377		0a		asl a				asl 	a
.a378		a8		tay				tay
.a379		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a37b		a6 58		ldx $58				ldx 	NSMantissa0
.a37d		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a380		60		rts				rts
.a381						TextCommand:
.a381		a2 00		ldx #$00			ldx 	#0
.a383		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; get text
.a386		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a389						TextRunDraw:
.a389		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a38b		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a38e		a0 00		ldy #$00			ldy 	#0
.a390						_IRDLoop:
.a390		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a392		85 37		sta $37				sta 	zTemp0+1
.a394		a5 58		lda $58				lda 	NSMantissa0
.a396		85 36		sta $36				sta 	zTemp0
.a398		b1 36		lda ($36),y			lda 	(zTemp0),y
.a39a		f0 13		beq $a3af			beq 	_IRDExit
.a39c		5a		phy				phy									; save string pos
.a39d		48		pha				pha 								; save char
.a39e		ad 66 06	lda $0666			lda 	gxDrawScale 				; get scale
.a3a1		0a		asl a				asl 	a
.a3a2		0a		asl a				asl 	a
.a3a3		0a		asl a				asl 	a
.a3a4		a8		tay				tay
.a3a5		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a3a7		fa		plx				plx 								; char to draw
.a3a8		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3ab		7a		ply				ply 								; restore string pos
.a3ac		c8		iny				iny
.a3ad		90 e1		bcc $a390			bcc 	_IRDLoop 					; go back if no error.
.a3af						_IRDExit:
.a3af		60		rts				rts
.a3b0						PlotCommand:
.a3b0		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a3b2		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a3b5		80 05		bra $a3bc			bra 	ExecuteGraphicCommand
.a3b7						LineCommand:
.a3b7		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a3b9		20 c8 a3	jsr $a3c8			jsr 	RunGraphicsCommand
.a3bc						ExecuteGraphicCommand:
.a3bc		0d 5f 06	ora $065f			ora 	gxCommandID 				; make a full command
.a3bf		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; draw it and exit
.a3c2		b0 01		bcs $a3c5			bcs 	_EGCError
.a3c4		60		rts				rts
.a3c5						_EGCError:
.a3c5		4c 61 a1	jmp $a161			jmp 	SyntaxError
.a3c8						RunGraphicsCommand:
.a3c8		8d 5f 06	sta $065f			sta 	gxCommandID					; save TODO graphics command.
.a3cb		68		pla				pla 								; pop handler address
.a3cc		fa		plx				plx
.a3cd		1a		inc a				inc 	a
.a3ce		d0 01		bne $a3d1			bne 	_RGINoCarry
.a3d0		e8		inx				inx
.a3d1						_RGINoCarry:
.a3d1		8d 64 06	sta $0664			sta 	gxHandler
.a3d4		8e 65 06	stx $0665			stx 	gxHandler+1
.a3d7						_RGICommandLoop:
.a3d7		b1 30		lda ($30),y			lda 	(codePtr),y
.a3d9		c8		iny				iny
.a3da		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a3dc		f0 53		beq $a431			beq 	_RGI_To
.a3de		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a3e0		f0 55		beq $a437			beq 	_RGI_Here
.a3e2		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a3e4		f0 3d		beq $a423			beq 	_RGI_Exit
.a3e6		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a3e8		f0 39		beq $a423			beq 	_RGI_Exit
.a3ea		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a3ec		f0 3e		beq $a42c			beq 	_RGI_Frame
.a3ee		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a3f0		f0 33		beq $a425			beq 	_RGI_Solid
.a3f2		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a3f4		f0 4b		beq $a441			beq 	_RGI_By
.a3f6		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a3f8		f0 17		beq $a411			beq 	_RGI_Move2
.a3fa		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a3fc		f0 62		beq $a460			beq 	_RGI_Dim
.a3fe		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a400		f0 74		beq $a476			beq 	_RGI_Colour
.a402		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a404		f0 70		beq $a476			beq 	_RGI_Colour
.a406		ae 5f 06	ldx $065f			ldx 	gxCommandID
.a409		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a40b		d0 03		bne $a410			bne 	_RGI_Move 					; move
.a40d		4c 9e a4	jmp $a49e			jmp		_RGI_SpriteInstructions
.a410						_RGI_Move:
.a410		88		dey				dey 								; unpick get.
.a411						_RGI_Move2:
.a411		20 c4 a4	jsr $a4c4			jsr 	GCGetCoordinatePair 		; move to here
.a414		20 eb a4	jsr $a4eb			jsr 	GCCopyPairToStore 			; save
.a417		5a		phy				phy
.a418		20 e1 a4	jsr $a4e1			jsr 	GCLoadAXY 					; load in
.a41b		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a41d		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a420		7a		ply				ply
.a421		80 b4		bra $a3d7			bra 	_RGICommandLoop 			; and go round
.a423						_RGI_Exit:
.a423		88		dey				dey 								; unpick : / EOL
.a424		60		rts				rts
.a425						_RGI_Solid:
.a425		a9 02		lda #$02			lda 	#2
.a427		8d 60 06	sta $0660			sta 	gxFillSolid
.a42a		80 ab		bra $a3d7			bra 	_RGICommandLoop
.a42c						_RGI_Frame:
.a42c		9c 60 06	stz $0660			stz 	gxFillSolid
.a42f		80 a6		bra $a3d7			bra 	_RGICommandLoop
.a431						_RGI_To:
.a431		20 c4 a4	jsr $a4c4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a434		20 eb a4	jsr $a4eb			jsr 	GCCopyPairToStore
.a437						_RGI_Here:
.a437		5a		phy				phy
.a438		20 e1 a4	jsr $a4e1			jsr 	GCLoadAXY 					; load it into AXY
.a43b		20 9b a4	jsr $a49b			jsr 	_RGICallHandler 			; go do whatever it is.
.a43e		7a		ply				ply
.a43f		80 96		bra $a3d7			bra 	_RGICommandLoop 			; and go round
.a441						_RGI_By:
.a441		20 d1 a4	jsr $a4d1			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a444		18		clc				clc
.a445		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a447		6d 61 06	adc $0661			adc 	gxXPos
.a44a		8d 61 06	sta $0661			sta 	gxXPos
.a44d		a5 61		lda $61				lda 	NSMantissa1+1
.a44f		6d 62 06	adc $0662			adc 	gxXPos+1
.a452		8d 62 06	sta $0662			sta 	gxXPos+1
.a455		a5 5a		lda $5a				lda 	NSMantissa0+2
.a457		18		clc				clc
.a458		6d 63 06	adc $0663			adc 	gxYPos
.a45b		8d 63 06	sta $0663			sta 	gxYPos
.a45e		80 d7		bra $a437			bra 	_RGI_Here
.a460						_RGI_Dim:
.a460		a2 01		ldx #$01			ldx	 	#1
.a462		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger
.a465		a5 59		lda $59				lda 	NSMantissa0+1
.a467		c9 00		cmp #$00			cmp 	#0
.a469		f0 2d		beq $a498			beq 	_RGIRange
.a46b		c9 09		cmp #$09			cmp 	#8+1
.a46d		b0 29		bcs $a498			bcs		_RGIRange
.a46f		3a		dec a				dec 	a
.a470		8d 66 06	sta $0666			sta 	gxDrawScale
.a473		4c d7 a3	jmp $a3d7			jmp 	_RGICommandLoop
.a476						_RGI_Colour:
.a476		a2 01		ldx #$01			ldx 	#1 							; colour
.a478		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger
.a47b		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a47d		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.a480		b1 30		lda ($30),y			lda 	(codePtr),y
.a482		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a484		d0 04		bne $a48a			bne 	_RGICDefaultMode
.a486		c8		iny				iny
.a487		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger
.a48a						_RGICDefaultMode:
.a48a		5a		phy				phy
.a48b		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a48d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a48f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a491		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a494		7a		ply				ply
.a495		4c d7 a3	jmp $a3d7			jmp 	_RGICommandLoop 			; and go round
.a498						_RGIRange:
.a498		4c 66 a1	jmp $a166			jmp 	RangeError
.a49b						_RGICallHandler:
.a49b		6c 64 06	jmp ($0664)			jmp 	(gxHandler)
.a49e						_RGI_SpriteInstructions:
.a49e		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a4a0		f0 07		beq $a4a9			beq 	_RGISpriteOff
.a4a2		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a4a4		f0 13		beq $a4b9			beq 	_RGISetImage
.a4a6		4c 10 a4	jmp $a410			jmp 	_RGI_Move
.a4a9						_RGISpriteOff:
.a4a9		5a		phy				phy
.a4aa		a0 01		ldy #$01			ldy 	#1
.a4ac		a2 00		ldx #$00			ldx 	#0
.a4ae						_RGIDoCommandLoop:
.a4ae		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a4b0		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a4b3		7a		ply				ply
.a4b4		b0 e2		bcs $a498			bcs 	_RGIRange
.a4b6		4c d7 a3	jmp $a3d7			jmp 	_RGICommandLoop
.a4b9						_RGISetImage:
.a4b9		a2 01		ldx #$01			ldx 	#1
.a4bb		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger
.a4be		5a		phy				phy
.a4bf		aa		tax				tax
.a4c0		a0 00		ldy #$00			ldy 	#0
.a4c2		80 ea		bra $a4ae			bra 	_RGIDoCommandLoop
.a4c4						GCGetCoordinatePair:
.a4c4		a2 01		ldx #$01			ldx 	#1
.a4c6		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.a4c9		20 87 90	jsr $9087			jsr 	CheckComma
.a4cc		e8		inx				inx
.a4cd		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.a4d0		60		rts				rts
.a4d1						GCSignedCoordinatePair:
.a4d1		a2 01		ldx #$01			ldx 	#1
.a4d3		20 6d 9f	jsr $9f6d			jsr 	Evaluate16BitIntegerSigned
.a4d6		20 87 90	jsr $9087			jsr 	CheckComma
.a4d9		e8		inx				inx
.a4da		20 6d 9f	jsr $9f6d			jsr 	Evaluate16BitIntegerSigned
.a4dd		60		rts				rts
.a4de						_GCCPRange:
.a4de		4c 66 a1	jmp $a166			jmp 	RangeError
.a4e1						GCLoadAXY:
.a4e1		ad 62 06	lda $0662			lda 	gxXPos+1
.a4e4		ae 61 06	ldx $0661			ldx 	gxXPos
.a4e7		ac 63 06	ldy $0663			ldy 	gxYPos
.a4ea		60		rts				rts
.a4eb						GCCopyPairToStore:
.a4eb		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a4ed		8d 61 06	sta $0661			sta 	gxXPos
.a4f0		a5 61		lda $61				lda 	NSMantissa1+1
.a4f2		8d 62 06	sta $0662			sta 	gxXPos+1
.a4f5		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4f7		8d 63 06	sta $0663			sta 	gxYPos
.a4fa		60		rts				rts
.065f						gxCommandID:
>065f								.fill 	1
.0660						gxFillSolid:
>0660								.fill 	1
.0661						gxXPos:
>0661								.fill 	2
.0663						gxYPos:
>0663								.fill 	1
.0664						gxHandler:
>0664								.fill 	2
.0666						gxDrawScale:
>0666								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a4fb						BitmapCtrl:
.a4fb		b1 30		lda ($30),y			lda 	(codePtr),y
.a4fd		c8		iny				iny
.a4fe		a2 01		ldx #$01			ldx 	#1
.a500		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a502		f0 11		beq $a515			beq 	BitmapSwitch
.a504		ca		dex				dex
.a505		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a507		f0 0c		beq $a515			beq 	BitmapSwitch
.a509		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get the colour
.a50c		5a		phy				phy
.a50d		aa		tax				tax
.a50e		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a510		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a513		7a		ply				ply
.a514		60		rts				rts
.a515						BitmapSwitch:
.a515		5a		phy				phy
.a516		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a518		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a51a		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a51d		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a51f		a0 00		ldy #$00			ldy 	#0
.a521		a2 ff		ldx #$ff			ldx 	#$FF
.a523		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a526		9c 60 06	stz $0660			stz 	gxFillSolid
.a529		9c 61 06	stz $0661			stz 	gxXPos
.a52c		9c 62 06	stz $0662			stz 	gxXPos+1
.a52f		9c 63 06	stz $0663			stz 	gxYPos
.a532		9c 66 06	stz $0666			stz 	gxDrawScale
.a535		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a537		a2 00		ldx #$00			ldx 	#0
.a539		a0 00		ldy #$00			ldy 	#0
.a53b		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a53e		7a		ply				ply
.a53f		60		rts				rts
.a540						SpritesCtrl:
.a540		b1 30		lda ($30),y			lda 	(codePtr),y
.a542		c8		iny				iny
.a543		a2 01		ldx #$01			ldx 	#1
.a545		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a547		f0 08		beq $a551			beq 	SpriteSwitch
.a549		ca		dex				dex
.a54a		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a54c		f0 03		beq $a551			beq 	SpriteSwitch
.a54e		4c 61 a1	jmp $a161			jmp 	SyntaxError
.a551						SpriteSwitch:
.a551		5a		phy				phy
.a552		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a554		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a556		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a559		7a		ply				ply
.a55a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a55b						GfxCommand:
.a55b		a2 00		ldx #$00			ldx 	#0
.a55d		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; command
.a560		20 87 90	jsr $9087			jsr 	CheckComma
.a563		e8		inx				inx
.a564		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; X
.a567		20 87 90	jsr $9087			jsr 	CheckComma
.a56a		e8		inx				inx
.a56b		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; Y
.a56e		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a570		4a		lsr a				lsr 	a
.a571		d0 12		bne $a585			bne 	_GfxError
.a573		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a575		b0 0e		bcs $a585			bcs 	_GfxError 					; bit 7 should have been zero
.a577		5a		phy				phy 								; save pos
.a578		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a57a		a6 59		ldx $59				ldx 	NSMantissa0+1
.a57c		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a57e		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a581		b0 02		bcs $a585			bcs 	_GfxError
.a583		7a		ply				ply 								; restore pos and exit.
.a584		60		rts				rts
.a585						_GfxError:
.a585		4c 66 a1	jmp $a166			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a588						UnaryHit:
.a588		fa		plx				plx
.a589		a9 36		lda #$36			lda 	#zTemp0
.a58b		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a58e		20 87 90	jsr $9087			jsr 	CheckComma
.a591		e8		inx				inx
.a592		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a595		20 7f 90	jsr $907f			jsr		CheckRightBracket
.a598		ca		dex				dex 								; fix back up again.
.a599		da		phx				phx 								; save X/Y
.a59a		5a		phy				phy
.a59b		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a59d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a59f		aa		tax				tax
.a5a0		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a5a2		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; calculate result
.a5a5		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a5a6		7a		ply				ply 								; restore XY
.a5a7		fa		plx				plx
.a5a8		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte 					; return the hit result
.a5ab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a5ac						PaletteCommand:
.a5ac		a2 00		ldx #$00			ldx 	#0
.a5ae		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; colour
.a5b1		20 87 90	jsr $9087			jsr 	CheckComma
.a5b4		e8		inx				inx
.a5b5		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; r
.a5b8		20 87 90	jsr $9087			jsr 	CheckComma
.a5bb		e8		inx				inx
.a5bc		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; g
.a5bf		20 87 90	jsr $9087			jsr 	CheckComma
.a5c2		e8		inx				inx
.a5c3		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; b
.a5c6		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a5c8		85 36		sta $36				sta 	zTemp0
.a5ca		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a5cc		85 37		sta $37				sta 	zTemp0+1
.a5ce		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a5d0		26 37		rol $37				rol	 	zTemp0+1
.a5d2		06 36		asl $36				asl 	zTemp0
.a5d4		26 37		rol $37				rol	 	zTemp0+1
.a5d6		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a5d8		85 01		sta $01				sta 	1
.a5da		5a		phy				phy
.a5db		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a5dd		92 36		sta ($36)			sta 	(zTemp0)
.a5df		a0 01		ldy #$01			ldy 	#1
.a5e1		a5 5a		lda $5a				lda 	NSMantissa0+2
.a5e3		91 36		sta ($36),y			sta 	(zTemp0),y
.a5e5		a5 59		lda $59				lda 	NSMantissa0+1
.a5e7		c8		iny				iny
.a5e8		91 36		sta ($36),y			sta 	(zTemp0),y
.a5ea		7a		ply				ply
.a5eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a5ec						XLoadCommand:
.a5ec		20 f6 8a	jsr $8af6			jsr 	NewProgram
.a5ef		20 64 83	jsr $8364			jsr 	BackloadProgram
.a5f2		4c 23 84	jmp $8423			jmp 	WarmStart
.a5f5						XGoCommand:
.a5f5		20 f6 8a	jsr $8af6			jsr 	NewProgram
.a5f8		20 64 83	jsr $8364			jsr 	BackloadProgram
.a5fb		4c 74 8c	jmp $8c74			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a5fe						UnaryEvent:
.a5fe		fa		plx				plx
.a5ff		20 98 a6	jsr $a698			jsr 	TimerToStackX 				; timer in +0
.a602		e8		inx				inx  								; put reference into +1
.a603		20 e6 99	jsr $99e6			jsr 	EvaluateTerm
.a606		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a608		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a60a		d0 4c		bne $a658			bne 	_UEType
.a60c		e8		inx				inx 								; put the step in +2
.a60d		20 87 90	jsr $9087			jsr 	CheckComma
.a610		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger
.a613		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.a616		ca		dex				dex
.a617		ca		dex				dex
.a618		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a61a		85 36		sta $36				sta 	zTemp0
.a61c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a61e		85 37		sta $37				sta 	zTemp0+1
.a620		5a		phy				phy
.a621		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a623		b1 36		lda ($36),y			lda 	(zTemp0),y
.a625		30 2d		bmi $a654			bmi 	_UEFalse 					; exit if signed.
.a627		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a629		b5 58		lda $58,x			lda 	NSMantissa0,x
.a62b		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a62d		c8		iny				iny
.a62e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a630		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a632		c8		iny				iny
.a633		b5 68		lda $68,x			lda 	NSMantissa2,x
.a635		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a637		90 1b		bcc $a654			bcc 	_UEFalse 					; no, return FALSE.
.a639		18		clc				clc
.a63a		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a63c		b5 58		lda $58,x			lda 	NSMantissa0,x
.a63e		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a640		91 36		sta ($36),y			sta 	(zTemp0),y
.a642		c8		iny				iny
.a643		b5 60		lda $60,x			lda 	NSMantissa1,x
.a645		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a647		91 36		sta ($36),y			sta 	(zTemp0),y
.a649		c8		iny				iny
.a64a		b5 68		lda $68,x			lda 	NSMantissa2,x
.a64c		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a64e		91 36		sta ($36),y			sta 	(zTemp0),y
.a650		7a		ply				ply
.a651		4c 05 91	jmp $9105			jmp 	ReturnTrue
.a654						_UEFalse:
.a654		7a		ply				ply 								; restore Y
.a655		4c 10 91	jmp $9110			jmp 	ReturnFalse 				; and return False
.a658						_UEType:
.a658		4c 6b a1	jmp $a16b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a65b						UnaryJoyX:
.a65b		18		clc				clc
.a65c		80 01		bra $a65f			bra 	JoyMain
.a65e						UnaryJoyY:
.a65e		38		sec				sec
.a65f						JoyMain:
.a65f		fa		plx				plx 								; get pos
.a660		08		php				php 								; save carry (set for Y)
.a661		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a664		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.a667		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a66a		28		plp				plp
.a66b		b0 02		bcs $a66f			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a66d		4a		lsr a				lsr 	a
.a66e		4a		lsr a				lsr 	a
.a66f						_JMNoShift:
.a66f		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a670		b0 07		bcs $a679			bcs 	JMIsLeft
.a672		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a673		b0 07		bcs $a67c			bcs 	JMIsRight
.a675		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; zero result
.a678		60		rts				rts
.a679						JMIsLeft:
.a679		4c 05 91	jmp $9105			jmp 	ReturnTrue
.a67c						JMIsRight:
.a67c		a9 01		lda #$01			lda 	#1
.a67e		20 e5 9f	jsr $9fe5			jsr 	NSMSetByte
.a681		60		rts				rts
.a682						UnaryJoyB:
.a682		fa		plx				plx 								; get pos
.a683		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a686		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.a689		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a68c		29 10		and #$10			and 	#$10
.a68e		d0 e9		bne $a679			bne 	JMIsLeft
.a690		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero
.a693		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a694						UnaryTimer:
.a694		fa		plx				plx
.a695		20 7f 90	jsr $907f			jsr 	CheckRightBracket
.a698						TimerToStackX:
.a698		20 e3 9f	jsr $9fe3			jsr 	NSMSetZero 					; zero result
.a69b		64 01		stz $01				stz 	1 							; access I/O
.a69d		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a6a0		95 58		sta $58,x			sta 	NSMantissa0,x
.a6a2		ad 5a d6	lda $d65a			lda 	$D65A
.a6a5		95 60		sta $60,x			sta 	NSMantissa1,x
.a6a7		ad 5b d6	lda $d65b			lda 	$D65B
.a6aa		95 68		sta $68,x			sta 	NSMantissa2,x
.a6ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a6ad						MemoryDeleteLine:
.a6ad		20 cc a6	jsr $a6cc			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6b0		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a6b2		a8		tay				tay
.a6b3						_MDDLLoop:
.a6b3		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a6b5		92 30		sta ($30)			sta 	(codePtr)
.a6b7		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a6b9		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a6bb		d0 07		bne $a6c4			bne 	_MDLDLNext
.a6bd		a5 31		lda $31				lda 	codePtr+1
.a6bf		c5 3b		cmp $3b				cmp 	zTemp2+1
.a6c1		d0 01		bne $a6c4			bne 	_MDLDLNext
.a6c3						_MDDLExit:
.a6c3		60		rts				rts
.a6c4						_MDLDLNext:
.a6c4		e6 30		inc $30				inc 	codePtr						; next byte
.a6c6		d0 eb		bne $a6b3			bne 	_MDDLLoop
.a6c8		e6 31		inc $31				inc 	codePtr+1
.a6ca		80 e7		bra $a6b3			bra 	_MDDLLoop
.a6cc						IMemoryFindEnd:
.a6cc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6ce		85 3a		sta $3a				sta 	0+zTemp2
.a6d0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6d2		85 3b		sta $3b				sta 	1+zTemp2
.a6d4						_MDLFELoop:
.a6d4		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a6d6		f0 0b		beq $a6e3			beq 	_MDLFEExit
.a6d8		18		clc				clc
.a6d9		65 3a		adc $3a				adc 	zTemp2
.a6db		85 3a		sta $3a				sta 	zTemp2
.a6dd		90 f5		bcc $a6d4			bcc 	_MDLFELoop
.a6df		e6 3b		inc $3b				inc 	zTemp2+1
.a6e1		80 f1		bra $a6d4			bra 	_MDLFELoop
.a6e3						_MDLFEExit:
.a6e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a6e4						MemoryInsertLine:
.a6e4		08		php				php
.a6e5		20 cc a6	jsr $a6cc			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6e8		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a6ea		1a		inc a				inc 	a
.a6eb		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a6ed		b0 36		bcs $a725			bcs 	_MDLIError 					; no, fail.
.a6ef		28		plp				plp 								; do at a specific point or the end ?
.a6f0		90 08		bcc $a6fa			bcc 	_MDLIFound 					; if specific point already set.
.a6f2		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a6f4		85 30		sta $30				sta 	codePtr 					; end.
.a6f6		a5 3b		lda $3b				lda 	zTemp2+1
.a6f8		85 31		sta $31				sta 	codePtr+1
.a6fa						_MDLIFound:
.a6fa		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a6fd		a8		tay				tay
.a6fe						_MDLIInsert:
.a6fe		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a700		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a702		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a704		c5 3a		cmp $3a				cmp 	zTemp2
.a706		d0 06		bne $a70e			bne 	_MDLINext
.a708		a5 31		lda $31				lda 	codePtr+1
.a70a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a70c		f0 0a		beq $a718			beq 	_MDLIHaveSpace
.a70e						_MDLINext:
.a70e		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a710		d0 02		bne $a714			bne 	_MDLINoBorrow
.a712		c6 3b		dec $3b				dec 	zTemp2+1
.a714						_MDLINoBorrow:
.a714		c6 3a		dec $3a				dec 	zTemp2
.a716		80 e6		bra $a6fe			bra 	_MDLIInsert
.a718						_MDLIHaveSpace:
.a718		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a71b		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a71c						_MDLICopy:
.a71c		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a71f		91 30		sta ($30),y			sta 	(codePtr),y
.a721		88		dey				dey
.a722		10 f8		bpl $a71c			bpl 	_MDLICopy
.a724		60		rts				rts
.a725						_MDLIError:
.a725		a9 06		lda #$06		lda	#6
.a727		4c 98 90	jmp $9098		jmp	ErrorHandler
.a72a						MDLAppendLine:
.a72a		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a72c		85 36		sta $36				sta 	zTemp0
.a72e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a730		85 38		sta $38				sta 	0+zTemp1
.a732		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a734		85 39		sta $39				sta 	1+zTemp1
.a736		b2 38		lda ($38)			lda 	(zTemp1)
.a738		d0 0a		bne $a744			bne 	_MDLANoInitialise
.a73a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a73c		8d 67 06	sta $0667			sta 	0+AppendPointer
.a73f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a741		8d 68 06	sta $0668			sta 	1+AppendPointer
.a744						_MDLANoInitialise:
.a744		18		clc				clc
.a745		ad 67 06	lda $0667			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a748		85 38		sta $38				sta 	zTemp1
.a74a		72 36		adc ($36)			adc 	(zTemp0)
.a74c		8d 67 06	sta $0667			sta 	AppendPointer
.a74f		ad 68 06	lda $0668			lda 	AppendPointer+1
.a752		85 39		sta $39				sta 	zTemp1+1
.a754		69 00		adc #$00			adc 	#0
.a756		8d 68 06	sta $0668			sta 	AppendPointer+1
.a759		a0 00		ldy #$00			ldy 	#0
.a75b						_MDLACopy:
.a75b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a75d		91 38		sta ($38),y			sta 	(zTemp1),y
.a75f		c8		iny				iny
.a760		98		tya				tya
.a761		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a763		d0 f6		bne $a75b			bne 	_MDLACopy
.a765		a9 00		lda #$00			lda 	#0 							; end of program.
.a767		91 38		sta ($38),y			sta 	(zTemp1),y
.a769		60		rts				rts
.0667						AppendPointer:
>0667								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a76a						MemoryNew:
.a76a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a76c		85 30		sta $30				sta 	codePtr
.a76e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a770		85 31		sta $31				sta 	codePtr+1
.a772		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a774		92 30		sta ($30)			sta 	(codePtr)
.a776		60		rts				rts
.a777						MemoryInline:
.a777		98		tya				tya 								; put address into stack,x
.a778		18		clc				clc  								; get the offset, add codePtr
.a779		65 30		adc $30				adc 	codePtr
.a77b		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a77d		a5 31		lda $31				lda 	codePtr+1
.a77f		69 00		adc #$00			adc 	#0
.a781		95 60		sta $60,x			sta 	NSMantissa1,x
.a783		74 68		stz $68,x			stz 	NSMantissa2,x
.a785		74 70		stz $70,x			stz 	NSMantissa3,x
.a787		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a788						MemorySearch:
.a788		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a78a		86 37		stx $37				stx 	zTemp0+1
.a78c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a78e		85 30		sta $30				sta 	codePtr
.a790		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a792		85 31		sta $31				sta 	codePtr+1
.a794						_MTAXLoop:
.a794		b2 30		lda ($30)			lda 	(codePtr)
.a796		18		clc				clc
.a797		f0 21		beq $a7ba			beq 	_MTAXExit 					; reached end, exit with CC.
.a799		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a79b		b1 30		lda ($30),y			lda 	(codePtr),y
.a79d		38		sec				sec
.a79e		e5 36		sbc $36				sbc 	zTemp0
.a7a0		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a7a2		c8		iny				iny 								; do the MSB
.a7a3		b1 30		lda ($30),y			lda 	(codePtr),y
.a7a5		e5 37		sbc $37				sbc 	zTemp0+1
.a7a7		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a7a9		f0 0f		beq $a7ba			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a7ab		b0 0d		bcs $a7ba			bcs 	_MTAXExit 					; current < required exit
.a7ad		18		clc				clc
.a7ae		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a7b0		65 30		adc $30				adc 	codePtr
.a7b2		85 30		sta $30				sta 	codePtr
.a7b4		90 02		bcc $a7b8			bcc 	_CREExit
.a7b6		e6 31		inc $31				inc 	codePtr+1 					; carry
.a7b8						_CREExit:
.a7b8		80 da		bra $a794			bra 	_MTAXLoop
.a7ba						_MTAXExit:
.a7ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a7bb						UpdateFont:
.a7bb		a5 01		lda $01				lda 	1 							; save position
.a7bd		48		pha				pha
.a7be		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a7c0		85 01		sta $01				sta 	1
.a7c2		a9 e9		lda #$e9			lda 	#((FontBinary) & $FF)
.a7c4		85 36		sta $36				sta 	0+zTemp0
.a7c6		a9 a7		lda #$a7			lda 	#((FontBinary) >> 8)
.a7c8		85 37		sta $37				sta 	1+zTemp0
.a7ca		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a7cc		85 38		sta $38				sta 	0+zTemp1
.a7ce		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a7d0		85 39		sta $39				sta 	1+zTemp1
.a7d2						_UFCopy1:
.a7d2		a0 00		ldy #$00			ldy 	#0
.a7d4						_UFCopy2:
.a7d4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7d6		91 38		sta ($38),y			sta 	(zTemp1),y
.a7d8		c8		iny				iny
.a7d9		d0 f9		bne $a7d4			bne 	_UFCopy2
.a7db		e6 37		inc $37				inc 	zTemp0+1
.a7dd		e6 39		inc $39				inc 	zTemp1+1
.a7df		a5 39		lda $39				lda 	zTemp1+1
.a7e1		c9 c8		cmp #$c8			cmp 	#$C8
.a7e3		d0 ed		bne $a7d2			bne 	_UFCopy1
.a7e5		68		pla				pla 								; restore.
.a7e6		85 01		sta $01				sta 	1
.a7e8		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a7e9						FontBinary:
>a7e9		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a7f1		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a801		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a811		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a821		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a831		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a841		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a851		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a861		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a871		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a881		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a891		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a8a1		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a8b1		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a8c1		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a8d1		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a8e1		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a8f1		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a901		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a911		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a921		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a931		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a941		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a951		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a961		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a971		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a981		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a991		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a9a1		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a9b1		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a9c1		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a9d1		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a9e1		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a9f1		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>aa01		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>aa11		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>aa21		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>aa31		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>aa41		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aa51		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>aa61		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>aa71		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>aa81		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>aa91		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aaa1		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>aab1		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>aac1		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>aad1		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aae1		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aaf1		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ab01		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ab11		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ab21		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ab31		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ab41		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ab51		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ab61		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ab71		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ab81		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ab91		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aba1		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>abb1		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>abc1		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>abd1		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>abe1		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>abf1		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ac01		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ac11		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ac21		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ac31		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ac41		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ac51		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ac61		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ac71		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ac81		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ac91		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>aca1		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>acb1		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>acc1		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>acd1		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ace1		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>acf1		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ad01		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ad11		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ad21		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ad31		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ad41		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ad51		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ad61		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ad71		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ad81		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ad91		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ada1		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>adb1		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>adc1		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>add1		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ade1		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>adf1		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ae01		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ae11		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ae21		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ae31		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ae41		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ae51		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ae61		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ae71		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ae81		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ae91		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>aea1		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>aeb1		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>aec1		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>aed1		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>aee1		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>aef1		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>af01		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>af11		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>af21		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>af31		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>af41		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>af51		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>af61		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>af71		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>af81		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>af91		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>afa1		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>afb1		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>afc1		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>afd1		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>afe1		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.afe9						PingCommand:
.afe9		5a		phy				phy 								; save pos
.afea		a9 01		lda #$01			lda 	#1 						; push channel.
.afec		48		pha				pha
.afed		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.afef		a2 03		ldx #$03			ldx 	#3 						; length
.aff1		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.aff3		80 24		bra $b019			bra 	SoundEffectCommand
.aff5						ZapCommand:
.aff5		5a		phy				phy 								; save pos
.aff6		a9 01		lda #$01			lda 	#1 						; push channel.
.aff8		48		pha				pha
.aff9		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.affb		a2 05		ldx #$05			ldx 	#5 						; length
.affd		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.afff		80 18		bra $b019			bra 	SoundEffectCommand
.b001						ShootCommand:
.b001		5a		phy				phy 								; save pos
.b002		a9 03		lda #$03			lda 	#3 						; push channel.
.b004		48		pha				pha
.b005		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b007		a2 02		ldx #$02			ldx 	#2 						; length
.b009		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b00b		80 0c		bra $b019			bra 	SoundEffectCommand
.b00d						Explode:
.b00d		5a		phy				phy 								; save pos
.b00e		a9 03		lda #$03			lda 	#3 						; push channel.
.b010		48		pha				pha
.b011		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b013		a2 05		ldx #$05			ldx 	#5 						; length
.b015		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b017		80 00		bra $b019			bra 	SoundEffectCommand
.b019						SoundEffectCommand:
.b019		8d 69 06	sta $0669			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b01c		9c 6a 06	stz $066a			stz 	SoundCommandBlock+1
.b01f		a9 0f		lda #$0f			lda 	#15
.b021		8d 6b 06	sta $066b			sta 	SoundCommandBlock+2
.b024		8e 6c 06	stx $066c			stx 	SoundCommandBlock+3
.b027		8c 6d 06	sty $066d			sty 	SoundCommandBlock+4
.b02a		9c 6e 06	stz $066e			stz 	SoundCommandBlock+5
.b02d		68		pla				pla
.b02e		09 10		ora #$10			ora 	#$10  						; execute command $11
.b030		a2 69		ldx #$69			ldx 	#(SoundCommandBlock & $FF)
.b032		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b034		20 85 80	jsr $8085			jsr 	SNDCommand
.b037		7a		ply				ply
.b038		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b039						UnaryPlaying:
.b039		fa		plx				plx
.b03a		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; get channel #
.b03d		48		pha				pha
.b03e		20 7f 90	jsr $907f			jsr		CheckRightBracket
.b041		68		pla				pla
.b042		c9 04		cmp #$04			cmp 	#4
.b044		b0 0c		bcs $b052			bcs 	_UPNotPlaying
.b046		09 20		ora #$20			ora 	#$20 						; query playing ?
.b048		20 85 80	jsr $8085			jsr 	SNDCommand
.b04b		c9 00		cmp #$00			cmp 	#0
.b04d		f0 03		beq $b052			beq 	_UPNotPlaying
.b04f		4c 05 91	jmp $9105			jmp 	ReturnTrue
.b052						_UPNotPlaying:
.b052		4c 10 91	jmp $9110			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b055						SoundCommand:
.b055		b1 30		lda ($30),y			lda 	(codePtr),y
.b057		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.b059		d0 09		bne $b064			bne 	_SNDMain
.b05b		c8		iny				iny 								; skip OFF
.b05c		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b05e		5a		phy				phy
.b05f		20 85 80	jsr $8085			jsr 	SNDCommand
.b062		7a		ply				ply
.b063		60		rts				rts
.b064						_SNDMain:
.b064		a2 00		ldx #$00			ldx 	#0
.b066		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; channel
.b069		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b06b		b0 4b		bcs $b0b8			bcs 	_SndError
.b06d		e8		inx				inx 								; do the rest in slot 1.
.b06e		20 87 90	jsr $9087			jsr 	CheckComma
.b071		20 63 9f	jsr $9f63			jsr 	Evaluate16BitInteger 		; Pitch
.b074		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b076		c9 10		cmp #$10			cmp 	#16
.b078		b0 3e		bcs $b0b8			bcs 	_SndError
.b07a		8d 6a 06	sta $066a			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b07d		b5 58		lda $58,x			lda 	NSMantissa0,x
.b07f		8d 69 06	sta $0669			sta 	SoundCommandBlock
.b082		20 87 90	jsr $9087			jsr 	CheckComma
.b085		20 7e 9f	jsr $9f7e			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b088		8d 6c 06	sta $066c			sta 	SoundCommandBlock+3
.b08b		a9 0f		lda #$0f			lda 	#15
.b08d		8d 6b 06	sta $066b			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b090		9c 6d 06	stz $066d			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b093		9c 6e 06	stz $066e			stz 	SoundCommandBlock+5
.b096		b1 30		lda ($30),y			lda 	(codePtr),y
.b098		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b09a		d0 0e		bne $b0aa			bne 	_SNDPlay
.b09c		c8		iny				iny
.b09d		20 6d 9f	jsr $9f6d			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b0a0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b0a2		8d 6d 06	sta $066d			sta 	SoundCommandBlock+4
.b0a5		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0a7		8d 6e 06	sta $066e			sta 	SoundCommandBlock+5
.b0aa						_SNDPlay:
.b0aa		5a		phy				phy
.b0ab		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b0ad		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b0af		a2 69		ldx #$69			ldx 	#(SoundCommandBlock & $FF)
.b0b1		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b0b3		20 85 80	jsr $8085			jsr 	SNDCommand
.b0b6		7a		ply				ply
.b0b7		60		rts				rts
.b0b8						_SndError:
.b0b8		4c 66 a1	jmp $a166			jmp 	RangeError
.0669						SoundCommandBlock:
>0669								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b0bb						StackPushByte:
.b0bb		48		pha				pha 								; save byte on stack
.b0bc		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b0be		d0 08		bne $b0c8			bne 	_SPBNoBorrow
.b0c0		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b0c2		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b0c4		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b0c6		90 06		bcc $b0ce			bcc 	_SPBMemory
.b0c8						_SPBNoBorrow:
.b0c8		c6 34		dec $34				dec 	basicStack
.b0ca		68		pla				pla 								; get back and write
.b0cb		92 34		sta ($34)			sta 	(basicStack)
.b0cd		60		rts				rts
.b0ce						_SPBMemory:
.b0ce		a9 12		lda #$12		lda	#18
.b0d0		4c 98 90	jmp $9098		jmp	ErrorHandler
.b0d3						StackPopByte:
.b0d3		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b0d5		e6 34		inc $34				inc 	basicStack
.b0d7		d0 02		bne $b0db			bne 	_SPBNoCarry
.b0d9		e6 35		inc $35				inc 	basicStack+1
.b0db						_SPBNoCarry:
.b0db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b0dc						StackOpen:
.b0dc		48		pha				pha 								; save frame byte
.b0dd		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b0df		0a		asl a				asl 	a 							; claim twice this for storage
.b0e0		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b0e2		38		sec				sec 								; so basically subtracting from
.b0e3		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b0e5		85 34		sta $34				sta 	basicStack
.b0e7		b0 09		bcs $b0f2			bcs 	_SONoBorrow
>b0e9		db						.byte 	$DB 						; causes a break in the emulator
.b0ea		c6 35		dec $35				dec 	basicStack+1
.b0ec		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b0ee		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b0f0		90 04		bcc $b0f6			bcc 	_SOMemory
.b0f2						_SONoBorrow:
.b0f2		68		pla				pla 								; get marker back and write at TOS
.b0f3		92 34		sta ($34)			sta 	(basicStack)
.b0f5		60		rts				rts
.b0f6						_SOMemory:
.b0f6		a9 12		lda #$12		lda	#18
.b0f8		4c 98 90	jmp $9098		jmp	ErrorHandler
.b0fb						StackClose:
.b0fb		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b0fd		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b0ff		0a		asl a				asl 	a 							; claim twice this.
.b100		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b102		85 34		sta $34				sta 	basicStack
.b104		90 02		bcc $b108			bcc 	_SCExit
.b106		e6 35		inc $35				inc 	basicStack+1
.b108						_SCExit:
.b108		60		rts				rts
.b109						StackCheckFrame:
.b109		48		pha				pha
.b10a						_StackRemoveLocals:
.b10a		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b10c		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b10e		b0 05		bcs $b115			bcs 	_SCNoLocal
.b110		20 a5 8a	jsr $8aa5			jsr 	LocalPopValue 				; restore the local value
.b113		80 f5		bra $b10a			bra 	_StackRemoveLocals 			; gr round again
.b115						_SCNoLocal:
.b115		68		pla				pla 								; get the frame check.
.b116		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b118		29 f0		and #$f0			and 	#$F0 						; check type bits
.b11a		d0 01		bne $b11d			bne 	_SCFError 					; different, we have structures mixed up
.b11c		60		rts				rts
.b11d						_SCFError:
.b11d		8a		txa				txa 								; report error X
.b11e		4c 98 90	jmp $9098			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b121						STKSaveCodePosition:
.b121		5a		phy				phy
.b122		98		tya				tya 								; save Y
.b123		a0 05		ldy #$05			ldy 	#5
.b125		91 34		sta ($34),y			sta 	(basicStack),y
.b127		88		dey				dey 								; save Code Pointer
.b128						_STKSaveLoop:
.b128		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b12b		91 34		sta ($34),y			sta 	(basicStack),y
.b12d		88		dey				dey
.b12e		d0 f8		bne $b128			bne 	_STKSaveLoop
.b130		7a		ply				ply
.b131		60		rts				rts
.b132						STKLoadCodePosition:
.b132		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b134						_STKLoadLoop:
.b134		b1 34		lda ($34),y			lda 	(basicStack),y
.b136		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b139		c8		iny				iny
.b13a		c0 05		cpy #$05			cpy 	#5
.b13c		d0 f6		bne $b134			bne 	_STKLoadLoop
.b13e		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b140		a8		tay				tay
.b141		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b142						StackReset:
.b142		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b144		85 34		sta $34				sta 	0+basicStack
.b146		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b148		85 35		sta $35				sta 	1+basicStack
.b14a		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b14c		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b14e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b14f						StringConcrete:
.b14f		5a		phy				phy 								; save position on stack
.b150		20 d2 9b	jsr $9bd2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b153		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b155		85 38		sta $38				sta 	zTemp1
.b157		b5 60		lda $60,x			lda 	NSMantissa1,x
.b159		85 39		sta $39				sta 	zTemp1+1
.b15b		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b15d						_SALength:
.b15d		c8		iny				iny
.b15e		b1 38		lda ($38),y			lda 	(zTemp1),y
.b160		d0 fb		bne $b15d			bne 	_SALength
.b162		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b164		b0 3d		bcs $b1a3			bcs 	_SALengthError
.b166		98		tya				tya 				 				; length of the new string
.b167		18		clc				clc
.b168		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b16a		90 02		bcc $b16e			bcc 	_SAHaveLength
.b16c		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b16e						_SAHaveLength:
.b16e		48		pha				pha 								; save length.
.b16f		38		sec				sec
.b170		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b172		6d 0e 04	adc $040e			adc 	stringMemory
.b175		8d 0e 04	sta $040e			sta 	stringMemory
.b178		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b17a		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b17c		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b17e		6d 0f 04	adc $040f			adc 	stringMemory+1
.b181		8d 0f 04	sta $040f			sta 	stringMemory+1
.b184		85 3b		sta $3b				sta 	zTemp2+1
.b186		95 60		sta $60,x			sta 	NSMantissa1,x
.b188		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b189		38		sec				sec
.b18a		e9 03		sbc #$03			sbc 	#3
.b18c		92 3a		sta ($3a)			sta 	(zTemp2)
.b18e		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b190		a0 01		ldy #$01			ldy 	#1
.b192		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b194						_SACopyNewString:
.b194		a0 00		ldy #$00			ldy 	#0
.b196						_SACopyNSLoop:
.b196		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b198		c8		iny				iny 								; write two on in string storage
.b199		c8		iny				iny
.b19a		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b19c		88		dey				dey 								; this makes it one one.
.b19d		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b19f		d0 f5		bne $b196			bne 	_SACopyNSLoop
.b1a1		7a		ply				ply
.b1a2		60		rts				rts
.b1a3						_SALengthError:
.b1a3		a9 09		lda #$09		lda	#9
.b1a5		4c 98 90	jmp $9098		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b1a8						StringSystemInitialise:
.b1a8		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b1aa		8d 0e 04	sta $040e			sta 	0+stringMemory
.b1ad		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b1af		8d 0f 04	sta $040f			sta 	1+stringMemory
.b1b2		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b1b5		60		rts				rts
.b1b6						StringSpaceInitialise:
.b1b6		20 d2 9b	jsr $9bd2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1b9		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b1bb		8d 10 04	sta $0410			sta 	stringInitialised
.b1be		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b1c1		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b1c4		ad 0f 04	lda $040f			lda 	stringMemory+1
.b1c7		3a		dec a				dec 	a
.b1c8		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b1cb		60		rts				rts
.b1cc						StringTempAllocate:
.b1cc		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b1ce		b0 30		bcs $b200			bcs 	_STALength
.b1d0		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b1d3		30 05		bmi $b1da			bmi 	_STAAllocate
.b1d5		48		pha				pha 								; save value to subtract.
.b1d6		20 b6 b1	jsr $b1b6			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b1d9		68		pla				pla 								; restore it
.b1da						_STAAllocate:
.b1da		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b1dc		18		clc				clc  								; deliberate allows one more
.b1dd		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b1e0		8d 11 04	sta $0411			sta 	stringTempPointer
.b1e3		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b1e5		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b1e7		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b1ea		69 ff		adc #$ff			adc 	#$FF
.b1ec		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b1ef		85 3d		sta $3d				sta 	zsTemp+1
.b1f1		95 60		sta $60,x			sta 	NSMantissa1,x
.b1f3		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b1f5		74 70		stz $70,x			stz 	NSMantissa3,x
.b1f7		a9 10		lda #$10			lda 	#NSTString
.b1f9		95 50		sta $50,x			sta 	NSStatus,x
.b1fb		a9 00		lda #$00			lda 	#0 							; clear the target string
.b1fd		92 3c		sta ($3c)			sta 	(zsTemp)
.b1ff		60		rts				rts
.b200						_STALength:
.b200		a9 09		lda #$09		lda	#9
.b202		4c 98 90	jmp $9098		jmp	ErrorHandler
.b205						StringTempWrite:
.b205		48		pha				pha
.b206		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b208		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b20a		d0 02		bne $b20e			bne 	_STWNoCarry
.b20c		e6 3d		inc $3d				inc 	zsTemp+1
.b20e						_STWNoCarry:
.b20e		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b210		92 3c		sta ($3c)			sta 	(zsTemp)
.b212		68		pla				pla
.b213		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b214						Command_VERIFY:
.b214		20 3b 9f	jsr $9f3b			jsr 	EvaluateString 				; file name to verify
.b217		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b219		a5 36		lda $36				lda 	zTemp0
.b21b		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b21e		b0 4b		bcs $b26b			bcs 	_CVErrorHandler 			; error, so fail.
.b220		8d 5d 06	sta $065d			sta 	CurrentFileStream 			; save the reading stream.
.b223		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b226		9c 5c 06	stz $065c			stz 	LoadEOFFlag 				; clear EOF Flag.
.b229		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b22b		85 30		sta $30				sta 	codePtr
.b22d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b22f		85 31		sta $31				sta 	codePtr+1
.b231						_CVLoop:
.b231		20 ed 89	jsr $89ed			jsr 	LoadReadLine 				; get next line.
.b234		f0 27		beq $b25d			beq 	_CVExit 					; end, exit.
.b236		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.b239		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b23c		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b23f		f0 f0		beq $b231			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b241		a0 00		ldy #$00			ldy 	#0 							; start compare
.b243						_CVCompareLoop:
.b243		b1 30		lda ($30),y			lda 	(codePtr),y
.b245		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b248		d0 1c		bne $b266			bne 	_CVCompareError
.b24a		c8		iny				iny
.b24b		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b24e		d0 f3		bne $b243			bne 	_CVCompareLoop
.b250		18		clc				clc
.b251		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b253		65 30		adc $30				adc 	codePtr
.b255		85 30		sta $30				sta 	codePtr
.b257		90 02		bcc $b25b			bcc 	_CREExit
.b259		e6 31		inc $31				inc 	codePtr+1 					; carry
.b25b						_CREExit:
.b25b		80 d4		bra $b231			bra 	_CVLoop
.b25d						_CVExit:
.b25d		ad 5d 06	lda $065d			lda 	CurrentFileStream
.b260		20 71 80	jsr $8071			jsr 	KNLCloseFile
.b263		4c c2 89	jmp $89c2			jmp 	CLComplete
.b266						_CVCompareError:
.b266		a9 1b		lda #$1b		lda	#27
.b268		4c 98 90	jmp $9098		jmp	ErrorHandler
.b26b						_CVErrorHandler:
.b26b		4c df 89	jmp $89df			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b26e						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 70 06	ldy $0670			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 71 06	lda $0671			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 70 06	sty $0670			sty 	EXTColumn
.c022	a022	cc 72 06	cpy $0672			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6f 06	inc $066f			inc 	EXTRow  					; bump row
.c02a	a02a	9c 70 06	stz $0670			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6f 06	lda $066f			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 73 06	cmp $0673			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 72 06	adc $0672			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 70 06	dec $0670			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 70 06	stz $0670			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6f 06	dec $066f			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6f 06	lda $066f			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6f 06	dec $066f			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 72 06	sbc $0672			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 70 06	sty $0670			sty 	EXTColumn
.c081	a081	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 70 06	sty $0670			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 73 06	lda $0673			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6f 06	cmp $066f			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6f 06	inc $066f			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 72 06	adc $0672			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 70 06	lda $0670			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 70 06	sta $0670			sta 	EXTColumn
.c0be	a0be	cd 72 06	cmp $0672			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 70 06	dec $0670			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 72 06	cpy $0672			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 71 06	and $0671			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 71 06	sta $0671			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 71 06	ora $0671			ora 	EXTTextColour
.c131	a131	8d 71 06	sta $0671			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 71 06	lda $0671			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 71 06	lda $0671			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6f 06	stz $066f			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 70 06	stz $0670			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 70 06	lda $0670			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6f 06	lda $066f			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 d9 bb	jsr $bbd9			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 70 06	lda $0670			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 70 06	ldy $0670			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 70 06	ldy $0670			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 70 06	cpy $0670			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 72 06	lda $0672			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066f						EXTRow:
>066f								.fill 	1
.0670						EXTColumn:
>0670								.fill 	1
.0671						EXTTextColour:
>0671								.fill 	1
.0672						EXTScreenWidth:
>0672								.fill 	1
.0673						EXTScreenHeight:
>0673								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 71 06	sta $0671			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 72 06	sta $0672			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 73 06	sta $0673			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6f 06	lda $066f			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0674						gxCurrentX:
>0674								.fill 	2
.0676						gxCurrentY:
>0676								.fill 	2
.0678						gxLastX:
>0678								.fill 	2
.067a						gxLastY:
>067a								.fill 	2
.067c						gxX0:
>067c								.fill 	2
.067e						gxY0:
>067e								.fill 	2
.0680						gxX1:
>0680								.fill 	2
.0682						gxY1:
>0682								.fill 	2
.0684						gxSpritesOn:
>0684								.fill 	1
.0685						gxBitmapsOn:
>0685								.fill 	1
.0686						gxBasePage:
>0686								.fill 	1
.0687						gxSpritePage:
>0687								.fill 	1
.0688						gxHeight:
>0688								.fill 	1
.0689						gxMode:
>0689								.fill 	1
.068a						gxColour:
>068a								.fill 	1
.068b						gxEORValue:
>068b								.fill 	1
.068c						gxANDValue:
>068c								.fill 	1
.068d						gxOriginalLUTValue:
>068d								.fill 	1
.068e						gxOffset:
>068e								.fill 	1
.068f						GSCurrentSpriteID:
>068f								.fill 	1
.0690						GSCurrentSpriteAddr:
>0690								.fill 	2
.0692						gxSpriteOffsetBase:
>0692								.fill 	2
.0694						gxSpriteLow:
>0694								.fill 	64
.06d4						gxSpriteHigh:
>06d4								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 74 06	lda $0674,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 78 06	sta $0678,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 76 06	sta $0676			sta 	gxCurrentY
.c7dc	a7dc	9c 77 06	stz $0677			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 74 06	sta $0674			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 75 06	sta $0675			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 75 06	lda $0675			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 74 06	lda $0674			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 76 06	lda $0676			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 88 06	cmp $0688			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 74 06	lda $0674,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7c 06	sta $067c,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 17 07	sta $0717			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 85 06	lda $0685			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 18 07	stz $0718			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 15 07	lda $0715			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 16 07	cmp $0716			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 16 07	lda $0716			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 15 07	lda $0715			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 16 07	ldx $0716			ldx	 	gxYCentre
.c86a	a86a	8d 16 07	sta $0716			sta 	gxYCentre
.c86d	a86d	8e 15 07	stx $0715			stx 	gxxCentre
.c870	a870	ad 18 07	lda $0718			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 18 07	sta $0718			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 17 07	lda $0717	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 18 07	lda $0718			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 16 07	lda $0716			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 15 07	lda $0715			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 17 07	lda $0717			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 16 07	sbc $0716			sbc 	gxYCentre
.c8b1	a8b1	8d 16 07	sta $0716			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 80 06	lda $0680,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7c 06	sta $067c,x			sta 	gxX0,x
.c8c8	a8c8	bd 81 06	lda $0681,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7d 06	sta $067d,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 18 07	stz $0718			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 15 07	inc $0715			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 15 07	lda $0715			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 15 07	inc $0715			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 16 07	dec $0716			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 15 07	lda $0715			lda 	gxxCentre
.c8f1	a8f1	ed 16 07	sbc $0716			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 18 07	dec $0718			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 82 06	lda $0682			lda 	gxY1
.c92a	a92a	ed 7e 06	sbc $067e			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 14 07	sta $0714			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 15 07	stz $0715			stz 	gxxCentre
.c93e	a93e	ad 14 07	lda $0714			lda 	gxRadius
.c941	a941	8d 16 07	sta $0716			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 80 06	lda $0680,x			lda 	gxX1,x
.c959	a959	7d 7c 06	adc $067c,x			adc 	gxX0,x
.c95c	a95c	9d 80 06	sta $0680,x			sta 	gxX1,x
.c95f	a95f	bd 81 06	lda $0681,x			lda 	gxX1+1,x
.c962	a962	7d 7d 06	adc $067d,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 81 06	sta $0681,x			sta 	gxX1+1,x
.c969	a969	7e 80 06	ror $0680,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0714						gxRadius:
>0714								.fill 	1
.0715						gxxCentre:
>0715								.fill 	1
.0716						gxYCentre:
>0716								.fill 	1
.0717						gxIsFillMode:
>0717								.fill 	1
.0718						gxYChanged:
>0718								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 85 06	lda $0685			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 88 06	lda $0688			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 86 06	adc $0686			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 86 06	cmp $0686			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 84 06	stz $0684			stz 	gxSpritesOn
.c9c6	a9c6	9c 85 06	stz $0685			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 74 06	stz $0674,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 85 06	sta $0685			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 86 06	sta $0686			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 88 06	stx $0688			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 84 06	sta $0684			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 87 06	sta $0687			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 92 06	sta $0692			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 91 06	stz $0691			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d4 06	stz $06d4,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 85 06	lda $0685			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8e 06	ldy $068e			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8c 06	and $068c			and 	gxANDValue
.ca93	aa93	4d 8b 06	eor $068b			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 1b 07	lda $071b			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7c 06	lda $067c			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 80 06	eor $0680			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7d 06	lda $067d			lda 	gxX0+1
.cab9	aab9	4d 81 06	eor $0681			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 82 06	lda $0682			lda 	gxY1
.cac0	aac0	4d 7e 06	eor $067e			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1d 07	lda $071d			lda 	gxPosition
.cac8	aac8	6d 1e 07	adc $071e			adc 	gxAdjust
.cacb	aacb	8d 1d 07	sta $071d			sta 	gxPosition
.cace	aace	9c 20 07	stz $0720			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1f 07	cmp $071f			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 20 07	dec $0720			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1f 07	sbc $071f			sbc 	gxTotal
.cadf	aadf	8d 1d 07	sta $071d			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 1b 07	lda $071b			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 20 07	lda $0720			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 20 07	lda $0720			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1c 07	lda $071c			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7c 06	lda $067c			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7d 06	dec $067d			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7c 06	dec $067c			dec 	gxX0
.cb10	ab10	ce 8e 06	dec $068e			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8e 06	lda $068e			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7c 06	inc $067c			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7d 06	inc $067d			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8e 06	inc $068e			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7e 06	inc $067e			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 82 06	lda $0682			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7e 06	sbc $067e			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 1a 07	sta $071a			sta 	gxDiffY
.cb58	ab58	9c 1c 07	stz $071c			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 80 06	lda $0680			lda 	gxX1
.cb5f	ab5f	ed 7c 06	sbc $067c			sbc 	gxX0
.cb62	ab62	8d 19 07	sta $0719			sta 	gxDiffX
.cb65	ab65	ad 81 06	lda $0681			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7d 06	sbc $067d			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 19 07	ror $0719			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 19 07	sbc $0719			sbc 	gxDiffX
.cb78	ab78	8d 19 07	sta $0719			sta 	gxDiffX
.cb7b	ab7b	ce 1c 07	dec $071c			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 1b 07	stz $071b			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 1a 07	lda $071a			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1e 07	sta $071e			sta 	gxAdjust
.cb87	ab87	ad 19 07	lda $0719			lda 	gxDiffX
.cb8a	ab8a	8d 1f 07	sta $071f			sta 	gxTotal
.cb8d	ab8d	ad 1a 07	lda $071a			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 19 07	cmp $0719			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 1b 07	dec $071b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 19 07	lda $0719			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1e 07	sta $071e			sta 	gxAdjust
.cb9e	ab9e	ad 1a 07	lda $071a			lda 	gxDiffY
.cba1	aba1	8d 1f 07	sta $071f			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1f 07	lda $071f			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1d 07	sta $071d			sta 	gxPosition
.cbab	abab	60		rts				rts
.0719						gxDiffX:
>0719								.fill 	1
.071a						gxDiffY:
>071a								.fill 	1
.071b						gxIsDiffYLarger:
>071b								.fill 	1
.071c						gxDXNegative:
>071c								.fill 	1
.071d						gxPosition:
>071d								.fill 	1
.071e						gxAdjust:
>071e								.fill 	1
.071f						gxTotal:
>071f								.fill 	1
.0720						gxAddSelect:
>0720								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 8a 06	stx $068a			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 89 06	sta $0689			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8c 06	stz $068c			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 8a 06	ldx $068a			ldx 	gxColour
.cbbe	abbe	8e 8b 06	stx $068b			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8c 06	stx $068c			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 8b 06	stz $068b			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8c 06	lda $068c			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8c 06	sta $068c			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8e 06	ldy $068e			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8c 06	and $068c			and 	gxANDValue
.cbe8	abe8	4d 8b 06	eor $068b			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 85 06	lda $0685			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7e 06	lda $067e			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 82 06	cmp $0682			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7e 06	inc $067e			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7e 06	lda $067e			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 82 06	cmp $0682			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 80 06	lda $0680			lda		gxX1
.cc37	ac37	ed 7c 06	sbc $067c			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 81 06	lda $0681			lda 	gxX1+1
.cc3f	ac3f	ed 7d 06	sbc $067d			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8e 06	lda $068e			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8e 06	ldy $068e			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8c 06	and $068c			and 	gxANDValue
.cc5c	ac5c	4d 8b 06	eor $068b			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8c 06	and $068c			and 	gxANDValue
.cc7a	ac7a	4d 8b 06	eor $068b			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8c 06	and $068c			and 	gxANDValue
.cc92	ac92	4d 8b 06	eor $068b			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8e 06	sta $068e			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 21 07	sta $0721			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 22 07	sta $0722			sta 	gxMask 						; and mask
.ccb9	acb9	ad 85 06	lda $0685			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7e 06	lda $067e			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 24 07	sty $0724			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 23 07	stx $0723			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 26 07	lda $0726			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 25 07	sta $0725			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 26 07	bit $0726			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 22 07	lda $0722			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 25 07	lda $0725			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7e 06	lda $067e			lda 	gxY0 						; off screen
.ccf2	acf2	cd 88 06	cmp $0688			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 21 07	cmp $0721			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7e 06	sta $067e			sta 	gxY0
.cd0b	ad0b	ae 25 07	ldx $0725			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 21 07	lda $0721			lda 	gxSize
.cd12	ad12	6d 7c 06	adc $067c			adc 	gxX0
.cd15	ad15	8d 7c 06	sta $067c			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7d 06	inc $067d			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 23 07	jmp ($0723)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8e 06	ldy $068e			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 25 07	lda $0725			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 89 06	bit $0689			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 22 07	lda $0722			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 26 07	lda $0726			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8c 06	and $068c			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 21 07	cmp $0721			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7e 06	inc $067e			inc 	gxY0
.cd73	ad73	60		rts				rts
.0721						gxSize:
>0721								.fill 	1
.0722						gxMask:
>0722								.fill 	1
.0723						gxAcquireVector:
>0723								.fill 	2
.0725						gxScale:
>0725								.fill 	1
.0726						gxUseMode:
>0726								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 89 06	eor $0689			eor 	gxMode
.cd79	ad79	8d 26 07	sta $0726			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 8a 06	lda $068a			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 84 06	lda $0684			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 89 06	eor $0689			eor 	gxMode
.cdc6	adc6	8d 26 07	sta $0726			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 27 07	lda $0727			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 87 06	lda $0687			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 28 07	ldx $0728			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 2a 07	adc $072a			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 2b 07	adc $072b			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 27 07	cpy $0727			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 84 06	lda $0684			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8f 06	sta $068f			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 90 06	sta $0690			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 84 06	lda $0684			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 2a 07	lda $072a			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 2b 07	lda $072b			lda 	gxSpriteOffset+1
.ce87	ae87	6d 92 06	adc $0692			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 93 06	lda $0693			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 28 07	lda $0728			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 29 07	ora $0729			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 28 07	lda $0728			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d4 06	ora $06d4,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 84 06	lda $0684			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7c 06	adc $067c			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7d 06	lda $067d			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7e 06	adc $067e			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7d 06	lsr $067d			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7c 06	ror $067c			ror 	gxX0
.cf32	af32	4e 7c 06	lsr $067c			lsr 	gxX0
.cf35	af35	4e 7e 06	lsr $067e			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7e 06	lsr $067e			lsr 	gxY0
.cf3b	af3b	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7c 06	ora $067c			ora 	gxX0
.cf46	af46	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.cf49	af49	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7e 06	ora $067e			ora 	gxY0
.cf51	af51	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8d 06	sta $068d			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8d 06	lda $068d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7e 06	lda $067e			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7c 06	lda $067c			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8e 06	sta $068e			sta 	gxOffset
.cfa3	afa3	ad 7d 06	lda $067d			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 86 06	adc $0686			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8e 06	lda $068e			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8e 06	sta $068e			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 94 06	lda $0694,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 94 06	ora $0694,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d4 06	lda $06d4,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d4 06	adc $06d4,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d4 06	lda $06d4,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 94 06	lda $0694,y			lda 	gxSpriteLow,y
.d023	b023	fd 94 06	sbc $0694,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 87 06	lda $0687			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 2b 07	sta $072b			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 28 07	sta $0728			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 27 07	sta $0727			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 29 07	sta $0729			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 2a 07	sta $072a			sta 	gxSpriteOffset
.d070	b070	0e 2a 07	asl $072a			asl 	gxSpriteOffset
.d073	b073	2e 2b 07	rol $072b			rol 	gxSpriteOffset+1
.d076	b076	0e 2a 07	asl $072a			asl 	gxSpriteOffset
.d079	b079	2e 2b 07	rol $072b			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0727						gxSizePixels:
>0727								.fill 	1
.0728						gxSizeBits:
>0728								.fill 	1
.0729						gxSpriteLUT:
>0729								.fill 	1
.072a						gxSpriteOffset:
>072a								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7c 06	lda $067c			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 80 06	cmp $0680			cmp 	gxX1
.d08d	b08d	ad 7d 06	lda $067d			lda 	gxX0+1
.d090	b090	ed 81 06	sbc $0681			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7e 06	lda $067e			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 82 06	cmp $0682			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7c 06	lda $067c,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7c 06	lda $067c,y			lda 	gxX0,y
.d0bd	b0bd	9d 7c 06	sta $067c,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7c 06	sta $067c,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $8f SAVE
>d36f	b36f	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $90 SETDATE
>d377	b377	45
>d378	b378	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $91 SETTIME
>d380	b380	45
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $92 SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $93 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $94 STOP
>d397	b397	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $95 VERIFY
>d39f	b39f	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $96 XGO
>d3a4	b3a4	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $97 XLOAD
>d3ab	b3ab	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $98 ZAP
>d3b0	b3b0	ff					.text	$FF
.d3b1	b3b1					KeywordSet2:
>d3b1	b3b1	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3b3	b3b3	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3b5	b3b5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3b7	b3b7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3bc	b3bc	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3c1	b3c1	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3c6	b3c6	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3cb	b3cb	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3d0	b3d0	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3d5	b3d5	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3da	b3da	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3df	b3df	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3e4	b3e4	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3e9	b3e9	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3ee	b3ee	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3f3	b3f3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3f8	b3f8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3fd	b3fd	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d402	b402	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d407	b407	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d40c	b40c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d411	b411	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d416	b416	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d41b	b41b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d420	b420	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d425	b425	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d42a	b42a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d42f	b42f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d434	b434	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d439	b439	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d43e	b43e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d443	b443	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d448	b448	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d44d	b44d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d452	b452	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d457	b457	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d45c	b45c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d461	b461	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d466	b466	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d46b	b46b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d470	b470	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d475	b475	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d47a	b47a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d47f	b47f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d484	b484	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d489	b489	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d48e	b48e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d493	b493	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d498	b498	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d49d	b49d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4a2	b4a2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4a7	b4a7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4ac	b4ac	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4b1	b4b1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4b6	b4b6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4bb	b4bb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4c0	b4c0	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4c5	b4c5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4ca	b4ca	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4cf	b4cf	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4d4	b4d4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4d9	b4d9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4de	b4de	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4e3	b4e3	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4e8	b4e8	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4ed	b4ed	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4f2	b4f2	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4f7	b4f7	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4fc	b4fc	ff					.text	$FF
.d4fd	b4fd					Export_TKListConvertLine:
.d4fd	b4fd	48		pha				pha 								; save indent on the stack
.d4fe	b4fe	9c 1d 04	stz $041d			stz 	tbOffset
.d501	b501	9c 2d 04	stz $042d			stz 	tokenBuffer
.d504	b504	9c 29 04	stz $0429			stz 	currentListColour
.d507	b507	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d509	b509	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d50c	b50c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d50e	b50e	b1 30		lda ($30),y			lda 	(codePtr),y
.d510	b510	aa		tax				tax
.d511	b511	88		dey				dey
.d512	b512	b1 30		lda ($30),y			lda 	(codePtr),y
.d514	b514	20 f7 b6	jsr $b6f7			jsr 	LCLWriteNumberXA
.d517	b517	68		pla				pla 								; adjustment to indent
.d518	b518	48		pha				pha 								; save on stack
.d519	b519	10 0c		bpl $b527			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d51b	b51b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d51c	b51c	6d 26 04	adc $0426			adc 	listIndent
.d51f	b51f	8d 26 04	sta $0426			sta 	listIndent
.d522	b522	10 03		bpl $b527			bpl 	_LCNoAdjust
.d524	b524	9c 26 04	stz $0426			stz 	listIndent
.d527	b527					_LCNoAdjust:
.d527	b527	18		clc				clc		 							; work out actual indent.
.d528	b528	ad 26 04	lda $0426			lda 	listIndent
.d52b	b52b	0a		asl a				asl 	a
.d52c	b52c	69 07		adc #$07			adc 	#7
.d52e	b52e	85 36		sta $36				sta 	zTemp0
.d530	b530					_LCPadOut:
.d530	b530	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d532	b532	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d535	b535	ad 1d 04	lda $041d			lda 	tbOffset
.d538	b538	c5 36		cmp $36				cmp 	zTemp0
.d53a	b53a	d0 f4		bne $b530			bne 	_LCPadOut
.d53c	b53c	a0 03		ldy #$03			ldy 	#3 							; start position.
.d53e	b53e					_LCMainLoop:
.d53e	b53e	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d540	b540	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d543	b543	b1 30		lda ($30),y			lda 	(codePtr),y
.d545	b545	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d547	b547	f0 17		beq $b560			beq 	_LCExit
.d549	b549	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d54b	b54b	90 1e		bcc $b56b			bcc 	_LCDoubles
.d54d	b54d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d54f	b54f	90 2a		bcc $b57b			bcc 	_LCShiftPunc
.d551	b551	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d553	b553	90 35		bcc $b58a			bcc 	_LCPunctuation
.d555	b555	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d557	b557	90 51		bcc $b5aa			bcc 	_LCIdentifiers
.d559	b559	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d55b	b55b	90 73		bcc $b5d0			bcc 	_LCTokens
.d55d	b55d	4c 30 b6	jmp $b630			jmp 	_LCData 					; 254-5 are data objects
.d560	b560					_LCExit:
.d560	b560	68		pla				pla 								; get old indent adjust
.d561	b561	30 07		bmi $b56a			bmi 	_LCExit2
.d563	b563	18		clc				clc 								; add to indent if +ve
.d564	b564	6d 26 04	adc $0426			adc 	listIndent
.d567	b567	8d 26 04	sta $0426			sta 	listIndent
.d56a	b56a					_LCExit2:
.d56a	b56a	60		rts				rts
.d56b	b56b					_LCDoubles:
.d56b	b56b	48		pha				pha
.d56c	b56c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d56d	b56d	29 02		and #$02			and 	#2
.d56f	b56f	09 3c		ora #$3c			ora 	#60 						; make < >
.d571	b571	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d574	b574	68		pla				pla 								; restore, do lower bit
.d575	b575	29 03		and #$03			and 	#3
.d577	b577	09 3c		ora #$3c			ora 	#60
.d579	b579	80 0f		bra $b58a			bra		_LCPunctuation 				; print, increment, loop
.d57b	b57b					_LCShiftPunc:
.d57b	b57b	aa		tax				tax 								; save in X
.d57c	b57c	29 07		and #$07			and 	#7 							; lower 3 bits
.d57e	b57e	f0 02		beq $b582			beq 	_LCNoAdd
.d580	b580	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d582	b582					_LCNoAdd:
.d582	b582	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d584	b584	90 02		bcc $b588			bcc 	_LCNoAdd2
.d586	b586	09 20		ora #$20			ora 	#32 						; adds $20
.d588	b588					_LCNoAdd2:
.d588	b588	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d58a	b58a					_LCPunctuation:
.d58a	b58a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d58c	b58c	d0 03		bne $b591			bne 	_LCPContinue
.d58e	b58e	20 a5 b6	jsr $b6a5			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d591	b591					_LCPContinue:
.d591	b591	c9 2e		cmp #$2e			cmp 	#'.'
.d593	b593	f0 08		beq $b59d			beq 	_LCPIsConstant
.d595	b595	c9 30		cmp #$30			cmp 	#'0'
.d597	b597	90 0b		bcc $b5a4			bcc 	_LCPNotConstant
.d599	b599	c9 3a		cmp #$3a			cmp 	#'9'+1
.d59b	b59b	b0 07		bcs $b5a4			bcs 	_LCPNotConstant
.d59d	b59d					_LCPIsConstant:
.d59d	b59d	48		pha				pha
.d59e	b59e	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5a0	b5a0	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5a3	b5a3	68		pla				pla
.d5a4	b5a4					_LCPNotConstant:
.d5a4	b5a4	c8		iny				iny 								; consume character
.d5a5	b5a5	20 8f b6	jsr $b68f			jsr 	LCLWrite 					; write it out.
.d5a8	b5a8	80 94		bra $b53e			bra 	_LCMainLoop 				; go round again.
.d5aa	b5aa					_LCIdentifiers:
.d5aa	b5aa	18		clc				clc 								; convert to physical address
.d5ab	b5ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5ad	b5ad	85 37		sta $37				sta 	zTemp0+1
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	85 36		sta $36				sta 	zTemp0
.d5b4	b5b4	c8		iny				iny
.d5b5	b5b5	5a		phy				phy 								; save position
.d5b6	b5b6	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5b8	b5b8	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5bb	b5bb	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5bd	b5bd					_LCOutIdentifier:
.d5bd	b5bd	c8		iny				iny
.d5be	b5be	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5c0	b5c0	29 7f		and #$7f			and 	#$7F
.d5c2	b5c2	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d5c5	b5c5	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d5c8	b5c8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5ca	b5ca	10 f1		bpl $b5bd			bpl 	_LCOutIdentifier
.d5cc	b5cc	7a		ply				ply 								; restore position
.d5cd	b5cd	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d5d0	b5d0					_LCTokens:
.d5d0	b5d0	aa		tax				tax 								; token in X
.d5d1	b5d1	a9 b1		lda #$b1			lda 	#((KeywordSet2) & $FF)
.d5d3	b5d3	85 36		sta $36				sta 	0+zTemp0
.d5d5	b5d5	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5d7	b5d7	85 37		sta $37				sta 	1+zTemp0
.d5d9	b5d9	e0 82		cpx #$82			cpx 	#$82
.d5db	b5db	f0 16		beq $b5f3			beq 	_LCUseShift
.d5dd	b5dd	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5df	b5df	85 36		sta $36				sta 	0+zTemp0
.d5e1	b5e1	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5e3	b5e3	85 37		sta $37				sta 	1+zTemp0
.d5e5	b5e5	e0 81		cpx #$81			cpx 	#$81
.d5e7	b5e7	f0 0a		beq $b5f3			beq 	_LCUseShift
.d5e9	b5e9	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	80 01		bra $b5f4			bra 	_LCNoShift
.d5f3	b5f3					_LCUseShift:
.d5f3	b5f3	c8		iny				iny
.d5f4	b5f4					_LCNoShift:
.d5f4	b5f4	20 b9 b6	jsr $b6b9			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5f7	b5f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5f9	b5f9	aa		tax				tax 								; into X
.d5fa	b5fa					_LCFindText:
.d5fa	b5fa	ca		dex				dex
.d5fb	b5fb	10 0e		bpl $b60b			bpl 	_LCFoundText 				; found text.
.d5fd	b5fd	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5ff	b5ff	1a		inc a				inc 	a 							; one extra for size
.d600	b600	38		sec				sec 								; one extra for checksum
.d601	b601	65 36		adc $36				adc 	zTemp0 						; go to next token
.d603	b603	85 36		sta $36				sta 	zTemp0
.d605	b605	90 f3		bcc $b5fa			bcc 	_LCFindText
.d607	b607	e6 37		inc $37				inc 	zTemp0+1
.d609	b609	80 ef		bra $b5fa			bra 	_LCFindText
.d60b	b60b					_LCFoundText:
.d60b	b60b	5a		phy				phy 								; save List position
.d60c	b60c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d60e	b60e	aa		tax				tax
.d60f	b60f	a9 86		lda #$86			lda 	#CLIToken+$80
.d611	b611	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d614	b614	a0 02		ldy #$02			ldy 	#2
.d616	b616					_LCCopyToken:
.d616	b616	b1 36		lda ($36),y			lda 	(zTemp0),y
.d618	b618	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d61b	b61b	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d61e	b61e	c8		iny				iny
.d61f	b61f	ca		dex				dex
.d620	b620	d0 f4		bne $b616			bne 	_LCCopyToken
.d622	b622	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d624	b624	f0 05		beq $b62b			beq 	_LCNoSpace
.d626	b626	a9 20		lda #$20			lda 	#' '
.d628	b628	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d62b	b62b					_LCNoSpace:
.d62b	b62b	7a		ply				ply 								; restore position.
.d62c	b62c	c8		iny				iny 								; consume token
.d62d	b62d	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop 				; and go around again.
.d630	b630					_LCData:
.d630	b630	48		pha				pha 								; save type $FE/$FF
.d631	b631	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d633	b633	c9 fe		cmp #$fe			cmp 	#$FE
.d635	b635	f0 22		beq $b659			beq 	_LCHaveOpener
.d637	b637	a2 22		ldx #$22			ldx 	#'"'
.d639	b639	a9 8f		lda #$8f			lda 	#CLIData+$80
.d63b	b63b	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d63e	b63e	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d640	b640	d0 17		bne $b659			bne 	_LCHaveOpener
.d642	b642	88		dey				dey 								; what precedes it ?
.d643	b643	b1 30		lda ($30),y			lda 	(codePtr),y
.d645	b645	c8		iny				iny
.d646	b646	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d648	b648	d0 0f		bne $b659			bne 	_LCHaveOpener
.d64a	b64a	a9 09		lda #$09			lda 	#9 							; tab
.d64c	b64c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d64f	b64f	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d651	b651	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d654	b654	a9 85		lda #$85			lda 	#CLIFComment+$80
.d656	b656	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d659	b659					_LCHaveOpener:
.d659	b659	8a		txa				txa 								; output prefix (# or ")
.d65a	b65a	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d65d	b65d	c8		iny				iny 								; get count
.d65e	b65e	b1 30		lda ($30),y			lda 	(codePtr),y
.d660	b660	aa		tax				tax
.d661	b661	c8		iny				iny 								; point at first character
.d662	b662					_LCOutData:
.d662	b662	b1 30		lda ($30),y			lda 	(codePtr),y
.d664	b664	c9 00		cmp #$00			cmp 	#0
.d666	b666	f0 03		beq $b66b			beq 	_LCNoPrint
.d668	b668	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d66b	b66b					_LCNoPrint:
.d66b	b66b	c8		iny				iny
.d66c	b66c	ca		dex				dex
.d66d	b66d	d0 f3		bne $b662			bne 	_LCOutData
.d66f	b66f	68		pla				pla 								; closing " required ?
.d670	b670	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d672	b672	d0 0f		bne $b683			bne 	_LCNoQuote
.d674	b674	a9 22		lda #$22			lda 	#'"'
.d676	b676	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d679	b679	ad 71 06	lda $0671			lda 	EXTTextColour
.d67c	b67c	29 0f		and #$0f			and 	#$0F
.d67e	b67e	09 90		ora #$90			ora 	#$90
.d680	b680	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d683	b683					_LCNoQuote:
.d683	b683	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d686	b686					LCLWriteColour:
.d686	b686	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d689	b689	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d68c	b68c	d0 01		bne $b68f			bne 	LCLWrite 					; if different, output it
.d68e	b68e	60		rts				rts
.d68f	b68f					LCLWrite:
.d68f	b68f	da		phx				phx
.d690	b690	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d693	b693	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d696	b696	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d699	b699	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d69c	b69c	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d69e	b69e	30 03		bmi $b6a3			bmi 	_LCLNoColour
.d6a0	b6a0	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6a3	b6a3					_LCLNoColour:
.d6a3	b6a3	fa		plx				plx
.d6a4	b6a4	60		rts				rts
.d6a5	b6a5					LCLDeleteLastSpace:
.d6a5	b6a5	48		pha				pha
.d6a6	b6a6	da		phx				phx
.d6a7	b6a7	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6aa	b6aa	f0 0a		beq $b6b6			beq 	_LCDLSExit
.d6ac	b6ac	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6af	b6af	c9 20		cmp #$20			cmp 	#' '
.d6b1	b6b1	d0 03		bne $b6b6			bne 	_LCDLSExit
.d6b3	b6b3	ce 1d 04	dec $041d			dec 	tbOffset
.d6b6	b6b6					_LCDLSExit:
.d6b6	b6b6	fa		plx				plx
.d6b7	b6b7	68		pla				pla
.d6b8	b6b8	60		rts				rts
.d6b9	b6b9					LCLCheckSpaceRequired:
.d6b9	b6b9	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6bc	b6bc	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6be	b6be	f0 1b		beq $b6db			beq 	_LCCSRSpace
.d6c0	b6c0	c9 29		cmp #$29			cmp 	#')'
.d6c2	b6c2	f0 17		beq $b6db			beq 	_LCCSRSpace
.d6c4	b6c4	c9 23		cmp #$23			cmp 	#'#'
.d6c6	b6c6	f0 13		beq $b6db			beq 	_LCCSRSpace
.d6c8	b6c8	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase 				; saves a little effort
.d6cb	b6cb	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6cd	b6cd	90 11		bcc $b6e0			bcc 	_LCCSRExit
.d6cf	b6cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6d1	b6d1	90 08		bcc $b6db			bcc 	_LCCSRSpace
.d6d3	b6d3	c9 61		cmp #$61			cmp 	#"a"
.d6d5	b6d5	90 09		bcc $b6e0			bcc 	_LCCSRExit
.d6d7	b6d7	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6d9	b6d9	b0 05		bcs $b6e0			bcs 	_LCCSRExit
.d6db	b6db					_LCCSRSpace:
.d6db	b6db	a9 20		lda #$20			lda 	#' '
.d6dd	b6dd	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d6e0	b6e0					_LCCSRExit:
.d6e0	b6e0	60		rts				rts
.d6e1	b6e1					LCLLowerCase:
.d6e1	b6e1	c9 41		cmp #$41			cmp 	#"A"
.d6e3	b6e3	90 06		bcc $b6eb			bcc 	_LCLLCOut
.d6e5	b6e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6e7	b6e7	b0 02		bcs $b6eb			bcs 	_LCLLCOut
.d6e9	b6e9	69 20		adc #$20			adc 	#$20
.d6eb	b6eb					_LCLLCOut:
.d6eb	b6eb	60		rts				rts
.d6ec	b6ec					LCLUpperCase:
.d6ec	b6ec	c9 61		cmp #$61			cmp 	#"a"
.d6ee	b6ee	90 06		bcc $b6f6			bcc 	_LCLUCOut
.d6f0	b6f0	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6f2	b6f2	b0 02		bcs $b6f6			bcs 	_LCLUCOut
.d6f4	b6f4	e9 1f		sbc #$1f			sbc 	#$1F
.d6f6	b6f6					_LCLUCOut:
.d6f6	b6f6	60		rts				rts
.d6f7	b6f7					LCLWriteNumberXA:
.d6f7	b6f7	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6f9	b6f9					_LCLWNLoop1:
.d6f9	b6f9	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6fb	b6fb					_LCLWNLoop2:
.d6fb	b6fb	48		pha				pha 								; save initial LSB
.d6fc	b6fc	38		sec				sec
.d6fd	b6fd	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6ff	b6ff	f9 30 b7	sbc $b730,y			sbc 	_LCLWNTable,y
.d702	b702	48		pha				pha
.d703	b703	8a		txa				txa
.d704	b704	f9 31 b7	sbc $b731,y			sbc 	_LCLWNTable+1,y
.d707	b707	90 07		bcc $b710			bcc 	_LCLWNUnderflow
.d709	b709	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d70b	b70b	aa		tax				tax 								; update X
.d70c	b70c	68		pla				pla 								; restore A
.d70d	b70d	7a		ply				ply 								; throw original
.d70e	b70e	80 eb		bra $b6fb			bra 	_LCLWNLoop2 				; try again.
.d710	b710					_LCLWNUnderflow:
.d710	b710	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d712	b712	d0 06		bne $b71a			bne 	_LCLWNOut
.d714	b714	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d717	b717	3a		dec a				dec 	a
.d718	b718	f0 04		beq $b71e			beq 	_LCLWNNext
.d71a	b71a					_LCLWNOut:
.d71a	b71a	98		tya				tya
.d71b	b71b	20 2a b7	jsr $b72a			jsr 	_LCLWNOutDigit
.d71e	b71e					_LCLWNNext:
.d71e	b71e	7a		ply				ply 							 	; restore original value.
.d71f	b71f	68		pla				pla
.d720	b720	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d722	b722	c8		iny				iny
.d723	b723	c8		iny				iny
.d724	b724	84 37		sty $37				sty 	zTemp0+1
.d726	b726	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d728	b728	d0 cf		bne $b6f9			bne 	_LCLWNLoop1
.d72a	b72a					_LCLWNOutDigit:
.d72a	b72a	09 30		ora #$30			ora 	#'0'
.d72c	b72c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d72f	b72f	60		rts				rts
.d730	b730					_LCLWNTable:
>d730	b730	10 27						.word 	10000
>d732	b732	e8 03						.word 	1000
>d734	b734	64 00						.word 	100
>d736	b736	0a 00						.word 	10
.d738	b738					TOKSearchTable:
.d738	b738	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d73a	b73a	85 36		sta $36				sta 	zTemp0
.d73c	b73c	a0 00		ldy #$00			ldy 	#0
.d73e	b73e	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d740	b740	85 38		sta $38				sta 	zTemp1
.d742	b742					_TSTLoop:
.d742	b742	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d744	b744	30 49		bmi $b78f			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d746	b746	f0 2e		beq $b776			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d748	b748	c8		iny				iny 								; get the hash
.d749	b749	b1 36		lda ($36),y			lda 	(zTemp0),y
.d74b	b74b	88		dey				dey
.d74c	b74c	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d74f	b74f	d0 25		bne $b776			bne 	_TSTNext
.d751	b751	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d754	b754	38		sec				sec
.d755	b755	ed 00 04	sbc $0400			sbc 	identStart
.d758	b758	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d75a	b75a	d0 1a		bne $b776			bne 	_TSTNext
.d75c	b75c	5a		phy				phy 								; save Y , we might fail to match.
.d75d	b75d	c8		iny				iny 								; point to text
.d75e	b75e	c8		iny				iny
.d75f	b75f	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d762	b762					_TSTCompareName:
.d762	b762	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d765	b765	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d767	b767	d0 0c		bne $b775			bne 	_TSTNextPullY 				; fail, pullY and do next
.d769	b769	e8		inx				inx
.d76a	b76a	c8		iny				iny
.d76b	b76b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d76e	b76e	d0 f2		bne $b762			bne 	_TSTCompareName
.d770	b770	7a		ply				ply 								; throw Y
.d771	b771	a5 38		lda $38				lda 	zTemp1 						; get token #
.d773	b773	38		sec				sec 								; return with CS = passed.
.d774	b774	60		rts				rts
.d775	b775					_TSTNextPullY:
.d775	b775	7a		ply				ply 								; restore current, fall through.
.d776	b776					_TSTNext:
.d776	b776	e6 38		inc $38				inc 	zTemp1 						; token counter
.d778	b778	98		tya				tya
.d779	b779	18		clc				clc
.d77a	b77a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d77c	b77c	1a		inc a				inc 	a 							; +1
.d77d	b77d	1a		inc a				inc 	a 							; +2
.d77e	b77e	a8		tay				tay
.d77f	b77f	10 c1		bpl $b742			bpl 	_TSTLoop 					; if Y < $80 loop back
.d781	b781	98		tya				tya 								; add Y to zTemp0 and reset Y
.d782	b782	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d784	b784	18		clc				clc  								; but have tables > 255 bytes
.d785	b785	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d787	b787	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d789	b789	90 b7		bcc $b742			bcc 	_TSTLoop
.d78b	b78b	e6 37		inc $37				inc 	zTemp0+1
.d78d	b78d	80 b3		bra $b742			bra 	_TSTLoop
.d78f	b78f					_TSTFail:
.d78f	b78f	18		clc				clc
.d790	b790	60		rts				rts
.d791	b791					Export_TKTokeniseLine:
.d791	b791	20 5e b9	jsr $b95e			jsr 	LCLFixLineBufferCase 		; fix line case
.d794	b794	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d796	b796	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d799	b799	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d79c	b79c	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d79f	b79f	a2 ff		ldx #$ff			ldx 	#$FF
.d7a1	b7a1					_TKFindFirst:
.d7a1	b7a1	e8		inx				inx
.d7a2	b7a2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7a5	b7a5	f0 62		beq $b809			beq 	_TKExit
.d7a7	b7a7	c9 20		cmp #$20			cmp 	#' '
.d7a9	b7a9	90 f6		bcc $b7a1			bcc 	_TKFindFirst
.d7ab	b7ab	c9 30		cmp #$30			cmp 	#'0'
.d7ad	b7ad	90 07		bcc $b7b6			bcc 	_TKNoLineNumber
.d7af	b7af	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7b1	b7b1	b0 03		bcs $b7b6			bcs 	_TKNoLineNumber
.d7b3	b7b3	20 88 b9	jsr $b988			jsr 	TOKExtractLineNumber
.d7b6	b7b6					_TKNoLineNumber:
.d7b6	b7b6					_TKTokeniseLoop:
.d7b6	b7b6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7b9	b7b9	f0 4e		beq $b809			beq 	_TKExit
.d7bb	b7bb	e8		inx				inx
.d7bc	b7bc	c9 20		cmp #$20			cmp 	#' '
.d7be	b7be	f0 f6		beq $b7b6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7c0	b7c0	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7c1	b7c1	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7c3	b7c3	f0 68		beq $b82d			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7c5	b7c5	c9 41		cmp #$41			cmp 	#'A'
.d7c7	b7c7	90 04		bcc $b7cd			bcc 	_TKTokenisePunctuation
.d7c9	b7c9	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7cb	b7cb	90 60		bcc $b82d			bcc 	_TKTokeniseIdentifier
.d7cd	b7cd					_TKTokenisePunctuation:
.d7cd	b7cd	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7cf	b7cf	f0 2e		beq $b7ff			beq 	_TKString
.d7d1	b7d1	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7d3	b7d3	f0 2f		beq $b804			beq 	_TKHexConstant
.d7d5	b7d5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7d7	b7d7	f0 36		beq $b80f			beq 	_TKCheckDouble
.d7d9	b7d9	c9 3e		cmp #$3e			cmp 	#'>'
.d7db	b7db	f0 32		beq $b80f			beq 	_TKCheckDouble
.d7dd	b7dd					_TKStandardPunctuation:
.d7dd	b7dd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7e0	b7e0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7e2	b7e2	90 0e		bcc $b7f2			bcc 	_TKNoShift
.d7e4	b7e4	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7e5	b7e5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7e7	b7e7	85 36		sta $36				sta 	zTemp0
.d7e9	b7e9	68		pla				pla
.d7ea	b7ea	29 20		and #$20			and 	#32 						; bit 5
.d7ec	b7ec	4a		lsr a				lsr 	a 							; shift into bit 3
.d7ed	b7ed	4a		lsr a				lsr 	a
.d7ee	b7ee	05 36		ora $36				ora 	zTemp0
.d7f0	b7f0	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7f2	b7f2					_TKNoShift:
.d7f2	b7f2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; write the punctuation character
.d7f5	b7f5	e8		inx				inx 								; consume the character
.d7f6	b7f6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7f8	b7f8	d0 bc		bne $b7b6			bne 	_TKTokeniseLoop 			; and loop round again.
.d7fa	b7fa	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment 			; comment checl
.d7fd	b7fd	80 b7		bra $b7b6			bra 	_TKTokeniseLoop
.d7ff	b7ff					_TKString:
.d7ff	b7ff	20 ed b8	jsr $b8ed			jsr 	TOKTokenString
.d802	b802	80 b2		bra $b7b6			bra 	_TKTokeniseLoop
.d804	b804					_TKHexConstant:
.d804	b804	20 28 b9	jsr $b928			jsr 	TOKHexConstant
.d807	b807	80 ad		bra $b7b6			bra 	_TKTokeniseLoop
.d809	b809	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d80b	b80b	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d80e	b80e	60		rts				rts
.d80f	b80f					_TKCheckDouble:
.d80f	b80f	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d812	b812	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d814	b814	90 c7		bcc $b7dd			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d816	b816	c9 3f		cmp #$3f			cmp 	#'>'+1
.d818	b818	b0 c3		bcs $b7dd			bcs 	_TKStandardPunctuation
.d81a	b81a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d81d	b81d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d81f	b81f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d820	b820	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d823	b823	38		sec				sec
.d824	b824	e9 3c		sbc #$3c			sbc 	#'<'
.d826	b826	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; this is in the range 0-7
.d829	b829	e8		inx				inx 								; consume both
.d82a	b82a	e8		inx				inx
.d82b	b82b	80 89		bra $b7b6			bra 	_TKTokeniseLoop
.d82d	b82d					_TKTokeniseIdentifier:
.d82d	b82d	8e 00 04	stx $0400			stx 	identStart 					; save start
.d830	b830	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d833	b833					_TKCheckLoop:
.d833	b833	e8		inx				inx 								; look at next, we know first is identifier already.
.d834	b834	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d837	b837	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d839	b839	f0 f8		beq $b833			beq 	_TKCheckLoop
.d83b	b83b	c9 30		cmp #$30			cmp	 	#"0"
.d83d	b83d	90 0c		bcc $b84b			bcc 	_TKEndIdentifier
.d83f	b83f	c9 3a		cmp #$3a			cmp 	#"9"+1
.d841	b841	90 f0		bcc $b833			bcc 	_TKCheckLoop
.d843	b843	c9 41		cmp #$41			cmp	 	#"A"
.d845	b845	90 04		bcc $b84b			bcc 	_TKEndIdentifier
.d847	b847	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d849	b849	90 e8		bcc $b833			bcc 	_TKCheckLoop
.d84b	b84b					_TKEndIdentifier:
.d84b	b84b	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d84e	b84e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d850	b850	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d852	b852	f0 06		beq $b85a			beq 	_TKHasTypeCharacter
.d854	b854	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d856	b856	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d858	b858	d0 07		bne $b861			bne 	_TKNoTypeCharacter
.d85a	b85a					_TKHasTypeCharacter:
.d85a	b85a	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d85d	b85d	e8		inx				inx 								; consume the type character
.d85e	b85e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d861	b861					_TKNoTypeCharacter:
.d861	b861	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d863	b863	d0 09		bne $b86e			bne 	_TKNoArray
.d865	b865	e8		inx				inx 								; skip the (
.d866	b866	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d869	b869	09 04		ora #$04			ora 	#$04
.d86b	b86b	8d 04 04	sta $0404			sta 	identTypeByte
.d86e	b86e					_TKNoArray:
.d86e	b86e	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d871	b871	20 49 b9	jsr $b949			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d874	b874	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d876	b876	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d878	b878	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d87b	b87b	a2 00		ldx #$00			ldx 	#0
.d87d	b87d	b0 1f		bcs $b89e			bcs 	_TKFoundToken
.d87f	b87f	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d881	b881	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d883	b883	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d886	b886	a2 81		ldx #$81			ldx 	#$81
.d888	b888	b0 14		bcs $b89e			bcs 	_TKFoundToken
.d88a	b88a	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d88c	b88c	a9 b1		lda #$b1			lda 	#(KeywordSet2) & $FF
.d88e	b88e	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d891	b891	a2 82		ldx #$82			ldx 	#$82
.d893	b893	b0 09		bcs $b89e			bcs 	_TKFoundToken
.d895	b895	20 d9 b9	jsr $b9d9			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d898	b898	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d89b	b89b	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d89e	b89e					_TKFoundToken:
.d89e	b89e	48		pha				pha 								; save token
.d89f	b89f	8a		txa				txa 								; shift in X, is there one ?
.d8a0	b8a0	f0 03		beq $b8a5			beq 	_TKNoTShift
.d8a2	b8a2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; if so, write it out
.d8a5	b8a5					_TKNoTShift:
.d8a5	b8a5	68		pla				pla 								; restore and write token
.d8a6	b8a6	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8a9	b8a9	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8ab	b8ab	d0 0d		bne $b8ba			bne 	_TKNotRem 			 		; not shifted ?
.d8ad	b8ad	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8af	b8af	d0 09		bne $b8ba			bne 	_TKNotRem
.d8b1	b8b1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8b4	b8b4	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment
.d8b7	b8b7	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop
.d8ba	b8ba					_TKNotRem:
.d8ba	b8ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8bd	b8bd	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c0	b8c0					TOKCheckComment:
.d8c0	b8c0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	c9 20		cmp #$20			cmp 	#' '
.d8c6	b8c6	f0 f8		beq $b8c0			beq 	TOKCheckComment
.d8c8	b8c8	ca		dex				dex 								; first non space character
.d8c9	b8c9	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8cb	b8cb	f0 1f		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8cd	b8cd	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8cf	b8cf	f0 1b		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8d1	b8d1	da		phx				phx
.d8d2	b8d2					_TOKCCLowerCase:
.d8d2	b8d2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8d5	b8d5	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8d7	b8d7	90 09		bcc $b8e2			bcc 	_TOKKCNotUC
.d8d9	b8d9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8db	b8db	b0 05		bcs $b8e2			bcs 	_TOKKCNotUC
.d8dd	b8dd	49 20		eor #$20			eor 	#$20
.d8df	b8df	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8e2	b8e2					_TOKKCNotUC:
.d8e2	b8e2	e8		inx				inx
.d8e3	b8e3	c9 00		cmp #$00			cmp 	#0
.d8e5	b8e5	d0 eb		bne $b8d2			bne 	_TOKCCLowerCase
.d8e7	b8e7	fa		plx				plx
.d8e8	b8e8	ca		dex				dex 								; tokenise string expects initial skip.
.d8e9	b8e9	20 ed b8	jsr $b8ed			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8ec	b8ec					_TOKCCExit:
.d8ec	b8ec	60		rts				rts
.d8ed	b8ed					TOKTokenString:
.d8ed	b8ed	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8ef	b8ef	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8f2	b8f2	e8		inx				inx									; start of quoted string.
.d8f3	b8f3	da		phx				phx 								; push start of string on top
.d8f4	b8f4	ca		dex				dex 								; because we pre-increment
.d8f5	b8f5					_TSFindEnd:
.d8f5	b8f5	e8		inx				inx
.d8f6	b8f6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8f9	b8f9	f0 04		beq $b8ff			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8fb	b8fb	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8fd	b8fd	d0 f6		bne $b8f5			bne 	_TSFindEnd
.d8ff	b8ff					_TSEndOfString:
.d8ff	b8ff	7a		ply				ply  								; so now Y is first character, X is character after end.
.d900	b900	48		pha				pha 								; save terminating character
.d901	b901	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d904	b904	68		pla				pla 								; terminating character
.d905	b905	f0 01		beq $b908			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d907	b907	e8		inx				inx
.d908	b908					_TSNotQuote:
.d908	b908	60		rts				rts
.d909	b909					TOKWriteBlockXY:
.d909	b909	86 36		stx $36				stx 	zTemp0 						; save end character
.d90b	b90b	98		tya				tya 								; use 2's complement to work out the byte size
.d90c	b90c	49 ff		eor #$ff			eor 	#$FF
.d90e	b90e	38		sec				sec
.d90f	b90f	65 36		adc $36				adc 	zTemp0
.d911	b911	1a		inc a				inc 	a 							; one extra for NULL
.d912	b912	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d915	b915					_TOBlockLoop:
.d915	b915	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d917	b917	f0 09		beq $b922			beq 	_TOBlockExit
.d919	b919	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d91c	b91c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d91f	b91f	c8		iny				iny
.d920	b920	80 f3		bra $b915			bra 	_TOBlockLoop
.d922	b922					_TOBlockExit:
.d922	b922	a9 00		lda #$00			lda 	#0 							; add NULL.
.d924	b924	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d927	b927	60		rts				rts
.d928	b928					TOKHexConstant:
.d928	b928	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d92a	b92a	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d92d	b92d	e8		inx				inx									; start of quoted string.
.d92e	b92e	da		phx				phx 								; push start of constant on top
.d92f	b92f	ca		dex				dex
.d930	b930					_THFindLoop:
.d930	b930	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d931	b931	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d934	b934	c9 30		cmp #$30			cmp 	#"0"
.d936	b936	90 0c		bcc $b944			bcc 	_THFoundEnd
.d938	b938	c9 3a		cmp #$3a			cmp 	#"9"+1
.d93a	b93a	90 f4		bcc $b930			bcc 	_THFindLoop
.d93c	b93c	c9 41		cmp #$41			cmp 	#"A"
.d93e	b93e	90 04		bcc $b944			bcc 	_THFoundEnd
.d940	b940	c9 47		cmp #$47			cmp 	#"F"+1
.d942	b942	90 ec		bcc $b930			bcc 	_THFindLoop
.d944	b944					_THFoundEnd:
.d944	b944	7a		ply				ply 								; restore start
.d945	b945	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; output the block
.d948	b948	60		rts				rts
.d949	b949					TOKCalculateHash:
.d949	b949	da		phx				phx
.d94a	b94a	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d94d	b94d	a9 00		lda #$00			lda 	#0
.d94f	b94f					_TCHLoop:
.d94f	b94f	18		clc				clc
.d950	b950	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d953	b953	e8		inx				inx
.d954	b954	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d957	b957	d0 f6		bne $b94f			bne 	_TCHLoop
.d959	b959	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d95c	b95c	fa		plx				plx
.d95d	b95d	60		rts				rts
.d95e	b95e					LCLFixLineBufferCase:
.d95e	b95e	a2 00		ldx #$00			ldx 	#0
.d960	b960					_FLBCLoop:
.d960	b960	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d963	b963	f0 22		beq $b987			beq 	_FLBCExit 					; end of string.
.d965	b965	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d967	b967	f0 11		beq $b97a			beq 	_FLBCInQuotes
.d969	b969	e8		inx				inx
.d96a	b96a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d96c	b96c	90 f2		bcc $b960			bcc 	_FLBCLoop
.d96e	b96e	c9 7b		cmp #$7b			cmp 	#'z'+1
.d970	b970	b0 ee		bcs $b960			bcs 	_FLBCLoop
.d972	b972	38		sec				sec 								; make U/C
.d973	b973	e9 20		sbc #$20			sbc 	#32
.d975	b975	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d978	b978	80 e6		bra $b960			bra 	_FLBCLoop
.d97a	b97a					_FLBCInQuotes:
.d97a	b97a	e8		inx				inx 								; advance
.d97b	b97b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d97e	b97e	f0 07		beq $b987			beq 	_FLBCExit 					; exit on EOS
.d980	b980	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d982	b982	d0 f6		bne $b97a			bne 	_FLBCInQuotes
.d984	b984	e8		inx				inx 								; skip over it
.d985	b985	80 d9		bra $b960			bra 	_FLBCLoop
.d987	b987					_FLBCExit:
.d987	b987	60		rts				rts
.d988	b988					TOKExtractLineNumber:
.d988	b988	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d98b	b98b	48		pha				pha
.d98c	b98c	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d98f	b98f	48		pha				pha
.d990	b990	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 2
.d993	b993	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 4
.d996	b996	18		clc				clc 								; add stacked value
.d997	b997	68		pla				pla
.d998	b998	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d99b	b99b	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d99e	b99e	68		pla				pla
.d99f	b99f	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9a2	b9a2	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9a5	b9a5	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 10
.d9a8	b9a8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9ab	b9ab	e8		inx				inx
.d9ac	b9ac	29 0f		and #$0f			and 	#15 						; add to line #
.d9ae	b9ae	18		clc				clc
.d9af	b9af	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9b2	b9b2	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9b5	b9b5	90 03		bcc $b9ba			bcc 	_TLENNoCarry
.d9b7	b9b7	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ba	b9ba					_TLENNoCarry:
.d9ba	b9ba	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9bd	b9bd	c9 30		cmp #$30			cmp 	#'0'
.d9bf	b9bf	90 04		bcc $b9c5			bcc 	_TLENExit
.d9c1	b9c1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9c3	b9c3	90 c3		bcc $b988			bcc 	TOKExtractLineNumber
.d9c5	b9c5					_TLENExit:
.d9c5	b9c5	60		rts				rts
.d9c6	b9c6					_LCLNTimes2:
.d9c6	b9c6	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9c9	b9c9	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9cc	b9cc	60		rts				rts
.d9cd	b9cd					TOKWriteByte:
.d9cd	b9cd	da		phx				phx
.d9ce	b9ce	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9d1	b9d1	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9d4	b9d4	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9d7	b9d7	fa		plx				plx
.d9d8	b9d8	60		rts				rts
.d9d9	b9d9					TOKCheckCreateVariableRecord:
.d9d9	b9d9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9db	b9db	85 36		sta $36				sta 	0+zTemp0
.d9dd	b9dd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9df	b9df	85 37		sta $37				sta 	1+zTemp0
.d9e1	b9e1					_CCVSearch:
.d9e1	b9e1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9e3	b9e3	f0 2c		beq $ba11			beq 	_CCVFail
.d9e5	b9e5	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9e7	b9e7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9e9	b9e9	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9ec	b9ec	d0 16		bne $ba04			bne 	_CCVNext
.d9ee	b9ee	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9f0	b9f0	ae 00 04	ldx $0400			ldx 	identStart
.d9f3	b9f3					_CCVCompare:
.d9f3	b9f3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9f6	b9f6	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9f8	b9f8	e8		inx				inx 								; advance pointers
.d9f9	b9f9	c8		iny				iny
.d9fa	b9fa	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9fb	b9fb	d0 07		bne $ba04			bne 	_CCVNext  					; didn't match go to next.
.d9fd	b9fd	90 f4		bcc $b9f3			bcc 	_CCVCompare 				; not finished yet.
.d9ff	b9ff	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da02	ba02	f0 41		beq $ba45			beq 	_CCVFound 					; yes, we were successful
.da04	ba04					_CCVNext:
.da04	ba04	18		clc				clc 								; go to next record.
.da05	ba05	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da07	ba07	65 36		adc $36				adc 	zTemp0
.da09	ba09	85 36		sta $36				sta 	zTemp0
.da0b	ba0b	90 d4		bcc $b9e1			bcc 	_CCVSearch
.da0d	ba0d	e6 37		inc $37				inc 	zTemp0+1
.da0f	ba0f	80 d0		bra $b9e1			bra 	_CCVSearch
.da11	ba11					_CCVFail:
.da11	ba11	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da13	ba13	ad 03 04	lda $0403			lda 	identHash
.da16	ba16	91 36		sta ($36),y			sta 	(zTemp0),y
.da18	ba18	c8		iny				iny 								; offset 2 is the type byte
.da19	ba19	ad 04 04	lda $0404			lda 	identTypeByte
.da1c	ba1c	91 36		sta ($36),y			sta 	(zTemp0),y
.da1e	ba1e	c8		iny				iny
.da1f	ba1f					_CCVData:
.da1f	ba1f	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da21	ba21	91 36		sta ($36),y			sta 	(zTemp0),y
.da23	ba23	c8		iny				iny
.da24	ba24	c0 08		cpy #$08			cpy 	#8
.da26	ba26	90 f7		bcc $ba1f			bcc 	_CCVData
.da28	ba28	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da2b	ba2b					_CCVCopyName:
.da2b	ba2b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da2e	ba2e	91 36		sta ($36),y			sta 	(zTemp0),y
.da30	ba30	e8		inx				inx
.da31	ba31	c8		iny				iny
.da32	ba32	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da35	ba35	d0 f4		bne $ba2b			bne 	_CCVCopyName
.da37	ba37	98		tya				tya 								; patch offset
.da38	ba38	92 36		sta ($36)			sta 	(zTemp0)
.da3a	ba3a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da3c	ba3c	91 36		sta ($36),y			sta 	(zTemp0),y
.da3e	ba3e	88		dey				dey
.da3f	ba3f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da41	ba41	09 80		ora #$80			ora 	#$80
.da43	ba43	91 36		sta ($36),y			sta 	(zTemp0),y
.da45	ba45					_CCVFound:
.da45	ba45	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da47	ba47	38		sec				sec
.da48	ba48	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da4a	ba4a	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da4c	ba4c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da4f	ba4f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da51	ba51	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da54	ba54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da55	ba55					SNDCheckChannel:
.da55	ba55	aa		tax				tax
.da56	ba56	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da59	ba59	d0 38		bne $ba93			bne 	_SNDCCExit
.da5b	ba5b	da		phx				phx 								; save current channel
.da5c	ba5c	8a		txa				txa 								; put in A
.da5d	ba5d	20 d9 ba	jsr $bad9			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da60	ba60	68		pla				pla 								; channel # in A
.da61	ba61	90 30		bcc $ba93			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da63	ba63	a8		tay				tay 								; Y is the channel #
.da64	ba64	bd 2f 07	lda $072f,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da67	ba67	99 2e 08	sta $082e,y			sta 	SNDPitchLow,y
.da6a	ba6a	bd 30 07	lda $0730,x			lda 	SNDQueue+2,x
.da6d	ba6d	99 32 08	sta $0832,y			sta 	SNDPitchHigh,y
.da70	ba70	bd 31 07	lda $0731,x			lda 	SNDQueue+3,x
.da73	ba73	99 36 08	sta $0836,y			sta 	SNDVolume,y
.da76	ba76	bd 32 07	lda $0732,x			lda 	SNDQueue+4,x
.da79	ba79	99 3a 08	sta $083a,y			sta 	SNDTimeLeft,y
.da7c	ba7c	bd 33 07	lda $0733,x			lda 	SNDQueue+5,x
.da7f	ba7f	99 3e 08	sta $083e,y			sta 	SNDAdjustLow,y
.da82	ba82	bd 34 07	lda $0734,x			lda 	SNDQueue+6,x
.da85	ba85	99 42 08	sta $0842,y			sta 	SNDAdjustHigh,y
.da88	ba88	5a		phy				phy 								; save channel #
.da89	ba89	20 f3 ba	jsr $baf3			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da8c	ba8c	ce 2d 07	dec $072d			dec 	SNDLength 					; reduce the queue length.
.da8f	ba8f	68		pla				pla
.da90	ba90	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update channel A
.da93	ba93					_SNDCCExit:
.da93	ba93	60		rts				rts
.da94	ba94					SNDUpdateNote:
.da94	ba94	aa		tax				tax 								; so we can access records
.da95	ba95	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da96	ba96	0a		asl a				asl 	a
.da97	ba97	0a		asl a				asl 	a
.da98	ba98	0a		asl a				asl 	a
.da99	ba99	0a		asl a				asl 	a
.da9a	ba9a	8d 2c 07	sta $072c			sta 	SNDChannelBits
.da9d	ba9d	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; are we silent
.daa0	baa0	f0 2e		beq $bad0			beq 	_SNDUNIsSilent
.daa2	baa2	ad 2c 07	lda $072c			lda 	SNDChannelBits 				; push channel bits on stack
.daa5	baa5	48		pha				pha
.daa6	baa6	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.daa9	baa9	29 0f		and #$0f			and 	#$0F
.daab	baab	0d 2c 07	ora $072c			ora 	SNDChannelBits 				; set channel bits
.daae	baae	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dab0	bab0	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dab3	bab3	bd 32 08	lda $0832,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dab6	bab6	8d 2c 07	sta $072c			sta 	SNDChannelBits
.dab9	bab9	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x
.dabc	babc	4e 2c 07	lsr $072c			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dabf	babf	6a		ror a				ror 	a
.dac0	bac0	4e 2c 07	lsr $072c			lsr 	SNDChannelBits
.dac3	bac3	6a		ror a				ror 	a
.dac4	bac4	4a		lsr a				lsr 	a 							; put in bits 0-5
.dac5	bac5	4a		lsr a				lsr 	a
.dac6	bac6	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write as rest of pitch register
.dac9	bac9	68		pla				pla
.daca	baca	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dacc	bacc	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dacf	bacf	60		rts				rts
.dad0	bad0					_SNDUNIsSilent:
.dad0	bad0	ad 2c 07	lda $072c			lda 	SNDChannelBits 				; channel bits
.dad3	bad3	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dad5	bad5	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write to the ports
.dad8	bad8	60		rts				rts
.dad9	bad9					SNDFindNextNoteForA:
.dad9	bad9	ac 2d 07	ldy $072d			ldy 	SNDLength 					; queue size into Y
.dadc	badc	f0 13		beq $baf1			beq 	_SNDFNNFail 				; queue empty.
.dade	bade	a2 00		ldx #$00			ldx 	#0
.dae0	bae0					_SNDFNNSearch:
.dae0	bae0	dd 2e 07	cmp $072e,x			cmp 	SNDQueue,x 					; does it match the channel
.dae3	bae3	38		sec				sec
.dae4	bae4	f0 0c		beq $baf2			beq 	_SNDFNNExit 				; if so exit with CS.
.dae6	bae6	e8		inx				inx 								; next queue slot.
.dae7	bae7	e8		inx				inx
.dae8	bae8	e8		inx				inx
.dae9	bae9	e8		inx				inx
.daea	baea	e8		inx				inx
.daeb	baeb	e8		inx				inx
.daec	baec	e8		inx				inx
.daed	baed	e8		inx				inx
.daee	baee	88		dey				dey 								; done the whole queue
.daef	baef	d0 ef		bne $bae0			bne 	_SNDFNNSearch 				; no, go back.
.daf1	baf1					_SNDFNNFail:
.daf1	baf1	18		clc				clc
.daf2	baf2					_SNDFNNExit:
.daf2	baf2	60		rts				rts
.daf3	baf3					SNDDeleteXFromQueue:
.daf3	baf3	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.daf5	baf5	f0 09		beq $bb00			beq 	_SNDDXExit
.daf7	baf7	bd 36 07	lda $0736,x			lda 	SNDQueue+8,x
.dafa	bafa	9d 2e 07	sta $072e,x			sta 	SNDQueue,x
.dafd	bafd	e8		inx				inx
.dafe	bafe	80 f3		bra $baf3			bra 	SNDDeleteXFromQueue
.db00	bb00					_SNDDXExit:
.db00	bb00	60		rts				rts
.072c						SNDChannelBits:
>072c								.fill 	1
.db01	bb01					SNDQueueRequest:
.db01	bb01	86 36		stx $36				stx 	zTemp0						; save queue address
.db03	bb03	84 37		sty $37				sty 	zTemp0+1
.db05	bb05	ae 2d 07	ldx $072d			ldx 	SNDLength 					; queue is full, can't take any more.
.db08	bb08	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db0a	bb0a	f0 21		beq $bb2d			beq 	_SNDQRExit
.db0c	bb0c	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db0e	bb0e	48		pha				pha
.db0f	bb0f	8a		txa				txa  								; get offset in queue buffer/
.db10	bb10	0a		asl a				asl 	a
.db11	bb11	0a		asl a				asl 	a
.db12	bb12	0a		asl a				asl 	a
.db13	bb13	aa		tax				tax
.db14	bb14	68		pla				pla 								; get back and push again
.db15	bb15	48		pha				pha
.db16	bb16	9d 2e 07	sta $072e,x			sta 	SNDQueue+0,x 				; save the channel #
.db19	bb19	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db1b	bb1b					_SNDQCopy:
.db1b	bb1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	c8		iny				iny
.db1f	bb1f	9d 2e 07	sta $072e,x			sta 	SNDQueue,x
.db22	bb22	c0 06		cpy #$06			cpy 	#6
.db24	bb24	d0 f5		bne $bb1b			bne 	_SNDQCopy
.db26	bb26	ee 2d 07	inc $072d			inc 	SNDLength 					; bump queue length.
.db29	bb29	68		pla				pla 								; get channel # back
.db2a	bb2a	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db2d	bb2d					_SNDQRExit:
.db2d	bb2d	60		rts				rts
.db2e	bb2e					SNDSilenceChannel:
.db2e	bb2e	aa		tax				tax 								; zero time left.
.db2f	bb2f	9e 3a 08	stz $083a,x			stz 	SNDTimeLeft,x
.db32	bb32	0a		asl a				asl 	a 							; shift into position
.db33	bb33	0a		asl a				asl 	a
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	0a		asl a				asl 	a
.db37	bb37	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db39	bb39	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.db3c	bb3c	60		rts				rts
.db3d	bb3d					SNDWritePorts:
.db3d	bb3d	da		phx				phx 								; save X
.db3e	bb3e	a6 01		ldx $01				ldx 	1 							; save I/O status
.db40	bb40	64 01		stz $01				stz 	1 							; access I/O page 0
.db42	bb42	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db45	bb45	8d 10 d6	sta $d610			sta 	$D610
.db48	bb48	86 01		stx $01				stx 	1 							; restore I/O
.db4a	bb4a	fa		plx				plx 								; restore X
.db4b	bb4b	60		rts				rts
.db4c	bb4c					Export_SNDCommand:
.db4c	bb4c	da		phx				phx 								; save XY
.db4d	bb4d	5a		phy				phy
.db4e	bb4e	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db50	bb50	f0 1d		beq $bb6f			beq 	_SNDInitialise
.db52	bb52	90 28		bcc $bb7c			bcc 	_SNDExit
.db54	bb54	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db56	bb56	f0 17		beq $bb6f			beq 	_SNDSilence
.db58	bb58	b0 22		bcs $bb7c			bcs 	_SNDExit
.db5a	bb5a	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db5c	bb5c	b0 09		bcs $bb67			bcs 	_SNDQueryPlay
.db5e	bb5e	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db60	bb60	b0 1a		bcs $bb7c			bcs 	_SNDExit
.db62	bb62	20 01 bb	jsr $bb01			jsr 	SNDQueueRequest
.db65	bb65	80 15		bra $bb7c			bra 	_SNDExit
.db67	bb67					_SNDQueryPlay:
.db67	bb67	29 03		and #$03			and 	#3 							; get channel #
.db69	bb69	aa		tax				tax
.db6a	bb6a	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db6d	bb6d	80 0d		bra $bb7c			bra 	_SNDExit
.db6f	bb6f					_SNDInitialise:
.db6f	bb6f					_SNDSilence:
.db6f	bb6f	9c 2d 07	stz $072d			stz 	SNDLength 					; empty the queue.
.db72	bb72	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db74	bb74					_SNDSilenceLoop:
.db74	bb74	48		pha				pha
.db75	bb75	20 2e bb	jsr $bb2e			jsr 	SNDSilenceChannel
.db78	bb78	68		pla				pla
.db79	bb79	3a		dec a				dec 	a
.db7a	bb7a	10 f8		bpl $bb74			bpl 	_SNDSilenceLoop
.db7c	bb7c					_SNDExit:
.db7c	bb7c	7a		ply				ply
.db7d	bb7d	fa		plx				plx
.db7e	bb7e	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072d						SNDLength:
>072d								.fill 	1
.072e						SNDQueue:
>072e								.fill 	SNDQueueSize * 8
.082e						SNDPitchLow:
>082e								.fill 	4
.0832						SNDPitchHigh:
>0832								.fill 	4
.0836						SNDVolume:
>0836								.fill 	4
.083a						SNDTimeLeft:
>083a								.fill 	4
.083e						SNDAdjustLow:
>083e								.fill 	4
.0842						SNDAdjustHigh:
>0842								.fill 	4
.db7f	bb7f					Export_SNDUpdate:
.db7f	bb7f					PagedSNDUpdate:
.db7f	bb7f	ad 3a 08	lda $083a			lda 	SNDTimeLeft+0 				; look at time remaining
.db82	bb82	f0 05		beq $bb89			beq 	_SNDUNot0 					; not playing
.db84	bb84	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db86	bb86	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel 			; update it.
.db89	bb89					_SNDUNot0:
.db89	bb89	ad 3b 08	lda $083b			lda 	SNDTimeLeft+1
.db8c	bb8c	f0 05		beq $bb93			beq 	_SNDUNot1
.db8e	bb8e	a2 01		ldx #$01			ldx 	#1
.db90	bb90	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db93	bb93					_SNDUNot1:
.db93	bb93	ad 3c 08	lda $083c			lda 	SNDTimeLeft+2
.db96	bb96	f0 05		beq $bb9d			beq 	_SNDUNot2
.db98	bb98	a2 02		ldx #$02			ldx 	#2
.db9a	bb9a	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db9d	bb9d					_SNDUNot2:
.db9d	bb9d	ad 3d 08	lda $083d			lda 	SNDTimeLeft+3
.dba0	bba0	f0 05		beq $bba7			beq 	_SNDUNot3
.dba2	bba2	a2 03		ldx #$03			ldx 	#3
.dba4	bba4	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.dba7	bba7					_SNDUNot3:
.dba7	bba7	60		rts				rts
.dba8	bba8					SNDUpdateChannel:
.dba8	bba8	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbaa	bbaa	f0 2c		beq $bbd8			beq 	_SNDUCExit
.dbac	bbac	3a		dec a				dec 	a 							; decrement and update timer
.dbad	bbad	9d 3a 08	sta $083a,x			sta 	SNDTimeLeft,x
.dbb0	bbb0	f0 1d		beq $bbcf			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbb2	bbb2	bd 3e 08	lda $083e,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbb5	bbb5	1d 42 08	ora $0842,x			ora 	SNDAdjustHigh,x
.dbb8	bbb8	f0 1e		beq $bbd8			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbba	bbba	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbbb	bbbb	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x
.dbbe	bbbe	7d 3e 08	adc $083e,x			adc 	SNDAdjustLow,x
.dbc1	bbc1	9d 2e 08	sta $082e,x			sta 	SNDPitchLow,x
.dbc4	bbc4	bd 32 08	lda $0832,x			lda 	SNDPitchHigh,x
.dbc7	bbc7	7d 42 08	adc $0842,x			adc 	SNDAdjustHigh,x
.dbca	bbca	29 03		and #$03			and 	#3
.dbcc	bbcc	9d 32 08	sta $0832,x			sta 	SNDPitchHigh,x
.dbcf	bbcf					_SNDUCUpdate:
.dbcf	bbcf	8a		txa				txa 								; which channel.
.dbd0	bbd0	48		pha				pha
.dbd1	bbd1	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update the current note
.dbd4	bbd4	68		pla				pla
.dbd5	bbd5	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; more to do ?
.dbd8	bbd8					_SNDUCExit:
.dbd8	bbd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbd9	bbd9					Export_KNLInputSingleCharacter:
.dbd9	bbd9					PagedInputSingleCharacter:
.dbd9	bbd9	da		phx				phx
.dbda	bbda	5a		phy				phy
.dbdb	bbdb					_EISCWait:
.dbdb	bbdb	a5 01		lda $01				lda 	1 							; save I/O 0
.dbdd	bbdd	48		pha				pha
.dbde	bbde	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbe0	bbe0	38		sec				sec 								; calculate timer - LastTick
.dbe1	bbe1	ad 59 d6	lda $d659			lda 	$D659
.dbe4	bbe4	aa		tax				tax 								; saving timer in X
.dbe5	bbe5	ed 5e 06	sbc $065e			sbc 	LastTick
.dbe8	bbe8	c9 03		cmp #$03			cmp 	#3
.dbea	bbea	90 06		bcc $bbf2			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbec	bbec	8e 5e 06	stx $065e			stx 	LastTick 					; update last timer
.dbef	bbef	20 7f bb	jsr $bb7f			jsr 	PagedSNDUpdate 							; go do the code.
.dbf2	bbf2					_NoFireTick:
.dbf2	bbf2	68		pla				pla 								; restore I/O 0
.dbf3	bbf3	85 01		sta $01				sta 	1
.dbf5	bbf5	20 ff bb	jsr $bbff			jsr 	CheckKeyPressed
.dbf8	bbf8	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbfa	bbfa	f0 df		beq $bbdb			beq 	_EISCWait
.dbfc	bbfc	7a		ply				ply
.dbfd	bbfd	fa		plx				plx
.dbfe	bbfe	60		rts				rts
.dbff	bbff					Export_KNLInkey:
.dbff	bbff					CheckKeyPressed:
.dbff	bbff	a9 46		lda #$46			lda     #<event 					; tell kernel where events go.
.dc01	bc01	85 f0		sta $f0				sta     kernel.args.events+0
.dc03	bc03	a9 08		lda #$08			lda     #>event
.dc05	bc05	85 f1		sta $f1				sta     kernel.args.events+1
.dc07	bc07	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc0a	bc0a	b0 0b		bcs $bc17			bcs 	_CKPNoEvent 				; no event
.dc0c	bc0c	ad 46 08	lda $0846			lda     event.type
.dc0f	bc0f	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc11	bc11	d0 04		bne $bc17			bne 	_CKPNoEvent
.dc13	bc13	ad 4b 08	lda $084b			lda     event.key.ascii
.dc16	bc16	60		rts				rts
.dc17	bc17					_CKPNoEvent:
.dc17	bc17	a9 00		lda #$00			lda 	#0
.dc19	bc19	60		rts				rts
.dc1a	bc1a					Export_EXTBreakCheck:
.dc1a	bc1a	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc1d	bc1d					Export_EXTReadController:
.dc1d	bc1d	da		phx				phx
.dc1e	bc1e	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc20	bc20	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc22	bc22	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc25	bc25	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc27	bc27	fa		plx				plx
.dc28	bc28	60		rts				rts
.0846						event
>0846						type        .byte   ?   ; Enum above
>0847						buf         .byte   ?   ; page id or zero
>0848						ext         .byte   ?   ; page id or zero
.0849						key
>0849						keyboard    .byte   ?   ; Keyboard ID
>084a						raw         .byte   ?   ; Raw key ID
>084b						ascii       .byte   ?   ; ASCII value
>084c						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0849						mouse
.0849						delta
>0849						x           .byte   ?
>084a						y           .byte   ?
>084b						z           .byte   ?
>084c						buttons     .byte   ?
.0849						clicks
>0849						inner       .byte   ?
>084a						middle      .byte   ?
>084b						outer       .byte   ?
.0849						udp
>0849						token       .byte   ?   ; TODO: break out into fields
.0849						file
>0849						stream      .byte   ?
>084a						cookie      .byte   ?
.084b						data
>084b						requested   .byte   ?   ; Requested number of bytes to read
>084c						read        .byte   ?   ; Number of bytes actually read
.084b						wrote
>084b						requested   .byte   ?   ; Requested number of bytes to read
>084c						wrote       .byte   ?   ; Number of bytes actually read
.0849						directory
>0849						stream      .byte   ?
>084a						cookie      .byte   ?
.084b						volume
>084b						len         .byte   ?   ; Length of volname (in buf)
>084c						flags       .byte   ?   ; block size, text encoding
.084b						file
>084b						len         .byte   ?
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
.084b						free
>084b						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc29	bc29					Export_KNLOpenFileWrite:
.dc29	bc29	48		pha				pha
.dc2a	bc2a	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc2c	bc2c	80 03		bra $bc31			bra 	KNLOpenStart
.dc2e	bc2e					Export_KNLOpenFileRead:
.dc2e	bc2e	48		pha				pha
.dc2f	bc2f	a9 00		lda #$00	        lda     #kernel.args.file.open.READ ; set READ mode.
.dc31	bc31					KNLOpenStart:
.dc31	bc31	85 f5		sta $f5		        sta     kernel.args.file.open.mode
.dc33	bc33	68		pla		        pla
.dc34	bc34	20 6e bc	jsr $bc6e			jsr 	KNLSetupFileName
.dc37	bc37	a9 46		lda #$46	        lda     #event & $FF 				; tell kernel where to store event data
.dc39	bc39	85 f0		sta $f0		        sta     kernel.args.events+0
.dc3b	bc3b	a9 08		lda #$08	        lda     #event >> 8
.dc3d	bc3d	85 f1		sta $f1		        sta     kernel.args.events+1
.dc3f	bc3f	a9 00		lda #$00			lda 	#0 							; currently drive zero only.
.dc41	bc41	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc43	bc43	20 5c ff	jsr $ff5c	        jsr     kernel.File.Open 			; open the file and exit.
.dc46	bc46	a9 38		lda #$38	        lda     #kernel.event.file.ERROR
.dc48	bc48	b0 1d		bcs $bc67	        bcs     _out
.dc4a	bc4a					_loop
.dc4a	bc4a	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc4d	bc4d	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc50	bc50	b0 f8		bcs $bc4a			bcs     _loop
.dc52	bc52	ad 46 08	lda $0846			lda 	event.type
.dc55	bc55	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc57	bc57	f0 0a		beq $bc63			beq 	_success
.dc59	bc59	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc5b	bc5b	f0 0a		beq $bc67			beq 	_out
.dc5d	bc5d	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc5f	bc5f	f0 06		beq $bc67			beq 	_out
.dc61	bc61	80 e7		bra $bc4a			bra     _loop
.dc63	bc63					_success
.dc63	bc63	ad 49 08	lda $0849	        lda     event.file.stream
.dc66	bc66	18		clc		        clc
.dc67	bc67					_out
.dc67	bc67	60		rts		        rts
.dc68	bc68					Export_KNLCloseFile:
.dc68	bc68	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc6a	bc6a	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc6d	bc6d	60		rts				rts
.dc6e	bc6e					KNLSetupFileName:
.dc6e	bc6e	5a		phy				phy 								; save Y on stack
.dc6f	bc6f	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc71	bc71	86 37		stx $37				stx 	zTemp0+1
.dc73	bc73	85 fb		sta $fb		        sta     kernel.args.file.open.fname+0
.dc75	bc75	86 fc		stx $fc		        stx     kernel.args.file.open.fname+1
.dc77	bc77	a0 ff		ldy #$ff	        ldy 	#$FF 						; get the filename length => Kernel slot
.dc79	bc79					_KNLGetLength:
.dc79	bc79	c8		iny				iny
.dc7a	bc7a	b1 36		lda ($36),y			lda 	(zTemp0),y
.dc7c	bc7c	d0 fb		bne $bc79			bne 	_KNLGetLength
.dc7e	bc7e	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dc80	bc80	7a		ply				ply
.dc81	bc81	60		rts				rts
=64						KNLBufLen = 64 								; read buffer size.
.084d						KNLStream:
>084d								.byte   ?
.084e						KNLBuf:
>084e								.fill   KNLBufLen
.088e						KNLNext:
>088e								.byte   ?
.088f						KNLEnd:
>088f								.byte   ?
.dc82	bc82					Export_KNLReadByteInit:
.dc82	bc82	8d 4d 08	sta $084d			sta     KNLStream 					; save stream
.dc85	bc85	9c 8e 08	stz $088e			stz     KNLNext 					; reset buffer
.dc88	bc88	9c 8f 08	stz $088f			stz     KNLEnd
.dc8b	bc8b	60		rts				rts
.dc8c	bc8c					Export_KNLReadByte:
.dc8c	bc8c	da		phx				phx
.dc8d	bc8d	ae 8e 08	ldx $088e			ldx     KNLNext 					; all data consumed ?
.dc90	bc90	ec 8f 08	cpx $088f			cpx     KNLEnd
.dc93	bc93	d0 0d		bne $bca2			bne     _KNLRBGetNextByte
.dc95	bc95	20 ab bc	jsr $bcab			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dc98	bc98	b0 0f		bcs $bca9			bcs     _KNLRBError 				; error has occurred on read.
.dc9a	bc9a	8d 8f 08	sta $088f			sta     KNLEnd 						; # read is the number available
.dc9d	bc9d	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dc9f	bc9f	8e 8e 08	stx $088e			stx     KNLNext
.dca2	bca2					_KNLRBGetNextByte:
.dca2	bca2	bd 4e 08	lda $084e,x			lda     KNLBuf,x 					; get the next data item
.dca5	bca5	ee 8e 08	inc $088e			inc     KNLNext 					; and advance the index
.dca8	bca8	18		clc				clc 								; succeeded
.dca9	bca9					_KNLRBError:
.dca9	bca9	fa		plx				plx
.dcaa	bcaa	60		rts				rts
.dcab	bcab					KNLRBGetNextBlock:
.dcab	bcab	ad 4d 08	lda $084d			lda     KNLStream 					; set stream to read from
.dcae	bcae	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcb0	bcb0	a9 40		lda #$40			lda     #KNLBufLen 					; set bytes to read.
.dcb2	bcb2	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dcb4	bcb4	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dcb7	bcb7	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dcb9	bcb9	b0 2e		bcs $bce9			bcs     _KGNBExitFail               ; report as general error
.dcbb	bcbb					_KGRBEventLoop:
.dcbb	bcbb	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dcbe	bcbe	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcc1	bcc1	b0 f8		bcs $bcbb			bcs     _KGRBEventLoop
.dcc3	bcc3	ad 46 08	lda $0846			lda 	event.type 					; get event
.dcc6	bcc6	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcc8	bcc8	f0 0a		beq $bcd4			beq     _KNLRBGetNextByte
.dcca	bcca	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dccc	bccc	f0 1b		beq $bce9			beq 	_KGNBExitFail
.dcce	bcce	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcd0	bcd0	f0 17		beq $bce9			beq 	_KGNBExitFail
.dcd2	bcd2	80 e7		bra $bcbb			bra 	_KGRBEventLoop
.dcd4	bcd4					_KNLRBGetNextByte:
.dcd4	bcd4	a9 4e		lda #$4e			lda     #<KNLBuf 					; Set the target buffer
.dcd6	bcd6	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dcd8	bcd8	a9 08		lda #$08			lda     #>KNLBuf
.dcda	bcda	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dcdc	bcdc	ad 4c 08	lda $084c			lda     event.file.data.read 		; Set the target length
.dcdf	bcdf	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dce1	bce1	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dce4	bce4	ad 4c 08	lda $084c			lda    event.file.data.read 		; Return # of bytes read (in A)
.dce7	bce7	18		clc				clc
.dce8	bce8	60		rts				rts
.dce9	bce9					_KGNBExitFail:
.dce9	bce9	38		sec				sec
.dcea	bcea	60		rts				rts
.dceb	bceb					Export_KNLWriteBlock:
.dceb	bceb	48		pha				pha
.dcec	bcec	da		phx				phx
.dced	bced	5a		phy				phy
.dcee	bcee	85 f3		sta $f3		        sta     kernel.args.file.write.stream ; save the stream.
.dcf0	bcf0	a5 36		lda $36		        lda     zTemp0 						; save the data location.
.dcf2	bcf2	85 fb		sta $fb		        sta     kernel.args.file.write.buf+0
.dcf4	bcf4	a5 37		lda $37		        lda     zTemp0+1
.dcf6	bcf6	85 fc		sta $fc		        sta     kernel.args.file.write.buf+1
.dcf8	bcf8	86 fd		stx $fd		        stx     kernel.args.file.write.buflen ; Set the buffer length
.dcfa	bcfa	20 64 ff	jsr $ff64	        jsr     kernel.File.Write 			; write it out.
.dcfd	bcfd	a9 38		lda #$38	        lda 	#kernel.event.file.ERROR 	; in case it fails.
.dcff	bcff	b0 1e		bcs $bd1f	        bcs 	_KWBFailed
.dd01	bd01					_KNLWLoop:
.dd01	bd01	20 0c ff	jsr $ff0c	       	jsr     kernel.Yield
.dd04	bd04	20 00 ff	jsr $ff00	        jsr     kernel.NextEvent
.dd07	bd07	b0 f8		bcs $bd01	        bcs     _KNLWLoop
.dd09	bd09	ad 46 08	lda $0846	        lda     event.type 					; various errors.
.dd0c	bd0c	c9 32		cmp #$32	        cmp     #kernel.event.file.CLOSED
.dd0e	bd0e	f0 0f		beq $bd1f	        beq 	_KWBFailed
.dd10	bd10	c9 38		cmp #$38	        cmp     #kernel.event.file.ERROR
.dd12	bd12	f0 0b		beq $bd1f	        beq 	_KWBFailed
.dd14	bd14	c9 30		cmp #$30	        cmp     #kernel.event.file.EOF
.dd16	bd16	f0 07		beq $bd1f	        beq 	_KWBFailed
.dd18	bd18	c9 2e		cmp #$2e	        cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd1a	bd1a	d0 e5		bne $bd01	      	bne 	_KNLWLoop
.dd1c	bd1c	18		clc		      	clc
.dd1d	bd1d	80 01		bra $bd20	      	bra 	_KWBExit
.dd1f	bd1f					_KWBFailed:
.dd1f	bd1f	38		sec				sec
.dd20	bd20					_KWBExit:
.dd20	bd20	7a		ply				ply
.dd21	bd21	fa		plx				plx
.dd22	bd22	68		pla				pla
.dd23	bd23	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
