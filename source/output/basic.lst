
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Wed Sep 21 11:09:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_GETDATEDOLLARLPAREN              = $88; $88 GETDATE$(
=$89					KWD_GETTIMEDOLLARLPAREN              = $89; $89 GETTIME$(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_PAGE                             = $91; $91 PAGE
=$92					KWD_RIGHTDOLLARLPAREN                = $92; $92 RIGHT$(
=$93					KWD_RNDLPAREN                        = $93; $93 RND(
=$94					KWD_SGNLPAREN                        = $94; $94 SGN(
=$95					KWD_SPCLPAREN                        = $95; $95 SPC(
=$96					KWD_STRDOLLARLPAREN                  = $96; $96 STR$(
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 2b 81	jsr $812b			jsr 	NewCommand 					; erase current program
.8016	20 9d 84	jsr $849d			jsr 	BackloadProgram
.8019	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.801b	85 30		sta $30				sta 	0+codePtr
.801d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.801f	85 31		sta $31				sta 	1+codePtr
.8021	a0 04		ldy #$04			ldy 	#4
.8023	a2 01		ldx #$01			ldx 	#1
.8025	20 aa 81	jsr $81aa			jsr 	EvaluateExpression
.8028					WarmStart:
>8028	db						.byte 	$DB 						; causes a break in the emulator
.8029	80 fd		bra $8028			bra 	WarmStart
.802b					ErrorHandler:
>802b	db						.byte 	$DB 						; causes a break in the emulator
.802c	4c 2b 80	jmp $802b			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.802f					VectorSetPunc:
>802f	35 81					.word	ShiftLt                          ; $00 <<
>8031	04 89					.word	SyntaxError                      ; $01 <=
>8033	04 89					.word	SyntaxError                      ; $02 <>
>8035	04 89					.word	SyntaxError                      ; $03 !!3
>8037	04 89					.word	SyntaxError                      ; $04 ><
>8039	04 89					.word	SyntaxError                      ; $05 >=
>803b	04 89					.word	SyntaxError                      ; $06 >>
>803d	04 89					.word	SyntaxError                      ; $07 !!7
>803f	04 89					.word	SyntaxError                      ; $08 !!8
>8041	04 89					.word	SyntaxError                      ; $09 !!9
>8043	04 89					.word	SyntaxError                      ; $0a !!10
>8045	04 89					.word	SyntaxError                      ; $0b !!11
>8047	04 89					.word	SyntaxError                      ; $0c !!12
>8049	04 89					.word	SyntaxError                      ; $0d !!13
>804b	04 89					.word	SyntaxError                      ; $0e !!14
>804d	04 89					.word	SyntaxError                      ; $0f !!15
>804f	04 89					.word	SyntaxError                      ; $10 @
>8051	04 89					.word	SyntaxError                      ; $11 !!17
>8053	04 89					.word	SyntaxError                      ; $12 !!18
>8055	04 89					.word	SyntaxError                      ; $13 [
>8057	04 89					.word	SyntaxError                      ; $14 \
>8059	04 89					.word	SyntaxError                      ; $15 ]
>805b	04 89					.word	SyntaxError                      ; $16 ^
>805d	04 89					.word	SyntaxError                      ; $17 _
>805f	04 89					.word	SyntaxError                      ; $18 `
>8061	04 89					.word	SyntaxError                      ; $19 !!25
>8063	04 89					.word	SyntaxError                      ; $1a !!26
>8065	04 89					.word	SyntaxError                      ; $1b {
>8067	04 89					.word	SyntaxError                      ; $1c |
>8069	04 89					.word	SyntaxError                      ; $1d }
>806b	04 89					.word	SyntaxError                      ; $1e ~
>806d	04 89					.word	SyntaxError                      ; $1f [7m<7F>[m
>806f	04 89					.word	SyntaxError                      ; $20
>8071	04 89					.word	SyntaxError                      ; $21 !
>8073	04 89					.word	SyntaxError                      ; $22 "
>8075	04 89					.word	SyntaxError                      ; $23 #
>8077	04 89					.word	SyntaxError                      ; $24 $
>8079	04 89					.word	SyntaxError                      ; $25 %
>807b	04 89					.word	SyntaxError                      ; $26 &
>807d	04 89					.word	SyntaxError                      ; $27 '
>807f	04 89					.word	SyntaxError                      ; $28 (
>8081	04 89					.word	SyntaxError                      ; $29 )
>8083	04 89					.word	SyntaxError                      ; $2a *
>8085	41 81					.word	Add                              ; $2b +
>8087	04 89					.word	SyntaxError                      ; $2c ,
>8089	04 89					.word	SyntaxError                      ; $2d -
>808b	04 89					.word	SyntaxError                      ; $2e .
>808d	04 89					.word	SyntaxError                      ; $2f /
>808f	04 89					.word	SyntaxError                      ; $30 0
>8091	04 89					.word	SyntaxError                      ; $31 1
>8093	04 89					.word	SyntaxError                      ; $32 2
>8095	04 89					.word	SyntaxError                      ; $33 3
>8097	04 89					.word	SyntaxError                      ; $34 4
>8099	04 89					.word	SyntaxError                      ; $35 5
>809b	04 89					.word	SyntaxError                      ; $36 6
>809d	04 89					.word	SyntaxError                      ; $37 7
>809f	04 89					.word	SyntaxError                      ; $38 8
>80a1	04 89					.word	SyntaxError                      ; $39 9
>80a3	04 89					.word	SyntaxError                      ; $3a :
>80a5	04 89					.word	SyntaxError                      ; $3b ;
>80a7	04 89					.word	SyntaxError                      ; $3c <
>80a9	04 89					.word	SyntaxError                      ; $3d =
>80ab	04 89					.word	SyntaxError                      ; $3e >
>80ad	04 89					.word	SyntaxError                      ; $3f ?
.80af					VectorSet0:
>80af	04 89					.word	SyntaxError                      ; $80 !0:EOF
>80b1	04 89					.word	SyntaxError                      ; $81 !1:SH1
>80b3	04 89					.word	SyntaxError                      ; $82 !2:SH2
>80b5	04 89					.word	SyntaxError                      ; $83 ABS(
>80b7	04 89					.word	SyntaxError                      ; $84 ALLOC(
>80b9	04 89					.word	SyntaxError                      ; $85 ASC(
>80bb	04 89					.word	SyntaxError                      ; $86 CHR$(
>80bd	04 89					.word	SyntaxError                      ; $87 DEC(
>80bf	04 89					.word	SyntaxError                      ; $88 GETDATE$(
>80c1	04 89					.word	SyntaxError                      ; $89 GETTIME$(
>80c3	04 89					.word	SyntaxError                      ; $8a HEX$(
>80c5	04 89					.word	SyntaxError                      ; $8b INT(
>80c7	04 89					.word	SyntaxError                      ; $8c ISVAL(
>80c9	04 89					.word	SyntaxError                      ; $8d LEFT$(
>80cb	04 89					.word	SyntaxError                      ; $8e LEN(
>80cd	04 89					.word	SyntaxError                      ; $8f MID$(
>80cf	04 89					.word	SyntaxError                      ; $90 NOT
>80d1	04 89					.word	SyntaxError                      ; $91 PAGE
>80d3	04 89					.word	SyntaxError                      ; $92 RIGHT$(
>80d5	04 89					.word	SyntaxError                      ; $93 RND(
>80d7	04 89					.word	SyntaxError                      ; $94 SGN(
>80d9	04 89					.word	SyntaxError                      ; $95 SPC(
>80db	04 89					.word	SyntaxError                      ; $96 STR$(
>80dd	04 89					.word	SyntaxError                      ; $97 VAL(
>80df	04 89					.word	SyntaxError                      ; $98 FOR
>80e1	04 89					.word	SyntaxError                      ; $99 IF
>80e3	04 89					.word	SyntaxError                      ; $9a PROC
>80e5	04 89					.word	SyntaxError                      ; $9b REPEAT
>80e7	04 89					.word	SyntaxError                      ; $9c WHILE
>80e9	04 89					.word	SyntaxError                      ; $9d ENDIF
>80eb	04 89					.word	SyntaxError                      ; $9e ENDPROC
>80ed	04 89					.word	SyntaxError                      ; $9f NEXT
>80ef	04 89					.word	SyntaxError                      ; $a0 UNTIL
>80f1	04 89					.word	SyntaxError                      ; $a1 WEND
>80f3	04 89					.word	SyntaxError                      ; $a2 CLS
>80f5	04 89					.word	SyntaxError                      ; $a3 DATA
>80f7	04 89					.word	SyntaxError                      ; $a4 DIM
>80f9	04 89					.word	SyntaxError                      ; $a5 GOSUB
>80fb	04 89					.word	SyntaxError                      ; $a6 GOTO
>80fd	04 89					.word	SyntaxError                      ; $a7 LET
>80ff	04 89					.word	SyntaxError                      ; $a8 PRINT
>8101	04 89					.word	SyntaxError                      ; $a9 READ
>8103	04 89					.word	SyntaxError                      ; $aa REM
>8105	04 89					.word	SyntaxError                      ; $ab RETURN
>8107	04 89					.word	SyntaxError                      ; $ac THEN
>8109	04 89					.word	SyntaxError                      ; $ad TO
.810b					VectorSet1:
>810b	04 89					.word	SyntaxError                      ; $80 !0:EOF
>810d	04 89					.word	SyntaxError                      ; $81 !1:SH1
>810f	04 89					.word	SyntaxError                      ; $82 !2:SH2
>8111	04 89					.word	SyntaxError                      ; $83 ASSERT
>8113	27 81					.word	ClearCommand                     ; $84 CLEAR
>8115	28 81					.word	EndCommand                       ; $85 END
>8117	04 89					.word	SyntaxError                      ; $86 LIST
>8119	2b 81					.word	NewCommand                       ; $87 NEW
>811b	04 89					.word	SyntaxError                      ; $88 RESTORE
>811d	04 89					.word	SyntaxError                      ; $89 RUN
>811f	04 89					.word	SyntaxError                      ; $8a STOP
.8121					VectorSet2:
>8121	04 89					.word	SyntaxError                      ; $80 !0:EOF
>8123	04 89					.word	SyntaxError                      ; $81 !1:SH1
>8125	04 89					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8127					ClearCommand:
.8127	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8128					EndCommand:
.8128	4c 28 80	jmp $8028			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.812b					NewCommand:
.812b	20 4a 84	jsr $844a			jsr 	MemoryNew
.812e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8131	20 27 81	jsr $8127			jsr 	ClearCommand 				; clear everything.
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8135					ShiftLt:
.8135	fa		plx				plx
.8136	de 09 06	dec $0609,x	SRLoop:	dec 	NSMantissa0+1,x
.8139	30 05		bmi $8140			bmi 	SRExit
.813b	20 30 84	jsr $8430			jsr		NSMShiftLeft
.813e	80 f6		bra $8136			bra 	SRLoop
.8140	60		rts		SRExit:	rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8141					Add:
.8141	fa		plx				plx
.8142	18		clc				clc
.8143	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8146	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8149	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.814f	7d 11 06	adc $0611,x			adc 	NSMantissa1+1,x
.8152	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8155	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8158	7d 19 06	adc $0619,x			adc 	NSMantissa2+1,x
.815b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.815e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8161	7d 21 06	adc $0621,x			adc 	NSMantissa3+1,x
.8164	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8167	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8168					PrecedenceLevel:
>8168	04					.byte	 4	; $00 <<
>8169	02					.byte	 2	; $01 <=
>816a	02					.byte	 2	; $02 <>
>816b	00					.byte	 0	; $03 !!3
>816c	00					.byte	 0	; $04 ><
>816d	02					.byte	 2	; $05 >=
>816e	04					.byte	 4	; $06 >>
>816f	00					.byte	 0	; $07 !!7
>8170	00					.byte	 0	; $08 !!8
>8171	00					.byte	 0	; $09 !!9
>8172	00					.byte	 0	; $0a !!10
>8173	00					.byte	 0	; $0b !!11
>8174	00					.byte	 0	; $0c !!12
>8175	00					.byte	 0	; $0d !!13
>8176	00					.byte	 0	; $0e !!14
>8177	00					.byte	 0	; $0f !!15
>8178	00					.byte	 0	; $10 @
>8179	00					.byte	 0	; $11 !!17
>817a	00					.byte	 0	; $12 !!18
>817b	00					.byte	 0	; $13 [
>817c	00					.byte	 0	; $14 \
>817d	00					.byte	 0	; $15 ]
>817e	01					.byte	 1	; $16 ^
>817f	00					.byte	 0	; $17 _
>8180	00					.byte	 0	; $18 `
>8181	00					.byte	 0	; $19 !!25
>8182	00					.byte	 0	; $1a !!26
>8183	00					.byte	 0	; $1b {
>8184	01					.byte	 1	; $1c |
>8185	00					.byte	 0	; $1d }
>8186	00					.byte	 0	; $1e ~
>8187	00					.byte	 0	; $1f [7m<7F>[m
>8188	00					.byte	 0	; $20
>8189	05					.byte	 5	; $21 !
>818a	00					.byte	 0	; $22 "
>818b	00					.byte	 0	; $23 #
>818c	05					.byte	 5	; $24 $
>818d	04					.byte	 4	; $25 %
>818e	01					.byte	 1	; $26 &
>818f	00					.byte	 0	; $27 '
>8190	00					.byte	 0	; $28 (
>8191	00					.byte	 0	; $29 )
>8192	04					.byte	 4	; $2a *
>8193	03					.byte	 3	; $2b +
>8194	00					.byte	 0	; $2c ,
>8195	03					.byte	 3	; $2d -
>8196	00					.byte	 0	; $2e .
>8197	04					.byte	 4	; $2f /
>8198	00					.byte	 0	; $30 0
>8199	00					.byte	 0	; $31 1
>819a	00					.byte	 0	; $32 2
>819b	00					.byte	 0	; $33 3
>819c	00					.byte	 0	; $34 4
>819d	00					.byte	 0	; $35 5
>819e	00					.byte	 0	; $36 6
>819f	00					.byte	 0	; $37 7
>81a0	00					.byte	 0	; $38 8
>81a1	00					.byte	 0	; $39 9
>81a2	00					.byte	 0	; $3a :
>81a3	00					.byte	 0	; $3b ;
>81a4	02					.byte	 2	; $3c <
>81a5	02					.byte	 2	; $3d =
>81a6	02					.byte	 2	; $3e >
>81a7	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.81a8					EvaluateExpressionAt0:
.81a8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.81aa					EvaluateExpression:
.81aa	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.81ac					EvaluateExpressionAtPrecedence:
.81ac	48		pha				pha 								; save precedence level
.81ad	20 2f 83	jsr $832f			jsr 	EvaluateTerm 				; evaluate term into level X.
.81b0	68		pla				pla 								; restore precedence level.
.81b1					_EXPRLoop:
.81b1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.81b3	b1 30		lda ($30),y			lda 	(codePtr),y
.81b5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.81b7	b0 25		bcs $81de			bcs 	_EXPRExit
.81b9	da		phx				phx 								; read the operator precedence
.81ba	aa		tax				tax
.81bb	bd 68 81	lda $8168,x			lda 	PrecedenceLevel,x
.81be	fa		plx				plx
.81bf	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.81c1	f0 1b		beq $81de			beq 	_EXPRExit
.81c3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.81c5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.81c7	c5 37		cmp $37				cmp 	zTemp0+1
.81c9	b0 13		bcs $81de			bcs		_EXPRExit 					; if current >= operator exit
.81cb	48		pha				pha 								; save current precedence.
.81cc	b1 30		lda ($30),y			lda 	(codePtr),y
.81ce	c8		iny				iny
.81cf	48		pha				pha
.81d0	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.81d2	e8		inx				inx 								; work out the right hand side.
.81d3	20 ac 81	jsr $81ac			jsr 	EvaluateExpressionAtPrecedence
.81d6	ca		dex				dex
.81d7	68		pla				pla 								; get operator, call the code.
.81d8	20 e1 81	jsr $81e1			jsr 	_EXPRCaller
.81db	68		pla				pla 								; restore precedence level
.81dc	80 d3		bra $81b1			bra 	_EXPRLoop 					; and go round.
.81de					_EXPRExit:
.81de	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.81e0	60		rts				rts
.81e1					_EXPRCaller:
.81e1	da		phx				phx 								; save on stack, first thing is to restore it
.81e2	0a		asl a				asl 	a 							; double so can use vectors into X
.81e3	aa		tax				tax
.81e4	7c 2f 80	jmp ($802f,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.81e7					Dereference:
.81e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.81ea	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.81ec	f0 57		beq $8245			beq 	_DRFExit 					; not a reference
.81ee	5a		phy				phy
.81ef	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.81f2	85 36		sta $36				sta 	zTemp0
.81f4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81f7	85 37		sta $37				sta 	zTemp0+1
.81f9	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.81fc	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.81fe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8201	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8204	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8206	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8208	f0 0f		beq $8219			beq 	_DRFDereferenceTwo
.820a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.820c	f0 39		beq $8247			beq 	_DRFFull
.820e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8211	29 03		and #$03			and 	#3
.8213	f0 32		beq $8247			beq 	_DRFFull 					; the whole word
.8215	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8217	f0 07		beq $8220			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8219					_DRFDereferenceTwo:
.8219	a0 01		ldy #$01			ldy 	#1
.821b	b1 36		lda ($36),y			lda 	(zTemp0),y
.821d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8220					_DRFClear23:
.8220	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8223	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8226	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8229	29 18		and #$18			and 	#NSBTypeMask
.822b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.822e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8230	d0 12		bne $8244			bne 	_DRFNotString
.8232	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8235	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8238	d0 0a		bne $8244			bne 	_DRFNotString
.823a	a9 46		lda #$46			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.823c	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.823f	a9 82		lda #$82			lda 	#_DRFNullString >> 8
.8241	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8244					_DRFNotString
.8244	7a		ply				ply 								; restore Y and exit
.8245					_DRFExit:
.8245	60		rts				rts
.8246					_DRFNullString:
>8246	00						.byte 	0
.8247					_DRFFull:
.8247	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8249	b1 36		lda ($36),y			lda 	(zTemp0),y
.824b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.824e	c8		iny				iny
.824f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8251	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8254	c8		iny				iny
.8255	b1 36		lda ($36),y			lda 	(zTemp0),y
.8257	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.825a	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.825d	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8260	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8262	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8265	f0 06		beq $826d			beq 	_DRFNoExponent
.8267	c8		iny				iny 								; if not, read the exponent as well.
.8268	b1 36		lda ($36),y			lda 	(zTemp0),y
.826a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.826d					_DRFNoExponent:
.826d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8270	10 0d		bpl $827f			bpl 	_DRFExit2 					; if not, then exit.
.8272	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8274	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8277	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.827a	09 80		ora #$80			ora 	#NSBIsNegative
.827c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.827f					_DRFExit2:
.827f	7a		ply				ply
.8280	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.8281					EncodeNumberStart:
.8281	38		sec				sec
.8282	80 01		bra $8285			bra 	EncodeNumberContinue+1
.8284					EncodeNumberContinue:
.8284	18		clc				clc
.8285	08		php				php 								; save reset.
.8286	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8288	f0 0b		beq $8295			beq 	_ENIsOkay
.828a	c9 30		cmp #$30			cmp 	#"0"
.828c	90 04		bcc $8292			bcc 	_ENBadNumber
.828e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8290	90 03		bcc $8295			bcc 	_ENIsOkay
.8292					_ENBadNumber:
.8292	28		plp				plp 								; throw saved reset
.8293					_ENFail:
.8293	18		clc				clc 								; not allowed
.8294	60		rts				rts
.8295					_ENIsOkay:
.8295	28		plp				plp 								; are we restarting
.8296	90 0c		bcc $82a4			bcc 	_ENNoRestart
.8298					_ENStartEncode:
.8298	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.829a	20 1d 84	jsr $841d			jsr 	NSMMantissaByte
.829d	a9 01		lda #$01			lda 	#ESTA_Low
.829f					_ENExitChange:
.829f	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.82a2	38		sec				sec
.82a3	60		rts				rts
.82a4					_ENNoRestart:
.82a4	48		pha				pha 								; save on stack.
.82a5	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.82a8	c9 01		cmp #$01			cmp 	#ESTA_Low
.82aa	f0 05		beq $82b1			beq  	_ESTALowState
.82ac	c9 02		cmp #$02			cmp 	#ESTA_High
.82ae	f0 23		beq $82d3			beq 	_ESTAHighState
>82b0	db						.byte 	$DB 						; causes a break in the emulator
.82b1					_ESTALowState:
.82b1	68		pla				pla 								; get value back
.82b2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.82b4	f0 27		beq $82dd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.82b6	29 0f		and #$0f			and 	#15 						; make digit
.82b8	85 36		sta $36				sta 	zTemp0 						; save it.
.82ba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.82bd	0a		asl a				asl 	a
.82be	0a		asl a				asl 	a
.82bf	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.82c2	0a		asl a				asl 	a
.82c3	65 36		adc $36				adc 	zTemp0
.82c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82c8	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.82ca	90 05		bcc $82d1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.82cc	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.82ce	8d 05 07	sta $0705			sta 	EncodeState
.82d1					_ESTANoSwitch:
.82d1	38		sec				sec
.82d2	60		rts				rts
.82d3					_ESTAHighState:
.82d3	68		pla				pla 								; get value back
.82d4	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.82d6	f0 05		beq $82dd			beq 	_ESTASwitchFloat
.82d8	20 de 82	jsr $82de			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.82db	38		sec				sec
.82dc	60		rts				rts
.82dd					_ESTASwitchFloat:
>82dd	db						.byte 	$DB 						; causes a break in the emulator
.82de					ESTAShiftDigitIntoMantissa:
.82de	29 0f		and #$0f			and 	#15 						; save digit
.82e0	48		pha				pha
.82e1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.82e4	48		pha				pha
.82e5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82e8	48		pha				pha
.82e9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82ec	48		pha				pha
.82ed	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82f0	48		pha				pha
.82f1	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 2
.82f4	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 4
.82f7	18		clc				clc 								; pop mantissa and add
.82f8	68		pla				pla
.82f9	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.82fc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82ff	68		pla				pla
.8300	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8303	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8306	68		pla				pla
.8307	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.830a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.830d	68		pla				pla
.830e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8311	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8314	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 10
.8317	68		pla				pla 								; add digit
.8318	18		clc				clc
.8319	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.831c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.831f	90 0d		bcc $832e			bcc 	_ESTASDExit
.8321	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8324	d0 08		bne $832e			bne 	_ESTASDExit
.8326	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8329	d0 03		bne $832e			bne 	_ESTASDExit
.832b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.832e					_ESTASDExit:
.832e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.832f					EvaluateTerm:
.832f	b1 30		lda ($30),y			lda 	(codePtr),y
.8331	30 18		bmi $834b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8333	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8335	b0 6f		bcs $83a6			bcs 	_ETVariable
.8337	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8339	90 6f		bcc $83aa			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.833b	c9 3a		cmp #$3a			cmp 	#'9'+1
.833d	b0 6b		bcs $83aa			bcs 	_ETPuncUnary
.833f	20 81 82	jsr $8281			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8342					_ETNumber:
.8342	c8		iny				iny 								; keep encoding until we have the numbers
.8343	b1 30		lda ($30),y			lda 	(codePtr),y
.8345	20 84 82	jsr $8284			jsr 	EncodeNumberContinue
.8348	b0 f8		bcs $8342			bcs 	_ETNumber 					; go back if accepted.
.834a	60		rts				rts
.834b					_ETCheckUnary:
.834b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.834d	f0 41		beq $8390			beq 	_ETString
.834f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8351	f0 11		beq $8364			beq 	_ETHexConstant
.8353	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8355	90 0a		bcc $8361			bcc 	_ETSyntaxError
.8357	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.8359	b0 06		bcs $8361			bcs 	_ETSyntaxError
.835b	da		phx				phx 								; push X on the stack
.835c	0a		asl a				asl 	a 							; put vector x 2 into X
.835d	aa		tax				tax
.835e	7c af 80	jmp ($80af,x)			jmp 	(VectorSet0,x) 				; and do it.
.8361					_ETSyntaxError:
.8361	4c 04 89	jmp $8904			jmp 	SyntaxError
.8364					_ETHexConstant:
>8364	db						.byte 	$DB 						; causes a break in the emulator
.8365	c8		iny				iny 								; skip #
.8366	c8		iny				iny 								; skip count
.8367	20 1b 84	jsr $841b			jsr 	NSMMantissaZero 			; clear result
.836a					_ETHLoop:
.836a	b1 30		lda ($30),y			lda 	(codePtr),y
.836c	c8		iny				iny 								; and consume
.836d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.836f	f0 1e		beq $838f			beq 	_ETHExit
.8371	48		pha				pha 								; save on stack.
.8372	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 2
.8375	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 4
.8378	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 8
.837b	20 30 84	jsr $8430			jsr 	NSMShiftLeft 				; x 16
.837e	68		pla				pla 								; ASCII
.837f	c9 41		cmp #$41			cmp 	#'A'
.8381	90 02		bcc $8385			bcc 	_ETHNotChar
.8383	e9 07		sbc #$07			sbc 	#7
.8385					_ETHNotChar:
.8385	29 0f		and #$0f			and 	#15 						; digit now
.8387	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.838a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.838d	80 db		bra $836a			bra 	_ETHLoop 					; go round.
.838f					_ETHExit:
.838f	60		rts				rts
.8390					_ETString:
.8390	c8		iny				iny 								; look at length
.8391	b1 30		lda ($30),y			lda 	(codePtr),y
.8393	48		pha				pha
.8394	c8		iny				iny 								; first character
.8395	20 86 84	jsr $8486			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8398	68		pla				pla 								; restore count and save
.8399	85 36		sta $36				sta 	zTemp0
.839b	98		tya				tya 								; add length to Y to skip it.
.839c	18		clc				clc
.839d	65 36		adc $36				adc 	zTemp0
.839f	a8		tay				tay
.83a0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.83a2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83a5	60		rts				rts
.83a6					_ETVariable:
>83a6	db						.byte 	$DB 						; causes a break in the emulator
.83a7	4c ff ff	jmp $ffff			jmp 	$FFFF
.83aa					_ETPuncUnary:
.83aa	c8		iny				iny 								; consume the unary character
.83ab	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.83ad	f0 31		beq $83e0			beq 	_ETUnaryNegate
.83af	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.83b1	f0 3d		beq $83f0			beq 	_ETDereference
.83b3	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.83b5	f0 58		beq $840f			beq 	_ETParenthesis
.83b7	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.83b9	f0 43		beq $83fe			beq 	_ETStringReference
.83bb	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.83bd	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.83bf	f0 06		beq $83c7			beq 	_ETIndirection
.83c1	e6 36		inc $36				inc 	zTemp0
.83c3	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.83c5	d0 9a		bne $8361			bne 	_ETSyntaxError
.83c7					_ETIndirection:
.83c7	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.83c9	1a		inc a				inc 	a
.83ca	48		pha				pha
.83cb	20 2f 83	jsr $832f			jsr 	EvaluateTerm				; evaluate the term
.83ce	20 e7 81	jsr $81e7			jsr 	Dereference 				; dereference it.
.83d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.83d4	d0 07		bne $83dd			bne 	_ETTypeMismatch
.83d6	68		pla				pla 								; indirection 1-2
.83d7	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.83d9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83dc	60		rts				rts
.83dd					_ETTypeMismatch:
.83dd	4c 0e 89	jmp $890e			jmp 	TypeError
.83e0					_ETUnaryNegate:
.83e0	20 2f 83	jsr $832f			jsr 	EvaluateTerm				; evaluate the term
.83e3	20 e7 81	jsr $81e7			jsr 	Dereference 				; dereference it.
.83e6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.83e9	29 10		and #$10			and 	#NSTString
.83eb	d0 f0		bne $83dd			bne 	_ETTypeMismatch
.83ed	4c 12 84	jmp $8412			jmp 	NSMNegate  					; just toggles the sign bit.
.83f0					_ETDereference:
.83f0	20 2f 83	jsr $832f			jsr 	EvaluateTerm				; evaluate the term
.83f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.83f6	29 20		and #$20			and 	#NSBIsReference
.83f8	f0 e3		beq $83dd			beq 	_ETTypeMismatch
.83fa	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.83fd	60		rts				rts
.83fe					_ETStringReference:
.83fe	20 2f 83	jsr $832f			jsr 	EvaluateTerm				; evaluate the term
.8401	20 e7 81	jsr $81e7			jsr 	Dereference 				; dereference it.
.8404	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8407	d0 d4		bne $83dd			bne 	_ETTypeMismatch
.8409	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.840b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.840e	60		rts				rts
.840f					_ETParenthesis:
>840f	db						.byte 	$DB 						; causes a break in the emulator
.8410	80 fd		bra $840f			bra 	_ETParenthesis

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8412					NSMNegate:
.8412	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8415	49 80		eor #$80			eor 	#NSBIsNegative
.8417	9d 00 06	sta $0600,x			sta 	NSStatus,x
.841a	60		rts				rts
.841b					NSMMantissaZero:
.841b	a9 00		lda #$00			lda 	#0
.841d					NSMMantissaByte:
.841d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8420	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8423	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8426	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8429	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.842c	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.842f	60		rts				rts
.8430					NSMShiftLeft:
.8430	1e 08 06	asl $0608,x			asl 	NSMantissa0,x
.8433	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8436	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8439	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.843c	60		rts				rts
.843d					NSMShiftRight:
.843d	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8440	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8443	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8446	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8449	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8904					SyntaxError:
.8904	a9 02		lda #$02		lda	#2
.8906	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8909					RangeError:
.8909	a9 04		lda #$04		lda	#4
.890b	4c 2b 80	jmp $802b		jmp	ErrorHandler
.890e					TypeError:
.890e	a9 05		lda #$05		lda	#5
.8910	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8913					ErrorText:
>8913	42 72 65 61 6b 00			.text	"Break",0
>8919	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8921	72 72 6f 72 00
>8926	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>892e	20 62 79 20 7a 65 72 6f 00
>8937	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>893f	61 6e 67 65 00
>8944	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>894c	6d 61 74 63 68 00
>8952	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>895a	65 6d 6f 72 79 00
>8960	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8968	61 72 67 75 6d 65 6e 74 00
>8971	53 74 6f 70 00				.text	"Stop",0
>8976	53 74 72 69 6e 67 20 74			.text	"String too long",0
>897e	6f 6f 20 6c 6f 6e 67 00
>8986	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>898e	6e 20 66 61 69 6c 65 64 00
>8997	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>899f	61 74 61 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.844a					MemoryNew:
.844a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.844c	85 30		sta $30				sta 	codePtr
.844e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8450	85 31		sta $31				sta 	codePtr+1
.8452	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8454	92 30		sta ($30)			sta 	(codePtr)
.8456	60		rts				rts
.8457					MemoryAppend:
.8457	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8459	85 30		sta $30				sta 	codePtr
.845b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.845d	85 31		sta $31				sta 	codePtr+1
.845f					_MAFindEnd:
.845f	b2 30		lda ($30)			lda 	(codePtr)
.8461	f0 0d		beq $8470			beq 	_MAFoundEnd
.8463	18		clc				clc
.8464	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8466	65 30		adc $30				adc 	codePtr
.8468	85 30		sta $30				sta 	codePtr
.846a	90 02		bcc $846e			bcc 	_CREExit
.846c	e6 31		inc $31				inc 	codePtr+1
.846e					_CREExit:
.846e	80 ef		bra $845f			bra 	_MAFindEnd
.8470					_MAFoundEnd:
.8470	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8473	c0 04		cpy #$04			cpy 	#4 							; blank line
.8475	f0 0e		beq $8485			beq 	_MANoLine
.8477	a9 00		lda #$00			lda 	#0 							; end of program
.8479	91 30		sta ($30),y			sta 	(codePtr),y
.847b					_MACopy:
.847b	88		dey				dey
.847c	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.847f	91 30		sta ($30),y			sta 	(codePtr),y
.8481	c0 00		cpy #$00			cpy 	#0
.8483	d0 f6		bne $847b			bne 	_MACopy
.8485					_MANoLine:
.8485	60		rts				rts
.8486					MemoryInline:
.8486	98		tya				tya 								; put address into stack,x
.8487	18		clc				clc
.8488	65 30		adc $30				adc 	codePtr
.848a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.848d	a5 31		lda $31				lda 	codePtr+1
.848f	69 00		adc #$00			adc 	#0
.8491	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8494	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8497	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.849a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.849b					VariableOpen:
.849b	60		rts				rts
.849c					VariableClose:
.849c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.849d					BackloadProgram:
.849d	a2 ff		ldx #$ff			ldx 	#$FF
.849f	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.84a2	30 1e		bmi $84c2			bmi 	_BPExit
.84a4					_BPCopy:
.84a4	e8		inx				inx  								; copy byte in
.84a5	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.84a8	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.84ab	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.84ae	30 0a		bmi $84ba			bmi 	_BPEndLine 					; -ve = EOL
.84b0	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.84b2	d0 02		bne $84b6			bne 	_BPNotTab
.84b4	a9 20		lda #$20			lda 	#' '
.84b6					_BPNotTab:
.84b6	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.84b8	b0 ea		bcs $84a4			bcs 	_BPCopy
.84ba					_BPEndLine:
.84ba	20 7f 86	jsr $867f			jsr 	TokeniseLine 				; tokenise the line.
.84bd	20 57 84	jsr $8457			jsr 	MemoryAppend 				; append to current program
.84c0	80 db		bra $849d			bra 	BackloadProgram
.84c2					_BPExit:
.84c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.84c3					TokeniseSearchTable:
.84c3	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.84c5	85 36		sta $36				sta 	zTemp0
.84c7	a0 00		ldy #$00			ldy 	#0
.84c9	a9 80		lda #$80			lda 	#$80 						; token #
.84cb	85 38		sta $38				sta 	zTemp1
.84cd					_TSTLoop:
.84cd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.84cf	30 49		bmi $851a			bmi 	_TSTFail 					; -ve = end of table
.84d1	f0 2e		beq $8501			beq 	_TSTNext 					; zero, check next it's a dummy
.84d3	c8		iny				iny 								; get the hash
.84d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d6	88		dey				dey
.84d7	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.84da	d0 25		bne $8501			bne 	_TSTNext
.84dc	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.84df	38		sec				sec
.84e0	ed 00 07	sbc $0700			sbc 	identStart
.84e3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.84e5	d0 1a		bne $8501			bne 	_TSTNext
.84e7	5a		phy				phy 								; save Y , we might fail
.84e8	c8		iny				iny 								; point to text
.84e9	c8		iny				iny
.84ea	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.84ed					_TSTCompareName:
.84ed	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.84f0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.84f2	d0 0c		bne $8500			bne 	_TSTNextPullY 				; fail, pullY and do next
.84f4	e8		inx				inx
.84f5	c8		iny				iny
.84f6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.84f9	d0 f2		bne $84ed			bne 	_TSTCompareName
.84fb	7a		ply				ply 								; throw Y
.84fc	a5 38		lda $38				lda 	zTemp1 						; get token #
.84fe	38		sec				sec 								; return with CS = passed.
.84ff	60		rts				rts
.8500					_TSTNextPullY:
.8500	7a		ply				ply 								; restore current, fall through.
.8501					_TSTNext:
.8501	e6 38		inc $38				inc 	zTemp1 						; token counter
.8503	98		tya				tya
.8504	18		clc				clc
.8505	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8507	1a		inc a				inc 	a 							; +1
.8508	1a		inc a				inc 	a 							; +2
.8509	a8		tay				tay
.850a	10 c1		bpl $84cd			bpl 	_TSTLoop 					; if Y < $80 loop back
.850c	98		tya				tya 								; add Y to zTemp0 and reset Y
.850d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.850f	18		clc				clc  								; but have tables > 255 bytes
.8510	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8512	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8514	90 b7		bcc $84cd			bcc 	_TSTLoop
.8516	e6 37		inc $37				inc 	zTemp0+1
.8518	80 b3		bra $84cd			bra 	_TSTLoop
.851a					_TSTFail:
.851a	18		clc				clc
.851b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.851c					KeywordSet0:
>851c	00 65					.text	0,$65,""               ; $80 !0:EOF
>851e	00 58					.text	0,$58,""               ; $81 !1:SH1
>8520	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8522	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8528	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8530	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8536	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>853d	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8543	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $88 GETDATE$(
>854b	45 24 28
>854e	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $89 GETTIME$(
>8556	45 24 28
>8559	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>8560	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>8566	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>856e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>8576	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>857c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>8583	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>8588	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $91 PAGE
>858e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $92 RIGHT$(
>8596	28
>8597	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $93 RND(
>859d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $94 SGN(
>85a3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $95 SPC(
>85a9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $96 STR$(
>85b0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>85b6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>85bb	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>85bf	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>85c5	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>85cd	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>85d4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>85db	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>85e3	43
>85e4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>85ea	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>85f1	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>85f7	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>85fc	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>8602	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>8607	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>860e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>8614	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>8619	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>8620	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>8626	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>862b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>8633	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>8639	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>863d	ff					.text	$FF
.863e					KeywordSet1:
>863e	00 65					.text	0,$65,""               ; $80 !0:EOF
>8640	00 58					.text	0,$58,""               ; $81 !1:SH1
>8642	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8644	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>864c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8653	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8658	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>865e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8663	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>866b	45
>866c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8671	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8677	ff					.text	$FF
.8678					KeywordSet2:
>8678	00 65					.text	0,$65,""               ; $80 !0:EOF
>867a	00 58					.text	0,$58,""               ; $81 !1:SH1
>867c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>867e	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.867f					TokeniseLine:
.867f	20 07 88	jsr $8807			jsr 	FixLineBufferCase 			; fix line case
.8682	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8684	8d 06 07	sta $0706			sta 	tokenOffset
.8687	9c 07 07	stz $0707			stz 	tokenLineNumber
.868a	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.868d	a2 ff		ldx #$ff			ldx 	#$FF
.868f					_TKFindFirst:
.868f	e8		inx				inx
.8690	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8693	f0 79		beq $870e			beq 	_TKExit
.8695	c9 20		cmp #$20			cmp 	#' '
.8697	90 f6		bcc $868f			bcc 	_TKFindFirst
.8699	c9 30		cmp #$30			cmp 	#'0'
.869b	90 07		bcc $86a4			bcc 	_TKNoLineNumber
.869d	c9 3a		cmp #$3a			cmp 	#'9'+1
.869f	b0 03		bcs $86a4			bcs 	_TKNoLineNumber
.86a1	20 31 88	jsr $8831			jsr 	TokeniseExtractLineNumber
.86a4					_TKNoLineNumber:
.86a4					_TKTokeniseLoop:
.86a4	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.86a7	f0 65		beq $870e			beq 	_TKExit
.86a9	e8		inx				inx
.86aa	c9 20		cmp #$20			cmp 	#' '
.86ac	f0 f6		beq $86a4			beq 	_TKTokeniseLoop 			; keep looping if space found.
.86ae	ca		dex				dex 								; undo last get, A contains character, X is position.
.86af	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.86b1	f0 61		beq $8714			beq 	_TKTokeniseIdentifier
.86b3	c9 41		cmp #$41			cmp 	#'A'
.86b5	90 04		bcc $86bb			bcc 	_TKTokenisePunctuation
.86b7	c9 5b		cmp #$5b			cmp 	#'Z'+1
.86b9	90 59		bcc $8714			bcc 	_TKTokeniseIdentifier
.86bb					_TKTokenisePunctuation:
.86bb	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.86bd	f0 27		beq $86e6			beq 	_TKString
.86bf	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.86c1	f0 28		beq $86eb			beq 	_TKHexConstant
.86c3	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.86c5	f0 29		beq $86f0			beq 	_TKCheckDouble
.86c7	c9 3e		cmp #$3e			cmp 	#'>'
.86c9	f0 25		beq $86f0			beq 	_TKCheckDouble
.86cb					_TKStandardPunctuation:
.86cb	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.86ce	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.86d0	90 0e		bcc $86e0			bcc 	_TKNoShift
.86d2	48		pha				pha 								; save
.86d3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.86d5	85 36		sta $36				sta 	zTemp0
.86d7	68		pla				pla
.86d8	29 20		and #$20			and 	#32 						; bit 5
.86da	4a		lsr a				lsr 	a 							; shift into bit 3
.86db	4a		lsr a				lsr 	a
.86dc	05 36		ora $36				ora 	zTemp0
.86de	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.86e0					_TKNoShift:
.86e0	20 76 88	jsr $8876			jsr 	TokeniseWriteByte 			; write the punctuation character
.86e3	e8		inx				inx 								; consume the character
.86e4	80 be		bra $86a4			bra 	_TKTokeniseLoop 			; and loop round again.
.86e6					_TKString:
.86e6	20 96 87	jsr $8796			jsr 	TokeniseString
.86e9	80 b9		bra $86a4			bra 	_TKTokeniseLoop
.86eb					_TKHexConstant:
.86eb	20 d1 87	jsr $87d1			jsr 	TokeniseHexConstant
.86ee	80 b4		bra $86a4			bra 	_TKTokeniseLoop
.86f0					_TKCheckDouble:
.86f0	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.86f3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.86f5	90 d4		bcc $86cb			bcc 	_TKStandardPunctuation
.86f7	c9 3f		cmp #$3f			cmp 	#'>'+1
.86f9	b0 d0		bcs $86cb			bcs 	_TKStandardPunctuation
.86fb	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.86fe	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8700	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8701	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8704	38		sec				sec
.8705	e9 3c		sbc #$3c			sbc 	#'<'
.8707	20 76 88	jsr $8876			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.870a	e8		inx				inx 								; consume both
.870b	e8		inx				inx
.870c	80 96		bra $86a4			bra 	_TKTokeniseLoop
.870e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8710	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.8713	60		rts				rts
.8714					_TKTokeniseIdentifier:
.8714	8e 00 07	stx $0700			stx 	identStart 					; save start
.8717	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.871a					_TKCheckLoop:
.871a	e8		inx				inx 								; look at next, we know first is identifier.
.871b	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.871e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8720	f0 f8		beq $871a			beq 	_TKCheckLoop
.8722	c9 30		cmp #$30			cmp	 	#"0"
.8724	90 0c		bcc $8732			bcc 	_TKEndIdentifier
.8726	c9 3a		cmp #$3a			cmp 	#"9"+1
.8728	90 f0		bcc $871a			bcc 	_TKCheckLoop
.872a	c9 41		cmp #$41			cmp	 	#"A"
.872c	90 04		bcc $8732			bcc 	_TKEndIdentifier
.872e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8730	90 e8		bcc $871a			bcc 	_TKCheckLoop
.8732					_TKEndIdentifier:
.8732	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8735	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8737	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8739	f0 06		beq $8741			beq 	_TKHasTypeCharacter
.873b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.873d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.873f	d0 07		bne $8748			bne 	_TKNoTypeCharacter
.8741					_TKHasTypeCharacter:
.8741	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8744	e8		inx				inx 								; read next
.8745	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8748					_TKNoTypeCharacter:
.8748	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.874a	d0 09		bne $8755			bne 	_TKNoArray
.874c	e8		inx				inx 								; skip the (
.874d	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8750	09 04		ora #$04			ora 	#$04
.8752	8d 04 07	sta $0704			sta 	identTypeByte
.8755					_TKNoArray:
.8755	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8758	20 f2 87	jsr $87f2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.875b	a0 85		ldy #$85			ldy 	#(KeywordSet0) >> 8
.875d	a9 1c		lda #$1c			lda 	#(KeywordSet0) & $FF
.875f	20 c3 84	jsr $84c3			jsr 	TokeniseSearchTable
.8762	a2 00		ldx #$00			ldx 	#0
.8764	b0 1f		bcs $8785			bcs 	_TKFoundToken
.8766	a0 86		ldy #$86			ldy 	#(KeywordSet1) >> 8
.8768	a9 3e		lda #$3e			lda 	#(KeywordSet1) & $FF
.876a	20 c3 84	jsr $84c3			jsr 	TokeniseSearchTable
.876d	a2 81		ldx #$81			ldx 	#$81
.876f	b0 14		bcs $8785			bcs 	_TKFoundToken
.8771	a0 86		ldy #$86			ldy 	#(KeywordSet1) >> 8
.8773	a9 3e		lda #$3e			lda 	#(KeywordSet1) & $FF
.8775	20 c3 84	jsr $84c3			jsr 	TokeniseSearchTable
.8778	a2 82		ldx #$82			ldx 	#$82
.877a	b0 09		bcs $8785			bcs 	_TKFoundToken
.877c	20 82 88	jsr $8882			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.877f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8782	4c a4 86	jmp $86a4			jmp 	_TKTokeniseLoop 			; and go round again.
.8785					_TKFoundToken:
.8785	48		pha				pha 								; save token
.8786	8a		txa				txa 								; shift in X, is there one ?
.8787	f0 03		beq $878c			beq 	_TKNoTShift
.8789	20 76 88	jsr $8876			jsr 	TokeniseWriteByte 			; if so, write it out
.878c					_TKNoTShift:
.878c	68		pla				pla 								; restore and write token
.878d	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.8790	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8793	4c a4 86	jmp $86a4			jmp 	_TKTokeniseLoop 			; and go round again.
.8796					TokeniseString:
.8796	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8798	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.879b	e8		inx				inx									; start of quoted string.
.879c	da		phx				phx 								; push start of string on top
.879d	ca		dex				dex
.879e					_TSFindEnd:
.879e	e8		inx				inx
.879f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.87a2	f0 04		beq $87a8			beq 	_TSEndOfString
.87a4	c9 22		cmp #$22			cmp 	#'"'
.87a6	d0 f6		bne $879e			bne 	_TSFindEnd
.87a8					_TSEndOfString:
.87a8	7a		ply				ply  								; so now Y is first character, X is character after end.
.87a9	48		pha				pha 								; save terminating character
.87aa	20 b2 87	jsr $87b2			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.87ad	68		pla				pla 								; terminating character
.87ae	f0 01		beq $87b1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.87b0	e8		inx				inx
.87b1					_TSNotQuote:
.87b1	60		rts				rts
.87b2					TOWriteBlockXY:
.87b2	86 36		stx $36				stx 	zTemp0 						; write end character
.87b4	98		tya				tya
.87b5	49 ff		eor #$ff			eor 	#$FF
.87b7	38		sec				sec
.87b8	65 36		adc $36				adc 	zTemp0
.87ba	1a		inc a				inc 	a 							; one extra for NULL
.87bb	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.87be					_TOBlockLoop:
.87be	c4 36		cpy $36				cpy 	zTemp0
.87c0	f0 09		beq $87cb			beq 	_TOBlockExit
.87c2	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.87c5	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.87c8	c8		iny				iny
.87c9	80 f3		bra $87be			bra 	_TOBlockLoop
.87cb					_TOBlockExit:
.87cb	a9 00		lda #$00			lda 	#0
.87cd	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.87d0	60		rts				rts
.87d1					TokeniseHexConstant:
.87d1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.87d3	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.87d6	e8		inx				inx									; start of quoted string.
.87d7	da		phx				phx 								; push start of constant on top
.87d8	ca		dex				dex
.87d9					_THFindLoop:
.87d9	e8		inx				inx
.87da	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.87dd	c9 30		cmp #$30			cmp 	#"0"
.87df	90 0c		bcc $87ed			bcc 	_THFoundEnd
.87e1	c9 3a		cmp #$3a			cmp 	#"9"+1
.87e3	90 f4		bcc $87d9			bcc 	_THFindLoop
.87e5	c9 41		cmp #$41			cmp 	#"A"
.87e7	90 04		bcc $87ed			bcc 	_THFoundEnd
.87e9	c9 47		cmp #$47			cmp 	#"F"+1
.87eb	90 ec		bcc $87d9			bcc 	_THFindLoop
.87ed					_THFoundEnd:
.87ed	7a		ply				ply 								; restore start
.87ee	20 b2 87	jsr $87b2			jsr 	TOWriteBlockXY 				; output the block
.87f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.87f2					TokeniseCalculateHash:
.87f2	da		phx				phx
.87f3	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.87f6	a9 00		lda #$00			lda 	#0
.87f8					_TCHLoop:
.87f8	18		clc				clc
.87f9	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.87fc	e8		inx				inx
.87fd	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8800	d0 f6		bne $87f8			bne 	_TCHLoop
.8802	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8805	fa		plx				plx
.8806	60		rts				rts
.8807					FixLineBufferCase:
.8807	a2 00		ldx #$00			ldx 	#0
.8809					_FLBCLoop:
.8809	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.880c	f0 22		beq $8830			beq 	_FLBCExit 					; end of string.
.880e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8810	f0 11		beq $8823			beq 	_FLBCInQuotes
.8812	e8		inx				inx
.8813	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8815	90 f2		bcc $8809			bcc 	_FLBCLoop
.8817	c9 7b		cmp #$7b			cmp 	#'z'+1
.8819	b0 ee		bcs $8809			bcs 	_FLBCLoop
.881b	38		sec				sec 								; make U/C
.881c	e9 20		sbc #$20			sbc 	#32
.881e	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8821	80 e6		bra $8809			bra 	_FLBCLoop
.8823					_FLBCInQuotes:
.8823	e8		inx				inx 								; advance
.8824	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8827	f0 07		beq $8830			beq 	_FLBCExit 					; exit on EOS
.8829	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.882b	d0 f6		bne $8823			bne 	_FLBCInQuotes
.882d	e8		inx				inx 								; skip over it
.882e	80 d9		bra $8809			bra 	_FLBCLoop
.8830					_FLBCExit:
.8830	60		rts				rts
.8831					TokeniseExtractLineNumber:
.8831	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8834	48		pha				pha
.8835	ad 07 07	lda $0707			lda 	tokenLineNumber
.8838	48		pha				pha
.8839	20 6f 88	jsr $886f			jsr 	_TELNTimes2 				; line # x 4
.883c	20 6f 88	jsr $886f			jsr 	_TELNTimes2 				; line # x 2
.883f	18		clc				clc 								; add stacked value
.8840	68		pla				pla
.8841	6d 07 07	adc $0707			adc 	tokenLineNumber
.8844	8d 07 07	sta $0707			sta 	tokenLineNumber
.8847	68		pla				pla
.8848	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.884b	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.884e	20 6f 88	jsr $886f			jsr 	_TELNTimes2 				; line # x 10
.8851	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8854	e8		inx				inx
.8855	29 0f		and #$0f			and 	#15 						; add to line #
.8857	18		clc				clc
.8858	6d 07 07	adc $0707			adc 	tokenLineNumber
.885b	8d 07 07	sta $0707			sta 	tokenLineNumber
.885e	90 03		bcc $8863			bcc 	_TLENNoCarry
.8860	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8863					_TLENNoCarry:
.8863	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8866	c9 30		cmp #$30			cmp 	#'0'
.8868	90 04		bcc $886e			bcc 	_TLENExit
.886a	c9 3a		cmp #$3a			cmp 	#'9'+1
.886c	90 c3		bcc $8831			bcc 	TokeniseExtractLineNumber
.886e					_TLENExit:
.886e	60		rts				rts
.886f					_TELNTimes2:
.886f	0e 07 07	asl $0707			asl 	tokenLineNumber
.8872	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8875	60		rts				rts
.8876					TokeniseWriteByte:
.8876	da		phx				phx
.8877	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.887a	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.887d	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8880	fa		plx				plx
.8881	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8882					CheckCreateVariableRecord:
.8882	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8884	85 36		sta $36				sta 	0+zTemp0
.8886	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8888	85 37		sta $37				sta 	1+zTemp0
.888a	20 9b 84	jsr $849b			jsr 	VariableOpen 				; make variable space available
.888d					_CCVSearch:
.888d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.888f	f0 2c		beq $88bd			beq 	_CCVFail
.8891	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8893	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8895	cd 03 07	cmp $0703			cmp 	identHash
.8898	d0 16		bne $88b0			bne 	_CCVNext
.889a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.889c	ae 00 07	ldx $0700			ldx 	identStart
.889f					_CCVCompare:
.889f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.88a2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.88a4	e8		inx				inx 								; advance pointers
.88a5	c8		iny				iny
.88a6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.88a7	d0 07		bne $88b0			bne 	_CCVNext  					; didn't match go to next.
.88a9	90 f4		bcc $889f			bcc 	_CCVCompare 				; not finished yet.
.88ab	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.88ae	f0 41		beq $88f1			beq 	_CCVFound 					; yes, we were successful
.88b0					_CCVNext:
.88b0	18		clc				clc
.88b1	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.88b3	65 36		adc $36				adc 	zTemp0
.88b5	85 36		sta $36				sta 	zTemp0
.88b7	90 d4		bcc $888d			bcc 	_CCVSearch
.88b9	e6 37		inc $37				inc 	zTemp0+1
.88bb	80 d0		bra $888d			bra 	_CCVSearch
.88bd					_CCVFail:
.88bd	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.88bf	ad 03 07	lda $0703			lda 	identHash
.88c2	91 36		sta ($36),y			sta 	(zTemp0),y
.88c4	c8		iny				iny 								; offset 2 is the type byte
.88c5	ad 04 07	lda $0704			lda 	identTypeByte
.88c8	91 36		sta ($36),y			sta 	(zTemp0),y
.88ca	c8		iny				iny
.88cb					_CCVData:
.88cb	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.88cd	91 36		sta ($36),y			sta 	(zTemp0),y
.88cf	c8		iny				iny
.88d0	c0 08		cpy #$08			cpy 	#8
.88d2	90 f7		bcc $88cb			bcc 	_CCVData
.88d4	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.88d7					_CCVCopyName:
.88d7	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.88da	91 36		sta ($36),y			sta 	(zTemp0),y
.88dc	e8		inx				inx
.88dd	c8		iny				iny
.88de	ec 02 07	cpx $0702			cpx 	identTypeEnd
.88e1	d0 f4		bne $88d7			bne 	_CCVCopyName
.88e3	98		tya				tya 								; patch offset
.88e4	92 36		sta ($36)			sta 	(zTemp0)
.88e6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.88e8	91 36		sta ($36),y			sta 	(zTemp0),y
.88ea	88		dey				dey
.88eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.88ed	09 80		ora #$80			ora 	#$80
.88ef	91 36		sta ($36),y			sta 	(zTemp0),y
.88f1					_CCVFound:
.88f1	20 9c 84	jsr $849c			jsr 	VariableClose 				; map out variables, perhaps.
.88f4	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.88f6	38		sec				sec
.88f7	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.88f9	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.88fb	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.88fe	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8900	20 76 88	jsr $8876			jsr 	TokeniseWriteByte
.8903	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
