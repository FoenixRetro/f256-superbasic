
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Sun Sep 18 12:41:34 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$640					MemoryStorage = $640
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/03access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.0640					lineBuffer:
>0640							.fill 	256
.0740					tokenBuffer:
>0740							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$83					KWD_FOR                              = $83; $83 FOR
=$84					KWD_IF                               = $84; $84 IF
=$85					KWD_PROC                             = $85; $85 PROC
=$86					KWD_REPEAT                           = $86; $86 REPEAT
=$87					KWD_WHILE                            = $87; $87 WHILE
=$88					KWD_ENDIF                            = $88; $88 ENDIF
=$89					KWD_ENDPROC                          = $89; $89 ENDPROC
=$8a					KWD_NEXT                             = $8a; $8a NEXT
=$8b					KWD_UNTIL                            = $8b; $8b UNTIL
=$8c					KWD_WEND                             = $8c; $8c WEND
=$8d					KWD_ABSLPAREN                        = $8d; $8d ABS(
=$8e					KWD_ALLOCLPAREN                      = $8e; $8e ALLOC(
=$8f					KWD_ASCLPAREN                        = $8f; $8f ASC(
=$90					KWD_CHRDOLLARLPAREN                  = $90; $90 CHR$(
=$91					KWD_DECLPAREN                        = $91; $91 DEC(
=$92					KWD_GETDATEDOLLARLPAREN              = $92; $92 GETDATE$(
=$93					KWD_GETTIMEDOLLARLPAREN              = $93; $93 GETTIME$(
=$94					KWD_HEXDOLLARLPAREN                  = $94; $94 HEX$(
=$95					KWD_INTLPAREN                        = $95; $95 INT(
=$96					KWD_ISVALLPAREN                      = $96; $96 ISVAL(
=$97					KWD_LEFTDOLLARLPAREN                 = $97; $97 LEFT$(
=$98					KWD_LENLPAREN                        = $98; $98 LEN(
=$99					KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a					KWD_NOT                              = $9a; $9a NOT
=$9b					KWD_PAGE                             = $9b; $9b PAGE
=$9c					KWD_RIGHTDOLLARLPAREN                = $9c; $9c RIGHT$(
=$9d					KWD_RNDLPAREN                        = $9d; $9d RND(
=$9e					KWD_SGNLPAREN                        = $9e; $9e SGN(
=$9f					KWD_SPCLPAREN                        = $9f; $9f SPC(
=$a0					KWD_STRDOLLARLPAREN                  = $a0; $a0 STR$(
=$a1					KWD_VALLPAREN                        = $a1; $a1 VAL(
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO
=$83					KWD_ASSERT                           = $83; $83 ASSERT
=$84					KWD_CLEAR                            = $84; $84 CLEAR
=$85					KWD_END                              = $85; $85 END
=$86					KWD_LIST                             = $86; $86 LIST
=$87					KWD_NEW                              = $87; $87 NEW
=$88					KWD_RESTORE                          = $88; $88 RESTORE
=$89					KWD_RUN                              = $89; $89 RUN
=$8a					KWD_STOP                             = $8a; $8a STOP

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 24 80	jsr $8024			jsr 	NewCommand 					; erase current program
.8016	4c 37 80	jmp $8037			jmp 	BackloadProgram
.8019					WarmStart:
>8019	db						.byte 	$DB 						; causes a break in the emulator
.801a	80 fd		bra $8019			bra 	WarmStart
.801c					ErrorHandler:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	4c 1c 80	jmp $801c			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8020					ClearCommand:
.8020	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8021					EndCommand:
.8021	4c 19 80	jmp $8019			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8024					NewCommand:
.8024	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8026	85 30		sta $30				sta 	codePtr
.8028	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.802a	85 31		sta $31				sta 	codePtr+1
.802c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.802e	92 30		sta ($30)			sta 	(codePtr)
.8030	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8033	20 20 80	jsr $8020			jsr 	ClearCommand 				; clear everything.
.8036	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8037					BackloadProgram:
>8037	db						.byte 	$DB
.8038	a2 ff		ldx #$ff			ldx 	#$FF
.803a	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.803d	30 13		bmi $8052			bmi 	_BPExit
.803f					_BPCopy:
.803f	e8		inx				inx  								; copy byte in
.8040	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.8043	9e 41 06	stz $0641,x			stz 	lineBuffer+1,x
.8046	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8049	30 04		bmi $804f			bmi 	_BPEndLine 					; -ve = EOL
.804b	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.804d	b0 f0		bcs $803f			bcs 	_BPCopy
.804f					_BPEndLine:
>804f	db						.byte 	$DB 						; causes a break in the emulator
.8050	80 e5		bra $8037			bra 	BackloadProgram
.8052					_BPExit:
.8052	4c 19 80	jmp $8019			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  End of listing
