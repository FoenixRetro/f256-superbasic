
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 09:08:31 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 06 83	jsr $8306			jsr 	NewCommand 					; erase current program
.8006	20 d0 8f	jsr $8fd0			jsr 	BackloadProgram
.8009	4c 96 83	jmp $8396			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	2f 86					.word	ShiftLeft                        ; $00 <<
>8016	29 85					.word	BinaryCompareLessEqual           ; $01 <=
>8018	1f 85					.word	BinaryCompareNotEqual            ; $02 <>
>801a	84 99					.word	SyntaxError                      ; $03 !!3
>801c	84 99					.word	SyntaxError                      ; $04 ><
>801e	33 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	32 86					.word	ShiftRight                       ; $06 >>
>8022	84 99					.word	SyntaxError                      ; $07 !!7
>8024	84 99					.word	SyntaxError                      ; $08 !!8
>8026	84 99					.word	SyntaxError                      ; $09 !!9
>8028	84 99					.word	SyntaxError                      ; $0a !!10
>802a	84 99					.word	SyntaxError                      ; $0b !!11
>802c	84 99					.word	SyntaxError                      ; $0c !!12
>802e	84 99					.word	SyntaxError                      ; $0d !!13
>8030	84 99					.word	SyntaxError                      ; $0e !!14
>8032	84 99					.word	SyntaxError                      ; $0f !!15
>8034	84 99					.word	SyntaxError                      ; $10 @
>8036	84 99					.word	SyntaxError                      ; $11 !!17
>8038	84 99					.word	SyntaxError                      ; $12 !!18
>803a	84 99					.word	SyntaxError                      ; $13 [
>803c	e4 94					.word	IntegerDivide                    ; $14 \
>803e	84 99					.word	SyntaxError                      ; $15 ]
>8040	b8 87					.word	EorInteger                       ; $16 ^
>8042	84 99					.word	SyntaxError                      ; $17 _
>8044	84 99					.word	SyntaxError                      ; $18 `
>8046	84 99					.word	SyntaxError                      ; $19 !!25
>8048	84 99					.word	SyntaxError                      ; $1a !!26
>804a	84 99					.word	SyntaxError                      ; $1b {
>804c	72 87					.word	OraInteger                       ; $1c |
>804e	84 99					.word	SyntaxError                      ; $1d }
>8050	84 99					.word	SyntaxError                      ; $1e ~
>8052	84 99					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	84 99					.word	SyntaxError                      ; $20
>8056	fe 87					.word	WordIndirect                     ; $21 !
>8058	84 99					.word	SyntaxError                      ; $22 "
>805a	84 99					.word	SyntaxError                      ; $23 #
>805c	84 99					.word	SyntaxError                      ; $24 $
>805e	31 95					.word	IntegerModulus                   ; $25 %
>8060	2c 87					.word	AndInteger                       ; $26 &
>8062	84 99					.word	SyntaxError                      ; $27 '
>8064	84 99					.word	SyntaxError                      ; $28 (
>8066	84 99					.word	SyntaxError                      ; $29 )
>8068	a6 95					.word	MulInteger                       ; $2a *
>806a	c6 86					.word	AddInteger                       ; $2b +
>806c	84 99					.word	SyntaxError                      ; $2c ,
>806e	01 87					.word	SubInteger                       ; $2d -
>8070	84 99					.word	SyntaxError                      ; $2e .
>8072	3d 97					.word	FDivideCommand                   ; $2f /
>8074	84 99					.word	SyntaxError                      ; $30 0
>8076	84 99					.word	SyntaxError                      ; $31 1
>8078	84 99					.word	SyntaxError                      ; $32 2
>807a	84 99					.word	SyntaxError                      ; $33 3
>807c	84 99					.word	SyntaxError                      ; $34 4
>807e	84 99					.word	SyntaxError                      ; $35 5
>8080	84 99					.word	SyntaxError                      ; $36 6
>8082	84 99					.word	SyntaxError                      ; $37 7
>8084	84 99					.word	SyntaxError                      ; $38 8
>8086	84 99					.word	SyntaxError                      ; $39 9
>8088	84 99					.word	SyntaxError                      ; $3a :
>808a	84 99					.word	SyntaxError                      ; $3b ;
>808c	0b 85					.word	BinaryCompareLess                ; $3c <
>808e	01 85					.word	BinaryCompareEqual               ; $3d =
>8090	15 85					.word	BinaryCompareGreater             ; $3e >
>8092	25 88					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	eb 83					.word	EOLCommand                       ; $80 !0:EOF
>8096	f8 83					.word	Shift1Command                    ; $81 !1:SH1
>8098	84 99					.word	SyntaxError                      ; $82 !2:SH2
>809a	83 98					.word	AbsUnary                         ; $83 ABS(
>809c	68 8c					.word	AllocUnary                       ; $84 ALLOC(
>809e	93 98					.word	AscUnary                         ; $85 ASC(
>80a0	05 8d					.word	ChrUnary                         ; $86 CHR$(
>80a2	fd 84					.word	UnaryFalse                       ; $87 FALSE
>80a4	a0 98					.word	FracUnary                        ; $88 FRAC(
>80a6	b6 98					.word	IntUnary                         ; $89 INT(
>80a8	0c 99					.word	IsValUnary                       ; $8a ISVAL(
>80aa	df 8d					.word	Unary_Left                       ; $8b LEFT$(
>80ac	c8 98					.word	LenUnary                         ; $8c LEN(
>80ae	09 8e					.word	Unary_Mid                        ; $8d MID$(
>80b0	a2 8c					.word	Unary_Not                        ; $8e NOT(
>80b2	ef 8d					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	b8 8c					.word	Unary_Rnd                        ; $90 RND(
>80b6	e2 98					.word	SgnUnary                         ; $91 SGN(
>80b8	17 8d					.word	SpcUnary                         ; $92 SPC(
>80ba	32 8d					.word	Unary_Str                        ; $93 STR$(
>80bc	f1 84					.word	UnaryTrue                        ; $94 TRUE
>80be	02 99					.word	ValUnary                         ; $95 VAL(
>80c0	69 81					.word	ForCommand                       ; $96 FOR
>80c2	ad 82					.word	IfCommand                        ; $97 IF
>80c4	00 84					.word	Unused1                          ; $98 PROC
>80c6	74 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	5d 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	d6 82					.word	EndIf                            ; $9b ENDIF
>80cc	84 99					.word	SyntaxError                      ; $9c ENDPROC
>80ce	23 82					.word	NextCommand                      ; $9d NEXT
>80d0	84 99					.word	SyntaxError                      ; $9e THEN
>80d2	7d 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	7e 84					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	84 99					.word	SyntaxError                      ; $a2 CLS
>80da	84 99					.word	SyntaxError                      ; $a3 DATA
>80dc	84 99					.word	SyntaxError                      ; $a4 DIM
>80de	00 84					.word	Unused3                          ; $a5 DOWNTO
>80e0	cf 82					.word	ElseCode                         ; $a6 ELSE
>80e2	7c 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	9a 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	d7 82					.word	LetCommand                       ; $a9 LET
>80e8	10 83					.word	Command_Print                    ; $aa PRINT
>80ea	84 99					.word	SyntaxError                      ; $ab READ
>80ec	67 83					.word	RemCommand                       ; $ac REM
>80ee	8c 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	00 84					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	84 99					.word	SyntaxError                      ; $80 !0:EOF
>80f4	84 99					.word	SyntaxError                      ; $81 !1:SH1
>80f6	84 99					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	66 81					.word	EndCommand                       ; $85 END
>80fe	84 99					.word	SyntaxError                      ; $86 LIST
>8100	06 83					.word	NewCommand                       ; $87 NEW
>8102	84 99					.word	SyntaxError                      ; $88 RESTORE
>8104	96 83					.word	CommandRUN                       ; $89 RUN
>8106	84 99					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	84 99					.word	SyntaxError                      ; $80 !0:EOF
>810a	84 99					.word	SyntaxError                      ; $81 !1:SH1
>810c	84 99					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 aa 8e	jsr $8eaa			jsr 	EvaluateInteger 			; the assert test
.8113	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 8c 84	jmp $848c		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 bf 8e	jsr $8ebf			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 18		beq $8150			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	18		clc				clc 								; go to the next variable
.8144	b2 36		lda ($36)			lda 	(zTemp0)
.8146	65 36		adc $36				adc 	zTemp0
.8148	85 36		sta $36				sta 	zTemp0
.814a	90 e8		bcc $8134			bcc 	_ClearZeroLoop
.814c	e6 37		inc $37				inc 	zTemp0+1
.814e	80 e4		bra $8134			bra 	_ClearZeroLoop
.8150					_ClearZeroEnd:
.8150	18		clc				clc
.8151	a5 36		lda $36				lda 	zTemp0
.8153	69 01		adc #$01			adc 	#1
.8155	8d 0c 07	sta $070c			sta 	lowMemPtr
.8158	a5 37		lda $37				lda 	zTemp0+1
.815a	69 00		adc #$00			adc 	#0
.815c	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815f	20 c3 8f	jsr $8fc3			jsr 	StackReset
.8162	20 17 9b	jsr $9b17			jsr 	StringSystemInitialise
.8165	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8166					EndCommand:
.8166	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8169					ForCommand:
.8169	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.816b	20 70 8f	jsr $8f70			jsr 	StackOpen
.816e	a2 00		ldx #$00			ldx 	#0
.8170	20 5f 8b	jsr $8b5f			jsr 	EvaluateTerm
.8173	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8176	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8178	d0 49		bne $81c3			bne		_FCError
.817a	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.817c	20 db 94	jsr $94db			jsr 	CheckNextA
.817f	e8		inx				inx
.8180	20 aa 8e	jsr $8eaa			jsr 	EvaluateInteger 			; <from> in +1
.8183	b1 30		lda ($30),y			lda 	(codePtr),y
.8185	c8		iny				iny 								; consume it
.8186	48		pha				pha 								; save on stack for later
.8187	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8189	f0 04		beq $818f			beq 	_FCNoSyntax
.818b	c9 ae		cmp #$ae			cmp 	#KWD_TO
.818d	d0 37		bne $81c6			bne 	_FCSyntaxError
.818f					_FCNoSyntax:
.818f	e8		inx				inx
.8190	20 aa 8e	jsr $8eaa			jsr 	EvaluateInteger
.8193	20 a2 8f	jsr $8fa2			jsr 	STKSaveCodePosition 		; save loop back position
.8196	68		pla				pla 								; restore DOWNTO or TO
.8197	5a		phy				phy 								; save Y on the stack
.8198	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.819a	f0 02		beq $819e			beq 	_FCNotDownTo
.819c	a9 02		lda #$02			lda 	#2
.819e					_FCNotDownTo:
.819e	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.819f	a0 10		ldy #$10			ldy 	#16
.81a1	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81a3	a0 06		ldy #$06			ldy 	#6
.81a5	ad 08 06	lda $0608			lda 	NSMantissa0
.81a8	91 34		sta ($34),y			sta 	(basicStack),y
.81aa	ad 10 06	lda $0610			lda 	NSMantissa1
.81ad	c8		iny				iny
.81ae	91 34		sta ($34),y			sta 	(basicStack),y
.81b0	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81b2	a2 01		ldx #$01			ldx 	#1
.81b4	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81b7	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81b9	a2 02		ldx #$02			ldx 	#2
.81bb	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81be	20 e9 81	jsr $81e9			jsr 	CopyIndexToReference
.81c1	7a		ply				ply 								; restore position
.81c2	60		rts				rts
.81c3					_FCError:
.81c3	4c 8e 99	jmp $998e			jmp 	TypeError
.81c6					_FCSyntaxError:
.81c6	4c 84 99	jmp $9984			jmp 	SyntaxError
.81c9					FCIntegerToStack:
.81c9	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81cc	10 03		bpl $81d1			bpl	 	_FCNotNegative
.81ce	20 e8 8e	jsr $8ee8			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81d1					_FCNotNegative:
.81d1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81d4	91 34		sta ($34),y			sta 	(basicStack),y
.81d6	c8		iny				iny
.81d7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81da	91 34		sta ($34),y			sta 	(basicStack),y
.81dc	c8		iny				iny
.81dd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81e0	91 34		sta ($34),y			sta 	(basicStack),y
.81e2	c8		iny				iny
.81e3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81e6	91 34		sta ($34),y			sta 	(basicStack),y
.81e8	60		rts				rts
.81e9					CopyIndexToReference:
.81e9	5a		phy				phy
.81ea	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81ec	38		sec				sec 								; (because we copy from offset 8)
.81ed	b1 34		lda ($34),y			lda 	(basicStack),y
.81ef	e9 08		sbc #$08			sbc 	#8
.81f1	85 36		sta $36				sta 	zTemp0
.81f3	c8		iny				iny
.81f4	b1 34		lda ($34),y			lda 	(basicStack),y
.81f6	e9 00		sbc #$00			sbc 	#0
.81f8	85 37		sta $37				sta 	zTemp0+1
.81fa	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.81fc	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.81fe	b1 34		lda ($34),y			lda 	(basicStack),y
.8200	0a		asl a				asl 	a 							; into carry
.8201	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8203	90 14		bcc $8219			bcc 	_CITRNormal
.8205	38		sec				sec
.8206					_CITRNegative:
.8206	a9 00		lda #$00			lda 	#0
.8208	f1 34		sbc ($34),y			sbc 	(basicStack),y
.820a	91 36		sta ($36),y			sta 	(zTemp0),y
.820c	c8		iny				iny
.820d	ca		dex				dex
.820e	d0 f6		bne $8206			bne 	_CITRNegative
.8210	88		dey				dey 								; look at MSB of mantissa
.8211	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8213	09 80		ora #$80			ora 	#$80
.8215	91 36		sta ($36),y			sta 	(zTemp0),y
.8217	7a		ply				ply
.8218	60		rts				rts
.8219					_CITRNormal:
.8219	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.821b	91 36		sta ($36),y			sta 	(zTemp0),y
.821d	c8		iny				iny
.821e	ca		dex				dex
.821f	d0 f8		bne $8219			bne 	_CITRNormal
.8221	7a		ply				ply 								; and exit.
.8222	60		rts				rts
.8223					NextCommand:
.8223	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8225	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8227	20 97 8f	jsr $8f97			jsr 	StackCheckFrame
.822a	5a		phy				phy
.822b	a0 10		ldy #$10			ldy 	#16 						; get the step count
.822d	b1 34		lda ($34),y			lda 	(basicStack),y
.822f	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8231	30 02		bmi $8235			bmi 	_NCStepNeg
.8233	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8235					_NCStepNeg:
.8235	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8237	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8239	18		clc				clc
.823a					_NCBump:
.823a	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.823c	91 34		sta ($34),y			sta 	(basicStack),y
.823e	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8240	c8		iny				iny 								; next byte
.8241	ca		dex				dex 								; do four times
.8242	d0 f6		bne $823a			bne 	_NCBump
.8244	20 e9 81	jsr $81e9			jsr		CopyIndexToReference		; copy it to the reference variable.
.8247	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8249	b1 34		lda ($34),y			lda 	(basicStack),y
.824b	0a		asl a				asl 	a 							; sign bit to carry
.824c	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.824e	85 38		sta $38				sta 	zTemp1
.8250	90 02		bcc $8254			bcc 	_NCCompRev 					; use if step is +ve
.8252	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8254					_NCCompRev:
.8254	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8256	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8258	85 39		sta $39				sta 	zTemp1+1
.825a	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.825c	38		sec				sec
.825d					_NCCompare:
.825d	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.825f	b1 34		lda ($34),y			lda 	(basicStack),y
.8261	a4 39		ldy $39				ldy 	zTemp1+1
.8263	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8265	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8267	e6 39		inc $39				inc 	zTemp1+1
.8269	ca		dex				dex 								; do it 4 times.
.826a	d0 f1		bne $825d			bne 	_NCCompare
.826c	50 02		bvc $8270			bvc 	_NCNoOverflow 				; convert to signed comparison
.826e	49 80		eor #$80			eor 	#$80
.8270					_NCNoOverflow:
.8270	7a		ply				ply 								; restore Y position
.8271	0a		asl a				asl 	a 							; is bit 7 set.
.8272	90 04		bcc $8278			bcc 	_NCLoopback 				; if no , >= so loop back
.8274	20 89 8f	jsr $8f89			jsr 	StackClose 					; exit the loop
.8277	60		rts				rts
.8278					_NCLoopBack:
.8278	20 b3 8f	jsr $8fb3			jsr 	STKLoadCodePosition 		; loop back
.827b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.827c					Command_GOSUB:
.827c	a2 00		ldx #$00			ldx 	#0
.827e	20 bf 8e	jsr $8ebf			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8281	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8283	20 70 8f	jsr $8f70			jsr 	StackOpen 					; create frame
.8286	20 a2 8f	jsr $8fa2			jsr 	STKSaveCodePosition 		; save current position
.8289	4c 9f 82	jmp $829f			jmp 	GotoStackX
.828c					Command_RETURN:
.828c	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.828e	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8290	20 97 8f	jsr $8f97			jsr 	StackCheckFrame
.8293	20 b3 8f	jsr $8fb3			jsr 	STKLoadCodePosition 		; restore code position
.8296	20 89 8f	jsr $8f89			jsr 	StackClose
.8299	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.829a					GotoCommand:
.829a	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.829c	20 bf 8e	jsr $8ebf			jsr 	Evaluate16BitInteger
.829f					GotoStackX:
.829f	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82a2	48		pha				pha 								; it is slightly inefficient, just in cases.
.82a3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82a6	fa		plx				plx
.82a7	20 99 94	jsr $9499			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82aa	4c a1 83	jmp $83a1			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82ad					IfCommand:
.82ad	a2 00		ldx #$00			ldx 	#0 							; If what.
.82af	20 87 8e	jsr $8e87			jsr 	EvaluateNumber
.82b2	b1 30		lda ($30),y			lda 	(codePtr),y
.82b4	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82b6	d0 0a		bne $82c2			bne 	_IFStructured
.82b8	c8		iny				iny 								; consume THEN
.82b9	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; is it zero
.82bc	f0 01		beq $82bf			beq 	_IfFail 					; if fail, go to next line
.82be	60		rts				rts 								; if THEN just continue
.82bf					_IfFail:
.82bf	4c eb 83	jmp $83eb			jmp 	EOLCommand
.82c2					_IfStructured:
.82c2	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; is it zero
.82c5	d0 07		bne $82ce			bne 	_IfExit 					; if not, then continue normally.
.82c7	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82c9	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82cb	20 03 84	jsr $8403			jsr 	ScanForward 				; and run from there/
.82ce					_IfExit:
.82ce	60		rts				rts
.82cf					ElseCode:
.82cf	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82d1	aa		tax				tax 								; so just go to the structure exit
.82d2	20 03 84	jsr $8403			jsr 	ScanForward
.82d5	60		rts				rts
.82d6					EndIf:
.82d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82d7					LetCommand:
.82d7	a2 00		ldx #$00			ldx 	#0
.82d9	ad 76 88	lda $8876			lda 	PrecedenceLevel+"*"			; precedence > this
.82dc	20 90 88	jsr $8890			jsr 	EvaluateExpressionAtPrecedence
.82df	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82e1	20 db 94	jsr $94db			jsr 	CheckNextA
.82e4	e8		inx				inx 								; RHS
.82e5	20 7e 8e	jsr $8e7e			jsr 	EvaluateValue
.82e8	ca		dex				dex
.82e9	20 ed 82	jsr $82ed			jsr 	AssignVariable
.82ec	60		rts				rts
.82ed					AssignVariable:
.82ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.82f0	48		pha				pha 								; save a copy
.82f1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82f4	29 10		and #$10			and 	#NSBIsString
.82f6	d0 0b		bne $8303			bne 	_ASError
.82f8	68		pla				pla 								; get back
.82f9	29 10		and #$10			and 	#NSBIsString 				; check type
.82fb	d0 03		bne $8300			bne 	_ASString
.82fd	4c cb 88	jmp $88cb			jmp 	AssignNumber
.8300					_ASString:
.8300	4c 39 89	jmp $8939			jmp 	AssignString
.8303					_ASError:
.8303	4c 8e 99	jmp $998e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8306					NewCommand:
.8306	20 48 94	jsr $9448			jsr 	MemoryNew
.8309	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.830c	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.830f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8310					Command_Print:
.8310	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8311					_CPLoop:
.8311	08		php				php 								; save last action flag
.8312	b1 30		lda ($30),y			lda 	(codePtr),y
.8314	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8316	f0 46		beq $835e			beq 	_CPExit
.8318	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.831a	f0 42		beq $835e			beq 	_CPExit
.831c	68		pla				pla 								; throw last action flag
.831d	b1 30		lda ($30),y			lda 	(codePtr),y
.831f	c8		iny				iny
.8320	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8322	f0 37		beq $835b			beq 	_CPContinueWithSameLine
.8324	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8326	f0 2e		beq $8356			beq 	_CPTab
.8328	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.832a	f0 26		beq $8352			beq 	_CPNewLine
.832c	88		dey				dey 								; undo the get.
.832d	a2 00		ldx #$00			ldx 	#0
.832f	20 7e 8e	jsr $8e7e			jsr 	EvaluateValue 				; get a value into slot 0
.8332	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8335	29 10		and #$10			and 	#NSBIsString
.8337	f0 0b		beq $8344			beq 	_CPNumber
.8339	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.833c	ad 08 06	lda $0608			lda 	NSMantissa0
.833f	20 de 84	jsr $84de			jsr 	PrintStringXA
.8342	80 cc		bra $8310			bra 	Command_Print 				; loop round clearing carry so NL if end
.8344					_CPNumber:
.8344	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8346	20 54 8d	jsr $8d54			jsr 	ConvertNumberToString 		; convert to string
.8349	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.834b	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.834d	20 de 84	jsr $84de			jsr 	PrintStringXA
.8350	80 be		bra $8310			bra 	Command_Print 				; loop round clearing carry so NL if end
.8352					_CPNewLine:
.8352	a9 0d		lda #$0d			lda 	#13
.8354	80 02		bra $8358			bra 	_CPPrintChar
.8356					_CPTab:
.8356	a9 09		lda #$09			lda 	#9 							; print TAB
.8358					_CPPrintChar:
.8358	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.835b					_CPContinueWithSameLine:
.835b	38		sec				sec 								; loop round with carry set, which
.835c	80 b3		bra $8311			bra 	_CPLoop 					; will inhibit final CR
.835e					_CPExit:
.835e	28		plp				plp 								; get last action flag
.835f	b0 05		bcs $8366			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8361	a9 0d		lda #$0d			lda 	#13 						; print new line
.8363	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.8366					_CPExit2:
.8366	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8367					RemCommand:
.8367	b1 30		lda ($30),y			lda 	(codePtr),y
.8369	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.836b	d0 06		bne $8373			bne 	_RMExit
.836d	c8		iny				iny
.836e	98		tya				tya
.836f	38		sec				sec
.8370	71 30		adc ($30),y			adc 	(codePtr),y
.8372	a8		tay				tay
.8373					_RMExit:
.8373	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8374					Command_REPEAT:
.8374	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8376	20 70 8f	jsr $8f70			jsr 	StackOpen
.8379	20 a2 8f	jsr $8fa2			jsr 	STKSaveCodePosition 		; save loop position
.837c	60		rts				rts
.837d					Command_UNTIL:
.837d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.837f	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8381	20 97 8f	jsr $8f97			jsr 	StackCheckFrame
.8384	a2 00		ldx #$00			ldx 	#0
.8386	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; work out the number
.8389	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; check if zero
.838c	f0 04		beq $8392			beq 	_CULoopBack 				; if so keep looping
.838e	20 89 8f	jsr $8f89			jsr 	StackClose		 			; return
.8391	60		rts				rts
.8392					_CULoopBack:
.8392	20 b3 8f	jsr $8fb3			jsr 	STKLoadCodePosition 		; loop back
.8395	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8396					CommandRUN:
.8396	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8399	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.839b	85 30		sta $30				sta 	codePtr
.839d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.839f	85 31		sta $31				sta 	codePtr+1
.83a1					RUNNewLine:
.83a1	b2 30		lda ($30)			lda 	(codePtr)
.83a3	f0 43		beq $83e8			beq 	CRNoProgram         		; no then END.
.83a5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83a7	9a		txs				txs
.83a8					RUNCodePointerLine:
.83a8	a0 02		ldy #$02			ldy 	#2 							; start of program
.83aa					_CRIncMainLoop:
.83aa	c8		iny				iny
.83ab					_CRMainLoop:
.83ab	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83ae	b1 30		lda ($30),y			lda 	(codePtr),y
.83b0	10 10		bpl $83c2			bpl 	_CRNotKeyword
.83b2	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.83b4	b0 04		bcs $83ba			bcs 	_CRIsKeyword
.83b6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.83b8	b0 28		bcs $83e2			bcs		_CRSyntaxError
.83ba					_CRIsKeyword:
.83ba	c8		iny				iny 								; consume command
.83bb	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.83bc	aa		tax				tax 								; put in X for vector jump
.83bd	20 e5 83	jsr $83e5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.83c0	80 e9		bra $83ab			bra 	_CRMainLoop 				; and loop round
.83c2					_CRNotKeyword:
.83c2	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.83c4	f0 e4		beq $83aa			beq 	_CRIncMainLoop
.83c6	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.83c8	90 05		bcc $83cf			bcc 	_CRNotVariable
.83ca					_CRGoLet:
.83ca	20 d7 82	jsr $82d7			jsr 	LetCommand
.83cd	80 dc		bra $83ab			bra 	_CRMainLoop
.83cf					_CRNotVariable:
.83cf	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.83d1	f0 f7		beq $83ca			beq 	_CRGoLet
.83d3	c9 21		cmp #$21			cmp 	#KWD_PLING
.83d5	f0 f3		beq $83ca			beq 	_CRGoLet
.83d7	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.83d9	f0 01		beq $83dc			beq 	_CRGoRem
>83db	db						.byte 	$DB 						; causes a break in the emulator
.83dc					_CRGoRem:
.83dc	c8		iny				iny
.83dd	20 67 83	jsr $8367			jsr 	RemCommand
.83e0	80 c9		bra $83ab			bra 	_CRMainLoop
.83e2					_CRSyntaxError:
.83e2	4c 84 99	jmp $9984			jmp 	SyntaxError
.83e5					_CRCallVector0:
.83e5	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.83e8					CRNoProgram:
.83e8	4c 66 81	jmp $8166			jmp 	EndCommand
.83eb					EOLCommand:
.83eb	18		clc				clc
.83ec	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.83ee	65 30		adc $30				adc 	codePtr
.83f0	85 30		sta $30				sta 	codePtr
.83f2	90 02		bcc $83f6			bcc 	_CREExit
.83f4	e6 31		inc $31				inc 	codePtr+1
.83f6					_CREExit:
.83f6	80 a9		bra $83a1			bra 	RunNewLine
.83f8					Shift1Command:
.83f8	b1 30		lda ($30),y			lda 	(codePtr),y
.83fa	c8		iny				iny
.83fb	0a		asl a				asl 	a
.83fc	aa		tax				tax
.83fd	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8400					Unused1:
.8400					Unused2:
.8400					Unused3:
.8400	4c 84 99	jmp $9984			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8403					ScanForward:
.8403	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8405	86 37		stx $37				stx 	zTemp0+1
.8407	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8409					_ScanLoop:
.8409	b1 30		lda ($30),y			lda 	(codePtr),y
.840b	c8		iny				iny
.840c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.840e	d0 09		bne $8419			bne 	_ScanGoNext
.8410	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8412	f0 04		beq $8418			beq 	_ScanMatch
.8414	c5 37		cmp $37				cmp 	zTemp0+1
.8416	d0 01		bne $8419			bne 	_ScanGoNext
.8418					_ScanMatch:
.8418	60		rts				rts
.8419					_ScanGoNext:
.8419	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.841b	90 ec		bcc $8409			bcc 	_ScanLoop
.841d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.841f	90 18		bcc $8439			bcc 	_ScanSkipOne
.8421	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8423	b0 2f		bcs $8454			bcs 	_ScanSkipData
.8425	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8427	90 e0		bcc $8409			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8429	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.842b	b0 dc		bcs $8409			bcs 	_ScanLoop
.842d	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.842f	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8431	b0 d6		bcs $8409			bcs 	_ScanLoop
.8433	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8435	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8437	80 d0		bra $8409			bra 	_ScanLoop
.8439					_ScanSkipOne:
.8439	c8		iny				iny 								; consume the extra one.
.843a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.843c	d0 cb		bne $8409			bne 	_ScanLoop
.843e	18		clc				clc
.843f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8441	65 30		adc $30				adc 	codePtr
.8443	85 30		sta $30				sta 	codePtr
.8445	90 02		bcc $8449			bcc 	_CREExit
.8447	e6 31		inc $31				inc 	codePtr+1
.8449					_CREExit:
.8449	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.844b	b2 30		lda ($30)			lda 	(codePtr)
.844d	d0 ba		bne $8409			bne 	_ScanLoop 					; if not zero, more to scan
.844f	a9 13		lda #$13		lda	#19
.8451	4c 8c 84	jmp $848c		jmp	ErrorHandler
.8454					_ScanSkipData:
.8454	88		dey				dey 								; point at data token
.8455	c8		iny				iny
.8456	98		tya				tya
.8457	38		sec				sec
.8458	71 30		adc ($30),y			adc 	(codePtr),y
.845a	a8		tay				tay
.845b	80 ac		bra $8409			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.845d					Command_WHILE:
.845d	5a		phy				phy 								; save position of the test
.845e	a2 00		ldx #$00			ldx 	#0
.8460	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; work out the number
.8463	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; check if zero
.8466	f0 0e		beq $8476			beq 	_WHExitLoop 				; if so exit the loop
.8468	98		tya				tya 								; position *after* test.
.8469	7a		ply				ply 								; restore position before test, at WHILE
.846a	88		dey				dey
.846b	48		pha				pha 								; push after test on the stack
.846c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.846e	20 70 8f	jsr $8f70			jsr 	StackOpen
.8471	20 a2 8f	jsr $8fa2			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8474	7a		ply				ply 								; restore the position *after* the test
.8475	60		rts				rts
.8476					_WHExitLoop:
.8476	68		pla				pla 								; throw post loop position
.8477	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8479	aa		tax				tax
.847a	20 03 84	jsr $8403			jsr 	ScanForward
.847d	60		rts				rts
.847e					Command_WEND:
.847e	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8480	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8482	20 97 8f	jsr $8f97			jsr 	StackCheckFrame
.8485	20 b3 8f	jsr $8fb3			jsr 	STKLoadCodePosition 		; loop back
.8488	20 89 8f	jsr $8f89			jsr 	StackClose		 			; erase the frame
.848b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.94cb					CheckRightBracket:
.94cb	b1 30		lda ($30),y			lda 	(codePtr),y
.94cd	c8		iny				iny
.94ce	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.94d0	d0 0f		bne $94e1			bne 	CNAFail
.94d2	60		rts				rts
.94d3					CheckComma:
.94d3	b1 30		lda ($30),y			lda 	(codePtr),y
.94d5	c8		iny				iny
.94d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.94d8	d0 07		bne $94e1			bne 	CNAFail
.94da	60		rts				rts
.94db					CheckNextA:
.94db	d1 30		cmp ($30),y			cmp 	(codePtr),y
.94dd	d0 02		bne $94e1			bne 	CNAFail
.94df	c8		iny				iny 								; skip character
.94e0	60		rts				rts 								; and exit
.94e1					CNAFail:
.94e1	4c 84 99	jmp $9984			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.848c					ErrorHandler:
.848c	a8		tay				tay 								; find the error text
.848d	f0 42		beq $84d1			beq 	_EHEnd
.848f	a2 00		ldx #$00			ldx 	#0
.8491					_EHFind:
.8491	88		dey				dey 								; found the error text ?
.8492	f0 0a		beq $849e			beq 	_EHFound
.8494					_EHFindZero:
.8494	bd 9d 99	lda $999d,x			lda 	ErrorText,x 				; find the next error
.8497	e8		inx				inx
.8498	c9 00		cmp #$00			cmp 	#0
.849a	d0 f8		bne $8494			bne 	_EHFindZero
.849c	80 f3		bra $8491			bra 	_EHFind
.849e					_EHFound:
.849e	bd 9d 99	lda $999d,x			lda 	ErrorText,x 				; print the message
.84a1	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.84a4	e8		inx				inx
.84a5	bd 9d 99	lda $999d,x			lda 	ErrorText,x
.84a8	d0 f4		bne $849e			bne 	_EHFound
.84aa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.84ac	b1 30		lda ($30),y			lda 	(codePtr),y
.84ae	d0 05		bne $84b5			bne 	_EHAtMsg
.84b0	c8		iny				iny
.84b1	b1 30		lda ($30),y			lda 	(codePtr),y
.84b3	f0 17		beq $84cc			beq 	_EHCREnd
.84b5					_EHAtMsg:
.84b5	a2 84		ldx #$84			ldx 	#_AtMsg >> 8 				; print " at "
.84b7	a9 d4		lda #$d4			lda 	#_AtMsg & $FF
.84b9	20 de 84	jsr $84de			jsr 	PrintStringXA
.84bc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.84be	b1 30		lda ($30),y			lda 	(codePtr),y
.84c0	48		pha				pha
.84c1	c8		iny				iny
.84c2	b1 30		lda ($30),y			lda 	(codePtr),y
.84c4	aa		tax				tax
.84c5	68		pla				pla
.84c6	20 27 96	jsr $9627			jsr 	ConvertInt16 				; convert XA to string
.84c9	20 de 84	jsr $84de			jsr 	PrintStringXA 				; and print it.
.84cc					_EHCREnd:
.84cc	a9 0d		lda #$0d			lda 	#13 						; new line
.84ce	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.84d1					_EHEnd:
.84d1	4c 0c 80	jmp $800c			jmp 	WarmStart
>84d4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>84dc	20 00
.84de					PrintStringXA:
.84de	5a		phy				phy
.84df	86 37		stx $37				stx 	zTemp0+1
.84e1	85 36		sta $36				sta 	zTemp0
.84e3	a0 00		ldy #$00			ldy 	#0
.84e5					_PSXALoop:
.84e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.84e7	f0 06		beq $84ef			beq 	_PSXAExit
.84e9	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.84ec	c8		iny				iny
.84ed	80 f6		bra $84e5			bra 	_PSXALoop
.84ef					_PSXAExit:
.84ef	7a		ply				ply
.84f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.84f1					UnaryTrue:
.84f1	fa		plx				plx
.84f2					ReturnTrue:
.84f2	a9 01		lda #$01			lda 	#1  						; set to 1
.84f4	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.84f7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.84f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84fc	60		rts				rts
.84fd					UnaryFalse:
.84fd	fa		plx				plx
.84fe					ReturnFalse:
.84fe	4c 33 8f	jmp $8f33			jmp 	NSMSetZero 					; set it all to zero
.8501					BinaryCompareEqual:
.8501	fa		plx				plx
.8502	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.8505	c9 00		cmp #$00			cmp 	#0
.8507	f0 e9		beq $84f2			beq 	ReturnTrue
.8509	80 f3		bra $84fe			bra 	ReturnFalse
.850b					BinaryCompareLess:
.850b	fa		plx				plx
.850c	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.850f	c9 ff		cmp #$ff			cmp 	#$FF
.8511	f0 df		beq $84f2			beq 	ReturnTrue
.8513	80 e9		bra $84fe			bra 	ReturnFalse
.8515					BinaryCompareGreater:
.8515	fa		plx				plx
.8516	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.8519	c9 01		cmp #$01			cmp 	#1
.851b	f0 d5		beq $84f2			beq 	ReturnTrue
.851d	80 df		bra $84fe			bra 	ReturnFalse
.851f					BinaryCompareNotEqual:
.851f	fa		plx				plx
.8520	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.8523	c9 00		cmp #$00			cmp 	#0
.8525	d0 cb		bne $84f2			bne 	ReturnTrue
.8527	80 d5		bra $84fe			bra 	ReturnFalse
.8529					BinaryCompareLessEqual:
.8529	fa		plx				plx
.852a	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.852d	c9 01		cmp #$01			cmp 	#1
.852f	d0 c1		bne $84f2			bne 	ReturnTrue
.8531	80 cb		bra $84fe			bra 	ReturnFalse
.8533					BinaryCompareGreaterEqual:
.8533	fa		plx				plx
.8534	20 3d 85	jsr $853d			jsr 	CompareBaseCode
.8537	c9 ff		cmp #$ff			cmp 	#$FF
.8539	d0 b7		bne $84f2			bne 	ReturnTrue
.853b	80 c1		bra $84fe			bra 	ReturnFalse
.853d					CompareBaseCode:
.853d	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; make both values if references.
.8540	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8543	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8546	29 10		and #$10			and 	#NSTString
.8548	d0 40		bne $858a			bne 	_CBCString
.854a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.854d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8550	d0 3b		bne $858d			bne 	_CBCFloat
.8552	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8555	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8558	29 08		and #$08			and 	#NSTFloat
.855a	d0 31		bne $858d			bne 	_CBCFloat
.855c	20 90 85	jsr $8590			jsr 	CompareFixMinusZero
.855f	e8		inx				inx
.8560	20 90 85	jsr $8590			jsr 	CompareFixMinusZero
.8563	ca		dex				dex
.8564	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8567	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.856a	10 0b		bpl $8577			bpl 	_CDCSameSign
.856c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.856f	30 16		bmi $8587			bmi 	_CBCLess 					; return $FF
.8571					_CBCGreater:
.8571	a9 01		lda #$01			lda 	#1
.8573	60		rts				rts
.8574					_CBCEqual:
.8574	a9 00		lda #$00			lda 	#0
.8576	60		rts				rts
.8577					_CDCSameSign:
.8577	20 a0 86	jsr $86a0			jsr 	SubTopTwoStack 				; unsigned subtract
.857a	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; or the mantissa together
.857d	f0 f5		beq $8574			beq 	_CBCEqual 					; -0 == 0
.857f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8582	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8585	10 ea		bpl $8571			bpl 	_CBCGreater
.8587					_CBCLess:
.8587	a9 ff		lda #$ff			lda 	#$FF
.8589	60		rts				rts
.858a					_CBCString:
.858a	4c f6 85	jmp $85f6			jmp 	CompareStrings
.858d					_CBCFloat:
.858d	4c 23 97	jmp $9723			jmp 	CompareFloat
.8590					CompareFixMinusZero:
.8590	20 63 8f	jsr $8f63			jsr 	NSMIsZero
.8593	d0 03		bne $8598			bne 	_CFXMZNotZero
.8595	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8598					_CFXMZNotZero:
.8598	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8599					StringConcat:
.8599	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.859c	3d 01 06	and $0601,x			and 	NSStatus+1,x
.859f	29 18		and #$18			and 	#NSBTypeMask
.85a1	c9 10		cmp #$10			cmp 	#NSTString
.85a3	d0 4e		bne $85f3			bne		_SCType
.85a5	64 38		stz $38				stz 	zTemp1 						; counting total length
.85a7	e8		inx				inx
.85a8	20 c6 85	jsr $85c6			jsr 	_SCSetupZ0 					; setup for second
.85ab	20 d1 85	jsr $85d1			jsr 	_SCLengthZ0 				; length for second
.85ae	ca		dex				dex
.85af	20 c6 85	jsr $85c6			jsr 	_SCSetupZ0 					; setup for first
.85b2	20 d1 85	jsr $85d1			jsr 	_SCLengthZ0 				; length for first
.85b5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.85b7	20 38 9b	jsr $9b38			jsr 	StringTempAllocate
.85ba	20 e4 85	jsr $85e4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.85bd	e8		inx				inx
.85be	20 c6 85	jsr $85c6			jsr 	_SCSetupZ0 					; copy second out
.85c1	20 e4 85	jsr $85e4			jsr 	_SCCopy
.85c4	ca		dex				dex
.85c5	60		rts				rts
.85c6					_SCSetupZ0:
.85c6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85c9	85 36		sta $36				sta 	zTemp0
.85cb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85ce	85 37		sta $37				sta 	zTemp0+1
.85d0	60		rts				rts
.85d1					_SCLengthZ0:
.85d1	5a		phy				phy
.85d2	a0 00		ldy #$00			ldy 	#0
.85d4					_SCLenLoop:
.85d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.85d6	f0 0a		beq $85e2			beq 	_SCLExit
.85d8	c8		iny				iny
.85d9	e6 38		inc $38				inc 	zTemp1
.85db	10 f7		bpl $85d4			bpl		_SCLenLoop
.85dd	a9 09		lda #$09		lda	#9
.85df	4c 8c 84	jmp $848c		jmp	ErrorHandler
.85e2					_SCLExit:
.85e2	7a		ply				ply
.85e3	60		rts				rts
.85e4					_SCCopy:
.85e4	5a		phy				phy
.85e5	a0 00		ldy #$00			ldy 	#0
.85e7					_SCCopyLoop:
.85e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.85e9	f0 06		beq $85f1			beq 	_SCCExit
.85eb	20 76 9b	jsr $9b76			jsr 	StringTempWrite
.85ee	c8		iny				iny
.85ef	80 f6		bra $85e7			bra 	_SCCopyLoop
.85f1					_SCCExit:
.85f1	7a		ply				ply
.85f2	60		rts				rts
.85f3					_SCType:
.85f3	4c 8e 99	jmp $998e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94e4					IntegerDivide:
.94e4	fa		plx				plx
.94e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.94e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.94eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94ec	0a		asl a				asl 	a
.94ed	10 05		bpl $94f4			bpl 	_NotRef
.94ef	48		pha				pha
.94f0	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94f3	68		pla				pla
.94f4					_NotRef:
.94f4	0a		asl a				asl 	a
.94f5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94f7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94fa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.94fd	f0 03		beq $9502			beq 	_IntegerCode 				; if clear, then we have two integers
.94ff	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.9502					_IntegerCode:
.9502	20 24 95	jsr $9524			jsr 	CheckDivideZero 			; do div zero check
.9505	20 5c 95	jsr $955c			jsr 	Int32Divide 				; do the division
.9508	20 19 96	jsr $9619			jsr 	CalculateSign 				; calculate result sign
.950b					NSMCopyPlusTwoToZero:
.950b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.950e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9511	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9514	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9517	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.951a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.951d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9520	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9523	60		rts				rts
.9524					CheckDivideZero:
.9524	e8		inx				inx
.9525	20 63 8f	jsr $8f63			jsr 	NSMIsZero
.9528	f0 02		beq $952c			beq 	_CDVError
.952a	ca		dex				dex
.952b	60		rts				rts
.952c					_CDVError:
.952c	a9 03		lda #$03		lda	#3
.952e	4c 8c 84	jmp $848c		jmp	ErrorHandler
.9531					IntegerModulus:
.9531	fa		plx				plx
.9532	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9535	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9538	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9539	0a		asl a				asl 	a
.953a	10 05		bpl $9541			bpl 	_NotRef
.953c	48		pha				pha
.953d	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9540	68		pla				pla
.9541					_NotRef:
.9541	0a		asl a				asl 	a
.9542	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9544	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9547	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.954a	f0 03		beq $954f			beq 	_IntegerCode 				; if clear, then we have two integers
.954c	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.954f					_IntegerCode:
.954f	20 24 95	jsr $9524			jsr 	CheckDivideZero 			; do div zero check
.9552	20 5c 95	jsr $955c			jsr 	Int32Divide 				; do the division
.9555	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9558	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.955b	60		rts				rts
.955c					Int32Divide:
.955c	48		pha				pha 								; save AXY
.955d	5a		phy				phy
.955e	20 0a 8f	jsr $8f0a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9561	20 2f 8f	jsr $8f2f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9564	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9566					_I32DivideLoop:
.9566	e8		inx				inx
.9567	e8		inx				inx
.9568	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.956b	ca		dex				dex
.956c	ca		dex				dex
.956d	20 49 8f	jsr $8f49			jsr 	NSMRotateLeft
.9570	20 9c 95	jsr $959c			jsr 	DivideCheckSubtract 		; check if subtract possible
.9573	90 03		bcc $9578			bcc 	_I32DivideNoCarryIn
.9575	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9578					_I32DivideNoCarryIn:
.9578	88		dey				dey 								; loop round till division completed.
.9579	d0 eb		bne $9566			bne 	_I32DivideLoop
.957b	7a		ply				ply 								; restore AXY and exit
.957c	68		pla				pla
.957d	60		rts				rts
.957e					Int32ShiftDivide:
.957e	48		pha				pha 								; save AY
.957f	5a		phy				phy
.9580	e8		inx				inx 								; clear S[X+2]
.9581	e8		inx				inx
.9582	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.9585	ca		dex				dex
.9586	ca		dex				dex
.9587	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9589					_I32SDLoop:
.9589	20 9c 95	jsr $959c			jsr 	DivideCheckSubtract 		; check if subtract possible
.958c	e8		inx				inx
.958d	e8		inx				inx
.958e	20 49 8f	jsr $8f49			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9591	ca		dex				dex
.9592	ca		dex				dex
.9593	20 49 8f	jsr $8f49			jsr 	NSMRotateLeft
.9596	88		dey				dey 	 							; do 31 times
.9597	d0 f0		bne $9589			bne 	_I32SDLoop
.9599	7a		ply				ply 								; restore AY and exit
.959a	68		pla				pla
.959b	60		rts				rts
.959c					DivideCheckSubtract:
.959c	20 a0 86	jsr $86a0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.959f	b0 04		bcs $95a5			bcs 	_DCSExit 					; if carry set, then could do, exit
.95a1	20 7a 86	jsr $867a			jsr 	AddTopTwoStack 				; add it back in
.95a4	18		clc				clc 								; and return False
.95a5					_DCSExit:
.95a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95a6					MulInteger:
.95a6	fa		plx				plx
.95a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.95aa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95ad	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95ae	0a		asl a				asl 	a
.95af	10 05		bpl $95b6			bpl 	_NotRef
.95b1	48		pha				pha
.95b2	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95b5	68		pla				pla
.95b6					_NotRef:
.95b6	0a		asl a				asl 	a 							; put MSB of type into A:7
.95b7	30 0b		bmi $95c4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95b9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95bc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95bf	f0 06		beq $95c7			beq 	_IntegerCode 				; if clear, then we have two integers
.95c1	4c fa 97	jmp $97fa			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95c4					_StringData:
.95c4	4c 98 99	jmp $9998			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95c7					_IntegerCode:
.95c7	20 d4 95	jsr $95d4			jsr 	MultiplyShort
.95ca	c9 00		cmp #$00			cmp 	#0
.95cc	f0 05		beq $95d3			beq 	_MIExit
.95ce	a9 04		lda #$04		lda	#4
.95d0	4c 8c 84	jmp $848c		jmp	ErrorHandler
.95d3					_MIExit:
.95d3	60		rts				rts
.95d4					MultiplyShort:
.95d4	5a		phy				phy 								; save Y
.95d5	20 0a 8f	jsr $8f0a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95d8	20 2f 8f	jsr $8f2f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95db	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95dd					_I32MLoop:
.95dd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95e0	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.95e3	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.95e6	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.95e9	f0 28		beq $9613			beq 	_I32MExit 					; exit if zero
.95eb	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95ee	29 01		and #$01			and 	#1
.95f0	f0 0e		beq $9600			beq 	_I32MNoAdd
.95f2	20 7a 86	jsr $867a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95f8	10 06		bpl $9600			bpl 	_I32MNoAdd
.95fa					_I32ShiftRight:
.95fa	20 56 8f	jsr $8f56			jsr 	NSMShiftRight 				; shift S[X] right
.95fd	c8		iny				iny 								; increment shift count
.95fe	80 0a		bra $960a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9600					_I32MNoAdd:
.9600	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9603	70 f5		bvs $95fa			bvs 	_I32ShiftRight 				; instead.
.9605	e8		inx				inx
.9606	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9609	ca		dex				dex
.960a					_I32MShiftUpper:
.960a	e8		inx				inx 								; shift S[X+2] right
.960b	e8		inx				inx
.960c	20 56 8f	jsr $8f56			jsr 	NSMShiftRight
.960f	ca		dex				dex
.9610	ca		dex				dex
.9611	80 ca		bra $95dd			bra 	_I32MLoop 					; try again.
.9613					_I32MExit:
.9613	20 19 96	jsr $9619			jsr 	CalculateSign
.9616	98		tya				tya 								; shift in A
.9617	7a		ply				ply 								; restore Y and exit
.9618	60		rts				rts
.9619					CalculateSign:
.9619	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.961c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.961f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9622	0a		asl a				asl 	a 							; shift bit 7 into carry
.9623	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9626	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.85f6					CompareStrings:
.85f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.85f9	3d 01 06	and $0601,x			and 	NSStatus+1,x
.85fc	29 10		and #$10			and 	#NSBIsString
.85fe	f0 2c		beq $862c			beq 	_CSTypeError
.8600	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8603	85 36		sta $36				sta 	zTemp0
.8605	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8608	85 37		sta $37				sta 	zTemp0+1
.860a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.860d	85 38		sta $38				sta 	zTemp1
.860f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8612	85 39		sta $39				sta 	zTemp1+1
.8614	5a		phy				phy 								; save Y so we can access strings
.8615	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8617					_CSLoop:
.8617	c8		iny				iny
.8618	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.861a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.861c	d0 06		bne $8624			bne 	_CSDifferent
.861e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8620	d0 f5		bne $8617			bne 	_CSLoop 					; still comparing
.8622					_CSExit:
.8622	7a		ply				ply 								; reached end, return zero in A from EOS
.8623	60		rts				rts
.8624					_CSDifferent:
.8624	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8626	90 fa		bcc $8622			bcc		_CSExit
.8628	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.862a	80 f6		bra $8622			bra 	_CSExit
.862c					_CSTypeError:
.862c	4c 8e 99	jmp $998e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.862f					ShiftLeft:
.862f	38		sec				sec
.8630	80 01		bra $8633			bra 	ShiftMain
.8632					ShiftRight:
.8632	18		clc				clc
.8633					ShiftMain:
.8633	fa		plx				plx 								; restore X
.8634	08		php				php 								; save direction
.8635	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8638	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.863b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.863c	0a		asl a				asl 	a
.863d	10 05		bpl $8644			bpl 	_NotRef
.863f	48		pha				pha
.8640	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8643	68		pla				pla
.8644					_NotRef:
.8644	0a		asl a				asl 	a
.8645	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8647	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.864a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.864d	f0 03		beq $8652			beq 	_IntegerCode 				; if clear, then we have two integers
.864f	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.8652					_IntegerCode:
.8652	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8655	29 e0		and #$e0			and 	#$E0
.8657	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.865a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.865d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8660	d0 13		bne $8675			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8662					_SMLoop:
.8662	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8665	30 11		bmi $8678			bmi 	_SMExit 					; exit if done.
.8667	28		plp				plp 								; restore direcition setting
.8668	08		php				php
.8669	90 05		bcc $8670			bcc 	_SMRight
.866b	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; shift left if CS
.866e	80 f2		bra $8662			bra 	_SMLoop
.8670					_SMRight:
.8670	20 56 8f	jsr $8f56			jsr 	NSMShiftRight 				; shift right if CC
.8673	80 ed		bra $8662			bra 	_SMLoop
.8675					_SMExit0:
.8675	20 33 8f	jsr $8f33			jsr 	NSMSetZero 					; return zero.
.8678					_SMExit:
.8678	28		plp				plp 								; throw direction
.8679	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.867a					AddTopTwoStack:
.867a	18		clc				clc
.867b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.867e	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8681	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8684	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8687	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.868a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.868d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8690	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8693	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8696	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8699	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.869c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.869f	60		rts				rts
.86a0					SubTopTwoStack:
.86a0	38		sec				sec
.86a1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86a4	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.86a7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86aa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86ad	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.86b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86b3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86b6	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.86b9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86bc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86bf	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.86c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86c5	60		rts				rts
.86c6					AddInteger:
.86c6	fa		plx				plx
.86c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86ce	0a		asl a				asl 	a
.86cf	10 05		bpl $86d6			bpl 	_NotRef
.86d1	48		pha				pha
.86d2	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86d5	68		pla				pla
.86d6					_NotRef:
.86d6	0a		asl a				asl 	a 							; put MSB of type into A:7
.86d7	30 0b		bmi $86e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.86d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86df	f0 06		beq $86e7			beq 	_IntegerCode 				; if clear, then we have two integers
.86e1	4c 82 96	jmp $9682			jmp 	FloatingPointAdd 							; otherwise at least one float.
.86e4					_StringData:
.86e4	4c 99 85	jmp $8599			jmp 	StringConcat							; at least one string - don't know both are strings.
.86e7					_IntegerCode:
.86e7					AddCode:
.86e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.86ea	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86ed	10 8b		bpl $867a			bpl 	AddTopTwoStack
.86ef	20 a0 86	jsr $86a0			jsr 	SubTopTwoStack 				; do a physical subtraction
.86f2	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.86f5	10 09		bpl $8700			bpl 	_AddExit
.86f7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.86fa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86fd	20 e8 8e	jsr $8ee8			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8700					_AddExit:
.8700	60		rts				rts
.8701					SubInteger:
.8701	fa		plx				plx
.8702	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8705	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8708	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8709	0a		asl a				asl 	a
.870a	10 05		bpl $8711			bpl 	_NotRef
.870c	48		pha				pha
.870d	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8710	68		pla				pla
.8711					_NotRef:
.8711	0a		asl a				asl 	a 							; put MSB of type into A:7
.8712	30 0b		bmi $871f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8714	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8717	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.871a	f0 06		beq $8722			beq 	_IntegerCode 				; if clear, then we have two integers
.871c	4c 87 96	jmp $9687			jmp 	FloatingPointSub 							; otherwise at least one float.
.871f					_StringData:
.871f	4c 98 99	jmp $9998			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8722					_IntegerCode:
.8722	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8725	49 80		eor #$80			eor 	#$80
.8727	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.872a	80 bb		bra $86e7			bra 	AddCode 					; and do the same code as add.
.872c					AndInteger:
.872c	fa		plx				plx
.872d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8730	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8733	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8734	0a		asl a				asl 	a
.8735	10 05		bpl $873c			bpl 	_NotRef
.8737	48		pha				pha
.8738	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.873b	68		pla				pla
.873c					_NotRef:
.873c	0a		asl a				asl 	a
.873d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.873f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8742	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8745	f0 03		beq $874a			beq 	_IntegerCode 				; if clear, then we have two integers
.8747	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.874a					_IntegerCode:
.874a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.874d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8750	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8753	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8756	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8759	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.875c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.875f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8762	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8765	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8768	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.876b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.876e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8771	60		rts				rts
.8772					OraInteger:
.8772	fa		plx				plx
.8773	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8776	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8779	0a		asl a				asl 	a 							; shift reference bit into sign bit
.877a	0a		asl a				asl 	a
.877b	10 05		bpl $8782			bpl 	_NotRef
.877d	48		pha				pha
.877e	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8781	68		pla				pla
.8782					_NotRef:
.8782	0a		asl a				asl 	a
.8783	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8785	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8788	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.878b	f0 03		beq $8790			beq 	_IntegerCode 				; if clear, then we have two integers
.878d	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.8790					_IntegerCode:
.8790	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8793	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8796	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8799	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.879c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.879f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87a2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87a5	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.87a8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87ab	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87ae	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.87b1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87b4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.87b7	60		rts				rts
.87b8					EorInteger:
.87b8	fa		plx				plx
.87b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87bc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87bf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87c0	0a		asl a				asl 	a
.87c1	10 05		bpl $87c8			bpl 	_NotRef
.87c3	48		pha				pha
.87c4	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87c7	68		pla				pla
.87c8					_NotRef:
.87c8	0a		asl a				asl 	a
.87c9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87cb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87ce	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87d1	f0 03		beq $87d6			beq 	_IntegerCode 				; if clear, then we have two integers
.87d3	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.87d6					_IntegerCode:
.87d6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87d9	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.87dc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87df	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87e2	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.87e5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87e8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87eb	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.87ee	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87f1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87f4	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.87f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87fa	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.87fd	60		rts				rts
.87fe					WordIndirect:
.87fe	fa		plx				plx
.87ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8802	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8805	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8806	0a		asl a				asl 	a
.8807	10 05		bpl $880e			bpl 	_NotRef
.8809	48		pha				pha
.880a	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.880d	68		pla				pla
.880e					_NotRef:
.880e	0a		asl a				asl 	a
.880f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8811	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8814	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8817	f0 03		beq $881c			beq 	_IntegerCode 				; if clear, then we have two integers
.8819	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.881c					_IntegerCode:
.881c	20 e7 86	jsr $86e7			jsr 	AddCode 					; add the two values
.881f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8821	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8824	60		rts				rts
.8825					ByteIndirect:
.8825	fa		plx				plx
.8826	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8829	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.882c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.882d	0a		asl a				asl 	a
.882e	10 05		bpl $8835			bpl 	_NotRef
.8830	48		pha				pha
.8831	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8834	68		pla				pla
.8835					_NotRef:
.8835	0a		asl a				asl 	a
.8836	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8838	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.883b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.883e	f0 03		beq $8843			beq 	_IntegerCode 				; if clear, then we have two integers
.8840	4c 8e 99	jmp $998e			jmp 	TypeError 					; anything else, type mismatch.
.8843					_IntegerCode:
.8843	20 e7 86	jsr $86e7			jsr 	AddCode 					; add the two values
.8846	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8848	9d 00 06	sta $0600,x			sta 	NSStatus,x
.884b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9627					ConvertInt16:
.9627	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.962a	8e 10 06	stx $0610			stx 	NSMantissa1
.962d	9c 18 06	stz $0618			stz 	NSMantissa2
.9630	9c 20 06	stz $0620			stz 	NSMantissa3
.9633	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9636	a2 00		ldx #$00			ldx 	#0 							; stack level
.9638	a9 0a		lda #$0a			lda 	#10 						; base
.963a	80 00		bra $963c			bra 	ConvertInt32
.963c					ConvertInt32:
.963c	5a		phy				phy
.963d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.963f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9642	10 08		bpl $964c			bpl 	_CI32NotNeg
.9644	48		pha				pha
.9645	a9 2d		lda #$2d			lda 	#'-'
.9647	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.964a	c8		iny				iny
.964b	68		pla				pla
.964c					_CI32NotNeg:
.964c	20 5a 96	jsr $965a			jsr 	_CI32DivideConvert 			; recursive conversion
.964f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9651	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9654	7a		ply				ply
.9655	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9657	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9659	60		rts				rts
.965a					_CI32DivideConvert:
.965a	e8		inx				inx 								; write to next slot up
.965b	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.965e	ca		dex				dex
.965f	20 5c 95	jsr $955c			jsr 	Int32Divide 				; divide
.9662	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9665	48		pha				pha
.9666	20 0b 95	jsr $950b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9669	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; is it zero ?
.966c	f0 06		beq $9674			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.966e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9671	20 5a 96	jsr $965a			jsr 	_CI32DivideConvert 			; and recusrively call.
.9674					_CI32NoRecurse:
.9674	68		pla				pla 								; remainder
.9675	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9677	90 02		bcc $967b			bcc 	_CI32NotHex
.9679	69 26		adc #$26			adc 	#6+32
.967b					_CI32NotHex:
.967b	69 30		adc #$30			adc 	#48
.967d	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9680	c8		iny				iny
.9681	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.884c					PrecedenceLevel:
>884c	04					.byte	 4	; $00 <<
>884d	02					.byte	 2	; $01 <=
>884e	02					.byte	 2	; $02 <>
>884f	00					.byte	 0	; $03 !!3
>8850	00					.byte	 0	; $04 ><
>8851	02					.byte	 2	; $05 >=
>8852	04					.byte	 4	; $06 >>
>8853	00					.byte	 0	; $07 !!7
>8854	00					.byte	 0	; $08 !!8
>8855	00					.byte	 0	; $09 !!9
>8856	00					.byte	 0	; $0a !!10
>8857	00					.byte	 0	; $0b !!11
>8858	00					.byte	 0	; $0c !!12
>8859	00					.byte	 0	; $0d !!13
>885a	00					.byte	 0	; $0e !!14
>885b	00					.byte	 0	; $0f !!15
>885c	00					.byte	 0	; $10 @
>885d	00					.byte	 0	; $11 !!17
>885e	00					.byte	 0	; $12 !!18
>885f	00					.byte	 0	; $13 [
>8860	04					.byte	 4	; $14 \
>8861	00					.byte	 0	; $15 ]
>8862	01					.byte	 1	; $16 ^
>8863	00					.byte	 0	; $17 _
>8864	00					.byte	 0	; $18 `
>8865	00					.byte	 0	; $19 !!25
>8866	00					.byte	 0	; $1a !!26
>8867	00					.byte	 0	; $1b {
>8868	01					.byte	 1	; $1c |
>8869	00					.byte	 0	; $1d }
>886a	00					.byte	 0	; $1e ~
>886b	00					.byte	 0	; $1f [7m<7F>[m
>886c	00					.byte	 0	; $20
>886d	05					.byte	 5	; $21 !
>886e	00					.byte	 0	; $22 "
>886f	00					.byte	 0	; $23 #
>8870	05					.byte	 5	; $24 $
>8871	04					.byte	 4	; $25 %
>8872	01					.byte	 1	; $26 &
>8873	00					.byte	 0	; $27 '
>8874	00					.byte	 0	; $28 (
>8875	00					.byte	 0	; $29 )
>8876	04					.byte	 4	; $2a *
>8877	03					.byte	 3	; $2b +
>8878	00					.byte	 0	; $2c ,
>8879	03					.byte	 3	; $2d -
>887a	00					.byte	 0	; $2e .
>887b	04					.byte	 4	; $2f /
>887c	00					.byte	 0	; $30 0
>887d	00					.byte	 0	; $31 1
>887e	00					.byte	 0	; $32 2
>887f	00					.byte	 0	; $33 3
>8880	00					.byte	 0	; $34 4
>8881	00					.byte	 0	; $35 5
>8882	00					.byte	 0	; $36 6
>8883	00					.byte	 0	; $37 7
>8884	00					.byte	 0	; $38 8
>8885	00					.byte	 0	; $39 9
>8886	00					.byte	 0	; $3a :
>8887	00					.byte	 0	; $3b ;
>8888	02					.byte	 2	; $3c <
>8889	02					.byte	 2	; $3d =
>888a	02					.byte	 2	; $3e >
>888b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.888c					EvaluateExpressionAt0:
.888c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.888e					EvaluateExpression:
.888e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8890					EvaluateExpressionAtPrecedence:
.8890	48		pha				pha 								; save precedence level
.8891	20 5f 8b	jsr $8b5f			jsr 	EvaluateTerm 				; evaluate term into level X.
.8894	68		pla				pla 								; restore precedence level.
.8895					_EXPRLoop:
.8895	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8897	b1 30		lda ($30),y			lda 	(codePtr),y
.8899	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.889b	b0 25		bcs $88c2			bcs 	_EXPRExit
.889d	da		phx				phx 								; read the operator precedence
.889e	aa		tax				tax
.889f	bd 4c 88	lda $884c,x			lda 	PrecedenceLevel,x
.88a2	fa		plx				plx
.88a3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.88a5	f0 1b		beq $88c2			beq 	_EXPRExit
.88a7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.88a9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.88ab	c5 37		cmp $37				cmp 	zTemp0+1
.88ad	b0 13		bcs $88c2			bcs		_EXPRExit 					; if current >= operator exit
.88af	48		pha				pha 								; save current precedence.
.88b0	b1 30		lda ($30),y			lda 	(codePtr),y
.88b2	c8		iny				iny
.88b3	48		pha				pha
.88b4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.88b6	e8		inx				inx 								; work out the right hand side.
.88b7	20 90 88	jsr $8890			jsr 	EvaluateExpressionAtPrecedence
.88ba	ca		dex				dex
.88bb	68		pla				pla 								; get operator, call the code.
.88bc	20 c5 88	jsr $88c5			jsr 	_EXPRCaller
.88bf	68		pla				pla 								; restore precedence level
.88c0	80 d3		bra $8895			bra 	_EXPRLoop 					; and go round.
.88c2					_EXPRExit:
.88c2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.88c4	60		rts				rts
.88c5					_EXPRCaller:
.88c5	da		phx				phx 								; save on stack, first thing is to restore it
.88c6	0a		asl a				asl 	a 							; double so can use vectors into X
.88c7	aa		tax				tax
.88c8	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9682					FloatingPointAdd:
.9682	20 23 98	jsr $9823			jsr 	FloatPrepare 				; prepare for floats
.9685	80 0b		bra $9692			bra 	FloatAdd
.9687					FloatingPointSub:
.9687	20 23 98	jsr $9823			jsr 	FloatPrepare 				; prepare for floats
.968a					FloatSubtract:
.968a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.968d	49 80		eor #$80			eor 	#$80
.968f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9692					FloatAdd:
.9692	48		pha				pha
.9693	5a		phy				phy
.9694	20 34 98	jsr $9834			jsr 	NSNormalise 				; normalise S[X]
.9697	f0 54		beq $96ed			beq 	_FAReturn1
.9699	e8		inx				inx 								; normalise S[X+1]
.969a	20 34 98	jsr $9834			jsr 	NSNormalise
.969d	ca		dex				dex
.969e	c9 00		cmp #$00			cmp 	#0
.96a0	f0 6f		beq $9711			beq 	_FAExit 					; if so, just return A
.96a2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.96a5	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.96a8	f0 1b		beq $96c5			beq 	_FAExponentsEqual
.96aa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.96ad	a8		tay				tay
.96ae	38		sec				sec 								; do a signed comparison of the exponents.
.96af	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.96b2	50 02		bvc $96b6			bvc 	_FANoSignedChange
.96b4	49 80		eor #$80			eor 	#$80
.96b6					_FANoSignedChange:
.96b6	29 80		and #$80			and 	#$80
.96b8	10 03		bpl $96bd			bpl 	_FAHaveMax
.96ba	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.96bd					_FAHaveMax:
.96bd	20 14 97	jsr $9714			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96c0	e8		inx				inx
.96c1	20 14 97	jsr $9714			jsr 	_FAShiftToExponent
.96c4	ca		dex				dex
.96c5					_FAExponentsEqual:
.96c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.96c8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.96cb	30 10		bmi $96dd			bmi 	_FADifferentSigns
.96cd	20 7a 86	jsr $867a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96d3	10 3c		bpl $9711			bpl 	_FAExit 					; if no, we are done.
.96d5	20 56 8f	jsr $8f56			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96d8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.96db	80 34		bra $9711			bra 	_FAExit
.96dd					_FADifferentSigns:
.96dd	20 a0 86	jsr $86a0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96e0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.96e3	10 2c		bpl $9711			bpl 	_FAExit 					; if no, we are done.
.96e5	20 df 8e	jsr $8edf			jsr 	NSMNegate 					; netate result
.96e8	20 e8 8e	jsr $8ee8			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96eb	80 24		bra $9711			bra 	_FAExit
.96ed					_FAReturn1:
.96ed	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.96f0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96f3	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.96f6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96f9	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.96fc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96ff	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9702	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9705	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9708	9d 28 06	sta $0628,x			sta 	NSExponent,x
.970b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.970e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9711					_FAExit:
.9711	7a		ply				ply
.9712	68		pla				pla
.9713	60		rts				rts
.9714					_FAShiftToExponent:
.9714					_FAShiftToExponent2:
.9714	98		tya				tya 								; compare Y to exponent
.9715	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9718	f0 08		beq $9722			beq 	_FASEExit 					; exit if so.
.971a	20 56 8f	jsr $8f56			jsr 	NSMShiftRight	 			; shift the mantissa right
.971d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9720	80 f2		bra $9714			bra 	_FAShiftToExponent2
.9722					_FASEExit:
.9722	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9723					CompareFloat:
.9723	20 8a 96	jsr $968a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9726	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9729	29 f8		and #$f8			and 	#$F8
.972b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.972e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9731	f0 09		beq $973c			beq 	_FCExit 					; zero, so approximately identical
.9733	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9735	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9738	10 02		bpl $973c			bpl 	_FCExit
.973a					_FCNegative:
.973a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.973c					_FCExit:
.973c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.973d					FDivideCommand:
.973d	fa		plx				plx	 								; restore stack position
.973e	20 23 98	jsr $9823			jsr 	FloatPrepare 				; prepare for floats
.9741					FloatDivide:
.9741	48		pha				pha
.9742	e8		inx				inx
.9743	20 34 98	jsr $9834			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9746	ca		dex				dex
.9747	c9 00		cmp #$00			cmp 	#0
.9749	f0 20		beq $976b			beq 	_FDZero
.974b	20 34 98	jsr $9834			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.974e	f0 19		beq $9769			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9750	20 7e 95	jsr $957e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9753	20 0b 95	jsr $950b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9756	20 34 98	jsr $9834			jsr		NSNormalise 				; renormalise
.9759	20 19 96	jsr $9619			jsr 	CalculateSign 				; calculate result sign
.975c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.975f	38		sec				sec
.9760	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9763	38		sec				sec
.9764	e9 1e		sbc #$1e			sbc 	#30
.9766	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9769					_FDExit:
.9769	68		pla				pla
.976a	60		rts				rts
.976b					_FDZero:
.976b	a9 03		lda #$03		lda	#3
.976d	4c 8c 84	jmp $848c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9770					FloatFractionalPart:
.9770	5a		phy				phy
.9771	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9774	29 7f		and #$7f			and 	#$7F
.9776	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9779	20 34 98	jsr $9834			jsr 	NSNormalise
.977c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.977f	38		sec				sec
.9780	e9 e0		sbc #$e0			sbc 	#$E0
.9782	90 31		bcc $97b5			bcc 	_FFPExit 					; already fractional
.9784	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9786	b0 2a		bcs $97b2			bcs 	_FFPZero
.9788	a8		tay				tay 								; put count to do in Y
.9789	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.978c	20 b7 97	jsr $97b7			jsr 	_FFPPartial
.978f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9792	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9795	20 b7 97	jsr $97b7			jsr 	_FFPPartial
.9798	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.979b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.979e	20 b7 97	jsr $97b7			jsr 	_FFPPartial
.97a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97a4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97a7	20 b7 97	jsr $97b7			jsr 	_FFPPartial
.97aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97ad	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; zeroed check.
.97b0	d0 03		bne $97b5			bne 	_FFPExit
.97b2					_FFPZero:
.97b2	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.97b5					_FFPExit:
.97b5	7a		ply				ply
.97b6	60		rts				rts
.97b7					_FFPPartial:
.97b7	c0 00		cpy #$00			cpy 	#0 							; no more to do
.97b9	f0 17		beq $97d2			beq 	_FFFPPExit
.97bb	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.97bd	b0 0c		bcs $97cb			bcs 	_FFFPPWholeByte
.97bf	5a		phy				phy
.97c0					_FFFPPLeft:
.97c0	0a		asl a				asl 	a
.97c1	88		dey				dey
.97c2	d0 fc		bne $97c0			bne 	_FFFPPLeft
.97c4	7a		ply				ply
.97c5					_FFFPPRight:
.97c5	4a		lsr a				lsr 	a
.97c6	88		dey				dey
.97c7	d0 fc		bne $97c5			bne 	_FFFPPRight
.97c9	80 07		bra $97d2			bra 	_FFFPPExit
.97cb					_FFFPPWholeByte:
.97cb	98		tya				tya 								; subtract 8 from count
.97cc	38		sec				sec
.97cd	e9 08		sbc #$08			sbc 	#8
.97cf	a8		tay				tay
.97d0	a9 00		lda #$00			lda 	#0 							; and clear all
.97d2					_FFFPPExit:
.97d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.97d3					FloatIntegerPart:
.97d3	48		pha				pha
.97d4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.97d7	f0 1f		beq $97f8			beq 	_FIPExit 					; if so do nothing
.97d9	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; is it zero ?
.97dc	f0 17		beq $97f5			beq 	_FIPZero 					; if so return zero.
.97de	20 34 98	jsr $9834			jsr 	NSNormalise 				; normalise
.97e1	f0 12		beq $97f5			beq 	_FIPZero 					; normalised to zero, exit zero
.97e3					_FIPShift:
.97e3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97e6	10 08		bpl $97f0			bpl 	_FIPCheckZero
.97e8	20 56 8f	jsr $8f56			jsr 	NSMShiftRight 				; shift mantissa right
.97eb	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.97ee	80 f3		bra $97e3			bra 	_FIPShift
.97f0					_FIPCheckZero:
.97f0	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; avoid -0 problem
.97f3	d0 03		bne $97f8			bne 	_FIPExit 					; set to zero if mantissa zero.
.97f5					_FIPZero:
.97f5	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.97f8					_FIPExit:
.97f8	68		pla				pla
.97f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97fa					FloatingPointMultiply:
.97fa	20 23 98	jsr $9823			jsr 	FloatPrepare 				; prepare for floats
.97fd					FloatMultiply:
.97fd	48		pha				pha
.97fe	20 34 98	jsr $9834			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9801	f0 1b		beq $981e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9803	e8		inx				inx
.9804	20 34 98	jsr $9834			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9807	ca		dex				dex
.9808	c9 00		cmp #$00			cmp 	#0
.980a	f0 0f		beq $981b			beq 	_FDSetZero
.980c	20 d4 95	jsr $95d4			jsr 	MultiplyShort 				; calculate the result.
.980f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9812	18		clc				clc
.9813	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9816	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9819	80 03		bra $981e			bra 	_FDExit
.981b					_FDSetZero:
.981b	20 33 8f	jsr $8f33			jsr 	NSMSetZero 					; return 0
.981e					_FDExit:
.981e	20 34 98	jsr $9834			jsr 	NSNormalise 				; normalise the result
.9821	68		pla				pla
.9822	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9823					FloatPrepare:
.9823	20 9e 89	jsr $899e			jsr 	DereferenceTopTwo 			; dereference the top two values
.9826	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9829	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.982c	29 10		and #$10			and 	#NSBIsString
.982e	d0 01		bne $9831			bne 	_FDType
.9830	60		rts				rts
.9831					_FDType:
.9831	4c 8e 99	jmp $998e			jmp 	TypeError
.9834					NSNormalise:
.9834	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9837	29 80		and #$80			and 	#$80
.9839	09 08		ora #$08			ora 	#NSTFloat
.983b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.983e	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; if zero exit
.9841	d0 09		bne $984c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9843	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9846	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9849	a9 00		lda #$00			lda 	#0 							; set Z flag
.984b	60		rts				rts
.984c					_NSNormaliseOptimise:
.984c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.984f	d0 22		bne $9873			bne 	_NSNormaliseLoop
.9851	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9854	30 1d		bmi $9873			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9856	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9859	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.985c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.985f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9862	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9865	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9868	bd 28 06	lda $0628,x			lda 	NSExponent,x
.986b	38		sec				sec
.986c	e9 08		sbc #$08			sbc 	#8
.986e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9871	80 d9		bra $984c			bra 	_NSNormaliseOptimise
.9873					_NSNormaliseLoop:
.9873	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9876	70 08		bvs $9880			bvs 	_NSNExit 					; exit if so with Z flag clear
.9878	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; shift mantissa left
.987b	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.987e	80 f3		bra $9873			bra 	_NSNormaliseLoop
.9880					_NSNExit:
.9880	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9882	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.88cb					AssignNumber:
.88cb	5a		phy				phy
.88cc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.88cf	85 36		sta $36				sta 	zTemp0
.88d1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88d4	85 37		sta $37				sta 	zTemp0+1
.88d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.88d9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.88db	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88de	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.88e0	c9 08		cmp #$08			cmp 	#NSTFloat
.88e2	f0 2a		beq $890e			beq 	_ANFloat
.88e4	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.88e7	f0 05		beq $88ee			beq		_ANNotFloat
.88e9	e8		inx				inx
.88ea	20 d3 97	jsr $97d3			jsr 	FloatIntegerPart 			; make it an integer
.88ed	ca		dex				dex
.88ee					_ANNotFloat:
.88ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.88f1	29 03		and #$03			and 	#3
.88f3	d0 05		bne $88fa			bne 	_ANByteWord
.88f5	20 1a 89	jsr $891a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.88f8	80 1e		bra $8918			bra 	_ANExit
.88fa					_ANByteWord:
.88fa	48		pha				pha 								; save count
.88fb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.88fe	92 36		sta ($36)			sta 	(zTemp0)
.8900	68		pla				pla
.8901	c9 01		cmp #$01			cmp	 	#1
.8903	f0 13		beq $8918			beq 	_ANExit
.8905	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8908	a0 01		ldy #$01			ldy 	#1
.890a	91 36		sta ($36),y			sta 	(zTemp0),y
.890c	80 0a		bra $8918			bra 	_ANExit
.890e					_ANFloat:
.890e	20 1a 89	jsr $891a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8911	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8914	a0 04		ldy #$04			ldy 	#4
.8916	91 36		sta ($36),y			sta 	(zTemp0),y
.8918					_ANExit:
.8918	7a		ply				ply
.8919	60		rts				rts
.891a					_ANCopy4PackSign:
.891a	a0 03		ldy #$03			ldy 	#3
.891c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.891f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8921	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8924	91 36		sta ($36),y			sta 	(zTemp0),y
.8926	88		dey				dey
.8927	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.892a	91 36		sta ($36),y			sta 	(zTemp0),y
.892c	88		dey				dey
.892d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8930	91 36		sta ($36),y			sta 	(zTemp0),y
.8932	88		dey				dey
.8933	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8936	91 36		sta ($36),y			sta 	(zTemp0),y
.8938	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8939					AssignString:
.8939	5a		phy				phy
.893a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.893d	85 38		sta $38				sta 	zTemp1
.893f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8942	85 39		sta $39				sta 	zTemp1+1
.8944	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8947	85 36		sta $36				sta 	zTemp0
.8949	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.894c	85 37		sta $37				sta 	zTemp0+1
.894e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8950	b1 36		lda ($36),y			lda 	(zTemp0),y
.8952	f0 23		beq $8977			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8954	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8955	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8957	e9 02		sbc #$02			sbc 	#2
.8959	85 3c		sta $3c				sta 	zsTemp
.895b	a0 01		ldy #$01			ldy 	#1
.895d	b1 36		lda ($36),y			lda 	(zTemp0),y
.895f	e9 00		sbc #$00			sbc 	#0
.8961	85 3d		sta $3d				sta 	zsTemp+1
.8963	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8965					_ASGetLength:
.8965	c8		iny				iny
.8966	b1 38		lda ($38),y			lda 	(zTemp1),y
.8968	d0 fb		bne $8965			bne 	_ASGetLength
.896a	98		tya				tya 								; is this length <= current length
.896b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.896d	90 20		bcc $898f			bcc 	_ASCopyString
.896f	f0 1e		beq $898f			beq 	_ASCopyString
.8971	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8973	a0 01		ldy #$01			ldy 	#1
.8975	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8977					_ASNewStringRequired:
.8977	e8		inx				inx 								; concrete the new string.
.8978	20 bd 9a	jsr $9abd			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.897b	ca		dex				dex
.897c	18		clc				clc
.897d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8980	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8982	92 36		sta ($36)			sta 	(zTemp0)
.8984	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8987	69 00		adc #$00			adc 	#0
.8989	a0 01		ldy #$01			ldy 	#1
.898b	91 36		sta ($36),y			sta 	(zTemp0),y
.898d	80 0d		bra $899c			bra 	_ASExit
.898f					_ASCopyString:
.898f	a0 00		ldy #$00			ldy 	#0
.8991					_ASCopyLoop:
.8991	b1 38		lda ($38),y			lda 	(zTemp1),y
.8993	c8		iny				iny
.8994	c8		iny				iny
.8995	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8997	88		dey				dey
.8998	c9 00		cmp #$00			cmp 	#0
.899a	d0 f5		bne $8991			bne 	_ASCopyLoop
.899c					_ASExit:
.899c	7a		ply				ply
.899d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.899e					DereferenceTopTwo:
.899e	e8		inx				inx
.899f	20 a3 89	jsr $89a3			jsr 	Dereference 				; deref x+1
.89a2	ca		dex				dex  								; falls through to deref x
.89a3					Dereference:
.89a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.89a6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.89a8	f0 57		beq $8a01			beq 	_DRFExit 					; not a reference
.89aa	5a		phy				phy
.89ab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.89ae	85 36		sta $36				sta 	zTemp0
.89b0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89b3	85 37		sta $37				sta 	zTemp0+1
.89b5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.89b8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.89ba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.89c0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.89c2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.89c4	f0 0f		beq $89d5			beq 	_DRFDereferenceTwo
.89c6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.89c8	f0 39		beq $8a03			beq 	_DRFFull
.89ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.89cd	29 03		and #$03			and 	#3
.89cf	f0 32		beq $8a03			beq 	_DRFFull 					; the whole word
.89d1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.89d3	f0 07		beq $89dc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.89d5					_DRFDereferenceTwo:
.89d5	a0 01		ldy #$01			ldy 	#1
.89d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.89d9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89dc					_DRFClear23:
.89dc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.89df	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.89e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.89e5	29 18		and #$18			and 	#NSBTypeMask
.89e7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89ea	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.89ec	d0 12		bne $8a00			bne 	_DRFNotString
.89ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.89f1	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.89f4	d0 0a		bne $8a00			bne 	_DRFNotString
.89f6	a9 02		lda #$02			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.89f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.89fb	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.89fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a00					_DRFNotString
.8a00	7a		ply				ply 								; restore Y and exit
.8a01					_DRFExit:
.8a01	60		rts				rts
.8a02					_DRFNullString:
>8a02	00						.byte 	0
.8a03					_DRFFull:
.8a03	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8a05	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a07	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a0a	c8		iny				iny
.8a0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a0d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a10	c8		iny				iny
.8a11	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a13	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a16	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8a19	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8a1c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8a1e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8a21	f0 06		beq $8a29			beq 	_DRFNoExponent
.8a23	c8		iny				iny 								; if not, read the exponent as well.
.8a24	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a26	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8a29					_DRFNoExponent:
.8a29	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8a2c	10 0d		bpl $8a3b			bpl 	_DRFExit2 					; if not, then exit.
.8a2e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8a30	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a33	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8a36	09 80		ora #$80			ora 	#NSBIsNegative
.8a38	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a3b					_DRFExit2:
.8a3b	7a		ply				ply
.8a3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8a3d					EncodeNumberStart:
.8a3d	38		sec				sec
.8a3e	80 01		bra $8a41			bra 	EncodeNumberContinue+1
.8a40					EncodeNumberContinue:
.8a40	18		clc				clc
.8a41					EncodeNumber:
.8a41	08		php				php 								; save reset.
.8a42	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8a44	f0 12		beq $8a58			beq 	_ENIsOkay
.8a46	c9 30		cmp #$30			cmp 	#"0"
.8a48	90 04		bcc $8a4e			bcc 	_ENBadNumber
.8a4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a4c	90 0a		bcc $8a58			bcc 	_ENIsOkay
.8a4e					_ENBadNumber:
.8a4e	28		plp				plp 								; throw saved reset
.8a4f	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8a52	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a54	f0 7e		beq $8ad4			beq 	_ENConstructFinal
.8a56					_ENFail:
.8a56	18		clc				clc 								; not allowed
.8a57	60		rts				rts
.8a58					_ENIsOkay:
.8a58	28		plp				plp 								; are we restarting
.8a59	90 15		bcc $8a70			bcc 	_ENNoRestart
.8a5b					_ENStartEncode:
.8a5b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8a5d	f0 0c		beq $8a6b			beq 	_ENFirstDP
.8a5f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8a61	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.8a64	a9 01		lda #$01			lda 	#ESTA_Low
.8a66					_ENExitChange:
.8a66	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8a69	38		sec				sec
.8a6a	60		rts				rts
.8a6b					_ENFirstDP:
.8a6b	20 33 8f	jsr $8f33			jsr 	NSMSetZero 					; clear integer part
.8a6e	80 3f		bra $8aaf			bra 	_ESTASwitchFloat			; go straight to float and exi
.8a70					_ENNoRestart:
.8a70	48		pha				pha 								; save on stack.
.8a71	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8a74	c9 01		cmp #$01			cmp 	#ESTA_Low
.8a76	f0 09		beq $8a81			beq  	_ESTALowState
.8a78	c9 02		cmp #$02			cmp 	#ESTA_High
.8a7a	f0 29		beq $8aa5			beq 	_ESTAHighState
.8a7c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a7e	f0 3b		beq $8abb			beq 	_ESTADecimalState
>8a80	db						.byte 	$DB 						; causes a break in the emulator
.8a81					_ESTALowState:
.8a81	68		pla				pla 								; get value back
.8a82	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8a84	f0 29		beq $8aaf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8a86	29 0f		and #$0f			and 	#15 						; make digit
.8a88	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8a8b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8a8e	0a		asl a				asl 	a
.8a8f	0a		asl a				asl 	a
.8a90	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a93	0a		asl a				asl 	a
.8a94	6d 06 07	adc $0706			adc 	DigitTemp
.8a97	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a9a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8a9c	90 05		bcc $8aa3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8a9e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8aa0	8d 05 07	sta $0705			sta 	EncodeState
.8aa3					_ESTANoSwitch:
.8aa3	38		sec				sec
.8aa4	60		rts				rts
.8aa5					_ESTAHighState:
.8aa5	68		pla				pla 								; get value back
.8aa6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8aa8	f0 05		beq $8aaf			beq 	_ESTASwitchFloat
.8aaa	20 0e 8b	jsr $8b0e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8aad	38		sec				sec
.8aae	60		rts				rts
.8aaf					_ESTASwitchFloat:
.8aaf	9c 07 07	stz $0707			stz 	DecimalCount
.8ab2	e8		inx				inx 								; zero the decimal additive.
.8ab3	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.8ab6	ca		dex				dex
.8ab7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8ab9	80 ab		bra $8a66			bra 	_ENExitChange
.8abb					_ESTADecimalState:
.8abb	68		pla				pla 								; digit.
.8abc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8abe	f0 96		beq $8a56			beq 	_ENFail
.8ac0	e8		inx				inx 								; put digit into fractional part of X+1
.8ac1	20 0e 8b	jsr $8b0e			jsr 	ESTAShiftDigitIntoMantissa
.8ac4	ca		dex				dex
.8ac5	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8ac8	ad 07 07	lda $0707			lda 	DecimalCount
.8acb	c9 0b		cmp #$0b			cmp 	#11
.8acd	f0 02		beq $8ad1			beq 	_ESTADSFail
.8acf	38		sec				sec
.8ad0	60		rts				rts
.8ad1					_ESTADSFail:
.8ad1	4c 89 99	jmp $9989			jmp 	RangeError
.8ad4					_ENConstructFinal:
.8ad4	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8ad7	f0 33		beq $8b0c			beq 	_ENCFExit 					; no decimals
.8ad9	5a		phy				phy
.8ada	0a		asl a				asl 	a 							; x 4 and CLC
.8adb	0a		asl a				asl 	a
.8adc	6d 07 07	adc $0707			adc 	DecimalCount
.8adf	a8		tay				tay
.8ae0	b9 48 99	lda $9948,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8ae3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ae6	b9 49 99	lda $9949,y			lda 	DecimalScalarTable-5+1,y
.8ae9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8aec	b9 4a 99	lda $994a,y			lda 	DecimalScalarTable-5+2,y
.8aef	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8af2	b9 4b 99	lda $994b,y			lda 	DecimalScalarTable-5+3,y
.8af5	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8af8	b9 4c 99	lda $994c,y			lda 	DecimalScalarTable-5+4,y
.8afb	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8afe	a9 08		lda #$08			lda 	#NSTFloat
.8b00	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b03	7a		ply				ply
.8b04	e8		inx				inx 								; multiply decimal const by decimal scalar
.8b05	20 fd 97	jsr $97fd			jsr 	FloatMultiply
.8b08	ca		dex				dex
.8b09	20 92 96	jsr $9692			jsr 	FloatAdd 					; add to integer part.
.8b0c					_ENCFExit:
.8b0c	18		clc				clc 								; reject the digit.
.8b0d	60		rts				rts
.8b0e					ESTAShiftDigitIntoMantissa:
.8b0e	29 0f		and #$0f			and 	#15 						; save digit
.8b10	48		pha				pha
.8b11	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8b14	48		pha				pha
.8b15	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8b18	48		pha				pha
.8b19	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b1c	48		pha				pha
.8b1d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b20	48		pha				pha
.8b21	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 2
.8b24	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 4
.8b27	18		clc				clc 								; pop mantissa and add
.8b28	68		pla				pla
.8b29	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b2c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b2f	68		pla				pla
.8b30	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8b33	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b36	68		pla				pla
.8b37	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8b3a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b3d	68		pla				pla
.8b3e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8b41	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8b44	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 10
.8b47	68		pla				pla 								; add digit
.8b48	18		clc				clc
.8b49	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b4c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b4f	90 0d		bcc $8b5e			bcc 	_ESTASDExit
.8b51	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8b54	d0 08		bne $8b5e			bne 	_ESTASDExit
.8b56	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8b59	d0 03		bne $8b5e			bne 	_ESTASDExit
.8b5b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8b5e					_ESTASDExit:
.8b5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8b5f					EvaluateTerm:
.8b5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b61	30 18		bmi $8b7b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8b63	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8b65	b0 6f		bcs $8bd6			bcs 	_ETVariable
.8b67	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8b69	90 6e		bcc $8bd9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8b6b	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b6d	b0 6a		bcs $8bd9			bcs 	_ETPuncUnary
.8b6f	20 3d 8a	jsr $8a3d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8b72					_ETNumber:
.8b72	c8		iny				iny 								; keep encoding until we have the numbers
.8b73	b1 30		lda ($30),y			lda 	(codePtr),y
.8b75	20 40 8a	jsr $8a40			jsr 	EncodeNumberContinue
.8b78	b0 f8		bcs $8b72			bcs 	_ETNumber 					; go back if accepted.
.8b7a	60		rts				rts
.8b7b					_ETCheckUnary:
.8b7b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8b7d	f0 41		beq $8bc0			beq 	_ETString
.8b7f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8b81	f0 12		beq $8b95			beq 	_ETHexConstant
.8b83	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8b85	90 0b		bcc $8b92			bcc 	_ETSyntaxError
.8b87	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8b89	b0 07		bcs $8b92			bcs 	_ETSyntaxError
.8b8b	da		phx				phx 								; push X on the stack
.8b8c	0a		asl a				asl 	a 							; put vector x 2 into X
.8b8d	aa		tax				tax
.8b8e	c8		iny				iny 								; consume unary function token
.8b8f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8b92					_ETSyntaxError:
.8b92	4c 84 99	jmp $9984			jmp 	SyntaxError
.8b95					_ETHexConstant:
.8b95	c8		iny				iny 								; skip #
.8b96	c8		iny				iny 								; skip count
.8b97	20 33 8f	jsr $8f33			jsr 	NSMSetZero 					; clear result
.8b9a					_ETHLoop:
.8b9a	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9c	c8		iny				iny 								; and consume
.8b9d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8b9f	f0 1e		beq $8bbf			beq 	_ETHExit
.8ba1	48		pha				pha 								; save on stack.
.8ba2	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 2
.8ba5	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 4
.8ba8	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 8
.8bab	20 48 8f	jsr $8f48			jsr 	NSMShiftLeft 				; x 16
.8bae	68		pla				pla 								; ASCII
.8baf	c9 41		cmp #$41			cmp 	#'A'
.8bb1	90 02		bcc $8bb5			bcc 	_ETHNotChar
.8bb3	e9 07		sbc #$07			sbc 	#7
.8bb5					_ETHNotChar:
.8bb5	29 0f		and #$0f			and 	#15 						; digit now
.8bb7	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8bba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bbd	80 db		bra $8b9a			bra 	_ETHLoop 					; go round.
.8bbf					_ETHExit:
.8bbf	60		rts				rts
.8bc0					_ETString:
.8bc0	c8		iny				iny 								; look at length
.8bc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc3	48		pha				pha
.8bc4	c8		iny				iny 								; first character
.8bc5	20 84 94	jsr $9484			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8bc8	68		pla				pla 								; restore count and save
.8bc9	85 36		sta $36				sta 	zTemp0
.8bcb	98		tya				tya 								; add length to Y to skip it.
.8bcc	18		clc				clc
.8bcd	65 36		adc $36				adc 	zTemp0
.8bcf	a8		tay				tay
.8bd0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8bd2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bd5	60		rts				rts
.8bd6					_ETVariable:
.8bd6	4c 30 8c	jmp $8c30			jmp 	VariableHandler
.8bd9					_ETPuncUnary:
.8bd9	c8		iny				iny 								; consume the unary character
.8bda	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8bdc	f0 2d		beq $8c0b			beq 	_ETUnaryNegate
.8bde	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8be0	f0 39		beq $8c1b			beq 	_ETDereference
.8be2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8be4	f0 43		beq $8c29			beq 	_ETParenthesis
.8be6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8be8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8bea	f0 06		beq $8bf2			beq 	_ETIndirection
.8bec	e6 36		inc $36				inc 	zTemp0
.8bee	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8bf0	d0 a0		bne $8b92			bne 	_ETSyntaxError
.8bf2					_ETIndirection:
.8bf2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8bf4	1a		inc a				inc 	a
.8bf5	48		pha				pha
.8bf6	20 5f 8b	jsr $8b5f			jsr 	EvaluateTerm				; evaluate the term
.8bf9	20 a3 89	jsr $89a3			jsr 	Dereference 				; dereference it.
.8bfc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8bff	d0 07		bne $8c08			bne 	_ETTypeMismatch
.8c01	68		pla				pla 								; indirection 1-2
.8c02	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8c04	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c07	60		rts				rts
.8c08					_ETTypeMismatch:
.8c08	4c 8e 99	jmp $998e			jmp 	TypeError
.8c0b					_ETUnaryNegate:
.8c0b	20 5f 8b	jsr $8b5f			jsr 	EvaluateTerm				; evaluate the term
.8c0e	20 a3 89	jsr $89a3			jsr 	Dereference 				; dereference it.
.8c11	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8c14	29 10		and #$10			and 	#NSTString
.8c16	d0 f0		bne $8c08			bne 	_ETTypeMismatch
.8c18	4c df 8e	jmp $8edf			jmp 	NSMNegate  					; just toggles the sign bit.
.8c1b					_ETDereference:
.8c1b	20 5f 8b	jsr $8b5f			jsr 	EvaluateTerm				; evaluate the term
.8c1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8c21	29 20		and #$20			and 	#NSBIsReference
.8c23	f0 e3		beq $8c08			beq 	_ETTypeMismatch
.8c25	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8c28	60		rts				rts
.8c29					_ETParenthesis:
.8c29	20 8e 88	jsr $888e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8c2c	20 cb 94	jsr $94cb			jsr 	CheckRightBracket 			; check for )
.8c2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8c30					VariableHandler:
.8c30	b1 30		lda ($30),y			lda 	(codePtr),y
.8c32	18		clc				clc
.8c33	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c35	85 37		sta $37				sta 	zTemp0+1
.8c37	c8		iny				iny
.8c38	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3a	85 36		sta $36				sta 	zTemp0
.8c3c	c8		iny				iny
.8c3d	18		clc				clc									; copy variable address+3 to mantissa
.8c3e	69 03		adc #$03			adc 	#3
.8c40	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c43	a5 37		lda $37				lda 	zTemp0+1
.8c45	69 00		adc #$00			adc 	#0
.8c47	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c4a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c4d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c50	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8c53	5a		phy				phy
.8c54	a0 02		ldy #$02			ldy 	#2 							; read type
.8c56	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c58	7a		ply				ply
.8c59	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8c5b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8c5d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c60	29 04		and #$04			and 	#NSBIsArray
.8c62	d0 01		bne $8c65			bne 	_VHArray
.8c64	60		rts				rts
.8c65					_VHArray:
>8c65	db						.byte 	$DB 						; causes a break in the emulator
.8c66	80 fd		bra $8c65			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9883					AbsUnary:
.9883	fa		plx				plx 								; restore stack pos
.9884	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; get a float or int
.9887	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.988a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.988d	29 7f		and #$7f			and 	#$7F
.988f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9892	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8c68					AllocUnary:
.8c68	fa		plx				plx 								; restore stack pos
.8c69	20 bf 8e	jsr $8ebf			jsr 	Evaluate16BitInteger		; get bytes required.
.8c6c	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.8c6f	da		phx				phx 								; save X/Y
.8c70	5a		phy				phy
.8c71	8a		txa				txa 								; copy X into Y
.8c72	a8		tay				tay
.8c73	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8c76	aa		tax				tax
.8c77	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8c7a	20 87 8c	jsr $8c87			jsr 	AllocateXABytes 			; allocate memory
.8c7d	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8c80	8a		txa				txa
.8c81	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8c84	7a		ply				ply
.8c85	fa		plx				plx
.8c86	60		rts				rts
.8c87					AllocateXABytes:
.8c87	5a		phy				phy
.8c88	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8c8b	5a		phy				phy
.8c8c	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8c8f	5a		phy				phy
.8c90	18		clc				clc
.8c91	6d 0c 07	adc $070c			adc 	lowMemPtr
.8c94	8d 0c 07	sta $070c			sta 	lowMemPtr
.8c97	8a		txa				txa
.8c98	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8c9b	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8c9e	fa		plx				plx
.8c9f	68		pla				pla
.8ca0	7a		ply				ply
.8ca1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9893					AscUnary:
.9893	fa		plx				plx 								; restore stack pos
.9894	20 92 8e	jsr $8e92			jsr 	EvaluateString 				; get a string
.9897	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9899	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.989c	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.989f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.98a0					FracUnary:
.98a0	fa		plx				plx 								; restore stack pos
.98a1	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; get a float or int
.98a4	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.98a7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98aa	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.98ac	f0 04		beq $98b2			beq 	_IUZero
.98ae	20 70 97	jsr $9770			jsr 	FloatFractionalPart
.98b1	60		rts				rts
.98b2					_IUZero:
.98b2	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.98b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.98b6					IntUnary:
.98b6	fa		plx				plx 								; restore stack pos
.98b7	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; get a float or int
.98ba	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.98bd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98c0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.98c2	f0 03		beq $98c7			beq 	_IUExit
.98c4	20 d3 97	jsr $97d3			jsr 	FloatIntegerPart
.98c7					_IUExit:
.98c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.98c8					LenUnary:
.98c8	fa		plx				plx 								; restore stack pos
.98c9	20 92 8e	jsr $8e92			jsr 	EvaluateString 				; get a string
.98cc	5a		phy				phy
.98cd	a0 00		ldy #$00			ldy 	#0 							; find length
.98cf					_LenFind:
.98cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d1	f0 06		beq $98d9			beq 	_LenExit
.98d3	c8		iny				iny
.98d4	d0 f9		bne $98cf			bne 	_LenFind
.98d6	4c 89 99	jmp $9989			jmp 	RangeError 					; string > 255
.98d9					_LenExit:
.98d9	98		tya				tya
.98da	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.98dd	7a		ply				ply
.98de	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.98e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8ca2					Unary_Not:
.8ca2	fa		plx				plx
.8ca3	20 aa 8e	jsr $8eaa			jsr 	EvaluateInteger 			; get integer
.8ca6	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.8ca9	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; zero mantissa ?
.8cac	f0 04		beq $8cb2			beq 	_NotZero
.8cae	20 33 8f	jsr $8f33			jsr 	NSMSetZero
.8cb1	60		rts				rts
.8cb2					_NotZero:
.8cb2	4c f2 84	jmp $84f2			jmp 	ReturnTrue
.8cb5					_UNBad:
.8cb5	4c 93 99	jmp $9993			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8cb8					Unary_Rnd:
.8cb8	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; number to use.
.8cbb	20 cb 94	jsr $94cb			jsr 	CheckRightBracket 			; closing bracket
.8cbe	20 e7 8c	jsr $8ce7			jsr 	Random32Bit 				; generate a number.
.8cc1	ad 08 07	lda $0708			lda 	RandomSeed+0
.8cc4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cc7	ad 09 07	lda $0709			lda 	RandomSeed+1
.8cca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ccd	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8cd0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cd3	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8cd6	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8cd8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cdb	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8cdd	8d 28 06	sta $0628			sta 	NSExponent
.8ce0	a9 08		lda #$08			lda 	#NSTFloat
.8ce2	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8ce5	db						.byte 	$DB 						; causes a break in the emulator
.8ce6	60		rts				rts
.8ce7					Random32Bit:
.8ce7	5a		phy				phy
.8ce8	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8cea	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ced	d0 03		bne $8cf2			bne 	_Random1
.8cef	a8		tay				tay 								; if so do it 256 times
.8cf0	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8cf2					_Random1:
.8cf2	0a		asl a				asl 	a 							; LSFR RNG
.8cf3	2e 09 07	rol $0709			rol 	RandomSeed+1
.8cf6	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8cf9	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8cfc	90 02		bcc $8d00			bcc 	_Random2
.8cfe	49 c5		eor #$c5			eor 	#$C5
.8d00					_Random2:
.8d00	88		dey				dey
.8d01	d0 ef		bne $8cf2			bne 	_Random1
.8d03	7a		ply				ply
.8d04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.98e2					SgnUnary:
.98e2	fa		plx				plx 								; restore stack pos
.98e3	20 87 8e	jsr $8e87			jsr 	EvaluateNumber 				; get a float or int
.98e6	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.98e9	20 63 8f	jsr $8f63			jsr 	NSMIsZero 					; if zero
.98ec	f0 10		beq $98fe			beq 	_SGZero  					; return Int Zero
.98ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.98f1	48		pha				pha
.98f2	a9 01		lda #$01			lda 	#1 							; set to 1
.98f4	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.98f7	68		pla				pla
.98f8	29 80		and #$80			and		#$80 						; copy the sign byte out
.98fa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98fd	60		rts				rts
.98fe	20 33 8f	jsr $8f33	_SGZero:jsr 	NSMSetZero
.9901	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9902					ValUnary:
.9902	fa		plx				plx 								; restore stack pos
.9903	20 18 99	jsr $9918			jsr 	ValMainCode 				; do the main val() code
.9906	b0 01		bcs $9909			bcs 	_VUError 					; couldn't convert
.9908	60		rts				rts
.9909					_VUError:
.9909	4c 8e 99	jmp $998e			jmp 	TypeError
.990c					IsValUnary:
.990c	fa		plx				plx 								; restore stack pos
.990d	20 18 99	jsr $9918			jsr 	ValMainCode 				; do the main val() code
.9910	b0 03		bcs $9915			bcs 	_VUBad
.9912	4c f2 84	jmp $84f2			jmp 	ReturnTrue
.9915					_VUBad:
.9915	4c fe 84	jmp $84fe			jmp 	ReturnFalse
.9918					ValMainCode:
.9918	20 92 8e	jsr $8e92			jsr 	EvaluateString 				; get a string
.991b	20 cb 94	jsr $94cb			jsr 	CheckRightBracket 			; check right bracket present
.991e	5a		phy				phy
.991f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9921	f0 17		beq $993a			beq 	_VMCFail2
.9923	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9925	48		pha				pha 								; save first character
.9926	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9928	d0 01		bne $992b			bne 	_VMCStart
.992a	c8		iny				iny 								; skip over -
.992b					_VMCStart:
.992b	38		sec				sec 								; initialise first time round.
.992c					_VMCNext:
.992c	c8		iny				iny 								; pre-increment
.992d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.992f	f0 0c		beq $993d			beq 	_VMCSuccess 				; successful.
.9931	20 41 8a	jsr $8a41			jsr 	EncodeNumber 				; send it to the number-builder
.9934	90 03		bcc $9939			bcc 	_VMCFail 					; if failed, give up.
.9936	18		clc				clc 								; next time round, countinue
.9937	80 f3		bra $992c			bra 	_VMCNext
.9939					_VMCFail:
.9939	68		pla				pla
.993a					_VMCFail2:
.993a	7a		ply				ply
.993b	38		sec				sec
.993c	60		rts				rts
.993d					_VMCSuccess:
.993d	a9 00		lda #$00			lda 	#0 							; construct final
.993f	20 41 8a	jsr $8a41			jsr 	EncodeNumber
.9942	68		pla				pla
.9943	c9 2d		cmp #$2d			cmp 	#"-"
.9945	d0 03		bne $994a			bne 	_VMCNotNegative
.9947	20 df 8e	jsr $8edf			jsr		NSMNegate
.994a					_VMCNotNegative:
.994a	7a		ply				ply
.994b	18		clc				clc
.994c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8d05					ChrUnary:
.8d05	fa		plx				plx 								; restore stack pos
.8d06	20 cb 8e	jsr $8ecb			jsr 	Evaluate8BitInteger			; get value
.8d09	48		pha				pha
.8d0a	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.8d0d	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8d0f	20 38 9b	jsr $9b38			jsr 	StringTempAllocate
.8d12	68		pla				pla 								; write number to it
.8d13	20 76 9b	jsr $9b76			jsr 	StringTempWrite
.8d16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8d17					SpcUnary:
.8d17	fa		plx				plx 								; restore stack pos
.8d18	20 cb 8e	jsr $8ecb			jsr 	Evaluate8BitInteger			; get value
.8d1b	5a		phy				phy
.8d1c	48		pha				pha 								; save count
.8d1d	20 38 9b	jsr $9b38			jsr 	StringTempAllocate
.8d20	7a		ply				ply 								; to do count in Y
.8d21					_SpcLoop:
.8d21	c0 00		cpy #$00			cpy 	#0
.8d23	f0 08		beq $8d2d			beq 	_SpcExit
.8d25	a9 20		lda #$20			lda 	#32
.8d27	20 76 9b	jsr $9b76			jsr 	StringTempWrite
.8d2a	88		dey				dey
.8d2b	80 f4		bra $8d21			bra 	_SPCLoop
.8d2d					_SpcExit:
.8d2d	7a		ply				ply
.8d2e	20 cb 94	jsr $94cb			jsr 	CheckRightBracket
.8d31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8d32					Unary_Str:
.8d32	fa		plx				plx
.8d33	20 87 8e	jsr $8e87			jsr 	EvaluateNumber  			; get number
.8d36	20 cb 94	jsr $94cb			jsr 	CheckRightBracket 			; closing bracket
.8d39	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8d3b	20 54 8d	jsr $8d54			jsr 	ConvertNumberToString 		; do the conversion.
.8d3e	a9 21		lda #$21			lda		#33 						; create buffer
.8d40	20 38 9b	jsr $9b38			jsr 	StringTempAllocate 			; allocate memory
.8d43	da		phx				phx
.8d44	a2 00		ldx #$00			ldx 	#0
.8d46					_USCopy:
.8d46	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d49	20 76 9b	jsr $9b76			jsr 	StringTempWrite
.8d4c	e8		inx				inx
.8d4d	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d50	d0 f4		bne $8d46			bne 	_USCopy
.8d52	fa		plx				plx
.8d53	60		rts				rts
.8d54					ConvertNumberToString:
.8d54	5a		phy				phy 								; save code position
.8d55	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8d58	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8d5b	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8d5e	10 0a		bpl $8d6a			bpl 	_CNTSNotNegative
.8d60	29 7f		and #$7f			and 	#$7F 						; make +ve
.8d62	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d65	a9 2d		lda #$2d			lda 	#"-"
.8d67	20 d0 8d	jsr $8dd0			jsr 	WriteDecimalBuffer
.8d6a					_CNTSNotNegative:
.8d6a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8d6d	f0 15		beq $8d84			beq 	_CNTSNotFloat
.8d6f	e8		inx				inx 								; round up
.8d70	a9 01		lda #$01			lda 	#1
.8d72	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.8d75	ca		dex				dex
.8d76	bd 28 06	lda $0628,x			lda		NSExponent,x
.8d79	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8d7c	a9 08		lda #$08			lda 	#NSTFloat
.8d7e	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d81	20 92 96	jsr $9692			jsr 	FloatAdd
.8d84					_CNTSNotFloat:
.8d84	20 b2 8d	jsr $8db2			jsr 	MakePlusTwoString
.8d87	20 70 97	jsr $9770			jsr 	FloatFractionalPart 		; get the fractional part
.8d8a	20 34 98	jsr $9834			jsr 	NSNormalise					; normalise , exit if zero
.8d8d	f0 21		beq $8db0			beq 	_CNTSExit
.8d8f	a9 2e		lda #$2e			lda 	#"."
.8d91	20 d0 8d	jsr $8dd0			jsr 	WriteDecimalBuffer 			; write decimal place
.8d94					_CNTSDecimal:
.8d94	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8d97	30 17		bmi $8db0			bmi 	_CNTSExit
.8d99	e8		inx				inx 								; x 10.0
.8d9a	a9 0a		lda #$0a			lda 	#10
.8d9c	20 35 8f	jsr $8f35			jsr 	NSMSetByte
.8d9f	a9 08		lda #$08			lda 	#NSTFloat
.8da1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8da4	ca		dex				dex
.8da5	20 fd 97	jsr $97fd			jsr 	FloatMultiply
.8da8	20 b2 8d	jsr $8db2			jsr 	MakePlusTwoString
.8dab	20 70 97	jsr $9770			jsr 	FloatFractionalPart 		; get the fractional part
.8dae	80 e4		bra $8d94			bra 	_CNTSDecimal 				; keep going.
.8db0					_CNTSExit:
.8db0	7a		ply				ply
.8db1	60		rts				rts
.8db2					MakePlusTwoString:
.8db2	da		phx				phx
.8db3	20 0a 8f	jsr $8f0a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8db6	e8		inx				inx 								; access it
.8db7	e8		inx				inx
.8db8	20 d3 97	jsr $97d3			jsr 	FloatIntegerPart 			; make it an integer
.8dbb	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8dbd	20 3c 96	jsr $963c			jsr 	ConvertInt32
.8dc0	a2 00		ldx #$00			ldx	 	#0
.8dc2					_MPTSCopy:
.8dc2	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8dc5	20 d0 8d	jsr $8dd0			jsr 	WriteDecimalBuffer
.8dc8	e8		inx				inx
.8dc9	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8dcc	d0 f4		bne $8dc2			bne 	_MPTSCopy
.8dce	fa		plx				plx
.8dcf	60		rts				rts
.8dd0					WriteDecimalBuffer:
.8dd0	da		phx				phx
.8dd1	ae 14 07	ldx $0714			ldx 	dbOffset
.8dd4	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8dd7	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8dda	ee 14 07	inc $0714			inc 	dbOffset
.8ddd	fa		plx				plx
.8dde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8ddf					Unary_Left:
.8ddf	fa		plx				plx
.8de0	18		clc				clc 								; only one parameter
.8de1	20 56 8e	jsr $8e56			jsr 	SubstringInitial 			; set up.
.8de4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8de7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8dea	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8ded	80 2c		bra $8e1b			bra 	SubstringMain
.8def					Unary_Right:
.8def	fa		plx				plx
.8df0	18		clc				clc 								; only one parameter
.8df1	20 56 8e	jsr $8e56			jsr 	SubstringInitial 			; set up.
.8df4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8df7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8dfa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8dfd	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e00	b0 02		bcs $8e04			bcs 	_URNotUnderflow
.8e02	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8e04					_URNotUnderFlow:
.8e04	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8e07	80 12		bra $8e1b			bra 	SubStringMain
.8e09					Unary_Mid:
.8e09	fa		plx				plx
.8e0a	38		sec				sec 								; two parameters
.8e0b	20 56 8e	jsr $8e56			jsr 	SubstringInitial 			; set up.
.8e0e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8e11	f0 05		beq $8e18			beq 	_UMError
.8e13	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8e16	80 03		bra $8e1b			bra 	SubStringMain
.8e18					_UMError:
.8e18	4c 93 99	jmp $9993			jmp 	ArgumentError
.8e1b					SubStringMain:
.8e1b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8e1e	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8e21	b0 2d		bcs $8e50			bcs 	_SSMNull 					; if so, return an empty string.
.8e23	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8e26	f0 28		beq $8e50			beq 	_SSMNull 					; return empty string.
.8e28	18		clc				clc 								; add the offset +1 to the address and
.8e29	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8e2c	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8e2f	85 36		sta $36				sta 	zTemp0
.8e31	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8e34	69 00		adc #$00			adc 	#0
.8e36	85 37		sta $37				sta 	zTemp0+1
.8e38					_SSMNoCarry:
.8e38	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8e3b	20 38 9b	jsr $9b38			jsr 	StringTempAllocate 			; allocate that many characters
.8e3e	5a		phy				phy 								; save Y
.8e3f	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8e41					_SSMCopy:
.8e41	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8e43	f0 09		beq $8e4e			beq 	_SSMEString 				; no more to copy
.8e45	20 76 9b	jsr $9b76			jsr 	StringTempWrite 			; and write it out.
.8e48	c8		iny				iny
.8e49	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8e4c	d0 f3		bne $8e41			bne 	_SSMCopy
.8e4e					_SSMEString:
.8e4e	7a		ply				ply
.8e4f					_SSMExit:
.8e4f	60		rts				rts
.8e50					_SSMNull:
.8e50	a9 00		lda #$00			lda 	#0
.8e52	20 38 9b	jsr $9b38			jsr 	StringTempAllocate
.8e55	60		rts				rts
.8e56					SubstringInitial:
.8e56	da		phx				phx 								; save initial stack position
.8e57	08		php				php 								; save carry on stack indicating 2 parameters
.8e58	20 92 8e	jsr $8e92			jsr 	EvaluateString 				; get a string
.8e5b	5a		phy				phy 								; calculate length to exponent.
.8e5c	a0 ff		ldy #$ff			ldy 	#$FF
.8e5e					_SIFindLength:
.8e5e	c8		iny				iny
.8e5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e61	d0 fb		bne $8e5e			bne 	_SIFindLength
.8e63	98		tya				tya
.8e64	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e67	7a		ply				ply
.8e68	e8		inx				inx
.8e69	20 d3 94	jsr $94d3			jsr 	CheckComma 					; comma next
.8e6c	20 cb 8e	jsr $8ecb			jsr 	Evaluate8BitInteger 		; get next parameter
.8e6f	28		plp				plp 								; is it the last parameter ?
.8e70	90 07		bcc $8e79			bcc 	_SSIExit 					; if so, exit.
.8e72	e8		inx				inx
.8e73	20 d3 94	jsr $94d3			jsr 	CheckComma 					; comma next
.8e76	20 cb 8e	jsr $8ecb			jsr 	Evaluate8BitInteger 		; get last parameter
.8e79					_SSIExit:
.8e79	fa		plx				plx
.8e7a	20 cb 94	jsr $94cb			jsr 	CheckRightBracket 			; check closing bracket
.8e7d	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8e7e					EvaluateValue:
.8e7e	48		pha				pha
.8e7f	20 8e 88	jsr $888e			jsr		EvaluateExpression 			; expression
.8e82	20 a3 89	jsr $89a3			jsr 	Dereference					; derefernce it
.8e85	68		pla				pla
.8e86	60		rts				rts
.8e87					EvaluateNumber:
.8e87	20 7e 8e	jsr $8e7e			jsr 	EvaluateValue 				; get a value
.8e8a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e8d	29 10		and #$10			and 	#NSBIsString
.8e8f	d0 16		bne $8ea7			bne 	HelperTypeError
.8e91	60		rts				rts
.8e92					EvaluateString:
.8e92	20 7e 8e	jsr $8e7e			jsr 	EvaluateValue 				; get a value
.8e95	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e98	29 10		and #$10			and 	#NSBIsString
.8e9a	f0 0b		beq $8ea7			beq 	HelperTypeError
.8e9c					CopyAddressToTemp0:
.8e9c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8e9f	85 36		sta $36				sta 	zTemp0
.8ea1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ea4	85 37		sta $37				sta 	zTemp0+1
.8ea6	60		rts				rts
.8ea7					HelperTypeError:
.8ea7	4c 8e 99	jmp $998e			jmp 	TypeError
.8eaa					EvaluateInteger:
.8eaa	20 87 8e	jsr $8e87			jsr 	EvaluateNumber
.8ead	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8eb0	d0 0a		bne $8ebc			bne 	HelperValueError 			; if not, it's a float.
.8eb2	60		rts				rts
.8eb3					EvaluateUnsignedInteger:
.8eb3	20 aa 8e	jsr $8eaa			jsr 	EvaluateInteger 			; check integer is +ve
.8eb6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8eb9	30 01		bmi $8ebc			bmi 	HelperValueError
.8ebb	60		rts				rts
.8ebc					HelperValueError:
.8ebc	4c 93 99	jmp $9993			jmp 	ArgumentError
.8ebf					Evaluate16BitInteger:
.8ebf	20 b3 8e	jsr $8eb3			jsr	 	EvaluateUnsignedInteger		; get integer
.8ec2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8ec5	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ec8	d0 f2		bne $8ebc			bne 	HelperValueError
.8eca	60		rts				rts
.8ecb					Evaluate8BitInteger:
.8ecb	20 b3 8e	jsr $8eb3			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8ece	d0 ec		bne $8ebc			bne 	HelperValueError
.8ed0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8ed3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ed6	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ed9	d0 e1		bne $8ebc			bne 	HelperValueError
.8edb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ede	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8edf					NSMNegate:
.8edf	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ee2	49 80		eor #$80			eor 	#NSBIsNegative
.8ee4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ee7	60		rts				rts
.8ee8					NSMNegateMantissa:
.8ee8	38		sec				sec
.8ee9	a9 00		lda #$00			lda 	#0
.8eeb	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8eee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef1	a9 00		lda #$00			lda 	#0
.8ef3	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8ef6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ef9	a9 00		lda #$00			lda 	#0
.8efb	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8efe	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f01	a9 00		lda #$00			lda 	#0
.8f03	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8f06	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f09	60		rts				rts
.8f0a					NSMShiftUpTwo:
.8f0a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f0d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f10	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f13	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8f16	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8f19	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8f1c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f1f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8f22	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8f25	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8f28	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f2b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8f2e	60		rts				rts
.8f2f					NSMSetZeroMantissaOnly:
.8f2f	a9 00		lda #$00			lda 	#0
.8f31	80 08		bra $8f3b			bra 	NSMSetMantissa
.8f33					NSMSetZero:
.8f33	a9 00		lda #$00			lda 	#0
.8f35					NSMSetByte:
.8f35	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8f38	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8f3b					NSMSetMantissa:
.8f3b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8f3e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8f41	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8f44	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8f47	60		rts				rts
.8f48					NSMShiftLeft:
.8f48	18		clc				clc
.8f49					NSMRotateLeft:
.8f49	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8f4c	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8f4f	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8f52	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8f55	60		rts				rts
.8f56					NSMShiftRight:
.8f56	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8f59	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8f5c	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8f5f	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8f62	60		rts				rts
.8f63					NSMIsZero:
.8f63	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f66	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8f69	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8f6c	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8f6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.994d					DecimalScalarTable:
>994d	66 66 66 66				.dword $66666666 ; 0.1
>9951	de					.byte $de
>9952	1f 85 eb 51				.dword $51eb851f ; 0.01
>9956	db					.byte $db
>9957	4c 37 89 41				.dword $4189374c ; 0.001
>995b	d8					.byte $d8
>995c	ac 8b db 68				.dword $68db8bac ; 0.0001
>9960	d4					.byte $d4
>9961	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9965	d1					.byte $d1
>9966	83 de 1b 43				.dword $431bde83 ; 1e-06
>996a	ce					.byte $ce
>996b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>996f	ca					.byte $ca
>9970	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9974	c7					.byte $c7
>9975	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9979	c4					.byte $c4
>997a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>997e	c0					.byte $c0
>997f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9983	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9984					SyntaxError:
.9984	a9 02		lda #$02		lda	#2
.9986	4c 8c 84	jmp $848c		jmp	ErrorHandler
.9989					RangeError:
.9989	a9 04		lda #$04		lda	#4
.998b	4c 8c 84	jmp $848c		jmp	ErrorHandler
.998e					TypeError:
.998e	a9 05		lda #$05		lda	#5
.9990	4c 8c 84	jmp $848c		jmp	ErrorHandler
.9993					ArgumentError:
.9993	a9 07		lda #$07		lda	#7
.9995	4c 8c 84	jmp $848c		jmp	ErrorHandler
.9998					NotDoneError:
.9998	a9 0c		lda #$0c		lda	#12
.999a	4c 8c 84	jmp $848c		jmp	ErrorHandler
.999d					ErrorText:
>999d	42 72 65 61 6b 00			.text	"Break",0
>99a3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>99ab	72 72 6f 72 00
>99b0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>99b8	20 62 79 20 7a 65 72 6f 00
>99c1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>99c9	61 6e 67 65 00
>99ce	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>99d6	6d 61 74 63 68 00
>99dc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>99e4	65 6d 6f 72 79 00
>99ea	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>99f2	61 72 67 75 6d 65 6e 74 00
>99fb	53 74 6f 70 00				.text	"Stop",0
>9a00	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9a08	6f 6f 20 6c 6f 6e 67 00
>9a10	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9a18	6e 20 66 61 69 6c 65 64 00
>9a21	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9a29	61 74 61 00
>9a2d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9a35	65 6e 74 65 64 00
>9a3b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9a43	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9a4f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9a57	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9a64	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9a6c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9a79	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9a81	68 6f 75 74 20 57 68 69 6c 65 00
>9a8c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9a94	68 6f 75 74 20 46 6f 72 00
>9a9d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9aa5	61 63 6b 20 66 75 6c 6c 00
>9aae	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9ab6	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8f70					StackOpen:
.8f70	48		pha				pha 								; save frame byte
.8f71	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8f73	0a		asl a				asl 	a 							; claim twice this for storage
.8f74	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8f76	38		sec				sec 								; so basically subtracting from
.8f77	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8f79	85 34		sta $34				sta 	basicStack
.8f7b	b0 08		bcs $8f85			bcs 	_SONoBorrow
.8f7d	c6 35		dec $35				dec 	basicStack+1
.8f7f	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8f81	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8f83	90 04		bcc $8f89			bcc 	_SOMemory
.8f85					_SONoBorrow:
.8f85	68		pla				pla 								; get marker back and write at TOS
.8f86	92 34		sta ($34)			sta 	(basicStack)
.8f88	60		rts				rts
.8f89					_SOMemory:
.8f89							ERR_STACK
.8f89					StackClose:
.8f89	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8f8b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8f8d	0a		asl a				asl 	a 							; claim twice this.
.8f8e	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8f90	85 34		sta $34				sta 	basicStack
.8f92	90 02		bcc $8f96			bcc 	_SCExit
.8f94	e6 35		inc $35				inc 	basicStack+1
.8f96					_SCExit:
.8f96	60		rts				rts
.8f97					StackCheckFrame:
.8f97	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8f99	29 f0		and #$f0			and 	#$F0 						; check type bits
.8f9b	d0 01		bne $8f9e			bne 	_SCFError 					; different, we have structures mixed up
.8f9d	60		rts				rts
.8f9e					_SCFError:
.8f9e	8a		txa				txa 								; report error X
.8f9f	4c 8c 84	jmp $848c			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8fa2					STKSaveCodePosition:
.8fa2	5a		phy				phy
.8fa3	98		tya				tya 								; save Y
.8fa4	a0 05		ldy #$05			ldy 	#5
.8fa6	91 34		sta ($34),y			sta 	(basicStack),y
.8fa8	88		dey				dey 								; save Code Pointer
.8fa9					_STKSaveLoop:
.8fa9	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8fac	91 34		sta ($34),y			sta 	(basicStack),y
.8fae	88		dey				dey
.8faf	d0 f8		bne $8fa9			bne 	_STKSaveLoop
.8fb1	7a		ply				ply
.8fb2	60		rts				rts
.8fb3					STKLoadCodePosition:
.8fb3	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8fb5					_STKLoadLoop:
.8fb5	b1 34		lda ($34),y			lda 	(basicStack),y
.8fb7	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8fba	c8		iny				iny
.8fbb	c0 05		cpy #$05			cpy 	#5
.8fbd	d0 f6		bne $8fb5			bne 	_STKLoadLoop
.8fbf	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8fc1	a8		tay				tay
.8fc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8fc3					StackReset:
.8fc3	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8fc5	85 34		sta $34				sta 	0+basicStack
.8fc7	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8fc9	85 35		sta $35				sta 	1+basicStack
.8fcb	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8fcd	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8fcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9abd					StringConcrete:
.9abd	5a		phy				phy 								; save position on stack
.9abe	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9ac1	85 38		sta $38				sta 	zTemp1
.9ac3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9ac6	85 39		sta $39				sta 	zTemp1+1
.9ac8	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9aca					_SALength:
.9aca	c8		iny				iny
.9acb	b1 38		lda ($38),y			lda 	(zTemp1),y
.9acd	d0 fb		bne $9aca			bne 	_SALength
.9acf	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9ad1	b0 3f		bcs $9b12			bcs 	_SALengthError
.9ad3	98		tya				tya 				 				; length of the new string
.9ad4	18		clc				clc
.9ad5	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9ad7	90 02		bcc $9adb			bcc 	_SAHaveLength
.9ad9	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9adb					_SAHaveLength:
.9adb	48		pha				pha 								; save length.
.9adc	38		sec				sec
.9add	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9adf	6d 0e 07	adc $070e			adc 	StringMemory
.9ae2	8d 0e 07	sta $070e			sta 	StringMemory
.9ae5	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9ae7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9aea	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9aec	6d 0f 07	adc $070f			adc 	StringMemory+1
.9aef	8d 0f 07	sta $070f			sta 	StringMemory+1
.9af2	85 3b		sta $3b				sta 	zTemp2+1
.9af4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9af7	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9af8	38		sec				sec
.9af9	e9 03		sbc #$03			sbc 	#3
.9afb	92 3a		sta ($3a)			sta 	(zTemp2)
.9afd	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9aff	a0 01		ldy #$01			ldy 	#1
.9b01	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b03					_SACopyNewString:
.9b03	a0 00		ldy #$00			ldy 	#0
.9b05					_SACopyNSLoop:
.9b05	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9b07	c8		iny				iny 								; write two on in string storage
.9b08	c8		iny				iny
.9b09	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b0b	88		dey				dey 								; this makes it one one.
.9b0c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9b0e	d0 f5		bne $9b05			bne 	_SACopyNSLoop
.9b10	7a		ply				ply
.9b11	60		rts				rts
.9b12					_SALengthError:
.9b12	a9 09		lda #$09		lda	#9
.9b14	4c 8c 84	jmp $848c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9b17					StringSystemInitialise:
.9b17	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9b19	8d 0e 07	sta $070e			sta 	0+StringMemory
.9b1c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9b1e	8d 0f 07	sta $070f			sta 	1+StringMemory
.9b21	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9b24	60		rts				rts
.9b25					StringSpaceInitialise:
.9b25	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9b27	8d 10 07	sta $0710			sta 	StringInitialised
.9b2a	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9b2d	8d 11 07	sta $0711			sta 	StringTempPointer
.9b30	ad 0f 07	lda $070f			lda 	StringMemory+1
.9b33	3a		dec a				dec 	a
.9b34	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9b37	60		rts				rts
.9b38					StringTempAllocate:
.9b38	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9b3a	b0 35		bcs $9b71			bcs 	_STALength
.9b3c	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9b3f	30 05		bmi $9b46			bmi 	_STAAllocate
.9b41	48		pha				pha 								; save value to subtract.
.9b42	20 25 9b	jsr $9b25			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9b45	68		pla				pla 								; restore it
.9b46					_STAAllocate:
.9b46	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9b48	18		clc				clc  								; deliberate allows one more
.9b49	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9b4c	8d 11 07	sta $0711			sta 	StringTempPointer
.9b4f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9b52	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9b54	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9b57	69 ff		adc #$ff			adc 	#$FF
.9b59	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9b5c	85 3d		sta $3d				sta 	zsTemp+1
.9b5e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b61	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9b64	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9b67	a9 10		lda #$10			lda 	#NSTString
.9b69	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b6c	a9 00		lda #$00			lda 	#0 							; clear the target string
.9b6e	92 3c		sta ($3c)			sta 	(zsTemp)
.9b70	60		rts				rts
.9b71					_STALength:
.9b71	a9 09		lda #$09		lda	#9
.9b73	4c 8c 84	jmp $848c		jmp	ErrorHandler
.9b76					StringTempWrite:
.9b76	48		pha				pha
.9b77	92 3c		sta ($3c)			sta 	(zsTemp)
.9b79	e6 3c		inc $3c				inc 	zsTemp
.9b7b	d0 02		bne $9b7f			bne 	_STWNoCarry
.9b7d	e6 3d		inc $3d				inc 	zsTemp+1
.9b7f					_STWNoCarry:
.9b7f	a9 00		lda #$00			lda 	#0
.9b81	92 3c		sta ($3c)			sta 	(zsTemp)
.9b83	68		pla				pla
.9b84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8fd0					BackloadProgram:
.8fd0	a2 ff		ldx #$ff			ldx 	#$FF
.8fd2	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8fd5	20 ff 8f	jsr $8fff			jsr 	BLReadByte
.8fd8	30 1e		bmi $8ff8			bmi 	_BPExit
.8fda					_BPCopy:
.8fda	e8		inx				inx  								; copy byte in
.8fdb	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8fde	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8fe1	20 ff 8f	jsr $8fff			jsr 	BLReadByte 					; read next byte
.8fe4	30 0a		bmi $8ff0			bmi 	_BPEndLine 					; -ve = EOL
.8fe6	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8fe8	d0 02		bne $8fec			bne 	_BPNotTab
.8fea	a9 20		lda #$20			lda 	#' '
.8fec					_BPNotTab:
.8fec	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8fee	b0 ea		bcs $8fda			bcs 	_BPCopy
.8ff0					_BPEndLine:
.8ff0	20 c9 91	jsr $91c9			jsr 	TokeniseLine 				; tokenise the line.
.8ff3	20 55 94	jsr $9455			jsr 	MemoryAppend 				; append to current program
.8ff6	80 d8		bra $8fd0			bra 	BackloadProgram
.8ff8					_BPExit:
.8ff8	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8ffb	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.8ffe	60		rts				rts
.8fff					BLReadByte:
.8fff					_BLLoad:
.8fff	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9002	ee 00 90	inc $9000			inc 	_BLLoad+1
.9005	d0 03		bne $900a			bne 	_BLNoCarry
.9007	ee 01 90	inc $9001			inc 	_BLLoad+2
.900a					_BLNoCarry:
.900a	c9 00		cmp #$00			cmp 	#0
.900c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.900d					TokeniseSearchTable:
.900d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.900f	85 36		sta $36				sta 	zTemp0
.9011	a0 00		ldy #$00			ldy 	#0
.9013	a9 80		lda #$80			lda 	#$80 						; token #
.9015	85 38		sta $38				sta 	zTemp1
.9017					_TSTLoop:
.9017	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9019	30 49		bmi $9064			bmi 	_TSTFail 					; -ve = end of table
.901b	f0 2e		beq $904b			beq 	_TSTNext 					; zero, check next it's a dummy
.901d	c8		iny				iny 								; get the hash
.901e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9020	88		dey				dey
.9021	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9024	d0 25		bne $904b			bne 	_TSTNext
.9026	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9029	38		sec				sec
.902a	ed 00 07	sbc $0700			sbc 	identStart
.902d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.902f	d0 1a		bne $904b			bne 	_TSTNext
.9031	5a		phy				phy 								; save Y , we might fail
.9032	c8		iny				iny 								; point to text
.9033	c8		iny				iny
.9034	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9037					_TSTCompareName:
.9037	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.903a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.903c	d0 0c		bne $904a			bne 	_TSTNextPullY 				; fail, pullY and do next
.903e	e8		inx				inx
.903f	c8		iny				iny
.9040	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9043	d0 f2		bne $9037			bne 	_TSTCompareName
.9045	7a		ply				ply 								; throw Y
.9046	a5 38		lda $38				lda 	zTemp1 						; get token #
.9048	38		sec				sec 								; return with CS = passed.
.9049	60		rts				rts
.904a					_TSTNextPullY:
.904a	7a		ply				ply 								; restore current, fall through.
.904b					_TSTNext:
.904b	e6 38		inc $38				inc 	zTemp1 						; token counter
.904d	98		tya				tya
.904e	18		clc				clc
.904f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9051	1a		inc a				inc 	a 							; +1
.9052	1a		inc a				inc 	a 							; +2
.9053	a8		tay				tay
.9054	10 c1		bpl $9017			bpl 	_TSTLoop 					; if Y < $80 loop back
.9056	98		tya				tya 								; add Y to zTemp0 and reset Y
.9057	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9059	18		clc				clc  								; but have tables > 255 bytes
.905a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.905c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.905e	90 b7		bcc $9017			bcc 	_TSTLoop
.9060	e6 37		inc $37				inc 	zTemp0+1
.9062	80 b3		bra $9017			bra 	_TSTLoop
.9064					_TSTFail:
.9064	18		clc				clc
.9065	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9066					KeywordSet0:
>9066	00 65					.text	0,$65,""               ; $80 !0:EOF
>9068	00 58					.text	0,$58,""               ; $81 !1:SH1
>906a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>906c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9072	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>907a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9080	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9087	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>908e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9095	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>909b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>90a3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>90ab	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>90b1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>90b8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>90be	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>90c6	28
>90c7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>90cd	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>90d3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>90d9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>90e0	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>90e6	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>90ec	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>90f1	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>90f5	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>90fb	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9103	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>910a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9111	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9119	43
>911a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9120	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9126	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>912d	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9133	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9139	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>913e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9144	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9149	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9151	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9157	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>915e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9164	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9169	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9170	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9176	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>917b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9183	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9187	ff					.text	$FF
.9188					KeywordSet1:
>9188	00 65					.text	0,$65,""               ; $80 !0:EOF
>918a	00 58					.text	0,$58,""               ; $81 !1:SH1
>918c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>918e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9196	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>919d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>91a2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>91a8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>91ad	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>91b5	45
>91b6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>91bb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>91c1	ff					.text	$FF
.91c2					KeywordSet2:
>91c2	00 65					.text	0,$65,""               ; $80 !0:EOF
>91c4	00 58					.text	0,$58,""               ; $81 !1:SH1
>91c6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>91c8	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.91c9					TokeniseLine:
.91c9	20 51 93	jsr $9351			jsr 	FixLineBufferCase 			; fix line case
.91cc	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.91ce	8d 15 07	sta $0715			sta 	tokenOffset
.91d1	9c 16 07	stz $0716			stz 	tokenLineNumber
.91d4	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.91d7	a2 ff		ldx #$ff			ldx 	#$FF
.91d9					_TKFindFirst:
.91d9	e8		inx				inx
.91da	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.91dd	f0 79		beq $9258			beq 	_TKExit
.91df	c9 20		cmp #$20			cmp 	#' '
.91e1	90 f6		bcc $91d9			bcc 	_TKFindFirst
.91e3	c9 30		cmp #$30			cmp 	#'0'
.91e5	90 07		bcc $91ee			bcc 	_TKNoLineNumber
.91e7	c9 3a		cmp #$3a			cmp 	#'9'+1
.91e9	b0 03		bcs $91ee			bcs 	_TKNoLineNumber
.91eb	20 7b 93	jsr $937b			jsr 	TokeniseExtractLineNumber
.91ee					_TKNoLineNumber:
.91ee					_TKTokeniseLoop:
.91ee	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.91f1	f0 65		beq $9258			beq 	_TKExit
.91f3	e8		inx				inx
.91f4	c9 20		cmp #$20			cmp 	#' '
.91f6	f0 f6		beq $91ee			beq 	_TKTokeniseLoop 			; keep looping if space found.
.91f8	ca		dex				dex 								; undo last get, A contains character, X is position.
.91f9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.91fb	f0 61		beq $925e			beq 	_TKTokeniseIdentifier
.91fd	c9 41		cmp #$41			cmp 	#'A'
.91ff	90 04		bcc $9205			bcc 	_TKTokenisePunctuation
.9201	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9203	90 59		bcc $925e			bcc 	_TKTokeniseIdentifier
.9205					_TKTokenisePunctuation:
.9205	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9207	f0 27		beq $9230			beq 	_TKString
.9209	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.920b	f0 28		beq $9235			beq 	_TKHexConstant
.920d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.920f	f0 29		beq $923a			beq 	_TKCheckDouble
.9211	c9 3e		cmp #$3e			cmp 	#'>'
.9213	f0 25		beq $923a			beq 	_TKCheckDouble
.9215					_TKStandardPunctuation:
.9215	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9218	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.921a	90 0e		bcc $922a			bcc 	_TKNoShift
.921c	48		pha				pha 								; save
.921d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.921f	85 36		sta $36				sta 	zTemp0
.9221	68		pla				pla
.9222	29 20		and #$20			and 	#32 						; bit 5
.9224	4a		lsr a				lsr 	a 							; shift into bit 3
.9225	4a		lsr a				lsr 	a
.9226	05 36		ora $36				ora 	zTemp0
.9228	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.922a					_TKNoShift:
.922a	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte 			; write the punctuation character
.922d	e8		inx				inx 								; consume the character
.922e	80 be		bra $91ee			bra 	_TKTokeniseLoop 			; and loop round again.
.9230					_TKString:
.9230	20 e0 92	jsr $92e0			jsr 	TokeniseString
.9233	80 b9		bra $91ee			bra 	_TKTokeniseLoop
.9235					_TKHexConstant:
.9235	20 1b 93	jsr $931b			jsr 	TokeniseHexConstant
.9238	80 b4		bra $91ee			bra 	_TKTokeniseLoop
.923a					_TKCheckDouble:
.923a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.923d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.923f	90 d4		bcc $9215			bcc 	_TKStandardPunctuation
.9241	c9 3f		cmp #$3f			cmp 	#'>'+1
.9243	b0 d0		bcs $9215			bcs 	_TKStandardPunctuation
.9245	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9248	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.924a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.924b	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.924e	38		sec				sec
.924f	e9 3c		sbc #$3c			sbc 	#'<'
.9251	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9254	e8		inx				inx 								; consume both
.9255	e8		inx				inx
.9256	80 96		bra $91ee			bra 	_TKTokeniseLoop
.9258	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.925a	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.925d	60		rts				rts
.925e					_TKTokeniseIdentifier:
.925e	8e 00 07	stx $0700			stx 	identStart 					; save start
.9261	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9264					_TKCheckLoop:
.9264	e8		inx				inx 								; look at next, we know first is identifier.
.9265	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9268	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.926a	f0 f8		beq $9264			beq 	_TKCheckLoop
.926c	c9 30		cmp #$30			cmp	 	#"0"
.926e	90 0c		bcc $927c			bcc 	_TKEndIdentifier
.9270	c9 3a		cmp #$3a			cmp 	#"9"+1
.9272	90 f0		bcc $9264			bcc 	_TKCheckLoop
.9274	c9 41		cmp #$41			cmp	 	#"A"
.9276	90 04		bcc $927c			bcc 	_TKEndIdentifier
.9278	c9 5b		cmp #$5b			cmp 	#"Z"+1
.927a	90 e8		bcc $9264			bcc 	_TKCheckLoop
.927c					_TKEndIdentifier:
.927c	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.927f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9281	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9283	f0 06		beq $928b			beq 	_TKHasTypeCharacter
.9285	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9287	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9289	d0 07		bne $9292			bne 	_TKNoTypeCharacter
.928b					_TKHasTypeCharacter:
.928b	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.928e	e8		inx				inx 								; read next
.928f	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9292					_TKNoTypeCharacter:
.9292	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9294	d0 09		bne $929f			bne 	_TKNoArray
.9296	e8		inx				inx 								; skip the (
.9297	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.929a	09 04		ora #$04			ora 	#$04
.929c	8d 04 07	sta $0704			sta 	identTypeByte
.929f					_TKNoArray:
.929f	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.92a2	20 3c 93	jsr $933c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.92a5	a0 90		ldy #$90			ldy 	#(KeywordSet0) >> 8
.92a7	a9 66		lda #$66			lda 	#(KeywordSet0) & $FF
.92a9	20 0d 90	jsr $900d			jsr 	TokeniseSearchTable
.92ac	a2 00		ldx #$00			ldx 	#0
.92ae	b0 1f		bcs $92cf			bcs 	_TKFoundToken
.92b0	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.92b2	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.92b4	20 0d 90	jsr $900d			jsr 	TokeniseSearchTable
.92b7	a2 81		ldx #$81			ldx 	#$81
.92b9	b0 14		bcs $92cf			bcs 	_TKFoundToken
.92bb	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.92bd	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.92bf	20 0d 90	jsr $900d			jsr 	TokeniseSearchTable
.92c2	a2 82		ldx #$82			ldx 	#$82
.92c4	b0 09		bcs $92cf			bcs 	_TKFoundToken
.92c6	20 cc 93	jsr $93cc			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.92c9	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.92cc	4c ee 91	jmp $91ee			jmp 	_TKTokeniseLoop 			; and go round again.
.92cf					_TKFoundToken:
.92cf	48		pha				pha 								; save token
.92d0	8a		txa				txa 								; shift in X, is there one ?
.92d1	f0 03		beq $92d6			beq 	_TKNoTShift
.92d3	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte 			; if so, write it out
.92d6					_TKNoTShift:
.92d6	68		pla				pla 								; restore and write token
.92d7	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.92da	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.92dd	4c ee 91	jmp $91ee			jmp 	_TKTokeniseLoop 			; and go round again.
.92e0					TokeniseString:
.92e0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.92e2	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.92e5	e8		inx				inx									; start of quoted string.
.92e6	da		phx				phx 								; push start of string on top
.92e7	ca		dex				dex
.92e8					_TSFindEnd:
.92e8	e8		inx				inx
.92e9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.92ec	f0 04		beq $92f2			beq 	_TSEndOfString
.92ee	c9 22		cmp #$22			cmp 	#'"'
.92f0	d0 f6		bne $92e8			bne 	_TSFindEnd
.92f2					_TSEndOfString:
.92f2	7a		ply				ply  								; so now Y is first character, X is character after end.
.92f3	48		pha				pha 								; save terminating character
.92f4	20 fc 92	jsr $92fc			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.92f7	68		pla				pla 								; terminating character
.92f8	f0 01		beq $92fb			beq 	_TSNotQuote					; if it wasn't EOS skip it
.92fa	e8		inx				inx
.92fb					_TSNotQuote:
.92fb	60		rts				rts
.92fc					TOWriteBlockXY:
.92fc	86 36		stx $36				stx 	zTemp0 						; write end character
.92fe	98		tya				tya
.92ff	49 ff		eor #$ff			eor 	#$FF
.9301	38		sec				sec
.9302	65 36		adc $36				adc 	zTemp0
.9304	1a		inc a				inc 	a 							; one extra for NULL
.9305	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.9308					_TOBlockLoop:
.9308	c4 36		cpy $36				cpy 	zTemp0
.930a	f0 09		beq $9315			beq 	_TOBlockExit
.930c	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.930f	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.9312	c8		iny				iny
.9313	80 f3		bra $9308			bra 	_TOBlockLoop
.9315					_TOBlockExit:
.9315	a9 00		lda #$00			lda 	#0
.9317	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.931a	60		rts				rts
.931b					TokeniseHexConstant:
.931b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.931d	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.9320	e8		inx				inx									; start of quoted string.
.9321	da		phx				phx 								; push start of constant on top
.9322	ca		dex				dex
.9323					_THFindLoop:
.9323	e8		inx				inx
.9324	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9327	c9 30		cmp #$30			cmp 	#"0"
.9329	90 0c		bcc $9337			bcc 	_THFoundEnd
.932b	c9 3a		cmp #$3a			cmp 	#"9"+1
.932d	90 f4		bcc $9323			bcc 	_THFindLoop
.932f	c9 41		cmp #$41			cmp 	#"A"
.9331	90 04		bcc $9337			bcc 	_THFoundEnd
.9333	c9 47		cmp #$47			cmp 	#"F"+1
.9335	90 ec		bcc $9323			bcc 	_THFindLoop
.9337					_THFoundEnd:
.9337	7a		ply				ply 								; restore start
.9338	20 fc 92	jsr $92fc			jsr 	TOWriteBlockXY 				; output the block
.933b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.933c					TokeniseCalculateHash:
.933c	da		phx				phx
.933d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9340	a9 00		lda #$00			lda 	#0
.9342					_TCHLoop:
.9342	18		clc				clc
.9343	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9346	e8		inx				inx
.9347	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.934a	d0 f6		bne $9342			bne 	_TCHLoop
.934c	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.934f	fa		plx				plx
.9350	60		rts				rts
.9351					FixLineBufferCase:
.9351	a2 00		ldx #$00			ldx 	#0
.9353					_FLBCLoop:
.9353	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9356	f0 22		beq $937a			beq 	_FLBCExit 					; end of string.
.9358	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.935a	f0 11		beq $936d			beq 	_FLBCInQuotes
.935c	e8		inx				inx
.935d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.935f	90 f2		bcc $9353			bcc 	_FLBCLoop
.9361	c9 7b		cmp #$7b			cmp 	#'z'+1
.9363	b0 ee		bcs $9353			bcs 	_FLBCLoop
.9365	38		sec				sec 								; make U/C
.9366	e9 20		sbc #$20			sbc 	#32
.9368	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.936b	80 e6		bra $9353			bra 	_FLBCLoop
.936d					_FLBCInQuotes:
.936d	e8		inx				inx 								; advance
.936e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9371	f0 07		beq $937a			beq 	_FLBCExit 					; exit on EOS
.9373	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9375	d0 f6		bne $936d			bne 	_FLBCInQuotes
.9377	e8		inx				inx 								; skip over it
.9378	80 d9		bra $9353			bra 	_FLBCLoop
.937a					_FLBCExit:
.937a	60		rts				rts
.937b					TokeniseExtractLineNumber:
.937b	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.937e	48		pha				pha
.937f	ad 16 07	lda $0716			lda 	tokenLineNumber
.9382	48		pha				pha
.9383	20 b9 93	jsr $93b9			jsr 	_TELNTimes2 				; line # x 4
.9386	20 b9 93	jsr $93b9			jsr 	_TELNTimes2 				; line # x 2
.9389	18		clc				clc 								; add stacked value
.938a	68		pla				pla
.938b	6d 16 07	adc $0716			adc 	tokenLineNumber
.938e	8d 16 07	sta $0716			sta 	tokenLineNumber
.9391	68		pla				pla
.9392	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9395	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9398	20 b9 93	jsr $93b9			jsr 	_TELNTimes2 				; line # x 10
.939b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.939e	e8		inx				inx
.939f	29 0f		and #$0f			and 	#15 						; add to line #
.93a1	18		clc				clc
.93a2	6d 16 07	adc $0716			adc 	tokenLineNumber
.93a5	8d 16 07	sta $0716			sta 	tokenLineNumber
.93a8	90 03		bcc $93ad			bcc 	_TLENNoCarry
.93aa	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.93ad					_TLENNoCarry:
.93ad	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.93b0	c9 30		cmp #$30			cmp 	#'0'
.93b2	90 04		bcc $93b8			bcc 	_TLENExit
.93b4	c9 3a		cmp #$3a			cmp 	#'9'+1
.93b6	90 c3		bcc $937b			bcc 	TokeniseExtractLineNumber
.93b8					_TLENExit:
.93b8	60		rts				rts
.93b9					_TELNTimes2:
.93b9	0e 16 07	asl $0716			asl 	tokenLineNumber
.93bc	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.93bf	60		rts				rts
.93c0					TokeniseWriteByte:
.93c0	da		phx				phx
.93c1	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.93c4	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.93c7	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.93ca	fa		plx				plx
.93cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.93cc					CheckCreateVariableRecord:
.93cc	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.93ce	85 36		sta $36				sta 	0+zTemp0
.93d0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.93d2	85 37		sta $37				sta 	1+zTemp0
.93d4					_CCVSearch:
.93d4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.93d6	f0 2c		beq $9404			beq 	_CCVFail
.93d8	a0 01		ldy #$01			ldy 	#1 							; read the hash
.93da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.93dc	cd 03 07	cmp $0703			cmp 	identHash
.93df	d0 16		bne $93f7			bne 	_CCVNext
.93e1	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.93e3	ae 00 07	ldx $0700			ldx 	identStart
.93e6					_CCVCompare:
.93e6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.93e9	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.93eb	e8		inx				inx 								; advance pointers
.93ec	c8		iny				iny
.93ed	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.93ee	d0 07		bne $93f7			bne 	_CCVNext  					; didn't match go to next.
.93f0	90 f4		bcc $93e6			bcc 	_CCVCompare 				; not finished yet.
.93f2	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.93f5	f0 41		beq $9438			beq 	_CCVFound 					; yes, we were successful
.93f7					_CCVNext:
.93f7	18		clc				clc
.93f8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.93fa	65 36		adc $36				adc 	zTemp0
.93fc	85 36		sta $36				sta 	zTemp0
.93fe	90 d4		bcc $93d4			bcc 	_CCVSearch
.9400	e6 37		inc $37				inc 	zTemp0+1
.9402	80 d0		bra $93d4			bra 	_CCVSearch
.9404					_CCVFail:
.9404	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9406	ad 03 07	lda $0703			lda 	identHash
.9409	91 36		sta ($36),y			sta 	(zTemp0),y
.940b	c8		iny				iny 								; offset 2 is the type byte
.940c	ad 04 07	lda $0704			lda 	identTypeByte
.940f	91 36		sta ($36),y			sta 	(zTemp0),y
.9411	c8		iny				iny
.9412					_CCVData:
.9412	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9414	91 36		sta ($36),y			sta 	(zTemp0),y
.9416	c8		iny				iny
.9417	c0 08		cpy #$08			cpy 	#8
.9419	90 f7		bcc $9412			bcc 	_CCVData
.941b	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.941e					_CCVCopyName:
.941e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9421	91 36		sta ($36),y			sta 	(zTemp0),y
.9423	e8		inx				inx
.9424	c8		iny				iny
.9425	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9428	d0 f4		bne $941e			bne 	_CCVCopyName
.942a	98		tya				tya 								; patch offset
.942b	92 36		sta ($36)			sta 	(zTemp0)
.942d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.942f	91 36		sta ($36),y			sta 	(zTemp0),y
.9431	88		dey				dey
.9432	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9434	09 80		ora #$80			ora 	#$80
.9436	91 36		sta ($36),y			sta 	(zTemp0),y
.9438					_CCVFound:
.9438	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.943a	38		sec				sec
.943b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.943d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.943f	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.9442	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9444	20 c0 93	jsr $93c0			jsr 	TokeniseWriteByte
.9447	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9b85					MemoryPeek:
.9b85	b2 36		lda ($36)			lda 	(zTemp0)
.9b87	60		rts				rts
.9b88					MemoryPoke:
.9b88	92 36		sta ($36)			sta 	(zTemp0)
.9b8a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9b8b					PrintHex:
.9b8b	48		pha				pha
.9b8c	4a		lsr a				lsr 	a
.9b8d	4a		lsr a				lsr 	a
.9b8e	4a		lsr a				lsr 	a
.9b8f	4a		lsr a				lsr 	a
.9b90	20 94 9b	jsr $9b94			jsr 	_PrintNibble
.9b93	68		pla				pla
.9b94					_PrintNibble:
.9b94	29 0f		and #$0f			and 	#15
.9b96	c9 0a		cmp #$0a			cmp 	#10
.9b98	90 02		bcc $9b9c			bcc 	_NoShift
.9b9a	69 06		adc #$06			adc 	#6
.9b9c					_NoShift:
.9b9c	69 30		adc #$30			adc 	#48
.9b9e	4c a1 9b	jmp $9ba1			jmp 	EXTPrintCharacter
.9ba1					EXTPrintCharacter:
.9ba1	48		pha				pha
.9ba2	da		phx				phx
.9ba3	5a		phy				phy
.9ba4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9ba7	7a		ply				ply
.9ba8	fa		plx				plx
.9ba9	68		pla				pla
.9baa	60		rts				rts
.9bab					EXTInputSingleCharacter:
.9bab	da		phx				phx
.9bac	5a		phy				phy
.9bad					_EISCWait:
.9bad	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9bb0	c9 00		cmp #$00			cmp 	#0
.9bb2	f0 f9		beq $9bad			beq 	_EISCWait
.9bb4	7a		ply				ply
.9bb5	fa		plx				plx
.9bb6	60		rts				rts
.9bb7					EXTInputLine:
.9bb7	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9bb9					_ILLoop:
.9bb9	da		phx				phx 								; read character in
.9bba	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9bbd	fa		plx				plx
.9bbe	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9bc0	f0 12		beq $9bd4			beq 	_ILBackspace
.9bc2	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9bc4	f0 15		beq $9bdb			beq 	_ILExit
.9bc6	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9bc8	90 ef		bcc $9bb9			bcc 	_ILLoop
.9bca	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9bcc	f0 eb		beq $9bb9			beq 	_ILLoop
.9bce	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9bd1	e8		inx				inx
.9bd2	80 e5		bra $9bb9			bra 	_ILLoop
.9bd4					_ILBackspace:
.9bd4	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9bd6	f0 e1		beq $9bb9			beq 	_ILLoop
.9bd8	ca		dex				dex 								; back one.
.9bd9	80 de		bra $9bb9			bra 	_ILLoop
.9bdb					_ILExit:
.9bdb	20 a1 9b	jsr $9ba1			jsr 	EXTPrintCharacter
.9bde	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9be1	60		rts				rts
.9be2					EXTBreakCheck:
.9be2	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9448					MemoryNew:
.9448	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.944a	85 30		sta $30				sta 	codePtr
.944c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.944e	85 31		sta $31				sta 	codePtr+1
.9450	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9452	92 30		sta ($30)			sta 	(codePtr)
.9454	60		rts				rts
.9455					MemoryAppend:
.9455	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9457	85 30		sta $30				sta 	codePtr
.9459	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.945b	85 31		sta $31				sta 	codePtr+1
.945d					_MAFindEnd:
.945d	b2 30		lda ($30)			lda 	(codePtr)
.945f	f0 0d		beq $946e			beq 	_MAFoundEnd
.9461	18		clc				clc
.9462	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9464	65 30		adc $30				adc 	codePtr
.9466	85 30		sta $30				sta 	codePtr
.9468	90 02		bcc $946c			bcc 	_CREExit
.946a	e6 31		inc $31				inc 	codePtr+1
.946c					_CREExit:
.946c	80 ef		bra $945d			bra 	_MAFindEnd
.946e					_MAFoundEnd:
.946e	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9471	c0 04		cpy #$04			cpy 	#4 							; blank line
.9473	f0 0e		beq $9483			beq 	_MANoLine
.9475	a9 00		lda #$00			lda 	#0 							; end of program
.9477	91 30		sta ($30),y			sta 	(codePtr),y
.9479					_MACopy:
.9479	88		dey				dey
.947a	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.947d	91 30		sta ($30),y			sta 	(codePtr),y
.947f	c0 00		cpy #$00			cpy 	#0
.9481	d0 f6		bne $9479			bne 	_MACopy
.9483					_MANoLine:
.9483	60		rts				rts
.9484					MemoryInline:
.9484	98		tya				tya 								; put address into stack,x
.9485	18		clc				clc
.9486	65 30		adc $30				adc 	codePtr
.9488	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.948b	a5 31		lda $31				lda 	codePtr+1
.948d	69 00		adc #$00			adc 	#0
.948f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9492	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9495	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9498	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9499					MemoryTransferAX:
.9499	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.949b	86 37		stx $37				stx 	zTemp0+1
.949d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.949f	85 30		sta $30				sta 	codePtr
.94a1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94a3	85 31		sta $31				sta 	codePtr+1
.94a5					_MTAXLoop:
.94a5	b2 30		lda ($30)			lda 	(codePtr)
.94a7	f0 1d		beq $94c6			beq 	_MTAXError 					; not found.
.94a9	a0 01		ldy #$01			ldy 	#1 							; check LSB
.94ab	b1 30		lda ($30),y			lda 	(codePtr),y
.94ad	c5 36		cmp $36				cmp 	zTemp0
.94af	d0 07		bne $94b8			bne 	_MTAXNext
.94b1	c8		iny				iny 								; check MSB
.94b2	b1 30		lda ($30),y			lda 	(codePtr),y
.94b4	c5 37		cmp $37				cmp 	zTemp0+1
.94b6	f0 0d		beq $94c5			beq 	_MTAXExit 					; success !
.94b8					_MTAXNext:
.94b8	18		clc				clc
.94b9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94bb	65 30		adc $30				adc 	codePtr
.94bd	85 30		sta $30				sta 	codePtr
.94bf	90 02		bcc $94c3			bcc 	_CREExit
.94c1	e6 31		inc $31				inc 	codePtr+1
.94c3					_CREExit:
.94c3	80 e0		bra $94a5			bra 	_MTAXLoop
.94c5					_MTAXExit:
.94c5	60		rts				rts
.94c6					_MTAXError:
.94c6	a9 0d		lda #$0d		lda	#13
.94c8	4c 8c 84	jmp $848c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
