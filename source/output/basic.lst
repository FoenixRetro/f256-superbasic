
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 10:32:30 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 a2 87	jsr $87a2			jsr 	NewCommand 					; erase current program
.8006	20 8f 97	jsr $978f			jsr 	BackloadProgram
.8009	4c d2 83	jmp $83d2			jmp 	WarmStart
>800c							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.800c					VectorSetPunc:
>800c	49 8d					.word	ShiftLeft                        ; $00 <<
>800e	43 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8010	39 8c					.word	BinaryCompareNotEqual            ; $02 <>
>8012	f5 a3					.word	SyntaxError                      ; $03 !!3
>8014	f5 a3					.word	SyntaxError                      ; $04 ><
>8016	4d 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8018	4c 8d					.word	ShiftRight                       ; $06 >>
>801a	f5 a3					.word	SyntaxError                      ; $07 !!7
>801c	f5 a3					.word	SyntaxError                      ; $08 !!8
>801e	f5 a3					.word	SyntaxError                      ; $09 !!9
>8020	f5 a3					.word	SyntaxError                      ; $0a !!10
>8022	f5 a3					.word	SyntaxError                      ; $0b !!11
>8024	f5 a3					.word	SyntaxError                      ; $0c !!12
>8026	f5 a3					.word	SyntaxError                      ; $0d !!13
>8028	f5 a3					.word	SyntaxError                      ; $0e !!14
>802a	f5 a3					.word	SyntaxError                      ; $0f !!15
>802c	f5 a3					.word	SyntaxError                      ; $10 @
>802e	f5 a3					.word	SyntaxError                      ; $11 !!17
>8030	f5 a3					.word	SyntaxError                      ; $12 !!18
>8032	f5 a3					.word	SyntaxError                      ; $13 [
>8034	2c 9e					.word	IntegerDivide                    ; $14 \
>8036	f5 a3					.word	SyntaxError                      ; $15 ]
>8038	d2 8e					.word	EorInteger                       ; $16 ^
>803a	f5 a3					.word	SyntaxError                      ; $17 _
>803c	f5 a3					.word	SyntaxError                      ; $18 `
>803e	f5 a3					.word	SyntaxError                      ; $19 !!25
>8040	f5 a3					.word	SyntaxError                      ; $1a !!26
>8042	f5 a3					.word	SyntaxError                      ; $1b {
>8044	8c 8e					.word	OraInteger                       ; $1c |
>8046	f5 a3					.word	SyntaxError                      ; $1d }
>8048	f5 a3					.word	SyntaxError                      ; $1e ~
>804a	f5 a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>804c	f5 a3					.word	SyntaxError                      ; $20
>804e	18 8f					.word	WordIndirect                     ; $21 !
>8050	f5 a3					.word	SyntaxError                      ; $22 "
>8052	f5 a3					.word	SyntaxError                      ; $23 #
>8054	f5 a3					.word	SyntaxError                      ; $24 $
>8056	79 9e					.word	IntegerModulus                   ; $25 %
>8058	46 8e					.word	AndInteger                       ; $26 &
>805a	f5 a3					.word	SyntaxError                      ; $27 '
>805c	f5 a3					.word	SyntaxError                      ; $28 (
>805e	f5 a3					.word	SyntaxError                      ; $29 )
>8060	ee 9e					.word	MulInteger                       ; $2a *
>8062	e0 8d					.word	AddInteger                       ; $2b +
>8064	f5 a3					.word	SyntaxError                      ; $2c ,
>8066	1b 8e					.word	SubInteger                       ; $2d -
>8068	f5 a3					.word	SyntaxError                      ; $2e .
>806a	85 a0					.word	FDivideCommand                   ; $2f /
>806c	f5 a3					.word	SyntaxError                      ; $30 0
>806e	f5 a3					.word	SyntaxError                      ; $31 1
>8070	f5 a3					.word	SyntaxError                      ; $32 2
>8072	f5 a3					.word	SyntaxError                      ; $33 3
>8074	f5 a3					.word	SyntaxError                      ; $34 4
>8076	f5 a3					.word	SyntaxError                      ; $35 5
>8078	f5 a3					.word	SyntaxError                      ; $36 6
>807a	f5 a3					.word	SyntaxError                      ; $37 7
>807c	f5 a3					.word	SyntaxError                      ; $38 8
>807e	f5 a3					.word	SyntaxError                      ; $39 9
>8080	f5 a3					.word	SyntaxError                      ; $3a :
>8082	f5 a3					.word	SyntaxError                      ; $3b ;
>8084	25 8c					.word	BinaryCompareLess                ; $3c <
>8086	1b 8c					.word	BinaryCompareEqual               ; $3d =
>8088	2f 8c					.word	BinaryCompareGreater             ; $3e >
>808a	3f 8f					.word	ByteIndirect                     ; $3f ?
.808c					VectorSet0:
>808c	4b 89					.word	EOLCommand                       ; $80 !0:EOF
>808e	58 89					.word	Shift1Command                    ; $81 !1:SH1
>8090	60 89					.word	Shift2Command                    ; $82 !2:SH2
>8092	cb a1					.word	AbsUnary                         ; $83 ABS(
>8094	09 94					.word	AllocUnary                       ; $84 ALLOC(
>8096	db a1					.word	AscUnary                         ; $85 ASC(
>8098	c4 94					.word	ChrUnary                         ; $86 CHR$(
>809a	17 8c					.word	UnaryFalse                       ; $87 FALSE
>809c	e8 a1					.word	FracUnary                        ; $88 FRAC(
>809e	fe a1					.word	IntUnary                         ; $89 INT(
>80a0	54 a2					.word	IsValUnary                       ; $8a ISVAL(
>80a2	9e 95					.word	Unary_Left                       ; $8b LEFT$(
>80a4	10 a2					.word	LenUnary                         ; $8c LEN(
>80a6	c8 95					.word	Unary_Mid                        ; $8d MID$(
>80a8	61 94					.word	Unary_Not                        ; $8e NOT(
>80aa	ae 95					.word	Unary_Right                      ; $8f RIGHT$(
>80ac	77 94					.word	Unary_Rnd                        ; $90 RND(
>80ae	2a a2					.word	SgnUnary                         ; $91 SGN(
>80b0	d6 94					.word	SpcUnary                         ; $92 SPC(
>80b2	f1 94					.word	Unary_Str                        ; $93 STR$(
>80b4	0b 8c					.word	UnaryTrue                        ; $94 TRUE
>80b6	4a a2					.word	ValUnary                         ; $95 VAL(
>80b8	5c 85					.word	ForCommand                       ; $96 FOR
>80ba	a9 86					.word	IfCommand                        ; $97 IF
>80bc	68 89					.word	Unused1                          ; $98 PROC
>80be	9a 88					.word	Command_REPEAT                   ; $99 REPEAT
>80c0	70 8b					.word	Command_WHILE                    ; $9a WHILE
>80c2	d2 86					.word	EndIf                            ; $9b ENDIF
>80c4	05 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>80c6	16 86					.word	NextCommand                      ; $9d NEXT
>80c8	68 89					.word	Unused4                          ; $9e THEN
>80ca	a3 88					.word	Command_UNTIL                    ; $9f UNTIL
>80cc	91 8b					.word	Command_WEND                     ; $a0 WEND
>80ce	31 84					.word	CallCommand                      ; $a1 CALL
>80d0	f5 a3					.word	SyntaxError                      ; $a2 CLS
>80d2	94 84					.word	Command_Data                     ; $a3 DATA
>80d4	9c 84					.word	DimCommand                       ; $a4 DIM
>80d6	68 89					.word	Unused3                          ; $a5 DOWNTO
>80d8	cb 86					.word	ElseCode                         ; $a6 ELSE
>80da	6f 86					.word	Command_GOSUB                    ; $a7 GOSUB
>80dc	8d 86					.word	GotoCommand                      ; $a8 GOTO
>80de	d3 86					.word	LetCommand                       ; $a9 LET
>80e0	ac 87					.word	Command_Print                    ; $aa PRINT
>80e2	34 88					.word	Command_Read                     ; $ab READ
>80e4	8d 88					.word	RemCommand                       ; $ac REM
>80e6	7f 86					.word	Command_RETURN                   ; $ad RETURN
>80e8	68 89					.word	Unused2                          ; $ae TO
.80ea					VectorSet1:
>80ea	f5 a3					.word	SyntaxError                      ; $80 !0:EOF
>80ec	f5 a3					.word	SyntaxError                      ; $81 !1:SH1
>80ee	f5 a3					.word	SyntaxError                      ; $82 !2:SH2
>80f0	02 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>80f2	21 84					.word	AssertCommand                    ; $84 ASSERT
>80f4	3f 84					.word	ClearCommand                     ; $85 CLEAR
>80f6	59 85					.word	EndCommand                       ; $86 END
>80f8	0c 87					.word	Command_List                     ; $87 LIST
>80fa	a2 87					.word	NewCommand                       ; $88 NEW
>80fc	bc 88					.word	Command_Restore                  ; $89 RESTORE
>80fe	ee 88					.word	CommandRUN                       ; $8a RUN
>8100	6b 89					.word	StopCommand                      ; $8b STOP
.8102					VectorSet2:
>8102	f5 a3					.word	SyntaxError                      ; $80 !0:EOF
>8104	f5 a3					.word	SyntaxError                      ; $81 !1:SH1
>8106	f5 a3					.word	SyntaxError                      ; $82 !2:SH2
>8108	b8 a2					.word	Assemble_adc                     ; $83 ADC
>810a	b0 a2					.word	Assemble_and                     ; $84 AND
>810c	cc a2					.word	Assemble_asl                     ; $85 ASL
>810e	36 a3					.word	Assemble_bcc                     ; $86 BCC
>8110	3a a3					.word	Assemble_bcs                     ; $87 BCS
>8112	42 a3					.word	Assemble_beq                     ; $88 BEQ
>8114	f9 a2					.word	Assemble_bit                     ; $89 BIT
>8116	2a a3					.word	Assemble_bmi                     ; $8a BMI
>8118	3e a3					.word	Assemble_bne                     ; $8b BNE
>811a	26 a3					.word	Assemble_bpl                     ; $8c BPL
>811c	46 a3					.word	Assemble_bra                     ; $8d BRA
>811e	4a a3					.word	Assemble_brk                     ; $8e BRK
>8120	2e a3					.word	Assemble_bvc                     ; $8f BVC
>8122	32 a3					.word	Assemble_bvs                     ; $90 BVS
>8124	52 a3					.word	Assemble_clc                     ; $91 CLC
>8126	a6 a3					.word	Assemble_cld                     ; $92 CLD
>8128	66 a3					.word	Assemble_cli                     ; $93 CLI
>812a	96 a3					.word	Assemble_clv                     ; $94 CLV
>812c	c4 a2					.word	Assemble_cmp                     ; $95 CMP
>812e	0d a3					.word	Assemble_cpx                     ; $96 CPX
>8130	08 a3					.word	Assemble_cpy                     ; $97 CPY
>8132	ea a2					.word	Assemble_dec                     ; $98 DEC
>8134	a2 a3					.word	Assemble_dex                     ; $99 DEX
>8136	7e a3					.word	Assemble_dey                     ; $9a DEY
>8138	b4 a2					.word	Assemble_eor                     ; $9b EOR
>813a	ef a2					.word	Assemble_inc                     ; $9c INC
>813c	ae a3					.word	Assemble_inx                     ; $9d INX
>813e	9e a3					.word	Assemble_iny                     ; $9e INY
>8140	21 a3					.word	Assemble_jmp                     ; $9f JMP
>8142	1c a3					.word	Assemble_jsr                     ; $a0 JSR
>8144	c0 a2					.word	Assemble_lda                     ; $a1 LDA
>8146	e5 a2					.word	Assemble_ldx                     ; $a2 LDX
>8148	03 a3					.word	Assemble_ldy                     ; $a3 LDY
>814a	d6 a2					.word	Assemble_lsr                     ; $a4 LSR
>814c	b2 a3					.word	Assemble_nop                     ; $a5 NOP
>814e	ac a2					.word	Assemble_ora                     ; $a6 ORA
>8150	62 a3					.word	Assemble_pha                     ; $a7 PHA
>8152	4e a3					.word	Assemble_php                     ; $a8 PHP
>8154	aa a3					.word	Assemble_phx                     ; $a9 PHX
>8156	6a a3					.word	Assemble_phy                     ; $aa PHY
>8158	72 a3					.word	Assemble_pla                     ; $ab PLA
>815a	56 a3					.word	Assemble_plp                     ; $ac PLP
>815c	ba a3					.word	Assemble_plx                     ; $ad PLX
>815e	7a a3					.word	Assemble_ply                     ; $ae PLY
>8160	d1 a2					.word	Assemble_rol                     ; $af ROL
>8162	db a2					.word	Assemble_ror                     ; $b0 ROR
>8164	5e a3					.word	Assemble_rti                     ; $b1 RTI
>8166	6e a3					.word	Assemble_rts                     ; $b2 RTS
>8168	c8 a2					.word	Assemble_sbc                     ; $b3 SBC
>816a	5a a3					.word	Assemble_sec                     ; $b4 SEC
>816c	b6 a3					.word	Assemble_sed                     ; $b5 SED
>816e	76 a3					.word	Assemble_sei                     ; $b6 SEI
>8170	bc a2					.word	Assemble_sta                     ; $b7 STA
>8172	e0 a2					.word	Assemble_stx                     ; $b8 STX
>8174	fe a2					.word	Assemble_sty                     ; $b9 STY
>8176	f4 a2					.word	Assemble_stz                     ; $ba STZ
>8178	92 a3					.word	Assemble_tax                     ; $bb TAX
>817a	8e a3					.word	Assemble_tay                     ; $bc TAY
>817c	17 a3					.word	Assemble_trb                     ; $bd TRB
>817e	12 a3					.word	Assemble_tsb                     ; $be TSB
>8180	9a a3					.word	Assemble_tsx                     ; $bf TSX
>8182	82 a3					.word	Assemble_txa                     ; $c0 TXA
>8184	8a a3					.word	Assemble_txs                     ; $c1 TXS
>8186	86 a3					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8188					AssembleGroup1:
.8188	a9 ff		lda #$ff			lda 	#$FF
.818a	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.818d	80 02		bra $8191			bra 	AsmGroup12
.818f					AssembleGroup2:
.818f	a5 00		lda $00				lda 	$00
.8191					AsmGroup12:
.8191	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.8194	68		pla				pla 								; pop the return address to access the information following.
.8195	fa		plx				plx
.8196	20 1f 82	jsr $821f			jsr 	AccessParameters 			; get opcode and save as base
.8199	8d 22 07	sta $0722			sta 	BaseOpcode
.819c	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.819f	d0 08		bne $81a9			bne 	_AG12HaveMask
.81a1	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81a3	20 27 82	jsr $8227			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81a6	8d 23 07	sta $0723			sta 	ModeMask
.81a9					_AG12HaveMask:
.81a9	20 62 83	jsr $8362			jsr 	TypeAndCalculateOperand 	; get zero page type
.81ac	da		phx				phx 								; save found address mode
.81ad	20 8b 82	jsr $828b			jsr 	AssembleModeX
.81b0	fa		plx				plx  								; restore address mode
.81b1	b0 0b		bcs $81be			bcs 	_AG12Exit
.81b3	20 bf 81	jsr $81bf			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81b6	20 8b 82	jsr $828b			jsr 	AssembleModeX
.81b9	b0 03		bcs $81be			bcs 	_AG12Exit
.81bb	4c f5 a3	jmp $a3f5			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81be					_AG12Exit:
.81be	60		rts				rts
.81bf					PromoteToAbsolute:
.81bf	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81c1	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81c3	f0 19		beq $81de			beq 	_PTADo
.81c5	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81c7	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81c9	f0 13		beq $81de			beq 	_PTADo
.81cb	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81cd	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81cf	f0 0d		beq $81de			beq 	_PTADo
.81d1	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81d3	e0 d1		cpx #$d1			cpx 	#AM_IND
.81d5	f0 07		beq $81de			beq 	_PTADo
.81d7	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81d9	e0 c0		cpx #$c0			cpx 	#AM_INDX
.81db	f0 01		beq $81de			beq 	_PTADo
.81dd	60		rts				rts
.81de					_PTADo:
.81de	aa		tax				tax
.81df	60		rts				rts
.81e0					AssembleGroup3:
.81e0	68		pla				pla 								; get parameters, which is just the opcode.
.81e1	fa		plx				plx
.81e2	20 1f 82	jsr $821f			jsr 	AccessParameters 			; get and output opcode
.81e5	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.81e8	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get a 16 bit operand
.81eb	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.81ee	38		sec				sec
.81ef	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.81f2	48		pha				pha 								; LSB in A
.81f3	ad 10 06	lda $0610			lda 	NSMantissa1
.81f6	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.81f9	aa		tax				tax 								; MSB in X
.81fa	68		pla				pla
.81fb	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.81fc	69 7f		adc #$7f			adc 	#$7F
.81fe	90 01		bcc $8201			bcc 	_AG3NoCarry
.8200	e8		inx				inx
.8201					_AG3NoCarry:
.8201	38		sec				sec 								; fix back and write out anyways.
.8202	e9 80		sbc #$80			sbc 	#$80
.8204	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.8207	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8209	f0 0a		beq $8215			beq 	_AG3Exit
.820b	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.820e	29 01		and #$01			and 	#1
.8210	f0 03		beq $8215			beq 	_AG3Exit
.8212	4c fa a3	jmp $a3fa			jmp 	RangeError 					; no, branch is out of range
.8215					_AG3Exit:
.8215	60		rts				rts
.8216					AssembleGroup4:
.8216	68		pla				pla 								; pop address
.8217	fa		plx				plx
.8218	20 1f 82	jsr $821f			jsr 	AccessParameters 			; access and get first
.821b	20 37 82	jsr $8237			jsr 	AssemblerWriteByte 			; output it.
.821e	60		rts				rts
.821f					AccessParameters:
.821f	8d 1f 07	sta $071f			sta 	ParamStart
.8222	8e 20 07	stx $0720			stx 	ParamStart+1
.8225	a9 01		lda #$01			lda 	#1
.8227					GetParameter:
.8227	5a		phy				phy
.8228	a8		tay				tay
.8229	ad 1f 07	lda $071f			lda 	ParamStart
.822c	85 36		sta $36				sta 	zTemp0
.822e	ad 20 07	lda $0720			lda 	ParamStart+1
.8231	85 37		sta $37				sta 	zTemp0+1
.8233	b1 36		lda ($36),y			lda 	(zTemp0),y
.8235	7a		ply				ply
.8236	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8237					AssemblerWriteByte:
.8237	48		pha			pha
.8238	ad 1e 07	lda $071e		lda 	AssemblerControl 				; check printing bytes ?
.823b	29 02		and #$02		and 	#2
.823d	f0 1b		beq $825a		beq 	_AWBNoPrint
.823f	ad 1d 07	lda $071d		lda		AssemblerAddress+1 				; print address
.8242	20 75 82	jsr $8275		jsr 	PrintHex
.8245	ad 1c 07	lda $071c		lda		AssemblerAddress
.8248	20 75 82	jsr $8275		jsr 	PrintHex
.824b	a9 20		lda #$20		lda 	#' '
.824d	20 42 a6	jsr $a642		jsr 	EXTPrintCharacter
.8250	68		pla			pla 									; print byte
.8251	48		pha			pha
.8252	20 75 82	jsr $8275		jsr 	PrintHex
.8255	a9 0d		lda #$0d		lda 	#13
.8257	20 42 a6	jsr $a642		jsr 	EXTPrintCharacter
.825a					_AWBNoPrint:
.825a	ad 1c 07	lda $071c		lda		AssemblerAddress				; copy address to zTemp0
.825d	85 36		sta $36			sta 	zTemp0
.825f	ad 1d 07	lda $071d		lda		AssemblerAddress+1
.8262	f0 0e		beq $8272		beq 	_AWBRange
.8264	85 37		sta $37			sta 	zTemp0+1
.8266	68		pla			pla 									; write byte out
.8267	92 36		sta ($36)		sta 	(zTemp0)
.8269	ee 1c 07	inc $071c		inc 	AssemblerAddress 				; bump address
.826c	d0 03		bne $8271		bne 	_AWBNoCarry
.826e	ee 1d 07	inc $071d		inc 	AssemblerAddress+1
.8271					_AWBNoCarry:
.8271	60		rts			rts
.8272					_AWBRange:
.8272	4c fa a3	jmp $a3fa		jmp 	RangeError
.8275					PrintHex:
.8275	48		pha				pha
.8276	4a		lsr a				lsr 	a
.8277	4a		lsr a				lsr 	a
.8278	4a		lsr a				lsr 	a
.8279	4a		lsr a				lsr 	a
.827a	20 7e 82	jsr $827e			jsr 	_PrintNibble
.827d	68		pla				pla
.827e					_PrintNibble:
.827e	29 0f		and #$0f			and 	#15
.8280	c9 0a		cmp #$0a			cmp 	#10
.8282	90 02		bcc $8286			bcc 	_NoShift
.8284	69 06		adc #$06			adc 	#6
.8286					_NoShift:
.8286	69 30		adc #$30			adc 	#48
.8288	4c 42 a6	jmp $a642			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.828b					AssembleModeX:
.828b	5a		phy				phy
.828c	ad 21 07	lda $0721			lda 	IsGroup1
.828f	f0 17		beq $82a8			beq 	_AMXGroup2
.8291	8a		txa				txa 							; is it in group # 1
.8292	29 40		and #$40			and 	#AM_ISG1
.8294	f0 50		beq $82e6			beq 	_AMXFail 				; no, give up.
.8296	8a		txa				txa 							; get back.
.8297	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8299	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.829b	d0 22		bne $82bf			bne 	_AMXHaveInfo
.829d	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.82a0	c9 81		cmp #$81			cmp 	#$81
.82a2	f0 42		beq $82e6			beq 	_AMXFail
.82a4	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82a6	80 17		bra $82bf			bra 	_AMXHaveInfo 			; odd design decision there.
.82a8					_AMXGroup2:
.82a8	8a		txa				txa 							; is it in group 2 ?
.82a9	29 20		and #$20			and 	#AM_ISG2
.82ab	f0 39		beq $82e6			beq 	_AMXFail 				; no, give up.
.82ad	8a		txa				txa 							; get the offset into Y
.82ae	29 1f		and #$1f			and 	#$1F
.82b0	4a		lsr a				lsr 	a 						; make it 0-7.
.82b1	4a		lsr a				lsr  	a
.82b2	a8		tay				tay
.82b3	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82b6					_AMXCheckOkay:
.82b6	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82b7	88		dey				dey
.82b8	10 fc		bpl $82b6			bpl 	_AMXCheckOkay
.82ba	90 2a		bcc $82e6			bcc 	_AMXFail 				; not allowed.
.82bc	8a		txa				txa  							; get mask back
.82bd	29 1f		and #$1f			and 	#$1F
.82bf					_AMXHaveInfo:
.82bf	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82c1	10 05		bpl $82c8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82c3	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82c6	d0 1e		bne $82e6			bne 	_AMXFail
.82c8					_AMXAnySize:
.82c8	18		clc				clc 							; add offset to the base opcode
.82c9	6d 22 07	adc $0722			adc 	BaseOpcode
.82cc					_AMXOutputCode:
.82cc	20 37 82	jsr $8237			jsr 	AssemblerWriteByte 		; write the opcode out.
.82cf	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82d1	f0 10		beq $82e3			beq 	_AMXExit
.82d3	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.82d6	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.82d9	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.82db	30 06		bmi $82e3			bmi 	_AMXExit
.82dd	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.82e0	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.82e3					_AMXExit:
.82e3	7a		ply				ply
.82e4	38		sec				sec
.82e5	60		rts				rts
.82e6					_AMXFail:
.82e6	a0 00		ldy #$00			ldy 	#0
.82e8					_AMXCheckOddities:
.82e8	8a		txa				txa
.82e9	d9 11 83	cmp $8311,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82ec	d0 16		bne $8304			bne 	_AMXCONext
.82ee	b9 0f 83	lda $830f,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82f1	cd 22 07	cmp $0722			cmp 	BaseOpcode
.82f4	d0 0e		bne $8304			bne 	_AMXCONext
.82f6	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.82f8	10 05		bpl $82ff			bpl 	_AMXCONotZero
.82fa	ad 10 06	lda $0610			lda 	NSMantissa1
.82fd	d0 05		bne $8304			bne 	_AMXCONext
.82ff					_AMXCONotZero:
.82ff	b9 10 83	lda $8310,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8302	80 c8		bra $82cc			bra 	_AMXOutputCode 			; and assemble it
.8304					_AMXCONext:
.8304	c8		iny				iny
.8305	c8		iny				iny
.8306	c8		iny				iny
.8307	b9 0f 83	lda $830f,y			lda 	ExtraOpcode+0,y 		; end of table
.830a	d0 dc		bne $82e8			bne 	_AMXCheckOddities
.830c					_AMXCOFail:
.830c	7a		ply				ply
.830d	18		clc				clc
.830e	60		rts				rts
.830f					ExtraOpcode:
>830f	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8312	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8315	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8318	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>831b	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>831e	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8321	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8324	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8327	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>832a	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>832d	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.832e					LabelHere:
.832e	c8		iny				iny 								; skip .
.832f	a2 00		ldx #$00			ldx 	#0 							; get a term
.8331	20 79 92	jsr $9279			jsr 	EvaluateTerm 				; get a term
.8334	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.8337	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8339	d0 24		bne $835f			bne 	_ALType
.833b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.833e	85 36		sta $36				sta 	zTemp0
.8340	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8343	85 37		sta $37				sta 	zTemp0+1
.8345	5a		phy				phy 								; copy address in.
.8346	a0 01		ldy #$01			ldy 	#1
.8348	ad 1c 07	lda $071c			lda	 	AssemblerAddress
.834b	92 36		sta ($36)			sta 	(zTemp0)
.834d	ad 1d 07	lda $071d			lda	 	AssemblerAddress+1
.8350	91 36		sta ($36),y			sta 	(zTemp0),y
.8352	c8		iny				iny
.8353	a9 00		lda #$00			lda 	#0
.8355	91 36		sta ($36),y			sta 	(zTemp0),y
.8357	c8		iny				iny
.8358	91 36		sta ($36),y			sta 	(zTemp0),y
.835a	c8		iny				iny
.835b	91 36		sta ($36),y			sta 	(zTemp0),y
.835d	7a		ply				ply
.835e	60		rts				rts
.835f					_ALType:
.835f	4c ff a3	jmp $a3ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8362					TypeAndCalculateOperand:
.8362	b1 30		lda ($30),y			lda 	(codePtr),y
.8364	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8366	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8368	f0 5b		beq $83c5			beq 	_TACOExit
.836a	c9 80		cmp #$80			cmp 	#KWC_EOL
.836c	f0 57		beq $83c5			beq 	_TACOExit
.836e	c8		iny				iny
.836f	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8371	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8373	f0 51		beq $83c6			beq 	CalculateOperand
.8375	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8377	f0 1f		beq $8398			beq 	_TACOIndirect
.8379	88		dey				dey 								; undo get of first character
.837a	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get operand
.837d	b1 30		lda ($30),y			lda 	(codePtr),y
.837f	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8381	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8383	d0 40		bne $83c5			bne 	_TACOExit
.8385	c8		iny				iny
.8386	20 d5 9d	jsr $9dd5			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8389	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.838b	c9 58		cmp #$58			cmp 	#'X'
.838d	f0 36		beq $83c5			beq 	_TACOExit
.838f	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8391	c9 59		cmp #$59			cmp 	#'Y'
.8393	f0 30		beq $83c5			beq 	_TACOExit
.8395					_TACOSyntax:
.8395	4c f5 a3	jmp $a3f5			jmp 	SyntaxError
.8398					_TACOIndirect:
.8398	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get the operand
.839b	b1 30		lda ($30),y			lda 	(codePtr),y
.839d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.839f	f0 17		beq $83b8			beq 	_TACOIndX
.83a1	20 13 9e	jsr $9e13			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83a4	b1 30		lda ($30),y			lda 	(codePtr),y
.83a6	a2 d1		ldx #$d1			ldx 	#AM_IND
.83a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83aa	d0 19		bne $83c5			bne 	_TACOExit
.83ac	c8		iny				iny
.83ad	20 d5 9d	jsr $9dd5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83b0	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83b2	d0 e1		bne $8395			bne 	_TACOSyntax
.83b4	a2 d0		ldx #$d0			ldx 	#AM_INDY
.83b6	80 0d		bra $83c5			bra 	_TACOExit
.83b8					_TACOIndX:
.83b8	c8		iny				iny
.83b9	20 d5 9d	jsr $9dd5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83bc	c9 58		cmp #$58			cmp 	#'X' 						; check X
.83be	d0 d5		bne $8395			bne 	_TACOSyntax
.83c0	20 13 9e	jsr $9e13			jsr 	CheckRightBracket			; check )
.83c3	a2 c0		ldx #$c0			ldx 	#AM_INDX
.83c5					_TACOExit:
.83c5	60		rts				rts
.83c6					CalculateOperand:
.83c6	48		pha				pha
.83c7	da		phx				phx
.83c8	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.83ca	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger
.83cd	fa		plx				plx
.83ce	68		pla				pla
.83cf	60		rts				rts
.9dd5					TACOCheckXY:
.9dd5	b1 30		lda ($30),y			lda 	(codePtr),y
.9dd7	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9dd9	c9 40		cmp #$40			cmp 	#$40
.9ddb	d0 21		bne $9dfe			bne 	_TCXYFail
.9ddd	b1 30		lda ($30),y			lda 	(codePtr),y
.9ddf	18		clc				clc
.9de0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9de2	85 37		sta $37				sta 	zTemp0+1
.9de4	c8		iny				iny
.9de5	b1 30		lda ($30),y			lda 	(codePtr),y
.9de7	c8		iny				iny
.9de8	85 36		sta $36				sta 	zTemp0
.9dea	5a		phy				phy 								; save position
.9deb	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9ded	b1 36		lda ($36),y			lda 	(zTemp0),y
.9def	d0 0c		bne $9dfd			bne 	_TCXYPopFail
.9df1	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9df3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9df5	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9df7	f0 08		beq $9e01			beq 	_TCXYFound
.9df9	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9dfb	f0 04		beq $9e01			beq 	_TCXYFound
.9dfd					_TCXYPopFail:
.9dfd	7a		ply				ply
.9dfe					_TCXYFail:
.9dfe	a9 00		lda #$00			lda 	#0
.9e00	60		rts				rts
.9e01					_TCXYFound:
.9e01	7a		ply				ply 								; restore position
.9e02	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9e04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83d0					EditProgramCode:
>83d0	db						.byte 	$DB 						; causes a break in the emulator
.83d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83d2					WarmStart:
.83d2	a2 ff		ldx #$ff			ldx 	#$FF
.83d4	9a		txs				txs
.83d5	20 58 a6	jsr $a658			jsr 	EXTInputLine 				; get line to lineBuffer
.83d8	20 d2 9a	jsr $9ad2			jsr 	TokeniseLine 				; tokenise the line
.83db	ad 25 07	lda $0725			lda 	TokenLineNumber 			; line number ?
.83de	0d 26 07	ora $0726			ora 	TokenLineNumber+1
.83e1	d0 17		bne $83fa			bne 	_WSEditCode 				; if so,edit code.
.83e3	9c 24 07	stz $0724			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.83e6	a9 24		lda #$24			lda 	#((TokenOffset) & $FF)
.83e8	85 30		sta $30				sta 	codePtr
.83ea	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.83ec	85 31		sta $31				sta 	codePtr+1
.83ee	ad 27 07	lda $0727			lda 	TokenBuffer 				; nothing to run
.83f1	c9 80		cmp #$80			cmp 	#KWC_EOL
.83f3	f0 dd		beq $83d2			beq 	WarmStart
.83f5	20 00 89	jsr $8900			jsr 	RUNCodePointerLine 			; execute that line.
.83f8	80 d8		bra $83d2			bra 	WarmStart
.83fa					_WSEditCode:
.83fa	20 d0 83	jsr $83d0			jsr 	EditProgramCode
.83fd	20 3f 84	jsr $843f			jsr 	ClearCommand
.8400	80 d0		bra $83d2			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8402					AssembleCommand:
.8402	a2 00		ldx #$00			ldx 	#0
.8404	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger 		; start address
.8407	ad 08 06	lda $0608			lda 	NSMantissa0
.840a	8d 1c 07	sta $071c			sta 	AssemblerAddress
.840d	ad 10 06	lda $0610			lda 	NSMantissa1
.8410	8d 1d 07	sta $071d			sta 	AssemblerAddress+1
.8413	20 1b 9e	jsr $9e1b			jsr 	CheckComma
.8416	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 		; options
.8419	ad 08 06	lda $0608			lda 	NSMantissa0
.841c	8d 1e 07	sta $071e			sta 	AssemblerControl
.841f	60		rts				rts
.8420	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8421					AssertCommand:
.8421	a2 00		ldx #$00			ldx 	#0
.8423	20 69 96	jsr $9669			jsr 	EvaluateInteger 			; the assert test
.8426	20 22 97	jsr $9722			jsr 	NSMIsZero 					; exit if result is non zero.
.8429	d0 05		bne $8430			bne 	_ACExit
.842b	a9 0a		lda #$0a		lda	#10
.842d	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.8430					_ACExit:
.8430	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8431					CallCommand:
.8431	a2 00		ldx #$00			ldx 	#0
.8433	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger
.8436	ad 10 06	lda $0610			lda 	NSMantissa1
.8439	8d 09 06	sta $0609			sta 	NSMantissa0+1
.843c	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.843f					ClearCommand:
.843f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8441	85 36		sta $36				sta 	0+zTemp0
.8443	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8445	85 37		sta $37				sta 	1+zTemp0
.8447					_ClearZeroLoop:
.8447	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8449	f0 24		beq $846f			beq 	_ClearZeroEnd
.844b	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.844d	a9 00		lda #$00			lda 	#0
.844f					_ClearOneVariable:
.844f	91 36		sta ($36),y			sta 	(zTemp0),y
.8451	c8		iny				iny
.8452	c0 08		cpy #$08			cpy 	#8
.8454	d0 f9		bne $844f			bne 	_ClearOneVariable
.8456	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8458	b1 36		lda ($36),y			lda 	(zTemp0),y
.845a	c9 18		cmp #$18			cmp 	#NSTProcedure
.845c	d0 04		bne $8462			bne 	_ClearNotProcedure
.845e	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8460	91 36		sta ($36),y			sta 	(zTemp0),y
.8462					_ClearNotProcedure:
.8462	18		clc				clc 								; go to the next variable
.8463	b2 36		lda ($36)			lda 	(zTemp0)
.8465	65 36		adc $36				adc 	zTemp0
.8467	85 36		sta $36				sta 	zTemp0
.8469	90 dc		bcc $8447			bcc 	_ClearZeroLoop
.846b	e6 37		inc $37				inc 	zTemp0+1
.846d	80 d8		bra $8447			bra 	_ClearZeroLoop
.846f					_ClearZeroEnd:
.846f	18		clc				clc
.8470	a5 36		lda $36				lda 	zTemp0
.8472	69 01		adc #$01			adc 	#1
.8474	8d 0c 07	sta $070c			sta 	lowMemPtr
.8477	a5 37		lda $37				lda 	zTemp0+1
.8479	69 00		adc #$00			adc 	#0
.847b	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.847e	20 82 97	jsr $9782			jsr 	StackReset
.8481	20 ce a5	jsr $a5ce			jsr 	StringSystemInitialise
.8484	20 bf 8a	jsr $8abf			jsr 	ProcedureScan
.8487	20 bc 88	jsr $88bc			jsr 	Command_Restore
.848a	9c 1c 07	stz $071c			stz 	AssemblerAddress
.848d	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.8490	9c 1e 07	stz $071e			stz 	AssemblerControl
.8493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8494					Command_Data:
.8494	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8496	a2 80		ldx #$80			ldx 	#KWC_EOL
.8498	20 11 8b	jsr $8b11			jsr 	ScanForward
.849b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.849c					DimCommand:
.849c	b1 30		lda ($30),y			lda 	(codePtr),y
.849e	29 c0		and #$c0			and 	#$C0
.84a0	c9 40		cmp #$40			cmp 	#$40
.84a2	d0 7a		bne $851e			bne 	_DCSyntax
.84a4	b1 30		lda ($30),y			lda 	(codePtr),y
.84a6	18		clc				clc
.84a7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84a9	85 3f		sta $3f				sta 	zaTemp+1
.84ab	c8		iny				iny
.84ac	b1 30		lda ($30),y			lda 	(codePtr),y
.84ae	c8		iny				iny
.84af	85 3e		sta $3e				sta 	zaTemp
.84b1	5a		phy				phy
.84b2	a0 02		ldy #$02			ldy 	#2 						; read type byte
.84b4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b6	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.84b8	c9 18		cmp #$18			cmp 	#NSTProcedure
.84ba	f0 62		beq $851e			beq 	_DCSyntax
.84bc	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.84be	29 04		and #$04			and 	#NSBIsArray
.84c0	f0 64		beq $8526			beq 	_DCType
.84c2	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.84c4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84c6	d0 59		bne $8521			bne 	_DCRedefine
.84c8	7a		ply				ply
.84c9	20 29 85	jsr $8529			jsr 	_DCGetSize 				; get array size, check it.
.84cc	5a		phy				phy
.84cd	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.84cf	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.84d1	7a		ply				ply 							; is there a second (e.g. ,x)
.84d2	b1 30		lda ($30),y			lda 	(codePtr),y
.84d4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84d6	d0 0a		bne $84e2			bne 	_DCOneDimension
.84d8	c8		iny				iny 							; skip comma
.84d9	20 29 85	jsr $8529			jsr 	_DCGetSize 				; get 2nd array size
.84dc	5a		phy				phy
.84dd	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84df	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84e1	7a		ply				ply
.84e2					_DCOneDimension:
.84e2	5a		phy				phy 							; save position
.84e3	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84e7	aa		tax				tax
.84e8	c8		iny				iny
.84e9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84eb	e8		inx				inx 							; bump them.
.84ec	1a		inc a				inc 	a
.84ed	20 95 a2	jsr $a295			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84f0	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84f2	29 e0		and #$e0			and 	#$E0
.84f4	d0 23		bne $8519			bne 	_DCSize
.84f6	a0 02		ldy #$02			ldy 	#2 						; get base type
.84f8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84fa	20 37 85	jsr $8537			jsr 	ScaleByBaseType 		; scale by base type
.84fd	a5 36		lda $36				lda 	zTemp0
.84ff	a6 37		ldx $37				ldx 	zTemp0+1
.8501	20 28 94	jsr $9428			jsr 	AllocateXABytes 		; allocate memory
.8504	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8506	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8508	c8		iny				iny
.8509	8a		txa				txa
.850a	91 3e		sta ($3e),y			sta 	(zaTemp),y
.850c	7a		ply				ply 							; get position back
.850d	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 		; check )
.8510	b1 30		lda ($30),y			lda 	(codePtr),y
.8512	c8		iny				iny 							; consume in case
.8513	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8515	f0 85		beq $849c			beq 	DimCommand
.8517	88		dey				dey 							; undo consume
.8518	60		rts				rts
.8519					_DCSize:
.8519	a9 16		lda #$16		lda	#22
.851b	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.851e					_DCSyntax:
.851e	4c f5 a3	jmp $a3f5			jmp 	SyntaxError
.8521					_DCRedefine:
.8521	a9 15		lda #$15		lda	#21
.8523	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.8526					_DCType:
.8526	4c ff a3	jmp $a3ff			jmp 	TypeError
.8529					_DCGetSize:
.8529	a2 00		ldx #$00			ldx 	#0 						; get first index.
.852b	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 	; get array dimension
.852e	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8530	f0 e7		beq $8519			beq 	_DCSize
.8532	c9 fe		cmp #$fe			cmp 	#254
.8534	f0 e3		beq $8519			beq 	_DCSize
.8536	60		rts				rts
.8537					ScaleByBaseType:
.8537	29 10		and #$10			and 	#NSBIsString 			; is it string
.8539	d0 19		bne $8554			bne 	_SBBTString
.853b	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.853d	48		pha				pha
.853e	a5 36		lda $36				lda 	zTemp0
.8540	48		pha				pha
.8541	06 36		asl $36				asl 	zTemp0 					; x 2
.8543	26 37		rol $37				rol 	zTemp0+1
.8545	06 36		asl $36				asl 	zTemp0 					; x 4
.8547	26 37		rol $37				rol 	zTemp0+1
.8549	68		pla				pla 							; add stacked value = x 5
.854a	65 36		adc $36				adc 	zTemp0
.854c	85 36		sta $36				sta 	zTemp0
.854e	68		pla				pla
.854f	65 37		adc $37				adc 	zTemp0+1
.8551	85 37		sta $37				sta 	zTemp0+1
.8553	60		rts				rts
.8554					_SBBTString:
.8554	06 36		asl $36				asl 	zTemp0
.8556	26 37		rol $37				rol 	zTemp0+1
.8558	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8559					EndCommand:
.8559	4c d2 83	jmp $83d2			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.855c					ForCommand:
.855c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.855e	20 2f 97	jsr $972f			jsr 	StackOpen
.8561	a2 00		ldx #$00			ldx 	#0
.8563	20 79 92	jsr $9279			jsr 	EvaluateTerm
.8566	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8569	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.856b	d0 49		bne $85b6			bne		_FCError
.856d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.856f	20 23 9e	jsr $9e23			jsr 	CheckNextA
.8572	e8		inx				inx
.8573	20 69 96	jsr $9669			jsr 	EvaluateInteger 			; <from> in +1
.8576	b1 30		lda ($30),y			lda 	(codePtr),y
.8578	c8		iny				iny 								; consume it
.8579	48		pha				pha 								; save on stack for later
.857a	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.857c	f0 04		beq $8582			beq 	_FCNoSyntax
.857e	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8580	d0 37		bne $85b9			bne 	_FCSyntaxError
.8582					_FCNoSyntax:
.8582	e8		inx				inx
.8583	20 69 96	jsr $9669			jsr 	EvaluateInteger
.8586	20 61 97	jsr $9761			jsr 	STKSaveCodePosition 		; save loop back position
.8589	68		pla				pla 								; restore DOWNTO or TO
.858a	5a		phy				phy 								; save Y on the stack
.858b	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.858d	f0 02		beq $8591			beq 	_FCNotDownTo
.858f	a9 02		lda #$02			lda 	#2
.8591					_FCNotDownTo:
.8591	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8592	a0 10		ldy #$10			ldy 	#16
.8594	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8596	a0 06		ldy #$06			ldy 	#6
.8598	ad 08 06	lda $0608			lda 	NSMantissa0
.859b	91 34		sta ($34),y			sta 	(basicStack),y
.859d	ad 10 06	lda $0610			lda 	NSMantissa1
.85a0	c8		iny				iny
.85a1	91 34		sta ($34),y			sta 	(basicStack),y
.85a3	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85a5	a2 01		ldx #$01			ldx 	#1
.85a7	20 bc 85	jsr $85bc			jsr 	FCIntegerToStack
.85aa	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85ac	a2 02		ldx #$02			ldx 	#2
.85ae	20 bc 85	jsr $85bc			jsr 	FCIntegerToStack
.85b1	20 dc 85	jsr $85dc			jsr 	CopyIndexToReference
.85b4	7a		ply				ply 								; restore position
.85b5	60		rts				rts
.85b6					_FCError:
.85b6	4c ff a3	jmp $a3ff			jmp 	TypeError
.85b9					_FCSyntaxError:
.85b9	4c f5 a3	jmp $a3f5			jmp 	SyntaxError
.85bc					FCIntegerToStack:
.85bc	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.85bf	10 03		bpl $85c4			bpl	 	_FCNotNegative
.85c1	20 a7 96	jsr $96a7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.85c4					_FCNotNegative:
.85c4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.85c7	91 34		sta ($34),y			sta 	(basicStack),y
.85c9	c8		iny				iny
.85ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85cd	91 34		sta ($34),y			sta 	(basicStack),y
.85cf	c8		iny				iny
.85d0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.85d3	91 34		sta ($34),y			sta 	(basicStack),y
.85d5	c8		iny				iny
.85d6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.85d9	91 34		sta ($34),y			sta 	(basicStack),y
.85db	60		rts				rts
.85dc					CopyIndexToReference:
.85dc	5a		phy				phy
.85dd	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85df	38		sec				sec 								; (because we copy from offset 8)
.85e0	b1 34		lda ($34),y			lda 	(basicStack),y
.85e2	e9 08		sbc #$08			sbc 	#8
.85e4	85 36		sta $36				sta 	zTemp0
.85e6	c8		iny				iny
.85e7	b1 34		lda ($34),y			lda 	(basicStack),y
.85e9	e9 00		sbc #$00			sbc 	#0
.85eb	85 37		sta $37				sta 	zTemp0+1
.85ed	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85ef	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85f1	b1 34		lda ($34),y			lda 	(basicStack),y
.85f3	0a		asl a				asl 	a 							; into carry
.85f4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85f6	90 14		bcc $860c			bcc 	_CITRNormal
.85f8	38		sec				sec
.85f9					_CITRNegative:
.85f9	a9 00		lda #$00			lda 	#0
.85fb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85fd	91 36		sta ($36),y			sta 	(zTemp0),y
.85ff	c8		iny				iny
.8600	ca		dex				dex
.8601	d0 f6		bne $85f9			bne 	_CITRNegative
.8603	88		dey				dey 								; look at MSB of mantissa
.8604	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8606	09 80		ora #$80			ora 	#$80
.8608	91 36		sta ($36),y			sta 	(zTemp0),y
.860a	7a		ply				ply
.860b	60		rts				rts
.860c					_CITRNormal:
.860c	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.860e	91 36		sta ($36),y			sta 	(zTemp0),y
.8610	c8		iny				iny
.8611	ca		dex				dex
.8612	d0 f8		bne $860c			bne 	_CITRNormal
.8614	7a		ply				ply 								; and exit.
.8615	60		rts				rts
.8616					NextCommand:
.8616	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8618	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.861a	20 56 97	jsr $9756			jsr 	StackCheckFrame
.861d	5a		phy				phy
.861e	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8620	b1 34		lda ($34),y			lda 	(basicStack),y
.8622	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8624	30 02		bmi $8628			bmi 	_NCStepNeg
.8626	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8628					_NCStepNeg:
.8628	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.862a	a2 04		ldx #$04			ldx 	#4 							; count to bump
.862c	18		clc				clc
.862d					_NCBump:
.862d	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.862f	91 34		sta ($34),y			sta 	(basicStack),y
.8631	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8633	c8		iny				iny 								; next byte
.8634	ca		dex				dex 								; do four times
.8635	d0 f6		bne $862d			bne 	_NCBump
.8637	20 dc 85	jsr $85dc			jsr		CopyIndexToReference		; copy it to the reference variable.
.863a	a0 10		ldy #$10			ldy 	#16 						; get step count again
.863c	b1 34		lda ($34),y			lda 	(basicStack),y
.863e	0a		asl a				asl 	a 							; sign bit to carry
.863f	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8641	85 38		sta $38				sta 	zTemp1
.8643	90 02		bcc $8647			bcc 	_NCCompRev 					; use if step is +ve
.8645	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8647					_NCCompRev:
.8647	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8649	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.864b	85 39		sta $39				sta 	zTemp1+1
.864d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.864f	38		sec				sec
.8650					_NCCompare:
.8650	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8652	b1 34		lda ($34),y			lda 	(basicStack),y
.8654	a4 39		ldy $39				ldy 	zTemp1+1
.8656	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8658	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.865a	e6 39		inc $39				inc 	zTemp1+1
.865c	ca		dex				dex 								; do it 4 times.
.865d	d0 f1		bne $8650			bne 	_NCCompare
.865f	50 02		bvc $8663			bvc 	_NCNoOverflow 				; convert to signed comparison
.8661	49 80		eor #$80			eor 	#$80
.8663					_NCNoOverflow:
.8663	7a		ply				ply 								; restore Y position
.8664	0a		asl a				asl 	a 							; is bit 7 set.
.8665	90 04		bcc $866b			bcc 	_NCLoopback 				; if no , >= so loop back
.8667	20 48 97	jsr $9748			jsr 	StackClose 					; exit the loop
.866a	60		rts				rts
.866b					_NCLoopBack:
.866b	20 72 97	jsr $9772			jsr 	STKLoadCodePosition 		; loop back
.866e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.866f					Command_GOSUB:
.866f	a2 00		ldx #$00			ldx 	#0
.8671	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8674	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8676	20 2f 97	jsr $972f			jsr 	StackOpen 					; create frame
.8679	20 61 97	jsr $9761			jsr 	STKSaveCodePosition 		; save current position
.867c	4c 92 86	jmp $8692			jmp 	GotoStackX
.867f					Command_RETURN:
.867f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8681	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8683	20 56 97	jsr $9756			jsr 	StackCheckFrame
.8686	20 72 97	jsr $9772			jsr 	STKLoadCodePosition 		; restore code position
.8689	20 48 97	jsr $9748			jsr 	StackClose
.868c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.868d					GotoCommand:
.868d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.868f	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger
.8692					GotoStackX:
.8692	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8695	48		pha				pha 								; it is slightly inefficient, just in cases.
.8696	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8699	fa		plx				plx
.869a	20 a2 9d	jsr $9da2			jsr 	MemorySearch 				; transfer to line number AX.
.869d	90 05		bcc $86a4			bcc 	_GotoError 					; not found, off end.
.869f	d0 03		bne $86a4			bne 	_GotoError 					; not found exactly
.86a1	4c f9 88	jmp $88f9			jmp 	RunNewLine 					; and go straight to new line code.
.86a4					_GotoError:
.86a4	a9 0d		lda #$0d		lda	#13
.86a6	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86a9					IfCommand:
.86a9	a2 00		ldx #$00			ldx 	#0 							; If what.
.86ab	20 46 96	jsr $9646			jsr 	EvaluateNumber
.86ae	b1 30		lda ($30),y			lda 	(codePtr),y
.86b0	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.86b2	d0 0a		bne $86be			bne 	_IFStructured
.86b4	c8		iny				iny 								; consume THEN
.86b5	20 22 97	jsr $9722			jsr 	NSMIsZero 					; is it zero
.86b8	f0 01		beq $86bb			beq 	_IfFail 					; if fail, go to next line
.86ba	60		rts				rts 								; if THEN just continue
.86bb					_IfFail:
.86bb	4c 4b 89	jmp $894b			jmp 	EOLCommand
.86be					_IfStructured:
.86be	20 22 97	jsr $9722			jsr 	NSMIsZero 					; is it zero
.86c1	d0 07		bne $86ca			bne 	_IfExit 					; if not, then continue normally.
.86c3	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.86c5	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.86c7	20 11 8b	jsr $8b11			jsr 	ScanForward 				; and run from there/
.86ca					_IfExit:
.86ca	60		rts				rts
.86cb					ElseCode:
.86cb	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.86cd	aa		tax				tax 								; so just go to the structure exit
.86ce	20 11 8b	jsr $8b11			jsr 	ScanForward
.86d1	60		rts				rts
.86d2					EndIf:
.86d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.86d3					LetCommand:
.86d3	a2 00		ldx #$00			ldx 	#0
.86d5	ad 90 8f	lda $8f90			lda 	PrecedenceLevel+"*"			; precedence > this
.86d8	20 aa 8f	jsr $8faa			jsr 	EvaluateExpressionAtPrecedence
.86db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.86de	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86e0	f0 0e		beq $86f0			beq 	_LetGoProc 					; it's a procedure call.
.86e2	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86e4	20 23 9e	jsr $9e23			jsr 	CheckNextA
.86e7	e8		inx				inx 								; RHS
.86e8	20 3d 96	jsr $963d			jsr 	EvaluateValue
.86eb	ca		dex				dex
.86ec	20 f3 86	jsr $86f3			jsr 	AssignVariable
.86ef	60		rts				rts
.86f0					_LetGoProc:
.86f0	4c 03 88	jmp $8803			jmp 	CallProcedure
.86f3					AssignVariable:
.86f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.86f6	48		pha				pha 								; save a copy
.86f7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86fa	29 10		and #$10			and 	#NSBIsString
.86fc	d0 0b		bne $8709			bne 	_ASError
.86fe	68		pla				pla 								; get back
.86ff	29 10		and #$10			and 	#NSBIsString 				; check type
.8701	d0 03		bne $8706			bne 	_ASString
.8703	4c e5 8f	jmp $8fe5			jmp 	AssignNumber
.8706					_ASString:
.8706	4c 53 90	jmp $9053			jmp 	AssignString
.8709					_ASError:
.8709	4c ff a3	jmp $a3ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.870c					Command_List:
.870c	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.870f	9c 14 06	stz $0614			stz 	NSMantissa1+4
.8712	a9 ff		lda #$ff			lda 	#$FF
.8714	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8717	8d 17 06	sta $0617			sta 	NSMantissa1+7
.871a	b1 30		lda ($30),y			lda 	(codePtr),y
.871c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.871e	f0 1e		beq $873e			beq 	_CLSecond
.8720	20 97 87	jsr $8797			jsr 	CLIsDigit 					; if not digit, list all
.8723	b0 24		bcs $8749			bcs 	_CLStart
.8725	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8727	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger
.872a	b1 30		lda ($30),y			lda 	(codePtr),y
.872c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.872e	f0 0e		beq $873e			beq 	_CLSecond 					; if so go get it
.8730	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8733	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8736	ad 14 06	lda $0614			lda 	NSMantissa1+4
.8739	8d 17 06	sta $0617			sta 	NSMantissa1+7
.873c	80 0b		bra $8749			bra 	_CLStart
.873e					_CLSecond:
.873e	c8		iny				iny 								; consume comma
.873f	20 97 87	jsr $8797			jsr 	CLIsDigit 					; digit found
.8742	b0 05		bcs $8749			bcs 	_CLStart 					; if not, continue listing
.8744	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8746	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger
.8749					_CLStart
.8749	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.874b	85 30		sta $30				sta 	codePtr
.874d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.874f	85 31		sta $31				sta 	codePtr+1
.8751					_CLLoop:
.8751	b2 30		lda ($30)			lda 	(codePtr)
.8753	f0 2c		beq $8781			beq 	_CLExit
.8755	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8757	20 84 87	jsr $8784			jsr 	CLCompareLineNo
.875a	90 18		bcc $8774			bcc 	_CLNext
.875c	a2 07		ldx #$07			ldx 	#7
.875e	20 84 87	jsr $8784			jsr 	CLCompareLineNo
.8761	f0 02		beq $8765			beq 	_CLDoThisOne
.8763	b0 0f		bcs $8774			bcs 	_CLNext
.8765					_CLDoThisOne:
.8765	20 70 89	jsr $8970			jsr 	ListConvertLine 			; convert line into token Buffer
.8768	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.876a	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.876c	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA
.876f	a9 0d		lda #$0d			lda 	#13 						; new line
.8771	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.8774					_CLNext:
.8774	18		clc				clc
.8775	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8777	65 30		adc $30				adc 	codePtr
.8779	85 30		sta $30				sta 	codePtr
.877b	90 02		bcc $877f			bcc 	_CREExit
.877d	e6 31		inc $31				inc 	codePtr+1
.877f					_CREExit:
.877f	80 d0		bra $8751			bra 	_CLLoop
.8781					_CLExit:
.8781	4c d2 83	jmp $83d2			jmp 	WarmStart
.8784					CLCompareLineNo:
.8784	38		sec				sec
.8785	a0 01		ldy #$01			ldy 	#1
.8787	b1 30		lda ($30),y			lda 	(codePtr),y
.8789	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.878c	85 36		sta $36				sta 	zTemp0
.878e	c8		iny				iny
.878f	b1 30		lda ($30),y			lda 	(codePtr),y
.8791	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8794	05 36		ora $36				ora 	zTemp0
.8796	60		rts				rts
.8797					CLIsDigit:
.8797	b1 30		lda ($30),y			lda 	(codePtr),y
.8799	c9 30		cmp #$30			cmp 	#"0"
.879b	90 03		bcc $87a0			bcc	 	_CLIDExitFalse
.879d	c9 3a		cmp #$3a			cmp 	#"9"+1
.879f	60		rts				rts
.87a0					_CLIDExitFalse:
.87a0	38		sec				sec
.87a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.87a2					NewCommand:
.87a2	20 51 9d	jsr $9d51			jsr 	MemoryNew
.87a5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.87a8	20 3f 84	jsr $843f			jsr 	ClearCommand 				; clear everything.
.87ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.87ac					Command_Print:
.87ac	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87ad					_CPLoop:
.87ad	08		php				php 								; save last action flag
.87ae	b1 30		lda ($30),y			lda 	(codePtr),y
.87b0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87b2	f0 46		beq $87fa			beq 	_CPExit
.87b4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87b6	f0 42		beq $87fa			beq 	_CPExit
.87b8	68		pla				pla 								; throw last action flag
.87b9	b1 30		lda ($30),y			lda 	(codePtr),y
.87bb	c8		iny				iny
.87bc	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87be	f0 37		beq $87f7			beq 	_CPContinueWithSameLine
.87c0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87c2	f0 2e		beq $87f2			beq 	_CPTab
.87c4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.87c6	f0 26		beq $87ee			beq 	_CPNewLine
.87c8	88		dey				dey 								; undo the get.
.87c9	a2 00		ldx #$00			ldx 	#0
.87cb	20 3d 96	jsr $963d			jsr 	EvaluateValue 				; get a value into slot 0
.87ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.87d1	29 10		and #$10			and 	#NSBIsString
.87d3	f0 0b		beq $87e0			beq 	_CPNumber
.87d5	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.87d8	ad 08 06	lda $0608			lda 	NSMantissa0
.87db	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA
.87de	80 cc		bra $87ac			bra 	Command_Print 				; loop round clearing carry so NL if end
.87e0					_CPNumber:
.87e0	a9 05		lda #$05			lda 	#5 							; maximum decimals
.87e2	20 13 95	jsr $9513			jsr 	ConvertNumberToString 		; convert to string
.87e5	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.87e7	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.87e9	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA
.87ec	80 be		bra $87ac			bra 	Command_Print 				; loop round clearing carry so NL if end
.87ee					_CPNewLine:
.87ee	a9 0d		lda #$0d			lda 	#13
.87f0	80 02		bra $87f4			bra 	_CPPrintChar
.87f2					_CPTab:
.87f2	a9 09		lda #$09			lda 	#9 							; print TAB
.87f4					_CPPrintChar:
.87f4	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.87f7					_CPContinueWithSameLine:
.87f7	38		sec				sec 								; loop round with carry set, which
.87f8	80 b3		bra $87ad			bra 	_CPLoop 					; will inhibit final CR
.87fa					_CPExit:
.87fa	28		plp				plp 								; get last action flag
.87fb	b0 05		bcs $8802			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87fd	a9 0d		lda #$0d			lda 	#13 						; print new line
.87ff	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.8802					_CPExit2:
.8802	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8803					CallProcedure:
.8803	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.8806	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8808	20 2f 97	jsr $972f			jsr 	StackOpen
.880b	20 61 97	jsr $9761			jsr 	STKSaveCodePosition 		; save loop position
.880e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8811	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8813	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8816	85 37		sta $37				sta 	zTemp0+1
.8818	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.881a	b2 36		lda ($36)			lda 	(zTemp0)
.881c	85 30		sta $30				sta 	safePtr
.881e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8820	85 31		sta $31				sta 	safePtr+1
.8822	c8		iny				iny
.8823	b1 36		lda ($36),y			lda 	(zTemp0),y
.8825	85 32		sta $32				sta 	safePtr+2
.8827	c8		iny				iny
.8828	b1 36		lda ($36),y			lda 	(zTemp0),y
.882a	85 33		sta $33				sta 	safePtr+3
.882c	c8		iny				iny 								; get Y offset -> Y
.882d	b1 36		lda ($36),y			lda 	(zTemp0),y
.882f	a8		tay				tay
.8830	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; check )
.8833	60		rts				rts 								; and continue from here
.9e05					Command_ENDPROC:
.9e05	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9e07	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9e09	20 56 97	jsr $9756			jsr 	StackCheckFrame
.9e0c	20 72 97	jsr $9772			jsr 	STKLoadCodePosition 		; restore code position
.9e0f	20 48 97	jsr $9748			jsr 	StackClose
.9e12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8834					Command_Read:
.8834	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8836	20 79 92	jsr $9279			jsr 	EvaluateTerm
.8839	bd 00 06	lda $0600,x			lda 	NSStatus,x
.883c	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.883e	f0 4a		beq $888a			beq 	_CRSyntax 					; check reference (bit 0)
.8840	20 d3 88	jsr $88d3			jsr 	SwapDataCodePtrs 			; swap code and data
.8843	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8846	d0 20		bne $8868			bne 	_CRContinueData
.8848					_CRKeepSearching:
.8848	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.884a	aa		tax				tax
.884b	20 11 8b	jsr $8b11			jsr 	ScanForward
.884e	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8850	f0 16		beq $8868			beq 	_CRHaveData 				; found it
.8852	18		clc				clc
.8853	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8855	65 30		adc $30				adc 	codePtr
.8857	85 30		sta $30				sta 	codePtr
.8859	90 02		bcc $885d			bcc 	_CREExit
.885b	e6 31		inc $31				inc 	codePtr+1
.885d					_CREExit:
.885d	a0 03		ldy #$03			ldy 	#3 							; start of line.
.885f	b2 30		lda ($30)			lda 	(codePtr)
.8861	d0 e5		bne $8848			bne 	_CRKeepSearching
.8863	a9 0b		lda #$0b		lda	#11
.8865	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.8868					_CRHaveData:
.8868					_CRContinueData:
.8868	a2 01		ldx #$01			ldx 	#1
.886a	20 3d 96	jsr $963d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.886d	ca		dex				dex
.886e	20 f3 86	jsr $86f3			jsr		AssignVariable 				; do the assignment
.8871	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.8874	b1 30		lda ($30),y			lda 	(codePtr),y
.8876	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8878	d0 04		bne $887e			bne 	_CRSwapBack
.887a	c8		iny				iny 								; consume comma
.887b	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.887e					_CRSwapBack:
.887e	20 d3 88	jsr $88d3			jsr 	SwapDataCodePtrs			; swap them back.
.8881	b1 30		lda ($30),y			lda 	(codePtr),y
.8883	c8		iny				iny
.8884	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8886	f0 ac		beq $8834			beq 	Command_Read 				; if so go round again.
.8888	88		dey				dey 								; unpick get.
.8889	60		rts				rts
.888a					_CRSyntax:
.888a	4c f5 a3	jmp $a3f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.888d					RemCommand:
.888d	b1 30		lda ($30),y			lda 	(codePtr),y
.888f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8891	d0 06		bne $8899			bne 	_RMExit
.8893	c8		iny				iny
.8894	98		tya				tya
.8895	38		sec				sec
.8896	71 30		adc ($30),y			adc 	(codePtr),y
.8898	a8		tay				tay
.8899					_RMExit:
.8899	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.889a					Command_REPEAT:
.889a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.889c	20 2f 97	jsr $972f			jsr 	StackOpen
.889f	20 61 97	jsr $9761			jsr 	STKSaveCodePosition 		; save loop position
.88a2	60		rts				rts
.88a3					Command_UNTIL:
.88a3	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.88a5	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.88a7	20 56 97	jsr $9756			jsr 	StackCheckFrame
.88aa	a2 00		ldx #$00			ldx 	#0
.88ac	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; work out the number
.88af	20 22 97	jsr $9722			jsr 	NSMIsZero 					; check if zero
.88b2	f0 04		beq $88b8			beq 	_CULoopBack 				; if so keep looping
.88b4	20 48 97	jsr $9748			jsr 	StackClose		 			; return
.88b7	60		rts				rts
.88b8					_CULoopBack:
.88b8	20 72 97	jsr $9772			jsr 	STKLoadCodePosition 		; loop back
.88bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.88bc					Command_Restore:
.88bc	20 d3 88	jsr $88d3			jsr 	SwapDataCodePtrs 			; swap code and data
.88bf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88c1	85 30		sta $30				sta 	codePtr
.88c3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88c5	85 31		sta $31				sta 	codePtr+1
.88c7	20 d3 88	jsr $88d3			jsr 	SwapDataCodePtrs 			; put them back
.88ca	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.88cc	8d 19 07	sta $0719			sta 	dataPointer+4
.88cf	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.88d2	60		rts				rts
.88d3					SwapDataCodePtrs:
.88d3	da		phx				phx
.88d4	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.88d6					_SDCPLoop:
.88d6	b5 30		lda $30,x			lda 	safePtr,x
.88d8	48		pha				pha
.88d9	bd 15 07	lda $0715,x			lda 	dataPointer,x
.88dc	95 30		sta $30,x			sta 	safePtr,x
.88de	68		pla				pla
.88df	9d 15 07	sta $0715,x			sta 	dataPointer,x
.88e2	ca		dex				dex
.88e3	10 f1		bpl $88d6			bpl 	_SDCPLoop
.88e5	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.88e8	8c 19 07	sty $0719			sty 	dataPointer+4
.88eb	a8		tay				tay
.88ec	fa		plx				plx
.88ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.88ee					CommandRUN:
.88ee	20 3f 84	jsr $843f			jsr 	ClearCommand 				; clear variable/stacks/etc.
.88f1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88f3	85 30		sta $30				sta 	codePtr
.88f5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88f7	85 31		sta $31				sta 	codePtr+1
.88f9					RUNNewLine:
.88f9	b2 30		lda ($30)			lda 	(codePtr)
.88fb	f0 4b		beq $8948			beq 	CRNoProgram         		; no then END.
.88fd	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.88ff	9a		txs				txs
.8900					RUNCodePointerLine:
.8900	a0 02		ldy #$02			ldy 	#2 							; start of program
.8902					_CRIncMainLoop:
.8902	c8		iny				iny
.8903					_CRMainLoop:
.8903	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8906	b1 30		lda ($30),y			lda 	(codePtr),y
.8908	10 10		bpl $891a			bpl 	_CRNotKeyword
.890a	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.890c	b0 04		bcs $8912			bcs 	_CRIsKeyword
.890e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8910	b0 30		bcs $8942			bcs		_CRSyntaxError
.8912					_CRIsKeyword:
.8912	c8		iny				iny 								; consume command
.8913	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8914	aa		tax				tax 								; put in X for vector jump
.8915	20 45 89	jsr $8945			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8918	80 e9		bra $8903			bra 	_CRMainLoop 				; and loop round
.891a					_CRNotKeyword:
.891a	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.891c	f0 e4		beq $8902			beq 	_CRIncMainLoop
.891e	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8920	90 05		bcc $8927			bcc 	_CRNotVariable
.8922					_CRGoLet:
.8922	20 d3 86	jsr $86d3			jsr 	LetCommand
.8925	80 dc		bra $8903			bra 	_CRMainLoop
.8927					_CRNotVariable:
.8927	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8929	f0 f7		beq $8922			beq 	_CRGoLet
.892b	c9 21		cmp #$21			cmp 	#KWD_PLING
.892d	f0 f3		beq $8922			beq 	_CRGoLet
.892f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8931	f0 09		beq $893c			beq 	_CRGoRem
.8933	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8935	d0 0b		bne $8942			bne 	_CRSyntaxError
.8937	20 2e 83	jsr $832e			jsr 	LabelHere
.893a	80 c7		bra $8903			bra 	_CRMainLoop
.893c					_CRGoRem:
.893c	c8		iny				iny
.893d	20 8d 88	jsr $888d			jsr 	RemCommand
.8940	80 c1		bra $8903			bra 	_CRMainLoop
.8942					_CRSyntaxError:
.8942	4c f5 a3	jmp $a3f5			jmp 	SyntaxError
.8945					_CRCallVector0:
.8945	7c 8c 80	jmp ($808c,x)			jmp 	(VectorSet0,x)
.8948					CRNoProgram:
.8948	4c 59 85	jmp $8559			jmp 	EndCommand
.894b					EOLCommand:
.894b	18		clc				clc
.894c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.894e	65 30		adc $30				adc 	codePtr
.8950	85 30		sta $30				sta 	codePtr
.8952	90 02		bcc $8956			bcc 	_CREExit
.8954	e6 31		inc $31				inc 	codePtr+1
.8956					_CREExit:
.8956	80 a1		bra $88f9			bra 	RunNewLine
.8958					Shift1Command:
.8958	b1 30		lda ($30),y			lda 	(codePtr),y
.895a	c8		iny				iny
.895b	0a		asl a				asl 	a
.895c	aa		tax				tax
.895d	7c ea 80	jmp ($80ea,x)			jmp 	(VectorSet1,x)
.8960					Shift2Command:
.8960	b1 30		lda ($30),y			lda 	(codePtr),y
.8962	c8		iny				iny
.8963	0a		asl a				asl 	a
.8964	aa		tax				tax
.8965	7c 02 81	jmp ($8102,x)			jmp 	(VectorSet2,x)
.8968					Unused1:
.8968					Unused2:
.8968					Unused3:
.8968					Unused4:
.8968	4c f5 a3	jmp $a3f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.896b					StopCommand:
.896b	a9 08		lda #$08		lda	#8
.896d	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8970					ListConvertLine:
.8970	9c 1b 07	stz $071b			stz 	tbOffset
.8973	9c 27 07	stz $0727			stz 	tokenBuffer
.8976	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8978	b1 30		lda ($30),y			lda 	(codePtr),y
.897a	aa		tax				tax
.897b	88		dey				dey
.897c	b1 30		lda ($30),y			lda 	(codePtr),y
.897e	20 6f 9f	jsr $9f6f			jsr 	ConvertInt16
.8981	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8983	86 37		stx $37				stx 	zTemp0+1
.8985	a0 00		ldy #$00			ldy 	#0
.8987					_LCCopyNumber:
.8987	b1 36		lda ($36),y			lda 	(zTemp0),y
.8989	20 86 8a	jsr $8a86			jsr 	LCLWrite
.898c	c8		iny				iny
.898d	b1 36		lda ($36),y			lda 	(zTemp0),y
.898f	d0 f6		bne $8987			bne 	_LCCopyNumber
.8991					_LCPadOut:
.8991	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8993	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8996	ad 1b 07	lda $071b			lda 	tbOffset
.8999	c9 06		cmp #$06			cmp 	#6
.899b	d0 f4		bne $8991			bne 	_LCPadOut
.899d	a0 03		ldy #$03			ldy 	#3 							; start position.
.899f					_LCMainLoop:
.899f	b1 30		lda ($30),y			lda 	(codePtr),y
.89a1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.89a3	f0 17		beq $89bc			beq 	_LCExit
.89a5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.89a7	90 14		bcc $89bd			bcc 	_LCDoubles
.89a9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.89ab	90 20		bcc $89cd			bcc 	_LCShiftPunc
.89ad	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.89af	90 2b		bcc $89dc			bcc 	_LCPunctuation
.89b1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.89b3	90 2d		bcc $89e2			bcc 	_LCIdentifiers
.89b5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.89b7	90 49		bcc $8a02			bcc 	_LCTokens
.89b9	4c 5a 8a	jmp $8a5a			jmp 	_LCData 					; 254-5 are data objects
.89bc					_LCExit:
.89bc	60		rts				rts
.89bd					_LCDoubles:
.89bd	48		pha				pha
.89be	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.89bf	29 02		and #$02			and 	#2
.89c1	09 3c		ora #$3c			ora 	#60 						; make < >
.89c3	20 86 8a	jsr $8a86			jsr 	LCLWrite
.89c6	68		pla				pla 								; restore, do lower bit
.89c7	29 03		and #$03			and 	#3
.89c9	09 3c		ora #$3c			ora 	#60
.89cb	80 0f		bra $89dc			bra		_LCPunctuation 				; print, increment, loop
.89cd					_LCShiftPunc:
.89cd	aa		tax				tax 								; save in X
.89ce	29 07		and #$07			and 	#7 							; lower 3 bits
.89d0	f0 02		beq $89d4			beq 	_LCNoAdd
.89d2	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.89d4					_LCNoAdd:
.89d4	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.89d6	90 02		bcc $89da			bcc 	_LCNoAdd2
.89d8	09 20		ora #$20			ora 	#32 						; adds $20
.89da					_LCNoAdd2:
.89da	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.89dc					_LCPunctuation:
.89dc	c8		iny				iny 								; consume character
.89dd	20 86 8a	jsr $8a86			jsr 	LCLWrite 					; write it out.
.89e0	80 bd		bra $899f			bra 	_LCMainLoop 				; go round again.
.89e2					_LCIdentifiers:
.89e2	18		clc				clc 								; convert to physical address
.89e3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.89e5	85 37		sta $37				sta 	zTemp0+1
.89e7	c8		iny				iny
.89e8	b1 30		lda ($30),y			lda 	(codePtr),y
.89ea	85 36		sta $36				sta 	zTemp0
.89ec	c8		iny				iny
.89ed	5a		phy				phy 								; save position
.89ee	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.89f0					_LCOutIdentifier:
.89f0	c8		iny				iny
.89f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.89f3	29 7f		and #$7f			and 	#$7F
.89f5	20 b4 8a	jsr $8ab4			jsr 	LCLLowerCase
.89f8	20 86 8a	jsr $8a86			jsr 	LCLWrite
.89fb	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.89fd	10 f1		bpl $89f0			bpl 	_LCOutIdentifier
.89ff	7a		ply				ply 								; restore position
.8a00	80 9d		bra $899f			bra 	_LCMainLoop
.8a02					_LCTokens:
.8a02	aa		tax				tax 								; token in X
.8a03	a9 8b		lda #$8b			lda 	#((KeywordSet2) & $FF)
.8a05	85 36		sta $36				sta 	0+zTemp0
.8a07	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.8a09	85 37		sta $37				sta 	1+zTemp0
.8a0b	e0 82		cpx #$82			cpx 	#$82
.8a0d	f0 16		beq $8a25			beq 	_LCUseShift
.8a0f	a9 47		lda #$47			lda 	#((KeywordSet1) & $FF)
.8a11	85 36		sta $36				sta 	0+zTemp0
.8a13	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.8a15	85 37		sta $37				sta 	1+zTemp0
.8a17	e0 81		cpx #$81			cpx 	#$81
.8a19	f0 0a		beq $8a25			beq 	_LCUseShift
.8a1b	a9 25		lda #$25			lda 	#((KeywordSet0) & $FF)
.8a1d	85 36		sta $36				sta 	0+zTemp0
.8a1f	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8a21	85 37		sta $37				sta 	1+zTemp0
.8a23	80 01		bra $8a26			bra 	_LCNoShift
.8a25					_LCUseShift:
.8a25	c8		iny				iny
.8a26					_LCNoShift:
.8a26	20 95 8a	jsr $8a95			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8a29	b1 30		lda ($30),y			lda 	(codePtr),y
.8a2b	aa		tax				tax 								; into X
.8a2c					_LCFindText:
.8a2c	ca		dex				dex
.8a2d	10 0e		bpl $8a3d			bpl 	_LCFoundText 				; found text.
.8a2f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8a31	1a		inc a				inc 	a 							; one extra for size
.8a32	38		sec				sec 								; one extra for checksum
.8a33	65 36		adc $36				adc 	zTemp0 						; go to next token
.8a35	85 36		sta $36				sta 	zTemp0
.8a37	90 f3		bcc $8a2c			bcc 	_LCFindText
.8a39	e6 37		inc $37				inc 	zTemp0+1
.8a3b	80 ef		bra $8a2c			bra 	_LCFindText
.8a3d					_LCFoundText:
.8a3d	5a		phy				phy 								; save List position
.8a3e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8a40	aa		tax				tax
.8a41	a0 02		ldy #$02			ldy 	#2
.8a43					_LCCopyToken:
.8a43	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a45	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8a48	c8		iny				iny
.8a49	ca		dex				dex
.8a4a	d0 f7		bne $8a43			bne 	_LCCopyToken
.8a4c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8a4e	f0 05		beq $8a55			beq 	_LCNoSpace
.8a50	a9 20		lda #$20			lda 	#' '
.8a52	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8a55					_LCNoSpace:
.8a55	7a		ply				ply 								; restore position.
.8a56	c8		iny				iny 								; consume token
.8a57	4c 9f 89	jmp $899f			jmp 	_LCMainLoop 				; and go around again.
.8a5a					_LCData:
.8a5a	48		pha				pha 								; save type $FE/$FF
.8a5b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8a5d	c9 fe		cmp #$fe			cmp 	#$FE
.8a5f	f0 02		beq $8a63			beq 	_LCHaveOpener
.8a61	a2 22		ldx #$22			ldx 	#'"'
.8a63					_LCHaveOpener:
.8a63	8a		txa				txa 								; output prefix (# or ")
.8a64	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8a67	c8		iny				iny 								; get count
.8a68	b1 30		lda ($30),y			lda 	(codePtr),y
.8a6a	aa		tax				tax
.8a6b	c8		iny				iny 								; point at first character
.8a6c					_LCOutData:
.8a6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a6e	c9 00		cmp #$00			cmp 	#0
.8a70	f0 03		beq $8a75			beq 	_LCNoPrint
.8a72	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8a75					_LCNoPrint:
.8a75	c8		iny				iny
.8a76	ca		dex				dex
.8a77	d0 f3		bne $8a6c			bne 	_LCOutData
.8a79	68		pla				pla 								; closing " required ?
.8a7a	c9 ff		cmp #$ff			cmp 	#$FF
.8a7c	d0 05		bne $8a83			bne 	_LCNoQuote
.8a7e	a9 22		lda #$22			lda 	#'"'
.8a80	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8a83					_LCNoQuote:
.8a83	4c 9f 89	jmp $899f			jmp 	_LCMainLoop
.8a86					LCLWrite:
.8a86	da		phx				phx
.8a87	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a8a	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.8a8d	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.8a90	ee 1b 07	inc $071b			inc 	tbOffset
.8a93	fa		plx				plx
.8a94	60		rts				rts
.8a95					LCCheckSpaceRequired:
.8a95	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a98	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.8a9b	20 b4 8a	jsr $8ab4			jsr 	LCLLowerCase 				; saves a little effort
.8a9e	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8aa0	90 11		bcc $8ab3			bcc 	_LCCSRExit
.8aa2	c9 3a		cmp #$3a			cmp 	#"9"+1
.8aa4	90 08		bcc $8aae			bcc 	_LCCSRSpace
.8aa6	c9 61		cmp #$61			cmp 	#"a"
.8aa8	90 09		bcc $8ab3			bcc 	_LCCSRExit
.8aaa	c9 7b		cmp #$7b			cmp 	#"z"+1
.8aac	b0 05		bcs $8ab3			bcs 	_LCCSRExit
.8aae					_LCCSRSpace:
.8aae	a9 20		lda #$20			lda 	#' '
.8ab0	20 86 8a	jsr $8a86			jsr 	LCLWrite
.8ab3					_LCCSRExit:
.8ab3	60		rts				rts
.8ab4					LCLLowerCase:
.8ab4	c9 41		cmp #$41			cmp 	#"A"
.8ab6	90 06		bcc $8abe			bcc 	_LCLLCOut
.8ab8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8aba	b0 02		bcs $8abe			bcs 	_LCLLCOut
.8abc	69 20		adc #$20			adc 	#$20
.8abe					_LCLLCOut:
.8abe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8abf					ProcedureScan:
.8abf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ac1	85 30		sta $30				sta 	codePtr
.8ac3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ac5	85 31		sta $31				sta 	codePtr+1
.8ac7					_PSLoop:
.8ac7	b2 30		lda ($30)			lda 	(codePtr)
.8ac9	f0 42		beq $8b0d			beq 	_PSExit
.8acb	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8acd	b1 30		lda ($30),y			lda 	(codePtr),y
.8acf	c9 98		cmp #$98			cmp 	#KWD_PROC
.8ad1	d0 2d		bne $8b00			bne 	_PSNext
.8ad3	c8		iny				iny 								; get the address of the record to zTemp0 and
.8ad4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad6	29 c0		and #$c0			and 	#$C0
.8ad8	c9 40		cmp #$40			cmp 	#$40
.8ada	d0 32		bne $8b0e			bne 	_PSSyntax
.8adc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ade	18		clc				clc
.8adf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8ae1	85 37		sta $37				sta 	zTemp0+1
.8ae3	c8		iny				iny 								; LSB
.8ae4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae6	85 36		sta $36				sta 	zTemp0
.8ae8	c8		iny				iny 								; character after variable call.
.8ae9	98		tya				tya 								; save Y offset at +7
.8aea	a0 07		ldy #$07			ldy 	#7
.8aec	91 36		sta ($36),y			sta 	(zTemp0),y
.8aee	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8af0	a0 02		ldy #$02			ldy 	#2
.8af2	91 36		sta ($36),y			sta 	(zTemp0),y
.8af4	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8af6					_PSCopy:
.8af6	b5 30		lda $30,x			lda 	safePtr,x
.8af8	c8		iny				iny
.8af9	91 36		sta ($36),y			sta 	(zTemp0),y
.8afb	e8		inx				inx
.8afc	e0 04		cpx #$04			cpx 	#4
.8afe	d0 f6		bne $8af6			bne 	_PSCopy
.8b00					_PSNext:
.8b00	18		clc				clc
.8b01	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b03	65 30		adc $30				adc 	codePtr
.8b05	85 30		sta $30				sta 	codePtr
.8b07	90 02		bcc $8b0b			bcc 	_CREExit
.8b09	e6 31		inc $31				inc 	codePtr+1
.8b0b					_CREExit:
.8b0b	80 ba		bra $8ac7			bra 	_PSLoop
.8b0d					_PSExit:
.8b0d	60		rts				rts
.8b0e					_PSSyntax:
.8b0e	4c f5 a3	jmp $a3f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8b11					ScanForward:
.8b11	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8b13	86 37		stx $37				stx 	zTemp0+1
.8b15	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8b17					_ScanLoop:
.8b17	b1 30		lda ($30),y			lda 	(codePtr),y
.8b19	c8		iny				iny
.8b1a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8b1c	d0 0e		bne $8b2c			bne 	_ScanGoNext
.8b1e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8b20	f0 04		beq $8b26			beq 	_ScanMatch
.8b22	c5 37		cmp $37				cmp 	zTemp0+1
.8b24	d0 06		bne $8b2c			bne 	_ScanGoNext
.8b26					_ScanMatch:
.8b26	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8b28	d0 01		bne $8b2b			bne 	_ScanNotEndEOL
.8b2a	88		dey				dey
.8b2b					_ScanNotEndEOL:
.8b2b	60		rts				rts
.8b2c					_ScanGoNext:
.8b2c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8b2e	90 e7		bcc $8b17			bcc 	_ScanLoop
.8b30	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8b32	90 18		bcc $8b4c			bcc 	_ScanSkipOne
.8b34	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8b36	b0 2f		bcs $8b67			bcs 	_ScanSkipData
.8b38	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8b3a	90 db		bcc $8b17			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8b3c	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8b3e	b0 d7		bcs $8b17			bcs 	_ScanLoop
.8b40	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8b42	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8b44	b0 d1		bcs $8b17			bcs 	_ScanLoop
.8b46	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8b48	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8b4a	80 cb		bra $8b17			bra 	_ScanLoop
.8b4c					_ScanSkipOne:
.8b4c	c8		iny				iny 								; consume the extra one.
.8b4d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8b4f	d0 c6		bne $8b17			bne 	_ScanLoop
.8b51	18		clc				clc
.8b52	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b54	65 30		adc $30				adc 	codePtr
.8b56	85 30		sta $30				sta 	codePtr
.8b58	90 02		bcc $8b5c			bcc 	_CREExit
.8b5a	e6 31		inc $31				inc 	codePtr+1
.8b5c					_CREExit:
.8b5c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8b5e	b2 30		lda ($30)			lda 	(codePtr)
.8b60	d0 b5		bne $8b17			bne 	_ScanLoop 					; if not zero, more to scan
.8b62	a9 13		lda #$13		lda	#19
.8b64	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.8b67					_ScanSkipData:
.8b67	88		dey				dey 								; point at data token
.8b68	c8		iny				iny
.8b69	98		tya				tya
.8b6a	38		sec				sec
.8b6b	71 30		adc ($30),y			adc 	(codePtr),y
.8b6d	a8		tay				tay
.8b6e	80 a7		bra $8b17			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8b70					Command_WHILE:
.8b70	5a		phy				phy 								; save position of the test
.8b71	a2 00		ldx #$00			ldx 	#0
.8b73	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; work out the number
.8b76	20 22 97	jsr $9722			jsr 	NSMIsZero 					; check if zero
.8b79	f0 0e		beq $8b89			beq 	_WHExitLoop 				; if so exit the loop
.8b7b	98		tya				tya 								; position *after* test.
.8b7c	7a		ply				ply 								; restore position before test, at WHILE
.8b7d	88		dey				dey
.8b7e	48		pha				pha 								; push after test on the stack
.8b7f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8b81	20 2f 97	jsr $972f			jsr 	StackOpen
.8b84	20 61 97	jsr $9761			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8b87	7a		ply				ply 								; restore the position *after* the test
.8b88	60		rts				rts
.8b89					_WHExitLoop:
.8b89	68		pla				pla 								; throw post loop position
.8b8a	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8b8c	aa		tax				tax
.8b8d	20 11 8b	jsr $8b11			jsr 	ScanForward
.8b90	60		rts				rts
.8b91					Command_WEND:
.8b91	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8b93	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8b95	20 56 97	jsr $9756			jsr 	StackCheckFrame
.8b98	20 72 97	jsr $9772			jsr 	STKLoadCodePosition 		; loop back
.8b9b	20 48 97	jsr $9748			jsr 	StackClose		 			; erase the frame
.8b9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9e13					CheckRightBracket:
.9e13	b1 30		lda ($30),y			lda 	(codePtr),y
.9e15	c8		iny				iny
.9e16	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9e18	d0 0f		bne $9e29			bne 	CNAFail
.9e1a	60		rts				rts
.9e1b					CheckComma:
.9e1b	b1 30		lda ($30),y			lda 	(codePtr),y
.9e1d	c8		iny				iny
.9e1e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9e20	d0 07		bne $9e29			bne 	CNAFail
.9e22	60		rts				rts
.9e23					CheckNextA:
.9e23	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9e25	d0 02		bne $9e29			bne 	CNAFail
.9e27	c8		iny				iny 								; skip character
.9e28	60		rts				rts 								; and exit
.9e29					CNAFail:
.9e29	4c f5 a3	jmp $a3f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8b9f					ErrorHandler:
.8b9f	a8		tay				tay 								; find the error text
.8ba0	f0 49		beq $8beb			beq 	_EHEnd
.8ba2	a2 00		ldx #$00			ldx 	#0
.8ba4	a9 0e		lda #$0e			lda 	#((ErrorText) & $FF)
.8ba6	85 36		sta $36				sta 	0+zTemp0
.8ba8	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8baa	85 37		sta $37				sta 	1+zTemp0
.8bac					_EHFind:
.8bac	88		dey				dey 								; found the error text ?
.8bad	f0 0e		beq $8bbd			beq 	_EHFound
.8baf					_EHFindZero:
.8baf	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8bb1	e6 36		inc $36				inc 	zTemp0
.8bb3	d0 02		bne $8bb7			bne 	_EHFNoCarry
.8bb5	e6 37		inc $37				inc 	zTemp0+1
.8bb7					_EHFNoCarry:
.8bb7	c9 00		cmp #$00			cmp 	#0
.8bb9	d0 f4		bne $8baf			bne 	_EHFindZero
.8bbb	80 ef		bra $8bac			bra 	_EHFind
.8bbd					_EHFound:
.8bbd	a5 36		lda $36				lda 	zTemp0 						; print message
.8bbf	a6 37		ldx $37				ldx 	zTemp0+1
.8bc1	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA
.8bc4	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8bc6	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc8	d0 05		bne $8bcf			bne 	_EHAtMsg
.8bca	c8		iny				iny
.8bcb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcd	f0 17		beq $8be6			beq 	_EHCREnd
.8bcf					_EHAtMsg:
.8bcf	a2 8b		ldx #$8b			ldx 	#_AtMsg >> 8 				; print " at "
.8bd1	a9 ee		lda #$ee			lda 	#_AtMsg & $FF
.8bd3	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA
.8bd6	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8bd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bda	48		pha				pha
.8bdb	c8		iny				iny
.8bdc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bde	aa		tax				tax
.8bdf	68		pla				pla
.8be0	20 6f 9f	jsr $9f6f			jsr 	ConvertInt16 				; convert XA to string
.8be3	20 f8 8b	jsr $8bf8			jsr 	PrintStringXA 				; and print it.
.8be6					_EHCREnd:
.8be6	a9 0d		lda #$0d			lda 	#13 						; new line
.8be8	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.8beb					_EHEnd:
.8beb	4c d2 83	jmp $83d2			jmp 	WarmStart
>8bee	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8bf6	20 00
.8bf8					PrintStringXA:
.8bf8	5a		phy				phy
.8bf9	86 37		stx $37				stx 	zTemp0+1
.8bfb	85 36		sta $36				sta 	zTemp0
.8bfd	a0 00		ldy #$00			ldy 	#0
.8bff					_PSXALoop:
.8bff	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c01	f0 06		beq $8c09			beq 	_PSXAExit
.8c03	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.8c06	c8		iny				iny
.8c07	80 f6		bra $8bff			bra 	_PSXALoop
.8c09					_PSXAExit:
.8c09	7a		ply				ply
.8c0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8c0b					UnaryTrue:
.8c0b	fa		plx				plx
.8c0c					ReturnTrue:
.8c0c	a9 01		lda #$01			lda 	#1  						; set to 1
.8c0e	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.8c11	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c13	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c16	60		rts				rts
.8c17					UnaryFalse:
.8c17	fa		plx				plx
.8c18					ReturnFalse:
.8c18	4c f2 96	jmp $96f2			jmp 	NSMSetZero 					; set it all to zero
.8c1b					BinaryCompareEqual:
.8c1b	fa		plx				plx
.8c1c	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c1f	c9 00		cmp #$00			cmp 	#0
.8c21	f0 e9		beq $8c0c			beq 	ReturnTrue
.8c23	80 f3		bra $8c18			bra 	ReturnFalse
.8c25					BinaryCompareLess:
.8c25	fa		plx				plx
.8c26	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c29	c9 ff		cmp #$ff			cmp 	#$FF
.8c2b	f0 df		beq $8c0c			beq 	ReturnTrue
.8c2d	80 e9		bra $8c18			bra 	ReturnFalse
.8c2f					BinaryCompareGreater:
.8c2f	fa		plx				plx
.8c30	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c33	c9 01		cmp #$01			cmp 	#1
.8c35	f0 d5		beq $8c0c			beq 	ReturnTrue
.8c37	80 df		bra $8c18			bra 	ReturnFalse
.8c39					BinaryCompareNotEqual:
.8c39	fa		plx				plx
.8c3a	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c3d	c9 00		cmp #$00			cmp 	#0
.8c3f	d0 cb		bne $8c0c			bne 	ReturnTrue
.8c41	80 d5		bra $8c18			bra 	ReturnFalse
.8c43					BinaryCompareLessEqual:
.8c43	fa		plx				plx
.8c44	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c47	c9 01		cmp #$01			cmp 	#1
.8c49	d0 c1		bne $8c0c			bne 	ReturnTrue
.8c4b	80 cb		bra $8c18			bra 	ReturnFalse
.8c4d					BinaryCompareGreaterEqual:
.8c4d	fa		plx				plx
.8c4e	20 57 8c	jsr $8c57			jsr 	CompareBaseCode
.8c51	c9 ff		cmp #$ff			cmp 	#$FF
.8c53	d0 b7		bne $8c0c			bne 	ReturnTrue
.8c55	80 c1		bra $8c18			bra 	ReturnFalse
.8c57					CompareBaseCode:
.8c57	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; make both values if references.
.8c5a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c5d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c60	29 10		and #$10			and 	#NSTString
.8c62	d0 40		bne $8ca4			bne 	_CBCString
.8c64	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c67	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c6a	d0 3b		bne $8ca7			bne 	_CBCFloat
.8c6c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c6f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c72	29 08		and #$08			and 	#NSTFloat
.8c74	d0 31		bne $8ca7			bne 	_CBCFloat
.8c76	20 aa 8c	jsr $8caa			jsr 	CompareFixMinusZero
.8c79	e8		inx				inx
.8c7a	20 aa 8c	jsr $8caa			jsr 	CompareFixMinusZero
.8c7d	ca		dex				dex
.8c7e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c81	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c84	10 0b		bpl $8c91			bpl 	_CDCSameSign
.8c86	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c89	30 16		bmi $8ca1			bmi 	_CBCLess 					; return $FF
.8c8b					_CBCGreater:
.8c8b	a9 01		lda #$01			lda 	#1
.8c8d	60		rts				rts
.8c8e					_CBCEqual:
.8c8e	a9 00		lda #$00			lda 	#0
.8c90	60		rts				rts
.8c91					_CDCSameSign:
.8c91	20 ba 8d	jsr $8dba			jsr 	SubTopTwoStack 				; unsigned subtract
.8c94	20 22 97	jsr $9722			jsr 	NSMIsZero 					; or the mantissa together
.8c97	f0 f5		beq $8c8e			beq 	_CBCEqual 					; -0 == 0
.8c99	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c9c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c9f	10 ea		bpl $8c8b			bpl 	_CBCGreater
.8ca1					_CBCLess:
.8ca1	a9 ff		lda #$ff			lda 	#$FF
.8ca3	60		rts				rts
.8ca4					_CBCString:
.8ca4	4c 10 8d	jmp $8d10			jmp 	CompareStrings
.8ca7					_CBCFloat:
.8ca7	4c 6b a0	jmp $a06b			jmp 	CompareFloat
.8caa					CompareFixMinusZero:
.8caa	20 22 97	jsr $9722			jsr 	NSMIsZero
.8cad	d0 03		bne $8cb2			bne 	_CFXMZNotZero
.8caf	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8cb2					_CFXMZNotZero:
.8cb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8cb3					StringConcat:
.8cb3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8cb6	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8cb9	29 18		and #$18			and 	#NSBTypeMask
.8cbb	c9 10		cmp #$10			cmp 	#NSTString
.8cbd	d0 4e		bne $8d0d			bne		_SCType
.8cbf	64 38		stz $38				stz 	zTemp1 						; counting total length
.8cc1	e8		inx				inx
.8cc2	20 e0 8c	jsr $8ce0			jsr 	_SCSetupZ0 					; setup for second
.8cc5	20 eb 8c	jsr $8ceb			jsr 	_SCLengthZ0 				; length for second
.8cc8	ca		dex				dex
.8cc9	20 e0 8c	jsr $8ce0			jsr 	_SCSetupZ0 					; setup for first
.8ccc	20 eb 8c	jsr $8ceb			jsr 	_SCLengthZ0 				; length for first
.8ccf	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8cd1	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate
.8cd4	20 fe 8c	jsr $8cfe			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8cd7	e8		inx				inx
.8cd8	20 e0 8c	jsr $8ce0			jsr 	_SCSetupZ0 					; copy second out
.8cdb	20 fe 8c	jsr $8cfe			jsr 	_SCCopy
.8cde	ca		dex				dex
.8cdf	60		rts				rts
.8ce0					_SCSetupZ0:
.8ce0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ce3	85 36		sta $36				sta 	zTemp0
.8ce5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ce8	85 37		sta $37				sta 	zTemp0+1
.8cea	60		rts				rts
.8ceb					_SCLengthZ0:
.8ceb	5a		phy				phy
.8cec	a0 00		ldy #$00			ldy 	#0
.8cee					_SCLenLoop:
.8cee	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cf0	f0 0a		beq $8cfc			beq 	_SCLExit
.8cf2	c8		iny				iny
.8cf3	e6 38		inc $38				inc 	zTemp1
.8cf5	10 f7		bpl $8cee			bpl		_SCLenLoop
.8cf7	a9 09		lda #$09		lda	#9
.8cf9	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.8cfc					_SCLExit:
.8cfc	7a		ply				ply
.8cfd	60		rts				rts
.8cfe					_SCCopy:
.8cfe	5a		phy				phy
.8cff	a0 00		ldy #$00			ldy 	#0
.8d01					_SCCopyLoop:
.8d01	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d03	f0 06		beq $8d0b			beq 	_SCCExit
.8d05	20 2d a6	jsr $a62d			jsr 	StringTempWrite
.8d08	c8		iny				iny
.8d09	80 f6		bra $8d01			bra 	_SCCopyLoop
.8d0b					_SCCExit:
.8d0b	7a		ply				ply
.8d0c	60		rts				rts
.8d0d					_SCType:
.8d0d	4c ff a3	jmp $a3ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9e2c					IntegerDivide:
.9e2c	fa		plx				plx
.9e2d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e30	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e33	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e34	0a		asl a				asl 	a
.9e35	10 05		bpl $9e3c			bpl 	_NotRef
.9e37	48		pha				pha
.9e38	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e3b	68		pla				pla
.9e3c					_NotRef:
.9e3c	0a		asl a				asl 	a
.9e3d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e3f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e42	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e45	f0 03		beq $9e4a			beq 	_IntegerCode 				; if clear, then we have two integers
.9e47	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.9e4a					_IntegerCode:
.9e4a	20 6c 9e	jsr $9e6c			jsr 	CheckDivideZero 			; do div zero check
.9e4d	20 a4 9e	jsr $9ea4			jsr 	Int32Divide 				; do the division
.9e50	20 61 9f	jsr $9f61			jsr 	CalculateSign 				; calculate result sign
.9e53					NSMCopyPlusTwoToZero:
.9e53	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9e56	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e59	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9e5c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e5f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9e62	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9e65	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9e68	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9e6b	60		rts				rts
.9e6c					CheckDivideZero:
.9e6c	e8		inx				inx
.9e6d	20 22 97	jsr $9722			jsr 	NSMIsZero
.9e70	f0 02		beq $9e74			beq 	_CDVError
.9e72	ca		dex				dex
.9e73	60		rts				rts
.9e74					_CDVError:
.9e74	a9 03		lda #$03		lda	#3
.9e76	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.9e79					IntegerModulus:
.9e79	fa		plx				plx
.9e7a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e7d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e80	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e81	0a		asl a				asl 	a
.9e82	10 05		bpl $9e89			bpl 	_NotRef
.9e84	48		pha				pha
.9e85	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e88	68		pla				pla
.9e89					_NotRef:
.9e89	0a		asl a				asl 	a
.9e8a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e8c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e8f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e92	f0 03		beq $9e97			beq 	_IntegerCode 				; if clear, then we have two integers
.9e94	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.9e97					_IntegerCode:
.9e97	20 6c 9e	jsr $9e6c			jsr 	CheckDivideZero 			; do div zero check
.9e9a	20 a4 9e	jsr $9ea4			jsr 	Int32Divide 				; do the division
.9e9d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9ea0	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9ea3	60		rts				rts
.9ea4					Int32Divide:
.9ea4	48		pha				pha 								; save AXY
.9ea5	5a		phy				phy
.9ea6	20 c9 96	jsr $96c9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9ea9	20 ee 96	jsr $96ee			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9eac	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9eae					_I32DivideLoop:
.9eae	e8		inx				inx
.9eaf	e8		inx				inx
.9eb0	20 07 97	jsr $9707			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9eb3	ca		dex				dex
.9eb4	ca		dex				dex
.9eb5	20 08 97	jsr $9708			jsr 	NSMRotateLeft
.9eb8	20 e4 9e	jsr $9ee4			jsr 	DivideCheckSubtract 		; check if subtract possible
.9ebb	90 03		bcc $9ec0			bcc 	_I32DivideNoCarryIn
.9ebd	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9ec0					_I32DivideNoCarryIn:
.9ec0	88		dey				dey 								; loop round till division completed.
.9ec1	d0 eb		bne $9eae			bne 	_I32DivideLoop
.9ec3	7a		ply				ply 								; restore AXY and exit
.9ec4	68		pla				pla
.9ec5	60		rts				rts
.9ec6					Int32ShiftDivide:
.9ec6	48		pha				pha 								; save AY
.9ec7	5a		phy				phy
.9ec8	e8		inx				inx 								; clear S[X+2]
.9ec9	e8		inx				inx
.9eca	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.9ecd	ca		dex				dex
.9ece	ca		dex				dex
.9ecf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9ed1					_I32SDLoop:
.9ed1	20 e4 9e	jsr $9ee4			jsr 	DivideCheckSubtract 		; check if subtract possible
.9ed4	e8		inx				inx
.9ed5	e8		inx				inx
.9ed6	20 08 97	jsr $9708			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9ed9	ca		dex				dex
.9eda	ca		dex				dex
.9edb	20 08 97	jsr $9708			jsr 	NSMRotateLeft
.9ede	88		dey				dey 	 							; do 31 times
.9edf	d0 f0		bne $9ed1			bne 	_I32SDLoop
.9ee1	7a		ply				ply 								; restore AY and exit
.9ee2	68		pla				pla
.9ee3	60		rts				rts
.9ee4					DivideCheckSubtract:
.9ee4	20 ba 8d	jsr $8dba			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9ee7	b0 04		bcs $9eed			bcs 	_DCSExit 					; if carry set, then could do, exit
.9ee9	20 94 8d	jsr $8d94			jsr 	AddTopTwoStack 				; add it back in
.9eec	18		clc				clc 								; and return False
.9eed					_DCSExit:
.9eed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9eee					MulInteger:
.9eee	fa		plx				plx
.9eef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ef2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ef5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ef6	0a		asl a				asl 	a
.9ef7	10 05		bpl $9efe			bpl 	_NotRef
.9ef9	48		pha				pha
.9efa	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9efd	68		pla				pla
.9efe					_NotRef:
.9efe	0a		asl a				asl 	a 							; put MSB of type into A:7
.9eff	30 0b		bmi $9f0c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9f01	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f04	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f07	f0 06		beq $9f0f			beq 	_IntegerCode 				; if clear, then we have two integers
.9f09	4c 42 a1	jmp $a142			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9f0c					_StringData:
.9f0c	4c 09 a4	jmp $a409			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9f0f					_IntegerCode:
.9f0f	20 1c 9f	jsr $9f1c			jsr 	MultiplyShort
.9f12	c9 00		cmp #$00			cmp 	#0
.9f14	f0 05		beq $9f1b			beq 	_MIExit
.9f16	a9 04		lda #$04		lda	#4
.9f18	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.9f1b					_MIExit:
.9f1b	60		rts				rts
.9f1c					MultiplyShort:
.9f1c	5a		phy				phy 								; save Y
.9f1d	20 c9 96	jsr $96c9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f20	20 ee 96	jsr $96ee			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9f23	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9f25					_I32MLoop:
.9f25	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9f28	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9f2b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9f2e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9f31	f0 28		beq $9f5b			beq 	_I32MExit 					; exit if zero
.9f33	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9f36	29 01		and #$01			and 	#1
.9f38	f0 0e		beq $9f48			beq 	_I32MNoAdd
.9f3a	20 94 8d	jsr $8d94			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9f3d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9f40	10 06		bpl $9f48			bpl 	_I32MNoAdd
.9f42					_I32ShiftRight:
.9f42	20 15 97	jsr $9715			jsr 	NSMShiftRight 				; shift S[X] right
.9f45	c8		iny				iny 								; increment shift count
.9f46	80 0a		bra $9f52			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9f48					_I32MNoAdd:
.9f48	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9f4b	70 f5		bvs $9f42			bvs 	_I32ShiftRight 				; instead.
.9f4d	e8		inx				inx
.9f4e	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9f51	ca		dex				dex
.9f52					_I32MShiftUpper:
.9f52	e8		inx				inx 								; shift S[X+2] right
.9f53	e8		inx				inx
.9f54	20 15 97	jsr $9715			jsr 	NSMShiftRight
.9f57	ca		dex				dex
.9f58	ca		dex				dex
.9f59	80 ca		bra $9f25			bra 	_I32MLoop 					; try again.
.9f5b					_I32MExit:
.9f5b	20 61 9f	jsr $9f61			jsr 	CalculateSign
.9f5e	98		tya				tya 								; shift in A
.9f5f	7a		ply				ply 								; restore Y and exit
.9f60	60		rts				rts
.9f61					CalculateSign:
.9f61	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9f64	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9f67	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9f6a	0a		asl a				asl 	a 							; shift bit 7 into carry
.9f6b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9f6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8d10					CompareStrings:
.8d10	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8d13	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d16	29 10		and #$10			and 	#NSBIsString
.8d18	f0 2c		beq $8d46			beq 	_CSTypeError
.8d1a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8d1d	85 36		sta $36				sta 	zTemp0
.8d1f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d22	85 37		sta $37				sta 	zTemp0+1
.8d24	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d27	85 38		sta $38				sta 	zTemp1
.8d29	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d2c	85 39		sta $39				sta 	zTemp1+1
.8d2e	5a		phy				phy 								; save Y so we can access strings
.8d2f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8d31					_CSLoop:
.8d31	c8		iny				iny
.8d32	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8d34	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8d36	d0 06		bne $8d3e			bne 	_CSDifferent
.8d38	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8d3a	d0 f5		bne $8d31			bne 	_CSLoop 					; still comparing
.8d3c					_CSExit:
.8d3c	7a		ply				ply 								; reached end, return zero in A from EOS
.8d3d	60		rts				rts
.8d3e					_CSDifferent:
.8d3e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8d40	90 fa		bcc $8d3c			bcc		_CSExit
.8d42	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8d44	80 f6		bra $8d3c			bra 	_CSExit
.8d46					_CSTypeError:
.8d46	4c ff a3	jmp $a3ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8d49					ShiftLeft:
.8d49	38		sec				sec
.8d4a	80 01		bra $8d4d			bra 	ShiftMain
.8d4c					ShiftRight:
.8d4c	18		clc				clc
.8d4d					ShiftMain:
.8d4d	fa		plx				plx 								; restore X
.8d4e	08		php				php 								; save direction
.8d4f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d52	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d55	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d56	0a		asl a				asl 	a
.8d57	10 05		bpl $8d5e			bpl 	_NotRef
.8d59	48		pha				pha
.8d5a	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d5d	68		pla				pla
.8d5e					_NotRef:
.8d5e	0a		asl a				asl 	a
.8d5f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d61	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d64	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d67	f0 03		beq $8d6c			beq 	_IntegerCode 				; if clear, then we have two integers
.8d69	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8d6c					_IntegerCode:
.8d6c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8d6f	29 e0		and #$e0			and 	#$E0
.8d71	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8d74	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8d77	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d7a	d0 13		bne $8d8f			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8d7c					_SMLoop:
.8d7c	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8d7f	30 11		bmi $8d92			bmi 	_SMExit 					; exit if done.
.8d81	28		plp				plp 								; restore direcition setting
.8d82	08		php				php
.8d83	90 05		bcc $8d8a			bcc 	_SMRight
.8d85	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; shift left if CS
.8d88	80 f2		bra $8d7c			bra 	_SMLoop
.8d8a					_SMRight:
.8d8a	20 15 97	jsr $9715			jsr 	NSMShiftRight 				; shift right if CC
.8d8d	80 ed		bra $8d7c			bra 	_SMLoop
.8d8f					_SMExit0:
.8d8f	20 f2 96	jsr $96f2			jsr 	NSMSetZero 					; return zero.
.8d92					_SMExit:
.8d92	28		plp				plp 								; throw direction
.8d93	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8d94					AddTopTwoStack:
.8d94	18		clc				clc
.8d95	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d98	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8d9b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d9e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8da1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8da4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8da7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8daa	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8dad	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8db0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8db3	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8db6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8db9	60		rts				rts
.8dba					SubTopTwoStack:
.8dba	38		sec				sec
.8dbb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8dbe	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8dc1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dc4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8dc7	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8dca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dcd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8dd0	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8dd3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dd6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8dd9	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8ddc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ddf	60		rts				rts
.8de0					AddInteger:
.8de0	fa		plx				plx
.8de1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8de4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8de7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8de8	0a		asl a				asl 	a
.8de9	10 05		bpl $8df0			bpl 	_NotRef
.8deb	48		pha				pha
.8dec	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8def	68		pla				pla
.8df0					_NotRef:
.8df0	0a		asl a				asl 	a 							; put MSB of type into A:7
.8df1	30 0b		bmi $8dfe			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8df3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8df6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8df9	f0 06		beq $8e01			beq 	_IntegerCode 				; if clear, then we have two integers
.8dfb	4c ca 9f	jmp $9fca			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8dfe					_StringData:
.8dfe	4c b3 8c	jmp $8cb3			jmp 	StringConcat							; at least one string - don't know both are strings.
.8e01					_IntegerCode:
.8e01					AddCode:
.8e01	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8e04	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e07	10 8b		bpl $8d94			bpl 	AddTopTwoStack
.8e09	20 ba 8d	jsr $8dba			jsr 	SubTopTwoStack 				; do a physical subtraction
.8e0c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8e0f	10 09		bpl $8e1a			bpl 	_AddExit
.8e11	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8e14	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e17	20 a7 96	jsr $96a7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8e1a					_AddExit:
.8e1a	60		rts				rts
.8e1b					SubInteger:
.8e1b	fa		plx				plx
.8e1c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e1f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e22	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e23	0a		asl a				asl 	a
.8e24	10 05		bpl $8e2b			bpl 	_NotRef
.8e26	48		pha				pha
.8e27	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e2a	68		pla				pla
.8e2b					_NotRef:
.8e2b	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e2c	30 0b		bmi $8e39			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e2e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e31	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e34	f0 06		beq $8e3c			beq 	_IntegerCode 				; if clear, then we have two integers
.8e36	4c cf 9f	jmp $9fcf			jmp 	FloatingPointSub 							; otherwise at least one float.
.8e39					_StringData:
.8e39	4c 09 a4	jmp $a409			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e3c					_IntegerCode:
.8e3c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8e3f	49 80		eor #$80			eor 	#$80
.8e41	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e44	80 bb		bra $8e01			bra 	AddCode 					; and do the same code as add.
.8e46					AndInteger:
.8e46	fa		plx				plx
.8e47	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e4a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e4d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e4e	0a		asl a				asl 	a
.8e4f	10 05		bpl $8e56			bpl 	_NotRef
.8e51	48		pha				pha
.8e52	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e55	68		pla				pla
.8e56					_NotRef:
.8e56	0a		asl a				asl 	a
.8e57	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e59	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e5c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e5f	f0 03		beq $8e64			beq 	_IntegerCode 				; if clear, then we have two integers
.8e61	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8e64					_IntegerCode:
.8e64	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e67	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8e6a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e6d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e70	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8e73	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e76	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e79	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8e7c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e7f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e82	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8e85	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e88	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8e8b	60		rts				rts
.8e8c					OraInteger:
.8e8c	fa		plx				plx
.8e8d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e90	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e93	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e94	0a		asl a				asl 	a
.8e95	10 05		bpl $8e9c			bpl 	_NotRef
.8e97	48		pha				pha
.8e98	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e9b	68		pla				pla
.8e9c					_NotRef:
.8e9c	0a		asl a				asl 	a
.8e9d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e9f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ea2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ea5	f0 03		beq $8eaa			beq 	_IntegerCode 				; if clear, then we have two integers
.8ea7	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8eaa					_IntegerCode:
.8eaa	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ead	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8eb0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8eb3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8eb6	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8eb9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ebc	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ebf	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8ec2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ec5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ec8	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8ecb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ece	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ed1	60		rts				rts
.8ed2					EorInteger:
.8ed2	fa		plx				plx
.8ed3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ed6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ed9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eda	0a		asl a				asl 	a
.8edb	10 05		bpl $8ee2			bpl 	_NotRef
.8edd	48		pha				pha
.8ede	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ee1	68		pla				pla
.8ee2					_NotRef:
.8ee2	0a		asl a				asl 	a
.8ee3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ee5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ee8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8eeb	f0 03		beq $8ef0			beq 	_IntegerCode 				; if clear, then we have two integers
.8eed	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8ef0					_IntegerCode:
.8ef0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ef3	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8ef6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8efc	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8eff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f02	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f05	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8f08	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f0b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f0e	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8f11	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f14	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f17	60		rts				rts
.8f18					WordIndirect:
.8f18	fa		plx				plx
.8f19	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f1c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f1f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f20	0a		asl a				asl 	a
.8f21	10 05		bpl $8f28			bpl 	_NotRef
.8f23	48		pha				pha
.8f24	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f27	68		pla				pla
.8f28					_NotRef:
.8f28	0a		asl a				asl 	a
.8f29	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f2b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f31	f0 03		beq $8f36			beq 	_IntegerCode 				; if clear, then we have two integers
.8f33	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8f36					_IntegerCode:
.8f36	20 01 8e	jsr $8e01			jsr 	AddCode 					; add the two values
.8f39	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8f3b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f3e	60		rts				rts
.8f3f					ByteIndirect:
.8f3f	fa		plx				plx
.8f40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f43	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f46	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f47	0a		asl a				asl 	a
.8f48	10 05		bpl $8f4f			bpl 	_NotRef
.8f4a	48		pha				pha
.8f4b	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f4e	68		pla				pla
.8f4f					_NotRef:
.8f4f	0a		asl a				asl 	a
.8f50	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f52	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f55	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f58	f0 03		beq $8f5d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f5a	4c ff a3	jmp $a3ff			jmp 	TypeError 					; anything else, type mismatch.
.8f5d					_IntegerCode:
.8f5d	20 01 8e	jsr $8e01			jsr 	AddCode 					; add the two values
.8f60	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8f62	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f65	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9f6f					ConvertInt16:
.9f6f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9f72	8e 10 06	stx $0610			stx 	NSMantissa1
.9f75	9c 18 06	stz $0618			stz 	NSMantissa2
.9f78	9c 20 06	stz $0620			stz 	NSMantissa3
.9f7b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9f7e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9f80	a9 0a		lda #$0a			lda 	#10 						; base
.9f82	80 00		bra $9f84			bra 	ConvertInt32
.9f84					ConvertInt32:
.9f84	5a		phy				phy
.9f85	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9f87	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9f8a	10 08		bpl $9f94			bpl 	_CI32NotNeg
.9f8c	48		pha				pha
.9f8d	a9 2d		lda #$2d			lda 	#'-'
.9f8f	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9f92	c8		iny				iny
.9f93	68		pla				pla
.9f94					_CI32NotNeg:
.9f94	20 a2 9f	jsr $9fa2			jsr 	_CI32DivideConvert 			; recursive conversion
.9f97	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9f99	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9f9c	7a		ply				ply
.9f9d	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9f9f	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9fa1	60		rts				rts
.9fa2					_CI32DivideConvert:
.9fa2	e8		inx				inx 								; write to next slot up
.9fa3	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.9fa6	ca		dex				dex
.9fa7	20 a4 9e	jsr $9ea4			jsr 	Int32Divide 				; divide
.9faa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9fad	48		pha				pha
.9fae	20 53 9e	jsr $9e53			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9fb1	20 22 97	jsr $9722			jsr 	NSMIsZero 					; is it zero ?
.9fb4	f0 06		beq $9fbc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9fb6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9fb9	20 a2 9f	jsr $9fa2			jsr 	_CI32DivideConvert 			; and recusrively call.
.9fbc					_CI32NoRecurse:
.9fbc	68		pla				pla 								; remainder
.9fbd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9fbf	90 02		bcc $9fc3			bcc 	_CI32NotHex
.9fc1	69 26		adc #$26			adc 	#6+32
.9fc3					_CI32NotHex:
.9fc3	69 30		adc #$30			adc 	#48
.9fc5	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.9fc8	c8		iny				iny
.9fc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8f66					PrecedenceLevel:
>8f66	04					.byte	 4	; $00 <<
>8f67	02					.byte	 2	; $01 <=
>8f68	02					.byte	 2	; $02 <>
>8f69	00					.byte	 0	; $03 !!3
>8f6a	00					.byte	 0	; $04 ><
>8f6b	02					.byte	 2	; $05 >=
>8f6c	04					.byte	 4	; $06 >>
>8f6d	00					.byte	 0	; $07 !!7
>8f6e	00					.byte	 0	; $08 !!8
>8f6f	00					.byte	 0	; $09 !!9
>8f70	00					.byte	 0	; $0a !!10
>8f71	00					.byte	 0	; $0b !!11
>8f72	00					.byte	 0	; $0c !!12
>8f73	00					.byte	 0	; $0d !!13
>8f74	00					.byte	 0	; $0e !!14
>8f75	00					.byte	 0	; $0f !!15
>8f76	00					.byte	 0	; $10 @
>8f77	00					.byte	 0	; $11 !!17
>8f78	00					.byte	 0	; $12 !!18
>8f79	00					.byte	 0	; $13 [
>8f7a	04					.byte	 4	; $14 \
>8f7b	00					.byte	 0	; $15 ]
>8f7c	01					.byte	 1	; $16 ^
>8f7d	00					.byte	 0	; $17 _
>8f7e	00					.byte	 0	; $18 `
>8f7f	00					.byte	 0	; $19 !!25
>8f80	00					.byte	 0	; $1a !!26
>8f81	00					.byte	 0	; $1b {
>8f82	01					.byte	 1	; $1c |
>8f83	00					.byte	 0	; $1d }
>8f84	00					.byte	 0	; $1e ~
>8f85	00					.byte	 0	; $1f [7m<7F>[m
>8f86	00					.byte	 0	; $20
>8f87	05					.byte	 5	; $21 !
>8f88	00					.byte	 0	; $22 "
>8f89	00					.byte	 0	; $23 #
>8f8a	05					.byte	 5	; $24 $
>8f8b	04					.byte	 4	; $25 %
>8f8c	01					.byte	 1	; $26 &
>8f8d	00					.byte	 0	; $27 '
>8f8e	00					.byte	 0	; $28 (
>8f8f	00					.byte	 0	; $29 )
>8f90	04					.byte	 4	; $2a *
>8f91	03					.byte	 3	; $2b +
>8f92	00					.byte	 0	; $2c ,
>8f93	03					.byte	 3	; $2d -
>8f94	00					.byte	 0	; $2e .
>8f95	04					.byte	 4	; $2f /
>8f96	00					.byte	 0	; $30 0
>8f97	00					.byte	 0	; $31 1
>8f98	00					.byte	 0	; $32 2
>8f99	00					.byte	 0	; $33 3
>8f9a	00					.byte	 0	; $34 4
>8f9b	00					.byte	 0	; $35 5
>8f9c	00					.byte	 0	; $36 6
>8f9d	00					.byte	 0	; $37 7
>8f9e	00					.byte	 0	; $38 8
>8f9f	00					.byte	 0	; $39 9
>8fa0	00					.byte	 0	; $3a :
>8fa1	00					.byte	 0	; $3b ;
>8fa2	02					.byte	 2	; $3c <
>8fa3	02					.byte	 2	; $3d =
>8fa4	02					.byte	 2	; $3e >
>8fa5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8fa6					EvaluateExpressionAt0:
.8fa6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8fa8					EvaluateExpression:
.8fa8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8faa					EvaluateExpressionAtPrecedence:
.8faa	48		pha				pha 								; save precedence level
.8fab	20 79 92	jsr $9279			jsr 	EvaluateTerm 				; evaluate term into level X.
.8fae	68		pla				pla 								; restore precedence level.
.8faf					_EXPRLoop:
.8faf	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8fb1	b1 30		lda ($30),y			lda 	(codePtr),y
.8fb3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8fb5	b0 25		bcs $8fdc			bcs 	_EXPRExit
.8fb7	da		phx				phx 								; read the operator precedence
.8fb8	aa		tax				tax
.8fb9	bd 66 8f	lda $8f66,x			lda 	PrecedenceLevel,x
.8fbc	fa		plx				plx
.8fbd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8fbf	f0 1b		beq $8fdc			beq 	_EXPRExit
.8fc1	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8fc3	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8fc5	c5 37		cmp $37				cmp 	zTemp0+1
.8fc7	b0 13		bcs $8fdc			bcs		_EXPRExit 					; if current >= operator exit
.8fc9	48		pha				pha 								; save current precedence.
.8fca	b1 30		lda ($30),y			lda 	(codePtr),y
.8fcc	c8		iny				iny
.8fcd	48		pha				pha
.8fce	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8fd0	e8		inx				inx 								; work out the right hand side.
.8fd1	20 aa 8f	jsr $8faa			jsr 	EvaluateExpressionAtPrecedence
.8fd4	ca		dex				dex
.8fd5	68		pla				pla 								; get operator, call the code.
.8fd6	20 df 8f	jsr $8fdf			jsr 	_EXPRCaller
.8fd9	68		pla				pla 								; restore precedence level
.8fda	80 d3		bra $8faf			bra 	_EXPRLoop 					; and go round.
.8fdc					_EXPRExit:
.8fdc	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8fde	60		rts				rts
.8fdf					_EXPRCaller:
.8fdf	da		phx				phx 								; save on stack, first thing is to restore it
.8fe0	0a		asl a				asl 	a 							; double so can use vectors into X
.8fe1	aa		tax				tax
.8fe2	7c 0c 80	jmp ($800c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9fca					FloatingPointAdd:
.9fca	20 6b a1	jsr $a16b			jsr 	FloatPrepare 				; prepare for floats
.9fcd	80 0b		bra $9fda			bra 	FloatAdd
.9fcf					FloatingPointSub:
.9fcf	20 6b a1	jsr $a16b			jsr 	FloatPrepare 				; prepare for floats
.9fd2					FloatSubtract:
.9fd2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9fd5	49 80		eor #$80			eor 	#$80
.9fd7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9fda					FloatAdd:
.9fda	48		pha				pha
.9fdb	5a		phy				phy
.9fdc	20 7c a1	jsr $a17c			jsr 	NSNormalise 				; normalise S[X]
.9fdf	f0 54		beq $a035			beq 	_FAReturn1
.9fe1	e8		inx				inx 								; normalise S[X+1]
.9fe2	20 7c a1	jsr $a17c			jsr 	NSNormalise
.9fe5	ca		dex				dex
.9fe6	c9 00		cmp #$00			cmp 	#0
.9fe8	f0 6f		beq $a059			beq 	_FAExit 					; if so, just return A
.9fea	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9fed	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9ff0	f0 1b		beq $a00d			beq 	_FAExponentsEqual
.9ff2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9ff5	a8		tay				tay
.9ff6	38		sec				sec 								; do a signed comparison of the exponents.
.9ff7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9ffa	50 02		bvc $9ffe			bvc 	_FANoSignedChange
.9ffc	49 80		eor #$80			eor 	#$80
.9ffe					_FANoSignedChange:
.9ffe	29 80		and #$80			and 	#$80
.a000	10 03		bpl $a005			bpl 	_FAHaveMax
.a002	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a005					_FAHaveMax:
.a005	20 5c a0	jsr $a05c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a008	e8		inx				inx
.a009	20 5c a0	jsr $a05c			jsr 	_FAShiftToExponent
.a00c	ca		dex				dex
.a00d					_FAExponentsEqual:
.a00d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a010	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a013	30 10		bmi $a025			bmi 	_FADifferentSigns
.a015	20 94 8d	jsr $8d94			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a018	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a01b	10 3c		bpl $a059			bpl 	_FAExit 					; if no, we are done.
.a01d	20 15 97	jsr $9715			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a020	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a023	80 34		bra $a059			bra 	_FAExit
.a025					_FADifferentSigns:
.a025	20 ba 8d	jsr $8dba			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a028	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a02b	10 2c		bpl $a059			bpl 	_FAExit 					; if no, we are done.
.a02d	20 9e 96	jsr $969e			jsr 	NSMNegate 					; netate result
.a030	20 a7 96	jsr $96a7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a033	80 24		bra $a059			bra 	_FAExit
.a035					_FAReturn1:
.a035	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a038	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a03b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a03e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a041	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a044	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a047	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a04a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a04d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a050	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a053	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a056	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a059					_FAExit:
.a059	7a		ply				ply
.a05a	68		pla				pla
.a05b	60		rts				rts
.a05c					_FAShiftToExponent:
.a05c					_FAShiftToExponent2:
.a05c	98		tya				tya 								; compare Y to exponent
.a05d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a060	f0 08		beq $a06a			beq 	_FASEExit 					; exit if so.
.a062	20 15 97	jsr $9715			jsr 	NSMShiftRight	 			; shift the mantissa right
.a065	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a068	80 f2		bra $a05c			bra 	_FAShiftToExponent2
.a06a					_FASEExit:
.a06a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a06b					CompareFloat:
.a06b	20 d2 9f	jsr $9fd2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a06e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a071	29 f8		and #$f8			and 	#$F8
.a073	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a076	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a079	f0 09		beq $a084			beq 	_FCExit 					; zero, so approximately identical
.a07b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a07d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a080	10 02		bpl $a084			bpl 	_FCExit
.a082					_FCNegative:
.a082	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a084					_FCExit:
.a084	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a085					FDivideCommand:
.a085	fa		plx				plx	 								; restore stack position
.a086	20 6b a1	jsr $a16b			jsr 	FloatPrepare 				; prepare for floats
.a089					FloatDivide:
.a089	48		pha				pha
.a08a	e8		inx				inx
.a08b	20 7c a1	jsr $a17c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a08e	ca		dex				dex
.a08f	c9 00		cmp #$00			cmp 	#0
.a091	f0 20		beq $a0b3			beq 	_FDZero
.a093	20 7c a1	jsr $a17c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a096	f0 19		beq $a0b1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a098	20 c6 9e	jsr $9ec6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a09b	20 53 9e	jsr $9e53			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a09e	20 7c a1	jsr $a17c			jsr		NSNormalise 				; renormalise
.a0a1	20 61 9f	jsr $9f61			jsr 	CalculateSign 				; calculate result sign
.a0a4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a0a7	38		sec				sec
.a0a8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a0ab	38		sec				sec
.a0ac	e9 1e		sbc #$1e			sbc 	#30
.a0ae	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0b1					_FDExit:
.a0b1	68		pla				pla
.a0b2	60		rts				rts
.a0b3					_FDZero:
.a0b3	a9 03		lda #$03		lda	#3
.a0b5	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a0b8					FloatFractionalPart:
.a0b8	5a		phy				phy
.a0b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a0bc	29 7f		and #$7f			and 	#$7F
.a0be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0c1	20 7c a1	jsr $a17c			jsr 	NSNormalise
.a0c4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a0c7	38		sec				sec
.a0c8	e9 e0		sbc #$e0			sbc 	#$E0
.a0ca	90 31		bcc $a0fd			bcc 	_FFPExit 					; already fractional
.a0cc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a0ce	b0 2a		bcs $a0fa			bcs 	_FFPZero
.a0d0	a8		tay				tay 								; put count to do in Y
.a0d1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a0d4	20 ff a0	jsr $a0ff			jsr 	_FFPPartial
.a0d7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0da	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a0dd	20 ff a0	jsr $a0ff			jsr 	_FFPPartial
.a0e0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0e3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a0e6	20 ff a0	jsr $a0ff			jsr 	_FFPPartial
.a0e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0ec	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a0ef	20 ff a0	jsr $a0ff			jsr 	_FFPPartial
.a0f2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a0f5	20 22 97	jsr $9722			jsr 	NSMIsZero 					; zeroed check.
.a0f8	d0 03		bne $a0fd			bne 	_FFPExit
.a0fa					_FFPZero:
.a0fa	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.a0fd					_FFPExit:
.a0fd	7a		ply				ply
.a0fe	60		rts				rts
.a0ff					_FFPPartial:
.a0ff	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a101	f0 17		beq $a11a			beq 	_FFFPPExit
.a103	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a105	b0 0c		bcs $a113			bcs 	_FFFPPWholeByte
.a107	5a		phy				phy
.a108					_FFFPPLeft:
.a108	0a		asl a				asl 	a
.a109	88		dey				dey
.a10a	d0 fc		bne $a108			bne 	_FFFPPLeft
.a10c	7a		ply				ply
.a10d					_FFFPPRight:
.a10d	4a		lsr a				lsr 	a
.a10e	88		dey				dey
.a10f	d0 fc		bne $a10d			bne 	_FFFPPRight
.a111	80 07		bra $a11a			bra 	_FFFPPExit
.a113					_FFFPPWholeByte:
.a113	98		tya				tya 								; subtract 8 from count
.a114	38		sec				sec
.a115	e9 08		sbc #$08			sbc 	#8
.a117	a8		tay				tay
.a118	a9 00		lda #$00			lda 	#0 							; and clear all
.a11a					_FFFPPExit:
.a11a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a11b					FloatIntegerPart:
.a11b	48		pha				pha
.a11c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a11f	f0 1f		beq $a140			beq 	_FIPExit 					; if so do nothing
.a121	20 22 97	jsr $9722			jsr 	NSMIsZero 					; is it zero ?
.a124	f0 17		beq $a13d			beq 	_FIPZero 					; if so return zero.
.a126	20 7c a1	jsr $a17c			jsr 	NSNormalise 				; normalise
.a129	f0 12		beq $a13d			beq 	_FIPZero 					; normalised to zero, exit zero
.a12b					_FIPShift:
.a12b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a12e	10 08		bpl $a138			bpl 	_FIPCheckZero
.a130	20 15 97	jsr $9715			jsr 	NSMShiftRight 				; shift mantissa right
.a133	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a136	80 f3		bra $a12b			bra 	_FIPShift
.a138					_FIPCheckZero:
.a138	20 22 97	jsr $9722			jsr 	NSMIsZero 					; avoid -0 problem
.a13b	d0 03		bne $a140			bne 	_FIPExit 					; set to zero if mantissa zero.
.a13d					_FIPZero:
.a13d	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.a140					_FIPExit:
.a140	68		pla				pla
.a141	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a142					FloatingPointMultiply:
.a142	20 6b a1	jsr $a16b			jsr 	FloatPrepare 				; prepare for floats
.a145					FloatMultiply:
.a145	48		pha				pha
.a146	20 7c a1	jsr $a17c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a149	f0 1b		beq $a166			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a14b	e8		inx				inx
.a14c	20 7c a1	jsr $a17c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a14f	ca		dex				dex
.a150	c9 00		cmp #$00			cmp 	#0
.a152	f0 0f		beq $a163			beq 	_FDSetZero
.a154	20 1c 9f	jsr $9f1c			jsr 	MultiplyShort 				; calculate the result.
.a157	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a15a	18		clc				clc
.a15b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a15e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a161	80 03		bra $a166			bra 	_FDExit
.a163					_FDSetZero:
.a163	20 f2 96	jsr $96f2			jsr 	NSMSetZero 					; return 0
.a166					_FDExit:
.a166	20 7c a1	jsr $a17c			jsr 	NSNormalise 				; normalise the result
.a169	68		pla				pla
.a16a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a16b					FloatPrepare:
.a16b	20 b8 90	jsr $90b8			jsr 	DereferenceTopTwo 			; dereference the top two values
.a16e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a171	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a174	29 10		and #$10			and 	#NSBIsString
.a176	d0 01		bne $a179			bne 	_FDType
.a178	60		rts				rts
.a179					_FDType:
.a179	4c ff a3	jmp $a3ff			jmp 	TypeError
.a17c					NSNormalise:
.a17c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a17f	29 80		and #$80			and 	#$80
.a181	09 08		ora #$08			ora 	#NSTFloat
.a183	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a186	20 22 97	jsr $9722			jsr 	NSMIsZero 					; if zero exit
.a189	d0 09		bne $a194			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a18b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a18e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a191	a9 00		lda #$00			lda 	#0 							; set Z flag
.a193	60		rts				rts
.a194					_NSNormaliseOptimise:
.a194	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a197	d0 22		bne $a1bb			bne 	_NSNormaliseLoop
.a199	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a19c	30 1d		bmi $a1bb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a19e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1a1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a1a4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a1aa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1ad	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a1b0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a1b3	38		sec				sec
.a1b4	e9 08		sbc #$08			sbc 	#8
.a1b6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1b9	80 d9		bra $a194			bra 	_NSNormaliseOptimise
.a1bb					_NSNormaliseLoop:
.a1bb	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a1be	70 08		bvs $a1c8			bvs 	_NSNExit 					; exit if so with Z flag clear
.a1c0	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; shift mantissa left
.a1c3	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a1c6	80 f3		bra $a1bb			bra 	_NSNormaliseLoop
.a1c8					_NSNExit:
.a1c8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a1ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8fe5					AssignNumber:
.8fe5	5a		phy				phy
.8fe6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8fe9	85 36		sta $36				sta 	zTemp0
.8feb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fee	85 37		sta $37				sta 	zTemp0+1
.8ff0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8ff3	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8ff5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ff8	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8ffa	c9 08		cmp #$08			cmp 	#NSTFloat
.8ffc	f0 2a		beq $9028			beq 	_ANFloat
.8ffe	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9001	f0 05		beq $9008			beq		_ANNotFloat
.9003	e8		inx				inx
.9004	20 1b a1	jsr $a11b			jsr 	FloatIntegerPart 			; make it an integer
.9007	ca		dex				dex
.9008					_ANNotFloat:
.9008	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.900b	29 03		and #$03			and 	#3
.900d	d0 05		bne $9014			bne 	_ANByteWord
.900f	20 34 90	jsr $9034			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9012	80 1e		bra $9032			bra 	_ANExit
.9014					_ANByteWord:
.9014	48		pha				pha 								; save count
.9015	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9018	92 36		sta ($36)			sta 	(zTemp0)
.901a	68		pla				pla
.901b	c9 01		cmp #$01			cmp	 	#1
.901d	f0 13		beq $9032			beq 	_ANExit
.901f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9022	a0 01		ldy #$01			ldy 	#1
.9024	91 36		sta ($36),y			sta 	(zTemp0),y
.9026	80 0a		bra $9032			bra 	_ANExit
.9028					_ANFloat:
.9028	20 34 90	jsr $9034			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.902b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.902e	a0 04		ldy #$04			ldy 	#4
.9030	91 36		sta ($36),y			sta 	(zTemp0),y
.9032					_ANExit:
.9032	7a		ply				ply
.9033	60		rts				rts
.9034					_ANCopy4PackSign:
.9034	a0 03		ldy #$03			ldy 	#3
.9036	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9039	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.903b	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.903e	91 36		sta ($36),y			sta 	(zTemp0),y
.9040	88		dey				dey
.9041	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9044	91 36		sta ($36),y			sta 	(zTemp0),y
.9046	88		dey				dey
.9047	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.904a	91 36		sta ($36),y			sta 	(zTemp0),y
.904c	88		dey				dey
.904d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9050	91 36		sta ($36),y			sta 	(zTemp0),y
.9052	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9053					AssignString:
.9053	5a		phy				phy
.9054	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9057	85 38		sta $38				sta 	zTemp1
.9059	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.905c	85 39		sta $39				sta 	zTemp1+1
.905e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9061	85 36		sta $36				sta 	zTemp0
.9063	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9066	85 37		sta $37				sta 	zTemp0+1
.9068	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.906a	b1 36		lda ($36),y			lda 	(zTemp0),y
.906c	f0 23		beq $9091			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.906e	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.906f	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9071	e9 02		sbc #$02			sbc 	#2
.9073	85 3c		sta $3c				sta 	zsTemp
.9075	a0 01		ldy #$01			ldy 	#1
.9077	b1 36		lda ($36),y			lda 	(zTemp0),y
.9079	e9 00		sbc #$00			sbc 	#0
.907b	85 3d		sta $3d				sta 	zsTemp+1
.907d	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.907f					_ASGetLength:
.907f	c8		iny				iny
.9080	b1 38		lda ($38),y			lda 	(zTemp1),y
.9082	d0 fb		bne $907f			bne 	_ASGetLength
.9084	98		tya				tya 								; is this length <= current length
.9085	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9087	90 20		bcc $90a9			bcc 	_ASCopyString
.9089	f0 1e		beq $90a9			beq 	_ASCopyString
.908b	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.908d	a0 01		ldy #$01			ldy 	#1
.908f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9091					_ASNewStringRequired:
.9091	e8		inx				inx 								; concrete the new string.
.9092	20 74 a5	jsr $a574			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9095	ca		dex				dex
.9096	18		clc				clc
.9097	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.909a	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.909c	92 36		sta ($36)			sta 	(zTemp0)
.909e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90a1	69 00		adc #$00			adc 	#0
.90a3	a0 01		ldy #$01			ldy 	#1
.90a5	91 36		sta ($36),y			sta 	(zTemp0),y
.90a7	80 0d		bra $90b6			bra 	_ASExit
.90a9					_ASCopyString:
.90a9	a0 00		ldy #$00			ldy 	#0
.90ab					_ASCopyLoop:
.90ab	b1 38		lda ($38),y			lda 	(zTemp1),y
.90ad	c8		iny				iny
.90ae	c8		iny				iny
.90af	91 3c		sta ($3c),y			sta 	(zsTemp),y
.90b1	88		dey				dey
.90b2	c9 00		cmp #$00			cmp 	#0
.90b4	d0 f5		bne $90ab			bne 	_ASCopyLoop
.90b6					_ASExit:
.90b6	7a		ply				ply
.90b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.90b8					DereferenceTopTwo:
.90b8	e8		inx				inx
.90b9	20 bd 90	jsr $90bd			jsr 	Dereference 				; deref x+1
.90bc	ca		dex				dex  								; falls through to deref x
.90bd					Dereference:
.90bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.90c0	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.90c2	f0 57		beq $911b			beq 	_DRFExit 					; not a reference
.90c4	5a		phy				phy
.90c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.90c8	85 36		sta $36				sta 	zTemp0
.90ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90cd	85 37		sta $37				sta 	zTemp0+1
.90cf	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.90d2	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.90d4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.90da	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.90dc	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.90de	f0 0f		beq $90ef			beq 	_DRFDereferenceTwo
.90e0	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.90e2	f0 39		beq $911d			beq 	_DRFFull
.90e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.90e7	29 03		and #$03			and 	#3
.90e9	f0 32		beq $911d			beq 	_DRFFull 					; the whole word
.90eb	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.90ed	f0 07		beq $90f6			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.90ef					_DRFDereferenceTwo:
.90ef	a0 01		ldy #$01			ldy 	#1
.90f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.90f3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90f6					_DRFClear23:
.90f6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.90f9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.90fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.90ff	29 18		and #$18			and 	#NSBTypeMask
.9101	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9104	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9106	d0 12		bne $911a			bne 	_DRFNotString
.9108	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.910b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.910e	d0 0a		bne $911a			bne 	_DRFNotString
.9110	a9 1c		lda #$1c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9112	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9115	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.9117	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.911a					_DRFNotString
.911a	7a		ply				ply 								; restore Y and exit
.911b					_DRFExit:
.911b	60		rts				rts
.911c					_DRFNullString:
>911c	00						.byte 	0
.911d					_DRFFull:
.911d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.911f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9121	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9124	c8		iny				iny
.9125	b1 36		lda ($36),y			lda 	(zTemp0),y
.9127	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.912a	c8		iny				iny
.912b	b1 36		lda ($36),y			lda 	(zTemp0),y
.912d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9130	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9133	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9136	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9138	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.913b	f0 06		beq $9143			beq 	_DRFNoExponent
.913d	c8		iny				iny 								; if not, read the exponent as well.
.913e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9140	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9143					_DRFNoExponent:
.9143	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9146	10 0d		bpl $9155			bpl 	_DRFExit2 					; if not, then exit.
.9148	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.914a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.914d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9150	09 80		ora #$80			ora 	#NSBIsNegative
.9152	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9155					_DRFExit2:
.9155	7a		ply				ply
.9156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9157					EncodeNumberStart:
.9157	38		sec				sec
.9158	80 01		bra $915b			bra 	EncodeNumberContinue+1
.915a					EncodeNumberContinue:
.915a	18		clc				clc
.915b					EncodeNumber:
.915b	08		php				php 								; save reset.
.915c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.915e	f0 12		beq $9172			beq 	_ENIsOkay
.9160	c9 30		cmp #$30			cmp 	#"0"
.9162	90 04		bcc $9168			bcc 	_ENBadNumber
.9164	c9 3a		cmp #$3a			cmp 	#"9"+1
.9166	90 0a		bcc $9172			bcc 	_ENIsOkay
.9168					_ENBadNumber:
.9168	28		plp				plp 								; throw saved reset
.9169	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.916c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.916e	f0 7e		beq $91ee			beq 	_ENConstructFinal
.9170					_ENFail:
.9170	18		clc				clc 								; not allowed
.9171	60		rts				rts
.9172					_ENIsOkay:
.9172	28		plp				plp 								; are we restarting
.9173	90 15		bcc $918a			bcc 	_ENNoRestart
.9175					_ENStartEncode:
.9175	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9177	f0 0c		beq $9185			beq 	_ENFirstDP
.9179	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.917b	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.917e	a9 01		lda #$01			lda 	#ESTA_Low
.9180					_ENExitChange:
.9180	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9183	38		sec				sec
.9184	60		rts				rts
.9185					_ENFirstDP:
.9185	20 f2 96	jsr $96f2			jsr 	NSMSetZero 					; clear integer part
.9188	80 3f		bra $91c9			bra 	_ESTASwitchFloat			; go straight to float and exi
.918a					_ENNoRestart:
.918a	48		pha				pha 								; save on stack.
.918b	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.918e	c9 01		cmp #$01			cmp 	#ESTA_Low
.9190	f0 09		beq $919b			beq  	_ESTALowState
.9192	c9 02		cmp #$02			cmp 	#ESTA_High
.9194	f0 29		beq $91bf			beq 	_ESTAHighState
.9196	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9198	f0 3b		beq $91d5			beq 	_ESTADecimalState
>919a	db						.byte 	$DB 						; causes a break in the emulator
.919b					_ESTALowState:
.919b	68		pla				pla 								; get value back
.919c	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.919e	f0 29		beq $91c9			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.91a0	29 0f		and #$0f			and 	#15 						; make digit
.91a2	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.91a5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.91a8	0a		asl a				asl 	a
.91a9	0a		asl a				asl 	a
.91aa	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.91ad	0a		asl a				asl 	a
.91ae	6d 06 07	adc $0706			adc 	DigitTemp
.91b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91b4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.91b6	90 05		bcc $91bd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.91b8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.91ba	8d 05 07	sta $0705			sta 	EncodeState
.91bd					_ESTANoSwitch:
.91bd	38		sec				sec
.91be	60		rts				rts
.91bf					_ESTAHighState:
.91bf	68		pla				pla 								; get value back
.91c0	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.91c2	f0 05		beq $91c9			beq 	_ESTASwitchFloat
.91c4	20 28 92	jsr $9228			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.91c7	38		sec				sec
.91c8	60		rts				rts
.91c9					_ESTASwitchFloat:
.91c9	9c 07 07	stz $0707			stz 	DecimalCount
.91cc	e8		inx				inx 								; zero the decimal additive.
.91cd	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.91d0	ca		dex				dex
.91d1	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.91d3	80 ab		bra $9180			bra 	_ENExitChange
.91d5					_ESTADecimalState:
.91d5	68		pla				pla 								; digit.
.91d6	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.91d8	f0 96		beq $9170			beq 	_ENFail
.91da	e8		inx				inx 								; put digit into fractional part of X+1
.91db	20 28 92	jsr $9228			jsr 	ESTAShiftDigitIntoMantissa
.91de	ca		dex				dex
.91df	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.91e2	ad 07 07	lda $0707			lda 	DecimalCount
.91e5	c9 0b		cmp #$0b			cmp 	#11
.91e7	f0 02		beq $91eb			beq 	_ESTADSFail
.91e9	38		sec				sec
.91ea	60		rts				rts
.91eb					_ESTADSFail:
.91eb	4c fa a3	jmp $a3fa			jmp 	RangeError
.91ee					_ENConstructFinal:
.91ee	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.91f1	f0 33		beq $9226			beq 	_ENCFExit 					; no decimals
.91f3	5a		phy				phy
.91f4	0a		asl a				asl 	a 							; x 4 and CLC
.91f5	0a		asl a				asl 	a
.91f6	6d 07 07	adc $0707			adc 	DecimalCount
.91f9	a8		tay				tay
.91fa	b9 b9 a3	lda $a3b9,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.91fd	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9200	b9 ba a3	lda $a3ba,y			lda 	DecimalScalarTable-5+1,y
.9203	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9206	b9 bb a3	lda $a3bb,y			lda 	DecimalScalarTable-5+2,y
.9209	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.920c	b9 bc a3	lda $a3bc,y			lda 	DecimalScalarTable-5+3,y
.920f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9212	b9 bd a3	lda $a3bd,y			lda 	DecimalScalarTable-5+4,y
.9215	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9218	a9 08		lda #$08			lda 	#NSTFloat
.921a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.921d	7a		ply				ply
.921e	e8		inx				inx 								; multiply decimal const by decimal scalar
.921f	20 45 a1	jsr $a145			jsr 	FloatMultiply
.9222	ca		dex				dex
.9223	20 da 9f	jsr $9fda			jsr 	FloatAdd 					; add to integer part.
.9226					_ENCFExit:
.9226	18		clc				clc 								; reject the digit.
.9227	60		rts				rts
.9228					ESTAShiftDigitIntoMantissa:
.9228	29 0f		and #$0f			and 	#15 						; save digit
.922a	48		pha				pha
.922b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.922e	48		pha				pha
.922f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9232	48		pha				pha
.9233	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9236	48		pha				pha
.9237	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.923a	48		pha				pha
.923b	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 2
.923e	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 4
.9241	18		clc				clc 								; pop mantissa and add
.9242	68		pla				pla
.9243	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9246	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9249	68		pla				pla
.924a	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.924d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9250	68		pla				pla
.9251	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9254	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9257	68		pla				pla
.9258	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.925b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.925e	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 10
.9261	68		pla				pla 								; add digit
.9262	18		clc				clc
.9263	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9266	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9269	90 0d		bcc $9278			bcc 	_ESTASDExit
.926b	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.926e	d0 08		bne $9278			bne 	_ESTASDExit
.9270	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9273	d0 03		bne $9278			bne 	_ESTASDExit
.9275	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9278					_ESTASDExit:
.9278	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9279					EvaluateTerm:
.9279	b1 30		lda ($30),y			lda 	(codePtr),y
.927b	30 18		bmi $9295			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.927d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.927f	b0 6f		bcs $92f0			bcs 	_ETVariable
.9281	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9283	90 6e		bcc $92f3			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9285	c9 3a		cmp #$3a			cmp 	#'9'+1
.9287	b0 6a		bcs $92f3			bcs 	_ETPuncUnary
.9289	20 57 91	jsr $9157			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.928c					_ETNumber:
.928c	c8		iny				iny 								; keep encoding until we have the numbers
.928d	b1 30		lda ($30),y			lda 	(codePtr),y
.928f	20 5a 91	jsr $915a			jsr 	EncodeNumberContinue
.9292	b0 f8		bcs $928c			bcs 	_ETNumber 					; go back if accepted.
.9294	60		rts				rts
.9295					_ETCheckUnary:
.9295	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9297	f0 41		beq $92da			beq 	_ETString
.9299	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.929b	f0 12		beq $92af			beq 	_ETHexConstant
.929d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.929f	90 0b		bcc $92ac			bcc 	_ETSyntaxError
.92a1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.92a3	b0 07		bcs $92ac			bcs 	_ETSyntaxError
.92a5	da		phx				phx 								; push X on the stack
.92a6	0a		asl a				asl 	a 							; put vector x 2 into X
.92a7	aa		tax				tax
.92a8	c8		iny				iny 								; consume unary function token
.92a9	7c 8c 80	jmp ($808c,x)			jmp 	(VectorSet0,x) 				; and do it.
.92ac					_ETSyntaxError:
.92ac	4c f5 a3	jmp $a3f5			jmp 	SyntaxError
.92af					_ETHexConstant:
.92af	c8		iny				iny 								; skip #
.92b0	c8		iny				iny 								; skip count
.92b1	20 f2 96	jsr $96f2			jsr 	NSMSetZero 					; clear result
.92b4					_ETHLoop:
.92b4	b1 30		lda ($30),y			lda 	(codePtr),y
.92b6	c8		iny				iny 								; and consume
.92b7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.92b9	f0 1e		beq $92d9			beq 	_ETHExit
.92bb	48		pha				pha 								; save on stack.
.92bc	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 2
.92bf	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 4
.92c2	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 8
.92c5	20 07 97	jsr $9707			jsr 	NSMShiftLeft 				; x 16
.92c8	68		pla				pla 								; ASCII
.92c9	c9 41		cmp #$41			cmp 	#'A'
.92cb	90 02		bcc $92cf			bcc 	_ETHNotChar
.92cd	e9 07		sbc #$07			sbc 	#7
.92cf					_ETHNotChar:
.92cf	29 0f		and #$0f			and 	#15 						; digit now
.92d1	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.92d4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92d7	80 db		bra $92b4			bra 	_ETHLoop 					; go round.
.92d9					_ETHExit:
.92d9	60		rts				rts
.92da					_ETString:
.92da	c8		iny				iny 								; look at length
.92db	b1 30		lda ($30),y			lda 	(codePtr),y
.92dd	48		pha				pha
.92de	c8		iny				iny 								; first character
.92df	20 8d 9d	jsr $9d8d			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.92e2	68		pla				pla 								; restore count and save
.92e3	85 36		sta $36				sta 	zTemp0
.92e5	98		tya				tya 								; add length to Y to skip it.
.92e6	18		clc				clc
.92e7	65 36		adc $36				adc 	zTemp0
.92e9	a8		tay				tay
.92ea	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.92ec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92ef	60		rts				rts
.92f0					_ETVariable:
.92f0	4c 4a 93	jmp $934a			jmp 	VariableHandler
.92f3					_ETPuncUnary:
.92f3	c8		iny				iny 								; consume the unary character
.92f4	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.92f6	f0 2d		beq $9325			beq 	_ETUnaryNegate
.92f8	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.92fa	f0 39		beq $9335			beq 	_ETDereference
.92fc	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.92fe	f0 43		beq $9343			beq 	_ETParenthesis
.9300	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9302	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9304	f0 06		beq $930c			beq 	_ETIndirection
.9306	e6 36		inc $36				inc 	zTemp0
.9308	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.930a	d0 a0		bne $92ac			bne 	_ETSyntaxError
.930c					_ETIndirection:
.930c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.930e	1a		inc a				inc 	a
.930f	48		pha				pha
.9310	20 79 92	jsr $9279			jsr 	EvaluateTerm				; evaluate the term
.9313	20 bd 90	jsr $90bd			jsr 	Dereference 				; dereference it.
.9316	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9319	d0 07		bne $9322			bne 	_ETTypeMismatch
.931b	68		pla				pla 								; indirection 1-2
.931c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.931e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9321	60		rts				rts
.9322					_ETTypeMismatch:
.9322	4c ff a3	jmp $a3ff			jmp 	TypeError
.9325					_ETUnaryNegate:
.9325	20 79 92	jsr $9279			jsr 	EvaluateTerm				; evaluate the term
.9328	20 bd 90	jsr $90bd			jsr 	Dereference 				; dereference it.
.932b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.932e	29 10		and #$10			and 	#NSTString
.9330	d0 f0		bne $9322			bne 	_ETTypeMismatch
.9332	4c 9e 96	jmp $969e			jmp 	NSMNegate  					; just toggles the sign bit.
.9335					_ETDereference:
.9335	20 79 92	jsr $9279			jsr 	EvaluateTerm				; evaluate the term
.9338	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.933b	29 20		and #$20			and 	#NSBIsReference
.933d	f0 e3		beq $9322			beq 	_ETTypeMismatch
.933f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9342	60		rts				rts
.9343					_ETParenthesis:
.9343	20 a8 8f	jsr $8fa8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9346	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; check for )
.9349	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.934a					VariableHandler:
.934a	b1 30		lda ($30),y			lda 	(codePtr),y
.934c	18		clc				clc
.934d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.934f	85 37		sta $37				sta 	zTemp0+1
.9351	c8		iny				iny
.9352	b1 30		lda ($30),y			lda 	(codePtr),y
.9354	85 36		sta $36				sta 	zTemp0
.9356	c8		iny				iny
.9357	18		clc				clc									; copy variable address+3 to mantissa
.9358	69 03		adc #$03			adc 	#3
.935a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.935d	a5 37		lda $37				lda 	zTemp0+1
.935f	69 00		adc #$00			adc 	#0
.9361	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9364	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9367	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.936a	9e 28 06	stz $0628,x			stz 	NSExponent,x
.936d	5a		phy				phy
.936e	a0 02		ldy #$02			ldy 	#2 							; read type
.9370	b1 36		lda ($36),y			lda 	(zTemp0),y
.9372	7a		ply				ply
.9373	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9375	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9377	9d 00 06	sta $0600,x			sta 	NSStatus,x
.937a	29 04		and #$04			and 	#NSBIsArray
.937c	d0 01		bne $937f			bne 	_VHArray
.937e	60		rts				rts
.937f					_VHArray:
.937f	e8		inx				inx
.9380	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9383	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9385	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9388	b1 30		lda ($30),y			lda 	(codePtr),y
.938a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.938c	d0 06		bne $9394			bne 	_VHNoSecondIndex
.938e	c8		iny				iny 								; skip the comma
.938f	e8		inx				inx
.9390	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9393	ca		dex				dex
.9394					_VHNoSecondIndex:
.9394	ca		dex				dex 								; set X back.
.9395	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; and check the right bracket.
.9398	5a		phy				phy 								; save position
.9399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.939c	85 3e		sta $3e				sta 	zaTemp
.939e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93a1	85 3f		sta $3f				sta 	zaTemp+1
.93a3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.93a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93a7	f0 02		beq $93ab			beq 	_VHHas2Mask
.93a9	a9 ff		lda #$ff			lda 	#$FF
.93ab					_VHHas2Mask:
.93ab	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.93ae	f0 54		beq $9404			beq 	_VHBadIndex
.93b0	0a		asl a				asl 	a 							; carry will be set if a second index
.93b1	90 09		bcc $93bc			bcc 	_VHCheckFirstIndex
.93b3	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.93b5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93b7	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.93ba	90 48		bcc $9404			bcc 	_VHBadIndex
.93bc					_VHCheckFirstIndex:
.93bc	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.93be	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93c0	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.93c3	90 3f		bcc $9404			bcc 	_VHBadIndex
.93c5	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.93c7	64 37		stz $37				stz 	zTemp0+1
.93c9	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.93cc	30 0f		bmi $93dd			bmi 	_VHNoMultiply
.93ce	da		phx				phx
.93cf	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.93d2	48		pha				pha
.93d3	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.93d5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93d7	1a		inc a				inc 	a 							; add 1 for zero base
.93d8	fa		plx				plx
.93d9	20 95 a2	jsr $a295			jsr 	Multiply8x8 				; calculate -> Z0
.93dc	fa		plx				plx
.93dd					_VHNoMultiply:
.93dd	18		clc				clc
.93de	a5 36		lda $36				lda 	zTemp0
.93e0	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.93e3	85 36		sta $36				sta 	zTemp0
.93e5	a5 37		lda $37				lda 	zTemp0+1
.93e7	69 00		adc #$00			adc 	#0
.93e9	85 37		sta $37				sta 	zTemp0+1
.93eb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93ee	20 37 85	jsr $8537			jsr 	ScaleByBaseType
.93f1	18		clc				clc
.93f2	b2 3e		lda ($3e)			lda 	(zaTemp)
.93f4	65 36		adc $36				adc 	zTemp0
.93f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93f9	a0 01		ldy #$01			ldy 	#1
.93fb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93fd	65 37		adc $37				adc 	zTemp0+1
.93ff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9402	7a		ply				ply 								; restore position
.9403	60		rts				rts
.9404					_VHBadIndex:
.9404	a9 17		lda #$17		lda	#23
.9406	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a1cb					AbsUnary:
.a1cb	fa		plx				plx 								; restore stack pos
.a1cc	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; get a float or int
.a1cf	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a1d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a1d5	29 7f		and #$7f			and 	#$7F
.a1d7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9409					AllocUnary:
.9409	fa		plx				plx 								; restore stack pos
.940a	20 7e 96	jsr $967e			jsr 	Evaluate16BitInteger		; get bytes required.
.940d	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.9410	da		phx				phx 								; save X/Y
.9411	5a		phy				phy
.9412	8a		txa				txa 								; copy X into Y
.9413	a8		tay				tay
.9414	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9417	aa		tax				tax
.9418	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.941b	20 28 94	jsr $9428			jsr 	AllocateXABytes 			; allocate memory
.941e	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9421	8a		txa				txa
.9422	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9425	7a		ply				ply
.9426	fa		plx				plx
.9427	60		rts				rts
.9428					AllocateXABytes:
.9428	5a		phy				phy
.9429	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.942c	84 36		sty $36				sty 	zTemp0
.942e	5a		phy				phy
.942f	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9432	84 37		sty $37				sty 	zTemp0+1
.9434	5a		phy				phy
.9435	18		clc				clc 								; add to low memory pointer
.9436	6d 0c 07	adc $070c			adc 	lowMemPtr
.9439	8d 0c 07	sta $070c			sta 	lowMemPtr
.943c	8a		txa				txa
.943d	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9440	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9443					_ClearMemory:
.9443	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9446	c5 36		cmp $36				cmp 	zTemp0
.9448	d0 07		bne $9451			bne 	_CMClearNext
.944a	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.944d	c5 37		cmp $37				cmp 	zTemp0+1
.944f	f0 0c		beq $945d			beq 	_CMExit
.9451					_CMClearNext:
.9451	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9453	92 36		sta ($36)			sta 	(zTemp0)
.9455	e6 36		inc $36				inc 	zTemp0
.9457	d0 ea		bne $9443			bne 	_ClearMemory
.9459	e6 37		inc $37				inc		zTemp0+1
.945b	80 e6		bra $9443			bra 	_ClearMemory
.945d					_CMExit:
.945d	fa		plx				plx
.945e	68		pla				pla
.945f	7a		ply				ply
.9460	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1db					AscUnary:
.a1db	fa		plx				plx 								; restore stack pos
.a1dc	20 51 96	jsr $9651			jsr 	EvaluateString 				; get a string
.a1df	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a1e1	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.a1e4	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a1e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a1e8					FracUnary:
.a1e8	fa		plx				plx 								; restore stack pos
.a1e9	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; get a float or int
.a1ec	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a1ef	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a1f2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1f4	f0 04		beq $a1fa			beq 	_IUZero
.a1f6	20 b8 a0	jsr $a0b8			jsr 	FloatFractionalPart
.a1f9	60		rts				rts
.a1fa					_IUZero:
.a1fa	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.a1fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1fe					IntUnary:
.a1fe	fa		plx				plx 								; restore stack pos
.a1ff	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; get a float or int
.a202	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a205	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a208	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a20a	f0 03		beq $a20f			beq 	_IUExit
.a20c	20 1b a1	jsr $a11b			jsr 	FloatIntegerPart
.a20f					_IUExit:
.a20f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a210					LenUnary:
.a210	fa		plx				plx 								; restore stack pos
.a211	20 51 96	jsr $9651			jsr 	EvaluateString 				; get a string
.a214	5a		phy				phy
.a215	a0 00		ldy #$00			ldy 	#0 							; find length
.a217					_LenFind:
.a217	b1 36		lda ($36),y			lda 	(zTemp0),y
.a219	f0 06		beq $a221			beq 	_LenExit
.a21b	c8		iny				iny
.a21c	d0 f9		bne $a217			bne 	_LenFind
.a21e	4c fa a3	jmp $a3fa			jmp 	RangeError 					; string > 255
.a221					_LenExit:
.a221	98		tya				tya
.a222	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.a225	7a		ply				ply
.a226	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a229	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9461					Unary_Not:
.9461	fa		plx				plx
.9462	20 69 96	jsr $9669			jsr 	EvaluateInteger 			; get integer
.9465	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.9468	20 22 97	jsr $9722			jsr 	NSMIsZero 					; zero mantissa ?
.946b	f0 04		beq $9471			beq 	_NotZero
.946d	20 f2 96	jsr $96f2			jsr 	NSMSetZero
.9470	60		rts				rts
.9471					_NotZero:
.9471	4c 0c 8c	jmp $8c0c			jmp 	ReturnTrue
.9474					_UNBad:
.9474	4c 04 a4	jmp $a404			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9477					Unary_Rnd:
.9477	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; number to use.
.947a	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; closing bracket
.947d	20 a6 94	jsr $94a6			jsr 	Random32Bit 				; generate a number.
.9480	ad 08 07	lda $0708			lda 	RandomSeed+0
.9483	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9486	ad 09 07	lda $0709			lda 	RandomSeed+1
.9489	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.948c	ad 0a 07	lda $070a			lda 	RandomSeed+2
.948f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9492	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9495	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9497	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.949a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.949c	8d 28 06	sta $0628			sta 	NSExponent
.949f	a9 08		lda #$08			lda 	#NSTFloat
.94a1	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>94a4	db						.byte 	$DB 						; causes a break in the emulator
.94a5	60		rts				rts
.94a6					Random32Bit:
.94a6	5a		phy				phy
.94a7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.94a9	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.94ac	d0 03		bne $94b1			bne 	_Random1
.94ae	a8		tay				tay 								; if so do it 256 times
.94af	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.94b1					_Random1:
.94b1	0a		asl a				asl 	a 							; LSFR RNG
.94b2	2e 09 07	rol $0709			rol 	RandomSeed+1
.94b5	2e 0a 07	rol $070a			rol 	RandomSeed+2
.94b8	2e 0b 07	rol $070b			rol 	RandomSeed+3
.94bb	90 02		bcc $94bf			bcc 	_Random2
.94bd	49 c5		eor #$c5			eor 	#$C5
.94bf					_Random2:
.94bf	88		dey				dey
.94c0	d0 ef		bne $94b1			bne 	_Random1
.94c2	7a		ply				ply
.94c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a22a					SgnUnary:
.a22a	fa		plx				plx 								; restore stack pos
.a22b	20 46 96	jsr $9646			jsr 	EvaluateNumber 				; get a float or int
.a22e	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.a231	20 22 97	jsr $9722			jsr 	NSMIsZero 					; if zero
.a234	f0 10		beq $a246			beq 	_SGZero  					; return Int Zero
.a236	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a239	48		pha				pha
.a23a	a9 01		lda #$01			lda 	#1 							; set to 1
.a23c	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.a23f	68		pla				pla
.a240	29 80		and #$80			and		#$80 						; copy the sign byte out
.a242	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a245	60		rts				rts
.a246	20 f2 96	jsr $96f2	_SGZero:jsr 	NSMSetZero
.a249	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a24a					ValUnary:
.a24a	fa		plx				plx 								; restore stack pos
.a24b	20 60 a2	jsr $a260			jsr 	ValMainCode 				; do the main val() code
.a24e	b0 01		bcs $a251			bcs 	_VUError 					; couldn't convert
.a250	60		rts				rts
.a251					_VUError:
.a251	4c ff a3	jmp $a3ff			jmp 	TypeError
.a254					IsValUnary:
.a254	fa		plx				plx 								; restore stack pos
.a255	20 60 a2	jsr $a260			jsr 	ValMainCode 				; do the main val() code
.a258	b0 03		bcs $a25d			bcs 	_VUBad
.a25a	4c 0c 8c	jmp $8c0c			jmp 	ReturnTrue
.a25d					_VUBad:
.a25d	4c 18 8c	jmp $8c18			jmp 	ReturnFalse
.a260					ValMainCode:
.a260	20 51 96	jsr $9651			jsr 	EvaluateString 				; get a string
.a263	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; check right bracket present
.a266	5a		phy				phy
.a267	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a269	f0 17		beq $a282			beq 	_VMCFail2
.a26b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a26d	48		pha				pha 								; save first character
.a26e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a270	d0 01		bne $a273			bne 	_VMCStart
.a272	c8		iny				iny 								; skip over -
.a273					_VMCStart:
.a273	38		sec				sec 								; initialise first time round.
.a274					_VMCNext:
.a274	c8		iny				iny 								; pre-increment
.a275	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a277	f0 0c		beq $a285			beq 	_VMCSuccess 				; successful.
.a279	20 5b 91	jsr $915b			jsr 	EncodeNumber 				; send it to the number-builder
.a27c	90 03		bcc $a281			bcc 	_VMCFail 					; if failed, give up.
.a27e	18		clc				clc 								; next time round, countinue
.a27f	80 f3		bra $a274			bra 	_VMCNext
.a281					_VMCFail:
.a281	68		pla				pla
.a282					_VMCFail2:
.a282	7a		ply				ply
.a283	38		sec				sec
.a284	60		rts				rts
.a285					_VMCSuccess:
.a285	a9 00		lda #$00			lda 	#0 							; construct final
.a287	20 5b 91	jsr $915b			jsr 	EncodeNumber
.a28a	68		pla				pla
.a28b	c9 2d		cmp #$2d			cmp 	#"-"
.a28d	d0 03		bne $a292			bne 	_VMCNotNegative
.a28f	20 9e 96	jsr $969e			jsr		NSMNegate
.a292					_VMCNotNegative:
.a292	7a		ply				ply
.a293	18		clc				clc
.a294	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.94c4					ChrUnary:
.94c4	fa		plx				plx 								; restore stack pos
.94c5	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger			; get value
.94c8	48		pha				pha
.94c9	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.94cc	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.94ce	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate
.94d1	68		pla				pla 								; write number to it
.94d2	20 2d a6	jsr $a62d			jsr 	StringTempWrite
.94d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.94d6					SpcUnary:
.94d6	fa		plx				plx 								; restore stack pos
.94d7	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger			; get value
.94da	5a		phy				phy
.94db	48		pha				pha 								; save count
.94dc	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate
.94df	7a		ply				ply 								; to do count in Y
.94e0					_SpcLoop:
.94e0	c0 00		cpy #$00			cpy 	#0
.94e2	f0 08		beq $94ec			beq 	_SpcExit
.94e4	a9 20		lda #$20			lda 	#32
.94e6	20 2d a6	jsr $a62d			jsr 	StringTempWrite
.94e9	88		dey				dey
.94ea	80 f4		bra $94e0			bra 	_SPCLoop
.94ec					_SpcExit:
.94ec	7a		ply				ply
.94ed	20 13 9e	jsr $9e13			jsr 	CheckRightBracket
.94f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.94f1					Unary_Str:
.94f1	fa		plx				plx
.94f2	20 46 96	jsr $9646			jsr 	EvaluateNumber  			; get number
.94f5	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; closing bracket
.94f8	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.94fa	20 13 95	jsr $9513			jsr 	ConvertNumberToString 		; do the conversion.
.94fd	a9 21		lda #$21			lda		#33 						; create buffer
.94ff	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate 			; allocate memory
.9502	da		phx				phx
.9503	a2 00		ldx #$00			ldx 	#0
.9505					_USCopy:
.9505	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.9508	20 2d a6	jsr $a62d			jsr 	StringTempWrite
.950b	e8		inx				inx
.950c	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.950f	d0 f4		bne $9505			bne 	_USCopy
.9511	fa		plx				plx
.9512	60		rts				rts
.9513					ConvertNumberToString:
.9513	5a		phy				phy 								; save code position
.9514	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.9517	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.951a	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.951d	10 0a		bpl $9529			bpl 	_CNTSNotNegative
.951f	29 7f		and #$7f			and 	#$7F 						; make +ve
.9521	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9524	a9 2d		lda #$2d			lda 	#"-"
.9526	20 8f 95	jsr $958f			jsr 	WriteDecimalBuffer
.9529					_CNTSNotNegative:
.9529	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.952c	f0 15		beq $9543			beq 	_CNTSNotFloat
.952e	e8		inx				inx 								; round up
.952f	a9 01		lda #$01			lda 	#1
.9531	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.9534	ca		dex				dex
.9535	bd 28 06	lda $0628,x			lda		NSExponent,x
.9538	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.953b	a9 08		lda #$08			lda 	#NSTFloat
.953d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9540	20 da 9f	jsr $9fda			jsr 	FloatAdd
.9543					_CNTSNotFloat:
.9543	20 71 95	jsr $9571			jsr 	MakePlusTwoString
.9546	20 b8 a0	jsr $a0b8			jsr 	FloatFractionalPart 		; get the fractional part
.9549	20 7c a1	jsr $a17c			jsr 	NSNormalise					; normalise , exit if zero
.954c	f0 21		beq $956f			beq 	_CNTSExit
.954e	a9 2e		lda #$2e			lda 	#"."
.9550	20 8f 95	jsr $958f			jsr 	WriteDecimalBuffer 			; write decimal place
.9553					_CNTSDecimal:
.9553	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.9556	30 17		bmi $956f			bmi 	_CNTSExit
.9558	e8		inx				inx 								; x 10.0
.9559	a9 0a		lda #$0a			lda 	#10
.955b	20 f4 96	jsr $96f4			jsr 	NSMSetByte
.955e	a9 08		lda #$08			lda 	#NSTFloat
.9560	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9563	ca		dex				dex
.9564	20 45 a1	jsr $a145			jsr 	FloatMultiply
.9567	20 71 95	jsr $9571			jsr 	MakePlusTwoString
.956a	20 b8 a0	jsr $a0b8			jsr 	FloatFractionalPart 		; get the fractional part
.956d	80 e4		bra $9553			bra 	_CNTSDecimal 				; keep going.
.956f					_CNTSExit:
.956f	7a		ply				ply
.9570	60		rts				rts
.9571					MakePlusTwoString:
.9571	da		phx				phx
.9572	20 c9 96	jsr $96c9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9575	e8		inx				inx 								; access it
.9576	e8		inx				inx
.9577	20 1b a1	jsr $a11b			jsr 	FloatIntegerPart 			; make it an integer
.957a	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.957c	20 84 9f	jsr $9f84			jsr 	ConvertInt32
.957f	a2 00		ldx #$00			ldx	 	#0
.9581					_MPTSCopy:
.9581	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.9584	20 8f 95	jsr $958f			jsr 	WriteDecimalBuffer
.9587	e8		inx				inx
.9588	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.958b	d0 f4		bne $9581			bne 	_MPTSCopy
.958d	fa		plx				plx
.958e	60		rts				rts
.958f					WriteDecimalBuffer:
.958f	da		phx				phx
.9590	ae 14 07	ldx $0714			ldx 	dbOffset
.9593	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.9596	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.9599	ee 14 07	inc $0714			inc 	dbOffset
.959c	fa		plx				plx
.959d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.959e					Unary_Left:
.959e	fa		plx				plx
.959f	18		clc				clc 								; only one parameter
.95a0	20 15 96	jsr $9615			jsr 	SubstringInitial 			; set up.
.95a3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.95a6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95a9	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.95ac	80 2c		bra $95da			bra 	SubstringMain
.95ae					Unary_Right:
.95ae	fa		plx				plx
.95af	18		clc				clc 								; only one parameter
.95b0	20 15 96	jsr $9615			jsr 	SubstringInitial 			; set up.
.95b3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.95b6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95b9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.95bc	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.95bf	b0 02		bcs $95c3			bcs 	_URNotUnderflow
.95c1	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.95c3					_URNotUnderFlow:
.95c3	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.95c6	80 12		bra $95da			bra 	SubStringMain
.95c8					Unary_Mid:
.95c8	fa		plx				plx
.95c9	38		sec				sec 								; two parameters
.95ca	20 15 96	jsr $9615			jsr 	SubstringInitial 			; set up.
.95cd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.95d0	f0 05		beq $95d7			beq 	_UMError
.95d2	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.95d5	80 03		bra $95da			bra 	SubStringMain
.95d7					_UMError:
.95d7	4c 04 a4	jmp $a404			jmp 	ArgumentError
.95da					SubStringMain:
.95da	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.95dd	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.95e0	b0 2d		bcs $960f			bcs 	_SSMNull 					; if so, return an empty string.
.95e2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.95e5	f0 28		beq $960f			beq 	_SSMNull 					; return empty string.
.95e7	18		clc				clc 								; add the offset +1 to the address and
.95e8	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.95eb	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.95ee	85 36		sta $36				sta 	zTemp0
.95f0	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.95f3	69 00		adc #$00			adc 	#0
.95f5	85 37		sta $37				sta 	zTemp0+1
.95f7					_SSMNoCarry:
.95f7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.95fa	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate 			; allocate that many characters
.95fd	5a		phy				phy 								; save Y
.95fe	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9600					_SSMCopy:
.9600	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9602	f0 09		beq $960d			beq 	_SSMEString 				; no more to copy
.9604	20 2d a6	jsr $a62d			jsr 	StringTempWrite 			; and write it out.
.9607	c8		iny				iny
.9608	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.960b	d0 f3		bne $9600			bne 	_SSMCopy
.960d					_SSMEString:
.960d	7a		ply				ply
.960e					_SSMExit:
.960e	60		rts				rts
.960f					_SSMNull:
.960f	a9 00		lda #$00			lda 	#0
.9611	20 ef a5	jsr $a5ef			jsr 	StringTempAllocate
.9614	60		rts				rts
.9615					SubstringInitial:
.9615	da		phx				phx 								; save initial stack position
.9616	08		php				php 								; save carry on stack indicating 2 parameters
.9617	20 51 96	jsr $9651			jsr 	EvaluateString 				; get a string
.961a	5a		phy				phy 								; calculate length to exponent.
.961b	a0 ff		ldy #$ff			ldy 	#$FF
.961d					_SIFindLength:
.961d	c8		iny				iny
.961e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9620	d0 fb		bne $961d			bne 	_SIFindLength
.9622	98		tya				tya
.9623	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9626	7a		ply				ply
.9627	e8		inx				inx
.9628	20 1b 9e	jsr $9e1b			jsr 	CheckComma 					; comma next
.962b	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 		; get next parameter
.962e	28		plp				plp 								; is it the last parameter ?
.962f	90 07		bcc $9638			bcc 	_SSIExit 					; if so, exit.
.9631	e8		inx				inx
.9632	20 1b 9e	jsr $9e1b			jsr 	CheckComma 					; comma next
.9635	20 8a 96	jsr $968a			jsr 	Evaluate8BitInteger 		; get last parameter
.9638					_SSIExit:
.9638	fa		plx				plx
.9639	20 13 9e	jsr $9e13			jsr 	CheckRightBracket 			; check closing bracket
.963c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.963d					EvaluateValue:
.963d	48		pha				pha
.963e	20 a8 8f	jsr $8fa8			jsr		EvaluateExpression 			; expression
.9641	20 bd 90	jsr $90bd			jsr 	Dereference					; derefernce it
.9644	68		pla				pla
.9645	60		rts				rts
.9646					EvaluateNumber:
.9646	20 3d 96	jsr $963d			jsr 	EvaluateValue 				; get a value
.9649	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.964c	29 10		and #$10			and 	#NSBIsString
.964e	d0 16		bne $9666			bne 	HelperTypeError
.9650	60		rts				rts
.9651					EvaluateString:
.9651	20 3d 96	jsr $963d			jsr 	EvaluateValue 				; get a value
.9654	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9657	29 10		and #$10			and 	#NSBIsString
.9659	f0 0b		beq $9666			beq 	HelperTypeError
.965b					CopyAddressToTemp0:
.965b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.965e	85 36		sta $36				sta 	zTemp0
.9660	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9663	85 37		sta $37				sta 	zTemp0+1
.9665	60		rts				rts
.9666					HelperTypeError:
.9666	4c ff a3	jmp $a3ff			jmp 	TypeError
.9669					EvaluateInteger:
.9669	20 46 96	jsr $9646			jsr 	EvaluateNumber
.966c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.966f	d0 0a		bne $967b			bne 	HelperValueError 			; if not, it's a float.
.9671	60		rts				rts
.9672					EvaluateUnsignedInteger:
.9672	20 69 96	jsr $9669			jsr 	EvaluateInteger 			; check integer is +ve
.9675	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9678	30 01		bmi $967b			bmi 	HelperValueError
.967a	60		rts				rts
.967b					HelperValueError:
.967b	4c 04 a4	jmp $a404			jmp 	ArgumentError
.967e					Evaluate16BitInteger:
.967e	20 72 96	jsr $9672			jsr	 	EvaluateUnsignedInteger		; get integer
.9681	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9684	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9687	d0 f2		bne $967b			bne 	HelperValueError
.9689	60		rts				rts
.968a					Evaluate8BitInteger:
.968a	20 72 96	jsr $9672			jsr	 	EvaluateUnsignedInteger 	; get an integer
.968d	d0 ec		bne $967b			bne 	HelperValueError
.968f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9692	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9695	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9698	d0 e1		bne $967b			bne 	HelperValueError
.969a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.969d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a295					Multiply8x8:
.a295	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a296	85 36		sta $36			  	sta 	zTemp0
.a298	86 37		stx $37				stx 	zTemp0+1
.a29a	a9 00		lda #$00			lda 	#0
.a29c	a2 08		ldx #$08			ldx 	#8
.a29e					_M88Loop:
.a29e	90 03		bcc $a2a3			bcc 	_M88NoAdd
.a2a0	18		clc				clc
.a2a1	65 37		adc $37				adc 	zTemp0+1
.a2a3					_M88NoAdd:
.a2a3	6a		ror a				ror 	a
.a2a4	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2a6	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2a7	d0 f5		bne $a29e			bne 	_M88Loop
.a2a9	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.969e					NSMNegate:
.969e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96a1	49 80		eor #$80			eor 	#NSBIsNegative
.96a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96a6	60		rts				rts
.96a7					NSMNegateMantissa:
.96a7	38		sec				sec
.96a8	a9 00		lda #$00			lda 	#0
.96aa	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.96ad	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96b0	a9 00		lda #$00			lda 	#0
.96b2	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.96b5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96b8	a9 00		lda #$00			lda 	#0
.96ba	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.96bd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96c0	a9 00		lda #$00			lda 	#0
.96c2	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.96c5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96c8	60		rts				rts
.96c9					NSMShiftUpTwo:
.96c9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96cc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96cf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96d2	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.96d5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.96d8	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.96db	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.96de	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.96e1	bd 28 06	lda $0628,x			lda 	NSExponent,x
.96e4	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.96e7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96ea	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.96ed	60		rts				rts
.96ee					NSMSetZeroMantissaOnly:
.96ee	a9 00		lda #$00			lda 	#0
.96f0	80 08		bra $96fa			bra 	NSMSetMantissa
.96f2					NSMSetZero:
.96f2	a9 00		lda #$00			lda 	#0
.96f4					NSMSetByte:
.96f4	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.96f7	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.96fa					NSMSetMantissa:
.96fa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.96fd	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9700	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9703	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9706	60		rts				rts
.9707					NSMShiftLeft:
.9707	18		clc				clc
.9708					NSMRotateLeft:
.9708	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.970b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.970e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9711	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9714	60		rts				rts
.9715					NSMShiftRight:
.9715	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9718	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.971b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.971e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9721	60		rts				rts
.9722					NSMIsZero:
.9722	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9725	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9728	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.972b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.972e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a2ac					Assemble_ora:
.a2ac	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2af	01					.byte $01
.a2b0					Assemble_and:
.a2b0	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2b3	21					.byte $21
.a2b4					Assemble_eor:
.a2b4	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2b7	41					.byte $41
.a2b8					Assemble_adc:
.a2b8	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2bb	61					.byte $61
.a2bc					Assemble_sta:
.a2bc	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2bf	81					.byte $81
.a2c0					Assemble_lda:
.a2c0	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2c3	a1					.byte $a1
.a2c4					Assemble_cmp:
.a2c4	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2c7	c1					.byte $c1
.a2c8					Assemble_sbc:
.a2c8	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2cb	e1					.byte $e1
.a2cc					Assemble_asl:
.a2cc	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2cf	02					.byte $02
>a2d0	75					.byte $75
.a2d1					Assemble_rol:
.a2d1	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2d4	22					.byte $22
>a2d5	75					.byte $75
.a2d6					Assemble_lsr:
.a2d6	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2d9	42					.byte $42
>a2da	75					.byte $75
.a2db					Assemble_ror:
.a2db	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2de	62					.byte $62
>a2df	75					.byte $75
.a2e0					Assemble_stx:
.a2e0	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2e3	82					.byte $82
>a2e4	50					.byte $50
.a2e5					Assemble_ldx:
.a2e5	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2e8	a2					.byte $a2
>a2e9	d0					.byte $d0
.a2ea					Assemble_dec:
.a2ea	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2ed	c2					.byte $c2
>a2ee	55					.byte $55
.a2ef					Assemble_inc:
.a2ef	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2f2	e2					.byte $e2
>a2f3	55					.byte $55
.a2f4					Assemble_stz:
.a2f4	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2f7	60					.byte $60
>a2f8	44					.byte $44
.a2f9					Assemble_bit:
.a2f9	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2fc	20					.byte $20
>a2fd	55					.byte $55
.a2fe					Assemble_sty:
.a2fe	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a301	80					.byte $80
>a302	54					.byte $54
.a303					Assemble_ldy:
.a303	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a306	a0					.byte $a0
>a307	d5					.byte $d5
.a308					Assemble_cpy:
.a308	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a30b	c0					.byte $c0
>a30c	d4					.byte $d4
.a30d					Assemble_cpx:
.a30d	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a310	e0					.byte $e0
>a311	d0					.byte $d0
.a312					Assemble_tsb:
.a312	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a315	00					.byte $00
>a316	50					.byte $50
.a317					Assemble_trb:
.a317	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a31a	10					.byte $10
>a31b	50					.byte $50
.a31c					Assemble_jsr:
.a31c	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a31f	14					.byte $14
>a320	10					.byte $10
.a321					Assemble_jmp:
.a321	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a324	40					.byte $40
>a325	10					.byte $10
.a326					Assemble_bpl:
.a326	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a329	10					.byte $10
.a32a					Assemble_bmi:
.a32a	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a32d	30					.byte $30
.a32e					Assemble_bvc:
.a32e	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a331	50					.byte $50
.a332					Assemble_bvs:
.a332	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a335	70					.byte $70
.a336					Assemble_bcc:
.a336	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a339	90					.byte $90
.a33a					Assemble_bcs:
.a33a	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a33d	b0					.byte $b0
.a33e					Assemble_bne:
.a33e	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a341	d0					.byte $d0
.a342					Assemble_beq:
.a342	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a345	f0					.byte $f0
.a346					Assemble_bra:
.a346	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a349	80					.byte $80
.a34a					Assemble_brk:
.a34a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a34d	00					.byte $00
.a34e					Assemble_php:
.a34e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a351	08					.byte $08
.a352					Assemble_clc:
.a352	20 16 82	jsr $8216		jsr	AssembleGroup4
>a355	18					.byte $18
.a356					Assemble_plp:
.a356	20 16 82	jsr $8216		jsr	AssembleGroup4
>a359	28					.byte $28
.a35a					Assemble_sec:
.a35a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a35d	38					.byte $38
.a35e					Assemble_rti:
.a35e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a361	40					.byte $40
.a362					Assemble_pha:
.a362	20 16 82	jsr $8216		jsr	AssembleGroup4
>a365	48					.byte $48
.a366					Assemble_cli:
.a366	20 16 82	jsr $8216		jsr	AssembleGroup4
>a369	58					.byte $58
.a36a					Assemble_phy:
.a36a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a36d	5a					.byte $5a
.a36e					Assemble_rts:
.a36e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a371	60					.byte $60
.a372					Assemble_pla:
.a372	20 16 82	jsr $8216		jsr	AssembleGroup4
>a375	68					.byte $68
.a376					Assemble_sei:
.a376	20 16 82	jsr $8216		jsr	AssembleGroup4
>a379	78					.byte $78
.a37a					Assemble_ply:
.a37a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a37d	7a					.byte $7a
.a37e					Assemble_dey:
.a37e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a381	88					.byte $88
.a382					Assemble_txa:
.a382	20 16 82	jsr $8216		jsr	AssembleGroup4
>a385	8a					.byte $8a
.a386					Assemble_tya:
.a386	20 16 82	jsr $8216		jsr	AssembleGroup4
>a389	98					.byte $98
.a38a					Assemble_txs:
.a38a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a38d	9a					.byte $9a
.a38e					Assemble_tay:
.a38e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a391	a8					.byte $a8
.a392					Assemble_tax:
.a392	20 16 82	jsr $8216		jsr	AssembleGroup4
>a395	aa					.byte $aa
.a396					Assemble_clv:
.a396	20 16 82	jsr $8216		jsr	AssembleGroup4
>a399	b8					.byte $b8
.a39a					Assemble_tsx:
.a39a	20 16 82	jsr $8216		jsr	AssembleGroup4
>a39d	ba					.byte $ba
.a39e					Assemble_iny:
.a39e	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3a1	c8					.byte $c8
.a3a2					Assemble_dex:
.a3a2	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3a5	ca					.byte $ca
.a3a6					Assemble_cld:
.a3a6	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3a9	d8					.byte $d8
.a3aa					Assemble_phx:
.a3aa	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3ad	da					.byte $da
.a3ae					Assemble_inx:
.a3ae	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3b1	e8					.byte $e8
.a3b2					Assemble_nop:
.a3b2	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3b5	ea					.byte $ea
.a3b6					Assemble_sed:
.a3b6	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3b9	f8					.byte $f8
.a3ba					Assemble_plx:
.a3ba	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3bd	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a3be					DecimalScalarTable:
>a3be	66 66 66 66				.dword $66666666 ; 0.1
>a3c2	de					.byte $de
>a3c3	1f 85 eb 51				.dword $51eb851f ; 0.01
>a3c7	db					.byte $db
>a3c8	4c 37 89 41				.dword $4189374c ; 0.001
>a3cc	d8					.byte $d8
>a3cd	ac 8b db 68				.dword $68db8bac ; 0.0001
>a3d1	d4					.byte $d4
>a3d2	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a3d6	d1					.byte $d1
>a3d7	83 de 1b 43				.dword $431bde83 ; 1e-06
>a3db	ce					.byte $ce
>a3dc	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a3e0	ca					.byte $ca
>a3e1	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a3e5	c7					.byte $c7
>a3e6	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a3ea	c4					.byte $c4
>a3eb	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a3ef	c0					.byte $c0
>a3f0	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a3f4	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a3f5					SyntaxError:
.a3f5	a9 02		lda #$02		lda	#2
.a3f7	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a3fa					RangeError:
.a3fa	a9 04		lda #$04		lda	#4
.a3fc	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a3ff					TypeError:
.a3ff	a9 05		lda #$05		lda	#5
.a401	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a404					ArgumentError:
.a404	a9 07		lda #$07		lda	#7
.a406	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a409					NotDoneError:
.a409	a9 0c		lda #$0c		lda	#12
.a40b	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a40e					ErrorText:
>a40e	42 72 65 61 6b 00			.text	"Break",0
>a414	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a41c	72 72 6f 72 00
>a421	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a429	20 62 79 20 7a 65 72 6f 00
>a432	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a43a	61 6e 67 65 00
>a43f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a447	6d 61 74 63 68 00
>a44d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a455	65 6d 6f 72 79 00
>a45b	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a463	61 72 67 75 6d 65 6e 74 00
>a46c	53 74 6f 70 00				.text	"Stop",0
>a471	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a479	6f 6f 20 6c 6f 6e 67 00
>a481	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a489	6e 20 66 61 69 6c 65 64 00
>a492	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a49a	61 74 61 00
>a49e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a4a6	65 6e 74 65 64 00
>a4ac	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a4b4	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a4c0	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a4c8	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a4d5	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a4dd	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a4ea	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a4f2	68 6f 75 74 20 57 68 69 6c 65 00
>a4fd	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a505	68 6f 75 74 20 46 6f 72 00
>a50e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a516	61 63 6b 20 66 75 6c 6c 00
>a51f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a527	75 63 74 75 72 65 00
>a52e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a536	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a543	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a54b	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a559	41 72 72 61 79 20 73 69			.text	"Array size",0
>a561	7a 65 00
>a564	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a56c	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.972f					StackOpen:
.972f	48		pha				pha 								; save frame byte
.9730	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9732	0a		asl a				asl 	a 							; claim twice this for storage
.9733	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9735	38		sec				sec 								; so basically subtracting from
.9736	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9738	85 34		sta $34				sta 	basicStack
.973a	b0 08		bcs $9744			bcs 	_SONoBorrow
.973c	c6 35		dec $35				dec 	basicStack+1
.973e	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9740	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9742	90 04		bcc $9748			bcc 	_SOMemory
.9744					_SONoBorrow:
.9744	68		pla				pla 								; get marker back and write at TOS
.9745	92 34		sta ($34)			sta 	(basicStack)
.9747	60		rts				rts
.9748					_SOMemory:
.9748							ERR_STACK
.9748					StackClose:
.9748	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.974a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.974c	0a		asl a				asl 	a 							; claim twice this.
.974d	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.974f	85 34		sta $34				sta 	basicStack
.9751	90 02		bcc $9755			bcc 	_SCExit
.9753	e6 35		inc $35				inc 	basicStack+1
.9755					_SCExit:
.9755	60		rts				rts
.9756					StackCheckFrame:
.9756	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9758	29 f0		and #$f0			and 	#$F0 						; check type bits
.975a	d0 01		bne $975d			bne 	_SCFError 					; different, we have structures mixed up
.975c	60		rts				rts
.975d					_SCFError:
.975d	8a		txa				txa 								; report error X
.975e	4c 9f 8b	jmp $8b9f			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9761					STKSaveCodePosition:
.9761	5a		phy				phy
.9762	98		tya				tya 								; save Y
.9763	a0 05		ldy #$05			ldy 	#5
.9765	91 34		sta ($34),y			sta 	(basicStack),y
.9767	88		dey				dey 								; save Code Pointer
.9768					_STKSaveLoop:
.9768	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.976b	91 34		sta ($34),y			sta 	(basicStack),y
.976d	88		dey				dey
.976e	d0 f8		bne $9768			bne 	_STKSaveLoop
.9770	7a		ply				ply
.9771	60		rts				rts
.9772					STKLoadCodePosition:
.9772	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9774					_STKLoadLoop:
.9774	b1 34		lda ($34),y			lda 	(basicStack),y
.9776	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9779	c8		iny				iny
.977a	c0 05		cpy #$05			cpy 	#5
.977c	d0 f6		bne $9774			bne 	_STKLoadLoop
.977e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9780	a8		tay				tay
.9781	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9782					StackReset:
.9782	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9784	85 34		sta $34				sta 	0+basicStack
.9786	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9788	85 35		sta $35				sta 	1+basicStack
.978a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.978c	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.978e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a574					StringConcrete:
.a574	5a		phy				phy 								; save position on stack
.a575	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a578	85 38		sta $38				sta 	zTemp1
.a57a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a57d	85 39		sta $39				sta 	zTemp1+1
.a57f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a581					_SALength:
.a581	c8		iny				iny
.a582	b1 38		lda ($38),y			lda 	(zTemp1),y
.a584	d0 fb		bne $a581			bne 	_SALength
.a586	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a588	b0 3f		bcs $a5c9			bcs 	_SALengthError
.a58a	98		tya				tya 				 				; length of the new string
.a58b	18		clc				clc
.a58c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a58e	90 02		bcc $a592			bcc 	_SAHaveLength
.a590	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a592					_SAHaveLength:
.a592	48		pha				pha 								; save length.
.a593	38		sec				sec
.a594	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a596	6d 0e 07	adc $070e			adc 	StringMemory
.a599	8d 0e 07	sta $070e			sta 	StringMemory
.a59c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a59e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a5a1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a5a3	6d 0f 07	adc $070f			adc 	StringMemory+1
.a5a6	8d 0f 07	sta $070f			sta 	StringMemory+1
.a5a9	85 3b		sta $3b				sta 	zTemp2+1
.a5ab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a5ae	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a5af	38		sec				sec
.a5b0	e9 03		sbc #$03			sbc 	#3
.a5b2	92 3a		sta ($3a)			sta 	(zTemp2)
.a5b4	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a5b6	a0 01		ldy #$01			ldy 	#1
.a5b8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a5ba					_SACopyNewString:
.a5ba	a0 00		ldy #$00			ldy 	#0
.a5bc					_SACopyNSLoop:
.a5bc	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a5be	c8		iny				iny 								; write two on in string storage
.a5bf	c8		iny				iny
.a5c0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a5c2	88		dey				dey 								; this makes it one one.
.a5c3	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a5c5	d0 f5		bne $a5bc			bne 	_SACopyNSLoop
.a5c7	7a		ply				ply
.a5c8	60		rts				rts
.a5c9					_SALengthError:
.a5c9	a9 09		lda #$09		lda	#9
.a5cb	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a5ce					StringSystemInitialise:
.a5ce	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a5d0	8d 0e 07	sta $070e			sta 	0+StringMemory
.a5d3	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a5d5	8d 0f 07	sta $070f			sta 	1+StringMemory
.a5d8	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a5db	60		rts				rts
.a5dc					StringSpaceInitialise:
.a5dc	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a5de	8d 10 07	sta $0710			sta 	StringInitialised
.a5e1	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a5e4	8d 11 07	sta $0711			sta 	StringTempPointer
.a5e7	ad 0f 07	lda $070f			lda 	StringMemory+1
.a5ea	3a		dec a				dec 	a
.a5eb	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a5ee	60		rts				rts
.a5ef					StringTempAllocate:
.a5ef	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a5f1	b0 35		bcs $a628			bcs 	_STALength
.a5f3	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a5f6	30 05		bmi $a5fd			bmi 	_STAAllocate
.a5f8	48		pha				pha 								; save value to subtract.
.a5f9	20 dc a5	jsr $a5dc			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a5fc	68		pla				pla 								; restore it
.a5fd					_STAAllocate:
.a5fd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a5ff	18		clc				clc  								; deliberate allows one more
.a600	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a603	8d 11 07	sta $0711			sta 	StringTempPointer
.a606	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a609	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a60b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a60e	69 ff		adc #$ff			adc 	#$FF
.a610	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a613	85 3d		sta $3d				sta 	zsTemp+1
.a615	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a618	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a61b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a61e	a9 10		lda #$10			lda 	#NSTString
.a620	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a623	a9 00		lda #$00			lda 	#0 							; clear the target string
.a625	92 3c		sta ($3c)			sta 	(zsTemp)
.a627	60		rts				rts
.a628					_STALength:
.a628	a9 09		lda #$09		lda	#9
.a62a	4c 9f 8b	jmp $8b9f		jmp	ErrorHandler
.a62d					StringTempWrite:
.a62d	48		pha				pha
.a62e	92 3c		sta ($3c)			sta 	(zsTemp)
.a630	e6 3c		inc $3c				inc 	zsTemp
.a632	d0 02		bne $a636			bne 	_STWNoCarry
.a634	e6 3d		inc $3d				inc 	zsTemp+1
.a636					_STWNoCarry:
.a636	a9 00		lda #$00			lda 	#0
.a638	92 3c		sta ($3c)			sta 	(zsTemp)
.a63a	68		pla				pla
.a63b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.978f					BackloadProgram:
.978f	a2 ff		ldx #$ff			ldx 	#$FF
.9791	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9794	20 be 97	jsr $97be			jsr 	BLReadByte
.9797	30 1e		bmi $97b7			bmi 	_BPExit
.9799					_BPCopy:
.9799	e8		inx				inx  								; copy byte in
.979a	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.979d	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.97a0	20 be 97	jsr $97be			jsr 	BLReadByte 					; read next byte
.97a3	30 0a		bmi $97af			bmi 	_BPEndLine 					; -ve = EOL
.97a5	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.97a7	d0 02		bne $97ab			bne 	_BPNotTab
.97a9	a9 20		lda #$20			lda 	#' '
.97ab					_BPNotTab:
.97ab	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.97ad	b0 ea		bcs $9799			bcs 	_BPCopy
.97af					_BPEndLine:
.97af	20 d2 9a	jsr $9ad2			jsr 	TokeniseLine 				; tokenise the line.
.97b2	20 5e 9d	jsr $9d5e			jsr 	MemoryAppend 				; append to current program
.97b5	80 d8		bra $978f			bra 	BackloadProgram
.97b7					_BPExit:
.97b7	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.97ba	20 3f 84	jsr $843f			jsr 	ClearCommand 				; clear variables etc.
.97bd	60		rts				rts
.97be					BLReadByte:
.97be					_BLLoad:
.97be	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.97c1	ee bf 97	inc $97bf			inc 	_BLLoad+1
.97c4	d0 03		bne $97c9			bne 	_BLNoCarry
.97c6	ee c0 97	inc $97c0			inc 	_BLLoad+2
.97c9					_BLNoCarry:
.97c9	c9 00		cmp #$00			cmp 	#0
.97cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.97cc					TokeniseSearchTable:
.97cc	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.97ce	85 36		sta $36				sta 	zTemp0
.97d0	a0 00		ldy #$00			ldy 	#0
.97d2	a9 80		lda #$80			lda 	#$80 						; token #
.97d4	85 38		sta $38				sta 	zTemp1
.97d6					_TSTLoop:
.97d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.97d8	30 49		bmi $9823			bmi 	_TSTFail 					; -ve = end of table
.97da	f0 2e		beq $980a			beq 	_TSTNext 					; zero, check next it's a dummy
.97dc	c8		iny				iny 								; get the hash
.97dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.97df	88		dey				dey
.97e0	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.97e3	d0 25		bne $980a			bne 	_TSTNext
.97e5	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.97e8	38		sec				sec
.97e9	ed 00 07	sbc $0700			sbc 	identStart
.97ec	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.97ee	d0 1a		bne $980a			bne 	_TSTNext
.97f0	5a		phy				phy 								; save Y , we might fail
.97f1	c8		iny				iny 								; point to text
.97f2	c8		iny				iny
.97f3	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.97f6					_TSTCompareName:
.97f6	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.97f9	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.97fb	d0 0c		bne $9809			bne 	_TSTNextPullY 				; fail, pullY and do next
.97fd	e8		inx				inx
.97fe	c8		iny				iny
.97ff	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9802	d0 f2		bne $97f6			bne 	_TSTCompareName
.9804	7a		ply				ply 								; throw Y
.9805	a5 38		lda $38				lda 	zTemp1 						; get token #
.9807	38		sec				sec 								; return with CS = passed.
.9808	60		rts				rts
.9809					_TSTNextPullY:
.9809	7a		ply				ply 								; restore current, fall through.
.980a					_TSTNext:
.980a	e6 38		inc $38				inc 	zTemp1 						; token counter
.980c	98		tya				tya
.980d	18		clc				clc
.980e	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9810	1a		inc a				inc 	a 							; +1
.9811	1a		inc a				inc 	a 							; +2
.9812	a8		tay				tay
.9813	10 c1		bpl $97d6			bpl 	_TSTLoop 					; if Y < $80 loop back
.9815	98		tya				tya 								; add Y to zTemp0 and reset Y
.9816	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9818	18		clc				clc  								; but have tables > 255 bytes
.9819	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.981b	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.981d	90 b7		bcc $97d6			bcc 	_TSTLoop
.981f	e6 37		inc $37				inc 	zTemp0+1
.9821	80 b3		bra $97d6			bra 	_TSTLoop
.9823					_TSTFail:
.9823	18		clc				clc
.9824	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9825					KeywordSet0:
>9825	00 65					.text	0,$65,""               ; $80 !0:EOF
>9827	00 58					.text	0,$58,""               ; $81 !1:SH1
>9829	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>982b	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9831	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9839	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>983f	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9846	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>984d	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9854	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>985a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9862	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>986a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9870	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9877	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>987d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9885	28
>9886	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>988c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9892	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9898	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>989f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>98a5	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>98ab	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>98b0	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>98b4	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>98ba	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>98c2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>98c9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>98d0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>98d8	43
>98d9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>98df	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>98e5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>98ec	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>98f2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>98f8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>98fd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9903	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9908	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9910	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9916	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>991d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9923	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9928	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>992f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9935	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>993a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9942	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9946	ff					.text	$FF
.9947					KeywordSet1:
>9947	00 65					.text	0,$65,""               ; $80 !0:EOF
>9949	00 58					.text	0,$58,""               ; $81 !1:SH1
>994b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>994d	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9955	4c 45
>9957	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>995f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9966	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>996b	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9971	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9976	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>997e	45
>997f	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9984	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>998a	ff					.text	$FF
.998b					KeywordSet2:
>998b	00 65					.text	0,$65,""               ; $80 !0:EOF
>998d	00 58					.text	0,$58,""               ; $81 !1:SH1
>998f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9991	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9996	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>999b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>99a0	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>99a5	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>99aa	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>99af	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>99b4	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>99b9	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>99be	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>99c3	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>99c8	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>99cd	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>99d2	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>99d7	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>99dc	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>99e1	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>99e6	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>99eb	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>99f0	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>99f5	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>99fa	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>99ff	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9a04	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9a09	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9a0e	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9a13	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9a18	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9a1d	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9a22	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9a27	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9a2c	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9a31	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9a36	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9a3b	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9a40	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9a45	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9a4a	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9a4f	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9a54	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9a59	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9a5e	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9a63	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9a68	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9a6d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9a72	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9a77	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9a7c	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9a81	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9a86	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9a8b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9a90	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9a95	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9a9a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9a9f	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9aa4	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9aa9	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9aae	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9ab3	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9ab8	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9abd	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9ac2	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9ac7	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9acc	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9ad1	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9ad2					TokeniseLine:
.9ad2	20 5a 9c	jsr $9c5a			jsr 	FixLineBufferCase 			; fix line case
.9ad5	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9ad7	8d 24 07	sta $0724			sta 	tokenOffset
.9ada	9c 25 07	stz $0725			stz 	tokenLineNumber
.9add	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.9ae0	a2 ff		ldx #$ff			ldx 	#$FF
.9ae2					_TKFindFirst:
.9ae2	e8		inx				inx
.9ae3	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9ae6	f0 79		beq $9b61			beq 	_TKExit
.9ae8	c9 20		cmp #$20			cmp 	#' '
.9aea	90 f6		bcc $9ae2			bcc 	_TKFindFirst
.9aec	c9 30		cmp #$30			cmp 	#'0'
.9aee	90 07		bcc $9af7			bcc 	_TKNoLineNumber
.9af0	c9 3a		cmp #$3a			cmp 	#'9'+1
.9af2	b0 03		bcs $9af7			bcs 	_TKNoLineNumber
.9af4	20 84 9c	jsr $9c84			jsr 	TokeniseExtractLineNumber
.9af7					_TKNoLineNumber:
.9af7					_TKTokeniseLoop:
.9af7	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9afa	f0 65		beq $9b61			beq 	_TKExit
.9afc	e8		inx				inx
.9afd	c9 20		cmp #$20			cmp 	#' '
.9aff	f0 f6		beq $9af7			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9b01	ca		dex				dex 								; undo last get, A contains character, X is position.
.9b02	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9b04	f0 61		beq $9b67			beq 	_TKTokeniseIdentifier
.9b06	c9 41		cmp #$41			cmp 	#'A'
.9b08	90 04		bcc $9b0e			bcc 	_TKTokenisePunctuation
.9b0a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9b0c	90 59		bcc $9b67			bcc 	_TKTokeniseIdentifier
.9b0e					_TKTokenisePunctuation:
.9b0e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9b10	f0 27		beq $9b39			beq 	_TKString
.9b12	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9b14	f0 28		beq $9b3e			beq 	_TKHexConstant
.9b16	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9b18	f0 29		beq $9b43			beq 	_TKCheckDouble
.9b1a	c9 3e		cmp #$3e			cmp 	#'>'
.9b1c	f0 25		beq $9b43			beq 	_TKCheckDouble
.9b1e					_TKStandardPunctuation:
.9b1e	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9b21	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9b23	90 0e		bcc $9b33			bcc 	_TKNoShift
.9b25	48		pha				pha 								; save
.9b26	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9b28	85 36		sta $36				sta 	zTemp0
.9b2a	68		pla				pla
.9b2b	29 20		and #$20			and 	#32 						; bit 5
.9b2d	4a		lsr a				lsr 	a 							; shift into bit 3
.9b2e	4a		lsr a				lsr 	a
.9b2f	05 36		ora $36				ora 	zTemp0
.9b31	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9b33					_TKNoShift:
.9b33	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte 			; write the punctuation character
.9b36	e8		inx				inx 								; consume the character
.9b37	80 be		bra $9af7			bra 	_TKTokeniseLoop 			; and loop round again.
.9b39					_TKString:
.9b39	20 e9 9b	jsr $9be9			jsr 	TokeniseString
.9b3c	80 b9		bra $9af7			bra 	_TKTokeniseLoop
.9b3e					_TKHexConstant:
.9b3e	20 24 9c	jsr $9c24			jsr 	TokeniseHexConstant
.9b41	80 b4		bra $9af7			bra 	_TKTokeniseLoop
.9b43					_TKCheckDouble:
.9b43	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9b46	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9b48	90 d4		bcc $9b1e			bcc 	_TKStandardPunctuation
.9b4a	c9 3f		cmp #$3f			cmp 	#'>'+1
.9b4c	b0 d0		bcs $9b1e			bcs 	_TKStandardPunctuation
.9b4e	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9b51	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9b53	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9b54	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9b57	38		sec				sec
.9b58	e9 3c		sbc #$3c			sbc 	#'<'
.9b5a	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9b5d	e8		inx				inx 								; consume both
.9b5e	e8		inx				inx
.9b5f	80 96		bra $9af7			bra 	_TKTokeniseLoop
.9b61	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9b63	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9b66	60		rts				rts
.9b67					_TKTokeniseIdentifier:
.9b67	8e 00 07	stx $0700			stx 	identStart 					; save start
.9b6a	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9b6d					_TKCheckLoop:
.9b6d	e8		inx				inx 								; look at next, we know first is identifier.
.9b6e	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9b71	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9b73	f0 f8		beq $9b6d			beq 	_TKCheckLoop
.9b75	c9 30		cmp #$30			cmp	 	#"0"
.9b77	90 0c		bcc $9b85			bcc 	_TKEndIdentifier
.9b79	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b7b	90 f0		bcc $9b6d			bcc 	_TKCheckLoop
.9b7d	c9 41		cmp #$41			cmp	 	#"A"
.9b7f	90 04		bcc $9b85			bcc 	_TKEndIdentifier
.9b81	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9b83	90 e8		bcc $9b6d			bcc 	_TKCheckLoop
.9b85					_TKEndIdentifier:
.9b85	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9b88	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9b8a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9b8c	f0 06		beq $9b94			beq 	_TKHasTypeCharacter
.9b8e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9b90	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9b92	d0 07		bne $9b9b			bne 	_TKNoTypeCharacter
.9b94					_TKHasTypeCharacter:
.9b94	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9b97	e8		inx				inx 								; read next
.9b98	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b9b					_TKNoTypeCharacter:
.9b9b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9b9d	d0 09		bne $9ba8			bne 	_TKNoArray
.9b9f	e8		inx				inx 								; skip the (
.9ba0	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9ba3	09 04		ora #$04			ora 	#$04
.9ba5	8d 04 07	sta $0704			sta 	identTypeByte
.9ba8					_TKNoArray:
.9ba8	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9bab	20 45 9c	jsr $9c45			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9bae	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9bb0	a9 25		lda #$25			lda 	#(KeywordSet0) & $FF
.9bb2	20 cc 97	jsr $97cc			jsr 	TokeniseSearchTable
.9bb5	a2 00		ldx #$00			ldx 	#0
.9bb7	b0 1f		bcs $9bd8			bcs 	_TKFoundToken
.9bb9	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9bbb	a9 47		lda #$47			lda 	#(KeywordSet1) & $FF
.9bbd	20 cc 97	jsr $97cc			jsr 	TokeniseSearchTable
.9bc0	a2 81		ldx #$81			ldx 	#$81
.9bc2	b0 14		bcs $9bd8			bcs 	_TKFoundToken
.9bc4	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9bc6	a9 8b		lda #$8b			lda 	#(KeywordSet2) & $FF
.9bc8	20 cc 97	jsr $97cc			jsr 	TokeniseSearchTable
.9bcb	a2 82		ldx #$82			ldx 	#$82
.9bcd	b0 09		bcs $9bd8			bcs 	_TKFoundToken
.9bcf	20 d5 9c	jsr $9cd5			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9bd2	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9bd5	4c f7 9a	jmp $9af7			jmp 	_TKTokeniseLoop 			; and go round again.
.9bd8					_TKFoundToken:
.9bd8	48		pha				pha 								; save token
.9bd9	8a		txa				txa 								; shift in X, is there one ?
.9bda	f0 03		beq $9bdf			beq 	_TKNoTShift
.9bdc	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte 			; if so, write it out
.9bdf					_TKNoTShift:
.9bdf	68		pla				pla 								; restore and write token
.9be0	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9be3	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9be6	4c f7 9a	jmp $9af7			jmp 	_TKTokeniseLoop 			; and go round again.
.9be9					TokeniseString:
.9be9	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9beb	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9bee	e8		inx				inx									; start of quoted string.
.9bef	da		phx				phx 								; push start of string on top
.9bf0	ca		dex				dex
.9bf1					_TSFindEnd:
.9bf1	e8		inx				inx
.9bf2	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9bf5	f0 04		beq $9bfb			beq 	_TSEndOfString
.9bf7	c9 22		cmp #$22			cmp 	#'"'
.9bf9	d0 f6		bne $9bf1			bne 	_TSFindEnd
.9bfb					_TSEndOfString:
.9bfb	7a		ply				ply  								; so now Y is first character, X is character after end.
.9bfc	48		pha				pha 								; save terminating character
.9bfd	20 05 9c	jsr $9c05			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9c00	68		pla				pla 								; terminating character
.9c01	f0 01		beq $9c04			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9c03	e8		inx				inx
.9c04					_TSNotQuote:
.9c04	60		rts				rts
.9c05					TOWriteBlockXY:
.9c05	86 36		stx $36				stx 	zTemp0 						; write end character
.9c07	98		tya				tya
.9c08	49 ff		eor #$ff			eor 	#$FF
.9c0a	38		sec				sec
.9c0b	65 36		adc $36				adc 	zTemp0
.9c0d	1a		inc a				inc 	a 							; one extra for NULL
.9c0e	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9c11					_TOBlockLoop:
.9c11	c4 36		cpy $36				cpy 	zTemp0
.9c13	f0 09		beq $9c1e			beq 	_TOBlockExit
.9c15	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9c18	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9c1b	c8		iny				iny
.9c1c	80 f3		bra $9c11			bra 	_TOBlockLoop
.9c1e					_TOBlockExit:
.9c1e	a9 00		lda #$00			lda 	#0
.9c20	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9c23	60		rts				rts
.9c24					TokeniseHexConstant:
.9c24	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9c26	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9c29	e8		inx				inx									; start of quoted string.
.9c2a	da		phx				phx 								; push start of constant on top
.9c2b	ca		dex				dex
.9c2c					_THFindLoop:
.9c2c	e8		inx				inx
.9c2d	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9c30	c9 30		cmp #$30			cmp 	#"0"
.9c32	90 0c		bcc $9c40			bcc 	_THFoundEnd
.9c34	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c36	90 f4		bcc $9c2c			bcc 	_THFindLoop
.9c38	c9 41		cmp #$41			cmp 	#"A"
.9c3a	90 04		bcc $9c40			bcc 	_THFoundEnd
.9c3c	c9 47		cmp #$47			cmp 	#"F"+1
.9c3e	90 ec		bcc $9c2c			bcc 	_THFindLoop
.9c40					_THFoundEnd:
.9c40	7a		ply				ply 								; restore start
.9c41	20 05 9c	jsr $9c05			jsr 	TOWriteBlockXY 				; output the block
.9c44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9c45					TokeniseCalculateHash:
.9c45	da		phx				phx
.9c46	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9c49	a9 00		lda #$00			lda 	#0
.9c4b					_TCHLoop:
.9c4b	18		clc				clc
.9c4c	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9c4f	e8		inx				inx
.9c50	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9c53	d0 f6		bne $9c4b			bne 	_TCHLoop
.9c55	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9c58	fa		plx				plx
.9c59	60		rts				rts
.9c5a					FixLineBufferCase:
.9c5a	a2 00		ldx #$00			ldx 	#0
.9c5c					_FLBCLoop:
.9c5c	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9c5f	f0 22		beq $9c83			beq 	_FLBCExit 					; end of string.
.9c61	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9c63	f0 11		beq $9c76			beq 	_FLBCInQuotes
.9c65	e8		inx				inx
.9c66	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9c68	90 f2		bcc $9c5c			bcc 	_FLBCLoop
.9c6a	c9 7b		cmp #$7b			cmp 	#'z'+1
.9c6c	b0 ee		bcs $9c5c			bcs 	_FLBCLoop
.9c6e	38		sec				sec 								; make U/C
.9c6f	e9 20		sbc #$20			sbc 	#32
.9c71	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9c74	80 e6		bra $9c5c			bra 	_FLBCLoop
.9c76					_FLBCInQuotes:
.9c76	e8		inx				inx 								; advance
.9c77	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9c7a	f0 07		beq $9c83			beq 	_FLBCExit 					; exit on EOS
.9c7c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9c7e	d0 f6		bne $9c76			bne 	_FLBCInQuotes
.9c80	e8		inx				inx 								; skip over it
.9c81	80 d9		bra $9c5c			bra 	_FLBCLoop
.9c83					_FLBCExit:
.9c83	60		rts				rts
.9c84					TokeniseExtractLineNumber:
.9c84	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9c87	48		pha				pha
.9c88	ad 25 07	lda $0725			lda 	tokenLineNumber
.9c8b	48		pha				pha
.9c8c	20 c2 9c	jsr $9cc2			jsr 	_TELNTimes2 				; line # x 4
.9c8f	20 c2 9c	jsr $9cc2			jsr 	_TELNTimes2 				; line # x 2
.9c92	18		clc				clc 								; add stacked value
.9c93	68		pla				pla
.9c94	6d 25 07	adc $0725			adc 	tokenLineNumber
.9c97	8d 25 07	sta $0725			sta 	tokenLineNumber
.9c9a	68		pla				pla
.9c9b	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9c9e	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9ca1	20 c2 9c	jsr $9cc2			jsr 	_TELNTimes2 				; line # x 10
.9ca4	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9ca7	e8		inx				inx
.9ca8	29 0f		and #$0f			and 	#15 						; add to line #
.9caa	18		clc				clc
.9cab	6d 25 07	adc $0725			adc 	tokenLineNumber
.9cae	8d 25 07	sta $0725			sta 	tokenLineNumber
.9cb1	90 03		bcc $9cb6			bcc 	_TLENNoCarry
.9cb3	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9cb6					_TLENNoCarry:
.9cb6	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9cb9	c9 30		cmp #$30			cmp 	#'0'
.9cbb	90 04		bcc $9cc1			bcc 	_TLENExit
.9cbd	c9 3a		cmp #$3a			cmp 	#'9'+1
.9cbf	90 c3		bcc $9c84			bcc 	TokeniseExtractLineNumber
.9cc1					_TLENExit:
.9cc1	60		rts				rts
.9cc2					_TELNTimes2:
.9cc2	0e 25 07	asl $0725			asl 	tokenLineNumber
.9cc5	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9cc8	60		rts				rts
.9cc9					TokeniseWriteByte:
.9cc9	da		phx				phx
.9cca	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9ccd	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9cd0	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9cd3	fa		plx				plx
.9cd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9cd5					CheckCreateVariableRecord:
.9cd5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9cd7	85 36		sta $36				sta 	0+zTemp0
.9cd9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9cdb	85 37		sta $37				sta 	1+zTemp0
.9cdd					_CCVSearch:
.9cdd	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9cdf	f0 2c		beq $9d0d			beq 	_CCVFail
.9ce1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9ce3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9ce5	cd 03 07	cmp $0703			cmp 	identHash
.9ce8	d0 16		bne $9d00			bne 	_CCVNext
.9cea	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9cec	ae 00 07	ldx $0700			ldx 	identStart
.9cef					_CCVCompare:
.9cef	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9cf2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9cf4	e8		inx				inx 								; advance pointers
.9cf5	c8		iny				iny
.9cf6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9cf7	d0 07		bne $9d00			bne 	_CCVNext  					; didn't match go to next.
.9cf9	90 f4		bcc $9cef			bcc 	_CCVCompare 				; not finished yet.
.9cfb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9cfe	f0 41		beq $9d41			beq 	_CCVFound 					; yes, we were successful
.9d00					_CCVNext:
.9d00	18		clc				clc
.9d01	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9d03	65 36		adc $36				adc 	zTemp0
.9d05	85 36		sta $36				sta 	zTemp0
.9d07	90 d4		bcc $9cdd			bcc 	_CCVSearch
.9d09	e6 37		inc $37				inc 	zTemp0+1
.9d0b	80 d0		bra $9cdd			bra 	_CCVSearch
.9d0d					_CCVFail:
.9d0d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9d0f	ad 03 07	lda $0703			lda 	identHash
.9d12	91 36		sta ($36),y			sta 	(zTemp0),y
.9d14	c8		iny				iny 								; offset 2 is the type byte
.9d15	ad 04 07	lda $0704			lda 	identTypeByte
.9d18	91 36		sta ($36),y			sta 	(zTemp0),y
.9d1a	c8		iny				iny
.9d1b					_CCVData:
.9d1b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9d1d	91 36		sta ($36),y			sta 	(zTemp0),y
.9d1f	c8		iny				iny
.9d20	c0 08		cpy #$08			cpy 	#8
.9d22	90 f7		bcc $9d1b			bcc 	_CCVData
.9d24	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9d27					_CCVCopyName:
.9d27	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9d2a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d2c	e8		inx				inx
.9d2d	c8		iny				iny
.9d2e	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9d31	d0 f4		bne $9d27			bne 	_CCVCopyName
.9d33	98		tya				tya 								; patch offset
.9d34	92 36		sta ($36)			sta 	(zTemp0)
.9d36	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9d38	91 36		sta ($36),y			sta 	(zTemp0),y
.9d3a	88		dey				dey
.9d3b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9d3d	09 80		ora #$80			ora 	#$80
.9d3f	91 36		sta ($36),y			sta 	(zTemp0),y
.9d41					_CCVFound:
.9d41	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9d43	38		sec				sec
.9d44	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9d46	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9d48	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9d4b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9d4d	20 c9 9c	jsr $9cc9			jsr 	TokeniseWriteByte
.9d50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a63c					MemoryPeek:
.a63c	b2 36		lda ($36)			lda 	(zTemp0)
.a63e	60		rts				rts
.a63f					MemoryPoke:
.a63f	92 36		sta ($36)			sta 	(zTemp0)
.a641	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a642					EXTPrintCharacter:
.a642	48		pha				pha
.a643	da		phx				phx
.a644	5a		phy				phy
.a645	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a648	7a		ply				ply
.a649	fa		plx				plx
.a64a	68		pla				pla
.a64b	60		rts				rts
.a64c					EXTInputSingleCharacter:
.a64c	da		phx				phx
.a64d	5a		phy				phy
.a64e					_EISCWait:
.a64e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a651	c9 00		cmp #$00			cmp 	#0
.a653	f0 f9		beq $a64e			beq 	_EISCWait
.a655	7a		ply				ply
.a656	fa		plx				plx
.a657	60		rts				rts
.a658					EXTInputLine:
.a658	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a65a					_ILLoop:
.a65a	da		phx				phx 								; read character in
.a65b	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a65e	fa		plx				plx
.a65f	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a661	f0 12		beq $a675			beq 	_ILBackspace
.a663	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a665	f0 15		beq $a67c			beq 	_ILExit
.a667	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a669	90 ef		bcc $a65a			bcc 	_ILLoop
.a66b	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a66d	f0 eb		beq $a65a			beq 	_ILLoop
.a66f	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a672	e8		inx				inx
.a673	80 e5		bra $a65a			bra 	_ILLoop
.a675					_ILBackspace:
.a675	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a677	f0 e1		beq $a65a			beq 	_ILLoop
.a679	ca		dex				dex 								; back one.
.a67a	80 de		bra $a65a			bra 	_ILLoop
.a67c					_ILExit:
.a67c	20 42 a6	jsr $a642			jsr 	EXTPrintCharacter
.a67f	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a682	60		rts				rts
.a683					EXTBreakCheck:
.a683	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a686					MemoryDeleteLine:
.a686	20 ad a6	jsr $a6ad			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a689	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a68b	85 30		sta $30				sta 	codePtr
.a68d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a68f	85 31		sta $31				sta 	codePtr+1
.a691	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a693	a8		tay				tay
.a694					_MDDLLoop:
.a694	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a696	92 30		sta ($30)			sta 	(codePtr)
.a698	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a69a	c5 3a		cmp $3a				cmp 	zTemp2
.a69c	d0 07		bne $a6a5			bne 	_MDLDLNext
.a69e	a5 31		lda $31				lda 	codePtr+1
.a6a0	c5 3b		cmp $3b				cmp 	zTemp2+1
.a6a2	d0 01		bne $a6a5			bne 	_MDLDLNext
.a6a4					_MDDLExit:
.a6a4	60		rts				rts
.a6a5					_MDLDLNext:
.a6a5	e6 30		inc $30				inc 	codePtr						; next byte
.a6a7	d0 eb		bne $a694			bne 	_MDDLLoop
.a6a9	e6 31		inc $31				inc 	codePtr+1
.a6ab	80 e7		bra $a694			bra 	_MDDLLoop
.a6ad					IMemoryFindEnd:
.a6ad	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6af	85 3a		sta $3a				sta 	0+zTemp2
.a6b1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6b3	85 3b		sta $3b				sta 	1+zTemp2
.a6b5					_MDLFELoop:
.a6b5	b2 3a		lda ($3a)			lda 	(zTemp2)
.a6b7	f0 0b		beq $a6c4			beq 	_MDLFEExit
.a6b9	18		clc				clc
.a6ba	65 3a		adc $3a				adc 	zTemp2
.a6bc	85 3a		sta $3a				sta 	zTemp2
.a6be	90 f5		bcc $a6b5			bcc 	_MDLFELoop
.a6c0	e6 3b		inc $3b				inc 	zTemp2+1
.a6c2	80 f1		bra $a6b5			bra 	_MDLFELoop
.a6c4					_MDLFEExit:
.a6c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9d51					MemoryNew:
.9d51	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d53	85 30		sta $30				sta 	codePtr
.9d55	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d57	85 31		sta $31				sta 	codePtr+1
.9d59	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9d5b	92 30		sta ($30)			sta 	(codePtr)
.9d5d	60		rts				rts
.9d5e					MemoryAppend:
.9d5e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d60	85 30		sta $30				sta 	codePtr
.9d62	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d64	85 31		sta $31				sta 	codePtr+1
.9d66					_MAFindEnd:
.9d66	b2 30		lda ($30)			lda 	(codePtr)
.9d68	f0 0d		beq $9d77			beq 	_MAFoundEnd
.9d6a	18		clc				clc
.9d6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9d6d	65 30		adc $30				adc 	codePtr
.9d6f	85 30		sta $30				sta 	codePtr
.9d71	90 02		bcc $9d75			bcc 	_CREExit
.9d73	e6 31		inc $31				inc 	codePtr+1
.9d75					_CREExit:
.9d75	80 ef		bra $9d66			bra 	_MAFindEnd
.9d77					_MAFoundEnd:
.9d77	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9d7a	c0 04		cpy #$04			cpy 	#4 							; blank line
.9d7c	f0 0e		beq $9d8c			beq 	_MANoLine
.9d7e	a9 00		lda #$00			lda 	#0 							; end of program
.9d80	91 30		sta ($30),y			sta 	(codePtr),y
.9d82					_MACopy:
.9d82	88		dey				dey
.9d83	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9d86	91 30		sta ($30),y			sta 	(codePtr),y
.9d88	c0 00		cpy #$00			cpy 	#0
.9d8a	d0 f6		bne $9d82			bne 	_MACopy
.9d8c					_MANoLine:
.9d8c	60		rts				rts
.9d8d					MemoryInline:
.9d8d	98		tya				tya 								; put address into stack,x
.9d8e	18		clc				clc
.9d8f	65 30		adc $30				adc 	codePtr
.9d91	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9d94	a5 31		lda $31				lda 	codePtr+1
.9d96	69 00		adc #$00			adc 	#0
.9d98	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d9b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9d9e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9da1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9da2					MemorySearch:
.9da2	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9da4	86 37		stx $37				stx 	zTemp0+1
.9da6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9da8	85 30		sta $30				sta 	codePtr
.9daa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9dac	85 31		sta $31				sta 	codePtr+1
.9dae					_MTAXLoop:
.9dae	b2 30		lda ($30)			lda 	(codePtr)
.9db0	18		clc				clc
.9db1	f0 21		beq $9dd4			beq 	_MTAXExit 					; reached end, exit with CC.
.9db3	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9db5	b1 30		lda ($30),y			lda 	(codePtr),y
.9db7	38		sec				sec
.9db8	e5 36		sbc $36				sbc 	zTemp0
.9dba	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9dbc	c8		iny				iny 								; do the MSB
.9dbd	b1 30		lda ($30),y			lda 	(codePtr),y
.9dbf	e5 37		sbc $37				sbc 	zTemp0+1
.9dc1	05 38		ora $38				ora 	zTemp1
.9dc3	f0 0f		beq $9dd4			beq 	_MTAXExit	 				; found
.9dc5	b0 0d		bcs $9dd4			bcs 	_MTAXExit 					; current < required exit
.9dc7	18		clc				clc
.9dc8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9dca	65 30		adc $30				adc 	codePtr
.9dcc	85 30		sta $30				sta 	codePtr
.9dce	90 02		bcc $9dd2			bcc 	_CREExit
.9dd0	e6 31		inc $31				inc 	codePtr+1
.9dd2					_CREExit:
.9dd2	80 da		bra $9dae			bra 	_MTAXLoop
.9dd4					_MTAXExit:
.9dd4	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
