
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Nov 11 11:47:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 d5 b6	jsr $b6d5			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.8014	20 fb 93	jsr $93fb			jsr 	NewCommand 					; erase current program
.8017	20 26 a8	jsr $a826			jsr 	BackloadProgram
.801a	4c ba 95	jmp $95ba			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>8065	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=32					GCMD_Move = 16*2
=34					GCMD_Line = 17*2
=36					GCMD_FrameRect = 18*2
=38					GCMD_FillRect = 19*2
=40					GCMD_FrameCircle = 20*2
=42					GCMD_FillCircle = 21*2
=48					GCMD_Plot = 24*2
=50					GCMD_SpriteMove = 25*2
=26					GRFirstFreeCode = 26
.8085					GRVectorTable:
>8085	b4 82					.word	GXInitialise             ; $00 Initialise
>8087	ce 82					.word	GXControlBitmap          ; $01 BitmapCtl
>8089	16 83					.word	GXControlSprite          ; $02 SpriteCtl
>808b	66 82					.word	GXClearBitmap            ; $03 Clear
>808d	a5 84					.word	GXSetColourMode          ; $04 Colour
>808f	6d 86					.word	GXFontHandler            ; $05 DrawFont
>8091	b5 86					.word	GXSpriteHandler          ; $06 DrawSprite
>8093	21 87					.word	GXSelect                 ; $07 SpriteUse
>8095	4a 87					.word	GXSelectImage            ; $08 SpriteImage
>8097	d1 88					.word	GXCollide                ; $09 SpriteCollide
>8099	18 81					.word	GRUndefined              ; $0a
>809b	18 81					.word	GRUndefined              ; $0b
>809d	18 81					.word	GRUndefined              ; $0c
>809f	18 81					.word	GRUndefined              ; $0d
>80a1	18 81					.word	GRUndefined              ; $0e
>80a3	18 81					.word	GRUndefined              ; $0f
>80a5	16 81					.word	GXMove                   ; $10 Move
>80a7	73 83					.word	GXLine                   ; $11 Line
>80a9	ee 84					.word	GXFrameRectangle         ; $12 FrameRect
>80ab	eb 84					.word	GXFillRectangle          ; $13 FillRect
>80ad	1d 81					.word	GXFrameCircle            ; $14 FrameCircle
>80af	19 81					.word	GXFillCircle             ; $15 FillCircle
>80b1	18 81					.word	GRUndefined              ; $16
>80b3	18 81					.word	GRUndefined              ; $17
>80b5	d3 84					.word	GXPlotPoint              ; $18 Plot
>80b7	e0 87					.word	GXMoveSprite             ; $19 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSpriteID:
>0645							.fill 	1
.0646					GSCurrentSpriteAddr:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2
.064a					GXSpriteLow:
>064a							.fill 	64
.068a					GXSpriteHigh:
>068a							.fill 	64
.80b9					GXGraphicDraw:
.80b9	c9 20		cmp #$20			cmp 	#GCMD_Move					; low instructions don't use coordinates
.80bb	b0 06		bcs $80c3			bcs 	_GDCoordinate
.80bd	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.80bf	84 37		sty $37				sty 	gxzTemp0+1
.80c1	80 4b		bra $810e			bra 	_GDExecuteA 				; and execute
.80c3					_GDCoordinate:
.80c3	48		pha				pha 								; save AXY
.80c4	da		phx				phx
.80c5	5a		phy				phy
.80c6	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.80c8					_GDCopy1:
.80c8	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80cb	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.80ce	ca		dex				dex
.80cf	10 f7		bpl $80c8			bpl 	_GDCopy1
.80d1	68		pla				pla 								; update Y
.80d2	8d 2c 06	sta $062c			sta 	gxCurrentY
.80d5	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80d8	68		pla				pla
.80d9	8d 2a 06	sta $062a			sta 	gxCurrentX
.80dc	68		pla				pla 								; get A (command+X.1) back
.80dd	48		pha				pha
.80de	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80e0	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80e3	68		pla				pla 								; get command back
.80e4	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80e6	48		pha				pha 								; push back.
.80e7	c9 32		cmp #$32			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.80e9	f0 17		beq $8102			beq 	_GDCopyToWorkArea
.80eb	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80ee	f0 07		beq $80f7			beq 	_GDCheckY
.80f0	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80f3	c9 40		cmp #$40			cmp 	#64
.80f5	b0 08		bcs $80ff			bcs 	_GDError1
.80f7					_GDCheckY:
.80f7	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80fa	cd 3e 06	cmp $063e			cmp 	gxHeight
.80fd	90 03		bcc $8102			bcc 	_GDCopyToWorkArea
.80ff					_GDError1:
.80ff	68		pla				pla
.8100					_GDError2:
.8100	38		sec				sec
.8101	60		rts				rts
.8102					_GDCopyToWorkArea:
.8102	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.8104					_GDCopy2:
.8104	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8107	9d 32 06	sta $0632,x			sta 	gxX0,x
.810a	ca		dex				dex
.810b	10 f7		bpl $8104			bpl 	_GDCopy2
.810d	68		pla				pla 								; get command
.810e					_GDExecuteA:
.810e	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.8110	b0 ee		bcs $8100			bcs 	_GDError2
.8112	aa		tax				tax
.8113	7c 85 80	jmp ($8085,x)			jmp 	(GRVectorTable,x)
.8116					GXMove:
.8116	18		clc				clc
.8117	60		rts				rts
.8118					GRUndefined:
>8118	db						.byte 	$DB 						; causes a break in the emulator
.8119					GXFillCircle:
.8119	a9 ff		lda #$ff			lda 	#255
.811b	80 02		bra $811f			bra 	GXCircle
.811d					GXFrameCircle:
.811d	a9 00		lda #$00			lda 	#0
.811f					GXCircle:
.811f	8d cd 06	sta $06cd			sta 	gxIsFillMode					; save Fill flag
.8122	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8125	f0 26		beq $814d			beq 	_GXCFail
.8127	20 78 89	jsr $8978			jsr 	GXSortXY 					; topleft/bottomright
.812a	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.812d	20 1f 82	jsr $821f			jsr 	GXCircleSetup 				; set up for drawing
.8130	9c ce 06	stz $06ce			stz 	gxYChanged
.8133					_GXCircleDraw:
.8133	ad cb 06	lda $06cb			lda 	gXCentre					; while x <= y
.8136	cd cc 06	cmp $06cc			cmp 	gYCentre
.8139	90 0a		bcc $8145			bcc 	_GXCircleContinue
.813b	d0 03		bne $8140			bne 	_GXNoLast
.813d	20 52 81	jsr $8152			jsr 	GXPlot1
.8140					_GXNoLast:
.8140	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; close the bitmap
.8143	18		clc				clc
.8144	60		rts				rts
.8145					_GXCircleContinue:
.8145	20 4f 81	jsr $814f			jsr 	GXPlot2 					; draw it
.8148	20 cc 81	jsr $81cc			jsr 	GXCircleMove 				; adjust the coordinates
.814b	80 e6		bra $8133			bra 	_GXCircleDraw
.814d					_GXCFail:
.814d	38		sec				sec
.814e	60		rts				rts
.814f					GXPlot2:
.814f	20 52 81	jsr $8152			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8152					GXPlot1:
.8152	ad cc 06	lda $06cc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8155	f0 03		beq $815a			beq 	_GXPlot1Only
.8157	20 76 81	jsr $8176			jsr 	GXPlot0 						; plot and negate
.815a					_GXPlot1Only:
.815a	20 76 81	jsr $8176			jsr 	GXPlot0 						; twice, undoing negation
.815d	ad cb 06	lda $06cb			lda 	gXCentre 						; swap X and Y
.8160	ae cc 06	ldx $06cc			ldx	 	gYCentre
.8163	8d cc 06	sta $06cc			sta 	gYCentre
.8166	8e cb 06	stx $06cb			stx 	gXCentre
.8169	ad ce 06	lda $06ce			lda 	gxYChanged 						; toggle Y Changed flag
.816c	a9 ff		lda #$ff			lda 	#$FF
.816e	8d ce 06	sta $06ce			sta 	gxYChanged
.8171	60		rts				rts
.8172	20 76 81	jsr $8176			jsr 	GXPlot0 						; do once
.8175	60		rts				rts
.8176	ad cd 06	lda $06cd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8179	f0 05		beq $8180			beq 	_GXPlot0Always
.817b	ad ce 06	lda $06ce			lda 	gxYChanged						; fill mode, only draw if changed.
.817e	f0 2d		beq $81ad			beq 	GXPlot0Exit
.8180					_GXPlot0Always:
.8180	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8182	ad cc 06	lda $06cc			lda 	gYCentre
.8185	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8188	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818a	ad cb 06	lda $06cb			lda 	gXCentre
.818d	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8190	48		pha				pha 									; save last offset X
.8191	20 60 88	jsr $8860			jsr 	GXPositionCalc 					; calculate position/offset.
.8194	68		pla				pla
.8195	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	26 37		rol $37				rol 	gxzTemp0+1
.819c	ad cd 06	lda $06cd			lda 	gxIsFillMode
.819f	69 80		adc #$80			adc 	#128
.81a1	20 3e 85	jsr $853e			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a4	38		sec				sec 									; GY = -GY
.81a5	a9 00		lda #$00			lda 	#0
.81a7	ed cc 06	sbc $06cc			sbc 	gYCentre
.81aa	8d cc 06	sta $06cc			sta 	gYCentre
.81ad					GXPlot0Exit:
.81ad	60		rts				rts
.81ae					GXSubCopy:
.81ae	85 36		sta $36				sta 	gxzTemp0
.81b0	64 37		stz $37				stz 	gxzTemp0+1
.81b2	29 80		and #$80			and 	#$80
.81b4	f0 02		beq $81b8			beq 	_GXNoSx
.81b6	c6 37		dec $37				dec 	gxzTemp0+1
.81b8					_GXNoSx:
.81b8	38		sec				sec
.81b9	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bc	e5 36		sbc $36				sbc 	gxzTemp0
.81be	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c1	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c6	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81c9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cb	60		rts				rts
.81cc					GXCircleMove:
.81cc	9c ce 06	stz $06ce			stz 	gxYChanged 					; clear Y changed flag
.81cf	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d1	10 0d		bpl $81e0			bpl 	_GXEMPositive
.81d3	ee cb 06	inc $06cb			inc 	gXCentre 					; X++
.81d6	ad cb 06	lda $06cb			lda 	gXCentre
.81d9	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 06		lda #$06			lda 	#6  						; and add 6
.81de	80 15		bra $81f5			bra 	_GXEMAddD
.81e0					_GXEMPositive:
.81e0	ee cb 06	inc $06cb			inc 	gXCentre					; X++
.81e3	ce cc 06	dec $06cc			dec 	gyCentre 					; Y--
.81e6	38		sec				sec 								; calculate X-Y
.81e7	ad cb 06	lda $06cb			lda 	gXCentre
.81ea	ed cc 06	sbc $06cc			sbc 	gYCentre
.81ed	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f0	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f2	ce ce 06	dec $06ce			dec 	gxYChanged
.81f5					_GXEMAddD:
.81f5	18		clc				clc
.81f6	65 38		adc $38				adc 	gxzTemp1
.81f8	85 38		sta $38				sta 	gxzTemp1
.81fa	90 02		bcc $81fe			bcc 	_GXEMNoCarry
.81fc	e6 39		inc $39				inc 	gxzTemp1+1
.81fe					_GXEMNoCarry:
.81fe	60		rts				rts
.81ff					_GXAdd4TimesToD:
.81ff	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8201	29 80		and #$80			and 	#$80
.8203	f0 02		beq $8207			beq 	_GXA4Unsigned
.8205	a9 ff		lda #$ff			lda 	#$FF
.8207					_GXA4Unsigned:
.8207	85 37		sta $37				sta 	gxzTemp0+1
.8209	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820b	26 37		rol $37				rol 	gxzTemp0+1
.820d	06 36		asl $36				asl 	gxzTemp0
.820f	26 37		rol $37				rol 	gxzTemp0+1
.8211	18		clc				clc 								; add
.8212	a5 36		lda $36				lda		gxzTemp0
.8214	65 38		adc $38				adc 	gxzTemp1
.8216	85 38		sta $38				sta 	gxzTemp1
.8218	a5 37		lda $37				lda		gxzTemp0+1
.821a	65 39		adc $39				adc 	gxzTemp1+1
.821c	85 39		sta $39				sta 	gxzTemp1+1
.821e	60		rts				rts
.821f					GXCircleSetup:
.821f	38		sec				sec
.8220	ad 38 06	lda $0638			lda 	gxY1
.8223	ed 34 06	sbc $0634			sbc 	gxY0
.8226	4a		lsr a				lsr 	a
.8227	8d ca 06	sta $06ca			sta 	gxRadius
.822a	a2 00		ldx #$00			ldx 	#0
.822c	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.822f	a2 02		ldx #$02			ldx 	#2
.8231	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.8234	9c cb 06	stz $06cb			stz 	gXCentre
.8237	ad ca 06	lda $06ca			lda 	gxRadius
.823a	8d cc 06	sta $06cc			sta 	gYCentre
.823d	0a		asl a				asl 	a 							; R x 2
.823e	85 36		sta $36				sta 	gxzTemp0
.8240	38		sec				sec
.8241	a9 03		lda #$03			lda 	#3
.8243	e5 36		sbc $36				sbc 	gxzTemp0
.8245	85 38		sta $38				sta 	gxzTemp1
.8247	a9 00		lda #$00			lda 	#0
.8249	e9 00		sbc #$00			sbc 	#0
.824b	85 39		sta $39				sta 	gxzTemp1+1
.824d	60		rts				rts
.824e					_GXCalculateCentre:
.824e	38		sec				sec
.824f	bd 36 06	lda $0636,x			lda 	gxX1,x
.8252	7d 32 06	adc $0632,x			adc 	gXX0,x
.8255	9d 36 06	sta $0636,x			sta 	gXX1,x
.8258	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825b	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825e	4a		lsr a				lsr 	a
.825f	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8262	7e 36 06	ror $0636,x			ror 	gXX1,x
.8265	60		rts				rts
.06ca					gxRadius:
>06ca							.fill 	1
.06cb					gXCentre:
>06cb							.fill 	1
.06cc					gYCentre:
>06cc							.fill 	1
.06cd					gxIsFillMode:
>06cd							.fill 	1
.06ce					gxYChanged:
>06ce							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8266					GXClearBitmap:
.8266	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.8269	f0 24		beq $828f			beq 	_GXCBFail
.826b	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start access
.826e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8270	ad 3e 06	lda $063e			lda 	gxHeight
.8273	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8275	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8277					_GXCalcLastPage:
.8277	98		tya				tya 								; add to base page
.8278	18		clc				clc
.8279	6d 3c 06	adc $063c			adc 	gxBasePage
.827c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827e					_GXClearAll:
.827e	20 91 82	jsr $8291			jsr 	_GXClearBlock 				; clear 8k block
.8281	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8283	a5 0b		lda $0b				lda 	GXEditSlot
.8285	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8288	b0 f4		bcs $827e			bcs 	_GXClearAll
.828a	20 58 88	jsr $8858			jsr 	GXCloseBitmap	 			; stop access
.828d	18		clc				clc
.828e	60		rts				rts
.828f					_GXCBFail:
.828f	38		sec				sec
.8290	60		rts				rts
.8291					_GXClearBlock:
.8291	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8293	85 38		sta $38				sta 	0+gxzTemp1
.8295	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8297	85 39		sta $39				sta 	1+gxzTemp1
.8299					_GXCB0:
.8299	a5 36		lda $36				lda 	gxzTemp0
.829b	a0 00		ldy #$00			ldy 	#0
.829d					_GXCB1:
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	d0 f2		bne $829d			bne 	_GXCB1
.82ab	e6 39		inc $39				inc 	gxzTemp1+1
.82ad	a5 39		lda $39				lda 	gxzTemp1+1
.82af	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b1	d0 e6		bne $8299			bne 	_GXCB0
.82b3	60		rts				rts
.82b4					GXInitialise:
.82b4	64 01		stz $01				stz 	1
.82b6	a9 01		lda #$01			lda 	#1
.82b8	8d 00 d0	sta $d000			sta 	$D000
.82bb	18		clc				clc
.82bc	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82bf	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c2	a2 0f		ldx #$0f			ldx 	#15
.82c4					_GXIClear:
.82c4	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c7	ca		dex				dex
.82c8	10 fa		bpl $82c4			bpl 	_GXIClear
.82ca	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.82cd	60		rts				rts
.82ce					GXControlBitmap:
.82ce	64 01		stz $01				stz 	1
.82d0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d2	29 01		and #$01			and 	#1 							; set bitmap flag
.82d4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82db	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82df	90 02		bcc $82e3			bcc 	_CBNotOn
.82e1	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e3					_CBNotOn:
.82e3	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e6	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e8	29 07		and #$07			and 	#7
.82ea	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ed	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ef	d0 02		bne $82f3			bne 	_CBNotDefault
.82f1	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f3					_CBNotDefault:
.82f3	8d 3c 06	sta $063c			sta 	gxBasePage
.82f6	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f9	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fb	8d 03 d1	sta $d103			sta 	$D103
.82fe	a5 36		lda $36				lda 	gxzTemp0
.8300	8d 02 d1	sta $d102			sta 	$D102
.8303	9c 01 d1	stz $d101			stz 	$D101
.8306	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8308	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830b	29 01		and #$01			and 	#1
.830d	f0 02		beq $8311			beq 	_CBHaveHeight
.830f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8311					_CBHaveHeight
.8311	8e 3e 06	stx $063e			stx 	gxHeight
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXControlSprite:
.8316	64 01		stz $01				stz 	1
.8318	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831a	29 01		and #$01			and 	#1 							; set sprites flag
.831c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8320	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8323	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8325	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8327	90 02		bcc $832b			bcc 	_CSNotOn
.8329	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832b					_CSNotOn:
.832b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8330	d0 02		bne $8334			bne 	_CSNotDefault
.8332	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8334					_CSNotDefault:
.8334	8d 3d 06	sta $063d			sta 	gxSpritePage
.8337	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833a	a5 36		lda $36				lda 	zTemp0
.833c	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833f	a5 37		lda $37				lda 	zTemp0+1
.8341	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8344	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8346					_CSClear:
.8346	9e 00 d9	stz $d900,x			stz 	$D900,x
.8349	9e 00 da	stz $da00,x			stz 	$DA00,x
.834c	ca		dex				dex
.834d	d0 f7		bne $8346			bne 	_CSClear
.834f	9c 47 06	stz $0647			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8352	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.8355	18		clc				clc
.8356	60		rts				rts
.8357					GXCalculateBaseAddress:
.8357	85 36		sta $36				sta 	gxzTemp0
.8359	64 37		stz $37				stz 	gxzTemp0+1
.835b	a9 05		lda #$05			lda 	#5
.835d					_GXShift:
.835d	06 36		asl $36				asl 	gxzTemp0
.835f	26 37		rol $37				rol 	gxzTemp0+1
.8361	3a		dec a				dec		a
.8362	d0 f9		bne $835d			bne 	_GXShift
.8364	60		rts				rts
.8365					GXClearSpriteStore:
.8365	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8367					_GXCSSLoop:
.8367	9e 8a 06	stz $068a,x			stz 	GXSpriteHigh,x
.836a	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836c	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.836f	ca		dex				dex
.8370	10 f5		bpl $8367			bpl 	_GXCSSLoop
.8372	60		rts				rts
.8373					GXLine:
.8373	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8376	f0 28		beq $83a0			beq 	_GXLFail
.8378	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.837b	20 96 89	jsr $8996			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837e	20 46 84	jsr $8446			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8381	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; calculate position/offset.
.8384					_GXDrawLoop:
.8384	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.8387	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8389	2d 42 06	and $0642			and 	gxANDValue
.838c	4d 41 06	eor $0641			eor 	gxEORValue
.838f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8391	20 a2 83	jsr $83a2			jsr 	GXLineIsComplete 			; is the line complete ?
.8394	f0 05		beq $839b			beq 	_GXLExit
.8396	20 bd 83	jsr $83bd			jsr 	GXLineAdvance 				; code as per advance method
.8399	80 e9		bra $8384			bra 	_GXDrawLoop
.839b					_GXLExit:
.839b	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.839e	18		clc				clc
.839f	60		rts				rts
.83a0					_GXLFail:
.83a0	38		sec				sec
.83a1	60		rts				rts
.83a2					GXLineIsComplete:
.83a2	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger 			; is dy larger
.83a5	d0 0f		bne $83b6			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a7	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83aa	4d 36 06	eor $0636			eor 	GXX1
.83ad	d0 06		bne $83b5			bne 	_GXLICExit
.83af	ad 33 06	lda $0633			lda 	GXX0+1
.83b2	4d 37 06	eor $0637			eor 	GXX1+1
.83b5					_GXLICExit:
.83b5	60		rts				rts
.83b6					_GXLICCompareY:
.83b6	ad 38 06	lda $0638			lda 	GXY1
.83b9	4d 34 06	eor $0634			eor 	GXY0
.83bc	60		rts				rts
.83bd					GXLineAdvance:
.83bd	18		clc				clc 								; add adjust to position
.83be	ad d3 06	lda $06d3			lda 	GXPosition
.83c1	6d d4 06	adc $06d4			adc 	GXAdjust
.83c4	8d d3 06	sta $06d3			sta 	GXPosition
.83c7	9c d6 06	stz $06d6			stz 	GXAddSelect 				; clear add select flag
.83ca	b0 05		bcs $83d1			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cc	cd d5 06	cmp $06d5			cmp 	GXTotal 					; if exceeded total
.83cf	90 0a		bcc $83db			bcc 	_GXLANoExtra
.83d1					_GXLAOverflow:
.83d1	ce d6 06	dec $06d6			dec 	GXAddSelect 				; set addselect to $FF
.83d4	38		sec				sec 								; subtract total and write back
.83d5	ed d5 06	sbc $06d5			sbc 	GXTotal
.83d8	8d d3 06	sta $06d3			sta 	GXPosition
.83db					_GXLANoExtra:
.83db	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger
.83de	f0 0d		beq $83ed			beq 	_GXDXLarger
.83e0	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83e3	ad d6 06	lda $06d6			lda 	GXAddSelect
.83e6	f0 10		beq $83f8			beq 	_GXLAExit
.83e8	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83eb	80 0b		bra $83f8			bra 	_GXLAExit
.83ed					_GXDXLarger:
.83ed	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83f0	ad d6 06	lda $06d6			lda 	GXAddSelect
.83f3	f0 03		beq $83f8			beq 	_GXLAExit
.83f5	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83f8					_GXLAExit:
.83f8	60		rts				rts
.83f9					GXAdjustX:
.83f9	ad d2 06	lda $06d2			lda 	GXDXNegative
.83fc	10 25		bpl $8423			bpl 	_GXAXRight
.83fe	ad 32 06	lda $0632			lda 	GXX0
.8401	d0 03		bne $8406			bne 	_GXAXNoBorrow
.8403	ce 33 06	dec $0633			dec 	GXX0+1
.8406					_GXAXNoBorrow:
.8406	ce 32 06	dec $0632			dec 	GXX0
.8409	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.840c	ad 44 06	lda $0644			lda 	gsOffset
.840f	c9 ff		cmp #$ff			cmp 	#$FF
.8411	d0 0f		bne $8422			bne 	_GXAYExit 					; underflow
.8413	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8415	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8417	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8419	b0 07		bcs $8422			bcs 	_GXAYExit
.841b	18		clc				clc
.841c	69 20		adc #$20			adc 	#$20 						; fix up
.841e	85 3d		sta $3d				sta 	gxzScreen+1
.8420	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8422					_GXAYExit:
.8422	60		rts				rts
.8423					_GXAXRight:
.8423	ee 32 06	inc $0632			inc 	GXX0
.8426	d0 03		bne $842b			bne 	_GXAXNoCarry
.8428	ee 33 06	inc $0633			inc 	GXX0+1
.842b					_GXAXNoCarry:
.842b	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.842e	d0 0e		bne $843e			bne 	_GXAXExit 					; if not overflowed, exit.
.8430	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8432	a5 3d		lda $3d				lda 	gxzScreen+1
.8434	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8436	90 06		bcc $843e			bcc 	_GXAXExit
.8438	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843a	85 3d		sta $3d				sta 	gxzScreen+1
.843c	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843e					_GXAXExit:
.843e	60		rts				rts
.843f					GXIncrementY:
.843f	ee 34 06	inc $0634			inc 	GXY0
.8442	20 b6 88	jsr $88b6			jsr 	GXMovePositionDown
.8445	60		rts				rts
.8446					GXLineSetup:
.8446	ad 38 06	lda $0638			lda 	GXY1
.8449	38		sec				sec
.844a	ed 34 06	sbc $0634			sbc 	GXY0
.844d	4a		lsr a				lsr 	a
.844e	8d d0 06	sta $06d0			sta 	GXDiffY
.8451	9c d2 06	stz $06d2			stz 	GXDXNegative 				; clear -ve flag
.8454	38		sec				sec
.8455	ad 36 06	lda $0636			lda 	GXX1
.8458	ed 32 06	sbc $0632			sbc 	GXX0
.845b	8d cf 06	sta $06cf			sta 	GXDiffX
.845e	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8461	ed 33 06	sbc $0633			sbc 	GXX0+1
.8464	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8465	6e cf 06	ror $06cf			ror 	GXDiffX
.8468	0a		asl a				asl 	a
.8469	10 0c		bpl $8477			bpl 	_GDXNotNegative
.846b	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846d	38		sec				sec
.846e	ed cf 06	sbc $06cf			sbc 	GXDiffX
.8471	8d cf 06	sta $06cf			sta 	GXDiffX
.8474	ce d2 06	dec $06d2			dec 	GXDXNegative 				; -ve flag = $FF.
.8477					_GDXNotNegative:
.8477	9c d1 06	stz $06d1			stz 	GXIsDiffYLarger 			; clear larger flag
.847a	ad d0 06	lda $06d0			lda 	GXDiffY 					; set adjust and total.
.847d	8d d4 06	sta $06d4			sta 	GXAdjust
.8480	ad cf 06	lda $06cf			lda 	GXDiffX
.8483	8d d5 06	sta $06d5			sta 	GXTotal
.8486	ad d0 06	lda $06d0			lda 	GXDiffY 					; if dy > dx
.8489	cd cf 06	cmp $06cf			cmp 	GXDiffX
.848c	90 0f		bcc $849d			bcc 	_GDXNotLarger
.848e	ce d1 06	dec $06d1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8491	ad cf 06	lda $06cf			lda 	GXDiffX 					; set adjust and total other way round
.8494	8d d4 06	sta $06d4			sta 	GXAdjust
.8497	ad d0 06	lda $06d0			lda 	GXDiffY
.849a	8d d5 06	sta $06d5			sta 	GXTotal
.849d					_GDXNotLarger:
.849d	ad d5 06	lda $06d5			lda 	GXTotal
.84a0	4a		lsr a				lsr 	a
.84a1	8d d3 06	sta $06d3			sta 	GXPosition
.84a4	60		rts				rts
.06cf					GXDiffX:
>06cf							.fill 	1
.06d0					GXDiffY:
>06d0							.fill 	1
.06d1					GXIsDiffYLarger:
>06d1							.fill 	1
.06d2					GXDXNegative:
>06d2							.fill 	1
.06d3					GXPosition:
>06d3							.fill 	1
.06d4					GXAdjust:
>06d4							.fill 	1
.06d5					GXTotal:
>06d5							.fill 	1
.06d6					GXAddSelect:
>06d6							.fill 	1
.84a5					GXSetColourMode:
.84a5	a6 36		ldx $36				ldx 	gxzTemp0
.84a7	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84aa	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ac	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84af	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b1	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b4	ae 40 06	ldx $0640			ldx 	gxColour
.84b7	8e 41 06	stx $0641			stx 	gxEORValue
.84ba	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bc	90 03		bcc $84c1			bcc 	_GXSDCNotAndColour
.84be	8e 42 06	stx $0642			stx 	gxANDValue
.84c1					_GXSDCNotAndColour:
.84c1	d0 03		bne $84c6			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c3	9c 41 06	stz $0641			stz 	gxEORValue
.84c6					_GXSDCNotAnd:
.84c6	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c7	90 08		bcc $84d1			bcc 	_GXSDCNoFlip
.84c9	ad 42 06	lda $0642			lda	 	gxANDValue
.84cc	49 ff		eor #$ff			eor 	#$FF
.84ce	8d 42 06	sta $0642			sta 	gxANDValue
.84d1					_GXSDCNoFlip:
.84d1	18		clc				clc
.84d2	60		rts				rts
.84d3					GXPlotPoint:
.84d3	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84d6	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84d9	ac 44 06	ldy $0644			ldy 	gsOffset
.84dc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84de	2d 42 06	and $0642			and 	gxANDValue
.84e1	4d 41 06	eor $0641			eor 	gxEORValue
.84e4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e6	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; stop drawing and exit
.84e9	18		clc				clc
.84ea	60		rts				rts
.84eb					GXFillRectangle:
.84eb	38		sec				sec
.84ec	80 01		bra $84ef			bra 	GXRectangle
.84ee					GXFrameRectangle:
.84ee	18		clc				clc
.84ef					GXRectangle:
.84ef	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f2	f0 35		beq $8529			beq 	_GXRFail
.84f4	08		php				php 								; save Fill flag (CS)
.84f5	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84f8	20 78 89	jsr $8978			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fb	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84fe	38		sec				sec 								; sec = Draw line
.84ff	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8502	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8505	cd 38 06	cmp $0638			cmp 	gxY1
.8508	f0 19		beq $8523			beq 	_GXRectangleExit
.850a					_GXRectLoop:
.850a	20 b6 88	jsr $88b6			jsr 	GXMovePositionDown 			; down one.
.850d	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8510	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8513	cd 38 06	cmp $0638			cmp 	gXY1
.8516	f0 07		beq $851f			beq 	_GXLastLine
.8518	28		plp				plp 								; get flag back
.8519	08		php				php
.851a	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851d	80 eb		bra $850a			bra 	_GXRectLoop
.851f					_GXLastLine:
.851f	38		sec				sec
.8520	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0
.8523					_GXRectangleExit:
.8523	68		pla				pla 								; throw fill flag.
.8524	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; stop drawing and exit
.8527	18		clc				clc
.8528	60		rts				rts
.8529					_GXRFail:
.8529	38		sec				sec
.852a	60		rts				rts
.852b					GXDrawLineX1X0:
.852b	08		php				php 								; save solid/either-end
.852c	38		sec				sec
.852d	ad 36 06	lda $0636			lda		gXX1
.8530	ed 32 06	sbc $0632			sbc 	gXX0
.8533	85 36		sta $36				sta 	gxzTemp0
.8535	ad 37 06	lda $0637			lda 	gXX1+1
.8538	ed 33 06	sbc $0633			sbc 	gXX0+1
.853b	85 37		sta $37				sta 	gxzTemp0+1
.853d	28		plp				plp
.853e					GXDrawLineTemp0:
.853e	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8540	48		pha				pha
.8541	a5 3d		lda $3d				lda 	gxzScreen+1
.8543	48		pha				pha
.8544	ad 44 06	lda $0644			lda 	gsOffset
.8547	48		pha				pha
.8548	a5 0b		lda $0b				lda 	GXEditSlot
.854a	48		pha				pha
.854b	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.854e	90 1e		bcc $856e			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8550					_GXDLTLine:
.8550	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8552	2d 42 06	and $0642			and 	gxANDValue
.8555	4d 41 06	eor $0641			eor 	gxEORValue
.8558	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855a	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855c	d0 04		bne $8562			bne 	_GXDLTNoBorrow
.855e	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8560	30 2e		bmi $8590			bmi 	_GXDLTExit
.8562					_GXDLTNoBorrow:
.8562	c6 36		dec $36				dec 	gxzTemp0
.8564	c8		iny				iny 								; next slot.
.8565	d0 e9		bne $8550			bne 	_GXDLTLine
.8567	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8569	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.856c	80 e2		bra $8550			bra 	_GXDLTLine
.856e					_GXDLTEndPoints:
.856e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8570	2d 42 06	and $0642			and 	gxANDValue
.8573	4d 41 06	eor $0641			eor 	gxEORValue
.8576	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8578	98		tya				tya 								; advance to right side
.8579	18		clc				clc
.857a	65 36		adc $36				adc 	gxzTemp0
.857c	a8		tay				tay
.857d	a5 3d		lda $3d				lda 	gxzScreen+1
.857f	65 37		adc $37				adc 	gxzTemp0+1
.8581	85 3d		sta $3d				sta 	gxzScreen+1
.8583	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap 			; fix up.
.8586	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8588	2d 42 06	and $0642			and 	gxANDValue
.858b	4d 41 06	eor $0641			eor 	gxEORValue
.858e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8590					_GXDLTExit:
.8590	68		pla				pla
.8591	85 0b		sta $0b				sta 	GXEditSlot
.8593	68		pla				pla
.8594	8d 44 06	sta $0644			sta 	gsOffset
.8597	68		pla				pla
.8598	85 3d		sta $3d				sta 	gxzScreen+1
.859a	68		pla				pla
.859b	85 3c		sta $3c				sta 	gxzScreen
.859d	60		rts				rts
.859e					GXDLTCheckWrap:
.859e	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a2	90 06		bcc $85aa			bcc 	_GXDLTCWExit
.85a4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a6	85 3d		sta $3d				sta 	gxzScreen+1
.85a8	e6 0b		inc $0b				inc 	GXEditSlot
.85aa					_GXDLTCWExit:
.85aa	60		rts				rts
.85ab					GXDrawGraphicElement:
.85ab	8d d7 06	sta $06d7			sta 	gxSize 						; save size
.85ae	3a		dec a				dec 	a
.85af	8d d8 06	sta $06d8			sta 	gxMask 						; and mask
.85b2	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b5	f0 67		beq $861e			beq 	_GXSLFail
.85b7	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85ba	48		pha				pha
.85bb	8c da 06	sty $06da			sty 	gxAcquireVector+1 			; and acquisition vector
.85be	8e d9 06	stx $06d9			stx 	gxAcquireVector
.85c1	20 50 88	jsr $8850			jsr 	gxOpenBitmap 				; open the bitmap.
.85c4	ad dc 06	lda $06dc			lda 	gxUseMode 					; scale bits
.85c7	4a		lsr a				lsr 	a
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	29 07		and #$07			and		#7
.85cc	1a		inc a				inc 	a
.85cd	8d db 06	sta $06db			sta 	gxScale
.85d0	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d2					_GXGELoop:
.85d2	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d4	2c dc 06	bit $06dc			bit 	gxUseMode 					; check for flip.
.85d7	10 06		bpl $85df			bpl		_GXNoVFlip
.85d9	ad d8 06	lda $06d8			lda 	gxMask
.85dc	38		sec				sec
.85dd	e5 38		sbc $38				sbc 	gxzTemp1
.85df					_GXNoVFlip:
.85df	aa		tax				tax 								; get the Xth line.
.85e0	20 20 86	jsr $8620			jsr 	_GXCallAcquire 				; get that data.
.85e3	ad db 06	lda $06db			lda 	gxScale 					; do scale identical copies of that line.
.85e6	85 39		sta $39				sta 	gxzTemp1+1
.85e8					_GXGELoop2:
.85e8	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85eb	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ee	b0 10		bcs $8600			bcs 	_GXDGEExit
.85f0	20 23 86	jsr $8623			jsr 	GXRenderOneLine 			; render line
.85f3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f5	d0 f1		bne $85e8			bne 	_GXGELoop2
.85f7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f9	a5 38		lda $38				lda 	gxzTemp1
.85fb	cd d7 06	cmp $06d7			cmp 	gxSize
.85fe	d0 d2		bne $85d2			bne 	_GXGELoop
.8600					_GXDGEExit:
.8600	68		pla				pla 								; restore Y for next time
.8601	8d 34 06	sta $0634			sta 	gxY0
.8604	ae db 06	ldx $06db			ldx 	gxScale 					; get scale (1-8)
.8607					_GXShiftLeft:
.8607	18		clc				clc
.8608	ad d7 06	lda $06d7			lda 	gxSize
.860b	6d 32 06	adc $0632			adc 	gxX0
.860e	8d 32 06	sta $0632			sta 	gxX0
.8611	90 03		bcc $8616			bcc 	_GXSLNoCarry
.8613	ee 33 06	inc $0633			inc 	gxX0+1
.8616					_GXSLNoCarry:
.8616	ca		dex				dex
.8617	d0 ee		bne $8607			bne 	_GXShiftLeft
.8619	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.861c	18		clc				clc
.861d	60		rts				rts
.861e					_GXSLFail:
.861e	38		sec				sec
.861f	60		rts				rts
.8620					_GXCallAcquire:
.8620	6c d9 06	jmp ($06d9)			jmp 	(gxAcquireVector)
.8623					GXRenderOneLine:
.8623	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; calculate position/offset.
.8626	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8629	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862b					_GXROLLoop1:
.862b	ad db 06	lda $06db			lda 	gxScale 					; set to do 'scale' times
.862e	85 3b		sta $3b				sta 	gxzTemp2+1
.8630					_GXROLLoop2:
.8630	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8632	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8635	50 06		bvc $863d			bvc 	_GXNoHFlip
.8637	ad d8 06	lda $06d8			lda 	gxMask
.863a	38		sec				sec
.863b	e5 3a		sbc $3a				sbc 	gxzTemp2
.863d					_GXNoHFlip:
.863d	aa		tax				tax 								; read from the pixel buffer
.863e	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8641	d0 07		bne $864a			bne 	_GXDraw 					; draw if non zero
.8643	ad dc 06	lda $06dc			lda 	gxUseMode 					; check to see if solid background
.8646	29 04		and #$04			and 	#4
.8648	f0 0a		beq $8654			beq 	_GXZeroPixel
.864a					_GXDraw:
.864a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864c	2d 42 06	and $0642			and 	gxANDValue
.864f	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8652	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8654					_GXZeroPixel:
.8654	c8		iny				iny 								; advance pointer
.8655	d0 05		bne $865c			bne 	_GXNoShift
.8657	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8659	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.865c					_GXNoShift:
.865c	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865e	d0 d0		bne $8630			bne 	_GXROLLoop2
.8660	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8662	a5 3a		lda $3a				lda 	gxzTemp2
.8664	cd d7 06	cmp $06d7			cmp 	gxSize
.8667	d0 c2		bne $862b			bne 	_GXROLLoop1
.8669	ee 34 06	inc $0634			inc 	gxY0
.866c	60		rts				rts
.06d7					gxSize:
>06d7							.fill 	1
.06d8					gxMask:
>06d8							.fill 	1
.06d9					gxAcquireVector:
>06d9							.fill 	2
.06db					gxScale:
>06db							.fill 	1
.06dc					gxUseMode:
>06dc							.fill 	1
.866d					GXFontHandler:
.866d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.866f	4d 3f 06	eor $063f			eor 	gxMode
.8672	8d dc 06	sta $06dc			sta 	gxUseMode
.8675	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8677	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8679	26 37		rol $37				rol	 	gxzTemp0+1
.867b	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867d	26 37		rol $37				rol	 	gxzTemp0+1
.867f	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8681	26 37		rol $37				rol	 	gxzTemp0+1
.8683	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8685	09 c0		ora #$c0			ora 	#$C0
.8687	85 37		sta $37				sta 	gxzTemp0+1
.8689	a9 08		lda #$08			lda 	#8 							; size 8x8
.868b	a2 93		ldx #$93			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868d	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.868f	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.8692	60		rts				rts
.8693					GXGetGraphicDataFont:
.8693	8a		txa				txa 								; X->Y
.8694	a8		tay				tay
.8695	a6 01		ldx $01				ldx 	1 							; preserve old value
.8697	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8699	85 01		sta $01				sta 	1
.869b	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869d	86 01		stx $01				stx 	1 							; put old value back.
.869f	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a1					_GXExpand:
.86a1	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a4	0a		asl a				asl 	a 							; shift bit 7 into C
.86a5	90 08		bcc $86af			bcc 	_GXNoPixel
.86a7	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a8	ad 40 06	lda $0640			lda 	gxColour
.86ab	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86ae	68		pla				pla
.86af					_GXNoPixel:
.86af	e8		inx				inx 								; do the whole byte.
.86b0	e0 08		cpx #$08			cpx 	#8
.86b2	d0 ed		bne $86a1			bne 	_GXExpand
.86b4	60		rts				rts
.86b5					GXSpriteHandler:
.86b5	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b7	4d 3f 06	eor $063f			eor 	gxMode
.86ba	8d dc 06	sta $06dc			sta 	gxUseMode
.86bd	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86bf	da		phx				phx
.86c0	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; can access sprite information
.86c3	68		pla				pla
.86c4	20 31 89	jsr $8931			jsr 	GXFindSprite 				; get the sprite address
.86c7	08		php				php
.86c8	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.86cb	28		plp				plp
.86cc	b0 0a		bcs $86d8			bcs		_GXSHExit 					; exit if find failed.
.86ce	ad dd 06	lda $06dd			lda 	GXSizePixels 				; return size
.86d1	a2 d9		ldx #$d9			ldx 	#GXSpriteAcquire & $FF
.86d3	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d5	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.86d8					_GXSHExit:
.86d8	60		rts				rts
.86d9					GXSpriteAcquire:
.86d9	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dc	85 0b		sta $0b				sta 	GXEditSlot
.86de	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e0	a9 00		lda #$00			lda 	#0
.86e2	ae de 06	ldx $06de			ldx 	GXSizeBits
.86e5					_GXTimesRowNumber:
.86e5	18		clc				clc
.86e6	65 36		adc $36				adc 	zTemp0
.86e8	ca		dex				dex
.86e9	10 fa		bpl $86e5			bpl 	_GXTimesRowNumber
.86eb	64 37		stz $37				stz 	gxzTemp0+1
.86ed	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ee	26 37		rol $37				rol 	gxzTemp0+1
.86f0	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f1	26 37		rol $37				rol 	gxzTemp0+1
.86f3	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f4	26 37		rol $37				rol 	gxzTemp0+1
.86f6	85 36		sta $36				sta 	gxzTemp0
.86f8	18		clc				clc 								; add base address.
.86f9	a5 36		lda $36				lda 	gxzTemp0
.86fb	6d e0 06	adc $06e0			adc 	GXSpriteOffset
.86fe	85 36		sta $36				sta 	gxzTemp0
.8700	a5 37		lda $37				lda 	gxzTemp0+1
.8702	6d e1 06	adc $06e1			adc 	GXSpriteOffset+1
.8705					_GXSAFindPage:
.8705	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8707	90 06		bcc $870f			bcc 	_GXSAFoundPage
.8709	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870b	e6 0b		inc $0b				inc 	GXEditSlot
.870d	80 f6		bra $8705			bra 	_GXSAFindPage
.870f					_GXSAFoundPage:
.870f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8711	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8713	a0 00		ldy #$00			ldy 	#0
.8715					_GXSACopyLoop:
.8715	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8717	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871a	c8		iny				iny
.871b	cc dd 06	cpy $06dd			cpy 	GXSizePixels
.871e	d0 f5		bne $8715			bne 	_GXSACopyLoop
.8720	60		rts				rts
.8721					GXSelect:
.8721	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8724	f0 22		beq $8748			beq 	_GXSFail
.8726	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8728	c9 40		cmp #$40			cmp 	#64
.872a	b0 1c		bcs $8748			bcs 	_GXSFail
.872c	8d 45 06	sta $0645			sta 	GSCurrentSpriteID
.872f	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8731	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8733	06 36		asl $36				asl 	gxzTemp0
.8735	06 36		asl $36				asl 	gxzTemp0
.8737	06 36		asl $36				asl 	gxzTemp0
.8739	2a		rol a				rol 	a
.873a	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873c	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.873f	85 37		sta $37				sta 	gxzTemp0+1
.8741	a5 36		lda $36				lda 	gxzTemp0
.8743	8d 46 06	sta $0646			sta 	GSCurrentSpriteAddr
.8746	18		clc				clc
.8747	60		rts				rts
.8748					_GXSFail:
.8748	38		sec				sec
.8749	60		rts				rts
.874a					GXSelectImage:
.874a	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874d	f0 74		beq $87c3			beq 	_GXSIFail
.874f	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8752	f0 6f		beq $87c3			beq 	_GXSIFail 					; (checking the MSB)
.8754	64 01		stz $01				stz 	1
.8756	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8758	d0 6b		bne $87c5			bne 	_GXSIHide
.875a	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875c	48		pha				pha
.875d	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.8760	68		pla				pla
.8761	20 31 89	jsr $8931			jsr 	GXFindSprite
.8764	b0 5a		bcs $87c0			bcs 	_GXSICloseFail 				; no image
.8766	a0 01		ldy #$01			ldy 	#1
.8768	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.876b	85 36		sta $36				sta 	gxzTemp0
.876d	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.8770	85 37		sta $37				sta 	gxzTemp0+1
.8772	ad e0 06	lda $06e0			lda 	GXSpriteOffset
.8775	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8777	18		clc				clc
.8778	ad e1 06	lda $06e1			lda 	GXSpriteOffset+1
.877b	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.877e	c8		iny				iny
.877f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8781	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.8784	69 00		adc #$00			adc 	#0
.8786	c8		iny				iny
.8787	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8789	ad de 06	lda $06de			lda 	GXSizeBits 					; get raw size
.878c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878e	2a		rol a				rol 	a 							; x 2
.878f	0a		asl a				asl 	a 							; x 4
.8790	0a		asl a				asl 	a 							; x 8
.8791	0a		asl a				asl 	a 							; x 16
.8792	0d df 06	ora $06df			ora 	GXSpriteLUT 				; Or with LUT
.8795	0a		asl a				asl 	a 							; 1 shift
.8796	09 01		ora #$01			ora 	#1 							; enable sprite.
.8798	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879a	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.879d	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a0	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a3	29 3f		and #$3f			and 	#$3F
.87a5	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87a8	ad de 06	lda $06de			lda 	GXSizeBits 					; get bit size
.87ab	6a		ror a				ror 	a 							; shift into bits 6/7
.87ac	6a		ror a				ror 	a
.87ad	6a		ror a				ror 	a
.87ae	29 c0		and #$c0			and 	#$C0
.87b0	1d 8a 06	ora $068a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b3	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87b6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87b9	29 7f		and #$7f			and 	#$7F
.87bb	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87be	18		clc				clc
.87bf	60		rts				rts
.87c0					_GXSICloseFail:
.87c0	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.87c3					_GXSIFail:
.87c3	38		sec				sec
.87c4	60		rts				rts
.87c5					_GXSIHide:
.87c5	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c8	85 36		sta $36				sta 	gxzTemp0
.87ca	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.87cd	85 37		sta $37				sta 	gxzTemp0+1
.87cf	a9 00		lda #$00			lda 	#0
.87d1	92 36		sta ($36)			sta 	(gxzTemp0)
.87d3	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87d9	09 80		ora #$80			ora 	#$80
.87db	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87de	18		clc				clc
.87df	60		rts				rts
.87e0					GXMoveSprite:
.87e0	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e3	f0 65		beq $884a			beq 	_GXSIFail
.87e5	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e8	f0 60		beq $884a			beq 	_GXSIFail
.87ea	85 37		sta $37				sta 	gxzTemp0+1
.87ec	a0 04		ldy #$04			ldy 	#4
.87ee	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.87f1	85 36		sta $36				sta 	gxzTemp0
.87f3	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.87f6	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.87f9	2a		rol a				rol 	a	 						; into bits 0,1.
.87fa	2a		rol a				rol 	a
.87fb	2a		rol a				rol 	a
.87fc	29 03		and #$03			and 	#3
.87fe	aa		tax				tax
.87ff	bd 4c 88	lda $884c,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.8802	48		pha				pha
.8803	18		clc				clc
.8804	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8807	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8809	c8		iny				iny
.880a	ad 33 06	lda $0633			lda 	gxX0+1
.880d	69 00		adc #$00			adc 	#0
.880f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8811	c8		iny				iny
.8812	68		pla				pla
.8813	18		clc				clc
.8814	6d 34 06	adc $0634			adc 	gxY0
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	a9 00		lda #$00			lda 	#0
.881b	69 00		adc #$00			adc 	#0
.881d	c8		iny				iny
.881e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8820	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.8823	6e 32 06	ror $0632			ror 	gxX0
.8826	4e 32 06	lsr $0632			lsr 	gxX0
.8829	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.882c	4e 34 06	lsr $0634			lsr 	gxY0
.882f	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.8832	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x
.8835	29 80		and #$80			and 	#$80
.8837	0d 32 06	ora $0632			ora 	gxX0
.883a	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.883d	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8840	29 c0		and #$c0			and 	#$C0
.8842	0d 34 06	ora $0634			ora 	gxY0
.8845	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.8848	18		clc				clc
.8849	60		rts				rts
.884a					_GXSIFail:
.884a	38		sec				sec
.884b	60		rts				rts
.884c					_GXMSOffset:
>884c	1c						.byte 	32-8/2
>884d	18						.byte 	32-16/2
>884e	14						.byte 	32-24/2
>884f	10						.byte 	32-32/2
.8850					GXOpenBitmap:
.8850	78		sei				sei 								; no interrupts here
.8851	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8853	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8856	58		cli				cli
.8857	60		rts				rts
.8858					GXCloseBitmap:
.8858	78		sei				sei
.8859	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.885c	85 0b		sta $0b				sta 	GXEditSlot
.885e	58		cli				cli
.885f	60		rts				rts
.8860					GXPositionCalc:
.8860	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8862	48		pha				pha
.8863	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8866	85 3c		sta $3c				sta 	gxzScreen
.8868	64 3d		stz $3d				stz 	gxzScreen+1
.886a	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.886c	26 3d		rol $3d				rol 	gxzScreen+1
.886e	06 3c		asl $3c				asl 	gxzScreen
.8870	26 3d		rol $3d				rol 	gxzScreen+1
.8872	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8873	65 3c		adc $3c				adc 	gxzScreen
.8875	85 3c		sta $3c				sta 	gxzScreen
.8877	90 02		bcc $887b			bcc 	_GXPCNoCarry
.8879	e6 3d		inc $3d				inc 	gxzScreen+1
.887b					_GXPCNoCarry:
.887b	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.887d	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.887f	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8881	85 36		sta $36				sta 	gxzTemp0
.8883	64 3d		stz $3d				stz 	gxzScreen+1
.8885	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8887					_GXPCMultiply32:
.8887	06 3c		asl $3c				asl 	gxzScreen
.8889	26 3d		rol $3d				rol 	gxzScreen+1
.888b	3a		dec a				dec 	a
.888c	d0 f9		bne $8887			bne 	_GXPCMultiply32
.888e	18		clc				clc
.888f	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8892	65 3c		adc $3c				adc 	gxzScreen
.8894	8d 44 06	sta $0644			sta 	gsOffset
.8897	ad 33 06	lda $0633			lda 	GXX0+1
.889a	65 3d		adc $3d				adc 	gxzScreen+1
.889c	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.889e	90 04		bcc $88a4			bcc 	_GXPCNoOverflow
.88a0	29 1f		and #$1f			and 	#$1F 						; fix it up
.88a2	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88a4					_GXPCNoOverflow:
.88a4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88a6	85 3d		sta $3d				sta 	gxzScreen+1
.88a8	64 3c		stz $3c				stz 	gxzScreen
.88aa	18		clc				clc
.88ab	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88ad	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88b0	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88b2	68		pla				pla
.88b3	85 36		sta $36				sta 	gxzTemp0
.88b5	60		rts				rts
.88b6					GXMovePositionDown:
.88b6	18		clc				clc 								; add 320 to offset/temp+1
.88b7	ad 44 06	lda $0644			lda 	gsOffset
.88ba	69 40		adc #$40			adc 	#64
.88bc	8d 44 06	sta $0644			sta 	gsOffset
.88bf	a5 3d		lda $3d				lda 	gxzScreen+1
.88c1	69 01		adc #$01			adc 	#1
.88c3	85 3d		sta $3d				sta 	gxzScreen+1
.88c5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88c7	90 07		bcc $88d0			bcc 	_GXMPDExit
.88c9	38		sec				sec  								; next page
.88ca	e9 20		sbc #$20			sbc 	#$20
.88cc	85 3d		sta $3d				sta 	gxzScreen+1
.88ce	e6 0b		inc $0b				inc 	GXEditSlot
.88d0					_GXMPDExit:
.88d0	60		rts				rts
.88d1					GXCollide:
.88d1	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88d3	aa		tax				tax
.88d4	05 37		ora $37				ora 	gxzTemp0+1
.88d6	29 c0		and #$c0			and 	#$C0
.88d8	38		sec				sec
.88d9	d0 53		bne $892e			bne 	_GXCollideFail 				; if either >= 64, fail.
.88db	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88dd	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88e0	1d 4a 06	ora $064a,x			ora 	GXSpriteLow,x
.88e3	30 48		bmi $892d			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88e5	18		clc				clc 								; need to calculate sum of sizes.
.88e6	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y
.88e9	7d 8a 06	adc $068a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88ec	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88ee	6a		ror a				ror 	a 							; 5/6/7
.88ef	4a		lsr a				lsr 	a 							; 4/5/6
.88f0	4a		lsr a				lsr 	a 							; 3/4/5
.88f1	4a		lsr a				lsr 	a 							; 2/3/4
.88f2	18		clc				clc
.88f3	69 08		adc #$08			adc 	#$08
.88f5	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.88f6	4a		lsr a				lsr 	a
.88f7	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.88f9	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.88fc	29 3f		and #$3f			and 	#$3F
.88fe	85 39		sta $39				sta 	gxzTemp1+1
.8900	38		sec				sec
.8901	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8904	29 3f		and #$3f			and 	#$3F
.8906	e5 39		sbc $39				sbc 	gxzTemp1+1
.8908	b0 03		bcs $890d			bcs 	_GXCAbs1 					; calculate |y1-y0|
.890a	49 ff		eor #$ff			eor 	#$FF
.890c	1a		inc a				inc 	a
.890d					_GXCAbs1:
.890d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.890f	b0 1c		bcs $892d			bcs 	_GXOkayFail
.8911	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8913	38		sec				sec 								; calculate |x1-x0|
.8914	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y
.8917	fd 4a 06	sbc $064a,x			sbc 	GXSpriteLow,x
.891a	b0 03		bcs $891f			bcs 	_GXCAbs2
.891c	49 ff		eor #$ff			eor 	#$FF
.891e	1a		inc a				inc 	a
.891f					_GXCAbs2:
.891f	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8921	b0 0a		bcs $892d			bcs 	_GXOkayFail
.8923	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8925	90 02		bcc $8929			bcc 	_GXCHaveLowest
.8927	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.8929					_GXCHaveLowest:
.8929	0a		asl a				asl 	a 							; scale to allow for >> 2
.892a	0a		asl a				asl 	a
.892b	18		clc				clc
.892c	60		rts				rts
.892d					_GXOkayFail:
.892d	18		clc				clc
.892e					_GXCollideFail:
.892e	a9 ff		lda #$ff			lda 	#$FF
.8930	60		rts				rts
.8931					GXFindSprite:
.8931	aa		tax				tax
.8932	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8935	85 0b		sta $0b				sta 	GXEditSlot
.8937	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.893a	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.893d	f0 33		beq $8972			beq 	_GXFSFail
.893f	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8942	8d e1 06	sta $06e1			sta 	GXSpriteOffset+1
.8945	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8948	48		pha				pha 								; save twice
.8949	48		pha				pha
.894a	29 03		and #$03			and 	#3 							; get sprite size
.894c	8d de 06	sta $06de			sta 	GXSizeBits 					; save raw (0-3)
.894f	aa		tax				tax
.8950	bd 74 89	lda $8974,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8953	8d dd 06	sta $06dd			sta 	GXSizePixels 					; save (8/16/24/32)
.8956	68		pla				pla 								; get LUT
.8957	4a		lsr a				lsr		a
.8958	4a		lsr a				lsr		a
.8959	29 03		and #$03			and 	#3
.895b	8d df 06	sta $06df			sta 	GXSpriteLUT
.895e	68		pla				pla 								; address, neeeds to be x 4
.895f	29 f0		and #$f0			and 	#$F0
.8961	8d e0 06	sta $06e0			sta 	GXSpriteOffset
.8964	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.8967	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.896a	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.896d	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.8970	18		clc				clc
.8971	60		rts				rts
.8972					_GXFSFail:
.8972	38		sec				sec
.8973	60		rts				rts
.8974					_GXFXSSTTable:
>8974	08 10 18 20					.byte 	8,16,24,32
.06dd					GXSizePixels:
>06dd							.fill 	1
.06de					GXSizeBits:
>06de							.fill 	1
.06df					GXSpriteLUT:
>06df							.fill 	1
.06e0					GXSpriteOffset:
>06e0							.fill 	2
.8978					GXSortXY:
.8978	20 96 89	jsr $8996			jsr 	GXSortY 					; will be sorted on Y now
.897b	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.897e	cd 36 06	cmp $0636			cmp 	gxX1
.8981	ad 33 06	lda $0633			lda 	gXX0+1
.8984	ed 37 06	sbc $0637			sbc 	gXX1+1
.8987	90 0c		bcc $8995			bcc 	_GXSXYExit 					; X0 < X1 exit
.8989	a2 00		ldx #$00			ldx 	#0 							; swap them over
.898b	a0 04		ldy #$04			ldy 	#4
.898d	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.8990	e8		inx				inx
.8991	c8		iny				iny
.8992	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.8995					_GXSXYExit:
.8995	60		rts				rts
.8996					GXSortY:
.8996	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.8999	cd 38 06	cmp $0638			cmp 	gxY1
.899c	90 0b		bcc $89a9			bcc 	_GXSYSorted
.899e	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89a0	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89a2					_GXSwap1:
.89a2	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.89a5	88		dey				dey
.89a6	ca		dex				dex
.89a7	10 f9		bpl $89a2			bpl 	_GXSwap1
.89a9					_GXSYSorted:
.89a9	60		rts				rts
.89aa					GXSwapXY:
.89aa	bd 32 06	lda $0632,x			lda 	gxX0,x
.89ad	48		pha				pha
.89ae	b9 32 06	lda $0632,y			lda 	gxX0,y
.89b1	9d 32 06	sta $0632,x			sta 	gxX0,x
.89b4	68		pla				pla
.89b5	99 32 06	sta $0632,y			sta 	gxX0,y
.89b8	60		rts				rts

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89b9					AssembleGroup1:
.89b9	a9 ff		lda #$ff			lda 	#$FF
.89bb	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89be	80 02		bra $89c2			bra 	AsmGroup12
.89c0					AssembleGroup2:
.89c0	a5 00		lda $00				lda 	$00
.89c2					AsmGroup12:
.89c2	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89c5	68		pla				pla 								; pop the return address to access the information following.
.89c6	fa		plx				plx
.89c7	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; get opcode and save as base
.89ca	8d a4 04	sta $04a4			sta 	BaseOpcode
.89cd	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89d0	d0 08		bne $89da			bne 	_AG12HaveMask
.89d2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89d4	20 58 8a	jsr $8a58			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89d7	8d a5 04	sta $04a5			sta 	ModeMask
.89da					_AG12HaveMask:
.89da	20 93 8b	jsr $8b93			jsr 	TypeAndCalculateOperand 	; get zero page type
.89dd	da		phx				phx 								; save found address mode
.89de	20 bc 8a	jsr $8abc			jsr 	AssembleModeX
.89e1	fa		plx				plx  								; restore address mode
.89e2	b0 0b		bcs $89ef			bcs 	_AG12Exit
.89e4	20 f0 89	jsr $89f0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89e7	20 bc 8a	jsr $8abc			jsr 	AssembleModeX
.89ea	b0 03		bcs $89ef			bcs 	_AG12Exit
.89ec	4c 31 b5	jmp $b531			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89ef					_AG12Exit:
.89ef	60		rts				rts
.89f0					PromoteToAbsolute:
.89f0	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89f2	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89f4	f0 19		beq $8a0f			beq 	_PTADo
.89f6	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89f8	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89fa	f0 13		beq $8a0f			beq 	_PTADo
.89fc	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89fe	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a00	f0 0d		beq $8a0f			beq 	_PTADo
.8a02	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a04	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a06	f0 07		beq $8a0f			beq 	_PTADo
.8a08	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a0a	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a0c	f0 01		beq $8a0f			beq 	_PTADo
.8a0e	60		rts				rts
.8a0f					_PTADo:
.8a0f	aa		tax				tax
.8a10	60		rts				rts
.8a11					AssembleGroup3:
.8a11	68		pla				pla 								; get parameters, which is just the opcode.
.8a12	fa		plx				plx
.8a13	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; get and output opcode
.8a16	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8a19	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get a 16 bit operand
.8a1c	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a1f	38		sec				sec
.8a20	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a23	48		pha				pha 								; LSB in A
.8a24	ad 10 04	lda $0410			lda 	NSMantissa1
.8a27	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a2a	aa		tax				tax 								; MSB in X
.8a2b	68		pla				pla
.8a2c	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a2d	69 7f		adc #$7f			adc 	#$7F
.8a2f	90 01		bcc $8a32			bcc 	_AG3NoCarry
.8a31	e8		inx				inx
.8a32					_AG3NoCarry:
.8a32	38		sec				sec 								; fix back and write out anyways.
.8a33	e9 80		sbc #$80			sbc 	#$80
.8a35	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8a38	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a3a	f0 0a		beq $8a46			beq 	_AG3Exit
.8a3c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a3f	29 01		and #$01			and 	#1
.8a41	f0 03		beq $8a46			beq 	_AG3Exit
.8a43	4c 36 b5	jmp $b536			jmp 	RangeError 					; no, branch is out of range
.8a46					_AG3Exit:
.8a46	60		rts				rts
.8a47					AssembleGroup4:
.8a47	68		pla				pla 								; pop address
.8a48	fa		plx				plx
.8a49	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; access and get first
.8a4c	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte 			; output it.
.8a4f	60		rts				rts
.8a50					AccessParameters:
.8a50	8d a1 04	sta $04a1			sta 	ParamStart
.8a53	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a56	a9 01		lda #$01			lda 	#1
.8a58					GetParameter:
.8a58	5a		phy				phy
.8a59	a8		tay				tay
.8a5a	ad a1 04	lda $04a1			lda 	ParamStart
.8a5d	85 36		sta $36				sta 	zTemp0
.8a5f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a62	85 37		sta $37				sta 	zTemp0+1
.8a64	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a66	7a		ply				ply
.8a67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a68					AssemblerWriteByte:
.8a68	48		pha			pha
.8a69	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a6c	29 02		and #$02		and 	#2
.8a6e	f0 1b		beq $8a8b		beq 	_AWBNoPrint
.8a70	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a73	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a76	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a79	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a7c	a9 20		lda #$20		lda 	#' '
.8a7e	20 e9 b6	jsr $b6e9		jsr 	EXTPrintCharacter
.8a81	68		pla			pla 									; print byte
.8a82	48		pha			pha
.8a83	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a86	a9 0d		lda #$0d		lda 	#13
.8a88	20 e9 b6	jsr $b6e9		jsr 	EXTPrintCharacter
.8a8b					_AWBNoPrint:
.8a8b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a8e	85 36		sta $36			sta 	zTemp0
.8a90	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a93	f0 0e		beq $8aa3		beq 	_AWBRange
.8a95	85 37		sta $37			sta 	zTemp0+1
.8a97	68		pla			pla 									; write byte out
.8a98	92 36		sta ($36)		sta 	(zTemp0)
.8a9a	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a9d	d0 03		bne $8aa2		bne 	_AWBNoCarry
.8a9f	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8aa2					_AWBNoCarry:
.8aa2	60		rts			rts
.8aa3					_AWBRange:
.8aa3	4c 36 b5	jmp $b536		jmp 	RangeError
.8aa6					PrintHex:
.8aa6	48		pha				pha
.8aa7	4a		lsr a				lsr 	a
.8aa8	4a		lsr a				lsr 	a
.8aa9	4a		lsr a				lsr 	a
.8aaa	4a		lsr a				lsr 	a
.8aab	20 af 8a	jsr $8aaf			jsr 	_PrintNibble
.8aae	68		pla				pla
.8aaf					_PrintNibble:
.8aaf	29 0f		and #$0f			and 	#15
.8ab1	c9 0a		cmp #$0a			cmp 	#10
.8ab3	90 02		bcc $8ab7			bcc 	_NoShift
.8ab5	69 06		adc #$06			adc 	#6
.8ab7					_NoShift:
.8ab7	69 30		adc #$30			adc 	#48
.8ab9	4c e9 b6	jmp $b6e9			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8abc					AssembleModeX:
.8abc	5a		phy				phy
.8abd	ad a3 04	lda $04a3			lda 	IsGroup1
.8ac0	f0 17		beq $8ad9			beq 	_AMXGroup2
.8ac2	8a		txa				txa 							; is it in group # 1
.8ac3	29 40		and #$40			and 	#AM_ISG1
.8ac5	f0 50		beq $8b17			beq 	_AMXFail 				; no, give up.
.8ac7	8a		txa				txa 							; get back.
.8ac8	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aca	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8acc	d0 22		bne $8af0			bne 	_AMXHaveInfo
.8ace	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ad1	c9 81		cmp #$81			cmp 	#$81
.8ad3	f0 42		beq $8b17			beq 	_AMXFail
.8ad5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ad7	80 17		bra $8af0			bra 	_AMXHaveInfo 			; odd design decision there.
.8ad9					_AMXGroup2:
.8ad9	8a		txa				txa 							; is it in group 2 ?
.8ada	29 20		and #$20			and 	#AM_ISG2
.8adc	f0 39		beq $8b17			beq 	_AMXFail 				; no, give up.
.8ade	8a		txa				txa 							; get the offset into Y
.8adf	29 1f		and #$1f			and 	#$1F
.8ae1	4a		lsr a				lsr 	a 						; make it 0-7.
.8ae2	4a		lsr a				lsr  	a
.8ae3	a8		tay				tay
.8ae4	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8ae7					_AMXCheckOkay:
.8ae7	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8ae8	88		dey				dey
.8ae9	10 fc		bpl $8ae7			bpl 	_AMXCheckOkay
.8aeb	90 2a		bcc $8b17			bcc 	_AMXFail 				; not allowed.
.8aed	8a		txa				txa  							; get mask back
.8aee	29 1f		and #$1f			and 	#$1F
.8af0					_AMXHaveInfo:
.8af0	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8af2	10 05		bpl $8af9			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8af4	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8af7	d0 1e		bne $8b17			bne 	_AMXFail
.8af9					_AMXAnySize:
.8af9	18		clc				clc 							; add offset to the base opcode
.8afa	6d a4 04	adc $04a4			adc 	BaseOpcode
.8afd					_AMXOutputCode:
.8afd	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b00	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b02	f0 10		beq $8b14			beq 	_AMXExit
.8b04	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b07	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8b0a	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b0c	30 06		bmi $8b14			bmi 	_AMXExit
.8b0e	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b11	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8b14					_AMXExit:
.8b14	7a		ply				ply
.8b15	38		sec				sec
.8b16	60		rts				rts
.8b17					_AMXFail:
.8b17	a0 00		ldy #$00			ldy 	#0
.8b19					_AMXCheckOddities:
.8b19	8a		txa				txa
.8b1a	d9 42 8b	cmp $8b42,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b1d	d0 16		bne $8b35			bne 	_AMXCONext
.8b1f	b9 40 8b	lda $8b40,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b22	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b25	d0 0e		bne $8b35			bne 	_AMXCONext
.8b27	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b29	10 05		bpl $8b30			bpl 	_AMXCONotZero
.8b2b	ad 10 04	lda $0410			lda 	NSMantissa1
.8b2e	d0 05		bne $8b35			bne 	_AMXCONext
.8b30					_AMXCONotZero:
.8b30	b9 41 8b	lda $8b41,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b33	80 c8		bra $8afd			bra 	_AMXOutputCode 			; and assemble it
.8b35					_AMXCONext:
.8b35	c8		iny				iny
.8b36	c8		iny				iny
.8b37	c8		iny				iny
.8b38	b9 40 8b	lda $8b40,y			lda 	ExtraOpcode+0,y 		; end of table
.8b3b	d0 dc		bne $8b19			bne 	_AMXCheckOddities
.8b3d					_AMXCOFail:
.8b3d	7a		ply				ply
.8b3e	18		clc				clc
.8b3f	60		rts				rts
.8b40					ExtraOpcode:
>8b40	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b43	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b46	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b49	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b4c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b4f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b52	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b55	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b58	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b5b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b5e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b5f					LabelHere:
.8b5f	c8		iny				iny 								; skip .
.8b60	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b62	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm 				; get a term
.8b65	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b68	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b6a	d0 24		bne $8b90			bne 	_ALType
.8b6c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b6f	85 36		sta $36				sta 	zTemp0
.8b71	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b74	85 37		sta $37				sta 	zTemp0+1
.8b76	5a		phy				phy 								; copy address in.
.8b77	a0 01		ldy #$01			ldy 	#1
.8b79	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b7c	92 36		sta ($36)			sta 	(zTemp0)
.8b7e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b81	91 36		sta ($36),y			sta 	(zTemp0),y
.8b83	c8		iny				iny
.8b84	a9 00		lda #$00			lda 	#0
.8b86	91 36		sta ($36),y			sta 	(zTemp0),y
.8b88	c8		iny				iny
.8b89	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8b	c8		iny				iny
.8b8c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8e	7a		ply				ply
.8b8f	60		rts				rts
.8b90					_ALType:
.8b90	4c 3b b5	jmp $b53b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b93					TypeAndCalculateOperand:
.8b93	b1 30		lda ($30),y			lda 	(codePtr),y
.8b95	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b97	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b99	f0 5b		beq $8bf6			beq 	_TACOExit
.8b9b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b9d	f0 57		beq $8bf6			beq 	_TACOExit
.8b9f	c8		iny				iny
.8ba0	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ba2	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ba4	f0 51		beq $8bf7			beq 	CalculateOperand
.8ba6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ba8	f0 1f		beq $8bc9			beq 	_TACOIndirect
.8baa	88		dey				dey 								; undo get of first character
.8bab	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get operand
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb4	d0 40		bne $8bf6			bne 	_TACOExit
.8bb6	c8		iny				iny
.8bb7	20 ba ae	jsr $aeba			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bba	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bbc	c9 58		cmp #$58			cmp 	#'X'
.8bbe	f0 36		beq $8bf6			beq 	_TACOExit
.8bc0	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bc2	c9 59		cmp #$59			cmp 	#'Y'
.8bc4	f0 30		beq $8bf6			beq 	_TACOExit
.8bc6					_TACOSyntax:
.8bc6	4c 31 b5	jmp $b531			jmp 	SyntaxError
.8bc9					_TACOIndirect:
.8bc9	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get the operand
.8bcc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bd0	f0 17		beq $8be9			beq 	_TACOIndX
.8bd2	20 43 af	jsr $af43			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd7	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bd9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bdb	d0 19		bne $8bf6			bne 	_TACOExit
.8bdd	c8		iny				iny
.8bde	20 ba ae	jsr $aeba			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8be1	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8be3	d0 e1		bne $8bc6			bne 	_TACOSyntax
.8be5	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8be7	80 0d		bra $8bf6			bra 	_TACOExit
.8be9					_TACOIndX:
.8be9	c8		iny				iny
.8bea	20 ba ae	jsr $aeba			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bed	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bef	d0 d5		bne $8bc6			bne 	_TACOSyntax
.8bf1	20 43 af	jsr $af43			jsr 	CheckRightBracket			; check )
.8bf4	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bf6					_TACOExit:
.8bf6	60		rts				rts
.8bf7					CalculateOperand:
.8bf7	48		pha				pha
.8bf8	da		phx				phx
.8bf9	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bfb	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.8bfe	fa		plx				plx
.8bff	68		pla				pla
.8c00	60		rts				rts
.aeba					TACOCheckXY:
.aeba	b1 30		lda ($30),y			lda 	(codePtr),y
.aebc	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aebe	c9 40		cmp #$40			cmp 	#$40
.aec0	d0 21		bne $aee3			bne 	_TCXYFail
.aec2	b1 30		lda ($30),y			lda 	(codePtr),y
.aec4	18		clc				clc
.aec5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aec7	85 37		sta $37				sta 	zTemp0+1
.aec9	c8		iny				iny
.aeca	b1 30		lda ($30),y			lda 	(codePtr),y
.aecc	c8		iny				iny
.aecd	85 36		sta $36				sta 	zTemp0
.aecf	5a		phy				phy 								; save position
.aed0	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aed2	b1 36		lda ($36),y			lda 	(zTemp0),y
.aed4	d0 0c		bne $aee2			bne 	_TCXYPopFail
.aed6	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aed8	b1 36		lda ($36),y			lda 	(zTemp0),y
.aeda	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aedc	f0 08		beq $aee6			beq 	_TCXYFound
.aede	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aee0	f0 04		beq $aee6			beq 	_TCXYFound
.aee2					_TCXYPopFail:
.aee2	7a		ply				ply
.aee3					_TCXYFail:
.aee3	a9 00		lda #$00			lda 	#0
.aee5	60		rts				rts
.aee6					_TCXYFound:
.aee6	7a		ply				ply 								; restore position
.aee7	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aee9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c01					EditProgramCode:
.8c01	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c04	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c07	20 5f a7	jsr $a75f			jsr 	MemorySearch
.8c0a	90 05		bcc $8c11			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c0c	d0 03		bne $8c11			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c0e	20 74 b7	jsr $b774			jsr 	MemoryDeleteLine 			; delete the line
.8c11					_EPCNoDelete:
.8c11	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c14	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c16	f0 0d		beq $8c25			beq 	_EPCNoInsert
.8c18	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c1b	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c1e	20 5f a7	jsr $a75f			jsr 	MemorySearch
.8c21	18		clc				clc 								; insert at this point.
.8c22	20 ab b7	jsr $b7ab			jsr 	MemoryInsertLine 			; insert the line
.8c25					_EPCNoInsert:
.8c25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c26					WarmStart:
.8c26	a2 ff		ldx #$ff			ldx 	#$FF
.8c28	9a		txs				txs
.8c29	20 ff b6	jsr $b6ff			jsr 	EXTInputLine 				; get line to lineBuffer
.8c2c	20 3b ac	jsr $ac3b			jsr 	TokeniseLine 				; tokenise the line
.8c2f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c32	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c35	d0 17		bne $8c4e			bne 	_WSEditCode 				; if so,edit code.
.8c37	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c3a	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c3c	85 30		sta $30				sta 	codePtr
.8c3e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c40	85 31		sta $31				sta 	codePtr+1
.8c42	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c45	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c47	f0 dd		beq $8c26			beq 	WarmStart
.8c49	20 cc 95	jsr $95cc			jsr 	RUNCodePointerLine 			; execute that line.
.8c4c	80 d8		bra $8c26			bra 	WarmStart
.8c4e					_WSEditCode:
.8c4e	20 01 8c	jsr $8c01			jsr 	EditProgramCode
.8c51	20 bf 8c	jsr $8cbf			jsr 	ClearCommand
.8c54	80 d0		bra $8c26			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c56					AssembleCommand:
.8c56	a2 00		ldx #$00			ldx 	#0
.8c58	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger 		; start address
.8c5b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c5e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c61	ad 10 04	lda $0410			lda 	NSMantissa1
.8c64	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c67	20 4b af	jsr $af4b			jsr 	CheckComma
.8c6a	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; options
.8c6d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c70	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c73	60		rts				rts
.8c74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c75					AssertCommand:
.8c75	a2 00		ldx #$00			ldx 	#0
.8c77	20 63 a6	jsr $a663			jsr 	EvaluateInteger 			; the assert test
.8c7a	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; exit if result is non zero.
.8c7d	d0 05		bne $8c84			bne 	_ACExit
.8c7f	a9 0a		lda #$0a		lda	#10
.8c81	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.8c84					_ACExit:
.8c84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c85					CallCommand:
.8c85	a2 00		ldx #$00			ldx 	#0
.8c87	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.8c8a					_CCClear
.8c8a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c8b	20 00 a7	jsr $a700			jsr 	NSMSetZero
.8c8e	e0 04		cpx #$04			cpx 	#4
.8c90	d0 f8		bne $8c8a			bne 	_CCClear
.8c92	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c94					_CCCParam:
.8c94	b1 30		lda ($30),y			lda 	(codePtr),y
.8c96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c98	d0 09		bne $8ca3			bne 	_CCCRun6502
.8c9a	c8		iny				iny 								; skip comma
.8c9b	e8		inx				inx	 								; next level
.8c9c	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c9f	e0 03		cpx #$03			cpx 	#3
.8ca1	90 f1		bcc $8c94			bcc 	_CCCParam 					; done all 3 ?
.8ca3					_CCCRun6502:
.8ca3	5a		phy				phy 								; save position
.8ca4	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8ca7	85 37		sta $37				sta 	zTemp0+1
.8ca9	ad 08 04	lda $0408			lda 	NSMantissa0
.8cac	85 36		sta $36				sta 	zTemp0
.8cae	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cb1	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cb4	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cb7	20 bc 8c	jsr $8cbc			jsr 	_CCCZTemp0 					; call zTemp0
.8cba	7a		ply				ply 								; restore position and exit
.8cbb	60		rts				rts
.8cbc					_CCCZTemp0:
.8cbc	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8cbf					ClearCommand:
.8cbf	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cc1	85 36		sta $36				sta 	0+zTemp0
.8cc3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cc5	85 37		sta $37				sta 	1+zTemp0
.8cc7					_ClearZeroLoop:
.8cc7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cc9	f0 24		beq $8cef			beq 	_ClearZeroEnd
.8ccb	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8ccd	a9 00		lda #$00			lda 	#0
.8ccf					_ClearOneVariable:
.8ccf	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd1	c8		iny				iny
.8cd2	c0 08		cpy #$08			cpy 	#8
.8cd4	d0 f9		bne $8ccf			bne 	_ClearOneVariable
.8cd6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cd8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cda	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cdc	d0 04		bne $8ce2			bne 	_ClearNotProcedure
.8cde	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ce0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce2					_ClearNotProcedure:
.8ce2	18		clc				clc 								; go to the next variable
.8ce3	b2 36		lda ($36)			lda 	(zTemp0)
.8ce5	65 36		adc $36				adc 	zTemp0
.8ce7	85 36		sta $36				sta 	zTemp0
.8ce9	90 dc		bcc $8cc7			bcc 	_ClearZeroLoop
.8ceb	e6 37		inc $37				inc 	zTemp0+1
.8ced	80 d8		bra $8cc7			bra 	_ClearZeroLoop
.8cef					_ClearZeroEnd:
.8cef	18		clc				clc
.8cf0	a5 36		lda $36				lda 	zTemp0
.8cf2	69 01		adc #$01			adc 	#1
.8cf4	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cf7	a5 37		lda $37				lda 	zTemp0+1
.8cf9	69 00		adc #$00			adc 	#0
.8cfb	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8cfe	20 19 a8	jsr $a819			jsr 	StackReset
.8d01	20 8e b8	jsr $b88e			jsr 	StringSystemInitialise
.8d04	20 ce 99	jsr $99ce			jsr 	ProcedureScan
.8d07	20 88 95	jsr $9588			jsr 	Command_Restore
.8d0a	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d0d	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d10	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d13	20 9a a3	jsr $a39a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d17					ClearScreen:
.8d17	5a		phy				phy
.8d18	20 e6 b6	jsr $b6e6			jsr 	EXTClearScreen
.8d1b	7a		ply				ply
.8d1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d1d					Command_Data:
.8d1d	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d1f	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d21	20 20 9a	jsr $9a20			jsr 	ScanForward
.8d24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d25					DimCommand:
.8d25	b1 30		lda ($30),y			lda 	(codePtr),y
.8d27	29 c0		and #$c0			and 	#$C0
.8d29	c9 40		cmp #$40			cmp 	#$40
.8d2b	d0 7a		bne $8da7			bne 	_DCSyntax
.8d2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2f	18		clc				clc
.8d30	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d32	85 3f		sta $3f				sta 	zaTemp+1
.8d34	c8		iny				iny
.8d35	b1 30		lda ($30),y			lda 	(codePtr),y
.8d37	c8		iny				iny
.8d38	85 3e		sta $3e				sta 	zaTemp
.8d3a	5a		phy				phy
.8d3b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d3d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d3f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d41	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d43	f0 62		beq $8da7			beq 	_DCSyntax
.8d45	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d47	29 04		and #$04			and 	#NSBIsArray
.8d49	f0 64		beq $8daf			beq 	_DCType
.8d4b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d4d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4f	d0 59		bne $8daa			bne 	_DCRedefine
.8d51	7a		ply				ply
.8d52	20 b2 8d	jsr $8db2			jsr 	_DCGetSize 				; get array size, check it.
.8d55	5a		phy				phy
.8d56	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d58	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d5a	7a		ply				ply 							; is there a second (e.g. ,x)
.8d5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d5f	d0 0a		bne $8d6b			bne 	_DCOneDimension
.8d61	c8		iny				iny 							; skip comma
.8d62	20 b2 8d	jsr $8db2			jsr 	_DCGetSize 				; get 2nd array size
.8d65	5a		phy				phy
.8d66	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d68	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6a	7a		ply				ply
.8d6b					_DCOneDimension:
.8d6b	5a		phy				phy 							; save position
.8d6c	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d6e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d70	aa		tax				tax
.8d71	c8		iny				iny
.8d72	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d74	e8		inx				inx 							; bump them.
.8d75	1a		inc a				inc 	a
.8d76	20 cd b3	jsr $b3cd			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d79	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d7b	29 e0		and #$e0			and 	#$E0
.8d7d	d0 23		bne $8da2			bne 	_DCSize
.8d7f	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d81	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d83	20 c0 8d	jsr $8dc0			jsr 	ScaleByBaseType 		; scale by base type
.8d86	a5 36		lda $36				lda 	zTemp0
.8d88	a6 37		ldx $37				ldx 	zTemp0+1
.8d8a	20 5c a3	jsr $a35c			jsr 	AllocateXABytes 		; allocate memory
.8d8d	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d8f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d91	c8		iny				iny
.8d92	8a		txa				txa
.8d93	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d95	7a		ply				ply 							; get position back
.8d96	20 43 af	jsr $af43			jsr 	CheckRightBracket 		; check )
.8d99	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9b	c8		iny				iny 							; consume in case
.8d9c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d9e	f0 85		beq $8d25			beq 	DimCommand
.8da0	88		dey				dey 							; undo consume
.8da1	60		rts				rts
.8da2					_DCSize:
.8da2	a9 16		lda #$16		lda	#22
.8da4	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.8da7					_DCSyntax:
.8da7	4c 31 b5	jmp $b531			jmp 	SyntaxError
.8daa					_DCRedefine:
.8daa	a9 15		lda #$15		lda	#21
.8dac	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.8daf					_DCType:
.8daf	4c 3b b5	jmp $b53b			jmp 	TypeError
.8db2					_DCGetSize:
.8db2	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8db4	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 	; get array dimension
.8db7	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8db9	f0 e7		beq $8da2			beq 	_DCSize
.8dbb	c9 fe		cmp #$fe			cmp 	#254
.8dbd	f0 e3		beq $8da2			beq 	_DCSize
.8dbf	60		rts				rts
.8dc0					ScaleByBaseType:
.8dc0	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dc2	d0 19		bne $8ddd			bne 	_SBBTString
.8dc4	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dc6	48		pha				pha
.8dc7	a5 36		lda $36				lda 	zTemp0
.8dc9	48		pha				pha
.8dca	06 36		asl $36				asl 	zTemp0 					; x 2
.8dcc	26 37		rol $37				rol 	zTemp0+1
.8dce	06 36		asl $36				asl 	zTemp0 					; x 4
.8dd0	26 37		rol $37				rol 	zTemp0+1
.8dd2	68		pla				pla 							; add stacked value = x 5
.8dd3	65 36		adc $36				adc 	zTemp0
.8dd5	85 36		sta $36				sta 	zTemp0
.8dd7	68		pla				pla
.8dd8	65 37		adc $37				adc 	zTemp0+1
.8dda	85 37		sta $37				sta 	zTemp0+1
.8ddc	60		rts				rts
.8ddd					_SBBTString:
.8ddd	06 36		asl $36				asl 	zTemp0
.8ddf	26 37		rol $37				rol 	zTemp0+1
.8de1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8de2					EndCommand:
.8de2	4c 26 8c	jmp $8c26			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8de5					UnaryEvent:
.8de5	fa		plx				plx
.8de6	20 0d 98	jsr $980d			jsr 	TimerToStackX 				; timer in +0
.8de9	e8		inx				inx  								; put reference into +1
.8dea	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm
.8ded	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8df0	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8df2	d0 57		bne $8e4b			bne 	_UEType
.8df4	e8		inx				inx 								; put the step in +2
.8df5	20 4b af	jsr $af4b			jsr 	CheckComma
.8df8	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.8dfb	20 43 af	jsr $af43			jsr 	CheckRightBracket
.8dfe	ca		dex				dex
.8dff	ca		dex				dex
.8e00	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e03	85 36		sta $36				sta 	zTemp0
.8e05	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e08	85 37		sta $37				sta 	zTemp0+1
.8e0a	5a		phy				phy
.8e0b	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e0d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e0f	30 36		bmi $8e47			bmi 	_UEFalse 					; exit if signed.
.8e11	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e13	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e16	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e18	c8		iny				iny
.8e19	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e1c	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e1e	c8		iny				iny
.8e1f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e22	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e24	90 21		bcc $8e47			bcc 	_UEFalse 					; no, return FALSE.
.8e26	18		clc				clc
.8e27	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e29	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e2c	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e2f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e31	c8		iny				iny
.8e32	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e35	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e38	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3a	c8		iny				iny
.8e3b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e3e	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e41	91 36		sta ($36),y			sta 	(zTemp0),y
.8e43	7a		ply				ply
.8e44	4c 32 9b	jmp $9b32			jmp 	ReturnTrue
.8e47					_UEFalse:
.8e47	7a		ply				ply 								; restore Y
.8e48	4c 3e 9b	jmp $9b3e			jmp 	ReturnFalse 				; and return False
.8e4b					_UEType:
.8e4b	4c 3b b5	jmp $b53b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e4e					ForCommand:
.8e4e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e50	20 b4 a7	jsr $a7b4			jsr 	StackOpen
.8e53	a2 00		ldx #$00			ldx 	#0
.8e55	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm
.8e58	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e5b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e5d	d0 49		bne $8ea8			bne		_FCError
.8e5f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e61	20 53 af	jsr $af53			jsr 	CheckNextA
.8e64	e8		inx				inx
.8e65	20 63 a6	jsr $a663			jsr 	EvaluateInteger 			; <from> in +1
.8e68	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6a	c8		iny				iny 								; consume it
.8e6b	48		pha				pha 								; save on stack for later
.8e6c	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e6e	f0 04		beq $8e74			beq 	_FCNoSyntax
.8e70	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e72	d0 37		bne $8eab			bne 	_FCSyntaxError
.8e74					_FCNoSyntax:
.8e74	e8		inx				inx
.8e75	20 63 a6	jsr $a663			jsr 	EvaluateInteger
.8e78	20 f8 a7	jsr $a7f8			jsr 	STKSaveCodePosition 		; save loop back position
.8e7b	68		pla				pla 								; restore DOWNTO or TO
.8e7c	5a		phy				phy 								; save Y on the stack
.8e7d	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e7f	f0 02		beq $8e83			beq 	_FCNotDownTo
.8e81	a9 02		lda #$02			lda 	#2
.8e83					_FCNotDownTo:
.8e83	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e84	a0 10		ldy #$10			ldy 	#16
.8e86	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e88	a0 06		ldy #$06			ldy 	#6
.8e8a	ad 08 04	lda $0408			lda 	NSMantissa0
.8e8d	91 34		sta ($34),y			sta 	(basicStack),y
.8e8f	ad 10 04	lda $0410			lda 	NSMantissa1
.8e92	c8		iny				iny
.8e93	91 34		sta ($34),y			sta 	(basicStack),y
.8e95	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e97	a2 01		ldx #$01			ldx 	#1
.8e99	20 ae 8e	jsr $8eae			jsr 	FCIntegerToStack
.8e9c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e9e	a2 02		ldx #$02			ldx 	#2
.8ea0	20 ae 8e	jsr $8eae			jsr 	FCIntegerToStack
.8ea3	20 ce 8e	jsr $8ece			jsr 	CopyIndexToReference
.8ea6	7a		ply				ply 								; restore position
.8ea7	60		rts				rts
.8ea8					_FCError:
.8ea8	4c 3b b5	jmp $b53b			jmp 	TypeError
.8eab					_FCSyntaxError:
.8eab	4c 31 b5	jmp $b531			jmp 	SyntaxError
.8eae					FCIntegerToStack:
.8eae	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8eb1	10 03		bpl $8eb6			bpl	 	_FCNotNegative
.8eb3	20 b5 a6	jsr $a6b5			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8eb6					_FCNotNegative:
.8eb6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8eb9	91 34		sta ($34),y			sta 	(basicStack),y
.8ebb	c8		iny				iny
.8ebc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ebf	91 34		sta ($34),y			sta 	(basicStack),y
.8ec1	c8		iny				iny
.8ec2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ec5	91 34		sta ($34),y			sta 	(basicStack),y
.8ec7	c8		iny				iny
.8ec8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ecb	91 34		sta ($34),y			sta 	(basicStack),y
.8ecd	60		rts				rts
.8ece					CopyIndexToReference:
.8ece	5a		phy				phy
.8ecf	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ed1	38		sec				sec 								; (because we copy from offset 8)
.8ed2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ed4	e9 08		sbc #$08			sbc 	#8
.8ed6	85 36		sta $36				sta 	zTemp0
.8ed8	c8		iny				iny
.8ed9	b1 34		lda ($34),y			lda 	(basicStack),y
.8edb	e9 00		sbc #$00			sbc 	#0
.8edd	85 37		sta $37				sta 	zTemp0+1
.8edf	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ee1	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ee3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee5	0a		asl a				asl 	a 							; into carry
.8ee6	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ee8	90 14		bcc $8efe			bcc 	_CITRNormal
.8eea	38		sec				sec
.8eeb					_CITRNegative:
.8eeb	a9 00		lda #$00			lda 	#0
.8eed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8eef	91 36		sta ($36),y			sta 	(zTemp0),y
.8ef1	c8		iny				iny
.8ef2	ca		dex				dex
.8ef3	d0 f6		bne $8eeb			bne 	_CITRNegative
.8ef5	88		dey				dey 								; look at MSB of mantissa
.8ef6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8ef8	09 80		ora #$80			ora 	#$80
.8efa	91 36		sta ($36),y			sta 	(zTemp0),y
.8efc	7a		ply				ply
.8efd	60		rts				rts
.8efe					_CITRNormal:
.8efe	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f00	91 36		sta ($36),y			sta 	(zTemp0),y
.8f02	c8		iny				iny
.8f03	ca		dex				dex
.8f04	d0 f8		bne $8efe			bne 	_CITRNormal
.8f06	7a		ply				ply 								; and exit.
.8f07	60		rts				rts
.8f08					NextCommand:
.8f08	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f0a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f0c	20 e0 a7	jsr $a7e0			jsr 	StackCheckFrame
.8f0f	5a		phy				phy
.8f10	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f12	b1 34		lda ($34),y			lda 	(basicStack),y
.8f14	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f16	30 02		bmi $8f1a			bmi 	_NCStepNeg
.8f18	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f1a					_NCStepNeg:
.8f1a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f1c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f1e	18		clc				clc
.8f1f					_NCBump:
.8f1f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f21	91 34		sta ($34),y			sta 	(basicStack),y
.8f23	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f25	c8		iny				iny 								; next byte
.8f26	ca		dex				dex 								; do four times
.8f27	d0 f6		bne $8f1f			bne 	_NCBump
.8f29	20 ce 8e	jsr $8ece			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f2c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f2e	b1 34		lda ($34),y			lda 	(basicStack),y
.8f30	0a		asl a				asl 	a 							; sign bit to carry
.8f31	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f33	85 38		sta $38				sta 	zTemp1
.8f35	90 02		bcc $8f39			bcc 	_NCCompRev 					; use if step is +ve
.8f37	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f39					_NCCompRev:
.8f39	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f3b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f3d	85 39		sta $39				sta 	zTemp1+1
.8f3f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f41	38		sec				sec
.8f42					_NCCompare:
.8f42	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f44	b1 34		lda ($34),y			lda 	(basicStack),y
.8f46	a4 39		ldy $39				ldy 	zTemp1+1
.8f48	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f4a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f4c	e6 39		inc $39				inc 	zTemp1+1
.8f4e	ca		dex				dex 								; do it 4 times.
.8f4f	d0 f1		bne $8f42			bne 	_NCCompare
.8f51	50 02		bvc $8f55			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f53	49 80		eor #$80			eor 	#$80
.8f55					_NCNoOverflow:
.8f55	7a		ply				ply 								; restore Y position
.8f56	0a		asl a				asl 	a 							; is bit 7 set.
.8f57	90 04		bcc $8f5d			bcc 	_NCLoopback 				; if no , >= so loop back
.8f59	20 d2 a7	jsr $a7d2			jsr 	StackClose 					; exit the loop
.8f5c	60		rts				rts
.8f5d					_NCLoopBack:
.8f5d	20 09 a8	jsr $a809			jsr 	STKLoadCodePosition 		; loop back
.8f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f61					RectangleCommand:
.8f61	a9 24		lda #$24			lda 	#GCMD_FrameRect				; frame rectangle
.8f63	80 02		bra $8f67			bra 	ShapeDrawCmd
.8f65					CircleCommand:
.8f65	a9 28		lda #$28			lda 	#GCMD_FrameCircle 				; framed circle
.8f67					ShapeDrawCmd:
.8f67	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f6a					ShapeDraw:
.8f6a	0d e3 06	ora $06e3			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f6d	4c e9 8f	jmp $8fe9			jmp 	ExecuteGraphicCommand	 	; and complete
.8f70					SpriteCommand:
.8f70	a2 00		ldx #$00			ldx 	#0
.8f72	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get image number.
.8f75	5a		phy				phy
.8f76	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.8f78	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f7b	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f7d	b0 0d		bcs $8f8c			bcs 	_SCRange
.8f7f	a0 ff		ldy #$ff			ldy 	#255
.8f81	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8f84	a9 32		lda #$32			lda 	#GCMD_SpriteMove
.8f86	7a		ply				ply
.8f87	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f8a	80 5d		bra $8fe9			bra 	ExecuteGraphicCommand
.8f8c					_SCRange:
.8f8c	4c 36 b5	jmp $b536			jmp 	RangeError
.8f8f					ImageCommand:
.8f8f	a2 00		ldx #$00			ldx 	#0
.8f91	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get image number.
.8f94	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f97					ImageRunDraw:
.8f97	09 20		ora #$20			ora 	#GCMD_Move					; move cursor
.8f99	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8f9c	ad e9 06	lda $06e9			lda 	gxDrawScale
.8f9f	0a		asl a				asl 	a
.8fa0	0a		asl a				asl 	a
.8fa1	0a		asl a				asl 	a
.8fa2	a8		tay				tay
.8fa3	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.8fa5	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fa8	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fab	60		rts				rts
.8fac					TextCommand:
.8fac	a2 00		ldx #$00			ldx 	#0
.8fae	20 4b a6	jsr $a64b			jsr 	EvaluateString 				; get text
.8fb1	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fb4					TextRunDraw:
.8fb4	09 20		ora #$20			ora 	#GCMD_Move 					; move cursor
.8fb6	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fb9	a0 00		ldy #$00			ldy 	#0
.8fbb					_IRDLoop:
.8fbb	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fbe	85 37		sta $37				sta 	zTemp0+1
.8fc0	ad 08 04	lda $0408			lda 	NSMantissa0
.8fc3	85 36		sta $36				sta 	zTemp0
.8fc5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fc7	f0 13		beq $8fdc			beq 	_IRDExit
.8fc9	5a		phy				phy									; save string pos
.8fca	48		pha				pha 								; save char
.8fcb	ad e9 06	lda $06e9			lda 	gxDrawScale 				; get scale
.8fce	0a		asl a				asl 	a
.8fcf	0a		asl a				asl 	a
.8fd0	0a		asl a				asl 	a
.8fd1	a8		tay				tay
.8fd2	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.8fd4	fa		plx				plx 								; char to draw
.8fd5	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fd8	7a		ply				ply 								; restore string pos
.8fd9	c8		iny				iny
.8fda	90 df		bcc $8fbb			bcc 	_IRDLoop 					; go back if no error.
.8fdc					_IRDExit:
.8fdc	60		rts				rts
.8fdd					PlotCommand:
.8fdd	a9 30		lda #$30			lda 	#GCMD_Plot 					; command ID to use
.8fdf	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fe2	80 05		bra $8fe9			bra 	ExecuteGraphicCommand
.8fe4					LineCommand:
.8fe4	a9 22		lda #$22			lda 	#GCMD_Line 						; command ID to use
.8fe6	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fe9					ExecuteGraphicCommand:
.8fe9	0d e2 06	ora $06e2			ora 	gxCommandID 				; make a full command
.8fec	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw 				; draw it and exit
.8fef	b0 01		bcs $8ff2			bcs 	_EGCError
.8ff1	60		rts				rts
.8ff2					_EGCError:
.8ff2	4c 31 b5	jmp $b531			jmp 	SyntaxError
.8ff5					RunGraphicsCommand:
.8ff5	8d e2 06	sta $06e2			sta 	gxCommandID					; save TODO graphics command.
.8ff8	68		pla				pla 								; pop handler address
.8ff9	fa		plx				plx
.8ffa	1a		inc a				inc 	a
.8ffb	d0 01		bne $8ffe			bne 	_RGINoCarry
.8ffd	e8		inx				inx
.8ffe					_RGINoCarry:
.8ffe	8d e7 06	sta $06e7			sta 	GXHandler
.9001	8e e8 06	stx $06e8			stx 	GXHandler+1
.9004					_RGICommandLoop:
.9004	b1 30		lda ($30),y			lda 	(codePtr),y
.9006	c8		iny				iny
.9007	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.9009	f0 53		beq $905e			beq 	_RGI_To
.900b	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.900d	f0 55		beq $9064			beq 	_RGI_Here
.900f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9011	f0 3d		beq $9050			beq 	_RGI_Exit
.9013	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9015	f0 39		beq $9050			beq 	_RGI_Exit
.9017	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.9019	f0 3e		beq $9059			beq 	_RGI_Frame
.901b	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.901d	f0 33		beq $9052			beq 	_RGI_Solid
.901f	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9021	f0 4b		beq $906e			beq 	_RGI_By
.9023	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9025	f0 17		beq $903e			beq 	_RGI_Move2
.9027	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.9029	f0 65		beq $9090			beq 	_RGI_Dim
.902b	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.902d	f0 78		beq $90a7			beq 	_RGI_Colour
.902f	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9031	f0 74		beq $90a7			beq 	_RGI_Colour
.9033	ae e2 06	ldx $06e2			ldx 	gxCommandID
.9036	e0 32		cpx #$32			cpx 	#GCMD_SpriteMove 			; if not sprite
.9038	d0 03		bne $903d			bne 	_RGI_Move 					; move
.903a	4c d1 90	jmp $90d1			jmp		_RGI_SpriteInstructions
.903d					_RGI_Move:
.903d	88		dey				dey 								; unpick get.
.903e					_RGI_Move2:
.903e	20 f7 90	jsr $90f7			jsr 	GCGetCoordinatePair 		; move to here
.9041	20 1e 91	jsr $911e			jsr 	GCCopyPairToStore 			; save
.9044	5a		phy				phy
.9045	20 14 91	jsr $9114			jsr 	GCLoadAXY 					; load in
.9048	09 20		ora #$20			ora 	#GCMD_Move 					; move there
.904a	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.904d	7a		ply				ply
.904e	80 b4		bra $9004			bra 	_RGICommandLoop 			; and go round
.9050					_RGI_Exit:
.9050	88		dey				dey 								; unpick : / EOL
.9051	60		rts				rts
.9052					_RGI_Solid:
.9052	a9 02		lda #$02			lda 	#2
.9054	8d e3 06	sta $06e3			sta 	gxFillSolid
.9057	80 ab		bra $9004			bra 	_RGICommandLoop
.9059					_RGI_Frame:
.9059	9c e3 06	stz $06e3			stz 	gxFillSolid
.905c	80 a6		bra $9004			bra 	_RGICommandLoop
.905e					_RGI_To:
.905e	20 f7 90	jsr $90f7			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9061	20 1e 91	jsr $911e			jsr 	GCCopyPairToStore
.9064					_RGI_Here:
.9064	5a		phy				phy
.9065	20 14 91	jsr $9114			jsr 	GCLoadAXY 					; load it into AXY
.9068	20 ce 90	jsr $90ce			jsr 	_RGICallHandler 			; go do whatever it is.
.906b	7a		ply				ply
.906c	80 96		bra $9004			bra 	_RGICommandLoop 			; and go round
.906e					_RGI_By:
.906e	20 04 91	jsr $9104			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9071	18		clc				clc
.9072	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9075	6d e4 06	adc $06e4			adc 	gxxPos
.9078	8d e4 06	sta $06e4			sta 	gxXPos
.907b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.907e	6d e5 06	adc $06e5			adc 	gxxPos+1
.9081	8d e5 06	sta $06e5			sta 	gxXPos+1
.9084	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9087	18		clc				clc
.9088	6d e6 06	adc $06e6			adc 	gxYPos
.908b	8d e6 06	sta $06e6			sta 	gxYPos
.908e	80 d4		bra $9064			bra 	_RGI_Here
.9090					_RGI_Dim:
.9090	a2 01		ldx #$01			ldx	 	#1
.9092	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger
.9095	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9098	c9 00		cmp #$00			cmp 	#0
.909a	f0 2f		beq $90cb			beq 	_RGIRange
.909c	c9 09		cmp #$09			cmp 	#8+1
.909e	b0 2b		bcs $90cb			bcs		_RGIRange
.90a0	3a		dec a				dec 	a
.90a1	8d e9 06	sta $06e9			sta 	gxDrawScale
.90a4	4c 04 90	jmp $9004			jmp 	_RGICommandLoop
.90a7					_RGI_Colour:
.90a7	a2 01		ldx #$01			ldx 	#1 							; colour
.90a9	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger
.90ac	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90ae	20 00 a7	jsr $a700			jsr 	NSMSetZero
.90b1	b1 30		lda ($30),y			lda 	(codePtr),y
.90b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90b5	d0 04		bne $90bb			bne 	_RGICDefaultMode
.90b7	c8		iny				iny
.90b8	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger
.90bb					_RGICDefaultMode:
.90bb	5a		phy				phy
.90bc	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.90be	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c1	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c4	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.90c7	7a		ply				ply
.90c8	4c 04 90	jmp $9004			jmp 	_RGICommandLoop 			; and go round
.90cb					_RGIRange:
.90cb	4c 36 b5	jmp $b536			jmp 	RangeError
.90ce					_RGICallHandler:
.90ce	6c e7 06	jmp ($06e7)			jmp 	(GXHandler)
.90d1					_RGI_SpriteInstructions:
.90d1	c9 be		cmp #$be			cmp 	#KWD_OFF
.90d3	f0 07		beq $90dc			beq 	_RGISpriteOff
.90d5	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90d7	f0 13		beq $90ec			beq 	_RGISetImage
.90d9	4c 3d 90	jmp $903d			jmp 	_RGI_Move
.90dc					_RGISpriteOff:
.90dc	5a		phy				phy
.90dd	a0 01		ldy #$01			ldy 	#1
.90df	a2 00		ldx #$00			ldx 	#0
.90e1					_RGIDoCommandLoop:
.90e1	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.90e3	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.90e6	7a		ply				ply
.90e7	b0 e2		bcs $90cb			bcs 	_RGIRange
.90e9	4c 04 90	jmp $9004			jmp 	_RGICommandLoop
.90ec					_RGISetImage:
.90ec	a2 01		ldx #$01			ldx 	#1
.90ee	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger
.90f1	5a		phy				phy
.90f2	aa		tax				tax
.90f3	a0 00		ldy #$00			ldy 	#0
.90f5	80 ea		bra $90e1			bra 	_RGIDoCommandLoop
.90f7					GCGetCoordinatePair:
.90f7	a2 01		ldx #$01			ldx 	#1
.90f9	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.90fc	20 4b af	jsr $af4b			jsr 	CheckComma
.90ff	e8		inx				inx
.9100	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.9103	60		rts				rts
.9104					GCSignedCoordinatePair:
.9104	a2 01		ldx #$01			ldx 	#1
.9106	20 84 a6	jsr $a684			jsr 	Evaluate16BitIntegerSigned
.9109	20 4b af	jsr $af4b			jsr 	CheckComma
.910c	e8		inx				inx
.910d	20 84 a6	jsr $a684			jsr 	Evaluate16BitIntegerSigned
.9110	60		rts				rts
.9111					_GCCPRange:
.9111	4c 36 b5	jmp $b536			jmp 	RangeError
.9114					GCLoadAXY:
.9114	ad e5 06	lda $06e5			lda 	gxXPos+1
.9117	ae e4 06	ldx $06e4			ldx 	gxXPos
.911a	ac e6 06	ldy $06e6			ldy 	gxYPos
.911d	60		rts				rts
.911e					GCCopyPairToStore:
.911e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9121	8d e4 06	sta $06e4			sta 	gxXPos
.9124	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9127	8d e5 06	sta $06e5			sta 	gxXPos+1
.912a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.912d	8d e6 06	sta $06e6			sta 	gxYPos
.9130	60		rts				rts
.06e2					gxCommandID:
>06e2							.fill 	1
.06e3					gxFillSolid:
>06e3							.fill 	1
.06e4					gxXPos:
>06e4							.fill 	2
.06e6					gxYPos:
>06e6							.fill 	1
.06e7					gxHandler:
>06e7							.fill 	2
.06e9					gxDrawScale:
>06e9							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9131					BitmapCtrl:
.9131	b1 30		lda ($30),y			lda 	(codePtr),y
.9133	c8		iny				iny
.9134	a2 01		ldx #$01			ldx 	#1
.9136	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9138	f0 11		beq $914b			beq 	BitmapSwitch
.913a	ca		dex				dex
.913b	c9 be		cmp #$be			cmp 	#KWD_OFF
.913d	f0 0c		beq $914b			beq 	BitmapSwitch
.913f	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get the colour
.9142	5a		phy				phy
.9143	aa		tax				tax
.9144	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.9146	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9149	7a		ply				ply
.914a	60		rts				rts
.914b					BitmapSwitch:
.914b	5a		phy				phy
.914c	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.914e	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.9150	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9153	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.9155	a0 00		ldy #$00			ldy 	#0
.9157	a2 ff		ldx #$ff			ldx 	#$FF
.9159	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.915c	9c e3 06	stz $06e3			stz 	gxFillSolid
.915f	9c e4 06	stz $06e4			stz 	gxXPos
.9162	9c e5 06	stz $06e5			stz 	gxXPos+1
.9165	9c e6 06	stz $06e6			stz 	gxYPos
.9168	9c e9 06	stz $06e9			stz 	gxDrawScale
.916b	a9 20		lda #$20			lda 	#GCMD_Move 						; home cursor
.916d	a2 00		ldx #$00			ldx 	#0
.916f	a0 00		ldy #$00			ldy 	#0
.9171	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9174	7a		ply				ply
.9175	60		rts				rts
.9176					SpritesCtrl:
.9176	b1 30		lda ($30),y			lda 	(codePtr),y
.9178	c8		iny				iny
.9179	a2 01		ldx #$01			ldx 	#1
.917b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.917d	f0 08		beq $9187			beq 	SpriteSwitch
.917f	ca		dex				dex
.9180	c9 be		cmp #$be			cmp 	#KWD_OFF
.9182	f0 03		beq $9187			beq 	SpriteSwitch
.9184	4c 31 b5	jmp $b531			jmp 	SyntaxError
.9187					SpriteSwitch:
.9187	5a		phy				phy
.9188	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.918a	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.918c	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.918f	7a		ply				ply
.9190	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9191					GfxCommand:
.9191	a2 00		ldx #$00			ldx 	#0
.9193	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; command
.9196	20 4b af	jsr $af4b			jsr 	CheckComma
.9199	e8		inx				inx
.919a	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger 		; X
.919d	20 4b af	jsr $af4b			jsr 	CheckComma
.91a0	e8		inx				inx
.91a1	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; Y
.91a4	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91a7	4a		lsr a				lsr 	a
.91a8	d0 16		bne $91c0			bne 	_GfxError
.91aa	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91ad	b0 11		bcs $91c0			bcs 	_GfxError 					; bit 7 should have been zero
.91af	5a		phy				phy 								; save pos
.91b0	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91b3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91b6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91b9	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.91bc	b0 02		bcs $91c0			bcs 	_GfxError
.91be	7a		ply				ply 								; restore pos and exit.
.91bf	60		rts				rts
.91c0					_GfxError:
.91c0	4c 36 b5	jmp $b536			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91c3					Command_GOSUB:
.91c3	a2 00		ldx #$00			ldx 	#0
.91c5	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91c8	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91ca	20 b4 a7	jsr $a7b4			jsr 	StackOpen 					; create frame
.91cd	20 f8 a7	jsr $a7f8			jsr 	STKSaveCodePosition 		; save current position
.91d0	4c e6 91	jmp $91e6			jmp 	GotoStackX
.91d3					Command_RETURN:
.91d3	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91d5	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91d7	20 e0 a7	jsr $a7e0			jsr 	StackCheckFrame
.91da	20 09 a8	jsr $a809			jsr 	STKLoadCodePosition 		; restore code position
.91dd	20 d2 a7	jsr $a7d2			jsr 	StackClose
.91e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91e1					GotoCommand:
.91e1	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91e3	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.91e6					GotoStackX:
.91e6	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91e9	48		pha				pha 								; it is slightly inefficient, just in cases.
.91ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91ed	fa		plx				plx
.91ee	20 5f a7	jsr $a75f			jsr 	MemorySearch 				; transfer to line number AX.
.91f1	90 05		bcc $91f8			bcc 	_GotoError 					; not found, off end.
.91f3	d0 03		bne $91f8			bne 	_GotoError 					; not found exactly
.91f5	4c c5 95	jmp $95c5			jmp 	RunNewLine 					; and go straight to new line code.
.91f8					_GotoError:
.91f8	a9 0d		lda #$0d		lda	#13
.91fa	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.91fd					UnaryHit:
.91fd	fa		plx				plx
.91fe	a9 36		lda #$36			lda 	#zTemp0
.9200	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9203	20 4b af	jsr $af4b			jsr 	CheckComma
.9206	e8		inx				inx
.9207	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get sprite number 1
.920a	20 43 af	jsr $af43			jsr		CheckRightBracket
.920d	ca		dex				dex 								; fix back up again.
.920e	da		phx				phx 								; save X/Y
.920f	5a		phy				phy
.9210	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9213	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9216	aa		tax				tax
.9217	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.9219	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw 				; calculate result
.921c	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.921d	7a		ply				ply 								; restore XY
.921e	fa		plx				plx
.921f	20 02 a7	jsr $a702			jsr 	NSMSetByte 					; return the hit result
.9222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9223					IfCommand:
.9223	a2 00		ldx #$00			ldx 	#0 							; If what.
.9225	20 40 a6	jsr $a640			jsr 	EvaluateNumber
.9228	b1 30		lda ($30),y			lda 	(codePtr),y
.922a	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.922c	d0 0a		bne $9238			bne 	_IFStructured
.922e	c8		iny				iny 								; consume THEN
.922f	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; is it zero
.9232	f0 01		beq $9235			beq 	_IfFail 					; if fail, go to next line
.9234	60		rts				rts 								; if THEN just continue
.9235					_IfFail:
.9235	4c 2a 96	jmp $962a			jmp 	EOLCommand
.9238					_IfStructured:
.9238	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; is it zero
.923b	d0 07		bne $9244			bne 	_IfExit 					; if not, then continue normally.
.923d	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.923f	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9241	20 20 9a	jsr $9a20			jsr 	ScanForward 				; and run from there/
.9244					_IfExit:
.9244	60		rts				rts
.9245					ElseCode:
.9245	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9247	aa		tax				tax 								; so just go to the structure exit
.9248	20 20 9a	jsr $9a20			jsr 	ScanForward
.924b	60		rts				rts
.924c					EndIf:
.924c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.924d					UnaryJoyX:
.924d	18		clc				clc
.924e	80 01		bra $9251			bra 	JoyMain
.9250					UnaryJoyY:
.9250	38		sec				sec
.9251					JoyMain:
.9251	fa		plx				plx 								; get pos
.9252	08		php				php 								; save carry (set for Y)
.9253	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9256	20 43 af	jsr $af43			jsr 	CheckRightBracket
.9259	20 2d b7	jsr $b72d			jsr 	EXTReadController 			; read the controller.
.925c	28		plp				plp
.925d	90 02		bcc $9261			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.925f	4a		lsr a				lsr 	a
.9260	4a		lsr a				lsr 	a
.9261					_JMNoShift:
.9261	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9262	b0 0a		bcs $926e			bcs 	_JMIsRight
.9264	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9265	b0 04		bcs $926b			bcs 	_JMIsLeft
.9267	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; zero result
.926a	60		rts				rts
.926b					_JMIsLeft:
.926b	4c 32 9b	jmp $9b32			jmp 	ReturnTrue
.926e					_JMIsRight:
.926e	a9 01		lda #$01			lda 	#1
.9270	20 02 a7	jsr $a702			jsr 	NSMSetByte
.9273	60		rts				rts
.9274					UnaryJoyB:
.9274	fa		plx				plx 								; get pos
.9275	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9278	20 43 af	jsr $af43			jsr 	CheckRightBracket
.927b	20 2d b7	jsr $b72d			jsr 	EXTReadController 			; read the controller.
.927e	4a		lsr a				lsr 	a
.927f	4a		lsr a				lsr 	a
.9280	4a		lsr a				lsr 	a
.9281	4a		lsr a				lsr 	a
.9282	29 01		and #$01			and 	#1
.9284	20 02 a7	jsr $a702			jsr 	NSMSetByte
.9287	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9288					LetCommand:
.9288	a2 00		ldx #$00			ldx 	#0
.928a	b1 30		lda ($30),y			lda 	(codePtr),y
.928c	c9 10		cmp #$10			cmp 	#KWD_AT
.928e	d0 16		bne $92a6			bne 	_LCStandard
.9290	c8		iny				iny 								; skip equal
.9291	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm 				; get a number
.9294	20 eb 9f	jsr $9feb			jsr 	Dereference 				; dereference it
.9297	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.929a	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.929c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.929f	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92a1	d0 10		bne $92b3			bne 	_LCMain
.92a3	4c 3b b5	jmp $b53b			jmp 	TypeError 					; was a reference before.
.92a6					_LCStandard:
.92a6	ad be 9e	lda $9ebe			lda 	PrecedenceLevel+"*"			; precedence > this
.92a9	20 d8 9e	jsr $9ed8			jsr 	EvaluateExpressionAtPrecedence
.92ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92af	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92b1	f0 0e		beq $92c1			beq 	_LetGoProc 					; it's a procedure call.
.92b3					_LCMain:
.92b3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92b5	20 53 af	jsr $af53			jsr 	CheckNextA
.92b8	e8		inx				inx 								; RHS
.92b9	20 37 a6	jsr $a637			jsr 	EvaluateValue
.92bc	ca		dex				dex
.92bd	20 c4 92	jsr $92c4			jsr 	AssignVariable
.92c0	60		rts				rts
.92c1					_LetGoProc:
.92c1	4c a0 94	jmp $94a0			jmp 	CallProcedure
.92c4					AssignVariable:
.92c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92c7	48		pha				pha 								; save a copy
.92c8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92cb	29 10		and #$10			and 	#NSBIsString
.92cd	d0 0b		bne $92da			bne 	_ASError
.92cf	68		pla				pla 								; get back
.92d0	29 10		and #$10			and 	#NSBIsString 				; check type
.92d2	d0 03		bne $92d7			bne 	_ASString
.92d4	4c 13 9f	jmp $9f13			jmp 	AssignNumber
.92d7					_ASString:
.92d7	4c 81 9f	jmp $9f81			jmp 	AssignString
.92da					_ASError:
.92da	4c 3b b5	jmp $b53b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92dd					Command_List:
.92dd	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92e0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92e3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92e6	a9 ff		lda #$ff			lda 	#$FF
.92e8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92eb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92ee	b1 30		lda ($30),y			lda 	(codePtr),y
.92f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92f2	f0 1e		beq $9312			beq 	_CLSecond
.92f4	20 70 93	jsr $9370			jsr 	CLIsDigit 					; if not digit, list all
.92f7	b0 24		bcs $931d			bcs 	_CLStart
.92f9	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.92fb	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.92fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9300	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9302	f0 0e		beq $9312			beq 	_CLSecond 					; if so go get it
.9304	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9307	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.930a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.930d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9310	80 0b		bra $931d			bra 	_CLStart
.9312					_CLSecond:
.9312	c8		iny				iny 								; consume comma
.9313	20 70 93	jsr $9370			jsr 	CLIsDigit 					; digit found
.9316	b0 05		bcs $931d			bcs 	_CLStart 					; if not, continue listing
.9318	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.931a	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger
.931d					_CLStart
.931d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.931f	85 30		sta $30				sta 	codePtr
.9321	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9323	85 31		sta $31				sta 	codePtr+1
.9325					_CLLoop:
.9325	20 2a b7	jsr $b72a			jsr 	EXTBreakCheck 				; break check
.9328	f0 30		beq $935a			beq 	_CLExit
.932a	b2 30		lda ($30)			lda 	(codePtr)
.932c	f0 2c		beq $935a			beq 	_CLExit
.932e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9330	20 5d 93	jsr $935d			jsr 	CLCompareLineNo
.9333	90 18		bcc $934d			bcc 	_CLNext
.9335	a2 07		ldx #$07			ldx 	#7
.9337	20 5d 93	jsr $935d			jsr 	CLCompareLineNo
.933a	f0 02		beq $933e			beq 	_CLDoThisOne
.933c	b0 0f		bcs $934d			bcs 	_CLNext
.933e					_CLDoThisOne:
.933e	20 25 98	jsr $9825			jsr 	ListConvertLine 			; convert line into token Buffer
.9341	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9343	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9345	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.9348	a9 0d		lda #$0d			lda 	#13 						; new line
.934a	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.934d					_CLNext:
.934d	18		clc				clc
.934e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9350	65 30		adc $30				adc 	codePtr
.9352	85 30		sta $30				sta 	codePtr
.9354	90 02		bcc $9358			bcc 	_CREExit
.9356	e6 31		inc $31				inc 	codePtr+1
.9358					_CREExit:
.9358	80 cb		bra $9325			bra 	_CLLoop
.935a					_CLExit:
.935a	4c 26 8c	jmp $8c26			jmp 	WarmStart
.935d					CLCompareLineNo:
.935d	38		sec				sec
.935e	a0 01		ldy #$01			ldy 	#1
.9360	b1 30		lda ($30),y			lda 	(codePtr),y
.9362	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9365	85 36		sta $36				sta 	zTemp0
.9367	c8		iny				iny
.9368	b1 30		lda ($30),y			lda 	(codePtr),y
.936a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.936d	05 36		ora $36				ora 	zTemp0
.936f	60		rts				rts
.9370					CLIsDigit:
.9370	b1 30		lda ($30),y			lda 	(codePtr),y
.9372	c9 30		cmp #$30			cmp 	#"0"
.9374	90 03		bcc $9379			bcc	 	_CLIDExitFalse
.9376	c9 3a		cmp #$3a			cmp 	#"9"+1
.9378	60		rts				rts
.9379					_CLIDExitFalse:
.9379	38		sec				sec
.937a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.937b					Command_LOCAL:
.937b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.937d	20 89 93	jsr $9389			jsr 	LocaliseNextTerm 			; convert term to a local.
.9380	b1 30		lda ($30),y			lda 	(codePtr),y
.9382	c8		iny				iny
.9383	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9385	f0 f4		beq $937b			beq 	Command_LOCAL
.9387	88		dey				dey 								; unpick pre-get
.9388	60		rts				rts
.9389					LocaliseNextTerm:
.9389	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm 				; evaluate the term
.938c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.938f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9391	f0 65		beq $93f8			beq		_LNTError
.9393	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9396	85 36		sta $36				sta 	zTemp0
.9398	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.939b	85 37		sta $37				sta  	zTemp0+1
.939d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93a0	29 10		and #$10			and 	#NSBIsString
.93a2	d0 22		bne $93c6			bne 	_LNTPushString
.93a4	5a		phy				phy
.93a5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93a7					_LNTPushNumLoop:
.93a7	b1 36		lda ($36),y			lda		(zTemp0),y
.93a9	20 92 a7	jsr $a792			jsr 	StackPushByte
.93ac	a9 00		lda #$00			lda 	#0
.93ae	91 36		sta ($36),y			sta 	(zTemp0),y
.93b0	c8		iny				iny
.93b1	c0 05		cpy #$05			cpy 	#5
.93b3	d0 f2		bne $93a7			bne 	_LNTPushNumLoop
.93b5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93b7	20 92 a7	jsr $a792			jsr 	StackPushByte
.93ba	a5 37		lda $37				lda 	zTemp0+1
.93bc	20 92 a7	jsr $a792			jsr 	StackPushByte
.93bf	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93c1	20 92 a7	jsr $a792			jsr 	StackPushByte
.93c4	7a		ply				ply
.93c5	60		rts				rts
.93c6					_LNTPushString:
.93c6	5a		phy				phy
.93c7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93c9	85 38		sta $38				sta 	zTemp1
.93cb	a0 01		ldy #$01			ldy 	#1
.93cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.93cf	85 39		sta $39				sta 	zTemp1+1
.93d1	a0 00		ldy #$00			ldy 	#0 							; output string
.93d3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93d5	f0 0a		beq $93e1			beq 	_LNTStringOut
.93d7					_LNTPushStrLoop:
.93d7	b1 38		lda ($38),y			lda 	(zTemp1),y
.93d9	f0 06		beq $93e1			beq 	_LNTStringOut
.93db	20 92 a7	jsr $a792			jsr 	StackPushByte
.93de	c8		iny				iny
.93df	80 f6		bra $93d7			bra 	_LNTPushStrLoop
.93e1					_LNTStringOut:
.93e1	98		tya				tya									; output length
.93e2	20 92 a7	jsr $a792			jsr 	StackPushByte
.93e5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93e8	20 92 a7	jsr $a792			jsr 	StackPushByte
.93eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93ee	20 92 a7	jsr $a792			jsr 	StackPushByte
.93f1	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.93f3	20 92 a7	jsr $a792			jsr 	StackPushByte
.93f6	7a		ply				ply
.93f7	60		rts				rts
.93f8					_LNTError:
.93f8	4c 31 b5	jmp $b531			jmp 	SyntaxError
.aeea					LocalPopValue:
.aeea	20 ab a7	jsr $a7ab			jsr 	StackPopByte
.aeed	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aeef	d0 17		bne $af08			bne 	_LPVString
.aef1	20 ab a7	jsr $a7ab			jsr 	StackPopByte 				; address
.aef4	85 37		sta $37				sta 	zTemp0+1
.aef6	20 ab a7	jsr $a7ab			jsr 	StackPopByte
.aef9	85 36		sta $36				sta 	zTemp0
.aefb	5a		phy				phy
.aefc	a0 04		ldy #$04			ldy 	#4 							; copy back
.aefe					_LPVNumberCopy:
.aefe	20 ab a7	jsr $a7ab			jsr 	StackPopByte
.af01	91 36		sta ($36),y			sta 	(zTemp0),y
.af03	88		dey				dey
.af04	10 f8		bpl $aefe			bpl 	_LPVNumberCopy
.af06	7a		ply				ply 								; and complete
.af07	60		rts				rts
.af08					_LPVString:
.af08	20 ab a7	jsr $a7ab			jsr 	StackPopByte 				; address of record => zTemp0
.af0b	85 37		sta $37				sta 	zTemp0+1
.af0d	20 ab a7	jsr $a7ab			jsr 	StackPopByte
.af10	85 36		sta $36				sta 	zTemp0
.af12	5a		phy				phy
.af13	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af15	85 38		sta $38				sta 	zTemp1
.af17	a0 01		ldy #$01			ldy 	#1
.af19	b1 36		lda ($36),y			lda 	(zTemp0),y
.af1b	85 39		sta $39				sta 	zTemp1+1
.af1d	20 ab a7	jsr $a7ab			jsr 	StackPopByte 				; # to get => y
.af20	a8		tay				tay
.af21	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af23	f0 0e		beq $af33			beq 	_LPVStringCopied
.af25	a9 00		lda #$00			lda 	#0 							; NULL on end
.af27	91 38		sta ($38),y			sta 	(zTemp1),y
.af29					_LPVStringCopy:
.af29	88		dey				dey
.af2a	30 07		bmi $af33			bmi 	_LPVStringCopied
.af2c	20 ab a7	jsr $a7ab			jsr 	StackPopByte
.af2f	91 38		sta ($38),y			sta 	(zTemp1),y
.af31	80 f6		bra $af29			bra 	_LPVStringCopy
.af33					_LPVStringCopied:
.af33	fa		plx				plx
.af34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.93fb					NewCommand:
.93fb	20 3d a7	jsr $a73d			jsr 	MemoryNew
.93fe	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9401	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear everything.
.9404	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.9405					PaletteCommand:
.9405	a2 00		ldx #$00			ldx 	#0
.9407	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; colour
.940a	20 4b af	jsr $af4b			jsr 	CheckComma
.940d	e8		inx				inx
.940e	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger 		; r
.9411	20 4b af	jsr $af4b			jsr 	CheckComma
.9414	e8		inx				inx
.9415	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; g
.9418	20 4b af	jsr $af4b			jsr 	CheckComma
.941b	e8		inx				inx
.941c	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; b
.941f	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.9422	85 36		sta $36				sta 	zTemp0
.9424	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.9426	85 37		sta $37				sta 	zTemp0+1
.9428	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.942a	26 37		rol $37				rol	 	zTemp0+1
.942c	06 36		asl $36				asl 	zTemp0
.942e	26 37		rol $37				rol	 	zTemp0+1
.9430	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.9432	85 01		sta $01				sta 	1
.9434	5a		phy				phy
.9435	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.9438	92 36		sta ($36)			sta 	(zTemp0)
.943a	a0 01		ldy #$01			ldy 	#1
.943c	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.943f	91 36		sta ($36),y			sta 	(zTemp0),y
.9441	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9444	c8		iny				iny
.9445	91 36		sta ($36),y			sta 	(zTemp0),y
.9447	7a		ply				ply
.9448	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9449					Command_Print:
.9449	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.944a					_CPLoop:
.944a	08		php				php 								; save last action flag
.944b	b1 30		lda ($30),y			lda 	(codePtr),y
.944d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.944f	f0 46		beq $9497			beq 	_CPExit
.9451	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9453	f0 42		beq $9497			beq 	_CPExit
.9455	68		pla				pla 								; throw last action flag
.9456	b1 30		lda ($30),y			lda 	(codePtr),y
.9458	c8		iny				iny
.9459	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.945b	f0 37		beq $9494			beq 	_CPContinueWithSameLine
.945d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.945f	f0 2e		beq $948f			beq 	_CPTab
.9461	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9463	f0 26		beq $948b			beq 	_CPNewLine
.9465	88		dey				dey 								; undo the get.
.9466	a2 00		ldx #$00			ldx 	#0
.9468	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get a value into slot 0
.946b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.946e	29 10		and #$10			and 	#NSBIsString
.9470	f0 0b		beq $947d			beq 	_CPNumber
.9472	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9475	ad 08 04	lda $0408			lda 	NSMantissa0
.9478	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.947b	80 cc		bra $9449			bra 	Command_Print 				; loop round clearing carry so NL if end
.947d					_CPNumber:
.947d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.947f	20 0d a5	jsr $a50d			jsr 	ConvertNumberToString 		; convert to string
.9482	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9484	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9486	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.9489	80 be		bra $9449			bra 	Command_Print 				; loop round clearing carry so NL if end
.948b					_CPNewLine:
.948b	a9 0d		lda #$0d			lda 	#13
.948d	80 02		bra $9491			bra 	_CPPrintChar
.948f					_CPTab:
.948f	a9 09		lda #$09			lda 	#9 							; print TAB
.9491					_CPPrintChar:
.9491	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.9494					_CPContinueWithSameLine:
.9494	38		sec				sec 								; loop round with carry set, which
.9495	80 b3		bra $944a			bra 	_CPLoop 					; will inhibit final CR
.9497					_CPExit:
.9497	28		plp				plp 								; get last action flag
.9498	b0 05		bcs $949f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.949a	a9 0d		lda #$0d			lda 	#13 						; print new line
.949c	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.949f					_CPExit2:
.949f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94a0					CallProcedure:
.94a0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94a2	b1 30		lda ($30),y			lda 	(codePtr),y
.94a4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94a6	f0 0c		beq $94b4			beq 	_CPEndParam
.94a8					_CPParamLoop:
.94a8	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get parameter onto stack
.94ab	e8		inx				inx 								; bump next stack
.94ac	b1 30		lda ($30),y			lda 	(codePtr),y
.94ae	c8		iny				iny
.94af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94b1	f0 f5		beq $94a8			beq 	_CPParamLoop
.94b3	88		dey				dey 								; unpick.
.94b4					_CPEndParam:
.94b4	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94b7	c8		iny				iny									; skip right bracket
.94b8	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94ba	20 b4 a7	jsr $a7b4			jsr 	StackOpen
.94bd	20 f8 a7	jsr $a7f8			jsr 	STKSaveCodePosition 		; save loop position
.94c0	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94c3	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94c5	ad 10 04	lda $0410			lda 	NSMantissa1
.94c8	85 37		sta $37				sta 	zTemp0+1
.94ca	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94cc	b2 36		lda ($36)			lda 	(zTemp0)
.94ce	85 30		sta $30				sta 	safePtr
.94d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d2	85 31		sta $31				sta 	safePtr+1
.94d4	c8		iny				iny
.94d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d7	85 32		sta $32				sta 	safePtr+2
.94d9	c8		iny				iny
.94da	b1 36		lda ($36),y			lda 	(zTemp0),y
.94dc	85 33		sta $33				sta 	safePtr+3
.94de	c8		iny				iny 								; get Y offset -> Y
.94df	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e1	a8		tay				tay
.94e2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94e4	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94e7	f0 13		beq $94fc			beq 	_ParamExit 					; if so, exit.
.94e9					_ParamExtract:
.94e9	ca		dex				dex 								; put a local term on the level before
.94ea	20 89 93	jsr $9389			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.94ed	20 c4 92	jsr $92c4			jsr 	AssignVariable 				; assign stacked value to the variable.
.94f0	e8		inx				inx 								; advance to next parameter to do.
.94f1	e8		inx				inx
.94f2	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.94f5	f0 05		beq $94fc			beq 	_ParamExit
.94f7	20 4b af	jsr $af4b			jsr 	CheckComma 					; comma seperating parameters
.94fa	80 ed		bra $94e9			bra 	_ParamExtract
.94fc					_ParamExit:
.94fc	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; check )
.94ff	60		rts				rts 								; and continue from here
.af35					Command_ENDPROC:
.af35	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af37	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af39	20 e0 a7	jsr $a7e0			jsr 	StackCheckFrame
.af3c	20 09 a8	jsr $a809			jsr 	STKLoadCodePosition 		; restore code position
.af3f	20 d2 a7	jsr $a7d2			jsr 	StackClose
.af42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9500					Command_Read:
.9500	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9502	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm
.9505	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9508	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.950a	f0 4a		beq $9556			beq 	_CRSyntax 					; check reference (bit 0)
.950c	20 9f 95	jsr $959f			jsr 	SwapDataCodePtrs 			; swap code and data
.950f	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9512	d0 20		bne $9534			bne 	_CRContinueData
.9514					_CRKeepSearching:
.9514	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.9516	aa		tax				tax
.9517	20 20 9a	jsr $9a20			jsr 	ScanForward
.951a	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.951c	f0 16		beq $9534			beq 	_CRHaveData 				; found it
.951e	18		clc				clc
.951f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9521	65 30		adc $30				adc 	codePtr
.9523	85 30		sta $30				sta 	codePtr
.9525	90 02		bcc $9529			bcc 	_CREExit
.9527	e6 31		inc $31				inc 	codePtr+1
.9529					_CREExit:
.9529	a0 03		ldy #$03			ldy 	#3 							; start of line.
.952b	b2 30		lda ($30)			lda 	(codePtr)
.952d	d0 e5		bne $9514			bne 	_CRKeepSearching
.952f	a9 0b		lda #$0b		lda	#11
.9531	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.9534					_CRHaveData:
.9534					_CRContinueData:
.9534	a2 01		ldx #$01			ldx 	#1
.9536	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9539	ca		dex				dex
.953a	20 c4 92	jsr $92c4			jsr		AssignVariable 				; do the assignment
.953d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9540	b1 30		lda ($30),y			lda 	(codePtr),y
.9542	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9544	d0 04		bne $954a			bne 	_CRSwapBack
.9546	c8		iny				iny 								; consume comma
.9547	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.954a					_CRSwapBack:
.954a	20 9f 95	jsr $959f			jsr 	SwapDataCodePtrs			; swap them back.
.954d	b1 30		lda ($30),y			lda 	(codePtr),y
.954f	c8		iny				iny
.9550	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9552	f0 ac		beq $9500			beq 	Command_Read 				; if so go round again.
.9554	88		dey				dey 								; unpick get.
.9555	60		rts				rts
.9556					_CRSyntax:
.9556	4c 31 b5	jmp $b531			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9559					RemCommand:
.9559	b1 30		lda ($30),y			lda 	(codePtr),y
.955b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.955d	d0 06		bne $9565			bne 	_RMExit
.955f	c8		iny				iny
.9560	98		tya				tya
.9561	38		sec				sec
.9562	71 30		adc ($30),y			adc 	(codePtr),y
.9564	a8		tay				tay
.9565					_RMExit:
.9565	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9566					Command_REPEAT:
.9566	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9568	20 b4 a7	jsr $a7b4			jsr 	StackOpen
.956b	20 f8 a7	jsr $a7f8			jsr 	STKSaveCodePosition 		; save loop position
.956e	60		rts				rts
.956f					Command_UNTIL:
.956f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9571	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9573	20 e0 a7	jsr $a7e0			jsr 	StackCheckFrame
.9576	a2 00		ldx #$00			ldx 	#0
.9578	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; work out the number
.957b	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; check if zero
.957e	f0 04		beq $9584			beq 	_CULoopBack 				; if so keep looping
.9580	20 d2 a7	jsr $a7d2			jsr 	StackClose		 			; return
.9583	60		rts				rts
.9584					_CULoopBack:
.9584	20 09 a8	jsr $a809			jsr 	STKLoadCodePosition 		; loop back
.9587	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9588					Command_Restore:
.9588	20 9f 95	jsr $959f			jsr 	SwapDataCodePtrs 			; swap code and data
.958b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.958d	85 30		sta $30				sta 	codePtr
.958f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9591	85 31		sta $31				sta 	codePtr+1
.9593	20 9f 95	jsr $959f			jsr 	SwapDataCodePtrs 			; put them back
.9596	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9598	8d 9b 04	sta $049b			sta 	dataPointer+4
.959b	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.959e	60		rts				rts
.959f					SwapDataCodePtrs:
.959f	da		phx				phx
.95a0	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95a2					_SDCPLoop:
.95a2	b5 30		lda $30,x			lda 	safePtr,x
.95a4	48		pha				pha
.95a5	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95a8	95 30		sta $30,x			sta 	safePtr,x
.95aa	68		pla				pla
.95ab	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95ae	ca		dex				dex
.95af	10 f1		bpl $95a2			bpl 	_SDCPLoop
.95b1	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95b4	8c 9b 04	sty $049b			sty 	dataPointer+4
.95b7	a8		tay				tay
.95b8	fa		plx				plx
.95b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95ba					CommandRUN:
.95ba	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95bd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95bf	85 30		sta $30				sta 	codePtr
.95c1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95c3	85 31		sta $31				sta 	codePtr+1
.95c5					RUNNewLine:
.95c5	b2 30		lda ($30)			lda 	(codePtr)
.95c7	f0 5e		beq $9627			beq 	CRNoProgram         		; no then END.
.95c9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95cb	9a		txs				txs
.95cc					RUNCodePointerLine:
.95cc	a0 02		ldy #$02			ldy 	#2 							; start of program
.95ce					_CRIncMainLoop:
.95ce	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95d1	d0 05		bne $95d8			bne 	_CRNoBreakCheck
.95d3	20 2a b7	jsr $b72a			jsr 	EXTBreakCheck 				; break check
.95d6	f0 4a		beq $9622			beq 	_CRBreak
.95d8					_CRNoBreakCheck:
.95d8	c8		iny				iny
.95d9					_CRMainLoop:
.95d9	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95dc	b1 30		lda ($30),y			lda 	(codePtr),y
.95de	10 10		bpl $95f0			bpl 	_CRNotKeyword
.95e0	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95e2	b0 04		bcs $95e8			bcs 	_CRIsKeyword
.95e4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95e6	b0 34		bcs $961c			bcs		_CRSyntaxError
.95e8					_CRIsKeyword:
.95e8	c8		iny				iny 								; consume command
.95e9	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95ea	aa		tax				tax 								; put in X for vector jump
.95eb	20 1f 96	jsr $961f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.95ee	80 e9		bra $95d9			bra 	_CRMainLoop 				; and loop round
.95f0					_CRNotKeyword:
.95f0	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.95f2	f0 da		beq $95ce			beq 	_CRIncMainLoop
.95f4	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.95f6	90 05		bcc $95fd			bcc 	_CRNotVariable
.95f8					_CRGoLet:
.95f8	20 88 92	jsr $9288			jsr 	LetCommand
.95fb	80 dc		bra $95d9			bra 	_CRMainLoop
.95fd					_CRNotVariable:
.95fd	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.95ff	f0 f7		beq $95f8			beq 	_CRGoLet
.9601	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9603	f0 f3		beq $95f8			beq 	_CRGoLet
.9605	c9 21		cmp #$21			cmp 	#KWD_PLING
.9607	f0 ef		beq $95f8			beq 	_CRGoLet
.9609	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.960b	f0 09		beq $9616			beq 	_CRGoRem
.960d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.960f	d0 0b		bne $961c			bne 	_CRSyntaxError
.9611	20 5f 8b	jsr $8b5f			jsr 	LabelHere
.9614	80 c3		bra $95d9			bra 	_CRMainLoop
.9616					_CRGoRem:
.9616	c8		iny				iny
.9617	20 59 95	jsr $9559			jsr 	RemCommand
.961a	80 bd		bra $95d9			bra 	_CRMainLoop
.961c					_CRSyntaxError:
.961c	4c 31 b5	jmp $b531			jmp 	SyntaxError
.961f					_CRCallVector0:
.961f	7c ca 96	jmp ($96ca,x)			jmp 	(VectorSet0,x)
.9622					_CRBreak:
.9622	a9 01		lda #$01		lda	#1
.9624	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.9627					CRNoProgram:
.9627	4c e2 8d	jmp $8de2			jmp 	EndCommand
.962a					EOLCommand:
.962a	18		clc				clc
.962b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.962d	65 30		adc $30				adc 	codePtr
.962f	85 30		sta $30				sta 	codePtr
.9631	90 02		bcc $9635			bcc 	_CREExit
.9633	e6 31		inc $31				inc 	codePtr+1
.9635					_CREExit:
.9635	80 8e		bra $95c5			bra 	RunNewLine
.9637					Shift1Command:
.9637	b1 30		lda ($30),y			lda 	(codePtr),y
.9639	c8		iny				iny
.963a	0a		asl a				asl 	a
.963b	aa		tax				tax
.963c	7c 62 97	jmp ($9762,x)			jmp 	(VectorSet1,x)
.963f					Shift2Command:
.963f	b1 30		lda ($30),y			lda 	(codePtr),y
.9641	c8		iny				iny
.9642	0a		asl a				asl 	a
.9643	aa		tax				tax
.9644	7c 7c 97	jmp ($977c,x)			jmp 	(VectorSet2,x)
.9647					Unused1:
.9647					Unused2:
.9647					Unused3:
.9647					Unused4:
.9647	4c 31 b5	jmp $b531			jmp 	SyntaxError
>964a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.964a					VectorSetPunc:
>964a	6f 9c					.word	ShiftLeft                        ; $00 <<
>964c	69 9b					.word	BinaryCompareLessEqual           ; $01 <=
>964e	5f 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9650	31 b5					.word	SyntaxError                      ; $03 !!3
>9652	31 b5					.word	SyntaxError                      ; $04 ><
>9654	73 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>9656	72 9c					.word	ShiftRight                       ; $06 >>
>9658	31 b5					.word	SyntaxError                      ; $07 !!7
>965a	31 b5					.word	SyntaxError                      ; $08 !!8
>965c	31 b5					.word	SyntaxError                      ; $09 !!9
>965e	31 b5					.word	SyntaxError                      ; $0a !!10
>9660	31 b5					.word	SyntaxError                      ; $0b !!11
>9662	31 b5					.word	SyntaxError                      ; $0c !!12
>9664	31 b5					.word	SyntaxError                      ; $0d !!13
>9666	31 b5					.word	SyntaxError                      ; $0e !!14
>9668	31 b5					.word	SyntaxError                      ; $0f !!15
>966a	31 b5					.word	SyntaxError                      ; $10 @
>966c	31 b5					.word	SyntaxError                      ; $11 !!17
>966e	31 b5					.word	SyntaxError                      ; $12 !!18
>9670	31 b5					.word	SyntaxError                      ; $13 [
>9672	5c af					.word	IntegerDivide                    ; $14 \
>9674	31 b5					.word	SyntaxError                      ; $15 ]
>9676	00 9e					.word	EorInteger                       ; $16 ^
>9678	31 b5					.word	SyntaxError                      ; $17 _
>967a	31 b5					.word	SyntaxError                      ; $18 `
>967c	31 b5					.word	SyntaxError                      ; $19 !!25
>967e	31 b5					.word	SyntaxError                      ; $1a !!26
>9680	31 b5					.word	SyntaxError                      ; $1b {
>9682	ba 9d					.word	OraInteger                       ; $1c |
>9684	31 b5					.word	SyntaxError                      ; $1d }
>9686	31 b5					.word	SyntaxError                      ; $1e ~
>9688	31 b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>968a	31 b5					.word	SyntaxError                      ; $20
>968c	46 9e					.word	WordIndirect                     ; $21 !
>968e	31 b5					.word	SyntaxError                      ; $22 "
>9690	31 b5					.word	SyntaxError                      ; $23 #
>9692	31 b5					.word	SyntaxError                      ; $24 $
>9694	a9 af					.word	IntegerModulus                   ; $25 %
>9696	74 9d					.word	AndInteger                       ; $26 &
>9698	31 b5					.word	SyntaxError                      ; $27 '
>969a	31 b5					.word	SyntaxError                      ; $28 (
>969c	31 b5					.word	SyntaxError                      ; $29 )
>969e	1e b0					.word	MulInteger                       ; $2a *
>96a0	06 9d					.word	AddInteger                       ; $2b +
>96a2	31 b5					.word	SyntaxError                      ; $2c ,
>96a4	49 9d					.word	SubInteger                       ; $2d -
>96a6	31 b5					.word	SyntaxError                      ; $2e .
>96a8	bd b1					.word	FDivideCommand                   ; $2f /
>96aa	31 b5					.word	SyntaxError                      ; $30 0
>96ac	31 b5					.word	SyntaxError                      ; $31 1
>96ae	31 b5					.word	SyntaxError                      ; $32 2
>96b0	31 b5					.word	SyntaxError                      ; $33 3
>96b2	31 b5					.word	SyntaxError                      ; $34 4
>96b4	31 b5					.word	SyntaxError                      ; $35 5
>96b6	31 b5					.word	SyntaxError                      ; $36 6
>96b8	31 b5					.word	SyntaxError                      ; $37 7
>96ba	31 b5					.word	SyntaxError                      ; $38 8
>96bc	31 b5					.word	SyntaxError                      ; $39 9
>96be	31 b5					.word	SyntaxError                      ; $3a :
>96c0	31 b5					.word	SyntaxError                      ; $3b ;
>96c2	4b 9b					.word	BinaryCompareLess                ; $3c <
>96c4	41 9b					.word	BinaryCompareEqual               ; $3d =
>96c6	55 9b					.word	BinaryCompareGreater             ; $3e >
>96c8	6d 9e					.word	ByteIndirect                     ; $3f ?
.96ca					VectorSet0:
>96ca	2a 96					.word	EOLCommand                       ; $80 !0:EOF
>96cc	37 96					.word	Shift1Command                    ; $81 !1:SH1
>96ce	3f 96					.word	Shift2Command                    ; $82 !2:SH2
>96d0	03 b3					.word	AbsUnary                         ; $83 ABS(
>96d2	3d a3					.word	AllocUnary                       ; $84 ALLOC(
>96d4	13 b3					.word	AscUnary                         ; $85 ASC(
>96d6	be a4					.word	ChrUnary                         ; $86 CHR$(
>96d8	e5 8d					.word	UnaryEvent                       ; $87 EVENT(
>96da	3d 9b					.word	UnaryFalse                       ; $88 FALSE
>96dc	20 b3					.word	FracUnary                        ; $89 FRAC(
>96de	fd 91					.word	UnaryHit                         ; $8a HIT(
>96e0	36 b3					.word	IntUnary                         ; $8b INT(
>96e2	8c b3					.word	IsValUnary                       ; $8c ISVAL(
>96e4	74 92					.word	UnaryJoyB                        ; $8d JOYB(
>96e6	4d 92					.word	UnaryJoyX                        ; $8e JOYX(
>96e8	50 92					.word	UnaryJoyY                        ; $8f JOYY(
>96ea	98 a5					.word	Unary_Left                       ; $90 LEFT$(
>96ec	48 b3					.word	LenUnary                         ; $91 LEN(
>96ee	b1 a3					.word	Unary_Max                        ; $92 MAX(
>96f0	c2 a5					.word	Unary_Mid                        ; $93 MID$(
>96f2	ad a3					.word	Unary_Min                        ; $94 MIN(
>96f4	08 a4					.word	Unary_Not                        ; $95 NOT(
>96f6	1e a4					.word	Unary_Random                     ; $96 RANDOM(
>96f8	a8 a5					.word	Unary_Right                      ; $97 RIGHT$(
>96fa	3d a4					.word	Unary_Rnd                        ; $98 RND(
>96fc	62 b3					.word	SgnUnary                         ; $99 SGN(
>96fe	d0 a4					.word	SpcUnary                         ; $9a SPC(
>9700	eb a4					.word	Unary_Str                        ; $9b STR$(
>9702	09 98					.word	UnaryTimer                       ; $9c TIMER(
>9704	31 9b					.word	UnaryTrue                        ; $9d TRUE
>9706	82 b3					.word	ValUnary                         ; $9e VAL(
>9708	4e 8e					.word	ForCommand                       ; $9f FOR
>970a	23 92					.word	IfCommand                        ; $a0 IF
>970c	47 96					.word	Unused1                          ; $a1 PROC
>970e	66 95					.word	Command_REPEAT                   ; $a2 REPEAT
>9710	96 9a					.word	Command_WHILE                    ; $a3 WHILE
>9712	4c 92					.word	EndIf                            ; $a4 ENDIF
>9714	35 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>9716	08 8f					.word	NextCommand                      ; $a6 NEXT
>9718	47 96					.word	Unused4                          ; $a7 THEN
>971a	6f 95					.word	Command_UNTIL                    ; $a8 UNTIL
>971c	b7 9a					.word	Command_WEND                     ; $a9 WEND
>971e	31 b5					.word	SyntaxError                      ; $aa BY
>9720	85 8c					.word	CallCommand                      ; $ab CALL
>9722	65 8f					.word	CircleCommand                    ; $ac CIRCLE
>9724	bf 8c					.word	ClearCommand                     ; $ad CLEAR
>9726	17 8d					.word	ClearScreen                      ; $ae CLS
>9728	31 b5					.word	SyntaxError                      ; $af COLOR
>972a	31 b5					.word	SyntaxError                      ; $b0 COLOUR
>972c	1d 8d					.word	Command_Data                     ; $b1 DATA
>972e	25 8d					.word	DimCommand                       ; $b2 DIM
>9730	47 96					.word	Unused3                          ; $b3 DOWNTO
>9732	45 92					.word	ElseCode                         ; $b4 ELSE
>9734	31 b5					.word	SyntaxError                      ; $b5 FROM
>9736	91 91					.word	GfxCommand                       ; $b6 GFX
>9738	c3 91					.word	Command_GOSUB                    ; $b7 GOSUB
>973a	e1 91					.word	GotoCommand                      ; $b8 GOTO
>973c	31 b5					.word	SyntaxError                      ; $b9 HERE
>973e	8f 8f					.word	ImageCommand                     ; $ba IMAGE
>9740	88 92					.word	LetCommand                       ; $bb LET
>9742	e4 8f					.word	LineCommand                      ; $bc LINE
>9744	7b 93					.word	Command_LOCAL                    ; $bd LOCAL
>9746	31 b5					.word	SyntaxError                      ; $be OFF
>9748	31 b5					.word	SyntaxError                      ; $bf ON
>974a	31 b5					.word	SyntaxError                      ; $c0 OUTLINE
>974c	05 94					.word	PaletteCommand                   ; $c1 PALETTE
>974e	dd 8f					.word	PlotCommand                      ; $c2 PLOT
>9750	49 94					.word	Command_Print                    ; $c3 PRINT
>9752	00 95					.word	Command_Read                     ; $c4 READ
>9754	61 8f					.word	RectangleCommand                 ; $c5 RECT
>9756	59 95					.word	RemCommand                       ; $c6 REM
>9758	d3 91					.word	Command_RETURN                   ; $c7 RETURN
>975a	31 b5					.word	SyntaxError                      ; $c8 SOLID
>975c	70 8f					.word	SpriteCommand                    ; $c9 SPRITE
>975e	ac 8f					.word	TextCommand                      ; $ca TEXT
>9760	47 96					.word	Unused2                          ; $cb TO
.9762					VectorSet1:
>9762	31 b5					.word	SyntaxError                      ; $80 !0:EOF
>9764	31 b5					.word	SyntaxError                      ; $81 !1:SH1
>9766	31 b5					.word	SyntaxError                      ; $82 !2:SH2
>9768	56 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>976a	75 8c					.word	AssertCommand                    ; $84 ASSERT
>976c	31 91					.word	BitmapCtrl                       ; $85 BITMAP
>976e	e2 8d					.word	EndCommand                       ; $86 END
>9770	dd 92					.word	Command_List                     ; $87 LIST
>9772	fb 93					.word	NewCommand                       ; $88 NEW
>9774	88 95					.word	Command_Restore                  ; $89 RESTORE
>9776	ba 95					.word	CommandRUN                       ; $8a RUN
>9778	76 91					.word	SpritesCtrl                      ; $8b SPRITES
>977a	04 98					.word	StopCommand                      ; $8c STOP
.977c					VectorSet2:
>977c	31 b5					.word	SyntaxError                      ; $80 !0:EOF
>977e	31 b5					.word	SyntaxError                      ; $81 !1:SH1
>9780	31 b5					.word	SyntaxError                      ; $82 !2:SH2
>9782	f0 b3					.word	Assemble_adc                     ; $83 ADC
>9784	e8 b3					.word	Assemble_and                     ; $84 AND
>9786	04 b4					.word	Assemble_asl                     ; $85 ASL
>9788	6e b4					.word	Assemble_bcc                     ; $86 BCC
>978a	72 b4					.word	Assemble_bcs                     ; $87 BCS
>978c	7a b4					.word	Assemble_beq                     ; $88 BEQ
>978e	31 b4					.word	Assemble_bit                     ; $89 BIT
>9790	62 b4					.word	Assemble_bmi                     ; $8a BMI
>9792	76 b4					.word	Assemble_bne                     ; $8b BNE
>9794	5e b4					.word	Assemble_bpl                     ; $8c BPL
>9796	7e b4					.word	Assemble_bra                     ; $8d BRA
>9798	82 b4					.word	Assemble_brk                     ; $8e BRK
>979a	66 b4					.word	Assemble_bvc                     ; $8f BVC
>979c	6a b4					.word	Assemble_bvs                     ; $90 BVS
>979e	8a b4					.word	Assemble_clc                     ; $91 CLC
>97a0	de b4					.word	Assemble_cld                     ; $92 CLD
>97a2	9e b4					.word	Assemble_cli                     ; $93 CLI
>97a4	ce b4					.word	Assemble_clv                     ; $94 CLV
>97a6	fc b3					.word	Assemble_cmp                     ; $95 CMP
>97a8	45 b4					.word	Assemble_cpx                     ; $96 CPX
>97aa	40 b4					.word	Assemble_cpy                     ; $97 CPY
>97ac	22 b4					.word	Assemble_dec                     ; $98 DEC
>97ae	da b4					.word	Assemble_dex                     ; $99 DEX
>97b0	b6 b4					.word	Assemble_dey                     ; $9a DEY
>97b2	ec b3					.word	Assemble_eor                     ; $9b EOR
>97b4	27 b4					.word	Assemble_inc                     ; $9c INC
>97b6	ea b4					.word	Assemble_inx                     ; $9d INX
>97b8	d6 b4					.word	Assemble_iny                     ; $9e INY
>97ba	59 b4					.word	Assemble_jmp                     ; $9f JMP
>97bc	54 b4					.word	Assemble_jsr                     ; $a0 JSR
>97be	f8 b3					.word	Assemble_lda                     ; $a1 LDA
>97c0	1d b4					.word	Assemble_ldx                     ; $a2 LDX
>97c2	3b b4					.word	Assemble_ldy                     ; $a3 LDY
>97c4	0e b4					.word	Assemble_lsr                     ; $a4 LSR
>97c6	ee b4					.word	Assemble_nop                     ; $a5 NOP
>97c8	e4 b3					.word	Assemble_ora                     ; $a6 ORA
>97ca	9a b4					.word	Assemble_pha                     ; $a7 PHA
>97cc	86 b4					.word	Assemble_php                     ; $a8 PHP
>97ce	e2 b4					.word	Assemble_phx                     ; $a9 PHX
>97d0	a2 b4					.word	Assemble_phy                     ; $aa PHY
>97d2	aa b4					.word	Assemble_pla                     ; $ab PLA
>97d4	8e b4					.word	Assemble_plp                     ; $ac PLP
>97d6	f6 b4					.word	Assemble_plx                     ; $ad PLX
>97d8	b2 b4					.word	Assemble_ply                     ; $ae PLY
>97da	09 b4					.word	Assemble_rol                     ; $af ROL
>97dc	13 b4					.word	Assemble_ror                     ; $b0 ROR
>97de	96 b4					.word	Assemble_rti                     ; $b1 RTI
>97e0	a6 b4					.word	Assemble_rts                     ; $b2 RTS
>97e2	00 b4					.word	Assemble_sbc                     ; $b3 SBC
>97e4	92 b4					.word	Assemble_sec                     ; $b4 SEC
>97e6	f2 b4					.word	Assemble_sed                     ; $b5 SED
>97e8	ae b4					.word	Assemble_sei                     ; $b6 SEI
>97ea	f4 b3					.word	Assemble_sta                     ; $b7 STA
>97ec	e6 b4					.word	Assemble_stp                     ; $b8 STP
>97ee	18 b4					.word	Assemble_stx                     ; $b9 STX
>97f0	36 b4					.word	Assemble_sty                     ; $ba STY
>97f2	2c b4					.word	Assemble_stz                     ; $bb STZ
>97f4	ca b4					.word	Assemble_tax                     ; $bc TAX
>97f6	c6 b4					.word	Assemble_tay                     ; $bd TAY
>97f8	4f b4					.word	Assemble_trb                     ; $be TRB
>97fa	4a b4					.word	Assemble_tsb                     ; $bf TSB
>97fc	d2 b4					.word	Assemble_tsx                     ; $c0 TSX
>97fe	ba b4					.word	Assemble_txa                     ; $c1 TXA
>9800	c2 b4					.word	Assemble_txs                     ; $c2 TXS
>9802	be b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9804					StopCommand:
.9804	a9 08		lda #$08		lda	#8
.9806	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.9809					UnaryTimer:
.9809	fa		plx				plx
.980a	20 43 af	jsr $af43			jsr 	CheckRightBracket
.980d					TimerToStackX:
.980d	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; zero result
.9810	64 01		stz $01				stz 	1 							; access I/O
.9812	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9815	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9818	ad 5a d6	lda $d65a			lda 	$D65A
.981b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.981e	ad 5b d6	lda $d65b			lda 	$D65B
.9821	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9824	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9825					ListConvertLine:
.9825	9c 9d 04	stz $049d			stz 	tbOffset
.9828	9c aa 04	stz $04aa			stz 	tokenBuffer
.982b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.982d	b1 30		lda ($30),y			lda 	(codePtr),y
.982f	aa		tax				tax
.9830	88		dey				dey
.9831	b1 30		lda ($30),y			lda 	(codePtr),y
.9833	20 9f b0	jsr $b09f			jsr 	ConvertInt16
.9836	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9838	86 37		stx $37				stx 	zTemp0+1
.983a	a0 00		ldy #$00			ldy 	#0
.983c					_LCCopyNumber:
.983c	b1 36		lda ($36),y			lda 	(zTemp0),y
.983e	20 6a 99	jsr $996a			jsr 	LCLWrite
.9841	c8		iny				iny
.9842	b1 36		lda ($36),y			lda 	(zTemp0),y
.9844	d0 f6		bne $983c			bne 	_LCCopyNumber
.9846	20 83 9a	jsr $9a83			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9849	48		pha				pha 								; save on stack
.984a	10 0c		bpl $9858			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.984c	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.984d	6d a6 04	adc $04a6			adc 	listIndent
.9850	8d a6 04	sta $04a6			sta 	listIndent
.9853	10 03		bpl $9858			bpl 	_LCNoAdjust
.9855	9c a6 04	stz $04a6			stz 	listIndent
.9858					_LCNoAdjust:
.9858	18		clc				clc		 							; work out actual indent.
.9859	ad a6 04	lda $04a6			lda 	listIndent
.985c	0a		asl a				asl 	a
.985d	69 06		adc #$06			adc 	#6
.985f	85 36		sta $36				sta 	zTemp0
.9861					_LCPadOut:
.9861	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9863	20 6a 99	jsr $996a			jsr 	LCLWrite
.9866	ad 9d 04	lda $049d			lda 	tbOffset
.9869	c5 36		cmp $36				cmp 	zTemp0
.986b	d0 f4		bne $9861			bne 	_LCPadOut
.986d	a0 03		ldy #$03			ldy 	#3 							; start position.
.986f					_LCMainLoop:
.986f	b1 30		lda ($30),y			lda 	(codePtr),y
.9871	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9873	f0 17		beq $988c			beq 	_LCExit
.9875	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9877	90 1e		bcc $9897			bcc 	_LCDoubles
.9879	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.987b	90 2a		bcc $98a7			bcc 	_LCShiftPunc
.987d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.987f	90 35		bcc $98b6			bcc 	_LCPunctuation
.9881	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9883	90 3e		bcc $98c3			bcc 	_LCIdentifiers
.9885	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9887	90 5a		bcc $98e3			bcc 	_LCTokens
.9889	4c 3e 99	jmp $993e			jmp 	_LCData 					; 254-5 are data objects
.988c					_LCExit:
.988c	68		pla				pla 								; get old indent adjust
.988d	30 07		bmi $9896			bmi 	_LCExit2
.988f	18		clc				clc 								; add to indent if +ve
.9890	6d a6 04	adc $04a6			adc 	listIndent
.9893	8d a6 04	sta $04a6			sta 	listIndent
.9896					_LCExit2:
.9896	60		rts				rts
.9897					_LCDoubles:
.9897	48		pha				pha
.9898	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9899	29 02		and #$02			and 	#2
.989b	09 3c		ora #$3c			ora 	#60 						; make < >
.989d	20 6a 99	jsr $996a			jsr 	LCLWrite
.98a0	68		pla				pla 								; restore, do lower bit
.98a1	29 03		and #$03			and 	#3
.98a3	09 3c		ora #$3c			ora 	#60
.98a5	80 0f		bra $98b6			bra		_LCPunctuation 				; print, increment, loop
.98a7					_LCShiftPunc:
.98a7	aa		tax				tax 								; save in X
.98a8	29 07		and #$07			and 	#7 							; lower 3 bits
.98aa	f0 02		beq $98ae			beq 	_LCNoAdd
.98ac	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98ae					_LCNoAdd:
.98ae	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98b0	90 02		bcc $98b4			bcc 	_LCNoAdd2
.98b2	09 20		ora #$20			ora 	#32 						; adds $20
.98b4					_LCNoAdd2:
.98b4	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98b6					_LCPunctuation:
.98b6	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98b8	d0 03		bne $98bd			bne 	_LCPContinue
.98ba	20 79 99	jsr $9979			jsr 	LCDeleteLastSpace
.98bd					_LCPContinue:
.98bd	c8		iny				iny 								; consume character
.98be	20 6a 99	jsr $996a			jsr 	LCLWrite 					; write it out.
.98c1	80 ac		bra $986f			bra 	_LCMainLoop 				; go round again.
.98c3					_LCIdentifiers:
.98c3	18		clc				clc 								; convert to physical address
.98c4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98c6	85 37		sta $37				sta 	zTemp0+1
.98c8	c8		iny				iny
.98c9	b1 30		lda ($30),y			lda 	(codePtr),y
.98cb	85 36		sta $36				sta 	zTemp0
.98cd	c8		iny				iny
.98ce	5a		phy				phy 								; save position
.98cf	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98d1					_LCOutIdentifier:
.98d1	c8		iny				iny
.98d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d4	29 7f		and #$7f			and 	#$7F
.98d6	20 b8 99	jsr $99b8			jsr 	LCLLowerCase
.98d9	20 6a 99	jsr $996a			jsr 	LCLWrite
.98dc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98de	10 f1		bpl $98d1			bpl 	_LCOutIdentifier
.98e0	7a		ply				ply 								; restore position
.98e1	80 8c		bra $986f			bra 	_LCMainLoop
.98e3					_LCTokens:
.98e3	aa		tax				tax 								; token in X
.98e4	a9 ef		lda #$ef			lda 	#((KeywordSet2) & $FF)
.98e6	85 36		sta $36				sta 	0+zTemp0
.98e8	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.98ea	85 37		sta $37				sta 	1+zTemp0
.98ec	e0 82		cpx #$82			cpx 	#$82
.98ee	f0 16		beq $9906			beq 	_LCUseShift
.98f0	a9 a1		lda #$a1			lda 	#((KeywordSet1) & $FF)
.98f2	85 36		sta $36				sta 	0+zTemp0
.98f4	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.98f6	85 37		sta $37				sta 	1+zTemp0
.98f8	e0 81		cpx #$81			cpx 	#$81
.98fa	f0 0a		beq $9906			beq 	_LCUseShift
.98fc	a9 bc		lda #$bc			lda 	#((KeywordSet0) & $FF)
.98fe	85 36		sta $36				sta 	0+zTemp0
.9900	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.9902	85 37		sta $37				sta 	1+zTemp0
.9904	80 01		bra $9907			bra 	_LCNoShift
.9906					_LCUseShift:
.9906	c8		iny				iny
.9907					_LCNoShift:
.9907	20 8d 99	jsr $998d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.990a	b1 30		lda ($30),y			lda 	(codePtr),y
.990c	aa		tax				tax 								; into X
.990d					_LCFindText:
.990d	ca		dex				dex
.990e	10 0e		bpl $991e			bpl 	_LCFoundText 				; found text.
.9910	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9912	1a		inc a				inc 	a 							; one extra for size
.9913	38		sec				sec 								; one extra for checksum
.9914	65 36		adc $36				adc 	zTemp0 						; go to next token
.9916	85 36		sta $36				sta 	zTemp0
.9918	90 f3		bcc $990d			bcc 	_LCFindText
.991a	e6 37		inc $37				inc 	zTemp0+1
.991c	80 ef		bra $990d			bra 	_LCFindText
.991e					_LCFoundText:
.991e	5a		phy				phy 								; save List position
.991f	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9921	aa		tax				tax
.9922	a0 02		ldy #$02			ldy 	#2
.9924					_LCCopyToken:
.9924	b1 36		lda ($36),y			lda 	(zTemp0),y
.9926	20 b8 99	jsr $99b8			jsr 	LCLLowerCase
.9929	20 6a 99	jsr $996a			jsr 	LCLWrite
.992c	c8		iny				iny
.992d	ca		dex				dex
.992e	d0 f4		bne $9924			bne 	_LCCopyToken
.9930	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9932	f0 05		beq $9939			beq 	_LCNoSpace
.9934	a9 20		lda #$20			lda 	#' '
.9936	20 6a 99	jsr $996a			jsr 	LCLWrite
.9939					_LCNoSpace:
.9939	7a		ply				ply 								; restore position.
.993a	c8		iny				iny 								; consume token
.993b	4c 6f 98	jmp $986f			jmp 	_LCMainLoop 				; and go around again.
.993e					_LCData:
.993e	48		pha				pha 								; save type $FE/$FF
.993f	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9941	c9 fe		cmp #$fe			cmp 	#$FE
.9943	f0 02		beq $9947			beq 	_LCHaveOpener
.9945	a2 22		ldx #$22			ldx 	#'"'
.9947					_LCHaveOpener:
.9947	8a		txa				txa 								; output prefix (# or ")
.9948	20 6a 99	jsr $996a			jsr 	LCLWrite
.994b	c8		iny				iny 								; get count
.994c	b1 30		lda ($30),y			lda 	(codePtr),y
.994e	aa		tax				tax
.994f	c8		iny				iny 								; point at first character
.9950					_LCOutData:
.9950	b1 30		lda ($30),y			lda 	(codePtr),y
.9952	c9 00		cmp #$00			cmp 	#0
.9954	f0 03		beq $9959			beq 	_LCNoPrint
.9956	20 6a 99	jsr $996a			jsr 	LCLWrite
.9959					_LCNoPrint:
.9959	c8		iny				iny
.995a	ca		dex				dex
.995b	d0 f3		bne $9950			bne 	_LCOutData
.995d	68		pla				pla 								; closing " required ?
.995e	c9 ff		cmp #$ff			cmp 	#$FF
.9960	d0 05		bne $9967			bne 	_LCNoQuote
.9962	a9 22		lda #$22			lda 	#'"'
.9964	20 6a 99	jsr $996a			jsr 	LCLWrite
.9967					_LCNoQuote:
.9967	4c 6f 98	jmp $986f			jmp 	_LCMainLoop
.996a					LCLWrite:
.996a	da		phx				phx
.996b	ae 9d 04	ldx $049d			ldx 	tbOffset
.996e	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9971	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9974	ee 9d 04	inc $049d			inc 	tbOffset
.9977	fa		plx				plx
.9978	60		rts				rts
.9979					LCDeleteLastSpace:
.9979	48		pha				pha
.997a	da		phx				phx
.997b	ae 9d 04	ldx $049d			ldx 	tbOffset
.997e	f0 0a		beq $998a			beq 	_LCDLSExit
.9980	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9983	c9 20		cmp #$20			cmp 	#' '
.9985	d0 03		bne $998a			bne 	_LCDLSExit
.9987	ce 9d 04	dec $049d			dec 	tbOffset
.998a					_LCDLSExit:
.998a	fa		plx				plx
.998b	68		pla				pla
.998c	60		rts				rts
.998d					LCCheckSpaceRequired:
.998d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9990	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9993	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.9995	f0 1b		beq $99b2			beq 	_LCCSRSpace
.9997	c9 29		cmp #$29			cmp 	#')'
.9999	f0 17		beq $99b2			beq 	_LCCSRSpace
.999b	c9 23		cmp #$23			cmp 	#'#'
.999d	f0 13		beq $99b2			beq 	_LCCSRSpace
.999f	20 b8 99	jsr $99b8			jsr 	LCLLowerCase 				; saves a little effort
.99a2	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99a4	90 11		bcc $99b7			bcc 	_LCCSRExit
.99a6	c9 3a		cmp #$3a			cmp 	#"9"+1
.99a8	90 08		bcc $99b2			bcc 	_LCCSRSpace
.99aa	c9 61		cmp #$61			cmp 	#"a"
.99ac	90 09		bcc $99b7			bcc 	_LCCSRExit
.99ae	c9 7b		cmp #$7b			cmp 	#"z"+1
.99b0	b0 05		bcs $99b7			bcs 	_LCCSRExit
.99b2					_LCCSRSpace:
.99b2	a9 20		lda #$20			lda 	#' '
.99b4	20 6a 99	jsr $996a			jsr 	LCLWrite
.99b7					_LCCSRExit:
.99b7	60		rts				rts
.99b8					LCLLowerCase:
.99b8	c9 41		cmp #$41			cmp 	#"A"
.99ba	90 06		bcc $99c2			bcc 	_LCLLCOut
.99bc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99be	b0 02		bcs $99c2			bcs 	_LCLLCOut
.99c0	69 20		adc #$20			adc 	#$20
.99c2					_LCLLCOut:
.99c2	60		rts				rts
.99c3					LCLUpperCase:
.99c3	c9 61		cmp #$61			cmp 	#"a"
.99c5	90 06		bcc $99cd			bcc 	_LCLUCOut
.99c7	c9 7b		cmp #$7b			cmp 	#"z"+1
.99c9	b0 02		bcs $99cd			bcs 	_LCLUCOut
.99cb	e9 1f		sbc #$1f			sbc 	#$1F
.99cd					_LCLUCOut:
.99cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99ce					ProcedureScan:
.99ce	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99d0	85 30		sta $30				sta 	codePtr
.99d2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99d4	85 31		sta $31				sta 	codePtr+1
.99d6					_PSLoop:
.99d6	b2 30		lda ($30)			lda 	(codePtr)
.99d8	f0 42		beq $9a1c			beq 	_PSExit
.99da	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99dc	b1 30		lda ($30),y			lda 	(codePtr),y
.99de	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99e0	d0 2d		bne $9a0f			bne 	_PSNext
.99e2	c8		iny				iny 								; get the address of the record to zTemp0 and
.99e3	b1 30		lda ($30),y			lda 	(codePtr),y
.99e5	29 c0		and #$c0			and 	#$C0
.99e7	c9 40		cmp #$40			cmp 	#$40
.99e9	d0 32		bne $9a1d			bne 	_PSSyntax
.99eb	b1 30		lda ($30),y			lda 	(codePtr),y
.99ed	18		clc				clc
.99ee	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99f0	85 37		sta $37				sta 	zTemp0+1
.99f2	c8		iny				iny 								; LSB
.99f3	b1 30		lda ($30),y			lda 	(codePtr),y
.99f5	85 36		sta $36				sta 	zTemp0
.99f7	c8		iny				iny 								; character after variable call.
.99f8	98		tya				tya 								; save Y offset at +7
.99f9	a0 07		ldy #$07			ldy 	#7
.99fb	91 36		sta ($36),y			sta 	(zTemp0),y
.99fd	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.99ff	a0 02		ldy #$02			ldy 	#2
.9a01	91 36		sta ($36),y			sta 	(zTemp0),y
.9a03	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a05					_PSCopy:
.9a05	b5 30		lda $30,x			lda 	safePtr,x
.9a07	c8		iny				iny
.9a08	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0a	e8		inx				inx
.9a0b	e0 04		cpx #$04			cpx 	#4
.9a0d	d0 f6		bne $9a05			bne 	_PSCopy
.9a0f					_PSNext:
.9a0f	18		clc				clc
.9a10	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a12	65 30		adc $30				adc 	codePtr
.9a14	85 30		sta $30				sta 	codePtr
.9a16	90 02		bcc $9a1a			bcc 	_CREExit
.9a18	e6 31		inc $31				inc 	codePtr+1
.9a1a					_CREExit:
.9a1a	80 ba		bra $99d6			bra 	_PSLoop
.9a1c					_PSExit:
.9a1c	60		rts				rts
.9a1d					_PSSyntax:
.9a1d	4c 31 b5	jmp $b531			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a20					ScanForward:
.9a20	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a22	86 37		stx $37				stx 	zTemp0+1
.9a24	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a26					_ScanLoop:
.9a26	b1 30		lda ($30),y			lda 	(codePtr),y
.9a28	c8		iny				iny
.9a29	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a2b	d0 0e		bne $9a3b			bne 	_ScanGoNext
.9a2d	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a2f	f0 04		beq $9a35			beq 	_ScanMatch
.9a31	c5 37		cmp $37				cmp 	zTemp0+1
.9a33	d0 06		bne $9a3b			bne 	_ScanGoNext
.9a35					_ScanMatch:
.9a35	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a37	d0 01		bne $9a3a			bne 	_ScanNotEndEOL
.9a39	88		dey				dey
.9a3a					_ScanNotEndEOL:
.9a3a	60		rts				rts
.9a3b					_ScanGoNext:
.9a3b	20 40 9a	jsr $9a40			jsr  	ScanForwardOne
.9a3e	80 e6		bra $9a26			bra 	_ScanLoop
.9a40					ScanForwardOne:
.9a40	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a42	90 3e		bcc $9a82			bcc 	_SFWExit
.9a44	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a46	90 18		bcc $9a60			bcc 	_ScanSkipOne
.9a48	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a4a	b0 2f		bcs $9a7b			bcs 	_ScanSkipData
.9a4c	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a4e	90 32		bcc $9a82			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a50	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a52	b0 2e		bcs $9a82			bcs 	_SFWExit
.9a54	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a56	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a58	b0 28		bcs $9a82			bcs 	_SFWExit
.9a5a	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a5c	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a5e	80 22		bra $9a82			bra 	_SFWExit
.9a60					_ScanSkipOne:
.9a60	c8		iny				iny 								; consume the extra one.
.9a61	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a63	d0 1d		bne $9a82			bne 	_SFWExit
.9a65	18		clc				clc
.9a66	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a68	65 30		adc $30				adc 	codePtr
.9a6a	85 30		sta $30				sta 	codePtr
.9a6c	90 02		bcc $9a70			bcc 	_CREExit
.9a6e	e6 31		inc $31				inc 	codePtr+1
.9a70					_CREExit:
.9a70	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a72	b2 30		lda ($30)			lda 	(codePtr)
.9a74	d0 0c		bne $9a82			bne 	_SFWExit 					; if not zero, more to scan
.9a76	a9 13		lda #$13		lda	#19
.9a78	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.9a7b					_ScanSkipData:
.9a7b	88		dey				dey 								; point at data token
.9a7c	c8		iny				iny
.9a7d	98		tya				tya
.9a7e	38		sec				sec
.9a7f	71 30		adc ($30),y			adc 	(codePtr),y
.9a81	a8		tay				tay
.9a82					_SFWExit:
.9a82	60		rts				rts
.9a83					ScanGetCurrentLineStep:
.9a83	64 38		stz $38				stz 	zTemp1
.9a85	a0 03		ldy #$03			ldy 	#3
.9a87					_SGCLSLoop:
.9a87	b1 30		lda ($30),y			lda 	(codePtr),y
.9a89	c8		iny				iny
.9a8a	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9a8c	f0 05		beq $9a93			beq 	_SGCLSExit
.9a8e	20 40 9a	jsr $9a40			jsr 	ScanForwardOne
.9a91	80 f4		bra $9a87			bra 	_SGCLSLoop
.9a93					_SGCLSExit:
.9a93	a5 38		lda $38				lda 	zTemp1
.9a95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9a96					Command_WHILE:
.9a96	5a		phy				phy 								; save position of the test
.9a97	a2 00		ldx #$00			ldx 	#0
.9a99	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; work out the number
.9a9c	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; check if zero
.9a9f	f0 0e		beq $9aaf			beq 	_WHExitLoop 				; if so exit the loop
.9aa1	98		tya				tya 								; position *after* test.
.9aa2	7a		ply				ply 								; restore position before test, at WHILE
.9aa3	88		dey				dey
.9aa4	48		pha				pha 								; push after test on the stack
.9aa5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9aa7	20 b4 a7	jsr $a7b4			jsr 	StackOpen
.9aaa	20 f8 a7	jsr $a7f8			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9aad	7a		ply				ply 								; restore the position *after* the test
.9aae	60		rts				rts
.9aaf					_WHExitLoop:
.9aaf	68		pla				pla 								; throw post loop position
.9ab0	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9ab2	aa		tax				tax
.9ab3	20 20 9a	jsr $9a20			jsr 	ScanForward
.9ab6	60		rts				rts
.9ab7					Command_WEND:
.9ab7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9ab9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9abb	20 e0 a7	jsr $a7e0			jsr 	StackCheckFrame
.9abe	20 09 a8	jsr $a809			jsr 	STKLoadCodePosition 		; loop back
.9ac1	20 d2 a7	jsr $a7d2			jsr 	StackClose		 			; erase the frame
.9ac4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af43					CheckRightBracket:
.af43	b1 30		lda ($30),y			lda 	(codePtr),y
.af45	c8		iny				iny
.af46	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af48	d0 0f		bne $af59			bne 	CNAFail
.af4a	60		rts				rts
.af4b					CheckComma:
.af4b	b1 30		lda ($30),y			lda 	(codePtr),y
.af4d	c8		iny				iny
.af4e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af50	d0 07		bne $af59			bne 	CNAFail
.af52	60		rts				rts
.af53					CheckNextA:
.af53	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af55	d0 02		bne $af59			bne 	CNAFail
.af57	c8		iny				iny 								; skip character
.af58	60		rts				rts 								; and exit
.af59					CNAFail:
.af59	4c 31 b5	jmp $b531			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9ac5					ErrorHandler:
.9ac5	a8		tay				tay 								; find the error text
.9ac6	f0 49		beq $9b11			beq 	_EHEnd
.9ac8	a2 00		ldx #$00			ldx 	#0
.9aca	a9 4a		lda #$4a			lda 	#((ErrorText) & $FF)
.9acc	85 36		sta $36				sta 	0+zTemp0
.9ace	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9ad0	85 37		sta $37				sta 	1+zTemp0
.9ad2					_EHFind:
.9ad2	88		dey				dey 								; found the error text ?
.9ad3	f0 0e		beq $9ae3			beq 	_EHFound
.9ad5					_EHFindZero:
.9ad5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9ad7	e6 36		inc $36				inc 	zTemp0
.9ad9	d0 02		bne $9add			bne 	_EHFNoCarry
.9adb	e6 37		inc $37				inc 	zTemp0+1
.9add					_EHFNoCarry:
.9add	c9 00		cmp #$00			cmp 	#0
.9adf	d0 f4		bne $9ad5			bne 	_EHFindZero
.9ae1	80 ef		bra $9ad2			bra 	_EHFind
.9ae3					_EHFound:
.9ae3	a5 36		lda $36				lda 	zTemp0 						; print message
.9ae5	a6 37		ldx $37				ldx 	zTemp0+1
.9ae7	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.9aea	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9aec	b1 30		lda ($30),y			lda 	(codePtr),y
.9aee	d0 05		bne $9af5			bne 	_EHAtMsg
.9af0	c8		iny				iny
.9af1	b1 30		lda ($30),y			lda 	(codePtr),y
.9af3	f0 17		beq $9b0c			beq 	_EHCREnd
.9af5					_EHAtMsg:
.9af5	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9af7	a9 14		lda #$14			lda 	#_AtMsg & $FF
.9af9	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA
.9afc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9afe	b1 30		lda ($30),y			lda 	(codePtr),y
.9b00	48		pha				pha
.9b01	c8		iny				iny
.9b02	b1 30		lda ($30),y			lda 	(codePtr),y
.9b04	aa		tax				tax
.9b05	68		pla				pla
.9b06	20 9f b0	jsr $b09f			jsr 	ConvertInt16 				; convert XA to string
.9b09	20 1e 9b	jsr $9b1e			jsr 	PrintStringXA 				; and print it.
.9b0c					_EHCREnd:
.9b0c	a9 0d		lda #$0d			lda 	#13 						; new line
.9b0e	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.9b11					_EHEnd:
.9b11	4c 26 8c	jmp $8c26			jmp 	WarmStart
>9b14	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b1c	20 00
.9b1e					PrintStringXA:
.9b1e	5a		phy				phy
.9b1f	86 37		stx $37				stx 	zTemp0+1
.9b21	85 36		sta $36				sta 	zTemp0
.9b23	a0 00		ldy #$00			ldy 	#0
.9b25					_PSXALoop:
.9b25	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b27	f0 06		beq $9b2f			beq 	_PSXAExit
.9b29	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.9b2c	c8		iny				iny
.9b2d	80 f6		bra $9b25			bra 	_PSXALoop
.9b2f					_PSXAExit:
.9b2f	7a		ply				ply
.9b30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b31					UnaryTrue:
.9b31	fa		plx				plx
.9b32					ReturnTrue:
.9b32	a9 01		lda #$01			lda 	#1  						; set to 1
.9b34	20 02 a7	jsr $a702			jsr 	NSMSetByte
.9b37	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b39	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b3c	60		rts				rts
.9b3d					UnaryFalse:
.9b3d	fa		plx				plx
.9b3e					ReturnFalse:
.9b3e	4c 00 a7	jmp $a700			jmp 	NSMSetZero 					; set it all to zero
.9b41					BinaryCompareEqual:
.9b41	fa		plx				plx
.9b42	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b45	c9 00		cmp #$00			cmp 	#0
.9b47	f0 e9		beq $9b32			beq 	ReturnTrue
.9b49	80 f3		bra $9b3e			bra 	ReturnFalse
.9b4b					BinaryCompareLess:
.9b4b	fa		plx				plx
.9b4c	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b4f	c9 ff		cmp #$ff			cmp 	#$FF
.9b51	f0 df		beq $9b32			beq 	ReturnTrue
.9b53	80 e9		bra $9b3e			bra 	ReturnFalse
.9b55					BinaryCompareGreater:
.9b55	fa		plx				plx
.9b56	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b59	c9 01		cmp #$01			cmp 	#1
.9b5b	f0 d5		beq $9b32			beq 	ReturnTrue
.9b5d	80 df		bra $9b3e			bra 	ReturnFalse
.9b5f					BinaryCompareNotEqual:
.9b5f	fa		plx				plx
.9b60	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b63	c9 00		cmp #$00			cmp 	#0
.9b65	d0 cb		bne $9b32			bne 	ReturnTrue
.9b67	80 d5		bra $9b3e			bra 	ReturnFalse
.9b69					BinaryCompareLessEqual:
.9b69	fa		plx				plx
.9b6a	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b6d	c9 01		cmp #$01			cmp 	#1
.9b6f	d0 c1		bne $9b32			bne 	ReturnTrue
.9b71	80 cb		bra $9b3e			bra 	ReturnFalse
.9b73					BinaryCompareGreaterEqual:
.9b73	fa		plx				plx
.9b74	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode
.9b77	c9 ff		cmp #$ff			cmp 	#$FF
.9b79	d0 b7		bne $9b32			bne 	ReturnTrue
.9b7b	80 c1		bra $9b3e			bra 	ReturnFalse
.9b7d					CompareBaseCode:
.9b7d	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; make both values if references.
.9b80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b83	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b86	29 10		and #$10			and 	#NSTString
.9b88	d0 40		bne $9bca			bne 	_CBCString
.9b8a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9b8d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b90	d0 3b		bne $9bcd			bne 	_CBCFloat
.9b92	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b95	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b98	29 08		and #$08			and 	#NSTFloat
.9b9a	d0 31		bne $9bcd			bne 	_CBCFloat
.9b9c	20 d0 9b	jsr $9bd0			jsr 	CompareFixMinusZero
.9b9f	e8		inx				inx
.9ba0	20 d0 9b	jsr $9bd0			jsr 	CompareFixMinusZero
.9ba3	ca		dex				dex
.9ba4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9ba7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9baa	10 0b		bpl $9bb7			bpl 	_CDCSameSign
.9bac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9baf	30 16		bmi $9bc7			bmi 	_CBCLess 					; return $FF
.9bb1					_CBCGreater:
.9bb1	a9 01		lda #$01			lda 	#1
.9bb3	60		rts				rts
.9bb4					_CBCEqual:
.9bb4	a9 00		lda #$00			lda 	#0
.9bb6	60		rts				rts
.9bb7					_CDCSameSign:
.9bb7	20 e0 9c	jsr $9ce0			jsr 	SubTopTwoStack 				; unsigned subtract
.9bba	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; or the mantissa together
.9bbd	f0 f5		beq $9bb4			beq 	_CBCEqual 					; -0 == 0
.9bbf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bc2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9bc5	10 ea		bpl $9bb1			bpl 	_CBCGreater
.9bc7					_CBCLess:
.9bc7	a9 ff		lda #$ff			lda 	#$FF
.9bc9	60		rts				rts
.9bca					_CBCString:
.9bca	4c 36 9c	jmp $9c36			jmp 	CompareStrings
.9bcd					_CBCFloat:
.9bcd	4c a3 b1	jmp $b1a3			jmp 	CompareFloat
.9bd0					CompareFixMinusZero:
.9bd0	20 30 a7	jsr $a730			jsr 	NSMIsZero
.9bd3	d0 03		bne $9bd8			bne 	_CFXMZNotZero
.9bd5	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9bd8					_CFXMZNotZero:
.9bd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9bd9					StringConcat:
.9bd9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9bdc	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9bdf	29 18		and #$18			and 	#NSBTypeMask
.9be1	c9 10		cmp #$10			cmp 	#NSTString
.9be3	d0 4e		bne $9c33			bne		_SCType
.9be5	64 38		stz $38				stz 	zTemp1 						; counting total length
.9be7	e8		inx				inx
.9be8	20 06 9c	jsr $9c06			jsr 	_SCSetupZ0 					; setup for second
.9beb	20 11 9c	jsr $9c11			jsr 	_SCLengthZ0 				; length for second
.9bee	ca		dex				dex
.9bef	20 06 9c	jsr $9c06			jsr 	_SCSetupZ0 					; setup for first
.9bf2	20 11 9c	jsr $9c11			jsr 	_SCLengthZ0 				; length for first
.9bf5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9bf7	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate
.9bfa	20 24 9c	jsr $9c24			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9bfd	e8		inx				inx
.9bfe	20 06 9c	jsr $9c06			jsr 	_SCSetupZ0 					; copy second out
.9c01	20 24 9c	jsr $9c24			jsr 	_SCCopy
.9c04	ca		dex				dex
.9c05	60		rts				rts
.9c06					_SCSetupZ0:
.9c06	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c09	85 36		sta $36				sta 	zTemp0
.9c0b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c0e	85 37		sta $37				sta 	zTemp0+1
.9c10	60		rts				rts
.9c11					_SCLengthZ0:
.9c11	5a		phy				phy
.9c12	a0 00		ldy #$00			ldy 	#0
.9c14					_SCLenLoop:
.9c14	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c16	f0 0a		beq $9c22			beq 	_SCLExit
.9c18	c8		iny				iny
.9c19	e6 38		inc $38				inc 	zTemp1
.9c1b	10 f7		bpl $9c14			bpl		_SCLenLoop
.9c1d	a9 09		lda #$09		lda	#9
.9c1f	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.9c22					_SCLExit:
.9c22	7a		ply				ply
.9c23	60		rts				rts
.9c24					_SCCopy:
.9c24	5a		phy				phy
.9c25	a0 00		ldy #$00			ldy 	#0
.9c27					_SCCopyLoop:
.9c27	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c29	f0 06		beq $9c31			beq 	_SCCExit
.9c2b	20 f0 b8	jsr $b8f0			jsr 	StringTempWrite
.9c2e	c8		iny				iny
.9c2f	80 f6		bra $9c27			bra 	_SCCopyLoop
.9c31					_SCCExit:
.9c31	7a		ply				ply
.9c32	60		rts				rts
.9c33					_SCType:
.9c33	4c 3b b5	jmp $b53b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af5c					IntegerDivide:
.af5c	fa		plx				plx
.af5d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af60	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af63	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af64	0a		asl a				asl 	a
.af65	10 05		bpl $af6c			bpl 	_NotRef
.af67	48		pha				pha
.af68	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af6b	68		pla				pla
.af6c					_NotRef:
.af6c	0a		asl a				asl 	a
.af6d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af6f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af72	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af75	f0 03		beq $af7a			beq 	_IntegerCode 				; if clear, then we have two integers
.af77	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.af7a					_IntegerCode:
.af7a	20 9c af	jsr $af9c			jsr 	CheckDivideZero 			; do div zero check
.af7d	20 d4 af	jsr $afd4			jsr 	Int32Divide 				; do the division
.af80	20 91 b0	jsr $b091			jsr 	CalculateSign 				; calculate result sign
.af83					NSMCopyPlusTwoToZero:
.af83	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af86	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af89	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.af8c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af8f	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.af92	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af95	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.af98	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af9b	60		rts				rts
.af9c					CheckDivideZero:
.af9c	e8		inx				inx
.af9d	20 30 a7	jsr $a730			jsr 	NSMIsZero
.afa0	f0 02		beq $afa4			beq 	_CDVError
.afa2	ca		dex				dex
.afa3	60		rts				rts
.afa4					_CDVError:
.afa4	a9 03		lda #$03		lda	#3
.afa6	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.afa9					IntegerModulus:
.afa9	fa		plx				plx
.afaa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afad	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afb0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afb1	0a		asl a				asl 	a
.afb2	10 05		bpl $afb9			bpl 	_NotRef
.afb4	48		pha				pha
.afb5	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afb8	68		pla				pla
.afb9					_NotRef:
.afb9	0a		asl a				asl 	a
.afba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afbc	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afbf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afc2	f0 03		beq $afc7			beq 	_IntegerCode 				; if clear, then we have two integers
.afc4	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.afc7					_IntegerCode:
.afc7					IntegerModulusNoCheck:
.afc7	20 9c af	jsr $af9c			jsr 	CheckDivideZero 			; do div zero check
.afca	20 d4 af	jsr $afd4			jsr 	Int32Divide 				; do the division
.afcd	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afd0	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afd3	60		rts				rts
.afd4					Int32Divide:
.afd4	48		pha				pha 								; save AXY
.afd5	5a		phy				phy
.afd6	20 d7 a6	jsr $a6d7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afd9	20 fc a6	jsr $a6fc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.afdc	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.afde					_I32DivideLoop:
.afde	e8		inx				inx
.afdf	e8		inx				inx
.afe0	20 15 a7	jsr $a715			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.afe3	ca		dex				dex
.afe4	ca		dex				dex
.afe5	20 16 a7	jsr $a716			jsr 	NSMRotateLeft
.afe8	20 14 b0	jsr $b014			jsr 	DivideCheckSubtract 		; check if subtract possible
.afeb	90 03		bcc $aff0			bcc 	_I32DivideNoCarryIn
.afed	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aff0					_I32DivideNoCarryIn:
.aff0	88		dey				dey 								; loop round till division completed.
.aff1	d0 eb		bne $afde			bne 	_I32DivideLoop
.aff3	7a		ply				ply 								; restore AXY and exit
.aff4	68		pla				pla
.aff5	60		rts				rts
.aff6					Int32ShiftDivide:
.aff6	48		pha				pha 								; save AY
.aff7	5a		phy				phy
.aff8	e8		inx				inx 								; clear S[X+2]
.aff9	e8		inx				inx
.affa	20 00 a7	jsr $a700			jsr 	NSMSetZero
.affd	ca		dex				dex
.affe	ca		dex				dex
.afff	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b001					_I32SDLoop:
.b001	20 14 b0	jsr $b014			jsr 	DivideCheckSubtract 		; check if subtract possible
.b004	e8		inx				inx
.b005	e8		inx				inx
.b006	20 16 a7	jsr $a716			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b009	ca		dex				dex
.b00a	ca		dex				dex
.b00b	20 16 a7	jsr $a716			jsr 	NSMRotateLeft
.b00e	88		dey				dey 	 							; do 31 times
.b00f	d0 f0		bne $b001			bne 	_I32SDLoop
.b011	7a		ply				ply 								; restore AY and exit
.b012	68		pla				pla
.b013	60		rts				rts
.b014					DivideCheckSubtract:
.b014	20 e0 9c	jsr $9ce0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b017	b0 04		bcs $b01d			bcs 	_DCSExit 					; if carry set, then could do, exit
.b019	20 ba 9c	jsr $9cba			jsr 	AddTopTwoStack 				; add it back in
.b01c	18		clc				clc 								; and return False
.b01d					_DCSExit:
.b01d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b01e					MulInteger:
.b01e	fa		plx				plx
.b01f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b022	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b025	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b026	0a		asl a				asl 	a
.b027	10 05		bpl $b02e			bpl 	_NotRef
.b029	48		pha				pha
.b02a	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b02d	68		pla				pla
.b02e					_NotRef:
.b02e	0a		asl a				asl 	a 							; put MSB of type into A:7
.b02f	30 0b		bmi $b03c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b031	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b034	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b037	f0 06		beq $b03f			beq 	_IntegerCode 				; if clear, then we have two integers
.b039	4c 7a b2	jmp $b27a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b03c					_StringData:
.b03c	4c 45 b5	jmp $b545			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b03f					_IntegerCode:
.b03f	20 4c b0	jsr $b04c			jsr 	MultiplyShort
.b042	c9 00		cmp #$00			cmp 	#0
.b044	f0 05		beq $b04b			beq 	_MIExit
.b046	a9 04		lda #$04		lda	#4
.b048	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b04b					_MIExit:
.b04b	60		rts				rts
.b04c					MultiplyShort:
.b04c	5a		phy				phy 								; save Y
.b04d	20 d7 a6	jsr $a6d7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b050	20 fc a6	jsr $a6fc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b053	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b055					_I32MLoop:
.b055	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b058	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b05b	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b05e	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b061	f0 28		beq $b08b			beq 	_I32MExit 					; exit if zero
.b063	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b066	29 01		and #$01			and 	#1
.b068	f0 0e		beq $b078			beq 	_I32MNoAdd
.b06a	20 ba 9c	jsr $9cba			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b06d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b070	10 06		bpl $b078			bpl 	_I32MNoAdd
.b072					_I32ShiftRight:
.b072	20 23 a7	jsr $a723			jsr 	NSMShiftRight 				; shift S[X] right
.b075	c8		iny				iny 								; increment shift count
.b076	80 0a		bra $b082			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b078					_I32MNoAdd:
.b078	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b07b	70 f5		bvs $b072			bvs 	_I32ShiftRight 				; instead.
.b07d	e8		inx				inx
.b07e	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b081	ca		dex				dex
.b082					_I32MShiftUpper:
.b082	e8		inx				inx 								; shift S[X+2] right
.b083	e8		inx				inx
.b084	20 23 a7	jsr $a723			jsr 	NSMShiftRight
.b087	ca		dex				dex
.b088	ca		dex				dex
.b089	80 ca		bra $b055			bra 	_I32MLoop 					; try again.
.b08b					_I32MExit:
.b08b	20 91 b0	jsr $b091			jsr 	CalculateSign
.b08e	98		tya				tya 								; shift in A
.b08f	7a		ply				ply 								; restore Y and exit
.b090	60		rts				rts
.b091					CalculateSign:
.b091	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b094	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b097	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b09a	0a		asl a				asl 	a 							; shift bit 7 into carry
.b09b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b09e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c36					CompareStrings:
.9c36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c39	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c3c	29 10		and #$10			and 	#NSBIsString
.9c3e	f0 2c		beq $9c6c			beq 	_CSTypeError
.9c40	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c43	85 36		sta $36				sta 	zTemp0
.9c45	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c48	85 37		sta $37				sta 	zTemp0+1
.9c4a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c4d	85 38		sta $38				sta 	zTemp1
.9c4f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c52	85 39		sta $39				sta 	zTemp1+1
.9c54	5a		phy				phy 								; save Y so we can access strings
.9c55	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c57					_CSLoop:
.9c57	c8		iny				iny
.9c58	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c5a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c5c	d0 06		bne $9c64			bne 	_CSDifferent
.9c5e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c60	d0 f5		bne $9c57			bne 	_CSLoop 					; still comparing
.9c62					_CSExit:
.9c62	7a		ply				ply 								; reached end, return zero in A from EOS
.9c63	60		rts				rts
.9c64					_CSDifferent:
.9c64	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c66	90 fa		bcc $9c62			bcc		_CSExit
.9c68	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c6a	80 f6		bra $9c62			bra 	_CSExit
.9c6c					_CSTypeError:
.9c6c	4c 3b b5	jmp $b53b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c6f					ShiftLeft:
.9c6f	38		sec				sec
.9c70	80 01		bra $9c73			bra 	ShiftMain
.9c72					ShiftRight:
.9c72	18		clc				clc
.9c73					ShiftMain:
.9c73	fa		plx				plx 								; restore X
.9c74	08		php				php 								; save direction
.9c75	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c78	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c7b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c7c	0a		asl a				asl 	a
.9c7d	10 05		bpl $9c84			bpl 	_NotRef
.9c7f	48		pha				pha
.9c80	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c83	68		pla				pla
.9c84					_NotRef:
.9c84	0a		asl a				asl 	a
.9c85	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c87	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c8a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c8d	f0 03		beq $9c92			beq 	_IntegerCode 				; if clear, then we have two integers
.9c8f	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9c92					_IntegerCode:
.9c92	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9c95	29 e0		and #$e0			and 	#$E0
.9c97	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9c9a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9c9d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ca0	d0 13		bne $9cb5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ca2					_SMLoop:
.9ca2	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ca5	30 11		bmi $9cb8			bmi 	_SMExit 					; exit if done.
.9ca7	28		plp				plp 								; restore direcition setting
.9ca8	08		php				php
.9ca9	90 05		bcc $9cb0			bcc 	_SMRight
.9cab	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; shift left if CS
.9cae	80 f2		bra $9ca2			bra 	_SMLoop
.9cb0					_SMRight:
.9cb0	20 23 a7	jsr $a723			jsr 	NSMShiftRight 				; shift right if CC
.9cb3	80 ed		bra $9ca2			bra 	_SMLoop
.9cb5					_SMExit0:
.9cb5	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; return zero.
.9cb8					_SMExit:
.9cb8	28		plp				plp 								; throw direction
.9cb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9cba					AddTopTwoStack:
.9cba	18		clc				clc
.9cbb	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cbe	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cc1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cc4	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cc7	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9cca	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ccd	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cd0	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9cd3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cd6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cd9	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9cdc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cdf	60		rts				rts
.9ce0					SubTopTwoStack:
.9ce0	38		sec				sec
.9ce1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ce4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9ce7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cea	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ced	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9cf0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cf3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cf6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9cf9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cfc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cff	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d02	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d05	60		rts				rts
.9d06					AddInteger:
.9d06	fa		plx				plx
.9d07	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d0a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d0d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d0e	0a		asl a				asl 	a
.9d0f	10 05		bpl $9d16			bpl 	_NotRef
.9d11	48		pha				pha
.9d12	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d15	68		pla				pla
.9d16					_NotRef:
.9d16	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d17	30 0b		bmi $9d24			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d19	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d1c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d1f	f0 06		beq $9d27			beq 	_IntegerCode 				; if clear, then we have two integers
.9d21	4c fa b0	jmp $b0fa			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d24					_StringData:
.9d24	4c d9 9b	jmp $9bd9			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d27					_IntegerCode:
.9d27					AddCode:
.9d27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d2a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d2d	10 8b		bpl $9cba			bpl 	AddTopTwoStack
.9d2f	20 e0 9c	jsr $9ce0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d32	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d35	10 09		bpl $9d40			bpl 	_AddExit
.9d37	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d3a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d3d	20 b5 a6	jsr $a6b5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d40					_AddExit:
.9d40	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; check for -0
.9d43	d0 03		bne $9d48			bne 	_AddNonZero
.9d45	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d48					_AddNonZero:
.9d48	60		rts				rts
.9d49					SubInteger:
.9d49	fa		plx				plx
.9d4a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d4d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d50	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d51	0a		asl a				asl 	a
.9d52	10 05		bpl $9d59			bpl 	_NotRef
.9d54	48		pha				pha
.9d55	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d58	68		pla				pla
.9d59					_NotRef:
.9d59	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d5a	30 0b		bmi $9d67			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d5c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d5f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d62	f0 06		beq $9d6a			beq 	_IntegerCode 				; if clear, then we have two integers
.9d64	4c ff b0	jmp $b0ff			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d67					_StringData:
.9d67	4c 45 b5	jmp $b545			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d6a					_IntegerCode:
.9d6a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d6d	49 80		eor #$80			eor 	#$80
.9d6f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d72	80 b3		bra $9d27			bra 	AddCode 					; and do the same code as add.
.9d74					AndInteger:
.9d74	fa		plx				plx
.9d75	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d78	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d7b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d7c	0a		asl a				asl 	a
.9d7d	10 05		bpl $9d84			bpl 	_NotRef
.9d7f	48		pha				pha
.9d80	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d83	68		pla				pla
.9d84					_NotRef:
.9d84	0a		asl a				asl 	a
.9d85	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d87	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d8a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d8d	f0 03		beq $9d92			beq 	_IntegerCode 				; if clear, then we have two integers
.9d8f	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9d92					_IntegerCode:
.9d92	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d95	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9d98	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d9b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d9e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9da1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9da4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9da7	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9daa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dad	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9db0	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9db3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9db6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9db9	60		rts				rts
.9dba					OraInteger:
.9dba	fa		plx				plx
.9dbb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dbe	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dc1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dc2	0a		asl a				asl 	a
.9dc3	10 05		bpl $9dca			bpl 	_NotRef
.9dc5	48		pha				pha
.9dc6	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dc9	68		pla				pla
.9dca					_NotRef:
.9dca	0a		asl a				asl 	a
.9dcb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dcd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dd0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9dd3	f0 03		beq $9dd8			beq 	_IntegerCode 				; if clear, then we have two integers
.9dd5	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9dd8					_IntegerCode:
.9dd8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ddb	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9dde	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9de1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9de4	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9de7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dea	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ded	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9df0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9df3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9df6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9df9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dfc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dff	60		rts				rts
.9e00					EorInteger:
.9e00	fa		plx				plx
.9e01	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e04	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e07	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e08	0a		asl a				asl 	a
.9e09	10 05		bpl $9e10			bpl 	_NotRef
.9e0b	48		pha				pha
.9e0c	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e0f	68		pla				pla
.9e10					_NotRef:
.9e10	0a		asl a				asl 	a
.9e11	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e13	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e16	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e19	f0 03		beq $9e1e			beq 	_IntegerCode 				; if clear, then we have two integers
.9e1b	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9e1e					_IntegerCode:
.9e1e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e21	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e27	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e2a	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e2d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e30	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e33	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e36	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e39	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e3c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e3f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e42	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e45	60		rts				rts
.9e46					WordIndirect:
.9e46	fa		plx				plx
.9e47	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e4a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e4d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e4e	0a		asl a				asl 	a
.9e4f	10 05		bpl $9e56			bpl 	_NotRef
.9e51	48		pha				pha
.9e52	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e55	68		pla				pla
.9e56					_NotRef:
.9e56	0a		asl a				asl 	a
.9e57	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e59	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e5c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e5f	f0 03		beq $9e64			beq 	_IntegerCode 				; if clear, then we have two integers
.9e61	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9e64					_IntegerCode:
.9e64	20 27 9d	jsr $9d27			jsr 	AddCode 					; add the two values
.9e67	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e69	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e6c	60		rts				rts
.9e6d					ByteIndirect:
.9e6d	fa		plx				plx
.9e6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e71	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e74	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e75	0a		asl a				asl 	a
.9e76	10 05		bpl $9e7d			bpl 	_NotRef
.9e78	48		pha				pha
.9e79	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e7c	68		pla				pla
.9e7d					_NotRef:
.9e7d	0a		asl a				asl 	a
.9e7e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e80	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e83	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e86	f0 03		beq $9e8b			beq 	_IntegerCode 				; if clear, then we have two integers
.9e88	4c 3b b5	jmp $b53b			jmp 	TypeError 					; anything else, type mismatch.
.9e8b					_IntegerCode:
.9e8b	20 27 9d	jsr $9d27			jsr 	AddCode 					; add the two values
.9e8e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9e90	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e93	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b09f					ConvertInt16:
.b09f	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0a2	8e 10 04	stx $0410			stx 	NSMantissa1
.b0a5	9c 18 04	stz $0418			stz 	NSMantissa2
.b0a8	9c 20 04	stz $0420			stz 	NSMantissa3
.b0ab	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0ae	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0b0	a9 0a		lda #$0a			lda 	#10 						; base
.b0b2	80 00		bra $b0b4			bra 	ConvertInt32
.b0b4					ConvertInt32:
.b0b4	5a		phy				phy
.b0b5	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0b7	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0ba	10 08		bpl $b0c4			bpl 	_CI32NotNeg
.b0bc	48		pha				pha
.b0bd	a9 2d		lda #$2d			lda 	#'-'
.b0bf	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0c2	c8		iny				iny
.b0c3	68		pla				pla
.b0c4					_CI32NotNeg:
.b0c4	20 d2 b0	jsr $b0d2			jsr 	_CI32DivideConvert 			; recursive conversion
.b0c7	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0c9	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0cc	7a		ply				ply
.b0cd	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0cf	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0d1	60		rts				rts
.b0d2					_CI32DivideConvert:
.b0d2	e8		inx				inx 								; write to next slot up
.b0d3	20 02 a7	jsr $a702			jsr 	NSMSetByte
.b0d6	ca		dex				dex
.b0d7	20 d4 af	jsr $afd4			jsr 	Int32Divide 				; divide
.b0da	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0dd	48		pha				pha
.b0de	20 83 af	jsr $af83			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0e1	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; is it zero ?
.b0e4	f0 06		beq $b0ec			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0e6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0e9	20 d2 b0	jsr $b0d2			jsr 	_CI32DivideConvert 			; and recusrively call.
.b0ec					_CI32NoRecurse:
.b0ec	68		pla				pla 								; remainder
.b0ed	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b0ef	90 02		bcc $b0f3			bcc 	_CI32NotHex
.b0f1	69 26		adc #$26			adc 	#6+32
.b0f3					_CI32NotHex:
.b0f3	69 30		adc #$30			adc 	#48
.b0f5	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b0f8	c8		iny				iny
.b0f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9e94					PrecedenceLevel:
>9e94	04					.byte	 4	; $00 <<
>9e95	02					.byte	 2	; $01 <=
>9e96	02					.byte	 2	; $02 <>
>9e97	00					.byte	 0	; $03 !!3
>9e98	00					.byte	 0	; $04 ><
>9e99	02					.byte	 2	; $05 >=
>9e9a	04					.byte	 4	; $06 >>
>9e9b	00					.byte	 0	; $07 !!7
>9e9c	00					.byte	 0	; $08 !!8
>9e9d	00					.byte	 0	; $09 !!9
>9e9e	00					.byte	 0	; $0a !!10
>9e9f	00					.byte	 0	; $0b !!11
>9ea0	00					.byte	 0	; $0c !!12
>9ea1	00					.byte	 0	; $0d !!13
>9ea2	00					.byte	 0	; $0e !!14
>9ea3	00					.byte	 0	; $0f !!15
>9ea4	00					.byte	 0	; $10 @
>9ea5	00					.byte	 0	; $11 !!17
>9ea6	00					.byte	 0	; $12 !!18
>9ea7	00					.byte	 0	; $13 [
>9ea8	04					.byte	 4	; $14 \
>9ea9	00					.byte	 0	; $15 ]
>9eaa	01					.byte	 1	; $16 ^
>9eab	00					.byte	 0	; $17 _
>9eac	00					.byte	 0	; $18 `
>9ead	00					.byte	 0	; $19 !!25
>9eae	00					.byte	 0	; $1a !!26
>9eaf	00					.byte	 0	; $1b {
>9eb0	01					.byte	 1	; $1c |
>9eb1	00					.byte	 0	; $1d }
>9eb2	00					.byte	 0	; $1e ~
>9eb3	00					.byte	 0	; $1f [7m<7F>[m
>9eb4	00					.byte	 0	; $20
>9eb5	05					.byte	 5	; $21 !
>9eb6	00					.byte	 0	; $22 "
>9eb7	00					.byte	 0	; $23 #
>9eb8	05					.byte	 5	; $24 $
>9eb9	04					.byte	 4	; $25 %
>9eba	01					.byte	 1	; $26 &
>9ebb	00					.byte	 0	; $27 '
>9ebc	00					.byte	 0	; $28 (
>9ebd	00					.byte	 0	; $29 )
>9ebe	04					.byte	 4	; $2a *
>9ebf	03					.byte	 3	; $2b +
>9ec0	00					.byte	 0	; $2c ,
>9ec1	03					.byte	 3	; $2d -
>9ec2	00					.byte	 0	; $2e .
>9ec3	04					.byte	 4	; $2f /
>9ec4	00					.byte	 0	; $30 0
>9ec5	00					.byte	 0	; $31 1
>9ec6	00					.byte	 0	; $32 2
>9ec7	00					.byte	 0	; $33 3
>9ec8	00					.byte	 0	; $34 4
>9ec9	00					.byte	 0	; $35 5
>9eca	00					.byte	 0	; $36 6
>9ecb	00					.byte	 0	; $37 7
>9ecc	00					.byte	 0	; $38 8
>9ecd	00					.byte	 0	; $39 9
>9ece	00					.byte	 0	; $3a :
>9ecf	00					.byte	 0	; $3b ;
>9ed0	02					.byte	 2	; $3c <
>9ed1	02					.byte	 2	; $3d =
>9ed2	02					.byte	 2	; $3e >
>9ed3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ed4					EvaluateExpressionAt0:
.9ed4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9ed6					EvaluateExpression:
.9ed6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9ed8					EvaluateExpressionAtPrecedence:
.9ed8	48		pha				pha 								; save precedence level
.9ed9	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm 				; evaluate term into level X.
.9edc	68		pla				pla 								; restore precedence level.
.9edd					_EXPRLoop:
.9edd	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9edf	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ee3	b0 25		bcs $9f0a			bcs 	_EXPRExit
.9ee5	da		phx				phx 								; read the operator precedence
.9ee6	aa		tax				tax
.9ee7	bd 94 9e	lda $9e94,x			lda 	PrecedenceLevel,x
.9eea	fa		plx				plx
.9eeb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9eed	f0 1b		beq $9f0a			beq 	_EXPRExit
.9eef	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9ef1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9ef3	c5 37		cmp $37				cmp 	zTemp0+1
.9ef5	b0 13		bcs $9f0a			bcs		_EXPRExit 					; if current >= operator exit
.9ef7	48		pha				pha 								; save current precedence.
.9ef8	b1 30		lda ($30),y			lda 	(codePtr),y
.9efa	c8		iny				iny
.9efb	48		pha				pha
.9efc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9efe	e8		inx				inx 								; work out the right hand side.
.9eff	20 d8 9e	jsr $9ed8			jsr 	EvaluateExpressionAtPrecedence
.9f02	ca		dex				dex
.9f03	68		pla				pla 								; get operator, call the code.
.9f04	20 0d 9f	jsr $9f0d			jsr 	_EXPRCaller
.9f07	68		pla				pla 								; restore precedence level
.9f08	80 d3		bra $9edd			bra 	_EXPRLoop 					; and go round.
.9f0a					_EXPRExit:
.9f0a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f0c	60		rts				rts
.9f0d					_EXPRCaller:
.9f0d	da		phx				phx 								; save on stack, first thing is to restore it
.9f0e	0a		asl a				asl 	a 							; double so can use vectors into X
.9f0f	aa		tax				tax
.9f10	7c 4a 96	jmp ($964a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b0fa					FloatingPointAdd:
.b0fa	20 a3 b2	jsr $b2a3			jsr 	FloatPrepare 				; prepare for floats
.b0fd	80 0b		bra $b10a			bra 	FloatAdd
.b0ff					FloatingPointSub:
.b0ff	20 a3 b2	jsr $b2a3			jsr 	FloatPrepare 				; prepare for floats
.b102					FloatSubtract:
.b102	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b105	49 80		eor #$80			eor 	#$80
.b107	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b10a					FloatAdd:
.b10a	48		pha				pha
.b10b	5a		phy				phy
.b10c	20 b4 b2	jsr $b2b4			jsr 	NSNormalise 				; normalise S[X]
.b10f	f0 5c		beq $b16d			beq 	_FAReturn1
.b111	e8		inx				inx 								; normalise S[X+1]
.b112	20 b4 b2	jsr $b2b4			jsr 	NSNormalise
.b115	ca		dex				dex
.b116	c9 00		cmp #$00			cmp 	#0
.b118	f0 77		beq $b191			beq 	_FAExit 					; if so, just return A
.b11a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b11d	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b120	f0 1b		beq $b13d			beq 	_FAExponentsEqual
.b122	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b125	a8		tay				tay
.b126	38		sec				sec 								; do a signed comparison of the exponents.
.b127	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b12a	50 02		bvc $b12e			bvc 	_FANoSignedChange
.b12c	49 80		eor #$80			eor 	#$80
.b12e					_FANoSignedChange:
.b12e	29 80		and #$80			and 	#$80
.b130	10 03		bpl $b135			bpl 	_FAHaveMax
.b132	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b135					_FAHaveMax:
.b135	20 94 b1	jsr $b194			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b138	e8		inx				inx
.b139	20 94 b1	jsr $b194			jsr 	_FAShiftToExponent
.b13c	ca		dex				dex
.b13d					_FAExponentsEqual:
.b13d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b140	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b143	30 10		bmi $b155			bmi 	_FADifferentSigns
.b145	20 ba 9c	jsr $9cba			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b148	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b14b	10 44		bpl $b191			bpl 	_FAExit 					; if no, we are done.
.b14d	20 23 a7	jsr $a723			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b150	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b153	80 3c		bra $b191			bra 	_FAExit
.b155					_FADifferentSigns:
.b155	20 e0 9c	jsr $9ce0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b158	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b15b	10 06		bpl $b163			bpl 	_FACheckZero 				; if no, check for -0
.b15d	20 ac a6	jsr $a6ac			jsr 	NSMNegate 					; netate result
.b160	20 b5 a6	jsr $a6b5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b163					_FACheckZero:
.b163	20 30 a7	jsr $a730			jsr 	NSMIsZero	 				; check for -0
.b166	d0 29		bne $b191			bne 	_FAExit
.b168	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b16b	80 24		bra $b191			bra 	_FAExit
.b16d					_FAReturn1:
.b16d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b170	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b173	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b176	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b179	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b17c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b17f	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b182	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b185	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b188	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b18b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b18e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b191					_FAExit:
.b191	7a		ply				ply
.b192	68		pla				pla
.b193	60		rts				rts
.b194					_FAShiftToExponent:
.b194					_FAShiftToExponent2:
.b194	98		tya				tya 								; compare Y to exponent
.b195	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b198	f0 08		beq $b1a2			beq 	_FASEExit 					; exit if so.
.b19a	20 23 a7	jsr $a723			jsr 	NSMShiftRight	 			; shift the mantissa right
.b19d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1a0	80 f2		bra $b194			bra 	_FAShiftToExponent2
.b1a2					_FASEExit:
.b1a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1a3					CompareFloat:
.b1a3	20 02 b1	jsr $b102			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1a6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1a9	29 f8		and #$f8			and 	#$F8
.b1ab	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1ae	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1b1	f0 09		beq $b1bc			beq 	_FCExit 					; zero, so approximately identical
.b1b3	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1b5	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1b8	10 02		bpl $b1bc			bpl 	_FCExit
.b1ba					_FCNegative:
.b1ba	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1bc					_FCExit:
.b1bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1bd					FDivideCommand:
.b1bd	fa		plx				plx	 								; restore stack position
.b1be	20 a3 b2	jsr $b2a3			jsr 	FloatPrepare 				; prepare for floats
.b1c1					FloatDivide:
.b1c1	48		pha				pha
.b1c2	e8		inx				inx
.b1c3	20 b4 b2	jsr $b2b4			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1c6	ca		dex				dex
.b1c7	c9 00		cmp #$00			cmp 	#0
.b1c9	f0 20		beq $b1eb			beq 	_FDZero
.b1cb	20 b4 b2	jsr $b2b4			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1ce	f0 19		beq $b1e9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1d0	20 f6 af	jsr $aff6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1d3	20 83 af	jsr $af83			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1d6	20 b4 b2	jsr $b2b4			jsr		NSNormalise 				; renormalise
.b1d9	20 91 b0	jsr $b091			jsr 	CalculateSign 				; calculate result sign
.b1dc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1df	38		sec				sec
.b1e0	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1e3	38		sec				sec
.b1e4	e9 1e		sbc #$1e			sbc 	#30
.b1e6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1e9					_FDExit:
.b1e9	68		pla				pla
.b1ea	60		rts				rts
.b1eb					_FDZero:
.b1eb	a9 03		lda #$03		lda	#3
.b1ed	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b1f0					FloatFractionalPart:
.b1f0	5a		phy				phy
.b1f1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b1f4	29 7f		and #$7f			and 	#$7F
.b1f6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1f9	20 b4 b2	jsr $b2b4			jsr 	NSNormalise
.b1fc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b1ff	38		sec				sec
.b200	e9 e0		sbc #$e0			sbc 	#$E0
.b202	90 31		bcc $b235			bcc 	_FFPExit 					; already fractional
.b204	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b206	b0 2a		bcs $b232			bcs 	_FFPZero
.b208	a8		tay				tay 								; put count to do in Y
.b209	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b20c	20 37 b2	jsr $b237			jsr 	_FFPPartial
.b20f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b212	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b215	20 37 b2	jsr $b237			jsr 	_FFPPartial
.b218	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b21b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b21e	20 37 b2	jsr $b237			jsr 	_FFPPartial
.b221	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b224	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b227	20 37 b2	jsr $b237			jsr 	_FFPPartial
.b22a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b22d	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; zeroed check.
.b230	d0 03		bne $b235			bne 	_FFPExit
.b232					_FFPZero:
.b232	20 00 a7	jsr $a700			jsr 	NSMSetZero
.b235					_FFPExit:
.b235	7a		ply				ply
.b236	60		rts				rts
.b237					_FFPPartial:
.b237	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b239	f0 17		beq $b252			beq 	_FFFPPExit
.b23b	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b23d	b0 0c		bcs $b24b			bcs 	_FFFPPWholeByte
.b23f	5a		phy				phy
.b240					_FFFPPLeft:
.b240	0a		asl a				asl 	a
.b241	88		dey				dey
.b242	d0 fc		bne $b240			bne 	_FFFPPLeft
.b244	7a		ply				ply
.b245					_FFFPPRight:
.b245	4a		lsr a				lsr 	a
.b246	88		dey				dey
.b247	d0 fc		bne $b245			bne 	_FFFPPRight
.b249	80 07		bra $b252			bra 	_FFFPPExit
.b24b					_FFFPPWholeByte:
.b24b	98		tya				tya 								; subtract 8 from count
.b24c	38		sec				sec
.b24d	e9 08		sbc #$08			sbc 	#8
.b24f	a8		tay				tay
.b250	a9 00		lda #$00			lda 	#0 							; and clear all
.b252					_FFFPPExit:
.b252	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b253					FloatIntegerPart:
.b253	48		pha				pha
.b254	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b257	f0 1f		beq $b278			beq 	_FIPExit 					; if so do nothing
.b259	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; is it zero ?
.b25c	f0 17		beq $b275			beq 	_FIPZero 					; if so return zero.
.b25e	20 b4 b2	jsr $b2b4			jsr 	NSNormalise 				; normalise
.b261	f0 12		beq $b275			beq 	_FIPZero 					; normalised to zero, exit zero
.b263					_FIPShift:
.b263	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b266	10 08		bpl $b270			bpl 	_FIPCheckZero
.b268	20 23 a7	jsr $a723			jsr 	NSMShiftRight 				; shift mantissa right
.b26b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b26e	80 f3		bra $b263			bra 	_FIPShift
.b270					_FIPCheckZero:
.b270	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; avoid -0 problem
.b273	d0 03		bne $b278			bne 	_FIPExit 					; set to zero if mantissa zero.
.b275					_FIPZero:
.b275	20 00 a7	jsr $a700			jsr 	NSMSetZero
.b278					_FIPExit:
.b278	68		pla				pla
.b279	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b27a					FloatingPointMultiply:
.b27a	20 a3 b2	jsr $b2a3			jsr 	FloatPrepare 				; prepare for floats
.b27d					FloatMultiply:
.b27d	48		pha				pha
.b27e	20 b4 b2	jsr $b2b4			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b281	f0 1b		beq $b29e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b283	e8		inx				inx
.b284	20 b4 b2	jsr $b2b4			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b287	ca		dex				dex
.b288	c9 00		cmp #$00			cmp 	#0
.b28a	f0 0f		beq $b29b			beq 	_FDSetZero
.b28c	20 4c b0	jsr $b04c			jsr 	MultiplyShort 				; calculate the result.
.b28f	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b292	18		clc				clc
.b293	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b296	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b299	80 03		bra $b29e			bra 	_FDExit
.b29b					_FDSetZero:
.b29b	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; return 0
.b29e					_FDExit:
.b29e	20 b4 b2	jsr $b2b4			jsr 	NSNormalise 				; normalise the result
.b2a1	68		pla				pla
.b2a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2a3					FloatPrepare:
.b2a3	20 e6 9f	jsr $9fe6			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2a9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2ac	29 10		and #$10			and 	#NSBIsString
.b2ae	d0 01		bne $b2b1			bne 	_FDType
.b2b0	60		rts				rts
.b2b1					_FDType:
.b2b1	4c 3b b5	jmp $b53b			jmp 	TypeError
.b2b4					NSNormalise:
.b2b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2b7	29 80		and #$80			and 	#$80
.b2b9	09 08		ora #$08			ora 	#NSTFloat
.b2bb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2be	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; if zero exit
.b2c1	d0 09		bne $b2cc			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2c3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2c6	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2c9	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2cb	60		rts				rts
.b2cc					_NSNormaliseOptimise:
.b2cc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2cf	d0 22		bne $b2f3			bne 	_NSNormaliseLoop
.b2d1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2d4	30 1d		bmi $b2f3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2d6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2dc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2e5	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2e8	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2eb	38		sec				sec
.b2ec	e9 08		sbc #$08			sbc 	#8
.b2ee	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2f1	80 d9		bra $b2cc			bra 	_NSNormaliseOptimise
.b2f3					_NSNormaliseLoop:
.b2f3	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b2f6	70 08		bvs $b300			bvs 	_NSNExit 					; exit if so with Z flag clear
.b2f8	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; shift mantissa left
.b2fb	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b2fe	80 f3		bra $b2f3			bra 	_NSNormaliseLoop
.b300					_NSNExit:
.b300	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b302	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f13					AssignNumber:
.9f13	5a		phy				phy
.9f14	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f17	85 36		sta $36				sta 	zTemp0
.9f19	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f1c	85 37		sta $37				sta 	zTemp0+1
.9f1e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f21	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f23	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f26	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f28	c9 08		cmp #$08			cmp 	#NSTFloat
.9f2a	f0 2a		beq $9f56			beq 	_ANFloat
.9f2c	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f2f	f0 05		beq $9f36			beq		_ANNotFloat
.9f31	e8		inx				inx
.9f32	20 53 b2	jsr $b253			jsr 	FloatIntegerPart 			; make it an integer
.9f35	ca		dex				dex
.9f36					_ANNotFloat:
.9f36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f39	29 03		and #$03			and 	#3
.9f3b	d0 05		bne $9f42			bne 	_ANByteWord
.9f3d	20 62 9f	jsr $9f62			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f40	80 1e		bra $9f60			bra 	_ANExit
.9f42					_ANByteWord:
.9f42	48		pha				pha 								; save count
.9f43	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f46	92 36		sta ($36)			sta 	(zTemp0)
.9f48	68		pla				pla
.9f49	c9 01		cmp #$01			cmp	 	#1
.9f4b	f0 13		beq $9f60			beq 	_ANExit
.9f4d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f50	a0 01		ldy #$01			ldy 	#1
.9f52	91 36		sta ($36),y			sta 	(zTemp0),y
.9f54	80 0a		bra $9f60			bra 	_ANExit
.9f56					_ANFloat:
.9f56	20 62 9f	jsr $9f62			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f59	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f5c	a0 04		ldy #$04			ldy 	#4
.9f5e	91 36		sta ($36),y			sta 	(zTemp0),y
.9f60					_ANExit:
.9f60	7a		ply				ply
.9f61	60		rts				rts
.9f62					_ANCopy4PackSign:
.9f62	a0 03		ldy #$03			ldy 	#3
.9f64	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f67	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f69	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f6c	91 36		sta ($36),y			sta 	(zTemp0),y
.9f6e	88		dey				dey
.9f6f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f72	91 36		sta ($36),y			sta 	(zTemp0),y
.9f74	88		dey				dey
.9f75	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f78	91 36		sta ($36),y			sta 	(zTemp0),y
.9f7a	88		dey				dey
.9f7b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f7e	91 36		sta ($36),y			sta 	(zTemp0),y
.9f80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f81					AssignString:
.9f81	5a		phy				phy
.9f82	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f85	85 38		sta $38				sta 	zTemp1
.9f87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f8a	85 39		sta $39				sta 	zTemp1+1
.9f8c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f8f	85 36		sta $36				sta 	zTemp0
.9f91	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f94	85 37		sta $37				sta 	zTemp0+1
.9f96	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f98	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f9a	f0 23		beq $9fbf			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f9c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f9d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f9f	e9 02		sbc #$02			sbc 	#2
.9fa1	85 3c		sta $3c				sta 	zsTemp
.9fa3	a0 01		ldy #$01			ldy 	#1
.9fa5	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fa7	e9 00		sbc #$00			sbc 	#0
.9fa9	85 3d		sta $3d				sta 	zsTemp+1
.9fab	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fad					_ASGetLength:
.9fad	c8		iny				iny
.9fae	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fb0	d0 fb		bne $9fad			bne 	_ASGetLength
.9fb2	98		tya				tya 								; is this length <= current length
.9fb3	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fb5	90 20		bcc $9fd7			bcc 	_ASCopyString
.9fb7	f0 1e		beq $9fd7			beq 	_ASCopyString
.9fb9	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fbb	a0 01		ldy #$01			ldy 	#1
.9fbd	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fbf					_ASNewStringRequired:
.9fbf	e8		inx				inx 								; concrete the new string.
.9fc0	20 31 b8	jsr $b831			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fc3	ca		dex				dex
.9fc4	18		clc				clc
.9fc5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fc8	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fca	92 36		sta ($36)			sta 	(zTemp0)
.9fcc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fcf	69 00		adc #$00			adc 	#0
.9fd1	a0 01		ldy #$01			ldy 	#1
.9fd3	91 36		sta ($36),y			sta 	(zTemp0),y
.9fd5	80 0d		bra $9fe4			bra 	_ASExit
.9fd7					_ASCopyString:
.9fd7	a0 00		ldy #$00			ldy 	#0
.9fd9					_ASCopyLoop:
.9fd9	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fdb	c8		iny				iny
.9fdc	c8		iny				iny
.9fdd	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fdf	88		dey				dey
.9fe0	c9 00		cmp #$00			cmp 	#0
.9fe2	d0 f5		bne $9fd9			bne 	_ASCopyLoop
.9fe4					_ASExit:
.9fe4	7a		ply				ply
.9fe5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9fe6					DereferenceTopTwo:
.9fe6	e8		inx				inx
.9fe7	20 eb 9f	jsr $9feb			jsr 	Dereference 				; deref x+1
.9fea	ca		dex				dex  								; falls through to deref x
.9feb					Dereference:
.9feb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9fee	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ff0	f0 57		beq $a049			beq 	_DRFExit 					; not a reference
.9ff2	5a		phy				phy
.9ff3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ff6	85 36		sta $36				sta 	zTemp0
.9ff8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ffb	85 37		sta $37				sta 	zTemp0+1
.9ffd	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a000	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a002	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a005	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a008	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a00a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a00c	f0 0f		beq $a01d			beq 	_DRFDereferenceTwo
.a00e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a010	f0 39		beq $a04b			beq 	_DRFFull
.a012	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a015	29 03		and #$03			and 	#3
.a017	f0 32		beq $a04b			beq 	_DRFFull 					; the whole word
.a019	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a01b	f0 07		beq $a024			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a01d					_DRFDereferenceTwo:
.a01d	a0 01		ldy #$01			ldy 	#1
.a01f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a021	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a024					_DRFClear23:
.a024	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a027	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a02a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a02d	29 18		and #$18			and 	#NSBTypeMask
.a02f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a032	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a034	d0 12		bne $a048			bne 	_DRFNotString
.a036	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a039	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a03c	d0 0a		bne $a048			bne 	_DRFNotString
.a03e	a9 4a		lda #$4a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a040	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a043	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a045	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a048					_DRFNotString
.a048	7a		ply				ply 								; restore Y and exit
.a049					_DRFExit:
.a049	60		rts				rts
.a04a					_DRFNullString:
>a04a	00						.byte 	0
.a04b					_DRFFull:
.a04b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a04d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a04f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a052	c8		iny				iny
.a053	b1 36		lda ($36),y			lda 	(zTemp0),y
.a055	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a058	c8		iny				iny
.a059	b1 36		lda ($36),y			lda 	(zTemp0),y
.a05b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a05e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a061	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a064	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a066	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a069	f0 06		beq $a071			beq 	_DRFNoExponent
.a06b	c8		iny				iny 								; if not, read the exponent as well.
.a06c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a06e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a071					_DRFNoExponent:
.a071	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a074	10 0d		bpl $a083			bpl 	_DRFExit2 					; if not, then exit.
.a076	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a078	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a07b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a07e	09 80		ora #$80			ora 	#NSBIsNegative
.a080	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a083					_DRFExit2:
.a083	7a		ply				ply
.a084	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a085					EncodeNumberStart:
.a085	38		sec				sec
.a086	80 01		bra $a089			bra 	EncodeNumberContinue+1
.a088					EncodeNumberContinue:
.a088	18		clc				clc
.a089					EncodeNumber:
.a089	08		php				php 								; save reset.
.a08a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a08c	f0 12		beq $a0a0			beq 	_ENIsOkay
.a08e	c9 30		cmp #$30			cmp 	#"0"
.a090	90 04		bcc $a096			bcc 	_ENBadNumber
.a092	c9 3a		cmp #$3a			cmp 	#"9"+1
.a094	90 0a		bcc $a0a0			bcc 	_ENIsOkay
.a096					_ENBadNumber:
.a096	28		plp				plp 								; throw saved reset
.a097	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a09a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a09c	f0 7e		beq $a11c			beq 	_ENConstructFinal
.a09e					_ENFail:
.a09e	18		clc				clc 								; not allowed
.a09f	60		rts				rts
.a0a0					_ENIsOkay:
.a0a0	28		plp				plp 								; are we restarting
.a0a1	90 15		bcc $a0b8			bcc 	_ENNoRestart
.a0a3					_ENStartEncode:
.a0a3	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0a5	f0 0c		beq $a0b3			beq 	_ENFirstDP
.a0a7	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0a9	20 02 a7	jsr $a702			jsr 	NSMSetByte
.a0ac	a9 01		lda #$01			lda 	#ESTA_Low
.a0ae					_ENExitChange:
.a0ae	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0b1	38		sec				sec
.a0b2	60		rts				rts
.a0b3					_ENFirstDP:
.a0b3	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; clear integer part
.a0b6	80 3f		bra $a0f7			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0b8					_ENNoRestart:
.a0b8	48		pha				pha 								; save on stack.
.a0b9	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0bc	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0be	f0 09		beq $a0c9			beq  	_ESTALowState
.a0c0	c9 02		cmp #$02			cmp 	#ESTA_High
.a0c2	f0 29		beq $a0ed			beq 	_ESTAHighState
.a0c4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0c6	f0 3b		beq $a103			beq 	_ESTADecimalState
>a0c8	db						.byte 	$DB 						; causes a break in the emulator
.a0c9					_ESTALowState:
.a0c9	68		pla				pla 								; get value back
.a0ca	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0cc	f0 29		beq $a0f7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0ce	29 0f		and #$0f			and 	#15 						; make digit
.a0d0	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0d3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0d6	0a		asl a				asl 	a
.a0d7	0a		asl a				asl 	a
.a0d8	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0db	0a		asl a				asl 	a
.a0dc	6d 86 04	adc $0486			adc 	DigitTemp
.a0df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0e2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0e4	90 05		bcc $a0eb			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0e6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0e8	8d 85 04	sta $0485			sta 	EncodeState
.a0eb					_ESTANoSwitch:
.a0eb	38		sec				sec
.a0ec	60		rts				rts
.a0ed					_ESTAHighState:
.a0ed	68		pla				pla 								; get value back
.a0ee	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0f0	f0 05		beq $a0f7			beq 	_ESTASwitchFloat
.a0f2	20 56 a1	jsr $a156			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0f5	38		sec				sec
.a0f6	60		rts				rts
.a0f7					_ESTASwitchFloat:
.a0f7	9c 87 04	stz $0487			stz 	DecimalCount
.a0fa	e8		inx				inx 								; zero the decimal additive.
.a0fb	20 00 a7	jsr $a700			jsr 	NSMSetZero
.a0fe	ca		dex				dex
.a0ff	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a101	80 ab		bra $a0ae			bra 	_ENExitChange
.a103					_ESTADecimalState:
.a103	68		pla				pla 								; digit.
.a104	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a106	f0 96		beq $a09e			beq 	_ENFail
.a108	e8		inx				inx 								; put digit into fractional part of X+1
.a109	20 56 a1	jsr $a156			jsr 	ESTAShiftDigitIntoMantissa
.a10c	ca		dex				dex
.a10d	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a110	ad 87 04	lda $0487			lda 	DecimalCount
.a113	c9 0b		cmp #$0b			cmp 	#11
.a115	f0 02		beq $a119			beq 	_ESTADSFail
.a117	38		sec				sec
.a118	60		rts				rts
.a119					_ESTADSFail:
.a119	4c 36 b5	jmp $b536			jmp 	RangeError
.a11c					_ENConstructFinal:
.a11c	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a11f	f0 33		beq $a154			beq 	_ENCFExit 					; no decimals
.a121	5a		phy				phy
.a122	0a		asl a				asl 	a 							; x 4 and CLC
.a123	0a		asl a				asl 	a
.a124	6d 87 04	adc $0487			adc 	DecimalCount
.a127	a8		tay				tay
.a128	b9 f5 b4	lda $b4f5,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a12b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a12e	b9 f6 b4	lda $b4f6,y			lda 	DecimalScalarTable-5+1,y
.a131	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a134	b9 f7 b4	lda $b4f7,y			lda 	DecimalScalarTable-5+2,y
.a137	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a13a	b9 f8 b4	lda $b4f8,y			lda 	DecimalScalarTable-5+3,y
.a13d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a140	b9 f9 b4	lda $b4f9,y			lda 	DecimalScalarTable-5+4,y
.a143	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a146	a9 08		lda #$08			lda 	#NSTFloat
.a148	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a14b	7a		ply				ply
.a14c	e8		inx				inx 								; multiply decimal const by decimal scalar
.a14d	20 7d b2	jsr $b27d			jsr 	FloatMultiply
.a150	ca		dex				dex
.a151	20 0a b1	jsr $b10a			jsr 	FloatAdd 					; add to integer part.
.a154					_ENCFExit:
.a154	18		clc				clc 								; reject the digit.
.a155	60		rts				rts
.a156					ESTAShiftDigitIntoMantissa:
.a156	29 0f		and #$0f			and 	#15 						; save digit
.a158	48		pha				pha
.a159	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a15c	48		pha				pha
.a15d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a160	48		pha				pha
.a161	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a164	48		pha				pha
.a165	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a168	48		pha				pha
.a169	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 2
.a16c	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 4
.a16f	18		clc				clc 								; pop mantissa and add
.a170	68		pla				pla
.a171	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a174	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a177	68		pla				pla
.a178	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a17b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a17e	68		pla				pla
.a17f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a182	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a185	68		pla				pla
.a186	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a189	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a18c	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 10
.a18f	68		pla				pla 								; add digit
.a190	18		clc				clc
.a191	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a194	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a197	90 0d		bcc $a1a6			bcc 	_ESTASDExit
.a199	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a19c	d0 08		bne $a1a6			bne 	_ESTASDExit
.a19e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1a1	d0 03		bne $a1a6			bne 	_ESTASDExit
.a1a3	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1a6					_ESTASDExit:
.a1a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1a7					EvaluateTerm:
.a1a7	b1 30		lda ($30),y			lda 	(codePtr),y
.a1a9	30 18		bmi $a1c3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1ab	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1ad	b0 6f		bcs $a21e			bcs 	_ETVariable
.a1af	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1b1	90 6e		bcc $a221			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1b3	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1b5	b0 6a		bcs $a221			bcs 	_ETPuncUnary
.a1b7	20 85 a0	jsr $a085			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1ba					_ETNumber:
.a1ba	c8		iny				iny 								; keep encoding until we have the numbers
.a1bb	b1 30		lda ($30),y			lda 	(codePtr),y
.a1bd	20 88 a0	jsr $a088			jsr 	EncodeNumberContinue
.a1c0	b0 f8		bcs $a1ba			bcs 	_ETNumber 					; go back if accepted.
.a1c2	60		rts				rts
.a1c3					_ETCheckUnary:
.a1c3	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1c5	f0 41		beq $a208			beq 	_ETString
.a1c7	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1c9	f0 12		beq $a1dd			beq 	_ETHexConstant
.a1cb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1cd	90 0b		bcc $a1da			bcc 	_ETSyntaxError
.a1cf	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1d1	b0 07		bcs $a1da			bcs 	_ETSyntaxError
.a1d3	da		phx				phx 								; push X on the stack
.a1d4	0a		asl a				asl 	a 							; put vector x 2 into X
.a1d5	aa		tax				tax
.a1d6	c8		iny				iny 								; consume unary function token
.a1d7	7c ca 96	jmp ($96ca,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1da					_ETSyntaxError:
.a1da	4c 31 b5	jmp $b531			jmp 	SyntaxError
.a1dd					_ETHexConstant:
.a1dd	c8		iny				iny 								; skip #
.a1de	c8		iny				iny 								; skip count
.a1df	20 00 a7	jsr $a700			jsr 	NSMSetZero 					; clear result
.a1e2					_ETHLoop:
.a1e2	b1 30		lda ($30),y			lda 	(codePtr),y
.a1e4	c8		iny				iny 								; and consume
.a1e5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1e7	f0 1e		beq $a207			beq 	_ETHExit
.a1e9	48		pha				pha 								; save on stack.
.a1ea	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 2
.a1ed	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 4
.a1f0	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 8
.a1f3	20 15 a7	jsr $a715			jsr 	NSMShiftLeft 				; x 16
.a1f6	68		pla				pla 								; ASCII
.a1f7	c9 41		cmp #$41			cmp 	#'A'
.a1f9	90 02		bcc $a1fd			bcc 	_ETHNotChar
.a1fb	e9 07		sbc #$07			sbc 	#7
.a1fd					_ETHNotChar:
.a1fd	29 0f		and #$0f			and 	#15 						; digit now
.a1ff	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a202	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a205	80 db		bra $a1e2			bra 	_ETHLoop 					; go round.
.a207					_ETHExit:
.a207	60		rts				rts
.a208					_ETString:
.a208	c8		iny				iny 								; look at length
.a209	b1 30		lda ($30),y			lda 	(codePtr),y
.a20b	48		pha				pha
.a20c	c8		iny				iny 								; first character
.a20d	20 4a a7	jsr $a74a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a210	68		pla				pla 								; restore count and save
.a211	85 36		sta $36				sta 	zTemp0
.a213	98		tya				tya 								; add length to Y to skip it.
.a214	18		clc				clc
.a215	65 36		adc $36				adc 	zTemp0
.a217	a8		tay				tay
.a218	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a21a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a21d	60		rts				rts
.a21e					_ETVariable:
.a21e	4c 78 a2	jmp $a278			jmp 	VariableHandler
.a221					_ETPuncUnary:
.a221	c8		iny				iny 								; consume the unary character
.a222	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a224	f0 2d		beq $a253			beq 	_ETUnaryNegate
.a226	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a228	f0 39		beq $a263			beq 	_ETDereference
.a22a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a22c	f0 43		beq $a271			beq 	_ETParenthesis
.a22e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a230	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a232	f0 06		beq $a23a			beq 	_ETIndirection
.a234	e6 36		inc $36				inc 	zTemp0
.a236	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a238	d0 a0		bne $a1da			bne 	_ETSyntaxError
.a23a					_ETIndirection:
.a23a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a23c	1a		inc a				inc 	a
.a23d	48		pha				pha
.a23e	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm				; evaluate the term
.a241	20 eb 9f	jsr $9feb			jsr 	Dereference 				; dereference it.
.a244	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a247	d0 07		bne $a250			bne 	_ETTypeMismatch
.a249	68		pla				pla 								; indirection 1-2
.a24a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a24c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a24f	60		rts				rts
.a250					_ETTypeMismatch:
.a250	4c 3b b5	jmp $b53b			jmp 	TypeError
.a253					_ETUnaryNegate:
.a253	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm				; evaluate the term
.a256	20 eb 9f	jsr $9feb			jsr 	Dereference 				; dereference it.
.a259	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a25c	29 10		and #$10			and 	#NSTString
.a25e	d0 f0		bne $a250			bne 	_ETTypeMismatch
.a260	4c ac a6	jmp $a6ac			jmp 	NSMNegate  					; just toggles the sign bit.
.a263					_ETDereference:
.a263	20 a7 a1	jsr $a1a7			jsr 	EvaluateTerm				; evaluate the term
.a266	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a269	29 20		and #$20			and 	#NSBIsReference
.a26b	f0 e3		beq $a250			beq 	_ETTypeMismatch
.a26d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a270	60		rts				rts
.a271					_ETParenthesis:
.a271	20 d6 9e	jsr $9ed6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a274	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; check for )
.a277	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a278					VariableHandler:
.a278	b1 30		lda ($30),y			lda 	(codePtr),y
.a27a	18		clc				clc
.a27b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a27d	85 37		sta $37				sta 	zTemp0+1
.a27f	c8		iny				iny
.a280	b1 30		lda ($30),y			lda 	(codePtr),y
.a282	85 36		sta $36				sta 	zTemp0
.a284	c8		iny				iny
.a285	18		clc				clc									; copy variable address+3 to mantissa
.a286	69 03		adc #$03			adc 	#3
.a288	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a28b	a5 37		lda $37				lda 	zTemp0+1
.a28d	69 00		adc #$00			adc 	#0
.a28f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a292	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a295	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a298	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a29b	5a		phy				phy
.a29c	a0 02		ldy #$02			ldy 	#2 							; read type
.a29e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2a0	7a		ply				ply
.a2a1	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2a3	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2a5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2a8	29 04		and #$04			and 	#NSBIsArray
.a2aa	d0 01		bne $a2ad			bne 	_VHArray
.a2ac	60		rts				rts
.a2ad					_VHArray:
.a2ad	e8		inx				inx
.a2ae	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2b1	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2b3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2b6	b1 30		lda ($30),y			lda 	(codePtr),y
.a2b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2ba	d0 06		bne $a2c2			bne 	_VHNoSecondIndex
.a2bc	c8		iny				iny 								; skip the comma
.a2bd	e8		inx				inx
.a2be	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2c1	ca		dex				dex
.a2c2					_VHNoSecondIndex:
.a2c2	ca		dex				dex 								; set X back.
.a2c3	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; and check the right bracket.
.a2c6	5a		phy				phy 								; save position
.a2c7	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2c9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2cb	f0 6b		beq $a338			beq 	_VHBadIndex
.a2cd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2d0	85 3e		sta $3e				sta 	zaTemp
.a2d2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2d5	85 3f		sta $3f				sta 	zaTemp+1
.a2d7	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2d9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2db	f0 02		beq $a2df			beq 	_VHHas2Mask
.a2dd	a9 ff		lda #$ff			lda 	#$FF
.a2df					_VHHas2Mask:
.a2df	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2e2	f0 54		beq $a338			beq 	_VHBadIndex
.a2e4	0a		asl a				asl 	a 							; carry will be set if a second index
.a2e5	90 09		bcc $a2f0			bcc 	_VHCheckFirstIndex
.a2e7	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2e9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2eb	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a2ee	90 48		bcc $a338			bcc 	_VHBadIndex
.a2f0					_VHCheckFirstIndex:
.a2f0	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a2f2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2f4	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a2f7	90 3f		bcc $a338			bcc 	_VHBadIndex
.a2f9	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a2fb	64 37		stz $37				stz 	zTemp0+1
.a2fd	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a300	30 0f		bmi $a311			bmi 	_VHNoMultiply
.a302	da		phx				phx
.a303	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a306	48		pha				pha
.a307	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a309	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a30b	1a		inc a				inc 	a 							; add 1 for zero base
.a30c	fa		plx				plx
.a30d	20 cd b3	jsr $b3cd			jsr 	Multiply8x8 				; calculate -> Z0
.a310	fa		plx				plx
.a311					_VHNoMultiply:
.a311	18		clc				clc
.a312	a5 36		lda $36				lda 	zTemp0
.a314	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a317	85 36		sta $36				sta 	zTemp0
.a319	a5 37		lda $37				lda 	zTemp0+1
.a31b	69 00		adc #$00			adc 	#0
.a31d	85 37		sta $37				sta 	zTemp0+1
.a31f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a322	20 c0 8d	jsr $8dc0			jsr 	ScaleByBaseType
.a325	18		clc				clc
.a326	b2 3e		lda ($3e)			lda 	(zaTemp)
.a328	65 36		adc $36				adc 	zTemp0
.a32a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a32d	a0 01		ldy #$01			ldy 	#1
.a32f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a331	65 37		adc $37				adc 	zTemp0+1
.a333	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a336	7a		ply				ply 								; restore position
.a337	60		rts				rts
.a338					_VHBadIndex:
.a338	a9 17		lda #$17		lda	#23
.a33a	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b303					AbsUnary:
.b303	fa		plx				plx 								; restore stack pos
.b304	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.b307	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b30a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b30d	29 7f		and #$7f			and 	#$7F
.b30f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b312	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a33d					AllocUnary:
.a33d	fa		plx				plx 								; restore stack pos
.a33e	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger		; get bytes required.
.a341	20 43 af	jsr $af43			jsr 	CheckRightBracket
.a344	da		phx				phx 								; save X/Y
.a345	5a		phy				phy
.a346	8a		txa				txa 								; copy X into Y
.a347	a8		tay				tay
.a348	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a34b	aa		tax				tax
.a34c	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a34f	20 5c a3	jsr $a35c			jsr 	AllocateXABytes 			; allocate memory
.a352	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a355	8a		txa				txa
.a356	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a359	7a		ply				ply
.a35a	fa		plx				plx
.a35b	60		rts				rts
.a35c					AllocateXABytes:
.a35c	5a		phy				phy
.a35d	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a360	84 36		sty $36				sty 	zTemp0
.a362	5a		phy				phy
.a363	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a366	84 37		sty $37				sty 	zTemp0+1
.a368	5a		phy				phy
.a369	18		clc				clc 								; add to low memory pointer
.a36a	6d 8c 04	adc $048c			adc 	lowMemPtr
.a36d	8d 8c 04	sta $048c			sta 	lowMemPtr
.a370	8a		txa				txa
.a371	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a374	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a377	b0 2f		bcs $a3a8			bcs 	CISSMemory
.a379	20 9a a3	jsr $a39a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a37c					_ClearMemory:
.a37c	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a37f	c5 36		cmp $36				cmp 	zTemp0
.a381	d0 07		bne $a38a			bne 	_CMClearNext
.a383	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a386	c5 37		cmp $37				cmp 	zTemp0+1
.a388	f0 0c		beq $a396			beq 	_CMExit
.a38a					_CMClearNext:
.a38a	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a38c	92 36		sta ($36)			sta 	(zTemp0)
.a38e	e6 36		inc $36				inc 	zTemp0
.a390	d0 ea		bne $a37c			bne 	_ClearMemory
.a392	e6 37		inc $37				inc		zTemp0+1
.a394	80 e6		bra $a37c			bra 	_ClearMemory
.a396					_CMExit:
.a396	fa		plx				plx
.a397	68		pla				pla
.a398	7a		ply				ply
.a399	60		rts				rts
.a39a					CheckIdentifierStringSpace:
.a39a	48		pha				pha
.a39b	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a39e	18		clc				clc
.a39f	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3a1	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3a4	b0 02		bcs $a3a8			bcs 	CISSMemory
.a3a6	68		pla				pla
.a3a7	60		rts				rts
.a3a8					CISSMemory:
.a3a8	a9 06		lda #$06		lda	#6
.a3aa	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b313					AscUnary:
.b313	fa		plx				plx 								; restore stack pos
.b314	20 4b a6	jsr $a64b			jsr 	EvaluateString 				; get a string
.b317	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b319	20 02 a7	jsr $a702			jsr 	NSMSetByte
.b31c	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b31f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b320					FracUnary:
.b320	fa		plx				plx 								; restore stack pos
.b321	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.b324	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b327	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b32a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b32c	f0 04		beq $b332			beq 	_IUZero
.b32e	20 f0 b1	jsr $b1f0			jsr 	FloatFractionalPart
.b331	60		rts				rts
.b332					_IUZero:
.b332	20 00 a7	jsr $a700			jsr 	NSMSetZero
.b335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b336					IntUnary:
.b336	fa		plx				plx 								; restore stack pos
.b337	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.b33a	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b33d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b340	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b342	f0 03		beq $b347			beq 	_IUExit
.b344	20 53 b2	jsr $b253			jsr 	FloatIntegerPart
.b347					_IUExit:
.b347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b348					LenUnary:
.b348	fa		plx				plx 								; restore stack pos
.b349	20 4b a6	jsr $a64b			jsr 	EvaluateString 				; get a string
.b34c	5a		phy				phy
.b34d	a0 00		ldy #$00			ldy 	#0 							; find length
.b34f					_LenFind:
.b34f	b1 36		lda ($36),y			lda 	(zTemp0),y
.b351	f0 06		beq $b359			beq 	_LenExit
.b353	c8		iny				iny
.b354	d0 f9		bne $b34f			bne 	_LenFind
.b356	4c 36 b5	jmp $b536			jmp 	RangeError 					; string > 255
.b359					_LenExit:
.b359	98		tya				tya
.b35a	20 02 a7	jsr $a702			jsr 	NSMSetByte
.b35d	7a		ply				ply
.b35e	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b361	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3ad					Unary_Min:
.a3ad	a9 01		lda #$01			lda 	#1
.a3af	80 02		bra $a3b3			bra 	UnaryMinMaxMain
.a3b1					Unary_Max:
.a3b1	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3b3					UnaryMinMaxMain:
.a3b3	fa		plx				plx 								; get index on number stack
.a3b4	48		pha				pha 								; save comparator
.a3b5	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get the first value.
.a3b8					_UMMMLoop:
.a3b8	b1 30		lda ($30),y			lda 	(codePtr),y
.a3ba	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3bc	f0 22		beq $a3e0			beq 	_UMMMDone
.a3be	20 4b af	jsr $af4b			jsr 	CheckComma 					; must be a comma
.a3c1	e8		inx				inx
.a3c2	20 37 a6	jsr $a637			jsr 	EvaluateValue
.a3c5	ca		dex				dex
.a3c6	20 d7 a6	jsr $a6d7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3c9	e8		inx				inx
.a3ca	20 d7 a6	jsr $a6d7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3cd	e8		inx				inx
.a3ce	20 7d 9b	jsr $9b7d			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3d1	ca		dex				dex
.a3d2	ca		dex				dex
.a3d3	85 36		sta $36				sta 	zTemp0 						; save required result
.a3d5	68		pla				pla 								; get and save comparator
.a3d6	48		pha				pha
.a3d7	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3d9	d0 dd		bne $a3b8			bne 	_UMMMLoop
.a3db	20 e3 a3	jsr $a3e3			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3de	80 d8		bra $a3b8			bra 	_UMMMLoop
.a3e0					_UMMMDone:
.a3e0	68		pla				pla 								; throw the comparator
.a3e1	c8		iny				iny 								; skip )
.a3e2	60		rts				rts
.a3e3					ExpCopyAboveDown:
.a3e3	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3e9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a3ec	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3ef	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a3f2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3f5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3f8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3fb	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a3fe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a401	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a404	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a407	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a408					Unary_Not:
.a408	fa		plx				plx
.a409	20 63 a6	jsr $a663			jsr 	EvaluateInteger 			; get integer
.a40c	20 43 af	jsr $af43			jsr 	CheckRightBracket
.a40f	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; zero mantissa ?
.a412	f0 04		beq $a418			beq 	_NotZero
.a414	20 00 a7	jsr $a700			jsr 	NSMSetZero
.a417	60		rts				rts
.a418					_NotZero:
.a418	4c 32 9b	jmp $9b32			jmp 	ReturnTrue
.a41b					_UNBad:
.a41b	4c 40 b5	jmp $b540			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a41e					Unary_Random:
.a41e	fa		plx				plx
.a41f	20 9d a4	jsr $a49d			jsr 	Random32Bit 				; get a random number
.a422	20 82 a4	jsr $a482			jsr 	URCopyToMantissa  			; put in mantissa
.a425	b1 30		lda ($30),y			lda 	(codePtr),y
.a427	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a429	f0 08		beq $a433			beq 	_URNoModulus
.a42b	e8		inx				inx
.a42c	20 78 a6	jsr $a678			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a42f	ca		dex				dex
.a430	20 c7 af	jsr $afc7			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a433					_URNoModulus:
.a433	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a436	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a439	20 43 af	jsr $af43			jsr 	CheckRightBracket
.a43c	60		rts				rts
.a43d					Unary_Rnd:
.a43d	fa		plx				plx
.a43e	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; number to use.
.a441	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; closing bracket
.a444	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a447	f0 2b		beq $a474			beq 	_URCopySeed
.a449	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a44c	10 23		bpl $a471			bpl 	_URDontSeed
.a44e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a451	49 17		eor #$17			eor 	#$17
.a453	8d 88 04	sta $0488			sta 	RandomSeed+0
.a456	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a459	49 a5		eor #$a5			eor 	#$A5
.a45b	8d 89 04	sta $0489			sta 	RandomSeed+1
.a45e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a461	49 c2		eor #$c2			eor 	#$C2
.a463	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a466	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a469	49 9d		eor #$9d			eor 	#$9D
.a46b	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a46e	20 9d a4	jsr $a49d			jsr 	Random32Bit
.a471					_URDontSeed:
.a471	20 9d a4	jsr $a49d			jsr 	Random32Bit 				; generate a number.
.a474					_URCopySeed:
.a474	20 82 a4	jsr $a482			jsr 	URCopyToMantissa 			; copy into mantissa
.a477	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a479	8d 28 04	sta $0428			sta 	NSExponent
.a47c	a9 08		lda #$08			lda 	#NSTFloat
.a47e	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a481	60		rts				rts
.a482					URCopyToMantissa:
.a482	ad 88 04	lda $0488			lda 	RandomSeed+0
.a485	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a488	ad 89 04	lda $0489			lda 	RandomSeed+1
.a48b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a48e	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a491	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a494	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a497	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a499	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a49c	60		rts				rts
.a49d					Random32Bit:
.a49d	5a		phy				phy
.a49e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4a0	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4a3	d0 03		bne $a4a8			bne 	_Random1
.a4a5	a8		tay				tay 								; if so do it 256 times
.a4a6	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4a8					_Random1:
.a4a8	0a		asl a				asl 	a 							; LSFR RNG
.a4a9	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4ac	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4af	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4b2	90 02		bcc $a4b6			bcc 	_Random2
.a4b4	49 c5		eor #$c5			eor 	#$C5
.a4b6					_Random2:
.a4b6	88		dey				dey
.a4b7	d0 ef		bne $a4a8			bne 	_Random1
.a4b9	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4bc	7a		ply				ply
.a4bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b362					SgnUnary:
.b362	fa		plx				plx 								; restore stack pos
.b363	20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.b366	20 43 af	jsr $af43			jsr 	CheckRightBracket
.b369	20 30 a7	jsr $a730			jsr 	NSMIsZero 					; if zero
.b36c	f0 10		beq $b37e			beq 	_SGZero  					; return Int Zero
.b36e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b371	48		pha				pha
.b372	a9 01		lda #$01			lda 	#1 							; set to 1
.b374	20 02 a7	jsr $a702			jsr 	NSMSetByte
.b377	68		pla				pla
.b378	29 80		and #$80			and		#$80 						; copy the sign byte out
.b37a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b37d	60		rts				rts
.b37e	20 00 a7	jsr $a700	_SGZero:jsr 	NSMSetZero
.b381	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b382					ValUnary:
.b382	fa		plx				plx 								; restore stack pos
.b383	20 98 b3	jsr $b398			jsr 	ValMainCode 				; do the main val() code
.b386	b0 01		bcs $b389			bcs 	_VUError 					; couldn't convert
.b388	60		rts				rts
.b389					_VUError:
.b389	4c 3b b5	jmp $b53b			jmp 	TypeError
.b38c					IsValUnary:
.b38c	fa		plx				plx 								; restore stack pos
.b38d	20 98 b3	jsr $b398			jsr 	ValMainCode 				; do the main val() code
.b390	b0 03		bcs $b395			bcs 	_VUBad
.b392	4c 32 9b	jmp $9b32			jmp 	ReturnTrue
.b395					_VUBad:
.b395	4c 3e 9b	jmp $9b3e			jmp 	ReturnFalse
.b398					ValMainCode:
.b398	20 4b a6	jsr $a64b			jsr 	EvaluateString 				; get a string
.b39b	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; check right bracket present
.b39e	5a		phy				phy
.b39f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3a1	f0 17		beq $b3ba			beq 	_VMCFail2
.b3a3	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3a5	48		pha				pha 								; save first character
.b3a6	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3a8	d0 01		bne $b3ab			bne 	_VMCStart
.b3aa	c8		iny				iny 								; skip over -
.b3ab					_VMCStart:
.b3ab	38		sec				sec 								; initialise first time round.
.b3ac					_VMCNext:
.b3ac	c8		iny				iny 								; pre-increment
.b3ad	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3af	f0 0c		beq $b3bd			beq 	_VMCSuccess 				; successful.
.b3b1	20 89 a0	jsr $a089			jsr 	EncodeNumber 				; send it to the number-builder
.b3b4	90 03		bcc $b3b9			bcc 	_VMCFail 					; if failed, give up.
.b3b6	18		clc				clc 								; next time round, countinue
.b3b7	80 f3		bra $b3ac			bra 	_VMCNext
.b3b9					_VMCFail:
.b3b9	68		pla				pla
.b3ba					_VMCFail2:
.b3ba	7a		ply				ply
.b3bb	38		sec				sec
.b3bc	60		rts				rts
.b3bd					_VMCSuccess:
.b3bd	a9 00		lda #$00			lda 	#0 							; construct final
.b3bf	20 89 a0	jsr $a089			jsr 	EncodeNumber
.b3c2	68		pla				pla
.b3c3	c9 2d		cmp #$2d			cmp 	#"-"
.b3c5	d0 03		bne $b3ca			bne 	_VMCNotNegative
.b3c7	20 ac a6	jsr $a6ac			jsr		NSMNegate
.b3ca					_VMCNotNegative:
.b3ca	7a		ply				ply
.b3cb	18		clc				clc
.b3cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4be					ChrUnary:
.a4be	fa		plx				plx 								; restore stack pos
.a4bf	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger			; get value
.a4c2	48		pha				pha
.a4c3	20 43 af	jsr $af43			jsr 	CheckRightBracket
.a4c6	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4c8	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate
.a4cb	68		pla				pla 								; write number to it
.a4cc	20 f0 b8	jsr $b8f0			jsr 	StringTempWrite
.a4cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4d0					SpcUnary:
.a4d0	fa		plx				plx 								; restore stack pos
.a4d1	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger			; get value
.a4d4	5a		phy				phy
.a4d5	48		pha				pha 								; save count
.a4d6	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate
.a4d9	7a		ply				ply 								; to do count in Y
.a4da					_SpcLoop:
.a4da	c0 00		cpy #$00			cpy 	#0
.a4dc	f0 08		beq $a4e6			beq 	_SpcExit
.a4de	a9 20		lda #$20			lda 	#32
.a4e0	20 f0 b8	jsr $b8f0			jsr 	StringTempWrite
.a4e3	88		dey				dey
.a4e4	80 f4		bra $a4da			bra 	_SPCLoop
.a4e6					_SpcExit:
.a4e6	7a		ply				ply
.a4e7	20 43 af	jsr $af43			jsr 	CheckRightBracket
.a4ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4eb					Unary_Str:
.a4eb	fa		plx				plx
.a4ec	20 40 a6	jsr $a640			jsr 	EvaluateNumber  			; get number
.a4ef	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; closing bracket
.a4f2	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4f4	20 0d a5	jsr $a50d			jsr 	ConvertNumberToString 		; do the conversion.
.a4f7	a9 21		lda #$21			lda		#33 						; create buffer
.a4f9	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate 			; allocate memory
.a4fc	da		phx				phx
.a4fd	a2 00		ldx #$00			ldx 	#0
.a4ff					_USCopy:
.a4ff	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a502	20 f0 b8	jsr $b8f0			jsr 	StringTempWrite
.a505	e8		inx				inx
.a506	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a509	d0 f4		bne $a4ff			bne 	_USCopy
.a50b	fa		plx				plx
.a50c	60		rts				rts
.a50d					ConvertNumberToString:
.a50d	5a		phy				phy 								; save code position
.a50e	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a511	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a514	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a517	10 0a		bpl $a523			bpl 	_CNTSNotNegative
.a519	29 7f		and #$7f			and 	#$7F 						; make +ve
.a51b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a51e	a9 2d		lda #$2d			lda 	#"-"
.a520	20 89 a5	jsr $a589			jsr 	WriteDecimalBuffer
.a523					_CNTSNotNegative:
.a523	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a526	f0 15		beq $a53d			beq 	_CNTSNotFloat
.a528	e8		inx				inx 								; round up
.a529	a9 01		lda #$01			lda 	#1
.a52b	20 02 a7	jsr $a702			jsr 	NSMSetByte
.a52e	ca		dex				dex
.a52f	bd 28 04	lda $0428,x			lda		NSExponent,x
.a532	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a535	a9 08		lda #$08			lda 	#NSTFloat
.a537	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a53a	20 0a b1	jsr $b10a			jsr 	FloatAdd
.a53d					_CNTSNotFloat:
.a53d	20 6b a5	jsr $a56b			jsr 	MakePlusTwoString
.a540	20 f0 b1	jsr $b1f0			jsr 	FloatFractionalPart 		; get the fractional part
.a543	20 b4 b2	jsr $b2b4			jsr 	NSNormalise					; normalise , exit if zero
.a546	f0 21		beq $a569			beq 	_CNTSExit
.a548	a9 2e		lda #$2e			lda 	#"."
.a54a	20 89 a5	jsr $a589			jsr 	WriteDecimalBuffer 			; write decimal place
.a54d					_CNTSDecimal:
.a54d	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a550	30 17		bmi $a569			bmi 	_CNTSExit
.a552	e8		inx				inx 								; x 10.0
.a553	a9 0a		lda #$0a			lda 	#10
.a555	20 02 a7	jsr $a702			jsr 	NSMSetByte
.a558	a9 08		lda #$08			lda 	#NSTFloat
.a55a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a55d	ca		dex				dex
.a55e	20 7d b2	jsr $b27d			jsr 	FloatMultiply
.a561	20 6b a5	jsr $a56b			jsr 	MakePlusTwoString
.a564	20 f0 b1	jsr $b1f0			jsr 	FloatFractionalPart 		; get the fractional part
.a567	80 e4		bra $a54d			bra 	_CNTSDecimal 				; keep going.
.a569					_CNTSExit:
.a569	7a		ply				ply
.a56a	60		rts				rts
.a56b					MakePlusTwoString:
.a56b	da		phx				phx
.a56c	20 d7 a6	jsr $a6d7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a56f	e8		inx				inx 								; access it
.a570	e8		inx				inx
.a571	20 53 b2	jsr $b253			jsr 	FloatIntegerPart 			; make it an integer
.a574	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a576	20 b4 b0	jsr $b0b4			jsr 	ConvertInt32
.a579	a2 00		ldx #$00			ldx	 	#0
.a57b					_MPTSCopy:
.a57b	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a57e	20 89 a5	jsr $a589			jsr 	WriteDecimalBuffer
.a581	e8		inx				inx
.a582	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a585	d0 f4		bne $a57b			bne 	_MPTSCopy
.a587	fa		plx				plx
.a588	60		rts				rts
.a589					WriteDecimalBuffer:
.a589	da		phx				phx
.a58a	ae 95 04	ldx $0495			ldx 	dbOffset
.a58d	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a590	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a593	ee 95 04	inc $0495			inc 	dbOffset
.a596	fa		plx				plx
.a597	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a598					Unary_Left:
.a598	fa		plx				plx
.a599	18		clc				clc 								; only one parameter
.a59a	20 0f a6	jsr $a60f			jsr 	SubstringInitial 			; set up.
.a59d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5a0	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5a3	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5a6	80 2c		bra $a5d4			bra 	SubstringMain
.a5a8					Unary_Right:
.a5a8	fa		plx				plx
.a5a9	18		clc				clc 								; only one parameter
.a5aa	20 0f a6	jsr $a60f			jsr 	SubstringInitial 			; set up.
.a5ad	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5b0	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5b3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5b6	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5b9	b0 02		bcs $a5bd			bcs 	_URNotUnderflow
.a5bb	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5bd					_URNotUnderFlow:
.a5bd	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5c0	80 12		bra $a5d4			bra 	SubStringMain
.a5c2					Unary_Mid:
.a5c2	fa		plx				plx
.a5c3	38		sec				sec 								; two parameters
.a5c4	20 0f a6	jsr $a60f			jsr 	SubstringInitial 			; set up.
.a5c7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5ca	f0 05		beq $a5d1			beq 	_UMError
.a5cc	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5cf	80 03		bra $a5d4			bra 	SubStringMain
.a5d1					_UMError:
.a5d1	4c 40 b5	jmp $b540			jmp 	ArgumentError
.a5d4					SubStringMain:
.a5d4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5d7	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5da	b0 2d		bcs $a609			bcs 	_SSMNull 					; if so, return an empty string.
.a5dc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5df	f0 28		beq $a609			beq 	_SSMNull 					; return empty string.
.a5e1	18		clc				clc 								; add the offset +1 to the address and
.a5e2	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5e5	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5e8	85 36		sta $36				sta 	zTemp0
.a5ea	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a5ed	69 00		adc #$00			adc 	#0
.a5ef	85 37		sta $37				sta 	zTemp0+1
.a5f1					_SSMNoCarry:
.a5f1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5f4	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate 			; allocate that many characters
.a5f7	5a		phy				phy 								; save Y
.a5f8	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5fa					_SSMCopy:
.a5fa	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5fc	f0 09		beq $a607			beq 	_SSMEString 				; no more to copy
.a5fe	20 f0 b8	jsr $b8f0			jsr 	StringTempWrite 			; and write it out.
.a601	c8		iny				iny
.a602	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a605	d0 f3		bne $a5fa			bne 	_SSMCopy
.a607					_SSMEString:
.a607	7a		ply				ply
.a608					_SSMExit:
.a608	60		rts				rts
.a609					_SSMNull:
.a609	a9 00		lda #$00			lda 	#0
.a60b	20 b2 b8	jsr $b8b2			jsr 	StringTempAllocate
.a60e	60		rts				rts
.a60f					SubstringInitial:
.a60f	da		phx				phx 								; save initial stack position
.a610	08		php				php 								; save carry on stack indicating 2 parameters
.a611	20 4b a6	jsr $a64b			jsr 	EvaluateString 				; get a string
.a614	5a		phy				phy 								; calculate length to exponent.
.a615	a0 ff		ldy #$ff			ldy 	#$FF
.a617					_SIFindLength:
.a617	c8		iny				iny
.a618	b1 36		lda ($36),y			lda 	(zTemp0),y
.a61a	d0 fb		bne $a617			bne 	_SIFindLength
.a61c	98		tya				tya
.a61d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a620	7a		ply				ply
.a621	e8		inx				inx
.a622	20 4b af	jsr $af4b			jsr 	CheckComma 					; comma next
.a625	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get next parameter
.a628	28		plp				plp 								; is it the last parameter ?
.a629	90 07		bcc $a632			bcc 	_SSIExit 					; if so, exit.
.a62b	e8		inx				inx
.a62c	20 4b af	jsr $af4b			jsr 	CheckComma 					; comma next
.a62f	20 98 a6	jsr $a698			jsr 	Evaluate8BitInteger 		; get last parameter
.a632					_SSIExit:
.a632	fa		plx				plx
.a633	20 43 af	jsr $af43			jsr 	CheckRightBracket 			; check closing bracket
.a636	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a637					EvaluateValue:
.a637	48		pha				pha
.a638	20 d6 9e	jsr $9ed6			jsr		EvaluateExpression 			; expression
.a63b	20 eb 9f	jsr $9feb			jsr 	Dereference					; derefernce it
.a63e	68		pla				pla
.a63f	60		rts				rts
.a640					EvaluateNumber:
.a640	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get a value
.a643	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a646	29 10		and #$10			and 	#NSBIsString
.a648	d0 16		bne $a660			bne 	HelperTypeError
.a64a	60		rts				rts
.a64b					EvaluateString:
.a64b	20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get a value
.a64e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a651	29 10		and #$10			and 	#NSBIsString
.a653	f0 0b		beq $a660			beq 	HelperTypeError
.a655					CopyAddressToTemp0:
.a655	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a658	85 36		sta $36				sta 	zTemp0
.a65a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a65d	85 37		sta $37				sta 	zTemp0+1
.a65f	60		rts				rts
.a660					HelperTypeError:
.a660	4c 3b b5	jmp $b53b			jmp 	TypeError
.a663					EvaluateInteger:
.a663	20 40 a6	jsr $a640			jsr 	EvaluateNumber
.a666	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a669	d0 0a		bne $a675			bne 	HelperValueError 			; if not, it's a float.
.a66b	60		rts				rts
.a66c					EvaluateUnsignedInteger:
.a66c	20 63 a6	jsr $a663			jsr 	EvaluateInteger 			; check integer is +ve
.a66f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a672	30 01		bmi $a675			bmi 	HelperValueError
.a674	60		rts				rts
.a675					HelperValueError:
.a675	4c 40 b5	jmp $b540			jmp 	ArgumentError
.a678					Evaluate16BitInteger:
.a678	20 6c a6	jsr $a66c			jsr	 	EvaluateUnsignedInteger		; get integer
.a67b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a67e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a681	d0 f2		bne $a675			bne 	HelperValueError
.a683	60		rts				rts
.a684					Evaluate16BitIntegerSigned:
.a684	20 63 a6	jsr $a663			jsr	 	EvaluateInteger				; get integer
.a687	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a68a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a68d	d0 e6		bne $a675			bne 	HelperValueError
.a68f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a692	10 03		bpl $a697			bpl 	_EISNotSigned
.a694	20 b5 a6	jsr $a6b5			jsr 	NSMNegateMantissa
.a697					_EISNotSigned:
.a697	60		rts				rts
.a698					Evaluate8BitInteger:
.a698	20 6c a6	jsr $a66c			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a69b	d0 d8		bne $a675			bne 	HelperValueError
.a69d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6a0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6a3	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6a6	d0 cd		bne $a675			bne 	HelperValueError
.a6a8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3cd					Multiply8x8:
.b3cd	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3ce	85 36		sta $36			  	sta 	zTemp0
.b3d0	86 37		stx $37				stx 	zTemp0+1
.b3d2	a9 00		lda #$00			lda 	#0
.b3d4	a2 08		ldx #$08			ldx 	#8
.b3d6					_M88Loop:
.b3d6	90 03		bcc $b3db			bcc 	_M88NoAdd
.b3d8	18		clc				clc
.b3d9	65 37		adc $37				adc 	zTemp0+1
.b3db					_M88NoAdd:
.b3db	6a		ror a				ror 	a
.b3dc	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3de	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3df	d0 f5		bne $b3d6			bne 	_M88Loop
.b3e1	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6ac					NSMNegate:
.a6ac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6af	49 80		eor #$80			eor 	#NSBIsNegative
.a6b1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6b4	60		rts				rts
.a6b5					NSMNegateMantissa:
.a6b5	38		sec				sec
.a6b6	a9 00		lda #$00			lda 	#0
.a6b8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6be	a9 00		lda #$00			lda 	#0
.a6c0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6c3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6c6	a9 00		lda #$00			lda 	#0
.a6c8	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6cb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6ce	a9 00		lda #$00			lda 	#0
.a6d0	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6d3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6d6	60		rts				rts
.a6d7					NSMShiftUpTwo:
.a6d7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6da	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6e0	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6e3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6e6	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6e9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6ec	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a6ef	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a6f2	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a6f5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6f8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a6fb	60		rts				rts
.a6fc					NSMSetZeroMantissaOnly:
.a6fc	a9 00		lda #$00			lda 	#0
.a6fe	80 08		bra $a708			bra 	NSMSetMantissa
.a700					NSMSetZero:
.a700	a9 00		lda #$00			lda 	#0
.a702					NSMSetByte:
.a702	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a705	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a708					NSMSetMantissa:
.a708	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a70b	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a70e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a711	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a714	60		rts				rts
.a715					NSMShiftLeft:
.a715	18		clc				clc
.a716					NSMRotateLeft:
.a716	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a719	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a71c	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a71f	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a722	60		rts				rts
.a723					NSMShiftRight:
.a723	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a726	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a729	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a72c	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a72f	60		rts				rts
.a730					NSMIsZero:
.a730	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a733	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a736	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a739	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a73c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3e4					Assemble_ora:
.b3e4	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3e7	01					.byte $01
.b3e8					Assemble_and:
.b3e8	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3eb	21					.byte $21
.b3ec					Assemble_eor:
.b3ec	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3ef	41					.byte $41
.b3f0					Assemble_adc:
.b3f0	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3f3	61					.byte $61
.b3f4					Assemble_sta:
.b3f4	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3f7	81					.byte $81
.b3f8					Assemble_lda:
.b3f8	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3fb	a1					.byte $a1
.b3fc					Assemble_cmp:
.b3fc	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3ff	c1					.byte $c1
.b400					Assemble_sbc:
.b400	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b403	e1					.byte $e1
.b404					Assemble_asl:
.b404	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b407	02					.byte $02
>b408	75					.byte $75
.b409					Assemble_rol:
.b409	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b40c	22					.byte $22
>b40d	75					.byte $75
.b40e					Assemble_lsr:
.b40e	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b411	42					.byte $42
>b412	75					.byte $75
.b413					Assemble_ror:
.b413	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b416	62					.byte $62
>b417	75					.byte $75
.b418					Assemble_stx:
.b418	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b41b	82					.byte $82
>b41c	50					.byte $50
.b41d					Assemble_ldx:
.b41d	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b420	a2					.byte $a2
>b421	d0					.byte $d0
.b422					Assemble_dec:
.b422	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b425	c2					.byte $c2
>b426	55					.byte $55
.b427					Assemble_inc:
.b427	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b42a	e2					.byte $e2
>b42b	55					.byte $55
.b42c					Assemble_stz:
.b42c	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b42f	60					.byte $60
>b430	44					.byte $44
.b431					Assemble_bit:
.b431	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b434	20					.byte $20
>b435	55					.byte $55
.b436					Assemble_sty:
.b436	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b439	80					.byte $80
>b43a	54					.byte $54
.b43b					Assemble_ldy:
.b43b	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b43e	a0					.byte $a0
>b43f	d5					.byte $d5
.b440					Assemble_cpy:
.b440	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b443	c0					.byte $c0
>b444	d4					.byte $d4
.b445					Assemble_cpx:
.b445	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b448	e0					.byte $e0
>b449	d0					.byte $d0
.b44a					Assemble_tsb:
.b44a	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b44d	00					.byte $00
>b44e	50					.byte $50
.b44f					Assemble_trb:
.b44f	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b452	10					.byte $10
>b453	50					.byte $50
.b454					Assemble_jsr:
.b454	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b457	14					.byte $14
>b458	10					.byte $10
.b459					Assemble_jmp:
.b459	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b45c	40					.byte $40
>b45d	10					.byte $10
.b45e					Assemble_bpl:
.b45e	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b461	10					.byte $10
.b462					Assemble_bmi:
.b462	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b465	30					.byte $30
.b466					Assemble_bvc:
.b466	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b469	50					.byte $50
.b46a					Assemble_bvs:
.b46a	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b46d	70					.byte $70
.b46e					Assemble_bcc:
.b46e	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b471	90					.byte $90
.b472					Assemble_bcs:
.b472	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b475	b0					.byte $b0
.b476					Assemble_bne:
.b476	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b479	d0					.byte $d0
.b47a					Assemble_beq:
.b47a	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b47d	f0					.byte $f0
.b47e					Assemble_bra:
.b47e	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b481	80					.byte $80
.b482					Assemble_brk:
.b482	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b485	00					.byte $00
.b486					Assemble_php:
.b486	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b489	08					.byte $08
.b48a					Assemble_clc:
.b48a	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b48d	18					.byte $18
.b48e					Assemble_plp:
.b48e	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b491	28					.byte $28
.b492					Assemble_sec:
.b492	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b495	38					.byte $38
.b496					Assemble_rti:
.b496	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b499	40					.byte $40
.b49a					Assemble_pha:
.b49a	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b49d	48					.byte $48
.b49e					Assemble_cli:
.b49e	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a1	58					.byte $58
.b4a2					Assemble_phy:
.b4a2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a5	5a					.byte $5a
.b4a6					Assemble_rts:
.b4a6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a9	60					.byte $60
.b4aa					Assemble_pla:
.b4aa	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4ad	68					.byte $68
.b4ae					Assemble_sei:
.b4ae	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b1	78					.byte $78
.b4b2					Assemble_ply:
.b4b2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b5	7a					.byte $7a
.b4b6					Assemble_dey:
.b4b6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b9	88					.byte $88
.b4ba					Assemble_txa:
.b4ba	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4bd	8a					.byte $8a
.b4be					Assemble_tya:
.b4be	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c1	98					.byte $98
.b4c2					Assemble_txs:
.b4c2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c5	9a					.byte $9a
.b4c6					Assemble_tay:
.b4c6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c9	a8					.byte $a8
.b4ca					Assemble_tax:
.b4ca	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4cd	aa					.byte $aa
.b4ce					Assemble_clv:
.b4ce	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d1	b8					.byte $b8
.b4d2					Assemble_tsx:
.b4d2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d5	ba					.byte $ba
.b4d6					Assemble_iny:
.b4d6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d9	c8					.byte $c8
.b4da					Assemble_dex:
.b4da	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4dd	ca					.byte $ca
.b4de					Assemble_cld:
.b4de	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e1	d8					.byte $d8
.b4e2					Assemble_phx:
.b4e2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e5	da					.byte $da
.b4e6					Assemble_stp:
.b4e6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e9	db					.byte $db
.b4ea					Assemble_inx:
.b4ea	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4ed	e8					.byte $e8
.b4ee					Assemble_nop:
.b4ee	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f1	ea					.byte $ea
.b4f2					Assemble_sed:
.b4f2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f5	f8					.byte $f8
.b4f6					Assemble_plx:
.b4f6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f9	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b4fa					DecimalScalarTable:
>b4fa	66 66 66 66				.dword $66666666 ; 0.1
>b4fe	de					.byte $de
>b4ff	1f 85 eb 51				.dword $51eb851f ; 0.01
>b503	db					.byte $db
>b504	4c 37 89 41				.dword $4189374c ; 0.001
>b508	d8					.byte $d8
>b509	ac 8b db 68				.dword $68db8bac ; 0.0001
>b50d	d4					.byte $d4
>b50e	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b512	d1					.byte $d1
>b513	83 de 1b 43				.dword $431bde83 ; 1e-06
>b517	ce					.byte $ce
>b518	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b51c	ca					.byte $ca
>b51d	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b521	c7					.byte $c7
>b522	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b526	c4					.byte $c4
>b527	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b52b	c0					.byte $c0
>b52c	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b530	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b531					SyntaxError:
.b531	a9 02		lda #$02		lda	#2
.b533	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b536					RangeError:
.b536	a9 04		lda #$04		lda	#4
.b538	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b53b					TypeError:
.b53b	a9 05		lda #$05		lda	#5
.b53d	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b540					ArgumentError:
.b540	a9 07		lda #$07		lda	#7
.b542	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b545					NotDoneError:
.b545	a9 0c		lda #$0c		lda	#12
.b547	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b54a					ErrorText:
>b54a	42 72 65 61 6b 00			.text	"Break",0
>b550	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b558	72 72 6f 72 00
>b55d	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b565	20 62 79 20 7a 65 72 6f 00
>b56e	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b576	61 6e 67 65 00
>b57b	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b583	6d 61 74 63 68 00
>b589	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b591	65 6d 6f 72 79 00
>b597	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b59f	61 72 67 75 6d 65 6e 74 00
>b5a8	53 74 6f 70 00				.text	"Stop",0
>b5ad	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5b5	6f 6f 20 6c 6f 6e 67 00
>b5bd	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5c5	6e 20 66 61 69 6c 65 64 00
>b5ce	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5d6	61 74 61 00
>b5da	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5e2	65 6e 74 65 64 00
>b5e8	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b5f0	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b5fc	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b604	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b611	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b619	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b626	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b62e	68 6f 75 74 20 57 68 69 6c 65 00
>b639	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b641	68 6f 75 74 20 46 6f 72 00
>b64a	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b652	61 63 6b 20 66 75 6c 6c 00
>b65b	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b663	75 63 74 75 72 65 00
>b66a	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b672	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b67f	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b687	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b695	41 72 72 61 79 20 73 69			.text	"Array size",0
>b69d	7a 65 00
>b6a0	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6a8	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6b0	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>b6b8	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>b6c8	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6d5					EXTInitialise:
.b6d5	64 01		stz $01				stz 	1 							; Access I/O
.b6d7	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6da	9c 08 d0	stz $d008			stz 	$D008
.b6dd	9c 09 d0	stz $d009			stz 	$D009
.b6e0	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6e2	8d 58 d6	sta $d658			sta 	$D658
.b6e5	60		rts				rts
.b6e6					EXTClearScreen:
.b6e6	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6e9					EXTPrintCharacter:
.b6e9	48		pha				pha
.b6ea	da		phx				phx
.b6eb	5a		phy				phy
.b6ec	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b6ef	7a		ply				ply
.b6f0	fa		plx				plx
.b6f1	68		pla				pla
.b6f2	60		rts				rts
.b6f3					EXTInputSingleCharacter:
.b6f3	da		phx				phx
.b6f4	5a		phy				phy
.b6f5					_EISCWait:
.b6f5	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b6f8	c9 00		cmp #$00			cmp 	#0
.b6fa	f0 f9		beq $b6f5			beq 	_EISCWait
.b6fc	7a		ply				ply
.b6fd	fa		plx				plx
.b6fe	60		rts				rts
.b6ff					EXTInputLine:
.b6ff	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b701					_ILLoop:
.b701	da		phx				phx 								; read character in
.b702	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b705	fa		plx				plx
.b706	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b708	f0 12		beq $b71c			beq 	_ILBackspace
.b70a	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b70c	f0 15		beq $b723			beq 	_ILExit
.b70e	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b710	90 ef		bcc $b701			bcc 	_ILLoop
.b712	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b714	f0 eb		beq $b701			beq 	_ILLoop
.b716	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b719	e8		inx				inx
.b71a	80 e5		bra $b701			bra 	_ILLoop
.b71c					_ILBackspace:
.b71c	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b71e	f0 e1		beq $b701			beq 	_ILLoop
.b720	ca		dex				dex 								; back one.
.b721	80 de		bra $b701			bra 	_ILLoop
.b723					_ILExit:
.b723	20 e9 b6	jsr $b6e9			jsr 	EXTPrintCharacter
.b726	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b729	60		rts				rts
.b72a					EXTBreakCheck:
.b72a	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b72d					EXTReadController:
.b72d	da		phx				phx
.b72e	a2 00		ldx #$00			ldx 	#0
.b730	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b732	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b735	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b737	f0 04		beq $b73d			beq 	_NoSet1
.b739	8a		txa				txa
.b73a	09 01		ora #$01			ora 	#1
.b73c	aa		tax				tax
.b73d					_NoSet1:
.b73d	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b73f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b742	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b744	f0 04		beq $b74a			beq 	_NoSet1
.b746	8a		txa				txa
.b747	09 02		ora #$02			ora 	#2
.b749	aa		tax				tax
.b74a					_NoSet1:
.b74a	a9 06		lda #$06			lda 	#(($32) >> 3)
.b74c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b74f	29 04		and #$04			and 	#($01 << (($32) & 7))
.b751	f0 04		beq $b757			beq 	_NoSet1
.b753	8a		txa				txa
.b754	09 04		ora #$04			ora 	#4
.b756	aa		tax				tax
.b757					_NoSet1:
.b757	a9 04		lda #$04			lda 	#(($25) >> 3)
.b759	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b75c	29 20		and #$20			and 	#($01 << (($25) & 7))
.b75e	f0 04		beq $b764			beq 	_NoSet1
.b760	8a		txa				txa
.b761	09 08		ora #$08			ora 	#8
.b763	aa		tax				tax
.b764					_NoSet1:
.b764	a9 04		lda #$04			lda 	#(($26) >> 3)
.b766	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b769	29 40		and #$40			and 	#($01 << (($26) & 7))
.b76b	f0 04		beq $b771			beq 	_NoSet1
.b76d	8a		txa				txa
.b76e	09 10		ora #$10			ora 	#16
.b770	aa		tax				tax
.b771					_NoSet1:
.b771	8a		txa				txa
.b772	fa		plx				plx
.b773	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b774					MemoryDeleteLine:
.b774	20 93 b7	jsr $b793			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b777	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b779	a8		tay				tay
.b77a					_MDDLLoop:
.b77a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b77c	92 30		sta ($30)			sta 	(codePtr)
.b77e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b780	c5 3a		cmp $3a				cmp 	zTemp2
.b782	d0 07		bne $b78b			bne 	_MDLDLNext
.b784	a5 31		lda $31				lda 	codePtr+1
.b786	c5 3b		cmp $3b				cmp 	zTemp2+1
.b788	d0 01		bne $b78b			bne 	_MDLDLNext
.b78a					_MDDLExit:
.b78a	60		rts				rts
.b78b					_MDLDLNext:
.b78b	e6 30		inc $30				inc 	codePtr						; next byte
.b78d	d0 eb		bne $b77a			bne 	_MDDLLoop
.b78f	e6 31		inc $31				inc 	codePtr+1
.b791	80 e7		bra $b77a			bra 	_MDDLLoop
.b793					IMemoryFindEnd:
.b793	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b795	85 3a		sta $3a				sta 	0+zTemp2
.b797	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b799	85 3b		sta $3b				sta 	1+zTemp2
.b79b					_MDLFELoop:
.b79b	b2 3a		lda ($3a)			lda 	(zTemp2)
.b79d	f0 0b		beq $b7aa			beq 	_MDLFEExit
.b79f	18		clc				clc
.b7a0	65 3a		adc $3a				adc 	zTemp2
.b7a2	85 3a		sta $3a				sta 	zTemp2
.b7a4	90 f5		bcc $b79b			bcc 	_MDLFELoop
.b7a6	e6 3b		inc $3b				inc 	zTemp2+1
.b7a8	80 f1		bra $b79b			bra 	_MDLFELoop
.b7aa					_MDLFEExit:
.b7aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7ab					MemoryInsertLine:
.b7ab	08		php				php
.b7ac	20 93 b7	jsr $b793			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7af	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7b1	1a		inc a				inc 	a
.b7b2	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7b4	b0 36		bcs $b7ec			bcs 	_MDLIError
.b7b6	28		plp				plp
.b7b7	90 08		bcc $b7c1			bcc 	_MDLIFound
.b7b9	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7bb	85 30		sta $30				sta 	codePtr
.b7bd	a5 3b		lda $3b				lda 	zTemp2+1
.b7bf	85 31		sta $31				sta 	codePtr+1
.b7c1					_MDLIFound:
.b7c1	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7c4	a8		tay				tay
.b7c5					_MDLIInsert:
.b7c5	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7c7	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7c9	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7cb	c5 3a		cmp $3a				cmp 	zTemp2
.b7cd	d0 06		bne $b7d5			bne 	_MDLINext
.b7cf	a5 31		lda $31				lda 	codePtr+1
.b7d1	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7d3	f0 0a		beq $b7df			beq 	_MDLIHaveSpace
.b7d5					_MDLINext:
.b7d5	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7d7	d0 02		bne $b7db			bne 	_MDLINoBorrow
.b7d9	c6 3b		dec $3b				dec 	zTemp2+1
.b7db					_MDLINoBorrow:
.b7db	c6 3a		dec $3a				dec 	zTemp2
.b7dd	80 e6		bra $b7c5			bra 	_MDLIInsert
.b7df					_MDLIHaveSpace:
.b7df	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7e2	88		dey				dey 								; from offset-1 to 0
.b7e3					_MDLICopy:
.b7e3	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7e6	91 30		sta ($30),y			sta 	(codePtr),y
.b7e8	88		dey				dey
.b7e9	10 f8		bpl $b7e3			bpl 	_MDLICopy
.b7eb	60		rts				rts
.b7ec					_MDLIError:
.b7ec	a9 06		lda #$06		lda	#6
.b7ee	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b7f1					MDLAppendLine:
.b7f1	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b7f3	85 36		sta $36				sta 	zTemp0
.b7f5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7f7	85 38		sta $38				sta 	0+zTemp1
.b7f9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7fb	85 39		sta $39				sta 	1+zTemp1
.b7fd	b2 38		lda ($38)			lda 	(zTemp1)
.b7ff	d0 0a		bne $b80b			bne 	_MDLANoInitialise
.b801	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b803	8d ea 06	sta $06ea			sta 	0+AppendPointer
.b806	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b808	8d eb 06	sta $06eb			sta 	1+AppendPointer
.b80b					_MDLANoInitialise:
.b80b	18		clc				clc
.b80c	ad ea 06	lda $06ea			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b80f	85 38		sta $38				sta 	zTemp1
.b811	72 36		adc ($36)			adc 	(zTemp0)
.b813	8d ea 06	sta $06ea			sta 	AppendPointer
.b816	ad eb 06	lda $06eb			lda 	AppendPointer+1
.b819	85 39		sta $39				sta 	zTemp1+1
.b81b	69 00		adc #$00			adc 	#0
.b81d	8d eb 06	sta $06eb			sta 	AppendPointer+1
.b820	a0 00		ldy #$00			ldy 	#0
.b822					_MDLACopy:
.b822	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b824	91 38		sta ($38),y			sta 	(zTemp1),y
.b826	c8		iny				iny
.b827	98		tya				tya
.b828	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b82a	d0 f6		bne $b822			bne 	_MDLACopy
.b82c	a9 00		lda #$00			lda 	#0 							; end of program.
.b82e	91 38		sta ($38),y			sta 	(zTemp1),y
.b830	60		rts				rts
.06ea					AppendPointer:
>06ea							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a73d					MemoryNew:
.a73d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a73f	85 30		sta $30				sta 	codePtr
.a741	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a743	85 31		sta $31				sta 	codePtr+1
.a745	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a747	92 30		sta ($30)			sta 	(codePtr)
.a749	60		rts				rts
.a74a					MemoryInline:
.a74a	98		tya				tya 								; put address into stack,x
.a74b	18		clc				clc
.a74c	65 30		adc $30				adc 	codePtr
.a74e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a751	a5 31		lda $31				lda 	codePtr+1
.a753	69 00		adc #$00			adc 	#0
.a755	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a758	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a75b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a75e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a75f					MemorySearch:
.a75f	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a761	86 37		stx $37				stx 	zTemp0+1
.a763	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a765	85 30		sta $30				sta 	codePtr
.a767	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a769	85 31		sta $31				sta 	codePtr+1
.a76b					_MTAXLoop:
.a76b	b2 30		lda ($30)			lda 	(codePtr)
.a76d	18		clc				clc
.a76e	f0 21		beq $a791			beq 	_MTAXExit 					; reached end, exit with CC.
.a770	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a772	b1 30		lda ($30),y			lda 	(codePtr),y
.a774	38		sec				sec
.a775	e5 36		sbc $36				sbc 	zTemp0
.a777	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a779	c8		iny				iny 								; do the MSB
.a77a	b1 30		lda ($30),y			lda 	(codePtr),y
.a77c	e5 37		sbc $37				sbc 	zTemp0+1
.a77e	05 38		ora $38				ora 	zTemp1
.a780	f0 0f		beq $a791			beq 	_MTAXExit	 				; found
.a782	b0 0d		bcs $a791			bcs 	_MTAXExit 					; current < required exit
.a784	18		clc				clc
.a785	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a787	65 30		adc $30				adc 	codePtr
.a789	85 30		sta $30				sta 	codePtr
.a78b	90 02		bcc $a78f			bcc 	_CREExit
.a78d	e6 31		inc $31				inc 	codePtr+1
.a78f					_CREExit:
.a78f	80 da		bra $a76b			bra 	_MTAXLoop
.a791					_MTAXExit:
.a791	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a792					StackPushByte:
.a792	48		pha				pha 								; save byte
.a793	a5 34		lda $34				lda 	BasicStack
.a795	d0 09		bne $a7a0			bne 	_SPBNoBorrow
.a797	c6 35		dec $35				dec 	BasicStack+1
.a799	48		pha				pha
.a79a	a5 35		lda $35				lda 	BasicStack+1
.a79c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a79e	90 06		bcc $a7a6			bcc 	_SPBMemory
.a7a0					_SPBNoBorrow:
.a7a0	c6 34		dec $34				dec 	BasicStack
.a7a2	68		pla				pla 								; get back and write
.a7a3	92 34		sta ($34)			sta 	(BasicStack)
.a7a5	60		rts				rts
.a7a6					_SPBMemory:
.a7a6	a9 12		lda #$12		lda	#18
.a7a8	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.a7ab					StackPopByte:
.a7ab	b2 34		lda ($34)			lda 	(BasicStack)
.a7ad	e6 34		inc $34				inc 	BasicStack
.a7af	d0 02		bne $a7b3			bne 	_SPBNoCarry
.a7b1	e6 35		inc $35				inc 	BasicStack+1
.a7b3					_SPBNoCarry:
.a7b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7b4					StackOpen:
.a7b4	48		pha				pha 								; save frame byte
.a7b5	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7b7	0a		asl a				asl 	a 							; claim twice this for storage
.a7b8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7ba	38		sec				sec 								; so basically subtracting from
.a7bb	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7bd	85 34		sta $34				sta 	basicStack
.a7bf	b0 08		bcs $a7c9			bcs 	_SONoBorrow
.a7c1	c6 35		dec $35				dec 	basicStack+1
.a7c3	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7c5	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7c7	90 04		bcc $a7cd			bcc 	_SOMemory
.a7c9					_SONoBorrow:
.a7c9	68		pla				pla 								; get marker back and write at TOS
.a7ca	92 34		sta ($34)			sta 	(basicStack)
.a7cc	60		rts				rts
.a7cd					_SOMemory:
.a7cd	a9 12		lda #$12		lda	#18
.a7cf	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.a7d2					StackClose:
.a7d2	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7d4	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7d6	0a		asl a				asl 	a 							; claim twice this.
.a7d7	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7d9	85 34		sta $34				sta 	basicStack
.a7db	90 02		bcc $a7df			bcc 	_SCExit
.a7dd	e6 35		inc $35				inc 	basicStack+1
.a7df					_SCExit:
.a7df	60		rts				rts
.a7e0					StackCheckFrame:
.a7e0	48		pha				pha
.a7e1					_StackRemoveLocals:
.a7e1	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7e3	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7e5	b0 05		bcs $a7ec			bcs 	_SCNoLocal
.a7e7	20 ea ae	jsr $aeea			jsr 	LocalPopValue
.a7ea	80 f5		bra $a7e1			bra 	_StackRemoveLocals
.a7ec					_SCNoLocal:
.a7ec	68		pla				pla
.a7ed	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a7ef	29 f0		and #$f0			and 	#$F0 						; check type bits
.a7f1	d0 01		bne $a7f4			bne 	_SCFError 					; different, we have structures mixed up
.a7f3	60		rts				rts
.a7f4					_SCFError:
.a7f4	8a		txa				txa 								; report error X
.a7f5	4c c5 9a	jmp $9ac5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a7f8					STKSaveCodePosition:
.a7f8	5a		phy				phy
.a7f9	98		tya				tya 								; save Y
.a7fa	a0 05		ldy #$05			ldy 	#5
.a7fc	91 34		sta ($34),y			sta 	(basicStack),y
.a7fe	88		dey				dey 								; save Code Pointer
.a7ff					_STKSaveLoop:
.a7ff	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a802	91 34		sta ($34),y			sta 	(basicStack),y
.a804	88		dey				dey
.a805	d0 f8		bne $a7ff			bne 	_STKSaveLoop
.a807	7a		ply				ply
.a808	60		rts				rts
.a809					STKLoadCodePosition:
.a809	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a80b					_STKLoadLoop:
.a80b	b1 34		lda ($34),y			lda 	(basicStack),y
.a80d	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a810	c8		iny				iny
.a811	c0 05		cpy #$05			cpy 	#5
.a813	d0 f6		bne $a80b			bne 	_STKLoadLoop
.a815	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a817	a8		tay				tay
.a818	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a819					StackReset:
.a819	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a81b	85 34		sta $34				sta 	0+basicStack
.a81d	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a81f	85 35		sta $35				sta 	1+basicStack
.a821	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a823	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a825	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b831					StringConcrete:
.b831	5a		phy				phy 								; save position on stack
.b832	20 9a a3	jsr $a39a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b835	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b838	85 38		sta $38				sta 	zTemp1
.b83a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b83d	85 39		sta $39				sta 	zTemp1+1
.b83f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b841					_SALength:
.b841	c8		iny				iny
.b842	b1 38		lda ($38),y			lda 	(zTemp1),y
.b844	d0 fb		bne $b841			bne 	_SALength
.b846	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b848	b0 3f		bcs $b889			bcs 	_SALengthError
.b84a	98		tya				tya 				 				; length of the new string
.b84b	18		clc				clc
.b84c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b84e	90 02		bcc $b852			bcc 	_SAHaveLength
.b850	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b852					_SAHaveLength:
.b852	48		pha				pha 								; save length.
.b853	38		sec				sec
.b854	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b856	6d 8e 04	adc $048e			adc 	StringMemory
.b859	8d 8e 04	sta $048e			sta 	StringMemory
.b85c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b85e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b861	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b863	6d 8f 04	adc $048f			adc 	StringMemory+1
.b866	8d 8f 04	sta $048f			sta 	StringMemory+1
.b869	85 3b		sta $3b				sta 	zTemp2+1
.b86b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b86e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b86f	38		sec				sec
.b870	e9 03		sbc #$03			sbc 	#3
.b872	92 3a		sta ($3a)			sta 	(zTemp2)
.b874	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b876	a0 01		ldy #$01			ldy 	#1
.b878	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b87a					_SACopyNewString:
.b87a	a0 00		ldy #$00			ldy 	#0
.b87c					_SACopyNSLoop:
.b87c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b87e	c8		iny				iny 								; write two on in string storage
.b87f	c8		iny				iny
.b880	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b882	88		dey				dey 								; this makes it one one.
.b883	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b885	d0 f5		bne $b87c			bne 	_SACopyNSLoop
.b887	7a		ply				ply
.b888	60		rts				rts
.b889					_SALengthError:
.b889	a9 09		lda #$09		lda	#9
.b88b	4c c5 9a	jmp $9ac5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b88e					StringSystemInitialise:
.b88e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b890	8d 8e 04	sta $048e			sta 	0+StringMemory
.b893	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b895	8d 8f 04	sta $048f			sta 	1+StringMemory
.b898	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b89b	60		rts				rts
.b89c					StringSpaceInitialise:
.b89c	20 9a a3	jsr $a39a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b89f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8a1	8d 90 04	sta $0490			sta 	StringInitialised
.b8a4	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8a7	8d 91 04	sta $0491			sta 	StringTempPointer
.b8aa	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8ad	3a		dec a				dec 	a
.b8ae	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8b1	60		rts				rts
.b8b2					StringTempAllocate:
.b8b2	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8b4	b0 35		bcs $b8eb			bcs 	_STALength
.b8b6	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8b9	30 05		bmi $b8c0			bmi 	_STAAllocate
.b8bb	48		pha				pha 								; save value to subtract.
.b8bc	20 9c b8	jsr $b89c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8bf	68		pla				pla 								; restore it
.b8c0					_STAAllocate:
.b8c0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8c2	18		clc				clc  								; deliberate allows one more
.b8c3	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8c6	8d 91 04	sta $0491			sta 	StringTempPointer
.b8c9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8cc	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8ce	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8d1	69 ff		adc #$ff			adc 	#$FF
.b8d3	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8d6	85 3d		sta $3d				sta 	zsTemp+1
.b8d8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8db	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8de	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8e1	a9 10		lda #$10			lda 	#NSTString
.b8e3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8e6	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8e8	92 3c		sta ($3c)			sta 	(zsTemp)
.b8ea	60		rts				rts
.b8eb					_STALength:
.b8eb	a9 09		lda #$09		lda	#9
.b8ed	4c c5 9a	jmp $9ac5		jmp	ErrorHandler
.b8f0					StringTempWrite:
.b8f0	48		pha				pha
.b8f1	92 3c		sta ($3c)			sta 	(zsTemp)
.b8f3	e6 3c		inc $3c				inc 	zsTemp
.b8f5	d0 02		bne $b8f9			bne 	_STWNoCarry
.b8f7	e6 3d		inc $3d				inc 	zsTemp+1
.b8f9					_STWNoCarry:
.b8f9	a9 00		lda #$00			lda 	#0
.b8fb	92 3c		sta ($3c)			sta 	(zsTemp)
.b8fd	68		pla				pla
.b8fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a826					BackloadProgram:
.a826	a2 ff		ldx #$ff			ldx 	#$FF
.a828	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a82b	20 55 a8	jsr $a855			jsr 	BLReadByte
.a82e	30 1e		bmi $a84e			bmi 	_BPExit
.a830					_BPCopy:
.a830	e8		inx				inx  								; copy byte in
.a831	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a834	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a837	20 55 a8	jsr $a855			jsr 	BLReadByte 					; read next byte
.a83a	30 0a		bmi $a846			bmi 	_BPEndLine 					; -ve = EOL
.a83c	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a83e	d0 02		bne $a842			bne 	_BPNotTab
.a840	a9 20		lda #$20			lda 	#' '
.a842					_BPNotTab:
.a842	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a844	b0 ea		bcs $a830			bcs 	_BPCopy
.a846					_BPEndLine:
.a846	20 3b ac	jsr $ac3b			jsr 	TokeniseLine 				; tokenise the line.
.a849	20 01 8c	jsr $8c01			jsr 	EditProgramCode
.a84c	80 d8		bra $a826			bra 	BackloadProgram
.a84e					_BPExit:
.a84e	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a851	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear variables etc.
.a854	60		rts				rts
.a855					BLReadByte:
.a855					_BLLoad:
.a855	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a858	ee 56 a8	inc $a856			inc 	_BLLoad+1
.a85b	d0 03		bne $a860			bne 	_BLNoCarry
.a85d	ee 57 a8	inc $a857			inc 	_BLLoad+2
.a860					_BLNoCarry:
.a860	c9 00		cmp #$00			cmp 	#0
.a862	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a863					TokeniseSearchTable:
.a863	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a865	85 36		sta $36				sta 	zTemp0
.a867	a0 00		ldy #$00			ldy 	#0
.a869	a9 80		lda #$80			lda 	#$80 						; token #
.a86b	85 38		sta $38				sta 	zTemp1
.a86d					_TSTLoop:
.a86d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a86f	30 49		bmi $a8ba			bmi 	_TSTFail 					; -ve = end of table
.a871	f0 2e		beq $a8a1			beq 	_TSTNext 					; zero, check next it's a dummy
.a873	c8		iny				iny 								; get the hash
.a874	b1 36		lda ($36),y			lda 	(zTemp0),y
.a876	88		dey				dey
.a877	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a87a	d0 25		bne $a8a1			bne 	_TSTNext
.a87c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a87f	38		sec				sec
.a880	ed 80 04	sbc $0480			sbc 	identStart
.a883	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a885	d0 1a		bne $a8a1			bne 	_TSTNext
.a887	5a		phy				phy 								; save Y , we might fail
.a888	c8		iny				iny 								; point to text
.a889	c8		iny				iny
.a88a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a88d					_TSTCompareName:
.a88d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a890	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a892	d0 0c		bne $a8a0			bne 	_TSTNextPullY 				; fail, pullY and do next
.a894	e8		inx				inx
.a895	c8		iny				iny
.a896	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a899	d0 f2		bne $a88d			bne 	_TSTCompareName
.a89b	7a		ply				ply 								; throw Y
.a89c	a5 38		lda $38				lda 	zTemp1 						; get token #
.a89e	38		sec				sec 								; return with CS = passed.
.a89f	60		rts				rts
.a8a0					_TSTNextPullY:
.a8a0	7a		ply				ply 								; restore current, fall through.
.a8a1					_TSTNext:
.a8a1	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8a3	98		tya				tya
.a8a4	18		clc				clc
.a8a5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8a7	1a		inc a				inc 	a 							; +1
.a8a8	1a		inc a				inc 	a 							; +2
.a8a9	a8		tay				tay
.a8aa	10 c1		bpl $a86d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8ac	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8ad	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8af	18		clc				clc  								; but have tables > 255 bytes
.a8b0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8b2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8b4	90 b7		bcc $a86d			bcc 	_TSTLoop
.a8b6	e6 37		inc $37				inc 	zTemp0+1
.a8b8	80 b3		bra $a86d			bra 	_TSTLoop
.a8ba					_TSTFail:
.a8ba	18		clc				clc
.a8bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8bc					KeywordSet0:
>a8bc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8be	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8c0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8c2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8c8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8d0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8d6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8dd	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8e5	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a8ec	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a8f3	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a8f9	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a8ff	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a907	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a90e	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a915	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a91c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a924	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a92a	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a930	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a937	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a93d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a943	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a94b	28
>a94c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a954	28
>a955	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a95b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a961	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a967	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a96e	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a976	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a97c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a982	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a987	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a98b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a991	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a999	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9a0	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9a7	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9af	43
>a9b0	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9b6	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9bc	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9c3	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9c9	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9cd	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9d3	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9db	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9e2	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9e7	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a9ee	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a9f6	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a9fc	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa01	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa09	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa0f	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa15	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa1a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa21	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa27	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa2d	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa34	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa39	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa3f	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa46	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa4b	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa4f	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa57	45
>aa58	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa60	45
>aa61	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa67	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa6e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa74	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa7a	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa7f	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa87	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aa8e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aa96	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aa9c	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aaa0	ff					.text	$FF
.aaa1					KeywordSet1:
>aaa1	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaa3	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaa5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaa7	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aaaf	4c 45
>aab1	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aab9	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aac1	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aac6	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aacc	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aad1	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aad9	45
>aada	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aadf	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aae7	53
>aae8	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aaee	ff					.text	$FF
.aaef					KeywordSet2:
>aaef	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaf1	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaf3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaf5	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aafa	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>aaff	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab04	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab09	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab0e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab13	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab18	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab1d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab22	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab27	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab2c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab31	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab36	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab3b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab40	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab45	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab4a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab4f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab54	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab59	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab5e	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab63	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab68	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab6d	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab72	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab77	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab7c	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab81	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab86	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab8b	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>ab90	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ab95	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ab9a	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>ab9f	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aba4	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aba9	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abae	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abb3	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abb8	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abbd	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abc2	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abc7	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abcc	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abd1	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abd6	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abdb	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abe0	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>abe5	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abea	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>abef	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>abf4	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>abf9	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>abfe	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac03	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac08	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac0d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac12	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac17	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac1c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac21	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac26	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac2b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac30	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac35	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac3a	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac3b					TokeniseLine:
.ac3b	20 c3 ad	jsr $adc3			jsr 	FixLineBufferCase 			; fix line case
.ac3e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac40	8d a7 04	sta $04a7			sta 	tokenOffset
.ac43	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac46	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac49	a2 ff		ldx #$ff			ldx 	#$FF
.ac4b					_TKFindFirst:
.ac4b	e8		inx				inx
.ac4c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac4f	f0 79		beq $acca			beq 	_TKExit
.ac51	c9 20		cmp #$20			cmp 	#' '
.ac53	90 f6		bcc $ac4b			bcc 	_TKFindFirst
.ac55	c9 30		cmp #$30			cmp 	#'0'
.ac57	90 07		bcc $ac60			bcc 	_TKNoLineNumber
.ac59	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac5b	b0 03		bcs $ac60			bcs 	_TKNoLineNumber
.ac5d	20 ed ad	jsr $aded			jsr 	TokeniseExtractLineNumber
.ac60					_TKNoLineNumber:
.ac60					_TKTokeniseLoop:
.ac60	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac63	f0 65		beq $acca			beq 	_TKExit
.ac65	e8		inx				inx
.ac66	c9 20		cmp #$20			cmp 	#' '
.ac68	f0 f6		beq $ac60			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac6a	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac6b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac6d	f0 61		beq $acd0			beq 	_TKTokeniseIdentifier
.ac6f	c9 41		cmp #$41			cmp 	#'A'
.ac71	90 04		bcc $ac77			bcc 	_TKTokenisePunctuation
.ac73	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac75	90 59		bcc $acd0			bcc 	_TKTokeniseIdentifier
.ac77					_TKTokenisePunctuation:
.ac77	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac79	f0 27		beq $aca2			beq 	_TKString
.ac7b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac7d	f0 28		beq $aca7			beq 	_TKHexConstant
.ac7f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac81	f0 29		beq $acac			beq 	_TKCheckDouble
.ac83	c9 3e		cmp #$3e			cmp 	#'>'
.ac85	f0 25		beq $acac			beq 	_TKCheckDouble
.ac87					_TKStandardPunctuation:
.ac87	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac8a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ac8c	90 0e		bcc $ac9c			bcc 	_TKNoShift
.ac8e	48		pha				pha 								; save
.ac8f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ac91	85 36		sta $36				sta 	zTemp0
.ac93	68		pla				pla
.ac94	29 20		and #$20			and 	#32 						; bit 5
.ac96	4a		lsr a				lsr 	a 							; shift into bit 3
.ac97	4a		lsr a				lsr 	a
.ac98	05 36		ora $36				ora 	zTemp0
.ac9a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ac9c					_TKNoShift:
.ac9c	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte 			; write the punctuation character
.ac9f	e8		inx				inx 								; consume the character
.aca0	80 be		bra $ac60			bra 	_TKTokeniseLoop 			; and loop round again.
.aca2					_TKString:
.aca2	20 52 ad	jsr $ad52			jsr 	TokeniseString
.aca5	80 b9		bra $ac60			bra 	_TKTokeniseLoop
.aca7					_TKHexConstant:
.aca7	20 8d ad	jsr $ad8d			jsr 	TokeniseHexConstant
.acaa	80 b4		bra $ac60			bra 	_TKTokeniseLoop
.acac					_TKCheckDouble:
.acac	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.acaf	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.acb1	90 d4		bcc $ac87			bcc 	_TKStandardPunctuation
.acb3	c9 3f		cmp #$3f			cmp 	#'>'+1
.acb5	b0 d0		bcs $ac87			bcs 	_TKStandardPunctuation
.acb7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.acba	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acbc	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.acbd	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acc0	38		sec				sec
.acc1	e9 3c		sbc #$3c			sbc 	#'<'
.acc3	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.acc6	e8		inx				inx 								; consume both
.acc7	e8		inx				inx
.acc8	80 96		bra $ac60			bra 	_TKTokeniseLoop
.acca	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.accc	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.accf	60		rts				rts
.acd0					_TKTokeniseIdentifier:
.acd0	8e 80 04	stx $0480			stx 	identStart 					; save start
.acd3	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.acd6					_TKCheckLoop:
.acd6	e8		inx				inx 								; look at next, we know first is identifier.
.acd7	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acda	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.acdc	f0 f8		beq $acd6			beq 	_TKCheckLoop
.acde	c9 30		cmp #$30			cmp	 	#"0"
.ace0	90 0c		bcc $acee			bcc 	_TKEndIdentifier
.ace2	c9 3a		cmp #$3a			cmp 	#"9"+1
.ace4	90 f0		bcc $acd6			bcc 	_TKCheckLoop
.ace6	c9 41		cmp #$41			cmp	 	#"A"
.ace8	90 04		bcc $acee			bcc 	_TKEndIdentifier
.acea	c9 5b		cmp #$5b			cmp 	#"Z"+1
.acec	90 e8		bcc $acd6			bcc 	_TKCheckLoop
.acee					_TKEndIdentifier:
.acee	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.acf1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.acf3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.acf5	f0 06		beq $acfd			beq 	_TKHasTypeCharacter
.acf7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.acf9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.acfb	d0 07		bne $ad04			bne 	_TKNoTypeCharacter
.acfd					_TKHasTypeCharacter:
.acfd	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad00	e8		inx				inx 								; read next
.ad01	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad04					_TKNoTypeCharacter:
.ad04	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad06	d0 09		bne $ad11			bne 	_TKNoArray
.ad08	e8		inx				inx 								; skip the (
.ad09	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad0c	09 04		ora #$04			ora 	#$04
.ad0e	8d 84 04	sta $0484			sta 	identTypeByte
.ad11					_TKNoArray:
.ad11	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad14	20 ae ad	jsr $adae			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad17	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad19	a9 bc		lda #$bc			lda 	#(KeywordSet0) & $FF
.ad1b	20 63 a8	jsr $a863			jsr 	TokeniseSearchTable
.ad1e	a2 00		ldx #$00			ldx 	#0
.ad20	b0 1f		bcs $ad41			bcs 	_TKFoundToken
.ad22	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad24	a9 a1		lda #$a1			lda 	#(KeywordSet1) & $FF
.ad26	20 63 a8	jsr $a863			jsr 	TokeniseSearchTable
.ad29	a2 81		ldx #$81			ldx 	#$81
.ad2b	b0 14		bcs $ad41			bcs 	_TKFoundToken
.ad2d	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.ad2f	a9 ef		lda #$ef			lda 	#(KeywordSet2) & $FF
.ad31	20 63 a8	jsr $a863			jsr 	TokeniseSearchTable
.ad34	a2 82		ldx #$82			ldx 	#$82
.ad36	b0 09		bcs $ad41			bcs 	_TKFoundToken
.ad38	20 3e ae	jsr $ae3e			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad3b	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad3e	4c 60 ac	jmp $ac60			jmp 	_TKTokeniseLoop 			; and go round again.
.ad41					_TKFoundToken:
.ad41	48		pha				pha 								; save token
.ad42	8a		txa				txa 								; shift in X, is there one ?
.ad43	f0 03		beq $ad48			beq 	_TKNoTShift
.ad45	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte 			; if so, write it out
.ad48					_TKNoTShift:
.ad48	68		pla				pla 								; restore and write token
.ad49	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad4c	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad4f	4c 60 ac	jmp $ac60			jmp 	_TKTokeniseLoop 			; and go round again.
.ad52					TokeniseString:
.ad52	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad54	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad57	e8		inx				inx									; start of quoted string.
.ad58	da		phx				phx 								; push start of string on top
.ad59	ca		dex				dex
.ad5a					_TSFindEnd:
.ad5a	e8		inx				inx
.ad5b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad5e	f0 04		beq $ad64			beq 	_TSEndOfString
.ad60	c9 22		cmp #$22			cmp 	#'"'
.ad62	d0 f6		bne $ad5a			bne 	_TSFindEnd
.ad64					_TSEndOfString:
.ad64	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad65	48		pha				pha 								; save terminating character
.ad66	20 6e ad	jsr $ad6e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad69	68		pla				pla 								; terminating character
.ad6a	f0 01		beq $ad6d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad6c	e8		inx				inx
.ad6d					_TSNotQuote:
.ad6d	60		rts				rts
.ad6e					TOWriteBlockXY:
.ad6e	86 36		stx $36				stx 	zTemp0 						; write end character
.ad70	98		tya				tya
.ad71	49 ff		eor #$ff			eor 	#$FF
.ad73	38		sec				sec
.ad74	65 36		adc $36				adc 	zTemp0
.ad76	1a		inc a				inc 	a 							; one extra for NULL
.ad77	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad7a					_TOBlockLoop:
.ad7a	c4 36		cpy $36				cpy 	zTemp0
.ad7c	f0 09		beq $ad87			beq 	_TOBlockExit
.ad7e	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad81	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad84	c8		iny				iny
.ad85	80 f3		bra $ad7a			bra 	_TOBlockLoop
.ad87					_TOBlockExit:
.ad87	a9 00		lda #$00			lda 	#0
.ad89	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad8c	60		rts				rts
.ad8d					TokeniseHexConstant:
.ad8d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ad8f	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.ad92	e8		inx				inx									; start of quoted string.
.ad93	da		phx				phx 								; push start of constant on top
.ad94	ca		dex				dex
.ad95					_THFindLoop:
.ad95	e8		inx				inx
.ad96	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad99	c9 30		cmp #$30			cmp 	#"0"
.ad9b	90 0c		bcc $ada9			bcc 	_THFoundEnd
.ad9d	c9 3a		cmp #$3a			cmp 	#"9"+1
.ad9f	90 f4		bcc $ad95			bcc 	_THFindLoop
.ada1	c9 41		cmp #$41			cmp 	#"A"
.ada3	90 04		bcc $ada9			bcc 	_THFoundEnd
.ada5	c9 47		cmp #$47			cmp 	#"F"+1
.ada7	90 ec		bcc $ad95			bcc 	_THFindLoop
.ada9					_THFoundEnd:
.ada9	7a		ply				ply 								; restore start
.adaa	20 6e ad	jsr $ad6e			jsr 	TOWriteBlockXY 				; output the block
.adad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adae					TokeniseCalculateHash:
.adae	da		phx				phx
.adaf	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adb2	a9 00		lda #$00			lda 	#0
.adb4					_TCHLoop:
.adb4	18		clc				clc
.adb5	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.adb8	e8		inx				inx
.adb9	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.adbc	d0 f6		bne $adb4			bne 	_TCHLoop
.adbe	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.adc1	fa		plx				plx
.adc2	60		rts				rts
.adc3					FixLineBufferCase:
.adc3	a2 00		ldx #$00			ldx 	#0
.adc5					_FLBCLoop:
.adc5	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.adc8	f0 22		beq $adec			beq 	_FLBCExit 					; end of string.
.adca	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.adcc	f0 11		beq $addf			beq 	_FLBCInQuotes
.adce	e8		inx				inx
.adcf	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.add1	90 f2		bcc $adc5			bcc 	_FLBCLoop
.add3	c9 7b		cmp #$7b			cmp 	#'z'+1
.add5	b0 ee		bcs $adc5			bcs 	_FLBCLoop
.add7	38		sec				sec 								; make U/C
.add8	e9 20		sbc #$20			sbc 	#32
.adda	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.addd	80 e6		bra $adc5			bra 	_FLBCLoop
.addf					_FLBCInQuotes:
.addf	e8		inx				inx 								; advance
.ade0	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ade3	f0 07		beq $adec			beq 	_FLBCExit 					; exit on EOS
.ade5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ade7	d0 f6		bne $addf			bne 	_FLBCInQuotes
.ade9	e8		inx				inx 								; skip over it
.adea	80 d9		bra $adc5			bra 	_FLBCLoop
.adec					_FLBCExit:
.adec	60		rts				rts
.aded					TokeniseExtractLineNumber:
.aded	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.adf0	48		pha				pha
.adf1	ad a8 04	lda $04a8			lda 	tokenLineNumber
.adf4	48		pha				pha
.adf5	20 2b ae	jsr $ae2b			jsr 	_TELNTimes2 				; line # x 4
.adf8	20 2b ae	jsr $ae2b			jsr 	_TELNTimes2 				; line # x 2
.adfb	18		clc				clc 								; add stacked value
.adfc	68		pla				pla
.adfd	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae00	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae03	68		pla				pla
.ae04	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae07	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae0a	20 2b ae	jsr $ae2b			jsr 	_TELNTimes2 				; line # x 10
.ae0d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae10	e8		inx				inx
.ae11	29 0f		and #$0f			and 	#15 						; add to line #
.ae13	18		clc				clc
.ae14	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae17	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae1a	90 03		bcc $ae1f			bcc 	_TLENNoCarry
.ae1c	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae1f					_TLENNoCarry:
.ae1f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae22	c9 30		cmp #$30			cmp 	#'0'
.ae24	90 04		bcc $ae2a			bcc 	_TLENExit
.ae26	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae28	90 c3		bcc $aded			bcc 	TokeniseExtractLineNumber
.ae2a					_TLENExit:
.ae2a	60		rts				rts
.ae2b					_TELNTimes2:
.ae2b	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae2e	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae31	60		rts				rts
.ae32					TokeniseWriteByte:
.ae32	da		phx				phx
.ae33	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae36	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae39	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae3c	fa		plx				plx
.ae3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae3e					CheckCreateVariableRecord:
.ae3e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae40	85 36		sta $36				sta 	0+zTemp0
.ae42	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae44	85 37		sta $37				sta 	1+zTemp0
.ae46					_CCVSearch:
.ae46	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae48	f0 2c		beq $ae76			beq 	_CCVFail
.ae4a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae4c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae4e	cd 83 04	cmp $0483			cmp 	identHash
.ae51	d0 16		bne $ae69			bne 	_CCVNext
.ae53	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae55	ae 80 04	ldx $0480			ldx 	identStart
.ae58					_CCVCompare:
.ae58	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae5b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae5d	e8		inx				inx 								; advance pointers
.ae5e	c8		iny				iny
.ae5f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae60	d0 07		bne $ae69			bne 	_CCVNext  					; didn't match go to next.
.ae62	90 f4		bcc $ae58			bcc 	_CCVCompare 				; not finished yet.
.ae64	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae67	f0 41		beq $aeaa			beq 	_CCVFound 					; yes, we were successful
.ae69					_CCVNext:
.ae69	18		clc				clc
.ae6a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae6c	65 36		adc $36				adc 	zTemp0
.ae6e	85 36		sta $36				sta 	zTemp0
.ae70	90 d4		bcc $ae46			bcc 	_CCVSearch
.ae72	e6 37		inc $37				inc 	zTemp0+1
.ae74	80 d0		bra $ae46			bra 	_CCVSearch
.ae76					_CCVFail:
.ae76	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae78	ad 83 04	lda $0483			lda 	identHash
.ae7b	91 36		sta ($36),y			sta 	(zTemp0),y
.ae7d	c8		iny				iny 								; offset 2 is the type byte
.ae7e	ad 84 04	lda $0484			lda 	identTypeByte
.ae81	91 36		sta ($36),y			sta 	(zTemp0),y
.ae83	c8		iny				iny
.ae84					_CCVData:
.ae84	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae86	91 36		sta ($36),y			sta 	(zTemp0),y
.ae88	c8		iny				iny
.ae89	c0 08		cpy #$08			cpy 	#8
.ae8b	90 f7		bcc $ae84			bcc 	_CCVData
.ae8d	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ae90					_CCVCopyName:
.ae90	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ae93	91 36		sta ($36),y			sta 	(zTemp0),y
.ae95	e8		inx				inx
.ae96	c8		iny				iny
.ae97	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ae9a	d0 f4		bne $ae90			bne 	_CCVCopyName
.ae9c	98		tya				tya 								; patch offset
.ae9d	92 36		sta ($36)			sta 	(zTemp0)
.ae9f	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aea1	91 36		sta ($36),y			sta 	(zTemp0),y
.aea3	88		dey				dey
.aea4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aea6	09 80		ora #$80			ora 	#$80
.aea8	91 36		sta ($36),y			sta 	(zTemp0),y
.aeaa					_CCVFound:
.aeaa	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aeac	38		sec				sec
.aead	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aeaf	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aeb1	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.aeb4	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aeb6	20 32 ae	jsr $ae32			jsr 	TokeniseWriteByte
.aeb9	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
