
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D TILEMAP_ADDRESS=\$24000" "-D TILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Mar  8 17:29:04 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 TILEMAP_ADDRESS=$24000
=$26000						 TILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						ControlStorage = $400
=$420						MemoryStorage = $420
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0420						identStart:
>0420								.fill 	1
.0421						identTypeStart:
>0421								.fill 	1
.0422						identTypeEnd:
>0422								.fill 	1
.0423						identHash:
>0423								.fill 	1
.0424						identTypeByte:
>0424								.fill 	1	 						; (see tokenising.pdf)
.0425						encodeState:
>0425								.fill 	1
.0426						digitTemp:
>0426								.fill 	1
.0427						decimalCount:
>0427								.fill 	1
.0428						lowMemPtr:
>0428								.fill 	2
.042a						stringMemory:
>042a								.fill 	2
.042c						stringInitialised:
>042c								.fill 	1
.042d						stringTempPointer:
>042d								.fill 	2
.042f						breakCheck:
>042f								.fill 	1
.0430						decimalPlaces:
>0430								.fill 	1
.0431						dbOffset:
>0431								.fill 	1
.0432						lastParameter:
>0432								.fill 	1
.0433						dataPointer:
>0433								.fill 	5
.0438						inDataStatement:
>0438								.fill 	1
.0439						tbOffset:
>0439								.fill 	1
.043a						AssemblerAddress:
>043a								.fill 	2
.043c						AssemblerControl:
>043c								.fill 	1
.043d						ParamStart:
>043d								.fill 	2
.043f						IsGroup1:
>043f								.fill 	1
.0440						BaseOpcode:
>0440								.fill 	1
.0441						ModeMask:
>0441								.fill 	1
.0442						listIndent:
>0442								.fill 	1
.0443						lcLastCharacter:
>0443								.fill 	1
.0444						isPrintFlag:
>0444								.fill 	1
.0445						currentListColour:
>0445								.fill 	1
.0446						tokenOffset:
>0446								.fill 	1
.0447						tokenLineNumber:
>0447								.fill 	2
.0449						tokenBuffer:
>0449								.fill 	253
.0546						lineBuffer:
>0546								.fill 	253
.0643						numberBuffer:
>0643								.fill 	34
.0665						decimalBuffer:
>0665								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_CURSOR                           = $8a; $8a CURSOR
=$8b						KWD1_DIR                              = $8b; $8b DIR
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_OPTION                           = $99; $99 OPTION
=$9a						KWD1_PING                             = $9a; $9a PING
=$9b						KWD1_PRINT                            = $9b; $9b PRINT
=$9c						KWD1_RESTORE                          = $9c; $9c RESTORE
=$9d						KWD1_RETURN                           = $9d; $9d RETURN
=$9e						KWD1_RUN                              = $9e; $9e RUN
=$9f						KWD1_SAVE                             = $9f; $9f SAVE
=$a0						KWD1_SETDATE                          = $a0; $a0 SETDATE
=$a1						KWD1_SETTIME                          = $a1; $a1 SETTIME
=$a2						KWD1_SHOOT                            = $a2; $a2 SHOOT
=$a3						KWD1_SPRITES                          = $a3; $a3 SPRITES
=$a4						KWD1_STOP                             = $a4; $a4 STOP
=$a5						KWD1_TILE                             = $a5; $a5 TILE
=$a6						KWD1_TILES                            = $a6; $a6 TILES
=$a7						KWD1_TRY                              = $a7; $a7 TRY
=$a8						KWD1_VERIFY                           = $a8; $a8 VERIFY
=$a9						KWD1_XGO                              = $a9; $a9 XGO
=$aa						KWD1_XLOAD                            = $aa; $aa XLOAD
=$ab						KWD1_ZAP                              = $ab; $ab ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 d0 a1	jsr $a1d0		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 86 b9	jsr $b986		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 b9 b9	jsr $b9b9		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 1f b3	jsr $b31f		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 cb b5	jsr $b5cb		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKInitialise:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 13 b3	jsr $b313		jsr	Export_TKInitialise
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80a3		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a5		09 80		ora #$80			ora 	#$80
.80a7		85 00		sta $00				sta 	0
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 dd 83	jsr $83dd			jsr 	KNLSetDrive
.80cd		20 93 80	jsr $8093			jsr 	TKInitialise 				; initialise tokeniser.
.80d0		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80d2		aa		tax				tax
.80d3		a8		tay				tay
.80d4		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80d7		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d9		20 6b 80	jsr $806b			jsr 	SNDCommand
.80dc		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e1		a9 09		lda #$09			lda 	#9
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e9		64 01		stz $01				stz 	1
.80eb		ad ad d6	lda $d6ad			lda 	$D6AD
.80ee		20 b2 85	jsr $85b2			jsr 	PrintHex
.80f1		ad ac d6	lda $d6ac			lda 	$D6AC
.80f4		20 b2 85	jsr $85b2			jsr 	PrintHex
.80f7		ad ab d6	lda $d6ab			lda 	$D6AB
.80fa		20 b2 85	jsr $85b2			jsr 	PrintHex
.80fd		ad aa d6	lda $d6aa			lda 	$D6AA
.8100		20 b2 85	jsr $85b2			jsr 	PrintHex
.8103		a9 20		lda #$20			lda 	#32
.8105		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8108		ad a8 d6	lda $d6a8			lda 	$D6A8
.810b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810e		ad a9 d6	lda $d6a9			lda 	$D6A9
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a9 0d		lda #$0d			lda 	#13 						; display Kernel information
.8116		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8119		a9 09		lda #$09			lda 	#9
.811b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.811e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8121		a9 08		lda #$08			lda 	#$08
.8123		a2 e0		ldx #$e0			ldx 	#$E0
.8125		20 44 94	jsr $9444			jsr 	PrintStringXA
.8128		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.812a		a9 3b		lda #$3b			lda 	#Prompt & $FF
.812c		20 44 94	jsr $9444			jsr 	PrintStringXA
.812f		20 94 82	jsr $8294			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8132		20 1b 8e	jsr $8e1b			jsr 	NewProgram 					; erase current program
.8135		4c 1e 88	jmp $881e			jmp 	WarmStart					; make same size.
.8138		4c 1e 88	jmp $881e			jmp 	WarmStart
>813b		0d				Prompt:	.text 	13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>813c		09 09 30 38 2f 30 33 2f			.text 9,9,"08/03/23 01b"
>8144		32 33 20 30 31 62

;******  Return to file: ./common/aa.system/00start.asm

>814a		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.814e						ProcessEvents:
.814e		20 1c 84	jsr $841c			jsr 	KNLSetEventPointer
.8151		20 9d 82	jsr $829d			jsr     GetNextEvent 				; get next event
.8154		b0 36		bcs $818c			bcs 	_PEExitZ 					; nothing left to process.
.8156		ad bb 07	lda $07bb			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8159		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.815b		d0 f1		bne $814e			bne 	ProcessEvents
.815d		ad c1 07	lda $07c1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8160		30 0b		bmi $816d			bmi 	_PEIsRaw
.8162		d0 ea		bne $814e			bne 	ProcessEvents
.8164		ad c0 07	lda $07c0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8167		c9 03		cmp #$03			cmp 	#3
.8169		f0 1e		beq $8189			beq 	_PEReturnBreak  			; no, keep going.
.816b		80 0b		bra $8178			bra 	_PEQueueA
.816d						_PEIsRaw:
.816d		ad bf 07	lda $07bf			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.8170		c9 81		cmp #$81			cmp 	#129
.8172		90 da		bcc $814e			bcc		ProcessEvents
.8174		c9 8d		cmp #$8d			cmp 	#140+1
.8176		b0 d6		bcs $814e			bcs 	ProcessEvents
.8178						_PEQueueA:
.8178		da		phx				phx
.8179		ae 7d 06	ldx $067d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.817c		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.817e		f0 06		beq $8186			beq 	_PENoQueue
.8180		9d 75 06	sta $0675,x			sta 	KeyboardQueue,x 			; write into queue
.8183		ee 7d 06	inc $067d			inc 	KeyboardQueueEntries 		; bump count
.8186						_PENoQueue:
.8186		fa		plx				plx
.8187		80 c5		bra $814e			bra 	ProcessEvents
.8189						_PEReturnBreak:
.8189		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.818b		60		rts				rts
.818c						_PEExitZ:
.818c		a9 00		lda #$00			lda 	#0
.818e		60		rts				rts
.818f						PopKeyboardQueue:
.818f		ad 7d 06	lda $067d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8192		f0 17		beq $81ab			beq 	_PKQExit 					; zero, then exit.
.8194		ad 75 06	lda $0675			lda 	KeyboardQueue 				; save head of keyboard queue
.8197		48		pha				pha
.8198		da		phx				phx 								; drop head of queue
.8199		a2 00		ldx #$00			ldx 	#0
.819b						_PKQLoop:
.819b		bd 76 06	lda $0676,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.819e		9d 75 06	sta $0675,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.81a1		e8		inx				inx
.81a2		e0 07		cpx #$07			cpx 	#7
.81a4		d0 f5		bne $819b			bne 	_PKQLoop
.81a6		fa		plx				plx
.81a7		ce 7d 06	dec $067d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.81aa		68		pla				pla 								; restore head of queue.
.81ab						_PKQExit:
.81ab		60		rts				rts
.81ac						KNLGetKeyPressed:
.81ac		a5 01		lda $01				lda 	1 							; save I/O 0
.81ae		48		pha				pha
.81af		64 01		stz $01				stz 	1 							; access I/O Page 0
.81b1		38		sec				sec 								; calculate timer - LastTick
.81b2		ad 59 d6	lda $d659			lda 	$D659
.81b5		cd 7e 06	cmp $067e			cmp 	LastTick
.81b8		f0 06		beq $81c0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.81ba		8d 7e 06	sta $067e			sta 	LastTick 					; update last timer
.81bd		20 8c 82	jsr $828c			jsr 	TickHandler 							; go do the code.
.81c0						_NoFireTick:
.81c0		68		pla				pla 								; restore I/O 0
.81c1		85 01		sta $01				sta 	1
.81c3		ad 7d 06	lda $067d			lda 	KeyboardQueueEntries 		; something in the queue
.81c6		d0 c7		bne $818f			bne 	PopKeyboardQueue 			; if so, pop and return it
.81c8		20 4e 81	jsr $814e			jsr 	ProcessEvents 				; process any outstanding events
.81cb		a9 00		lda #$00			lda 	#0
.81cd		60		rts				rts
.81ce						KNLGetSingleCharacter:
.81ce		20 ac 81	jsr $81ac			jsr 	KNLGetKeyPressed
.81d1		c9 00		cmp #$00			cmp 	#0
.81d3		f0 f9		beq $81ce			beq 	KNLGetSingleCharacter
.81d5		60		rts				rts
=8						KBDQueueSize = 8
.0675						KeyboardQueue:
>0675								.fill 	KBDQueueSize
.067d						KeyboardQueueEntries:
>067d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81d6						InputLine:
.81d6		48		pha				pha
.81d7		da		phx				phx
.81d8		5a		phy				phy
.81d9		a5 01		lda $01				lda 	1 							; save I/O page
.81db		48		pha				pha
.81dc						_EILLoop:
.81dc		20 ce 81	jsr $81ce			jsr 	KNLGetSingleCharacter 		; get one single character
.81df		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81e1		f0 53		beq $8236			beq 	_EILExit
.81e3		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81e5		f0 39		beq $8220			beq 	_EILDelete
.81e7		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81e9		f0 2b		beq $8216			beq 	_EILBackspace
.81eb		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81ed		90 21		bcc $8210			bcc 	_EILPrintLoop
.81ef		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81f1		b0 1d		bcs $8210			bcs 	_EILPrintLoop
.81f3		aa		tax				tax 								; save character in X
.81f4		a9 02		lda #$02			lda	 	#2 							; screen character memory
.81f6		85 01		sta $01				sta 	1
.81f8		ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; read the last character.
.81fb		88		dey				dey
.81fc		b1 40		lda ($40),y			lda 	(EXTAddress),y
.81fe		c9 20		cmp #$20			cmp 	#' ' 						; if not space then reject.
.8200		d0 da		bne $81dc			bne 	_EILLoop
.8202		da		phx				phx 								; save character on stack
.8203		a9 02		lda #$02			lda 	#2  						; insert a space
.8205		85 01		sta $01				sta 	1
.8207		20 7a 82	jsr $827a			jsr 	EXTILInsert 				; insert in text screen
.820a		e6 01		inc $01				inc 	1
.820c		20 7a 82	jsr $827a			jsr 	EXTILInsert 				; insert in colour screen
.820f		68		pla				pla 								; get character back.
.8210						_EILPrintLoop:
.8210		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8213		80 c7		bra $81dc			bra 	_EILLoop
.8215		60		rts				rts
.8216						_EILBackspace:
.8216		ad e8 07	lda $07e8			lda 	EXTColumn					; can we backspace ?
.8219		f0 c1		beq $81dc			beq 	_EILLoop
.821b		a9 02		lda #$02			lda 	#2 							; move cursor left
.821d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8220						_EILDelete
.8220		a9 02		lda #$02			lda 	#2 							; text block
.8222		85 01		sta $01				sta 	1
.8224		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.8226		20 65 82	jsr $8265			jsr 	EXTILDelete
.8229		e6 01		inc $01				inc 	1 							; colour block
.822b		ac e8 07	ldy $07e8			ldy 	EXTColumn 					; get attribute of last character
.822e		88		dey				dey
.822f		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8231		20 65 82	jsr $8265			jsr 	EXTILDelete 				; backspace attribute
.8234		80 a6		bra $81dc			bra 	_EILLoop 					; and go round.
.8236						_EILExit:
.8236		a9 02		lda #$02			lda 	#2 							; switch to page 2
.8238		85 01		sta $01				sta 	1
.823a		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.823c						_EILScrapeLine:
.823c		b1 40		lda ($40),y			lda 	(EXTAddress),y
.823e		99 46 05	sta $0546,y			sta 	lineBuffer,y
.8241		c8		iny				iny
.8242		cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.8245		d0 f5		bne $823c			bne 	_EILScrapeLine
.8247						_EILTrimSpaces:
.8247		88		dey				dey
.8248		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.824a		f0 07		beq $8253			beq 	_EILEndTrim		 			; zero the input line.
.824c		b9 46 05	lda $0546,y			lda 	lineBuffer,y
.824f		c9 20		cmp #$20			cmp 	#' '
.8251		f0 f4		beq $8247			beq 	_EILTrimSpaces 				; if fail this found non space character
.8253						_EILEndTrim:
.8253		c8		iny				iny 								; trim after non space character.
.8254		a9 00		lda #$00			lda 	#0 							; trim here.
.8256		99 46 05	sta $0546,y			sta 	lineBuffer,y
.8259		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.825b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.825e		68		pla				pla 								; reset I/O page
.825f		85 01		sta $01				sta 	1
.8261		7a		ply				ply
.8262		fa		plx				plx
.8263		68		pla				pla
.8264		60		rts				rts
.8265						EXTILDelete:
.8265		48		pha				pha 								; save the new character
.8266		ac e8 07	ldy $07e8			ldy 	EXTColumn 					; start copying from here.
.8269						_EXTDLoop:
.8269		c8		iny				iny 								; copy one byte down.
.826a		b1 40		lda ($40),y			lda 	(EXTAddress),y
.826c		88		dey				dey
.826d		91 40		sta ($40),y			sta 	(EXTAddress),y
.826f		c8		iny				iny 								; do till end of line.
.8270		cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.8273		90 f4		bcc $8269			bcc 	_EXTDLoop
.8275		88		dey				dey 	 							; write in last slot.
.8276		68		pla				pla
.8277		91 40		sta ($40),y			sta 	(EXTAddress),y
.8279		60		rts				rts
.827a						EXTILInsert:
.827a		ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; end position
.827d						_EXTILoop:
.827d		88		dey				dey 								; back one
.827e		cc e8 07	cpy $07e8			cpy 	EXTColumn 					; exit if reached insert point.
.8281		f0 08		beq $828b			beq 	_EXTIExit
.8283		88		dey				dey 								; copy one byte up.
.8284		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8286		c8		iny				iny
.8287		91 40		sta ($40),y			sta 	(EXTAddress),y
.8289		80 f2		bra $827d			bra 	_EXTILoop
.828b						_EXTIExit:
.828b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.828c						TickHandler:
.828c		da		phx				phx
.828d		5a		phy				phy 								; need to preserve Y
.828e		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8291		7a		ply				ply
.8292		fa		plx				plx
.8293		60		rts				rts
.067e						LastTick:
>067e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8294						ResetIOTracking:
.8294		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8296						_RIOLoop:
.8296		9e 7f 06	stz $067f,x			stz 	GNEBegin,x
.8299		ca		dex				dex
.829a		10 fa		bpl $8296			bpl 	_RIOLoop
.829c		60		rts				rts
.829d						GetNextEvent:
.829d		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.82a0		08		php				php									; save yes/no flag.
.82a1		b0 29		bcs $82cc			bcs 	_GNEExit
.82a3		48		pha				pha 								; save registers
.82a4		da		phx				phx
.82a5		5a		phy				phy
.82a6		ad bb 07	lda $07bb			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.82a9		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.82ab		f0 04		beq $82b1			beq 	_GNEKeyEvent
.82ad		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.82af		d0 08		bne $82b9			bne 	_GNECheckMouseEvent
.82b1						_GNEKeyEvent:
.82b1		20 8b 83	jsr $838b			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.82b4		20 a8 83	jsr $83a8			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.82b7		80 10		bra $82c9			bra 	_GNEEventExit
.82b9						_GNECheckMouseEvent:
.82b9		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.82bb		d0 05		bne $82c2			bne 	_GNENotDelta
.82bd		20 ce 82	jsr $82ce			jsr 	ProcessMouseDeltaEvent 		; process them.
.82c0		80 07		bra $82c9			bra 	_GNEEventExit
.82c2						_GNENotDelta:
.82c2		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.82c4		d0 03		bne $82c9			bne 	_GNEEventExit
.82c6		20 fd 82	jsr $82fd			jsr 	ProcessMouseClickEvent 		; process them.
.82c9						_GNEEventExit:
.82c9		7a		ply				ply 								; restore registers
.82ca		fa		plx				plx
.82cb		68		pla				pla
.82cc						_GNEExit:
.82cc		28		plp				plp
.82cd		60		rts				rts
.82ce						ProcessMouseDeltaEvent:
.82ce		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82d0		ad be 07	lda $07be			lda 	KNLEvent.mouse.delta.x
.82d3		20 24 83	jsr $8324			jsr 	PMKAdjustTotal
.82d6		20 67 83	jsr $8367			jsr 	PMKAddSubtract
.82d9		ad bf 07	lda $07bf			lda 	KNLEvent.mouse.delta.y
.82dc		20 24 83	jsr $8324			jsr 	PMKAdjustTotal
.82df		20 67 83	jsr $8367			jsr 	PMKAddSubtract
.82e2		ad c0 07	lda $07c0			lda 	KNLEvent.mouse.delta.z
.82e5		20 24 83	jsr $8324			jsr 	PMKAdjustTotal
.82e8		20 67 83	jsr $8367			jsr 	PMKAddSubtract
.82eb		ad c1 07	lda $07c1			lda 	KNLEvent.mouse.delta.buttons
.82ee		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82f0		20 12 83	jsr $8312			jsr 	PMKOutputButton
.82f3		20 12 83	jsr $8312			jsr 	PMKOutputButton
.82f6		20 12 83	jsr $8312			jsr 	PMKOutputButton
.82f9		20 33 83	jsr $8333			jsr 	PMKClipMouseCoord
.82fc		60		rts				rts
.82fd						ProcessMouseClickEvent:
.82fd		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82ff		ad be 07	lda $07be			lda 	KNLEvent.mouse.clicks.inner
.8302		20 6b 83	jsr $836b			jsr 	PMKAdd
.8305		ad bf 07	lda $07bf			lda 	KNLEvent.mouse.clicks.middle
.8308		20 6b 83	jsr $836b			jsr 	PMKAdd
.830b		ad c0 07	lda $07c0			lda 	KNLEvent.mouse.clicks.outer
.830e		20 6b 83	jsr $836b			jsr 	PMKAdd
.8311		60		rts				rts
.8312						PMKOutputButton:
.8312		9e 7f 06	stz $067f,x			stz 	GNEBegin,x 					; button to zero
.8315		9e 80 06	stz $0680,x			stz 	GNEBegin+1,x
.8318		6a		ror a				ror 	a 							; shift LSB into carry
.8319		90 06		bcc $8321			bcc 	_PMKOBExit
.831b		de 7f 06	dec $067f,x			dec 	GNEBegin,x 					; if set then set to -1
.831e		de 80 06	dec $0680,x			dec 	GNEBegin+1,x
.8321						_PMKOBExit:
.8321		e8		inx				inx  								; next button
.8322		e8		inx				inx
.8323		60		rts				rts
.8324						PMKAdjustTotal:
.8324		48		pha				pha 								; save offset A index X
.8325		da		phx				phx
.8326		48		pha				pha 								; point X to the position
.8327		8a		txa				txa
.8328		18		clc				clc
.8329		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.832b		aa		tax				tax
.832c		68		pla				pla
.832d		20 67 83	jsr $8367			jsr 	PMKAddSubtract 				; reuse the addition code.
.8330		fa		plx				plx 								; restore XA
.8331		68		pla				pla
.8332		60		rts				rts
.8333						PMKClipMouseCoord:
.8333		a2 00		ldx #$00			ldx 	#0
.8335						_PCMCLoop:
.8335		bd af 06	lda $06af,x			lda 	MousePosX+1,x 				; check if -ve
.8338		10 06		bpl $8340			bpl 	_PCMCNotNeg
.833a		9e ae 06	stz $06ae,x			stz 	MousePosX,x 				; if so zero position.
.833d		9e af 06	stz $06af,x			stz 	MousePosX+1,x
.8340						_PCMCNotNeg:
.8340		bd ae 06	lda $06ae,x			lda 	MousePosX,x 				; compare pos vs extent
.8343		dd 61 83	cmp $8361,x			cmp 	_PCMCExtent,x
.8346		bd af 06	lda $06af,x			lda 	MousePosX+1,x
.8349		fd 62 83	sbc $8362,x			sbc 	_PCMCExtent+1,x
.834c		90 0c		bcc $835a			bcc 	_PCMCNotOver 				; in range ?
.834e		bd 61 83	lda $8361,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8351		9d ae 06	sta $06ae,x			sta 	MousePosX,x
.8354		bd 62 83	lda $8362,x			lda 	_PCMCExtent+1,x
.8357		9d af 06	sta $06af,x			sta 	MousePosX+1,x
.835a						_PCMCNotOver:
.835a		e8		inx				inx
.835b		e8		inx				inx
.835c		e0 06		cpx #$06			cpx 	#3*2
.835e		d0 d5		bne $8335			bne 	_PCMCLoop
.8360		60		rts				rts
.8361						_PCMCExtent:
>8361		3f 01 ef 00 ff 00				.word 	319,239,255
.8367						PMKAddSubtract:
.8367		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.8369		30 0e		bmi $8379			bmi 	PMKSubtract
.836b						PMKAdd:
.836b		18		clc				clc
.836c		7d 7f 06	adc $067f,x			adc 	GNEBegin,x
.836f		9d 7f 06	sta $067f,x			sta 	GNEBegin,x
.8372		90 14		bcc $8388			bcc 	PMKExit
.8374		fe 80 06	inc $0680,x			inc 	GNEBegin+1,x
.8377		80 0f		bra $8388			bra 	PMKExit
.8379						PMKSubtract:
.8379		18		clc				clc
.837a		7d 7f 06	adc $067f,x			adc 	GNEBegin,x
.837d		9d 7f 06	sta $067f,x			sta 	GNEBegin,x
.8380		bd 80 06	lda $0680,x			lda 	GNEBegin+1,x
.8383		69 ff		adc #$ff			adc 	#$FF
.8385		9d 80 06	sta $0680,x			sta 	GNEBegin+1,x
.8388						PMKExit:
.8388		e8		inx				inx 								; next slot ?
.8389		e8		inx				inx
.838a		60		rts				rts
.838b						ProcessKeyboardEvent:
.838b		ad bf 07	lda $07bf			lda 	KNLEvent.key.raw 			; raw key code.
.838e		20 c9 83	jsr $83c9			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8391		ac bb 07	ldy $07bb			ldy 	KNLEvent.type
.8394		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8396		f0 07		beq $839f			beq 	_PKERelease
.8398		1d 80 06	ora $0680,x			ora 	KeyStatus,x 				; set bit
.839b		9d 80 06	sta $0680,x			sta 	KeyStatus,x
.839e		60		rts				rts
.839f						_PKERelease:
.839f		49 ff		eor #$ff			eor 	#$FF						; clear bit
.83a1		3d 80 06	and $0680,x			and 	KeyStatus,x
.83a4		9d 80 06	sta $0680,x			sta 	KeyStatus,x
.83a7		60		rts				rts
.83a8						UpdateKeyboardJoystick:
.83a8		9c a1 06	stz $06a1			stz 	KeyJoystick
.83ab		a2 00		ldx #$00			ldx 	#0
.83ad						_UKJLoop:
.83ad		bd c4 83	lda $83c4,x			lda 	_UKJKeys,x 					; which key
.83b0		29 1f		and #$1f			and 	#$1F
.83b2		a8		tay				tay
.83b3		b9 80 06	lda $0680,y			lda 	KeyStatus,y 				; get status
.83b6		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.83b8		18		clc				clc  								; set C if bit set
.83b9		69 ff		adc #$ff			adc 	#$FF
.83bb		2e a1 06	rol $06a1			rol 	KeyJoystick 				; shift into place
.83be		e8		inx				inx
.83bf		e0 05		cpx #$05			cpx 	#5 							; do all 5
.83c1		d0 ea		bne $83ad			bne 	_UKJLoop
.83c3		60		rts				rts
.83c4						_UKJKeys:
>83c4		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.83c9						KeyboardConvertXA:
.83c9		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.83cb		8e a0 06	stx $06a0			stx 	KeyMaskTemp
.83ce						_KCCALoop:
.83ce		18		clc				clc
.83cf		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83d1		b0 05		bcs $83d8			bcs 	_KCCADone
.83d3		0e a0 06	asl $06a0			asl 	KeyMaskTemp 				; shift the mask temp
.83d6		80 f6		bra $83ce			bra 	_KCCALoop
.83d8						_KCCADone:
.83d8		aa		tax				tax 								; table entry in X
.83d9		ad a0 06	lda $06a0			lda 	KeyMaskTemp 				; mask temp in A.
.83dc		60		rts				rts
.067f						GNEBegin:
.067f						CMDMouseFlag:
>067f								.fill 	1
.0680						KeyStatus:
>0680								.fill 	32
.06a0						KeyMaskTemp:
>06a0								.fill 	1
.06a1						KeyJoystick:
>06a1								.fill 	1
.06a2						MouseDeltaX:
>06a2								.fill 	2
.06a4						MouseDeltaY:
>06a4								.fill 	2
.06a6						MouseDeltaZ:
>06a6								.fill 	2
.06a8						MouseCountInner:
>06a8								.fill 	2
.06aa						MouseCountMiddle:
>06aa								.fill 	2
.06ac						MouseCountOuter:
>06ac								.fill 	2
.06ae						MousePosX:
>06ae								.fill 	2
.06b0						MousePosY:
>06b0								.fill 	2
.06b2						MousePosZ:
>06b2								.fill 	2
.06b4						MouseStatusX:
>06b4								.fill 	2
.06b6						MouseStatusY:
>06b6								.fill 	2
.06b8						MouseStatusZ:
>06b8								.fill 	2
.06ba						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83dd						KNLSetDrive:
.83dd		8d ba 07	sta $07ba			sta 	KNLDefaultDrive
.83e0		60		rts				rts
.83e1						KNLOpenFileWrite:
.83e1		48		pha				pha
.83e2		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83e4		80 03		bra $83e9			bra 	KNLOpenStart
.83e6						KNLOpenFileRead:
.83e6		48		pha				pha
.83e7		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83e9						KNLOpenStart:
.83e9		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83eb		68		pla				pla
.83ec		20 27 84	jsr $8427			jsr 	KNLSetupFileName
.83ef		20 1c 84	jsr $841c			jsr 	KNLSetEventPointer
.83f2		ad ba 07	lda $07ba			lda 	KNLDefaultDrive 			; currently drive zero only.
.83f5		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83f7		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83fa		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83fc		b0 1d		bcs $841b			bcs     _out
.83fe						_loop
.83fe		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8401		20 9d 82	jsr $829d			jsr     GetNextEvent
.8404		b0 f8		bcs $83fe			bcs     _loop
.8406		ad bb 07	lda $07bb			lda 	KNLEvent.type
.8409		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.840b		f0 0a		beq $8417			beq 	_success
.840d		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.840f		f0 0a		beq $841b			beq 	_out
.8411		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8413		f0 06		beq $841b			beq 	_out
.8415		80 e7		bra $83fe			bra     _loop
.8417						_success
.8417		ad be 07	lda $07be			lda     KNLEvent.file.stream
.841a		18		clc				clc
.841b						_out
.841b		60		rts				rts
.841c						KNLSetEventPointer:
.841c		48		pha				pha
.841d		a9 bb		lda #$bb			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.841f		85 f0		sta $f0				sta     kernel.args.events+0
.8421		a9 07		lda #$07			lda     #KNLEvent >> 8
.8423		85 f1		sta $f1				sta     kernel.args.events+1
.8425		68		pla				pla
.8426		60		rts				rts
.8427						KNLSetupFileName:
.8427		5a		phy				phy 								; save Y on stack
.8428		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.842a		86 37		stx $37				stx 	zTemp0+1
.842c		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.842e		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8430		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8432						_KNLGetLength:
.8432		c8		iny				iny
.8433		b1 36		lda ($36),y			lda 	(zTemp0),y
.8435		d0 fb		bne $8432			bne 	_KNLGetLength
.8437		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8439		7a		ply				ply
.843a		60		rts				rts
.843b						KNLReadBlock:
.843b		85 f3		sta $f3				sta     kernel.args.file.read.stream
.843d		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.843f		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8442		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8444		b0 2e		bcs $8474			bcs     _KGNBExitFail               ; report as general error
.8446						_KGRBEventLoop:
.8446		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8449		20 9d 82	jsr $829d			jsr     GetNextEvent
.844c		b0 f8		bcs $8446			bcs     _KGRBEventLoop
.844e		ad bb 07	lda $07bb			lda 	KNLEvent.type 				; get event
.8451		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8453		f0 0a		beq $845f			beq     _KNLRBGetNextByte
.8455		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8457		f0 1b		beq $8474			beq 	_KGNBExitFail
.8459		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.845b		f0 17		beq $8474			beq 	_KGNBExitFail
.845d		80 e7		bra $8446			bra 	_KGRBEventLoop
.845f						_KNLRBGetNextByte:
.845f		a9 ba		lda #$ba			lda     #<KNLReadBuffer 			; Set the target buffer
.8461		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8463		a9 06		lda #$06			lda     #>KNLReadBuffer
.8465		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8467		ad c1 07	lda $07c1			lda     KNLEvent.file.data.read 	; Set the target length
.846a		85 fd		sta $fd				sta     kernel.args.recv.buflen
.846c		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.846f		ad c1 07	lda $07c1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8472		18		clc				clc
.8473		60		rts				rts
.8474						_KGNBExitFail:
.8474		38		sec				sec
.8475		60		rts				rts
.8476						KNLWriteBlock:
.8476		da		phx				phx
.8477		5a		phy				phy
.8478		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.847a		a5 36		lda $36				lda     zTemp0 						; save the data location.
.847c		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.847e		a5 37		lda $37				lda     zTemp0+1
.8480		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8482		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8484		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8487		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8489		b0 21		bcs $84ac			bcs 	_KWBFailed
.848b						_KNLWLoop:
.848b		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.848e		20 9d 82	jsr $829d			jsr     GetNextEvent
.8491		b0 f8		bcs $848b			bcs     _KNLWLoop
.8493		ad bb 07	lda $07bb			lda     KNLEvent.type 				; various errors.
.8496		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8498		f0 12		beq $84ac			beq 	_KWBFailed
.849a		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.849c		f0 0e		beq $84ac			beq 	_KWBFailed
.849e		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.84a0		f0 0a		beq $84ac			beq 	_KWBFailed
.84a2		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.84a4		d0 e5		bne $848b			bne 	_KNLWLoop
.84a6		18		clc				clc
.84a7		ad c1 07	lda $07c1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.84aa		80 01		bra $84ad			bra 	_KWBExit
.84ac						_KWBFailed:
.84ac		38		sec				sec
.84ad						_KWBExit:
.84ad		7a		ply				ply
.84ae		fa		plx				plx
.84af		60		rts				rts
.84b0						KNLCloseFile:
.84b0		85 f3		sta $f3				sta     kernel.args.file.close.stream
.84b2		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.84b5		60		rts				rts
.84b6						KNLReadController:
.84b6		da		phx				phx
.84b7		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.84b9		64 01		stz $01				stz 	1 							; switch to I/O 0
.84bb		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.84be		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.84c0		0d a1 06	ora $06a1			ora 	KeyJoystick 				; use key joystick.
.84c3		86 01		stx $01				stx 	1 							; repair old I/O and exit
.84c5		fa		plx				plx
.84c6		60		rts				rts
.06ba						KNLReadBuffer:
>06ba								.fill   256
.07ba						KNLDefaultDrive:
>07ba								.byte 	?
.07bb						KNLEvent
>07bb						type        .byte   ?   ; Enum above
>07bc						buf         .byte   ?   ; page id or zero
>07bd						ext         .byte   ?   ; page id or zero
.07be						key
>07be						keyboard    .byte   ?   ; Keyboard ID
>07bf						raw         .byte   ?   ; Raw key ID
>07c0						ascii       .byte   ?   ; ASCII value
>07c1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.07be						mouse
.07be						delta
>07be						x           .byte   ?
>07bf						y           .byte   ?
>07c0						z           .byte   ?
>07c1						buttons     .byte   ?
.07be						clicks
>07be						inner       .byte   ?
>07bf						middle      .byte   ?
>07c0						outer       .byte   ?
.07be						joystick
>07be						joy0        .byte   ?
>07bf						joy1        .byte   ?
.07be						udp
>07be						token       .byte   ?   ; TODO: break out into fields
.07be						tcp
>07be						len         .byte   ?   ; Raw packet length.
.07be						file
>07be						stream      .byte   ?
>07bf						cookie      .byte   ?
.07c0						data
>07c0						requested   .byte   ?   ; Requested number of bytes to read
>07c1						read        .byte   ?   ; Number of bytes actually read
.07c0						wrote
>07c0						requested   .byte   ?   ; Requested number of bytes to read
>07c1						wrote       .byte   ?   ; Number of bytes actually read
.07be						directory
>07be						stream      .byte   ?
>07bf						cookie      .byte   ?
.07c0						volume
>07c0						len         .byte   ?   ; Length of volname (in buf)
>07c1						flags       .byte   ?   ; block size, text encoding
.07c0						file
>07c0						len         .byte   ?
>07c1						flags       .byte   ?   ; block scale, text encoding, approx size
.07c0						free
>07c0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Seek        .fill   4   ; Seek to a specific position in a file.
>ff78						Open        .fill   4   ; Open a directory for reading.
>ff7c						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80						Close       .fill   4   ; Close a directory once finished reading.
>ff84						MkDir       .fill   4   ; Create a directory
>ff88						RmDir       .fill   4   ; Delete a directory
>ff8c						            .fill   4   ; call gate
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						SendICMP    .fill   4
>ffa4						Match       .fill   4
>ffa8						Init        .fill   4
>ffac						Send        .fill   4
>ffb0						Recv        .fill   4
>ffb4						Open        .fill   4
>ffb8						Accept      .fill   4
>ffbc						Reject      .fill   4
>ffc0						Send        .fill   4
>ffc4						Recv        .fill   4
>ffc8						Close       .fill   4
>ffcc						Reset       .fill   4   ; Re-init the display
>ffd0						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc						GetTime     .fill   4
>ffe0						SetTime     .fill   4
>ffe4						GetSysInfo  .fill   4
>ffe8						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						seek
>00f3						stream      .byte       ?
>00f4						position    .dword      ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						mkdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						rmdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.00f3						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						seek
>0003						stream      .byte       ?
>0004						position    .dword      ?
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						mkdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						rmdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0003						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						seek
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_seek_t
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						mkdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						rmdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0000						config_t
.0000						time_t
>0000						century     .byte       ?
>0001						year        .byte       ?
>0002						month       .byte       ?
>0003						day         .byte       ?
>0004						hours       .byte       ?
>0005						minutes     .byte       ?
>0006						seconds     .byte       ?
>0007						millis      .byte       ?
.0008						size
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						SEEK        .word   ?   ; The seek request has completed.
>003c						OPENED      .word   ?   ; The directory open request succeeded.
>003e						VOLUME      .word   ?   ; A volume record was found.
>0040						FILE        .word   ?   ; A file record was found.
>0042						FREE        .word   ?   ; A file-system free-space record was found.
>0044						EOF         .word   ?   ; All data has been read.
>0046						CLOSED      .word   ?   ; The directory file has been closed.
>0048						ERROR       .word   ?   ; An error occured; user should close.
>004a						CREATED     .word   ?   ; The directory has been created.
>004c						DELETED     .word   ?   ; The directory has been deleted.
>004e						TCP         .word   ?
>0050						UDP         .word   ?
>0052						TICK        .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84c7						AssembleGroup1:
.84c7		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.84c9		8d 41 04	sta $0441			sta 	ModeMask 					; initialise the mode mask - all for all
.84cc		80 02		bra $84d0			bra 	AsmGroup12
.84ce						AssembleGroup2:
.84ce		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84d0						AsmGroup12:
.84d0		8d 3f 04	sta $043f			sta 	IsGroup1 					; save the 'group 1' flag
.84d3		68		pla				pla 								; pop the return address to access the information following.
.84d4		fa		plx				plx
.84d5		20 5c 85	jsr $855c			jsr 	AccessParameters 			; get opcode and save as base
.84d8		8d 40 04	sta $0440			sta 	BaseOpcode
.84db		ad 3f 04	lda $043f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84de		d0 08		bne $84e8			bne 	_AG12HaveMask
.84e0		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84e2		20 64 85	jsr $8564			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84e5		8d 41 04	sta $0441			sta 	ModeMask
.84e8						_AG12HaveMask:
.84e8		20 98 86	jsr $8698			jsr 	TypeAndCalculateOperand 	; get zero page type
.84eb		da		phx				phx 								; save found address mode
.84ec		20 c8 85	jsr $85c8			jsr 	AssembleModeX
.84ef		fa		plx				plx  								; restore address mode
.84f0		b0 0b		bcs $84fd			bcs 	_AG12Exit
.84f2		20 fe 84	jsr $84fe			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84f5		20 c8 85	jsr $85c8			jsr 	AssembleModeX
.84f8		b0 03		bcs $84fd			bcs 	_AG12Exit
.84fa		4c bd a4	jmp $a4bd			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84fd						_AG12Exit:
.84fd		60		rts				rts
.84fe						PromoteToAbsolute:
.84fe		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8500		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8502		f0 19		beq $851d			beq 	_PTADo
.8504		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8506		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8508		f0 13		beq $851d			beq 	_PTADo
.850a		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.850c		e0 80		cpx #$80			cpx 	#AM_ZEROY
.850e		f0 0d		beq $851d			beq 	_PTADo
.8510		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8512		e0 d1		cpx #$d1			cpx 	#AM_IND
.8514		f0 07		beq $851d			beq 	_PTADo
.8516		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8518		e0 c0		cpx #$c0			cpx 	#AM_INDX
.851a		f0 01		beq $851d			beq 	_PTADo
.851c		60		rts				rts
.851d						_PTADo:
.851d		aa		tax				tax
.851e		60		rts				rts
.851f						AssembleGroup3:
.851f		68		pla				pla 								; get parameters, which is just the opcode.
.8520		fa		plx				plx
.8521		20 5c 85	jsr $855c			jsr 	AccessParameters 			; get and output opcode
.8524		20 74 85	jsr $8574			jsr 	AssemblerWriteByte
.8527		20 fc 86	jsr $86fc			jsr 	CalculateOperand 			; get a 16 bit operand
.852a		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.852c		38		sec				sec
.852d		ed 3a 04	sbc $043a			sbc 	AssemblerAddress
.8530		48		pha				pha 								; LSB in A
.8531		a5 60		lda $60				lda 	NSMantissa1
.8533		ed 3b 04	sbc $043b			sbc 	AssemblerAddress+1
.8536		aa		tax				tax 								; MSB in X
.8537		68		pla				pla
.8538		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8539		69 7f		adc #$7f			adc 	#$7F
.853b		90 01		bcc $853e			bcc 	_AG3NoCarry
.853d		e8		inx				inx
.853e						_AG3NoCarry:
.853e		38		sec				sec 								; fix back and write out anyways.
.853f		e9 80		sbc #$80			sbc 	#$80
.8541		20 74 85	jsr $8574			jsr 	AssemblerWriteByte
.8544		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8546		f0 0a		beq $8552			beq 	_AG3Exit
.8548		ad 3c 04	lda $043c			lda 	AssemblerControl 			; are we allowing bad values ?
.854b		29 01		and #$01			and 	#1
.854d		f0 03		beq $8552			beq 	_AG3Exit
.854f		4c c2 a4	jmp $a4c2			jmp 	RangeError 					; no, branch is out of range
.8552						_AG3Exit:
.8552		60		rts				rts
.8553						AssembleGroup4:
.8553		68		pla				pla 								; pop address
.8554		fa		plx				plx
.8555		20 5c 85	jsr $855c			jsr 	AccessParameters 			; access and get first
.8558		20 74 85	jsr $8574			jsr 	AssemblerWriteByte 			; output it.
.855b		60		rts				rts
.855c						AccessParameters:
.855c		8d 3d 04	sta $043d			sta 	ParamStart
.855f		8e 3e 04	stx $043e			stx 	ParamStart+1
.8562		a9 01		lda #$01			lda 	#1
.8564						GetParameter:
.8564		5a		phy				phy
.8565		a8		tay				tay
.8566		ad 3d 04	lda $043d			lda 	ParamStart
.8569		85 36		sta $36				sta 	zTemp0
.856b		ad 3e 04	lda $043e			lda 	ParamStart+1
.856e		85 37		sta $37				sta 	zTemp0+1
.8570		b1 36		lda ($36),y			lda 	(zTemp0),y
.8572		7a		ply				ply
.8573		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8574						AssemblerWriteByte:
.8574		48		pha			pha
.8575		ad 3c 04	lda $043c		lda 	AssemblerControl 				; check printing bytes ?
.8578		29 02		and #$02		and 	#2
.857a		f0 1b		beq $8597		beq 	_AWBNoPrint
.857c		ad 3b 04	lda $043b		lda		AssemblerAddress+1 				; print address
.857f		20 b2 85	jsr $85b2		jsr 	PrintHex
.8582		ad 3a 04	lda $043a		lda		AssemblerAddress
.8585		20 b2 85	jsr $85b2		jsr 	PrintHex
.8588		a9 20		lda #$20		lda 	#' '
.858a		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.858d		68		pla			pla 									; print byte
.858e		48		pha			pha
.858f		20 b2 85	jsr $85b2		jsr 	PrintHex
.8592		a9 0d		lda #$0d		lda 	#13
.8594		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8597						_AWBNoPrint:
.8597		ad 3a 04	lda $043a		lda		AssemblerAddress				; copy address to zTemp0
.859a		85 36		sta $36			sta 	zTemp0
.859c		ad 3b 04	lda $043b		lda		AssemblerAddress+1
.859f		f0 0e		beq $85af		beq 	_AWBRange
.85a1		85 37		sta $37			sta 	zTemp0+1
.85a3		68		pla			pla 									; write byte out
.85a4		92 36		sta ($36)		sta 	(zTemp0)
.85a6		ee 3a 04	inc $043a		inc 	AssemblerAddress 				; bump address
.85a9		d0 03		bne $85ae		bne 	_AWBNoCarry
.85ab		ee 3b 04	inc $043b		inc 	AssemblerAddress+1
.85ae						_AWBNoCarry:
.85ae		60		rts			rts
.85af						_AWBRange:
.85af		4c c2 a4	jmp $a4c2		jmp 	RangeError
.85b2						PrintHex:
.85b2		48		pha				pha
.85b3		4a		lsr a				lsr 	a
.85b4		4a		lsr a				lsr 	a
.85b5		4a		lsr a				lsr 	a
.85b6		4a		lsr a				lsr 	a
.85b7		20 bb 85	jsr $85bb			jsr 	_PrintNibble
.85ba		68		pla				pla
.85bb						_PrintNibble:
.85bb		29 0f		and #$0f			and 	#15
.85bd		c9 0a		cmp #$0a			cmp 	#10
.85bf		90 02		bcc $85c3			bcc 	_NoShift
.85c1		69 06		adc #$06			adc 	#6
.85c3						_NoShift:
.85c3		69 30		adc #$30			adc 	#48
.85c5		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85c8						AssembleModeX:
.85c8		5a		phy				phy
.85c9		ad 3f 04	lda $043f			lda 	IsGroup1
.85cc		f0 17		beq $85e5			beq 	_AMXGroup2
.85ce		8a		txa				txa 							; is it in group # 1
.85cf		29 40		and #$40			and 	#AM_ISG1
.85d1		f0 4d		beq $8620			beq 	_AMXFail 				; no, give up.
.85d3		8a		txa				txa 							; get back.
.85d4		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85d6		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85d8		d0 22		bne $85fc			bne 	_AMXHaveInfo
.85da		ad 40 04	lda $0440			lda 	BaseOpcode 				; cannot store immediate.
.85dd		c9 81		cmp #$81			cmp 	#$81
.85df		f0 3f		beq $8620			beq 	_AMXFail
.85e1		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85e3		80 17		bra $85fc			bra 	_AMXHaveInfo 			; odd design decision there.
.85e5						_AMXGroup2:
.85e5		8a		txa				txa 							; is it in group 2 ?
.85e6		29 20		and #$20			and 	#AM_ISG2
.85e8		f0 36		beq $8620			beq 	_AMXFail 				; no, give up.
.85ea		8a		txa				txa 							; get the offset into Y
.85eb		29 1f		and #$1f			and 	#$1F
.85ed		4a		lsr a				lsr 	a 						; make it 0-7.
.85ee		4a		lsr a				lsr  	a
.85ef		a8		tay				tay
.85f0		ad 41 04	lda $0441			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85f3						_AMXCheckOkay:
.85f3		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85f4		88		dey				dey
.85f5		10 fc		bpl $85f3			bpl 	_AMXCheckOkay
.85f7		90 27		bcc $8620			bcc 	_AMXFail 				; not allowed.
.85f9		8a		txa				txa  							; get mask back
.85fa		29 1f		and #$1f			and 	#$1F
.85fc						_AMXHaveInfo:
.85fc		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85fe		10 04		bpl $8604			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8600		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8602		d0 1c		bne $8620			bne 	_AMXFail
.8604						_AMXAnySize:
.8604		18		clc				clc 							; add offset to the base opcode
.8605		6d 40 04	adc $0440			adc 	BaseOpcode
.8608						_AMXOutputCode:
.8608		20 74 85	jsr $8574			jsr 	AssemblerWriteByte 		; write the opcode out.
.860b		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.860d		f0 0e		beq $861d			beq 	_AMXExit
.860f		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8611		20 74 85	jsr $8574			jsr 	AssemblerWriteByte
.8614		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8616		30 05		bmi $861d			bmi 	_AMXExit
.8618		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.861a		20 74 85	jsr $8574			jsr 	AssemblerWriteByte
.861d						_AMXExit:
.861d		7a		ply				ply
.861e		38		sec				sec
.861f		60		rts				rts
.8620						_AMXFail:
.8620		a0 00		ldy #$00			ldy 	#0
.8622						_AMXCheckOddities:
.8622		8a		txa				txa
.8623		d9 4a 86	cmp $864a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8626		d0 15		bne $863d			bne 	_AMXCONext
.8628		b9 48 86	lda $8648,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.862b		cd 40 04	cmp $0440			cmp 	BaseOpcode
.862e		d0 0d		bne $863d			bne 	_AMXCONext
.8630		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8632		10 04		bpl $8638			bpl 	_AMXCONotZero
.8634		a5 60		lda $60				lda 	NSMantissa1
.8636		d0 05		bne $863d			bne 	_AMXCONext
.8638						_AMXCONotZero:
.8638		b9 49 86	lda $8649,y			lda 	ExtraOpcode+1,y 		; get new opcode
.863b		80 cb		bra $8608			bra 	_AMXOutputCode 			; and assemble it
.863d						_AMXCONext:
.863d		c8		iny				iny
.863e		c8		iny				iny
.863f		c8		iny				iny
.8640		b9 48 86	lda $8648,y			lda 	ExtraOpcode+0,y 		; end of table
.8643		d0 dd		bne $8622			bne 	_AMXCheckOddities
.8645						_AMXCOFail:
.8645		7a		ply				ply
.8646		18		clc				clc
.8647		60		rts				rts
.8648						ExtraOpcode:
>8648		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>864b		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>864e		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8651		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8654		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8657		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>865a		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>865d		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8660		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8663		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8666		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8667						LabelHere:
.8667		c8		iny				iny 								; skip .
.8668		a2 00		ldx #$00			ldx 	#0 							; get a term
.866a		20 39 9d	jsr $9d39			jsr 	EvaluateTerm
.866d		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.866f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8671		d0 22		bne $8695			bne 	_ALType 					; otherwise typing error
.8673		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8675		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8677		b5 60		lda $60,x			lda 	NSMantissa1,x
.8679		85 37		sta $37				sta 	zTemp0+1
.867b		5a		phy				phy 								; copy address in (64k)
.867c		a0 01		ldy #$01			ldy 	#1
.867e		ad 3a 04	lda $043a			lda	 	AssemblerAddress
.8681		92 36		sta ($36)			sta 	(zTemp0)
.8683		ad 3b 04	lda $043b			lda	 	AssemblerAddress+1
.8686		91 36		sta ($36),y			sta 	(zTemp0),y
.8688		c8		iny				iny
.8689		a9 00		lda #$00			lda 	#0 							; zero the rest.
.868b		91 36		sta ($36),y			sta 	(zTemp0),y
.868d		c8		iny				iny
.868e		91 36		sta ($36),y			sta 	(zTemp0),y
.8690		c8		iny				iny
.8691		91 36		sta ($36),y			sta 	(zTemp0),y
.8693		7a		ply				ply
.8694		60		rts				rts
.8695						_ALType:
.8695		4c c7 a4	jmp $a4c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8698						TypeAndCalculateOperand:
.8698		b1 30		lda ($30),y			lda 	(codePtr),y
.869a		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.869c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.869e		f0 5b		beq $86fb			beq 	_TACOExit
.86a0		c9 80		cmp #$80			cmp 	#KWC_EOL
.86a2		f0 57		beq $86fb			beq 	_TACOExit
.86a4		c8		iny				iny
.86a5		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.86a7		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.86a9		f0 51		beq $86fc			beq 	CalculateOperand
.86ab		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.86ad		f0 1f		beq $86ce			beq 	_TACOIndirect
.86af		88		dey				dey 								; undo get of first character
.86b0		20 fc 86	jsr $86fc			jsr 	CalculateOperand 			; get operand
.86b3		b1 30		lda ($30),y			lda 	(codePtr),y
.86b5		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.86b7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86b9		d0 40		bne $86fb			bne 	_TACOExit
.86bb		c8		iny				iny
.86bc		20 06 87	jsr $8706			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86bf		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86c1		c9 58		cmp #$58			cmp 	#'X'
.86c3		f0 36		beq $86fb			beq 	_TACOExit
.86c5		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86c7		c9 59		cmp #$59			cmp 	#'Y'
.86c9		f0 30		beq $86fb			beq 	_TACOExit
.86cb						_TACOSyntax:
.86cb		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.86ce						_TACOIndirect:
.86ce		20 fc 86	jsr $86fc			jsr 	CalculateOperand 			; get the operand
.86d1		b1 30		lda ($30),y			lda 	(codePtr),y
.86d3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86d5		f0 17		beq $86ee			beq 	_TACOIndX
.86d7		20 cc 93	jsr $93cc			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86da		b1 30		lda ($30),y			lda 	(codePtr),y
.86dc		a2 d1		ldx #$d1			ldx 	#AM_IND
.86de		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86e0		d0 19		bne $86fb			bne 	_TACOExit
.86e2		c8		iny				iny
.86e3		20 06 87	jsr $8706			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86e6		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86e8		d0 e1		bne $86cb			bne 	_TACOSyntax
.86ea		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86ec		80 0d		bra $86fb			bra 	_TACOExit
.86ee						_TACOIndX:
.86ee		c8		iny				iny
.86ef		20 06 87	jsr $8706			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86f2		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86f4		d0 d5		bne $86cb			bne 	_TACOSyntax
.86f6		20 cc 93	jsr $93cc			jsr 	CheckRightBracket			; check )
.86f9		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86fb						_TACOExit:
.86fb		60		rts				rts
.86fc						CalculateOperand:
.86fc		48		pha				pha
.86fd		da		phx				phx
.86fe		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8700		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.8703		fa		plx				plx
.8704		68		pla				pla
.8705		60		rts				rts
.8706						TACOCheckXY:
.8706		b1 30		lda ($30),y			lda 	(codePtr),y
.8708		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.870a		c9 40		cmp #$40			cmp 	#$40
.870c		d0 21		bne $872f			bne 	_TCXYFail
.870e		b1 30		lda ($30),y			lda 	(codePtr),y
.8710		18		clc				clc
.8711		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8713		85 37		sta $37				sta 	zTemp0+1
.8715		c8		iny				iny
.8716		b1 30		lda ($30),y			lda 	(codePtr),y
.8718		c8		iny				iny
.8719		85 36		sta $36				sta 	zTemp0
.871b		5a		phy				phy 								; save position
.871c		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.871e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8720		d0 0c		bne $872e			bne 	_TCXYPopFail
.8722		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8724		b1 36		lda ($36),y			lda 	(zTemp0),y
.8726		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8728		f0 08		beq $8732			beq 	_TCXYFound
.872a		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.872c		f0 04		beq $8732			beq 	_TCXYFound
.872e						_TCXYPopFail:
.872e		7a		ply				ply
.872f						_TCXYFail:
.872f		a9 00		lda #$00			lda 	#0
.8731		60		rts				rts
.8732						_TCXYFound:
.8732		7a		ply				ply 								; restore position
.8733		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8735		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8736						BackloadProgram:
.8736		20 1b 8e	jsr $8e1b			jsr 	NewProgram 					; does the actual NEW.
.8739		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.873b		a9 96		lda #$96			lda 	#_BLLoad & $FF
.873d		20 44 94	jsr $9444			jsr 	PrintStringXA
.8740		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8742		8d c2 07	sta $07c2			sta 	BackLoadPage
.8745		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8747		8d c3 07	sta $07c3			sta 	0+BackLoadPointer
.874a		a9 60		lda #$60			lda 	#(($6000) >> 8)
.874c		8d c4 07	sta $07c4			sta 	1+BackLoadPointer
.874f		9c c5 07	stz $07c5			stz 	BackLoadLast 				; reset backload last.
.8752		9c c6 07	stz $07c6			stz 	BackLoadLast+1
.8755		a9 ff		lda #$ff			lda 	#$FF
.8757		8d fa ff	sta $fffa			sta 	$FFFA
.875a						_BPLoop:
.875a		a2 ff		ldx #$ff			ldx 	#$FF
.875c		20 cb 87	jsr $87cb			jsr 	BLReadByte 					; read a byte
.875f		c9 00		cmp #$00			cmp 	#0
.8761		f0 2c		beq $878f			beq 	_BPExit 					; if 0 exit
.8763		30 2a		bmi $878f			bmi 	_BPExit 					; if -ve exit
.8765						_BPCopy:
.8765		e8		inx				inx  								; copy byte into the lineBuffer
.8766		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.8769		9e 47 05	stz $0547,x			stz 	lineBuffer+1,x
.876c		20 cb 87	jsr $87cb			jsr 	BLReadByte 					; read next byte
.876f		30 0a		bmi $877b			bmi 	_BPEndLine 					; -ve = EOL
.8771		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8773		d0 02		bne $8777			bne 	_BPNotTab
.8775		a9 20		lda #$20			lda 	#' '
.8777						_BPNotTab:
.8777		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8779		b0 ea		bcs $8765			bcs 	_BPCopy 					; until a control character, should be 13 received.
.877b						_BPEndLine:
.877b		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.877e		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.8781		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.8784		f0 d4		beq $875a			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8786		20 ab 87	jsr $87ab			jsr 	BLCheckLast 				; check last backload okay.
.8789		38		sec				sec 								; append not insert
.878a		20 b1 a6	jsr $a6b1			jsr 	MemoryInsertLine 			; append to current program
.878d		80 cb		bra $875a			bra 	_BPLoop
.878f						_BPExit:
.878f		9c fa ff	stz $fffa			stz 	$FFFA
.8792		20 71 92	jsr $9271			jsr 	ClearSystem 				; clear variables etc.
.8795		60		rts				rts
.8796						_BLLoad:
>8796		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>879e		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.87ab						BLCheckLast:
.87ab		ad c5 07	lda $07c5			lda 	BackLoadLast 				; check last < current
.87ae		cd 47 04	cmp $0447			cmp 	tokenLineNumber
.87b1		ad c6 07	lda $07c6			lda 	BackLoadLast+1
.87b4		ed 48 04	sbc $0448			sbc 	tokenLineNumber+1
.87b7		b0 0d		bcs $87c6			bcs 	_BLCheckFail
.87b9		ad 47 04	lda $0447			lda 	tokenLineNumber 			; update
.87bc		8d c5 07	sta $07c5			sta 	BackLoadLast
.87bf		ad 48 04	lda $0448			lda 	tokenLineNumber+1
.87c2		8d c6 07	sta $07c6			sta 	BackLoadLast+1
.87c5		60		rts				rts
.87c6						_BLCheckFail:
.87c6		a9 02		lda #$02		lda	#2
.87c8		4c e5 93	jmp $93e5		jmp	ErrorHandler
.87cb						BLReadByte:
.87cb		da		phx				phx
.87cc		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.87ce		ad c2 07	lda $07c2			lda 	BackLoadPage	 			; set current page
.87d1		85 0b		sta $0b				sta 	8+3
.87d3		ad c3 07	lda $07c3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87d6		85 36		sta $36				sta 	zTemp0
.87d8		ad c4 07	lda $07c4			lda 	BackLoadPointer+1
.87db		85 37		sta $37				sta 	zTemp0+1
.87dd		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87df		ee c3 07	inc $07c3			inc 	BackLoadPointer 			; bump pointer
.87e2		d0 0f		bne $87f3			bne 	_BLNoCarry
.87e4		ee c4 07	inc $07c4			inc 	BackLoadPointer+1
.87e7		10 0a		bpl $87f3			bpl 	_BLNoCarry 					; need a new page
.87e9		48		pha				pha
.87ea		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87ec		8d c4 07	sta $07c4			sta 	BackLoadPointer+1
.87ef		ee c2 07	inc $07c2			inc 	BackLoadPage 				; next page from source.
.87f2		68		pla				pla
.87f3						_BLNoCarry:
.87f3		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87f5		fa		plx				plx
.87f6		c9 00		cmp #$00			cmp 	#0
.87f8		60		rts				rts
.07c2						BackLoadPage:
>07c2								.fill  	1
.07c3						BackLoadPointer:
>07c3								.fill 	2
.07c5						BackLoadLast:
>07c5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87f9						EditProgramCode:
.87f9		ad 47 04	lda $0447			lda 	tokenLineNumber 			; try to find the line.
.87fc		ae 48 04	ldx $0448			ldx 	tokenLineNumber+1
.87ff		20 55 a7	jsr $a755			jsr 	MemorySearch
.8802		90 05		bcc $8809			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8804		d0 03		bne $8809			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8806		20 7a a6	jsr $a67a			jsr 	MemoryDeleteLine 			; delete the line
.8809						_EPCNoDelete:
.8809		ad 49 04	lda $0449			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.880c		c9 80		cmp #$80			cmp 	#KWC_EOL
.880e		f0 0d		beq $881d			beq 	_EPCNoInsert
.8810		ad 47 04	lda $0447			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8813		ae 48 04	ldx $0448			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8816		20 55 a7	jsr $a755			jsr 	MemorySearch
.8819		18		clc				clc 								; insert at this point.
.881a		20 b1 a6	jsr $a6b1			jsr 	MemoryInsertLine 			; insert the line
.881d						_EPCNoInsert:
.881d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.881e						WarmStart:
.881e		a2 ff		ldx #$ff			ldx 	#$FF
.8820		9a		txs				txs
.8821		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8823		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8826		20 d6 81	jsr $81d6			jsr 	InputLine 					; get line to lineBuffer
.8829		ad 46 05	lda $0546			lda 	lineBuffer 					; first character is slash
.882c		c9 2f		cmp #$2f			cmp 	#"/"
.882e		d0 07		bne $8837			bne 	_WSNotSlash
.8830		a2 05		ldx #$05			ldx 	#(lineBuffer+1) >> 8 		; boot rest of line.
.8832		a9 47		lda #$47			lda 	#(lineBuffer+1) & $FF
.8834		4c d8 ab	jmp $abd8			jmp 	BootXA
.8837						_WSNotSlash:
.8837		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.883a		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number <> 0
.883d		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.8840		d0 17		bne $8859			bne 	_WSEditCode 				; if so,edit code.
.8842		9c 46 04	stz $0446			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8845		a9 46		lda #$46			lda 	#((tokenOffset) & $FF)
.8847		85 30		sta $30				sta 	codePtr
.8849		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.884b		85 31		sta $31				sta 	codePtr+1
.884d		ad 49 04	lda $0449			lda 	tokenBuffer 				; nothing to run
.8850		c9 80		cmp #$80			cmp 	#KWC_EOL
.8852		f0 ca		beq $881e			beq 	WarmStart
.8854		20 ca 8f	jsr $8fca			jsr 	RUNCodePointerLine 			; execute that line.
.8857		80 c5		bra $881e			bra 	WarmStart
.8859						_WSEditCode:
.8859		20 f9 87	jsr $87f9			jsr 	EditProgramCode 			; edit the program code
.885c		20 71 92	jsr $9271			jsr 	ClearSystem 				; clear all variables etc.
.885f		80 bd		bra $881e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8861						AssembleCommand:
.8861		a2 00		ldx #$00			ldx 	#0
.8863		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; start address
.8866		a5 58		lda $58				lda 	NSMantissa0
.8868		8d 3a 04	sta $043a			sta 	AssemblerAddress
.886b		a5 60		lda $60				lda 	NSMantissa1
.886d		8d 3b 04	sta $043b			sta 	AssemblerAddress+1
.8870		20 d4 93	jsr $93d4			jsr 	CheckComma
.8873		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; options 0-3
.8876		a5 58		lda $58				lda 	NSMantissa0
.8878		8d 3c 04	sta $043c			sta 	AssemblerControl
.887b		60		rts				rts
.887c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.887d						AssertCommand:
.887d		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.887f		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; the assert test
.8882		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; exit if result is non zero.
.8885		d0 05		bne $888c			bne 	_ACExit
.8887		a9 0a		lda #$0a		lda	#10
.8889		4c e5 93	jmp $93e5		jmp	ErrorHandler
.888c						_ACExit:
.888c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.888d						CallCommand:
.888d		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.888f		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.8892						_CCClear
.8892		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8893		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; these are optional sequentially.
.8896		e0 04		cpx #$04			cpx 	#4
.8898		d0 f8		bne $8892			bne 	_CCClear
.889a		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.889c						_CCCParam:
.889c		b1 30		lda ($30),y			lda 	(codePtr),y
.889e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a0		d0 09		bne $88ab			bne 	_CCCRun6502
.88a2		c8		iny				iny 								; skip comma
.88a3		e8		inx				inx	 								; next level
.88a4		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get A/X/Y
.88a7		e0 03		cpx #$03			cpx 	#3
.88a9		90 f1		bcc $889c			bcc 	_CCCParam 					; done all 3 ?
.88ab						_CCCRun6502:
.88ab		5a		phy				phy 								; save position
.88ac		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.88ae		85 37		sta $37				sta 	zTemp0+1
.88b0		a5 58		lda $58				lda 	NSMantissa0
.88b2		85 36		sta $36				sta 	zTemp0
.88b4		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.88b6		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.88b8		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.88ba		20 bf 88	jsr $88bf			jsr 	_CCCZTemp0 					; call zTemp0
.88bd		7a		ply				ply 								; restore position and exit
.88be		60		rts				rts
.88bf						_CCCZTemp0:
.88bf		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88c2						Command_Data:
.88c2		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.88c4		a2 80		ldx #$80			ldx 	#KWC_EOL
.88c6		20 27 93	jsr $9327			jsr 	ScanForward
.88c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88ca						DimCommand:
.88ca		b1 30		lda ($30),y			lda 	(codePtr),y
.88cc		29 c0		and #$c0			and 	#$C0
.88ce		c9 40		cmp #$40			cmp 	#$40
.88d0		d0 7a		bne $894c			bne 	_DCSyntax 				; n o, error.
.88d2		b1 30		lda ($30),y			lda 	(codePtr),y
.88d4		18		clc				clc
.88d5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88d7		85 3f		sta $3f				sta 	zaTemp+1
.88d9		c8		iny				iny
.88da		b1 30		lda ($30),y			lda 	(codePtr),y
.88dc		c8		iny				iny
.88dd		85 3e		sta $3e				sta 	zaTemp
.88df		5a		phy				phy
.88e0		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88e2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88e4		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88e6		c9 18		cmp #$18			cmp 	#NSTProcedure
.88e8		f0 62		beq $894c			beq 	_DCSyntax
.88ea		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88ec		29 04		and #$04			and 	#NSBIsArray
.88ee		f0 64		beq $8954			beq 	_DCType
.88f0		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88f2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88f4		d0 59		bne $894f			bne 	_DCRedefine
.88f6		7a		ply				ply
.88f7		20 57 89	jsr $8957			jsr 	_DCGetSize 				; get array size, check it.
.88fa		5a		phy				phy
.88fb		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88fd		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88ff		7a		ply				ply 							; is there a second (e.g. ,x)
.8900		b1 30		lda ($30),y			lda 	(codePtr),y
.8902		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8904		d0 0a		bne $8910			bne 	_DCOneDimension
.8906		c8		iny				iny 							; skip comma
.8907		20 57 89	jsr $8957			jsr 	_DCGetSize 				; get 2nd array size
.890a		5a		phy				phy
.890b		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.890d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.890f		7a		ply				ply
.8910						_DCOneDimension:
.8910		5a		phy				phy 							; save position
.8911		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8913		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8915		aa		tax				tax
.8916		c8		iny				iny
.8917		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8919		e8		inx				inx 							; bump them.
.891a		1a		inc a				inc 	a
.891b		20 f0 a2	jsr $a2f0			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.891e		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8920		29 e0		and #$e0			and 	#$E0
.8922		d0 23		bne $8947			bne 	_DCSize
.8924		a0 02		ldy #$02			ldy 	#2 						; get base type
.8926		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8928		20 65 89	jsr $8965			jsr 	ScaleByBaseType 		; scale by base type
.892b		a5 36		lda $36				lda 	zTemp0
.892d		a6 37		ldx $37				ldx 	zTemp0+1
.892f		20 e7 9e	jsr $9ee7			jsr 	AllocateXABytes 		; allocate memory
.8932		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8934		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8936		c8		iny				iny
.8937		8a		txa				txa
.8938		91 3e		sta ($3e),y			sta 	(zaTemp),y
.893a		7a		ply				ply 							; get position back
.893b		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 		; check )
.893e		b1 30		lda ($30),y			lda 	(codePtr),y
.8940		c8		iny				iny 							; consume in case
.8941		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8943		f0 85		beq $88ca			beq 	DimCommand
.8945		88		dey				dey 							; undo consume
.8946		60		rts				rts
.8947						_DCSize:
.8947		a9 16		lda #$16		lda	#22
.8949		4c e5 93	jmp $93e5		jmp	ErrorHandler
.894c						_DCSyntax:
.894c		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.894f						_DCRedefine:
.894f		a9 15		lda #$15		lda	#21
.8951		4c e5 93	jmp $93e5		jmp	ErrorHandler
.8954						_DCType:
.8954		4c c7 a4	jmp $a4c7			jmp 	TypeError
.8957						_DCGetSize:
.8957		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8959		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 	; get array dimension
.895c		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.895e		f0 e7		beq $8947			beq 	_DCSize
.8960		c9 fe		cmp #$fe			cmp 	#254
.8962		f0 e3		beq $8947			beq 	_DCSize
.8964		60		rts				rts
.8965						ScaleByBaseType:
.8965		29 10		and #$10			and 	#NSBIsString 			; is it string
.8967		d0 19		bne $8982			bne 	_SBBTString
.8969		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.896b		48		pha				pha
.896c		a5 36		lda $36				lda 	zTemp0
.896e		48		pha				pha
.896f		06 36		asl $36				asl 	zTemp0 					; x 2
.8971		26 37		rol $37				rol 	zTemp0+1
.8973		06 36		asl $36				asl 	zTemp0 					; x 4
.8975		26 37		rol $37				rol 	zTemp0+1
.8977		68		pla				pla 							; add stacked value = x 5
.8978		65 36		adc $36				adc 	zTemp0
.897a		85 36		sta $36				sta 	zTemp0
.897c		68		pla				pla
.897d		65 37		adc $37				adc 	zTemp0+1
.897f		85 37		sta $37				sta 	zTemp0+1
.8981		60		rts				rts
.8982						_SBBTString:
.8982		06 36		asl $36				asl 	zTemp0
.8984		26 37		rol $37				rol 	zTemp0+1
.8986		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8987						EndCommand:
.8987		4c 1e 88	jmp $881e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.898a						ForCommand:
.898a		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.898c		20 a0 b4	jsr $b4a0			jsr 	StackOpen
.898f		a2 00		ldx #$00			ldx 	#0
.8991		20 39 9d	jsr $9d39			jsr 	EvaluateTerm
.8994		b5 50		lda $50,x			lda 	NSStatus,x
.8996		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8998		d0 47		bne $89e1			bne		_FCError
.899a		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.899c		20 dc 93	jsr $93dc			jsr 	CheckNextA
.899f		e8		inx				inx
.89a0		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; <from> in +1
.89a3		b1 30		lda ($30),y			lda 	(codePtr),y
.89a5		c8		iny				iny 								; consume it
.89a6		48		pha				pha 								; save on stack for later
.89a7		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.89a9		f0 04		beq $89af			beq 	_FCNoSyntax
.89ab		c9 dc		cmp #$dc			cmp 	#KWD_TO
.89ad		d0 35		bne $89e4			bne 	_FCSyntaxError
.89af						_FCNoSyntax:
.89af		e8		inx				inx
.89b0		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger
.89b3		20 e5 b4	jsr $b4e5			jsr 	STKSaveCodePosition 		; save loop back position
.89b6		68		pla				pla 								; restore DOWNTO or TO
.89b7		5a		phy				phy 								; save Y on the stack
.89b8		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89ba		f0 02		beq $89be			beq 	_FCNotDownTo
.89bc		a9 02		lda #$02			lda 	#2
.89be						_FCNotDownTo:
.89be		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89bf		a0 10		ldy #$10			ldy 	#16
.89c1		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89c3		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89c5		a5 58		lda $58				lda 	NSMantissa0
.89c7		91 34		sta ($34),y			sta 	(basicStack),y
.89c9		a5 60		lda $60				lda 	NSMantissa1
.89cb		c8		iny				iny
.89cc		91 34		sta ($34),y			sta 	(basicStack),y
.89ce		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89d0		a2 01		ldx #$01			ldx 	#1
.89d2		20 e7 89	jsr $89e7			jsr 	FCIntegerToStack
.89d5		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89d7		a2 02		ldx #$02			ldx 	#2
.89d9		20 e7 89	jsr $89e7			jsr 	FCIntegerToStack
.89dc		20 02 8a	jsr $8a02			jsr 	CopyIndexToReference
.89df		7a		ply				ply 								; restore position
.89e0		60		rts				rts
.89e1						_FCError:
.89e1		4c c7 a4	jmp $a4c7			jmp 	TypeError
.89e4						_FCSyntaxError:
.89e4		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.89e7						FCIntegerToStack:
.89e7		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89e9		10 03		bpl $89ee			bpl	 	_FCNotNegative
.89eb		20 0e a3	jsr $a30e			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89ee						_FCNotNegative:
.89ee		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89f0		91 34		sta ($34),y			sta 	(basicStack),y
.89f2		c8		iny				iny
.89f3		b5 60		lda $60,x			lda 	NSMantissa1,x
.89f5		91 34		sta ($34),y			sta 	(basicStack),y
.89f7		c8		iny				iny
.89f8		b5 68		lda $68,x			lda 	NSMantissa2,x
.89fa		91 34		sta ($34),y			sta 	(basicStack),y
.89fc		c8		iny				iny
.89fd		b5 70		lda $70,x			lda 	NSMantissa3,x
.89ff		91 34		sta ($34),y			sta 	(basicStack),y
.8a01		60		rts				rts
.8a02						CopyIndexToReference:
.8a02		5a		phy				phy
.8a03		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a05		38		sec				sec 								; (because we copy from offset 8)
.8a06		b1 34		lda ($34),y			lda 	(basicStack),y
.8a08		e9 08		sbc #$08			sbc 	#8
.8a0a		85 36		sta $36				sta 	zTemp0
.8a0c		c8		iny				iny
.8a0d		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0f		e9 00		sbc #$00			sbc 	#0
.8a11		85 37		sta $37				sta 	zTemp0+1
.8a13		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a15		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a17		b1 34		lda ($34),y			lda 	(basicStack),y
.8a19		0a		asl a				asl 	a 							; into carry
.8a1a		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a1c		90 14		bcc $8a32			bcc 	_CITRNormal
.8a1e		38		sec				sec
.8a1f						_CITRNegative:
.8a1f		a9 00		lda #$00			lda 	#0
.8a21		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a23		91 36		sta ($36),y			sta 	(zTemp0),y
.8a25		c8		iny				iny
.8a26		ca		dex				dex
.8a27		d0 f6		bne $8a1f			bne 	_CITRNegative
.8a29		88		dey				dey 								; look at MSB of mantissa
.8a2a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a2c		09 80		ora #$80			ora 	#$80
.8a2e		91 36		sta ($36),y			sta 	(zTemp0),y
.8a30		7a		ply				ply
.8a31		60		rts				rts
.8a32						_CITRNormal:
.8a32		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a34		91 36		sta ($36),y			sta 	(zTemp0),y
.8a36		c8		iny				iny
.8a37		ca		dex				dex
.8a38		d0 f8		bne $8a32			bne 	_CITRNormal
.8a3a		7a		ply				ply 								; and exit.
.8a3b		60		rts				rts
.8a3c						NextCommand:
.8a3c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a3e		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a40		20 cd b4	jsr $b4cd			jsr 	StackCheckFrame
.8a43		5a		phy				phy
.8a44		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a46		b1 34		lda ($34),y			lda 	(basicStack),y
.8a48		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a4a		30 02		bmi $8a4e			bmi 	_NCStepNeg
.8a4c		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a4e						_NCStepNeg:
.8a4e		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a50		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a52		18		clc				clc
.8a53						_NCBump:
.8a53		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a55		91 34		sta ($34),y			sta 	(basicStack),y
.8a57		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a59		c8		iny				iny 								; next byte
.8a5a		ca		dex				dex 								; do four times
.8a5b		d0 f6		bne $8a53			bne 	_NCBump
.8a5d		20 02 8a	jsr $8a02			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a60		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a62		b1 34		lda ($34),y			lda 	(basicStack),y
.8a64		0a		asl a				asl 	a 							; sign bit to carry
.8a65		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a67		85 38		sta $38				sta 	zTemp1
.8a69		90 02		bcc $8a6d			bcc 	_NCCompRev 					; use if step is +ve
.8a6b		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a6d						_NCCompRev:
.8a6d		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a6f		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a71		85 39		sta $39				sta 	zTemp1+1
.8a73		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a75		38		sec				sec
.8a76						_NCCompare:
.8a76		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a78		b1 34		lda ($34),y			lda 	(basicStack),y
.8a7a		a4 39		ldy $39				ldy 	zTemp1+1
.8a7c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a7e		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a80		e6 39		inc $39				inc 	zTemp1+1
.8a82		ca		dex				dex 								; do it 4 times.
.8a83		d0 f1		bne $8a76			bne 	_NCCompare
.8a85		50 02		bvc $8a89			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a87		49 80		eor #$80			eor 	#$80
.8a89						_NCNoOverflow:
.8a89		7a		ply				ply 								; restore Y position
.8a8a		0a		asl a				asl 	a 							; is bit 7 set.
.8a8b		90 04		bcc $8a91			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a8d		20 bf b4	jsr $b4bf			jsr 	StackClose 					; exit the loop
.8a90		60		rts				rts
.8a91						_NCLoopBack:
.8a91		20 f6 b4	jsr $b4f6			jsr 	STKLoadCodePosition 		; loop back
.8a94		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a95						Command_GOSUB:
.8a95		a2 00		ldx #$00			ldx 	#0
.8a97		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a9a		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a9c		20 a0 b4	jsr $b4a0			jsr 	StackOpen 					; create frame
.8a9f		20 e5 b4	jsr $b4e5			jsr 	STKSaveCodePosition 		; save current position
.8aa2		4c b8 8a	jmp $8ab8			jmp 	GotoStackX
.8aa5						Command_RETURN:
.8aa5		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8aa7		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8aa9		20 cd b4	jsr $b4cd			jsr 	StackCheckFrame
.8aac		20 f6 b4	jsr $b4f6			jsr 	STKLoadCodePosition 		; restore code position
.8aaf		20 bf b4	jsr $b4bf			jsr 	StackClose
.8ab2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ab3						GotoCommand:
.8ab3		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ab5		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.8ab8						GotoStackX:
.8ab8		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8aba		48		pha				pha 								; it is slightly inefficient, just in cases.
.8abb		b5 58		lda $58,x			lda 	NSMantissa0,x
.8abd		fa		plx				plx
.8abe		20 55 a7	jsr $a755			jsr 	MemorySearch 				; transfer to line number AX.
.8ac1		90 05		bcc $8ac8			bcc 	_GotoError 					; not found, off end.
.8ac3		d0 03		bne $8ac8			bne 	_GotoError 					; not found exactly
.8ac5		4c c3 8f	jmp $8fc3			jmp 	RunNewLine 					; and go straight to new line code.
.8ac8						_GotoError:
.8ac8		a9 0d		lda #$0d		lda	#13
.8aca		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8acd						IfCommand:
.8acd		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8acf		20 93 a2	jsr $a293			jsr 	EvaluateNumber
.8ad2		b1 30		lda ($30),y			lda 	(codePtr),y
.8ad4		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ad6		d0 0a		bne $8ae2			bne 	_IfStructured 				; we still support it.
.8ad8		c8		iny				iny 								; consume THEN
.8ad9		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; is it zero
.8adc		f0 01		beq $8adf			beq 	_IfFail 					; if fail, go to next line
.8ade		60		rts				rts 								; if THEN just continue
.8adf						_IfFail:
.8adf		4c 9e 8f	jmp $8f9e			jmp 	EOLCommand
.8ae2						_IfStructured:
.8ae2		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; is it zero
.8ae5		d0 07		bne $8aee			bne 	_IfExit 					; if not, then continue normally.
.8ae7		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8ae9		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8aeb		20 27 93	jsr $9327			jsr 	ScanForward 				; and run from there
.8aee						_IfExit:
.8aee		60		rts				rts
.8aef						ElseCode:
.8aef		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8af1		aa		tax				tax 								; so just go to the structure exit
.8af2		20 27 93	jsr $9327			jsr 	ScanForward
.8af5		60		rts				rts
.8af6						EndIf:
.8af6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8af7						Command_Input:
.8af7		9c 44 04	stz $0444			stz 	isPrintFlag
.8afa		80 0c		bra $8b08			bra 	Command_IP_Main
.8afc						Command_CPrint:
.8afc		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8afe		8d 44 04	sta $0444			sta 	isPrintFlag 				; clear input flag
.8b01		80 05		bra $8b08			bra 	Command_IP_Main
.8b03						Command_Print:
.8b03		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8b05		8d 44 04	sta $0444			sta 	isPrintFlag 				; clear input flag
.8b08						Command_IP_Main:
.8b08		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8b09						_CPLoop:
.8b09		08		php				php 								; save last action flag
.8b0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b0c		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8b0e		f0 54		beq $8b64			beq 	_CPExit
.8b10		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b12		f0 50		beq $8b64			beq 	_CPExit
.8b14		68		pla				pla 								; throw last action flag
.8b15		b1 30		lda ($30),y			lda 	(codePtr),y
.8b17		c8		iny				iny
.8b18		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8b1a		f0 45		beq $8b61			beq 	_CPContinueWithSameLine
.8b1c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b1e		f0 3c		beq $8b5c			beq 	_CPTab
.8b20		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b22		f0 34		beq $8b58			beq 	_CPNewLine
.8b24		88		dey				dey 								; undo the get.
.8b25		20 ed 98	jsr $98ed			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b28		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b2a		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b2c		f0 0d		beq $8b3b			beq 	_CPIsValue 					; no, display it.
.8b2e		ad 44 04	lda $0444			lda 	isPrintFlag 				; if print, dereference and print.
.8b31		d0 05		bne $8b38			bne 	_CPIsPrint 					; otherwise display.
.8b33		20 6d 8b	jsr $8b6d			jsr 	CIInputValue 				; input a value to the reference
.8b36		80 20		bra $8b58			bra 	_CPNewLine
.8b38						_CPIsPrint:
.8b38		20 b2 9b	jsr $9bb2			jsr 	Dereference 				; dereference if required.
.8b3b						_CPIsValue:
.8b3b		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b3d		29 10		and #$10			and 	#NSBIsString
.8b3f		f0 09		beq $8b4a			beq 	_CPNumber
.8b41		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b43		a5 58		lda $58				lda 	NSMantissa0
.8b45		20 d0 8b	jsr $8bd0			jsr 	CPPrintStringXA
.8b48		80 be		bra $8b08			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b4a						_CPNumber:
.8b4a		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b4c		20 7a a1	jsr $a17a			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b4f		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b51		a9 65		lda #$65			lda 	#decimalBuffer & $FF
.8b53		20 d0 8b	jsr $8bd0			jsr 	CPPrintStringXA 			; print it.
.8b56		80 b0		bra $8b08			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b58						_CPNewLine:
.8b58		a9 0d		lda #$0d			lda 	#13
.8b5a		80 02		bra $8b5e			bra 	_CPPrintCharDirect
.8b5c						_CPTab:
.8b5c		a9 09		lda #$09			lda 	#9 							; print TAB
.8b5e						_CPPrintCharDirect:
.8b5e		20 eb 8b	jsr $8beb			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b61						_CPContinueWithSameLine:
.8b61		38		sec				sec 								; loop round with carry set, which
.8b62		80 a5		bra $8b09			bra 	_CPLoop 					; will inhibit final CR
.8b64						_CPExit:
.8b64		28		plp				plp 								; get last action flag
.8b65		b0 05		bcs $8b6c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b67		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b69		20 eb 8b	jsr $8beb			jsr 	CPPVControl
.8b6c						_CPExit2:
.8b6c		60		rts				rts
.8b6d						CIInputValue:
.8b6d		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b6f						_CIInputLine:
.8b6f		20 ee 8b	jsr $8bee			jsr 	CPInputVector 				; get key
.8b72		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b74		f0 1f		beq $8b95			beq 	_CIHaveValue
.8b76		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b78		f0 11		beq $8b8b			beq 	_CIBackspace
.8b7a		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b7c		90 f1		bcc $8b6f			bcc 	_CIInputLine
.8b7e		e0 50		cpx #$50			cpx 	#80 						; max length
.8b80		b0 ed		bcs $8b6f			bcs 	_CIInputLine
.8b82		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.8b85		e8		inx				inx
.8b86		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b89		80 e4		bra $8b6f			bra 	_CIInputLine
.8b8b						_CIBackspace:
.8b8b		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b8d		f0 e0		beq $8b6f			beq 	_CIInputLine
.8b8f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b92		ca		dex				dex
.8b93		80 da		bra $8b6f			bra 	_CIInputLine
.8b95						_CIHaveValue:
.8b95		9e 46 05	stz $0546,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b98		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b9a		29 10		and #$10			and 	#NSBIsString
.8b9c		f0 17		beq $8bb5			beq 	_CIAssignNumber 			; assign a number
.8b9e		a2 01		ldx #$01			ldx 	#1
.8ba0		a9 46		lda #$46			lda 	#lineBuffer & $FF 			; set up to point to new string
.8ba2		95 58		sta $58,x			sta 	NSMantissa0,x
.8ba4		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8ba6		95 60		sta $60,x			sta 	NSMantissa1,x
.8ba8		74 68		stz $68,x			stz 	NSMantissa2,x
.8baa		74 70		stz $70,x			stz 	NSMantissa3,x
.8bac		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8bae		95 50		sta $50,x			sta  	NSStatus,x
.8bb0		ca		dex				dex 								; X = 0
.8bb1		20 2a 8c	jsr $8c2a			jsr 	AssignVariable
.8bb4		60		rts				rts
.8bb5						_CIAssignNumber:
.8bb5		a9 46		lda #$46			lda 	#lineBuffer & $FF 			; set up to point to new string
.8bb7		85 36		sta $36				sta 	zTemp0
.8bb9		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8bbb		85 37		sta $37				sta 	zTemp0+1
.8bbd		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8bbf		20 5a a0	jsr $a05a			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8bc2		90 07		bcc $8bcb			bcc 	_CIIsOkay
.8bc4		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8bc6		20 e3 8b	jsr $8be3			jsr 	CPPrintVector
.8bc9		80 a2		bra $8b6d			bra 	CIInputValue
.8bcb						_CIIsOkay:
.8bcb		ca		dex				dex 								; X = 0
.8bcc		20 2a 8c	jsr $8c2a			jsr 	AssignVariable
.8bcf		60		rts				rts
.8bd0						CPPrintStringXA:
.8bd0		5a		phy				phy
.8bd1		86 37		stx $37				stx 	zTemp0+1
.8bd3		85 36		sta $36				sta 	zTemp0
.8bd5		a0 00		ldy #$00			ldy 	#0
.8bd7						_PSXALoop:
.8bd7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd9		f0 06		beq $8be1			beq 	_PSXAExit
.8bdb		20 e3 8b	jsr $8be3			jsr 	CPPrintVector
.8bde		c8		iny				iny
.8bdf		80 f6		bra $8bd7			bra 	_PSXALoop
.8be1						_PSXAExit:
.8be1		7a		ply				ply
.8be2		60		rts				rts
.8be3						CPPrintVector:
.8be3		2c 44 04	bit $0444			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8be6		30 03		bmi $8beb			bmi 	CPPVControl
.8be8		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8beb						CPPVControl:
.8beb		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bee						CPInputVector:
.8bee		4c ce 81	jmp $81ce			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bf1						LetCommand:
.8bf1		a2 00		ldx #$00			ldx 	#0
.8bf3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf5		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8bf7		d0 14		bne $8c0d			bne 	_LCStandard
.8bf9		c8		iny				iny 								; skip equal
.8bfa		20 39 9d	jsr $9d39			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bfd		20 b2 9b	jsr $9bb2			jsr 	Dereference 				; dereference it to a value
.8c00		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8c02		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8c04		95 50		sta $50,x			sta 	NSStatus,x
.8c06		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8c08		d0 0f		bne $8c19			bne 	_LCMain
.8c0a		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; was a reference before.
.8c0d						_LCStandard:
.8c0d		ad d7 98	lda $98d7			lda 	PrecedenceLevel+"*"			; precedence > this
.8c10		20 f1 98	jsr $98f1			jsr 	EvaluateExpressionAtPrecedence
.8c13		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8c15		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c17		f0 0e		beq $8c27			beq 	_LetGoProc 					; it's a procedure call.
.8c19						_LCMain:
.8c19		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c1b		20 dc 93	jsr $93dc			jsr 	CheckNextA
.8c1e		e8		inx				inx 								; RHS
.8c1f		20 8a a2	jsr $a28a			jsr 	EvaluateValue
.8c22		ca		dex				dex
.8c23		20 2a 8c	jsr $8c2a			jsr 	AssignVariable
.8c26		60		rts				rts
.8c27						_LetGoProc:
.8c27		4c 74 8e	jmp $8e74			jmp 	CallProcedure
.8c2a						AssignVariable:
.8c2a		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c2c		48		pha				pha 								; save a copy
.8c2d		55 51		eor $51,x			eor 	NSStatus+1,x
.8c2f		29 10		and #$10			and 	#NSBIsString
.8c31		d0 0b		bne $8c3e			bne 	_ASError
.8c33		68		pla				pla 								; get back
.8c34		29 10		and #$10			and 	#NSBIsString 				; check type
.8c36		d0 03		bne $8c3b			bne 	_ASString
.8c38		4c f0 9a	jmp $9af0			jmp 	AssignNumber
.8c3b						_ASString:
.8c3b		4c 4e 9b	jmp $9b4e			jmp 	AssignString
.8c3e						_ASError:
.8c3e		4c c7 a4	jmp $a4c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c41						Command_List:
.8c41		9c 42 04	stz $0442			stz 	listIndent 					; reset indent.
.8c44		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c46		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c49		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4b		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c4d		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c4f		f0 72		beq $8cc3			beq 	_CLListProcedure
.8c51		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c53		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c55		a9 ff		lda #$ff			lda 	#$FF
.8c57		85 5f		sta $5f				sta 	NSMantissa0+7
.8c59		85 67		sta $67				sta 	NSMantissa1+7
.8c5b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c5d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c5f		f0 1a		beq $8c7b			beq 	_CLSecond
.8c61		20 49 8d	jsr $8d49			jsr 	CLIsDigit 					; if not digit, list all
.8c64		b0 20		bcs $8c86			bcs 	_CLStart
.8c66		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c68		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.8c6b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c6f		f0 0a		beq $8c7b			beq 	_CLSecond 					; if so go get it
.8c71		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c73		85 5f		sta $5f				sta 	NSMantissa0+7
.8c75		a5 64		lda $64				lda 	NSMantissa1+4
.8c77		85 67		sta $67				sta 	NSMantissa1+7
.8c79		80 0b		bra $8c86			bra 	_CLStart
.8c7b						_CLSecond:
.8c7b		c8		iny				iny 								; consume comma
.8c7c		20 49 8d	jsr $8d49			jsr 	CLIsDigit 					; digit found
.8c7f		b0 05		bcs $8c86			bcs 	_CLStart 					; if not, continue listing
.8c81		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c83		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.8c86						_CLStart
.8c86		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c88		85 30		sta $30				sta 	codePtr
.8c8a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c8c		85 31		sta $31				sta 	codePtr+1
.8c8e						_CLLoop:
.8c8e		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c90		f0 03		beq $8c95			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c92		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8c95						_NoEvents:
.8c95		d0 27		bne $8cbe			bne 	_CLBreak
.8c97		b2 30		lda ($30)			lda 	(codePtr)
.8c99		f0 20		beq $8cbb			beq 	_CLExit
.8c9b		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c9d		20 38 8d	jsr $8d38			jsr 	CLCompareLineNo
.8ca0		90 0c		bcc $8cae			bcc 	_CLNext
.8ca2		a2 07		ldx #$07			ldx 	#7
.8ca4		20 38 8d	jsr $8d38			jsr 	CLCompareLineNo
.8ca7		f0 02		beq $8cab			beq 	_CLDoThisOne
.8ca9		b0 03		bcs $8cae			bcs 	_CLNext
.8cab						_CLDoThisOne:
.8cab		20 25 8d	jsr $8d25			jsr 	CLListOneLine 				; routine to list the current line.
.8cae						_CLNext:
.8cae		18		clc				clc
.8caf		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cb1		65 30		adc $30				adc 	codePtr
.8cb3		85 30		sta $30				sta 	codePtr
.8cb5		90 02		bcc $8cb9			bcc 	_CREExit
.8cb7		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cb9						_CREExit:
.8cb9		80 d3		bra $8c8e			bra 	_CLLoop
.8cbb						_CLExit:
.8cbb		4c 1e 88	jmp $881e			jmp 	WarmStart
.8cbe						_CLBreak:
.8cbe		a9 01		lda #$01		lda	#1
.8cc0		4c e5 93	jmp $93e5		jmp	ErrorHandler
.8cc3						_CLListProcedure:
.8cc3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc5		85 38		sta $38				sta 	zTemp1
.8cc7		c8		iny				iny
.8cc8		b1 30		lda ($30),y			lda 	(codePtr),y
.8cca		85 39		sta $39				sta 	zTemp1+1
.8ccc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cce		85 30		sta $30				sta 	codePtr
.8cd0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cd2		85 31		sta $31				sta 	codePtr+1
.8cd4						_CLLPSearch:
.8cd4		b2 30		lda ($30)			lda 	(codePtr)
.8cd6		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cd8		f0 e1		beq $8cbb			beq 	_CLExit
.8cda		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cdc		b1 30		lda ($30),y			lda 	(codePtr),y
.8cde		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8ce0		d0 0e		bne $8cf0			bne 	_CLLPNext
.8ce2		c8		iny				iny 								; check if PROC this.
.8ce3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce5		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8ce7		d0 07		bne $8cf0			bne 	_CLLPNext
.8ce9		c8		iny				iny
.8cea		b1 30		lda ($30),y			lda 	(codePtr),y
.8cec		c5 39		cmp $39				cmp 	zTemp1+1
.8cee		f0 0d		beq $8cfd			beq 	_CLLPFound
.8cf0						_CLLPNext:
.8cf0		18		clc				clc
.8cf1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cf3		65 30		adc $30				adc 	codePtr
.8cf5		85 30		sta $30				sta 	codePtr
.8cf7		90 02		bcc $8cfb			bcc 	_CREExit
.8cf9		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cfb						_CREExit:
.8cfb		80 d7		bra $8cd4			bra 	_CLLPSearch
.8cfd						_CLLPFound:
.8cfd		b2 30		lda ($30)			lda 	(codePtr)
.8cff		f0 ba		beq $8cbb			beq 	_CLExit
.8d01		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8d03		f0 03		beq $8d08			beq 	_NoEvents					; if zero, skip with Z flag set.
.8d05		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8d08						_NoEvents:
.8d08		d0 b4		bne $8cbe			bne 	_CLBreak
.8d0a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8d0c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d0e		48		pha				pha
.8d0f		20 25 8d	jsr $8d25			jsr 	CLListOneLine 				; list line and go forward
.8d12		18		clc				clc
.8d13		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d15		65 30		adc $30				adc 	codePtr
.8d17		85 30		sta $30				sta 	codePtr
.8d19		90 02		bcc $8d1d			bcc 	_CREExit
.8d1b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d1d						_CREExit:
.8d1d		68		pla				pla 								; reached ENDPROC ?
.8d1e		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8d20		d0 db		bne $8cfd			bne 	_CLLPFound
.8d22		4c 1e 88	jmp $881e			jmp 	WarmStart
.8d25						CLListOneLine:
.8d25		20 8a 93	jsr $938a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d28		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d2b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d2d		a9 49		lda #$49			lda 	#(tokenBuffer & $FF)
.8d2f		20 44 94	jsr $9444			jsr 	PrintStringXA
.8d32		a9 0d		lda #$0d			lda 	#13 						; new line
.8d34		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d37		60		rts				rts
.8d38						CLCompareLineNo:
.8d38		38		sec				sec
.8d39		a0 01		ldy #$01			ldy 	#1
.8d3b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d3f		85 36		sta $36				sta 	zTemp0
.8d41		c8		iny				iny
.8d42		b1 30		lda ($30),y			lda 	(codePtr),y
.8d44		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d46		05 36		ora $36				ora 	zTemp0
.8d48		60		rts				rts
.8d49						CLIsDigit:
.8d49		b1 30		lda ($30),y			lda 	(codePtr),y
.8d4b		c9 30		cmp #$30			cmp 	#"0"
.8d4d		90 03		bcc $8d52			bcc	 	_CLIDExitFalse
.8d4f		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d51		60		rts				rts
.8d52						_CLIDExitFalse:
.8d52		38		sec				sec
.8d53		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d54						Command_LOCAL:
.8d54		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d56		20 62 8d	jsr $8d62			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d59		b1 30		lda ($30),y			lda 	(codePtr),y
.8d5b		c8		iny				iny
.8d5c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d5e		f0 f4		beq $8d54			beq 	Command_LOCAL 				; if so, localise another variable.
.8d60		88		dey				dey 								; unpick pre-get
.8d61		60		rts				rts
.8d62						LocaliseNextTerm:
.8d62		20 39 9d	jsr $9d39			jsr 	EvaluateTerm 				; evaluate the term
.8d65		b5 50		lda $50,x			lda 	NSStatus,x
.8d67		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d69		f0 5c		beq $8dc7			beq		_LNTError
.8d6b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d6d		85 36		sta $36				sta 	zTemp0
.8d6f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d71		85 37		sta $37				sta  	zTemp0+1
.8d73		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d75		29 10		and #$10			and 	#NSBIsString
.8d77		d0 1e		bne $8d97			bne 	_LNTPushString
.8d79		5a		phy				phy
.8d7a		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d7c						_LNTPushNumLoop:
.8d7c		b1 36		lda ($36),y			lda		(zTemp0),y
.8d7e		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8d81		c8		iny				iny
.8d82		c0 05		cpy #$05			cpy 	#5
.8d84		d0 f6		bne $8d7c			bne 	_LNTPushNumLoop
.8d86		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d88		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8d8b		a5 37		lda $37				lda 	zTemp0+1
.8d8d		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8d90		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d92		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8d95		7a		ply				ply
.8d96		60		rts				rts
.8d97						_LNTPushString:
.8d97		5a		phy				phy
.8d98		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d9a		85 38		sta $38				sta 	zTemp1
.8d9c		a0 01		ldy #$01			ldy 	#1
.8d9e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8da0		85 39		sta $39				sta 	zTemp1+1
.8da2		a0 00		ldy #$00			ldy 	#0 							; output string
.8da4		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8da6		f0 0a		beq $8db2			beq 	_LNTStringOut
.8da8						_LNTPushStrLoop:
.8da8		b1 38		lda ($38),y			lda 	(zTemp1),y
.8daa		f0 06		beq $8db2			beq 	_LNTStringOut
.8dac		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8daf		c8		iny				iny
.8db0		80 f6		bra $8da8			bra 	_LNTPushStrLoop
.8db2						_LNTStringOut:
.8db2		98		tya				tya									; output length (chars written).
.8db3		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8db6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8db8		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8dbb		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dbd		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8dc0		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8dc2		20 7f b4	jsr $b47f			jsr 	StackPushByte
.8dc5		7a		ply				ply
.8dc6		60		rts				rts
.8dc7						_LNTError:
.8dc7		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.8dca						LocalPopValue:
.8dca		20 97 b4	jsr $b497			jsr 	StackPopByte
.8dcd		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8dcf		d0 17		bne $8de8			bne 	_LPVString
.8dd1		20 97 b4	jsr $b497			jsr 	StackPopByte 				; address
.8dd4		85 37		sta $37				sta 	zTemp0+1
.8dd6		20 97 b4	jsr $b497			jsr 	StackPopByte
.8dd9		85 36		sta $36				sta 	zTemp0
.8ddb		5a		phy				phy
.8ddc		a0 04		ldy #$04			ldy 	#4 							; copy back
.8dde						_LPVNumberCopy:
.8dde		20 97 b4	jsr $b497			jsr 	StackPopByte
.8de1		91 36		sta ($36),y			sta 	(zTemp0),y
.8de3		88		dey				dey
.8de4		10 f8		bpl $8dde			bpl 	_LPVNumberCopy
.8de6		7a		ply				ply 								; and complete
.8de7		60		rts				rts
.8de8						_LPVString:
.8de8		20 97 b4	jsr $b497			jsr 	StackPopByte 				; address of record copied to zTemp0
.8deb		85 37		sta $37				sta 	zTemp0+1
.8ded		20 97 b4	jsr $b497			jsr 	StackPopByte
.8df0		85 36		sta $36				sta 	zTemp0
.8df2		5a		phy				phy
.8df3		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8df5		85 38		sta $38				sta 	zTemp1
.8df7		a0 01		ldy #$01			ldy 	#1
.8df9		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dfb		85 39		sta $39				sta 	zTemp1+1
.8dfd		20 97 b4	jsr $b497			jsr 	StackPopByte 				; # chars to get => y
.8e00		a8		tay				tay
.8e01		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e03		f0 0e		beq $8e13			beq 	_LPVStringCopied
.8e05		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e07		91 38		sta ($38),y			sta 	(zTemp1),y
.8e09						_LPVStringCopy:
.8e09		88		dey				dey
.8e0a		30 07		bmi $8e13			bmi 	_LPVStringCopied
.8e0c		20 97 b4	jsr $b497			jsr 	StackPopByte
.8e0f		91 38		sta ($38),y			sta 	(zTemp1),y
.8e11		80 f6		bra $8e09			bra 	_LPVStringCopy
.8e13						_LPVStringCopied:
.8e13		fa		plx				plx
.8e14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e15						NewCommand:
.8e15		20 1b 8e	jsr $8e1b			jsr 	NewProgram 					; does the actual NEW.
.8e18		4c 1e 88	jmp $881e			jmp 	WarmStart 					; and warm starts straight away.
.8e1b						NewProgram:
.8e1b		20 37 a7	jsr $a737			jsr 	MemoryNew
.8e1e		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e21		20 71 92	jsr $9271			jsr 	ClearSystem					; clear everything.
.8e24		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/option.asm

.8e25						OptionCommand:
.8e25		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e27		20 e0 a2	jsr $a2e0			jsr		Evaluate8BitInteger 		; address
.8e2a		48		pha				pha
.8e2b		20 d4 93	jsr $93d4			jsr 	CheckComma
.8e2e		e8		inx				inx
.8e2f		20 e0 a2	jsr $a2e0			jsr		Evaluate8BitInteger 		; data
.8e32		fa		plx				plx
.8e33		9d 00 04	sta $0400,x			sta 	ControlStorage,x
.8e36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8e37						PokeBCommand:
.8e37		a9 01		lda #$01			lda 	#1
.8e39		80 0c		bra $8e47			bra 	PokeCommand
.8e3b						PokeWCommand:
.8e3b		a9 02		lda #$02			lda 	#2
.8e3d		80 08		bra $8e47			bra 	PokeCommand
.8e3f						PokeLCommand:
.8e3f		a9 03		lda #$03			lda 	#3
.8e41		80 04		bra $8e47			bra 	PokeCommand
.8e43						PokeDCommand:
.8e43		a9 04		lda #$04			lda 	#4
.8e45		80 00		bra $8e47			bra 	PokeCommand
.8e47						PokeCommand:
.8e47		48		pha				pha 								; save count on stack
.8e48		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e4a		20 c5 a2	jsr $a2c5			jsr		Evaluate16BitInteger 		; address
.8e4d		20 d4 93	jsr $93d4			jsr 	CheckComma
.8e50		e8		inx				inx
.8e51		20 b2 a2	jsr $a2b2			jsr		EvaluateInteger 			; data
.8e54		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e56		85 36		sta $36				sta 	zTemp0
.8e58		a5 60		lda $60				lda 	NSMantissa1
.8e5a		85 37		sta $37				sta 	zTemp0+1
.8e5c		68		pla				pla 								; count -> zTemp1
.8e5d		85 38		sta $38				sta 	zTemp1
.8e5f		5a		phy				phy 								; save Y position.
.8e60		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e62		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e64						_PCLoop:
.8e64		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e66		91 36		sta ($36),y			sta 	(zTemp0),y
.8e68		c8		iny				iny 								; next byte to write
.8e69		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e6a		18		clc				clc
.8e6b		69 08		adc #$08			adc 	#MathStackSize
.8e6d		aa		tax				tax
.8e6e		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e70		d0 f2		bne $8e64			bne 	_PCLoop
.8e72		7a		ply				ply 								; restore position.
.8e73		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e74						CallProcedure:
.8e74		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e76		b1 30		lda ($30),y			lda 	(codePtr),y
.8e78		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e7a		f0 0c		beq $8e88			beq 	_CPEndParam
.8e7c						_CPParamLoop:
.8e7c		20 8a a2	jsr $a28a			jsr 	EvaluateValue 				; get parameter onto stack
.8e7f		e8		inx				inx 								; bump next stack
.8e80		b1 30		lda ($30),y			lda 	(codePtr),y
.8e82		c8		iny				iny
.8e83		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e85		f0 f5		beq $8e7c			beq 	_CPParamLoop
.8e87		88		dey				dey 								; unpick.
.8e88						_CPEndParam:
.8e88		8e 32 04	stx $0432			stx 	lastParameter 				; save the last parameters index.
.8e8b		c8		iny				iny									; skip right bracket
.8e8c		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e8e		20 a0 b4	jsr $b4a0			jsr 	StackOpen
.8e91		20 e5 b4	jsr $b4e5			jsr 	STKSaveCodePosition 		; save loop position
.8e94		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e96		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e98		a5 60		lda $60				lda 	NSMantissa1
.8e9a		85 37		sta $37				sta 	zTemp0+1
.8e9c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e9e		b2 36		lda ($36)			lda 	(zTemp0)
.8ea0		85 30		sta $30				sta 	safePtr
.8ea2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea4		85 31		sta $31				sta 	safePtr+1
.8ea6		c8		iny				iny
.8ea7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea9		85 32		sta $32				sta 	safePtr+2
.8eab		c8		iny				iny
.8eac		b1 36		lda ($36),y			lda 	(zTemp0),y
.8eae		85 33		sta $33				sta 	safePtr+3
.8eb0		c8		iny				iny 								; get Y offset -> Y
.8eb1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8eb3		a8		tay				tay
.8eb4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8eb6		ec 32 04	cpx $0432			cpx	 	lastParameter 				; check zero parameters at the start
.8eb9		f0 13		beq $8ece			beq 	_ParamExit 					; if so, exit.
.8ebb						_ParamExtract:
.8ebb		ca		dex				dex 								; put a local term on the level before
.8ebc		20 62 8d	jsr $8d62			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8ebf		20 2a 8c	jsr $8c2a			jsr 	AssignVariable 				; assign stacked value to the variable.
.8ec2		e8		inx				inx 								; advance to next parameter to do.
.8ec3		e8		inx				inx
.8ec4		ec 32 04	cpx $0432			cpx 	lastParameter 				; are we done ?
.8ec7		f0 05		beq $8ece			beq 	_ParamExit
.8ec9		20 d4 93	jsr $93d4			jsr 	CheckComma 					; comma seperating parameters
.8ecc		80 ed		bra $8ebb			bra 	_ParamExtract
.8ece						_ParamExit:
.8ece		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check )
.8ed1		60		rts				rts 								; and continue from here
.8ed2						Command_ENDPROC:
.8ed2		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ed4		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ed6		20 cd b4	jsr $b4cd			jsr 	StackCheckFrame
.8ed9		20 f6 b4	jsr $b4f6			jsr 	STKLoadCodePosition 		; restore code position
.8edc		20 bf b4	jsr $b4bf			jsr 	StackClose
.8edf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ee0						Command_Read:
.8ee0		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8ee2		20 39 9d	jsr $9d39			jsr 	EvaluateTerm
.8ee5		b5 50		lda $50,x			lda 	NSStatus,x
.8ee7		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ee9		f0 4f		beq $8f3a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8eeb		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs 			; swap code and data
.8eee		ad 38 04	lda $0438			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ef1		d0 25		bne $8f18			bne 	_CRContinueData  			; forward for the next one.
.8ef3		b2 30		lda ($30)			lda 	(codePtr)
.8ef5		f0 1c		beq $8f13			beq 	_CRNoData
.8ef7						_CRKeepSearching:
.8ef7		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8ef9		a2 80		ldx #$80			ldx 	#KWC_EOL
.8efb		20 27 93	jsr $9327			jsr 	ScanForward
.8efe		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8f00		f0 16		beq $8f18			beq 	_CRHaveData 				; found it
.8f02		18		clc				clc
.8f03		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f05		65 30		adc $30				adc 	codePtr
.8f07		85 30		sta $30				sta 	codePtr
.8f09		90 02		bcc $8f0d			bcc 	_CREExit
.8f0b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f0d						_CREExit:
.8f0d		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f0f		b2 30		lda ($30)			lda 	(codePtr)
.8f11		d0 e4		bne $8ef7			bne 	_CRKeepSearching
.8f13						_CRNoData:
.8f13		a9 0b		lda #$0b		lda	#11
.8f15		4c e5 93	jmp $93e5		jmp	ErrorHandler
.8f18						_CRHaveData:
.8f18						_CRContinueData:
.8f18		a2 01		ldx #$01			ldx 	#1
.8f1a		20 8a a2	jsr $a28a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f1d		ca		dex				dex
.8f1e		20 2a 8c	jsr $8c2a			jsr		AssignVariable 				; do the assignment
.8f21		9c 38 04	stz $0438			stz 	inDataStatement 			; clear in data flag
.8f24		b1 30		lda ($30),y			lda 	(codePtr),y
.8f26		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8f28		d0 04		bne $8f2e			bne 	_CRSwapBack
.8f2a		c8		iny				iny 								; consume comma
.8f2b		ee 38 04	inc $0438			inc 	inDataStatement 			; set in data statement currently.
.8f2e						_CRSwapBack:
.8f2e		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs			; swap them back.
.8f31		b1 30		lda ($30),y			lda 	(codePtr),y
.8f33		c8		iny				iny
.8f34		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f36		f0 a8		beq $8ee0			beq 	Command_Read 				; if so go round again.
.8f38		88		dey				dey 								; unpick get.
.8f39		60		rts				rts
.8f3a						_CRSyntax:
.8f3a		4c bd a4	jmp $a4bd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f3d						RemCommand:
.8f3d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f41		d0 06		bne $8f49			bne 	_RMExit
.8f43		c8		iny				iny 								; point to offset
.8f44		98		tya				tya 								; A = offset position
.8f45		38		sec				sec 								; add size +1 hence SEC
.8f46		71 30		adc ($30),y			adc 	(codePtr),y
.8f48		a8		tay				tay 								; make current position.
.8f49						_RMExit:
.8f49		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f4a						Command_REPEAT:
.8f4a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f4c		20 a0 b4	jsr $b4a0			jsr 	StackOpen
.8f4f		20 e5 b4	jsr $b4e5			jsr 	STKSaveCodePosition 		; save loop position
.8f52		60		rts				rts
.8f53						Command_UNTIL:
.8f53		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f55		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f57		20 cd b4	jsr $b4cd			jsr 	StackCheckFrame
.8f5a		a2 00		ldx #$00			ldx 	#0
.8f5c		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; work out the number
.8f5f		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; check if zero
.8f62		f0 04		beq $8f68			beq 	_CULoopBack 				; if so keep looping
.8f64		20 bf b4	jsr $b4bf			jsr 	StackClose		 			; return
.8f67		60		rts				rts
.8f68						_CULoopBack:
.8f68		20 f6 b4	jsr $b4f6			jsr 	STKLoadCodePosition 		; loop back
.8f6b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f6c						Command_Restore:
.8f6c		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs 			; swap code and data
.8f6f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f71		85 30		sta $30				sta 	codePtr
.8f73		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f75		85 31		sta $31				sta 	codePtr+1
.8f77		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs 			; put them back
.8f7a		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f7c		8d 37 04	sta $0437			sta 	dataPointer+4   			; (read checks not EOF)
.8f7f		9c 38 04	stz $0438			stz 	inDataStatement 			; not in data statement
.8f82		60		rts				rts
.8f83						SwapDataCodePtrs:
.8f83		da		phx				phx
.8f84		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f86						_SDCPLoop:
.8f86		b5 30		lda $30,x			lda 	safePtr,x
.8f88		48		pha				pha
.8f89		bd 33 04	lda $0433,x			lda 	dataPointer,x
.8f8c		95 30		sta $30,x			sta 	safePtr,x
.8f8e		68		pla				pla
.8f8f		9d 33 04	sta $0433,x			sta 	dataPointer,x
.8f92		ca		dex				dex
.8f93		10 f1		bpl $8f86			bpl 	_SDCPLoop
.8f95		ad 37 04	lda $0437			lda 	dataPointer+4 				; swap Y position over.
.8f98		8c 37 04	sty $0437			sty 	dataPointer+4
.8f9b		a8		tay				tay
.8f9c		fa		plx				plx
.8f9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f9e						EOLCommand:
.8f9e		18		clc				clc
.8f9f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fa1		65 30		adc $30				adc 	codePtr
.8fa3		85 30		sta $30				sta 	codePtr
.8fa5		90 02		bcc $8fa9			bcc 	_CREExit
.8fa7		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fa9						_CREExit:
.8fa9		80 18		bra $8fc3			bra 	RunNewLine
.8fab						CommandRUNOptLoad:
.8fab		b1 30		lda ($30),y			lda 	(codePtr),y
.8fad		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8faf		f0 07		beq $8fb8			beq 	RunCurrentProgram
.8fb1		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8fb3		f0 03		beq $8fb8			beq 	RunCurrentProgram
.8fb5		20 4f ae	jsr $ae4f			jsr 	LoadFile 					; load expected name file.
.8fb8						RunCurrentProgram:
.8fb8		20 71 92	jsr $9271			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8fbb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fbd		85 30		sta $30				sta 	codePtr
.8fbf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fc1		85 31		sta $31				sta 	codePtr+1
.8fc3						RunNewLine:
.8fc3		b2 30		lda ($30)			lda 	(codePtr)
.8fc5		f0 74		beq $903b			beq 	CRNoProgram         		; no then END.
.8fc7		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8fc9		9a		txs				txs
.8fca						RUNCodePointerLine:
.8fca		a0 02		ldy #$02			ldy 	#2 							; start of program
.8fcc						_CRIncMainLoop:
.8fcc		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8fce		f0 03		beq $8fd3			beq 	_NoEvents					; if zero, skip with Z flag set.
.8fd0		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8fd3						_NoEvents:
.8fd3		d0 61		bne $9036			bne 	_CRBreak
.8fd5		a5 01		lda $01				lda 	1 							; save I/O 0
.8fd7		48		pha				pha
.8fd8		64 01		stz $01				stz 	1 							; access I/O Page 0
.8fda		38		sec				sec 								; calculate timer - LastTick
.8fdb		ad 59 d6	lda $d659			lda 	$D659
.8fde		cd 7e 06	cmp $067e			cmp 	LastTick
.8fe1		f0 06		beq $8fe9			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8fe3		8d 7e 06	sta $067e			sta 	LastTick 					; update last timer
.8fe6		20 8c 82	jsr $828c			jsr 	TickHandler 							; go do the code.
.8fe9						_NoFireTick:
.8fe9		68		pla				pla 								; restore I/O 0
.8fea		85 01		sta $01				sta 	1
.8fec						_CRNoBreakCheck:
.8fec		c8		iny				iny									; next token
.8fed						_CRMainLoop:
.8fed		9c 2c 04	stz $042c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8ff0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ff2		10 10		bpl $9004			bpl 	_CRNotKeyword				; not a token.
.8ff4		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ff6		b0 04		bcs $8ffc			bcs 	_CRIsKeyword
.8ff8		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ffa		b0 34		bcs $9030			bcs		_CRSyntaxError
.8ffc						_CRIsKeyword:
.8ffc		c8		iny				iny 								; consume command
.8ffd		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8ffe		aa		tax				tax 								; put in X for vector jump
.8fff		20 33 90	jsr $9033			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9002		80 e9		bra $8fed			bra 	_CRMainLoop 				; and loop round
.9004						_CRNotKeyword:
.9004		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9006		f0 c4		beq $8fcc			beq 	_CRIncMainLoop
.9008		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.900a		90 05		bcc $9011			bcc 	_CRNotVariable
.900c						_CRGoLet:
.900c		20 f1 8b	jsr $8bf1			jsr 	LetCommand
.900f		80 dc		bra $8fed			bra 	_CRMainLoop
.9011						_CRNotVariable:
.9011		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.9013		f0 f7		beq $900c			beq 	_CRGoLet
.9015		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9017		f0 f3		beq $900c			beq 	_CRGoLet
.9019		c9 21		cmp #$21			cmp 	#KWD_PLING
.901b		f0 ef		beq $900c			beq 	_CRGoLet
.901d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.901f		f0 09		beq $902a			beq 	_CRGoRem
.9021		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9023		d0 0b		bne $9030			bne 	_CRSyntaxError
.9025		20 67 86	jsr $8667			jsr 	LabelHere
.9028		80 c3		bra $8fed			bra 	_CRMainLoop
.902a						_CRGoRem:
.902a		c8		iny				iny
.902b		20 3d 8f	jsr $8f3d			jsr 	RemCommand
.902e		80 bd		bra $8fed			bra 	_CRMainLoop
.9030						_CRSyntaxError:
.9030		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.9033						_CRCallVector0:
.9033		7c d2 90	jmp ($90d2,x)			jmp 	(VectorSet0,x)
.9036						_CRBreak:
.9036		a9 01		lda #$01		lda	#1
.9038		4c e5 93	jmp $93e5		jmp	ErrorHandler
.903b						CRNoProgram:
.903b		4c 87 89	jmp $8987			jmp 	EndCommand
.903e						Shift1Command:
.903e		b1 30		lda ($30),y			lda 	(codePtr),y
.9040		c8		iny				iny
.9041		0a		asl a				asl 	a
.9042		aa		tax				tax
.9043		7c 8c 91	jmp ($918c,x)			jmp 	(VectorSet1,x)
.9046						Shift2Command:
.9046		b1 30		lda ($30),y			lda 	(codePtr),y
.9048		c8		iny				iny
.9049		0a		asl a				asl 	a
.904a		aa		tax				tax
.904b		7c e4 91	jmp ($91e4,x)			jmp 	(VectorSet2,x)
.904e						Unused1:
.904e						Unused2:
.904e						Unused3:
.904e						Unused4:
.904e		4c bd a4	jmp $a4bd			jmp 	SyntaxError
>9051								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9052						VectorSetPunc:
>9052		a3 96					.word	ShiftLeft                        ; $00 <<
>9054		8e 94					.word	BinaryCompareLessEqual           ; $01 <=
>9056		84 94					.word	BinaryCompareNotEqual            ; $02 <>
>9058		bd a4					.word	SyntaxError                      ; $03 !!3
>905a		bd a4					.word	SyntaxError                      ; $04 ><
>905c		98 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>905e		a6 96					.word	ShiftRight                       ; $06 >>
>9060		bd a4					.word	SyntaxError                      ; $07 !!7
>9062		bd a4					.word	SyntaxError                      ; $08 !!8
>9064		bd a4					.word	SyntaxError                      ; $09 !!9
>9066		bd a4					.word	SyntaxError                      ; $0a !!10
>9068		bd a4					.word	SyntaxError                      ; $0b !!11
>906a		bd a4					.word	SyntaxError                      ; $0c !!12
>906c		bd a4					.word	SyntaxError                      ; $0d !!13
>906e		bd a4					.word	SyntaxError                      ; $0e !!14
>9070		bd a4					.word	SyntaxError                      ; $0f !!15
>9072		bd a4					.word	SyntaxError                      ; $10 @
>9074		bd a4					.word	SyntaxError                      ; $11 !!17
>9076		bd a4					.word	SyntaxError                      ; $12 !!18
>9078		bd a4					.word	SyntaxError                      ; $13 [
>907a		4f 95					.word	IntegerDivide                    ; $14 \
>907c		bd a4					.word	SyntaxError                      ; $15 ]
>907e		e1 97					.word	EorInteger                       ; $16 ^
>9080		bd a4					.word	SyntaxError                      ; $17 _
>9082		bd a4					.word	SyntaxError                      ; $18 `
>9084		bd a4					.word	SyntaxError                      ; $19 !!25
>9086		bd a4					.word	SyntaxError                      ; $1a !!26
>9088		bd a4					.word	SyntaxError                      ; $1b {
>908a		ac 97					.word	OraInteger                       ; $1c |
>908c		bd a4					.word	SyntaxError                      ; $1d }
>908e		bd a4					.word	SyntaxError                      ; $1e ~
>9090		bd a4					.word	SyntaxError                      ; $1f <7F>
>9092		bd a4					.word	SyntaxError                      ; $20
>9094		16 98					.word	WordIndirect                     ; $21 !
>9096		bd a4					.word	SyntaxError                      ; $22 "
>9098		bd a4					.word	SyntaxError                      ; $23 #
>909a		bd a4					.word	SyntaxError                      ; $24 $
>909c		90 95					.word	IntegerModulus                   ; $25 %
>909e		77 97					.word	AndInteger                       ; $26 &
>90a0		bd a4					.word	SyntaxError                      ; $27 '
>90a2		bd a4					.word	SyntaxError                      ; $28 (
>90a4		bd a4					.word	SyntaxError                      ; $29 )
>90a6		fe 95					.word	MulInteger                       ; $2a *
>90a8		19 97					.word	AddInteger                       ; $2b +
>90aa		bd a4					.word	SyntaxError                      ; $2c ,
>90ac		52 97					.word	SubInteger                       ; $2d -
>90ae		bd a4					.word	SyntaxError                      ; $2e .
>90b0		d0 99					.word	FDivideCommand                   ; $2f /
>90b2		bd a4					.word	SyntaxError                      ; $30 0
>90b4		bd a4					.word	SyntaxError                      ; $31 1
>90b6		bd a4					.word	SyntaxError                      ; $32 2
>90b8		bd a4					.word	SyntaxError                      ; $33 3
>90ba		bd a4					.word	SyntaxError                      ; $34 4
>90bc		bd a4					.word	SyntaxError                      ; $35 5
>90be		bd a4					.word	SyntaxError                      ; $36 6
>90c0		bd a4					.word	SyntaxError                      ; $37 7
>90c2		bd a4					.word	SyntaxError                      ; $38 8
>90c4		bd a4					.word	SyntaxError                      ; $39 9
>90c6		bd a4					.word	SyntaxError                      ; $3a :
>90c8		bd a4					.word	SyntaxError                      ; $3b ;
>90ca		70 94					.word	BinaryCompareLess                ; $3c <
>90cc		66 94					.word	BinaryCompareEqual               ; $3d =
>90ce		7a 94					.word	BinaryCompareGreater             ; $3e >
>90d0		38 98					.word	ByteIndirect                     ; $3f ?
.90d2						VectorSet0:
>90d2		9e 8f					.word	EOLCommand                       ; $80 !0:EOF
>90d4		3e 90					.word	Shift1Command                    ; $81 !1:SH1
>90d6		46 90					.word	Shift2Command                    ; $82 !2:SH2
>90d8		ba 9e					.word	AbsUnary                         ; $83 ABS(
>90da		c8 9e					.word	AllocUnary                       ; $84 ALLOC(
>90dc		38 9f					.word	AscUnary                         ; $85 ASC(
>90de		89 a0					.word	ChrUnary                         ; $86 CHR$(
>90e0		e6 ab					.word	UnaryEvent                       ; $87 EVENT(
>90e2		62 94					.word	UnaryFalse                       ; $88 FALSE
>90e4		45 9f					.word	FracUnary                        ; $89 FRAC(
>90e6		fe b2					.word	ChrGet                           ; $8a GET$(
>90e8		e3 b2					.word	AscGet                           ; $8b GET(
>90ea		8d b2					.word	UnaryGetDate                     ; $8c GETDATE$(
>90ec		89 b2					.word	UnaryGetTime                     ; $8d GETTIME$(
>90ee		9e aa					.word	UnaryHit                         ; $8e HIT(
>90f0		05 b3					.word	ChrInkey                         ; $8f INKEY$(
>90f2		f3 b2					.word	AscInkey                         ; $90 INKEY(
>90f4		5a 9f					.word	IntUnary                         ; $91 INT(
>90f6		48 a0					.word	IsValUnary                       ; $92 ISVAL(
>90f8		9b a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90fa		bf a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90fc		60 b0					.word	UnaryJoyB                        ; $95 JOYB(
>90fe		39 b0					.word	UnaryJoyX                        ; $96 JOYX(
>9100		3c b0					.word	UnaryJoyY                        ; $97 JOYY(
>9102		1e b3					.word	KeyDown                          ; $98 KEYDOWN(
>9104		fe a1					.word	Unary_Left                       ; $99 LEFT$(
>9106		6b 9f					.word	LenUnary                         ; $9a LEN(
>9108		89 9f					.word	Unary_Max                        ; $9b MAX(
>910a		20 a2					.word	Unary_Mid                        ; $9c MID$(
>910c		85 9f					.word	Unary_Min                        ; $9d MIN(
>910e		d4 9f					.word	Unary_Not                        ; $9e NOT(
>9110		e7 9f					.word	PeekByteUnary                    ; $9f PEEK(
>9112		f3 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>9114		ef 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>9116		eb 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>9118		fd b3					.word	UnaryPlaying                     ; $a3 PLAYING(
>911a		38 b3					.word	Unary_Random                     ; $a4 RANDOM(
>911c		0b a2					.word	Unary_Right                      ; $a5 RIGHT$(
>911e		52 b3					.word	Unary_Rnd                        ; $a6 RND(
>9120		20 a0					.word	SgnUnary                         ; $a7 SGN(
>9122		3d a1					.word	SpcUnary                         ; $a8 SPC(
>9124		58 a1					.word	Unary_Str                        ; $a9 STR$(
>9126		7d ab					.word	TileRead                         ; $aa TILE(
>9128		70 b2					.word	UnaryTimer                       ; $ab TIMER(
>912a		57 94					.word	UnaryTrue                        ; $ac TRUE
>912c		3e a0					.word	ValUnary                         ; $ad VAL(
>912e		8a 89					.word	ForCommand                       ; $ae FOR
>9130		cd 8a					.word	IfCommand                        ; $af IF
>9132		4e 90					.word	Unused1                          ; $b0 PROC
>9134		4a 8f					.word	Command_REPEAT                   ; $b1 REPEAT
>9136		9d 93					.word	Command_WHILE                    ; $b2 WHILE
>9138		f6 8a					.word	EndIf                            ; $b3 ENDIF
>913a		d2 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>913c		3c 8a					.word	NextCommand                      ; $b5 NEXT
>913e		4e 90					.word	Unused4                          ; $b6 THEN
>9140		53 8f					.word	Command_UNTIL                    ; $b7 UNTIL
>9142		be 93					.word	Command_WEND                     ; $b8 WEND
>9144		bd a4					.word	SyntaxError                      ; $b9 AT
>9146		bd a4					.word	SyntaxError                      ; $ba BY
>9148		8d 88					.word	CallCommand                      ; $bb CALL
>914a		8c a7					.word	CircleCommand                    ; $bc CIRCLE
>914c		bd a4					.word	SyntaxError                      ; $bd CLEAR
>914e		bd a4					.word	SyntaxError                      ; $be COLOR
>9150		bd a4					.word	SyntaxError                      ; $bf COLOUR
>9152		c2 88					.word	Command_Data                     ; $c0 DATA
>9154		ca 88					.word	DimCommand                       ; $c1 DIM
>9156		4e 90					.word	Unused3                          ; $c2 DOWNTO
>9158		ef 8a					.word	ElseCode                         ; $c3 ELSE
>915a		bd a4					.word	SyntaxError                      ; $c4 FROM
>915c		71 aa					.word	GfxCommand                       ; $c5 GFX
>915e		bd a4					.word	SyntaxError                      ; $c6 HERE
>9160		b5 a7					.word	ImageCommand                     ; $c7 IMAGE
>9162		f1 8b					.word	LetCommand                       ; $c8 LET
>9164		07 a8					.word	LineCommand                      ; $c9 LINE
>9166		54 8d					.word	Command_LOCAL                    ; $ca LOCAL
>9168		72 b0					.word	MCCommand                        ; $cb MEMCOPY
>916a		bd a4					.word	SyntaxError                      ; $cc OFF
>916c		bd a4					.word	SyntaxError                      ; $cd ON
>916e		bd a4					.word	SyntaxError                      ; $ce OUTLINE
>9170		c2 aa					.word	PaletteCommand                   ; $cf PALETTE
>9172		00 a8					.word	PlotCommand                      ; $d0 PLOT
>9174		37 8e					.word	PokeBCommand                     ; $d1 POKE
>9176		43 8e					.word	PokeDCommand                     ; $d2 POKED
>9178		3f 8e					.word	PokeLCommand                     ; $d3 POKEL
>917a		3b 8e					.word	PokeWCommand                     ; $d4 POKEW
>917c		e0 8e					.word	Command_Read                     ; $d5 READ
>917e		88 a7					.word	RectangleCommand                 ; $d6 RECT
>9180		3d 8f					.word	RemCommand                       ; $d7 REM
>9182		bd a4					.word	SyntaxError                      ; $d8 SOLID
>9184		19 b4					.word	SoundCommand                     ; $d9 SOUND
>9186		97 a7					.word	SpriteCommand                    ; $da SPRITE
>9188		d1 a7					.word	TextCommand                      ; $db TEXT
>918a		4e 90					.word	Unused2                          ; $dc TO
.918c						VectorSet1:
>918c		bd a4					.word	SyntaxError                      ; $80 !0:EOF
>918e		bd a4					.word	SyntaxError                      ; $81 !1:SH1
>9190		bd a4					.word	SyntaxError                      ; $82 !2:SH2
>9192		61 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>9194		7d 88					.word	AssertCommand                    ; $84 ASSERT
>9196		62 a9					.word	BitmapCtrl                       ; $85 BITMAP
>9198		43 ac					.word	Command_BLoad                    ; $86 BLOAD
>919a		ef ac					.word	Command_BSave                    ; $87 BSAVE
>919c		98 ab					.word	ClearScreen                      ; $88 CLS
>919e		fc 8a					.word	Command_CPrint                   ; $89 CPRINT
>91a0		a0 ab					.word	CursorControl                    ; $8a CURSOR
>91a2		72 ad					.word	Command_Dir                      ; $8b DIR
>91a4		42 ae					.word	Command_Drive                    ; $8c DRIVE
>91a6		87 89					.word	EndCommand                       ; $8d END
>91a8		d1 b3					.word	Explode                          ; $8e EXPLODE
>91aa		bd a4					.word	SyntaxError                      ; $8f GO
>91ac		95 8a					.word	Command_GOSUB                    ; $90 GOSUB
>91ae		b3 8a					.word	GotoCommand                      ; $91 GOTO
>91b0		bd a4					.word	SyntaxError                      ; $92 HIMEM
>91b2		f7 8a					.word	Command_Input                    ; $93 INPUT
>91b4		41 8c					.word	Command_List                     ; $94 LIST
>91b6		49 ae					.word	Command_Load                     ; $95 LOAD
>91b8		86 b1					.word	MouseDeltaStatus                 ; $96 MDELTA
>91ba		82 b1					.word	MouseStatus                      ; $97 MOUSE
>91bc		15 8e					.word	NewCommand                       ; $98 NEW
>91be		25 8e					.word	OptionCommand                    ; $99 OPTION
>91c0		ad b3					.word	PingCommand                      ; $9a PING
>91c2		03 8b					.word	Command_Print                    ; $9b PRINT
>91c4		6c 8f					.word	Command_Restore                  ; $9c RESTORE
>91c6		a5 8a					.word	Command_RETURN                   ; $9d RETURN
>91c8		ab 8f					.word	CommandRUNOptLoad                ; $9e RUN
>91ca		1b af					.word	Command_Save                     ; $9f SAVE
>91cc		fc b1					.word	CommandSetDate                   ; $a0 SETDATE
>91ce		00 b2					.word	CommandSetTime                   ; $a1 SETTIME
>91d0		c5 b3					.word	ShootCommand                     ; $a2 SHOOT
>91d2		bc a9					.word	SpritesCtrl                      ; $a3 SPRITES
>91d4		6c 92					.word	StopCommand                      ; $a4 STOP
>91d6		02 ab					.word	TileCommand                      ; $a5 TILE
>91d8		e4 a9					.word	TilesCtrl                        ; $a6 TILES
>91da		a2 af					.word	Command_Try                      ; $a7 TRY
>91dc		df af					.word	Command_VERIFY                   ; $a8 VERIFY
>91de		cf ab					.word	XGoCommand                       ; $a9 XGO
>91e0		c6 ab					.word	XLoadCommand                     ; $aa XLOAD
>91e2		b9 b3					.word	ZapCommand                       ; $ab ZAP
.91e4						VectorSet2:
>91e4		bd a4					.word	SyntaxError                      ; $80 !0:EOF
>91e6		bd a4					.word	SyntaxError                      ; $81 !1:SH1
>91e8		bd a4					.word	SyntaxError                      ; $82 !2:SH2
>91ea		7c a3					.word	Assemble_adc                     ; $83 ADC
>91ec		74 a3					.word	Assemble_and                     ; $84 AND
>91ee		90 a3					.word	Assemble_asl                     ; $85 ASL
>91f0		fa a3					.word	Assemble_bcc                     ; $86 BCC
>91f2		fe a3					.word	Assemble_bcs                     ; $87 BCS
>91f4		06 a4					.word	Assemble_beq                     ; $88 BEQ
>91f6		bd a3					.word	Assemble_bit                     ; $89 BIT
>91f8		ee a3					.word	Assemble_bmi                     ; $8a BMI
>91fa		02 a4					.word	Assemble_bne                     ; $8b BNE
>91fc		ea a3					.word	Assemble_bpl                     ; $8c BPL
>91fe		0a a4					.word	Assemble_bra                     ; $8d BRA
>9200		0e a4					.word	Assemble_brk                     ; $8e BRK
>9202		f2 a3					.word	Assemble_bvc                     ; $8f BVC
>9204		f6 a3					.word	Assemble_bvs                     ; $90 BVS
>9206		16 a4					.word	Assemble_clc                     ; $91 CLC
>9208		6a a4					.word	Assemble_cld                     ; $92 CLD
>920a		2a a4					.word	Assemble_cli                     ; $93 CLI
>920c		5a a4					.word	Assemble_clv                     ; $94 CLV
>920e		88 a3					.word	Assemble_cmp                     ; $95 CMP
>9210		d1 a3					.word	Assemble_cpx                     ; $96 CPX
>9212		cc a3					.word	Assemble_cpy                     ; $97 CPY
>9214		ae a3					.word	Assemble_dec                     ; $98 DEC
>9216		66 a4					.word	Assemble_dex                     ; $99 DEX
>9218		42 a4					.word	Assemble_dey                     ; $9a DEY
>921a		78 a3					.word	Assemble_eor                     ; $9b EOR
>921c		b3 a3					.word	Assemble_inc                     ; $9c INC
>921e		76 a4					.word	Assemble_inx                     ; $9d INX
>9220		62 a4					.word	Assemble_iny                     ; $9e INY
>9222		e5 a3					.word	Assemble_jmp                     ; $9f JMP
>9224		e0 a3					.word	Assemble_jsr                     ; $a0 JSR
>9226		84 a3					.word	Assemble_lda                     ; $a1 LDA
>9228		a9 a3					.word	Assemble_ldx                     ; $a2 LDX
>922a		c7 a3					.word	Assemble_ldy                     ; $a3 LDY
>922c		9a a3					.word	Assemble_lsr                     ; $a4 LSR
>922e		7a a4					.word	Assemble_nop                     ; $a5 NOP
>9230		70 a3					.word	Assemble_ora                     ; $a6 ORA
>9232		26 a4					.word	Assemble_pha                     ; $a7 PHA
>9234		12 a4					.word	Assemble_php                     ; $a8 PHP
>9236		6e a4					.word	Assemble_phx                     ; $a9 PHX
>9238		2e a4					.word	Assemble_phy                     ; $aa PHY
>923a		36 a4					.word	Assemble_pla                     ; $ab PLA
>923c		1a a4					.word	Assemble_plp                     ; $ac PLP
>923e		82 a4					.word	Assemble_plx                     ; $ad PLX
>9240		3e a4					.word	Assemble_ply                     ; $ae PLY
>9242		95 a3					.word	Assemble_rol                     ; $af ROL
>9244		9f a3					.word	Assemble_ror                     ; $b0 ROR
>9246		22 a4					.word	Assemble_rti                     ; $b1 RTI
>9248		32 a4					.word	Assemble_rts                     ; $b2 RTS
>924a		8c a3					.word	Assemble_sbc                     ; $b3 SBC
>924c		1e a4					.word	Assemble_sec                     ; $b4 SEC
>924e		7e a4					.word	Assemble_sed                     ; $b5 SED
>9250		3a a4					.word	Assemble_sei                     ; $b6 SEI
>9252		80 a3					.word	Assemble_sta                     ; $b7 STA
>9254		72 a4					.word	Assemble_stp                     ; $b8 STP
>9256		a4 a3					.word	Assemble_stx                     ; $b9 STX
>9258		c2 a3					.word	Assemble_sty                     ; $ba STY
>925a		b8 a3					.word	Assemble_stz                     ; $bb STZ
>925c		56 a4					.word	Assemble_tax                     ; $bc TAX
>925e		52 a4					.word	Assemble_tay                     ; $bd TAY
>9260		db a3					.word	Assemble_trb                     ; $be TRB
>9262		d6 a3					.word	Assemble_tsb                     ; $bf TSB
>9264		5e a4					.word	Assemble_tsx                     ; $c0 TSX
>9266		46 a4					.word	Assemble_txa                     ; $c1 TXA
>9268		4e a4					.word	Assemble_txs                     ; $c2 TXS
>926a		4a a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.926c						StopCommand:
.926c		a9 08		lda #$08		lda	#8
.926e		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9271						ClearSystem:
.9271		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9273		85 36		sta $36				sta 	0+zTemp0
.9275		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9277		85 37		sta $37				sta 	1+zTemp0
.9279						_ClearZeroLoop:
.9279		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.927b		f0 24		beq $92a1			beq 	_ClearZeroEnd
.927d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.927f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9281						_ClearOneVariable:
.9281		91 36		sta ($36),y			sta 	(zTemp0),y
.9283		c8		iny				iny
.9284		c0 08		cpy #$08			cpy 	#8
.9286		d0 f9		bne $9281			bne 	_ClearOneVariable
.9288		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.928a		b1 36		lda ($36),y			lda 	(zTemp0),y
.928c		c9 18		cmp #$18			cmp 	#NSTProcedure
.928e		d0 04		bne $9294			bne 	_ClearNotProcedure
.9290		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9292		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9294						_ClearNotProcedure:
.9294		18		clc				clc 								; go to the next variable
.9295		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9297		65 36		adc $36				adc 	zTemp0
.9299		85 36		sta $36				sta 	zTemp0
.929b		90 dc		bcc $9279			bcc 	_ClearZeroLoop
.929d		e6 37		inc $37				inc 	zTemp0+1
.929f		80 d8		bra $9279			bra 	_ClearZeroLoop
.92a1						_ClearZeroEnd:
.92a1		18		clc				clc
.92a2		a5 36		lda $36				lda 	zTemp0
.92a4		69 01		adc #$01			adc 	#1
.92a6		8d 28 04	sta $0428			sta 	lowMemPtr
.92a9		a5 37		lda $37				lda 	zTemp0+1
.92ab		69 00		adc #$00			adc 	#0
.92ad		8d 29 04	sta $0429			sta 	lowMemPtr+1
.92b0		20 06 b5	jsr $b506			jsr 	StackReset
.92b3		20 6c b5	jsr $b56c			jsr 	StringSystemInitialise
.92b6		20 cf 92	jsr $92cf			jsr 	ProcedureScan
.92b9		20 6c 8f	jsr $8f6c			jsr 	Command_Restore
.92bc		9c 3a 04	stz $043a			stz 	AssemblerAddress
.92bf		9c 3b 04	stz $043b			stz 	AssemblerAddress+1
.92c2		9c 3c 04	stz $043c			stz 	AssemblerControl
.92c5		9c 7d 06	stz $067d			stz 	KeyboardQueueEntries
.92c8		20 25 9f	jsr $9f25			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.92cb		20 4b a9	jsr $a94b			jsr 	ResetBitmapSpritesTiles
.92ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92cf						ProcedureScan:
.92cf		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs 			; swap code and data
.92d2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92d4		85 30		sta $30				sta 	codePtr
.92d6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92d8		85 31		sta $31				sta 	codePtr+1
.92da						_PSLoop:
.92da		b2 30		lda ($30)			lda 	(codePtr)
.92dc		f0 42		beq $9320			beq 	_PSExit
.92de		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.92e0		b1 30		lda ($30),y			lda 	(codePtr),y
.92e2		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.92e4		d0 2d		bne $9313			bne 	_PSNext
.92e6		c8		iny				iny 								; get the address of the record to zTemp0 and
.92e7		b1 30		lda ($30),y			lda 	(codePtr),y
.92e9		29 c0		and #$c0			and 	#$C0
.92eb		c9 40		cmp #$40			cmp 	#$40
.92ed		d0 35		bne $9324			bne 	_PSSyntax
.92ef		b1 30		lda ($30),y			lda 	(codePtr),y
.92f1		18		clc				clc
.92f2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92f4		85 37		sta $37				sta 	zTemp0+1
.92f6		c8		iny				iny 								; LSB
.92f7		b1 30		lda ($30),y			lda 	(codePtr),y
.92f9		85 36		sta $36				sta 	zTemp0
.92fb		c8		iny				iny 								; character after variable call.
.92fc		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92fd		a0 07		ldy #$07			ldy 	#7
.92ff		91 36		sta ($36),y			sta 	(zTemp0),y
.9301		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9303		a0 02		ldy #$02			ldy 	#2
.9305		91 36		sta ($36),y			sta 	(zTemp0),y
.9307		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9309						_PSCopy:
.9309		b5 30		lda $30,x			lda 	safePtr,x
.930b		c8		iny				iny
.930c		91 36		sta ($36),y			sta 	(zTemp0),y
.930e		e8		inx				inx
.930f		e0 04		cpx #$04			cpx 	#4
.9311		d0 f6		bne $9309			bne 	_PSCopy
.9313						_PSNext:
.9313		18		clc				clc
.9314		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9316		65 30		adc $30				adc 	codePtr
.9318		85 30		sta $30				sta 	codePtr
.931a		90 02		bcc $931e			bcc 	_CREExit
.931c		e6 31		inc $31				inc 	codePtr+1 					; carry
.931e						_CREExit:
.931e		80 ba		bra $92da			bra 	_PSLoop
.9320						_PSExit:
.9320		20 83 8f	jsr $8f83			jsr 	SwapDataCodePtrs 			; swap code and data
.9323		60		rts				rts
.9324						_PSSyntax:
.9324		4c bd a4	jmp $a4bd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9327						ScanForward:
.9327		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9329		86 37		stx $37				stx 	zTemp0+1
.932b		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.932d						_ScanLoop:
.932d		b1 30		lda ($30),y			lda 	(codePtr),y
.932f		c8		iny				iny
.9330		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9332		d0 0e		bne $9342			bne 	_ScanGoNext
.9334		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9336		f0 04		beq $933c			beq 	_ScanMatch
.9338		c5 37		cmp $37				cmp 	zTemp0+1
.933a		d0 06		bne $9342			bne 	_ScanGoNext
.933c						_ScanMatch:
.933c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.933e		d0 01		bne $9341			bne 	_ScanNotEndEOL
.9340		88		dey				dey
.9341						_ScanNotEndEOL:
.9341		60		rts				rts
.9342						_ScanGoNext:
.9342		20 47 93	jsr $9347			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9345		80 e6		bra $932d			bra 	_ScanLoop
.9347						ScanForwardOne:
.9347		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9349		90 3e		bcc $9389			bcc 	_SFWExit
.934b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.934d		90 18		bcc $9367			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.934f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9351		b0 2f		bcs $9382			bcs 	_ScanSkipData
.9353		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9355		90 32		bcc $9389			bcc 	_SFWExit 					; if not, ordinary keywords.
.9357		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.9359		b0 2e		bcs $9389			bcs 	_SFWExit
.935b		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.935d		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.935f		b0 28		bcs $9389			bcs 	_SFWExit
.9361		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9363		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9365		80 22		bra $9389			bra 	_SFWExit
.9367						_ScanSkipOne:
.9367		c8		iny				iny 								; consume the extra one.
.9368		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.936a		d0 1d		bne $9389			bne 	_SFWExit
.936c		18		clc				clc
.936d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.936f		65 30		adc $30				adc 	codePtr
.9371		85 30		sta $30				sta 	codePtr
.9373		90 02		bcc $9377			bcc 	_CREExit
.9375		e6 31		inc $31				inc 	codePtr+1 					; carry
.9377						_CREExit:
.9377		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9379		b2 30		lda ($30)			lda 	(codePtr)
.937b		d0 0c		bne $9389			bne 	_SFWExit 					; if not zero, more to scan
.937d		a9 13		lda #$13		lda	#19
.937f		4c e5 93	jmp $93e5		jmp	ErrorHandler
.9382						_ScanSkipData:
.9382		88		dey				dey 								; point at data token
.9383		c8		iny				iny 								; point to offset
.9384		98		tya				tya 								; A = offset position
.9385		38		sec				sec 								; add size +1 hence SEC
.9386		71 30		adc ($30),y			adc 	(codePtr),y
.9388		a8		tay				tay 								; make current position.
.9389						_SFWExit:
.9389		60		rts				rts
.938a						ScanGetCurrentLineStep:
.938a		64 38		stz $38				stz 	zTemp1
.938c		a0 03		ldy #$03			ldy 	#3
.938e						_SGCLSLoop:
.938e		b1 30		lda ($30),y			lda 	(codePtr),y
.9390		c8		iny				iny
.9391		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9393		f0 05		beq $939a			beq 	_SGCLSExit
.9395		20 47 93	jsr $9347			jsr 	ScanForwardOne
.9398		80 f4		bra $938e			bra 	_SGCLSLoop
.939a						_SGCLSExit:
.939a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.939c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.939d						Command_WHILE:
.939d		5a		phy				phy 								; save position of the test
.939e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.93a0		20 93 a2	jsr $a293			jsr 	EvaluateNumber
.93a3		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; check if zero
.93a6		f0 0e		beq $93b6			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.93a8		98		tya				tya 								; position *after* test.
.93a9		7a		ply				ply 								; restore position before test, at WHILE
.93aa		88		dey				dey 								; so we execute the WHILE command again.
.93ab		48		pha				pha 								; push after test on the stack
.93ac		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.93ae		20 a0 b4	jsr $b4a0			jsr 	StackOpen
.93b1		20 e5 b4	jsr $b4e5			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.93b4		7a		ply				ply 								; restore the position *after* the test
.93b5		60		rts				rts
.93b6						_WHExitLoop:
.93b6		68		pla				pla 								; throw post loop position
.93b7		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.93b9		aa		tax				tax
.93ba		20 27 93	jsr $9327			jsr 	ScanForward
.93bd		60		rts				rts
.93be						Command_WEND:
.93be		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.93c0		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.93c2		20 cd b4	jsr $b4cd			jsr 	StackCheckFrame
.93c5		20 f6 b4	jsr $b4f6			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.93c8		20 bf b4	jsr $b4bf			jsr 	StackClose		 			; erase the frame
.93cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.93cc						CheckRightBracket:
.93cc		b1 30		lda ($30),y			lda 	(codePtr),y
.93ce		c8		iny				iny
.93cf		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.93d1		d0 0f		bne $93e2			bne 	CNAFail
.93d3		60		rts				rts
.93d4						CheckComma:
.93d4		b1 30		lda ($30),y			lda 	(codePtr),y
.93d6		c8		iny				iny
.93d7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.93d9		d0 07		bne $93e2			bne 	CNAFail
.93db		60		rts				rts
.93dc						CheckNextA:
.93dc		d1 30		cmp ($30),y			cmp 	(codePtr),y
.93de		d0 02		bne $93e2			bne 	CNAFail
.93e0		c8		iny				iny 								; skip character
.93e1		60		rts				rts 								; and exit
.93e2						CNAFail:
.93e2		4c bd a4	jmp $a4bd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.93e5						ErrorHandler:
.93e5		48		pha				pha 								; save error #
.93e6		a8		tay				tay 								; find the error text
.93e7		f0 4e		beq $9437			beq 	_EHEnd
.93e9		a2 00		ldx #$00			ldx 	#0
.93eb		a9 d6		lda #$d6			lda 	#((ErrorText) & $FF)
.93ed		85 36		sta $36				sta 	0+zTemp0
.93ef		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.93f1		85 37		sta $37				sta 	1+zTemp0
.93f3						_EHFind:
.93f3		88		dey				dey 								; keep looking through text
.93f4		f0 0e		beq $9404			beq 	_EHFound
.93f6						_EHFindZero:
.93f6		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93f8		e6 36		inc $36				inc 	zTemp0
.93fa		d0 02		bne $93fe			bne 	_EHFNoCarry
.93fc		e6 37		inc $37				inc 	zTemp0+1
.93fe						_EHFNoCarry:
.93fe		c9 00		cmp #$00			cmp 	#0
.9400		d0 f4		bne $93f6			bne 	_EHFindZero
.9402		80 ef		bra $93f3			bra 	_EHFind
.9404						_EHFound:
.9404		a5 36		lda $36				lda 	zTemp0 						; print message
.9406		a6 37		ldx $37				ldx 	zTemp0+1
.9408		20 44 94	jsr $9444			jsr 	PrintStringXA
.940b		68		pla				pla  								; check if error is 'open structure'
.940c		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.940e		f0 22		beq $9432			beq 	_EHCREnd
.9410		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9412		b1 30		lda ($30),y			lda 	(codePtr),y
.9414		d0 05		bne $941b			bne 	_EHAtMsg
.9416		c8		iny				iny
.9417		b1 30		lda ($30),y			lda 	(codePtr),y
.9419		f0 17		beq $9432			beq 	_EHCREnd
.941b						_EHAtMsg:
.941b		a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.941d		a9 3a		lda #$3a			lda 	#_AtMsg & $FF
.941f		20 44 94	jsr $9444			jsr 	PrintStringXA
.9422		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9424		b1 30		lda ($30),y			lda 	(codePtr),y
.9426		48		pha				pha
.9427		c8		iny				iny
.9428		b1 30		lda ($30),y			lda 	(codePtr),y
.942a		aa		tax				tax
.942b		68		pla				pla
.942c		20 5a 98	jsr $985a			jsr 	ConvertInt16 				; convert XA to string
.942f		20 44 94	jsr $9444			jsr 	PrintStringXA 				; and print it.
.9432						_EHCREnd:
.9432		a9 0d		lda #$0d			lda 	#13 						; new line
.9434		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9437						_EHEnd:
.9437		4c 1e 88	jmp $881e			jmp 	WarmStart
>943a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9442		20 00
.9444						PrintStringXA:
.9444		5a		phy				phy
.9445		86 37		stx $37				stx 	zTemp0+1
.9447		85 36		sta $36				sta 	zTemp0
.9449		a0 00		ldy #$00			ldy 	#0
.944b						_PSXALoop:
.944b		b1 36		lda ($36),y			lda 	(zTemp0),y
.944d		f0 06		beq $9455			beq 	_PSXAExit
.944f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9452		c8		iny				iny
.9453		80 f6		bra $944b			bra 	_PSXALoop
.9455						_PSXAExit:
.9455		7a		ply				ply
.9456		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9457						UnaryTrue:
.9457		fa		plx				plx
.9458						ReturnTrue:
.9458		a9 01		lda #$01			lda 	#1  						; set to 1
.945a		20 47 a3	jsr $a347			jsr 	NSMSetByte
.945d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.945f		95 50		sta $50,x			sta 	NSStatus,x
.9461		60		rts				rts
.9462						UnaryFalse:
.9462		fa		plx				plx
.9463						ReturnFalse:
.9463		4c 45 a3	jmp $a345			jmp 	NSMSetZero 					; set it all to zero
.9466						BinaryCompareEqual:
.9466		fa		plx				plx
.9467		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.946a		c9 00		cmp #$00			cmp 	#0
.946c		f0 ea		beq $9458			beq 	ReturnTrue
.946e		80 f3		bra $9463			bra 	ReturnFalse
.9470						BinaryCompareLess:
.9470		fa		plx				plx
.9471		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.9474		c9 ff		cmp #$ff			cmp 	#$FF
.9476		f0 e0		beq $9458			beq 	ReturnTrue
.9478		80 e9		bra $9463			bra 	ReturnFalse
.947a						BinaryCompareGreater:
.947a		fa		plx				plx
.947b		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.947e		c9 01		cmp #$01			cmp 	#1
.9480		f0 d6		beq $9458			beq 	ReturnTrue
.9482		80 df		bra $9463			bra 	ReturnFalse
.9484						BinaryCompareNotEqual:
.9484		fa		plx				plx
.9485		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.9488		c9 00		cmp #$00			cmp 	#0
.948a		d0 cc		bne $9458			bne 	ReturnTrue
.948c		80 d5		bra $9463			bra 	ReturnFalse
.948e						BinaryCompareLessEqual:
.948e		fa		plx				plx
.948f		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.9492		c9 01		cmp #$01			cmp 	#1
.9494		d0 c2		bne $9458			bne 	ReturnTrue
.9496		80 cb		bra $9463			bra 	ReturnFalse
.9498						BinaryCompareGreaterEqual:
.9498		fa		plx				plx
.9499		20 a2 94	jsr $94a2			jsr 	CompareBaseCode
.949c		c9 ff		cmp #$ff			cmp 	#$FF
.949e		d0 b8		bne $9458			bne 	ReturnTrue
.94a0		80 c1		bra $9463			bra 	ReturnFalse
.94a2						CompareBaseCode:
.94a2		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; make both values if references.
.94a5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.94a7		15 51		ora $51,x			ora 	NSStatus+1,x
.94a9		29 10		and #$10			and 	#NSTString
.94ab		d0 37		bne $94e4			bne 	_CBCString 					; if so do string code, which will check if both.
.94ad		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.94af		15 79		ora $79,x			ora 	NSExponent+1,x
.94b1		d0 34		bne $94e7			bne 	_CBCFloat
.94b3		b5 50		lda $50,x			lda 	NSStatus,x
.94b5		15 51		ora $51,x			ora 	NSStatus+1,x
.94b7		29 08		and #$08			and 	#NSTFloat
.94b9		d0 2c		bne $94e7			bne 	_CBCFloat
.94bb		20 ea 94	jsr $94ea			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.94be		e8		inx				inx
.94bf		20 ea 94	jsr $94ea			jsr 	CompareFixMinusZero
.94c2		ca		dex				dex
.94c3		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.94c5		55 51		eor $51,x			eor 	NSStatus+1,x
.94c7		10 0a		bpl $94d3			bpl 	_CDCSameSign
.94c9		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.94cb		30 14		bmi $94e1			bmi 	_CBCLess 					; return $FF
.94cd						_CBCGreater:
.94cd		a9 01		lda #$01			lda 	#1
.94cf		60		rts				rts
.94d0						_CBCEqual:
.94d0		a9 00		lda #$00			lda 	#0
.94d2		60		rts				rts
.94d3						_CDCSameSign:
.94d3		20 ff 96	jsr $96ff			jsr 	SubTopTwoStack 				; unsigned subtract
.94d6		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; or the mantissa together
.94d9		f0 f5		beq $94d0			beq 	_CBCEqual 					; -0 == 0
.94db		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.94dd		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.94df		10 ec		bpl $94cd			bpl 	_CBCGreater
.94e1						_CBCLess:
.94e1		a9 ff		lda #$ff			lda 	#$FF
.94e3		60		rts				rts
.94e4						_CBCString:
.94e4		4c 70 96	jmp $9670			jmp 	CompareStrings
.94e7						_CBCFloat:
.94e7		4c ba 99	jmp $99ba			jmp 	CompareFloat
.94ea						CompareFixMinusZero:
.94ea		20 67 a3	jsr $a367			jsr 	NSMIsZero
.94ed		d0 02		bne $94f1			bne 	_CFXMZNotZero
.94ef		74 50		stz $50,x			stz 	NSStatus,x
.94f1						_CFXMZNotZero:
.94f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94f2						StringConcat:
.94f2		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.94f4		35 51		and $51,x			and 	NSStatus+1,x
.94f6		29 18		and #$18			and 	#NSBTypeMask
.94f8		c9 10		cmp #$10			cmp 	#NSTString
.94fa		d0 50		bne $954c			bne		_SCType
.94fc		64 38		stz $38				stz 	zTemp1 						; counting total length
.94fe		e8		inx				inx
.94ff		20 1d 95	jsr $951d			jsr 	_SCSetupZ0 					; setup for second
.9502		20 26 95	jsr $9526			jsr 	_SCLengthZ0 				; length for second
.9505		ca		dex				dex
.9506		20 1d 95	jsr $951d			jsr 	_SCSetupZ0 					; setup for first
.9509		20 26 95	jsr $9526			jsr 	_SCLengthZ0 				; length for first
.950c		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.950e		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.9511		20 3d 95	jsr $953d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9514		e8		inx				inx
.9515		20 1d 95	jsr $951d			jsr 	_SCSetupZ0 					; copy second out
.9518		20 3d 95	jsr $953d			jsr 	_SCCopy
.951b		ca		dex				dex
.951c		60		rts				rts
.951d						_SCSetupZ0:
.951d		b5 58		lda $58,x			lda 	NSMantissa0,x
.951f		85 36		sta $36				sta 	zTemp0
.9521		b5 60		lda $60,x			lda 	NSMantissa1,x
.9523		85 37		sta $37				sta 	zTemp0+1
.9525		60		rts				rts
.9526						_SCLengthZ0:
.9526		5a		phy				phy
.9527		a0 00		ldy #$00			ldy 	#0
.9529						_SCLenLoop:
.9529		b1 36		lda ($36),y			lda 	(zTemp0),y
.952b		f0 0e		beq $953b			beq 	_SCLExit
.952d		c8		iny				iny
.952e		e6 38		inc $38				inc 	zTemp1
.9530		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9532		c9 fd		cmp #$fd			cmp 	#253
.9534		d0 f3		bne $9529			bne		_SCLenLoop
.9536		a9 09		lda #$09		lda	#9
.9538		4c e5 93	jmp $93e5		jmp	ErrorHandler
.953b						_SCLExit:
.953b		7a		ply				ply
.953c		60		rts				rts
.953d						_SCCopy:
.953d		5a		phy				phy
.953e		a0 00		ldy #$00			ldy 	#0
.9540						_SCCopyLoop:
.9540		b1 36		lda ($36),y			lda 	(zTemp0),y
.9542		f0 06		beq $954a			beq 	_SCCExit
.9544		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.9547		c8		iny				iny
.9548		80 f6		bra $9540			bra 	_SCCopyLoop
.954a						_SCCExit:
.954a		7a		ply				ply
.954b		60		rts				rts
.954c						_SCType:
.954c		4c c7 a4	jmp $a4c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.954f						IntegerDivide:
.954f		fa		plx				plx
.9550		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9552		15 51		ora $51,x			ora 	NSStatus+1,x
.9554		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9555		0a		asl a				asl 	a
.9556		10 05		bpl $955d			bpl 	_NotRef
.9558		48		pha				pha
.9559		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.955c		68		pla				pla
.955d						_NotRef:
.955d		0a		asl a				asl 	a
.955e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9560		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9562		15 79		ora $79,x			ora 	NSExponent+1,x
.9564		f0 03		beq $9569			beq 	_IntegerCode 				; if clear, then we have two integers
.9566		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.9569						_IntegerCode:
.9569		20 83 95	jsr $9583			jsr 	CheckDivideZero 			; do div zero check
.956c		20 b5 95	jsr $95b5			jsr 	Int32Divide 				; do the division
.956f		20 66 96	jsr $9666			jsr 	CalculateSign 				; calculate result sign
.9572						NSMCopyPlusTwoToZero:
.9572		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9574		95 58		sta $58,x			sta 	NSMantissa0,x
.9576		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9578		95 60		sta $60,x			sta 	NSMantissa1,x
.957a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.957c		95 68		sta $68,x			sta 	NSMantissa2,x
.957e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9580		95 70		sta $70,x			sta 	NSMantissa3,x
.9582		60		rts				rts
.9583						CheckDivideZero:
.9583		e8		inx				inx
.9584		20 67 a3	jsr $a367			jsr 	NSMIsZero
.9587		f0 02		beq $958b			beq 	_CDVError
.9589		ca		dex				dex
.958a		60		rts				rts
.958b						_CDVError:
.958b		a9 03		lda #$03		lda	#3
.958d		4c e5 93	jmp $93e5		jmp	ErrorHandler
.9590						IntegerModulus:
.9590		fa		plx				plx
.9591		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9593		15 51		ora $51,x			ora 	NSStatus+1,x
.9595		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9596		0a		asl a				asl 	a
.9597		10 05		bpl $959e			bpl 	_NotRef
.9599		48		pha				pha
.959a		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.959d		68		pla				pla
.959e						_NotRef:
.959e		0a		asl a				asl 	a
.959f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a3		15 79		ora $79,x			ora 	NSExponent+1,x
.95a5		f0 03		beq $95aa			beq 	_IntegerCode 				; if clear, then we have two integers
.95a7		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.95aa						_IntegerCode:
.95aa						IntegerModulusNoCheck:
.95aa		20 83 95	jsr $9583			jsr 	CheckDivideZero 			; do div zero check
.95ad		20 b5 95	jsr $95b5			jsr 	Int32Divide 				; do the division
.95b0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.95b2		56 50		lsr $50,x			lsr 	NSStatus,x
.95b4		60		rts				rts
.95b5						Int32Divide:
.95b5		48		pha				pha 								; save AXY
.95b6		5a		phy				phy
.95b7		20 28 a3	jsr $a328			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95ba		20 41 a3	jsr $a341			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.95bd		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.95bf						_I32DivideLoop:
.95bf		e8		inx				inx
.95c0		e8		inx				inx
.95c1		20 54 a3	jsr $a354			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.95c4		ca		dex				dex
.95c5		ca		dex				dex
.95c6		20 55 a3	jsr $a355			jsr 	NSMRotateLeft
.95c9		20 f4 95	jsr $95f4			jsr 	DivideCheckSubtract 		; check if subtract possible
.95cc		90 02		bcc $95d0			bcc 	_I32DivideNoCarryIn
.95ce		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.95d0						_I32DivideNoCarryIn:
.95d0		88		dey				dey 								; loop round till division completed.
.95d1		d0 ec		bne $95bf			bne 	_I32DivideLoop
.95d3		7a		ply				ply 								; restore AXY and exit
.95d4		68		pla				pla
.95d5		60		rts				rts
.95d6						Int32ShiftDivide:
.95d6		48		pha				pha 								; save AY
.95d7		5a		phy				phy
.95d8		e8		inx				inx 								; clear S[X+2]
.95d9		e8		inx				inx
.95da		20 45 a3	jsr $a345			jsr 	NSMSetZero
.95dd		ca		dex				dex
.95de		ca		dex				dex
.95df		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.95e1						_I32SDLoop:
.95e1		20 f4 95	jsr $95f4			jsr 	DivideCheckSubtract 		; check if subtract possible
.95e4		e8		inx				inx
.95e5		e8		inx				inx
.95e6		20 55 a3	jsr $a355			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95e9		ca		dex				dex
.95ea		ca		dex				dex
.95eb		20 55 a3	jsr $a355			jsr 	NSMRotateLeft
.95ee		88		dey				dey 	 							; do 31 times
.95ef		d0 f0		bne $95e1			bne 	_I32SDLoop
.95f1		7a		ply				ply 								; restore AY and exit
.95f2		68		pla				pla
.95f3		60		rts				rts
.95f4						DivideCheckSubtract:
.95f4		20 ff 96	jsr $96ff			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95f7		b0 04		bcs $95fd			bcs 	_DCSExit 					; if carry set, then could do, exit
.95f9		20 e5 96	jsr $96e5			jsr 	AddTopTwoStack 				; add it back in
.95fc		18		clc				clc 								; and return False
.95fd						_DCSExit:
.95fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95fe						MulInteger:
.95fe		fa		plx				plx
.95ff		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9601		15 51		ora $51,x			ora 	NSStatus+1,x
.9603		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9604		0a		asl a				asl 	a
.9605		10 05		bpl $960c			bpl 	_NotRef
.9607		48		pha				pha
.9608		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.960b		68		pla				pla
.960c						_NotRef:
.960c		0a		asl a				asl 	a 							; put MSB of type into A:7
.960d		30 09		bmi $9618			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.960f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9611		15 79		ora $79,x			ora 	NSExponent+1,x
.9613		f0 06		beq $961b			beq 	_IntegerCode 				; if clear, then we have two integers
.9615		4c 7c 9a	jmp $9a7c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9618						_StringData:
.9618		4c d1 a4	jmp $a4d1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.961b						_IntegerCode:
.961b		20 28 96	jsr $9628			jsr 	MultiplyShort
.961e		c9 00		cmp #$00			cmp 	#0
.9620		f0 05		beq $9627			beq 	_MIExit
.9622		a9 04		lda #$04		lda	#4
.9624		4c e5 93	jmp $93e5		jmp	ErrorHandler
.9627						_MIExit:
.9627		60		rts				rts
.9628						MultiplyShort:
.9628		5a		phy				phy 								; save Y
.9629		20 28 a3	jsr $a328			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.962c		20 41 a3	jsr $a341			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.962f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9631						_I32MLoop:
.9631		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9633		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9635		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9637		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9639		f0 25		beq $9660			beq 	_I32MExit 					; exit if zero
.963b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.963d		29 01		and #$01			and 	#1
.963f		f0 0d		beq $964e			beq 	_I32MNoAdd
.9641		20 e5 96	jsr $96e5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9644		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9646		10 06		bpl $964e			bpl 	_I32MNoAdd
.9648						_I32ShiftRight:
.9648		20 5e a3	jsr $a35e			jsr 	NSMShiftRight 				; shift S[X] right
.964b		c8		iny				iny 								; increment shift count
.964c		80 09		bra $9657			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.964e						_I32MNoAdd:
.964e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9650		70 f6		bvs $9648			bvs 	_I32ShiftRight 				; instead.
.9652		e8		inx				inx
.9653		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9656		ca		dex				dex
.9657						_I32MShiftUpper:
.9657		e8		inx				inx 								; shift S[X+2] right
.9658		e8		inx				inx
.9659		20 5e a3	jsr $a35e			jsr 	NSMShiftRight
.965c		ca		dex				dex
.965d		ca		dex				dex
.965e		80 d1		bra $9631			bra 	_I32MLoop 					; try again.
.9660						_I32MExit:
.9660		20 66 96	jsr $9666			jsr 	CalculateSign
.9663		98		tya				tya 								; shift in A
.9664		7a		ply				ply 								; restore Y and exit
.9665		60		rts				rts
.9666						CalculateSign:
.9666		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9668		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.966a		55 51		eor $51,x			eor 	NSStatus+1,x
.966c		0a		asl a				asl 	a 							; shift bit 7 into carry
.966d		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.966f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9670						CompareStrings:
.9670		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9672		35 51		and $51,x			and 	NSStatus+1,x
.9674		29 10		and #$10			and 	#NSBIsString
.9676		f0 28		beq $96a0			beq 	_CSTypeError
.9678		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.967a		85 36		sta $36				sta 	zTemp0
.967c		b5 60		lda $60,x			lda 	NSMantissa1,x
.967e		85 37		sta $37				sta 	zTemp0+1
.9680		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9682		85 38		sta $38				sta 	zTemp1
.9684		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9686		85 39		sta $39				sta 	zTemp1+1
.9688		5a		phy				phy 								; save Y so we can access strings
.9689		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.968b						_CSLoop:
.968b		c8		iny				iny
.968c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.968e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9690		d0 06		bne $9698			bne 	_CSDifferent
.9692		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9694		d0 f5		bne $968b			bne 	_CSLoop 					; still comparing
.9696						_CSExit:
.9696		7a		ply				ply 								; reached end, return zero in A from EOS
.9697		60		rts				rts
.9698						_CSDifferent:
.9698		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.969a		90 fa		bcc $9696			bcc		_CSExit
.969c		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.969e		80 f6		bra $9696			bra 	_CSExit
.96a0						_CSTypeError:
.96a0		4c c7 a4	jmp $a4c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.96a3						ShiftLeft:
.96a3		38		sec				sec 								; common code, carry determines which way.
.96a4		80 01		bra $96a7			bra 	ShiftMain
.96a6						ShiftRight:
.96a6		18		clc				clc
.96a7						ShiftMain:
.96a7		fa		plx				plx 								; restore X
.96a8		08		php				php 								; save direction
.96a9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96ab		15 51		ora $51,x			ora 	NSStatus+1,x
.96ad		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96ae		0a		asl a				asl 	a
.96af		10 05		bpl $96b6			bpl 	_NotRef
.96b1		48		pha				pha
.96b2		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96b5		68		pla				pla
.96b6						_NotRef:
.96b6		0a		asl a				asl 	a
.96b7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96b9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96bb		15 79		ora $79,x			ora 	NSExponent+1,x
.96bd		f0 03		beq $96c2			beq 	_IntegerCode 				; if clear, then we have two integers
.96bf		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.96c2						_IntegerCode:
.96c2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.96c4		29 e0		and #$e0			and 	#$E0
.96c6		15 61		ora $61,x			ora 	NSMantissa1+1,x
.96c8		15 69		ora $69,x			ora 	NSMantissa2+1,x
.96ca		15 71		ora $71,x			ora 	NSMantissa3+1,x
.96cc		d0 12		bne $96e0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.96ce						_SMLoop:
.96ce		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.96d0		30 11		bmi $96e3			bmi 	_SMExit 					; exit if done.
.96d2		28		plp				plp 								; restore direction setting
.96d3		08		php				php
.96d4		90 05		bcc $96db			bcc 	_SMRight
.96d6		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; shift left if CS
.96d9		80 f3		bra $96ce			bra 	_SMLoop
.96db						_SMRight:
.96db		20 5e a3	jsr $a35e			jsr 	NSMShiftRight 				; shift right if CC
.96de		80 ee		bra $96ce			bra 	_SMLoop
.96e0						_SMExit0:
.96e0		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; return zero.
.96e3						_SMExit:
.96e3		28		plp				plp 								; throw direction
.96e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.96e5						AddTopTwoStack:
.96e5		18		clc				clc
.96e6		b5 58		lda $58,x			lda		NSMantissa0,x
.96e8		75 59		adc $59,x			adc 		NSMantissa0+1,x
.96ea		95 58		sta $58,x			sta 	NSMantissa0,x
.96ec		b5 60		lda $60,x			lda		NSMantissa1,x
.96ee		75 61		adc $61,x			adc 		NSMantissa1+1,x
.96f0		95 60		sta $60,x			sta 	NSMantissa1,x
.96f2		b5 68		lda $68,x			lda		NSMantissa2,x
.96f4		75 69		adc $69,x			adc 		NSMantissa2+1,x
.96f6		95 68		sta $68,x			sta 	NSMantissa2,x
.96f8		b5 70		lda $70,x			lda		NSMantissa3,x
.96fa		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96fc		95 70		sta $70,x			sta 	NSMantissa3,x
.96fe		60		rts				rts
.96ff						SubTopTwoStack:
.96ff		38		sec				sec
.9700		b5 58		lda $58,x			lda		NSMantissa0,x
.9702		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9704		95 58		sta $58,x			sta 	NSMantissa0,x
.9706		b5 60		lda $60,x			lda		NSMantissa1,x
.9708		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.970a		95 60		sta $60,x			sta 	NSMantissa1,x
.970c		b5 68		lda $68,x			lda		NSMantissa2,x
.970e		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9710		95 68		sta $68,x			sta 	NSMantissa2,x
.9712		b5 70		lda $70,x			lda		NSMantissa3,x
.9714		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9716		95 70		sta $70,x			sta 	NSMantissa3,x
.9718		60		rts				rts
.9719						AddInteger:
.9719		fa		plx				plx
.971a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.971c		15 51		ora $51,x			ora 	NSStatus+1,x
.971e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.971f		0a		asl a				asl 	a
.9720		10 05		bpl $9727			bpl 	_NotRef
.9722		48		pha				pha
.9723		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9726		68		pla				pla
.9727						_NotRef:
.9727		0a		asl a				asl 	a 							; put MSB of type into A:7
.9728		30 09		bmi $9733			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.972a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.972c		15 79		ora $79,x			ora 	NSExponent+1,x
.972e		f0 06		beq $9736			beq 	_IntegerCode 				; if clear, then we have two integers
.9730		4c 2c 99	jmp $992c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9733						_StringData:
.9733		4c f2 94	jmp $94f2			jmp 	StringConcat							; at least one string - don't know both are strings.
.9736						_IntegerCode:
.9736						AddCode:
.9736		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9738		55 51		eor $51,x			eor 	NSStatus+1,x
.973a		10 a9		bpl $96e5			bpl 	AddTopTwoStack
.973c		20 ff 96	jsr $96ff			jsr 	SubTopTwoStack 				; do a physical subtraction
.973f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9741		10 07		bpl $974a			bpl 	_AddExit
.9743		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9745		95 50		sta $50,x			sta 	NSStatus,x
.9747		20 0e a3	jsr $a30e			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.974a						_AddExit:
.974a		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; check for -0
.974d		d0 02		bne $9751			bne 	_AddNonZero
.974f		74 50		stz $50,x			stz 	NSStatus,x
.9751						_AddNonZero:
.9751		60		rts				rts
.9752						SubInteger:
.9752		fa		plx				plx
.9753		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9755		15 51		ora $51,x			ora 	NSStatus+1,x
.9757		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9758		0a		asl a				asl 	a
.9759		10 05		bpl $9760			bpl 	_NotRef
.975b		48		pha				pha
.975c		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.975f		68		pla				pla
.9760						_NotRef:
.9760		0a		asl a				asl 	a 							; put MSB of type into A:7
.9761		30 09		bmi $976c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9763		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9765		15 79		ora $79,x			ora 	NSExponent+1,x
.9767		f0 06		beq $976f			beq 	_IntegerCode 				; if clear, then we have two integers
.9769		4c 31 99	jmp $9931			jmp 	FloatingPointSub 							; otherwise at least one float.
.976c						_StringData:
.976c		4c d1 a4	jmp $a4d1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.976f						_IntegerCode:
.976f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9771		49 80		eor #$80			eor 	#$80
.9773		95 51		sta $51,x			sta 	NSStatus+1,x
.9775		80 bf		bra $9736			bra 	AddCode 					; and do the same code as add.
.9777						AndInteger:
.9777		fa		plx				plx
.9778		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.977a		15 51		ora $51,x			ora 	NSStatus+1,x
.977c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.977d		0a		asl a				asl 	a
.977e		10 05		bpl $9785			bpl 	_NotRef
.9780		48		pha				pha
.9781		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9784		68		pla				pla
.9785						_NotRef:
.9785		0a		asl a				asl 	a
.9786		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9788		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.978a		15 79		ora $79,x			ora 	NSExponent+1,x
.978c		f0 03		beq $9791			beq 	_IntegerCode 				; if clear, then we have two integers
.978e		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.9791						_IntegerCode:
.9791		b5 58		lda $58,x			lda		NSMantissa0,x
.9793		35 59		and $59,x			and 		NSMantissa0+1,x
.9795		95 58		sta $58,x			sta 	NSMantissa0,x
.9797		b5 60		lda $60,x			lda		NSMantissa1,x
.9799		35 61		and $61,x			and 		NSMantissa1+1,x
.979b		95 60		sta $60,x			sta 	NSMantissa1,x
.979d		b5 68		lda $68,x			lda		NSMantissa2,x
.979f		35 69		and $69,x			and 		NSMantissa2+1,x
.97a1		95 68		sta $68,x			sta 	NSMantissa2,x
.97a3		b5 70		lda $70,x			lda		NSMantissa3,x
.97a5		35 71		and $71,x			and 		NSMantissa3+1,x
.97a7		95 70		sta $70,x			sta 	NSMantissa3,x
.97a9		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97ab		60		rts				rts
.97ac						OraInteger:
.97ac		fa		plx				plx
.97ad		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97af		15 51		ora $51,x			ora 	NSStatus+1,x
.97b1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97b2		0a		asl a				asl 	a
.97b3		10 05		bpl $97ba			bpl 	_NotRef
.97b5		48		pha				pha
.97b6		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b9		68		pla				pla
.97ba						_NotRef:
.97ba		0a		asl a				asl 	a
.97bb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97bd		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97bf		15 79		ora $79,x			ora 	NSExponent+1,x
.97c1		f0 03		beq $97c6			beq 	_IntegerCode 				; if clear, then we have two integers
.97c3		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.97c6						_IntegerCode:
.97c6		b5 58		lda $58,x			lda		NSMantissa0,x
.97c8		15 59		ora $59,x			ora 		NSMantissa0+1,x
.97ca		95 58		sta $58,x			sta 	NSMantissa0,x
.97cc		b5 60		lda $60,x			lda		NSMantissa1,x
.97ce		15 61		ora $61,x			ora 		NSMantissa1+1,x
.97d0		95 60		sta $60,x			sta 	NSMantissa1,x
.97d2		b5 68		lda $68,x			lda		NSMantissa2,x
.97d4		15 69		ora $69,x			ora 		NSMantissa2+1,x
.97d6		95 68		sta $68,x			sta 	NSMantissa2,x
.97d8		b5 70		lda $70,x			lda		NSMantissa3,x
.97da		15 71		ora $71,x			ora 		NSMantissa3+1,x
.97dc		95 70		sta $70,x			sta 	NSMantissa3,x
.97de		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97e0		60		rts				rts
.97e1						EorInteger:
.97e1		fa		plx				plx
.97e2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97e4		15 51		ora $51,x			ora 	NSStatus+1,x
.97e6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e7		0a		asl a				asl 	a
.97e8		10 05		bpl $97ef			bpl 	_NotRef
.97ea		48		pha				pha
.97eb		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97ee		68		pla				pla
.97ef						_NotRef:
.97ef		0a		asl a				asl 	a
.97f0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97f2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97f4		15 79		ora $79,x			ora 	NSExponent+1,x
.97f6		f0 03		beq $97fb			beq 	_IntegerCode 				; if clear, then we have two integers
.97f8		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.97fb						_IntegerCode:
.97fb		b5 58		lda $58,x			lda		NSMantissa0,x
.97fd		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97ff		95 58		sta $58,x			sta 	NSMantissa0,x
.9801		b5 60		lda $60,x			lda		NSMantissa1,x
.9803		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9805		95 60		sta $60,x			sta 	NSMantissa1,x
.9807		b5 68		lda $68,x			lda		NSMantissa2,x
.9809		55 69		eor $69,x			eor 		NSMantissa2+1,x
.980b		95 68		sta $68,x			sta 	NSMantissa2,x
.980d		b5 70		lda $70,x			lda		NSMantissa3,x
.980f		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9811		95 70		sta $70,x			sta 	NSMantissa3,x
.9813		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9815		60		rts				rts
.9816						WordIndirect:
.9816		fa		plx				plx
.9817		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9819		15 51		ora $51,x			ora 	NSStatus+1,x
.981b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.981c		0a		asl a				asl 	a
.981d		10 05		bpl $9824			bpl 	_NotRef
.981f		48		pha				pha
.9820		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9823		68		pla				pla
.9824						_NotRef:
.9824		0a		asl a				asl 	a
.9825		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9827		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9829		15 79		ora $79,x			ora 	NSExponent+1,x
.982b		f0 03		beq $9830			beq 	_IntegerCode 				; if clear, then we have two integers
.982d		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.9830						_IntegerCode:
.9830		20 36 97	jsr $9736			jsr 	AddCode 					; add the two values
.9833		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9835		95 50		sta $50,x			sta 	NSStatus,x
.9837		60		rts				rts
.9838						ByteIndirect:
.9838		fa		plx				plx
.9839		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.983b		15 51		ora $51,x			ora 	NSStatus+1,x
.983d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.983e		0a		asl a				asl 	a
.983f		10 05		bpl $9846			bpl 	_NotRef
.9841		48		pha				pha
.9842		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9845		68		pla				pla
.9846						_NotRef:
.9846		0a		asl a				asl 	a
.9847		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9849		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.984b		15 79		ora $79,x			ora 	NSExponent+1,x
.984d		f0 03		beq $9852			beq 	_IntegerCode 				; if clear, then we have two integers
.984f		4c c7 a4	jmp $a4c7			jmp 	TypeError 					; anything else, type mismatch.
.9852						_IntegerCode:
.9852		20 36 97	jsr $9736			jsr 	AddCode 					; add the two values
.9855		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9857		95 50		sta $50,x			sta 	NSStatus,x
.9859		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.985a						ConvertInt16:
.985a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.985c		86 60		stx $60				stx 	NSMantissa1
.985e		64 68		stz $68				stz 	NSMantissa2
.9860		64 70		stz $70				stz 	NSMantissa3
.9862		64 50		stz $50				stz 	NSStatus 					; positive integer
.9864		a2 00		ldx #$00			ldx 	#0 							; stack level
.9866		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9868		80 00		bra $986a			bra 	ConvertInt32
.986a						ConvertInt32:
.986a		5a		phy				phy
.986b		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.986d		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.986f		10 08		bpl $9879			bpl 	_CI32NotNeg
.9871		48		pha				pha
.9872		a9 2d		lda #$2d			lda 	#'-'
.9874		99 43 06	sta $0643,y			sta 	numberBuffer,y
.9877		c8		iny				iny
.9878		68		pla				pla
.9879						_CI32NotNeg:
.9879		20 87 98	jsr $9887			jsr 	_CI32DivideConvert 			; recursive conversion
.987c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.987e		99 43 06	sta $0643,y			sta 	numberBuffer,y
.9881		7a		ply				ply
.9882		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9884		a9 43		lda #$43			lda 	#numberBuffer & $FF
.9886		60		rts				rts
.9887						_CI32DivideConvert:
.9887		e8		inx				inx 								; write to next slot up
.9888		20 47 a3	jsr $a347			jsr 	NSMSetByte 		 			; write the base out.
.988b		ca		dex				dex
.988c		20 b5 95	jsr $95b5			jsr 	Int32Divide 				; divide
.988f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9891		48		pha				pha
.9892		20 72 95	jsr $9572			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9895		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; is it zero ?
.9898		f0 05		beq $989f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.989a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.989c		20 87 98	jsr $9887			jsr 	_CI32DivideConvert 			; and recusrively call.
.989f						_CI32NoRecurse:
.989f		68		pla				pla 								; remainder
.98a0		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.98a2		90 02		bcc $98a6			bcc 	_CI32NotHex
.98a4		69 26		adc #$26			adc 	#6+32
.98a6						_CI32NotHex:
.98a6		69 30		adc #$30			adc 	#48
.98a8		99 43 06	sta $0643,y			sta 	numberBuffer,y 				; write out and exit
.98ab		c8		iny				iny
.98ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.98ad						PrecedenceLevel:
>98ad		04					.byte	 4	; $00 <<
>98ae		02					.byte	 2	; $01 <=
>98af		02					.byte	 2	; $02 <>
>98b0		00					.byte	 0	; $03 !!3
>98b1		00					.byte	 0	; $04 ><
>98b2		02					.byte	 2	; $05 >=
>98b3		04					.byte	 4	; $06 >>
>98b4		00					.byte	 0	; $07 !!7
>98b5		00					.byte	 0	; $08 !!8
>98b6		00					.byte	 0	; $09 !!9
>98b7		00					.byte	 0	; $0a !!10
>98b8		00					.byte	 0	; $0b !!11
>98b9		00					.byte	 0	; $0c !!12
>98ba		00					.byte	 0	; $0d !!13
>98bb		00					.byte	 0	; $0e !!14
>98bc		00					.byte	 0	; $0f !!15
>98bd		00					.byte	 0	; $10 @
>98be		00					.byte	 0	; $11 !!17
>98bf		00					.byte	 0	; $12 !!18
>98c0		00					.byte	 0	; $13 [
>98c1		04					.byte	 4	; $14 \
>98c2		00					.byte	 0	; $15 ]
>98c3		01					.byte	 1	; $16 ^
>98c4		00					.byte	 0	; $17 _
>98c5		00					.byte	 0	; $18 `
>98c6		00					.byte	 0	; $19 !!25
>98c7		00					.byte	 0	; $1a !!26
>98c8		00					.byte	 0	; $1b {
>98c9		01					.byte	 1	; $1c |
>98ca		00					.byte	 0	; $1d }
>98cb		00					.byte	 0	; $1e ~
>98cc		00					.byte	 0	; $1f <7F>
>98cd		00					.byte	 0	; $20
>98ce		05					.byte	 5	; $21 !
>98cf		00					.byte	 0	; $22 "
>98d0		00					.byte	 0	; $23 #
>98d1		05					.byte	 5	; $24 $
>98d2		04					.byte	 4	; $25 %
>98d3		01					.byte	 1	; $26 &
>98d4		00					.byte	 0	; $27 '
>98d5		00					.byte	 0	; $28 (
>98d6		00					.byte	 0	; $29 )
>98d7		04					.byte	 4	; $2a *
>98d8		03					.byte	 3	; $2b +
>98d9		00					.byte	 0	; $2c ,
>98da		03					.byte	 3	; $2d -
>98db		00					.byte	 0	; $2e .
>98dc		04					.byte	 4	; $2f /
>98dd		00					.byte	 0	; $30 0
>98de		00					.byte	 0	; $31 1
>98df		00					.byte	 0	; $32 2
>98e0		00					.byte	 0	; $33 3
>98e1		00					.byte	 0	; $34 4
>98e2		00					.byte	 0	; $35 5
>98e3		00					.byte	 0	; $36 6
>98e4		00					.byte	 0	; $37 7
>98e5		00					.byte	 0	; $38 8
>98e6		00					.byte	 0	; $39 9
>98e7		00					.byte	 0	; $3a :
>98e8		00					.byte	 0	; $3b ;
>98e9		02					.byte	 2	; $3c <
>98ea		02					.byte	 2	; $3d =
>98eb		02					.byte	 2	; $3e >
>98ec		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98ed						EvaluateExpressionAt0:
.98ed		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98ef						EvaluateExpression:
.98ef		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98f1						EvaluateExpressionAtPrecedence:
.98f1		48		pha				pha 								; save precedence level
.98f2		20 39 9d	jsr $9d39			jsr 	EvaluateTerm 				; evaluate term into level X.
.98f5		68		pla				pla 								; restore precedence level.
.98f6						_EXPRLoop:
.98f6		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98f8		b1 30		lda ($30),y			lda 	(codePtr),y
.98fa		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98fc		b0 25		bcs $9923			bcs 	_EXPRExit
.98fe		da		phx				phx 								; read the operator precedence
.98ff		aa		tax				tax
.9900		bd ad 98	lda $98ad,x			lda 	PrecedenceLevel,x
.9903		fa		plx				plx
.9904		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9906		f0 1b		beq $9923			beq 	_EXPRExit
.9908		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.990a		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.990c		c5 37		cmp $37				cmp 	zTemp0+1
.990e		b0 13		bcs $9923			bcs		_EXPRExit 					; if current >= operator exit
.9910		48		pha				pha 								; save current precedence.
.9911		b1 30		lda ($30),y			lda 	(codePtr),y
.9913		c8		iny				iny
.9914		48		pha				pha
.9915		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9917		e8		inx				inx 								; work out the right hand side.
.9918		20 f1 98	jsr $98f1			jsr 	EvaluateExpressionAtPrecedence
.991b		ca		dex				dex
.991c		68		pla				pla 								; get operator, call the code.
.991d		20 26 99	jsr $9926			jsr 	_EXPRCaller
.9920		68		pla				pla 								; restore precedence level
.9921		80 d3		bra $98f6			bra 	_EXPRLoop 					; and go round.
.9923						_EXPRExit:
.9923		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9925		60		rts				rts
.9926						_EXPRCaller:
.9926		da		phx				phx 								; save on stack, first thing is to restore it
.9927		0a		asl a				asl 	a 							; double so can use vectors into X
.9928		aa		tax				tax
.9929		7c 52 90	jmp ($9052,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.992c						FloatingPointAdd:
.992c		20 a2 9a	jsr $9aa2			jsr 	FloatPrepare 				; prepare for floats
.992f		80 09		bra $993a			bra 	FloatAdd
.9931						FloatingPointSub:
.9931		20 a2 9a	jsr $9aa2			jsr 	FloatPrepare 				; prepare for floats
.9934						FloatSubtract:
.9934		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9936		49 80		eor #$80			eor 	#$80
.9938		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.993a						FloatAdd:
.993a		48		pha				pha
.993b		5a		phy				phy
.993c		20 b1 9a	jsr $9ab1			jsr 	NSNormalise 				; normalise S[X]
.993f		f0 51		beq $9992			beq 	_FAReturn1
.9941		e8		inx				inx 								; normalise S[X+1]
.9942		20 b1 9a	jsr $9ab1			jsr 	NSNormalise
.9945		ca		dex				dex
.9946		c9 00		cmp #$00			cmp 	#0
.9948		f0 60		beq $99aa			beq 	_FAExit 					; if so, just return A
.994a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.994c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.994e		f0 18		beq $9968			beq 	_FAExponentsEqual
.9950		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9952		a8		tay				tay
.9953		38		sec				sec 								; do a signed comparison of the exponents.
.9954		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9956		50 02		bvc $995a			bvc 	_FANoSignedChange
.9958		49 80		eor #$80			eor 	#$80
.995a						_FANoSignedChange:
.995a		29 80		and #$80			and 	#$80
.995c		10 02		bpl $9960			bpl 	_FAHaveMax
.995e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9960						_FAHaveMax:
.9960		20 ad 99	jsr $99ad			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9963		e8		inx				inx
.9964		20 ad 99	jsr $99ad			jsr 	_FAShiftToExponent
.9967		ca		dex				dex
.9968						_FAExponentsEqual:
.9968		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.996a		55 51		eor $51,x			eor 	NSStatus+1,x
.996c		30 0e		bmi $997c			bmi 	_FADifferentSigns
.996e		20 e5 96	jsr $96e5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9971		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9973		10 35		bpl $99aa			bpl 	_FAExit 					; if no, we are done.
.9975		20 5e a3	jsr $a35e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9978		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.997a		80 2e		bra $99aa			bra 	_FAExit
.997c						_FADifferentSigns:
.997c		20 ff 96	jsr $96ff			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.997f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9981		10 06		bpl $9989			bpl 	_FACheckZero 				; if no, check for -0
.9983		20 07 a3	jsr $a307			jsr 	NSMNegate 					; netate result
.9986		20 0e a3	jsr $a30e			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9989						_FACheckZero:
.9989		20 67 a3	jsr $a367			jsr 	NSMIsZero	 				; check for -0
.998c		d0 1c		bne $99aa			bne 	_FAExit
.998e		74 50		stz $50,x			stz 	NSStatus,x
.9990		80 18		bra $99aa			bra 	_FAExit
.9992						_FAReturn1:
.9992		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9994		95 58		sta $58,x			sta 	NSMantissa0,x
.9996		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9998		95 60		sta $60,x			sta 	NSMantissa1,x
.999a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.999c		95 68		sta $68,x			sta 	NSMantissa2,x
.999e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.99a0		95 70		sta $70,x			sta 	NSMantissa3,x
.99a2		b5 79		lda $79,x			lda 	NSExponent+1,x
.99a4		95 78		sta $78,x			sta 	NSExponent,x
.99a6		b5 51		lda $51,x			lda 	NSStatus+1,x
.99a8		95 50		sta $50,x			sta 	NSStatus,x
.99aa						_FAExit:
.99aa		7a		ply				ply
.99ab		68		pla				pla
.99ac		60		rts				rts
.99ad						_FAShiftToExponent:
.99ad						_FAShiftToExponent2:
.99ad		98		tya				tya 								; compare Y to exponent
.99ae		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.99b0		f0 07		beq $99b9			beq 	_FASEExit 					; exit if so.
.99b2		20 5e a3	jsr $a35e			jsr 	NSMShiftRight	 			; shift the mantissa right
.99b5		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.99b7		80 f4		bra $99ad			bra 	_FAShiftToExponent2
.99b9						_FASEExit:
.99b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.99ba						CompareFloat:
.99ba		20 34 99	jsr $9934			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.99bd		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.99bf		29 f8		and #$f8			and 	#$F8
.99c1		15 68		ora $68,x			ora 	NSMantissa2,x
.99c3		15 70		ora $70,x			ora 	NSMantissa3,x
.99c5		f0 08		beq $99cf			beq 	_FCExit 					; zero, so approximately identical
.99c7		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.99c9		34 50		bit $50,x			bit 	NSStatus,x
.99cb		10 02		bpl $99cf			bpl 	_FCExit
.99cd						_FCNegative:
.99cd		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.99cf						_FCExit:
.99cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.99d0						FDivideCommand:
.99d0		fa		plx				plx	 								; restore stack position
.99d1		20 a2 9a	jsr $9aa2			jsr 	FloatPrepare 				; prepare for floats
.99d4						FloatDivide:
.99d4		48		pha				pha
.99d5		e8		inx				inx
.99d6		20 b1 9a	jsr $9ab1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.99d9		ca		dex				dex
.99da		c9 00		cmp #$00			cmp 	#0
.99dc		f0 1d		beq $99fb			beq 	_FDZero
.99de		20 b1 9a	jsr $9ab1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.99e1		f0 16		beq $99f9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.99e3		20 d6 95	jsr $95d6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.99e6		20 72 95	jsr $9572			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.99e9		20 b1 9a	jsr $9ab1			jsr		NSNormalise 				; renormalise
.99ec		20 66 96	jsr $9666			jsr 	CalculateSign 				; calculate result sign
.99ef		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.99f1		38		sec				sec
.99f2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99f4		38		sec				sec
.99f5		e9 1e		sbc #$1e			sbc 	#30
.99f7		95 78		sta $78,x			sta 	NSExponent,x
.99f9						_FDExit:
.99f9		68		pla				pla
.99fa		60		rts				rts
.99fb						_FDZero:
.99fb		a9 03		lda #$03		lda	#3
.99fd		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9a00						FloatFractionalPart:
.9a00		5a		phy				phy
.9a01		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9a03		29 7f		and #$7f			and 	#$7F
.9a05		95 50		sta $50,x			sta 	NSStatus,x
.9a07		20 b1 9a	jsr $9ab1			jsr 	NSNormalise
.9a0a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9a0c		38		sec				sec
.9a0d		e9 e0		sbc #$e0			sbc 	#$E0
.9a0f		90 29		bcc $9a3a			bcc 	_FFPExit 					; already fractional
.9a11		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9a13		b0 22		bcs $9a37			bcs 	_FFPZero
.9a15		a8		tay				tay 								; put count to do in Y
.9a16		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9a18		20 3c 9a	jsr $9a3c			jsr 	_FFPPartial
.9a1b		95 70		sta $70,x			sta 	NSMantissa3,x
.9a1d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a1f		20 3c 9a	jsr $9a3c			jsr 	_FFPPartial
.9a22		95 68		sta $68,x			sta 	NSMantissa2,x
.9a24		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a26		20 3c 9a	jsr $9a3c			jsr 	_FFPPartial
.9a29		95 60		sta $60,x			sta 	NSMantissa1,x
.9a2b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a2d		20 3c 9a	jsr $9a3c			jsr 	_FFPPartial
.9a30		95 58		sta $58,x			sta 	NSMantissa0,x
.9a32		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; zeroed check.
.9a35		d0 03		bne $9a3a			bne 	_FFPExit
.9a37						_FFPZero:
.9a37		20 45 a3	jsr $a345			jsr 	NSMSetZero
.9a3a						_FFPExit:
.9a3a		7a		ply				ply
.9a3b		60		rts				rts
.9a3c						_FFPPartial:
.9a3c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9a3e		f0 17		beq $9a57			beq 	_FFFPPExit
.9a40		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9a42		b0 0c		bcs $9a50			bcs 	_FFFPPWholeByte
.9a44		5a		phy				phy
.9a45						_FFFPPLeft:
.9a45		0a		asl a				asl 	a
.9a46		88		dey				dey
.9a47		d0 fc		bne $9a45			bne 	_FFFPPLeft
.9a49		7a		ply				ply
.9a4a						_FFFPPRight:
.9a4a		4a		lsr a				lsr 	a
.9a4b		88		dey				dey
.9a4c		d0 fc		bne $9a4a			bne 	_FFFPPRight
.9a4e		80 07		bra $9a57			bra 	_FFFPPExit
.9a50						_FFFPPWholeByte:
.9a50		98		tya				tya 								; subtract 8 from count
.9a51		38		sec				sec
.9a52		e9 08		sbc #$08			sbc 	#8
.9a54		a8		tay				tay
.9a55		a9 00		lda #$00			lda 	#0 							; and clear all
.9a57						_FFFPPExit:
.9a57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a58						FloatIntegerPart:
.9a58		48		pha				pha
.9a59		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9a5b		f0 1d		beq $9a7a			beq 	_FIPExit 					; if so do nothing
.9a5d		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; is it zero ?
.9a60		f0 15		beq $9a77			beq 	_FIPZero 					; if so return zero.
.9a62		20 b1 9a	jsr $9ab1			jsr 	NSNormalise 				; normalise
.9a65		f0 10		beq $9a77			beq 	_FIPZero 					; normalised to zero, exit zero
.9a67						_FIPShift:
.9a67		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a69		10 07		bpl $9a72			bpl 	_FIPCheckZero
.9a6b		20 5e a3	jsr $a35e			jsr 	NSMShiftRight 				; shift mantissa right
.9a6e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a70		80 f5		bra $9a67			bra 	_FIPShift
.9a72						_FIPCheckZero:
.9a72		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; avoid -0 problem
.9a75		d0 03		bne $9a7a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a77						_FIPZero:
.9a77		20 45 a3	jsr $a345			jsr 	NSMSetZero
.9a7a						_FIPExit:
.9a7a		68		pla				pla
.9a7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a7c						FloatingPointMultiply:
.9a7c		20 a2 9a	jsr $9aa2			jsr 	FloatPrepare 				; prepare for floats
.9a7f						FloatMultiply:
.9a7f		48		pha				pha
.9a80		20 b1 9a	jsr $9ab1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a83		f0 18		beq $9a9d			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a85		e8		inx				inx
.9a86		20 b1 9a	jsr $9ab1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a89		ca		dex				dex
.9a8a		c9 00		cmp #$00			cmp 	#0
.9a8c		f0 0c		beq $9a9a			beq 	_FDSetZero
.9a8e		20 28 96	jsr $9628			jsr 	MultiplyShort 				; calculate the result.
.9a91		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a93		18		clc				clc
.9a94		75 79		adc $79,x			adc 	NSExponent+1,x
.9a96		95 78		sta $78,x			sta 	NSExponent,x
.9a98		80 03		bra $9a9d			bra 	_FDExit
.9a9a						_FDSetZero:
.9a9a		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; return 0
.9a9d						_FDExit:
.9a9d		20 b1 9a	jsr $9ab1			jsr 	NSNormalise 				; normalise the result
.9aa0		68		pla				pla
.9aa1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9aa2						FloatPrepare:
.9aa2		20 ad 9b	jsr $9bad			jsr 	DereferenceTopTwo 			; dereference the top two values
.9aa5		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9aa7		15 51		ora $51,x			ora 	NSStatus+1,x
.9aa9		29 10		and #$10			and 	#NSBIsString
.9aab		d0 01		bne $9aae			bne 	_FDType
.9aad		60		rts				rts
.9aae						_FDType:
.9aae		4c c7 a4	jmp $a4c7			jmp 	TypeError
.9ab1						NSNormalise:
.9ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9ab3		29 80		and #$80			and 	#$80
.9ab5		09 08		ora #$08			ora 	#NSTFloat
.9ab7		95 50		sta $50,x			sta 	NSStatus,x
.9ab9		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; if zero exit
.9abc		d0 07		bne $9ac5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9abe		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9ac0		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9ac2		a9 00		lda #$00			lda 	#0 							; set Z flag
.9ac4		60		rts				rts
.9ac5						_NSNormaliseOptimise:
.9ac5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ac7		d0 19		bne $9ae2			bne 	_NSNormaliseLoop
.9ac9		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9acb		30 15		bmi $9ae2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9acd		95 70		sta $70,x			sta 	NSMantissa3,x
.9acf		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ad1		95 68		sta $68,x			sta 	NSMantissa2,x
.9ad3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ad5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ad7		74 58		stz $58,x			stz 	NSMantissa0,x
.9ad9		b5 78		lda $78,x			lda 	NSExponent,x
.9adb		38		sec				sec
.9adc		e9 08		sbc #$08			sbc 	#8
.9ade		95 78		sta $78,x			sta 	NSExponent,x
.9ae0		80 e3		bra $9ac5			bra 	_NSNormaliseOptimise
.9ae2						_NSNormaliseLoop:
.9ae2		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ae4		70 07		bvs $9aed			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ae6		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; shift mantissa left
.9ae9		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9aeb		80 f5		bra $9ae2			bra 	_NSNormaliseLoop
.9aed						_NSNExit:
.9aed		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9aef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9af0						AssignNumber:
.9af0		5a		phy				phy
.9af1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9af3		85 36		sta $36				sta 	zTemp0
.9af5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9af7		85 37		sta $37				sta 	zTemp0+1
.9af9		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9afb		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9afd		95 50		sta $50,x			sta 	NSStatus,x
.9aff		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9b01		c9 08		cmp #$08			cmp 	#NSTFloat
.9b03		f0 24		beq $9b29			beq 	_ANFloat
.9b05		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9b07		f0 03		beq $9b0c			beq		_ANNotFloat
.9b09		4c c2 a4	jmp $a4c2			jmp 	RangeError					; if it is, report an error.
.9b0c						_ANNotFloat:
.9b0c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9b0e		29 03		and #$03			and 	#3
.9b10		d0 05		bne $9b17			bne 	_ANByteWord
.9b12		20 34 9b	jsr $9b34			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9b15		80 1b		bra $9b32			bra 	_ANExit
.9b17						_ANByteWord:
.9b17		48		pha				pha 								; save count
.9b18		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9b1a		92 36		sta ($36)			sta 	(zTemp0)
.9b1c		68		pla				pla
.9b1d		c9 01		cmp #$01			cmp	 	#1
.9b1f		f0 11		beq $9b32			beq 	_ANExit
.9b21		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9b23		a0 01		ldy #$01			ldy 	#1
.9b25		91 36		sta ($36),y			sta 	(zTemp0),y
.9b27		80 09		bra $9b32			bra 	_ANExit
.9b29						_ANFloat:
.9b29		20 34 9b	jsr $9b34			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9b2c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9b2e		a0 04		ldy #$04			ldy 	#4
.9b30		91 36		sta ($36),y			sta 	(zTemp0),y
.9b32						_ANExit:
.9b32		7a		ply				ply
.9b33		60		rts				rts
.9b34						_ANCopy4PackSign:
.9b34		a0 03		ldy #$03			ldy 	#3
.9b36		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9b38		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9b3a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9b3c		91 36		sta ($36),y			sta 	(zTemp0),y
.9b3e		88		dey				dey
.9b3f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b41		91 36		sta ($36),y			sta 	(zTemp0),y
.9b43		88		dey				dey
.9b44		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b46		91 36		sta ($36),y			sta 	(zTemp0),y
.9b48		88		dey				dey
.9b49		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b4b		91 36		sta ($36),y			sta 	(zTemp0),y
.9b4d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b4e						AssignString:
.9b4e		5a		phy				phy
.9b4f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b51		85 38		sta $38				sta 	zTemp1
.9b53		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b55		85 39		sta $39				sta 	zTemp1+1
.9b57		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b59		85 36		sta $36				sta 	zTemp0
.9b5b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b5d		85 37		sta $37				sta 	zTemp0+1
.9b5f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b61		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b63		f0 23		beq $9b88			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b65		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b66		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b68		e9 02		sbc #$02			sbc 	#2
.9b6a		85 3c		sta $3c				sta 	zsTemp
.9b6c		a0 01		ldy #$01			ldy 	#1
.9b6e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b70		e9 00		sbc #$00			sbc 	#0
.9b72		85 3d		sta $3d				sta 	zsTemp+1
.9b74		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b76						_ASGetLength:
.9b76		c8		iny				iny
.9b77		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b79		d0 fb		bne $9b76			bne 	_ASGetLength
.9b7b		98		tya				tya 								; is this length <= current length
.9b7c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b7e		90 1e		bcc $9b9e			bcc 	_ASCopyString
.9b80		f0 1c		beq $9b9e			beq 	_ASCopyString
.9b82		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b84		a0 01		ldy #$01			ldy 	#1
.9b86		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b88						_ASNewStringRequired:
.9b88		e8		inx				inx 								; concrete the new string.
.9b89		20 13 b5	jsr $b513			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b8c		ca		dex				dex
.9b8d		18		clc				clc
.9b8e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b90		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b92		92 36		sta ($36)			sta 	(zTemp0)
.9b94		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b96		69 00		adc #$00			adc 	#0
.9b98		a0 01		ldy #$01			ldy 	#1
.9b9a		91 36		sta ($36),y			sta 	(zTemp0),y
.9b9c		80 0d		bra $9bab			bra 	_ASExit
.9b9e						_ASCopyString:
.9b9e		a0 00		ldy #$00			ldy 	#0
.9ba0						_ASCopyLoop:
.9ba0		b1 38		lda ($38),y			lda 	(zTemp1),y
.9ba2		c8		iny				iny
.9ba3		c8		iny				iny
.9ba4		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ba6		88		dey				dey
.9ba7		c9 00		cmp #$00			cmp 	#0
.9ba9		d0 f5		bne $9ba0			bne 	_ASCopyLoop
.9bab						_ASExit:
.9bab		7a		ply				ply
.9bac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9bad						DereferenceTopTwo:
.9bad		e8		inx				inx
.9bae		20 b2 9b	jsr $9bb2			jsr 	Dereference 				; deref x+1
.9bb1		ca		dex				dex  								; falls through to deref x
.9bb2						Dereference:
.9bb2		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9bb4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9bb6		f0 48		beq $9c00			beq 	_DRFExit 					; not a reference, so exit.
.9bb8		5a		phy				phy
.9bb9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9bbb		85 36		sta $36				sta 	zTemp0
.9bbd		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bbf		85 37		sta $37				sta 	zTemp0+1
.9bc1		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9bc3		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9bc5		95 58		sta $58,x			sta 	NSMantissa0,x
.9bc7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9bc9		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9bcb		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9bcd		f0 0e		beq $9bdd			beq 	_DRFDereferenceTwo
.9bcf		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9bd1		f0 2f		beq $9c02			beq 	_DRFFull
.9bd3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9bd5		29 03		and #$03			and 	#3
.9bd7		f0 29		beq $9c02			beq 	_DRFFull 					; the whole word
.9bd9		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9bdb		f0 06		beq $9be3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9bdd						_DRFDereferenceTwo:
.9bdd		a0 01		ldy #$01			ldy 	#1
.9bdf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9be1		95 60		sta $60,x			sta 	NSMantissa1,x
.9be3						_DRFClear23:
.9be3		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9be5		74 70		stz $70,x			stz 	NSMantissa3,x
.9be7		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9be9		29 18		and #$18			and 	#NSBTypeMask
.9beb		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9bed		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9bef		d0 0e		bne $9bff			bne 	_DRFNotString
.9bf1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9bf3		15 60		ora $60,x			ora 	NSMantissa1,x
.9bf5		d0 08		bne $9bff			bne 	_DRFNotString
.9bf7		a9 01		lda #$01			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bf9		95 58		sta $58,x			sta 	NSMantissa0,x
.9bfb		a9 9c		lda #$9c			lda 	#_DRFNullString >> 8
.9bfd		95 60		sta $60,x			sta 	NSMantissa1,x
.9bff						_DRFNotString
.9bff		7a		ply				ply 								; restore Y and exit
.9c00						_DRFExit:
.9c00		60		rts				rts
.9c01						_DRFNullString:
>9c01		00						.byte 	0
.9c02						_DRFFull:
.9c02		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9c04		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c06		95 60		sta $60,x			sta 	NSMantissa1,x
.9c08		c8		iny				iny
.9c09		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c0b		95 68		sta $68,x			sta 	NSMantissa2,x
.9c0d		c8		iny				iny
.9c0e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c10		95 70		sta $70,x			sta 	NSMantissa3,x
.9c12		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9c14		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9c16		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9c18		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9c1a		f0 05		beq $9c21			beq 	_DRFNoExponent
.9c1c		c8		iny				iny 								; if not, read the exponent as well.
.9c1d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c1f		95 78		sta $78,x			sta 	NSExponent,x
.9c21						_DRFNoExponent:
.9c21		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9c23		10 0a		bpl $9c2f			bpl 	_DRFExit2 					; if not, then exit.
.9c25		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9c27		95 70		sta $70,x			sta 	NSMantissa3,x
.9c29		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9c2b		09 80		ora #$80			ora 	#NSBIsNegative
.9c2d		95 50		sta $50,x			sta 	NSStatus,x
.9c2f						_DRFExit2:
.9c2f		7a		ply				ply
.9c30		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9c31						EncodeNumberStart:
.9c31		38		sec				sec
.9c32		80 01		bra $9c35			bra 	EncodeNumberContinue+1
.9c34						EncodeNumberContinue:
.9c34		18		clc				clc
.9c35						EncodeNumber:
.9c35		08		php				php 								; save reset flag.
.9c36		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9c38		f0 12		beq $9c4c			beq 	_ENIsOkay
.9c3a		c9 30		cmp #$30			cmp 	#"0"
.9c3c		90 04		bcc $9c42			bcc 	_ENBadNumber
.9c3e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9c40		90 0a		bcc $9c4c			bcc 	_ENIsOkay
.9c42						_ENBadNumber:
.9c42		28		plp				plp 								; throw saved reset
.9c43		ad 25 04	lda $0425			lda 	encodeState 				; if in decimal mode, construct final number
.9c46		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c48		f0 7b		beq $9cc5			beq 	_ENConstructFinal
.9c4a						_ENFail:
.9c4a		18		clc				clc 								; not allowed
.9c4b		60		rts				rts
.9c4c						_ENIsOkay:
.9c4c		28		plp				plp 								; are we restarting
.9c4d		90 15		bcc $9c64			bcc 	_ENNoRestart
.9c4f						_ENStartEncode:
.9c4f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9c51		f0 0c		beq $9c5f			beq 	_ENFirstDP
.9c53		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9c55		20 47 a3	jsr $a347			jsr 	NSMSetByte 					; in single byte mode.
.9c58		a9 01		lda #$01			lda 	#ESTA_Low
.9c5a						_ENExitChange:
.9c5a		8d 25 04	sta $0425			sta 	encodeState 				; save new state
.9c5d		38		sec				sec
.9c5e		60		rts				rts
.9c5f						_ENFirstDP:
.9c5f		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; clear integer part
.9c62		80 3c		bra $9ca0			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c64						_ENNoRestart:
.9c64		48		pha				pha 								; save digit or DP on stack.
.9c65		ad 25 04	lda $0425			lda 	encodeState 				; get current state
.9c68		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c6a		f0 09		beq $9c75			beq  	_ESTALowState
.9c6c		c9 02		cmp #$02			cmp 	#ESTA_High
.9c6e		f0 26		beq $9c96			beq 	_ESTAHighState
.9c70		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c72		f0 38		beq $9cac			beq 	_ESTADecimalState
>9c74		db						.byte 	$DB 						; causes a break in the emulator
.9c75						_ESTALowState:
.9c75		68		pla				pla 								; get value back
.9c76		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c78		f0 26		beq $9ca0			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c7a		29 0f		and #$0f			and 	#15 						; make digit
.9c7c		8d 26 04	sta $0426			sta 	digitTemp 					; save it.
.9c7f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c81		0a		asl a				asl 	a
.9c82		0a		asl a				asl 	a
.9c83		75 58		adc $58,x			adc 	NSMantissa0,x
.9c85		0a		asl a				asl 	a
.9c86		6d 26 04	adc $0426			adc 	digitTemp
.9c89		95 58		sta $58,x			sta 	NSMantissa0,x
.9c8b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c8d		90 05		bcc $9c94			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c8f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c91		8d 25 04	sta $0425			sta 	encodeState
.9c94						_ESTANoSwitch:
.9c94		38		sec				sec
.9c95		60		rts				rts
.9c96						_ESTAHighState:
.9c96		68		pla				pla 								; get value back
.9c97		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c99		f0 05		beq $9ca0			beq 	_ESTASwitchFloat
.9c9b		20 f9 9c	jsr $9cf9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c9e		38		sec				sec
.9c9f		60		rts				rts
.9ca0						_ESTASwitchFloat:
.9ca0		9c 27 04	stz $0427			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9ca3		e8		inx				inx 								; zero the decimal additive.
.9ca4		20 45 a3	jsr $a345			jsr 	NSMSetZero
.9ca7		ca		dex				dex
.9ca8		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9caa		80 ae		bra $9c5a			bra 	_ENExitChange
.9cac						_ESTADecimalState:
.9cac		68		pla				pla 								; digit.
.9cad		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9caf		f0 99		beq $9c4a			beq 	_ENFail
.9cb1		e8		inx				inx 								; put digit into fractional part of X+1
.9cb2		20 f9 9c	jsr $9cf9			jsr 	ESTAShiftDigitIntoMantissa
.9cb5		ca		dex				dex
.9cb6		ee 27 04	inc $0427			inc 	decimalCount 				; bump the count of decimals
.9cb9		ad 27 04	lda $0427			lda 	decimalCount 				; too many decimal digits.
.9cbc		c9 0b		cmp #$0b			cmp 	#11
.9cbe		f0 02		beq $9cc2			beq 	_ESTADSFail
.9cc0		38		sec				sec
.9cc1		60		rts				rts
.9cc2						_ESTADSFail:
.9cc2		4c c2 a4	jmp $a4c2			jmp 	RangeError
.9cc5						_ENConstructFinal:
.9cc5		ad 27 04	lda $0427			lda 	decimalCount 				; get decimal count
.9cc8		f0 2d		beq $9cf7			beq 	_ENCFExit 					; no decimals
.9cca		5a		phy				phy
.9ccb		0a		asl a				asl 	a 							; x 4 and CLC
.9ccc		0a		asl a				asl 	a
.9ccd		6d 27 04	adc $0427			adc 	decimalCount
.9cd0		a8		tay				tay
.9cd1		b9 81 a4	lda $a481,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9cd4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9cd6		b9 82 a4	lda $a482,y			lda 	DecimalScalarTable-5+1,y
.9cd9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9cdb		b9 83 a4	lda $a483,y			lda 	DecimalScalarTable-5+2,y
.9cde		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9ce0		b9 84 a4	lda $a484,y			lda 	DecimalScalarTable-5+3,y
.9ce3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9ce5		b9 85 a4	lda $a485,y			lda 	DecimalScalarTable-5+4,y
.9ce8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9cea		a9 08		lda #$08			lda 	#NSTFloat
.9cec		95 52		sta $52,x			sta 	NSStatus+2,x
.9cee		7a		ply				ply
.9cef		e8		inx				inx 								; multiply decimal const by decimal scalar
.9cf0		20 7f 9a	jsr $9a7f			jsr 	FloatMultiply
.9cf3		ca		dex				dex
.9cf4		20 3a 99	jsr $993a			jsr 	FloatAdd 					; add to integer part.
.9cf7						_ENCFExit:
.9cf7		18		clc				clc 								; reject the digit.
.9cf8		60		rts				rts
.9cf9						ESTAShiftDigitIntoMantissa:
.9cf9		29 0f		and #$0f			and 	#15 						; save digit
.9cfb		48		pha				pha
.9cfc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cfe		48		pha				pha
.9cff		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d01		48		pha				pha
.9d02		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d04		48		pha				pha
.9d05		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d07		48		pha				pha
.9d08		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 2
.9d0b		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 4
.9d0e		18		clc				clc 								; pop mantissa and add
.9d0f		68		pla				pla
.9d10		75 58		adc $58,x			adc 	NSMantissa0,x
.9d12		95 58		sta $58,x			sta 	NSMantissa0,x
.9d14		68		pla				pla
.9d15		75 60		adc $60,x			adc 	NSMantissa1,x
.9d17		95 60		sta $60,x			sta 	NSMantissa1,x
.9d19		68		pla				pla
.9d1a		75 68		adc $68,x			adc 	NSMantissa2,x
.9d1c		95 68		sta $68,x			sta 	NSMantissa2,x
.9d1e		68		pla				pla
.9d1f		75 70		adc $70,x			adc 	NSMantissa3,x
.9d21		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9d23		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 10
.9d26		68		pla				pla 								; add digit
.9d27		18		clc				clc
.9d28		75 58		adc $58,x			adc 	NSMantissa0,x
.9d2a		95 58		sta $58,x			sta 	NSMantissa0,x
.9d2c		90 0a		bcc $9d38			bcc 	_ESTASDExit
.9d2e		f6 60		inc $60,x			inc 	NSMantissa1,x
.9d30		d0 06		bne $9d38			bne 	_ESTASDExit
.9d32		f6 68		inc $68,x			inc 	NSMantissa2,x
.9d34		d0 02		bne $9d38			bne 	_ESTASDExit
.9d36		f6 70		inc $70,x			inc 	NSMantissa3,x
.9d38						_ESTASDExit:
.9d38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9d39						EvaluateTerm:
.9d39		b1 30		lda ($30),y			lda 	(codePtr),y
.9d3b		30 18		bmi $9d55			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d3d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d3f		b0 6c		bcs $9dad			bcs 	_ETVariable
.9d41		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d43		90 6b		bcc $9db0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d45		c9 3a		cmp #$3a			cmp 	#'9'+1
.9d47		b0 67		bcs $9db0			bcs 	_ETPuncUnary
.9d49		20 31 9c	jsr $9c31			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d4c						_ETNumber:
.9d4c		c8		iny				iny 								; keep encoding until we have the numbers
.9d4d		b1 30		lda ($30),y			lda 	(codePtr),y
.9d4f		20 34 9c	jsr $9c34			jsr 	EncodeNumberContinue
.9d52		b0 f8		bcs $9d4c			bcs 	_ETNumber 					; go back if accepted.
.9d54		60		rts				rts
.9d55						_ETCheckUnary:
.9d55		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d57		f0 3f		beq $9d98			beq 	_ETString
.9d59		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d5b		f0 12		beq $9d6f			beq 	_ETHexConstant
.9d5d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d5f		90 0b		bcc $9d6c			bcc 	_ETSyntaxError
.9d61		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d63		b0 07		bcs $9d6c			bcs 	_ETSyntaxError
.9d65		da		phx				phx 								; push X on the stack
.9d66		0a		asl a				asl 	a 							; put vector x 2 into X
.9d67		aa		tax				tax
.9d68		c8		iny				iny 								; consume unary function token
.9d69		7c d2 90	jmp ($90d2,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d6c						_ETSyntaxError:
.9d6c		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.9d6f						_ETHexConstant:
.9d6f		c8		iny				iny 								; skip #
.9d70		c8		iny				iny 								; skip count
.9d71		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; clear result
.9d74						_ETHLoop:
.9d74		b1 30		lda ($30),y			lda 	(codePtr),y
.9d76		c8		iny				iny 								; and consume
.9d77		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d79		f0 1c		beq $9d97			beq 	_ETHExit
.9d7b		48		pha				pha 								; save on stack.
.9d7c		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 2
.9d7f		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 4
.9d82		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 8
.9d85		20 54 a3	jsr $a354			jsr 	NSMShiftLeft 				; x 16
.9d88		68		pla				pla 								; ASCII
.9d89		c9 41		cmp #$41			cmp 	#'A'
.9d8b		90 02		bcc $9d8f			bcc 	_ETHNotChar
.9d8d		e9 07		sbc #$07			sbc 	#7
.9d8f						_ETHNotChar:
.9d8f		29 0f		and #$0f			and 	#15 						; digit now
.9d91		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d93		95 58		sta $58,x			sta 	NSMantissa0,x
.9d95		80 dd		bra $9d74			bra 	_ETHLoop 					; go round.
.9d97						_ETHExit:
.9d97		60		rts				rts
.9d98						_ETString:
.9d98		c8		iny				iny 								; look at length
.9d99		b1 30		lda ($30),y			lda 	(codePtr),y
.9d9b		48		pha				pha
.9d9c		c8		iny				iny 								; first character
.9d9d		20 44 a7	jsr $a744			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9da0		68		pla				pla 								; restore count and save
.9da1		85 36		sta $36				sta 	zTemp0
.9da3		98		tya				tya 								; add length to Y to skip it.
.9da4		18		clc				clc
.9da5		65 36		adc $36				adc 	zTemp0
.9da7		a8		tay				tay
.9da8		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9daa		95 50		sta $50,x			sta 	NSStatus,x
.9dac		60		rts				rts
.9dad						_ETVariable:
.9dad		4c 02 9e	jmp $9e02			jmp 	VariableHandler
.9db0						_ETPuncUnary:
.9db0		c8		iny				iny 								; consume the unary character
.9db1		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9db3		f0 2b		beq $9de0			beq 	_ETUnaryNegate
.9db5		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9db7		f0 36		beq $9def			beq 	_ETDereference
.9db9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9dbb		f0 3e		beq $9dfb			beq 	_ETParenthesis
.9dbd		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9dbf		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9dc1		f0 06		beq $9dc9			beq 	_ETIndirection
.9dc3		e6 36		inc $36				inc 	zTemp0
.9dc5		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9dc7		d0 a3		bne $9d6c			bne 	_ETSyntaxError
.9dc9						_ETIndirection:
.9dc9		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9dcb		1a		inc a				inc 	a
.9dcc		48		pha				pha
.9dcd		20 39 9d	jsr $9d39			jsr 	EvaluateTerm				; evaluate the term
.9dd0		20 b2 9b	jsr $9bb2			jsr 	Dereference 				; dereference it.
.9dd3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9dd5		d0 06		bne $9ddd			bne 	_ETTypeMismatch
.9dd7		68		pla				pla 								; indirection 1-2
.9dd8		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9dda		95 50		sta $50,x			sta 	NSStatus,x
.9ddc		60		rts				rts
.9ddd						_ETTypeMismatch:
.9ddd		4c c7 a4	jmp $a4c7			jmp 	TypeError
.9de0						_ETUnaryNegate:
.9de0		20 39 9d	jsr $9d39			jsr 	EvaluateTerm				; evaluate the term
.9de3		20 b2 9b	jsr $9bb2			jsr 	Dereference 				; dereference it.
.9de6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9de8		29 10		and #$10			and 	#NSTString
.9dea		d0 f1		bne $9ddd			bne 	_ETTypeMismatch
.9dec		4c 07 a3	jmp $a307			jmp 	NSMNegate  					; just toggles the sign bit.
.9def						_ETDereference:
.9def		20 39 9d	jsr $9d39			jsr 	EvaluateTerm				; evaluate the term
.9df2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9df4		29 20		and #$20			and 	#NSBIsReference
.9df6		f0 e5		beq $9ddd			beq 	_ETTypeMismatch
.9df8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9dfa		60		rts				rts
.9dfb						_ETParenthesis:
.9dfb		20 ef 98	jsr $98ef			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9dfe		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check for )
.9e01		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9e02						VariableHandler:
.9e02		b1 30		lda ($30),y			lda 	(codePtr),y
.9e04		18		clc				clc
.9e05		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e07		85 37		sta $37				sta 	zTemp0+1
.9e09		c8		iny				iny
.9e0a		b1 30		lda ($30),y			lda 	(codePtr),y
.9e0c		85 36		sta $36				sta 	zTemp0
.9e0e		c8		iny				iny
.9e0f		18		clc				clc									; copy variable address+3 to mantissa
.9e10		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9e12		95 58		sta $58,x			sta 	NSMantissa0,x
.9e14		a5 37		lda $37				lda 	zTemp0+1
.9e16		69 00		adc #$00			adc 	#0
.9e18		95 60		sta $60,x			sta 	NSMantissa1,x
.9e1a		74 68		stz $68,x			stz 	NSMantissa2,x
.9e1c		74 70		stz $70,x			stz 	NSMantissa3,x
.9e1e		74 78		stz $78,x			stz 	NSExponent,x
.9e20		5a		phy				phy
.9e21		a0 02		ldy #$02			ldy 	#2 							; read type
.9e23		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e25		7a		ply				ply
.9e26		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9e28		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9e2a		95 50		sta $50,x			sta 	NSStatus,x
.9e2c		29 04		and #$04			and 	#NSBIsArray
.9e2e		d0 01		bne $9e31			bne 	_VHArray
.9e30		60		rts				rts
.9e31						_VHArray:
.9e31		e8		inx				inx
.9e32		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9e35		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9e37		95 51		sta $51,x			sta 	NSStatus+1,x
.9e39		b1 30		lda ($30),y			lda 	(codePtr),y
.9e3b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e3d		d0 06		bne $9e45			bne 	_VHNoSecondIndex
.9e3f		c8		iny				iny 								; skip the comma
.9e40		e8		inx				inx
.9e41		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e44		ca		dex				dex
.9e45						_VHNoSecondIndex:
.9e45		ca		dex				dex 								; set X back.
.9e46		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; and check the right bracket.
.9e49		5a		phy				phy 								; save position
.9e4a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9e4c		85 3e		sta $3e				sta 	zaTemp
.9e4e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e50		85 3f		sta $3f				sta 	zaTemp+1
.9e52		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9e54		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e56		f0 5d		beq $9eb5			beq 	_VHBadArray
.9e58		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e5a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e5c		f0 02		beq $9e60			beq 	_VHHas2Mask
.9e5e		a9 ff		lda #$ff			lda 	#$FF
.9e60						_VHHas2Mask:
.9e60		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e62		f0 4c		beq $9eb0			beq 	_VHBadIndex
.9e64		0a		asl a				asl 	a 							; carry will be set if a second index
.9e65		90 08		bcc $9e6f			bcc 	_VHCheckFirstIndex
.9e67		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e69		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e6b		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e6d		90 41		bcc $9eb0			bcc 	_VHBadIndex
.9e6f						_VHCheckFirstIndex:
.9e6f		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e71		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e73		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e75		90 39		bcc $9eb0			bcc 	_VHBadIndex
.9e77		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e79		64 37		stz $37				stz 	zTemp0+1
.9e7b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e7d		30 0e		bmi $9e8d			bmi 	_VHNoMultiply
.9e7f		da		phx				phx
.9e80		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e82		48		pha				pha
.9e83		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e85		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e87		1a		inc a				inc 	a 							; add 1 for zero base
.9e88		fa		plx				plx
.9e89		20 f0 a2	jsr $a2f0			jsr 	Multiply8x8 				; calculate -> Z0
.9e8c		fa		plx				plx
.9e8d						_VHNoMultiply:
.9e8d		18		clc				clc
.9e8e		a5 36		lda $36				lda 	zTemp0
.9e90		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e92		85 36		sta $36				sta 	zTemp0
.9e94		a5 37		lda $37				lda 	zTemp0+1
.9e96		69 00		adc #$00			adc 	#0
.9e98		85 37		sta $37				sta 	zTemp0+1
.9e9a		b5 50		lda $50,x			lda 	NSStatus,x
.9e9c		20 65 89	jsr $8965			jsr 	ScaleByBaseType
.9e9f		18		clc				clc
.9ea0		b2 3e		lda ($3e)			lda 	(zaTemp)
.9ea2		65 36		adc $36				adc 	zTemp0
.9ea4		95 58		sta $58,x			sta 	NSMantissa0,x
.9ea6		a0 01		ldy #$01			ldy 	#1
.9ea8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9eaa		65 37		adc $37				adc 	zTemp0+1
.9eac		95 60		sta $60,x			sta 	NSMantissa1,x
.9eae		7a		ply				ply 								; restore position
.9eaf		60		rts				rts
.9eb0						_VHBadIndex:
.9eb0		a9 17		lda #$17		lda	#23
.9eb2		4c e5 93	jmp $93e5		jmp	ErrorHandler
.9eb5						_VHBadArray:
.9eb5		a9 18		lda #$18		lda	#24
.9eb7		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9eba						AbsUnary:
.9eba		fa		plx				plx 								; restore stack pos
.9ebb		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; get a float or int
.9ebe		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9ec1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9ec3		29 7f		and #$7f			and 	#$7F
.9ec5		95 50		sta $50,x			sta 	NSStatus,x
.9ec7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9ec8						AllocUnary:
.9ec8		fa		plx				plx 								; restore stack pos
.9ec9		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger		; get bytes required.
.9ecc		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9ecf		da		phx				phx 								; save X/Y
.9ed0		5a		phy				phy
.9ed1		8a		txa				txa 								; copy X into Y
.9ed2		a8		tay				tay
.9ed3		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ed6		aa		tax				tax
.9ed7		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9eda		20 e7 9e	jsr $9ee7			jsr 	AllocateXABytes 			; allocate memory
.9edd		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9ee0		8a		txa				txa 	 							; typing is 16 bit integer.
.9ee1		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9ee4		7a		ply				ply
.9ee5		fa		plx				plx
.9ee6		60		rts				rts
.9ee7						AllocateXABytes:
.9ee7		5a		phy				phy
.9ee8		ac 28 04	ldy $0428			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9eeb		84 36		sty $36				sty 	zTemp0
.9eed		5a		phy				phy
.9eee		ac 29 04	ldy $0429			ldy 	lowMemPtr+1
.9ef1		84 37		sty $37				sty 	zTemp0+1
.9ef3		5a		phy				phy
.9ef4		18		clc				clc 								; add to low memory pointer
.9ef5		6d 28 04	adc $0428			adc 	lowMemPtr
.9ef8		8d 28 04	sta $0428			sta 	lowMemPtr
.9efb		8a		txa				txa
.9efc		6d 29 04	adc $0429			adc 	lowMemPtr+1
.9eff		8d 29 04	sta $0429			sta 	lowMemPtr+1
.9f02		b0 2f		bcs $9f33			bcs 	CISSMemory
.9f04		20 25 9f	jsr $9f25			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9f07						_ClearMemory:
.9f07		ad 28 04	lda $0428			lda 	lowMemPtr 					; cleared all memory allocated
.9f0a		c5 36		cmp $36				cmp 	zTemp0
.9f0c		d0 07		bne $9f15			bne 	_CMClearNext
.9f0e		ad 29 04	lda $0429			lda 	lowMemPtr+1
.9f11		c5 37		cmp $37				cmp 	zTemp0+1
.9f13		f0 0c		beq $9f21			beq 	_CMExit
.9f15						_CMClearNext:
.9f15		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9f17		92 36		sta ($36)			sta 	(zTemp0)
.9f19		e6 36		inc $36				inc 	zTemp0
.9f1b		d0 ea		bne $9f07			bne 	_ClearMemory
.9f1d		e6 37		inc $37				inc		zTemp0+1
.9f1f		80 e6		bra $9f07			bra 	_ClearMemory
.9f21						_CMExit:
.9f21		fa		plx				plx
.9f22		68		pla				pla
.9f23		7a		ply				ply
.9f24		60		rts				rts
.9f25						CheckIdentifierStringSpace:
.9f25		48		pha				pha
.9f26		ad 29 04	lda $0429			lda 	lowMemPtr+1 				; get low memory pointer
.9f29		18		clc				clc
.9f2a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9f2c		cd 2b 04	cmp $042b			cmp 	stringMemory+1 				; is it >= StringMemory
.9f2f		b0 02		bcs $9f33			bcs 	CISSMemory
.9f31		68		pla				pla
.9f32		60		rts				rts
.9f33						CISSMemory:
.9f33		a9 06		lda #$06		lda	#6
.9f35		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9f38						AscUnary:
.9f38		fa		plx				plx 								; restore stack pos
.9f39		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; get a string
.9f3c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9f3e		20 47 a3	jsr $a347			jsr 	NSMSetByte 					; ASC("") will return zero.
.9f41		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9f44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9f45						FracUnary:
.9f45		fa		plx				plx 								; restore stack pos
.9f46		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; get a float or int
.9f49		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9f4c		b5 50		lda $50,x			lda 	NSStatus,x
.9f4e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f50		f0 04		beq $9f56			beq 	_IUZero
.9f52		20 00 9a	jsr $9a00			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9f55		60		rts				rts
.9f56						_IUZero:
.9f56		20 45 a3	jsr $a345			jsr 	NSMSetZero
.9f59		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f5a						IntUnary:
.9f5a		fa		plx				plx 								; restore stack pos
.9f5b		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; get a float or int
.9f5e		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9f61		b5 50		lda $50,x			lda 	NSStatus,x
.9f63		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f65		f0 03		beq $9f6a			beq 	_IUExit
.9f67		20 58 9a	jsr $9a58			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f6a						_IUExit:
.9f6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f6b						LenUnary:
.9f6b		fa		plx				plx 								; restore stack pos
.9f6c		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; get a string
.9f6f		5a		phy				phy
.9f70		a0 00		ldy #$00			ldy 	#0 							; find length
.9f72						_LenFind:
.9f72		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f74		f0 06		beq $9f7c			beq 	_LenExit
.9f76		c8		iny				iny
.9f77		d0 f9		bne $9f72			bne 	_LenFind
.9f79		4c c2 a4	jmp $a4c2			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f7c						_LenExit:
.9f7c		98		tya				tya		 							; return length
.9f7d		20 47 a3	jsr $a347			jsr 	NSMSetByte
.9f80		7a		ply				ply
.9f81		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9f84		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f85						Unary_Min:
.9f85		a9 01		lda #$01			lda 	#1
.9f87		80 02		bra $9f8b			bra 	UnaryMinMaxMain
.9f89						Unary_Max:
.9f89		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f8b						UnaryMinMaxMain:
.9f8b		fa		plx				plx 								; get index on number stack
.9f8c		48		pha				pha 								; save comparator
.9f8d		20 8a a2	jsr $a28a			jsr 	EvaluateValue 				; get the first value.
.9f90						_UMMMLoop:
.9f90		b1 30		lda ($30),y			lda 	(codePtr),y
.9f92		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f94		f0 22		beq $9fb8			beq 	_UMMMDone
.9f96		20 d4 93	jsr $93d4			jsr 	CheckComma 					; must be a comma
.9f99		e8		inx				inx
.9f9a		20 8a a2	jsr $a28a			jsr 	EvaluateValue
.9f9d		ca		dex				dex
.9f9e		20 28 a3	jsr $a328			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9fa1		e8		inx				inx
.9fa2		20 28 a3	jsr $a328			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9fa5		e8		inx				inx
.9fa6		20 a2 94	jsr $94a2			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9fa9		ca		dex				dex
.9faa		ca		dex				dex
.9fab		85 36		sta $36				sta 	zTemp0 						; save required result
.9fad		68		pla				pla 								; get and save comparator
.9fae		48		pha				pha
.9faf		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9fb1		d0 dd		bne $9f90			bne 	_UMMMLoop
.9fb3		20 bb 9f	jsr $9fbb			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9fb6		80 d8		bra $9f90			bra 	_UMMMLoop
.9fb8						_UMMMDone:
.9fb8		68		pla				pla 								; throw the comparator
.9fb9		c8		iny				iny 								; skip )
.9fba		60		rts				rts
.9fbb						ExpCopyAboveDown:
.9fbb		b5 51		lda $51,x			lda 	NSStatus+1,x
.9fbd		95 50		sta $50,x			sta 	NSStatus,x
.9fbf		b5 79		lda $79,x			lda 	NSExponent+1,x
.9fc1		95 78		sta $78,x			sta 	NSExponent,x
.9fc3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9fc5		95 58		sta $58,x			sta 	NSMantissa0,x
.9fc7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9fc9		95 60		sta $60,x			sta 	NSMantissa1,x
.9fcb		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9fcd		95 68		sta $68,x			sta 	NSMantissa2,x
.9fcf		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9fd1		95 70		sta $70,x			sta 	NSMantissa3,x
.9fd3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9fd4						Unary_Not:
.9fd4		fa		plx				plx
.9fd5		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; get integer
.9fd8		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9fdb		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; zero mantissa ?
.9fde		f0 04		beq $9fe4			beq 	_NotZero
.9fe0		20 45 a3	jsr $a345			jsr 	NSMSetZero
.9fe3		60		rts				rts
.9fe4						_NotZero:
.9fe4		4c 58 94	jmp $9458			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9fe7						PeekByteUnary:
.9fe7		a9 01		lda #$01			lda 	#1
.9fe9		80 0a		bra $9ff5			bra 	PeekUnary
.9feb						PeekWUnary:
.9feb		a9 02		lda #$02			lda 	#2
.9fed		80 06		bra $9ff5			bra 	PeekUnary
.9fef						PeekLUnary:
.9fef		a9 03		lda #$03			lda 	#3
.9ff1		80 02		bra $9ff5			bra 	PeekUnary
.9ff3						PeekDUnary:
.9ff3		a9 04		lda #$04			lda 	#4
.9ff5						PeekUnary:
.9ff5		fa		plx				plx 								; restore position.
.9ff6		48		pha				pha 								; save count to copy on stack
.9ff7		20 c5 a2	jsr $a2c5			jsr		Evaluate16BitInteger 		; address as constant.
.9ffa		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.9ffd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fff		85 36		sta $36				sta 	zTemp0
.a001		b5 60		lda $60,x			lda 	NSMantissa1,x
.a003		85 37		sta $37				sta 	zTemp0+1
.a005		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; clear the result to zero.
.a008		68		pla				pla 								; count in zTemp2
.a009		85 3a		sta $3a				sta 	zTemp2
.a00b		da		phx				phx 								; save stack position and offset of read
.a00c		5a		phy				phy
.a00d		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a00f						_PULoop:
.a00f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a011		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a013		c8		iny				iny 								; next byte to write
.a014		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a015		18		clc				clc
.a016		69 08		adc #$08			adc 	#MathStackSize
.a018		aa		tax				tax
.a019		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a01b		d0 f2		bne $a00f			bne 	_PULoop
.a01d		7a		ply				ply 								; restore stack/code pos and exit.
.a01e		fa		plx				plx
.a01f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a020						SgnUnary:
.a020		fa		plx				plx 								; restore stack pos
.a021		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; get a float or int
.a024		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.a027		20 67 a3	jsr $a367			jsr 	NSMIsZero 					; if zero
.a02a		f0 0e		beq $a03a			beq 	_SGZero  					; return Int Zero
.a02c		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a02e		48		pha				pha
.a02f		a9 01		lda #$01			lda 	#1 							; set to 1
.a031		20 47 a3	jsr $a347			jsr 	NSMSetByte
.a034		68		pla				pla
.a035		29 80		and #$80			and		#$80 						; copy the sign byte out
.a037		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a039		60		rts				rts
.a03a		20 45 a3	jsr $a345	_SGZero:jsr 	NSMSetZero
.a03d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a03e						ValUnary:
.a03e		fa		plx				plx 								; restore stack pos
.a03f		20 54 a0	jsr $a054			jsr 	ValMainCode 				; do the main val() code
.a042		b0 01		bcs $a045			bcs 	_VUError 					; couldn't convert
.a044		60		rts				rts
.a045						_VUError:
.a045		4c c7 a4	jmp $a4c7			jmp 	TypeError
.a048						IsValUnary:
.a048		fa		plx				plx 								; restore stack pos
.a049		20 54 a0	jsr $a054			jsr 	ValMainCode 				; do the main val() code
.a04c		b0 03		bcs $a051			bcs 	_VUBad
.a04e		4c 58 94	jmp $9458			jmp 	ReturnTrue
.a051						_VUBad:
.a051		4c 63 94	jmp $9463			jmp 	ReturnFalse
.a054						ValMainCode:
.a054		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; get a string
.a057		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check right bracket present
.a05a						ValEvaluateZTemp0:
.a05a		5a		phy				phy
.a05b		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a05d		f0 17		beq $a076			beq 	_VMCFail2
.a05f		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a061		48		pha				pha 								; save first character
.a062		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a064		d0 01		bne $a067			bne 	_VMCStart
.a066		c8		iny				iny 								; skip over -
.a067						_VMCStart:
.a067		38		sec				sec 								; initialise first time round.
.a068						_VMCNext:
.a068		c8		iny				iny 								; pre-increment
.a069		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a06b		f0 0c		beq $a079			beq 	_VMCSuccess 				; successful.
.a06d		20 35 9c	jsr $9c35			jsr 	EncodeNumber 				; send it to the number-builder
.a070		90 03		bcc $a075			bcc 	_VMCFail 					; if failed, give up.
.a072		18		clc				clc 								; next time round, countinue
.a073		80 f3		bra $a068			bra 	_VMCNext
.a075						_VMCFail:
.a075		68		pla				pla
.a076						_VMCFail2:
.a076		7a		ply				ply
.a077		38		sec				sec
.a078		60		rts				rts
.a079						_VMCSuccess:
.a079		a9 00		lda #$00			lda 	#0 							; construct final
.a07b		20 35 9c	jsr $9c35			jsr 	EncodeNumber 				; by sending a duff value.
.a07e		68		pla				pla 								; if it was -ve
.a07f		c9 2d		cmp #$2d			cmp 	#"-"
.a081		d0 03		bne $a086			bne 	_VMCNotNegative
.a083		20 07 a3	jsr $a307			jsr		NSMNegate 					; negate it.
.a086						_VMCNotNegative:
.a086		7a		ply				ply
.a087		18		clc				clc
.a088		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a089						ChrUnary:
.a089		fa		plx				plx 								; restore stack pos
.a08a		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a08d		48		pha				pha
.a08e		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.a091		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a093		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.a096		68		pla				pla 								; write number to it
.a097		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.a09a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a09b						ItemCountUnary:
.a09b		fa		plx				plx
.a09c		20 9d a2	jsr $a29d			jsr 	EvaluateString
.a09f		e8		inx				inx
.a0a0		20 13 a1	jsr $a113			jsr 	ICGetSeperator
.a0a3		ca		dex				dex
.a0a4		20 34 a1	jsr $a134			jsr 	ICSetPointer 				; zTemp0 = (string)
.a0a7		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; zero the result.
.a0aa		5a		phy				phy
.a0ab		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a0ad						_ICULoop:
.a0ad		c8		iny				iny
.a0ae		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b0		cd c7 07	cmp $07c7			cmp 	ICSeperator
.a0b3		d0 02		bne $a0b7			bne 	_ICUNoMatch
.a0b5		f6 58		inc $58,x			inc 	NSMantissa0,x
.a0b7						_ICUNoMatch:
.a0b7		c9 00		cmp #$00			cmp 	#0
.a0b9		d0 f2		bne $a0ad			bne 	_ICULoop
.a0bb		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a0bd		7a		ply				ply
.a0be		60		rts				rts
.a0bf						ItemGetUnary:
.a0bf		fa		plx				plx
.a0c0		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; search string
.a0c3		20 d4 93	jsr $93d4			jsr 	CheckComma
.a0c6		e8		inx				inx 								; get count
.a0c7		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.a0ca		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a0cc		f0 61		beq $a12f			beq 	ICGSRange
.a0ce		e8		inx				inx 								; get seperator.
.a0cf		20 13 a1	jsr $a113			jsr 	ICGetSeperator
.a0d2		ca		dex				dex
.a0d3		ca		dex				dex
.a0d4		5a		phy				phy
.a0d5		20 34 a1	jsr $a134			jsr 	ICSetPointer 				; zTemp0 points to string.
.a0d8		a0 00		ldy #$00			ldy 	#0
.a0da		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a0dc		f0 0e		beq $a0ec			beq 	_IGUFoundStart
.a0de						_IGUFindNext:
.a0de		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a0e0		f0 4d		beq $a12f			beq 	ICGSRange 					; eol, not found.
.a0e2		c8		iny				iny
.a0e3		cd c7 07	cmp $07c7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a0e6		d0 f6		bne $a0de			bne 	_IGUFindNext
.a0e8		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a0ea		d0 f2		bne $a0de			bne 	_IGUFindNext
.a0ec						_IGUFoundStart:
.a0ec		84 38		sty $38				sty 	zTemp1 						; save start
.a0ee		88		dey				dey
.a0ef						_IGUFindLength:
.a0ef		c8		iny				iny 								; forward till seperator/EOS
.a0f0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0f2		f0 05		beq $a0f9			beq 	_IGUFoundLength
.a0f4		cd c7 07	cmp $07c7			cmp 	ICSeperator
.a0f7		d0 f6		bne $a0ef			bne 	_IGUFindLength
.a0f9						_IGUFoundLength:
.a0f9		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a0fb		98		tya				tya 								; calculate length of new string.
.a0fc		38		sec				sec
.a0fd		e5 38		sbc $38				sbc 	zTemp1
.a0ff		20 90 b5	jsr $b590			jsr 	StringTempAllocate 			; allocate bytes for it.
.a102		a4 38		ldy $38				ldy 	zTemp1
.a104						_IGUCopySub:
.a104		c4 39		cpy $39				cpy 	zTemp1+1
.a106		f0 08		beq $a110			beq 	_IGUCopyOver
.a108		b1 36		lda ($36),y			lda 	(zTemp0),y
.a10a		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.a10d		c8		iny				iny
.a10e		80 f4		bra $a104			bra 	_IGUCopySub
.a110						_IGUCopyOver:
.a110		7a		ply				ply
.a111		60		rts				rts
>a112		db						.byte 	$DB 						; causes a break in the emulator
.a113						ICGetSeperator:
.a113		20 d4 93	jsr $93d4			jsr 	CheckComma 					; preceding comma
.a116		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; seperator string
.a119		20 34 a1	jsr $a134			jsr 	ICSetPointer 				; access it
.a11c		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a11e		8d c7 07	sta $07c7			sta 	ICSeperator
.a121		f0 0c		beq $a12f			beq 	ICGSRange 					; check LEN(seperator) = 1
.a123		5a		phy				phy
.a124		a0 01		ldy #$01			ldy 	#1
.a126		b1 36		lda ($36),y			lda 	(zTemp0),y
.a128		d0 05		bne $a12f			bne 	ICGSRange
.a12a		7a		ply				ply
.a12b		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check following )
.a12e		60		rts				rts
.a12f						ICGSRange:
.a12f		a9 04		lda #$04		lda	#4
.a131		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a134						ICSetPointer:
.a134		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a136		85 36		sta $36				sta 	zTemp0
.a138		b5 60		lda $60,x			lda 	NSMantissa1,x
.a13a		85 37		sta $37				sta 	zTemp0+1
.a13c		60		rts				rts
.07c7						ICSeperator:
>07c7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a13d						SpcUnary:
.a13d		fa		plx				plx 								; restore stack pos
.a13e		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger			; get value
.a141		5a		phy				phy
.a142		48		pha				pha 								; save count
.a143		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.a146		7a		ply				ply 								; to do count in Y
.a147						_SpcLoop:
.a147		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a149		f0 08		beq $a153			beq 	_SpcExit
.a14b		a9 20		lda #$20			lda 	#32
.a14d		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.a150		88		dey				dey
.a151		80 f4		bra $a147			bra 	_SpcLoop
.a153						_SpcExit:
.a153		7a		ply				ply
.a154		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.a157		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a158						Unary_Str:
.a158		fa		plx				plx
.a159		20 93 a2	jsr $a293			jsr 	EvaluateNumber  			; get number
.a15c		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; closing bracket
.a15f		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a161		20 7a a1	jsr $a17a			jsr 	ConvertNumberToString 		; do the conversion.
.a164		a9 21		lda #$21			lda		#33 						; create buffer
.a166		20 90 b5	jsr $b590			jsr 	StringTempAllocate 			; allocate memory
.a169		da		phx				phx  								; copy the converted string into the buffer.
.a16a		a2 00		ldx #$00			ldx 	#0
.a16c						_USCopy:
.a16c		bd 65 06	lda $0665,x			lda 	decimalBuffer,x
.a16f		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.a172		e8		inx				inx
.a173		bd 65 06	lda $0665,x			lda 	decimalBuffer,x
.a176		d0 f4		bne $a16c			bne 	_USCopy
.a178		fa		plx				plx
.a179		60		rts				rts
.a17a						ConvertNumberToString:
.a17a		5a		phy				phy 								; save code position
.a17b		8d 30 04	sta $0430			sta 	decimalPlaces	 			; save number of DPs.
.a17e		9c 31 04	stz $0431			stz 	dbOffset 					; offset into decimal buffer = start.
.a181		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a183		10 09		bpl $a18e			bpl 	_CNTSNotNegative
.a185		29 7f		and #$7f			and 	#$7F 						; make +ve
.a187		95 50		sta $50,x			sta 	NSStatus,x
.a189		a9 2d		lda #$2d			lda 	#"-"
.a18b		20 ef a1	jsr $a1ef			jsr 	WriteDecimalBuffer
.a18e						_CNTSNotNegative:
.a18e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a190		f0 12		beq $a1a4			beq 	_CNTSNotFloat
.a192		e8		inx				inx 								; round up so we don't get too many 6.999999
.a193		a9 01		lda #$01			lda 	#1
.a195		20 47 a3	jsr $a347			jsr 	NSMSetByte
.a198		ca		dex				dex
.a199		b5 78		lda $78,x			lda		NSExponent,x
.a19b		95 79		sta $79,x			sta 	NSExponent+1,x
.a19d		a9 08		lda #$08			lda 	#NSTFloat
.a19f		95 51		sta $51,x			sta 	NSStatus+1,x
.a1a1		20 3a 99	jsr $993a			jsr 	FloatAdd
.a1a4						_CNTSNotFloat:
.a1a4		20 d1 a1	jsr $a1d1			jsr 	MakePlusTwoString 			; do the integer part.
.a1a7		20 00 9a	jsr $9a00			jsr 	FloatFractionalPart 		; get the fractional part
.a1aa		20 b1 9a	jsr $9ab1			jsr 	NSNormalise					; normalise , exit if zero
.a1ad		f0 20		beq $a1cf			beq 	_CNTSExit
.a1af		a9 2e		lda #$2e			lda 	#"."
.a1b1		20 ef a1	jsr $a1ef			jsr 	WriteDecimalBuffer 			; write decimal place
.a1b4						_CNTSDecimal:
.a1b4		ce 30 04	dec $0430			dec 	decimalPlaces 				; done all the decimals
.a1b7		30 16		bmi $a1cf			bmi 	_CNTSExit
.a1b9		e8		inx				inx 								; x 10.0
.a1ba		a9 0a		lda #$0a			lda 	#10
.a1bc		20 47 a3	jsr $a347			jsr 	NSMSetByte
.a1bf		a9 08		lda #$08			lda 	#NSTFloat
.a1c1		95 50		sta $50,x			sta 	NSStatus,x
.a1c3		ca		dex				dex
.a1c4		20 7f 9a	jsr $9a7f			jsr 	FloatMultiply
.a1c7		20 d1 a1	jsr $a1d1			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a1ca		20 00 9a	jsr $9a00			jsr 	FloatFractionalPart 		; get the fractional part
.a1cd		80 e5		bra $a1b4			bra 	_CNTSDecimal 				; keep going.
.a1cf						_CNTSExit:
.a1cf		7a		ply				ply
.a1d0		60		rts				rts
.a1d1						MakePlusTwoString:
.a1d1		da		phx				phx
.a1d2		20 28 a3	jsr $a328			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a1d5		e8		inx				inx 								; access it
.a1d6		e8		inx				inx
.a1d7		20 58 9a	jsr $9a58			jsr 	FloatIntegerPart 			; make it an integer
.a1da		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a1dc		20 6a 98	jsr $986a			jsr 	ConvertInt32
.a1df		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a1e1						_MPTSCopy:
.a1e1		bd 43 06	lda $0643,x			lda 	numberBuffer,x
.a1e4		20 ef a1	jsr $a1ef			jsr 	WriteDecimalBuffer
.a1e7		e8		inx				inx
.a1e8		bd 43 06	lda $0643,x			lda 	numberBuffer,x
.a1eb		d0 f4		bne $a1e1			bne 	_MPTSCopy
.a1ed		fa		plx				plx
.a1ee		60		rts				rts
.a1ef						WriteDecimalBuffer:
.a1ef		da		phx				phx
.a1f0		ae 31 04	ldx $0431			ldx 	dbOffset
.a1f3		9d 65 06	sta $0665,x			sta 	decimalBuffer,x
.a1f6		9e 66 06	stz $0666,x			stz 	decimalBuffer+1,x
.a1f9		ee 31 04	inc $0431			inc 	dbOffset
.a1fc		fa		plx				plx
.a1fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1fe						Unary_Left:
.a1fe		fa		plx				plx
.a1ff		18		clc				clc 								; only one parameter
.a200		20 63 a2	jsr $a263			jsr 	SubstringInitial 			; set up.
.a203		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a205		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a207		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a209		80 25		bra $a230			bra 	SubstringMain
.a20b						Unary_Right:
.a20b		fa		plx				plx
.a20c		18		clc				clc 								; only one parameter
.a20d		20 63 a2	jsr $a263			jsr 	SubstringInitial 			; set up.
.a210		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a212		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a214		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a216		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a218		b0 02		bcs $a21c			bcs 	_URNotUnderflow
.a21a		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a21c						_URNotUnderflow:
.a21c		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a21e		80 10		bra $a230			bra 	SubstringMain
.a220						Unary_Mid:
.a220		fa		plx				plx
.a221		38		sec				sec 								; two parameters
.a222		20 63 a2	jsr $a263			jsr 	SubstringInitial 			; set up.
.a225		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a227		f0 04		beq $a22d			beq 	_UMError
.a229		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a22b		80 03		bra $a230			bra 	SubstringMain
.a22d						_UMError:
.a22d		4c cc a4	jmp $a4cc			jmp 	ArgumentError
.a230						SubstringMain:
.a230		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a232		d5 78		cmp $78,x			cmp 	NSExponent,x
.a234		b0 27		bcs $a25d			bcs 	_SSMNull 					; if so, return an empty string.
.a236		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a238		f0 23		beq $a25d			beq 	_SSMNull 					; return empty string.
.a23a		18		clc				clc 								; add the offset +1 to the address and
.a23b		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a23d		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a23f		85 36		sta $36				sta 	zTemp0
.a241		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a243		69 00		adc #$00			adc 	#0
.a245		85 37		sta $37				sta 	zTemp0+1
.a247						_SSMNoCarry:
.a247		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a249		20 90 b5	jsr $b590			jsr 	StringTempAllocate 			; allocate that many characters
.a24c		5a		phy				phy 								; save Y
.a24d		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a24f						_SSMCopy:
.a24f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a251		f0 08		beq $a25b			beq 	_SSMEString 				; no more to copy
.a253		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite 			; and write it out.
.a256		c8		iny				iny
.a257		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a259		d0 f4		bne $a24f			bne 	_SSMCopy
.a25b						_SSMEString:
.a25b		7a		ply				ply
.a25c						_SSMExit:
.a25c		60		rts				rts
.a25d						_SSMNull:
.a25d		a9 00		lda #$00			lda 	#0
.a25f		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.a262		60		rts				rts
.a263						SubstringInitial:
.a263		da		phx				phx 								; save initial stack position
.a264		08		php				php 								; save carry on stack indicating 2 parameters
.a265		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; get a string
.a268		5a		phy				phy 								; calculate length to exponent.
.a269		a0 ff		ldy #$ff			ldy 	#$FF
.a26b						_SIFindLength:
.a26b		c8		iny				iny
.a26c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a26e		d0 fb		bne $a26b			bne 	_SIFindLength
.a270		98		tya				tya
.a271		95 78		sta $78,x			sta 	NSExponent,x
.a273		7a		ply				ply
.a274		e8		inx				inx
.a275		20 d4 93	jsr $93d4			jsr 	CheckComma 					; comma next
.a278		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get next parameter
.a27b		28		plp				plp 								; is it the last parameter ?
.a27c		90 07		bcc $a285			bcc 	_SSIExit 					; if so, exit.
.a27e		e8		inx				inx
.a27f		20 d4 93	jsr $93d4			jsr 	CheckComma 					; comma next
.a282		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get last parameter
.a285						_SSIExit:
.a285		fa		plx				plx
.a286		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check closing bracket
.a289		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a28a						EvaluateValue:
.a28a		48		pha				pha
.a28b		20 ef 98	jsr $98ef			jsr		EvaluateExpression 			; expression
.a28e		20 b2 9b	jsr $9bb2			jsr 	Dereference					; derefernce it
.a291		68		pla				pla
.a292		60		rts				rts
.a293						EvaluateNumber:
.a293		20 8a a2	jsr $a28a			jsr 	EvaluateValue 				; get a value
.a296		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a298		29 10		and #$10			and 	#NSBIsString
.a29a		d0 13		bne $a2af			bne 	HelperTypeError
.a29c		60		rts				rts
.a29d						EvaluateString:
.a29d		20 8a a2	jsr $a28a			jsr 	EvaluateValue 				; get a value
.a2a0		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a2a2		29 10		and #$10			and 	#NSBIsString
.a2a4		f0 09		beq $a2af			beq 	HelperTypeError
.a2a6						CopyAddressToTemp0:
.a2a6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a2a8		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a2aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2ac		85 37		sta $37				sta 	zTemp0+1
.a2ae		60		rts				rts
.a2af						HelperTypeError:
.a2af		4c c7 a4	jmp $a4c7			jmp 	TypeError
.a2b2						EvaluateInteger:
.a2b2		20 93 a2	jsr $a293			jsr 	EvaluateNumber
.a2b5		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a2b7		d0 09		bne $a2c2			bne 	HelperValueError 			; if not, it's a float.
.a2b9		60		rts				rts
.a2ba						EvaluateUnsignedInteger:
.a2ba		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; check integer is +ve
.a2bd		b5 50		lda $50,x			lda 	NSStatus,x
.a2bf		30 01		bmi $a2c2			bmi 	HelperValueError
.a2c1		60		rts				rts
.a2c2						HelperValueError:
.a2c2		4c cc a4	jmp $a4cc			jmp 	ArgumentError
.a2c5						Evaluate16BitInteger:
.a2c5		20 ba a2	jsr $a2ba			jsr	 	EvaluateUnsignedInteger		; get integer
.a2c8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a2ca		15 68		ora $68,x			ora 	NSMantissa2,x
.a2cc		d0 f4		bne $a2c2			bne 	HelperValueError
.a2ce		60		rts				rts
.a2cf						Evaluate16BitIntegerSigned:
.a2cf		20 b2 a2	jsr $a2b2			jsr	 	EvaluateInteger				; get integer
.a2d2		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a2d4		15 68		ora $68,x			ora 	NSMantissa2,x
.a2d6		d0 ea		bne $a2c2			bne 	HelperValueError
.a2d8		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a2da		10 03		bpl $a2df			bpl 	_EISNotSigned
.a2dc		20 0e a3	jsr $a30e			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a2df						_EISNotSigned:
.a2df		60		rts				rts
.a2e0						Evaluate8BitInteger:
.a2e0		20 ba a2	jsr $a2ba			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a2e3		d0 dd		bne $a2c2			bne 	HelperValueError
.a2e5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a2e7		15 68		ora $68,x			ora 	NSMantissa2,x
.a2e9		15 60		ora $60,x			ora 	NSMantissa1,x
.a2eb		d0 d5		bne $a2c2			bne 	HelperValueError
.a2ed		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2f0						Multiply8x8:
.a2f0		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2f1		85 36		sta $36			  	sta 	zTemp0
.a2f3		86 37		stx $37				stx 	zTemp0+1
.a2f5		a9 00		lda #$00			lda 	#0
.a2f7		a2 08		ldx #$08			ldx 	#8
.a2f9						_M88Loop:
.a2f9		90 03		bcc $a2fe			bcc 	_M88NoAdd
.a2fb		18		clc				clc
.a2fc		65 37		adc $37				adc 	zTemp0+1
.a2fe						_M88NoAdd:
.a2fe		6a		ror a				ror 	a
.a2ff		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a301		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a302		d0 f5		bne $a2f9			bne 	_M88Loop
.a304		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a306		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a307						NSMNegate:
.a307		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a309		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a30b		95 50		sta $50,x			sta 	NSStatus,x
.a30d		60		rts				rts
.a30e						NSMNegateMantissa:
.a30e		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a30f		a9 00		lda #$00			lda 	#0
.a311		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a313		95 58		sta $58,x			sta 	NSMantissa0,x
.a315		a9 00		lda #$00			lda 	#0
.a317		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a319		95 60		sta $60,x			sta 	NSMantissa1,x
.a31b		a9 00		lda #$00			lda 	#0
.a31d		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a31f		95 68		sta $68,x			sta 	NSMantissa2,x
.a321		a9 00		lda #$00			lda 	#0
.a323		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a325		95 70		sta $70,x			sta 	NSMantissa3,x
.a327		60		rts				rts
.a328						NSMShiftUpTwo:
.a328		b5 58		lda $58,x			lda 	NSMantissa0,x
.a32a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a32c		b5 60		lda $60,x			lda 	NSMantissa1,x
.a32e		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a330		b5 68		lda $68,x			lda 	NSMantissa2,x
.a332		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a334		b5 70		lda $70,x			lda 	NSMantissa3,x
.a336		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a338		b5 78		lda $78,x			lda 	NSExponent,x
.a33a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a33c		b5 50		lda $50,x			lda 	NSStatus,x
.a33e		95 52		sta $52,x			sta 	NSStatus+2,x
.a340		60		rts				rts
.a341						NSMSetZeroMantissaOnly:
.a341		a9 00		lda #$00			lda 	#0
.a343		80 06		bra $a34b			bra 	NSMSetMantissa
.a345						NSMSetZero:
.a345		a9 00		lda #$00			lda 	#0
.a347						NSMSetByte:
.a347		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a349		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a34b						NSMSetMantissa:
.a34b		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a34d		74 60		stz $60,x			stz 	NSMantissa1,x
.a34f		74 68		stz $68,x			stz 	NSMantissa2,x
.a351		74 70		stz $70,x			stz 	NSMantissa3,x
.a353		60		rts				rts
.a354						NSMShiftLeft:
.a354		18		clc				clc
.a355						NSMRotateLeft:
.a355		36 58		rol $58,x			rol 	NSMantissa0,x
.a357		36 60		rol $60,x			rol		NSMantissa1,x
.a359		36 68		rol $68,x			rol		NSMantissa2,x
.a35b		36 70		rol $70,x			rol		NSMantissa3,x
.a35d		60		rts				rts
.a35e						NSMShiftRight:
.a35e		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a360		76 68		ror $68,x			ror		NSMantissa2,x
.a362		76 60		ror $60,x			ror		NSMantissa1,x
.a364		76 58		ror $58,x			ror		NSMantissa0,x
.a366		60		rts				rts
.a367						NSMIsZero:
.a367		b5 70		lda $70,x			lda 	NSMantissa3,x
.a369		15 68		ora $68,x			ora		NSMantissa2,x
.a36b		15 60		ora $60,x			ora		NSMantissa1,x
.a36d		15 58		ora $58,x			ora		NSMantissa0,x
.a36f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a370						Assemble_ora:
.a370		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a373		01					.byte $01
.a374						Assemble_and:
.a374		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a377		21					.byte $21
.a378						Assemble_eor:
.a378		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a37b		41					.byte $41
.a37c						Assemble_adc:
.a37c		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a37f		61					.byte $61
.a380						Assemble_sta:
.a380		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a383		81					.byte $81
.a384						Assemble_lda:
.a384		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a387		a1					.byte $a1
.a388						Assemble_cmp:
.a388		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a38b		c1					.byte $c1
.a38c						Assemble_sbc:
.a38c		20 c7 84	jsr $84c7		jsr	AssembleGroup1
>a38f		e1					.byte $e1
.a390						Assemble_asl:
.a390		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a393		02					.byte $02
>a394		75					.byte $75
.a395						Assemble_rol:
.a395		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a398		22					.byte $22
>a399		75					.byte $75
.a39a						Assemble_lsr:
.a39a		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a39d		42					.byte $42
>a39e		75					.byte $75
.a39f						Assemble_ror:
.a39f		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3a2		62					.byte $62
>a3a3		75					.byte $75
.a3a4						Assemble_stx:
.a3a4		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3a7		82					.byte $82
>a3a8		50					.byte $50
.a3a9						Assemble_ldx:
.a3a9		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3ac		a2					.byte $a2
>a3ad		d0					.byte $d0
.a3ae						Assemble_dec:
.a3ae		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3b1		c2					.byte $c2
>a3b2		55					.byte $55
.a3b3						Assemble_inc:
.a3b3		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3b6		e2					.byte $e2
>a3b7		55					.byte $55
.a3b8						Assemble_stz:
.a3b8		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3bb		60					.byte $60
>a3bc		44					.byte $44
.a3bd						Assemble_bit:
.a3bd		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3c0		20					.byte $20
>a3c1		55					.byte $55
.a3c2						Assemble_sty:
.a3c2		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3c5		80					.byte $80
>a3c6		54					.byte $54
.a3c7						Assemble_ldy:
.a3c7		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3ca		a0					.byte $a0
>a3cb		d5					.byte $d5
.a3cc						Assemble_cpy:
.a3cc		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3cf		c0					.byte $c0
>a3d0		d4					.byte $d4
.a3d1						Assemble_cpx:
.a3d1		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3d4		e0					.byte $e0
>a3d5		d0					.byte $d0
.a3d6						Assemble_tsb:
.a3d6		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3d9		00					.byte $00
>a3da		50					.byte $50
.a3db						Assemble_trb:
.a3db		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3de		10					.byte $10
>a3df		50					.byte $50
.a3e0						Assemble_jsr:
.a3e0		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3e3		14					.byte $14
>a3e4		10					.byte $10
.a3e5						Assemble_jmp:
.a3e5		20 ce 84	jsr $84ce		jsr	AssembleGroup2
>a3e8		40					.byte $40
>a3e9		10					.byte $10
.a3ea						Assemble_bpl:
.a3ea		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a3ed		10					.byte $10
.a3ee						Assemble_bmi:
.a3ee		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a3f1		30					.byte $30
.a3f2						Assemble_bvc:
.a3f2		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a3f5		50					.byte $50
.a3f6						Assemble_bvs:
.a3f6		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a3f9		70					.byte $70
.a3fa						Assemble_bcc:
.a3fa		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a3fd		90					.byte $90
.a3fe						Assemble_bcs:
.a3fe		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a401		b0					.byte $b0
.a402						Assemble_bne:
.a402		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a405		d0					.byte $d0
.a406						Assemble_beq:
.a406		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a409		f0					.byte $f0
.a40a						Assemble_bra:
.a40a		20 1f 85	jsr $851f		jsr	AssembleGroup3
>a40d		80					.byte $80
.a40e						Assemble_brk:
.a40e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a411		00					.byte $00
.a412						Assemble_php:
.a412		20 53 85	jsr $8553		jsr	AssembleGroup4
>a415		08					.byte $08
.a416						Assemble_clc:
.a416		20 53 85	jsr $8553		jsr	AssembleGroup4
>a419		18					.byte $18
.a41a						Assemble_plp:
.a41a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a41d		28					.byte $28
.a41e						Assemble_sec:
.a41e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a421		38					.byte $38
.a422						Assemble_rti:
.a422		20 53 85	jsr $8553		jsr	AssembleGroup4
>a425		40					.byte $40
.a426						Assemble_pha:
.a426		20 53 85	jsr $8553		jsr	AssembleGroup4
>a429		48					.byte $48
.a42a						Assemble_cli:
.a42a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a42d		58					.byte $58
.a42e						Assemble_phy:
.a42e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a431		5a					.byte $5a
.a432						Assemble_rts:
.a432		20 53 85	jsr $8553		jsr	AssembleGroup4
>a435		60					.byte $60
.a436						Assemble_pla:
.a436		20 53 85	jsr $8553		jsr	AssembleGroup4
>a439		68					.byte $68
.a43a						Assemble_sei:
.a43a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a43d		78					.byte $78
.a43e						Assemble_ply:
.a43e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a441		7a					.byte $7a
.a442						Assemble_dey:
.a442		20 53 85	jsr $8553		jsr	AssembleGroup4
>a445		88					.byte $88
.a446						Assemble_txa:
.a446		20 53 85	jsr $8553		jsr	AssembleGroup4
>a449		8a					.byte $8a
.a44a						Assemble_tya:
.a44a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a44d		98					.byte $98
.a44e						Assemble_txs:
.a44e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a451		9a					.byte $9a
.a452						Assemble_tay:
.a452		20 53 85	jsr $8553		jsr	AssembleGroup4
>a455		a8					.byte $a8
.a456						Assemble_tax:
.a456		20 53 85	jsr $8553		jsr	AssembleGroup4
>a459		aa					.byte $aa
.a45a						Assemble_clv:
.a45a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a45d		b8					.byte $b8
.a45e						Assemble_tsx:
.a45e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a461		ba					.byte $ba
.a462						Assemble_iny:
.a462		20 53 85	jsr $8553		jsr	AssembleGroup4
>a465		c8					.byte $c8
.a466						Assemble_dex:
.a466		20 53 85	jsr $8553		jsr	AssembleGroup4
>a469		ca					.byte $ca
.a46a						Assemble_cld:
.a46a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a46d		d8					.byte $d8
.a46e						Assemble_phx:
.a46e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a471		da					.byte $da
.a472						Assemble_stp:
.a472		20 53 85	jsr $8553		jsr	AssembleGroup4
>a475		db					.byte $db
.a476						Assemble_inx:
.a476		20 53 85	jsr $8553		jsr	AssembleGroup4
>a479		e8					.byte $e8
.a47a						Assemble_nop:
.a47a		20 53 85	jsr $8553		jsr	AssembleGroup4
>a47d		ea					.byte $ea
.a47e						Assemble_sed:
.a47e		20 53 85	jsr $8553		jsr	AssembleGroup4
>a481		f8					.byte $f8
.a482						Assemble_plx:
.a482		20 53 85	jsr $8553		jsr	AssembleGroup4
>a485		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a486						DecimalScalarTable:
>a486		66 66 66 66				.dword $66666666 ; 0.1
>a48a		de					.byte $de
>a48b		1f 85 eb 51				.dword $51eb851f ; 0.01
>a48f		db					.byte $db
>a490		4c 37 89 41				.dword $4189374c ; 0.001
>a494		d8					.byte $d8
>a495		ac 8b db 68				.dword $68db8bac ; 0.0001
>a499		d4					.byte $d4
>a49a		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a49e		d1					.byte $d1
>a49f		83 de 1b 43				.dword $431bde83 ; 1e-06
>a4a3		ce					.byte $ce
>a4a4		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a4a8		ca					.byte $ca
>a4a9		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a4ad		c7					.byte $c7
>a4ae		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a4b2		c4					.byte $c4
>a4b3		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a4b7		c0					.byte $c0
>a4b8		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a4bc		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a4bd						SyntaxError:
.a4bd		a9 02		lda #$02		lda	#2
.a4bf		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a4c2						RangeError:
.a4c2		a9 04		lda #$04		lda	#4
.a4c4		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a4c7						TypeError:
.a4c7		a9 05		lda #$05		lda	#5
.a4c9		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a4cc						ArgumentError:
.a4cc		a9 07		lda #$07		lda	#7
.a4ce		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a4d1						NotDoneError:
.a4d1		a9 0c		lda #$0c		lda	#12
.a4d3		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a4d6						ErrorText:
>a4d6		42 72 65 61 6b 00			.text	"Break",0
>a4dc		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a4e4		72 72 6f 72 00
>a4e9		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4f1		20 62 79 20 7a 65 72 6f 00
>a4fa		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a502		61 6e 67 65 00
>a507		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a50f		6d 61 74 63 68 00
>a515		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a51d		65 6d 6f 72 79 00
>a523		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a52b		61 72 67 75 6d 65 6e 74 00
>a534		53 74 6f 70 00				.text	"Stop",0
>a539		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a541		6f 6f 20 6c 6f 6e 67 00
>a549		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a551		6e 20 66 61 69 6c 65 64 00
>a55a		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a562		61 74 61 00
>a566		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a56e		65 6e 74 65 64 00
>a574		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a57c		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a588		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a590		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a59d		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a5a5		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a5b2		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a5ba		68 6f 75 74 20 57 68 69 6c 65 00
>a5c5		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a5cd		68 6f 75 74 20 46 6f 72 00
>a5d6		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a5de		61 63 6b 20 66 75 6c 6c 00
>a5e7		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5ef		75 63 74 75 72 65 00
>a5f6		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5fe		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a60b		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a613		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a621		41 72 72 61 79 20 73 69			.text	"Array size",0
>a629		7a 65 00
>a62c		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a634		79 20 69 6e 64 65 78 00
>a63c		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a644		74 20 64 65 63 6c 61 72 65 64 00
>a64f		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a657		20 66 6f 75 6e 64 00
>a65e		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a666		65 72 72 6f 72 00
>a66c		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a674		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 30 38 2f 30 33 2f			.text 9,9,"08/03/23 01b"
>e773		32 33 20 30 31 62

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a67a						MemoryDeleteLine:
.a67a		20 99 a6	jsr $a699			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a67d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a67f		a8		tay				tay
.a680						_MDDLLoop:
.a680		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a682		92 30		sta ($30)			sta 	(codePtr)
.a684		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a686		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a688		d0 07		bne $a691			bne 	_MDLDLNext
.a68a		a5 31		lda $31				lda 	codePtr+1
.a68c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a68e		d0 01		bne $a691			bne 	_MDLDLNext
.a690						_MDDLExit:
.a690		60		rts				rts
.a691						_MDLDLNext:
.a691		e6 30		inc $30				inc 	codePtr						; next byte
.a693		d0 eb		bne $a680			bne 	_MDDLLoop
.a695		e6 31		inc $31				inc 	codePtr+1
.a697		80 e7		bra $a680			bra 	_MDDLLoop
.a699						IMemoryFindEnd:
.a699		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a69b		85 3a		sta $3a				sta 	0+zTemp2
.a69d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a69f		85 3b		sta $3b				sta 	1+zTemp2
.a6a1						_MDLFELoop:
.a6a1		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a6a3		f0 0b		beq $a6b0			beq 	_MDLFEExit
.a6a5		18		clc				clc
.a6a6		65 3a		adc $3a				adc 	zTemp2
.a6a8		85 3a		sta $3a				sta 	zTemp2
.a6aa		90 f5		bcc $a6a1			bcc 	_MDLFELoop
.a6ac		e6 3b		inc $3b				inc 	zTemp2+1
.a6ae		80 f1		bra $a6a1			bra 	_MDLFELoop
.a6b0						_MDLFEExit:
.a6b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a6b1						MemoryInsertLine:
.a6b1		08		php				php
.a6b2		20 99 a6	jsr $a699			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6b5		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a6b7		1a		inc a				inc 	a
.a6b8		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a6ba		b0 36		bcs $a6f2			bcs 	_MDLIError 					; no, fail.
.a6bc		28		plp				plp 								; do at a specific point or the end ?
.a6bd		90 08		bcc $a6c7			bcc 	_MDLIFound 					; if specific point already set.
.a6bf		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a6c1		85 30		sta $30				sta 	codePtr 					; end.
.a6c3		a5 3b		lda $3b				lda 	zTemp2+1
.a6c5		85 31		sta $31				sta 	codePtr+1
.a6c7						_MDLIFound:
.a6c7		ad 46 04	lda $0446			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a6ca		a8		tay				tay
.a6cb						_MDLIInsert:
.a6cb		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a6cd		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a6cf		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a6d1		c5 3a		cmp $3a				cmp 	zTemp2
.a6d3		d0 06		bne $a6db			bne 	_MDLINext
.a6d5		a5 31		lda $31				lda 	codePtr+1
.a6d7		c5 3b		cmp $3b				cmp 	zTemp2+1
.a6d9		f0 0a		beq $a6e5			beq 	_MDLIHaveSpace
.a6db						_MDLINext:
.a6db		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a6dd		d0 02		bne $a6e1			bne 	_MDLINoBorrow
.a6df		c6 3b		dec $3b				dec 	zTemp2+1
.a6e1						_MDLINoBorrow:
.a6e1		c6 3a		dec $3a				dec 	zTemp2
.a6e3		80 e6		bra $a6cb			bra 	_MDLIInsert
.a6e5						_MDLIHaveSpace:
.a6e5		ac 46 04	ldy $0446			ldy 	tokenOffset 				; bytes to copy
.a6e8		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a6e9						_MDLICopy:
.a6e9		b9 46 04	lda $0446,y			lda 	tokenOffset,y
.a6ec		91 30		sta ($30),y			sta 	(codePtr),y
.a6ee		88		dey				dey
.a6ef		10 f8		bpl $a6e9			bpl 	_MDLICopy
.a6f1		60		rts				rts
.a6f2						_MDLIError:
.a6f2		a9 06		lda #$06		lda	#6
.a6f4		4c e5 93	jmp $93e5		jmp	ErrorHandler
.a6f7						MDLAppendLine:
.a6f7		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a6f9		85 36		sta $36				sta 	zTemp0
.a6fb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6fd		85 38		sta $38				sta 	0+zTemp1
.a6ff		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a701		85 39		sta $39				sta 	1+zTemp1
.a703		b2 38		lda ($38)			lda 	(zTemp1)
.a705		d0 0a		bne $a711			bne 	_MDLANoInitialise
.a707		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a709		8d c8 07	sta $07c8			sta 	0+AppendPointer
.a70c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a70e		8d c9 07	sta $07c9			sta 	1+AppendPointer
.a711						_MDLANoInitialise:
.a711		18		clc				clc
.a712		ad c8 07	lda $07c8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a715		85 38		sta $38				sta 	zTemp1
.a717		72 36		adc ($36)			adc 	(zTemp0)
.a719		8d c8 07	sta $07c8			sta 	AppendPointer
.a71c		ad c9 07	lda $07c9			lda 	AppendPointer+1
.a71f		85 39		sta $39				sta 	zTemp1+1
.a721		69 00		adc #$00			adc 	#0
.a723		8d c9 07	sta $07c9			sta 	AppendPointer+1
.a726		a0 00		ldy #$00			ldy 	#0
.a728						_MDLACopy:
.a728		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a72a		91 38		sta ($38),y			sta 	(zTemp1),y
.a72c		c8		iny				iny
.a72d		98		tya				tya
.a72e		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a730		d0 f6		bne $a728			bne 	_MDLACopy
.a732		a9 00		lda #$00			lda 	#0 							; end of program.
.a734		91 38		sta ($38),y			sta 	(zTemp1),y
.a736		60		rts				rts
.07c8						AppendPointer:
>07c8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a737						MemoryNew:
.a737		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a739		85 30		sta $30				sta 	codePtr
.a73b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a73d		85 31		sta $31				sta 	codePtr+1
.a73f		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a741		92 30		sta ($30)			sta 	(codePtr)
.a743		60		rts				rts
.a744						MemoryInline:
.a744		98		tya				tya 								; put address into stack,x
.a745		18		clc				clc  								; get the offset, add codePtr
.a746		65 30		adc $30				adc 	codePtr
.a748		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a74a		a5 31		lda $31				lda 	codePtr+1
.a74c		69 00		adc #$00			adc 	#0
.a74e		95 60		sta $60,x			sta 	NSMantissa1,x
.a750		74 68		stz $68,x			stz 	NSMantissa2,x
.a752		74 70		stz $70,x			stz 	NSMantissa3,x
.a754		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a755						MemorySearch:
.a755		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a757		86 37		stx $37				stx 	zTemp0+1
.a759		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a75b		85 30		sta $30				sta 	codePtr
.a75d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a75f		85 31		sta $31				sta 	codePtr+1
.a761						_MTAXLoop:
.a761		b2 30		lda ($30)			lda 	(codePtr)
.a763		18		clc				clc
.a764		f0 21		beq $a787			beq 	_MTAXExit 					; reached end, exit with CC.
.a766		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a768		b1 30		lda ($30),y			lda 	(codePtr),y
.a76a		38		sec				sec
.a76b		e5 36		sbc $36				sbc 	zTemp0
.a76d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a76f		c8		iny				iny 								; do the MSB
.a770		b1 30		lda ($30),y			lda 	(codePtr),y
.a772		e5 37		sbc $37				sbc 	zTemp0+1
.a774		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a776		f0 0f		beq $a787			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a778		b0 0d		bcs $a787			bcs 	_MTAXExit 					; current < required exit
.a77a		18		clc				clc
.a77b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a77d		65 30		adc $30				adc 	codePtr
.a77f		85 30		sta $30				sta 	codePtr
.a781		90 02		bcc $a785			bcc 	_CREExit
.a783		e6 31		inc $31				inc 	codePtr+1 					; carry
.a785						_CREExit:
.a785		80 da		bra $a761			bra 	_MTAXLoop
.a787						_MTAXExit:
.a787		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a788						RectangleCommand:
.a788		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a78a		80 02		bra $a78e			bra 	ShapeDrawCmd
.a78c						CircleCommand:
.a78c		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a78e						ShapeDrawCmd:
.a78e		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a791						ShapeDraw:
.a791		0d cb 07	ora $07cb			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a794		4c 0c a8	jmp $a80c			jmp 	ExecuteGraphicCommand	 	; and complete
.a797						SpriteCommand:
.a797		a2 00		ldx #$00			ldx 	#0
.a799		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get image number.
.a79c		5a		phy				phy
.a79d		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a79f		a6 58		ldx $58				ldx 	NSMantissa0
.a7a1		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a7a3		b0 0d		bcs $a7b2			bcs 	_SCRange
.a7a5		a0 ff		ldy #$ff			ldy 	#255
.a7a7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7aa		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a7ac		7a		ply				ply
.a7ad		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a7b0		80 5a		bra $a80c			bra 	ExecuteGraphicCommand
.a7b2						_SCRange:
.a7b2		4c c2 a4	jmp $a4c2			jmp 	RangeError
.a7b5						ImageCommand:
.a7b5		a2 00		ldx #$00			ldx 	#0
.a7b7		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get image number.
.a7ba		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a7bd						ImageRunDraw:
.a7bd		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a7bf		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7c2		ad d1 07	lda $07d1			lda 	gxDrawScale
.a7c5		0a		asl a				asl 	a
.a7c6		0a		asl a				asl 	a
.a7c7		0a		asl a				asl 	a
.a7c8		a8		tay				tay
.a7c9		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a7cb		a6 58		ldx $58				ldx 	NSMantissa0
.a7cd		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7d0		60		rts				rts
.a7d1						TextCommand:
.a7d1		a2 00		ldx #$00			ldx 	#0
.a7d3		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; get text
.a7d6		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a7d9						TextRunDraw:
.a7d9		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a7db		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7de		a0 00		ldy #$00			ldy 	#0
.a7e0						_IRDLoop:
.a7e0		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a7e2		85 37		sta $37				sta 	zTemp0+1
.a7e4		a5 58		lda $58				lda 	NSMantissa0
.a7e6		85 36		sta $36				sta 	zTemp0
.a7e8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7ea		f0 13		beq $a7ff			beq 	_IRDExit
.a7ec		5a		phy				phy									; save string pos
.a7ed		48		pha				pha 								; save char
.a7ee		ad d1 07	lda $07d1			lda 	gxDrawScale 				; get scale
.a7f1		0a		asl a				asl 	a
.a7f2		0a		asl a				asl 	a
.a7f3		0a		asl a				asl 	a
.a7f4		a8		tay				tay
.a7f5		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a7f7		fa		plx				plx 								; char to draw
.a7f8		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7fb		7a		ply				ply 								; restore string pos
.a7fc		c8		iny				iny
.a7fd		90 e1		bcc $a7e0			bcc 	_IRDLoop 					; go back if no error.
.a7ff						_IRDExit:
.a7ff		60		rts				rts
.a800						PlotCommand:
.a800		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a802		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a805		80 05		bra $a80c			bra 	ExecuteGraphicCommand
.a807						LineCommand:
.a807		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a809		20 18 a8	jsr $a818			jsr 	RunGraphicsCommand
.a80c						ExecuteGraphicCommand:
.a80c		0d ca 07	ora $07ca			ora 	gxCommandID 				; make a full command
.a80f		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a812		b0 01		bcs $a815			bcs 	_EGCError
.a814		60		rts				rts
.a815						_EGCError:
.a815		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.a818						RunGraphicsCommand:
.a818		8d ca 07	sta $07ca			sta 	gxCommandID					; save TODO graphics command.
.a81b		68		pla				pla 								; pop handler address
.a81c		fa		plx				plx
.a81d		1a		inc a				inc 	a
.a81e		d0 01		bne $a821			bne 	_RGINoCarry
.a820		e8		inx				inx
.a821						_RGINoCarry:
.a821		8d cf 07	sta $07cf			sta 	gxHandler
.a824		8e d0 07	stx $07d0			stx 	gxHandler+1
.a827						_RGICommandLoop:
.a827		b1 30		lda ($30),y			lda 	(codePtr),y
.a829		c8		iny				iny
.a82a		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a82c		f0 53		beq $a881			beq 	_RGI_To
.a82e		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a830		f0 55		beq $a887			beq 	_RGI_Here
.a832		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a834		f0 3d		beq $a873			beq 	_RGI_Exit
.a836		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a838		f0 39		beq $a873			beq 	_RGI_Exit
.a83a		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a83c		f0 3e		beq $a87c			beq 	_RGI_Frame
.a83e		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a840		f0 33		beq $a875			beq 	_RGI_Solid
.a842		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a844		f0 4b		beq $a891			beq 	_RGI_By
.a846		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a848		f0 17		beq $a861			beq 	_RGI_Move2
.a84a		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a84c		f0 62		beq $a8b0			beq 	_RGI_Dim
.a84e		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a850		f0 74		beq $a8c6			beq 	_RGI_Colour
.a852		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a854		f0 70		beq $a8c6			beq 	_RGI_Colour
.a856		ae ca 07	ldx $07ca			ldx 	gxCommandID
.a859		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a85b		d0 03		bne $a860			bne 	_RGI_Move 					; move
.a85d		4c ee a8	jmp $a8ee			jmp		_RGI_SpriteInstructions
.a860						_RGI_Move:
.a860		88		dey				dey 								; unpick get.
.a861						_RGI_Move2:
.a861		20 14 a9	jsr $a914			jsr 	GCGetCoordinatePair 		; move to here
.a864		20 3b a9	jsr $a93b			jsr 	GCCopyPairToStore 			; save
.a867		5a		phy				phy
.a868		20 31 a9	jsr $a931			jsr 	GCLoadAXY 					; load in
.a86b		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a86d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a870		7a		ply				ply
.a871		80 b4		bra $a827			bra 	_RGICommandLoop 			; and go round
.a873						_RGI_Exit:
.a873		88		dey				dey 								; unpick : / EOL
.a874		60		rts				rts
.a875						_RGI_Solid:
.a875		a9 02		lda #$02			lda 	#2
.a877		8d cb 07	sta $07cb			sta 	gxFillSolid
.a87a		80 ab		bra $a827			bra 	_RGICommandLoop
.a87c						_RGI_Frame:
.a87c		9c cb 07	stz $07cb			stz 	gxFillSolid
.a87f		80 a6		bra $a827			bra 	_RGICommandLoop
.a881						_RGI_To:
.a881		20 14 a9	jsr $a914			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a884		20 3b a9	jsr $a93b			jsr 	GCCopyPairToStore
.a887						_RGI_Here:
.a887		5a		phy				phy
.a888		20 31 a9	jsr $a931			jsr 	GCLoadAXY 					; load it into AXY
.a88b		20 eb a8	jsr $a8eb			jsr 	_RGICallHandler 			; go do whatever it is.
.a88e		7a		ply				ply
.a88f		80 96		bra $a827			bra 	_RGICommandLoop 			; and go round
.a891						_RGI_By:
.a891		20 21 a9	jsr $a921			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a894		18		clc				clc
.a895		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a897		6d cc 07	adc $07cc			adc 	gxXPos
.a89a		8d cc 07	sta $07cc			sta 	gxXPos
.a89d		a5 61		lda $61				lda 	NSMantissa1+1
.a89f		6d cd 07	adc $07cd			adc 	gxXPos+1
.a8a2		8d cd 07	sta $07cd			sta 	gxXPos+1
.a8a5		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8a7		18		clc				clc
.a8a8		6d ce 07	adc $07ce			adc 	gxYPos
.a8ab		8d ce 07	sta $07ce			sta 	gxYPos
.a8ae		80 d7		bra $a887			bra 	_RGI_Here
.a8b0						_RGI_Dim:
.a8b0		a2 01		ldx #$01			ldx	 	#1
.a8b2		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.a8b5		a5 59		lda $59				lda 	NSMantissa0+1
.a8b7		c9 00		cmp #$00			cmp 	#0
.a8b9		f0 2d		beq $a8e8			beq 	_RGIRange
.a8bb		c9 09		cmp #$09			cmp 	#8+1
.a8bd		b0 29		bcs $a8e8			bcs		_RGIRange
.a8bf		3a		dec a				dec 	a
.a8c0		8d d1 07	sta $07d1			sta 	gxDrawScale
.a8c3		4c 27 a8	jmp $a827			jmp 	_RGICommandLoop
.a8c6						_RGI_Colour:
.a8c6		a2 01		ldx #$01			ldx 	#1 							; colour
.a8c8		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.a8cb		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a8cd		20 45 a3	jsr $a345			jsr 	NSMSetZero
.a8d0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8d2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a8d4		d0 04		bne $a8da			bne 	_RGICDefaultMode
.a8d6		c8		iny				iny
.a8d7		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.a8da						_RGICDefaultMode:
.a8da		5a		phy				phy
.a8db		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a8dd		a6 59		ldx $59				ldx 	NSMantissa0+1
.a8df		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a8e1		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8e4		7a		ply				ply
.a8e5		4c 27 a8	jmp $a827			jmp 	_RGICommandLoop 			; and go round
.a8e8						_RGIRange:
.a8e8		4c c2 a4	jmp $a4c2			jmp 	RangeError
.a8eb						_RGICallHandler:
.a8eb		6c cf 07	jmp ($07cf)			jmp 	(gxHandler)
.a8ee						_RGI_SpriteInstructions:
.a8ee		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a8f0		f0 07		beq $a8f9			beq 	_RGISpriteOff
.a8f2		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a8f4		f0 13		beq $a909			beq 	_RGISetImage
.a8f6		4c 60 a8	jmp $a860			jmp 	_RGI_Move
.a8f9						_RGISpriteOff:
.a8f9		5a		phy				phy
.a8fa		a0 01		ldy #$01			ldy 	#1
.a8fc		a2 00		ldx #$00			ldx 	#0
.a8fe						_RGIDoCommandLoop:
.a8fe		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a900		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a903		7a		ply				ply
.a904		b0 e2		bcs $a8e8			bcs 	_RGIRange
.a906		4c 27 a8	jmp $a827			jmp 	_RGICommandLoop
.a909						_RGISetImage:
.a909		a2 01		ldx #$01			ldx 	#1
.a90b		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.a90e		5a		phy				phy
.a90f		aa		tax				tax
.a910		a0 00		ldy #$00			ldy 	#0
.a912		80 ea		bra $a8fe			bra 	_RGIDoCommandLoop
.a914						GCGetCoordinatePair:
.a914		a2 01		ldx #$01			ldx 	#1
.a916		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.a919		20 d4 93	jsr $93d4			jsr 	CheckComma
.a91c		e8		inx				inx
.a91d		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.a920		60		rts				rts
.a921						GCSignedCoordinatePair:
.a921		a2 01		ldx #$01			ldx 	#1
.a923		20 cf a2	jsr $a2cf			jsr 	Evaluate16BitIntegerSigned
.a926		20 d4 93	jsr $93d4			jsr 	CheckComma
.a929		e8		inx				inx
.a92a		20 cf a2	jsr $a2cf			jsr 	Evaluate16BitIntegerSigned
.a92d		60		rts				rts
.a92e						_GCCPRange:
.a92e		4c c2 a4	jmp $a4c2			jmp 	RangeError
.a931						GCLoadAXY:
.a931		ad cd 07	lda $07cd			lda 	gxXPos+1
.a934		ae cc 07	ldx $07cc			ldx 	gxXPos
.a937		ac ce 07	ldy $07ce			ldy 	gxYPos
.a93a		60		rts				rts
.a93b						GCCopyPairToStore:
.a93b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a93d		8d cc 07	sta $07cc			sta 	gxXPos
.a940		a5 61		lda $61				lda 	NSMantissa1+1
.a942		8d cd 07	sta $07cd			sta 	gxXPos+1
.a945		a5 5a		lda $5a				lda 	NSMantissa0+2
.a947		8d ce 07	sta $07ce			sta 	gxYPos
.a94a		60		rts				rts
.07ca						gxCommandID:
>07ca								.fill 	1
.07cb						gxFillSolid:
>07cb								.fill 	1
.07cc						gxXPos:
>07cc								.fill 	2
.07ce						gxYPos:
>07ce								.fill 	1
.07cf						gxHandler:
>07cf								.fill 	2
.07d1						gxDrawScale:
>07d1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a94b						ResetBitmapSpritesTiles:
.a94b		9c d2 07	stz $07d2			stz 	BitmapPageNumber
.a94e		9c d3 07	stz $07d3			stz 	SpritePageNumber
.a951		9c d4 07	stz $07d4			stz 	TileMapPageNumber
.a954		9c d5 07	stz $07d5			stz 	TileImagePageNumber
.a957		a9 40		lda #$40			lda 	#64
.a959		8d d6 07	sta $07d6			sta 	TileMapWidth
.a95c		a9 20		lda #$20			lda 	#32
.a95e		8d d7 07	sta $07d7			sta 	TileMapHeight
.a961		60		rts				rts
.a962						BitmapCtrl:
.a962						BitmapCtrlLoop:
.a962		b1 30		lda ($30),y			lda 	(codePtr),y
.a964		c8		iny				iny
.a965		a2 01		ldx #$01			ldx 	#1
.a967		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a969		f0 24		beq $a98f			beq 	BitmapSwitch
.a96b		ca		dex				dex
.a96c		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a96e		f0 1f		beq $a98f			beq 	BitmapSwitch
.a970		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a972		f0 13		beq $a987			beq 	BitmapAddress
.a974		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a976		f0 02		beq $a97a			beq 	BitmapClear
.a978		88		dey				dey
.a979		60		rts				rts
.a97a						BitmapClear:
.a97a		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get the colour
.a97d		5a		phy				phy
.a97e		aa		tax				tax
.a97f		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a981		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a984		7a		ply				ply
.a985		80 db		bra $a962			bra 	BitmapCtrlLoop
.a987						BitmapAddress:
.a987		20 53 aa	jsr $aa53			jsr 	GetPageNumber
.a98a		8d d2 07	sta $07d2			sta 	BitmapPageNumber
.a98d		80 d3		bra $a962			bra 	BitmapCtrlLoop
.a98f						BitmapSwitch:
.a98f		5a		phy				phy
.a990		ac d2 07	ldy $07d2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a993		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a995		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a998		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a99a		a0 00		ldy #$00			ldy 	#0
.a99c		a2 ff		ldx #$ff			ldx 	#$FF
.a99e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9a1		9c cb 07	stz $07cb			stz 	gxFillSolid
.a9a4		9c cc 07	stz $07cc			stz 	gxXPos
.a9a7		9c cd 07	stz $07cd			stz 	gxXPos+1
.a9aa		9c ce 07	stz $07ce			stz 	gxYPos
.a9ad		9c d1 07	stz $07d1			stz 	gxDrawScale
.a9b0		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a9b2		a2 00		ldx #$00			ldx 	#0
.a9b4		a0 00		ldy #$00			ldy 	#0
.a9b6		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9b9		7a		ply				ply
.a9ba		80 a6		bra $a962			bra 	BitmapCtrlLoop
.a9bc						SpritesCtrl:
.a9bc						SpritesCtrlLoop:
.a9bc		b1 30		lda ($30),y			lda 	(codePtr),y
.a9be		c8		iny				iny
.a9bf		a2 01		ldx #$01			ldx 	#1
.a9c1		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9c3		f0 13		beq $a9d8			beq 	SpriteSwitch
.a9c5		ca		dex				dex
.a9c6		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9c8		f0 0e		beq $a9d8			beq 	SpriteSwitch
.a9ca		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9cc		f0 02		beq $a9d0			beq 	SpriteSetAddress
.a9ce		88		dey				dey
.a9cf		60		rts				rts
.a9d0						SpriteSetAddress:
.a9d0		20 53 aa	jsr $aa53			jsr 	GetPageNumber
.a9d3		8d d3 07	sta $07d3			sta 	SpritePageNumber
.a9d6		80 e4		bra $a9bc			bra 	SpritesCtrlLoop
.a9d8						SpriteSwitch:
.a9d8		5a		phy				phy
.a9d9		ac d3 07	ldy $07d3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a9dc		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a9de		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9e1		7a		ply				ply
.a9e2		80 d8		bra $a9bc			bra 	SpritesCtrlLoop
.a9e4						TilesCtrl:
.a9e4						TilesCtrlLoop:
.a9e4		b1 30		lda ($30),y			lda 	(codePtr),y
.a9e6		c8		iny				iny
.a9e7		a2 80		ldx #$80			ldx 	#$80
.a9e9		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9eb		f0 34		beq $aa21			beq 	TileSwitch
.a9ed		a2 00		ldx #$00			ldx 	#$00
.a9ef		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9f1		f0 2e		beq $aa21			beq 	TileSwitch
.a9f3		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9f5		f0 19		beq $aa10			beq 	TileSetAddress
.a9f7		c9 c1		cmp #$c1			cmp 	#KWD_DIM
.a9f9		f0 02		beq $a9fd			beq 	TileSetSize
.a9fb		88		dey				dey
.a9fc		60		rts				rts
.a9fd						TileSetSize:
.a9fd		a2 00		ldx #$00			ldx 	#0
.a9ff		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.aa02		8d d6 07	sta $07d6			sta 	TileMapWidth
.aa05		20 d4 93	jsr $93d4			jsr 	CheckComma
.aa08		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.aa0b		8d d7 07	sta $07d7			sta 	TileMapHeight
.aa0e		80 d4		bra $a9e4			bra 	TilesCtrlLoop
.aa10						TileSetAddress:
.aa10		20 53 aa	jsr $aa53			jsr 	GetPageNumber 				; map page
.aa13		8d d4 07	sta $07d4			sta 	TileMapPageNumber
.aa16		20 d4 93	jsr $93d4			jsr 	CheckComma
.aa19		20 53 aa	jsr $aa53			jsr 	GetPageNumber 				; image page
.aa1c		8d d5 07	sta $07d5			sta 	TileImagePageNumber
.aa1f		80 c3		bra $a9e4			bra 	TilesCtrlLoop
.aa21						TileSwitch:
.aa21		5a		phy				phy
.aa22		da		phx				phx 								; set the on/off state and the pages.
.aa23		8a		txa				txa
.aa24		0d d4 07	ora $07d4			ora 	TileMapPageNumber
.aa27		aa		tax				tax
.aa28		ac d5 07	ldy $07d5			ldy 	TileImagePageNumber
.aa2b		a9 14		lda #$14			lda 	#GCMD_TileCtl
.aa2d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa30		fa		plx				plx
.aa31		10 b1		bpl $a9e4			bpl 	TilesCtrlLoop 				; nothing else.
.aa33		a9 16		lda #$16			lda 	#GCMD_TileSize 				; set size of tile map.
.aa35		ae d6 07	ldx $07d6			ldx 	TileMapWidth
.aa38		ac d7 07	ldy $07d7			ldy 	TileMapHeight
.aa3b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa3e		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; reset scroll
.aa40		20 4c aa	jsr $aa4c			jsr 	_TileResetScroll
.aa43		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY
.aa45		20 4c aa	jsr $aa4c			jsr 	_TileResetScroll
.aa48		7a		ply				ply
.aa49		4c e4 a9	jmp $a9e4			jmp 	TilesCtrlLoop
.aa4c						_TileResetScroll:
.aa4c		a2 00		ldx #$00			ldx 	#0
.aa4e		a0 00		ldy #$00			ldy 	#0
.aa50		4c 61 80	jmp $8061			jmp 	GXGraphicDraw
.aa53						GetPageNumber:
.aa53		a2 00		ldx #$00			ldx 	#0
.aa55		20 ba a2	jsr $a2ba			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.aa58		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.aa5a		29 1f		and #$1f			and 	#$1F
.aa5c		05 58		ora $58				ora 	NSMantissa0
.aa5e		d0 0c		bne $aa6c			bne 	_GPNError
.aa60		a5 68		lda $68				lda 	NSMantissa2
.aa62		06 60		asl $60				asl 	NSMantissa1					; get page number
.aa64		2a		rol a				rol 	a
.aa65		06 60		asl $60				asl 	NSMantissa1
.aa67		2a		rol a				rol 	a
.aa68		06 60		asl $60				asl 	NSMantissa1
.aa6a		2a		rol a				rol 	a
.aa6b		60		rts				rts
.aa6c						_GPNError:
.aa6c		a9 07		lda #$07		lda	#7
.aa6e		4c e5 93	jmp $93e5		jmp	ErrorHandler
.07d2						BitmapPageNumber:
>07d2								.fill 	1
.07d3						SpritePageNumber:
>07d3								.fill 	1
.07d4						TileMapPageNumber:
>07d4								.fill 	1
.07d5						TileImagePageNumber:
>07d5								.fill 	1
.07d6						TileMapWidth:
>07d6								.fill 	1
.07d7						TileMapHeight:
>07d7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aa71						GfxCommand:
.aa71		a2 00		ldx #$00			ldx 	#0
.aa73		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; command
.aa76		20 d4 93	jsr $93d4			jsr 	CheckComma
.aa79		e8		inx				inx
.aa7a		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; X
.aa7d		20 d4 93	jsr $93d4			jsr 	CheckComma
.aa80		e8		inx				inx
.aa81		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; Y
.aa84		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aa86		4a		lsr a				lsr 	a
.aa87		d0 12		bne $aa9b			bne 	_GfxError
.aa89		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aa8b		b0 0e		bcs $aa9b			bcs 	_GfxError 					; bit 7 should have been zero
.aa8d		5a		phy				phy 								; save pos
.aa8e		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aa90		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa92		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa94		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa97		b0 02		bcs $aa9b			bcs 	_GfxError
.aa99		7a		ply				ply 								; restore pos and exit.
.aa9a		60		rts				rts
.aa9b						_GfxError:
.aa9b		4c c2 a4	jmp $a4c2			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aa9e						UnaryHit:
.aa9e		fa		plx				plx
.aa9f		a9 36		lda #$36			lda 	#zTemp0
.aaa1		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aaa4		20 d4 93	jsr $93d4			jsr 	CheckComma
.aaa7		e8		inx				inx
.aaa8		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aaab		20 cc 93	jsr $93cc			jsr		CheckRightBracket
.aaae		ca		dex				dex 								; fix back up again.
.aaaf		da		phx				phx 								; save X/Y
.aab0		5a		phy				phy
.aab1		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aab3		b5 58		lda $58,x			lda 	NSMantissa0,x
.aab5		aa		tax				tax
.aab6		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aab8		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.aabb		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aabc		7a		ply				ply 								; restore XY
.aabd		fa		plx				plx
.aabe		20 47 a3	jsr $a347			jsr 	NSMSetByte 					; return the hit result
.aac1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aac2						PaletteCommand:
.aac2		a2 00		ldx #$00			ldx 	#0
.aac4		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; colour
.aac7		20 d4 93	jsr $93d4			jsr 	CheckComma
.aaca		e8		inx				inx
.aacb		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; r
.aace		20 d4 93	jsr $93d4			jsr 	CheckComma
.aad1		e8		inx				inx
.aad2		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; g
.aad5		20 d4 93	jsr $93d4			jsr 	CheckComma
.aad8		e8		inx				inx
.aad9		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; b
.aadc		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aade		85 36		sta $36				sta 	zTemp0
.aae0		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aae2		85 37		sta $37				sta 	zTemp0+1
.aae4		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aae6		26 37		rol $37				rol	 	zTemp0+1
.aae8		06 36		asl $36				asl 	zTemp0
.aaea		26 37		rol $37				rol	 	zTemp0+1
.aaec		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aaee		85 01		sta $01				sta 	1
.aaf0		5a		phy				phy
.aaf1		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aaf3		92 36		sta ($36)			sta 	(zTemp0)
.aaf5		a0 01		ldy #$01			ldy 	#1
.aaf7		a5 5a		lda $5a				lda 	NSMantissa0+2
.aaf9		91 36		sta ($36),y			sta 	(zTemp0),y
.aafb		a5 59		lda $59				lda 	NSMantissa0+1
.aafd		c8		iny				iny
.aafe		91 36		sta ($36),y			sta 	(zTemp0),y
.ab00		7a		ply				ply
.ab01		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/tile.asm

.ab02						TileCommand:
.ab02		b1 30		lda ($30),y			lda 	(codePtr),y
.ab04		c8		iny				iny
.ab05		c9 b9		cmp #$b9			cmp 	#KWD_AT
.ab07		f0 0a		beq $ab13			beq 	_TileSetPos
.ab09		c9 d0		cmp #$d0			cmp 	#KWD_PLOT
.ab0b		f0 15		beq $ab22			beq 	_TilePlot
.ab0d		c9 dc		cmp #$dc			cmp 	#KWD_TO
.ab0f		f0 40		beq $ab51			beq 	_TileScroll
.ab11		88		dey				dey
.ab12		60		rts				rts
.ab13						_TileSetPos:
.ab13		a2 00		ldx #$00			ldx 	#0 							; location to XA
.ab15		20 71 ab	jsr $ab71			jsr 	TileGetPair
.ab18		5a		phy				phy 								; call routine
.ab19		a8		tay				tay
.ab1a		a9 1c		lda #$1c			lda 	#GCMD_TilePos
.ab1c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab1f		7a		ply				ply
.ab20		80 e0		bra $ab02			bra 	TileCommand 				; loop round
.ab22						_TilePlot:
.ab22		a2 00		ldx #$00			ldx 	#0
.ab24		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; tile to print
.ab27		a9 01		lda #$01			lda 	#1
.ab29		85 59		sta $59				sta 	NSMantissa0+1 				; default repeat count.
.ab2b		a2 01		ldx #$01			ldx 	#1
.ab2d		b1 30		lda ($30),y			lda 	(codePtr),y
.ab2f		c9 c9		cmp #$c9			cmp 	#KWD_LINE
.ab31		d0 04		bne $ab37			bne 	_TileNoRepeat
.ab33		c8		iny				iny 								; skip LINE
.ab34		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; evaluate count
.ab37						_TileNoRepeat:
.ab37						_TileOutLoop:
.ab37		a5 59		lda $59				lda 	NSMantissa0+1 				; complete ?
.ab39		f0 0d		beq $ab48			beq 	_TileCheckAgain 			; check , <repeats>
.ab3b		c6 59		dec $59				dec 	NSMantissa0+1 				; dec count
.ab3d		a9 1e		lda #$1e			lda 	#GCMD_TileWrite				; set up to write tile.
.ab3f		a6 58		ldx $58				ldx 	NSMantissa0
.ab41		5a		phy				phy 								; call preserving Y
.ab42		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab45		7a		ply				ply
.ab46		80 ef		bra $ab37			bra 	_TileOutLoop
.ab48						_TileCheckAgain:
.ab48		b1 30		lda ($30),y			lda 	(codePtr),y
.ab4a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.ab4c		d0 b4		bne $ab02			bne 	TileCommand 				; no, do again
.ab4e		c8		iny				iny 								; consume comma
.ab4f		80 d1		bra $ab22			bra 	_TilePlot 					; and loop round.
.ab51						_TileScroll:
.ab51		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; do X
.ab53		20 60 ab	jsr $ab60			jsr 	_TileSetScroll
.ab56		20 d4 93	jsr $93d4			jsr 	CheckComma
.ab59		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY 			; do Y
.ab5b		20 60 ab	jsr $ab60			jsr 	_TileSetScroll
.ab5e		80 a2		bra $ab02			bra 	TileCommand
.ab60						_TileSetScroll:
.ab60		48		pha				pha 								; save command on stack
.ab61		a2 00		ldx #$00			ldx 	#0 							; get value to scroll to
.ab63		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.ab66		68		pla				pla 								; restore command
.ab67		5a		phy				phy 								; save Y code pos
.ab68		a6 58		ldx $58				ldx 	NSMantissa0 				; YX = scroll value
.ab6a		a4 60		ldy $60				ldy 	NSMantissa1
.ab6c		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; do command
.ab6f		7a		ply				ply 								; restore code pos
.ab70		60		rts				rts
.ab71						TileGetPair:
.ab71		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.ab74		48		pha				pha
.ab75		20 d4 93	jsr $93d4			jsr 	CheckComma
.ab78		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.ab7b		fa		plx				plx
.ab7c		60		rts				rts
.ab7d						TileRead:
.ab7d		fa		plx				plx 								; current stack pos (where the result goes)
.ab7e		da		phx				phx 								; save it back again
.ab7f		e8		inx				inx   								; space to evaluate coordinates
.ab80		20 71 ab	jsr $ab71			jsr 	TileGetPair 				; X A are the coordinates
.ab83		5a		phy				phy 								; save code position
.ab84		a8		tay				tay 								; X Y are the coordinates.
.ab85		a9 1c		lda #$1c			lda 	#GCMD_TilePos 				; set the read position.
.ab87		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab8a		a9 20		lda #$20			lda 	#GCMD_TileRead 				; read the tile there
.ab8c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab8f		7a		ply				ply 								; restore code and stack positions
.ab90		fa		plx				plx
.ab91		20 47 a3	jsr $a347			jsr 	NSMSetByte 					; set the result.
.ab94		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; check for )
.ab97		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.ab98						ClearScreen:
.ab98		5a		phy				phy
.ab99		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.ab9b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ab9e		7a		ply				ply
.ab9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cursor.asm

.aba0						CursorControl:
.aba0		a2 00		ldx #$00			ldx 	#0
.aba2		b1 30		lda ($30),y			lda 	(codePtr),y
.aba4		c8		iny				iny
.aba5		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.aba7		f0 08		beq $abb1			beq 	_CCOnOff
.aba9		e8		inx				inx
.abaa		c9 cd		cmp #$cd			cmp 	#KWD_ON
.abac		f0 03		beq $abb1			beq 	_CCOnOff
.abae		4c bd a4	jmp $a4bd			jmp 	SyntaxError
.abb1						_CCOnOff:
.abb1		a5 01		lda $01				lda 	1 							; save current I/O
.abb3		48		pha				pha
.abb4		64 01		stz $01				stz 	1 		 					; page 0.
.abb6		ad 10 d0	lda $d010			lda 	$D010 						; read Cursor control register
.abb9		29 fe		and #$fe			and 	#$FE 						; clear enable bit
.abbb		86 36		stx $36				stx 	zTemp0 						; put bit back in
.abbd		05 36		ora $36				ora 	zTemp0
.abbf		8d 10 d0	sta $d010			sta 	$D010
.abc2		68		pla				pla 	 							; switch I/O back
.abc3		85 01		sta $01				sta 	1
.abc5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.abc6						XLoadCommand:
.abc6		20 1b 8e	jsr $8e1b			jsr 	NewProgram
.abc9		20 36 87	jsr $8736			jsr 	BackloadProgram
.abcc		4c 1e 88	jmp $881e			jmp 	WarmStart
.abcf						XGoCommand:
.abcf		20 1b 8e	jsr $8e1b			jsr 	NewProgram
.abd2		20 36 87	jsr $8736			jsr 	BackloadProgram
.abd5		4c b8 8f	jmp $8fb8			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.abd8						BootXA:
.abd8		85 fb		sta $fb		            sta     kernel.args.buf+0
.abda		86 fc		stx $fc		            stx     kernel.args.buf+1
.abdc		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.abdf		4c 1e 88	jmp $881e	            jmp 	WarmStart
>abe2		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.abe6						UnaryEvent:
.abe6		fa		plx				plx
.abe7		20 74 b2	jsr $b274			jsr 	TimerToStackX 				; timer in +0
.abea		e8		inx				inx  								; put reference into +1
.abeb		20 39 9d	jsr $9d39			jsr 	EvaluateTerm
.abee		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.abf0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.abf2		d0 4c		bne $ac40			bne 	_UEType
.abf4		e8		inx				inx 								; put the step in +2
.abf5		20 d4 93	jsr $93d4			jsr 	CheckComma
.abf8		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.abfb		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.abfe		ca		dex				dex
.abff		ca		dex				dex
.ac00		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.ac02		85 36		sta $36				sta 	zTemp0
.ac04		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.ac06		85 37		sta $37				sta 	zTemp0+1
.ac08		5a		phy				phy
.ac09		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ac0b		b1 36		lda ($36),y			lda 	(zTemp0),y
.ac0d		30 2d		bmi $ac3c			bmi 	_UEFalse 					; exit if signed.
.ac0f		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ac11		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac13		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ac15		c8		iny				iny
.ac16		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac18		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac1a		c8		iny				iny
.ac1b		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac1d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac1f		90 1b		bcc $ac3c			bcc 	_UEFalse 					; no, return FALSE.
.ac21		18		clc				clc
.ac22		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ac24		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac26		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ac28		91 36		sta ($36),y			sta 	(zTemp0),y
.ac2a		c8		iny				iny
.ac2b		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac2d		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ac2f		91 36		sta ($36),y			sta 	(zTemp0),y
.ac31		c8		iny				iny
.ac32		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac34		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ac36		91 36		sta ($36),y			sta 	(zTemp0),y
.ac38		7a		ply				ply
.ac39		4c 58 94	jmp $9458			jmp 	ReturnTrue
.ac3c						_UEFalse:
.ac3c		7a		ply				ply 								; restore Y
.ac3d		4c 63 94	jmp $9463			jmp 	ReturnFalse 				; and return False
.ac40						_UEType:
.ac40		4c c7 a4	jmp $a4c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.ac43						Command_BLoad:
.ac43		20 4e ac	jsr $ac4e			jsr 	BLOADHandler
.ac46		c9 00		cmp #$00			cmp 	#0
.ac48		d0 01		bne $ac4b			bne 	_BLError
.ac4a		60		rts				rts
.ac4b						_BLError:
.ac4b		4c 9d ae	jmp $ae9d			jmp 	CLErrorHandler
.ac4e						BLOADHandler:
.ac4e		a2 00		ldx #$00			ldx 	#0
.ac50		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; file name to load
.ac53		20 d4 93	jsr $93d4			jsr 	CheckComma 					; consume comma
.ac56		e8		inx				inx
.ac57		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; load address (full physical address)
.ac5a		5a		phy				phy
.ac5b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ac5d		a6 60		ldx $60				ldx 	NSMantissa1
.ac5f		20 e6 83	jsr $83e6			jsr 	KNLOpenFileRead 			; open file for reading
.ac62		b0 50		bcs $acb4			bcs 	_BLErrorExit 				; error, so fail.
.ac64		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ac67		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ac69		20 b6 ac	jsr $acb6			jsr 	BLOpenPhysicalMemory 		; open for access.
.ac6c						_BLReadFile:
.ac6c		ad dc 07	lda $07dc			lda 	BasicFileStream
.ac6f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ac71		20 3b 84	jsr $843b			jsr 	KNLReadBlock 				; read next block
.ac74		b0 22		bcs $ac98			bcs 	_BLFileError 				; file error, which might be EOF.
.ac76		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.ac78		f0 f2		beq $ac6c			beq 	_BLReadFile
.ac7a		8d da 07	sta $07da			sta 	BLCopyCounter 				; counter.
.ac7d		ac d9 07	ldy $07d9			ldy 	BLYOffset 					; copy the buffer out here
.ac80		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.ac82						_BLCopyLoop:
.ac82		bd ba 06	lda $06ba,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.ac85		91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac87		c8		iny				iny
.ac88		d0 03		bne $ac8d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.ac8a		20 de ac	jsr $acde			jsr 	BLAdvancePhysicalMemory
.ac8d						_BLNoAdjust:
.ac8d		e8		inx				inx
.ac8e		ce da 07	dec $07da			dec 	BLCopyCounter
.ac91		d0 ef		bne $ac82			bne 	_BLCopyLoop
.ac93		8c d9 07	sty $07d9			sty 	BLYOffset 					; update Y offset
.ac96		80 d4		bra $ac6c			bra 	_BLReadFile 				; go ask for more.
.ac98						_BLFileError:
.ac98		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ac9a		d0 0d		bne $aca9			bne 	_BLErrorHandler				; no, it's an actual error
.ac9c		20 d8 ac	jsr $acd8			jsr 	BLClosePhysicalMemory 		; close the access.
.ac9f		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the file
.aca2		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.aca5		a9 00		lda #$00			lda 	#0 							; and return zero.
.aca7		7a		ply				ply
.aca8		60		rts				rts
.aca9						_BLErrorHandler:
.aca9		48		pha				pha 								; save code
.acaa		20 d8 ac	jsr $acd8			jsr 	BLClosePhysicalMemory 		; close access
.acad		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the open file
.acb0		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.acb3		68		pla				pla 								; get error code
.acb4						_BLErrorExit:
.acb4		7a		ply				ply 								; restore position and exit.
.acb5		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.acb6						BLOpenPhysicalMemory:
.acb6		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.acb8		8d d8 07	sta $07d8			sta 	BLNormalMapping
.acbb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.acbd		8d d9 07	sta $07d9			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.acc0		64 3a		stz $3a				stz 	zTemp2
.acc2		b5 60		lda $60,x			lda 	NSMantissa1,x
.acc4		29 1f		and #$1f			and 	#$1F
.acc6		09 60		ora #$60			ora 	#BLAccessPage << 5
.acc8		85 3b		sta $3b				sta 	zTemp2+1
.acca		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.accc		16 60		asl $60,x			asl 	NSMantissa1,x
.acce		2a		rol a				rol 	a
.accf		16 60		asl $60,x			asl 	NSMantissa1,x
.acd1		2a		rol a				rol 	a
.acd2		16 60		asl $60,x			asl 	NSMantissa1,x
.acd4		2a		rol a				rol 	a
.acd5		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.acd7		60		rts				rts
.acd8						BLClosePhysicalMemory:
.acd8		ad d8 07	lda $07d8			lda 	BLNormalMapping
.acdb		85 0b		sta $0b				sta 	BLAccessPage+8
.acdd		60		rts				rts
.acde						BLAdvancePhysicalMemory:
.acde		48		pha				pha
.acdf		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ace1		a5 3b		lda $3b				lda 	zTemp2+1
.ace3		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ace5		d0 06		bne $aced			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ace7		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ace9		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.aceb		85 3b		sta $3b				sta 	zTemp2+1
.aced						_BLAPMExit:
.aced		68		pla				pla
.acee		60		rts				rts
.07d8						BLNormalMapping:
>07d8								.fill 	1
.07d9						BLYOffset:
>07d9								.fill 	1
.07da						BLCopyCounter:
>07da								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.acef						Command_BSave:
.acef		20 fa ac	jsr $acfa			jsr 	BSaveHandler
.acf2		c9 00		cmp #$00			cmp 	#0
.acf4		d0 01		bne $acf7			bne 	_BSError
.acf6		60		rts				rts
.acf7						_BSError:
.acf7		4c 9d ae	jmp $ae9d			jmp 	CLErrorHandler
.acfa						BSaveHandler:
.acfa		a2 00		ldx #$00			ldx 	#0
.acfc		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; file name to load
.acff		20 d4 93	jsr $93d4			jsr 	CheckComma 					; consume comma
.ad02		e8		inx				inx
.ad03		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; load address (full physical address)
.ad06		20 d4 93	jsr $93d4			jsr 	CheckComma 					; consume comma
.ad09		e8		inx				inx
.ad0a		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger 			; data length (3 bytes only)
.ad0d		5a		phy				phy
.ad0e		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ad10		a6 60		ldx $60				ldx 	NSMantissa1
.ad12		20 e1 83	jsr $83e1			jsr 	KNLOpenFileWrite 			; open file for reading
.ad15		b0 47		bcs $ad5e			bcs 	_BSErrorExit 				; error, so fail.
.ad17		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ad1a		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ad1c		20 b6 ac	jsr $acb6			jsr 	BLOpenPhysicalMemory 		; open for access.
.ad1f		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.ad21		ac d9 07	ldy $07d9			ldy 	BLYOffset 					; used for data offset.
.ad24						_BSWriteToFileLoop:
.ad24		38		sec				sec 								; pre decrement count.
.ad25		a5 5a		lda $5a				lda 	NSMantissa0+2
.ad27		e9 01		sbc #$01			sbc 	#1
.ad29		85 5a		sta $5a				sta 	NSMantissa0+2
.ad2b		a5 62		lda $62				lda 	NSMantissa1+2
.ad2d		e9 00		sbc #$00			sbc 	#0
.ad2f		85 62		sta $62				sta 	NSMantissa1+2
.ad31		a5 6a		lda $6a				lda 	NSMantissa2+2
.ad33		e9 00		sbc #$00			sbc 	#0
.ad35		85 6a		sta $6a				sta 	NSMantissa2+2
.ad37		30 15		bmi $ad4e			bmi 	_BSFileComplete 			; undercounted, so exit.
.ad39		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.ad3b		9d ba 06	sta $06ba,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.ad3e		e8		inx				inx
.ad3f		c8		iny				iny 								; next byte
.ad40		d0 03		bne $ad45			bne 	_BSNoCheck
.ad42		20 de ac	jsr $acde			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.ad45						_BSNoCheck:
.ad45		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.ad47		d0 db		bne $ad24			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.ad49		20 60 ad	jsr $ad60			jsr 	BSFlushBuffer 				; yes, flush the buffer
.ad4c		80 d6		bra $ad24			bra 	_BSWriteToFileLoop 			; and keep on going
.ad4e						_BSFileComplete:
.ad4e		20 60 ad	jsr $ad60			jsr 	BSFlushBuffer 				; write the buffer remainder.
.ad51		20 d8 ac	jsr $acd8			jsr 	BLClosePhysicalMemory 		; close the access.
.ad54		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the file
.ad57		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.ad5a		a9 00		lda #$00			lda 	#0
.ad5c		7a		ply				ply
.ad5d		60		rts				rts
.ad5e						_BSErrorExit:
.ad5e		7a		ply				ply
.ad5f		60		rts				rts
.ad60						BSFlushBuffer:
.ad60		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.ad62		f0 0d		beq $ad71			beq 	_BSFBExit 					; if so, exit.
.ad64		a9 ba		lda #$ba			lda 	#KNLReadBuffer & $FF 		; where to write from.
.ad66		85 36		sta $36				sta 	zTemp0
.ad68		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.ad6a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.ad6c		20 5c af	jsr $af5c			jsr 	CLWriteByteBlock 			; write it.
.ad6f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.ad71						_BSFBExit:
.ad71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.ad72						Command_Dir:
.ad72		ad ba 07	lda $07ba			lda     KNLDefaultDrive				; set drive to list.
.ad75		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.ad77		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.ad79		20 78 ff	jsr $ff78			jsr     kernel.Directory.Open
.ad7c		b0 4f		bcs $adcd			bcs     _CDExit
.ad7e						_CDEventLoop:
.ad7e		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.ad81		20 9d 82	jsr $829d			jsr     GetNextEvent
.ad84		b0 f8		bcs $ad7e			bcs     _CDEventLoop
.ad86		ad bb 07	lda $07bb			lda     KNLEvent.type
.ad89		c9 46		cmp #$46			cmp     #kernel.event.directory.CLOSED
.ad8b		f0 40		beq $adcd			beq    	_CDExit
.ad8d		20 92 ad	jsr $ad92			jsr     _CDMessages 				; handle various messages
.ad90		80 ec		bra $ad7e			bra     _CDEventLoop
.ad92						_CDMessages:
.ad92		c9 3c		cmp #$3c			cmp     #kernel.event.directory.OPENED
.ad94		f0 15		beq $adab			beq     _CDEVRead
.ad96		c9 3e		cmp #$3e			cmp     #kernel.event.directory.VOLUME
.ad98		f0 19		beq $adb3			beq     _CDEVVolume
.ad9a		c9 40		cmp #$40			cmp     #kernel.event.directory.FILE
.ad9c		f0 32		beq $add0			beq     _CDEVFile
.ad9e		c9 42		cmp #$42			cmp     #kernel.event.directory.FREE
.ada0		f0 70		beq $ae12			beq     _CDEVFree
.ada2		c9 44		cmp #$44			cmp     #kernel.event.directory.EOF
.ada4		f0 6e		beq $ae14			beq     _CDEVEOF
.ada6		c9 48		cmp #$48			cmp     #kernel.event.directory.ERROR
.ada8		f0 6a		beq $ae14			beq     _CDEVEOF
.adaa		60		rts				rts
.adab						_CDEVRead:
.adab		ad be 07	lda $07be			lda     KNLEvent.directory.stream
.adae		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.adb0		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Read
.adb3						_CDEVVolume:
.adb3		a9 5b		lda #$5b			lda 	#"["
.adb5		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adb8		ad c0 07	lda $07c0			lda     KNLEvent.directory.volume.len
.adbb		20 1c ae	jsr $ae1c			jsr     _CDReadData
.adbe		20 44 94	jsr $9444			jsr 	PrintStringXA
.adc1		a9 5d		lda #$5d			lda 	#"]"
.adc3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adc6		a9 0d		lda #$0d			lda 	#13
.adc8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adcb		80 de		bra $adab			bra     _CDEVRead
.adcd						_CDExit:
.adcd		4c 1e 88	jmp $881e			jmp 	WarmStart
.add0						_CDEVFile:
.add0		a9 20		lda #$20			lda 	#32
.add2		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.add5		ad c0 07	lda $07c0			lda     KNLEvent.directory.file.len
.add8		48		pha				pha
.add9		20 1c ae	jsr $ae1c			jsr     _CDReadData
.addc		20 44 94	jsr $9444			jsr 	PrintStringXA
.addf		68		pla				pla
.ade0		49 ff		eor #$ff			eor 	#$FF
.ade2		38		sec				sec
.ade3		69 10		adc #$10			adc 	#16
.ade5		aa		tax				tax
.ade6						_CDEVTab:
.ade6		a9 20		lda #$20			lda 	#32
.ade8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adeb		ca		dex				dex
.adec		10 f8		bpl $ade6			bpl 	_CDEVTab
.adee		20 33 ae	jsr $ae33			jsr 	_CDReadExtended
.adf1		ad 46 05	lda $0546			lda 	lineBuffer
.adf4		ae 47 05	ldx $0547			ldx 	lineBuffer+1
.adf7		20 5a 98	jsr $985a			jsr 	ConvertInt16
.adfa		20 44 94	jsr $9444			jsr 	PrintStringXA
.adfd		a2 ae		ldx #$ae			ldx 	#_CDEVFMessage >> 8
.adff		a9 06		lda #$06			lda 	#_CDEVFMessage & $FF
.ae01		20 44 94	jsr $9444			jsr 	PrintStringXA
.ae04		80 a5		bra $adab			bra     _CDEVRead
.ae06						_CDEVFMessage:
>ae06		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>ae0e		29 2e 0d 00
.ae12						_CDEVFree:
.ae12		80 00		bra $ae14			bra     _CDEVEOF
.ae14						_CDEVEOF:
.ae14		ad be 07	lda $07be			lda     KNLEvent.directory.stream
.ae17		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ae19		4c 80 ff	jmp $ff80			jmp     kernel.Directory.Close
.ae1c						_CDReadData:
.ae1c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ae1e		a9 46		lda #$46			lda     #lineBuffer & $FF
.ae20		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ae22		a9 05		lda #$05			lda     #lineBuffer >> 8
.ae24		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ae26		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.ae29		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.ae2b		9e 46 05	stz $0546,x			stz     lineBuffer,x
.ae2e		a9 46		lda #$46			lda 	#lineBuffer & $FF
.ae30		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ae32		60		rts				rts
.ae33						_CDReadExtended:
.ae33		a9 02		lda #$02			lda     #2
.ae35		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ae37		a9 46		lda #$46			lda     #lineBuffer & $FF
.ae39		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ae3b		a9 05		lda #$05			lda     #lineBuffer >> 8
.ae3d		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ae3f		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.ae42						Command_Drive:
.ae42		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.ae45		20 dd 83	jsr $83dd			jsr 	KNLSetDrive
.ae48		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.ae49						Command_Load:
.ae49		20 4f ae	jsr $ae4f			jsr 	LoadFile
.ae4c		4c 1e 88	jmp $881e			jmp 	WarmStart
.ae4f						LoadFile:
.ae4f		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; file name to load
.ae52		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae54		a5 36		lda $36				lda 	zTemp0
.ae56		20 e6 83	jsr $83e6			jsr 	KNLOpenFileRead 			; open file for reading
.ae59		b0 42		bcs $ae9d			bcs 	CLErrorHandler 				; error, so fail.
.ae5b		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ae5e		20 ed ae	jsr $aeed			jsr     LoadReadByteInit            ; Init reader with the stream
.ae61		20 1b 8e	jsr $8e1b			jsr 	NewProgram 					; does the actual NEW.
.ae64		9c db 07	stz $07db			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae67						_CLLoop:
.ae67		20 ab ae	jsr $aeab			jsr 	LoadReadLine 				; get next line.
.ae6a		f0 10		beq $ae7c			beq 	_CLExit 					; end, exit.
.ae6c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae6f		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.ae72		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.ae75		f0 f0		beq $ae67			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.ae77		20 f9 87	jsr $87f9			jsr 	EditProgramCode 			; do the editing etc.
.ae7a		80 eb		bra $ae67			bra 	_CLLoop
.ae7c						_CLExit:
.ae7c		ad dc 07	lda $07dc			lda 	BasicFileStream
.ae7f		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.ae82						CLComplete:
.ae82		a9 8a		lda #$8a			lda 	#_CLCMsg & $FF
.ae84		a2 ae		ldx #$ae			ldx 	#_CLCMsg >> 8
.ae86		20 44 94	jsr $9444			jsr 	PrintStringXA
.ae89		60		rts				rts
.ae8a						_CLCMsg:
>ae8a		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>ae92		2e 0d 00
.ae95						CLCloseError:
.ae95		48		pha				pha
.ae96		ad dc 07	lda $07dc			lda 	BasicFileStream
.ae99		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.ae9c		68		pla				pla
.ae9d						CLErrorHandler:
.ae9d		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ae9f		f0 05		beq $aea6			beq 	_CLEHNotFound
.aea1		a9 1a		lda #$1a		lda	#26
.aea3		4c e5 93	jmp $93e5		jmp	ErrorHandler
.aea6						_CLEHNotFound:
.aea6		a9 19		lda #$19		lda	#25
.aea8		4c e5 93	jmp $93e5		jmp	ErrorHandler
.aeab						LoadReadLine:
.aeab		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.aead		20 c7 ae	jsr $aec7			jsr 	LoadReadCharacter
.aeb0		f0 14		beq $aec6			beq 	_LRLExit 					; eof ?
.aeb2		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.aeb4		90 f5		bcc $aeab			bcc 	LoadReadLine
.aeb6						_LRLLoop:
.aeb6		9d 46 05	sta $0546,x			sta 	lineBuffer,x 				; write into line buffer
.aeb9		9e 47 05	stz $0547,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.aebc		e8		inx				inx
.aebd		20 c7 ae	jsr $aec7			jsr 	LoadReadCharacter 			; next line
.aec0		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.aec2		b0 f2		bcs $aeb6			bcs 	_LRLLoop
.aec4		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.aec6						_LRLExit:
.aec6		60		rts				rts
.aec7						LoadReadCharacter:
.aec7		da		phx				phx
.aec8		5a		phy				phy
.aec9		ad db 07	lda $07db			lda 	LoadEOFFlag 				; already done EOF.
.aecc		d0 0c		bne $aeda			bne 	_LRCIsEOF
.aece		20 f7 ae	jsr $aef7			jsr 	LoadReadByte 				; read a byte
.aed1		90 09		bcc $aedc			bcc		_LRCExit 					; read okay.
.aed3		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.aed5		d0 be		bne $ae95			bne 	CLCloseError
.aed7		ce db 07	dec $07db			dec 	LoadEOFFlag
.aeda						_LRCIsEOF:
.aeda		a9 00		lda #$00			lda 	#0
.aedc						_LRCExit:
.aedc		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.aede		d0 02		bne $aee2			bne 	_LRCNotTab
.aee0		a9 20		lda #$20			lda 	#' '
.aee2						_LRCNotTab:
.aee2		c9 0a		cmp #$0a			cmp 	#$0A
.aee4		d0 02		bne $aee8			bne 	_LRCNotLF
.aee6		a9 0d		lda #$0d			lda 	#$0D
.aee8						_LRCNotLF:
.aee8		7a		ply				ply
.aee9		fa		plx				plx
.aeea		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.aeec		60		rts				rts
.aeed						LoadReadByteInit:
.aeed		8d dd 07	sta $07dd			sta     LoadFileStream 				; save stream
.aef0		9c de 07	stz $07de			stz     LoadNextCharacter 			; reset buffer
.aef3		9c df 07	stz $07df			stz     LoadEndCharacter
.aef6		60		rts				rts
.aef7						LoadReadByte:
.aef7		da		phx				phx
.aef8		ae de 07	ldx $07de			ldx     LoadNextCharacter 					; all data consumed ?
.aefb		ec df 07	cpx $07df			cpx     LoadEndCharacter
.aefe		d0 12		bne $af12			bne     _KNLRBGetNextByte
.af00		ad dd 07	lda $07dd			lda     LoadFileStream
.af03		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.af05		20 3b 84	jsr $843b			jsr     KNLReadBlock 				; read next chunk from the stream
.af08		b0 0f		bcs $af19			bcs     _KNLRBError 				; error has occurred on read.
.af0a		8d df 07	sta $07df			sta     LoadEndCharacter 						; # read is the number available
.af0d		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.af0f		8e de 07	stx $07de			stx     LoadNextCharacter
.af12						_KNLRBGetNextByte:
.af12		bd ba 06	lda $06ba,x			lda     KNLReadBuffer,x 			; get the next data item
.af15		ee de 07	inc $07de			inc     LoadNextCharacter 					; and advance the index
.af18		18		clc				clc 								; succeeded
.af19						_KNLRBError:
.af19		fa		plx				plx
.af1a		60		rts				rts
.07db						LoadEOFFlag:
>07db								.fill 	1
.07dc						BasicFileStream:
>07dc								.fill 	1
.07dd						LoadFileStream:
>07dd								.byte   ?
.07de						LoadNextCharacter:
>07de								.byte   ?
.07df						LoadEndCharacter:
>07df								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.af1b						Command_Save:
.af1b		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; file name to load
.af1e		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.af20		a5 36		lda $36				lda 	zTemp0
.af22		20 e1 83	jsr $83e1			jsr 	KNLOpenFileWrite 			; open file for writing
.af25		b0 32		bcs $af59			bcs 	CSErrorHandler 				; error, so fail.
.af27		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.af2a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af2c		85 30		sta $30				sta 	codePtr
.af2e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af30		85 31		sta $31				sta 	codePtr+1
.af32						_CSLoop:
.af32		b2 30		lda ($30)			lda 	(codePtr)
.af34		f0 17		beq $af4d			beq 	_CSExit
.af36		20 7d af	jsr $af7d			jsr 	CSGetCleanLine
.af39		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.af3b		85 36		sta $36				sta 	zTemp0
.af3d		20 5c af	jsr $af5c			jsr 	CLWriteByteBlock 			; write the block out.
.af40		18		clc				clc
.af41		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.af43		65 30		adc $30				adc 	codePtr
.af45		85 30		sta $30				sta 	codePtr
.af47		90 02		bcc $af4b			bcc 	_CREExit
.af49		e6 31		inc $31				inc 	codePtr+1 					; carry
.af4b						_CREExit:
.af4b		80 e5		bra $af32			bra 	_CSLoop
.af4d						_CSExit:
.af4d		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close file
.af50		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.af53		20 82 ae	jsr $ae82			jsr 	CLComplete 					; display complete message.
.af56		4c 1e 88	jmp $881e			jmp 	WarmStart 					; and warm start
.af59						CSErrorHandler:
.af59		4c 9d ae	jmp $ae9d			jmp 	CLErrorHandler
.af5c						CLWriteByteBlock:
.af5c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.af5e		f0 1c		beq $af7c			beq 	_CLWBBExit					; if so, exit
.af60		ad dc 07	lda $07dc			lda 	BasicFileStream 			; stream to write, count in X
.af63		20 76 84	jsr $8476			jsr 	KNLWriteBlock 				; call one write attempt
.af66		b0 f1		bcs $af59			bcs 	CSErrorHandler 				; error occurred
.af68		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.af6a		8a		txa				txa 								; subtract bytes written from X, total count.
.af6b		38		sec				sec
.af6c		e5 38		sbc $38				sbc 	zTemp1
.af6e		aa		tax				tax
.af6f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.af70		a5 36		lda $36				lda 	zTemp0
.af72		65 38		adc $38				adc 	zTemp1
.af74		85 36		sta $36				sta 	zTemp0
.af76		90 e4		bcc $af5c			bcc 	CLWriteByteBlock
.af78		e6 37		inc $37				inc 	zTemp0+1
.af7a		80 e0		bra $af5c			bra 	CLWriteByteBlock 			; and retry write out.
.af7c						_CLWBBExit:
.af7c		60		rts				rts
.af7d						CSGetCleanLine:
.af7d		a9 00		lda #$00			lda 	#0 							; no indent.
.af7f		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.af82		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.af84		a0 00		ldy #$00			ldy 	#0
.af86						_CSClean:
.af86		b9 49 04	lda $0449,y			lda 	tokenBuffer,y
.af89		f0 09		beq $af94			beq 	_CSDoneClean
.af8b		30 04		bmi $af91			bmi 	_CSIgnoreCharacter
.af8d		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.af90		e8		inx				inx
.af91						_CSIgnoreCharacter:
.af91		c8		iny				iny
.af92		80 f2		bra $af86			bra 	_CSClean
.af94						_CSDoneClean:
.af94		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.af96		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.af99		e8		inx				inx
.af9a		9e 46 05	stz $0546,x			stz 	lineBuffer,x
.af9d		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.af9f		a9 46		lda #$46			lda 	#(lineBuffer & $FF)
.afa1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.afa2						Command_Try:
.afa2		b1 30		lda ($30),y			lda 	(codePtr),y
.afa4		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.afa6		d0 0c		bne $afb4			bne 	_TrySyntax
.afa8		c8		iny				iny 								; get second
.afa9		b1 30		lda ($30),y			lda 	(codePtr),y
.afab		c8		iny				iny 								; and consume it.
.afac		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.afae		f0 09		beq $afb9			beq 	_TryBLoad
.afb0		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.afb2		f0 0a		beq $afbe			beq 	_TryBSave
.afb4						_TrySyntax:
.afb4		a9 02		lda #$02		lda	#2
.afb6		4c e5 93	jmp $93e5		jmp	ErrorHandler
.afb9						_TryBLoad:
.afb9		20 4e ac	jsr $ac4e			jsr 	BLOADHandler
.afbc		80 03		bra $afc1			bra 	_TryExit
.afbe						_TryBSave:
.afbe		20 fa ac	jsr $acfa			jsr 	BSaveHandler
.afc1						_TryExit:
.afc1		48		pha				pha 								; save result
.afc2		b1 30		lda ($30),y			lda 	(codePtr),y
.afc4		c8		iny				iny
.afc5		c9 dc		cmp #$dc			cmp 	#KWD_TO
.afc7		d0 eb		bne $afb4			bne 	_TrySyntax
.afc9		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.afcb		20 39 9d	jsr $9d39			jsr 	EvaluateTerm
.afce		b5 50		lda $50,x			lda 	NSStatus,x
.afd0		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.afd2		d0 e0		bne $afb4			bne		_TrySyntax
.afd4		68		pla				pla 								; error code.
.afd5		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.afd7		20 47 a3	jsr $a347			jsr 	NSMSetByte
.afda		ca		dex				dex
.afdb		20 2a 8c	jsr $8c2a			jsr 	AssignVariable 				; do the assign and exit
.afde		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e779						m
.afdf						Command_VERIFY:
.afdf		20 9d a2	jsr $a29d			jsr 	EvaluateString 				; file name to verify
.afe2		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.afe4		a5 36		lda $36				lda 	zTemp0
.afe6		20 e6 83	jsr $83e6			jsr 	KNLOpenFileRead 			; open file for reading
.afe9		b0 4b		bcs $b036			bcs 	_CVErrorHandler 			; error, so fail.
.afeb		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.afee		20 ed ae	jsr $aeed			jsr     LoadReadByteInit            ; Init reader with the stream
.aff1		9c db 07	stz $07db			stz 	LoadEOFFlag 				; clear EOF Flag.
.aff4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aff6		85 30		sta $30				sta 	codePtr
.aff8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.affa		85 31		sta $31				sta 	codePtr+1
.affc						_CVLoop:
.affc		20 ab ae	jsr $aeab			jsr 	LoadReadLine 				; get next line.
.afff		f0 27		beq $b028			beq 	_CVExit 					; end, exit.
.b001		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.b004		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.b007		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.b00a		f0 f0		beq $affc			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b00c		a0 00		ldy #$00			ldy 	#0 							; start compare
.b00e						_CVCompareLoop:
.b00e		b1 30		lda ($30),y			lda 	(codePtr),y
.b010		d9 46 04	cmp $0446,y			cmp 	tokenOffset,y 				; compare against actual code.
.b013		d0 1c		bne $b031			bne 	_CVCompareError
.b015		c8		iny				iny
.b016		cc 46 04	cpy $0446			cpy 	tokenOffset 				; until done whole line of code
.b019		d0 f3		bne $b00e			bne 	_CVCompareLoop
.b01b		18		clc				clc
.b01c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b01e		65 30		adc $30				adc 	codePtr
.b020		85 30		sta $30				sta 	codePtr
.b022		90 02		bcc $b026			bcc 	_CREExit
.b024		e6 31		inc $31				inc 	codePtr+1 					; carry
.b026						_CREExit:
.b026		80 d4		bra $affc			bra 	_CVLoop
.b028						_CVExit:
.b028		ad dc 07	lda $07dc			lda 	BasicFileStream
.b02b		20 b0 84	jsr $84b0			jsr 	KNLCloseFile
.b02e		4c 82 ae	jmp $ae82			jmp 	CLComplete
.b031						_CVCompareError:
.b031		a9 1b		lda #$1b		lda	#27
.b033		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b036						_CVErrorHandler:
.b036		4c 9d ae	jmp $ae9d			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.b039						UnaryJoyX:
.b039		18		clc				clc
.b03a		80 01		bra $b03d			bra 	JoyMain
.b03c						UnaryJoyY:
.b03c		38		sec				sec
.b03d						JoyMain:
.b03d		fa		plx				plx 								; get pos
.b03e		08		php				php 								; save carry (set for Y)
.b03f		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b042		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b045		20 b6 84	jsr $84b6			jsr 	KNLReadController 			; read the controller.
.b048		28		plp				plp
.b049		b0 02		bcs $b04d			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.b04b		4a		lsr a				lsr 	a
.b04c		4a		lsr a				lsr 	a
.b04d						_JMNoShift:
.b04d		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.b04e		b0 07		bcs $b057			bcs 	JMIsLeft
.b050		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.b051		b0 07		bcs $b05a			bcs 	JMIsRight
.b053		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; zero result
.b056		60		rts				rts
.b057						JMIsLeft:
.b057		4c 58 94	jmp $9458			jmp 	ReturnTrue
.b05a						JMIsRight:
.b05a		a9 01		lda #$01			lda 	#1
.b05c		20 47 a3	jsr $a347			jsr 	NSMSetByte
.b05f		60		rts				rts
.b060						UnaryJoyB:
.b060		fa		plx				plx 								; get pos
.b061		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b064		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b067		20 b6 84	jsr $84b6			jsr 	KNLReadController 			; read the controller.
.b06a		29 10		and #$10			and 	#$10
.b06c		d0 e9		bne $b057			bne 	JMIsLeft
.b06e		20 45 a3	jsr $a345			jsr 	NSMSetZero
.b071		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.b072						MCCommand:
.b072		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.b074		48		pha				pha
.b075		64 01		stz $01				stz 	1
.b077		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.b07a		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.b07c		8d e0 07	sta $07e0			sta 	DMAControlByte
.b07f		20 2d b1	jsr $b12d			jsr 	MCPosition 					; start position
.b082		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.b084		20 fe b0	jsr $b0fe			jsr 	MCCopyAddress
.b087		a2 08		ldx #$08			ldx 	#8
.b089		20 fe b0	jsr $b0fe			jsr 	MCCopyAddress
.b08c		b1 30		lda ($30),y			lda 	(codePtr),y
.b08e		c8		iny				iny
.b08f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.b091		f0 09		beq $b09c			beq 	_MCSize1D
.b093		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.b095		f0 11		beq $b0a8			beq 	_MCRect2D
.b097						_MCSyntax:
.b097		a9 02		lda #$02		lda	#2
.b099		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b09c						_MCSize1D:
.b09c		a2 00		ldx #$00			ldx 	#0 							; get size
.b09e		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger
.b0a1		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.b0a3		20 fe b0	jsr $b0fe			jsr 	MCCopyAddress
.b0a6		80 24		bra $b0cc			bra 	_MCDestination
.b0a8						_MCRect2D:
.b0a8		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.b0aa		20 1b b1	jsr $b11b			jsr 	MCEvalCopyData16
.b0ad		20 d4 93	jsr $93d4			jsr 	CheckComma
.b0b0		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.b0b2		20 1b b1	jsr $b11b			jsr 	MCEvalCopyData16
.b0b5		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.b0b7		20 dc 93	jsr $93dc			jsr 	CheckNextA
.b0ba		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.b0bc		20 1b b1	jsr $b11b			jsr 	MCEvalCopyData16
.b0bf		a2 12		ldx #$12			ldx 	#$12
.b0c1		20 22 b1	jsr $b122			jsr 	MCCopyData16
.b0c4		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.b0c7		09 02		ora #$02			ora 	#$02
.b0c9		8d e0 07	sta $07e0			sta 	DMAControlByte
.b0cc						_MCDestination:
.b0cc		b1 30		lda ($30),y			lda 	(codePtr),y
.b0ce		c8		iny				iny
.b0cf		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.b0d1		f0 0e		beq $b0e1			beq 	_MCDestPoke
.b0d3		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.b0d5		d0 c0		bne $b097			bne 	_MCSyntax
.b0d7		20 2d b1	jsr $b12d			jsr 	MCPosition 					; get target address
.b0da		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.b0dc		20 fe b0	jsr $b0fe			jsr 	MCCopyAddress
.b0df		80 0e		bra $b0ef			bra 	_MCDoDMA 					; and we can go.
.b0e1						_MCDestPoke:
.b0e1		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; POKE what
.b0e4		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.b0e7		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.b0ea		09 04		ora #$04			ora 	#$04
.b0ec		8d e0 07	sta $07e0			sta 	DMAControlByte
.b0ef						_MCDoDMA:
.b0ef		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set the DMA Control byte to go !
.b0f2		8d 00 df	sta $df00			sta 	$DF00
.b0f5						_MCWaitBUSD:
.b0f5		ad 01 df	lda $df01			lda 	$DF01
.b0f8		30 fb		bmi $b0f5			bmi 	_MCWaitBUSD
.b0fa		68		pla				pla 								; restore I/O.
.b0fb		85 01		sta $01				sta 	1
.b0fd		60		rts				rts
.b0fe						MCCopyAddress:
.b0fe		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.b100		29 fc		and #$fc			and 	#$FC
.b102		05 70		ora $70				ora 	NSMantissa3
.b104		d0 10		bne $b116			bne 	_MCRange
.b106		a5 58		lda $58				lda 	NSMantissa0
.b108		9d 00 df	sta $df00,x			sta 	$DF00,x
.b10b		a5 60		lda $60				lda 	NSMantissa1
.b10d		9d 01 df	sta $df01,x			sta 	$DF01,x
.b110		a5 68		lda $68				lda 	NSMantissa2
.b112		9d 02 df	sta $df02,x			sta 	$DF02,x
.b115		60		rts				rts
.b116						_MCRange:
.b116		a9 04		lda #$04		lda	#4
.b118		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b11b						MCEvalCopyData16:
.b11b		da		phx				phx
.b11c		a2 00		ldx #$00			ldx 	#0
.b11e		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger
.b121		fa		plx				plx
.b122						MCCopyData16:
.b122		a5 58		lda $58				lda 	NSMantissa0
.b124		9d 00 df	sta $df00,x			sta 	$DF00,x
.b127		a5 60		lda $60				lda 	NSMantissa1
.b129		9d 01 df	sta $df01,x			sta 	$DF01,x
.b12c		60		rts				rts
.b12d						MCPosition:
.b12d		a2 00		ldx #$00			ldx 	#0 							; get start address.
.b12f		b1 30		lda ($30),y			lda 	(codePtr),y
.b131		c9 b9		cmp #$b9			cmp 	#KWD_AT
.b133		f0 04		beq $b139			beq 	_MCPAt
.b135		20 b2 a2	jsr $a2b2			jsr 	EvaluateInteger
.b138		60		rts				rts
.b139						_MCPAt:
.b139		c8		iny				iny
.b13a		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; X position
.b13d		48		pha				pha
.b13e		20 d4 93	jsr $93d4			jsr 	CheckComma
.b141		e8		inx				inx
.b142		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; Y position
.b145		ca		dex				dex
.b146		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.b148		64 58		stz $58				stz 	NSMantissa0
.b14a		64 68		stz $68				stz 	NSMantissa2
.b14c		64 70		stz $70				stz 	NSMantissa3
.b14e		46 60		lsr $60				lsr 	NSMantissa1
.b150		66 58		ror $58				ror 	NSMantissa0
.b152		46 60		lsr $60				lsr 	NSMantissa1
.b154		66 58		ror $58				ror 	NSMantissa0
.b156		68		pla				pla
.b157		18		clc				clc
.b158		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.b15a		85 58		sta $58				sta 	NSMantissa0
.b15c		a5 60		lda $60				lda 	NSMantissa1
.b15e		65 59		adc $59				adc 	NSMantissa0+1
.b160		85 60		sta $60				sta 	NSMantissa1
.b162		90 02		bcc $b166			bcc 	_MCPNoCarry
.b164		e6 68		inc $68				inc 	NSMantissa2
.b166						_MCPNoCarry:
.b166		ad ff 07	lda $07ff			lda 	gxBasePage
.b169		85 69		sta $69				sta 	NSMantissa2+1
.b16b		64 59		stz $59				stz 	NSMantissa0+1
.b16d		64 61		stz $61				stz 	NSMantissa1+1
.b16f		64 71		stz $71				stz 	NSMantissa3+1
.b171		a2 01		ldx #$01			ldx 	#1
.b173		20 5e a3	jsr $a35e			jsr 	NSMShiftRight
.b176		20 5e a3	jsr $a35e			jsr 	NSMShiftRight
.b179		20 5e a3	jsr $a35e			jsr 	NSMShiftRight
.b17c		a2 00		ldx #$00			ldx 	#0
.b17e		20 e5 96	jsr $96e5			jsr 	AddTopTwoStack
.b181		60		rts				rts
.07e0						DMAControlByte:
>07e0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.b182						MouseStatus:
.b182		a9 ff		lda #$ff	        lda     #255
.b184		80 02		bra $b188	        bra     MouseCommand
.b186						MouseDeltaStatus:
.b186		a9 00		lda #$00	        lda     #0
.b188						MouseCommand:
.b188		8d 7f 06	sta $067f	        sta     CMDMouseFlag
.b18b		a2 00		ldx #$00	        ldx     #0
.b18d						_MouseCommandLoop:
.b18d		da		phx		        phx                                 ; save slot.
.b18e		20 ed 98	jsr $98ed	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.b191		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b193		c9 20		cmp #$20	        cmp     #NSBIsReference
.b195		d0 60		bne $b1f7	        bne     _MouseNotRef
.b197		b1 30		lda ($30),y			lda 	(codePtr),y
.b199		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b19b		d0 01		bne $b19e	        bne     _MouseNoSkipComma
.b19d		c8		iny		        iny
.b19e						_MouseNoSkipComma:
.b19e		fa		plx		        plx                                 ; restore X
.b19f		5a		phy		        phy                                 ; save Y
.b1a0		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b1a2		85 36		sta $36		        sta     zTemp0
.b1a4		a5 60		lda $60		        lda     NSMantissa1
.b1a6		85 37		sta $37		        sta     zTemp0+1
.b1a8		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b1aa		a9 00		lda #$00	        lda     #0
.b1ac		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b1ae		88		dey		        dey
.b1af		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b1b1		88		dey		        dey
.b1b2		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b1b4		88		dey		        dey
.b1b5		2c 7f 06	bit $067f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b1b8		30 12		bmi $b1cc	        bmi     _MouseMouseCommand
.b1ba						_MouseMDeltaCommand:
.b1ba		bd a2 06	lda $06a2,x	        lda     MouseDeltaX,x
.b1bd		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b1bf		bd a3 06	lda $06a3,x	        lda     MouseDeltaX+1,x
.b1c2		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b1c4		9e a2 06	stz $06a2,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b1c7		9e a3 06	stz $06a3,x	        stz     MouseDeltaX+1,x
.b1ca		80 0a		bra $b1d6	        bra     _MouseProcessData
.b1cc						_MouseMouseCommand:
.b1cc		bd ae 06	lda $06ae,x	        lda     MousePosX,x
.b1cf		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b1d1		bd af 06	lda $06af,x	        lda     MousePosX+1,x
.b1d4		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b1d6						_MouseProcessData:
.b1d6		b1 36		lda ($36),y	        lda     (zTemp0),y
.b1d8		10 15		bpl $b1ef	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b1da		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b1db		a9 00		lda #$00	        lda     #0
.b1dd		f2 36		sbc ($36)	        sbc     (zTemp0)
.b1df		92 36		sta ($36)	        sta     (zTemp0)
.b1e1		a9 00		lda #$00	        lda     #0
.b1e3		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b1e5		91 36		sta ($36),y	        sta     (zTemp0),y
.b1e7		a0 03		ldy #$03	        ldy     #3
.b1e9		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b1eb		09 80		ora #$80	        ora     #$80
.b1ed		91 36		sta ($36),y	        sta     (zTemp0),y
.b1ef						_MouseDataPos:
.b1ef		7a		ply		        ply                                 ; restore Y.
.b1f0		e8		inx		        inx                                 ; next entry
.b1f1		e8		inx		        inx
.b1f2		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b1f4		d0 97		bne $b18d	        bne     _MouseCommandLoop
.b1f6		60		rts		        rts
.b1f7						_MouseNotRef:
.b1f7		a9 07		lda #$07		lda	#7
.b1f9		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b1fc						CommandSetDate:
.b1fc		a9 03		lda #$03			lda 	#3
.b1fe		80 02		bra $b202			bra 	CSDTMain
.b200						CommandSetTime:
.b200		a9 00		lda #$00			lda 	#0
.b202						CSDTMain:
.b202		48		pha				pha 								; save table offsets 0 or 3
.b203		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b205		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.b208		20 d4 93	jsr $93d4			jsr 	CheckComma
.b20b		e8		inx				inx
.b20c		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.b20f		20 d4 93	jsr $93d4			jsr 	CheckComma
.b212		e8		inx				inx
.b213		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger
.b216		68		pla				pla 								; table offset in Y, saving Y
.b217		5a		phy				phy
.b218		a8		tay				tay
.b219		a2 00		ldx #$00			ldx 	#0 							; first number
.b21b		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b21d		48		pha				pha
.b21e		64 01		stz $01				stz 	1
.b220						_CSDTCopy:
.b220		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b222		d9 64 b2	cmp $b264,y			cmp 	RTCWMinValues,y 			; check range
.b225		90 1b		bcc $b242			bcc 	_CSDTRange
.b227		d9 6a b2	cmp $b26a,y			cmp 	RTCWMaxValues,y
.b22a		b0 16		bcs $b242			bcs 	_CSDTRange
.b22c		20 47 b2	jsr $b247			jsr 	CSDTDecimalToBCD
.b22f		da		phx				phx 								; save X
.b230		be 5e b2	ldx $b25e,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b233		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b236		fa		plx				plx 								; restore X
.b237		e8		inx				inx 								; next number
.b238		c8		iny				iny 								; next table entries
.b239		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b23b		d0 e3		bne $b220			bne 	_CSDTCopy
.b23d		68		pla				pla 								; restore I/O space
.b23e		85 01		sta $01				sta 	1
.b240		7a		ply				ply 								; restore code pos and exit.
.b241		60		rts				rts
.b242						_CSDTRange:
.b242		a9 04		lda #$04		lda	#4
.b244		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b247						CSDTDecimalToBCD:
.b247		da		phx				phx 								; 10 count in X
.b248		a2 00		ldx #$00			ldx 	#0
.b24a						_CSDTDBLoop:
.b24a		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b24c		90 05		bcc $b253			bcc 	_CSDTDBExit
.b24e		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b250		e8		inx				inx 								; one more 10s.
.b251		80 f7		bra $b24a			bra 	_CSDTDBLoop
.b253						_CSDTDBExit:
.b253		85 36		sta $36				sta 	zTemp0 						; units
.b255		8a		txa				txa 								; 10s x 16
.b256		0a		asl a				asl 	a
.b257		0a		asl a				asl 	a
.b258		0a		asl a				asl 	a
.b259		0a		asl a				asl 	a
.b25a		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b25c		fa		plx				plx
.b25d		60		rts				rts
.b25e						RTCWOffset:
>b25e		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b264						RTCWMinValues:
>b264		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b26a						RTCWMaxValues:
>b26a		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b270						UnaryTimer:
.b270		fa		plx				plx
.b271		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b274						TimerToStackX:
.b274		20 45 a3	jsr $a345			jsr 	NSMSetZero 					; zero result
.b277		64 01		stz $01				stz 	1 							; access I/O
.b279		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b27c		95 58		sta $58,x			sta 	NSMantissa0,x
.b27e		ad 5a d6	lda $d65a			lda 	$D65A
.b281		95 60		sta $60,x			sta 	NSMantissa1,x
.b283		ad 5b d6	lda $d65b			lda 	$D65B
.b286		95 68		sta $68,x			sta 	NSMantissa2,x
.b288		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b289						UnaryGetTime:
.b289		a9 00		lda #$00			lda 	#0
.b28b		80 02		bra $b28f			bra 	UGDTMain
.b28d						UnaryGetDate:
.b28d		a9 03		lda #$03			lda 	#3
.b28f						UGDTMain:
.b28f		fa		plx				plx 								; get stack position back
.b290		48		pha				pha 								; save table offset
.b291		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger			; ignored parameter
.b294		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; closing )
.b297		68		pla				pla 								; table offset in A
.b298		5a		phy				phy 								; saving Y
.b299		a8		tay				tay 								; table offset in Y
.b29a		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b29c		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.b29f		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b2a1		48		pha				pha
.b2a2		64 01		stz $01				stz 	1
.b2a4		20 b7 b2	jsr $b2b7			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b2a7		20 b2 b2	jsr $b2b2			jsr 	UGDTColonDigit
.b2aa		20 b2 b2	jsr $b2b2			jsr 	UGDTColonDigit
.b2ad		68		pla				pla 								; restore I/O select
.b2ae		85 01		sta $01				sta 	1
.b2b0		7a		ply				ply  								; restore code position
.b2b1		60		rts				rts
.b2b2						UGDTColonDigit:
.b2b2		a9 3a		lda #$3a			lda 	#':'
.b2b4		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.b2b7						UGDTDigit:
.b2b7		da		phx				phx 								; save X
.b2b8		b9 d7 b2	lda $b2d7,y			lda 	RTCROffset,y 				; get offset in RTC register
.b2bb		aa		tax				tax
.b2bc		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b2bf		39 dd b2	and $b2dd,y			and 	RTCRMask,y 					; and with Mask.
.b2c2		fa		plx				plx
.b2c3		48		pha				pha 								; output in BCD
.b2c4		4a		lsr a				lsr 	a
.b2c5		4a		lsr a				lsr 	a
.b2c6		4a		lsr a				lsr 	a
.b2c7		4a		lsr a				lsr 	a
.b2c8		09 30		ora #$30			ora 	#48
.b2ca		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.b2cd		68		pla				pla
.b2ce		29 0f		and #$0f			and 	#15
.b2d0		09 30		ora #$30			ora 	#48
.b2d2		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.b2d5		c8		iny				iny
.b2d6		60		rts				rts
.b2d7						RTCROffset:
>b2d7		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b2dd						RTCRMask:
>b2dd		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b2e3						AscGet:
.b2e3		fa		plx				plx 								; restore stack pos
.b2e4						AscGet2:
.b2e4		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b2e7		20 ce 81	jsr $81ce			jsr 	KNLGetSingleCharacter
.b2ea		20 47 a3	jsr $a347			jsr 	NSMSetByte
.b2ed		60		rts				rts
.b2ee						_AGBreak:
.b2ee		a9 01		lda #$01		lda	#1
.b2f0		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b2f3						AscInkey:
.b2f3		fa		plx				plx 								; restore stack pos
.b2f4						AscInkey2:
.b2f4		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b2f7		20 ac 81	jsr $81ac			jsr 	KNLGetKeyPressed
.b2fa		20 47 a3	jsr $a347			jsr 	NSMSetByte
.b2fd		60		rts				rts
.b2fe						ChrGet:
.b2fe		fa		plx				plx
.b2ff		20 e4 b2	jsr $b2e4			jsr 	AscGet2
.b302		4c 09 b3	jmp $b309			jmp 	GetInkeyToString
.b305						ChrInkey:
.b305		fa		plx				plx
.b306		20 f4 b2	jsr $b2f4			jsr 	AscInkey2
.b309						GetInkeyToString:
.b309		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b30b		f0 0b		beq $b318			beq 	_GKISNull
.b30d		48		pha				pha
.b30e		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b310		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.b313		68		pla				pla 								; write number to it
.b314		20 c9 b5	jsr $b5c9			jsr 	StringTempWrite
.b317		60		rts				rts
.b318						_GKISNull:
.b318		a9 00		lda #$00			lda 	#0
.b31a		20 90 b5	jsr $b590			jsr 	StringTempAllocate
.b31d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b31e						KeyDown:
.b31e		20 4e 81	jsr $814e			jsr 	ProcessEvents 				; process outstanding events.
.b321		fa		plx				plx 								; restore stack pos
.b322		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; key to check.
.b325		48		pha				pha 								; check right bracket.
.b326		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b329		68		pla				pla
.b32a		20 c9 83	jsr $83c9			jsr 	KeyboardConvertXA 			; get offset and mask.
.b32d		3d 80 06	and $0680,x			and 	KeyStatus,x 				; is it zero ?
.b330		f0 03		beq $b335			beq 	_KeyUp
.b332		4c 58 94	jmp $9458			jmp 	ReturnTrue
.b335		4c 63 94	jmp $9463	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b338						Unary_Random:
.b338		fa		plx				plx
.b339		20 89 b3	jsr $b389			jsr 	URCopyToMantissa  			; put random # in mantissa
.b33c		b1 30		lda ($30),y			lda 	(codePtr),y
.b33e		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b340		f0 08		beq $b34a			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b342		e8		inx				inx
.b343		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b346		ca		dex				dex
.b347		20 aa 95	jsr $95aa			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b34a						_URNoModulus:
.b34a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b34c		74 78		stz $78,x			stz 	NSExponent,x
.b34e		20 cc 93	jsr $93cc			jsr 	CheckRightBracket
.b351		60		rts				rts
.b352						Unary_Rnd:
.b352		fa		plx				plx
.b353		20 93 a2	jsr $a293			jsr 	EvaluateNumber 				; number to use.
.b356		20 cc 93	jsr $93cc			jsr 	CheckRightBracket 			; closing bracket
.b359		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b35b		10 20		bpl $b37d			bpl 	_URDontSeed
.b35d		a5 01		lda $01				lda 	1 							; switch to page 0
.b35f		48		pha				pha
.b360		64 01		stz $01				stz 	1
.b362		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b364		49 17		eor #$17			eor 	#$17
.b366		8d a4 d6	sta $d6a4			sta 	$D6A4
.b369		b5 60		lda $60,x			lda 	NSMantissa1,x
.b36b		49 a5		eor #$a5			eor 	#$A5
.b36d		8d a5 d6	sta $d6a5			sta 	$D6A5
.b370		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b372		8d a6 d6	sta $d6a6			sta 	$D6A6
.b375		a9 01		lda #$01			lda 	#1
.b377		8d a6 d6	sta $d6a6			sta 	$D6A6
.b37a		68		pla				pla
.b37b		85 01		sta $01				sta 	1
.b37d						_URDontSeed:
.b37d		20 89 b3	jsr $b389			jsr 	URCopyToMantissa 			; copy into mantissa
.b380		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b382		95 78		sta $78,x			sta 	NSExponent,x
.b384		a9 08		lda #$08			lda 	#NSTFloat
.b386		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b388		60		rts				rts
.b389						URCopyToMantissa:
.b389		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b38b		48		pha				pha
.b38c		64 01		stz $01				stz 	1
.b38e		a9 01		lda #$01			lda 	#1
.b390		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b393		ad a4 d6	lda $d6a4			lda 	$D6A4
.b396		95 58		sta $58,x			sta 	NSMantissa0,x
.b398		ad a5 d6	lda $d6a5			lda 	$D6A5
.b39b		95 60		sta $60,x			sta 	NSMantissa1,x
.b39d		ad a4 d6	lda $d6a4			lda 	$D6A4
.b3a0		95 68		sta $68,x			sta 	NSMantissa2,x
.b3a2		ad a5 d6	lda $d6a5			lda 	$D6A5
.b3a5		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b3a7		95 70		sta $70,x			sta 	NSMantissa3,x
.b3a9		68		pla				pla
.b3aa		85 01		sta $01				sta 	1
.b3ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b3ad						PingCommand:
.b3ad		5a		phy				phy 								; save pos
.b3ae		a9 01		lda #$01			lda 	#1 						; push channel.
.b3b0		48		pha				pha
.b3b1		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b3b3		a2 06		ldx #$06			ldx 	#6 						; length
.b3b5		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3b7		80 24		bra $b3dd			bra 	SoundEffectCommand
.b3b9						ZapCommand:
.b3b9		5a		phy				phy 								; save pos
.b3ba		a9 01		lda #$01			lda 	#1 						; push channel.
.b3bc		48		pha				pha
.b3bd		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b3bf		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3c1		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b3c3		80 18		bra $b3dd			bra 	SoundEffectCommand
.b3c5						ShootCommand:
.b3c5		5a		phy				phy 								; save pos
.b3c6		a9 03		lda #$03			lda 	#3 						; push channel.
.b3c8		48		pha				pha
.b3c9		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b3cb		a2 04		ldx #$04			ldx 	#4 						; length
.b3cd		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3cf		80 0c		bra $b3dd			bra 	SoundEffectCommand
.b3d1						Explode:
.b3d1		5a		phy				phy 								; save pos
.b3d2		a9 03		lda #$03			lda 	#3 						; push channel.
.b3d4		48		pha				pha
.b3d5		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b3d7		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3d9		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3db		80 00		bra $b3dd			bra 	SoundEffectCommand
.b3dd						SoundEffectCommand:
.b3dd		8d e1 07	sta $07e1			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b3e0		9c e2 07	stz $07e2			stz 	SoundCommandBlock+1
.b3e3		a9 0f		lda #$0f			lda 	#15
.b3e5		8d e3 07	sta $07e3			sta 	SoundCommandBlock+2
.b3e8		8e e4 07	stx $07e4			stx 	SoundCommandBlock+3
.b3eb		8c e5 07	sty $07e5			sty 	SoundCommandBlock+4
.b3ee		9c e6 07	stz $07e6			stz 	SoundCommandBlock+5
.b3f1		68		pla				pla
.b3f2		09 10		ora #$10			ora 	#$10  						; execute command $11
.b3f4		a2 e1		ldx #$e1			ldx 	#(SoundCommandBlock & $FF)
.b3f6		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b3f8		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3fb		7a		ply				ply
.b3fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b3fd						UnaryPlaying:
.b3fd		fa		plx				plx
.b3fe		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; get channel #
.b401		48		pha				pha
.b402		20 cc 93	jsr $93cc			jsr		CheckRightBracket
.b405		68		pla				pla
.b406		c9 04		cmp #$04			cmp 	#4
.b408		b0 0c		bcs $b416			bcs 	_UPNotPlaying
.b40a		09 20		ora #$20			ora 	#$20 						; query playing ?
.b40c		20 6b 80	jsr $806b			jsr 	SNDCommand
.b40f		c9 00		cmp #$00			cmp 	#0
.b411		f0 03		beq $b416			beq 	_UPNotPlaying
.b413		4c 58 94	jmp $9458			jmp 	ReturnTrue
.b416						_UPNotPlaying:
.b416		4c 63 94	jmp $9463			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b419						SoundCommand:
.b419		b1 30		lda ($30),y			lda 	(codePtr),y
.b41b		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b41d		d0 09		bne $b428			bne 	_SNDMain
.b41f		c8		iny				iny 								; skip OFF
.b420		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b422		5a		phy				phy
.b423		20 6b 80	jsr $806b			jsr 	SNDCommand
.b426		7a		ply				ply
.b427		60		rts				rts
.b428						_SNDMain:
.b428		a2 00		ldx #$00			ldx 	#0
.b42a		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; channel
.b42d		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b42f		b0 4b		bcs $b47c			bcs 	_SndError
.b431		e8		inx				inx 								; do the rest in slot 1.
.b432		20 d4 93	jsr $93d4			jsr 	CheckComma
.b435		20 c5 a2	jsr $a2c5			jsr 	Evaluate16BitInteger 		; Pitch
.b438		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b43a		c9 10		cmp #$10			cmp 	#16
.b43c		b0 3e		bcs $b47c			bcs 	_SndError
.b43e		8d e2 07	sta $07e2			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b441		b5 58		lda $58,x			lda 	NSMantissa0,x
.b443		8d e1 07	sta $07e1			sta 	SoundCommandBlock
.b446		20 d4 93	jsr $93d4			jsr 	CheckComma
.b449		20 e0 a2	jsr $a2e0			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b44c		8d e4 07	sta $07e4			sta 	SoundCommandBlock+3
.b44f		a9 0f		lda #$0f			lda 	#15
.b451		8d e3 07	sta $07e3			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b454		9c e5 07	stz $07e5			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b457		9c e6 07	stz $07e6			stz 	SoundCommandBlock+5
.b45a		b1 30		lda ($30),y			lda 	(codePtr),y
.b45c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b45e		d0 0e		bne $b46e			bne 	_SNDPlay
.b460		c8		iny				iny
.b461		20 cf a2	jsr $a2cf			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b464		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b466		8d e5 07	sta $07e5			sta 	SoundCommandBlock+4
.b469		b5 60		lda $60,x			lda 	NSMantissa1,x
.b46b		8d e6 07	sta $07e6			sta 	SoundCommandBlock+5
.b46e						_SNDPlay:
.b46e		5a		phy				phy
.b46f		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b471		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b473		a2 e1		ldx #$e1			ldx 	#(SoundCommandBlock & $FF)
.b475		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b477		20 6b 80	jsr $806b			jsr 	SNDCommand
.b47a		7a		ply				ply
.b47b		60		rts				rts
.b47c						_SndError:
.b47c		4c c2 a4	jmp $a4c2			jmp 	RangeError
.07e1						SoundCommandBlock:
>07e1								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b47f						StackPushByte:
.b47f		48		pha				pha 								; save byte on stack
.b480		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b482		d0 08		bne $b48c			bne 	_SPBNoBorrow
.b484		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b486		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b488		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b48a		90 06		bcc $b492			bcc 	_SPBMemory
.b48c						_SPBNoBorrow:
.b48c		c6 34		dec $34				dec 	basicStack
.b48e		68		pla				pla 								; get back and write
.b48f		92 34		sta ($34)			sta 	(basicStack)
.b491		60		rts				rts
.b492						_SPBMemory:
.b492		a9 12		lda #$12		lda	#18
.b494		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b497						StackPopByte:
.b497		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b499		e6 34		inc $34				inc 	basicStack
.b49b		d0 02		bne $b49f			bne 	_SPBNoCarry
.b49d		e6 35		inc $35				inc 	basicStack+1
.b49f						_SPBNoCarry:
.b49f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b4a0						StackOpen:
.b4a0		48		pha				pha 								; save frame byte
.b4a1		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b4a3		0a		asl a				asl 	a 							; claim twice this for storage
.b4a4		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b4a6		38		sec				sec 								; so basically subtracting from
.b4a7		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b4a9		85 34		sta $34				sta 	basicStack
.b4ab		b0 09		bcs $b4b6			bcs 	_SONoBorrow
>b4ad		db						.byte 	$DB 						; causes a break in the emulator
.b4ae		c6 35		dec $35				dec 	basicStack+1
.b4b0		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b4b2		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b4b4		90 04		bcc $b4ba			bcc 	_SOMemory
.b4b6						_SONoBorrow:
.b4b6		68		pla				pla 								; get marker back and write at TOS
.b4b7		92 34		sta ($34)			sta 	(basicStack)
.b4b9		60		rts				rts
.b4ba						_SOMemory:
.b4ba		a9 12		lda #$12		lda	#18
.b4bc		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b4bf						StackClose:
.b4bf		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b4c1		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b4c3		0a		asl a				asl 	a 							; claim twice this.
.b4c4		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b4c6		85 34		sta $34				sta 	basicStack
.b4c8		90 02		bcc $b4cc			bcc 	_SCExit
.b4ca		e6 35		inc $35				inc 	basicStack+1
.b4cc						_SCExit:
.b4cc		60		rts				rts
.b4cd						StackCheckFrame:
.b4cd		48		pha				pha
.b4ce						_StackRemoveLocals:
.b4ce		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b4d0		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b4d2		b0 05		bcs $b4d9			bcs 	_SCNoLocal
.b4d4		20 ca 8d	jsr $8dca			jsr 	LocalPopValue 				; restore the local value
.b4d7		80 f5		bra $b4ce			bra 	_StackRemoveLocals 			; gr round again
.b4d9						_SCNoLocal:
.b4d9		68		pla				pla 								; get the frame check.
.b4da		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b4dc		29 f0		and #$f0			and 	#$F0 						; check type bits
.b4de		d0 01		bne $b4e1			bne 	_SCFError 					; different, we have structures mixed up
.b4e0		60		rts				rts
.b4e1						_SCFError:
.b4e1		8a		txa				txa 								; report error X
.b4e2		4c e5 93	jmp $93e5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b4e5						STKSaveCodePosition:
.b4e5		5a		phy				phy
.b4e6		98		tya				tya 								; save Y
.b4e7		a0 05		ldy #$05			ldy 	#5
.b4e9		91 34		sta ($34),y			sta 	(basicStack),y
.b4eb		88		dey				dey 								; save Code Pointer
.b4ec						_STKSaveLoop:
.b4ec		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b4ef		91 34		sta ($34),y			sta 	(basicStack),y
.b4f1		88		dey				dey
.b4f2		d0 f8		bne $b4ec			bne 	_STKSaveLoop
.b4f4		7a		ply				ply
.b4f5		60		rts				rts
.b4f6						STKLoadCodePosition:
.b4f6		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b4f8						_STKLoadLoop:
.b4f8		b1 34		lda ($34),y			lda 	(basicStack),y
.b4fa		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b4fd		c8		iny				iny
.b4fe		c0 05		cpy #$05			cpy 	#5
.b500		d0 f6		bne $b4f8			bne 	_STKLoadLoop
.b502		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b504		a8		tay				tay
.b505		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b506						StackReset:
.b506		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b508		85 34		sta $34				sta 	0+basicStack
.b50a		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b50c		85 35		sta $35				sta 	1+basicStack
.b50e		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b510		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b512		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b513						StringConcrete:
.b513		5a		phy				phy 								; save position on stack
.b514		20 25 9f	jsr $9f25			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b517		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b519		85 38		sta $38				sta 	zTemp1
.b51b		b5 60		lda $60,x			lda 	NSMantissa1,x
.b51d		85 39		sta $39				sta 	zTemp1+1
.b51f		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b521						_SALength:
.b521		c8		iny				iny
.b522		b1 38		lda ($38),y			lda 	(zTemp1),y
.b524		d0 fb		bne $b521			bne 	_SALength
.b526		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b528		b0 3d		bcs $b567			bcs 	_SALengthError
.b52a		98		tya				tya 				 				; length of the new string
.b52b		18		clc				clc
.b52c		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b52e		90 02		bcc $b532			bcc 	_SAHaveLength
.b530		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b532						_SAHaveLength:
.b532		48		pha				pha 								; save length.
.b533		38		sec				sec
.b534		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b536		6d 2a 04	adc $042a			adc 	stringMemory
.b539		8d 2a 04	sta $042a			sta 	stringMemory
.b53c		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b53e		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b540		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b542		6d 2b 04	adc $042b			adc 	stringMemory+1
.b545		8d 2b 04	sta $042b			sta 	stringMemory+1
.b548		85 3b		sta $3b				sta 	zTemp2+1
.b54a		95 60		sta $60,x			sta 	NSMantissa1,x
.b54c		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b54d		38		sec				sec
.b54e		e9 03		sbc #$03			sbc 	#3
.b550		92 3a		sta ($3a)			sta 	(zTemp2)
.b552		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b554		a0 01		ldy #$01			ldy 	#1
.b556		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b558						_SACopyNewString:
.b558		a0 00		ldy #$00			ldy 	#0
.b55a						_SACopyNSLoop:
.b55a		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b55c		c8		iny				iny 								; write two on in string storage
.b55d		c8		iny				iny
.b55e		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b560		88		dey				dey 								; this makes it one one.
.b561		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b563		d0 f5		bne $b55a			bne 	_SACopyNSLoop
.b565		7a		ply				ply
.b566		60		rts				rts
.b567						_SALengthError:
.b567		a9 09		lda #$09		lda	#9
.b569		4c e5 93	jmp $93e5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b56c						StringSystemInitialise:
.b56c		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b56e		8d 2a 04	sta $042a			sta 	0+stringMemory
.b571		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b573		8d 2b 04	sta $042b			sta 	1+stringMemory
.b576		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b579		60		rts				rts
.b57a						StringSpaceInitialise:
.b57a		20 25 9f	jsr $9f25			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b57d		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b57f		8d 2c 04	sta $042c			sta 	stringInitialised
.b582		ad 2a 04	lda $042a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b585		8d 2d 04	sta $042d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b588		ad 2b 04	lda $042b			lda 	stringMemory+1
.b58b		3a		dec a				dec 	a
.b58c		8d 2e 04	sta $042e			sta 	stringTempPointer+1
.b58f		60		rts				rts
.b590						StringTempAllocate:
.b590		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b592		b0 30		bcs $b5c4			bcs 	_STALength
.b594		2c 2c 04	bit $042c			bit 	stringInitialised 			; already initialised
.b597		30 05		bmi $b59e			bmi 	_STAAllocate
.b599		48		pha				pha 								; save value to subtract.
.b59a		20 7a b5	jsr $b57a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b59d		68		pla				pla 								; restore it
.b59e						_STAAllocate:
.b59e		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b5a0		18		clc				clc  								; deliberate allows one more
.b5a1		6d 2d 04	adc $042d			adc 	stringTempPointer 			; subtract from temp pointer
.b5a4		8d 2d 04	sta $042d			sta 	stringTempPointer
.b5a7		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b5a9		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b5ab		ad 2e 04	lda $042e			lda 	stringTempPointer+1
.b5ae		69 ff		adc #$ff			adc 	#$FF
.b5b0		8d 2e 04	sta $042e			sta 	stringTempPointer+1
.b5b3		85 3d		sta $3d				sta 	zsTemp+1
.b5b5		95 60		sta $60,x			sta 	NSMantissa1,x
.b5b7		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b5b9		74 70		stz $70,x			stz 	NSMantissa3,x
.b5bb		a9 10		lda #$10			lda 	#NSTString
.b5bd		95 50		sta $50,x			sta 	NSStatus,x
.b5bf		a9 00		lda #$00			lda 	#0 							; clear the target string
.b5c1		92 3c		sta ($3c)			sta 	(zsTemp)
.b5c3		60		rts				rts
.b5c4						_STALength:
.b5c4		a9 09		lda #$09		lda	#9
.b5c6		4c e5 93	jmp $93e5		jmp	ErrorHandler
.b5c9						StringTempWrite:
.b5c9		48		pha				pha
.b5ca		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b5cc		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b5ce		d0 02		bne $b5d2			bne 	_STWNoCarry
.b5d0		e6 3d		inc $3d				inc 	zsTemp+1
.b5d2						_STWNoCarry:
.b5d2		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b5d4		92 3c		sta ($3c)			sta 	(zsTemp)
.b5d6		68		pla				pla
.b5d7		60		rts				rts

;******  Return to file: _basic.asm

.b5d8						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac e8 07	ldy $07e8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac e8 07	ldy $07e8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad e9 07	lda $07e9			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c e8 07	sty $07e8			sty 	EXTColumn
.c02d	a02d	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee e7 07	inc $07e7			inc 	EXTRow  					; bump row
.c035	a035	9c e8 07	stz $07e8			stz 	EXTColumn 					; back to column 0
.c038	a038	ad e7 07	lda $07e7			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd eb 07	cmp $07eb			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d ea 07	adc $07ea			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce e8 07	dec $07e8			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c e8 07	stz $07e8			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce e7 07	dec $07e7			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad e7 07	lda $07e7			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce e7 07	dec $07e7			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed ea 07	sbc $07ea			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c e8 07	sty $07e8			sty 	EXTColumn
.c08c	a08c	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c e8 07	sty $07e8			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad eb 07	lda $07eb			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd e7 07	cmp $07e7			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee e7 07	inc $07e7			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d ea 07	adc $07ea			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad e8 07	lda $07e8			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d e8 07	sta $07e8			sta 	EXTColumn
.c0c9	a0c9	cd ea 07	cmp $07ea			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce e8 07	dec $07e8			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d e9 07	and $07e9			and 	EXTTextColour 				; mask out old.
.c135	a135	8d e9 07	sta $07e9			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d e9 07	ora $07e9			ora 	EXTTextColour
.c13c	a13c	8d e9 07	sta $07e9			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad e9 07	lda $07e9			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad e9 07	lda $07e9			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c e7 07	stz $07e7			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c e8 07	stz $07e8			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	ad e8 07	lda $07e8			lda 	EXTColumn
.c1c0	a1c0	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c3	a1c3	9c 15 d0	stz $d015			stz 	$D015
.c1c6	a1c6	ad e7 07	lda $07e7			lda 	EXTRow
.c1c9	a1c9	8d 16 d0	sta $d016			sta 	$D016
.c1cc	a1cc	9c 17 d0	stz $d017			stz 	$D017
.c1cf	a1cf	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07e7						EXTRow:
>07e7								.fill 	1
.07e8						EXTColumn:
>07e8								.fill 	1
.07e9						EXTTextColour:
>07e9								.fill 	1
.07ea						EXTScreenWidth:
>07ea								.fill 	1
.07eb						EXTScreenHeight:
>07eb								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1d0	a1d0					Export_EXTInitialise:
.c1d0	a1d0	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1d2	a1d2	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1d5	a1d5	9c 08 d0	stz $d008			stz 	$D008
.c1d8	a1d8	9c 09 d0	stz $d009			stz 	$D009
.c1db	a1db	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1dd	a1dd	8d 58 d6	sta $d658			sta 	$D658
.c1e0	a1e0	a9 52		lda #$52			lda 	#$52
.c1e2	a1e2	8d e9 07	sta $07e9			sta 	EXTTextColour
.c1e5	a1e5	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1e7	a1e7	8d ea 07	sta $07ea			sta 	EXTScreenWidth
.c1ea	a1ea	a9 3c		lda #$3c			lda 	#60
.c1ec	a1ec	8d eb 07	sta $07eb			sta 	EXTScreenHeight
.c1ef	a1ef	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1f1	a1f1	8d 10 d0	sta $d010			sta 	$D010
.c1f4	a1f4	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1f6	a1f6	8d 12 d0	sta $d012			sta 	$D012
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad e7 07	lda $07e7			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad ea 07	lda $07ea			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TileSize = 11*2
=24						GCMD_TileScrollX = 12*2
=26						GCMD_TileScrollY = 13*2
=28						GCMD_TilePos = 14*2
=30						GCMD_TileWrite = 15*2
=32						GCMD_TileRead = 16*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d9 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f8 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	40 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	b1 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	da aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	ff ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	71 a6					.word	GXControlTileSize        ; $0b TileSize
>c2ff	a2ff	a1 a9					.word	GXControlTileScrollX     ; $0c TileScrollX
>c301	a301	b2 a9					.word	GXControlTileScrollY     ; $0d TileScrollY
>c303	a303	e0 ab					.word	GXSelectTile             ; $0e TilePos
>c305	a305	42 ac					.word	GXSTWriteTile            ; $0f TileWrite
>c307	a307	45 ac					.word	GXSTReadTile             ; $10 TileRead
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	a7 a6					.word	GXLine                   ; $21 Line
>c32b	a32b	22 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	1f a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	07 a8					.word	GXPlotPoint              ; $28 Plot
>c339	a339	70 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$643						gxPixelBuffer = numberBuffer
.07ec						gxCurrentX:
>07ec								.fill 	2
.07ee						gxCurrentY:
>07ee								.fill 	2
.07f0						gxLastX:
>07f0								.fill 	2
.07f2						gxLastY:
>07f2								.fill 	2
.07f4						gxX0:
>07f4								.fill 	2
.07f6						gxY0:
>07f6								.fill 	2
.07f8						gxX1:
>07f8								.fill 	2
.07fa						gxY1:
>07fa								.fill 	2
.07fc						gxSpritesOn:
>07fc								.fill 	1
.07fd						gxBitmapsOn:
>07fd								.fill 	1
.07fe						gxTilesOn:
>07fe								.fill 	1
.07ff						gxBasePage:
>07ff								.fill 	1
.0800						gxSpritePage:
>0800								.fill 	1
.0801						gxTileImagePage:
>0801								.fill 	1
.0802						gxTileMapPage:
>0802								.fill 	1
.0803						gxTileMapWidth:
>0803								.fill 	1
.0804						gxTileMapHeight:
>0804								.fill 	1
.0805						gxHeight:
>0805								.fill 	1
.0806						gxMode:
>0806								.fill 	1
.0807						gxColour:
>0807								.fill 	1
.0808						gxEORValue:
>0808								.fill 	1
.0809						gxANDValue:
>0809								.fill 	1
.080a						gxOriginalLUTValue:
>080a								.fill 	1
.080b						gxOffset:
>080b								.fill 	1
.080c						GSCurrentSpriteID:
>080c								.fill 	1
.080d						GSCurrentSpriteAddr:
>080d								.fill 	2
.080f						gxSpriteOffsetBase:
>080f								.fill 	2
.0811						gxSpriteLow:
>0811								.fill 	64
.0851						gxSpriteHigh:
>0851								.fill 	64
.0891						gxTileAccessPage:
>0891								.fill 	1
.0892						gxTileAccessAddress:
>0892								.fill 	2
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd ec 07	lda $07ec,x			lda 	gxCurrentX,x
.c34d	a34d	9d f0 07	sta $07f0,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ee 07	sta $07ee			sta 	gxCurrentY
.c357	a357	9c ef 07	stz $07ef			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d ec 07	sta $07ec			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d ed 07	sta $07ed			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad ed 07	lda $07ed			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad ec 07	lda $07ec			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ee 07	lda $07ee			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd 05 08	cmp $0805			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd ec 07	lda $07ec,x			lda 	gxCurrentX,x
.c389	a389	9d f4 07	sta $07f4,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 97 08	sta $0897			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad fd 07	lda $07fd			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 ed ad	jsr $aded			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 98 08	stz $0898			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 95 08	lda $0895			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 96 08	cmp $0896			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 96 08	lda $0896			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 95 08	lda $0895			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 96 08	ldx $0896			ldx	 	gxYCentre
.c3e6	a3e6	8d 96 08	sta $0896			sta 	gxYCentre
.c3e9	a3e9	8e 95 08	stx $0895			stx 	gxxCentre
.c3ec	a3ec	ad 98 08	lda $0898			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 98 08	sta $0898			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 97 08	lda $0897	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 98 08	lda $0898			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 96 08	lda $0896			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 95 08	lda $0895			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 97 08	lda $0897			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 72 a8	jsr $a872			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 96 08	sbc $0896			sbc 	gxYCentre
.c42d	a42d	8d 96 08	sta $0896			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd f8 07	lda $07f8,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d f4 07	sta $07f4,x			sta 	gxX0,x
.c444	a444	bd f9 07	lda $07f9,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d f5 07	sta $07f5,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 98 08	stz $0898			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 95 08	inc $0895			inc 	gxxCentre 					; X++
.c459	a459	ad 95 08	lda $0895			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 95 08	inc $0895			inc 	gxxCentre					; X++
.c466	a466	ce 96 08	dec $0896			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 95 08	lda $0895			lda 	gxxCentre
.c46d	a46d	ed 96 08	sbc $0896			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 98 08	dec $0898			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad fa 07	lda $07fa			lda 	gxY1
.c4a6	a4a6	ed f6 07	sbc $07f6			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 94 08	sta $0894			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 95 08	stz $0895			stz 	gxxCentre
.c4ba	a4ba	ad 94 08	lda $0894			lda 	gxRadius
.c4bd	a4bd	8d 96 08	sta $0896			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd f8 07	lda $07f8,x			lda 	gxX1,x
.c4d5	a4d5	7d f4 07	adc $07f4,x			adc 	gxX0,x
.c4d8	a4d8	9d f8 07	sta $07f8,x			sta 	gxX1,x
.c4db	a4db	bd f9 07	lda $07f9,x			lda 	gxX1+1,x
.c4de	a4de	7d f5 07	adc $07f5,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d f9 07	sta $07f9,x			sta 	gxX1+1,x
.c4e5	a4e5	7e f8 07	ror $07f8,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.0894						gxRadius:
>0894								.fill 	1
.0895						gxxCentre:
>0895								.fill 	1
.0896						gxYCentre:
>0896								.fill 	1
.0897						gxIsFillMode:
>0897								.fill 	1
.0898						gxYChanged:
>0898								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad 05 08	lda $0805			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d ff 07	adc $07ff			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd ff 07	cmp $07ff			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c fc 07	stz $07fc			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c fd 07	stz $07fd			stz 	gxBitmapsOn
.c547	a547	9c fe 07	stz $07fe			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e ec 07	stz $07ec,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d fd 07	sta $07fd			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d ff 07	sta $07ff			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e 05 08	stx $0805			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d fc 07	sta $07fc			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d 00 08	sta $0800			sta 	gxSpritePage
.c5c9	a5c9	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d 0f 08	sta $080f			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d 10 08	sta $0810			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c 0e 08	stz $080e			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c fe 07	stz $07fe			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d fe 07	sta $07fe			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d 03 08	sta $0803			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d 04 08	sta $0804			sta 	gxTileMapHeight
.c617	a617	ad fe 07	lda $07fe			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	d0 02		bne $a620			bne	 	_GXCTNotMapDefault 			; check for default
.c61e	a61e	a9 12		lda #$12			lda 	#TILEMAP_ADDRESS >> 13
.c620	a620					_GXCTNotMapDefault:
.c620	a620	8d 02 08	sta $0802			sta 	gxTileMapPage
.c623	a623	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c625	a625	d0 02		bne $a629			bne 	_GXCTNotImgDefault 			; check for default
.c627	a627	a9 13		lda #$13			lda 	#TILEIMAGES_ADDRESS >> 13
.c629	a629					_GXCTNotImgDefault:
.c629	a629	8d 01 08	sta $0801			sta 	gxTileImagePage
.c62c	a62c	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c62e	a62e	8d 00 d2	sta $d200			sta 	$D200
.c631	a631	ad 02 08	lda $0802			lda 	gxTileMapPage 				; put tile map address in.
.c634	a634	20 8b a6	jsr $a68b			jsr		GXCalculateBaseAddress
.c637	a637	9c 01 d2	stz $d201			stz 	$D201
.c63a	a63a	a5 36		lda $36				lda 	gxzTemp0
.c63c	a63c	8d 02 d2	sta $d202			sta 	$D202
.c63f	a63f	a5 37		lda $37				lda 	gxzTemp0+1
.c641	a641	8d 03 d2	sta $d203			sta 	$D203
.c644	a644	ad 03 08	lda $0803			lda 	gxTileMapWidth	 			; set tilemap size.
.c647	a647	8d 04 d2	sta $d204			sta 	$D204
.c64a	a64a	ad 04 08	lda $0804			lda 	gxTileMapHeight
.c64d	a64d	8d 06 d2	sta $d206			sta 	$D206
.c650	a650	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c653	a653	9c 09 d2	stz $d209			stz 	$D209
.c656	a656	9c 0a d2	stz $d20a			stz 	$D20A
.c659	a659	9c 0b d2	stz $d20b			stz 	$D20B
.c65c	a65c	ad 01 08	lda $0801			lda 	gxTileImagePage 			; set the tile image address
.c65f	a65f	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress
.c662	a662	9c 80 d2	stz $d280			stz 	$D280
.c665	a665	a5 36		lda $36				lda 	gxzTemp0
.c667	a667	8d 81 d2	sta $d281			sta 	$D281
.c66a	a66a	a5 37		lda $37				lda 	gxzTemp0+1
.c66c	a66c	8d 82 d2	sta $d282			sta 	$D282
.c66f	a66f	18		clc				clc
.c670	a670	60		rts				rts
.c671	a671					GXControlTileSize:
.c671	a671	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check on
.c674	a674	38		sec				sec
.c675	a675	f0 13		beq $a68a			beq 	_GXCTSExit
.c677	a677	64 01		stz $01				stz 	1 							; access I/O 0
.c679	a679	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c67b	a67b	8d 03 08	sta $0803			sta 	gxTileMapWidth
.c67e	a67e	8d 04 d2	sta $d204			sta 	$D204
.c681	a681	a5 37		lda $37				lda 	gxzTemp0+1
.c683	a683	8d 04 08	sta $0804			sta 	gxTileMapHeight
.c686	a686	8d 06 d2	sta $d206			sta 	$D206
.c689	a689	18		clc				clc
.c68a	a68a					_GXCTSExit:
.c68a	a68a	60		rts				rts
.c68b	a68b					GXCalculateBaseAddress:
.c68b	a68b	85 36		sta $36				sta 	gxzTemp0
.c68d	a68d	64 37		stz $37				stz 	gxzTemp0+1
.c68f	a68f	a9 05		lda #$05			lda 	#5
.c691	a691					_GXShift:
.c691	a691	06 36		asl $36				asl 	gxzTemp0
.c693	a693	26 37		rol $37				rol 	gxzTemp0+1
.c695	a695	3a		dec a				dec		a
.c696	a696	d0 f9		bne $a691			bne 	_GXShift
.c698	a698	60		rts				rts
.c699	a699					GXClearSpriteStore:
.c699	a699	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c69b	a69b					_GXCSSLoop:
.c69b	a69b	9e 51 08	stz $0851,x			stz 	gxSpriteHigh,x
.c69e	a69e	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c6a0	a6a0	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.c6a3	a6a3	ca		dex				dex
.c6a4	a6a4	10 f5		bpl $a69b			bpl 	_GXCSSLoop
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					GXLine:
.c6a7	a6a7	ad fd 07	lda $07fd			lda 	gxBitmapsOn					; check bitmap on.
.c6aa	a6aa	f0 28		beq $a6d4			beq 	_GXLFail
.c6ac	a6ac	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; access it.
.c6af	a6af	20 0b ae	jsr $ae0b			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6b2	a6b2	20 7a a7	jsr $a77a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6b5	a6b5	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b8	a6b8					_GXDrawLoop:
.c6b8	a6b8	ac 0b 08	ldy $080b			ldy 	gxOffset 					; draw the pixel
.c6bb	a6bb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6bd	a6bd	2d 09 08	and $0809			and 	gxANDValue
.c6c0	a6c0	4d 08 08	eor $0808			eor 	gxEORValue
.c6c3	a6c3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6c5	a6c5	20 d6 a6	jsr $a6d6			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c8	a6c8	f0 05		beq $a6cf			beq 	_GXLExit
.c6ca	a6ca	20 f1 a6	jsr $a6f1			jsr 	GXLineAdvance 				; code as per advance method
.c6cd	a6cd	80 e9		bra $a6b8			bra 	_GXDrawLoop
.c6cf	a6cf					_GXLExit:
.c6cf	a6cf	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; restore and return success.
.c6d2	a6d2	18		clc				clc
.c6d3	a6d3	60		rts				rts
.c6d4	a6d4					_GXLFail:
.c6d4	a6d4	38		sec				sec
.c6d5	a6d5	60		rts				rts
.c6d6	a6d6					GXLineIsComplete:
.c6d6	a6d6	ad 9b 08	lda $089b			lda 	gxIsDiffYLarger 			; is dy larger
.c6d9	a6d9	d0 0f		bne $a6ea			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6db	a6db	ad f4 07	lda $07f4			lda 	gxX0 						; compare X, LSB and MSB
.c6de	a6de	4d f8 07	eor $07f8			eor 	gxX1
.c6e1	a6e1	d0 06		bne $a6e9			bne 	_GXLICExit
.c6e3	a6e3	ad f5 07	lda $07f5			lda 	gxX0+1
.c6e6	a6e6	4d f9 07	eor $07f9			eor 	gxX1+1
.c6e9	a6e9					_GXLICExit:
.c6e9	a6e9	60		rts				rts
.c6ea	a6ea					_GXLICCompareY:
.c6ea	a6ea	ad fa 07	lda $07fa			lda 	gxY1
.c6ed	a6ed	4d f6 07	eor $07f6			eor 	gxY0
.c6f0	a6f0	60		rts				rts
.c6f1	a6f1					GXLineAdvance:
.c6f1	a6f1	18		clc				clc 								; add adjust to position
.c6f2	a6f2	ad 9d 08	lda $089d			lda 	gxPosition
.c6f5	a6f5	6d 9e 08	adc $089e			adc 	gxAdjust
.c6f8	a6f8	8d 9d 08	sta $089d			sta 	gxPosition
.c6fb	a6fb	9c a0 08	stz $08a0			stz 	gxAddSelect 				; clear add select flag
.c6fe	a6fe	b0 05		bcs $a705			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c700	a700	cd 9f 08	cmp $089f			cmp 	gxTotal 					; if exceeded total
.c703	a703	90 0a		bcc $a70f			bcc 	_GXLANoExtra
.c705	a705					_GXLAOverflow:
.c705	a705	ce a0 08	dec $08a0			dec 	gxAddSelect 				; set addselect to $FF
.c708	a708	38		sec				sec 								; subtract total and write back
.c709	a709	ed 9f 08	sbc $089f			sbc 	gxTotal
.c70c	a70c	8d 9d 08	sta $089d			sta 	gxPosition
.c70f	a70f					_GXLANoExtra:
.c70f	a70f	ad 9b 08	lda $089b			lda 	gxIsDiffYLarger
.c712	a712	f0 0d		beq $a721			beq 	_GXDXLarger
.c714	a714	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c717	a717	ad a0 08	lda $08a0			lda 	gxAddSelect
.c71a	a71a	f0 10		beq $a72c			beq 	_GXLAExit
.c71c	a71c	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c71f	a71f	80 0b		bra $a72c			bra 	_GXLAExit
.c721	a721					_GXDXLarger:
.c721	a721	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c724	a724	ad a0 08	lda $08a0			lda 	gxAddSelect
.c727	a727	f0 03		beq $a72c			beq 	_GXLAExit
.c729	a729	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c72c	a72c					_GXLAExit:
.c72c	a72c	60		rts				rts
.c72d	a72d					gxAdjustX:
.c72d	a72d	ad 9c 08	lda $089c			lda 	gxDXNegative
.c730	a730	10 25		bpl $a757			bpl 	_GXAXRight
.c732	a732	ad f4 07	lda $07f4			lda 	gxX0
.c735	a735	d0 03		bne $a73a			bne 	_GXAXNoBorrow
.c737	a737	ce f5 07	dec $07f5			dec 	gxX0+1
.c73a	a73a					_GXAXNoBorrow:
.c73a	a73a	ce f4 07	dec $07f4			dec 	gxX0
.c73d	a73d	ce 0b 08	dec $080b			dec 	gxOffset 					; pixel left
.c740	a740	ad 0b 08	lda $080b			lda 	gxOffset
.c743	a743	c9 ff		cmp #$ff			cmp 	#$FF
.c745	a745	d0 0f		bne $a756			bne 	_GXAYExit 					; underflow
.c747	a747	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c749	a749	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c74b	a74b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c74d	a74d	b0 07		bcs $a756			bcs 	_GXAYExit
.c74f	a74f	18		clc				clc
.c750	a750	69 20		adc #$20			adc 	#$20 						; fix up
.c752	a752	85 3d		sta $3d				sta 	gxzScreen+1
.c754	a754	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c756	a756					_GXAYExit:
.c756	a756	60		rts				rts
.c757	a757					_GXAXRight:
.c757	a757	ee f4 07	inc $07f4			inc 	gxX0
.c75a	a75a	d0 03		bne $a75f			bne 	_GXAXNoCarry
.c75c	a75c	ee f5 07	inc $07f5			inc 	gxX0+1
.c75f	a75f					_GXAXNoCarry:
.c75f	a75f	ee 0b 08	inc $080b			inc 	gxOffset 					; pixel right
.c762	a762	d0 0e		bne $a772			bne 	_GXAXExit 					; if not overflowed, exit.
.c764	a764	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c766	a766	a5 3d		lda $3d				lda 	gxzScreen+1
.c768	a768	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c76a	a76a	90 06		bcc $a772			bcc 	_GXAXExit
.c76c	a76c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c76e	a76e	85 3d		sta $3d				sta 	gxzScreen+1
.c770	a770	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c772	a772					_GXAXExit:
.c772	a772	60		rts				rts
.c773	a773					GXIncrementY:
.c773	a773	ee f6 07	inc $07f6			inc 	gxY0
.c776	a776	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown
.c779	a779	60		rts				rts
.c77a	a77a					GXLineSetup:
.c77a	a77a	ad fa 07	lda $07fa			lda 	gxY1
.c77d	a77d	38		sec				sec
.c77e	a77e	ed f6 07	sbc $07f6			sbc 	gxY0
.c781	a781	4a		lsr a				lsr 	a
.c782	a782	8d 9a 08	sta $089a			sta 	gxDiffY
.c785	a785	9c 9c 08	stz $089c			stz 	gxDXNegative 				; clear -ve flag
.c788	a788	38		sec				sec
.c789	a789	ad f8 07	lda $07f8			lda 	gxX1
.c78c	a78c	ed f4 07	sbc $07f4			sbc 	gxX0
.c78f	a78f	8d 99 08	sta $0899			sta 	gxDiffX
.c792	a792	ad f9 07	lda $07f9			lda 	gxX1+1 						; calculate MSB
.c795	a795	ed f5 07	sbc $07f5			sbc 	gxX0+1
.c798	a798	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c799	a799	6e 99 08	ror $0899			ror 	gxDiffX
.c79c	a79c	0a		asl a				asl 	a
.c79d	a79d	10 0c		bpl $a7ab			bpl 	_GDXNotNegative
.c79f	a79f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	ed 99 08	sbc $0899			sbc 	gxDiffX
.c7a5	a7a5	8d 99 08	sta $0899			sta 	gxDiffX
.c7a8	a7a8	ce 9c 08	dec $089c			dec 	gxDXNegative 				; -ve flag = $FF.
.c7ab	a7ab					_GDXNotNegative:
.c7ab	a7ab	9c 9b 08	stz $089b			stz 	gxIsDiffYLarger 			; clear larger flag
.c7ae	a7ae	ad 9a 08	lda $089a			lda 	gxDiffY 					; set adjust and total.
.c7b1	a7b1	8d 9e 08	sta $089e			sta 	gxAdjust
.c7b4	a7b4	ad 99 08	lda $0899			lda 	gxDiffX
.c7b7	a7b7	8d 9f 08	sta $089f			sta 	gxTotal
.c7ba	a7ba	ad 9a 08	lda $089a			lda 	gxDiffY 					; if dy > dx
.c7bd	a7bd	cd 99 08	cmp $0899			cmp 	gxDiffX
.c7c0	a7c0	90 0f		bcc $a7d1			bcc 	_GDXNotLarger
.c7c2	a7c2	ce 9b 08	dec $089b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7c5	a7c5	ad 99 08	lda $0899			lda 	gxDiffX 					; set adjust and total other way round
.c7c8	a7c8	8d 9e 08	sta $089e			sta 	gxAdjust
.c7cb	a7cb	ad 9a 08	lda $089a			lda 	gxDiffY
.c7ce	a7ce	8d 9f 08	sta $089f			sta 	gxTotal
.c7d1	a7d1					_GDXNotLarger:
.c7d1	a7d1	ad 9f 08	lda $089f			lda 	gxTotal
.c7d4	a7d4	4a		lsr a				lsr 	a
.c7d5	a7d5	8d 9d 08	sta $089d			sta 	gxPosition
.c7d8	a7d8	60		rts				rts
.0899						gxDiffX:
>0899								.fill 	1
.089a						gxDiffY:
>089a								.fill 	1
.089b						gxIsDiffYLarger:
>089b								.fill 	1
.089c						gxDXNegative:
>089c								.fill 	1
.089d						gxPosition:
>089d								.fill 	1
.089e						gxAdjust:
>089e								.fill 	1
.089f						gxTotal:
>089f								.fill 	1
.08a0						gxAddSelect:
>08a0								.fill 	1
.c7d9	a7d9					GXSetColourMode:
.c7d9	a7d9	a6 36		ldx $36				ldx 	gxzTemp0
.c7db	a7db	8e 07 08	stx $0807			stx 	gxColour 								; set colour
.c7de	a7de	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7e0	a7e0	8d 06 08	sta $0806			sta 	gxMode 									; set mode
.c7e3	a7e3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7e5	a7e5	9c 09 08	stz $0809			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e8	a7e8	ae 07 08	ldx $0807			ldx 	gxColour
.c7eb	a7eb	8e 08 08	stx $0808			stx 	gxEORValue
.c7ee	a7ee	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7f0	a7f0	90 03		bcc $a7f5			bcc 	_GXSDCNotAndColour
.c7f2	a7f2	8e 09 08	stx $0809			stx 	gxANDValue
.c7f5	a7f5					_GXSDCNotAndColour:
.c7f5	a7f5	d0 03		bne $a7fa			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7f7	a7f7	9c 08 08	stz $0808			stz 	gxEORValue
.c7fa	a7fa					_GXSDCNotAnd:
.c7fa	a7fa	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7fb	a7fb	90 08		bcc $a805			bcc 	_GXSDCNoFlip
.c7fd	a7fd	ad 09 08	lda $0809			lda	 	gxANDValue
.c800	a800	49 ff		eor #$ff			eor 	#$FF
.c802	a802	8d 09 08	sta $0809			sta 	gxANDValue
.c805	a805					_GXSDCNoFlip:
.c805	a805	18		clc				clc
.c806	a806	60		rts				rts
.c807	a807					GXPlotPoint:
.c807	a807	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c80a	a80a	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c80d	a80d	ac 0b 08	ldy $080b			ldy 	gxOffset
.c810	a810	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c812	a812	2d 09 08	and $0809			and 	gxANDValue
.c815	a815	4d 08 08	eor $0808			eor 	gxEORValue
.c818	a818	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c81a	a81a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GXFillRectangle:
.c81f	a81f	38		sec				sec 								; pass carry in for fill/frame
.c820	a820	80 01		bra $a823			bra 	GXRectangle
.c822	a822					GXFrameRectangle:
.c822	a822	18		clc				clc
.c823	a823					GXRectangle:
.c823	a823	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; exit if off.
.c826	a826	f0 35		beq $a85d			beq 	_GXRFail
.c828	a828	08		php				php 								; save Fill flag (CS)
.c829	a829	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c82c	a82c	20 ed ad	jsr $aded			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c82f	a82f	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c832	a832	38		sec				sec 								; sec = Draw line
.c833	a833	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c836	a836	ad f6 07	lda $07f6			lda 	gxY0 						; reached end of rectangle ?
.c839	a839	cd fa 07	cmp $07fa			cmp 	gxY1 						; e.g. 1 pixel high.
.c83c	a83c	f0 19		beq $a857			beq 	_GXRectangleExit
.c83e	a83e					_GXRectLoop:
.c83e	a83e	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown 			; down one.
.c841	a841	ee f6 07	inc $07f6			inc 	gxY0 						; change Y pos
.c844	a844	ad f6 07	lda $07f6			lda 	gxY0 						; reached last line
.c847	a847	cd fa 07	cmp $07fa			cmp 	gxY1
.c84a	a84a	f0 07		beq $a853			beq 	_GXLastLine
.c84c	a84c	28		plp				plp 								; get flag back for solid/edged
.c84d	a84d	08		php				php
.c84e	a84e	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c851	a851	80 eb		bra $a83e			bra 	_GXRectLoop
.c853	a853					_GXLastLine:
.c853	a853	38		sec				sec
.c854	a854	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0
.c857	a857					_GXRectangleExit:
.c857	a857	68		pla				pla 								; throw fill flag.
.c858	a858	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c85b	a85b	18		clc				clc
.c85c	a85c	60		rts				rts
.c85d	a85d					_GXRFail:
.c85d	a85d	38		sec				sec
.c85e	a85e	60		rts				rts
.c85f	a85f					GXDrawLineX1X0:
.c85f	a85f	08		php				php 								; save solid/either-end
.c860	a860	38		sec				sec 								; calculate x1-x0
.c861	a861	ad f8 07	lda $07f8			lda		gxX1
.c864	a864	ed f4 07	sbc $07f4			sbc 	gxX0
.c867	a867	85 36		sta $36				sta 	gxzTemp0
.c869	a869	ad f9 07	lda $07f9			lda 	gxX1+1
.c86c	a86c	ed f5 07	sbc $07f5			sbc 	gxX0+1
.c86f	a86f	85 37		sta $37				sta 	gxzTemp0+1
.c871	a871	28		plp				plp
.c872	a872					GXDrawLineTemp0:
.c872	a872	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c874	a874	48		pha				pha
.c875	a875	a5 3d		lda $3d				lda 	gxzScreen+1
.c877	a877	48		pha				pha
.c878	a878	ad 0b 08	lda $080b			lda 	gxOffset
.c87b	a87b	48		pha				pha
.c87c	a87c	a5 0b		lda $0b				lda 	GXEditSlot
.c87e	a87e	48		pha				pha
.c87f	a87f	ac 0b 08	ldy $080b			ldy 	gxOffset 					; Y offset
.c882	a882	90 1e		bcc $a8a2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c884	a884					_GXDLTLine:
.c884	a884	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c886	a886	2d 09 08	and $0809			and 	gxANDValue
.c889	a889	4d 08 08	eor $0808			eor 	gxEORValue
.c88c	a88c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c88e	a88e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c890	a890	d0 04		bne $a896			bne 	_GXDLTNoBorrow
.c892	a892	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c894	a894	30 2e		bmi $a8c4			bmi 	_GXDLTExit
.c896	a896					_GXDLTNoBorrow:
.c896	a896	c6 36		dec $36				dec 	gxzTemp0
.c898	a898	c8		iny				iny 								; next slot.
.c899	a899	d0 e9		bne $a884			bne 	_GXDLTLine
.c89b	a89b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c89d	a89d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c8a0	a8a0	80 e2		bra $a884			bra 	_GXDLTLine
.c8a2	a8a2					_GXDLTEndPoints:
.c8a2	a8a2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c8a4	a8a4	2d 09 08	and $0809			and 	gxANDValue
.c8a7	a8a7	4d 08 08	eor $0808			eor 	gxEORValue
.c8aa	a8aa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8ac	a8ac	98		tya				tya 								; advance to right side
.c8ad	a8ad	18		clc				clc
.c8ae	a8ae	65 36		adc $36				adc 	gxzTemp0
.c8b0	a8b0	a8		tay				tay
.c8b1	a8b1	a5 3d		lda $3d				lda 	gxzScreen+1
.c8b3	a8b3	65 37		adc $37				adc 	gxzTemp0+1
.c8b5	a8b5	85 3d		sta $3d				sta 	gxzScreen+1
.c8b7	a8b7	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap 				; fix up.
.c8ba	a8ba	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8bc	a8bc	2d 09 08	and $0809			and 	gxANDValue
.c8bf	a8bf	4d 08 08	eor $0808			eor 	gxEORValue
.c8c2	a8c2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8c4	a8c4					_GXDLTExit:
.c8c4	a8c4	68		pla				pla
.c8c5	a8c5	85 0b		sta $0b				sta 	GXEditSlot
.c8c7	a8c7	68		pla				pla
.c8c8	a8c8	8d 0b 08	sta $080b			sta 	gxOffset
.c8cb	a8cb	68		pla				pla
.c8cc	a8cc	85 3d		sta $3d				sta 	gxzScreen+1
.c8ce	a8ce	68		pla				pla
.c8cf	a8cf	85 3c		sta $3c				sta 	gxzScreen
.c8d1	a8d1	60		rts				rts
.c8d2	a8d2					GXDLTCheckWrap:
.c8d2	a8d2	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8d4	a8d4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8d6	a8d6	90 06		bcc $a8de			bcc 	_GXDLTCWExit
.c8d8	a8d8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8da	a8da	85 3d		sta $3d				sta 	gxzScreen+1
.c8dc	a8dc	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8de	a8de					_GXDLTCWExit:
.c8de	a8de	60		rts				rts
.c8df	a8df					GXDrawGraphicElement:
.c8df	a8df	8d a1 08	sta $08a1			sta 	gxSize 						; save size
.c8e2	a8e2	3a		dec a				dec 	a
.c8e3	a8e3	8d a2 08	sta $08a2			sta 	gxMask 						; and mask
.c8e6	a8e6	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; check BMP on
.c8e9	a8e9	f0 67		beq $a952			beq 	_GXSLFail
.c8eb	a8eb	ad f6 07	lda $07f6			lda 	gxY0 						; push Y on stack
.c8ee	a8ee	48		pha				pha
.c8ef	a8ef	8c a4 08	sty $08a4			sty 	gxAcquireVector+1 			; and acquisition vector
.c8f2	a8f2	8e a3 08	stx $08a3			stx 	gxAcquireVector
.c8f5	a8f5	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f8	a8f8	ad a6 08	lda $08a6			lda 	gxUseMode 					; scale bits
.c8fb	a8fb	4a		lsr a				lsr 	a
.c8fc	a8fc	4a		lsr a				lsr 	a
.c8fd	a8fd	4a		lsr a				lsr 	a
.c8fe	a8fe	29 07		and #$07			and		#7
.c900	a900	1a		inc a				inc 	a
.c901	a901	8d a5 08	sta $08a5			sta 	gxScale
.c904	a904	64 38		stz $38				stz 	gxzTemp1					; start first line
.c906	a906					_GXGELoop:
.c906	a906	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c908	a908	2c a6 08	bit $08a6			bit 	gxUseMode 					; check for flip.
.c90b	a90b	10 06		bpl $a913			bpl		_GXNoVFlip
.c90d	a90d	ad a2 08	lda $08a2			lda 	gxMask
.c910	a910	38		sec				sec
.c911	a911	e5 38		sbc $38				sbc 	gxzTemp1
.c913	a913					_GXNoVFlip:
.c913	a913	aa		tax				tax 								; get the Xth line.
.c914	a914	20 54 a9	jsr $a954			jsr 	_GXCallAcquire 				; get that data.
.c917	a917	ad a5 08	lda $08a5			lda 	gxScale 					; do scale identical copies of that line.
.c91a	a91a	85 39		sta $39				sta 	gxzTemp1+1
.c91c	a91c					_GXGELoop2:
.c91c	a91c	ad f6 07	lda $07f6			lda 	gxY0 						; off screen
.c91f	a91f	cd 05 08	cmp $0805			cmp 	gxHeight
.c922	a922	b0 10		bcs $a934			bcs 	_GXDGEExit
.c924	a924	20 57 a9	jsr $a957			jsr 	GXRenderOneLine 			; render line
.c927	a927	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c929	a929	d0 f1		bne $a91c			bne 	_GXGELoop2
.c92b	a92b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c92d	a92d	a5 38		lda $38				lda 	gxzTemp1
.c92f	a92f	cd a1 08	cmp $08a1			cmp 	gxSize
.c932	a932	d0 d2		bne $a906			bne 	_GXGELoop
.c934	a934					_GXDGEExit:
.c934	a934	68		pla				pla 								; restore Y for next time
.c935	a935	8d f6 07	sta $07f6			sta 	gxY0
.c938	a938	ae a5 08	ldx $08a5			ldx 	gxScale 					; get scale (1-8)
.c93b	a93b					_GXShiftLeft:
.c93b	a93b	18		clc				clc
.c93c	a93c	ad a1 08	lda $08a1			lda 	gxSize
.c93f	a93f	6d f4 07	adc $07f4			adc 	gxX0
.c942	a942	8d f4 07	sta $07f4			sta 	gxX0
.c945	a945	90 03		bcc $a94a			bcc 	_GXSLNoCarry
.c947	a947	ee f5 07	inc $07f5			inc 	gxX0+1
.c94a	a94a					_GXSLNoCarry:
.c94a	a94a	ca		dex				dex
.c94b	a94b	d0 ee		bne $a93b			bne 	_GXShiftLeft
.c94d	a94d	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.c950	a950	18		clc				clc
.c951	a951	60		rts				rts
.c952	a952					_GXSLFail:
.c952	a952	38		sec				sec
.c953	a953	60		rts				rts
.c954	a954					_GXCallAcquire:
.c954	a954	6c a3 08	jmp ($08a3)			jmp 	(gxAcquireVector)
.c957	a957					GXRenderOneLine:
.c957	a957	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c95a	a95a	ac 0b 08	ldy $080b			ldy 	gxOffset 					; Y contains position.
.c95d	a95d	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c95f	a95f					_GXROLLoop1:
.c95f	a95f	ad a5 08	lda $08a5			lda 	gxScale 					; set to do 'scale' times
.c962	a962	85 3b		sta $3b				sta 	gxzTemp2+1
.c964	a964					_GXROLLoop2:
.c964	a964	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c966	a966	2c 06 08	bit $0806			bit 	gxMode 						; check H Flip
.c969	a969	50 06		bvc $a971			bvc 	_GXNoHFlip
.c96b	a96b	ad a2 08	lda $08a2			lda 	gxMask
.c96e	a96e	38		sec				sec
.c96f	a96f	e5 3a		sbc $3a				sbc 	gxzTemp2
.c971	a971					_GXNoHFlip:
.c971	a971	aa		tax				tax 								; read from the pixel buffer
.c972	a972	bd 43 06	lda $0643,x			lda 	gxPixelBuffer,x
.c975	a975	d0 07		bne $a97e			bne 	_GXDraw 					; draw if non zero
.c977	a977	ad a6 08	lda $08a6			lda 	gxUseMode 					; check to see if solid background
.c97a	a97a	29 04		and #$04			and 	#4
.c97c	a97c	f0 0a		beq $a988			beq 	_GXZeroPixel
.c97e	a97e					_GXDraw:
.c97e	a97e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c980	a980	2d 09 08	and $0809			and 	gxANDValue
.c983	a983	5d 43 06	eor $0643,x			eor 	gxPixelBuffer,x
.c986	a986	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c988	a988					_GXZeroPixel:
.c988	a988	c8		iny				iny 								; advance pointer
.c989	a989	d0 05		bne $a990			bne 	_GXNoShift
.c98b	a98b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c98d	a98d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c990	a990					_GXNoShift:
.c990	a990	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c992	a992	d0 d0		bne $a964			bne 	_GXROLLoop2
.c994	a994	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c996	a996	a5 3a		lda $3a				lda 	gxzTemp2
.c998	a998	cd a1 08	cmp $08a1			cmp 	gxSize
.c99b	a99b	d0 c2		bne $a95f			bne 	_GXROLLoop1
.c99d	a99d	ee f6 07	inc $07f6			inc 	gxY0
.c9a0	a9a0	60		rts				rts
.08a1						gxSize:
>08a1								.fill 	1
.08a2						gxMask:
>08a2								.fill 	1
.08a3						gxAcquireVector:
>08a3								.fill 	2
.08a5						gxScale:
>08a5								.fill 	1
.08a6						gxUseMode:
>08a6								.fill 	1
.c9a1	a9a1					GXControlTileScrollX:
.c9a1	a9a1	ad 03 08	lda $0803			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c9a4	a9a4	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9a7	a9a7	b0 08		bcs $a9b1			bcs 	_GXCTSExit
.c9a9	a9a9	64 01		stz $01				stz 	1 							; write it out.
.c9ab	a9ab	8e 08 d2	stx $d208			stx 	$D208
.c9ae	a9ae	8c 09 d2	sty $d209			sty 	$D209
.c9b1	a9b1					_GXCTSExit:
.c9b1	a9b1	60		rts				rts
.c9b2	a9b2					GXControlTileScrollY:
.c9b2	a9b2	ad 04 08	lda $0804			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9b5	a9b5	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9b8	a9b8	b0 08		bcs $a9c2			bcs 	_GXCTSExit
.c9ba	a9ba	64 01		stz $01				stz 	1 							; write it out.
.c9bc	a9bc	8e 0a d2	stx $d20a			stx 	$D20A
.c9bf	a9bf	8c 0b d2	sty $d20b			sty 	$D20B
.c9c2	a9c2					_GXCTSExit:
.c9c2	a9c2	60		rts				rts
.c9c3	a9c3					GXScrollProcessor:
.c9c3	a9c3	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9c5	a9c5	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check tile map is on.
.c9c8	a9c8	38		sec				sec
.c9c9	a9c9	f0 2c		beq $a9f7			beq 	_GXSPExit
.c9cb	a9cb	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9cd	a9cd	a2 03		ldx #$03			ldx 	#3
.c9cf	a9cf					_GXCalcMaxPixelScroll:
.c9cf	a9cf	06 38		asl $38				asl 	gxzTemp1
.c9d1	a9d1	26 39		rol $39				rol 	gxzTemp1+1
.c9d3	a9d3	ca		dex				dex
.c9d4	a9d4	d0 f9		bne $a9cf			bne 	_GXCalcMaxPixelScroll
.c9d6	a9d6	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d8	a9d8	c5 38		cmp $38				cmp 	gxzTemp1
.c9da	a9da	a5 37		lda $37				lda 	gxzTemp0+1
.c9dc	a9dc	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9de	a9de	b0 17		bcs $a9f7			bcs		_GXSPExit
.c9e0	a9e0	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9e2	a9e2	29 07		and #$07			and		#7
.c9e4	a9e4	85 38		sta $38				sta 	gxzTemp1
.c9e6	a9e6	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e8	a9e8	26 37		rol $37				rol 	gxzTemp0+1
.c9ea	a9ea	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9ec	a9ec	29 0f		and #$0f			and 	#$0F
.c9ee	a9ee	a8		tay				tay
.c9ef	a9ef	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9f1	a9f1	29 f0		and #$f0			and 	#$F0
.c9f3	a9f3	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9f5	a9f5	aa		tax				tax 								; return in X
.c9f6	a9f6	18		clc				clc
.c9f7	a9f7					_GXSPExit:
.c9f7	a9f7	60		rts				rts
.c9f8	a9f8					GXFontHandler:
.c9f8	a9f8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9fa	a9fa	4d 06 08	eor $0806			eor 	gxMode
.c9fd	a9fd	8d a6 08	sta $08a6			sta 	gxUseMode
.ca00	aa00	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca08	aa08	26 37		rol $37				rol	 	gxzTemp0+1
.ca0a	aa0a	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca0c	aa0c	26 37		rol $37				rol	 	gxzTemp0+1
.ca0e	aa0e	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca10	aa10	09 c0		ora #$c0			ora 	#$C0
.ca12	aa12	85 37		sta $37				sta 	gxzTemp0+1
.ca14	aa14	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca16	aa16	a2 1e		ldx #$1e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca18	aa18	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca1a	aa1a	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca1d	aa1d	60		rts				rts
.ca1e	aa1e					GXGetGraphicDataFont:
.ca1e	aa1e	8a		txa				txa 								; X->Y
.ca1f	aa1f	a8		tay				tay
.ca20	aa20	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca22	aa22	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca24	aa24	85 01		sta $01				sta 	1
.ca26	aa26	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca28	aa28	86 01		stx $01				stx 	1 							; put old value back.
.ca2a	aa2a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca2c	aa2c					_GXExpand:
.ca2c	aa2c	9e 43 06	stz $0643,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca2f	aa2f	0a		asl a				asl 	a 							; shift bit 7 into C
.ca30	aa30	90 08		bcc $aa3a			bcc 	_GXNoPixel
.ca32	aa32	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca33	aa33	ad 07 08	lda $0807			lda 	gxColour
.ca36	aa36	9d 43 06	sta $0643,x			sta 	gxPixelBuffer,x
.ca39	aa39	68		pla				pla
.ca3a	aa3a					_GXNoPixel:
.ca3a	aa3a	e8		inx				inx 								; do the whole byte.
.ca3b	aa3b	e0 08		cpx #$08			cpx 	#8
.ca3d	aa3d	d0 ed		bne $aa2c			bne 	_GXExpand
.ca3f	aa3f	60		rts				rts
.ca40	aa40					GXSpriteHandler:
.ca40	aa40	ad fc 07	lda $07fc			lda 	gxSpritesOn 				; sprites on ?
.ca43	aa43	f0 23		beq $aa68			beq 	_GXSHExit
.ca45	aa45	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca47	aa47	4d 06 08	eor $0806			eor 	gxMode
.ca4a	aa4a	8d a6 08	sta $08a6			sta 	gxUseMode
.ca4d	aa4d	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca4f	aa4f	da		phx				phx
.ca50	aa50	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; can access sprite information
.ca53	aa53	68		pla				pla
.ca54	aa54	20 5f ad	jsr $ad5f			jsr 	GXFindSprite 				; get the sprite address
.ca57	aa57	08		php				php
.ca58	aa58	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.ca5b	aa5b	28		plp				plp
.ca5c	aa5c	b0 0a		bcs $aa68			bcs		_GXSHExit 					; exit if find failed.
.ca5e	aa5e	ad a7 08	lda $08a7			lda 	gxSizePixels 				; return size
.ca61	aa61	a2 69		ldx #$69			ldx 	#GXSpriteAcquire & $FF
.ca63	aa63	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca65	aa65	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca68	aa68					_GXSHExit:
.ca68	aa68	60		rts				rts
.ca69	aa69					GXSpriteAcquire:
.ca69	aa69	ad 00 08	lda $0800			lda 	gxSpritePage				; point to base page
.ca6c	aa6c	85 0b		sta $0b				sta 	GXEditSlot
.ca6e	aa6e	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca70	aa70	a9 00		lda #$00			lda 	#0
.ca72	aa72	ae a8 08	ldx $08a8			ldx 	gxSizeBits
.ca75	aa75					_GXTimesRowNumber:
.ca75	aa75	18		clc				clc
.ca76	aa76	65 36		adc $36				adc 	gxzTemp0
.ca78	aa78	ca		dex				dex
.ca79	aa79	10 fa		bpl $aa75			bpl 	_GXTimesRowNumber
.ca7b	aa7b	64 37		stz $37				stz 	gxzTemp0+1
.ca7d	aa7d	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca7e	aa7e	26 37		rol $37				rol 	gxzTemp0+1
.ca80	aa80	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca81	aa81	26 37		rol $37				rol 	gxzTemp0+1
.ca83	aa83	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca84	aa84	26 37		rol $37				rol 	gxzTemp0+1
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	18		clc				clc 								; add base address.
.ca89	aa89	a5 36		lda $36				lda 	gxzTemp0
.ca8b	aa8b	6d aa 08	adc $08aa			adc 	gxSpriteOffset
.ca8e	aa8e	85 36		sta $36				sta 	gxzTemp0
.ca90	aa90	a5 37		lda $37				lda 	gxzTemp0+1
.ca92	aa92	6d ab 08	adc $08ab			adc 	gxSpriteOffset+1
.ca95	aa95					_GXSAFindPage:
.ca95	aa95	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca97	aa97	90 06		bcc $aa9f			bcc 	_GXSAFoundPage
.ca99	aa99	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca9b	aa9b	e6 0b		inc $0b				inc 	GXEditSlot
.ca9d	aa9d	80 f6		bra $aa95			bra 	_GXSAFindPage
.ca9f	aa9f					_GXSAFoundPage:
.ca9f	aa9f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.caa1	aaa1	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.caa3	aaa3	a0 00		ldy #$00			ldy 	#0
.caa5	aaa5					_GXSACopyLoop:
.caa5	aaa5	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.caa7	aaa7	99 43 06	sta $0643,y			sta 	gxPixelBuffer,y
.caaa	aaaa	c8		iny				iny
.caab	aaab	cc a7 08	cpy $08a7			cpy 	gxSizePixels
.caae	aaae	d0 f5		bne $aaa5			bne 	_GXSACopyLoop
.cab0	aab0	60		rts				rts
.cab1	aab1					GXSelect:
.cab1	aab1	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cab4	aab4	f0 22		beq $aad8			beq 	_GXSFail
.cab6	aab6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab8	aab8	c9 40		cmp #$40			cmp 	#64
.caba	aaba	b0 1c		bcs $aad8			bcs 	_GXSFail
.cabc	aabc	8d 0c 08	sta $080c			sta 	GSCurrentSpriteID
.cabf	aabf	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cac1	aac1	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cac3	aac3	06 36		asl $36				asl 	gxzTemp0
.cac5	aac5	06 36		asl $36				asl 	gxzTemp0
.cac7	aac7	06 36		asl $36				asl 	gxzTemp0
.cac9	aac9	2a		rol a				rol 	a
.caca	aaca	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cacc	aacc	8d 0e 08	sta $080e			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cacf	aacf	85 37		sta $37				sta 	gxzTemp0+1
.cad1	aad1	a5 36		lda $36				lda 	gxzTemp0
.cad3	aad3	8d 0d 08	sta $080d			sta 	GSCurrentSpriteAddr
.cad6	aad6	18		clc				clc
.cad7	aad7	60		rts				rts
.cad8	aad8					_GXSFail:
.cad8	aad8	38		sec				sec
.cad9	aad9	60		rts				rts
.cada	aada					GXSelectImage:
.cada	aada	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cadd	aadd	f0 74		beq $ab53			beq 	_GXSIFail
.cadf	aadf	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cae2	aae2	f0 6f		beq $ab53			beq 	_GXSIFail 					; (checking the MSB)
.cae4	aae4	64 01		stz $01				stz 	1
.cae6	aae6	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae8	aae8	d0 6b		bne $ab55			bne 	_GXSIHide
.caea	aaea	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.caec	aaec	48		pha				pha
.caed	aaed	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap
.caf0	aaf0	68		pla				pla
.caf1	aaf1	20 5f ad	jsr $ad5f			jsr 	GXFindSprite
.caf4	aaf4	b0 5a		bcs $ab50			bcs 	_GXSICloseFail 				; no image
.caf6	aaf6	a0 01		ldy #$01			ldy 	#1
.caf8	aaf8	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr
.cafb	aafb	85 36		sta $36				sta 	gxzTemp0
.cafd	aafd	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1
.cb00	ab00	85 37		sta $37				sta 	gxzTemp0+1
.cb02	ab02	ad aa 08	lda $08aa			lda 	gxSpriteOffset
.cb05	ab05	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb07	ab07	18		clc				clc
.cb08	ab08	ad ab 08	lda $08ab			lda 	gxSpriteOffset+1
.cb0b	ab0b	6d 0f 08	adc $080f			adc 	gxSpriteOffsetBase
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad 10 08	lda $0810			lda 	gxSpriteOffsetBase+1
.cb14	ab14	69 00		adc #$00			adc 	#0
.cb16	ab16	c8		iny				iny
.cb17	ab17	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb19	ab19	ad a8 08	lda $08a8			lda 	gxSizeBits 					; get raw size
.cb1c	ab1c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb1e	ab1e	2a		rol a				rol 	a 							; x 2
.cb1f	ab1f	0a		asl a				asl 	a 							; x 4
.cb20	ab20	0a		asl a				asl 	a 							; x 8
.cb21	ab21	0a		asl a				asl 	a 							; x 16
.cb22	ab22	0d a9 08	ora $08a9			ora 	gxSpriteLUT 				; Or with LUT
.cb25	ab25	0a		asl a				asl 	a 							; 1 shift
.cb26	ab26	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb28	ab28	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb2a	ab2a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb2d	ab2d	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb30	ab30	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb33	ab33	29 3f		and #$3f			and 	#$3F
.cb35	ab35	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cb38	ab38	ad a8 08	lda $08a8			lda 	gxSizeBits 					; get bit size
.cb3b	ab3b	6a		ror a				ror 	a 							; shift into bits 6/7
.cb3c	ab3c	6a		ror a				ror 	a
.cb3d	ab3d	6a		ror a				ror 	a
.cb3e	ab3e	29 c0		and #$c0			and 	#$C0
.cb40	ab40	1d 51 08	ora $0851,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb43	ab43	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cb46	ab46	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb49	ab49	29 7f		and #$7f			and 	#$7F
.cb4b	ab4b	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cb4e	ab4e	18		clc				clc
.cb4f	ab4f	60		rts				rts
.cb50	ab50					_GXSICloseFail:
.cb50	ab50	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb53	ab53					_GXSIFail:
.cb53	ab53	38		sec				sec
.cb54	ab54	60		rts				rts
.cb55	ab55					_GXSIHide:
.cb55	ab55	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb58	ab58	85 36		sta $36				sta 	gxzTemp0
.cb5a	ab5a	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1
.cb5d	ab5d	85 37		sta $37				sta 	gxzTemp0+1
.cb5f	ab5f	a9 00		lda #$00			lda 	#0
.cb61	ab61	92 36		sta ($36)			sta 	(gxzTemp0)
.cb63	ab63	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb66	ab66	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb69	ab69	09 80		ora #$80			ora 	#$80
.cb6b	ab6b	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cb6e	ab6e	18		clc				clc
.cb6f	ab6f	60		rts				rts
.cb70	ab70					GXMoveSprite:
.cb70	ab70	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cb73	ab73	f0 65		beq $abda			beq 	_GXSIFail
.cb75	ab75	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb78	ab78	f0 60		beq $abda			beq 	_GXSIFail
.cb7a	ab7a	85 37		sta $37				sta 	gxzTemp0+1
.cb7c	ab7c	a0 04		ldy #$04			ldy 	#4
.cb7e	ab7e	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr
.cb81	ab81	85 36		sta $36				sta 	gxzTemp0
.cb83	ab83	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb86	ab86	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cb89	ab89	2a		rol a				rol 	a	 						; into bits 0,1.
.cb8a	ab8a	2a		rol a				rol 	a
.cb8b	ab8b	2a		rol a				rol 	a
.cb8c	ab8c	29 03		and #$03			and 	#3
.cb8e	ab8e	aa		tax				tax
.cb8f	ab8f	bd dc ab	lda $abdc,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb92	ab92	48		pha				pha
.cb93	ab93	18		clc				clc
.cb94	ab94	6d f4 07	adc $07f4			adc 	gxX0						; copy position.
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	ad f5 07	lda $07f5			lda 	gxX0+1
.cb9d	ab9d	69 00		adc #$00			adc 	#0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	c8		iny				iny
.cba2	aba2	68		pla				pla
.cba3	aba3	18		clc				clc
.cba4	aba4	6d f6 07	adc $07f6			adc 	gxY0
.cba7	aba7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba9	aba9	a9 00		lda #$00			lda 	#0
.cbab	abab	69 00		adc #$00			adc 	#0
.cbad	abad	c8		iny				iny
.cbae	abae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cbb0	abb0	4e f5 07	lsr $07f5			lsr 	gxX0+1 						; divide X by 4
.cbb3	abb3	6e f4 07	ror $07f4			ror 	gxX0
.cbb6	abb6	4e f4 07	lsr $07f4			lsr 	gxX0
.cbb9	abb9	4e f6 07	lsr $07f6			lsr 	gxY0 						; divide Y by 4
.cbbc	abbc	4e f6 07	lsr $07f6			lsr 	gxY0
.cbbf	abbf	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbc2	abc2	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x
.cbc5	abc5	29 80		and #$80			and 	#$80
.cbc7	abc7	0d f4 07	ora $07f4			ora 	gxX0
.cbca	abca	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cbcd	abcd	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cbd0	abd0	29 c0		and #$c0			and 	#$C0
.cbd2	abd2	0d f6 07	ora $07f6			ora 	gxY0
.cbd5	abd5	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					_GXSIFail:
.cbda	abda	38		sec				sec
.cbdb	abdb	60		rts				rts
.cbdc	abdc					_GXMSOffset:
>cbdc	abdc	1c						.byte 	32-8/2
>cbdd	abdd	18						.byte 	32-16/2
>cbde	abde	14						.byte 	32-24/2
>cbdf	abdf	10						.byte 	32-32/2
.cbe0	abe0					GXSelectTile:
.cbe0	abe0	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check tilemap in use
.cbe3	abe3	f0 4b		beq $ac30			beq 	_GXSFail
.cbe5	abe5	a5 36		lda $36				lda 	gxzTemp0 					; check X and Y in range
.cbe7	abe7	cd 03 08	cmp $0803			cmp 	gxTileMapWidth
.cbea	abea	b0 44		bcs $ac30			bcs 	_GXSFail
.cbec	abec	a5 37		lda $37				lda 	gxzTemp0+1
.cbee	abee	cd 04 08	cmp $0804			cmp 	gxTileMapHeight
.cbf1	abf1	b0 3d		bcs $ac30			bcs 	_GXSFail
.cbf3	abf3	ad 02 08	lda $0802			lda 	gxTileMapPage 				; page to access = tile access page.
.cbf6	abf6	8d 91 08	sta $0891			sta 	gxTileAccessPage
.cbf9	abf9	ae 03 08	ldx $0803			ldx 	gxTileMapWidth 				; YX is the additive, e.g. shifted left. gxzTemp0+1 is shifted right.
.cbfc	abfc	a0 00		ldy #$00			ldy 	#0
.cbfe	abfe	a5 36		lda $36				lda 	gxzTemp0 					; initial result is X
.cc00	ac00	8d 92 08	sta $0892			sta 	gxTileAccessAddress
.cc03	ac03	9c 93 08	stz $0893			stz  	gxTileAccessAddress+1
.cc06	ac06					_GXSTMultiply:
.cc06	ac06	46 37		lsr $37				lsr 	gxzTemp0+1 					; shift Y right
.cc08	ac08	90 0f		bcc $ac19			bcc 	_GXSTNoAdd 					; add if CS
.cc0a	ac0a	18		clc				clc 								; add YX to result
.cc0b	ac0b	8a		txa				txa
.cc0c	ac0c	6d 92 08	adc $0892			adc 	gxTileAccessAddress
.cc0f	ac0f	8d 92 08	sta $0892			sta 	gxTileAccessAddress
.cc12	ac12	98		tya				tya
.cc13	ac13	6d 93 08	adc $0893			adc 	gxTileAccessAddress+1
.cc16	ac16	8d 93 08	sta $0893			sta 	gxTileAccessAddress+1
.cc19	ac19					_GXSTNoAdd:
.cc19	ac19	8a		txa				txa 								; shift YX left
.cc1a	ac1a	0a		asl a				asl 	a
.cc1b	ac1b	aa		tax				tax
.cc1c	ac1c	98		tya				tya
.cc1d	ac1d	2a		rol a				rol 	a
.cc1e	ac1e	a8		tay				tay
.cc1f	ac1f	a5 37		lda $37				lda 	gxzTemp0+1 					; multiply complete
.cc21	ac21	d0 e3		bne $ac06			bne 	_GXSTMultiply
.cc23	ac23	0e 92 08	asl $0892			asl 	gxTileAccessAddress 		; double it, as it is a word array.
.cc26	ac26	2e 93 08	rol $0893			rol 	gxTileAccessAddress+1
.cc29	ac29					_GXSTFixAddressLoop:
.cc29	ac29	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress
.cc2c	ac2c	b0 fb		bcs $ac29			bcs 	_GXSTFixAddressLoop
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXSFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXSTFixAddress:
.cc32	ac32	48		pha				pha
.cc33	ac33	ad 93 08	lda $0893			lda 	gxTileAccessAddress+1 		; in legal page range e.g. $0000-$1FFF
.cc36	ac36	c9 20		cmp #$20			cmp 	#$20
.cc38	ac38	90 06		bcc $ac40			bcc 	_GXSTFAExit
.cc3a	ac3a	e9 20		sbc #$20			sbc 	#$20 						; adjust address
.cc3c	ac3c	ee 91 08	inc $0891			inc 	gxTileAccessPage 			; adjust page up.
.cc3f	ac3f	38		sec				sec
.cc40	ac40					_GXSTFAExit:
.cc40	ac40	68		pla				pla
.cc41	ac41	60		rts				rts
.cc42	ac42					GXSTWriteTile:
.cc42	ac42	38		sec				sec 								; CS = update flag
.cc43	ac43	80 01		bra $ac46			bra 	GXSTTileAccess
.cc45	ac45					GXSTReadTile:
.cc45	ac45	18		clc				clc
.cc46	ac46					GXSTTileAccess:
.cc46	ac46	a5 0b		lda $0b				lda 	GXEditSlot 					; save oroginal page
.cc48	ac48	48		pha				pha
.cc49	ac49	08		php				php 								; save update flag
.cc4a	ac4a	ad 91 08	lda $0891			lda 	gxTileAccessPage 			; access the tile page.
.cc4d	ac4d	85 0b		sta $0b				sta 	GXEditSlot
.cc4f	ac4f	a6 36		ldx $36				ldx 	gxzTemp0 					; X = New value
.cc51	ac51	ad 92 08	lda $0892			lda 	gxTileAccessAddress 		; set gxzTemp0 to point there
.cc54	ac54	85 36		sta $36				sta 	gxzTemp0
.cc56	ac56	ad 93 08	lda $0893			lda 	gxTileAccessAddress+1
.cc59	ac59	09 60		ora #$60			ora 	#(GXMappingAddress >> 8)
.cc5b	ac5b	85 37		sta $37				sta 	gxzTemp0+1
.cc5d	ac5d	28		plp				plp 								; get flag
.cc5e	ac5e	90 09		bcc $ac69			bcc 	_GXSNoUpdate 				; updating the tile map ?
.cc60	ac60	8a		txa				txa 								; new value
.cc61	ac61	92 36		sta ($36)			sta 	(gxzTemp0) 					; write it out, as a word.
.cc63	ac63	a0 01		ldy #$01			ldy 	#1
.cc65	ac65	a9 00		lda #$00			lda 	#0
.cc67	ac67	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cc69	ac69					_GXSNoUpdate:
.cc69	ac69	b2 36		lda ($36)			lda 	(gxzTemp0) 					; read the value
.cc6b	ac6b	fa		plx				plx 								; restore old page
.cc6c	ac6c	86 0b		stx $0b				stx 	GXEditSlot
.cc6e	ac6e	ee 92 08	inc $0892			inc 	gxTileAccessAddress 		; advance tile ptr by 2 - will always be even.
.cc71	ac71	ee 92 08	inc $0892			inc 	gxTileAccessAddress
.cc74	ac74	d0 03		bne $ac79			bne 	_GXSNoCarry
.cc76	ac76	ee 93 08	inc $0893			inc 	gxTileAccessAddress+1
.cc79	ac79					_GXSNoCarry:
.cc79	ac79	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress 				; fix address if required.
.cc7c	ac7c	18		clc				clc 								; return with ok flag.
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					GXOpenBitmap:
.cc7e	ac7e	78		sei				sei 								; no interrupts here
.cc7f	ac7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cc81	ac81	8d 0a 08	sta $080a			sta 	gxOriginalLUTValue
.cc84	ac84	58		cli				cli
.cc85	ac85	60		rts				rts
.cc86	ac86					GXCloseBitmap:
.cc86	ac86	78		sei				sei
.cc87	ac87	ad 0a 08	lda $080a			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cc8a	ac8a	85 0b		sta $0b				sta 	GXEditSlot
.cc8c	ac8c	58		cli				cli
.cc8d	ac8d	60		rts				rts
.cc8e	ac8e					gxPositionCalc:
.cc8e	ac8e	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cc90	ac90	48		pha				pha
.cc91	ac91	ad f6 07	lda $07f6			lda 	gxY0 							; gxzScreen = Y0
.cc94	ac94	85 3c		sta $3c				sta 	gxzScreen
.cc96	ac96	64 3d		stz $3d				stz 	gxzScreen+1
.cc98	ac98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cc9a	ac9a	26 3d		rol $3d				rol 	gxzScreen+1
.cc9c	ac9c	06 3c		asl $3c				asl 	gxzScreen
.cc9e	ac9e	26 3d		rol $3d				rol 	gxzScreen+1
.cca0	aca0	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cca1	aca1	65 3c		adc $3c				adc 	gxzScreen
.cca3	aca3	85 3c		sta $3c				sta 	gxzScreen
.cca5	aca5	90 02		bcc $aca9			bcc 	_GXPCNoCarry
.cca7	aca7	e6 3d		inc $3d				inc 	gxzScreen+1
.cca9	aca9					_GXPCNoCarry:
.cca9	aca9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.ccab	acab	26 3d		rol $3d				rol 	gxzScreen+1
.ccad	acad	a5 3d		lda $3d				lda	 	gxzScreen+1
.ccaf	acaf	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.ccb1	acb1	64 3d		stz $3d				stz 	gxzScreen+1
.ccb3	acb3	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.ccb5	acb5					_GXPCMultiply32:
.ccb5	acb5	06 3c		asl $3c				asl 	gxzScreen
.ccb7	acb7	26 3d		rol $3d				rol 	gxzScreen+1
.ccb9	acb9	3a		dec a				dec 	a
.ccba	acba	d0 f9		bne $acb5			bne 	_GXPCMultiply32
.ccbc	acbc	18		clc				clc
.ccbd	acbd	ad f4 07	lda $07f4			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.ccc0	acc0	65 3c		adc $3c				adc 	gxzScreen
.ccc2	acc2	8d 0b 08	sta $080b			sta 	gxOffset
.ccc5	acc5	ad f5 07	lda $07f5			lda 	gxX0+1
.ccc8	acc8	65 3d		adc $3d				adc 	gxzScreen+1
.ccca	acca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cccc	accc	90 04		bcc $acd2			bcc 	_GXPCNoOverflow
.ccce	acce	29 1f		and #$1f			and 	#$1F 						; fix it up
.ccd0	acd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.ccd2	acd2					_GXPCNoOverflow:
.ccd2	acd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.ccd4	acd4	85 3d		sta $3d				sta 	gxzScreen+1
.ccd6	acd6	64 3c		stz $3c				stz 	gxzScreen
.ccd8	acd8	18		clc				clc
.ccd9	acd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.ccdb	acdb	6d ff 07	adc $07ff			adc 	gxBasePage 					; by adding the base page
.ccde	acde	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cce0	ace0	68		pla				pla
.cce1	ace1	85 36		sta $36				sta 	gxzTemp0
.cce3	ace3	60		rts				rts
.cce4	ace4					GXMovePositionDown:
.cce4	ace4	18		clc				clc 								; add 320 to offset/temp+1
.cce5	ace5	ad 0b 08	lda $080b			lda 	gxOffset
.cce8	ace8	69 40		adc #$40			adc 	#64
.ccea	acea	8d 0b 08	sta $080b			sta 	gxOffset
.cced	aced	a5 3d		lda $3d				lda 	gxzScreen+1
.ccef	acef	69 01		adc #$01			adc 	#1
.ccf1	acf1	85 3d		sta $3d				sta 	gxzScreen+1
.ccf3	acf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ccf5	acf5	90 07		bcc $acfe			bcc 	_GXMPDExit
.ccf7	acf7	38		sec				sec  								; next page, adjust address
.ccf8	acf8	e9 20		sbc #$20			sbc 	#$20
.ccfa	acfa	85 3d		sta $3d				sta 	gxzScreen+1
.ccfc	acfc	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.ccfe	acfe					_GXMPDExit:
.ccfe	acfe	60		rts				rts
.ccff	acff					GXCollide:
.ccff	acff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cd01	ad01	aa		tax				tax
.cd02	ad02	05 37		ora $37				ora 	gxzTemp0+1
.cd04	ad04	29 c0		and #$c0			and 	#$C0
.cd06	ad06	38		sec				sec
.cd07	ad07	d0 53		bne $ad5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cd09	ad09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cd0b	ad0b	b9 11 08	lda $0811,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cd0e	ad0e	1d 11 08	ora $0811,x			ora 	gxSpriteLow,x
.cd11	ad11	30 48		bmi $ad5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cd13	ad13	18		clc				clc 								; need to calculate sum of sizes.
.cd14	ad14	b9 51 08	lda $0851,y			lda 	gxSpriteHigh,y
.cd17	ad17	7d 51 08	adc $0851,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cd1a	ad1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cd1c	ad1c	6a		ror a				ror 	a 							; 5/6/7
.cd1d	ad1d	4a		lsr a				lsr 	a 							; 4/5/6
.cd1e	ad1e	4a		lsr a				lsr 	a 							; 3/4/5
.cd1f	ad1f	4a		lsr a				lsr 	a 							; 2/3/4
.cd20	ad20	18		clc				clc
.cd21	ad21	69 08		adc #$08			adc 	#$08
.cd23	ad23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cd24	ad24	4a		lsr a				lsr 	a
.cd25	ad25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cd27	ad27	b9 51 08	lda $0851,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cd2a	ad2a	29 3f		and #$3f			and 	#$3F
.cd2c	ad2c	85 39		sta $39				sta 	gxzTemp1+1
.cd2e	ad2e	38		sec				sec
.cd2f	ad2f	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cd32	ad32	29 3f		and #$3f			and 	#$3F
.cd34	ad34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cd36	ad36	b0 03		bcs $ad3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cd38	ad38	49 ff		eor #$ff			eor 	#$FF
.cd3a	ad3a	1a		inc a				inc 	a
.cd3b	ad3b					_GXCAbs1:
.cd3b	ad3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd3d	ad3d	b0 1c		bcs $ad5b			bcs 	_GXOkayFail
.cd3f	ad3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cd41	ad41	38		sec				sec 								; calculate |x1-x0|
.cd42	ad42	b9 11 08	lda $0811,y			lda 	gxSpriteLow,y
.cd45	ad45	fd 11 08	sbc $0811,x			sbc 	gxSpriteLow,x
.cd48	ad48	b0 03		bcs $ad4d			bcs 	_GXCAbs2
.cd4a	ad4a	49 ff		eor #$ff			eor 	#$FF
.cd4c	ad4c	1a		inc a				inc 	a
.cd4d	ad4d					_GXCAbs2:
.cd4d	ad4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd4f	ad4f	b0 0a		bcs $ad5b			bcs 	_GXOkayFail
.cd51	ad51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cd53	ad53	90 02		bcc $ad57			bcc 	_GXCHaveLowest
.cd55	ad55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cd57	ad57					_GXCHaveLowest:
.cd57	ad57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cd58	ad58	0a		asl a				asl 	a
.cd59	ad59	18		clc				clc
.cd5a	ad5a	60		rts				rts
.cd5b	ad5b					_GXOkayFail:
.cd5b	ad5b	18		clc				clc
.cd5c	ad5c					_GXCollideFail:
.cd5c	ad5c	a9 ff		lda #$ff			lda 	#$FF
.cd5e	ad5e	60		rts				rts
.cd5f	ad5f					GXFindSprite:
.cd5f	ad5f	aa		tax				tax  								; sprite index in X
.cd60	ad60	9c aa 08	stz $08aa			stz 	gxSpriteOffset 				; sprite offset is the offset in the sprite list.
.cd63	ad63	9c ab 08	stz $08ab			stz 	gxSpriteOffset+1
.cd66	ad66	64 38		stz $38				stz 	gxzTemp1 					; zTemp1 is the address in memory, given the current selected page.
.cd68	ad68	a9 60		lda #$60			lda 	#GXMappingAddress >> 8
.cd6a	ad6a	85 39		sta $39				sta 	gxzTemp1+1
.cd6c	ad6c	ad 00 08	lda $0800			lda 	gxSpritePage 				; and point to the sprite page.
.cd6f	ad6f	85 0b		sta $0b				sta 	GXEditSlot
.cd71	ad71	b2 38		lda ($38)			lda 	(gxzTemp1) 					; get the first sprite record header, identifying the format.
.cd73	ad73	c9 11		cmp #$11			cmp 	#$11						; should be $11
.cd75	ad75	d0 6c		bne $ade3			bne 	_GXFSFail 					; if not, fail
.cd77	ad77	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; increment pointers.
.cd7a	ad7a					_GXFindLoop:
.cd7a	ad7a	b2 38		lda ($38)			lda 	(gxzTemp1) 					; reached the end, if so then failed.
.cd7c	ad7c	c9 80		cmp #$80			cmp 	#$80
.cd7e	ad7e	f0 63		beq $ade3			beq 	_GXFSFail
.cd80	ad80	e0 00		cpx #$00			cpx 	#0 							; if zero, then found.
.cd82	ad82	f0 2c		beq $adb0			beq 	_GXFSFound
.cd84	ad84	ca		dex				dex 								; decrement count.
.cd85	ad85	0a		asl a				asl 	a 							; index into table
.cd86	ad86	a8		tay				tay 								; so we can look it up.
.cd87	ad87	18		clc				clc 								; add LSB
.cd88	ad88	ad aa 08	lda $08aa			lda 	gxSpriteOffset
.cd8b	ad8b	79 e5 ad	adc $ade5,y			adc 	_GXFSSizeTable,y
.cd8e	ad8e	8d aa 08	sta $08aa			sta 	gxSpriteOffset 				; these two should move in lock step.
.cd91	ad91	85 38		sta $38				sta 	gxzTemp1
.cd93	ad93	90 05		bcc $ad9a			bcc 	_GXNextNoCarry 				; adjust for carry as we add the MSB seperately.
.cd95	ad95	ee ab 08	inc $08ab			inc 	gxSpriteOffset+1
.cd98	ad98	e6 39		inc $39				inc 	gxzTemp1+1
.cd9a	ad9a					_GXNextNoCarry:
.cd9a	ad9a	18		clc				clc
.cd9b	ad9b	a5 39		lda $39				lda 	gxzTemp1+1 					; add MSB
.cd9d	ad9d	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda0	ada0	85 39		sta $39				sta 	gxzTemp1+1
.cda2	ada2	ad ab 08	lda $08ab			lda 	gxSpriteOffset+1
.cda5	ada5	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda8	ada8	8d ab 08	sta $08ab			sta 	gxSpriteOffset+1
.cdab	adab	20 d5 ad	jsr $add5			jsr 	_GXFSNormalise 				; and normalise the page address.
.cdae	adae	80 ca		bra $ad7a			bra 	_GXFindLoop 				; and go round again.
.cdb0	adb0					_GXFSFound:
.cdb0	adb0	b2 38		lda ($38)			lda 	(gxzTemp1)					; get the bit size (e.g. 0-3)
.cdb2	adb2	8d a8 08	sta $08a8			sta 	gxSizeBits
.cdb5	adb5	1a		inc a				inc 	a 							; 1,2,3,4 - calculating pixel size
.cdb6	adb6	0a		asl a				asl 	a 							; 2,4,6,8
.cdb7	adb7	0a		asl a				asl 	a 							; 4,8,12,16
.cdb8	adb8	0a		asl a				asl 	a 							; 8,16,24,32
.cdb9	adb9	8d a7 08	sta $08a7			sta 	gxSizePixels
.cdbc	adbc	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and to the LUT
.cdbf	adbf	b2 38		lda ($38)			lda 	(gxzTemp1) 					; copy that out.
.cdc1	adc1	8d a9 08	sta $08a9			sta 	gxSpriteLUT
.cdc4	adc4	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and it now points to the first graphic data byte
.cdc7	adc7	18		clc				clc
.cdc8	adc8	60		rts				rts
.cdc9	adc9					_GXFSIncrement:
.cdc9	adc9	ee aa 08	inc $08aa			inc 	gxSpriteOffset 				; these two should move in sync
.cdcc	adcc	e6 38		inc $38				inc 	gxzTemp1
.cdce	adce	d0 05		bne $add5			bne 	_GXFSNormalise
.cdd0	add0	ee ab 08	inc $08ab			inc 	gxSpriteOffset+1
.cdd3	add3	e6 39		inc $39				inc 	gxzTemp1+1
.cdd5	add5					_GXFSNormalise:
.cdd5	add5	a5 39		lda $39				lda 	gxzTemp1+1 					; are we out of range.
.cdd7	add7	c9 80		cmp #$80			cmp 	#(GXMappingAddress >> 8)+$20
.cdd9	add9	90 07		bcc $ade2			bcc 	_GXFSOkay
.cddb	addb	e6 0b		inc $0b				inc 	GXEditSlot 					; next 8k page
.cddd	addd	38		sec				sec 								; adjust page address back
.cdde	adde	e9 20		sbc #$20			sbc 	#$20
.cde0	ade0	85 39		sta $39				sta 	gxzTemp1+1
.cde2	ade2					_GXFSOkay:
.cde2	ade2	60		rts				rts
.cde3	ade3					_GXFSFail:
.cde3	ade3	38		sec				sec
.cde4	ade4	60		rts				rts
.cde5	ade5					_GXFSSizeTable:
>cde5	ade5	42 00 02 01 42 02 02 04				.word 	8*8+2,16*16+2,24*24+2,32*32+2
.08a7						gxSizePixels:
>08a7								.fill 	1
.08a8						gxSizeBits:
>08a8								.fill 	1
.08a9						gxSpriteLUT:
>08a9								.fill 	1
.08aa						gxSpriteOffset:
>08aa								.fill 	2
.cded	aded					GXSortXY:
.cded	aded	20 0b ae	jsr $ae0b			jsr 	GXSortY 					; will be sorted on Y now
.cdf0	adf0	ad f4 07	lda $07f4			lda 	gxX0 						; compare X0 v X1
.cdf3	adf3	cd f8 07	cmp $07f8			cmp 	gxX1
.cdf6	adf6	ad f5 07	lda $07f5			lda 	gxX0+1
.cdf9	adf9	ed f9 07	sbc $07f9			sbc 	gxX1+1
.cdfc	adfc	90 0c		bcc $ae0a			bcc 	_GXSXYExit 					; X0 < X1 exit
.cdfe	adfe	a2 00		ldx #$00			ldx 	#0 							; swap them over
.ce00	ae00	a0 04		ldy #$04			ldy 	#4
.ce02	ae02	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce05	ae05	e8		inx				inx
.ce06	ae06	c8		iny				iny
.ce07	ae07	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce0a	ae0a					_GXSXYExit:
.ce0a	ae0a	60		rts				rts
.ce0b	ae0b					GXSortY:
.ce0b	ae0b	ad f6 07	lda $07f6			lda 	gxY0 						; if Y0 >= Y1
.ce0e	ae0e	cd fa 07	cmp $07fa			cmp 	gxY1
.ce11	ae11	90 0b		bcc $ae1e			bcc 	_GXSYSorted
.ce13	ae13	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.ce15	ae15	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.ce17	ae17					_GXSwap1:
.ce17	ae17	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce1a	ae1a	88		dey				dey
.ce1b	ae1b	ca		dex				dex
.ce1c	ae1c	10 f9		bpl $ae17			bpl 	_GXSwap1
.ce1e	ae1e					_GXSYSorted:
.ce1e	ae1e	60		rts				rts
.ce1f	ae1f					GXSwapXY:
.ce1f	ae1f	bd f4 07	lda $07f4,x			lda 	gxX0,x
.ce22	ae22	48		pha				pha
.ce23	ae23	b9 f4 07	lda $07f4,y			lda 	gxX0,y
.ce26	ae26	9d f4 07	sta $07f4,x			sta 	gxX0,x
.ce29	ae29	68		pla				pla
.ce2a	ae2a	99 f4 07	sta $07f4,y			sta 	gxX0,y
.ce2d	ae2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.ce2e	ae2e					KeywordSet0:
>ce2e	ae2e	00 65					.text	0,$65,""               ; $80 !0:EOF
>ce30	ae30	00 58					.text	0,$58,""               ; $81 !1:SH1
>ce32	ae32	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ce34	ae34	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>ce3a	ae3a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>ce42	ae42	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>ce48	ae48	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>ce4f	ae4f	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>ce57	ae57	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>ce5e	ae5e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>ce65	ae65	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>ce6c	ae6c	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>ce72	ae72	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>ce7a	ae7a	45 24 28
>ce7d	ae7d	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>ce85	ae85	45 24 28
>ce88	ae88	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>ce8e	ae8e	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ce96	ae96	28
>ce97	ae97	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ce9f	ae9f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cea5	aea5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cead	aead	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ceb5	aeb5	55 4e 54 28
>ceb9	aeb9	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cec1	aec1	54 24 28
>cec4	aec4	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cecb	aecb	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>ced2	aed2	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>ced9	aed9	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cee1	aee1	4e 28
>cee3	aee3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ceeb	aeeb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cef1	aef1	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cef7	aef7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cefe	aefe	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cf04	af04	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cf0a	af0a	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cf11	af11	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cf19	af19	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cf21	af21	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cf29	af29	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cf31	af31	47 28
>cf33	af33	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cf3b	af3b	28
>cf3c	af3c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cf44	af44	28
>cf45	af45	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cf4b	af4b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cf51	af51	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cf57	af57	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cf5e	af5e	05 56 54 49 4c 45 28			.text	5,$56,"TILE("          ; $aa TILE(
>cf65	af65	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $ab TIMER(
>cf6d	af6d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ac TRUE
>cf73	af73	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ad VAL(
>cf79	af79	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ae FOR
>cf7e	af7e	02 8f 49 46				.text	2,$8f,"IF"             ; $af IF
>cf82	af82	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $b0 PROC
>cf88	af88	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b1 REPEAT
>cf90	af90	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b2 WHILE
>cf97	af97	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b3 ENDIF
>cf9e	af9e	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b4 ENDPROC
>cfa6	afa6	43
>cfa7	afa7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b5 NEXT
>cfad	afad	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b6 THEN
>cfb3	afb3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b7 UNTIL
>cfba	afba	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b8 WEND
>cfc0	afc0	02 95 41 54				.text	2,$95,"AT"             ; $b9 AT
>cfc4	afc4	02 9b 42 59				.text	2,$9b,"BY"             ; $ba BY
>cfc8	afc8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $bb CALL
>cfce	afce	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bc CIRCLE
>cfd6	afd6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bd CLEAR
>cfdd	afdd	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $be COLOR
>cfe4	afe4	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bf COLOUR
>cfec	afec	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $c0 DATA
>cff2	aff2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c1 DIM
>cff7	aff7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c2 DOWNTO
>cfff	afff	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c3 ELSE
>d005	b005	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c4 FROM
>d00b	b00b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c5 GFX
>d010	b010	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c6 HERE
>d016	b016	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c7 IMAGE
>d01d	b01d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c8 LET
>d022	b022	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c9 LINE
>d028	b028	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ca LOCAL
>d02f	b02f	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $cb MEMCOPY
>d037	b037	59
>d038	b038	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cc OFF
>d03d	b03d	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cd ON
>d041	b041	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ce OUTLINE
>d049	b049	45
>d04a	b04a	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cf PALETTE
>d052	b052	45
>d053	b053	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $d0 PLOT
>d059	b059	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d1 POKE
>d05f	b05f	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d2 POKED
>d066	b066	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d3 POKEL
>d06d	b06d	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d4 POKEW
>d074	b074	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d5 READ
>d07a	b07a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d6 RECT
>d080	b080	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d7 REM
>d085	b085	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d8 SOLID
>d08c	b08c	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d9 SOUND
>d093	b093	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $da SPRITE
>d09b	b09b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $db TEXT
>d0a1	b0a1	02 a3 54 4f				.text	2,$a3,"TO"             ; $dc TO
>d0a5	b0a5	ff					.text	$FF
.d0a6	b0a6					KeywordSet1:
>d0a6	b0a6	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0a8	b0a8	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0aa	b0aa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0ac	b0ac	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d0b4	b0b4	4c 45
>d0b6	b0b6	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d0be	b0be	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d0c6	b0c6	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d0cd	b0cd	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d0d4	b0d4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d0d9	b0d9	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d0e1	b0e1	06 de 43 55 52 53 4f 52			.text	6,$de,"CURSOR"         ; $8a CURSOR
>d0e9	b0e9	03 df 44 49 52				.text	3,$df,"DIR"            ; $8b DIR
>d0ee	b0ee	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d0f5	b0f5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d0fa	b0fa	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d102	b102	45
>d103	b103	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d107	b107	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d10e	b10e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d114	b114	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d11b	b11b	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d122	b122	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d128	b128	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d12e	b12e	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>d136	b136	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>d13d	b13d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>d142	b142	06 d9 4f 50 54 49 4f 4e			.text	6,$d9,"OPTION"         ; $99 OPTION
>d14a	b14a	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $9a PING
>d150	b150	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9b PRINT
>d157	b157	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9c RESTORE
>d15f	b15f	45
>d160	b160	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9d RETURN
>d168	b168	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9e RUN
>d16d	b16d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9f SAVE
>d173	b173	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $a0 SETDATE
>d17b	b17b	45
>d17c	b17c	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a1 SETTIME
>d184	b184	45
>d185	b185	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a2 SHOOT
>d18c	b18c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a3 SPRITES
>d194	b194	53
>d195	b195	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a4 STOP
>d19b	b19b	04 2e 54 49 4c 45			.text	4,$2e,"TILE"           ; $a5 TILE
>d1a1	b1a1	05 81 54 49 4c 45 53			.text	5,$81,"TILES"          ; $a6 TILES
>d1a8	b1a8	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a7 TRY
>d1ad	b1ad	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a8 VERIFY
>d1b5	b1b5	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a9 XGO
>d1ba	b1ba	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $aa XLOAD
>d1c1	b1c1	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $ab ZAP
>d1c6	b1c6	ff					.text	$FF
.d1c7	b1c7					KeywordSet2:
>d1c7	b1c7	00 65					.text	0,$65,""               ; $80 !0:EOF
>d1c9	b1c9	00 58					.text	0,$58,""               ; $81 !1:SH1
>d1cb	b1cb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d1cd	b1cd	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d1d2	b1d2	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d1d7	b1d7	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d1dc	b1dc	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d1e1	b1e1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d1e6	b1e6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d1eb	b1eb	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d1f0	b1f0	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d1f5	b1f5	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d1fa	b1fa	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d1ff	b1ff	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d204	b204	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d209	b209	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d20e	b20e	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d213	b213	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d218	b218	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d21d	b21d	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d222	b222	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d227	b227	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d22c	b22c	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d231	b231	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d236	b236	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d23b	b23b	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d240	b240	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d245	b245	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d24a	b24a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d24f	b24f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d254	b254	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d259	b259	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d25e	b25e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d263	b263	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d268	b268	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d26d	b26d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d272	b272	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d277	b277	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d27c	b27c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d281	b281	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d286	b286	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d28b	b28b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d290	b290	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d295	b295	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d29a	b29a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d29f	b29f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d2a4	b2a4	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d2a9	b2a9	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d2ae	b2ae	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d2b3	b2b3	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d2b8	b2b8	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d2bd	b2bd	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d2c2	b2c2	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d2c7	b2c7	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d2cc	b2cc	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d2d1	b2d1	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d2d6	b2d6	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d2db	b2db	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d2e0	b2e0	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d2e5	b2e5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d2ea	b2ea	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d2ef	b2ef	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d2f4	b2f4	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d2f9	b2f9	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d2fe	b2fe	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d303	b303	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d308	b308	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d30d	b30d	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d312	b312	ff					.text	$FF
.d313	b313					Export_TKInitialise:
.d313	b313	a2 07		ldx #$07			ldx 	#7
.d315	b315					_ETKISetDefault:
.d315	b315	bd 6a b5	lda $b56a,x			lda 	CLIDefault,x
.d318	b318	9d 00 04	sta $0400,x			sta 	CLIFComment,x
.d31b	b31b	ca		dex				dex
.d31c	b31c	10 f7		bpl $b315			bpl 	_ETKISetDefault
.d31e	b31e	60		rts				rts
.d31f	b31f					Export_TKListConvertLine:
.d31f	b31f	48		pha				pha 								; save indent on the stack
.d320	b320	9c 39 04	stz $0439			stz 	tbOffset
.d323	b323	9c 49 04	stz $0449			stz 	tokenBuffer
.d326	b326	9c 45 04	stz $0445			stz 	currentListColour
.d329	b329	ad 02 04	lda $0402			lda 	CLILineNumber
.d32c	b32c	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d32f	b32f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d331	b331	b1 30		lda ($30),y			lda 	(codePtr),y
.d333	b333	aa		tax				tax
.d334	b334	88		dey				dey
.d335	b335	b1 30		lda ($30),y			lda 	(codePtr),y
.d337	b337	20 29 b5	jsr $b529			jsr 	LCLWriteNumberXA
.d33a	b33a	68		pla				pla 								; adjustment to indent
.d33b	b33b	48		pha				pha 								; save on stack
.d33c	b33c	10 0c		bpl $b34a			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d33e	b33e	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d33f	b33f	6d 42 04	adc $0442			adc 	listIndent
.d342	b342	8d 42 04	sta $0442			sta 	listIndent
.d345	b345	10 03		bpl $b34a			bpl 	_LCNoAdjust
.d347	b347	9c 42 04	stz $0442			stz 	listIndent
.d34a	b34a					_LCNoAdjust:
.d34a	b34a	18		clc				clc		 							; work out actual indent.
.d34b	b34b	ad 42 04	lda $0442			lda 	listIndent
.d34e	b34e	0a		asl a				asl 	a
.d34f	b34f	69 07		adc #$07			adc 	#7
.d351	b351	85 36		sta $36				sta 	zTemp0
.d353	b353					_LCPadOut:
.d353	b353	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d355	b355	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d358	b358	ad 39 04	lda $0439			lda 	tbOffset
.d35b	b35b	c5 36		cmp $36				cmp 	zTemp0
.d35d	b35d	d0 f4		bne $b353			bne 	_LCPadOut
.d35f	b35f	a0 03		ldy #$03			ldy 	#3 							; start position.
.d361	b361					_LCMainLoop:
.d361	b361	ad 06 04	lda $0406			lda 	CLIPunctuation
.d364	b364	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d367	b367	b1 30		lda ($30),y			lda 	(codePtr),y
.d369	b369	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d36b	b36b	f0 17		beq $b384			beq 	_LCExit
.d36d	b36d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d36f	b36f	90 1e		bcc $b38f			bcc 	_LCDoubles
.d371	b371	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d373	b373	90 2a		bcc $b39f			bcc 	_LCShiftPunc
.d375	b375	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d377	b377	90 35		bcc $b3ae			bcc 	_LCPunctuation
.d379	b379	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d37b	b37b	90 52		bcc $b3cf			bcc 	_LCIdentifiers
.d37d	b37d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d37f	b37f	90 75		bcc $b3f6			bcc 	_LCTokens
.d381	b381	4c 57 b4	jmp $b457			jmp 	_LCData 					; 254-5 are data objects
.d384	b384					_LCExit:
.d384	b384	68		pla				pla 								; get old indent adjust
.d385	b385	30 07		bmi $b38e			bmi 	_LCExit2
.d387	b387	18		clc				clc 								; add to indent if +ve
.d388	b388	6d 42 04	adc $0442			adc 	listIndent
.d38b	b38b	8d 42 04	sta $0442			sta 	listIndent
.d38e	b38e					_LCExit2:
.d38e	b38e	60		rts				rts
.d38f	b38f					_LCDoubles:
.d38f	b38f	48		pha				pha
.d390	b390	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d391	b391	29 02		and #$02			and 	#2
.d393	b393	09 3c		ora #$3c			ora 	#60 						; make < >
.d395	b395	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d398	b398	68		pla				pla 								; restore, do lower bit
.d399	b399	29 03		and #$03			and 	#3
.d39b	b39b	09 3c		ora #$3c			ora 	#60
.d39d	b39d	80 0f		bra $b3ae			bra		_LCPunctuation 				; print, increment, loop
.d39f	b39f					_LCShiftPunc:
.d39f	b39f	aa		tax				tax 								; save in X
.d3a0	b3a0	29 07		and #$07			and 	#7 							; lower 3 bits
.d3a2	b3a2	f0 02		beq $b3a6			beq 	_LCNoAdd
.d3a4	b3a4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d3a6	b3a6					_LCNoAdd:
.d3a6	b3a6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d3a8	b3a8	90 02		bcc $b3ac			bcc 	_LCNoAdd2
.d3aa	b3aa	09 20		ora #$20			ora 	#32 						; adds $20
.d3ac	b3ac					_LCNoAdd2:
.d3ac	b3ac	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d3ae	b3ae					_LCPunctuation:
.d3ae	b3ae	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d3b0	b3b0	d0 03		bne $b3b5			bne 	_LCPContinue
.d3b2	b3b2	20 d7 b4	jsr $b4d7			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d3b5	b3b5					_LCPContinue:
.d3b5	b3b5	c9 2e		cmp #$2e			cmp 	#'.'
.d3b7	b3b7	f0 08		beq $b3c1			beq 	_LCPIsConstant
.d3b9	b3b9	c9 30		cmp #$30			cmp 	#'0'
.d3bb	b3bb	90 0c		bcc $b3c9			bcc 	_LCPNotConstant
.d3bd	b3bd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3bf	b3bf	b0 08		bcs $b3c9			bcs 	_LCPNotConstant
.d3c1	b3c1					_LCPIsConstant:
.d3c1	b3c1	48		pha				pha
.d3c2	b3c2	ad 04 04	lda $0404			lda 	CLIConstant
.d3c5	b3c5	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d3c8	b3c8	68		pla				pla
.d3c9	b3c9					_LCPNotConstant:
.d3c9	b3c9	c8		iny				iny 								; consume character
.d3ca	b3ca	20 c1 b4	jsr $b4c1			jsr 	LCLWrite 					; write it out.
.d3cd	b3cd	80 92		bra $b361			bra 	_LCMainLoop 				; go round again.
.d3cf	b3cf					_LCIdentifiers:
.d3cf	b3cf	18		clc				clc 								; convert to physical address
.d3d0	b3d0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d3d2	b3d2	85 37		sta $37				sta 	zTemp0+1
.d3d4	b3d4	c8		iny				iny
.d3d5	b3d5	b1 30		lda ($30),y			lda 	(codePtr),y
.d3d7	b3d7	85 36		sta $36				sta 	zTemp0
.d3d9	b3d9	c8		iny				iny
.d3da	b3da	5a		phy				phy 								; save position
.d3db	b3db	ad 05 04	lda $0405			lda 	CLIIdentifier
.d3de	b3de	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d3e1	b3e1	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d3e3	b3e3					_LCOutIdentifier:
.d3e3	b3e3	c8		iny				iny
.d3e4	b3e4	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d3e6	b3e6	29 7f		and #$7f			and 	#$7F
.d3e8	b3e8	20 13 b5	jsr $b513			jsr 	LCLLowerCase
.d3eb	b3eb	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d3ee	b3ee	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d3f0	b3f0	10 f1		bpl $b3e3			bpl 	_LCOutIdentifier
.d3f2	b3f2	7a		ply				ply 								; restore position
.d3f3	b3f3	4c 61 b3	jmp $b361			jmp 	_LCMainLoop
.d3f6	b3f6					_LCTokens:
.d3f6	b3f6	aa		tax				tax 								; token in X
.d3f7	b3f7	a9 c7		lda #$c7			lda 	#((KeywordSet2) & $FF)
.d3f9	b3f9	85 36		sta $36				sta 	0+zTemp0
.d3fb	b3fb	a9 b1		lda #$b1			lda 	#((KeywordSet2) >> 8)
.d3fd	b3fd	85 37		sta $37				sta 	1+zTemp0
.d3ff	b3ff	e0 82		cpx #$82			cpx 	#$82
.d401	b401	f0 16		beq $b419			beq 	_LCUseShift
.d403	b403	a9 a6		lda #$a6			lda 	#((KeywordSet1) & $FF)
.d405	b405	85 36		sta $36				sta 	0+zTemp0
.d407	b407	a9 b0		lda #$b0			lda 	#((KeywordSet1) >> 8)
.d409	b409	85 37		sta $37				sta 	1+zTemp0
.d40b	b40b	e0 81		cpx #$81			cpx 	#$81
.d40d	b40d	f0 0a		beq $b419			beq 	_LCUseShift
.d40f	b40f	a9 2e		lda #$2e			lda 	#((KeywordSet0) & $FF)
.d411	b411	85 36		sta $36				sta 	0+zTemp0
.d413	b413	a9 ae		lda #$ae			lda 	#((KeywordSet0) >> 8)
.d415	b415	85 37		sta $37				sta 	1+zTemp0
.d417	b417	80 01		bra $b41a			bra 	_LCNoShift
.d419	b419					_LCUseShift:
.d419	b419	c8		iny				iny
.d41a	b41a					_LCNoShift:
.d41a	b41a	20 eb b4	jsr $b4eb			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d41d	b41d	b1 30		lda ($30),y			lda 	(codePtr),y
.d41f	b41f	aa		tax				tax 								; into X
.d420	b420					_LCFindText:
.d420	b420	ca		dex				dex
.d421	b421	10 0e		bpl $b431			bpl 	_LCFoundText 				; found text.
.d423	b423	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d425	b425	1a		inc a				inc 	a 							; one extra for size
.d426	b426	38		sec				sec 								; one extra for checksum
.d427	b427	65 36		adc $36				adc 	zTemp0 						; go to next token
.d429	b429	85 36		sta $36				sta 	zTemp0
.d42b	b42b	90 f3		bcc $b420			bcc 	_LCFindText
.d42d	b42d	e6 37		inc $37				inc 	zTemp0+1
.d42f	b42f	80 ef		bra $b420			bra 	_LCFindText
.d431	b431					_LCFoundText:
.d431	b431	5a		phy				phy 								; save List position
.d432	b432	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d434	b434	aa		tax				tax
.d435	b435	ad 03 04	lda $0403			lda 	CLIToken
.d438	b438	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d43b	b43b	a0 02		ldy #$02			ldy 	#2
.d43d	b43d					_LCCopyToken:
.d43d	b43d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d43f	b43f	20 13 b5	jsr $b513			jsr 	LCLLowerCase
.d442	b442	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d445	b445	c8		iny				iny
.d446	b446	ca		dex				dex
.d447	b447	d0 f4		bne $b43d			bne 	_LCCopyToken
.d449	b449	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d44b	b44b	f0 05		beq $b452			beq 	_LCNoSpace
.d44d	b44d	a9 20		lda #$20			lda 	#' '
.d44f	b44f	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d452	b452					_LCNoSpace:
.d452	b452	7a		ply				ply 								; restore position.
.d453	b453	c8		iny				iny 								; consume token
.d454	b454	4c 61 b3	jmp $b361			jmp 	_LCMainLoop 				; and go around again.
.d457	b457					_LCData:
.d457	b457	48		pha				pha 								; save type $FE/$FF
.d458	b458	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d45a	b45a	c9 fe		cmp #$fe			cmp 	#$FE
.d45c	b45c	f0 29		beq $b487			beq 	_LCHaveOpener
.d45e	b45e	a2 22		ldx #$22			ldx 	#'"'
.d460	b460	ad 07 04	lda $0407			lda 	CLIData
.d463	b463	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d466	b466	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d468	b468	d0 1d		bne $b487			bne 	_LCHaveOpener
.d46a	b46a	88		dey				dey 								; what precedes it ?
.d46b	b46b	b1 30		lda ($30),y			lda 	(codePtr),y
.d46d	b46d	c8		iny				iny
.d46e	b46e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d470	b470	d0 15		bne $b487			bne 	_LCHaveOpener
.d472	b472	a9 09		lda #$09			lda 	#9 							; tab
.d474	b474	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d477	b477	ad 01 04	lda $0401			lda 	CLIBComment
.d47a	b47a	30 0b		bmi $b487			bmi 	_LCHaveOpener
.d47c	b47c	09 90		ora #$90			ora 	#$90
.d47e	b47e	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d481	b481	ad 00 04	lda $0400			lda 	CLIFComment
.d484	b484	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d487	b487					_LCHaveOpener:
.d487	b487	8a		txa				txa 								; output prefix (# or ")
.d488	b488	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d48b	b48b	c8		iny				iny 								; get count
.d48c	b48c	b1 30		lda ($30),y			lda 	(codePtr),y
.d48e	b48e	aa		tax				tax
.d48f	b48f	c8		iny				iny 								; point at first character
.d490	b490					_LCOutData:
.d490	b490	b1 30		lda ($30),y			lda 	(codePtr),y
.d492	b492	c9 00		cmp #$00			cmp 	#0
.d494	b494	f0 03		beq $b499			beq 	_LCNoPrint
.d496	b496	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d499	b499					_LCNoPrint:
.d499	b499	c8		iny				iny
.d49a	b49a	ca		dex				dex
.d49b	b49b	d0 f3		bne $b490			bne 	_LCOutData
.d49d	b49d	68		pla				pla 								; closing " required ?
.d49e	b49e	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d4a0	b4a0	d0 0f		bne $b4b1			bne 	_LCNoQuote
.d4a2	b4a2	a9 22		lda #$22			lda 	#'"'
.d4a4	b4a4	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d4a7	b4a7	ad e9 07	lda $07e9			lda 	EXTTextColour
.d4aa	b4aa	29 0f		and #$0f			and 	#$0F
.d4ac	b4ac	09 90		ora #$90			ora 	#$90
.d4ae	b4ae	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d4b1	b4b1					_LCNoQuote:
.d4b1	b4b1	4c 61 b3	jmp $b361			jmp 	_LCMainLoop
.d4b4	b4b4					LCLWriteColour:
.d4b4	b4b4	29 0f		and #$0f			and 	#$0F
.d4b6	b4b6	09 80		ora #$80			ora 	#$80
.d4b8	b4b8	cd 45 04	cmp $0445			cmp 	currentListColour 			; has the colour changed
.d4bb	b4bb	8d 45 04	sta $0445			sta 	currentListColour 			; (update it anyway)
.d4be	b4be	d0 01		bne $b4c1			bne 	LCLWrite 					; if different, output it
.d4c0	b4c0	60		rts				rts
.d4c1	b4c1					LCLWrite:
.d4c1	b4c1	da		phx				phx
.d4c2	b4c2	ae 39 04	ldx $0439			ldx 	tbOffset 					; write out make ASCIIZ
.d4c5	b4c5	9d 49 04	sta $0449,x			sta 	tokenBuffer,x
.d4c8	b4c8	9e 4a 04	stz $044a,x			stz 	tokenBuffer+1,x
.d4cb	b4cb	ee 39 04	inc $0439			inc 	tbOffset 					; bump the position
.d4ce	b4ce	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d4d0	b4d0	30 03		bmi $b4d5			bmi 	_LCLNoColour
.d4d2	b4d2	8d 43 04	sta $0443			sta 	lcLastCharacter
.d4d5	b4d5					_LCLNoColour:
.d4d5	b4d5	fa		plx				plx
.d4d6	b4d6	60		rts				rts
.d4d7	b4d7					LCLDeleteLastSpace:
.d4d7	b4d7	48		pha				pha
.d4d8	b4d8	da		phx				phx
.d4d9	b4d9	ae 39 04	ldx $0439			ldx 	tbOffset
.d4dc	b4dc	f0 0a		beq $b4e8			beq 	_LCDLSExit
.d4de	b4de	bd 48 04	lda $0448,x			lda 	tokenBuffer-1,x
.d4e1	b4e1	c9 20		cmp #$20			cmp 	#' '
.d4e3	b4e3	d0 03		bne $b4e8			bne 	_LCDLSExit
.d4e5	b4e5	ce 39 04	dec $0439			dec 	tbOffset
.d4e8	b4e8					_LCDLSExit:
.d4e8	b4e8	fa		plx				plx
.d4e9	b4e9	68		pla				pla
.d4ea	b4ea	60		rts				rts
.d4eb	b4eb					LCLCheckSpaceRequired:
.d4eb	b4eb	ad 43 04	lda $0443			lda 	lcLastCharacter 			; check last character
.d4ee	b4ee	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d4f0	b4f0	f0 1b		beq $b50d			beq 	_LCCSRSpace
.d4f2	b4f2	c9 29		cmp #$29			cmp 	#')'
.d4f4	b4f4	f0 17		beq $b50d			beq 	_LCCSRSpace
.d4f6	b4f6	c9 23		cmp #$23			cmp 	#'#'
.d4f8	b4f8	f0 13		beq $b50d			beq 	_LCCSRSpace
.d4fa	b4fa	20 13 b5	jsr $b513			jsr 	LCLLowerCase 				; saves a little effort
.d4fd	b4fd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d4ff	b4ff	90 11		bcc $b512			bcc 	_LCCSRExit
.d501	b501	c9 3a		cmp #$3a			cmp 	#"9"+1
.d503	b503	90 08		bcc $b50d			bcc 	_LCCSRSpace
.d505	b505	c9 61		cmp #$61			cmp 	#"a"
.d507	b507	90 09		bcc $b512			bcc 	_LCCSRExit
.d509	b509	c9 7b		cmp #$7b			cmp 	#"z"+1
.d50b	b50b	b0 05		bcs $b512			bcs 	_LCCSRExit
.d50d	b50d					_LCCSRSpace:
.d50d	b50d	a9 20		lda #$20			lda 	#' '
.d50f	b50f	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d512	b512					_LCCSRExit:
.d512	b512	60		rts				rts
.d513	b513					LCLLowerCase:
.d513	b513	c9 41		cmp #$41			cmp 	#"A"
.d515	b515	90 06		bcc $b51d			bcc 	_LCLLCOut
.d517	b517	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d519	b519	b0 02		bcs $b51d			bcs 	_LCLLCOut
.d51b	b51b	69 20		adc #$20			adc 	#$20
.d51d	b51d					_LCLLCOut:
.d51d	b51d	60		rts				rts
.d51e	b51e					LCLUpperCase:
.d51e	b51e	c9 61		cmp #$61			cmp 	#"a"
.d520	b520	90 06		bcc $b528			bcc 	_LCLUCOut
.d522	b522	c9 7b		cmp #$7b			cmp 	#"z"+1
.d524	b524	b0 02		bcs $b528			bcs 	_LCLUCOut
.d526	b526	e9 1f		sbc #$1f			sbc 	#$1F
.d528	b528					_LCLUCOut:
.d528	b528	60		rts				rts
.d529	b529					LCLWriteNumberXA:
.d529	b529	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d52b	b52b					_LCLWNLoop1:
.d52b	b52b	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d52d	b52d					_LCLWNLoop2:
.d52d	b52d	48		pha				pha 								; save initial LSB
.d52e	b52e	38		sec				sec
.d52f	b52f	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d531	b531	f9 62 b5	sbc $b562,y			sbc 	_LCLWNTable,y
.d534	b534	48		pha				pha
.d535	b535	8a		txa				txa
.d536	b536	f9 63 b5	sbc $b563,y			sbc 	_LCLWNTable+1,y
.d539	b539	90 07		bcc $b542			bcc 	_LCLWNUnderflow
.d53b	b53b	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d53d	b53d	aa		tax				tax 								; update X
.d53e	b53e	68		pla				pla 								; restore A
.d53f	b53f	7a		ply				ply 								; throw original
.d540	b540	80 eb		bra $b52d			bra 	_LCLWNLoop2 				; try again.
.d542	b542					_LCLWNUnderflow:
.d542	b542	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d544	b544	d0 06		bne $b54c			bne 	_LCLWNOut
.d546	b546	ad 39 04	lda $0439			lda 	tbOffset 					; suppress leading zeroes
.d549	b549	3a		dec a				dec 	a
.d54a	b54a	f0 04		beq $b550			beq 	_LCLWNNext
.d54c	b54c					_LCLWNOut:
.d54c	b54c	98		tya				tya
.d54d	b54d	20 5c b5	jsr $b55c			jsr 	_LCLWNOutDigit
.d550	b550					_LCLWNNext:
.d550	b550	7a		ply				ply 							 	; restore original value.
.d551	b551	68		pla				pla
.d552	b552	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d554	b554	c8		iny				iny
.d555	b555	c8		iny				iny
.d556	b556	84 37		sty $37				sty 	zTemp0+1
.d558	b558	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d55a	b55a	d0 cf		bne $b52b			bne 	_LCLWNLoop1
.d55c	b55c					_LCLWNOutDigit:
.d55c	b55c	09 30		ora #$30			ora 	#'0'
.d55e	b55e	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d561	b561	60		rts				rts
.d562	b562					_LCLWNTable:
>d562	b562	10 27						.word 	10000
>d564	b564	e8 03						.word 	1000
>d566	b566	64 00						.word 	100
>d568	b568	0a 00						.word 	10
.d56a	b56a					CLIDefault:
>d56a	b56a	05 0e 0d 06 07 0e 0c 0f				.byte	CONBrown, CONYellow, CONRed, CONOrange, CONCyan, CONYellow, CONPink, CONWhite
=1024						CLIFComment = ControlStorage + 0
=1025						CLIBComment = ControlStorage + 1
=1026						CLILineNumber = ControlStorage + 2
=1027						CLIToken = ControlStorage + 3
=1028						CLIConstant = ControlStorage + 4
=1029						CLIIdentifier = ControlStorage + 5
=1030						CLIPunctuation = ControlStorage + 6
=1031						CLIData = ControlStorage + 7
.d572	b572					TOKSearchTable:
.d572	b572	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d574	b574	85 36		sta $36				sta 	zTemp0
.d576	b576	a0 00		ldy #$00			ldy 	#0
.d578	b578	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d57a	b57a	85 38		sta $38				sta 	zTemp1
.d57c	b57c					_TSTLoop:
.d57c	b57c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d57e	b57e	30 49		bmi $b5c9			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d580	b580	f0 2e		beq $b5b0			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d582	b582	c8		iny				iny 								; get the hash
.d583	b583	b1 36		lda ($36),y			lda 	(zTemp0),y
.d585	b585	88		dey				dey
.d586	b586	cd 23 04	cmp $0423			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d589	b589	d0 25		bne $b5b0			bne 	_TSTNext
.d58b	b58b	ad 22 04	lda $0422			lda 	identTypeEnd 				; get length of identifier from end-start
.d58e	b58e	38		sec				sec
.d58f	b58f	ed 20 04	sbc $0420			sbc 	identStart
.d592	b592	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d594	b594	d0 1a		bne $b5b0			bne 	_TSTNext
.d596	b596	5a		phy				phy 								; save Y , we might fail to match.
.d597	b597	c8		iny				iny 								; point to text
.d598	b598	c8		iny				iny
.d599	b599	ae 20 04	ldx $0420			ldx 	identStart 					; offset in line buffer in X
.d59c	b59c					_TSTCompareName:
.d59c	b59c	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; compare text.
.d59f	b59f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d5a1	b5a1	d0 0c		bne $b5af			bne 	_TSTNextPullY 				; fail, pullY and do next
.d5a3	b5a3	e8		inx				inx
.d5a4	b5a4	c8		iny				iny
.d5a5	b5a5	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; complete match.
.d5a8	b5a8	d0 f2		bne $b59c			bne 	_TSTCompareName
.d5aa	b5aa	7a		ply				ply 								; throw Y
.d5ab	b5ab	a5 38		lda $38				lda 	zTemp1 						; get token #
.d5ad	b5ad	38		sec				sec 								; return with CS = passed.
.d5ae	b5ae	60		rts				rts
.d5af	b5af					_TSTNextPullY:
.d5af	b5af	7a		ply				ply 								; restore current, fall through.
.d5b0	b5b0					_TSTNext:
.d5b0	b5b0	e6 38		inc $38				inc 	zTemp1 						; token counter
.d5b2	b5b2	98		tya				tya
.d5b3	b5b3	18		clc				clc
.d5b4	b5b4	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d5b6	b5b6	1a		inc a				inc 	a 							; +1
.d5b7	b5b7	1a		inc a				inc 	a 							; +2
.d5b8	b5b8	a8		tay				tay
.d5b9	b5b9	10 c1		bpl $b57c			bpl 	_TSTLoop 					; if Y < $80 loop back
.d5bb	b5bb	98		tya				tya 								; add Y to zTemp0 and reset Y
.d5bc	b5bc	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d5be	b5be	18		clc				clc  								; but have tables > 255 bytes
.d5bf	b5bf	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d5c1	b5c1	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d5c3	b5c3	90 b7		bcc $b57c			bcc 	_TSTLoop
.d5c5	b5c5	e6 37		inc $37				inc 	zTemp0+1
.d5c7	b5c7	80 b3		bra $b57c			bra 	_TSTLoop
.d5c9	b5c9					_TSTFail:
.d5c9	b5c9	18		clc				clc
.d5ca	b5ca	60		rts				rts
.d5cb	b5cb					Export_TKTokeniseLine:
.d5cb	b5cb	20 98 b7	jsr $b798			jsr 	LCLFixLineBufferCase 		; fix line case
.d5ce	b5ce	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d5d0	b5d0	8d 46 04	sta $0446			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d5d3	b5d3	9c 47 04	stz $0447			stz 	tokenLineNumber
.d5d6	b5d6	9c 48 04	stz $0448			stz 	tokenLineNumber+1
.d5d9	b5d9	a2 ff		ldx #$ff			ldx 	#$FF
.d5db	b5db					_TKFindFirst:
.d5db	b5db	e8		inx				inx
.d5dc	b5dc	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d5df	b5df	f0 62		beq $b643			beq 	_TKExit
.d5e1	b5e1	c9 20		cmp #$20			cmp 	#' '
.d5e3	b5e3	90 f6		bcc $b5db			bcc 	_TKFindFirst
.d5e5	b5e5	c9 30		cmp #$30			cmp 	#'0'
.d5e7	b5e7	90 07		bcc $b5f0			bcc 	_TKNoLineNumber
.d5e9	b5e9	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5eb	b5eb	b0 03		bcs $b5f0			bcs 	_TKNoLineNumber
.d5ed	b5ed	20 c2 b7	jsr $b7c2			jsr 	TOKExtractLineNumber
.d5f0	b5f0					_TKNoLineNumber:
.d5f0	b5f0					_TKTokeniseLoop:
.d5f0	b5f0	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d5f3	b5f3	f0 4e		beq $b643			beq 	_TKExit
.d5f5	b5f5	e8		inx				inx
.d5f6	b5f6	c9 20		cmp #$20			cmp 	#' '
.d5f8	b5f8	f0 f6		beq $b5f0			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d5fa	b5fa	ca		dex				dex 								; undo last get, A contains character, X is position.
.d5fb	b5fb	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d5fd	b5fd	f0 68		beq $b667			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d5ff	b5ff	c9 41		cmp #$41			cmp 	#'A'
.d601	b601	90 04		bcc $b607			bcc 	_TKTokenisePunctuation
.d603	b603	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d605	b605	90 60		bcc $b667			bcc 	_TKTokeniseIdentifier
.d607	b607					_TKTokenisePunctuation:
.d607	b607	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d609	b609	f0 2e		beq $b639			beq 	_TKString
.d60b	b60b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d60d	b60d	f0 2f		beq $b63e			beq 	_TKHexConstant
.d60f	b60f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d611	b611	f0 36		beq $b649			beq 	_TKCheckDouble
.d613	b613	c9 3e		cmp #$3e			cmp 	#'>'
.d615	b615	f0 32		beq $b649			beq 	_TKCheckDouble
.d617	b617					_TKStandardPunctuation:
.d617	b617	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d61a	b61a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d61c	b61c	90 0e		bcc $b62c			bcc 	_TKNoShift
.d61e	b61e	48		pha				pha 								; save. we are about to convert this punctuation token from
.d61f	b61f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d621	b621	85 36		sta $36				sta 	zTemp0
.d623	b623	68		pla				pla
.d624	b624	29 20		and #$20			and 	#32 						; bit 5
.d626	b626	4a		lsr a				lsr 	a 							; shift into bit 3
.d627	b627	4a		lsr a				lsr 	a
.d628	b628	05 36		ora $36				ora 	zTemp0
.d62a	b62a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d62c	b62c					_TKNoShift:
.d62c	b62c	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; write the punctuation character
.d62f	b62f	e8		inx				inx 								; consume the character
.d630	b630	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d632	b632	d0 bc		bne $b5f0			bne 	_TKTokeniseLoop 			; and loop round again.
.d634	b634	20 fa b6	jsr $b6fa			jsr 	TOKCheckComment 			; comment checl
.d637	b637	80 b7		bra $b5f0			bra 	_TKTokeniseLoop
.d639	b639					_TKString:
.d639	b639	20 27 b7	jsr $b727			jsr 	TOKTokenString
.d63c	b63c	80 b2		bra $b5f0			bra 	_TKTokeniseLoop
.d63e	b63e					_TKHexConstant:
.d63e	b63e	20 62 b7	jsr $b762			jsr 	TOKHexConstant
.d641	b641	80 ad		bra $b5f0			bra 	_TKTokeniseLoop
.d643	b643	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d645	b645	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d648	b648	60		rts				rts
.d649	b649					_TKCheckDouble:
.d649	b649	bd 47 05	lda $0547,x			lda 	lineBuffer+1,x 				; get next character
.d64c	b64c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d64e	b64e	90 c7		bcc $b617			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d650	b650	c9 3f		cmp #$3f			cmp 	#'>'+1
.d652	b652	b0 c3		bcs $b617			bcs 	_TKStandardPunctuation
.d654	b654	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d657	b657	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d659	b659	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d65a	b65a	7d 47 05	adc $0547,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d65d	b65d	38		sec				sec
.d65e	b65e	e9 3c		sbc #$3c			sbc 	#'<'
.d660	b660	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; this is in the range 0-7
.d663	b663	e8		inx				inx 								; consume both
.d664	b664	e8		inx				inx
.d665	b665	80 89		bra $b5f0			bra 	_TKTokeniseLoop
.d667	b667					_TKTokeniseIdentifier:
.d667	b667	8e 20 04	stx $0420			stx 	identStart 					; save start
.d66a	b66a	9c 24 04	stz $0424			stz 	identTypeByte 				; zero the type byte
.d66d	b66d					_TKCheckLoop:
.d66d	b66d	e8		inx				inx 								; look at next, we know first is identifier already.
.d66e	b66e	bd 46 05	lda $0546,x			lda  	lineBuffer,x
.d671	b671	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d673	b673	f0 f8		beq $b66d			beq 	_TKCheckLoop
.d675	b675	c9 30		cmp #$30			cmp	 	#"0"
.d677	b677	90 0c		bcc $b685			bcc 	_TKEndIdentifier
.d679	b679	c9 3a		cmp #$3a			cmp 	#"9"+1
.d67b	b67b	90 f0		bcc $b66d			bcc 	_TKCheckLoop
.d67d	b67d	c9 41		cmp #$41			cmp	 	#"A"
.d67f	b67f	90 04		bcc $b685			bcc 	_TKEndIdentifier
.d681	b681	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d683	b683	90 e8		bcc $b66d			bcc 	_TKCheckLoop
.d685	b685					_TKEndIdentifier:
.d685	b685	8e 21 04	stx $0421			stx 	identTypeStart 				; save start of type text (if any !)
.d688	b688	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d68a	b68a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d68c	b68c	f0 06		beq $b694			beq 	_TKHasTypeCharacter
.d68e	b68e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d690	b690	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d692	b692	d0 07		bne $b69b			bne 	_TKNoTypeCharacter
.d694	b694					_TKHasTypeCharacter:
.d694	b694	8c 24 04	sty $0424			sty 	identTypeByte 				; has # or $, save the type
.d697	b697	e8		inx				inx 								; consume the type character
.d698	b698	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d69b	b69b					_TKNoTypeCharacter:
.d69b	b69b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d69d	b69d	d0 09		bne $b6a8			bne 	_TKNoArray
.d69f	b69f	e8		inx				inx 								; skip the (
.d6a0	b6a0	ad 24 04	lda $0424			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d6a3	b6a3	09 04		ora #$04			ora 	#$04
.d6a5	b6a5	8d 24 04	sta $0424			sta 	identTypeByte
.d6a8	b6a8					_TKNoArray:
.d6a8	b6a8	8e 22 04	stx $0422			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d6ab	b6ab	20 83 b7	jsr $b783			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d6ae	b6ae	a0 ae		ldy #$ae			ldy 	#(KeywordSet0) >> 8
.d6b0	b6b0	a9 2e		lda #$2e			lda 	#(KeywordSet0) & $FF
.d6b2	b6b2	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6b5	b6b5	a2 00		ldx #$00			ldx 	#0
.d6b7	b6b7	b0 1f		bcs $b6d8			bcs 	_TKFoundToken
.d6b9	b6b9	a0 b0		ldy #$b0			ldy 	#(KeywordSet1) >> 8
.d6bb	b6bb	a9 a6		lda #$a6			lda 	#(KeywordSet1) & $FF
.d6bd	b6bd	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6c0	b6c0	a2 81		ldx #$81			ldx 	#$81
.d6c2	b6c2	b0 14		bcs $b6d8			bcs 	_TKFoundToken
.d6c4	b6c4	a0 b1		ldy #$b1			ldy 	#(KeywordSet2) >> 8
.d6c6	b6c6	a9 c7		lda #$c7			lda 	#(KeywordSet2) & $FF
.d6c8	b6c8	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6cb	b6cb	a2 82		ldx #$82			ldx 	#$82
.d6cd	b6cd	b0 09		bcs $b6d8			bcs 	_TKFoundToken
.d6cf	b6cf	20 13 b8	jsr $b813			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d6d2	b6d2	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; X points to following byte
.d6d5	b6d5	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop 			; and go round again.
.d6d8	b6d8					_TKFoundToken:
.d6d8	b6d8	48		pha				pha 								; save token
.d6d9	b6d9	8a		txa				txa 								; shift in X, is there one ?
.d6da	b6da	f0 03		beq $b6df			beq 	_TKNoTShift
.d6dc	b6dc	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; if so, write it out
.d6df	b6df					_TKNoTShift:
.d6df	b6df	68		pla				pla 								; restore and write token
.d6e0	b6e0	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d6e3	b6e3	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d6e5	b6e5	d0 0d		bne $b6f4			bne 	_TKNotRem 			 		; not shifted ?
.d6e7	b6e7	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d6e9	b6e9	d0 09		bne $b6f4			bne 	_TKNotRem
.d6eb	b6eb	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; check if comment follows.
.d6ee	b6ee	20 fa b6	jsr $b6fa			jsr 	TOKCheckComment
.d6f1	b6f1	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop
.d6f4	b6f4					_TKNotRem:
.d6f4	b6f4	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; X points to following byte
.d6f7	b6f7	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop 			; and go round again.
.d6fa	b6fa					TOKCheckComment:
.d6fa	b6fa	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; skip over space
.d6fd	b6fd	e8		inx				inx
.d6fe	b6fe	c9 20		cmp #$20			cmp 	#' '
.d700	b700	f0 f8		beq $b6fa			beq 	TOKCheckComment
.d702	b702	ca		dex				dex 								; first non space character
.d703	b703	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d705	b705	f0 1f		beq $b726			beq 	_TOKCCExit 					; then we are okay
.d707	b707	c9 00		cmp #$00			cmp 	#0 							; EOL
.d709	b709	f0 1b		beq $b726			beq 	_TOKCCExit 					; then we are okay
.d70b	b70b	da		phx				phx
.d70c	b70c					_TOKCCLowerCase:
.d70c	b70c	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d70f	b70f	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d711	b711	90 09		bcc $b71c			bcc 	_TOKKCNotUC
.d713	b713	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d715	b715	b0 05		bcs $b71c			bcs 	_TOKKCNotUC
.d717	b717	49 20		eor #$20			eor 	#$20
.d719	b719	9d 46 05	sta $0546,x			sta 	lineBuffer,x
.d71c	b71c					_TOKKCNotUC:
.d71c	b71c	e8		inx				inx
.d71d	b71d	c9 00		cmp #$00			cmp 	#0
.d71f	b71f	d0 eb		bne $b70c			bne 	_TOKCCLowerCase
.d721	b721	fa		plx				plx
.d722	b722	ca		dex				dex 								; tokenise string expects initial skip.
.d723	b723	20 27 b7	jsr $b727			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d726	b726					_TOKCCExit:
.d726	b726	60		rts				rts
.d727	b727					TOKTokenString:
.d727	b727	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d729	b729	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d72c	b72c	e8		inx				inx									; start of quoted string.
.d72d	b72d	da		phx				phx 								; push start of string on top
.d72e	b72e	ca		dex				dex 								; because we pre-increment
.d72f	b72f					_TSFindEnd:
.d72f	b72f	e8		inx				inx
.d730	b730	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; next character
.d733	b733	f0 04		beq $b739			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d735	b735	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d737	b737	d0 f6		bne $b72f			bne 	_TSFindEnd
.d739	b739					_TSEndOfString:
.d739	b739	7a		ply				ply  								; so now Y is first character, X is character after end.
.d73a	b73a	48		pha				pha 								; save terminating character
.d73b	b73b	20 43 b7	jsr $b743			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d73e	b73e	68		pla				pla 								; terminating character
.d73f	b73f	f0 01		beq $b742			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d741	b741	e8		inx				inx
.d742	b742					_TSNotQuote:
.d742	b742	60		rts				rts
.d743	b743					TOKWriteBlockXY:
.d743	b743	86 36		stx $36				stx 	zTemp0 						; save end character
.d745	b745	98		tya				tya 								; use 2's complement to work out the byte size
.d746	b746	49 ff		eor #$ff			eor 	#$FF
.d748	b748	38		sec				sec
.d749	b749	65 36		adc $36				adc 	zTemp0
.d74b	b74b	1a		inc a				inc 	a 							; one extra for NULL
.d74c	b74c	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d74f	b74f					_TOBlockLoop:
.d74f	b74f	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d751	b751	f0 09		beq $b75c			beq 	_TOBlockExit
.d753	b753	b9 46 05	lda $0546,y			lda 	lineBuffer,y 				; write byte out.
.d756	b756	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d759	b759	c8		iny				iny
.d75a	b75a	80 f3		bra $b74f			bra 	_TOBlockLoop
.d75c	b75c					_TOBlockExit:
.d75c	b75c	a9 00		lda #$00			lda 	#0 							; add NULL.
.d75e	b75e	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d761	b761	60		rts				rts
.d762	b762					TOKHexConstant:
.d762	b762	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d764	b764	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d767	b767	e8		inx				inx									; start of quoted string.
.d768	b768	da		phx				phx 								; push start of constant on top
.d769	b769	ca		dex				dex
.d76a	b76a					_THFindLoop:
.d76a	b76a	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d76b	b76b	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; the hex constant is.
.d76e	b76e	c9 30		cmp #$30			cmp 	#"0"
.d770	b770	90 0c		bcc $b77e			bcc 	_THFoundEnd
.d772	b772	c9 3a		cmp #$3a			cmp 	#"9"+1
.d774	b774	90 f4		bcc $b76a			bcc 	_THFindLoop
.d776	b776	c9 41		cmp #$41			cmp 	#"A"
.d778	b778	90 04		bcc $b77e			bcc 	_THFoundEnd
.d77a	b77a	c9 47		cmp #$47			cmp 	#"F"+1
.d77c	b77c	90 ec		bcc $b76a			bcc 	_THFindLoop
.d77e	b77e					_THFoundEnd:
.d77e	b77e	7a		ply				ply 								; restore start
.d77f	b77f	20 43 b7	jsr $b743			jsr 	TOKWriteBlockXY 			; output the block
.d782	b782	60		rts				rts
.d783	b783					TOKCalculateHash:
.d783	b783	da		phx				phx
.d784	b784	ae 20 04	ldx $0420			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d787	b787	a9 00		lda #$00			lda 	#0
.d789	b789					_TCHLoop:
.d789	b789	18		clc				clc
.d78a	b78a	7d 46 05	adc $0546,x			adc 	lineBuffer,x
.d78d	b78d	e8		inx				inx
.d78e	b78e	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d791	b791	d0 f6		bne $b789			bne 	_TCHLoop
.d793	b793	8d 23 04	sta $0423			sta 	identHash 					; save the hash
.d796	b796	fa		plx				plx
.d797	b797	60		rts				rts
.d798	b798					LCLFixLineBufferCase:
.d798	b798	a2 00		ldx #$00			ldx 	#0
.d79a	b79a					_FLBCLoop:
.d79a	b79a	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get next character
.d79d	b79d	f0 22		beq $b7c1			beq 	_FLBCExit 					; end of string.
.d79f	b79f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d7a1	b7a1	f0 11		beq $b7b4			beq 	_FLBCInQuotes
.d7a3	b7a3	e8		inx				inx
.d7a4	b7a4	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d7a6	b7a6	90 f2		bcc $b79a			bcc 	_FLBCLoop
.d7a8	b7a8	c9 7b		cmp #$7b			cmp 	#'z'+1
.d7aa	b7aa	b0 ee		bcs $b79a			bcs 	_FLBCLoop
.d7ac	b7ac	38		sec				sec 								; make U/C
.d7ad	b7ad	e9 20		sbc #$20			sbc 	#32
.d7af	b7af	9d 45 05	sta $0545,x			sta	 	lineBuffer-1,x 				; write back
.d7b2	b7b2	80 e6		bra $b79a			bra 	_FLBCLoop
.d7b4	b7b4					_FLBCInQuotes:
.d7b4	b7b4	e8		inx				inx 								; advance
.d7b5	b7b5	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get next
.d7b8	b7b8	f0 07		beq $b7c1			beq 	_FLBCExit 					; exit on EOS
.d7ba	b7ba	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d7bc	b7bc	d0 f6		bne $b7b4			bne 	_FLBCInQuotes
.d7be	b7be	e8		inx				inx 								; skip over it
.d7bf	b7bf	80 d9		bra $b79a			bra 	_FLBCLoop
.d7c1	b7c1					_FLBCExit:
.d7c1	b7c1	60		rts				rts
.d7c2	b7c2					TOKExtractLineNumber:
.d7c2	b7c2	ad 48 04	lda $0448			lda 	tokenLineNumber+1 			; push current value on stack
.d7c5	b7c5	48		pha				pha
.d7c6	b7c6	ad 47 04	lda $0447			lda 	tokenLineNumber
.d7c9	b7c9	48		pha				pha
.d7ca	b7ca	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 2
.d7cd	b7cd	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 4
.d7d0	b7d0	18		clc				clc 								; add stacked value
.d7d1	b7d1	68		pla				pla
.d7d2	b7d2	6d 47 04	adc $0447			adc 	tokenLineNumber
.d7d5	b7d5	8d 47 04	sta $0447			sta 	tokenLineNumber
.d7d8	b7d8	68		pla				pla
.d7d9	b7d9	6d 48 04	adc $0448			adc 	tokenLineNumber+1
.d7dc	b7dc	8d 48 04	sta $0448			sta 	tokenLineNumber+1 			; line # x 5
.d7df	b7df	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 10
.d7e2	b7e2	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get and consume character
.d7e5	b7e5	e8		inx				inx
.d7e6	b7e6	29 0f		and #$0f			and 	#15 						; add to line #
.d7e8	b7e8	18		clc				clc
.d7e9	b7e9	6d 47 04	adc $0447			adc 	tokenLineNumber
.d7ec	b7ec	8d 47 04	sta $0447			sta 	tokenLineNumber
.d7ef	b7ef	90 03		bcc $b7f4			bcc 	_TLENNoCarry
.d7f1	b7f1	ee 48 04	inc $0448			inc 	tokenLineNumber+1
.d7f4	b7f4					_TLENNoCarry:
.d7f4	b7f4	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; more digits ?
.d7f7	b7f7	c9 30		cmp #$30			cmp 	#'0'
.d7f9	b7f9	90 04		bcc $b7ff			bcc 	_TLENExit
.d7fb	b7fb	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7fd	b7fd	90 c3		bcc $b7c2			bcc 	TOKExtractLineNumber
.d7ff	b7ff					_TLENExit:
.d7ff	b7ff	60		rts				rts
.d800	b800					_LCLNTimes2:
.d800	b800	0e 47 04	asl $0447			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d803	b803	2e 48 04	rol $0448			rol 	tokenLineNumber+1
.d806	b806	60		rts				rts
.d807	b807					TOKWriteByte:
.d807	b807	da		phx				phx
.d808	b808	ae 46 04	ldx $0446			ldx 	tokenOffset 				; next slot to write to
.d80b	b80b	9d 46 04	sta $0446,x			sta 	tokenOffset,x 				; write byte out
.d80e	b80e	ee 46 04	inc $0446			inc 	tokenOffset 				; advance slot.
.d811	b811	fa		plx				plx
.d812	b812	60		rts				rts
.d813	b813					TOKCheckCreateVariableRecord:
.d813	b813	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d815	b815	85 36		sta $36				sta 	0+zTemp0
.d817	b817	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d819	b819	85 37		sta $37				sta 	1+zTemp0
.d81b	b81b					_CCVSearch:
.d81b	b81b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d81d	b81d	f0 2c		beq $b84b			beq 	_CCVFail
.d81f	b81f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d821	b821	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d823	b823	cd 23 04	cmp $0423			cmp 	identHash 	  				; if not, try the next.
.d826	b826	d0 16		bne $b83e			bne 	_CCVNext
.d828	b828	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d82a	b82a	ae 20 04	ldx $0420			ldx 	identStart
.d82d	b82d					_CCVCompare:
.d82d	b82d	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d830	b830	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d832	b832	e8		inx				inx 								; advance pointers
.d833	b833	c8		iny				iny
.d834	b834	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d835	b835	d0 07		bne $b83e			bne 	_CCVNext  					; didn't match go to next.
.d837	b837	90 f4		bcc $b82d			bcc 	_CCVCompare 				; not finished yet.
.d839	b839	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; matched whole thing ?
.d83c	b83c	f0 41		beq $b87f			beq 	_CCVFound 					; yes, we were successful
.d83e	b83e					_CCVNext:
.d83e	b83e	18		clc				clc 								; go to next record.
.d83f	b83f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d841	b841	65 36		adc $36				adc 	zTemp0
.d843	b843	85 36		sta $36				sta 	zTemp0
.d845	b845	90 d4		bcc $b81b			bcc 	_CCVSearch
.d847	b847	e6 37		inc $37				inc 	zTemp0+1
.d849	b849	80 d0		bra $b81b			bra 	_CCVSearch
.d84b	b84b					_CCVFail:
.d84b	b84b	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d84d	b84d	ad 23 04	lda $0423			lda 	identHash
.d850	b850	91 36		sta ($36),y			sta 	(zTemp0),y
.d852	b852	c8		iny				iny 								; offset 2 is the type byte
.d853	b853	ad 24 04	lda $0424			lda 	identTypeByte
.d856	b856	91 36		sta ($36),y			sta 	(zTemp0),y
.d858	b858	c8		iny				iny
.d859	b859					_CCVData:
.d859	b859	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d85b	b85b	91 36		sta ($36),y			sta 	(zTemp0),y
.d85d	b85d	c8		iny				iny
.d85e	b85e	c0 08		cpy #$08			cpy 	#8
.d860	b860	90 f7		bcc $b859			bcc 	_CCVData
.d862	b862	ae 20 04	ldx $0420			ldx 	identStart 					; copy name into 8 on.
.d865	b865					_CCVCopyName:
.d865	b865	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d868	b868	91 36		sta ($36),y			sta 	(zTemp0),y
.d86a	b86a	e8		inx				inx
.d86b	b86b	c8		iny				iny
.d86c	b86c	ec 22 04	cpx $0422			cpx 	identTypeEnd
.d86f	b86f	d0 f4		bne $b865			bne 	_CCVCopyName
.d871	b871	98		tya				tya 								; patch offset
.d872	b872	92 36		sta ($36)			sta 	(zTemp0)
.d874	b874	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d876	b876	91 36		sta ($36),y			sta 	(zTemp0),y
.d878	b878	88		dey				dey
.d879	b879	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d87b	b87b	09 80		ora #$80			ora 	#$80
.d87d	b87d	91 36		sta ($36),y			sta 	(zTemp0),y
.d87f	b87f					_CCVFound:
.d87f	b87f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d881	b881	38		sec				sec
.d882	b882	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d884	b884	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d886	b886	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d889	b889	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d88b	b88b	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d88e	b88e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d88f	b88f					SNDCheckChannel:
.d88f	b88f	aa		tax				tax
.d890	b890	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d893	b893	d0 38		bne $b8cd			bne 	_SNDCCExit
.d895	b895	da		phx				phx 								; save current channel
.d896	b896	8a		txa				txa 								; put in A
.d897	b897	20 13 b9	jsr $b913			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d89a	b89a	68		pla				pla 								; channel # in A
.d89b	b89b	90 30		bcc $b8cd			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d89d	b89d	a8		tay				tay 								; Y is the channel #
.d89e	b89e	bd af 08	lda $08af,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d8a1	b8a1	99 ae 09	sta $09ae,y			sta 	SNDPitchLow,y
.d8a4	b8a4	bd b0 08	lda $08b0,x			lda 	SNDQueue+2,x
.d8a7	b8a7	99 b2 09	sta $09b2,y			sta 	SNDPitchHigh,y
.d8aa	b8aa	bd b1 08	lda $08b1,x			lda 	SNDQueue+3,x
.d8ad	b8ad	99 b6 09	sta $09b6,y			sta 	SNDVolume,y
.d8b0	b8b0	bd b2 08	lda $08b2,x			lda 	SNDQueue+4,x
.d8b3	b8b3	99 ba 09	sta $09ba,y			sta 	SNDTimeLeft,y
.d8b6	b8b6	bd b3 08	lda $08b3,x			lda 	SNDQueue+5,x
.d8b9	b8b9	99 be 09	sta $09be,y			sta 	SNDAdjustLow,y
.d8bc	b8bc	bd b4 08	lda $08b4,x			lda 	SNDQueue+6,x
.d8bf	b8bf	99 c2 09	sta $09c2,y			sta 	SNDAdjustHigh,y
.d8c2	b8c2	5a		phy				phy 								; save channel #
.d8c3	b8c3	20 2d b9	jsr $b92d			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d8c6	b8c6	ce ad 08	dec $08ad			dec 	SNDLength 					; reduce the queue length.
.d8c9	b8c9	68		pla				pla
.d8ca	b8ca	20 ce b8	jsr $b8ce			jsr 	SNDUpdateNote 				; update channel A
.d8cd	b8cd					_SNDCCExit:
.d8cd	b8cd	60		rts				rts
.d8ce	b8ce					SNDUpdateNote:
.d8ce	b8ce	aa		tax				tax 								; so we can access records
.d8cf	b8cf	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d8d0	b8d0	0a		asl a				asl 	a
.d8d1	b8d1	0a		asl a				asl 	a
.d8d2	b8d2	0a		asl a				asl 	a
.d8d3	b8d3	0a		asl a				asl 	a
.d8d4	b8d4	8d ac 08	sta $08ac			sta 	SNDChannelBits
.d8d7	b8d7	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; are we silent
.d8da	b8da	f0 2e		beq $b90a			beq 	_SNDUNIsSilent
.d8dc	b8dc	ad ac 08	lda $08ac			lda 	SNDChannelBits 				; push channel bits on stack
.d8df	b8df	48		pha				pha
.d8e0	b8e0	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d8e3	b8e3	29 0f		and #$0f			and 	#$0F
.d8e5	b8e5	0d ac 08	ora $08ac			ora 	SNDChannelBits 				; set channel bits
.d8e8	b8e8	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d8ea	b8ea	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d8ed	b8ed	bd b2 09	lda $09b2,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d8f0	b8f0	8d ac 08	sta $08ac			sta 	SNDChannelBits
.d8f3	b8f3	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x
.d8f6	b8f6	4e ac 08	lsr $08ac			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d8f9	b8f9	6a		ror a				ror 	a
.d8fa	b8fa	4e ac 08	lsr $08ac			lsr 	SNDChannelBits
.d8fd	b8fd	6a		ror a				ror 	a
.d8fe	b8fe	4a		lsr a				lsr 	a 							; put in bits 0-5
.d8ff	b8ff	4a		lsr a				lsr 	a
.d900	b900	20 77 b9	jsr $b977			jsr 	SNDWritePorts 				; write as rest of pitch register
.d903	b903	68		pla				pla
.d904	b904	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d906	b906	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d909	b909	60		rts				rts
.d90a	b90a					_SNDUNIsSilent:
.d90a	b90a	ad ac 08	lda $08ac			lda 	SNDChannelBits 				; channel bits
.d90d	b90d	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d90f	b90f	20 77 b9	jsr $b977			jsr 	SNDWritePorts 				; write to the ports
.d912	b912	60		rts				rts
.d913	b913					SNDFindNextNoteForA:
.d913	b913	ac ad 08	ldy $08ad			ldy 	SNDLength 					; queue size into Y
.d916	b916	f0 13		beq $b92b			beq 	_SNDFNNFail 				; queue empty.
.d918	b918	a2 00		ldx #$00			ldx 	#0
.d91a	b91a					_SNDFNNSearch:
.d91a	b91a	dd ae 08	cmp $08ae,x			cmp 	SNDQueue,x 					; does it match the channel
.d91d	b91d	38		sec				sec
.d91e	b91e	f0 0c		beq $b92c			beq 	_SNDFNNExit 				; if so exit with CS.
.d920	b920	e8		inx				inx 								; next queue slot.
.d921	b921	e8		inx				inx
.d922	b922	e8		inx				inx
.d923	b923	e8		inx				inx
.d924	b924	e8		inx				inx
.d925	b925	e8		inx				inx
.d926	b926	e8		inx				inx
.d927	b927	e8		inx				inx
.d928	b928	88		dey				dey 								; done the whole queue
.d929	b929	d0 ef		bne $b91a			bne 	_SNDFNNSearch 				; no, go back.
.d92b	b92b					_SNDFNNFail:
.d92b	b92b	18		clc				clc
.d92c	b92c					_SNDFNNExit:
.d92c	b92c	60		rts				rts
.d92d	b92d					SNDDeleteXFromQueue:
.d92d	b92d	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d92f	b92f	f0 09		beq $b93a			beq 	_SNDDXExit
.d931	b931	bd b6 08	lda $08b6,x			lda 	SNDQueue+8,x
.d934	b934	9d ae 08	sta $08ae,x			sta 	SNDQueue,x
.d937	b937	e8		inx				inx
.d938	b938	80 f3		bra $b92d			bra 	SNDDeleteXFromQueue
.d93a	b93a					_SNDDXExit:
.d93a	b93a	60		rts				rts
.08ac						SNDChannelBits:
>08ac								.fill 	1
.d93b	b93b					SNDQueueRequest:
.d93b	b93b	86 36		stx $36				stx 	zTemp0						; save queue address
.d93d	b93d	84 37		sty $37				sty 	zTemp0+1
.d93f	b93f	ae ad 08	ldx $08ad			ldx 	SNDLength 					; queue is full, can't take any more.
.d942	b942	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d944	b944	f0 21		beq $b967			beq 	_SNDQRExit
.d946	b946	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d948	b948	48		pha				pha
.d949	b949	8a		txa				txa  								; get offset in queue buffer/
.d94a	b94a	0a		asl a				asl 	a
.d94b	b94b	0a		asl a				asl 	a
.d94c	b94c	0a		asl a				asl 	a
.d94d	b94d	aa		tax				tax
.d94e	b94e	68		pla				pla 								; get back and push again
.d94f	b94f	48		pha				pha
.d950	b950	9d ae 08	sta $08ae,x			sta 	SNDQueue+0,x 				; save the channel #
.d953	b953	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d955	b955					_SNDQCopy:
.d955	b955	b1 36		lda ($36),y			lda 	(zTemp0),y
.d957	b957	e8		inx				inx
.d958	b958	c8		iny				iny
.d959	b959	9d ae 08	sta $08ae,x			sta 	SNDQueue,x
.d95c	b95c	c0 06		cpy #$06			cpy 	#6
.d95e	b95e	d0 f5		bne $b955			bne 	_SNDQCopy
.d960	b960	ee ad 08	inc $08ad			inc 	SNDLength 					; bump queue length.
.d963	b963	68		pla				pla 								; get channel # back
.d964	b964	20 8f b8	jsr $b88f			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d967	b967					_SNDQRExit:
.d967	b967	60		rts				rts
.d968	b968					SNDSilenceChannel:
.d968	b968	aa		tax				tax 								; zero time left.
.d969	b969	9e ba 09	stz $09ba,x			stz 	SNDTimeLeft,x
.d96c	b96c	0a		asl a				asl 	a 							; shift into position
.d96d	b96d	0a		asl a				asl 	a
.d96e	b96e	0a		asl a				asl 	a
.d96f	b96f	0a		asl a				asl 	a
.d970	b970	0a		asl a				asl 	a
.d971	b971	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d973	b973	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d976	b976	60		rts				rts
.d977	b977					SNDWritePorts:
.d977	b977	da		phx				phx 								; save X
.d978	b978	a6 01		ldx $01				ldx 	1 							; save I/O status
.d97a	b97a	64 01		stz $01				stz 	1 							; access I/O page 0
.d97c	b97c	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d97f	b97f	8d 10 d6	sta $d610			sta 	$D610
.d982	b982	86 01		stx $01				stx 	1 							; restore I/O
.d984	b984	fa		plx				plx 								; restore X
.d985	b985	60		rts				rts
.d986	b986					Export_SNDCommand:
.d986	b986	da		phx				phx 								; save XY
.d987	b987	5a		phy				phy
.d988	b988	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d98a	b98a	f0 1d		beq $b9a9			beq 	_SNDInitialise
.d98c	b98c	90 28		bcc $b9b6			bcc 	_SNDExit
.d98e	b98e	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d990	b990	f0 17		beq $b9a9			beq 	_SNDSilence
.d992	b992	b0 22		bcs $b9b6			bcs 	_SNDExit
.d994	b994	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d996	b996	b0 09		bcs $b9a1			bcs 	_SNDQueryPlay
.d998	b998	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d99a	b99a	b0 1a		bcs $b9b6			bcs 	_SNDExit
.d99c	b99c	20 3b b9	jsr $b93b			jsr 	SNDQueueRequest
.d99f	b99f	80 15		bra $b9b6			bra 	_SNDExit
.d9a1	b9a1					_SNDQueryPlay:
.d9a1	b9a1	29 03		and #$03			and 	#3 							; get channel #
.d9a3	b9a3	aa		tax				tax
.d9a4	b9a4	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d9a7	b9a7	80 0d		bra $b9b6			bra 	_SNDExit
.d9a9	b9a9					_SNDInitialise:
.d9a9	b9a9					_SNDSilence:
.d9a9	b9a9	9c ad 08	stz $08ad			stz 	SNDLength 					; empty the queue.
.d9ac	b9ac	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d9ae	b9ae					_SNDSilenceLoop:
.d9ae	b9ae	48		pha				pha
.d9af	b9af	20 68 b9	jsr $b968			jsr 	SNDSilenceChannel
.d9b2	b9b2	68		pla				pla
.d9b3	b9b3	3a		dec a				dec 	a
.d9b4	b9b4	10 f8		bpl $b9ae			bpl 	_SNDSilenceLoop
.d9b6	b9b6					_SNDExit:
.d9b6	b9b6	7a		ply				ply
.d9b7	b9b7	fa		plx				plx
.d9b8	b9b8	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.08ad						SNDLength:
>08ad								.fill 	1
.08ae						SNDQueue:
>08ae								.fill 	SNDQueueSize * 8
.09ae						SNDPitchLow:
>09ae								.fill 	4
.09b2						SNDPitchHigh:
>09b2								.fill 	4
.09b6						SNDVolume:
>09b6								.fill 	4
.09ba						SNDTimeLeft:
>09ba								.fill 	4
.09be						SNDAdjustLow:
>09be								.fill 	4
.09c2						SNDAdjustHigh:
>09c2								.fill 	4
.d9b9	b9b9					Export_SNDUpdate:
.d9b9	b9b9					PagedSNDUpdate:
.d9b9	b9b9	ad ba 09	lda $09ba			lda 	SNDTimeLeft+0 				; look at time remaining
.d9bc	b9bc	f0 05		beq $b9c3			beq 	_SNDUNot0 					; not playing
.d9be	b9be	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d9c0	b9c0	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel 			; update it.
.d9c3	b9c3					_SNDUNot0:
.d9c3	b9c3	ad bb 09	lda $09bb			lda 	SNDTimeLeft+1
.d9c6	b9c6	f0 05		beq $b9cd			beq 	_SNDUNot1
.d9c8	b9c8	a2 01		ldx #$01			ldx 	#1
.d9ca	b9ca	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9cd	b9cd					_SNDUNot1:
.d9cd	b9cd	ad bc 09	lda $09bc			lda 	SNDTimeLeft+2
.d9d0	b9d0	f0 05		beq $b9d7			beq 	_SNDUNot2
.d9d2	b9d2	a2 02		ldx #$02			ldx 	#2
.d9d4	b9d4	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9d7	b9d7					_SNDUNot2:
.d9d7	b9d7	ad bd 09	lda $09bd			lda 	SNDTimeLeft+3
.d9da	b9da	f0 05		beq $b9e1			beq 	_SNDUNot3
.d9dc	b9dc	a2 03		ldx #$03			ldx 	#3
.d9de	b9de	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9e1	b9e1					_SNDUNot3:
.d9e1	b9e1	60		rts				rts
.d9e2	b9e2					SNDUpdateChannel:
.d9e2	b9e2	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d9e4	b9e4	f0 2c		beq $ba12			beq 	_SNDUCExit
.d9e6	b9e6	3a		dec a				dec 	a 							; decrement and update timer
.d9e7	b9e7	9d ba 09	sta $09ba,x			sta 	SNDTimeLeft,x
.d9ea	b9ea	f0 1d		beq $ba09			beq 	_SNDUCUpdate 				; if zero, silence channel
.d9ec	b9ec	bd be 09	lda $09be,x			lda 	SNDAdjustLow,x 				; adjust ?
.d9ef	b9ef	1d c2 09	ora $09c2,x			ora 	SNDAdjustHigh,x
.d9f2	b9f2	f0 1e		beq $ba12			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d9f4	b9f4	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d9f5	b9f5	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x
.d9f8	b9f8	7d be 09	adc $09be,x			adc 	SNDAdjustLow,x
.d9fb	b9fb	9d ae 09	sta $09ae,x			sta 	SNDPitchLow,x
.d9fe	b9fe	bd b2 09	lda $09b2,x			lda 	SNDPitchHigh,x
.da01	ba01	7d c2 09	adc $09c2,x			adc 	SNDAdjustHigh,x
.da04	ba04	29 03		and #$03			and 	#3
.da06	ba06	9d b2 09	sta $09b2,x			sta 	SNDPitchHigh,x
.da09	ba09					_SNDUCUpdate:
.da09	ba09	8a		txa				txa 								; which channel.
.da0a	ba0a	48		pha				pha
.da0b	ba0b	20 ce b8	jsr $b8ce			jsr 	SNDUpdateNote 				; update the current note
.da0e	ba0e	68		pla				pla
.da0f	ba0f	20 8f b8	jsr $b88f			jsr 	SNDCheckChannel 			; more to do ?
.da12	ba12					_SNDUCExit:
.da12	ba12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
