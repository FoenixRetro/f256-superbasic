
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 10:05:42 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					decimalCount:
>0706							.fill 	1
.0707					tokenOffset:
>0707							.fill 	1
.0708					tokenLineNumber:
>0708							.fill 	2
.070a					tokenBuffer:
>070a							.fill 	253
.0807					lineBuffer:
>0807							.fill 	MaxLineSize+1
.0858					numberBuffer:
>0858							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b					KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c					KWD_HEXDOLLARLPAREN                  = $8c; $8c HEX$(
=$8d					KWD_INTLPAREN                        = $8d; $8d INT(
=$8e					KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOT                              = $92; $92 NOT
=$93					KWD_PAGE                             = $93; $93 PAGE
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_UNTIL                            = $a3; $a3 UNTIL
=$a4					KWD_WEND                             = $a4; $a4 WEND
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a4					KWC_LAST_STRUCTURE = $a4
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 56 81	jsr $8156			jsr 	NewCommand 					; erase current program
.8006	20 7d 88	jsr $887d			jsr 	BackloadProgram
.8009	4c 6d 81	jmp $816d			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 d7 91	jsr $91d7			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	55 82					.word	ShiftLeft                        ; $00 <<
>8016	60 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8018	56 8d					.word	BinaryCompareNotEqual            ; $02 <>
>801a	1a 91					.word	SyntaxError                      ; $03 !!3
>801c	1a 91					.word	SyntaxError                      ; $04 ><
>801e	6a 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	58 82					.word	ShiftRight                       ; $06 >>
>8022	1a 91					.word	SyntaxError                      ; $07 !!7
>8024	1a 91					.word	SyntaxError                      ; $08 !!8
>8026	1a 91					.word	SyntaxError                      ; $09 !!9
>8028	1a 91					.word	SyntaxError                      ; $0a !!10
>802a	1a 91					.word	SyntaxError                      ; $0b !!11
>802c	1a 91					.word	SyntaxError                      ; $0c !!12
>802e	1a 91					.word	SyntaxError                      ; $0d !!13
>8030	1a 91					.word	SyntaxError                      ; $0e !!14
>8032	1a 91					.word	SyntaxError                      ; $0f !!15
>8034	1a 91					.word	SyntaxError                      ; $10 @
>8036	1a 91					.word	SyntaxError                      ; $11 !!17
>8038	1a 91					.word	SyntaxError                      ; $12 !!18
>803a	1a 91					.word	SyntaxError                      ; $13 [
>803c	d0 8d					.word	IntegerDivide                    ; $14 \
>803e	1a 91					.word	SyntaxError                      ; $15 ]
>8040	db 83					.word	EorInteger                       ; $16 ^
>8042	1a 91					.word	SyntaxError                      ; $17 _
>8044	1a 91					.word	SyntaxError                      ; $18 `
>8046	1a 91					.word	SyntaxError                      ; $19 !!25
>8048	1a 91					.word	SyntaxError                      ; $1a !!26
>804a	1a 91					.word	SyntaxError                      ; $1b {
>804c	96 83					.word	OraInteger                       ; $1c |
>804e	1a 91					.word	SyntaxError                      ; $1d }
>8050	1a 91					.word	SyntaxError                      ; $1e ~
>8052	1a 91					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	1a 91					.word	SyntaxError                      ; $20
>8056	1a 91					.word	SyntaxError                      ; $21 !
>8058	1a 91					.word	SyntaxError                      ; $22 "
>805a	1a 91					.word	SyntaxError                      ; $23 #
>805c	1a 91					.word	SyntaxError                      ; $24 $
>805e	1c 8e					.word	IntegerModulus                   ; $25 %
>8060	51 83					.word	AndInteger                       ; $26 &
>8062	1a 91					.word	SyntaxError                      ; $27 '
>8064	1a 91					.word	SyntaxError                      ; $28 (
>8066	1a 91					.word	SyntaxError                      ; $29 )
>8068	90 8e					.word	MulInteger                       ; $2a *
>806a	eb 82					.word	AddInteger                       ; $2b +
>806c	1a 91					.word	SyntaxError                      ; $2c ,
>806e	26 83					.word	SubInteger                       ; $2d -
>8070	1a 91					.word	SyntaxError                      ; $2e .
>8072	27 90					.word	FDivideCommand                   ; $2f /
>8074	1a 91					.word	SyntaxError                      ; $30 0
>8076	1a 91					.word	SyntaxError                      ; $31 1
>8078	1a 91					.word	SyntaxError                      ; $32 2
>807a	1a 91					.word	SyntaxError                      ; $33 3
>807c	1a 91					.word	SyntaxError                      ; $34 4
>807e	1a 91					.word	SyntaxError                      ; $35 5
>8080	1a 91					.word	SyntaxError                      ; $36 6
>8082	1a 91					.word	SyntaxError                      ; $37 7
>8084	1a 91					.word	SyntaxError                      ; $38 8
>8086	1a 91					.word	SyntaxError                      ; $39 9
>8088	1a 91					.word	SyntaxError                      ; $3a :
>808a	1a 91					.word	SyntaxError                      ; $3b ;
>808c	42 8d					.word	BinaryCompareLess                ; $3c <
>808e	38 8d					.word	BinaryCompareEqual               ; $3d =
>8090	4c 8d					.word	BinaryCompareGreater             ; $3e >
>8092	1a 91					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	a4 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	b1 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	1a 91					.word	SyntaxError                      ; $82 !2:SH2
>809a	1a 91					.word	SyntaxError                      ; $83 ABS(
>809c	1a 91					.word	SyntaxError                      ; $84 ALLOC(
>809e	1a 91					.word	SyntaxError                      ; $85 ASC(
>80a0	1a 91					.word	SyntaxError                      ; $86 CHR$(
>80a2	1a 91					.word	SyntaxError                      ; $87 DEC(
>80a4	34 8d					.word	UnaryFalse                       ; $88 FALSE
>80a6	1a 91					.word	SyntaxError                      ; $89 FRAC(
>80a8	1a 91					.word	SyntaxError                      ; $8a GETDATE$(
>80aa	1a 91					.word	SyntaxError                      ; $8b GETTIME$(
>80ac	1a 91					.word	SyntaxError                      ; $8c HEX$(
>80ae	1a 91					.word	SyntaxError                      ; $8d INT(
>80b0	1a 91					.word	SyntaxError                      ; $8e ISVAL(
>80b2	1a 91					.word	SyntaxError                      ; $8f LEFT$(
>80b4	1a 91					.word	SyntaxError                      ; $90 LEN(
>80b6	1a 91					.word	SyntaxError                      ; $91 MID$(
>80b8	1a 91					.word	SyntaxError                      ; $92 NOT
>80ba	1a 91					.word	SyntaxError                      ; $93 PAGE
>80bc	1a 91					.word	SyntaxError                      ; $94 RIGHT$(
>80be	1a 91					.word	SyntaxError                      ; $95 RND(
>80c0	1a 91					.word	SyntaxError                      ; $96 SGN(
>80c2	1a 91					.word	SyntaxError                      ; $97 SPC(
>80c4	1a 91					.word	SyntaxError                      ; $98 STR$(
>80c6	28 8d					.word	UnaryTrue                        ; $99 TRUE
>80c8	1a 91					.word	SyntaxError                      ; $9a VAL(
>80ca	1a 91					.word	SyntaxError                      ; $9b FOR
>80cc	1a 91					.word	SyntaxError                      ; $9c IF
>80ce	1a 91					.word	SyntaxError                      ; $9d PROC
>80d0	1a 91					.word	SyntaxError                      ; $9e REPEAT
>80d2	1a 91					.word	SyntaxError                      ; $9f WHILE
>80d4	1a 91					.word	SyntaxError                      ; $a0 ENDIF
>80d6	1a 91					.word	SyntaxError                      ; $a1 ENDPROC
>80d8	1a 91					.word	SyntaxError                      ; $a2 NEXT
>80da	1a 91					.word	SyntaxError                      ; $a3 UNTIL
>80dc	1a 91					.word	SyntaxError                      ; $a4 WEND
>80de	22 81					.word	CallCommand                      ; $a5 CALL
>80e0	1a 91					.word	SyntaxError                      ; $a6 CLS
>80e2	1a 91					.word	SyntaxError                      ; $a7 DATA
>80e4	1a 91					.word	SyntaxError                      ; $a8 DIM
>80e6	1a 91					.word	SyntaxError                      ; $a9 GOSUB
>80e8	1a 91					.word	SyntaxError                      ; $aa GOTO
>80ea	1a 91					.word	SyntaxError                      ; $ab LET
>80ec	1a 91					.word	SyntaxError                      ; $ac PRINT
>80ee	1a 91					.word	SyntaxError                      ; $ad READ
>80f0	60 81					.word	RemCommand                       ; $ae REM
>80f2	1a 91					.word	SyntaxError                      ; $af RETURN
>80f4	1a 91					.word	SyntaxError                      ; $b0 THEN
>80f6	1a 91					.word	SyntaxError                      ; $b1 TO
.80f8					VectorSet1:
>80f8	1a 91					.word	SyntaxError                      ; $80 !0:EOF
>80fa	1a 91					.word	SyntaxError                      ; $81 !1:SH1
>80fc	1a 91					.word	SyntaxError                      ; $82 !2:SH2
>80fe	14 81					.word	AssertCommand                    ; $83 ASSERT
>8100	2e 81					.word	ClearCommand                     ; $84 CLEAR
>8102	53 81					.word	EndCommand                       ; $85 END
>8104	1a 91					.word	SyntaxError                      ; $86 LIST
>8106	56 81					.word	NewCommand                       ; $87 NEW
>8108	1a 91					.word	SyntaxError                      ; $88 RESTORE
>810a	6d 81					.word	CommandRUN                       ; $89 RUN
>810c	1a 91					.word	SyntaxError                      ; $8a STOP
.810e					VectorSet2:
>810e	1a 91					.word	SyntaxError                      ; $80 !0:EOF
>8110	1a 91					.word	SyntaxError                      ; $81 !1:SH1
>8112	1a 91					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8114					AssertCommand:
.8114	20 67 87	jsr $8767			jsr 	EvaluateInteger 			; the assert test
.8117	20 1d 88	jsr $881d			jsr 	NSMIsZero 					; exit if result is non zero.
.811a	d0 05		bne $8121			bne 	_ACExit
.811c	a9 0a		lda #$0a		lda	#10
.811e	4c b9 81	jmp $81b9		jmp	ErrorHandler
.8121					_ACExit:
.8121	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8122					CallCommand:
.8122	20 7c 87	jsr $877c			jsr 	Evaluate16BitInteger
.8125	ad 10 06	lda $0610			lda 	NSMantissa1
.8128	8d 09 06	sta $0609			sta 	NSMantissa0+1
.812b	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.812e					ClearCommand:
.812e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8130	85 36		sta $36				sta 	0+zTemp0
.8132	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8134	85 37		sta $37				sta 	1+zTemp0
.8136					_ClearZeroLoop:
.8136	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8138	f0 18		beq $8152			beq 	_ClearZeroEnd
.813a	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813c	a9 00		lda #$00			lda 	#0
.813e					_ClearOneVariable:
.813e	91 36		sta ($36),y			sta 	(zTemp0),y
.8140	c8		iny				iny
.8141	c0 08		cpy #$08			cpy 	#8
.8143	d0 f9		bne $813e			bne 	_ClearOneVariable
.8145	18		clc				clc 								; go to the next variable
.8146	b2 36		lda ($36)			lda 	(zTemp0)
.8148	65 36		adc $36				adc 	zTemp0
.814a	85 36		sta $36				sta 	zTemp0
.814c	90 e8		bcc $8136			bcc 	_ClearZeroLoop
.814e	e6 37		inc $37				inc 	zTemp0+1
.8150	80 e4		bra $8136			bra 	_ClearZeroLoop
.8152					_ClearZeroEnd:
.8152	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8153					EndCommand:
.8153	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8156					NewCommand:
.8156	20 2a 88	jsr $882a			jsr 	MemoryNew
.8159	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.815c	20 2e 81	jsr $812e			jsr 	ClearCommand 				; clear everything.
.815f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8160					RemCommand:
.8160	b1 30		lda ($30),y			lda 	(codePtr),y
.8162	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8164	d0 06		bne $816c			bne 	_RMExit
.8166	c8		iny				iny
.8167	98		tya				tya
.8168	38		sec				sec
.8169	71 30		adc ($30),y			adc 	(codePtr),y
.816b	a8		tay				tay
.816c					_RMExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.816d					CommandRUN:
.816d	20 2e 81	jsr $812e			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8170	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8172	85 30		sta $30				sta 	codePtr
.8174	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8176	85 31		sta $31				sta 	codePtr+1
.8178					RUNNewLine:
.8178	b2 30		lda ($30)			lda 	(codePtr)
.817a	f0 25		beq $81a1			beq 	CRNoProgram         		; no then END.
.817c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.817e	9a		txs				txs
.817f					RUNCodePointerLine:
.817f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8181					_CRIncMainLoop:
.8181	c8		iny				iny
.8182					_CRMainLoop:
.8182	b1 30		lda ($30),y			lda 	(codePtr),y
.8184	10 10		bpl $8196			bpl 	_CRNotKeyword
.8186	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8188	b0 04		bcs $818e			bcs 	_CRIsKeyword
.818a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.818c	b0 0d		bcs $819b			bcs		_CRSyntaxError
.818e					_CRIsKeyword:
.818e	c8		iny				iny 								; consume command
.818f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8190	aa		tax				tax 								; put in X for vector jump
.8191	20 9e 81	jsr $819e			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8194	80 ec		bra $8182			bra 	_CRMainLoop 				; and loop round
.8196					_CRNotKeyword:
.8196	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8198	f0 e7		beq $8181			beq 	_CRIncMainLoop
>819a	db						.byte 	$DB 						; causes a break in the emulator
.819b					_CRSyntaxError:
.819b	4c 1a 91	jmp $911a			jmp 	SyntaxError
.819e					_CRCallVector0:
.819e	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.81a1					CRNoProgram:
.81a1	4c 53 81	jmp $8153			jmp 	EndCommand
.81a4					EOLCommand:
.81a4	18		clc				clc
.81a5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81a7	65 30		adc $30				adc 	codePtr
.81a9	85 30		sta $30				sta 	codePtr
.81ab	90 02		bcc $81af			bcc 	_CREExit
.81ad	e6 31		inc $31				inc 	codePtr+1
.81af					_CREExit:
.81af	80 c7		bra $8178			bra 	RunNewLine
.81b1					Shift1Command:
.81b1	b1 30		lda ($30),y			lda 	(codePtr),y
.81b3	c8		iny				iny
.81b4	0a		asl a				asl 	a
.81b5	aa		tax				tax
.81b6	7c f8 80	jmp ($80f8,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8d0f					CheckRightBracket:
.8d0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8d11	c8		iny				iny
.8d12	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d14	d0 0f		bne $8d25			bne 	CNAFail
.8d16	60		rts				rts
.8d17					CheckComma:
.8d17	b1 30		lda ($30),y			lda 	(codePtr),y
.8d19	c8		iny				iny
.8d1a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d1c	d0 07		bne $8d25			bne 	CNAFail
.8d1e	60		rts				rts
.8d1f					CheckNextA:
.8d1f	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d21	d0 02		bne $8d25			bne 	CNAFail
.8d23	c8		iny				iny 								; skip character
.8d24	60		rts				rts 								; and exit
.8d25					CNAFail:
.8d25	4c 1a 91	jmp $911a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81b9					ErrorHandler:
.81b9	a8		tay				tay 								; find the error text
.81ba	f0 42		beq $81fe			beq 	_EHEnd
.81bc	a2 00		ldx #$00			ldx 	#0
.81be					_EHFind:
.81be	88		dey				dey 								; found the error text ?
.81bf	f0 0a		beq $81cb			beq 	_EHFound
.81c1					_EHFindZero:
.81c1	bd 33 91	lda $9133,x			lda 	ErrorText,x 				; find the next error
.81c4	e8		inx				inx
.81c5	c9 00		cmp #$00			cmp 	#0
.81c7	d0 f8		bne $81c1			bne 	_EHFindZero
.81c9	80 f3		bra $81be			bra 	_EHFind
.81cb					_EHFound:
.81cb	bd 33 91	lda $9133,x			lda 	ErrorText,x 				; print the message
.81ce	20 d7 91	jsr $91d7			jsr 	EXTPrintCharacter
.81d1	e8		inx				inx
.81d2	bd 33 91	lda $9133,x			lda 	ErrorText,x
.81d5	d0 f4		bne $81cb			bne 	_EHFound
.81d7	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81d9	b1 30		lda ($30),y			lda 	(codePtr),y
.81db	d0 05		bne $81e2			bne 	_EHAtMsg
.81dd	c8		iny				iny
.81de	b1 30		lda ($30),y			lda 	(codePtr),y
.81e0	f0 17		beq $81f9			beq 	_EHCREnd
.81e2					_EHAtMsg:
.81e2	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.81e4	a9 01		lda #$01			lda 	#_AtMsg & $FF
.81e6	20 0b 82	jsr $820b			jsr 	PrintStringXA
.81e9	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81eb	b1 30		lda ($30),y			lda 	(codePtr),y
.81ed	48		pha				pha
.81ee	c8		iny				iny
.81ef	b1 30		lda ($30),y			lda 	(codePtr),y
.81f1	aa		tax				tax
.81f2	68		pla				pla
.81f3	20 11 8f	jsr $8f11			jsr 	ConvertInt16 				; convert XA to string
.81f6	20 0b 82	jsr $820b			jsr 	PrintStringXA 				; and print it.
.81f9					_EHCREnd:
.81f9	a9 0d		lda #$0d			lda 	#13 						; new line
.81fb	20 d7 91	jsr $91d7			jsr 	EXTPrintCharacter
.81fe					_EHEnd:
.81fe	4c 0c 80	jmp $800c			jmp 	WarmStart
>8201	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8209	20 00
.820b					PrintStringXA:
.820b	86 37		stx $37				stx 	zTemp0+1
.820d	85 36		sta $36				sta 	zTemp0
.820f	a0 00		ldy #$00			ldy 	#0
.8211					_PSXALoop:
.8211	b1 36		lda ($36),y			lda 	(zTemp0),y
.8213	f0 06		beq $821b			beq 	_PSXAExit
.8215	20 d7 91	jsr $91d7			jsr 	EXTPrintCharacter
.8218	c8		iny				iny
.8219	80 f6		bra $8211			bra 	_PSXALoop
.821b					_PSXAExit:
.821b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8d28					UnaryTrue:
.8d28	fa		plx				plx
.8d29					ReturnTrue:
.8d29	a9 01		lda #$01			lda 	#1  						; set to 1
.8d2b	20 ef 87	jsr $87ef			jsr 	NSMSetByte
.8d2e	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d30	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d33	60		rts				rts
.8d34					UnaryFalse:
.8d34	fa		plx				plx
.8d35					ReturnFalse:
.8d35	4c ed 87	jmp $87ed			jmp 	NSMSetZero 					; set it all to zero
.8d38					BinaryCompareEqual:
.8d38	fa		plx				plx
.8d39	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d3c	c9 00		cmp #$00			cmp 	#0
.8d3e	f0 e9		beq $8d29			beq 	ReturnTrue
.8d40	80 f3		bra $8d35			bra 	ReturnFalse
.8d42					BinaryCompareLess:
.8d42	fa		plx				plx
.8d43	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d46	c9 ff		cmp #$ff			cmp 	#$FF
.8d48	f0 df		beq $8d29			beq 	ReturnTrue
.8d4a	80 e9		bra $8d35			bra 	ReturnFalse
.8d4c					BinaryCompareGreater:
.8d4c	fa		plx				plx
.8d4d	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d50	c9 01		cmp #$01			cmp 	#1
.8d52	f0 d5		beq $8d29			beq 	ReturnTrue
.8d54	80 df		bra $8d35			bra 	ReturnFalse
.8d56					BinaryCompareNotEqual:
.8d56	fa		plx				plx
.8d57	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d5a	c9 00		cmp #$00			cmp 	#0
.8d5c	d0 cb		bne $8d29			bne 	ReturnTrue
.8d5e	80 d5		bra $8d35			bra 	ReturnFalse
.8d60					BinaryCompareLessEqual:
.8d60	fa		plx				plx
.8d61	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d64	c9 01		cmp #$01			cmp 	#1
.8d66	d0 c1		bne $8d29			bne 	ReturnTrue
.8d68	80 cb		bra $8d35			bra 	ReturnFalse
.8d6a					BinaryCompareGreaterEqual:
.8d6a	fa		plx				plx
.8d6b	20 74 8d	jsr $8d74			jsr 	CompareBaseCode
.8d6e	c9 ff		cmp #$ff			cmp 	#$FF
.8d70	d0 b7		bne $8d29			bne 	ReturnTrue
.8d72	80 c1		bra $8d35			bra 	ReturnFalse
.8d74					CompareBaseCode:
.8d74	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; make both values if references.
.8d77	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d7a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d7d	29 10		and #$10			and 	#NSTString
.8d7f	d0 40		bne $8dc1			bne 	_CBCString
.8d81	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d84	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d87	d0 3b		bne $8dc4			bne 	_CBCFloat
.8d89	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d8c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d8f	29 08		and #$08			and 	#NSTFloat
.8d91	d0 31		bne $8dc4			bne 	_CBCFloat
.8d93	20 c7 8d	jsr $8dc7			jsr 	CompareFixMinusZero
.8d96	e8		inx				inx
.8d97	20 c7 8d	jsr $8dc7			jsr 	CompareFixMinusZero
.8d9a	ca		dex				dex
.8d9b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d9e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8da1	10 0b		bpl $8dae			bpl 	_CDCSameSign
.8da3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8da6	30 16		bmi $8dbe			bmi 	_CBCLess 					; return $FF
.8da8					_CBCGreater:
.8da8	a9 01		lda #$01			lda 	#1
.8daa	60		rts				rts
.8dab					_CBCEqual:
.8dab	a9 00		lda #$00			lda 	#0
.8dad	60		rts				rts
.8dae					_CDCSameSign:
.8dae	20 c5 82	jsr $82c5			jsr 	SubTopTwoStack 				; unsigned subtract
.8db1	20 1d 88	jsr $881d			jsr 	NSMIsZero 					; or the mantissa together
.8db4	f0 f5		beq $8dab			beq 	_CBCEqual 					; -0 == 0
.8db6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8db9	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dbc	10 ea		bpl $8da8			bpl 	_CBCGreater
.8dbe					_CBCLess:
.8dbe	a9 ff		lda #$ff			lda 	#$FF
.8dc0	60		rts				rts
.8dc1					_CBCString:
.8dc1	4c 1c 82	jmp $821c			jmp 	CompareStrings
.8dc4					_CBCFloat:
.8dc4	4c 0d 90	jmp $900d			jmp 	CompareFloat
.8dc7					CompareFixMinusZero:
.8dc7	20 1d 88	jsr $881d			jsr 	NSMIsZero
.8dca	d0 03		bne $8dcf			bne 	_CFXMZNotZero
.8dcc	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8dcf					_CFXMZNotZero:
.8dcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8dd0					IntegerDivide:
.8dd0	fa		plx				plx
.8dd1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8dd4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dd7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8dd8	0a		asl a				asl 	a
.8dd9	10 05		bpl $8de0			bpl 	_NotRef
.8ddb	48		pha				pha
.8ddc	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ddf	68		pla				pla
.8de0					_NotRef:
.8de0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8de2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8de5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8de8	f0 03		beq $8ded			beq 	_IntegerCode 				; if clear, then we have two integers
.8dea	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.8ded					_IntegerCode:
.8ded	20 0f 8e	jsr $8e0f			jsr 	CheckDivideZero 			; do div zero check
.8df0	20 46 8e	jsr $8e46			jsr 	Int32Divide 				; do the division
.8df3	20 03 8f	jsr $8f03			jsr 	CalculateSign 				; calculate result sign
.8df6					NSMCopyPlusTwoToZero:
.8df6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8df9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dfc	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8dff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e02	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8e05	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e08	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8e0b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e0e	60		rts				rts
.8e0f					CheckDivideZero:
.8e0f	e8		inx				inx
.8e10	20 1d 88	jsr $881d			jsr 	NSMIsZero
.8e13	f0 02		beq $8e17			beq 	_CDVError
.8e15	ca		dex				dex
.8e16	60		rts				rts
.8e17					_CDVError:
.8e17	a9 03		lda #$03		lda	#3
.8e19	4c b9 81	jmp $81b9		jmp	ErrorHandler
.8e1c					IntegerModulus:
.8e1c	fa		plx				plx
.8e1d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e20	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e23	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e24	0a		asl a				asl 	a
.8e25	10 05		bpl $8e2c			bpl 	_NotRef
.8e27	48		pha				pha
.8e28	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e2b	68		pla				pla
.8e2c					_NotRef:
.8e2c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e2e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e31	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e34	f0 03		beq $8e39			beq 	_IntegerCode 				; if clear, then we have two integers
.8e36	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.8e39					_IntegerCode:
.8e39	20 0f 8e	jsr $8e0f			jsr 	CheckDivideZero 			; do div zero check
.8e3c	20 46 8e	jsr $8e46			jsr 	Int32Divide 				; do the division
.8e3f	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8e42	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8e45	60		rts				rts
.8e46					Int32Divide:
.8e46	48		pha				pha 								; save AXY
.8e47	5a		phy				phy
.8e48	20 c4 87	jsr $87c4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e4b	20 e9 87	jsr $87e9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8e4e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8e50					_I32DivideLoop:
.8e50	e8		inx				inx
.8e51	e8		inx				inx
.8e52	20 02 88	jsr $8802			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8e55	ca		dex				dex
.8e56	ca		dex				dex
.8e57	20 03 88	jsr $8803			jsr 	NSMRotateLeft
.8e5a	20 86 8e	jsr $8e86			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e5d	90 03		bcc $8e62			bcc 	_I32DivideNoCarryIn
.8e5f	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8e62					_I32DivideNoCarryIn:
.8e62	88		dey				dey 								; loop round till division completed.
.8e63	d0 eb		bne $8e50			bne 	_I32DivideLoop
.8e65	7a		ply				ply 								; restore AXY and exit
.8e66	68		pla				pla
.8e67	60		rts				rts
.8e68					Int32ShiftDivide:
.8e68	48		pha				pha 								; save AY
.8e69	5a		phy				phy
.8e6a	e8		inx				inx 								; clear S[X+2]
.8e6b	e8		inx				inx
.8e6c	20 ed 87	jsr $87ed			jsr 	NSMSetZero
.8e6f	ca		dex				dex
.8e70	ca		dex				dex
.8e71	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8e73					_I32SDLoop:
.8e73	20 86 8e	jsr $8e86			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e76	e8		inx				inx
.8e77	e8		inx				inx
.8e78	20 03 88	jsr $8803			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8e7b	ca		dex				dex
.8e7c	ca		dex				dex
.8e7d	20 03 88	jsr $8803			jsr 	NSMRotateLeft
.8e80	88		dey				dey 	 							; do 31 times
.8e81	d0 f0		bne $8e73			bne 	_I32SDLoop
.8e83	7a		ply				ply 								; restore AY and exit
.8e84	68		pla				pla
.8e85	60		rts				rts
.8e86					DivideCheckSubtract:
.8e86	20 c5 82	jsr $82c5			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8e89	b0 04		bcs $8e8f			bcs 	_DCSExit 					; if carry set, then could do, exit
.8e8b	20 9f 82	jsr $829f			jsr 	AddTopTwoStack 				; add it back in
.8e8e	18		clc				clc 								; and return False
.8e8f					_DCSExit:
.8e8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8e90					MulInteger:
.8e90	fa		plx				plx
.8e91	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e94	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e97	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e98	0a		asl a				asl 	a
.8e99	10 05		bpl $8ea0			bpl 	_NotRef
.8e9b	48		pha				pha
.8e9c	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e9f	68		pla				pla
.8ea0					_NotRef:
.8ea0	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ea1	30 0b		bmi $8eae			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ea3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ea6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ea9	f0 06		beq $8eb1			beq 	_IntegerCode 				; if clear, then we have two integers
.8eab	4c 5a 90	jmp $905a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8eae					_StringData:
.8eae	4c 2e 91	jmp $912e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8eb1					_IntegerCode:
.8eb1	20 be 8e	jsr $8ebe			jsr 	MultiplyShort
.8eb4	c9 00		cmp #$00			cmp 	#0
.8eb6	f0 05		beq $8ebd			beq 	_MIExit
.8eb8	a9 04		lda #$04		lda	#4
.8eba	4c b9 81	jmp $81b9		jmp	ErrorHandler
.8ebd					_MIExit:
.8ebd	60		rts				rts
.8ebe					MultiplyShort:
.8ebe	5a		phy				phy 								; save Y
.8ebf	20 c4 87	jsr $87c4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ec2	20 e9 87	jsr $87e9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8ec5	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8ec7					_I32MLoop:
.8ec7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8eca	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8ecd	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8ed0	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8ed3	f0 28		beq $8efd			beq 	_I32MExit 					; exit if zero
.8ed5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8ed8	29 01		and #$01			and 	#1
.8eda	f0 0e		beq $8eea			beq 	_I32MNoAdd
.8edc	20 9f 82	jsr $829f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8edf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8ee2	10 06		bpl $8eea			bpl 	_I32MNoAdd
.8ee4					_I32ShiftRight:
.8ee4	20 10 88	jsr $8810			jsr 	NSMShiftRight 				; shift S[X] right
.8ee7	c8		iny				iny 								; increment shift count
.8ee8	80 0a		bra $8ef4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8eea					_I32MNoAdd:
.8eea	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8eed	70 f5		bvs $8ee4			bvs 	_I32ShiftRight 				; instead.
.8eef	e8		inx				inx
.8ef0	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8ef3	ca		dex				dex
.8ef4					_I32MShiftUpper:
.8ef4	e8		inx				inx 								; shift S[X+2] right
.8ef5	e8		inx				inx
.8ef6	20 10 88	jsr $8810			jsr 	NSMShiftRight
.8ef9	ca		dex				dex
.8efa	ca		dex				dex
.8efb	80 ca		bra $8ec7			bra 	_I32MLoop 					; try again.
.8efd					_I32MExit:
.8efd	20 03 8f	jsr $8f03			jsr 	CalculateSign
.8f00	98		tya				tya 								; shift in A
.8f01	7a		ply				ply 								; restore Y and exit
.8f02	60		rts				rts
.8f03					CalculateSign:
.8f03	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8f06	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8f09	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f0c	0a		asl a				asl 	a 							; shift bit 7 into carry
.8f0d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8f10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.821c					CompareStrings:
.821c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.821f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8222	29 10		and #$10			and 	#NSBIsString
.8224	f0 2c		beq $8252			beq 	_CSTypeError
.8226	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8229	85 36		sta $36				sta 	zTemp0
.822b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.822e	85 37		sta $37				sta 	zTemp0+1
.8230	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8233	85 38		sta $38				sta 	zTemp1
.8235	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8238	85 39		sta $39				sta 	zTemp1+1
.823a	5a		phy				phy 								; save Y so we can access strings
.823b	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.823d					_CSLoop:
.823d	c8		iny				iny
.823e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8240	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8242	d0 06		bne $824a			bne 	_CSDifferent
.8244	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8246	d0 f5		bne $823d			bne 	_CSLoop 					; still comparing
.8248					_CSExit:
.8248	7a		ply				ply 								; reached end, return zero in A from EOS
.8249	60		rts				rts
.824a					_CSDifferent:
.824a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.824c	90 fa		bcc $8248			bcc		_CSExit
.824e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8250	80 f6		bra $8248			bra 	_CSExit
.8252					_CSTypeError:
.8252	4c 24 91	jmp $9124			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8255					ShiftLeft:
.8255	38		sec				sec
.8256	80 01		bra $8259			bra 	ShiftMain
.8258					ShiftRight:
.8258	18		clc				clc
.8259					ShiftMain:
.8259	fa		plx				plx 								; restore X
.825a	08		php				php 								; save direction
.825b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.825e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8261	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8262	0a		asl a				asl 	a
.8263	10 05		bpl $826a			bpl 	_NotRef
.8265	48		pha				pha
.8266	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8269	68		pla				pla
.826a					_NotRef:
.826a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.826c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.826f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8272	f0 03		beq $8277			beq 	_IntegerCode 				; if clear, then we have two integers
.8274	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.8277					_IntegerCode:
.8277	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.827a	29 e0		and #$e0			and 	#$E0
.827c	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.827f	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8282	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8285	d0 13		bne $829a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8287					_SMLoop:
.8287	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.828a	30 11		bmi $829d			bmi 	_SMExit 					; exit if done.
.828c	28		plp				plp 								; restore direcition setting
.828d	08		php				php
.828e	90 05		bcc $8295			bcc 	_SMRight
.8290	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; shift left if CS
.8293	80 f2		bra $8287			bra 	_SMLoop
.8295					_SMRight:
.8295	20 10 88	jsr $8810			jsr 	NSMShiftRight 				; shift right if CC
.8298	80 ed		bra $8287			bra 	_SMLoop
.829a					_SMExit0:
.829a	20 ed 87	jsr $87ed			jsr 	NSMSetZero 					; return zero.
.829d					_SMExit:
.829d	28		plp				plp 								; throw direction
.829e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.829f					AddTopTwoStack:
.829f	18		clc				clc
.82a0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82a3	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.82a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82a9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82ac	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82af	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82b2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82b5	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82b8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82bb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82be	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82c1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82c4	60		rts				rts
.82c5					SubTopTwoStack:
.82c5	38		sec				sec
.82c6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82c9	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82cc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82cf	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82d2	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82d5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82d8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82db	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82de	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82e1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82e4	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82e7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82ea	60		rts				rts
.82eb					AddInteger:
.82eb	fa		plx				plx
.82ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82ef	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82f2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82f3	0a		asl a				asl 	a
.82f4	10 05		bpl $82fb			bpl 	_NotRef
.82f6	48		pha				pha
.82f7	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82fa	68		pla				pla
.82fb					_NotRef:
.82fb	0a		asl a				asl 	a 							; put MSB of type into A:7
.82fc	30 0b		bmi $8309			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82fe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8301	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8304	f0 06		beq $830c			beq 	_IntegerCode 				; if clear, then we have two integers
.8306	4c 6c 8f	jmp $8f6c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8309					_StringData:
.8309	4c 2e 91	jmp $912e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.830c					_IntegerCode:
.830c					AddCode:
.830c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.830f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8312	10 8b		bpl $829f			bpl 	AddTopTwoStack
.8314	20 c5 82	jsr $82c5			jsr 	SubTopTwoStack 				; do a physical subtraction
.8317	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.831a	10 09		bpl $8325			bpl 	_AddExit
.831c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.831f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8322	20 a2 87	jsr $87a2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8325					_AddExit:
.8325	60		rts				rts
.8326					SubInteger:
.8326	fa		plx				plx
.8327	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.832a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.832e	0a		asl a				asl 	a
.832f	10 05		bpl $8336			bpl 	_NotRef
.8331	48		pha				pha
.8332	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8335	68		pla				pla
.8336					_NotRef:
.8336	0a		asl a				asl 	a 							; put MSB of type into A:7
.8337	30 0b		bmi $8344			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8339	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.833c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.833f	f0 06		beq $8347			beq 	_IntegerCode 				; if clear, then we have two integers
.8341	4c 71 8f	jmp $8f71			jmp 	FloatingPointSub 							; otherwise at least one float.
.8344					_StringData:
.8344	4c 2e 91	jmp $912e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8347					_IntegerCode:
.8347	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.834a	49 80		eor #$80			eor 	#$80
.834c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.834f	80 bb		bra $830c			bra 	AddCode 					; and do the same code as add.
.8351					AndInteger:
.8351	fa		plx				plx
.8352	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8355	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8358	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8359	0a		asl a				asl 	a
.835a	10 05		bpl $8361			bpl 	_NotRef
.835c	48		pha				pha
.835d	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8360	68		pla				pla
.8361					_NotRef:
.8361	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8363	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8366	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8369	f0 03		beq $836e			beq 	_IntegerCode 				; if clear, then we have two integers
.836b	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.836e					_IntegerCode:
.836e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8371	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8374	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8377	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.837a	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.837d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8380	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8383	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8386	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8389	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.838c	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.838f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8392	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8395	60		rts				rts
.8396					OraInteger:
.8396	fa		plx				plx
.8397	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.839a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.839d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.839e	0a		asl a				asl 	a
.839f	10 05		bpl $83a6			bpl 	_NotRef
.83a1	48		pha				pha
.83a2	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83a5	68		pla				pla
.83a6					_NotRef:
.83a6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83a8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83ab	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83ae	f0 03		beq $83b3			beq 	_IntegerCode 				; if clear, then we have two integers
.83b0	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.83b3					_IntegerCode:
.83b3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83b6	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83bc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83bf	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83c5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83c8	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83cb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83ce	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83d1	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83d4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83d7	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83da	60		rts				rts
.83db					EorInteger:
.83db	fa		plx				plx
.83dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83e3	0a		asl a				asl 	a
.83e4	10 05		bpl $83eb			bpl 	_NotRef
.83e6	48		pha				pha
.83e7	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83ea	68		pla				pla
.83eb					_NotRef:
.83eb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83ed	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83f0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83f3	f0 03		beq $83f8			beq 	_IntegerCode 				; if clear, then we have two integers
.83f5	4c 24 91	jmp $9124			jmp 	TypeError 					; anything else, type mismatch.
.83f8					_IntegerCode:
.83f8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83fb	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83fe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8401	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8404	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8407	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.840a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.840d	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8410	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8413	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8416	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8419	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.841c	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.841f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8f11					ConvertInt16:
.8f11	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8f14	8e 10 06	stx $0610			stx 	NSMantissa1
.8f17	9c 18 06	stz $0618			stz 	NSMantissa2
.8f1a	9c 20 06	stz $0620			stz 	NSMantissa3
.8f1d	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8f20	a2 00		ldx #$00			ldx 	#0 							; stack level
.8f22	a9 0a		lda #$0a			lda 	#10 						; base
.8f24	80 00		bra $8f26			bra 	ConvertInt32
.8f26					ConvertInt32:
.8f26	5a		phy				phy
.8f27	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8f29	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8f2c	10 08		bpl $8f36			bpl 	_CI32NotNeg
.8f2e	48		pha				pha
.8f2f	a9 2d		lda #$2d			lda 	#'-'
.8f31	99 58 08	sta $0858,y			sta 	NumberBuffer,y
.8f34	c8		iny				iny
.8f35	68		pla				pla
.8f36					_CI32NotNeg:
.8f36	20 44 8f	jsr $8f44			jsr 	_CI32DivideConvert 			; recursive conversion
.8f39	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8f3b	99 58 08	sta $0858,y			sta 	NumberBuffer,y
.8f3e	7a		ply				ply
.8f3f	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.8f41	a9 58		lda #$58			lda 	#NumberBuffer & $FF
.8f43	60		rts				rts
.8f44					_CI32DivideConvert:
.8f44	e8		inx				inx 								; write to next slot up
.8f45	20 ef 87	jsr $87ef			jsr 	NSMSetByte
.8f48	ca		dex				dex
.8f49	20 46 8e	jsr $8e46			jsr 	Int32Divide 				; divide
.8f4c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.8f4f	48		pha				pha
.8f50	20 f6 8d	jsr $8df6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.8f53	20 1d 88	jsr $881d			jsr 	NSMIsZero 					; is it zero ?
.8f56	f0 06		beq $8f5e			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.8f58	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.8f5b	20 44 8f	jsr $8f44			jsr 	_CI32DivideConvert 			; and recusrively call.
.8f5e					_CI32NoRecurse:
.8f5e	68		pla				pla 								; remainder
.8f5f	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.8f61	90 02		bcc $8f65			bcc 	_CI32NotHex
.8f63	69 26		adc #$26			adc 	#6+32
.8f65					_CI32NotHex:
.8f65	69 30		adc #$30			adc 	#48
.8f67	99 58 08	sta $0858,y			sta 	NumberBuffer,y 				; write out and exit
.8f6a	c8		iny				iny
.8f6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8420					PrecedenceLevel:
>8420	04					.byte	 4	; $00 <<
>8421	02					.byte	 2	; $01 <=
>8422	02					.byte	 2	; $02 <>
>8423	00					.byte	 0	; $03 !!3
>8424	00					.byte	 0	; $04 ><
>8425	02					.byte	 2	; $05 >=
>8426	04					.byte	 4	; $06 >>
>8427	00					.byte	 0	; $07 !!7
>8428	00					.byte	 0	; $08 !!8
>8429	00					.byte	 0	; $09 !!9
>842a	00					.byte	 0	; $0a !!10
>842b	00					.byte	 0	; $0b !!11
>842c	00					.byte	 0	; $0c !!12
>842d	00					.byte	 0	; $0d !!13
>842e	00					.byte	 0	; $0e !!14
>842f	00					.byte	 0	; $0f !!15
>8430	00					.byte	 0	; $10 @
>8431	00					.byte	 0	; $11 !!17
>8432	00					.byte	 0	; $12 !!18
>8433	00					.byte	 0	; $13 [
>8434	04					.byte	 4	; $14 \
>8435	00					.byte	 0	; $15 ]
>8436	01					.byte	 1	; $16 ^
>8437	00					.byte	 0	; $17 _
>8438	00					.byte	 0	; $18 `
>8439	00					.byte	 0	; $19 !!25
>843a	00					.byte	 0	; $1a !!26
>843b	00					.byte	 0	; $1b {
>843c	01					.byte	 1	; $1c |
>843d	00					.byte	 0	; $1d }
>843e	00					.byte	 0	; $1e ~
>843f	00					.byte	 0	; $1f [7m<7F>[m
>8440	00					.byte	 0	; $20
>8441	05					.byte	 5	; $21 !
>8442	00					.byte	 0	; $22 "
>8443	00					.byte	 0	; $23 #
>8444	05					.byte	 5	; $24 $
>8445	04					.byte	 4	; $25 %
>8446	01					.byte	 1	; $26 &
>8447	00					.byte	 0	; $27 '
>8448	00					.byte	 0	; $28 (
>8449	00					.byte	 0	; $29 )
>844a	04					.byte	 4	; $2a *
>844b	03					.byte	 3	; $2b +
>844c	00					.byte	 0	; $2c ,
>844d	03					.byte	 3	; $2d -
>844e	00					.byte	 0	; $2e .
>844f	04					.byte	 4	; $2f /
>8450	00					.byte	 0	; $30 0
>8451	00					.byte	 0	; $31 1
>8452	00					.byte	 0	; $32 2
>8453	00					.byte	 0	; $33 3
>8454	00					.byte	 0	; $34 4
>8455	00					.byte	 0	; $35 5
>8456	00					.byte	 0	; $36 6
>8457	00					.byte	 0	; $37 7
>8458	00					.byte	 0	; $38 8
>8459	00					.byte	 0	; $39 9
>845a	00					.byte	 0	; $3a :
>845b	00					.byte	 0	; $3b ;
>845c	02					.byte	 2	; $3c <
>845d	02					.byte	 2	; $3d =
>845e	02					.byte	 2	; $3e >
>845f	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8460					EvaluateExpressionAt0:
.8460	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8462					EvaluateExpression:
.8462	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8464					EvaluateExpressionAtPrecedence:
.8464	48		pha				pha 								; save precedence level
.8465	20 55 86	jsr $8655			jsr 	EvaluateTerm 				; evaluate term into level X.
.8468	68		pla				pla 								; restore precedence level.
.8469					_EXPRLoop:
.8469	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.846b	b1 30		lda ($30),y			lda 	(codePtr),y
.846d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.846f	b0 25		bcs $8496			bcs 	_EXPRExit
.8471	da		phx				phx 								; read the operator precedence
.8472	aa		tax				tax
.8473	bd 20 84	lda $8420,x			lda 	PrecedenceLevel,x
.8476	fa		plx				plx
.8477	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8479	f0 1b		beq $8496			beq 	_EXPRExit
.847b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.847d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.847f	c5 37		cmp $37				cmp 	zTemp0+1
.8481	b0 13		bcs $8496			bcs		_EXPRExit 					; if current >= operator exit
.8483	48		pha				pha 								; save current precedence.
.8484	b1 30		lda ($30),y			lda 	(codePtr),y
.8486	c8		iny				iny
.8487	48		pha				pha
.8488	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.848a	e8		inx				inx 								; work out the right hand side.
.848b	20 64 84	jsr $8464			jsr 	EvaluateExpressionAtPrecedence
.848e	ca		dex				dex
.848f	68		pla				pla 								; get operator, call the code.
.8490	20 99 84	jsr $8499			jsr 	_EXPRCaller
.8493	68		pla				pla 								; restore precedence level
.8494	80 d3		bra $8469			bra 	_EXPRLoop 					; and go round.
.8496					_EXPRExit:
.8496	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8498	60		rts				rts
.8499					_EXPRCaller:
.8499	da		phx				phx 								; save on stack, first thing is to restore it
.849a	0a		asl a				asl 	a 							; double so can use vectors into X
.849b	aa		tax				tax
.849c	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8f6c					FloatingPointAdd:
.8f6c	20 83 90	jsr $9083			jsr 	FloatPrepare 				; prepare for floats
.8f6f	80 0b		bra $8f7c			bra 	FloatAdd
.8f71					FloatingPointSub:
.8f71	20 83 90	jsr $9083			jsr 	FloatPrepare 				; prepare for floats
.8f74					FloatSubtract:
.8f74	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8f77	49 80		eor #$80			eor 	#$80
.8f79	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8f7c					FloatAdd:
.8f7c	48		pha				pha
.8f7d	5a		phy				phy
.8f7e	20 94 90	jsr $9094			jsr 	NSNormalise 				; normalise S[X]
.8f81	f0 54		beq $8fd7			beq 	_FAReturn1
.8f83	e8		inx				inx 								; normalise S[X+1]
.8f84	20 94 90	jsr $9094			jsr 	NSNormalise
.8f87	ca		dex				dex
.8f88	c9 00		cmp #$00			cmp 	#0
.8f8a	f0 6f		beq $8ffb			beq 	_FAExit 					; if so, just return A
.8f8c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8f8f	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8f92	f0 1b		beq $8faf			beq 	_FAExponentsEqual
.8f94	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8f97	a8		tay				tay
.8f98	38		sec				sec 								; do a signed comparison of the exponents.
.8f99	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8f9c	50 02		bvc $8fa0			bvc 	_FANoSignedChange
.8f9e	49 80		eor #$80			eor 	#$80
.8fa0					_FANoSignedChange:
.8fa0	29 80		and #$80			and 	#$80
.8fa2	10 03		bpl $8fa7			bpl 	_FAHaveMax
.8fa4	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8fa7					_FAHaveMax:
.8fa7	20 fe 8f	jsr $8ffe			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8faa	e8		inx				inx
.8fab	20 fe 8f	jsr $8ffe			jsr 	_FAShiftToExponent
.8fae	ca		dex				dex
.8faf					_FAExponentsEqual:
.8faf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8fb2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8fb5	30 10		bmi $8fc7			bmi 	_FADifferentSigns
.8fb7	20 9f 82	jsr $829f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8fba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8fbd	10 3c		bpl $8ffb			bpl 	_FAExit 					; if no, we are done.
.8fbf	20 10 88	jsr $8810			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8fc2	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8fc5	80 34		bra $8ffb			bra 	_FAExit
.8fc7					_FADifferentSigns:
.8fc7	20 c5 82	jsr $82c5			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8fca	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8fcd	10 2c		bpl $8ffb			bpl 	_FAExit 					; if no, we are done.
.8fcf	20 99 87	jsr $8799			jsr 	NSMNegate 					; netate result
.8fd2	20 a2 87	jsr $87a2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.8fd5	80 24		bra $8ffb			bra 	_FAExit
.8fd7					_FAReturn1:
.8fd7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8fda	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fdd	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8fe0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fe3	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8fe6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fe9	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.8fec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fef	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.8ff2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8ff5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.8ff8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ffb					_FAExit:
.8ffb	7a		ply				ply
.8ffc	68		pla				pla
.8ffd	60		rts				rts
.8ffe					_FAShiftToExponent:
.8ffe	98		tya				tya 								; compare Y to exponent
.8fff	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9002	f0 08		beq $900c			beq 	_FASEExit 					; exit if so.
.9004	20 10 88	jsr $8810			jsr 	NSMShiftRight	 			; shift the mantissa right
.9007	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.900a	80 f2		bra $8ffe			bra 	_FAShiftToExponent
.900c					_FASEExit:
.900c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.900d					CompareFloat:
.900d	20 74 8f	jsr $8f74			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9010	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9013	29 fe		and #$fe			and 	#$FE
.9015	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9018	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.901b	f0 09		beq $9026			beq 	_FCExit 					; zero, so approximately identical
.901d	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.901f	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9022	10 02		bpl $9026			bpl 	_FCExit
.9024					_FCNegative:
.9024	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9026					_FCExit:
.9026	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.9027					FDivideCommand:
.9027	fa		plx				plx	 								; restore stack position
.9028	20 83 90	jsr $9083			jsr 	FloatPrepare 				; prepare for floats
.902b					FloatDivide:
.902b	48		pha				pha
.902c	e8		inx				inx
.902d	20 94 90	jsr $9094			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9030	ca		dex				dex
.9031	c9 00		cmp #$00			cmp 	#0
.9033	f0 20		beq $9055			beq 	_FDZero
.9035	20 94 90	jsr $9094			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9038	f0 19		beq $9053			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.903a	20 68 8e	jsr $8e68			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.903d	20 f6 8d	jsr $8df6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9040	20 94 90	jsr $9094			jsr		NSNormalise 				; renormalise
.9043	20 03 8f	jsr $8f03			jsr 	CalculateSign 				; calculate result sign
.9046	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9049	38		sec				sec
.904a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.904d	38		sec				sec
.904e	e9 1e		sbc #$1e			sbc 	#30
.9050	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9053					_FDExit:
.9053	68		pla				pla
.9054	60		rts				rts
.9055					_FDZero:
.9055	a9 03		lda #$03		lda	#3
.9057	4c b9 81	jmp $81b9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.905a					FloatingPointMultiply:
.905a	20 83 90	jsr $9083			jsr 	FloatPrepare 				; prepare for floats
.905d					FloatMultiply:
.905d	48		pha				pha
.905e	20 94 90	jsr $9094			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9061	f0 1b		beq $907e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9063	e8		inx				inx
.9064	20 94 90	jsr $9094			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9067	ca		dex				dex
.9068	c9 00		cmp #$00			cmp 	#0
.906a	f0 0f		beq $907b			beq 	_FDSetZero
.906c	20 be 8e	jsr $8ebe			jsr 	MultiplyShort 				; calculate the result.
.906f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9072	18		clc				clc
.9073	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9076	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9079	80 03		bra $907e			bra 	_FDExit
.907b					_FDSetZero:
.907b	20 ed 87	jsr $87ed			jsr 	NSMSetZero 					; return 0
.907e					_FDExit:
.907e	20 94 90	jsr $9094			jsr 	NSNormalise 				; normalise the result
.9081	68		pla				pla
.9082	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.9083					FloatPrepare:
.9083	20 9f 84	jsr $849f			jsr 	DereferenceTopTwo 			; dereference the top two values
.9086	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9089	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.908c	29 10		and #$10			and 	#NSBIsString
.908e	d0 01		bne $9091			bne 	_FDType
.9090	60		rts				rts
.9091					_FDType:
.9091	4c 24 91	jmp $9124			jmp 	TypeError
.9094					NSNormalise:
.9094	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9097	29 80		and #$80			and 	#$80
.9099	09 08		ora #$08			ora 	#NSTFloat
.909b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.909e	20 1d 88	jsr $881d			jsr 	NSMIsZero 					; if zero exit
.90a1	d0 09		bne $90ac			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.90a3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.90a6	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.90a9	a9 00		lda #$00			lda 	#0 							; set Z flag
.90ab	60		rts				rts
.90ac					_NSNormaliseOptimise:
.90ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.90af	d0 22		bne $90d3			bne 	_NSNormaliseLoop
.90b1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.90b4	30 1d		bmi $90d3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.90b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90b9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90bc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90bf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90c5	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.90c8	bd 28 06	lda $0628,x			lda 	NSExponent,x
.90cb	38		sec				sec
.90cc	e9 08		sbc #$08			sbc 	#8
.90ce	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90d1	80 d9		bra $90ac			bra 	_NSNormaliseOptimise
.90d3					_NSNormaliseLoop:
.90d3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.90d6	70 08		bvs $90e0			bvs 	_NSNExit 					; exit if so with Z flag clear
.90d8	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; shift mantissa left
.90db	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.90de	80 f3		bra $90d3			bra 	_NSNormaliseLoop
.90e0					_NSNExit:
.90e0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.90e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.849f					DereferenceTopTwo:
.849f	e8		inx				inx
.84a0	20 a4 84	jsr $84a4			jsr 	Dereference 				; deref x+1
.84a3	ca		dex				dex  								; falls through to deref x
.84a4					Dereference:
.84a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.84a7	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.84a9	f0 57		beq $8502			beq 	_DRFExit 					; not a reference
.84ab	5a		phy				phy
.84ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84af	85 36		sta $36				sta 	zTemp0
.84b1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84b4	85 37		sta $37				sta 	zTemp0+1
.84b6	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84b9	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84bb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84be	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84c1	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84c3	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84c5	f0 0f		beq $84d6			beq 	_DRFDereferenceTwo
.84c7	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84c9	f0 39		beq $8504			beq 	_DRFFull
.84cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84ce	29 03		and #$03			and 	#3
.84d0	f0 32		beq $8504			beq 	_DRFFull 					; the whole word
.84d2	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84d4	f0 07		beq $84dd			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84d6					_DRFDereferenceTwo:
.84d6	a0 01		ldy #$01			ldy 	#1
.84d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.84da	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84dd					_DRFClear23:
.84dd	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84e0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84e3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84e6	29 18		and #$18			and 	#NSBTypeMask
.84e8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84eb	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84ed	d0 12		bne $8501			bne 	_DRFNotString
.84ef	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84f2	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84f5	d0 0a		bne $8501			bne 	_DRFNotString
.84f7	a9 03		lda #$03			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84f9	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84fc	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.84fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8501					_DRFNotString
.8501	7a		ply				ply 								; restore Y and exit
.8502					_DRFExit:
.8502	60		rts				rts
.8503					_DRFNullString:
>8503	00						.byte 	0
.8504					_DRFFull:
.8504	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8506	b1 36		lda ($36),y			lda 	(zTemp0),y
.8508	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.850b	c8		iny				iny
.850c	b1 36		lda ($36),y			lda 	(zTemp0),y
.850e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8511	c8		iny				iny
.8512	b1 36		lda ($36),y			lda 	(zTemp0),y
.8514	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8517	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.851a	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.851d	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.851f	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8522	f0 06		beq $852a			beq 	_DRFNoExponent
.8524	c8		iny				iny 								; if not, read the exponent as well.
.8525	b1 36		lda ($36),y			lda 	(zTemp0),y
.8527	9d 28 06	sta $0628,x			sta 	NSExponent,x
.852a					_DRFNoExponent:
.852a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.852d	10 0d		bpl $853c			bpl 	_DRFExit2 					; if not, then exit.
.852f	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8531	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8534	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8537	09 80		ora #$80			ora 	#NSBIsNegative
.8539	9d 00 06	sta $0600,x			sta 	NSStatus,x
.853c					_DRFExit2:
.853c	7a		ply				ply
.853d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.853e					EncodeNumberStart:
.853e	38		sec				sec
.853f	80 01		bra $8542			bra 	EncodeNumberContinue+1
.8541					EncodeNumberContinue:
.8541	18		clc				clc
.8542	08		php				php 								; save reset.
.8543	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8545	f0 12		beq $8559			beq 	_ENIsOkay
.8547	c9 30		cmp #$30			cmp 	#"0"
.8549	90 04		bcc $854f			bcc 	_ENBadNumber
.854b	c9 3a		cmp #$3a			cmp 	#"9"+1
.854d	90 0a		bcc $8559			bcc 	_ENIsOkay
.854f					_ENBadNumber:
.854f	28		plp				plp 								; throw saved reset
.8550	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8553	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8555	f0 73		beq $85ca			beq 	_ENConstructFinal
.8557					_ENFail:
.8557	18		clc				clc 								; not allowed
.8558	60		rts				rts
.8559					_ENIsOkay:
.8559	28		plp				plp 								; are we restarting
.855a	90 0c		bcc $8568			bcc 	_ENNoRestart
.855c					_ENStartEncode:
.855c	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.855e	20 ef 87	jsr $87ef			jsr 	NSMSetByte
.8561	a9 01		lda #$01			lda 	#ESTA_Low
.8563					_ENExitChange:
.8563	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8566	38		sec				sec
.8567	60		rts				rts
.8568					_ENNoRestart:
.8568	48		pha				pha 								; save on stack.
.8569	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.856c	c9 01		cmp #$01			cmp 	#ESTA_Low
.856e	f0 09		beq $8579			beq  	_ESTALowState
.8570	c9 02		cmp #$02			cmp 	#ESTA_High
.8572	f0 27		beq $859b			beq 	_ESTAHighState
.8574	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8576	f0 39		beq $85b1			beq 	_ESTADecimalState
>8578	db						.byte 	$DB 						; causes a break in the emulator
.8579					_ESTALowState:
.8579	68		pla				pla 								; get value back
.857a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.857c	f0 27		beq $85a5			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.857e	29 0f		and #$0f			and 	#15 						; make digit
.8580	85 36		sta $36				sta 	zTemp0 						; save it.
.8582	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8585	0a		asl a				asl 	a
.8586	0a		asl a				asl 	a
.8587	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.858a	0a		asl a				asl 	a
.858b	65 36		adc $36				adc 	zTemp0
.858d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8590	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8592	90 05		bcc $8599			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8594	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8596	8d 05 07	sta $0705			sta 	EncodeState
.8599					_ESTANoSwitch:
.8599	38		sec				sec
.859a	60		rts				rts
.859b					_ESTAHighState:
.859b	68		pla				pla 								; get value back
.859c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.859e	f0 05		beq $85a5			beq 	_ESTASwitchFloat
.85a0	20 04 86	jsr $8604			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.85a3	38		sec				sec
.85a4	60		rts				rts
.85a5					_ESTASwitchFloat:
.85a5	9c 06 07	stz $0706			stz 	DecimalCount
.85a8	e8		inx				inx 								; zero the decimal additive.
.85a9	20 ed 87	jsr $87ed			jsr 	NSMSetZero
.85ac	ca		dex				dex
.85ad	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85af	80 b2		bra $8563			bra 	_ENExitChange
.85b1					_ESTADecimalState:
.85b1	68		pla				pla 								; digit.
.85b2	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85b4	f0 a1		beq $8557			beq 	_ENFail
.85b6	e8		inx				inx 								; put digit into fractional part of X+1
.85b7	20 04 86	jsr $8604			jsr 	ESTAShiftDigitIntoMantissa
.85ba	ca		dex				dex
.85bb	ee 06 07	inc $0706			inc 	DecimalCount 				; bump the count of decimals
.85be	ad 06 07	lda $0706			lda 	DecimalCount
.85c1	c9 0b		cmp #$0b			cmp 	#11
.85c3	f0 02		beq $85c7			beq 	_ESTADSFail
.85c5	38		sec				sec
.85c6	60		rts				rts
.85c7					_ESTADSFail:
.85c7	4c 1f 91	jmp $911f			jmp 	RangeError
.85ca					_ENConstructFinal:
.85ca	ad 06 07	lda $0706			lda 	DecimalCount 				; get decimal count
.85cd	f0 33		beq $8602			beq 	_ENCFExit 					; no decimals
.85cf	5a		phy				phy
.85d0	0a		asl a				asl 	a 							; x 4 and CLC
.85d1	0a		asl a				asl 	a
.85d2	6d 06 07	adc $0706			adc 	DecimalCount
.85d5	a8		tay				tay
.85d6	b9 de 90	lda $90de,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85d9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85dc	b9 df 90	lda $90df,y			lda 	DecimalScalarTable-5+1,y
.85df	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85e2	b9 e0 90	lda $90e0,y			lda 	DecimalScalarTable-5+2,y
.85e5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85e8	b9 e1 90	lda $90e1,y			lda 	DecimalScalarTable-5+3,y
.85eb	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85ee	b9 e2 90	lda $90e2,y			lda 	DecimalScalarTable-5+4,y
.85f1	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85f4	a9 08		lda #$08			lda 	#NSTFloat
.85f6	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85f9	7a		ply				ply
.85fa	e8		inx				inx 								; multiply decimal const by decimal scalar
.85fb	20 5d 90	jsr $905d			jsr 	FloatMultiply
.85fe	ca		dex				dex
.85ff	20 7c 8f	jsr $8f7c			jsr 	FloatAdd 					; add to integer part.
.8602					_ENCFExit:
.8602	18		clc				clc 								; reject the digit.
.8603	60		rts				rts
.8604					ESTAShiftDigitIntoMantissa:
.8604	29 0f		and #$0f			and 	#15 						; save digit
.8606	48		pha				pha
.8607	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.860a	48		pha				pha
.860b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.860e	48		pha				pha
.860f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8612	48		pha				pha
.8613	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8616	48		pha				pha
.8617	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 2
.861a	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 4
.861d	18		clc				clc 								; pop mantissa and add
.861e	68		pla				pla
.861f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8622	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8625	68		pla				pla
.8626	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8629	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.862c	68		pla				pla
.862d	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8630	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8633	68		pla				pla
.8634	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8637	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.863a	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 10
.863d	68		pla				pla 								; add digit
.863e	18		clc				clc
.863f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8642	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8645	90 0d		bcc $8654			bcc 	_ESTASDExit
.8647	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.864a	d0 08		bne $8654			bne 	_ESTASDExit
.864c	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.864f	d0 03		bne $8654			bne 	_ESTASDExit
.8651	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8654					_ESTASDExit:
.8654	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8655					EvaluateTerm:
.8655	b1 30		lda ($30),y			lda 	(codePtr),y
.8657	30 18		bmi $8671			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8659	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.865b	b0 6e		bcs $86cb			bcs 	_ETVariable
.865d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.865f	90 6e		bcc $86cf			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8661	c9 3a		cmp #$3a			cmp 	#'9'+1
.8663	b0 6a		bcs $86cf			bcs 	_ETPuncUnary
.8665	20 3e 85	jsr $853e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8668					_ETNumber:
.8668	c8		iny				iny 								; keep encoding until we have the numbers
.8669	b1 30		lda ($30),y			lda 	(codePtr),y
.866b	20 41 85	jsr $8541			jsr 	EncodeNumberContinue
.866e	b0 f8		bcs $8668			bcs 	_ETNumber 					; go back if accepted.
.8670	60		rts				rts
.8671					_ETCheckUnary:
.8671	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8673	f0 40		beq $86b5			beq 	_ETString
.8675	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8677	f0 11		beq $868a			beq 	_ETHexConstant
.8679	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.867b	90 0a		bcc $8687			bcc 	_ETSyntaxError
.867d	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.867f	b0 06		bcs $8687			bcs 	_ETSyntaxError
.8681	da		phx				phx 								; push X on the stack
.8682	0a		asl a				asl 	a 							; put vector x 2 into X
.8683	aa		tax				tax
.8684	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8687					_ETSyntaxError:
.8687	4c 1a 91	jmp $911a			jmp 	SyntaxError
.868a					_ETHexConstant:
.868a	c8		iny				iny 								; skip #
.868b	c8		iny				iny 								; skip count
.868c	20 ed 87	jsr $87ed			jsr 	NSMSetZero 					; clear result
.868f					_ETHLoop:
.868f	b1 30		lda ($30),y			lda 	(codePtr),y
.8691	c8		iny				iny 								; and consume
.8692	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8694	f0 1e		beq $86b4			beq 	_ETHExit
.8696	48		pha				pha 								; save on stack.
.8697	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 2
.869a	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 4
.869d	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 8
.86a0	20 02 88	jsr $8802			jsr 	NSMShiftLeft 				; x 16
.86a3	68		pla				pla 								; ASCII
.86a4	c9 41		cmp #$41			cmp 	#'A'
.86a6	90 02		bcc $86aa			bcc 	_ETHNotChar
.86a8	e9 07		sbc #$07			sbc 	#7
.86aa					_ETHNotChar:
.86aa	29 0f		and #$0f			and 	#15 						; digit now
.86ac	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b2	80 db		bra $868f			bra 	_ETHLoop 					; go round.
.86b4					_ETHExit:
.86b4	60		rts				rts
.86b5					_ETString:
.86b5	c8		iny				iny 								; look at length
.86b6	b1 30		lda ($30),y			lda 	(codePtr),y
.86b8	48		pha				pha
.86b9	c8		iny				iny 								; first character
.86ba	20 66 88	jsr $8866			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86bd	68		pla				pla 								; restore count and save
.86be	85 36		sta $36				sta 	zTemp0
.86c0	98		tya				tya 								; add length to Y to skip it.
.86c1	18		clc				clc
.86c2	65 36		adc $36				adc 	zTemp0
.86c4	a8		tay				tay
.86c5	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86c7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86ca	60		rts				rts
.86cb					_ETVariable:
>86cb	db						.byte 	$DB 						; causes a break in the emulator
.86cc	4c ff ff	jmp $ffff			jmp 	$FFFF
.86cf					_ETPuncUnary:
.86cf	c8		iny				iny 								; consume the unary character
.86d0	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86d2	f0 31		beq $8705			beq 	_ETUnaryNegate
.86d4	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86d6	f0 3d		beq $8715			beq 	_ETDereference
.86d8	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86da	f0 58		beq $8734			beq 	_ETParenthesis
.86dc	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86de	f0 43		beq $8723			beq 	_ETStringReference
.86e0	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86e2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86e4	f0 06		beq $86ec			beq 	_ETIndirection
.86e6	e6 36		inc $36				inc 	zTemp0
.86e8	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.86ea	d0 9b		bne $8687			bne 	_ETSyntaxError
.86ec					_ETIndirection:
.86ec	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.86ee	1a		inc a				inc 	a
.86ef	48		pha				pha
.86f0	20 55 86	jsr $8655			jsr 	EvaluateTerm				; evaluate the term
.86f3	20 a4 84	jsr $84a4			jsr 	Dereference 				; dereference it.
.86f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86f9	d0 07		bne $8702			bne 	_ETTypeMismatch
.86fb	68		pla				pla 								; indirection 1-2
.86fc	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.86fe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8701	60		rts				rts
.8702					_ETTypeMismatch:
.8702	4c 24 91	jmp $9124			jmp 	TypeError
.8705					_ETUnaryNegate:
.8705	20 55 86	jsr $8655			jsr 	EvaluateTerm				; evaluate the term
.8708	20 a4 84	jsr $84a4			jsr 	Dereference 				; dereference it.
.870b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.870e	29 10		and #$10			and 	#NSTString
.8710	d0 f0		bne $8702			bne 	_ETTypeMismatch
.8712	4c 99 87	jmp $8799			jmp 	NSMNegate  					; just toggles the sign bit.
.8715					_ETDereference:
.8715	20 55 86	jsr $8655			jsr 	EvaluateTerm				; evaluate the term
.8718	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.871b	29 20		and #$20			and 	#NSBIsReference
.871d	f0 e3		beq $8702			beq 	_ETTypeMismatch
.871f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8722	60		rts				rts
.8723					_ETStringReference:
.8723	20 55 86	jsr $8655			jsr 	EvaluateTerm				; evaluate the term
.8726	20 a4 84	jsr $84a4			jsr 	Dereference 				; dereference it.
.8729	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.872c	d0 d4		bne $8702			bne 	_ETTypeMismatch
.872e	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8730	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8733	60		rts				rts
.8734					_ETParenthesis:
.8734	20 62 84	jsr $8462			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8737	20 0f 8d	jsr $8d0f			jsr 	CheckRightBracket 			; check for )
.873a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.873b					EvaluateValue:
.873b	48		pha				pha
.873c	20 60 84	jsr $8460			jsr		EvaluateExpressionAt0 		; expression
.873f	20 a4 84	jsr $84a4			jsr 	Dereference					; derefernce it
.8742	68		pla				pla
.8743	60		rts				rts
.8744					EvaluateNumber:
.8744	20 3b 87	jsr $873b			jsr 	EvaluateValue 				; get a value
.8747	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.874a	29 10		and #$10			and 	#NSBIsString
.874c	d0 16		bne $8764			bne 	HelperTypeError
.874e	60		rts				rts
.874f					EvaluateString:
.874f	20 3b 87	jsr $873b			jsr 	EvaluateValue 				; get a value
.8752	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8755	29 10		and #$10			and 	#NSBIsString
.8757	f0 0b		beq $8764			beq 	HelperTypeError
.8759					CopyAddressToTemp0:
.8759	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.875c	85 36		sta $36				sta 	zTemp0
.875e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8761	85 37		sta $37				sta 	zTemp0+1
.8763	60		rts				rts
.8764					HelperTypeError:
.8764	4c 24 91	jmp $9124			jmp 	TypeError
.8767					EvaluateInteger:
.8767	20 44 87	jsr $8744			jsr 	EvaluateNumber
.876a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.876d	d0 0a		bne $8779			bne 	HelperValueError 			; if not, it's a float.
.876f	60		rts				rts
.8770					EvaluateUnsignedInteger:
.8770	20 67 87	jsr $8767			jsr 	EvaluateInteger 			; check integer is +ve
.8773	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8776	30 01		bmi $8779			bmi 	HelperValueError
.8778	60		rts				rts
.8779					HelperValueError:
.8779	4c 29 91	jmp $9129			jmp 	ArgumentError
.877c					Evaluate16BitInteger:
.877c	20 70 87	jsr $8770			jsr	 	EvaluateUnsignedInteger		; get integer
.877f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8782	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8785	d0 f2		bne $8779			bne 	HelperValueError
.8787	60		rts				rts
.8788					Evaluate8BitInteger:
.8788	20 70 87	jsr $8770			jsr	 	EvaluateUnsignedInteger 	; get an integer
.878b	d0 ec		bne $8779			bne 	HelperValueError
.878d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8790	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8793	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8796	d0 e1		bne $8779			bne 	HelperValueError
.8798	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8799					NSMNegate:
.8799	bd 00 06	lda $0600,x			lda 	NSStatus,x
.879c	49 80		eor #$80			eor 	#NSBIsNegative
.879e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87a1	60		rts				rts
.87a2					NSMNegateMantissa:
.87a2	38		sec				sec
.87a3	a9 00		lda #$00			lda 	#0
.87a5	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.87a8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87ab	a9 00		lda #$00			lda 	#0
.87ad	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.87b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b3	a9 00		lda #$00			lda 	#0
.87b5	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.87b8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87bb	a9 00		lda #$00			lda 	#0
.87bd	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.87c0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87c3	60		rts				rts
.87c4					NSMShiftUpTwo:
.87c4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.87c7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.87ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87cd	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.87d0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.87d3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.87d6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.87d9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.87dc	bd 28 06	lda $0628,x			lda 	NSExponent,x
.87df	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.87e2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87e5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.87e8	60		rts				rts
.87e9					NSMSetZeroMantissaOnly:
.87e9	a9 00		lda #$00			lda 	#0
.87eb	80 08		bra $87f5			bra 	NSMSetMantissa
.87ed					NSMSetZero:
.87ed	a9 00		lda #$00			lda 	#0
.87ef					NSMSetByte:
.87ef	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.87f2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.87f5					NSMSetMantissa:
.87f5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.87f8	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.87fb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.87fe	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8801	60		rts				rts
.8802					NSMShiftLeft:
.8802	18		clc				clc
.8803					NSMRotateLeft:
.8803	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8806	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8809	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.880c	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.880f	60		rts				rts
.8810					NSMShiftRight:
.8810	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8813	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8816	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8819	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.881c	60		rts				rts
.881d					NSMIsZero:
.881d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8820	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8823	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8826	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8829	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.90e3					DecimalScalarTable:
>90e3	66 66 66 66				.dword $66666666 ; 0.1
>90e7	de					.byte $de
>90e8	1f 85 eb 51				.dword $51eb851f ; 0.01
>90ec	db					.byte $db
>90ed	4c 37 89 41				.dword $4189374c ; 0.001
>90f1	d8					.byte $d8
>90f2	ac 8b db 68				.dword $68db8bac ; 0.0001
>90f6	d4					.byte $d4
>90f7	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>90fb	d1					.byte $d1
>90fc	83 de 1b 43				.dword $431bde83 ; 1e-06
>9100	ce					.byte $ce
>9101	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9105	ca					.byte $ca
>9106	89 3b e6 55				.dword $55e63b89 ; 1e-08
>910a	c7					.byte $c7
>910b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>910f	c4					.byte $c4
>9110	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9114	c0					.byte $c0
>9115	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9119	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.911a					SyntaxError:
.911a	a9 02		lda #$02		lda	#2
.911c	4c b9 81	jmp $81b9		jmp	ErrorHandler
.911f					RangeError:
.911f	a9 04		lda #$04		lda	#4
.9121	4c b9 81	jmp $81b9		jmp	ErrorHandler
.9124					TypeError:
.9124	a9 05		lda #$05		lda	#5
.9126	4c b9 81	jmp $81b9		jmp	ErrorHandler
.9129					ArgumentError:
.9129	a9 07		lda #$07		lda	#7
.912b	4c b9 81	jmp $81b9		jmp	ErrorHandler
.912e					NotDoneError:
.912e	a9 0c		lda #$0c		lda	#12
.9130	4c b9 81	jmp $81b9		jmp	ErrorHandler
.9133					ErrorText:
>9133	42 72 65 61 6b 00			.text	"Break",0
>9139	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9141	72 72 6f 72 00
>9146	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>914e	20 62 79 20 7a 65 72 6f 00
>9157	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>915f	61 6e 67 65 00
>9164	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>916c	6d 61 74 63 68 00
>9172	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>917a	65 6d 6f 72 79 00
>9180	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9188	61 72 67 75 6d 65 6e 74 00
>9191	53 74 6f 70 00				.text	"Stop",0
>9196	53 74 72 69 6e 67 20 74			.text	"String too long",0
>919e	6f 6f 20 6c 6f 6e 67 00
>91a6	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>91ae	6e 20 66 61 69 6c 65 64 00
>91b7	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>91bf	61 74 61 00
>91c3	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>91cb	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.91d1					MemoryPeek:
.91d1	b2 36		lda ($36)			lda 	(zTemp0)
.91d3	60		rts				rts
.91d4					MemoryPoke:
.91d4	92 36		sta ($36)			sta 	(zTemp0)
.91d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.91d7					EXTPrintCharacter:
.91d7	48		pha				pha
.91d8	da		phx				phx
.91d9	5a		phy				phy
.91da	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.91dd	7a		ply				ply
.91de	fa		plx				plx
.91df	68		pla				pla
.91e0	60		rts				rts
.91e1					EXTInputSingleCharacter:
.91e1	da		phx				phx
.91e2	5a		phy				phy
.91e3					_EISCWait:
.91e3	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.91e6	c9 00		cmp #$00			cmp 	#0
.91e8	f0 f9		beq $91e3			beq 	_EISCWait
.91ea	7a		ply				ply
.91eb	fa		plx				plx
.91ec	60		rts				rts
.91ed					EXTInputLine:
.91ed	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.91ef					_ILLoop:
.91ef	da		phx				phx 								; read character in
.91f0	20 cf ff	jsr $ffcf			jsr 	$FFCF
.91f3	fa		plx				plx
.91f4	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.91f6	f0 12		beq $920a			beq 	_ILBackspace
.91f8	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.91fa	f0 15		beq $9211			beq 	_ILExit
.91fc	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.91fe	90 ef		bcc $91ef			bcc 	_ILLoop
.9200	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9202	f0 eb		beq $91ef			beq 	_ILLoop
.9204	9d 07 08	sta $0807,x			sta 	lineBuffer,x 				; save it
.9207	e8		inx				inx
.9208	80 e5		bra $91ef			bra 	_ILLoop
.920a					_ILBackspace:
.920a	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.920c	f0 e1		beq $91ef			beq 	_ILLoop
.920e	ca		dex				dex 								; back one.
.920f	80 de		bra $91ef			bra 	_ILLoop
.9211					_ILExit:
.9211	20 d7 91	jsr $91d7			jsr 	EXTPrintCharacter
.9214	9e 07 08	stz $0807,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9217	60		rts				rts
.9218					EXTBreakCheck:
.9218	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.882a					MemoryNew:
.882a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.882c	85 30		sta $30				sta 	codePtr
.882e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8830	85 31		sta $31				sta 	codePtr+1
.8832	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8834	92 30		sta ($30)			sta 	(codePtr)
.8836	60		rts				rts
.8837					MemoryAppend:
.8837	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8839	85 30		sta $30				sta 	codePtr
.883b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.883d	85 31		sta $31				sta 	codePtr+1
.883f					_MAFindEnd:
.883f	b2 30		lda ($30)			lda 	(codePtr)
.8841	f0 0d		beq $8850			beq 	_MAFoundEnd
.8843	18		clc				clc
.8844	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8846	65 30		adc $30				adc 	codePtr
.8848	85 30		sta $30				sta 	codePtr
.884a	90 02		bcc $884e			bcc 	_CREExit
.884c	e6 31		inc $31				inc 	codePtr+1
.884e					_CREExit:
.884e	80 ef		bra $883f			bra 	_MAFindEnd
.8850					_MAFoundEnd:
.8850	ac 07 07	ldy $0707			ldy 	tokenOffset 				; bytes to copy
.8853	c0 04		cpy #$04			cpy 	#4 							; blank line
.8855	f0 0e		beq $8865			beq 	_MANoLine
.8857	a9 00		lda #$00			lda 	#0 							; end of program
.8859	91 30		sta ($30),y			sta 	(codePtr),y
.885b					_MACopy:
.885b	88		dey				dey
.885c	b9 07 07	lda $0707,y			lda 	tokenOffset,y
.885f	91 30		sta ($30),y			sta 	(codePtr),y
.8861	c0 00		cpy #$00			cpy 	#0
.8863	d0 f6		bne $885b			bne 	_MACopy
.8865					_MANoLine:
.8865	60		rts				rts
.8866					MemoryInline:
.8866	98		tya				tya 								; put address into stack,x
.8867	18		clc				clc
.8868	65 30		adc $30				adc 	codePtr
.886a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.886d	a5 31		lda $31				lda 	codePtr+1
.886f	69 00		adc #$00			adc 	#0
.8871	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8874	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8877	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.887a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.887b					VariableOpen:
.887b	60		rts				rts
.887c					VariableClose:
.887c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.887d					BackloadProgram:
.887d	a2 ff		ldx #$ff			ldx 	#$FF
.887f	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8882	20 a6 88	jsr $88a6			jsr 	BLReadByte
.8885	30 1e		bmi $88a5			bmi 	_BPExit
.8887					_BPCopy:
.8887	e8		inx				inx  								; copy byte in
.8888	9d 07 08	sta $0807,x			sta 	lineBuffer,x
.888b	9e 08 08	stz $0808,x			stz 	lineBuffer+1,x
.888e	20 a6 88	jsr $88a6			jsr 	BLReadByte 					; read next byte
.8891	30 0a		bmi $889d			bmi 	_BPEndLine 					; -ve = EOL
.8893	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8895	d0 02		bne $8899			bne 	_BPNotTab
.8897	a9 20		lda #$20			lda 	#' '
.8899					_BPNotTab:
.8899	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.889b	b0 ea		bcs $8887			bcs 	_BPCopy
.889d					_BPEndLine:
.889d	20 8a 8a	jsr $8a8a			jsr 	TokeniseLine 				; tokenise the line.
.88a0	20 37 88	jsr $8837			jsr 	MemoryAppend 				; append to current program
.88a3	80 d8		bra $887d			bra 	BackloadProgram
.88a5					_BPExit:
.88a5	60		rts				rts
.88a6					BLReadByte:
.88a6					_BLLoad:
.88a6	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.88a9	ee a7 88	inc $88a7			inc 	_BLLoad+1
.88ac	d0 03		bne $88b1			bne 	_BLNoCarry
.88ae	ee a8 88	inc $88a8			inc 	_BLLoad+2
.88b1					_BLNoCarry:
.88b1	c9 00		cmp #$00			cmp 	#0
.88b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.88b4					TokeniseSearchTable:
.88b4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.88b6	85 36		sta $36				sta 	zTemp0
.88b8	a0 00		ldy #$00			ldy 	#0
.88ba	a9 80		lda #$80			lda 	#$80 						; token #
.88bc	85 38		sta $38				sta 	zTemp1
.88be					_TSTLoop:
.88be	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.88c0	30 49		bmi $890b			bmi 	_TSTFail 					; -ve = end of table
.88c2	f0 2e		beq $88f2			beq 	_TSTNext 					; zero, check next it's a dummy
.88c4	c8		iny				iny 								; get the hash
.88c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c7	88		dey				dey
.88c8	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.88cb	d0 25		bne $88f2			bne 	_TSTNext
.88cd	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.88d0	38		sec				sec
.88d1	ed 00 07	sbc $0700			sbc 	identStart
.88d4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.88d6	d0 1a		bne $88f2			bne 	_TSTNext
.88d8	5a		phy				phy 								; save Y , we might fail
.88d9	c8		iny				iny 								; point to text
.88da	c8		iny				iny
.88db	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.88de					_TSTCompareName:
.88de	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; compare text.
.88e1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.88e3	d0 0c		bne $88f1			bne 	_TSTNextPullY 				; fail, pullY and do next
.88e5	e8		inx				inx
.88e6	c8		iny				iny
.88e7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.88ea	d0 f2		bne $88de			bne 	_TSTCompareName
.88ec	7a		ply				ply 								; throw Y
.88ed	a5 38		lda $38				lda 	zTemp1 						; get token #
.88ef	38		sec				sec 								; return with CS = passed.
.88f0	60		rts				rts
.88f1					_TSTNextPullY:
.88f1	7a		ply				ply 								; restore current, fall through.
.88f2					_TSTNext:
.88f2	e6 38		inc $38				inc 	zTemp1 						; token counter
.88f4	98		tya				tya
.88f5	18		clc				clc
.88f6	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.88f8	1a		inc a				inc 	a 							; +1
.88f9	1a		inc a				inc 	a 							; +2
.88fa	a8		tay				tay
.88fb	10 c1		bpl $88be			bpl 	_TSTLoop 					; if Y < $80 loop back
.88fd	98		tya				tya 								; add Y to zTemp0 and reset Y
.88fe	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8900	18		clc				clc  								; but have tables > 255 bytes
.8901	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8903	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8905	90 b7		bcc $88be			bcc 	_TSTLoop
.8907	e6 37		inc $37				inc 	zTemp0+1
.8909	80 b3		bra $88be			bra 	_TSTLoop
.890b					_TSTFail:
.890b	18		clc				clc
.890c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.890d					KeywordSet0:
>890d	00 65					.text	0,$65,""               ; $80 !0:EOF
>890f	00 58					.text	0,$58,""               ; $81 !1:SH1
>8911	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8913	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8919	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8921	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8927	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>892e	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8934	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>893b	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>8942	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>894a	45 24 28
>894d	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>8955	45 24 28
>8958	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8c HEX$(
>895f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>8965	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>896d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>8975	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>897b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>8982	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $92 NOT
>8987	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $93 PAGE
>898d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>8995	28
>8996	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>899c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>89a2	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>89a8	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>89af	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>89b5	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>89bb	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>89c0	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>89c4	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>89ca	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>89d2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>89d9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>89e0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>89e8	43
>89e9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>89ef	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a3 UNTIL
>89f6	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a4 WEND
>89fc	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>8a02	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>8a07	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>8a0d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>8a12	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>8a19	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>8a1f	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>8a24	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>8a2b	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>8a31	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>8a36	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>8a3e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>8a44	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>8a48	ff					.text	$FF
.8a49					KeywordSet1:
>8a49	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a4b	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a4d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a4f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8a57	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8a5e	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8a63	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8a69	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8a6e	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8a76	45
>8a77	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8a7c	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8a82	ff					.text	$FF
.8a83					KeywordSet2:
>8a83	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a85	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a87	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a89	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8a8a					TokeniseLine:
.8a8a	20 12 8c	jsr $8c12			jsr 	FixLineBufferCase 			; fix line case
.8a8d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8a8f	8d 07 07	sta $0707			sta 	tokenOffset
.8a92	9c 08 07	stz $0708			stz 	tokenLineNumber
.8a95	9c 09 07	stz $0709			stz 	tokenLineNumber+1
.8a98	a2 ff		ldx #$ff			ldx 	#$FF
.8a9a					_TKFindFirst:
.8a9a	e8		inx				inx
.8a9b	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8a9e	f0 79		beq $8b19			beq 	_TKExit
.8aa0	c9 20		cmp #$20			cmp 	#' '
.8aa2	90 f6		bcc $8a9a			bcc 	_TKFindFirst
.8aa4	c9 30		cmp #$30			cmp 	#'0'
.8aa6	90 07		bcc $8aaf			bcc 	_TKNoLineNumber
.8aa8	c9 3a		cmp #$3a			cmp 	#'9'+1
.8aaa	b0 03		bcs $8aaf			bcs 	_TKNoLineNumber
.8aac	20 3c 8c	jsr $8c3c			jsr 	TokeniseExtractLineNumber
.8aaf					_TKNoLineNumber:
.8aaf					_TKTokeniseLoop:
.8aaf	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8ab2	f0 65		beq $8b19			beq 	_TKExit
.8ab4	e8		inx				inx
.8ab5	c9 20		cmp #$20			cmp 	#' '
.8ab7	f0 f6		beq $8aaf			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8ab9	ca		dex				dex 								; undo last get, A contains character, X is position.
.8aba	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8abc	f0 61		beq $8b1f			beq 	_TKTokeniseIdentifier
.8abe	c9 41		cmp #$41			cmp 	#'A'
.8ac0	90 04		bcc $8ac6			bcc 	_TKTokenisePunctuation
.8ac2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8ac4	90 59		bcc $8b1f			bcc 	_TKTokeniseIdentifier
.8ac6					_TKTokenisePunctuation:
.8ac6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8ac8	f0 27		beq $8af1			beq 	_TKString
.8aca	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8acc	f0 28		beq $8af6			beq 	_TKHexConstant
.8ace	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8ad0	f0 29		beq $8afb			beq 	_TKCheckDouble
.8ad2	c9 3e		cmp #$3e			cmp 	#'>'
.8ad4	f0 25		beq $8afb			beq 	_TKCheckDouble
.8ad6					_TKStandardPunctuation:
.8ad6	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get it back.
.8ad9	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8adb	90 0e		bcc $8aeb			bcc 	_TKNoShift
.8add	48		pha				pha 								; save
.8ade	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8ae0	85 36		sta $36				sta 	zTemp0
.8ae2	68		pla				pla
.8ae3	29 20		and #$20			and 	#32 						; bit 5
.8ae5	4a		lsr a				lsr 	a 							; shift into bit 3
.8ae6	4a		lsr a				lsr 	a
.8ae7	05 36		ora $36				ora 	zTemp0
.8ae9	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8aeb					_TKNoShift:
.8aeb	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte 			; write the punctuation character
.8aee	e8		inx				inx 								; consume the character
.8aef	80 be		bra $8aaf			bra 	_TKTokeniseLoop 			; and loop round again.
.8af1					_TKString:
.8af1	20 a1 8b	jsr $8ba1			jsr 	TokeniseString
.8af4	80 b9		bra $8aaf			bra 	_TKTokeniseLoop
.8af6					_TKHexConstant:
.8af6	20 dc 8b	jsr $8bdc			jsr 	TokeniseHexConstant
.8af9	80 b4		bra $8aaf			bra 	_TKTokeniseLoop
.8afb					_TKCheckDouble:
.8afb	bd 08 08	lda $0808,x			lda 	lineBuffer+1,x 				; get next character
.8afe	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8b00	90 d4		bcc $8ad6			bcc 	_TKStandardPunctuation
.8b02	c9 3f		cmp #$3f			cmp 	#'>'+1
.8b04	b0 d0		bcs $8ad6			bcs 	_TKStandardPunctuation
.8b06	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8b09	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8b0b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8b0c	7d 08 08	adc $0808,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8b0f	38		sec				sec
.8b10	e9 3c		sbc #$3c			sbc 	#'<'
.8b12	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8b15	e8		inx				inx 								; consume both
.8b16	e8		inx				inx
.8b17	80 96		bra $8aaf			bra 	_TKTokeniseLoop
.8b19	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8b1b	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8b1e	60		rts				rts
.8b1f					_TKTokeniseIdentifier:
.8b1f	8e 00 07	stx $0700			stx 	identStart 					; save start
.8b22	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8b25					_TKCheckLoop:
.8b25	e8		inx				inx 								; look at next, we know first is identifier.
.8b26	bd 07 08	lda $0807,x			lda  	lineBuffer,x
.8b29	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8b2b	f0 f8		beq $8b25			beq 	_TKCheckLoop
.8b2d	c9 30		cmp #$30			cmp	 	#"0"
.8b2f	90 0c		bcc $8b3d			bcc 	_TKEndIdentifier
.8b31	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b33	90 f0		bcc $8b25			bcc 	_TKCheckLoop
.8b35	c9 41		cmp #$41			cmp	 	#"A"
.8b37	90 04		bcc $8b3d			bcc 	_TKEndIdentifier
.8b39	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b3b	90 e8		bcc $8b25			bcc 	_TKCheckLoop
.8b3d					_TKEndIdentifier:
.8b3d	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8b40	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8b42	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8b44	f0 06		beq $8b4c			beq 	_TKHasTypeCharacter
.8b46	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8b48	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8b4a	d0 07		bne $8b53			bne 	_TKNoTypeCharacter
.8b4c					_TKHasTypeCharacter:
.8b4c	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8b4f	e8		inx				inx 								; read next
.8b50	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8b53					_TKNoTypeCharacter:
.8b53	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8b55	d0 09		bne $8b60			bne 	_TKNoArray
.8b57	e8		inx				inx 								; skip the (
.8b58	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8b5b	09 04		ora #$04			ora 	#$04
.8b5d	8d 04 07	sta $0704			sta 	identTypeByte
.8b60					_TKNoArray:
.8b60	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8b63	20 fd 8b	jsr $8bfd			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8b66	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8b68	a9 0d		lda #$0d			lda 	#(KeywordSet0) & $FF
.8b6a	20 b4 88	jsr $88b4			jsr 	TokeniseSearchTable
.8b6d	a2 00		ldx #$00			ldx 	#0
.8b6f	b0 1f		bcs $8b90			bcs 	_TKFoundToken
.8b71	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8b73	a9 49		lda #$49			lda 	#(KeywordSet1) & $FF
.8b75	20 b4 88	jsr $88b4			jsr 	TokeniseSearchTable
.8b78	a2 81		ldx #$81			ldx 	#$81
.8b7a	b0 14		bcs $8b90			bcs 	_TKFoundToken
.8b7c	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8b7e	a9 49		lda #$49			lda 	#(KeywordSet1) & $FF
.8b80	20 b4 88	jsr $88b4			jsr 	TokeniseSearchTable
.8b83	a2 82		ldx #$82			ldx 	#$82
.8b85	b0 09		bcs $8b90			bcs 	_TKFoundToken
.8b87	20 8d 8c	jsr $8c8d			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8b8a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b8d	4c af 8a	jmp $8aaf			jmp 	_TKTokeniseLoop 			; and go round again.
.8b90					_TKFoundToken:
.8b90	48		pha				pha 								; save token
.8b91	8a		txa				txa 								; shift in X, is there one ?
.8b92	f0 03		beq $8b97			beq 	_TKNoTShift
.8b94	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte 			; if so, write it out
.8b97					_TKNoTShift:
.8b97	68		pla				pla 								; restore and write token
.8b98	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8b9b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b9e	4c af 8a	jmp $8aaf			jmp 	_TKTokeniseLoop 			; and go round again.
.8ba1					TokeniseString:
.8ba1	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8ba3	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8ba6	e8		inx				inx									; start of quoted string.
.8ba7	da		phx				phx 								; push start of string on top
.8ba8	ca		dex				dex
.8ba9					_TSFindEnd:
.8ba9	e8		inx				inx
.8baa	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character
.8bad	f0 04		beq $8bb3			beq 	_TSEndOfString
.8baf	c9 22		cmp #$22			cmp 	#'"'
.8bb1	d0 f6		bne $8ba9			bne 	_TSFindEnd
.8bb3					_TSEndOfString:
.8bb3	7a		ply				ply  								; so now Y is first character, X is character after end.
.8bb4	48		pha				pha 								; save terminating character
.8bb5	20 bd 8b	jsr $8bbd			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8bb8	68		pla				pla 								; terminating character
.8bb9	f0 01		beq $8bbc			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8bbb	e8		inx				inx
.8bbc					_TSNotQuote:
.8bbc	60		rts				rts
.8bbd					TOWriteBlockXY:
.8bbd	86 36		stx $36				stx 	zTemp0 						; write end character
.8bbf	98		tya				tya
.8bc0	49 ff		eor #$ff			eor 	#$FF
.8bc2	38		sec				sec
.8bc3	65 36		adc $36				adc 	zTemp0
.8bc5	1a		inc a				inc 	a 							; one extra for NULL
.8bc6	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8bc9					_TOBlockLoop:
.8bc9	c4 36		cpy $36				cpy 	zTemp0
.8bcb	f0 09		beq $8bd6			beq 	_TOBlockExit
.8bcd	b9 07 08	lda $0807,y			lda 	lineBuffer,y
.8bd0	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8bd3	c8		iny				iny
.8bd4	80 f3		bra $8bc9			bra 	_TOBlockLoop
.8bd6					_TOBlockExit:
.8bd6	a9 00		lda #$00			lda 	#0
.8bd8	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8bdb	60		rts				rts
.8bdc					TokeniseHexConstant:
.8bdc	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8bde	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8be1	e8		inx				inx									; start of quoted string.
.8be2	da		phx				phx 								; push start of constant on top
.8be3	ca		dex				dex
.8be4					_THFindLoop:
.8be4	e8		inx				inx
.8be5	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8be8	c9 30		cmp #$30			cmp 	#"0"
.8bea	90 0c		bcc $8bf8			bcc 	_THFoundEnd
.8bec	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bee	90 f4		bcc $8be4			bcc 	_THFindLoop
.8bf0	c9 41		cmp #$41			cmp 	#"A"
.8bf2	90 04		bcc $8bf8			bcc 	_THFoundEnd
.8bf4	c9 47		cmp #$47			cmp 	#"F"+1
.8bf6	90 ec		bcc $8be4			bcc 	_THFindLoop
.8bf8					_THFoundEnd:
.8bf8	7a		ply				ply 								; restore start
.8bf9	20 bd 8b	jsr $8bbd			jsr 	TOWriteBlockXY 				; output the block
.8bfc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8bfd					TokeniseCalculateHash:
.8bfd	da		phx				phx
.8bfe	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8c01	a9 00		lda #$00			lda 	#0
.8c03					_TCHLoop:
.8c03	18		clc				clc
.8c04	7d 07 08	adc $0807,x			adc 	lineBuffer,x
.8c07	e8		inx				inx
.8c08	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8c0b	d0 f6		bne $8c03			bne 	_TCHLoop
.8c0d	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8c10	fa		plx				plx
.8c11	60		rts				rts
.8c12					FixLineBufferCase:
.8c12	a2 00		ldx #$00			ldx 	#0
.8c14					_FLBCLoop:
.8c14	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next character
.8c17	f0 22		beq $8c3b			beq 	_FLBCExit 					; end of string.
.8c19	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8c1b	f0 11		beq $8c2e			beq 	_FLBCInQuotes
.8c1d	e8		inx				inx
.8c1e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8c20	90 f2		bcc $8c14			bcc 	_FLBCLoop
.8c22	c9 7b		cmp #$7b			cmp 	#'z'+1
.8c24	b0 ee		bcs $8c14			bcs 	_FLBCLoop
.8c26	38		sec				sec 								; make U/C
.8c27	e9 20		sbc #$20			sbc 	#32
.8c29	9d 06 08	sta $0806,x			sta	 	lineBuffer-1,x 				; write back
.8c2c	80 e6		bra $8c14			bra 	_FLBCLoop
.8c2e					_FLBCInQuotes:
.8c2e	e8		inx				inx 								; advance
.8c2f	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next
.8c32	f0 07		beq $8c3b			beq 	_FLBCExit 					; exit on EOS
.8c34	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8c36	d0 f6		bne $8c2e			bne 	_FLBCInQuotes
.8c38	e8		inx				inx 								; skip over it
.8c39	80 d9		bra $8c14			bra 	_FLBCLoop
.8c3b					_FLBCExit:
.8c3b	60		rts				rts
.8c3c					TokeniseExtractLineNumber:
.8c3c	ad 09 07	lda $0709			lda 	tokenLineNumber+1 			; push current value on stack
.8c3f	48		pha				pha
.8c40	ad 08 07	lda $0708			lda 	tokenLineNumber
.8c43	48		pha				pha
.8c44	20 7a 8c	jsr $8c7a			jsr 	_TELNTimes2 				; line # x 4
.8c47	20 7a 8c	jsr $8c7a			jsr 	_TELNTimes2 				; line # x 2
.8c4a	18		clc				clc 								; add stacked value
.8c4b	68		pla				pla
.8c4c	6d 08 07	adc $0708			adc 	tokenLineNumber
.8c4f	8d 08 07	sta $0708			sta 	tokenLineNumber
.8c52	68		pla				pla
.8c53	6d 09 07	adc $0709			adc 	tokenLineNumber+1
.8c56	8d 09 07	sta $0709			sta 	tokenLineNumber+1 			; line # x 5
.8c59	20 7a 8c	jsr $8c7a			jsr 	_TELNTimes2 				; line # x 10
.8c5c	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get and consume character
.8c5f	e8		inx				inx
.8c60	29 0f		and #$0f			and 	#15 						; add to line #
.8c62	18		clc				clc
.8c63	6d 08 07	adc $0708			adc 	tokenLineNumber
.8c66	8d 08 07	sta $0708			sta 	tokenLineNumber
.8c69	90 03		bcc $8c6e			bcc 	_TLENNoCarry
.8c6b	ee 09 07	inc $0709			inc 	tokenLineNumber+1
.8c6e					_TLENNoCarry:
.8c6e	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; more digits ?
.8c71	c9 30		cmp #$30			cmp 	#'0'
.8c73	90 04		bcc $8c79			bcc 	_TLENExit
.8c75	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c77	90 c3		bcc $8c3c			bcc 	TokeniseExtractLineNumber
.8c79					_TLENExit:
.8c79	60		rts				rts
.8c7a					_TELNTimes2:
.8c7a	0e 08 07	asl $0708			asl 	tokenLineNumber
.8c7d	2e 09 07	rol $0709			rol 	tokenLineNumber+1
.8c80	60		rts				rts
.8c81					TokeniseWriteByte:
.8c81	da		phx				phx
.8c82	ae 07 07	ldx $0707			ldx 	tokenOffset 				; next slot to write to
.8c85	9d 07 07	sta $0707,x			sta 	tokenOffset,x 				; write byte out
.8c88	ee 07 07	inc $0707			inc 	tokenOffset 				; advance slot.
.8c8b	fa		plx				plx
.8c8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8c8d					CheckCreateVariableRecord:
.8c8d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c8f	85 36		sta $36				sta 	0+zTemp0
.8c91	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c93	85 37		sta $37				sta 	1+zTemp0
.8c95	20 7b 88	jsr $887b			jsr 	VariableOpen 				; make variable space available
.8c98					_CCVSearch:
.8c98	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8c9a	f0 2c		beq $8cc8			beq 	_CCVFail
.8c9c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8c9e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8ca0	cd 03 07	cmp $0703			cmp 	identHash
.8ca3	d0 16		bne $8cbb			bne 	_CCVNext
.8ca5	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8ca7	ae 00 07	ldx $0700			ldx 	identStart
.8caa					_CCVCompare:
.8caa	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8cad	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8caf	e8		inx				inx 								; advance pointers
.8cb0	c8		iny				iny
.8cb1	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8cb2	d0 07		bne $8cbb			bne 	_CCVNext  					; didn't match go to next.
.8cb4	90 f4		bcc $8caa			bcc 	_CCVCompare 				; not finished yet.
.8cb6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8cb9	f0 41		beq $8cfc			beq 	_CCVFound 					; yes, we were successful
.8cbb					_CCVNext:
.8cbb	18		clc				clc
.8cbc	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8cbe	65 36		adc $36				adc 	zTemp0
.8cc0	85 36		sta $36				sta 	zTemp0
.8cc2	90 d4		bcc $8c98			bcc 	_CCVSearch
.8cc4	e6 37		inc $37				inc 	zTemp0+1
.8cc6	80 d0		bra $8c98			bra 	_CCVSearch
.8cc8					_CCVFail:
.8cc8	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8cca	ad 03 07	lda $0703			lda 	identHash
.8ccd	91 36		sta ($36),y			sta 	(zTemp0),y
.8ccf	c8		iny				iny 								; offset 2 is the type byte
.8cd0	ad 04 07	lda $0704			lda 	identTypeByte
.8cd3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd5	c8		iny				iny
.8cd6					_CCVData:
.8cd6	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8cd8	91 36		sta ($36),y			sta 	(zTemp0),y
.8cda	c8		iny				iny
.8cdb	c0 08		cpy #$08			cpy 	#8
.8cdd	90 f7		bcc $8cd6			bcc 	_CCVData
.8cdf	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8ce2					_CCVCopyName:
.8ce2	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8ce5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce7	e8		inx				inx
.8ce8	c8		iny				iny
.8ce9	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8cec	d0 f4		bne $8ce2			bne 	_CCVCopyName
.8cee	98		tya				tya 								; patch offset
.8cef	92 36		sta ($36)			sta 	(zTemp0)
.8cf1	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8cf3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf5	88		dey				dey
.8cf6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8cf8	09 80		ora #$80			ora 	#$80
.8cfa	91 36		sta ($36),y			sta 	(zTemp0),y
.8cfc					_CCVFound:
.8cfc	20 7c 88	jsr $887c			jsr 	VariableClose 				; map out variables, perhaps.
.8cff	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8d01	38		sec				sec
.8d02	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8d04	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8d06	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8d09	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8d0b	20 81 8c	jsr $8c81			jsr 	TokeniseWriteByte
.8d0e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
