
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Nov 17 16:24:37 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 bc a8	jsr $a8bc			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.8014	20 52 88	jsr $8852			jsr 	NewCommand 					; erase current program
.8017	20 fe 82	jsr $82fe			jsr 	BackloadProgram
.801a	4c db 89	jmp $89db			jmp 	CommandRun
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3116."
>8064	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 33 31 31 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8086					AssembleGroup1:
.8086	a9 ff		lda #$ff			lda 	#$FF
.8088	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808b	80 02		bra $808f			bra 	AsmGroup12
.808d					AssembleGroup2:
.808d	a9 00		lda #$00			lda 	#$00
.808f					AsmGroup12:
.808f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8092	68		pla				pla 								; pop the return address to access the information following.
.8093	fa		plx				plx
.8094	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get opcode and save as base
.8097	8d a4 04	sta $04a4			sta 	BaseOpcode
.809a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809d	d0 08		bne $80a7			bne 	_AG12HaveMask
.809f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a1	20 25 81	jsr $8125			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a4	8d a5 04	sta $04a5			sta 	ModeMask
.80a7					_AG12HaveMask:
.80a7	20 60 82	jsr $8260			jsr 	TypeAndCalculateOperand 	; get zero page type
.80aa	da		phx				phx 								; save found address mode
.80ab	20 89 81	jsr $8189			jsr 	AssembleModeX
.80ae	fa		plx				plx  								; restore address mode
.80af	b0 0b		bcs $80bc			bcs 	_AG12Exit
.80b1	20 bd 80	jsr $80bd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b4	20 89 81	jsr $8189			jsr 	AssembleModeX
.80b7	b0 03		bcs $80bc			bcs 	_AG12Exit
.80b9	4c 88 9f	jmp $9f88			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bc					_AG12Exit:
.80bc	60		rts				rts
.80bd					PromoteToAbsolute:
.80bd	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bf	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c1	f0 19		beq $80dc			beq 	_PTADo
.80c3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c7	f0 13		beq $80dc			beq 	_PTADo
.80c9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cb	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cd	f0 0d		beq $80dc			beq 	_PTADo
.80cf	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d3	f0 07		beq $80dc			beq 	_PTADo
.80d5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d9	f0 01		beq $80dc			beq 	_PTADo
.80db	60		rts				rts
.80dc					_PTADo:
.80dc	aa		tax				tax
.80dd	60		rts				rts
.80de					AssembleGroup3:
.80de	68		pla				pla 								; get parameters, which is just the opcode.
.80df	fa		plx				plx
.80e0	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get and output opcode
.80e3	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.80e6	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get a 16 bit operand
.80e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ec	38		sec				sec
.80ed	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f0	48		pha				pha 								; LSB in A
.80f1	ad 10 04	lda $0410			lda 	NSMantissa1
.80f4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f7	aa		tax				tax 								; MSB in X
.80f8	68		pla				pla
.80f9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fa	69 7f		adc #$7f			adc 	#$7F
.80fc	90 01		bcc $80ff			bcc 	_AG3NoCarry
.80fe	e8		inx				inx
.80ff					_AG3NoCarry:
.80ff	38		sec				sec 								; fix back and write out anyways.
.8100	e9 80		sbc #$80			sbc 	#$80
.8102	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.8105	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8107	f0 0a		beq $8113			beq 	_AG3Exit
.8109	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810c	29 01		and #$01			and 	#1
.810e	f0 03		beq $8113			beq 	_AG3Exit
.8110	4c 8d 9f	jmp $9f8d			jmp 	RangeError 					; no, branch is out of range
.8113					_AG3Exit:
.8113	60		rts				rts
.8114					AssembleGroup4:
.8114	68		pla				pla 								; pop address
.8115	fa		plx				plx
.8116	20 1d 81	jsr $811d			jsr 	AccessParameters 			; access and get first
.8119	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 			; output it.
.811c	60		rts				rts
.811d					AccessParameters:
.811d	8d a1 04	sta $04a1			sta 	ParamStart
.8120	8e a2 04	stx $04a2			stx 	ParamStart+1
.8123	a9 01		lda #$01			lda 	#1
.8125					GetParameter:
.8125	5a		phy				phy
.8126	a8		tay				tay
.8127	ad a1 04	lda $04a1			lda 	ParamStart
.812a	85 36		sta $36				sta 	zTemp0
.812c	ad a2 04	lda $04a2			lda 	ParamStart+1
.812f	85 37		sta $37				sta 	zTemp0+1
.8131	b1 36		lda ($36),y			lda 	(zTemp0),y
.8133	7a		ply				ply
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8135					AssemblerWriteByte:
.8135	48		pha			pha
.8136	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8139	29 02		and #$02		and 	#2
.813b	f0 1b		beq $8158		beq 	_AWBNoPrint
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8140	20 73 81	jsr $8173		jsr 	PrintHex
.8143	ad 9e 04	lda $049e		lda		AssemblerAddress
.8146	20 73 81	jsr $8173		jsr 	PrintHex
.8149	a9 20		lda #$20		lda 	#' '
.814b	20 2e a7	jsr $a72e		jsr 	EXTPrintCharacter
.814e	68		pla			pla 									; print byte
.814f	48		pha			pha
.8150	20 73 81	jsr $8173		jsr 	PrintHex
.8153	a9 0d		lda #$0d		lda 	#13
.8155	20 2e a7	jsr $a72e		jsr 	EXTPrintCharacter
.8158					_AWBNoPrint:
.8158	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815b	85 36		sta $36			sta 	zTemp0
.815d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8160	f0 0e		beq $8170		beq 	_AWBRange
.8162	85 37		sta $37			sta 	zTemp0+1
.8164	68		pla			pla 									; write byte out
.8165	92 36		sta ($36)		sta 	(zTemp0)
.8167	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816a	d0 03		bne $816f		bne 	_AWBNoCarry
.816c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816f					_AWBNoCarry:
.816f	60		rts			rts
.8170					_AWBRange:
.8170	4c 8d 9f	jmp $9f8d		jmp 	RangeError
.8173					PrintHex:
.8173	48		pha				pha
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	20 7c 81	jsr $817c			jsr 	_PrintNibble
.817b	68		pla				pla
.817c					_PrintNibble:
.817c	29 0f		and #$0f			and 	#15
.817e	c9 0a		cmp #$0a			cmp 	#10
.8180	90 02		bcc $8184			bcc 	_NoShift
.8182	69 06		adc #$06			adc 	#6
.8184					_NoShift:
.8184	69 30		adc #$30			adc 	#48
.8186	4c 2e a7	jmp $a72e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8189					AssembleModeX:
.8189	5a		phy				phy
.818a	ad a3 04	lda $04a3			lda 	IsGroup1
.818d	f0 17		beq $81a6			beq 	_AMXGroup2
.818f	8a		txa				txa 							; is it in group # 1
.8190	29 40		and #$40			and 	#AM_ISG1
.8192	f0 50		beq $81e4			beq 	_AMXFail 				; no, give up.
.8194	8a		txa				txa 							; get back.
.8195	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8197	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8199	d0 22		bne $81bd			bne 	_AMXHaveInfo
.819b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819e	c9 81		cmp #$81			cmp 	#$81
.81a0	f0 42		beq $81e4			beq 	_AMXFail
.81a2	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a4	80 17		bra $81bd			bra 	_AMXHaveInfo 			; odd design decision there.
.81a6					_AMXGroup2:
.81a6	8a		txa				txa 							; is it in group 2 ?
.81a7	29 20		and #$20			and 	#AM_ISG2
.81a9	f0 39		beq $81e4			beq 	_AMXFail 				; no, give up.
.81ab	8a		txa				txa 							; get the offset into Y
.81ac	29 1f		and #$1f			and 	#$1F
.81ae	4a		lsr a				lsr 	a 						; make it 0-7.
.81af	4a		lsr a				lsr  	a
.81b0	a8		tay				tay
.81b1	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b4					_AMXCheckOkay:
.81b4	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b5	88		dey				dey
.81b6	10 fc		bpl $81b4			bpl 	_AMXCheckOkay
.81b8	90 2a		bcc $81e4			bcc 	_AMXFail 				; not allowed.
.81ba	8a		txa				txa  							; get mask back
.81bb	29 1f		and #$1f			and 	#$1F
.81bd					_AMXHaveInfo:
.81bd	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bf	10 05		bpl $81c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c4	d0 1e		bne $81e4			bne 	_AMXFail
.81c6					_AMXAnySize:
.81c6	18		clc				clc 							; add offset to the base opcode
.81c7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81ca					_AMXOutputCode:
.81ca	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cd	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cf	f0 10		beq $81e1			beq 	_AMXExit
.81d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d4	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81d7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d9	30 06		bmi $81e1			bmi 	_AMXExit
.81db	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81de	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81e1					_AMXExit:
.81e1	7a		ply				ply
.81e2	38		sec				sec
.81e3	60		rts				rts
.81e4					_AMXFail:
.81e4	a0 00		ldy #$00			ldy 	#0
.81e6					_AMXCheckOddities:
.81e6	8a		txa				txa
.81e7	d9 0f 82	cmp $820f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ea	d0 16		bne $8202			bne 	_AMXCONext
.81ec	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ef	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f2	d0 0e		bne $8202			bne 	_AMXCONext
.81f4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f6	10 05		bpl $81fd			bpl 	_AMXCONotZero
.81f8	ad 10 04	lda $0410			lda 	NSMantissa1
.81fb	d0 05		bne $8202			bne 	_AMXCONext
.81fd					_AMXCONotZero:
.81fd	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8200	80 c8		bra $81ca			bra 	_AMXOutputCode 			; and assemble it
.8202					_AMXCONext:
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; end of table
.8208	d0 dc		bne $81e6			bne 	_AMXCheckOddities
.820a					_AMXCOFail:
.820a	7a		ply				ply
.820b	18		clc				clc
.820c	60		rts				rts
.820d					ExtraOpcode:
>820d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8210	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8213	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8216	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8219	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8222	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8225	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8228	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822c					LabelHere:
.822c	c8		iny				iny 								; skip .
.822d	a2 00		ldx #$00			ldx 	#0 							; get a term
.822f	20 c4 97	jsr $97c4			jsr 	EvaluateTerm 				; get a term
.8232	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8235	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8237	d0 24		bne $825d			bne 	_ALType
.8239	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823c	85 36		sta $36				sta 	zTemp0
.823e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8241	85 37		sta $37				sta 	zTemp0+1
.8243	5a		phy				phy 								; copy address in.
.8244	a0 01		ldy #$01			ldy 	#1
.8246	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8249	92 36		sta ($36)			sta 	(zTemp0)
.824b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824e	91 36		sta ($36),y			sta 	(zTemp0),y
.8250	c8		iny				iny
.8251	a9 00		lda #$00			lda 	#0
.8253	91 36		sta ($36),y			sta 	(zTemp0),y
.8255	c8		iny				iny
.8256	91 36		sta ($36),y			sta 	(zTemp0),y
.8258	c8		iny				iny
.8259	91 36		sta ($36),y			sta 	(zTemp0),y
.825b	7a		ply				ply
.825c	60		rts				rts
.825d					_ALType:
.825d	4c 92 9f	jmp $9f92			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8260					TypeAndCalculateOperand:
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8264	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8266	f0 5b		beq $82c3			beq 	_TACOExit
.8268	c9 80		cmp #$80			cmp 	#KWC_EOL
.826a	f0 57		beq $82c3			beq 	_TACOExit
.826c	c8		iny				iny
.826d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8271	f0 51		beq $82c4			beq 	CalculateOperand
.8273	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8275	f0 1f		beq $8296			beq 	_TACOIndirect
.8277	88		dey				dey 								; undo get of first character
.8278	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get operand
.827b	b1 30		lda ($30),y			lda 	(codePtr),y
.827d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8281	d0 40		bne $82c3			bne 	_TACOExit
.8283	c8		iny				iny
.8284	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8287	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8289	c9 58		cmp #$58			cmp 	#'X'
.828b	f0 36		beq $82c3			beq 	_TACOExit
.828d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828f	c9 59		cmp #$59			cmp 	#'Y'
.8291	f0 30		beq $82c3			beq 	_TACOExit
.8293					_TACOSyntax:
.8293	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.8296					_TACOIndirect:
.8296	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get the operand
.8299	b1 30		lda ($30),y			lda 	(codePtr),y
.829b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829d	f0 17		beq $82b6			beq 	_TACOIndX
.829f	20 22 8d	jsr $8d22			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a2	b1 30		lda ($30),y			lda 	(codePtr),y
.82a4	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a8	d0 19		bne $82c3			bne 	_TACOExit
.82aa	c8		iny				iny
.82ab	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ae	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b0	d0 e1		bne $8293			bne 	_TACOSyntax
.82b2	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b4	80 0d		bra $82c3			bra 	_TACOExit
.82b6					_TACOIndX:
.82b6	c8		iny				iny
.82b7	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ba	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bc	d0 d5		bne $8293			bne 	_TACOSyntax
.82be	20 22 8d	jsr $8d22			jsr 	CheckRightBracket			; check )
.82c1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c3					_TACOExit:
.82c3	60		rts				rts
.82c4					CalculateOperand:
.82c4	48		pha				pha
.82c5	da		phx				phx
.82c6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c8	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.82cb	fa		plx				plx
.82cc	68		pla				pla
.82cd	60		rts				rts
.82ce					TACOCheckXY:
.82ce	b1 30		lda ($30),y			lda 	(codePtr),y
.82d0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d2	c9 40		cmp #$40			cmp 	#$40
.82d4	d0 21		bne $82f7			bne 	_TCXYFail
.82d6	b1 30		lda ($30),y			lda 	(codePtr),y
.82d8	18		clc				clc
.82d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82db	85 37		sta $37				sta 	zTemp0+1
.82dd	c8		iny				iny
.82de	b1 30		lda ($30),y			lda 	(codePtr),y
.82e0	c8		iny				iny
.82e1	85 36		sta $36				sta 	zTemp0
.82e3	5a		phy				phy 								; save position
.82e4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e8	d0 0c		bne $82f6			bne 	_TCXYPopFail
.82ea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f0	f0 08		beq $82fa			beq 	_TCXYFound
.82f2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f4	f0 04		beq $82fa			beq 	_TCXYFound
.82f6					_TCXYPopFail:
.82f6	7a		ply				ply
.82f7					_TCXYFail:
.82f7	a9 00		lda #$00			lda 	#0
.82f9	60		rts				rts
.82fa					_TCXYFound:
.82fa	7a		ply				ply 								; restore position
.82fb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fe					BackloadProgram:
.82fe	a2 ff		ldx #$ff			ldx 	#$FF
.8300	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.8303	20 2d 83	jsr $832d			jsr 	BLReadByte
.8306	30 1e		bmi $8326			bmi 	_BPExit
.8308					_BPCopy:
.8308	e8		inx				inx  								; copy byte in
.8309	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.830c	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830f	20 2d 83	jsr $832d			jsr 	BLReadByte 					; read next byte
.8312	30 0a		bmi $831e			bmi 	_BPEndLine 					; -ve = EOL
.8314	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8316	d0 02		bne $831a			bne 	_BPNotTab
.8318	a9 20		lda #$20			lda 	#' '
.831a					_BPNotTab:
.831a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831c	b0 ea		bcs $8308			bcs 	_BPCopy
.831e					_BPEndLine:
.831e	20 39 b5	jsr $b539			jsr 	TokeniseLine 				; tokenise the line.
.8321	20 3b 83	jsr $833b			jsr 	EditProgramCode
.8324	80 d8		bra $82fe			bra 	BackloadProgram
.8326					_BPExit:
.8326	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.8329	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear variables etc.
.832c	60		rts				rts
.832d					BLReadByte:
.832d					_BLLoad:
.832d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8330	ee 2e 83	inc $832e			inc 	_BLLoad+1
.8333	d0 03		bne $8338			bne 	_BLNoCarry
.8335	ee 2f 83	inc $832f			inc 	_BLLoad+2
.8338					_BLNoCarry:
.8338	c9 00		cmp #$00			cmp 	#0
.833a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.833b					EditProgramCode:
.833b	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.833e	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.8341	20 0d a2	jsr $a20d			jsr 	MemorySearch
.8344	90 05		bcc $834b			bcc 	_EPCNoDelete 				; reached the end don't delete
.8346	d0 03		bne $834b			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8348	20 2e a1	jsr $a12e			jsr 	MemoryDeleteLine 			; delete the line
.834b					_EPCNoDelete:
.834b	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.834e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8350	f0 0d		beq $835f			beq 	_EPCNoInsert
.8352	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8355	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8358	20 0d a2	jsr $a20d			jsr 	MemorySearch
.835b	18		clc				clc 								; insert at this point.
.835c	20 65 a1	jsr $a165			jsr 	MemoryInsertLine 			; insert the line
.835f					_EPCNoInsert:
.835f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8360					WarmStart:
.8360	a2 ff		ldx #$ff			ldx 	#$FF
.8362	9a		txs				txs
.8363	20 34 a9	jsr $a934			jsr 	EXTInputLine 				; get line to lineBuffer
.8366	20 39 b5	jsr $b539			jsr 	TokeniseLine 				; tokenise the line
.8369	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.836c	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.836f	d0 17		bne $8388			bne 	_WSEditCode 				; if so,edit code.
.8371	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8374	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8376	85 30		sta $30				sta 	codePtr
.8378	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.837a	85 31		sta $31				sta 	codePtr+1
.837c	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.837f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8381	f0 dd		beq $8360			beq 	WarmStart
.8383	20 ed 89	jsr $89ed			jsr 	RUNCodePointerLine 			; execute that line.
.8386	80 d8		bra $8360			bra 	WarmStart
.8388					_WSEditCode:
.8388	20 3b 83	jsr $833b			jsr 	EditProgramCode
.838b	20 f9 83	jsr $83f9			jsr 	ClearCommand
.838e	80 d0		bra $8360			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8390					AssembleCommand:
.8390	a2 00		ldx #$00			ldx 	#0
.8392	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger 		; start address
.8395	ad 08 04	lda $0408			lda 	NSMantissa0
.8398	8d 9e 04	sta $049e			sta 	AssemblerAddress
.839b	ad 10 04	lda $0410			lda 	NSMantissa1
.839e	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.83a1	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.83a4	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; options
.83a7	ad 08 04	lda $0408			lda 	NSMantissa0
.83aa	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ad	60		rts				rts
.83ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83af					AssertCommand:
.83af	a2 00		ldx #$00			ldx 	#0
.83b1	20 4a 9d	jsr $9d4a			jsr 	EvaluateInteger 			; the assert test
.83b4	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; exit if result is non zero.
.83b7	d0 05		bne $83be			bne 	_ACExit
.83b9	a9 0a		lda #$0a		lda	#10
.83bb	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.83be					_ACExit:
.83be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83bf					CallCommand:
.83bf	a2 00		ldx #$00			ldx 	#0
.83c1	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.83c4					_CCClear
.83c4	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c5	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.83c8	e0 04		cpx #$04			cpx 	#4
.83ca	d0 f8		bne $83c4			bne 	_CCClear
.83cc	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83ce					_CCCParam:
.83ce	b1 30		lda ($30),y			lda 	(codePtr),y
.83d0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d2	d0 09		bne $83dd			bne 	_CCCRun6502
.83d4	c8		iny				iny 								; skip comma
.83d5	e8		inx				inx	 								; next level
.83d6	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d9	e0 03		cpx #$03			cpx 	#3
.83db	90 f1		bcc $83ce			bcc 	_CCCParam 					; done all 3 ?
.83dd					_CCCRun6502:
.83dd	5a		phy				phy 								; save position
.83de	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83e1	85 37		sta $37				sta 	zTemp0+1
.83e3	ad 08 04	lda $0408			lda 	NSMantissa0
.83e6	85 36		sta $36				sta 	zTemp0
.83e8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83eb	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ee	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83f1	20 f6 83	jsr $83f6			jsr 	_CCCZTemp0 					; call zTemp0
.83f4	7a		ply				ply 								; restore position and exit
.83f5	60		rts				rts
.83f6					_CCCZTemp0:
.83f6	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f9					ClearCommand:
.83f9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83fb	85 36		sta $36				sta 	0+zTemp0
.83fd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83ff	85 37		sta $37				sta 	1+zTemp0
.8401					_ClearZeroLoop:
.8401	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8403	f0 24		beq $8429			beq 	_ClearZeroEnd
.8405	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8407	a9 00		lda #$00			lda 	#0
.8409					_ClearOneVariable:
.8409	91 36		sta ($36),y			sta 	(zTemp0),y
.840b	c8		iny				iny
.840c	c0 08		cpy #$08			cpy 	#8
.840e	d0 f9		bne $8409			bne 	_ClearOneVariable
.8410	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8412	b1 36		lda ($36),y			lda 	(zTemp0),y
.8414	c9 18		cmp #$18			cmp 	#NSTProcedure
.8416	d0 04		bne $841c			bne 	_ClearNotProcedure
.8418	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.841a	91 36		sta ($36),y			sta 	(zTemp0),y
.841c					_ClearNotProcedure:
.841c	18		clc				clc 								; go to the next variable
.841d	b2 36		lda ($36)			lda 	(zTemp0)
.841f	65 36		adc $36				adc 	zTemp0
.8421	85 36		sta $36				sta 	zTemp0
.8423	90 dc		bcc $8401			bcc 	_ClearZeroLoop
.8425	e6 37		inc $37				inc 	zTemp0+1
.8427	80 d8		bra $8401			bra 	_ClearZeroLoop
.8429					_ClearZeroEnd:
.8429	18		clc				clc
.842a	a5 36		lda $36				lda 	zTemp0
.842c	69 01		adc #$01			adc 	#1
.842e	8d 8c 04	sta $048c			sta 	lowMemPtr
.8431	a5 37		lda $37				lda 	zTemp0+1
.8433	69 00		adc #$00			adc 	#0
.8435	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8438	20 c7 a2	jsr $a2c7			jsr 	StackReset
.843b	20 31 a3	jsr $a331			jsr 	StringSystemInitialise
.843e	20 2b 8c	jsr $8c2b			jsr 	ProcedureScan
.8441	20 a9 89	jsr $89a9			jsr 	Command_Restore
.8444	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8447	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.844a	9c a0 04	stz $04a0			stz 	AssemblerControl
.844d	20 c7 99	jsr $99c7			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8450	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8451					ClearScreen:
.8451	5a		phy				phy
.8452	a9 0c		lda #$0c			lda 	#12
.8454	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8457	7a		ply				ply
.8458	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8459					Command_Data:
.8459	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.845b	a2 80		ldx #$80			ldx 	#KWC_EOL
.845d	20 7d 8c	jsr $8c7d			jsr 	ScanForward
.8460	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8461					DimCommand:
.8461	b1 30		lda ($30),y			lda 	(codePtr),y
.8463	29 c0		and #$c0			and 	#$C0
.8465	c9 40		cmp #$40			cmp 	#$40
.8467	d0 7a		bne $84e3			bne 	_DCSyntax
.8469	b1 30		lda ($30),y			lda 	(codePtr),y
.846b	18		clc				clc
.846c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846e	85 3f		sta $3f				sta 	zaTemp+1
.8470	c8		iny				iny
.8471	b1 30		lda ($30),y			lda 	(codePtr),y
.8473	c8		iny				iny
.8474	85 3e		sta $3e				sta 	zaTemp
.8476	5a		phy				phy
.8477	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8479	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.847b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.847d	c9 18		cmp #$18			cmp 	#NSTProcedure
.847f	f0 62		beq $84e3			beq 	_DCSyntax
.8481	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8483	29 04		and #$04			and 	#NSBIsArray
.8485	f0 64		beq $84eb			beq 	_DCType
.8487	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8489	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848b	d0 59		bne $84e6			bne 	_DCRedefine
.848d	7a		ply				ply
.848e	20 ee 84	jsr $84ee			jsr 	_DCGetSize 				; get array size, check it.
.8491	5a		phy				phy
.8492	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8494	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8496	7a		ply				ply 							; is there a second (e.g. ,x)
.8497	b1 30		lda ($30),y			lda 	(codePtr),y
.8499	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.849b	d0 0a		bne $84a7			bne 	_DCOneDimension
.849d	c8		iny				iny 							; skip comma
.849e	20 ee 84	jsr $84ee			jsr 	_DCGetSize 				; get 2nd array size
.84a1	5a		phy				phy
.84a2	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a6	7a		ply				ply
.84a7					_DCOneDimension:
.84a7	5a		phy				phy 							; save position
.84a8	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84aa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ac	aa		tax				tax
.84ad	c8		iny				iny
.84ae	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b0	e8		inx				inx 							; bump them.
.84b1	1a		inc a				inc 	a
.84b2	20 93 9d	jsr $9d93			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b5	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b7	29 e0		and #$e0			and 	#$E0
.84b9	d0 23		bne $84de			bne 	_DCSize
.84bb	a0 02		ldy #$02			ldy 	#2 						; get base type
.84bd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bf	20 fc 84	jsr $84fc			jsr 	ScaleByBaseType 		; scale by base type
.84c2	a5 36		lda $36				lda 	zTemp0
.84c4	a6 37		ldx $37				ldx 	zTemp0+1
.84c6	20 89 99	jsr $9989			jsr 	AllocateXABytes 		; allocate memory
.84c9	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84cb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cd	c8		iny				iny
.84ce	8a		txa				txa
.84cf	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84d1	7a		ply				ply 							; get position back
.84d2	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 		; check )
.84d5	b1 30		lda ($30),y			lda 	(codePtr),y
.84d7	c8		iny				iny 							; consume in case
.84d8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84da	f0 85		beq $8461			beq 	DimCommand
.84dc	88		dey				dey 							; undo consume
.84dd	60		rts				rts
.84de					_DCSize:
.84de	a9 16		lda #$16		lda	#22
.84e0	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.84e3					_DCSyntax:
.84e3	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.84e6					_DCRedefine:
.84e6	a9 15		lda #$15		lda	#21
.84e8	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.84eb					_DCType:
.84eb	4c 92 9f	jmp $9f92			jmp 	TypeError
.84ee					_DCGetSize:
.84ee	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84f0	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 	; get array dimension
.84f3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f5	f0 e7		beq $84de			beq 	_DCSize
.84f7	c9 fe		cmp #$fe			cmp 	#254
.84f9	f0 e3		beq $84de			beq 	_DCSize
.84fb	60		rts				rts
.84fc					ScaleByBaseType:
.84fc	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fe	d0 19		bne $8519			bne 	_SBBTString
.8500	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8502	48		pha				pha
.8503	a5 36		lda $36				lda 	zTemp0
.8505	48		pha				pha
.8506	06 36		asl $36				asl 	zTemp0 					; x 2
.8508	26 37		rol $37				rol 	zTemp0+1
.850a	06 36		asl $36				asl 	zTemp0 					; x 4
.850c	26 37		rol $37				rol 	zTemp0+1
.850e	68		pla				pla 							; add stacked value = x 5
.850f	65 36		adc $36				adc 	zTemp0
.8511	85 36		sta $36				sta 	zTemp0
.8513	68		pla				pla
.8514	65 37		adc $37				adc 	zTemp0+1
.8516	85 37		sta $37				sta 	zTemp0+1
.8518	60		rts				rts
.8519					_SBBTString:
.8519	06 36		asl $36				asl 	zTemp0
.851b	26 37		rol $37				rol 	zTemp0+1
.851d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851e					EndCommand:
.851e	4c 60 83	jmp $8360			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8521					ForCommand:
.8521	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8523	20 62 a2	jsr $a262			jsr 	StackOpen
.8526	a2 00		ldx #$00			ldx 	#0
.8528	20 c4 97	jsr $97c4			jsr 	EvaluateTerm
.852b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.852e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8530	d0 49		bne $857b			bne		_FCError
.8532	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8534	20 32 8d	jsr $8d32			jsr 	CheckNextA
.8537	e8		inx				inx
.8538	20 4a 9d	jsr $9d4a			jsr 	EvaluateInteger 			; <from> in +1
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	c8		iny				iny 								; consume it
.853e	48		pha				pha 								; save on stack for later
.853f	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8541	f0 04		beq $8547			beq 	_FCNoSyntax
.8543	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8545	d0 37		bne $857e			bne 	_FCSyntaxError
.8547					_FCNoSyntax:
.8547	e8		inx				inx
.8548	20 4a 9d	jsr $9d4a			jsr 	EvaluateInteger
.854b	20 a6 a2	jsr $a2a6			jsr 	STKSaveCodePosition 		; save loop back position
.854e	68		pla				pla 								; restore DOWNTO or TO
.854f	5a		phy				phy 								; save Y on the stack
.8550	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8552	f0 02		beq $8556			beq 	_FCNotDownTo
.8554	a9 02		lda #$02			lda 	#2
.8556					_FCNotDownTo:
.8556	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8557	a0 10		ldy #$10			ldy 	#16
.8559	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.855b	a0 06		ldy #$06			ldy 	#6
.855d	ad 08 04	lda $0408			lda 	NSMantissa0
.8560	91 34		sta ($34),y			sta 	(basicStack),y
.8562	ad 10 04	lda $0410			lda 	NSMantissa1
.8565	c8		iny				iny
.8566	91 34		sta ($34),y			sta 	(basicStack),y
.8568	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.856a	a2 01		ldx #$01			ldx 	#1
.856c	20 81 85	jsr $8581			jsr 	FCIntegerToStack
.856f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8571	a2 02		ldx #$02			ldx 	#2
.8573	20 81 85	jsr $8581			jsr 	FCIntegerToStack
.8576	20 a1 85	jsr $85a1			jsr 	CopyIndexToReference
.8579	7a		ply				ply 								; restore position
.857a	60		rts				rts
.857b					_FCError:
.857b	4c 92 9f	jmp $9f92			jmp 	TypeError
.857e					_FCSyntaxError:
.857e	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.8581					FCIntegerToStack:
.8581	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8584	10 03		bpl $8589			bpl	 	_FCNotNegative
.8586	20 b3 9d	jsr $9db3			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8589					_FCNotNegative:
.8589	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.858c	91 34		sta ($34),y			sta 	(basicStack),y
.858e	c8		iny				iny
.858f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8592	91 34		sta ($34),y			sta 	(basicStack),y
.8594	c8		iny				iny
.8595	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8598	91 34		sta ($34),y			sta 	(basicStack),y
.859a	c8		iny				iny
.859b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.859e	91 34		sta ($34),y			sta 	(basicStack),y
.85a0	60		rts				rts
.85a1					CopyIndexToReference:
.85a1	5a		phy				phy
.85a2	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85a4	38		sec				sec 								; (because we copy from offset 8)
.85a5	b1 34		lda ($34),y			lda 	(basicStack),y
.85a7	e9 08		sbc #$08			sbc 	#8
.85a9	85 36		sta $36				sta 	zTemp0
.85ab	c8		iny				iny
.85ac	b1 34		lda ($34),y			lda 	(basicStack),y
.85ae	e9 00		sbc #$00			sbc 	#0
.85b0	85 37		sta $37				sta 	zTemp0+1
.85b2	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85b4	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b6	b1 34		lda ($34),y			lda 	(basicStack),y
.85b8	0a		asl a				asl 	a 							; into carry
.85b9	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85bb	90 14		bcc $85d1			bcc 	_CITRNormal
.85bd	38		sec				sec
.85be					_CITRNegative:
.85be	a9 00		lda #$00			lda 	#0
.85c0	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85c2	91 36		sta ($36),y			sta 	(zTemp0),y
.85c4	c8		iny				iny
.85c5	ca		dex				dex
.85c6	d0 f6		bne $85be			bne 	_CITRNegative
.85c8	88		dey				dey 								; look at MSB of mantissa
.85c9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85cb	09 80		ora #$80			ora 	#$80
.85cd	91 36		sta ($36),y			sta 	(zTemp0),y
.85cf	7a		ply				ply
.85d0	60		rts				rts
.85d1					_CITRNormal:
.85d1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85d3	91 36		sta ($36),y			sta 	(zTemp0),y
.85d5	c8		iny				iny
.85d6	ca		dex				dex
.85d7	d0 f8		bne $85d1			bne 	_CITRNormal
.85d9	7a		ply				ply 								; and exit.
.85da	60		rts				rts
.85db					NextCommand:
.85db	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85dd	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85df	20 8e a2	jsr $a28e			jsr 	StackCheckFrame
.85e2	5a		phy				phy
.85e3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e5	b1 34		lda ($34),y			lda 	(basicStack),y
.85e7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e9	30 02		bmi $85ed			bmi 	_NCStepNeg
.85eb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85ed					_NCStepNeg:
.85ed	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ef	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85f1	18		clc				clc
.85f2					_NCBump:
.85f2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85f4	91 34		sta ($34),y			sta 	(basicStack),y
.85f6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f8	c8		iny				iny 								; next byte
.85f9	ca		dex				dex 								; do four times
.85fa	d0 f6		bne $85f2			bne 	_NCBump
.85fc	20 a1 85	jsr $85a1			jsr		CopyIndexToReference		; copy it to the reference variable.
.85ff	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8601	b1 34		lda ($34),y			lda 	(basicStack),y
.8603	0a		asl a				asl 	a 							; sign bit to carry
.8604	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8606	85 38		sta $38				sta 	zTemp1
.8608	90 02		bcc $860c			bcc 	_NCCompRev 					; use if step is +ve
.860a	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.860c					_NCCompRev:
.860c	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.860e	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8610	85 39		sta $39				sta 	zTemp1+1
.8612	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8614	38		sec				sec
.8615					_NCCompare:
.8615	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8617	b1 34		lda ($34),y			lda 	(basicStack),y
.8619	a4 39		ldy $39				ldy 	zTemp1+1
.861b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.861d	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861f	e6 39		inc $39				inc 	zTemp1+1
.8621	ca		dex				dex 								; do it 4 times.
.8622	d0 f1		bne $8615			bne 	_NCCompare
.8624	50 02		bvc $8628			bvc 	_NCNoOverflow 				; convert to signed comparison
.8626	49 80		eor #$80			eor 	#$80
.8628					_NCNoOverflow:
.8628	7a		ply				ply 								; restore Y position
.8629	0a		asl a				asl 	a 							; is bit 7 set.
.862a	90 04		bcc $8630			bcc 	_NCLoopback 				; if no , >= so loop back
.862c	20 80 a2	jsr $a280			jsr 	StackClose 					; exit the loop
.862f	60		rts				rts
.8630					_NCLoopBack:
.8630	20 b7 a2	jsr $a2b7			jsr 	STKLoadCodePosition 		; loop back
.8633	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8634					Command_GOSUB:
.8634	a2 00		ldx #$00			ldx 	#0
.8636	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8639	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.863b	20 62 a2	jsr $a262			jsr 	StackOpen 					; create frame
.863e	20 a6 a2	jsr $a2a6			jsr 	STKSaveCodePosition 		; save current position
.8641	4c 57 86	jmp $8657			jmp 	GotoStackX
.8644					Command_RETURN:
.8644	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8646	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8648	20 8e a2	jsr $a28e			jsr 	StackCheckFrame
.864b	20 b7 a2	jsr $a2b7			jsr 	STKLoadCodePosition 		; restore code position
.864e	20 80 a2	jsr $a280			jsr 	StackClose
.8651	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8652					GotoCommand:
.8652	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8654	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.8657					GotoStackX:
.8657	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.865a	48		pha				pha 								; it is slightly inefficient, just in cases.
.865b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.865e	fa		plx				plx
.865f	20 0d a2	jsr $a20d			jsr 	MemorySearch 				; transfer to line number AX.
.8662	90 05		bcc $8669			bcc 	_GotoError 					; not found, off end.
.8664	d0 03		bne $8669			bne 	_GotoError 					; not found exactly
.8666	4c e6 89	jmp $89e6			jmp 	RunNewLine 					; and go straight to new line code.
.8669					_GotoError:
.8669	a9 0d		lda #$0d		lda	#13
.866b	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.866e					IfCommand:
.866e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8670	20 27 9d	jsr $9d27			jsr 	EvaluateNumber
.8673	b1 30		lda ($30),y			lda 	(codePtr),y
.8675	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8677	d0 0a		bne $8683			bne 	_IFStructured
.8679	c8		iny				iny 								; consume THEN
.867a	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; is it zero
.867d	f0 01		beq $8680			beq 	_IfFail 					; if fail, go to next line
.867f	60		rts				rts 								; if THEN just continue
.8680					_IfFail:
.8680	4c 4b 8a	jmp $8a4b			jmp 	EOLCommand
.8683					_IfStructured:
.8683	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; is it zero
.8686	d0 07		bne $868f			bne 	_IfExit 					; if not, then continue normally.
.8688	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.868a	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.868c	20 7d 8c	jsr $8c7d			jsr 	ScanForward 				; and run from there/
.868f					_IfExit:
.868f	60		rts				rts
.8690					ElseCode:
.8690	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8692	aa		tax				tax 								; so just go to the structure exit
.8693	20 7d 8c	jsr $8c7d			jsr 	ScanForward
.8696	60		rts				rts
.8697					EndIf:
.8697	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8698					LetCommand:
.8698	a2 00		ldx #$00			ldx 	#0
.869a	b1 30		lda ($30),y			lda 	(codePtr),y
.869c	c9 10		cmp #$10			cmp 	#KWD_AT
.869e	d0 16		bne $86b6			bne 	_LCStandard
.86a0	c8		iny				iny 								; skip equal
.86a1	20 c4 97	jsr $97c4			jsr 	EvaluateTerm 				; get a number
.86a4	20 08 96	jsr $9608			jsr 	Dereference 				; dereference it
.86a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86aa	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86ac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86af	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86b1	d0 10		bne $86c3			bne 	_LCMain
.86b3	4c 92 9f	jmp $9f92			jmp 	TypeError 					; was a reference before.
.86b6					_LCStandard:
.86b6	ad d2 92	lda $92d2			lda 	PrecedenceLevel+"*"			; precedence > this
.86b9	20 ec 92	jsr $92ec			jsr 	EvaluateExpressionAtPrecedence
.86bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86bf	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86c1	f0 0e		beq $86d1			beq 	_LetGoProc 					; it's a procedure call.
.86c3					_LCMain:
.86c3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c5	20 32 8d	jsr $8d32			jsr 	CheckNextA
.86c8	e8		inx				inx 								; RHS
.86c9	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue
.86cc	ca		dex				dex
.86cd	20 d4 86	jsr $86d4			jsr 	AssignVariable
.86d0	60		rts				rts
.86d1					_LetGoProc:
.86d1	4c b3 88	jmp $88b3			jmp 	CallProcedure
.86d4					AssignVariable:
.86d4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d7	48		pha				pha 								; save a copy
.86d8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86db	29 10		and #$10			and 	#NSBIsString
.86dd	d0 0b		bne $86ea			bne 	_ASError
.86df	68		pla				pla 								; get back
.86e0	29 10		and #$10			and 	#NSBIsString 				; check type
.86e2	d0 03		bne $86e7			bne 	_ASString
.86e4	4c 30 95	jmp $9530			jmp 	AssignNumber
.86e7					_ASString:
.86e7	4c 9e 95	jmp $959e			jmp 	AssignString
.86ea					_ASError:
.86ea	4c 92 9f	jmp $9f92			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86ed					Command_List:
.86ed	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86f0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86f3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f6	a9 ff		lda #$ff			lda 	#$FF
.86f8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86fb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8700	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8702	f0 1e		beq $8722			beq 	_CLSecond
.8704	20 80 87	jsr $8780			jsr 	CLIsDigit 					; if not digit, list all
.8707	b0 24		bcs $872d			bcs 	_CLStart
.8709	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.870b	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.870e	b1 30		lda ($30),y			lda 	(codePtr),y
.8710	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8712	f0 0e		beq $8722			beq 	_CLSecond 					; if so go get it
.8714	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8717	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.871a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.871d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8720	80 0b		bra $872d			bra 	_CLStart
.8722					_CLSecond:
.8722	c8		iny				iny 								; consume comma
.8723	20 80 87	jsr $8780			jsr 	CLIsDigit 					; digit found
.8726	b0 05		bcs $872d			bcs 	_CLStart 					; if not, continue listing
.8728	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.872a	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.872d					_CLStart
.872d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872f	85 30		sta $30				sta 	codePtr
.8731	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8733	85 31		sta $31				sta 	codePtr+1
.8735					_CLLoop:
.8735	20 ea a8	jsr $a8ea			jsr 	EXTBreakCheck 				; break check
.8738	f0 30		beq $876a			beq 	_CLExit
.873a	b2 30		lda ($30)			lda 	(codePtr)
.873c	f0 2c		beq $876a			beq 	_CLExit
.873e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8740	20 6d 87	jsr $876d			jsr 	CLCompareLineNo
.8743	90 18		bcc $875d			bcc 	_CLNext
.8745	a2 07		ldx #$07			ldx 	#7
.8747	20 6d 87	jsr $876d			jsr 	CLCompareLineNo
.874a	f0 02		beq $874e			beq 	_CLDoThisOne
.874c	b0 0f		bcs $875d			bcs 	_CLNext
.874e					_CLDoThisOne:
.874e	20 1a b3	jsr $b31a			jsr 	ListConvertLine 			; convert line into token Buffer
.8751	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8753	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8755	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.8758	a9 0d		lda #$0d			lda 	#13 						; new line
.875a	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.875d					_CLNext:
.875d	18		clc				clc
.875e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8760	65 30		adc $30				adc 	codePtr
.8762	85 30		sta $30				sta 	codePtr
.8764	90 02		bcc $8768			bcc 	_CREExit
.8766	e6 31		inc $31				inc 	codePtr+1
.8768					_CREExit:
.8768	80 cb		bra $8735			bra 	_CLLoop
.876a					_CLExit:
.876a	4c 60 83	jmp $8360			jmp 	WarmStart
.876d					CLCompareLineNo:
.876d	38		sec				sec
.876e	a0 01		ldy #$01			ldy 	#1
.8770	b1 30		lda ($30),y			lda 	(codePtr),y
.8772	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8775	85 36		sta $36				sta 	zTemp0
.8777	c8		iny				iny
.8778	b1 30		lda ($30),y			lda 	(codePtr),y
.877a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.877d	05 36		ora $36				ora 	zTemp0
.877f	60		rts				rts
.8780					CLIsDigit:
.8780	b1 30		lda ($30),y			lda 	(codePtr),y
.8782	c9 30		cmp #$30			cmp 	#"0"
.8784	90 03		bcc $8789			bcc	 	_CLIDExitFalse
.8786	c9 3a		cmp #$3a			cmp 	#"9"+1
.8788	60		rts				rts
.8789					_CLIDExitFalse:
.8789	38		sec				sec
.878a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.878b					Command_LOCAL:
.878b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.878d	20 99 87	jsr $8799			jsr 	LocaliseNextTerm 			; convert term to a local.
.8790	b1 30		lda ($30),y			lda 	(codePtr),y
.8792	c8		iny				iny
.8793	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8795	f0 f4		beq $878b			beq 	Command_LOCAL
.8797	88		dey				dey 								; unpick pre-get
.8798	60		rts				rts
.8799					LocaliseNextTerm:
.8799	20 c4 97	jsr $97c4			jsr 	EvaluateTerm 				; evaluate the term
.879c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.87a1	f0 61		beq $8804			beq		_LNTError
.87a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a6	85 36		sta $36				sta 	zTemp0
.87a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87ab	85 37		sta $37				sta  	zTemp0+1
.87ad	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87b0	29 10		and #$10			and 	#NSBIsString
.87b2	d0 1e		bne $87d2			bne 	_LNTPushString
.87b4	5a		phy				phy
.87b5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b7					_LNTPushNumLoop:
.87b7	b1 36		lda ($36),y			lda		(zTemp0),y
.87b9	20 40 a2	jsr $a240			jsr 	StackPushByte
.87bc	c8		iny				iny
.87bd	c0 05		cpy #$05			cpy 	#5
.87bf	d0 f6		bne $87b7			bne 	_LNTPushNumLoop
.87c1	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87c3	20 40 a2	jsr $a240			jsr 	StackPushByte
.87c6	a5 37		lda $37				lda 	zTemp0+1
.87c8	20 40 a2	jsr $a240			jsr 	StackPushByte
.87cb	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87cd	20 40 a2	jsr $a240			jsr 	StackPushByte
.87d0	7a		ply				ply
.87d1	60		rts				rts
.87d2					_LNTPushString:
.87d2	5a		phy				phy
.87d3	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d5	85 38		sta $38				sta 	zTemp1
.87d7	a0 01		ldy #$01			ldy 	#1
.87d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.87db	85 39		sta $39				sta 	zTemp1+1
.87dd	a0 00		ldy #$00			ldy 	#0 							; output string
.87df	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87e1	f0 0a		beq $87ed			beq 	_LNTStringOut
.87e3					_LNTPushStrLoop:
.87e3	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e5	f0 06		beq $87ed			beq 	_LNTStringOut
.87e7	20 40 a2	jsr $a240			jsr 	StackPushByte
.87ea	c8		iny				iny
.87eb	80 f6		bra $87e3			bra 	_LNTPushStrLoop
.87ed					_LNTStringOut:
.87ed	98		tya				tya									; output length
.87ee	20 40 a2	jsr $a240			jsr 	StackPushByte
.87f1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f4	20 40 a2	jsr $a240			jsr 	StackPushByte
.87f7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87fa	20 40 a2	jsr $a240			jsr 	StackPushByte
.87fd	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87ff	20 40 a2	jsr $a240			jsr 	StackPushByte
.8802	7a		ply				ply
.8803	60		rts				rts
.8804					_LNTError:
.8804	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.8807					LocalPopValue:
.8807	20 59 a2	jsr $a259			jsr 	StackPopByte
.880a	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.880c	d0 17		bne $8825			bne 	_LPVString
.880e	20 59 a2	jsr $a259			jsr 	StackPopByte 				; address
.8811	85 37		sta $37				sta 	zTemp0+1
.8813	20 59 a2	jsr $a259			jsr 	StackPopByte
.8816	85 36		sta $36				sta 	zTemp0
.8818	5a		phy				phy
.8819	a0 04		ldy #$04			ldy 	#4 							; copy back
.881b					_LPVNumberCopy:
.881b	20 59 a2	jsr $a259			jsr 	StackPopByte
.881e	91 36		sta ($36),y			sta 	(zTemp0),y
.8820	88		dey				dey
.8821	10 f8		bpl $881b			bpl 	_LPVNumberCopy
.8823	7a		ply				ply 								; and complete
.8824	60		rts				rts
.8825					_LPVString:
.8825	20 59 a2	jsr $a259			jsr 	StackPopByte 				; address of record => zTemp0
.8828	85 37		sta $37				sta 	zTemp0+1
.882a	20 59 a2	jsr $a259			jsr 	StackPopByte
.882d	85 36		sta $36				sta 	zTemp0
.882f	5a		phy				phy
.8830	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8832	85 38		sta $38				sta 	zTemp1
.8834	a0 01		ldy #$01			ldy 	#1
.8836	b1 36		lda ($36),y			lda 	(zTemp0),y
.8838	85 39		sta $39				sta 	zTemp1+1
.883a	20 59 a2	jsr $a259			jsr 	StackPopByte 				; # to get => y
.883d	a8		tay				tay
.883e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8840	f0 0e		beq $8850			beq 	_LPVStringCopied
.8842	a9 00		lda #$00			lda 	#0 							; NULL on end
.8844	91 38		sta ($38),y			sta 	(zTemp1),y
.8846					_LPVStringCopy:
.8846	88		dey				dey
.8847	30 07		bmi $8850			bmi 	_LPVStringCopied
.8849	20 59 a2	jsr $a259			jsr 	StackPopByte
.884c	91 38		sta ($38),y			sta 	(zTemp1),y
.884e	80 f6		bra $8846			bra 	_LPVStringCopy
.8850					_LPVStringCopied:
.8850	fa		plx				plx
.8851	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8852					NewCommand:
.8852	20 eb a1	jsr $a1eb			jsr 	MemoryNew
.8855	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8858	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear everything.
.885b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.885c					Command_Print:
.885c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.885d					_CPLoop:
.885d	08		php				php 								; save last action flag
.885e	b1 30		lda ($30),y			lda 	(codePtr),y
.8860	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8862	f0 46		beq $88aa			beq 	_CPExit
.8864	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8866	f0 42		beq $88aa			beq 	_CPExit
.8868	68		pla				pla 								; throw last action flag
.8869	b1 30		lda ($30),y			lda 	(codePtr),y
.886b	c8		iny				iny
.886c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886e	f0 37		beq $88a7			beq 	_CPContinueWithSameLine
.8870	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8872	f0 2e		beq $88a2			beq 	_CPTab
.8874	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8876	f0 26		beq $889e			beq 	_CPNewLine
.8878	88		dey				dey 								; undo the get.
.8879	a2 00		ldx #$00			ldx 	#0
.887b	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; get a value into slot 0
.887e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8881	29 10		and #$10			and 	#NSBIsString
.8883	f0 0b		beq $8890			beq 	_CPNumber
.8885	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8888	ad 08 04	lda $0408			lda 	NSMantissa0
.888b	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.888e	80 cc		bra $885c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8890					_CPNumber:
.8890	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8892	20 f4 9b	jsr $9bf4			jsr 	ConvertNumberToString 		; convert to string
.8895	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8897	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.8899	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.889c	80 be		bra $885c			bra 	Command_Print 				; loop round clearing carry so NL if end
.889e					_CPNewLine:
.889e	a9 0d		lda #$0d			lda 	#13
.88a0	80 02		bra $88a4			bra 	_CPPrintChar
.88a2					_CPTab:
.88a2	a9 09		lda #$09			lda 	#9 							; print TAB
.88a4					_CPPrintChar:
.88a4	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.88a7					_CPContinueWithSameLine:
.88a7	38		sec				sec 								; loop round with carry set, which
.88a8	80 b3		bra $885d			bra 	_CPLoop 					; will inhibit final CR
.88aa					_CPExit:
.88aa	28		plp				plp 								; get last action flag
.88ab	b0 05		bcs $88b2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88ad	a9 0d		lda #$0d			lda 	#13 						; print new line
.88af	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.88b2					_CPExit2:
.88b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88b3					CallProcedure:
.88b3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b5	b1 30		lda ($30),y			lda 	(codePtr),y
.88b7	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b9	f0 0c		beq $88c7			beq 	_CPEndParam
.88bb					_CPParamLoop:
.88bb	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; get parameter onto stack
.88be	e8		inx				inx 								; bump next stack
.88bf	b1 30		lda ($30),y			lda 	(codePtr),y
.88c1	c8		iny				iny
.88c2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c4	f0 f5		beq $88bb			beq 	_CPParamLoop
.88c6	88		dey				dey 								; unpick.
.88c7					_CPEndParam:
.88c7	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88ca	c8		iny				iny									; skip right bracket
.88cb	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88cd	20 62 a2	jsr $a262			jsr 	StackOpen
.88d0	20 a6 a2	jsr $a2a6			jsr 	STKSaveCodePosition 		; save loop position
.88d3	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d6	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d8	ad 10 04	lda $0410			lda 	NSMantissa1
.88db	85 37		sta $37				sta 	zTemp0+1
.88dd	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88df	b2 36		lda ($36)			lda 	(zTemp0)
.88e1	85 30		sta $30				sta 	safePtr
.88e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e5	85 31		sta $31				sta 	safePtr+1
.88e7	c8		iny				iny
.88e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ea	85 32		sta $32				sta 	safePtr+2
.88ec	c8		iny				iny
.88ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ef	85 33		sta $33				sta 	safePtr+3
.88f1	c8		iny				iny 								; get Y offset -> Y
.88f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f4	a8		tay				tay
.88f5	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f7	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88fa	f0 13		beq $890f			beq 	_ParamExit 					; if so, exit.
.88fc					_ParamExtract:
.88fc	ca		dex				dex 								; put a local term on the level before
.88fd	20 99 87	jsr $8799			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8900	20 d4 86	jsr $86d4			jsr 	AssignVariable 				; assign stacked value to the variable.
.8903	e8		inx				inx 								; advance to next parameter to do.
.8904	e8		inx				inx
.8905	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8908	f0 05		beq $890f			beq 	_ParamExit
.890a	20 2a 8d	jsr $8d2a			jsr 	CheckComma 					; comma seperating parameters
.890d	80 ed		bra $88fc			bra 	_ParamExtract
.890f					_ParamExit:
.890f	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; check )
.8912	60		rts				rts 								; and continue from here
.8913					Command_ENDPROC:
.8913	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8915	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8917	20 8e a2	jsr $a28e			jsr 	StackCheckFrame
.891a	20 b7 a2	jsr $a2b7			jsr 	STKLoadCodePosition 		; restore code position
.891d	20 80 a2	jsr $a280			jsr 	StackClose
.8920	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8921					Command_Read:
.8921	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8923	20 c4 97	jsr $97c4			jsr 	EvaluateTerm
.8926	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8929	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.892b	f0 4a		beq $8977			beq 	_CRSyntax 					; check reference (bit 0)
.892d	20 c0 89	jsr $89c0			jsr 	SwapDataCodePtrs 			; swap code and data
.8930	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8933	d0 20		bne $8955			bne 	_CRContinueData
.8935					_CRKeepSearching:
.8935	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8937	aa		tax				tax
.8938	20 7d 8c	jsr $8c7d			jsr 	ScanForward
.893b	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.893d	f0 16		beq $8955			beq 	_CRHaveData 				; found it
.893f	18		clc				clc
.8940	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8942	65 30		adc $30				adc 	codePtr
.8944	85 30		sta $30				sta 	codePtr
.8946	90 02		bcc $894a			bcc 	_CREExit
.8948	e6 31		inc $31				inc 	codePtr+1
.894a					_CREExit:
.894a	a0 03		ldy #$03			ldy 	#3 							; start of line.
.894c	b2 30		lda ($30)			lda 	(codePtr)
.894e	d0 e5		bne $8935			bne 	_CRKeepSearching
.8950	a9 0b		lda #$0b		lda	#11
.8952	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8955					_CRHaveData:
.8955					_CRContinueData:
.8955	a2 01		ldx #$01			ldx 	#1
.8957	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; evaluate value into slot # 1
.895a	ca		dex				dex
.895b	20 d4 86	jsr $86d4			jsr		AssignVariable 				; do the assignment
.895e	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8961	b1 30		lda ($30),y			lda 	(codePtr),y
.8963	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8965	d0 04		bne $896b			bne 	_CRSwapBack
.8967	c8		iny				iny 								; consume comma
.8968	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.896b					_CRSwapBack:
.896b	20 c0 89	jsr $89c0			jsr 	SwapDataCodePtrs			; swap them back.
.896e	b1 30		lda ($30),y			lda 	(codePtr),y
.8970	c8		iny				iny
.8971	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8973	f0 ac		beq $8921			beq 	Command_Read 				; if so go round again.
.8975	88		dey				dey 								; unpick get.
.8976	60		rts				rts
.8977					_CRSyntax:
.8977	4c 88 9f	jmp $9f88			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.897a					RemCommand:
.897a	b1 30		lda ($30),y			lda 	(codePtr),y
.897c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897e	d0 06		bne $8986			bne 	_RMExit
.8980	c8		iny				iny
.8981	98		tya				tya
.8982	38		sec				sec
.8983	71 30		adc ($30),y			adc 	(codePtr),y
.8985	a8		tay				tay
.8986					_RMExit:
.8986	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8987					Command_REPEAT:
.8987	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8989	20 62 a2	jsr $a262			jsr 	StackOpen
.898c	20 a6 a2	jsr $a2a6			jsr 	STKSaveCodePosition 		; save loop position
.898f	60		rts				rts
.8990					Command_UNTIL:
.8990	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8992	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8994	20 8e a2	jsr $a28e			jsr 	StackCheckFrame
.8997	a2 00		ldx #$00			ldx 	#0
.8999	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; work out the number
.899c	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; check if zero
.899f	f0 04		beq $89a5			beq 	_CULoopBack 				; if so keep looping
.89a1	20 80 a2	jsr $a280			jsr 	StackClose		 			; return
.89a4	60		rts				rts
.89a5					_CULoopBack:
.89a5	20 b7 a2	jsr $a2b7			jsr 	STKLoadCodePosition 		; loop back
.89a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a9					Command_Restore:
.89a9	20 c0 89	jsr $89c0			jsr 	SwapDataCodePtrs 			; swap code and data
.89ac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ae	85 30		sta $30				sta 	codePtr
.89b0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b2	85 31		sta $31				sta 	codePtr+1
.89b4	20 c0 89	jsr $89c0			jsr 	SwapDataCodePtrs 			; put them back
.89b7	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b9	8d 9b 04	sta $049b			sta 	dataPointer+4
.89bc	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89bf	60		rts				rts
.89c0					SwapDataCodePtrs:
.89c0	da		phx				phx
.89c1	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c3					_SDCPLoop:
.89c3	b5 30		lda $30,x			lda 	safePtr,x
.89c5	48		pha				pha
.89c6	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c9	95 30		sta $30,x			sta 	safePtr,x
.89cb	68		pla				pla
.89cc	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89cf	ca		dex				dex
.89d0	10 f1		bpl $89c3			bpl 	_SDCPLoop
.89d2	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d5	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d8	a8		tay				tay
.89d9	fa		plx				plx
.89da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89db					CommandRUN:
.89db	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89de	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89e0	85 30		sta $30				sta 	codePtr
.89e2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e4	85 31		sta $31				sta 	codePtr+1
.89e6					RUNNewLine:
.89e6	b2 30		lda ($30)			lda 	(codePtr)
.89e8	f0 5e		beq $8a48			beq 	CRNoProgram         		; no then END.
.89ea	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89ec	9a		txs				txs
.89ed					RUNCodePointerLine:
.89ed	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ef					_CRIncMainLoop:
.89ef	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89f2	d0 05		bne $89f9			bne 	_CRNoBreakCheck
.89f4	20 ea a8	jsr $a8ea			jsr 	EXTBreakCheck 				; break check
.89f7	f0 4a		beq $8a43			beq 	_CRBreak
.89f9					_CRNoBreakCheck:
.89f9	c8		iny				iny
.89fa					_CRMainLoop:
.89fa	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89fd	b1 30		lda ($30),y			lda 	(codePtr),y
.89ff	10 10		bpl $8a11			bpl 	_CRNotKeyword
.8a01	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a03	b0 04		bcs $8a09			bcs 	_CRIsKeyword
.8a05	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a07	b0 34		bcs $8a3d			bcs		_CRSyntaxError
.8a09					_CRIsKeyword:
.8a09	c8		iny				iny 								; consume command
.8a0a	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a0b	aa		tax				tax 								; put in X for vector jump
.8a0c	20 40 8a	jsr $8a40			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0f	80 e9		bra $89fa			bra 	_CRMainLoop 				; and loop round
.8a11					_CRNotKeyword:
.8a11	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a13	f0 da		beq $89ef			beq 	_CRIncMainLoop
.8a15	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a17	90 05		bcc $8a1e			bcc 	_CRNotVariable
.8a19					_CRGoLet:
.8a19	20 98 86	jsr $8698			jsr 	LetCommand
.8a1c	80 dc		bra $89fa			bra 	_CRMainLoop
.8a1e					_CRNotVariable:
.8a1e	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a20	f0 f7		beq $8a19			beq 	_CRGoLet
.8a22	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a24	f0 f3		beq $8a19			beq 	_CRGoLet
.8a26	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a28	f0 ef		beq $8a19			beq 	_CRGoLet
.8a2a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a2c	f0 09		beq $8a37			beq 	_CRGoRem
.8a2e	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a30	d0 0b		bne $8a3d			bne 	_CRSyntaxError
.8a32	20 2c 82	jsr $822c			jsr 	LabelHere
.8a35	80 c3		bra $89fa			bra 	_CRMainLoop
.8a37					_CRGoRem:
.8a37	c8		iny				iny
.8a38	20 7a 89	jsr $897a			jsr 	RemCommand
.8a3b	80 bd		bra $89fa			bra 	_CRMainLoop
.8a3d					_CRSyntaxError:
.8a3d	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.8a40					_CRCallVector0:
.8a40	7c ec 8a	jmp ($8aec,x)			jmp 	(VectorSet0,x)
.8a43					_CRBreak:
.8a43	a9 01		lda #$01		lda	#1
.8a45	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8a48					CRNoProgram:
.8a48	4c 1e 85	jmp $851e			jmp 	EndCommand
.8a4b					EOLCommand:
.8a4b	18		clc				clc
.8a4c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a4e	65 30		adc $30				adc 	codePtr
.8a50	85 30		sta $30				sta 	codePtr
.8a52	90 02		bcc $8a56			bcc 	_CREExit
.8a54	e6 31		inc $31				inc 	codePtr+1
.8a56					_CREExit:
.8a56	80 8e		bra $89e6			bra 	RunNewLine
.8a58					Shift1Command:
.8a58	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5a	c8		iny				iny
.8a5b	0a		asl a				asl 	a
.8a5c	aa		tax				tax
.8a5d	7c 84 8b	jmp ($8b84,x)			jmp 	(VectorSet1,x)
.8a60					Shift2Command:
.8a60	b1 30		lda ($30),y			lda 	(codePtr),y
.8a62	c8		iny				iny
.8a63	0a		asl a				asl 	a
.8a64	aa		tax				tax
.8a65	7c 9e 8b	jmp ($8b9e,x)			jmp 	(VectorSet2,x)
.8a68					Unused1:
.8a68					Unused2:
.8a68					Unused3:
.8a68					Unused4:
.8a68	4c 88 9f	jmp $9f88			jmp 	SyntaxError
>8a6b							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a6c					VectorSetPunc:
>8a6c	28 90					.word	ShiftLeft                        ; $00 <<
>8a6e	df 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a70	d5 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a72	88 9f					.word	SyntaxError                      ; $03 !!3
>8a74	88 9f					.word	SyntaxError                      ; $04 ><
>8a76	e9 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a78	2b 90					.word	ShiftRight                       ; $06 >>
>8a7a	88 9f					.word	SyntaxError                      ; $07 !!7
>8a7c	88 9f					.word	SyntaxError                      ; $08 !!8
>8a7e	88 9f					.word	SyntaxError                      ; $09 !!9
>8a80	88 9f					.word	SyntaxError                      ; $0a !!10
>8a82	88 9f					.word	SyntaxError                      ; $0b !!11
>8a84	88 9f					.word	SyntaxError                      ; $0c !!12
>8a86	88 9f					.word	SyntaxError                      ; $0d !!13
>8a88	88 9f					.word	SyntaxError                      ; $0e !!14
>8a8a	88 9f					.word	SyntaxError                      ; $0f !!15
>8a8c	88 9f					.word	SyntaxError                      ; $10 @
>8a8e	88 9f					.word	SyntaxError                      ; $11 !!17
>8a90	88 9f					.word	SyntaxError                      ; $12 !!18
>8a92	88 9f					.word	SyntaxError                      ; $13 [
>8a94	ac 8e					.word	IntegerDivide                    ; $14 \
>8a96	88 9f					.word	SyntaxError                      ; $15 ]
>8a98	b9 91					.word	EorInteger                       ; $16 ^
>8a9a	88 9f					.word	SyntaxError                      ; $17 _
>8a9c	88 9f					.word	SyntaxError                      ; $18 `
>8a9e	88 9f					.word	SyntaxError                      ; $19 !!25
>8aa0	88 9f					.word	SyntaxError                      ; $1a !!26
>8aa2	88 9f					.word	SyntaxError                      ; $1b {
>8aa4	73 91					.word	OraInteger                       ; $1c |
>8aa6	88 9f					.word	SyntaxError                      ; $1d }
>8aa8	88 9f					.word	SyntaxError                      ; $1e ~
>8aaa	88 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aac	88 9f					.word	SyntaxError                      ; $20
>8aae	ff 91					.word	WordIndirect                     ; $21 !
>8ab0	88 9f					.word	SyntaxError                      ; $22 "
>8ab2	88 9f					.word	SyntaxError                      ; $23 #
>8ab4	88 9f					.word	SyntaxError                      ; $24 $
>8ab6	f9 8e					.word	IntegerModulus                   ; $25 %
>8ab8	2d 91					.word	AndInteger                       ; $26 &
>8aba	88 9f					.word	SyntaxError                      ; $27 '
>8abc	88 9f					.word	SyntaxError                      ; $28 (
>8abe	88 9f					.word	SyntaxError                      ; $29 )
>8ac0	6e 8f					.word	MulInteger                       ; $2a *
>8ac2	bf 90					.word	AddInteger                       ; $2b +
>8ac4	88 9f					.word	SyntaxError                      ; $2c ,
>8ac6	02 91					.word	SubInteger                       ; $2d -
>8ac8	88 9f					.word	SyntaxError                      ; $2e .
>8aca	ea 93					.word	FDivideCommand                   ; $2f /
>8acc	88 9f					.word	SyntaxError                      ; $30 0
>8ace	88 9f					.word	SyntaxError                      ; $31 1
>8ad0	88 9f					.word	SyntaxError                      ; $32 2
>8ad2	88 9f					.word	SyntaxError                      ; $33 3
>8ad4	88 9f					.word	SyntaxError                      ; $34 4
>8ad6	88 9f					.word	SyntaxError                      ; $35 5
>8ad8	88 9f					.word	SyntaxError                      ; $36 6
>8ada	88 9f					.word	SyntaxError                      ; $37 7
>8adc	88 9f					.word	SyntaxError                      ; $38 8
>8ade	88 9f					.word	SyntaxError                      ; $39 9
>8ae0	88 9f					.word	SyntaxError                      ; $3a :
>8ae2	88 9f					.word	SyntaxError                      ; $3b ;
>8ae4	c1 8d					.word	BinaryCompareLess                ; $3c <
>8ae6	b7 8d					.word	BinaryCompareEqual               ; $3d =
>8ae8	cb 8d					.word	BinaryCompareGreater             ; $3e >
>8aea	26 92					.word	ByteIndirect                     ; $3f ?
.8aec					VectorSet0:
>8aec	4b 8a					.word	EOLCommand                       ; $80 !0:EOF
>8aee	58 8a					.word	Shift1Command                    ; $81 !1:SH1
>8af0	60 8a					.word	Shift2Command                    ; $82 !2:SH2
>8af2	5a 99					.word	AbsUnary                         ; $83 ABS(
>8af4	6a 99					.word	AllocUnary                       ; $84 ALLOC(
>8af6	da 99					.word	AscUnary                         ; $85 ASC(
>8af8	a5 9b					.word	ChrUnary                         ; $86 CHR$(
>8afa	a2 a3					.word	UnaryEvent                       ; $87 EVENT(
>8afc	b3 8d					.word	UnaryFalse                       ; $88 FALSE
>8afe	e7 99					.word	FracUnary                        ; $89 FRAC(
>8b00	6d a6					.word	UnaryHit                         ; $8a HIT(
>8b02	fd 99					.word	IntUnary                         ; $8b INT(
>8b04	64 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b06	ba a6					.word	UnaryJoyB                        ; $8d JOYB(
>8b08	93 a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b0a	96 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b0c	7f 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b0e	0f 9a					.word	LenUnary                         ; $91 LEN(
>8b10	2d 9a					.word	Unary_Max                        ; $92 MAX(
>8b12	a9 9c					.word	Unary_Mid                        ; $93 MID$(
>8b14	29 9a					.word	Unary_Min                        ; $94 MIN(
>8b16	84 9a					.word	Unary_Not                        ; $95 NOT(
>8b18	9a 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b1a	8f 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b1c	b9 9a					.word	Unary_Rnd                        ; $98 RND(
>8b1e	3a 9b					.word	SgnUnary                         ; $99 SGN(
>8b20	b7 9b					.word	SpcUnary                         ; $9a SPC(
>8b22	d2 9b					.word	Unary_Str                        ; $9b STR$(
>8b24	12 a7					.word	UnaryTimer                       ; $9c TIMER(
>8b26	a7 8d					.word	UnaryTrue                        ; $9d TRUE
>8b28	5a 9b					.word	ValUnary                         ; $9e VAL(
>8b2a	21 85					.word	ForCommand                       ; $9f FOR
>8b2c	6e 86					.word	IfCommand                        ; $a0 IF
>8b2e	68 8a					.word	Unused1                          ; $a1 PROC
>8b30	87 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b32	f3 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b34	97 86					.word	EndIf                            ; $a4 ENDIF
>8b36	13 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b38	db 85					.word	NextCommand                      ; $a6 NEXT
>8b3a	68 8a					.word	Unused4                          ; $a7 THEN
>8b3c	90 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b3e	14 8d					.word	Command_WEND                     ; $a9 WEND
>8b40	88 9f					.word	SyntaxError                      ; $aa BY
>8b42	bf 83					.word	CallCommand                      ; $ab CALL
>8b44	0f a4					.word	CircleCommand                    ; $ac CIRCLE
>8b46	f9 83					.word	ClearCommand                     ; $ad CLEAR
>8b48	51 84					.word	ClearScreen                      ; $ae CLS
>8b4a	88 9f					.word	SyntaxError                      ; $af COLOR
>8b4c	88 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b4e	59 84					.word	Command_Data                     ; $b1 DATA
>8b50	61 84					.word	DimCommand                       ; $b2 DIM
>8b52	68 8a					.word	Unused3                          ; $b3 DOWNTO
>8b54	90 86					.word	ElseCode                         ; $b4 ELSE
>8b56	88 9f					.word	SyntaxError                      ; $b5 FROM
>8b58	3b a6					.word	GfxCommand                       ; $b6 GFX
>8b5a	34 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b5c	52 86					.word	GotoCommand                      ; $b8 GOTO
>8b5e	88 9f					.word	SyntaxError                      ; $b9 HERE
>8b60	39 a4					.word	ImageCommand                     ; $ba IMAGE
>8b62	98 86					.word	LetCommand                       ; $bb LET
>8b64	8e a4					.word	LineCommand                      ; $bc LINE
>8b66	8b 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b68	88 9f					.word	SyntaxError                      ; $be OFF
>8b6a	88 9f					.word	SyntaxError                      ; $bf ON
>8b6c	88 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b6e	ce a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b70	87 a4					.word	PlotCommand                      ; $c2 PLOT
>8b72	5c 88					.word	Command_Print                    ; $c3 PRINT
>8b74	21 89					.word	Command_Read                     ; $c4 READ
>8b76	0b a4					.word	RectangleCommand                 ; $c5 RECT
>8b78	7a 89					.word	RemCommand                       ; $c6 REM
>8b7a	44 86					.word	Command_RETURN                   ; $c7 RETURN
>8b7c	88 9f					.word	SyntaxError                      ; $c8 SOLID
>8b7e	1a a4					.word	SpriteCommand                    ; $c9 SPRITE
>8b80	56 a4					.word	TextCommand                      ; $ca TEXT
>8b82	68 8a					.word	Unused2                          ; $cb TO
.8b84					VectorSet1:
>8b84	88 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b86	88 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b88	88 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b8a	90 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b8c	af 83					.word	AssertCommand                    ; $84 ASSERT
>8b8e	db a5					.word	BitmapCtrl                       ; $85 BITMAP
>8b90	1e 85					.word	EndCommand                       ; $86 END
>8b92	ed 86					.word	Command_List                     ; $87 LIST
>8b94	52 88					.word	NewCommand                       ; $88 NEW
>8b96	a9 89					.word	Command_Restore                  ; $89 RESTORE
>8b98	db 89					.word	CommandRUN                       ; $8a RUN
>8b9a	20 a6					.word	SpritesCtrl                      ; $8b SPRITES
>8b9c	26 8c					.word	StopCommand                      ; $8c STOP
.8b9e					VectorSet2:
>8b9e	88 9f					.word	SyntaxError                      ; $80 !0:EOF
>8ba0	88 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba2	88 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba4	47 9e					.word	Assemble_adc                     ; $83 ADC
>8ba6	3f 9e					.word	Assemble_and                     ; $84 AND
>8ba8	5b 9e					.word	Assemble_asl                     ; $85 ASL
>8baa	c5 9e					.word	Assemble_bcc                     ; $86 BCC
>8bac	c9 9e					.word	Assemble_bcs                     ; $87 BCS
>8bae	d1 9e					.word	Assemble_beq                     ; $88 BEQ
>8bb0	88 9e					.word	Assemble_bit                     ; $89 BIT
>8bb2	b9 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb4	cd 9e					.word	Assemble_bne                     ; $8b BNE
>8bb6	b5 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb8	d5 9e					.word	Assemble_bra                     ; $8d BRA
>8bba	d9 9e					.word	Assemble_brk                     ; $8e BRK
>8bbc	bd 9e					.word	Assemble_bvc                     ; $8f BVC
>8bbe	c1 9e					.word	Assemble_bvs                     ; $90 BVS
>8bc0	e1 9e					.word	Assemble_clc                     ; $91 CLC
>8bc2	35 9f					.word	Assemble_cld                     ; $92 CLD
>8bc4	f5 9e					.word	Assemble_cli                     ; $93 CLI
>8bc6	25 9f					.word	Assemble_clv                     ; $94 CLV
>8bc8	53 9e					.word	Assemble_cmp                     ; $95 CMP
>8bca	9c 9e					.word	Assemble_cpx                     ; $96 CPX
>8bcc	97 9e					.word	Assemble_cpy                     ; $97 CPY
>8bce	79 9e					.word	Assemble_dec                     ; $98 DEC
>8bd0	31 9f					.word	Assemble_dex                     ; $99 DEX
>8bd2	0d 9f					.word	Assemble_dey                     ; $9a DEY
>8bd4	43 9e					.word	Assemble_eor                     ; $9b EOR
>8bd6	7e 9e					.word	Assemble_inc                     ; $9c INC
>8bd8	41 9f					.word	Assemble_inx                     ; $9d INX
>8bda	2d 9f					.word	Assemble_iny                     ; $9e INY
>8bdc	b0 9e					.word	Assemble_jmp                     ; $9f JMP
>8bde	ab 9e					.word	Assemble_jsr                     ; $a0 JSR
>8be0	4f 9e					.word	Assemble_lda                     ; $a1 LDA
>8be2	74 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be4	92 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be6	65 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be8	45 9f					.word	Assemble_nop                     ; $a5 NOP
>8bea	3b 9e					.word	Assemble_ora                     ; $a6 ORA
>8bec	f1 9e					.word	Assemble_pha                     ; $a7 PHA
>8bee	dd 9e					.word	Assemble_php                     ; $a8 PHP
>8bf0	39 9f					.word	Assemble_phx                     ; $a9 PHX
>8bf2	f9 9e					.word	Assemble_phy                     ; $aa PHY
>8bf4	01 9f					.word	Assemble_pla                     ; $ab PLA
>8bf6	e5 9e					.word	Assemble_plp                     ; $ac PLP
>8bf8	4d 9f					.word	Assemble_plx                     ; $ad PLX
>8bfa	09 9f					.word	Assemble_ply                     ; $ae PLY
>8bfc	60 9e					.word	Assemble_rol                     ; $af ROL
>8bfe	6a 9e					.word	Assemble_ror                     ; $b0 ROR
>8c00	ed 9e					.word	Assemble_rti                     ; $b1 RTI
>8c02	fd 9e					.word	Assemble_rts                     ; $b2 RTS
>8c04	57 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c06	e9 9e					.word	Assemble_sec                     ; $b4 SEC
>8c08	49 9f					.word	Assemble_sed                     ; $b5 SED
>8c0a	05 9f					.word	Assemble_sei                     ; $b6 SEI
>8c0c	4b 9e					.word	Assemble_sta                     ; $b7 STA
>8c0e	3d 9f					.word	Assemble_stp                     ; $b8 STP
>8c10	6f 9e					.word	Assemble_stx                     ; $b9 STX
>8c12	8d 9e					.word	Assemble_sty                     ; $ba STY
>8c14	83 9e					.word	Assemble_stz                     ; $bb STZ
>8c16	21 9f					.word	Assemble_tax                     ; $bc TAX
>8c18	1d 9f					.word	Assemble_tay                     ; $bd TAY
>8c1a	a6 9e					.word	Assemble_trb                     ; $be TRB
>8c1c	a1 9e					.word	Assemble_tsb                     ; $bf TSB
>8c1e	29 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c20	11 9f					.word	Assemble_txa                     ; $c1 TXA
>8c22	19 9f					.word	Assemble_txs                     ; $c2 TXS
>8c24	15 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c26					StopCommand:
.8c26	a9 08		lda #$08		lda	#8
.8c28	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c2b					ProcedureScan:
.8c2b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c2d	85 30		sta $30				sta 	codePtr
.8c2f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c31	85 31		sta $31				sta 	codePtr+1
.8c33					_PSLoop:
.8c33	b2 30		lda ($30)			lda 	(codePtr)
.8c35	f0 42		beq $8c79			beq 	_PSExit
.8c37	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c39	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3b	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c3d	d0 2d		bne $8c6c			bne 	_PSNext
.8c3f	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c40	b1 30		lda ($30),y			lda 	(codePtr),y
.8c42	29 c0		and #$c0			and 	#$C0
.8c44	c9 40		cmp #$40			cmp 	#$40
.8c46	d0 32		bne $8c7a			bne 	_PSSyntax
.8c48	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4a	18		clc				clc
.8c4b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c4d	85 37		sta $37				sta 	zTemp0+1
.8c4f	c8		iny				iny 								; LSB
.8c50	b1 30		lda ($30),y			lda 	(codePtr),y
.8c52	85 36		sta $36				sta 	zTemp0
.8c54	c8		iny				iny 								; character after variable call.
.8c55	98		tya				tya 								; save Y offset at +7
.8c56	a0 07		ldy #$07			ldy 	#7
.8c58	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c5c	a0 02		ldy #$02			ldy 	#2
.8c5e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c60	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c62					_PSCopy:
.8c62	b5 30		lda $30,x			lda 	safePtr,x
.8c64	c8		iny				iny
.8c65	91 36		sta ($36),y			sta 	(zTemp0),y
.8c67	e8		inx				inx
.8c68	e0 04		cpx #$04			cpx 	#4
.8c6a	d0 f6		bne $8c62			bne 	_PSCopy
.8c6c					_PSNext:
.8c6c	18		clc				clc
.8c6d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c6f	65 30		adc $30				adc 	codePtr
.8c71	85 30		sta $30				sta 	codePtr
.8c73	90 02		bcc $8c77			bcc 	_CREExit
.8c75	e6 31		inc $31				inc 	codePtr+1
.8c77					_CREExit:
.8c77	80 ba		bra $8c33			bra 	_PSLoop
.8c79					_PSExit:
.8c79	60		rts				rts
.8c7a					_PSSyntax:
.8c7a	4c 88 9f	jmp $9f88			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c7d					ScanForward:
.8c7d	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c7f	86 37		stx $37				stx 	zTemp0+1
.8c81	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c83					_ScanLoop:
.8c83	b1 30		lda ($30),y			lda 	(codePtr),y
.8c85	c8		iny				iny
.8c86	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c88	d0 0e		bne $8c98			bne 	_ScanGoNext
.8c8a	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c8c	f0 04		beq $8c92			beq 	_ScanMatch
.8c8e	c5 37		cmp $37				cmp 	zTemp0+1
.8c90	d0 06		bne $8c98			bne 	_ScanGoNext
.8c92					_ScanMatch:
.8c92	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c94	d0 01		bne $8c97			bne 	_ScanNotEndEOL
.8c96	88		dey				dey
.8c97					_ScanNotEndEOL:
.8c97	60		rts				rts
.8c98					_ScanGoNext:
.8c98	20 9d 8c	jsr $8c9d			jsr  	ScanForwardOne
.8c9b	80 e6		bra $8c83			bra 	_ScanLoop
.8c9d					ScanForwardOne:
.8c9d	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c9f	90 3e		bcc $8cdf			bcc 	_SFWExit
.8ca1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ca3	90 18		bcc $8cbd			bcc 	_ScanSkipOne
.8ca5	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca7	b0 2f		bcs $8cd8			bcs 	_ScanSkipData
.8ca9	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cab	90 32		bcc $8cdf			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cad	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8caf	b0 2e		bcs $8cdf			bcs 	_SFWExit
.8cb1	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cb3	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb5	b0 28		bcs $8cdf			bcs 	_SFWExit
.8cb7	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb9	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cbb	80 22		bra $8cdf			bra 	_SFWExit
.8cbd					_ScanSkipOne:
.8cbd	c8		iny				iny 								; consume the extra one.
.8cbe	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cc0	d0 1d		bne $8cdf			bne 	_SFWExit
.8cc2	18		clc				clc
.8cc3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc5	65 30		adc $30				adc 	codePtr
.8cc7	85 30		sta $30				sta 	codePtr
.8cc9	90 02		bcc $8ccd			bcc 	_CREExit
.8ccb	e6 31		inc $31				inc 	codePtr+1
.8ccd					_CREExit:
.8ccd	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ccf	b2 30		lda ($30)			lda 	(codePtr)
.8cd1	d0 0c		bne $8cdf			bne 	_SFWExit 					; if not zero, more to scan
.8cd3	a9 13		lda #$13		lda	#19
.8cd5	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8cd8					_ScanSkipData:
.8cd8	88		dey				dey 								; point at data token
.8cd9	c8		iny				iny
.8cda	98		tya				tya
.8cdb	38		sec				sec
.8cdc	71 30		adc ($30),y			adc 	(codePtr),y
.8cde	a8		tay				tay
.8cdf					_SFWExit:
.8cdf	60		rts				rts
.8ce0					ScanGetCurrentLineStep:
.8ce0	64 38		stz $38				stz 	zTemp1
.8ce2	a0 03		ldy #$03			ldy 	#3
.8ce4					_SGCLSLoop:
.8ce4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce6	c8		iny				iny
.8ce7	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce9	f0 05		beq $8cf0			beq 	_SGCLSExit
.8ceb	20 9d 8c	jsr $8c9d			jsr 	ScanForwardOne
.8cee	80 f4		bra $8ce4			bra 	_SGCLSLoop
.8cf0					_SGCLSExit:
.8cf0	a5 38		lda $38				lda 	zTemp1
.8cf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cf3					Command_WHILE:
.8cf3	5a		phy				phy 								; save position of the test
.8cf4	a2 00		ldx #$00			ldx 	#0
.8cf6	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; work out the number
.8cf9	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; check if zero
.8cfc	f0 0e		beq $8d0c			beq 	_WHExitLoop 				; if so exit the loop
.8cfe	98		tya				tya 								; position *after* test.
.8cff	7a		ply				ply 								; restore position before test, at WHILE
.8d00	88		dey				dey
.8d01	48		pha				pha 								; push after test on the stack
.8d02	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d04	20 62 a2	jsr $a262			jsr 	StackOpen
.8d07	20 a6 a2	jsr $a2a6			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d0a	7a		ply				ply 								; restore the position *after* the test
.8d0b	60		rts				rts
.8d0c					_WHExitLoop:
.8d0c	68		pla				pla 								; throw post loop position
.8d0d	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d0f	aa		tax				tax
.8d10	20 7d 8c	jsr $8c7d			jsr 	ScanForward
.8d13	60		rts				rts
.8d14					Command_WEND:
.8d14	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d16	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d18	20 8e a2	jsr $a28e			jsr 	StackCheckFrame
.8d1b	20 b7 a2	jsr $a2b7			jsr 	STKLoadCodePosition 		; loop back
.8d1e	20 80 a2	jsr $a280			jsr 	StackClose		 			; erase the frame
.8d21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d22					CheckRightBracket:
.8d22	b1 30		lda ($30),y			lda 	(codePtr),y
.8d24	c8		iny				iny
.8d25	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d27	d0 0f		bne $8d38			bne 	CNAFail
.8d29	60		rts				rts
.8d2a					CheckComma:
.8d2a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2c	c8		iny				iny
.8d2d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d2f	d0 07		bne $8d38			bne 	CNAFail
.8d31	60		rts				rts
.8d32					CheckNextA:
.8d32	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d34	d0 02		bne $8d38			bne 	CNAFail
.8d36	c8		iny				iny 								; skip character
.8d37	60		rts				rts 								; and exit
.8d38					CNAFail:
.8d38	4c 88 9f	jmp $9f88			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d3b					ErrorHandler:
.8d3b	a8		tay				tay 								; find the error text
.8d3c	f0 49		beq $8d87			beq 	_EHEnd
.8d3e	a2 00		ldx #$00			ldx 	#0
.8d40	a9 a1		lda #$a1			lda 	#((ErrorText) & $FF)
.8d42	85 36		sta $36				sta 	0+zTemp0
.8d44	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d46	85 37		sta $37				sta 	1+zTemp0
.8d48					_EHFind:
.8d48	88		dey				dey 								; found the error text ?
.8d49	f0 0e		beq $8d59			beq 	_EHFound
.8d4b					_EHFindZero:
.8d4b	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d4d	e6 36		inc $36				inc 	zTemp0
.8d4f	d0 02		bne $8d53			bne 	_EHFNoCarry
.8d51	e6 37		inc $37				inc 	zTemp0+1
.8d53					_EHFNoCarry:
.8d53	c9 00		cmp #$00			cmp 	#0
.8d55	d0 f4		bne $8d4b			bne 	_EHFindZero
.8d57	80 ef		bra $8d48			bra 	_EHFind
.8d59					_EHFound:
.8d59	a5 36		lda $36				lda 	zTemp0 						; print message
.8d5b	a6 37		ldx $37				ldx 	zTemp0+1
.8d5d	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.8d60	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d62	b1 30		lda ($30),y			lda 	(codePtr),y
.8d64	d0 05		bne $8d6b			bne 	_EHAtMsg
.8d66	c8		iny				iny
.8d67	b1 30		lda ($30),y			lda 	(codePtr),y
.8d69	f0 17		beq $8d82			beq 	_EHCREnd
.8d6b					_EHAtMsg:
.8d6b	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d6d	a9 8a		lda #$8a			lda 	#_AtMsg & $FF
.8d6f	20 94 8d	jsr $8d94			jsr 	PrintStringXA
.8d72	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d74	b1 30		lda ($30),y			lda 	(codePtr),y
.8d76	48		pha				pha
.8d77	c8		iny				iny
.8d78	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7a	aa		tax				tax
.8d7b	68		pla				pla
.8d7c	20 4d 92	jsr $924d			jsr 	ConvertInt16 				; convert XA to string
.8d7f	20 94 8d	jsr $8d94			jsr 	PrintStringXA 				; and print it.
.8d82					_EHCREnd:
.8d82	a9 0d		lda #$0d			lda 	#13 						; new line
.8d84	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8d87					_EHEnd:
.8d87	4c 60 83	jmp $8360			jmp 	WarmStart
>8d8a	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d92	20 00
.8d94					PrintStringXA:
.8d94	5a		phy				phy
.8d95	86 37		stx $37				stx 	zTemp0+1
.8d97	85 36		sta $36				sta 	zTemp0
.8d99	a0 00		ldy #$00			ldy 	#0
.8d9b					_PSXALoop:
.8d9b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9d	f0 06		beq $8da5			beq 	_PSXAExit
.8d9f	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.8da2	c8		iny				iny
.8da3	80 f6		bra $8d9b			bra 	_PSXALoop
.8da5					_PSXAExit:
.8da5	7a		ply				ply
.8da6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da7					UnaryTrue:
.8da7	fa		plx				plx
.8da8					ReturnTrue:
.8da8	a9 01		lda #$01			lda 	#1  						; set to 1
.8daa	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.8dad	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8daf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8db2	60		rts				rts
.8db3					UnaryFalse:
.8db3	fa		plx				plx
.8db4					ReturnFalse:
.8db4	4c fe 9d	jmp $9dfe			jmp 	NSMSetZero 					; set it all to zero
.8db7					BinaryCompareEqual:
.8db7	fa		plx				plx
.8db8	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8dbb	c9 00		cmp #$00			cmp 	#0
.8dbd	f0 e9		beq $8da8			beq 	ReturnTrue
.8dbf	80 f3		bra $8db4			bra 	ReturnFalse
.8dc1					BinaryCompareLess:
.8dc1	fa		plx				plx
.8dc2	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8dc5	c9 ff		cmp #$ff			cmp 	#$FF
.8dc7	f0 df		beq $8da8			beq 	ReturnTrue
.8dc9	80 e9		bra $8db4			bra 	ReturnFalse
.8dcb					BinaryCompareGreater:
.8dcb	fa		plx				plx
.8dcc	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8dcf	c9 01		cmp #$01			cmp 	#1
.8dd1	f0 d5		beq $8da8			beq 	ReturnTrue
.8dd3	80 df		bra $8db4			bra 	ReturnFalse
.8dd5					BinaryCompareNotEqual:
.8dd5	fa		plx				plx
.8dd6	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8dd9	c9 00		cmp #$00			cmp 	#0
.8ddb	d0 cb		bne $8da8			bne 	ReturnTrue
.8ddd	80 d5		bra $8db4			bra 	ReturnFalse
.8ddf					BinaryCompareLessEqual:
.8ddf	fa		plx				plx
.8de0	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8de3	c9 01		cmp #$01			cmp 	#1
.8de5	d0 c1		bne $8da8			bne 	ReturnTrue
.8de7	80 cb		bra $8db4			bra 	ReturnFalse
.8de9					BinaryCompareGreaterEqual:
.8de9	fa		plx				plx
.8dea	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode
.8ded	c9 ff		cmp #$ff			cmp 	#$FF
.8def	d0 b7		bne $8da8			bne 	ReturnTrue
.8df1	80 c1		bra $8db4			bra 	ReturnFalse
.8df3					CompareBaseCode:
.8df3	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; make both values if references.
.8df6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8dfc	29 10		and #$10			and 	#NSTString
.8dfe	d0 40		bne $8e40			bne 	_CBCString
.8e00	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e03	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e06	d0 3b		bne $8e43			bne 	_CBCFloat
.8e08	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e0b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e0e	29 08		and #$08			and 	#NSTFloat
.8e10	d0 31		bne $8e43			bne 	_CBCFloat
.8e12	20 46 8e	jsr $8e46			jsr 	CompareFixMinusZero
.8e15	e8		inx				inx
.8e16	20 46 8e	jsr $8e46			jsr 	CompareFixMinusZero
.8e19	ca		dex				dex
.8e1a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e1d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e20	10 0b		bpl $8e2d			bpl 	_CDCSameSign
.8e22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e25	30 16		bmi $8e3d			bmi 	_CBCLess 					; return $FF
.8e27					_CBCGreater:
.8e27	a9 01		lda #$01			lda 	#1
.8e29	60		rts				rts
.8e2a					_CBCEqual:
.8e2a	a9 00		lda #$00			lda 	#0
.8e2c	60		rts				rts
.8e2d					_CDCSameSign:
.8e2d	20 99 90	jsr $9099			jsr 	SubTopTwoStack 				; unsigned subtract
.8e30	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; or the mantissa together
.8e33	f0 f5		beq $8e2a			beq 	_CBCEqual 					; -0 == 0
.8e35	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e38	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e3b	10 ea		bpl $8e27			bpl 	_CBCGreater
.8e3d					_CBCLess:
.8e3d	a9 ff		lda #$ff			lda 	#$FF
.8e3f	60		rts				rts
.8e40					_CBCString:
.8e40	4c ef 8f	jmp $8fef			jmp 	CompareStrings
.8e43					_CBCFloat:
.8e43	4c d0 93	jmp $93d0			jmp 	CompareFloat
.8e46					CompareFixMinusZero:
.8e46	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero
.8e49	d0 03		bne $8e4e			bne 	_CFXMZNotZero
.8e4b	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e4e					_CFXMZNotZero:
.8e4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e4f					StringConcat:
.8e4f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e52	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e55	29 18		and #$18			and 	#NSBTypeMask
.8e57	c9 10		cmp #$10			cmp 	#NSTString
.8e59	d0 4e		bne $8ea9			bne		_SCType
.8e5b	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e5d	e8		inx				inx
.8e5e	20 7c 8e	jsr $8e7c			jsr 	_SCSetupZ0 					; setup for second
.8e61	20 87 8e	jsr $8e87			jsr 	_SCLengthZ0 				; length for second
.8e64	ca		dex				dex
.8e65	20 7c 8e	jsr $8e7c			jsr 	_SCSetupZ0 					; setup for first
.8e68	20 87 8e	jsr $8e87			jsr 	_SCLengthZ0 				; length for first
.8e6b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e6d	20 55 a3	jsr $a355			jsr 	StringTempAllocate
.8e70	20 9a 8e	jsr $8e9a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e73	e8		inx				inx
.8e74	20 7c 8e	jsr $8e7c			jsr 	_SCSetupZ0 					; copy second out
.8e77	20 9a 8e	jsr $8e9a			jsr 	_SCCopy
.8e7a	ca		dex				dex
.8e7b	60		rts				rts
.8e7c					_SCSetupZ0:
.8e7c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e7f	85 36		sta $36				sta 	zTemp0
.8e81	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e84	85 37		sta $37				sta 	zTemp0+1
.8e86	60		rts				rts
.8e87					_SCLengthZ0:
.8e87	5a		phy				phy
.8e88	a0 00		ldy #$00			ldy 	#0
.8e8a					_SCLenLoop:
.8e8a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e8c	f0 0a		beq $8e98			beq 	_SCLExit
.8e8e	c8		iny				iny
.8e8f	e6 38		inc $38				inc 	zTemp1
.8e91	10 f7		bpl $8e8a			bpl		_SCLenLoop
.8e93	a9 09		lda #$09		lda	#9
.8e95	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8e98					_SCLExit:
.8e98	7a		ply				ply
.8e99	60		rts				rts
.8e9a					_SCCopy:
.8e9a	5a		phy				phy
.8e9b	a0 00		ldy #$00			ldy 	#0
.8e9d					_SCCopyLoop:
.8e9d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9f	f0 06		beq $8ea7			beq 	_SCCExit
.8ea1	20 93 a3	jsr $a393			jsr 	StringTempWrite
.8ea4	c8		iny				iny
.8ea5	80 f6		bra $8e9d			bra 	_SCCopyLoop
.8ea7					_SCCExit:
.8ea7	7a		ply				ply
.8ea8	60		rts				rts
.8ea9					_SCType:
.8ea9	4c 92 9f	jmp $9f92			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eac					IntegerDivide:
.8eac	fa		plx				plx
.8ead	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eb0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eb3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb4	0a		asl a				asl 	a
.8eb5	10 05		bpl $8ebc			bpl 	_NotRef
.8eb7	48		pha				pha
.8eb8	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ebb	68		pla				pla
.8ebc					_NotRef:
.8ebc	0a		asl a				asl 	a
.8ebd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec5	f0 03		beq $8eca			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec7	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.8eca					_IntegerCode:
.8eca	20 ec 8e	jsr $8eec			jsr 	CheckDivideZero 			; do div zero check
.8ecd	20 24 8f	jsr $8f24			jsr 	Int32Divide 				; do the division
.8ed0	20 e1 8f	jsr $8fe1			jsr 	CalculateSign 				; calculate result sign
.8ed3					NSMCopyPlusTwoToZero:
.8ed3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed9	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8edc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8edf	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ee2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee5	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8eeb	60		rts				rts
.8eec					CheckDivideZero:
.8eec	e8		inx				inx
.8eed	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero
.8ef0	f0 02		beq $8ef4			beq 	_CDVError
.8ef2	ca		dex				dex
.8ef3	60		rts				rts
.8ef4					_CDVError:
.8ef4	a9 03		lda #$03		lda	#3
.8ef6	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8ef9					IntegerModulus:
.8ef9	fa		plx				plx
.8efa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8efd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f00	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f01	0a		asl a				asl 	a
.8f02	10 05		bpl $8f09			bpl 	_NotRef
.8f04	48		pha				pha
.8f05	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f08	68		pla				pla
.8f09					_NotRef:
.8f09	0a		asl a				asl 	a
.8f0a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f0c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f12	f0 03		beq $8f17			beq 	_IntegerCode 				; if clear, then we have two integers
.8f14	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.8f17					_IntegerCode:
.8f17					IntegerModulusNoCheck:
.8f17	20 ec 8e	jsr $8eec			jsr 	CheckDivideZero 			; do div zero check
.8f1a	20 24 8f	jsr $8f24			jsr 	Int32Divide 				; do the division
.8f1d	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f20	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f23	60		rts				rts
.8f24					Int32Divide:
.8f24	48		pha				pha 								; save AXY
.8f25	5a		phy				phy
.8f26	20 d5 9d	jsr $9dd5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f29	20 fa 9d	jsr $9dfa			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f2c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f2e					_I32DivideLoop:
.8f2e	e8		inx				inx
.8f2f	e8		inx				inx
.8f30	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f33	ca		dex				dex
.8f34	ca		dex				dex
.8f35	20 14 9e	jsr $9e14			jsr 	NSMRotateLeft
.8f38	20 64 8f	jsr $8f64			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f3b	90 03		bcc $8f40			bcc 	_I32DivideNoCarryIn
.8f3d	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f40					_I32DivideNoCarryIn:
.8f40	88		dey				dey 								; loop round till division completed.
.8f41	d0 eb		bne $8f2e			bne 	_I32DivideLoop
.8f43	7a		ply				ply 								; restore AXY and exit
.8f44	68		pla				pla
.8f45	60		rts				rts
.8f46					Int32ShiftDivide:
.8f46	48		pha				pha 								; save AY
.8f47	5a		phy				phy
.8f48	e8		inx				inx 								; clear S[X+2]
.8f49	e8		inx				inx
.8f4a	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.8f4d	ca		dex				dex
.8f4e	ca		dex				dex
.8f4f	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f51					_I32SDLoop:
.8f51	20 64 8f	jsr $8f64			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f54	e8		inx				inx
.8f55	e8		inx				inx
.8f56	20 14 9e	jsr $9e14			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f59	ca		dex				dex
.8f5a	ca		dex				dex
.8f5b	20 14 9e	jsr $9e14			jsr 	NSMRotateLeft
.8f5e	88		dey				dey 	 							; do 31 times
.8f5f	d0 f0		bne $8f51			bne 	_I32SDLoop
.8f61	7a		ply				ply 								; restore AY and exit
.8f62	68		pla				pla
.8f63	60		rts				rts
.8f64					DivideCheckSubtract:
.8f64	20 99 90	jsr $9099			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f67	b0 04		bcs $8f6d			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f69	20 73 90	jsr $9073			jsr 	AddTopTwoStack 				; add it back in
.8f6c	18		clc				clc 								; and return False
.8f6d					_DCSExit:
.8f6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f6e					MulInteger:
.8f6e	fa		plx				plx
.8f6f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f72	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f75	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f76	0a		asl a				asl 	a
.8f77	10 05		bpl $8f7e			bpl 	_NotRef
.8f79	48		pha				pha
.8f7a	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f7d	68		pla				pla
.8f7e					_NotRef:
.8f7e	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f7f	30 0b		bmi $8f8c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f81	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f84	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f87	f0 06		beq $8f8f			beq 	_IntegerCode 				; if clear, then we have two integers
.8f89	4c a7 94	jmp $94a7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f8c					_StringData:
.8f8c	4c 9c 9f	jmp $9f9c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f8f					_IntegerCode:
.8f8f	20 9c 8f	jsr $8f9c			jsr 	MultiplyShort
.8f92	c9 00		cmp #$00			cmp 	#0
.8f94	f0 05		beq $8f9b			beq 	_MIExit
.8f96	a9 04		lda #$04		lda	#4
.8f98	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.8f9b					_MIExit:
.8f9b	60		rts				rts
.8f9c					MultiplyShort:
.8f9c	5a		phy				phy 								; save Y
.8f9d	20 d5 9d	jsr $9dd5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fa0	20 fa 9d	jsr $9dfa			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fa3	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa5					_I32MLoop:
.8fa5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa8	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fab	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fae	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fb1	f0 28		beq $8fdb			beq 	_I32MExit 					; exit if zero
.8fb3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb6	29 01		and #$01			and 	#1
.8fb8	f0 0e		beq $8fc8			beq 	_I32MNoAdd
.8fba	20 73 90	jsr $9073			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fbd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fc0	10 06		bpl $8fc8			bpl 	_I32MNoAdd
.8fc2					_I32ShiftRight:
.8fc2	20 21 9e	jsr $9e21			jsr 	NSMShiftRight 				; shift S[X] right
.8fc5	c8		iny				iny 								; increment shift count
.8fc6	80 0a		bra $8fd2			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc8					_I32MNoAdd:
.8fc8	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fcb	70 f5		bvs $8fc2			bvs 	_I32ShiftRight 				; instead.
.8fcd	e8		inx				inx
.8fce	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fd1	ca		dex				dex
.8fd2					_I32MShiftUpper:
.8fd2	e8		inx				inx 								; shift S[X+2] right
.8fd3	e8		inx				inx
.8fd4	20 21 9e	jsr $9e21			jsr 	NSMShiftRight
.8fd7	ca		dex				dex
.8fd8	ca		dex				dex
.8fd9	80 ca		bra $8fa5			bra 	_I32MLoop 					; try again.
.8fdb					_I32MExit:
.8fdb	20 e1 8f	jsr $8fe1			jsr 	CalculateSign
.8fde	98		tya				tya 								; shift in A
.8fdf	7a		ply				ply 								; restore Y and exit
.8fe0	60		rts				rts
.8fe1					CalculateSign:
.8fe1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe4	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fea	0a		asl a				asl 	a 							; shift bit 7 into carry
.8feb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8fef					CompareStrings:
.8fef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8ff2	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff5	29 10		and #$10			and 	#NSBIsString
.8ff7	f0 2c		beq $9025			beq 	_CSTypeError
.8ff9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ffc	85 36		sta $36				sta 	zTemp0
.8ffe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9001	85 37		sta $37				sta 	zTemp0+1
.9003	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9006	85 38		sta $38				sta 	zTemp1
.9008	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.900b	85 39		sta $39				sta 	zTemp1+1
.900d	5a		phy				phy 								; save Y so we can access strings
.900e	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9010					_CSLoop:
.9010	c8		iny				iny
.9011	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9013	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9015	d0 06		bne $901d			bne 	_CSDifferent
.9017	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9019	d0 f5		bne $9010			bne 	_CSLoop 					; still comparing
.901b					_CSExit:
.901b	7a		ply				ply 								; reached end, return zero in A from EOS
.901c	60		rts				rts
.901d					_CSDifferent:
.901d	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.901f	90 fa		bcc $901b			bcc		_CSExit
.9021	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9023	80 f6		bra $901b			bra 	_CSExit
.9025					_CSTypeError:
.9025	4c 92 9f	jmp $9f92			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9028					ShiftLeft:
.9028	38		sec				sec
.9029	80 01		bra $902c			bra 	ShiftMain
.902b					ShiftRight:
.902b	18		clc				clc
.902c					ShiftMain:
.902c	fa		plx				plx 								; restore X
.902d	08		php				php 								; save direction
.902e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9031	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9034	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9035	0a		asl a				asl 	a
.9036	10 05		bpl $903d			bpl 	_NotRef
.9038	48		pha				pha
.9039	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903c	68		pla				pla
.903d					_NotRef:
.903d	0a		asl a				asl 	a
.903e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9040	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9043	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9046	f0 03		beq $904b			beq 	_IntegerCode 				; if clear, then we have two integers
.9048	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.904b					_IntegerCode:
.904b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.904e	29 e0		and #$e0			and 	#$E0
.9050	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9053	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9056	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9059	d0 13		bne $906e			bne 	_SMExit0 					; if >= 32 it will always return zero.
.905b					_SMLoop:
.905b	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.905e	30 11		bmi $9071			bmi 	_SMExit 					; exit if done.
.9060	28		plp				plp 								; restore direcition setting
.9061	08		php				php
.9062	90 05		bcc $9069			bcc 	_SMRight
.9064	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; shift left if CS
.9067	80 f2		bra $905b			bra 	_SMLoop
.9069					_SMRight:
.9069	20 21 9e	jsr $9e21			jsr 	NSMShiftRight 				; shift right if CC
.906c	80 ed		bra $905b			bra 	_SMLoop
.906e					_SMExit0:
.906e	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; return zero.
.9071					_SMExit:
.9071	28		plp				plp 								; throw direction
.9072	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9073					AddTopTwoStack:
.9073	18		clc				clc
.9074	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9077	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.907a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.907d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9080	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9083	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9086	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9089	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.908c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.908f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9092	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9095	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9098	60		rts				rts
.9099					SubTopTwoStack:
.9099	38		sec				sec
.909a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.909d	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90a0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90a3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a6	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90ac	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90af	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90b2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b8	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90bb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90be	60		rts				rts
.90bf					AddInteger:
.90bf	fa		plx				plx
.90c0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90c3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c7	0a		asl a				asl 	a
.90c8	10 05		bpl $90cf			bpl 	_NotRef
.90ca	48		pha				pha
.90cb	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ce	68		pla				pla
.90cf					_NotRef:
.90cf	0a		asl a				asl 	a 							; put MSB of type into A:7
.90d0	30 0b		bmi $90dd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90d2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d8	f0 06		beq $90e0			beq 	_IntegerCode 				; if clear, then we have two integers
.90da	4c 27 93	jmp $9327			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90dd					_StringData:
.90dd	4c 4f 8e	jmp $8e4f			jmp 	StringConcat							; at least one string - don't know both are strings.
.90e0					_IntegerCode:
.90e0					AddCode:
.90e0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90e3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e6	10 8b		bpl $9073			bpl 	AddTopTwoStack
.90e8	20 99 90	jsr $9099			jsr 	SubTopTwoStack 				; do a physical subtraction
.90eb	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90ee	10 09		bpl $90f9			bpl 	_AddExit
.90f0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90f3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f6	20 b3 9d	jsr $9db3			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f9					_AddExit:
.90f9	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; check for -0
.90fc	d0 03		bne $9101			bne 	_AddNonZero
.90fe	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9101					_AddNonZero:
.9101	60		rts				rts
.9102					SubInteger:
.9102	fa		plx				plx
.9103	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9106	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9109	0a		asl a				asl 	a 							; shift reference bit into sign bit
.910a	0a		asl a				asl 	a
.910b	10 05		bpl $9112			bpl 	_NotRef
.910d	48		pha				pha
.910e	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9111	68		pla				pla
.9112					_NotRef:
.9112	0a		asl a				asl 	a 							; put MSB of type into A:7
.9113	30 0b		bmi $9120			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9115	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9118	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.911b	f0 06		beq $9123			beq 	_IntegerCode 				; if clear, then we have two integers
.911d	4c 2c 93	jmp $932c			jmp 	FloatingPointSub 							; otherwise at least one float.
.9120					_StringData:
.9120	4c 9c 9f	jmp $9f9c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9123					_IntegerCode:
.9123	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9126	49 80		eor #$80			eor 	#$80
.9128	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.912b	80 b3		bra $90e0			bra 	AddCode 					; and do the same code as add.
.912d					AndInteger:
.912d	fa		plx				plx
.912e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9131	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9134	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9135	0a		asl a				asl 	a
.9136	10 05		bpl $913d			bpl 	_NotRef
.9138	48		pha				pha
.9139	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.913c	68		pla				pla
.913d					_NotRef:
.913d	0a		asl a				asl 	a
.913e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9140	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9143	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9146	f0 03		beq $914b			beq 	_IntegerCode 				; if clear, then we have two integers
.9148	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.914b					_IntegerCode:
.914b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.914e	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9151	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9154	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9157	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.915a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.915d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9160	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9163	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9166	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9169	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.916c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.916f	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9172	60		rts				rts
.9173					OraInteger:
.9173	fa		plx				plx
.9174	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9177	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.917a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.917b	0a		asl a				asl 	a
.917c	10 05		bpl $9183			bpl 	_NotRef
.917e	48		pha				pha
.917f	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9182	68		pla				pla
.9183					_NotRef:
.9183	0a		asl a				asl 	a
.9184	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9186	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9189	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.918c	f0 03		beq $9191			beq 	_IntegerCode 				; if clear, then we have two integers
.918e	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.9191					_IntegerCode:
.9191	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9194	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9197	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.919a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.919d	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91a3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a6	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ac	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91af	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91b2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b5	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b8	60		rts				rts
.91b9					EorInteger:
.91b9	fa		plx				plx
.91ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91bd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91c0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91c1	0a		asl a				asl 	a
.91c2	10 05		bpl $91c9			bpl 	_NotRef
.91c4	48		pha				pha
.91c5	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c8	68		pla				pla
.91c9					_NotRef:
.91c9	0a		asl a				asl 	a
.91ca	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91cc	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91cf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91d2	f0 03		beq $91d7			beq 	_IntegerCode 				; if clear, then we have two integers
.91d4	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.91d7					_IntegerCode:
.91d7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91da	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91dd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91e0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91e3	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91ec	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91ef	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91f2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f5	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91fb	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91fe	60		rts				rts
.91ff					WordIndirect:
.91ff	fa		plx				plx
.9200	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9203	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9206	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9207	0a		asl a				asl 	a
.9208	10 05		bpl $920f			bpl 	_NotRef
.920a	48		pha				pha
.920b	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920e	68		pla				pla
.920f					_NotRef:
.920f	0a		asl a				asl 	a
.9210	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9212	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9215	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9218	f0 03		beq $921d			beq 	_IntegerCode 				; if clear, then we have two integers
.921a	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.921d					_IntegerCode:
.921d	20 e0 90	jsr $90e0			jsr 	AddCode 					; add the two values
.9220	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9222	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9225	60		rts				rts
.9226					ByteIndirect:
.9226	fa		plx				plx
.9227	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.922a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.922d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.922e	0a		asl a				asl 	a
.922f	10 05		bpl $9236			bpl 	_NotRef
.9231	48		pha				pha
.9232	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9235	68		pla				pla
.9236					_NotRef:
.9236	0a		asl a				asl 	a
.9237	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9239	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.923c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.923f	f0 03		beq $9244			beq 	_IntegerCode 				; if clear, then we have two integers
.9241	4c 92 9f	jmp $9f92			jmp 	TypeError 					; anything else, type mismatch.
.9244					_IntegerCode:
.9244	20 e0 90	jsr $90e0			jsr 	AddCode 					; add the two values
.9247	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9249	9d 00 04	sta $0400,x			sta 	NSStatus,x
.924c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.924d					ConvertInt16:
.924d	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9250	8e 10 04	stx $0410			stx 	NSMantissa1
.9253	9c 18 04	stz $0418			stz 	NSMantissa2
.9256	9c 20 04	stz $0420			stz 	NSMantissa3
.9259	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.925c	a2 00		ldx #$00			ldx 	#0 							; stack level
.925e	a9 0a		lda #$0a			lda 	#10 						; base
.9260	80 00		bra $9262			bra 	ConvertInt32
.9262					ConvertInt32:
.9262	5a		phy				phy
.9263	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9265	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9268	10 08		bpl $9272			bpl 	_CI32NotNeg
.926a	48		pha				pha
.926b	a9 2d		lda #$2d			lda 	#'-'
.926d	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9270	c8		iny				iny
.9271	68		pla				pla
.9272					_CI32NotNeg:
.9272	20 80 92	jsr $9280			jsr 	_CI32DivideConvert 			; recursive conversion
.9275	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9277	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.927a	7a		ply				ply
.927b	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.927d	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.927f	60		rts				rts
.9280					_CI32DivideConvert:
.9280	e8		inx				inx 								; write to next slot up
.9281	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.9284	ca		dex				dex
.9285	20 24 8f	jsr $8f24			jsr 	Int32Divide 				; divide
.9288	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.928b	48		pha				pha
.928c	20 d3 8e	jsr $8ed3			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.928f	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; is it zero ?
.9292	f0 06		beq $929a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9294	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9297	20 80 92	jsr $9280			jsr 	_CI32DivideConvert 			; and recusrively call.
.929a					_CI32NoRecurse:
.929a	68		pla				pla 								; remainder
.929b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.929d	90 02		bcc $92a1			bcc 	_CI32NotHex
.929f	69 26		adc #$26			adc 	#6+32
.92a1					_CI32NotHex:
.92a1	69 30		adc #$30			adc 	#48
.92a3	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92a6	c8		iny				iny
.92a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a8					PrecedenceLevel:
>92a8	04					.byte	 4	; $00 <<
>92a9	02					.byte	 2	; $01 <=
>92aa	02					.byte	 2	; $02 <>
>92ab	00					.byte	 0	; $03 !!3
>92ac	00					.byte	 0	; $04 ><
>92ad	02					.byte	 2	; $05 >=
>92ae	04					.byte	 4	; $06 >>
>92af	00					.byte	 0	; $07 !!7
>92b0	00					.byte	 0	; $08 !!8
>92b1	00					.byte	 0	; $09 !!9
>92b2	00					.byte	 0	; $0a !!10
>92b3	00					.byte	 0	; $0b !!11
>92b4	00					.byte	 0	; $0c !!12
>92b5	00					.byte	 0	; $0d !!13
>92b6	00					.byte	 0	; $0e !!14
>92b7	00					.byte	 0	; $0f !!15
>92b8	00					.byte	 0	; $10 @
>92b9	00					.byte	 0	; $11 !!17
>92ba	00					.byte	 0	; $12 !!18
>92bb	00					.byte	 0	; $13 [
>92bc	04					.byte	 4	; $14 \
>92bd	00					.byte	 0	; $15 ]
>92be	01					.byte	 1	; $16 ^
>92bf	00					.byte	 0	; $17 _
>92c0	00					.byte	 0	; $18 `
>92c1	00					.byte	 0	; $19 !!25
>92c2	00					.byte	 0	; $1a !!26
>92c3	00					.byte	 0	; $1b {
>92c4	01					.byte	 1	; $1c |
>92c5	00					.byte	 0	; $1d }
>92c6	00					.byte	 0	; $1e ~
>92c7	00					.byte	 0	; $1f [7m<7F>[m
>92c8	00					.byte	 0	; $20
>92c9	05					.byte	 5	; $21 !
>92ca	00					.byte	 0	; $22 "
>92cb	00					.byte	 0	; $23 #
>92cc	05					.byte	 5	; $24 $
>92cd	04					.byte	 4	; $25 %
>92ce	01					.byte	 1	; $26 &
>92cf	00					.byte	 0	; $27 '
>92d0	00					.byte	 0	; $28 (
>92d1	00					.byte	 0	; $29 )
>92d2	04					.byte	 4	; $2a *
>92d3	03					.byte	 3	; $2b +
>92d4	00					.byte	 0	; $2c ,
>92d5	03					.byte	 3	; $2d -
>92d6	00					.byte	 0	; $2e .
>92d7	04					.byte	 4	; $2f /
>92d8	00					.byte	 0	; $30 0
>92d9	00					.byte	 0	; $31 1
>92da	00					.byte	 0	; $32 2
>92db	00					.byte	 0	; $33 3
>92dc	00					.byte	 0	; $34 4
>92dd	00					.byte	 0	; $35 5
>92de	00					.byte	 0	; $36 6
>92df	00					.byte	 0	; $37 7
>92e0	00					.byte	 0	; $38 8
>92e1	00					.byte	 0	; $39 9
>92e2	00					.byte	 0	; $3a :
>92e3	00					.byte	 0	; $3b ;
>92e4	02					.byte	 2	; $3c <
>92e5	02					.byte	 2	; $3d =
>92e6	02					.byte	 2	; $3e >
>92e7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e8					EvaluateExpressionAt0:
.92e8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92ea					EvaluateExpression:
.92ea	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92ec					EvaluateExpressionAtPrecedence:
.92ec	48		pha				pha 								; save precedence level
.92ed	20 c4 97	jsr $97c4			jsr 	EvaluateTerm 				; evaluate term into level X.
.92f0	68		pla				pla 								; restore precedence level.
.92f1					_EXPRLoop:
.92f1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92f3	b1 30		lda ($30),y			lda 	(codePtr),y
.92f5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f7	b0 25		bcs $931e			bcs 	_EXPRExit
.92f9	da		phx				phx 								; read the operator precedence
.92fa	aa		tax				tax
.92fb	bd a8 92	lda $92a8,x			lda 	PrecedenceLevel,x
.92fe	fa		plx				plx
.92ff	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9301	f0 1b		beq $931e			beq 	_EXPRExit
.9303	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9305	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9307	c5 37		cmp $37				cmp 	zTemp0+1
.9309	b0 13		bcs $931e			bcs		_EXPRExit 					; if current >= operator exit
.930b	48		pha				pha 								; save current precedence.
.930c	b1 30		lda ($30),y			lda 	(codePtr),y
.930e	c8		iny				iny
.930f	48		pha				pha
.9310	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9312	e8		inx				inx 								; work out the right hand side.
.9313	20 ec 92	jsr $92ec			jsr 	EvaluateExpressionAtPrecedence
.9316	ca		dex				dex
.9317	68		pla				pla 								; get operator, call the code.
.9318	20 21 93	jsr $9321			jsr 	_EXPRCaller
.931b	68		pla				pla 								; restore precedence level
.931c	80 d3		bra $92f1			bra 	_EXPRLoop 					; and go round.
.931e					_EXPRExit:
.931e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9320	60		rts				rts
.9321					_EXPRCaller:
.9321	da		phx				phx 								; save on stack, first thing is to restore it
.9322	0a		asl a				asl 	a 							; double so can use vectors into X
.9323	aa		tax				tax
.9324	7c 6c 8a	jmp ($8a6c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9327					FloatingPointAdd:
.9327	20 d0 94	jsr $94d0			jsr 	FloatPrepare 				; prepare for floats
.932a	80 0b		bra $9337			bra 	FloatAdd
.932c					FloatingPointSub:
.932c	20 d0 94	jsr $94d0			jsr 	FloatPrepare 				; prepare for floats
.932f					FloatSubtract:
.932f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9332	49 80		eor #$80			eor 	#$80
.9334	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9337					FloatAdd:
.9337	48		pha				pha
.9338	5a		phy				phy
.9339	20 e1 94	jsr $94e1			jsr 	NSNormalise 				; normalise S[X]
.933c	f0 5c		beq $939a			beq 	_FAReturn1
.933e	e8		inx				inx 								; normalise S[X+1]
.933f	20 e1 94	jsr $94e1			jsr 	NSNormalise
.9342	ca		dex				dex
.9343	c9 00		cmp #$00			cmp 	#0
.9345	f0 77		beq $93be			beq 	_FAExit 					; if so, just return A
.9347	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.934a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.934d	f0 1b		beq $936a			beq 	_FAExponentsEqual
.934f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9352	a8		tay				tay
.9353	38		sec				sec 								; do a signed comparison of the exponents.
.9354	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9357	50 02		bvc $935b			bvc 	_FANoSignedChange
.9359	49 80		eor #$80			eor 	#$80
.935b					_FANoSignedChange:
.935b	29 80		and #$80			and 	#$80
.935d	10 03		bpl $9362			bpl 	_FAHaveMax
.935f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9362					_FAHaveMax:
.9362	20 c1 93	jsr $93c1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9365	e8		inx				inx
.9366	20 c1 93	jsr $93c1			jsr 	_FAShiftToExponent
.9369	ca		dex				dex
.936a					_FAExponentsEqual:
.936a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.936d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9370	30 10		bmi $9382			bmi 	_FADifferentSigns
.9372	20 73 90	jsr $9073			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9375	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9378	10 44		bpl $93be			bpl 	_FAExit 					; if no, we are done.
.937a	20 21 9e	jsr $9e21			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.937d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9380	80 3c		bra $93be			bra 	_FAExit
.9382					_FADifferentSigns:
.9382	20 99 90	jsr $9099			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9385	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9388	10 06		bpl $9390			bpl 	_FACheckZero 				; if no, check for -0
.938a	20 aa 9d	jsr $9daa			jsr 	NSMNegate 					; netate result
.938d	20 b3 9d	jsr $9db3			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9390					_FACheckZero:
.9390	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero	 				; check for -0
.9393	d0 29		bne $93be			bne 	_FAExit
.9395	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9398	80 24		bra $93be			bra 	_FAExit
.939a					_FAReturn1:
.939a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.939d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93a0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93a3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a6	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93ac	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93af	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93b2	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93bb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93be					_FAExit:
.93be	7a		ply				ply
.93bf	68		pla				pla
.93c0	60		rts				rts
.93c1					_FAShiftToExponent:
.93c1					_FAShiftToExponent2:
.93c1	98		tya				tya 								; compare Y to exponent
.93c2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c5	f0 08		beq $93cf			beq 	_FASEExit 					; exit if so.
.93c7	20 21 9e	jsr $9e21			jsr 	NSMShiftRight	 			; shift the mantissa right
.93ca	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93cd	80 f2		bra $93c1			bra 	_FAShiftToExponent2
.93cf					_FASEExit:
.93cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93d0					CompareFloat:
.93d0	20 2f 93	jsr $932f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93d3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d6	29 f8		and #$f8			and 	#$F8
.93d8	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93db	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93de	f0 09		beq $93e9			beq 	_FCExit 					; zero, so approximately identical
.93e0	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93e2	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e5	10 02		bpl $93e9			bpl 	_FCExit
.93e7					_FCNegative:
.93e7	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e9					_FCExit:
.93e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93ea					FDivideCommand:
.93ea	fa		plx				plx	 								; restore stack position
.93eb	20 d0 94	jsr $94d0			jsr 	FloatPrepare 				; prepare for floats
.93ee					FloatDivide:
.93ee	48		pha				pha
.93ef	e8		inx				inx
.93f0	20 e1 94	jsr $94e1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93f3	ca		dex				dex
.93f4	c9 00		cmp #$00			cmp 	#0
.93f6	f0 20		beq $9418			beq 	_FDZero
.93f8	20 e1 94	jsr $94e1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93fb	f0 19		beq $9416			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93fd	20 46 8f	jsr $8f46			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9400	20 d3 8e	jsr $8ed3			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9403	20 e1 94	jsr $94e1			jsr		NSNormalise 				; renormalise
.9406	20 e1 8f	jsr $8fe1			jsr 	CalculateSign 				; calculate result sign
.9409	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.940c	38		sec				sec
.940d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9410	38		sec				sec
.9411	e9 1e		sbc #$1e			sbc 	#30
.9413	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9416					_FDExit:
.9416	68		pla				pla
.9417	60		rts				rts
.9418					_FDZero:
.9418	a9 03		lda #$03		lda	#3
.941a	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.941d					FloatFractionalPart:
.941d	5a		phy				phy
.941e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9421	29 7f		and #$7f			and 	#$7F
.9423	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9426	20 e1 94	jsr $94e1			jsr 	NSNormalise
.9429	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.942c	38		sec				sec
.942d	e9 e0		sbc #$e0			sbc 	#$E0
.942f	90 31		bcc $9462			bcc 	_FFPExit 					; already fractional
.9431	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9433	b0 2a		bcs $945f			bcs 	_FFPZero
.9435	a8		tay				tay 								; put count to do in Y
.9436	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9439	20 64 94	jsr $9464			jsr 	_FFPPartial
.943c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.943f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9442	20 64 94	jsr $9464			jsr 	_FFPPartial
.9445	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9448	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.944b	20 64 94	jsr $9464			jsr 	_FFPPartial
.944e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9451	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9454	20 64 94	jsr $9464			jsr 	_FFPPartial
.9457	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.945a	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; zeroed check.
.945d	d0 03		bne $9462			bne 	_FFPExit
.945f					_FFPZero:
.945f	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.9462					_FFPExit:
.9462	7a		ply				ply
.9463	60		rts				rts
.9464					_FFPPartial:
.9464	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9466	f0 17		beq $947f			beq 	_FFFPPExit
.9468	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.946a	b0 0c		bcs $9478			bcs 	_FFFPPWholeByte
.946c	5a		phy				phy
.946d					_FFFPPLeft:
.946d	0a		asl a				asl 	a
.946e	88		dey				dey
.946f	d0 fc		bne $946d			bne 	_FFFPPLeft
.9471	7a		ply				ply
.9472					_FFFPPRight:
.9472	4a		lsr a				lsr 	a
.9473	88		dey				dey
.9474	d0 fc		bne $9472			bne 	_FFFPPRight
.9476	80 07		bra $947f			bra 	_FFFPPExit
.9478					_FFFPPWholeByte:
.9478	98		tya				tya 								; subtract 8 from count
.9479	38		sec				sec
.947a	e9 08		sbc #$08			sbc 	#8
.947c	a8		tay				tay
.947d	a9 00		lda #$00			lda 	#0 							; and clear all
.947f					_FFFPPExit:
.947f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9480					FloatIntegerPart:
.9480	48		pha				pha
.9481	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9484	f0 1f		beq $94a5			beq 	_FIPExit 					; if so do nothing
.9486	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; is it zero ?
.9489	f0 17		beq $94a2			beq 	_FIPZero 					; if so return zero.
.948b	20 e1 94	jsr $94e1			jsr 	NSNormalise 				; normalise
.948e	f0 12		beq $94a2			beq 	_FIPZero 					; normalised to zero, exit zero
.9490					_FIPShift:
.9490	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9493	10 08		bpl $949d			bpl 	_FIPCheckZero
.9495	20 21 9e	jsr $9e21			jsr 	NSMShiftRight 				; shift mantissa right
.9498	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.949b	80 f3		bra $9490			bra 	_FIPShift
.949d					_FIPCheckZero:
.949d	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; avoid -0 problem
.94a0	d0 03		bne $94a5			bne 	_FIPExit 					; set to zero if mantissa zero.
.94a2					_FIPZero:
.94a2	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.94a5					_FIPExit:
.94a5	68		pla				pla
.94a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a7					FloatingPointMultiply:
.94a7	20 d0 94	jsr $94d0			jsr 	FloatPrepare 				; prepare for floats
.94aa					FloatMultiply:
.94aa	48		pha				pha
.94ab	20 e1 94	jsr $94e1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94ae	f0 1b		beq $94cb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94b0	e8		inx				inx
.94b1	20 e1 94	jsr $94e1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b4	ca		dex				dex
.94b5	c9 00		cmp #$00			cmp 	#0
.94b7	f0 0f		beq $94c8			beq 	_FDSetZero
.94b9	20 9c 8f	jsr $8f9c			jsr 	MultiplyShort 				; calculate the result.
.94bc	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94bf	18		clc				clc
.94c0	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94c3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c6	80 03		bra $94cb			bra 	_FDExit
.94c8					_FDSetZero:
.94c8	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; return 0
.94cb					_FDExit:
.94cb	20 e1 94	jsr $94e1			jsr 	NSNormalise 				; normalise the result
.94ce	68		pla				pla
.94cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94d0					FloatPrepare:
.94d0	20 03 96	jsr $9603			jsr 	DereferenceTopTwo 			; dereference the top two values
.94d3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d9	29 10		and #$10			and 	#NSBIsString
.94db	d0 01		bne $94de			bne 	_FDType
.94dd	60		rts				rts
.94de					_FDType:
.94de	4c 92 9f	jmp $9f92			jmp 	TypeError
.94e1					NSNormalise:
.94e1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e4	29 80		and #$80			and 	#$80
.94e6	09 08		ora #$08			ora 	#NSTFloat
.94e8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94eb	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; if zero exit
.94ee	d0 09		bne $94f9			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94f0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94f3	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f6	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f8	60		rts				rts
.94f9					_NSNormaliseOptimise:
.94f9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94fc	d0 22		bne $9520			bne 	_NSNormaliseLoop
.94fe	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9501	30 1d		bmi $9520			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9503	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9506	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9509	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.950c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.950f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9512	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9515	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9518	38		sec				sec
.9519	e9 08		sbc #$08			sbc 	#8
.951b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.951e	80 d9		bra $94f9			bra 	_NSNormaliseOptimise
.9520					_NSNormaliseLoop:
.9520	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9523	70 08		bvs $952d			bvs 	_NSNExit 					; exit if so with Z flag clear
.9525	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; shift mantissa left
.9528	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.952b	80 f3		bra $9520			bra 	_NSNormaliseLoop
.952d					_NSNExit:
.952d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.952f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9530					AssignNumber:
.9530	5a		phy				phy
.9531	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9534	85 36		sta $36				sta 	zTemp0
.9536	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9539	85 37		sta $37				sta 	zTemp0+1
.953b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.953e	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9540	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9543	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9545	c9 08		cmp #$08			cmp 	#NSTFloat
.9547	f0 2a		beq $9573			beq 	_ANFloat
.9549	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.954c	f0 05		beq $9553			beq		_ANNotFloat
.954e	e8		inx				inx
.954f	20 80 94	jsr $9480			jsr 	FloatIntegerPart 			; make it an integer
.9552	ca		dex				dex
.9553					_ANNotFloat:
.9553	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9556	29 03		and #$03			and 	#3
.9558	d0 05		bne $955f			bne 	_ANByteWord
.955a	20 7f 95	jsr $957f			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.955d	80 1e		bra $957d			bra 	_ANExit
.955f					_ANByteWord:
.955f	48		pha				pha 								; save count
.9560	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9563	92 36		sta ($36)			sta 	(zTemp0)
.9565	68		pla				pla
.9566	c9 01		cmp #$01			cmp	 	#1
.9568	f0 13		beq $957d			beq 	_ANExit
.956a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.956d	a0 01		ldy #$01			ldy 	#1
.956f	91 36		sta ($36),y			sta 	(zTemp0),y
.9571	80 0a		bra $957d			bra 	_ANExit
.9573					_ANFloat:
.9573	20 7f 95	jsr $957f			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9576	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9579	a0 04		ldy #$04			ldy 	#4
.957b	91 36		sta ($36),y			sta 	(zTemp0),y
.957d					_ANExit:
.957d	7a		ply				ply
.957e	60		rts				rts
.957f					_ANCopy4PackSign:
.957f	a0 03		ldy #$03			ldy 	#3
.9581	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9584	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9586	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9589	91 36		sta ($36),y			sta 	(zTemp0),y
.958b	88		dey				dey
.958c	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.958f	91 36		sta ($36),y			sta 	(zTemp0),y
.9591	88		dey				dey
.9592	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9595	91 36		sta ($36),y			sta 	(zTemp0),y
.9597	88		dey				dey
.9598	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.959b	91 36		sta ($36),y			sta 	(zTemp0),y
.959d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.959e					AssignString:
.959e	5a		phy				phy
.959f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95a2	85 38		sta $38				sta 	zTemp1
.95a4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a7	85 39		sta $39				sta 	zTemp1+1
.95a9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95ac	85 36		sta $36				sta 	zTemp0
.95ae	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95b1	85 37		sta $37				sta 	zTemp0+1
.95b3	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b5	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b7	f0 23		beq $95dc			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b9	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95ba	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95bc	e9 02		sbc #$02			sbc 	#2
.95be	85 3c		sta $3c				sta 	zsTemp
.95c0	a0 01		ldy #$01			ldy 	#1
.95c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c4	e9 00		sbc #$00			sbc 	#0
.95c6	85 3d		sta $3d				sta 	zsTemp+1
.95c8	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95ca					_ASGetLength:
.95ca	c8		iny				iny
.95cb	b1 38		lda ($38),y			lda 	(zTemp1),y
.95cd	d0 fb		bne $95ca			bne 	_ASGetLength
.95cf	98		tya				tya 								; is this length <= current length
.95d0	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95d2	90 20		bcc $95f4			bcc 	_ASCopyString
.95d4	f0 1e		beq $95f4			beq 	_ASCopyString
.95d6	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d8	a0 01		ldy #$01			ldy 	#1
.95da	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95dc					_ASNewStringRequired:
.95dc	e8		inx				inx 								; concrete the new string.
.95dd	20 d4 a2	jsr $a2d4			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95e0	ca		dex				dex
.95e1	18		clc				clc
.95e2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e5	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e7	92 36		sta ($36)			sta 	(zTemp0)
.95e9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ec	69 00		adc #$00			adc 	#0
.95ee	a0 01		ldy #$01			ldy 	#1
.95f0	91 36		sta ($36),y			sta 	(zTemp0),y
.95f2	80 0d		bra $9601			bra 	_ASExit
.95f4					_ASCopyString:
.95f4	a0 00		ldy #$00			ldy 	#0
.95f6					_ASCopyLoop:
.95f6	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f8	c8		iny				iny
.95f9	c8		iny				iny
.95fa	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95fc	88		dey				dey
.95fd	c9 00		cmp #$00			cmp 	#0
.95ff	d0 f5		bne $95f6			bne 	_ASCopyLoop
.9601					_ASExit:
.9601	7a		ply				ply
.9602	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9603					DereferenceTopTwo:
.9603	e8		inx				inx
.9604	20 08 96	jsr $9608			jsr 	Dereference 				; deref x+1
.9607	ca		dex				dex  								; falls through to deref x
.9608					Dereference:
.9608	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.960b	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.960d	f0 57		beq $9666			beq 	_DRFExit 					; not a reference
.960f	5a		phy				phy
.9610	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9613	85 36		sta $36				sta 	zTemp0
.9615	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9618	85 37		sta $37				sta 	zTemp0+1
.961a	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.961d	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.961f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9622	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9625	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9627	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9629	f0 0f		beq $963a			beq 	_DRFDereferenceTwo
.962b	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.962d	f0 39		beq $9668			beq 	_DRFFull
.962f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9632	29 03		and #$03			and 	#3
.9634	f0 32		beq $9668			beq 	_DRFFull 					; the whole word
.9636	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9638	f0 07		beq $9641			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.963a					_DRFDereferenceTwo:
.963a	a0 01		ldy #$01			ldy 	#1
.963c	b1 36		lda ($36),y			lda 	(zTemp0),y
.963e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9641					_DRFClear23:
.9641	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9644	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9647	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.964a	29 18		and #$18			and 	#NSBTypeMask
.964c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.964f	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9651	d0 12		bne $9665			bne 	_DRFNotString
.9653	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9656	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9659	d0 0a		bne $9665			bne 	_DRFNotString
.965b	a9 67		lda #$67			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.965d	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9660	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9662	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9665					_DRFNotString
.9665	7a		ply				ply 								; restore Y and exit
.9666					_DRFExit:
.9666	60		rts				rts
.9667					_DRFNullString:
>9667	00						.byte 	0
.9668					_DRFFull:
.9668	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.966a	b1 36		lda ($36),y			lda 	(zTemp0),y
.966c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966f	c8		iny				iny
.9670	b1 36		lda ($36),y			lda 	(zTemp0),y
.9672	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9675	c8		iny				iny
.9676	b1 36		lda ($36),y			lda 	(zTemp0),y
.9678	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.967b	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.967e	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9681	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9683	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9686	f0 06		beq $968e			beq 	_DRFNoExponent
.9688	c8		iny				iny 								; if not, read the exponent as well.
.9689	b1 36		lda ($36),y			lda 	(zTemp0),y
.968b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.968e					_DRFNoExponent:
.968e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9691	10 0d		bpl $96a0			bpl 	_DRFExit2 					; if not, then exit.
.9693	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9695	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9698	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.969b	09 80		ora #$80			ora 	#NSBIsNegative
.969d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96a0					_DRFExit2:
.96a0	7a		ply				ply
.96a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96a2					EncodeNumberStart:
.96a2	38		sec				sec
.96a3	80 01		bra $96a6			bra 	EncodeNumberContinue+1
.96a5					EncodeNumberContinue:
.96a5	18		clc				clc
.96a6					EncodeNumber:
.96a6	08		php				php 								; save reset.
.96a7	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a9	f0 12		beq $96bd			beq 	_ENIsOkay
.96ab	c9 30		cmp #$30			cmp 	#"0"
.96ad	90 04		bcc $96b3			bcc 	_ENBadNumber
.96af	c9 3a		cmp #$3a			cmp 	#"9"+1
.96b1	90 0a		bcc $96bd			bcc 	_ENIsOkay
.96b3					_ENBadNumber:
.96b3	28		plp				plp 								; throw saved reset
.96b4	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b9	f0 7e		beq $9739			beq 	_ENConstructFinal
.96bb					_ENFail:
.96bb	18		clc				clc 								; not allowed
.96bc	60		rts				rts
.96bd					_ENIsOkay:
.96bd	28		plp				plp 								; are we restarting
.96be	90 15		bcc $96d5			bcc 	_ENNoRestart
.96c0					_ENStartEncode:
.96c0	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96c2	f0 0c		beq $96d0			beq 	_ENFirstDP
.96c4	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c6	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.96c9	a9 01		lda #$01			lda 	#ESTA_Low
.96cb					_ENExitChange:
.96cb	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96ce	38		sec				sec
.96cf	60		rts				rts
.96d0					_ENFirstDP:
.96d0	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; clear integer part
.96d3	80 3f		bra $9714			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d5					_ENNoRestart:
.96d5	48		pha				pha 								; save on stack.
.96d6	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d9	c9 01		cmp #$01			cmp 	#ESTA_Low
.96db	f0 09		beq $96e6			beq  	_ESTALowState
.96dd	c9 02		cmp #$02			cmp 	#ESTA_High
.96df	f0 29		beq $970a			beq 	_ESTAHighState
.96e1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96e3	f0 3b		beq $9720			beq 	_ESTADecimalState
>96e5	db						.byte 	$DB 						; causes a break in the emulator
.96e6					_ESTALowState:
.96e6	68		pla				pla 								; get value back
.96e7	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e9	f0 29		beq $9714			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96eb	29 0f		and #$0f			and 	#15 						; make digit
.96ed	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96f0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96f3	0a		asl a				asl 	a
.96f4	0a		asl a				asl 	a
.96f5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f8	0a		asl a				asl 	a
.96f9	6d 86 04	adc $0486			adc 	DigitTemp
.96fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96ff	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9701	90 05		bcc $9708			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9703	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9705	8d 85 04	sta $0485			sta 	EncodeState
.9708					_ESTANoSwitch:
.9708	38		sec				sec
.9709	60		rts				rts
.970a					_ESTAHighState:
.970a	68		pla				pla 								; get value back
.970b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.970d	f0 05		beq $9714			beq 	_ESTASwitchFloat
.970f	20 73 97	jsr $9773			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9712	38		sec				sec
.9713	60		rts				rts
.9714					_ESTASwitchFloat:
.9714	9c 87 04	stz $0487			stz 	DecimalCount
.9717	e8		inx				inx 								; zero the decimal additive.
.9718	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.971b	ca		dex				dex
.971c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.971e	80 ab		bra $96cb			bra 	_ENExitChange
.9720					_ESTADecimalState:
.9720	68		pla				pla 								; digit.
.9721	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9723	f0 96		beq $96bb			beq 	_ENFail
.9725	e8		inx				inx 								; put digit into fractional part of X+1
.9726	20 73 97	jsr $9773			jsr 	ESTAShiftDigitIntoMantissa
.9729	ca		dex				dex
.972a	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.972d	ad 87 04	lda $0487			lda 	DecimalCount
.9730	c9 0b		cmp #$0b			cmp 	#11
.9732	f0 02		beq $9736			beq 	_ESTADSFail
.9734	38		sec				sec
.9735	60		rts				rts
.9736					_ESTADSFail:
.9736	4c 8d 9f	jmp $9f8d			jmp 	RangeError
.9739					_ENConstructFinal:
.9739	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.973c	f0 33		beq $9771			beq 	_ENCFExit 					; no decimals
.973e	5a		phy				phy
.973f	0a		asl a				asl 	a 							; x 4 and CLC
.9740	0a		asl a				asl 	a
.9741	6d 87 04	adc $0487			adc 	DecimalCount
.9744	a8		tay				tay
.9745	b9 4c 9f	lda $9f4c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9748	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.974b	b9 4d 9f	lda $9f4d,y			lda 	DecimalScalarTable-5+1,y
.974e	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9751	b9 4e 9f	lda $9f4e,y			lda 	DecimalScalarTable-5+2,y
.9754	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9757	b9 4f 9f	lda $9f4f,y			lda 	DecimalScalarTable-5+3,y
.975a	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.975d	b9 50 9f	lda $9f50,y			lda 	DecimalScalarTable-5+4,y
.9760	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9763	a9 08		lda #$08			lda 	#NSTFloat
.9765	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9768	7a		ply				ply
.9769	e8		inx				inx 								; multiply decimal const by decimal scalar
.976a	20 aa 94	jsr $94aa			jsr 	FloatMultiply
.976d	ca		dex				dex
.976e	20 37 93	jsr $9337			jsr 	FloatAdd 					; add to integer part.
.9771					_ENCFExit:
.9771	18		clc				clc 								; reject the digit.
.9772	60		rts				rts
.9773					ESTAShiftDigitIntoMantissa:
.9773	29 0f		and #$0f			and 	#15 						; save digit
.9775	48		pha				pha
.9776	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9779	48		pha				pha
.977a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.977d	48		pha				pha
.977e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9781	48		pha				pha
.9782	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9785	48		pha				pha
.9786	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 2
.9789	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 4
.978c	18		clc				clc 								; pop mantissa and add
.978d	68		pla				pla
.978e	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9791	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9794	68		pla				pla
.9795	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9798	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.979b	68		pla				pla
.979c	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.979f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97a2	68		pla				pla
.97a3	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a9	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 10
.97ac	68		pla				pla 								; add digit
.97ad	18		clc				clc
.97ae	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97b1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b4	90 0d		bcc $97c3			bcc 	_ESTASDExit
.97b6	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b9	d0 08		bne $97c3			bne 	_ESTASDExit
.97bb	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97be	d0 03		bne $97c3			bne 	_ESTASDExit
.97c0	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97c3					_ESTASDExit:
.97c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c4					EvaluateTerm:
.97c4	b1 30		lda ($30),y			lda 	(codePtr),y
.97c6	30 18		bmi $97e0			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c8	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97ca	b0 6f		bcs $983b			bcs 	_ETVariable
.97cc	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97ce	90 6e		bcc $983e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97d0	c9 3a		cmp #$3a			cmp 	#'9'+1
.97d2	b0 6a		bcs $983e			bcs 	_ETPuncUnary
.97d4	20 a2 96	jsr $96a2			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d7					_ETNumber:
.97d7	c8		iny				iny 								; keep encoding until we have the numbers
.97d8	b1 30		lda ($30),y			lda 	(codePtr),y
.97da	20 a5 96	jsr $96a5			jsr 	EncodeNumberContinue
.97dd	b0 f8		bcs $97d7			bcs 	_ETNumber 					; go back if accepted.
.97df	60		rts				rts
.97e0					_ETCheckUnary:
.97e0	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97e2	f0 41		beq $9825			beq 	_ETString
.97e4	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e6	f0 12		beq $97fa			beq 	_ETHexConstant
.97e8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97ea	90 0b		bcc $97f7			bcc 	_ETSyntaxError
.97ec	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97ee	b0 07		bcs $97f7			bcs 	_ETSyntaxError
.97f0	da		phx				phx 								; push X on the stack
.97f1	0a		asl a				asl 	a 							; put vector x 2 into X
.97f2	aa		tax				tax
.97f3	c8		iny				iny 								; consume unary function token
.97f4	7c ec 8a	jmp ($8aec,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f7					_ETSyntaxError:
.97f7	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.97fa					_ETHexConstant:
.97fa	c8		iny				iny 								; skip #
.97fb	c8		iny				iny 								; skip count
.97fc	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; clear result
.97ff					_ETHLoop:
.97ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9801	c8		iny				iny 								; and consume
.9802	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9804	f0 1e		beq $9824			beq 	_ETHExit
.9806	48		pha				pha 								; save on stack.
.9807	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 2
.980a	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 4
.980d	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 8
.9810	20 13 9e	jsr $9e13			jsr 	NSMShiftLeft 				; x 16
.9813	68		pla				pla 								; ASCII
.9814	c9 41		cmp #$41			cmp 	#'A'
.9816	90 02		bcc $981a			bcc 	_ETHNotChar
.9818	e9 07		sbc #$07			sbc 	#7
.981a					_ETHNotChar:
.981a	29 0f		and #$0f			and 	#15 						; digit now
.981c	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.981f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9822	80 db		bra $97ff			bra 	_ETHLoop 					; go round.
.9824					_ETHExit:
.9824	60		rts				rts
.9825					_ETString:
.9825	c8		iny				iny 								; look at length
.9826	b1 30		lda ($30),y			lda 	(codePtr),y
.9828	48		pha				pha
.9829	c8		iny				iny 								; first character
.982a	20 f8 a1	jsr $a1f8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.982d	68		pla				pla 								; restore count and save
.982e	85 36		sta $36				sta 	zTemp0
.9830	98		tya				tya 								; add length to Y to skip it.
.9831	18		clc				clc
.9832	65 36		adc $36				adc 	zTemp0
.9834	a8		tay				tay
.9835	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9837	9d 00 04	sta $0400,x			sta 	NSStatus,x
.983a	60		rts				rts
.983b					_ETVariable:
.983b	4c 95 98	jmp $9895			jmp 	VariableHandler
.983e					_ETPuncUnary:
.983e	c8		iny				iny 								; consume the unary character
.983f	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9841	f0 2d		beq $9870			beq 	_ETUnaryNegate
.9843	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9845	f0 39		beq $9880			beq 	_ETDereference
.9847	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9849	f0 43		beq $988e			beq 	_ETParenthesis
.984b	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.984d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.984f	f0 06		beq $9857			beq 	_ETIndirection
.9851	e6 36		inc $36				inc 	zTemp0
.9853	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9855	d0 a0		bne $97f7			bne 	_ETSyntaxError
.9857					_ETIndirection:
.9857	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9859	1a		inc a				inc 	a
.985a	48		pha				pha
.985b	20 c4 97	jsr $97c4			jsr 	EvaluateTerm				; evaluate the term
.985e	20 08 96	jsr $9608			jsr 	Dereference 				; dereference it.
.9861	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9864	d0 07		bne $986d			bne 	_ETTypeMismatch
.9866	68		pla				pla 								; indirection 1-2
.9867	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9869	9d 00 04	sta $0400,x			sta 	NSStatus,x
.986c	60		rts				rts
.986d					_ETTypeMismatch:
.986d	4c 92 9f	jmp $9f92			jmp 	TypeError
.9870					_ETUnaryNegate:
.9870	20 c4 97	jsr $97c4			jsr 	EvaluateTerm				; evaluate the term
.9873	20 08 96	jsr $9608			jsr 	Dereference 				; dereference it.
.9876	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9879	29 10		and #$10			and 	#NSTString
.987b	d0 f0		bne $986d			bne 	_ETTypeMismatch
.987d	4c aa 9d	jmp $9daa			jmp 	NSMNegate  					; just toggles the sign bit.
.9880					_ETDereference:
.9880	20 c4 97	jsr $97c4			jsr 	EvaluateTerm				; evaluate the term
.9883	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9886	29 20		and #$20			and 	#NSBIsReference
.9888	f0 e3		beq $986d			beq 	_ETTypeMismatch
.988a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.988d	60		rts				rts
.988e					_ETParenthesis:
.988e	20 ea 92	jsr $92ea			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9891	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; check for )
.9894	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9895					VariableHandler:
.9895	b1 30		lda ($30),y			lda 	(codePtr),y
.9897	18		clc				clc
.9898	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.989a	85 37		sta $37				sta 	zTemp0+1
.989c	c8		iny				iny
.989d	b1 30		lda ($30),y			lda 	(codePtr),y
.989f	85 36		sta $36				sta 	zTemp0
.98a1	c8		iny				iny
.98a2	18		clc				clc									; copy variable address+3 to mantissa
.98a3	69 03		adc #$03			adc 	#3
.98a5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a8	a5 37		lda $37				lda 	zTemp0+1
.98aa	69 00		adc #$00			adc 	#0
.98ac	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98af	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98b2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b5	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b8	5a		phy				phy
.98b9	a0 02		ldy #$02			ldy 	#2 							; read type
.98bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.98bd	7a		ply				ply
.98be	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98c0	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98c2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c5	29 04		and #$04			and 	#NSBIsArray
.98c7	d0 01		bne $98ca			bne 	_VHArray
.98c9	60		rts				rts
.98ca					_VHArray:
.98ca	e8		inx				inx
.98cb	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98ce	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98d0	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98d3	b1 30		lda ($30),y			lda 	(codePtr),y
.98d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d7	d0 06		bne $98df			bne 	_VHNoSecondIndex
.98d9	c8		iny				iny 								; skip the comma
.98da	e8		inx				inx
.98db	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98de	ca		dex				dex
.98df					_VHNoSecondIndex:
.98df	ca		dex				dex 								; set X back.
.98e0	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; and check the right bracket.
.98e3	5a		phy				phy 								; save position
.98e4	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e8	f0 6b		beq $9955			beq 	_VHBadIndex
.98ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98ed	85 3e		sta $3e				sta 	zaTemp
.98ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f2	85 3f		sta $3f				sta 	zaTemp+1
.98f4	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f8	f0 02		beq $98fc			beq 	_VHHas2Mask
.98fa	a9 ff		lda #$ff			lda 	#$FF
.98fc					_VHHas2Mask:
.98fc	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98ff	f0 54		beq $9955			beq 	_VHBadIndex
.9901	0a		asl a				asl 	a 							; carry will be set if a second index
.9902	90 09		bcc $990d			bcc 	_VHCheckFirstIndex
.9904	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9906	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9908	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.990b	90 48		bcc $9955			bcc 	_VHBadIndex
.990d					_VHCheckFirstIndex:
.990d	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.990f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9911	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9914	90 3f		bcc $9955			bcc 	_VHBadIndex
.9916	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9918	64 37		stz $37				stz 	zTemp0+1
.991a	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.991d	30 0f		bmi $992e			bmi 	_VHNoMultiply
.991f	da		phx				phx
.9920	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9923	48		pha				pha
.9924	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9926	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9928	1a		inc a				inc 	a 							; add 1 for zero base
.9929	fa		plx				plx
.992a	20 93 9d	jsr $9d93			jsr 	Multiply8x8 				; calculate -> Z0
.992d	fa		plx				plx
.992e					_VHNoMultiply:
.992e	18		clc				clc
.992f	a5 36		lda $36				lda 	zTemp0
.9931	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9934	85 36		sta $36				sta 	zTemp0
.9936	a5 37		lda $37				lda 	zTemp0+1
.9938	69 00		adc #$00			adc 	#0
.993a	85 37		sta $37				sta 	zTemp0+1
.993c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.993f	20 fc 84	jsr $84fc			jsr 	ScaleByBaseType
.9942	18		clc				clc
.9943	b2 3e		lda ($3e)			lda 	(zaTemp)
.9945	65 36		adc $36				adc 	zTemp0
.9947	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.994a	a0 01		ldy #$01			ldy 	#1
.994c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.994e	65 37		adc $37				adc 	zTemp0+1
.9950	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9953	7a		ply				ply 								; restore position
.9954	60		rts				rts
.9955					_VHBadIndex:
.9955	a9 17		lda #$17		lda	#23
.9957	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.995a					AbsUnary:
.995a	fa		plx				plx 								; restore stack pos
.995b	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; get a float or int
.995e	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9961	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9964	29 7f		and #$7f			and 	#$7F
.9966	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9969	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.996a					AllocUnary:
.996a	fa		plx				plx 								; restore stack pos
.996b	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger		; get bytes required.
.996e	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9971	da		phx				phx 								; save X/Y
.9972	5a		phy				phy
.9973	8a		txa				txa 								; copy X into Y
.9974	a8		tay				tay
.9975	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9978	aa		tax				tax
.9979	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.997c	20 89 99	jsr $9989			jsr 	AllocateXABytes 			; allocate memory
.997f	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9982	8a		txa				txa
.9983	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9986	7a		ply				ply
.9987	fa		plx				plx
.9988	60		rts				rts
.9989					AllocateXABytes:
.9989	5a		phy				phy
.998a	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.998d	84 36		sty $36				sty 	zTemp0
.998f	5a		phy				phy
.9990	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9993	84 37		sty $37				sty 	zTemp0+1
.9995	5a		phy				phy
.9996	18		clc				clc 								; add to low memory pointer
.9997	6d 8c 04	adc $048c			adc 	lowMemPtr
.999a	8d 8c 04	sta $048c			sta 	lowMemPtr
.999d	8a		txa				txa
.999e	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99a1	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a4	b0 2f		bcs $99d5			bcs 	CISSMemory
.99a6	20 c7 99	jsr $99c7			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a9					_ClearMemory:
.99a9	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99ac	c5 36		cmp $36				cmp 	zTemp0
.99ae	d0 07		bne $99b7			bne 	_CMClearNext
.99b0	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99b3	c5 37		cmp $37				cmp 	zTemp0+1
.99b5	f0 0c		beq $99c3			beq 	_CMExit
.99b7					_CMClearNext:
.99b7	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b9	92 36		sta ($36)			sta 	(zTemp0)
.99bb	e6 36		inc $36				inc 	zTemp0
.99bd	d0 ea		bne $99a9			bne 	_ClearMemory
.99bf	e6 37		inc $37				inc		zTemp0+1
.99c1	80 e6		bra $99a9			bra 	_ClearMemory
.99c3					_CMExit:
.99c3	fa		plx				plx
.99c4	68		pla				pla
.99c5	7a		ply				ply
.99c6	60		rts				rts
.99c7					CheckIdentifierStringSpace:
.99c7	48		pha				pha
.99c8	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99cb	18		clc				clc
.99cc	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99ce	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99d1	b0 02		bcs $99d5			bcs 	CISSMemory
.99d3	68		pla				pla
.99d4	60		rts				rts
.99d5					CISSMemory:
.99d5	a9 06		lda #$06		lda	#6
.99d7	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99da					AscUnary:
.99da	fa		plx				plx 								; restore stack pos
.99db	20 32 9d	jsr $9d32			jsr 	EvaluateString 				; get a string
.99de	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99e0	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.99e3	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.99e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e7					FracUnary:
.99e7	fa		plx				plx 								; restore stack pos
.99e8	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; get a float or int
.99eb	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.99ee	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99f1	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99f3	f0 04		beq $99f9			beq 	_IUZero
.99f5	20 1d 94	jsr $941d			jsr 	FloatFractionalPart
.99f8	60		rts				rts
.99f9					_IUZero:
.99f9	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.99fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99fd					IntUnary:
.99fd	fa		plx				plx 								; restore stack pos
.99fe	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; get a float or int
.9a01	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9a04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a07	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a09	f0 03		beq $9a0e			beq 	_IUExit
.9a0b	20 80 94	jsr $9480			jsr 	FloatIntegerPart
.9a0e					_IUExit:
.9a0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a0f					LenUnary:
.9a0f	fa		plx				plx 								; restore stack pos
.9a10	20 32 9d	jsr $9d32			jsr 	EvaluateString 				; get a string
.9a13	5a		phy				phy
.9a14	a0 00		ldy #$00			ldy 	#0 							; find length
.9a16					_LenFind:
.9a16	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a18	f0 06		beq $9a20			beq 	_LenExit
.9a1a	c8		iny				iny
.9a1b	d0 f9		bne $9a16			bne 	_LenFind
.9a1d	4c 8d 9f	jmp $9f8d			jmp 	RangeError 					; string > 255
.9a20					_LenExit:
.9a20	98		tya				tya
.9a21	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.9a24	7a		ply				ply
.9a25	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9a28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a29					Unary_Min:
.9a29	a9 01		lda #$01			lda 	#1
.9a2b	80 02		bra $9a2f			bra 	UnaryMinMaxMain
.9a2d					Unary_Max:
.9a2d	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a2f					UnaryMinMaxMain:
.9a2f	fa		plx				plx 								; get index on number stack
.9a30	48		pha				pha 								; save comparator
.9a31	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; get the first value.
.9a34					_UMMMLoop:
.9a34	b1 30		lda ($30),y			lda 	(codePtr),y
.9a36	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a38	f0 22		beq $9a5c			beq 	_UMMMDone
.9a3a	20 2a 8d	jsr $8d2a			jsr 	CheckComma 					; must be a comma
.9a3d	e8		inx				inx
.9a3e	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue
.9a41	ca		dex				dex
.9a42	20 d5 9d	jsr $9dd5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a45	e8		inx				inx
.9a46	20 d5 9d	jsr $9dd5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a49	e8		inx				inx
.9a4a	20 f3 8d	jsr $8df3			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a4d	ca		dex				dex
.9a4e	ca		dex				dex
.9a4f	85 36		sta $36				sta 	zTemp0 						; save required result
.9a51	68		pla				pla 								; get and save comparator
.9a52	48		pha				pha
.9a53	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a55	d0 dd		bne $9a34			bne 	_UMMMLoop
.9a57	20 5f 9a	jsr $9a5f			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a5a	80 d8		bra $9a34			bra 	_UMMMLoop
.9a5c					_UMMMDone:
.9a5c	68		pla				pla 								; throw the comparator
.9a5d	c8		iny				iny 								; skip )
.9a5e	60		rts				rts
.9a5f					ExpCopyAboveDown:
.9a5f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a62	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a65	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a68	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a6b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a6e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a71	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a74	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a77	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a7a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7d	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a80	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a84					Unary_Not:
.9a84	fa		plx				plx
.9a85	20 4a 9d	jsr $9d4a			jsr 	EvaluateInteger 			; get integer
.9a88	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9a8b	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; zero mantissa ?
.9a8e	f0 04		beq $9a94			beq 	_NotZero
.9a90	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.9a93	60		rts				rts
.9a94					_NotZero:
.9a94	4c a8 8d	jmp $8da8			jmp 	ReturnTrue
.9a97					_UNBad:
.9a97	4c 97 9f	jmp $9f97			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a9a					Unary_Random:
.9a9a	fa		plx				plx
.9a9b	20 19 9b	jsr $9b19			jsr 	Random32Bit 				; get a random number
.9a9e	20 fe 9a	jsr $9afe			jsr 	URCopyToMantissa  			; put in mantissa
.9aa1	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa3	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa5	f0 08		beq $9aaf			beq 	_URNoModulus
.9aa7	e8		inx				inx
.9aa8	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aab	ca		dex				dex
.9aac	20 17 8f	jsr $8f17			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aaf					_URNoModulus:
.9aaf	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ab2	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab5	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9ab8	60		rts				rts
.9ab9					Unary_Rnd:
.9ab9	fa		plx				plx
.9aba	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; number to use.
.9abd	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; closing bracket
.9ac0	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ac3	f0 2b		beq $9af0			beq 	_URCopySeed
.9ac5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac8	10 23		bpl $9aed			bpl 	_URDontSeed
.9aca	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9acd	49 17		eor #$17			eor 	#$17
.9acf	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ad2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad5	49 a5		eor #$a5			eor 	#$A5
.9ad7	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ada	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9add	49 c2		eor #$c2			eor 	#$C2
.9adf	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ae2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae5	49 9d		eor #$9d			eor 	#$9D
.9ae7	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9aea	20 19 9b	jsr $9b19			jsr 	Random32Bit
.9aed					_URDontSeed:
.9aed	20 19 9b	jsr $9b19			jsr 	Random32Bit 				; generate a number.
.9af0					_URCopySeed:
.9af0	20 fe 9a	jsr $9afe			jsr 	URCopyToMantissa 			; copy into mantissa
.9af3	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af5	8d 28 04	sta $0428			sta 	NSExponent
.9af8	a9 08		lda #$08			lda 	#NSTFloat
.9afa	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9afd	60		rts				rts
.9afe					URCopyToMantissa:
.9afe	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b01	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b04	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b07	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b0a	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b10	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b13	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b15	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b18	60		rts				rts
.9b19					Random32Bit:
.9b19	5a		phy				phy
.9b1a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b1c	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b1f	d0 03		bne $9b24			bne 	_Random1
.9b21	a8		tay				tay 								; if so do it 256 times
.9b22	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b24					_Random1:
.9b24	0a		asl a				asl 	a 							; LSFR RNG
.9b25	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b28	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b2b	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b2e	90 02		bcc $9b32			bcc 	_Random2
.9b30	49 c5		eor #$c5			eor 	#$C5
.9b32					_Random2:
.9b32	88		dey				dey
.9b33	d0 ef		bne $9b24			bne 	_Random1
.9b35	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b38	7a		ply				ply
.9b39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b3a					SgnUnary:
.9b3a	fa		plx				plx 								; restore stack pos
.9b3b	20 27 9d	jsr $9d27			jsr 	EvaluateNumber 				; get a float or int
.9b3e	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9b41	20 2e 9e	jsr $9e2e			jsr 	NSMIsZero 					; if zero
.9b44	f0 10		beq $9b56			beq 	_SGZero  					; return Int Zero
.9b46	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b49	48		pha				pha
.9b4a	a9 01		lda #$01			lda 	#1 							; set to 1
.9b4c	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.9b4f	68		pla				pla
.9b50	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b52	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b55	60		rts				rts
.9b56	20 fe 9d	jsr $9dfe	_SGZero:jsr 	NSMSetZero
.9b59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b5a					ValUnary:
.9b5a	fa		plx				plx 								; restore stack pos
.9b5b	20 70 9b	jsr $9b70			jsr 	ValMainCode 				; do the main val() code
.9b5e	b0 01		bcs $9b61			bcs 	_VUError 					; couldn't convert
.9b60	60		rts				rts
.9b61					_VUError:
.9b61	4c 92 9f	jmp $9f92			jmp 	TypeError
.9b64					IsValUnary:
.9b64	fa		plx				plx 								; restore stack pos
.9b65	20 70 9b	jsr $9b70			jsr 	ValMainCode 				; do the main val() code
.9b68	b0 03		bcs $9b6d			bcs 	_VUBad
.9b6a	4c a8 8d	jmp $8da8			jmp 	ReturnTrue
.9b6d					_VUBad:
.9b6d	4c b4 8d	jmp $8db4			jmp 	ReturnFalse
.9b70					ValMainCode:
.9b70	20 32 9d	jsr $9d32			jsr 	EvaluateString 				; get a string
.9b73	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; check right bracket present
.9b76	5a		phy				phy
.9b77	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b79	f0 17		beq $9b92			beq 	_VMCFail2
.9b7b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b7d	48		pha				pha 								; save first character
.9b7e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b80	d0 01		bne $9b83			bne 	_VMCStart
.9b82	c8		iny				iny 								; skip over -
.9b83					_VMCStart:
.9b83	38		sec				sec 								; initialise first time round.
.9b84					_VMCNext:
.9b84	c8		iny				iny 								; pre-increment
.9b85	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b87	f0 0c		beq $9b95			beq 	_VMCSuccess 				; successful.
.9b89	20 a6 96	jsr $96a6			jsr 	EncodeNumber 				; send it to the number-builder
.9b8c	90 03		bcc $9b91			bcc 	_VMCFail 					; if failed, give up.
.9b8e	18		clc				clc 								; next time round, countinue
.9b8f	80 f3		bra $9b84			bra 	_VMCNext
.9b91					_VMCFail:
.9b91	68		pla				pla
.9b92					_VMCFail2:
.9b92	7a		ply				ply
.9b93	38		sec				sec
.9b94	60		rts				rts
.9b95					_VMCSuccess:
.9b95	a9 00		lda #$00			lda 	#0 							; construct final
.9b97	20 a6 96	jsr $96a6			jsr 	EncodeNumber
.9b9a	68		pla				pla
.9b9b	c9 2d		cmp #$2d			cmp 	#"-"
.9b9d	d0 03		bne $9ba2			bne 	_VMCNotNegative
.9b9f	20 aa 9d	jsr $9daa			jsr		NSMNegate
.9ba2					_VMCNotNegative:
.9ba2	7a		ply				ply
.9ba3	18		clc				clc
.9ba4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba5					ChrUnary:
.9ba5	fa		plx				plx 								; restore stack pos
.9ba6	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger			; get value
.9ba9	48		pha				pha
.9baa	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9bad	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9baf	20 55 a3	jsr $a355			jsr 	StringTempAllocate
.9bb2	68		pla				pla 								; write number to it
.9bb3	20 93 a3	jsr $a393			jsr 	StringTempWrite
.9bb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb7					SpcUnary:
.9bb7	fa		plx				plx 								; restore stack pos
.9bb8	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger			; get value
.9bbb	5a		phy				phy
.9bbc	48		pha				pha 								; save count
.9bbd	20 55 a3	jsr $a355			jsr 	StringTempAllocate
.9bc0	7a		ply				ply 								; to do count in Y
.9bc1					_SpcLoop:
.9bc1	c0 00		cpy #$00			cpy 	#0
.9bc3	f0 08		beq $9bcd			beq 	_SpcExit
.9bc5	a9 20		lda #$20			lda 	#32
.9bc7	20 93 a3	jsr $a393			jsr 	StringTempWrite
.9bca	88		dey				dey
.9bcb	80 f4		bra $9bc1			bra 	_SPCLoop
.9bcd					_SpcExit:
.9bcd	7a		ply				ply
.9bce	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.9bd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bd2					Unary_Str:
.9bd2	fa		plx				plx
.9bd3	20 27 9d	jsr $9d27			jsr 	EvaluateNumber  			; get number
.9bd6	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; closing bracket
.9bd9	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bdb	20 f4 9b	jsr $9bf4			jsr 	ConvertNumberToString 		; do the conversion.
.9bde	a9 21		lda #$21			lda		#33 						; create buffer
.9be0	20 55 a3	jsr $a355			jsr 	StringTempAllocate 			; allocate memory
.9be3	da		phx				phx
.9be4	a2 00		ldx #$00			ldx 	#0
.9be6					_USCopy:
.9be6	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9be9	20 93 a3	jsr $a393			jsr 	StringTempWrite
.9bec	e8		inx				inx
.9bed	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bf0	d0 f4		bne $9be6			bne 	_USCopy
.9bf2	fa		plx				plx
.9bf3	60		rts				rts
.9bf4					ConvertNumberToString:
.9bf4	5a		phy				phy 								; save code position
.9bf5	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf8	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bfb	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bfe	10 0a		bpl $9c0a			bpl 	_CNTSNotNegative
.9c00	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c02	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c05	a9 2d		lda #$2d			lda 	#"-"
.9c07	20 70 9c	jsr $9c70			jsr 	WriteDecimalBuffer
.9c0a					_CNTSNotNegative:
.9c0a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c0d	f0 15		beq $9c24			beq 	_CNTSNotFloat
.9c0f	e8		inx				inx 								; round up
.9c10	a9 01		lda #$01			lda 	#1
.9c12	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.9c15	ca		dex				dex
.9c16	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c19	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c1c	a9 08		lda #$08			lda 	#NSTFloat
.9c1e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c21	20 37 93	jsr $9337			jsr 	FloatAdd
.9c24					_CNTSNotFloat:
.9c24	20 52 9c	jsr $9c52			jsr 	MakePlusTwoString
.9c27	20 1d 94	jsr $941d			jsr 	FloatFractionalPart 		; get the fractional part
.9c2a	20 e1 94	jsr $94e1			jsr 	NSNormalise					; normalise , exit if zero
.9c2d	f0 21		beq $9c50			beq 	_CNTSExit
.9c2f	a9 2e		lda #$2e			lda 	#"."
.9c31	20 70 9c	jsr $9c70			jsr 	WriteDecimalBuffer 			; write decimal place
.9c34					_CNTSDecimal:
.9c34	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c37	30 17		bmi $9c50			bmi 	_CNTSExit
.9c39	e8		inx				inx 								; x 10.0
.9c3a	a9 0a		lda #$0a			lda 	#10
.9c3c	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.9c3f	a9 08		lda #$08			lda 	#NSTFloat
.9c41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c44	ca		dex				dex
.9c45	20 aa 94	jsr $94aa			jsr 	FloatMultiply
.9c48	20 52 9c	jsr $9c52			jsr 	MakePlusTwoString
.9c4b	20 1d 94	jsr $941d			jsr 	FloatFractionalPart 		; get the fractional part
.9c4e	80 e4		bra $9c34			bra 	_CNTSDecimal 				; keep going.
.9c50					_CNTSExit:
.9c50	7a		ply				ply
.9c51	60		rts				rts
.9c52					MakePlusTwoString:
.9c52	da		phx				phx
.9c53	20 d5 9d	jsr $9dd5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c56	e8		inx				inx 								; access it
.9c57	e8		inx				inx
.9c58	20 80 94	jsr $9480			jsr 	FloatIntegerPart 			; make it an integer
.9c5b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c5d	20 62 92	jsr $9262			jsr 	ConvertInt32
.9c60	a2 00		ldx #$00			ldx	 	#0
.9c62					_MPTSCopy:
.9c62	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c65	20 70 9c	jsr $9c70			jsr 	WriteDecimalBuffer
.9c68	e8		inx				inx
.9c69	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c6c	d0 f4		bne $9c62			bne 	_MPTSCopy
.9c6e	fa		plx				plx
.9c6f	60		rts				rts
.9c70					WriteDecimalBuffer:
.9c70	da		phx				phx
.9c71	ae 95 04	ldx $0495			ldx 	dbOffset
.9c74	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c77	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c7a	ee 95 04	inc $0495			inc 	dbOffset
.9c7d	fa		plx				plx
.9c7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c7f					Unary_Left:
.9c7f	fa		plx				plx
.9c80	18		clc				clc 								; only one parameter
.9c81	20 f6 9c	jsr $9cf6			jsr 	SubstringInitial 			; set up.
.9c84	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c87	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c8a	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c8d	80 2c		bra $9cbb			bra 	SubstringMain
.9c8f					Unary_Right:
.9c8f	fa		plx				plx
.9c90	18		clc				clc 								; only one parameter
.9c91	20 f6 9c	jsr $9cf6			jsr 	SubstringInitial 			; set up.
.9c94	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c97	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c9a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c9d	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ca0	b0 02		bcs $9ca4			bcs 	_URNotUnderflow
.9ca2	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca4					_URNotUnderFlow:
.9ca4	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca7	80 12		bra $9cbb			bra 	SubStringMain
.9ca9					Unary_Mid:
.9ca9	fa		plx				plx
.9caa	38		sec				sec 								; two parameters
.9cab	20 f6 9c	jsr $9cf6			jsr 	SubstringInitial 			; set up.
.9cae	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cb1	f0 05		beq $9cb8			beq 	_UMError
.9cb3	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb6	80 03		bra $9cbb			bra 	SubStringMain
.9cb8					_UMError:
.9cb8	4c 97 9f	jmp $9f97			jmp 	ArgumentError
.9cbb					SubStringMain:
.9cbb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cbe	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cc1	b0 2d		bcs $9cf0			bcs 	_SSMNull 					; if so, return an empty string.
.9cc3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc6	f0 28		beq $9cf0			beq 	_SSMNull 					; return empty string.
.9cc8	18		clc				clc 								; add the offset +1 to the address and
.9cc9	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ccc	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ccf	85 36		sta $36				sta 	zTemp0
.9cd1	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd4	69 00		adc #$00			adc 	#0
.9cd6	85 37		sta $37				sta 	zTemp0+1
.9cd8					_SSMNoCarry:
.9cd8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cdb	20 55 a3	jsr $a355			jsr 	StringTempAllocate 			; allocate that many characters
.9cde	5a		phy				phy 								; save Y
.9cdf	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9ce1					_SSMCopy:
.9ce1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ce3	f0 09		beq $9cee			beq 	_SSMEString 				; no more to copy
.9ce5	20 93 a3	jsr $a393			jsr 	StringTempWrite 			; and write it out.
.9ce8	c8		iny				iny
.9ce9	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cec	d0 f3		bne $9ce1			bne 	_SSMCopy
.9cee					_SSMEString:
.9cee	7a		ply				ply
.9cef					_SSMExit:
.9cef	60		rts				rts
.9cf0					_SSMNull:
.9cf0	a9 00		lda #$00			lda 	#0
.9cf2	20 55 a3	jsr $a355			jsr 	StringTempAllocate
.9cf5	60		rts				rts
.9cf6					SubstringInitial:
.9cf6	da		phx				phx 								; save initial stack position
.9cf7	08		php				php 								; save carry on stack indicating 2 parameters
.9cf8	20 32 9d	jsr $9d32			jsr 	EvaluateString 				; get a string
.9cfb	5a		phy				phy 								; calculate length to exponent.
.9cfc	a0 ff		ldy #$ff			ldy 	#$FF
.9cfe					_SIFindLength:
.9cfe	c8		iny				iny
.9cff	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d01	d0 fb		bne $9cfe			bne 	_SIFindLength
.9d03	98		tya				tya
.9d04	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d07	7a		ply				ply
.9d08	e8		inx				inx
.9d09	20 2a 8d	jsr $8d2a			jsr 	CheckComma 					; comma next
.9d0c	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get next parameter
.9d0f	28		plp				plp 								; is it the last parameter ?
.9d10	90 07		bcc $9d19			bcc 	_SSIExit 					; if so, exit.
.9d12	e8		inx				inx
.9d13	20 2a 8d	jsr $8d2a			jsr 	CheckComma 					; comma next
.9d16	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get last parameter
.9d19					_SSIExit:
.9d19	fa		plx				plx
.9d1a	20 22 8d	jsr $8d22			jsr 	CheckRightBracket 			; check closing bracket
.9d1d	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d1e					EvaluateValue:
.9d1e	48		pha				pha
.9d1f	20 ea 92	jsr $92ea			jsr		EvaluateExpression 			; expression
.9d22	20 08 96	jsr $9608			jsr 	Dereference					; derefernce it
.9d25	68		pla				pla
.9d26	60		rts				rts
.9d27					EvaluateNumber:
.9d27	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; get a value
.9d2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d2d	29 10		and #$10			and 	#NSBIsString
.9d2f	d0 16		bne $9d47			bne 	HelperTypeError
.9d31	60		rts				rts
.9d32					EvaluateString:
.9d32	20 1e 9d	jsr $9d1e			jsr 	EvaluateValue 				; get a value
.9d35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d38	29 10		and #$10			and 	#NSBIsString
.9d3a	f0 0b		beq $9d47			beq 	HelperTypeError
.9d3c					CopyAddressToTemp0:
.9d3c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d3f	85 36		sta $36				sta 	zTemp0
.9d41	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d44	85 37		sta $37				sta 	zTemp0+1
.9d46	60		rts				rts
.9d47					HelperTypeError:
.9d47	4c 92 9f	jmp $9f92			jmp 	TypeError
.9d4a					EvaluateInteger:
.9d4a	20 27 9d	jsr $9d27			jsr 	EvaluateNumber
.9d4d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d50	d0 0a		bne $9d5c			bne 	HelperValueError 			; if not, it's a float.
.9d52	60		rts				rts
.9d53					EvaluateUnsignedInteger:
.9d53	20 4a 9d	jsr $9d4a			jsr 	EvaluateInteger 			; check integer is +ve
.9d56	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d59	30 01		bmi $9d5c			bmi 	HelperValueError
.9d5b	60		rts				rts
.9d5c					HelperValueError:
.9d5c	4c 97 9f	jmp $9f97			jmp 	ArgumentError
.9d5f					Evaluate16BitInteger:
.9d5f	20 53 9d	jsr $9d53			jsr	 	EvaluateUnsignedInteger		; get integer
.9d62	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d65	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d68	d0 f2		bne $9d5c			bne 	HelperValueError
.9d6a	60		rts				rts
.9d6b					Evaluate16BitIntegerSigned:
.9d6b	20 4a 9d	jsr $9d4a			jsr	 	EvaluateInteger				; get integer
.9d6e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d71	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d74	d0 e6		bne $9d5c			bne 	HelperValueError
.9d76	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d79	10 03		bpl $9d7e			bpl 	_EISNotSigned
.9d7b	20 b3 9d	jsr $9db3			jsr 	NSMNegateMantissa
.9d7e					_EISNotSigned:
.9d7e	60		rts				rts
.9d7f					Evaluate8BitInteger:
.9d7f	20 53 9d	jsr $9d53			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d82	d0 d8		bne $9d5c			bne 	HelperValueError
.9d84	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d87	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d8a	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d8d	d0 cd		bne $9d5c			bne 	HelperValueError
.9d8f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d93					Multiply8x8:
.9d93	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d94	85 36		sta $36			  	sta 	zTemp0
.9d96	86 37		stx $37				stx 	zTemp0+1
.9d98	a9 00		lda #$00			lda 	#0
.9d9a	a2 08		ldx #$08			ldx 	#8
.9d9c					_M88Loop:
.9d9c	90 03		bcc $9da1			bcc 	_M88NoAdd
.9d9e	18		clc				clc
.9d9f	65 37		adc $37				adc 	zTemp0+1
.9da1					_M88NoAdd:
.9da1	6a		ror a				ror 	a
.9da2	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da4	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da5	d0 f5		bne $9d9c			bne 	_M88Loop
.9da7	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9daa					NSMNegate:
.9daa	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dad	49 80		eor #$80			eor 	#NSBIsNegative
.9daf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db2	60		rts				rts
.9db3					NSMNegateMantissa:
.9db3	38		sec				sec
.9db4	a9 00		lda #$00			lda 	#0
.9db6	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dbc	a9 00		lda #$00			lda 	#0
.9dbe	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dc1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc4	a9 00		lda #$00			lda 	#0
.9dc6	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dcc	a9 00		lda #$00			lda 	#0
.9dce	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dd1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd4	60		rts				rts
.9dd5					NSMShiftUpTwo:
.9dd5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd8	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ddb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dde	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9de1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de4	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9dea	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ded	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9df0	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9df3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df6	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df9	60		rts				rts
.9dfa					NSMSetZeroMantissaOnly:
.9dfa	a9 00		lda #$00			lda 	#0
.9dfc	80 08		bra $9e06			bra 	NSMSetMantissa
.9dfe					NSMSetZero:
.9dfe	a9 00		lda #$00			lda 	#0
.9e00					NSMSetByte:
.9e00	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e03	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e06					NSMSetMantissa:
.9e06	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e09	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e0c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e12	60		rts				rts
.9e13					NSMShiftLeft:
.9e13	18		clc				clc
.9e14					NSMRotateLeft:
.9e14	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e17	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e1a	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e1d	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e20	60		rts				rts
.9e21					NSMShiftRight:
.9e21	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e24	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e27	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e2a	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e2d	60		rts				rts
.9e2e					NSMIsZero:
.9e2e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e31	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e34	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e37	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e3b					Assemble_ora:
.9e3b	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e3e	01					.byte $01
.9e3f					Assemble_and:
.9e3f	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e42	21					.byte $21
.9e43					Assemble_eor:
.9e43	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e46	41					.byte $41
.9e47					Assemble_adc:
.9e47	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e4a	61					.byte $61
.9e4b					Assemble_sta:
.9e4b	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e4e	81					.byte $81
.9e4f					Assemble_lda:
.9e4f	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e52	a1					.byte $a1
.9e53					Assemble_cmp:
.9e53	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e56	c1					.byte $c1
.9e57					Assemble_sbc:
.9e57	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e5a	e1					.byte $e1
.9e5b					Assemble_asl:
.9e5b	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e5e	02					.byte $02
>9e5f	75					.byte $75
.9e60					Assemble_rol:
.9e60	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e63	22					.byte $22
>9e64	75					.byte $75
.9e65					Assemble_lsr:
.9e65	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e68	42					.byte $42
>9e69	75					.byte $75
.9e6a					Assemble_ror:
.9e6a	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e6d	62					.byte $62
>9e6e	75					.byte $75
.9e6f					Assemble_stx:
.9e6f	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e72	82					.byte $82
>9e73	50					.byte $50
.9e74					Assemble_ldx:
.9e74	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e77	a2					.byte $a2
>9e78	d0					.byte $d0
.9e79					Assemble_dec:
.9e79	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e7c	c2					.byte $c2
>9e7d	55					.byte $55
.9e7e					Assemble_inc:
.9e7e	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e81	e2					.byte $e2
>9e82	55					.byte $55
.9e83					Assemble_stz:
.9e83	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e86	60					.byte $60
>9e87	44					.byte $44
.9e88					Assemble_bit:
.9e88	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8b	20					.byte $20
>9e8c	55					.byte $55
.9e8d					Assemble_sty:
.9e8d	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e90	80					.byte $80
>9e91	54					.byte $54
.9e92					Assemble_ldy:
.9e92	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e95	a0					.byte $a0
>9e96	d5					.byte $d5
.9e97					Assemble_cpy:
.9e97	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9a	c0					.byte $c0
>9e9b	d4					.byte $d4
.9e9c					Assemble_cpx:
.9e9c	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9f	e0					.byte $e0
>9ea0	d0					.byte $d0
.9ea1					Assemble_tsb:
.9ea1	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea4	00					.byte $00
>9ea5	50					.byte $50
.9ea6					Assemble_trb:
.9ea6	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea9	10					.byte $10
>9eaa	50					.byte $50
.9eab					Assemble_jsr:
.9eab	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eae	14					.byte $14
>9eaf	10					.byte $10
.9eb0					Assemble_jmp:
.9eb0	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eb3	40					.byte $40
>9eb4	10					.byte $10
.9eb5					Assemble_bpl:
.9eb5	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eb8	10					.byte $10
.9eb9					Assemble_bmi:
.9eb9	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ebc	30					.byte $30
.9ebd					Assemble_bvc:
.9ebd	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec0	50					.byte $50
.9ec1					Assemble_bvs:
.9ec1	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec4	70					.byte $70
.9ec5					Assemble_bcc:
.9ec5	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec8	90					.byte $90
.9ec9					Assemble_bcs:
.9ec9	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ecc	b0					.byte $b0
.9ecd					Assemble_bne:
.9ecd	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed0	d0					.byte $d0
.9ed1					Assemble_beq:
.9ed1	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed4	f0					.byte $f0
.9ed5					Assemble_bra:
.9ed5	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed8	80					.byte $80
.9ed9					Assemble_brk:
.9ed9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9edc	00					.byte $00
.9edd					Assemble_php:
.9edd	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee0	08					.byte $08
.9ee1					Assemble_clc:
.9ee1	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee4	18					.byte $18
.9ee5					Assemble_plp:
.9ee5	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee8	28					.byte $28
.9ee9					Assemble_sec:
.9ee9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9eec	38					.byte $38
.9eed					Assemble_rti:
.9eed	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef0	40					.byte $40
.9ef1					Assemble_pha:
.9ef1	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef4	48					.byte $48
.9ef5					Assemble_cli:
.9ef5	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef8	58					.byte $58
.9ef9					Assemble_phy:
.9ef9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efc	5a					.byte $5a
.9efd					Assemble_rts:
.9efd	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f00	60					.byte $60
.9f01					Assemble_pla:
.9f01	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f04	68					.byte $68
.9f05					Assemble_sei:
.9f05	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f08	78					.byte $78
.9f09					Assemble_ply:
.9f09	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0c	7a					.byte $7a
.9f0d					Assemble_dey:
.9f0d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f10	88					.byte $88
.9f11					Assemble_txa:
.9f11	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f14	8a					.byte $8a
.9f15					Assemble_tya:
.9f15	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f18	98					.byte $98
.9f19					Assemble_txs:
.9f19	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1c	9a					.byte $9a
.9f1d					Assemble_tay:
.9f1d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f20	a8					.byte $a8
.9f21					Assemble_tax:
.9f21	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f24	aa					.byte $aa
.9f25					Assemble_clv:
.9f25	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f28	b8					.byte $b8
.9f29					Assemble_tsx:
.9f29	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2c	ba					.byte $ba
.9f2d					Assemble_iny:
.9f2d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f30	c8					.byte $c8
.9f31					Assemble_dex:
.9f31	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f34	ca					.byte $ca
.9f35					Assemble_cld:
.9f35	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f38	d8					.byte $d8
.9f39					Assemble_phx:
.9f39	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3c	da					.byte $da
.9f3d					Assemble_stp:
.9f3d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f40	db					.byte $db
.9f41					Assemble_inx:
.9f41	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f44	e8					.byte $e8
.9f45					Assemble_nop:
.9f45	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f48	ea					.byte $ea
.9f49					Assemble_sed:
.9f49	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4c	f8					.byte $f8
.9f4d					Assemble_plx:
.9f4d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f50	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f51					DecimalScalarTable:
>9f51	66 66 66 66				.dword $66666666 ; 0.1
>9f55	de					.byte $de
>9f56	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f5a	db					.byte $db
>9f5b	4c 37 89 41				.dword $4189374c ; 0.001
>9f5f	d8					.byte $d8
>9f60	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f64	d4					.byte $d4
>9f65	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f69	d1					.byte $d1
>9f6a	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f6e	ce					.byte $ce
>9f6f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f73	ca					.byte $ca
>9f74	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f78	c7					.byte $c7
>9f79	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f7d	c4					.byte $c4
>9f7e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f82	c0					.byte $c0
>9f83	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f87	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f88					SyntaxError:
.9f88	a9 02		lda #$02		lda	#2
.9f8a	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.9f8d					RangeError:
.9f8d	a9 04		lda #$04		lda	#4
.9f8f	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.9f92					TypeError:
.9f92	a9 05		lda #$05		lda	#5
.9f94	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.9f97					ArgumentError:
.9f97	a9 07		lda #$07		lda	#7
.9f99	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.9f9c					NotDoneError:
.9f9c	a9 0c		lda #$0c		lda	#12
.9f9e	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.9fa1					ErrorText:
>9fa1	42 72 65 61 6b 00			.text	"Break",0
>9fa7	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9faf	72 72 6f 72 00
>9fb4	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fbc	20 62 79 20 7a 65 72 6f 00
>9fc5	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fcd	61 6e 67 65 00
>9fd2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fda	6d 61 74 63 68 00
>9fe0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe8	65 6d 6f 72 79 00
>9fee	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff6	61 72 67 75 6d 65 6e 74 00
>9fff	53 74 6f 70 00				.text	"Stop",0
>a004	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a00c	6f 6f 20 6c 6f 6e 67 00
>a014	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a01c	6e 20 66 61 69 6c 65 64 00
>a025	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a02d	61 74 61 00
>a031	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a039	65 6e 74 65 64 00
>a03f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a047	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a053	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a05b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a068	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a070	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a07d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a085	68 6f 75 74 20 57 68 69 6c 65 00
>a090	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a098	68 6f 75 74 20 46 6f 72 00
>a0a1	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a9	61 63 6b 20 66 75 6c 6c 00
>a0b2	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0ba	75 63 74 75 72 65 00
>a0c1	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c9	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0de	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0ec	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f4	7a 65 00
>a0f7	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0ff	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a107	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3116."
>a10f	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>a11f	32 32 2e 20 42 75 69 6c 64 20 33 31 31 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12e					MemoryDeleteLine:
.a12e	20 4d a1	jsr $a14d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a131	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a133	a8		tay				tay
.a134					_MDDLLoop:
.a134	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a136	92 30		sta ($30)			sta 	(codePtr)
.a138	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a13a	c5 3a		cmp $3a				cmp 	zTemp2
.a13c	d0 07		bne $a145			bne 	_MDLDLNext
.a13e	a5 31		lda $31				lda 	codePtr+1
.a140	c5 3b		cmp $3b				cmp 	zTemp2+1
.a142	d0 01		bne $a145			bne 	_MDLDLNext
.a144					_MDDLExit:
.a144	60		rts				rts
.a145					_MDLDLNext:
.a145	e6 30		inc $30				inc 	codePtr						; next byte
.a147	d0 eb		bne $a134			bne 	_MDDLLoop
.a149	e6 31		inc $31				inc 	codePtr+1
.a14b	80 e7		bra $a134			bra 	_MDDLLoop
.a14d					IMemoryFindEnd:
.a14d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14f	85 3a		sta $3a				sta 	0+zTemp2
.a151	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a153	85 3b		sta $3b				sta 	1+zTemp2
.a155					_MDLFELoop:
.a155	b2 3a		lda ($3a)			lda 	(zTemp2)
.a157	f0 0b		beq $a164			beq 	_MDLFEExit
.a159	18		clc				clc
.a15a	65 3a		adc $3a				adc 	zTemp2
.a15c	85 3a		sta $3a				sta 	zTemp2
.a15e	90 f5		bcc $a155			bcc 	_MDLFELoop
.a160	e6 3b		inc $3b				inc 	zTemp2+1
.a162	80 f1		bra $a155			bra 	_MDLFELoop
.a164					_MDLFEExit:
.a164	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a165					MemoryInsertLine:
.a165	08		php				php
.a166	20 4d a1	jsr $a14d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a169	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a16b	1a		inc a				inc 	a
.a16c	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16e	b0 36		bcs $a1a6			bcs 	_MDLIError
.a170	28		plp				plp
.a171	90 08		bcc $a17b			bcc 	_MDLIFound
.a173	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a175	85 30		sta $30				sta 	codePtr
.a177	a5 3b		lda $3b				lda 	zTemp2+1
.a179	85 31		sta $31				sta 	codePtr+1
.a17b					_MDLIFound:
.a17b	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17e	a8		tay				tay
.a17f					_MDLIInsert:
.a17f	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a181	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a183	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a185	c5 3a		cmp $3a				cmp 	zTemp2
.a187	d0 06		bne $a18f			bne 	_MDLINext
.a189	a5 31		lda $31				lda 	codePtr+1
.a18b	c5 3b		cmp $3b				cmp 	zTemp2+1
.a18d	f0 0a		beq $a199			beq 	_MDLIHaveSpace
.a18f					_MDLINext:
.a18f	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a191	d0 02		bne $a195			bne 	_MDLINoBorrow
.a193	c6 3b		dec $3b				dec 	zTemp2+1
.a195					_MDLINoBorrow:
.a195	c6 3a		dec $3a				dec 	zTemp2
.a197	80 e6		bra $a17f			bra 	_MDLIInsert
.a199					_MDLIHaveSpace:
.a199	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a19c	88		dey				dey 								; from offset-1 to 0
.a19d					_MDLICopy:
.a19d	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1a0	91 30		sta ($30),y			sta 	(codePtr),y
.a1a2	88		dey				dey
.a1a3	10 f8		bpl $a19d			bpl 	_MDLICopy
.a1a5	60		rts				rts
.a1a6					_MDLIError:
.a1a6	a9 06		lda #$06		lda	#6
.a1a8	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.a1ab					MDLAppendLine:
.a1ab	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1ad	85 36		sta $36				sta 	zTemp0
.a1af	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b1	85 38		sta $38				sta 	0+zTemp1
.a1b3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b5	85 39		sta $39				sta 	1+zTemp1
.a1b7	b2 38		lda ($38)			lda 	(zTemp1)
.a1b9	d0 0a		bne $a1c5			bne 	_MDLANoInitialise
.a1bb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1bd	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1c0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1c2	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1c5					_MDLANoInitialise:
.a1c5	18		clc				clc
.a1c6	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c9	85 38		sta $38				sta 	zTemp1
.a1cb	72 36		adc ($36)			adc 	(zTemp0)
.a1cd	8d 2b 06	sta $062b			sta 	AppendPointer
.a1d0	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1d3	85 39		sta $39				sta 	zTemp1+1
.a1d5	69 00		adc #$00			adc 	#0
.a1d7	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1da	a0 00		ldy #$00			ldy 	#0
.a1dc					_MDLACopy:
.a1dc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1de	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e0	c8		iny				iny
.a1e1	98		tya				tya
.a1e2	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e4	d0 f6		bne $a1dc			bne 	_MDLACopy
.a1e6	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e8	91 38		sta ($38),y			sta 	(zTemp1),y
.a1ea	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1eb					MemoryNew:
.a1eb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ed	85 30		sta $30				sta 	codePtr
.a1ef	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1f1	85 31		sta $31				sta 	codePtr+1
.a1f3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f5	92 30		sta ($30)			sta 	(codePtr)
.a1f7	60		rts				rts
.a1f8					MemoryInline:
.a1f8	98		tya				tya 								; put address into stack,x
.a1f9	18		clc				clc
.a1fa	65 30		adc $30				adc 	codePtr
.a1fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1ff	a5 31		lda $31				lda 	codePtr+1
.a201	69 00		adc #$00			adc 	#0
.a203	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a206	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a209	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a20c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a20d					MemorySearch:
.a20d	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20f	86 37		stx $37				stx 	zTemp0+1
.a211	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a213	85 30		sta $30				sta 	codePtr
.a215	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a217	85 31		sta $31				sta 	codePtr+1
.a219					_MTAXLoop:
.a219	b2 30		lda ($30)			lda 	(codePtr)
.a21b	18		clc				clc
.a21c	f0 21		beq $a23f			beq 	_MTAXExit 					; reached end, exit with CC.
.a21e	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a220	b1 30		lda ($30),y			lda 	(codePtr),y
.a222	38		sec				sec
.a223	e5 36		sbc $36				sbc 	zTemp0
.a225	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a227	c8		iny				iny 								; do the MSB
.a228	b1 30		lda ($30),y			lda 	(codePtr),y
.a22a	e5 37		sbc $37				sbc 	zTemp0+1
.a22c	05 38		ora $38				ora 	zTemp1
.a22e	f0 0f		beq $a23f			beq 	_MTAXExit	 				; found
.a230	b0 0d		bcs $a23f			bcs 	_MTAXExit 					; current < required exit
.a232	18		clc				clc
.a233	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a235	65 30		adc $30				adc 	codePtr
.a237	85 30		sta $30				sta 	codePtr
.a239	90 02		bcc $a23d			bcc 	_CREExit
.a23b	e6 31		inc $31				inc 	codePtr+1
.a23d					_CREExit:
.a23d	80 da		bra $a219			bra 	_MTAXLoop
.a23f					_MTAXExit:
.a23f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a240					StackPushByte:
.a240	48		pha				pha 								; save byte
.a241	a5 34		lda $34				lda 	BasicStack
.a243	d0 09		bne $a24e			bne 	_SPBNoBorrow
.a245	c6 35		dec $35				dec 	BasicStack+1
.a247	48		pha				pha
.a248	a5 35		lda $35				lda 	BasicStack+1
.a24a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a24c	90 06		bcc $a254			bcc 	_SPBMemory
.a24e					_SPBNoBorrow:
.a24e	c6 34		dec $34				dec 	BasicStack
.a250	68		pla				pla 								; get back and write
.a251	92 34		sta ($34)			sta 	(BasicStack)
.a253	60		rts				rts
.a254					_SPBMemory:
.a254	a9 12		lda #$12		lda	#18
.a256	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.a259					StackPopByte:
.a259	b2 34		lda ($34)			lda 	(BasicStack)
.a25b	e6 34		inc $34				inc 	BasicStack
.a25d	d0 02		bne $a261			bne 	_SPBNoCarry
.a25f	e6 35		inc $35				inc 	BasicStack+1
.a261					_SPBNoCarry:
.a261	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a262					StackOpen:
.a262	48		pha				pha 								; save frame byte
.a263	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a265	0a		asl a				asl 	a 							; claim twice this for storage
.a266	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a268	38		sec				sec 								; so basically subtracting from
.a269	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a26b	85 34		sta $34				sta 	basicStack
.a26d	b0 08		bcs $a277			bcs 	_SONoBorrow
.a26f	c6 35		dec $35				dec 	basicStack+1
.a271	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a273	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a275	90 04		bcc $a27b			bcc 	_SOMemory
.a277					_SONoBorrow:
.a277	68		pla				pla 								; get marker back and write at TOS
.a278	92 34		sta ($34)			sta 	(basicStack)
.a27a	60		rts				rts
.a27b					_SOMemory:
.a27b	a9 12		lda #$12		lda	#18
.a27d	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.a280					StackClose:
.a280	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a282	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a284	0a		asl a				asl 	a 							; claim twice this.
.a285	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a287	85 34		sta $34				sta 	basicStack
.a289	90 02		bcc $a28d			bcc 	_SCExit
.a28b	e6 35		inc $35				inc 	basicStack+1
.a28d					_SCExit:
.a28d	60		rts				rts
.a28e					StackCheckFrame:
.a28e	48		pha				pha
.a28f					_StackRemoveLocals:
.a28f	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a291	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a293	b0 05		bcs $a29a			bcs 	_SCNoLocal
.a295	20 07 88	jsr $8807			jsr 	LocalPopValue
.a298	80 f5		bra $a28f			bra 	_StackRemoveLocals
.a29a					_SCNoLocal:
.a29a	68		pla				pla
.a29b	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a29d	29 f0		and #$f0			and 	#$F0 						; check type bits
.a29f	d0 01		bne $a2a2			bne 	_SCFError 					; different, we have structures mixed up
.a2a1	60		rts				rts
.a2a2					_SCFError:
.a2a2	8a		txa				txa 								; report error X
.a2a3	4c 3b 8d	jmp $8d3b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2a6					STKSaveCodePosition:
.a2a6	5a		phy				phy
.a2a7	98		tya				tya 								; save Y
.a2a8	a0 05		ldy #$05			ldy 	#5
.a2aa	91 34		sta ($34),y			sta 	(basicStack),y
.a2ac	88		dey				dey 								; save Code Pointer
.a2ad					_STKSaveLoop:
.a2ad	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2b0	91 34		sta ($34),y			sta 	(basicStack),y
.a2b2	88		dey				dey
.a2b3	d0 f8		bne $a2ad			bne 	_STKSaveLoop
.a2b5	7a		ply				ply
.a2b6	60		rts				rts
.a2b7					STKLoadCodePosition:
.a2b7	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2b9					_STKLoadLoop:
.a2b9	b1 34		lda ($34),y			lda 	(basicStack),y
.a2bb	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2be	c8		iny				iny
.a2bf	c0 05		cpy #$05			cpy 	#5
.a2c1	d0 f6		bne $a2b9			bne 	_STKLoadLoop
.a2c3	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2c5	a8		tay				tay
.a2c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2c7					StackReset:
.a2c7	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2c9	85 34		sta $34				sta 	0+basicStack
.a2cb	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2cd	85 35		sta $35				sta 	1+basicStack
.a2cf	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2d1	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2d4					StringConcrete:
.a2d4	5a		phy				phy 								; save position on stack
.a2d5	20 c7 99	jsr $99c7			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2d8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2db	85 38		sta $38				sta 	zTemp1
.a2dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2e0	85 39		sta $39				sta 	zTemp1+1
.a2e2	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2e4					_SALength:
.a2e4	c8		iny				iny
.a2e5	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2e7	d0 fb		bne $a2e4			bne 	_SALength
.a2e9	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2eb	b0 3f		bcs $a32c			bcs 	_SALengthError
.a2ed	98		tya				tya 				 				; length of the new string
.a2ee	18		clc				clc
.a2ef	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2f1	90 02		bcc $a2f5			bcc 	_SAHaveLength
.a2f3	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2f5					_SAHaveLength:
.a2f5	48		pha				pha 								; save length.
.a2f6	38		sec				sec
.a2f7	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2f9	6d 8e 04	adc $048e			adc 	StringMemory
.a2fc	8d 8e 04	sta $048e			sta 	StringMemory
.a2ff	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a301	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a304	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a306	6d 8f 04	adc $048f			adc 	StringMemory+1
.a309	8d 8f 04	sta $048f			sta 	StringMemory+1
.a30c	85 3b		sta $3b				sta 	zTemp2+1
.a30e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a311	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a312	38		sec				sec
.a313	e9 03		sbc #$03			sbc 	#3
.a315	92 3a		sta ($3a)			sta 	(zTemp2)
.a317	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a319	a0 01		ldy #$01			ldy 	#1
.a31b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a31d					_SACopyNewString:
.a31d	a0 00		ldy #$00			ldy 	#0
.a31f					_SACopyNSLoop:
.a31f	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a321	c8		iny				iny 								; write two on in string storage
.a322	c8		iny				iny
.a323	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a325	88		dey				dey 								; this makes it one one.
.a326	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a328	d0 f5		bne $a31f			bne 	_SACopyNSLoop
.a32a	7a		ply				ply
.a32b	60		rts				rts
.a32c					_SALengthError:
.a32c	a9 09		lda #$09		lda	#9
.a32e	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a331					StringSystemInitialise:
.a331	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a333	8d 8e 04	sta $048e			sta 	0+StringMemory
.a336	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a338	8d 8f 04	sta $048f			sta 	1+StringMemory
.a33b	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a33e	60		rts				rts
.a33f					StringSpaceInitialise:
.a33f	20 c7 99	jsr $99c7			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a342	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a344	8d 90 04	sta $0490			sta 	StringInitialised
.a347	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a34a	8d 91 04	sta $0491			sta 	StringTempPointer
.a34d	ad 8f 04	lda $048f			lda 	StringMemory+1
.a350	3a		dec a				dec 	a
.a351	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a354	60		rts				rts
.a355					StringTempAllocate:
.a355	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a357	b0 35		bcs $a38e			bcs 	_STALength
.a359	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a35c	30 05		bmi $a363			bmi 	_STAAllocate
.a35e	48		pha				pha 								; save value to subtract.
.a35f	20 3f a3	jsr $a33f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a362	68		pla				pla 								; restore it
.a363					_STAAllocate:
.a363	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a365	18		clc				clc  								; deliberate allows one more
.a366	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a369	8d 91 04	sta $0491			sta 	StringTempPointer
.a36c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a36f	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a371	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a374	69 ff		adc #$ff			adc 	#$FF
.a376	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a379	85 3d		sta $3d				sta 	zsTemp+1
.a37b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a37e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a381	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a384	a9 10		lda #$10			lda 	#NSTString
.a386	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a389	a9 00		lda #$00			lda 	#0 							; clear the target string
.a38b	92 3c		sta ($3c)			sta 	(zsTemp)
.a38d	60		rts				rts
.a38e					_STALength:
.a38e	a9 09		lda #$09		lda	#9
.a390	4c 3b 8d	jmp $8d3b		jmp	ErrorHandler
.a393					StringTempWrite:
.a393	48		pha				pha
.a394	92 3c		sta ($3c)			sta 	(zsTemp)
.a396	e6 3c		inc $3c				inc 	zsTemp
.a398	d0 02		bne $a39c			bne 	_STWNoCarry
.a39a	e6 3d		inc $3d				inc 	zsTemp+1
.a39c					_STWNoCarry:
.a39c	a9 00		lda #$00			lda 	#0
.a39e	92 3c		sta ($3c)			sta 	(zsTemp)
.a3a0	68		pla				pla
.a3a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a3a2					UnaryEvent:
.a3a2	fa		plx				plx
.a3a3	20 16 a7	jsr $a716			jsr 	TimerToStackX 				; timer in +0
.a3a6	e8		inx				inx  								; put reference into +1
.a3a7	20 c4 97	jsr $97c4			jsr 	EvaluateTerm
.a3aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3ad	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3af	d0 57		bne $a408			bne 	_UEType
.a3b1	e8		inx				inx 								; put the step in +2
.a3b2	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a3b5	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.a3b8	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.a3bb	ca		dex				dex
.a3bc	ca		dex				dex
.a3bd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3c0	85 36		sta $36				sta 	zTemp0
.a3c2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3c5	85 37		sta $37				sta 	zTemp0+1
.a3c7	5a		phy				phy
.a3c8	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3cc	30 36		bmi $a404			bmi 	_UEFalse 					; exit if signed.
.a3ce	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3d0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3d3	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3d5	c8		iny				iny
.a3d6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d9	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3db	c8		iny				iny
.a3dc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3df	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3e1	90 21		bcc $a404			bcc 	_UEFalse 					; no, return FALSE.
.a3e3	18		clc				clc
.a3e4	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3e9	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3ec	91 36		sta ($36),y			sta 	(zTemp0),y
.a3ee	c8		iny				iny
.a3ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3f2	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3f5	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f7	c8		iny				iny
.a3f8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3fb	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a400	7a		ply				ply
.a401	4c a8 8d	jmp $8da8			jmp 	ReturnTrue
.a404					_UEFalse:
.a404	7a		ply				ply 								; restore Y
.a405	4c b4 8d	jmp $8db4			jmp 	ReturnFalse 				; and return False
.a408					_UEType:
.a408	4c 92 9f	jmp $9f92			jmp 	TypeError
.a40b					RectangleCommand:
.a40b	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a40d	80 02		bra $a411			bra 	ShapeDrawCmd
.a40f					CircleCommand:
.a40f	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a411					ShapeDrawCmd:
.a411	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a414					ShapeDraw:
.a414	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a417	4c 93 a4	jmp $a493			jmp 	ExecuteGraphicCommand	 	; and complete
.a41a					SpriteCommand:
.a41a	a2 00		ldx #$00			ldx 	#0
.a41c	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get image number.
.a41f	5a		phy				phy
.a420	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a422	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a425	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a427	b0 0d		bcs $a436			bcs 	_SCRange
.a429	a0 ff		ldy #$ff			ldy 	#255
.a42b	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a42e	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a430	7a		ply				ply
.a431	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a434	80 5d		bra $a493			bra 	ExecuteGraphicCommand
.a436					_SCRange:
.a436	4c 8d 9f	jmp $9f8d			jmp 	RangeError
.a439					ImageCommand:
.a439	a2 00		ldx #$00			ldx 	#0
.a43b	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get image number.
.a43e	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a441					ImageRunDraw:
.a441	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a443	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a446	ad 34 06	lda $0634			lda 	gxDrawScale
.a449	0a		asl a				asl 	a
.a44a	0a		asl a				asl 	a
.a44b	0a		asl a				asl 	a
.a44c	a8		tay				tay
.a44d	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a44f	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a452	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a455	60		rts				rts
.a456					TextCommand:
.a456	a2 00		ldx #$00			ldx 	#0
.a458	20 32 9d	jsr $9d32			jsr 	EvaluateString 				; get text
.a45b	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a45e					TextRunDraw:
.a45e	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a460	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a463	a0 00		ldy #$00			ldy 	#0
.a465					_IRDLoop:
.a465	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a468	85 37		sta $37				sta 	zTemp0+1
.a46a	ad 08 04	lda $0408			lda 	NSMantissa0
.a46d	85 36		sta $36				sta 	zTemp0
.a46f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a471	f0 13		beq $a486			beq 	_IRDExit
.a473	5a		phy				phy									; save string pos
.a474	48		pha				pha 								; save char
.a475	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a478	0a		asl a				asl 	a
.a479	0a		asl a				asl 	a
.a47a	0a		asl a				asl 	a
.a47b	a8		tay				tay
.a47c	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a47e	fa		plx				plx 								; char to draw
.a47f	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a482	7a		ply				ply 								; restore string pos
.a483	c8		iny				iny
.a484	90 df		bcc $a465			bcc 	_IRDLoop 					; go back if no error.
.a486					_IRDExit:
.a486	60		rts				rts
.a487					PlotCommand:
.a487	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a489	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a48c	80 05		bra $a493			bra 	ExecuteGraphicCommand
.a48e					LineCommand:
.a48e	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a490	20 9f a4	jsr $a49f			jsr 	RunGraphicsCommand
.a493					ExecuteGraphicCommand:
.a493	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a496	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw 				; draw it and exit
.a499	b0 01		bcs $a49c			bcs 	_EGCError
.a49b	60		rts				rts
.a49c					_EGCError:
.a49c	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.a49f					RunGraphicsCommand:
.a49f	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a4a2	68		pla				pla 								; pop handler address
.a4a3	fa		plx				plx
.a4a4	1a		inc a				inc 	a
.a4a5	d0 01		bne $a4a8			bne 	_RGINoCarry
.a4a7	e8		inx				inx
.a4a8					_RGINoCarry:
.a4a8	8d 32 06	sta $0632			sta 	GXHandler
.a4ab	8e 33 06	stx $0633			stx 	GXHandler+1
.a4ae					_RGICommandLoop:
.a4ae	b1 30		lda ($30),y			lda 	(codePtr),y
.a4b0	c8		iny				iny
.a4b1	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4b3	f0 53		beq $a508			beq 	_RGI_To
.a4b5	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4b7	f0 55		beq $a50e			beq 	_RGI_Here
.a4b9	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4bb	f0 3d		beq $a4fa			beq 	_RGI_Exit
.a4bd	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4bf	f0 39		beq $a4fa			beq 	_RGI_Exit
.a4c1	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4c3	f0 3e		beq $a503			beq 	_RGI_Frame
.a4c5	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4c7	f0 33		beq $a4fc			beq 	_RGI_Solid
.a4c9	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4cb	f0 4b		beq $a518			beq 	_RGI_By
.a4cd	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4cf	f0 17		beq $a4e8			beq 	_RGI_Move2
.a4d1	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4d3	f0 65		beq $a53a			beq 	_RGI_Dim
.a4d5	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4d7	f0 78		beq $a551			beq 	_RGI_Colour
.a4d9	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4db	f0 74		beq $a551			beq 	_RGI_Colour
.a4dd	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a4e0	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4e2	d0 03		bne $a4e7			bne 	_RGI_Move 					; move
.a4e4	4c 7b a5	jmp $a57b			jmp		_RGI_SpriteInstructions
.a4e7					_RGI_Move:
.a4e7	88		dey				dey 								; unpick get.
.a4e8					_RGI_Move2:
.a4e8	20 a1 a5	jsr $a5a1			jsr 	GCGetCoordinatePair 		; move to here
.a4eb	20 c8 a5	jsr $a5c8			jsr 	GCCopyPairToStore 			; save
.a4ee	5a		phy				phy
.a4ef	20 be a5	jsr $a5be			jsr 	GCLoadAXY 					; load in
.a4f2	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4f4	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a4f7	7a		ply				ply
.a4f8	80 b4		bra $a4ae			bra 	_RGICommandLoop 			; and go round
.a4fa					_RGI_Exit:
.a4fa	88		dey				dey 								; unpick : / EOL
.a4fb	60		rts				rts
.a4fc					_RGI_Solid:
.a4fc	a9 02		lda #$02			lda 	#2
.a4fe	8d 2e 06	sta $062e			sta 	gxFillSolid
.a501	80 ab		bra $a4ae			bra 	_RGICommandLoop
.a503					_RGI_Frame:
.a503	9c 2e 06	stz $062e			stz 	gxFillSolid
.a506	80 a6		bra $a4ae			bra 	_RGICommandLoop
.a508					_RGI_To:
.a508	20 a1 a5	jsr $a5a1			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a50b	20 c8 a5	jsr $a5c8			jsr 	GCCopyPairToStore
.a50e					_RGI_Here:
.a50e	5a		phy				phy
.a50f	20 be a5	jsr $a5be			jsr 	GCLoadAXY 					; load it into AXY
.a512	20 78 a5	jsr $a578			jsr 	_RGICallHandler 			; go do whatever it is.
.a515	7a		ply				ply
.a516	80 96		bra $a4ae			bra 	_RGICommandLoop 			; and go round
.a518					_RGI_By:
.a518	20 ae a5	jsr $a5ae			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a51b	18		clc				clc
.a51c	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a51f	6d 2f 06	adc $062f			adc 	gxxPos
.a522	8d 2f 06	sta $062f			sta 	gxXPos
.a525	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a528	6d 30 06	adc $0630			adc 	gxxPos+1
.a52b	8d 30 06	sta $0630			sta 	gxXPos+1
.a52e	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a531	18		clc				clc
.a532	6d 31 06	adc $0631			adc 	gxYPos
.a535	8d 31 06	sta $0631			sta 	gxYPos
.a538	80 d4		bra $a50e			bra 	_RGI_Here
.a53a					_RGI_Dim:
.a53a	a2 01		ldx #$01			ldx	 	#1
.a53c	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger
.a53f	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a542	c9 00		cmp #$00			cmp 	#0
.a544	f0 2f		beq $a575			beq 	_RGIRange
.a546	c9 09		cmp #$09			cmp 	#8+1
.a548	b0 2b		bcs $a575			bcs		_RGIRange
.a54a	3a		dec a				dec 	a
.a54b	8d 34 06	sta $0634			sta 	gxDrawScale
.a54e	4c ae a4	jmp $a4ae			jmp 	_RGICommandLoop
.a551					_RGI_Colour:
.a551	a2 01		ldx #$01			ldx 	#1 							; colour
.a553	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger
.a556	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a558	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero
.a55b	b1 30		lda ($30),y			lda 	(codePtr),y
.a55d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a55f	d0 04		bne $a565			bne 	_RGICDefaultMode
.a561	c8		iny				iny
.a562	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger
.a565					_RGICDefaultMode:
.a565	5a		phy				phy
.a566	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a568	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a56b	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a56e	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a571	7a		ply				ply
.a572	4c ae a4	jmp $a4ae			jmp 	_RGICommandLoop 			; and go round
.a575					_RGIRange:
.a575	4c 8d 9f	jmp $9f8d			jmp 	RangeError
.a578					_RGICallHandler:
.a578	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a57b					_RGI_SpriteInstructions:
.a57b	c9 be		cmp #$be			cmp 	#KWD_OFF
.a57d	f0 07		beq $a586			beq 	_RGISpriteOff
.a57f	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a581	f0 13		beq $a596			beq 	_RGISetImage
.a583	4c e7 a4	jmp $a4e7			jmp 	_RGI_Move
.a586					_RGISpriteOff:
.a586	5a		phy				phy
.a587	a0 01		ldy #$01			ldy 	#1
.a589	a2 00		ldx #$00			ldx 	#0
.a58b					_RGIDoCommandLoop:
.a58b	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a58d	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a590	7a		ply				ply
.a591	b0 e2		bcs $a575			bcs 	_RGIRange
.a593	4c ae a4	jmp $a4ae			jmp 	_RGICommandLoop
.a596					_RGISetImage:
.a596	a2 01		ldx #$01			ldx 	#1
.a598	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger
.a59b	5a		phy				phy
.a59c	aa		tax				tax
.a59d	a0 00		ldy #$00			ldy 	#0
.a59f	80 ea		bra $a58b			bra 	_RGIDoCommandLoop
.a5a1					GCGetCoordinatePair:
.a5a1	a2 01		ldx #$01			ldx 	#1
.a5a3	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.a5a6	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a5a9	e8		inx				inx
.a5aa	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger
.a5ad	60		rts				rts
.a5ae					GCSignedCoordinatePair:
.a5ae	a2 01		ldx #$01			ldx 	#1
.a5b0	20 6b 9d	jsr $9d6b			jsr 	Evaluate16BitIntegerSigned
.a5b3	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a5b6	e8		inx				inx
.a5b7	20 6b 9d	jsr $9d6b			jsr 	Evaluate16BitIntegerSigned
.a5ba	60		rts				rts
.a5bb					_GCCPRange:
.a5bb	4c 8d 9f	jmp $9f8d			jmp 	RangeError
.a5be					GCLoadAXY:
.a5be	ad 30 06	lda $0630			lda 	gxXPos+1
.a5c1	ae 2f 06	ldx $062f			ldx 	gxXPos
.a5c4	ac 31 06	ldy $0631			ldy 	gxYPos
.a5c7	60		rts				rts
.a5c8					GCCopyPairToStore:
.a5c8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5cb	8d 2f 06	sta $062f			sta 	gxXPos
.a5ce	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5d1	8d 30 06	sta $0630			sta 	gxXPos+1
.a5d4	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5d7	8d 31 06	sta $0631			sta 	gxYPos
.a5da	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1
.a5db					BitmapCtrl:
.a5db	b1 30		lda ($30),y			lda 	(codePtr),y
.a5dd	c8		iny				iny
.a5de	a2 01		ldx #$01			ldx 	#1
.a5e0	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5e2	f0 11		beq $a5f5			beq 	BitmapSwitch
.a5e4	ca		dex				dex
.a5e5	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5e7	f0 0c		beq $a5f5			beq 	BitmapSwitch
.a5e9	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get the colour
.a5ec	5a		phy				phy
.a5ed	aa		tax				tax
.a5ee	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5f0	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a5f3	7a		ply				ply
.a5f4	60		rts				rts
.a5f5					BitmapSwitch:
.a5f5	5a		phy				phy
.a5f6	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5f8	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5fa	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a5fd	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5ff	a0 00		ldy #$00			ldy 	#0
.a601	a2 ff		ldx #$ff			ldx 	#$FF
.a603	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a606	9c 2e 06	stz $062e			stz 	gxFillSolid
.a609	9c 2f 06	stz $062f			stz 	gxXPos
.a60c	9c 30 06	stz $0630			stz 	gxXPos+1
.a60f	9c 31 06	stz $0631			stz 	gxYPos
.a612	9c 34 06	stz $0634			stz 	gxDrawScale
.a615	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a617	a2 00		ldx #$00			ldx 	#0
.a619	a0 00		ldy #$00			ldy 	#0
.a61b	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a61e	7a		ply				ply
.a61f	60		rts				rts
.a620					SpritesCtrl:
.a620	b1 30		lda ($30),y			lda 	(codePtr),y
.a622	c8		iny				iny
.a623	a2 01		ldx #$01			ldx 	#1
.a625	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a627	f0 08		beq $a631			beq 	SpriteSwitch
.a629	ca		dex				dex
.a62a	c9 be		cmp #$be			cmp 	#KWD_OFF
.a62c	f0 03		beq $a631			beq 	SpriteSwitch
.a62e	4c 88 9f	jmp $9f88			jmp 	SyntaxError
.a631					SpriteSwitch:
.a631	5a		phy				phy
.a632	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a634	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a636	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a639	7a		ply				ply
.a63a	60		rts				rts
.a63b					GfxCommand:
.a63b	a2 00		ldx #$00			ldx 	#0
.a63d	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; command
.a640	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a643	e8		inx				inx
.a644	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger 		; X
.a647	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a64a	e8		inx				inx
.a64b	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; Y
.a64e	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a651	4a		lsr a				lsr 	a
.a652	d0 16		bne $a66a			bne 	_GfxError
.a654	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a657	b0 11		bcs $a66a			bcs 	_GfxError 					; bit 7 should have been zero
.a659	5a		phy				phy 								; save pos
.a65a	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a65d	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a660	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a663	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw
.a666	b0 02		bcs $a66a			bcs 	_GfxError
.a668	7a		ply				ply 								; restore pos and exit.
.a669	60		rts				rts
.a66a					_GfxError:
.a66a	4c 8d 9f	jmp $9f8d			jmp 	RangeError
.a66d					UnaryHit:
.a66d	fa		plx				plx
.a66e	a9 36		lda #$36			lda 	#zTemp0
.a670	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a673	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a676	e8		inx				inx
.a677	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a67a	20 22 8d	jsr $8d22			jsr		CheckRightBracket
.a67d	ca		dex				dex 								; fix back up again.
.a67e	da		phx				phx 								; save X/Y
.a67f	5a		phy				phy
.a680	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a683	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a686	aa		tax				tax
.a687	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a689	20 1a aa	jsr $aa1a			jsr 	GXGraphicDraw 				; calculate result
.a68c	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a68d	7a		ply				ply 								; restore XY
.a68e	fa		plx				plx
.a68f	20 00 9e	jsr $9e00			jsr 	NSMSetByte 					; return the hit result
.a692	60		rts				rts
.a693					UnaryJoyX:
.a693	18		clc				clc
.a694	80 01		bra $a697			bra 	JoyMain
.a696					UnaryJoyY:
.a696	38		sec				sec
.a697					JoyMain:
.a697	fa		plx				plx 								; get pos
.a698	08		php				php 								; save carry (set for Y)
.a699	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a69c	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.a69f	20 ed a8	jsr $a8ed			jsr 	EXTReadController 			; read the controller.
.a6a2	28		plp				plp
.a6a3	90 02		bcc $a6a7			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a6a5	4a		lsr a				lsr 	a
.a6a6	4a		lsr a				lsr 	a
.a6a7					_JMNoShift:
.a6a7	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a6a8	b0 0a		bcs $a6b4			bcs 	_JMIsRight
.a6aa	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6ab	b0 04		bcs $a6b1			bcs 	_JMIsLeft
.a6ad	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; zero result
.a6b0	60		rts				rts
.a6b1					_JMIsLeft:
.a6b1	4c a8 8d	jmp $8da8			jmp 	ReturnTrue
.a6b4					_JMIsRight:
.a6b4	a9 01		lda #$01			lda 	#1
.a6b6	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.a6b9	60		rts				rts
.a6ba					UnaryJoyB:
.a6ba	fa		plx				plx 								; get pos
.a6bb	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6be	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.a6c1	20 ed a8	jsr $a8ed			jsr 	EXTReadController 			; read the controller.
.a6c4	4a		lsr a				lsr 	a
.a6c5	4a		lsr a				lsr 	a
.a6c6	4a		lsr a				lsr 	a
.a6c7	4a		lsr a				lsr 	a
.a6c8	29 01		and #$01			and 	#1
.a6ca	20 00 9e	jsr $9e00			jsr 	NSMSetByte
.a6cd	60		rts				rts
.a6ce					PaletteCommand:
.a6ce	a2 00		ldx #$00			ldx 	#0
.a6d0	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; colour
.a6d3	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a6d6	e8		inx				inx
.a6d7	20 5f 9d	jsr $9d5f			jsr 	Evaluate16BitInteger 		; r
.a6da	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a6dd	e8		inx				inx
.a6de	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; g
.a6e1	20 2a 8d	jsr $8d2a			jsr 	CheckComma
.a6e4	e8		inx				inx
.a6e5	20 7f 9d	jsr $9d7f			jsr 	Evaluate8BitInteger 		; b
.a6e8	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6eb	85 36		sta $36				sta 	zTemp0
.a6ed	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6ef	85 37		sta $37				sta 	zTemp0+1
.a6f1	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6f3	26 37		rol $37				rol	 	zTemp0+1
.a6f5	06 36		asl $36				asl 	zTemp0
.a6f7	26 37		rol $37				rol	 	zTemp0+1
.a6f9	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6fb	85 01		sta $01				sta 	1
.a6fd	5a		phy				phy
.a6fe	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a701	92 36		sta ($36)			sta 	(zTemp0)
.a703	a0 01		ldy #$01			ldy 	#1
.a705	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a708	91 36		sta ($36),y			sta 	(zTemp0),y
.a70a	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a70d	c8		iny				iny
.a70e	91 36		sta ($36),y			sta 	(zTemp0),y
.a710	7a		ply				ply
.a711	60		rts				rts
.a712					UnaryTimer:
.a712	fa		plx				plx
.a713	20 22 8d	jsr $8d22			jsr 	CheckRightBracket
.a716					TimerToStackX:
.a716	20 fe 9d	jsr $9dfe			jsr 	NSMSetZero 					; zero result
.a719	64 01		stz $01				stz 	1 							; access I/O
.a71b	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a71e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a721	ad 5a d6	lda $d65a			lda 	$D65A
.a724	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a727	ad 5b d6	lda $d65b			lda 	$D65B
.a72a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a72d	60		rts				rts
.a72e					EXTPrintCharacter:
.a72e	48		pha				pha
.a72f	da		phx				phx
.a730	5a		phy				phy
.a731	a6 01		ldx $01				ldx 	1
.a733	da		phx				phx
.a734	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a737	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a739	30 48		bmi $a783			bmi 	_EXPCColour
.a73b	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a73d	90 4d		bcc $a78c			bcc 	_EXPCControl
.a73f	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a741	86 01		stx $01				stx 	1
.a743	91 40		sta ($40),y			sta 	(EXTAddress),y
.a745	e6 01		inc $01				inc 	1 							; select colour memory
.a747	ad 37 06	lda $0637			lda 	EXTTextColour
.a74a	91 40		sta ($40),y			sta 	(EXTAddress),y
.a74c	c8		iny				iny 								; advance horizontal position
.a74d	8c 36 06	sty $0636			sty 	EXTColumn
.a750	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a753	90 66		bcc $a7bb			bcc 	_EXPCExit 					; no, then exit.
.a755					_EXPCCRLF:
.a755	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a758	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a75b	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a75e	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a761	f0 18		beq $a77b			beq 	_EXPCScroll
.a763	18		clc				clc 								; add width to address.
.a764	a5 40		lda $40				lda 	EXTAddress
.a766	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a769	85 40		sta $40				sta 	EXTAddress
.a76b	90 4e		bcc $a7bb			bcc 	_EXPCExit
.a76d	e6 41		inc $41				inc 	EXTAddress+1
.a76f	80 4a		bra $a7bb			bra 	_EXPCExit
.a771					_EXPCLeft:
.a771	ce 36 06	dec $0636			dec 	EXTColumn
.a774	10 45		bpl $a7bb			bpl 	_EXPCExit
.a776					_EXPCBegin:
.a776	9c 36 06	stz $0636			stz 	EXTColumn
.a779	80 40		bra $a7bb			bra 	_EXPCExit
.a77b					_EXPCScroll:
.a77b	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a77e	20 48 a8	jsr $a848			jsr 	EXTScreenScroll 			; scroll the screen
.a781	80 38		bra $a7bb			bra 	_EXPCExit
.a783					_EXPCColour:
.a783	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a785	b0 34		bcs $a7bb			bcs 	_EXPCExit
.a787	20 28 a8	jsr $a828			jsr 	_EXPCHandleColour
.a78a	80 2f		bra $a7bb			bra 	_EXPCExit
.a78c					_EXPCControl:
.a78c	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a78e	b0 2b		bcs $a7bb			bcs 	_EXPCExit
.a790	0a		asl a				asl 	a 							; double into X
.a791	aa		tax				tax
.a792	7c 06 a8	jmp ($a806,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a795					_EXPCUp:
.a795	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a798	f0 21		beq $a7bb			beq 	_EXPCExit
.a79a	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a79d	38		sec				sec
.a79e	a5 40		lda $40				lda 	EXTAddress
.a7a0	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7a3	85 40		sta $40				sta 	EXTAddress
.a7a5	b0 14		bcs $a7bb			bcs 	_EXPCExit
.a7a7	c6 41		dec $41				dec 	EXTAddress+1
.a7a9	80 10		bra $a7bb			bra 	_EXPCExit
.a7ab					_EXPCRight:
.a7ab	c8		iny				iny
.a7ac	8c 36 06	sty $0636			sty 	EXTColumn
.a7af	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7b2	d0 07		bne $a7bb			bne 	_EXPCExit
.a7b4					_EXPCEnd:
.a7b4	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7b7	3a		dec a				dec 	a
.a7b8	8d 36 06	sta $0636			sta 	EXTColumn
.a7bb					_EXPCExit:
.a7bb	20 9d a8	jsr $a89d			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7be	68		pla				pla
.a7bf	85 01		sta $01				sta 	1
.a7c1	7a		ply				ply
.a7c2	fa		plx				plx
.a7c3	68		pla				pla
.a7c4	60		rts				rts
.a7c5					_EXPCClearScreen:
.a7c5	20 5a a8	jsr $a85a			jsr		EXTClearScreenCode
.a7c8	80 f1		bra $a7bb			bra 	_EXPCExit
.a7ca					_EXPCDown:
.a7ca	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7cd	3a		dec a				dec 	a
.a7ce	cd 35 06	cmp $0635			cmp 	EXTRow
.a7d1	f0 e8		beq $a7bb			beq 	_EXPCExit
.a7d3	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7d6	18		clc				clc
.a7d7	a5 40		lda $40				lda 	EXTAddress
.a7d9	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7dc	85 40		sta $40				sta 	EXTAddress
.a7de	90 db		bcc $a7bb			bcc 	_EXPCExit
.a7e0	e6 41		inc $41				inc 	EXTAddress+1
.a7e2	80 d7		bra $a7bb			bra 	_EXPCExit
.a7e4					_EXPCTab:
.a7e4	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7e7	29 f8		and #$f8			and 	#$F8
.a7e9	18		clc				clc
.a7ea	69 08		adc #$08			adc 	#8
.a7ec	8d 36 06	sta $0636			sta 	EXTColumn
.a7ef	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7f2	90 c7		bcc $a7bb			bcc 	_EXPCExit
.a7f4	80 be		bra $a7b4			bra 	_EXPCEnd
.a7f6					_EXPCBackSpace:
.a7f6	88		dey				dey
.a7f7	30 c2		bmi $a7bb			bmi 	_EXPCExit
.a7f9	ce 36 06	dec $0636			dec 	EXTColumn
.a7fc	a9 02		lda #$02			lda 	#2
.a7fe	85 01		sta $01				sta 	1
.a800	a9 20		lda #$20			lda 	#32
.a802	91 40		sta ($40),y			sta 	(EXTAddress),y
.a804	80 b5		bra $a7bb			bra 	_EXPCExit
.a806					_EXPCActionTable:
>a806	bb a7						.word 	_EXPCExit 					; 00
>a808	76 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a80a	71 a7						.word 	_EXPCLeft 					; 02 B Left
>a80c	bb a7						.word 	_EXPCExit 					; 03 <Break>
>a80e	bb a7						.word 	_EXPCExit 					; 04
>a810	b4 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a812	ab a7						.word 	_EXPCRight 					; 06 F Right
>a814	bb a7						.word 	_EXPCExit 					; 07
>a816	f6 a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a818	e4 a7						.word 	_EXPCTab 					; 09 I Tab
>a81a	bb a7						.word 	_EXPCExit 					; 0A
>a81c	bb a7						.word 	_EXPCExit 					; 0B
>a81e	c5 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a820	55 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a822	ca a7						.word 	_EXPCDown 					; 0E N Down
>a824	bb a7						.word 	_EXPCExit 					; 0F
>a826	95 a7						.word 	_EXPCUp 					; 10 P Up
.a828					_EXPCHandleColour
.a828	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a82a	b0 16		bcs $a842			bcs 	_EXPCBackground
.a82c	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a82d	0a		asl a				asl 	a
.a82e	0a		asl a				asl 	a
.a82f	0a		asl a				asl 	a
.a830	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a832					_EXPCUpdate:
.a832	48		pha				pha 								; save new colour
.a833	8a		txa				txa 								; get mask
.a834	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a837	8d 37 06	sta $0637			sta 	EXTTextColour
.a83a	68		pla				pla 								; or in new colour
.a83b	0d 37 06	ora $0637			ora 	EXTTextColour
.a83e	8d 37 06	sta $0637			sta 	EXTTextColour
.a841	60		rts				rts
.a842					_EXPCBackground:
.a842	29 0f		and #$0f			and 	#$0F 						; get the colour
.a844	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a846	80 ea		bra $a832			bra 	_EXPCUpdate
.a848					EXTScreenScroll:
.a848	a9 02		lda #$02			lda 	#2 							; select text page
.a84a	85 01		sta $01				sta 	1
.a84c	a9 20		lda #$20			lda		#32 						; fill with space
.a84e	20 d5 a9	jsr $a9d5			jsr 	EXTScrollFill
.a851	e6 01		inc $01				inc 	1 							; select colour page
.a853	ad 37 06	lda $0637			lda 	EXTTextColour
.a856	20 d5 a9	jsr $a9d5			jsr 	EXTScrollFill
.a859	60		rts				rts
.a85a					EXTClearScreenCode:
.a85a	a9 02		lda #$02			lda 	#2 							; select text page
.a85c	85 01		sta $01				sta 	1
.a85e	a9 20		lda #$20			lda		#32 						; fill with space
.a860	20 6d a8	jsr $a86d			jsr 	_EXTCSFill
.a863	e6 01		inc $01				inc 	1 							; select colour page
.a865	ad 37 06	lda $0637			lda 	EXTTextColour
.a868	20 6d a8	jsr $a86d			jsr 	_EXTCSFill
.a86b	80 22		bra $a88f			bra 	EXTHomeCursor
.a86d					_EXTCSFill:
.a86d	aa		tax				tax
.a86e	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a870	85 40		sta $40				sta 	EXTAddress
.a872	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a874	85 41		sta $41				sta 	EXTAddress+1
.a876					_EXTCSFill1:
.a876	a0 00		ldy #$00			ldy 	#0
.a878	8a		txa				txa
.a879					_EXTCSFill2:
.a879	91 40		sta ($40),y			sta 	(EXTAddress),y
.a87b	c8		iny				iny
.a87c	d0 fb		bne $a879			bne 	_EXTCSFill2
.a87e	e6 41		inc $41				inc 	EXTAddress+1
.a880	a5 41		lda $41				lda 	EXTAddress+1
.a882	c9 d2		cmp #$d2			cmp 	#$D2
.a884	d0 f0		bne $a876			bne 	_EXTCSFill1
.a886	8a		txa				txa
.a887					_EXTCSFill3:
.a887	91 40		sta ($40),y			sta 	(EXTAddress),y
.a889	c8		iny				iny
.a88a	c0 c0		cpy #$c0			cpy 	#$C0
.a88c	d0 f9		bne $a887			bne 	_EXTCSFill3
.a88e	60		rts				rts
.a88f					EXTHomeCursor:
.a88f	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a892	9c 36 06	stz $0636			stz 	EXTColumn
.a895	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a897	85 40		sta $40				sta 	EXTAddress
.a899	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a89b	85 41		sta $41				sta 	EXTAddress+1
.a89d					EXTSetHardwareCursor:
.a89d	64 01		stz $01				stz 	1 							; I/O Page zero
.a89f	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8a1	8d 10 d0	sta $d010			sta 	$D010
.a8a4	a9 b1		lda #$b1			lda 	#$B1
.a8a6	8d 12 d0	sta $d012			sta 	$D012
.a8a9	ad 36 06	lda $0636			lda 	EXTColumn
.a8ac	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8af	9c 15 d0	stz $d015			stz 	$D015
.a8b2	ad 35 06	lda $0635			lda 	EXTRow
.a8b5	8d 16 d0	sta $d016			sta 	$D016
.a8b8	9c 17 d0	stz $d017			stz 	$D017
.a8bb	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a8bc					EXTInitialise:
.a8bc	64 01		stz $01				stz 	1 							; Access I/O
.a8be	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a8c1	9c 08 d0	stz $d008			stz 	$D008
.a8c4	9c 09 d0	stz $d009			stz 	$D009
.a8c7	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a8c9	8d 58 d6	sta $d658			sta 	$D658
.a8cc	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a8ce	8d 37 06	sta $0637			sta 	EXTTextColour
.a8d1	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a8d3	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a8d6	a9 3c		lda #$3c			lda 	#60
.a8d8	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a8db	64 01		stz $01				stz 	1
.a8dd	60		rts				rts
.a8de					EXTInputSingleCharacter:
.a8de	da		phx				phx
.a8df	5a		phy				phy
.a8e0					_EISCWait:
.a8e0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8e3	c9 00		cmp #$00			cmp 	#0
.a8e5	f0 f9		beq $a8e0			beq 	_EISCWait
.a8e7	7a		ply				ply
.a8e8	fa		plx				plx
.a8e9	60		rts				rts
.a8ea					EXTBreakCheck:
.a8ea	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a8ed					EXTReadController:
.a8ed	da		phx				phx
.a8ee	a2 00		ldx #$00			ldx 	#0
.a8f0	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a8f2	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8f5	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a8f7	f0 04		beq $a8fd			beq 	_NoSet1
.a8f9	8a		txa				txa
.a8fa	09 01		ora #$01			ora 	#1
.a8fc	aa		tax				tax
.a8fd					_NoSet1:
.a8fd	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a8ff	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a902	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a904	f0 04		beq $a90a			beq 	_NoSet1
.a906	8a		txa				txa
.a907	09 02		ora #$02			ora 	#2
.a909	aa		tax				tax
.a90a					_NoSet1:
.a90a	a9 06		lda #$06			lda 	#(($32) >> 3)
.a90c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a90f	29 04		and #$04			and 	#($01 << (($32) & 7))
.a911	f0 04		beq $a917			beq 	_NoSet1
.a913	8a		txa				txa
.a914	09 04		ora #$04			ora 	#4
.a916	aa		tax				tax
.a917					_NoSet1:
.a917	a9 04		lda #$04			lda 	#(($25) >> 3)
.a919	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a91c	29 20		and #$20			and 	#($01 << (($25) & 7))
.a91e	f0 04		beq $a924			beq 	_NoSet1
.a920	8a		txa				txa
.a921	09 08		ora #$08			ora 	#8
.a923	aa		tax				tax
.a924					_NoSet1:
.a924	a9 04		lda #$04			lda 	#(($26) >> 3)
.a926	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a929	29 40		and #$40			and 	#($01 << (($26) & 7))
.a92b	f0 04		beq $a931			beq 	_NoSet1
.a92d	8a		txa				txa
.a92e	09 10		ora #$10			ora 	#16
.a930	aa		tax				tax
.a931					_NoSet1:
.a931	8a		txa				txa
.a932	fa		plx				plx
.a933	60		rts				rts
.a934					EXTInputLine:
.a934	48		pha				pha
.a935	da		phx				phx
.a936	5a		phy				phy
.a937	a5 01		lda $01				lda 	1 							; save I/O page
.a939	48		pha				pha
.a93a					_EILLoop:
.a93a	20 de a8	jsr $a8de			jsr 	ExtInputSingleCharacter
.a93d	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a93f	f0 40		beq $a981			beq 	_EILExit
.a941	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a943	f0 1c		beq $a961			beq 	_EILBackspace
.a945	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a947	90 12		bcc $a95b			bcc 	_EILPrintLoop
.a949	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a94b	b0 0e		bcs $a95b			bcs 	_EILPrintLoop
.a94d	48		pha				pha 								; save character
.a94e	a9 02		lda #$02			lda 	#2  						; insert a space
.a950	85 01		sta $01				sta 	1
.a952	20 c3 a9	jsr $a9c3			jsr 	EXTILInsert 				; insert in text screen
.a955	e6 01		inc $01				inc 	1
.a957	20 c3 a9	jsr $a9c3			jsr 	EXTILInsert 				; insert in colour screen
.a95a	68		pla				pla 								; get character back.
.a95b					_EILPrintLoop:
.a95b	20 2e a7	jsr $a72e			jsr 	ExtPrintCharacter
.a95e	80 da		bra $a93a			bra 	_EILLoop
.a960	60		rts				rts
.a961					_EILBackspace:
.a961	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a964	f0 d4		beq $a93a			beq 	_EILLoop
.a966	a9 02		lda #$02			lda 	#2 							; move cursor left
.a968	20 2e a7	jsr $a72e			jsr 	EXTPrintCharacter
.a96b	a9 02		lda #$02			lda 	#2 							; text block
.a96d	85 01		sta $01				sta 	1
.a96f	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a971	20 ae a9	jsr $a9ae			jsr 	EXTILDelete
.a974	e6 01		inc $01				inc 	1 							; colour block
.a976	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a979	88		dey				dey
.a97a	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a97c	20 ae a9	jsr $a9ae			jsr 	EXTILDelete 				; backspace attribute
.a97f	80 b9		bra $a93a			bra 	_EILLoop 					; and go round.
.a981					_EILExit:
.a981	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a983	85 01		sta $01				sta 	1
.a985	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a987					_EILScrapeLine:
.a987	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a989	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a98c	c8		iny				iny
.a98d	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a990	d0 f5		bne $a987			bne 	_EILScrapeLine
.a992					_EILTrimSpaces:
.a992	88		dey				dey
.a993	f0 08		beq $a99d			beq 	_EILEndTrim
.a995	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a998	c9 20		cmp #$20			cmp 	#' '
.a99a	f0 f6		beq $a992			beq 	_EILTrimSpaces
.a99c	c8		iny				iny 								; trim after non space character.
.a99d					_EILEndTrim:
.a99d	a9 00		lda #$00			lda 	#0 							; trim here.
.a99f	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a9a2	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a9a4	20 2e a7	jsr $a72e			jsr 	ExtPrintCharacter
.a9a7	68		pla				pla 								; reset I/O page
.a9a8	85 01		sta $01				sta 	1
.a9aa	7a		ply				ply
.a9ab	fa		plx				plx
.a9ac	68		pla				pla
.a9ad	60		rts				rts
.a9ae					EXTILDelete:
.a9ae	48		pha				pha 								; save the new character
.a9af	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a9b2					_EXTDLoop:
.a9b2	c8		iny				iny 								; copy one byte down.
.a9b3	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9b5	88		dey				dey
.a9b6	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9b8	c8		iny				iny 								; do till end of line.
.a9b9	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a9bc	90 f4		bcc $a9b2			bcc 	_EXTDLoop
.a9be	88		dey				dey 	 							; write in last slot.
.a9bf	68		pla				pla
.a9c0	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9c2	60		rts				rts
.a9c3					EXTILInsert:
.a9c3	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a9c6					_EXTILoop:
.a9c6	88		dey				dey 								; back one
.a9c7	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a9ca	f0 08		beq $a9d4			beq 	_EXTIExit
.a9cc	88		dey				dey 								; copy one byte up.
.a9cd	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9cf	c8		iny				iny
.a9d0	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9d2	80 f2		bra $a9c6			bra 	_EXTILoop
.a9d4					_EXTIExit:
.a9d4	60		rts				rts
.a9d5					EXTScrollFill:
.a9d5	aa		tax				tax									; save value to fill with
.a9d6	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a9d8	48		pha				pha
.a9d9	a5 37		lda $37				lda 	zTemp0+1
.a9db	48		pha				pha
.a9dc	a5 38		lda $38				lda 	zTemp1
.a9de	48		pha				pha
.a9df	a5 39		lda $39				lda 	zTemp1+1
.a9e1	48		pha				pha
.a9e2	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a9e4	85 37		sta $37				sta 	zTemp0+1
.a9e6	85 39		sta $39				sta 	zTemp1+1
.a9e8	64 36		stz $36				stz 	zTemp0
.a9ea	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a9ed	85 38		sta $38				sta 	zTemp1
.a9ef	a0 00		ldy #$00			ldy 	#0
.a9f1					_EXSFCopy1:
.a9f1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a9f3	91 36		sta ($36),y			sta 	(zTemp0),y
.a9f5	c8		iny				iny
.a9f6	d0 f9		bne $a9f1			bne 	_EXSFCopy1
.a9f8	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a9fa	e6 39		inc $39				inc 	zTemp1+1
.a9fc	a5 39		lda $39				lda 	zTemp1+1
.a9fe	c9 d3		cmp #$d3			cmp 	#$D3
.aa00	d0 ef		bne $a9f1			bne 	_EXSFCopy1
.aa02	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.aa05	8a		txa				txa
.aa06					_EXSFFill1:
.aa06	88		dey				dey
.aa07	91 40		sta ($40),y			sta 	(EXTAddress),y
.aa09	c0 00		cpy #$00			cpy 	#0
.aa0b	10 f9		bpl $aa06			bpl 	_EXSFFill1
.aa0d	68		pla				pla
.aa0e	85 39		sta $39				sta 	zTemp1+1
.aa10	68		pla				pla
.aa11	85 38		sta $38				sta 	zTemp1
.aa13	68		pla				pla
.aa14	85 37		sta $37				sta 	zTemp0+1
.aa16	68		pla				pla
.aa17	85 36		sta $36				sta 	zTemp0
.aa19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7b8					GRVectorTable:
>b7b8	15 ac					.word	GXInitialise             ; $00 Initialise
>b7ba	2f ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7bc	77 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7be	c7 ab					.word	GXClearBitmap            ; $03 Clear
>b7c0	06 ae					.word	GXSetColourMode          ; $04 Colour
>b7c2	ce af					.word	GXFontHandler            ; $05 DrawFont
>b7c4	16 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7c6	82 b0					.word	GXSelect                 ; $07 SpriteUse
>b7c8	ab b0					.word	GXSelectImage            ; $08 SpriteImage
>b7ca	32 b2					.word	GXCollide                ; $09 SpriteCollide
>b7cc	79 aa					.word	GRUndefined              ; $0a
>b7ce	79 aa					.word	GRUndefined              ; $0b
>b7d0	79 aa					.word	GRUndefined              ; $0c
>b7d2	79 aa					.word	GRUndefined              ; $0d
>b7d4	79 aa					.word	GRUndefined              ; $0e
>b7d6	79 aa					.word	GRUndefined              ; $0f
>b7d8	79 aa					.word	GRUndefined              ; $10
>b7da	79 aa					.word	GRUndefined              ; $11
>b7dc	79 aa					.word	GRUndefined              ; $12
>b7de	79 aa					.word	GRUndefined              ; $13
>b7e0	79 aa					.word	GRUndefined              ; $14
>b7e2	79 aa					.word	GRUndefined              ; $15
>b7e4	79 aa					.word	GRUndefined              ; $16
>b7e6	79 aa					.word	GRUndefined              ; $17
>b7e8	79 aa					.word	GRUndefined              ; $18
>b7ea	79 aa					.word	GRUndefined              ; $19
>b7ec	79 aa					.word	GRUndefined              ; $1a
>b7ee	79 aa					.word	GRUndefined              ; $1b
>b7f0	79 aa					.word	GRUndefined              ; $1c
>b7f2	79 aa					.word	GRUndefined              ; $1d
>b7f4	79 aa					.word	GRUndefined              ; $1e
>b7f6	79 aa					.word	GRUndefined              ; $1f
>b7f8	77 aa					.word	GXMove                   ; $20 Move
>b7fa	d4 ac					.word	GXLine                   ; $21 Line
>b7fc	4f ae					.word	GXFrameRectangle         ; $22 FrameRect
>b7fe	4c ae					.word	GXFillRectangle          ; $23 FillRect
>b800	7e aa					.word	GXFrameCircle            ; $24 FrameCircle
>b802	7a aa					.word	GXFillCircle             ; $25 FillCircle
>b804	79 aa					.word	GRUndefined              ; $26
>b806	79 aa					.word	GRUndefined              ; $27
>b808	34 ae					.word	GXPlotPoint              ; $28 Plot
>b80a	41 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa1a					GXGraphicDraw:
.aa1a	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa1c	b0 06		bcs $aa24			bcs 	_GDCoordinate
.aa1e	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa20	84 37		sty $37				sty 	gxzTemp0+1
.aa22	80 4b		bra $aa6f			bra 	_GDExecuteA 				; and execute
.aa24					_GDCoordinate:
.aa24	48		pha				pha 								; save AXY
.aa25	da		phx				phx
.aa26	5a		phy				phy
.aa27	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa29					_GDCopy1:
.aa29	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa2c	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa2f	ca		dex				dex
.aa30	10 f7		bpl $aa29			bpl 	_GDCopy1
.aa32	68		pla				pla 								; update Y
.aa33	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa36	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa39	68		pla				pla
.aa3a	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa3d	68		pla				pla 								; get A (command+X.1) back
.aa3e	48		pha				pha
.aa3f	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa41	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa44	68		pla				pla 								; get command back
.aa45	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa47	48		pha				pha 								; push back.
.aa48	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa4a	f0 17		beq $aa63			beq 	_GDCopyToWorkArea
.aa4c	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa4f	f0 07		beq $aa58			beq 	_GDCheckY
.aa51	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa54	c9 40		cmp #$40			cmp 	#64
.aa56	b0 08		bcs $aa60			bcs 	_GDError1
.aa58					_GDCheckY:
.aa58	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa5b	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa5e	90 03		bcc $aa63			bcc 	_GDCopyToWorkArea
.aa60					_GDError1:
.aa60	68		pla				pla
.aa61					_GDError2:
.aa61	38		sec				sec
.aa62	60		rts				rts
.aa63					_GDCopyToWorkArea:
.aa63	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa65					_GDCopy2:
.aa65	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa68	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa6b	ca		dex				dex
.aa6c	10 f7		bpl $aa65			bpl 	_GDCopy2
.aa6e	68		pla				pla 								; get command
.aa6f					_GDExecuteA:
.aa6f	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa71	b0 ee		bcs $aa61			bcs 	_GDError2
.aa73	aa		tax				tax
.aa74	7c b8 b7	jmp ($b7b8,x)			jmp 	(GRVectorTable,x)
.aa77					GXMove:
.aa77	18		clc				clc
.aa78	60		rts				rts
.aa79					GRUndefined:
>aa79	db						.byte 	$DB 						; causes a break in the emulator
.aa7a					GXFillCircle:
.aa7a	a9 ff		lda #$ff			lda 	#255
.aa7c	80 02		bra $aa80			bra 	GXCircle
.aa7e					GXFrameCircle:
.aa7e	a9 00		lda #$00			lda 	#0
.aa80					GXCircle:
.aa80	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa83	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa86	f0 26		beq $aaae			beq 	_GXCFail
.aa88	20 d9 b2	jsr $b2d9			jsr 	GXSortXY 					; topleft/bottomright
.aa8b	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.aa8e	20 80 ab	jsr $ab80			jsr 	GXCircleSetup 				; set up for drawing
.aa91	9c de 06	stz $06de			stz 	gxYChanged
.aa94					_GXCircleDraw:
.aa94	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aa97	cd dc 06	cmp $06dc			cmp 	gYCentre
.aa9a	90 0a		bcc $aaa6			bcc 	_GXCircleContinue
.aa9c	d0 03		bne $aaa1			bne 	_GXNoLast
.aa9e	20 b3 aa	jsr $aab3			jsr 	GXPlot1
.aaa1					_GXNoLast:
.aaa1	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; close the bitmap
.aaa4	18		clc				clc
.aaa5	60		rts				rts
.aaa6					_GXCircleContinue:
.aaa6	20 b0 aa	jsr $aab0			jsr 	GXPlot2 					; draw it
.aaa9	20 2d ab	jsr $ab2d			jsr 	GXCircleMove 				; adjust the coordinates
.aaac	80 e6		bra $aa94			bra 	_GXCircleDraw
.aaae					_GXCFail:
.aaae	38		sec				sec
.aaaf	60		rts				rts
.aab0					GXPlot2:
.aab0	20 b3 aa	jsr $aab3			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aab3					GXPlot1:
.aab3	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aab6	f0 03		beq $aabb			beq 	_GXPlot1Only
.aab8	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; plot and negate
.aabb					_GXPlot1Only:
.aabb	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; twice, undoing negation
.aabe	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aac1	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aac4	8d dc 06	sta $06dc			sta 	gYCentre
.aac7	8e db 06	stx $06db			stx 	gXCentre
.aaca	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aacd	a9 ff		lda #$ff			lda 	#$FF
.aacf	8d de 06	sta $06de			sta 	gxYChanged
.aad2	60		rts				rts
.aad3	20 d7 aa	jsr $aad7			jsr 	GXPlot0 						; do once
.aad6	60		rts				rts
.aad7	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aada	f0 05		beq $aae1			beq 	_GXPlot0Always
.aadc	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aadf	f0 2d		beq $ab0e			beq 	GXPlot0Exit
.aae1					_GXPlot0Always:
.aae1	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aae3	ad dc 06	lda $06dc			lda 	gYCentre
.aae6	20 0f ab	jsr $ab0f			jsr 	GXSubCopy
.aae9	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aaeb	ad db 06	lda $06db			lda 	gXCentre
.aaee	20 0f ab	jsr $ab0f			jsr 	GXSubCopy
.aaf1	48		pha				pha 									; save last offset X
.aaf2	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 					; calculate position/offset.
.aaf5	68		pla				pla
.aaf6	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aaf7	85 36		sta $36				sta 	gxzTemp0
.aaf9	64 37		stz $37				stz 	gxzTemp0+1
.aafb	26 37		rol $37				rol 	gxzTemp0+1
.aafd	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab00	69 80		adc #$80			adc 	#128
.ab02	20 9f ae	jsr $ae9f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab05	38		sec				sec 									; GY = -GY
.ab06	a9 00		lda #$00			lda 	#0
.ab08	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab0b	8d dc 06	sta $06dc			sta 	gYCentre
.ab0e					GXPlot0Exit:
.ab0e	60		rts				rts
.ab0f					GXSubCopy:
.ab0f	85 36		sta $36				sta 	gxzTemp0
.ab11	64 37		stz $37				stz 	gxzTemp0+1
.ab13	29 80		and #$80			and 	#$80
.ab15	f0 02		beq $ab19			beq 	_GXNoSx
.ab17	c6 37		dec $37				dec 	gxzTemp0+1
.ab19					_GXNoSx:
.ab19	38		sec				sec
.ab1a	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab1d	e5 36		sbc $36				sbc 	gxzTemp0
.ab1f	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab22	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab25	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab27	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab2a	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab2c	60		rts				rts
.ab2d					GXCircleMove:
.ab2d	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab30	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab32	10 0d		bpl $ab41			bpl 	_GXEMPositive
.ab34	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab37	ad db 06	lda $06db			lda 	gXCentre
.ab3a	20 60 ab	jsr $ab60			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab3d	a9 06		lda #$06			lda 	#6  						; and add 6
.ab3f	80 15		bra $ab56			bra 	_GXEMAddD
.ab41					_GXEMPositive:
.ab41	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab44	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab47	38		sec				sec 								; calculate X-Y
.ab48	ad db 06	lda $06db			lda 	gXCentre
.ab4b	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab4e	20 60 ab	jsr $ab60			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab51	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab53	ce de 06	dec $06de			dec 	gxYChanged
.ab56					_GXEMAddD:
.ab56	18		clc				clc
.ab57	65 38		adc $38				adc 	gxzTemp1
.ab59	85 38		sta $38				sta 	gxzTemp1
.ab5b	90 02		bcc $ab5f			bcc 	_GXEMNoCarry
.ab5d	e6 39		inc $39				inc 	gxzTemp1+1
.ab5f					_GXEMNoCarry:
.ab5f	60		rts				rts
.ab60					_GXAdd4TimesToD:
.ab60	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab62	29 80		and #$80			and 	#$80
.ab64	f0 02		beq $ab68			beq 	_GXA4Unsigned
.ab66	a9 ff		lda #$ff			lda 	#$FF
.ab68					_GXA4Unsigned:
.ab68	85 37		sta $37				sta 	gxzTemp0+1
.ab6a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab6c	26 37		rol $37				rol 	gxzTemp0+1
.ab6e	06 36		asl $36				asl 	gxzTemp0
.ab70	26 37		rol $37				rol 	gxzTemp0+1
.ab72	18		clc				clc 								; add
.ab73	a5 36		lda $36				lda		gxzTemp0
.ab75	65 38		adc $38				adc 	gxzTemp1
.ab77	85 38		sta $38				sta 	gxzTemp1
.ab79	a5 37		lda $37				lda		gxzTemp0+1
.ab7b	65 39		adc $39				adc 	gxzTemp1+1
.ab7d	85 39		sta $39				sta 	gxzTemp1+1
.ab7f	60		rts				rts
.ab80					GXCircleSetup:
.ab80	38		sec				sec
.ab81	ad 48 06	lda $0648			lda 	gxY1
.ab84	ed 44 06	sbc $0644			sbc 	gxY0
.ab87	4a		lsr a				lsr 	a
.ab88	8d da 06	sta $06da			sta 	gxRadius
.ab8b	a2 00		ldx #$00			ldx 	#0
.ab8d	20 af ab	jsr $abaf			jsr 	_GXCalculateCentre
.ab90	a2 02		ldx #$02			ldx 	#2
.ab92	20 af ab	jsr $abaf			jsr 	_GXCalculateCentre
.ab95	9c db 06	stz $06db			stz 	gXCentre
.ab98	ad da 06	lda $06da			lda 	gxRadius
.ab9b	8d dc 06	sta $06dc			sta 	gYCentre
.ab9e	0a		asl a				asl 	a 							; R x 2
.ab9f	85 36		sta $36				sta 	gxzTemp0
.aba1	38		sec				sec
.aba2	a9 03		lda #$03			lda 	#3
.aba4	e5 36		sbc $36				sbc 	gxzTemp0
.aba6	85 38		sta $38				sta 	gxzTemp1
.aba8	a9 00		lda #$00			lda 	#0
.abaa	e9 00		sbc #$00			sbc 	#0
.abac	85 39		sta $39				sta 	gxzTemp1+1
.abae	60		rts				rts
.abaf					_GXCalculateCentre:
.abaf	38		sec				sec
.abb0	bd 46 06	lda $0646,x			lda 	gxX1,x
.abb3	7d 42 06	adc $0642,x			adc 	gXX0,x
.abb6	9d 46 06	sta $0646,x			sta 	gXX1,x
.abb9	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abbc	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abbf	4a		lsr a				lsr 	a
.abc0	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abc3	7e 46 06	ror $0646,x			ror 	gXX1,x
.abc6	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abc7					GXClearBitmap:
.abc7	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abca	f0 24		beq $abf0			beq 	_GXCBFail
.abcc	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start access
.abcf	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abd1	ad 4e 06	lda $064e			lda 	gxHeight
.abd4	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abd6	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abd8					_GXCalcLastPage:
.abd8	98		tya				tya 								; add to base page
.abd9	18		clc				clc
.abda	6d 4c 06	adc $064c			adc 	gxBasePage
.abdd	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abdf					_GXClearAll:
.abdf	20 f2 ab	jsr $abf2			jsr 	_GXClearBlock 				; clear 8k block
.abe2	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abe4	a5 0b		lda $0b				lda 	GXEditSlot
.abe6	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abe9	b0 f4		bcs $abdf			bcs 	_GXClearAll
.abeb	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap	 			; stop access
.abee	18		clc				clc
.abef	60		rts				rts
.abf0					_GXCBFail:
.abf0	38		sec				sec
.abf1	60		rts				rts
.abf2					_GXClearBlock:
.abf2	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abf4	85 38		sta $38				sta 	0+gxzTemp1
.abf6	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abf8	85 39		sta $39				sta 	1+gxzTemp1
.abfa					_GXCB0:
.abfa	a5 36		lda $36				lda 	gxzTemp0
.abfc	a0 00		ldy #$00			ldy 	#0
.abfe					_GXCB1:
.abfe	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac00	c8		iny				iny
.ac01	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac03	c8		iny				iny
.ac04	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac06	c8		iny				iny
.ac07	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac09	c8		iny				iny
.ac0a	d0 f2		bne $abfe			bne 	_GXCB1
.ac0c	e6 39		inc $39				inc 	gxzTemp1+1
.ac0e	a5 39		lda $39				lda 	gxzTemp1+1
.ac10	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac12	d0 e6		bne $abfa			bne 	_GXCB0
.ac14	60		rts				rts
.ac15					GXInitialise:
.ac15	64 01		stz $01				stz 	1
.ac17	a9 01		lda #$01			lda 	#1
.ac19	8d 00 d0	sta $d000			sta 	$D000
.ac1c	18		clc				clc
.ac1d	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac20	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac23	a2 0f		ldx #$0f			ldx 	#15
.ac25					_GXIClear:
.ac25	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac28	ca		dex				dex
.ac29	10 fa		bpl $ac25			bpl 	_GXIClear
.ac2b	20 c6 ac	jsr $acc6			jsr 	GXClearSpriteStore
.ac2e	60		rts				rts
.ac2f					GXControlBitmap:
.ac2f	64 01		stz $01				stz 	1
.ac31	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac33	29 01		and #$01			and 	#1 							; set bitmap flag
.ac35	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac38	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac39	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac3c	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac3e	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac40	90 02		bcc $ac44			bcc 	_CBNotOn
.ac42	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac44					_CBNotOn:
.ac44	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac47	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac49	29 07		and #$07			and 	#7
.ac4b	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac4e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac50	d0 02		bne $ac54			bne 	_CBNotDefault
.ac52	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac54					_CBNotDefault:
.ac54	8d 4c 06	sta $064c			sta 	gxBasePage
.ac57	20 b8 ac	jsr $acb8			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac5a	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac5c	8d 03 d1	sta $d103			sta 	$D103
.ac5f	a5 36		lda $36				lda 	gxzTemp0
.ac61	8d 02 d1	sta $d102			sta 	$D102
.ac64	9c 01 d1	stz $d101			stz 	$D101
.ac67	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac69	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac6c	29 01		and #$01			and 	#1
.ac6e	f0 02		beq $ac72			beq 	_CBHaveHeight
.ac70	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac72					_CBHaveHeight
.ac72	8e 4e 06	stx $064e			stx 	gxHeight
.ac75	18		clc				clc
.ac76	60		rts				rts
.ac77					GXControlSprite:
.ac77	64 01		stz $01				stz 	1
.ac79	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac7b	29 01		and #$01			and 	#1 							; set sprites flag
.ac7d	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac80	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac81	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac84	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac86	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac88	90 02		bcc $ac8c			bcc 	_CSNotOn
.ac8a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac8c					_CSNotOn:
.ac8c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac8f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac91	d0 02		bne $ac95			bne 	_CSNotDefault
.ac93	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac95					_CSNotDefault:
.ac95	8d 4d 06	sta $064d			sta 	gxSpritePage
.ac98	20 b8 ac	jsr $acb8			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac9b	a5 36		lda $36				lda 	zTemp0
.ac9d	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.aca0	a5 37		lda $37				lda 	zTemp0+1
.aca2	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.aca5	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aca7					_CSClear:
.aca7	9e 00 d9	stz $d900,x			stz 	$D900,x
.acaa	9e 00 da	stz $da00,x			stz 	$DA00,x
.acad	ca		dex				dex
.acae	d0 f7		bne $aca7			bne 	_CSClear
.acb0	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acb3	20 c6 ac	jsr $acc6			jsr 	GXClearSpriteStore
.acb6	18		clc				clc
.acb7	60		rts				rts
.acb8					GXCalculateBaseAddress:
.acb8	85 36		sta $36				sta 	gxzTemp0
.acba	64 37		stz $37				stz 	gxzTemp0+1
.acbc	a9 05		lda #$05			lda 	#5
.acbe					_GXShift:
.acbe	06 36		asl $36				asl 	gxzTemp0
.acc0	26 37		rol $37				rol 	gxzTemp0+1
.acc2	3a		dec a				dec		a
.acc3	d0 f9		bne $acbe			bne 	_GXShift
.acc5	60		rts				rts
.acc6					GXClearSpriteStore:
.acc6	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acc8					_GXCSSLoop:
.acc8	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.accb	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.accd	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.acd0	ca		dex				dex
.acd1	10 f5		bpl $acc8			bpl 	_GXCSSLoop
.acd3	60		rts				rts
.acd4					GXLine:
.acd4	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acd7	f0 28		beq $ad01			beq 	_GXLFail
.acd9	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap
.acdc	20 f7 b2	jsr $b2f7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acdf	20 a7 ad	jsr $ada7			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ace2	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; calculate position/offset.
.ace5					_GXDrawLoop:
.ace5	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ace8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.acea	2d 52 06	and $0652			and 	gxANDValue
.aced	4d 51 06	eor $0651			eor 	gxEORValue
.acf0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acf2	20 03 ad	jsr $ad03			jsr 	GXLineIsComplete 			; is the line complete ?
.acf5	f0 05		beq $acfc			beq 	_GXLExit
.acf7	20 1e ad	jsr $ad1e			jsr 	GXLineAdvance 				; code as per advance method
.acfa	80 e9		bra $ace5			bra 	_GXDrawLoop
.acfc					_GXLExit:
.acfc	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.acff	18		clc				clc
.ad00	60		rts				rts
.ad01					_GXLFail:
.ad01	38		sec				sec
.ad02	60		rts				rts
.ad03					GXLineIsComplete:
.ad03	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad06	d0 0f		bne $ad17			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad08	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad0b	4d 46 06	eor $0646			eor 	GXX1
.ad0e	d0 06		bne $ad16			bne 	_GXLICExit
.ad10	ad 43 06	lda $0643			lda 	GXX0+1
.ad13	4d 47 06	eor $0647			eor 	GXX1+1
.ad16					_GXLICExit:
.ad16	60		rts				rts
.ad17					_GXLICCompareY:
.ad17	ad 48 06	lda $0648			lda 	GXY1
.ad1a	4d 44 06	eor $0644			eor 	GXY0
.ad1d	60		rts				rts
.ad1e					GXLineAdvance:
.ad1e	18		clc				clc 								; add adjust to position
.ad1f	ad e3 06	lda $06e3			lda 	GXPosition
.ad22	6d e4 06	adc $06e4			adc 	GXAdjust
.ad25	8d e3 06	sta $06e3			sta 	GXPosition
.ad28	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad2b	b0 05		bcs $ad32			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad2d	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad30	90 0a		bcc $ad3c			bcc 	_GXLANoExtra
.ad32					_GXLAOverflow:
.ad32	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad35	38		sec				sec 								; subtract total and write back
.ad36	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad39	8d e3 06	sta $06e3			sta 	GXPosition
.ad3c					_GXLANoExtra:
.ad3c	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad3f	f0 0d		beq $ad4e			beq 	_GXDXLarger
.ad41	20 a0 ad	jsr $ada0			jsr 	GXIncrementY
.ad44	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad47	f0 10		beq $ad59			beq 	_GXLAExit
.ad49	20 5a ad	jsr $ad5a			jsr 	GXAdjustX
.ad4c	80 0b		bra $ad59			bra 	_GXLAExit
.ad4e					_GXDXLarger:
.ad4e	20 5a ad	jsr $ad5a			jsr 	GXAdjustX
.ad51	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad54	f0 03		beq $ad59			beq 	_GXLAExit
.ad56	20 a0 ad	jsr $ada0			jsr 	GXIncrementY
.ad59					_GXLAExit:
.ad59	60		rts				rts
.ad5a					GXAdjustX:
.ad5a	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad5d	10 25		bpl $ad84			bpl 	_GXAXRight
.ad5f	ad 42 06	lda $0642			lda 	GXX0
.ad62	d0 03		bne $ad67			bne 	_GXAXNoBorrow
.ad64	ce 43 06	dec $0643			dec 	GXX0+1
.ad67					_GXAXNoBorrow:
.ad67	ce 42 06	dec $0642			dec 	GXX0
.ad6a	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad6d	ad 54 06	lda $0654			lda 	gsOffset
.ad70	c9 ff		cmp #$ff			cmp 	#$FF
.ad72	d0 0f		bne $ad83			bne 	_GXAYExit 					; underflow
.ad74	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad76	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad78	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad7a	b0 07		bcs $ad83			bcs 	_GXAYExit
.ad7c	18		clc				clc
.ad7d	69 20		adc #$20			adc 	#$20 						; fix up
.ad7f	85 3d		sta $3d				sta 	gxzScreen+1
.ad81	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad83					_GXAYExit:
.ad83	60		rts				rts
.ad84					_GXAXRight:
.ad84	ee 42 06	inc $0642			inc 	GXX0
.ad87	d0 03		bne $ad8c			bne 	_GXAXNoCarry
.ad89	ee 43 06	inc $0643			inc 	GXX0+1
.ad8c					_GXAXNoCarry:
.ad8c	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ad8f	d0 0e		bne $ad9f			bne 	_GXAXExit 					; if not overflowed, exit.
.ad91	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad93	a5 3d		lda $3d				lda 	gxzScreen+1
.ad95	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad97	90 06		bcc $ad9f			bcc 	_GXAXExit
.ad99	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad9b	85 3d		sta $3d				sta 	gxzScreen+1
.ad9d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ad9f					_GXAXExit:
.ad9f	60		rts				rts
.ada0					GXIncrementY:
.ada0	ee 44 06	inc $0644			inc 	GXY0
.ada3	20 17 b2	jsr $b217			jsr 	GXMovePositionDown
.ada6	60		rts				rts
.ada7					GXLineSetup:
.ada7	ad 48 06	lda $0648			lda 	GXY1
.adaa	38		sec				sec
.adab	ed 44 06	sbc $0644			sbc 	GXY0
.adae	4a		lsr a				lsr 	a
.adaf	8d e0 06	sta $06e0			sta 	GXDiffY
.adb2	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adb5	38		sec				sec
.adb6	ad 46 06	lda $0646			lda 	GXX1
.adb9	ed 42 06	sbc $0642			sbc 	GXX0
.adbc	8d df 06	sta $06df			sta 	GXDiffX
.adbf	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.adc2	ed 43 06	sbc $0643			sbc 	GXX0+1
.adc5	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.adc6	6e df 06	ror $06df			ror 	GXDiffX
.adc9	0a		asl a				asl 	a
.adca	10 0c		bpl $add8			bpl 	_GDXNotNegative
.adcc	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.adce	38		sec				sec
.adcf	ed df 06	sbc $06df			sbc 	GXDiffX
.add2	8d df 06	sta $06df			sta 	GXDiffX
.add5	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.add8					_GDXNotNegative:
.add8	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.addb	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adde	8d e4 06	sta $06e4			sta 	GXAdjust
.ade1	ad df 06	lda $06df			lda 	GXDiffX
.ade4	8d e5 06	sta $06e5			sta 	GXTotal
.ade7	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.adea	cd df 06	cmp $06df			cmp 	GXDiffX
.aded	90 0f		bcc $adfe			bcc 	_GDXNotLarger
.adef	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adf2	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.adf5	8d e4 06	sta $06e4			sta 	GXAdjust
.adf8	ad e0 06	lda $06e0			lda 	GXDiffY
.adfb	8d e5 06	sta $06e5			sta 	GXTotal
.adfe					_GDXNotLarger:
.adfe	ad e5 06	lda $06e5			lda 	GXTotal
.ae01	4a		lsr a				lsr 	a
.ae02	8d e3 06	sta $06e3			sta 	GXPosition
.ae05	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae06					GXSetColourMode:
.ae06	a6 36		ldx $36				ldx 	gxzTemp0
.ae08	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae0b	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae0d	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae10	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae12	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae15	ae 50 06	ldx $0650			ldx 	gxColour
.ae18	8e 51 06	stx $0651			stx 	gxEORValue
.ae1b	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae1d	90 03		bcc $ae22			bcc 	_GXSDCNotAndColour
.ae1f	8e 52 06	stx $0652			stx 	gxANDValue
.ae22					_GXSDCNotAndColour:
.ae22	d0 03		bne $ae27			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae24	9c 51 06	stz $0651			stz 	gxEORValue
.ae27					_GXSDCNotAnd:
.ae27	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae28	90 08		bcc $ae32			bcc 	_GXSDCNoFlip
.ae2a	ad 52 06	lda $0652			lda	 	gxANDValue
.ae2d	49 ff		eor #$ff			eor 	#$FF
.ae2f	8d 52 06	sta $0652			sta 	gxANDValue
.ae32					_GXSDCNoFlip:
.ae32	18		clc				clc
.ae33	60		rts				rts
.ae34					GXPlotPoint:
.ae34	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.ae37	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae3a	ac 54 06	ldy $0654			ldy 	gsOffset
.ae3d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae3f	2d 52 06	and $0652			and 	gxANDValue
.ae42	4d 51 06	eor $0651			eor 	gxEORValue
.ae45	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae47	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae4a	18		clc				clc
.ae4b	60		rts				rts
.ae4c					GXFillRectangle:
.ae4c	38		sec				sec
.ae4d	80 01		bra $ae50			bra 	GXRectangle
.ae4f					GXFrameRectangle:
.ae4f	18		clc				clc
.ae50					GXRectangle:
.ae50	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae53	f0 35		beq $ae8a			beq 	_GXRFail
.ae55	08		php				php 								; save Fill flag (CS)
.ae56	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; start drawing
.ae59	20 d9 b2	jsr $b2d9			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae5c	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae5f	38		sec				sec 								; sec = Draw line
.ae60	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae63	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae66	cd 48 06	cmp $0648			cmp 	gxY1
.ae69	f0 19		beq $ae84			beq 	_GXRectangleExit
.ae6b					_GXRectLoop:
.ae6b	20 17 b2	jsr $b217			jsr 	GXMovePositionDown 			; down one.
.ae6e	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae71	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae74	cd 48 06	cmp $0648			cmp 	gXY1
.ae77	f0 07		beq $ae80			beq 	_GXLastLine
.ae79	28		plp				plp 								; get flag back
.ae7a	08		php				php
.ae7b	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae7e	80 eb		bra $ae6b			bra 	_GXRectLoop
.ae80					_GXLastLine:
.ae80	38		sec				sec
.ae81	20 8c ae	jsr $ae8c			jsr 	GXDrawLineX1X0
.ae84					_GXRectangleExit:
.ae84	68		pla				pla 								; throw fill flag.
.ae85	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae88	18		clc				clc
.ae89	60		rts				rts
.ae8a					_GXRFail:
.ae8a	38		sec				sec
.ae8b	60		rts				rts
.ae8c					GXDrawLineX1X0:
.ae8c	08		php				php 								; save solid/either-end
.ae8d	38		sec				sec
.ae8e	ad 46 06	lda $0646			lda		gXX1
.ae91	ed 42 06	sbc $0642			sbc 	gXX0
.ae94	85 36		sta $36				sta 	gxzTemp0
.ae96	ad 47 06	lda $0647			lda 	gXX1+1
.ae99	ed 43 06	sbc $0643			sbc 	gXX0+1
.ae9c	85 37		sta $37				sta 	gxzTemp0+1
.ae9e	28		plp				plp
.ae9f					GXDrawLineTemp0:
.ae9f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aea1	48		pha				pha
.aea2	a5 3d		lda $3d				lda 	gxzScreen+1
.aea4	48		pha				pha
.aea5	ad 54 06	lda $0654			lda 	gsOffset
.aea8	48		pha				pha
.aea9	a5 0b		lda $0b				lda 	GXEditSlot
.aeab	48		pha				pha
.aeac	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aeaf	90 1e		bcc $aecf			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aeb1					_GXDLTLine:
.aeb1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeb3	2d 52 06	and $0652			and 	gxANDValue
.aeb6	4d 51 06	eor $0651			eor 	gxEORValue
.aeb9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aebb	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aebd	d0 04		bne $aec3			bne 	_GXDLTNoBorrow
.aebf	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aec1	30 2e		bmi $aef1			bmi 	_GXDLTExit
.aec3					_GXDLTNoBorrow:
.aec3	c6 36		dec $36				dec 	gxzTemp0
.aec5	c8		iny				iny 								; next slot.
.aec6	d0 e9		bne $aeb1			bne 	_GXDLTLine
.aec8	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aeca	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap				; check for new page.
.aecd	80 e2		bra $aeb1			bra 	_GXDLTLine
.aecf					_GXDLTEndPoints:
.aecf	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aed1	2d 52 06	and $0652			and 	gxANDValue
.aed4	4d 51 06	eor $0651			eor 	gxEORValue
.aed7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed9	98		tya				tya 								; advance to right side
.aeda	18		clc				clc
.aedb	65 36		adc $36				adc 	gxzTemp0
.aedd	a8		tay				tay
.aede	a5 3d		lda $3d				lda 	gxzScreen+1
.aee0	65 37		adc $37				adc 	gxzTemp0+1
.aee2	85 3d		sta $3d				sta 	gxzScreen+1
.aee4	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap 			; fix up.
.aee7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aee9	2d 52 06	and $0652			and 	gxANDValue
.aeec	4d 51 06	eor $0651			eor 	gxEORValue
.aeef	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef1					_GXDLTExit:
.aef1	68		pla				pla
.aef2	85 0b		sta $0b				sta 	GXEditSlot
.aef4	68		pla				pla
.aef5	8d 54 06	sta $0654			sta 	gsOffset
.aef8	68		pla				pla
.aef9	85 3d		sta $3d				sta 	gxzScreen+1
.aefb	68		pla				pla
.aefc	85 3c		sta $3c				sta 	gxzScreen
.aefe	60		rts				rts
.aeff					GXDLTCheckWrap:
.aeff	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af01	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af03	90 06		bcc $af0b			bcc 	_GXDLTCWExit
.af05	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af07	85 3d		sta $3d				sta 	gxzScreen+1
.af09	e6 0b		inc $0b				inc 	GXEditSlot
.af0b					_GXDLTCWExit:
.af0b	60		rts				rts
.af0c					GXDrawGraphicElement:
.af0c	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af0f	3a		dec a				dec 	a
.af10	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af13	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af16	f0 67		beq $af7f			beq 	_GXSLFail
.af18	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af1b	48		pha				pha
.af1c	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af1f	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af22	20 b1 b1	jsr $b1b1			jsr 	gxOpenBitmap 				; open the bitmap.
.af25	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af28	4a		lsr a				lsr 	a
.af29	4a		lsr a				lsr 	a
.af2a	4a		lsr a				lsr 	a
.af2b	29 07		and #$07			and		#7
.af2d	1a		inc a				inc 	a
.af2e	8d eb 06	sta $06eb			sta 	gxScale
.af31	64 38		stz $38				stz 	gxzTemp1					; start first line
.af33					_GXGELoop:
.af33	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af35	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af38	10 06		bpl $af40			bpl		_GXNoVFlip
.af3a	ad e8 06	lda $06e8			lda 	gxMask
.af3d	38		sec				sec
.af3e	e5 38		sbc $38				sbc 	gxzTemp1
.af40					_GXNoVFlip:
.af40	aa		tax				tax 								; get the Xth line.
.af41	20 81 af	jsr $af81			jsr 	_GXCallAcquire 				; get that data.
.af44	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af47	85 39		sta $39				sta 	gxzTemp1+1
.af49					_GXGELoop2:
.af49	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af4c	cd 4e 06	cmp $064e			cmp 	gxHeight
.af4f	b0 10		bcs $af61			bcs 	_GXDGEExit
.af51	20 84 af	jsr $af84			jsr 	GXRenderOneLine 			; render line
.af54	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af56	d0 f1		bne $af49			bne 	_GXGELoop2
.af58	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af5a	a5 38		lda $38				lda 	gxzTemp1
.af5c	cd e7 06	cmp $06e7			cmp 	gxSize
.af5f	d0 d2		bne $af33			bne 	_GXGELoop
.af61					_GXDGEExit:
.af61	68		pla				pla 								; restore Y for next time
.af62	8d 44 06	sta $0644			sta 	gxY0
.af65	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af68					_GXShiftLeft:
.af68	18		clc				clc
.af69	ad e7 06	lda $06e7			lda 	gxSize
.af6c	6d 42 06	adc $0642			adc 	gxX0
.af6f	8d 42 06	sta $0642			sta 	gxX0
.af72	90 03		bcc $af77			bcc 	_GXSLNoCarry
.af74	ee 43 06	inc $0643			inc 	gxX0+1
.af77					_GXSLNoCarry:
.af77	ca		dex				dex
.af78	d0 ee		bne $af68			bne 	_GXShiftLeft
.af7a	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.af7d	18		clc				clc
.af7e	60		rts				rts
.af7f					_GXSLFail:
.af7f	38		sec				sec
.af80	60		rts				rts
.af81					_GXCallAcquire:
.af81	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af84					GXRenderOneLine:
.af84	20 c1 b1	jsr $b1c1			jsr 	GXPositionCalc 				; calculate position/offset.
.af87	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.af8a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af8c					_GXROLLoop1:
.af8c	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.af8f	85 3b		sta $3b				sta 	gxzTemp2+1
.af91					_GXROLLoop2:
.af91	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af93	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.af96	50 06		bvc $af9e			bvc 	_GXNoHFlip
.af98	ad e8 06	lda $06e8			lda 	gxMask
.af9b	38		sec				sec
.af9c	e5 3a		sbc $3a				sbc 	gxzTemp2
.af9e					_GXNoHFlip:
.af9e	aa		tax				tax 								; read from the pixel buffer
.af9f	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afa2	d0 07		bne $afab			bne 	_GXDraw 					; draw if non zero
.afa4	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afa7	29 04		and #$04			and 	#4
.afa9	f0 0a		beq $afb5			beq 	_GXZeroPixel
.afab					_GXDraw:
.afab	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afad	2d 52 06	and $0652			and 	gxANDValue
.afb0	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afb3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afb5					_GXZeroPixel:
.afb5	c8		iny				iny 								; advance pointer
.afb6	d0 05		bne $afbd			bne 	_GXNoShift
.afb8	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afba	20 ff ae	jsr $aeff			jsr 	GXDLTCheckWrap				; check for new page.
.afbd					_GXNoShift:
.afbd	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afbf	d0 d0		bne $af91			bne 	_GXROLLoop2
.afc1	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afc3	a5 3a		lda $3a				lda 	gxzTemp2
.afc5	cd e7 06	cmp $06e7			cmp 	gxSize
.afc8	d0 c2		bne $af8c			bne 	_GXROLLoop1
.afca	ee 44 06	inc $0644			inc 	gxY0
.afcd	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afce					GXFontHandler:
.afce	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afd0	4d 4f 06	eor $064f			eor 	gxMode
.afd3	8d ec 06	sta $06ec			sta 	gxUseMode
.afd6	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afd8	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afda	26 37		rol $37				rol	 	gxzTemp0+1
.afdc	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afde	26 37		rol $37				rol	 	gxzTemp0+1
.afe0	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afe2	26 37		rol $37				rol	 	gxzTemp0+1
.afe4	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afe6	09 c0		ora #$c0			ora 	#$C0
.afe8	85 37		sta $37				sta 	gxzTemp0+1
.afea	a9 08		lda #$08			lda 	#8 							; size 8x8
.afec	a2 f4		ldx #$f4			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.afee	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.aff0	20 0c af	jsr $af0c			jsr 	GXDrawGraphicElement
.aff3	60		rts				rts
.aff4					GXGetGraphicDataFont:
.aff4	8a		txa				txa 								; X->Y
.aff5	a8		tay				tay
.aff6	a6 01		ldx $01				ldx 	1 							; preserve old value
.aff8	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.affa	85 01		sta $01				sta 	1
.affc	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.affe	86 01		stx $01				stx 	1 							; put old value back.
.b000	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b002					_GXExpand:
.b002	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b005	0a		asl a				asl 	a 							; shift bit 7 into C
.b006	90 08		bcc $b010			bcc 	_GXNoPixel
.b008	48		pha				pha 								; if set, set pixel buffer to current colour.
.b009	ad 50 06	lda $0650			lda 	gxColour
.b00c	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b00f	68		pla				pla
.b010					_GXNoPixel:
.b010	e8		inx				inx 								; do the whole byte.
.b011	e0 08		cpx #$08			cpx 	#8
.b013	d0 ed		bne $b002			bne 	_GXExpand
.b015	60		rts				rts
.b016					GXSpriteHandler:
.b016	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b018	4d 4f 06	eor $064f			eor 	gxMode
.b01b	8d ec 06	sta $06ec			sta 	gxUseMode
.b01e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b020	da		phx				phx
.b021	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap 				; can access sprite information
.b024	68		pla				pla
.b025	20 92 b2	jsr $b292			jsr 	GXFindSprite 				; get the sprite address
.b028	08		php				php
.b029	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b02c	28		plp				plp
.b02d	b0 0a		bcs $b039			bcs		_GXSHExit 					; exit if find failed.
.b02f	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b032	a2 3a		ldx #$3a			ldx 	#GXSpriteAcquire & $FF
.b034	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b036	20 0c af	jsr $af0c			jsr 	GXDrawGraphicElement
.b039					_GXSHExit:
.b039	60		rts				rts
.b03a					GXSpriteAcquire:
.b03a	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b03d	85 0b		sta $0b				sta 	GXEditSlot
.b03f	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b041	a9 00		lda #$00			lda 	#0
.b043	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b046					_GXTimesRowNumber:
.b046	18		clc				clc
.b047	65 36		adc $36				adc 	zTemp0
.b049	ca		dex				dex
.b04a	10 fa		bpl $b046			bpl 	_GXTimesRowNumber
.b04c	64 37		stz $37				stz 	gxzTemp0+1
.b04e	0a		asl a				asl 	a 							; row x 2,4,6,8
.b04f	26 37		rol $37				rol 	gxzTemp0+1
.b051	0a		asl a				asl 	a 							; row x 4,8,12,16
.b052	26 37		rol $37				rol 	gxzTemp0+1
.b054	0a		asl a				asl 	a 							; row x 8,16,24,32
.b055	26 37		rol $37				rol 	gxzTemp0+1
.b057	85 36		sta $36				sta 	gxzTemp0
.b059	18		clc				clc 								; add base address.
.b05a	a5 36		lda $36				lda 	gxzTemp0
.b05c	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b05f	85 36		sta $36				sta 	gxzTemp0
.b061	a5 37		lda $37				lda 	gxzTemp0+1
.b063	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b066					_GXSAFindPage:
.b066	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b068	90 06		bcc $b070			bcc 	_GXSAFoundPage
.b06a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b06c	e6 0b		inc $0b				inc 	GXEditSlot
.b06e	80 f6		bra $b066			bra 	_GXSAFindPage
.b070					_GXSAFoundPage:
.b070	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b072	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b074	a0 00		ldy #$00			ldy 	#0
.b076					_GXSACopyLoop:
.b076	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b078	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b07b	c8		iny				iny
.b07c	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b07f	d0 f5		bne $b076			bne 	_GXSACopyLoop
.b081	60		rts				rts
.b082					GXSelect:
.b082	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b085	f0 22		beq $b0a9			beq 	_GXSFail
.b087	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b089	c9 40		cmp #$40			cmp 	#64
.b08b	b0 1c		bcs $b0a9			bcs 	_GXSFail
.b08d	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b090	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b092	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b094	06 36		asl $36				asl 	gxzTemp0
.b096	06 36		asl $36				asl 	gxzTemp0
.b098	06 36		asl $36				asl 	gxzTemp0
.b09a	2a		rol a				rol 	a
.b09b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b09d	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0a0	85 37		sta $37				sta 	gxzTemp0+1
.b0a2	a5 36		lda $36				lda 	gxzTemp0
.b0a4	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0a7	18		clc				clc
.b0a8	60		rts				rts
.b0a9					_GXSFail:
.b0a9	38		sec				sec
.b0aa	60		rts				rts
.b0ab					GXSelectImage:
.b0ab	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0ae	f0 74		beq $b124			beq 	_GXSIFail
.b0b0	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0b3	f0 6f		beq $b124			beq 	_GXSIFail 					; (checking the MSB)
.b0b5	64 01		stz $01				stz 	1
.b0b7	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0b9	d0 6b		bne $b126			bne 	_GXSIHide
.b0bb	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0bd	48		pha				pha
.b0be	20 b1 b1	jsr $b1b1			jsr 	GXOpenBitmap
.b0c1	68		pla				pla
.b0c2	20 92 b2	jsr $b292			jsr 	GXFindSprite
.b0c5	b0 5a		bcs $b121			bcs 	_GXSICloseFail 				; no image
.b0c7	a0 01		ldy #$01			ldy 	#1
.b0c9	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0cc	85 36		sta $36				sta 	gxzTemp0
.b0ce	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0d1	85 37		sta $37				sta 	gxzTemp0+1
.b0d3	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0d6	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0d8	18		clc				clc
.b0d9	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0dc	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0df	c8		iny				iny
.b0e0	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0e2	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0e5	69 00		adc #$00			adc 	#0
.b0e7	c8		iny				iny
.b0e8	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0ea	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b0ed	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0ef	2a		rol a				rol 	a 							; x 2
.b0f0	0a		asl a				asl 	a 							; x 4
.b0f1	0a		asl a				asl 	a 							; x 8
.b0f2	0a		asl a				asl 	a 							; x 16
.b0f3	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b0f6	0a		asl a				asl 	a 							; 1 shift
.b0f7	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0f9	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b0fb	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b0fe	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b101	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b104	29 3f		and #$3f			and 	#$3F
.b106	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b109	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b10c	6a		ror a				ror 	a 							; shift into bits 6/7
.b10d	6a		ror a				ror 	a
.b10e	6a		ror a				ror 	a
.b10f	29 c0		and #$c0			and 	#$C0
.b111	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b114	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b117	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b11a	29 7f		and #$7f			and 	#$7F
.b11c	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b11f	18		clc				clc
.b120	60		rts				rts
.b121					_GXSICloseFail:
.b121	20 b9 b1	jsr $b1b9			jsr 	GXCloseBitmap
.b124					_GXSIFail:
.b124	38		sec				sec
.b125	60		rts				rts
.b126					_GXSIHide:
.b126	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b129	85 36		sta $36				sta 	gxzTemp0
.b12b	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b12e	85 37		sta $37				sta 	gxzTemp0+1
.b130	a9 00		lda #$00			lda 	#0
.b132	92 36		sta ($36)			sta 	(gxzTemp0)
.b134	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b137	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b13a	09 80		ora #$80			ora 	#$80
.b13c	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b13f	18		clc				clc
.b140	60		rts				rts
.b141					GXMoveSprite:
.b141	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b144	f0 65		beq $b1ab			beq 	_GXSIFail
.b146	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b149	f0 60		beq $b1ab			beq 	_GXSIFail
.b14b	85 37		sta $37				sta 	gxzTemp0+1
.b14d	a0 04		ldy #$04			ldy 	#4
.b14f	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b152	85 36		sta $36				sta 	gxzTemp0
.b154	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b157	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b15a	2a		rol a				rol 	a	 						; into bits 0,1.
.b15b	2a		rol a				rol 	a
.b15c	2a		rol a				rol 	a
.b15d	29 03		and #$03			and 	#3
.b15f	aa		tax				tax
.b160	bd ad b1	lda $b1ad,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b163	48		pha				pha
.b164	18		clc				clc
.b165	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b168	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b16a	c8		iny				iny
.b16b	ad 43 06	lda $0643			lda 	gxX0+1
.b16e	69 00		adc #$00			adc 	#0
.b170	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b172	c8		iny				iny
.b173	68		pla				pla
.b174	18		clc				clc
.b175	6d 44 06	adc $0644			adc 	gxY0
.b178	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b17a	a9 00		lda #$00			lda 	#0
.b17c	69 00		adc #$00			adc 	#0
.b17e	c8		iny				iny
.b17f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b181	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b184	6e 42 06	ror $0642			ror 	gxX0
.b187	4e 42 06	lsr $0642			lsr 	gxX0
.b18a	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b18d	4e 44 06	lsr $0644			lsr 	gxY0
.b190	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b193	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b196	29 80		and #$80			and 	#$80
.b198	0d 42 06	ora $0642			ora 	gxX0
.b19b	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b19e	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1a1	29 c0		and #$c0			and 	#$C0
.b1a3	0d 44 06	ora $0644			ora 	gxY0
.b1a6	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1a9	18		clc				clc
.b1aa	60		rts				rts
.b1ab					_GXSIFail:
.b1ab	38		sec				sec
.b1ac	60		rts				rts
.b1ad					_GXMSOffset:
>b1ad	1c						.byte 	32-8/2
>b1ae	18						.byte 	32-16/2
>b1af	14						.byte 	32-24/2
>b1b0	10						.byte 	32-32/2
.b1b1					GXOpenBitmap:
.b1b1	78		sei				sei 								; no interrupts here
.b1b2	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1b4	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1b7	58		cli				cli
.b1b8	60		rts				rts
.b1b9					GXCloseBitmap:
.b1b9	78		sei				sei
.b1ba	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1bd	85 0b		sta $0b				sta 	GXEditSlot
.b1bf	58		cli				cli
.b1c0	60		rts				rts
.b1c1					GXPositionCalc:
.b1c1	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1c3	48		pha				pha
.b1c4	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1c7	85 3c		sta $3c				sta 	gxzScreen
.b1c9	64 3d		stz $3d				stz 	gxzScreen+1
.b1cb	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1cd	26 3d		rol $3d				rol 	gxzScreen+1
.b1cf	06 3c		asl $3c				asl 	gxzScreen
.b1d1	26 3d		rol $3d				rol 	gxzScreen+1
.b1d3	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1d4	65 3c		adc $3c				adc 	gxzScreen
.b1d6	85 3c		sta $3c				sta 	gxzScreen
.b1d8	90 02		bcc $b1dc			bcc 	_GXPCNoCarry
.b1da	e6 3d		inc $3d				inc 	gxzScreen+1
.b1dc					_GXPCNoCarry:
.b1dc	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1de	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1e0	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1e2	85 36		sta $36				sta 	gxzTemp0
.b1e4	64 3d		stz $3d				stz 	gxzScreen+1
.b1e6	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1e8					_GXPCMultiply32:
.b1e8	06 3c		asl $3c				asl 	gxzScreen
.b1ea	26 3d		rol $3d				rol 	gxzScreen+1
.b1ec	3a		dec a				dec 	a
.b1ed	d0 f9		bne $b1e8			bne 	_GXPCMultiply32
.b1ef	18		clc				clc
.b1f0	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1f3	65 3c		adc $3c				adc 	gxzScreen
.b1f5	8d 54 06	sta $0654			sta 	gsOffset
.b1f8	ad 43 06	lda $0643			lda 	GXX0+1
.b1fb	65 3d		adc $3d				adc 	gxzScreen+1
.b1fd	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b1ff	90 04		bcc $b205			bcc 	_GXPCNoOverflow
.b201	29 1f		and #$1f			and 	#$1F 						; fix it up
.b203	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b205					_GXPCNoOverflow:
.b205	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b207	85 3d		sta $3d				sta 	gxzScreen+1
.b209	64 3c		stz $3c				stz 	gxzScreen
.b20b	18		clc				clc
.b20c	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b20e	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b211	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b213	68		pla				pla
.b214	85 36		sta $36				sta 	gxzTemp0
.b216	60		rts				rts
.b217					GXMovePositionDown:
.b217	18		clc				clc 								; add 320 to offset/temp+1
.b218	ad 54 06	lda $0654			lda 	gsOffset
.b21b	69 40		adc #$40			adc 	#64
.b21d	8d 54 06	sta $0654			sta 	gsOffset
.b220	a5 3d		lda $3d				lda 	gxzScreen+1
.b222	69 01		adc #$01			adc 	#1
.b224	85 3d		sta $3d				sta 	gxzScreen+1
.b226	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b228	90 07		bcc $b231			bcc 	_GXMPDExit
.b22a	38		sec				sec  								; next page
.b22b	e9 20		sbc #$20			sbc 	#$20
.b22d	85 3d		sta $3d				sta 	gxzScreen+1
.b22f	e6 0b		inc $0b				inc 	GXEditSlot
.b231					_GXMPDExit:
.b231	60		rts				rts
.b232					GXCollide:
.b232	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b234	aa		tax				tax
.b235	05 37		ora $37				ora 	gxzTemp0+1
.b237	29 c0		and #$c0			and 	#$C0
.b239	38		sec				sec
.b23a	d0 53		bne $b28f			bne 	_GXCollideFail 				; if either >= 64, fail.
.b23c	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b23e	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b241	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b244	30 48		bmi $b28e			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b246	18		clc				clc 								; need to calculate sum of sizes.
.b247	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b24a	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b24d	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b24f	6a		ror a				ror 	a 							; 5/6/7
.b250	4a		lsr a				lsr 	a 							; 4/5/6
.b251	4a		lsr a				lsr 	a 							; 3/4/5
.b252	4a		lsr a				lsr 	a 							; 2/3/4
.b253	18		clc				clc
.b254	69 08		adc #$08			adc 	#$08
.b256	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b257	4a		lsr a				lsr 	a
.b258	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b25a	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b25d	29 3f		and #$3f			and 	#$3F
.b25f	85 39		sta $39				sta 	gxzTemp1+1
.b261	38		sec				sec
.b262	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b265	29 3f		and #$3f			and 	#$3F
.b267	e5 39		sbc $39				sbc 	gxzTemp1+1
.b269	b0 03		bcs $b26e			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b26b	49 ff		eor #$ff			eor 	#$FF
.b26d	1a		inc a				inc 	a
.b26e					_GXCAbs1:
.b26e	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b270	b0 1c		bcs $b28e			bcs 	_GXOkayFail
.b272	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b274	38		sec				sec 								; calculate |x1-x0|
.b275	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b278	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b27b	b0 03		bcs $b280			bcs 	_GXCAbs2
.b27d	49 ff		eor #$ff			eor 	#$FF
.b27f	1a		inc a				inc 	a
.b280					_GXCAbs2:
.b280	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b282	b0 0a		bcs $b28e			bcs 	_GXOkayFail
.b284	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b286	90 02		bcc $b28a			bcc 	_GXCHaveLowest
.b288	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b28a					_GXCHaveLowest:
.b28a	0a		asl a				asl 	a 							; scale to allow for >> 2
.b28b	0a		asl a				asl 	a
.b28c	18		clc				clc
.b28d	60		rts				rts
.b28e					_GXOkayFail:
.b28e	18		clc				clc
.b28f					_GXCollideFail:
.b28f	a9 ff		lda #$ff			lda 	#$FF
.b291	60		rts				rts
.b292					GXFindSprite:
.b292	aa		tax				tax
.b293	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b296	85 0b		sta $0b				sta 	GXEditSlot
.b298	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b29b	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b29e	f0 33		beq $b2d3			beq 	_GXFSFail
.b2a0	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2a3	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2a6	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2a9	48		pha				pha 								; save twice
.b2aa	48		pha				pha
.b2ab	29 03		and #$03			and 	#3 							; get sprite size
.b2ad	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2b0	aa		tax				tax
.b2b1	bd d5 b2	lda $b2d5,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2b4	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2b7	68		pla				pla 								; get LUT
.b2b8	4a		lsr a				lsr		a
.b2b9	4a		lsr a				lsr		a
.b2ba	29 03		and #$03			and 	#3
.b2bc	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2bf	68		pla				pla 								; address, neeeds to be x 4
.b2c0	29 f0		and #$f0			and 	#$F0
.b2c2	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2c5	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2c8	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2cb	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ce	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2d1	18		clc				clc
.b2d2	60		rts				rts
.b2d3					_GXFSFail:
.b2d3	38		sec				sec
.b2d4	60		rts				rts
.b2d5					_GXFXSSTTable:
>b2d5	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2d9					GXSortXY:
.b2d9	20 f7 b2	jsr $b2f7			jsr 	GXSortY 					; will be sorted on Y now
.b2dc	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2df	cd 46 06	cmp $0646			cmp 	gxX1
.b2e2	ad 43 06	lda $0643			lda 	gXX0+1
.b2e5	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2e8	90 0c		bcc $b2f6			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2ea	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2ec	a0 04		ldy #$04			ldy 	#4
.b2ee	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b2f1	e8		inx				inx
.b2f2	c8		iny				iny
.b2f3	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b2f6					_GXSXYExit:
.b2f6	60		rts				rts
.b2f7					GXSortY:
.b2f7	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b2fa	cd 48 06	cmp $0648			cmp 	gxY1
.b2fd	90 0b		bcc $b30a			bcc 	_GXSYSorted
.b2ff	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b301	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b303					_GXSwap1:
.b303	20 0b b3	jsr $b30b			jsr 	GXSwapXY
.b306	88		dey				dey
.b307	ca		dex				dex
.b308	10 f9		bpl $b303			bpl 	_GXSwap1
.b30a					_GXSYSorted:
.b30a	60		rts				rts
.b30b					GXSwapXY:
.b30b	bd 42 06	lda $0642,x			lda 	gxX0,x
.b30e	48		pha				pha
.b30f	b9 42 06	lda $0642,y			lda 	gxX0,y
.b312	9d 42 06	sta $0642,x			sta 	gxX0,x
.b315	68		pla				pla
.b316	99 42 06	sta $0642,y			sta 	gxX0,y
.b319	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b80c					KeywordSet0:
>b80c	00 65					.text	0,$65,""               ; $80 !0:EOF
>b80e	00 58					.text	0,$58,""               ; $81 !1:SH1
>b810	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b812	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b818	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b820	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b826	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b82d	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b835	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b83c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b843	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b849	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b84f	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b857	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b85e	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b865	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b86c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b874	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b87a	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b880	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b887	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b88d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b893	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b89b	28
>b89c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8a4	28
>b8a5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8ab	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8b1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8b7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8be	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8c6	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8cc	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8d2	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8d7	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8db	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8e1	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b8e9	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b8f0	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b8f7	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b8ff	43
>b900	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b906	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b90c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b913	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b919	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b91d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b923	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b92b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b932	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b937	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b93e	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b946	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b94c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b951	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b959	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b95f	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b965	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b96a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b971	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b977	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b97d	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b984	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b989	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b98f	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b996	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b99b	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b99f	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9a7	45
>b9a8	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9b0	45
>b9b1	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9b7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9be	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9c4	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9ca	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9cf	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9d7	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9de	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b9e6	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b9ec	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b9f0	ff					.text	$FF
.b9f1					KeywordSet1:
>b9f1	00 65					.text	0,$65,""               ; $80 !0:EOF
>b9f3	00 58					.text	0,$58,""               ; $81 !1:SH1
>b9f5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b9f7	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b9ff	4c 45
>ba01	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba09	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba11	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba16	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba1c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba21	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba29	45
>ba2a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba2f	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba37	53
>ba38	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba3e	ff					.text	$FF
.ba3f					KeywordSet2:
>ba3f	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba41	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba43	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba45	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba4a	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba4f	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba54	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba59	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba5e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba63	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba68	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba6d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba72	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba77	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba7c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba81	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba86	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ba8b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ba90	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ba95	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ba9a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ba9f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>baa4	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>baa9	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>baae	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bab3	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bab8	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>babd	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bac2	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bac7	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bacc	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bad1	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bad6	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>badb	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>bae0	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bae5	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>baea	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>baef	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>baf4	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>baf9	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bafe	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb03	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb08	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb0d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb12	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb17	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb1c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb21	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb26	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb2b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb30	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb35	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb3a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb3f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb44	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb49	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb4e	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb53	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb58	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb5d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb62	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb67	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb6c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb71	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb76	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb7b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb80	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb85	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bb8a	ff					.text	$FF
.b31a					ListConvertLine:
.b31a	9c 9d 04	stz $049d			stz 	tbOffset
.b31d	9c ab 04	stz $04ab			stz 	tokenBuffer
.b320	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b322	b1 30		lda ($30),y			lda 	(codePtr),y
.b324	aa		tax				tax
.b325	88		dey				dey
.b326	b1 30		lda ($30),y			lda 	(codePtr),y
.b328	20 4d 92	jsr $924d			jsr 	ConvertInt16
.b32b	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b32d	86 37		stx $37				stx 	zTemp0+1
.b32f	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b331	20 78 b4	jsr $b478			jsr 	LCLWrite
.b334	a0 00		ldy #$00			ldy 	#0
.b336					_LCCopyNumber:
.b336	b1 36		lda ($36),y			lda 	(zTemp0),y
.b338	20 78 b4	jsr $b478			jsr 	LCLWrite
.b33b	c8		iny				iny
.b33c	b1 36		lda ($36),y			lda 	(zTemp0),y
.b33e	d0 f6		bne $b336			bne 	_LCCopyNumber
.b340	20 e0 8c	jsr $8ce0			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b343	48		pha				pha 								; save on stack
.b344	10 0c		bpl $b352			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b346	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b347	6d a6 04	adc $04a6			adc 	listIndent
.b34a	8d a6 04	sta $04a6			sta 	listIndent
.b34d	10 03		bpl $b352			bpl 	_LCNoAdjust
.b34f	9c a6 04	stz $04a6			stz 	listIndent
.b352					_LCNoAdjust:
.b352	18		clc				clc		 							; work out actual indent.
.b353	ad a6 04	lda $04a6			lda 	listIndent
.b356	0a		asl a				asl 	a
.b357	69 06		adc #$06			adc 	#6
.b359	85 36		sta $36				sta 	zTemp0
.b35b					_LCPadOut:
.b35b	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b35d	20 78 b4	jsr $b478			jsr 	LCLWrite
.b360	ad 9d 04	lda $049d			lda 	tbOffset
.b363	c5 36		cmp $36				cmp 	zTemp0
.b365	d0 f4		bne $b35b			bne 	_LCPadOut
.b367	a0 03		ldy #$03			ldy 	#3 							; start position.
.b369					_LCMainLoop:
.b369	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b36b	20 78 b4	jsr $b478			jsr 	LCLWrite
.b36e	b1 30		lda ($30),y			lda 	(codePtr),y
.b370	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b372	f0 17		beq $b38b			beq 	_LCExit
.b374	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b376	90 1e		bcc $b396			bcc 	_LCDoubles
.b378	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b37a	90 2a		bcc $b3a6			bcc 	_LCShiftPunc
.b37c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b37e	90 35		bcc $b3b5			bcc 	_LCPunctuation
.b380	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b382	90 3e		bcc $b3c2			bcc 	_LCIdentifiers
.b384	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b386	90 5f		bcc $b3e7			bcc 	_LCTokens
.b388	4c 47 b4	jmp $b447			jmp 	_LCData 					; 254-5 are data objects
.b38b					_LCExit:
.b38b	68		pla				pla 								; get old indent adjust
.b38c	30 07		bmi $b395			bmi 	_LCExit2
.b38e	18		clc				clc 								; add to indent if +ve
.b38f	6d a6 04	adc $04a6			adc 	listIndent
.b392	8d a6 04	sta $04a6			sta 	listIndent
.b395					_LCExit2:
.b395	60		rts				rts
.b396					_LCDoubles:
.b396	48		pha				pha
.b397	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b398	29 02		and #$02			and 	#2
.b39a	09 3c		ora #$3c			ora 	#60 						; make < >
.b39c	20 78 b4	jsr $b478			jsr 	LCLWrite
.b39f	68		pla				pla 								; restore, do lower bit
.b3a0	29 03		and #$03			and 	#3
.b3a2	09 3c		ora #$3c			ora 	#60
.b3a4	80 0f		bra $b3b5			bra		_LCPunctuation 				; print, increment, loop
.b3a6					_LCShiftPunc:
.b3a6	aa		tax				tax 								; save in X
.b3a7	29 07		and #$07			and 	#7 							; lower 3 bits
.b3a9	f0 02		beq $b3ad			beq 	_LCNoAdd
.b3ab	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3ad					_LCNoAdd:
.b3ad	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3af	90 02		bcc $b3b3			bcc 	_LCNoAdd2
.b3b1	09 20		ora #$20			ora 	#32 						; adds $20
.b3b3					_LCNoAdd2:
.b3b3	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3b5					_LCPunctuation:
.b3b5	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3b7	d0 03		bne $b3bc			bne 	_LCPContinue
.b3b9	20 8e b4	jsr $b48e			jsr 	LCDeleteLastSpace
.b3bc					_LCPContinue:
.b3bc	c8		iny				iny 								; consume character
.b3bd	20 78 b4	jsr $b478			jsr 	LCLWrite 					; write it out.
.b3c0	80 a7		bra $b369			bra 	_LCMainLoop 				; go round again.
.b3c2					_LCIdentifiers:
.b3c2	18		clc				clc 								; convert to physical address
.b3c3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3c5	85 37		sta $37				sta 	zTemp0+1
.b3c7	c8		iny				iny
.b3c8	b1 30		lda ($30),y			lda 	(codePtr),y
.b3ca	85 36		sta $36				sta 	zTemp0
.b3cc	c8		iny				iny
.b3cd	5a		phy				phy 								; save position
.b3ce	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3d0	20 78 b4	jsr $b478			jsr 	LCLWrite
.b3d3	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3d5					_LCOutIdentifier:
.b3d5	c8		iny				iny
.b3d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3d8	29 7f		and #$7f			and 	#$7F
.b3da	20 ca b4	jsr $b4ca			jsr 	LCLLowerCase
.b3dd	20 78 b4	jsr $b478			jsr 	LCLWrite
.b3e0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3e2	10 f1		bpl $b3d5			bpl 	_LCOutIdentifier
.b3e4	7a		ply				ply 								; restore position
.b3e5	80 82		bra $b369			bra 	_LCMainLoop
.b3e7					_LCTokens:
.b3e7	aa		tax				tax 								; token in X
.b3e8	a9 3f		lda #$3f			lda 	#((KeywordSet2) & $FF)
.b3ea	85 36		sta $36				sta 	0+zTemp0
.b3ec	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b3ee	85 37		sta $37				sta 	1+zTemp0
.b3f0	e0 82		cpx #$82			cpx 	#$82
.b3f2	f0 16		beq $b40a			beq 	_LCUseShift
.b3f4	a9 f1		lda #$f1			lda 	#((KeywordSet1) & $FF)
.b3f6	85 36		sta $36				sta 	0+zTemp0
.b3f8	a9 b9		lda #$b9			lda 	#((KeywordSet1) >> 8)
.b3fa	85 37		sta $37				sta 	1+zTemp0
.b3fc	e0 81		cpx #$81			cpx 	#$81
.b3fe	f0 0a		beq $b40a			beq 	_LCUseShift
.b400	a9 0c		lda #$0c			lda 	#((KeywordSet0) & $FF)
.b402	85 36		sta $36				sta 	0+zTemp0
.b404	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b406	85 37		sta $37				sta 	1+zTemp0
.b408	80 01		bra $b40b			bra 	_LCNoShift
.b40a					_LCUseShift:
.b40a	c8		iny				iny
.b40b					_LCNoShift:
.b40b	20 a2 b4	jsr $b4a2			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b40e	b1 30		lda ($30),y			lda 	(codePtr),y
.b410	aa		tax				tax 								; into X
.b411					_LCFindText:
.b411	ca		dex				dex
.b412	10 0e		bpl $b422			bpl 	_LCFoundText 				; found text.
.b414	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b416	1a		inc a				inc 	a 							; one extra for size
.b417	38		sec				sec 								; one extra for checksum
.b418	65 36		adc $36				adc 	zTemp0 						; go to next token
.b41a	85 36		sta $36				sta 	zTemp0
.b41c	90 f3		bcc $b411			bcc 	_LCFindText
.b41e	e6 37		inc $37				inc 	zTemp0+1
.b420	80 ef		bra $b411			bra 	_LCFindText
.b422					_LCFoundText:
.b422	5a		phy				phy 								; save List position
.b423	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b425	aa		tax				tax
.b426	a9 83		lda #$83			lda 	#CLIToken+$80
.b428	20 78 b4	jsr $b478			jsr 	LCLWrite
.b42b	a0 02		ldy #$02			ldy 	#2
.b42d					_LCCopyToken:
.b42d	b1 36		lda ($36),y			lda 	(zTemp0),y
.b42f	20 ca b4	jsr $b4ca			jsr 	LCLLowerCase
.b432	20 78 b4	jsr $b478			jsr 	LCLWrite
.b435	c8		iny				iny
.b436	ca		dex				dex
.b437	d0 f4		bne $b42d			bne 	_LCCopyToken
.b439	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b43b	f0 05		beq $b442			beq 	_LCNoSpace
.b43d	a9 20		lda #$20			lda 	#' '
.b43f	20 78 b4	jsr $b478			jsr 	LCLWrite
.b442					_LCNoSpace:
.b442	7a		ply				ply 								; restore position.
.b443	c8		iny				iny 								; consume token
.b444	4c 69 b3	jmp $b369			jmp 	_LCMainLoop 				; and go around again.
.b447					_LCData:
.b447	48		pha				pha 								; save type $FE/$FF
.b448	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b44a	c9 fe		cmp #$fe			cmp 	#$FE
.b44c	f0 07		beq $b455			beq 	_LCHaveOpener
.b44e	a2 22		ldx #$22			ldx 	#'"'
.b450	a9 81		lda #$81			lda 	#CLIData+$80
.b452	20 78 b4	jsr $b478			jsr 	LCLWrite
.b455					_LCHaveOpener:
.b455	8a		txa				txa 								; output prefix (# or ")
.b456	20 78 b4	jsr $b478			jsr 	LCLWrite
.b459	c8		iny				iny 								; get count
.b45a	b1 30		lda ($30),y			lda 	(codePtr),y
.b45c	aa		tax				tax
.b45d	c8		iny				iny 								; point at first character
.b45e					_LCOutData:
.b45e	b1 30		lda ($30),y			lda 	(codePtr),y
.b460	c9 00		cmp #$00			cmp 	#0
.b462	f0 03		beq $b467			beq 	_LCNoPrint
.b464	20 78 b4	jsr $b478			jsr 	LCLWrite
.b467					_LCNoPrint:
.b467	c8		iny				iny
.b468	ca		dex				dex
.b469	d0 f3		bne $b45e			bne 	_LCOutData
.b46b	68		pla				pla 								; closing " required ?
.b46c	c9 ff		cmp #$ff			cmp 	#$FF
.b46e	d0 05		bne $b475			bne 	_LCNoQuote
.b470	a9 22		lda #$22			lda 	#'"'
.b472	20 78 b4	jsr $b478			jsr 	LCLWrite
.b475					_LCNoQuote:
.b475	4c 69 b3	jmp $b369			jmp 	_LCMainLoop
.b478					LCLWrite:
.b478	da		phx				phx
.b479	ae 9d 04	ldx $049d			ldx 	tbOffset
.b47c	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b47f	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b482	ee 9d 04	inc $049d			inc 	tbOffset
.b485	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b487	30 03		bmi $b48c			bmi 	_LCLNoColour
.b489	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b48c					_LCLNoColour:
.b48c	fa		plx				plx
.b48d	60		rts				rts
.b48e					LCDeleteLastSpace:
.b48e	48		pha				pha
.b48f	da		phx				phx
.b490	ae 9d 04	ldx $049d			ldx 	tbOffset
.b493	f0 0a		beq $b49f			beq 	_LCDLSExit
.b495	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b498	c9 20		cmp #$20			cmp 	#' '
.b49a	d0 03		bne $b49f			bne 	_LCDLSExit
.b49c	ce 9d 04	dec $049d			dec 	tbOffset
.b49f					_LCDLSExit:
.b49f	fa		plx				plx
.b4a0	68		pla				pla
.b4a1	60		rts				rts
.b4a2					LCCheckSpaceRequired:
.b4a2	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4a5	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4a7	f0 1b		beq $b4c4			beq 	_LCCSRSpace
.b4a9	c9 29		cmp #$29			cmp 	#')'
.b4ab	f0 17		beq $b4c4			beq 	_LCCSRSpace
.b4ad	c9 23		cmp #$23			cmp 	#'#'
.b4af	f0 13		beq $b4c4			beq 	_LCCSRSpace
.b4b1	20 ca b4	jsr $b4ca			jsr 	LCLLowerCase 				; saves a little effort
.b4b4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4b6	90 11		bcc $b4c9			bcc 	_LCCSRExit
.b4b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4ba	90 08		bcc $b4c4			bcc 	_LCCSRSpace
.b4bc	c9 61		cmp #$61			cmp 	#"a"
.b4be	90 09		bcc $b4c9			bcc 	_LCCSRExit
.b4c0	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4c2	b0 05		bcs $b4c9			bcs 	_LCCSRExit
.b4c4					_LCCSRSpace:
.b4c4	a9 20		lda #$20			lda 	#' '
.b4c6	20 78 b4	jsr $b478			jsr 	LCLWrite
.b4c9					_LCCSRExit:
.b4c9	60		rts				rts
.b4ca					LCLLowerCase:
.b4ca	c9 41		cmp #$41			cmp 	#"A"
.b4cc	90 06		bcc $b4d4			bcc 	_LCLLCOut
.b4ce	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4d0	b0 02		bcs $b4d4			bcs 	_LCLLCOut
.b4d2	69 20		adc #$20			adc 	#$20
.b4d4					_LCLLCOut:
.b4d4	60		rts				rts
.b4d5					LCLUpperCase:
.b4d5	c9 61		cmp #$61			cmp 	#"a"
.b4d7	90 06		bcc $b4df			bcc 	_LCLUCOut
.b4d9	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4db	b0 02		bcs $b4df			bcs 	_LCLUCOut
.b4dd	e9 1f		sbc #$1f			sbc 	#$1F
.b4df					_LCLUCOut:
.b4df	60		rts				rts
.b4e0					TokeniseSearchTable:
.b4e0	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4e2	85 36		sta $36				sta 	zTemp0
.b4e4	a0 00		ldy #$00			ldy 	#0
.b4e6	a9 80		lda #$80			lda 	#$80 						; token #
.b4e8	85 38		sta $38				sta 	zTemp1
.b4ea					_TSTLoop:
.b4ea	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b4ec	30 49		bmi $b537			bmi 	_TSTFail 					; -ve = end of table
.b4ee	f0 2e		beq $b51e			beq 	_TSTNext 					; zero, check next it's a dummy
.b4f0	c8		iny				iny 								; get the hash
.b4f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4f3	88		dey				dey
.b4f4	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4f7	d0 25		bne $b51e			bne 	_TSTNext
.b4f9	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b4fc	38		sec				sec
.b4fd	ed 80 04	sbc $0480			sbc 	identStart
.b500	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b502	d0 1a		bne $b51e			bne 	_TSTNext
.b504	5a		phy				phy 								; save Y , we might fail
.b505	c8		iny				iny 								; point to text
.b506	c8		iny				iny
.b507	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b50a					_TSTCompareName:
.b50a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b50d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b50f	d0 0c		bne $b51d			bne 	_TSTNextPullY 				; fail, pullY and do next
.b511	e8		inx				inx
.b512	c8		iny				iny
.b513	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b516	d0 f2		bne $b50a			bne 	_TSTCompareName
.b518	7a		ply				ply 								; throw Y
.b519	a5 38		lda $38				lda 	zTemp1 						; get token #
.b51b	38		sec				sec 								; return with CS = passed.
.b51c	60		rts				rts
.b51d					_TSTNextPullY:
.b51d	7a		ply				ply 								; restore current, fall through.
.b51e					_TSTNext:
.b51e	e6 38		inc $38				inc 	zTemp1 						; token counter
.b520	98		tya				tya
.b521	18		clc				clc
.b522	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b524	1a		inc a				inc 	a 							; +1
.b525	1a		inc a				inc 	a 							; +2
.b526	a8		tay				tay
.b527	10 c1		bpl $b4ea			bpl 	_TSTLoop 					; if Y < $80 loop back
.b529	98		tya				tya 								; add Y to zTemp0 and reset Y
.b52a	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b52c	18		clc				clc  								; but have tables > 255 bytes
.b52d	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b52f	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b531	90 b7		bcc $b4ea			bcc 	_TSTLoop
.b533	e6 37		inc $37				inc 	zTemp0+1
.b535	80 b3		bra $b4ea			bra 	_TSTLoop
.b537					_TSTFail:
.b537	18		clc				clc
.b538	60		rts				rts
.b539					TokeniseLine:
.b539	20 c1 b6	jsr $b6c1			jsr 	FixLineBufferCase 			; fix line case
.b53c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b53e	8d a8 04	sta $04a8			sta 	tokenOffset
.b541	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b544	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b547	a2 ff		ldx #$ff			ldx 	#$FF
.b549					_TKFindFirst:
.b549	e8		inx				inx
.b54a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b54d	f0 79		beq $b5c8			beq 	_TKExit
.b54f	c9 20		cmp #$20			cmp 	#' '
.b551	90 f6		bcc $b549			bcc 	_TKFindFirst
.b553	c9 30		cmp #$30			cmp 	#'0'
.b555	90 07		bcc $b55e			bcc 	_TKNoLineNumber
.b557	c9 3a		cmp #$3a			cmp 	#'9'+1
.b559	b0 03		bcs $b55e			bcs 	_TKNoLineNumber
.b55b	20 eb b6	jsr $b6eb			jsr 	TokeniseExtractLineNumber
.b55e					_TKNoLineNumber:
.b55e					_TKTokeniseLoop:
.b55e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b561	f0 65		beq $b5c8			beq 	_TKExit
.b563	e8		inx				inx
.b564	c9 20		cmp #$20			cmp 	#' '
.b566	f0 f6		beq $b55e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b568	ca		dex				dex 								; undo last get, A contains character, X is position.
.b569	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b56b	f0 61		beq $b5ce			beq 	_TKTokeniseIdentifier
.b56d	c9 41		cmp #$41			cmp 	#'A'
.b56f	90 04		bcc $b575			bcc 	_TKTokenisePunctuation
.b571	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b573	90 59		bcc $b5ce			bcc 	_TKTokeniseIdentifier
.b575					_TKTokenisePunctuation:
.b575	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b577	f0 27		beq $b5a0			beq 	_TKString
.b579	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b57b	f0 28		beq $b5a5			beq 	_TKHexConstant
.b57d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b57f	f0 29		beq $b5aa			beq 	_TKCheckDouble
.b581	c9 3e		cmp #$3e			cmp 	#'>'
.b583	f0 25		beq $b5aa			beq 	_TKCheckDouble
.b585					_TKStandardPunctuation:
.b585	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b588	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b58a	90 0e		bcc $b59a			bcc 	_TKNoShift
.b58c	48		pha				pha 								; save
.b58d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b58f	85 36		sta $36				sta 	zTemp0
.b591	68		pla				pla
.b592	29 20		and #$20			and 	#32 						; bit 5
.b594	4a		lsr a				lsr 	a 							; shift into bit 3
.b595	4a		lsr a				lsr 	a
.b596	05 36		ora $36				ora 	zTemp0
.b598	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b59a					_TKNoShift:
.b59a	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte 			; write the punctuation character
.b59d	e8		inx				inx 								; consume the character
.b59e	80 be		bra $b55e			bra 	_TKTokeniseLoop 			; and loop round again.
.b5a0					_TKString:
.b5a0	20 50 b6	jsr $b650			jsr 	TokeniseString
.b5a3	80 b9		bra $b55e			bra 	_TKTokeniseLoop
.b5a5					_TKHexConstant:
.b5a5	20 8b b6	jsr $b68b			jsr 	TokeniseHexConstant
.b5a8	80 b4		bra $b55e			bra 	_TKTokeniseLoop
.b5aa					_TKCheckDouble:
.b5aa	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5ad	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5af	90 d4		bcc $b585			bcc 	_TKStandardPunctuation
.b5b1	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5b3	b0 d0		bcs $b585			bcs 	_TKStandardPunctuation
.b5b5	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5b8	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5ba	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5bb	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5be	38		sec				sec
.b5bf	e9 3c		sbc #$3c			sbc 	#'<'
.b5c1	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b5c4	e8		inx				inx 								; consume both
.b5c5	e8		inx				inx
.b5c6	80 96		bra $b55e			bra 	_TKTokeniseLoop
.b5c8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5ca	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b5cd	60		rts				rts
.b5ce					_TKTokeniseIdentifier:
.b5ce	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5d1	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5d4					_TKCheckLoop:
.b5d4	e8		inx				inx 								; look at next, we know first is identifier.
.b5d5	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5d8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5da	f0 f8		beq $b5d4			beq 	_TKCheckLoop
.b5dc	c9 30		cmp #$30			cmp	 	#"0"
.b5de	90 0c		bcc $b5ec			bcc 	_TKEndIdentifier
.b5e0	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5e2	90 f0		bcc $b5d4			bcc 	_TKCheckLoop
.b5e4	c9 41		cmp #$41			cmp	 	#"A"
.b5e6	90 04		bcc $b5ec			bcc 	_TKEndIdentifier
.b5e8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5ea	90 e8		bcc $b5d4			bcc 	_TKCheckLoop
.b5ec					_TKEndIdentifier:
.b5ec	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b5ef	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b5f1	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5f3	f0 06		beq $b5fb			beq 	_TKHasTypeCharacter
.b5f5	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5f7	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5f9	d0 07		bne $b602			bne 	_TKNoTypeCharacter
.b5fb					_TKHasTypeCharacter:
.b5fb	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b5fe	e8		inx				inx 								; read next
.b5ff	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b602					_TKNoTypeCharacter:
.b602	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b604	d0 09		bne $b60f			bne 	_TKNoArray
.b606	e8		inx				inx 								; skip the (
.b607	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b60a	09 04		ora #$04			ora 	#$04
.b60c	8d 84 04	sta $0484			sta 	identTypeByte
.b60f					_TKNoArray:
.b60f	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b612	20 ac b6	jsr $b6ac			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b615	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b617	a9 0c		lda #$0c			lda 	#(KeywordSet0) & $FF
.b619	20 e0 b4	jsr $b4e0			jsr 	TokeniseSearchTable
.b61c	a2 00		ldx #$00			ldx 	#0
.b61e	b0 1f		bcs $b63f			bcs 	_TKFoundToken
.b620	a0 b9		ldy #$b9			ldy 	#(KeywordSet1) >> 8
.b622	a9 f1		lda #$f1			lda 	#(KeywordSet1) & $FF
.b624	20 e0 b4	jsr $b4e0			jsr 	TokeniseSearchTable
.b627	a2 81		ldx #$81			ldx 	#$81
.b629	b0 14		bcs $b63f			bcs 	_TKFoundToken
.b62b	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b62d	a9 3f		lda #$3f			lda 	#(KeywordSet2) & $FF
.b62f	20 e0 b4	jsr $b4e0			jsr 	TokeniseSearchTable
.b632	a2 82		ldx #$82			ldx 	#$82
.b634	b0 09		bcs $b63f			bcs 	_TKFoundToken
.b636	20 3c b7	jsr $b73c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b639	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b63c	4c 5e b5	jmp $b55e			jmp 	_TKTokeniseLoop 			; and go round again.
.b63f					_TKFoundToken:
.b63f	48		pha				pha 								; save token
.b640	8a		txa				txa 								; shift in X, is there one ?
.b641	f0 03		beq $b646			beq 	_TKNoTShift
.b643	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte 			; if so, write it out
.b646					_TKNoTShift:
.b646	68		pla				pla 								; restore and write token
.b647	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b64a	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b64d	4c 5e b5	jmp $b55e			jmp 	_TKTokeniseLoop 			; and go round again.
.b650					TokeniseString:
.b650	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b652	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b655	e8		inx				inx									; start of quoted string.
.b656	da		phx				phx 								; push start of string on top
.b657	ca		dex				dex
.b658					_TSFindEnd:
.b658	e8		inx				inx
.b659	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b65c	f0 04		beq $b662			beq 	_TSEndOfString
.b65e	c9 22		cmp #$22			cmp 	#'"'
.b660	d0 f6		bne $b658			bne 	_TSFindEnd
.b662					_TSEndOfString:
.b662	7a		ply				ply  								; so now Y is first character, X is character after end.
.b663	48		pha				pha 								; save terminating character
.b664	20 6c b6	jsr $b66c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b667	68		pla				pla 								; terminating character
.b668	f0 01		beq $b66b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b66a	e8		inx				inx
.b66b					_TSNotQuote:
.b66b	60		rts				rts
.b66c					TOWriteBlockXY:
.b66c	86 36		stx $36				stx 	zTemp0 						; write end character
.b66e	98		tya				tya
.b66f	49 ff		eor #$ff			eor 	#$FF
.b671	38		sec				sec
.b672	65 36		adc $36				adc 	zTemp0
.b674	1a		inc a				inc 	a 							; one extra for NULL
.b675	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b678					_TOBlockLoop:
.b678	c4 36		cpy $36				cpy 	zTemp0
.b67a	f0 09		beq $b685			beq 	_TOBlockExit
.b67c	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b67f	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b682	c8		iny				iny
.b683	80 f3		bra $b678			bra 	_TOBlockLoop
.b685					_TOBlockExit:
.b685	a9 00		lda #$00			lda 	#0
.b687	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b68a	60		rts				rts
.b68b					TokeniseHexConstant:
.b68b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b68d	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b690	e8		inx				inx									; start of quoted string.
.b691	da		phx				phx 								; push start of constant on top
.b692	ca		dex				dex
.b693					_THFindLoop:
.b693	e8		inx				inx
.b694	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b697	c9 30		cmp #$30			cmp 	#"0"
.b699	90 0c		bcc $b6a7			bcc 	_THFoundEnd
.b69b	c9 3a		cmp #$3a			cmp 	#"9"+1
.b69d	90 f4		bcc $b693			bcc 	_THFindLoop
.b69f	c9 41		cmp #$41			cmp 	#"A"
.b6a1	90 04		bcc $b6a7			bcc 	_THFoundEnd
.b6a3	c9 47		cmp #$47			cmp 	#"F"+1
.b6a5	90 ec		bcc $b693			bcc 	_THFindLoop
.b6a7					_THFoundEnd:
.b6a7	7a		ply				ply 								; restore start
.b6a8	20 6c b6	jsr $b66c			jsr 	TOWriteBlockXY 				; output the block
.b6ab	60		rts				rts
.b6ac					TokeniseCalculateHash:
.b6ac	da		phx				phx
.b6ad	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6b0	a9 00		lda #$00			lda 	#0
.b6b2					_TCHLoop:
.b6b2	18		clc				clc
.b6b3	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6b6	e8		inx				inx
.b6b7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6ba	d0 f6		bne $b6b2			bne 	_TCHLoop
.b6bc	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6bf	fa		plx				plx
.b6c0	60		rts				rts
.b6c1					FixLineBufferCase:
.b6c1	a2 00		ldx #$00			ldx 	#0
.b6c3					_FLBCLoop:
.b6c3	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6c6	f0 22		beq $b6ea			beq 	_FLBCExit 					; end of string.
.b6c8	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6ca	f0 11		beq $b6dd			beq 	_FLBCInQuotes
.b6cc	e8		inx				inx
.b6cd	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6cf	90 f2		bcc $b6c3			bcc 	_FLBCLoop
.b6d1	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6d3	b0 ee		bcs $b6c3			bcs 	_FLBCLoop
.b6d5	38		sec				sec 								; make U/C
.b6d6	e9 20		sbc #$20			sbc 	#32
.b6d8	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6db	80 e6		bra $b6c3			bra 	_FLBCLoop
.b6dd					_FLBCInQuotes:
.b6dd	e8		inx				inx 								; advance
.b6de	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6e1	f0 07		beq $b6ea			beq 	_FLBCExit 					; exit on EOS
.b6e3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6e5	d0 f6		bne $b6dd			bne 	_FLBCInQuotes
.b6e7	e8		inx				inx 								; skip over it
.b6e8	80 d9		bra $b6c3			bra 	_FLBCLoop
.b6ea					_FLBCExit:
.b6ea	60		rts				rts
.b6eb					TokeniseExtractLineNumber:
.b6eb	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b6ee	48		pha				pha
.b6ef	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b6f2	48		pha				pha
.b6f3	20 29 b7	jsr $b729			jsr 	_TELNTimes2 				; line # x 4
.b6f6	20 29 b7	jsr $b729			jsr 	_TELNTimes2 				; line # x 2
.b6f9	18		clc				clc 								; add stacked value
.b6fa	68		pla				pla
.b6fb	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b6fe	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b701	68		pla				pla
.b702	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b705	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b708	20 29 b7	jsr $b729			jsr 	_TELNTimes2 				; line # x 10
.b70b	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b70e	e8		inx				inx
.b70f	29 0f		and #$0f			and 	#15 						; add to line #
.b711	18		clc				clc
.b712	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b715	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b718	90 03		bcc $b71d			bcc 	_TLENNoCarry
.b71a	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b71d					_TLENNoCarry:
.b71d	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b720	c9 30		cmp #$30			cmp 	#'0'
.b722	90 04		bcc $b728			bcc 	_TLENExit
.b724	c9 3a		cmp #$3a			cmp 	#'9'+1
.b726	90 c3		bcc $b6eb			bcc 	TokeniseExtractLineNumber
.b728					_TLENExit:
.b728	60		rts				rts
.b729					_TELNTimes2:
.b729	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b72c	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b72f	60		rts				rts
.b730					TokeniseWriteByte:
.b730	da		phx				phx
.b731	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b734	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b737	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b73a	fa		plx				plx
.b73b	60		rts				rts
.b73c					CheckCreateVariableRecord:
.b73c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b73e	85 36		sta $36				sta 	0+zTemp0
.b740	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b742	85 37		sta $37				sta 	1+zTemp0
.b744					_CCVSearch:
.b744	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b746	f0 2c		beq $b774			beq 	_CCVFail
.b748	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b74a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b74c	cd 83 04	cmp $0483			cmp 	identHash
.b74f	d0 16		bne $b767			bne 	_CCVNext
.b751	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b753	ae 80 04	ldx $0480			ldx 	identStart
.b756					_CCVCompare:
.b756	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b759	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b75b	e8		inx				inx 								; advance pointers
.b75c	c8		iny				iny
.b75d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b75e	d0 07		bne $b767			bne 	_CCVNext  					; didn't match go to next.
.b760	90 f4		bcc $b756			bcc 	_CCVCompare 				; not finished yet.
.b762	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b765	f0 41		beq $b7a8			beq 	_CCVFound 					; yes, we were successful
.b767					_CCVNext:
.b767	18		clc				clc
.b768	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b76a	65 36		adc $36				adc 	zTemp0
.b76c	85 36		sta $36				sta 	zTemp0
.b76e	90 d4		bcc $b744			bcc 	_CCVSearch
.b770	e6 37		inc $37				inc 	zTemp0+1
.b772	80 d0		bra $b744			bra 	_CCVSearch
.b774					_CCVFail:
.b774	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b776	ad 83 04	lda $0483			lda 	identHash
.b779	91 36		sta ($36),y			sta 	(zTemp0),y
.b77b	c8		iny				iny 								; offset 2 is the type byte
.b77c	ad 84 04	lda $0484			lda 	identTypeByte
.b77f	91 36		sta ($36),y			sta 	(zTemp0),y
.b781	c8		iny				iny
.b782					_CCVData:
.b782	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b784	91 36		sta ($36),y			sta 	(zTemp0),y
.b786	c8		iny				iny
.b787	c0 08		cpy #$08			cpy 	#8
.b789	90 f7		bcc $b782			bcc 	_CCVData
.b78b	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b78e					_CCVCopyName:
.b78e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b791	91 36		sta ($36),y			sta 	(zTemp0),y
.b793	e8		inx				inx
.b794	c8		iny				iny
.b795	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b798	d0 f4		bne $b78e			bne 	_CCVCopyName
.b79a	98		tya				tya 								; patch offset
.b79b	92 36		sta ($36)			sta 	(zTemp0)
.b79d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b79f	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a1	88		dey				dey
.b7a2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7a4	09 80		ora #$80			ora 	#$80
.b7a6	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a8					_CCVFound:
.b7a8	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7aa	38		sec				sec
.b7ab	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7ad	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7af	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b7b2	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7b4	20 30 b7	jsr $b730			jsr 	TokeniseWriteByte
.b7b7	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
