
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 08:21:48 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tokenOffset:
>071b							.fill 	1
.071c					tokenLineNumber:
>071c							.fill 	2
.071e					tokenBuffer:
>071e							.fill 	253
.081b					lineBuffer:
>081b							.fill 	MaxLineSize+1
.086c					numberBuffer:
>086c							.fill 	34
.088e					decimalBuffer:
>088e							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 e7 83	jsr $83e7			jsr 	NewCommand 					; erase current program
.8006	20 75 92	jsr $9275			jsr 	BackloadProgram
.8009	4c 33 85	jmp $8533			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	2f 88					.word	ShiftLeft                        ; $00 <<
>8016	29 87					.word	BinaryCompareLessEqual           ; $01 <=
>8018	1f 87					.word	BinaryCompareNotEqual            ; $02 <>
>801a	4e 9c					.word	SyntaxError                      ; $03 !!3
>801c	4e 9c					.word	SyntaxError                      ; $04 ><
>801e	33 87					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	32 88					.word	ShiftRight                       ; $06 >>
>8022	4e 9c					.word	SyntaxError                      ; $07 !!7
>8024	4e 9c					.word	SyntaxError                      ; $08 !!8
>8026	4e 9c					.word	SyntaxError                      ; $09 !!9
>8028	4e 9c					.word	SyntaxError                      ; $0a !!10
>802a	4e 9c					.word	SyntaxError                      ; $0b !!11
>802c	4e 9c					.word	SyntaxError                      ; $0c !!12
>802e	4e 9c					.word	SyntaxError                      ; $0d !!13
>8030	4e 9c					.word	SyntaxError                      ; $0e !!14
>8032	4e 9c					.word	SyntaxError                      ; $0f !!15
>8034	4e 9c					.word	SyntaxError                      ; $10 @
>8036	4e 9c					.word	SyntaxError                      ; $11 !!17
>8038	4e 9c					.word	SyntaxError                      ; $12 !!18
>803a	4e 9c					.word	SyntaxError                      ; $13 [
>803c	97 97					.word	IntegerDivide                    ; $14 \
>803e	4e 9c					.word	SyntaxError                      ; $15 ]
>8040	b8 89					.word	EorInteger                       ; $16 ^
>8042	4e 9c					.word	SyntaxError                      ; $17 _
>8044	4e 9c					.word	SyntaxError                      ; $18 `
>8046	4e 9c					.word	SyntaxError                      ; $19 !!25
>8048	4e 9c					.word	SyntaxError                      ; $1a !!26
>804a	4e 9c					.word	SyntaxError                      ; $1b {
>804c	72 89					.word	OraInteger                       ; $1c |
>804e	4e 9c					.word	SyntaxError                      ; $1d }
>8050	4e 9c					.word	SyntaxError                      ; $1e ~
>8052	4e 9c					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	4e 9c					.word	SyntaxError                      ; $20
>8056	fe 89					.word	WordIndirect                     ; $21 !
>8058	4e 9c					.word	SyntaxError                      ; $22 "
>805a	4e 9c					.word	SyntaxError                      ; $23 #
>805c	4e 9c					.word	SyntaxError                      ; $24 $
>805e	e4 97					.word	IntegerModulus                   ; $25 %
>8060	2c 89					.word	AndInteger                       ; $26 &
>8062	4e 9c					.word	SyntaxError                      ; $27 '
>8064	4e 9c					.word	SyntaxError                      ; $28 (
>8066	4e 9c					.word	SyntaxError                      ; $29 )
>8068	59 98					.word	MulInteger                       ; $2a *
>806a	c6 88					.word	AddInteger                       ; $2b +
>806c	4e 9c					.word	SyntaxError                      ; $2c ,
>806e	01 89					.word	SubInteger                       ; $2d -
>8070	4e 9c					.word	SyntaxError                      ; $2e .
>8072	f0 99					.word	FDivideCommand                   ; $2f /
>8074	4e 9c					.word	SyntaxError                      ; $30 0
>8076	4e 9c					.word	SyntaxError                      ; $31 1
>8078	4e 9c					.word	SyntaxError                      ; $32 2
>807a	4e 9c					.word	SyntaxError                      ; $33 3
>807c	4e 9c					.word	SyntaxError                      ; $34 4
>807e	4e 9c					.word	SyntaxError                      ; $35 5
>8080	4e 9c					.word	SyntaxError                      ; $36 6
>8082	4e 9c					.word	SyntaxError                      ; $37 7
>8084	4e 9c					.word	SyntaxError                      ; $38 8
>8086	4e 9c					.word	SyntaxError                      ; $39 9
>8088	4e 9c					.word	SyntaxError                      ; $3a :
>808a	4e 9c					.word	SyntaxError                      ; $3b ;
>808c	0b 87					.word	BinaryCompareLess                ; $3c <
>808e	01 87					.word	BinaryCompareEqual               ; $3d =
>8090	15 87					.word	BinaryCompareGreater             ; $3e >
>8092	25 8a					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	88 85					.word	EOLCommand                       ; $80 !0:EOF
>8096	95 85					.word	Shift1Command                    ; $81 !1:SH1
>8098	4e 9c					.word	SyntaxError                      ; $82 !2:SH2
>809a	36 9b					.word	AbsUnary                         ; $83 ABS(
>809c	ef 8e					.word	AllocUnary                       ; $84 ALLOC(
>809e	46 9b					.word	AscUnary                         ; $85 ASC(
>80a0	aa 8f					.word	ChrUnary                         ; $86 CHR$(
>80a2	fd 86					.word	UnaryFalse                       ; $87 FALSE
>80a4	53 9b					.word	FracUnary                        ; $88 FRAC(
>80a6	69 9b					.word	IntUnary                         ; $89 INT(
>80a8	bf 9b					.word	IsValUnary                       ; $8a ISVAL(
>80aa	84 90					.word	Unary_Left                       ; $8b LEFT$(
>80ac	7b 9b					.word	LenUnary                         ; $8c LEN(
>80ae	ae 90					.word	Unary_Mid                        ; $8d MID$(
>80b0	47 8f					.word	Unary_Not                        ; $8e NOT(
>80b2	94 90					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	5d 8f					.word	Unary_Rnd                        ; $90 RND(
>80b6	95 9b					.word	SgnUnary                         ; $91 SGN(
>80b8	bc 8f					.word	SpcUnary                         ; $92 SPC(
>80ba	d7 8f					.word	Unary_Str                        ; $93 STR$(
>80bc	f1 86					.word	UnaryTrue                        ; $94 TRUE
>80be	b5 9b					.word	ValUnary                         ; $95 VAL(
>80c0	40 82					.word	ForCommand                       ; $96 FOR
>80c2	84 83					.word	IfCommand                        ; $97 IF
>80c4	9d 85					.word	Unused1                          ; $98 PROC
>80c6	df 84					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	56 86					.word	Command_WHILE                    ; $9a WHILE
>80ca	ad 83					.word	EndIf                            ; $9b ENDIF
>80cc	70 97					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	fa 82					.word	NextCommand                      ; $9d NEXT
>80d0	9d 85					.word	Unused4                          ; $9e THEN
>80d2	e8 84					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	77 86					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	4e 9c					.word	SyntaxError                      ; $a2 CLS
>80da	78 81					.word	Command_Data                     ; $a3 DATA
>80dc	80 81					.word	DimCommand                       ; $a4 DIM
>80de	9d 85					.word	Unused3                          ; $a5 DOWNTO
>80e0	a6 83					.word	ElseCode                         ; $a6 ELSE
>80e2	53 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	71 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	ae 83					.word	LetCommand                       ; $a9 LET
>80e8	f1 83					.word	Command_Print                    ; $aa PRINT
>80ea	79 84					.word	Command_Read                     ; $ab READ
>80ec	d2 84					.word	RemCommand                       ; $ac REM
>80ee	63 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	9d 85					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	4e 9c					.word	SyntaxError                      ; $80 !0:EOF
>80f4	4e 9c					.word	SyntaxError                      ; $81 !1:SH1
>80f6	4e 9c					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	3d 82					.word	EndCommand                       ; $85 END
>80fe	4e 9c					.word	SyntaxError                      ; $86 LIST
>8100	e7 83					.word	NewCommand                       ; $87 NEW
>8102	01 85					.word	Command_Restore                  ; $88 RESTORE
>8104	33 85					.word	CommandRUN                       ; $89 RUN
>8106	a0 85					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	4e 9c					.word	SyntaxError                      ; $80 !0:EOF
>810a	4e 9c					.word	SyntaxError                      ; $81 !1:SH1
>810c	4e 9c					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 4f 91	jsr $914f			jsr 	EvaluateInteger 			; the assert test
.8113	20 08 92	jsr $9208			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 85 86	jmp $8685		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 64 91	jsr $9164			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 68 92	jsr $9268			jsr 	StackReset
.816e	20 27 9e	jsr $9e27			jsr 	StringSystemInitialise
.8171	20 a5 85	jsr $85a5			jsr 	ProcedureScan
.8174	20 01 85	jsr $8501			jsr 	Command_Restore
.8177	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8178					Command_Data:
.8178	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.817a	a2 80		ldx #$80			ldx 	#KWC_EOL
.817c	20 f7 85	jsr $85f7			jsr 	ScanForward
.817f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8180					DimCommand:
.8180	b1 30		lda ($30),y			lda 	(codePtr),y
.8182	29 c0		and #$c0			and 	#$C0
.8184	c9 40		cmp #$40			cmp 	#$40
.8186	d0 7a		bne $8202			bne 	_DCSyntax
.8188	b1 30		lda ($30),y			lda 	(codePtr),y
.818a	18		clc				clc
.818b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.818d	85 3f		sta $3f				sta 	zaTemp+1
.818f	c8		iny				iny
.8190	b1 30		lda ($30),y			lda 	(codePtr),y
.8192	c8		iny				iny
.8193	85 3e		sta $3e				sta 	zaTemp
.8195	5a		phy				phy
.8196	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8198	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.819c	c9 18		cmp #$18			cmp 	#NSTProcedure
.819e	f0 62		beq $8202			beq 	_DCSyntax
.81a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.81a2	29 04		and #$04			and 	#NSBIsArray
.81a4	f0 64		beq $820a			beq 	_DCType
.81a6	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.81a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81aa	d0 59		bne $8205			bne 	_DCRedefine
.81ac	7a		ply				ply
.81ad	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get array size, check it.
.81b0	5a		phy				phy
.81b1	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81b3	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81b5	7a		ply				ply 							; is there a second (e.g. ,x)
.81b6	b1 30		lda ($30),y			lda 	(codePtr),y
.81b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81ba	d0 0a		bne $81c6			bne 	_DCOneDimension
.81bc	c8		iny				iny 							; skip comma
.81bd	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get 2nd array size
.81c0	5a		phy				phy
.81c1	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81c3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81c5	7a		ply				ply
.81c6					_DCOneDimension:
.81c6	5a		phy				phy 							; save position
.81c7	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81c9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cb	aa		tax				tax
.81cc	c8		iny				iny
.81cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cf	e8		inx				inx 							; bump them.
.81d0	1a		inc a				inc 	a
.81d1	20 00 9c	jsr $9c00			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81d4	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81d6	29 e0		and #$e0			and 	#$E0
.81d8	d0 23		bne $81fd			bne 	_DCSize
.81da	a0 02		ldy #$02			ldy 	#2 						; get base type
.81dc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81de	20 1b 82	jsr $821b			jsr 	ScaleByBaseType 		; scale by base type
.81e1	a5 36		lda $36				lda 	zTemp0
.81e3	a6 37		ldx $37				ldx 	zTemp0+1
.81e5	20 0e 8f	jsr $8f0e			jsr 	AllocateXABytes 		; allocate memory
.81e8	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81ea	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ec	c8		iny				iny
.81ed	8a		txa				txa
.81ee	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81f0	7a		ply				ply 							; get position back
.81f1	20 7e 97	jsr $977e			jsr 	CheckRightBracket 		; check )
.81f4	b1 30		lda ($30),y			lda 	(codePtr),y
.81f6	c8		iny				iny 							; consume in case
.81f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81f9	f0 85		beq $8180			beq 	DimCommand
.81fb	88		dey				dey 							; undo consume
.81fc	60		rts				rts
.81fd					_DCSize:
.81fd	a9 16		lda #$16		lda	#22
.81ff	4c 85 86	jmp $8685		jmp	ErrorHandler
.8202					_DCSyntax:
.8202	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError
.8205					_DCRedefine:
.8205	a9 15		lda #$15		lda	#21
.8207	4c 85 86	jmp $8685		jmp	ErrorHandler
.820a					_DCType:
.820a	4c 58 9c	jmp $9c58			jmp 	TypeError
.820d					_DCGetSize:
.820d	a2 00		ldx #$00			ldx 	#0 						; get first index.
.820f	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger 	; get array dimension
.8212	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8214	f0 e7		beq $81fd			beq 	_DCSize
.8216	c9 fe		cmp #$fe			cmp 	#254
.8218	f0 e3		beq $81fd			beq 	_DCSize
.821a	60		rts				rts
.821b					ScaleByBaseType:
.821b	29 10		and #$10			and 	#NSBIsString 			; is it string
.821d	d0 19		bne $8238			bne 	_SBBTString
.821f	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8221	48		pha				pha
.8222	a5 36		lda $36				lda 	zTemp0
.8224	48		pha				pha
.8225	06 36		asl $36				asl 	zTemp0 					; x 2
.8227	26 37		rol $37				rol 	zTemp0+1
.8229	06 36		asl $36				asl 	zTemp0 					; x 4
.822b	26 37		rol $37				rol 	zTemp0+1
.822d	68		pla				pla 							; add stacked value = x 5
.822e	65 36		adc $36				adc 	zTemp0
.8230	85 36		sta $36				sta 	zTemp0
.8232	68		pla				pla
.8233	65 37		adc $37				adc 	zTemp0+1
.8235	85 37		sta $37				sta 	zTemp0+1
.8237	60		rts				rts
.8238					_SBBTString:
.8238	06 36		asl $36				asl 	zTemp0
.823a	26 37		rol $37				rol 	zTemp0+1
.823c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.823d					EndCommand:
.823d	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8240					ForCommand:
.8240	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8242	20 15 92	jsr $9215			jsr 	StackOpen
.8245	a2 00		ldx #$00			ldx 	#0
.8247	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm
.824a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.824d	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.824f	d0 49		bne $829a			bne		_FCError
.8251	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8253	20 8e 97	jsr $978e			jsr 	CheckNextA
.8256	e8		inx				inx
.8257	20 4f 91	jsr $914f			jsr 	EvaluateInteger 			; <from> in +1
.825a	b1 30		lda ($30),y			lda 	(codePtr),y
.825c	c8		iny				iny 								; consume it
.825d	48		pha				pha 								; save on stack for later
.825e	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8260	f0 04		beq $8266			beq 	_FCNoSyntax
.8262	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8264	d0 37		bne $829d			bne 	_FCSyntaxError
.8266					_FCNoSyntax:
.8266	e8		inx				inx
.8267	20 4f 91	jsr $914f			jsr 	EvaluateInteger
.826a	20 47 92	jsr $9247			jsr 	STKSaveCodePosition 		; save loop back position
.826d	68		pla				pla 								; restore DOWNTO or TO
.826e	5a		phy				phy 								; save Y on the stack
.826f	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8271	f0 02		beq $8275			beq 	_FCNotDownTo
.8273	a9 02		lda #$02			lda 	#2
.8275					_FCNotDownTo:
.8275	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8276	a0 10		ldy #$10			ldy 	#16
.8278	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.827a	a0 06		ldy #$06			ldy 	#6
.827c	ad 08 06	lda $0608			lda 	NSMantissa0
.827f	91 34		sta ($34),y			sta 	(basicStack),y
.8281	ad 10 06	lda $0610			lda 	NSMantissa1
.8284	c8		iny				iny
.8285	91 34		sta ($34),y			sta 	(basicStack),y
.8287	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8289	a2 01		ldx #$01			ldx 	#1
.828b	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.828e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8290	a2 02		ldx #$02			ldx 	#2
.8292	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.8295	20 c0 82	jsr $82c0			jsr 	CopyIndexToReference
.8298	7a		ply				ply 								; restore position
.8299	60		rts				rts
.829a					_FCError:
.829a	4c 58 9c	jmp $9c58			jmp 	TypeError
.829d					_FCSyntaxError:
.829d	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError
.82a0					FCIntegerToStack:
.82a0	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.82a3	10 03		bpl $82a8			bpl	 	_FCNotNegative
.82a5	20 8d 91	jsr $918d			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.82a8					_FCNotNegative:
.82a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82ab	91 34		sta ($34),y			sta 	(basicStack),y
.82ad	c8		iny				iny
.82ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82b1	91 34		sta ($34),y			sta 	(basicStack),y
.82b3	c8		iny				iny
.82b4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82b7	91 34		sta ($34),y			sta 	(basicStack),y
.82b9	c8		iny				iny
.82ba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82bd	91 34		sta ($34),y			sta 	(basicStack),y
.82bf	60		rts				rts
.82c0					CopyIndexToReference:
.82c0	5a		phy				phy
.82c1	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82c3	38		sec				sec 								; (because we copy from offset 8)
.82c4	b1 34		lda ($34),y			lda 	(basicStack),y
.82c6	e9 08		sbc #$08			sbc 	#8
.82c8	85 36		sta $36				sta 	zTemp0
.82ca	c8		iny				iny
.82cb	b1 34		lda ($34),y			lda 	(basicStack),y
.82cd	e9 00		sbc #$00			sbc 	#0
.82cf	85 37		sta $37				sta 	zTemp0+1
.82d1	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82d3	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82d5	b1 34		lda ($34),y			lda 	(basicStack),y
.82d7	0a		asl a				asl 	a 							; into carry
.82d8	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82da	90 14		bcc $82f0			bcc 	_CITRNormal
.82dc	38		sec				sec
.82dd					_CITRNegative:
.82dd	a9 00		lda #$00			lda 	#0
.82df	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	c8		iny				iny
.82e4	ca		dex				dex
.82e5	d0 f6		bne $82dd			bne 	_CITRNegative
.82e7	88		dey				dey 								; look at MSB of mantissa
.82e8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82ea	09 80		ora #$80			ora 	#$80
.82ec	91 36		sta ($36),y			sta 	(zTemp0),y
.82ee	7a		ply				ply
.82ef	60		rts				rts
.82f0					_CITRNormal:
.82f0	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82f2	91 36		sta ($36),y			sta 	(zTemp0),y
.82f4	c8		iny				iny
.82f5	ca		dex				dex
.82f6	d0 f8		bne $82f0			bne 	_CITRNormal
.82f8	7a		ply				ply 								; and exit.
.82f9	60		rts				rts
.82fa					NextCommand:
.82fa	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82fc	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82fe	20 3c 92	jsr $923c			jsr 	StackCheckFrame
.8301	5a		phy				phy
.8302	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8304	b1 34		lda ($34),y			lda 	(basicStack),y
.8306	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8308	30 02		bmi $830c			bmi 	_NCStepNeg
.830a	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.830c					_NCStepNeg:
.830c	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.830e	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8310	18		clc				clc
.8311					_NCBump:
.8311	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8313	91 34		sta ($34),y			sta 	(basicStack),y
.8315	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8317	c8		iny				iny 								; next byte
.8318	ca		dex				dex 								; do four times
.8319	d0 f6		bne $8311			bne 	_NCBump
.831b	20 c0 82	jsr $82c0			jsr		CopyIndexToReference		; copy it to the reference variable.
.831e	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8320	b1 34		lda ($34),y			lda 	(basicStack),y
.8322	0a		asl a				asl 	a 							; sign bit to carry
.8323	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8325	85 38		sta $38				sta 	zTemp1
.8327	90 02		bcc $832b			bcc 	_NCCompRev 					; use if step is +ve
.8329	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.832b					_NCCompRev:
.832b	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.832d	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.832f	85 39		sta $39				sta 	zTemp1+1
.8331	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8333	38		sec				sec
.8334					_NCCompare:
.8334	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8336	b1 34		lda ($34),y			lda 	(basicStack),y
.8338	a4 39		ldy $39				ldy 	zTemp1+1
.833a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.833c	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.833e	e6 39		inc $39				inc 	zTemp1+1
.8340	ca		dex				dex 								; do it 4 times.
.8341	d0 f1		bne $8334			bne 	_NCCompare
.8343	50 02		bvc $8347			bvc 	_NCNoOverflow 				; convert to signed comparison
.8345	49 80		eor #$80			eor 	#$80
.8347					_NCNoOverflow:
.8347	7a		ply				ply 								; restore Y position
.8348	0a		asl a				asl 	a 							; is bit 7 set.
.8349	90 04		bcc $834f			bcc 	_NCLoopback 				; if no , >= so loop back
.834b	20 2e 92	jsr $922e			jsr 	StackClose 					; exit the loop
.834e	60		rts				rts
.834f					_NCLoopBack:
.834f	20 58 92	jsr $9258			jsr 	STKLoadCodePosition 		; loop back
.8352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8353					Command_GOSUB:
.8353	a2 00		ldx #$00			ldx 	#0
.8355	20 64 91	jsr $9164			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8358	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.835a	20 15 92	jsr $9215			jsr 	StackOpen 					; create frame
.835d	20 47 92	jsr $9247			jsr 	STKSaveCodePosition 		; save current position
.8360	4c 76 83	jmp $8376			jmp 	GotoStackX
.8363					Command_RETURN:
.8363	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8365	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8367	20 3c 92	jsr $923c			jsr 	StackCheckFrame
.836a	20 58 92	jsr $9258			jsr 	STKLoadCodePosition 		; restore code position
.836d	20 2e 92	jsr $922e			jsr 	StackClose
.8370	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8371					GotoCommand:
.8371	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8373	20 64 91	jsr $9164			jsr 	Evaluate16BitInteger
.8376					GotoStackX:
.8376	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8379	48		pha				pha 								; it is slightly inefficient, just in cases.
.837a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.837d	fa		plx				plx
.837e	20 3e 97	jsr $973e			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8381	4c 3e 85	jmp $853e			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8384					IfCommand:
.8384	a2 00		ldx #$00			ldx 	#0 							; If what.
.8386	20 2c 91	jsr $912c			jsr 	EvaluateNumber
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.838d	d0 0a		bne $8399			bne 	_IFStructured
.838f	c8		iny				iny 								; consume THEN
.8390	20 08 92	jsr $9208			jsr 	NSMIsZero 					; is it zero
.8393	f0 01		beq $8396			beq 	_IfFail 					; if fail, go to next line
.8395	60		rts				rts 								; if THEN just continue
.8396					_IfFail:
.8396	4c 88 85	jmp $8588			jmp 	EOLCommand
.8399					_IfStructured:
.8399	20 08 92	jsr $9208			jsr 	NSMIsZero 					; is it zero
.839c	d0 07		bne $83a5			bne 	_IfExit 					; if not, then continue normally.
.839e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.83a0	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.83a2	20 f7 85	jsr $85f7			jsr 	ScanForward 				; and run from there/
.83a5					_IfExit:
.83a5	60		rts				rts
.83a6					ElseCode:
.83a6	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.83a8	aa		tax				tax 								; so just go to the structure exit
.83a9	20 f7 85	jsr $85f7			jsr 	ScanForward
.83ac	60		rts				rts
.83ad					EndIf:
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83ae					LetCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	ad 76 8a	lda $8a76			lda 	PrecedenceLevel+"*"			; precedence > this
.83b3	20 90 8a	jsr $8a90			jsr 	EvaluateExpressionAtPrecedence
.83b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83b9	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83bb	f0 0e		beq $83cb			beq 	_LetGoProc 					; it's a procedure call.
.83bd	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83bf	20 8e 97	jsr $978e			jsr 	CheckNextA
.83c2	e8		inx				inx 								; RHS
.83c3	20 23 91	jsr $9123			jsr 	EvaluateValue
.83c6	ca		dex				dex
.83c7	20 ce 83	jsr $83ce			jsr 	AssignVariable
.83ca	60		rts				rts
.83cb					_LetGoProc:
.83cb	4c 48 84	jmp $8448			jmp 	CallProcedure
.83ce					AssignVariable:
.83ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83d1	48		pha				pha 								; save a copy
.83d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83d5	29 10		and #$10			and 	#NSBIsString
.83d7	d0 0b		bne $83e4			bne 	_ASError
.83d9	68		pla				pla 								; get back
.83da	29 10		and #$10			and 	#NSBIsString 				; check type
.83dc	d0 03		bne $83e1			bne 	_ASString
.83de	4c cb 8a	jmp $8acb			jmp 	AssignNumber
.83e1					_ASString:
.83e1	4c 39 8b	jmp $8b39			jmp 	AssignString
.83e4					_ASError:
.83e4	4c 58 9c	jmp $9c58			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.83e7					NewCommand:
.83e7	20 ed 96	jsr $96ed			jsr 	MemoryNew
.83ea	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.83ed	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.83f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.83f1					Command_Print:
.83f1	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.83f2					_CPLoop:
.83f2	08		php				php 								; save last action flag
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.83f7	f0 46		beq $843f			beq 	_CPExit
.83f9	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83fb	f0 42		beq $843f			beq 	_CPExit
.83fd	68		pla				pla 								; throw last action flag
.83fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8400	c8		iny				iny
.8401	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8403	f0 37		beq $843c			beq 	_CPContinueWithSameLine
.8405	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8407	f0 2e		beq $8437			beq 	_CPTab
.8409	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.840b	f0 26		beq $8433			beq 	_CPNewLine
.840d	88		dey				dey 								; undo the get.
.840e	a2 00		ldx #$00			ldx 	#0
.8410	20 23 91	jsr $9123			jsr 	EvaluateValue 				; get a value into slot 0
.8413	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8416	29 10		and #$10			and 	#NSBIsString
.8418	f0 0b		beq $8425			beq 	_CPNumber
.841a	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.841d	ad 08 06	lda $0608			lda 	NSMantissa0
.8420	20 de 86	jsr $86de			jsr 	PrintStringXA
.8423	80 cc		bra $83f1			bra 	Command_Print 				; loop round clearing carry so NL if end
.8425					_CPNumber:
.8425	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8427	20 f9 8f	jsr $8ff9			jsr 	ConvertNumberToString 		; convert to string
.842a	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.842c	a9 8e		lda #$8e			lda 	#DecimalBuffer & $FF
.842e	20 de 86	jsr $86de			jsr 	PrintStringXA
.8431	80 be		bra $83f1			bra 	Command_Print 				; loop round clearing carry so NL if end
.8433					_CPNewLine:
.8433	a9 0d		lda #$0d			lda 	#13
.8435	80 02		bra $8439			bra 	_CPPrintChar
.8437					_CPTab:
.8437	a9 09		lda #$09			lda 	#9 							; print TAB
.8439					_CPPrintChar:
.8439	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.843c					_CPContinueWithSameLine:
.843c	38		sec				sec 								; loop round with carry set, which
.843d	80 b3		bra $83f2			bra 	_CPLoop 					; will inhibit final CR
.843f					_CPExit:
.843f	28		plp				plp 								; get last action flag
.8440	b0 05		bcs $8447			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8442	a9 0d		lda #$0d			lda 	#13 						; print new line
.8444	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.8447					_CPExit2:
.8447	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8448					CallProcedure:
.8448	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.844b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.844d	20 15 92	jsr $9215			jsr 	StackOpen
.8450	20 47 92	jsr $9247			jsr 	STKSaveCodePosition 		; save loop position
.8453	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8456	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8458	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.845b	85 37		sta $37				sta 	zTemp0+1
.845d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.845f	b2 36		lda ($36)			lda 	(zTemp0)
.8461	85 30		sta $30				sta 	safePtr
.8463	b1 36		lda ($36),y			lda 	(zTemp0),y
.8465	85 31		sta $31				sta 	safePtr+1
.8467	c8		iny				iny
.8468	b1 36		lda ($36),y			lda 	(zTemp0),y
.846a	85 32		sta $32				sta 	safePtr+2
.846c	c8		iny				iny
.846d	b1 36		lda ($36),y			lda 	(zTemp0),y
.846f	85 33		sta $33				sta 	safePtr+3
.8471	c8		iny				iny 								; get Y offset -> Y
.8472	b1 36		lda ($36),y			lda 	(zTemp0),y
.8474	a8		tay				tay
.8475	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; check )
.8478	60		rts				rts 								; and continue from here
.9770					Command_ENDPROC:
.9770	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9772	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9774	20 3c 92	jsr $923c			jsr 	StackCheckFrame
.9777	20 58 92	jsr $9258			jsr 	STKLoadCodePosition 		; restore code position
.977a	20 2e 92	jsr $922e			jsr 	StackClose
.977d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8479					Command_Read:
.8479	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.847b	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm
.847e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8481	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8483	f0 4a		beq $84cf			beq 	_CRSyntax 					; check reference (bit 0)
.8485	20 18 85	jsr $8518			jsr 	SwapDataCodePtrs 			; swap code and data
.8488	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.848b	d0 20		bne $84ad			bne 	_CRContinueData
.848d					_CRKeepSearching:
.848d	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.848f	aa		tax				tax
.8490	20 f7 85	jsr $85f7			jsr 	ScanForward
.8493	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8495	f0 16		beq $84ad			beq 	_CRHaveData 				; found it
.8497	18		clc				clc
.8498	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.849a	65 30		adc $30				adc 	codePtr
.849c	85 30		sta $30				sta 	codePtr
.849e	90 02		bcc $84a2			bcc 	_CREExit
.84a0	e6 31		inc $31				inc 	codePtr+1
.84a2					_CREExit:
.84a2	a0 03		ldy #$03			ldy 	#3 							; start of line.
.84a4	b2 30		lda ($30)			lda 	(codePtr)
.84a6	d0 e5		bne $848d			bne 	_CRKeepSearching
.84a8	a9 0b		lda #$0b		lda	#11
.84aa	4c 85 86	jmp $8685		jmp	ErrorHandler
.84ad					_CRHaveData:
.84ad					_CRContinueData:
.84ad	a2 01		ldx #$01			ldx 	#1
.84af	20 23 91	jsr $9123			jsr 	EvaluateValue 				; evaluate value into slot # 1
.84b2	ca		dex				dex
.84b3	20 ce 83	jsr $83ce			jsr		AssignVariable 				; do the assignment
.84b6	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.84b9	b1 30		lda ($30),y			lda 	(codePtr),y
.84bb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.84bd	d0 04		bne $84c3			bne 	_CRSwapBack
.84bf	c8		iny				iny 								; consume comma
.84c0	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.84c3					_CRSwapBack:
.84c3	20 18 85	jsr $8518			jsr 	SwapDataCodePtrs			; swap them back.
.84c6	b1 30		lda ($30),y			lda 	(codePtr),y
.84c8	c8		iny				iny
.84c9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84cb	f0 ac		beq $8479			beq 	Command_Read 				; if so go round again.
.84cd	88		dey				dey 								; unpick get.
.84ce	60		rts				rts
.84cf					_CRSyntax:
.84cf	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.84d2					RemCommand:
.84d2	b1 30		lda ($30),y			lda 	(codePtr),y
.84d4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.84d6	d0 06		bne $84de			bne 	_RMExit
.84d8	c8		iny				iny
.84d9	98		tya				tya
.84da	38		sec				sec
.84db	71 30		adc ($30),y			adc 	(codePtr),y
.84dd	a8		tay				tay
.84de					_RMExit:
.84de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.84df					Command_REPEAT:
.84df	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.84e1	20 15 92	jsr $9215			jsr 	StackOpen
.84e4	20 47 92	jsr $9247			jsr 	STKSaveCodePosition 		; save loop position
.84e7	60		rts				rts
.84e8					Command_UNTIL:
.84e8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.84ea	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.84ec	20 3c 92	jsr $923c			jsr 	StackCheckFrame
.84ef	a2 00		ldx #$00			ldx 	#0
.84f1	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; work out the number
.84f4	20 08 92	jsr $9208			jsr 	NSMIsZero 					; check if zero
.84f7	f0 04		beq $84fd			beq 	_CULoopBack 				; if so keep looping
.84f9	20 2e 92	jsr $922e			jsr 	StackClose		 			; return
.84fc	60		rts				rts
.84fd					_CULoopBack:
.84fd	20 58 92	jsr $9258			jsr 	STKLoadCodePosition 		; loop back
.8500	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8501					Command_Restore:
.8501	20 18 85	jsr $8518			jsr 	SwapDataCodePtrs 			; swap code and data
.8504	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8506	85 30		sta $30				sta 	codePtr
.8508	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.850a	85 31		sta $31				sta 	codePtr+1
.850c	20 18 85	jsr $8518			jsr 	SwapDataCodePtrs 			; put them back
.850f	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8511	8d 19 07	sta $0719			sta 	dataPointer+4
.8514	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.8517	60		rts				rts
.8518					SwapDataCodePtrs:
.8518	da		phx				phx
.8519	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.851b					_SDCPLoop:
.851b	b5 30		lda $30,x			lda 	safePtr,x
.851d	48		pha				pha
.851e	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8521	95 30		sta $30,x			sta 	safePtr,x
.8523	68		pla				pla
.8524	9d 15 07	sta $0715,x			sta 	dataPointer,x
.8527	ca		dex				dex
.8528	10 f1		bpl $851b			bpl 	_SDCPLoop
.852a	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.852d	8c 19 07	sty $0719			sty 	dataPointer+4
.8530	a8		tay				tay
.8531	fa		plx				plx
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8533					CommandRUN:
.8533	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8536	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8538	85 30		sta $30				sta 	codePtr
.853a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.853c	85 31		sta $31				sta 	codePtr+1
.853e					RUNNewLine:
.853e	b2 30		lda ($30)			lda 	(codePtr)
.8540	f0 43		beq $8585			beq 	CRNoProgram         		; no then END.
.8542	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8544	9a		txs				txs
.8545					RUNCodePointerLine:
.8545	a0 02		ldy #$02			ldy 	#2 							; start of program
.8547					_CRIncMainLoop:
.8547	c8		iny				iny
.8548					_CRMainLoop:
.8548	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.854b	b1 30		lda ($30),y			lda 	(codePtr),y
.854d	10 10		bpl $855f			bpl 	_CRNotKeyword
.854f	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8551	b0 04		bcs $8557			bcs 	_CRIsKeyword
.8553	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8555	b0 28		bcs $857f			bcs		_CRSyntaxError
.8557					_CRIsKeyword:
.8557	c8		iny				iny 								; consume command
.8558	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8559	aa		tax				tax 								; put in X for vector jump
.855a	20 82 85	jsr $8582			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.855d	80 e9		bra $8548			bra 	_CRMainLoop 				; and loop round
.855f					_CRNotKeyword:
.855f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8561	f0 e4		beq $8547			beq 	_CRIncMainLoop
.8563	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8565	90 05		bcc $856c			bcc 	_CRNotVariable
.8567					_CRGoLet:
.8567	20 ae 83	jsr $83ae			jsr 	LetCommand
.856a	80 dc		bra $8548			bra 	_CRMainLoop
.856c					_CRNotVariable:
.856c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.856e	f0 f7		beq $8567			beq 	_CRGoLet
.8570	c9 21		cmp #$21			cmp 	#KWD_PLING
.8572	f0 f3		beq $8567			beq 	_CRGoLet
.8574	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8576	f0 01		beq $8579			beq 	_CRGoRem
>8578	db						.byte 	$DB 						; causes a break in the emulator
.8579					_CRGoRem:
.8579	c8		iny				iny
.857a	20 d2 84	jsr $84d2			jsr 	RemCommand
.857d	80 c9		bra $8548			bra 	_CRMainLoop
.857f					_CRSyntaxError:
.857f	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError
.8582					_CRCallVector0:
.8582	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8585					CRNoProgram:
.8585	4c 3d 82	jmp $823d			jmp 	EndCommand
.8588					EOLCommand:
.8588	18		clc				clc
.8589	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.858b	65 30		adc $30				adc 	codePtr
.858d	85 30		sta $30				sta 	codePtr
.858f	90 02		bcc $8593			bcc 	_CREExit
.8591	e6 31		inc $31				inc 	codePtr+1
.8593					_CREExit:
.8593	80 a9		bra $853e			bra 	RunNewLine
.8595					Shift1Command:
.8595	b1 30		lda ($30),y			lda 	(codePtr),y
.8597	c8		iny				iny
.8598	0a		asl a				asl 	a
.8599	aa		tax				tax
.859a	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.859d					Unused1:
.859d					Unused2:
.859d					Unused3:
.859d					Unused4:
.859d	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.85a0					StopCommand:
.85a0	a9 08		lda #$08		lda	#8
.85a2	4c 85 86	jmp $8685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.85a5					ProcedureScan:
.85a5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85a7	85 30		sta $30				sta 	codePtr
.85a9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85ab	85 31		sta $31				sta 	codePtr+1
.85ad					_PSLoop:
.85ad	b2 30		lda ($30)			lda 	(codePtr)
.85af	f0 42		beq $85f3			beq 	_PSExit
.85b1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.85b3	b1 30		lda ($30),y			lda 	(codePtr),y
.85b5	c9 98		cmp #$98			cmp 	#KWD_PROC
.85b7	d0 2d		bne $85e6			bne 	_PSNext
.85b9	c8		iny				iny 								; get the address of the record to zTemp0 and
.85ba	b1 30		lda ($30),y			lda 	(codePtr),y
.85bc	29 c0		and #$c0			and 	#$C0
.85be	c9 40		cmp #$40			cmp 	#$40
.85c0	d0 32		bne $85f4			bne 	_PSSyntax
.85c2	b1 30		lda ($30),y			lda 	(codePtr),y
.85c4	18		clc				clc
.85c5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.85c7	85 37		sta $37				sta 	zTemp0+1
.85c9	c8		iny				iny 								; LSB
.85ca	b1 30		lda ($30),y			lda 	(codePtr),y
.85cc	85 36		sta $36				sta 	zTemp0
.85ce	c8		iny				iny 								; character after variable call.
.85cf	98		tya				tya 								; save Y offset at +7
.85d0	a0 07		ldy #$07			ldy 	#7
.85d2	91 36		sta ($36),y			sta 	(zTemp0),y
.85d4	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.85d6	a0 02		ldy #$02			ldy 	#2
.85d8	91 36		sta ($36),y			sta 	(zTemp0),y
.85da	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.85dc					_PSCopy:
.85dc	b5 30		lda $30,x			lda 	safePtr,x
.85de	c8		iny				iny
.85df	91 36		sta ($36),y			sta 	(zTemp0),y
.85e1	e8		inx				inx
.85e2	e0 04		cpx #$04			cpx 	#4
.85e4	d0 f6		bne $85dc			bne 	_PSCopy
.85e6					_PSNext:
.85e6	18		clc				clc
.85e7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.85e9	65 30		adc $30				adc 	codePtr
.85eb	85 30		sta $30				sta 	codePtr
.85ed	90 02		bcc $85f1			bcc 	_CREExit
.85ef	e6 31		inc $31				inc 	codePtr+1
.85f1					_CREExit:
.85f1	80 ba		bra $85ad			bra 	_PSLoop
.85f3					_PSExit:
.85f3	60		rts				rts
.85f4					_PSSyntax:
.85f4	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.85f7					ScanForward:
.85f7	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.85f9	86 37		stx $37				stx 	zTemp0+1
.85fb	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.85fd					_ScanLoop:
.85fd	b1 30		lda ($30),y			lda 	(codePtr),y
.85ff	c8		iny				iny
.8600	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8602	d0 0e		bne $8612			bne 	_ScanGoNext
.8604	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8606	f0 04		beq $860c			beq 	_ScanMatch
.8608	c5 37		cmp $37				cmp 	zTemp0+1
.860a	d0 06		bne $8612			bne 	_ScanGoNext
.860c					_ScanMatch:
.860c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.860e	d0 01		bne $8611			bne 	_ScanNotEndEOL
.8610	88		dey				dey
.8611					_ScanNotEndEOL:
.8611	60		rts				rts
.8612					_ScanGoNext:
.8612	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8614	90 e7		bcc $85fd			bcc 	_ScanLoop
.8616	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8618	90 18		bcc $8632			bcc 	_ScanSkipOne
.861a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.861c	b0 2f		bcs $864d			bcs 	_ScanSkipData
.861e	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8620	90 db		bcc $85fd			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8622	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8624	b0 d7		bcs $85fd			bcs 	_ScanLoop
.8626	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8628	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.862a	b0 d1		bcs $85fd			bcs 	_ScanLoop
.862c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.862e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8630	80 cb		bra $85fd			bra 	_ScanLoop
.8632					_ScanSkipOne:
.8632	c8		iny				iny 								; consume the extra one.
.8633	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8635	d0 c6		bne $85fd			bne 	_ScanLoop
.8637	18		clc				clc
.8638	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.863a	65 30		adc $30				adc 	codePtr
.863c	85 30		sta $30				sta 	codePtr
.863e	90 02		bcc $8642			bcc 	_CREExit
.8640	e6 31		inc $31				inc 	codePtr+1
.8642					_CREExit:
.8642	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8644	b2 30		lda ($30)			lda 	(codePtr)
.8646	d0 b5		bne $85fd			bne 	_ScanLoop 					; if not zero, more to scan
.8648	a9 13		lda #$13		lda	#19
.864a	4c 85 86	jmp $8685		jmp	ErrorHandler
.864d					_ScanSkipData:
.864d	88		dey				dey 								; point at data token
.864e	c8		iny				iny
.864f	98		tya				tya
.8650	38		sec				sec
.8651	71 30		adc ($30),y			adc 	(codePtr),y
.8653	a8		tay				tay
.8654	80 a7		bra $85fd			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8656					Command_WHILE:
.8656	5a		phy				phy 								; save position of the test
.8657	a2 00		ldx #$00			ldx 	#0
.8659	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; work out the number
.865c	20 08 92	jsr $9208			jsr 	NSMIsZero 					; check if zero
.865f	f0 0e		beq $866f			beq 	_WHExitLoop 				; if so exit the loop
.8661	98		tya				tya 								; position *after* test.
.8662	7a		ply				ply 								; restore position before test, at WHILE
.8663	88		dey				dey
.8664	48		pha				pha 								; push after test on the stack
.8665	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8667	20 15 92	jsr $9215			jsr 	StackOpen
.866a	20 47 92	jsr $9247			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.866d	7a		ply				ply 								; restore the position *after* the test
.866e	60		rts				rts
.866f					_WHExitLoop:
.866f	68		pla				pla 								; throw post loop position
.8670	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8672	aa		tax				tax
.8673	20 f7 85	jsr $85f7			jsr 	ScanForward
.8676	60		rts				rts
.8677					Command_WEND:
.8677	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8679	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.867b	20 3c 92	jsr $923c			jsr 	StackCheckFrame
.867e	20 58 92	jsr $9258			jsr 	STKLoadCodePosition 		; loop back
.8681	20 2e 92	jsr $922e			jsr 	StackClose		 			; erase the frame
.8684	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.977e					CheckRightBracket:
.977e	b1 30		lda ($30),y			lda 	(codePtr),y
.9780	c8		iny				iny
.9781	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9783	d0 0f		bne $9794			bne 	CNAFail
.9785	60		rts				rts
.9786					CheckComma:
.9786	b1 30		lda ($30),y			lda 	(codePtr),y
.9788	c8		iny				iny
.9789	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.978b	d0 07		bne $9794			bne 	CNAFail
.978d	60		rts				rts
.978e					CheckNextA:
.978e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9790	d0 02		bne $9794			bne 	CNAFail
.9792	c8		iny				iny 								; skip character
.9793	60		rts				rts 								; and exit
.9794					CNAFail:
.9794	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8685					ErrorHandler:
.8685	a8		tay				tay 								; find the error text
.8686	f0 49		beq $86d1			beq 	_EHEnd
.8688	a2 00		ldx #$00			ldx 	#0
.868a	a9 67		lda #$67			lda 	#((ErrorText) & $FF)
.868c	85 36		sta $36				sta 	0+zTemp0
.868e	a9 9c		lda #$9c			lda 	#((ErrorText) >> 8)
.8690	85 37		sta $37				sta 	1+zTemp0
.8692					_EHFind:
.8692	88		dey				dey 								; found the error text ?
.8693	f0 0e		beq $86a3			beq 	_EHFound
.8695					_EHFindZero:
.8695	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8697	e6 36		inc $36				inc 	zTemp0
.8699	d0 02		bne $869d			bne 	_EHFNoCarry
.869b	e6 37		inc $37				inc 	zTemp0+1
.869d					_EHFNoCarry:
.869d	c9 00		cmp #$00			cmp 	#0
.869f	d0 f4		bne $8695			bne 	_EHFindZero
.86a1	80 ef		bra $8692			bra 	_EHFind
.86a3					_EHFound:
.86a3	a5 36		lda $36				lda 	zTemp0 						; print message
.86a5	a6 37		ldx $37				ldx 	zTemp0+1
.86a7	20 de 86	jsr $86de			jsr 	PrintStringXA
.86aa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.86ac	b1 30		lda ($30),y			lda 	(codePtr),y
.86ae	d0 05		bne $86b5			bne 	_EHAtMsg
.86b0	c8		iny				iny
.86b1	b1 30		lda ($30),y			lda 	(codePtr),y
.86b3	f0 17		beq $86cc			beq 	_EHCREnd
.86b5					_EHAtMsg:
.86b5	a2 86		ldx #$86			ldx 	#_AtMsg >> 8 				; print " at "
.86b7	a9 d4		lda #$d4			lda 	#_AtMsg & $FF
.86b9	20 de 86	jsr $86de			jsr 	PrintStringXA
.86bc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.86be	b1 30		lda ($30),y			lda 	(codePtr),y
.86c0	48		pha				pha
.86c1	c8		iny				iny
.86c2	b1 30		lda ($30),y			lda 	(codePtr),y
.86c4	aa		tax				tax
.86c5	68		pla				pla
.86c6	20 da 98	jsr $98da			jsr 	ConvertInt16 				; convert XA to string
.86c9	20 de 86	jsr $86de			jsr 	PrintStringXA 				; and print it.
.86cc					_EHCREnd:
.86cc	a9 0d		lda #$0d			lda 	#13 						; new line
.86ce	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.86d1					_EHEnd:
.86d1	4c 0c 80	jmp $800c			jmp 	WarmStart
>86d4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>86dc	20 00
.86de					PrintStringXA:
.86de	5a		phy				phy
.86df	86 37		stx $37				stx 	zTemp0+1
.86e1	85 36		sta $36				sta 	zTemp0
.86e3	a0 00		ldy #$00			ldy 	#0
.86e5					_PSXALoop:
.86e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.86e7	f0 06		beq $86ef			beq 	_PSXAExit
.86e9	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.86ec	c8		iny				iny
.86ed	80 f6		bra $86e5			bra 	_PSXALoop
.86ef					_PSXAExit:
.86ef	7a		ply				ply
.86f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.86f1					UnaryTrue:
.86f1	fa		plx				plx
.86f2					ReturnTrue:
.86f2	a9 01		lda #$01			lda 	#1  						; set to 1
.86f4	20 da 91	jsr $91da			jsr 	NSMSetByte
.86f7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.86f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86fc	60		rts				rts
.86fd					UnaryFalse:
.86fd	fa		plx				plx
.86fe					ReturnFalse:
.86fe	4c d8 91	jmp $91d8			jmp 	NSMSetZero 					; set it all to zero
.8701					BinaryCompareEqual:
.8701	fa		plx				plx
.8702	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.8705	c9 00		cmp #$00			cmp 	#0
.8707	f0 e9		beq $86f2			beq 	ReturnTrue
.8709	80 f3		bra $86fe			bra 	ReturnFalse
.870b					BinaryCompareLess:
.870b	fa		plx				plx
.870c	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.870f	c9 ff		cmp #$ff			cmp 	#$FF
.8711	f0 df		beq $86f2			beq 	ReturnTrue
.8713	80 e9		bra $86fe			bra 	ReturnFalse
.8715					BinaryCompareGreater:
.8715	fa		plx				plx
.8716	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.8719	c9 01		cmp #$01			cmp 	#1
.871b	f0 d5		beq $86f2			beq 	ReturnTrue
.871d	80 df		bra $86fe			bra 	ReturnFalse
.871f					BinaryCompareNotEqual:
.871f	fa		plx				plx
.8720	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.8723	c9 00		cmp #$00			cmp 	#0
.8725	d0 cb		bne $86f2			bne 	ReturnTrue
.8727	80 d5		bra $86fe			bra 	ReturnFalse
.8729					BinaryCompareLessEqual:
.8729	fa		plx				plx
.872a	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.872d	c9 01		cmp #$01			cmp 	#1
.872f	d0 c1		bne $86f2			bne 	ReturnTrue
.8731	80 cb		bra $86fe			bra 	ReturnFalse
.8733					BinaryCompareGreaterEqual:
.8733	fa		plx				plx
.8734	20 3d 87	jsr $873d			jsr 	CompareBaseCode
.8737	c9 ff		cmp #$ff			cmp 	#$FF
.8739	d0 b7		bne $86f2			bne 	ReturnTrue
.873b	80 c1		bra $86fe			bra 	ReturnFalse
.873d					CompareBaseCode:
.873d	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; make both values if references.
.8740	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8743	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8746	29 10		and #$10			and 	#NSTString
.8748	d0 40		bne $878a			bne 	_CBCString
.874a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.874d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8750	d0 3b		bne $878d			bne 	_CBCFloat
.8752	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8755	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8758	29 08		and #$08			and 	#NSTFloat
.875a	d0 31		bne $878d			bne 	_CBCFloat
.875c	20 90 87	jsr $8790			jsr 	CompareFixMinusZero
.875f	e8		inx				inx
.8760	20 90 87	jsr $8790			jsr 	CompareFixMinusZero
.8763	ca		dex				dex
.8764	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8767	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.876a	10 0b		bpl $8777			bpl 	_CDCSameSign
.876c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.876f	30 16		bmi $8787			bmi 	_CBCLess 					; return $FF
.8771					_CBCGreater:
.8771	a9 01		lda #$01			lda 	#1
.8773	60		rts				rts
.8774					_CBCEqual:
.8774	a9 00		lda #$00			lda 	#0
.8776	60		rts				rts
.8777					_CDCSameSign:
.8777	20 a0 88	jsr $88a0			jsr 	SubTopTwoStack 				; unsigned subtract
.877a	20 08 92	jsr $9208			jsr 	NSMIsZero 					; or the mantissa together
.877d	f0 f5		beq $8774			beq 	_CBCEqual 					; -0 == 0
.877f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8782	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8785	10 ea		bpl $8771			bpl 	_CBCGreater
.8787					_CBCLess:
.8787	a9 ff		lda #$ff			lda 	#$FF
.8789	60		rts				rts
.878a					_CBCString:
.878a	4c f6 87	jmp $87f6			jmp 	CompareStrings
.878d					_CBCFloat:
.878d	4c d6 99	jmp $99d6			jmp 	CompareFloat
.8790					CompareFixMinusZero:
.8790	20 08 92	jsr $9208			jsr 	NSMIsZero
.8793	d0 03		bne $8798			bne 	_CFXMZNotZero
.8795	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8798					_CFXMZNotZero:
.8798	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8799					StringConcat:
.8799	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.879c	3d 01 06	and $0601,x			and 	NSStatus+1,x
.879f	29 18		and #$18			and 	#NSBTypeMask
.87a1	c9 10		cmp #$10			cmp 	#NSTString
.87a3	d0 4e		bne $87f3			bne		_SCType
.87a5	64 38		stz $38				stz 	zTemp1 						; counting total length
.87a7	e8		inx				inx
.87a8	20 c6 87	jsr $87c6			jsr 	_SCSetupZ0 					; setup for second
.87ab	20 d1 87	jsr $87d1			jsr 	_SCLengthZ0 				; length for second
.87ae	ca		dex				dex
.87af	20 c6 87	jsr $87c6			jsr 	_SCSetupZ0 					; setup for first
.87b2	20 d1 87	jsr $87d1			jsr 	_SCLengthZ0 				; length for first
.87b5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.87b7	20 48 9e	jsr $9e48			jsr 	StringTempAllocate
.87ba	20 e4 87	jsr $87e4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.87bd	e8		inx				inx
.87be	20 c6 87	jsr $87c6			jsr 	_SCSetupZ0 					; copy second out
.87c1	20 e4 87	jsr $87e4			jsr 	_SCCopy
.87c4	ca		dex				dex
.87c5	60		rts				rts
.87c6					_SCSetupZ0:
.87c6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.87c9	85 36		sta $36				sta 	zTemp0
.87cb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87ce	85 37		sta $37				sta 	zTemp0+1
.87d0	60		rts				rts
.87d1					_SCLengthZ0:
.87d1	5a		phy				phy
.87d2	a0 00		ldy #$00			ldy 	#0
.87d4					_SCLenLoop:
.87d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d6	f0 0a		beq $87e2			beq 	_SCLExit
.87d8	c8		iny				iny
.87d9	e6 38		inc $38				inc 	zTemp1
.87db	10 f7		bpl $87d4			bpl		_SCLenLoop
.87dd	a9 09		lda #$09		lda	#9
.87df	4c 85 86	jmp $8685		jmp	ErrorHandler
.87e2					_SCLExit:
.87e2	7a		ply				ply
.87e3	60		rts				rts
.87e4					_SCCopy:
.87e4	5a		phy				phy
.87e5	a0 00		ldy #$00			ldy 	#0
.87e7					_SCCopyLoop:
.87e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e9	f0 06		beq $87f1			beq 	_SCCExit
.87eb	20 86 9e	jsr $9e86			jsr 	StringTempWrite
.87ee	c8		iny				iny
.87ef	80 f6		bra $87e7			bra 	_SCCopyLoop
.87f1					_SCCExit:
.87f1	7a		ply				ply
.87f2	60		rts				rts
.87f3					_SCType:
.87f3	4c 58 9c	jmp $9c58			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9797					IntegerDivide:
.9797	fa		plx				plx
.9798	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.979b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.979e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.979f	0a		asl a				asl 	a
.97a0	10 05		bpl $97a7			bpl 	_NotRef
.97a2	48		pha				pha
.97a3	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a6	68		pla				pla
.97a7					_NotRef:
.97a7	0a		asl a				asl 	a
.97a8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97aa	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ad	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.97b0	f0 03		beq $97b5			beq 	_IntegerCode 				; if clear, then we have two integers
.97b2	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.97b5					_IntegerCode:
.97b5	20 d7 97	jsr $97d7			jsr 	CheckDivideZero 			; do div zero check
.97b8	20 0f 98	jsr $980f			jsr 	Int32Divide 				; do the division
.97bb	20 cc 98	jsr $98cc			jsr 	CalculateSign 				; calculate result sign
.97be					NSMCopyPlusTwoToZero:
.97be	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.97c1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97c4	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.97c7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97ca	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.97cd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97d0	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.97d3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97d6	60		rts				rts
.97d7					CheckDivideZero:
.97d7	e8		inx				inx
.97d8	20 08 92	jsr $9208			jsr 	NSMIsZero
.97db	f0 02		beq $97df			beq 	_CDVError
.97dd	ca		dex				dex
.97de	60		rts				rts
.97df					_CDVError:
.97df	a9 03		lda #$03		lda	#3
.97e1	4c 85 86	jmp $8685		jmp	ErrorHandler
.97e4					IntegerModulus:
.97e4	fa		plx				plx
.97e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.97e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.97eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ec	0a		asl a				asl 	a
.97ed	10 05		bpl $97f4			bpl 	_NotRef
.97ef	48		pha				pha
.97f0	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97f3	68		pla				pla
.97f4					_NotRef:
.97f4	0a		asl a				asl 	a
.97f5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97f7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97fa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.97fd	f0 03		beq $9802			beq 	_IntegerCode 				; if clear, then we have two integers
.97ff	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.9802					_IntegerCode:
.9802	20 d7 97	jsr $97d7			jsr 	CheckDivideZero 			; do div zero check
.9805	20 0f 98	jsr $980f			jsr 	Int32Divide 				; do the division
.9808	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.980b	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.980e	60		rts				rts
.980f					Int32Divide:
.980f	48		pha				pha 								; save AXY
.9810	5a		phy				phy
.9811	20 af 91	jsr $91af			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9814	20 d4 91	jsr $91d4			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9817	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9819					_I32DivideLoop:
.9819	e8		inx				inx
.981a	e8		inx				inx
.981b	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.981e	ca		dex				dex
.981f	ca		dex				dex
.9820	20 ee 91	jsr $91ee			jsr 	NSMRotateLeft
.9823	20 4f 98	jsr $984f			jsr 	DivideCheckSubtract 		; check if subtract possible
.9826	90 03		bcc $982b			bcc 	_I32DivideNoCarryIn
.9828	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.982b					_I32DivideNoCarryIn:
.982b	88		dey				dey 								; loop round till division completed.
.982c	d0 eb		bne $9819			bne 	_I32DivideLoop
.982e	7a		ply				ply 								; restore AXY and exit
.982f	68		pla				pla
.9830	60		rts				rts
.9831					Int32ShiftDivide:
.9831	48		pha				pha 								; save AY
.9832	5a		phy				phy
.9833	e8		inx				inx 								; clear S[X+2]
.9834	e8		inx				inx
.9835	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.9838	ca		dex				dex
.9839	ca		dex				dex
.983a	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.983c					_I32SDLoop:
.983c	20 4f 98	jsr $984f			jsr 	DivideCheckSubtract 		; check if subtract possible
.983f	e8		inx				inx
.9840	e8		inx				inx
.9841	20 ee 91	jsr $91ee			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9844	ca		dex				dex
.9845	ca		dex				dex
.9846	20 ee 91	jsr $91ee			jsr 	NSMRotateLeft
.9849	88		dey				dey 	 							; do 31 times
.984a	d0 f0		bne $983c			bne 	_I32SDLoop
.984c	7a		ply				ply 								; restore AY and exit
.984d	68		pla				pla
.984e	60		rts				rts
.984f					DivideCheckSubtract:
.984f	20 a0 88	jsr $88a0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9852	b0 04		bcs $9858			bcs 	_DCSExit 					; if carry set, then could do, exit
.9854	20 7a 88	jsr $887a			jsr 	AddTopTwoStack 				; add it back in
.9857	18		clc				clc 								; and return False
.9858					_DCSExit:
.9858	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9859					MulInteger:
.9859	fa		plx				plx
.985a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.985d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9860	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9861	0a		asl a				asl 	a
.9862	10 05		bpl $9869			bpl 	_NotRef
.9864	48		pha				pha
.9865	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9868	68		pla				pla
.9869					_NotRef:
.9869	0a		asl a				asl 	a 							; put MSB of type into A:7
.986a	30 0b		bmi $9877			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.986c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.986f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9872	f0 06		beq $987a			beq 	_IntegerCode 				; if clear, then we have two integers
.9874	4c ad 9a	jmp $9aad			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9877					_StringData:
.9877	4c 62 9c	jmp $9c62			jmp 	NotDoneError							; at least one string - don't know both are strings.
.987a					_IntegerCode:
.987a	20 87 98	jsr $9887			jsr 	MultiplyShort
.987d	c9 00		cmp #$00			cmp 	#0
.987f	f0 05		beq $9886			beq 	_MIExit
.9881	a9 04		lda #$04		lda	#4
.9883	4c 85 86	jmp $8685		jmp	ErrorHandler
.9886					_MIExit:
.9886	60		rts				rts
.9887					MultiplyShort:
.9887	5a		phy				phy 								; save Y
.9888	20 af 91	jsr $91af			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.988b	20 d4 91	jsr $91d4			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.988e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9890					_I32MLoop:
.9890	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9893	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9896	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9899	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.989c	f0 28		beq $98c6			beq 	_I32MExit 					; exit if zero
.989e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.98a1	29 01		and #$01			and 	#1
.98a3	f0 0e		beq $98b3			beq 	_I32MNoAdd
.98a5	20 7a 88	jsr $887a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.98a8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.98ab	10 06		bpl $98b3			bpl 	_I32MNoAdd
.98ad					_I32ShiftRight:
.98ad	20 fb 91	jsr $91fb			jsr 	NSMShiftRight 				; shift S[X] right
.98b0	c8		iny				iny 								; increment shift count
.98b1	80 0a		bra $98bd			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.98b3					_I32MNoAdd:
.98b3	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.98b6	70 f5		bvs $98ad			bvs 	_I32ShiftRight 				; instead.
.98b8	e8		inx				inx
.98b9	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.98bc	ca		dex				dex
.98bd					_I32MShiftUpper:
.98bd	e8		inx				inx 								; shift S[X+2] right
.98be	e8		inx				inx
.98bf	20 fb 91	jsr $91fb			jsr 	NSMShiftRight
.98c2	ca		dex				dex
.98c3	ca		dex				dex
.98c4	80 ca		bra $9890			bra 	_I32MLoop 					; try again.
.98c6					_I32MExit:
.98c6	20 cc 98	jsr $98cc			jsr 	CalculateSign
.98c9	98		tya				tya 								; shift in A
.98ca	7a		ply				ply 								; restore Y and exit
.98cb	60		rts				rts
.98cc					CalculateSign:
.98cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.98cf	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.98d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.98d5	0a		asl a				asl 	a 							; shift bit 7 into carry
.98d6	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.98d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.87f6					CompareStrings:
.87f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.87f9	3d 01 06	and $0601,x			and 	NSStatus+1,x
.87fc	29 10		and #$10			and 	#NSBIsString
.87fe	f0 2c		beq $882c			beq 	_CSTypeError
.8800	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8803	85 36		sta $36				sta 	zTemp0
.8805	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8808	85 37		sta $37				sta 	zTemp0+1
.880a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.880d	85 38		sta $38				sta 	zTemp1
.880f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8812	85 39		sta $39				sta 	zTemp1+1
.8814	5a		phy				phy 								; save Y so we can access strings
.8815	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8817					_CSLoop:
.8817	c8		iny				iny
.8818	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.881a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.881c	d0 06		bne $8824			bne 	_CSDifferent
.881e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8820	d0 f5		bne $8817			bne 	_CSLoop 					; still comparing
.8822					_CSExit:
.8822	7a		ply				ply 								; reached end, return zero in A from EOS
.8823	60		rts				rts
.8824					_CSDifferent:
.8824	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8826	90 fa		bcc $8822			bcc		_CSExit
.8828	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.882a	80 f6		bra $8822			bra 	_CSExit
.882c					_CSTypeError:
.882c	4c 58 9c	jmp $9c58			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.882f					ShiftLeft:
.882f	38		sec				sec
.8830	80 01		bra $8833			bra 	ShiftMain
.8832					ShiftRight:
.8832	18		clc				clc
.8833					ShiftMain:
.8833	fa		plx				plx 								; restore X
.8834	08		php				php 								; save direction
.8835	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8838	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.883b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.883c	0a		asl a				asl 	a
.883d	10 05		bpl $8844			bpl 	_NotRef
.883f	48		pha				pha
.8840	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8843	68		pla				pla
.8844					_NotRef:
.8844	0a		asl a				asl 	a
.8845	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8847	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.884a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.884d	f0 03		beq $8852			beq 	_IntegerCode 				; if clear, then we have two integers
.884f	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.8852					_IntegerCode:
.8852	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8855	29 e0		and #$e0			and 	#$E0
.8857	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.885a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.885d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8860	d0 13		bne $8875			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8862					_SMLoop:
.8862	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8865	30 11		bmi $8878			bmi 	_SMExit 					; exit if done.
.8867	28		plp				plp 								; restore direcition setting
.8868	08		php				php
.8869	90 05		bcc $8870			bcc 	_SMRight
.886b	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; shift left if CS
.886e	80 f2		bra $8862			bra 	_SMLoop
.8870					_SMRight:
.8870	20 fb 91	jsr $91fb			jsr 	NSMShiftRight 				; shift right if CC
.8873	80 ed		bra $8862			bra 	_SMLoop
.8875					_SMExit0:
.8875	20 d8 91	jsr $91d8			jsr 	NSMSetZero 					; return zero.
.8878					_SMExit:
.8878	28		plp				plp 								; throw direction
.8879	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.887a					AddTopTwoStack:
.887a	18		clc				clc
.887b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.887e	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8881	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8884	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8887	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.888a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.888d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8890	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8893	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8896	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8899	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.889c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.889f	60		rts				rts
.88a0					SubTopTwoStack:
.88a0	38		sec				sec
.88a1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88a4	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.88a7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88aa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88ad	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.88b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88b3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.88b6	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.88b9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88bc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.88bf	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.88c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88c5	60		rts				rts
.88c6					AddInteger:
.88c6	fa		plx				plx
.88c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88ce	0a		asl a				asl 	a
.88cf	10 05		bpl $88d6			bpl 	_NotRef
.88d1	48		pha				pha
.88d2	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88d5	68		pla				pla
.88d6					_NotRef:
.88d6	0a		asl a				asl 	a 							; put MSB of type into A:7
.88d7	30 0b		bmi $88e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.88d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88df	f0 06		beq $88e7			beq 	_IntegerCode 				; if clear, then we have two integers
.88e1	4c 35 99	jmp $9935			jmp 	FloatingPointAdd 							; otherwise at least one float.
.88e4					_StringData:
.88e4	4c 99 87	jmp $8799			jmp 	StringConcat							; at least one string - don't know both are strings.
.88e7					_IntegerCode:
.88e7					AddCode:
.88e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.88ea	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.88ed	10 8b		bpl $887a			bpl 	AddTopTwoStack
.88ef	20 a0 88	jsr $88a0			jsr 	SubTopTwoStack 				; do a physical subtraction
.88f2	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.88f5	10 09		bpl $8900			bpl 	_AddExit
.88f7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.88fa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88fd	20 8d 91	jsr $918d			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8900					_AddExit:
.8900	60		rts				rts
.8901					SubInteger:
.8901	fa		plx				plx
.8902	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8905	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8908	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8909	0a		asl a				asl 	a
.890a	10 05		bpl $8911			bpl 	_NotRef
.890c	48		pha				pha
.890d	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8910	68		pla				pla
.8911					_NotRef:
.8911	0a		asl a				asl 	a 							; put MSB of type into A:7
.8912	30 0b		bmi $891f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8914	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8917	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.891a	f0 06		beq $8922			beq 	_IntegerCode 				; if clear, then we have two integers
.891c	4c 3a 99	jmp $993a			jmp 	FloatingPointSub 							; otherwise at least one float.
.891f					_StringData:
.891f	4c 62 9c	jmp $9c62			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8922					_IntegerCode:
.8922	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8925	49 80		eor #$80			eor 	#$80
.8927	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.892a	80 bb		bra $88e7			bra 	AddCode 					; and do the same code as add.
.892c					AndInteger:
.892c	fa		plx				plx
.892d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8930	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8933	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8934	0a		asl a				asl 	a
.8935	10 05		bpl $893c			bpl 	_NotRef
.8937	48		pha				pha
.8938	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.893b	68		pla				pla
.893c					_NotRef:
.893c	0a		asl a				asl 	a
.893d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.893f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8942	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8945	f0 03		beq $894a			beq 	_IntegerCode 				; if clear, then we have two integers
.8947	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.894a					_IntegerCode:
.894a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.894d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8950	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8953	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8956	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8959	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.895c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.895f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8962	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8965	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8968	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.896b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.896e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8971	60		rts				rts
.8972					OraInteger:
.8972	fa		plx				plx
.8973	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8976	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8979	0a		asl a				asl 	a 							; shift reference bit into sign bit
.897a	0a		asl a				asl 	a
.897b	10 05		bpl $8982			bpl 	_NotRef
.897d	48		pha				pha
.897e	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8981	68		pla				pla
.8982					_NotRef:
.8982	0a		asl a				asl 	a
.8983	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8985	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8988	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.898b	f0 03		beq $8990			beq 	_IntegerCode 				; if clear, then we have two integers
.898d	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.8990					_IntegerCode:
.8990	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8993	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8996	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8999	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.899c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.899f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89a2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.89a5	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.89a8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89ab	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.89ae	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.89b1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89b4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.89b7	60		rts				rts
.89b8					EorInteger:
.89b8	fa		plx				plx
.89b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.89bc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.89bf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.89c0	0a		asl a				asl 	a
.89c1	10 05		bpl $89c8			bpl 	_NotRef
.89c3	48		pha				pha
.89c4	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.89c7	68		pla				pla
.89c8					_NotRef:
.89c8	0a		asl a				asl 	a
.89c9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.89cb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.89ce	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.89d1	f0 03		beq $89d6			beq 	_IntegerCode 				; if clear, then we have two integers
.89d3	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.89d6					_IntegerCode:
.89d6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.89d9	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.89dc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89df	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.89e2	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.89e5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89e8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.89eb	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.89ee	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89f1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.89f4	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.89f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89fa	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.89fd	60		rts				rts
.89fe					WordIndirect:
.89fe	fa		plx				plx
.89ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a02	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a05	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a06	0a		asl a				asl 	a
.8a07	10 05		bpl $8a0e			bpl 	_NotRef
.8a09	48		pha				pha
.8a0a	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a0d	68		pla				pla
.8a0e					_NotRef:
.8a0e	0a		asl a				asl 	a
.8a0f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8a11	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a14	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a17	f0 03		beq $8a1c			beq 	_IntegerCode 				; if clear, then we have two integers
.8a19	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.8a1c					_IntegerCode:
.8a1c	20 e7 88	jsr $88e7			jsr 	AddCode 					; add the two values
.8a1f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8a21	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a24	60		rts				rts
.8a25					ByteIndirect:
.8a25	fa		plx				plx
.8a26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a29	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a2c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a2d	0a		asl a				asl 	a
.8a2e	10 05		bpl $8a35			bpl 	_NotRef
.8a30	48		pha				pha
.8a31	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a34	68		pla				pla
.8a35					_NotRef:
.8a35	0a		asl a				asl 	a
.8a36	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8a38	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a3b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a3e	f0 03		beq $8a43			beq 	_IntegerCode 				; if clear, then we have two integers
.8a40	4c 58 9c	jmp $9c58			jmp 	TypeError 					; anything else, type mismatch.
.8a43					_IntegerCode:
.8a43	20 e7 88	jsr $88e7			jsr 	AddCode 					; add the two values
.8a46	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8a48	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.98da					ConvertInt16:
.98da	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.98dd	8e 10 06	stx $0610			stx 	NSMantissa1
.98e0	9c 18 06	stz $0618			stz 	NSMantissa2
.98e3	9c 20 06	stz $0620			stz 	NSMantissa3
.98e6	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.98e9	a2 00		ldx #$00			ldx 	#0 							; stack level
.98eb	a9 0a		lda #$0a			lda 	#10 						; base
.98ed	80 00		bra $98ef			bra 	ConvertInt32
.98ef					ConvertInt32:
.98ef	5a		phy				phy
.98f0	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.98f2	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.98f5	10 08		bpl $98ff			bpl 	_CI32NotNeg
.98f7	48		pha				pha
.98f8	a9 2d		lda #$2d			lda 	#'-'
.98fa	99 6c 08	sta $086c,y			sta 	NumberBuffer,y
.98fd	c8		iny				iny
.98fe	68		pla				pla
.98ff					_CI32NotNeg:
.98ff	20 0d 99	jsr $990d			jsr 	_CI32DivideConvert 			; recursive conversion
.9902	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9904	99 6c 08	sta $086c,y			sta 	NumberBuffer,y
.9907	7a		ply				ply
.9908	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.990a	a9 6c		lda #$6c			lda 	#NumberBuffer & $FF
.990c	60		rts				rts
.990d					_CI32DivideConvert:
.990d	e8		inx				inx 								; write to next slot up
.990e	20 da 91	jsr $91da			jsr 	NSMSetByte
.9911	ca		dex				dex
.9912	20 0f 98	jsr $980f			jsr 	Int32Divide 				; divide
.9915	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9918	48		pha				pha
.9919	20 be 97	jsr $97be			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.991c	20 08 92	jsr $9208			jsr 	NSMIsZero 					; is it zero ?
.991f	f0 06		beq $9927			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9921	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9924	20 0d 99	jsr $990d			jsr 	_CI32DivideConvert 			; and recusrively call.
.9927					_CI32NoRecurse:
.9927	68		pla				pla 								; remainder
.9928	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.992a	90 02		bcc $992e			bcc 	_CI32NotHex
.992c	69 26		adc #$26			adc 	#6+32
.992e					_CI32NotHex:
.992e	69 30		adc #$30			adc 	#48
.9930	99 6c 08	sta $086c,y			sta 	NumberBuffer,y 				; write out and exit
.9933	c8		iny				iny
.9934	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8a4c					PrecedenceLevel:
>8a4c	04					.byte	 4	; $00 <<
>8a4d	02					.byte	 2	; $01 <=
>8a4e	02					.byte	 2	; $02 <>
>8a4f	00					.byte	 0	; $03 !!3
>8a50	00					.byte	 0	; $04 ><
>8a51	02					.byte	 2	; $05 >=
>8a52	04					.byte	 4	; $06 >>
>8a53	00					.byte	 0	; $07 !!7
>8a54	00					.byte	 0	; $08 !!8
>8a55	00					.byte	 0	; $09 !!9
>8a56	00					.byte	 0	; $0a !!10
>8a57	00					.byte	 0	; $0b !!11
>8a58	00					.byte	 0	; $0c !!12
>8a59	00					.byte	 0	; $0d !!13
>8a5a	00					.byte	 0	; $0e !!14
>8a5b	00					.byte	 0	; $0f !!15
>8a5c	00					.byte	 0	; $10 @
>8a5d	00					.byte	 0	; $11 !!17
>8a5e	00					.byte	 0	; $12 !!18
>8a5f	00					.byte	 0	; $13 [
>8a60	04					.byte	 4	; $14 \
>8a61	00					.byte	 0	; $15 ]
>8a62	01					.byte	 1	; $16 ^
>8a63	00					.byte	 0	; $17 _
>8a64	00					.byte	 0	; $18 `
>8a65	00					.byte	 0	; $19 !!25
>8a66	00					.byte	 0	; $1a !!26
>8a67	00					.byte	 0	; $1b {
>8a68	01					.byte	 1	; $1c |
>8a69	00					.byte	 0	; $1d }
>8a6a	00					.byte	 0	; $1e ~
>8a6b	00					.byte	 0	; $1f [7m<7F>[m
>8a6c	00					.byte	 0	; $20
>8a6d	05					.byte	 5	; $21 !
>8a6e	00					.byte	 0	; $22 "
>8a6f	00					.byte	 0	; $23 #
>8a70	05					.byte	 5	; $24 $
>8a71	04					.byte	 4	; $25 %
>8a72	01					.byte	 1	; $26 &
>8a73	00					.byte	 0	; $27 '
>8a74	00					.byte	 0	; $28 (
>8a75	00					.byte	 0	; $29 )
>8a76	04					.byte	 4	; $2a *
>8a77	03					.byte	 3	; $2b +
>8a78	00					.byte	 0	; $2c ,
>8a79	03					.byte	 3	; $2d -
>8a7a	00					.byte	 0	; $2e .
>8a7b	04					.byte	 4	; $2f /
>8a7c	00					.byte	 0	; $30 0
>8a7d	00					.byte	 0	; $31 1
>8a7e	00					.byte	 0	; $32 2
>8a7f	00					.byte	 0	; $33 3
>8a80	00					.byte	 0	; $34 4
>8a81	00					.byte	 0	; $35 5
>8a82	00					.byte	 0	; $36 6
>8a83	00					.byte	 0	; $37 7
>8a84	00					.byte	 0	; $38 8
>8a85	00					.byte	 0	; $39 9
>8a86	00					.byte	 0	; $3a :
>8a87	00					.byte	 0	; $3b ;
>8a88	02					.byte	 2	; $3c <
>8a89	02					.byte	 2	; $3d =
>8a8a	02					.byte	 2	; $3e >
>8a8b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8a8c					EvaluateExpressionAt0:
.8a8c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8a8e					EvaluateExpression:
.8a8e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8a90					EvaluateExpressionAtPrecedence:
.8a90	48		pha				pha 								; save precedence level
.8a91	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm 				; evaluate term into level X.
.8a94	68		pla				pla 								; restore precedence level.
.8a95					_EXPRLoop:
.8a95	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8a97	b1 30		lda ($30),y			lda 	(codePtr),y
.8a99	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8a9b	b0 25		bcs $8ac2			bcs 	_EXPRExit
.8a9d	da		phx				phx 								; read the operator precedence
.8a9e	aa		tax				tax
.8a9f	bd 4c 8a	lda $8a4c,x			lda 	PrecedenceLevel,x
.8aa2	fa		plx				plx
.8aa3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8aa5	f0 1b		beq $8ac2			beq 	_EXPRExit
.8aa7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8aa9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8aab	c5 37		cmp $37				cmp 	zTemp0+1
.8aad	b0 13		bcs $8ac2			bcs		_EXPRExit 					; if current >= operator exit
.8aaf	48		pha				pha 								; save current precedence.
.8ab0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab2	c8		iny				iny
.8ab3	48		pha				pha
.8ab4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8ab6	e8		inx				inx 								; work out the right hand side.
.8ab7	20 90 8a	jsr $8a90			jsr 	EvaluateExpressionAtPrecedence
.8aba	ca		dex				dex
.8abb	68		pla				pla 								; get operator, call the code.
.8abc	20 c5 8a	jsr $8ac5			jsr 	_EXPRCaller
.8abf	68		pla				pla 								; restore precedence level
.8ac0	80 d3		bra $8a95			bra 	_EXPRLoop 					; and go round.
.8ac2					_EXPRExit:
.8ac2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8ac4	60		rts				rts
.8ac5					_EXPRCaller:
.8ac5	da		phx				phx 								; save on stack, first thing is to restore it
.8ac6	0a		asl a				asl 	a 							; double so can use vectors into X
.8ac7	aa		tax				tax
.8ac8	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9935					FloatingPointAdd:
.9935	20 d6 9a	jsr $9ad6			jsr 	FloatPrepare 				; prepare for floats
.9938	80 0b		bra $9945			bra 	FloatAdd
.993a					FloatingPointSub:
.993a	20 d6 9a	jsr $9ad6			jsr 	FloatPrepare 				; prepare for floats
.993d					FloatSubtract:
.993d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9940	49 80		eor #$80			eor 	#$80
.9942	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9945					FloatAdd:
.9945	48		pha				pha
.9946	5a		phy				phy
.9947	20 e7 9a	jsr $9ae7			jsr 	NSNormalise 				; normalise S[X]
.994a	f0 54		beq $99a0			beq 	_FAReturn1
.994c	e8		inx				inx 								; normalise S[X+1]
.994d	20 e7 9a	jsr $9ae7			jsr 	NSNormalise
.9950	ca		dex				dex
.9951	c9 00		cmp #$00			cmp 	#0
.9953	f0 6f		beq $99c4			beq 	_FAExit 					; if so, just return A
.9955	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9958	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.995b	f0 1b		beq $9978			beq 	_FAExponentsEqual
.995d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9960	a8		tay				tay
.9961	38		sec				sec 								; do a signed comparison of the exponents.
.9962	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9965	50 02		bvc $9969			bvc 	_FANoSignedChange
.9967	49 80		eor #$80			eor 	#$80
.9969					_FANoSignedChange:
.9969	29 80		and #$80			and 	#$80
.996b	10 03		bpl $9970			bpl 	_FAHaveMax
.996d	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9970					_FAHaveMax:
.9970	20 c7 99	jsr $99c7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9973	e8		inx				inx
.9974	20 c7 99	jsr $99c7			jsr 	_FAShiftToExponent
.9977	ca		dex				dex
.9978					_FAExponentsEqual:
.9978	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.997b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.997e	30 10		bmi $9990			bmi 	_FADifferentSigns
.9980	20 7a 88	jsr $887a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9983	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9986	10 3c		bpl $99c4			bpl 	_FAExit 					; if no, we are done.
.9988	20 fb 91	jsr $91fb			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.998b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.998e	80 34		bra $99c4			bra 	_FAExit
.9990					_FADifferentSigns:
.9990	20 a0 88	jsr $88a0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9993	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9996	10 2c		bpl $99c4			bpl 	_FAExit 					; if no, we are done.
.9998	20 84 91	jsr $9184			jsr 	NSMNegate 					; netate result
.999b	20 8d 91	jsr $918d			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.999e	80 24		bra $99c4			bra 	_FAExit
.99a0					_FAReturn1:
.99a0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.99a3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.99a6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.99a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99ac	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.99af	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.99b2	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.99b5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.99b8	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.99bb	9d 28 06	sta $0628,x			sta 	NSExponent,x
.99be	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.99c1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99c4					_FAExit:
.99c4	7a		ply				ply
.99c5	68		pla				pla
.99c6	60		rts				rts
.99c7					_FAShiftToExponent:
.99c7					_FAShiftToExponent2:
.99c7	98		tya				tya 								; compare Y to exponent
.99c8	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.99cb	f0 08		beq $99d5			beq 	_FASEExit 					; exit if so.
.99cd	20 fb 91	jsr $91fb			jsr 	NSMShiftRight	 			; shift the mantissa right
.99d0	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.99d3	80 f2		bra $99c7			bra 	_FAShiftToExponent2
.99d5					_FASEExit:
.99d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.99d6					CompareFloat:
.99d6	20 3d 99	jsr $993d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.99d9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.99dc	29 f8		and #$f8			and 	#$F8
.99de	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.99e1	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.99e4	f0 09		beq $99ef			beq 	_FCExit 					; zero, so approximately identical
.99e6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.99e8	3c 00 06	bit $0600,x			bit 	NSStatus,x
.99eb	10 02		bpl $99ef			bpl 	_FCExit
.99ed					_FCNegative:
.99ed	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.99ef					_FCExit:
.99ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.99f0					FDivideCommand:
.99f0	fa		plx				plx	 								; restore stack position
.99f1	20 d6 9a	jsr $9ad6			jsr 	FloatPrepare 				; prepare for floats
.99f4					FloatDivide:
.99f4	48		pha				pha
.99f5	e8		inx				inx
.99f6	20 e7 9a	jsr $9ae7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.99f9	ca		dex				dex
.99fa	c9 00		cmp #$00			cmp 	#0
.99fc	f0 20		beq $9a1e			beq 	_FDZero
.99fe	20 e7 9a	jsr $9ae7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a01	f0 19		beq $9a1c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9a03	20 31 98	jsr $9831			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9a06	20 be 97	jsr $97be			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9a09	20 e7 9a	jsr $9ae7			jsr		NSNormalise 				; renormalise
.9a0c	20 cc 98	jsr $98cc			jsr 	CalculateSign 				; calculate result sign
.9a0f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9a12	38		sec				sec
.9a13	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9a16	38		sec				sec
.9a17	e9 1e		sbc #$1e			sbc 	#30
.9a19	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9a1c					_FDExit:
.9a1c	68		pla				pla
.9a1d	60		rts				rts
.9a1e					_FDZero:
.9a1e	a9 03		lda #$03		lda	#3
.9a20	4c 85 86	jmp $8685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9a23					FloatFractionalPart:
.9a23	5a		phy				phy
.9a24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9a27	29 7f		and #$7f			and 	#$7F
.9a29	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a2c	20 e7 9a	jsr $9ae7			jsr 	NSNormalise
.9a2f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9a32	38		sec				sec
.9a33	e9 e0		sbc #$e0			sbc 	#$E0
.9a35	90 31		bcc $9a68			bcc 	_FFPExit 					; already fractional
.9a37	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9a39	b0 2a		bcs $9a65			bcs 	_FFPZero
.9a3b	a8		tay				tay 								; put count to do in Y
.9a3c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9a3f	20 6a 9a	jsr $9a6a			jsr 	_FFPPartial
.9a42	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9a45	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9a48	20 6a 9a	jsr $9a6a			jsr 	_FFPPartial
.9a4b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9a4e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9a51	20 6a 9a	jsr $9a6a			jsr 	_FFPPartial
.9a54	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a57	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9a5a	20 6a 9a	jsr $9a6a			jsr 	_FFPPartial
.9a5d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9a60	20 08 92	jsr $9208			jsr 	NSMIsZero 					; zeroed check.
.9a63	d0 03		bne $9a68			bne 	_FFPExit
.9a65					_FFPZero:
.9a65	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.9a68					_FFPExit:
.9a68	7a		ply				ply
.9a69	60		rts				rts
.9a6a					_FFPPartial:
.9a6a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9a6c	f0 17		beq $9a85			beq 	_FFFPPExit
.9a6e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9a70	b0 0c		bcs $9a7e			bcs 	_FFFPPWholeByte
.9a72	5a		phy				phy
.9a73					_FFFPPLeft:
.9a73	0a		asl a				asl 	a
.9a74	88		dey				dey
.9a75	d0 fc		bne $9a73			bne 	_FFFPPLeft
.9a77	7a		ply				ply
.9a78					_FFFPPRight:
.9a78	4a		lsr a				lsr 	a
.9a79	88		dey				dey
.9a7a	d0 fc		bne $9a78			bne 	_FFFPPRight
.9a7c	80 07		bra $9a85			bra 	_FFFPPExit
.9a7e					_FFFPPWholeByte:
.9a7e	98		tya				tya 								; subtract 8 from count
.9a7f	38		sec				sec
.9a80	e9 08		sbc #$08			sbc 	#8
.9a82	a8		tay				tay
.9a83	a9 00		lda #$00			lda 	#0 							; and clear all
.9a85					_FFFPPExit:
.9a85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a86					FloatIntegerPart:
.9a86	48		pha				pha
.9a87	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9a8a	f0 1f		beq $9aab			beq 	_FIPExit 					; if so do nothing
.9a8c	20 08 92	jsr $9208			jsr 	NSMIsZero 					; is it zero ?
.9a8f	f0 17		beq $9aa8			beq 	_FIPZero 					; if so return zero.
.9a91	20 e7 9a	jsr $9ae7			jsr 	NSNormalise 				; normalise
.9a94	f0 12		beq $9aa8			beq 	_FIPZero 					; normalised to zero, exit zero
.9a96					_FIPShift:
.9a96	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a99	10 08		bpl $9aa3			bpl 	_FIPCheckZero
.9a9b	20 fb 91	jsr $91fb			jsr 	NSMShiftRight 				; shift mantissa right
.9a9e	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9aa1	80 f3		bra $9a96			bra 	_FIPShift
.9aa3					_FIPCheckZero:
.9aa3	20 08 92	jsr $9208			jsr 	NSMIsZero 					; avoid -0 problem
.9aa6	d0 03		bne $9aab			bne 	_FIPExit 					; set to zero if mantissa zero.
.9aa8					_FIPZero:
.9aa8	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.9aab					_FIPExit:
.9aab	68		pla				pla
.9aac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9aad					FloatingPointMultiply:
.9aad	20 d6 9a	jsr $9ad6			jsr 	FloatPrepare 				; prepare for floats
.9ab0					FloatMultiply:
.9ab0	48		pha				pha
.9ab1	20 e7 9a	jsr $9ae7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9ab4	f0 1b		beq $9ad1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9ab6	e8		inx				inx
.9ab7	20 e7 9a	jsr $9ae7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9aba	ca		dex				dex
.9abb	c9 00		cmp #$00			cmp 	#0
.9abd	f0 0f		beq $9ace			beq 	_FDSetZero
.9abf	20 87 98	jsr $9887			jsr 	MultiplyShort 				; calculate the result.
.9ac2	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9ac5	18		clc				clc
.9ac6	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9ac9	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9acc	80 03		bra $9ad1			bra 	_FDExit
.9ace					_FDSetZero:
.9ace	20 d8 91	jsr $91d8			jsr 	NSMSetZero 					; return 0
.9ad1					_FDExit:
.9ad1	20 e7 9a	jsr $9ae7			jsr 	NSNormalise 				; normalise the result
.9ad4	68		pla				pla
.9ad5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9ad6					FloatPrepare:
.9ad6	20 9e 8b	jsr $8b9e			jsr 	DereferenceTopTwo 			; dereference the top two values
.9ad9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9adc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9adf	29 10		and #$10			and 	#NSBIsString
.9ae1	d0 01		bne $9ae4			bne 	_FDType
.9ae3	60		rts				rts
.9ae4					_FDType:
.9ae4	4c 58 9c	jmp $9c58			jmp 	TypeError
.9ae7					NSNormalise:
.9ae7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9aea	29 80		and #$80			and 	#$80
.9aec	09 08		ora #$08			ora 	#NSTFloat
.9aee	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9af1	20 08 92	jsr $9208			jsr 	NSMIsZero 					; if zero exit
.9af4	d0 09		bne $9aff			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9af6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9af9	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9afc	a9 00		lda #$00			lda 	#0 							; set Z flag
.9afe	60		rts				rts
.9aff					_NSNormaliseOptimise:
.9aff	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9b02	d0 22		bne $9b26			bne 	_NSNormaliseLoop
.9b04	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9b07	30 1d		bmi $9b26			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9b09	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9b0c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9b0f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9b12	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9b15	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b18	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9b1b	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9b1e	38		sec				sec
.9b1f	e9 08		sbc #$08			sbc 	#8
.9b21	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9b24	80 d9		bra $9aff			bra 	_NSNormaliseOptimise
.9b26					_NSNormaliseLoop:
.9b26	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9b29	70 08		bvs $9b33			bvs 	_NSNExit 					; exit if so with Z flag clear
.9b2b	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; shift mantissa left
.9b2e	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9b31	80 f3		bra $9b26			bra 	_NSNormaliseLoop
.9b33					_NSNExit:
.9b33	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9b35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8acb					AssignNumber:
.8acb	5a		phy				phy
.8acc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8acf	85 36		sta $36				sta 	zTemp0
.8ad1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ad4	85 37		sta $37				sta 	zTemp0+1
.8ad6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8ad9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8adb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ade	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8ae0	c9 08		cmp #$08			cmp 	#NSTFloat
.8ae2	f0 2a		beq $8b0e			beq 	_ANFloat
.8ae4	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8ae7	f0 05		beq $8aee			beq		_ANNotFloat
.8ae9	e8		inx				inx
.8aea	20 86 9a	jsr $9a86			jsr 	FloatIntegerPart 			; make it an integer
.8aed	ca		dex				dex
.8aee					_ANNotFloat:
.8aee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8af1	29 03		and #$03			and 	#3
.8af3	d0 05		bne $8afa			bne 	_ANByteWord
.8af5	20 1a 8b	jsr $8b1a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8af8	80 1e		bra $8b18			bra 	_ANExit
.8afa					_ANByteWord:
.8afa	48		pha				pha 								; save count
.8afb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8afe	92 36		sta ($36)			sta 	(zTemp0)
.8b00	68		pla				pla
.8b01	c9 01		cmp #$01			cmp	 	#1
.8b03	f0 13		beq $8b18			beq 	_ANExit
.8b05	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8b08	a0 01		ldy #$01			ldy 	#1
.8b0a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b0c	80 0a		bra $8b18			bra 	_ANExit
.8b0e					_ANFloat:
.8b0e	20 1a 8b	jsr $8b1a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8b11	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8b14	a0 04		ldy #$04			ldy 	#4
.8b16	91 36		sta ($36),y			sta 	(zTemp0),y
.8b18					_ANExit:
.8b18	7a		ply				ply
.8b19	60		rts				rts
.8b1a					_ANCopy4PackSign:
.8b1a	a0 03		ldy #$03			ldy 	#3
.8b1c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8b1f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8b21	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8b24	91 36		sta ($36),y			sta 	(zTemp0),y
.8b26	88		dey				dey
.8b27	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8b2a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b2c	88		dey				dey
.8b2d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8b30	91 36		sta ($36),y			sta 	(zTemp0),y
.8b32	88		dey				dey
.8b33	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8b36	91 36		sta ($36),y			sta 	(zTemp0),y
.8b38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8b39					AssignString:
.8b39	5a		phy				phy
.8b3a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8b3d	85 38		sta $38				sta 	zTemp1
.8b3f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8b42	85 39		sta $39				sta 	zTemp1+1
.8b44	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b47	85 36		sta $36				sta 	zTemp0
.8b49	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b4c	85 37		sta $37				sta 	zTemp0+1
.8b4e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8b50	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b52	f0 23		beq $8b77			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8b54	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8b55	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8b57	e9 02		sbc #$02			sbc 	#2
.8b59	85 3c		sta $3c				sta 	zsTemp
.8b5b	a0 01		ldy #$01			ldy 	#1
.8b5d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b5f	e9 00		sbc #$00			sbc 	#0
.8b61	85 3d		sta $3d				sta 	zsTemp+1
.8b63	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8b65					_ASGetLength:
.8b65	c8		iny				iny
.8b66	b1 38		lda ($38),y			lda 	(zTemp1),y
.8b68	d0 fb		bne $8b65			bne 	_ASGetLength
.8b6a	98		tya				tya 								; is this length <= current length
.8b6b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8b6d	90 20		bcc $8b8f			bcc 	_ASCopyString
.8b6f	f0 1e		beq $8b8f			beq 	_ASCopyString
.8b71	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8b73	a0 01		ldy #$01			ldy 	#1
.8b75	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8b77					_ASNewStringRequired:
.8b77	e8		inx				inx 								; concrete the new string.
.8b78	20 cd 9d	jsr $9dcd			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8b7b	ca		dex				dex
.8b7c	18		clc				clc
.8b7d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8b80	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8b82	92 36		sta ($36)			sta 	(zTemp0)
.8b84	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8b87	69 00		adc #$00			adc 	#0
.8b89	a0 01		ldy #$01			ldy 	#1
.8b8b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8d	80 0d		bra $8b9c			bra 	_ASExit
.8b8f					_ASCopyString:
.8b8f	a0 00		ldy #$00			ldy 	#0
.8b91					_ASCopyLoop:
.8b91	b1 38		lda ($38),y			lda 	(zTemp1),y
.8b93	c8		iny				iny
.8b94	c8		iny				iny
.8b95	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8b97	88		dey				dey
.8b98	c9 00		cmp #$00			cmp 	#0
.8b9a	d0 f5		bne $8b91			bne 	_ASCopyLoop
.8b9c					_ASExit:
.8b9c	7a		ply				ply
.8b9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8b9e					DereferenceTopTwo:
.8b9e	e8		inx				inx
.8b9f	20 a3 8b	jsr $8ba3			jsr 	Dereference 				; deref x+1
.8ba2	ca		dex				dex  								; falls through to deref x
.8ba3					Dereference:
.8ba3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8ba6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8ba8	f0 57		beq $8c01			beq 	_DRFExit 					; not a reference
.8baa	5a		phy				phy
.8bab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8bae	85 36		sta $36				sta 	zTemp0
.8bb0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bb3	85 37		sta $37				sta 	zTemp0+1
.8bb5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8bb8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8bba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bbd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8bc0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8bc2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8bc4	f0 0f		beq $8bd5			beq 	_DRFDereferenceTwo
.8bc6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8bc8	f0 39		beq $8c03			beq 	_DRFFull
.8bca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8bcd	29 03		and #$03			and 	#3
.8bcf	f0 32		beq $8c03			beq 	_DRFFull 					; the whole word
.8bd1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8bd3	f0 07		beq $8bdc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8bd5					_DRFDereferenceTwo:
.8bd5	a0 01		ldy #$01			ldy 	#1
.8bd7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bdc					_DRFClear23:
.8bdc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8bdf	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8be2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8be5	29 18		and #$18			and 	#NSBTypeMask
.8be7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bea	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8bec	d0 12		bne $8c00			bne 	_DRFNotString
.8bee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8bf1	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8bf4	d0 0a		bne $8c00			bne 	_DRFNotString
.8bf6	a9 02		lda #$02			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8bf8	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8bfb	a9 8c		lda #$8c			lda 	#_DRFNullString >> 8
.8bfd	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8c00					_DRFNotString
.8c00	7a		ply				ply 								; restore Y and exit
.8c01					_DRFExit:
.8c01	60		rts				rts
.8c02					_DRFNullString:
>8c02	00						.byte 	0
.8c03					_DRFFull:
.8c03	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8c05	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c07	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c0a	c8		iny				iny
.8c0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c0d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c10	c8		iny				iny
.8c11	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c13	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c16	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8c19	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8c1c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8c1e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8c21	f0 06		beq $8c29			beq 	_DRFNoExponent
.8c23	c8		iny				iny 								; if not, read the exponent as well.
.8c24	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c26	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c29					_DRFNoExponent:
.8c29	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8c2c	10 0d		bpl $8c3b			bpl 	_DRFExit2 					; if not, then exit.
.8c2e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8c30	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c33	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8c36	09 80		ora #$80			ora 	#NSBIsNegative
.8c38	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c3b					_DRFExit2:
.8c3b	7a		ply				ply
.8c3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8c3d					EncodeNumberStart:
.8c3d	38		sec				sec
.8c3e	80 01		bra $8c41			bra 	EncodeNumberContinue+1
.8c40					EncodeNumberContinue:
.8c40	18		clc				clc
.8c41					EncodeNumber:
.8c41	08		php				php 								; save reset.
.8c42	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8c44	f0 12		beq $8c58			beq 	_ENIsOkay
.8c46	c9 30		cmp #$30			cmp 	#"0"
.8c48	90 04		bcc $8c4e			bcc 	_ENBadNumber
.8c4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c4c	90 0a		bcc $8c58			bcc 	_ENIsOkay
.8c4e					_ENBadNumber:
.8c4e	28		plp				plp 								; throw saved reset
.8c4f	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8c52	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8c54	f0 7e		beq $8cd4			beq 	_ENConstructFinal
.8c56					_ENFail:
.8c56	18		clc				clc 								; not allowed
.8c57	60		rts				rts
.8c58					_ENIsOkay:
.8c58	28		plp				plp 								; are we restarting
.8c59	90 15		bcc $8c70			bcc 	_ENNoRestart
.8c5b					_ENStartEncode:
.8c5b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8c5d	f0 0c		beq $8c6b			beq 	_ENFirstDP
.8c5f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8c61	20 da 91	jsr $91da			jsr 	NSMSetByte
.8c64	a9 01		lda #$01			lda 	#ESTA_Low
.8c66					_ENExitChange:
.8c66	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8c69	38		sec				sec
.8c6a	60		rts				rts
.8c6b					_ENFirstDP:
.8c6b	20 d8 91	jsr $91d8			jsr 	NSMSetZero 					; clear integer part
.8c6e	80 3f		bra $8caf			bra 	_ESTASwitchFloat			; go straight to float and exi
.8c70					_ENNoRestart:
.8c70	48		pha				pha 								; save on stack.
.8c71	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8c74	c9 01		cmp #$01			cmp 	#ESTA_Low
.8c76	f0 09		beq $8c81			beq  	_ESTALowState
.8c78	c9 02		cmp #$02			cmp 	#ESTA_High
.8c7a	f0 29		beq $8ca5			beq 	_ESTAHighState
.8c7c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8c7e	f0 3b		beq $8cbb			beq 	_ESTADecimalState
>8c80	db						.byte 	$DB 						; causes a break in the emulator
.8c81					_ESTALowState:
.8c81	68		pla				pla 								; get value back
.8c82	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8c84	f0 29		beq $8caf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8c86	29 0f		and #$0f			and 	#15 						; make digit
.8c88	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8c8b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8c8e	0a		asl a				asl 	a
.8c8f	0a		asl a				asl 	a
.8c90	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8c93	0a		asl a				asl 	a
.8c94	6d 06 07	adc $0706			adc 	DigitTemp
.8c97	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c9a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8c9c	90 05		bcc $8ca3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8c9e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8ca0	8d 05 07	sta $0705			sta 	EncodeState
.8ca3					_ESTANoSwitch:
.8ca3	38		sec				sec
.8ca4	60		rts				rts
.8ca5					_ESTAHighState:
.8ca5	68		pla				pla 								; get value back
.8ca6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8ca8	f0 05		beq $8caf			beq 	_ESTASwitchFloat
.8caa	20 0e 8d	jsr $8d0e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8cad	38		sec				sec
.8cae	60		rts				rts
.8caf					_ESTASwitchFloat:
.8caf	9c 07 07	stz $0707			stz 	DecimalCount
.8cb2	e8		inx				inx 								; zero the decimal additive.
.8cb3	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.8cb6	ca		dex				dex
.8cb7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8cb9	80 ab		bra $8c66			bra 	_ENExitChange
.8cbb					_ESTADecimalState:
.8cbb	68		pla				pla 								; digit.
.8cbc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8cbe	f0 96		beq $8c56			beq 	_ENFail
.8cc0	e8		inx				inx 								; put digit into fractional part of X+1
.8cc1	20 0e 8d	jsr $8d0e			jsr 	ESTAShiftDigitIntoMantissa
.8cc4	ca		dex				dex
.8cc5	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8cc8	ad 07 07	lda $0707			lda 	DecimalCount
.8ccb	c9 0b		cmp #$0b			cmp 	#11
.8ccd	f0 02		beq $8cd1			beq 	_ESTADSFail
.8ccf	38		sec				sec
.8cd0	60		rts				rts
.8cd1					_ESTADSFail:
.8cd1	4c 53 9c	jmp $9c53			jmp 	RangeError
.8cd4					_ENConstructFinal:
.8cd4	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8cd7	f0 33		beq $8d0c			beq 	_ENCFExit 					; no decimals
.8cd9	5a		phy				phy
.8cda	0a		asl a				asl 	a 							; x 4 and CLC
.8cdb	0a		asl a				asl 	a
.8cdc	6d 07 07	adc $0707			adc 	DecimalCount
.8cdf	a8		tay				tay
.8ce0	b9 12 9c	lda $9c12,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8ce3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ce6	b9 13 9c	lda $9c13,y			lda 	DecimalScalarTable-5+1,y
.8ce9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8cec	b9 14 9c	lda $9c14,y			lda 	DecimalScalarTable-5+2,y
.8cef	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8cf2	b9 15 9c	lda $9c15,y			lda 	DecimalScalarTable-5+3,y
.8cf5	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8cf8	b9 16 9c	lda $9c16,y			lda 	DecimalScalarTable-5+4,y
.8cfb	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8cfe	a9 08		lda #$08			lda 	#NSTFloat
.8d00	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d03	7a		ply				ply
.8d04	e8		inx				inx 								; multiply decimal const by decimal scalar
.8d05	20 b0 9a	jsr $9ab0			jsr 	FloatMultiply
.8d08	ca		dex				dex
.8d09	20 45 99	jsr $9945			jsr 	FloatAdd 					; add to integer part.
.8d0c					_ENCFExit:
.8d0c	18		clc				clc 								; reject the digit.
.8d0d	60		rts				rts
.8d0e					ESTAShiftDigitIntoMantissa:
.8d0e	29 0f		and #$0f			and 	#15 						; save digit
.8d10	48		pha				pha
.8d11	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8d14	48		pha				pha
.8d15	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8d18	48		pha				pha
.8d19	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d1c	48		pha				pha
.8d1d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d20	48		pha				pha
.8d21	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 2
.8d24	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 4
.8d27	18		clc				clc 								; pop mantissa and add
.8d28	68		pla				pla
.8d29	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8d2c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d2f	68		pla				pla
.8d30	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8d33	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d36	68		pla				pla
.8d37	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8d3a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d3d	68		pla				pla
.8d3e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8d41	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8d44	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 10
.8d47	68		pla				pla 								; add digit
.8d48	18		clc				clc
.8d49	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8d4c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d4f	90 0d		bcc $8d5e			bcc 	_ESTASDExit
.8d51	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8d54	d0 08		bne $8d5e			bne 	_ESTASDExit
.8d56	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8d59	d0 03		bne $8d5e			bne 	_ESTASDExit
.8d5b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8d5e					_ESTASDExit:
.8d5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8d5f					EvaluateTerm:
.8d5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8d61	30 18		bmi $8d7b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8d63	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8d65	b0 6f		bcs $8dd6			bcs 	_ETVariable
.8d67	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8d69	90 6e		bcc $8dd9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8d6b	c9 3a		cmp #$3a			cmp 	#'9'+1
.8d6d	b0 6a		bcs $8dd9			bcs 	_ETPuncUnary
.8d6f	20 3d 8c	jsr $8c3d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8d72					_ETNumber:
.8d72	c8		iny				iny 								; keep encoding until we have the numbers
.8d73	b1 30		lda ($30),y			lda 	(codePtr),y
.8d75	20 40 8c	jsr $8c40			jsr 	EncodeNumberContinue
.8d78	b0 f8		bcs $8d72			bcs 	_ETNumber 					; go back if accepted.
.8d7a	60		rts				rts
.8d7b					_ETCheckUnary:
.8d7b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8d7d	f0 41		beq $8dc0			beq 	_ETString
.8d7f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8d81	f0 12		beq $8d95			beq 	_ETHexConstant
.8d83	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8d85	90 0b		bcc $8d92			bcc 	_ETSyntaxError
.8d87	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8d89	b0 07		bcs $8d92			bcs 	_ETSyntaxError
.8d8b	da		phx				phx 								; push X on the stack
.8d8c	0a		asl a				asl 	a 							; put vector x 2 into X
.8d8d	aa		tax				tax
.8d8e	c8		iny				iny 								; consume unary function token
.8d8f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8d92					_ETSyntaxError:
.8d92	4c 4e 9c	jmp $9c4e			jmp 	SyntaxError
.8d95					_ETHexConstant:
.8d95	c8		iny				iny 								; skip #
.8d96	c8		iny				iny 								; skip count
.8d97	20 d8 91	jsr $91d8			jsr 	NSMSetZero 					; clear result
.8d9a					_ETHLoop:
.8d9a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9c	c8		iny				iny 								; and consume
.8d9d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8d9f	f0 1e		beq $8dbf			beq 	_ETHExit
.8da1	48		pha				pha 								; save on stack.
.8da2	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 2
.8da5	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 4
.8da8	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 8
.8dab	20 ed 91	jsr $91ed			jsr 	NSMShiftLeft 				; x 16
.8dae	68		pla				pla 								; ASCII
.8daf	c9 41		cmp #$41			cmp 	#'A'
.8db1	90 02		bcc $8db5			bcc 	_ETHNotChar
.8db3	e9 07		sbc #$07			sbc 	#7
.8db5					_ETHNotChar:
.8db5	29 0f		and #$0f			and 	#15 						; digit now
.8db7	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8dba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dbd	80 db		bra $8d9a			bra 	_ETHLoop 					; go round.
.8dbf					_ETHExit:
.8dbf	60		rts				rts
.8dc0					_ETString:
.8dc0	c8		iny				iny 								; look at length
.8dc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc3	48		pha				pha
.8dc4	c8		iny				iny 								; first character
.8dc5	20 29 97	jsr $9729			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8dc8	68		pla				pla 								; restore count and save
.8dc9	85 36		sta $36				sta 	zTemp0
.8dcb	98		tya				tya 								; add length to Y to skip it.
.8dcc	18		clc				clc
.8dcd	65 36		adc $36				adc 	zTemp0
.8dcf	a8		tay				tay
.8dd0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8dd2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dd5	60		rts				rts
.8dd6					_ETVariable:
.8dd6	4c 30 8e	jmp $8e30			jmp 	VariableHandler
.8dd9					_ETPuncUnary:
.8dd9	c8		iny				iny 								; consume the unary character
.8dda	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8ddc	f0 2d		beq $8e0b			beq 	_ETUnaryNegate
.8dde	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8de0	f0 39		beq $8e1b			beq 	_ETDereference
.8de2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8de4	f0 43		beq $8e29			beq 	_ETParenthesis
.8de6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8de8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8dea	f0 06		beq $8df2			beq 	_ETIndirection
.8dec	e6 36		inc $36				inc 	zTemp0
.8dee	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8df0	d0 a0		bne $8d92			bne 	_ETSyntaxError
.8df2					_ETIndirection:
.8df2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8df4	1a		inc a				inc 	a
.8df5	48		pha				pha
.8df6	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm				; evaluate the term
.8df9	20 a3 8b	jsr $8ba3			jsr 	Dereference 				; dereference it.
.8dfc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8dff	d0 07		bne $8e08			bne 	_ETTypeMismatch
.8e01	68		pla				pla 								; indirection 1-2
.8e02	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8e04	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e07	60		rts				rts
.8e08					_ETTypeMismatch:
.8e08	4c 58 9c	jmp $9c58			jmp 	TypeError
.8e0b					_ETUnaryNegate:
.8e0b	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm				; evaluate the term
.8e0e	20 a3 8b	jsr $8ba3			jsr 	Dereference 				; dereference it.
.8e11	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8e14	29 10		and #$10			and 	#NSTString
.8e16	d0 f0		bne $8e08			bne 	_ETTypeMismatch
.8e18	4c 84 91	jmp $9184			jmp 	NSMNegate  					; just toggles the sign bit.
.8e1b					_ETDereference:
.8e1b	20 5f 8d	jsr $8d5f			jsr 	EvaluateTerm				; evaluate the term
.8e1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8e21	29 20		and #$20			and 	#NSBIsReference
.8e23	f0 e3		beq $8e08			beq 	_ETTypeMismatch
.8e25	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8e28	60		rts				rts
.8e29					_ETParenthesis:
.8e29	20 8e 8a	jsr $8a8e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8e2c	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; check for )
.8e2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8e30					VariableHandler:
.8e30	b1 30		lda ($30),y			lda 	(codePtr),y
.8e32	18		clc				clc
.8e33	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e35	85 37		sta $37				sta 	zTemp0+1
.8e37	c8		iny				iny
.8e38	b1 30		lda ($30),y			lda 	(codePtr),y
.8e3a	85 36		sta $36				sta 	zTemp0
.8e3c	c8		iny				iny
.8e3d	18		clc				clc									; copy variable address+3 to mantissa
.8e3e	69 03		adc #$03			adc 	#3
.8e40	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e43	a5 37		lda $37				lda 	zTemp0+1
.8e45	69 00		adc #$00			adc 	#0
.8e47	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e4a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8e4d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8e50	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8e53	5a		phy				phy
.8e54	a0 02		ldy #$02			ldy 	#2 							; read type
.8e56	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e58	7a		ply				ply
.8e59	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8e5b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8e5d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e60	29 04		and #$04			and 	#NSBIsArray
.8e62	d0 01		bne $8e65			bne 	_VHArray
.8e64	60		rts				rts
.8e65					_VHArray:
.8e65	e8		inx				inx
.8e66	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger 		; get the 1st index.
.8e69	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.8e6b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8e70	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e72	d0 06		bne $8e7a			bne 	_VHNoSecondIndex
.8e74	c8		iny				iny 								; skip the comma
.8e75	e8		inx				inx
.8e76	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.8e79	ca		dex				dex
.8e7a					_VHNoSecondIndex:
.8e7a	ca		dex				dex 								; set X back.
.8e7b	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; and check the right bracket.
.8e7e	5a		phy				phy 								; save position
.8e7f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.8e82	85 3e		sta $3e				sta 	zaTemp
.8e84	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e87	85 3f		sta $3f				sta 	zaTemp+1
.8e89	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.8e8b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e8d	f0 02		beq $8e91			beq 	_VHHas2Mask
.8e8f	a9 ff		lda #$ff			lda 	#$FF
.8e91					_VHHas2Mask:
.8e91	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.8e94	f0 54		beq $8eea			beq 	_VHBadIndex
.8e96	0a		asl a				asl 	a 							; carry will be set if a second index
.8e97	90 09		bcc $8ea2			bcc 	_VHCheckFirstIndex
.8e99	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.8e9b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e9d	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.8ea0	90 48		bcc $8eea			bcc 	_VHBadIndex
.8ea2					_VHCheckFirstIndex:
.8ea2	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.8ea4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ea6	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.8ea9	90 3f		bcc $8eea			bcc 	_VHBadIndex
.8eab	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.8ead	64 37		stz $37				stz 	zTemp0+1
.8eaf	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.8eb2	30 0f		bmi $8ec3			bmi 	_VHNoMultiply
.8eb4	da		phx				phx
.8eb5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.8eb8	48		pha				pha
.8eb9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.8ebb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ebd	1a		inc a				inc 	a 							; add 1 for zero base
.8ebe	fa		plx				plx
.8ebf	20 00 9c	jsr $9c00			jsr 	Multiply8x8 				; calculate -> Z0
.8ec2	fa		plx				plx
.8ec3					_VHNoMultiply:
.8ec3	18		clc				clc
.8ec4	a5 36		lda $36				lda 	zTemp0
.8ec6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ec9	85 36		sta $36				sta 	zTemp0
.8ecb	a5 37		lda $37				lda 	zTemp0+1
.8ecd	69 00		adc #$00			adc 	#0
.8ecf	85 37		sta $37				sta 	zTemp0+1
.8ed1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ed4	20 1b 82	jsr $821b			jsr 	ScaleByBaseType
.8ed7	18		clc				clc
.8ed8	b2 3e		lda ($3e)			lda 	(zaTemp)
.8eda	65 36		adc $36				adc 	zTemp0
.8edc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8edf	a0 01		ldy #$01			ldy 	#1
.8ee1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ee3	65 37		adc $37				adc 	zTemp0+1
.8ee5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ee8	7a		ply				ply 								; restore position
.8ee9	60		rts				rts
.8eea					_VHBadIndex:
.8eea	a9 17		lda #$17		lda	#23
.8eec	4c 85 86	jmp $8685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9b36					AbsUnary:
.9b36	fa		plx				plx 								; restore stack pos
.9b37	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; get a float or int
.9b3a	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b3d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9b40	29 7f		and #$7f			and 	#$7F
.9b42	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8eef					AllocUnary:
.8eef	fa		plx				plx 								; restore stack pos
.8ef0	20 64 91	jsr $9164			jsr 	Evaluate16BitInteger		; get bytes required.
.8ef3	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.8ef6	da		phx				phx 								; save X/Y
.8ef7	5a		phy				phy
.8ef8	8a		txa				txa 								; copy X into Y
.8ef9	a8		tay				tay
.8efa	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8efd	aa		tax				tax
.8efe	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8f01	20 0e 8f	jsr $8f0e			jsr 	AllocateXABytes 			; allocate memory
.8f04	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8f07	8a		txa				txa
.8f08	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8f0b	7a		ply				ply
.8f0c	fa		plx				plx
.8f0d	60		rts				rts
.8f0e					AllocateXABytes:
.8f0e	5a		phy				phy
.8f0f	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.8f12	84 36		sty $36				sty 	zTemp0
.8f14	5a		phy				phy
.8f15	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8f18	84 37		sty $37				sty 	zTemp0+1
.8f1a	5a		phy				phy
.8f1b	18		clc				clc 								; add to low memory pointer
.8f1c	6d 0c 07	adc $070c			adc 	lowMemPtr
.8f1f	8d 0c 07	sta $070c			sta 	lowMemPtr
.8f22	8a		txa				txa
.8f23	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8f26	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8f29					_ClearMemory:
.8f29	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.8f2c	c5 36		cmp $36				cmp 	zTemp0
.8f2e	d0 07		bne $8f37			bne 	_CMClearNext
.8f30	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.8f33	c5 37		cmp $37				cmp 	zTemp0+1
.8f35	f0 0c		beq $8f43			beq 	_CMExit
.8f37					_CMClearNext:
.8f37	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.8f39	92 36		sta ($36)			sta 	(zTemp0)
.8f3b	e6 36		inc $36				inc 	zTemp0
.8f3d	d0 ea		bne $8f29			bne 	_ClearMemory
.8f3f	e6 37		inc $37				inc		zTemp0+1
.8f41	80 e6		bra $8f29			bra 	_ClearMemory
.8f43					_CMExit:
.8f43	fa		plx				plx
.8f44	68		pla				pla
.8f45	7a		ply				ply
.8f46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9b46					AscUnary:
.9b46	fa		plx				plx 								; restore stack pos
.9b47	20 37 91	jsr $9137			jsr 	EvaluateString 				; get a string
.9b4a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9b4c	20 da 91	jsr $91da			jsr 	NSMSetByte
.9b4f	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9b53					FracUnary:
.9b53	fa		plx				plx 								; restore stack pos
.9b54	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; get a float or int
.9b57	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b5a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9b5d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b5f	f0 04		beq $9b65			beq 	_IUZero
.9b61	20 23 9a	jsr $9a23			jsr 	FloatFractionalPart
.9b64	60		rts				rts
.9b65					_IUZero:
.9b65	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.9b68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9b69					IntUnary:
.9b69	fa		plx				plx 								; restore stack pos
.9b6a	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; get a float or int
.9b6d	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b70	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9b73	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b75	f0 03		beq $9b7a			beq 	_IUExit
.9b77	20 86 9a	jsr $9a86			jsr 	FloatIntegerPart
.9b7a					_IUExit:
.9b7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9b7b					LenUnary:
.9b7b	fa		plx				plx 								; restore stack pos
.9b7c	20 37 91	jsr $9137			jsr 	EvaluateString 				; get a string
.9b7f	5a		phy				phy
.9b80	a0 00		ldy #$00			ldy 	#0 							; find length
.9b82					_LenFind:
.9b82	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b84	f0 06		beq $9b8c			beq 	_LenExit
.9b86	c8		iny				iny
.9b87	d0 f9		bne $9b82			bne 	_LenFind
.9b89	4c 53 9c	jmp $9c53			jmp 	RangeError 					; string > 255
.9b8c					_LenExit:
.9b8c	98		tya				tya
.9b8d	20 da 91	jsr $91da			jsr 	NSMSetByte
.9b90	7a		ply				ply
.9b91	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8f47					Unary_Not:
.8f47	fa		plx				plx
.8f48	20 4f 91	jsr $914f			jsr 	EvaluateInteger 			; get integer
.8f4b	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.8f4e	20 08 92	jsr $9208			jsr 	NSMIsZero 					; zero mantissa ?
.8f51	f0 04		beq $8f57			beq 	_NotZero
.8f53	20 d8 91	jsr $91d8			jsr 	NSMSetZero
.8f56	60		rts				rts
.8f57					_NotZero:
.8f57	4c f2 86	jmp $86f2			jmp 	ReturnTrue
.8f5a					_UNBad:
.8f5a	4c 5d 9c	jmp $9c5d			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8f5d					Unary_Rnd:
.8f5d	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; number to use.
.8f60	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; closing bracket
.8f63	20 8c 8f	jsr $8f8c			jsr 	Random32Bit 				; generate a number.
.8f66	ad 08 07	lda $0708			lda 	RandomSeed+0
.8f69	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f6c	ad 09 07	lda $0709			lda 	RandomSeed+1
.8f6f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f72	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8f75	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f78	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8f7b	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8f7d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f80	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8f82	8d 28 06	sta $0628			sta 	NSExponent
.8f85	a9 08		lda #$08			lda 	#NSTFloat
.8f87	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8f8a	db						.byte 	$DB 						; causes a break in the emulator
.8f8b	60		rts				rts
.8f8c					Random32Bit:
.8f8c	5a		phy				phy
.8f8d	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8f8f	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8f92	d0 03		bne $8f97			bne 	_Random1
.8f94	a8		tay				tay 								; if so do it 256 times
.8f95	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8f97					_Random1:
.8f97	0a		asl a				asl 	a 							; LSFR RNG
.8f98	2e 09 07	rol $0709			rol 	RandomSeed+1
.8f9b	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8f9e	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8fa1	90 02		bcc $8fa5			bcc 	_Random2
.8fa3	49 c5		eor #$c5			eor 	#$C5
.8fa5					_Random2:
.8fa5	88		dey				dey
.8fa6	d0 ef		bne $8f97			bne 	_Random1
.8fa8	7a		ply				ply
.8fa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b95					SgnUnary:
.9b95	fa		plx				plx 								; restore stack pos
.9b96	20 2c 91	jsr $912c			jsr 	EvaluateNumber 				; get a float or int
.9b99	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.9b9c	20 08 92	jsr $9208			jsr 	NSMIsZero 					; if zero
.9b9f	f0 10		beq $9bb1			beq 	_SGZero  					; return Int Zero
.9ba1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9ba4	48		pha				pha
.9ba5	a9 01		lda #$01			lda 	#1 							; set to 1
.9ba7	20 da 91	jsr $91da			jsr 	NSMSetByte
.9baa	68		pla				pla
.9bab	29 80		and #$80			and		#$80 						; copy the sign byte out
.9bad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9bb0	60		rts				rts
.9bb1	20 d8 91	jsr $91d8	_SGZero:jsr 	NSMSetZero
.9bb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9bb5					ValUnary:
.9bb5	fa		plx				plx 								; restore stack pos
.9bb6	20 cb 9b	jsr $9bcb			jsr 	ValMainCode 				; do the main val() code
.9bb9	b0 01		bcs $9bbc			bcs 	_VUError 					; couldn't convert
.9bbb	60		rts				rts
.9bbc					_VUError:
.9bbc	4c 58 9c	jmp $9c58			jmp 	TypeError
.9bbf					IsValUnary:
.9bbf	fa		plx				plx 								; restore stack pos
.9bc0	20 cb 9b	jsr $9bcb			jsr 	ValMainCode 				; do the main val() code
.9bc3	b0 03		bcs $9bc8			bcs 	_VUBad
.9bc5	4c f2 86	jmp $86f2			jmp 	ReturnTrue
.9bc8					_VUBad:
.9bc8	4c fe 86	jmp $86fe			jmp 	ReturnFalse
.9bcb					ValMainCode:
.9bcb	20 37 91	jsr $9137			jsr 	EvaluateString 				; get a string
.9bce	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; check right bracket present
.9bd1	5a		phy				phy
.9bd2	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9bd4	f0 17		beq $9bed			beq 	_VMCFail2
.9bd6	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9bd8	48		pha				pha 								; save first character
.9bd9	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9bdb	d0 01		bne $9bde			bne 	_VMCStart
.9bdd	c8		iny				iny 								; skip over -
.9bde					_VMCStart:
.9bde	38		sec				sec 								; initialise first time round.
.9bdf					_VMCNext:
.9bdf	c8		iny				iny 								; pre-increment
.9be0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9be2	f0 0c		beq $9bf0			beq 	_VMCSuccess 				; successful.
.9be4	20 41 8c	jsr $8c41			jsr 	EncodeNumber 				; send it to the number-builder
.9be7	90 03		bcc $9bec			bcc 	_VMCFail 					; if failed, give up.
.9be9	18		clc				clc 								; next time round, countinue
.9bea	80 f3		bra $9bdf			bra 	_VMCNext
.9bec					_VMCFail:
.9bec	68		pla				pla
.9bed					_VMCFail2:
.9bed	7a		ply				ply
.9bee	38		sec				sec
.9bef	60		rts				rts
.9bf0					_VMCSuccess:
.9bf0	a9 00		lda #$00			lda 	#0 							; construct final
.9bf2	20 41 8c	jsr $8c41			jsr 	EncodeNumber
.9bf5	68		pla				pla
.9bf6	c9 2d		cmp #$2d			cmp 	#"-"
.9bf8	d0 03		bne $9bfd			bne 	_VMCNotNegative
.9bfa	20 84 91	jsr $9184			jsr		NSMNegate
.9bfd					_VMCNotNegative:
.9bfd	7a		ply				ply
.9bfe	18		clc				clc
.9bff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8faa					ChrUnary:
.8faa	fa		plx				plx 								; restore stack pos
.8fab	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger			; get value
.8fae	48		pha				pha
.8faf	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.8fb2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8fb4	20 48 9e	jsr $9e48			jsr 	StringTempAllocate
.8fb7	68		pla				pla 								; write number to it
.8fb8	20 86 9e	jsr $9e86			jsr 	StringTempWrite
.8fbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8fbc					SpcUnary:
.8fbc	fa		plx				plx 								; restore stack pos
.8fbd	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger			; get value
.8fc0	5a		phy				phy
.8fc1	48		pha				pha 								; save count
.8fc2	20 48 9e	jsr $9e48			jsr 	StringTempAllocate
.8fc5	7a		ply				ply 								; to do count in Y
.8fc6					_SpcLoop:
.8fc6	c0 00		cpy #$00			cpy 	#0
.8fc8	f0 08		beq $8fd2			beq 	_SpcExit
.8fca	a9 20		lda #$20			lda 	#32
.8fcc	20 86 9e	jsr $9e86			jsr 	StringTempWrite
.8fcf	88		dey				dey
.8fd0	80 f4		bra $8fc6			bra 	_SPCLoop
.8fd2					_SpcExit:
.8fd2	7a		ply				ply
.8fd3	20 7e 97	jsr $977e			jsr 	CheckRightBracket
.8fd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8fd7					Unary_Str:
.8fd7	fa		plx				plx
.8fd8	20 2c 91	jsr $912c			jsr 	EvaluateNumber  			; get number
.8fdb	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; closing bracket
.8fde	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8fe0	20 f9 8f	jsr $8ff9			jsr 	ConvertNumberToString 		; do the conversion.
.8fe3	a9 21		lda #$21			lda		#33 						; create buffer
.8fe5	20 48 9e	jsr $9e48			jsr 	StringTempAllocate 			; allocate memory
.8fe8	da		phx				phx
.8fe9	a2 00		ldx #$00			ldx 	#0
.8feb					_USCopy:
.8feb	bd 8e 08	lda $088e,x			lda 	DecimalBuffer,x
.8fee	20 86 9e	jsr $9e86			jsr 	StringTempWrite
.8ff1	e8		inx				inx
.8ff2	bd 8e 08	lda $088e,x			lda 	DecimalBuffer,x
.8ff5	d0 f4		bne $8feb			bne 	_USCopy
.8ff7	fa		plx				plx
.8ff8	60		rts				rts
.8ff9					ConvertNumberToString:
.8ff9	5a		phy				phy 								; save code position
.8ffa	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8ffd	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.9000	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9003	10 0a		bpl $900f			bpl 	_CNTSNotNegative
.9005	29 7f		and #$7f			and 	#$7F 						; make +ve
.9007	9d 00 06	sta $0600,x			sta 	NSStatus,x
.900a	a9 2d		lda #$2d			lda 	#"-"
.900c	20 75 90	jsr $9075			jsr 	WriteDecimalBuffer
.900f					_CNTSNotNegative:
.900f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9012	f0 15		beq $9029			beq 	_CNTSNotFloat
.9014	e8		inx				inx 								; round up
.9015	a9 01		lda #$01			lda 	#1
.9017	20 da 91	jsr $91da			jsr 	NSMSetByte
.901a	ca		dex				dex
.901b	bd 28 06	lda $0628,x			lda		NSExponent,x
.901e	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9021	a9 08		lda #$08			lda 	#NSTFloat
.9023	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9026	20 45 99	jsr $9945			jsr 	FloatAdd
.9029					_CNTSNotFloat:
.9029	20 57 90	jsr $9057			jsr 	MakePlusTwoString
.902c	20 23 9a	jsr $9a23			jsr 	FloatFractionalPart 		; get the fractional part
.902f	20 e7 9a	jsr $9ae7			jsr 	NSNormalise					; normalise , exit if zero
.9032	f0 21		beq $9055			beq 	_CNTSExit
.9034	a9 2e		lda #$2e			lda 	#"."
.9036	20 75 90	jsr $9075			jsr 	WriteDecimalBuffer 			; write decimal place
.9039					_CNTSDecimal:
.9039	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.903c	30 17		bmi $9055			bmi 	_CNTSExit
.903e	e8		inx				inx 								; x 10.0
.903f	a9 0a		lda #$0a			lda 	#10
.9041	20 da 91	jsr $91da			jsr 	NSMSetByte
.9044	a9 08		lda #$08			lda 	#NSTFloat
.9046	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9049	ca		dex				dex
.904a	20 b0 9a	jsr $9ab0			jsr 	FloatMultiply
.904d	20 57 90	jsr $9057			jsr 	MakePlusTwoString
.9050	20 23 9a	jsr $9a23			jsr 	FloatFractionalPart 		; get the fractional part
.9053	80 e4		bra $9039			bra 	_CNTSDecimal 				; keep going.
.9055					_CNTSExit:
.9055	7a		ply				ply
.9056	60		rts				rts
.9057					MakePlusTwoString:
.9057	da		phx				phx
.9058	20 af 91	jsr $91af			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.905b	e8		inx				inx 								; access it
.905c	e8		inx				inx
.905d	20 86 9a	jsr $9a86			jsr 	FloatIntegerPart 			; make it an integer
.9060	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9062	20 ef 98	jsr $98ef			jsr 	ConvertInt32
.9065	a2 00		ldx #$00			ldx	 	#0
.9067					_MPTSCopy:
.9067	bd 6c 08	lda $086c,x			lda 	NumberBuffer,x
.906a	20 75 90	jsr $9075			jsr 	WriteDecimalBuffer
.906d	e8		inx				inx
.906e	bd 6c 08	lda $086c,x			lda 	NumberBuffer,x
.9071	d0 f4		bne $9067			bne 	_MPTSCopy
.9073	fa		plx				plx
.9074	60		rts				rts
.9075					WriteDecimalBuffer:
.9075	da		phx				phx
.9076	ae 14 07	ldx $0714			ldx 	dbOffset
.9079	9d 8e 08	sta $088e,x			sta 	DecimalBuffer,x
.907c	9e 8f 08	stz $088f,x			stz 	DecimalBuffer+1,x
.907f	ee 14 07	inc $0714			inc 	dbOffset
.9082	fa		plx				plx
.9083	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9084					Unary_Left:
.9084	fa		plx				plx
.9085	18		clc				clc 								; only one parameter
.9086	20 fb 90	jsr $90fb			jsr 	SubstringInitial 			; set up.
.9089	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.908c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.908f	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9092	80 2c		bra $90c0			bra 	SubstringMain
.9094					Unary_Right:
.9094	fa		plx				plx
.9095	18		clc				clc 								; only one parameter
.9096	20 fb 90	jsr $90fb			jsr 	SubstringInitial 			; set up.
.9099	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.909c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.909f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.90a2	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.90a5	b0 02		bcs $90a9			bcs 	_URNotUnderflow
.90a7	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.90a9					_URNotUnderFlow:
.90a9	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.90ac	80 12		bra $90c0			bra 	SubStringMain
.90ae					Unary_Mid:
.90ae	fa		plx				plx
.90af	38		sec				sec 								; two parameters
.90b0	20 fb 90	jsr $90fb			jsr 	SubstringInitial 			; set up.
.90b3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.90b6	f0 05		beq $90bd			beq 	_UMError
.90b8	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.90bb	80 03		bra $90c0			bra 	SubStringMain
.90bd					_UMError:
.90bd	4c 5d 9c	jmp $9c5d			jmp 	ArgumentError
.90c0					SubStringMain:
.90c0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.90c3	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.90c6	b0 2d		bcs $90f5			bcs 	_SSMNull 					; if so, return an empty string.
.90c8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.90cb	f0 28		beq $90f5			beq 	_SSMNull 					; return empty string.
.90cd	18		clc				clc 								; add the offset +1 to the address and
.90ce	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.90d1	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.90d4	85 36		sta $36				sta 	zTemp0
.90d6	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.90d9	69 00		adc #$00			adc 	#0
.90db	85 37		sta $37				sta 	zTemp0+1
.90dd					_SSMNoCarry:
.90dd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.90e0	20 48 9e	jsr $9e48			jsr 	StringTempAllocate 			; allocate that many characters
.90e3	5a		phy				phy 								; save Y
.90e4	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.90e6					_SSMCopy:
.90e6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.90e8	f0 09		beq $90f3			beq 	_SSMEString 				; no more to copy
.90ea	20 86 9e	jsr $9e86			jsr 	StringTempWrite 			; and write it out.
.90ed	c8		iny				iny
.90ee	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.90f1	d0 f3		bne $90e6			bne 	_SSMCopy
.90f3					_SSMEString:
.90f3	7a		ply				ply
.90f4					_SSMExit:
.90f4	60		rts				rts
.90f5					_SSMNull:
.90f5	a9 00		lda #$00			lda 	#0
.90f7	20 48 9e	jsr $9e48			jsr 	StringTempAllocate
.90fa	60		rts				rts
.90fb					SubstringInitial:
.90fb	da		phx				phx 								; save initial stack position
.90fc	08		php				php 								; save carry on stack indicating 2 parameters
.90fd	20 37 91	jsr $9137			jsr 	EvaluateString 				; get a string
.9100	5a		phy				phy 								; calculate length to exponent.
.9101	a0 ff		ldy #$ff			ldy 	#$FF
.9103					_SIFindLength:
.9103	c8		iny				iny
.9104	b1 36		lda ($36),y			lda 	(zTemp0),y
.9106	d0 fb		bne $9103			bne 	_SIFindLength
.9108	98		tya				tya
.9109	9d 28 06	sta $0628,x			sta 	NSExponent,x
.910c	7a		ply				ply
.910d	e8		inx				inx
.910e	20 86 97	jsr $9786			jsr 	CheckComma 					; comma next
.9111	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger 		; get next parameter
.9114	28		plp				plp 								; is it the last parameter ?
.9115	90 07		bcc $911e			bcc 	_SSIExit 					; if so, exit.
.9117	e8		inx				inx
.9118	20 86 97	jsr $9786			jsr 	CheckComma 					; comma next
.911b	20 70 91	jsr $9170			jsr 	Evaluate8BitInteger 		; get last parameter
.911e					_SSIExit:
.911e	fa		plx				plx
.911f	20 7e 97	jsr $977e			jsr 	CheckRightBracket 			; check closing bracket
.9122	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9123					EvaluateValue:
.9123	48		pha				pha
.9124	20 8e 8a	jsr $8a8e			jsr		EvaluateExpression 			; expression
.9127	20 a3 8b	jsr $8ba3			jsr 	Dereference					; derefernce it
.912a	68		pla				pla
.912b	60		rts				rts
.912c					EvaluateNumber:
.912c	20 23 91	jsr $9123			jsr 	EvaluateValue 				; get a value
.912f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9132	29 10		and #$10			and 	#NSBIsString
.9134	d0 16		bne $914c			bne 	HelperTypeError
.9136	60		rts				rts
.9137					EvaluateString:
.9137	20 23 91	jsr $9123			jsr 	EvaluateValue 				; get a value
.913a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.913d	29 10		and #$10			and 	#NSBIsString
.913f	f0 0b		beq $914c			beq 	HelperTypeError
.9141					CopyAddressToTemp0:
.9141	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9144	85 36		sta $36				sta 	zTemp0
.9146	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9149	85 37		sta $37				sta 	zTemp0+1
.914b	60		rts				rts
.914c					HelperTypeError:
.914c	4c 58 9c	jmp $9c58			jmp 	TypeError
.914f					EvaluateInteger:
.914f	20 2c 91	jsr $912c			jsr 	EvaluateNumber
.9152	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9155	d0 0a		bne $9161			bne 	HelperValueError 			; if not, it's a float.
.9157	60		rts				rts
.9158					EvaluateUnsignedInteger:
.9158	20 4f 91	jsr $914f			jsr 	EvaluateInteger 			; check integer is +ve
.915b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.915e	30 01		bmi $9161			bmi 	HelperValueError
.9160	60		rts				rts
.9161					HelperValueError:
.9161	4c 5d 9c	jmp $9c5d			jmp 	ArgumentError
.9164					Evaluate16BitInteger:
.9164	20 58 91	jsr $9158			jsr	 	EvaluateUnsignedInteger		; get integer
.9167	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.916a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.916d	d0 f2		bne $9161			bne 	HelperValueError
.916f	60		rts				rts
.9170					Evaluate8BitInteger:
.9170	20 58 91	jsr $9158			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9173	d0 ec		bne $9161			bne 	HelperValueError
.9175	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9178	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.917b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.917e	d0 e1		bne $9161			bne 	HelperValueError
.9180	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9183	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9c00					Multiply8x8:
.9c00	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9c01	85 36		sta $36			  	sta 	zTemp0
.9c03	86 37		stx $37				stx 	zTemp0+1
.9c05	a9 00		lda #$00			lda 	#0
.9c07	a2 08		ldx #$08			ldx 	#8
.9c09					_M88Loop:
.9c09	90 03		bcc $9c0e			bcc 	_M88NoAdd
.9c0b	18		clc				clc
.9c0c	65 37		adc $37				adc 	zTemp0+1
.9c0e					_M88NoAdd:
.9c0e	6a		ror a				ror 	a
.9c0f	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9c11	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9c12	d0 f5		bne $9c09			bne 	_M88Loop
.9c14	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9c16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9184					NSMNegate:
.9184	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9187	49 80		eor #$80			eor 	#NSBIsNegative
.9189	9d 00 06	sta $0600,x			sta 	NSStatus,x
.918c	60		rts				rts
.918d					NSMNegateMantissa:
.918d	38		sec				sec
.918e	a9 00		lda #$00			lda 	#0
.9190	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9193	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9196	a9 00		lda #$00			lda 	#0
.9198	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.919b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.919e	a9 00		lda #$00			lda 	#0
.91a0	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.91a3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91a6	a9 00		lda #$00			lda 	#0
.91a8	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.91ab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91ae	60		rts				rts
.91af					NSMShiftUpTwo:
.91af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91b2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.91b5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91b8	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.91bb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.91be	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.91c1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.91c4	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.91c7	bd 28 06	lda $0628,x			lda 	NSExponent,x
.91ca	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.91cd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.91d0	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.91d3	60		rts				rts
.91d4					NSMSetZeroMantissaOnly:
.91d4	a9 00		lda #$00			lda 	#0
.91d6	80 08		bra $91e0			bra 	NSMSetMantissa
.91d8					NSMSetZero:
.91d8	a9 00		lda #$00			lda 	#0
.91da					NSMSetByte:
.91da	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.91dd	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.91e0					NSMSetMantissa:
.91e0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.91e3	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.91e6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.91e9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.91ec	60		rts				rts
.91ed					NSMShiftLeft:
.91ed	18		clc				clc
.91ee					NSMRotateLeft:
.91ee	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.91f1	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.91f4	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.91f7	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.91fa	60		rts				rts
.91fb					NSMShiftRight:
.91fb	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.91fe	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9201	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9204	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9207	60		rts				rts
.9208					NSMIsZero:
.9208	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.920b	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.920e	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9211	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9214	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9c17					DecimalScalarTable:
>9c17	66 66 66 66				.dword $66666666 ; 0.1
>9c1b	de					.byte $de
>9c1c	1f 85 eb 51				.dword $51eb851f ; 0.01
>9c20	db					.byte $db
>9c21	4c 37 89 41				.dword $4189374c ; 0.001
>9c25	d8					.byte $d8
>9c26	ac 8b db 68				.dword $68db8bac ; 0.0001
>9c2a	d4					.byte $d4
>9c2b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9c2f	d1					.byte $d1
>9c30	83 de 1b 43				.dword $431bde83 ; 1e-06
>9c34	ce					.byte $ce
>9c35	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9c39	ca					.byte $ca
>9c3a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9c3e	c7					.byte $c7
>9c3f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9c43	c4					.byte $c4
>9c44	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9c48	c0					.byte $c0
>9c49	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9c4d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9c4e					SyntaxError:
.9c4e	a9 02		lda #$02		lda	#2
.9c50	4c 85 86	jmp $8685		jmp	ErrorHandler
.9c53					RangeError:
.9c53	a9 04		lda #$04		lda	#4
.9c55	4c 85 86	jmp $8685		jmp	ErrorHandler
.9c58					TypeError:
.9c58	a9 05		lda #$05		lda	#5
.9c5a	4c 85 86	jmp $8685		jmp	ErrorHandler
.9c5d					ArgumentError:
.9c5d	a9 07		lda #$07		lda	#7
.9c5f	4c 85 86	jmp $8685		jmp	ErrorHandler
.9c62					NotDoneError:
.9c62	a9 0c		lda #$0c		lda	#12
.9c64	4c 85 86	jmp $8685		jmp	ErrorHandler
.9c67					ErrorText:
>9c67	42 72 65 61 6b 00			.text	"Break",0
>9c6d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9c75	72 72 6f 72 00
>9c7a	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9c82	20 62 79 20 7a 65 72 6f 00
>9c8b	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9c93	61 6e 67 65 00
>9c98	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ca0	6d 61 74 63 68 00
>9ca6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9cae	65 6d 6f 72 79 00
>9cb4	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9cbc	61 72 67 75 6d 65 6e 74 00
>9cc5	53 74 6f 70 00				.text	"Stop",0
>9cca	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9cd2	6f 6f 20 6c 6f 6e 67 00
>9cda	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9ce2	6e 20 66 61 69 6c 65 64 00
>9ceb	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9cf3	61 74 61 00
>9cf7	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9cff	65 6e 74 65 64 00
>9d05	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9d0d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9d19	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9d21	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9d2e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9d36	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9d43	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9d4b	68 6f 75 74 20 57 68 69 6c 65 00
>9d56	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9d5e	68 6f 75 74 20 46 6f 72 00
>9d67	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9d6f	61 63 6b 20 66 75 6c 6c 00
>9d78	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9d80	75 63 74 75 72 65 00
>9d87	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9d8f	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9d9c	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9da4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9db2	41 72 72 61 79 20 73 69			.text	"Array size",0
>9dba	7a 65 00
>9dbd	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>9dc5	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9215					StackOpen:
.9215	48		pha				pha 								; save frame byte
.9216	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9218	0a		asl a				asl 	a 							; claim twice this for storage
.9219	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.921b	38		sec				sec 								; so basically subtracting from
.921c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.921e	85 34		sta $34				sta 	basicStack
.9220	b0 08		bcs $922a			bcs 	_SONoBorrow
.9222	c6 35		dec $35				dec 	basicStack+1
.9224	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9226	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9228	90 04		bcc $922e			bcc 	_SOMemory
.922a					_SONoBorrow:
.922a	68		pla				pla 								; get marker back and write at TOS
.922b	92 34		sta ($34)			sta 	(basicStack)
.922d	60		rts				rts
.922e					_SOMemory:
.922e							ERR_STACK
.922e					StackClose:
.922e	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9230	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9232	0a		asl a				asl 	a 							; claim twice this.
.9233	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9235	85 34		sta $34				sta 	basicStack
.9237	90 02		bcc $923b			bcc 	_SCExit
.9239	e6 35		inc $35				inc 	basicStack+1
.923b					_SCExit:
.923b	60		rts				rts
.923c					StackCheckFrame:
.923c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.923e	29 f0		and #$f0			and 	#$F0 						; check type bits
.9240	d0 01		bne $9243			bne 	_SCFError 					; different, we have structures mixed up
.9242	60		rts				rts
.9243					_SCFError:
.9243	8a		txa				txa 								; report error X
.9244	4c 85 86	jmp $8685			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9247					STKSaveCodePosition:
.9247	5a		phy				phy
.9248	98		tya				tya 								; save Y
.9249	a0 05		ldy #$05			ldy 	#5
.924b	91 34		sta ($34),y			sta 	(basicStack),y
.924d	88		dey				dey 								; save Code Pointer
.924e					_STKSaveLoop:
.924e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9251	91 34		sta ($34),y			sta 	(basicStack),y
.9253	88		dey				dey
.9254	d0 f8		bne $924e			bne 	_STKSaveLoop
.9256	7a		ply				ply
.9257	60		rts				rts
.9258					STKLoadCodePosition:
.9258	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.925a					_STKLoadLoop:
.925a	b1 34		lda ($34),y			lda 	(basicStack),y
.925c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.925f	c8		iny				iny
.9260	c0 05		cpy #$05			cpy 	#5
.9262	d0 f6		bne $925a			bne 	_STKLoadLoop
.9264	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9266	a8		tay				tay
.9267	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9268					StackReset:
.9268	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.926a	85 34		sta $34				sta 	0+basicStack
.926c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.926e	85 35		sta $35				sta 	1+basicStack
.9270	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9272	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9274	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9dcd					StringConcrete:
.9dcd	5a		phy				phy 								; save position on stack
.9dce	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9dd1	85 38		sta $38				sta 	zTemp1
.9dd3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9dd6	85 39		sta $39				sta 	zTemp1+1
.9dd8	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9dda					_SALength:
.9dda	c8		iny				iny
.9ddb	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ddd	d0 fb		bne $9dda			bne 	_SALength
.9ddf	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9de1	b0 3f		bcs $9e22			bcs 	_SALengthError
.9de3	98		tya				tya 				 				; length of the new string
.9de4	18		clc				clc
.9de5	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9de7	90 02		bcc $9deb			bcc 	_SAHaveLength
.9de9	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9deb					_SAHaveLength:
.9deb	48		pha				pha 								; save length.
.9dec	38		sec				sec
.9ded	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9def	6d 0e 07	adc $070e			adc 	StringMemory
.9df2	8d 0e 07	sta $070e			sta 	StringMemory
.9df5	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9df7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9dfa	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9dfc	6d 0f 07	adc $070f			adc 	StringMemory+1
.9dff	8d 0f 07	sta $070f			sta 	StringMemory+1
.9e02	85 3b		sta $3b				sta 	zTemp2+1
.9e04	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e07	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9e08	38		sec				sec
.9e09	e9 03		sbc #$03			sbc 	#3
.9e0b	92 3a		sta ($3a)			sta 	(zTemp2)
.9e0d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9e0f	a0 01		ldy #$01			ldy 	#1
.9e11	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9e13					_SACopyNewString:
.9e13	a0 00		ldy #$00			ldy 	#0
.9e15					_SACopyNSLoop:
.9e15	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9e17	c8		iny				iny 								; write two on in string storage
.9e18	c8		iny				iny
.9e19	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9e1b	88		dey				dey 								; this makes it one one.
.9e1c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9e1e	d0 f5		bne $9e15			bne 	_SACopyNSLoop
.9e20	7a		ply				ply
.9e21	60		rts				rts
.9e22					_SALengthError:
.9e22	a9 09		lda #$09		lda	#9
.9e24	4c 85 86	jmp $8685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9e27					StringSystemInitialise:
.9e27	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9e29	8d 0e 07	sta $070e			sta 	0+StringMemory
.9e2c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9e2e	8d 0f 07	sta $070f			sta 	1+StringMemory
.9e31	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9e34	60		rts				rts
.9e35					StringSpaceInitialise:
.9e35	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9e37	8d 10 07	sta $0710			sta 	StringInitialised
.9e3a	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9e3d	8d 11 07	sta $0711			sta 	StringTempPointer
.9e40	ad 0f 07	lda $070f			lda 	StringMemory+1
.9e43	3a		dec a				dec 	a
.9e44	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9e47	60		rts				rts
.9e48					StringTempAllocate:
.9e48	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9e4a	b0 35		bcs $9e81			bcs 	_STALength
.9e4c	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9e4f	30 05		bmi $9e56			bmi 	_STAAllocate
.9e51	48		pha				pha 								; save value to subtract.
.9e52	20 35 9e	jsr $9e35			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9e55	68		pla				pla 								; restore it
.9e56					_STAAllocate:
.9e56	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9e58	18		clc				clc  								; deliberate allows one more
.9e59	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9e5c	8d 11 07	sta $0711			sta 	StringTempPointer
.9e5f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9e62	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9e64	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9e67	69 ff		adc #$ff			adc 	#$FF
.9e69	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9e6c	85 3d		sta $3d				sta 	zsTemp+1
.9e6e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e71	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9e74	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9e77	a9 10		lda #$10			lda 	#NSTString
.9e79	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9e7c	a9 00		lda #$00			lda 	#0 							; clear the target string
.9e7e	92 3c		sta ($3c)			sta 	(zsTemp)
.9e80	60		rts				rts
.9e81					_STALength:
.9e81	a9 09		lda #$09		lda	#9
.9e83	4c 85 86	jmp $8685		jmp	ErrorHandler
.9e86					StringTempWrite:
.9e86	48		pha				pha
.9e87	92 3c		sta ($3c)			sta 	(zsTemp)
.9e89	e6 3c		inc $3c				inc 	zsTemp
.9e8b	d0 02		bne $9e8f			bne 	_STWNoCarry
.9e8d	e6 3d		inc $3d				inc 	zsTemp+1
.9e8f					_STWNoCarry:
.9e8f	a9 00		lda #$00			lda 	#0
.9e91	92 3c		sta ($3c)			sta 	(zsTemp)
.9e93	68		pla				pla
.9e94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9275					BackloadProgram:
.9275	a2 ff		ldx #$ff			ldx 	#$FF
.9277	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.927a	20 a4 92	jsr $92a4			jsr 	BLReadByte
.927d	30 1e		bmi $929d			bmi 	_BPExit
.927f					_BPCopy:
.927f	e8		inx				inx  								; copy byte in
.9280	9d 1b 08	sta $081b,x			sta 	lineBuffer,x
.9283	9e 1c 08	stz $081c,x			stz 	lineBuffer+1,x
.9286	20 a4 92	jsr $92a4			jsr 	BLReadByte 					; read next byte
.9289	30 0a		bmi $9295			bmi 	_BPEndLine 					; -ve = EOL
.928b	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.928d	d0 02		bne $9291			bne 	_BPNotTab
.928f	a9 20		lda #$20			lda 	#' '
.9291					_BPNotTab:
.9291	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9293	b0 ea		bcs $927f			bcs 	_BPCopy
.9295					_BPEndLine:
.9295	20 6e 94	jsr $946e			jsr 	TokeniseLine 				; tokenise the line.
.9298	20 fa 96	jsr $96fa			jsr 	MemoryAppend 				; append to current program
.929b	80 d8		bra $9275			bra 	BackloadProgram
.929d					_BPExit:
.929d	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.92a0	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.92a3	60		rts				rts
.92a4					BLReadByte:
.92a4					_BLLoad:
.92a4	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.92a7	ee a5 92	inc $92a5			inc 	_BLLoad+1
.92aa	d0 03		bne $92af			bne 	_BLNoCarry
.92ac	ee a6 92	inc $92a6			inc 	_BLLoad+2
.92af					_BLNoCarry:
.92af	c9 00		cmp #$00			cmp 	#0
.92b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.92b2					TokeniseSearchTable:
.92b2	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.92b4	85 36		sta $36				sta 	zTemp0
.92b6	a0 00		ldy #$00			ldy 	#0
.92b8	a9 80		lda #$80			lda 	#$80 						; token #
.92ba	85 38		sta $38				sta 	zTemp1
.92bc					_TSTLoop:
.92bc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.92be	30 49		bmi $9309			bmi 	_TSTFail 					; -ve = end of table
.92c0	f0 2e		beq $92f0			beq 	_TSTNext 					; zero, check next it's a dummy
.92c2	c8		iny				iny 								; get the hash
.92c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c5	88		dey				dey
.92c6	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.92c9	d0 25		bne $92f0			bne 	_TSTNext
.92cb	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.92ce	38		sec				sec
.92cf	ed 00 07	sbc $0700			sbc 	identStart
.92d2	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.92d4	d0 1a		bne $92f0			bne 	_TSTNext
.92d6	5a		phy				phy 								; save Y , we might fail
.92d7	c8		iny				iny 								; point to text
.92d8	c8		iny				iny
.92d9	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.92dc					_TSTCompareName:
.92dc	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; compare text.
.92df	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.92e1	d0 0c		bne $92ef			bne 	_TSTNextPullY 				; fail, pullY and do next
.92e3	e8		inx				inx
.92e4	c8		iny				iny
.92e5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.92e8	d0 f2		bne $92dc			bne 	_TSTCompareName
.92ea	7a		ply				ply 								; throw Y
.92eb	a5 38		lda $38				lda 	zTemp1 						; get token #
.92ed	38		sec				sec 								; return with CS = passed.
.92ee	60		rts				rts
.92ef					_TSTNextPullY:
.92ef	7a		ply				ply 								; restore current, fall through.
.92f0					_TSTNext:
.92f0	e6 38		inc $38				inc 	zTemp1 						; token counter
.92f2	98		tya				tya
.92f3	18		clc				clc
.92f4	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.92f6	1a		inc a				inc 	a 							; +1
.92f7	1a		inc a				inc 	a 							; +2
.92f8	a8		tay				tay
.92f9	10 c1		bpl $92bc			bpl 	_TSTLoop 					; if Y < $80 loop back
.92fb	98		tya				tya 								; add Y to zTemp0 and reset Y
.92fc	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.92fe	18		clc				clc  								; but have tables > 255 bytes
.92ff	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9301	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9303	90 b7		bcc $92bc			bcc 	_TSTLoop
.9305	e6 37		inc $37				inc 	zTemp0+1
.9307	80 b3		bra $92bc			bra 	_TSTLoop
.9309					_TSTFail:
.9309	18		clc				clc
.930a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.930b					KeywordSet0:
>930b	00 65					.text	0,$65,""               ; $80 !0:EOF
>930d	00 58					.text	0,$58,""               ; $81 !1:SH1
>930f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9311	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9317	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>931f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9325	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>932c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9333	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>933a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9340	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9348	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9350	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9356	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>935d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9363	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>936b	28
>936c	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9372	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9378	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>937e	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9385	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>938b	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9391	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9396	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>939a	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>93a0	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>93a8	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>93af	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>93b6	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>93be	43
>93bf	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>93c5	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>93cb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>93d2	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>93d8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>93de	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>93e3	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>93e9	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>93ee	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>93f6	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>93fc	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9403	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9409	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>940e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9415	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>941b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9420	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9428	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>942c	ff					.text	$FF
.942d					KeywordSet1:
>942d	00 65					.text	0,$65,""               ; $80 !0:EOF
>942f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9431	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9433	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>943b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9442	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9447	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>944d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9452	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>945a	45
>945b	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9460	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9466	ff					.text	$FF
.9467					KeywordSet2:
>9467	00 65					.text	0,$65,""               ; $80 !0:EOF
>9469	00 58					.text	0,$58,""               ; $81 !1:SH1
>946b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>946d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.946e					TokeniseLine:
.946e	20 f6 95	jsr $95f6			jsr 	FixLineBufferCase 			; fix line case
.9471	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9473	8d 1b 07	sta $071b			sta 	tokenOffset
.9476	9c 1c 07	stz $071c			stz 	tokenLineNumber
.9479	9c 1d 07	stz $071d			stz 	tokenLineNumber+1
.947c	a2 ff		ldx #$ff			ldx 	#$FF
.947e					_TKFindFirst:
.947e	e8		inx				inx
.947f	bd 1b 08	lda $081b,x			lda 	lineBuffer,x
.9482	f0 79		beq $94fd			beq 	_TKExit
.9484	c9 20		cmp #$20			cmp 	#' '
.9486	90 f6		bcc $947e			bcc 	_TKFindFirst
.9488	c9 30		cmp #$30			cmp 	#'0'
.948a	90 07		bcc $9493			bcc 	_TKNoLineNumber
.948c	c9 3a		cmp #$3a			cmp 	#'9'+1
.948e	b0 03		bcs $9493			bcs 	_TKNoLineNumber
.9490	20 20 96	jsr $9620			jsr 	TokeniseExtractLineNumber
.9493					_TKNoLineNumber:
.9493					_TKTokeniseLoop:
.9493	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9496	f0 65		beq $94fd			beq 	_TKExit
.9498	e8		inx				inx
.9499	c9 20		cmp #$20			cmp 	#' '
.949b	f0 f6		beq $9493			beq 	_TKTokeniseLoop 			; keep looping if space found.
.949d	ca		dex				dex 								; undo last get, A contains character, X is position.
.949e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.94a0	f0 61		beq $9503			beq 	_TKTokeniseIdentifier
.94a2	c9 41		cmp #$41			cmp 	#'A'
.94a4	90 04		bcc $94aa			bcc 	_TKTokenisePunctuation
.94a6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.94a8	90 59		bcc $9503			bcc 	_TKTokeniseIdentifier
.94aa					_TKTokenisePunctuation:
.94aa	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.94ac	f0 27		beq $94d5			beq 	_TKString
.94ae	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.94b0	f0 28		beq $94da			beq 	_TKHexConstant
.94b2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.94b4	f0 29		beq $94df			beq 	_TKCheckDouble
.94b6	c9 3e		cmp #$3e			cmp 	#'>'
.94b8	f0 25		beq $94df			beq 	_TKCheckDouble
.94ba					_TKStandardPunctuation:
.94ba	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; get it back.
.94bd	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.94bf	90 0e		bcc $94cf			bcc 	_TKNoShift
.94c1	48		pha				pha 								; save
.94c2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.94c4	85 36		sta $36				sta 	zTemp0
.94c6	68		pla				pla
.94c7	29 20		and #$20			and 	#32 						; bit 5
.94c9	4a		lsr a				lsr 	a 							; shift into bit 3
.94ca	4a		lsr a				lsr 	a
.94cb	05 36		ora $36				ora 	zTemp0
.94cd	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.94cf					_TKNoShift:
.94cf	20 65 96	jsr $9665			jsr 	TokeniseWriteByte 			; write the punctuation character
.94d2	e8		inx				inx 								; consume the character
.94d3	80 be		bra $9493			bra 	_TKTokeniseLoop 			; and loop round again.
.94d5					_TKString:
.94d5	20 85 95	jsr $9585			jsr 	TokeniseString
.94d8	80 b9		bra $9493			bra 	_TKTokeniseLoop
.94da					_TKHexConstant:
.94da	20 c0 95	jsr $95c0			jsr 	TokeniseHexConstant
.94dd	80 b4		bra $9493			bra 	_TKTokeniseLoop
.94df					_TKCheckDouble:
.94df	bd 1c 08	lda $081c,x			lda 	lineBuffer+1,x 				; get next character
.94e2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.94e4	90 d4		bcc $94ba			bcc 	_TKStandardPunctuation
.94e6	c9 3f		cmp #$3f			cmp 	#'>'+1
.94e8	b0 d0		bcs $94ba			bcs 	_TKStandardPunctuation
.94ea	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.94ed	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.94ef	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.94f0	7d 1c 08	adc $081c,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.94f3	38		sec				sec
.94f4	e9 3c		sbc #$3c			sbc 	#'<'
.94f6	20 65 96	jsr $9665			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.94f9	e8		inx				inx 								; consume both
.94fa	e8		inx				inx
.94fb	80 96		bra $9493			bra 	_TKTokeniseLoop
.94fd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.94ff	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.9502	60		rts				rts
.9503					_TKTokeniseIdentifier:
.9503	8e 00 07	stx $0700			stx 	identStart 					; save start
.9506	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9509					_TKCheckLoop:
.9509	e8		inx				inx 								; look at next, we know first is identifier.
.950a	bd 1b 08	lda $081b,x			lda  	lineBuffer,x
.950d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.950f	f0 f8		beq $9509			beq 	_TKCheckLoop
.9511	c9 30		cmp #$30			cmp	 	#"0"
.9513	90 0c		bcc $9521			bcc 	_TKEndIdentifier
.9515	c9 3a		cmp #$3a			cmp 	#"9"+1
.9517	90 f0		bcc $9509			bcc 	_TKCheckLoop
.9519	c9 41		cmp #$41			cmp	 	#"A"
.951b	90 04		bcc $9521			bcc 	_TKEndIdentifier
.951d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.951f	90 e8		bcc $9509			bcc 	_TKCheckLoop
.9521					_TKEndIdentifier:
.9521	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9524	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9526	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9528	f0 06		beq $9530			beq 	_TKHasTypeCharacter
.952a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.952c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.952e	d0 07		bne $9537			bne 	_TKNoTypeCharacter
.9530					_TKHasTypeCharacter:
.9530	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9533	e8		inx				inx 								; read next
.9534	bd 1b 08	lda $081b,x			lda 	lineBuffer,x
.9537					_TKNoTypeCharacter:
.9537	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9539	d0 09		bne $9544			bne 	_TKNoArray
.953b	e8		inx				inx 								; skip the (
.953c	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.953f	09 04		ora #$04			ora 	#$04
.9541	8d 04 07	sta $0704			sta 	identTypeByte
.9544					_TKNoArray:
.9544	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9547	20 e1 95	jsr $95e1			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.954a	a0 93		ldy #$93			ldy 	#(KeywordSet0) >> 8
.954c	a9 0b		lda #$0b			lda 	#(KeywordSet0) & $FF
.954e	20 b2 92	jsr $92b2			jsr 	TokeniseSearchTable
.9551	a2 00		ldx #$00			ldx 	#0
.9553	b0 1f		bcs $9574			bcs 	_TKFoundToken
.9555	a0 94		ldy #$94			ldy 	#(KeywordSet1) >> 8
.9557	a9 2d		lda #$2d			lda 	#(KeywordSet1) & $FF
.9559	20 b2 92	jsr $92b2			jsr 	TokeniseSearchTable
.955c	a2 81		ldx #$81			ldx 	#$81
.955e	b0 14		bcs $9574			bcs 	_TKFoundToken
.9560	a0 94		ldy #$94			ldy 	#(KeywordSet1) >> 8
.9562	a9 2d		lda #$2d			lda 	#(KeywordSet1) & $FF
.9564	20 b2 92	jsr $92b2			jsr 	TokeniseSearchTable
.9567	a2 82		ldx #$82			ldx 	#$82
.9569	b0 09		bcs $9574			bcs 	_TKFoundToken
.956b	20 71 96	jsr $9671			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.956e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9571	4c 93 94	jmp $9493			jmp 	_TKTokeniseLoop 			; and go round again.
.9574					_TKFoundToken:
.9574	48		pha				pha 								; save token
.9575	8a		txa				txa 								; shift in X, is there one ?
.9576	f0 03		beq $957b			beq 	_TKNoTShift
.9578	20 65 96	jsr $9665			jsr 	TokeniseWriteByte 			; if so, write it out
.957b					_TKNoTShift:
.957b	68		pla				pla 								; restore and write token
.957c	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.957f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9582	4c 93 94	jmp $9493			jmp 	_TKTokeniseLoop 			; and go round again.
.9585					TokeniseString:
.9585	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9587	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.958a	e8		inx				inx									; start of quoted string.
.958b	da		phx				phx 								; push start of string on top
.958c	ca		dex				dex
.958d					_TSFindEnd:
.958d	e8		inx				inx
.958e	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; next character
.9591	f0 04		beq $9597			beq 	_TSEndOfString
.9593	c9 22		cmp #$22			cmp 	#'"'
.9595	d0 f6		bne $958d			bne 	_TSFindEnd
.9597					_TSEndOfString:
.9597	7a		ply				ply  								; so now Y is first character, X is character after end.
.9598	48		pha				pha 								; save terminating character
.9599	20 a1 95	jsr $95a1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.959c	68		pla				pla 								; terminating character
.959d	f0 01		beq $95a0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.959f	e8		inx				inx
.95a0					_TSNotQuote:
.95a0	60		rts				rts
.95a1					TOWriteBlockXY:
.95a1	86 36		stx $36				stx 	zTemp0 						; write end character
.95a3	98		tya				tya
.95a4	49 ff		eor #$ff			eor 	#$FF
.95a6	38		sec				sec
.95a7	65 36		adc $36				adc 	zTemp0
.95a9	1a		inc a				inc 	a 							; one extra for NULL
.95aa	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.95ad					_TOBlockLoop:
.95ad	c4 36		cpy $36				cpy 	zTemp0
.95af	f0 09		beq $95ba			beq 	_TOBlockExit
.95b1	b9 1b 08	lda $081b,y			lda 	lineBuffer,y
.95b4	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.95b7	c8		iny				iny
.95b8	80 f3		bra $95ad			bra 	_TOBlockLoop
.95ba					_TOBlockExit:
.95ba	a9 00		lda #$00			lda 	#0
.95bc	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.95bf	60		rts				rts
.95c0					TokeniseHexConstant:
.95c0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.95c2	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.95c5	e8		inx				inx									; start of quoted string.
.95c6	da		phx				phx 								; push start of constant on top
.95c7	ca		dex				dex
.95c8					_THFindLoop:
.95c8	e8		inx				inx
.95c9	bd 1b 08	lda $081b,x			lda 	lineBuffer,x
.95cc	c9 30		cmp #$30			cmp 	#"0"
.95ce	90 0c		bcc $95dc			bcc 	_THFoundEnd
.95d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.95d2	90 f4		bcc $95c8			bcc 	_THFindLoop
.95d4	c9 41		cmp #$41			cmp 	#"A"
.95d6	90 04		bcc $95dc			bcc 	_THFoundEnd
.95d8	c9 47		cmp #$47			cmp 	#"F"+1
.95da	90 ec		bcc $95c8			bcc 	_THFindLoop
.95dc					_THFoundEnd:
.95dc	7a		ply				ply 								; restore start
.95dd	20 a1 95	jsr $95a1			jsr 	TOWriteBlockXY 				; output the block
.95e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.95e1					TokeniseCalculateHash:
.95e1	da		phx				phx
.95e2	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.95e5	a9 00		lda #$00			lda 	#0
.95e7					_TCHLoop:
.95e7	18		clc				clc
.95e8	7d 1b 08	adc $081b,x			adc 	lineBuffer,x
.95eb	e8		inx				inx
.95ec	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.95ef	d0 f6		bne $95e7			bne 	_TCHLoop
.95f1	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.95f4	fa		plx				plx
.95f5	60		rts				rts
.95f6					FixLineBufferCase:
.95f6	a2 00		ldx #$00			ldx 	#0
.95f8					_FLBCLoop:
.95f8	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; get next character
.95fb	f0 22		beq $961f			beq 	_FLBCExit 					; end of string.
.95fd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.95ff	f0 11		beq $9612			beq 	_FLBCInQuotes
.9601	e8		inx				inx
.9602	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9604	90 f2		bcc $95f8			bcc 	_FLBCLoop
.9606	c9 7b		cmp #$7b			cmp 	#'z'+1
.9608	b0 ee		bcs $95f8			bcs 	_FLBCLoop
.960a	38		sec				sec 								; make U/C
.960b	e9 20		sbc #$20			sbc 	#32
.960d	9d 1a 08	sta $081a,x			sta	 	lineBuffer-1,x 				; write back
.9610	80 e6		bra $95f8			bra 	_FLBCLoop
.9612					_FLBCInQuotes:
.9612	e8		inx				inx 								; advance
.9613	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; get next
.9616	f0 07		beq $961f			beq 	_FLBCExit 					; exit on EOS
.9618	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.961a	d0 f6		bne $9612			bne 	_FLBCInQuotes
.961c	e8		inx				inx 								; skip over it
.961d	80 d9		bra $95f8			bra 	_FLBCLoop
.961f					_FLBCExit:
.961f	60		rts				rts
.9620					TokeniseExtractLineNumber:
.9620	ad 1d 07	lda $071d			lda 	tokenLineNumber+1 			; push current value on stack
.9623	48		pha				pha
.9624	ad 1c 07	lda $071c			lda 	tokenLineNumber
.9627	48		pha				pha
.9628	20 5e 96	jsr $965e			jsr 	_TELNTimes2 				; line # x 4
.962b	20 5e 96	jsr $965e			jsr 	_TELNTimes2 				; line # x 2
.962e	18		clc				clc 								; add stacked value
.962f	68		pla				pla
.9630	6d 1c 07	adc $071c			adc 	tokenLineNumber
.9633	8d 1c 07	sta $071c			sta 	tokenLineNumber
.9636	68		pla				pla
.9637	6d 1d 07	adc $071d			adc 	tokenLineNumber+1
.963a	8d 1d 07	sta $071d			sta 	tokenLineNumber+1 			; line # x 5
.963d	20 5e 96	jsr $965e			jsr 	_TELNTimes2 				; line # x 10
.9640	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; get and consume character
.9643	e8		inx				inx
.9644	29 0f		and #$0f			and 	#15 						; add to line #
.9646	18		clc				clc
.9647	6d 1c 07	adc $071c			adc 	tokenLineNumber
.964a	8d 1c 07	sta $071c			sta 	tokenLineNumber
.964d	90 03		bcc $9652			bcc 	_TLENNoCarry
.964f	ee 1d 07	inc $071d			inc 	tokenLineNumber+1
.9652					_TLENNoCarry:
.9652	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; more digits ?
.9655	c9 30		cmp #$30			cmp 	#'0'
.9657	90 04		bcc $965d			bcc 	_TLENExit
.9659	c9 3a		cmp #$3a			cmp 	#'9'+1
.965b	90 c3		bcc $9620			bcc 	TokeniseExtractLineNumber
.965d					_TLENExit:
.965d	60		rts				rts
.965e					_TELNTimes2:
.965e	0e 1c 07	asl $071c			asl 	tokenLineNumber
.9661	2e 1d 07	rol $071d			rol 	tokenLineNumber+1
.9664	60		rts				rts
.9665					TokeniseWriteByte:
.9665	da		phx				phx
.9666	ae 1b 07	ldx $071b			ldx 	tokenOffset 				; next slot to write to
.9669	9d 1b 07	sta $071b,x			sta 	tokenOffset,x 				; write byte out
.966c	ee 1b 07	inc $071b			inc 	tokenOffset 				; advance slot.
.966f	fa		plx				plx
.9670	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9671					CheckCreateVariableRecord:
.9671	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9673	85 36		sta $36				sta 	0+zTemp0
.9675	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9677	85 37		sta $37				sta 	1+zTemp0
.9679					_CCVSearch:
.9679	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.967b	f0 2c		beq $96a9			beq 	_CCVFail
.967d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.967f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9681	cd 03 07	cmp $0703			cmp 	identHash
.9684	d0 16		bne $969c			bne 	_CCVNext
.9686	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9688	ae 00 07	ldx $0700			ldx 	identStart
.968b					_CCVCompare:
.968b	bd 1b 08	lda $081b,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.968e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9690	e8		inx				inx 								; advance pointers
.9691	c8		iny				iny
.9692	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9693	d0 07		bne $969c			bne 	_CCVNext  					; didn't match go to next.
.9695	90 f4		bcc $968b			bcc 	_CCVCompare 				; not finished yet.
.9697	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.969a	f0 41		beq $96dd			beq 	_CCVFound 					; yes, we were successful
.969c					_CCVNext:
.969c	18		clc				clc
.969d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.969f	65 36		adc $36				adc 	zTemp0
.96a1	85 36		sta $36				sta 	zTemp0
.96a3	90 d4		bcc $9679			bcc 	_CCVSearch
.96a5	e6 37		inc $37				inc 	zTemp0+1
.96a7	80 d0		bra $9679			bra 	_CCVSearch
.96a9					_CCVFail:
.96a9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.96ab	ad 03 07	lda $0703			lda 	identHash
.96ae	91 36		sta ($36),y			sta 	(zTemp0),y
.96b0	c8		iny				iny 								; offset 2 is the type byte
.96b1	ad 04 07	lda $0704			lda 	identTypeByte
.96b4	91 36		sta ($36),y			sta 	(zTemp0),y
.96b6	c8		iny				iny
.96b7					_CCVData:
.96b7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.96b9	91 36		sta ($36),y			sta 	(zTemp0),y
.96bb	c8		iny				iny
.96bc	c0 08		cpy #$08			cpy 	#8
.96be	90 f7		bcc $96b7			bcc 	_CCVData
.96c0	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.96c3					_CCVCopyName:
.96c3	bd 1b 08	lda $081b,x			lda 	lineBuffer,x
.96c6	91 36		sta ($36),y			sta 	(zTemp0),y
.96c8	e8		inx				inx
.96c9	c8		iny				iny
.96ca	ec 02 07	cpx $0702			cpx 	identTypeEnd
.96cd	d0 f4		bne $96c3			bne 	_CCVCopyName
.96cf	98		tya				tya 								; patch offset
.96d0	92 36		sta ($36)			sta 	(zTemp0)
.96d2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.96d4	91 36		sta ($36),y			sta 	(zTemp0),y
.96d6	88		dey				dey
.96d7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.96d9	09 80		ora #$80			ora 	#$80
.96db	91 36		sta ($36),y			sta 	(zTemp0),y
.96dd					_CCVFound:
.96dd	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.96df	38		sec				sec
.96e0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.96e2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.96e4	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.96e7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.96e9	20 65 96	jsr $9665			jsr 	TokeniseWriteByte
.96ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9e95					MemoryPeek:
.9e95	b2 36		lda ($36)			lda 	(zTemp0)
.9e97	60		rts				rts
.9e98					MemoryPoke:
.9e98	92 36		sta ($36)			sta 	(zTemp0)
.9e9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9e9b					PrintHex:
.9e9b	48		pha				pha
.9e9c	4a		lsr a				lsr 	a
.9e9d	4a		lsr a				lsr 	a
.9e9e	4a		lsr a				lsr 	a
.9e9f	4a		lsr a				lsr 	a
.9ea0	20 a4 9e	jsr $9ea4			jsr 	_PrintNibble
.9ea3	68		pla				pla
.9ea4					_PrintNibble:
.9ea4	29 0f		and #$0f			and 	#15
.9ea6	c9 0a		cmp #$0a			cmp 	#10
.9ea8	90 02		bcc $9eac			bcc 	_NoShift
.9eaa	69 06		adc #$06			adc 	#6
.9eac					_NoShift:
.9eac	69 30		adc #$30			adc 	#48
.9eae	4c b1 9e	jmp $9eb1			jmp 	EXTPrintCharacter
.9eb1					EXTPrintCharacter:
.9eb1	48		pha				pha
.9eb2	da		phx				phx
.9eb3	5a		phy				phy
.9eb4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9eb7	7a		ply				ply
.9eb8	fa		plx				plx
.9eb9	68		pla				pla
.9eba	60		rts				rts
.9ebb					EXTInputSingleCharacter:
.9ebb	da		phx				phx
.9ebc	5a		phy				phy
.9ebd					_EISCWait:
.9ebd	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9ec0	c9 00		cmp #$00			cmp 	#0
.9ec2	f0 f9		beq $9ebd			beq 	_EISCWait
.9ec4	7a		ply				ply
.9ec5	fa		plx				plx
.9ec6	60		rts				rts
.9ec7					EXTInputLine:
.9ec7	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9ec9					_ILLoop:
.9ec9	da		phx				phx 								; read character in
.9eca	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9ecd	fa		plx				plx
.9ece	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9ed0	f0 12		beq $9ee4			beq 	_ILBackspace
.9ed2	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9ed4	f0 15		beq $9eeb			beq 	_ILExit
.9ed6	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9ed8	90 ef		bcc $9ec9			bcc 	_ILLoop
.9eda	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9edc	f0 eb		beq $9ec9			beq 	_ILLoop
.9ede	9d 1b 08	sta $081b,x			sta 	lineBuffer,x 				; save it
.9ee1	e8		inx				inx
.9ee2	80 e5		bra $9ec9			bra 	_ILLoop
.9ee4					_ILBackspace:
.9ee4	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9ee6	f0 e1		beq $9ec9			beq 	_ILLoop
.9ee8	ca		dex				dex 								; back one.
.9ee9	80 de		bra $9ec9			bra 	_ILLoop
.9eeb					_ILExit:
.9eeb	20 b1 9e	jsr $9eb1			jsr 	EXTPrintCharacter
.9eee	9e 1b 08	stz $081b,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9ef1	60		rts				rts
.9ef2					EXTBreakCheck:
.9ef2	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.96ed					MemoryNew:
.96ed	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.96ef	85 30		sta $30				sta 	codePtr
.96f1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.96f3	85 31		sta $31				sta 	codePtr+1
.96f5	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.96f7	92 30		sta ($30)			sta 	(codePtr)
.96f9	60		rts				rts
.96fa					MemoryAppend:
.96fa	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.96fc	85 30		sta $30				sta 	codePtr
.96fe	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9700	85 31		sta $31				sta 	codePtr+1
.9702					_MAFindEnd:
.9702	b2 30		lda ($30)			lda 	(codePtr)
.9704	f0 0d		beq $9713			beq 	_MAFoundEnd
.9706	18		clc				clc
.9707	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9709	65 30		adc $30				adc 	codePtr
.970b	85 30		sta $30				sta 	codePtr
.970d	90 02		bcc $9711			bcc 	_CREExit
.970f	e6 31		inc $31				inc 	codePtr+1
.9711					_CREExit:
.9711	80 ef		bra $9702			bra 	_MAFindEnd
.9713					_MAFoundEnd:
.9713	ac 1b 07	ldy $071b			ldy 	tokenOffset 				; bytes to copy
.9716	c0 04		cpy #$04			cpy 	#4 							; blank line
.9718	f0 0e		beq $9728			beq 	_MANoLine
.971a	a9 00		lda #$00			lda 	#0 							; end of program
.971c	91 30		sta ($30),y			sta 	(codePtr),y
.971e					_MACopy:
.971e	88		dey				dey
.971f	b9 1b 07	lda $071b,y			lda 	tokenOffset,y
.9722	91 30		sta ($30),y			sta 	(codePtr),y
.9724	c0 00		cpy #$00			cpy 	#0
.9726	d0 f6		bne $971e			bne 	_MACopy
.9728					_MANoLine:
.9728	60		rts				rts
.9729					MemoryInline:
.9729	98		tya				tya 								; put address into stack,x
.972a	18		clc				clc
.972b	65 30		adc $30				adc 	codePtr
.972d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9730	a5 31		lda $31				lda 	codePtr+1
.9732	69 00		adc #$00			adc 	#0
.9734	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9737	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.973a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.973d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.973e					MemoryTransferAX:
.973e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9740	86 37		stx $37				stx 	zTemp0+1
.9742	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9744	85 30		sta $30				sta 	codePtr
.9746	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9748	85 31		sta $31				sta 	codePtr+1
.974a					_MTAXLoop:
.974a	b2 30		lda ($30)			lda 	(codePtr)
.974c	f0 1d		beq $976b			beq 	_MTAXError 					; not found.
.974e	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9750	b1 30		lda ($30),y			lda 	(codePtr),y
.9752	c5 36		cmp $36				cmp 	zTemp0
.9754	d0 07		bne $975d			bne 	_MTAXNext
.9756	c8		iny				iny 								; check MSB
.9757	b1 30		lda ($30),y			lda 	(codePtr),y
.9759	c5 37		cmp $37				cmp 	zTemp0+1
.975b	f0 0d		beq $976a			beq 	_MTAXExit 					; success !
.975d					_MTAXNext:
.975d	18		clc				clc
.975e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9760	65 30		adc $30				adc 	codePtr
.9762	85 30		sta $30				sta 	codePtr
.9764	90 02		bcc $9768			bcc 	_CREExit
.9766	e6 31		inc $31				inc 	codePtr+1
.9768					_CREExit:
.9768	80 e0		bra $974a			bra 	_MTAXLoop
.976a					_MTAXExit:
.976a	60		rts				rts
.976b					_MTAXError:
.976b	a9 0d		lda #$0d		lda	#13
.976d	4c 85 86	jmp $8685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
