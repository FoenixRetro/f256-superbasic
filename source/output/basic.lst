
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Jan  7 14:59:18 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_JOYBLPAREN                       = $93; $93 JOYB(
=$94						KWD_JOYXLPAREN                       = $94; $94 JOYX(
=$95						KWD_JOYYLPAREN                       = $95; $95 JOYY(
=$96						KWD_LEFTDOLLARLPAREN                 = $96; $96 LEFT$(
=$97						KWD_LENLPAREN                        = $97; $97 LEN(
=$98						KWD_MAXLPAREN                        = $98; $98 MAX(
=$99						KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a						KWD_MINLPAREN                        = $9a; $9a MIN(
=$9b						KWD_NOTLPAREN                        = $9b; $9b NOT(
=$9c						KWD_PEEKLPAREN                       = $9c; $9c PEEK(
=$9d						KWD_PEEKDLPAREN                      = $9d; $9d PEEKD(
=$9e						KWD_PEEKLLPAREN                      = $9e; $9e PEEKL(
=$9f						KWD_PEEKWLPAREN                      = $9f; $9f PEEKW(
=$a0						KWD_PLAYINGLPAREN                    = $a0; $a0 PLAYING(
=$a1						KWD_RANDOMLPAREN                     = $a1; $a1 RANDOM(
=$a2						KWD_RIGHTDOLLARLPAREN                = $a2; $a2 RIGHT$(
=$a3						KWD_RNDLPAREN                        = $a3; $a3 RND(
=$a4						KWD_SGNLPAREN                        = $a4; $a4 SGN(
=$a5						KWD_SPCLPAREN                        = $a5; $a5 SPC(
=$a6						KWD_STRDOLLARLPAREN                  = $a6; $a6 STR$(
=$a7						KWD_TIMERLPAREN                      = $a7; $a7 TIMER(
=$a8						KWD_TRUE                             = $a8; $a8 TRUE
=$a9						KWD_VALLPAREN                        = $a9; $a9 VAL(
=$aa						KWD_FOR                              = $aa; $aa FOR
=$ab						KWD_IF                               = $ab; $ab IF
=$ac						KWD_PROC                             = $ac; $ac PROC
=$ad						KWD_REPEAT                           = $ad; $ad REPEAT
=$ae						KWD_WHILE                            = $ae; $ae WHILE
=$af						KWD_ENDIF                            = $af; $af ENDIF
=$b0						KWD_ENDPROC                          = $b0; $b0 ENDPROC
=$b1						KWD_NEXT                             = $b1; $b1 NEXT
=$b2						KWD_THEN                             = $b2; $b2 THEN
=$b3						KWD_UNTIL                            = $b3; $b3 UNTIL
=$b4						KWD_WEND                             = $b4; $b4 WEND
=$b5						KWD_BY                               = $b5; $b5 BY
=$b6						KWD_CALL                             = $b6; $b6 CALL
=$b7						KWD_CIRCLE                           = $b7; $b7 CIRCLE
=$b8						KWD_CLEAR                            = $b8; $b8 CLEAR
=$b9						KWD_COLOR                            = $b9; $b9 COLOR
=$ba						KWD_COLOUR                           = $ba; $ba COLOUR
=$bb						KWD_DATA                             = $bb; $bb DATA
=$bc						KWD_DIM                              = $bc; $bc DIM
=$bd						KWD_DOWNTO                           = $bd; $bd DOWNTO
=$be						KWD_ELSE                             = $be; $be ELSE
=$bf						KWD_FROM                             = $bf; $bf FROM
=$c0						KWD_GFX                              = $c0; $c0 GFX
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_READ                             = $cf; $cf READ
=$d0						KWD_RECT                             = $d0; $d0 RECT
=$d1						KWD_REM                              = $d1; $d1 REM
=$d2						KWD_SOLID                            = $d2; $d2 SOLID
=$d3						KWD_SOUND                            = $d3; $d3 SOUND
=$d4						KWD_SPRITE                           = $d4; $d4 SPRITE
=$d5						KWD_TEXT                             = $d5; $d5 TEXT
=$d6						KWD_TO                               = $d6; $d6 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$aa						KWC_FIRST_STRUCTURE = $aa
=$af						KWC_FIRST_STRUCTURE_DEC = $af
=$b4						KWC_LAST_STRUCTURE = $b4
=$83						KWC_FIRST_UNARY = $83
=$a9						KWC_LAST_UNARY = $a9

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 c1 bb	jsr $bbc1		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 f4 bb	jsr $bbf4		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 72 b5	jsr $b572		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 06 b8	jsr $b806		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 72 ab	jsr $ab72			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 36 81	jsr $8136			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 5f 83	jsr $835f			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 5f 83	jsr $835f			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 5f 83	jsr $835f			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 5f 83	jsr $835f			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.80c6		20 5e 8e	jsr $8e5e			jsr 	NewProgram 					; erase current program
.80c9		4c a2 85	jmp $85a2			jmp 	WarmStart					; make same size.
.80cc		4c a2 85	jmp $85a2			jmp 	WarmStart
>80cf		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80d1		09 09 30 37 2f 30 31 2f			.text 9,9,"07/01/23 25"
>80d9		32 33 20 32 35

;******  Return to file: ./common/aa.system/00start.asm

>80de		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80e2						ProcessEvents:
.80e2		a9 63		lda #$63			lda     #<event 					; tell kernel where events go.
.80e4		85 f0		sta $f0				sta     kernel.args.events+0
.80e6		a9 07		lda #$07			lda     #>event
.80e8		85 f1		sta $f1				sta     kernel.args.events+1
.80ea		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80ed		b0 27		bcs $8116			bcs 	_PEExitZ 					; nothing left to process.
.80ef		ad 63 07	lda $0763			lda 	event.type 					; go back if event not key.pressed.
.80f2		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.80f4		d0 ec		bne $80e2			bne 	ProcessEvents
.80f6		ad 69 07	lda $0769			lda	 	event.key.flags 			; is event.key.flags = 0 ?
.80f9		d0 e7		bne $80e2			bne 	ProcessEvents
.80fb		ad 68 07	lda $0768			lda 	event.key.ascii 			; is it Ctrl+C
.80fe		c9 03		cmp #$03			cmp 	#3
.8100		f0 11		beq $8113			beq 	_PEReturnBreak  			; no, keep going.
.8102		da		phx				phx
.8103		ae 61 06	ldx $0661			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8106		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8108		f0 06		beq $8110			beq 	_PENoQueue
.810a		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x 			; write into queue
.810d		ee 61 06	inc $0661			inc 	KeyboardQueueEntries 		; bump count
.8110						_PENoQueue:
.8110		fa		plx				plx
.8111		80 cf		bra $80e2			bra 	ProcessEvents
.8113						_PEReturnBreak:
.8113		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8115		60		rts				rts
.8116						_PEExitZ:
.8116		a9 00		lda #$00			lda 	#0
.8118		60		rts				rts
.8119						PopKeyboardQueue:
.8119		ad 61 06	lda $0661			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.811c		f0 17		beq $8135			beq 	_PKQExit 					; zero, then exit.
.811e		ad 59 06	lda $0659			lda 	KeyboardQueue 				; save head of keyboard queue
.8121		48		pha				pha
.8122		da		phx				phx 								; drop head of queue
.8123		a2 00		ldx #$00			ldx 	#0
.8125						_PKQLoop:
.8125		bd 5a 06	lda $065a,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8128		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.812b		e8		inx				inx
.812c		e0 07		cpx #$07			cpx 	#7
.812e		d0 f5		bne $8125			bne 	_PKQLoop
.8130		fa		plx				plx
.8131		ce 61 06	dec $0661			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8134		68		pla				pla 								; restore head of queue.
.8135						_PKQExit:
.8135		60		rts				rts
=8						KBDQueueSize = 8
.0659						KeyboardQueue:
>0659								.fill 	KBDQueueSize
.0661						KeyboardQueueEntries:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8136						KNLSetDrive:
.8136		8d 62 07	sta $0762			sta 	KNLDefaultDrive
.8139		60		rts				rts
.813a						KNLOpenFileWrite:
.813a		48		pha				pha
.813b		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.813d		80 03		bra $8142			bra 	KNLOpenStart
.813f						KNLOpenFileRead:
.813f		48		pha				pha
.8140		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8142						KNLOpenStart:
.8142		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8144		68		pla				pla
.8145		20 7a 81	jsr $817a			jsr 	KNLSetupFileName
.8148		a9 63		lda #$63			lda     #event & $FF 				; tell kernel where to store event data
.814a		85 f0		sta $f0				sta     kernel.args.events+0
.814c		a9 07		lda #$07			lda     #event >> 8
.814e		85 f1		sta $f1				sta     kernel.args.events+1
.8150		ad 62 07	lda $0762			lda 	KNLDefaultDrive 			; currently drive zero only.
.8153		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8155		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8158		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.815a		b0 1d		bcs $8179			bcs     _out
.815c						_loop
.815c		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.815f		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8162		b0 f8		bcs $815c			bcs     _loop
.8164		ad 63 07	lda $0763			lda 	event.type
.8167		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8169		f0 0a		beq $8175			beq 	_success
.816b		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.816d		f0 0a		beq $8179			beq 	_out
.816f		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8171		f0 06		beq $8179			beq 	_out
.8173		80 e7		bra $815c			bra     _loop
.8175						_success
.8175		ad 66 07	lda $0766			lda     event.file.stream
.8178		18		clc				clc
.8179						_out
.8179		60		rts				rts
.817a						KNLSetupFileName:
.817a		5a		phy				phy 								; save Y on stack
.817b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.817d		86 37		stx $37				stx 	zTemp0+1
.817f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8181		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8183		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8185						_KNLGetLength:
.8185		c8		iny				iny
.8186		b1 36		lda ($36),y			lda 	(zTemp0),y
.8188		d0 fb		bne $8185			bne 	_KNLGetLength
.818a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.818c		7a		ply				ply
.818d		60		rts				rts
.818e						KNLReadBlock:
.818e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8190		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8192		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8195		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8197		b0 2e		bcs $81c7			bcs     _KGNBExitFail               ; report as general error
.8199						_KGRBEventLoop:
.8199		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.819c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.819f		b0 f8		bcs $8199			bcs     _KGRBEventLoop
.81a1		ad 63 07	lda $0763			lda 	event.type 					; get event
.81a4		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81a6		f0 0a		beq $81b2			beq     _KNLRBGetNextByte
.81a8		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81aa		f0 1b		beq $81c7			beq 	_KGNBExitFail
.81ac		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81ae		f0 17		beq $81c7			beq 	_KGNBExitFail
.81b0		80 e7		bra $8199			bra 	_KGRBEventLoop
.81b2						_KNLRBGetNextByte:
.81b2		a9 62		lda #$62			lda     #<KNLReadBuffer 			; Set the target buffer
.81b4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81b6		a9 06		lda #$06			lda     #>KNLReadBuffer
.81b8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81ba		ad 69 07	lda $0769			lda     event.file.data.read 		; Set the target length
.81bd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81bf		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81c2		ad 69 07	lda $0769			lda     event.file.data.read 		; Return # of bytes read (in A)
.81c5		18		clc				clc
.81c6		60		rts				rts
.81c7						_KGNBExitFail:
.81c7		38		sec				sec
.81c8		60		rts				rts
.81c9						KNLWriteBlock:
.81c9		da		phx				phx
.81ca		5a		phy				phy
.81cb		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81cd		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81cf		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81d1		a5 37		lda $37				lda     zTemp0+1
.81d3		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81d5		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81d7		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81da		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81dc		b0 21		bcs $81ff			bcs 	_KWBFailed
.81de						_KNLWLoop:
.81de		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81e1		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81e4		b0 f8		bcs $81de			bcs     _KNLWLoop
.81e6		ad 63 07	lda $0763			lda     event.type 					; various errors.
.81e9		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81eb		f0 12		beq $81ff			beq 	_KWBFailed
.81ed		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81ef		f0 0e		beq $81ff			beq 	_KWBFailed
.81f1		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81f3		f0 0a		beq $81ff			beq 	_KWBFailed
.81f5		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.81f7		d0 e5		bne $81de			bne 	_KNLWLoop
.81f9		18		clc				clc
.81fa		ad 69 07	lda $0769			lda    event.file.wrote.wrote 		; get bytes written.
.81fd		80 01		bra $8200			bra 	_KWBExit
.81ff						_KWBFailed:
.81ff		38		sec				sec
.8200						_KWBExit:
.8200		7a		ply				ply
.8201		fa		plx				plx
.8202		60		rts				rts
.8203						KNLCloseFile:
.8203		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8205		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8208		60		rts				rts
.8209						KNLCheckKeyPressed:
.8209		a9 63		lda #$63			lda     #<event 					; tell kernel where events go.
.820b		85 f0		sta $f0				sta     kernel.args.events+0
.820d		a9 07		lda #$07			lda     #>event
.820f		85 f1		sta $f1				sta     kernel.args.events+1
.8211		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8214		b0 0b		bcs $8221			bcs 	_CKPNoEvent 				; no event
.8216		ad 63 07	lda $0763			lda     event.type
.8219		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.821b		d0 04		bne $8221			bne 	_CKPNoEvent
.821d		ad 68 07	lda $0768			lda     event.key.ascii
.8220		60		rts				rts
.8221						_CKPNoEvent:
.8221		a9 00		lda #$00			lda 	#0
.8223		60		rts				rts
.8224						EXTReadController:
.8224		da		phx				phx
.8225		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8227		64 01		stz $01				stz 	1 							; switch to I/O 0
.8229		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.822c		86 01		stx $01				stx 	1 							; repair old I/O and exit
.822e		fa		plx				plx
.822f		60		rts				rts
.0662						KNLReadBuffer:
>0662								.fill   256
.0762						KNLDefaultDrive:
>0762								.byte 	?
.0763						event
>0763						type        .byte   ?   ; Enum above
>0764						buf         .byte   ?   ; page id or zero
>0765						ext         .byte   ?   ; page id or zero
.0766						key
>0766						keyboard    .byte   ?   ; Keyboard ID
>0767						raw         .byte   ?   ; Raw key ID
>0768						ascii       .byte   ?   ; ASCII value
>0769						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0766						mouse
.0766						delta
>0766						x           .byte   ?
>0767						y           .byte   ?
>0768						z           .byte   ?
>0769						buttons     .byte   ?
.0766						clicks
>0766						inner       .byte   ?
>0767						middle      .byte   ?
>0768						outer       .byte   ?
.0766						joystick
>0766						joy0        .byte   ?
>0767						joy1        .byte   ?
.0766						udp
>0766						token       .byte   ?   ; TODO: break out into fields
.0766						file
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						data
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						read        .byte   ?   ; Number of bytes actually read
.0768						wrote
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						wrote       .byte   ?   ; Number of bytes actually read
.0766						directory
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						volume
>0768						len         .byte   ?   ; Length of volname (in buf)
>0769						flags       .byte   ?   ; block size, text encoding
.0768						file
>0768						len         .byte   ?
>0769						flags       .byte   ?   ; block scale, text encoding, approx size
.0768						free
>0768						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.8230						AscGet:
.8230		fa		plx				plx 								; restore stack pos
.8231						AscGet2:
.8231		20 50 94	jsr $9450			jsr 	CheckRightBracket
.8234		20 e2 80	jsr $80e2	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.8237		d0 0b		bne $8244			bne 	_AGBreak
.8239		20 19 81	jsr $8119			jsr 	PopKeyboardQueue 			; wait for key.
.823c		c9 00		cmp #$00			cmp 	#0
.823e		f0 f4		beq $8234			beq 	_AGKey
.8240		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.8243		60		rts				rts
.8244						_AGBreak:
.8244		a9 01		lda #$01		lda	#1
.8246		4c 69 94	jmp $9469		jmp	ErrorHandler
.8249						AscInkey:
.8249		fa		plx				plx 								; restore stack pos
.824a						AscInkey2:
.824a		20 50 94	jsr $9450			jsr 	CheckRightBracket
.824d		20 19 81	jsr $8119			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.8250		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.8253		60		rts				rts
.8254						ChrGet:
.8254		fa		plx				plx
.8255		20 31 82	jsr $8231			jsr 	AscGet2
.8258		4c 5f 82	jmp $825f			jmp 	GetInkeyToString
.825b						ChrInkey:
.825b		fa		plx				plx
.825c		20 4a 82	jsr $824a			jsr 	AscInkey2
.825f						GetInkeyToString:
.825f		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.8261		f0 0b		beq $826e			beq 	_GKISNull
.8263		48		pha				pha
.8264		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8266		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.8269		68		pla				pla 								; write number to it
.826a		20 bc b5	jsr $b5bc			jsr 	StringTempWrite
.826d		60		rts				rts
.826e						_GKISNull:
.826e		a9 00		lda #$00			lda 	#0
.8270		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.8273		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8274						AssembleGroup1:
.8274		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8276		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.8279		80 02		bra $827d			bra 	AsmGroup12
.827b						AssembleGroup2:
.827b		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.827d						AsmGroup12:
.827d		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8280		68		pla				pla 								; pop the return address to access the information following.
.8281		fa		plx				plx
.8282		20 09 83	jsr $8309			jsr 	AccessParameters 			; get opcode and save as base
.8285		8d 24 04	sta $0424			sta 	BaseOpcode
.8288		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.828b		d0 08		bne $8295			bne 	_AG12HaveMask
.828d		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.828f		20 11 83	jsr $8311			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8292		8d 25 04	sta $0425			sta 	ModeMask
.8295						_AG12HaveMask:
.8295		20 45 84	jsr $8445			jsr 	TypeAndCalculateOperand 	; get zero page type
.8298		da		phx				phx 								; save found address mode
.8299		20 75 83	jsr $8375			jsr 	AssembleModeX
.829c		fa		plx				plx  								; restore address mode
.829d		b0 0b		bcs $82aa			bcs 	_AG12Exit
.829f		20 ab 82	jsr $82ab			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82a2		20 75 83	jsr $8375			jsr 	AssembleModeX
.82a5		b0 03		bcs $82aa			bcs 	_AG12Exit
.82a7		4c 32 a5	jmp $a532			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82aa						_AG12Exit:
.82aa		60		rts				rts
.82ab						PromoteToAbsolute:
.82ab		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82ad		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82af		f0 19		beq $82ca			beq 	_PTADo
.82b1		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82b3		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82b5		f0 13		beq $82ca			beq 	_PTADo
.82b7		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82b9		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82bb		f0 0d		beq $82ca			beq 	_PTADo
.82bd		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82bf		e0 d1		cpx #$d1			cpx 	#AM_IND
.82c1		f0 07		beq $82ca			beq 	_PTADo
.82c3		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82c5		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82c7		f0 01		beq $82ca			beq 	_PTADo
.82c9		60		rts				rts
.82ca						_PTADo:
.82ca		aa		tax				tax
.82cb		60		rts				rts
.82cc						AssembleGroup3:
.82cc		68		pla				pla 								; get parameters, which is just the opcode.
.82cd		fa		plx				plx
.82ce		20 09 83	jsr $8309			jsr 	AccessParameters 			; get and output opcode
.82d1		20 21 83	jsr $8321			jsr 	AssemblerWriteByte
.82d4		20 a9 84	jsr $84a9			jsr 	CalculateOperand 			; get a 16 bit operand
.82d7		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82d9		38		sec				sec
.82da		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.82dd		48		pha				pha 								; LSB in A
.82de		a5 60		lda $60				lda 	NSMantissa1
.82e0		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.82e3		aa		tax				tax 								; MSB in X
.82e4		68		pla				pla
.82e5		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82e6		69 7f		adc #$7f			adc 	#$7F
.82e8		90 01		bcc $82eb			bcc 	_AG3NoCarry
.82ea		e8		inx				inx
.82eb						_AG3NoCarry:
.82eb		38		sec				sec 								; fix back and write out anyways.
.82ec		e9 80		sbc #$80			sbc 	#$80
.82ee		20 21 83	jsr $8321			jsr 	AssemblerWriteByte
.82f1		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82f3		f0 0a		beq $82ff			beq 	_AG3Exit
.82f5		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.82f8		29 01		and #$01			and 	#1
.82fa		f0 03		beq $82ff			beq 	_AG3Exit
.82fc		4c 37 a5	jmp $a537			jmp 	RangeError 					; no, branch is out of range
.82ff						_AG3Exit:
.82ff		60		rts				rts
.8300						AssembleGroup4:
.8300		68		pla				pla 								; pop address
.8301		fa		plx				plx
.8302		20 09 83	jsr $8309			jsr 	AccessParameters 			; access and get first
.8305		20 21 83	jsr $8321			jsr 	AssemblerWriteByte 			; output it.
.8308		60		rts				rts
.8309						AccessParameters:
.8309		8d 21 04	sta $0421			sta 	ParamStart
.830c		8e 22 04	stx $0422			stx 	ParamStart+1
.830f		a9 01		lda #$01			lda 	#1
.8311						GetParameter:
.8311		5a		phy				phy
.8312		a8		tay				tay
.8313		ad 21 04	lda $0421			lda 	ParamStart
.8316		85 36		sta $36				sta 	zTemp0
.8318		ad 22 04	lda $0422			lda 	ParamStart+1
.831b		85 37		sta $37				sta 	zTemp0+1
.831d		b1 36		lda ($36),y			lda 	(zTemp0),y
.831f		7a		ply				ply
.8320		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8321						AssemblerWriteByte:
.8321		48		pha			pha
.8322		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8325		29 02		and #$02		and 	#2
.8327		f0 1b		beq $8344		beq 	_AWBNoPrint
.8329		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.832c		20 5f 83	jsr $835f		jsr 	PrintHex
.832f		ad 1e 04	lda $041e		lda		AssemblerAddress
.8332		20 5f 83	jsr $835f		jsr 	PrintHex
.8335		a9 20		lda #$20		lda 	#' '
.8337		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.833a		68		pla			pla 									; print byte
.833b		48		pha			pha
.833c		20 5f 83	jsr $835f		jsr 	PrintHex
.833f		a9 0d		lda #$0d		lda 	#13
.8341		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8344						_AWBNoPrint:
.8344		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8347		85 36		sta $36			sta 	zTemp0
.8349		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.834c		f0 0e		beq $835c		beq 	_AWBRange
.834e		85 37		sta $37			sta 	zTemp0+1
.8350		68		pla			pla 									; write byte out
.8351		92 36		sta ($36)		sta 	(zTemp0)
.8353		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.8356		d0 03		bne $835b		bne 	_AWBNoCarry
.8358		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.835b						_AWBNoCarry:
.835b		60		rts			rts
.835c						_AWBRange:
.835c		4c 37 a5	jmp $a537		jmp 	RangeError
.835f						PrintHex:
.835f		48		pha				pha
.8360		4a		lsr a				lsr 	a
.8361		4a		lsr a				lsr 	a
.8362		4a		lsr a				lsr 	a
.8363		4a		lsr a				lsr 	a
.8364		20 68 83	jsr $8368			jsr 	_PrintNibble
.8367		68		pla				pla
.8368						_PrintNibble:
.8368		29 0f		and #$0f			and 	#15
.836a		c9 0a		cmp #$0a			cmp 	#10
.836c		90 02		bcc $8370			bcc 	_NoShift
.836e		69 06		adc #$06			adc 	#6
.8370						_NoShift:
.8370		69 30		adc #$30			adc 	#48
.8372		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8375						AssembleModeX:
.8375		5a		phy				phy
.8376		ad 23 04	lda $0423			lda 	IsGroup1
.8379		f0 17		beq $8392			beq 	_AMXGroup2
.837b		8a		txa				txa 							; is it in group # 1
.837c		29 40		and #$40			and 	#AM_ISG1
.837e		f0 4d		beq $83cd			beq 	_AMXFail 				; no, give up.
.8380		8a		txa				txa 							; get back.
.8381		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8383		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8385		d0 22		bne $83a9			bne 	_AMXHaveInfo
.8387		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.838a		c9 81		cmp #$81			cmp 	#$81
.838c		f0 3f		beq $83cd			beq 	_AMXFail
.838e		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8390		80 17		bra $83a9			bra 	_AMXHaveInfo 			; odd design decision there.
.8392						_AMXGroup2:
.8392		8a		txa				txa 							; is it in group 2 ?
.8393		29 20		and #$20			and 	#AM_ISG2
.8395		f0 36		beq $83cd			beq 	_AMXFail 				; no, give up.
.8397		8a		txa				txa 							; get the offset into Y
.8398		29 1f		and #$1f			and 	#$1F
.839a		4a		lsr a				lsr 	a 						; make it 0-7.
.839b		4a		lsr a				lsr  	a
.839c		a8		tay				tay
.839d		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83a0						_AMXCheckOkay:
.83a0		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83a1		88		dey				dey
.83a2		10 fc		bpl $83a0			bpl 	_AMXCheckOkay
.83a4		90 27		bcc $83cd			bcc 	_AMXFail 				; not allowed.
.83a6		8a		txa				txa  							; get mask back
.83a7		29 1f		and #$1f			and 	#$1F
.83a9						_AMXHaveInfo:
.83a9		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83ab		10 04		bpl $83b1			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83ad		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83af		d0 1c		bne $83cd			bne 	_AMXFail
.83b1						_AMXAnySize:
.83b1		18		clc				clc 							; add offset to the base opcode
.83b2		6d 24 04	adc $0424			adc 	BaseOpcode
.83b5						_AMXOutputCode:
.83b5		20 21 83	jsr $8321			jsr 	AssemblerWriteByte 		; write the opcode out.
.83b8		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83ba		f0 0e		beq $83ca			beq 	_AMXExit
.83bc		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83be		20 21 83	jsr $8321			jsr 	AssemblerWriteByte
.83c1		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83c3		30 05		bmi $83ca			bmi 	_AMXExit
.83c5		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83c7		20 21 83	jsr $8321			jsr 	AssemblerWriteByte
.83ca						_AMXExit:
.83ca		7a		ply				ply
.83cb		38		sec				sec
.83cc		60		rts				rts
.83cd						_AMXFail:
.83cd		a0 00		ldy #$00			ldy 	#0
.83cf						_AMXCheckOddities:
.83cf		8a		txa				txa
.83d0		d9 f7 83	cmp $83f7,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83d3		d0 15		bne $83ea			bne 	_AMXCONext
.83d5		b9 f5 83	lda $83f5,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83d8		cd 24 04	cmp $0424			cmp 	BaseOpcode
.83db		d0 0d		bne $83ea			bne 	_AMXCONext
.83dd		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83df		10 04		bpl $83e5			bpl 	_AMXCONotZero
.83e1		a5 60		lda $60				lda 	NSMantissa1
.83e3		d0 05		bne $83ea			bne 	_AMXCONext
.83e5						_AMXCONotZero:
.83e5		b9 f6 83	lda $83f6,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83e8		80 cb		bra $83b5			bra 	_AMXOutputCode 			; and assemble it
.83ea						_AMXCONext:
.83ea		c8		iny				iny
.83eb		c8		iny				iny
.83ec		c8		iny				iny
.83ed		b9 f5 83	lda $83f5,y			lda 	ExtraOpcode+0,y 		; end of table
.83f0		d0 dd		bne $83cf			bne 	_AMXCheckOddities
.83f2						_AMXCOFail:
.83f2		7a		ply				ply
.83f3		18		clc				clc
.83f4		60		rts				rts
.83f5						ExtraOpcode:
>83f5		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>83f8		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>83fb		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>83fe		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8401		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8404		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8407		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>840a		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>840d		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8410		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8413		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8414						LabelHere:
.8414		c8		iny				iny 								; skip .
.8415		a2 00		ldx #$00			ldx 	#0 							; get a term
.8417		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm
.841a		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.841c		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.841e		d0 22		bne $8442			bne 	_ALType 					; otherwise typing error
.8420		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8422		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8424		b5 60		lda $60,x			lda 	NSMantissa1,x
.8426		85 37		sta $37				sta 	zTemp0+1
.8428		5a		phy				phy 								; copy address in (64k)
.8429		a0 01		ldy #$01			ldy 	#1
.842b		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.842e		92 36		sta ($36)			sta 	(zTemp0)
.8430		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8433		91 36		sta ($36),y			sta 	(zTemp0),y
.8435		c8		iny				iny
.8436		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8438		91 36		sta ($36),y			sta 	(zTemp0),y
.843a		c8		iny				iny
.843b		91 36		sta ($36),y			sta 	(zTemp0),y
.843d		c8		iny				iny
.843e		91 36		sta ($36),y			sta 	(zTemp0),y
.8440		7a		ply				ply
.8441		60		rts				rts
.8442						_ALType:
.8442		4c 3c a5	jmp $a53c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8445						TypeAndCalculateOperand:
.8445		b1 30		lda ($30),y			lda 	(codePtr),y
.8447		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8449		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.844b		f0 5b		beq $84a8			beq 	_TACOExit
.844d		c9 80		cmp #$80			cmp 	#KWC_EOL
.844f		f0 57		beq $84a8			beq 	_TACOExit
.8451		c8		iny				iny
.8452		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8454		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8456		f0 51		beq $84a9			beq 	CalculateOperand
.8458		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.845a		f0 1f		beq $847b			beq 	_TACOIndirect
.845c		88		dey				dey 								; undo get of first character
.845d		20 a9 84	jsr $84a9			jsr 	CalculateOperand 			; get operand
.8460		b1 30		lda ($30),y			lda 	(codePtr),y
.8462		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8464		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8466		d0 40		bne $84a8			bne 	_TACOExit
.8468		c8		iny				iny
.8469		20 b3 84	jsr $84b3			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.846c		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.846e		c9 58		cmp #$58			cmp 	#'X'
.8470		f0 36		beq $84a8			beq 	_TACOExit
.8472		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8474		c9 59		cmp #$59			cmp 	#'Y'
.8476		f0 30		beq $84a8			beq 	_TACOExit
.8478						_TACOSyntax:
.8478		4c 32 a5	jmp $a532			jmp 	SyntaxError
.847b						_TACOIndirect:
.847b		20 a9 84	jsr $84a9			jsr 	CalculateOperand 			; get the operand
.847e		b1 30		lda ($30),y			lda 	(codePtr),y
.8480		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8482		f0 17		beq $849b			beq 	_TACOIndX
.8484		20 50 94	jsr $9450			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8487		b1 30		lda ($30),y			lda 	(codePtr),y
.8489		a2 d1		ldx #$d1			ldx 	#AM_IND
.848b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.848d		d0 19		bne $84a8			bne 	_TACOExit
.848f		c8		iny				iny
.8490		20 b3 84	jsr $84b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8493		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8495		d0 e1		bne $8478			bne 	_TACOSyntax
.8497		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8499		80 0d		bra $84a8			bra 	_TACOExit
.849b						_TACOIndX:
.849b		c8		iny				iny
.849c		20 b3 84	jsr $84b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.849f		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84a1		d0 d5		bne $8478			bne 	_TACOSyntax
.84a3		20 50 94	jsr $9450			jsr 	CheckRightBracket			; check )
.84a6		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84a8						_TACOExit:
.84a8		60		rts				rts
.84a9						CalculateOperand:
.84a9		48		pha				pha
.84aa		da		phx				phx
.84ab		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84ad		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.84b0		fa		plx				plx
.84b1		68		pla				pla
.84b2		60		rts				rts
.84b3						TACOCheckXY:
.84b3		b1 30		lda ($30),y			lda 	(codePtr),y
.84b5		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84b7		c9 40		cmp #$40			cmp 	#$40
.84b9		d0 21		bne $84dc			bne 	_TCXYFail
.84bb		b1 30		lda ($30),y			lda 	(codePtr),y
.84bd		18		clc				clc
.84be		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84c0		85 37		sta $37				sta 	zTemp0+1
.84c2		c8		iny				iny
.84c3		b1 30		lda ($30),y			lda 	(codePtr),y
.84c5		c8		iny				iny
.84c6		85 36		sta $36				sta 	zTemp0
.84c8		5a		phy				phy 								; save position
.84c9		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.84cd		d0 0c		bne $84db			bne 	_TCXYPopFail
.84cf		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84d1		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d3		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84d5		f0 08		beq $84df			beq 	_TCXYFound
.84d7		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84d9		f0 04		beq $84df			beq 	_TCXYFound
.84db						_TCXYPopFail:
.84db		7a		ply				ply
.84dc						_TCXYFail:
.84dc		a9 00		lda #$00			lda 	#0
.84de		60		rts				rts
.84df						_TCXYFound:
.84df		7a		ply				ply 								; restore position
.84e0		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84e3						BackloadProgram:
.84e3		20 5e 8e	jsr $8e5e			jsr 	NewProgram 					; does the actual NEW.
.84e6		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84e8		a9 3a		lda #$3a			lda 	#_BLLoad & $FF
.84ea		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.84ed		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84ef		8d 6a 07	sta $076a			sta 	BackLoadPage
.84f2		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84f4		8d 6b 07	sta $076b			sta 	0+BackLoadPointer
.84f7		a9 60		lda #$60			lda 	#(($6000) >> 8)
.84f9		8d 6c 07	sta $076c			sta 	1+BackLoadPointer
.84fc		a9 ff		lda #$ff			lda 	#$FF
.84fe		8d fa ff	sta $fffa			sta 	$FFFA
.8501						_BPLoop:
.8501		a2 ff		ldx #$ff			ldx 	#$FF
.8503		20 4f 85	jsr $854f			jsr 	BLReadByte 					; read a byte
.8506		c9 00		cmp #$00			cmp 	#0
.8508		f0 29		beq $8533			beq 	_BPExit 					; if 0 exit
.850a		30 27		bmi $8533			bmi 	_BPExit 					; if -ve exit
.850c						_BPCopy:
.850c		e8		inx				inx  								; copy byte into the lineBuffer
.850d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8510		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8513		20 4f 85	jsr $854f			jsr 	BLReadByte 					; read next byte
.8516		30 0a		bmi $8522			bmi 	_BPEndLine 					; -ve = EOL
.8518		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.851a		d0 02		bne $851e			bne 	_BPNotTab
.851c		a9 20		lda #$20			lda 	#' '
.851e						_BPNotTab:
.851e		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8520		b0 ea		bcs $850c			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8522						_BPEndLine:
.8522		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8525		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8528		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.852b		f0 d4		beq $8501			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.852d		38		sec				sec 								; append not insert
.852e		20 9b aa	jsr $aa9b			jsr 	MemoryInsertLine 			; append to current program
.8531		80 ce		bra $8501			bra 	_BPLoop
.8533						_BPExit:
.8533		9c fa ff	stz $fffa			stz 	$FFFA
.8536		20 5a 87	jsr $875a			jsr 	ClearCommand 				; clear variables etc.
.8539		60		rts				rts
.853a						_BLLoad:
>853a		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8542		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.854f						BLReadByte:
.854f		da		phx				phx
.8550		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8552		ad 6a 07	lda $076a			lda 	BackLoadPage	 			; set current page
.8555		85 0b		sta $0b				sta 	8+3
.8557		ad 6b 07	lda $076b			lda 	BackLoadPointer 			; copy pointer to zTemp0
.855a		85 36		sta $36				sta 	zTemp0
.855c		ad 6c 07	lda $076c			lda 	BackLoadPointer+1
.855f		85 37		sta $37				sta 	zTemp0+1
.8561		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8563		ee 6b 07	inc $076b			inc 	BackLoadPointer 			; bump pointer
.8566		d0 0f		bne $8577			bne 	_BLNoCarry
.8568		ee 6c 07	inc $076c			inc 	BackLoadPointer+1
.856b		10 0a		bpl $8577			bpl 	_BLNoCarry 					; need a new page
.856d		48		pha				pha
.856e		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8570		8d 6c 07	sta $076c			sta 	BackLoadPointer+1
.8573		ee 6a 07	inc $076a			inc 	BackLoadPage 				; next page from source.
.8576		68		pla				pla
.8577						_BLNoCarry:
.8577		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8579		fa		plx				plx
.857a		c9 00		cmp #$00			cmp 	#0
.857c		60		rts				rts
.076a						BackLoadPage:
>076a								.fill  	1
.076b						BackLoadPointer:
>076b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.857d						EditProgramCode:
.857d		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8580		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8583		20 3f ab	jsr $ab3f			jsr 	MemorySearch
.8586		90 05		bcc $858d			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8588		d0 03		bne $858d			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.858a		20 64 aa	jsr $aa64			jsr 	MemoryDeleteLine 			; delete the line
.858d						_EPCNoDelete:
.858d		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8590		c9 80		cmp #$80			cmp 	#KWC_EOL
.8592		f0 0d		beq $85a1			beq 	_EPCNoInsert
.8594		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8597		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.859a		20 3f ab	jsr $ab3f			jsr 	MemorySearch
.859d		18		clc				clc 								; insert at this point.
.859e		20 9b aa	jsr $aa9b			jsr 	MemoryInsertLine 			; insert the line
.85a1						_EPCNoInsert:
.85a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85a2						WarmStart:
.85a2		a2 ff		ldx #$ff			ldx 	#$FF
.85a4		9a		txs				txs
.85a5		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85a7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85aa		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.85ad		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.85b0		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.85b3		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.85b6		d0 17		bne $85cf			bne 	_WSEditCode 				; if so,edit code.
.85b8		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85bb		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.85bd		85 30		sta $30				sta 	codePtr
.85bf		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85c1		85 31		sta $31				sta 	codePtr+1
.85c3		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.85c6		c9 80		cmp #$80			cmp 	#KWC_EOL
.85c8		f0 d8		beq $85a2			beq 	WarmStart
.85ca		20 ee 8f	jsr $8fee			jsr 	RUNCodePointerLine 			; execute that line.
.85cd		80 d3		bra $85a2			bra 	WarmStart
.85cf						_WSEditCode:
.85cf		20 7d 85	jsr $857d			jsr 	EditProgramCode 			; edit the program code
.85d2		20 5a 87	jsr $875a			jsr 	ClearCommand 				; clear all variables etc.
.85d5		80 cb		bra $85a2			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85d7						AssembleCommand:
.85d7		a2 00		ldx #$00			ldx 	#0
.85d9		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; start address
.85dc		a5 58		lda $58				lda 	NSMantissa0
.85de		8d 1e 04	sta $041e			sta 	AssemblerAddress
.85e1		a5 60		lda $60				lda 	NSMantissa1
.85e3		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.85e6		20 58 94	jsr $9458			jsr 	CheckComma
.85e9		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; options 0-3
.85ec		a5 58		lda $58				lda 	NSMantissa0
.85ee		8d 20 04	sta $0420			sta 	AssemblerControl
.85f1		60		rts				rts
.85f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85f3						AssertCommand:
.85f3		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.85f5		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; the assert test
.85f8		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; exit if result is non zero.
.85fb		d0 05		bne $8602			bne 	_ACExit
.85fd		a9 0a		lda #$0a		lda	#10
.85ff		4c 69 94	jmp $9469		jmp	ErrorHandler
.8602						_ACExit:
.8602		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.8603						Command_BLoad:
.8603		a2 00		ldx #$00			ldx 	#0
.8605		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; file name to load
.8608		20 58 94	jsr $9458			jsr 	CheckComma 					; consume comma
.860b		e8		inx				inx
.860c		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; load address (full physical address)
.860f		5a		phy				phy
.8610		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8612		a6 60		ldx $60				ldx 	NSMantissa1
.8614		20 3f 81	jsr $813f			jsr 	KNLOpenFileRead 			; open file for reading
.8617		b0 4e		bcs $8667			bcs 	CBLErrorHandler 			; error, so fail.
.8619		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.861c		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.861e		20 6a 86	jsr $866a			jsr 	BLOpenPhysicalMemory 		; open for access.
.8621						_BLReadFile:
.8621		ad 71 07	lda $0771			lda 	BasicFileStream
.8624		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8626		20 8e 81	jsr $818e			jsr 	KNLReadBlock 				; read next block
.8629		b0 22		bcs $864d			bcs 	_BLFileError 				; file error, which might be EOF.
.862b		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.862d		f0 f2		beq $8621			beq 	_BLReadFile
.862f		8d 6f 07	sta $076f			sta 	BLCopyCounter 				; counter.
.8632		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; copy the buffer out here
.8635		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8637						_BLCopyLoop:
.8637		bd 62 06	lda $0662,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.863a		91 3a		sta ($3a),y			sta 	(zTemp2),y
.863c		c8		iny				iny
.863d		d0 03		bne $8642			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.863f		20 92 86	jsr $8692			jsr 	BLAdvancePhysicalMemory
.8642						_BLNoAdjust:
.8642		e8		inx				inx
.8643		ce 6f 07	dec $076f			dec 	BLCopyCounter
.8646		d0 ef		bne $8637			bne 	_BLCopyLoop
.8648		8c 6e 07	sty $076e			sty 	BLYOffset 					; update Y offset
.864b		80 d4		bra $8621			bra 	_BLReadFile 				; go ask for more.
.864d						_BLFileError:
.864d		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.864f		d0 16		bne $8667			bne 	CBLErrorHandler				; no, it's an actual error
.8651		20 8c 86	jsr $868c			jsr 	BLClosePhysicalMemory 		; close the access.
.8654		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.8657		20 03 82	jsr $8203			jsr 	KNLCloseFile
.865a		7a		ply				ply
.865b		60		rts				rts
.865c						CBLCloseError:
.865c		48		pha				pha
.865d		20 8c 86	jsr $868c			jsr 	BLClosePhysicalMemory
.8660		ad 71 07	lda $0771			lda 	BasicFileStream
.8663		20 03 82	jsr $8203			jsr 	KNLCloseFile
.8666		68		pla				pla
.8667						CBLErrorHandler:
.8667		4c 19 8d	jmp $8d19			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.866a						BLOpenPhysicalMemory:
.866a		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.866c		8d 6d 07	sta $076d			sta 	BLNormalMapping
.866f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8671		8d 6e 07	sta $076e			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8674		64 3a		stz $3a				stz 	zTemp2
.8676		b5 60		lda $60,x			lda 	NSMantissa1,x
.8678		29 1f		and #$1f			and 	#$1F
.867a		09 60		ora #$60			ora 	#BLAccessPage << 5
.867c		85 3b		sta $3b				sta 	zTemp2+1
.867e		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8680		16 60		asl $60,x			asl 	NSMantissa1,x
.8682		2a		rol a				rol 	a
.8683		16 60		asl $60,x			asl 	NSMantissa1,x
.8685		2a		rol a				rol 	a
.8686		16 60		asl $60,x			asl 	NSMantissa1,x
.8688		2a		rol a				rol 	a
.8689		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.868b		60		rts				rts
.868c						BLClosePhysicalMemory:
.868c		ad 6d 07	lda $076d			lda 	BLNormalMapping
.868f		85 0b		sta $0b				sta 	BLAccessPage+8
.8691		60		rts				rts
.8692						BLAdvancePhysicalMemory:
.8692		48		pha				pha
.8693		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8695		a5 3b		lda $3b				lda 	zTemp2+1
.8697		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8699		d0 06		bne $86a1			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.869b		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.869d		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.869f		85 3b		sta $3b				sta 	zTemp2+1
.86a1						_BLAPMExit:
.86a1		68		pla				pla
.86a2		60		rts				rts
.076d						BLNormalMapping:
>076d								.fill 	1
.076e						BLYOffset:
>076e								.fill 	1
.076f						BLCopyCounter:
>076f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86a3						Command_BSave:
.86a3		a2 00		ldx #$00			ldx 	#0
.86a5		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; file name to load
.86a8		20 58 94	jsr $9458			jsr 	CheckComma 					; consume comma
.86ab		e8		inx				inx
.86ac		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; load address (full physical address)
.86af		20 58 94	jsr $9458			jsr 	CheckComma 					; consume comma
.86b2		e8		inx				inx
.86b3		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86b6		5a		phy				phy
.86b7		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86b9		a6 60		ldx $60				ldx 	NSMantissa1
.86bb		20 3a 81	jsr $813a			jsr 	KNLOpenFileWrite 			; open file for reading
.86be		b0 62		bcs $8722			bcs 	CBSErrorHandler 			; error, so fail.
.86c0		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.86c3		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86c5		20 6a 86	jsr $866a			jsr 	BLOpenPhysicalMemory 		; open for access.
.86c8		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86ca		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; used for data offset.
.86cd						_BSWriteToFileLoop:
.86cd		38		sec				sec 								; pre decrement count.
.86ce		a5 5a		lda $5a				lda 	NSMantissa0+2
.86d0		e9 01		sbc #$01			sbc 	#1
.86d2		85 5a		sta $5a				sta 	NSMantissa0+2
.86d4		a5 62		lda $62				lda 	NSMantissa1+2
.86d6		e9 00		sbc #$00			sbc 	#0
.86d8		85 62		sta $62				sta 	NSMantissa1+2
.86da		a5 6a		lda $6a				lda 	NSMantissa2+2
.86dc		e9 00		sbc #$00			sbc 	#0
.86de		85 6a		sta $6a				sta 	NSMantissa2+2
.86e0		30 15		bmi $86f7			bmi 	_BSFileComplete 			; undercounted, so exit.
.86e2		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86e4		9d 62 06	sta $0662,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86e7		e8		inx				inx
.86e8		c8		iny				iny 								; next byte
.86e9		d0 03		bne $86ee			bne 	_BSNoCheck
.86eb		20 92 86	jsr $8692			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86ee						_BSNoCheck:
.86ee		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86f0		d0 db		bne $86cd			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86f2		20 05 87	jsr $8705			jsr 	BSFlushBuffer 				; yes, flush the buffer
.86f5		80 d6		bra $86cd			bra 	_BSWriteToFileLoop 			; and keep on going
.86f7						_BSFileComplete:
.86f7		20 05 87	jsr $8705			jsr 	BSFlushBuffer 				; write the buffer remainder.
.86fa		20 8c 86	jsr $868c			jsr 	BLClosePhysicalMemory 		; close the access.
.86fd		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.8700		20 03 82	jsr $8203			jsr 	KNLCloseFile
.8703		7a		ply				ply
.8704		60		rts				rts
.8705						BSFlushBuffer:
.8705		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8707		f0 0d		beq $8716			beq 	_BSFBExit 					; if so, exit.
.8709		a9 62		lda #$62			lda 	#KNLReadBuffer & $FF 		; where to write from.
.870b		85 36		sta $36				sta 	zTemp0
.870d		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.870f		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8711		20 b4 92	jsr $92b4			jsr 	CLWriteByteBlock 			; write it.
.8714		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8716						_BSFBExit:
.8716		60		rts				rts
.8717						CBSSCloseError:
.8717		48		pha				pha
.8718		20 8c 86	jsr $868c			jsr 	BLClosePhysicalMemory
.871b		ad 71 07	lda $0771			lda 	BasicFileStream
.871e		20 03 82	jsr $8203			jsr 	KNLCloseFile
.8721		68		pla				pla
.8722						CBSErrorHandler:
.8722		4c 19 8d	jmp $8d19			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8725						CallCommand:
.8725		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8727		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.872a						_CCClear
.872a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.872b		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; these are optional sequentially.
.872e		e0 04		cpx #$04			cpx 	#4
.8730		d0 f8		bne $872a			bne 	_CCClear
.8732		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8734						_CCCParam:
.8734		b1 30		lda ($30),y			lda 	(codePtr),y
.8736		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8738		d0 09		bne $8743			bne 	_CCCRun6502
.873a		c8		iny				iny 								; skip comma
.873b		e8		inx				inx	 								; next level
.873c		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.873f		e0 03		cpx #$03			cpx 	#3
.8741		90 f1		bcc $8734			bcc 	_CCCParam 					; done all 3 ?
.8743						_CCCRun6502:
.8743		5a		phy				phy 								; save position
.8744		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8746		85 37		sta $37				sta 	zTemp0+1
.8748		a5 58		lda $58				lda 	NSMantissa0
.874a		85 36		sta $36				sta 	zTemp0
.874c		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.874e		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8750		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8752		20 57 87	jsr $8757			jsr 	_CCCZTemp0 					; call zTemp0
.8755		7a		ply				ply 								; restore position and exit
.8756		60		rts				rts
.8757						_CCCZTemp0:
.8757		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.875a						ClearCommand:
.875a		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.875c		85 36		sta $36				sta 	0+zTemp0
.875e		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8760		85 37		sta $37				sta 	1+zTemp0
.8762						_ClearZeroLoop:
.8762		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8764		f0 24		beq $878a			beq 	_ClearZeroEnd
.8766		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8768		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.876a						_ClearOneVariable:
.876a		91 36		sta ($36),y			sta 	(zTemp0),y
.876c		c8		iny				iny
.876d		c0 08		cpy #$08			cpy 	#8
.876f		d0 f9		bne $876a			bne 	_ClearOneVariable
.8771		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8773		b1 36		lda ($36),y			lda 	(zTemp0),y
.8775		c9 18		cmp #$18			cmp 	#NSTProcedure
.8777		d0 04		bne $877d			bne 	_ClearNotProcedure
.8779		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.877b		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.877d						_ClearNotProcedure:
.877d		18		clc				clc 								; go to the next variable
.877e		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8780		65 36		adc $36				adc 	zTemp0
.8782		85 36		sta $36				sta 	zTemp0
.8784		90 dc		bcc $8762			bcc 	_ClearZeroLoop
.8786		e6 37		inc $37				inc 	zTemp0+1
.8788		80 d8		bra $8762			bra 	_ClearZeroLoop
.878a						_ClearZeroEnd:
.878a		18		clc				clc
.878b		a5 36		lda $36				lda 	zTemp0
.878d		69 01		adc #$01			adc 	#1
.878f		8d 0c 04	sta $040c			sta 	lowMemPtr
.8792		a5 37		lda $37				lda 	zTemp0+1
.8794		69 00		adc #$00			adc 	#0
.8796		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.8799		20 f9 b4	jsr $b4f9			jsr 	StackReset
.879c		20 5f b5	jsr $b55f			jsr 	StringSystemInitialise
.879f		20 ff 92	jsr $92ff			jsr 	ProcedureScan
.87a2		20 9d 8f	jsr $8f9d			jsr 	Command_Restore
.87a5		9c 1e 04	stz $041e			stz 	AssemblerAddress
.87a8		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.87ab		9c 20 04	stz $0420			stz 	AssemblerControl
.87ae		9c 61 06	stz $0661			stz 	KeyboardQueueEntries
.87b1		20 a3 9f	jsr $9fa3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87b5						ClearScreen:
.87b5		5a		phy				phy
.87b6		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87b8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87bb		7a		ply				ply
.87bc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87bd						Command_Data:
.87bd		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87bf		a2 80		ldx #$80			ldx 	#KWC_EOL
.87c1		20 51 93	jsr $9351			jsr 	ScanForward
.87c4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87c5						DimCommand:
.87c5		b1 30		lda ($30),y			lda 	(codePtr),y
.87c7		29 c0		and #$c0			and 	#$C0
.87c9		c9 40		cmp #$40			cmp 	#$40
.87cb		d0 7a		bne $8847			bne 	_DCSyntax 				; n o, error.
.87cd		b1 30		lda ($30),y			lda 	(codePtr),y
.87cf		18		clc				clc
.87d0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87d2		85 3f		sta $3f				sta 	zaTemp+1
.87d4		c8		iny				iny
.87d5		b1 30		lda ($30),y			lda 	(codePtr),y
.87d7		c8		iny				iny
.87d8		85 3e		sta $3e				sta 	zaTemp
.87da		5a		phy				phy
.87db		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87dd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87df		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87e1		c9 18		cmp #$18			cmp 	#NSTProcedure
.87e3		f0 62		beq $8847			beq 	_DCSyntax
.87e5		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87e7		29 04		and #$04			and 	#NSBIsArray
.87e9		f0 64		beq $884f			beq 	_DCType
.87eb		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87ed		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ef		d0 59		bne $884a			bne 	_DCRedefine
.87f1		7a		ply				ply
.87f2		20 52 88	jsr $8852			jsr 	_DCGetSize 				; get array size, check it.
.87f5		5a		phy				phy
.87f6		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87f8		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87fa		7a		ply				ply 							; is there a second (e.g. ,x)
.87fb		b1 30		lda ($30),y			lda 	(codePtr),y
.87fd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87ff		d0 0a		bne $880b			bne 	_DCOneDimension
.8801		c8		iny				iny 							; skip comma
.8802		20 52 88	jsr $8852			jsr 	_DCGetSize 				; get 2nd array size
.8805		5a		phy				phy
.8806		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8808		91 3e		sta ($3e),y			sta 	(zaTemp),y
.880a		7a		ply				ply
.880b						_DCOneDimension:
.880b		5a		phy				phy 							; save position
.880c		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.880e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8810		aa		tax				tax
.8811		c8		iny				iny
.8812		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8814		e8		inx				inx 							; bump them.
.8815		1a		inc a				inc 	a
.8816		20 5f a3	jsr $a35f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8819		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.881b		29 e0		and #$e0			and 	#$E0
.881d		d0 23		bne $8842			bne 	_DCSize
.881f		a0 02		ldy #$02			ldy 	#2 						; get base type
.8821		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8823		20 60 88	jsr $8860			jsr 	ScaleByBaseType 		; scale by base type
.8826		a5 36		lda $36				lda 	zTemp0
.8828		a6 37		ldx $37				ldx 	zTemp0+1
.882a		20 65 9f	jsr $9f65			jsr 	AllocateXABytes 		; allocate memory
.882d		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.882f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8831		c8		iny				iny
.8832		8a		txa				txa
.8833		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8835		7a		ply				ply 							; get position back
.8836		20 50 94	jsr $9450			jsr 	CheckRightBracket 		; check )
.8839		b1 30		lda ($30),y			lda 	(codePtr),y
.883b		c8		iny				iny 							; consume in case
.883c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.883e		f0 85		beq $87c5			beq 	DimCommand
.8840		88		dey				dey 							; undo consume
.8841		60		rts				rts
.8842						_DCSize:
.8842		a9 16		lda #$16		lda	#22
.8844		4c 69 94	jmp $9469		jmp	ErrorHandler
.8847						_DCSyntax:
.8847		4c 32 a5	jmp $a532			jmp 	SyntaxError
.884a						_DCRedefine:
.884a		a9 15		lda #$15		lda	#21
.884c		4c 69 94	jmp $9469		jmp	ErrorHandler
.884f						_DCType:
.884f		4c 3c a5	jmp $a53c			jmp 	TypeError
.8852						_DCGetSize:
.8852		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8854		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 	; get array dimension
.8857		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8859		f0 e7		beq $8842			beq 	_DCSize
.885b		c9 fe		cmp #$fe			cmp 	#254
.885d		f0 e3		beq $8842			beq 	_DCSize
.885f		60		rts				rts
.8860						ScaleByBaseType:
.8860		29 10		and #$10			and 	#NSBIsString 			; is it string
.8862		d0 19		bne $887d			bne 	_SBBTString
.8864		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8866		48		pha				pha
.8867		a5 36		lda $36				lda 	zTemp0
.8869		48		pha				pha
.886a		06 36		asl $36				asl 	zTemp0 					; x 2
.886c		26 37		rol $37				rol 	zTemp0+1
.886e		06 36		asl $36				asl 	zTemp0 					; x 4
.8870		26 37		rol $37				rol 	zTemp0+1
.8872		68		pla				pla 							; add stacked value = x 5
.8873		65 36		adc $36				adc 	zTemp0
.8875		85 36		sta $36				sta 	zTemp0
.8877		68		pla				pla
.8878		65 37		adc $37				adc 	zTemp0+1
.887a		85 37		sta $37				sta 	zTemp0+1
.887c		60		rts				rts
.887d						_SBBTString:
.887d		06 36		asl $36				asl 	zTemp0
.887f		26 37		rol $37				rol 	zTemp0+1
.8881		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8882						Command_Dir:
.8882		ad 62 07	lda $0762			lda     KNLDefaultDrive				; set drive to list.
.8885		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8887		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8889		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.888c		b0 56		bcs $88e4			bcs     _CDExit
.888e						_CDEventLoop:
.888e		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8891		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8894		b0 f8		bcs $888e			bcs     _CDEventLoop
.8896		ad 63 07	lda $0763			lda     event.type
.8899		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.889b		f0 47		beq $88e4			beq    	_CDExit
.889d		20 a2 88	jsr $88a2			jsr     _CDMessages 				; handle various messages
.88a0		80 ec		bra $888e			bra     _CDEventLoop
.88a2						_CDMessages:
.88a2		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88a4		f0 15		beq $88bb			beq     _CDEVRead
.88a6		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88a8		f0 19		beq $88c3			beq     _CDEVVolume
.88aa		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88ac		f0 17		beq $88c5			beq     _CDEVFile
.88ae		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88b0		f0 28		beq $88da			beq     _CDEVFree
.88b2		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88b4		f0 26		beq $88dc			beq     _CDEVEOF
.88b6		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88b8		f0 22		beq $88dc			beq     _CDEVEOF
.88ba		60		rts				rts
.88bb						_CDEVRead:
.88bb		ad 66 07	lda $0766			lda     event.directory.stream
.88be		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88c0		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88c3						_CDEVVolume:
.88c3		80 f6		bra $88bb			bra     _CDEVRead
.88c5						_CDEVFile:
.88c5		a9 20		lda #$20			lda 	#32
.88c7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88ca		ad 68 07	lda $0768			lda     event.directory.file.len
.88cd		20 e7 88	jsr $88e7			jsr     _CDReadData
.88d0		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.88d3		a9 0d		lda #$0d			lda 	#13
.88d5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d8		80 e1		bra $88bb			bra     _CDEVRead
.88da						_CDEVFree:
.88da		80 00		bra $88dc			bra     _CDEVEOF
.88dc						_CDEVEOF:
.88dc		ad 66 07	lda $0766			lda     event.directory.stream
.88df		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.88e1		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.88e4						_CDExit:
.88e4		4c a2 85	jmp $85a2			jmp 	WarmStart
.88e7						_CDReadData:
.88e7		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88e9		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.88eb		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.88ed		a9 05		lda #$05			lda     #lineBuffer >> 8
.88ef		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.88f1		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.88f4		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.88f6		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.88f9		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.88fb		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.88fd		60		rts				rts
.88fe						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.88fe						Command_Drive:
.88fe		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.8901		20 36 81	jsr $8136			jsr 	KNLSetDrive
.8904		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8905						EndCommand:
.8905		4c a2 85	jmp $85a2			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8908						ForCommand:
.8908		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.890a		20 93 b4	jsr $b493			jsr 	StackOpen
.890d		a2 00		ldx #$00			ldx 	#0
.890f		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm
.8912		b5 50		lda $50,x			lda 	NSStatus,x
.8914		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8916		d0 47		bne $895f			bne		_FCError
.8918		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.891a		20 60 94	jsr $9460			jsr 	CheckNextA
.891d		e8		inx				inx
.891e		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; <from> in +1
.8921		b1 30		lda ($30),y			lda 	(codePtr),y
.8923		c8		iny				iny 								; consume it
.8924		48		pha				pha 								; save on stack for later
.8925		c9 bd		cmp #$bd			cmp 	#KWD_DOWNTO
.8927		f0 04		beq $892d			beq 	_FCNoSyntax
.8929		c9 d6		cmp #$d6			cmp 	#KWD_TO
.892b		d0 35		bne $8962			bne 	_FCSyntaxError
.892d						_FCNoSyntax:
.892d		e8		inx				inx
.892e		20 21 a3	jsr $a321			jsr 	EvaluateInteger
.8931		20 d8 b4	jsr $b4d8			jsr 	STKSaveCodePosition 		; save loop back position
.8934		68		pla				pla 								; restore DOWNTO or TO
.8935		5a		phy				phy 								; save Y on the stack
.8936		49 bd		eor #$bd			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8938		f0 02		beq $893c			beq 	_FCNotDownTo
.893a		a9 02		lda #$02			lda 	#2
.893c						_FCNotDownTo:
.893c		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.893d		a0 10		ldy #$10			ldy 	#16
.893f		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8941		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8943		a5 58		lda $58				lda 	NSMantissa0
.8945		91 34		sta ($34),y			sta 	(basicStack),y
.8947		a5 60		lda $60				lda 	NSMantissa1
.8949		c8		iny				iny
.894a		91 34		sta ($34),y			sta 	(basicStack),y
.894c		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.894e		a2 01		ldx #$01			ldx 	#1
.8950		20 65 89	jsr $8965			jsr 	FCIntegerToStack
.8953		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8955		a2 02		ldx #$02			ldx 	#2
.8957		20 65 89	jsr $8965			jsr 	FCIntegerToStack
.895a		20 80 89	jsr $8980			jsr 	CopyIndexToReference
.895d		7a		ply				ply 								; restore position
.895e		60		rts				rts
.895f						_FCError:
.895f		4c 3c a5	jmp $a53c			jmp 	TypeError
.8962						_FCSyntaxError:
.8962		4c 32 a5	jmp $a532			jmp 	SyntaxError
.8965						FCIntegerToStack:
.8965		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8967		10 03		bpl $896c			bpl	 	_FCNotNegative
.8969		20 7d a3	jsr $a37d			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.896c						_FCNotNegative:
.896c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.896e		91 34		sta ($34),y			sta 	(basicStack),y
.8970		c8		iny				iny
.8971		b5 60		lda $60,x			lda 	NSMantissa1,x
.8973		91 34		sta ($34),y			sta 	(basicStack),y
.8975		c8		iny				iny
.8976		b5 68		lda $68,x			lda 	NSMantissa2,x
.8978		91 34		sta ($34),y			sta 	(basicStack),y
.897a		c8		iny				iny
.897b		b5 70		lda $70,x			lda 	NSMantissa3,x
.897d		91 34		sta ($34),y			sta 	(basicStack),y
.897f		60		rts				rts
.8980						CopyIndexToReference:
.8980		5a		phy				phy
.8981		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8983		38		sec				sec 								; (because we copy from offset 8)
.8984		b1 34		lda ($34),y			lda 	(basicStack),y
.8986		e9 08		sbc #$08			sbc 	#8
.8988		85 36		sta $36				sta 	zTemp0
.898a		c8		iny				iny
.898b		b1 34		lda ($34),y			lda 	(basicStack),y
.898d		e9 00		sbc #$00			sbc 	#0
.898f		85 37		sta $37				sta 	zTemp0+1
.8991		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8993		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8995		b1 34		lda ($34),y			lda 	(basicStack),y
.8997		0a		asl a				asl 	a 							; into carry
.8998		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.899a		90 14		bcc $89b0			bcc 	_CITRNormal
.899c		38		sec				sec
.899d						_CITRNegative:
.899d		a9 00		lda #$00			lda 	#0
.899f		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89a1		91 36		sta ($36),y			sta 	(zTemp0),y
.89a3		c8		iny				iny
.89a4		ca		dex				dex
.89a5		d0 f6		bne $899d			bne 	_CITRNegative
.89a7		88		dey				dey 								; look at MSB of mantissa
.89a8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89aa		09 80		ora #$80			ora 	#$80
.89ac		91 36		sta ($36),y			sta 	(zTemp0),y
.89ae		7a		ply				ply
.89af		60		rts				rts
.89b0						_CITRNormal:
.89b0		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89b2		91 36		sta ($36),y			sta 	(zTemp0),y
.89b4		c8		iny				iny
.89b5		ca		dex				dex
.89b6		d0 f8		bne $89b0			bne 	_CITRNormal
.89b8		7a		ply				ply 								; and exit.
.89b9		60		rts				rts
.89ba						NextCommand:
.89ba		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89bc		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89be		20 c0 b4	jsr $b4c0			jsr 	StackCheckFrame
.89c1		5a		phy				phy
.89c2		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89c4		b1 34		lda ($34),y			lda 	(basicStack),y
.89c6		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89c8		30 02		bmi $89cc			bmi 	_NCStepNeg
.89ca		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89cc						_NCStepNeg:
.89cc		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89ce		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89d0		18		clc				clc
.89d1						_NCBump:
.89d1		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89d3		91 34		sta ($34),y			sta 	(basicStack),y
.89d5		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89d7		c8		iny				iny 								; next byte
.89d8		ca		dex				dex 								; do four times
.89d9		d0 f6		bne $89d1			bne 	_NCBump
.89db		20 80 89	jsr $8980			jsr		CopyIndexToReference		; copy it to the reference variable.
.89de		a0 10		ldy #$10			ldy 	#16 						; get step count again
.89e0		b1 34		lda ($34),y			lda 	(basicStack),y
.89e2		0a		asl a				asl 	a 							; sign bit to carry
.89e3		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89e5		85 38		sta $38				sta 	zTemp1
.89e7		90 02		bcc $89eb			bcc 	_NCCompRev 					; use if step is +ve
.89e9		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89eb						_NCCompRev:
.89eb		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89ed		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89ef		85 39		sta $39				sta 	zTemp1+1
.89f1		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.89f3		38		sec				sec
.89f4						_NCCompare:
.89f4		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.89f6		b1 34		lda ($34),y			lda 	(basicStack),y
.89f8		a4 39		ldy $39				ldy 	zTemp1+1
.89fa		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89fc		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.89fe		e6 39		inc $39				inc 	zTemp1+1
.8a00		ca		dex				dex 								; do it 4 times.
.8a01		d0 f1		bne $89f4			bne 	_NCCompare
.8a03		50 02		bvc $8a07			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a05		49 80		eor #$80			eor 	#$80
.8a07						_NCNoOverflow:
.8a07		7a		ply				ply 								; restore Y position
.8a08		0a		asl a				asl 	a 							; is bit 7 set.
.8a09		90 04		bcc $8a0f			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a0b		20 b2 b4	jsr $b4b2			jsr 	StackClose 					; exit the loop
.8a0e		60		rts				rts
.8a0f						_NCLoopBack:
.8a0f		20 e9 b4	jsr $b4e9			jsr 	STKLoadCodePosition 		; loop back
.8a12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a13						Command_GOSUB:
.8a13		a2 00		ldx #$00			ldx 	#0
.8a15		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a18		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a1a		20 93 b4	jsr $b493			jsr 	StackOpen 					; create frame
.8a1d		20 d8 b4	jsr $b4d8			jsr 	STKSaveCodePosition 		; save current position
.8a20		4c 36 8a	jmp $8a36			jmp 	GotoStackX
.8a23						Command_RETURN:
.8a23		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a25		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a27		20 c0 b4	jsr $b4c0			jsr 	StackCheckFrame
.8a2a		20 e9 b4	jsr $b4e9			jsr 	STKLoadCodePosition 		; restore code position
.8a2d		20 b2 b4	jsr $b4b2			jsr 	StackClose
.8a30		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a31						GotoCommand:
.8a31		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a33		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.8a36						GotoStackX:
.8a36		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a38		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a39		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a3b		fa		plx				plx
.8a3c		20 3f ab	jsr $ab3f			jsr 	MemorySearch 				; transfer to line number AX.
.8a3f		90 05		bcc $8a46			bcc 	_GotoError 					; not found, off end.
.8a41		d0 03		bne $8a46			bne 	_GotoError 					; not found exactly
.8a43		4c e7 8f	jmp $8fe7			jmp 	RunNewLine 					; and go straight to new line code.
.8a46						_GotoError:
.8a46		a9 0d		lda #$0d		lda	#13
.8a48		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a4b						IfCommand:
.8a4b		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a4d		20 02 a3	jsr $a302			jsr 	EvaluateNumber
.8a50		b1 30		lda ($30),y			lda 	(codePtr),y
.8a52		c9 b2		cmp #$b2			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a54		d0 0a		bne $8a60			bne 	_IfStructured 				; we still support it.
.8a56		c8		iny				iny 								; consume THEN
.8a57		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; is it zero
.8a5a		f0 01		beq $8a5d			beq 	_IfFail 					; if fail, go to next line
.8a5c		60		rts				rts 								; if THEN just continue
.8a5d						_IfFail:
.8a5d		4c cf 8f	jmp $8fcf			jmp 	EOLCommand
.8a60						_IfStructured:
.8a60		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; is it zero
.8a63		d0 07		bne $8a6c			bne 	_IfExit 					; if not, then continue normally.
.8a65		a9 be		lda #$be			lda 	#KWD_ELSE 					; look for else/endif
.8a67		a2 af		ldx #$af			ldx 	#KWD_ENDIF
.8a69		20 51 93	jsr $9351			jsr 	ScanForward 				; and run from there
.8a6c						_IfExit:
.8a6c		60		rts				rts
.8a6d						ElseCode:
.8a6d		a9 af		lda #$af			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a6f		aa		tax				tax 								; so just go to the structure exit
.8a70		20 51 93	jsr $9351			jsr 	ScanForward
.8a73		60		rts				rts
.8a74						EndIf:
.8a74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8a75						Command_Input:
.8a75		9c 28 04	stz $0428			stz 	isPrintFlag
.8a78		80 0c		bra $8a86			bra 	Command_IP_Main
.8a7a						Command_CPrint:
.8a7a		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8a7c		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a7f		80 05		bra $8a86			bra 	Command_IP_Main
.8a81						Command_Print:
.8a81		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8a83		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a86						Command_IP_Main:
.8a86		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a87						_CPLoop:
.8a87		08		php				php 								; save last action flag
.8a88		b1 30		lda ($30),y			lda 	(codePtr),y
.8a8a		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a8c		f0 54		beq $8ae2			beq 	_CPExit
.8a8e		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a90		f0 50		beq $8ae2			beq 	_CPExit
.8a92		68		pla				pla 								; throw last action flag
.8a93		b1 30		lda ($30),y			lda 	(codePtr),y
.8a95		c8		iny				iny
.8a96		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8a98		f0 45		beq $8adf			beq 	_CPContinueWithSameLine
.8a9a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8a9c		f0 3c		beq $8ada			beq 	_CPTab
.8a9e		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aa0		f0 34		beq $8ad6			beq 	_CPNewLine
.8aa2		88		dey				dey 								; undo the get.
.8aa3		20 6b 99	jsr $996b			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8aa6		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8aa8		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8aaa		f0 0d		beq $8ab9			beq 	_CPIsValue 					; no, display it.
.8aac		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8aaf		d0 05		bne $8ab6			bne 	_CPIsPrint 					; otherwise display.
.8ab1		20 eb 8a	jsr $8aeb			jsr 	CIInputValue 				; input a value to the reference
.8ab4		80 20		bra $8ad6			bra 	_CPNewLine
.8ab6						_CPIsPrint:
.8ab6		20 30 9c	jsr $9c30			jsr 	Dereference 				; dereference if required.
.8ab9						_CPIsValue:
.8ab9		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8abb		29 10		and #$10			and 	#NSBIsString
.8abd		f0 09		beq $8ac8			beq 	_CPNumber
.8abf		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8ac1		a5 58		lda $58				lda 	NSMantissa0
.8ac3		20 4e 8b	jsr $8b4e			jsr 	CPPrintStringXA
.8ac6		80 be		bra $8a86			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8ac8						_CPNumber:
.8ac8		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8aca		20 e9 a1	jsr $a1e9			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8acd		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8acf		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8ad1		20 4e 8b	jsr $8b4e			jsr 	CPPrintStringXA 			; print it.
.8ad4		80 b0		bra $8a86			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8ad6						_CPNewLine:
.8ad6		a9 0d		lda #$0d			lda 	#13
.8ad8		80 02		bra $8adc			bra 	_CPPrintCharDirect
.8ada						_CPTab:
.8ada		a9 09		lda #$09			lda 	#9 							; print TAB
.8adc						_CPPrintCharDirect:
.8adc		20 69 8b	jsr $8b69			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8adf						_CPContinueWithSameLine:
.8adf		38		sec				sec 								; loop round with carry set, which
.8ae0		80 a5		bra $8a87			bra 	_CPLoop 					; will inhibit final CR
.8ae2						_CPExit:
.8ae2		28		plp				plp 								; get last action flag
.8ae3		b0 05		bcs $8aea			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ae5		a9 0d		lda #$0d			lda 	#13 						; print new line
.8ae7		20 69 8b	jsr $8b69			jsr 	CPPVControl
.8aea						_CPExit2:
.8aea		60		rts				rts
.8aeb						CIInputValue:
.8aeb		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8aed						_CIInputLine:
.8aed		20 6c 8b	jsr $8b6c			jsr 	CPInputVector 				; get key
.8af0		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8af2		f0 1f		beq $8b13			beq 	_CIHaveValue
.8af4		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8af6		f0 11		beq $8b09			beq 	_CIBackspace
.8af8		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8afa		90 f1		bcc $8aed			bcc 	_CIInputLine
.8afc		e0 50		cpx #$50			cpx 	#80 						; max length
.8afe		b0 ed		bcs $8aed			bcs 	_CIInputLine
.8b00		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8b03		e8		inx				inx
.8b04		20 61 8b	jsr $8b61			jsr 	CPPrintVector 				; echo it.
.8b07		80 e4		bra $8aed			bra 	_CIInputLine
.8b09						_CIBackspace:
.8b09		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b0b		f0 e0		beq $8aed			beq 	_CIInputLine
.8b0d		20 61 8b	jsr $8b61			jsr 	CPPrintVector 				; echo it.
.8b10		ca		dex				dex
.8b11		80 da		bra $8aed			bra 	_CIInputLine
.8b13						_CIHaveValue:
.8b13		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b16		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b18		29 10		and #$10			and 	#NSBIsString
.8b1a		f0 17		beq $8b33			beq 	_CIAssignNumber 			; assign a number
.8b1c		a2 01		ldx #$01			ldx 	#1
.8b1e		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b20		95 58		sta $58,x			sta 	NSMantissa0,x
.8b22		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b24		95 60		sta $60,x			sta 	NSMantissa1,x
.8b26		74 68		stz $68,x			stz 	NSMantissa2,x
.8b28		74 70		stz $70,x			stz 	NSMantissa3,x
.8b2a		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b2c		95 50		sta $50,x			sta  	NSStatus,x
.8b2e		ca		dex				dex 								; X = 0
.8b2f		20 a8 8b	jsr $8ba8			jsr 	AssignVariable
.8b32		60		rts				rts
.8b33						_CIAssignNumber:
.8b33		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b35		85 36		sta $36				sta 	zTemp0
.8b37		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b39		85 37		sta $37				sta 	zTemp0+1
.8b3b		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b3d		20 6b a1	jsr $a16b			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b40		90 07		bcc $8b49			bcc 	_CIIsOkay
.8b42		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b44		20 61 8b	jsr $8b61			jsr 	CPPrintVector
.8b47		80 a2		bra $8aeb			bra 	CIInputValue
.8b49						_CIIsOkay:
.8b49		ca		dex				dex 								; X = 0
.8b4a		20 a8 8b	jsr $8ba8			jsr 	AssignVariable
.8b4d		60		rts				rts
.8b4e						CPPrintStringXA:
.8b4e		5a		phy				phy
.8b4f		86 37		stx $37				stx 	zTemp0+1
.8b51		85 36		sta $36				sta 	zTemp0
.8b53		a0 00		ldy #$00			ldy 	#0
.8b55						_PSXALoop:
.8b55		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b57		f0 06		beq $8b5f			beq 	_PSXAExit
.8b59		20 61 8b	jsr $8b61			jsr 	CPPrintVector
.8b5c		c8		iny				iny
.8b5d		80 f6		bra $8b55			bra 	_PSXALoop
.8b5f						_PSXAExit:
.8b5f		7a		ply				ply
.8b60		60		rts				rts
.8b61						CPPrintVector:
.8b61		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b64		30 03		bmi $8b69			bmi 	CPPVControl
.8b66		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b69						CPPVControl:
.8b69		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b6c						CPInputVector:
.8b6c		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b6f						LetCommand:
.8b6f		a2 00		ldx #$00			ldx 	#0
.8b71		b1 30		lda ($30),y			lda 	(codePtr),y
.8b73		c9 10		cmp #$10			cmp 	#KWD_AT
.8b75		d0 14		bne $8b8b			bne 	_LCStandard
.8b77		c8		iny				iny 								; skip equal
.8b78		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8b7b		20 30 9c	jsr $9c30			jsr 	Dereference 				; dereference it to a value
.8b7e		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8b80		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b82		95 50		sta $50,x			sta 	NSStatus,x
.8b84		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b86		d0 0f		bne $8b97			bne 	_LCMain
.8b88		4c 3c a5	jmp $a53c			jmp 	TypeError 					; was a reference before.
.8b8b						_LCStandard:
.8b8b		ad 55 99	lda $9955			lda 	PrecedenceLevel+"*"			; precedence > this
.8b8e		20 6f 99	jsr $996f			jsr 	EvaluateExpressionAtPrecedence
.8b91		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8b93		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b95		f0 0e		beq $8ba5			beq 	_LetGoProc 					; it's a procedure call.
.8b97						_LCMain:
.8b97		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b99		20 60 94	jsr $9460			jsr 	CheckNextA
.8b9c		e8		inx				inx 								; RHS
.8b9d		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue
.8ba0		ca		dex				dex
.8ba1		20 a8 8b	jsr $8ba8			jsr 	AssignVariable
.8ba4		60		rts				rts
.8ba5						_LetGoProc:
.8ba5		4c a5 8e	jmp $8ea5			jmp 	CallProcedure
.8ba8						AssignVariable:
.8ba8		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8baa		48		pha				pha 								; save a copy
.8bab		55 51		eor $51,x			eor 	NSStatus+1,x
.8bad		29 10		and #$10			and 	#NSBIsString
.8baf		d0 0b		bne $8bbc			bne 	_ASError
.8bb1		68		pla				pla 								; get back
.8bb2		29 10		and #$10			and 	#NSBIsString 				; check type
.8bb4		d0 03		bne $8bb9			bne 	_ASString
.8bb6		4c 6e 9b	jmp $9b6e			jmp 	AssignNumber
.8bb9						_ASString:
.8bb9		4c cc 9b	jmp $9bcc			jmp 	AssignString
.8bbc						_ASError:
.8bbc		4c 3c a5	jmp $a53c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bbf						Command_List:
.8bbf		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8bc2		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bc4		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bc7		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc9		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bcb		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bcd		f0 72		beq $8c41			beq 	_CLListProcedure
.8bcf		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bd1		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8bd3		a9 ff		lda #$ff			lda 	#$FF
.8bd5		85 5f		sta $5f				sta 	NSMantissa0+7
.8bd7		85 67		sta $67				sta 	NSMantissa1+7
.8bd9		b1 30		lda ($30),y			lda 	(codePtr),y
.8bdb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bdd		f0 1a		beq $8bf9			beq 	_CLSecond
.8bdf		20 be 8c	jsr $8cbe			jsr 	CLIsDigit 					; if not digit, list all
.8be2		b0 20		bcs $8c04			bcs 	_CLStart
.8be4		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8be6		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.8be9		b1 30		lda ($30),y			lda 	(codePtr),y
.8beb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bed		f0 0a		beq $8bf9			beq 	_CLSecond 					; if so go get it
.8bef		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8bf1		85 5f		sta $5f				sta 	NSMantissa0+7
.8bf3		a5 64		lda $64				lda 	NSMantissa1+4
.8bf5		85 67		sta $67				sta 	NSMantissa1+7
.8bf7		80 0b		bra $8c04			bra 	_CLStart
.8bf9						_CLSecond:
.8bf9		c8		iny				iny 								; consume comma
.8bfa		20 be 8c	jsr $8cbe			jsr 	CLIsDigit 					; digit found
.8bfd		b0 05		bcs $8c04			bcs 	_CLStart 					; if not, continue listing
.8bff		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c01		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.8c04						_CLStart
.8c04		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c06		85 30		sta $30				sta 	codePtr
.8c08		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c0a		85 31		sta $31				sta 	codePtr+1
.8c0c						_CLLoop:
.8c0c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c0e		f0 03		beq $8c13			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c10		20 e2 80	jsr $80e2			jsr 	ProcessEvents
.8c13						_NoEvents:
.8c13		d0 27		bne $8c3c			bne 	_CLBreak
.8c15		b2 30		lda ($30)			lda 	(codePtr)
.8c17		f0 20		beq $8c39			beq 	_CLExit
.8c19		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c1b		20 ad 8c	jsr $8cad			jsr 	CLCompareLineNo
.8c1e		90 0c		bcc $8c2c			bcc 	_CLNext
.8c20		a2 07		ldx #$07			ldx 	#7
.8c22		20 ad 8c	jsr $8cad			jsr 	CLCompareLineNo
.8c25		f0 02		beq $8c29			beq 	_CLDoThisOne
.8c27		b0 03		bcs $8c2c			bcs 	_CLNext
.8c29						_CLDoThisOne:
.8c29		20 9a 8c	jsr $8c9a			jsr 	CLListOneLine 				; routine to list the current line.
.8c2c						_CLNext:
.8c2c		18		clc				clc
.8c2d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c2f		65 30		adc $30				adc 	codePtr
.8c31		85 30		sta $30				sta 	codePtr
.8c33		90 02		bcc $8c37			bcc 	_CREExit
.8c35		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c37						_CREExit:
.8c37		80 d3		bra $8c0c			bra 	_CLLoop
.8c39						_CLExit:
.8c39		4c a2 85	jmp $85a2			jmp 	WarmStart
.8c3c						_CLBreak:
.8c3c		a9 01		lda #$01		lda	#1
.8c3e		4c 69 94	jmp $9469		jmp	ErrorHandler
.8c41						_CLListProcedure:
.8c41		b1 30		lda ($30),y			lda 	(codePtr),y
.8c43		85 38		sta $38				sta 	zTemp1
.8c45		c8		iny				iny
.8c46		b1 30		lda ($30),y			lda 	(codePtr),y
.8c48		85 39		sta $39				sta 	zTemp1+1
.8c4a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c4c		85 30		sta $30				sta 	codePtr
.8c4e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c50		85 31		sta $31				sta 	codePtr+1
.8c52						_CLLPSearch:
.8c52		b2 30		lda ($30)			lda 	(codePtr)
.8c54		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c56		f0 e1		beq $8c39			beq 	_CLExit
.8c58		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c5a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c5c		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.8c5e		d0 0e		bne $8c6e			bne 	_CLLPNext
.8c60		c8		iny				iny 								; check if PROC this.
.8c61		b1 30		lda ($30),y			lda 	(codePtr),y
.8c63		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c65		d0 07		bne $8c6e			bne 	_CLLPNext
.8c67		c8		iny				iny
.8c68		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6a		c5 39		cmp $39				cmp 	zTemp1+1
.8c6c		f0 0d		beq $8c7b			beq 	_CLLPFound
.8c6e						_CLLPNext:
.8c6e		18		clc				clc
.8c6f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c71		65 30		adc $30				adc 	codePtr
.8c73		85 30		sta $30				sta 	codePtr
.8c75		90 02		bcc $8c79			bcc 	_CREExit
.8c77		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c79						_CREExit:
.8c79		80 d7		bra $8c52			bra 	_CLLPSearch
.8c7b						_CLLPFound:
.8c7b		b2 30		lda ($30)			lda 	(codePtr)
.8c7d		f0 ba		beq $8c39			beq 	_CLExit
.8c7f		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8c81		b1 30		lda ($30),y			lda 	(codePtr),y
.8c83		48		pha				pha
.8c84		20 9a 8c	jsr $8c9a			jsr 	CLListOneLine 				; list line and go forward
.8c87		18		clc				clc
.8c88		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c8a		65 30		adc $30				adc 	codePtr
.8c8c		85 30		sta $30				sta 	codePtr
.8c8e		90 02		bcc $8c92			bcc 	_CREExit
.8c90		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c92						_CREExit:
.8c92		68		pla				pla 								; reached ENDPROC ?
.8c93		c9 b0		cmp #$b0			cmp 	#KWD_ENDPROC
.8c95		d0 e4		bne $8c7b			bne 	_CLLPFound
.8c97		4c a2 85	jmp $85a2			jmp 	WarmStart
.8c9a						CLListOneLine:
.8c9a		20 b4 93	jsr $93b4			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8c9d		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ca0		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ca2		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8ca4		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.8ca7		a9 0d		lda #$0d			lda 	#13 						; new line
.8ca9		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cac		60		rts				rts
.8cad						CLCompareLineNo:
.8cad		38		sec				sec
.8cae		a0 01		ldy #$01			ldy 	#1
.8cb0		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb2		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cb4		85 36		sta $36				sta 	zTemp0
.8cb6		c8		iny				iny
.8cb7		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb9		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cbb		05 36		ora $36				ora 	zTemp0
.8cbd		60		rts				rts
.8cbe						CLIsDigit:
.8cbe		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc0		c9 30		cmp #$30			cmp 	#"0"
.8cc2		90 03		bcc $8cc7			bcc	 	_CLIDExitFalse
.8cc4		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cc6		60		rts				rts
.8cc7						_CLIDExitFalse:
.8cc7		38		sec				sec
.8cc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cc9						Command_Load:
.8cc9		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; file name to load
.8ccc		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cce		a5 36		lda $36				lda 	zTemp0
.8cd0		20 3f 81	jsr $813f			jsr 	KNLOpenFileRead 			; open file for reading
.8cd3		b0 44		bcs $8d19			bcs 	CLErrorHandler 				; error, so fail.
.8cd5		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8cd8		20 69 8d	jsr $8d69			jsr     LoadReadByteInit            ; Init reader with the stream
.8cdb		20 5e 8e	jsr $8e5e			jsr 	NewProgram 					; does the actual NEW.
.8cde		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.8ce1						_CLLoop:
.8ce1		20 27 8d	jsr $8d27			jsr 	LoadReadLine 				; get next line.
.8ce4		f0 10		beq $8cf6			beq 	_CLExit 					; end, exit.
.8ce6		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8ce9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8cec		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8cef		f0 f0		beq $8ce1			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8cf1		20 7d 85	jsr $857d			jsr 	EditProgramCode 			; do the editing etc.
.8cf4		80 eb		bra $8ce1			bra 	_CLLoop
.8cf6						_CLExit:
.8cf6		ad 71 07	lda $0771			lda 	BasicFileStream
.8cf9		20 03 82	jsr $8203			jsr 	KNLCloseFile
.8cfc						CLComplete:
.8cfc		a9 06		lda #$06			lda 	#_CLCMsg & $FF
.8cfe		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d00		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.8d03		4c a2 85	jmp $85a2			jmp 	WarmStart
.8d06						_CLCMsg:
>8d06		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d0e		2e 0d 00
.8d11						CLCloseError:
.8d11		48		pha				pha
.8d12		ad 71 07	lda $0771			lda 	BasicFileStream
.8d15		20 03 82	jsr $8203			jsr 	KNLCloseFile
.8d18		68		pla				pla
.8d19						CLErrorHandler:
.8d19		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d1b		f0 05		beq $8d22			beq 	_CLEHNotFound
.8d1d		a9 1a		lda #$1a		lda	#26
.8d1f		4c 69 94	jmp $9469		jmp	ErrorHandler
.8d22						_CLEHNotFound:
.8d22		a9 19		lda #$19		lda	#25
.8d24		4c 69 94	jmp $9469		jmp	ErrorHandler
.8d27						LoadReadLine:
.8d27		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d29		20 43 8d	jsr $8d43			jsr 	LoadReadCharacter
.8d2c		f0 14		beq $8d42			beq 	_LRLExit 					; eof ?
.8d2e		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d30		90 f5		bcc $8d27			bcc 	LoadReadLine
.8d32						_LRLLoop:
.8d32		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8d35		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d38		e8		inx				inx
.8d39		20 43 8d	jsr $8d43			jsr 	LoadReadCharacter 			; next line
.8d3c		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d3e		b0 f2		bcs $8d32			bcs 	_LRLLoop
.8d40		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d42						_LRLExit:
.8d42		60		rts				rts
.8d43						LoadReadCharacter:
.8d43		da		phx				phx
.8d44		5a		phy				phy
.8d45		ad 70 07	lda $0770			lda 	LoadEOFFlag 				; already done EOF.
.8d48		d0 0c		bne $8d56			bne 	_LRCIsEOF
.8d4a		20 73 8d	jsr $8d73			jsr 	LoadReadByte 				; read a byte
.8d4d		90 09		bcc $8d58			bcc		_LRCExit 					; read okay.
.8d4f		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d51		d0 be		bne $8d11			bne 	CLCloseError
.8d53		ce 70 07	dec $0770			dec 	LoadEOFFlag
.8d56						_LRCIsEOF:
.8d56		a9 00		lda #$00			lda 	#0
.8d58						_LRCExit:
.8d58		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d5a		d0 02		bne $8d5e			bne 	_LRCNotTab
.8d5c		a9 20		lda #$20			lda 	#' '
.8d5e						_LRCNotTab:
.8d5e		c9 0a		cmp #$0a			cmp 	#$0A
.8d60		d0 02		bne $8d64			bne 	_LRCNotLF
.8d62		a9 0d		lda #$0d			lda 	#$0D
.8d64						_LRCNotLF:
.8d64		7a		ply				ply
.8d65		fa		plx				plx
.8d66		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d68		60		rts				rts
.8d69						LoadReadByteInit:
.8d69		8d 72 07	sta $0772			sta     LoadFileStream 				; save stream
.8d6c		9c 73 07	stz $0773			stz     LoadNextCharacter 			; reset buffer
.8d6f		9c 74 07	stz $0774			stz     LoadEndCharacter
.8d72		60		rts				rts
.8d73						LoadReadByte:
.8d73		da		phx				phx
.8d74		ae 73 07	ldx $0773			ldx     LoadNextCharacter 					; all data consumed ?
.8d77		ec 74 07	cpx $0774			cpx     LoadEndCharacter
.8d7a		d0 12		bne $8d8e			bne     _KNLRBGetNextByte
.8d7c		ad 72 07	lda $0772			lda     LoadFileStream
.8d7f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8d81		20 8e 81	jsr $818e			jsr     KNLReadBlock 				; read next chunk from the stream
.8d84		b0 0f		bcs $8d95			bcs     _KNLRBError 				; error has occurred on read.
.8d86		8d 74 07	sta $0774			sta     LoadEndCharacter 						; # read is the number available
.8d89		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8d8b		8e 73 07	stx $0773			stx     LoadNextCharacter
.8d8e						_KNLRBGetNextByte:
.8d8e		bd 62 06	lda $0662,x			lda     KNLReadBuffer,x 			; get the next data item
.8d91		ee 73 07	inc $0773			inc     LoadNextCharacter 					; and advance the index
.8d94		18		clc				clc 								; succeeded
.8d95						_KNLRBError:
.8d95		fa		plx				plx
.8d96		60		rts				rts
.0770						LoadEOFFlag:
>0770								.fill 	1
.0771						BasicFileStream:
>0771								.fill 	1
.0772						LoadFileStream:
>0772								.byte   ?
.0773						LoadNextCharacter:
>0773								.byte   ?
.0774						LoadEndCharacter:
>0774								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d97						Command_LOCAL:
.8d97		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d99		20 a5 8d	jsr $8da5			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d9c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d9e		c8		iny				iny
.8d9f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8da1		f0 f4		beq $8d97			beq 	Command_LOCAL 				; if so, localise another variable.
.8da3		88		dey				dey 								; unpick pre-get
.8da4		60		rts				rts
.8da5						LocaliseNextTerm:
.8da5		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm 				; evaluate the term
.8da8		b5 50		lda $50,x			lda 	NSStatus,x
.8daa		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8dac		f0 5c		beq $8e0a			beq		_LNTError
.8dae		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8db0		85 36		sta $36				sta 	zTemp0
.8db2		b5 60		lda $60,x			lda 	NSMantissa1,x
.8db4		85 37		sta $37				sta  	zTemp0+1
.8db6		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8db8		29 10		and #$10			and 	#NSBIsString
.8dba		d0 1e		bne $8dda			bne 	_LNTPushString
.8dbc		5a		phy				phy
.8dbd		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dbf						_LNTPushNumLoop:
.8dbf		b1 36		lda ($36),y			lda		(zTemp0),y
.8dc1		20 72 b4	jsr $b472			jsr 	StackPushByte
.8dc4		c8		iny				iny
.8dc5		c0 05		cpy #$05			cpy 	#5
.8dc7		d0 f6		bne $8dbf			bne 	_LNTPushNumLoop
.8dc9		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dcb		20 72 b4	jsr $b472			jsr 	StackPushByte
.8dce		a5 37		lda $37				lda 	zTemp0+1
.8dd0		20 72 b4	jsr $b472			jsr 	StackPushByte
.8dd3		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8dd5		20 72 b4	jsr $b472			jsr 	StackPushByte
.8dd8		7a		ply				ply
.8dd9		60		rts				rts
.8dda						_LNTPushString:
.8dda		5a		phy				phy
.8ddb		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8ddd		85 38		sta $38				sta 	zTemp1
.8ddf		a0 01		ldy #$01			ldy 	#1
.8de1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8de3		85 39		sta $39				sta 	zTemp1+1
.8de5		a0 00		ldy #$00			ldy 	#0 							; output string
.8de7		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8de9		f0 0a		beq $8df5			beq 	_LNTStringOut
.8deb						_LNTPushStrLoop:
.8deb		b1 38		lda ($38),y			lda 	(zTemp1),y
.8ded		f0 06		beq $8df5			beq 	_LNTStringOut
.8def		20 72 b4	jsr $b472			jsr 	StackPushByte
.8df2		c8		iny				iny
.8df3		80 f6		bra $8deb			bra 	_LNTPushStrLoop
.8df5						_LNTStringOut:
.8df5		98		tya				tya									; output length (chars written).
.8df6		20 72 b4	jsr $b472			jsr 	StackPushByte
.8df9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8dfb		20 72 b4	jsr $b472			jsr 	StackPushByte
.8dfe		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e00		20 72 b4	jsr $b472			jsr 	StackPushByte
.8e03		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e05		20 72 b4	jsr $b472			jsr 	StackPushByte
.8e08		7a		ply				ply
.8e09		60		rts				rts
.8e0a						_LNTError:
.8e0a		4c 32 a5	jmp $a532			jmp 	SyntaxError
.8e0d						LocalPopValue:
.8e0d		20 8a b4	jsr $b48a			jsr 	StackPopByte
.8e10		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e12		d0 17		bne $8e2b			bne 	_LPVString
.8e14		20 8a b4	jsr $b48a			jsr 	StackPopByte 				; address
.8e17		85 37		sta $37				sta 	zTemp0+1
.8e19		20 8a b4	jsr $b48a			jsr 	StackPopByte
.8e1c		85 36		sta $36				sta 	zTemp0
.8e1e		5a		phy				phy
.8e1f		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e21						_LPVNumberCopy:
.8e21		20 8a b4	jsr $b48a			jsr 	StackPopByte
.8e24		91 36		sta ($36),y			sta 	(zTemp0),y
.8e26		88		dey				dey
.8e27		10 f8		bpl $8e21			bpl 	_LPVNumberCopy
.8e29		7a		ply				ply 								; and complete
.8e2a		60		rts				rts
.8e2b						_LPVString:
.8e2b		20 8a b4	jsr $b48a			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e2e		85 37		sta $37				sta 	zTemp0+1
.8e30		20 8a b4	jsr $b48a			jsr 	StackPopByte
.8e33		85 36		sta $36				sta 	zTemp0
.8e35		5a		phy				phy
.8e36		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e38		85 38		sta $38				sta 	zTemp1
.8e3a		a0 01		ldy #$01			ldy 	#1
.8e3c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e3e		85 39		sta $39				sta 	zTemp1+1
.8e40		20 8a b4	jsr $b48a			jsr 	StackPopByte 				; # chars to get => y
.8e43		a8		tay				tay
.8e44		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e46		f0 0e		beq $8e56			beq 	_LPVStringCopied
.8e48		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e4a		91 38		sta ($38),y			sta 	(zTemp1),y
.8e4c						_LPVStringCopy:
.8e4c		88		dey				dey
.8e4d		30 07		bmi $8e56			bmi 	_LPVStringCopied
.8e4f		20 8a b4	jsr $b48a			jsr 	StackPopByte
.8e52		91 38		sta ($38),y			sta 	(zTemp1),y
.8e54		80 f6		bra $8e4c			bra 	_LPVStringCopy
.8e56						_LPVStringCopied:
.8e56		fa		plx				plx
.8e57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e58						NewCommand:
.8e58		20 5e 8e	jsr $8e5e			jsr 	NewProgram 					; does the actual NEW.
.8e5b		4c a2 85	jmp $85a2			jmp 	WarmStart 					; and warm starts straight away.
.8e5e						NewProgram:
.8e5e		20 21 ab	jsr $ab21			jsr 	MemoryNew
.8e61		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e64		20 5a 87	jsr $875a			jsr 	ClearCommand 				; clear everything.
.8e67		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8e68						PokeBCommand:
.8e68		a9 01		lda #$01			lda 	#1
.8e6a		80 0c		bra $8e78			bra 	PokeCommand
.8e6c						PokeWCommand:
.8e6c		a9 02		lda #$02			lda 	#2
.8e6e		80 08		bra $8e78			bra 	PokeCommand
.8e70						PokeLCommand:
.8e70		a9 03		lda #$03			lda 	#3
.8e72		80 04		bra $8e78			bra 	PokeCommand
.8e74						PokeDCommand:
.8e74		a9 04		lda #$04			lda 	#4
.8e76		80 00		bra $8e78			bra 	PokeCommand
.8e78						PokeCommand:
.8e78		48		pha				pha 								; save count on stack
.8e79		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e7b		20 34 a3	jsr $a334			jsr		Evaluate16BitInteger 		; address
.8e7e		20 58 94	jsr $9458			jsr 	CheckComma
.8e81		e8		inx				inx
.8e82		20 21 a3	jsr $a321			jsr		EvaluateInteger 			; data
.8e85		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e87		85 36		sta $36				sta 	zTemp0
.8e89		a5 60		lda $60				lda 	NSMantissa1
.8e8b		85 37		sta $37				sta 	zTemp0+1
.8e8d		68		pla				pla 								; count -> zTemp1
.8e8e		85 38		sta $38				sta 	zTemp1
.8e90		5a		phy				phy 								; save Y position.
.8e91		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e93		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e95						_PCLoop:
.8e95		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e97		91 36		sta ($36),y			sta 	(zTemp0),y
.8e99		c8		iny				iny 								; next byte to write
.8e9a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e9b		18		clc				clc
.8e9c		69 08		adc #$08			adc 	#MathStackSize
.8e9e		aa		tax				tax
.8e9f		c6 38		dec $38				dec 	zTemp1 						; done them all
.8ea1		d0 f2		bne $8e95			bne 	_PCLoop
.8ea3		7a		ply				ply 								; restore position.
.8ea4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8ea5						CallProcedure:
.8ea5		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8ea7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ea9		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8eab		f0 0c		beq $8eb9			beq 	_CPEndParam
.8ead						_CPParamLoop:
.8ead		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue 				; get parameter onto stack
.8eb0		e8		inx				inx 								; bump next stack
.8eb1		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb3		c8		iny				iny
.8eb4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8eb6		f0 f5		beq $8ead			beq 	_CPParamLoop
.8eb8		88		dey				dey 								; unpick.
.8eb9						_CPEndParam:
.8eb9		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8ebc		c8		iny				iny									; skip right bracket
.8ebd		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ebf		20 93 b4	jsr $b493			jsr 	StackOpen
.8ec2		20 d8 b4	jsr $b4d8			jsr 	STKSaveCodePosition 		; save loop position
.8ec5		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8ec7		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ec9		a5 60		lda $60				lda 	NSMantissa1
.8ecb		85 37		sta $37				sta 	zTemp0+1
.8ecd		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8ecf		b2 36		lda ($36)			lda 	(zTemp0)
.8ed1		85 30		sta $30				sta 	safePtr
.8ed3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ed5		85 31		sta $31				sta 	safePtr+1
.8ed7		c8		iny				iny
.8ed8		b1 36		lda ($36),y			lda 	(zTemp0),y
.8eda		85 32		sta $32				sta 	safePtr+2
.8edc		c8		iny				iny
.8edd		b1 36		lda ($36),y			lda 	(zTemp0),y
.8edf		85 33		sta $33				sta 	safePtr+3
.8ee1		c8		iny				iny 								; get Y offset -> Y
.8ee2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee4		a8		tay				tay
.8ee5		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8ee7		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8eea		f0 13		beq $8eff			beq 	_ParamExit 					; if so, exit.
.8eec						_ParamExtract:
.8eec		ca		dex				dex 								; put a local term on the level before
.8eed		20 a5 8d	jsr $8da5			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8ef0		20 a8 8b	jsr $8ba8			jsr 	AssignVariable 				; assign stacked value to the variable.
.8ef3		e8		inx				inx 								; advance to next parameter to do.
.8ef4		e8		inx				inx
.8ef5		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8ef8		f0 05		beq $8eff			beq 	_ParamExit
.8efa		20 58 94	jsr $9458			jsr 	CheckComma 					; comma seperating parameters
.8efd		80 ed		bra $8eec			bra 	_ParamExtract
.8eff						_ParamExit:
.8eff		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; check )
.8f02		60		rts				rts 								; and continue from here
.8f03						Command_ENDPROC:
.8f03		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8f05		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8f07		20 c0 b4	jsr $b4c0			jsr 	StackCheckFrame
.8f0a		20 e9 b4	jsr $b4e9			jsr 	STKLoadCodePosition 		; restore code position
.8f0d		20 b2 b4	jsr $b4b2			jsr 	StackClose
.8f10		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f11						Command_Read:
.8f11		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f13		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm
.8f16		b5 50		lda $50,x			lda 	NSStatus,x
.8f18		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f1a		f0 4f		beq $8f6b			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8f1c		20 b4 8f	jsr $8fb4			jsr 	SwapDataCodePtrs 			; swap code and data
.8f1f		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f22		d0 25		bne $8f49			bne 	_CRContinueData  			; forward for the next one.
.8f24		b2 30		lda ($30)			lda 	(codePtr)
.8f26		f0 1c		beq $8f44			beq 	_CRNoData
.8f28						_CRKeepSearching:
.8f28		a9 bb		lda #$bb			lda 	#KWD_DATA 					; scan for instruction
.8f2a		a2 80		ldx #$80			ldx 	#KWC_EOL
.8f2c		20 51 93	jsr $9351			jsr 	ScanForward
.8f2f		c9 bb		cmp #$bb			cmp 	#KWD_DATA 					; found data ?
.8f31		f0 16		beq $8f49			beq 	_CRHaveData 				; found it
.8f33		18		clc				clc
.8f34		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f36		65 30		adc $30				adc 	codePtr
.8f38		85 30		sta $30				sta 	codePtr
.8f3a		90 02		bcc $8f3e			bcc 	_CREExit
.8f3c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f3e						_CREExit:
.8f3e		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f40		b2 30		lda ($30)			lda 	(codePtr)
.8f42		d0 e4		bne $8f28			bne 	_CRKeepSearching
.8f44						_CRNoData:
.8f44		a9 0b		lda #$0b		lda	#11
.8f46		4c 69 94	jmp $9469		jmp	ErrorHandler
.8f49						_CRHaveData:
.8f49						_CRContinueData:
.8f49		a2 01		ldx #$01			ldx 	#1
.8f4b		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f4e		ca		dex				dex
.8f4f		20 a8 8b	jsr $8ba8			jsr		AssignVariable 				; do the assignment
.8f52		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8f55		b1 30		lda ($30),y			lda 	(codePtr),y
.8f57		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8f59		d0 04		bne $8f5f			bne 	_CRSwapBack
.8f5b		c8		iny				iny 								; consume comma
.8f5c		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8f5f						_CRSwapBack:
.8f5f		20 b4 8f	jsr $8fb4			jsr 	SwapDataCodePtrs			; swap them back.
.8f62		b1 30		lda ($30),y			lda 	(codePtr),y
.8f64		c8		iny				iny
.8f65		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f67		f0 a8		beq $8f11			beq 	Command_Read 				; if so go round again.
.8f69		88		dey				dey 								; unpick get.
.8f6a		60		rts				rts
.8f6b						_CRSyntax:
.8f6b		4c 32 a5	jmp $a532			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f6e						RemCommand:
.8f6e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f70		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f72		d0 06		bne $8f7a			bne 	_RMExit
.8f74		c8		iny				iny 								; point to offset
.8f75		98		tya				tya 								; A = offset position
.8f76		38		sec				sec 								; add size +1 hence SEC
.8f77		71 30		adc ($30),y			adc 	(codePtr),y
.8f79		a8		tay				tay 								; make current position.
.8f7a						_RMExit:
.8f7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f7b						Command_REPEAT:
.8f7b		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f7d		20 93 b4	jsr $b493			jsr 	StackOpen
.8f80		20 d8 b4	jsr $b4d8			jsr 	STKSaveCodePosition 		; save loop position
.8f83		60		rts				rts
.8f84						Command_UNTIL:
.8f84		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f86		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f88		20 c0 b4	jsr $b4c0			jsr 	StackCheckFrame
.8f8b		a2 00		ldx #$00			ldx 	#0
.8f8d		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; work out the number
.8f90		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; check if zero
.8f93		f0 04		beq $8f99			beq 	_CULoopBack 				; if so keep looping
.8f95		20 b2 b4	jsr $b4b2			jsr 	StackClose		 			; return
.8f98		60		rts				rts
.8f99						_CULoopBack:
.8f99		20 e9 b4	jsr $b4e9			jsr 	STKLoadCodePosition 		; loop back
.8f9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f9d						Command_Restore:
.8f9d		20 b4 8f	jsr $8fb4			jsr 	SwapDataCodePtrs 			; swap code and data
.8fa0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fa2		85 30		sta $30				sta 	codePtr
.8fa4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fa6		85 31		sta $31				sta 	codePtr+1
.8fa8		20 b4 8f	jsr $8fb4			jsr 	SwapDataCodePtrs 			; put them back
.8fab		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8fad		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8fb0		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8fb3		60		rts				rts
.8fb4						SwapDataCodePtrs:
.8fb4		da		phx				phx
.8fb5		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8fb7						_SDCPLoop:
.8fb7		b5 30		lda $30,x			lda 	safePtr,x
.8fb9		48		pha				pha
.8fba		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8fbd		95 30		sta $30,x			sta 	safePtr,x
.8fbf		68		pla				pla
.8fc0		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8fc3		ca		dex				dex
.8fc4		10 f1		bpl $8fb7			bpl 	_SDCPLoop
.8fc6		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8fc9		8c 1b 04	sty $041b			sty 	dataPointer+4
.8fcc		a8		tay				tay
.8fcd		fa		plx				plx
.8fce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8fcf						EOLCommand:
.8fcf		18		clc				clc
.8fd0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fd2		65 30		adc $30				adc 	codePtr
.8fd4		85 30		sta $30				sta 	codePtr
.8fd6		90 02		bcc $8fda			bcc 	_CREExit
.8fd8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fda						_CREExit:
.8fda		80 0b		bra $8fe7			bra 	RunNewLine
.8fdc						CommandRUN:
.8fdc		20 5a 87	jsr $875a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8fdf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fe1		85 30		sta $30				sta 	codePtr
.8fe3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fe5		85 31		sta $31				sta 	codePtr+1
.8fe7						RunNewLine:
.8fe7		b2 30		lda ($30)			lda 	(codePtr)
.8fe9		f0 74		beq $905f			beq 	CRNoProgram         		; no then END.
.8feb		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8fed		9a		txs				txs
.8fee						RUNCodePointerLine:
.8fee		a0 02		ldy #$02			ldy 	#2 							; start of program
.8ff0						_CRIncMainLoop:
.8ff0		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8ff2		f0 03		beq $8ff7			beq 	_NoEvents					; if zero, skip with Z flag set.
.8ff4		20 e2 80	jsr $80e2			jsr 	ProcessEvents
.8ff7						_NoEvents:
.8ff7		d0 61		bne $905a			bne 	_CRBreak
.8ff9		a5 01		lda $01				lda 	1 							; save I/O 0
.8ffb		48		pha				pha
.8ffc		64 01		stz $01				stz 	1 							; access I/O Page 0
.8ffe		38		sec				sec 								; calculate timer - LastTick
.8fff		ad 59 d6	lda $d659			lda 	$D659
.9002		cd 75 07	cmp $0775			cmp 	LastTick
.9005		f0 06		beq $900d			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9007		8d 75 07	sta $0775			sta 	LastTick 					; update last timer
.900a		20 df a3	jsr $a3df			jsr 	TickHandler 							; go do the code.
.900d						_NoFireTick:
.900d		68		pla				pla 								; restore I/O 0
.900e		85 01		sta $01				sta 	1
.9010						_CRNoBreakCheck:
.9010		c8		iny				iny									; next token
.9011						_CRMainLoop:
.9011		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9014		b1 30		lda ($30),y			lda 	(codePtr),y
.9016		10 10		bpl $9028			bpl 	_CRNotKeyword				; not a token.
.9018		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.901a		b0 04		bcs $9020			bcs 	_CRIsKeyword
.901c		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.901e		b0 34		bcs $9054			bcs		_CRSyntaxError
.9020						_CRIsKeyword:
.9020		c8		iny				iny 								; consume command
.9021		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9022		aa		tax				tax 								; put in X for vector jump
.9023		20 57 90	jsr $9057			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9026		80 e9		bra $9011			bra 	_CRMainLoop 				; and loop round
.9028						_CRNotKeyword:
.9028		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.902a		f0 c4		beq $8ff0			beq 	_CRIncMainLoop
.902c		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.902e		90 05		bcc $9035			bcc 	_CRNotVariable
.9030						_CRGoLet:
.9030		20 6f 8b	jsr $8b6f			jsr 	LetCommand
.9033		80 dc		bra $9011			bra 	_CRMainLoop
.9035						_CRNotVariable:
.9035		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9037		f0 f7		beq $9030			beq 	_CRGoLet
.9039		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.903b		f0 f3		beq $9030			beq 	_CRGoLet
.903d		c9 21		cmp #$21			cmp 	#KWD_PLING
.903f		f0 ef		beq $9030			beq 	_CRGoLet
.9041		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9043		f0 09		beq $904e			beq 	_CRGoRem
.9045		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9047		d0 0b		bne $9054			bne 	_CRSyntaxError
.9049		20 14 84	jsr $8414			jsr 	LabelHere
.904c		80 c3		bra $9011			bra 	_CRMainLoop
.904e						_CRGoRem:
.904e		c8		iny				iny
.904f		20 6e 8f	jsr $8f6e			jsr 	RemCommand
.9052		80 bd		bra $9011			bra 	_CRMainLoop
.9054						_CRSyntaxError:
.9054		4c 32 a5	jmp $a532			jmp 	SyntaxError
.9057						_CRCallVector0:
.9057		7c f6 90	jmp ($90f6,x)			jmp 	(VectorSet0,x)
.905a						_CRBreak:
.905a		a9 01		lda #$01		lda	#1
.905c		4c 69 94	jmp $9469		jmp	ErrorHandler
.905f						CRNoProgram:
.905f		4c 05 89	jmp $8905			jmp 	EndCommand
.9062						Shift1Command:
.9062		b1 30		lda ($30),y			lda 	(codePtr),y
.9064		c8		iny				iny
.9065		0a		asl a				asl 	a
.9066		aa		tax				tax
.9067		7c a4 91	jmp ($91a4,x)			jmp 	(VectorSet1,x)
.906a						Shift2Command:
.906a		b1 30		lda ($30),y			lda 	(codePtr),y
.906c		c8		iny				iny
.906d		0a		asl a				asl 	a
.906e		aa		tax				tax
.906f		7c ee 91	jmp ($91ee,x)			jmp 	(VectorSet2,x)
.9072						Unused1:
.9072						Unused2:
.9072						Unused3:
.9072						Unused4:
.9072		4c 32 a5	jmp $a532			jmp 	SyntaxError
>9075								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9076						VectorSetPunc:
>9076		21 97					.word	ShiftLeft                        ; $00 <<
>9078		0c 95					.word	BinaryCompareLessEqual           ; $01 <=
>907a		02 95					.word	BinaryCompareNotEqual            ; $02 <>
>907c		32 a5					.word	SyntaxError                      ; $03 !!3
>907e		32 a5					.word	SyntaxError                      ; $04 ><
>9080		16 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>9082		24 97					.word	ShiftRight                       ; $06 >>
>9084		32 a5					.word	SyntaxError                      ; $07 !!7
>9086		32 a5					.word	SyntaxError                      ; $08 !!8
>9088		32 a5					.word	SyntaxError                      ; $09 !!9
>908a		32 a5					.word	SyntaxError                      ; $0a !!10
>908c		32 a5					.word	SyntaxError                      ; $0b !!11
>908e		32 a5					.word	SyntaxError                      ; $0c !!12
>9090		32 a5					.word	SyntaxError                      ; $0d !!13
>9092		32 a5					.word	SyntaxError                      ; $0e !!14
>9094		32 a5					.word	SyntaxError                      ; $0f !!15
>9096		32 a5					.word	SyntaxError                      ; $10 @
>9098		32 a5					.word	SyntaxError                      ; $11 !!17
>909a		32 a5					.word	SyntaxError                      ; $12 !!18
>909c		32 a5					.word	SyntaxError                      ; $13 [
>909e		cd 95					.word	IntegerDivide                    ; $14 \
>90a0		32 a5					.word	SyntaxError                      ; $15 ]
>90a2		5f 98					.word	EorInteger                       ; $16 ^
>90a4		32 a5					.word	SyntaxError                      ; $17 _
>90a6		32 a5					.word	SyntaxError                      ; $18 `
>90a8		32 a5					.word	SyntaxError                      ; $19 !!25
>90aa		32 a5					.word	SyntaxError                      ; $1a !!26
>90ac		32 a5					.word	SyntaxError                      ; $1b {
>90ae		2a 98					.word	OraInteger                       ; $1c |
>90b0		32 a5					.word	SyntaxError                      ; $1d }
>90b2		32 a5					.word	SyntaxError                      ; $1e ~
>90b4		32 a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>90b6		32 a5					.word	SyntaxError                      ; $20
>90b8		94 98					.word	WordIndirect                     ; $21 !
>90ba		32 a5					.word	SyntaxError                      ; $22 "
>90bc		32 a5					.word	SyntaxError                      ; $23 #
>90be		32 a5					.word	SyntaxError                      ; $24 $
>90c0		0e 96					.word	IntegerModulus                   ; $25 %
>90c2		f5 97					.word	AndInteger                       ; $26 &
>90c4		32 a5					.word	SyntaxError                      ; $27 '
>90c6		32 a5					.word	SyntaxError                      ; $28 (
>90c8		32 a5					.word	SyntaxError                      ; $29 )
>90ca		7c 96					.word	MulInteger                       ; $2a *
>90cc		97 97					.word	AddInteger                       ; $2b +
>90ce		32 a5					.word	SyntaxError                      ; $2c ,
>90d0		d0 97					.word	SubInteger                       ; $2d -
>90d2		32 a5					.word	SyntaxError                      ; $2e .
>90d4		4e 9a					.word	FDivideCommand                   ; $2f /
>90d6		32 a5					.word	SyntaxError                      ; $30 0
>90d8		32 a5					.word	SyntaxError                      ; $31 1
>90da		32 a5					.word	SyntaxError                      ; $32 2
>90dc		32 a5					.word	SyntaxError                      ; $33 3
>90de		32 a5					.word	SyntaxError                      ; $34 4
>90e0		32 a5					.word	SyntaxError                      ; $35 5
>90e2		32 a5					.word	SyntaxError                      ; $36 6
>90e4		32 a5					.word	SyntaxError                      ; $37 7
>90e6		32 a5					.word	SyntaxError                      ; $38 8
>90e8		32 a5					.word	SyntaxError                      ; $39 9
>90ea		32 a5					.word	SyntaxError                      ; $3a :
>90ec		32 a5					.word	SyntaxError                      ; $3b ;
>90ee		ee 94					.word	BinaryCompareLess                ; $3c <
>90f0		e4 94					.word	BinaryCompareEqual               ; $3d =
>90f2		f8 94					.word	BinaryCompareGreater             ; $3e >
>90f4		b6 98					.word	ByteIndirect                     ; $3f ?
.90f6						VectorSet0:
>90f6		cf 8f					.word	EOLCommand                       ; $80 !0:EOF
>90f8		62 90					.word	Shift1Command                    ; $81 !1:SH1
>90fa		6a 90					.word	Shift2Command                    ; $82 !2:SH2
>90fc		38 9f					.word	AbsUnary                         ; $83 ABS(
>90fe		46 9f					.word	AllocUnary                       ; $84 ALLOC(
>9100		b6 9f					.word	AscUnary                         ; $85 ASC(
>9102		9a a1					.word	ChrUnary                         ; $86 CHR$(
>9104		b5 a9					.word	UnaryEvent                       ; $87 EVENT(
>9106		e0 94					.word	UnaryFalse                       ; $88 FALSE
>9108		c3 9f					.word	FracUnary                        ; $89 FRAC(
>910a		54 82					.word	ChrGet                           ; $8a GET$(
>910c		30 82					.word	AscGet                           ; $8b GET(
>910e		32 a5					.word	SyntaxError                      ; $8c GETDATE$(
>9110		32 a5					.word	SyntaxError                      ; $8d GETTIME$(
>9112		3f a9					.word	UnaryHit                         ; $8e HIT(
>9114		5b 82					.word	ChrInkey                         ; $8f INKEY$(
>9116		49 82					.word	AscInkey                         ; $90 INKEY(
>9118		d8 9f					.word	IntUnary                         ; $91 INT(
>911a		59 a1					.word	IsValUnary                       ; $92 ISVAL(
>911c		39 aa					.word	UnaryJoyB                        ; $93 JOYB(
>911e		12 aa					.word	UnaryJoyX                        ; $94 JOYX(
>9120		15 aa					.word	UnaryJoyY                        ; $95 JOYY(
>9122		6d a2					.word	Unary_Left                       ; $96 LEFT$(
>9124		e9 9f					.word	LenUnary                         ; $97 LEN(
>9126		07 a0					.word	Unary_Max                        ; $98 MAX(
>9128		8f a2					.word	Unary_Mid                        ; $99 MID$(
>912a		03 a0					.word	Unary_Min                        ; $9a MIN(
>912c		52 a0					.word	Unary_Not                        ; $9b NOT(
>912e		65 a0					.word	PeekByteUnary                    ; $9c PEEK(
>9130		71 a0					.word	PeekDUnary                       ; $9d PEEKD(
>9132		6d a0					.word	PeekLUnary                       ; $9e PEEKL(
>9134		69 a0					.word	PeekWUnary                       ; $9f PEEKW(
>9136		f0 b3					.word	UnaryPlaying                     ; $a0 PLAYING(
>9138		9e a0					.word	Unary_Random                     ; $a1 RANDOM(
>913a		7a a2					.word	Unary_Right                      ; $a2 RIGHT$(
>913c		bb a0					.word	Unary_Rnd                        ; $a3 RND(
>913e		31 a1					.word	SgnUnary                         ; $a4 SGN(
>9140		ac a1					.word	SpcUnary                         ; $a5 SPC(
>9142		c7 a1					.word	Unary_Str                        ; $a6 STR$(
>9144		4b aa					.word	UnaryTimer                       ; $a7 TIMER(
>9146		d5 94					.word	UnaryTrue                        ; $a8 TRUE
>9148		4f a1					.word	ValUnary                         ; $a9 VAL(
>914a		08 89					.word	ForCommand                       ; $aa FOR
>914c		4b 8a					.word	IfCommand                        ; $ab IF
>914e		72 90					.word	Unused1                          ; $ac PROC
>9150		7b 8f					.word	Command_REPEAT                   ; $ad REPEAT
>9152		21 94					.word	Command_WHILE                    ; $ae WHILE
>9154		74 8a					.word	EndIf                            ; $af ENDIF
>9156		03 8f					.word	Command_ENDPROC                  ; $b0 ENDPROC
>9158		ba 89					.word	NextCommand                      ; $b1 NEXT
>915a		72 90					.word	Unused4                          ; $b2 THEN
>915c		84 8f					.word	Command_UNTIL                    ; $b3 UNTIL
>915e		42 94					.word	Command_WEND                     ; $b4 WEND
>9160		32 a5					.word	SyntaxError                      ; $b5 BY
>9162		25 87					.word	CallCommand                      ; $b6 CALL
>9164		f3 a6					.word	CircleCommand                    ; $b7 CIRCLE
>9166		5a 87					.word	ClearCommand                     ; $b8 CLEAR
>9168		32 a5					.word	SyntaxError                      ; $b9 COLOR
>916a		32 a5					.word	SyntaxError                      ; $ba COLOUR
>916c		bd 87					.word	Command_Data                     ; $bb DATA
>916e		c5 87					.word	DimCommand                       ; $bc DIM
>9170		72 90					.word	Unused3                          ; $bd DOWNTO
>9172		6d 8a					.word	ElseCode                         ; $be ELSE
>9174		32 a5					.word	SyntaxError                      ; $bf FROM
>9176		12 a9					.word	GfxCommand                       ; $c0 GFX
>9178		32 a5					.word	SyntaxError                      ; $c1 HERE
>917a		1c a7					.word	ImageCommand                     ; $c2 IMAGE
>917c		6f 8b					.word	LetCommand                       ; $c3 LET
>917e		6e a7					.word	LineCommand                      ; $c4 LINE
>9180		97 8d					.word	Command_LOCAL                    ; $c5 LOCAL
>9182		32 a5					.word	SyntaxError                      ; $c6 OFF
>9184		32 a5					.word	SyntaxError                      ; $c7 ON
>9186		32 a5					.word	SyntaxError                      ; $c8 OUTLINE
>9188		63 a9					.word	PaletteCommand                   ; $c9 PALETTE
>918a		67 a7					.word	PlotCommand                      ; $ca PLOT
>918c		68 8e					.word	PokeBCommand                     ; $cb POKE
>918e		74 8e					.word	PokeDCommand                     ; $cc POKED
>9190		70 8e					.word	PokeLCommand                     ; $cd POKEL
>9192		6c 8e					.word	PokeWCommand                     ; $ce POKEW
>9194		11 8f					.word	Command_Read                     ; $cf READ
>9196		ef a6					.word	RectangleCommand                 ; $d0 RECT
>9198		6e 8f					.word	RemCommand                       ; $d1 REM
>919a		32 a5					.word	SyntaxError                      ; $d2 SOLID
>919c		0c b4					.word	SoundCommand                     ; $d3 SOUND
>919e		fe a6					.word	SpriteCommand                    ; $d4 SPRITE
>91a0		38 a7					.word	TextCommand                      ; $d5 TEXT
>91a2		72 90					.word	Unused2                          ; $d6 TO
.91a4						VectorSet1:
>91a4		32 a5					.word	SyntaxError                      ; $80 !0:EOF
>91a6		32 a5					.word	SyntaxError                      ; $81 !1:SH1
>91a8		32 a5					.word	SyntaxError                      ; $82 !2:SH2
>91aa		d7 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>91ac		f3 85					.word	AssertCommand                    ; $84 ASSERT
>91ae		b2 a8					.word	BitmapCtrl                       ; $85 BITMAP
>91b0		03 86					.word	Command_BLoad                    ; $86 BLOAD
>91b2		a3 86					.word	Command_BSave                    ; $87 BSAVE
>91b4		b5 87					.word	ClearScreen                      ; $88 CLS
>91b6		7a 8a					.word	Command_CPrint                   ; $89 CPRINT
>91b8		82 88					.word	Command_Dir                      ; $8a DIR
>91ba		fe 88					.word	Command_Drive                    ; $8b DRIVE
>91bc		05 89					.word	EndCommand                       ; $8c END
>91be		c4 b3					.word	Explode                          ; $8d EXPLODE
>91c0		32 a5					.word	SyntaxError                      ; $8e GO
>91c2		13 8a					.word	Command_GOSUB                    ; $8f GOSUB
>91c4		31 8a					.word	GotoCommand                      ; $90 GOTO
>91c6		32 a5					.word	SyntaxError                      ; $91 HIMEM
>91c8		75 8a					.word	Command_Input                    ; $92 INPUT
>91ca		bf 8b					.word	Command_List                     ; $93 LIST
>91cc		c9 8c					.word	Command_Load                     ; $94 LOAD
>91ce		58 8e					.word	NewCommand                       ; $95 NEW
>91d0		a0 b3					.word	PingCommand                      ; $96 PING
>91d2		81 8a					.word	Command_Print                    ; $97 PRINT
>91d4		9d 8f					.word	Command_Restore                  ; $98 RESTORE
>91d6		23 8a					.word	Command_RETURN                   ; $99 RETURN
>91d8		dc 8f					.word	CommandRUN                       ; $9a RUN
>91da		76 92					.word	Command_Save                     ; $9b SAVE
>91dc		32 a5					.word	SyntaxError                      ; $9c SETDATE
>91de		32 a5					.word	SyntaxError                      ; $9d SETTIME
>91e0		b8 b3					.word	ShootCommand                     ; $9e SHOOT
>91e2		f7 a8					.word	SpritesCtrl                      ; $9f SPRITES
>91e4		fa 92					.word	StopCommand                      ; $a0 STOP
>91e6		c7 93					.word	Command_VERIFY                   ; $a1 VERIFY
>91e8		ac a9					.word	XGoCommand                       ; $a2 XGO
>91ea		a3 a9					.word	XLoadCommand                     ; $a3 XLOAD
>91ec		ac b3					.word	ZapCommand                       ; $a4 ZAP
.91ee						VectorSet2:
>91ee		32 a5					.word	SyntaxError                      ; $80 !0:EOF
>91f0		32 a5					.word	SyntaxError                      ; $81 !1:SH1
>91f2		32 a5					.word	SyntaxError                      ; $82 !2:SH2
>91f4		f1 a3					.word	Assemble_adc                     ; $83 ADC
>91f6		e9 a3					.word	Assemble_and                     ; $84 AND
>91f8		05 a4					.word	Assemble_asl                     ; $85 ASL
>91fa		6f a4					.word	Assemble_bcc                     ; $86 BCC
>91fc		73 a4					.word	Assemble_bcs                     ; $87 BCS
>91fe		7b a4					.word	Assemble_beq                     ; $88 BEQ
>9200		32 a4					.word	Assemble_bit                     ; $89 BIT
>9202		63 a4					.word	Assemble_bmi                     ; $8a BMI
>9204		77 a4					.word	Assemble_bne                     ; $8b BNE
>9206		5f a4					.word	Assemble_bpl                     ; $8c BPL
>9208		7f a4					.word	Assemble_bra                     ; $8d BRA
>920a		83 a4					.word	Assemble_brk                     ; $8e BRK
>920c		67 a4					.word	Assemble_bvc                     ; $8f BVC
>920e		6b a4					.word	Assemble_bvs                     ; $90 BVS
>9210		8b a4					.word	Assemble_clc                     ; $91 CLC
>9212		df a4					.word	Assemble_cld                     ; $92 CLD
>9214		9f a4					.word	Assemble_cli                     ; $93 CLI
>9216		cf a4					.word	Assemble_clv                     ; $94 CLV
>9218		fd a3					.word	Assemble_cmp                     ; $95 CMP
>921a		46 a4					.word	Assemble_cpx                     ; $96 CPX
>921c		41 a4					.word	Assemble_cpy                     ; $97 CPY
>921e		23 a4					.word	Assemble_dec                     ; $98 DEC
>9220		db a4					.word	Assemble_dex                     ; $99 DEX
>9222		b7 a4					.word	Assemble_dey                     ; $9a DEY
>9224		ed a3					.word	Assemble_eor                     ; $9b EOR
>9226		28 a4					.word	Assemble_inc                     ; $9c INC
>9228		eb a4					.word	Assemble_inx                     ; $9d INX
>922a		d7 a4					.word	Assemble_iny                     ; $9e INY
>922c		5a a4					.word	Assemble_jmp                     ; $9f JMP
>922e		55 a4					.word	Assemble_jsr                     ; $a0 JSR
>9230		f9 a3					.word	Assemble_lda                     ; $a1 LDA
>9232		1e a4					.word	Assemble_ldx                     ; $a2 LDX
>9234		3c a4					.word	Assemble_ldy                     ; $a3 LDY
>9236		0f a4					.word	Assemble_lsr                     ; $a4 LSR
>9238		ef a4					.word	Assemble_nop                     ; $a5 NOP
>923a		e5 a3					.word	Assemble_ora                     ; $a6 ORA
>923c		9b a4					.word	Assemble_pha                     ; $a7 PHA
>923e		87 a4					.word	Assemble_php                     ; $a8 PHP
>9240		e3 a4					.word	Assemble_phx                     ; $a9 PHX
>9242		a3 a4					.word	Assemble_phy                     ; $aa PHY
>9244		ab a4					.word	Assemble_pla                     ; $ab PLA
>9246		8f a4					.word	Assemble_plp                     ; $ac PLP
>9248		f7 a4					.word	Assemble_plx                     ; $ad PLX
>924a		b3 a4					.word	Assemble_ply                     ; $ae PLY
>924c		0a a4					.word	Assemble_rol                     ; $af ROL
>924e		14 a4					.word	Assemble_ror                     ; $b0 ROR
>9250		97 a4					.word	Assemble_rti                     ; $b1 RTI
>9252		a7 a4					.word	Assemble_rts                     ; $b2 RTS
>9254		01 a4					.word	Assemble_sbc                     ; $b3 SBC
>9256		93 a4					.word	Assemble_sec                     ; $b4 SEC
>9258		f3 a4					.word	Assemble_sed                     ; $b5 SED
>925a		af a4					.word	Assemble_sei                     ; $b6 SEI
>925c		f5 a3					.word	Assemble_sta                     ; $b7 STA
>925e		e7 a4					.word	Assemble_stp                     ; $b8 STP
>9260		19 a4					.word	Assemble_stx                     ; $b9 STX
>9262		37 a4					.word	Assemble_sty                     ; $ba STY
>9264		2d a4					.word	Assemble_stz                     ; $bb STZ
>9266		cb a4					.word	Assemble_tax                     ; $bc TAX
>9268		c7 a4					.word	Assemble_tay                     ; $bd TAY
>926a		50 a4					.word	Assemble_trb                     ; $be TRB
>926c		4b a4					.word	Assemble_tsb                     ; $bf TSB
>926e		d3 a4					.word	Assemble_tsx                     ; $c0 TSX
>9270		bb a4					.word	Assemble_txa                     ; $c1 TXA
>9272		c3 a4					.word	Assemble_txs                     ; $c2 TXS
>9274		bf a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.9276						Command_Save:
.9276		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; file name to load
.9279		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.927b		a5 36		lda $36				lda 	zTemp0
.927d		20 3a 81	jsr $813a			jsr 	KNLOpenFileWrite 			; open file for writing
.9280		b0 2f		bcs $92b1			bcs 	CSErrorHandler 				; error, so fail.
.9282		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.9285		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9287		85 30		sta $30				sta 	codePtr
.9289		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.928b		85 31		sta $31				sta 	codePtr+1
.928d						_CSLoop:
.928d		b2 30		lda ($30)			lda 	(codePtr)
.928f		f0 17		beq $92a8			beq 	_CSExit
.9291		20 d5 92	jsr $92d5			jsr 	CSGetCleanLine
.9294		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.9296		85 36		sta $36				sta 	zTemp0
.9298		20 b4 92	jsr $92b4			jsr 	CLWriteByteBlock 			; write the block out.
.929b		18		clc				clc
.929c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.929e		65 30		adc $30				adc 	codePtr
.92a0		85 30		sta $30				sta 	codePtr
.92a2		90 02		bcc $92a6			bcc 	_CREExit
.92a4		e6 31		inc $31				inc 	codePtr+1 					; carry
.92a6						_CREExit:
.92a6		80 e5		bra $928d			bra 	_CSLoop
.92a8						_CSExit:
.92a8		ad 71 07	lda $0771			lda 	BasicFileStream 			; close file
.92ab		20 03 82	jsr $8203			jsr 	KNLCloseFile
.92ae		4c fc 8c	jmp $8cfc			jmp 	CLComplete 					; display complete message.
.92b1						CSErrorHandler:
.92b1		4c 19 8d	jmp $8d19			jmp 	CLErrorHandler
.92b4						CLWriteByteBlock:
.92b4		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.92b6		f0 1c		beq $92d4			beq 	_CLWBBExit					; if so, exit
.92b8		ad 71 07	lda $0771			lda 	BasicFileStream 			; stream to write, count in X
.92bb		20 c9 81	jsr $81c9			jsr 	KNLWriteBlock 				; call one write attempt
.92be		b0 f1		bcs $92b1			bcs 	CSErrorHandler 				; error occurred
.92c0		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.92c2		8a		txa				txa 								; subtract bytes written from X, total count.
.92c3		38		sec				sec
.92c4		e5 38		sbc $38				sbc 	zTemp1
.92c6		aa		tax				tax
.92c7		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.92c8		a5 36		lda $36				lda 	zTemp0
.92ca		65 38		adc $38				adc 	zTemp1
.92cc		85 36		sta $36				sta 	zTemp0
.92ce		90 e4		bcc $92b4			bcc 	CLWriteByteBlock
.92d0		e6 37		inc $37				inc 	zTemp0+1
.92d2		80 e0		bra $92b4			bra 	CLWriteByteBlock 			; and retry write out.
.92d4						_CLWBBExit:
.92d4		60		rts				rts
.92d5						CSGetCleanLine:
.92d5		a9 00		lda #$00			lda 	#0 							; no indent.
.92d7		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.92da		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.92dc		a0 00		ldy #$00			ldy 	#0
.92de						_CSClean:
.92de		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.92e1		f0 09		beq $92ec			beq 	_CSDoneClean
.92e3		30 04		bmi $92e9			bmi 	_CSIgnoreCharacter
.92e5		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.92e8		e8		inx				inx
.92e9						_CSIgnoreCharacter:
.92e9		c8		iny				iny
.92ea		80 f2		bra $92de			bra 	_CSClean
.92ec						_CSDoneClean:
.92ec		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.92ee		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.92f1		e8		inx				inx
.92f2		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.92f5		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.92f7		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.92f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.92fa						StopCommand:
.92fa		a9 08		lda #$08		lda	#8
.92fc		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92ff						ProcedureScan:
.92ff		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9301		85 30		sta $30				sta 	codePtr
.9303		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9305		85 31		sta $31				sta 	codePtr+1
.9307						_PSLoop:
.9307		b2 30		lda ($30)			lda 	(codePtr)
.9309		f0 42		beq $934d			beq 	_PSExit
.930b		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.930d		b1 30		lda ($30),y			lda 	(codePtr),y
.930f		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.9311		d0 2d		bne $9340			bne 	_PSNext
.9313		c8		iny				iny 								; get the address of the record to zTemp0 and
.9314		b1 30		lda ($30),y			lda 	(codePtr),y
.9316		29 c0		and #$c0			and 	#$C0
.9318		c9 40		cmp #$40			cmp 	#$40
.931a		d0 32		bne $934e			bne 	_PSSyntax
.931c		b1 30		lda ($30),y			lda 	(codePtr),y
.931e		18		clc				clc
.931f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9321		85 37		sta $37				sta 	zTemp0+1
.9323		c8		iny				iny 								; LSB
.9324		b1 30		lda ($30),y			lda 	(codePtr),y
.9326		85 36		sta $36				sta 	zTemp0
.9328		c8		iny				iny 								; character after variable call.
.9329		98		tya				tya 								; save Y offset at +7 (exponent slot)
.932a		a0 07		ldy #$07			ldy 	#7
.932c		91 36		sta ($36),y			sta 	(zTemp0),y
.932e		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9330		a0 02		ldy #$02			ldy 	#2
.9332		91 36		sta ($36),y			sta 	(zTemp0),y
.9334		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9336						_PSCopy:
.9336		b5 30		lda $30,x			lda 	safePtr,x
.9338		c8		iny				iny
.9339		91 36		sta ($36),y			sta 	(zTemp0),y
.933b		e8		inx				inx
.933c		e0 04		cpx #$04			cpx 	#4
.933e		d0 f6		bne $9336			bne 	_PSCopy
.9340						_PSNext:
.9340		18		clc				clc
.9341		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9343		65 30		adc $30				adc 	codePtr
.9345		85 30		sta $30				sta 	codePtr
.9347		90 02		bcc $934b			bcc 	_CREExit
.9349		e6 31		inc $31				inc 	codePtr+1 					; carry
.934b						_CREExit:
.934b		80 ba		bra $9307			bra 	_PSLoop
.934d						_PSExit:
.934d		60		rts				rts
.934e						_PSSyntax:
.934e		4c 32 a5	jmp $a532			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9351						ScanForward:
.9351		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9353		86 37		stx $37				stx 	zTemp0+1
.9355		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9357						_ScanLoop:
.9357		b1 30		lda ($30),y			lda 	(codePtr),y
.9359		c8		iny				iny
.935a		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.935c		d0 0e		bne $936c			bne 	_ScanGoNext
.935e		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9360		f0 04		beq $9366			beq 	_ScanMatch
.9362		c5 37		cmp $37				cmp 	zTemp0+1
.9364		d0 06		bne $936c			bne 	_ScanGoNext
.9366						_ScanMatch:
.9366		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9368		d0 01		bne $936b			bne 	_ScanNotEndEOL
.936a		88		dey				dey
.936b						_ScanNotEndEOL:
.936b		60		rts				rts
.936c						_ScanGoNext:
.936c		20 71 93	jsr $9371			jsr  	ScanForwardOne 				; allows for shifts and so on.
.936f		80 e6		bra $9357			bra 	_ScanLoop
.9371						ScanForwardOne:
.9371		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9373		90 3e		bcc $93b3			bcc 	_SFWExit
.9375		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9377		90 18		bcc $9391			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9379		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.937b		b0 2f		bcs $93ac			bcs 	_ScanSkipData
.937d		c9 aa		cmp #$aa			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.937f		90 32		bcc $93b3			bcc 	_SFWExit 					; if not, ordinary keywords.
.9381		c9 b5		cmp #$b5			cmp 	#KWC_LAST_STRUCTURE+1
.9383		b0 2e		bcs $93b3			bcs 	_SFWExit
.9385		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9387		c9 af		cmp #$af			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9389		b0 28		bcs $93b3			bcs 	_SFWExit
.938b		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.938d		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.938f		80 22		bra $93b3			bra 	_SFWExit
.9391						_ScanSkipOne:
.9391		c8		iny				iny 								; consume the extra one.
.9392		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9394		d0 1d		bne $93b3			bne 	_SFWExit
.9396		18		clc				clc
.9397		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9399		65 30		adc $30				adc 	codePtr
.939b		85 30		sta $30				sta 	codePtr
.939d		90 02		bcc $93a1			bcc 	_CREExit
.939f		e6 31		inc $31				inc 	codePtr+1 					; carry
.93a1						_CREExit:
.93a1		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.93a3		b2 30		lda ($30)			lda 	(codePtr)
.93a5		d0 0c		bne $93b3			bne 	_SFWExit 					; if not zero, more to scan
.93a7		a9 13		lda #$13		lda	#19
.93a9		4c 69 94	jmp $9469		jmp	ErrorHandler
.93ac						_ScanSkipData:
.93ac		88		dey				dey 								; point at data token
.93ad		c8		iny				iny 								; point to offset
.93ae		98		tya				tya 								; A = offset position
.93af		38		sec				sec 								; add size +1 hence SEC
.93b0		71 30		adc ($30),y			adc 	(codePtr),y
.93b2		a8		tay				tay 								; make current position.
.93b3						_SFWExit:
.93b3		60		rts				rts
.93b4						ScanGetCurrentLineStep:
.93b4		64 38		stz $38				stz 	zTemp1
.93b6		a0 03		ldy #$03			ldy 	#3
.93b8						_SGCLSLoop:
.93b8		b1 30		lda ($30),y			lda 	(codePtr),y
.93ba		c8		iny				iny
.93bb		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.93bd		f0 05		beq $93c4			beq 	_SGCLSExit
.93bf		20 71 93	jsr $9371			jsr 	ScanForwardOne
.93c2		80 f4		bra $93b8			bra 	_SGCLSLoop
.93c4						_SGCLSExit:
.93c4		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.93c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc4e						m
.93c7						Command_VERIFY:
.93c7		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; file name to verify
.93ca		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.93cc		a5 36		lda $36				lda 	zTemp0
.93ce		20 3f 81	jsr $813f			jsr 	KNLOpenFileRead 			; open file for reading
.93d1		b0 4b		bcs $941e			bcs 	_CVErrorHandler 			; error, so fail.
.93d3		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.93d6		20 69 8d	jsr $8d69			jsr     LoadReadByteInit            ; Init reader with the stream
.93d9		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.93dc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93de		85 30		sta $30				sta 	codePtr
.93e0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93e2		85 31		sta $31				sta 	codePtr+1
.93e4						_CVLoop:
.93e4		20 27 8d	jsr $8d27			jsr 	LoadReadLine 				; get next line.
.93e7		f0 27		beq $9410			beq 	_CVExit 					; end, exit.
.93e9		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.93ec		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.93ef		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.93f2		f0 f0		beq $93e4			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.93f4		a0 00		ldy #$00			ldy 	#0 							; start compare
.93f6						_CVCompareLoop:
.93f6		b1 30		lda ($30),y			lda 	(codePtr),y
.93f8		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.93fb		d0 1c		bne $9419			bne 	_CVCompareError
.93fd		c8		iny				iny
.93fe		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.9401		d0 f3		bne $93f6			bne 	_CVCompareLoop
.9403		18		clc				clc
.9404		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9406		65 30		adc $30				adc 	codePtr
.9408		85 30		sta $30				sta 	codePtr
.940a		90 02		bcc $940e			bcc 	_CREExit
.940c		e6 31		inc $31				inc 	codePtr+1 					; carry
.940e						_CREExit:
.940e		80 d4		bra $93e4			bra 	_CVLoop
.9410						_CVExit:
.9410		ad 71 07	lda $0771			lda 	BasicFileStream
.9413		20 03 82	jsr $8203			jsr 	KNLCloseFile
.9416		4c fc 8c	jmp $8cfc			jmp 	CLComplete
.9419						_CVCompareError:
.9419		a9 1b		lda #$1b		lda	#27
.941b		4c 69 94	jmp $9469		jmp	ErrorHandler
.941e						_CVErrorHandler:
.941e		4c 19 8d	jmp $8d19			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9421						Command_WHILE:
.9421		5a		phy				phy 								; save position of the test
.9422		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9424		20 02 a3	jsr $a302			jsr 	EvaluateNumber
.9427		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; check if zero
.942a		f0 0e		beq $943a			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.942c		98		tya				tya 								; position *after* test.
.942d		7a		ply				ply 								; restore position before test, at WHILE
.942e		88		dey				dey 								; so we execute the WHILE command again.
.942f		48		pha				pha 								; push after test on the stack
.9430		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9432		20 93 b4	jsr $b493			jsr 	StackOpen
.9435		20 d8 b4	jsr $b4d8			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9438		7a		ply				ply 								; restore the position *after* the test
.9439		60		rts				rts
.943a						_WHExitLoop:
.943a		68		pla				pla 								; throw post loop position
.943b		a9 b4		lda #$b4			lda 	#KWD_WEND 					; scan forward past WEND
.943d		aa		tax				tax
.943e		20 51 93	jsr $9351			jsr 	ScanForward
.9441		60		rts				rts
.9442						Command_WEND:
.9442		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9444		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9446		20 c0 b4	jsr $b4c0			jsr 	StackCheckFrame
.9449		20 e9 b4	jsr $b4e9			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.944c		20 b2 b4	jsr $b4b2			jsr 	StackClose		 			; erase the frame
.944f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9450						CheckRightBracket:
.9450		b1 30		lda ($30),y			lda 	(codePtr),y
.9452		c8		iny				iny
.9453		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9455		d0 0f		bne $9466			bne 	CNAFail
.9457		60		rts				rts
.9458						CheckComma:
.9458		b1 30		lda ($30),y			lda 	(codePtr),y
.945a		c8		iny				iny
.945b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.945d		d0 07		bne $9466			bne 	CNAFail
.945f		60		rts				rts
.9460						CheckNextA:
.9460		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9462		d0 02		bne $9466			bne 	CNAFail
.9464		c8		iny				iny 								; skip character
.9465		60		rts				rts 								; and exit
.9466						CNAFail:
.9466		4c 32 a5	jmp $a532			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9469						ErrorHandler:
.9469		a8		tay				tay 								; find the error text
.946a		f0 49		beq $94b5			beq 	_EHEnd
.946c		a2 00		ldx #$00			ldx 	#0
.946e		a9 4b		lda #$4b			lda 	#((ErrorText) & $FF)
.9470		85 36		sta $36				sta 	0+zTemp0
.9472		a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.9474		85 37		sta $37				sta 	1+zTemp0
.9476						_EHFind:
.9476		88		dey				dey 								; keep looking through text
.9477		f0 0e		beq $9487			beq 	_EHFound
.9479						_EHFindZero:
.9479		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.947b		e6 36		inc $36				inc 	zTemp0
.947d		d0 02		bne $9481			bne 	_EHFNoCarry
.947f		e6 37		inc $37				inc 	zTemp0+1
.9481						_EHFNoCarry:
.9481		c9 00		cmp #$00			cmp 	#0
.9483		d0 f4		bne $9479			bne 	_EHFindZero
.9485		80 ef		bra $9476			bra 	_EHFind
.9487						_EHFound:
.9487		a5 36		lda $36				lda 	zTemp0 						; print message
.9489		a6 37		ldx $37				ldx 	zTemp0+1
.948b		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.948e		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9490		b1 30		lda ($30),y			lda 	(codePtr),y
.9492		d0 05		bne $9499			bne 	_EHAtMsg
.9494		c8		iny				iny
.9495		b1 30		lda ($30),y			lda 	(codePtr),y
.9497		f0 17		beq $94b0			beq 	_EHCREnd
.9499						_EHAtMsg:
.9499		a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.949b		a9 b8		lda #$b8			lda 	#_AtMsg & $FF
.949d		20 c2 94	jsr $94c2			jsr 	PrintStringXA
.94a0		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.94a2		b1 30		lda ($30),y			lda 	(codePtr),y
.94a4		48		pha				pha
.94a5		c8		iny				iny
.94a6		b1 30		lda ($30),y			lda 	(codePtr),y
.94a8		aa		tax				tax
.94a9		68		pla				pla
.94aa		20 d8 98	jsr $98d8			jsr 	ConvertInt16 				; convert XA to string
.94ad		20 c2 94	jsr $94c2			jsr 	PrintStringXA 				; and print it.
.94b0						_EHCREnd:
.94b0		a9 0d		lda #$0d			lda 	#13 						; new line
.94b2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.94b5						_EHEnd:
.94b5		4c a2 85	jmp $85a2			jmp 	WarmStart
>94b8		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94c0		20 00
.94c2						PrintStringXA:
.94c2		5a		phy				phy
.94c3		86 37		stx $37				stx 	zTemp0+1
.94c5		85 36		sta $36				sta 	zTemp0
.94c7		a0 00		ldy #$00			ldy 	#0
.94c9						_PSXALoop:
.94c9		b1 36		lda ($36),y			lda 	(zTemp0),y
.94cb		f0 06		beq $94d3			beq 	_PSXAExit
.94cd		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.94d0		c8		iny				iny
.94d1		80 f6		bra $94c9			bra 	_PSXALoop
.94d3						_PSXAExit:
.94d3		7a		ply				ply
.94d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94d5						UnaryTrue:
.94d5		fa		plx				plx
.94d6						ReturnTrue:
.94d6		a9 01		lda #$01			lda 	#1  						; set to 1
.94d8		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.94db		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94dd		95 50		sta $50,x			sta 	NSStatus,x
.94df		60		rts				rts
.94e0						UnaryFalse:
.94e0		fa		plx				plx
.94e1						ReturnFalse:
.94e1		4c b4 a3	jmp $a3b4			jmp 	NSMSetZero 					; set it all to zero
.94e4						BinaryCompareEqual:
.94e4		fa		plx				plx
.94e5		20 20 95	jsr $9520			jsr 	CompareBaseCode
.94e8		c9 00		cmp #$00			cmp 	#0
.94ea		f0 ea		beq $94d6			beq 	ReturnTrue
.94ec		80 f3		bra $94e1			bra 	ReturnFalse
.94ee						BinaryCompareLess:
.94ee		fa		plx				plx
.94ef		20 20 95	jsr $9520			jsr 	CompareBaseCode
.94f2		c9 ff		cmp #$ff			cmp 	#$FF
.94f4		f0 e0		beq $94d6			beq 	ReturnTrue
.94f6		80 e9		bra $94e1			bra 	ReturnFalse
.94f8						BinaryCompareGreater:
.94f8		fa		plx				plx
.94f9		20 20 95	jsr $9520			jsr 	CompareBaseCode
.94fc		c9 01		cmp #$01			cmp 	#1
.94fe		f0 d6		beq $94d6			beq 	ReturnTrue
.9500		80 df		bra $94e1			bra 	ReturnFalse
.9502						BinaryCompareNotEqual:
.9502		fa		plx				plx
.9503		20 20 95	jsr $9520			jsr 	CompareBaseCode
.9506		c9 00		cmp #$00			cmp 	#0
.9508		d0 cc		bne $94d6			bne 	ReturnTrue
.950a		80 d5		bra $94e1			bra 	ReturnFalse
.950c						BinaryCompareLessEqual:
.950c		fa		plx				plx
.950d		20 20 95	jsr $9520			jsr 	CompareBaseCode
.9510		c9 01		cmp #$01			cmp 	#1
.9512		d0 c2		bne $94d6			bne 	ReturnTrue
.9514		80 cb		bra $94e1			bra 	ReturnFalse
.9516						BinaryCompareGreaterEqual:
.9516		fa		plx				plx
.9517		20 20 95	jsr $9520			jsr 	CompareBaseCode
.951a		c9 ff		cmp #$ff			cmp 	#$FF
.951c		d0 b8		bne $94d6			bne 	ReturnTrue
.951e		80 c1		bra $94e1			bra 	ReturnFalse
.9520						CompareBaseCode:
.9520		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; make both values if references.
.9523		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9525		15 51		ora $51,x			ora 	NSStatus+1,x
.9527		29 10		and #$10			and 	#NSTString
.9529		d0 37		bne $9562			bne 	_CBCString 					; if so do string code, which will check if both.
.952b		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.952d		15 79		ora $79,x			ora 	NSExponent+1,x
.952f		d0 34		bne $9565			bne 	_CBCFloat
.9531		b5 50		lda $50,x			lda 	NSStatus,x
.9533		15 51		ora $51,x			ora 	NSStatus+1,x
.9535		29 08		and #$08			and 	#NSTFloat
.9537		d0 2c		bne $9565			bne 	_CBCFloat
.9539		20 68 95	jsr $9568			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.953c		e8		inx				inx
.953d		20 68 95	jsr $9568			jsr 	CompareFixMinusZero
.9540		ca		dex				dex
.9541		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9543		55 51		eor $51,x			eor 	NSStatus+1,x
.9545		10 0a		bpl $9551			bpl 	_CDCSameSign
.9547		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9549		30 14		bmi $955f			bmi 	_CBCLess 					; return $FF
.954b						_CBCGreater:
.954b		a9 01		lda #$01			lda 	#1
.954d		60		rts				rts
.954e						_CBCEqual:
.954e		a9 00		lda #$00			lda 	#0
.9550		60		rts				rts
.9551						_CDCSameSign:
.9551		20 7d 97	jsr $977d			jsr 	SubTopTwoStack 				; unsigned subtract
.9554		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; or the mantissa together
.9557		f0 f5		beq $954e			beq 	_CBCEqual 					; -0 == 0
.9559		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.955b		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.955d		10 ec		bpl $954b			bpl 	_CBCGreater
.955f						_CBCLess:
.955f		a9 ff		lda #$ff			lda 	#$FF
.9561		60		rts				rts
.9562						_CBCString:
.9562		4c ee 96	jmp $96ee			jmp 	CompareStrings
.9565						_CBCFloat:
.9565		4c 38 9a	jmp $9a38			jmp 	CompareFloat
.9568						CompareFixMinusZero:
.9568		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero
.956b		d0 02		bne $956f			bne 	_CFXMZNotZero
.956d		74 50		stz $50,x			stz 	NSStatus,x
.956f						_CFXMZNotZero:
.956f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9570						StringConcat:
.9570		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9572		35 51		and $51,x			and 	NSStatus+1,x
.9574		29 18		and #$18			and 	#NSBTypeMask
.9576		c9 10		cmp #$10			cmp 	#NSTString
.9578		d0 50		bne $95ca			bne		_SCType
.957a		64 38		stz $38				stz 	zTemp1 						; counting total length
.957c		e8		inx				inx
.957d		20 9b 95	jsr $959b			jsr 	_SCSetupZ0 					; setup for second
.9580		20 a4 95	jsr $95a4			jsr 	_SCLengthZ0 				; length for second
.9583		ca		dex				dex
.9584		20 9b 95	jsr $959b			jsr 	_SCSetupZ0 					; setup for first
.9587		20 a4 95	jsr $95a4			jsr 	_SCLengthZ0 				; length for first
.958a		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.958c		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.958f		20 bb 95	jsr $95bb			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9592		e8		inx				inx
.9593		20 9b 95	jsr $959b			jsr 	_SCSetupZ0 					; copy second out
.9596		20 bb 95	jsr $95bb			jsr 	_SCCopy
.9599		ca		dex				dex
.959a		60		rts				rts
.959b						_SCSetupZ0:
.959b		b5 58		lda $58,x			lda 	NSMantissa0,x
.959d		85 36		sta $36				sta 	zTemp0
.959f		b5 60		lda $60,x			lda 	NSMantissa1,x
.95a1		85 37		sta $37				sta 	zTemp0+1
.95a3		60		rts				rts
.95a4						_SCLengthZ0:
.95a4		5a		phy				phy
.95a5		a0 00		ldy #$00			ldy 	#0
.95a7						_SCLenLoop:
.95a7		b1 36		lda ($36),y			lda 	(zTemp0),y
.95a9		f0 0e		beq $95b9			beq 	_SCLExit
.95ab		c8		iny				iny
.95ac		e6 38		inc $38				inc 	zTemp1
.95ae		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.95b0		c9 fd		cmp #$fd			cmp 	#253
.95b2		d0 f3		bne $95a7			bne		_SCLenLoop
.95b4		a9 09		lda #$09		lda	#9
.95b6		4c 69 94	jmp $9469		jmp	ErrorHandler
.95b9						_SCLExit:
.95b9		7a		ply				ply
.95ba		60		rts				rts
.95bb						_SCCopy:
.95bb		5a		phy				phy
.95bc		a0 00		ldy #$00			ldy 	#0
.95be						_SCCopyLoop:
.95be		b1 36		lda ($36),y			lda 	(zTemp0),y
.95c0		f0 06		beq $95c8			beq 	_SCCExit
.95c2		20 bc b5	jsr $b5bc			jsr 	StringTempWrite
.95c5		c8		iny				iny
.95c6		80 f6		bra $95be			bra 	_SCCopyLoop
.95c8						_SCCExit:
.95c8		7a		ply				ply
.95c9		60		rts				rts
.95ca						_SCType:
.95ca		4c 3c a5	jmp $a53c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.95cd						IntegerDivide:
.95cd		fa		plx				plx
.95ce		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95d0		15 51		ora $51,x			ora 	NSStatus+1,x
.95d2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d3		0a		asl a				asl 	a
.95d4		10 05		bpl $95db			bpl 	_NotRef
.95d6		48		pha				pha
.95d7		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95da		68		pla				pla
.95db						_NotRef:
.95db		0a		asl a				asl 	a
.95dc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95de		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e0		15 79		ora $79,x			ora 	NSExponent+1,x
.95e2		f0 03		beq $95e7			beq 	_IntegerCode 				; if clear, then we have two integers
.95e4		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.95e7						_IntegerCode:
.95e7		20 01 96	jsr $9601			jsr 	CheckDivideZero 			; do div zero check
.95ea		20 33 96	jsr $9633			jsr 	Int32Divide 				; do the division
.95ed		20 e4 96	jsr $96e4			jsr 	CalculateSign 				; calculate result sign
.95f0						NSMCopyPlusTwoToZero:
.95f0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.95f2		95 58		sta $58,x			sta 	NSMantissa0,x
.95f4		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.95f6		95 60		sta $60,x			sta 	NSMantissa1,x
.95f8		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.95fa		95 68		sta $68,x			sta 	NSMantissa2,x
.95fc		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.95fe		95 70		sta $70,x			sta 	NSMantissa3,x
.9600		60		rts				rts
.9601						CheckDivideZero:
.9601		e8		inx				inx
.9602		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero
.9605		f0 02		beq $9609			beq 	_CDVError
.9607		ca		dex				dex
.9608		60		rts				rts
.9609						_CDVError:
.9609		a9 03		lda #$03		lda	#3
.960b		4c 69 94	jmp $9469		jmp	ErrorHandler
.960e						IntegerModulus:
.960e		fa		plx				plx
.960f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9611		15 51		ora $51,x			ora 	NSStatus+1,x
.9613		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9614		0a		asl a				asl 	a
.9615		10 05		bpl $961c			bpl 	_NotRef
.9617		48		pha				pha
.9618		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.961b		68		pla				pla
.961c						_NotRef:
.961c		0a		asl a				asl 	a
.961d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.961f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9621		15 79		ora $79,x			ora 	NSExponent+1,x
.9623		f0 03		beq $9628			beq 	_IntegerCode 				; if clear, then we have two integers
.9625		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.9628						_IntegerCode:
.9628						IntegerModulusNoCheck:
.9628		20 01 96	jsr $9601			jsr 	CheckDivideZero 			; do div zero check
.962b		20 33 96	jsr $9633			jsr 	Int32Divide 				; do the division
.962e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9630		56 50		lsr $50,x			lsr 	NSStatus,x
.9632		60		rts				rts
.9633						Int32Divide:
.9633		48		pha				pha 								; save AXY
.9634		5a		phy				phy
.9635		20 97 a3	jsr $a397			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9638		20 b0 a3	jsr $a3b0			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.963b		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.963d						_I32DivideLoop:
.963d		e8		inx				inx
.963e		e8		inx				inx
.963f		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9642		ca		dex				dex
.9643		ca		dex				dex
.9644		20 c4 a3	jsr $a3c4			jsr 	NSMRotateLeft
.9647		20 72 96	jsr $9672			jsr 	DivideCheckSubtract 		; check if subtract possible
.964a		90 02		bcc $964e			bcc 	_I32DivideNoCarryIn
.964c		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.964e						_I32DivideNoCarryIn:
.964e		88		dey				dey 								; loop round till division completed.
.964f		d0 ec		bne $963d			bne 	_I32DivideLoop
.9651		7a		ply				ply 								; restore AXY and exit
.9652		68		pla				pla
.9653		60		rts				rts
.9654						Int32ShiftDivide:
.9654		48		pha				pha 								; save AY
.9655		5a		phy				phy
.9656		e8		inx				inx 								; clear S[X+2]
.9657		e8		inx				inx
.9658		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.965b		ca		dex				dex
.965c		ca		dex				dex
.965d		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.965f						_I32SDLoop:
.965f		20 72 96	jsr $9672			jsr 	DivideCheckSubtract 		; check if subtract possible
.9662		e8		inx				inx
.9663		e8		inx				inx
.9664		20 c4 a3	jsr $a3c4			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9667		ca		dex				dex
.9668		ca		dex				dex
.9669		20 c4 a3	jsr $a3c4			jsr 	NSMRotateLeft
.966c		88		dey				dey 	 							; do 31 times
.966d		d0 f0		bne $965f			bne 	_I32SDLoop
.966f		7a		ply				ply 								; restore AY and exit
.9670		68		pla				pla
.9671		60		rts				rts
.9672						DivideCheckSubtract:
.9672		20 7d 97	jsr $977d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9675		b0 04		bcs $967b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9677		20 63 97	jsr $9763			jsr 	AddTopTwoStack 				; add it back in
.967a		18		clc				clc 								; and return False
.967b						_DCSExit:
.967b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.967c						MulInteger:
.967c		fa		plx				plx
.967d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.967f		15 51		ora $51,x			ora 	NSStatus+1,x
.9681		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9682		0a		asl a				asl 	a
.9683		10 05		bpl $968a			bpl 	_NotRef
.9685		48		pha				pha
.9686		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9689		68		pla				pla
.968a						_NotRef:
.968a		0a		asl a				asl 	a 							; put MSB of type into A:7
.968b		30 09		bmi $9696			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.968d		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.968f		15 79		ora $79,x			ora 	NSExponent+1,x
.9691		f0 06		beq $9699			beq 	_IntegerCode 				; if clear, then we have two integers
.9693		4c fa 9a	jmp $9afa			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9696						_StringData:
.9696		4c 46 a5	jmp $a546			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9699						_IntegerCode:
.9699		20 a6 96	jsr $96a6			jsr 	MultiplyShort
.969c		c9 00		cmp #$00			cmp 	#0
.969e		f0 05		beq $96a5			beq 	_MIExit
.96a0		a9 04		lda #$04		lda	#4
.96a2		4c 69 94	jmp $9469		jmp	ErrorHandler
.96a5						_MIExit:
.96a5		60		rts				rts
.96a6						MultiplyShort:
.96a6		5a		phy				phy 								; save Y
.96a7		20 97 a3	jsr $a397			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.96aa		20 b0 a3	jsr $a3b0			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.96ad		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.96af						_I32MLoop:
.96af		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.96b1		15 62		ora $62,x			ora 	NSMantissa1+2,x
.96b3		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.96b5		15 72		ora $72,x			ora 	NSMantissa3+2,x
.96b7		f0 25		beq $96de			beq 	_I32MExit 					; exit if zero
.96b9		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.96bb		29 01		and #$01			and 	#1
.96bd		f0 0d		beq $96cc			beq 	_I32MNoAdd
.96bf		20 63 97	jsr $9763			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.96c2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.96c4		10 06		bpl $96cc			bpl 	_I32MNoAdd
.96c6						_I32ShiftRight:
.96c6		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight 				; shift S[X] right
.96c9		c8		iny				iny 								; increment shift count
.96ca		80 09		bra $96d5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.96cc						_I32MNoAdd:
.96cc		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.96ce		70 f6		bvs $96c6			bvs 	_I32ShiftRight 				; instead.
.96d0		e8		inx				inx
.96d1		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.96d4		ca		dex				dex
.96d5						_I32MShiftUpper:
.96d5		e8		inx				inx 								; shift S[X+2] right
.96d6		e8		inx				inx
.96d7		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight
.96da		ca		dex				dex
.96db		ca		dex				dex
.96dc		80 d1		bra $96af			bra 	_I32MLoop 					; try again.
.96de						_I32MExit:
.96de		20 e4 96	jsr $96e4			jsr 	CalculateSign
.96e1		98		tya				tya 								; shift in A
.96e2		7a		ply				ply 								; restore Y and exit
.96e3		60		rts				rts
.96e4						CalculateSign:
.96e4		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.96e6		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.96e8		55 51		eor $51,x			eor 	NSStatus+1,x
.96ea		0a		asl a				asl 	a 							; shift bit 7 into carry
.96eb		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.96ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.96ee						CompareStrings:
.96ee		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.96f0		35 51		and $51,x			and 	NSStatus+1,x
.96f2		29 10		and #$10			and 	#NSBIsString
.96f4		f0 28		beq $971e			beq 	_CSTypeError
.96f6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.96f8		85 36		sta $36				sta 	zTemp0
.96fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.96fc		85 37		sta $37				sta 	zTemp0+1
.96fe		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9700		85 38		sta $38				sta 	zTemp1
.9702		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9704		85 39		sta $39				sta 	zTemp1+1
.9706		5a		phy				phy 								; save Y so we can access strings
.9707		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9709						_CSLoop:
.9709		c8		iny				iny
.970a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.970c		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.970e		d0 06		bne $9716			bne 	_CSDifferent
.9710		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9712		d0 f5		bne $9709			bne 	_CSLoop 					; still comparing
.9714						_CSExit:
.9714		7a		ply				ply 								; reached end, return zero in A from EOS
.9715		60		rts				rts
.9716						_CSDifferent:
.9716		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9718		90 fa		bcc $9714			bcc		_CSExit
.971a		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.971c		80 f6		bra $9714			bra 	_CSExit
.971e						_CSTypeError:
.971e		4c 3c a5	jmp $a53c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9721						ShiftLeft:
.9721		38		sec				sec 								; common code, carry determines which way.
.9722		80 01		bra $9725			bra 	ShiftMain
.9724						ShiftRight:
.9724		18		clc				clc
.9725						ShiftMain:
.9725		fa		plx				plx 								; restore X
.9726		08		php				php 								; save direction
.9727		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9729		15 51		ora $51,x			ora 	NSStatus+1,x
.972b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.972c		0a		asl a				asl 	a
.972d		10 05		bpl $9734			bpl 	_NotRef
.972f		48		pha				pha
.9730		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9733		68		pla				pla
.9734						_NotRef:
.9734		0a		asl a				asl 	a
.9735		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9737		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9739		15 79		ora $79,x			ora 	NSExponent+1,x
.973b		f0 03		beq $9740			beq 	_IntegerCode 				; if clear, then we have two integers
.973d		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.9740						_IntegerCode:
.9740		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9742		29 e0		and #$e0			and 	#$E0
.9744		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9746		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9748		15 71		ora $71,x			ora 	NSMantissa3+1,x
.974a		d0 12		bne $975e			bne 	_SMExit0 					; if >= 32 it will always return zero.
.974c						_SMLoop:
.974c		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.974e		30 11		bmi $9761			bmi 	_SMExit 					; exit if done.
.9750		28		plp				plp 								; restore direction setting
.9751		08		php				php
.9752		90 05		bcc $9759			bcc 	_SMRight
.9754		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; shift left if CS
.9757		80 f3		bra $974c			bra 	_SMLoop
.9759						_SMRight:
.9759		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight 				; shift right if CC
.975c		80 ee		bra $974c			bra 	_SMLoop
.975e						_SMExit0:
.975e		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; return zero.
.9761						_SMExit:
.9761		28		plp				plp 								; throw direction
.9762		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9763						AddTopTwoStack:
.9763		18		clc				clc
.9764		b5 58		lda $58,x			lda		NSMantissa0,x
.9766		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9768		95 58		sta $58,x			sta 	NSMantissa0,x
.976a		b5 60		lda $60,x			lda		NSMantissa1,x
.976c		75 61		adc $61,x			adc 		NSMantissa1+1,x
.976e		95 60		sta $60,x			sta 	NSMantissa1,x
.9770		b5 68		lda $68,x			lda		NSMantissa2,x
.9772		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9774		95 68		sta $68,x			sta 	NSMantissa2,x
.9776		b5 70		lda $70,x			lda		NSMantissa3,x
.9778		75 71		adc $71,x			adc 		NSMantissa3+1,x
.977a		95 70		sta $70,x			sta 	NSMantissa3,x
.977c		60		rts				rts
.977d						SubTopTwoStack:
.977d		38		sec				sec
.977e		b5 58		lda $58,x			lda		NSMantissa0,x
.9780		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9782		95 58		sta $58,x			sta 	NSMantissa0,x
.9784		b5 60		lda $60,x			lda		NSMantissa1,x
.9786		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9788		95 60		sta $60,x			sta 	NSMantissa1,x
.978a		b5 68		lda $68,x			lda		NSMantissa2,x
.978c		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.978e		95 68		sta $68,x			sta 	NSMantissa2,x
.9790		b5 70		lda $70,x			lda		NSMantissa3,x
.9792		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9794		95 70		sta $70,x			sta 	NSMantissa3,x
.9796		60		rts				rts
.9797						AddInteger:
.9797		fa		plx				plx
.9798		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.979a		15 51		ora $51,x			ora 	NSStatus+1,x
.979c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.979d		0a		asl a				asl 	a
.979e		10 05		bpl $97a5			bpl 	_NotRef
.97a0		48		pha				pha
.97a1		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a4		68		pla				pla
.97a5						_NotRef:
.97a5		0a		asl a				asl 	a 							; put MSB of type into A:7
.97a6		30 09		bmi $97b1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97a8		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97aa		15 79		ora $79,x			ora 	NSExponent+1,x
.97ac		f0 06		beq $97b4			beq 	_IntegerCode 				; if clear, then we have two integers
.97ae		4c aa 99	jmp $99aa			jmp 	FloatingPointAdd 							; otherwise at least one float.
.97b1						_StringData:
.97b1		4c 70 95	jmp $9570			jmp 	StringConcat							; at least one string - don't know both are strings.
.97b4						_IntegerCode:
.97b4						AddCode:
.97b4		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.97b6		55 51		eor $51,x			eor 	NSStatus+1,x
.97b8		10 a9		bpl $9763			bpl 	AddTopTwoStack
.97ba		20 7d 97	jsr $977d			jsr 	SubTopTwoStack 				; do a physical subtraction
.97bd		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.97bf		10 07		bpl $97c8			bpl 	_AddExit
.97c1		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.97c3		95 50		sta $50,x			sta 	NSStatus,x
.97c5		20 7d a3	jsr $a37d			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.97c8						_AddExit:
.97c8		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; check for -0
.97cb		d0 02		bne $97cf			bne 	_AddNonZero
.97cd		74 50		stz $50,x			stz 	NSStatus,x
.97cf						_AddNonZero:
.97cf		60		rts				rts
.97d0						SubInteger:
.97d0		fa		plx				plx
.97d1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d3		15 51		ora $51,x			ora 	NSStatus+1,x
.97d5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97d6		0a		asl a				asl 	a
.97d7		10 05		bpl $97de			bpl 	_NotRef
.97d9		48		pha				pha
.97da		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97dd		68		pla				pla
.97de						_NotRef:
.97de		0a		asl a				asl 	a 							; put MSB of type into A:7
.97df		30 09		bmi $97ea			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97e1		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e3		15 79		ora $79,x			ora 	NSExponent+1,x
.97e5		f0 06		beq $97ed			beq 	_IntegerCode 				; if clear, then we have two integers
.97e7		4c af 99	jmp $99af			jmp 	FloatingPointSub 							; otherwise at least one float.
.97ea						_StringData:
.97ea		4c 46 a5	jmp $a546			jmp 	NotDoneError							; at least one string - don't know both are strings.
.97ed						_IntegerCode:
.97ed		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.97ef		49 80		eor #$80			eor 	#$80
.97f1		95 51		sta $51,x			sta 	NSStatus+1,x
.97f3		80 bf		bra $97b4			bra 	AddCode 					; and do the same code as add.
.97f5						AndInteger:
.97f5		fa		plx				plx
.97f6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97f8		15 51		ora $51,x			ora 	NSStatus+1,x
.97fa		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97fb		0a		asl a				asl 	a
.97fc		10 05		bpl $9803			bpl 	_NotRef
.97fe		48		pha				pha
.97ff		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9802		68		pla				pla
.9803						_NotRef:
.9803		0a		asl a				asl 	a
.9804		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9806		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9808		15 79		ora $79,x			ora 	NSExponent+1,x
.980a		f0 03		beq $980f			beq 	_IntegerCode 				; if clear, then we have two integers
.980c		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.980f						_IntegerCode:
.980f		b5 58		lda $58,x			lda		NSMantissa0,x
.9811		35 59		and $59,x			and 		NSMantissa0+1,x
.9813		95 58		sta $58,x			sta 	NSMantissa0,x
.9815		b5 60		lda $60,x			lda		NSMantissa1,x
.9817		35 61		and $61,x			and 		NSMantissa1+1,x
.9819		95 60		sta $60,x			sta 	NSMantissa1,x
.981b		b5 68		lda $68,x			lda		NSMantissa2,x
.981d		35 69		and $69,x			and 		NSMantissa2+1,x
.981f		95 68		sta $68,x			sta 	NSMantissa2,x
.9821		b5 70		lda $70,x			lda		NSMantissa3,x
.9823		35 71		and $71,x			and 		NSMantissa3+1,x
.9825		95 70		sta $70,x			sta 	NSMantissa3,x
.9827		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9829		60		rts				rts
.982a						OraInteger:
.982a		fa		plx				plx
.982b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.982d		15 51		ora $51,x			ora 	NSStatus+1,x
.982f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9830		0a		asl a				asl 	a
.9831		10 05		bpl $9838			bpl 	_NotRef
.9833		48		pha				pha
.9834		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9837		68		pla				pla
.9838						_NotRef:
.9838		0a		asl a				asl 	a
.9839		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.983b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.983d		15 79		ora $79,x			ora 	NSExponent+1,x
.983f		f0 03		beq $9844			beq 	_IntegerCode 				; if clear, then we have two integers
.9841		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.9844						_IntegerCode:
.9844		b5 58		lda $58,x			lda		NSMantissa0,x
.9846		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9848		95 58		sta $58,x			sta 	NSMantissa0,x
.984a		b5 60		lda $60,x			lda		NSMantissa1,x
.984c		15 61		ora $61,x			ora 		NSMantissa1+1,x
.984e		95 60		sta $60,x			sta 	NSMantissa1,x
.9850		b5 68		lda $68,x			lda		NSMantissa2,x
.9852		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9854		95 68		sta $68,x			sta 	NSMantissa2,x
.9856		b5 70		lda $70,x			lda		NSMantissa3,x
.9858		15 71		ora $71,x			ora 		NSMantissa3+1,x
.985a		95 70		sta $70,x			sta 	NSMantissa3,x
.985c		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.985e		60		rts				rts
.985f						EorInteger:
.985f		fa		plx				plx
.9860		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9862		15 51		ora $51,x			ora 	NSStatus+1,x
.9864		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9865		0a		asl a				asl 	a
.9866		10 05		bpl $986d			bpl 	_NotRef
.9868		48		pha				pha
.9869		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.986c		68		pla				pla
.986d						_NotRef:
.986d		0a		asl a				asl 	a
.986e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9870		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9872		15 79		ora $79,x			ora 	NSExponent+1,x
.9874		f0 03		beq $9879			beq 	_IntegerCode 				; if clear, then we have two integers
.9876		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.9879						_IntegerCode:
.9879		b5 58		lda $58,x			lda		NSMantissa0,x
.987b		55 59		eor $59,x			eor 		NSMantissa0+1,x
.987d		95 58		sta $58,x			sta 	NSMantissa0,x
.987f		b5 60		lda $60,x			lda		NSMantissa1,x
.9881		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9883		95 60		sta $60,x			sta 	NSMantissa1,x
.9885		b5 68		lda $68,x			lda		NSMantissa2,x
.9887		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9889		95 68		sta $68,x			sta 	NSMantissa2,x
.988b		b5 70		lda $70,x			lda		NSMantissa3,x
.988d		55 71		eor $71,x			eor 		NSMantissa3+1,x
.988f		95 70		sta $70,x			sta 	NSMantissa3,x
.9891		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9893		60		rts				rts
.9894						WordIndirect:
.9894		fa		plx				plx
.9895		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9897		15 51		ora $51,x			ora 	NSStatus+1,x
.9899		0a		asl a				asl 	a 							; shift reference bit into sign bit
.989a		0a		asl a				asl 	a
.989b		10 05		bpl $98a2			bpl 	_NotRef
.989d		48		pha				pha
.989e		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98a1		68		pla				pla
.98a2						_NotRef:
.98a2		0a		asl a				asl 	a
.98a3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98a5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98a7		15 79		ora $79,x			ora 	NSExponent+1,x
.98a9		f0 03		beq $98ae			beq 	_IntegerCode 				; if clear, then we have two integers
.98ab		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.98ae						_IntegerCode:
.98ae		20 b4 97	jsr $97b4			jsr 	AddCode 					; add the two values
.98b1		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.98b3		95 50		sta $50,x			sta 	NSStatus,x
.98b5		60		rts				rts
.98b6						ByteIndirect:
.98b6		fa		plx				plx
.98b7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98b9		15 51		ora $51,x			ora 	NSStatus+1,x
.98bb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98bc		0a		asl a				asl 	a
.98bd		10 05		bpl $98c4			bpl 	_NotRef
.98bf		48		pha				pha
.98c0		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98c3		68		pla				pla
.98c4						_NotRef:
.98c4		0a		asl a				asl 	a
.98c5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98c7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98c9		15 79		ora $79,x			ora 	NSExponent+1,x
.98cb		f0 03		beq $98d0			beq 	_IntegerCode 				; if clear, then we have two integers
.98cd		4c 3c a5	jmp $a53c			jmp 	TypeError 					; anything else, type mismatch.
.98d0						_IntegerCode:
.98d0		20 b4 97	jsr $97b4			jsr 	AddCode 					; add the two values
.98d3		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.98d5		95 50		sta $50,x			sta 	NSStatus,x
.98d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.98d8						ConvertInt16:
.98d8		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.98da		86 60		stx $60				stx 	NSMantissa1
.98dc		64 68		stz $68				stz 	NSMantissa2
.98de		64 70		stz $70				stz 	NSMantissa3
.98e0		64 50		stz $50				stz 	NSStatus 					; positive integer
.98e2		a2 00		ldx #$00			ldx 	#0 							; stack level
.98e4		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.98e6		80 00		bra $98e8			bra 	ConvertInt32
.98e8						ConvertInt32:
.98e8		5a		phy				phy
.98e9		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.98eb		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.98ed		10 08		bpl $98f7			bpl 	_CI32NotNeg
.98ef		48		pha				pha
.98f0		a9 2d		lda #$2d			lda 	#'-'
.98f2		99 27 06	sta $0627,y			sta 	numberBuffer,y
.98f5		c8		iny				iny
.98f6		68		pla				pla
.98f7						_CI32NotNeg:
.98f7		20 05 99	jsr $9905			jsr 	_CI32DivideConvert 			; recursive conversion
.98fa		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.98fc		99 27 06	sta $0627,y			sta 	numberBuffer,y
.98ff		7a		ply				ply
.9900		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9902		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9904		60		rts				rts
.9905						_CI32DivideConvert:
.9905		e8		inx				inx 								; write to next slot up
.9906		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte 		 			; write the base out.
.9909		ca		dex				dex
.990a		20 33 96	jsr $9633			jsr 	Int32Divide 				; divide
.990d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.990f		48		pha				pha
.9910		20 f0 95	jsr $95f0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9913		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; is it zero ?
.9916		f0 05		beq $991d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9918		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.991a		20 05 99	jsr $9905			jsr 	_CI32DivideConvert 			; and recusrively call.
.991d						_CI32NoRecurse:
.991d		68		pla				pla 								; remainder
.991e		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9920		90 02		bcc $9924			bcc 	_CI32NotHex
.9922		69 26		adc #$26			adc 	#6+32
.9924						_CI32NotHex:
.9924		69 30		adc #$30			adc 	#48
.9926		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9929		c8		iny				iny
.992a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.992b						PrecedenceLevel:
>992b		04					.byte	 4	; $00 <<
>992c		02					.byte	 2	; $01 <=
>992d		02					.byte	 2	; $02 <>
>992e		00					.byte	 0	; $03 !!3
>992f		00					.byte	 0	; $04 ><
>9930		02					.byte	 2	; $05 >=
>9931		04					.byte	 4	; $06 >>
>9932		00					.byte	 0	; $07 !!7
>9933		00					.byte	 0	; $08 !!8
>9934		00					.byte	 0	; $09 !!9
>9935		00					.byte	 0	; $0a !!10
>9936		00					.byte	 0	; $0b !!11
>9937		00					.byte	 0	; $0c !!12
>9938		00					.byte	 0	; $0d !!13
>9939		00					.byte	 0	; $0e !!14
>993a		00					.byte	 0	; $0f !!15
>993b		00					.byte	 0	; $10 @
>993c		00					.byte	 0	; $11 !!17
>993d		00					.byte	 0	; $12 !!18
>993e		00					.byte	 0	; $13 [
>993f		04					.byte	 4	; $14 \
>9940		00					.byte	 0	; $15 ]
>9941		01					.byte	 1	; $16 ^
>9942		00					.byte	 0	; $17 _
>9943		00					.byte	 0	; $18 `
>9944		00					.byte	 0	; $19 !!25
>9945		00					.byte	 0	; $1a !!26
>9946		00					.byte	 0	; $1b {
>9947		01					.byte	 1	; $1c |
>9948		00					.byte	 0	; $1d }
>9949		00					.byte	 0	; $1e ~
>994a		00					.byte	 0	; $1f [7m<7F>[m
>994b		00					.byte	 0	; $20
>994c		05					.byte	 5	; $21 !
>994d		00					.byte	 0	; $22 "
>994e		00					.byte	 0	; $23 #
>994f		05					.byte	 5	; $24 $
>9950		04					.byte	 4	; $25 %
>9951		01					.byte	 1	; $26 &
>9952		00					.byte	 0	; $27 '
>9953		00					.byte	 0	; $28 (
>9954		00					.byte	 0	; $29 )
>9955		04					.byte	 4	; $2a *
>9956		03					.byte	 3	; $2b +
>9957		00					.byte	 0	; $2c ,
>9958		03					.byte	 3	; $2d -
>9959		00					.byte	 0	; $2e .
>995a		04					.byte	 4	; $2f /
>995b		00					.byte	 0	; $30 0
>995c		00					.byte	 0	; $31 1
>995d		00					.byte	 0	; $32 2
>995e		00					.byte	 0	; $33 3
>995f		00					.byte	 0	; $34 4
>9960		00					.byte	 0	; $35 5
>9961		00					.byte	 0	; $36 6
>9962		00					.byte	 0	; $37 7
>9963		00					.byte	 0	; $38 8
>9964		00					.byte	 0	; $39 9
>9965		00					.byte	 0	; $3a :
>9966		00					.byte	 0	; $3b ;
>9967		02					.byte	 2	; $3c <
>9968		02					.byte	 2	; $3d =
>9969		02					.byte	 2	; $3e >
>996a		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.996b						EvaluateExpressionAt0:
.996b		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.996d						EvaluateExpression:
.996d		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.996f						EvaluateExpressionAtPrecedence:
.996f		48		pha				pha 								; save precedence level
.9970		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm 				; evaluate term into level X.
.9973		68		pla				pla 								; restore precedence level.
.9974						_EXPRLoop:
.9974		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9976		b1 30		lda ($30),y			lda 	(codePtr),y
.9978		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.997a		b0 25		bcs $99a1			bcs 	_EXPRExit
.997c		da		phx				phx 								; read the operator precedence
.997d		aa		tax				tax
.997e		bd 2b 99	lda $992b,x			lda 	PrecedenceLevel,x
.9981		fa		plx				plx
.9982		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9984		f0 1b		beq $99a1			beq 	_EXPRExit
.9986		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9988		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.998a		c5 37		cmp $37				cmp 	zTemp0+1
.998c		b0 13		bcs $99a1			bcs		_EXPRExit 					; if current >= operator exit
.998e		48		pha				pha 								; save current precedence.
.998f		b1 30		lda ($30),y			lda 	(codePtr),y
.9991		c8		iny				iny
.9992		48		pha				pha
.9993		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9995		e8		inx				inx 								; work out the right hand side.
.9996		20 6f 99	jsr $996f			jsr 	EvaluateExpressionAtPrecedence
.9999		ca		dex				dex
.999a		68		pla				pla 								; get operator, call the code.
.999b		20 a4 99	jsr $99a4			jsr 	_EXPRCaller
.999e		68		pla				pla 								; restore precedence level
.999f		80 d3		bra $9974			bra 	_EXPRLoop 					; and go round.
.99a1						_EXPRExit:
.99a1		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.99a3		60		rts				rts
.99a4						_EXPRCaller:
.99a4		da		phx				phx 								; save on stack, first thing is to restore it
.99a5		0a		asl a				asl 	a 							; double so can use vectors into X
.99a6		aa		tax				tax
.99a7		7c 76 90	jmp ($9076,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.99aa						FloatingPointAdd:
.99aa		20 20 9b	jsr $9b20			jsr 	FloatPrepare 				; prepare for floats
.99ad		80 09		bra $99b8			bra 	FloatAdd
.99af						FloatingPointSub:
.99af		20 20 9b	jsr $9b20			jsr 	FloatPrepare 				; prepare for floats
.99b2						FloatSubtract:
.99b2		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.99b4		49 80		eor #$80			eor 	#$80
.99b6		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.99b8						FloatAdd:
.99b8		48		pha				pha
.99b9		5a		phy				phy
.99ba		20 2f 9b	jsr $9b2f			jsr 	NSNormalise 				; normalise S[X]
.99bd		f0 51		beq $9a10			beq 	_FAReturn1
.99bf		e8		inx				inx 								; normalise S[X+1]
.99c0		20 2f 9b	jsr $9b2f			jsr 	NSNormalise
.99c3		ca		dex				dex
.99c4		c9 00		cmp #$00			cmp 	#0
.99c6		f0 60		beq $9a28			beq 	_FAExit 					; if so, just return A
.99c8		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.99ca		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.99cc		f0 18		beq $99e6			beq 	_FAExponentsEqual
.99ce		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.99d0		a8		tay				tay
.99d1		38		sec				sec 								; do a signed comparison of the exponents.
.99d2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99d4		50 02		bvc $99d8			bvc 	_FANoSignedChange
.99d6		49 80		eor #$80			eor 	#$80
.99d8						_FANoSignedChange:
.99d8		29 80		and #$80			and 	#$80
.99da		10 02		bpl $99de			bpl 	_FAHaveMax
.99dc		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.99de						_FAHaveMax:
.99de		20 2b 9a	jsr $9a2b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.99e1		e8		inx				inx
.99e2		20 2b 9a	jsr $9a2b			jsr 	_FAShiftToExponent
.99e5		ca		dex				dex
.99e6						_FAExponentsEqual:
.99e6		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.99e8		55 51		eor $51,x			eor 	NSStatus+1,x
.99ea		30 0e		bmi $99fa			bmi 	_FADifferentSigns
.99ec		20 63 97	jsr $9763			jsr 	AddTopTwoStack 				; do the add of the mantissae
.99ef		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.99f1		10 35		bpl $9a28			bpl 	_FAExit 					; if no, we are done.
.99f3		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.99f6		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.99f8		80 2e		bra $9a28			bra 	_FAExit
.99fa						_FADifferentSigns:
.99fa		20 7d 97	jsr $977d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.99fd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.99ff		10 06		bpl $9a07			bpl 	_FACheckZero 				; if no, check for -0
.9a01		20 76 a3	jsr $a376			jsr 	NSMNegate 					; netate result
.9a04		20 7d a3	jsr $a37d			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9a07						_FACheckZero:
.9a07		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero	 				; check for -0
.9a0a		d0 1c		bne $9a28			bne 	_FAExit
.9a0c		74 50		stz $50,x			stz 	NSStatus,x
.9a0e		80 18		bra $9a28			bra 	_FAExit
.9a10						_FAReturn1:
.9a10		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9a12		95 58		sta $58,x			sta 	NSMantissa0,x
.9a14		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a16		95 60		sta $60,x			sta 	NSMantissa1,x
.9a18		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9a1a		95 68		sta $68,x			sta 	NSMantissa2,x
.9a1c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9a1e		95 70		sta $70,x			sta 	NSMantissa3,x
.9a20		b5 79		lda $79,x			lda 	NSExponent+1,x
.9a22		95 78		sta $78,x			sta 	NSExponent,x
.9a24		b5 51		lda $51,x			lda 	NSStatus+1,x
.9a26		95 50		sta $50,x			sta 	NSStatus,x
.9a28						_FAExit:
.9a28		7a		ply				ply
.9a29		68		pla				pla
.9a2a		60		rts				rts
.9a2b						_FAShiftToExponent:
.9a2b						_FAShiftToExponent2:
.9a2b		98		tya				tya 								; compare Y to exponent
.9a2c		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9a2e		f0 07		beq $9a37			beq 	_FASEExit 					; exit if so.
.9a30		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight	 			; shift the mantissa right
.9a33		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9a35		80 f4		bra $9a2b			bra 	_FAShiftToExponent2
.9a37						_FASEExit:
.9a37		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9a38						CompareFloat:
.9a38		20 b2 99	jsr $99b2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9a3b		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9a3d		29 f8		and #$f8			and 	#$F8
.9a3f		15 68		ora $68,x			ora 	NSMantissa2,x
.9a41		15 70		ora $70,x			ora 	NSMantissa3,x
.9a43		f0 08		beq $9a4d			beq 	_FCExit 					; zero, so approximately identical
.9a45		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9a47		34 50		bit $50,x			bit 	NSStatus,x
.9a49		10 02		bpl $9a4d			bpl 	_FCExit
.9a4b						_FCNegative:
.9a4b		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9a4d						_FCExit:
.9a4d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9a4e						FDivideCommand:
.9a4e		fa		plx				plx	 								; restore stack position
.9a4f		20 20 9b	jsr $9b20			jsr 	FloatPrepare 				; prepare for floats
.9a52						FloatDivide:
.9a52		48		pha				pha
.9a53		e8		inx				inx
.9a54		20 2f 9b	jsr $9b2f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a57		ca		dex				dex
.9a58		c9 00		cmp #$00			cmp 	#0
.9a5a		f0 1d		beq $9a79			beq 	_FDZero
.9a5c		20 2f 9b	jsr $9b2f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a5f		f0 16		beq $9a77			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9a61		20 54 96	jsr $9654			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9a64		20 f0 95	jsr $95f0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9a67		20 2f 9b	jsr $9b2f			jsr		NSNormalise 				; renormalise
.9a6a		20 e4 96	jsr $96e4			jsr 	CalculateSign 				; calculate result sign
.9a6d		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9a6f		38		sec				sec
.9a70		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9a72		38		sec				sec
.9a73		e9 1e		sbc #$1e			sbc 	#30
.9a75		95 78		sta $78,x			sta 	NSExponent,x
.9a77						_FDExit:
.9a77		68		pla				pla
.9a78		60		rts				rts
.9a79						_FDZero:
.9a79		a9 03		lda #$03		lda	#3
.9a7b		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9a7e						FloatFractionalPart:
.9a7e		5a		phy				phy
.9a7f		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9a81		29 7f		and #$7f			and 	#$7F
.9a83		95 50		sta $50,x			sta 	NSStatus,x
.9a85		20 2f 9b	jsr $9b2f			jsr 	NSNormalise
.9a88		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9a8a		38		sec				sec
.9a8b		e9 e0		sbc #$e0			sbc 	#$E0
.9a8d		90 29		bcc $9ab8			bcc 	_FFPExit 					; already fractional
.9a8f		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9a91		b0 22		bcs $9ab5			bcs 	_FFPZero
.9a93		a8		tay				tay 								; put count to do in Y
.9a94		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9a96		20 ba 9a	jsr $9aba			jsr 	_FFPPartial
.9a99		95 70		sta $70,x			sta 	NSMantissa3,x
.9a9b		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a9d		20 ba 9a	jsr $9aba			jsr 	_FFPPartial
.9aa0		95 68		sta $68,x			sta 	NSMantissa2,x
.9aa2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aa4		20 ba 9a	jsr $9aba			jsr 	_FFPPartial
.9aa7		95 60		sta $60,x			sta 	NSMantissa1,x
.9aa9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9aab		20 ba 9a	jsr $9aba			jsr 	_FFPPartial
.9aae		95 58		sta $58,x			sta 	NSMantissa0,x
.9ab0		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; zeroed check.
.9ab3		d0 03		bne $9ab8			bne 	_FFPExit
.9ab5						_FFPZero:
.9ab5		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.9ab8						_FFPExit:
.9ab8		7a		ply				ply
.9ab9		60		rts				rts
.9aba						_FFPPartial:
.9aba		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9abc		f0 17		beq $9ad5			beq 	_FFFPPExit
.9abe		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9ac0		b0 0c		bcs $9ace			bcs 	_FFFPPWholeByte
.9ac2		5a		phy				phy
.9ac3						_FFFPPLeft:
.9ac3		0a		asl a				asl 	a
.9ac4		88		dey				dey
.9ac5		d0 fc		bne $9ac3			bne 	_FFFPPLeft
.9ac7		7a		ply				ply
.9ac8						_FFFPPRight:
.9ac8		4a		lsr a				lsr 	a
.9ac9		88		dey				dey
.9aca		d0 fc		bne $9ac8			bne 	_FFFPPRight
.9acc		80 07		bra $9ad5			bra 	_FFFPPExit
.9ace						_FFFPPWholeByte:
.9ace		98		tya				tya 								; subtract 8 from count
.9acf		38		sec				sec
.9ad0		e9 08		sbc #$08			sbc 	#8
.9ad2		a8		tay				tay
.9ad3		a9 00		lda #$00			lda 	#0 							; and clear all
.9ad5						_FFFPPExit:
.9ad5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9ad6						FloatIntegerPart:
.9ad6		48		pha				pha
.9ad7		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9ad9		f0 1d		beq $9af8			beq 	_FIPExit 					; if so do nothing
.9adb		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; is it zero ?
.9ade		f0 15		beq $9af5			beq 	_FIPZero 					; if so return zero.
.9ae0		20 2f 9b	jsr $9b2f			jsr 	NSNormalise 				; normalise
.9ae3		f0 10		beq $9af5			beq 	_FIPZero 					; normalised to zero, exit zero
.9ae5						_FIPShift:
.9ae5		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9ae7		10 07		bpl $9af0			bpl 	_FIPCheckZero
.9ae9		20 cd a3	jsr $a3cd			jsr 	NSMShiftRight 				; shift mantissa right
.9aec		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9aee		80 f5		bra $9ae5			bra 	_FIPShift
.9af0						_FIPCheckZero:
.9af0		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; avoid -0 problem
.9af3		d0 03		bne $9af8			bne 	_FIPExit 					; set to zero if mantissa zero.
.9af5						_FIPZero:
.9af5		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.9af8						_FIPExit:
.9af8		68		pla				pla
.9af9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9afa						FloatingPointMultiply:
.9afa		20 20 9b	jsr $9b20			jsr 	FloatPrepare 				; prepare for floats
.9afd						FloatMultiply:
.9afd		48		pha				pha
.9afe		20 2f 9b	jsr $9b2f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9b01		f0 18		beq $9b1b			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9b03		e8		inx				inx
.9b04		20 2f 9b	jsr $9b2f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9b07		ca		dex				dex
.9b08		c9 00		cmp #$00			cmp 	#0
.9b0a		f0 0c		beq $9b18			beq 	_FDSetZero
.9b0c		20 a6 96	jsr $96a6			jsr 	MultiplyShort 				; calculate the result.
.9b0f		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9b11		18		clc				clc
.9b12		75 79		adc $79,x			adc 	NSExponent+1,x
.9b14		95 78		sta $78,x			sta 	NSExponent,x
.9b16		80 03		bra $9b1b			bra 	_FDExit
.9b18						_FDSetZero:
.9b18		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; return 0
.9b1b						_FDExit:
.9b1b		20 2f 9b	jsr $9b2f			jsr 	NSNormalise 				; normalise the result
.9b1e		68		pla				pla
.9b1f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9b20						FloatPrepare:
.9b20		20 2b 9c	jsr $9c2b			jsr 	DereferenceTopTwo 			; dereference the top two values
.9b23		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9b25		15 51		ora $51,x			ora 	NSStatus+1,x
.9b27		29 10		and #$10			and 	#NSBIsString
.9b29		d0 01		bne $9b2c			bne 	_FDType
.9b2b		60		rts				rts
.9b2c						_FDType:
.9b2c		4c 3c a5	jmp $a53c			jmp 	TypeError
.9b2f						NSNormalise:
.9b2f		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9b31		29 80		and #$80			and 	#$80
.9b33		09 08		ora #$08			ora 	#NSTFloat
.9b35		95 50		sta $50,x			sta 	NSStatus,x
.9b37		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; if zero exit
.9b3a		d0 07		bne $9b43			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9b3c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9b3e		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9b40		a9 00		lda #$00			lda 	#0 							; set Z flag
.9b42		60		rts				rts
.9b43						_NSNormaliseOptimise:
.9b43		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9b45		d0 19		bne $9b60			bne 	_NSNormaliseLoop
.9b47		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9b49		30 15		bmi $9b60			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9b4b		95 70		sta $70,x			sta 	NSMantissa3,x
.9b4d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4f		95 68		sta $68,x			sta 	NSMantissa2,x
.9b51		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b53		95 60		sta $60,x			sta 	NSMantissa1,x
.9b55		74 58		stz $58,x			stz 	NSMantissa0,x
.9b57		b5 78		lda $78,x			lda 	NSExponent,x
.9b59		38		sec				sec
.9b5a		e9 08		sbc #$08			sbc 	#8
.9b5c		95 78		sta $78,x			sta 	NSExponent,x
.9b5e		80 e3		bra $9b43			bra 	_NSNormaliseOptimise
.9b60						_NSNormaliseLoop:
.9b60		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9b62		70 07		bvs $9b6b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9b64		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; shift mantissa left
.9b67		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9b69		80 f5		bra $9b60			bra 	_NSNormaliseLoop
.9b6b						_NSNExit:
.9b6b		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9b6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9b6e						AssignNumber:
.9b6e		5a		phy				phy
.9b6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9b71		85 36		sta $36				sta 	zTemp0
.9b73		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b75		85 37		sta $37				sta 	zTemp0+1
.9b77		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9b79		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9b7b		95 50		sta $50,x			sta 	NSStatus,x
.9b7d		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9b7f		c9 08		cmp #$08			cmp 	#NSTFloat
.9b81		f0 24		beq $9ba7			beq 	_ANFloat
.9b83		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9b85		f0 03		beq $9b8a			beq		_ANNotFloat
.9b87		4c 37 a5	jmp $a537			jmp 	RangeError					; if it is, report an error.
.9b8a						_ANNotFloat:
.9b8a		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9b8c		29 03		and #$03			and 	#3
.9b8e		d0 05		bne $9b95			bne 	_ANByteWord
.9b90		20 b2 9b	jsr $9bb2			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9b93		80 1b		bra $9bb0			bra 	_ANExit
.9b95						_ANByteWord:
.9b95		48		pha				pha 								; save count
.9b96		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9b98		92 36		sta ($36)			sta 	(zTemp0)
.9b9a		68		pla				pla
.9b9b		c9 01		cmp #$01			cmp	 	#1
.9b9d		f0 11		beq $9bb0			beq 	_ANExit
.9b9f		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ba1		a0 01		ldy #$01			ldy 	#1
.9ba3		91 36		sta ($36),y			sta 	(zTemp0),y
.9ba5		80 09		bra $9bb0			bra 	_ANExit
.9ba7						_ANFloat:
.9ba7		20 b2 9b	jsr $9bb2			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9baa		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9bac		a0 04		ldy #$04			ldy 	#4
.9bae		91 36		sta ($36),y			sta 	(zTemp0),y
.9bb0						_ANExit:
.9bb0		7a		ply				ply
.9bb1		60		rts				rts
.9bb2						_ANCopy4PackSign:
.9bb2		a0 03		ldy #$03			ldy 	#3
.9bb4		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9bb6		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9bb8		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9bba		91 36		sta ($36),y			sta 	(zTemp0),y
.9bbc		88		dey				dey
.9bbd		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bbf		91 36		sta ($36),y			sta 	(zTemp0),y
.9bc1		88		dey				dey
.9bc2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bc4		91 36		sta ($36),y			sta 	(zTemp0),y
.9bc6		88		dey				dey
.9bc7		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bc9		91 36		sta ($36),y			sta 	(zTemp0),y
.9bcb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9bcc						AssignString:
.9bcc		5a		phy				phy
.9bcd		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bcf		85 38		sta $38				sta 	zTemp1
.9bd1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bd3		85 39		sta $39				sta 	zTemp1+1
.9bd5		b5 58		lda $58,x			lda 	NSMantissa0,x
.9bd7		85 36		sta $36				sta 	zTemp0
.9bd9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bdb		85 37		sta $37				sta 	zTemp0+1
.9bdd		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9bdf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9be1		f0 23		beq $9c06			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9be3		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9be4		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9be6		e9 02		sbc #$02			sbc 	#2
.9be8		85 3c		sta $3c				sta 	zsTemp
.9bea		a0 01		ldy #$01			ldy 	#1
.9bec		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bee		e9 00		sbc #$00			sbc 	#0
.9bf0		85 3d		sta $3d				sta 	zsTemp+1
.9bf2		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9bf4						_ASGetLength:
.9bf4		c8		iny				iny
.9bf5		b1 38		lda ($38),y			lda 	(zTemp1),y
.9bf7		d0 fb		bne $9bf4			bne 	_ASGetLength
.9bf9		98		tya				tya 								; is this length <= current length
.9bfa		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9bfc		90 1e		bcc $9c1c			bcc 	_ASCopyString
.9bfe		f0 1c		beq $9c1c			beq 	_ASCopyString
.9c00		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9c02		a0 01		ldy #$01			ldy 	#1
.9c04		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9c06						_ASNewStringRequired:
.9c06		e8		inx				inx 								; concrete the new string.
.9c07		20 06 b5	jsr $b506			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9c0a		ca		dex				dex
.9c0b		18		clc				clc
.9c0c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9c0e		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9c10		92 36		sta ($36)			sta 	(zTemp0)
.9c12		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c14		69 00		adc #$00			adc 	#0
.9c16		a0 01		ldy #$01			ldy 	#1
.9c18		91 36		sta ($36),y			sta 	(zTemp0),y
.9c1a		80 0d		bra $9c29			bra 	_ASExit
.9c1c						_ASCopyString:
.9c1c		a0 00		ldy #$00			ldy 	#0
.9c1e						_ASCopyLoop:
.9c1e		b1 38		lda ($38),y			lda 	(zTemp1),y
.9c20		c8		iny				iny
.9c21		c8		iny				iny
.9c22		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9c24		88		dey				dey
.9c25		c9 00		cmp #$00			cmp 	#0
.9c27		d0 f5		bne $9c1e			bne 	_ASCopyLoop
.9c29						_ASExit:
.9c29		7a		ply				ply
.9c2a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9c2b						DereferenceTopTwo:
.9c2b		e8		inx				inx
.9c2c		20 30 9c	jsr $9c30			jsr 	Dereference 				; deref x+1
.9c2f		ca		dex				dex  								; falls through to deref x
.9c30						Dereference:
.9c30		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9c32		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9c34		f0 48		beq $9c7e			beq 	_DRFExit 					; not a reference, so exit.
.9c36		5a		phy				phy
.9c37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9c39		85 36		sta $36				sta 	zTemp0
.9c3b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c3d		85 37		sta $37				sta 	zTemp0+1
.9c3f		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9c41		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9c43		95 58		sta $58,x			sta 	NSMantissa0,x
.9c45		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9c47		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9c49		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9c4b		f0 0e		beq $9c5b			beq 	_DRFDereferenceTwo
.9c4d		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9c4f		f0 2f		beq $9c80			beq 	_DRFFull
.9c51		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9c53		29 03		and #$03			and 	#3
.9c55		f0 29		beq $9c80			beq 	_DRFFull 					; the whole word
.9c57		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9c59		f0 06		beq $9c61			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9c5b						_DRFDereferenceTwo:
.9c5b		a0 01		ldy #$01			ldy 	#1
.9c5d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c5f		95 60		sta $60,x			sta 	NSMantissa1,x
.9c61						_DRFClear23:
.9c61		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9c63		74 70		stz $70,x			stz 	NSMantissa3,x
.9c65		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9c67		29 18		and #$18			and 	#NSBTypeMask
.9c69		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9c6b		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9c6d		d0 0e		bne $9c7d			bne 	_DRFNotString
.9c6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9c71		15 60		ora $60,x			ora 	NSMantissa1,x
.9c73		d0 08		bne $9c7d			bne 	_DRFNotString
.9c75		a9 7f		lda #$7f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9c77		95 58		sta $58,x			sta 	NSMantissa0,x
.9c79		a9 9c		lda #$9c			lda 	#_DRFNullString >> 8
.9c7b		95 60		sta $60,x			sta 	NSMantissa1,x
.9c7d						_DRFNotString
.9c7d		7a		ply				ply 								; restore Y and exit
.9c7e						_DRFExit:
.9c7e		60		rts				rts
.9c7f						_DRFNullString:
>9c7f		00						.byte 	0
.9c80						_DRFFull:
.9c80		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9c82		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c84		95 60		sta $60,x			sta 	NSMantissa1,x
.9c86		c8		iny				iny
.9c87		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c89		95 68		sta $68,x			sta 	NSMantissa2,x
.9c8b		c8		iny				iny
.9c8c		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c8e		95 70		sta $70,x			sta 	NSMantissa3,x
.9c90		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9c92		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9c94		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9c96		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9c98		f0 05		beq $9c9f			beq 	_DRFNoExponent
.9c9a		c8		iny				iny 								; if not, read the exponent as well.
.9c9b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c9d		95 78		sta $78,x			sta 	NSExponent,x
.9c9f						_DRFNoExponent:
.9c9f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ca1		10 0a		bpl $9cad			bpl 	_DRFExit2 					; if not, then exit.
.9ca3		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ca5		95 70		sta $70,x			sta 	NSMantissa3,x
.9ca7		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9ca9		09 80		ora #$80			ora 	#NSBIsNegative
.9cab		95 50		sta $50,x			sta 	NSStatus,x
.9cad						_DRFExit2:
.9cad		7a		ply				ply
.9cae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9caf						EncodeNumberStart:
.9caf		38		sec				sec
.9cb0		80 01		bra $9cb3			bra 	EncodeNumberContinue+1
.9cb2						EncodeNumberContinue:
.9cb2		18		clc				clc
.9cb3						EncodeNumber:
.9cb3		08		php				php 								; save reset flag.
.9cb4		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9cb6		f0 12		beq $9cca			beq 	_ENIsOkay
.9cb8		c9 30		cmp #$30			cmp 	#"0"
.9cba		90 04		bcc $9cc0			bcc 	_ENBadNumber
.9cbc		c9 3a		cmp #$3a			cmp 	#"9"+1
.9cbe		90 0a		bcc $9cca			bcc 	_ENIsOkay
.9cc0						_ENBadNumber:
.9cc0		28		plp				plp 								; throw saved reset
.9cc1		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9cc4		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9cc6		f0 7b		beq $9d43			beq 	_ENConstructFinal
.9cc8						_ENFail:
.9cc8		18		clc				clc 								; not allowed
.9cc9		60		rts				rts
.9cca						_ENIsOkay:
.9cca		28		plp				plp 								; are we restarting
.9ccb		90 15		bcc $9ce2			bcc 	_ENNoRestart
.9ccd						_ENStartEncode:
.9ccd		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9ccf		f0 0c		beq $9cdd			beq 	_ENFirstDP
.9cd1		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9cd3		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte 					; in single byte mode.
.9cd6		a9 01		lda #$01			lda 	#ESTA_Low
.9cd8						_ENExitChange:
.9cd8		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9cdb		38		sec				sec
.9cdc		60		rts				rts
.9cdd						_ENFirstDP:
.9cdd		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; clear integer part
.9ce0		80 3c		bra $9d1e			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ce2						_ENNoRestart:
.9ce2		48		pha				pha 								; save digit or DP on stack.
.9ce3		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9ce6		c9 01		cmp #$01			cmp 	#ESTA_Low
.9ce8		f0 09		beq $9cf3			beq  	_ESTALowState
.9cea		c9 02		cmp #$02			cmp 	#ESTA_High
.9cec		f0 26		beq $9d14			beq 	_ESTAHighState
.9cee		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9cf0		f0 38		beq $9d2a			beq 	_ESTADecimalState
>9cf2		db						.byte 	$DB 						; causes a break in the emulator
.9cf3						_ESTALowState:
.9cf3		68		pla				pla 								; get value back
.9cf4		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9cf6		f0 26		beq $9d1e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9cf8		29 0f		and #$0f			and 	#15 						; make digit
.9cfa		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9cfd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9cff		0a		asl a				asl 	a
.9d00		0a		asl a				asl 	a
.9d01		75 58		adc $58,x			adc 	NSMantissa0,x
.9d03		0a		asl a				asl 	a
.9d04		6d 06 04	adc $0406			adc 	digitTemp
.9d07		95 58		sta $58,x			sta 	NSMantissa0,x
.9d09		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9d0b		90 05		bcc $9d12			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9d0d		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9d0f		8d 05 04	sta $0405			sta 	encodeState
.9d12						_ESTANoSwitch:
.9d12		38		sec				sec
.9d13		60		rts				rts
.9d14						_ESTAHighState:
.9d14		68		pla				pla 								; get value back
.9d15		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9d17		f0 05		beq $9d1e			beq 	_ESTASwitchFloat
.9d19		20 77 9d	jsr $9d77			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9d1c		38		sec				sec
.9d1d		60		rts				rts
.9d1e						_ESTASwitchFloat:
.9d1e		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9d21		e8		inx				inx 								; zero the decimal additive.
.9d22		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.9d25		ca		dex				dex
.9d26		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9d28		80 ae		bra $9cd8			bra 	_ENExitChange
.9d2a						_ESTADecimalState:
.9d2a		68		pla				pla 								; digit.
.9d2b		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9d2d		f0 99		beq $9cc8			beq 	_ENFail
.9d2f		e8		inx				inx 								; put digit into fractional part of X+1
.9d30		20 77 9d	jsr $9d77			jsr 	ESTAShiftDigitIntoMantissa
.9d33		ca		dex				dex
.9d34		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9d37		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9d3a		c9 0b		cmp #$0b			cmp 	#11
.9d3c		f0 02		beq $9d40			beq 	_ESTADSFail
.9d3e		38		sec				sec
.9d3f		60		rts				rts
.9d40						_ESTADSFail:
.9d40		4c 37 a5	jmp $a537			jmp 	RangeError
.9d43						_ENConstructFinal:
.9d43		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9d46		f0 2d		beq $9d75			beq 	_ENCFExit 					; no decimals
.9d48		5a		phy				phy
.9d49		0a		asl a				asl 	a 							; x 4 and CLC
.9d4a		0a		asl a				asl 	a
.9d4b		6d 07 04	adc $0407			adc 	decimalCount
.9d4e		a8		tay				tay
.9d4f		b9 f6 a4	lda $a4f6,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9d52		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9d54		b9 f7 a4	lda $a4f7,y			lda 	DecimalScalarTable-5+1,y
.9d57		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9d59		b9 f8 a4	lda $a4f8,y			lda 	DecimalScalarTable-5+2,y
.9d5c		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9d5e		b9 f9 a4	lda $a4f9,y			lda 	DecimalScalarTable-5+3,y
.9d61		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9d63		b9 fa a4	lda $a4fa,y			lda 	DecimalScalarTable-5+4,y
.9d66		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9d68		a9 08		lda #$08			lda 	#NSTFloat
.9d6a		95 52		sta $52,x			sta 	NSStatus+2,x
.9d6c		7a		ply				ply
.9d6d		e8		inx				inx 								; multiply decimal const by decimal scalar
.9d6e		20 fd 9a	jsr $9afd			jsr 	FloatMultiply
.9d71		ca		dex				dex
.9d72		20 b8 99	jsr $99b8			jsr 	FloatAdd 					; add to integer part.
.9d75						_ENCFExit:
.9d75		18		clc				clc 								; reject the digit.
.9d76		60		rts				rts
.9d77						ESTAShiftDigitIntoMantissa:
.9d77		29 0f		and #$0f			and 	#15 						; save digit
.9d79		48		pha				pha
.9d7a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9d7c		48		pha				pha
.9d7d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d7f		48		pha				pha
.9d80		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d82		48		pha				pha
.9d83		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d85		48		pha				pha
.9d86		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 2
.9d89		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 4
.9d8c		18		clc				clc 								; pop mantissa and add
.9d8d		68		pla				pla
.9d8e		75 58		adc $58,x			adc 	NSMantissa0,x
.9d90		95 58		sta $58,x			sta 	NSMantissa0,x
.9d92		68		pla				pla
.9d93		75 60		adc $60,x			adc 	NSMantissa1,x
.9d95		95 60		sta $60,x			sta 	NSMantissa1,x
.9d97		68		pla				pla
.9d98		75 68		adc $68,x			adc 	NSMantissa2,x
.9d9a		95 68		sta $68,x			sta 	NSMantissa2,x
.9d9c		68		pla				pla
.9d9d		75 70		adc $70,x			adc 	NSMantissa3,x
.9d9f		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9da1		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 10
.9da4		68		pla				pla 								; add digit
.9da5		18		clc				clc
.9da6		75 58		adc $58,x			adc 	NSMantissa0,x
.9da8		95 58		sta $58,x			sta 	NSMantissa0,x
.9daa		90 0a		bcc $9db6			bcc 	_ESTASDExit
.9dac		f6 60		inc $60,x			inc 	NSMantissa1,x
.9dae		d0 06		bne $9db6			bne 	_ESTASDExit
.9db0		f6 68		inc $68,x			inc 	NSMantissa2,x
.9db2		d0 02		bne $9db6			bne 	_ESTASDExit
.9db4		f6 70		inc $70,x			inc 	NSMantissa3,x
.9db6						_ESTASDExit:
.9db6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9db7						EvaluateTerm:
.9db7		b1 30		lda ($30),y			lda 	(codePtr),y
.9db9		30 18		bmi $9dd3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9dbb		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9dbd		b0 6c		bcs $9e2b			bcs 	_ETVariable
.9dbf		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9dc1		90 6b		bcc $9e2e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9dc3		c9 3a		cmp #$3a			cmp 	#'9'+1
.9dc5		b0 67		bcs $9e2e			bcs 	_ETPuncUnary
.9dc7		20 af 9c	jsr $9caf			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9dca						_ETNumber:
.9dca		c8		iny				iny 								; keep encoding until we have the numbers
.9dcb		b1 30		lda ($30),y			lda 	(codePtr),y
.9dcd		20 b2 9c	jsr $9cb2			jsr 	EncodeNumberContinue
.9dd0		b0 f8		bcs $9dca			bcs 	_ETNumber 					; go back if accepted.
.9dd2		60		rts				rts
.9dd3						_ETCheckUnary:
.9dd3		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9dd5		f0 3f		beq $9e16			beq 	_ETString
.9dd7		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9dd9		f0 12		beq $9ded			beq 	_ETHexConstant
.9ddb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ddd		90 0b		bcc $9dea			bcc 	_ETSyntaxError
.9ddf		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1
.9de1		b0 07		bcs $9dea			bcs 	_ETSyntaxError
.9de3		da		phx				phx 								; push X on the stack
.9de4		0a		asl a				asl 	a 							; put vector x 2 into X
.9de5		aa		tax				tax
.9de6		c8		iny				iny 								; consume unary function token
.9de7		7c f6 90	jmp ($90f6,x)			jmp 	(VectorSet0,x) 				; and do it.
.9dea						_ETSyntaxError:
.9dea		4c 32 a5	jmp $a532			jmp 	SyntaxError
.9ded						_ETHexConstant:
.9ded		c8		iny				iny 								; skip #
.9dee		c8		iny				iny 								; skip count
.9def		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; clear result
.9df2						_ETHLoop:
.9df2		b1 30		lda ($30),y			lda 	(codePtr),y
.9df4		c8		iny				iny 								; and consume
.9df5		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9df7		f0 1c		beq $9e15			beq 	_ETHExit
.9df9		48		pha				pha 								; save on stack.
.9dfa		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 2
.9dfd		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 4
.9e00		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 8
.9e03		20 c3 a3	jsr $a3c3			jsr 	NSMShiftLeft 				; x 16
.9e06		68		pla				pla 								; ASCII
.9e07		c9 41		cmp #$41			cmp 	#'A'
.9e09		90 02		bcc $9e0d			bcc 	_ETHNotChar
.9e0b		e9 07		sbc #$07			sbc 	#7
.9e0d						_ETHNotChar:
.9e0d		29 0f		and #$0f			and 	#15 						; digit now
.9e0f		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9e11		95 58		sta $58,x			sta 	NSMantissa0,x
.9e13		80 dd		bra $9df2			bra 	_ETHLoop 					; go round.
.9e15						_ETHExit:
.9e15		60		rts				rts
.9e16						_ETString:
.9e16		c8		iny				iny 								; look at length
.9e17		b1 30		lda ($30),y			lda 	(codePtr),y
.9e19		48		pha				pha
.9e1a		c8		iny				iny 								; first character
.9e1b		20 2e ab	jsr $ab2e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9e1e		68		pla				pla 								; restore count and save
.9e1f		85 36		sta $36				sta 	zTemp0
.9e21		98		tya				tya 								; add length to Y to skip it.
.9e22		18		clc				clc
.9e23		65 36		adc $36				adc 	zTemp0
.9e25		a8		tay				tay
.9e26		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9e28		95 50		sta $50,x			sta 	NSStatus,x
.9e2a		60		rts				rts
.9e2b						_ETVariable:
.9e2b		4c 80 9e	jmp $9e80			jmp 	VariableHandler
.9e2e						_ETPuncUnary:
.9e2e		c8		iny				iny 								; consume the unary character
.9e2f		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9e31		f0 2b		beq $9e5e			beq 	_ETUnaryNegate
.9e33		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9e35		f0 36		beq $9e6d			beq 	_ETDereference
.9e37		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9e39		f0 3e		beq $9e79			beq 	_ETParenthesis
.9e3b		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9e3d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9e3f		f0 06		beq $9e47			beq 	_ETIndirection
.9e41		e6 36		inc $36				inc 	zTemp0
.9e43		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9e45		d0 a3		bne $9dea			bne 	_ETSyntaxError
.9e47						_ETIndirection:
.9e47		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9e49		1a		inc a				inc 	a
.9e4a		48		pha				pha
.9e4b		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm				; evaluate the term
.9e4e		20 30 9c	jsr $9c30			jsr 	Dereference 				; dereference it.
.9e51		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9e53		d0 06		bne $9e5b			bne 	_ETTypeMismatch
.9e55		68		pla				pla 								; indirection 1-2
.9e56		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9e58		95 50		sta $50,x			sta 	NSStatus,x
.9e5a		60		rts				rts
.9e5b						_ETTypeMismatch:
.9e5b		4c 3c a5	jmp $a53c			jmp 	TypeError
.9e5e						_ETUnaryNegate:
.9e5e		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm				; evaluate the term
.9e61		20 30 9c	jsr $9c30			jsr 	Dereference 				; dereference it.
.9e64		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9e66		29 10		and #$10			and 	#NSTString
.9e68		d0 f1		bne $9e5b			bne 	_ETTypeMismatch
.9e6a		4c 76 a3	jmp $a376			jmp 	NSMNegate  					; just toggles the sign bit.
.9e6d						_ETDereference:
.9e6d		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm				; evaluate the term
.9e70		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9e72		29 20		and #$20			and 	#NSBIsReference
.9e74		f0 e5		beq $9e5b			beq 	_ETTypeMismatch
.9e76		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9e78		60		rts				rts
.9e79						_ETParenthesis:
.9e79		20 6d 99	jsr $996d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9e7c		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; check for )
.9e7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9e80						VariableHandler:
.9e80		b1 30		lda ($30),y			lda 	(codePtr),y
.9e82		18		clc				clc
.9e83		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e85		85 37		sta $37				sta 	zTemp0+1
.9e87		c8		iny				iny
.9e88		b1 30		lda ($30),y			lda 	(codePtr),y
.9e8a		85 36		sta $36				sta 	zTemp0
.9e8c		c8		iny				iny
.9e8d		18		clc				clc									; copy variable address+3 to mantissa
.9e8e		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9e90		95 58		sta $58,x			sta 	NSMantissa0,x
.9e92		a5 37		lda $37				lda 	zTemp0+1
.9e94		69 00		adc #$00			adc 	#0
.9e96		95 60		sta $60,x			sta 	NSMantissa1,x
.9e98		74 68		stz $68,x			stz 	NSMantissa2,x
.9e9a		74 70		stz $70,x			stz 	NSMantissa3,x
.9e9c		74 78		stz $78,x			stz 	NSExponent,x
.9e9e		5a		phy				phy
.9e9f		a0 02		ldy #$02			ldy 	#2 							; read type
.9ea1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea3		7a		ply				ply
.9ea4		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9ea6		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9ea8		95 50		sta $50,x			sta 	NSStatus,x
.9eaa		29 04		and #$04			and 	#NSBIsArray
.9eac		d0 01		bne $9eaf			bne 	_VHArray
.9eae		60		rts				rts
.9eaf						_VHArray:
.9eaf		e8		inx				inx
.9eb0		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9eb3		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9eb5		95 51		sta $51,x			sta 	NSStatus+1,x
.9eb7		b1 30		lda ($30),y			lda 	(codePtr),y
.9eb9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ebb		d0 06		bne $9ec3			bne 	_VHNoSecondIndex
.9ebd		c8		iny				iny 								; skip the comma
.9ebe		e8		inx				inx
.9ebf		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ec2		ca		dex				dex
.9ec3						_VHNoSecondIndex:
.9ec3		ca		dex				dex 								; set X back.
.9ec4		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; and check the right bracket.
.9ec7		5a		phy				phy 								; save position
.9ec8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9eca		85 3e		sta $3e				sta 	zaTemp
.9ecc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ece		85 3f		sta $3f				sta 	zaTemp+1
.9ed0		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9ed2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ed4		f0 5d		beq $9f33			beq 	_VHBadArray
.9ed6		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9ed8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9eda		f0 02		beq $9ede			beq 	_VHHas2Mask
.9edc		a9 ff		lda #$ff			lda 	#$FF
.9ede						_VHHas2Mask:
.9ede		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9ee0		f0 4c		beq $9f2e			beq 	_VHBadIndex
.9ee2		0a		asl a				asl 	a 							; carry will be set if a second index
.9ee3		90 08		bcc $9eed			bcc 	_VHCheckFirstIndex
.9ee5		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ee7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ee9		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9eeb		90 41		bcc $9f2e			bcc 	_VHBadIndex
.9eed						_VHCheckFirstIndex:
.9eed		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9eef		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ef1		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9ef3		90 39		bcc $9f2e			bcc 	_VHBadIndex
.9ef5		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9ef7		64 37		stz $37				stz 	zTemp0+1
.9ef9		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9efb		30 0e		bmi $9f0b			bmi 	_VHNoMultiply
.9efd		da		phx				phx
.9efe		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9f00		48		pha				pha
.9f01		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9f03		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f05		1a		inc a				inc 	a 							; add 1 for zero base
.9f06		fa		plx				plx
.9f07		20 5f a3	jsr $a35f			jsr 	Multiply8x8 				; calculate -> Z0
.9f0a		fa		plx				plx
.9f0b						_VHNoMultiply:
.9f0b		18		clc				clc
.9f0c		a5 36		lda $36				lda 	zTemp0
.9f0e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f10		85 36		sta $36				sta 	zTemp0
.9f12		a5 37		lda $37				lda 	zTemp0+1
.9f14		69 00		adc #$00			adc 	#0
.9f16		85 37		sta $37				sta 	zTemp0+1
.9f18		b5 50		lda $50,x			lda 	NSStatus,x
.9f1a		20 60 88	jsr $8860			jsr 	ScaleByBaseType
.9f1d		18		clc				clc
.9f1e		b2 3e		lda ($3e)			lda 	(zaTemp)
.9f20		65 36		adc $36				adc 	zTemp0
.9f22		95 58		sta $58,x			sta 	NSMantissa0,x
.9f24		a0 01		ldy #$01			ldy 	#1
.9f26		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f28		65 37		adc $37				adc 	zTemp0+1
.9f2a		95 60		sta $60,x			sta 	NSMantissa1,x
.9f2c		7a		ply				ply 								; restore position
.9f2d		60		rts				rts
.9f2e						_VHBadIndex:
.9f2e		a9 17		lda #$17		lda	#23
.9f30		4c 69 94	jmp $9469		jmp	ErrorHandler
.9f33						_VHBadArray:
.9f33		a9 18		lda #$18		lda	#24
.9f35		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9f38						AbsUnary:
.9f38		fa		plx				plx 								; restore stack pos
.9f39		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; get a float or int
.9f3c		20 50 94	jsr $9450			jsr 	CheckRightBracket
.9f3f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9f41		29 7f		and #$7f			and 	#$7F
.9f43		95 50		sta $50,x			sta 	NSStatus,x
.9f45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9f46						AllocUnary:
.9f46		fa		plx				plx 								; restore stack pos
.9f47		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger		; get bytes required.
.9f4a		20 50 94	jsr $9450			jsr 	CheckRightBracket
.9f4d		da		phx				phx 								; save X/Y
.9f4e		5a		phy				phy
.9f4f		8a		txa				txa 								; copy X into Y
.9f50		a8		tay				tay
.9f51		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9f54		aa		tax				tax
.9f55		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9f58		20 65 9f	jsr $9f65			jsr 	AllocateXABytes 			; allocate memory
.9f5b		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9f5e		8a		txa				txa 	 							; typing is 16 bit integer.
.9f5f		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9f62		7a		ply				ply
.9f63		fa		plx				plx
.9f64		60		rts				rts
.9f65						AllocateXABytes:
.9f65		5a		phy				phy
.9f66		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9f69		84 36		sty $36				sty 	zTemp0
.9f6b		5a		phy				phy
.9f6c		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9f6f		84 37		sty $37				sty 	zTemp0+1
.9f71		5a		phy				phy
.9f72		18		clc				clc 								; add to low memory pointer
.9f73		6d 0c 04	adc $040c			adc 	lowMemPtr
.9f76		8d 0c 04	sta $040c			sta 	lowMemPtr
.9f79		8a		txa				txa
.9f7a		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9f7d		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9f80		b0 2f		bcs $9fb1			bcs 	CISSMemory
.9f82		20 a3 9f	jsr $9fa3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9f85						_ClearMemory:
.9f85		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9f88		c5 36		cmp $36				cmp 	zTemp0
.9f8a		d0 07		bne $9f93			bne 	_CMClearNext
.9f8c		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9f8f		c5 37		cmp $37				cmp 	zTemp0+1
.9f91		f0 0c		beq $9f9f			beq 	_CMExit
.9f93						_CMClearNext:
.9f93		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9f95		92 36		sta ($36)			sta 	(zTemp0)
.9f97		e6 36		inc $36				inc 	zTemp0
.9f99		d0 ea		bne $9f85			bne 	_ClearMemory
.9f9b		e6 37		inc $37				inc		zTemp0+1
.9f9d		80 e6		bra $9f85			bra 	_ClearMemory
.9f9f						_CMExit:
.9f9f		fa		plx				plx
.9fa0		68		pla				pla
.9fa1		7a		ply				ply
.9fa2		60		rts				rts
.9fa3						CheckIdentifierStringSpace:
.9fa3		48		pha				pha
.9fa4		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9fa7		18		clc				clc
.9fa8		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9faa		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9fad		b0 02		bcs $9fb1			bcs 	CISSMemory
.9faf		68		pla				pla
.9fb0		60		rts				rts
.9fb1						CISSMemory:
.9fb1		a9 06		lda #$06		lda	#6
.9fb3		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9fb6						AscUnary:
.9fb6		fa		plx				plx 								; restore stack pos
.9fb7		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; get a string
.9fba		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9fbc		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte 					; ASC("") will return zero.
.9fbf		20 50 94	jsr $9450			jsr 	CheckRightBracket
.9fc2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9fc3						FracUnary:
.9fc3		fa		plx				plx 								; restore stack pos
.9fc4		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; get a float or int
.9fc7		20 50 94	jsr $9450			jsr 	CheckRightBracket
.9fca		b5 50		lda $50,x			lda 	NSStatus,x
.9fcc		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9fce		f0 04		beq $9fd4			beq 	_IUZero
.9fd0		20 7e 9a	jsr $9a7e			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9fd3		60		rts				rts
.9fd4						_IUZero:
.9fd4		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.9fd7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9fd8						IntUnary:
.9fd8		fa		plx				plx 								; restore stack pos
.9fd9		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; get a float or int
.9fdc		20 50 94	jsr $9450			jsr 	CheckRightBracket
.9fdf		b5 50		lda $50,x			lda 	NSStatus,x
.9fe1		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9fe3		f0 03		beq $9fe8			beq 	_IUExit
.9fe5		20 d6 9a	jsr $9ad6			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9fe8						_IUExit:
.9fe8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9fe9						LenUnary:
.9fe9		fa		plx				plx 								; restore stack pos
.9fea		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; get a string
.9fed		5a		phy				phy
.9fee		a0 00		ldy #$00			ldy 	#0 							; find length
.9ff0						_LenFind:
.9ff0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9ff2		f0 06		beq $9ffa			beq 	_LenExit
.9ff4		c8		iny				iny
.9ff5		d0 f9		bne $9ff0			bne 	_LenFind
.9ff7		4c 37 a5	jmp $a537			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9ffa						_LenExit:
.9ffa		98		tya				tya		 							; return length
.9ffb		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.9ffe		7a		ply				ply
.9fff		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a002		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a003						Unary_Min:
.a003		a9 01		lda #$01			lda 	#1
.a005		80 02		bra $a009			bra 	UnaryMinMaxMain
.a007						Unary_Max:
.a007		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a009						UnaryMinMaxMain:
.a009		fa		plx				plx 								; get index on number stack
.a00a		48		pha				pha 								; save comparator
.a00b		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue 				; get the first value.
.a00e						_UMMMLoop:
.a00e		b1 30		lda ($30),y			lda 	(codePtr),y
.a010		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a012		f0 22		beq $a036			beq 	_UMMMDone
.a014		20 58 94	jsr $9458			jsr 	CheckComma 					; must be a comma
.a017		e8		inx				inx
.a018		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue
.a01b		ca		dex				dex
.a01c		20 97 a3	jsr $a397			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a01f		e8		inx				inx
.a020		20 97 a3	jsr $a397			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a023		e8		inx				inx
.a024		20 20 95	jsr $9520			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a027		ca		dex				dex
.a028		ca		dex				dex
.a029		85 36		sta $36				sta 	zTemp0 						; save required result
.a02b		68		pla				pla 								; get and save comparator
.a02c		48		pha				pha
.a02d		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a02f		d0 dd		bne $a00e			bne 	_UMMMLoop
.a031		20 39 a0	jsr $a039			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a034		80 d8		bra $a00e			bra 	_UMMMLoop
.a036						_UMMMDone:
.a036		68		pla				pla 								; throw the comparator
.a037		c8		iny				iny 								; skip )
.a038		60		rts				rts
.a039						ExpCopyAboveDown:
.a039		b5 51		lda $51,x			lda 	NSStatus+1,x
.a03b		95 50		sta $50,x			sta 	NSStatus,x
.a03d		b5 79		lda $79,x			lda 	NSExponent+1,x
.a03f		95 78		sta $78,x			sta 	NSExponent,x
.a041		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a043		95 58		sta $58,x			sta 	NSMantissa0,x
.a045		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a047		95 60		sta $60,x			sta 	NSMantissa1,x
.a049		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a04b		95 68		sta $68,x			sta 	NSMantissa2,x
.a04d		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a04f		95 70		sta $70,x			sta 	NSMantissa3,x
.a051		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a052						Unary_Not:
.a052		fa		plx				plx
.a053		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; get integer
.a056		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a059		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; zero mantissa ?
.a05c		f0 04		beq $a062			beq 	_NotZero
.a05e		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.a061		60		rts				rts
.a062						_NotZero:
.a062		4c d6 94	jmp $94d6			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a065						PeekByteUnary:
.a065		a9 01		lda #$01			lda 	#1
.a067		80 0a		bra $a073			bra 	PeekUnary
.a069						PeekWUnary:
.a069		a9 02		lda #$02			lda 	#2
.a06b		80 06		bra $a073			bra 	PeekUnary
.a06d						PeekLUnary:
.a06d		a9 03		lda #$03			lda 	#3
.a06f		80 02		bra $a073			bra 	PeekUnary
.a071						PeekDUnary:
.a071		a9 04		lda #$04			lda 	#4
.a073						PeekUnary:
.a073		fa		plx				plx 								; restore position.
.a074		48		pha				pha 								; save count to copy on stack
.a075		20 34 a3	jsr $a334			jsr		Evaluate16BitInteger 		; address as constant.
.a078		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a07b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a07d		85 36		sta $36				sta 	zTemp0
.a07f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a081		85 37		sta $37				sta 	zTemp0+1
.a083		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; clear the result to zero.
.a086		68		pla				pla 								; count in zTemp2
.a087		85 3a		sta $3a				sta 	zTemp2
.a089		da		phx				phx 								; save stack position and offset of read
.a08a		5a		phy				phy
.a08b		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a08d						_PULoop:
.a08d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a08f		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a091		c8		iny				iny 								; next byte to write
.a092		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a093		18		clc				clc
.a094		69 08		adc #$08			adc 	#MathStackSize
.a096		aa		tax				tax
.a097		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a099		d0 f2		bne $a08d			bne 	_PULoop
.a09b		7a		ply				ply 								; restore stack/code pos and exit.
.a09c		fa		plx				plx
.a09d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a09e						Unary_Random:
.a09e		fa		plx				plx
.a09f		20 10 a1	jsr $a110			jsr 	Random32Bit 				; get a random number
.a0a2		20 f9 a0	jsr $a0f9			jsr 	URCopyToMantissa  			; put in mantissa
.a0a5		b1 30		lda ($30),y			lda 	(codePtr),y
.a0a7		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a0a9		f0 08		beq $a0b3			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a0ab		e8		inx				inx
.a0ac		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a0af		ca		dex				dex
.a0b0		20 28 96	jsr $9628			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a0b3						_URNoModulus:
.a0b3		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a0b5		74 78		stz $78,x			stz 	NSExponent,x
.a0b7		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a0ba		60		rts				rts
.a0bb						Unary_Rnd:
.a0bb		fa		plx				plx
.a0bc		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; number to use.
.a0bf		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; closing bracket
.a0c2		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a0c5		f0 26		beq $a0ed			beq 	_URCopySeed
.a0c7		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a0c9		10 1f		bpl $a0ea			bpl 	_URDontSeed
.a0cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a0cd		49 17		eor #$17			eor 	#$17
.a0cf		8d 08 04	sta $0408			sta 	randomSeed+0
.a0d2		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0d4		49 a5		eor #$a5			eor 	#$A5
.a0d6		8d 09 04	sta $0409			sta 	randomSeed+1
.a0d9		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0db		49 c2		eor #$c2			eor 	#$C2
.a0dd		8d 0a 04	sta $040a			sta 	randomSeed+2
.a0e0		b5 70		lda $70,x			lda 	NSMantissa3,x
.a0e2		49 9d		eor #$9d			eor 	#$9D
.a0e4		8d 0b 04	sta $040b			sta 	randomSeed+3
.a0e7		20 10 a1	jsr $a110			jsr 	Random32Bit
.a0ea						_URDontSeed:
.a0ea		20 10 a1	jsr $a110			jsr 	Random32Bit 				; generate a number
.a0ed						_URCopySeed:
.a0ed		20 f9 a0	jsr $a0f9			jsr 	URCopyToMantissa 			; copy into mantissa
.a0f0		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a0f2		95 78		sta $78,x			sta 	NSExponent,x
.a0f4		a9 08		lda #$08			lda 	#NSTFloat
.a0f6		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a0f8		60		rts				rts
.a0f9						URCopyToMantissa:
.a0f9		ad 08 04	lda $0408			lda 	randomSeed+0
.a0fc		95 58		sta $58,x			sta 	NSMantissa0,x
.a0fe		ad 09 04	lda $0409			lda 	randomSeed+1
.a101		95 60		sta $60,x			sta 	NSMantissa1,x
.a103		ad 0a 04	lda $040a			lda 	randomSeed+2
.a106		95 68		sta $68,x			sta 	NSMantissa2,x
.a108		ad 0b 04	lda $040b			lda 	randomSeed+3
.a10b		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a10d		95 70		sta $70,x			sta 	NSMantissa3,x
.a10f		60		rts				rts
.a110						Random32Bit:
.a110		5a		phy				phy
.a111		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a113		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.a116		d0 03		bne $a11b			bne 	_Random1
.a118		a8		tay				tay 								; if so do it 256 times
.a119		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a11b						_Random1:
.a11b		0a		asl a				asl 	a 							; LSFR RNG
.a11c		2e 09 04	rol $0409			rol 	randomSeed+1
.a11f		2e 0a 04	rol $040a			rol 	randomSeed+2
.a122		2e 0b 04	rol $040b			rol 	randomSeed+3
.a125		90 02		bcc $a129			bcc 	_Random2
.a127		49 c5		eor #$c5			eor 	#$C5
.a129						_Random2:
.a129		88		dey				dey
.a12a		d0 ef		bne $a11b			bne 	_Random1
.a12c		8d 08 04	sta $0408			sta 	randomSeed+0
.a12f		7a		ply				ply
.a130		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a131						SgnUnary:
.a131		fa		plx				plx 								; restore stack pos
.a132		20 02 a3	jsr $a302			jsr 	EvaluateNumber 				; get a float or int
.a135		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a138		20 d6 a3	jsr $a3d6			jsr 	NSMIsZero 					; if zero
.a13b		f0 0e		beq $a14b			beq 	_SGZero  					; return Int Zero
.a13d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a13f		48		pha				pha
.a140		a9 01		lda #$01			lda 	#1 							; set to 1
.a142		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.a145		68		pla				pla
.a146		29 80		and #$80			and		#$80 						; copy the sign byte out
.a148		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a14a		60		rts				rts
.a14b		20 b4 a3	jsr $a3b4	_SGZero:jsr 	NSMSetZero
.a14e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a14f						ValUnary:
.a14f		fa		plx				plx 								; restore stack pos
.a150		20 65 a1	jsr $a165			jsr 	ValMainCode 				; do the main val() code
.a153		b0 01		bcs $a156			bcs 	_VUError 					; couldn't convert
.a155		60		rts				rts
.a156						_VUError:
.a156		4c 3c a5	jmp $a53c			jmp 	TypeError
.a159						IsValUnary:
.a159		fa		plx				plx 								; restore stack pos
.a15a		20 65 a1	jsr $a165			jsr 	ValMainCode 				; do the main val() code
.a15d		b0 03		bcs $a162			bcs 	_VUBad
.a15f		4c d6 94	jmp $94d6			jmp 	ReturnTrue
.a162						_VUBad:
.a162		4c e1 94	jmp $94e1			jmp 	ReturnFalse
.a165						ValMainCode:
.a165		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; get a string
.a168		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; check right bracket present
.a16b						ValEvaluateZTemp0:
.a16b		5a		phy				phy
.a16c		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a16e		f0 17		beq $a187			beq 	_VMCFail2
.a170		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a172		48		pha				pha 								; save first character
.a173		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a175		d0 01		bne $a178			bne 	_VMCStart
.a177		c8		iny				iny 								; skip over -
.a178						_VMCStart:
.a178		38		sec				sec 								; initialise first time round.
.a179						_VMCNext:
.a179		c8		iny				iny 								; pre-increment
.a17a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a17c		f0 0c		beq $a18a			beq 	_VMCSuccess 				; successful.
.a17e		20 b3 9c	jsr $9cb3			jsr 	EncodeNumber 				; send it to the number-builder
.a181		90 03		bcc $a186			bcc 	_VMCFail 					; if failed, give up.
.a183		18		clc				clc 								; next time round, countinue
.a184		80 f3		bra $a179			bra 	_VMCNext
.a186						_VMCFail:
.a186		68		pla				pla
.a187						_VMCFail2:
.a187		7a		ply				ply
.a188		38		sec				sec
.a189		60		rts				rts
.a18a						_VMCSuccess:
.a18a		a9 00		lda #$00			lda 	#0 							; construct final
.a18c		20 b3 9c	jsr $9cb3			jsr 	EncodeNumber 				; by sending a duff value.
.a18f		68		pla				pla 								; if it was -ve
.a190		c9 2d		cmp #$2d			cmp 	#"-"
.a192		d0 03		bne $a197			bne 	_VMCNotNegative
.a194		20 76 a3	jsr $a376			jsr		NSMNegate 					; negate it.
.a197						_VMCNotNegative:
.a197		7a		ply				ply
.a198		18		clc				clc
.a199		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a19a						ChrUnary:
.a19a		fa		plx				plx 								; restore stack pos
.a19b		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a19e		48		pha				pha
.a19f		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a1a2		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a1a4		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.a1a7		68		pla				pla 								; write number to it
.a1a8		20 bc b5	jsr $b5bc			jsr 	StringTempWrite
.a1ab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a1ac						SpcUnary:
.a1ac		fa		plx				plx 								; restore stack pos
.a1ad		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger			; get value
.a1b0		5a		phy				phy
.a1b1		48		pha				pha 								; save count
.a1b2		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.a1b5		7a		ply				ply 								; to do count in Y
.a1b6						_SpcLoop:
.a1b6		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a1b8		f0 08		beq $a1c2			beq 	_SpcExit
.a1ba		a9 20		lda #$20			lda 	#32
.a1bc		20 bc b5	jsr $b5bc			jsr 	StringTempWrite
.a1bf		88		dey				dey
.a1c0		80 f4		bra $a1b6			bra 	_SpcLoop
.a1c2						_SpcExit:
.a1c2		7a		ply				ply
.a1c3		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a1c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a1c7						Unary_Str:
.a1c7		fa		plx				plx
.a1c8		20 02 a3	jsr $a302			jsr 	EvaluateNumber  			; get number
.a1cb		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; closing bracket
.a1ce		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a1d0		20 e9 a1	jsr $a1e9			jsr 	ConvertNumberToString 		; do the conversion.
.a1d3		a9 21		lda #$21			lda		#33 						; create buffer
.a1d5		20 83 b5	jsr $b583			jsr 	StringTempAllocate 			; allocate memory
.a1d8		da		phx				phx  								; copy the converted string into the buffer.
.a1d9		a2 00		ldx #$00			ldx 	#0
.a1db						_USCopy:
.a1db		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a1de		20 bc b5	jsr $b5bc			jsr 	StringTempWrite
.a1e1		e8		inx				inx
.a1e2		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a1e5		d0 f4		bne $a1db			bne 	_USCopy
.a1e7		fa		plx				plx
.a1e8		60		rts				rts
.a1e9						ConvertNumberToString:
.a1e9		5a		phy				phy 								; save code position
.a1ea		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.a1ed		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.a1f0		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a1f2		10 09		bpl $a1fd			bpl 	_CNTSNotNegative
.a1f4		29 7f		and #$7f			and 	#$7F 						; make +ve
.a1f6		95 50		sta $50,x			sta 	NSStatus,x
.a1f8		a9 2d		lda #$2d			lda 	#"-"
.a1fa		20 5e a2	jsr $a25e			jsr 	WriteDecimalBuffer
.a1fd						_CNTSNotNegative:
.a1fd		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a1ff		f0 12		beq $a213			beq 	_CNTSNotFloat
.a201		e8		inx				inx 								; round up so we don't get too many 6.999999
.a202		a9 01		lda #$01			lda 	#1
.a204		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.a207		ca		dex				dex
.a208		b5 78		lda $78,x			lda		NSExponent,x
.a20a		95 79		sta $79,x			sta 	NSExponent+1,x
.a20c		a9 08		lda #$08			lda 	#NSTFloat
.a20e		95 51		sta $51,x			sta 	NSStatus+1,x
.a210		20 b8 99	jsr $99b8			jsr 	FloatAdd
.a213						_CNTSNotFloat:
.a213		20 40 a2	jsr $a240			jsr 	MakePlusTwoString 			; do the integer part.
.a216		20 7e 9a	jsr $9a7e			jsr 	FloatFractionalPart 		; get the fractional part
.a219		20 2f 9b	jsr $9b2f			jsr 	NSNormalise					; normalise , exit if zero
.a21c		f0 20		beq $a23e			beq 	_CNTSExit
.a21e		a9 2e		lda #$2e			lda 	#"."
.a220		20 5e a2	jsr $a25e			jsr 	WriteDecimalBuffer 			; write decimal place
.a223						_CNTSDecimal:
.a223		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.a226		30 16		bmi $a23e			bmi 	_CNTSExit
.a228		e8		inx				inx 								; x 10.0
.a229		a9 0a		lda #$0a			lda 	#10
.a22b		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.a22e		a9 08		lda #$08			lda 	#NSTFloat
.a230		95 50		sta $50,x			sta 	NSStatus,x
.a232		ca		dex				dex
.a233		20 fd 9a	jsr $9afd			jsr 	FloatMultiply
.a236		20 40 a2	jsr $a240			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a239		20 7e 9a	jsr $9a7e			jsr 	FloatFractionalPart 		; get the fractional part
.a23c		80 e5		bra $a223			bra 	_CNTSDecimal 				; keep going.
.a23e						_CNTSExit:
.a23e		7a		ply				ply
.a23f		60		rts				rts
.a240						MakePlusTwoString:
.a240		da		phx				phx
.a241		20 97 a3	jsr $a397			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a244		e8		inx				inx 								; access it
.a245		e8		inx				inx
.a246		20 d6 9a	jsr $9ad6			jsr 	FloatIntegerPart 			; make it an integer
.a249		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a24b		20 e8 98	jsr $98e8			jsr 	ConvertInt32
.a24e		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a250						_MPTSCopy:
.a250		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a253		20 5e a2	jsr $a25e			jsr 	WriteDecimalBuffer
.a256		e8		inx				inx
.a257		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a25a		d0 f4		bne $a250			bne 	_MPTSCopy
.a25c		fa		plx				plx
.a25d		60		rts				rts
.a25e						WriteDecimalBuffer:
.a25e		da		phx				phx
.a25f		ae 15 04	ldx $0415			ldx 	dbOffset
.a262		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.a265		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.a268		ee 15 04	inc $0415			inc 	dbOffset
.a26b		fa		plx				plx
.a26c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a26d						Unary_Left:
.a26d		fa		plx				plx
.a26e		18		clc				clc 								; only one parameter
.a26f		20 d2 a2	jsr $a2d2			jsr 	SubstringInitial 			; set up.
.a272		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a274		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a276		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a278		80 25		bra $a29f			bra 	SubstringMain
.a27a						Unary_Right:
.a27a		fa		plx				plx
.a27b		18		clc				clc 								; only one parameter
.a27c		20 d2 a2	jsr $a2d2			jsr 	SubstringInitial 			; set up.
.a27f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a281		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a283		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a285		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a287		b0 02		bcs $a28b			bcs 	_URNotUnderflow
.a289		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a28b						_URNotUnderflow:
.a28b		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a28d		80 10		bra $a29f			bra 	SubstringMain
.a28f						Unary_Mid:
.a28f		fa		plx				plx
.a290		38		sec				sec 								; two parameters
.a291		20 d2 a2	jsr $a2d2			jsr 	SubstringInitial 			; set up.
.a294		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a296		f0 04		beq $a29c			beq 	_UMError
.a298		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a29a		80 03		bra $a29f			bra 	SubstringMain
.a29c						_UMError:
.a29c		4c 41 a5	jmp $a541			jmp 	ArgumentError
.a29f						SubstringMain:
.a29f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a2a1		d5 78		cmp $78,x			cmp 	NSExponent,x
.a2a3		b0 27		bcs $a2cc			bcs 	_SSMNull 					; if so, return an empty string.
.a2a5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a2a7		f0 23		beq $a2cc			beq 	_SSMNull 					; return empty string.
.a2a9		18		clc				clc 								; add the offset +1 to the address and
.a2aa		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a2ac		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a2ae		85 36		sta $36				sta 	zTemp0
.a2b0		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a2b2		69 00		adc #$00			adc 	#0
.a2b4		85 37		sta $37				sta 	zTemp0+1
.a2b6						_SSMNoCarry:
.a2b6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a2b8		20 83 b5	jsr $b583			jsr 	StringTempAllocate 			; allocate that many characters
.a2bb		5a		phy				phy 								; save Y
.a2bc		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a2be						_SSMCopy:
.a2be		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a2c0		f0 08		beq $a2ca			beq 	_SSMEString 				; no more to copy
.a2c2		20 bc b5	jsr $b5bc			jsr 	StringTempWrite 			; and write it out.
.a2c5		c8		iny				iny
.a2c6		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a2c8		d0 f4		bne $a2be			bne 	_SSMCopy
.a2ca						_SSMEString:
.a2ca		7a		ply				ply
.a2cb						_SSMExit:
.a2cb		60		rts				rts
.a2cc						_SSMNull:
.a2cc		a9 00		lda #$00			lda 	#0
.a2ce		20 83 b5	jsr $b583			jsr 	StringTempAllocate
.a2d1		60		rts				rts
.a2d2						SubstringInitial:
.a2d2		da		phx				phx 								; save initial stack position
.a2d3		08		php				php 								; save carry on stack indicating 2 parameters
.a2d4		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; get a string
.a2d7		5a		phy				phy 								; calculate length to exponent.
.a2d8		a0 ff		ldy #$ff			ldy 	#$FF
.a2da						_SIFindLength:
.a2da		c8		iny				iny
.a2db		b1 36		lda ($36),y			lda 	(zTemp0),y
.a2dd		d0 fb		bne $a2da			bne 	_SIFindLength
.a2df		98		tya				tya
.a2e0		95 78		sta $78,x			sta 	NSExponent,x
.a2e2		7a		ply				ply
.a2e3		e8		inx				inx
.a2e4		20 58 94	jsr $9458			jsr 	CheckComma 					; comma next
.a2e7		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get next parameter
.a2ea		28		plp				plp 								; is it the last parameter ?
.a2eb		90 07		bcc $a2f4			bcc 	_SSIExit 					; if so, exit.
.a2ed		e8		inx				inx
.a2ee		20 58 94	jsr $9458			jsr 	CheckComma 					; comma next
.a2f1		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get last parameter
.a2f4						_SSIExit:
.a2f4		fa		plx				plx
.a2f5		20 50 94	jsr $9450			jsr 	CheckRightBracket 			; check closing bracket
.a2f8		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a2f9						EvaluateValue:
.a2f9		48		pha				pha
.a2fa		20 6d 99	jsr $996d			jsr		EvaluateExpression 			; expression
.a2fd		20 30 9c	jsr $9c30			jsr 	Dereference					; derefernce it
.a300		68		pla				pla
.a301		60		rts				rts
.a302						EvaluateNumber:
.a302		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue 				; get a value
.a305		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a307		29 10		and #$10			and 	#NSBIsString
.a309		d0 13		bne $a31e			bne 	HelperTypeError
.a30b		60		rts				rts
.a30c						EvaluateString:
.a30c		20 f9 a2	jsr $a2f9			jsr 	EvaluateValue 				; get a value
.a30f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a311		29 10		and #$10			and 	#NSBIsString
.a313		f0 09		beq $a31e			beq 	HelperTypeError
.a315						CopyAddressToTemp0:
.a315		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a317		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a319		b5 60		lda $60,x			lda 	NSMantissa1,x
.a31b		85 37		sta $37				sta 	zTemp0+1
.a31d		60		rts				rts
.a31e						HelperTypeError:
.a31e		4c 3c a5	jmp $a53c			jmp 	TypeError
.a321						EvaluateInteger:
.a321		20 02 a3	jsr $a302			jsr 	EvaluateNumber
.a324		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a326		d0 09		bne $a331			bne 	HelperValueError 			; if not, it's a float.
.a328		60		rts				rts
.a329						EvaluateUnsignedInteger:
.a329		20 21 a3	jsr $a321			jsr 	EvaluateInteger 			; check integer is +ve
.a32c		b5 50		lda $50,x			lda 	NSStatus,x
.a32e		30 01		bmi $a331			bmi 	HelperValueError
.a330		60		rts				rts
.a331						HelperValueError:
.a331		4c 41 a5	jmp $a541			jmp 	ArgumentError
.a334						Evaluate16BitInteger:
.a334		20 29 a3	jsr $a329			jsr	 	EvaluateUnsignedInteger		; get integer
.a337		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a339		15 68		ora $68,x			ora 	NSMantissa2,x
.a33b		d0 f4		bne $a331			bne 	HelperValueError
.a33d		60		rts				rts
.a33e						Evaluate16BitIntegerSigned:
.a33e		20 21 a3	jsr $a321			jsr	 	EvaluateInteger				; get integer
.a341		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a343		15 68		ora $68,x			ora 	NSMantissa2,x
.a345		d0 ea		bne $a331			bne 	HelperValueError
.a347		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a349		10 03		bpl $a34e			bpl 	_EISNotSigned
.a34b		20 7d a3	jsr $a37d			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a34e						_EISNotSigned:
.a34e		60		rts				rts
.a34f						Evaluate8BitInteger:
.a34f		20 29 a3	jsr $a329			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a352		d0 dd		bne $a331			bne 	HelperValueError
.a354		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a356		15 68		ora $68,x			ora 	NSMantissa2,x
.a358		15 60		ora $60,x			ora 	NSMantissa1,x
.a35a		d0 d5		bne $a331			bne 	HelperValueError
.a35c		b5 58		lda $58,x			lda 	NSMantissa0,x
.a35e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a35f						Multiply8x8:
.a35f		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a360		85 36		sta $36			  	sta 	zTemp0
.a362		86 37		stx $37				stx 	zTemp0+1
.a364		a9 00		lda #$00			lda 	#0
.a366		a2 08		ldx #$08			ldx 	#8
.a368						_M88Loop:
.a368		90 03		bcc $a36d			bcc 	_M88NoAdd
.a36a		18		clc				clc
.a36b		65 37		adc $37				adc 	zTemp0+1
.a36d						_M88NoAdd:
.a36d		6a		ror a				ror 	a
.a36e		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a370		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a371		d0 f5		bne $a368			bne 	_M88Loop
.a373		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a375		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a376						NSMNegate:
.a376		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a378		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a37a		95 50		sta $50,x			sta 	NSStatus,x
.a37c		60		rts				rts
.a37d						NSMNegateMantissa:
.a37d		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a37e		a9 00		lda #$00			lda 	#0
.a380		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a382		95 58		sta $58,x			sta 	NSMantissa0,x
.a384		a9 00		lda #$00			lda 	#0
.a386		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a388		95 60		sta $60,x			sta 	NSMantissa1,x
.a38a		a9 00		lda #$00			lda 	#0
.a38c		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a38e		95 68		sta $68,x			sta 	NSMantissa2,x
.a390		a9 00		lda #$00			lda 	#0
.a392		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a394		95 70		sta $70,x			sta 	NSMantissa3,x
.a396		60		rts				rts
.a397						NSMShiftUpTwo:
.a397		b5 58		lda $58,x			lda 	NSMantissa0,x
.a399		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a39b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a39d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a39f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a3a1		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a3a3		b5 70		lda $70,x			lda 	NSMantissa3,x
.a3a5		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a3a7		b5 78		lda $78,x			lda 	NSExponent,x
.a3a9		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a3ab		b5 50		lda $50,x			lda 	NSStatus,x
.a3ad		95 52		sta $52,x			sta 	NSStatus+2,x
.a3af		60		rts				rts
.a3b0						NSMSetZeroMantissaOnly:
.a3b0		a9 00		lda #$00			lda 	#0
.a3b2		80 06		bra $a3ba			bra 	NSMSetMantissa
.a3b4						NSMSetZero:
.a3b4		a9 00		lda #$00			lda 	#0
.a3b6						NSMSetByte:
.a3b6		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a3b8		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a3ba						NSMSetMantissa:
.a3ba		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a3bc		74 60		stz $60,x			stz 	NSMantissa1,x
.a3be		74 68		stz $68,x			stz 	NSMantissa2,x
.a3c0		74 70		stz $70,x			stz 	NSMantissa3,x
.a3c2		60		rts				rts
.a3c3						NSMShiftLeft:
.a3c3		18		clc				clc
.a3c4						NSMRotateLeft:
.a3c4		36 58		rol $58,x			rol 	NSMantissa0,x
.a3c6		36 60		rol $60,x			rol		NSMantissa1,x
.a3c8		36 68		rol $68,x			rol		NSMantissa2,x
.a3ca		36 70		rol $70,x			rol		NSMantissa3,x
.a3cc		60		rts				rts
.a3cd						NSMShiftRight:
.a3cd		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a3cf		76 68		ror $68,x			ror		NSMantissa2,x
.a3d1		76 60		ror $60,x			ror		NSMantissa1,x
.a3d3		76 58		ror $58,x			ror		NSMantissa0,x
.a3d5		60		rts				rts
.a3d6						NSMIsZero:
.a3d6		b5 70		lda $70,x			lda 	NSMantissa3,x
.a3d8		15 68		ora $68,x			ora		NSMantissa2,x
.a3da		15 60		ora $60,x			ora		NSMantissa1,x
.a3dc		15 58		ora $58,x			ora		NSMantissa0,x
.a3de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a3df						TickHandler:
.a3df		5a		phy				phy 								; need to preserve Y
.a3e0		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a3e3		7a		ply				ply
.a3e4		60		rts				rts
.0775						LastTick:
>0775								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a3e5						Assemble_ora:
.a3e5		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3e8		01					.byte $01
.a3e9						Assemble_and:
.a3e9		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3ec		21					.byte $21
.a3ed						Assemble_eor:
.a3ed		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3f0		41					.byte $41
.a3f1						Assemble_adc:
.a3f1		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3f4		61					.byte $61
.a3f5						Assemble_sta:
.a3f5		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3f8		81					.byte $81
.a3f9						Assemble_lda:
.a3f9		20 74 82	jsr $8274		jsr	AssembleGroup1
>a3fc		a1					.byte $a1
.a3fd						Assemble_cmp:
.a3fd		20 74 82	jsr $8274		jsr	AssembleGroup1
>a400		c1					.byte $c1
.a401						Assemble_sbc:
.a401		20 74 82	jsr $8274		jsr	AssembleGroup1
>a404		e1					.byte $e1
.a405						Assemble_asl:
.a405		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a408		02					.byte $02
>a409		75					.byte $75
.a40a						Assemble_rol:
.a40a		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a40d		22					.byte $22
>a40e		75					.byte $75
.a40f						Assemble_lsr:
.a40f		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a412		42					.byte $42
>a413		75					.byte $75
.a414						Assemble_ror:
.a414		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a417		62					.byte $62
>a418		75					.byte $75
.a419						Assemble_stx:
.a419		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a41c		82					.byte $82
>a41d		50					.byte $50
.a41e						Assemble_ldx:
.a41e		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a421		a2					.byte $a2
>a422		d0					.byte $d0
.a423						Assemble_dec:
.a423		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a426		c2					.byte $c2
>a427		55					.byte $55
.a428						Assemble_inc:
.a428		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a42b		e2					.byte $e2
>a42c		55					.byte $55
.a42d						Assemble_stz:
.a42d		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a430		60					.byte $60
>a431		44					.byte $44
.a432						Assemble_bit:
.a432		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a435		20					.byte $20
>a436		55					.byte $55
.a437						Assemble_sty:
.a437		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a43a		80					.byte $80
>a43b		54					.byte $54
.a43c						Assemble_ldy:
.a43c		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a43f		a0					.byte $a0
>a440		d5					.byte $d5
.a441						Assemble_cpy:
.a441		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a444		c0					.byte $c0
>a445		d4					.byte $d4
.a446						Assemble_cpx:
.a446		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a449		e0					.byte $e0
>a44a		d0					.byte $d0
.a44b						Assemble_tsb:
.a44b		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a44e		00					.byte $00
>a44f		50					.byte $50
.a450						Assemble_trb:
.a450		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a453		10					.byte $10
>a454		50					.byte $50
.a455						Assemble_jsr:
.a455		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a458		14					.byte $14
>a459		10					.byte $10
.a45a						Assemble_jmp:
.a45a		20 7b 82	jsr $827b		jsr	AssembleGroup2
>a45d		40					.byte $40
>a45e		10					.byte $10
.a45f						Assemble_bpl:
.a45f		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a462		10					.byte $10
.a463						Assemble_bmi:
.a463		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a466		30					.byte $30
.a467						Assemble_bvc:
.a467		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a46a		50					.byte $50
.a46b						Assemble_bvs:
.a46b		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a46e		70					.byte $70
.a46f						Assemble_bcc:
.a46f		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a472		90					.byte $90
.a473						Assemble_bcs:
.a473		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a476		b0					.byte $b0
.a477						Assemble_bne:
.a477		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a47a		d0					.byte $d0
.a47b						Assemble_beq:
.a47b		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a47e		f0					.byte $f0
.a47f						Assemble_bra:
.a47f		20 cc 82	jsr $82cc		jsr	AssembleGroup3
>a482		80					.byte $80
.a483						Assemble_brk:
.a483		20 00 83	jsr $8300		jsr	AssembleGroup4
>a486		00					.byte $00
.a487						Assemble_php:
.a487		20 00 83	jsr $8300		jsr	AssembleGroup4
>a48a		08					.byte $08
.a48b						Assemble_clc:
.a48b		20 00 83	jsr $8300		jsr	AssembleGroup4
>a48e		18					.byte $18
.a48f						Assemble_plp:
.a48f		20 00 83	jsr $8300		jsr	AssembleGroup4
>a492		28					.byte $28
.a493						Assemble_sec:
.a493		20 00 83	jsr $8300		jsr	AssembleGroup4
>a496		38					.byte $38
.a497						Assemble_rti:
.a497		20 00 83	jsr $8300		jsr	AssembleGroup4
>a49a		40					.byte $40
.a49b						Assemble_pha:
.a49b		20 00 83	jsr $8300		jsr	AssembleGroup4
>a49e		48					.byte $48
.a49f						Assemble_cli:
.a49f		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4a2		58					.byte $58
.a4a3						Assemble_phy:
.a4a3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4a6		5a					.byte $5a
.a4a7						Assemble_rts:
.a4a7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4aa		60					.byte $60
.a4ab						Assemble_pla:
.a4ab		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ae		68					.byte $68
.a4af						Assemble_sei:
.a4af		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4b2		78					.byte $78
.a4b3						Assemble_ply:
.a4b3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4b6		7a					.byte $7a
.a4b7						Assemble_dey:
.a4b7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ba		88					.byte $88
.a4bb						Assemble_txa:
.a4bb		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4be		8a					.byte $8a
.a4bf						Assemble_tya:
.a4bf		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4c2		98					.byte $98
.a4c3						Assemble_txs:
.a4c3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4c6		9a					.byte $9a
.a4c7						Assemble_tay:
.a4c7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ca		a8					.byte $a8
.a4cb						Assemble_tax:
.a4cb		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ce		aa					.byte $aa
.a4cf						Assemble_clv:
.a4cf		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4d2		b8					.byte $b8
.a4d3						Assemble_tsx:
.a4d3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4d6		ba					.byte $ba
.a4d7						Assemble_iny:
.a4d7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4da		c8					.byte $c8
.a4db						Assemble_dex:
.a4db		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4de		ca					.byte $ca
.a4df						Assemble_cld:
.a4df		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4e2		d8					.byte $d8
.a4e3						Assemble_phx:
.a4e3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4e6		da					.byte $da
.a4e7						Assemble_stp:
.a4e7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ea		db					.byte $db
.a4eb						Assemble_inx:
.a4eb		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4ee		e8					.byte $e8
.a4ef						Assemble_nop:
.a4ef		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4f2		ea					.byte $ea
.a4f3						Assemble_sed:
.a4f3		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4f6		f8					.byte $f8
.a4f7						Assemble_plx:
.a4f7		20 00 83	jsr $8300		jsr	AssembleGroup4
>a4fa		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a4fb						DecimalScalarTable:
>a4fb		66 66 66 66				.dword $66666666 ; 0.1
>a4ff		de					.byte $de
>a500		1f 85 eb 51				.dword $51eb851f ; 0.01
>a504		db					.byte $db
>a505		4c 37 89 41				.dword $4189374c ; 0.001
>a509		d8					.byte $d8
>a50a		ac 8b db 68				.dword $68db8bac ; 0.0001
>a50e		d4					.byte $d4
>a50f		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a513		d1					.byte $d1
>a514		83 de 1b 43				.dword $431bde83 ; 1e-06
>a518		ce					.byte $ce
>a519		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a51d		ca					.byte $ca
>a51e		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a522		c7					.byte $c7
>a523		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a527		c4					.byte $c4
>a528		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a52c		c0					.byte $c0
>a52d		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a531		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a532						SyntaxError:
.a532		a9 02		lda #$02		lda	#2
.a534		4c 69 94	jmp $9469		jmp	ErrorHandler
.a537						RangeError:
.a537		a9 04		lda #$04		lda	#4
.a539		4c 69 94	jmp $9469		jmp	ErrorHandler
.a53c						TypeError:
.a53c		a9 05		lda #$05		lda	#5
.a53e		4c 69 94	jmp $9469		jmp	ErrorHandler
.a541						ArgumentError:
.a541		a9 07		lda #$07		lda	#7
.a543		4c 69 94	jmp $9469		jmp	ErrorHandler
.a546						NotDoneError:
.a546		a9 0c		lda #$0c		lda	#12
.a548		4c 69 94	jmp $9469		jmp	ErrorHandler
.a54b						ErrorText:
>a54b		42 72 65 61 6b 00			.text	"Break",0
>a551		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a559		72 72 6f 72 00
>a55e		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a566		20 62 79 20 7a 65 72 6f 00
>a56f		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a577		61 6e 67 65 00
>a57c		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a584		6d 61 74 63 68 00
>a58a		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a592		65 6d 6f 72 79 00
>a598		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a5a0		61 72 67 75 6d 65 6e 74 00
>a5a9		53 74 6f 70 00				.text	"Stop",0
>a5ae		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a5b6		6f 6f 20 6c 6f 6e 67 00
>a5be		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a5c6		6e 20 66 61 69 6c 65 64 00
>a5cf		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a5d7		61 74 61 00
>a5db		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a5e3		65 6e 74 65 64 00
>a5e9		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a5f1		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a5fd		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a605		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a612		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a61a		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a627		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a62f		68 6f 75 74 20 57 68 69 6c 65 00
>a63a		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a642		68 6f 75 74 20 46 6f 72 00
>a64b		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a653		61 63 6b 20 66 75 6c 6c 00
>a65c		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a664		75 63 74 75 72 65 00
>a66b		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a673		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a680		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a688		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a696		41 72 72 61 79 20 73 69			.text	"Array size",0
>a69e		7a 65 00
>a6a1		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a6a9		79 20 69 6e 64 65 78 00
>a6b1		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a6b9		74 20 64 65 63 6c 61 72 65 64 00
>a6c4		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a6cc		20 66 6f 75 6e 64 00
>a6d3		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a6db		65 72 72 6f 72 00
>a6e1		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a6e9		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc4e		09 09 30 37 2f 30 31 2f			.text 9,9,"07/01/23 25"
>dc56		32 33 20 32 35

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a6ef						RectangleCommand:
.a6ef		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a6f1		80 02		bra $a6f5			bra 	ShapeDrawCmd
.a6f3						CircleCommand:
.a6f3		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a6f5						ShapeDrawCmd:
.a6f5		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a6f8						ShapeDraw:
.a6f8		0d 77 07	ora $0777			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a6fb		4c 73 a7	jmp $a773			jmp 	ExecuteGraphicCommand	 	; and complete
.a6fe						SpriteCommand:
.a6fe		a2 00		ldx #$00			ldx 	#0
.a700		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get image number.
.a703		5a		phy				phy
.a704		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a706		a6 58		ldx $58				ldx 	NSMantissa0
.a708		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a70a		b0 0d		bcs $a719			bcs 	_SCRange
.a70c		a0 ff		ldy #$ff			ldy 	#255
.a70e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a711		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a713		7a		ply				ply
.a714		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a717		80 5a		bra $a773			bra 	ExecuteGraphicCommand
.a719						_SCRange:
.a719		4c 37 a5	jmp $a537			jmp 	RangeError
.a71c						ImageCommand:
.a71c		a2 00		ldx #$00			ldx 	#0
.a71e		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get image number.
.a721		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a724						ImageRunDraw:
.a724		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a726		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a729		ad 7d 07	lda $077d			lda 	gxDrawScale
.a72c		0a		asl a				asl 	a
.a72d		0a		asl a				asl 	a
.a72e		0a		asl a				asl 	a
.a72f		a8		tay				tay
.a730		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a732		a6 58		ldx $58				ldx 	NSMantissa0
.a734		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a737		60		rts				rts
.a738						TextCommand:
.a738		a2 00		ldx #$00			ldx 	#0
.a73a		20 0c a3	jsr $a30c			jsr 	EvaluateString 				; get text
.a73d		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a740						TextRunDraw:
.a740		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a742		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a745		a0 00		ldy #$00			ldy 	#0
.a747						_IRDLoop:
.a747		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a749		85 37		sta $37				sta 	zTemp0+1
.a74b		a5 58		lda $58				lda 	NSMantissa0
.a74d		85 36		sta $36				sta 	zTemp0
.a74f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a751		f0 13		beq $a766			beq 	_IRDExit
.a753		5a		phy				phy									; save string pos
.a754		48		pha				pha 								; save char
.a755		ad 7d 07	lda $077d			lda 	gxDrawScale 				; get scale
.a758		0a		asl a				asl 	a
.a759		0a		asl a				asl 	a
.a75a		0a		asl a				asl 	a
.a75b		a8		tay				tay
.a75c		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a75e		fa		plx				plx 								; char to draw
.a75f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a762		7a		ply				ply 								; restore string pos
.a763		c8		iny				iny
.a764		90 e1		bcc $a747			bcc 	_IRDLoop 					; go back if no error.
.a766						_IRDExit:
.a766		60		rts				rts
.a767						PlotCommand:
.a767		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a769		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a76c		80 05		bra $a773			bra 	ExecuteGraphicCommand
.a76e						LineCommand:
.a76e		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a770		20 7f a7	jsr $a77f			jsr 	RunGraphicsCommand
.a773						ExecuteGraphicCommand:
.a773		0d 76 07	ora $0776			ora 	gxCommandID 				; make a full command
.a776		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.a779		b0 01		bcs $a77c			bcs 	_EGCError
.a77b		60		rts				rts
.a77c						_EGCError:
.a77c		4c 32 a5	jmp $a532			jmp 	SyntaxError
.a77f						RunGraphicsCommand:
.a77f		8d 76 07	sta $0776			sta 	gxCommandID					; save TODO graphics command.
.a782		68		pla				pla 								; pop handler address
.a783		fa		plx				plx
.a784		1a		inc a				inc 	a
.a785		d0 01		bne $a788			bne 	_RGINoCarry
.a787		e8		inx				inx
.a788						_RGINoCarry:
.a788		8d 7b 07	sta $077b			sta 	gxHandler
.a78b		8e 7c 07	stx $077c			stx 	gxHandler+1
.a78e						_RGICommandLoop:
.a78e		b1 30		lda ($30),y			lda 	(codePtr),y
.a790		c8		iny				iny
.a791		c9 d6		cmp #$d6			cmp 	#KWD_TO						; is it TO x,y
.a793		f0 53		beq $a7e8			beq 	_RGI_To
.a795		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a797		f0 55		beq $a7ee			beq 	_RGI_Here
.a799		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a79b		f0 3d		beq $a7da			beq 	_RGI_Exit
.a79d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a79f		f0 39		beq $a7da			beq 	_RGI_Exit
.a7a1		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a7a3		f0 3e		beq $a7e3			beq 	_RGI_Frame
.a7a5		c9 d2		cmp #$d2			cmp 	#KWD_SOLID
.a7a7		f0 33		beq $a7dc			beq 	_RGI_Solid
.a7a9		c9 b5		cmp #$b5			cmp 	#KWD_BY 					; by offset
.a7ab		f0 4b		beq $a7f8			beq 	_RGI_By
.a7ad		c9 bf		cmp #$bf			cmp 	#KWD_FROM 					; from
.a7af		f0 17		beq $a7c8			beq 	_RGI_Move2
.a7b1		c9 bc		cmp #$bc			cmp 	#KWD_DIM 					; dim (set scale)
.a7b3		f0 62		beq $a817			beq 	_RGI_Dim
.a7b5		c9 ba		cmp #$ba			cmp 	#KWD_COLOUR 				; colour or Color
.a7b7		f0 74		beq $a82d			beq 	_RGI_Colour
.a7b9		c9 b9		cmp #$b9			cmp 	#KWD_COLOR
.a7bb		f0 70		beq $a82d			beq 	_RGI_Colour
.a7bd		ae 76 07	ldx $0776			ldx 	gxCommandID
.a7c0		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a7c2		d0 03		bne $a7c7			bne 	_RGI_Move 					; move
.a7c4		4c 55 a8	jmp $a855			jmp		_RGI_SpriteInstructions
.a7c7						_RGI_Move:
.a7c7		88		dey				dey 								; unpick get.
.a7c8						_RGI_Move2:
.a7c8		20 7b a8	jsr $a87b			jsr 	GCGetCoordinatePair 		; move to here
.a7cb		20 a2 a8	jsr $a8a2			jsr 	GCCopyPairToStore 			; save
.a7ce		5a		phy				phy
.a7cf		20 98 a8	jsr $a898			jsr 	GCLoadAXY 					; load in
.a7d2		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a7d4		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a7d7		7a		ply				ply
.a7d8		80 b4		bra $a78e			bra 	_RGICommandLoop 			; and go round
.a7da						_RGI_Exit:
.a7da		88		dey				dey 								; unpick : / EOL
.a7db		60		rts				rts
.a7dc						_RGI_Solid:
.a7dc		a9 02		lda #$02			lda 	#2
.a7de		8d 77 07	sta $0777			sta 	gxFillSolid
.a7e1		80 ab		bra $a78e			bra 	_RGICommandLoop
.a7e3						_RGI_Frame:
.a7e3		9c 77 07	stz $0777			stz 	gxFillSolid
.a7e6		80 a6		bra $a78e			bra 	_RGICommandLoop
.a7e8						_RGI_To:
.a7e8		20 7b a8	jsr $a87b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a7eb		20 a2 a8	jsr $a8a2			jsr 	GCCopyPairToStore
.a7ee						_RGI_Here:
.a7ee		5a		phy				phy
.a7ef		20 98 a8	jsr $a898			jsr 	GCLoadAXY 					; load it into AXY
.a7f2		20 52 a8	jsr $a852			jsr 	_RGICallHandler 			; go do whatever it is.
.a7f5		7a		ply				ply
.a7f6		80 96		bra $a78e			bra 	_RGICommandLoop 			; and go round
.a7f8						_RGI_By:
.a7f8		20 88 a8	jsr $a888			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a7fb		18		clc				clc
.a7fc		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a7fe		6d 78 07	adc $0778			adc 	gxXPos
.a801		8d 78 07	sta $0778			sta 	gxXPos
.a804		a5 61		lda $61				lda 	NSMantissa1+1
.a806		6d 79 07	adc $0779			adc 	gxXPos+1
.a809		8d 79 07	sta $0779			sta 	gxXPos+1
.a80c		a5 5a		lda $5a				lda 	NSMantissa0+2
.a80e		18		clc				clc
.a80f		6d 7a 07	adc $077a			adc 	gxYPos
.a812		8d 7a 07	sta $077a			sta 	gxYPos
.a815		80 d7		bra $a7ee			bra 	_RGI_Here
.a817						_RGI_Dim:
.a817		a2 01		ldx #$01			ldx	 	#1
.a819		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.a81c		a5 59		lda $59				lda 	NSMantissa0+1
.a81e		c9 00		cmp #$00			cmp 	#0
.a820		f0 2d		beq $a84f			beq 	_RGIRange
.a822		c9 09		cmp #$09			cmp 	#8+1
.a824		b0 29		bcs $a84f			bcs		_RGIRange
.a826		3a		dec a				dec 	a
.a827		8d 7d 07	sta $077d			sta 	gxDrawScale
.a82a		4c 8e a7	jmp $a78e			jmp 	_RGICommandLoop
.a82d						_RGI_Colour:
.a82d		a2 01		ldx #$01			ldx 	#1 							; colour
.a82f		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.a832		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a834		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.a837		b1 30		lda ($30),y			lda 	(codePtr),y
.a839		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a83b		d0 04		bne $a841			bne 	_RGICDefaultMode
.a83d		c8		iny				iny
.a83e		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.a841						_RGICDefaultMode:
.a841		5a		phy				phy
.a842		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a844		a6 59		ldx $59				ldx 	NSMantissa0+1
.a846		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a848		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a84b		7a		ply				ply
.a84c		4c 8e a7	jmp $a78e			jmp 	_RGICommandLoop 			; and go round
.a84f						_RGIRange:
.a84f		4c 37 a5	jmp $a537			jmp 	RangeError
.a852						_RGICallHandler:
.a852		6c 7b 07	jmp ($077b)			jmp 	(gxHandler)
.a855						_RGI_SpriteInstructions:
.a855		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a857		f0 07		beq $a860			beq 	_RGISpriteOff
.a859		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a85b		f0 13		beq $a870			beq 	_RGISetImage
.a85d		4c c7 a7	jmp $a7c7			jmp 	_RGI_Move
.a860						_RGISpriteOff:
.a860		5a		phy				phy
.a861		a0 01		ldy #$01			ldy 	#1
.a863		a2 00		ldx #$00			ldx 	#0
.a865						_RGIDoCommandLoop:
.a865		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a867		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a86a		7a		ply				ply
.a86b		b0 e2		bcs $a84f			bcs 	_RGIRange
.a86d		4c 8e a7	jmp $a78e			jmp 	_RGICommandLoop
.a870						_RGISetImage:
.a870		a2 01		ldx #$01			ldx 	#1
.a872		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger
.a875		5a		phy				phy
.a876		aa		tax				tax
.a877		a0 00		ldy #$00			ldy 	#0
.a879		80 ea		bra $a865			bra 	_RGIDoCommandLoop
.a87b						GCGetCoordinatePair:
.a87b		a2 01		ldx #$01			ldx 	#1
.a87d		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.a880		20 58 94	jsr $9458			jsr 	CheckComma
.a883		e8		inx				inx
.a884		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.a887		60		rts				rts
.a888						GCSignedCoordinatePair:
.a888		a2 01		ldx #$01			ldx 	#1
.a88a		20 3e a3	jsr $a33e			jsr 	Evaluate16BitIntegerSigned
.a88d		20 58 94	jsr $9458			jsr 	CheckComma
.a890		e8		inx				inx
.a891		20 3e a3	jsr $a33e			jsr 	Evaluate16BitIntegerSigned
.a894		60		rts				rts
.a895						_GCCPRange:
.a895		4c 37 a5	jmp $a537			jmp 	RangeError
.a898						GCLoadAXY:
.a898		ad 79 07	lda $0779			lda 	gxXPos+1
.a89b		ae 78 07	ldx $0778			ldx 	gxXPos
.a89e		ac 7a 07	ldy $077a			ldy 	gxYPos
.a8a1		60		rts				rts
.a8a2						GCCopyPairToStore:
.a8a2		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8a4		8d 78 07	sta $0778			sta 	gxXPos
.a8a7		a5 61		lda $61				lda 	NSMantissa1+1
.a8a9		8d 79 07	sta $0779			sta 	gxXPos+1
.a8ac		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8ae		8d 7a 07	sta $077a			sta 	gxYPos
.a8b1		60		rts				rts
.0776						gxCommandID:
>0776								.fill 	1
.0777						gxFillSolid:
>0777								.fill 	1
.0778						gxXPos:
>0778								.fill 	2
.077a						gxYPos:
>077a								.fill 	1
.077b						gxHandler:
>077b								.fill 	2
.077d						gxDrawScale:
>077d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a8b2						BitmapCtrl:
.a8b2		b1 30		lda ($30),y			lda 	(codePtr),y
.a8b4		c8		iny				iny
.a8b5		a2 01		ldx #$01			ldx 	#1
.a8b7		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a8b9		f0 11		beq $a8cc			beq 	BitmapSwitch
.a8bb		ca		dex				dex
.a8bc		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a8be		f0 0c		beq $a8cc			beq 	BitmapSwitch
.a8c0		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get the colour
.a8c3		5a		phy				phy
.a8c4		aa		tax				tax
.a8c5		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a8c7		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8ca		7a		ply				ply
.a8cb		60		rts				rts
.a8cc						BitmapSwitch:
.a8cc		5a		phy				phy
.a8cd		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a8cf		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a8d1		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8d4		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a8d6		a0 00		ldy #$00			ldy 	#0
.a8d8		a2 ff		ldx #$ff			ldx 	#$FF
.a8da		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8dd		9c 77 07	stz $0777			stz 	gxFillSolid
.a8e0		9c 78 07	stz $0778			stz 	gxXPos
.a8e3		9c 79 07	stz $0779			stz 	gxXPos+1
.a8e6		9c 7a 07	stz $077a			stz 	gxYPos
.a8e9		9c 7d 07	stz $077d			stz 	gxDrawScale
.a8ec		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a8ee		a2 00		ldx #$00			ldx 	#0
.a8f0		a0 00		ldy #$00			ldy 	#0
.a8f2		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8f5		7a		ply				ply
.a8f6		60		rts				rts
.a8f7						SpritesCtrl:
.a8f7		b1 30		lda ($30),y			lda 	(codePtr),y
.a8f9		c8		iny				iny
.a8fa		a2 01		ldx #$01			ldx 	#1
.a8fc		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a8fe		f0 08		beq $a908			beq 	SpriteSwitch
.a900		ca		dex				dex
.a901		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a903		f0 03		beq $a908			beq 	SpriteSwitch
.a905		4c 32 a5	jmp $a532			jmp 	SyntaxError
.a908						SpriteSwitch:
.a908		5a		phy				phy
.a909		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a90b		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a90d		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a910		7a		ply				ply
.a911		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a912						GfxCommand:
.a912		a2 00		ldx #$00			ldx 	#0
.a914		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; command
.a917		20 58 94	jsr $9458			jsr 	CheckComma
.a91a		e8		inx				inx
.a91b		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; X
.a91e		20 58 94	jsr $9458			jsr 	CheckComma
.a921		e8		inx				inx
.a922		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; Y
.a925		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a927		4a		lsr a				lsr 	a
.a928		d0 12		bne $a93c			bne 	_GfxError
.a92a		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a92c		b0 0e		bcs $a93c			bcs 	_GfxError 					; bit 7 should have been zero
.a92e		5a		phy				phy 								; save pos
.a92f		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a931		a6 59		ldx $59				ldx 	NSMantissa0+1
.a933		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a935		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a938		b0 02		bcs $a93c			bcs 	_GfxError
.a93a		7a		ply				ply 								; restore pos and exit.
.a93b		60		rts				rts
.a93c						_GfxError:
.a93c		4c 37 a5	jmp $a537			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a93f						UnaryHit:
.a93f		fa		plx				plx
.a940		a9 36		lda #$36			lda 	#zTemp0
.a942		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a945		20 58 94	jsr $9458			jsr 	CheckComma
.a948		e8		inx				inx
.a949		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a94c		20 50 94	jsr $9450			jsr		CheckRightBracket
.a94f		ca		dex				dex 								; fix back up again.
.a950		da		phx				phx 								; save X/Y
.a951		5a		phy				phy
.a952		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a954		b5 58		lda $58,x			lda 	NSMantissa0,x
.a956		aa		tax				tax
.a957		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a959		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.a95c		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a95d		7a		ply				ply 								; restore XY
.a95e		fa		plx				plx
.a95f		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte 					; return the hit result
.a962		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a963						PaletteCommand:
.a963		a2 00		ldx #$00			ldx 	#0
.a965		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; colour
.a968		20 58 94	jsr $9458			jsr 	CheckComma
.a96b		e8		inx				inx
.a96c		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; r
.a96f		20 58 94	jsr $9458			jsr 	CheckComma
.a972		e8		inx				inx
.a973		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; g
.a976		20 58 94	jsr $9458			jsr 	CheckComma
.a979		e8		inx				inx
.a97a		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; b
.a97d		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a97f		85 36		sta $36				sta 	zTemp0
.a981		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a983		85 37		sta $37				sta 	zTemp0+1
.a985		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a987		26 37		rol $37				rol	 	zTemp0+1
.a989		06 36		asl $36				asl 	zTemp0
.a98b		26 37		rol $37				rol	 	zTemp0+1
.a98d		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a98f		85 01		sta $01				sta 	1
.a991		5a		phy				phy
.a992		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a994		92 36		sta ($36)			sta 	(zTemp0)
.a996		a0 01		ldy #$01			ldy 	#1
.a998		a5 5a		lda $5a				lda 	NSMantissa0+2
.a99a		91 36		sta ($36),y			sta 	(zTemp0),y
.a99c		a5 59		lda $59				lda 	NSMantissa0+1
.a99e		c8		iny				iny
.a99f		91 36		sta ($36),y			sta 	(zTemp0),y
.a9a1		7a		ply				ply
.a9a2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a9a3						XLoadCommand:
.a9a3		20 5e 8e	jsr $8e5e			jsr 	NewProgram
.a9a6		20 e3 84	jsr $84e3			jsr 	BackloadProgram
.a9a9		4c a2 85	jmp $85a2			jmp 	WarmStart
.a9ac						XGoCommand:
.a9ac		20 5e 8e	jsr $8e5e			jsr 	NewProgram
.a9af		20 e3 84	jsr $84e3			jsr 	BackloadProgram
.a9b2		4c dc 8f	jmp $8fdc			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a9b5						UnaryEvent:
.a9b5		fa		plx				plx
.a9b6		20 4f aa	jsr $aa4f			jsr 	TimerToStackX 				; timer in +0
.a9b9		e8		inx				inx  								; put reference into +1
.a9ba		20 b7 9d	jsr $9db7			jsr 	EvaluateTerm
.a9bd		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a9bf		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a9c1		d0 4c		bne $aa0f			bne 	_UEType
.a9c3		e8		inx				inx 								; put the step in +2
.a9c4		20 58 94	jsr $9458			jsr 	CheckComma
.a9c7		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger
.a9ca		20 50 94	jsr $9450			jsr 	CheckRightBracket
.a9cd		ca		dex				dex
.a9ce		ca		dex				dex
.a9cf		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a9d1		85 36		sta $36				sta 	zTemp0
.a9d3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a9d5		85 37		sta $37				sta 	zTemp0+1
.a9d7		5a		phy				phy
.a9d8		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a9da		b1 36		lda ($36),y			lda 	(zTemp0),y
.a9dc		30 2d		bmi $aa0b			bmi 	_UEFalse 					; exit if signed.
.a9de		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a9e0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9e2		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a9e4		c8		iny				iny
.a9e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.a9e7		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a9e9		c8		iny				iny
.a9ea		b5 68		lda $68,x			lda 	NSMantissa2,x
.a9ec		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a9ee		90 1b		bcc $aa0b			bcc 	_UEFalse 					; no, return FALSE.
.a9f0		18		clc				clc
.a9f1		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a9f3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9f5		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a9f7		91 36		sta ($36),y			sta 	(zTemp0),y
.a9f9		c8		iny				iny
.a9fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.a9fc		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a9fe		91 36		sta ($36),y			sta 	(zTemp0),y
.aa00		c8		iny				iny
.aa01		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa03		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aa05		91 36		sta ($36),y			sta 	(zTemp0),y
.aa07		7a		ply				ply
.aa08		4c d6 94	jmp $94d6			jmp 	ReturnTrue
.aa0b						_UEFalse:
.aa0b		7a		ply				ply 								; restore Y
.aa0c		4c e1 94	jmp $94e1			jmp 	ReturnFalse 				; and return False
.aa0f						_UEType:
.aa0f		4c 3c a5	jmp $a53c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.aa12						UnaryJoyX:
.aa12		18		clc				clc
.aa13		80 01		bra $aa16			bra 	JoyMain
.aa15						UnaryJoyY:
.aa15		38		sec				sec
.aa16						JoyMain:
.aa16		fa		plx				plx 								; get pos
.aa17		08		php				php 								; save carry (set for Y)
.aa18		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aa1b		20 50 94	jsr $9450			jsr 	CheckRightBracket
.aa1e		20 24 82	jsr $8224			jsr 	EXTReadController 			; read the controller.
.aa21		28		plp				plp
.aa22		b0 02		bcs $aa26			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aa24		4a		lsr a				lsr 	a
.aa25		4a		lsr a				lsr 	a
.aa26						_JMNoShift:
.aa26		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aa27		b0 07		bcs $aa30			bcs 	JMIsLeft
.aa29		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aa2a		b0 07		bcs $aa33			bcs 	JMIsRight
.aa2c		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; zero result
.aa2f		60		rts				rts
.aa30						JMIsLeft:
.aa30		4c d6 94	jmp $94d6			jmp 	ReturnTrue
.aa33						JMIsRight:
.aa33		a9 01		lda #$01			lda 	#1
.aa35		20 b6 a3	jsr $a3b6			jsr 	NSMSetByte
.aa38		60		rts				rts
.aa39						UnaryJoyB:
.aa39		fa		plx				plx 								; get pos
.aa3a		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aa3d		20 50 94	jsr $9450			jsr 	CheckRightBracket
.aa40		20 24 82	jsr $8224			jsr 	EXTReadController 			; read the controller.
.aa43		29 10		and #$10			and 	#$10
.aa45		d0 e9		bne $aa30			bne 	JMIsLeft
.aa47		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero
.aa4a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.aa4b						UnaryTimer:
.aa4b		fa		plx				plx
.aa4c		20 50 94	jsr $9450			jsr 	CheckRightBracket
.aa4f						TimerToStackX:
.aa4f		20 b4 a3	jsr $a3b4			jsr 	NSMSetZero 					; zero result
.aa52		64 01		stz $01				stz 	1 							; access I/O
.aa54		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.aa57		95 58		sta $58,x			sta 	NSMantissa0,x
.aa59		ad 5a d6	lda $d65a			lda 	$D65A
.aa5c		95 60		sta $60,x			sta 	NSMantissa1,x
.aa5e		ad 5b d6	lda $d65b			lda 	$D65B
.aa61		95 68		sta $68,x			sta 	NSMantissa2,x
.aa63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.aa64						MemoryDeleteLine:
.aa64		20 83 aa	jsr $aa83			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aa67		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.aa69		a8		tay				tay
.aa6a						_MDDLLoop:
.aa6a		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.aa6c		92 30		sta ($30)			sta 	(codePtr)
.aa6e		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aa70		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.aa72		d0 07		bne $aa7b			bne 	_MDLDLNext
.aa74		a5 31		lda $31				lda 	codePtr+1
.aa76		c5 3b		cmp $3b				cmp 	zTemp2+1
.aa78		d0 01		bne $aa7b			bne 	_MDLDLNext
.aa7a						_MDDLExit:
.aa7a		60		rts				rts
.aa7b						_MDLDLNext:
.aa7b		e6 30		inc $30				inc 	codePtr						; next byte
.aa7d		d0 eb		bne $aa6a			bne 	_MDDLLoop
.aa7f		e6 31		inc $31				inc 	codePtr+1
.aa81		80 e7		bra $aa6a			bra 	_MDDLLoop
.aa83						IMemoryFindEnd:
.aa83		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa85		85 3a		sta $3a				sta 	0+zTemp2
.aa87		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa89		85 3b		sta $3b				sta 	1+zTemp2
.aa8b						_MDLFELoop:
.aa8b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.aa8d		f0 0b		beq $aa9a			beq 	_MDLFEExit
.aa8f		18		clc				clc
.aa90		65 3a		adc $3a				adc 	zTemp2
.aa92		85 3a		sta $3a				sta 	zTemp2
.aa94		90 f5		bcc $aa8b			bcc 	_MDLFELoop
.aa96		e6 3b		inc $3b				inc 	zTemp2+1
.aa98		80 f1		bra $aa8b			bra 	_MDLFELoop
.aa9a						_MDLFEExit:
.aa9a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.aa9b						MemoryInsertLine:
.aa9b		08		php				php
.aa9c		20 83 aa	jsr $aa83			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aa9f		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.aaa1		1a		inc a				inc 	a
.aaa2		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aaa4		b0 36		bcs $aadc			bcs 	_MDLIError 					; no, fail.
.aaa6		28		plp				plp 								; do at a specific point or the end ?
.aaa7		90 08		bcc $aab1			bcc 	_MDLIFound 					; if specific point already set.
.aaa9		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.aaab		85 30		sta $30				sta 	codePtr 					; end.
.aaad		a5 3b		lda $3b				lda 	zTemp2+1
.aaaf		85 31		sta $31				sta 	codePtr+1
.aab1						_MDLIFound:
.aab1		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aab4		a8		tay				tay
.aab5						_MDLIInsert:
.aab5		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.aab7		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aab9		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.aabb		c5 3a		cmp $3a				cmp 	zTemp2
.aabd		d0 06		bne $aac5			bne 	_MDLINext
.aabf		a5 31		lda $31				lda 	codePtr+1
.aac1		c5 3b		cmp $3b				cmp 	zTemp2+1
.aac3		f0 0a		beq $aacf			beq 	_MDLIHaveSpace
.aac5						_MDLINext:
.aac5		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.aac7		d0 02		bne $aacb			bne 	_MDLINoBorrow
.aac9		c6 3b		dec $3b				dec 	zTemp2+1
.aacb						_MDLINoBorrow:
.aacb		c6 3a		dec $3a				dec 	zTemp2
.aacd		80 e6		bra $aab5			bra 	_MDLIInsert
.aacf						_MDLIHaveSpace:
.aacf		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.aad2		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.aad3						_MDLICopy:
.aad3		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.aad6		91 30		sta ($30),y			sta 	(codePtr),y
.aad8		88		dey				dey
.aad9		10 f8		bpl $aad3			bpl 	_MDLICopy
.aadb		60		rts				rts
.aadc						_MDLIError:
.aadc		a9 06		lda #$06		lda	#6
.aade		4c 69 94	jmp $9469		jmp	ErrorHandler
.aae1						MDLAppendLine:
.aae1		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.aae3		85 36		sta $36				sta 	zTemp0
.aae5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aae7		85 38		sta $38				sta 	0+zTemp1
.aae9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aaeb		85 39		sta $39				sta 	1+zTemp1
.aaed		b2 38		lda ($38)			lda 	(zTemp1)
.aaef		d0 0a		bne $aafb			bne 	_MDLANoInitialise
.aaf1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aaf3		8d 7e 07	sta $077e			sta 	0+AppendPointer
.aaf6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aaf8		8d 7f 07	sta $077f			sta 	1+AppendPointer
.aafb						_MDLANoInitialise:
.aafb		18		clc				clc
.aafc		ad 7e 07	lda $077e			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.aaff		85 38		sta $38				sta 	zTemp1
.ab01		72 36		adc ($36)			adc 	(zTemp0)
.ab03		8d 7e 07	sta $077e			sta 	AppendPointer
.ab06		ad 7f 07	lda $077f			lda 	AppendPointer+1
.ab09		85 39		sta $39				sta 	zTemp1+1
.ab0b		69 00		adc #$00			adc 	#0
.ab0d		8d 7f 07	sta $077f			sta 	AppendPointer+1
.ab10		a0 00		ldy #$00			ldy 	#0
.ab12						_MDLACopy:
.ab12		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ab14		91 38		sta ($38),y			sta 	(zTemp1),y
.ab16		c8		iny				iny
.ab17		98		tya				tya
.ab18		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ab1a		d0 f6		bne $ab12			bne 	_MDLACopy
.ab1c		a9 00		lda #$00			lda 	#0 							; end of program.
.ab1e		91 38		sta ($38),y			sta 	(zTemp1),y
.ab20		60		rts				rts
.077e						AppendPointer:
>077e								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ab21						MemoryNew:
.ab21		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab23		85 30		sta $30				sta 	codePtr
.ab25		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab27		85 31		sta $31				sta 	codePtr+1
.ab29		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ab2b		92 30		sta ($30)			sta 	(codePtr)
.ab2d		60		rts				rts
.ab2e						MemoryInline:
.ab2e		98		tya				tya 								; put address into stack,x
.ab2f		18		clc				clc  								; get the offset, add codePtr
.ab30		65 30		adc $30				adc 	codePtr
.ab32		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ab34		a5 31		lda $31				lda 	codePtr+1
.ab36		69 00		adc #$00			adc 	#0
.ab38		95 60		sta $60,x			sta 	NSMantissa1,x
.ab3a		74 68		stz $68,x			stz 	NSMantissa2,x
.ab3c		74 70		stz $70,x			stz 	NSMantissa3,x
.ab3e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ab3f						MemorySearch:
.ab3f		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ab41		86 37		stx $37				stx 	zTemp0+1
.ab43		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab45		85 30		sta $30				sta 	codePtr
.ab47		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab49		85 31		sta $31				sta 	codePtr+1
.ab4b						_MTAXLoop:
.ab4b		b2 30		lda ($30)			lda 	(codePtr)
.ab4d		18		clc				clc
.ab4e		f0 21		beq $ab71			beq 	_MTAXExit 					; reached end, exit with CC.
.ab50		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ab52		b1 30		lda ($30),y			lda 	(codePtr),y
.ab54		38		sec				sec
.ab55		e5 36		sbc $36				sbc 	zTemp0
.ab57		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ab59		c8		iny				iny 								; do the MSB
.ab5a		b1 30		lda ($30),y			lda 	(codePtr),y
.ab5c		e5 37		sbc $37				sbc 	zTemp0+1
.ab5e		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ab60		f0 0f		beq $ab71			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ab62		b0 0d		bcs $ab71			bcs 	_MTAXExit 					; current < required exit
.ab64		18		clc				clc
.ab65		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ab67		65 30		adc $30				adc 	codePtr
.ab69		85 30		sta $30				sta 	codePtr
.ab6b		90 02		bcc $ab6f			bcc 	_CREExit
.ab6d		e6 31		inc $31				inc 	codePtr+1 					; carry
.ab6f						_CREExit:
.ab6f		80 da		bra $ab4b			bra 	_MTAXLoop
.ab71						_MTAXExit:
.ab71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ab72						UpdateFont:
.ab72		a5 01		lda $01				lda 	1 							; save position
.ab74		48		pha				pha
.ab75		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ab77		85 01		sta $01				sta 	1
.ab79		a9 a0		lda #$a0			lda 	#((FontBinary) & $FF)
.ab7b		85 36		sta $36				sta 	0+zTemp0
.ab7d		a9 ab		lda #$ab			lda 	#((FontBinary) >> 8)
.ab7f		85 37		sta $37				sta 	1+zTemp0
.ab81		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ab83		85 38		sta $38				sta 	0+zTemp1
.ab85		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ab87		85 39		sta $39				sta 	1+zTemp1
.ab89						_UFCopy1:
.ab89		a0 00		ldy #$00			ldy 	#0
.ab8b						_UFCopy2:
.ab8b		b1 36		lda ($36),y			lda 	(zTemp0),y
.ab8d		91 38		sta ($38),y			sta 	(zTemp1),y
.ab8f		c8		iny				iny
.ab90		d0 f9		bne $ab8b			bne 	_UFCopy2
.ab92		e6 37		inc $37				inc 	zTemp0+1
.ab94		e6 39		inc $39				inc 	zTemp1+1
.ab96		a5 39		lda $39				lda 	zTemp1+1
.ab98		c9 c8		cmp #$c8			cmp 	#$C8
.ab9a		d0 ed		bne $ab89			bne 	_UFCopy1
.ab9c		68		pla				pla 								; restore.
.ab9d		85 01		sta $01				sta 	1
.ab9f		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.aba0						FontBinary:
>aba0		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>aba8		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>abb8		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>abc8		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>abd8		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>abe8		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>abf8		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>ac08		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>ac18		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>ac28		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>ac38		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>ac48		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>ac58		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>ac68		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ac78		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>ac88		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>ac98		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aca8		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>acb8		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>acc8		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>acd8		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>ace8		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>acf8		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ad08		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>ad18		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>ad28		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>ad38		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>ad48		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>ad58		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>ad68		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>ad78		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>ad88		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>ad98		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>ada8		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>adb8		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>adc8		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>add8		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ade8		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>adf8		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ae08		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ae18		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ae28		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ae38		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ae48		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ae58		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ae68		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ae78		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ae88		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ae98		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aea8		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aeb8		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>aec8		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aed8		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aee8		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aef8		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>af08		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>af18		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>af28		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>af38		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>af48		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>af58		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>af68		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>af78		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>af88		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>af98		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>afa8		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>afb8		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>afc8		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>afd8		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>afe8		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aff8		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b008		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b018		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b028		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b038		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b048		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b058		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b068		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b078		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b088		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b098		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b0a8		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b0b8		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b0c8		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b0d8		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b0e8		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b0f8		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b108		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b118		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b128		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b138		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>b148		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>b158		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>b168		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>b178		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>b188		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>b198		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>b1a8		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b1b8		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b1c8		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b1d8		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b1e8		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b1f8		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b208		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b218		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b228		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b238		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b248		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b258		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b268		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b278		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b288		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b298		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b2a8		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b2b8		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b2c8		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b2d8		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b2e8		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b2f8		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b308		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b318		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b328		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b338		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b348		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b358		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b368		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b378		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b388		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b398		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b3a0						PingCommand:
.b3a0		5a		phy				phy 								; save pos
.b3a1		a9 01		lda #$01			lda 	#1 						; push channel.
.b3a3		48		pha				pha
.b3a4		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b3a6		a2 06		ldx #$06			ldx 	#6 						; length
.b3a8		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3aa		80 24		bra $b3d0			bra 	SoundEffectCommand
.b3ac						ZapCommand:
.b3ac		5a		phy				phy 								; save pos
.b3ad		a9 01		lda #$01			lda 	#1 						; push channel.
.b3af		48		pha				pha
.b3b0		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b3b2		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3b4		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b3b6		80 18		bra $b3d0			bra 	SoundEffectCommand
.b3b8						ShootCommand:
.b3b8		5a		phy				phy 								; save pos
.b3b9		a9 03		lda #$03			lda 	#3 						; push channel.
.b3bb		48		pha				pha
.b3bc		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b3be		a2 04		ldx #$04			ldx 	#4 						; length
.b3c0		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3c2		80 0c		bra $b3d0			bra 	SoundEffectCommand
.b3c4						Explode:
.b3c4		5a		phy				phy 								; save pos
.b3c5		a9 03		lda #$03			lda 	#3 						; push channel.
.b3c7		48		pha				pha
.b3c8		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b3ca		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3cc		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3ce		80 00		bra $b3d0			bra 	SoundEffectCommand
.b3d0						SoundEffectCommand:
.b3d0		8d 80 07	sta $0780			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b3d3		9c 81 07	stz $0781			stz 	SoundCommandBlock+1
.b3d6		a9 0f		lda #$0f			lda 	#15
.b3d8		8d 82 07	sta $0782			sta 	SoundCommandBlock+2
.b3db		8e 83 07	stx $0783			stx 	SoundCommandBlock+3
.b3de		8c 84 07	sty $0784			sty 	SoundCommandBlock+4
.b3e1		9c 85 07	stz $0785			stz 	SoundCommandBlock+5
.b3e4		68		pla				pla
.b3e5		09 10		ora #$10			ora 	#$10  						; execute command $11
.b3e7		a2 80		ldx #$80			ldx 	#(SoundCommandBlock & $FF)
.b3e9		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b3eb		20 3f 80	jsr $803f			jsr 	SNDCommand
.b3ee		7a		ply				ply
.b3ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b3f0						UnaryPlaying:
.b3f0		fa		plx				plx
.b3f1		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; get channel #
.b3f4		48		pha				pha
.b3f5		20 50 94	jsr $9450			jsr		CheckRightBracket
.b3f8		68		pla				pla
.b3f9		c9 04		cmp #$04			cmp 	#4
.b3fb		b0 0c		bcs $b409			bcs 	_UPNotPlaying
.b3fd		09 20		ora #$20			ora 	#$20 						; query playing ?
.b3ff		20 3f 80	jsr $803f			jsr 	SNDCommand
.b402		c9 00		cmp #$00			cmp 	#0
.b404		f0 03		beq $b409			beq 	_UPNotPlaying
.b406		4c d6 94	jmp $94d6			jmp 	ReturnTrue
.b409						_UPNotPlaying:
.b409		4c e1 94	jmp $94e1			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b40c						SoundCommand:
.b40c		b1 30		lda ($30),y			lda 	(codePtr),y
.b40e		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.b410		d0 09		bne $b41b			bne 	_SNDMain
.b412		c8		iny				iny 								; skip OFF
.b413		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b415		5a		phy				phy
.b416		20 3f 80	jsr $803f			jsr 	SNDCommand
.b419		7a		ply				ply
.b41a		60		rts				rts
.b41b						_SNDMain:
.b41b		a2 00		ldx #$00			ldx 	#0
.b41d		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; channel
.b420		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b422		b0 4b		bcs $b46f			bcs 	_SndError
.b424		e8		inx				inx 								; do the rest in slot 1.
.b425		20 58 94	jsr $9458			jsr 	CheckComma
.b428		20 34 a3	jsr $a334			jsr 	Evaluate16BitInteger 		; Pitch
.b42b		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b42d		c9 10		cmp #$10			cmp 	#16
.b42f		b0 3e		bcs $b46f			bcs 	_SndError
.b431		8d 81 07	sta $0781			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b434		b5 58		lda $58,x			lda 	NSMantissa0,x
.b436		8d 80 07	sta $0780			sta 	SoundCommandBlock
.b439		20 58 94	jsr $9458			jsr 	CheckComma
.b43c		20 4f a3	jsr $a34f			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b43f		8d 83 07	sta $0783			sta 	SoundCommandBlock+3
.b442		a9 0f		lda #$0f			lda 	#15
.b444		8d 82 07	sta $0782			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b447		9c 84 07	stz $0784			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b44a		9c 85 07	stz $0785			stz 	SoundCommandBlock+5
.b44d		b1 30		lda ($30),y			lda 	(codePtr),y
.b44f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b451		d0 0e		bne $b461			bne 	_SNDPlay
.b453		c8		iny				iny
.b454		20 3e a3	jsr $a33e			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b457		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b459		8d 84 07	sta $0784			sta 	SoundCommandBlock+4
.b45c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b45e		8d 85 07	sta $0785			sta 	SoundCommandBlock+5
.b461						_SNDPlay:
.b461		5a		phy				phy
.b462		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b464		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b466		a2 80		ldx #$80			ldx 	#(SoundCommandBlock & $FF)
.b468		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b46a		20 3f 80	jsr $803f			jsr 	SNDCommand
.b46d		7a		ply				ply
.b46e		60		rts				rts
.b46f						_SndError:
.b46f		4c 37 a5	jmp $a537			jmp 	RangeError
.0780						SoundCommandBlock:
>0780								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b472						StackPushByte:
.b472		48		pha				pha 								; save byte on stack
.b473		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b475		d0 08		bne $b47f			bne 	_SPBNoBorrow
.b477		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b479		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b47b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b47d		90 06		bcc $b485			bcc 	_SPBMemory
.b47f						_SPBNoBorrow:
.b47f		c6 34		dec $34				dec 	basicStack
.b481		68		pla				pla 								; get back and write
.b482		92 34		sta ($34)			sta 	(basicStack)
.b484		60		rts				rts
.b485						_SPBMemory:
.b485		a9 12		lda #$12		lda	#18
.b487		4c 69 94	jmp $9469		jmp	ErrorHandler
.b48a						StackPopByte:
.b48a		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b48c		e6 34		inc $34				inc 	basicStack
.b48e		d0 02		bne $b492			bne 	_SPBNoCarry
.b490		e6 35		inc $35				inc 	basicStack+1
.b492						_SPBNoCarry:
.b492		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b493						StackOpen:
.b493		48		pha				pha 								; save frame byte
.b494		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b496		0a		asl a				asl 	a 							; claim twice this for storage
.b497		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b499		38		sec				sec 								; so basically subtracting from
.b49a		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b49c		85 34		sta $34				sta 	basicStack
.b49e		b0 09		bcs $b4a9			bcs 	_SONoBorrow
>b4a0		db						.byte 	$DB 						; causes a break in the emulator
.b4a1		c6 35		dec $35				dec 	basicStack+1
.b4a3		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b4a5		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b4a7		90 04		bcc $b4ad			bcc 	_SOMemory
.b4a9						_SONoBorrow:
.b4a9		68		pla				pla 								; get marker back and write at TOS
.b4aa		92 34		sta ($34)			sta 	(basicStack)
.b4ac		60		rts				rts
.b4ad						_SOMemory:
.b4ad		a9 12		lda #$12		lda	#18
.b4af		4c 69 94	jmp $9469		jmp	ErrorHandler
.b4b2						StackClose:
.b4b2		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b4b4		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b4b6		0a		asl a				asl 	a 							; claim twice this.
.b4b7		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b4b9		85 34		sta $34				sta 	basicStack
.b4bb		90 02		bcc $b4bf			bcc 	_SCExit
.b4bd		e6 35		inc $35				inc 	basicStack+1
.b4bf						_SCExit:
.b4bf		60		rts				rts
.b4c0						StackCheckFrame:
.b4c0		48		pha				pha
.b4c1						_StackRemoveLocals:
.b4c1		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b4c3		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b4c5		b0 05		bcs $b4cc			bcs 	_SCNoLocal
.b4c7		20 0d 8e	jsr $8e0d			jsr 	LocalPopValue 				; restore the local value
.b4ca		80 f5		bra $b4c1			bra 	_StackRemoveLocals 			; gr round again
.b4cc						_SCNoLocal:
.b4cc		68		pla				pla 								; get the frame check.
.b4cd		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b4cf		29 f0		and #$f0			and 	#$F0 						; check type bits
.b4d1		d0 01		bne $b4d4			bne 	_SCFError 					; different, we have structures mixed up
.b4d3		60		rts				rts
.b4d4						_SCFError:
.b4d4		8a		txa				txa 								; report error X
.b4d5		4c 69 94	jmp $9469			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b4d8						STKSaveCodePosition:
.b4d8		5a		phy				phy
.b4d9		98		tya				tya 								; save Y
.b4da		a0 05		ldy #$05			ldy 	#5
.b4dc		91 34		sta ($34),y			sta 	(basicStack),y
.b4de		88		dey				dey 								; save Code Pointer
.b4df						_STKSaveLoop:
.b4df		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b4e2		91 34		sta ($34),y			sta 	(basicStack),y
.b4e4		88		dey				dey
.b4e5		d0 f8		bne $b4df			bne 	_STKSaveLoop
.b4e7		7a		ply				ply
.b4e8		60		rts				rts
.b4e9						STKLoadCodePosition:
.b4e9		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b4eb						_STKLoadLoop:
.b4eb		b1 34		lda ($34),y			lda 	(basicStack),y
.b4ed		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b4f0		c8		iny				iny
.b4f1		c0 05		cpy #$05			cpy 	#5
.b4f3		d0 f6		bne $b4eb			bne 	_STKLoadLoop
.b4f5		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b4f7		a8		tay				tay
.b4f8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b4f9						StackReset:
.b4f9		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b4fb		85 34		sta $34				sta 	0+basicStack
.b4fd		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b4ff		85 35		sta $35				sta 	1+basicStack
.b501		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b503		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b505		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b506						StringConcrete:
.b506		5a		phy				phy 								; save position on stack
.b507		20 a3 9f	jsr $9fa3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b50a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b50c		85 38		sta $38				sta 	zTemp1
.b50e		b5 60		lda $60,x			lda 	NSMantissa1,x
.b510		85 39		sta $39				sta 	zTemp1+1
.b512		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b514						_SALength:
.b514		c8		iny				iny
.b515		b1 38		lda ($38),y			lda 	(zTemp1),y
.b517		d0 fb		bne $b514			bne 	_SALength
.b519		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b51b		b0 3d		bcs $b55a			bcs 	_SALengthError
.b51d		98		tya				tya 				 				; length of the new string
.b51e		18		clc				clc
.b51f		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b521		90 02		bcc $b525			bcc 	_SAHaveLength
.b523		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b525						_SAHaveLength:
.b525		48		pha				pha 								; save length.
.b526		38		sec				sec
.b527		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b529		6d 0e 04	adc $040e			adc 	stringMemory
.b52c		8d 0e 04	sta $040e			sta 	stringMemory
.b52f		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b531		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b533		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b535		6d 0f 04	adc $040f			adc 	stringMemory+1
.b538		8d 0f 04	sta $040f			sta 	stringMemory+1
.b53b		85 3b		sta $3b				sta 	zTemp2+1
.b53d		95 60		sta $60,x			sta 	NSMantissa1,x
.b53f		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b540		38		sec				sec
.b541		e9 03		sbc #$03			sbc 	#3
.b543		92 3a		sta ($3a)			sta 	(zTemp2)
.b545		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b547		a0 01		ldy #$01			ldy 	#1
.b549		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b54b						_SACopyNewString:
.b54b		a0 00		ldy #$00			ldy 	#0
.b54d						_SACopyNSLoop:
.b54d		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b54f		c8		iny				iny 								; write two on in string storage
.b550		c8		iny				iny
.b551		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b553		88		dey				dey 								; this makes it one one.
.b554		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b556		d0 f5		bne $b54d			bne 	_SACopyNSLoop
.b558		7a		ply				ply
.b559		60		rts				rts
.b55a						_SALengthError:
.b55a		a9 09		lda #$09		lda	#9
.b55c		4c 69 94	jmp $9469		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b55f						StringSystemInitialise:
.b55f		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b561		8d 0e 04	sta $040e			sta 	0+stringMemory
.b564		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b566		8d 0f 04	sta $040f			sta 	1+stringMemory
.b569		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b56c		60		rts				rts
.b56d						StringSpaceInitialise:
.b56d		20 a3 9f	jsr $9fa3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b570		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b572		8d 10 04	sta $0410			sta 	stringInitialised
.b575		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b578		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b57b		ad 0f 04	lda $040f			lda 	stringMemory+1
.b57e		3a		dec a				dec 	a
.b57f		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b582		60		rts				rts
.b583						StringTempAllocate:
.b583		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b585		b0 30		bcs $b5b7			bcs 	_STALength
.b587		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b58a		30 05		bmi $b591			bmi 	_STAAllocate
.b58c		48		pha				pha 								; save value to subtract.
.b58d		20 6d b5	jsr $b56d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b590		68		pla				pla 								; restore it
.b591						_STAAllocate:
.b591		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b593		18		clc				clc  								; deliberate allows one more
.b594		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b597		8d 11 04	sta $0411			sta 	stringTempPointer
.b59a		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b59c		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b59e		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b5a1		69 ff		adc #$ff			adc 	#$FF
.b5a3		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b5a6		85 3d		sta $3d				sta 	zsTemp+1
.b5a8		95 60		sta $60,x			sta 	NSMantissa1,x
.b5aa		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b5ac		74 70		stz $70,x			stz 	NSMantissa3,x
.b5ae		a9 10		lda #$10			lda 	#NSTString
.b5b0		95 50		sta $50,x			sta 	NSStatus,x
.b5b2		a9 00		lda #$00			lda 	#0 							; clear the target string
.b5b4		92 3c		sta ($3c)			sta 	(zsTemp)
.b5b6		60		rts				rts
.b5b7						_STALength:
.b5b7		a9 09		lda #$09		lda	#9
.b5b9		4c 69 94	jmp $9469		jmp	ErrorHandler
.b5bc						StringTempWrite:
.b5bc		48		pha				pha
.b5bd		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b5bf		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b5c1		d0 02		bne $b5c5			bne 	_STWNoCarry
.b5c3		e6 3d		inc $3d				inc 	zsTemp+1
.b5c5						_STWNoCarry:
.b5c5		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b5c7		92 3c		sta ($3c)			sta 	(zsTemp)
.b5c9		68		pla				pla
.b5ca		60		rts				rts

;******  Return to file: _basic.asm

.b5cb						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 87 07	ldy $0787			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 87 07	ldy $0787			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 88 07	lda $0788			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 87 07	sty $0787			sty 	EXTColumn
.c02d	a02d	cc 89 07	cpy $0789			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 86 07	inc $0786			inc 	EXTRow  					; bump row
.c035	a035	9c 87 07	stz $0787			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 86 07	lda $0786			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 8a 07	cmp $078a			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 89 07	adc $0789			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 87 07	dec $0787			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 87 07	stz $0787			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 86 07	dec $0786			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 86 07	lda $0786			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 86 07	dec $0786			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 89 07	sbc $0789			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 87 07	sty $0787			sty 	EXTColumn
.c08c	a08c	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 87 07	sty $0787			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 8a 07	lda $078a			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 86 07	cmp $0786			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 86 07	inc $0786			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 89 07	adc $0789			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 87 07	lda $0787			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 87 07	sta $0787			sta 	EXTColumn
.c0c9	a0c9	cd 89 07	cmp $0789			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 87 07	dec $0787			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 89 07	cpy $0789			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 88 07	and $0788			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 88 07	sta $0788			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 88 07	ora $0788			ora 	EXTTextColour
.c13c	a13c	8d 88 07	sta $0788			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 88 07	lda $0788			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 88 07	lda $0788			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 86 07	stz $0786			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 87 07	stz $0787			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 87 07	lda $0787			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 86 07	lda $0786			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 75 07	cmp $0775			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 75 07	sta $0775			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 f4 bb	jsr $bbf4			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 09 82	jsr $8209			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 87 07	lda $0787			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 87 07	ldy $0787			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 87 07	ldy $0787			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 89 07	cpy $0789			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 87 07	cpy $0787			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 89 07	lda $0789			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 89 07	ldy $0789			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0786						EXTRow:
>0786								.fill 	1
.0787						EXTColumn:
>0787								.fill 	1
.0788						EXTTextColour:
>0788								.fill 	1
.0789						EXTScreenWidth:
>0789								.fill 	1
.078a						EXTScreenHeight:
>078a								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 88 07	sta $0788			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 89 07	sta $0789			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 8a 07	sta $078a			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 86 07	lda $0786			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.078b						gxCurrentX:
>078b								.fill 	2
.078d						gxCurrentY:
>078d								.fill 	2
.078f						gxLastX:
>078f								.fill 	2
.0791						gxLastY:
>0791								.fill 	2
.0793						gxX0:
>0793								.fill 	2
.0795						gxY0:
>0795								.fill 	2
.0797						gxX1:
>0797								.fill 	2
.0799						gxY1:
>0799								.fill 	2
.079b						gxSpritesOn:
>079b								.fill 	1
.079c						gxBitmapsOn:
>079c								.fill 	1
.079d						gxBasePage:
>079d								.fill 	1
.079e						gxSpritePage:
>079e								.fill 	1
.079f						gxHeight:
>079f								.fill 	1
.07a0						gxMode:
>07a0								.fill 	1
.07a1						gxColour:
>07a1								.fill 	1
.07a2						gxEORValue:
>07a2								.fill 	1
.07a3						gxANDValue:
>07a3								.fill 	1
.07a4						gxOriginalLUTValue:
>07a4								.fill 	1
.07a5						gxOffset:
>07a5								.fill 	1
.07a6						GSCurrentSpriteID:
>07a6								.fill 	1
.07a7						GSCurrentSpriteAddr:
>07a7								.fill 	2
.07a9						gxSpriteOffsetBase:
>07a9								.fill 	2
.07ab						gxSpriteLow:
>07ab								.fill 	64
.07eb						gxSpriteHigh:
>07eb								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 8b 07	lda $078b,x			lda 	gxCurrentX,x
.c800	a800	9d 8f 07	sta $078f,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8d 07	sta $078d			sta 	gxCurrentY
.c80a	a80a	9c 8e 07	stz $078e			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 8b 07	sta $078b			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8c 07	sta $078c			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8c 07	lda $078c			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 8b 07	lda $078b			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8d 07	lda $078d			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9f 07	cmp $079f			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 8b 07	lda $078b,x			lda 	gxCurrentX,x
.c83c	a83c	9d 93 07	sta $0793,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2e 08	sta $082e			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2f 08	stz $082f			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2c 08	lda $082c			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2d 08	cmp $082d			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2d 08	lda $082d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2c 08	lda $082c			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2d 08	ldx $082d			ldx	 	gxYCentre
.c898	a898	8d 2d 08	sta $082d			sta 	gxYCentre
.c89b	a89b	8e 2c 08	stx $082c			stx 	gxxCentre
.c89e	a89e	ad 2f 08	lda $082f			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2f 08	sta $082f			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2e 08	lda $082e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2f 08	lda $082f			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2d 08	lda $082d			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2c 08	lda $082c			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2e 08	lda $082e			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2d 08	sbc $082d			sbc 	gxYCentre
.c8df	a8df	8d 2d 08	sta $082d			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 97 07	lda $0797,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 93 07	sta $0793,x			sta 	gxX0,x
.c8f6	a8f6	bd 98 07	lda $0798,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 94 07	sta $0794,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2f 08	stz $082f			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2c 08	inc $082c			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2c 08	lda $082c			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2c 08	inc $082c			inc 	gxxCentre					; X++
.c918	a918	ce 2d 08	dec $082d			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2c 08	lda $082c			lda 	gxxCentre
.c91f	a91f	ed 2d 08	sbc $082d			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2f 08	dec $082f			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 99 07	lda $0799			lda 	gxY1
.c958	a958	ed 95 07	sbc $0795			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 2b 08	sta $082b			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2c 08	stz $082c			stz 	gxxCentre
.c96c	a96c	ad 2b 08	lda $082b			lda 	gxRadius
.c96f	a96f	8d 2d 08	sta $082d			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 97 07	lda $0797,x			lda 	gxX1,x
.c987	a987	7d 93 07	adc $0793,x			adc 	gxX0,x
.c98a	a98a	9d 97 07	sta $0797,x			sta 	gxX1,x
.c98d	a98d	bd 98 07	lda $0798,x			lda 	gxX1+1,x
.c990	a990	7d 94 07	adc $0794,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 98 07	sta $0798,x			sta 	gxX1+1,x
.c997	a997	7e 97 07	ror $0797,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.082b						gxRadius:
>082b								.fill 	1
.082c						gxxCentre:
>082c								.fill 	1
.082d						gxYCentre:
>082d								.fill 	1
.082e						gxIsFillMode:
>082e								.fill 	1
.082f						gxYChanged:
>082f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9c 07	lda $079c			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9f 07	lda $079f			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9d 07	adc $079d			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9d 07	cmp $079d			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 9b 07	stz $079b			stz 	gxSpritesOn
.c9f4	a9f4	9c 9c 07	stz $079c			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 8b 07	stz $078b,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9c 07	sta $079c			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9d 07	sta $079d			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9f 07	stx $079f			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 9b 07	sta $079b			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9e 07	sta $079e			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a9 07	sta $07a9			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d aa 07	sta $07aa			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a8 07	stz $07a8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e eb 07	stz $07eb,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a5 07	ldy $07a5			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a3 07	and $07a3			and 	gxANDValue
.cac1	aac1	4d a2 07	eor $07a2			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 32 08	lda $0832			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 93 07	lda $0793			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 97 07	eor $0797			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 94 07	lda $0794			lda 	gxX0+1
.cae7	aae7	4d 98 07	eor $0798			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 99 07	lda $0799			lda 	gxY1
.caee	aaee	4d 95 07	eor $0795			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 34 08	lda $0834			lda 	gxPosition
.caf6	aaf6	6d 35 08	adc $0835			adc 	gxAdjust
.caf9	aaf9	8d 34 08	sta $0834			sta 	gxPosition
.cafc	aafc	9c 37 08	stz $0837			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 36 08	cmp $0836			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 37 08	dec $0837			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 36 08	sbc $0836			sbc 	gxTotal
.cb0d	ab0d	8d 34 08	sta $0834			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 32 08	lda $0832			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 37 08	lda $0837			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 37 08	lda $0837			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 33 08	lda $0833			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 93 07	lda $0793			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 94 07	dec $0794			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 93 07	dec $0793			dec 	gxX0
.cb3e	ab3e	ce a5 07	dec $07a5			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a5 07	lda $07a5			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 93 07	inc $0793			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 94 07	inc $0794			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a5 07	inc $07a5			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 95 07	inc $0795			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 99 07	lda $0799			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 95 07	sbc $0795			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 31 08	sta $0831			sta 	gxDiffY
.cb86	ab86	9c 33 08	stz $0833			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 97 07	lda $0797			lda 	gxX1
.cb8d	ab8d	ed 93 07	sbc $0793			sbc 	gxX0
.cb90	ab90	8d 30 08	sta $0830			sta 	gxDiffX
.cb93	ab93	ad 98 07	lda $0798			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 94 07	sbc $0794			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 30 08	ror $0830			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 30 08	sbc $0830			sbc 	gxDiffX
.cba6	aba6	8d 30 08	sta $0830			sta 	gxDiffX
.cba9	aba9	ce 33 08	dec $0833			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 32 08	stz $0832			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 31 08	lda $0831			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 35 08	sta $0835			sta 	gxAdjust
.cbb5	abb5	ad 30 08	lda $0830			lda 	gxDiffX
.cbb8	abb8	8d 36 08	sta $0836			sta 	gxTotal
.cbbb	abbb	ad 31 08	lda $0831			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 30 08	cmp $0830			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 32 08	dec $0832			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 30 08	lda $0830			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 35 08	sta $0835			sta 	gxAdjust
.cbcc	abcc	ad 31 08	lda $0831			lda 	gxDiffY
.cbcf	abcf	8d 36 08	sta $0836			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 36 08	lda $0836			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 34 08	sta $0834			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.0830						gxDiffX:
>0830								.fill 	1
.0831						gxDiffY:
>0831								.fill 	1
.0832						gxIsDiffYLarger:
>0832								.fill 	1
.0833						gxDXNegative:
>0833								.fill 	1
.0834						gxPosition:
>0834								.fill 	1
.0835						gxAdjust:
>0835								.fill 	1
.0836						gxTotal:
>0836								.fill 	1
.0837						gxAddSelect:
>0837								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e a1 07	stx $07a1			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d a0 07	sta $07a0			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a3 07	stz $07a3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae a1 07	ldx $07a1			ldx 	gxColour
.cbec	abec	8e a2 07	stx $07a2			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a3 07	stx $07a3			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a2 07	stz $07a2			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a3 07	lda $07a3			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a3 07	sta $07a3			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a5 07	ldy $07a5			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a3 07	and $07a3			and 	gxANDValue
.cc16	ac16	4d a2 07	eor $07a2			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9c 07	lda $079c			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 95 07	lda $0795			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 99 07	cmp $0799			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 95 07	inc $0795			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 95 07	lda $0795			lda 	gxY0 						; reached last line
.cc48	ac48	cd 99 07	cmp $0799			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 97 07	lda $0797			lda		gxX1
.cc65	ac65	ed 93 07	sbc $0793			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 98 07	lda $0798			lda 	gxX1+1
.cc6d	ac6d	ed 94 07	sbc $0794			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a5 07	lda $07a5			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a5 07	ldy $07a5			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a3 07	and $07a3			and 	gxANDValue
.cc8a	ac8a	4d a2 07	eor $07a2			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a3 07	and $07a3			and 	gxANDValue
.cca8	aca8	4d a2 07	eor $07a2			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a3 07	and $07a3			and 	gxANDValue
.ccc0	acc0	4d a2 07	eor $07a2			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a5 07	sta $07a5			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 38 08	sta $0838			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 39 08	sta $0839			sta 	gxMask 						; and mask
.cce7	ace7	ad 9c 07	lda $079c			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 95 07	lda $0795			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 3b 08	sty $083b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 3a 08	stx $083a			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3d 08	lda $083d			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3c 08	sta $083c			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3d 08	bit $083d			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 39 08	lda $0839			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3c 08	lda $083c			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 95 07	lda $0795			lda 	gxY0 						; off screen
.cd20	ad20	cd 9f 07	cmp $079f			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 38 08	cmp $0838			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 95 07	sta $0795			sta 	gxY0
.cd39	ad39	ae 3c 08	ldx $083c			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 38 08	lda $0838			lda 	gxSize
.cd40	ad40	6d 93 07	adc $0793			adc 	gxX0
.cd43	ad43	8d 93 07	sta $0793			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 94 07	inc $0794			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 3a 08	jmp ($083a)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a5 07	ldy $07a5			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3c 08	lda $083c			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c a0 07	bit $07a0			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 39 08	lda $0839			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3d 08	lda $083d			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a3 07	and $07a3			and 	gxANDValue
.cd84	ad84	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 38 08	cmp $0838			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 95 07	inc $0795			inc 	gxY0
.cda1	ada1	60		rts				rts
.0838						gxSize:
>0838								.fill 	1
.0839						gxMask:
>0839								.fill 	1
.083a						gxAcquireVector:
>083a								.fill 	2
.083c						gxScale:
>083c								.fill 	1
.083d						gxUseMode:
>083d								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d a0 07	eor $07a0			eor 	gxMode
.cda7	ada7	8d 3d 08	sta $083d			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad a1 07	lda $07a1			lda 	gxColour
.cde0	ade0	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 9b 07	lda $079b			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d a0 07	eor $07a0			eor 	gxMode
.cdf4	adf4	8d 3d 08	sta $083d			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3e 08	lda $083e			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9e 07	lda $079e			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3f 08	ldx $083f			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 41 08	adc $0841			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 42 08	adc $0842			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3e 08	cpy $083e			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 9b 07	lda $079b			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a6 07	sta $07a6			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a8 07	sta $07a8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a7 07	sta $07a7			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 9b 07	lda $079b			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 41 08	lda $0841			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 42 08	lda $0842			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a9 07	adc $07a9			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad aa 07	lda $07aa			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3f 08	lda $083f			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 40 08	ora $0840			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3f 08	lda $083f			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d eb 07	ora $07eb,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 9b 07	lda $079b			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a7 07	lda $07a7			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 93 07	adc $0793			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 94 07	lda $0794			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 95 07	adc $0795			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 94 07	lsr $0794			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 93 07	ror $0793			ror 	gxX0
.cf60	af60	4e 93 07	lsr $0793			lsr 	gxX0
.cf63	af63	4e 95 07	lsr $0795			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 95 07	lsr $0795			lsr 	gxY0
.cf69	af69	ae a6 07	ldx $07a6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd ab 07	lda $07ab,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 93 07	ora $0793			ora 	gxX0
.cf74	af74	9d ab 07	sta $07ab,x			sta 	gxSpriteLow,x
.cf77	af77	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 95 07	ora $0795			ora 	gxY0
.cf7f	af7f	9d eb 07	sta $07eb,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a4 07	sta $07a4			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a4 07	lda $07a4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 95 07	lda $0795			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 93 07	lda $0793			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a5 07	sta $07a5			sta 	gxOffset
.cfd1	afd1	ad 94 07	lda $0794			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9d 07	adc $079d			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a5 07	lda $07a5			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a5 07	sta $07a5			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 ab 07	lda $07ab,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d ab 07	ora $07ab,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 eb 07	lda $07eb,y			lda 	gxSpriteHigh,y
.d023	b023	7d eb 07	adc $07eb,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 eb 07	lda $07eb,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd eb 07	lda $07eb,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 ab 07	lda $07ab,y			lda 	gxSpriteLow,y
.d051	b051	fd ab 07	sbc $07ab,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9e 07	lda $079e			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 42 08	sta $0842			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3f 08	sta $083f			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3e 08	sta $083e			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 40 08	sta $0840			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 41 08	sta $0841			sta 	gxSpriteOffset
.d09e	b09e	0e 41 08	asl $0841			asl 	gxSpriteOffset
.d0a1	b0a1	2e 42 08	rol $0842			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 41 08	asl $0841			asl 	gxSpriteOffset
.d0a7	b0a7	2e 42 08	rol $0842			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083e						gxSizePixels:
>083e								.fill 	1
.083f						gxSizeBits:
>083f								.fill 	1
.0840						gxSpriteLUT:
>0840								.fill 	1
.0841						gxSpriteOffset:
>0841								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 93 07	lda $0793			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 97 07	cmp $0797			cmp 	gxX1
.d0bb	b0bb	ad 94 07	lda $0794			lda 	gxX0+1
.d0be	b0be	ed 98 07	sbc $0798			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 95 07	lda $0795			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 99 07	cmp $0799			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 93 07	lda $0793,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 93 07	lda $0793,y			lda 	gxX0,y
.d0eb	b0eb	9d 93 07	sta $0793,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 93 07	sta $0793,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d179	b179	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d180	b180	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d187	b187	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d18f	b18f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d195	b195	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d19b	b19b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d1a2	b1a2	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d1a8	b1a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d1ae	b1ae	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d1b5	b1b5	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d1bd	b1bd	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1c5	b1c5	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1cd	b1cd	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1d5	b1d5	47 28
>d1d7	b1d7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1df	b1df	28
>d1e0	b1e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1e8	b1e8	28
>d1e9	b1e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1ef	b1ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1f5	b1f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1fb	b1fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d202	b202	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d20a	b20a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d210	b210	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d216	b216	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d21b	b21b	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d21f	b21f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d225	b225	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d22d	b22d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d234	b234	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d23b	b23b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d243	b243	43
>d244	b244	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d24a	b24a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d250	b250	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d257	b257	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d25d	b25d	02 9b 42 59				.text	2,$9b,"BY"             ; $b5 BY
>d261	b261	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b6 CALL
>d267	b267	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b7 CIRCLE
>d26f	b26f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b8 CLEAR
>d276	b276	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b9 COLOR
>d27d	b27d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ba COLOUR
>d285	b285	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bb DATA
>d28b	b28b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bc DIM
>d290	b290	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bd DOWNTO
>d298	b298	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $be ELSE
>d29e	b29e	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bf FROM
>d2a4	b2a4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c0 GFX
>d2a9	b2a9	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d2af	b2af	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d2b6	b2b6	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d2bb	b2bb	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d2c1	b2c1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d2c8	b2c8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d2cd	b2cd	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d2d1	b2d1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2d9	b2d9	45
>d2da	b2da	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2e2	b2e2	45
>d2e3	b2e3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2e9	b2e9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2ef	b2ef	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2f6	b2f6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2fd	b2fd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d304	b304	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $cf READ
>d30a	b30a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d0 RECT
>d310	b310	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d1 REM
>d315	b315	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d2 SOLID
>d31c	b31c	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d3 SOUND
>d323	b323	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d4 SPRITE
>d32b	b32b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d5 TEXT
>d331	b331	02 a3 54 4f				.text	2,$a3,"TO"             ; $d6 TO
>d335	b335	ff					.text	$FF
.d336	b336					KeywordSet1:
>d336	b336	00 65					.text	0,$65,""               ; $80 !0:EOF
>d338	b338	00 58					.text	0,$58,""               ; $81 !1:SH1
>d33a	b33a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d33c	b33c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d344	b344	4c 45
>d346	b346	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d34e	b34e	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d356	b356	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d35d	b35d	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d364	b364	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d369	b369	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d371	b371	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d376	b376	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d37d	b37d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d382	b382	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d38a	b38a	45
>d38b	b38b	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d38f	b38f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d396	b396	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d39c	b39c	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3a3	b3a3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3aa	b3aa	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3b0	b3b0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3b6	b3b6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3bb	b3bb	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3c1	b3c1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3c8	b3c8	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3d0	b3d0	45
>d3d1	b3d1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3d9	b3d9	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3de	b3de	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3e4	b3e4	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3ec	b3ec	45
>d3ed	b3ed	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d3f5	b3f5	45
>d3f6	b3f6	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d3fd	b3fd	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d405	b405	53
>d406	b406	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d40c	b40c	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d414	b414	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d419	b419	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d420	b420	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d425	b425	ff					.text	$FF
.d426	b426					KeywordSet2:
>d426	b426	00 65					.text	0,$65,""               ; $80 !0:EOF
>d428	b428	00 58					.text	0,$58,""               ; $81 !1:SH1
>d42a	b42a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d42c	b42c	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d431	b431	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d436	b436	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d43b	b43b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d440	b440	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d445	b445	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d44a	b44a	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d44f	b44f	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d454	b454	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d459	b459	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d45e	b45e	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d463	b463	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d468	b468	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d46d	b46d	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d472	b472	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d477	b477	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d47c	b47c	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d481	b481	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d486	b486	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d48b	b48b	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d490	b490	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d495	b495	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d49a	b49a	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d49f	b49f	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4a4	b4a4	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4a9	b4a9	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4ae	b4ae	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4b3	b4b3	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4b8	b4b8	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4bd	b4bd	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4c2	b4c2	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4c7	b4c7	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4cc	b4cc	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4d1	b4d1	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4d6	b4d6	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4db	b4db	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4e0	b4e0	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4e5	b4e5	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4ea	b4ea	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ef	b4ef	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4f4	b4f4	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4f9	b4f9	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4fe	b4fe	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d503	b503	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d508	b508	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d50d	b50d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d512	b512	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d517	b517	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d51c	b51c	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d521	b521	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d526	b526	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d52b	b52b	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d530	b530	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d535	b535	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d53a	b53a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d53f	b53f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d544	b544	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d549	b549	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d54e	b54e	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d553	b553	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d558	b558	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d55d	b55d	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d562	b562	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d567	b567	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d56c	b56c	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d571	b571	ff					.text	$FF
.d572	b572					Export_TKListConvertLine:
.d572	b572	48		pha				pha 								; save indent on the stack
.d573	b573	9c 1d 04	stz $041d			stz 	tbOffset
.d576	b576	9c 2d 04	stz $042d			stz 	tokenBuffer
.d579	b579	9c 29 04	stz $0429			stz 	currentListColour
.d57c	b57c	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d57e	b57e	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d581	b581	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d583	b583	b1 30		lda ($30),y			lda 	(codePtr),y
.d585	b585	aa		tax				tax
.d586	b586	88		dey				dey
.d587	b587	b1 30		lda ($30),y			lda 	(codePtr),y
.d589	b589	20 6c b7	jsr $b76c			jsr 	LCLWriteNumberXA
.d58c	b58c	68		pla				pla 								; adjustment to indent
.d58d	b58d	48		pha				pha 								; save on stack
.d58e	b58e	10 0c		bpl $b59c			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d590	b590	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d591	b591	6d 26 04	adc $0426			adc 	listIndent
.d594	b594	8d 26 04	sta $0426			sta 	listIndent
.d597	b597	10 03		bpl $b59c			bpl 	_LCNoAdjust
.d599	b599	9c 26 04	stz $0426			stz 	listIndent
.d59c	b59c					_LCNoAdjust:
.d59c	b59c	18		clc				clc		 							; work out actual indent.
.d59d	b59d	ad 26 04	lda $0426			lda 	listIndent
.d5a0	b5a0	0a		asl a				asl 	a
.d5a1	b5a1	69 07		adc #$07			adc 	#7
.d5a3	b5a3	85 36		sta $36				sta 	zTemp0
.d5a5	b5a5					_LCPadOut:
.d5a5	b5a5	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5a7	b5a7	20 04 b7	jsr $b704			jsr 	LCLWrite
.d5aa	b5aa	ad 1d 04	lda $041d			lda 	tbOffset
.d5ad	b5ad	c5 36		cmp $36				cmp 	zTemp0
.d5af	b5af	d0 f4		bne $b5a5			bne 	_LCPadOut
.d5b1	b5b1	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5b3	b5b3					_LCMainLoop:
.d5b3	b5b3	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5b5	b5b5	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d5b8	b5b8	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ba	b5ba	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5bc	b5bc	f0 17		beq $b5d5			beq 	_LCExit
.d5be	b5be	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5c0	b5c0	90 1e		bcc $b5e0			bcc 	_LCDoubles
.d5c2	b5c2	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5c4	b5c4	90 2a		bcc $b5f0			bcc 	_LCShiftPunc
.d5c6	b5c6	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5c8	b5c8	90 35		bcc $b5ff			bcc 	_LCPunctuation
.d5ca	b5ca	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5cc	b5cc	90 51		bcc $b61f			bcc 	_LCIdentifiers
.d5ce	b5ce	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5d0	b5d0	90 73		bcc $b645			bcc 	_LCTokens
.d5d2	b5d2	4c a5 b6	jmp $b6a5			jmp 	_LCData 					; 254-5 are data objects
.d5d5	b5d5					_LCExit:
.d5d5	b5d5	68		pla				pla 								; get old indent adjust
.d5d6	b5d6	30 07		bmi $b5df			bmi 	_LCExit2
.d5d8	b5d8	18		clc				clc 								; add to indent if +ve
.d5d9	b5d9	6d 26 04	adc $0426			adc 	listIndent
.d5dc	b5dc	8d 26 04	sta $0426			sta 	listIndent
.d5df	b5df					_LCExit2:
.d5df	b5df	60		rts				rts
.d5e0	b5e0					_LCDoubles:
.d5e0	b5e0	48		pha				pha
.d5e1	b5e1	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5e2	b5e2	29 02		and #$02			and 	#2
.d5e4	b5e4	09 3c		ora #$3c			ora 	#60 						; make < >
.d5e6	b5e6	20 04 b7	jsr $b704			jsr 	LCLWrite
.d5e9	b5e9	68		pla				pla 								; restore, do lower bit
.d5ea	b5ea	29 03		and #$03			and 	#3
.d5ec	b5ec	09 3c		ora #$3c			ora 	#60
.d5ee	b5ee	80 0f		bra $b5ff			bra		_LCPunctuation 				; print, increment, loop
.d5f0	b5f0					_LCShiftPunc:
.d5f0	b5f0	aa		tax				tax 								; save in X
.d5f1	b5f1	29 07		and #$07			and 	#7 							; lower 3 bits
.d5f3	b5f3	f0 02		beq $b5f7			beq 	_LCNoAdd
.d5f5	b5f5	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5f7	b5f7					_LCNoAdd:
.d5f7	b5f7	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5f9	b5f9	90 02		bcc $b5fd			bcc 	_LCNoAdd2
.d5fb	b5fb	09 20		ora #$20			ora 	#32 						; adds $20
.d5fd	b5fd					_LCNoAdd2:
.d5fd	b5fd	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5ff	b5ff					_LCPunctuation:
.d5ff	b5ff	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d601	b601	d0 03		bne $b606			bne 	_LCPContinue
.d603	b603	20 1a b7	jsr $b71a			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d606	b606					_LCPContinue:
.d606	b606	c9 2e		cmp #$2e			cmp 	#'.'
.d608	b608	f0 08		beq $b612			beq 	_LCPIsConstant
.d60a	b60a	c9 30		cmp #$30			cmp 	#'0'
.d60c	b60c	90 0b		bcc $b619			bcc 	_LCPNotConstant
.d60e	b60e	c9 3a		cmp #$3a			cmp 	#'9'+1
.d610	b610	b0 07		bcs $b619			bcs 	_LCPNotConstant
.d612	b612					_LCPIsConstant:
.d612	b612	48		pha				pha
.d613	b613	a9 87		lda #$87			lda 	#CLIConstant+$80
.d615	b615	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d618	b618	68		pla				pla
.d619	b619					_LCPNotConstant:
.d619	b619	c8		iny				iny 								; consume character
.d61a	b61a	20 04 b7	jsr $b704			jsr 	LCLWrite 					; write it out.
.d61d	b61d	80 94		bra $b5b3			bra 	_LCMainLoop 				; go round again.
.d61f	b61f					_LCIdentifiers:
.d61f	b61f	18		clc				clc 								; convert to physical address
.d620	b620	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d622	b622	85 37		sta $37				sta 	zTemp0+1
.d624	b624	c8		iny				iny
.d625	b625	b1 30		lda ($30),y			lda 	(codePtr),y
.d627	b627	85 36		sta $36				sta 	zTemp0
.d629	b629	c8		iny				iny
.d62a	b62a	5a		phy				phy 								; save position
.d62b	b62b	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d62d	b62d	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d630	b630	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d632	b632					_LCOutIdentifier:
.d632	b632	c8		iny				iny
.d633	b633	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d635	b635	29 7f		and #$7f			and 	#$7F
.d637	b637	20 56 b7	jsr $b756			jsr 	LCLLowerCase
.d63a	b63a	20 04 b7	jsr $b704			jsr 	LCLWrite
.d63d	b63d	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d63f	b63f	10 f1		bpl $b632			bpl 	_LCOutIdentifier
.d641	b641	7a		ply				ply 								; restore position
.d642	b642	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop
.d645	b645					_LCTokens:
.d645	b645	aa		tax				tax 								; token in X
.d646	b646	a9 26		lda #$26			lda 	#((KeywordSet2) & $FF)
.d648	b648	85 36		sta $36				sta 	0+zTemp0
.d64a	b64a	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d64c	b64c	85 37		sta $37				sta 	1+zTemp0
.d64e	b64e	e0 82		cpx #$82			cpx 	#$82
.d650	b650	f0 16		beq $b668			beq 	_LCUseShift
.d652	b652	a9 36		lda #$36			lda 	#((KeywordSet1) & $FF)
.d654	b654	85 36		sta $36				sta 	0+zTemp0
.d656	b656	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d658	b658	85 37		sta $37				sta 	1+zTemp0
.d65a	b65a	e0 81		cpx #$81			cpx 	#$81
.d65c	b65c	f0 0a		beq $b668			beq 	_LCUseShift
.d65e	b65e	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d660	b660	85 36		sta $36				sta 	0+zTemp0
.d662	b662	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d664	b664	85 37		sta $37				sta 	1+zTemp0
.d666	b666	80 01		bra $b669			bra 	_LCNoShift
.d668	b668					_LCUseShift:
.d668	b668	c8		iny				iny
.d669	b669					_LCNoShift:
.d669	b669	20 2e b7	jsr $b72e			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d66c	b66c	b1 30		lda ($30),y			lda 	(codePtr),y
.d66e	b66e	aa		tax				tax 								; into X
.d66f	b66f					_LCFindText:
.d66f	b66f	ca		dex				dex
.d670	b670	10 0e		bpl $b680			bpl 	_LCFoundText 				; found text.
.d672	b672	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d674	b674	1a		inc a				inc 	a 							; one extra for size
.d675	b675	38		sec				sec 								; one extra for checksum
.d676	b676	65 36		adc $36				adc 	zTemp0 						; go to next token
.d678	b678	85 36		sta $36				sta 	zTemp0
.d67a	b67a	90 f3		bcc $b66f			bcc 	_LCFindText
.d67c	b67c	e6 37		inc $37				inc 	zTemp0+1
.d67e	b67e	80 ef		bra $b66f			bra 	_LCFindText
.d680	b680					_LCFoundText:
.d680	b680	5a		phy				phy 								; save List position
.d681	b681	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d683	b683	aa		tax				tax
.d684	b684	a9 86		lda #$86			lda 	#CLIToken+$80
.d686	b686	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d689	b689	a0 02		ldy #$02			ldy 	#2
.d68b	b68b					_LCCopyToken:
.d68b	b68b	b1 36		lda ($36),y			lda 	(zTemp0),y
.d68d	b68d	20 56 b7	jsr $b756			jsr 	LCLLowerCase
.d690	b690	20 04 b7	jsr $b704			jsr 	LCLWrite
.d693	b693	c8		iny				iny
.d694	b694	ca		dex				dex
.d695	b695	d0 f4		bne $b68b			bne 	_LCCopyToken
.d697	b697	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d699	b699	f0 05		beq $b6a0			beq 	_LCNoSpace
.d69b	b69b	a9 20		lda #$20			lda 	#' '
.d69d	b69d	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6a0	b6a0					_LCNoSpace:
.d6a0	b6a0	7a		ply				ply 								; restore position.
.d6a1	b6a1	c8		iny				iny 								; consume token
.d6a2	b6a2	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop 				; and go around again.
.d6a5	b6a5					_LCData:
.d6a5	b6a5	48		pha				pha 								; save type $FE/$FF
.d6a6	b6a6	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6a8	b6a8	c9 fe		cmp #$fe			cmp 	#$FE
.d6aa	b6aa	f0 22		beq $b6ce			beq 	_LCHaveOpener
.d6ac	b6ac	a2 22		ldx #$22			ldx 	#'"'
.d6ae	b6ae	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6b0	b6b0	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d6b3	b6b3	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6b5	b6b5	d0 17		bne $b6ce			bne 	_LCHaveOpener
.d6b7	b6b7	88		dey				dey 								; what precedes it ?
.d6b8	b6b8	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ba	b6ba	c8		iny				iny
.d6bb	b6bb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6bd	b6bd	d0 0f		bne $b6ce			bne 	_LCHaveOpener
.d6bf	b6bf	a9 09		lda #$09			lda 	#9 							; tab
.d6c1	b6c1	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6c4	b6c4	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6c6	b6c6	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6c9	b6c9	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6cb	b6cb	20 fb b6	jsr $b6fb			jsr 	LCLWriteColour
.d6ce	b6ce					_LCHaveOpener:
.d6ce	b6ce	8a		txa				txa 								; output prefix (# or ")
.d6cf	b6cf	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6d2	b6d2	c8		iny				iny 								; get count
.d6d3	b6d3	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d5	b6d5	aa		tax				tax
.d6d6	b6d6	c8		iny				iny 								; point at first character
.d6d7	b6d7					_LCOutData:
.d6d7	b6d7	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d9	b6d9	c9 00		cmp #$00			cmp 	#0
.d6db	b6db	f0 03		beq $b6e0			beq 	_LCNoPrint
.d6dd	b6dd	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6e0	b6e0					_LCNoPrint:
.d6e0	b6e0	c8		iny				iny
.d6e1	b6e1	ca		dex				dex
.d6e2	b6e2	d0 f3		bne $b6d7			bne 	_LCOutData
.d6e4	b6e4	68		pla				pla 								; closing " required ?
.d6e5	b6e5	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6e7	b6e7	d0 0f		bne $b6f8			bne 	_LCNoQuote
.d6e9	b6e9	a9 22		lda #$22			lda 	#'"'
.d6eb	b6eb	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6ee	b6ee	ad 88 07	lda $0788			lda 	EXTTextColour
.d6f1	b6f1	29 0f		and #$0f			and 	#$0F
.d6f3	b6f3	09 90		ora #$90			ora 	#$90
.d6f5	b6f5	20 04 b7	jsr $b704			jsr 	LCLWrite
.d6f8	b6f8					_LCNoQuote:
.d6f8	b6f8	4c b3 b5	jmp $b5b3			jmp 	_LCMainLoop
.d6fb	b6fb					LCLWriteColour:
.d6fb	b6fb	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6fe	b6fe	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d701	b701	d0 01		bne $b704			bne 	LCLWrite 					; if different, output it
.d703	b703	60		rts				rts
.d704	b704					LCLWrite:
.d704	b704	da		phx				phx
.d705	b705	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d708	b708	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d70b	b70b	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d70e	b70e	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d711	b711	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d713	b713	30 03		bmi $b718			bmi 	_LCLNoColour
.d715	b715	8d 27 04	sta $0427			sta 	lcLastCharacter
.d718	b718					_LCLNoColour:
.d718	b718	fa		plx				plx
.d719	b719	60		rts				rts
.d71a	b71a					LCLDeleteLastSpace:
.d71a	b71a	48		pha				pha
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 1d 04	ldx $041d			ldx 	tbOffset
.d71f	b71f	f0 0a		beq $b72b			beq 	_LCDLSExit
.d721	b721	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d724	b724	c9 20		cmp #$20			cmp 	#' '
.d726	b726	d0 03		bne $b72b			bne 	_LCDLSExit
.d728	b728	ce 1d 04	dec $041d			dec 	tbOffset
.d72b	b72b					_LCDLSExit:
.d72b	b72b	fa		plx				plx
.d72c	b72c	68		pla				pla
.d72d	b72d	60		rts				rts
.d72e	b72e					LCLCheckSpaceRequired:
.d72e	b72e	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d731	b731	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d733	b733	f0 1b		beq $b750			beq 	_LCCSRSpace
.d735	b735	c9 29		cmp #$29			cmp 	#')'
.d737	b737	f0 17		beq $b750			beq 	_LCCSRSpace
.d739	b739	c9 23		cmp #$23			cmp 	#'#'
.d73b	b73b	f0 13		beq $b750			beq 	_LCCSRSpace
.d73d	b73d	20 56 b7	jsr $b756			jsr 	LCLLowerCase 				; saves a little effort
.d740	b740	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d742	b742	90 11		bcc $b755			bcc 	_LCCSRExit
.d744	b744	c9 3a		cmp #$3a			cmp 	#"9"+1
.d746	b746	90 08		bcc $b750			bcc 	_LCCSRSpace
.d748	b748	c9 61		cmp #$61			cmp 	#"a"
.d74a	b74a	90 09		bcc $b755			bcc 	_LCCSRExit
.d74c	b74c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d74e	b74e	b0 05		bcs $b755			bcs 	_LCCSRExit
.d750	b750					_LCCSRSpace:
.d750	b750	a9 20		lda #$20			lda 	#' '
.d752	b752	20 04 b7	jsr $b704			jsr 	LCLWrite
.d755	b755					_LCCSRExit:
.d755	b755	60		rts				rts
.d756	b756					LCLLowerCase:
.d756	b756	c9 41		cmp #$41			cmp 	#"A"
.d758	b758	90 06		bcc $b760			bcc 	_LCLLCOut
.d75a	b75a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d75c	b75c	b0 02		bcs $b760			bcs 	_LCLLCOut
.d75e	b75e	69 20		adc #$20			adc 	#$20
.d760	b760					_LCLLCOut:
.d760	b760	60		rts				rts
.d761	b761					LCLUpperCase:
.d761	b761	c9 61		cmp #$61			cmp 	#"a"
.d763	b763	90 06		bcc $b76b			bcc 	_LCLUCOut
.d765	b765	c9 7b		cmp #$7b			cmp 	#"z"+1
.d767	b767	b0 02		bcs $b76b			bcs 	_LCLUCOut
.d769	b769	e9 1f		sbc #$1f			sbc 	#$1F
.d76b	b76b					_LCLUCOut:
.d76b	b76b	60		rts				rts
.d76c	b76c					LCLWriteNumberXA:
.d76c	b76c	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d76e	b76e					_LCLWNLoop1:
.d76e	b76e	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d770	b770					_LCLWNLoop2:
.d770	b770	48		pha				pha 								; save initial LSB
.d771	b771	38		sec				sec
.d772	b772	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d774	b774	f9 a5 b7	sbc $b7a5,y			sbc 	_LCLWNTable,y
.d777	b777	48		pha				pha
.d778	b778	8a		txa				txa
.d779	b779	f9 a6 b7	sbc $b7a6,y			sbc 	_LCLWNTable+1,y
.d77c	b77c	90 07		bcc $b785			bcc 	_LCLWNUnderflow
.d77e	b77e	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d780	b780	aa		tax				tax 								; update X
.d781	b781	68		pla				pla 								; restore A
.d782	b782	7a		ply				ply 								; throw original
.d783	b783	80 eb		bra $b770			bra 	_LCLWNLoop2 				; try again.
.d785	b785					_LCLWNUnderflow:
.d785	b785	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d787	b787	d0 06		bne $b78f			bne 	_LCLWNOut
.d789	b789	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d78c	b78c	3a		dec a				dec 	a
.d78d	b78d	f0 04		beq $b793			beq 	_LCLWNNext
.d78f	b78f					_LCLWNOut:
.d78f	b78f	98		tya				tya
.d790	b790	20 9f b7	jsr $b79f			jsr 	_LCLWNOutDigit
.d793	b793					_LCLWNNext:
.d793	b793	7a		ply				ply 							 	; restore original value.
.d794	b794	68		pla				pla
.d795	b795	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d797	b797	c8		iny				iny
.d798	b798	c8		iny				iny
.d799	b799	84 37		sty $37				sty 	zTemp0+1
.d79b	b79b	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d79d	b79d	d0 cf		bne $b76e			bne 	_LCLWNLoop1
.d79f	b79f					_LCLWNOutDigit:
.d79f	b79f	09 30		ora #$30			ora 	#'0'
.d7a1	b7a1	20 04 b7	jsr $b704			jsr 	LCLWrite
.d7a4	b7a4	60		rts				rts
.d7a5	b7a5					_LCLWNTable:
>d7a5	b7a5	10 27						.word 	10000
>d7a7	b7a7	e8 03						.word 	1000
>d7a9	b7a9	64 00						.word 	100
>d7ab	b7ab	0a 00						.word 	10
.d7ad	b7ad					TOKSearchTable:
.d7ad	b7ad	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7af	b7af	85 36		sta $36				sta 	zTemp0
.d7b1	b7b1	a0 00		ldy #$00			ldy 	#0
.d7b3	b7b3	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7b5	b7b5	85 38		sta $38				sta 	zTemp1
.d7b7	b7b7					_TSTLoop:
.d7b7	b7b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7b9	b7b9	30 49		bmi $b804			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7bb	b7bb	f0 2e		beq $b7eb			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7bd	b7bd	c8		iny				iny 								; get the hash
.d7be	b7be	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c0	b7c0	88		dey				dey
.d7c1	b7c1	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7c4	b7c4	d0 25		bne $b7eb			bne 	_TSTNext
.d7c6	b7c6	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7c9	b7c9	38		sec				sec
.d7ca	b7ca	ed 00 04	sbc $0400			sbc 	identStart
.d7cd	b7cd	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7cf	b7cf	d0 1a		bne $b7eb			bne 	_TSTNext
.d7d1	b7d1	5a		phy				phy 								; save Y , we might fail to match.
.d7d2	b7d2	c8		iny				iny 								; point to text
.d7d3	b7d3	c8		iny				iny
.d7d4	b7d4	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7d7	b7d7					_TSTCompareName:
.d7d7	b7d7	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d7da	b7da	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7dc	b7dc	d0 0c		bne $b7ea			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7de	b7de	e8		inx				inx
.d7df	b7df	c8		iny				iny
.d7e0	b7e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7e3	b7e3	d0 f2		bne $b7d7			bne 	_TSTCompareName
.d7e5	b7e5	7a		ply				ply 								; throw Y
.d7e6	b7e6	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7e8	b7e8	38		sec				sec 								; return with CS = passed.
.d7e9	b7e9	60		rts				rts
.d7ea	b7ea					_TSTNextPullY:
.d7ea	b7ea	7a		ply				ply 								; restore current, fall through.
.d7eb	b7eb					_TSTNext:
.d7eb	b7eb	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ed	b7ed	98		tya				tya
.d7ee	b7ee	18		clc				clc
.d7ef	b7ef	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7f1	b7f1	1a		inc a				inc 	a 							; +1
.d7f2	b7f2	1a		inc a				inc 	a 							; +2
.d7f3	b7f3	a8		tay				tay
.d7f4	b7f4	10 c1		bpl $b7b7			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7f6	b7f6	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7f7	b7f7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7f9	b7f9	18		clc				clc  								; but have tables > 255 bytes
.d7fa	b7fa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7fc	b7fc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7fe	b7fe	90 b7		bcc $b7b7			bcc 	_TSTLoop
.d800	b800	e6 37		inc $37				inc 	zTemp0+1
.d802	b802	80 b3		bra $b7b7			bra 	_TSTLoop
.d804	b804					_TSTFail:
.d804	b804	18		clc				clc
.d805	b805	60		rts				rts
.d806	b806					Export_TKTokeniseLine:
.d806	b806	20 d3 b9	jsr $b9d3			jsr 	LCLFixLineBufferCase 		; fix line case
.d809	b809	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d80b	b80b	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d80e	b80e	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d811	b811	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d814	b814	a2 ff		ldx #$ff			ldx 	#$FF
.d816	b816					_TKFindFirst:
.d816	b816	e8		inx				inx
.d817	b817	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d81a	b81a	f0 62		beq $b87e			beq 	_TKExit
.d81c	b81c	c9 20		cmp #$20			cmp 	#' '
.d81e	b81e	90 f6		bcc $b816			bcc 	_TKFindFirst
.d820	b820	c9 30		cmp #$30			cmp 	#'0'
.d822	b822	90 07		bcc $b82b			bcc 	_TKNoLineNumber
.d824	b824	c9 3a		cmp #$3a			cmp 	#'9'+1
.d826	b826	b0 03		bcs $b82b			bcs 	_TKNoLineNumber
.d828	b828	20 fd b9	jsr $b9fd			jsr 	TOKExtractLineNumber
.d82b	b82b					_TKNoLineNumber:
.d82b	b82b					_TKTokeniseLoop:
.d82b	b82b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d82e	b82e	f0 4e		beq $b87e			beq 	_TKExit
.d830	b830	e8		inx				inx
.d831	b831	c9 20		cmp #$20			cmp 	#' '
.d833	b833	f0 f6		beq $b82b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d835	b835	ca		dex				dex 								; undo last get, A contains character, X is position.
.d836	b836	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d838	b838	f0 68		beq $b8a2			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d83a	b83a	c9 41		cmp #$41			cmp 	#'A'
.d83c	b83c	90 04		bcc $b842			bcc 	_TKTokenisePunctuation
.d83e	b83e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d840	b840	90 60		bcc $b8a2			bcc 	_TKTokeniseIdentifier
.d842	b842					_TKTokenisePunctuation:
.d842	b842	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d844	b844	f0 2e		beq $b874			beq 	_TKString
.d846	b846	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d848	b848	f0 2f		beq $b879			beq 	_TKHexConstant
.d84a	b84a	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d84c	b84c	f0 36		beq $b884			beq 	_TKCheckDouble
.d84e	b84e	c9 3e		cmp #$3e			cmp 	#'>'
.d850	b850	f0 32		beq $b884			beq 	_TKCheckDouble
.d852	b852					_TKStandardPunctuation:
.d852	b852	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d855	b855	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d857	b857	90 0e		bcc $b867			bcc 	_TKNoShift
.d859	b859	48		pha				pha 								; save. we are about to convert this punctuation token from
.d85a	b85a	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d85c	b85c	85 36		sta $36				sta 	zTemp0
.d85e	b85e	68		pla				pla
.d85f	b85f	29 20		and #$20			and 	#32 						; bit 5
.d861	b861	4a		lsr a				lsr 	a 							; shift into bit 3
.d862	b862	4a		lsr a				lsr 	a
.d863	b863	05 36		ora $36				ora 	zTemp0
.d865	b865	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d867	b867					_TKNoShift:
.d867	b867	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; write the punctuation character
.d86a	b86a	e8		inx				inx 								; consume the character
.d86b	b86b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d86d	b86d	d0 bc		bne $b82b			bne 	_TKTokeniseLoop 			; and loop round again.
.d86f	b86f	20 35 b9	jsr $b935			jsr 	TOKCheckComment 			; comment checl
.d872	b872	80 b7		bra $b82b			bra 	_TKTokeniseLoop
.d874	b874					_TKString:
.d874	b874	20 62 b9	jsr $b962			jsr 	TOKTokenString
.d877	b877	80 b2		bra $b82b			bra 	_TKTokeniseLoop
.d879	b879					_TKHexConstant:
.d879	b879	20 9d b9	jsr $b99d			jsr 	TOKHexConstant
.d87c	b87c	80 ad		bra $b82b			bra 	_TKTokeniseLoop
.d87e	b87e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d880	b880	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d883	b883	60		rts				rts
.d884	b884					_TKCheckDouble:
.d884	b884	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d887	b887	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d889	b889	90 c7		bcc $b852			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d88b	b88b	c9 3f		cmp #$3f			cmp 	#'>'+1
.d88d	b88d	b0 c3		bcs $b852			bcs 	_TKStandardPunctuation
.d88f	b88f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d892	b892	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d894	b894	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d895	b895	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d898	b898	38		sec				sec
.d899	b899	e9 3c		sbc #$3c			sbc 	#'<'
.d89b	b89b	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; this is in the range 0-7
.d89e	b89e	e8		inx				inx 								; consume both
.d89f	b89f	e8		inx				inx
.d8a0	b8a0	80 89		bra $b82b			bra 	_TKTokeniseLoop
.d8a2	b8a2					_TKTokeniseIdentifier:
.d8a2	b8a2	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8a5	b8a5	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8a8	b8a8					_TKCheckLoop:
.d8a8	b8a8	e8		inx				inx 								; look at next, we know first is identifier already.
.d8a9	b8a9	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d8ac	b8ac	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8ae	b8ae	f0 f8		beq $b8a8			beq 	_TKCheckLoop
.d8b0	b8b0	c9 30		cmp #$30			cmp	 	#"0"
.d8b2	b8b2	90 0c		bcc $b8c0			bcc 	_TKEndIdentifier
.d8b4	b8b4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8b6	b8b6	90 f0		bcc $b8a8			bcc 	_TKCheckLoop
.d8b8	b8b8	c9 41		cmp #$41			cmp	 	#"A"
.d8ba	b8ba	90 04		bcc $b8c0			bcc 	_TKEndIdentifier
.d8bc	b8bc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8be	b8be	90 e8		bcc $b8a8			bcc 	_TKCheckLoop
.d8c0	b8c0					_TKEndIdentifier:
.d8c0	b8c0	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8c3	b8c3	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8c5	b8c5	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8c7	b8c7	f0 06		beq $b8cf			beq 	_TKHasTypeCharacter
.d8c9	b8c9	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8cb	b8cb	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8cd	b8cd	d0 07		bne $b8d6			bne 	_TKNoTypeCharacter
.d8cf	b8cf					_TKHasTypeCharacter:
.d8cf	b8cf	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8d2	b8d2	e8		inx				inx 								; consume the type character
.d8d3	b8d3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d8d6	b8d6					_TKNoTypeCharacter:
.d8d6	b8d6	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8d8	b8d8	d0 09		bne $b8e3			bne 	_TKNoArray
.d8da	b8da	e8		inx				inx 								; skip the (
.d8db	b8db	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8de	b8de	09 04		ora #$04			ora 	#$04
.d8e0	b8e0	8d 04 04	sta $0404			sta 	identTypeByte
.d8e3	b8e3					_TKNoArray:
.d8e3	b8e3	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8e6	b8e6	20 be b9	jsr $b9be			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8e9	b8e9	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8eb	b8eb	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d8ed	b8ed	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d8f0	b8f0	a2 00		ldx #$00			ldx 	#0
.d8f2	b8f2	b0 1f		bcs $b913			bcs 	_TKFoundToken
.d8f4	b8f4	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8f6	b8f6	a9 36		lda #$36			lda 	#(KeywordSet1) & $FF
.d8f8	b8f8	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d8fb	b8fb	a2 81		ldx #$81			ldx 	#$81
.d8fd	b8fd	b0 14		bcs $b913			bcs 	_TKFoundToken
.d8ff	b8ff	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d901	b901	a9 26		lda #$26			lda 	#(KeywordSet2) & $FF
.d903	b903	20 ad b7	jsr $b7ad			jsr 	TOKSearchTable
.d906	b906	a2 82		ldx #$82			ldx 	#$82
.d908	b908	b0 09		bcs $b913			bcs 	_TKFoundToken
.d90a	b90a	20 4e ba	jsr $ba4e			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d90d	b90d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d910	b910	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop 			; and go round again.
.d913	b913					_TKFoundToken:
.d913	b913	48		pha				pha 								; save token
.d914	b914	8a		txa				txa 								; shift in X, is there one ?
.d915	b915	f0 03		beq $b91a			beq 	_TKNoTShift
.d917	b917	20 42 ba	jsr $ba42			jsr 	TOKWriteByte 				; if so, write it out
.d91a	b91a					_TKNoTShift:
.d91a	b91a	68		pla				pla 								; restore and write token
.d91b	b91b	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d91e	b91e	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d920	b920	d0 0d		bne $b92f			bne 	_TKNotRem 			 		; not shifted ?
.d922	b922	c9 d1		cmp #$d1			cmp 	#KWD_REM
.d924	b924	d0 09		bne $b92f			bne 	_TKNotRem
.d926	b926	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d929	b929	20 35 b9	jsr $b935			jsr 	TOKCheckComment
.d92c	b92c	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop
.d92f	b92f					_TKNotRem:
.d92f	b92f	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d932	b932	4c 2b b8	jmp $b82b			jmp 	_TKTokeniseLoop 			; and go round again.
.d935	b935					TOKCheckComment:
.d935	b935	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d938	b938	e8		inx				inx
.d939	b939	c9 20		cmp #$20			cmp 	#' '
.d93b	b93b	f0 f8		beq $b935			beq 	TOKCheckComment
.d93d	b93d	ca		dex				dex 								; first non space character
.d93e	b93e	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d940	b940	f0 1f		beq $b961			beq 	_TOKCCExit 					; then we are okay
.d942	b942	c9 00		cmp #$00			cmp 	#0 							; EOL
.d944	b944	f0 1b		beq $b961			beq 	_TOKCCExit 					; then we are okay
.d946	b946	da		phx				phx
.d947	b947					_TOKCCLowerCase:
.d947	b947	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d94a	b94a	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d94c	b94c	90 09		bcc $b957			bcc 	_TOKKCNotUC
.d94e	b94e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d950	b950	b0 05		bcs $b957			bcs 	_TOKKCNotUC
.d952	b952	49 20		eor #$20			eor 	#$20
.d954	b954	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d957	b957					_TOKKCNotUC:
.d957	b957	e8		inx				inx
.d958	b958	c9 00		cmp #$00			cmp 	#0
.d95a	b95a	d0 eb		bne $b947			bne 	_TOKCCLowerCase
.d95c	b95c	fa		plx				plx
.d95d	b95d	ca		dex				dex 								; tokenise string expects initial skip.
.d95e	b95e	20 62 b9	jsr $b962			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d961	b961					_TOKCCExit:
.d961	b961	60		rts				rts
.d962	b962					TOKTokenString:
.d962	b962	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d964	b964	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d967	b967	e8		inx				inx									; start of quoted string.
.d968	b968	da		phx				phx 								; push start of string on top
.d969	b969	ca		dex				dex 								; because we pre-increment
.d96a	b96a					_TSFindEnd:
.d96a	b96a	e8		inx				inx
.d96b	b96b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d96e	b96e	f0 04		beq $b974			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d970	b970	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d972	b972	d0 f6		bne $b96a			bne 	_TSFindEnd
.d974	b974					_TSEndOfString:
.d974	b974	7a		ply				ply  								; so now Y is first character, X is character after end.
.d975	b975	48		pha				pha 								; save terminating character
.d976	b976	20 7e b9	jsr $b97e			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d979	b979	68		pla				pla 								; terminating character
.d97a	b97a	f0 01		beq $b97d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d97c	b97c	e8		inx				inx
.d97d	b97d					_TSNotQuote:
.d97d	b97d	60		rts				rts
.d97e	b97e					TOKWriteBlockXY:
.d97e	b97e	86 36		stx $36				stx 	zTemp0 						; save end character
.d980	b980	98		tya				tya 								; use 2's complement to work out the byte size
.d981	b981	49 ff		eor #$ff			eor 	#$FF
.d983	b983	38		sec				sec
.d984	b984	65 36		adc $36				adc 	zTemp0
.d986	b986	1a		inc a				inc 	a 							; one extra for NULL
.d987	b987	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d98a	b98a					_TOBlockLoop:
.d98a	b98a	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d98c	b98c	f0 09		beq $b997			beq 	_TOBlockExit
.d98e	b98e	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d991	b991	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d994	b994	c8		iny				iny
.d995	b995	80 f3		bra $b98a			bra 	_TOBlockLoop
.d997	b997					_TOBlockExit:
.d997	b997	a9 00		lda #$00			lda 	#0 							; add NULL.
.d999	b999	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d99c	b99c	60		rts				rts
.d99d	b99d					TOKHexConstant:
.d99d	b99d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d99f	b99f	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.d9a2	b9a2	e8		inx				inx									; start of quoted string.
.d9a3	b9a3	da		phx				phx 								; push start of constant on top
.d9a4	b9a4	ca		dex				dex
.d9a5	b9a5					_THFindLoop:
.d9a5	b9a5	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9a6	b9a6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d9a9	b9a9	c9 30		cmp #$30			cmp 	#"0"
.d9ab	b9ab	90 0c		bcc $b9b9			bcc 	_THFoundEnd
.d9ad	b9ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9af	b9af	90 f4		bcc $b9a5			bcc 	_THFindLoop
.d9b1	b9b1	c9 41		cmp #$41			cmp 	#"A"
.d9b3	b9b3	90 04		bcc $b9b9			bcc 	_THFoundEnd
.d9b5	b9b5	c9 47		cmp #$47			cmp 	#"F"+1
.d9b7	b9b7	90 ec		bcc $b9a5			bcc 	_THFindLoop
.d9b9	b9b9					_THFoundEnd:
.d9b9	b9b9	7a		ply				ply 								; restore start
.d9ba	b9ba	20 7e b9	jsr $b97e			jsr 	TOKWriteBlockXY 			; output the block
.d9bd	b9bd	60		rts				rts
.d9be	b9be					TOKCalculateHash:
.d9be	b9be	da		phx				phx
.d9bf	b9bf	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9c2	b9c2	a9 00		lda #$00			lda 	#0
.d9c4	b9c4					_TCHLoop:
.d9c4	b9c4	18		clc				clc
.d9c5	b9c5	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d9c8	b9c8	e8		inx				inx
.d9c9	b9c9	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9cc	b9cc	d0 f6		bne $b9c4			bne 	_TCHLoop
.d9ce	b9ce	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9d1	b9d1	fa		plx				plx
.d9d2	b9d2	60		rts				rts
.d9d3	b9d3					LCLFixLineBufferCase:
.d9d3	b9d3	a2 00		ldx #$00			ldx 	#0
.d9d5	b9d5					_FLBCLoop:
.d9d5	b9d5	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d9d8	b9d8	f0 22		beq $b9fc			beq 	_FLBCExit 					; end of string.
.d9da	b9da	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9dc	b9dc	f0 11		beq $b9ef			beq 	_FLBCInQuotes
.d9de	b9de	e8		inx				inx
.d9df	b9df	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9e1	b9e1	90 f2		bcc $b9d5			bcc 	_FLBCLoop
.d9e3	b9e3	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9e5	b9e5	b0 ee		bcs $b9d5			bcs 	_FLBCLoop
.d9e7	b9e7	38		sec				sec 								; make U/C
.d9e8	b9e8	e9 20		sbc #$20			sbc 	#32
.d9ea	b9ea	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ed	b9ed	80 e6		bra $b9d5			bra 	_FLBCLoop
.d9ef	b9ef					_FLBCInQuotes:
.d9ef	b9ef	e8		inx				inx 								; advance
.d9f0	b9f0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9f3	b9f3	f0 07		beq $b9fc			beq 	_FLBCExit 					; exit on EOS
.d9f5	b9f5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9f7	b9f7	d0 f6		bne $b9ef			bne 	_FLBCInQuotes
.d9f9	b9f9	e8		inx				inx 								; skip over it
.d9fa	b9fa	80 d9		bra $b9d5			bra 	_FLBCLoop
.d9fc	b9fc					_FLBCExit:
.d9fc	b9fc	60		rts				rts
.d9fd	b9fd					TOKExtractLineNumber:
.d9fd	b9fd	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.da00	ba00	48		pha				pha
.da01	ba01	ad 2b 04	lda $042b			lda 	tokenLineNumber
.da04	ba04	48		pha				pha
.da05	ba05	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 2
.da08	ba08	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 4
.da0b	ba0b	18		clc				clc 								; add stacked value
.da0c	ba0c	68		pla				pla
.da0d	ba0d	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da10	ba10	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da13	ba13	68		pla				pla
.da14	ba14	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.da17	ba17	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.da1a	ba1a	20 3b ba	jsr $ba3b			jsr 	_LCLNTimes2 				; line # x 10
.da1d	ba1d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.da20	ba20	e8		inx				inx
.da21	ba21	29 0f		and #$0f			and 	#15 						; add to line #
.da23	ba23	18		clc				clc
.da24	ba24	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da27	ba27	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da2a	ba2a	90 03		bcc $ba2f			bcc 	_TLENNoCarry
.da2c	ba2c	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.da2f	ba2f					_TLENNoCarry:
.da2f	ba2f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.da32	ba32	c9 30		cmp #$30			cmp 	#'0'
.da34	ba34	90 04		bcc $ba3a			bcc 	_TLENExit
.da36	ba36	c9 3a		cmp #$3a			cmp 	#'9'+1
.da38	ba38	90 c3		bcc $b9fd			bcc 	TOKExtractLineNumber
.da3a	ba3a					_TLENExit:
.da3a	ba3a	60		rts				rts
.da3b	ba3b					_LCLNTimes2:
.da3b	ba3b	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da3e	ba3e	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da41	ba41	60		rts				rts
.da42	ba42					TOKWriteByte:
.da42	ba42	da		phx				phx
.da43	ba43	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da46	ba46	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da49	ba49	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da4c	ba4c	fa		plx				plx
.da4d	ba4d	60		rts				rts
.da4e	ba4e					TOKCheckCreateVariableRecord:
.da4e	ba4e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da50	ba50	85 36		sta $36				sta 	0+zTemp0
.da52	ba52	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da54	ba54	85 37		sta $37				sta 	1+zTemp0
.da56	ba56					_CCVSearch:
.da56	ba56	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da58	ba58	f0 2c		beq $ba86			beq 	_CCVFail
.da5a	ba5a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da5c	ba5c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da5e	ba5e	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da61	ba61	d0 16		bne $ba79			bne 	_CCVNext
.da63	ba63	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da65	ba65	ae 00 04	ldx $0400			ldx 	identStart
.da68	ba68					_CCVCompare:
.da68	ba68	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da6b	ba6b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da6d	ba6d	e8		inx				inx 								; advance pointers
.da6e	ba6e	c8		iny				iny
.da6f	ba6f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da70	ba70	d0 07		bne $ba79			bne 	_CCVNext  					; didn't match go to next.
.da72	ba72	90 f4		bcc $ba68			bcc 	_CCVCompare 				; not finished yet.
.da74	ba74	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da77	ba77	f0 41		beq $baba			beq 	_CCVFound 					; yes, we were successful
.da79	ba79					_CCVNext:
.da79	ba79	18		clc				clc 								; go to next record.
.da7a	ba7a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da7c	ba7c	65 36		adc $36				adc 	zTemp0
.da7e	ba7e	85 36		sta $36				sta 	zTemp0
.da80	ba80	90 d4		bcc $ba56			bcc 	_CCVSearch
.da82	ba82	e6 37		inc $37				inc 	zTemp0+1
.da84	ba84	80 d0		bra $ba56			bra 	_CCVSearch
.da86	ba86					_CCVFail:
.da86	ba86	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da88	ba88	ad 03 04	lda $0403			lda 	identHash
.da8b	ba8b	91 36		sta ($36),y			sta 	(zTemp0),y
.da8d	ba8d	c8		iny				iny 								; offset 2 is the type byte
.da8e	ba8e	ad 04 04	lda $0404			lda 	identTypeByte
.da91	ba91	91 36		sta ($36),y			sta 	(zTemp0),y
.da93	ba93	c8		iny				iny
.da94	ba94					_CCVData:
.da94	ba94	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da96	ba96	91 36		sta ($36),y			sta 	(zTemp0),y
.da98	ba98	c8		iny				iny
.da99	ba99	c0 08		cpy #$08			cpy 	#8
.da9b	ba9b	90 f7		bcc $ba94			bcc 	_CCVData
.da9d	ba9d	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daa0	baa0					_CCVCopyName:
.daa0	baa0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.daa3	baa3	91 36		sta ($36),y			sta 	(zTemp0),y
.daa5	baa5	e8		inx				inx
.daa6	baa6	c8		iny				iny
.daa7	baa7	ec 02 04	cpx $0402			cpx 	identTypeEnd
.daaa	baaa	d0 f4		bne $baa0			bne 	_CCVCopyName
.daac	baac	98		tya				tya 								; patch offset
.daad	baad	92 36		sta ($36)			sta 	(zTemp0)
.daaf	baaf	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dab1	bab1	91 36		sta ($36),y			sta 	(zTemp0),y
.dab3	bab3	88		dey				dey
.dab4	bab4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dab6	bab6	09 80		ora #$80			ora 	#$80
.dab8	bab8	91 36		sta ($36),y			sta 	(zTemp0),y
.daba	baba					_CCVFound:
.daba	baba	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dabc	babc	38		sec				sec
.dabd	babd	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dabf	babf	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dac1	bac1	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.dac4	bac4	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dac6	bac6	20 42 ba	jsr $ba42			jsr 	TOKWriteByte
.dac9	bac9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daca	baca					SNDCheckChannel:
.daca	baca	aa		tax				tax
.dacb	bacb	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dace	bace	d0 38		bne $bb08			bne 	_SNDCCExit
.dad0	bad0	da		phx				phx 								; save current channel
.dad1	bad1	8a		txa				txa 								; put in A
.dad2	bad2	20 4e bb	jsr $bb4e			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dad5	bad5	68		pla				pla 								; channel # in A
.dad6	bad6	90 30		bcc $bb08			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dad8	bad8	a8		tay				tay 								; Y is the channel #
.dad9	bad9	bd 46 08	lda $0846,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dadc	badc	99 45 09	sta $0945,y			sta 	SNDPitchLow,y
.dadf	badf	bd 47 08	lda $0847,x			lda 	SNDQueue+2,x
.dae2	bae2	99 49 09	sta $0949,y			sta 	SNDPitchHigh,y
.dae5	bae5	bd 48 08	lda $0848,x			lda 	SNDQueue+3,x
.dae8	bae8	99 4d 09	sta $094d,y			sta 	SNDVolume,y
.daeb	baeb	bd 49 08	lda $0849,x			lda 	SNDQueue+4,x
.daee	baee	99 51 09	sta $0951,y			sta 	SNDTimeLeft,y
.daf1	baf1	bd 4a 08	lda $084a,x			lda 	SNDQueue+5,x
.daf4	baf4	99 55 09	sta $0955,y			sta 	SNDAdjustLow,y
.daf7	baf7	bd 4b 08	lda $084b,x			lda 	SNDQueue+6,x
.dafa	bafa	99 59 09	sta $0959,y			sta 	SNDAdjustHigh,y
.dafd	bafd	5a		phy				phy 								; save channel #
.dafe	bafe	20 68 bb	jsr $bb68			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db01	bb01	ce 44 08	dec $0844			dec 	SNDLength 					; reduce the queue length.
.db04	bb04	68		pla				pla
.db05	bb05	20 09 bb	jsr $bb09			jsr 	SNDUpdateNote 				; update channel A
.db08	bb08					_SNDCCExit:
.db08	bb08	60		rts				rts
.db09	bb09					SNDUpdateNote:
.db09	bb09	aa		tax				tax 								; so we can access records
.db0a	bb0a	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db0b	bb0b	0a		asl a				asl 	a
.db0c	bb0c	0a		asl a				asl 	a
.db0d	bb0d	0a		asl a				asl 	a
.db0e	bb0e	0a		asl a				asl 	a
.db0f	bb0f	8d 43 08	sta $0843			sta 	SNDChannelBits
.db12	bb12	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; are we silent
.db15	bb15	f0 2e		beq $bb45			beq 	_SNDUNIsSilent
.db17	bb17	ad 43 08	lda $0843			lda 	SNDChannelBits 				; push channel bits on stack
.db1a	bb1a	48		pha				pha
.db1b	bb1b	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db1e	bb1e	29 0f		and #$0f			and 	#$0F
.db20	bb20	0d 43 08	ora $0843			ora 	SNDChannelBits 				; set channel bits
.db23	bb23	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db25	bb25	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.db28	bb28	bd 49 09	lda $0949,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db2b	bb2b	8d 43 08	sta $0843			sta 	SNDChannelBits
.db2e	bb2e	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x
.db31	bb31	4e 43 08	lsr $0843			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db34	bb34	6a		ror a				ror 	a
.db35	bb35	4e 43 08	lsr $0843			lsr 	SNDChannelBits
.db38	bb38	6a		ror a				ror 	a
.db39	bb39	4a		lsr a				lsr 	a 							; put in bits 0-5
.db3a	bb3a	4a		lsr a				lsr 	a
.db3b	bb3b	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts 				; write as rest of pitch register
.db3e	bb3e	68		pla				pla
.db3f	bb3f	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db41	bb41	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.db44	bb44	60		rts				rts
.db45	bb45					_SNDUNIsSilent:
.db45	bb45	ad 43 08	lda $0843			lda 	SNDChannelBits 				; channel bits
.db48	bb48	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db4a	bb4a	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts 				; write to the ports
.db4d	bb4d	60		rts				rts
.db4e	bb4e					SNDFindNextNoteForA:
.db4e	bb4e	ac 44 08	ldy $0844			ldy 	SNDLength 					; queue size into Y
.db51	bb51	f0 13		beq $bb66			beq 	_SNDFNNFail 				; queue empty.
.db53	bb53	a2 00		ldx #$00			ldx 	#0
.db55	bb55					_SNDFNNSearch:
.db55	bb55	dd 45 08	cmp $0845,x			cmp 	SNDQueue,x 					; does it match the channel
.db58	bb58	38		sec				sec
.db59	bb59	f0 0c		beq $bb67			beq 	_SNDFNNExit 				; if so exit with CS.
.db5b	bb5b	e8		inx				inx 								; next queue slot.
.db5c	bb5c	e8		inx				inx
.db5d	bb5d	e8		inx				inx
.db5e	bb5e	e8		inx				inx
.db5f	bb5f	e8		inx				inx
.db60	bb60	e8		inx				inx
.db61	bb61	e8		inx				inx
.db62	bb62	e8		inx				inx
.db63	bb63	88		dey				dey 								; done the whole queue
.db64	bb64	d0 ef		bne $bb55			bne 	_SNDFNNSearch 				; no, go back.
.db66	bb66					_SNDFNNFail:
.db66	bb66	18		clc				clc
.db67	bb67					_SNDFNNExit:
.db67	bb67	60		rts				rts
.db68	bb68					SNDDeleteXFromQueue:
.db68	bb68	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db6a	bb6a	f0 09		beq $bb75			beq 	_SNDDXExit
.db6c	bb6c	bd 4d 08	lda $084d,x			lda 	SNDQueue+8,x
.db6f	bb6f	9d 45 08	sta $0845,x			sta 	SNDQueue,x
.db72	bb72	e8		inx				inx
.db73	bb73	80 f3		bra $bb68			bra 	SNDDeleteXFromQueue
.db75	bb75					_SNDDXExit:
.db75	bb75	60		rts				rts
.0843						SNDChannelBits:
>0843								.fill 	1
.db76	bb76					SNDQueueRequest:
.db76	bb76	86 36		stx $36				stx 	zTemp0						; save queue address
.db78	bb78	84 37		sty $37				sty 	zTemp0+1
.db7a	bb7a	ae 44 08	ldx $0844			ldx 	SNDLength 					; queue is full, can't take any more.
.db7d	bb7d	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db7f	bb7f	f0 21		beq $bba2			beq 	_SNDQRExit
.db81	bb81	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db83	bb83	48		pha				pha
.db84	bb84	8a		txa				txa  								; get offset in queue buffer/
.db85	bb85	0a		asl a				asl 	a
.db86	bb86	0a		asl a				asl 	a
.db87	bb87	0a		asl a				asl 	a
.db88	bb88	aa		tax				tax
.db89	bb89	68		pla				pla 								; get back and push again
.db8a	bb8a	48		pha				pha
.db8b	bb8b	9d 45 08	sta $0845,x			sta 	SNDQueue+0,x 				; save the channel #
.db8e	bb8e	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db90	bb90					_SNDQCopy:
.db90	bb90	b1 36		lda ($36),y			lda 	(zTemp0),y
.db92	bb92	e8		inx				inx
.db93	bb93	c8		iny				iny
.db94	bb94	9d 45 08	sta $0845,x			sta 	SNDQueue,x
.db97	bb97	c0 06		cpy #$06			cpy 	#6
.db99	bb99	d0 f5		bne $bb90			bne 	_SNDQCopy
.db9b	bb9b	ee 44 08	inc $0844			inc 	SNDLength 					; bump queue length.
.db9e	bb9e	68		pla				pla 								; get channel # back
.db9f	bb9f	20 ca ba	jsr $baca			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dba2	bba2					_SNDQRExit:
.dba2	bba2	60		rts				rts
.dba3	bba3					SNDSilenceChannel:
.dba3	bba3	aa		tax				tax 								; zero time left.
.dba4	bba4	9e 51 09	stz $0951,x			stz 	SNDTimeLeft,x
.dba7	bba7	0a		asl a				asl 	a 							; shift into position
.dba8	bba8	0a		asl a				asl 	a
.dba9	bba9	0a		asl a				asl 	a
.dbaa	bbaa	0a		asl a				asl 	a
.dbab	bbab	0a		asl a				asl 	a
.dbac	bbac	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbae	bbae	20 b2 bb	jsr $bbb2			jsr 	SNDWritePorts
.dbb1	bbb1	60		rts				rts
.dbb2	bbb2					SNDWritePorts:
.dbb2	bbb2	da		phx				phx 								; save X
.dbb3	bbb3	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbb5	bbb5	64 01		stz $01				stz 	1 							; access I/O page 0
.dbb7	bbb7	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbba	bbba	8d 10 d6	sta $d610			sta 	$D610
.dbbd	bbbd	86 01		stx $01				stx 	1 							; restore I/O
.dbbf	bbbf	fa		plx				plx 								; restore X
.dbc0	bbc0	60		rts				rts
.dbc1	bbc1					Export_SNDCommand:
.dbc1	bbc1	da		phx				phx 								; save XY
.dbc2	bbc2	5a		phy				phy
.dbc3	bbc3	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbc5	bbc5	f0 1d		beq $bbe4			beq 	_SNDInitialise
.dbc7	bbc7	90 28		bcc $bbf1			bcc 	_SNDExit
.dbc9	bbc9	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbcb	bbcb	f0 17		beq $bbe4			beq 	_SNDSilence
.dbcd	bbcd	b0 22		bcs $bbf1			bcs 	_SNDExit
.dbcf	bbcf	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbd1	bbd1	b0 09		bcs $bbdc			bcs 	_SNDQueryPlay
.dbd3	bbd3	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbd5	bbd5	b0 1a		bcs $bbf1			bcs 	_SNDExit
.dbd7	bbd7	20 76 bb	jsr $bb76			jsr 	SNDQueueRequest
.dbda	bbda	80 15		bra $bbf1			bra 	_SNDExit
.dbdc	bbdc					_SNDQueryPlay:
.dbdc	bbdc	29 03		and #$03			and 	#3 							; get channel #
.dbde	bbde	aa		tax				tax
.dbdf	bbdf	bd 51 09	lda $0951,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbe2	bbe2	80 0d		bra $bbf1			bra 	_SNDExit
.dbe4	bbe4					_SNDInitialise:
.dbe4	bbe4					_SNDSilence:
.dbe4	bbe4	9c 44 08	stz $0844			stz 	SNDLength 					; empty the queue.
.dbe7	bbe7	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbe9	bbe9					_SNDSilenceLoop:
.dbe9	bbe9	48		pha				pha
.dbea	bbea	20 a3 bb	jsr $bba3			jsr 	SNDSilenceChannel
.dbed	bbed	68		pla				pla
.dbee	bbee	3a		dec a				dec 	a
.dbef	bbef	10 f8		bpl $bbe9			bpl 	_SNDSilenceLoop
.dbf1	bbf1					_SNDExit:
.dbf1	bbf1	7a		ply				ply
.dbf2	bbf2	fa		plx				plx
.dbf3	bbf3	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0844						SNDLength:
>0844								.fill 	1
.0845						SNDQueue:
>0845								.fill 	SNDQueueSize * 8
.0945						SNDPitchLow:
>0945								.fill 	4
.0949						SNDPitchHigh:
>0949								.fill 	4
.094d						SNDVolume:
>094d								.fill 	4
.0951						SNDTimeLeft:
>0951								.fill 	4
.0955						SNDAdjustLow:
>0955								.fill 	4
.0959						SNDAdjustHigh:
>0959								.fill 	4
.dbf4	bbf4					Export_SNDUpdate:
.dbf4	bbf4					PagedSNDUpdate:
.dbf4	bbf4	ad 51 09	lda $0951			lda 	SNDTimeLeft+0 				; look at time remaining
.dbf7	bbf7	f0 05		beq $bbfe			beq 	_SNDUNot0 					; not playing
.dbf9	bbf9	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbfb	bbfb	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel 			; update it.
.dbfe	bbfe					_SNDUNot0:
.dbfe	bbfe	ad 52 09	lda $0952			lda 	SNDTimeLeft+1
.dc01	bc01	f0 05		beq $bc08			beq 	_SNDUNot1
.dc03	bc03	a2 01		ldx #$01			ldx 	#1
.dc05	bc05	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc08	bc08					_SNDUNot1:
.dc08	bc08	ad 53 09	lda $0953			lda 	SNDTimeLeft+2
.dc0b	bc0b	f0 05		beq $bc12			beq 	_SNDUNot2
.dc0d	bc0d	a2 02		ldx #$02			ldx 	#2
.dc0f	bc0f	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc12	bc12					_SNDUNot2:
.dc12	bc12	ad 54 09	lda $0954			lda 	SNDTimeLeft+3
.dc15	bc15	f0 05		beq $bc1c			beq 	_SNDUNot3
.dc17	bc17	a2 03		ldx #$03			ldx 	#3
.dc19	bc19	20 1d bc	jsr $bc1d			jsr 	SNDUpdateChannel
.dc1c	bc1c					_SNDUNot3:
.dc1c	bc1c	60		rts				rts
.dc1d	bc1d					SNDUpdateChannel:
.dc1d	bc1d	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc1f	bc1f	f0 2c		beq $bc4d			beq 	_SNDUCExit
.dc21	bc21	3a		dec a				dec 	a 							; decrement and update timer
.dc22	bc22	9d 51 09	sta $0951,x			sta 	SNDTimeLeft,x
.dc25	bc25	f0 1d		beq $bc44			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc27	bc27	bd 55 09	lda $0955,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc2a	bc2a	1d 59 09	ora $0959,x			ora 	SNDAdjustHigh,x
.dc2d	bc2d	f0 1e		beq $bc4d			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc2f	bc2f	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc30	bc30	bd 45 09	lda $0945,x			lda 	SNDPitchLow,x
.dc33	bc33	7d 55 09	adc $0955,x			adc 	SNDAdjustLow,x
.dc36	bc36	9d 45 09	sta $0945,x			sta 	SNDPitchLow,x
.dc39	bc39	bd 49 09	lda $0949,x			lda 	SNDPitchHigh,x
.dc3c	bc3c	7d 59 09	adc $0959,x			adc 	SNDAdjustHigh,x
.dc3f	bc3f	29 03		and #$03			and 	#3
.dc41	bc41	9d 49 09	sta $0949,x			sta 	SNDPitchHigh,x
.dc44	bc44					_SNDUCUpdate:
.dc44	bc44	8a		txa				txa 								; which channel.
.dc45	bc45	48		pha				pha
.dc46	bc46	20 09 bb	jsr $bb09			jsr 	SNDUpdateNote 				; update the current note
.dc49	bc49	68		pla				pla
.dc4a	bc4a	20 ca ba	jsr $baca			jsr 	SNDCheckChannel 			; more to do ?
.dc4d	bc4d					_SNDUCExit:
.dc4d	bc4d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
