
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 17:11:59 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 55 8c	jsr $8c55			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	f1 83					.word	ShiftLeft                        ; $00 <<
>8016	eb 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	e1 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	cc 95					.word	SyntaxError                      ; $03 !!3
>801c	cc 95					.word	SyntaxError                      ; $04 ><
>801e	f5 82					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	f4 83					.word	ShiftRight                       ; $06 >>
>8022	cc 95					.word	SyntaxError                      ; $07 !!7
>8024	cc 95					.word	SyntaxError                      ; $08 !!8
>8026	cc 95					.word	SyntaxError                      ; $09 !!9
>8028	cc 95					.word	SyntaxError                      ; $0a !!10
>802a	cc 95					.word	SyntaxError                      ; $0b !!11
>802c	cc 95					.word	SyntaxError                      ; $0c !!12
>802e	cc 95					.word	SyntaxError                      ; $0d !!13
>8030	cc 95					.word	SyntaxError                      ; $0e !!14
>8032	cc 95					.word	SyntaxError                      ; $0f !!15
>8034	cc 95					.word	SyntaxError                      ; $10 @
>8036	cc 95					.word	SyntaxError                      ; $11 !!17
>8038	cc 95					.word	SyntaxError                      ; $12 !!18
>803a	cc 95					.word	SyntaxError                      ; $13 [
>803c	2e 91					.word	IntegerDivide                    ; $14 \
>803e	cc 95					.word	SyntaxError                      ; $15 ]
>8040	77 85					.word	EorInteger                       ; $16 ^
>8042	cc 95					.word	SyntaxError                      ; $17 _
>8044	cc 95					.word	SyntaxError                      ; $18 `
>8046	cc 95					.word	SyntaxError                      ; $19 !!25
>8048	cc 95					.word	SyntaxError                      ; $1a !!26
>804a	cc 95					.word	SyntaxError                      ; $1b {
>804c	32 85					.word	OraInteger                       ; $1c |
>804e	cc 95					.word	SyntaxError                      ; $1d }
>8050	cc 95					.word	SyntaxError                      ; $1e ~
>8052	cc 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	cc 95					.word	SyntaxError                      ; $20
>8056	cc 95					.word	SyntaxError                      ; $21 !
>8058	cc 95					.word	SyntaxError                      ; $22 "
>805a	cc 95					.word	SyntaxError                      ; $23 #
>805c	cc 95					.word	SyntaxError                      ; $24 $
>805e	7a 91					.word	IntegerModulus                   ; $25 %
>8060	ed 84					.word	AndInteger                       ; $26 &
>8062	cc 95					.word	SyntaxError                      ; $27 '
>8064	cc 95					.word	SyntaxError                      ; $28 (
>8066	cc 95					.word	SyntaxError                      ; $29 )
>8068	ee 91					.word	MulInteger                       ; $2a *
>806a	87 84					.word	AddInteger                       ; $2b +
>806c	cc 95					.word	SyntaxError                      ; $2c ,
>806e	c2 84					.word	SubInteger                       ; $2d -
>8070	cc 95					.word	SyntaxError                      ; $2e .
>8072	85 93					.word	FDivideCommand                   ; $2f /
>8074	cc 95					.word	SyntaxError                      ; $30 0
>8076	cc 95					.word	SyntaxError                      ; $31 1
>8078	cc 95					.word	SyntaxError                      ; $32 2
>807a	cc 95					.word	SyntaxError                      ; $33 3
>807c	cc 95					.word	SyntaxError                      ; $34 4
>807e	cc 95					.word	SyntaxError                      ; $35 5
>8080	cc 95					.word	SyntaxError                      ; $36 6
>8082	cc 95					.word	SyntaxError                      ; $37 7
>8084	cc 95					.word	SyntaxError                      ; $38 8
>8086	cc 95					.word	SyntaxError                      ; $39 9
>8088	cc 95					.word	SyntaxError                      ; $3a :
>808a	cc 95					.word	SyntaxError                      ; $3b ;
>808c	cd 82					.word	BinaryCompareLess                ; $3c <
>808e	c3 82					.word	BinaryCompareEqual               ; $3d =
>8090	d7 82					.word	BinaryCompareGreater             ; $3e >
>8092	cc 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	39 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	46 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	cc 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	cb 94					.word	AbsUnary                         ; $83 ABS(
>809c	4d 89					.word	AllocUnary                       ; $84 ALLOC(
>809e	db 94					.word	AscUnary                         ; $85 ASC(
>80a0	ea 89					.word	ChrUnary                         ; $86 CHR$(
>80a2	bf 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	e8 94					.word	FracUnary                        ; $88 FRAC(
>80a6	fe 94					.word	IntUnary                         ; $89 INT(
>80a8	54 95					.word	IsValUnary                       ; $8a ISVAL(
>80aa	c4 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	10 95					.word	LenUnary                         ; $8c LEN(
>80ae	ee 8a					.word	Unary_Mid                        ; $8d MID$(
>80b0	87 89					.word	Unary_Not                        ; $8e NOT(
>80b2	d4 8a					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	9d 89					.word	Unary_Rnd                        ; $90 RND(
>80b6	2a 95					.word	SgnUnary                         ; $91 SGN(
>80b8	fc 89					.word	SpcUnary                         ; $92 SPC(
>80ba	17 8a					.word	Unary_Str                        ; $93 STR$(
>80bc	b3 82					.word	UnaryTrue                        ; $94 TRUE
>80be	4a 95					.word	ValUnary                         ; $95 VAL(
>80c0	cc 95					.word	SyntaxError                      ; $96 FOR
>80c2	cc 95					.word	SyntaxError                      ; $97 IF
>80c4	cc 95					.word	SyntaxError                      ; $98 PROC
>80c6	cc 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	cc 95					.word	SyntaxError                      ; $9a WHILE
>80ca	cc 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	cc 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	cc 95					.word	SyntaxError                      ; $9d NEXT
>80d0	cc 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	cc 95					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	cc 95					.word	SyntaxError                      ; $a1 CLS
>80d8	cc 95					.word	SyntaxError                      ; $a2 DATA
>80da	cc 95					.word	SyntaxError                      ; $a3 DIM
>80dc	cc 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	cc 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	cc 95					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	cc 95					.word	SyntaxError                      ; $aa RETURN
>80ea	cc 95					.word	SyntaxError                      ; $ab THEN
>80ec	cc 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	cc 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	cc 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	cc 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	cc 95					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	cc 95					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	cc 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	cc 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	cc 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	cc 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 8f 8b	jsr $8b8f			jsr 	EvaluateInteger 			; the assert test
.810f	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 4e 82	jmp $824e		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 a4 8b	jsr $8ba4			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 83 96	jsr $9683			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad e6 85	lda $85e6			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 00 86	jsr $8600			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 25 91	jsr $9125			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 fe 85	jsr $85fe			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 3b 86	jmp $863b			jmp 	AssignNumber
.818b					_ASString:
.818b	4c 80 86	jmp $8680			jmp 	AssignString
.818e					_ASError:
.818e	4c d6 95	jmp $95d6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 c2 90	jsr $90c2			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 63 8b	jsr $8b63			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 39 8a	jsr $8a39			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 28		beq $8236			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 0d		bcs $8230			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 33 82	jsr $8233			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
>822f	db						.byte 	$DB 						; causes a break in the emulator
.8230					_CRSyntaxError:
.8230	4c cc 95	jmp $95cc			jmp 	SyntaxError
.8233					_CRCallVector0:
.8233	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8236					CRNoProgram:
.8236	4c 5f 81	jmp $815f			jmp 	EndCommand
.8239					EOLCommand:
.8239	18		clc				clc
.823a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.823c	65 30		adc $30				adc 	codePtr
.823e	85 30		sta $30				sta 	codePtr
.8240	90 02		bcc $8244			bcc 	_CREExit
.8242	e6 31		inc $31				inc 	codePtr+1
.8244					_CREExit:
.8244	80 c4		bra $820a			bra 	RunNewLine
.8246					Shift1Command:
.8246	b1 30		lda ($30),y			lda 	(codePtr),y
.8248	c8		iny				iny
.8249	0a		asl a				asl 	a
.824a	aa		tax				tax
.824b	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9115					CheckRightBracket:
.9115	b1 30		lda ($30),y			lda 	(codePtr),y
.9117	c8		iny				iny
.9118	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.911a	d0 0f		bne $912b			bne 	CNAFail
.911c	60		rts				rts
.911d					CheckComma:
.911d	b1 30		lda ($30),y			lda 	(codePtr),y
.911f	c8		iny				iny
.9120	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9122	d0 07		bne $912b			bne 	CNAFail
.9124	60		rts				rts
.9125					CheckNextA:
.9125	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9127	d0 02		bne $912b			bne 	CNAFail
.9129	c8		iny				iny 								; skip character
.912a	60		rts				rts 								; and exit
.912b					CNAFail:
.912b	4c cc 95	jmp $95cc			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.824e					ErrorHandler:
.824e	a8		tay				tay 								; find the error text
.824f	f0 42		beq $8293			beq 	_EHEnd
.8251	a2 00		ldx #$00			ldx 	#0
.8253					_EHFind:
.8253	88		dey				dey 								; found the error text ?
.8254	f0 0a		beq $8260			beq 	_EHFound
.8256					_EHFindZero:
.8256	bd e5 95	lda $95e5,x			lda 	ErrorText,x 				; find the next error
.8259	e8		inx				inx
.825a	c9 00		cmp #$00			cmp 	#0
.825c	d0 f8		bne $8256			bne 	_EHFindZero
.825e	80 f3		bra $8253			bra 	_EHFind
.8260					_EHFound:
.8260	bd e5 95	lda $95e5,x			lda 	ErrorText,x 				; print the message
.8263	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.8266	e8		inx				inx
.8267	bd e5 95	lda $95e5,x			lda 	ErrorText,x
.826a	d0 f4		bne $8260			bne 	_EHFound
.826c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.826e	b1 30		lda ($30),y			lda 	(codePtr),y
.8270	d0 05		bne $8277			bne 	_EHAtMsg
.8272	c8		iny				iny
.8273	b1 30		lda ($30),y			lda 	(codePtr),y
.8275	f0 17		beq $828e			beq 	_EHCREnd
.8277					_EHAtMsg:
.8277	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8279	a9 96		lda #$96			lda 	#_AtMsg & $FF
.827b	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.827e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8280	b1 30		lda ($30),y			lda 	(codePtr),y
.8282	48		pha				pha
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	aa		tax				tax
.8287	68		pla				pla
.8288	20 6f 92	jsr $926f			jsr 	ConvertInt16 				; convert XA to string
.828b	20 a0 82	jsr $82a0			jsr 	PrintStringXA 				; and print it.
.828e					_EHCREnd:
.828e	a9 0d		lda #$0d			lda 	#13 						; new line
.8290	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.8293					_EHEnd:
.8293	4c 0c 80	jmp $800c			jmp 	WarmStart
>8296	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>829e	20 00
.82a0					PrintStringXA:
.82a0	5a		phy				phy
.82a1	86 37		stx $37				stx 	zTemp0+1
.82a3	85 36		sta $36				sta 	zTemp0
.82a5	a0 00		ldy #$00			ldy 	#0
.82a7					_PSXALoop:
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	f0 06		beq $82b1			beq 	_PSXAExit
.82ab	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.82ae	c8		iny				iny
.82af	80 f6		bra $82a7			bra 	_PSXALoop
.82b1					_PSXAExit:
.82b1	7a		ply				ply
.82b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82b3					UnaryTrue:
.82b3	fa		plx				plx
.82b4					ReturnTrue:
.82b4	a9 01		lda #$01			lda 	#1  						; set to 1
.82b6	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.82b9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82be	60		rts				rts
.82bf					UnaryFalse:
.82bf	fa		plx				plx
.82c0					ReturnFalse:
.82c0	4c 18 8c	jmp $8c18			jmp 	NSMSetZero 					; set it all to zero
.82c3					BinaryCompareEqual:
.82c3	fa		plx				plx
.82c4	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82c7	c9 00		cmp #$00			cmp 	#0
.82c9	f0 e9		beq $82b4			beq 	ReturnTrue
.82cb	80 f3		bra $82c0			bra 	ReturnFalse
.82cd					BinaryCompareLess:
.82cd	fa		plx				plx
.82ce	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82d1	c9 ff		cmp #$ff			cmp 	#$FF
.82d3	f0 df		beq $82b4			beq 	ReturnTrue
.82d5	80 e9		bra $82c0			bra 	ReturnFalse
.82d7					BinaryCompareGreater:
.82d7	fa		plx				plx
.82d8	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82db	c9 01		cmp #$01			cmp 	#1
.82dd	f0 d5		beq $82b4			beq 	ReturnTrue
.82df	80 df		bra $82c0			bra 	ReturnFalse
.82e1					BinaryCompareNotEqual:
.82e1	fa		plx				plx
.82e2	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82e5	c9 00		cmp #$00			cmp 	#0
.82e7	d0 cb		bne $82b4			bne 	ReturnTrue
.82e9	80 d5		bra $82c0			bra 	ReturnFalse
.82eb					BinaryCompareLessEqual:
.82eb	fa		plx				plx
.82ec	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82ef	c9 01		cmp #$01			cmp 	#1
.82f1	d0 c1		bne $82b4			bne 	ReturnTrue
.82f3	80 cb		bra $82c0			bra 	ReturnFalse
.82f5					BinaryCompareGreaterEqual:
.82f5	fa		plx				plx
.82f6	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82f9	c9 ff		cmp #$ff			cmp 	#$FF
.82fb	d0 b7		bne $82b4			bne 	ReturnTrue
.82fd	80 c1		bra $82c0			bra 	ReturnFalse
.82ff					CompareBaseCode:
.82ff	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; make both values if references.
.8302	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8305	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8308	29 10		and #$10			and 	#NSTString
.830a	d0 40		bne $834c			bne 	_CBCString
.830c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.830f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8312	d0 3b		bne $834f			bne 	_CBCFloat
.8314	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8317	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.831a	29 08		and #$08			and 	#NSTFloat
.831c	d0 31		bne $834f			bne 	_CBCFloat
.831e	20 52 83	jsr $8352			jsr 	CompareFixMinusZero
.8321	e8		inx				inx
.8322	20 52 83	jsr $8352			jsr 	CompareFixMinusZero
.8325	ca		dex				dex
.8326	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8329	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.832c	10 0b		bpl $8339			bpl 	_CDCSameSign
.832e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8331	30 16		bmi $8349			bmi 	_CBCLess 					; return $FF
.8333					_CBCGreater:
.8333	a9 01		lda #$01			lda 	#1
.8335	60		rts				rts
.8336					_CBCEqual:
.8336	a9 00		lda #$00			lda 	#0
.8338	60		rts				rts
.8339					_CDCSameSign:
.8339	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; unsigned subtract
.833c	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; or the mantissa together
.833f	f0 f5		beq $8336			beq 	_CBCEqual 					; -0 == 0
.8341	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8344	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8347	10 ea		bpl $8333			bpl 	_CBCGreater
.8349					_CBCLess:
.8349	a9 ff		lda #$ff			lda 	#$FF
.834b	60		rts				rts
.834c					_CBCString:
.834c	4c b8 83	jmp $83b8			jmp 	CompareStrings
.834f					_CBCFloat:
.834f	4c 6b 93	jmp $936b			jmp 	CompareFloat
.8352					CompareFixMinusZero:
.8352	20 48 8c	jsr $8c48			jsr 	NSMIsZero
.8355	d0 03		bne $835a			bne 	_CFXMZNotZero
.8357	9e 00 06	stz $0600,x			stz 	NSStatus,x
.835a					_CFXMZNotZero:
.835a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.835b					StringConcat:
.835b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.835e	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8361	29 18		and #$18			and 	#NSBTypeMask
.8363	c9 10		cmp #$10			cmp 	#NSTString
.8365	d0 4e		bne $83b5			bne		_SCType
.8367	64 38		stz $38				stz 	zTemp1 						; counting total length
.8369	e8		inx				inx
.836a	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; setup for second
.836d	20 93 83	jsr $8393			jsr 	_SCLengthZ0 				; length for second
.8370	ca		dex				dex
.8371	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; setup for first
.8374	20 93 83	jsr $8393			jsr 	_SCLengthZ0 				; length for first
.8377	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8379	20 a1 96	jsr $96a1			jsr 	StringTempAllocate
.837c	20 a6 83	jsr $83a6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.837f	e8		inx				inx
.8380	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; copy second out
.8383	20 a6 83	jsr $83a6			jsr 	_SCCopy
.8386	ca		dex				dex
.8387	60		rts				rts
.8388					_SCSetupZ0:
.8388	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.838b	85 36		sta $36				sta 	zTemp0
.838d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8390	85 37		sta $37				sta 	zTemp0+1
.8392	60		rts				rts
.8393					_SCLengthZ0:
.8393	5a		phy				phy
.8394	a0 00		ldy #$00			ldy 	#0
.8396					_SCLenLoop:
.8396	b1 36		lda ($36),y			lda 	(zTemp0),y
.8398	f0 0a		beq $83a4			beq 	_SCLExit
.839a	c8		iny				iny
.839b	e6 38		inc $38				inc 	zTemp1
.839d	10 f7		bpl $8396			bpl		_SCLenLoop
.839f	a9 09		lda #$09		lda	#9
.83a1	4c 4e 82	jmp $824e		jmp	ErrorHandler
.83a4					_SCLExit:
.83a4	7a		ply				ply
.83a5	60		rts				rts
.83a6					_SCCopy:
.83a6	5a		phy				phy
.83a7	a0 00		ldy #$00			ldy 	#0
.83a9					_SCCopyLoop:
.83a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ab	f0 06		beq $83b3			beq 	_SCCExit
.83ad	20 df 96	jsr $96df			jsr 	StringTempWrite
.83b0	c8		iny				iny
.83b1	80 f6		bra $83a9			bra 	_SCCopyLoop
.83b3					_SCCExit:
.83b3	7a		ply				ply
.83b4	60		rts				rts
.83b5					_SCType:
.83b5	4c d6 95	jmp $95d6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.912e					IntegerDivide:
.912e	fa		plx				plx
.912f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9132	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9135	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9136	0a		asl a				asl 	a
.9137	10 05		bpl $913e			bpl 	_NotRef
.9139	48		pha				pha
.913a	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.913d	68		pla				pla
.913e					_NotRef:
.913e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9140	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9143	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9146	f0 03		beq $914b			beq 	_IntegerCode 				; if clear, then we have two integers
.9148	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.914b					_IntegerCode:
.914b	20 6d 91	jsr $916d			jsr 	CheckDivideZero 			; do div zero check
.914e	20 a4 91	jsr $91a4			jsr 	Int32Divide 				; do the division
.9151	20 61 92	jsr $9261			jsr 	CalculateSign 				; calculate result sign
.9154					NSMCopyPlusTwoToZero:
.9154	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9157	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.915a	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.915d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9160	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9163	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9166	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9169	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.916c	60		rts				rts
.916d					CheckDivideZero:
.916d	e8		inx				inx
.916e	20 48 8c	jsr $8c48			jsr 	NSMIsZero
.9171	f0 02		beq $9175			beq 	_CDVError
.9173	ca		dex				dex
.9174	60		rts				rts
.9175					_CDVError:
.9175	a9 03		lda #$03		lda	#3
.9177	4c 4e 82	jmp $824e		jmp	ErrorHandler
.917a					IntegerModulus:
.917a	fa		plx				plx
.917b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.917e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9181	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9182	0a		asl a				asl 	a
.9183	10 05		bpl $918a			bpl 	_NotRef
.9185	48		pha				pha
.9186	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9189	68		pla				pla
.918a					_NotRef:
.918a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.918c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.918f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9192	f0 03		beq $9197			beq 	_IntegerCode 				; if clear, then we have two integers
.9194	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.9197					_IntegerCode:
.9197	20 6d 91	jsr $916d			jsr 	CheckDivideZero 			; do div zero check
.919a	20 a4 91	jsr $91a4			jsr 	Int32Divide 				; do the division
.919d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.91a0	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.91a3	60		rts				rts
.91a4					Int32Divide:
.91a4	48		pha				pha 								; save AXY
.91a5	5a		phy				phy
.91a6	20 ef 8b	jsr $8bef			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91a9	20 14 8c	jsr $8c14			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.91ac	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.91ae					_I32DivideLoop:
.91ae	e8		inx				inx
.91af	e8		inx				inx
.91b0	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.91b3	ca		dex				dex
.91b4	ca		dex				dex
.91b5	20 2e 8c	jsr $8c2e			jsr 	NSMRotateLeft
.91b8	20 e4 91	jsr $91e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.91bb	90 03		bcc $91c0			bcc 	_I32DivideNoCarryIn
.91bd	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.91c0					_I32DivideNoCarryIn:
.91c0	88		dey				dey 								; loop round till division completed.
.91c1	d0 eb		bne $91ae			bne 	_I32DivideLoop
.91c3	7a		ply				ply 								; restore AXY and exit
.91c4	68		pla				pla
.91c5	60		rts				rts
.91c6					Int32ShiftDivide:
.91c6	48		pha				pha 								; save AY
.91c7	5a		phy				phy
.91c8	e8		inx				inx 								; clear S[X+2]
.91c9	e8		inx				inx
.91ca	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.91cd	ca		dex				dex
.91ce	ca		dex				dex
.91cf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.91d1					_I32SDLoop:
.91d1	20 e4 91	jsr $91e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.91d4	e8		inx				inx
.91d5	e8		inx				inx
.91d6	20 2e 8c	jsr $8c2e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.91d9	ca		dex				dex
.91da	ca		dex				dex
.91db	20 2e 8c	jsr $8c2e			jsr 	NSMRotateLeft
.91de	88		dey				dey 	 							; do 31 times
.91df	d0 f0		bne $91d1			bne 	_I32SDLoop
.91e1	7a		ply				ply 								; restore AY and exit
.91e2	68		pla				pla
.91e3	60		rts				rts
.91e4					DivideCheckSubtract:
.91e4	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.91e7	b0 04		bcs $91ed			bcs 	_DCSExit 					; if carry set, then could do, exit
.91e9	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; add it back in
.91ec	18		clc				clc 								; and return False
.91ed					_DCSExit:
.91ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.91ee					MulInteger:
.91ee	fa		plx				plx
.91ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.91f2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91f5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f6	0a		asl a				asl 	a
.91f7	10 05		bpl $91fe			bpl 	_NotRef
.91f9	48		pha				pha
.91fa	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91fd	68		pla				pla
.91fe					_NotRef:
.91fe	0a		asl a				asl 	a 							; put MSB of type into A:7
.91ff	30 0b		bmi $920c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9201	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9204	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9207	f0 06		beq $920f			beq 	_IntegerCode 				; if clear, then we have two integers
.9209	4c 42 94	jmp $9442			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.920c					_StringData:
.920c	4c e0 95	jmp $95e0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.920f					_IntegerCode:
.920f	20 1c 92	jsr $921c			jsr 	MultiplyShort
.9212	c9 00		cmp #$00			cmp 	#0
.9214	f0 05		beq $921b			beq 	_MIExit
.9216	a9 04		lda #$04		lda	#4
.9218	4c 4e 82	jmp $824e		jmp	ErrorHandler
.921b					_MIExit:
.921b	60		rts				rts
.921c					MultiplyShort:
.921c	5a		phy				phy 								; save Y
.921d	20 ef 8b	jsr $8bef			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9220	20 14 8c	jsr $8c14			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9223	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9225					_I32MLoop:
.9225	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9228	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.922b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.922e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9231	f0 28		beq $925b			beq 	_I32MExit 					; exit if zero
.9233	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9236	29 01		and #$01			and 	#1
.9238	f0 0e		beq $9248			beq 	_I32MNoAdd
.923a	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.923d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9240	10 06		bpl $9248			bpl 	_I32MNoAdd
.9242					_I32ShiftRight:
.9242	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight 				; shift S[X] right
.9245	c8		iny				iny 								; increment shift count
.9246	80 0a		bra $9252			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9248					_I32MNoAdd:
.9248	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.924b	70 f5		bvs $9242			bvs 	_I32ShiftRight 				; instead.
.924d	e8		inx				inx
.924e	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9251	ca		dex				dex
.9252					_I32MShiftUpper:
.9252	e8		inx				inx 								; shift S[X+2] right
.9253	e8		inx				inx
.9254	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight
.9257	ca		dex				dex
.9258	ca		dex				dex
.9259	80 ca		bra $9225			bra 	_I32MLoop 					; try again.
.925b					_I32MExit:
.925b	20 61 92	jsr $9261			jsr 	CalculateSign
.925e	98		tya				tya 								; shift in A
.925f	7a		ply				ply 								; restore Y and exit
.9260	60		rts				rts
.9261					CalculateSign:
.9261	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9264	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9267	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.926a	0a		asl a				asl 	a 							; shift bit 7 into carry
.926b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.926e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83b8					CompareStrings:
.83b8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83bb	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83be	29 10		and #$10			and 	#NSBIsString
.83c0	f0 2c		beq $83ee			beq 	_CSTypeError
.83c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83c5	85 36		sta $36				sta 	zTemp0
.83c7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83ca	85 37		sta $37				sta 	zTemp0+1
.83cc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83cf	85 38		sta $38				sta 	zTemp1
.83d1	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83d4	85 39		sta $39				sta 	zTemp1+1
.83d6	5a		phy				phy 								; save Y so we can access strings
.83d7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83d9					_CSLoop:
.83d9	c8		iny				iny
.83da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83dc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83de	d0 06		bne $83e6			bne 	_CSDifferent
.83e0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83e2	d0 f5		bne $83d9			bne 	_CSLoop 					; still comparing
.83e4					_CSExit:
.83e4	7a		ply				ply 								; reached end, return zero in A from EOS
.83e5	60		rts				rts
.83e6					_CSDifferent:
.83e6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83e8	90 fa		bcc $83e4			bcc		_CSExit
.83ea	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83ec	80 f6		bra $83e4			bra 	_CSExit
.83ee					_CSTypeError:
.83ee	4c d6 95	jmp $95d6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.83f1					ShiftLeft:
.83f1	38		sec				sec
.83f2	80 01		bra $83f5			bra 	ShiftMain
.83f4					ShiftRight:
.83f4	18		clc				clc
.83f5					ShiftMain:
.83f5	fa		plx				plx 								; restore X
.83f6	08		php				php 								; save direction
.83f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83fa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83fe	0a		asl a				asl 	a
.83ff	10 05		bpl $8406			bpl 	_NotRef
.8401	48		pha				pha
.8402	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8405	68		pla				pla
.8406					_NotRef:
.8406	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8408	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.840b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.840e	f0 03		beq $8413			beq 	_IntegerCode 				; if clear, then we have two integers
.8410	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.8413					_IntegerCode:
.8413	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8416	29 e0		and #$e0			and 	#$E0
.8418	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.841b	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.841e	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8421	d0 13		bne $8436			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8423					_SMLoop:
.8423	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8426	30 11		bmi $8439			bmi 	_SMExit 					; exit if done.
.8428	28		plp				plp 								; restore direcition setting
.8429	08		php				php
.842a	90 05		bcc $8431			bcc 	_SMRight
.842c	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; shift left if CS
.842f	80 f2		bra $8423			bra 	_SMLoop
.8431					_SMRight:
.8431	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight 				; shift right if CC
.8434	80 ed		bra $8423			bra 	_SMLoop
.8436					_SMExit0:
.8436	20 18 8c	jsr $8c18			jsr 	NSMSetZero 					; return zero.
.8439					_SMExit:
.8439	28		plp				plp 								; throw direction
.843a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.843b					AddTopTwoStack:
.843b	18		clc				clc
.843c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.843f	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8442	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8445	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8448	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.844b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.844e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8451	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8454	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8457	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.845a	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.845d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8460	60		rts				rts
.8461					SubTopTwoStack:
.8461	38		sec				sec
.8462	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8465	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8468	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.846e	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8471	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8474	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8477	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.847a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8480	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8483	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8486	60		rts				rts
.8487					AddInteger:
.8487	fa		plx				plx
.8488	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.848b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.848e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.848f	0a		asl a				asl 	a
.8490	10 05		bpl $8497			bpl 	_NotRef
.8492	48		pha				pha
.8493	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8496	68		pla				pla
.8497					_NotRef:
.8497	0a		asl a				asl 	a 							; put MSB of type into A:7
.8498	30 0b		bmi $84a5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.849a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.849d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84a0	f0 06		beq $84a8			beq 	_IntegerCode 				; if clear, then we have two integers
.84a2	4c ca 92	jmp $92ca			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84a5					_StringData:
.84a5	4c 5b 83	jmp $835b			jmp 	StringConcat							; at least one string - don't know both are strings.
.84a8					_IntegerCode:
.84a8					AddCode:
.84a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84ab	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84ae	10 8b		bpl $843b			bpl 	AddTopTwoStack
.84b0	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; do a physical subtraction
.84b3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84b6	10 09		bpl $84c1			bpl 	_AddExit
.84b8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84be	20 cd 8b	jsr $8bcd			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84c1					_AddExit:
.84c1	60		rts				rts
.84c2					SubInteger:
.84c2	fa		plx				plx
.84c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84c6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84ca	0a		asl a				asl 	a
.84cb	10 05		bpl $84d2			bpl 	_NotRef
.84cd	48		pha				pha
.84ce	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84d1	68		pla				pla
.84d2					_NotRef:
.84d2	0a		asl a				asl 	a 							; put MSB of type into A:7
.84d3	30 0b		bmi $84e0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84d5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84d8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84db	f0 06		beq $84e3			beq 	_IntegerCode 				; if clear, then we have two integers
.84dd	4c cf 92	jmp $92cf			jmp 	FloatingPointSub 							; otherwise at least one float.
.84e0					_StringData:
.84e0	4c e0 95	jmp $95e0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84e3					_IntegerCode:
.84e3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84e6	49 80		eor #$80			eor 	#$80
.84e8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84eb	80 bb		bra $84a8			bra 	AddCode 					; and do the same code as add.
.84ed					AndInteger:
.84ed	fa		plx				plx
.84ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84f1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84f4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84f5	0a		asl a				asl 	a
.84f6	10 05		bpl $84fd			bpl 	_NotRef
.84f8	48		pha				pha
.84f9	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84fc	68		pla				pla
.84fd					_NotRef:
.84fd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.84ff	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8502	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8505	f0 03		beq $850a			beq 	_IntegerCode 				; if clear, then we have two integers
.8507	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.850a					_IntegerCode:
.850a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.850d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8510	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8513	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8516	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8519	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.851c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.851f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8522	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8525	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8528	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.852b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.852e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8531	60		rts				rts
.8532					OraInteger:
.8532	fa		plx				plx
.8533	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8536	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8539	0a		asl a				asl 	a 							; shift reference bit into sign bit
.853a	0a		asl a				asl 	a
.853b	10 05		bpl $8542			bpl 	_NotRef
.853d	48		pha				pha
.853e	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8541	68		pla				pla
.8542					_NotRef:
.8542	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8544	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8547	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.854a	f0 03		beq $854f			beq 	_IntegerCode 				; if clear, then we have two integers
.854c	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.854f					_IntegerCode:
.854f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8552	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8555	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8558	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.855b	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.855e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8561	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8564	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8567	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.856a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.856d	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8570	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8573	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8576	60		rts				rts
.8577					EorInteger:
.8577	fa		plx				plx
.8578	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.857b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.857e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.857f	0a		asl a				asl 	a
.8580	10 05		bpl $8587			bpl 	_NotRef
.8582	48		pha				pha
.8583	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8586	68		pla				pla
.8587					_NotRef:
.8587	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8589	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.858c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.858f	f0 03		beq $8594			beq 	_IntegerCode 				; if clear, then we have two integers
.8591	4c d6 95	jmp $95d6			jmp 	TypeError 					; anything else, type mismatch.
.8594					_IntegerCode:
.8594	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8597	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.859a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.859d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85a0	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85a6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85a9	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85ac	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85af	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85b2	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85b5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85b8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.926f					ConvertInt16:
.926f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9272	8e 10 06	stx $0610			stx 	NSMantissa1
.9275	9c 18 06	stz $0618			stz 	NSMantissa2
.9278	9c 20 06	stz $0620			stz 	NSMantissa3
.927b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.927e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9280	a9 0a		lda #$0a			lda 	#10 						; base
.9282	80 00		bra $9284			bra 	ConvertInt32
.9284					ConvertInt32:
.9284	5a		phy				phy
.9285	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9287	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.928a	10 08		bpl $9294			bpl 	_CI32NotNeg
.928c	48		pha				pha
.928d	a9 2d		lda #$2d			lda 	#'-'
.928f	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9292	c8		iny				iny
.9293	68		pla				pla
.9294					_CI32NotNeg:
.9294	20 a2 92	jsr $92a2			jsr 	_CI32DivideConvert 			; recursive conversion
.9297	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9299	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.929c	7a		ply				ply
.929d	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.929f	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.92a1	60		rts				rts
.92a2					_CI32DivideConvert:
.92a2	e8		inx				inx 								; write to next slot up
.92a3	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.92a6	ca		dex				dex
.92a7	20 a4 91	jsr $91a4			jsr 	Int32Divide 				; divide
.92aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.92ad	48		pha				pha
.92ae	20 54 91	jsr $9154			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92b1	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; is it zero ?
.92b4	f0 06		beq $92bc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92b6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92b9	20 a2 92	jsr $92a2			jsr 	_CI32DivideConvert 			; and recusrively call.
.92bc					_CI32NoRecurse:
.92bc	68		pla				pla 								; remainder
.92bd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92bf	90 02		bcc $92c3			bcc 	_CI32NotHex
.92c1	69 26		adc #$26			adc 	#6+32
.92c3					_CI32NotHex:
.92c3	69 30		adc #$30			adc 	#48
.92c5	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.92c8	c8		iny				iny
.92c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.85bc					PrecedenceLevel:
>85bc	04					.byte	 4	; $00 <<
>85bd	02					.byte	 2	; $01 <=
>85be	02					.byte	 2	; $02 <>
>85bf	00					.byte	 0	; $03 !!3
>85c0	00					.byte	 0	; $04 ><
>85c1	02					.byte	 2	; $05 >=
>85c2	04					.byte	 4	; $06 >>
>85c3	00					.byte	 0	; $07 !!7
>85c4	00					.byte	 0	; $08 !!8
>85c5	00					.byte	 0	; $09 !!9
>85c6	00					.byte	 0	; $0a !!10
>85c7	00					.byte	 0	; $0b !!11
>85c8	00					.byte	 0	; $0c !!12
>85c9	00					.byte	 0	; $0d !!13
>85ca	00					.byte	 0	; $0e !!14
>85cb	00					.byte	 0	; $0f !!15
>85cc	00					.byte	 0	; $10 @
>85cd	00					.byte	 0	; $11 !!17
>85ce	00					.byte	 0	; $12 !!18
>85cf	00					.byte	 0	; $13 [
>85d0	04					.byte	 4	; $14 \
>85d1	00					.byte	 0	; $15 ]
>85d2	01					.byte	 1	; $16 ^
>85d3	00					.byte	 0	; $17 _
>85d4	00					.byte	 0	; $18 `
>85d5	00					.byte	 0	; $19 !!25
>85d6	00					.byte	 0	; $1a !!26
>85d7	00					.byte	 0	; $1b {
>85d8	01					.byte	 1	; $1c |
>85d9	00					.byte	 0	; $1d }
>85da	00					.byte	 0	; $1e ~
>85db	00					.byte	 0	; $1f [7m<7F>[m
>85dc	00					.byte	 0	; $20
>85dd	05					.byte	 5	; $21 !
>85de	00					.byte	 0	; $22 "
>85df	00					.byte	 0	; $23 #
>85e0	05					.byte	 5	; $24 $
>85e1	04					.byte	 4	; $25 %
>85e2	01					.byte	 1	; $26 &
>85e3	00					.byte	 0	; $27 '
>85e4	00					.byte	 0	; $28 (
>85e5	00					.byte	 0	; $29 )
>85e6	04					.byte	 4	; $2a *
>85e7	03					.byte	 3	; $2b +
>85e8	00					.byte	 0	; $2c ,
>85e9	03					.byte	 3	; $2d -
>85ea	00					.byte	 0	; $2e .
>85eb	04					.byte	 4	; $2f /
>85ec	00					.byte	 0	; $30 0
>85ed	00					.byte	 0	; $31 1
>85ee	00					.byte	 0	; $32 2
>85ef	00					.byte	 0	; $33 3
>85f0	00					.byte	 0	; $34 4
>85f1	00					.byte	 0	; $35 5
>85f2	00					.byte	 0	; $36 6
>85f3	00					.byte	 0	; $37 7
>85f4	00					.byte	 0	; $38 8
>85f5	00					.byte	 0	; $39 9
>85f6	00					.byte	 0	; $3a :
>85f7	00					.byte	 0	; $3b ;
>85f8	02					.byte	 2	; $3c <
>85f9	02					.byte	 2	; $3d =
>85fa	02					.byte	 2	; $3e >
>85fb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.85fc					EvaluateExpressionAt0:
.85fc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.85fe					EvaluateExpression:
.85fe	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8600					EvaluateExpressionAtPrecedence:
.8600	48		pha				pha 								; save precedence level
.8601	20 44 88	jsr $8844			jsr 	EvaluateTerm 				; evaluate term into level X.
.8604	68		pla				pla 								; restore precedence level.
.8605					_EXPRLoop:
.8605	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8607	b1 30		lda ($30),y			lda 	(codePtr),y
.8609	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.860b	b0 25		bcs $8632			bcs 	_EXPRExit
.860d	da		phx				phx 								; read the operator precedence
.860e	aa		tax				tax
.860f	bd bc 85	lda $85bc,x			lda 	PrecedenceLevel,x
.8612	fa		plx				plx
.8613	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8615	f0 1b		beq $8632			beq 	_EXPRExit
.8617	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8619	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.861b	c5 37		cmp $37				cmp 	zTemp0+1
.861d	b0 13		bcs $8632			bcs		_EXPRExit 					; if current >= operator exit
.861f	48		pha				pha 								; save current precedence.
.8620	b1 30		lda ($30),y			lda 	(codePtr),y
.8622	c8		iny				iny
.8623	48		pha				pha
.8624	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8626	e8		inx				inx 								; work out the right hand side.
.8627	20 00 86	jsr $8600			jsr 	EvaluateExpressionAtPrecedence
.862a	ca		dex				dex
.862b	68		pla				pla 								; get operator, call the code.
.862c	20 35 86	jsr $8635			jsr 	_EXPRCaller
.862f	68		pla				pla 								; restore precedence level
.8630	80 d3		bra $8605			bra 	_EXPRLoop 					; and go round.
.8632					_EXPRExit:
.8632	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8634	60		rts				rts
.8635					_EXPRCaller:
.8635	da		phx				phx 								; save on stack, first thing is to restore it
.8636	0a		asl a				asl 	a 							; double so can use vectors into X
.8637	aa		tax				tax
.8638	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.92ca					FloatingPointAdd:
.92ca	20 6b 94	jsr $946b			jsr 	FloatPrepare 				; prepare for floats
.92cd	80 0b		bra $92da			bra 	FloatAdd
.92cf					FloatingPointSub:
.92cf	20 6b 94	jsr $946b			jsr 	FloatPrepare 				; prepare for floats
.92d2					FloatSubtract:
.92d2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.92d5	49 80		eor #$80			eor 	#$80
.92d7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.92da					FloatAdd:
.92da	48		pha				pha
.92db	5a		phy				phy
.92dc	20 7c 94	jsr $947c			jsr 	NSNormalise 				; normalise S[X]
.92df	f0 54		beq $9335			beq 	_FAReturn1
.92e1	e8		inx				inx 								; normalise S[X+1]
.92e2	20 7c 94	jsr $947c			jsr 	NSNormalise
.92e5	ca		dex				dex
.92e6	c9 00		cmp #$00			cmp 	#0
.92e8	f0 6f		beq $9359			beq 	_FAExit 					; if so, just return A
.92ea	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.92ed	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.92f0	f0 1b		beq $930d			beq 	_FAExponentsEqual
.92f2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.92f5	a8		tay				tay
.92f6	38		sec				sec 								; do a signed comparison of the exponents.
.92f7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.92fa	50 02		bvc $92fe			bvc 	_FANoSignedChange
.92fc	49 80		eor #$80			eor 	#$80
.92fe					_FANoSignedChange:
.92fe	29 80		and #$80			and 	#$80
.9300	10 03		bpl $9305			bpl 	_FAHaveMax
.9302	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9305					_FAHaveMax:
.9305	20 5c 93	jsr $935c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9308	e8		inx				inx
.9309	20 5c 93	jsr $935c			jsr 	_FAShiftToExponent
.930c	ca		dex				dex
.930d					_FAExponentsEqual:
.930d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9310	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9313	30 10		bmi $9325			bmi 	_FADifferentSigns
.9315	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9318	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.931b	10 3c		bpl $9359			bpl 	_FAExit 					; if no, we are done.
.931d	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9320	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9323	80 34		bra $9359			bra 	_FAExit
.9325					_FADifferentSigns:
.9325	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9328	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.932b	10 2c		bpl $9359			bpl 	_FAExit 					; if no, we are done.
.932d	20 c4 8b	jsr $8bc4			jsr 	NSMNegate 					; netate result
.9330	20 cd 8b	jsr $8bcd			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9333	80 24		bra $9359			bra 	_FAExit
.9335					_FAReturn1:
.9335	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9338	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.933b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.933e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9341	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9344	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9347	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.934a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.934d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9350	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9353	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9356	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9359					_FAExit:
.9359	7a		ply				ply
.935a	68		pla				pla
.935b	60		rts				rts
.935c					_FAShiftToExponent:
.935c					_FAShiftToExponent2:
.935c	98		tya				tya 								; compare Y to exponent
.935d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9360	f0 08		beq $936a			beq 	_FASEExit 					; exit if so.
.9362	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight	 			; shift the mantissa right
.9365	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9368	80 f2		bra $935c			bra 	_FAShiftToExponent2
.936a					_FASEExit:
.936a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.936b					CompareFloat:
.936b	20 d2 92	jsr $92d2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.936e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9371	29 f8		and #$f8			and 	#$F8
.9373	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9376	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9379	f0 09		beq $9384			beq 	_FCExit 					; zero, so approximately identical
.937b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.937d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9380	10 02		bpl $9384			bpl 	_FCExit
.9382					_FCNegative:
.9382	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9384					_FCExit:
.9384	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9385					FDivideCommand:
.9385	fa		plx				plx	 								; restore stack position
.9386	20 6b 94	jsr $946b			jsr 	FloatPrepare 				; prepare for floats
.9389					FloatDivide:
.9389	48		pha				pha
.938a	e8		inx				inx
.938b	20 7c 94	jsr $947c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.938e	ca		dex				dex
.938f	c9 00		cmp #$00			cmp 	#0
.9391	f0 20		beq $93b3			beq 	_FDZero
.9393	20 7c 94	jsr $947c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9396	f0 19		beq $93b1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9398	20 c6 91	jsr $91c6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.939b	20 54 91	jsr $9154			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.939e	20 7c 94	jsr $947c			jsr		NSNormalise 				; renormalise
.93a1	20 61 92	jsr $9261			jsr 	CalculateSign 				; calculate result sign
.93a4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.93a7	38		sec				sec
.93a8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93ab	38		sec				sec
.93ac	e9 1e		sbc #$1e			sbc 	#30
.93ae	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93b1					_FDExit:
.93b1	68		pla				pla
.93b2	60		rts				rts
.93b3					_FDZero:
.93b3	a9 03		lda #$03		lda	#3
.93b5	4c 4e 82	jmp $824e		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.93b8					FloatFractionalPart:
.93b8	5a		phy				phy
.93b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.93bc	29 7f		and #$7f			and 	#$7F
.93be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93c1	20 7c 94	jsr $947c			jsr 	NSNormalise
.93c4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.93c7	38		sec				sec
.93c8	e9 e0		sbc #$e0			sbc 	#$E0
.93ca	90 31		bcc $93fd			bcc 	_FFPExit 					; already fractional
.93cc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.93ce	b0 2a		bcs $93fa			bcs 	_FFPZero
.93d0	a8		tay				tay 								; put count to do in Y
.93d1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.93d4	20 ff 93	jsr $93ff			jsr 	_FFPPartial
.93d7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93da	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.93dd	20 ff 93	jsr $93ff			jsr 	_FFPPartial
.93e0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93e3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93e6	20 ff 93	jsr $93ff			jsr 	_FFPPartial
.93e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93ec	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93ef	20 ff 93	jsr $93ff			jsr 	_FFPPartial
.93f2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93f5	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; zeroed check.
.93f8	d0 03		bne $93fd			bne 	_FFPExit
.93fa					_FFPZero:
.93fa	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.93fd					_FFPExit:
.93fd	7a		ply				ply
.93fe	60		rts				rts
.93ff					_FFPPartial:
.93ff	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9401	f0 17		beq $941a			beq 	_FFFPPExit
.9403	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9405	b0 0c		bcs $9413			bcs 	_FFFPPWholeByte
.9407	5a		phy				phy
.9408					_FFFPPLeft:
.9408	0a		asl a				asl 	a
.9409	88		dey				dey
.940a	d0 fc		bne $9408			bne 	_FFFPPLeft
.940c	7a		ply				ply
.940d					_FFFPPRight:
.940d	4a		lsr a				lsr 	a
.940e	88		dey				dey
.940f	d0 fc		bne $940d			bne 	_FFFPPRight
.9411	80 07		bra $941a			bra 	_FFFPPExit
.9413					_FFFPPWholeByte:
.9413	98		tya				tya 								; subtract 8 from count
.9414	38		sec				sec
.9415	e9 08		sbc #$08			sbc 	#8
.9417	a8		tay				tay
.9418	a9 00		lda #$00			lda 	#0 							; and clear all
.941a					_FFFPPExit:
.941a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.941b					FloatIntegerPart:
.941b	48		pha				pha
.941c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.941f	f0 1f		beq $9440			beq 	_FIPExit 					; if so do nothing
.9421	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; is it zero ?
.9424	f0 17		beq $943d			beq 	_FIPZero 					; if so return zero.
.9426	20 7c 94	jsr $947c			jsr 	NSNormalise 				; normalise
.9429	f0 12		beq $943d			beq 	_FIPZero 					; normalised to zero, exit zero
.942b					_FIPShift:
.942b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.942e	10 08		bpl $9438			bpl 	_FIPCheckZero
.9430	20 3b 8c	jsr $8c3b			jsr 	NSMShiftRight 				; shift mantissa right
.9433	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9436	80 f3		bra $942b			bra 	_FIPShift
.9438					_FIPCheckZero:
.9438	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; avoid -0 problem
.943b	d0 03		bne $9440			bne 	_FIPExit 					; set to zero if mantissa zero.
.943d					_FIPZero:
.943d	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.9440					_FIPExit:
.9440	68		pla				pla
.9441	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9442					FloatingPointMultiply:
.9442	20 6b 94	jsr $946b			jsr 	FloatPrepare 				; prepare for floats
.9445					FloatMultiply:
.9445	48		pha				pha
.9446	20 7c 94	jsr $947c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9449	f0 1b		beq $9466			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.944b	e8		inx				inx
.944c	20 7c 94	jsr $947c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.944f	ca		dex				dex
.9450	c9 00		cmp #$00			cmp 	#0
.9452	f0 0f		beq $9463			beq 	_FDSetZero
.9454	20 1c 92	jsr $921c			jsr 	MultiplyShort 				; calculate the result.
.9457	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.945a	18		clc				clc
.945b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.945e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9461	80 03		bra $9466			bra 	_FDExit
.9463					_FDSetZero:
.9463	20 18 8c	jsr $8c18			jsr 	NSMSetZero 					; return 0
.9466					_FDExit:
.9466	20 7c 94	jsr $947c			jsr 	NSNormalise 				; normalise the result
.9469	68		pla				pla
.946a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.946b					FloatPrepare:
.946b	20 83 86	jsr $8683			jsr 	DereferenceTopTwo 			; dereference the top two values
.946e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9471	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9474	29 10		and #$10			and 	#NSBIsString
.9476	d0 01		bne $9479			bne 	_FDType
.9478	60		rts				rts
.9479					_FDType:
.9479	4c d6 95	jmp $95d6			jmp 	TypeError
.947c					NSNormalise:
.947c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.947f	29 80		and #$80			and 	#$80
.9481	09 08		ora #$08			ora 	#NSTFloat
.9483	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9486	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; if zero exit
.9489	d0 09		bne $9494			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.948b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.948e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9491	a9 00		lda #$00			lda 	#0 							; set Z flag
.9493	60		rts				rts
.9494					_NSNormaliseOptimise:
.9494	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9497	d0 22		bne $94bb			bne 	_NSNormaliseLoop
.9499	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.949c	30 1d		bmi $94bb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.949e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94a1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94a4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94aa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94ad	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.94b0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.94b3	38		sec				sec
.94b4	e9 08		sbc #$08			sbc 	#8
.94b6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94b9	80 d9		bra $9494			bra 	_NSNormaliseOptimise
.94bb					_NSNormaliseLoop:
.94bb	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.94be	70 08		bvs $94c8			bvs 	_NSNExit 					; exit if so with Z flag clear
.94c0	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; shift mantissa left
.94c3	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.94c6	80 f3		bra $94bb			bra 	_NSNormaliseLoop
.94c8					_NSNExit:
.94c8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.94ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.863b					AssignNumber:
.863b	5a		phy				phy
.863c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.863f	85 36		sta $36				sta 	zTemp0
.8641	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8644	85 37		sta $37				sta 	zTemp0+1
.8646	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8649	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.864b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.864e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8650	c9 08		cmp #$08			cmp 	#NSTFloat
.8652	f0 01		beq $8655			beq 	_ANFloat
>8654	db						.byte 	$DB 						; causes a break in the emulator
.8655					_ANFloat:
.8655	20 61 86	jsr $8661			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8658	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.865b	a0 04		ldy #$04			ldy 	#4
.865d	91 36		sta ($36),y			sta 	(zTemp0),y
.865f					_ANExit:
.865f	7a		ply				ply
.8660	60		rts				rts
.8661					_ANCopy4PackSign:
.8661	a0 03		ldy #$03			ldy 	#3
.8663	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8666	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8668	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.866b	91 36		sta ($36),y			sta 	(zTemp0),y
.866d	88		dey				dey
.866e	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8671	91 36		sta ($36),y			sta 	(zTemp0),y
.8673	88		dey				dey
.8674	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8677	91 36		sta ($36),y			sta 	(zTemp0),y
.8679	88		dey				dey
.867a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.867d	91 36		sta ($36),y			sta 	(zTemp0),y
.867f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8680					AssignString:
>8680	db						.byte 	$DB 						; causes a break in the emulator
.8681	80 fd		bra $8680			bra 	AssignString

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8683					DereferenceTopTwo:
.8683	e8		inx				inx
.8684	20 88 86	jsr $8688			jsr 	Dereference 				; deref x+1
.8687	ca		dex				dex  								; falls through to deref x
.8688					Dereference:
.8688	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.868b	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.868d	f0 57		beq $86e6			beq 	_DRFExit 					; not a reference
.868f	5a		phy				phy
.8690	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8693	85 36		sta $36				sta 	zTemp0
.8695	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8698	85 37		sta $37				sta 	zTemp0+1
.869a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.869d	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.869f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86a2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.86a5	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.86a7	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.86a9	f0 0f		beq $86ba			beq 	_DRFDereferenceTwo
.86ab	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.86ad	f0 39		beq $86e8			beq 	_DRFFull
.86af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.86b2	29 03		and #$03			and 	#3
.86b4	f0 32		beq $86e8			beq 	_DRFFull 					; the whole word
.86b6	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.86b8	f0 07		beq $86c1			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.86ba					_DRFDereferenceTwo:
.86ba	a0 01		ldy #$01			ldy 	#1
.86bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.86be	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86c1					_DRFClear23:
.86c1	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.86c4	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.86ca	29 18		and #$18			and 	#NSBTypeMask
.86cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86cf	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.86d1	d0 12		bne $86e5			bne 	_DRFNotString
.86d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.86d6	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.86d9	d0 0a		bne $86e5			bne 	_DRFNotString
.86db	a9 e7		lda #$e7			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.86dd	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.86e0	a9 86		lda #$86			lda 	#_DRFNullString >> 8
.86e2	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.86e5					_DRFNotString
.86e5	7a		ply				ply 								; restore Y and exit
.86e6					_DRFExit:
.86e6	60		rts				rts
.86e7					_DRFNullString:
>86e7	00						.byte 	0
.86e8					_DRFFull:
.86e8	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.86ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.86ec	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86ef	c8		iny				iny
.86f0	b1 36		lda ($36),y			lda 	(zTemp0),y
.86f2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86f5	c8		iny				iny
.86f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.86f8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86fb	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.86fe	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8701	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8703	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8706	f0 06		beq $870e			beq 	_DRFNoExponent
.8708	c8		iny				iny 								; if not, read the exponent as well.
.8709	b1 36		lda ($36),y			lda 	(zTemp0),y
.870b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.870e					_DRFNoExponent:
.870e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8711	10 0d		bpl $8720			bpl 	_DRFExit2 					; if not, then exit.
.8713	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8715	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8718	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.871b	09 80		ora #$80			ora 	#NSBIsNegative
.871d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8720					_DRFExit2:
.8720	7a		ply				ply
.8721	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8722					EncodeNumberStart:
.8722	38		sec				sec
.8723	80 01		bra $8726			bra 	EncodeNumberContinue+1
.8725					EncodeNumberContinue:
.8725	18		clc				clc
.8726					EncodeNumber:
.8726	08		php				php 								; save reset.
.8727	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8729	f0 12		beq $873d			beq 	_ENIsOkay
.872b	c9 30		cmp #$30			cmp 	#"0"
.872d	90 04		bcc $8733			bcc 	_ENBadNumber
.872f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8731	90 0a		bcc $873d			bcc 	_ENIsOkay
.8733					_ENBadNumber:
.8733	28		plp				plp 								; throw saved reset
.8734	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8737	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8739	f0 7e		beq $87b9			beq 	_ENConstructFinal
.873b					_ENFail:
.873b	18		clc				clc 								; not allowed
.873c	60		rts				rts
.873d					_ENIsOkay:
.873d	28		plp				plp 								; are we restarting
.873e	90 15		bcc $8755			bcc 	_ENNoRestart
.8740					_ENStartEncode:
.8740	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8742	f0 0c		beq $8750			beq 	_ENFirstDP
.8744	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8746	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.8749	a9 01		lda #$01			lda 	#ESTA_Low
.874b					_ENExitChange:
.874b	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.874e	38		sec				sec
.874f	60		rts				rts
.8750					_ENFirstDP:
.8750	20 18 8c	jsr $8c18			jsr 	NSMSetZero 					; clear integer part
.8753	80 3f		bra $8794			bra 	_ESTASwitchFloat			; go straight to float and exi
.8755					_ENNoRestart:
.8755	48		pha				pha 								; save on stack.
.8756	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8759	c9 01		cmp #$01			cmp 	#ESTA_Low
.875b	f0 09		beq $8766			beq  	_ESTALowState
.875d	c9 02		cmp #$02			cmp 	#ESTA_High
.875f	f0 29		beq $878a			beq 	_ESTAHighState
.8761	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8763	f0 3b		beq $87a0			beq 	_ESTADecimalState
>8765	db						.byte 	$DB 						; causes a break in the emulator
.8766					_ESTALowState:
.8766	68		pla				pla 								; get value back
.8767	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8769	f0 29		beq $8794			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.876b	29 0f		and #$0f			and 	#15 						; make digit
.876d	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8770	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8773	0a		asl a				asl 	a
.8774	0a		asl a				asl 	a
.8775	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8778	0a		asl a				asl 	a
.8779	6d 06 07	adc $0706			adc 	DigitTemp
.877c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.877f	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8781	90 05		bcc $8788			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8783	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8785	8d 05 07	sta $0705			sta 	EncodeState
.8788					_ESTANoSwitch:
.8788	38		sec				sec
.8789	60		rts				rts
.878a					_ESTAHighState:
.878a	68		pla				pla 								; get value back
.878b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.878d	f0 05		beq $8794			beq 	_ESTASwitchFloat
.878f	20 f3 87	jsr $87f3			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8792	38		sec				sec
.8793	60		rts				rts
.8794					_ESTASwitchFloat:
.8794	9c 07 07	stz $0707			stz 	DecimalCount
.8797	e8		inx				inx 								; zero the decimal additive.
.8798	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.879b	ca		dex				dex
.879c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.879e	80 ab		bra $874b			bra 	_ENExitChange
.87a0					_ESTADecimalState:
.87a0	68		pla				pla 								; digit.
.87a1	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.87a3	f0 96		beq $873b			beq 	_ENFail
.87a5	e8		inx				inx 								; put digit into fractional part of X+1
.87a6	20 f3 87	jsr $87f3			jsr 	ESTAShiftDigitIntoMantissa
.87a9	ca		dex				dex
.87aa	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.87ad	ad 07 07	lda $0707			lda 	DecimalCount
.87b0	c9 0b		cmp #$0b			cmp 	#11
.87b2	f0 02		beq $87b6			beq 	_ESTADSFail
.87b4	38		sec				sec
.87b5	60		rts				rts
.87b6					_ESTADSFail:
.87b6	4c d1 95	jmp $95d1			jmp 	RangeError
.87b9					_ENConstructFinal:
.87b9	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.87bc	f0 33		beq $87f1			beq 	_ENCFExit 					; no decimals
.87be	5a		phy				phy
.87bf	0a		asl a				asl 	a 							; x 4 and CLC
.87c0	0a		asl a				asl 	a
.87c1	6d 07 07	adc $0707			adc 	DecimalCount
.87c4	a8		tay				tay
.87c5	b9 90 95	lda $9590,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.87c8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.87cb	b9 91 95	lda $9591,y			lda 	DecimalScalarTable-5+1,y
.87ce	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.87d1	b9 92 95	lda $9592,y			lda 	DecimalScalarTable-5+2,y
.87d4	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.87d7	b9 93 95	lda $9593,y			lda 	DecimalScalarTable-5+3,y
.87da	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.87dd	b9 94 95	lda $9594,y			lda 	DecimalScalarTable-5+4,y
.87e0	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.87e3	a9 08		lda #$08			lda 	#NSTFloat
.87e5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.87e8	7a		ply				ply
.87e9	e8		inx				inx 								; multiply decimal const by decimal scalar
.87ea	20 45 94	jsr $9445			jsr 	FloatMultiply
.87ed	ca		dex				dex
.87ee	20 da 92	jsr $92da			jsr 	FloatAdd 					; add to integer part.
.87f1					_ENCFExit:
.87f1	18		clc				clc 								; reject the digit.
.87f2	60		rts				rts
.87f3					ESTAShiftDigitIntoMantissa:
.87f3	29 0f		and #$0f			and 	#15 						; save digit
.87f5	48		pha				pha
.87f6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.87f9	48		pha				pha
.87fa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.87fd	48		pha				pha
.87fe	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8801	48		pha				pha
.8802	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8805	48		pha				pha
.8806	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 2
.8809	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 4
.880c	18		clc				clc 								; pop mantissa and add
.880d	68		pla				pla
.880e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8811	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8814	68		pla				pla
.8815	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8818	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.881b	68		pla				pla
.881c	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.881f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8822	68		pla				pla
.8823	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8826	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8829	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 10
.882c	68		pla				pla 								; add digit
.882d	18		clc				clc
.882e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8831	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8834	90 0d		bcc $8843			bcc 	_ESTASDExit
.8836	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8839	d0 08		bne $8843			bne 	_ESTASDExit
.883b	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.883e	d0 03		bne $8843			bne 	_ESTASDExit
.8840	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8843					_ESTASDExit:
.8843	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8844					EvaluateTerm:
.8844	b1 30		lda ($30),y			lda 	(codePtr),y
.8846	30 18		bmi $8860			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8848	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.884a	b0 6f		bcs $88bb			bcs 	_ETVariable
.884c	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.884e	90 6e		bcc $88be			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8850	c9 3a		cmp #$3a			cmp 	#'9'+1
.8852	b0 6a		bcs $88be			bcs 	_ETPuncUnary
.8854	20 22 87	jsr $8722			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8857					_ETNumber:
.8857	c8		iny				iny 								; keep encoding until we have the numbers
.8858	b1 30		lda ($30),y			lda 	(codePtr),y
.885a	20 25 87	jsr $8725			jsr 	EncodeNumberContinue
.885d	b0 f8		bcs $8857			bcs 	_ETNumber 					; go back if accepted.
.885f	60		rts				rts
.8860					_ETCheckUnary:
.8860	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8862	f0 41		beq $88a5			beq 	_ETString
.8864	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8866	f0 12		beq $887a			beq 	_ETHexConstant
.8868	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.886a	90 0b		bcc $8877			bcc 	_ETSyntaxError
.886c	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.886e	b0 07		bcs $8877			bcs 	_ETSyntaxError
.8870	da		phx				phx 								; push X on the stack
.8871	0a		asl a				asl 	a 							; put vector x 2 into X
.8872	aa		tax				tax
.8873	c8		iny				iny 								; consume unary function token
.8874	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8877					_ETSyntaxError:
.8877	4c cc 95	jmp $95cc			jmp 	SyntaxError
.887a					_ETHexConstant:
.887a	c8		iny				iny 								; skip #
.887b	c8		iny				iny 								; skip count
.887c	20 18 8c	jsr $8c18			jsr 	NSMSetZero 					; clear result
.887f					_ETHLoop:
.887f	b1 30		lda ($30),y			lda 	(codePtr),y
.8881	c8		iny				iny 								; and consume
.8882	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8884	f0 1e		beq $88a4			beq 	_ETHExit
.8886	48		pha				pha 								; save on stack.
.8887	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 2
.888a	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 4
.888d	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 8
.8890	20 2d 8c	jsr $8c2d			jsr 	NSMShiftLeft 				; x 16
.8893	68		pla				pla 								; ASCII
.8894	c9 41		cmp #$41			cmp 	#'A'
.8896	90 02		bcc $889a			bcc 	_ETHNotChar
.8898	e9 07		sbc #$07			sbc 	#7
.889a					_ETHNotChar:
.889a	29 0f		and #$0f			and 	#15 						; digit now
.889c	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.889f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88a2	80 db		bra $887f			bra 	_ETHLoop 					; go round.
.88a4					_ETHExit:
.88a4	60		rts				rts
.88a5					_ETString:
.88a5	c8		iny				iny 								; look at length
.88a6	b1 30		lda ($30),y			lda 	(codePtr),y
.88a8	48		pha				pha
.88a9	c8		iny				iny 								; first character
.88aa	20 fe 90	jsr $90fe			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.88ad	68		pla				pla 								; restore count and save
.88ae	85 36		sta $36				sta 	zTemp0
.88b0	98		tya				tya 								; add length to Y to skip it.
.88b1	18		clc				clc
.88b2	65 36		adc $36				adc 	zTemp0
.88b4	a8		tay				tay
.88b5	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.88b7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ba	60		rts				rts
.88bb					_ETVariable:
.88bb	4c 15 89	jmp $8915			jmp 	VariableHandler
.88be					_ETPuncUnary:
.88be	c8		iny				iny 								; consume the unary character
.88bf	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.88c1	f0 2d		beq $88f0			beq 	_ETUnaryNegate
.88c3	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.88c5	f0 39		beq $8900			beq 	_ETDereference
.88c7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.88c9	f0 43		beq $890e			beq 	_ETParenthesis
.88cb	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.88cd	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.88cf	f0 06		beq $88d7			beq 	_ETIndirection
.88d1	e6 36		inc $36				inc 	zTemp0
.88d3	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.88d5	d0 a0		bne $8877			bne 	_ETSyntaxError
.88d7					_ETIndirection:
.88d7	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.88d9	1a		inc a				inc 	a
.88da	48		pha				pha
.88db	20 44 88	jsr $8844			jsr 	EvaluateTerm				; evaluate the term
.88de	20 88 86	jsr $8688			jsr 	Dereference 				; dereference it.
.88e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.88e4	d0 07		bne $88ed			bne 	_ETTypeMismatch
.88e6	68		pla				pla 								; indirection 1-2
.88e7	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.88e9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ec	60		rts				rts
.88ed					_ETTypeMismatch:
.88ed	4c d6 95	jmp $95d6			jmp 	TypeError
.88f0					_ETUnaryNegate:
.88f0	20 44 88	jsr $8844			jsr 	EvaluateTerm				; evaluate the term
.88f3	20 88 86	jsr $8688			jsr 	Dereference 				; dereference it.
.88f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.88f9	29 10		and #$10			and 	#NSTString
.88fb	d0 f0		bne $88ed			bne 	_ETTypeMismatch
.88fd	4c c4 8b	jmp $8bc4			jmp 	NSMNegate  					; just toggles the sign bit.
.8900					_ETDereference:
.8900	20 44 88	jsr $8844			jsr 	EvaluateTerm				; evaluate the term
.8903	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8906	29 20		and #$20			and 	#NSBIsReference
.8908	f0 e3		beq $88ed			beq 	_ETTypeMismatch
.890a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.890d	60		rts				rts
.890e					_ETParenthesis:
.890e	20 fe 85	jsr $85fe			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8911	20 15 91	jsr $9115			jsr 	CheckRightBracket 			; check for )
.8914	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8915					VariableHandler:
.8915	b1 30		lda ($30),y			lda 	(codePtr),y
.8917	18		clc				clc
.8918	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.891a	85 37		sta $37				sta 	zTemp0+1
.891c	c8		iny				iny
.891d	b1 30		lda ($30),y			lda 	(codePtr),y
.891f	85 36		sta $36				sta 	zTemp0
.8921	c8		iny				iny
.8922	18		clc				clc									; copy variable address+3 to mantissa
.8923	69 03		adc #$03			adc 	#3
.8925	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8928	a5 37		lda $37				lda 	zTemp0+1
.892a	69 00		adc #$00			adc 	#0
.892c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.892f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8932	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8935	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8938	5a		phy				phy
.8939	a0 02		ldy #$02			ldy 	#2 							; read type
.893b	b1 36		lda ($36),y			lda 	(zTemp0),y
.893d	7a		ply				ply
.893e	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8940	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8942	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8945	29 04		and #$04			and 	#NSBIsArray
.8947	d0 01		bne $894a			bne 	_VHArray
.8949	60		rts				rts
.894a					_VHArray:
>894a	db						.byte 	$DB 						; causes a break in the emulator
.894b	80 fd		bra $894a			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.94cb					AbsUnary:
.94cb	fa		plx				plx 								; restore stack pos
.94cc	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber 				; get a float or int
.94cf	20 15 91	jsr $9115			jsr 	CheckRightBracket
.94d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.94d5	29 7f		and #$7f			and 	#$7F
.94d7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.894d					AllocUnary:
.894d	fa		plx				plx 								; restore stack pos
.894e	20 a4 8b	jsr $8ba4			jsr 	Evaluate16BitInteger		; get bytes required.
.8951	20 15 91	jsr $9115			jsr 	CheckRightBracket
.8954	da		phx				phx 								; save X/Y
.8955	5a		phy				phy
.8956	8a		txa				txa 								; copy X into Y
.8957	a8		tay				tay
.8958	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.895b	aa		tax				tax
.895c	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.895f	20 6c 89	jsr $896c			jsr 	AllocateXABytes 			; allocate memory
.8962	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8965	8a		txa				txa
.8966	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8969	7a		ply				ply
.896a	fa		plx				plx
.896b	60		rts				rts
.896c					AllocateXABytes:
.896c	5a		phy				phy
.896d	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8970	5a		phy				phy
.8971	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8974	5a		phy				phy
.8975	18		clc				clc
.8976	6d 0c 07	adc $070c			adc 	lowMemPtr
.8979	8d 0c 07	sta $070c			sta 	lowMemPtr
.897c	8a		txa				txa
.897d	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8980	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8983	fa		plx				plx
.8984	68		pla				pla
.8985	7a		ply				ply
.8986	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.94db					AscUnary:
.94db	fa		plx				plx 								; restore stack pos
.94dc	20 77 8b	jsr $8b77			jsr 	EvaluateString 				; get a string
.94df	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.94e1	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.94e4	20 15 91	jsr $9115			jsr 	CheckRightBracket
.94e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.94e8					FracUnary:
.94e8	fa		plx				plx 								; restore stack pos
.94e9	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber 				; get a float or int
.94ec	20 15 91	jsr $9115			jsr 	CheckRightBracket
.94ef	bd 00 06	lda $0600,x			lda 	NSStatus,x
.94f2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.94f4	f0 04		beq $94fa			beq 	_IUZero
.94f6	20 b8 93	jsr $93b8			jsr 	FloatFractionalPart
.94f9	60		rts				rts
.94fa					_IUZero:
.94fa	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.94fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.94fe					IntUnary:
.94fe	fa		plx				plx 								; restore stack pos
.94ff	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber 				; get a float or int
.9502	20 15 91	jsr $9115			jsr 	CheckRightBracket
.9505	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9508	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.950a	f0 03		beq $950f			beq 	_IUExit
.950c	20 1b 94	jsr $941b			jsr 	FloatIntegerPart
.950f					_IUExit:
.950f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9510					LenUnary:
.9510	fa		plx				plx 								; restore stack pos
.9511	20 77 8b	jsr $8b77			jsr 	EvaluateString 				; get a string
.9514	5a		phy				phy
.9515	a0 00		ldy #$00			ldy 	#0 							; find length
.9517					_LenFind:
.9517	b1 36		lda ($36),y			lda 	(zTemp0),y
.9519	f0 06		beq $9521			beq 	_LenExit
.951b	c8		iny				iny
.951c	d0 f9		bne $9517			bne 	_LenFind
.951e	4c d1 95	jmp $95d1			jmp 	RangeError 					; string > 255
.9521					_LenExit:
.9521	98		tya				tya
.9522	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.9525	7a		ply				ply
.9526	20 15 91	jsr $9115			jsr 	CheckRightBracket
.9529	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8987					Unary_Not:
.8987	fa		plx				plx
.8988	20 8f 8b	jsr $8b8f			jsr 	EvaluateInteger 			; get integer
.898b	20 15 91	jsr $9115			jsr 	CheckRightBracket
.898e	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; zero mantissa ?
.8991	f0 04		beq $8997			beq 	_NotZero
.8993	20 18 8c	jsr $8c18			jsr 	NSMSetZero
.8996	60		rts				rts
.8997					_NotZero:
.8997	4c b4 82	jmp $82b4			jmp 	ReturnTrue
.899a					_UNBad:
.899a	4c db 95	jmp $95db			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.899d					Unary_Rnd:
.899d	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber 				; number to use.
.89a0	20 15 91	jsr $9115			jsr 	CheckRightBracket 			; closing bracket
.89a3	20 cc 89	jsr $89cc			jsr 	Random32Bit 				; generate a number.
.89a6	ad 08 07	lda $0708			lda 	RandomSeed+0
.89a9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89ac	ad 09 07	lda $0709			lda 	RandomSeed+1
.89af	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89b2	ad 0a 07	lda $070a			lda 	RandomSeed+2
.89b5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89b8	ad 0b 07	lda $070b			lda 	RandomSeed+3
.89bb	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.89bd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89c0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.89c2	8d 28 06	sta $0628			sta 	NSExponent
.89c5	a9 08		lda #$08			lda 	#NSTFloat
.89c7	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>89ca	db						.byte 	$DB 						; causes a break in the emulator
.89cb	60		rts				rts
.89cc					Random32Bit:
.89cc	5a		phy				phy
.89cd	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.89cf	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.89d2	d0 03		bne $89d7			bne 	_Random1
.89d4	a8		tay				tay 								; if so do it 256 times
.89d5	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.89d7					_Random1:
.89d7	0a		asl a				asl 	a 							; LSFR RNG
.89d8	2e 09 07	rol $0709			rol 	RandomSeed+1
.89db	2e 0a 07	rol $070a			rol 	RandomSeed+2
.89de	2e 0b 07	rol $070b			rol 	RandomSeed+3
.89e1	90 02		bcc $89e5			bcc 	_Random2
.89e3	49 c5		eor #$c5			eor 	#$C5
.89e5					_Random2:
.89e5	88		dey				dey
.89e6	d0 ef		bne $89d7			bne 	_Random1
.89e8	7a		ply				ply
.89e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.952a					SgnUnary:
.952a	fa		plx				plx 								; restore stack pos
.952b	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber 				; get a float or int
.952e	20 15 91	jsr $9115			jsr 	CheckRightBracket
.9531	20 48 8c	jsr $8c48			jsr 	NSMIsZero 					; if zero
.9534	f0 10		beq $9546			beq 	_SGZero  					; return Int Zero
.9536	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9539	48		pha				pha
.953a	a9 01		lda #$01			lda 	#1 							; set to 1
.953c	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.953f	68		pla				pla
.9540	29 80		and #$80			and		#$80 						; copy the sign byte out
.9542	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9545	60		rts				rts
.9546	20 18 8c	jsr $8c18	_SGZero:jsr 	NSMSetZero
.9549	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.954a					ValUnary:
.954a	fa		plx				plx 								; restore stack pos
.954b	20 60 95	jsr $9560			jsr 	ValMainCode 				; do the main val() code
.954e	b0 01		bcs $9551			bcs 	_VUError 					; couldn't convert
.9550	60		rts				rts
.9551					_VUError:
.9551	4c d6 95	jmp $95d6			jmp 	TypeError
.9554					IsValUnary:
.9554	fa		plx				plx 								; restore stack pos
.9555	20 60 95	jsr $9560			jsr 	ValMainCode 				; do the main val() code
.9558	b0 03		bcs $955d			bcs 	_VUBad
.955a	4c b4 82	jmp $82b4			jmp 	ReturnTrue
.955d					_VUBad:
.955d	4c c0 82	jmp $82c0			jmp 	ReturnFalse
.9560					ValMainCode:
.9560	20 77 8b	jsr $8b77			jsr 	EvaluateString 				; get a string
.9563	20 15 91	jsr $9115			jsr 	CheckRightBracket 			; check right bracket present
.9566	5a		phy				phy
.9567	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9569	f0 17		beq $9582			beq 	_VMCFail2
.956b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.956d	48		pha				pha 								; save first character
.956e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9570	d0 01		bne $9573			bne 	_VMCStart
.9572	c8		iny				iny 								; skip over -
.9573					_VMCStart:
.9573	38		sec				sec 								; initialise first time round.
.9574					_VMCNext:
.9574	c8		iny				iny 								; pre-increment
.9575	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9577	f0 0c		beq $9585			beq 	_VMCSuccess 				; successful.
.9579	20 26 87	jsr $8726			jsr 	EncodeNumber 				; send it to the number-builder
.957c	90 03		bcc $9581			bcc 	_VMCFail 					; if failed, give up.
.957e	18		clc				clc 								; next time round, countinue
.957f	80 f3		bra $9574			bra 	_VMCNext
.9581					_VMCFail:
.9581	68		pla				pla
.9582					_VMCFail2:
.9582	7a		ply				ply
.9583	38		sec				sec
.9584	60		rts				rts
.9585					_VMCSuccess:
.9585	a9 00		lda #$00			lda 	#0 							; construct final
.9587	20 26 87	jsr $8726			jsr 	EncodeNumber
.958a	68		pla				pla
.958b	c9 2d		cmp #$2d			cmp 	#"-"
.958d	d0 03		bne $9592			bne 	_VMCNotNegative
.958f	20 c4 8b	jsr $8bc4			jsr		NSMNegate
.9592					_VMCNotNegative:
.9592	7a		ply				ply
.9593	18		clc				clc
.9594	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.89ea					ChrUnary:
.89ea	fa		plx				plx 								; restore stack pos
.89eb	20 b0 8b	jsr $8bb0			jsr 	Evaluate8BitInteger			; get value
.89ee	48		pha				pha
.89ef	20 15 91	jsr $9115			jsr 	CheckRightBracket
.89f2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.89f4	20 a1 96	jsr $96a1			jsr 	StringTempAllocate
.89f7	68		pla				pla 								; write number to it
.89f8	20 df 96	jsr $96df			jsr 	StringTempWrite
.89fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.89fc					SpcUnary:
.89fc	fa		plx				plx 								; restore stack pos
.89fd	20 b0 8b	jsr $8bb0			jsr 	Evaluate8BitInteger			; get value
.8a00	5a		phy				phy
.8a01	48		pha				pha 								; save count
.8a02	20 a1 96	jsr $96a1			jsr 	StringTempAllocate
.8a05	7a		ply				ply 								; to do count in Y
.8a06					_SpcLoop:
.8a06	c0 00		cpy #$00			cpy 	#0
.8a08	f0 08		beq $8a12			beq 	_SpcExit
.8a0a	a9 20		lda #$20			lda 	#32
.8a0c	20 df 96	jsr $96df			jsr 	StringTempWrite
.8a0f	88		dey				dey
.8a10	80 f4		bra $8a06			bra 	_SPCLoop
.8a12					_SpcExit:
.8a12	7a		ply				ply
.8a13	20 15 91	jsr $9115			jsr 	CheckRightBracket
.8a16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8a17					Unary_Str:
.8a17	fa		plx				plx
.8a18	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber  			; get number
.8a1b	20 15 91	jsr $9115			jsr 	CheckRightBracket 			; closing bracket
.8a1e	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8a20	20 39 8a	jsr $8a39			jsr 	ConvertNumberToString 		; do the conversion.
.8a23	a9 21		lda #$21			lda		#33 						; create buffer
.8a25	20 a1 96	jsr $96a1			jsr 	StringTempAllocate 			; allocate memory
.8a28	da		phx				phx
.8a29	a2 00		ldx #$00			ldx 	#0
.8a2b					_USCopy:
.8a2b	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a2e	20 df 96	jsr $96df			jsr 	StringTempWrite
.8a31	e8		inx				inx
.8a32	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a35	d0 f4		bne $8a2b			bne 	_USCopy
.8a37	fa		plx				plx
.8a38	60		rts				rts
.8a39					ConvertNumberToString:
.8a39	5a		phy				phy 								; save code position
.8a3a	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8a3d	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8a40	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8a43	10 0a		bpl $8a4f			bpl 	_CNTSNotNegative
.8a45	29 7f		and #$7f			and 	#$7F 						; make +ve
.8a47	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a4a	a9 2d		lda #$2d			lda 	#"-"
.8a4c	20 b5 8a	jsr $8ab5			jsr 	WriteDecimalBuffer
.8a4f					_CNTSNotNegative:
.8a4f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8a52	f0 15		beq $8a69			beq 	_CNTSNotFloat
.8a54	e8		inx				inx 								; round up
.8a55	a9 01		lda #$01			lda 	#1
.8a57	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.8a5a	ca		dex				dex
.8a5b	bd 28 06	lda $0628,x			lda		NSExponent,x
.8a5e	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8a61	a9 08		lda #$08			lda 	#NSTFloat
.8a63	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8a66	20 da 92	jsr $92da			jsr 	FloatAdd
.8a69					_CNTSNotFloat:
.8a69	20 97 8a	jsr $8a97			jsr 	MakePlusTwoString
.8a6c	20 b8 93	jsr $93b8			jsr 	FloatFractionalPart 		; get the fractional part
.8a6f	20 7c 94	jsr $947c			jsr 	NSNormalise					; normalise , exit if zero
.8a72	f0 21		beq $8a95			beq 	_CNTSExit
.8a74	a9 2e		lda #$2e			lda 	#"."
.8a76	20 b5 8a	jsr $8ab5			jsr 	WriteDecimalBuffer 			; write decimal place
.8a79					_CNTSDecimal:
.8a79	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8a7c	30 17		bmi $8a95			bmi 	_CNTSExit
.8a7e	e8		inx				inx 								; x 10.0
.8a7f	a9 0a		lda #$0a			lda 	#10
.8a81	20 1a 8c	jsr $8c1a			jsr 	NSMSetByte
.8a84	a9 08		lda #$08			lda 	#NSTFloat
.8a86	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a89	ca		dex				dex
.8a8a	20 45 94	jsr $9445			jsr 	FloatMultiply
.8a8d	20 97 8a	jsr $8a97			jsr 	MakePlusTwoString
.8a90	20 b8 93	jsr $93b8			jsr 	FloatFractionalPart 		; get the fractional part
.8a93	80 e4		bra $8a79			bra 	_CNTSDecimal 				; keep going.
.8a95					_CNTSExit:
.8a95	7a		ply				ply
.8a96	60		rts				rts
.8a97					MakePlusTwoString:
.8a97	da		phx				phx
.8a98	20 ef 8b	jsr $8bef			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8a9b	e8		inx				inx 								; access it
.8a9c	e8		inx				inx
.8a9d	20 1b 94	jsr $941b			jsr 	FloatIntegerPart 			; make it an integer
.8aa0	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8aa2	20 84 92	jsr $9284			jsr 	ConvertInt32
.8aa5	a2 00		ldx #$00			ldx	 	#0
.8aa7					_MPTSCopy:
.8aa7	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8aaa	20 b5 8a	jsr $8ab5			jsr 	WriteDecimalBuffer
.8aad	e8		inx				inx
.8aae	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ab1	d0 f4		bne $8aa7			bne 	_MPTSCopy
.8ab3	fa		plx				plx
.8ab4	60		rts				rts
.8ab5					WriteDecimalBuffer:
.8ab5	da		phx				phx
.8ab6	ae 14 07	ldx $0714			ldx 	dbOffset
.8ab9	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8abc	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8abf	ee 14 07	inc $0714			inc 	dbOffset
.8ac2	fa		plx				plx
.8ac3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8ac4					Unary_Left:
.8ac4	fa		plx				plx
.8ac5	18		clc				clc 								; only one parameter
.8ac6	20 3b 8b	jsr $8b3b			jsr 	SubstringInitial 			; set up.
.8ac9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8acc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8acf	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8ad2	80 2c		bra $8b00			bra 	SubstringMain
.8ad4					Unary_Right:
.8ad4	fa		plx				plx
.8ad5	18		clc				clc 								; only one parameter
.8ad6	20 3b 8b	jsr $8b3b			jsr 	SubstringInitial 			; set up.
.8ad9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8adc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8adf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8ae2	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8ae5	b0 02		bcs $8ae9			bcs 	_URNotUnderflow
.8ae7	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8ae9					_URNotUnderFlow:
.8ae9	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8aec	80 12		bra $8b00			bra 	SubStringMain
.8aee					Unary_Mid:
.8aee	fa		plx				plx
.8aef	38		sec				sec 								; two parameters
.8af0	20 3b 8b	jsr $8b3b			jsr 	SubstringInitial 			; set up.
.8af3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8af6	f0 05		beq $8afd			beq 	_UMError
.8af8	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8afb	80 03		bra $8b00			bra 	SubStringMain
.8afd					_UMError:
.8afd	4c db 95	jmp $95db			jmp 	ArgumentError
.8b00					SubStringMain:
.8b00	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8b03	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8b06	b0 2d		bcs $8b35			bcs 	_SSMNull 					; if so, return an empty string.
.8b08	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8b0b	f0 28		beq $8b35			beq 	_SSMNull 					; return empty string.
.8b0d	18		clc				clc 								; add the offset +1 to the address and
.8b0e	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8b11	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8b14	85 36		sta $36				sta 	zTemp0
.8b16	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8b19	69 00		adc #$00			adc 	#0
.8b1b	85 37		sta $37				sta 	zTemp0+1
.8b1d					_SSMNoCarry:
.8b1d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8b20	20 a1 96	jsr $96a1			jsr 	StringTempAllocate 			; allocate that many characters
.8b23	5a		phy				phy 								; save Y
.8b24	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8b26					_SSMCopy:
.8b26	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8b28	f0 09		beq $8b33			beq 	_SSMEString 				; no more to copy
.8b2a	20 df 96	jsr $96df			jsr 	StringTempWrite 			; and write it out.
.8b2d	c8		iny				iny
.8b2e	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8b31	d0 f3		bne $8b26			bne 	_SSMCopy
.8b33					_SSMEString:
.8b33	7a		ply				ply
.8b34					_SSMExit:
.8b34	60		rts				rts
.8b35					_SSMNull:
.8b35	a9 00		lda #$00			lda 	#0
.8b37	20 a1 96	jsr $96a1			jsr 	StringTempAllocate
.8b3a	60		rts				rts
.8b3b					SubstringInitial:
.8b3b	da		phx				phx 								; save initial stack position
.8b3c	08		php				php 								; save carry on stack indicating 2 parameters
.8b3d	20 77 8b	jsr $8b77			jsr 	EvaluateString 				; get a string
.8b40	5a		phy				phy 								; calculate length to exponent.
.8b41	a0 ff		ldy #$ff			ldy 	#$FF
.8b43					_SIFindLength:
.8b43	c8		iny				iny
.8b44	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b46	d0 fb		bne $8b43			bne 	_SIFindLength
.8b48	98		tya				tya
.8b49	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b4c	7a		ply				ply
.8b4d	e8		inx				inx
.8b4e	20 1d 91	jsr $911d			jsr 	CheckComma 					; comma next
.8b51	20 b0 8b	jsr $8bb0			jsr 	Evaluate8BitInteger 		; get next parameter
.8b54	28		plp				plp 								; is it the last parameter ?
.8b55	90 07		bcc $8b5e			bcc 	_SSIExit 					; if so, exit.
.8b57	e8		inx				inx
.8b58	20 1d 91	jsr $911d			jsr 	CheckComma 					; comma next
.8b5b	20 b0 8b	jsr $8bb0			jsr 	Evaluate8BitInteger 		; get last parameter
.8b5e					_SSIExit:
.8b5e	fa		plx				plx
.8b5f	20 15 91	jsr $9115			jsr 	CheckRightBracket 			; check closing bracket
.8b62	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8b63					EvaluateValue:
.8b63	48		pha				pha
.8b64	20 fe 85	jsr $85fe			jsr		EvaluateExpression 			; expression
.8b67	20 88 86	jsr $8688			jsr 	Dereference					; derefernce it
.8b6a	68		pla				pla
.8b6b	60		rts				rts
.8b6c					EvaluateNumber:
.8b6c	20 63 8b	jsr $8b63			jsr 	EvaluateValue 				; get a value
.8b6f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8b72	29 10		and #$10			and 	#NSBIsString
.8b74	d0 16		bne $8b8c			bne 	HelperTypeError
.8b76	60		rts				rts
.8b77					EvaluateString:
.8b77	20 63 8b	jsr $8b63			jsr 	EvaluateValue 				; get a value
.8b7a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8b7d	29 10		and #$10			and 	#NSBIsString
.8b7f	f0 0b		beq $8b8c			beq 	HelperTypeError
.8b81					CopyAddressToTemp0:
.8b81	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8b84	85 36		sta $36				sta 	zTemp0
.8b86	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b89	85 37		sta $37				sta 	zTemp0+1
.8b8b	60		rts				rts
.8b8c					HelperTypeError:
.8b8c	4c d6 95	jmp $95d6			jmp 	TypeError
.8b8f					EvaluateInteger:
.8b8f	20 6c 8b	jsr $8b6c			jsr 	EvaluateNumber
.8b92	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8b95	d0 0a		bne $8ba1			bne 	HelperValueError 			; if not, it's a float.
.8b97	60		rts				rts
.8b98					EvaluateUnsignedInteger:
.8b98	20 8f 8b	jsr $8b8f			jsr 	EvaluateInteger 			; check integer is +ve
.8b9b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b9e	30 01		bmi $8ba1			bmi 	HelperValueError
.8ba0	60		rts				rts
.8ba1					HelperValueError:
.8ba1	4c db 95	jmp $95db			jmp 	ArgumentError
.8ba4					Evaluate16BitInteger:
.8ba4	20 98 8b	jsr $8b98			jsr	 	EvaluateUnsignedInteger		; get integer
.8ba7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8baa	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8bad	d0 f2		bne $8ba1			bne 	HelperValueError
.8baf	60		rts				rts
.8bb0					Evaluate8BitInteger:
.8bb0	20 98 8b	jsr $8b98			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8bb3	d0 ec		bne $8ba1			bne 	HelperValueError
.8bb5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8bb8	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8bbb	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8bbe	d0 e1		bne $8ba1			bne 	HelperValueError
.8bc0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8bc4					NSMNegate:
.8bc4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8bc7	49 80		eor #$80			eor 	#NSBIsNegative
.8bc9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bcc	60		rts				rts
.8bcd					NSMNegateMantissa:
.8bcd	38		sec				sec
.8bce	a9 00		lda #$00			lda 	#0
.8bd0	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8bd3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bd6	a9 00		lda #$00			lda 	#0
.8bd8	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8bdb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bde	a9 00		lda #$00			lda 	#0
.8be0	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8be3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8be6	a9 00		lda #$00			lda 	#0
.8be8	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8beb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bee	60		rts				rts
.8bef					NSMShiftUpTwo:
.8bef	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bf2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bf5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bf8	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8bfb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8bfe	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c01	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c04	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c07	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8c0a	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c0d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c10	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c13	60		rts				rts
.8c14					NSMSetZeroMantissaOnly:
.8c14	a9 00		lda #$00			lda 	#0
.8c16	80 08		bra $8c20			bra 	NSMSetMantissa
.8c18					NSMSetZero:
.8c18	a9 00		lda #$00			lda 	#0
.8c1a					NSMSetByte:
.8c1a	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8c1d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8c20					NSMSetMantissa:
.8c20	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8c23	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8c26	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c29	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c2c	60		rts				rts
.8c2d					NSMShiftLeft:
.8c2d	18		clc				clc
.8c2e					NSMRotateLeft:
.8c2e	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8c31	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8c34	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8c37	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8c3a	60		rts				rts
.8c3b					NSMShiftRight:
.8c3b	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8c3e	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8c41	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8c44	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8c47	60		rts				rts
.8c48					NSMIsZero:
.8c48	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c4b	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8c4e	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8c51	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8c54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9595					DecimalScalarTable:
>9595	66 66 66 66				.dword $66666666 ; 0.1
>9599	de					.byte $de
>959a	1f 85 eb 51				.dword $51eb851f ; 0.01
>959e	db					.byte $db
>959f	4c 37 89 41				.dword $4189374c ; 0.001
>95a3	d8					.byte $d8
>95a4	ac 8b db 68				.dword $68db8bac ; 0.0001
>95a8	d4					.byte $d4
>95a9	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>95ad	d1					.byte $d1
>95ae	83 de 1b 43				.dword $431bde83 ; 1e-06
>95b2	ce					.byte $ce
>95b3	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>95b7	ca					.byte $ca
>95b8	89 3b e6 55				.dword $55e63b89 ; 1e-08
>95bc	c7					.byte $c7
>95bd	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>95c1	c4					.byte $c4
>95c2	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>95c6	c0					.byte $c0
>95c7	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>95cb	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.95cc					SyntaxError:
.95cc	a9 02		lda #$02		lda	#2
.95ce	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95d1					RangeError:
.95d1	a9 04		lda #$04		lda	#4
.95d3	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95d6					TypeError:
.95d6	a9 05		lda #$05		lda	#5
.95d8	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95db					ArgumentError:
.95db	a9 07		lda #$07		lda	#7
.95dd	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95e0					NotDoneError:
.95e0	a9 0c		lda #$0c		lda	#12
.95e2	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95e5					ErrorText:
>95e5	42 72 65 61 6b 00			.text	"Break",0
>95eb	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>95f3	72 72 6f 72 00
>95f8	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9600	20 62 79 20 7a 65 72 6f 00
>9609	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9611	61 6e 67 65 00
>9616	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>961e	6d 61 74 63 68 00
>9624	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>962c	65 6d 6f 72 79 00
>9632	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>963a	61 72 67 75 6d 65 6e 74 00
>9643	53 74 6f 70 00				.text	"Stop",0
>9648	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9650	6f 6f 20 6c 6f 6e 67 00
>9658	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9660	6e 20 66 61 69 6c 65 64 00
>9669	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9671	61 74 61 00
>9675	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>967d	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9683					StringSystemInitialise:
.9683	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.9685	8d 0e 07	sta $070e			sta 	0+StringMemory
.9688	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.968a	8d 0f 07	sta $070f			sta 	1+StringMemory
.968d	60		rts				rts
.968e					StringSpaceInitialise:
.968e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9690	8d 10 07	sta $0710			sta 	StringInitialised
.9693	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9696	8d 11 07	sta $0711			sta 	StringTempPointer
.9699	ad 0f 07	lda $070f			lda 	StringMemory+1
.969c	3a		dec a				dec 	a
.969d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96a0	60		rts				rts
.96a1					StringTempAllocate:
.96a1	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.96a3	b0 35		bcs $96da			bcs 	_STALength
.96a5	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.96a8	30 05		bmi $96af			bmi 	_STAAllocate
.96aa	48		pha				pha 								; save value to subtract.
.96ab	20 8e 96	jsr $968e			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.96ae	68		pla				pla 								; restore it
.96af					_STAAllocate:
.96af	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.96b1	18		clc				clc  								; deliberate allows one more
.96b2	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.96b5	8d 11 07	sta $0711			sta 	StringTempPointer
.96b8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.96bb	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.96bd	ad 12 07	lda $0712			lda 	StringTempPointer+1
.96c0	69 ff		adc #$ff			adc 	#$FF
.96c2	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96c5	85 3d		sta $3d				sta 	zsTemp+1
.96c7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96ca	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.96cd	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.96d0	a9 10		lda #$10			lda 	#NSTString
.96d2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96d5	a9 00		lda #$00			lda 	#0 							; clear the target string
.96d7	92 3c		sta ($3c)			sta 	(zsTemp)
.96d9	60		rts				rts
.96da					_STALength:
.96da	a9 09		lda #$09		lda	#9
.96dc	4c 4e 82	jmp $824e		jmp	ErrorHandler
.96df					StringTempWrite:
.96df	48		pha				pha
.96e0	92 3c		sta ($3c)			sta 	(zsTemp)
.96e2	e6 3c		inc $3c				inc 	zsTemp
.96e4	d0 02		bne $96e8			bne 	_STWNoCarry
.96e6	e6 3d		inc $3d				inc 	zsTemp+1
.96e8					_STWNoCarry:
.96e8	a9 00		lda #$00			lda 	#0
.96ea	92 3c		sta ($3c)			sta 	(zsTemp)
.96ec	68		pla				pla
.96ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8c55					BackloadProgram:
.8c55	a2 ff		ldx #$ff			ldx 	#$FF
.8c57	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8c5a	20 81 8c	jsr $8c81			jsr 	BLReadByte
.8c5d	30 1e		bmi $8c7d			bmi 	_BPExit
.8c5f					_BPCopy:
.8c5f	e8		inx				inx  								; copy byte in
.8c60	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8c63	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8c66	20 81 8c	jsr $8c81			jsr 	BLReadByte 					; read next byte
.8c69	30 0a		bmi $8c75			bmi 	_BPEndLine 					; -ve = EOL
.8c6b	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8c6d	d0 02		bne $8c71			bne 	_BPNotTab
.8c6f	a9 20		lda #$20			lda 	#' '
.8c71					_BPNotTab:
.8c71	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8c73	b0 ea		bcs $8c5f			bcs 	_BPCopy
.8c75					_BPEndLine:
.8c75	20 3d 8e	jsr $8e3d			jsr 	TokeniseLine 				; tokenise the line.
.8c78	20 cf 90	jsr $90cf			jsr 	MemoryAppend 				; append to current program
.8c7b	80 d8		bra $8c55			bra 	BackloadProgram
.8c7d					_BPExit:
.8c7d	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8c80	60		rts				rts
.8c81					BLReadByte:
.8c81					_BLLoad:
.8c81	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8c84	ee 82 8c	inc $8c82			inc 	_BLLoad+1
.8c87	d0 03		bne $8c8c			bne 	_BLNoCarry
.8c89	ee 83 8c	inc $8c83			inc 	_BLLoad+2
.8c8c					_BLNoCarry:
.8c8c	c9 00		cmp #$00			cmp 	#0
.8c8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8c8f					TokeniseSearchTable:
.8c8f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8c91	85 36		sta $36				sta 	zTemp0
.8c93	a0 00		ldy #$00			ldy 	#0
.8c95	a9 80		lda #$80			lda 	#$80 						; token #
.8c97	85 38		sta $38				sta 	zTemp1
.8c99					_TSTLoop:
.8c99	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8c9b	30 49		bmi $8ce6			bmi 	_TSTFail 					; -ve = end of table
.8c9d	f0 2e		beq $8ccd			beq 	_TSTNext 					; zero, check next it's a dummy
.8c9f	c8		iny				iny 								; get the hash
.8ca0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ca2	88		dey				dey
.8ca3	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8ca6	d0 25		bne $8ccd			bne 	_TSTNext
.8ca8	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8cab	38		sec				sec
.8cac	ed 00 07	sbc $0700			sbc 	identStart
.8caf	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8cb1	d0 1a		bne $8ccd			bne 	_TSTNext
.8cb3	5a		phy				phy 								; save Y , we might fail
.8cb4	c8		iny				iny 								; point to text
.8cb5	c8		iny				iny
.8cb6	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8cb9					_TSTCompareName:
.8cb9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8cbc	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8cbe	d0 0c		bne $8ccc			bne 	_TSTNextPullY 				; fail, pullY and do next
.8cc0	e8		inx				inx
.8cc1	c8		iny				iny
.8cc2	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8cc5	d0 f2		bne $8cb9			bne 	_TSTCompareName
.8cc7	7a		ply				ply 								; throw Y
.8cc8	a5 38		lda $38				lda 	zTemp1 						; get token #
.8cca	38		sec				sec 								; return with CS = passed.
.8ccb	60		rts				rts
.8ccc					_TSTNextPullY:
.8ccc	7a		ply				ply 								; restore current, fall through.
.8ccd					_TSTNext:
.8ccd	e6 38		inc $38				inc 	zTemp1 						; token counter
.8ccf	98		tya				tya
.8cd0	18		clc				clc
.8cd1	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8cd3	1a		inc a				inc 	a 							; +1
.8cd4	1a		inc a				inc 	a 							; +2
.8cd5	a8		tay				tay
.8cd6	10 c1		bpl $8c99			bpl 	_TSTLoop 					; if Y < $80 loop back
.8cd8	98		tya				tya 								; add Y to zTemp0 and reset Y
.8cd9	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8cdb	18		clc				clc  								; but have tables > 255 bytes
.8cdc	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8cde	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8ce0	90 b7		bcc $8c99			bcc 	_TSTLoop
.8ce2	e6 37		inc $37				inc 	zTemp0+1
.8ce4	80 b3		bra $8c99			bra 	_TSTLoop
.8ce6					_TSTFail:
.8ce6	18		clc				clc
.8ce7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8ce8					KeywordSet0:
>8ce8	00 65					.text	0,$65,""               ; $80 !0:EOF
>8cea	00 58					.text	0,$58,""               ; $81 !1:SH1
>8cec	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8cee	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8cf4	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8cfc	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8d02	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8d09	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8d10	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8d17	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8d1d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8d25	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8d2d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8d33	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8d3a	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8d40	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8d48	28
>8d49	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8d4f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8d55	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8d5b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8d62	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8d68	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8d6e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8d73	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8d77	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8d7d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8d85	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8d8c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8d93	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8d9b	43
>8d9c	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8da2	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8da9	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8daf	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8db5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8dba	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8dc0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8dc5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8dcc	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8dd2	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8dd7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8dde	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8de4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8de9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8df1	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8df7	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8dfb	ff					.text	$FF
.8dfc					KeywordSet1:
>8dfc	00 65					.text	0,$65,""               ; $80 !0:EOF
>8dfe	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e00	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e02	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8e0a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8e11	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8e16	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8e1c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8e21	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8e29	45
>8e2a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8e2f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8e35	ff					.text	$FF
.8e36					KeywordSet2:
>8e36	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e38	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e3a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e3c	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8e3d					TokeniseLine:
.8e3d	20 c5 8f	jsr $8fc5			jsr 	FixLineBufferCase 			; fix line case
.8e40	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8e42	8d 15 07	sta $0715			sta 	tokenOffset
.8e45	9c 16 07	stz $0716			stz 	tokenLineNumber
.8e48	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8e4b	a2 ff		ldx #$ff			ldx 	#$FF
.8e4d					_TKFindFirst:
.8e4d	e8		inx				inx
.8e4e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e51	f0 79		beq $8ecc			beq 	_TKExit
.8e53	c9 20		cmp #$20			cmp 	#' '
.8e55	90 f6		bcc $8e4d			bcc 	_TKFindFirst
.8e57	c9 30		cmp #$30			cmp 	#'0'
.8e59	90 07		bcc $8e62			bcc 	_TKNoLineNumber
.8e5b	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e5d	b0 03		bcs $8e62			bcs 	_TKNoLineNumber
.8e5f	20 ef 8f	jsr $8fef			jsr 	TokeniseExtractLineNumber
.8e62					_TKNoLineNumber:
.8e62					_TKTokeniseLoop:
.8e62	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8e65	f0 65		beq $8ecc			beq 	_TKExit
.8e67	e8		inx				inx
.8e68	c9 20		cmp #$20			cmp 	#' '
.8e6a	f0 f6		beq $8e62			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8e6c	ca		dex				dex 								; undo last get, A contains character, X is position.
.8e6d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8e6f	f0 61		beq $8ed2			beq 	_TKTokeniseIdentifier
.8e71	c9 41		cmp #$41			cmp 	#'A'
.8e73	90 04		bcc $8e79			bcc 	_TKTokenisePunctuation
.8e75	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8e77	90 59		bcc $8ed2			bcc 	_TKTokeniseIdentifier
.8e79					_TKTokenisePunctuation:
.8e79	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8e7b	f0 27		beq $8ea4			beq 	_TKString
.8e7d	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8e7f	f0 28		beq $8ea9			beq 	_TKHexConstant
.8e81	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8e83	f0 29		beq $8eae			beq 	_TKCheckDouble
.8e85	c9 3e		cmp #$3e			cmp 	#'>'
.8e87	f0 25		beq $8eae			beq 	_TKCheckDouble
.8e89					_TKStandardPunctuation:
.8e89	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8e8c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8e8e	90 0e		bcc $8e9e			bcc 	_TKNoShift
.8e90	48		pha				pha 								; save
.8e91	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8e93	85 36		sta $36				sta 	zTemp0
.8e95	68		pla				pla
.8e96	29 20		and #$20			and 	#32 						; bit 5
.8e98	4a		lsr a				lsr 	a 							; shift into bit 3
.8e99	4a		lsr a				lsr 	a
.8e9a	05 36		ora $36				ora 	zTemp0
.8e9c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8e9e					_TKNoShift:
.8e9e	20 34 90	jsr $9034			jsr 	TokeniseWriteByte 			; write the punctuation character
.8ea1	e8		inx				inx 								; consume the character
.8ea2	80 be		bra $8e62			bra 	_TKTokeniseLoop 			; and loop round again.
.8ea4					_TKString:
.8ea4	20 54 8f	jsr $8f54			jsr 	TokeniseString
.8ea7	80 b9		bra $8e62			bra 	_TKTokeniseLoop
.8ea9					_TKHexConstant:
.8ea9	20 8f 8f	jsr $8f8f			jsr 	TokeniseHexConstant
.8eac	80 b4		bra $8e62			bra 	_TKTokeniseLoop
.8eae					_TKCheckDouble:
.8eae	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8eb1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8eb3	90 d4		bcc $8e89			bcc 	_TKStandardPunctuation
.8eb5	c9 3f		cmp #$3f			cmp 	#'>'+1
.8eb7	b0 d0		bcs $8e89			bcs 	_TKStandardPunctuation
.8eb9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8ebc	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8ebe	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8ebf	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8ec2	38		sec				sec
.8ec3	e9 3c		sbc #$3c			sbc 	#'<'
.8ec5	20 34 90	jsr $9034			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ec8	e8		inx				inx 								; consume both
.8ec9	e8		inx				inx
.8eca	80 96		bra $8e62			bra 	_TKTokeniseLoop
.8ecc	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8ece	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8ed1	60		rts				rts
.8ed2					_TKTokeniseIdentifier:
.8ed2	8e 00 07	stx $0700			stx 	identStart 					; save start
.8ed5	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8ed8					_TKCheckLoop:
.8ed8	e8		inx				inx 								; look at next, we know first is identifier.
.8ed9	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8edc	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8ede	f0 f8		beq $8ed8			beq 	_TKCheckLoop
.8ee0	c9 30		cmp #$30			cmp	 	#"0"
.8ee2	90 0c		bcc $8ef0			bcc 	_TKEndIdentifier
.8ee4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ee6	90 f0		bcc $8ed8			bcc 	_TKCheckLoop
.8ee8	c9 41		cmp #$41			cmp	 	#"A"
.8eea	90 04		bcc $8ef0			bcc 	_TKEndIdentifier
.8eec	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8eee	90 e8		bcc $8ed8			bcc 	_TKCheckLoop
.8ef0					_TKEndIdentifier:
.8ef0	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8ef3	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8ef5	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8ef7	f0 06		beq $8eff			beq 	_TKHasTypeCharacter
.8ef9	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8efb	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8efd	d0 07		bne $8f06			bne 	_TKNoTypeCharacter
.8eff					_TKHasTypeCharacter:
.8eff	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8f02	e8		inx				inx 								; read next
.8f03	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f06					_TKNoTypeCharacter:
.8f06	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8f08	d0 09		bne $8f13			bne 	_TKNoArray
.8f0a	e8		inx				inx 								; skip the (
.8f0b	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8f0e	09 04		ora #$04			ora 	#$04
.8f10	8d 04 07	sta $0704			sta 	identTypeByte
.8f13					_TKNoArray:
.8f13	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8f16	20 b0 8f	jsr $8fb0			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8f19	a0 8c		ldy #$8c			ldy 	#(KeywordSet0) >> 8
.8f1b	a9 e8		lda #$e8			lda 	#(KeywordSet0) & $FF
.8f1d	20 8f 8c	jsr $8c8f			jsr 	TokeniseSearchTable
.8f20	a2 00		ldx #$00			ldx 	#0
.8f22	b0 1f		bcs $8f43			bcs 	_TKFoundToken
.8f24	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8f26	a9 fc		lda #$fc			lda 	#(KeywordSet1) & $FF
.8f28	20 8f 8c	jsr $8c8f			jsr 	TokeniseSearchTable
.8f2b	a2 81		ldx #$81			ldx 	#$81
.8f2d	b0 14		bcs $8f43			bcs 	_TKFoundToken
.8f2f	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8f31	a9 fc		lda #$fc			lda 	#(KeywordSet1) & $FF
.8f33	20 8f 8c	jsr $8c8f			jsr 	TokeniseSearchTable
.8f36	a2 82		ldx #$82			ldx 	#$82
.8f38	b0 09		bcs $8f43			bcs 	_TKFoundToken
.8f3a	20 40 90	jsr $9040			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8f3d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f40	4c 62 8e	jmp $8e62			jmp 	_TKTokeniseLoop 			; and go round again.
.8f43					_TKFoundToken:
.8f43	48		pha				pha 								; save token
.8f44	8a		txa				txa 								; shift in X, is there one ?
.8f45	f0 03		beq $8f4a			beq 	_TKNoTShift
.8f47	20 34 90	jsr $9034			jsr 	TokeniseWriteByte 			; if so, write it out
.8f4a					_TKNoTShift:
.8f4a	68		pla				pla 								; restore and write token
.8f4b	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f4e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f51	4c 62 8e	jmp $8e62			jmp 	_TKTokeniseLoop 			; and go round again.
.8f54					TokeniseString:
.8f54	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8f56	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f59	e8		inx				inx									; start of quoted string.
.8f5a	da		phx				phx 								; push start of string on top
.8f5b	ca		dex				dex
.8f5c					_TSFindEnd:
.8f5c	e8		inx				inx
.8f5d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8f60	f0 04		beq $8f66			beq 	_TSEndOfString
.8f62	c9 22		cmp #$22			cmp 	#'"'
.8f64	d0 f6		bne $8f5c			bne 	_TSFindEnd
.8f66					_TSEndOfString:
.8f66	7a		ply				ply  								; so now Y is first character, X is character after end.
.8f67	48		pha				pha 								; save terminating character
.8f68	20 70 8f	jsr $8f70			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8f6b	68		pla				pla 								; terminating character
.8f6c	f0 01		beq $8f6f			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8f6e	e8		inx				inx
.8f6f					_TSNotQuote:
.8f6f	60		rts				rts
.8f70					TOWriteBlockXY:
.8f70	86 36		stx $36				stx 	zTemp0 						; write end character
.8f72	98		tya				tya
.8f73	49 ff		eor #$ff			eor 	#$FF
.8f75	38		sec				sec
.8f76	65 36		adc $36				adc 	zTemp0
.8f78	1a		inc a				inc 	a 							; one extra for NULL
.8f79	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f7c					_TOBlockLoop:
.8f7c	c4 36		cpy $36				cpy 	zTemp0
.8f7e	f0 09		beq $8f89			beq 	_TOBlockExit
.8f80	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8f83	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f86	c8		iny				iny
.8f87	80 f3		bra $8f7c			bra 	_TOBlockLoop
.8f89					_TOBlockExit:
.8f89	a9 00		lda #$00			lda 	#0
.8f8b	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f8e	60		rts				rts
.8f8f					TokeniseHexConstant:
.8f8f	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8f91	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.8f94	e8		inx				inx									; start of quoted string.
.8f95	da		phx				phx 								; push start of constant on top
.8f96	ca		dex				dex
.8f97					_THFindLoop:
.8f97	e8		inx				inx
.8f98	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f9b	c9 30		cmp #$30			cmp 	#"0"
.8f9d	90 0c		bcc $8fab			bcc 	_THFoundEnd
.8f9f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fa1	90 f4		bcc $8f97			bcc 	_THFindLoop
.8fa3	c9 41		cmp #$41			cmp 	#"A"
.8fa5	90 04		bcc $8fab			bcc 	_THFoundEnd
.8fa7	c9 47		cmp #$47			cmp 	#"F"+1
.8fa9	90 ec		bcc $8f97			bcc 	_THFindLoop
.8fab					_THFoundEnd:
.8fab	7a		ply				ply 								; restore start
.8fac	20 70 8f	jsr $8f70			jsr 	TOWriteBlockXY 				; output the block
.8faf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.8fb0					TokeniseCalculateHash:
.8fb0	da		phx				phx
.8fb1	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8fb4	a9 00		lda #$00			lda 	#0
.8fb6					_TCHLoop:
.8fb6	18		clc				clc
.8fb7	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8fba	e8		inx				inx
.8fbb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8fbe	d0 f6		bne $8fb6			bne 	_TCHLoop
.8fc0	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8fc3	fa		plx				plx
.8fc4	60		rts				rts
.8fc5					FixLineBufferCase:
.8fc5	a2 00		ldx #$00			ldx 	#0
.8fc7					_FLBCLoop:
.8fc7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8fca	f0 22		beq $8fee			beq 	_FLBCExit 					; end of string.
.8fcc	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8fce	f0 11		beq $8fe1			beq 	_FLBCInQuotes
.8fd0	e8		inx				inx
.8fd1	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8fd3	90 f2		bcc $8fc7			bcc 	_FLBCLoop
.8fd5	c9 7b		cmp #$7b			cmp 	#'z'+1
.8fd7	b0 ee		bcs $8fc7			bcs 	_FLBCLoop
.8fd9	38		sec				sec 								; make U/C
.8fda	e9 20		sbc #$20			sbc 	#32
.8fdc	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8fdf	80 e6		bra $8fc7			bra 	_FLBCLoop
.8fe1					_FLBCInQuotes:
.8fe1	e8		inx				inx 								; advance
.8fe2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8fe5	f0 07		beq $8fee			beq 	_FLBCExit 					; exit on EOS
.8fe7	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8fe9	d0 f6		bne $8fe1			bne 	_FLBCInQuotes
.8feb	e8		inx				inx 								; skip over it
.8fec	80 d9		bra $8fc7			bra 	_FLBCLoop
.8fee					_FLBCExit:
.8fee	60		rts				rts
.8fef					TokeniseExtractLineNumber:
.8fef	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8ff2	48		pha				pha
.8ff3	ad 16 07	lda $0716			lda 	tokenLineNumber
.8ff6	48		pha				pha
.8ff7	20 2d 90	jsr $902d			jsr 	_TELNTimes2 				; line # x 4
.8ffa	20 2d 90	jsr $902d			jsr 	_TELNTimes2 				; line # x 2
.8ffd	18		clc				clc 								; add stacked value
.8ffe	68		pla				pla
.8fff	6d 16 07	adc $0716			adc 	tokenLineNumber
.9002	8d 16 07	sta $0716			sta 	tokenLineNumber
.9005	68		pla				pla
.9006	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9009	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.900c	20 2d 90	jsr $902d			jsr 	_TELNTimes2 				; line # x 10
.900f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9012	e8		inx				inx
.9013	29 0f		and #$0f			and 	#15 						; add to line #
.9015	18		clc				clc
.9016	6d 16 07	adc $0716			adc 	tokenLineNumber
.9019	8d 16 07	sta $0716			sta 	tokenLineNumber
.901c	90 03		bcc $9021			bcc 	_TLENNoCarry
.901e	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9021					_TLENNoCarry:
.9021	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9024	c9 30		cmp #$30			cmp 	#'0'
.9026	90 04		bcc $902c			bcc 	_TLENExit
.9028	c9 3a		cmp #$3a			cmp 	#'9'+1
.902a	90 c3		bcc $8fef			bcc 	TokeniseExtractLineNumber
.902c					_TLENExit:
.902c	60		rts				rts
.902d					_TELNTimes2:
.902d	0e 16 07	asl $0716			asl 	tokenLineNumber
.9030	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9033	60		rts				rts
.9034					TokeniseWriteByte:
.9034	da		phx				phx
.9035	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9038	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.903b	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.903e	fa		plx				plx
.903f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9040					CheckCreateVariableRecord:
.9040	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9042	85 36		sta $36				sta 	0+zTemp0
.9044	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9046	85 37		sta $37				sta 	1+zTemp0
.9048	20 13 91	jsr $9113			jsr 	VariableOpen 				; make variable space available
.904b					_CCVSearch:
.904b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.904d	f0 2c		beq $907b			beq 	_CCVFail
.904f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9051	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9053	cd 03 07	cmp $0703			cmp 	identHash
.9056	d0 16		bne $906e			bne 	_CCVNext
.9058	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.905a	ae 00 07	ldx $0700			ldx 	identStart
.905d					_CCVCompare:
.905d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9060	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9062	e8		inx				inx 								; advance pointers
.9063	c8		iny				iny
.9064	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9065	d0 07		bne $906e			bne 	_CCVNext  					; didn't match go to next.
.9067	90 f4		bcc $905d			bcc 	_CCVCompare 				; not finished yet.
.9069	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.906c	f0 41		beq $90af			beq 	_CCVFound 					; yes, we were successful
.906e					_CCVNext:
.906e	18		clc				clc
.906f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9071	65 36		adc $36				adc 	zTemp0
.9073	85 36		sta $36				sta 	zTemp0
.9075	90 d4		bcc $904b			bcc 	_CCVSearch
.9077	e6 37		inc $37				inc 	zTemp0+1
.9079	80 d0		bra $904b			bra 	_CCVSearch
.907b					_CCVFail:
.907b	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.907d	ad 03 07	lda $0703			lda 	identHash
.9080	91 36		sta ($36),y			sta 	(zTemp0),y
.9082	c8		iny				iny 								; offset 2 is the type byte
.9083	ad 04 07	lda $0704			lda 	identTypeByte
.9086	91 36		sta ($36),y			sta 	(zTemp0),y
.9088	c8		iny				iny
.9089					_CCVData:
.9089	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.908b	91 36		sta ($36),y			sta 	(zTemp0),y
.908d	c8		iny				iny
.908e	c0 08		cpy #$08			cpy 	#8
.9090	90 f7		bcc $9089			bcc 	_CCVData
.9092	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9095					_CCVCopyName:
.9095	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9098	91 36		sta ($36),y			sta 	(zTemp0),y
.909a	e8		inx				inx
.909b	c8		iny				iny
.909c	ec 02 07	cpx $0702			cpx 	identTypeEnd
.909f	d0 f4		bne $9095			bne 	_CCVCopyName
.90a1	98		tya				tya 								; patch offset
.90a2	92 36		sta ($36)			sta 	(zTemp0)
.90a4	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.90a6	91 36		sta ($36),y			sta 	(zTemp0),y
.90a8	88		dey				dey
.90a9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.90ab	09 80		ora #$80			ora 	#$80
.90ad	91 36		sta ($36),y			sta 	(zTemp0),y
.90af					_CCVFound:
.90af	20 14 91	jsr $9114			jsr 	VariableClose 				; map out variables, perhaps.
.90b2	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.90b4	38		sec				sec
.90b5	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.90b7	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.90b9	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.90bc	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.90be	20 34 90	jsr $9034			jsr 	TokeniseWriteByte
.90c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.96ee					MemoryPeek:
.96ee	b2 36		lda ($36)			lda 	(zTemp0)
.96f0	60		rts				rts
.96f1					MemoryPoke:
.96f1	92 36		sta ($36)			sta 	(zTemp0)
.96f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.96f4					EXTPrintCharacter:
.96f4	48		pha				pha
.96f5	da		phx				phx
.96f6	5a		phy				phy
.96f7	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.96fa	7a		ply				ply
.96fb	fa		plx				plx
.96fc	68		pla				pla
.96fd	60		rts				rts
.96fe					EXTInputSingleCharacter:
.96fe	da		phx				phx
.96ff	5a		phy				phy
.9700					_EISCWait:
.9700	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9703	c9 00		cmp #$00			cmp 	#0
.9705	f0 f9		beq $9700			beq 	_EISCWait
.9707	7a		ply				ply
.9708	fa		plx				plx
.9709	60		rts				rts
.970a					EXTInputLine:
.970a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.970c					_ILLoop:
.970c	da		phx				phx 								; read character in
.970d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9710	fa		plx				plx
.9711	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9713	f0 12		beq $9727			beq 	_ILBackspace
.9715	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9717	f0 15		beq $972e			beq 	_ILExit
.9719	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.971b	90 ef		bcc $970c			bcc 	_ILLoop
.971d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.971f	f0 eb		beq $970c			beq 	_ILLoop
.9721	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9724	e8		inx				inx
.9725	80 e5		bra $970c			bra 	_ILLoop
.9727					_ILBackspace:
.9727	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9729	f0 e1		beq $970c			beq 	_ILLoop
.972b	ca		dex				dex 								; back one.
.972c	80 de		bra $970c			bra 	_ILLoop
.972e					_ILExit:
.972e	20 f4 96	jsr $96f4			jsr 	EXTPrintCharacter
.9731	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9734	60		rts				rts
.9735					EXTBreakCheck:
.9735	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.90c2					MemoryNew:
.90c2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.90c4	85 30		sta $30				sta 	codePtr
.90c6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.90c8	85 31		sta $31				sta 	codePtr+1
.90ca	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.90cc	92 30		sta ($30)			sta 	(codePtr)
.90ce	60		rts				rts
.90cf					MemoryAppend:
.90cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.90d1	85 30		sta $30				sta 	codePtr
.90d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.90d5	85 31		sta $31				sta 	codePtr+1
.90d7					_MAFindEnd:
.90d7	b2 30		lda ($30)			lda 	(codePtr)
.90d9	f0 0d		beq $90e8			beq 	_MAFoundEnd
.90db	18		clc				clc
.90dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.90de	65 30		adc $30				adc 	codePtr
.90e0	85 30		sta $30				sta 	codePtr
.90e2	90 02		bcc $90e6			bcc 	_CREExit
.90e4	e6 31		inc $31				inc 	codePtr+1
.90e6					_CREExit:
.90e6	80 ef		bra $90d7			bra 	_MAFindEnd
.90e8					_MAFoundEnd:
.90e8	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.90eb	c0 04		cpy #$04			cpy 	#4 							; blank line
.90ed	f0 0e		beq $90fd			beq 	_MANoLine
.90ef	a9 00		lda #$00			lda 	#0 							; end of program
.90f1	91 30		sta ($30),y			sta 	(codePtr),y
.90f3					_MACopy:
.90f3	88		dey				dey
.90f4	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.90f7	91 30		sta ($30),y			sta 	(codePtr),y
.90f9	c0 00		cpy #$00			cpy 	#0
.90fb	d0 f6		bne $90f3			bne 	_MACopy
.90fd					_MANoLine:
.90fd	60		rts				rts
.90fe					MemoryInline:
.90fe	98		tya				tya 								; put address into stack,x
.90ff	18		clc				clc
.9100	65 30		adc $30				adc 	codePtr
.9102	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9105	a5 31		lda $31				lda 	codePtr+1
.9107	69 00		adc #$00			adc 	#0
.9109	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.910c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.910f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9112	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.9113					VariableOpen:
.9113	60		rts				rts
.9114					VariableClose:
.9114	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
