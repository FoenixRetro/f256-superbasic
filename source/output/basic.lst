
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 21:18:47 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_STACK = 17
=18					ERRID_STRUCT = 18

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ad 82	jsr $82ad			jsr 	NewCommand 					; erase current program
.8006	20 6e 8f	jsr $8f6e			jsr 	BackloadProgram
.8009	4c 3d 83	jmp $833d			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	cd 85					.word	ShiftLeft                        ; $00 <<
>8016	c7 84					.word	BinaryCompareLessEqual           ; $01 <=
>8018	bd 84					.word	BinaryCompareNotEqual            ; $02 <>
>801a	22 99					.word	SyntaxError                      ; $03 !!3
>801c	22 99					.word	SyntaxError                      ; $04 ><
>801e	d1 84					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	d0 85					.word	ShiftRight                       ; $06 >>
>8022	22 99					.word	SyntaxError                      ; $07 !!7
>8024	22 99					.word	SyntaxError                      ; $08 !!8
>8026	22 99					.word	SyntaxError                      ; $09 !!9
>8028	22 99					.word	SyntaxError                      ; $0a !!10
>802a	22 99					.word	SyntaxError                      ; $0b !!11
>802c	22 99					.word	SyntaxError                      ; $0c !!12
>802e	22 99					.word	SyntaxError                      ; $0d !!13
>8030	22 99					.word	SyntaxError                      ; $0e !!14
>8032	22 99					.word	SyntaxError                      ; $0f !!15
>8034	22 99					.word	SyntaxError                      ; $10 @
>8036	22 99					.word	SyntaxError                      ; $11 !!17
>8038	22 99					.word	SyntaxError                      ; $12 !!18
>803a	22 99					.word	SyntaxError                      ; $13 [
>803c	82 94					.word	IntegerDivide                    ; $14 \
>803e	22 99					.word	SyntaxError                      ; $15 ]
>8040	56 87					.word	EorInteger                       ; $16 ^
>8042	22 99					.word	SyntaxError                      ; $17 _
>8044	22 99					.word	SyntaxError                      ; $18 `
>8046	22 99					.word	SyntaxError                      ; $19 !!25
>8048	22 99					.word	SyntaxError                      ; $1a !!26
>804a	22 99					.word	SyntaxError                      ; $1b {
>804c	10 87					.word	OraInteger                       ; $1c |
>804e	22 99					.word	SyntaxError                      ; $1d }
>8050	22 99					.word	SyntaxError                      ; $1e ~
>8052	22 99					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	22 99					.word	SyntaxError                      ; $20
>8056	9c 87					.word	WordIndirect                     ; $21 !
>8058	22 99					.word	SyntaxError                      ; $22 "
>805a	22 99					.word	SyntaxError                      ; $23 #
>805c	22 99					.word	SyntaxError                      ; $24 $
>805e	cf 94					.word	IntegerModulus                   ; $25 %
>8060	ca 86					.word	AndInteger                       ; $26 &
>8062	22 99					.word	SyntaxError                      ; $27 '
>8064	22 99					.word	SyntaxError                      ; $28 (
>8066	22 99					.word	SyntaxError                      ; $29 )
>8068	44 95					.word	MulInteger                       ; $2a *
>806a	64 86					.word	AddInteger                       ; $2b +
>806c	22 99					.word	SyntaxError                      ; $2c ,
>806e	9f 86					.word	SubInteger                       ; $2d -
>8070	22 99					.word	SyntaxError                      ; $2e .
>8072	db 96					.word	FDivideCommand                   ; $2f /
>8074	22 99					.word	SyntaxError                      ; $30 0
>8076	22 99					.word	SyntaxError                      ; $31 1
>8078	22 99					.word	SyntaxError                      ; $32 2
>807a	22 99					.word	SyntaxError                      ; $33 3
>807c	22 99					.word	SyntaxError                      ; $34 4
>807e	22 99					.word	SyntaxError                      ; $35 5
>8080	22 99					.word	SyntaxError                      ; $36 6
>8082	22 99					.word	SyntaxError                      ; $37 7
>8084	22 99					.word	SyntaxError                      ; $38 8
>8086	22 99					.word	SyntaxError                      ; $39 9
>8088	22 99					.word	SyntaxError                      ; $3a :
>808a	22 99					.word	SyntaxError                      ; $3b ;
>808c	a9 84					.word	BinaryCompareLess                ; $3c <
>808e	9f 84					.word	BinaryCompareEqual               ; $3d =
>8090	b3 84					.word	BinaryCompareGreater             ; $3e >
>8092	c3 87					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	88 83					.word	EOLCommand                       ; $80 !0:EOF
>8096	95 83					.word	Shift1Command                    ; $81 !1:SH1
>8098	22 99					.word	SyntaxError                      ; $82 !2:SH2
>809a	21 98					.word	AbsUnary                         ; $83 ABS(
>809c	06 8c					.word	AllocUnary                       ; $84 ALLOC(
>809e	31 98					.word	AscUnary                         ; $85 ASC(
>80a0	a3 8c					.word	ChrUnary                         ; $86 CHR$(
>80a2	9b 84					.word	UnaryFalse                       ; $87 FALSE
>80a4	3e 98					.word	FracUnary                        ; $88 FRAC(
>80a6	54 98					.word	IntUnary                         ; $89 INT(
>80a8	aa 98					.word	IsValUnary                       ; $8a ISVAL(
>80aa	7d 8d					.word	Unary_Left                       ; $8b LEFT$(
>80ac	66 98					.word	LenUnary                         ; $8c LEN(
>80ae	a7 8d					.word	Unary_Mid                        ; $8d MID$(
>80b0	40 8c					.word	Unary_Not                        ; $8e NOT(
>80b2	8d 8d					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	56 8c					.word	Unary_Rnd                        ; $90 RND(
>80b6	80 98					.word	SgnUnary                         ; $91 SGN(
>80b8	b5 8c					.word	SpcUnary                         ; $92 SPC(
>80ba	d0 8c					.word	Unary_Str                        ; $93 STR$(
>80bc	8f 84					.word	UnaryTrue                        ; $94 TRUE
>80be	a0 98					.word	ValUnary                         ; $95 VAL(
>80c0	69 81					.word	ForCommand                       ; $96 FOR
>80c2	54 82					.word	IfCommand                        ; $97 IF
>80c4	9d 83					.word	Unused1                          ; $98 PROC
>80c6	1b 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	fb 83					.word	Command_WHILE                    ; $9a WHILE
>80ca	7d 82					.word	EndIf                            ; $9b ENDIF
>80cc	22 99					.word	SyntaxError                      ; $9c ENDPROC
>80ce	22 99					.word	SyntaxError                      ; $9d NEXT
>80d0	22 99					.word	SyntaxError                      ; $9e THEN
>80d2	24 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	1c 84					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	22 99					.word	SyntaxError                      ; $a2 CLS
>80da	22 99					.word	SyntaxError                      ; $a3 DATA
>80dc	22 99					.word	SyntaxError                      ; $a4 DIM
>80de	9d 83					.word	Unused3                          ; $a5 DOWNTO
>80e0	76 82					.word	ElseCode                         ; $a6 ELSE
>80e2	23 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	41 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	7e 82					.word	LetCommand                       ; $a9 LET
>80e8	b7 82					.word	Command_Print                    ; $aa PRINT
>80ea	22 99					.word	SyntaxError                      ; $ab READ
>80ec	0e 83					.word	RemCommand                       ; $ac REM
>80ee	33 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	9d 83					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	22 99					.word	SyntaxError                      ; $80 !0:EOF
>80f4	22 99					.word	SyntaxError                      ; $81 !1:SH1
>80f6	22 99					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	66 81					.word	EndCommand                       ; $85 END
>80fe	22 99					.word	SyntaxError                      ; $86 LIST
>8100	ad 82					.word	NewCommand                       ; $87 NEW
>8102	22 99					.word	SyntaxError                      ; $88 RESTORE
>8104	3d 83					.word	CommandRUN                       ; $89 RUN
>8106	22 99					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	22 99					.word	SyntaxError                      ; $80 !0:EOF
>810a	22 99					.word	SyntaxError                      ; $81 !1:SH1
>810c	22 99					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 48 8e	jsr $8e48			jsr 	EvaluateInteger 			; the assert test
.8113	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 2a 84	jmp $842a		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 5d 8e	jsr $8e5d			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 18		beq $8150			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	18		clc				clc 								; go to the next variable
.8144	b2 36		lda ($36)			lda 	(zTemp0)
.8146	65 36		adc $36				adc 	zTemp0
.8148	85 36		sta $36				sta 	zTemp0
.814a	90 e8		bcc $8134			bcc 	_ClearZeroLoop
.814c	e6 37		inc $37				inc 	zTemp0+1
.814e	80 e4		bra $8134			bra 	_ClearZeroLoop
.8150					_ClearZeroEnd:
.8150	18		clc				clc
.8151	a5 36		lda $36				lda 	zTemp0
.8153	69 01		adc #$01			adc 	#1
.8155	8d 0c 07	sta $070c			sta 	lowMemPtr
.8158	a5 37		lda $37				lda 	zTemp0+1
.815a	69 00		adc #$00			adc 	#0
.815c	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815f	20 61 8f	jsr $8f61			jsr 	StackReset
.8162	20 a4 9a	jsr $9aa4			jsr 	StringSystemInitialise
.8165	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8166					EndCommand:
.8166	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8169					ForCommand:
.8169	a9 d8		lda #$d8			lda 	#STK_FOR+8 					; allocate 16 bytes on the return stack.
.816b	20 0e 8f	jsr $8f0e			jsr 	StackOpen
.816e	a2 00		ldx #$00			ldx 	#0
.8170	20 fd 8a	jsr $8afd			jsr 	EvaluateTerm
.8173	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8176	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8178	d0 49		bne $81c3			bne		_FCError
.817a	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.817c	20 79 94	jsr $9479			jsr 	CheckNextA
.817f	e8		inx				inx
.8180	20 48 8e	jsr $8e48			jsr 	EvaluateInteger 			; <from> in +1
.8183	b1 30		lda ($30),y			lda 	(codePtr),y
.8185	c8		iny				iny 								; consume it
.8186	48		pha				pha 								; save on stack for later
.8187	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8189	f0 04		beq $818f			beq 	_FCNoSyntax
.818b	c9 ae		cmp #$ae			cmp 	#KWD_TO
.818d	d0 37		bne $81c6			bne 	_FCSyntaxError
.818f					_FCNoSyntax:
.818f	e8		inx				inx
.8190	20 48 8e	jsr $8e48			jsr 	EvaluateInteger
.8193	20 40 8f	jsr $8f40			jsr 	STKSaveCodePosition 		; save loop back position
.8196	68		pla				pla 								; restore DOWNTO or TO
.8197	5a		phy				phy 								; save Y on the stack
.8198	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.819a	f0 02		beq $819e			beq 	_FCNotDownTo
.819c	a9 02		lda #$02			lda 	#2
.819e					_FCNotDownTo:
.819e	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.819f	a0 0f		ldy #$0f			ldy 	#15
.81a1	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81a3	a0 05		ldy #$05			ldy 	#5
.81a5	ad 08 06	lda $0608			lda 	NSMantissa0
.81a8	91 34		sta ($34),y			sta 	(basicStack),y
.81aa	ad 10 06	lda $0610			lda 	NSMantissa1
.81ad	c8		iny				iny
.81ae	91 34		sta ($34),y			sta 	(basicStack),y
.81b0	a0 07		ldy #$07			ldy 	#7 							; set initial index value
.81b2	a2 01		ldx #$01			ldx 	#1
.81b4	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81b7	a0 0b		ldy #$0b			ldy 	#11 						; set the terminal value
.81b9	a2 02		ldx #$02			ldx 	#2
.81bb	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81be	20 e9 81	jsr $81e9			jsr 	CopyIndexToReference
.81c1	7a		ply				ply 								; restore position
.81c2	60		rts				rts
.81c3					_FCError:
.81c3	4c 2c 99	jmp $992c			jmp 	TypeError
.81c6					_FCSyntaxError:
.81c6	4c 22 99	jmp $9922			jmp 	SyntaxError
.81c9					FCIntegerToStack:
.81c9	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81cc	10 03		bpl $81d1			bpl	 	_FCNotNegative
.81ce	20 86 8e	jsr $8e86			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81d1					_FCNotNegative:
.81d1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81d4	91 34		sta ($34),y			sta 	(basicStack),y
.81d6	c8		iny				iny
.81d7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81da	91 34		sta ($34),y			sta 	(basicStack),y
.81dc	c8		iny				iny
.81dd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81e0	91 34		sta ($34),y			sta 	(basicStack),y
.81e2	c8		iny				iny
.81e3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81e6	91 34		sta ($34),y			sta 	(basicStack),y
.81e8	60		rts				rts
.81e9					CopyIndexToReference:
.81e9	5a		phy				phy
.81ea	a0 05		ldy #$05			ldy 	#5 							; copy address-7 to write to zTemp0
.81ec	38		sec				sec 								; (because we copy from offset 7)
.81ed	b1 34		lda ($34),y			lda 	(basicStack),y
.81ef	e9 07		sbc #$07			sbc 	#7
.81f1	85 36		sta $36				sta 	zTemp0
.81f3	c8		iny				iny
.81f4	b1 34		lda ($34),y			lda 	(basicStack),y
.81f6	e9 00		sbc #$00			sbc 	#0
.81f8	85 37		sta $37				sta 	zTemp0+1
.81fa	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.81fc	a0 0a		ldy #$0a			ldy 	#7+3 		 				; the MSB of the mantissa
.81fe	b1 34		lda ($34),y			lda 	(basicStack),y
.8200	0a		asl a				asl 	a 							; into carry
.8201	a0 07		ldy #$07			ldy 	#7 							; where to copy from.
.8203	90 14		bcc $8219			bcc 	_CITRNormal
.8205	38		sec				sec
.8206					_CITRNegative:
.8206	a9 00		lda #$00			lda 	#0
.8208	f1 34		sbc ($34),y			sbc 	(basicStack),y
.820a	91 36		sta ($36),y			sta 	(zTemp0),y
.820c	c8		iny				iny
.820d	ca		dex				dex
.820e	d0 f6		bne $8206			bne 	_CITRNegative
.8210	88		dey				dey 								; look at MSB of mantissa
.8211	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8213	09 80		ora #$80			ora 	#$80
.8215	91 36		sta ($36),y			sta 	(zTemp0),y
.8217	7a		ply				ply
.8218	60		rts				rts
.8219					_CITRNormal:
.8219	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.821b	91 36		sta ($36),y			sta 	(zTemp0),y
.821d	c8		iny				iny
.821e	ca		dex				dex
.821f	d0 f8		bne $8219			bne 	_CITRNormal
.8221	7a		ply				ply 								; and exit.
.8222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8223					Command_GOSUB:
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 5d 8e	jsr $8e5d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8228	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.822a	20 0e 8f	jsr $8f0e			jsr 	StackOpen 					; create frame
.822d	20 40 8f	jsr $8f40			jsr 	STKSaveCodePosition 		; save current position
.8230	4c 46 82	jmp $8246			jmp 	GotoStackX
.8233					Command_RETURN:
.8233	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8235	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8237	20 35 8f	jsr $8f35			jsr 	StackCheckFrame
.823a	20 51 8f	jsr $8f51			jsr 	STKLoadCodePosition 		; restore code position
.823d	20 27 8f	jsr $8f27			jsr 	StackClose
.8240	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8241					GotoCommand:
.8241	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8243	20 5d 8e	jsr $8e5d			jsr 	Evaluate16BitInteger
.8246					GotoStackX:
.8246	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8249	48		pha				pha 								; it is slightly inefficient, just in cases.
.824a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.824d	fa		plx				plx
.824e	20 37 94	jsr $9437			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8251	4c 48 83	jmp $8348			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8254					IfCommand:
.8254	a2 00		ldx #$00			ldx 	#0 							; If what.
.8256	20 25 8e	jsr $8e25			jsr 	EvaluateNumber
.8259	b1 30		lda ($30),y			lda 	(codePtr),y
.825b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.825d	d0 0a		bne $8269			bne 	_IFStructured
.825f	c8		iny				iny 								; consume THEN
.8260	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; is it zero
.8263	f0 01		beq $8266			beq 	_IfFail 					; if fail, go to next line
.8265	60		rts				rts 								; if THEN just continue
.8266					_IfFail:
.8266	4c 88 83	jmp $8388			jmp 	EOLCommand
.8269					_IfStructured:
.8269	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; is it zero
.826c	d0 07		bne $8275			bne 	_IfExit 					; if not, then continue normally.
.826e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8270	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8272	20 a0 83	jsr $83a0			jsr 	ScanForward 				; and run from there/
.8275					_IfExit:
.8275	60		rts				rts
.8276					ElseCode:
.8276	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8278	aa		tax				tax 								; so just go to the structure exit
.8279	20 a0 83	jsr $83a0			jsr 	ScanForward
.827c	60		rts				rts
.827d					EndIf:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.827e					LetCommand:
.827e	a2 00		ldx #$00			ldx 	#0
.8280	ad 14 88	lda $8814			lda 	PrecedenceLevel+"*"			; precedence > this
.8283	20 2e 88	jsr $882e			jsr 	EvaluateExpressionAtPrecedence
.8286	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8288	20 79 94	jsr $9479			jsr 	CheckNextA
.828b	e8		inx				inx 								; RHS
.828c	20 1c 8e	jsr $8e1c			jsr 	EvaluateValue
.828f	ca		dex				dex
.8290	20 94 82	jsr $8294			jsr 	AssignVariable
.8293	60		rts				rts
.8294					AssignVariable:
.8294	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8297	48		pha				pha 								; save a copy
.8298	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.829b	29 10		and #$10			and 	#NSBIsString
.829d	d0 0b		bne $82aa			bne 	_ASError
.829f	68		pla				pla 								; get back
.82a0	29 10		and #$10			and 	#NSBIsString 				; check type
.82a2	d0 03		bne $82a7			bne 	_ASString
.82a4	4c 69 88	jmp $8869			jmp 	AssignNumber
.82a7					_ASString:
.82a7	4c d7 88	jmp $88d7			jmp 	AssignString
.82aa					_ASError:
.82aa	4c 2c 99	jmp $992c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.82ad					NewCommand:
.82ad	20 e6 93	jsr $93e6			jsr 	MemoryNew
.82b0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.82b3	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.82b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.82b7					Command_Print:
.82b7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.82b8					_CPLoop:
.82b8	08		php				php 								; save last action flag
.82b9	b1 30		lda ($30),y			lda 	(codePtr),y
.82bb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.82bd	f0 46		beq $8305			beq 	_CPExit
.82bf	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82c1	f0 42		beq $8305			beq 	_CPExit
.82c3	68		pla				pla 								; throw last action flag
.82c4	b1 30		lda ($30),y			lda 	(codePtr),y
.82c6	c8		iny				iny
.82c7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.82c9	f0 37		beq $8302			beq 	_CPContinueWithSameLine
.82cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.82cd	f0 2e		beq $82fd			beq 	_CPTab
.82cf	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.82d1	f0 26		beq $82f9			beq 	_CPNewLine
.82d3	88		dey				dey 								; undo the get.
.82d4	a2 00		ldx #$00			ldx 	#0
.82d6	20 1c 8e	jsr $8e1c			jsr 	EvaluateValue 				; get a value into slot 0
.82d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.82dc	29 10		and #$10			and 	#NSBIsString
.82de	f0 0b		beq $82eb			beq 	_CPNumber
.82e0	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.82e3	ad 08 06	lda $0608			lda 	NSMantissa0
.82e6	20 7c 84	jsr $847c			jsr 	PrintStringXA
.82e9	80 cc		bra $82b7			bra 	Command_Print 				; loop round clearing carry so NL if end
.82eb					_CPNumber:
.82eb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.82ed	20 f2 8c	jsr $8cf2			jsr 	ConvertNumberToString 		; convert to string
.82f0	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.82f2	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.82f4	20 7c 84	jsr $847c			jsr 	PrintStringXA
.82f7	80 be		bra $82b7			bra 	Command_Print 				; loop round clearing carry so NL if end
.82f9					_CPNewLine:
.82f9	a9 0d		lda #$0d			lda 	#13
.82fb	80 02		bra $82ff			bra 	_CPPrintChar
.82fd					_CPTab:
.82fd	a9 09		lda #$09			lda 	#9 							; print TAB
.82ff					_CPPrintChar:
.82ff	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.8302					_CPContinueWithSameLine:
.8302	38		sec				sec 								; loop round with carry set, which
.8303	80 b3		bra $82b8			bra 	_CPLoop 					; will inhibit final CR
.8305					_CPExit:
.8305	28		plp				plp 								; get last action flag
.8306	b0 05		bcs $830d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8308	a9 0d		lda #$0d			lda 	#13 						; print new line
.830a	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.830d					_CPExit2:
.830d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.830e					RemCommand:
.830e	b1 30		lda ($30),y			lda 	(codePtr),y
.8310	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8312	d0 06		bne $831a			bne 	_RMExit
.8314	c8		iny				iny
.8315	98		tya				tya
.8316	38		sec				sec
.8317	71 30		adc ($30),y			adc 	(codePtr),y
.8319	a8		tay				tay
.831a					_RMExit:
.831a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.831b					Command_REPEAT:
.831b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.831d	20 0e 8f	jsr $8f0e			jsr 	StackOpen
.8320	20 40 8f	jsr $8f40			jsr 	STKSaveCodePosition 		; save loop position
.8323	60		rts				rts
.8324					Command_UNTIL:
.8324	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8326	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8328	20 35 8f	jsr $8f35			jsr 	StackCheckFrame
.832b	a2 00		ldx #$00			ldx 	#0
.832d	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; work out the number
.8330	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; check if zero
.8333	f0 04		beq $8339			beq 	_CULoopBack 				; if so keep looping
.8335	20 27 8f	jsr $8f27			jsr 	StackClose		 			; return
.8338	60		rts				rts
.8339					_CULoopBack:
.8339	20 51 8f	jsr $8f51			jsr 	STKLoadCodePosition 		; loop back
.833c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.833d					CommandRUN:
.833d	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8340	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8342	85 30		sta $30				sta 	codePtr
.8344	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8346	85 31		sta $31				sta 	codePtr+1
.8348					RUNNewLine:
.8348	b2 30		lda ($30)			lda 	(codePtr)
.834a	f0 39		beq $8385			beq 	CRNoProgram         		; no then END.
.834c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.834e	9a		txs				txs
.834f					RUNCodePointerLine:
.834f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8351					_CRIncMainLoop:
.8351	c8		iny				iny
.8352					_CRMainLoop:
.8352	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8355	b1 30		lda ($30),y			lda 	(codePtr),y
.8357	10 10		bpl $8369			bpl 	_CRNotKeyword
.8359	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.835b	b0 04		bcs $8361			bcs 	_CRIsKeyword
.835d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.835f	b0 1e		bcs $837f			bcs		_CRSyntaxError
.8361					_CRIsKeyword:
.8361	c8		iny				iny 								; consume command
.8362	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8363	aa		tax				tax 								; put in X for vector jump
.8364	20 82 83	jsr $8382			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8367	80 e9		bra $8352			bra 	_CRMainLoop 				; and loop round
.8369					_CRNotKeyword:
.8369	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.836b	f0 e4		beq $8351			beq 	_CRIncMainLoop
.836d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.836f	90 05		bcc $8376			bcc 	_CRNotVariable
.8371					_CRGoLet:
.8371	20 7e 82	jsr $827e			jsr 	LetCommand
.8374	80 dc		bra $8352			bra 	_CRMainLoop
.8376					_CRNotVariable:
.8376	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8378	f0 f7		beq $8371			beq 	_CRGoLet
.837a	c9 21		cmp #$21			cmp 	#KWD_PLING
.837c	f0 f3		beq $8371			beq 	_CRGoLet
>837e	db						.byte 	$DB 						; causes a break in the emulator
.837f					_CRSyntaxError:
.837f	4c 22 99	jmp $9922			jmp 	SyntaxError
.8382					_CRCallVector0:
.8382	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8385					CRNoProgram:
.8385	4c 66 81	jmp $8166			jmp 	EndCommand
.8388					EOLCommand:
.8388	18		clc				clc
.8389	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.838b	65 30		adc $30				adc 	codePtr
.838d	85 30		sta $30				sta 	codePtr
.838f	90 02		bcc $8393			bcc 	_CREExit
.8391	e6 31		inc $31				inc 	codePtr+1
.8393					_CREExit:
.8393	80 b3		bra $8348			bra 	RunNewLine
.8395					Shift1Command:
.8395	b1 30		lda ($30),y			lda 	(codePtr),y
.8397	c8		iny				iny
.8398	0a		asl a				asl 	a
.8399	aa		tax				tax
.839a	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.839d					Unused1:
.839d					Unused2:
.839d					Unused3:
.839d	4c 22 99	jmp $9922			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/scanforward.asm

.83a0					ScanForward:
.83a0	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.83a2	86 37		stx $37				stx 	zTemp0+1
.83a4	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.83a6					_ScanLoop:
.83a6	b1 30		lda ($30),y			lda 	(codePtr),y
.83a8	c8		iny				iny
.83a9	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.83ab	d0 09		bne $83b6			bne 	_ScanGoNext
.83ad	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.83af	f0 04		beq $83b5			beq 	_ScanMatch
.83b1	c5 37		cmp $37				cmp 	zTemp0+1
.83b3	d0 01		bne $83b6			bne 	_ScanGoNext
.83b5					_ScanMatch:
.83b5	60		rts				rts
.83b6					_ScanGoNext:
.83b6	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.83b8	90 ec		bcc $83a6			bcc 	_ScanLoop
.83ba	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.83bc	90 18		bcc $83d6			bcc 	_ScanSkipOne
.83be	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.83c0	b0 2f		bcs $83f1			bcs 	_ScanSkipData
.83c2	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.83c4	90 e0		bcc $83a6			bcc 	_ScanLoop 					; if not, ordinary keywords.
.83c6	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.83c8	b0 dc		bcs $83a6			bcs 	_ScanLoop
.83ca	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.83cc	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.83ce	b0 d6		bcs $83a6			bcs 	_ScanLoop
.83d0	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.83d2	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.83d4	80 d0		bra $83a6			bra 	_ScanLoop
.83d6					_ScanSkipOne:
.83d6	c8		iny				iny 								; consume the extra one.
.83d7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.83d9	d0 cb		bne $83a6			bne 	_ScanLoop
.83db	18		clc				clc
.83dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.83de	65 30		adc $30				adc 	codePtr
.83e0	85 30		sta $30				sta 	codePtr
.83e2	90 02		bcc $83e6			bcc 	_CREExit
.83e4	e6 31		inc $31				inc 	codePtr+1
.83e6					_CREExit:
.83e6	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.83e8	b2 30		lda ($30)			lda 	(codePtr)
.83ea	d0 ba		bne $83a6			bne 	_ScanLoop 					; if not zero, more to scan
.83ec	a9 12		lda #$12		lda	#18
.83ee	4c 2a 84	jmp $842a		jmp	ErrorHandler
.83f1					_ScanSkipData:
.83f1	84 39		sty $39				sty 	zTemp1+1 					; add that to Y - this is done because of macros
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	38		sec				sec 								; add extra one for the length
.83f6	65 39		adc $39				adc 	zTemp1+1
.83f8	a8		tay				tay
.83f9	80 ab		bra $83a6			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.83fb					Command_WHILE:
.83fb	5a		phy				phy 								; save position of the test
.83fc	a2 00		ldx #$00			ldx 	#0
.83fe	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; work out the number
.8401	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; check if zero
.8404	f0 0e		beq $8414			beq 	_WHExitLoop 				; if so exit the loop
.8406	98		tya				tya 								; position *after* test.
.8407	7a		ply				ply 								; restore position before test, at WHILE
.8408	88		dey				dey
.8409	48		pha				pha 								; push after test on the stack
.840a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.840c	20 0e 8f	jsr $8f0e			jsr 	StackOpen
.840f	20 40 8f	jsr $8f40			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8412	7a		ply				ply 								; restore the position *after* the test
.8413	60		rts				rts
.8414					_WHExitLoop:
.8414	68		pla				pla 								; throw post loop position
.8415	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8417	aa		tax				tax
.8418	20 a0 83	jsr $83a0			jsr 	ScanForward
.841b	60		rts				rts
.841c					Command_WEND:
.841c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.841e	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8420	20 35 8f	jsr $8f35			jsr 	StackCheckFrame
.8423	20 51 8f	jsr $8f51			jsr 	STKLoadCodePosition 		; loop back
.8426	20 27 8f	jsr $8f27			jsr 	StackClose		 			; erase the frame
.8429	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9469					CheckRightBracket:
.9469	b1 30		lda ($30),y			lda 	(codePtr),y
.946b	c8		iny				iny
.946c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.946e	d0 0f		bne $947f			bne 	CNAFail
.9470	60		rts				rts
.9471					CheckComma:
.9471	b1 30		lda ($30),y			lda 	(codePtr),y
.9473	c8		iny				iny
.9474	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9476	d0 07		bne $947f			bne 	CNAFail
.9478	60		rts				rts
.9479					CheckNextA:
.9479	d1 30		cmp ($30),y			cmp 	(codePtr),y
.947b	d0 02		bne $947f			bne 	CNAFail
.947d	c8		iny				iny 								; skip character
.947e	60		rts				rts 								; and exit
.947f					CNAFail:
.947f	4c 22 99	jmp $9922			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.842a					ErrorHandler:
.842a	a8		tay				tay 								; find the error text
.842b	f0 42		beq $846f			beq 	_EHEnd
.842d	a2 00		ldx #$00			ldx 	#0
.842f					_EHFind:
.842f	88		dey				dey 								; found the error text ?
.8430	f0 0a		beq $843c			beq 	_EHFound
.8432					_EHFindZero:
.8432	bd 3b 99	lda $993b,x			lda 	ErrorText,x 				; find the next error
.8435	e8		inx				inx
.8436	c9 00		cmp #$00			cmp 	#0
.8438	d0 f8		bne $8432			bne 	_EHFindZero
.843a	80 f3		bra $842f			bra 	_EHFind
.843c					_EHFound:
.843c	bd 3b 99	lda $993b,x			lda 	ErrorText,x 				; print the message
.843f	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.8442	e8		inx				inx
.8443	bd 3b 99	lda $993b,x			lda 	ErrorText,x
.8446	d0 f4		bne $843c			bne 	_EHFound
.8448	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.844a	b1 30		lda ($30),y			lda 	(codePtr),y
.844c	d0 05		bne $8453			bne 	_EHAtMsg
.844e	c8		iny				iny
.844f	b1 30		lda ($30),y			lda 	(codePtr),y
.8451	f0 17		beq $846a			beq 	_EHCREnd
.8453					_EHAtMsg:
.8453	a2 84		ldx #$84			ldx 	#_AtMsg >> 8 				; print " at "
.8455	a9 72		lda #$72			lda 	#_AtMsg & $FF
.8457	20 7c 84	jsr $847c			jsr 	PrintStringXA
.845a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	48		pha				pha
.845f	c8		iny				iny
.8460	b1 30		lda ($30),y			lda 	(codePtr),y
.8462	aa		tax				tax
.8463	68		pla				pla
.8464	20 c5 95	jsr $95c5			jsr 	ConvertInt16 				; convert XA to string
.8467	20 7c 84	jsr $847c			jsr 	PrintStringXA 				; and print it.
.846a					_EHCREnd:
.846a	a9 0d		lda #$0d			lda 	#13 						; new line
.846c	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.846f					_EHEnd:
.846f	4c 0c 80	jmp $800c			jmp 	WarmStart
>8472	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>847a	20 00
.847c					PrintStringXA:
.847c	5a		phy				phy
.847d	86 37		stx $37				stx 	zTemp0+1
.847f	85 36		sta $36				sta 	zTemp0
.8481	a0 00		ldy #$00			ldy 	#0
.8483					_PSXALoop:
.8483	b1 36		lda ($36),y			lda 	(zTemp0),y
.8485	f0 06		beq $848d			beq 	_PSXAExit
.8487	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.848a	c8		iny				iny
.848b	80 f6		bra $8483			bra 	_PSXALoop
.848d					_PSXAExit:
.848d	7a		ply				ply
.848e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.848f					UnaryTrue:
.848f	fa		plx				plx
.8490					ReturnTrue:
.8490	a9 01		lda #$01			lda 	#1  						; set to 1
.8492	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.8495	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8497	9d 00 06	sta $0600,x			sta 	NSStatus,x
.849a	60		rts				rts
.849b					UnaryFalse:
.849b	fa		plx				plx
.849c					ReturnFalse:
.849c	4c d1 8e	jmp $8ed1			jmp 	NSMSetZero 					; set it all to zero
.849f					BinaryCompareEqual:
.849f	fa		plx				plx
.84a0	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84a3	c9 00		cmp #$00			cmp 	#0
.84a5	f0 e9		beq $8490			beq 	ReturnTrue
.84a7	80 f3		bra $849c			bra 	ReturnFalse
.84a9					BinaryCompareLess:
.84a9	fa		plx				plx
.84aa	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84ad	c9 ff		cmp #$ff			cmp 	#$FF
.84af	f0 df		beq $8490			beq 	ReturnTrue
.84b1	80 e9		bra $849c			bra 	ReturnFalse
.84b3					BinaryCompareGreater:
.84b3	fa		plx				plx
.84b4	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84b7	c9 01		cmp #$01			cmp 	#1
.84b9	f0 d5		beq $8490			beq 	ReturnTrue
.84bb	80 df		bra $849c			bra 	ReturnFalse
.84bd					BinaryCompareNotEqual:
.84bd	fa		plx				plx
.84be	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84c1	c9 00		cmp #$00			cmp 	#0
.84c3	d0 cb		bne $8490			bne 	ReturnTrue
.84c5	80 d5		bra $849c			bra 	ReturnFalse
.84c7					BinaryCompareLessEqual:
.84c7	fa		plx				plx
.84c8	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84cb	c9 01		cmp #$01			cmp 	#1
.84cd	d0 c1		bne $8490			bne 	ReturnTrue
.84cf	80 cb		bra $849c			bra 	ReturnFalse
.84d1					BinaryCompareGreaterEqual:
.84d1	fa		plx				plx
.84d2	20 db 84	jsr $84db			jsr 	CompareBaseCode
.84d5	c9 ff		cmp #$ff			cmp 	#$FF
.84d7	d0 b7		bne $8490			bne 	ReturnTrue
.84d9	80 c1		bra $849c			bra 	ReturnFalse
.84db					CompareBaseCode:
.84db	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; make both values if references.
.84de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.84e1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84e4	29 10		and #$10			and 	#NSTString
.84e6	d0 40		bne $8528			bne 	_CBCString
.84e8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.84eb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ee	d0 3b		bne $852b			bne 	_CBCFloat
.84f0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.84f3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84f6	29 08		and #$08			and 	#NSTFloat
.84f8	d0 31		bne $852b			bne 	_CBCFloat
.84fa	20 2e 85	jsr $852e			jsr 	CompareFixMinusZero
.84fd	e8		inx				inx
.84fe	20 2e 85	jsr $852e			jsr 	CompareFixMinusZero
.8501	ca		dex				dex
.8502	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8505	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8508	10 0b		bpl $8515			bpl 	_CDCSameSign
.850a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.850d	30 16		bmi $8525			bmi 	_CBCLess 					; return $FF
.850f					_CBCGreater:
.850f	a9 01		lda #$01			lda 	#1
.8511	60		rts				rts
.8512					_CBCEqual:
.8512	a9 00		lda #$00			lda 	#0
.8514	60		rts				rts
.8515					_CDCSameSign:
.8515	20 3e 86	jsr $863e			jsr 	SubTopTwoStack 				; unsigned subtract
.8518	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; or the mantissa together
.851b	f0 f5		beq $8512			beq 	_CBCEqual 					; -0 == 0
.851d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8520	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8523	10 ea		bpl $850f			bpl 	_CBCGreater
.8525					_CBCLess:
.8525	a9 ff		lda #$ff			lda 	#$FF
.8527	60		rts				rts
.8528					_CBCString:
.8528	4c 94 85	jmp $8594			jmp 	CompareStrings
.852b					_CBCFloat:
.852b	4c c1 96	jmp $96c1			jmp 	CompareFloat
.852e					CompareFixMinusZero:
.852e	20 01 8f	jsr $8f01			jsr 	NSMIsZero
.8531	d0 03		bne $8536			bne 	_CFXMZNotZero
.8533	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8536					_CFXMZNotZero:
.8536	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8537					StringConcat:
.8537	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.853a	3d 01 06	and $0601,x			and 	NSStatus+1,x
.853d	29 18		and #$18			and 	#NSBTypeMask
.853f	c9 10		cmp #$10			cmp 	#NSTString
.8541	d0 4e		bne $8591			bne		_SCType
.8543	64 38		stz $38				stz 	zTemp1 						; counting total length
.8545	e8		inx				inx
.8546	20 64 85	jsr $8564			jsr 	_SCSetupZ0 					; setup for second
.8549	20 6f 85	jsr $856f			jsr 	_SCLengthZ0 				; length for second
.854c	ca		dex				dex
.854d	20 64 85	jsr $8564			jsr 	_SCSetupZ0 					; setup for first
.8550	20 6f 85	jsr $856f			jsr 	_SCLengthZ0 				; length for first
.8553	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8555	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate
.8558	20 82 85	jsr $8582			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.855b	e8		inx				inx
.855c	20 64 85	jsr $8564			jsr 	_SCSetupZ0 					; copy second out
.855f	20 82 85	jsr $8582			jsr 	_SCCopy
.8562	ca		dex				dex
.8563	60		rts				rts
.8564					_SCSetupZ0:
.8564	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8567	85 36		sta $36				sta 	zTemp0
.8569	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.856c	85 37		sta $37				sta 	zTemp0+1
.856e	60		rts				rts
.856f					_SCLengthZ0:
.856f	5a		phy				phy
.8570	a0 00		ldy #$00			ldy 	#0
.8572					_SCLenLoop:
.8572	b1 36		lda ($36),y			lda 	(zTemp0),y
.8574	f0 0a		beq $8580			beq 	_SCLExit
.8576	c8		iny				iny
.8577	e6 38		inc $38				inc 	zTemp1
.8579	10 f7		bpl $8572			bpl		_SCLenLoop
.857b	a9 09		lda #$09		lda	#9
.857d	4c 2a 84	jmp $842a		jmp	ErrorHandler
.8580					_SCLExit:
.8580	7a		ply				ply
.8581	60		rts				rts
.8582					_SCCopy:
.8582	5a		phy				phy
.8583	a0 00		ldy #$00			ldy 	#0
.8585					_SCCopyLoop:
.8585	b1 36		lda ($36),y			lda 	(zTemp0),y
.8587	f0 06		beq $858f			beq 	_SCCExit
.8589	20 03 9b	jsr $9b03			jsr 	StringTempWrite
.858c	c8		iny				iny
.858d	80 f6		bra $8585			bra 	_SCCopyLoop
.858f					_SCCExit:
.858f	7a		ply				ply
.8590	60		rts				rts
.8591					_SCType:
.8591	4c 2c 99	jmp $992c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9482					IntegerDivide:
.9482	fa		plx				plx
.9483	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9486	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9489	0a		asl a				asl 	a 							; shift reference bit into sign bit
.948a	0a		asl a				asl 	a
.948b	10 05		bpl $9492			bpl 	_NotRef
.948d	48		pha				pha
.948e	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9491	68		pla				pla
.9492					_NotRef:
.9492	0a		asl a				asl 	a
.9493	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9495	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9498	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.949b	f0 03		beq $94a0			beq 	_IntegerCode 				; if clear, then we have two integers
.949d	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.94a0					_IntegerCode:
.94a0	20 c2 94	jsr $94c2			jsr 	CheckDivideZero 			; do div zero check
.94a3	20 fa 94	jsr $94fa			jsr 	Int32Divide 				; do the division
.94a6	20 b7 95	jsr $95b7			jsr 	CalculateSign 				; calculate result sign
.94a9					NSMCopyPlusTwoToZero:
.94a9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.94ac	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94af	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.94b2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94b5	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.94b8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94bb	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.94be	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94c1	60		rts				rts
.94c2					CheckDivideZero:
.94c2	e8		inx				inx
.94c3	20 01 8f	jsr $8f01			jsr 	NSMIsZero
.94c6	f0 02		beq $94ca			beq 	_CDVError
.94c8	ca		dex				dex
.94c9	60		rts				rts
.94ca					_CDVError:
.94ca	a9 03		lda #$03		lda	#3
.94cc	4c 2a 84	jmp $842a		jmp	ErrorHandler
.94cf					IntegerModulus:
.94cf	fa		plx				plx
.94d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.94d3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.94d6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94d7	0a		asl a				asl 	a
.94d8	10 05		bpl $94df			bpl 	_NotRef
.94da	48		pha				pha
.94db	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94de	68		pla				pla
.94df					_NotRef:
.94df	0a		asl a				asl 	a
.94e0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94e2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94e5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.94e8	f0 03		beq $94ed			beq 	_IntegerCode 				; if clear, then we have two integers
.94ea	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.94ed					_IntegerCode:
.94ed	20 c2 94	jsr $94c2			jsr 	CheckDivideZero 			; do div zero check
.94f0	20 fa 94	jsr $94fa			jsr 	Int32Divide 				; do the division
.94f3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.94f6	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.94f9	60		rts				rts
.94fa					Int32Divide:
.94fa	48		pha				pha 								; save AXY
.94fb	5a		phy				phy
.94fc	20 a8 8e	jsr $8ea8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.94ff	20 cd 8e	jsr $8ecd			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9502	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9504					_I32DivideLoop:
.9504	e8		inx				inx
.9505	e8		inx				inx
.9506	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9509	ca		dex				dex
.950a	ca		dex				dex
.950b	20 e7 8e	jsr $8ee7			jsr 	NSMRotateLeft
.950e	20 3a 95	jsr $953a			jsr 	DivideCheckSubtract 		; check if subtract possible
.9511	90 03		bcc $9516			bcc 	_I32DivideNoCarryIn
.9513	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9516					_I32DivideNoCarryIn:
.9516	88		dey				dey 								; loop round till division completed.
.9517	d0 eb		bne $9504			bne 	_I32DivideLoop
.9519	7a		ply				ply 								; restore AXY and exit
.951a	68		pla				pla
.951b	60		rts				rts
.951c					Int32ShiftDivide:
.951c	48		pha				pha 								; save AY
.951d	5a		phy				phy
.951e	e8		inx				inx 								; clear S[X+2]
.951f	e8		inx				inx
.9520	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.9523	ca		dex				dex
.9524	ca		dex				dex
.9525	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9527					_I32SDLoop:
.9527	20 3a 95	jsr $953a			jsr 	DivideCheckSubtract 		; check if subtract possible
.952a	e8		inx				inx
.952b	e8		inx				inx
.952c	20 e7 8e	jsr $8ee7			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.952f	ca		dex				dex
.9530	ca		dex				dex
.9531	20 e7 8e	jsr $8ee7			jsr 	NSMRotateLeft
.9534	88		dey				dey 	 							; do 31 times
.9535	d0 f0		bne $9527			bne 	_I32SDLoop
.9537	7a		ply				ply 								; restore AY and exit
.9538	68		pla				pla
.9539	60		rts				rts
.953a					DivideCheckSubtract:
.953a	20 3e 86	jsr $863e			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.953d	b0 04		bcs $9543			bcs 	_DCSExit 					; if carry set, then could do, exit
.953f	20 18 86	jsr $8618			jsr 	AddTopTwoStack 				; add it back in
.9542	18		clc				clc 								; and return False
.9543					_DCSExit:
.9543	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9544					MulInteger:
.9544	fa		plx				plx
.9545	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9548	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.954b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.954c	0a		asl a				asl 	a
.954d	10 05		bpl $9554			bpl 	_NotRef
.954f	48		pha				pha
.9550	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9553	68		pla				pla
.9554					_NotRef:
.9554	0a		asl a				asl 	a 							; put MSB of type into A:7
.9555	30 0b		bmi $9562			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9557	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.955d	f0 06		beq $9565			beq 	_IntegerCode 				; if clear, then we have two integers
.955f	4c 98 97	jmp $9798			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9562					_StringData:
.9562	4c 36 99	jmp $9936			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9565					_IntegerCode:
.9565	20 72 95	jsr $9572			jsr 	MultiplyShort
.9568	c9 00		cmp #$00			cmp 	#0
.956a	f0 05		beq $9571			beq 	_MIExit
.956c	a9 04		lda #$04		lda	#4
.956e	4c 2a 84	jmp $842a		jmp	ErrorHandler
.9571					_MIExit:
.9571	60		rts				rts
.9572					MultiplyShort:
.9572	5a		phy				phy 								; save Y
.9573	20 a8 8e	jsr $8ea8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9576	20 cd 8e	jsr $8ecd			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9579	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.957b					_I32MLoop:
.957b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.957e	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9581	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9584	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9587	f0 28		beq $95b1			beq 	_I32MExit 					; exit if zero
.9589	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.958c	29 01		and #$01			and 	#1
.958e	f0 0e		beq $959e			beq 	_I32MNoAdd
.9590	20 18 86	jsr $8618			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9593	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9596	10 06		bpl $959e			bpl 	_I32MNoAdd
.9598					_I32ShiftRight:
.9598	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight 				; shift S[X] right
.959b	c8		iny				iny 								; increment shift count
.959c	80 0a		bra $95a8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.959e					_I32MNoAdd:
.959e	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95a1	70 f5		bvs $9598			bvs 	_I32ShiftRight 				; instead.
.95a3	e8		inx				inx
.95a4	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95a7	ca		dex				dex
.95a8					_I32MShiftUpper:
.95a8	e8		inx				inx 								; shift S[X+2] right
.95a9	e8		inx				inx
.95aa	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight
.95ad	ca		dex				dex
.95ae	ca		dex				dex
.95af	80 ca		bra $957b			bra 	_I32MLoop 					; try again.
.95b1					_I32MExit:
.95b1	20 b7 95	jsr $95b7			jsr 	CalculateSign
.95b4	98		tya				tya 								; shift in A
.95b5	7a		ply				ply 								; restore Y and exit
.95b6	60		rts				rts
.95b7					CalculateSign:
.95b7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.95ba	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.95bd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.95c0	0a		asl a				asl 	a 							; shift bit 7 into carry
.95c1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.95c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8594					CompareStrings:
.8594	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8597	3d 01 06	and $0601,x			and 	NSStatus+1,x
.859a	29 10		and #$10			and 	#NSBIsString
.859c	f0 2c		beq $85ca			beq 	_CSTypeError
.859e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.85a1	85 36		sta $36				sta 	zTemp0
.85a3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85a6	85 37		sta $37				sta 	zTemp0+1
.85a8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.85ab	85 38		sta $38				sta 	zTemp1
.85ad	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.85b0	85 39		sta $39				sta 	zTemp1+1
.85b2	5a		phy				phy 								; save Y so we can access strings
.85b3	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.85b5					_CSLoop:
.85b5	c8		iny				iny
.85b6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.85b8	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.85ba	d0 06		bne $85c2			bne 	_CSDifferent
.85bc	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.85be	d0 f5		bne $85b5			bne 	_CSLoop 					; still comparing
.85c0					_CSExit:
.85c0	7a		ply				ply 								; reached end, return zero in A from EOS
.85c1	60		rts				rts
.85c2					_CSDifferent:
.85c2	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.85c4	90 fa		bcc $85c0			bcc		_CSExit
.85c6	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.85c8	80 f6		bra $85c0			bra 	_CSExit
.85ca					_CSTypeError:
.85ca	4c 2c 99	jmp $992c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.85cd					ShiftLeft:
.85cd	38		sec				sec
.85ce	80 01		bra $85d1			bra 	ShiftMain
.85d0					ShiftRight:
.85d0	18		clc				clc
.85d1					ShiftMain:
.85d1	fa		plx				plx 								; restore X
.85d2	08		php				php 								; save direction
.85d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85d6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85d9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85da	0a		asl a				asl 	a
.85db	10 05		bpl $85e2			bpl 	_NotRef
.85dd	48		pha				pha
.85de	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85e1	68		pla				pla
.85e2					_NotRef:
.85e2	0a		asl a				asl 	a
.85e3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85e5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85e8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85eb	f0 03		beq $85f0			beq 	_IntegerCode 				; if clear, then we have two integers
.85ed	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.85f0					_IntegerCode:
.85f0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.85f3	29 e0		and #$e0			and 	#$E0
.85f5	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.85f8	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.85fb	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.85fe	d0 13		bne $8613			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8600					_SMLoop:
.8600	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8603	30 11		bmi $8616			bmi 	_SMExit 					; exit if done.
.8605	28		plp				plp 								; restore direcition setting
.8606	08		php				php
.8607	90 05		bcc $860e			bcc 	_SMRight
.8609	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; shift left if CS
.860c	80 f2		bra $8600			bra 	_SMLoop
.860e					_SMRight:
.860e	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight 				; shift right if CC
.8611	80 ed		bra $8600			bra 	_SMLoop
.8613					_SMExit0:
.8613	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero 					; return zero.
.8616					_SMExit:
.8616	28		plp				plp 								; throw direction
.8617	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8618					AddTopTwoStack:
.8618	18		clc				clc
.8619	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.861c	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.861f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8622	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8625	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8628	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.862b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.862e	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8631	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8634	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8637	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.863a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.863d	60		rts				rts
.863e					SubTopTwoStack:
.863e	38		sec				sec
.863f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8642	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8645	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8648	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.864b	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.864e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8651	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8654	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8657	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.865a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.865d	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8660	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8663	60		rts				rts
.8664					AddInteger:
.8664	fa		plx				plx
.8665	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8668	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.866b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.866c	0a		asl a				asl 	a
.866d	10 05		bpl $8674			bpl 	_NotRef
.866f	48		pha				pha
.8670	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8673	68		pla				pla
.8674					_NotRef:
.8674	0a		asl a				asl 	a 							; put MSB of type into A:7
.8675	30 0b		bmi $8682			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8677	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.867a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.867d	f0 06		beq $8685			beq 	_IntegerCode 				; if clear, then we have two integers
.867f	4c 20 96	jmp $9620			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8682					_StringData:
.8682	4c 37 85	jmp $8537			jmp 	StringConcat							; at least one string - don't know both are strings.
.8685					_IntegerCode:
.8685					AddCode:
.8685	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8688	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.868b	10 8b		bpl $8618			bpl 	AddTopTwoStack
.868d	20 3e 86	jsr $863e			jsr 	SubTopTwoStack 				; do a physical subtraction
.8690	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8693	10 09		bpl $869e			bpl 	_AddExit
.8695	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8698	9d 00 06	sta $0600,x			sta 	NSStatus,x
.869b	20 86 8e	jsr $8e86			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.869e					_AddExit:
.869e	60		rts				rts
.869f					SubInteger:
.869f	fa		plx				plx
.86a0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86a3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86a6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86a7	0a		asl a				asl 	a
.86a8	10 05		bpl $86af			bpl 	_NotRef
.86aa	48		pha				pha
.86ab	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86ae	68		pla				pla
.86af					_NotRef:
.86af	0a		asl a				asl 	a 							; put MSB of type into A:7
.86b0	30 0b		bmi $86bd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.86b2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86b5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86b8	f0 06		beq $86c0			beq 	_IntegerCode 				; if clear, then we have two integers
.86ba	4c 25 96	jmp $9625			jmp 	FloatingPointSub 							; otherwise at least one float.
.86bd					_StringData:
.86bd	4c 36 99	jmp $9936			jmp 	NotDoneError							; at least one string - don't know both are strings.
.86c0					_IntegerCode:
.86c0	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.86c3	49 80		eor #$80			eor 	#$80
.86c5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.86c8	80 bb		bra $8685			bra 	AddCode 					; and do the same code as add.
.86ca					AndInteger:
.86ca	fa		plx				plx
.86cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86ce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86d1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86d2	0a		asl a				asl 	a
.86d3	10 05		bpl $86da			bpl 	_NotRef
.86d5	48		pha				pha
.86d6	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86d9	68		pla				pla
.86da					_NotRef:
.86da	0a		asl a				asl 	a
.86db	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86dd	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86e3	f0 03		beq $86e8			beq 	_IntegerCode 				; if clear, then we have two integers
.86e5	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.86e8					_IntegerCode:
.86e8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86eb	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.86ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86f1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86f4	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.86f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86fa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86fd	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8700	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8703	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8706	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8709	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.870c	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.870f	60		rts				rts
.8710					OraInteger:
.8710	fa		plx				plx
.8711	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8714	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8717	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8718	0a		asl a				asl 	a
.8719	10 05		bpl $8720			bpl 	_NotRef
.871b	48		pha				pha
.871c	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.871f	68		pla				pla
.8720					_NotRef:
.8720	0a		asl a				asl 	a
.8721	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8723	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8726	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8729	f0 03		beq $872e			beq 	_IntegerCode 				; if clear, then we have two integers
.872b	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.872e					_IntegerCode:
.872e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8731	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8734	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8737	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.873a	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.873d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8740	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8743	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8746	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8749	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.874c	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.874f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8752	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8755	60		rts				rts
.8756					EorInteger:
.8756	fa		plx				plx
.8757	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.875a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.875d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.875e	0a		asl a				asl 	a
.875f	10 05		bpl $8766			bpl 	_NotRef
.8761	48		pha				pha
.8762	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8765	68		pla				pla
.8766					_NotRef:
.8766	0a		asl a				asl 	a
.8767	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8769	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.876c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.876f	f0 03		beq $8774			beq 	_IntegerCode 				; if clear, then we have two integers
.8771	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.8774					_IntegerCode:
.8774	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8777	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.877a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.877d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8780	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8783	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8786	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8789	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.878c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.878f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8792	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8795	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8798	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.879b	60		rts				rts
.879c					WordIndirect:
.879c	fa		plx				plx
.879d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87a0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87a3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87a4	0a		asl a				asl 	a
.87a5	10 05		bpl $87ac			bpl 	_NotRef
.87a7	48		pha				pha
.87a8	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87ab	68		pla				pla
.87ac					_NotRef:
.87ac	0a		asl a				asl 	a
.87ad	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87af	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87b2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87b5	f0 03		beq $87ba			beq 	_IntegerCode 				; if clear, then we have two integers
.87b7	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.87ba					_IntegerCode:
.87ba	20 85 86	jsr $8685			jsr 	AddCode 					; add the two values
.87bd	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.87bf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87c2	60		rts				rts
.87c3					ByteIndirect:
.87c3	fa		plx				plx
.87c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87c7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87ca	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87cb	0a		asl a				asl 	a
.87cc	10 05		bpl $87d3			bpl 	_NotRef
.87ce	48		pha				pha
.87cf	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87d2	68		pla				pla
.87d3					_NotRef:
.87d3	0a		asl a				asl 	a
.87d4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87d6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87d9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87dc	f0 03		beq $87e1			beq 	_IntegerCode 				; if clear, then we have two integers
.87de	4c 2c 99	jmp $992c			jmp 	TypeError 					; anything else, type mismatch.
.87e1					_IntegerCode:
.87e1	20 85 86	jsr $8685			jsr 	AddCode 					; add the two values
.87e4	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.87e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.95c5					ConvertInt16:
.95c5	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.95c8	8e 10 06	stx $0610			stx 	NSMantissa1
.95cb	9c 18 06	stz $0618			stz 	NSMantissa2
.95ce	9c 20 06	stz $0620			stz 	NSMantissa3
.95d1	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.95d4	a2 00		ldx #$00			ldx 	#0 							; stack level
.95d6	a9 0a		lda #$0a			lda 	#10 						; base
.95d8	80 00		bra $95da			bra 	ConvertInt32
.95da					ConvertInt32:
.95da	5a		phy				phy
.95db	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95dd	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.95e0	10 08		bpl $95ea			bpl 	_CI32NotNeg
.95e2	48		pha				pha
.95e3	a9 2d		lda #$2d			lda 	#'-'
.95e5	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.95e8	c8		iny				iny
.95e9	68		pla				pla
.95ea					_CI32NotNeg:
.95ea	20 f8 95	jsr $95f8			jsr 	_CI32DivideConvert 			; recursive conversion
.95ed	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95ef	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.95f2	7a		ply				ply
.95f3	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.95f5	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.95f7	60		rts				rts
.95f8					_CI32DivideConvert:
.95f8	e8		inx				inx 								; write to next slot up
.95f9	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.95fc	ca		dex				dex
.95fd	20 fa 94	jsr $94fa			jsr 	Int32Divide 				; divide
.9600	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9603	48		pha				pha
.9604	20 a9 94	jsr $94a9			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9607	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; is it zero ?
.960a	f0 06		beq $9612			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.960c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.960f	20 f8 95	jsr $95f8			jsr 	_CI32DivideConvert 			; and recusrively call.
.9612					_CI32NoRecurse:
.9612	68		pla				pla 								; remainder
.9613	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9615	90 02		bcc $9619			bcc 	_CI32NotHex
.9617	69 26		adc #$26			adc 	#6+32
.9619					_CI32NotHex:
.9619	69 30		adc #$30			adc 	#48
.961b	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.961e	c8		iny				iny
.961f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.87ea					PrecedenceLevel:
>87ea	04					.byte	 4	; $00 <<
>87eb	02					.byte	 2	; $01 <=
>87ec	02					.byte	 2	; $02 <>
>87ed	00					.byte	 0	; $03 !!3
>87ee	00					.byte	 0	; $04 ><
>87ef	02					.byte	 2	; $05 >=
>87f0	04					.byte	 4	; $06 >>
>87f1	00					.byte	 0	; $07 !!7
>87f2	00					.byte	 0	; $08 !!8
>87f3	00					.byte	 0	; $09 !!9
>87f4	00					.byte	 0	; $0a !!10
>87f5	00					.byte	 0	; $0b !!11
>87f6	00					.byte	 0	; $0c !!12
>87f7	00					.byte	 0	; $0d !!13
>87f8	00					.byte	 0	; $0e !!14
>87f9	00					.byte	 0	; $0f !!15
>87fa	00					.byte	 0	; $10 @
>87fb	00					.byte	 0	; $11 !!17
>87fc	00					.byte	 0	; $12 !!18
>87fd	00					.byte	 0	; $13 [
>87fe	04					.byte	 4	; $14 \
>87ff	00					.byte	 0	; $15 ]
>8800	01					.byte	 1	; $16 ^
>8801	00					.byte	 0	; $17 _
>8802	00					.byte	 0	; $18 `
>8803	00					.byte	 0	; $19 !!25
>8804	00					.byte	 0	; $1a !!26
>8805	00					.byte	 0	; $1b {
>8806	01					.byte	 1	; $1c |
>8807	00					.byte	 0	; $1d }
>8808	00					.byte	 0	; $1e ~
>8809	00					.byte	 0	; $1f [7m<7F>[m
>880a	00					.byte	 0	; $20
>880b	05					.byte	 5	; $21 !
>880c	00					.byte	 0	; $22 "
>880d	00					.byte	 0	; $23 #
>880e	05					.byte	 5	; $24 $
>880f	04					.byte	 4	; $25 %
>8810	01					.byte	 1	; $26 &
>8811	00					.byte	 0	; $27 '
>8812	00					.byte	 0	; $28 (
>8813	00					.byte	 0	; $29 )
>8814	04					.byte	 4	; $2a *
>8815	03					.byte	 3	; $2b +
>8816	00					.byte	 0	; $2c ,
>8817	03					.byte	 3	; $2d -
>8818	00					.byte	 0	; $2e .
>8819	04					.byte	 4	; $2f /
>881a	00					.byte	 0	; $30 0
>881b	00					.byte	 0	; $31 1
>881c	00					.byte	 0	; $32 2
>881d	00					.byte	 0	; $33 3
>881e	00					.byte	 0	; $34 4
>881f	00					.byte	 0	; $35 5
>8820	00					.byte	 0	; $36 6
>8821	00					.byte	 0	; $37 7
>8822	00					.byte	 0	; $38 8
>8823	00					.byte	 0	; $39 9
>8824	00					.byte	 0	; $3a :
>8825	00					.byte	 0	; $3b ;
>8826	02					.byte	 2	; $3c <
>8827	02					.byte	 2	; $3d =
>8828	02					.byte	 2	; $3e >
>8829	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.882a					EvaluateExpressionAt0:
.882a	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.882c					EvaluateExpression:
.882c	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.882e					EvaluateExpressionAtPrecedence:
.882e	48		pha				pha 								; save precedence level
.882f	20 fd 8a	jsr $8afd			jsr 	EvaluateTerm 				; evaluate term into level X.
.8832	68		pla				pla 								; restore precedence level.
.8833					_EXPRLoop:
.8833	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8835	b1 30		lda ($30),y			lda 	(codePtr),y
.8837	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8839	b0 25		bcs $8860			bcs 	_EXPRExit
.883b	da		phx				phx 								; read the operator precedence
.883c	aa		tax				tax
.883d	bd ea 87	lda $87ea,x			lda 	PrecedenceLevel,x
.8840	fa		plx				plx
.8841	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8843	f0 1b		beq $8860			beq 	_EXPRExit
.8845	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8847	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8849	c5 37		cmp $37				cmp 	zTemp0+1
.884b	b0 13		bcs $8860			bcs		_EXPRExit 					; if current >= operator exit
.884d	48		pha				pha 								; save current precedence.
.884e	b1 30		lda ($30),y			lda 	(codePtr),y
.8850	c8		iny				iny
.8851	48		pha				pha
.8852	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8854	e8		inx				inx 								; work out the right hand side.
.8855	20 2e 88	jsr $882e			jsr 	EvaluateExpressionAtPrecedence
.8858	ca		dex				dex
.8859	68		pla				pla 								; get operator, call the code.
.885a	20 63 88	jsr $8863			jsr 	_EXPRCaller
.885d	68		pla				pla 								; restore precedence level
.885e	80 d3		bra $8833			bra 	_EXPRLoop 					; and go round.
.8860					_EXPRExit:
.8860	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8862	60		rts				rts
.8863					_EXPRCaller:
.8863	da		phx				phx 								; save on stack, first thing is to restore it
.8864	0a		asl a				asl 	a 							; double so can use vectors into X
.8865	aa		tax				tax
.8866	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9620					FloatingPointAdd:
.9620	20 c1 97	jsr $97c1			jsr 	FloatPrepare 				; prepare for floats
.9623	80 0b		bra $9630			bra 	FloatAdd
.9625					FloatingPointSub:
.9625	20 c1 97	jsr $97c1			jsr 	FloatPrepare 				; prepare for floats
.9628					FloatSubtract:
.9628	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.962b	49 80		eor #$80			eor 	#$80
.962d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9630					FloatAdd:
.9630	48		pha				pha
.9631	5a		phy				phy
.9632	20 d2 97	jsr $97d2			jsr 	NSNormalise 				; normalise S[X]
.9635	f0 54		beq $968b			beq 	_FAReturn1
.9637	e8		inx				inx 								; normalise S[X+1]
.9638	20 d2 97	jsr $97d2			jsr 	NSNormalise
.963b	ca		dex				dex
.963c	c9 00		cmp #$00			cmp 	#0
.963e	f0 6f		beq $96af			beq 	_FAExit 					; if so, just return A
.9640	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9643	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9646	f0 1b		beq $9663			beq 	_FAExponentsEqual
.9648	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.964b	a8		tay				tay
.964c	38		sec				sec 								; do a signed comparison of the exponents.
.964d	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9650	50 02		bvc $9654			bvc 	_FANoSignedChange
.9652	49 80		eor #$80			eor 	#$80
.9654					_FANoSignedChange:
.9654	29 80		and #$80			and 	#$80
.9656	10 03		bpl $965b			bpl 	_FAHaveMax
.9658	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.965b					_FAHaveMax:
.965b	20 b2 96	jsr $96b2			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.965e	e8		inx				inx
.965f	20 b2 96	jsr $96b2			jsr 	_FAShiftToExponent
.9662	ca		dex				dex
.9663					_FAExponentsEqual:
.9663	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9666	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9669	30 10		bmi $967b			bmi 	_FADifferentSigns
.966b	20 18 86	jsr $8618			jsr 	AddTopTwoStack 				; do the add of the mantissae
.966e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9671	10 3c		bpl $96af			bpl 	_FAExit 					; if no, we are done.
.9673	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9676	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9679	80 34		bra $96af			bra 	_FAExit
.967b					_FADifferentSigns:
.967b	20 3e 86	jsr $863e			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.967e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9681	10 2c		bpl $96af			bpl 	_FAExit 					; if no, we are done.
.9683	20 7d 8e	jsr $8e7d			jsr 	NSMNegate 					; netate result
.9686	20 86 8e	jsr $8e86			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9689	80 24		bra $96af			bra 	_FAExit
.968b					_FAReturn1:
.968b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.968e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9691	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9694	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9697	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.969a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.969d	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.96a0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96a3	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.96a6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96a9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.96ac	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96af					_FAExit:
.96af	7a		ply				ply
.96b0	68		pla				pla
.96b1	60		rts				rts
.96b2					_FAShiftToExponent:
.96b2					_FAShiftToExponent2:
.96b2	98		tya				tya 								; compare Y to exponent
.96b3	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96b6	f0 08		beq $96c0			beq 	_FASEExit 					; exit if so.
.96b8	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight	 			; shift the mantissa right
.96bb	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.96be	80 f2		bra $96b2			bra 	_FAShiftToExponent2
.96c0					_FASEExit:
.96c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.96c1					CompareFloat:
.96c1	20 28 96	jsr $9628			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.96c4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.96c7	29 f8		and #$f8			and 	#$F8
.96c9	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96cc	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.96cf	f0 09		beq $96da			beq 	_FCExit 					; zero, so approximately identical
.96d1	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.96d3	3c 00 06	bit $0600,x			bit 	NSStatus,x
.96d6	10 02		bpl $96da			bpl 	_FCExit
.96d8					_FCNegative:
.96d8	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.96da					_FCExit:
.96da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.96db					FDivideCommand:
.96db	fa		plx				plx	 								; restore stack position
.96dc	20 c1 97	jsr $97c1			jsr 	FloatPrepare 				; prepare for floats
.96df					FloatDivide:
.96df	48		pha				pha
.96e0	e8		inx				inx
.96e1	20 d2 97	jsr $97d2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.96e4	ca		dex				dex
.96e5	c9 00		cmp #$00			cmp 	#0
.96e7	f0 20		beq $9709			beq 	_FDZero
.96e9	20 d2 97	jsr $97d2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.96ec	f0 19		beq $9707			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.96ee	20 1c 95	jsr $951c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.96f1	20 a9 94	jsr $94a9			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.96f4	20 d2 97	jsr $97d2			jsr		NSNormalise 				; renormalise
.96f7	20 b7 95	jsr $95b7			jsr 	CalculateSign 				; calculate result sign
.96fa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.96fd	38		sec				sec
.96fe	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9701	38		sec				sec
.9702	e9 1e		sbc #$1e			sbc 	#30
.9704	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9707					_FDExit:
.9707	68		pla				pla
.9708	60		rts				rts
.9709					_FDZero:
.9709	a9 03		lda #$03		lda	#3
.970b	4c 2a 84	jmp $842a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.970e					FloatFractionalPart:
.970e	5a		phy				phy
.970f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9712	29 7f		and #$7f			and 	#$7F
.9714	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9717	20 d2 97	jsr $97d2			jsr 	NSNormalise
.971a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.971d	38		sec				sec
.971e	e9 e0		sbc #$e0			sbc 	#$E0
.9720	90 31		bcc $9753			bcc 	_FFPExit 					; already fractional
.9722	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9724	b0 2a		bcs $9750			bcs 	_FFPZero
.9726	a8		tay				tay 								; put count to do in Y
.9727	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.972a	20 55 97	jsr $9755			jsr 	_FFPPartial
.972d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9730	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9733	20 55 97	jsr $9755			jsr 	_FFPPartial
.9736	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9739	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.973c	20 55 97	jsr $9755			jsr 	_FFPPartial
.973f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9742	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9745	20 55 97	jsr $9755			jsr 	_FFPPartial
.9748	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.974b	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; zeroed check.
.974e	d0 03		bne $9753			bne 	_FFPExit
.9750					_FFPZero:
.9750	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.9753					_FFPExit:
.9753	7a		ply				ply
.9754	60		rts				rts
.9755					_FFPPartial:
.9755	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9757	f0 17		beq $9770			beq 	_FFFPPExit
.9759	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.975b	b0 0c		bcs $9769			bcs 	_FFFPPWholeByte
.975d	5a		phy				phy
.975e					_FFFPPLeft:
.975e	0a		asl a				asl 	a
.975f	88		dey				dey
.9760	d0 fc		bne $975e			bne 	_FFFPPLeft
.9762	7a		ply				ply
.9763					_FFFPPRight:
.9763	4a		lsr a				lsr 	a
.9764	88		dey				dey
.9765	d0 fc		bne $9763			bne 	_FFFPPRight
.9767	80 07		bra $9770			bra 	_FFFPPExit
.9769					_FFFPPWholeByte:
.9769	98		tya				tya 								; subtract 8 from count
.976a	38		sec				sec
.976b	e9 08		sbc #$08			sbc 	#8
.976d	a8		tay				tay
.976e	a9 00		lda #$00			lda 	#0 							; and clear all
.9770					_FFFPPExit:
.9770	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9771					FloatIntegerPart:
.9771	48		pha				pha
.9772	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9775	f0 1f		beq $9796			beq 	_FIPExit 					; if so do nothing
.9777	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; is it zero ?
.977a	f0 17		beq $9793			beq 	_FIPZero 					; if so return zero.
.977c	20 d2 97	jsr $97d2			jsr 	NSNormalise 				; normalise
.977f	f0 12		beq $9793			beq 	_FIPZero 					; normalised to zero, exit zero
.9781					_FIPShift:
.9781	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9784	10 08		bpl $978e			bpl 	_FIPCheckZero
.9786	20 f4 8e	jsr $8ef4			jsr 	NSMShiftRight 				; shift mantissa right
.9789	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.978c	80 f3		bra $9781			bra 	_FIPShift
.978e					_FIPCheckZero:
.978e	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; avoid -0 problem
.9791	d0 03		bne $9796			bne 	_FIPExit 					; set to zero if mantissa zero.
.9793					_FIPZero:
.9793	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.9796					_FIPExit:
.9796	68		pla				pla
.9797	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9798					FloatingPointMultiply:
.9798	20 c1 97	jsr $97c1			jsr 	FloatPrepare 				; prepare for floats
.979b					FloatMultiply:
.979b	48		pha				pha
.979c	20 d2 97	jsr $97d2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.979f	f0 1b		beq $97bc			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97a1	e8		inx				inx
.97a2	20 d2 97	jsr $97d2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97a5	ca		dex				dex
.97a6	c9 00		cmp #$00			cmp 	#0
.97a8	f0 0f		beq $97b9			beq 	_FDSetZero
.97aa	20 72 95	jsr $9572			jsr 	MultiplyShort 				; calculate the result.
.97ad	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97b0	18		clc				clc
.97b1	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.97b4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97b7	80 03		bra $97bc			bra 	_FDExit
.97b9					_FDSetZero:
.97b9	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero 					; return 0
.97bc					_FDExit:
.97bc	20 d2 97	jsr $97d2			jsr 	NSNormalise 				; normalise the result
.97bf	68		pla				pla
.97c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97c1					FloatPrepare:
.97c1	20 3c 89	jsr $893c			jsr 	DereferenceTopTwo 			; dereference the top two values
.97c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.97c7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.97ca	29 10		and #$10			and 	#NSBIsString
.97cc	d0 01		bne $97cf			bne 	_FDType
.97ce	60		rts				rts
.97cf					_FDType:
.97cf	4c 2c 99	jmp $992c			jmp 	TypeError
.97d2					NSNormalise:
.97d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.97d5	29 80		and #$80			and 	#$80
.97d7	09 08		ora #$08			ora 	#NSTFloat
.97d9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97dc	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; if zero exit
.97df	d0 09		bne $97ea			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.97e1	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.97e4	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.97e7	a9 00		lda #$00			lda 	#0 							; set Z flag
.97e9	60		rts				rts
.97ea					_NSNormaliseOptimise:
.97ea	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.97ed	d0 22		bne $9811			bne 	_NSNormaliseLoop
.97ef	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.97f2	30 1d		bmi $9811			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.97f4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97f7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97fa	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97fd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9800	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9803	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9806	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9809	38		sec				sec
.980a	e9 08		sbc #$08			sbc 	#8
.980c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.980f	80 d9		bra $97ea			bra 	_NSNormaliseOptimise
.9811					_NSNormaliseLoop:
.9811	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9814	70 08		bvs $981e			bvs 	_NSNExit 					; exit if so with Z flag clear
.9816	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; shift mantissa left
.9819	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.981c	80 f3		bra $9811			bra 	_NSNormaliseLoop
.981e					_NSNExit:
.981e	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9820	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8869					AssignNumber:
.8869	5a		phy				phy
.886a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.886d	85 36		sta $36				sta 	zTemp0
.886f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8872	85 37		sta $37				sta 	zTemp0+1
.8874	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8877	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8879	9d 00 06	sta $0600,x			sta 	NSStatus,x
.887c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.887e	c9 08		cmp #$08			cmp 	#NSTFloat
.8880	f0 2a		beq $88ac			beq 	_ANFloat
.8882	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8885	f0 05		beq $888c			beq		_ANNotFloat
.8887	e8		inx				inx
.8888	20 71 97	jsr $9771			jsr 	FloatIntegerPart 			; make it an integer
.888b	ca		dex				dex
.888c					_ANNotFloat:
.888c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.888f	29 03		and #$03			and 	#3
.8891	d0 05		bne $8898			bne 	_ANByteWord
.8893	20 b8 88	jsr $88b8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8896	80 1e		bra $88b6			bra 	_ANExit
.8898					_ANByteWord:
.8898	48		pha				pha 								; save count
.8899	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.889c	92 36		sta ($36)			sta 	(zTemp0)
.889e	68		pla				pla
.889f	c9 01		cmp #$01			cmp	 	#1
.88a1	f0 13		beq $88b6			beq 	_ANExit
.88a3	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.88a6	a0 01		ldy #$01			ldy 	#1
.88a8	91 36		sta ($36),y			sta 	(zTemp0),y
.88aa	80 0a		bra $88b6			bra 	_ANExit
.88ac					_ANFloat:
.88ac	20 b8 88	jsr $88b8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.88af	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.88b2	a0 04		ldy #$04			ldy 	#4
.88b4	91 36		sta ($36),y			sta 	(zTemp0),y
.88b6					_ANExit:
.88b6	7a		ply				ply
.88b7	60		rts				rts
.88b8					_ANCopy4PackSign:
.88b8	a0 03		ldy #$03			ldy 	#3
.88ba	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.88bd	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.88bf	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.88c2	91 36		sta ($36),y			sta 	(zTemp0),y
.88c4	88		dey				dey
.88c5	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.88c8	91 36		sta ($36),y			sta 	(zTemp0),y
.88ca	88		dey				dey
.88cb	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.88ce	91 36		sta ($36),y			sta 	(zTemp0),y
.88d0	88		dey				dey
.88d1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.88d4	91 36		sta ($36),y			sta 	(zTemp0),y
.88d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.88d7					AssignString:
.88d7	5a		phy				phy
.88d8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.88db	85 38		sta $38				sta 	zTemp1
.88dd	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.88e0	85 39		sta $39				sta 	zTemp1+1
.88e2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88e5	85 36		sta $36				sta 	zTemp0
.88e7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88ea	85 37		sta $37				sta 	zTemp0+1
.88ec	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.88ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f0	f0 23		beq $8915			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.88f2	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.88f3	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.88f5	e9 02		sbc #$02			sbc 	#2
.88f7	85 3c		sta $3c				sta 	zsTemp
.88f9	a0 01		ldy #$01			ldy 	#1
.88fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.88fd	e9 00		sbc #$00			sbc 	#0
.88ff	85 3d		sta $3d				sta 	zsTemp+1
.8901	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8903					_ASGetLength:
.8903	c8		iny				iny
.8904	b1 38		lda ($38),y			lda 	(zTemp1),y
.8906	d0 fb		bne $8903			bne 	_ASGetLength
.8908	98		tya				tya 								; is this length <= current length
.8909	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.890b	90 20		bcc $892d			bcc 	_ASCopyString
.890d	f0 1e		beq $892d			beq 	_ASCopyString
.890f	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8911	a0 01		ldy #$01			ldy 	#1
.8913	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8915					_ASNewStringRequired:
.8915	e8		inx				inx 								; concrete the new string.
.8916	20 4a 9a	jsr $9a4a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8919	ca		dex				dex
.891a	18		clc				clc
.891b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.891e	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8920	92 36		sta ($36)			sta 	(zTemp0)
.8922	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8925	69 00		adc #$00			adc 	#0
.8927	a0 01		ldy #$01			ldy 	#1
.8929	91 36		sta ($36),y			sta 	(zTemp0),y
.892b	80 0d		bra $893a			bra 	_ASExit
.892d					_ASCopyString:
.892d	a0 00		ldy #$00			ldy 	#0
.892f					_ASCopyLoop:
.892f	b1 38		lda ($38),y			lda 	(zTemp1),y
.8931	c8		iny				iny
.8932	c8		iny				iny
.8933	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8935	88		dey				dey
.8936	c9 00		cmp #$00			cmp 	#0
.8938	d0 f5		bne $892f			bne 	_ASCopyLoop
.893a					_ASExit:
.893a	7a		ply				ply
.893b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.893c					DereferenceTopTwo:
.893c	e8		inx				inx
.893d	20 41 89	jsr $8941			jsr 	Dereference 				; deref x+1
.8940	ca		dex				dex  								; falls through to deref x
.8941					Dereference:
.8941	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8944	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8946	f0 57		beq $899f			beq 	_DRFExit 					; not a reference
.8948	5a		phy				phy
.8949	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.894c	85 36		sta $36				sta 	zTemp0
.894e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8951	85 37		sta $37				sta 	zTemp0+1
.8953	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8956	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8958	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.895b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.895e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8960	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8962	f0 0f		beq $8973			beq 	_DRFDereferenceTwo
.8964	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8966	f0 39		beq $89a1			beq 	_DRFFull
.8968	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.896b	29 03		and #$03			and 	#3
.896d	f0 32		beq $89a1			beq 	_DRFFull 					; the whole word
.896f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8971	f0 07		beq $897a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8973					_DRFDereferenceTwo:
.8973	a0 01		ldy #$01			ldy 	#1
.8975	b1 36		lda ($36),y			lda 	(zTemp0),y
.8977	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.897a					_DRFClear23:
.897a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.897d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8980	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8983	29 18		and #$18			and 	#NSBTypeMask
.8985	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8988	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.898a	d0 12		bne $899e			bne 	_DRFNotString
.898c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.898f	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8992	d0 0a		bne $899e			bne 	_DRFNotString
.8994	a9 a0		lda #$a0			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8996	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8999	a9 89		lda #$89			lda 	#_DRFNullString >> 8
.899b	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.899e					_DRFNotString
.899e	7a		ply				ply 								; restore Y and exit
.899f					_DRFExit:
.899f	60		rts				rts
.89a0					_DRFNullString:
>89a0	00						.byte 	0
.89a1					_DRFFull:
.89a1	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.89a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.89a5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89a8	c8		iny				iny
.89a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ab	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89ae	c8		iny				iny
.89af	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89b4	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.89b7	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.89ba	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.89bc	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.89bf	f0 06		beq $89c7			beq 	_DRFNoExponent
.89c1	c8		iny				iny 								; if not, read the exponent as well.
.89c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.89c4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.89c7					_DRFNoExponent:
.89c7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.89ca	10 0d		bpl $89d9			bpl 	_DRFExit2 					; if not, then exit.
.89cc	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.89ce	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.89d4	09 80		ora #$80			ora 	#NSBIsNegative
.89d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89d9					_DRFExit2:
.89d9	7a		ply				ply
.89da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.89db					EncodeNumberStart:
.89db	38		sec				sec
.89dc	80 01		bra $89df			bra 	EncodeNumberContinue+1
.89de					EncodeNumberContinue:
.89de	18		clc				clc
.89df					EncodeNumber:
.89df	08		php				php 								; save reset.
.89e0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.89e2	f0 12		beq $89f6			beq 	_ENIsOkay
.89e4	c9 30		cmp #$30			cmp 	#"0"
.89e6	90 04		bcc $89ec			bcc 	_ENBadNumber
.89e8	c9 3a		cmp #$3a			cmp 	#"9"+1
.89ea	90 0a		bcc $89f6			bcc 	_ENIsOkay
.89ec					_ENBadNumber:
.89ec	28		plp				plp 								; throw saved reset
.89ed	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.89f0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.89f2	f0 7e		beq $8a72			beq 	_ENConstructFinal
.89f4					_ENFail:
.89f4	18		clc				clc 								; not allowed
.89f5	60		rts				rts
.89f6					_ENIsOkay:
.89f6	28		plp				plp 								; are we restarting
.89f7	90 15		bcc $8a0e			bcc 	_ENNoRestart
.89f9					_ENStartEncode:
.89f9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.89fb	f0 0c		beq $8a09			beq 	_ENFirstDP
.89fd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.89ff	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.8a02	a9 01		lda #$01			lda 	#ESTA_Low
.8a04					_ENExitChange:
.8a04	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8a07	38		sec				sec
.8a08	60		rts				rts
.8a09					_ENFirstDP:
.8a09	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero 					; clear integer part
.8a0c	80 3f		bra $8a4d			bra 	_ESTASwitchFloat			; go straight to float and exi
.8a0e					_ENNoRestart:
.8a0e	48		pha				pha 								; save on stack.
.8a0f	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8a12	c9 01		cmp #$01			cmp 	#ESTA_Low
.8a14	f0 09		beq $8a1f			beq  	_ESTALowState
.8a16	c9 02		cmp #$02			cmp 	#ESTA_High
.8a18	f0 29		beq $8a43			beq 	_ESTAHighState
.8a1a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a1c	f0 3b		beq $8a59			beq 	_ESTADecimalState
>8a1e	db						.byte 	$DB 						; causes a break in the emulator
.8a1f					_ESTALowState:
.8a1f	68		pla				pla 								; get value back
.8a20	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8a22	f0 29		beq $8a4d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8a24	29 0f		and #$0f			and 	#15 						; make digit
.8a26	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8a29	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8a2c	0a		asl a				asl 	a
.8a2d	0a		asl a				asl 	a
.8a2e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a31	0a		asl a				asl 	a
.8a32	6d 06 07	adc $0706			adc 	DigitTemp
.8a35	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a38	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8a3a	90 05		bcc $8a41			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8a3c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8a3e	8d 05 07	sta $0705			sta 	EncodeState
.8a41					_ESTANoSwitch:
.8a41	38		sec				sec
.8a42	60		rts				rts
.8a43					_ESTAHighState:
.8a43	68		pla				pla 								; get value back
.8a44	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8a46	f0 05		beq $8a4d			beq 	_ESTASwitchFloat
.8a48	20 ac 8a	jsr $8aac			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8a4b	38		sec				sec
.8a4c	60		rts				rts
.8a4d					_ESTASwitchFloat:
.8a4d	9c 07 07	stz $0707			stz 	DecimalCount
.8a50	e8		inx				inx 								; zero the decimal additive.
.8a51	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.8a54	ca		dex				dex
.8a55	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8a57	80 ab		bra $8a04			bra 	_ENExitChange
.8a59					_ESTADecimalState:
.8a59	68		pla				pla 								; digit.
.8a5a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8a5c	f0 96		beq $89f4			beq 	_ENFail
.8a5e	e8		inx				inx 								; put digit into fractional part of X+1
.8a5f	20 ac 8a	jsr $8aac			jsr 	ESTAShiftDigitIntoMantissa
.8a62	ca		dex				dex
.8a63	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8a66	ad 07 07	lda $0707			lda 	DecimalCount
.8a69	c9 0b		cmp #$0b			cmp 	#11
.8a6b	f0 02		beq $8a6f			beq 	_ESTADSFail
.8a6d	38		sec				sec
.8a6e	60		rts				rts
.8a6f					_ESTADSFail:
.8a6f	4c 27 99	jmp $9927			jmp 	RangeError
.8a72					_ENConstructFinal:
.8a72	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8a75	f0 33		beq $8aaa			beq 	_ENCFExit 					; no decimals
.8a77	5a		phy				phy
.8a78	0a		asl a				asl 	a 							; x 4 and CLC
.8a79	0a		asl a				asl 	a
.8a7a	6d 07 07	adc $0707			adc 	DecimalCount
.8a7d	a8		tay				tay
.8a7e	b9 e6 98	lda $98e6,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8a81	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a84	b9 e7 98	lda $98e7,y			lda 	DecimalScalarTable-5+1,y
.8a87	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8a8a	b9 e8 98	lda $98e8,y			lda 	DecimalScalarTable-5+2,y
.8a8d	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8a90	b9 e9 98	lda $98e9,y			lda 	DecimalScalarTable-5+3,y
.8a93	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8a96	b9 ea 98	lda $98ea,y			lda 	DecimalScalarTable-5+4,y
.8a99	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8a9c	a9 08		lda #$08			lda 	#NSTFloat
.8a9e	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8aa1	7a		ply				ply
.8aa2	e8		inx				inx 								; multiply decimal const by decimal scalar
.8aa3	20 9b 97	jsr $979b			jsr 	FloatMultiply
.8aa6	ca		dex				dex
.8aa7	20 30 96	jsr $9630			jsr 	FloatAdd 					; add to integer part.
.8aaa					_ENCFExit:
.8aaa	18		clc				clc 								; reject the digit.
.8aab	60		rts				rts
.8aac					ESTAShiftDigitIntoMantissa:
.8aac	29 0f		and #$0f			and 	#15 						; save digit
.8aae	48		pha				pha
.8aaf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8ab2	48		pha				pha
.8ab3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8ab6	48		pha				pha
.8ab7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8aba	48		pha				pha
.8abb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8abe	48		pha				pha
.8abf	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 2
.8ac2	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 4
.8ac5	18		clc				clc 								; pop mantissa and add
.8ac6	68		pla				pla
.8ac7	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8aca	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8acd	68		pla				pla
.8ace	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8ad1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ad4	68		pla				pla
.8ad5	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8ad8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8adb	68		pla				pla
.8adc	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8adf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8ae2	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 10
.8ae5	68		pla				pla 								; add digit
.8ae6	18		clc				clc
.8ae7	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8aea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8aed	90 0d		bcc $8afc			bcc 	_ESTASDExit
.8aef	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8af2	d0 08		bne $8afc			bne 	_ESTASDExit
.8af4	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8af7	d0 03		bne $8afc			bne 	_ESTASDExit
.8af9	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8afc					_ESTASDExit:
.8afc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8afd					EvaluateTerm:
.8afd	b1 30		lda ($30),y			lda 	(codePtr),y
.8aff	30 18		bmi $8b19			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8b01	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8b03	b0 6f		bcs $8b74			bcs 	_ETVariable
.8b05	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8b07	90 6e		bcc $8b77			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8b09	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b0b	b0 6a		bcs $8b77			bcs 	_ETPuncUnary
.8b0d	20 db 89	jsr $89db			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8b10					_ETNumber:
.8b10	c8		iny				iny 								; keep encoding until we have the numbers
.8b11	b1 30		lda ($30),y			lda 	(codePtr),y
.8b13	20 de 89	jsr $89de			jsr 	EncodeNumberContinue
.8b16	b0 f8		bcs $8b10			bcs 	_ETNumber 					; go back if accepted.
.8b18	60		rts				rts
.8b19					_ETCheckUnary:
.8b19	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8b1b	f0 41		beq $8b5e			beq 	_ETString
.8b1d	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8b1f	f0 12		beq $8b33			beq 	_ETHexConstant
.8b21	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8b23	90 0b		bcc $8b30			bcc 	_ETSyntaxError
.8b25	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8b27	b0 07		bcs $8b30			bcs 	_ETSyntaxError
.8b29	da		phx				phx 								; push X on the stack
.8b2a	0a		asl a				asl 	a 							; put vector x 2 into X
.8b2b	aa		tax				tax
.8b2c	c8		iny				iny 								; consume unary function token
.8b2d	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8b30					_ETSyntaxError:
.8b30	4c 22 99	jmp $9922			jmp 	SyntaxError
.8b33					_ETHexConstant:
.8b33	c8		iny				iny 								; skip #
.8b34	c8		iny				iny 								; skip count
.8b35	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero 					; clear result
.8b38					_ETHLoop:
.8b38	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3a	c8		iny				iny 								; and consume
.8b3b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8b3d	f0 1e		beq $8b5d			beq 	_ETHExit
.8b3f	48		pha				pha 								; save on stack.
.8b40	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 2
.8b43	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 4
.8b46	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 8
.8b49	20 e6 8e	jsr $8ee6			jsr 	NSMShiftLeft 				; x 16
.8b4c	68		pla				pla 								; ASCII
.8b4d	c9 41		cmp #$41			cmp 	#'A'
.8b4f	90 02		bcc $8b53			bcc 	_ETHNotChar
.8b51	e9 07		sbc #$07			sbc 	#7
.8b53					_ETHNotChar:
.8b53	29 0f		and #$0f			and 	#15 						; digit now
.8b55	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8b58	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b5b	80 db		bra $8b38			bra 	_ETHLoop 					; go round.
.8b5d					_ETHExit:
.8b5d	60		rts				rts
.8b5e					_ETString:
.8b5e	c8		iny				iny 								; look at length
.8b5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b61	48		pha				pha
.8b62	c8		iny				iny 								; first character
.8b63	20 22 94	jsr $9422			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8b66	68		pla				pla 								; restore count and save
.8b67	85 36		sta $36				sta 	zTemp0
.8b69	98		tya				tya 								; add length to Y to skip it.
.8b6a	18		clc				clc
.8b6b	65 36		adc $36				adc 	zTemp0
.8b6d	a8		tay				tay
.8b6e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8b70	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b73	60		rts				rts
.8b74					_ETVariable:
.8b74	4c ce 8b	jmp $8bce			jmp 	VariableHandler
.8b77					_ETPuncUnary:
.8b77	c8		iny				iny 								; consume the unary character
.8b78	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8b7a	f0 2d		beq $8ba9			beq 	_ETUnaryNegate
.8b7c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8b7e	f0 39		beq $8bb9			beq 	_ETDereference
.8b80	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8b82	f0 43		beq $8bc7			beq 	_ETParenthesis
.8b84	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8b86	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8b88	f0 06		beq $8b90			beq 	_ETIndirection
.8b8a	e6 36		inc $36				inc 	zTemp0
.8b8c	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8b8e	d0 a0		bne $8b30			bne 	_ETSyntaxError
.8b90					_ETIndirection:
.8b90	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8b92	1a		inc a				inc 	a
.8b93	48		pha				pha
.8b94	20 fd 8a	jsr $8afd			jsr 	EvaluateTerm				; evaluate the term
.8b97	20 41 89	jsr $8941			jsr 	Dereference 				; dereference it.
.8b9a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8b9d	d0 07		bne $8ba6			bne 	_ETTypeMismatch
.8b9f	68		pla				pla 								; indirection 1-2
.8ba0	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8ba2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ba5	60		rts				rts
.8ba6					_ETTypeMismatch:
.8ba6	4c 2c 99	jmp $992c			jmp 	TypeError
.8ba9					_ETUnaryNegate:
.8ba9	20 fd 8a	jsr $8afd			jsr 	EvaluateTerm				; evaluate the term
.8bac	20 41 89	jsr $8941			jsr 	Dereference 				; dereference it.
.8baf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8bb2	29 10		and #$10			and 	#NSTString
.8bb4	d0 f0		bne $8ba6			bne 	_ETTypeMismatch
.8bb6	4c 7d 8e	jmp $8e7d			jmp 	NSMNegate  					; just toggles the sign bit.
.8bb9					_ETDereference:
.8bb9	20 fd 8a	jsr $8afd			jsr 	EvaluateTerm				; evaluate the term
.8bbc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8bbf	29 20		and #$20			and 	#NSBIsReference
.8bc1	f0 e3		beq $8ba6			beq 	_ETTypeMismatch
.8bc3	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8bc6	60		rts				rts
.8bc7					_ETParenthesis:
.8bc7	20 2c 88	jsr $882c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8bca	20 69 94	jsr $9469			jsr 	CheckRightBracket 			; check for )
.8bcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8bce					VariableHandler:
.8bce	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd0	18		clc				clc
.8bd1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bd3	85 37		sta $37				sta 	zTemp0+1
.8bd5	c8		iny				iny
.8bd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8	85 36		sta $36				sta 	zTemp0
.8bda	c8		iny				iny
.8bdb	18		clc				clc									; copy variable address+3 to mantissa
.8bdc	69 03		adc #$03			adc 	#3
.8bde	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8be1	a5 37		lda $37				lda 	zTemp0+1
.8be3	69 00		adc #$00			adc 	#0
.8be5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8be8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8beb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8bee	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8bf1	5a		phy				phy
.8bf2	a0 02		ldy #$02			ldy 	#2 							; read type
.8bf4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf6	7a		ply				ply
.8bf7	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8bf9	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8bfb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bfe	29 04		and #$04			and 	#NSBIsArray
.8c00	d0 01		bne $8c03			bne 	_VHArray
.8c02	60		rts				rts
.8c03					_VHArray:
>8c03	db						.byte 	$DB 						; causes a break in the emulator
.8c04	80 fd		bra $8c03			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9821					AbsUnary:
.9821	fa		plx				plx 								; restore stack pos
.9822	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; get a float or int
.9825	20 69 94	jsr $9469			jsr 	CheckRightBracket
.9828	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.982b	29 7f		and #$7f			and 	#$7F
.982d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9830	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8c06					AllocUnary:
.8c06	fa		plx				plx 								; restore stack pos
.8c07	20 5d 8e	jsr $8e5d			jsr 	Evaluate16BitInteger		; get bytes required.
.8c0a	20 69 94	jsr $9469			jsr 	CheckRightBracket
.8c0d	da		phx				phx 								; save X/Y
.8c0e	5a		phy				phy
.8c0f	8a		txa				txa 								; copy X into Y
.8c10	a8		tay				tay
.8c11	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8c14	aa		tax				tax
.8c15	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8c18	20 25 8c	jsr $8c25			jsr 	AllocateXABytes 			; allocate memory
.8c1b	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8c1e	8a		txa				txa
.8c1f	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8c22	7a		ply				ply
.8c23	fa		plx				plx
.8c24	60		rts				rts
.8c25					AllocateXABytes:
.8c25	5a		phy				phy
.8c26	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8c29	5a		phy				phy
.8c2a	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8c2d	5a		phy				phy
.8c2e	18		clc				clc
.8c2f	6d 0c 07	adc $070c			adc 	lowMemPtr
.8c32	8d 0c 07	sta $070c			sta 	lowMemPtr
.8c35	8a		txa				txa
.8c36	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8c39	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8c3c	fa		plx				plx
.8c3d	68		pla				pla
.8c3e	7a		ply				ply
.8c3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9831					AscUnary:
.9831	fa		plx				plx 								; restore stack pos
.9832	20 30 8e	jsr $8e30			jsr 	EvaluateString 				; get a string
.9835	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9837	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.983a	20 69 94	jsr $9469			jsr 	CheckRightBracket
.983d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.983e					FracUnary:
.983e	fa		plx				plx 								; restore stack pos
.983f	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; get a float or int
.9842	20 69 94	jsr $9469			jsr 	CheckRightBracket
.9845	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9848	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.984a	f0 04		beq $9850			beq 	_IUZero
.984c	20 0e 97	jsr $970e			jsr 	FloatFractionalPart
.984f	60		rts				rts
.9850					_IUZero:
.9850	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.9853	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9854					IntUnary:
.9854	fa		plx				plx 								; restore stack pos
.9855	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; get a float or int
.9858	20 69 94	jsr $9469			jsr 	CheckRightBracket
.985b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.985e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9860	f0 03		beq $9865			beq 	_IUExit
.9862	20 71 97	jsr $9771			jsr 	FloatIntegerPart
.9865					_IUExit:
.9865	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9866					LenUnary:
.9866	fa		plx				plx 								; restore stack pos
.9867	20 30 8e	jsr $8e30			jsr 	EvaluateString 				; get a string
.986a	5a		phy				phy
.986b	a0 00		ldy #$00			ldy 	#0 							; find length
.986d					_LenFind:
.986d	b1 36		lda ($36),y			lda 	(zTemp0),y
.986f	f0 06		beq $9877			beq 	_LenExit
.9871	c8		iny				iny
.9872	d0 f9		bne $986d			bne 	_LenFind
.9874	4c 27 99	jmp $9927			jmp 	RangeError 					; string > 255
.9877					_LenExit:
.9877	98		tya				tya
.9878	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.987b	7a		ply				ply
.987c	20 69 94	jsr $9469			jsr 	CheckRightBracket
.987f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8c40					Unary_Not:
.8c40	fa		plx				plx
.8c41	20 48 8e	jsr $8e48			jsr 	EvaluateInteger 			; get integer
.8c44	20 69 94	jsr $9469			jsr 	CheckRightBracket
.8c47	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; zero mantissa ?
.8c4a	f0 04		beq $8c50			beq 	_NotZero
.8c4c	20 d1 8e	jsr $8ed1			jsr 	NSMSetZero
.8c4f	60		rts				rts
.8c50					_NotZero:
.8c50	4c 90 84	jmp $8490			jmp 	ReturnTrue
.8c53					_UNBad:
.8c53	4c 31 99	jmp $9931			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8c56					Unary_Rnd:
.8c56	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; number to use.
.8c59	20 69 94	jsr $9469			jsr 	CheckRightBracket 			; closing bracket
.8c5c	20 85 8c	jsr $8c85			jsr 	Random32Bit 				; generate a number.
.8c5f	ad 08 07	lda $0708			lda 	RandomSeed+0
.8c62	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c65	ad 09 07	lda $0709			lda 	RandomSeed+1
.8c68	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c6b	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8c6e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c71	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8c74	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8c76	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c79	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8c7b	8d 28 06	sta $0628			sta 	NSExponent
.8c7e	a9 08		lda #$08			lda 	#NSTFloat
.8c80	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8c83	db						.byte 	$DB 						; causes a break in the emulator
.8c84	60		rts				rts
.8c85					Random32Bit:
.8c85	5a		phy				phy
.8c86	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8c88	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8c8b	d0 03		bne $8c90			bne 	_Random1
.8c8d	a8		tay				tay 								; if so do it 256 times
.8c8e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8c90					_Random1:
.8c90	0a		asl a				asl 	a 							; LSFR RNG
.8c91	2e 09 07	rol $0709			rol 	RandomSeed+1
.8c94	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8c97	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8c9a	90 02		bcc $8c9e			bcc 	_Random2
.8c9c	49 c5		eor #$c5			eor 	#$C5
.8c9e					_Random2:
.8c9e	88		dey				dey
.8c9f	d0 ef		bne $8c90			bne 	_Random1
.8ca1	7a		ply				ply
.8ca2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9880					SgnUnary:
.9880	fa		plx				plx 								; restore stack pos
.9881	20 25 8e	jsr $8e25			jsr 	EvaluateNumber 				; get a float or int
.9884	20 69 94	jsr $9469			jsr 	CheckRightBracket
.9887	20 01 8f	jsr $8f01			jsr 	NSMIsZero 					; if zero
.988a	f0 10		beq $989c			beq 	_SGZero  					; return Int Zero
.988c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.988f	48		pha				pha
.9890	a9 01		lda #$01			lda 	#1 							; set to 1
.9892	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.9895	68		pla				pla
.9896	29 80		and #$80			and		#$80 						; copy the sign byte out
.9898	9d 00 06	sta $0600,x			sta 	NSStatus,x
.989b	60		rts				rts
.989c	20 d1 8e	jsr $8ed1	_SGZero:jsr 	NSMSetZero
.989f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.98a0					ValUnary:
.98a0	fa		plx				plx 								; restore stack pos
.98a1	20 b6 98	jsr $98b6			jsr 	ValMainCode 				; do the main val() code
.98a4	b0 01		bcs $98a7			bcs 	_VUError 					; couldn't convert
.98a6	60		rts				rts
.98a7					_VUError:
.98a7	4c 2c 99	jmp $992c			jmp 	TypeError
.98aa					IsValUnary:
.98aa	fa		plx				plx 								; restore stack pos
.98ab	20 b6 98	jsr $98b6			jsr 	ValMainCode 				; do the main val() code
.98ae	b0 03		bcs $98b3			bcs 	_VUBad
.98b0	4c 90 84	jmp $8490			jmp 	ReturnTrue
.98b3					_VUBad:
.98b3	4c 9c 84	jmp $849c			jmp 	ReturnFalse
.98b6					ValMainCode:
.98b6	20 30 8e	jsr $8e30			jsr 	EvaluateString 				; get a string
.98b9	20 69 94	jsr $9469			jsr 	CheckRightBracket 			; check right bracket present
.98bc	5a		phy				phy
.98bd	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.98bf	f0 17		beq $98d8			beq 	_VMCFail2
.98c1	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.98c3	48		pha				pha 								; save first character
.98c4	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.98c6	d0 01		bne $98c9			bne 	_VMCStart
.98c8	c8		iny				iny 								; skip over -
.98c9					_VMCStart:
.98c9	38		sec				sec 								; initialise first time round.
.98ca					_VMCNext:
.98ca	c8		iny				iny 								; pre-increment
.98cb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.98cd	f0 0c		beq $98db			beq 	_VMCSuccess 				; successful.
.98cf	20 df 89	jsr $89df			jsr 	EncodeNumber 				; send it to the number-builder
.98d2	90 03		bcc $98d7			bcc 	_VMCFail 					; if failed, give up.
.98d4	18		clc				clc 								; next time round, countinue
.98d5	80 f3		bra $98ca			bra 	_VMCNext
.98d7					_VMCFail:
.98d7	68		pla				pla
.98d8					_VMCFail2:
.98d8	7a		ply				ply
.98d9	38		sec				sec
.98da	60		rts				rts
.98db					_VMCSuccess:
.98db	a9 00		lda #$00			lda 	#0 							; construct final
.98dd	20 df 89	jsr $89df			jsr 	EncodeNumber
.98e0	68		pla				pla
.98e1	c9 2d		cmp #$2d			cmp 	#"-"
.98e3	d0 03		bne $98e8			bne 	_VMCNotNegative
.98e5	20 7d 8e	jsr $8e7d			jsr		NSMNegate
.98e8					_VMCNotNegative:
.98e8	7a		ply				ply
.98e9	18		clc				clc
.98ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8ca3					ChrUnary:
.8ca3	fa		plx				plx 								; restore stack pos
.8ca4	20 69 8e	jsr $8e69			jsr 	Evaluate8BitInteger			; get value
.8ca7	48		pha				pha
.8ca8	20 69 94	jsr $9469			jsr 	CheckRightBracket
.8cab	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8cad	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate
.8cb0	68		pla				pla 								; write number to it
.8cb1	20 03 9b	jsr $9b03			jsr 	StringTempWrite
.8cb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8cb5					SpcUnary:
.8cb5	fa		plx				plx 								; restore stack pos
.8cb6	20 69 8e	jsr $8e69			jsr 	Evaluate8BitInteger			; get value
.8cb9	5a		phy				phy
.8cba	48		pha				pha 								; save count
.8cbb	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate
.8cbe	7a		ply				ply 								; to do count in Y
.8cbf					_SpcLoop:
.8cbf	c0 00		cpy #$00			cpy 	#0
.8cc1	f0 08		beq $8ccb			beq 	_SpcExit
.8cc3	a9 20		lda #$20			lda 	#32
.8cc5	20 03 9b	jsr $9b03			jsr 	StringTempWrite
.8cc8	88		dey				dey
.8cc9	80 f4		bra $8cbf			bra 	_SPCLoop
.8ccb					_SpcExit:
.8ccb	7a		ply				ply
.8ccc	20 69 94	jsr $9469			jsr 	CheckRightBracket
.8ccf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8cd0					Unary_Str:
.8cd0	fa		plx				plx
.8cd1	20 25 8e	jsr $8e25			jsr 	EvaluateNumber  			; get number
.8cd4	20 69 94	jsr $9469			jsr 	CheckRightBracket 			; closing bracket
.8cd7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8cd9	20 f2 8c	jsr $8cf2			jsr 	ConvertNumberToString 		; do the conversion.
.8cdc	a9 21		lda #$21			lda		#33 						; create buffer
.8cde	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate 			; allocate memory
.8ce1	da		phx				phx
.8ce2	a2 00		ldx #$00			ldx 	#0
.8ce4					_USCopy:
.8ce4	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ce7	20 03 9b	jsr $9b03			jsr 	StringTempWrite
.8cea	e8		inx				inx
.8ceb	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8cee	d0 f4		bne $8ce4			bne 	_USCopy
.8cf0	fa		plx				plx
.8cf1	60		rts				rts
.8cf2					ConvertNumberToString:
.8cf2	5a		phy				phy 								; save code position
.8cf3	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8cf6	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8cf9	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8cfc	10 0a		bpl $8d08			bpl 	_CNTSNotNegative
.8cfe	29 7f		and #$7f			and 	#$7F 						; make +ve
.8d00	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d03	a9 2d		lda #$2d			lda 	#"-"
.8d05	20 6e 8d	jsr $8d6e			jsr 	WriteDecimalBuffer
.8d08					_CNTSNotNegative:
.8d08	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8d0b	f0 15		beq $8d22			beq 	_CNTSNotFloat
.8d0d	e8		inx				inx 								; round up
.8d0e	a9 01		lda #$01			lda 	#1
.8d10	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.8d13	ca		dex				dex
.8d14	bd 28 06	lda $0628,x			lda		NSExponent,x
.8d17	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8d1a	a9 08		lda #$08			lda 	#NSTFloat
.8d1c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d1f	20 30 96	jsr $9630			jsr 	FloatAdd
.8d22					_CNTSNotFloat:
.8d22	20 50 8d	jsr $8d50			jsr 	MakePlusTwoString
.8d25	20 0e 97	jsr $970e			jsr 	FloatFractionalPart 		; get the fractional part
.8d28	20 d2 97	jsr $97d2			jsr 	NSNormalise					; normalise , exit if zero
.8d2b	f0 21		beq $8d4e			beq 	_CNTSExit
.8d2d	a9 2e		lda #$2e			lda 	#"."
.8d2f	20 6e 8d	jsr $8d6e			jsr 	WriteDecimalBuffer 			; write decimal place
.8d32					_CNTSDecimal:
.8d32	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8d35	30 17		bmi $8d4e			bmi 	_CNTSExit
.8d37	e8		inx				inx 								; x 10.0
.8d38	a9 0a		lda #$0a			lda 	#10
.8d3a	20 d3 8e	jsr $8ed3			jsr 	NSMSetByte
.8d3d	a9 08		lda #$08			lda 	#NSTFloat
.8d3f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d42	ca		dex				dex
.8d43	20 9b 97	jsr $979b			jsr 	FloatMultiply
.8d46	20 50 8d	jsr $8d50			jsr 	MakePlusTwoString
.8d49	20 0e 97	jsr $970e			jsr 	FloatFractionalPart 		; get the fractional part
.8d4c	80 e4		bra $8d32			bra 	_CNTSDecimal 				; keep going.
.8d4e					_CNTSExit:
.8d4e	7a		ply				ply
.8d4f	60		rts				rts
.8d50					MakePlusTwoString:
.8d50	da		phx				phx
.8d51	20 a8 8e	jsr $8ea8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8d54	e8		inx				inx 								; access it
.8d55	e8		inx				inx
.8d56	20 71 97	jsr $9771			jsr 	FloatIntegerPart 			; make it an integer
.8d59	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8d5b	20 da 95	jsr $95da			jsr 	ConvertInt32
.8d5e	a2 00		ldx #$00			ldx	 	#0
.8d60					_MPTSCopy:
.8d60	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8d63	20 6e 8d	jsr $8d6e			jsr 	WriteDecimalBuffer
.8d66	e8		inx				inx
.8d67	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8d6a	d0 f4		bne $8d60			bne 	_MPTSCopy
.8d6c	fa		plx				plx
.8d6d	60		rts				rts
.8d6e					WriteDecimalBuffer:
.8d6e	da		phx				phx
.8d6f	ae 14 07	ldx $0714			ldx 	dbOffset
.8d72	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8d75	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8d78	ee 14 07	inc $0714			inc 	dbOffset
.8d7b	fa		plx				plx
.8d7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8d7d					Unary_Left:
.8d7d	fa		plx				plx
.8d7e	18		clc				clc 								; only one parameter
.8d7f	20 f4 8d	jsr $8df4			jsr 	SubstringInitial 			; set up.
.8d82	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8d85	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d88	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8d8b	80 2c		bra $8db9			bra 	SubstringMain
.8d8d					Unary_Right:
.8d8d	fa		plx				plx
.8d8e	18		clc				clc 								; only one parameter
.8d8f	20 f4 8d	jsr $8df4			jsr 	SubstringInitial 			; set up.
.8d92	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8d95	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d98	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8d9b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8d9e	b0 02		bcs $8da2			bcs 	_URNotUnderflow
.8da0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8da2					_URNotUnderFlow:
.8da2	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8da5	80 12		bra $8db9			bra 	SubStringMain
.8da7					Unary_Mid:
.8da7	fa		plx				plx
.8da8	38		sec				sec 								; two parameters
.8da9	20 f4 8d	jsr $8df4			jsr 	SubstringInitial 			; set up.
.8dac	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8daf	f0 05		beq $8db6			beq 	_UMError
.8db1	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8db4	80 03		bra $8db9			bra 	SubStringMain
.8db6					_UMError:
.8db6	4c 31 99	jmp $9931			jmp 	ArgumentError
.8db9					SubStringMain:
.8db9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8dbc	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8dbf	b0 2d		bcs $8dee			bcs 	_SSMNull 					; if so, return an empty string.
.8dc1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8dc4	f0 28		beq $8dee			beq 	_SSMNull 					; return empty string.
.8dc6	18		clc				clc 								; add the offset +1 to the address and
.8dc7	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8dca	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8dcd	85 36		sta $36				sta 	zTemp0
.8dcf	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8dd2	69 00		adc #$00			adc 	#0
.8dd4	85 37		sta $37				sta 	zTemp0+1
.8dd6					_SSMNoCarry:
.8dd6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8dd9	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate 			; allocate that many characters
.8ddc	5a		phy				phy 								; save Y
.8ddd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8ddf					_SSMCopy:
.8ddf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8de1	f0 09		beq $8dec			beq 	_SSMEString 				; no more to copy
.8de3	20 03 9b	jsr $9b03			jsr 	StringTempWrite 			; and write it out.
.8de6	c8		iny				iny
.8de7	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8dea	d0 f3		bne $8ddf			bne 	_SSMCopy
.8dec					_SSMEString:
.8dec	7a		ply				ply
.8ded					_SSMExit:
.8ded	60		rts				rts
.8dee					_SSMNull:
.8dee	a9 00		lda #$00			lda 	#0
.8df0	20 c5 9a	jsr $9ac5			jsr 	StringTempAllocate
.8df3	60		rts				rts
.8df4					SubstringInitial:
.8df4	da		phx				phx 								; save initial stack position
.8df5	08		php				php 								; save carry on stack indicating 2 parameters
.8df6	20 30 8e	jsr $8e30			jsr 	EvaluateString 				; get a string
.8df9	5a		phy				phy 								; calculate length to exponent.
.8dfa	a0 ff		ldy #$ff			ldy 	#$FF
.8dfc					_SIFindLength:
.8dfc	c8		iny				iny
.8dfd	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dff	d0 fb		bne $8dfc			bne 	_SIFindLength
.8e01	98		tya				tya
.8e02	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e05	7a		ply				ply
.8e06	e8		inx				inx
.8e07	20 71 94	jsr $9471			jsr 	CheckComma 					; comma next
.8e0a	20 69 8e	jsr $8e69			jsr 	Evaluate8BitInteger 		; get next parameter
.8e0d	28		plp				plp 								; is it the last parameter ?
.8e0e	90 07		bcc $8e17			bcc 	_SSIExit 					; if so, exit.
.8e10	e8		inx				inx
.8e11	20 71 94	jsr $9471			jsr 	CheckComma 					; comma next
.8e14	20 69 8e	jsr $8e69			jsr 	Evaluate8BitInteger 		; get last parameter
.8e17					_SSIExit:
.8e17	fa		plx				plx
.8e18	20 69 94	jsr $9469			jsr 	CheckRightBracket 			; check closing bracket
.8e1b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8e1c					EvaluateValue:
.8e1c	48		pha				pha
.8e1d	20 2c 88	jsr $882c			jsr		EvaluateExpression 			; expression
.8e20	20 41 89	jsr $8941			jsr 	Dereference					; derefernce it
.8e23	68		pla				pla
.8e24	60		rts				rts
.8e25					EvaluateNumber:
.8e25	20 1c 8e	jsr $8e1c			jsr 	EvaluateValue 				; get a value
.8e28	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e2b	29 10		and #$10			and 	#NSBIsString
.8e2d	d0 16		bne $8e45			bne 	HelperTypeError
.8e2f	60		rts				rts
.8e30					EvaluateString:
.8e30	20 1c 8e	jsr $8e1c			jsr 	EvaluateValue 				; get a value
.8e33	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e36	29 10		and #$10			and 	#NSBIsString
.8e38	f0 0b		beq $8e45			beq 	HelperTypeError
.8e3a					CopyAddressToTemp0:
.8e3a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8e3d	85 36		sta $36				sta 	zTemp0
.8e3f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e42	85 37		sta $37				sta 	zTemp0+1
.8e44	60		rts				rts
.8e45					HelperTypeError:
.8e45	4c 2c 99	jmp $992c			jmp 	TypeError
.8e48					EvaluateInteger:
.8e48	20 25 8e	jsr $8e25			jsr 	EvaluateNumber
.8e4b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8e4e	d0 0a		bne $8e5a			bne 	HelperValueError 			; if not, it's a float.
.8e50	60		rts				rts
.8e51					EvaluateUnsignedInteger:
.8e51	20 48 8e	jsr $8e48			jsr 	EvaluateInteger 			; check integer is +ve
.8e54	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e57	30 01		bmi $8e5a			bmi 	HelperValueError
.8e59	60		rts				rts
.8e5a					HelperValueError:
.8e5a	4c 31 99	jmp $9931			jmp 	ArgumentError
.8e5d					Evaluate16BitInteger:
.8e5d	20 51 8e	jsr $8e51			jsr	 	EvaluateUnsignedInteger		; get integer
.8e60	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8e63	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8e66	d0 f2		bne $8e5a			bne 	HelperValueError
.8e68	60		rts				rts
.8e69					Evaluate8BitInteger:
.8e69	20 51 8e	jsr $8e51			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8e6c	d0 ec		bne $8e5a			bne 	HelperValueError
.8e6e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8e71	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8e74	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8e77	d0 e1		bne $8e5a			bne 	HelperValueError
.8e79	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8e7d					NSMNegate:
.8e7d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e80	49 80		eor #$80			eor 	#NSBIsNegative
.8e82	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e85	60		rts				rts
.8e86					NSMNegateMantissa:
.8e86	38		sec				sec
.8e87	a9 00		lda #$00			lda 	#0
.8e89	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8e8c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e8f	a9 00		lda #$00			lda 	#0
.8e91	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8e94	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e97	a9 00		lda #$00			lda 	#0
.8e99	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8e9c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e9f	a9 00		lda #$00			lda 	#0
.8ea1	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8ea4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ea7	60		rts				rts
.8ea8					NSMShiftUpTwo:
.8ea8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8eab	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8eae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8eb1	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8eb4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8eb7	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8eba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8ebd	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8ec0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8ec3	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8ec6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ec9	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ecc	60		rts				rts
.8ecd					NSMSetZeroMantissaOnly:
.8ecd	a9 00		lda #$00			lda 	#0
.8ecf	80 08		bra $8ed9			bra 	NSMSetMantissa
.8ed1					NSMSetZero:
.8ed1	a9 00		lda #$00			lda 	#0
.8ed3					NSMSetByte:
.8ed3	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8ed6	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8ed9					NSMSetMantissa:
.8ed9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8edc	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8edf	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8ee2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8ee5	60		rts				rts
.8ee6					NSMShiftLeft:
.8ee6	18		clc				clc
.8ee7					NSMRotateLeft:
.8ee7	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8eea	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8eed	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8ef0	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8ef3	60		rts				rts
.8ef4					NSMShiftRight:
.8ef4	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8ef7	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8efa	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8efd	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8f00	60		rts				rts
.8f01					NSMIsZero:
.8f01	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f04	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8f07	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8f0a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8f0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.98eb					DecimalScalarTable:
>98eb	66 66 66 66				.dword $66666666 ; 0.1
>98ef	de					.byte $de
>98f0	1f 85 eb 51				.dword $51eb851f ; 0.01
>98f4	db					.byte $db
>98f5	4c 37 89 41				.dword $4189374c ; 0.001
>98f9	d8					.byte $d8
>98fa	ac 8b db 68				.dword $68db8bac ; 0.0001
>98fe	d4					.byte $d4
>98ff	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9903	d1					.byte $d1
>9904	83 de 1b 43				.dword $431bde83 ; 1e-06
>9908	ce					.byte $ce
>9909	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>990d	ca					.byte $ca
>990e	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9912	c7					.byte $c7
>9913	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9917	c4					.byte $c4
>9918	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>991c	c0					.byte $c0
>991d	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9921	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9922					SyntaxError:
.9922	a9 02		lda #$02		lda	#2
.9924	4c 2a 84	jmp $842a		jmp	ErrorHandler
.9927					RangeError:
.9927	a9 04		lda #$04		lda	#4
.9929	4c 2a 84	jmp $842a		jmp	ErrorHandler
.992c					TypeError:
.992c	a9 05		lda #$05		lda	#5
.992e	4c 2a 84	jmp $842a		jmp	ErrorHandler
.9931					ArgumentError:
.9931	a9 07		lda #$07		lda	#7
.9933	4c 2a 84	jmp $842a		jmp	ErrorHandler
.9936					NotDoneError:
.9936	a9 0c		lda #$0c		lda	#12
.9938	4c 2a 84	jmp $842a		jmp	ErrorHandler
.993b					ErrorText:
>993b	42 72 65 61 6b 00			.text	"Break",0
>9941	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9949	72 72 6f 72 00
>994e	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9956	20 62 79 20 7a 65 72 6f 00
>995f	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9967	61 6e 67 65 00
>996c	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9974	6d 61 74 63 68 00
>997a	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9982	65 6d 6f 72 79 00
>9988	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9990	61 72 67 75 6d 65 6e 74 00
>9999	53 74 6f 70 00				.text	"Stop",0
>999e	53 74 72 69 6e 67 20 74			.text	"String too long",0
>99a6	6f 6f 20 6c 6f 6e 67 00
>99ae	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>99b6	6e 20 66 61 69 6c 65 64 00
>99bf	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>99c7	61 74 61 00
>99cb	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>99d3	65 6e 74 65 64 00
>99d9	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>99e1	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>99ed	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>99f5	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9a02	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9a0a	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9a17	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9a1f	68 6f 75 74 20 57 68 69 6c 65 00
>9a2a	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9a32	61 63 6b 20 66 75 6c 6c 00
>9a3b	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9a43	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8f0e					StackOpen:
.8f0e	48		pha				pha 								; save frame byte
.8f0f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8f11	0a		asl a				asl 	a 							; claim twice this for storage
.8f12	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8f14	38		sec				sec 								; so basically subtracting from
.8f15	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8f17	85 34		sta $34				sta 	basicStack
.8f19	b0 08		bcs $8f23			bcs 	_SONoBorrow
.8f1b	c6 35		dec $35				dec 	basicStack+1
.8f1d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8f1f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8f21	90 04		bcc $8f27			bcc 	_SOMemory
.8f23					_SONoBorrow:
.8f23	68		pla				pla 								; get marker back and write at TOS
.8f24	92 34		sta ($34)			sta 	(basicStack)
.8f26	60		rts				rts
.8f27					_SOMemory:
.8f27							ERR_STACK
.8f27					StackClose:
.8f27	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8f29	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8f2b	0a		asl a				asl 	a 							; claim twice this.
.8f2c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8f2e	85 34		sta $34				sta 	basicStack
.8f30	90 02		bcc $8f34			bcc 	_SCExit
.8f32	e6 35		inc $35				inc 	basicStack+1
.8f34					_SCExit:
.8f34	60		rts				rts
.8f35					StackCheckFrame:
.8f35	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8f37	29 f0		and #$f0			and 	#$F0 						; check type bits
.8f39	d0 01		bne $8f3c			bne 	_SCFError 					; different, we have structures mixed up
.8f3b	60		rts				rts
.8f3c					_SCFError:
.8f3c	8a		txa				txa 								; report error X
.8f3d	4c 2a 84	jmp $842a			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8f40					STKSaveCodePosition:
.8f40	5a		phy				phy
.8f41	98		tya				tya 								; save Y
.8f42	a0 05		ldy #$05			ldy 	#5
.8f44	91 34		sta ($34),y			sta 	(basicStack),y
.8f46	88		dey				dey 								; save Code Pointer
.8f47					_STKSaveLoop:
.8f47	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8f4a	91 34		sta ($34),y			sta 	(basicStack),y
.8f4c	88		dey				dey
.8f4d	d0 f8		bne $8f47			bne 	_STKSaveLoop
.8f4f	7a		ply				ply
.8f50	60		rts				rts
.8f51					STKLoadCodePosition:
.8f51	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8f53					_STKLoadLoop:
.8f53	b1 34		lda ($34),y			lda 	(basicStack),y
.8f55	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8f58	c8		iny				iny
.8f59	c0 05		cpy #$05			cpy 	#5
.8f5b	d0 f6		bne $8f53			bne 	_STKLoadLoop
.8f5d	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8f5f	a8		tay				tay
.8f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8f61					StackReset:
.8f61	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8f63	85 34		sta $34				sta 	0+basicStack
.8f65	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8f67	85 35		sta $35				sta 	1+basicStack
.8f69	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8f6b	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8f6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9a4a					StringConcrete:
.9a4a	5a		phy				phy 								; save position on stack
.9a4b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9a4e	85 38		sta $38				sta 	zTemp1
.9a50	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9a53	85 39		sta $39				sta 	zTemp1+1
.9a55	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9a57					_SALength:
.9a57	c8		iny				iny
.9a58	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a5a	d0 fb		bne $9a57			bne 	_SALength
.9a5c	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9a5e	b0 3f		bcs $9a9f			bcs 	_SALengthError
.9a60	98		tya				tya 				 				; length of the new string
.9a61	18		clc				clc
.9a62	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9a64	90 02		bcc $9a68			bcc 	_SAHaveLength
.9a66	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9a68					_SAHaveLength:
.9a68	48		pha				pha 								; save length.
.9a69	38		sec				sec
.9a6a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9a6c	6d 0e 07	adc $070e			adc 	StringMemory
.9a6f	8d 0e 07	sta $070e			sta 	StringMemory
.9a72	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9a74	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9a77	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9a79	6d 0f 07	adc $070f			adc 	StringMemory+1
.9a7c	8d 0f 07	sta $070f			sta 	StringMemory+1
.9a7f	85 3b		sta $3b				sta 	zTemp2+1
.9a81	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a84	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9a85	38		sec				sec
.9a86	e9 03		sbc #$03			sbc 	#3
.9a88	92 3a		sta ($3a)			sta 	(zTemp2)
.9a8a	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9a8c	a0 01		ldy #$01			ldy 	#1
.9a8e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9a90					_SACopyNewString:
.9a90	a0 00		ldy #$00			ldy 	#0
.9a92					_SACopyNSLoop:
.9a92	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9a94	c8		iny				iny 								; write two on in string storage
.9a95	c8		iny				iny
.9a96	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9a98	88		dey				dey 								; this makes it one one.
.9a99	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9a9b	d0 f5		bne $9a92			bne 	_SACopyNSLoop
.9a9d	7a		ply				ply
.9a9e	60		rts				rts
.9a9f					_SALengthError:
.9a9f	a9 09		lda #$09		lda	#9
.9aa1	4c 2a 84	jmp $842a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9aa4					StringSystemInitialise:
.9aa4	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9aa6	8d 0e 07	sta $070e			sta 	0+StringMemory
.9aa9	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9aab	8d 0f 07	sta $070f			sta 	1+StringMemory
.9aae	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9ab1	60		rts				rts
.9ab2					StringSpaceInitialise:
.9ab2	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9ab4	8d 10 07	sta $0710			sta 	StringInitialised
.9ab7	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9aba	8d 11 07	sta $0711			sta 	StringTempPointer
.9abd	ad 0f 07	lda $070f			lda 	StringMemory+1
.9ac0	3a		dec a				dec 	a
.9ac1	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9ac4	60		rts				rts
.9ac5					StringTempAllocate:
.9ac5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9ac7	b0 35		bcs $9afe			bcs 	_STALength
.9ac9	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9acc	30 05		bmi $9ad3			bmi 	_STAAllocate
.9ace	48		pha				pha 								; save value to subtract.
.9acf	20 b2 9a	jsr $9ab2			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9ad2	68		pla				pla 								; restore it
.9ad3					_STAAllocate:
.9ad3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9ad5	18		clc				clc  								; deliberate allows one more
.9ad6	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9ad9	8d 11 07	sta $0711			sta 	StringTempPointer
.9adc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9adf	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9ae1	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9ae4	69 ff		adc #$ff			adc 	#$FF
.9ae6	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9ae9	85 3d		sta $3d				sta 	zsTemp+1
.9aeb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9aee	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9af1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9af4	a9 10		lda #$10			lda 	#NSTString
.9af6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9af9	a9 00		lda #$00			lda 	#0 							; clear the target string
.9afb	92 3c		sta ($3c)			sta 	(zsTemp)
.9afd	60		rts				rts
.9afe					_STALength:
.9afe	a9 09		lda #$09		lda	#9
.9b00	4c 2a 84	jmp $842a		jmp	ErrorHandler
.9b03					StringTempWrite:
.9b03	48		pha				pha
.9b04	92 3c		sta ($3c)			sta 	(zsTemp)
.9b06	e6 3c		inc $3c				inc 	zsTemp
.9b08	d0 02		bne $9b0c			bne 	_STWNoCarry
.9b0a	e6 3d		inc $3d				inc 	zsTemp+1
.9b0c					_STWNoCarry:
.9b0c	a9 00		lda #$00			lda 	#0
.9b0e	92 3c		sta ($3c)			sta 	(zsTemp)
.9b10	68		pla				pla
.9b11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8f6e					BackloadProgram:
.8f6e	a2 ff		ldx #$ff			ldx 	#$FF
.8f70	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8f73	20 9d 8f	jsr $8f9d			jsr 	BLReadByte
.8f76	30 1e		bmi $8f96			bmi 	_BPExit
.8f78					_BPCopy:
.8f78	e8		inx				inx  								; copy byte in
.8f79	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8f7c	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8f7f	20 9d 8f	jsr $8f9d			jsr 	BLReadByte 					; read next byte
.8f82	30 0a		bmi $8f8e			bmi 	_BPEndLine 					; -ve = EOL
.8f84	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8f86	d0 02		bne $8f8a			bne 	_BPNotTab
.8f88	a9 20		lda #$20			lda 	#' '
.8f8a					_BPNotTab:
.8f8a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8f8c	b0 ea		bcs $8f78			bcs 	_BPCopy
.8f8e					_BPEndLine:
.8f8e	20 67 91	jsr $9167			jsr 	TokeniseLine 				; tokenise the line.
.8f91	20 f3 93	jsr $93f3			jsr 	MemoryAppend 				; append to current program
.8f94	80 d8		bra $8f6e			bra 	BackloadProgram
.8f96					_BPExit:
.8f96	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8f99	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.8f9c	60		rts				rts
.8f9d					BLReadByte:
.8f9d					_BLLoad:
.8f9d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8fa0	ee 9e 8f	inc $8f9e			inc 	_BLLoad+1
.8fa3	d0 03		bne $8fa8			bne 	_BLNoCarry
.8fa5	ee 9f 8f	inc $8f9f			inc 	_BLLoad+2
.8fa8					_BLNoCarry:
.8fa8	c9 00		cmp #$00			cmp 	#0
.8faa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8fab					TokeniseSearchTable:
.8fab	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8fad	85 36		sta $36				sta 	zTemp0
.8faf	a0 00		ldy #$00			ldy 	#0
.8fb1	a9 80		lda #$80			lda 	#$80 						; token #
.8fb3	85 38		sta $38				sta 	zTemp1
.8fb5					_TSTLoop:
.8fb5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8fb7	30 49		bmi $9002			bmi 	_TSTFail 					; -ve = end of table
.8fb9	f0 2e		beq $8fe9			beq 	_TSTNext 					; zero, check next it's a dummy
.8fbb	c8		iny				iny 								; get the hash
.8fbc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fbe	88		dey				dey
.8fbf	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8fc2	d0 25		bne $8fe9			bne 	_TSTNext
.8fc4	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8fc7	38		sec				sec
.8fc8	ed 00 07	sbc $0700			sbc 	identStart
.8fcb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8fcd	d0 1a		bne $8fe9			bne 	_TSTNext
.8fcf	5a		phy				phy 								; save Y , we might fail
.8fd0	c8		iny				iny 								; point to text
.8fd1	c8		iny				iny
.8fd2	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8fd5					_TSTCompareName:
.8fd5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8fd8	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8fda	d0 0c		bne $8fe8			bne 	_TSTNextPullY 				; fail, pullY and do next
.8fdc	e8		inx				inx
.8fdd	c8		iny				iny
.8fde	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8fe1	d0 f2		bne $8fd5			bne 	_TSTCompareName
.8fe3	7a		ply				ply 								; throw Y
.8fe4	a5 38		lda $38				lda 	zTemp1 						; get token #
.8fe6	38		sec				sec 								; return with CS = passed.
.8fe7	60		rts				rts
.8fe8					_TSTNextPullY:
.8fe8	7a		ply				ply 								; restore current, fall through.
.8fe9					_TSTNext:
.8fe9	e6 38		inc $38				inc 	zTemp1 						; token counter
.8feb	98		tya				tya
.8fec	18		clc				clc
.8fed	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8fef	1a		inc a				inc 	a 							; +1
.8ff0	1a		inc a				inc 	a 							; +2
.8ff1	a8		tay				tay
.8ff2	10 c1		bpl $8fb5			bpl 	_TSTLoop 					; if Y < $80 loop back
.8ff4	98		tya				tya 								; add Y to zTemp0 and reset Y
.8ff5	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8ff7	18		clc				clc  								; but have tables > 255 bytes
.8ff8	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8ffa	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8ffc	90 b7		bcc $8fb5			bcc 	_TSTLoop
.8ffe	e6 37		inc $37				inc 	zTemp0+1
.9000	80 b3		bra $8fb5			bra 	_TSTLoop
.9002					_TSTFail:
.9002	18		clc				clc
.9003	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9004					KeywordSet0:
>9004	00 65					.text	0,$65,""               ; $80 !0:EOF
>9006	00 58					.text	0,$58,""               ; $81 !1:SH1
>9008	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>900a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9010	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9018	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>901e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9025	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>902c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9033	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9039	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9041	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9049	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>904f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9056	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>905c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9064	28
>9065	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>906b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9071	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9077	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>907e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9084	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>908a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>908f	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9093	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9099	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>90a1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>90a8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>90af	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>90b7	43
>90b8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>90be	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>90c4	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>90cb	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>90d1	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>90d7	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>90dc	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>90e2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>90e7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>90ef	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>90f5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>90fc	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9102	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9107	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>910e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9114	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9119	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9121	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9125	ff					.text	$FF
.9126					KeywordSet1:
>9126	00 65					.text	0,$65,""               ; $80 !0:EOF
>9128	00 58					.text	0,$58,""               ; $81 !1:SH1
>912a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>912c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9134	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>913b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9140	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9146	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>914b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9153	45
>9154	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9159	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>915f	ff					.text	$FF
.9160					KeywordSet2:
>9160	00 65					.text	0,$65,""               ; $80 !0:EOF
>9162	00 58					.text	0,$58,""               ; $81 !1:SH1
>9164	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9166	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9167					TokeniseLine:
.9167	20 ef 92	jsr $92ef			jsr 	FixLineBufferCase 			; fix line case
.916a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.916c	8d 15 07	sta $0715			sta 	tokenOffset
.916f	9c 16 07	stz $0716			stz 	tokenLineNumber
.9172	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9175	a2 ff		ldx #$ff			ldx 	#$FF
.9177					_TKFindFirst:
.9177	e8		inx				inx
.9178	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.917b	f0 79		beq $91f6			beq 	_TKExit
.917d	c9 20		cmp #$20			cmp 	#' '
.917f	90 f6		bcc $9177			bcc 	_TKFindFirst
.9181	c9 30		cmp #$30			cmp 	#'0'
.9183	90 07		bcc $918c			bcc 	_TKNoLineNumber
.9185	c9 3a		cmp #$3a			cmp 	#'9'+1
.9187	b0 03		bcs $918c			bcs 	_TKNoLineNumber
.9189	20 19 93	jsr $9319			jsr 	TokeniseExtractLineNumber
.918c					_TKNoLineNumber:
.918c					_TKTokeniseLoop:
.918c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.918f	f0 65		beq $91f6			beq 	_TKExit
.9191	e8		inx				inx
.9192	c9 20		cmp #$20			cmp 	#' '
.9194	f0 f6		beq $918c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9196	ca		dex				dex 								; undo last get, A contains character, X is position.
.9197	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9199	f0 61		beq $91fc			beq 	_TKTokeniseIdentifier
.919b	c9 41		cmp #$41			cmp 	#'A'
.919d	90 04		bcc $91a3			bcc 	_TKTokenisePunctuation
.919f	c9 5b		cmp #$5b			cmp 	#'Z'+1
.91a1	90 59		bcc $91fc			bcc 	_TKTokeniseIdentifier
.91a3					_TKTokenisePunctuation:
.91a3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.91a5	f0 27		beq $91ce			beq 	_TKString
.91a7	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.91a9	f0 28		beq $91d3			beq 	_TKHexConstant
.91ab	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.91ad	f0 29		beq $91d8			beq 	_TKCheckDouble
.91af	c9 3e		cmp #$3e			cmp 	#'>'
.91b1	f0 25		beq $91d8			beq 	_TKCheckDouble
.91b3					_TKStandardPunctuation:
.91b3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.91b6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.91b8	90 0e		bcc $91c8			bcc 	_TKNoShift
.91ba	48		pha				pha 								; save
.91bb	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.91bd	85 36		sta $36				sta 	zTemp0
.91bf	68		pla				pla
.91c0	29 20		and #$20			and 	#32 						; bit 5
.91c2	4a		lsr a				lsr 	a 							; shift into bit 3
.91c3	4a		lsr a				lsr 	a
.91c4	05 36		ora $36				ora 	zTemp0
.91c6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.91c8					_TKNoShift:
.91c8	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte 			; write the punctuation character
.91cb	e8		inx				inx 								; consume the character
.91cc	80 be		bra $918c			bra 	_TKTokeniseLoop 			; and loop round again.
.91ce					_TKString:
.91ce	20 7e 92	jsr $927e			jsr 	TokeniseString
.91d1	80 b9		bra $918c			bra 	_TKTokeniseLoop
.91d3					_TKHexConstant:
.91d3	20 b9 92	jsr $92b9			jsr 	TokeniseHexConstant
.91d6	80 b4		bra $918c			bra 	_TKTokeniseLoop
.91d8					_TKCheckDouble:
.91d8	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.91db	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.91dd	90 d4		bcc $91b3			bcc 	_TKStandardPunctuation
.91df	c9 3f		cmp #$3f			cmp 	#'>'+1
.91e1	b0 d0		bcs $91b3			bcs 	_TKStandardPunctuation
.91e3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.91e6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.91e8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.91e9	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.91ec	38		sec				sec
.91ed	e9 3c		sbc #$3c			sbc 	#'<'
.91ef	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.91f2	e8		inx				inx 								; consume both
.91f3	e8		inx				inx
.91f4	80 96		bra $918c			bra 	_TKTokeniseLoop
.91f6	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.91f8	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.91fb	60		rts				rts
.91fc					_TKTokeniseIdentifier:
.91fc	8e 00 07	stx $0700			stx 	identStart 					; save start
.91ff	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9202					_TKCheckLoop:
.9202	e8		inx				inx 								; look at next, we know first is identifier.
.9203	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9206	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9208	f0 f8		beq $9202			beq 	_TKCheckLoop
.920a	c9 30		cmp #$30			cmp	 	#"0"
.920c	90 0c		bcc $921a			bcc 	_TKEndIdentifier
.920e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9210	90 f0		bcc $9202			bcc 	_TKCheckLoop
.9212	c9 41		cmp #$41			cmp	 	#"A"
.9214	90 04		bcc $921a			bcc 	_TKEndIdentifier
.9216	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9218	90 e8		bcc $9202			bcc 	_TKCheckLoop
.921a					_TKEndIdentifier:
.921a	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.921d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.921f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9221	f0 06		beq $9229			beq 	_TKHasTypeCharacter
.9223	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9225	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9227	d0 07		bne $9230			bne 	_TKNoTypeCharacter
.9229					_TKHasTypeCharacter:
.9229	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.922c	e8		inx				inx 								; read next
.922d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9230					_TKNoTypeCharacter:
.9230	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9232	d0 09		bne $923d			bne 	_TKNoArray
.9234	e8		inx				inx 								; skip the (
.9235	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9238	09 04		ora #$04			ora 	#$04
.923a	8d 04 07	sta $0704			sta 	identTypeByte
.923d					_TKNoArray:
.923d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9240	20 da 92	jsr $92da			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9243	a0 90		ldy #$90			ldy 	#(KeywordSet0) >> 8
.9245	a9 04		lda #$04			lda 	#(KeywordSet0) & $FF
.9247	20 ab 8f	jsr $8fab			jsr 	TokeniseSearchTable
.924a	a2 00		ldx #$00			ldx 	#0
.924c	b0 1f		bcs $926d			bcs 	_TKFoundToken
.924e	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.9250	a9 26		lda #$26			lda 	#(KeywordSet1) & $FF
.9252	20 ab 8f	jsr $8fab			jsr 	TokeniseSearchTable
.9255	a2 81		ldx #$81			ldx 	#$81
.9257	b0 14		bcs $926d			bcs 	_TKFoundToken
.9259	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.925b	a9 26		lda #$26			lda 	#(KeywordSet1) & $FF
.925d	20 ab 8f	jsr $8fab			jsr 	TokeniseSearchTable
.9260	a2 82		ldx #$82			ldx 	#$82
.9262	b0 09		bcs $926d			bcs 	_TKFoundToken
.9264	20 6a 93	jsr $936a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9267	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.926a	4c 8c 91	jmp $918c			jmp 	_TKTokeniseLoop 			; and go round again.
.926d					_TKFoundToken:
.926d	48		pha				pha 								; save token
.926e	8a		txa				txa 								; shift in X, is there one ?
.926f	f0 03		beq $9274			beq 	_TKNoTShift
.9271	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte 			; if so, write it out
.9274					_TKNoTShift:
.9274	68		pla				pla 								; restore and write token
.9275	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.9278	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.927b	4c 8c 91	jmp $918c			jmp 	_TKTokeniseLoop 			; and go round again.
.927e					TokeniseString:
.927e	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9280	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.9283	e8		inx				inx									; start of quoted string.
.9284	da		phx				phx 								; push start of string on top
.9285	ca		dex				dex
.9286					_TSFindEnd:
.9286	e8		inx				inx
.9287	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.928a	f0 04		beq $9290			beq 	_TSEndOfString
.928c	c9 22		cmp #$22			cmp 	#'"'
.928e	d0 f6		bne $9286			bne 	_TSFindEnd
.9290					_TSEndOfString:
.9290	7a		ply				ply  								; so now Y is first character, X is character after end.
.9291	48		pha				pha 								; save terminating character
.9292	20 9a 92	jsr $929a			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9295	68		pla				pla 								; terminating character
.9296	f0 01		beq $9299			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9298	e8		inx				inx
.9299					_TSNotQuote:
.9299	60		rts				rts
.929a					TOWriteBlockXY:
.929a	86 36		stx $36				stx 	zTemp0 						; write end character
.929c	98		tya				tya
.929d	49 ff		eor #$ff			eor 	#$FF
.929f	38		sec				sec
.92a0	65 36		adc $36				adc 	zTemp0
.92a2	1a		inc a				inc 	a 							; one extra for NULL
.92a3	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.92a6					_TOBlockLoop:
.92a6	c4 36		cpy $36				cpy 	zTemp0
.92a8	f0 09		beq $92b3			beq 	_TOBlockExit
.92aa	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.92ad	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.92b0	c8		iny				iny
.92b1	80 f3		bra $92a6			bra 	_TOBlockLoop
.92b3					_TOBlockExit:
.92b3	a9 00		lda #$00			lda 	#0
.92b5	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.92b8	60		rts				rts
.92b9					TokeniseHexConstant:
.92b9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.92bb	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.92be	e8		inx				inx									; start of quoted string.
.92bf	da		phx				phx 								; push start of constant on top
.92c0	ca		dex				dex
.92c1					_THFindLoop:
.92c1	e8		inx				inx
.92c2	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.92c5	c9 30		cmp #$30			cmp 	#"0"
.92c7	90 0c		bcc $92d5			bcc 	_THFoundEnd
.92c9	c9 3a		cmp #$3a			cmp 	#"9"+1
.92cb	90 f4		bcc $92c1			bcc 	_THFindLoop
.92cd	c9 41		cmp #$41			cmp 	#"A"
.92cf	90 04		bcc $92d5			bcc 	_THFoundEnd
.92d1	c9 47		cmp #$47			cmp 	#"F"+1
.92d3	90 ec		bcc $92c1			bcc 	_THFindLoop
.92d5					_THFoundEnd:
.92d5	7a		ply				ply 								; restore start
.92d6	20 9a 92	jsr $929a			jsr 	TOWriteBlockXY 				; output the block
.92d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.92da					TokeniseCalculateHash:
.92da	da		phx				phx
.92db	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.92de	a9 00		lda #$00			lda 	#0
.92e0					_TCHLoop:
.92e0	18		clc				clc
.92e1	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.92e4	e8		inx				inx
.92e5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.92e8	d0 f6		bne $92e0			bne 	_TCHLoop
.92ea	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.92ed	fa		plx				plx
.92ee	60		rts				rts
.92ef					FixLineBufferCase:
.92ef	a2 00		ldx #$00			ldx 	#0
.92f1					_FLBCLoop:
.92f1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.92f4	f0 22		beq $9318			beq 	_FLBCExit 					; end of string.
.92f6	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.92f8	f0 11		beq $930b			beq 	_FLBCInQuotes
.92fa	e8		inx				inx
.92fb	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.92fd	90 f2		bcc $92f1			bcc 	_FLBCLoop
.92ff	c9 7b		cmp #$7b			cmp 	#'z'+1
.9301	b0 ee		bcs $92f1			bcs 	_FLBCLoop
.9303	38		sec				sec 								; make U/C
.9304	e9 20		sbc #$20			sbc 	#32
.9306	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9309	80 e6		bra $92f1			bra 	_FLBCLoop
.930b					_FLBCInQuotes:
.930b	e8		inx				inx 								; advance
.930c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.930f	f0 07		beq $9318			beq 	_FLBCExit 					; exit on EOS
.9311	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9313	d0 f6		bne $930b			bne 	_FLBCInQuotes
.9315	e8		inx				inx 								; skip over it
.9316	80 d9		bra $92f1			bra 	_FLBCLoop
.9318					_FLBCExit:
.9318	60		rts				rts
.9319					TokeniseExtractLineNumber:
.9319	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.931c	48		pha				pha
.931d	ad 16 07	lda $0716			lda 	tokenLineNumber
.9320	48		pha				pha
.9321	20 57 93	jsr $9357			jsr 	_TELNTimes2 				; line # x 4
.9324	20 57 93	jsr $9357			jsr 	_TELNTimes2 				; line # x 2
.9327	18		clc				clc 								; add stacked value
.9328	68		pla				pla
.9329	6d 16 07	adc $0716			adc 	tokenLineNumber
.932c	8d 16 07	sta $0716			sta 	tokenLineNumber
.932f	68		pla				pla
.9330	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9333	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9336	20 57 93	jsr $9357			jsr 	_TELNTimes2 				; line # x 10
.9339	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.933c	e8		inx				inx
.933d	29 0f		and #$0f			and 	#15 						; add to line #
.933f	18		clc				clc
.9340	6d 16 07	adc $0716			adc 	tokenLineNumber
.9343	8d 16 07	sta $0716			sta 	tokenLineNumber
.9346	90 03		bcc $934b			bcc 	_TLENNoCarry
.9348	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.934b					_TLENNoCarry:
.934b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.934e	c9 30		cmp #$30			cmp 	#'0'
.9350	90 04		bcc $9356			bcc 	_TLENExit
.9352	c9 3a		cmp #$3a			cmp 	#'9'+1
.9354	90 c3		bcc $9319			bcc 	TokeniseExtractLineNumber
.9356					_TLENExit:
.9356	60		rts				rts
.9357					_TELNTimes2:
.9357	0e 16 07	asl $0716			asl 	tokenLineNumber
.935a	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.935d	60		rts				rts
.935e					TokeniseWriteByte:
.935e	da		phx				phx
.935f	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9362	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9365	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9368	fa		plx				plx
.9369	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.936a					CheckCreateVariableRecord:
.936a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.936c	85 36		sta $36				sta 	0+zTemp0
.936e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9370	85 37		sta $37				sta 	1+zTemp0
.9372					_CCVSearch:
.9372	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9374	f0 2c		beq $93a2			beq 	_CCVFail
.9376	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9378	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.937a	cd 03 07	cmp $0703			cmp 	identHash
.937d	d0 16		bne $9395			bne 	_CCVNext
.937f	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9381	ae 00 07	ldx $0700			ldx 	identStart
.9384					_CCVCompare:
.9384	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9387	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9389	e8		inx				inx 								; advance pointers
.938a	c8		iny				iny
.938b	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.938c	d0 07		bne $9395			bne 	_CCVNext  					; didn't match go to next.
.938e	90 f4		bcc $9384			bcc 	_CCVCompare 				; not finished yet.
.9390	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9393	f0 41		beq $93d6			beq 	_CCVFound 					; yes, we were successful
.9395					_CCVNext:
.9395	18		clc				clc
.9396	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9398	65 36		adc $36				adc 	zTemp0
.939a	85 36		sta $36				sta 	zTemp0
.939c	90 d4		bcc $9372			bcc 	_CCVSearch
.939e	e6 37		inc $37				inc 	zTemp0+1
.93a0	80 d0		bra $9372			bra 	_CCVSearch
.93a2					_CCVFail:
.93a2	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.93a4	ad 03 07	lda $0703			lda 	identHash
.93a7	91 36		sta ($36),y			sta 	(zTemp0),y
.93a9	c8		iny				iny 								; offset 2 is the type byte
.93aa	ad 04 07	lda $0704			lda 	identTypeByte
.93ad	91 36		sta ($36),y			sta 	(zTemp0),y
.93af	c8		iny				iny
.93b0					_CCVData:
.93b0	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.93b2	91 36		sta ($36),y			sta 	(zTemp0),y
.93b4	c8		iny				iny
.93b5	c0 08		cpy #$08			cpy 	#8
.93b7	90 f7		bcc $93b0			bcc 	_CCVData
.93b9	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.93bc					_CCVCopyName:
.93bc	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93bf	91 36		sta ($36),y			sta 	(zTemp0),y
.93c1	e8		inx				inx
.93c2	c8		iny				iny
.93c3	ec 02 07	cpx $0702			cpx 	identTypeEnd
.93c6	d0 f4		bne $93bc			bne 	_CCVCopyName
.93c8	98		tya				tya 								; patch offset
.93c9	92 36		sta ($36)			sta 	(zTemp0)
.93cb	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.93cd	91 36		sta ($36),y			sta 	(zTemp0),y
.93cf	88		dey				dey
.93d0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.93d2	09 80		ora #$80			ora 	#$80
.93d4	91 36		sta ($36),y			sta 	(zTemp0),y
.93d6					_CCVFound:
.93d6	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.93d8	38		sec				sec
.93d9	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.93db	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.93dd	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.93e0	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.93e2	20 5e 93	jsr $935e			jsr 	TokeniseWriteByte
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9b12					MemoryPeek:
.9b12	b2 36		lda ($36)			lda 	(zTemp0)
.9b14	60		rts				rts
.9b15					MemoryPoke:
.9b15	92 36		sta ($36)			sta 	(zTemp0)
.9b17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9b18					EXTPrintCharacter:
.9b18	48		pha				pha
.9b19	da		phx				phx
.9b1a	5a		phy				phy
.9b1b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9b1e	7a		ply				ply
.9b1f	fa		plx				plx
.9b20	68		pla				pla
.9b21	60		rts				rts
.9b22					EXTInputSingleCharacter:
.9b22	da		phx				phx
.9b23	5a		phy				phy
.9b24					_EISCWait:
.9b24	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9b27	c9 00		cmp #$00			cmp 	#0
.9b29	f0 f9		beq $9b24			beq 	_EISCWait
.9b2b	7a		ply				ply
.9b2c	fa		plx				plx
.9b2d	60		rts				rts
.9b2e					EXTInputLine:
.9b2e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9b30					_ILLoop:
.9b30	da		phx				phx 								; read character in
.9b31	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9b34	fa		plx				plx
.9b35	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9b37	f0 12		beq $9b4b			beq 	_ILBackspace
.9b39	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9b3b	f0 15		beq $9b52			beq 	_ILExit
.9b3d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9b3f	90 ef		bcc $9b30			bcc 	_ILLoop
.9b41	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9b43	f0 eb		beq $9b30			beq 	_ILLoop
.9b45	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9b48	e8		inx				inx
.9b49	80 e5		bra $9b30			bra 	_ILLoop
.9b4b					_ILBackspace:
.9b4b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9b4d	f0 e1		beq $9b30			beq 	_ILLoop
.9b4f	ca		dex				dex 								; back one.
.9b50	80 de		bra $9b30			bra 	_ILLoop
.9b52					_ILExit:
.9b52	20 18 9b	jsr $9b18			jsr 	EXTPrintCharacter
.9b55	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9b58	60		rts				rts
.9b59					EXTBreakCheck:
.9b59	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.93e6					MemoryNew:
.93e6	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.93e8	85 30		sta $30				sta 	codePtr
.93ea	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.93ec	85 31		sta $31				sta 	codePtr+1
.93ee	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.93f0	92 30		sta ($30)			sta 	(codePtr)
.93f2	60		rts				rts
.93f3					MemoryAppend:
.93f3	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.93f5	85 30		sta $30				sta 	codePtr
.93f7	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.93f9	85 31		sta $31				sta 	codePtr+1
.93fb					_MAFindEnd:
.93fb	b2 30		lda ($30)			lda 	(codePtr)
.93fd	f0 0d		beq $940c			beq 	_MAFoundEnd
.93ff	18		clc				clc
.9400	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9402	65 30		adc $30				adc 	codePtr
.9404	85 30		sta $30				sta 	codePtr
.9406	90 02		bcc $940a			bcc 	_CREExit
.9408	e6 31		inc $31				inc 	codePtr+1
.940a					_CREExit:
.940a	80 ef		bra $93fb			bra 	_MAFindEnd
.940c					_MAFoundEnd:
.940c	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.940f	c0 04		cpy #$04			cpy 	#4 							; blank line
.9411	f0 0e		beq $9421			beq 	_MANoLine
.9413	a9 00		lda #$00			lda 	#0 							; end of program
.9415	91 30		sta ($30),y			sta 	(codePtr),y
.9417					_MACopy:
.9417	88		dey				dey
.9418	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.941b	91 30		sta ($30),y			sta 	(codePtr),y
.941d	c0 00		cpy #$00			cpy 	#0
.941f	d0 f6		bne $9417			bne 	_MACopy
.9421					_MANoLine:
.9421	60		rts				rts
.9422					MemoryInline:
.9422	98		tya				tya 								; put address into stack,x
.9423	18		clc				clc
.9424	65 30		adc $30				adc 	codePtr
.9426	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9429	a5 31		lda $31				lda 	codePtr+1
.942b	69 00		adc #$00			adc 	#0
.942d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9430	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9433	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9436	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9437					MemoryTransferAX:
.9437	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9439	86 37		stx $37				stx 	zTemp0+1
.943b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.943d	85 30		sta $30				sta 	codePtr
.943f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9441	85 31		sta $31				sta 	codePtr+1
.9443					_MTAXLoop:
.9443	b2 30		lda ($30)			lda 	(codePtr)
.9445	f0 1d		beq $9464			beq 	_MTAXError 					; not found.
.9447	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9449	b1 30		lda ($30),y			lda 	(codePtr),y
.944b	c5 36		cmp $36				cmp 	zTemp0
.944d	d0 07		bne $9456			bne 	_MTAXNext
.944f	c8		iny				iny 								; check MSB
.9450	b1 30		lda ($30),y			lda 	(codePtr),y
.9452	c5 37		cmp $37				cmp 	zTemp0+1
.9454	f0 0d		beq $9463			beq 	_MTAXExit 					; success !
.9456					_MTAXNext:
.9456	18		clc				clc
.9457	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9459	65 30		adc $30				adc 	codePtr
.945b	85 30		sta $30				sta 	codePtr
.945d	90 02		bcc $9461			bcc 	_CREExit
.945f	e6 31		inc $31				inc 	codePtr+1
.9461					_CREExit:
.9461	80 e0		bra $9443			bra 	_MTAXLoop
.9463					_MTAXExit:
.9463	60		rts				rts
.9464					_MTAXError:
.9464	a9 0d		lda #$0d		lda	#13
.9466	4c 2a 84	jmp $842a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
