
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 17:28:22 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 8f 8c	jsr $8c8f			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	02 84					.word	ShiftLeft                        ; $00 <<
>8016	fc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	f2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	06 96					.word	SyntaxError                      ; $03 !!3
>801c	06 96					.word	SyntaxError                      ; $04 ><
>801e	06 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	05 84					.word	ShiftRight                       ; $06 >>
>8022	06 96					.word	SyntaxError                      ; $07 !!7
>8024	06 96					.word	SyntaxError                      ; $08 !!8
>8026	06 96					.word	SyntaxError                      ; $09 !!9
>8028	06 96					.word	SyntaxError                      ; $0a !!10
>802a	06 96					.word	SyntaxError                      ; $0b !!11
>802c	06 96					.word	SyntaxError                      ; $0c !!12
>802e	06 96					.word	SyntaxError                      ; $0d !!13
>8030	06 96					.word	SyntaxError                      ; $0e !!14
>8032	06 96					.word	SyntaxError                      ; $0f !!15
>8034	06 96					.word	SyntaxError                      ; $10 @
>8036	06 96					.word	SyntaxError                      ; $11 !!17
>8038	06 96					.word	SyntaxError                      ; $12 !!18
>803a	06 96					.word	SyntaxError                      ; $13 [
>803c	68 91					.word	IntegerDivide                    ; $14 \
>803e	06 96					.word	SyntaxError                      ; $15 ]
>8040	88 85					.word	EorInteger                       ; $16 ^
>8042	06 96					.word	SyntaxError                      ; $17 _
>8044	06 96					.word	SyntaxError                      ; $18 `
>8046	06 96					.word	SyntaxError                      ; $19 !!25
>8048	06 96					.word	SyntaxError                      ; $1a !!26
>804a	06 96					.word	SyntaxError                      ; $1b {
>804c	43 85					.word	OraInteger                       ; $1c |
>804e	06 96					.word	SyntaxError                      ; $1d }
>8050	06 96					.word	SyntaxError                      ; $1e ~
>8052	06 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	06 96					.word	SyntaxError                      ; $20
>8056	06 96					.word	SyntaxError                      ; $21 !
>8058	06 96					.word	SyntaxError                      ; $22 "
>805a	06 96					.word	SyntaxError                      ; $23 #
>805c	06 96					.word	SyntaxError                      ; $24 $
>805e	b4 91					.word	IntegerModulus                   ; $25 %
>8060	fe 84					.word	AndInteger                       ; $26 &
>8062	06 96					.word	SyntaxError                      ; $27 '
>8064	06 96					.word	SyntaxError                      ; $28 (
>8066	06 96					.word	SyntaxError                      ; $29 )
>8068	28 92					.word	MulInteger                       ; $2a *
>806a	98 84					.word	AddInteger                       ; $2b +
>806c	06 96					.word	SyntaxError                      ; $2c ,
>806e	d3 84					.word	SubInteger                       ; $2d -
>8070	06 96					.word	SyntaxError                      ; $2e .
>8072	bf 93					.word	FDivideCommand                   ; $2f /
>8074	06 96					.word	SyntaxError                      ; $30 0
>8076	06 96					.word	SyntaxError                      ; $31 1
>8078	06 96					.word	SyntaxError                      ; $32 2
>807a	06 96					.word	SyntaxError                      ; $33 3
>807c	06 96					.word	SyntaxError                      ; $34 4
>807e	06 96					.word	SyntaxError                      ; $35 5
>8080	06 96					.word	SyntaxError                      ; $36 6
>8082	06 96					.word	SyntaxError                      ; $37 7
>8084	06 96					.word	SyntaxError                      ; $38 8
>8086	06 96					.word	SyntaxError                      ; $39 9
>8088	06 96					.word	SyntaxError                      ; $3a :
>808a	06 96					.word	SyntaxError                      ; $3b ;
>808c	de 82					.word	BinaryCompareLess                ; $3c <
>808e	d4 82					.word	BinaryCompareEqual               ; $3d =
>8090	e8 82					.word	BinaryCompareGreater             ; $3e >
>8092	06 96					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	4a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	57 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	06 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	05 95					.word	AbsUnary                         ; $83 ABS(
>809c	87 89					.word	AllocUnary                       ; $84 ALLOC(
>809e	15 95					.word	AscUnary                         ; $85 ASC(
>80a0	24 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	d0 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	22 95					.word	FracUnary                        ; $88 FRAC(
>80a6	38 95					.word	IntUnary                         ; $89 INT(
>80a8	8e 95					.word	IsValUnary                       ; $8a ISVAL(
>80aa	fe 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	4a 95					.word	LenUnary                         ; $8c LEN(
>80ae	28 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	c1 89					.word	Unary_Not                        ; $8e NOT(
>80b2	0e 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	d7 89					.word	Unary_Rnd                        ; $90 RND(
>80b6	64 95					.word	SgnUnary                         ; $91 SGN(
>80b8	36 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	51 8a					.word	Unary_Str                        ; $93 STR$(
>80bc	c4 82					.word	UnaryTrue                        ; $94 TRUE
>80be	84 95					.word	ValUnary                         ; $95 VAL(
>80c0	06 96					.word	SyntaxError                      ; $96 FOR
>80c2	06 96					.word	SyntaxError                      ; $97 IF
>80c4	06 96					.word	SyntaxError                      ; $98 PROC
>80c6	06 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	06 96					.word	SyntaxError                      ; $9a WHILE
>80ca	06 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	06 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	06 96					.word	SyntaxError                      ; $9d NEXT
>80d0	06 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	06 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	06 96					.word	SyntaxError                      ; $a1 CLS
>80d8	06 96					.word	SyntaxError                      ; $a2 DATA
>80da	06 96					.word	SyntaxError                      ; $a3 DIM
>80dc	06 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	06 96					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	06 96					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	06 96					.word	SyntaxError                      ; $aa RETURN
>80ea	06 96					.word	SyntaxError                      ; $ab THEN
>80ec	06 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	06 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	06 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	06 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	06 96					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	06 96					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	06 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	06 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	06 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	06 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 c9 8b	jsr $8bc9			jsr 	EvaluateInteger 			; the assert test
.810f	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 5f 82	jmp $825f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 de 8b	jsr $8bde			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 bd 96	jsr $96bd			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad f7 85	lda $85f7			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 11 86	jsr $8611			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 5f 91	jsr $915f			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 0f 86	jsr $860f			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 4c 86	jmp $864c			jmp 	AssignNumber
.818b					_ASString:
.818b	4c ba 86	jmp $86ba			jmp 	AssignString
.818e					_ASError:
.818e	4c 10 96	jmp $9610			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 fc 90	jsr $90fc			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 9d 8b	jsr $8b9d			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 73 8a	jsr $8a73			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 39		beq $8247			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 1e		bcs $8241			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 44 82	jsr $8244			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
.822f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8231	90 05		bcc $8238			bcc 	_CRNotVariable
.8233					_CRGoLet:
.8233	20 62 81	jsr $8162			jsr 	LetCommand
.8236	80 dc		bra $8214			bra 	_CRMainLoop
.8238					_CRNotVariable:
.8238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.823a	f0 f7		beq $8233			beq 	_CRGoLet
.823c	c9 21		cmp #$21			cmp 	#KWD_PLING
.823e	f0 f3		beq $8233			beq 	_CRGoLet
>8240	db						.byte 	$DB 						; causes a break in the emulator
.8241					_CRSyntaxError:
.8241	4c 06 96	jmp $9606			jmp 	SyntaxError
.8244					_CRCallVector0:
.8244	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8247					CRNoProgram:
.8247	4c 5f 81	jmp $815f			jmp 	EndCommand
.824a					EOLCommand:
.824a	18		clc				clc
.824b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.824d	65 30		adc $30				adc 	codePtr
.824f	85 30		sta $30				sta 	codePtr
.8251	90 02		bcc $8255			bcc 	_CREExit
.8253	e6 31		inc $31				inc 	codePtr+1
.8255					_CREExit:
.8255	80 b3		bra $820a			bra 	RunNewLine
.8257					Shift1Command:
.8257	b1 30		lda ($30),y			lda 	(codePtr),y
.8259	c8		iny				iny
.825a	0a		asl a				asl 	a
.825b	aa		tax				tax
.825c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.914f					CheckRightBracket:
.914f	b1 30		lda ($30),y			lda 	(codePtr),y
.9151	c8		iny				iny
.9152	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9154	d0 0f		bne $9165			bne 	CNAFail
.9156	60		rts				rts
.9157					CheckComma:
.9157	b1 30		lda ($30),y			lda 	(codePtr),y
.9159	c8		iny				iny
.915a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.915c	d0 07		bne $9165			bne 	CNAFail
.915e	60		rts				rts
.915f					CheckNextA:
.915f	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9161	d0 02		bne $9165			bne 	CNAFail
.9163	c8		iny				iny 								; skip character
.9164	60		rts				rts 								; and exit
.9165					CNAFail:
.9165	4c 06 96	jmp $9606			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.825f					ErrorHandler:
.825f	a8		tay				tay 								; find the error text
.8260	f0 42		beq $82a4			beq 	_EHEnd
.8262	a2 00		ldx #$00			ldx 	#0
.8264					_EHFind:
.8264	88		dey				dey 								; found the error text ?
.8265	f0 0a		beq $8271			beq 	_EHFound
.8267					_EHFindZero:
.8267	bd 1f 96	lda $961f,x			lda 	ErrorText,x 				; find the next error
.826a	e8		inx				inx
.826b	c9 00		cmp #$00			cmp 	#0
.826d	d0 f8		bne $8267			bne 	_EHFindZero
.826f	80 f3		bra $8264			bra 	_EHFind
.8271					_EHFound:
.8271	bd 1f 96	lda $961f,x			lda 	ErrorText,x 				; print the message
.8274	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.8277	e8		inx				inx
.8278	bd 1f 96	lda $961f,x			lda 	ErrorText,x
.827b	d0 f4		bne $8271			bne 	_EHFound
.827d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.827f	b1 30		lda ($30),y			lda 	(codePtr),y
.8281	d0 05		bne $8288			bne 	_EHAtMsg
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	f0 17		beq $829f			beq 	_EHCREnd
.8288					_EHAtMsg:
.8288	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.828a	a9 a7		lda #$a7			lda 	#_AtMsg & $FF
.828c	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.828f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8291	b1 30		lda ($30),y			lda 	(codePtr),y
.8293	48		pha				pha
.8294	c8		iny				iny
.8295	b1 30		lda ($30),y			lda 	(codePtr),y
.8297	aa		tax				tax
.8298	68		pla				pla
.8299	20 a9 92	jsr $92a9			jsr 	ConvertInt16 				; convert XA to string
.829c	20 b1 82	jsr $82b1			jsr 	PrintStringXA 				; and print it.
.829f					_EHCREnd:
.829f	a9 0d		lda #$0d			lda 	#13 						; new line
.82a1	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.82a4					_EHEnd:
.82a4	4c 0c 80	jmp $800c			jmp 	WarmStart
>82a7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82af	20 00
.82b1					PrintStringXA:
.82b1	5a		phy				phy
.82b2	86 37		stx $37				stx 	zTemp0+1
.82b4	85 36		sta $36				sta 	zTemp0
.82b6	a0 00		ldy #$00			ldy 	#0
.82b8					_PSXALoop:
.82b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ba	f0 06		beq $82c2			beq 	_PSXAExit
.82bc	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.82bf	c8		iny				iny
.82c0	80 f6		bra $82b8			bra 	_PSXALoop
.82c2					_PSXAExit:
.82c2	7a		ply				ply
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82c4					UnaryTrue:
.82c4	fa		plx				plx
.82c5					ReturnTrue:
.82c5	a9 01		lda #$01			lda 	#1  						; set to 1
.82c7	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.82ca	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	60		rts				rts
.82d0					UnaryFalse:
.82d0	fa		plx				plx
.82d1					ReturnFalse:
.82d1	4c 52 8c	jmp $8c52			jmp 	NSMSetZero 					; set it all to zero
.82d4					BinaryCompareEqual:
.82d4	fa		plx				plx
.82d5	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82d8	c9 00		cmp #$00			cmp 	#0
.82da	f0 e9		beq $82c5			beq 	ReturnTrue
.82dc	80 f3		bra $82d1			bra 	ReturnFalse
.82de					BinaryCompareLess:
.82de	fa		plx				plx
.82df	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82e2	c9 ff		cmp #$ff			cmp 	#$FF
.82e4	f0 df		beq $82c5			beq 	ReturnTrue
.82e6	80 e9		bra $82d1			bra 	ReturnFalse
.82e8					BinaryCompareGreater:
.82e8	fa		plx				plx
.82e9	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82ec	c9 01		cmp #$01			cmp 	#1
.82ee	f0 d5		beq $82c5			beq 	ReturnTrue
.82f0	80 df		bra $82d1			bra 	ReturnFalse
.82f2					BinaryCompareNotEqual:
.82f2	fa		plx				plx
.82f3	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82f6	c9 00		cmp #$00			cmp 	#0
.82f8	d0 cb		bne $82c5			bne 	ReturnTrue
.82fa	80 d5		bra $82d1			bra 	ReturnFalse
.82fc					BinaryCompareLessEqual:
.82fc	fa		plx				plx
.82fd	20 10 83	jsr $8310			jsr 	CompareBaseCode
.8300	c9 01		cmp #$01			cmp 	#1
.8302	d0 c1		bne $82c5			bne 	ReturnTrue
.8304	80 cb		bra $82d1			bra 	ReturnFalse
.8306					BinaryCompareGreaterEqual:
.8306	fa		plx				plx
.8307	20 10 83	jsr $8310			jsr 	CompareBaseCode
.830a	c9 ff		cmp #$ff			cmp 	#$FF
.830c	d0 b7		bne $82c5			bne 	ReturnTrue
.830e	80 c1		bra $82d1			bra 	ReturnFalse
.8310					CompareBaseCode:
.8310	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; make both values if references.
.8313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8319	29 10		and #$10			and 	#NSTString
.831b	d0 40		bne $835d			bne 	_CBCString
.831d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8320	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8323	d0 3b		bne $8360			bne 	_CBCFloat
.8325	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832b	29 08		and #$08			and 	#NSTFloat
.832d	d0 31		bne $8360			bne 	_CBCFloat
.832f	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8332	e8		inx				inx
.8333	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8336	ca		dex				dex
.8337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.833a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.833d	10 0b		bpl $834a			bpl 	_CDCSameSign
.833f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8342	30 16		bmi $835a			bmi 	_CBCLess 					; return $FF
.8344					_CBCGreater:
.8344	a9 01		lda #$01			lda 	#1
.8346	60		rts				rts
.8347					_CBCEqual:
.8347	a9 00		lda #$00			lda 	#0
.8349	60		rts				rts
.834a					_CDCSameSign:
.834a	20 72 84	jsr $8472			jsr 	SubTopTwoStack 				; unsigned subtract
.834d	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; or the mantissa together
.8350	f0 f5		beq $8347			beq 	_CBCEqual 					; -0 == 0
.8352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8355	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8358	10 ea		bpl $8344			bpl 	_CBCGreater
.835a					_CBCLess:
.835a	a9 ff		lda #$ff			lda 	#$FF
.835c	60		rts				rts
.835d					_CBCString:
.835d	4c c9 83	jmp $83c9			jmp 	CompareStrings
.8360					_CBCFloat:
.8360	4c a5 93	jmp $93a5			jmp 	CompareFloat
.8363					CompareFixMinusZero:
.8363	20 82 8c	jsr $8c82			jsr 	NSMIsZero
.8366	d0 03		bne $836b			bne 	_CFXMZNotZero
.8368	9e 00 06	stz $0600,x			stz 	NSStatus,x
.836b					_CFXMZNotZero:
.836b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.836c					StringConcat:
.836c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.836f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8372	29 18		and #$18			and 	#NSBTypeMask
.8374	c9 10		cmp #$10			cmp 	#NSTString
.8376	d0 4e		bne $83c6			bne		_SCType
.8378	64 38		stz $38				stz 	zTemp1 						; counting total length
.837a	e8		inx				inx
.837b	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for second
.837e	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for second
.8381	ca		dex				dex
.8382	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for first
.8385	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for first
.8388	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.838a	20 db 96	jsr $96db			jsr 	StringTempAllocate
.838d	20 b7 83	jsr $83b7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8390	e8		inx				inx
.8391	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; copy second out
.8394	20 b7 83	jsr $83b7			jsr 	_SCCopy
.8397	ca		dex				dex
.8398	60		rts				rts
.8399					_SCSetupZ0:
.8399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.839c	85 36		sta $36				sta 	zTemp0
.839e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83a1	85 37		sta $37				sta 	zTemp0+1
.83a3	60		rts				rts
.83a4					_SCLengthZ0:
.83a4	5a		phy				phy
.83a5	a0 00		ldy #$00			ldy 	#0
.83a7					_SCLenLoop:
.83a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a9	f0 0a		beq $83b5			beq 	_SCLExit
.83ab	c8		iny				iny
.83ac	e6 38		inc $38				inc 	zTemp1
.83ae	10 f7		bpl $83a7			bpl		_SCLenLoop
.83b0	a9 09		lda #$09		lda	#9
.83b2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.83b5					_SCLExit:
.83b5	7a		ply				ply
.83b6	60		rts				rts
.83b7					_SCCopy:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCCopyLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 06		beq $83c4			beq 	_SCCExit
.83be	20 19 97	jsr $9719			jsr 	StringTempWrite
.83c1	c8		iny				iny
.83c2	80 f6		bra $83ba			bra 	_SCCopyLoop
.83c4					_SCCExit:
.83c4	7a		ply				ply
.83c5	60		rts				rts
.83c6					_SCType:
.83c6	4c 10 96	jmp $9610			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9168					IntegerDivide:
.9168	fa		plx				plx
.9169	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.916c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.916f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9170	0a		asl a				asl 	a
.9171	10 05		bpl $9178			bpl 	_NotRef
.9173	48		pha				pha
.9174	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9177	68		pla				pla
.9178					_NotRef:
.9178	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.917a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.917d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9180	f0 03		beq $9185			beq 	_IntegerCode 				; if clear, then we have two integers
.9182	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.9185					_IntegerCode:
.9185	20 a7 91	jsr $91a7			jsr 	CheckDivideZero 			; do div zero check
.9188	20 de 91	jsr $91de			jsr 	Int32Divide 				; do the division
.918b	20 9b 92	jsr $929b			jsr 	CalculateSign 				; calculate result sign
.918e					NSMCopyPlusTwoToZero:
.918e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9191	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9194	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9197	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.919a	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.919d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91a0	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.91a3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91a6	60		rts				rts
.91a7					CheckDivideZero:
.91a7	e8		inx				inx
.91a8	20 82 8c	jsr $8c82			jsr 	NSMIsZero
.91ab	f0 02		beq $91af			beq 	_CDVError
.91ad	ca		dex				dex
.91ae	60		rts				rts
.91af					_CDVError:
.91af	a9 03		lda #$03		lda	#3
.91b1	4c 5f 82	jmp $825f		jmp	ErrorHandler
.91b4					IntegerModulus:
.91b4	fa		plx				plx
.91b5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.91b8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91bb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bc	0a		asl a				asl 	a
.91bd	10 05		bpl $91c4			bpl 	_NotRef
.91bf	48		pha				pha
.91c0	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c3	68		pla				pla
.91c4					_NotRef:
.91c4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91c6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91c9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.91cc	f0 03		beq $91d1			beq 	_IntegerCode 				; if clear, then we have two integers
.91ce	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.91d1					_IntegerCode:
.91d1	20 a7 91	jsr $91a7			jsr 	CheckDivideZero 			; do div zero check
.91d4	20 de 91	jsr $91de			jsr 	Int32Divide 				; do the division
.91d7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.91da	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.91dd	60		rts				rts
.91de					Int32Divide:
.91de	48		pha				pha 								; save AXY
.91df	5a		phy				phy
.91e0	20 29 8c	jsr $8c29			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91e3	20 4e 8c	jsr $8c4e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.91e6	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.91e8					_I32DivideLoop:
.91e8	e8		inx				inx
.91e9	e8		inx				inx
.91ea	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.91ed	ca		dex				dex
.91ee	ca		dex				dex
.91ef	20 68 8c	jsr $8c68			jsr 	NSMRotateLeft
.91f2	20 1e 92	jsr $921e			jsr 	DivideCheckSubtract 		; check if subtract possible
.91f5	90 03		bcc $91fa			bcc 	_I32DivideNoCarryIn
.91f7	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.91fa					_I32DivideNoCarryIn:
.91fa	88		dey				dey 								; loop round till division completed.
.91fb	d0 eb		bne $91e8			bne 	_I32DivideLoop
.91fd	7a		ply				ply 								; restore AXY and exit
.91fe	68		pla				pla
.91ff	60		rts				rts
.9200					Int32ShiftDivide:
.9200	48		pha				pha 								; save AY
.9201	5a		phy				phy
.9202	e8		inx				inx 								; clear S[X+2]
.9203	e8		inx				inx
.9204	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.9207	ca		dex				dex
.9208	ca		dex				dex
.9209	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.920b					_I32SDLoop:
.920b	20 1e 92	jsr $921e			jsr 	DivideCheckSubtract 		; check if subtract possible
.920e	e8		inx				inx
.920f	e8		inx				inx
.9210	20 68 8c	jsr $8c68			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9213	ca		dex				dex
.9214	ca		dex				dex
.9215	20 68 8c	jsr $8c68			jsr 	NSMRotateLeft
.9218	88		dey				dey 	 							; do 31 times
.9219	d0 f0		bne $920b			bne 	_I32SDLoop
.921b	7a		ply				ply 								; restore AY and exit
.921c	68		pla				pla
.921d	60		rts				rts
.921e					DivideCheckSubtract:
.921e	20 72 84	jsr $8472			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9221	b0 04		bcs $9227			bcs 	_DCSExit 					; if carry set, then could do, exit
.9223	20 4c 84	jsr $844c			jsr 	AddTopTwoStack 				; add it back in
.9226	18		clc				clc 								; and return False
.9227					_DCSExit:
.9227	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9228					MulInteger:
.9228	fa		plx				plx
.9229	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.922c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.922f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9230	0a		asl a				asl 	a
.9231	10 05		bpl $9238			bpl 	_NotRef
.9233	48		pha				pha
.9234	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9237	68		pla				pla
.9238					_NotRef:
.9238	0a		asl a				asl 	a 							; put MSB of type into A:7
.9239	30 0b		bmi $9246			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.923b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.923e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9241	f0 06		beq $9249			beq 	_IntegerCode 				; if clear, then we have two integers
.9243	4c 7c 94	jmp $947c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9246					_StringData:
.9246	4c 1a 96	jmp $961a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9249					_IntegerCode:
.9249	20 56 92	jsr $9256			jsr 	MultiplyShort
.924c	c9 00		cmp #$00			cmp 	#0
.924e	f0 05		beq $9255			beq 	_MIExit
.9250	a9 04		lda #$04		lda	#4
.9252	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9255					_MIExit:
.9255	60		rts				rts
.9256					MultiplyShort:
.9256	5a		phy				phy 								; save Y
.9257	20 29 8c	jsr $8c29			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.925a	20 4e 8c	jsr $8c4e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.925d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.925f					_I32MLoop:
.925f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9262	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9265	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9268	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.926b	f0 28		beq $9295			beq 	_I32MExit 					; exit if zero
.926d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9270	29 01		and #$01			and 	#1
.9272	f0 0e		beq $9282			beq 	_I32MNoAdd
.9274	20 4c 84	jsr $844c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9277	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.927a	10 06		bpl $9282			bpl 	_I32MNoAdd
.927c					_I32ShiftRight:
.927c	20 75 8c	jsr $8c75			jsr 	NSMShiftRight 				; shift S[X] right
.927f	c8		iny				iny 								; increment shift count
.9280	80 0a		bra $928c			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9282					_I32MNoAdd:
.9282	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9285	70 f5		bvs $927c			bvs 	_I32ShiftRight 				; instead.
.9287	e8		inx				inx
.9288	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.928b	ca		dex				dex
.928c					_I32MShiftUpper:
.928c	e8		inx				inx 								; shift S[X+2] right
.928d	e8		inx				inx
.928e	20 75 8c	jsr $8c75			jsr 	NSMShiftRight
.9291	ca		dex				dex
.9292	ca		dex				dex
.9293	80 ca		bra $925f			bra 	_I32MLoop 					; try again.
.9295					_I32MExit:
.9295	20 9b 92	jsr $929b			jsr 	CalculateSign
.9298	98		tya				tya 								; shift in A
.9299	7a		ply				ply 								; restore Y and exit
.929a	60		rts				rts
.929b					CalculateSign:
.929b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.929e	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.92a1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.92a4	0a		asl a				asl 	a 							; shift bit 7 into carry
.92a5	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.92a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83c9					CompareStrings:
.83c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83cf	29 10		and #$10			and 	#NSBIsString
.83d1	f0 2c		beq $83ff			beq 	_CSTypeError
.83d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83d6	85 36		sta $36				sta 	zTemp0
.83d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83e0	85 38		sta $38				sta 	zTemp1
.83e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83e5	85 39		sta $39				sta 	zTemp1+1
.83e7	5a		phy				phy 								; save Y so we can access strings
.83e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83ea					_CSLoop:
.83ea	c8		iny				iny
.83eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83ef	d0 06		bne $83f7			bne 	_CSDifferent
.83f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83f3	d0 f5		bne $83ea			bne 	_CSLoop 					; still comparing
.83f5					_CSExit:
.83f5	7a		ply				ply 								; reached end, return zero in A from EOS
.83f6	60		rts				rts
.83f7					_CSDifferent:
.83f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83f9	90 fa		bcc $83f5			bcc		_CSExit
.83fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83fd	80 f6		bra $83f5			bra 	_CSExit
.83ff					_CSTypeError:
.83ff	4c 10 96	jmp $9610			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8402					ShiftLeft:
.8402	38		sec				sec
.8403	80 01		bra $8406			bra 	ShiftMain
.8405					ShiftRight:
.8405	18		clc				clc
.8406					ShiftMain:
.8406	fa		plx				plx 								; restore X
.8407	08		php				php 								; save direction
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.840b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.840e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.840f	0a		asl a				asl 	a
.8410	10 05		bpl $8417			bpl 	_NotRef
.8412	48		pha				pha
.8413	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8416	68		pla				pla
.8417					_NotRef:
.8417	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8419	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.841c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.841f	f0 03		beq $8424			beq 	_IntegerCode 				; if clear, then we have two integers
.8421	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.8424					_IntegerCode:
.8424	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8427	29 e0		and #$e0			and 	#$E0
.8429	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.842c	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.842f	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8432	d0 13		bne $8447			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8434					_SMLoop:
.8434	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8437	30 11		bmi $844a			bmi 	_SMExit 					; exit if done.
.8439	28		plp				plp 								; restore direcition setting
.843a	08		php				php
.843b	90 05		bcc $8442			bcc 	_SMRight
.843d	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; shift left if CS
.8440	80 f2		bra $8434			bra 	_SMLoop
.8442					_SMRight:
.8442	20 75 8c	jsr $8c75			jsr 	NSMShiftRight 				; shift right if CC
.8445	80 ed		bra $8434			bra 	_SMLoop
.8447					_SMExit0:
.8447	20 52 8c	jsr $8c52			jsr 	NSMSetZero 					; return zero.
.844a					_SMExit:
.844a	28		plp				plp 								; throw direction
.844b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.844c					AddTopTwoStack:
.844c	18		clc				clc
.844d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8450	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8453	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8456	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8459	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.845c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.845f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8462	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8465	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8468	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.846b	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.846e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8471	60		rts				rts
.8472					SubTopTwoStack:
.8472	38		sec				sec
.8473	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8476	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8479	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.847c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.847f	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8482	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8485	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8488	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.848b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.848e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8491	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8494	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8497	60		rts				rts
.8498					AddInteger:
.8498	fa		plx				plx
.8499	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.849c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.849f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84a0	0a		asl a				asl 	a
.84a1	10 05		bpl $84a8			bpl 	_NotRef
.84a3	48		pha				pha
.84a4	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a7	68		pla				pla
.84a8					_NotRef:
.84a8	0a		asl a				asl 	a 							; put MSB of type into A:7
.84a9	30 0b		bmi $84b6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84ab	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ae	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84b1	f0 06		beq $84b9			beq 	_IntegerCode 				; if clear, then we have two integers
.84b3	4c 04 93	jmp $9304			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84b6					_StringData:
.84b6	4c 6c 83	jmp $836c			jmp 	StringConcat							; at least one string - don't know both are strings.
.84b9					_IntegerCode:
.84b9					AddCode:
.84b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84bc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84bf	10 8b		bpl $844c			bpl 	AddTopTwoStack
.84c1	20 72 84	jsr $8472			jsr 	SubTopTwoStack 				; do a physical subtraction
.84c4	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84c7	10 09		bpl $84d2			bpl 	_AddExit
.84c9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84cf	20 07 8c	jsr $8c07			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84d2					_AddExit:
.84d2	60		rts				rts
.84d3					SubInteger:
.84d3	fa		plx				plx
.84d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84da	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84db	0a		asl a				asl 	a
.84dc	10 05		bpl $84e3			bpl 	_NotRef
.84de	48		pha				pha
.84df	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e2	68		pla				pla
.84e3					_NotRef:
.84e3	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e4	30 0b		bmi $84f1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84e9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ec	f0 06		beq $84f4			beq 	_IntegerCode 				; if clear, then we have two integers
.84ee	4c 09 93	jmp $9309			jmp 	FloatingPointSub 							; otherwise at least one float.
.84f1					_StringData:
.84f1	4c 1a 96	jmp $961a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84f4					_IntegerCode:
.84f4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84f7	49 80		eor #$80			eor 	#$80
.84f9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84fc	80 bb		bra $84b9			bra 	AddCode 					; and do the same code as add.
.84fe					AndInteger:
.84fe	fa		plx				plx
.84ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8502	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8505	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8506	0a		asl a				asl 	a
.8507	10 05		bpl $850e			bpl 	_NotRef
.8509	48		pha				pha
.850a	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850d	68		pla				pla
.850e					_NotRef:
.850e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8510	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8513	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8516	f0 03		beq $851b			beq 	_IntegerCode 				; if clear, then we have two integers
.8518	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.851b					_IntegerCode:
.851b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.851e	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8521	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8524	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8527	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.852a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8530	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8533	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8536	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8539	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.853c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.853f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8542	60		rts				rts
.8543					OraInteger:
.8543	fa		plx				plx
.8544	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8547	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854b	0a		asl a				asl 	a
.854c	10 05		bpl $8553			bpl 	_NotRef
.854e	48		pha				pha
.854f	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8552	68		pla				pla
.8553					_NotRef:
.8553	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8555	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8558	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855b	f0 03		beq $8560			beq 	_IntegerCode 				; if clear, then we have two integers
.855d	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.8560					_IntegerCode:
.8560	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8563	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8566	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8569	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.856f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8572	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8575	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8578	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.857e	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8581	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8584	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8587	60		rts				rts
.8588					EorInteger:
.8588	fa		plx				plx
.8589	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.858c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.858f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8590	0a		asl a				asl 	a
.8591	10 05		bpl $8598			bpl 	_NotRef
.8593	48		pha				pha
.8594	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8597	68		pla				pla
.8598					_NotRef:
.8598	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.859a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.859d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85a0	f0 03		beq $85a5			beq 	_IntegerCode 				; if clear, then we have two integers
.85a2	4c 10 96	jmp $9610			jmp 	TypeError 					; anything else, type mismatch.
.85a5					_IntegerCode:
.85a5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85a8	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85ae	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85b1	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85b7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85ba	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85bd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85c0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85c3	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85c6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85c9	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.92a9					ConvertInt16:
.92a9	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.92ac	8e 10 06	stx $0610			stx 	NSMantissa1
.92af	9c 18 06	stz $0618			stz 	NSMantissa2
.92b2	9c 20 06	stz $0620			stz 	NSMantissa3
.92b5	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.92b8	a2 00		ldx #$00			ldx 	#0 							; stack level
.92ba	a9 0a		lda #$0a			lda 	#10 						; base
.92bc	80 00		bra $92be			bra 	ConvertInt32
.92be					ConvertInt32:
.92be	5a		phy				phy
.92bf	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.92c1	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.92c4	10 08		bpl $92ce			bpl 	_CI32NotNeg
.92c6	48		pha				pha
.92c7	a9 2d		lda #$2d			lda 	#'-'
.92c9	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.92cc	c8		iny				iny
.92cd	68		pla				pla
.92ce					_CI32NotNeg:
.92ce	20 dc 92	jsr $92dc			jsr 	_CI32DivideConvert 			; recursive conversion
.92d1	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.92d3	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.92d6	7a		ply				ply
.92d7	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.92d9	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.92db	60		rts				rts
.92dc					_CI32DivideConvert:
.92dc	e8		inx				inx 								; write to next slot up
.92dd	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.92e0	ca		dex				dex
.92e1	20 de 91	jsr $91de			jsr 	Int32Divide 				; divide
.92e4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.92e7	48		pha				pha
.92e8	20 8e 91	jsr $918e			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92eb	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; is it zero ?
.92ee	f0 06		beq $92f6			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92f0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92f3	20 dc 92	jsr $92dc			jsr 	_CI32DivideConvert 			; and recusrively call.
.92f6					_CI32NoRecurse:
.92f6	68		pla				pla 								; remainder
.92f7	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92f9	90 02		bcc $92fd			bcc 	_CI32NotHex
.92fb	69 26		adc #$26			adc 	#6+32
.92fd					_CI32NotHex:
.92fd	69 30		adc #$30			adc 	#48
.92ff	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9302	c8		iny				iny
.9303	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.85cd					PrecedenceLevel:
>85cd	04					.byte	 4	; $00 <<
>85ce	02					.byte	 2	; $01 <=
>85cf	02					.byte	 2	; $02 <>
>85d0	00					.byte	 0	; $03 !!3
>85d1	00					.byte	 0	; $04 ><
>85d2	02					.byte	 2	; $05 >=
>85d3	04					.byte	 4	; $06 >>
>85d4	00					.byte	 0	; $07 !!7
>85d5	00					.byte	 0	; $08 !!8
>85d6	00					.byte	 0	; $09 !!9
>85d7	00					.byte	 0	; $0a !!10
>85d8	00					.byte	 0	; $0b !!11
>85d9	00					.byte	 0	; $0c !!12
>85da	00					.byte	 0	; $0d !!13
>85db	00					.byte	 0	; $0e !!14
>85dc	00					.byte	 0	; $0f !!15
>85dd	00					.byte	 0	; $10 @
>85de	00					.byte	 0	; $11 !!17
>85df	00					.byte	 0	; $12 !!18
>85e0	00					.byte	 0	; $13 [
>85e1	04					.byte	 4	; $14 \
>85e2	00					.byte	 0	; $15 ]
>85e3	01					.byte	 1	; $16 ^
>85e4	00					.byte	 0	; $17 _
>85e5	00					.byte	 0	; $18 `
>85e6	00					.byte	 0	; $19 !!25
>85e7	00					.byte	 0	; $1a !!26
>85e8	00					.byte	 0	; $1b {
>85e9	01					.byte	 1	; $1c |
>85ea	00					.byte	 0	; $1d }
>85eb	00					.byte	 0	; $1e ~
>85ec	00					.byte	 0	; $1f [7m<7F>[m
>85ed	00					.byte	 0	; $20
>85ee	05					.byte	 5	; $21 !
>85ef	00					.byte	 0	; $22 "
>85f0	00					.byte	 0	; $23 #
>85f1	05					.byte	 5	; $24 $
>85f2	04					.byte	 4	; $25 %
>85f3	01					.byte	 1	; $26 &
>85f4	00					.byte	 0	; $27 '
>85f5	00					.byte	 0	; $28 (
>85f6	00					.byte	 0	; $29 )
>85f7	04					.byte	 4	; $2a *
>85f8	03					.byte	 3	; $2b +
>85f9	00					.byte	 0	; $2c ,
>85fa	03					.byte	 3	; $2d -
>85fb	00					.byte	 0	; $2e .
>85fc	04					.byte	 4	; $2f /
>85fd	00					.byte	 0	; $30 0
>85fe	00					.byte	 0	; $31 1
>85ff	00					.byte	 0	; $32 2
>8600	00					.byte	 0	; $33 3
>8601	00					.byte	 0	; $34 4
>8602	00					.byte	 0	; $35 5
>8603	00					.byte	 0	; $36 6
>8604	00					.byte	 0	; $37 7
>8605	00					.byte	 0	; $38 8
>8606	00					.byte	 0	; $39 9
>8607	00					.byte	 0	; $3a :
>8608	00					.byte	 0	; $3b ;
>8609	02					.byte	 2	; $3c <
>860a	02					.byte	 2	; $3d =
>860b	02					.byte	 2	; $3e >
>860c	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.860d					EvaluateExpressionAt0:
.860d	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.860f					EvaluateExpression:
.860f	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8611					EvaluateExpressionAtPrecedence:
.8611	48		pha				pha 								; save precedence level
.8612	20 7e 88	jsr $887e			jsr 	EvaluateTerm 				; evaluate term into level X.
.8615	68		pla				pla 								; restore precedence level.
.8616					_EXPRLoop:
.8616	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8618	b1 30		lda ($30),y			lda 	(codePtr),y
.861a	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.861c	b0 25		bcs $8643			bcs 	_EXPRExit
.861e	da		phx				phx 								; read the operator precedence
.861f	aa		tax				tax
.8620	bd cd 85	lda $85cd,x			lda 	PrecedenceLevel,x
.8623	fa		plx				plx
.8624	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8626	f0 1b		beq $8643			beq 	_EXPRExit
.8628	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.862a	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.862c	c5 37		cmp $37				cmp 	zTemp0+1
.862e	b0 13		bcs $8643			bcs		_EXPRExit 					; if current >= operator exit
.8630	48		pha				pha 								; save current precedence.
.8631	b1 30		lda ($30),y			lda 	(codePtr),y
.8633	c8		iny				iny
.8634	48		pha				pha
.8635	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8637	e8		inx				inx 								; work out the right hand side.
.8638	20 11 86	jsr $8611			jsr 	EvaluateExpressionAtPrecedence
.863b	ca		dex				dex
.863c	68		pla				pla 								; get operator, call the code.
.863d	20 46 86	jsr $8646			jsr 	_EXPRCaller
.8640	68		pla				pla 								; restore precedence level
.8641	80 d3		bra $8616			bra 	_EXPRLoop 					; and go round.
.8643					_EXPRExit:
.8643	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8645	60		rts				rts
.8646					_EXPRCaller:
.8646	da		phx				phx 								; save on stack, first thing is to restore it
.8647	0a		asl a				asl 	a 							; double so can use vectors into X
.8648	aa		tax				tax
.8649	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9304					FloatingPointAdd:
.9304	20 a5 94	jsr $94a5			jsr 	FloatPrepare 				; prepare for floats
.9307	80 0b		bra $9314			bra 	FloatAdd
.9309					FloatingPointSub:
.9309	20 a5 94	jsr $94a5			jsr 	FloatPrepare 				; prepare for floats
.930c					FloatSubtract:
.930c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.930f	49 80		eor #$80			eor 	#$80
.9311	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9314					FloatAdd:
.9314	48		pha				pha
.9315	5a		phy				phy
.9316	20 b6 94	jsr $94b6			jsr 	NSNormalise 				; normalise S[X]
.9319	f0 54		beq $936f			beq 	_FAReturn1
.931b	e8		inx				inx 								; normalise S[X+1]
.931c	20 b6 94	jsr $94b6			jsr 	NSNormalise
.931f	ca		dex				dex
.9320	c9 00		cmp #$00			cmp 	#0
.9322	f0 6f		beq $9393			beq 	_FAExit 					; if so, just return A
.9324	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9327	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.932a	f0 1b		beq $9347			beq 	_FAExponentsEqual
.932c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.932f	a8		tay				tay
.9330	38		sec				sec 								; do a signed comparison of the exponents.
.9331	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9334	50 02		bvc $9338			bvc 	_FANoSignedChange
.9336	49 80		eor #$80			eor 	#$80
.9338					_FANoSignedChange:
.9338	29 80		and #$80			and 	#$80
.933a	10 03		bpl $933f			bpl 	_FAHaveMax
.933c	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.933f					_FAHaveMax:
.933f	20 96 93	jsr $9396			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9342	e8		inx				inx
.9343	20 96 93	jsr $9396			jsr 	_FAShiftToExponent
.9346	ca		dex				dex
.9347					_FAExponentsEqual:
.9347	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.934a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.934d	30 10		bmi $935f			bmi 	_FADifferentSigns
.934f	20 4c 84	jsr $844c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9355	10 3c		bpl $9393			bpl 	_FAExit 					; if no, we are done.
.9357	20 75 8c	jsr $8c75			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.935a	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.935d	80 34		bra $9393			bra 	_FAExit
.935f					_FADifferentSigns:
.935f	20 72 84	jsr $8472			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9362	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9365	10 2c		bpl $9393			bpl 	_FAExit 					; if no, we are done.
.9367	20 fe 8b	jsr $8bfe			jsr 	NSMNegate 					; netate result
.936a	20 07 8c	jsr $8c07			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.936d	80 24		bra $9393			bra 	_FAExit
.936f					_FAReturn1:
.936f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9372	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9375	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9378	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.937b	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.937e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9381	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9384	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9387	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.938a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.938d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9390	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9393					_FAExit:
.9393	7a		ply				ply
.9394	68		pla				pla
.9395	60		rts				rts
.9396					_FAShiftToExponent:
.9396					_FAShiftToExponent2:
.9396	98		tya				tya 								; compare Y to exponent
.9397	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.939a	f0 08		beq $93a4			beq 	_FASEExit 					; exit if so.
.939c	20 75 8c	jsr $8c75			jsr 	NSMShiftRight	 			; shift the mantissa right
.939f	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.93a2	80 f2		bra $9396			bra 	_FAShiftToExponent2
.93a4					_FASEExit:
.93a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93a5					CompareFloat:
.93a5	20 0c 93	jsr $930c			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93a8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93ab	29 f8		and #$f8			and 	#$F8
.93ad	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.93b0	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.93b3	f0 09		beq $93be			beq 	_FCExit 					; zero, so approximately identical
.93b5	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93b7	3c 00 06	bit $0600,x			bit 	NSStatus,x
.93ba	10 02		bpl $93be			bpl 	_FCExit
.93bc					_FCNegative:
.93bc	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93be					_FCExit:
.93be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93bf					FDivideCommand:
.93bf	fa		plx				plx	 								; restore stack position
.93c0	20 a5 94	jsr $94a5			jsr 	FloatPrepare 				; prepare for floats
.93c3					FloatDivide:
.93c3	48		pha				pha
.93c4	e8		inx				inx
.93c5	20 b6 94	jsr $94b6			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93c8	ca		dex				dex
.93c9	c9 00		cmp #$00			cmp 	#0
.93cb	f0 20		beq $93ed			beq 	_FDZero
.93cd	20 b6 94	jsr $94b6			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93d0	f0 19		beq $93eb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93d2	20 00 92	jsr $9200			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93d5	20 8e 91	jsr $918e			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93d8	20 b6 94	jsr $94b6			jsr		NSNormalise 				; renormalise
.93db	20 9b 92	jsr $929b			jsr 	CalculateSign 				; calculate result sign
.93de	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.93e1	38		sec				sec
.93e2	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93e5	38		sec				sec
.93e6	e9 1e		sbc #$1e			sbc 	#30
.93e8	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93eb					_FDExit:
.93eb	68		pla				pla
.93ec	60		rts				rts
.93ed					_FDZero:
.93ed	a9 03		lda #$03		lda	#3
.93ef	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.93f2					FloatFractionalPart:
.93f2	5a		phy				phy
.93f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.93f6	29 7f		and #$7f			and 	#$7F
.93f8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93fb	20 b6 94	jsr $94b6			jsr 	NSNormalise
.93fe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9401	38		sec				sec
.9402	e9 e0		sbc #$e0			sbc 	#$E0
.9404	90 31		bcc $9437			bcc 	_FFPExit 					; already fractional
.9406	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9408	b0 2a		bcs $9434			bcs 	_FFPZero
.940a	a8		tay				tay 								; put count to do in Y
.940b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.940e	20 39 94	jsr $9439			jsr 	_FFPPartial
.9411	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9414	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9417	20 39 94	jsr $9439			jsr 	_FFPPartial
.941a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.941d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9420	20 39 94	jsr $9439			jsr 	_FFPPartial
.9423	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9426	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9429	20 39 94	jsr $9439			jsr 	_FFPPartial
.942c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.942f	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; zeroed check.
.9432	d0 03		bne $9437			bne 	_FFPExit
.9434					_FFPZero:
.9434	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.9437					_FFPExit:
.9437	7a		ply				ply
.9438	60		rts				rts
.9439					_FFPPartial:
.9439	c0 00		cpy #$00			cpy 	#0 							; no more to do
.943b	f0 17		beq $9454			beq 	_FFFPPExit
.943d	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.943f	b0 0c		bcs $944d			bcs 	_FFFPPWholeByte
.9441	5a		phy				phy
.9442					_FFFPPLeft:
.9442	0a		asl a				asl 	a
.9443	88		dey				dey
.9444	d0 fc		bne $9442			bne 	_FFFPPLeft
.9446	7a		ply				ply
.9447					_FFFPPRight:
.9447	4a		lsr a				lsr 	a
.9448	88		dey				dey
.9449	d0 fc		bne $9447			bne 	_FFFPPRight
.944b	80 07		bra $9454			bra 	_FFFPPExit
.944d					_FFFPPWholeByte:
.944d	98		tya				tya 								; subtract 8 from count
.944e	38		sec				sec
.944f	e9 08		sbc #$08			sbc 	#8
.9451	a8		tay				tay
.9452	a9 00		lda #$00			lda 	#0 							; and clear all
.9454					_FFFPPExit:
.9454	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9455					FloatIntegerPart:
.9455	48		pha				pha
.9456	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9459	f0 1f		beq $947a			beq 	_FIPExit 					; if so do nothing
.945b	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; is it zero ?
.945e	f0 17		beq $9477			beq 	_FIPZero 					; if so return zero.
.9460	20 b6 94	jsr $94b6			jsr 	NSNormalise 				; normalise
.9463	f0 12		beq $9477			beq 	_FIPZero 					; normalised to zero, exit zero
.9465					_FIPShift:
.9465	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9468	10 08		bpl $9472			bpl 	_FIPCheckZero
.946a	20 75 8c	jsr $8c75			jsr 	NSMShiftRight 				; shift mantissa right
.946d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9470	80 f3		bra $9465			bra 	_FIPShift
.9472					_FIPCheckZero:
.9472	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; avoid -0 problem
.9475	d0 03		bne $947a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9477					_FIPZero:
.9477	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.947a					_FIPExit:
.947a	68		pla				pla
.947b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.947c					FloatingPointMultiply:
.947c	20 a5 94	jsr $94a5			jsr 	FloatPrepare 				; prepare for floats
.947f					FloatMultiply:
.947f	48		pha				pha
.9480	20 b6 94	jsr $94b6			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9483	f0 1b		beq $94a0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9485	e8		inx				inx
.9486	20 b6 94	jsr $94b6			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9489	ca		dex				dex
.948a	c9 00		cmp #$00			cmp 	#0
.948c	f0 0f		beq $949d			beq 	_FDSetZero
.948e	20 56 92	jsr $9256			jsr 	MultiplyShort 				; calculate the result.
.9491	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9494	18		clc				clc
.9495	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9498	9d 28 06	sta $0628,x			sta 	NSExponent,x
.949b	80 03		bra $94a0			bra 	_FDExit
.949d					_FDSetZero:
.949d	20 52 8c	jsr $8c52			jsr 	NSMSetZero 					; return 0
.94a0					_FDExit:
.94a0	20 b6 94	jsr $94b6			jsr 	NSNormalise 				; normalise the result
.94a3	68		pla				pla
.94a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94a5					FloatPrepare:
.94a5	20 bd 86	jsr $86bd			jsr 	DereferenceTopTwo 			; dereference the top two values
.94a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.94ab	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.94ae	29 10		and #$10			and 	#NSBIsString
.94b0	d0 01		bne $94b3			bne 	_FDType
.94b2	60		rts				rts
.94b3					_FDType:
.94b3	4c 10 96	jmp $9610			jmp 	TypeError
.94b6					NSNormalise:
.94b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.94b9	29 80		and #$80			and 	#$80
.94bb	09 08		ora #$08			ora 	#NSTFloat
.94bd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94c0	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; if zero exit
.94c3	d0 09		bne $94ce			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94c5	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.94c8	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.94cb	a9 00		lda #$00			lda 	#0 							; set Z flag
.94cd	60		rts				rts
.94ce					_NSNormaliseOptimise:
.94ce	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94d1	d0 22		bne $94f5			bne 	_NSNormaliseLoop
.94d3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.94d6	30 1d		bmi $94f5			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94d8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94db	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94de	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94e1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94e4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94e7	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.94ea	bd 28 06	lda $0628,x			lda 	NSExponent,x
.94ed	38		sec				sec
.94ee	e9 08		sbc #$08			sbc 	#8
.94f0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94f3	80 d9		bra $94ce			bra 	_NSNormaliseOptimise
.94f5					_NSNormaliseLoop:
.94f5	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.94f8	70 08		bvs $9502			bvs 	_NSNExit 					; exit if so with Z flag clear
.94fa	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; shift mantissa left
.94fd	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9500	80 f3		bra $94f5			bra 	_NSNormaliseLoop
.9502					_NSNExit:
.9502	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9504	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.864c					AssignNumber:
.864c	5a		phy				phy
.864d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8650	85 36		sta $36				sta 	zTemp0
.8652	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8655	85 37		sta $37				sta 	zTemp0+1
.8657	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.865a	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.865c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.865f	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8661	c9 08		cmp #$08			cmp 	#NSTFloat
.8663	f0 2a		beq $868f			beq 	_ANFloat
.8665	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8668	f0 05		beq $866f			beq		_ANNotFloat
.866a	e8		inx				inx
.866b	20 55 94	jsr $9455			jsr 	FloatIntegerPart 			; make it an integer
.866e	ca		dex				dex
.866f					_ANNotFloat:
.866f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8672	29 03		and #$03			and 	#3
.8674	d0 05		bne $867b			bne 	_ANByteWord
.8676	20 9b 86	jsr $869b			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8679	80 1e		bra $8699			bra 	_ANExit
.867b					_ANByteWord:
.867b	48		pha				pha 								; save count
.867c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.867f	92 36		sta ($36)			sta 	(zTemp0)
.8681	68		pla				pla
.8682	c9 01		cmp #$01			cmp	 	#1
.8684	f0 13		beq $8699			beq 	_ANExit
.8686	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8689	a0 01		ldy #$01			ldy 	#1
.868b	91 36		sta ($36),y			sta 	(zTemp0),y
.868d	80 0a		bra $8699			bra 	_ANExit
.868f					_ANFloat:
.868f	20 9b 86	jsr $869b			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8692	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8695	a0 04		ldy #$04			ldy 	#4
.8697	91 36		sta ($36),y			sta 	(zTemp0),y
.8699					_ANExit:
.8699	7a		ply				ply
.869a	60		rts				rts
.869b					_ANCopy4PackSign:
.869b	a0 03		ldy #$03			ldy 	#3
.869d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.86a0	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.86a2	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	88		dey				dey
.86a8	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.86ab	91 36		sta ($36),y			sta 	(zTemp0),y
.86ad	88		dey				dey
.86ae	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.86b1	91 36		sta ($36),y			sta 	(zTemp0),y
.86b3	88		dey				dey
.86b4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.86b7	91 36		sta ($36),y			sta 	(zTemp0),y
.86b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.86ba					AssignString:
>86ba	db						.byte 	$DB 						; causes a break in the emulator
.86bb	80 fd		bra $86ba			bra 	AssignString

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.86bd					DereferenceTopTwo:
.86bd	e8		inx				inx
.86be	20 c2 86	jsr $86c2			jsr 	Dereference 				; deref x+1
.86c1	ca		dex				dex  								; falls through to deref x
.86c2					Dereference:
.86c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.86c5	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.86c7	f0 57		beq $8720			beq 	_DRFExit 					; not a reference
.86c9	5a		phy				phy
.86ca	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.86cd	85 36		sta $36				sta 	zTemp0
.86cf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86d2	85 37		sta $37				sta 	zTemp0+1
.86d4	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.86d7	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.86d9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.86df	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.86e1	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.86e3	f0 0f		beq $86f4			beq 	_DRFDereferenceTwo
.86e5	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.86e7	f0 39		beq $8722			beq 	_DRFFull
.86e9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.86ec	29 03		and #$03			and 	#3
.86ee	f0 32		beq $8722			beq 	_DRFFull 					; the whole word
.86f0	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.86f2	f0 07		beq $86fb			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.86f4					_DRFDereferenceTwo:
.86f4	a0 01		ldy #$01			ldy 	#1
.86f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.86f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86fb					_DRFClear23:
.86fb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.86fe	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8701	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8704	29 18		and #$18			and 	#NSBTypeMask
.8706	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8709	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.870b	d0 12		bne $871f			bne 	_DRFNotString
.870d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8710	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8713	d0 0a		bne $871f			bne 	_DRFNotString
.8715	a9 21		lda #$21			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8717	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.871a	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.871c	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.871f					_DRFNotString
.871f	7a		ply				ply 								; restore Y and exit
.8720					_DRFExit:
.8720	60		rts				rts
.8721					_DRFNullString:
>8721	00						.byte 	0
.8722					_DRFFull:
.8722	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8724	b1 36		lda ($36),y			lda 	(zTemp0),y
.8726	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8729	c8		iny				iny
.872a	b1 36		lda ($36),y			lda 	(zTemp0),y
.872c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.872f	c8		iny				iny
.8730	b1 36		lda ($36),y			lda 	(zTemp0),y
.8732	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8735	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8738	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.873b	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.873d	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8740	f0 06		beq $8748			beq 	_DRFNoExponent
.8742	c8		iny				iny 								; if not, read the exponent as well.
.8743	b1 36		lda ($36),y			lda 	(zTemp0),y
.8745	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8748					_DRFNoExponent:
.8748	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.874b	10 0d		bpl $875a			bpl 	_DRFExit2 					; if not, then exit.
.874d	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.874f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8752	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8755	09 80		ora #$80			ora 	#NSBIsNegative
.8757	9d 00 06	sta $0600,x			sta 	NSStatus,x
.875a					_DRFExit2:
.875a	7a		ply				ply
.875b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.875c					EncodeNumberStart:
.875c	38		sec				sec
.875d	80 01		bra $8760			bra 	EncodeNumberContinue+1
.875f					EncodeNumberContinue:
.875f	18		clc				clc
.8760					EncodeNumber:
.8760	08		php				php 								; save reset.
.8761	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8763	f0 12		beq $8777			beq 	_ENIsOkay
.8765	c9 30		cmp #$30			cmp 	#"0"
.8767	90 04		bcc $876d			bcc 	_ENBadNumber
.8769	c9 3a		cmp #$3a			cmp 	#"9"+1
.876b	90 0a		bcc $8777			bcc 	_ENIsOkay
.876d					_ENBadNumber:
.876d	28		plp				plp 								; throw saved reset
.876e	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8771	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8773	f0 7e		beq $87f3			beq 	_ENConstructFinal
.8775					_ENFail:
.8775	18		clc				clc 								; not allowed
.8776	60		rts				rts
.8777					_ENIsOkay:
.8777	28		plp				plp 								; are we restarting
.8778	90 15		bcc $878f			bcc 	_ENNoRestart
.877a					_ENStartEncode:
.877a	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.877c	f0 0c		beq $878a			beq 	_ENFirstDP
.877e	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8780	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.8783	a9 01		lda #$01			lda 	#ESTA_Low
.8785					_ENExitChange:
.8785	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8788	38		sec				sec
.8789	60		rts				rts
.878a					_ENFirstDP:
.878a	20 52 8c	jsr $8c52			jsr 	NSMSetZero 					; clear integer part
.878d	80 3f		bra $87ce			bra 	_ESTASwitchFloat			; go straight to float and exi
.878f					_ENNoRestart:
.878f	48		pha				pha 								; save on stack.
.8790	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8793	c9 01		cmp #$01			cmp 	#ESTA_Low
.8795	f0 09		beq $87a0			beq  	_ESTALowState
.8797	c9 02		cmp #$02			cmp 	#ESTA_High
.8799	f0 29		beq $87c4			beq 	_ESTAHighState
.879b	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.879d	f0 3b		beq $87da			beq 	_ESTADecimalState
>879f	db						.byte 	$DB 						; causes a break in the emulator
.87a0					_ESTALowState:
.87a0	68		pla				pla 								; get value back
.87a1	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.87a3	f0 29		beq $87ce			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.87a5	29 0f		and #$0f			and 	#15 						; make digit
.87a7	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.87aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.87ad	0a		asl a				asl 	a
.87ae	0a		asl a				asl 	a
.87af	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.87b2	0a		asl a				asl 	a
.87b3	6d 06 07	adc $0706			adc 	DigitTemp
.87b6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87b9	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.87bb	90 05		bcc $87c2			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.87bd	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.87bf	8d 05 07	sta $0705			sta 	EncodeState
.87c2					_ESTANoSwitch:
.87c2	38		sec				sec
.87c3	60		rts				rts
.87c4					_ESTAHighState:
.87c4	68		pla				pla 								; get value back
.87c5	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.87c7	f0 05		beq $87ce			beq 	_ESTASwitchFloat
.87c9	20 2d 88	jsr $882d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.87cc	38		sec				sec
.87cd	60		rts				rts
.87ce					_ESTASwitchFloat:
.87ce	9c 07 07	stz $0707			stz 	DecimalCount
.87d1	e8		inx				inx 								; zero the decimal additive.
.87d2	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.87d5	ca		dex				dex
.87d6	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.87d8	80 ab		bra $8785			bra 	_ENExitChange
.87da					_ESTADecimalState:
.87da	68		pla				pla 								; digit.
.87db	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.87dd	f0 96		beq $8775			beq 	_ENFail
.87df	e8		inx				inx 								; put digit into fractional part of X+1
.87e0	20 2d 88	jsr $882d			jsr 	ESTAShiftDigitIntoMantissa
.87e3	ca		dex				dex
.87e4	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.87e7	ad 07 07	lda $0707			lda 	DecimalCount
.87ea	c9 0b		cmp #$0b			cmp 	#11
.87ec	f0 02		beq $87f0			beq 	_ESTADSFail
.87ee	38		sec				sec
.87ef	60		rts				rts
.87f0					_ESTADSFail:
.87f0	4c 0b 96	jmp $960b			jmp 	RangeError
.87f3					_ENConstructFinal:
.87f3	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.87f6	f0 33		beq $882b			beq 	_ENCFExit 					; no decimals
.87f8	5a		phy				phy
.87f9	0a		asl a				asl 	a 							; x 4 and CLC
.87fa	0a		asl a				asl 	a
.87fb	6d 07 07	adc $0707			adc 	DecimalCount
.87fe	a8		tay				tay
.87ff	b9 ca 95	lda $95ca,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8802	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8805	b9 cb 95	lda $95cb,y			lda 	DecimalScalarTable-5+1,y
.8808	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.880b	b9 cc 95	lda $95cc,y			lda 	DecimalScalarTable-5+2,y
.880e	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8811	b9 cd 95	lda $95cd,y			lda 	DecimalScalarTable-5+3,y
.8814	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8817	b9 ce 95	lda $95ce,y			lda 	DecimalScalarTable-5+4,y
.881a	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.881d	a9 08		lda #$08			lda 	#NSTFloat
.881f	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8822	7a		ply				ply
.8823	e8		inx				inx 								; multiply decimal const by decimal scalar
.8824	20 7f 94	jsr $947f			jsr 	FloatMultiply
.8827	ca		dex				dex
.8828	20 14 93	jsr $9314			jsr 	FloatAdd 					; add to integer part.
.882b					_ENCFExit:
.882b	18		clc				clc 								; reject the digit.
.882c	60		rts				rts
.882d					ESTAShiftDigitIntoMantissa:
.882d	29 0f		and #$0f			and 	#15 						; save digit
.882f	48		pha				pha
.8830	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8833	48		pha				pha
.8834	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8837	48		pha				pha
.8838	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.883b	48		pha				pha
.883c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.883f	48		pha				pha
.8840	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 2
.8843	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 4
.8846	18		clc				clc 								; pop mantissa and add
.8847	68		pla				pla
.8848	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.884b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.884e	68		pla				pla
.884f	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8852	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8855	68		pla				pla
.8856	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8859	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.885c	68		pla				pla
.885d	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8860	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8863	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 10
.8866	68		pla				pla 								; add digit
.8867	18		clc				clc
.8868	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.886b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.886e	90 0d		bcc $887d			bcc 	_ESTASDExit
.8870	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8873	d0 08		bne $887d			bne 	_ESTASDExit
.8875	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8878	d0 03		bne $887d			bne 	_ESTASDExit
.887a	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.887d					_ESTASDExit:
.887d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.887e					EvaluateTerm:
.887e	b1 30		lda ($30),y			lda 	(codePtr),y
.8880	30 18		bmi $889a			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8882	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8884	b0 6f		bcs $88f5			bcs 	_ETVariable
.8886	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8888	90 6e		bcc $88f8			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.888a	c9 3a		cmp #$3a			cmp 	#'9'+1
.888c	b0 6a		bcs $88f8			bcs 	_ETPuncUnary
.888e	20 5c 87	jsr $875c			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8891					_ETNumber:
.8891	c8		iny				iny 								; keep encoding until we have the numbers
.8892	b1 30		lda ($30),y			lda 	(codePtr),y
.8894	20 5f 87	jsr $875f			jsr 	EncodeNumberContinue
.8897	b0 f8		bcs $8891			bcs 	_ETNumber 					; go back if accepted.
.8899	60		rts				rts
.889a					_ETCheckUnary:
.889a	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.889c	f0 41		beq $88df			beq 	_ETString
.889e	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.88a0	f0 12		beq $88b4			beq 	_ETHexConstant
.88a2	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.88a4	90 0b		bcc $88b1			bcc 	_ETSyntaxError
.88a6	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.88a8	b0 07		bcs $88b1			bcs 	_ETSyntaxError
.88aa	da		phx				phx 								; push X on the stack
.88ab	0a		asl a				asl 	a 							; put vector x 2 into X
.88ac	aa		tax				tax
.88ad	c8		iny				iny 								; consume unary function token
.88ae	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.88b1					_ETSyntaxError:
.88b1	4c 06 96	jmp $9606			jmp 	SyntaxError
.88b4					_ETHexConstant:
.88b4	c8		iny				iny 								; skip #
.88b5	c8		iny				iny 								; skip count
.88b6	20 52 8c	jsr $8c52			jsr 	NSMSetZero 					; clear result
.88b9					_ETHLoop:
.88b9	b1 30		lda ($30),y			lda 	(codePtr),y
.88bb	c8		iny				iny 								; and consume
.88bc	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.88be	f0 1e		beq $88de			beq 	_ETHExit
.88c0	48		pha				pha 								; save on stack.
.88c1	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 2
.88c4	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 4
.88c7	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 8
.88ca	20 67 8c	jsr $8c67			jsr 	NSMShiftLeft 				; x 16
.88cd	68		pla				pla 								; ASCII
.88ce	c9 41		cmp #$41			cmp 	#'A'
.88d0	90 02		bcc $88d4			bcc 	_ETHNotChar
.88d2	e9 07		sbc #$07			sbc 	#7
.88d4					_ETHNotChar:
.88d4	29 0f		and #$0f			and 	#15 						; digit now
.88d6	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.88d9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88dc	80 db		bra $88b9			bra 	_ETHLoop 					; go round.
.88de					_ETHExit:
.88de	60		rts				rts
.88df					_ETString:
.88df	c8		iny				iny 								; look at length
.88e0	b1 30		lda ($30),y			lda 	(codePtr),y
.88e2	48		pha				pha
.88e3	c8		iny				iny 								; first character
.88e4	20 38 91	jsr $9138			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.88e7	68		pla				pla 								; restore count and save
.88e8	85 36		sta $36				sta 	zTemp0
.88ea	98		tya				tya 								; add length to Y to skip it.
.88eb	18		clc				clc
.88ec	65 36		adc $36				adc 	zTemp0
.88ee	a8		tay				tay
.88ef	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.88f1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88f4	60		rts				rts
.88f5					_ETVariable:
.88f5	4c 4f 89	jmp $894f			jmp 	VariableHandler
.88f8					_ETPuncUnary:
.88f8	c8		iny				iny 								; consume the unary character
.88f9	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.88fb	f0 2d		beq $892a			beq 	_ETUnaryNegate
.88fd	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.88ff	f0 39		beq $893a			beq 	_ETDereference
.8901	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8903	f0 43		beq $8948			beq 	_ETParenthesis
.8905	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8907	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8909	f0 06		beq $8911			beq 	_ETIndirection
.890b	e6 36		inc $36				inc 	zTemp0
.890d	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.890f	d0 a0		bne $88b1			bne 	_ETSyntaxError
.8911					_ETIndirection:
.8911	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8913	1a		inc a				inc 	a
.8914	48		pha				pha
.8915	20 7e 88	jsr $887e			jsr 	EvaluateTerm				; evaluate the term
.8918	20 c2 86	jsr $86c2			jsr 	Dereference 				; dereference it.
.891b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.891e	d0 07		bne $8927			bne 	_ETTypeMismatch
.8920	68		pla				pla 								; indirection 1-2
.8921	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8923	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8926	60		rts				rts
.8927					_ETTypeMismatch:
.8927	4c 10 96	jmp $9610			jmp 	TypeError
.892a					_ETUnaryNegate:
.892a	20 7e 88	jsr $887e			jsr 	EvaluateTerm				; evaluate the term
.892d	20 c2 86	jsr $86c2			jsr 	Dereference 				; dereference it.
.8930	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8933	29 10		and #$10			and 	#NSTString
.8935	d0 f0		bne $8927			bne 	_ETTypeMismatch
.8937	4c fe 8b	jmp $8bfe			jmp 	NSMNegate  					; just toggles the sign bit.
.893a					_ETDereference:
.893a	20 7e 88	jsr $887e			jsr 	EvaluateTerm				; evaluate the term
.893d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8940	29 20		and #$20			and 	#NSBIsReference
.8942	f0 e3		beq $8927			beq 	_ETTypeMismatch
.8944	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8947	60		rts				rts
.8948					_ETParenthesis:
.8948	20 0f 86	jsr $860f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.894b	20 4f 91	jsr $914f			jsr 	CheckRightBracket 			; check for )
.894e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.894f					VariableHandler:
.894f	b1 30		lda ($30),y			lda 	(codePtr),y
.8951	18		clc				clc
.8952	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8954	85 37		sta $37				sta 	zTemp0+1
.8956	c8		iny				iny
.8957	b1 30		lda ($30),y			lda 	(codePtr),y
.8959	85 36		sta $36				sta 	zTemp0
.895b	c8		iny				iny
.895c	18		clc				clc									; copy variable address+3 to mantissa
.895d	69 03		adc #$03			adc 	#3
.895f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8962	a5 37		lda $37				lda 	zTemp0+1
.8964	69 00		adc #$00			adc 	#0
.8966	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8969	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.896c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.896f	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8972	5a		phy				phy
.8973	a0 02		ldy #$02			ldy 	#2 							; read type
.8975	b1 36		lda ($36),y			lda 	(zTemp0),y
.8977	7a		ply				ply
.8978	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.897a	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.897c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897f	29 04		and #$04			and 	#NSBIsArray
.8981	d0 01		bne $8984			bne 	_VHArray
.8983	60		rts				rts
.8984					_VHArray:
>8984	db						.byte 	$DB 						; causes a break in the emulator
.8985	80 fd		bra $8984			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9505					AbsUnary:
.9505	fa		plx				plx 								; restore stack pos
.9506	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber 				; get a float or int
.9509	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.950c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.950f	29 7f		and #$7f			and 	#$7F
.9511	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9514	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8987					AllocUnary:
.8987	fa		plx				plx 								; restore stack pos
.8988	20 de 8b	jsr $8bde			jsr 	Evaluate16BitInteger		; get bytes required.
.898b	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.898e	da		phx				phx 								; save X/Y
.898f	5a		phy				phy
.8990	8a		txa				txa 								; copy X into Y
.8991	a8		tay				tay
.8992	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8995	aa		tax				tax
.8996	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8999	20 a6 89	jsr $89a6			jsr 	AllocateXABytes 			; allocate memory
.899c	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.899f	8a		txa				txa
.89a0	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.89a3	7a		ply				ply
.89a4	fa		plx				plx
.89a5	60		rts				rts
.89a6					AllocateXABytes:
.89a6	5a		phy				phy
.89a7	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.89aa	5a		phy				phy
.89ab	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.89ae	5a		phy				phy
.89af	18		clc				clc
.89b0	6d 0c 07	adc $070c			adc 	lowMemPtr
.89b3	8d 0c 07	sta $070c			sta 	lowMemPtr
.89b6	8a		txa				txa
.89b7	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.89ba	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.89bd	fa		plx				plx
.89be	68		pla				pla
.89bf	7a		ply				ply
.89c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9515					AscUnary:
.9515	fa		plx				plx 								; restore stack pos
.9516	20 b1 8b	jsr $8bb1			jsr 	EvaluateString 				; get a string
.9519	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.951b	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.951e	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.9521	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9522					FracUnary:
.9522	fa		plx				plx 								; restore stack pos
.9523	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber 				; get a float or int
.9526	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.9529	bd 00 06	lda $0600,x			lda 	NSStatus,x
.952c	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.952e	f0 04		beq $9534			beq 	_IUZero
.9530	20 f2 93	jsr $93f2			jsr 	FloatFractionalPart
.9533	60		rts				rts
.9534					_IUZero:
.9534	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.9537	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9538					IntUnary:
.9538	fa		plx				plx 								; restore stack pos
.9539	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber 				; get a float or int
.953c	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.953f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9542	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9544	f0 03		beq $9549			beq 	_IUExit
.9546	20 55 94	jsr $9455			jsr 	FloatIntegerPart
.9549					_IUExit:
.9549	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.954a					LenUnary:
.954a	fa		plx				plx 								; restore stack pos
.954b	20 b1 8b	jsr $8bb1			jsr 	EvaluateString 				; get a string
.954e	5a		phy				phy
.954f	a0 00		ldy #$00			ldy 	#0 							; find length
.9551					_LenFind:
.9551	b1 36		lda ($36),y			lda 	(zTemp0),y
.9553	f0 06		beq $955b			beq 	_LenExit
.9555	c8		iny				iny
.9556	d0 f9		bne $9551			bne 	_LenFind
.9558	4c 0b 96	jmp $960b			jmp 	RangeError 					; string > 255
.955b					_LenExit:
.955b	98		tya				tya
.955c	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.955f	7a		ply				ply
.9560	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.9563	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.89c1					Unary_Not:
.89c1	fa		plx				plx
.89c2	20 c9 8b	jsr $8bc9			jsr 	EvaluateInteger 			; get integer
.89c5	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.89c8	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; zero mantissa ?
.89cb	f0 04		beq $89d1			beq 	_NotZero
.89cd	20 52 8c	jsr $8c52			jsr 	NSMSetZero
.89d0	60		rts				rts
.89d1					_NotZero:
.89d1	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.89d4					_UNBad:
.89d4	4c 15 96	jmp $9615			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.89d7					Unary_Rnd:
.89d7	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber 				; number to use.
.89da	20 4f 91	jsr $914f			jsr 	CheckRightBracket 			; closing bracket
.89dd	20 06 8a	jsr $8a06			jsr 	Random32Bit 				; generate a number.
.89e0	ad 08 07	lda $0708			lda 	RandomSeed+0
.89e3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89e6	ad 09 07	lda $0709			lda 	RandomSeed+1
.89e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89ec	ad 0a 07	lda $070a			lda 	RandomSeed+2
.89ef	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89f2	ad 0b 07	lda $070b			lda 	RandomSeed+3
.89f5	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.89f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89fa	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.89fc	8d 28 06	sta $0628			sta 	NSExponent
.89ff	a9 08		lda #$08			lda 	#NSTFloat
.8a01	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8a04	db						.byte 	$DB 						; causes a break in the emulator
.8a05	60		rts				rts
.8a06					Random32Bit:
.8a06	5a		phy				phy
.8a07	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8a09	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8a0c	d0 03		bne $8a11			bne 	_Random1
.8a0e	a8		tay				tay 								; if so do it 256 times
.8a0f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8a11					_Random1:
.8a11	0a		asl a				asl 	a 							; LSFR RNG
.8a12	2e 09 07	rol $0709			rol 	RandomSeed+1
.8a15	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8a18	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8a1b	90 02		bcc $8a1f			bcc 	_Random2
.8a1d	49 c5		eor #$c5			eor 	#$C5
.8a1f					_Random2:
.8a1f	88		dey				dey
.8a20	d0 ef		bne $8a11			bne 	_Random1
.8a22	7a		ply				ply
.8a23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9564					SgnUnary:
.9564	fa		plx				plx 								; restore stack pos
.9565	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber 				; get a float or int
.9568	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.956b	20 82 8c	jsr $8c82			jsr 	NSMIsZero 					; if zero
.956e	f0 10		beq $9580			beq 	_SGZero  					; return Int Zero
.9570	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9573	48		pha				pha
.9574	a9 01		lda #$01			lda 	#1 							; set to 1
.9576	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.9579	68		pla				pla
.957a	29 80		and #$80			and		#$80 						; copy the sign byte out
.957c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.957f	60		rts				rts
.9580	20 52 8c	jsr $8c52	_SGZero:jsr 	NSMSetZero
.9583	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9584					ValUnary:
.9584	fa		plx				plx 								; restore stack pos
.9585	20 9a 95	jsr $959a			jsr 	ValMainCode 				; do the main val() code
.9588	b0 01		bcs $958b			bcs 	_VUError 					; couldn't convert
.958a	60		rts				rts
.958b					_VUError:
.958b	4c 10 96	jmp $9610			jmp 	TypeError
.958e					IsValUnary:
.958e	fa		plx				plx 								; restore stack pos
.958f	20 9a 95	jsr $959a			jsr 	ValMainCode 				; do the main val() code
.9592	b0 03		bcs $9597			bcs 	_VUBad
.9594	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.9597					_VUBad:
.9597	4c d1 82	jmp $82d1			jmp 	ReturnFalse
.959a					ValMainCode:
.959a	20 b1 8b	jsr $8bb1			jsr 	EvaluateString 				; get a string
.959d	20 4f 91	jsr $914f			jsr 	CheckRightBracket 			; check right bracket present
.95a0	5a		phy				phy
.95a1	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.95a3	f0 17		beq $95bc			beq 	_VMCFail2
.95a5	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.95a7	48		pha				pha 								; save first character
.95a8	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.95aa	d0 01		bne $95ad			bne 	_VMCStart
.95ac	c8		iny				iny 								; skip over -
.95ad					_VMCStart:
.95ad	38		sec				sec 								; initialise first time round.
.95ae					_VMCNext:
.95ae	c8		iny				iny 								; pre-increment
.95af	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.95b1	f0 0c		beq $95bf			beq 	_VMCSuccess 				; successful.
.95b3	20 60 87	jsr $8760			jsr 	EncodeNumber 				; send it to the number-builder
.95b6	90 03		bcc $95bb			bcc 	_VMCFail 					; if failed, give up.
.95b8	18		clc				clc 								; next time round, countinue
.95b9	80 f3		bra $95ae			bra 	_VMCNext
.95bb					_VMCFail:
.95bb	68		pla				pla
.95bc					_VMCFail2:
.95bc	7a		ply				ply
.95bd	38		sec				sec
.95be	60		rts				rts
.95bf					_VMCSuccess:
.95bf	a9 00		lda #$00			lda 	#0 							; construct final
.95c1	20 60 87	jsr $8760			jsr 	EncodeNumber
.95c4	68		pla				pla
.95c5	c9 2d		cmp #$2d			cmp 	#"-"
.95c7	d0 03		bne $95cc			bne 	_VMCNotNegative
.95c9	20 fe 8b	jsr $8bfe			jsr		NSMNegate
.95cc					_VMCNotNegative:
.95cc	7a		ply				ply
.95cd	18		clc				clc
.95ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8a24					ChrUnary:
.8a24	fa		plx				plx 								; restore stack pos
.8a25	20 ea 8b	jsr $8bea			jsr 	Evaluate8BitInteger			; get value
.8a28	48		pha				pha
.8a29	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.8a2c	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8a2e	20 db 96	jsr $96db			jsr 	StringTempAllocate
.8a31	68		pla				pla 								; write number to it
.8a32	20 19 97	jsr $9719			jsr 	StringTempWrite
.8a35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8a36					SpcUnary:
.8a36	fa		plx				plx 								; restore stack pos
.8a37	20 ea 8b	jsr $8bea			jsr 	Evaluate8BitInteger			; get value
.8a3a	5a		phy				phy
.8a3b	48		pha				pha 								; save count
.8a3c	20 db 96	jsr $96db			jsr 	StringTempAllocate
.8a3f	7a		ply				ply 								; to do count in Y
.8a40					_SpcLoop:
.8a40	c0 00		cpy #$00			cpy 	#0
.8a42	f0 08		beq $8a4c			beq 	_SpcExit
.8a44	a9 20		lda #$20			lda 	#32
.8a46	20 19 97	jsr $9719			jsr 	StringTempWrite
.8a49	88		dey				dey
.8a4a	80 f4		bra $8a40			bra 	_SPCLoop
.8a4c					_SpcExit:
.8a4c	7a		ply				ply
.8a4d	20 4f 91	jsr $914f			jsr 	CheckRightBracket
.8a50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8a51					Unary_Str:
.8a51	fa		plx				plx
.8a52	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber  			; get number
.8a55	20 4f 91	jsr $914f			jsr 	CheckRightBracket 			; closing bracket
.8a58	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8a5a	20 73 8a	jsr $8a73			jsr 	ConvertNumberToString 		; do the conversion.
.8a5d	a9 21		lda #$21			lda		#33 						; create buffer
.8a5f	20 db 96	jsr $96db			jsr 	StringTempAllocate 			; allocate memory
.8a62	da		phx				phx
.8a63	a2 00		ldx #$00			ldx 	#0
.8a65					_USCopy:
.8a65	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a68	20 19 97	jsr $9719			jsr 	StringTempWrite
.8a6b	e8		inx				inx
.8a6c	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a6f	d0 f4		bne $8a65			bne 	_USCopy
.8a71	fa		plx				plx
.8a72	60		rts				rts
.8a73					ConvertNumberToString:
.8a73	5a		phy				phy 								; save code position
.8a74	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8a77	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8a7a	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8a7d	10 0a		bpl $8a89			bpl 	_CNTSNotNegative
.8a7f	29 7f		and #$7f			and 	#$7F 						; make +ve
.8a81	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a84	a9 2d		lda #$2d			lda 	#"-"
.8a86	20 ef 8a	jsr $8aef			jsr 	WriteDecimalBuffer
.8a89					_CNTSNotNegative:
.8a89	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8a8c	f0 15		beq $8aa3			beq 	_CNTSNotFloat
.8a8e	e8		inx				inx 								; round up
.8a8f	a9 01		lda #$01			lda 	#1
.8a91	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.8a94	ca		dex				dex
.8a95	bd 28 06	lda $0628,x			lda		NSExponent,x
.8a98	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8a9b	a9 08		lda #$08			lda 	#NSTFloat
.8a9d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8aa0	20 14 93	jsr $9314			jsr 	FloatAdd
.8aa3					_CNTSNotFloat:
.8aa3	20 d1 8a	jsr $8ad1			jsr 	MakePlusTwoString
.8aa6	20 f2 93	jsr $93f2			jsr 	FloatFractionalPart 		; get the fractional part
.8aa9	20 b6 94	jsr $94b6			jsr 	NSNormalise					; normalise , exit if zero
.8aac	f0 21		beq $8acf			beq 	_CNTSExit
.8aae	a9 2e		lda #$2e			lda 	#"."
.8ab0	20 ef 8a	jsr $8aef			jsr 	WriteDecimalBuffer 			; write decimal place
.8ab3					_CNTSDecimal:
.8ab3	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8ab6	30 17		bmi $8acf			bmi 	_CNTSExit
.8ab8	e8		inx				inx 								; x 10.0
.8ab9	a9 0a		lda #$0a			lda 	#10
.8abb	20 54 8c	jsr $8c54			jsr 	NSMSetByte
.8abe	a9 08		lda #$08			lda 	#NSTFloat
.8ac0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ac3	ca		dex				dex
.8ac4	20 7f 94	jsr $947f			jsr 	FloatMultiply
.8ac7	20 d1 8a	jsr $8ad1			jsr 	MakePlusTwoString
.8aca	20 f2 93	jsr $93f2			jsr 	FloatFractionalPart 		; get the fractional part
.8acd	80 e4		bra $8ab3			bra 	_CNTSDecimal 				; keep going.
.8acf					_CNTSExit:
.8acf	7a		ply				ply
.8ad0	60		rts				rts
.8ad1					MakePlusTwoString:
.8ad1	da		phx				phx
.8ad2	20 29 8c	jsr $8c29			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8ad5	e8		inx				inx 								; access it
.8ad6	e8		inx				inx
.8ad7	20 55 94	jsr $9455			jsr 	FloatIntegerPart 			; make it an integer
.8ada	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8adc	20 be 92	jsr $92be			jsr 	ConvertInt32
.8adf	a2 00		ldx #$00			ldx	 	#0
.8ae1					_MPTSCopy:
.8ae1	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ae4	20 ef 8a	jsr $8aef			jsr 	WriteDecimalBuffer
.8ae7	e8		inx				inx
.8ae8	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8aeb	d0 f4		bne $8ae1			bne 	_MPTSCopy
.8aed	fa		plx				plx
.8aee	60		rts				rts
.8aef					WriteDecimalBuffer:
.8aef	da		phx				phx
.8af0	ae 14 07	ldx $0714			ldx 	dbOffset
.8af3	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8af6	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8af9	ee 14 07	inc $0714			inc 	dbOffset
.8afc	fa		plx				plx
.8afd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8afe					Unary_Left:
.8afe	fa		plx				plx
.8aff	18		clc				clc 								; only one parameter
.8b00	20 75 8b	jsr $8b75			jsr 	SubstringInitial 			; set up.
.8b03	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8b06	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b09	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8b0c	80 2c		bra $8b3a			bra 	SubstringMain
.8b0e					Unary_Right:
.8b0e	fa		plx				plx
.8b0f	18		clc				clc 								; only one parameter
.8b10	20 75 8b	jsr $8b75			jsr 	SubstringInitial 			; set up.
.8b13	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8b16	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b19	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8b1c	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8b1f	b0 02		bcs $8b23			bcs 	_URNotUnderflow
.8b21	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8b23					_URNotUnderFlow:
.8b23	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8b26	80 12		bra $8b3a			bra 	SubStringMain
.8b28					Unary_Mid:
.8b28	fa		plx				plx
.8b29	38		sec				sec 								; two parameters
.8b2a	20 75 8b	jsr $8b75			jsr 	SubstringInitial 			; set up.
.8b2d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8b30	f0 05		beq $8b37			beq 	_UMError
.8b32	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8b35	80 03		bra $8b3a			bra 	SubStringMain
.8b37					_UMError:
.8b37	4c 15 96	jmp $9615			jmp 	ArgumentError
.8b3a					SubStringMain:
.8b3a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8b3d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8b40	b0 2d		bcs $8b6f			bcs 	_SSMNull 					; if so, return an empty string.
.8b42	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8b45	f0 28		beq $8b6f			beq 	_SSMNull 					; return empty string.
.8b47	18		clc				clc 								; add the offset +1 to the address and
.8b48	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8b4b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8b4e	85 36		sta $36				sta 	zTemp0
.8b50	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8b53	69 00		adc #$00			adc 	#0
.8b55	85 37		sta $37				sta 	zTemp0+1
.8b57					_SSMNoCarry:
.8b57	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8b5a	20 db 96	jsr $96db			jsr 	StringTempAllocate 			; allocate that many characters
.8b5d	5a		phy				phy 								; save Y
.8b5e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8b60					_SSMCopy:
.8b60	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8b62	f0 09		beq $8b6d			beq 	_SSMEString 				; no more to copy
.8b64	20 19 97	jsr $9719			jsr 	StringTempWrite 			; and write it out.
.8b67	c8		iny				iny
.8b68	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8b6b	d0 f3		bne $8b60			bne 	_SSMCopy
.8b6d					_SSMEString:
.8b6d	7a		ply				ply
.8b6e					_SSMExit:
.8b6e	60		rts				rts
.8b6f					_SSMNull:
.8b6f	a9 00		lda #$00			lda 	#0
.8b71	20 db 96	jsr $96db			jsr 	StringTempAllocate
.8b74	60		rts				rts
.8b75					SubstringInitial:
.8b75	da		phx				phx 								; save initial stack position
.8b76	08		php				php 								; save carry on stack indicating 2 parameters
.8b77	20 b1 8b	jsr $8bb1			jsr 	EvaluateString 				; get a string
.8b7a	5a		phy				phy 								; calculate length to exponent.
.8b7b	a0 ff		ldy #$ff			ldy 	#$FF
.8b7d					_SIFindLength:
.8b7d	c8		iny				iny
.8b7e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b80	d0 fb		bne $8b7d			bne 	_SIFindLength
.8b82	98		tya				tya
.8b83	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b86	7a		ply				ply
.8b87	e8		inx				inx
.8b88	20 57 91	jsr $9157			jsr 	CheckComma 					; comma next
.8b8b	20 ea 8b	jsr $8bea			jsr 	Evaluate8BitInteger 		; get next parameter
.8b8e	28		plp				plp 								; is it the last parameter ?
.8b8f	90 07		bcc $8b98			bcc 	_SSIExit 					; if so, exit.
.8b91	e8		inx				inx
.8b92	20 57 91	jsr $9157			jsr 	CheckComma 					; comma next
.8b95	20 ea 8b	jsr $8bea			jsr 	Evaluate8BitInteger 		; get last parameter
.8b98					_SSIExit:
.8b98	fa		plx				plx
.8b99	20 4f 91	jsr $914f			jsr 	CheckRightBracket 			; check closing bracket
.8b9c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8b9d					EvaluateValue:
.8b9d	48		pha				pha
.8b9e	20 0f 86	jsr $860f			jsr		EvaluateExpression 			; expression
.8ba1	20 c2 86	jsr $86c2			jsr 	Dereference					; derefernce it
.8ba4	68		pla				pla
.8ba5	60		rts				rts
.8ba6					EvaluateNumber:
.8ba6	20 9d 8b	jsr $8b9d			jsr 	EvaluateValue 				; get a value
.8ba9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8bac	29 10		and #$10			and 	#NSBIsString
.8bae	d0 16		bne $8bc6			bne 	HelperTypeError
.8bb0	60		rts				rts
.8bb1					EvaluateString:
.8bb1	20 9d 8b	jsr $8b9d			jsr 	EvaluateValue 				; get a value
.8bb4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8bb7	29 10		and #$10			and 	#NSBIsString
.8bb9	f0 0b		beq $8bc6			beq 	HelperTypeError
.8bbb					CopyAddressToTemp0:
.8bbb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8bbe	85 36		sta $36				sta 	zTemp0
.8bc0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bc3	85 37		sta $37				sta 	zTemp0+1
.8bc5	60		rts				rts
.8bc6					HelperTypeError:
.8bc6	4c 10 96	jmp $9610			jmp 	TypeError
.8bc9					EvaluateInteger:
.8bc9	20 a6 8b	jsr $8ba6			jsr 	EvaluateNumber
.8bcc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8bcf	d0 0a		bne $8bdb			bne 	HelperValueError 			; if not, it's a float.
.8bd1	60		rts				rts
.8bd2					EvaluateUnsignedInteger:
.8bd2	20 c9 8b	jsr $8bc9			jsr 	EvaluateInteger 			; check integer is +ve
.8bd5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8bd8	30 01		bmi $8bdb			bmi 	HelperValueError
.8bda	60		rts				rts
.8bdb					HelperValueError:
.8bdb	4c 15 96	jmp $9615			jmp 	ArgumentError
.8bde					Evaluate16BitInteger:
.8bde	20 d2 8b	jsr $8bd2			jsr	 	EvaluateUnsignedInteger		; get integer
.8be1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8be4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8be7	d0 f2		bne $8bdb			bne 	HelperValueError
.8be9	60		rts				rts
.8bea					Evaluate8BitInteger:
.8bea	20 d2 8b	jsr $8bd2			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8bed	d0 ec		bne $8bdb			bne 	HelperValueError
.8bef	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8bf2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8bf5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8bf8	d0 e1		bne $8bdb			bne 	HelperValueError
.8bfa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8bfe					NSMNegate:
.8bfe	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c01	49 80		eor #$80			eor 	#NSBIsNegative
.8c03	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c06	60		rts				rts
.8c07					NSMNegateMantissa:
.8c07	38		sec				sec
.8c08	a9 00		lda #$00			lda 	#0
.8c0a	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8c0d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c10	a9 00		lda #$00			lda 	#0
.8c12	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8c15	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c18	a9 00		lda #$00			lda 	#0
.8c1a	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8c1d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c20	a9 00		lda #$00			lda 	#0
.8c22	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8c25	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c28	60		rts				rts
.8c29					NSMShiftUpTwo:
.8c29	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c2c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c2f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c32	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c35	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c38	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c3b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c3e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c41	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8c44	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c47	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c4a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c4d	60		rts				rts
.8c4e					NSMSetZeroMantissaOnly:
.8c4e	a9 00		lda #$00			lda 	#0
.8c50	80 08		bra $8c5a			bra 	NSMSetMantissa
.8c52					NSMSetZero:
.8c52	a9 00		lda #$00			lda 	#0
.8c54					NSMSetByte:
.8c54	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8c57	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8c5a					NSMSetMantissa:
.8c5a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8c5d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8c60	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c63	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c66	60		rts				rts
.8c67					NSMShiftLeft:
.8c67	18		clc				clc
.8c68					NSMRotateLeft:
.8c68	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8c6b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8c6e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8c71	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8c74	60		rts				rts
.8c75					NSMShiftRight:
.8c75	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8c78	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8c7b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8c7e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8c81	60		rts				rts
.8c82					NSMIsZero:
.8c82	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c85	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8c88	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8c8b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8c8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.95cf					DecimalScalarTable:
>95cf	66 66 66 66				.dword $66666666 ; 0.1
>95d3	de					.byte $de
>95d4	1f 85 eb 51				.dword $51eb851f ; 0.01
>95d8	db					.byte $db
>95d9	4c 37 89 41				.dword $4189374c ; 0.001
>95dd	d8					.byte $d8
>95de	ac 8b db 68				.dword $68db8bac ; 0.0001
>95e2	d4					.byte $d4
>95e3	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>95e7	d1					.byte $d1
>95e8	83 de 1b 43				.dword $431bde83 ; 1e-06
>95ec	ce					.byte $ce
>95ed	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>95f1	ca					.byte $ca
>95f2	89 3b e6 55				.dword $55e63b89 ; 1e-08
>95f6	c7					.byte $c7
>95f7	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>95fb	c4					.byte $c4
>95fc	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9600	c0					.byte $c0
>9601	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9605	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9606					SyntaxError:
.9606	a9 02		lda #$02		lda	#2
.9608	4c 5f 82	jmp $825f		jmp	ErrorHandler
.960b					RangeError:
.960b	a9 04		lda #$04		lda	#4
.960d	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9610					TypeError:
.9610	a9 05		lda #$05		lda	#5
.9612	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9615					ArgumentError:
.9615	a9 07		lda #$07		lda	#7
.9617	4c 5f 82	jmp $825f		jmp	ErrorHandler
.961a					NotDoneError:
.961a	a9 0c		lda #$0c		lda	#12
.961c	4c 5f 82	jmp $825f		jmp	ErrorHandler
.961f					ErrorText:
>961f	42 72 65 61 6b 00			.text	"Break",0
>9625	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>962d	72 72 6f 72 00
>9632	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>963a	20 62 79 20 7a 65 72 6f 00
>9643	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>964b	61 6e 67 65 00
>9650	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9658	6d 61 74 63 68 00
>965e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9666	65 6d 6f 72 79 00
>966c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9674	61 72 67 75 6d 65 6e 74 00
>967d	53 74 6f 70 00				.text	"Stop",0
>9682	53 74 72 69 6e 67 20 74			.text	"String too long",0
>968a	6f 6f 20 6c 6f 6e 67 00
>9692	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>969a	6e 20 66 61 69 6c 65 64 00
>96a3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>96ab	61 74 61 00
>96af	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>96b7	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.96bd					StringSystemInitialise:
.96bd	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.96bf	8d 0e 07	sta $070e			sta 	0+StringMemory
.96c2	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.96c4	8d 0f 07	sta $070f			sta 	1+StringMemory
.96c7	60		rts				rts
.96c8					StringSpaceInitialise:
.96c8	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.96ca	8d 10 07	sta $0710			sta 	StringInitialised
.96cd	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.96d0	8d 11 07	sta $0711			sta 	StringTempPointer
.96d3	ad 0f 07	lda $070f			lda 	StringMemory+1
.96d6	3a		dec a				dec 	a
.96d7	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96da	60		rts				rts
.96db					StringTempAllocate:
.96db	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.96dd	b0 35		bcs $9714			bcs 	_STALength
.96df	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.96e2	30 05		bmi $96e9			bmi 	_STAAllocate
.96e4	48		pha				pha 								; save value to subtract.
.96e5	20 c8 96	jsr $96c8			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.96e8	68		pla				pla 								; restore it
.96e9					_STAAllocate:
.96e9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.96eb	18		clc				clc  								; deliberate allows one more
.96ec	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.96ef	8d 11 07	sta $0711			sta 	StringTempPointer
.96f2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.96f5	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.96f7	ad 12 07	lda $0712			lda 	StringTempPointer+1
.96fa	69 ff		adc #$ff			adc 	#$FF
.96fc	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96ff	85 3d		sta $3d				sta 	zsTemp+1
.9701	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9704	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9707	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.970a	a9 10		lda #$10			lda 	#NSTString
.970c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.970f	a9 00		lda #$00			lda 	#0 							; clear the target string
.9711	92 3c		sta ($3c)			sta 	(zsTemp)
.9713	60		rts				rts
.9714					_STALength:
.9714	a9 09		lda #$09		lda	#9
.9716	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9719					StringTempWrite:
.9719	48		pha				pha
.971a	92 3c		sta ($3c)			sta 	(zsTemp)
.971c	e6 3c		inc $3c				inc 	zsTemp
.971e	d0 02		bne $9722			bne 	_STWNoCarry
.9720	e6 3d		inc $3d				inc 	zsTemp+1
.9722					_STWNoCarry:
.9722	a9 00		lda #$00			lda 	#0
.9724	92 3c		sta ($3c)			sta 	(zsTemp)
.9726	68		pla				pla
.9727	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8c8f					BackloadProgram:
.8c8f	a2 ff		ldx #$ff			ldx 	#$FF
.8c91	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8c94	20 bb 8c	jsr $8cbb			jsr 	BLReadByte
.8c97	30 1e		bmi $8cb7			bmi 	_BPExit
.8c99					_BPCopy:
.8c99	e8		inx				inx  								; copy byte in
.8c9a	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8c9d	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8ca0	20 bb 8c	jsr $8cbb			jsr 	BLReadByte 					; read next byte
.8ca3	30 0a		bmi $8caf			bmi 	_BPEndLine 					; -ve = EOL
.8ca5	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ca7	d0 02		bne $8cab			bne 	_BPNotTab
.8ca9	a9 20		lda #$20			lda 	#' '
.8cab					_BPNotTab:
.8cab	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8cad	b0 ea		bcs $8c99			bcs 	_BPCopy
.8caf					_BPEndLine:
.8caf	20 77 8e	jsr $8e77			jsr 	TokeniseLine 				; tokenise the line.
.8cb2	20 09 91	jsr $9109			jsr 	MemoryAppend 				; append to current program
.8cb5	80 d8		bra $8c8f			bra 	BackloadProgram
.8cb7					_BPExit:
.8cb7	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8cba	60		rts				rts
.8cbb					BLReadByte:
.8cbb					_BLLoad:
.8cbb	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8cbe	ee bc 8c	inc $8cbc			inc 	_BLLoad+1
.8cc1	d0 03		bne $8cc6			bne 	_BLNoCarry
.8cc3	ee bd 8c	inc $8cbd			inc 	_BLLoad+2
.8cc6					_BLNoCarry:
.8cc6	c9 00		cmp #$00			cmp 	#0
.8cc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8cc9					TokeniseSearchTable:
.8cc9	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8ccb	85 36		sta $36				sta 	zTemp0
.8ccd	a0 00		ldy #$00			ldy 	#0
.8ccf	a9 80		lda #$80			lda 	#$80 						; token #
.8cd1	85 38		sta $38				sta 	zTemp1
.8cd3					_TSTLoop:
.8cd3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8cd5	30 49		bmi $8d20			bmi 	_TSTFail 					; -ve = end of table
.8cd7	f0 2e		beq $8d07			beq 	_TSTNext 					; zero, check next it's a dummy
.8cd9	c8		iny				iny 								; get the hash
.8cda	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cdc	88		dey				dey
.8cdd	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8ce0	d0 25		bne $8d07			bne 	_TSTNext
.8ce2	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8ce5	38		sec				sec
.8ce6	ed 00 07	sbc $0700			sbc 	identStart
.8ce9	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8ceb	d0 1a		bne $8d07			bne 	_TSTNext
.8ced	5a		phy				phy 								; save Y , we might fail
.8cee	c8		iny				iny 								; point to text
.8cef	c8		iny				iny
.8cf0	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8cf3					_TSTCompareName:
.8cf3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8cf6	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8cf8	d0 0c		bne $8d06			bne 	_TSTNextPullY 				; fail, pullY and do next
.8cfa	e8		inx				inx
.8cfb	c8		iny				iny
.8cfc	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8cff	d0 f2		bne $8cf3			bne 	_TSTCompareName
.8d01	7a		ply				ply 								; throw Y
.8d02	a5 38		lda $38				lda 	zTemp1 						; get token #
.8d04	38		sec				sec 								; return with CS = passed.
.8d05	60		rts				rts
.8d06					_TSTNextPullY:
.8d06	7a		ply				ply 								; restore current, fall through.
.8d07					_TSTNext:
.8d07	e6 38		inc $38				inc 	zTemp1 						; token counter
.8d09	98		tya				tya
.8d0a	18		clc				clc
.8d0b	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8d0d	1a		inc a				inc 	a 							; +1
.8d0e	1a		inc a				inc 	a 							; +2
.8d0f	a8		tay				tay
.8d10	10 c1		bpl $8cd3			bpl 	_TSTLoop 					; if Y < $80 loop back
.8d12	98		tya				tya 								; add Y to zTemp0 and reset Y
.8d13	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8d15	18		clc				clc  								; but have tables > 255 bytes
.8d16	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8d18	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8d1a	90 b7		bcc $8cd3			bcc 	_TSTLoop
.8d1c	e6 37		inc $37				inc 	zTemp0+1
.8d1e	80 b3		bra $8cd3			bra 	_TSTLoop
.8d20					_TSTFail:
.8d20	18		clc				clc
.8d21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8d22					KeywordSet0:
>8d22	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d24	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d26	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d28	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8d2e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8d36	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8d3c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8d43	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8d4a	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8d51	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8d57	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8d5f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8d67	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8d6d	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8d74	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8d7a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8d82	28
>8d83	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8d89	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8d8f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8d95	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8d9c	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8da2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8da8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8dad	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8db1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8db7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8dbf	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8dc6	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8dcd	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8dd5	43
>8dd6	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8ddc	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8de3	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8de9	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8def	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8df4	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8dfa	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8dff	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8e06	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8e0c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8e11	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8e18	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8e1e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8e23	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8e2b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8e31	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8e35	ff					.text	$FF
.8e36					KeywordSet1:
>8e36	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e38	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e3a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e3c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8e44	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8e4b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8e50	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8e56	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8e5b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8e63	45
>8e64	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8e69	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8e6f	ff					.text	$FF
.8e70					KeywordSet2:
>8e70	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e72	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e74	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e76	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8e77					TokeniseLine:
.8e77	20 ff 8f	jsr $8fff			jsr 	FixLineBufferCase 			; fix line case
.8e7a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8e7c	8d 15 07	sta $0715			sta 	tokenOffset
.8e7f	9c 16 07	stz $0716			stz 	tokenLineNumber
.8e82	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8e85	a2 ff		ldx #$ff			ldx 	#$FF
.8e87					_TKFindFirst:
.8e87	e8		inx				inx
.8e88	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e8b	f0 79		beq $8f06			beq 	_TKExit
.8e8d	c9 20		cmp #$20			cmp 	#' '
.8e8f	90 f6		bcc $8e87			bcc 	_TKFindFirst
.8e91	c9 30		cmp #$30			cmp 	#'0'
.8e93	90 07		bcc $8e9c			bcc 	_TKNoLineNumber
.8e95	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e97	b0 03		bcs $8e9c			bcs 	_TKNoLineNumber
.8e99	20 29 90	jsr $9029			jsr 	TokeniseExtractLineNumber
.8e9c					_TKNoLineNumber:
.8e9c					_TKTokeniseLoop:
.8e9c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8e9f	f0 65		beq $8f06			beq 	_TKExit
.8ea1	e8		inx				inx
.8ea2	c9 20		cmp #$20			cmp 	#' '
.8ea4	f0 f6		beq $8e9c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8ea6	ca		dex				dex 								; undo last get, A contains character, X is position.
.8ea7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8ea9	f0 61		beq $8f0c			beq 	_TKTokeniseIdentifier
.8eab	c9 41		cmp #$41			cmp 	#'A'
.8ead	90 04		bcc $8eb3			bcc 	_TKTokenisePunctuation
.8eaf	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8eb1	90 59		bcc $8f0c			bcc 	_TKTokeniseIdentifier
.8eb3					_TKTokenisePunctuation:
.8eb3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8eb5	f0 27		beq $8ede			beq 	_TKString
.8eb7	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8eb9	f0 28		beq $8ee3			beq 	_TKHexConstant
.8ebb	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8ebd	f0 29		beq $8ee8			beq 	_TKCheckDouble
.8ebf	c9 3e		cmp #$3e			cmp 	#'>'
.8ec1	f0 25		beq $8ee8			beq 	_TKCheckDouble
.8ec3					_TKStandardPunctuation:
.8ec3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8ec6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8ec8	90 0e		bcc $8ed8			bcc 	_TKNoShift
.8eca	48		pha				pha 								; save
.8ecb	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8ecd	85 36		sta $36				sta 	zTemp0
.8ecf	68		pla				pla
.8ed0	29 20		and #$20			and 	#32 						; bit 5
.8ed2	4a		lsr a				lsr 	a 							; shift into bit 3
.8ed3	4a		lsr a				lsr 	a
.8ed4	05 36		ora $36				ora 	zTemp0
.8ed6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8ed8					_TKNoShift:
.8ed8	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte 			; write the punctuation character
.8edb	e8		inx				inx 								; consume the character
.8edc	80 be		bra $8e9c			bra 	_TKTokeniseLoop 			; and loop round again.
.8ede					_TKString:
.8ede	20 8e 8f	jsr $8f8e			jsr 	TokeniseString
.8ee1	80 b9		bra $8e9c			bra 	_TKTokeniseLoop
.8ee3					_TKHexConstant:
.8ee3	20 c9 8f	jsr $8fc9			jsr 	TokeniseHexConstant
.8ee6	80 b4		bra $8e9c			bra 	_TKTokeniseLoop
.8ee8					_TKCheckDouble:
.8ee8	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8eeb	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8eed	90 d4		bcc $8ec3			bcc 	_TKStandardPunctuation
.8eef	c9 3f		cmp #$3f			cmp 	#'>'+1
.8ef1	b0 d0		bcs $8ec3			bcs 	_TKStandardPunctuation
.8ef3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8ef6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8ef8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8ef9	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8efc	38		sec				sec
.8efd	e9 3c		sbc #$3c			sbc 	#'<'
.8eff	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8f02	e8		inx				inx 								; consume both
.8f03	e8		inx				inx
.8f04	80 96		bra $8e9c			bra 	_TKTokeniseLoop
.8f06	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8f08	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8f0b	60		rts				rts
.8f0c					_TKTokeniseIdentifier:
.8f0c	8e 00 07	stx $0700			stx 	identStart 					; save start
.8f0f	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8f12					_TKCheckLoop:
.8f12	e8		inx				inx 								; look at next, we know first is identifier.
.8f13	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8f16	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8f18	f0 f8		beq $8f12			beq 	_TKCheckLoop
.8f1a	c9 30		cmp #$30			cmp	 	#"0"
.8f1c	90 0c		bcc $8f2a			bcc 	_TKEndIdentifier
.8f1e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f20	90 f0		bcc $8f12			bcc 	_TKCheckLoop
.8f22	c9 41		cmp #$41			cmp	 	#"A"
.8f24	90 04		bcc $8f2a			bcc 	_TKEndIdentifier
.8f26	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8f28	90 e8		bcc $8f12			bcc 	_TKCheckLoop
.8f2a					_TKEndIdentifier:
.8f2a	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8f2d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8f2f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8f31	f0 06		beq $8f39			beq 	_TKHasTypeCharacter
.8f33	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8f35	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8f37	d0 07		bne $8f40			bne 	_TKNoTypeCharacter
.8f39					_TKHasTypeCharacter:
.8f39	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8f3c	e8		inx				inx 								; read next
.8f3d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f40					_TKNoTypeCharacter:
.8f40	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8f42	d0 09		bne $8f4d			bne 	_TKNoArray
.8f44	e8		inx				inx 								; skip the (
.8f45	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8f48	09 04		ora #$04			ora 	#$04
.8f4a	8d 04 07	sta $0704			sta 	identTypeByte
.8f4d					_TKNoArray:
.8f4d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8f50	20 ea 8f	jsr $8fea			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8f53	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.8f55	a9 22		lda #$22			lda 	#(KeywordSet0) & $FF
.8f57	20 c9 8c	jsr $8cc9			jsr 	TokeniseSearchTable
.8f5a	a2 00		ldx #$00			ldx 	#0
.8f5c	b0 1f		bcs $8f7d			bcs 	_TKFoundToken
.8f5e	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8f60	a9 36		lda #$36			lda 	#(KeywordSet1) & $FF
.8f62	20 c9 8c	jsr $8cc9			jsr 	TokeniseSearchTable
.8f65	a2 81		ldx #$81			ldx 	#$81
.8f67	b0 14		bcs $8f7d			bcs 	_TKFoundToken
.8f69	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8f6b	a9 36		lda #$36			lda 	#(KeywordSet1) & $FF
.8f6d	20 c9 8c	jsr $8cc9			jsr 	TokeniseSearchTable
.8f70	a2 82		ldx #$82			ldx 	#$82
.8f72	b0 09		bcs $8f7d			bcs 	_TKFoundToken
.8f74	20 7a 90	jsr $907a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8f77	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f7a	4c 9c 8e	jmp $8e9c			jmp 	_TKTokeniseLoop 			; and go round again.
.8f7d					_TKFoundToken:
.8f7d	48		pha				pha 								; save token
.8f7e	8a		txa				txa 								; shift in X, is there one ?
.8f7f	f0 03		beq $8f84			beq 	_TKNoTShift
.8f81	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte 			; if so, write it out
.8f84					_TKNoTShift:
.8f84	68		pla				pla 								; restore and write token
.8f85	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8f88	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f8b	4c 9c 8e	jmp $8e9c			jmp 	_TKTokeniseLoop 			; and go round again.
.8f8e					TokeniseString:
.8f8e	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8f90	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8f93	e8		inx				inx									; start of quoted string.
.8f94	da		phx				phx 								; push start of string on top
.8f95	ca		dex				dex
.8f96					_TSFindEnd:
.8f96	e8		inx				inx
.8f97	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8f9a	f0 04		beq $8fa0			beq 	_TSEndOfString
.8f9c	c9 22		cmp #$22			cmp 	#'"'
.8f9e	d0 f6		bne $8f96			bne 	_TSFindEnd
.8fa0					_TSEndOfString:
.8fa0	7a		ply				ply  								; so now Y is first character, X is character after end.
.8fa1	48		pha				pha 								; save terminating character
.8fa2	20 aa 8f	jsr $8faa			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8fa5	68		pla				pla 								; terminating character
.8fa6	f0 01		beq $8fa9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8fa8	e8		inx				inx
.8fa9					_TSNotQuote:
.8fa9	60		rts				rts
.8faa					TOWriteBlockXY:
.8faa	86 36		stx $36				stx 	zTemp0 						; write end character
.8fac	98		tya				tya
.8fad	49 ff		eor #$ff			eor 	#$FF
.8faf	38		sec				sec
.8fb0	65 36		adc $36				adc 	zTemp0
.8fb2	1a		inc a				inc 	a 							; one extra for NULL
.8fb3	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8fb6					_TOBlockLoop:
.8fb6	c4 36		cpy $36				cpy 	zTemp0
.8fb8	f0 09		beq $8fc3			beq 	_TOBlockExit
.8fba	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8fbd	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8fc0	c8		iny				iny
.8fc1	80 f3		bra $8fb6			bra 	_TOBlockLoop
.8fc3					_TOBlockExit:
.8fc3	a9 00		lda #$00			lda 	#0
.8fc5	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8fc8	60		rts				rts
.8fc9					TokeniseHexConstant:
.8fc9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8fcb	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.8fce	e8		inx				inx									; start of quoted string.
.8fcf	da		phx				phx 								; push start of constant on top
.8fd0	ca		dex				dex
.8fd1					_THFindLoop:
.8fd1	e8		inx				inx
.8fd2	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8fd5	c9 30		cmp #$30			cmp 	#"0"
.8fd7	90 0c		bcc $8fe5			bcc 	_THFoundEnd
.8fd9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fdb	90 f4		bcc $8fd1			bcc 	_THFindLoop
.8fdd	c9 41		cmp #$41			cmp 	#"A"
.8fdf	90 04		bcc $8fe5			bcc 	_THFoundEnd
.8fe1	c9 47		cmp #$47			cmp 	#"F"+1
.8fe3	90 ec		bcc $8fd1			bcc 	_THFindLoop
.8fe5					_THFoundEnd:
.8fe5	7a		ply				ply 								; restore start
.8fe6	20 aa 8f	jsr $8faa			jsr 	TOWriteBlockXY 				; output the block
.8fe9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.8fea					TokeniseCalculateHash:
.8fea	da		phx				phx
.8feb	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8fee	a9 00		lda #$00			lda 	#0
.8ff0					_TCHLoop:
.8ff0	18		clc				clc
.8ff1	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8ff4	e8		inx				inx
.8ff5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8ff8	d0 f6		bne $8ff0			bne 	_TCHLoop
.8ffa	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8ffd	fa		plx				plx
.8ffe	60		rts				rts
.8fff					FixLineBufferCase:
.8fff	a2 00		ldx #$00			ldx 	#0
.9001					_FLBCLoop:
.9001	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9004	f0 22		beq $9028			beq 	_FLBCExit 					; end of string.
.9006	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9008	f0 11		beq $901b			beq 	_FLBCInQuotes
.900a	e8		inx				inx
.900b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.900d	90 f2		bcc $9001			bcc 	_FLBCLoop
.900f	c9 7b		cmp #$7b			cmp 	#'z'+1
.9011	b0 ee		bcs $9001			bcs 	_FLBCLoop
.9013	38		sec				sec 								; make U/C
.9014	e9 20		sbc #$20			sbc 	#32
.9016	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9019	80 e6		bra $9001			bra 	_FLBCLoop
.901b					_FLBCInQuotes:
.901b	e8		inx				inx 								; advance
.901c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.901f	f0 07		beq $9028			beq 	_FLBCExit 					; exit on EOS
.9021	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9023	d0 f6		bne $901b			bne 	_FLBCInQuotes
.9025	e8		inx				inx 								; skip over it
.9026	80 d9		bra $9001			bra 	_FLBCLoop
.9028					_FLBCExit:
.9028	60		rts				rts
.9029					TokeniseExtractLineNumber:
.9029	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.902c	48		pha				pha
.902d	ad 16 07	lda $0716			lda 	tokenLineNumber
.9030	48		pha				pha
.9031	20 67 90	jsr $9067			jsr 	_TELNTimes2 				; line # x 4
.9034	20 67 90	jsr $9067			jsr 	_TELNTimes2 				; line # x 2
.9037	18		clc				clc 								; add stacked value
.9038	68		pla				pla
.9039	6d 16 07	adc $0716			adc 	tokenLineNumber
.903c	8d 16 07	sta $0716			sta 	tokenLineNumber
.903f	68		pla				pla
.9040	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9043	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9046	20 67 90	jsr $9067			jsr 	_TELNTimes2 				; line # x 10
.9049	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.904c	e8		inx				inx
.904d	29 0f		and #$0f			and 	#15 						; add to line #
.904f	18		clc				clc
.9050	6d 16 07	adc $0716			adc 	tokenLineNumber
.9053	8d 16 07	sta $0716			sta 	tokenLineNumber
.9056	90 03		bcc $905b			bcc 	_TLENNoCarry
.9058	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.905b					_TLENNoCarry:
.905b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.905e	c9 30		cmp #$30			cmp 	#'0'
.9060	90 04		bcc $9066			bcc 	_TLENExit
.9062	c9 3a		cmp #$3a			cmp 	#'9'+1
.9064	90 c3		bcc $9029			bcc 	TokeniseExtractLineNumber
.9066					_TLENExit:
.9066	60		rts				rts
.9067					_TELNTimes2:
.9067	0e 16 07	asl $0716			asl 	tokenLineNumber
.906a	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.906d	60		rts				rts
.906e					TokeniseWriteByte:
.906e	da		phx				phx
.906f	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9072	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9075	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9078	fa		plx				plx
.9079	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.907a					CheckCreateVariableRecord:
.907a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.907c	85 36		sta $36				sta 	0+zTemp0
.907e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9080	85 37		sta $37				sta 	1+zTemp0
.9082	20 4d 91	jsr $914d			jsr 	VariableOpen 				; make variable space available
.9085					_CCVSearch:
.9085	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9087	f0 2c		beq $90b5			beq 	_CCVFail
.9089	a0 01		ldy #$01			ldy 	#1 							; read the hash
.908b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.908d	cd 03 07	cmp $0703			cmp 	identHash
.9090	d0 16		bne $90a8			bne 	_CCVNext
.9092	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9094	ae 00 07	ldx $0700			ldx 	identStart
.9097					_CCVCompare:
.9097	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.909a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.909c	e8		inx				inx 								; advance pointers
.909d	c8		iny				iny
.909e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.909f	d0 07		bne $90a8			bne 	_CCVNext  					; didn't match go to next.
.90a1	90 f4		bcc $9097			bcc 	_CCVCompare 				; not finished yet.
.90a3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.90a6	f0 41		beq $90e9			beq 	_CCVFound 					; yes, we were successful
.90a8					_CCVNext:
.90a8	18		clc				clc
.90a9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.90ab	65 36		adc $36				adc 	zTemp0
.90ad	85 36		sta $36				sta 	zTemp0
.90af	90 d4		bcc $9085			bcc 	_CCVSearch
.90b1	e6 37		inc $37				inc 	zTemp0+1
.90b3	80 d0		bra $9085			bra 	_CCVSearch
.90b5					_CCVFail:
.90b5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.90b7	ad 03 07	lda $0703			lda 	identHash
.90ba	91 36		sta ($36),y			sta 	(zTemp0),y
.90bc	c8		iny				iny 								; offset 2 is the type byte
.90bd	ad 04 07	lda $0704			lda 	identTypeByte
.90c0	91 36		sta ($36),y			sta 	(zTemp0),y
.90c2	c8		iny				iny
.90c3					_CCVData:
.90c3	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.90c5	91 36		sta ($36),y			sta 	(zTemp0),y
.90c7	c8		iny				iny
.90c8	c0 08		cpy #$08			cpy 	#8
.90ca	90 f7		bcc $90c3			bcc 	_CCVData
.90cc	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.90cf					_CCVCopyName:
.90cf	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90d2	91 36		sta ($36),y			sta 	(zTemp0),y
.90d4	e8		inx				inx
.90d5	c8		iny				iny
.90d6	ec 02 07	cpx $0702			cpx 	identTypeEnd
.90d9	d0 f4		bne $90cf			bne 	_CCVCopyName
.90db	98		tya				tya 								; patch offset
.90dc	92 36		sta ($36)			sta 	(zTemp0)
.90de	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.90e0	91 36		sta ($36),y			sta 	(zTemp0),y
.90e2	88		dey				dey
.90e3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.90e5	09 80		ora #$80			ora 	#$80
.90e7	91 36		sta ($36),y			sta 	(zTemp0),y
.90e9					_CCVFound:
.90e9	20 4e 91	jsr $914e			jsr 	VariableClose 				; map out variables, perhaps.
.90ec	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.90ee	38		sec				sec
.90ef	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.90f1	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.90f3	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.90f6	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.90f8	20 6e 90	jsr $906e			jsr 	TokeniseWriteByte
.90fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9728					MemoryPeek:
.9728	b2 36		lda ($36)			lda 	(zTemp0)
.972a	60		rts				rts
.972b					MemoryPoke:
.972b	92 36		sta ($36)			sta 	(zTemp0)
.972d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.972e					EXTPrintCharacter:
.972e	48		pha				pha
.972f	da		phx				phx
.9730	5a		phy				phy
.9731	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9734	7a		ply				ply
.9735	fa		plx				plx
.9736	68		pla				pla
.9737	60		rts				rts
.9738					EXTInputSingleCharacter:
.9738	da		phx				phx
.9739	5a		phy				phy
.973a					_EISCWait:
.973a	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.973d	c9 00		cmp #$00			cmp 	#0
.973f	f0 f9		beq $973a			beq 	_EISCWait
.9741	7a		ply				ply
.9742	fa		plx				plx
.9743	60		rts				rts
.9744					EXTInputLine:
.9744	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9746					_ILLoop:
.9746	da		phx				phx 								; read character in
.9747	20 cf ff	jsr $ffcf			jsr 	$FFCF
.974a	fa		plx				plx
.974b	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.974d	f0 12		beq $9761			beq 	_ILBackspace
.974f	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9751	f0 15		beq $9768			beq 	_ILExit
.9753	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9755	90 ef		bcc $9746			bcc 	_ILLoop
.9757	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9759	f0 eb		beq $9746			beq 	_ILLoop
.975b	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.975e	e8		inx				inx
.975f	80 e5		bra $9746			bra 	_ILLoop
.9761					_ILBackspace:
.9761	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9763	f0 e1		beq $9746			beq 	_ILLoop
.9765	ca		dex				dex 								; back one.
.9766	80 de		bra $9746			bra 	_ILLoop
.9768					_ILExit:
.9768	20 2e 97	jsr $972e			jsr 	EXTPrintCharacter
.976b	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.976e	60		rts				rts
.976f					EXTBreakCheck:
.976f	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.90fc					MemoryNew:
.90fc	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.90fe	85 30		sta $30				sta 	codePtr
.9100	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9102	85 31		sta $31				sta 	codePtr+1
.9104	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9106	92 30		sta ($30)			sta 	(codePtr)
.9108	60		rts				rts
.9109					MemoryAppend:
.9109	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.910b	85 30		sta $30				sta 	codePtr
.910d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.910f	85 31		sta $31				sta 	codePtr+1
.9111					_MAFindEnd:
.9111	b2 30		lda ($30)			lda 	(codePtr)
.9113	f0 0d		beq $9122			beq 	_MAFoundEnd
.9115	18		clc				clc
.9116	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9118	65 30		adc $30				adc 	codePtr
.911a	85 30		sta $30				sta 	codePtr
.911c	90 02		bcc $9120			bcc 	_CREExit
.911e	e6 31		inc $31				inc 	codePtr+1
.9120					_CREExit:
.9120	80 ef		bra $9111			bra 	_MAFindEnd
.9122					_MAFoundEnd:
.9122	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9125	c0 04		cpy #$04			cpy 	#4 							; blank line
.9127	f0 0e		beq $9137			beq 	_MANoLine
.9129	a9 00		lda #$00			lda 	#0 							; end of program
.912b	91 30		sta ($30),y			sta 	(codePtr),y
.912d					_MACopy:
.912d	88		dey				dey
.912e	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9131	91 30		sta ($30),y			sta 	(codePtr),y
.9133	c0 00		cpy #$00			cpy 	#0
.9135	d0 f6		bne $912d			bne 	_MACopy
.9137					_MANoLine:
.9137	60		rts				rts
.9138					MemoryInline:
.9138	98		tya				tya 								; put address into stack,x
.9139	18		clc				clc
.913a	65 30		adc $30				adc 	codePtr
.913c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.913f	a5 31		lda $31				lda 	codePtr+1
.9141	69 00		adc #$00			adc 	#0
.9143	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9146	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9149	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.914c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.914d					VariableOpen:
.914d	60		rts				rts
.914e					VariableClose:
.914e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
