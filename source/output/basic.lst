
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 10:28:18 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					tokenOffset:
>071c							.fill 	1
.071d					tokenLineNumber:
>071d							.fill 	2
.071f					tokenBuffer:
>071f							.fill 	253
.081c					lineBuffer:
>081c							.fill 	MaxLineSize+1
.086d					numberBuffer:
>086d							.fill 	34
.088f					decimalBuffer:
>088f							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 7d 84	jsr $847d			jsr 	NewCommand 					; erase current program
.8006	20 5a 94	jsr $945a			jsr 	BackloadProgram
.8009	4c c9 85	jmp $85c9			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	14 8a					.word	ShiftLeft                        ; $00 <<
>8016	0e 89					.word	BinaryCompareLessEqual           ; $01 <=
>8018	04 89					.word	BinaryCompareNotEqual            ; $02 <>
>801a	33 9e					.word	SyntaxError                      ; $03 !!3
>801c	33 9e					.word	SyntaxError                      ; $04 ><
>801e	18 89					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	17 8a					.word	ShiftRight                       ; $06 >>
>8022	33 9e					.word	SyntaxError                      ; $07 !!7
>8024	33 9e					.word	SyntaxError                      ; $08 !!8
>8026	33 9e					.word	SyntaxError                      ; $09 !!9
>8028	33 9e					.word	SyntaxError                      ; $0a !!10
>802a	33 9e					.word	SyntaxError                      ; $0b !!11
>802c	33 9e					.word	SyntaxError                      ; $0c !!12
>802e	33 9e					.word	SyntaxError                      ; $0d !!13
>8030	33 9e					.word	SyntaxError                      ; $0e !!14
>8032	33 9e					.word	SyntaxError                      ; $0f !!15
>8034	33 9e					.word	SyntaxError                      ; $10 @
>8036	33 9e					.word	SyntaxError                      ; $11 !!17
>8038	33 9e					.word	SyntaxError                      ; $12 !!18
>803a	33 9e					.word	SyntaxError                      ; $13 [
>803c	7c 99					.word	IntegerDivide                    ; $14 \
>803e	33 9e					.word	SyntaxError                      ; $15 ]
>8040	9d 8b					.word	EorInteger                       ; $16 ^
>8042	33 9e					.word	SyntaxError                      ; $17 _
>8044	33 9e					.word	SyntaxError                      ; $18 `
>8046	33 9e					.word	SyntaxError                      ; $19 !!25
>8048	33 9e					.word	SyntaxError                      ; $1a !!26
>804a	33 9e					.word	SyntaxError                      ; $1b {
>804c	57 8b					.word	OraInteger                       ; $1c |
>804e	33 9e					.word	SyntaxError                      ; $1d }
>8050	33 9e					.word	SyntaxError                      ; $1e ~
>8052	33 9e					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	33 9e					.word	SyntaxError                      ; $20
>8056	e3 8b					.word	WordIndirect                     ; $21 !
>8058	33 9e					.word	SyntaxError                      ; $22 "
>805a	33 9e					.word	SyntaxError                      ; $23 #
>805c	33 9e					.word	SyntaxError                      ; $24 $
>805e	c9 99					.word	IntegerModulus                   ; $25 %
>8060	11 8b					.word	AndInteger                       ; $26 &
>8062	33 9e					.word	SyntaxError                      ; $27 '
>8064	33 9e					.word	SyntaxError                      ; $28 (
>8066	33 9e					.word	SyntaxError                      ; $29 )
>8068	3e 9a					.word	MulInteger                       ; $2a *
>806a	ab 8a					.word	AddInteger                       ; $2b +
>806c	33 9e					.word	SyntaxError                      ; $2c ,
>806e	e6 8a					.word	SubInteger                       ; $2d -
>8070	33 9e					.word	SyntaxError                      ; $2e .
>8072	d5 9b					.word	FDivideCommand                   ; $2f /
>8074	33 9e					.word	SyntaxError                      ; $30 0
>8076	33 9e					.word	SyntaxError                      ; $31 1
>8078	33 9e					.word	SyntaxError                      ; $32 2
>807a	33 9e					.word	SyntaxError                      ; $33 3
>807c	33 9e					.word	SyntaxError                      ; $34 4
>807e	33 9e					.word	SyntaxError                      ; $35 5
>8080	33 9e					.word	SyntaxError                      ; $36 6
>8082	33 9e					.word	SyntaxError                      ; $37 7
>8084	33 9e					.word	SyntaxError                      ; $38 8
>8086	33 9e					.word	SyntaxError                      ; $39 9
>8088	33 9e					.word	SyntaxError                      ; $3a :
>808a	33 9e					.word	SyntaxError                      ; $3b ;
>808c	f0 88					.word	BinaryCompareLess                ; $3c <
>808e	e6 88					.word	BinaryCompareEqual               ; $3d =
>8090	fa 88					.word	BinaryCompareGreater             ; $3e >
>8092	0a 8c					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	1e 86					.word	EOLCommand                       ; $80 !0:EOF
>8096	2b 86					.word	Shift1Command                    ; $81 !1:SH1
>8098	33 9e					.word	SyntaxError                      ; $82 !2:SH2
>809a	1b 9d					.word	AbsUnary                         ; $83 ABS(
>809c	d4 90					.word	AllocUnary                       ; $84 ALLOC(
>809e	2b 9d					.word	AscUnary                         ; $85 ASC(
>80a0	8f 91					.word	ChrUnary                         ; $86 CHR$(
>80a2	e2 88					.word	UnaryFalse                       ; $87 FALSE
>80a4	38 9d					.word	FracUnary                        ; $88 FRAC(
>80a6	4e 9d					.word	IntUnary                         ; $89 INT(
>80a8	a4 9d					.word	IsValUnary                       ; $8a ISVAL(
>80aa	69 92					.word	Unary_Left                       ; $8b LEFT$(
>80ac	60 9d					.word	LenUnary                         ; $8c LEN(
>80ae	93 92					.word	Unary_Mid                        ; $8d MID$(
>80b0	2c 91					.word	Unary_Not                        ; $8e NOT(
>80b2	79 92					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	42 91					.word	Unary_Rnd                        ; $90 RND(
>80b6	7a 9d					.word	SgnUnary                         ; $91 SGN(
>80b8	a1 91					.word	SpcUnary                         ; $92 SPC(
>80ba	bc 91					.word	Unary_Str                        ; $93 STR$(
>80bc	d6 88					.word	UnaryTrue                        ; $94 TRUE
>80be	9a 9d					.word	ValUnary                         ; $95 VAL(
>80c0	40 82					.word	ForCommand                       ; $96 FOR
>80c2	84 83					.word	IfCommand                        ; $97 IF
>80c4	33 86					.word	Unused1                          ; $98 PROC
>80c6	75 85					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	3b 88					.word	Command_WHILE                    ; $9a WHILE
>80ca	ad 83					.word	EndIf                            ; $9b ENDIF
>80cc	55 99					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	fa 82					.word	NextCommand                      ; $9d NEXT
>80d0	33 86					.word	Unused4                          ; $9e THEN
>80d2	7e 85					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	5c 88					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	33 9e					.word	SyntaxError                      ; $a2 CLS
>80da	78 81					.word	Command_Data                     ; $a3 DATA
>80dc	80 81					.word	DimCommand                       ; $a4 DIM
>80de	33 86					.word	Unused3                          ; $a5 DOWNTO
>80e0	a6 83					.word	ElseCode                         ; $a6 ELSE
>80e2	53 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	71 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	ae 83					.word	LetCommand                       ; $a9 LET
>80e8	87 84					.word	Command_Print                    ; $aa PRINT
>80ea	0f 85					.word	Command_Read                     ; $ab READ
>80ec	68 85					.word	RemCommand                       ; $ac REM
>80ee	63 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	33 86					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	33 9e					.word	SyntaxError                      ; $80 !0:EOF
>80f4	33 9e					.word	SyntaxError                      ; $81 !1:SH1
>80f6	33 9e					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	3d 82					.word	EndCommand                       ; $85 END
>80fe	e7 83					.word	Command_List                     ; $86 LIST
>8100	7d 84					.word	NewCommand                       ; $87 NEW
>8102	97 85					.word	Command_Restore                  ; $88 RESTORE
>8104	c9 85					.word	CommandRUN                       ; $89 RUN
>8106	36 86					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	33 9e					.word	SyntaxError                      ; $80 !0:EOF
>810a	33 9e					.word	SyntaxError                      ; $81 !1:SH1
>810c	33 9e					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 34 93	jsr $9334			jsr 	EvaluateInteger 			; the assert test
.8113	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 6a 88	jmp $886a		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 4d 94	jsr $944d			jsr 	StackReset
.816e	20 0c a0	jsr $a00c			jsr 	StringSystemInitialise
.8171	20 8a 87	jsr $878a			jsr 	ProcedureScan
.8174	20 97 85	jsr $8597			jsr 	Command_Restore
.8177	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8178					Command_Data:
.8178	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.817a	a2 80		ldx #$80			ldx 	#KWC_EOL
.817c	20 dc 87	jsr $87dc			jsr 	ScanForward
.817f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8180					DimCommand:
.8180	b1 30		lda ($30),y			lda 	(codePtr),y
.8182	29 c0		and #$c0			and 	#$C0
.8184	c9 40		cmp #$40			cmp 	#$40
.8186	d0 7a		bne $8202			bne 	_DCSyntax
.8188	b1 30		lda ($30),y			lda 	(codePtr),y
.818a	18		clc				clc
.818b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.818d	85 3f		sta $3f				sta 	zaTemp+1
.818f	c8		iny				iny
.8190	b1 30		lda ($30),y			lda 	(codePtr),y
.8192	c8		iny				iny
.8193	85 3e		sta $3e				sta 	zaTemp
.8195	5a		phy				phy
.8196	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8198	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.819c	c9 18		cmp #$18			cmp 	#NSTProcedure
.819e	f0 62		beq $8202			beq 	_DCSyntax
.81a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.81a2	29 04		and #$04			and 	#NSBIsArray
.81a4	f0 64		beq $820a			beq 	_DCType
.81a6	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.81a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81aa	d0 59		bne $8205			bne 	_DCRedefine
.81ac	7a		ply				ply
.81ad	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get array size, check it.
.81b0	5a		phy				phy
.81b1	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81b3	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81b5	7a		ply				ply 							; is there a second (e.g. ,x)
.81b6	b1 30		lda ($30),y			lda 	(codePtr),y
.81b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81ba	d0 0a		bne $81c6			bne 	_DCOneDimension
.81bc	c8		iny				iny 							; skip comma
.81bd	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get 2nd array size
.81c0	5a		phy				phy
.81c1	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81c3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81c5	7a		ply				ply
.81c6					_DCOneDimension:
.81c6	5a		phy				phy 							; save position
.81c7	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81c9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cb	aa		tax				tax
.81cc	c8		iny				iny
.81cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cf	e8		inx				inx 							; bump them.
.81d0	1a		inc a				inc 	a
.81d1	20 e5 9d	jsr $9de5			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81d4	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81d6	29 e0		and #$e0			and 	#$E0
.81d8	d0 23		bne $81fd			bne 	_DCSize
.81da	a0 02		ldy #$02			ldy 	#2 						; get base type
.81dc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81de	20 1b 82	jsr $821b			jsr 	ScaleByBaseType 		; scale by base type
.81e1	a5 36		lda $36				lda 	zTemp0
.81e3	a6 37		ldx $37				ldx 	zTemp0+1
.81e5	20 f3 90	jsr $90f3			jsr 	AllocateXABytes 		; allocate memory
.81e8	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81ea	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ec	c8		iny				iny
.81ed	8a		txa				txa
.81ee	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81f0	7a		ply				ply 							; get position back
.81f1	20 63 99	jsr $9963			jsr 	CheckRightBracket 		; check )
.81f4	b1 30		lda ($30),y			lda 	(codePtr),y
.81f6	c8		iny				iny 							; consume in case
.81f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81f9	f0 85		beq $8180			beq 	DimCommand
.81fb	88		dey				dey 							; undo consume
.81fc	60		rts				rts
.81fd					_DCSize:
.81fd	a9 16		lda #$16		lda	#22
.81ff	4c 6a 88	jmp $886a		jmp	ErrorHandler
.8202					_DCSyntax:
.8202	4c 33 9e	jmp $9e33			jmp 	SyntaxError
.8205					_DCRedefine:
.8205	a9 15		lda #$15		lda	#21
.8207	4c 6a 88	jmp $886a		jmp	ErrorHandler
.820a					_DCType:
.820a	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.820d					_DCGetSize:
.820d	a2 00		ldx #$00			ldx 	#0 						; get first index.
.820f	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger 	; get array dimension
.8212	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8214	f0 e7		beq $81fd			beq 	_DCSize
.8216	c9 fe		cmp #$fe			cmp 	#254
.8218	f0 e3		beq $81fd			beq 	_DCSize
.821a	60		rts				rts
.821b					ScaleByBaseType:
.821b	29 10		and #$10			and 	#NSBIsString 			; is it string
.821d	d0 19		bne $8238			bne 	_SBBTString
.821f	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8221	48		pha				pha
.8222	a5 36		lda $36				lda 	zTemp0
.8224	48		pha				pha
.8225	06 36		asl $36				asl 	zTemp0 					; x 2
.8227	26 37		rol $37				rol 	zTemp0+1
.8229	06 36		asl $36				asl 	zTemp0 					; x 4
.822b	26 37		rol $37				rol 	zTemp0+1
.822d	68		pla				pla 							; add stacked value = x 5
.822e	65 36		adc $36				adc 	zTemp0
.8230	85 36		sta $36				sta 	zTemp0
.8232	68		pla				pla
.8233	65 37		adc $37				adc 	zTemp0+1
.8235	85 37		sta $37				sta 	zTemp0+1
.8237	60		rts				rts
.8238					_SBBTString:
.8238	06 36		asl $36				asl 	zTemp0
.823a	26 37		rol $37				rol 	zTemp0+1
.823c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.823d					EndCommand:
.823d	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8240					ForCommand:
.8240	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8242	20 fa 93	jsr $93fa			jsr 	StackOpen
.8245	a2 00		ldx #$00			ldx 	#0
.8247	20 44 8f	jsr $8f44			jsr 	EvaluateTerm
.824a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.824d	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.824f	d0 49		bne $829a			bne		_FCError
.8251	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8253	20 73 99	jsr $9973			jsr 	CheckNextA
.8256	e8		inx				inx
.8257	20 34 93	jsr $9334			jsr 	EvaluateInteger 			; <from> in +1
.825a	b1 30		lda ($30),y			lda 	(codePtr),y
.825c	c8		iny				iny 								; consume it
.825d	48		pha				pha 								; save on stack for later
.825e	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8260	f0 04		beq $8266			beq 	_FCNoSyntax
.8262	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8264	d0 37		bne $829d			bne 	_FCSyntaxError
.8266					_FCNoSyntax:
.8266	e8		inx				inx
.8267	20 34 93	jsr $9334			jsr 	EvaluateInteger
.826a	20 2c 94	jsr $942c			jsr 	STKSaveCodePosition 		; save loop back position
.826d	68		pla				pla 								; restore DOWNTO or TO
.826e	5a		phy				phy 								; save Y on the stack
.826f	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8271	f0 02		beq $8275			beq 	_FCNotDownTo
.8273	a9 02		lda #$02			lda 	#2
.8275					_FCNotDownTo:
.8275	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8276	a0 10		ldy #$10			ldy 	#16
.8278	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.827a	a0 06		ldy #$06			ldy 	#6
.827c	ad 08 06	lda $0608			lda 	NSMantissa0
.827f	91 34		sta ($34),y			sta 	(basicStack),y
.8281	ad 10 06	lda $0610			lda 	NSMantissa1
.8284	c8		iny				iny
.8285	91 34		sta ($34),y			sta 	(basicStack),y
.8287	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8289	a2 01		ldx #$01			ldx 	#1
.828b	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.828e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8290	a2 02		ldx #$02			ldx 	#2
.8292	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.8295	20 c0 82	jsr $82c0			jsr 	CopyIndexToReference
.8298	7a		ply				ply 								; restore position
.8299	60		rts				rts
.829a					_FCError:
.829a	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.829d					_FCSyntaxError:
.829d	4c 33 9e	jmp $9e33			jmp 	SyntaxError
.82a0					FCIntegerToStack:
.82a0	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.82a3	10 03		bpl $82a8			bpl	 	_FCNotNegative
.82a5	20 72 93	jsr $9372			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.82a8					_FCNotNegative:
.82a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82ab	91 34		sta ($34),y			sta 	(basicStack),y
.82ad	c8		iny				iny
.82ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82b1	91 34		sta ($34),y			sta 	(basicStack),y
.82b3	c8		iny				iny
.82b4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82b7	91 34		sta ($34),y			sta 	(basicStack),y
.82b9	c8		iny				iny
.82ba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82bd	91 34		sta ($34),y			sta 	(basicStack),y
.82bf	60		rts				rts
.82c0					CopyIndexToReference:
.82c0	5a		phy				phy
.82c1	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82c3	38		sec				sec 								; (because we copy from offset 8)
.82c4	b1 34		lda ($34),y			lda 	(basicStack),y
.82c6	e9 08		sbc #$08			sbc 	#8
.82c8	85 36		sta $36				sta 	zTemp0
.82ca	c8		iny				iny
.82cb	b1 34		lda ($34),y			lda 	(basicStack),y
.82cd	e9 00		sbc #$00			sbc 	#0
.82cf	85 37		sta $37				sta 	zTemp0+1
.82d1	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82d3	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82d5	b1 34		lda ($34),y			lda 	(basicStack),y
.82d7	0a		asl a				asl 	a 							; into carry
.82d8	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82da	90 14		bcc $82f0			bcc 	_CITRNormal
.82dc	38		sec				sec
.82dd					_CITRNegative:
.82dd	a9 00		lda #$00			lda 	#0
.82df	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	c8		iny				iny
.82e4	ca		dex				dex
.82e5	d0 f6		bne $82dd			bne 	_CITRNegative
.82e7	88		dey				dey 								; look at MSB of mantissa
.82e8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82ea	09 80		ora #$80			ora 	#$80
.82ec	91 36		sta ($36),y			sta 	(zTemp0),y
.82ee	7a		ply				ply
.82ef	60		rts				rts
.82f0					_CITRNormal:
.82f0	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82f2	91 36		sta ($36),y			sta 	(zTemp0),y
.82f4	c8		iny				iny
.82f5	ca		dex				dex
.82f6	d0 f8		bne $82f0			bne 	_CITRNormal
.82f8	7a		ply				ply 								; and exit.
.82f9	60		rts				rts
.82fa					NextCommand:
.82fa	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82fc	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82fe	20 21 94	jsr $9421			jsr 	StackCheckFrame
.8301	5a		phy				phy
.8302	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8304	b1 34		lda ($34),y			lda 	(basicStack),y
.8306	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8308	30 02		bmi $830c			bmi 	_NCStepNeg
.830a	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.830c					_NCStepNeg:
.830c	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.830e	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8310	18		clc				clc
.8311					_NCBump:
.8311	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8313	91 34		sta ($34),y			sta 	(basicStack),y
.8315	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8317	c8		iny				iny 								; next byte
.8318	ca		dex				dex 								; do four times
.8319	d0 f6		bne $8311			bne 	_NCBump
.831b	20 c0 82	jsr $82c0			jsr		CopyIndexToReference		; copy it to the reference variable.
.831e	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8320	b1 34		lda ($34),y			lda 	(basicStack),y
.8322	0a		asl a				asl 	a 							; sign bit to carry
.8323	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8325	85 38		sta $38				sta 	zTemp1
.8327	90 02		bcc $832b			bcc 	_NCCompRev 					; use if step is +ve
.8329	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.832b					_NCCompRev:
.832b	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.832d	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.832f	85 39		sta $39				sta 	zTemp1+1
.8331	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8333	38		sec				sec
.8334					_NCCompare:
.8334	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8336	b1 34		lda ($34),y			lda 	(basicStack),y
.8338	a4 39		ldy $39				ldy 	zTemp1+1
.833a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.833c	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.833e	e6 39		inc $39				inc 	zTemp1+1
.8340	ca		dex				dex 								; do it 4 times.
.8341	d0 f1		bne $8334			bne 	_NCCompare
.8343	50 02		bvc $8347			bvc 	_NCNoOverflow 				; convert to signed comparison
.8345	49 80		eor #$80			eor 	#$80
.8347					_NCNoOverflow:
.8347	7a		ply				ply 								; restore Y position
.8348	0a		asl a				asl 	a 							; is bit 7 set.
.8349	90 04		bcc $834f			bcc 	_NCLoopback 				; if no , >= so loop back
.834b	20 13 94	jsr $9413			jsr 	StackClose 					; exit the loop
.834e	60		rts				rts
.834f					_NCLoopBack:
.834f	20 3d 94	jsr $943d			jsr 	STKLoadCodePosition 		; loop back
.8352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8353					Command_GOSUB:
.8353	a2 00		ldx #$00			ldx 	#0
.8355	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8358	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.835a	20 fa 93	jsr $93fa			jsr 	StackOpen 					; create frame
.835d	20 2c 94	jsr $942c			jsr 	STKSaveCodePosition 		; save current position
.8360	4c 76 83	jmp $8376			jmp 	GotoStackX
.8363					Command_RETURN:
.8363	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8365	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8367	20 21 94	jsr $9421			jsr 	StackCheckFrame
.836a	20 3d 94	jsr $943d			jsr 	STKLoadCodePosition 		; restore code position
.836d	20 13 94	jsr $9413			jsr 	StackClose
.8370	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8371					GotoCommand:
.8371	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8373	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger
.8376					GotoStackX:
.8376	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8379	48		pha				pha 								; it is slightly inefficient, just in cases.
.837a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.837d	fa		plx				plx
.837e	20 23 99	jsr $9923			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8381	4c d4 85	jmp $85d4			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8384					IfCommand:
.8384	a2 00		ldx #$00			ldx 	#0 							; If what.
.8386	20 11 93	jsr $9311			jsr 	EvaluateNumber
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.838d	d0 0a		bne $8399			bne 	_IFStructured
.838f	c8		iny				iny 								; consume THEN
.8390	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; is it zero
.8393	f0 01		beq $8396			beq 	_IfFail 					; if fail, go to next line
.8395	60		rts				rts 								; if THEN just continue
.8396					_IfFail:
.8396	4c 1e 86	jmp $861e			jmp 	EOLCommand
.8399					_IfStructured:
.8399	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; is it zero
.839c	d0 07		bne $83a5			bne 	_IfExit 					; if not, then continue normally.
.839e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.83a0	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.83a2	20 dc 87	jsr $87dc			jsr 	ScanForward 				; and run from there/
.83a5					_IfExit:
.83a5	60		rts				rts
.83a6					ElseCode:
.83a6	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.83a8	aa		tax				tax 								; so just go to the structure exit
.83a9	20 dc 87	jsr $87dc			jsr 	ScanForward
.83ac	60		rts				rts
.83ad					EndIf:
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83ae					LetCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	ad 5b 8c	lda $8c5b			lda 	PrecedenceLevel+"*"			; precedence > this
.83b3	20 75 8c	jsr $8c75			jsr 	EvaluateExpressionAtPrecedence
.83b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83b9	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83bb	f0 0e		beq $83cb			beq 	_LetGoProc 					; it's a procedure call.
.83bd	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83bf	20 73 99	jsr $9973			jsr 	CheckNextA
.83c2	e8		inx				inx 								; RHS
.83c3	20 08 93	jsr $9308			jsr 	EvaluateValue
.83c6	ca		dex				dex
.83c7	20 ce 83	jsr $83ce			jsr 	AssignVariable
.83ca	60		rts				rts
.83cb					_LetGoProc:
.83cb	4c de 84	jmp $84de			jmp 	CallProcedure
.83ce					AssignVariable:
.83ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83d1	48		pha				pha 								; save a copy
.83d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83d5	29 10		and #$10			and 	#NSBIsString
.83d7	d0 0b		bne $83e4			bne 	_ASError
.83d9	68		pla				pla 								; get back
.83da	29 10		and #$10			and 	#NSBIsString 				; check type
.83dc	d0 03		bne $83e1			bne 	_ASString
.83de	4c b0 8c	jmp $8cb0			jmp 	AssignNumber
.83e1					_ASString:
.83e1	4c 1e 8d	jmp $8d1e			jmp 	AssignString
.83e4					_ASError:
.83e4	4c 3d 9e	jmp $9e3d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.83e7					Command_List:
.83e7	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.83ea	9c 14 06	stz $0614			stz 	NSMantissa1+4
.83ed	a9 ff		lda #$ff			lda 	#$FF
.83ef	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.83f2	8d 17 06	sta $0617			sta 	NSMantissa1+7
.83f5	b1 30		lda ($30),y			lda 	(codePtr),y
.83f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f9	f0 1e		beq $8419			beq 	_CLSecond
.83fb	20 72 84	jsr $8472			jsr 	CLIsDigit 					; if not digit, list all
.83fe	b0 24		bcs $8424			bcs 	_CLStart
.8400	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8402	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger
.8405	b1 30		lda ($30),y			lda 	(codePtr),y
.8407	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8409	f0 0e		beq $8419			beq 	_CLSecond 					; if so go get it
.840b	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.840e	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8411	ad 14 06	lda $0614			lda 	NSMantissa1+4
.8414	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8417	80 0b		bra $8424			bra 	_CLStart
.8419					_CLSecond:
.8419	c8		iny				iny 								; consume comma
.841a	20 72 84	jsr $8472			jsr 	CLIsDigit 					; digit found
.841d	b0 05		bcs $8424			bcs 	_CLStart 					; if not, continue listing
.841f	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8421	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger
.8424					_CLStart
.8424	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8426	85 30		sta $30				sta 	codePtr
.8428	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.842a	85 31		sta $31				sta 	codePtr+1
.842c					_CLLoop:
.842c	b2 30		lda ($30)			lda 	(codePtr)
.842e	f0 2c		beq $845c			beq 	_CLExit
.8430	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8432	20 5f 84	jsr $845f			jsr 	CLCompareLineNo
.8435	90 18		bcc $844f			bcc 	_CLNext
.8437	a2 07		ldx #$07			ldx 	#7
.8439	20 5f 84	jsr $845f			jsr 	CLCompareLineNo
.843c	f0 02		beq $8440			beq 	_CLDoThisOne
.843e	b0 0f		bcs $844f			bcs 	_CLNext
.8440					_CLDoThisOne:
.8440	20 3b 86	jsr $863b			jsr 	ListConvertLine 			; convert line into token Buffer
.8443	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8445	a9 1f		lda #$1f			lda 	#(tokenBuffer & $FF)
.8447	20 c3 88	jsr $88c3			jsr 	PrintStringXA
.844a	a9 0d		lda #$0d			lda 	#13 						; new line
.844c	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.844f					_CLNext:
.844f	18		clc				clc
.8450	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8452	65 30		adc $30				adc 	codePtr
.8454	85 30		sta $30				sta 	codePtr
.8456	90 02		bcc $845a			bcc 	_CREExit
.8458	e6 31		inc $31				inc 	codePtr+1
.845a					_CREExit:
.845a	80 d0		bra $842c			bra 	_CLLoop
.845c					_CLExit:
.845c	4c 0c 80	jmp $800c			jmp 	WarmStart
.845f					CLCompareLineNo:
.845f	38		sec				sec
.8460	a0 01		ldy #$01			ldy 	#1
.8462	b1 30		lda ($30),y			lda 	(codePtr),y
.8464	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8467	85 36		sta $36				sta 	zTemp0
.8469	c8		iny				iny
.846a	b1 30		lda ($30),y			lda 	(codePtr),y
.846c	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.846f	05 36		ora $36				ora 	zTemp0
.8471	60		rts				rts
.8472					CLIsDigit:
.8472	b1 30		lda ($30),y			lda 	(codePtr),y
.8474	c9 30		cmp #$30			cmp 	#"0"
.8476	90 03		bcc $847b			bcc	 	_CLIDExitFalse
.8478	c9 3a		cmp #$3a			cmp 	#"9"+1
.847a	60		rts				rts
.847b					_CLIDExitFalse:
.847b	38		sec				sec
.847c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.847d					NewCommand:
.847d	20 d2 98	jsr $98d2			jsr 	MemoryNew
.8480	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8483	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.8486	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8487					Command_Print:
.8487	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8488					_CPLoop:
.8488	08		php				php 								; save last action flag
.8489	b1 30		lda ($30),y			lda 	(codePtr),y
.848b	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.848d	f0 46		beq $84d5			beq 	_CPExit
.848f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8491	f0 42		beq $84d5			beq 	_CPExit
.8493	68		pla				pla 								; throw last action flag
.8494	b1 30		lda ($30),y			lda 	(codePtr),y
.8496	c8		iny				iny
.8497	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8499	f0 37		beq $84d2			beq 	_CPContinueWithSameLine
.849b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.849d	f0 2e		beq $84cd			beq 	_CPTab
.849f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.84a1	f0 26		beq $84c9			beq 	_CPNewLine
.84a3	88		dey				dey 								; undo the get.
.84a4	a2 00		ldx #$00			ldx 	#0
.84a6	20 08 93	jsr $9308			jsr 	EvaluateValue 				; get a value into slot 0
.84a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.84ac	29 10		and #$10			and 	#NSBIsString
.84ae	f0 0b		beq $84bb			beq 	_CPNumber
.84b0	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.84b3	ad 08 06	lda $0608			lda 	NSMantissa0
.84b6	20 c3 88	jsr $88c3			jsr 	PrintStringXA
.84b9	80 cc		bra $8487			bra 	Command_Print 				; loop round clearing carry so NL if end
.84bb					_CPNumber:
.84bb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.84bd	20 de 91	jsr $91de			jsr 	ConvertNumberToString 		; convert to string
.84c0	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.84c2	a9 8f		lda #$8f			lda 	#DecimalBuffer & $FF
.84c4	20 c3 88	jsr $88c3			jsr 	PrintStringXA
.84c7	80 be		bra $8487			bra 	Command_Print 				; loop round clearing carry so NL if end
.84c9					_CPNewLine:
.84c9	a9 0d		lda #$0d			lda 	#13
.84cb	80 02		bra $84cf			bra 	_CPPrintChar
.84cd					_CPTab:
.84cd	a9 09		lda #$09			lda 	#9 							; print TAB
.84cf					_CPPrintChar:
.84cf	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.84d2					_CPContinueWithSameLine:
.84d2	38		sec				sec 								; loop round with carry set, which
.84d3	80 b3		bra $8488			bra 	_CPLoop 					; will inhibit final CR
.84d5					_CPExit:
.84d5	28		plp				plp 								; get last action flag
.84d6	b0 05		bcs $84dd			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.84d8	a9 0d		lda #$0d			lda 	#13 						; print new line
.84da	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.84dd					_CPExit2:
.84dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.84de					CallProcedure:
.84de	20 63 99	jsr $9963			jsr 	CheckRightBracket
.84e1	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.84e3	20 fa 93	jsr $93fa			jsr 	StackOpen
.84e6	20 2c 94	jsr $942c			jsr 	STKSaveCodePosition 		; save loop position
.84e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.84ec	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.84ee	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84f1	85 37		sta $37				sta 	zTemp0+1
.84f3	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.84f5	b2 36		lda ($36)			lda 	(zTemp0)
.84f7	85 30		sta $30				sta 	safePtr
.84f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.84fb	85 31		sta $31				sta 	safePtr+1
.84fd	c8		iny				iny
.84fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8500	85 32		sta $32				sta 	safePtr+2
.8502	c8		iny				iny
.8503	b1 36		lda ($36),y			lda 	(zTemp0),y
.8505	85 33		sta $33				sta 	safePtr+3
.8507	c8		iny				iny 								; get Y offset -> Y
.8508	b1 36		lda ($36),y			lda 	(zTemp0),y
.850a	a8		tay				tay
.850b	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; check )
.850e	60		rts				rts 								; and continue from here
.9955					Command_ENDPROC:
.9955	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9957	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9959	20 21 94	jsr $9421			jsr 	StackCheckFrame
.995c	20 3d 94	jsr $943d			jsr 	STKLoadCodePosition 		; restore code position
.995f	20 13 94	jsr $9413			jsr 	StackClose
.9962	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.850f					Command_Read:
.850f	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8511	20 44 8f	jsr $8f44			jsr 	EvaluateTerm
.8514	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8517	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8519	f0 4a		beq $8565			beq 	_CRSyntax 					; check reference (bit 0)
.851b	20 ae 85	jsr $85ae			jsr 	SwapDataCodePtrs 			; swap code and data
.851e	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8521	d0 20		bne $8543			bne 	_CRContinueData
.8523					_CRKeepSearching:
.8523	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8525	aa		tax				tax
.8526	20 dc 87	jsr $87dc			jsr 	ScanForward
.8529	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.852b	f0 16		beq $8543			beq 	_CRHaveData 				; found it
.852d	18		clc				clc
.852e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8530	65 30		adc $30				adc 	codePtr
.8532	85 30		sta $30				sta 	codePtr
.8534	90 02		bcc $8538			bcc 	_CREExit
.8536	e6 31		inc $31				inc 	codePtr+1
.8538					_CREExit:
.8538	a0 03		ldy #$03			ldy 	#3 							; start of line.
.853a	b2 30		lda ($30)			lda 	(codePtr)
.853c	d0 e5		bne $8523			bne 	_CRKeepSearching
.853e	a9 0b		lda #$0b		lda	#11
.8540	4c 6a 88	jmp $886a		jmp	ErrorHandler
.8543					_CRHaveData:
.8543					_CRContinueData:
.8543	a2 01		ldx #$01			ldx 	#1
.8545	20 08 93	jsr $9308			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8548	ca		dex				dex
.8549	20 ce 83	jsr $83ce			jsr		AssignVariable 				; do the assignment
.854c	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.854f	b1 30		lda ($30),y			lda 	(codePtr),y
.8551	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8553	d0 04		bne $8559			bne 	_CRSwapBack
.8555	c8		iny				iny 								; consume comma
.8556	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.8559					_CRSwapBack:
.8559	20 ae 85	jsr $85ae			jsr 	SwapDataCodePtrs			; swap them back.
.855c	b1 30		lda ($30),y			lda 	(codePtr),y
.855e	c8		iny				iny
.855f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8561	f0 ac		beq $850f			beq 	Command_Read 				; if so go round again.
.8563	88		dey				dey 								; unpick get.
.8564	60		rts				rts
.8565					_CRSyntax:
.8565	4c 33 9e	jmp $9e33			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8568					RemCommand:
.8568	b1 30		lda ($30),y			lda 	(codePtr),y
.856a	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.856c	d0 06		bne $8574			bne 	_RMExit
.856e	c8		iny				iny
.856f	98		tya				tya
.8570	38		sec				sec
.8571	71 30		adc ($30),y			adc 	(codePtr),y
.8573	a8		tay				tay
.8574					_RMExit:
.8574	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8575					Command_REPEAT:
.8575	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8577	20 fa 93	jsr $93fa			jsr 	StackOpen
.857a	20 2c 94	jsr $942c			jsr 	STKSaveCodePosition 		; save loop position
.857d	60		rts				rts
.857e					Command_UNTIL:
.857e	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8580	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8582	20 21 94	jsr $9421			jsr 	StackCheckFrame
.8585	a2 00		ldx #$00			ldx 	#0
.8587	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; work out the number
.858a	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; check if zero
.858d	f0 04		beq $8593			beq 	_CULoopBack 				; if so keep looping
.858f	20 13 94	jsr $9413			jsr 	StackClose		 			; return
.8592	60		rts				rts
.8593					_CULoopBack:
.8593	20 3d 94	jsr $943d			jsr 	STKLoadCodePosition 		; loop back
.8596	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8597					Command_Restore:
.8597	20 ae 85	jsr $85ae			jsr 	SwapDataCodePtrs 			; swap code and data
.859a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.859c	85 30		sta $30				sta 	codePtr
.859e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85a0	85 31		sta $31				sta 	codePtr+1
.85a2	20 ae 85	jsr $85ae			jsr 	SwapDataCodePtrs 			; put them back
.85a5	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.85a7	8d 19 07	sta $0719			sta 	dataPointer+4
.85aa	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.85ad	60		rts				rts
.85ae					SwapDataCodePtrs:
.85ae	da		phx				phx
.85af	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.85b1					_SDCPLoop:
.85b1	b5 30		lda $30,x			lda 	safePtr,x
.85b3	48		pha				pha
.85b4	bd 15 07	lda $0715,x			lda 	dataPointer,x
.85b7	95 30		sta $30,x			sta 	safePtr,x
.85b9	68		pla				pla
.85ba	9d 15 07	sta $0715,x			sta 	dataPointer,x
.85bd	ca		dex				dex
.85be	10 f1		bpl $85b1			bpl 	_SDCPLoop
.85c0	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.85c3	8c 19 07	sty $0719			sty 	dataPointer+4
.85c6	a8		tay				tay
.85c7	fa		plx				plx
.85c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.85c9					CommandRUN:
.85c9	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.85cc	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85ce	85 30		sta $30				sta 	codePtr
.85d0	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85d2	85 31		sta $31				sta 	codePtr+1
.85d4					RUNNewLine:
.85d4	b2 30		lda ($30)			lda 	(codePtr)
.85d6	f0 43		beq $861b			beq 	CRNoProgram         		; no then END.
.85d8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.85da	9a		txs				txs
.85db					RUNCodePointerLine:
.85db	a0 02		ldy #$02			ldy 	#2 							; start of program
.85dd					_CRIncMainLoop:
.85dd	c8		iny				iny
.85de					_CRMainLoop:
.85de	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.85e1	b1 30		lda ($30),y			lda 	(codePtr),y
.85e3	10 10		bpl $85f5			bpl 	_CRNotKeyword
.85e5	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.85e7	b0 04		bcs $85ed			bcs 	_CRIsKeyword
.85e9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.85eb	b0 28		bcs $8615			bcs		_CRSyntaxError
.85ed					_CRIsKeyword:
.85ed	c8		iny				iny 								; consume command
.85ee	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.85ef	aa		tax				tax 								; put in X for vector jump
.85f0	20 18 86	jsr $8618			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.85f3	80 e9		bra $85de			bra 	_CRMainLoop 				; and loop round
.85f5					_CRNotKeyword:
.85f5	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.85f7	f0 e4		beq $85dd			beq 	_CRIncMainLoop
.85f9	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.85fb	90 05		bcc $8602			bcc 	_CRNotVariable
.85fd					_CRGoLet:
.85fd	20 ae 83	jsr $83ae			jsr 	LetCommand
.8600	80 dc		bra $85de			bra 	_CRMainLoop
.8602					_CRNotVariable:
.8602	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8604	f0 f7		beq $85fd			beq 	_CRGoLet
.8606	c9 21		cmp #$21			cmp 	#KWD_PLING
.8608	f0 f3		beq $85fd			beq 	_CRGoLet
.860a	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.860c	f0 01		beq $860f			beq 	_CRGoRem
>860e	db						.byte 	$DB 						; causes a break in the emulator
.860f					_CRGoRem:
.860f	c8		iny				iny
.8610	20 68 85	jsr $8568			jsr 	RemCommand
.8613	80 c9		bra $85de			bra 	_CRMainLoop
.8615					_CRSyntaxError:
.8615	4c 33 9e	jmp $9e33			jmp 	SyntaxError
.8618					_CRCallVector0:
.8618	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.861b					CRNoProgram:
.861b	4c 3d 82	jmp $823d			jmp 	EndCommand
.861e					EOLCommand:
.861e	18		clc				clc
.861f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8621	65 30		adc $30				adc 	codePtr
.8623	85 30		sta $30				sta 	codePtr
.8625	90 02		bcc $8629			bcc 	_CREExit
.8627	e6 31		inc $31				inc 	codePtr+1
.8629					_CREExit:
.8629	80 a9		bra $85d4			bra 	RunNewLine
.862b					Shift1Command:
.862b	b1 30		lda ($30),y			lda 	(codePtr),y
.862d	c8		iny				iny
.862e	0a		asl a				asl 	a
.862f	aa		tax				tax
.8630	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8633					Unused1:
.8633					Unused2:
.8633					Unused3:
.8633					Unused4:
.8633	4c 33 9e	jmp $9e33			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8636					StopCommand:
.8636	a9 08		lda #$08		lda	#8
.8638	4c 6a 88	jmp $886a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.863b					ListConvertLine:
.863b	9c 1b 07	stz $071b			stz 	tbOffset
.863e	9c 1f 07	stz $071f			stz 	tokenBuffer
.8641	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8643	b1 30		lda ($30),y			lda 	(codePtr),y
.8645	aa		tax				tax
.8646	88		dey				dey
.8647	b1 30		lda ($30),y			lda 	(codePtr),y
.8649	20 bf 9a	jsr $9abf			jsr 	ConvertInt16
.864c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.864e	86 37		stx $37				stx 	zTemp0+1
.8650	a0 00		ldy #$00			ldy 	#0
.8652					_LCCopyNumber:
.8652	b1 36		lda ($36),y			lda 	(zTemp0),y
.8654	20 51 87	jsr $8751			jsr 	LCLWrite
.8657	c8		iny				iny
.8658	b1 36		lda ($36),y			lda 	(zTemp0),y
.865a	d0 f6		bne $8652			bne 	_LCCopyNumber
.865c					_LCPadOut:
.865c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.865e	20 51 87	jsr $8751			jsr 	LCLWrite
.8661	ad 1b 07	lda $071b			lda 	tbOffset
.8664	c9 06		cmp #$06			cmp 	#6
.8666	d0 f4		bne $865c			bne 	_LCPadOut
.8668	a0 03		ldy #$03			ldy 	#3 							; start position.
.866a					_LCMainLoop:
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.866e	f0 17		beq $8687			beq 	_LCExit
.8670	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8672	90 14		bcc $8688			bcc 	_LCDoubles
.8674	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8676	90 20		bcc $8698			bcc 	_LCShiftPunc
.8678	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.867a	90 2b		bcc $86a7			bcc 	_LCPunctuation
.867c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.867e	90 2d		bcc $86ad			bcc 	_LCIdentifiers
.8680	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8682	90 49		bcc $86cd			bcc 	_LCTokens
.8684	4c 25 87	jmp $8725			jmp 	_LCData 					; 254-5 are data objects
.8687					_LCExit:
.8687	60		rts				rts
.8688					_LCDoubles:
.8688	48		pha				pha
.8689	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.868a	29 02		and #$02			and 	#2
.868c	09 3c		ora #$3c			ora 	#60 						; make < >
.868e	20 51 87	jsr $8751			jsr 	LCLWrite
.8691	68		pla				pla 								; restore, do lower bit
.8692	29 03		and #$03			and 	#3
.8694	09 3c		ora #$3c			ora 	#60
.8696	80 0f		bra $86a7			bra		_LCPunctuation 				; print, increment, loop
.8698					_LCShiftPunc:
.8698	aa		tax				tax 								; save in X
.8699	29 07		and #$07			and 	#7 							; lower 3 bits
.869b	f0 02		beq $869f			beq 	_LCNoAdd
.869d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.869f					_LCNoAdd:
.869f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.86a1	90 02		bcc $86a5			bcc 	_LCNoAdd2
.86a3	09 20		ora #$20			ora 	#32 						; adds $20
.86a5					_LCNoAdd2:
.86a5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.86a7					_LCPunctuation:
.86a7	c8		iny				iny 								; consume character
.86a8	20 51 87	jsr $8751			jsr 	LCLWrite 					; write it out.
.86ab	80 bd		bra $866a			bra 	_LCMainLoop 				; go round again.
.86ad					_LCIdentifiers:
.86ad	18		clc				clc 								; convert to physical address
.86ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86b0	85 37		sta $37				sta 	zTemp0+1
.86b2	c8		iny				iny
.86b3	b1 30		lda ($30),y			lda 	(codePtr),y
.86b5	85 36		sta $36				sta 	zTemp0
.86b7	c8		iny				iny
.86b8	5a		phy				phy 								; save position
.86b9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.86bb					_LCOutIdentifier:
.86bb	c8		iny				iny
.86bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.86be	29 7f		and #$7f			and 	#$7F
.86c0	20 7f 87	jsr $877f			jsr 	LCLLowerCase
.86c3	20 51 87	jsr $8751			jsr 	LCLWrite
.86c6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.86c8	10 f1		bpl $86bb			bpl 	_LCOutIdentifier
.86ca	7a		ply				ply 								; restore position
.86cb	80 9d		bra $866a			bra 	_LCMainLoop
.86cd					_LCTokens:
.86cd	aa		tax				tax 								; token in X
.86ce	a9 4c		lda #$4c			lda 	#((KeywordSet2) & $FF)
.86d0	85 36		sta $36				sta 	0+zTemp0
.86d2	a9 96		lda #$96			lda 	#((KeywordSet2) >> 8)
.86d4	85 37		sta $37				sta 	1+zTemp0
.86d6	e0 82		cpx #$82			cpx 	#$82
.86d8	f0 16		beq $86f0			beq 	_LCUseShift
.86da	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.86dc	85 36		sta $36				sta 	0+zTemp0
.86de	a9 96		lda #$96			lda 	#((KeywordSet1) >> 8)
.86e0	85 37		sta $37				sta 	1+zTemp0
.86e2	e0 81		cpx #$81			cpx 	#$81
.86e4	f0 0a		beq $86f0			beq 	_LCUseShift
.86e6	a9 f0		lda #$f0			lda 	#((KeywordSet0) & $FF)
.86e8	85 36		sta $36				sta 	0+zTemp0
.86ea	a9 94		lda #$94			lda 	#((KeywordSet0) >> 8)
.86ec	85 37		sta $37				sta 	1+zTemp0
.86ee	80 01		bra $86f1			bra 	_LCNoShift
.86f0					_LCUseShift:
.86f0	c8		iny				iny
.86f1					_LCNoShift:
.86f1	20 60 87	jsr $8760			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.86f4	b1 30		lda ($30),y			lda 	(codePtr),y
.86f6	aa		tax				tax 								; into X
.86f7					_LCFindText:
.86f7	ca		dex				dex
.86f8	10 0e		bpl $8708			bpl 	_LCFoundText 				; found text.
.86fa	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.86fc	1a		inc a				inc 	a 							; one extra for size
.86fd	38		sec				sec 								; one extra for checksum
.86fe	65 36		adc $36				adc 	zTemp0 						; go to next token
.8700	85 36		sta $36				sta 	zTemp0
.8702	90 f3		bcc $86f7			bcc 	_LCFindText
.8704	e6 37		inc $37				inc 	zTemp0+1
.8706	80 ef		bra $86f7			bra 	_LCFindText
.8708					_LCFoundText:
.8708	5a		phy				phy 								; save List position
.8709	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.870b	aa		tax				tax
.870c	a0 02		ldy #$02			ldy 	#2
.870e					_LCCopyToken:
.870e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8710	20 51 87	jsr $8751			jsr 	LCLWrite
.8713	c8		iny				iny
.8714	ca		dex				dex
.8715	d0 f7		bne $870e			bne 	_LCCopyToken
.8717	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8719	f0 05		beq $8720			beq 	_LCNoSpace
.871b	a9 20		lda #$20			lda 	#' '
.871d	20 51 87	jsr $8751			jsr 	LCLWrite
.8720					_LCNoSpace:
.8720	7a		ply				ply 								; restore position.
.8721	c8		iny				iny 								; consume token
.8722	4c 6a 86	jmp $866a			jmp 	_LCMainLoop 				; and go around again.
.8725					_LCData:
.8725	48		pha				pha 								; save type $FE/$FF
.8726	a2 23		ldx #$23			ldx 	#'#' 						; figure out # or "
.8728	c9 fe		cmp #$fe			cmp 	#$FE
.872a	f0 02		beq $872e			beq 	_LCHaveOpener
.872c	a2 22		ldx #$22			ldx 	#'"'
.872e					_LCHaveOpener:
.872e	8a		txa				txa 								; output prefix (# or ")
.872f	20 51 87	jsr $8751			jsr 	LCLWrite
.8732	c8		iny				iny 								; get count
.8733	b1 30		lda ($30),y			lda 	(codePtr),y
.8735	aa		tax				tax
.8736	c8		iny				iny 								; point at first character
.8737					_LCOutData:
.8737	b1 30		lda ($30),y			lda 	(codePtr),y
.8739	c9 00		cmp #$00			cmp 	#0
.873b	f0 03		beq $8740			beq 	_LCNoPrint
.873d	20 51 87	jsr $8751			jsr 	LCLWrite
.8740					_LCNoPrint:
.8740	c8		iny				iny
.8741	ca		dex				dex
.8742	d0 f3		bne $8737			bne 	_LCOutData
.8744	68		pla				pla 								; closing " required ?
.8745	c9 ff		cmp #$ff			cmp 	#$FF
.8747	d0 05		bne $874e			bne 	_LCNoQuote
.8749	a9 22		lda #$22			lda 	#'"'
.874b	20 51 87	jsr $8751			jsr 	LCLWrite
.874e					_LCNoQuote:
.874e	4c 6a 86	jmp $866a			jmp 	_LCMainLoop
.8751					LCLWrite:
.8751	da		phx				phx
.8752	ae 1b 07	ldx $071b			ldx 	tbOffset
.8755	9d 1f 07	sta $071f,x			sta 	tokenBuffer,x
.8758	9e 20 07	stz $0720,x			stz 	tokenBuffer+1,x
.875b	ee 1b 07	inc $071b			inc 	tbOffset
.875e	fa		plx				plx
.875f	60		rts				rts
.8760					LCCheckSpaceRequired:
.8760	ae 1b 07	ldx $071b			ldx 	tbOffset
.8763	bd 1e 07	lda $071e,x			lda 	tokenBuffer-1,x 			; previous character
.8766	20 7f 87	jsr $877f			jsr 	LCLLowerCase 				; saves a little effort
.8769	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.876b	90 11		bcc $877e			bcc 	_LCCSRExit
.876d	c9 3a		cmp #$3a			cmp 	#"9"+1
.876f	90 08		bcc $8779			bcc 	_LCCSRSpace
.8771	c9 61		cmp #$61			cmp 	#"a"
.8773	90 09		bcc $877e			bcc 	_LCCSRExit
.8775	c9 7b		cmp #$7b			cmp 	#"z"+1
.8777	b0 05		bcs $877e			bcs 	_LCCSRExit
.8779					_LCCSRSpace:
.8779	a9 20		lda #$20			lda 	#' '
.877b	20 51 87	jsr $8751			jsr 	LCLWrite
.877e					_LCCSRExit:
.877e	60		rts				rts
.877f					LCLLowerCase:
.877f	c9 41		cmp #$41			cmp 	#"A"
.8781	90 06		bcc $8789			bcc 	_LCLLCOut
.8783	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8785	b0 02		bcs $8789			bcs 	_LCLLCOut
.8787	69 20		adc #$20			adc 	#$20
.8789					_LCLLCOut:
.8789	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.878a					ProcedureScan:
.878a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.878c	85 30		sta $30				sta 	codePtr
.878e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8790	85 31		sta $31				sta 	codePtr+1
.8792					_PSLoop:
.8792	b2 30		lda ($30)			lda 	(codePtr)
.8794	f0 42		beq $87d8			beq 	_PSExit
.8796	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8798	b1 30		lda ($30),y			lda 	(codePtr),y
.879a	c9 98		cmp #$98			cmp 	#KWD_PROC
.879c	d0 2d		bne $87cb			bne 	_PSNext
.879e	c8		iny				iny 								; get the address of the record to zTemp0 and
.879f	b1 30		lda ($30),y			lda 	(codePtr),y
.87a1	29 c0		and #$c0			and 	#$C0
.87a3	c9 40		cmp #$40			cmp 	#$40
.87a5	d0 32		bne $87d9			bne 	_PSSyntax
.87a7	b1 30		lda ($30),y			lda 	(codePtr),y
.87a9	18		clc				clc
.87aa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87ac	85 37		sta $37				sta 	zTemp0+1
.87ae	c8		iny				iny 								; LSB
.87af	b1 30		lda ($30),y			lda 	(codePtr),y
.87b1	85 36		sta $36				sta 	zTemp0
.87b3	c8		iny				iny 								; character after variable call.
.87b4	98		tya				tya 								; save Y offset at +7
.87b5	a0 07		ldy #$07			ldy 	#7
.87b7	91 36		sta ($36),y			sta 	(zTemp0),y
.87b9	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.87bb	a0 02		ldy #$02			ldy 	#2
.87bd	91 36		sta ($36),y			sta 	(zTemp0),y
.87bf	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.87c1					_PSCopy:
.87c1	b5 30		lda $30,x			lda 	safePtr,x
.87c3	c8		iny				iny
.87c4	91 36		sta ($36),y			sta 	(zTemp0),y
.87c6	e8		inx				inx
.87c7	e0 04		cpx #$04			cpx 	#4
.87c9	d0 f6		bne $87c1			bne 	_PSCopy
.87cb					_PSNext:
.87cb	18		clc				clc
.87cc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87ce	65 30		adc $30				adc 	codePtr
.87d0	85 30		sta $30				sta 	codePtr
.87d2	90 02		bcc $87d6			bcc 	_CREExit
.87d4	e6 31		inc $31				inc 	codePtr+1
.87d6					_CREExit:
.87d6	80 ba		bra $8792			bra 	_PSLoop
.87d8					_PSExit:
.87d8	60		rts				rts
.87d9					_PSSyntax:
.87d9	4c 33 9e	jmp $9e33			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.87dc					ScanForward:
.87dc	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.87de	86 37		stx $37				stx 	zTemp0+1
.87e0	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.87e2					_ScanLoop:
.87e2	b1 30		lda ($30),y			lda 	(codePtr),y
.87e4	c8		iny				iny
.87e5	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.87e7	d0 0e		bne $87f7			bne 	_ScanGoNext
.87e9	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.87eb	f0 04		beq $87f1			beq 	_ScanMatch
.87ed	c5 37		cmp $37				cmp 	zTemp0+1
.87ef	d0 06		bne $87f7			bne 	_ScanGoNext
.87f1					_ScanMatch:
.87f1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.87f3	d0 01		bne $87f6			bne 	_ScanNotEndEOL
.87f5	88		dey				dey
.87f6					_ScanNotEndEOL:
.87f6	60		rts				rts
.87f7					_ScanGoNext:
.87f7	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.87f9	90 e7		bcc $87e2			bcc 	_ScanLoop
.87fb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.87fd	90 18		bcc $8817			bcc 	_ScanSkipOne
.87ff	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8801	b0 2f		bcs $8832			bcs 	_ScanSkipData
.8803	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8805	90 db		bcc $87e2			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8807	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8809	b0 d7		bcs $87e2			bcs 	_ScanLoop
.880b	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.880d	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.880f	b0 d1		bcs $87e2			bcs 	_ScanLoop
.8811	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8813	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8815	80 cb		bra $87e2			bra 	_ScanLoop
.8817					_ScanSkipOne:
.8817	c8		iny				iny 								; consume the extra one.
.8818	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.881a	d0 c6		bne $87e2			bne 	_ScanLoop
.881c	18		clc				clc
.881d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.881f	65 30		adc $30				adc 	codePtr
.8821	85 30		sta $30				sta 	codePtr
.8823	90 02		bcc $8827			bcc 	_CREExit
.8825	e6 31		inc $31				inc 	codePtr+1
.8827					_CREExit:
.8827	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8829	b2 30		lda ($30)			lda 	(codePtr)
.882b	d0 b5		bne $87e2			bne 	_ScanLoop 					; if not zero, more to scan
.882d	a9 13		lda #$13		lda	#19
.882f	4c 6a 88	jmp $886a		jmp	ErrorHandler
.8832					_ScanSkipData:
.8832	88		dey				dey 								; point at data token
.8833	c8		iny				iny
.8834	98		tya				tya
.8835	38		sec				sec
.8836	71 30		adc ($30),y			adc 	(codePtr),y
.8838	a8		tay				tay
.8839	80 a7		bra $87e2			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.883b					Command_WHILE:
.883b	5a		phy				phy 								; save position of the test
.883c	a2 00		ldx #$00			ldx 	#0
.883e	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; work out the number
.8841	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; check if zero
.8844	f0 0e		beq $8854			beq 	_WHExitLoop 				; if so exit the loop
.8846	98		tya				tya 								; position *after* test.
.8847	7a		ply				ply 								; restore position before test, at WHILE
.8848	88		dey				dey
.8849	48		pha				pha 								; push after test on the stack
.884a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.884c	20 fa 93	jsr $93fa			jsr 	StackOpen
.884f	20 2c 94	jsr $942c			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8852	7a		ply				ply 								; restore the position *after* the test
.8853	60		rts				rts
.8854					_WHExitLoop:
.8854	68		pla				pla 								; throw post loop position
.8855	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8857	aa		tax				tax
.8858	20 dc 87	jsr $87dc			jsr 	ScanForward
.885b	60		rts				rts
.885c					Command_WEND:
.885c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.885e	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8860	20 21 94	jsr $9421			jsr 	StackCheckFrame
.8863	20 3d 94	jsr $943d			jsr 	STKLoadCodePosition 		; loop back
.8866	20 13 94	jsr $9413			jsr 	StackClose		 			; erase the frame
.8869	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9963					CheckRightBracket:
.9963	b1 30		lda ($30),y			lda 	(codePtr),y
.9965	c8		iny				iny
.9966	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9968	d0 0f		bne $9979			bne 	CNAFail
.996a	60		rts				rts
.996b					CheckComma:
.996b	b1 30		lda ($30),y			lda 	(codePtr),y
.996d	c8		iny				iny
.996e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9970	d0 07		bne $9979			bne 	CNAFail
.9972	60		rts				rts
.9973					CheckNextA:
.9973	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9975	d0 02		bne $9979			bne 	CNAFail
.9977	c8		iny				iny 								; skip character
.9978	60		rts				rts 								; and exit
.9979					CNAFail:
.9979	4c 33 9e	jmp $9e33			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.886a					ErrorHandler:
.886a	a8		tay				tay 								; find the error text
.886b	f0 49		beq $88b6			beq 	_EHEnd
.886d	a2 00		ldx #$00			ldx 	#0
.886f	a9 4c		lda #$4c			lda 	#((ErrorText) & $FF)
.8871	85 36		sta $36				sta 	0+zTemp0
.8873	a9 9e		lda #$9e			lda 	#((ErrorText) >> 8)
.8875	85 37		sta $37				sta 	1+zTemp0
.8877					_EHFind:
.8877	88		dey				dey 								; found the error text ?
.8878	f0 0e		beq $8888			beq 	_EHFound
.887a					_EHFindZero:
.887a	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.887c	e6 36		inc $36				inc 	zTemp0
.887e	d0 02		bne $8882			bne 	_EHFNoCarry
.8880	e6 37		inc $37				inc 	zTemp0+1
.8882					_EHFNoCarry:
.8882	c9 00		cmp #$00			cmp 	#0
.8884	d0 f4		bne $887a			bne 	_EHFindZero
.8886	80 ef		bra $8877			bra 	_EHFind
.8888					_EHFound:
.8888	a5 36		lda $36				lda 	zTemp0 						; print message
.888a	a6 37		ldx $37				ldx 	zTemp0+1
.888c	20 c3 88	jsr $88c3			jsr 	PrintStringXA
.888f	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8891	b1 30		lda ($30),y			lda 	(codePtr),y
.8893	d0 05		bne $889a			bne 	_EHAtMsg
.8895	c8		iny				iny
.8896	b1 30		lda ($30),y			lda 	(codePtr),y
.8898	f0 17		beq $88b1			beq 	_EHCREnd
.889a					_EHAtMsg:
.889a	a2 88		ldx #$88			ldx 	#_AtMsg >> 8 				; print " at "
.889c	a9 b9		lda #$b9			lda 	#_AtMsg & $FF
.889e	20 c3 88	jsr $88c3			jsr 	PrintStringXA
.88a1	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.88a3	b1 30		lda ($30),y			lda 	(codePtr),y
.88a5	48		pha				pha
.88a6	c8		iny				iny
.88a7	b1 30		lda ($30),y			lda 	(codePtr),y
.88a9	aa		tax				tax
.88aa	68		pla				pla
.88ab	20 bf 9a	jsr $9abf			jsr 	ConvertInt16 				; convert XA to string
.88ae	20 c3 88	jsr $88c3			jsr 	PrintStringXA 				; and print it.
.88b1					_EHCREnd:
.88b1	a9 0d		lda #$0d			lda 	#13 						; new line
.88b3	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.88b6					_EHEnd:
.88b6	4c 0c 80	jmp $800c			jmp 	WarmStart
>88b9	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>88c1	20 00
.88c3					PrintStringXA:
.88c3	5a		phy				phy
.88c4	86 37		stx $37				stx 	zTemp0+1
.88c6	85 36		sta $36				sta 	zTemp0
.88c8	a0 00		ldy #$00			ldy 	#0
.88ca					_PSXALoop:
.88ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.88cc	f0 06		beq $88d4			beq 	_PSXAExit
.88ce	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.88d1	c8		iny				iny
.88d2	80 f6		bra $88ca			bra 	_PSXALoop
.88d4					_PSXAExit:
.88d4	7a		ply				ply
.88d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.88d6					UnaryTrue:
.88d6	fa		plx				plx
.88d7					ReturnTrue:
.88d7	a9 01		lda #$01			lda 	#1  						; set to 1
.88d9	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.88dc	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.88de	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e1	60		rts				rts
.88e2					UnaryFalse:
.88e2	fa		plx				plx
.88e3					ReturnFalse:
.88e3	4c bd 93	jmp $93bd			jmp 	NSMSetZero 					; set it all to zero
.88e6					BinaryCompareEqual:
.88e6	fa		plx				plx
.88e7	20 22 89	jsr $8922			jsr 	CompareBaseCode
.88ea	c9 00		cmp #$00			cmp 	#0
.88ec	f0 e9		beq $88d7			beq 	ReturnTrue
.88ee	80 f3		bra $88e3			bra 	ReturnFalse
.88f0					BinaryCompareLess:
.88f0	fa		plx				plx
.88f1	20 22 89	jsr $8922			jsr 	CompareBaseCode
.88f4	c9 ff		cmp #$ff			cmp 	#$FF
.88f6	f0 df		beq $88d7			beq 	ReturnTrue
.88f8	80 e9		bra $88e3			bra 	ReturnFalse
.88fa					BinaryCompareGreater:
.88fa	fa		plx				plx
.88fb	20 22 89	jsr $8922			jsr 	CompareBaseCode
.88fe	c9 01		cmp #$01			cmp 	#1
.8900	f0 d5		beq $88d7			beq 	ReturnTrue
.8902	80 df		bra $88e3			bra 	ReturnFalse
.8904					BinaryCompareNotEqual:
.8904	fa		plx				plx
.8905	20 22 89	jsr $8922			jsr 	CompareBaseCode
.8908	c9 00		cmp #$00			cmp 	#0
.890a	d0 cb		bne $88d7			bne 	ReturnTrue
.890c	80 d5		bra $88e3			bra 	ReturnFalse
.890e					BinaryCompareLessEqual:
.890e	fa		plx				plx
.890f	20 22 89	jsr $8922			jsr 	CompareBaseCode
.8912	c9 01		cmp #$01			cmp 	#1
.8914	d0 c1		bne $88d7			bne 	ReturnTrue
.8916	80 cb		bra $88e3			bra 	ReturnFalse
.8918					BinaryCompareGreaterEqual:
.8918	fa		plx				plx
.8919	20 22 89	jsr $8922			jsr 	CompareBaseCode
.891c	c9 ff		cmp #$ff			cmp 	#$FF
.891e	d0 b7		bne $88d7			bne 	ReturnTrue
.8920	80 c1		bra $88e3			bra 	ReturnFalse
.8922					CompareBaseCode:
.8922	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; make both values if references.
.8925	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8928	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.892b	29 10		and #$10			and 	#NSTString
.892d	d0 40		bne $896f			bne 	_CBCString
.892f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8932	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8935	d0 3b		bne $8972			bne 	_CBCFloat
.8937	bd 00 06	lda $0600,x			lda 	NSStatus,x
.893a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.893d	29 08		and #$08			and 	#NSTFloat
.893f	d0 31		bne $8972			bne 	_CBCFloat
.8941	20 75 89	jsr $8975			jsr 	CompareFixMinusZero
.8944	e8		inx				inx
.8945	20 75 89	jsr $8975			jsr 	CompareFixMinusZero
.8948	ca		dex				dex
.8949	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.894c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.894f	10 0b		bpl $895c			bpl 	_CDCSameSign
.8951	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8954	30 16		bmi $896c			bmi 	_CBCLess 					; return $FF
.8956					_CBCGreater:
.8956	a9 01		lda #$01			lda 	#1
.8958	60		rts				rts
.8959					_CBCEqual:
.8959	a9 00		lda #$00			lda 	#0
.895b	60		rts				rts
.895c					_CDCSameSign:
.895c	20 85 8a	jsr $8a85			jsr 	SubTopTwoStack 				; unsigned subtract
.895f	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; or the mantissa together
.8962	f0 f5		beq $8959			beq 	_CBCEqual 					; -0 == 0
.8964	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8967	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.896a	10 ea		bpl $8956			bpl 	_CBCGreater
.896c					_CBCLess:
.896c	a9 ff		lda #$ff			lda 	#$FF
.896e	60		rts				rts
.896f					_CBCString:
.896f	4c db 89	jmp $89db			jmp 	CompareStrings
.8972					_CBCFloat:
.8972	4c bb 9b	jmp $9bbb			jmp 	CompareFloat
.8975					CompareFixMinusZero:
.8975	20 ed 93	jsr $93ed			jsr 	NSMIsZero
.8978	d0 03		bne $897d			bne 	_CFXMZNotZero
.897a	9e 00 06	stz $0600,x			stz 	NSStatus,x
.897d					_CFXMZNotZero:
.897d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.897e					StringConcat:
.897e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8981	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8984	29 18		and #$18			and 	#NSBTypeMask
.8986	c9 10		cmp #$10			cmp 	#NSTString
.8988	d0 4e		bne $89d8			bne		_SCType
.898a	64 38		stz $38				stz 	zTemp1 						; counting total length
.898c	e8		inx				inx
.898d	20 ab 89	jsr $89ab			jsr 	_SCSetupZ0 					; setup for second
.8990	20 b6 89	jsr $89b6			jsr 	_SCLengthZ0 				; length for second
.8993	ca		dex				dex
.8994	20 ab 89	jsr $89ab			jsr 	_SCSetupZ0 					; setup for first
.8997	20 b6 89	jsr $89b6			jsr 	_SCLengthZ0 				; length for first
.899a	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.899c	20 2d a0	jsr $a02d			jsr 	StringTempAllocate
.899f	20 c9 89	jsr $89c9			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.89a2	e8		inx				inx
.89a3	20 ab 89	jsr $89ab			jsr 	_SCSetupZ0 					; copy second out
.89a6	20 c9 89	jsr $89c9			jsr 	_SCCopy
.89a9	ca		dex				dex
.89aa	60		rts				rts
.89ab					_SCSetupZ0:
.89ab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89ae	85 36		sta $36				sta 	zTemp0
.89b0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89b3	85 37		sta $37				sta 	zTemp0+1
.89b5	60		rts				rts
.89b6					_SCLengthZ0:
.89b6	5a		phy				phy
.89b7	a0 00		ldy #$00			ldy 	#0
.89b9					_SCLenLoop:
.89b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.89bb	f0 0a		beq $89c7			beq 	_SCLExit
.89bd	c8		iny				iny
.89be	e6 38		inc $38				inc 	zTemp1
.89c0	10 f7		bpl $89b9			bpl		_SCLenLoop
.89c2	a9 09		lda #$09		lda	#9
.89c4	4c 6a 88	jmp $886a		jmp	ErrorHandler
.89c7					_SCLExit:
.89c7	7a		ply				ply
.89c8	60		rts				rts
.89c9					_SCCopy:
.89c9	5a		phy				phy
.89ca	a0 00		ldy #$00			ldy 	#0
.89cc					_SCCopyLoop:
.89cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ce	f0 06		beq $89d6			beq 	_SCCExit
.89d0	20 6b a0	jsr $a06b			jsr 	StringTempWrite
.89d3	c8		iny				iny
.89d4	80 f6		bra $89cc			bra 	_SCCopyLoop
.89d6					_SCCExit:
.89d6	7a		ply				ply
.89d7	60		rts				rts
.89d8					_SCType:
.89d8	4c 3d 9e	jmp $9e3d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.997c					IntegerDivide:
.997c	fa		plx				plx
.997d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9980	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9983	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9984	0a		asl a				asl 	a
.9985	10 05		bpl $998c			bpl 	_NotRef
.9987	48		pha				pha
.9988	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.998b	68		pla				pla
.998c					_NotRef:
.998c	0a		asl a				asl 	a
.998d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.998f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9992	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9995	f0 03		beq $999a			beq 	_IntegerCode 				; if clear, then we have two integers
.9997	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.999a					_IntegerCode:
.999a	20 bc 99	jsr $99bc			jsr 	CheckDivideZero 			; do div zero check
.999d	20 f4 99	jsr $99f4			jsr 	Int32Divide 				; do the division
.99a0	20 b1 9a	jsr $9ab1			jsr 	CalculateSign 				; calculate result sign
.99a3					NSMCopyPlusTwoToZero:
.99a3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.99a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.99a9	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.99ac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99af	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.99b2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.99b5	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.99b8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.99bb	60		rts				rts
.99bc					CheckDivideZero:
.99bc	e8		inx				inx
.99bd	20 ed 93	jsr $93ed			jsr 	NSMIsZero
.99c0	f0 02		beq $99c4			beq 	_CDVError
.99c2	ca		dex				dex
.99c3	60		rts				rts
.99c4					_CDVError:
.99c4	a9 03		lda #$03		lda	#3
.99c6	4c 6a 88	jmp $886a		jmp	ErrorHandler
.99c9					IntegerModulus:
.99c9	fa		plx				plx
.99ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.99cd	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.99d0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99d1	0a		asl a				asl 	a
.99d2	10 05		bpl $99d9			bpl 	_NotRef
.99d4	48		pha				pha
.99d5	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99d8	68		pla				pla
.99d9					_NotRef:
.99d9	0a		asl a				asl 	a
.99da	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99dc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99df	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.99e2	f0 03		beq $99e7			beq 	_IntegerCode 				; if clear, then we have two integers
.99e4	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.99e7					_IntegerCode:
.99e7	20 bc 99	jsr $99bc			jsr 	CheckDivideZero 			; do div zero check
.99ea	20 f4 99	jsr $99f4			jsr 	Int32Divide 				; do the division
.99ed	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.99f0	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.99f3	60		rts				rts
.99f4					Int32Divide:
.99f4	48		pha				pha 								; save AXY
.99f5	5a		phy				phy
.99f6	20 94 93	jsr $9394			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99f9	20 b9 93	jsr $93b9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.99fc	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.99fe					_I32DivideLoop:
.99fe	e8		inx				inx
.99ff	e8		inx				inx
.9a00	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9a03	ca		dex				dex
.9a04	ca		dex				dex
.9a05	20 d3 93	jsr $93d3			jsr 	NSMRotateLeft
.9a08	20 34 9a	jsr $9a34			jsr 	DivideCheckSubtract 		; check if subtract possible
.9a0b	90 03		bcc $9a10			bcc 	_I32DivideNoCarryIn
.9a0d	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9a10					_I32DivideNoCarryIn:
.9a10	88		dey				dey 								; loop round till division completed.
.9a11	d0 eb		bne $99fe			bne 	_I32DivideLoop
.9a13	7a		ply				ply 								; restore AXY and exit
.9a14	68		pla				pla
.9a15	60		rts				rts
.9a16					Int32ShiftDivide:
.9a16	48		pha				pha 								; save AY
.9a17	5a		phy				phy
.9a18	e8		inx				inx 								; clear S[X+2]
.9a19	e8		inx				inx
.9a1a	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.9a1d	ca		dex				dex
.9a1e	ca		dex				dex
.9a1f	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9a21					_I32SDLoop:
.9a21	20 34 9a	jsr $9a34			jsr 	DivideCheckSubtract 		; check if subtract possible
.9a24	e8		inx				inx
.9a25	e8		inx				inx
.9a26	20 d3 93	jsr $93d3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9a29	ca		dex				dex
.9a2a	ca		dex				dex
.9a2b	20 d3 93	jsr $93d3			jsr 	NSMRotateLeft
.9a2e	88		dey				dey 	 							; do 31 times
.9a2f	d0 f0		bne $9a21			bne 	_I32SDLoop
.9a31	7a		ply				ply 								; restore AY and exit
.9a32	68		pla				pla
.9a33	60		rts				rts
.9a34					DivideCheckSubtract:
.9a34	20 85 8a	jsr $8a85			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9a37	b0 04		bcs $9a3d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9a39	20 5f 8a	jsr $8a5f			jsr 	AddTopTwoStack 				; add it back in
.9a3c	18		clc				clc 								; and return False
.9a3d					_DCSExit:
.9a3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9a3e					MulInteger:
.9a3e	fa		plx				plx
.9a3f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9a42	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9a45	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a46	0a		asl a				asl 	a
.9a47	10 05		bpl $9a4e			bpl 	_NotRef
.9a49	48		pha				pha
.9a4a	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a4d	68		pla				pla
.9a4e					_NotRef:
.9a4e	0a		asl a				asl 	a 							; put MSB of type into A:7
.9a4f	30 0b		bmi $9a5c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a51	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a54	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9a57	f0 06		beq $9a5f			beq 	_IntegerCode 				; if clear, then we have two integers
.9a59	4c 92 9c	jmp $9c92			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9a5c					_StringData:
.9a5c	4c 47 9e	jmp $9e47			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a5f					_IntegerCode:
.9a5f	20 6c 9a	jsr $9a6c			jsr 	MultiplyShort
.9a62	c9 00		cmp #$00			cmp 	#0
.9a64	f0 05		beq $9a6b			beq 	_MIExit
.9a66	a9 04		lda #$04		lda	#4
.9a68	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9a6b					_MIExit:
.9a6b	60		rts				rts
.9a6c					MultiplyShort:
.9a6c	5a		phy				phy 								; save Y
.9a6d	20 94 93	jsr $9394			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a70	20 b9 93	jsr $93b9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a73	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a75					_I32MLoop:
.9a75	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a78	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9a7b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9a7e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9a81	f0 28		beq $9aab			beq 	_I32MExit 					; exit if zero
.9a83	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a86	29 01		and #$01			and 	#1
.9a88	f0 0e		beq $9a98			beq 	_I32MNoAdd
.9a8a	20 5f 8a	jsr $8a5f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a8d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a90	10 06		bpl $9a98			bpl 	_I32MNoAdd
.9a92					_I32ShiftRight:
.9a92	20 e0 93	jsr $93e0			jsr 	NSMShiftRight 				; shift S[X] right
.9a95	c8		iny				iny 								; increment shift count
.9a96	80 0a		bra $9aa2			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a98					_I32MNoAdd:
.9a98	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a9b	70 f5		bvs $9a92			bvs 	_I32ShiftRight 				; instead.
.9a9d	e8		inx				inx
.9a9e	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9aa1	ca		dex				dex
.9aa2					_I32MShiftUpper:
.9aa2	e8		inx				inx 								; shift S[X+2] right
.9aa3	e8		inx				inx
.9aa4	20 e0 93	jsr $93e0			jsr 	NSMShiftRight
.9aa7	ca		dex				dex
.9aa8	ca		dex				dex
.9aa9	80 ca		bra $9a75			bra 	_I32MLoop 					; try again.
.9aab					_I32MExit:
.9aab	20 b1 9a	jsr $9ab1			jsr 	CalculateSign
.9aae	98		tya				tya 								; shift in A
.9aaf	7a		ply				ply 								; restore Y and exit
.9ab0	60		rts				rts
.9ab1					CalculateSign:
.9ab1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9ab4	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9ab7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9aba	0a		asl a				asl 	a 							; shift bit 7 into carry
.9abb	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9abe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.89db					CompareStrings:
.89db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.89de	3d 01 06	and $0601,x			and 	NSStatus+1,x
.89e1	29 10		and #$10			and 	#NSBIsString
.89e3	f0 2c		beq $8a11			beq 	_CSTypeError
.89e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.89e8	85 36		sta $36				sta 	zTemp0
.89ea	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89ed	85 37		sta $37				sta 	zTemp0+1
.89ef	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89f2	85 38		sta $38				sta 	zTemp1
.89f4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89f7	85 39		sta $39				sta 	zTemp1+1
.89f9	5a		phy				phy 								; save Y so we can access strings
.89fa	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.89fc					_CSLoop:
.89fc	c8		iny				iny
.89fd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.89ff	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8a01	d0 06		bne $8a09			bne 	_CSDifferent
.8a03	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8a05	d0 f5		bne $89fc			bne 	_CSLoop 					; still comparing
.8a07					_CSExit:
.8a07	7a		ply				ply 								; reached end, return zero in A from EOS
.8a08	60		rts				rts
.8a09					_CSDifferent:
.8a09	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8a0b	90 fa		bcc $8a07			bcc		_CSExit
.8a0d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8a0f	80 f6		bra $8a07			bra 	_CSExit
.8a11					_CSTypeError:
.8a11	4c 3d 9e	jmp $9e3d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8a14					ShiftLeft:
.8a14	38		sec				sec
.8a15	80 01		bra $8a18			bra 	ShiftMain
.8a17					ShiftRight:
.8a17	18		clc				clc
.8a18					ShiftMain:
.8a18	fa		plx				plx 								; restore X
.8a19	08		php				php 								; save direction
.8a1a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a1d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a20	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a21	0a		asl a				asl 	a
.8a22	10 05		bpl $8a29			bpl 	_NotRef
.8a24	48		pha				pha
.8a25	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a28	68		pla				pla
.8a29					_NotRef:
.8a29	0a		asl a				asl 	a
.8a2a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8a2c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a2f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a32	f0 03		beq $8a37			beq 	_IntegerCode 				; if clear, then we have two integers
.8a34	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8a37					_IntegerCode:
.8a37	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8a3a	29 e0		and #$e0			and 	#$E0
.8a3c	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8a3f	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8a42	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8a45	d0 13		bne $8a5a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8a47					_SMLoop:
.8a47	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8a4a	30 11		bmi $8a5d			bmi 	_SMExit 					; exit if done.
.8a4c	28		plp				plp 								; restore direcition setting
.8a4d	08		php				php
.8a4e	90 05		bcc $8a55			bcc 	_SMRight
.8a50	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; shift left if CS
.8a53	80 f2		bra $8a47			bra 	_SMLoop
.8a55					_SMRight:
.8a55	20 e0 93	jsr $93e0			jsr 	NSMShiftRight 				; shift right if CC
.8a58	80 ed		bra $8a47			bra 	_SMLoop
.8a5a					_SMExit0:
.8a5a	20 bd 93	jsr $93bd			jsr 	NSMSetZero 					; return zero.
.8a5d					_SMExit:
.8a5d	28		plp				plp 								; throw direction
.8a5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8a5f					AddTopTwoStack:
.8a5f	18		clc				clc
.8a60	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8a63	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8a66	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a69	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8a6c	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8a6f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a72	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8a75	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8a78	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a7b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8a7e	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8a81	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a84	60		rts				rts
.8a85					SubTopTwoStack:
.8a85	38		sec				sec
.8a86	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8a89	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8a8c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a8f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8a92	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8a95	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a98	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8a9b	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8a9e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aa1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8aa4	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8aa7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8aaa	60		rts				rts
.8aab					AddInteger:
.8aab	fa		plx				plx
.8aac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8aaf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ab2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ab3	0a		asl a				asl 	a
.8ab4	10 05		bpl $8abb			bpl 	_NotRef
.8ab6	48		pha				pha
.8ab7	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8aba	68		pla				pla
.8abb					_NotRef:
.8abb	0a		asl a				asl 	a 							; put MSB of type into A:7
.8abc	30 0b		bmi $8ac9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8abe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ac1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ac4	f0 06		beq $8acc			beq 	_IntegerCode 				; if clear, then we have two integers
.8ac6	4c 1a 9b	jmp $9b1a			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8ac9					_StringData:
.8ac9	4c 7e 89	jmp $897e			jmp 	StringConcat							; at least one string - don't know both are strings.
.8acc					_IntegerCode:
.8acc					AddCode:
.8acc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8acf	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ad2	10 8b		bpl $8a5f			bpl 	AddTopTwoStack
.8ad4	20 85 8a	jsr $8a85			jsr 	SubTopTwoStack 				; do a physical subtraction
.8ad7	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8ada	10 09		bpl $8ae5			bpl 	_AddExit
.8adc	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8adf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ae2	20 72 93	jsr $9372			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8ae5					_AddExit:
.8ae5	60		rts				rts
.8ae6					SubInteger:
.8ae6	fa		plx				plx
.8ae7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8aea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8aed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8aee	0a		asl a				asl 	a
.8aef	10 05		bpl $8af6			bpl 	_NotRef
.8af1	48		pha				pha
.8af2	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8af5	68		pla				pla
.8af6					_NotRef:
.8af6	0a		asl a				asl 	a 							; put MSB of type into A:7
.8af7	30 0b		bmi $8b04			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8af9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8afc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8aff	f0 06		beq $8b07			beq 	_IntegerCode 				; if clear, then we have two integers
.8b01	4c 1f 9b	jmp $9b1f			jmp 	FloatingPointSub 							; otherwise at least one float.
.8b04					_StringData:
.8b04	4c 47 9e	jmp $9e47			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8b07					_IntegerCode:
.8b07	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8b0a	49 80		eor #$80			eor 	#$80
.8b0c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b0f	80 bb		bra $8acc			bra 	AddCode 					; and do the same code as add.
.8b11					AndInteger:
.8b11	fa		plx				plx
.8b12	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b15	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b18	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b19	0a		asl a				asl 	a
.8b1a	10 05		bpl $8b21			bpl 	_NotRef
.8b1c	48		pha				pha
.8b1d	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b20	68		pla				pla
.8b21					_NotRef:
.8b21	0a		asl a				asl 	a
.8b22	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b24	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b27	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b2a	f0 03		beq $8b2f			beq 	_IntegerCode 				; if clear, then we have two integers
.8b2c	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8b2f					_IntegerCode:
.8b2f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b32	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8b35	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b38	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b3b	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8b3e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b41	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b44	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8b47	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b4a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b4d	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8b50	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b53	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b56	60		rts				rts
.8b57					OraInteger:
.8b57	fa		plx				plx
.8b58	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b5b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b5e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b5f	0a		asl a				asl 	a
.8b60	10 05		bpl $8b67			bpl 	_NotRef
.8b62	48		pha				pha
.8b63	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b66	68		pla				pla
.8b67					_NotRef:
.8b67	0a		asl a				asl 	a
.8b68	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b6a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b6d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b70	f0 03		beq $8b75			beq 	_IntegerCode 				; if clear, then we have two integers
.8b72	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8b75					_IntegerCode:
.8b75	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b78	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8b7b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b7e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b81	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8b84	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b87	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b8a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8b8d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b90	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b93	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8b96	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b99	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b9c	60		rts				rts
.8b9d					EorInteger:
.8b9d	fa		plx				plx
.8b9e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ba1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ba4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ba5	0a		asl a				asl 	a
.8ba6	10 05		bpl $8bad			bpl 	_NotRef
.8ba8	48		pha				pha
.8ba9	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8bac	68		pla				pla
.8bad					_NotRef:
.8bad	0a		asl a				asl 	a
.8bae	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8bb0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8bb3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bb6	f0 03		beq $8bbb			beq 	_IntegerCode 				; if clear, then we have two integers
.8bb8	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8bbb					_IntegerCode:
.8bbb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8bbe	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8bc1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bc4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8bc7	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8bca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bcd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8bd0	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8bd3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bd6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8bd9	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8bdc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bdf	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8be2	60		rts				rts
.8be3					WordIndirect:
.8be3	fa		plx				plx
.8be4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8be7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bea	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8beb	0a		asl a				asl 	a
.8bec	10 05		bpl $8bf3			bpl 	_NotRef
.8bee	48		pha				pha
.8bef	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8bf2	68		pla				pla
.8bf3					_NotRef:
.8bf3	0a		asl a				asl 	a
.8bf4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8bf6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8bf9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bfc	f0 03		beq $8c01			beq 	_IntegerCode 				; if clear, then we have two integers
.8bfe	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8c01					_IntegerCode:
.8c01	20 cc 8a	jsr $8acc			jsr 	AddCode 					; add the two values
.8c04	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8c06	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c09	60		rts				rts
.8c0a					ByteIndirect:
.8c0a	fa		plx				plx
.8c0b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c0e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c11	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c12	0a		asl a				asl 	a
.8c13	10 05		bpl $8c1a			bpl 	_NotRef
.8c15	48		pha				pha
.8c16	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c19	68		pla				pla
.8c1a					_NotRef:
.8c1a	0a		asl a				asl 	a
.8c1b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c1d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c20	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c23	f0 03		beq $8c28			beq 	_IntegerCode 				; if clear, then we have two integers
.8c25	4c 3d 9e	jmp $9e3d			jmp 	TypeError 					; anything else, type mismatch.
.8c28					_IntegerCode:
.8c28	20 cc 8a	jsr $8acc			jsr 	AddCode 					; add the two values
.8c2b	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8c2d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9abf					ConvertInt16:
.9abf	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9ac2	8e 10 06	stx $0610			stx 	NSMantissa1
.9ac5	9c 18 06	stz $0618			stz 	NSMantissa2
.9ac8	9c 20 06	stz $0620			stz 	NSMantissa3
.9acb	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9ace	a2 00		ldx #$00			ldx 	#0 							; stack level
.9ad0	a9 0a		lda #$0a			lda 	#10 						; base
.9ad2	80 00		bra $9ad4			bra 	ConvertInt32
.9ad4					ConvertInt32:
.9ad4	5a		phy				phy
.9ad5	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ad7	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9ada	10 08		bpl $9ae4			bpl 	_CI32NotNeg
.9adc	48		pha				pha
.9add	a9 2d		lda #$2d			lda 	#'-'
.9adf	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9ae2	c8		iny				iny
.9ae3	68		pla				pla
.9ae4					_CI32NotNeg:
.9ae4	20 f2 9a	jsr $9af2			jsr 	_CI32DivideConvert 			; recursive conversion
.9ae7	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ae9	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9aec	7a		ply				ply
.9aed	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9aef	a9 6d		lda #$6d			lda 	#NumberBuffer & $FF
.9af1	60		rts				rts
.9af2					_CI32DivideConvert:
.9af2	e8		inx				inx 								; write to next slot up
.9af3	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.9af6	ca		dex				dex
.9af7	20 f4 99	jsr $99f4			jsr 	Int32Divide 				; divide
.9afa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9afd	48		pha				pha
.9afe	20 a3 99	jsr $99a3			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9b01	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; is it zero ?
.9b04	f0 06		beq $9b0c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9b06	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9b09	20 f2 9a	jsr $9af2			jsr 	_CI32DivideConvert 			; and recusrively call.
.9b0c					_CI32NoRecurse:
.9b0c	68		pla				pla 								; remainder
.9b0d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9b0f	90 02		bcc $9b13			bcc 	_CI32NotHex
.9b11	69 26		adc #$26			adc 	#6+32
.9b13					_CI32NotHex:
.9b13	69 30		adc #$30			adc 	#48
.9b15	99 6d 08	sta $086d,y			sta 	NumberBuffer,y 				; write out and exit
.9b18	c8		iny				iny
.9b19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8c31					PrecedenceLevel:
>8c31	04					.byte	 4	; $00 <<
>8c32	02					.byte	 2	; $01 <=
>8c33	02					.byte	 2	; $02 <>
>8c34	00					.byte	 0	; $03 !!3
>8c35	00					.byte	 0	; $04 ><
>8c36	02					.byte	 2	; $05 >=
>8c37	04					.byte	 4	; $06 >>
>8c38	00					.byte	 0	; $07 !!7
>8c39	00					.byte	 0	; $08 !!8
>8c3a	00					.byte	 0	; $09 !!9
>8c3b	00					.byte	 0	; $0a !!10
>8c3c	00					.byte	 0	; $0b !!11
>8c3d	00					.byte	 0	; $0c !!12
>8c3e	00					.byte	 0	; $0d !!13
>8c3f	00					.byte	 0	; $0e !!14
>8c40	00					.byte	 0	; $0f !!15
>8c41	00					.byte	 0	; $10 @
>8c42	00					.byte	 0	; $11 !!17
>8c43	00					.byte	 0	; $12 !!18
>8c44	00					.byte	 0	; $13 [
>8c45	04					.byte	 4	; $14 \
>8c46	00					.byte	 0	; $15 ]
>8c47	01					.byte	 1	; $16 ^
>8c48	00					.byte	 0	; $17 _
>8c49	00					.byte	 0	; $18 `
>8c4a	00					.byte	 0	; $19 !!25
>8c4b	00					.byte	 0	; $1a !!26
>8c4c	00					.byte	 0	; $1b {
>8c4d	01					.byte	 1	; $1c |
>8c4e	00					.byte	 0	; $1d }
>8c4f	00					.byte	 0	; $1e ~
>8c50	00					.byte	 0	; $1f [7m<7F>[m
>8c51	00					.byte	 0	; $20
>8c52	05					.byte	 5	; $21 !
>8c53	00					.byte	 0	; $22 "
>8c54	00					.byte	 0	; $23 #
>8c55	05					.byte	 5	; $24 $
>8c56	04					.byte	 4	; $25 %
>8c57	01					.byte	 1	; $26 &
>8c58	00					.byte	 0	; $27 '
>8c59	00					.byte	 0	; $28 (
>8c5a	00					.byte	 0	; $29 )
>8c5b	04					.byte	 4	; $2a *
>8c5c	03					.byte	 3	; $2b +
>8c5d	00					.byte	 0	; $2c ,
>8c5e	03					.byte	 3	; $2d -
>8c5f	00					.byte	 0	; $2e .
>8c60	04					.byte	 4	; $2f /
>8c61	00					.byte	 0	; $30 0
>8c62	00					.byte	 0	; $31 1
>8c63	00					.byte	 0	; $32 2
>8c64	00					.byte	 0	; $33 3
>8c65	00					.byte	 0	; $34 4
>8c66	00					.byte	 0	; $35 5
>8c67	00					.byte	 0	; $36 6
>8c68	00					.byte	 0	; $37 7
>8c69	00					.byte	 0	; $38 8
>8c6a	00					.byte	 0	; $39 9
>8c6b	00					.byte	 0	; $3a :
>8c6c	00					.byte	 0	; $3b ;
>8c6d	02					.byte	 2	; $3c <
>8c6e	02					.byte	 2	; $3d =
>8c6f	02					.byte	 2	; $3e >
>8c70	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8c71					EvaluateExpressionAt0:
.8c71	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8c73					EvaluateExpression:
.8c73	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8c75					EvaluateExpressionAtPrecedence:
.8c75	48		pha				pha 								; save precedence level
.8c76	20 44 8f	jsr $8f44			jsr 	EvaluateTerm 				; evaluate term into level X.
.8c79	68		pla				pla 								; restore precedence level.
.8c7a					_EXPRLoop:
.8c7a	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8c7c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7e	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8c80	b0 25		bcs $8ca7			bcs 	_EXPRExit
.8c82	da		phx				phx 								; read the operator precedence
.8c83	aa		tax				tax
.8c84	bd 31 8c	lda $8c31,x			lda 	PrecedenceLevel,x
.8c87	fa		plx				plx
.8c88	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8c8a	f0 1b		beq $8ca7			beq 	_EXPRExit
.8c8c	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8c8e	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8c90	c5 37		cmp $37				cmp 	zTemp0+1
.8c92	b0 13		bcs $8ca7			bcs		_EXPRExit 					; if current >= operator exit
.8c94	48		pha				pha 								; save current precedence.
.8c95	b1 30		lda ($30),y			lda 	(codePtr),y
.8c97	c8		iny				iny
.8c98	48		pha				pha
.8c99	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8c9b	e8		inx				inx 								; work out the right hand side.
.8c9c	20 75 8c	jsr $8c75			jsr 	EvaluateExpressionAtPrecedence
.8c9f	ca		dex				dex
.8ca0	68		pla				pla 								; get operator, call the code.
.8ca1	20 aa 8c	jsr $8caa			jsr 	_EXPRCaller
.8ca4	68		pla				pla 								; restore precedence level
.8ca5	80 d3		bra $8c7a			bra 	_EXPRLoop 					; and go round.
.8ca7					_EXPRExit:
.8ca7	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8ca9	60		rts				rts
.8caa					_EXPRCaller:
.8caa	da		phx				phx 								; save on stack, first thing is to restore it
.8cab	0a		asl a				asl 	a 							; double so can use vectors into X
.8cac	aa		tax				tax
.8cad	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9b1a					FloatingPointAdd:
.9b1a	20 bb 9c	jsr $9cbb			jsr 	FloatPrepare 				; prepare for floats
.9b1d	80 0b		bra $9b2a			bra 	FloatAdd
.9b1f					FloatingPointSub:
.9b1f	20 bb 9c	jsr $9cbb			jsr 	FloatPrepare 				; prepare for floats
.9b22					FloatSubtract:
.9b22	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9b25	49 80		eor #$80			eor 	#$80
.9b27	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9b2a					FloatAdd:
.9b2a	48		pha				pha
.9b2b	5a		phy				phy
.9b2c	20 cc 9c	jsr $9ccc			jsr 	NSNormalise 				; normalise S[X]
.9b2f	f0 54		beq $9b85			beq 	_FAReturn1
.9b31	e8		inx				inx 								; normalise S[X+1]
.9b32	20 cc 9c	jsr $9ccc			jsr 	NSNormalise
.9b35	ca		dex				dex
.9b36	c9 00		cmp #$00			cmp 	#0
.9b38	f0 6f		beq $9ba9			beq 	_FAExit 					; if so, just return A
.9b3a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b3d	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9b40	f0 1b		beq $9b5d			beq 	_FAExponentsEqual
.9b42	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9b45	a8		tay				tay
.9b46	38		sec				sec 								; do a signed comparison of the exponents.
.9b47	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9b4a	50 02		bvc $9b4e			bvc 	_FANoSignedChange
.9b4c	49 80		eor #$80			eor 	#$80
.9b4e					_FANoSignedChange:
.9b4e	29 80		and #$80			and 	#$80
.9b50	10 03		bpl $9b55			bpl 	_FAHaveMax
.9b52	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9b55					_FAHaveMax:
.9b55	20 ac 9b	jsr $9bac			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9b58	e8		inx				inx
.9b59	20 ac 9b	jsr $9bac			jsr 	_FAShiftToExponent
.9b5c	ca		dex				dex
.9b5d					_FAExponentsEqual:
.9b5d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9b60	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9b63	30 10		bmi $9b75			bmi 	_FADifferentSigns
.9b65	20 5f 8a	jsr $8a5f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9b68	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9b6b	10 3c		bpl $9ba9			bpl 	_FAExit 					; if no, we are done.
.9b6d	20 e0 93	jsr $93e0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9b70	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9b73	80 34		bra $9ba9			bra 	_FAExit
.9b75					_FADifferentSigns:
.9b75	20 85 8a	jsr $8a85			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9b78	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9b7b	10 2c		bpl $9ba9			bpl 	_FAExit 					; if no, we are done.
.9b7d	20 69 93	jsr $9369			jsr 	NSMNegate 					; netate result
.9b80	20 72 93	jsr $9372			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b83	80 24		bra $9ba9			bra 	_FAExit
.9b85					_FAReturn1:
.9b85	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9b88	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9b8b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9b8e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b91	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9b94	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9b97	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9b9a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9b9d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9ba0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9ba3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9ba6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9ba9					_FAExit:
.9ba9	7a		ply				ply
.9baa	68		pla				pla
.9bab	60		rts				rts
.9bac					_FAShiftToExponent:
.9bac					_FAShiftToExponent2:
.9bac	98		tya				tya 								; compare Y to exponent
.9bad	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9bb0	f0 08		beq $9bba			beq 	_FASEExit 					; exit if so.
.9bb2	20 e0 93	jsr $93e0			jsr 	NSMShiftRight	 			; shift the mantissa right
.9bb5	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9bb8	80 f2		bra $9bac			bra 	_FAShiftToExponent2
.9bba					_FASEExit:
.9bba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9bbb					CompareFloat:
.9bbb	20 22 9b	jsr $9b22			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9bbe	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9bc1	29 f8		and #$f8			and 	#$F8
.9bc3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9bc6	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9bc9	f0 09		beq $9bd4			beq 	_FCExit 					; zero, so approximately identical
.9bcb	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9bcd	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9bd0	10 02		bpl $9bd4			bpl 	_FCExit
.9bd2					_FCNegative:
.9bd2	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9bd4					_FCExit:
.9bd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9bd5					FDivideCommand:
.9bd5	fa		plx				plx	 								; restore stack position
.9bd6	20 bb 9c	jsr $9cbb			jsr 	FloatPrepare 				; prepare for floats
.9bd9					FloatDivide:
.9bd9	48		pha				pha
.9bda	e8		inx				inx
.9bdb	20 cc 9c	jsr $9ccc			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9bde	ca		dex				dex
.9bdf	c9 00		cmp #$00			cmp 	#0
.9be1	f0 20		beq $9c03			beq 	_FDZero
.9be3	20 cc 9c	jsr $9ccc			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9be6	f0 19		beq $9c01			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9be8	20 16 9a	jsr $9a16			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9beb	20 a3 99	jsr $99a3			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9bee	20 cc 9c	jsr $9ccc			jsr		NSNormalise 				; renormalise
.9bf1	20 b1 9a	jsr $9ab1			jsr 	CalculateSign 				; calculate result sign
.9bf4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9bf7	38		sec				sec
.9bf8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9bfb	38		sec				sec
.9bfc	e9 1e		sbc #$1e			sbc 	#30
.9bfe	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9c01					_FDExit:
.9c01	68		pla				pla
.9c02	60		rts				rts
.9c03					_FDZero:
.9c03	a9 03		lda #$03		lda	#3
.9c05	4c 6a 88	jmp $886a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c08					FloatFractionalPart:
.9c08	5a		phy				phy
.9c09	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9c0c	29 7f		and #$7f			and 	#$7F
.9c0e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9c11	20 cc 9c	jsr $9ccc			jsr 	NSNormalise
.9c14	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c17	38		sec				sec
.9c18	e9 e0		sbc #$e0			sbc 	#$E0
.9c1a	90 31		bcc $9c4d			bcc 	_FFPExit 					; already fractional
.9c1c	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c1e	b0 2a		bcs $9c4a			bcs 	_FFPZero
.9c20	a8		tay				tay 								; put count to do in Y
.9c21	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9c24	20 4f 9c	jsr $9c4f			jsr 	_FFPPartial
.9c27	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9c2a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9c2d	20 4f 9c	jsr $9c4f			jsr 	_FFPPartial
.9c30	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9c33	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9c36	20 4f 9c	jsr $9c4f			jsr 	_FFPPartial
.9c39	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c3c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9c3f	20 4f 9c	jsr $9c4f			jsr 	_FFPPartial
.9c42	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9c45	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; zeroed check.
.9c48	d0 03		bne $9c4d			bne 	_FFPExit
.9c4a					_FFPZero:
.9c4a	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.9c4d					_FFPExit:
.9c4d	7a		ply				ply
.9c4e	60		rts				rts
.9c4f					_FFPPartial:
.9c4f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9c51	f0 17		beq $9c6a			beq 	_FFFPPExit
.9c53	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9c55	b0 0c		bcs $9c63			bcs 	_FFFPPWholeByte
.9c57	5a		phy				phy
.9c58					_FFFPPLeft:
.9c58	0a		asl a				asl 	a
.9c59	88		dey				dey
.9c5a	d0 fc		bne $9c58			bne 	_FFFPPLeft
.9c5c	7a		ply				ply
.9c5d					_FFFPPRight:
.9c5d	4a		lsr a				lsr 	a
.9c5e	88		dey				dey
.9c5f	d0 fc		bne $9c5d			bne 	_FFFPPRight
.9c61	80 07		bra $9c6a			bra 	_FFFPPExit
.9c63					_FFFPPWholeByte:
.9c63	98		tya				tya 								; subtract 8 from count
.9c64	38		sec				sec
.9c65	e9 08		sbc #$08			sbc 	#8
.9c67	a8		tay				tay
.9c68	a9 00		lda #$00			lda 	#0 							; and clear all
.9c6a					_FFFPPExit:
.9c6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c6b					FloatIntegerPart:
.9c6b	48		pha				pha
.9c6c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9c6f	f0 1f		beq $9c90			beq 	_FIPExit 					; if so do nothing
.9c71	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; is it zero ?
.9c74	f0 17		beq $9c8d			beq 	_FIPZero 					; if so return zero.
.9c76	20 cc 9c	jsr $9ccc			jsr 	NSNormalise 				; normalise
.9c79	f0 12		beq $9c8d			beq 	_FIPZero 					; normalised to zero, exit zero
.9c7b					_FIPShift:
.9c7b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9c7e	10 08		bpl $9c88			bpl 	_FIPCheckZero
.9c80	20 e0 93	jsr $93e0			jsr 	NSMShiftRight 				; shift mantissa right
.9c83	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9c86	80 f3		bra $9c7b			bra 	_FIPShift
.9c88					_FIPCheckZero:
.9c88	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; avoid -0 problem
.9c8b	d0 03		bne $9c90			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c8d					_FIPZero:
.9c8d	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.9c90					_FIPExit:
.9c90	68		pla				pla
.9c91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c92					FloatingPointMultiply:
.9c92	20 bb 9c	jsr $9cbb			jsr 	FloatPrepare 				; prepare for floats
.9c95					FloatMultiply:
.9c95	48		pha				pha
.9c96	20 cc 9c	jsr $9ccc			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c99	f0 1b		beq $9cb6			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c9b	e8		inx				inx
.9c9c	20 cc 9c	jsr $9ccc			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c9f	ca		dex				dex
.9ca0	c9 00		cmp #$00			cmp 	#0
.9ca2	f0 0f		beq $9cb3			beq 	_FDSetZero
.9ca4	20 6c 9a	jsr $9a6c			jsr 	MultiplyShort 				; calculate the result.
.9ca7	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9caa	18		clc				clc
.9cab	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9cae	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9cb1	80 03		bra $9cb6			bra 	_FDExit
.9cb3					_FDSetZero:
.9cb3	20 bd 93	jsr $93bd			jsr 	NSMSetZero 					; return 0
.9cb6					_FDExit:
.9cb6	20 cc 9c	jsr $9ccc			jsr 	NSNormalise 				; normalise the result
.9cb9	68		pla				pla
.9cba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9cbb					FloatPrepare:
.9cbb	20 83 8d	jsr $8d83			jsr 	DereferenceTopTwo 			; dereference the top two values
.9cbe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9cc1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9cc4	29 10		and #$10			and 	#NSBIsString
.9cc6	d0 01		bne $9cc9			bne 	_FDType
.9cc8	60		rts				rts
.9cc9					_FDType:
.9cc9	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.9ccc					NSNormalise:
.9ccc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9ccf	29 80		and #$80			and 	#$80
.9cd1	09 08		ora #$08			ora 	#NSTFloat
.9cd3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9cd6	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; if zero exit
.9cd9	d0 09		bne $9ce4			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9cdb	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9cde	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9ce1	a9 00		lda #$00			lda 	#0 							; set Z flag
.9ce3	60		rts				rts
.9ce4					_NSNormaliseOptimise:
.9ce4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ce7	d0 22		bne $9d0b			bne 	_NSNormaliseLoop
.9ce9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9cec	30 1d		bmi $9d0b			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9cee	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9cf1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9cf4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9cf7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9cfa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9cfd	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9d00	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9d03	38		sec				sec
.9d04	e9 08		sbc #$08			sbc 	#8
.9d06	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9d09	80 d9		bra $9ce4			bra 	_NSNormaliseOptimise
.9d0b					_NSNormaliseLoop:
.9d0b	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9d0e	70 08		bvs $9d18			bvs 	_NSNExit 					; exit if so with Z flag clear
.9d10	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; shift mantissa left
.9d13	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9d16	80 f3		bra $9d0b			bra 	_NSNormaliseLoop
.9d18					_NSNExit:
.9d18	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8cb0					AssignNumber:
.8cb0	5a		phy				phy
.8cb1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8cb4	85 36		sta $36				sta 	zTemp0
.8cb6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cb9	85 37		sta $37				sta 	zTemp0+1
.8cbb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8cbe	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8cc0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cc3	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8cc5	c9 08		cmp #$08			cmp 	#NSTFloat
.8cc7	f0 2a		beq $8cf3			beq 	_ANFloat
.8cc9	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8ccc	f0 05		beq $8cd3			beq		_ANNotFloat
.8cce	e8		inx				inx
.8ccf	20 6b 9c	jsr $9c6b			jsr 	FloatIntegerPart 			; make it an integer
.8cd2	ca		dex				dex
.8cd3					_ANNotFloat:
.8cd3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8cd6	29 03		and #$03			and 	#3
.8cd8	d0 05		bne $8cdf			bne 	_ANByteWord
.8cda	20 ff 8c	jsr $8cff			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8cdd	80 1e		bra $8cfd			bra 	_ANExit
.8cdf					_ANByteWord:
.8cdf	48		pha				pha 								; save count
.8ce0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8ce3	92 36		sta ($36)			sta 	(zTemp0)
.8ce5	68		pla				pla
.8ce6	c9 01		cmp #$01			cmp	 	#1
.8ce8	f0 13		beq $8cfd			beq 	_ANExit
.8cea	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8ced	a0 01		ldy #$01			ldy 	#1
.8cef	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf1	80 0a		bra $8cfd			bra 	_ANExit
.8cf3					_ANFloat:
.8cf3	20 ff 8c	jsr $8cff			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8cf6	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8cf9	a0 04		ldy #$04			ldy 	#4
.8cfb	91 36		sta ($36),y			sta 	(zTemp0),y
.8cfd					_ANExit:
.8cfd	7a		ply				ply
.8cfe	60		rts				rts
.8cff					_ANCopy4PackSign:
.8cff	a0 03		ldy #$03			ldy 	#3
.8d01	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8d04	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8d06	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d09	91 36		sta ($36),y			sta 	(zTemp0),y
.8d0b	88		dey				dey
.8d0c	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8d0f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d11	88		dey				dey
.8d12	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d15	91 36		sta ($36),y			sta 	(zTemp0),y
.8d17	88		dey				dey
.8d18	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d1b	91 36		sta ($36),y			sta 	(zTemp0),y
.8d1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8d1e					AssignString:
.8d1e	5a		phy				phy
.8d1f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d22	85 38		sta $38				sta 	zTemp1
.8d24	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d27	85 39		sta $39				sta 	zTemp1+1
.8d29	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d2c	85 36		sta $36				sta 	zTemp0
.8d2e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d31	85 37		sta $37				sta 	zTemp0+1
.8d33	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8d35	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d37	f0 23		beq $8d5c			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8d39	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8d3a	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8d3c	e9 02		sbc #$02			sbc 	#2
.8d3e	85 3c		sta $3c				sta 	zsTemp
.8d40	a0 01		ldy #$01			ldy 	#1
.8d42	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d44	e9 00		sbc #$00			sbc 	#0
.8d46	85 3d		sta $3d				sta 	zsTemp+1
.8d48	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8d4a					_ASGetLength:
.8d4a	c8		iny				iny
.8d4b	b1 38		lda ($38),y			lda 	(zTemp1),y
.8d4d	d0 fb		bne $8d4a			bne 	_ASGetLength
.8d4f	98		tya				tya 								; is this length <= current length
.8d50	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8d52	90 20		bcc $8d74			bcc 	_ASCopyString
.8d54	f0 1e		beq $8d74			beq 	_ASCopyString
.8d56	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8d58	a0 01		ldy #$01			ldy 	#1
.8d5a	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8d5c					_ASNewStringRequired:
.8d5c	e8		inx				inx 								; concrete the new string.
.8d5d	20 b2 9f	jsr $9fb2			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8d60	ca		dex				dex
.8d61	18		clc				clc
.8d62	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8d65	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8d67	92 36		sta ($36)			sta 	(zTemp0)
.8d69	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d6c	69 00		adc #$00			adc 	#0
.8d6e	a0 01		ldy #$01			ldy 	#1
.8d70	91 36		sta ($36),y			sta 	(zTemp0),y
.8d72	80 0d		bra $8d81			bra 	_ASExit
.8d74					_ASCopyString:
.8d74	a0 00		ldy #$00			ldy 	#0
.8d76					_ASCopyLoop:
.8d76	b1 38		lda ($38),y			lda 	(zTemp1),y
.8d78	c8		iny				iny
.8d79	c8		iny				iny
.8d7a	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8d7c	88		dey				dey
.8d7d	c9 00		cmp #$00			cmp 	#0
.8d7f	d0 f5		bne $8d76			bne 	_ASCopyLoop
.8d81					_ASExit:
.8d81	7a		ply				ply
.8d82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8d83					DereferenceTopTwo:
.8d83	e8		inx				inx
.8d84	20 88 8d	jsr $8d88			jsr 	Dereference 				; deref x+1
.8d87	ca		dex				dex  								; falls through to deref x
.8d88					Dereference:
.8d88	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8d8b	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8d8d	f0 57		beq $8de6			beq 	_DRFExit 					; not a reference
.8d8f	5a		phy				phy
.8d90	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8d93	85 36		sta $36				sta 	zTemp0
.8d95	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d98	85 37		sta $37				sta 	zTemp0+1
.8d9a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8d9d	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8d9f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8da2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8da5	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8da7	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8da9	f0 0f		beq $8dba			beq 	_DRFDereferenceTwo
.8dab	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8dad	f0 39		beq $8de8			beq 	_DRFFull
.8daf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8db2	29 03		and #$03			and 	#3
.8db4	f0 32		beq $8de8			beq 	_DRFFull 					; the whole word
.8db6	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8db8	f0 07		beq $8dc1			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8dba					_DRFDereferenceTwo:
.8dba	a0 01		ldy #$01			ldy 	#1
.8dbc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dbe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dc1					_DRFClear23:
.8dc1	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8dc4	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8dc7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8dca	29 18		and #$18			and 	#NSBTypeMask
.8dcc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dcf	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8dd1	d0 12		bne $8de5			bne 	_DRFNotString
.8dd3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8dd6	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8dd9	d0 0a		bne $8de5			bne 	_DRFNotString
.8ddb	a9 e7		lda #$e7			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8ddd	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8de0	a9 8d		lda #$8d			lda 	#_DRFNullString >> 8
.8de2	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8de5					_DRFNotString
.8de5	7a		ply				ply 								; restore Y and exit
.8de6					_DRFExit:
.8de6	60		rts				rts
.8de7					_DRFNullString:
>8de7	00						.byte 	0
.8de8					_DRFFull:
.8de8	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8dea	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dec	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8def	c8		iny				iny
.8df0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8df2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8df5	c8		iny				iny
.8df6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8df8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8dfb	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8dfe	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8e01	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8e03	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8e06	f0 06		beq $8e0e			beq 	_DRFNoExponent
.8e08	c8		iny				iny 								; if not, read the exponent as well.
.8e09	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e0b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e0e					_DRFNoExponent:
.8e0e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8e11	10 0d		bpl $8e20			bpl 	_DRFExit2 					; if not, then exit.
.8e13	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8e15	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e18	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8e1b	09 80		ora #$80			ora 	#NSBIsNegative
.8e1d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e20					_DRFExit2:
.8e20	7a		ply				ply
.8e21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8e22					EncodeNumberStart:
.8e22	38		sec				sec
.8e23	80 01		bra $8e26			bra 	EncodeNumberContinue+1
.8e25					EncodeNumberContinue:
.8e25	18		clc				clc
.8e26					EncodeNumber:
.8e26	08		php				php 								; save reset.
.8e27	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8e29	f0 12		beq $8e3d			beq 	_ENIsOkay
.8e2b	c9 30		cmp #$30			cmp 	#"0"
.8e2d	90 04		bcc $8e33			bcc 	_ENBadNumber
.8e2f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e31	90 0a		bcc $8e3d			bcc 	_ENIsOkay
.8e33					_ENBadNumber:
.8e33	28		plp				plp 								; throw saved reset
.8e34	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8e37	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8e39	f0 7e		beq $8eb9			beq 	_ENConstructFinal
.8e3b					_ENFail:
.8e3b	18		clc				clc 								; not allowed
.8e3c	60		rts				rts
.8e3d					_ENIsOkay:
.8e3d	28		plp				plp 								; are we restarting
.8e3e	90 15		bcc $8e55			bcc 	_ENNoRestart
.8e40					_ENStartEncode:
.8e40	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8e42	f0 0c		beq $8e50			beq 	_ENFirstDP
.8e44	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8e46	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.8e49	a9 01		lda #$01			lda 	#ESTA_Low
.8e4b					_ENExitChange:
.8e4b	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8e4e	38		sec				sec
.8e4f	60		rts				rts
.8e50					_ENFirstDP:
.8e50	20 bd 93	jsr $93bd			jsr 	NSMSetZero 					; clear integer part
.8e53	80 3f		bra $8e94			bra 	_ESTASwitchFloat			; go straight to float and exi
.8e55					_ENNoRestart:
.8e55	48		pha				pha 								; save on stack.
.8e56	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8e59	c9 01		cmp #$01			cmp 	#ESTA_Low
.8e5b	f0 09		beq $8e66			beq  	_ESTALowState
.8e5d	c9 02		cmp #$02			cmp 	#ESTA_High
.8e5f	f0 29		beq $8e8a			beq 	_ESTAHighState
.8e61	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8e63	f0 3b		beq $8ea0			beq 	_ESTADecimalState
>8e65	db						.byte 	$DB 						; causes a break in the emulator
.8e66					_ESTALowState:
.8e66	68		pla				pla 								; get value back
.8e67	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8e69	f0 29		beq $8e94			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8e6b	29 0f		and #$0f			and 	#15 						; make digit
.8e6d	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8e70	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8e73	0a		asl a				asl 	a
.8e74	0a		asl a				asl 	a
.8e75	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8e78	0a		asl a				asl 	a
.8e79	6d 06 07	adc $0706			adc 	DigitTemp
.8e7c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e7f	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8e81	90 05		bcc $8e88			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8e83	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8e85	8d 05 07	sta $0705			sta 	EncodeState
.8e88					_ESTANoSwitch:
.8e88	38		sec				sec
.8e89	60		rts				rts
.8e8a					_ESTAHighState:
.8e8a	68		pla				pla 								; get value back
.8e8b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8e8d	f0 05		beq $8e94			beq 	_ESTASwitchFloat
.8e8f	20 f3 8e	jsr $8ef3			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8e92	38		sec				sec
.8e93	60		rts				rts
.8e94					_ESTASwitchFloat:
.8e94	9c 07 07	stz $0707			stz 	DecimalCount
.8e97	e8		inx				inx 								; zero the decimal additive.
.8e98	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.8e9b	ca		dex				dex
.8e9c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8e9e	80 ab		bra $8e4b			bra 	_ENExitChange
.8ea0					_ESTADecimalState:
.8ea0	68		pla				pla 								; digit.
.8ea1	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8ea3	f0 96		beq $8e3b			beq 	_ENFail
.8ea5	e8		inx				inx 								; put digit into fractional part of X+1
.8ea6	20 f3 8e	jsr $8ef3			jsr 	ESTAShiftDigitIntoMantissa
.8ea9	ca		dex				dex
.8eaa	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8ead	ad 07 07	lda $0707			lda 	DecimalCount
.8eb0	c9 0b		cmp #$0b			cmp 	#11
.8eb2	f0 02		beq $8eb6			beq 	_ESTADSFail
.8eb4	38		sec				sec
.8eb5	60		rts				rts
.8eb6					_ESTADSFail:
.8eb6	4c 38 9e	jmp $9e38			jmp 	RangeError
.8eb9					_ENConstructFinal:
.8eb9	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8ebc	f0 33		beq $8ef1			beq 	_ENCFExit 					; no decimals
.8ebe	5a		phy				phy
.8ebf	0a		asl a				asl 	a 							; x 4 and CLC
.8ec0	0a		asl a				asl 	a
.8ec1	6d 07 07	adc $0707			adc 	DecimalCount
.8ec4	a8		tay				tay
.8ec5	b9 f7 9d	lda $9df7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8ec8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ecb	b9 f8 9d	lda $9df8,y			lda 	DecimalScalarTable-5+1,y
.8ece	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8ed1	b9 f9 9d	lda $9df9,y			lda 	DecimalScalarTable-5+2,y
.8ed4	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8ed7	b9 fa 9d	lda $9dfa,y			lda 	DecimalScalarTable-5+3,y
.8eda	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8edd	b9 fb 9d	lda $9dfb,y			lda 	DecimalScalarTable-5+4,y
.8ee0	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8ee3	a9 08		lda #$08			lda 	#NSTFloat
.8ee5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ee8	7a		ply				ply
.8ee9	e8		inx				inx 								; multiply decimal const by decimal scalar
.8eea	20 95 9c	jsr $9c95			jsr 	FloatMultiply
.8eed	ca		dex				dex
.8eee	20 2a 9b	jsr $9b2a			jsr 	FloatAdd 					; add to integer part.
.8ef1					_ENCFExit:
.8ef1	18		clc				clc 								; reject the digit.
.8ef2	60		rts				rts
.8ef3					ESTAShiftDigitIntoMantissa:
.8ef3	29 0f		and #$0f			and 	#15 						; save digit
.8ef5	48		pha				pha
.8ef6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8ef9	48		pha				pha
.8efa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8efd	48		pha				pha
.8efe	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f01	48		pha				pha
.8f02	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f05	48		pha				pha
.8f06	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 2
.8f09	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 4
.8f0c	18		clc				clc 								; pop mantissa and add
.8f0d	68		pla				pla
.8f0e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8f11	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f14	68		pla				pla
.8f15	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8f18	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f1b	68		pla				pla
.8f1c	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8f1f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f22	68		pla				pla
.8f23	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8f26	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8f29	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 10
.8f2c	68		pla				pla 								; add digit
.8f2d	18		clc				clc
.8f2e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8f31	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f34	90 0d		bcc $8f43			bcc 	_ESTASDExit
.8f36	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8f39	d0 08		bne $8f43			bne 	_ESTASDExit
.8f3b	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8f3e	d0 03		bne $8f43			bne 	_ESTASDExit
.8f40	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8f43					_ESTASDExit:
.8f43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8f44					EvaluateTerm:
.8f44	b1 30		lda ($30),y			lda 	(codePtr),y
.8f46	30 18		bmi $8f60			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8f48	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8f4a	b0 6f		bcs $8fbb			bcs 	_ETVariable
.8f4c	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8f4e	90 6e		bcc $8fbe			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8f50	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f52	b0 6a		bcs $8fbe			bcs 	_ETPuncUnary
.8f54	20 22 8e	jsr $8e22			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8f57					_ETNumber:
.8f57	c8		iny				iny 								; keep encoding until we have the numbers
.8f58	b1 30		lda ($30),y			lda 	(codePtr),y
.8f5a	20 25 8e	jsr $8e25			jsr 	EncodeNumberContinue
.8f5d	b0 f8		bcs $8f57			bcs 	_ETNumber 					; go back if accepted.
.8f5f	60		rts				rts
.8f60					_ETCheckUnary:
.8f60	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8f62	f0 41		beq $8fa5			beq 	_ETString
.8f64	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8f66	f0 12		beq $8f7a			beq 	_ETHexConstant
.8f68	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8f6a	90 0b		bcc $8f77			bcc 	_ETSyntaxError
.8f6c	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8f6e	b0 07		bcs $8f77			bcs 	_ETSyntaxError
.8f70	da		phx				phx 								; push X on the stack
.8f71	0a		asl a				asl 	a 							; put vector x 2 into X
.8f72	aa		tax				tax
.8f73	c8		iny				iny 								; consume unary function token
.8f74	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8f77					_ETSyntaxError:
.8f77	4c 33 9e	jmp $9e33			jmp 	SyntaxError
.8f7a					_ETHexConstant:
.8f7a	c8		iny				iny 								; skip #
.8f7b	c8		iny				iny 								; skip count
.8f7c	20 bd 93	jsr $93bd			jsr 	NSMSetZero 					; clear result
.8f7f					_ETHLoop:
.8f7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8f81	c8		iny				iny 								; and consume
.8f82	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8f84	f0 1e		beq $8fa4			beq 	_ETHExit
.8f86	48		pha				pha 								; save on stack.
.8f87	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 2
.8f8a	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 4
.8f8d	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 8
.8f90	20 d2 93	jsr $93d2			jsr 	NSMShiftLeft 				; x 16
.8f93	68		pla				pla 								; ASCII
.8f94	c9 41		cmp #$41			cmp 	#'A'
.8f96	90 02		bcc $8f9a			bcc 	_ETHNotChar
.8f98	e9 07		sbc #$07			sbc 	#7
.8f9a					_ETHNotChar:
.8f9a	29 0f		and #$0f			and 	#15 						; digit now
.8f9c	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8f9f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fa2	80 db		bra $8f7f			bra 	_ETHLoop 					; go round.
.8fa4					_ETHExit:
.8fa4	60		rts				rts
.8fa5					_ETString:
.8fa5	c8		iny				iny 								; look at length
.8fa6	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa8	48		pha				pha
.8fa9	c8		iny				iny 								; first character
.8faa	20 0e 99	jsr $990e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8fad	68		pla				pla 								; restore count and save
.8fae	85 36		sta $36				sta 	zTemp0
.8fb0	98		tya				tya 								; add length to Y to skip it.
.8fb1	18		clc				clc
.8fb2	65 36		adc $36				adc 	zTemp0
.8fb4	a8		tay				tay
.8fb5	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8fb7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fba	60		rts				rts
.8fbb					_ETVariable:
.8fbb	4c 15 90	jmp $9015			jmp 	VariableHandler
.8fbe					_ETPuncUnary:
.8fbe	c8		iny				iny 								; consume the unary character
.8fbf	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8fc1	f0 2d		beq $8ff0			beq 	_ETUnaryNegate
.8fc3	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8fc5	f0 39		beq $9000			beq 	_ETDereference
.8fc7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8fc9	f0 43		beq $900e			beq 	_ETParenthesis
.8fcb	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8fcd	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8fcf	f0 06		beq $8fd7			beq 	_ETIndirection
.8fd1	e6 36		inc $36				inc 	zTemp0
.8fd3	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8fd5	d0 a0		bne $8f77			bne 	_ETSyntaxError
.8fd7					_ETIndirection:
.8fd7	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8fd9	1a		inc a				inc 	a
.8fda	48		pha				pha
.8fdb	20 44 8f	jsr $8f44			jsr 	EvaluateTerm				; evaluate the term
.8fde	20 88 8d	jsr $8d88			jsr 	Dereference 				; dereference it.
.8fe1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8fe4	d0 07		bne $8fed			bne 	_ETTypeMismatch
.8fe6	68		pla				pla 								; indirection 1-2
.8fe7	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8fe9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fec	60		rts				rts
.8fed					_ETTypeMismatch:
.8fed	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.8ff0					_ETUnaryNegate:
.8ff0	20 44 8f	jsr $8f44			jsr 	EvaluateTerm				; evaluate the term
.8ff3	20 88 8d	jsr $8d88			jsr 	Dereference 				; dereference it.
.8ff6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8ff9	29 10		and #$10			and 	#NSTString
.8ffb	d0 f0		bne $8fed			bne 	_ETTypeMismatch
.8ffd	4c 69 93	jmp $9369			jmp 	NSMNegate  					; just toggles the sign bit.
.9000					_ETDereference:
.9000	20 44 8f	jsr $8f44			jsr 	EvaluateTerm				; evaluate the term
.9003	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9006	29 20		and #$20			and 	#NSBIsReference
.9008	f0 e3		beq $8fed			beq 	_ETTypeMismatch
.900a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.900d	60		rts				rts
.900e					_ETParenthesis:
.900e	20 73 8c	jsr $8c73			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9011	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; check for )
.9014	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9015					VariableHandler:
.9015	b1 30		lda ($30),y			lda 	(codePtr),y
.9017	18		clc				clc
.9018	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.901a	85 37		sta $37				sta 	zTemp0+1
.901c	c8		iny				iny
.901d	b1 30		lda ($30),y			lda 	(codePtr),y
.901f	85 36		sta $36				sta 	zTemp0
.9021	c8		iny				iny
.9022	18		clc				clc									; copy variable address+3 to mantissa
.9023	69 03		adc #$03			adc 	#3
.9025	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9028	a5 37		lda $37				lda 	zTemp0+1
.902a	69 00		adc #$00			adc 	#0
.902c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.902f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9032	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9035	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9038	5a		phy				phy
.9039	a0 02		ldy #$02			ldy 	#2 							; read type
.903b	b1 36		lda ($36),y			lda 	(zTemp0),y
.903d	7a		ply				ply
.903e	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9040	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9042	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9045	29 04		and #$04			and 	#NSBIsArray
.9047	d0 01		bne $904a			bne 	_VHArray
.9049	60		rts				rts
.904a					_VHArray:
.904a	e8		inx				inx
.904b	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger 		; get the 1st index.
.904e	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9050	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9053	b1 30		lda ($30),y			lda 	(codePtr),y
.9055	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9057	d0 06		bne $905f			bne 	_VHNoSecondIndex
.9059	c8		iny				iny 								; skip the comma
.905a	e8		inx				inx
.905b	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.905e	ca		dex				dex
.905f					_VHNoSecondIndex:
.905f	ca		dex				dex 								; set X back.
.9060	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; and check the right bracket.
.9063	5a		phy				phy 								; save position
.9064	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9067	85 3e		sta $3e				sta 	zaTemp
.9069	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.906c	85 3f		sta $3f				sta 	zaTemp+1
.906e	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9070	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9072	f0 02		beq $9076			beq 	_VHHas2Mask
.9074	a9 ff		lda #$ff			lda 	#$FF
.9076					_VHHas2Mask:
.9076	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9079	f0 54		beq $90cf			beq 	_VHBadIndex
.907b	0a		asl a				asl 	a 							; carry will be set if a second index
.907c	90 09		bcc $9087			bcc 	_VHCheckFirstIndex
.907e	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9080	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9082	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9085	90 48		bcc $90cf			bcc 	_VHBadIndex
.9087					_VHCheckFirstIndex:
.9087	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9089	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.908b	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.908e	90 3f		bcc $90cf			bcc 	_VHBadIndex
.9090	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9092	64 37		stz $37				stz 	zTemp0+1
.9094	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9097	30 0f		bmi $90a8			bmi 	_VHNoMultiply
.9099	da		phx				phx
.909a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.909d	48		pha				pha
.909e	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.90a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.90a2	1a		inc a				inc 	a 							; add 1 for zero base
.90a3	fa		plx				plx
.90a4	20 e5 9d	jsr $9de5			jsr 	Multiply8x8 				; calculate -> Z0
.90a7	fa		plx				plx
.90a8					_VHNoMultiply:
.90a8	18		clc				clc
.90a9	a5 36		lda $36				lda 	zTemp0
.90ab	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.90ae	85 36		sta $36				sta 	zTemp0
.90b0	a5 37		lda $37				lda 	zTemp0+1
.90b2	69 00		adc #$00			adc 	#0
.90b4	85 37		sta $37				sta 	zTemp0+1
.90b6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.90b9	20 1b 82	jsr $821b			jsr 	ScaleByBaseType
.90bc	18		clc				clc
.90bd	b2 3e		lda ($3e)			lda 	(zaTemp)
.90bf	65 36		adc $36				adc 	zTemp0
.90c1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90c4	a0 01		ldy #$01			ldy 	#1
.90c6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.90c8	65 37		adc $37				adc 	zTemp0+1
.90ca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90cd	7a		ply				ply 								; restore position
.90ce	60		rts				rts
.90cf					_VHBadIndex:
.90cf	a9 17		lda #$17		lda	#23
.90d1	4c 6a 88	jmp $886a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9d1b					AbsUnary:
.9d1b	fa		plx				plx 								; restore stack pos
.9d1c	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; get a float or int
.9d1f	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d22	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9d25	29 7f		and #$7f			and 	#$7F
.9d27	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.90d4					AllocUnary:
.90d4	fa		plx				plx 								; restore stack pos
.90d5	20 49 93	jsr $9349			jsr 	Evaluate16BitInteger		; get bytes required.
.90d8	20 63 99	jsr $9963			jsr 	CheckRightBracket
.90db	da		phx				phx 								; save X/Y
.90dc	5a		phy				phy
.90dd	8a		txa				txa 								; copy X into Y
.90de	a8		tay				tay
.90df	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.90e2	aa		tax				tax
.90e3	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.90e6	20 f3 90	jsr $90f3			jsr 	AllocateXABytes 			; allocate memory
.90e9	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.90ec	8a		txa				txa
.90ed	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.90f0	7a		ply				ply
.90f1	fa		plx				plx
.90f2	60		rts				rts
.90f3					AllocateXABytes:
.90f3	5a		phy				phy
.90f4	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.90f7	84 36		sty $36				sty 	zTemp0
.90f9	5a		phy				phy
.90fa	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.90fd	84 37		sty $37				sty 	zTemp0+1
.90ff	5a		phy				phy
.9100	18		clc				clc 								; add to low memory pointer
.9101	6d 0c 07	adc $070c			adc 	lowMemPtr
.9104	8d 0c 07	sta $070c			sta 	lowMemPtr
.9107	8a		txa				txa
.9108	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.910b	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.910e					_ClearMemory:
.910e	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9111	c5 36		cmp $36				cmp 	zTemp0
.9113	d0 07		bne $911c			bne 	_CMClearNext
.9115	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9118	c5 37		cmp $37				cmp 	zTemp0+1
.911a	f0 0c		beq $9128			beq 	_CMExit
.911c					_CMClearNext:
.911c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.911e	92 36		sta ($36)			sta 	(zTemp0)
.9120	e6 36		inc $36				inc 	zTemp0
.9122	d0 ea		bne $910e			bne 	_ClearMemory
.9124	e6 37		inc $37				inc		zTemp0+1
.9126	80 e6		bra $910e			bra 	_ClearMemory
.9128					_CMExit:
.9128	fa		plx				plx
.9129	68		pla				pla
.912a	7a		ply				ply
.912b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d2b					AscUnary:
.9d2b	fa		plx				plx 								; restore stack pos
.9d2c	20 1c 93	jsr $931c			jsr 	EvaluateString 				; get a string
.9d2f	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9d31	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.9d34	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d38					FracUnary:
.9d38	fa		plx				plx 								; restore stack pos
.9d39	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; get a float or int
.9d3c	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d3f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9d42	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d44	f0 04		beq $9d4a			beq 	_IUZero
.9d46	20 08 9c	jsr $9c08			jsr 	FloatFractionalPart
.9d49	60		rts				rts
.9d4a					_IUZero:
.9d4a	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.9d4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d4e					IntUnary:
.9d4e	fa		plx				plx 								; restore stack pos
.9d4f	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; get a float or int
.9d52	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d55	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9d58	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d5a	f0 03		beq $9d5f			beq 	_IUExit
.9d5c	20 6b 9c	jsr $9c6b			jsr 	FloatIntegerPart
.9d5f					_IUExit:
.9d5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d60					LenUnary:
.9d60	fa		plx				plx 								; restore stack pos
.9d61	20 1c 93	jsr $931c			jsr 	EvaluateString 				; get a string
.9d64	5a		phy				phy
.9d65	a0 00		ldy #$00			ldy 	#0 							; find length
.9d67					_LenFind:
.9d67	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d69	f0 06		beq $9d71			beq 	_LenExit
.9d6b	c8		iny				iny
.9d6c	d0 f9		bne $9d67			bne 	_LenFind
.9d6e	4c 38 9e	jmp $9e38			jmp 	RangeError 					; string > 255
.9d71					_LenExit:
.9d71	98		tya				tya
.9d72	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.9d75	7a		ply				ply
.9d76	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.912c					Unary_Not:
.912c	fa		plx				plx
.912d	20 34 93	jsr $9334			jsr 	EvaluateInteger 			; get integer
.9130	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9133	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; zero mantissa ?
.9136	f0 04		beq $913c			beq 	_NotZero
.9138	20 bd 93	jsr $93bd			jsr 	NSMSetZero
.913b	60		rts				rts
.913c					_NotZero:
.913c	4c d7 88	jmp $88d7			jmp 	ReturnTrue
.913f					_UNBad:
.913f	4c 42 9e	jmp $9e42			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9142					Unary_Rnd:
.9142	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; number to use.
.9145	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; closing bracket
.9148	20 71 91	jsr $9171			jsr 	Random32Bit 				; generate a number.
.914b	ad 08 07	lda $0708			lda 	RandomSeed+0
.914e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9151	ad 09 07	lda $0709			lda 	RandomSeed+1
.9154	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9157	ad 0a 07	lda $070a			lda 	RandomSeed+2
.915a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.915d	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9160	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9162	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9165	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9167	8d 28 06	sta $0628			sta 	NSExponent
.916a	a9 08		lda #$08			lda 	#NSTFloat
.916c	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>916f	db						.byte 	$DB 						; causes a break in the emulator
.9170	60		rts				rts
.9171					Random32Bit:
.9171	5a		phy				phy
.9172	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9174	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.9177	d0 03		bne $917c			bne 	_Random1
.9179	a8		tay				tay 								; if so do it 256 times
.917a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.917c					_Random1:
.917c	0a		asl a				asl 	a 							; LSFR RNG
.917d	2e 09 07	rol $0709			rol 	RandomSeed+1
.9180	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9183	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9186	90 02		bcc $918a			bcc 	_Random2
.9188	49 c5		eor #$c5			eor 	#$C5
.918a					_Random2:
.918a	88		dey				dey
.918b	d0 ef		bne $917c			bne 	_Random1
.918d	7a		ply				ply
.918e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9d7a					SgnUnary:
.9d7a	fa		plx				plx 								; restore stack pos
.9d7b	20 11 93	jsr $9311			jsr 	EvaluateNumber 				; get a float or int
.9d7e	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9d81	20 ed 93	jsr $93ed			jsr 	NSMIsZero 					; if zero
.9d84	f0 10		beq $9d96			beq 	_SGZero  					; return Int Zero
.9d86	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9d89	48		pha				pha
.9d8a	a9 01		lda #$01			lda 	#1 							; set to 1
.9d8c	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.9d8f	68		pla				pla
.9d90	29 80		and #$80			and		#$80 						; copy the sign byte out
.9d92	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d95	60		rts				rts
.9d96	20 bd 93	jsr $93bd	_SGZero:jsr 	NSMSetZero
.9d99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9d9a					ValUnary:
.9d9a	fa		plx				plx 								; restore stack pos
.9d9b	20 b0 9d	jsr $9db0			jsr 	ValMainCode 				; do the main val() code
.9d9e	b0 01		bcs $9da1			bcs 	_VUError 					; couldn't convert
.9da0	60		rts				rts
.9da1					_VUError:
.9da1	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.9da4					IsValUnary:
.9da4	fa		plx				plx 								; restore stack pos
.9da5	20 b0 9d	jsr $9db0			jsr 	ValMainCode 				; do the main val() code
.9da8	b0 03		bcs $9dad			bcs 	_VUBad
.9daa	4c d7 88	jmp $88d7			jmp 	ReturnTrue
.9dad					_VUBad:
.9dad	4c e3 88	jmp $88e3			jmp 	ReturnFalse
.9db0					ValMainCode:
.9db0	20 1c 93	jsr $931c			jsr 	EvaluateString 				; get a string
.9db3	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; check right bracket present
.9db6	5a		phy				phy
.9db7	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9db9	f0 17		beq $9dd2			beq 	_VMCFail2
.9dbb	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9dbd	48		pha				pha 								; save first character
.9dbe	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9dc0	d0 01		bne $9dc3			bne 	_VMCStart
.9dc2	c8		iny				iny 								; skip over -
.9dc3					_VMCStart:
.9dc3	38		sec				sec 								; initialise first time round.
.9dc4					_VMCNext:
.9dc4	c8		iny				iny 								; pre-increment
.9dc5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9dc7	f0 0c		beq $9dd5			beq 	_VMCSuccess 				; successful.
.9dc9	20 26 8e	jsr $8e26			jsr 	EncodeNumber 				; send it to the number-builder
.9dcc	90 03		bcc $9dd1			bcc 	_VMCFail 					; if failed, give up.
.9dce	18		clc				clc 								; next time round, countinue
.9dcf	80 f3		bra $9dc4			bra 	_VMCNext
.9dd1					_VMCFail:
.9dd1	68		pla				pla
.9dd2					_VMCFail2:
.9dd2	7a		ply				ply
.9dd3	38		sec				sec
.9dd4	60		rts				rts
.9dd5					_VMCSuccess:
.9dd5	a9 00		lda #$00			lda 	#0 							; construct final
.9dd7	20 26 8e	jsr $8e26			jsr 	EncodeNumber
.9dda	68		pla				pla
.9ddb	c9 2d		cmp #$2d			cmp 	#"-"
.9ddd	d0 03		bne $9de2			bne 	_VMCNotNegative
.9ddf	20 69 93	jsr $9369			jsr		NSMNegate
.9de2					_VMCNotNegative:
.9de2	7a		ply				ply
.9de3	18		clc				clc
.9de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.918f					ChrUnary:
.918f	fa		plx				plx 								; restore stack pos
.9190	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger			; get value
.9193	48		pha				pha
.9194	20 63 99	jsr $9963			jsr 	CheckRightBracket
.9197	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9199	20 2d a0	jsr $a02d			jsr 	StringTempAllocate
.919c	68		pla				pla 								; write number to it
.919d	20 6b a0	jsr $a06b			jsr 	StringTempWrite
.91a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.91a1					SpcUnary:
.91a1	fa		plx				plx 								; restore stack pos
.91a2	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger			; get value
.91a5	5a		phy				phy
.91a6	48		pha				pha 								; save count
.91a7	20 2d a0	jsr $a02d			jsr 	StringTempAllocate
.91aa	7a		ply				ply 								; to do count in Y
.91ab					_SpcLoop:
.91ab	c0 00		cpy #$00			cpy 	#0
.91ad	f0 08		beq $91b7			beq 	_SpcExit
.91af	a9 20		lda #$20			lda 	#32
.91b1	20 6b a0	jsr $a06b			jsr 	StringTempWrite
.91b4	88		dey				dey
.91b5	80 f4		bra $91ab			bra 	_SPCLoop
.91b7					_SpcExit:
.91b7	7a		ply				ply
.91b8	20 63 99	jsr $9963			jsr 	CheckRightBracket
.91bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.91bc					Unary_Str:
.91bc	fa		plx				plx
.91bd	20 11 93	jsr $9311			jsr 	EvaluateNumber  			; get number
.91c0	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; closing bracket
.91c3	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.91c5	20 de 91	jsr $91de			jsr 	ConvertNumberToString 		; do the conversion.
.91c8	a9 21		lda #$21			lda		#33 						; create buffer
.91ca	20 2d a0	jsr $a02d			jsr 	StringTempAllocate 			; allocate memory
.91cd	da		phx				phx
.91ce	a2 00		ldx #$00			ldx 	#0
.91d0					_USCopy:
.91d0	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.91d3	20 6b a0	jsr $a06b			jsr 	StringTempWrite
.91d6	e8		inx				inx
.91d7	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.91da	d0 f4		bne $91d0			bne 	_USCopy
.91dc	fa		plx				plx
.91dd	60		rts				rts
.91de					ConvertNumberToString:
.91de	5a		phy				phy 								; save code position
.91df	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.91e2	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.91e5	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.91e8	10 0a		bpl $91f4			bpl 	_CNTSNotNegative
.91ea	29 7f		and #$7f			and 	#$7F 						; make +ve
.91ec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91ef	a9 2d		lda #$2d			lda 	#"-"
.91f1	20 5a 92	jsr $925a			jsr 	WriteDecimalBuffer
.91f4					_CNTSNotNegative:
.91f4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.91f7	f0 15		beq $920e			beq 	_CNTSNotFloat
.91f9	e8		inx				inx 								; round up
.91fa	a9 01		lda #$01			lda 	#1
.91fc	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.91ff	ca		dex				dex
.9200	bd 28 06	lda $0628,x			lda		NSExponent,x
.9203	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9206	a9 08		lda #$08			lda 	#NSTFloat
.9208	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.920b	20 2a 9b	jsr $9b2a			jsr 	FloatAdd
.920e					_CNTSNotFloat:
.920e	20 3c 92	jsr $923c			jsr 	MakePlusTwoString
.9211	20 08 9c	jsr $9c08			jsr 	FloatFractionalPart 		; get the fractional part
.9214	20 cc 9c	jsr $9ccc			jsr 	NSNormalise					; normalise , exit if zero
.9217	f0 21		beq $923a			beq 	_CNTSExit
.9219	a9 2e		lda #$2e			lda 	#"."
.921b	20 5a 92	jsr $925a			jsr 	WriteDecimalBuffer 			; write decimal place
.921e					_CNTSDecimal:
.921e	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.9221	30 17		bmi $923a			bmi 	_CNTSExit
.9223	e8		inx				inx 								; x 10.0
.9224	a9 0a		lda #$0a			lda 	#10
.9226	20 bf 93	jsr $93bf			jsr 	NSMSetByte
.9229	a9 08		lda #$08			lda 	#NSTFloat
.922b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.922e	ca		dex				dex
.922f	20 95 9c	jsr $9c95			jsr 	FloatMultiply
.9232	20 3c 92	jsr $923c			jsr 	MakePlusTwoString
.9235	20 08 9c	jsr $9c08			jsr 	FloatFractionalPart 		; get the fractional part
.9238	80 e4		bra $921e			bra 	_CNTSDecimal 				; keep going.
.923a					_CNTSExit:
.923a	7a		ply				ply
.923b	60		rts				rts
.923c					MakePlusTwoString:
.923c	da		phx				phx
.923d	20 94 93	jsr $9394			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9240	e8		inx				inx 								; access it
.9241	e8		inx				inx
.9242	20 6b 9c	jsr $9c6b			jsr 	FloatIntegerPart 			; make it an integer
.9245	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9247	20 d4 9a	jsr $9ad4			jsr 	ConvertInt32
.924a	a2 00		ldx #$00			ldx	 	#0
.924c					_MPTSCopy:
.924c	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.924f	20 5a 92	jsr $925a			jsr 	WriteDecimalBuffer
.9252	e8		inx				inx
.9253	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.9256	d0 f4		bne $924c			bne 	_MPTSCopy
.9258	fa		plx				plx
.9259	60		rts				rts
.925a					WriteDecimalBuffer:
.925a	da		phx				phx
.925b	ae 14 07	ldx $0714			ldx 	dbOffset
.925e	9d 8f 08	sta $088f,x			sta 	DecimalBuffer,x
.9261	9e 90 08	stz $0890,x			stz 	DecimalBuffer+1,x
.9264	ee 14 07	inc $0714			inc 	dbOffset
.9267	fa		plx				plx
.9268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9269					Unary_Left:
.9269	fa		plx				plx
.926a	18		clc				clc 								; only one parameter
.926b	20 e0 92	jsr $92e0			jsr 	SubstringInitial 			; set up.
.926e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9271	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9274	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9277	80 2c		bra $92a5			bra 	SubstringMain
.9279					Unary_Right:
.9279	fa		plx				plx
.927a	18		clc				clc 								; only one parameter
.927b	20 e0 92	jsr $92e0			jsr 	SubstringInitial 			; set up.
.927e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9281	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9284	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9287	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.928a	b0 02		bcs $928e			bcs 	_URNotUnderflow
.928c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.928e					_URNotUnderFlow:
.928e	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9291	80 12		bra $92a5			bra 	SubStringMain
.9293					Unary_Mid:
.9293	fa		plx				plx
.9294	38		sec				sec 								; two parameters
.9295	20 e0 92	jsr $92e0			jsr 	SubstringInitial 			; set up.
.9298	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.929b	f0 05		beq $92a2			beq 	_UMError
.929d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.92a0	80 03		bra $92a5			bra 	SubStringMain
.92a2					_UMError:
.92a2	4c 42 9e	jmp $9e42			jmp 	ArgumentError
.92a5					SubStringMain:
.92a5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.92a8	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.92ab	b0 2d		bcs $92da			bcs 	_SSMNull 					; if so, return an empty string.
.92ad	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.92b0	f0 28		beq $92da			beq 	_SSMNull 					; return empty string.
.92b2	18		clc				clc 								; add the offset +1 to the address and
.92b3	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.92b6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.92b9	85 36		sta $36				sta 	zTemp0
.92bb	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.92be	69 00		adc #$00			adc 	#0
.92c0	85 37		sta $37				sta 	zTemp0+1
.92c2					_SSMNoCarry:
.92c2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.92c5	20 2d a0	jsr $a02d			jsr 	StringTempAllocate 			; allocate that many characters
.92c8	5a		phy				phy 								; save Y
.92c9	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.92cb					_SSMCopy:
.92cb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.92cd	f0 09		beq $92d8			beq 	_SSMEString 				; no more to copy
.92cf	20 6b a0	jsr $a06b			jsr 	StringTempWrite 			; and write it out.
.92d2	c8		iny				iny
.92d3	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.92d6	d0 f3		bne $92cb			bne 	_SSMCopy
.92d8					_SSMEString:
.92d8	7a		ply				ply
.92d9					_SSMExit:
.92d9	60		rts				rts
.92da					_SSMNull:
.92da	a9 00		lda #$00			lda 	#0
.92dc	20 2d a0	jsr $a02d			jsr 	StringTempAllocate
.92df	60		rts				rts
.92e0					SubstringInitial:
.92e0	da		phx				phx 								; save initial stack position
.92e1	08		php				php 								; save carry on stack indicating 2 parameters
.92e2	20 1c 93	jsr $931c			jsr 	EvaluateString 				; get a string
.92e5	5a		phy				phy 								; calculate length to exponent.
.92e6	a0 ff		ldy #$ff			ldy 	#$FF
.92e8					_SIFindLength:
.92e8	c8		iny				iny
.92e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.92eb	d0 fb		bne $92e8			bne 	_SIFindLength
.92ed	98		tya				tya
.92ee	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92f1	7a		ply				ply
.92f2	e8		inx				inx
.92f3	20 6b 99	jsr $996b			jsr 	CheckComma 					; comma next
.92f6	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger 		; get next parameter
.92f9	28		plp				plp 								; is it the last parameter ?
.92fa	90 07		bcc $9303			bcc 	_SSIExit 					; if so, exit.
.92fc	e8		inx				inx
.92fd	20 6b 99	jsr $996b			jsr 	CheckComma 					; comma next
.9300	20 55 93	jsr $9355			jsr 	Evaluate8BitInteger 		; get last parameter
.9303					_SSIExit:
.9303	fa		plx				plx
.9304	20 63 99	jsr $9963			jsr 	CheckRightBracket 			; check closing bracket
.9307	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9308					EvaluateValue:
.9308	48		pha				pha
.9309	20 73 8c	jsr $8c73			jsr		EvaluateExpression 			; expression
.930c	20 88 8d	jsr $8d88			jsr 	Dereference					; derefernce it
.930f	68		pla				pla
.9310	60		rts				rts
.9311					EvaluateNumber:
.9311	20 08 93	jsr $9308			jsr 	EvaluateValue 				; get a value
.9314	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9317	29 10		and #$10			and 	#NSBIsString
.9319	d0 16		bne $9331			bne 	HelperTypeError
.931b	60		rts				rts
.931c					EvaluateString:
.931c	20 08 93	jsr $9308			jsr 	EvaluateValue 				; get a value
.931f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9322	29 10		and #$10			and 	#NSBIsString
.9324	f0 0b		beq $9331			beq 	HelperTypeError
.9326					CopyAddressToTemp0:
.9326	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9329	85 36		sta $36				sta 	zTemp0
.932b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.932e	85 37		sta $37				sta 	zTemp0+1
.9330	60		rts				rts
.9331					HelperTypeError:
.9331	4c 3d 9e	jmp $9e3d			jmp 	TypeError
.9334					EvaluateInteger:
.9334	20 11 93	jsr $9311			jsr 	EvaluateNumber
.9337	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.933a	d0 0a		bne $9346			bne 	HelperValueError 			; if not, it's a float.
.933c	60		rts				rts
.933d					EvaluateUnsignedInteger:
.933d	20 34 93	jsr $9334			jsr 	EvaluateInteger 			; check integer is +ve
.9340	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9343	30 01		bmi $9346			bmi 	HelperValueError
.9345	60		rts				rts
.9346					HelperValueError:
.9346	4c 42 9e	jmp $9e42			jmp 	ArgumentError
.9349					Evaluate16BitInteger:
.9349	20 3d 93	jsr $933d			jsr	 	EvaluateUnsignedInteger		; get integer
.934c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.934f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9352	d0 f2		bne $9346			bne 	HelperValueError
.9354	60		rts				rts
.9355					Evaluate8BitInteger:
.9355	20 3d 93	jsr $933d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9358	d0 ec		bne $9346			bne 	HelperValueError
.935a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.935d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9360	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9363	d0 e1		bne $9346			bne 	HelperValueError
.9365	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9368	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9de5					Multiply8x8:
.9de5	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9de6	85 36		sta $36			  	sta 	zTemp0
.9de8	86 37		stx $37				stx 	zTemp0+1
.9dea	a9 00		lda #$00			lda 	#0
.9dec	a2 08		ldx #$08			ldx 	#8
.9dee					_M88Loop:
.9dee	90 03		bcc $9df3			bcc 	_M88NoAdd
.9df0	18		clc				clc
.9df1	65 37		adc $37				adc 	zTemp0+1
.9df3					_M88NoAdd:
.9df3	6a		ror a				ror 	a
.9df4	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9df6	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9df7	d0 f5		bne $9dee			bne 	_M88Loop
.9df9	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9369					NSMNegate:
.9369	bd 00 06	lda $0600,x			lda 	NSStatus,x
.936c	49 80		eor #$80			eor 	#NSBIsNegative
.936e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9371	60		rts				rts
.9372					NSMNegateMantissa:
.9372	38		sec				sec
.9373	a9 00		lda #$00			lda 	#0
.9375	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9378	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.937b	a9 00		lda #$00			lda 	#0
.937d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9380	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9383	a9 00		lda #$00			lda 	#0
.9385	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9388	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.938b	a9 00		lda #$00			lda 	#0
.938d	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9390	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9393	60		rts				rts
.9394					NSMShiftUpTwo:
.9394	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9397	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.939a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.939d	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.93a0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.93a3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.93a6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.93a9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.93ac	bd 28 06	lda $0628,x			lda 	NSExponent,x
.93af	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.93b2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93b5	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.93b8	60		rts				rts
.93b9					NSMSetZeroMantissaOnly:
.93b9	a9 00		lda #$00			lda 	#0
.93bb	80 08		bra $93c5			bra 	NSMSetMantissa
.93bd					NSMSetZero:
.93bd	a9 00		lda #$00			lda 	#0
.93bf					NSMSetByte:
.93bf	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.93c2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.93c5					NSMSetMantissa:
.93c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.93c8	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.93cb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.93ce	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.93d1	60		rts				rts
.93d2					NSMShiftLeft:
.93d2	18		clc				clc
.93d3					NSMRotateLeft:
.93d3	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.93d6	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.93d9	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.93dc	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.93df	60		rts				rts
.93e0					NSMShiftRight:
.93e0	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.93e3	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.93e6	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.93e9	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.93ec	60		rts				rts
.93ed					NSMIsZero:
.93ed	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.93f0	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.93f3	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.93f6	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.93f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9dfc					DecimalScalarTable:
>9dfc	66 66 66 66				.dword $66666666 ; 0.1
>9e00	de					.byte $de
>9e01	1f 85 eb 51				.dword $51eb851f ; 0.01
>9e05	db					.byte $db
>9e06	4c 37 89 41				.dword $4189374c ; 0.001
>9e0a	d8					.byte $d8
>9e0b	ac 8b db 68				.dword $68db8bac ; 0.0001
>9e0f	d4					.byte $d4
>9e10	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9e14	d1					.byte $d1
>9e15	83 de 1b 43				.dword $431bde83 ; 1e-06
>9e19	ce					.byte $ce
>9e1a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9e1e	ca					.byte $ca
>9e1f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9e23	c7					.byte $c7
>9e24	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9e28	c4					.byte $c4
>9e29	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9e2d	c0					.byte $c0
>9e2e	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9e32	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9e33					SyntaxError:
.9e33	a9 02		lda #$02		lda	#2
.9e35	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9e38					RangeError:
.9e38	a9 04		lda #$04		lda	#4
.9e3a	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9e3d					TypeError:
.9e3d	a9 05		lda #$05		lda	#5
.9e3f	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9e42					ArgumentError:
.9e42	a9 07		lda #$07		lda	#7
.9e44	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9e47					NotDoneError:
.9e47	a9 0c		lda #$0c		lda	#12
.9e49	4c 6a 88	jmp $886a		jmp	ErrorHandler
.9e4c					ErrorText:
>9e4c	42 72 65 61 6b 00			.text	"Break",0
>9e52	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9e5a	72 72 6f 72 00
>9e5f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9e67	20 62 79 20 7a 65 72 6f 00
>9e70	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9e78	61 6e 67 65 00
>9e7d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9e85	6d 61 74 63 68 00
>9e8b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9e93	65 6d 6f 72 79 00
>9e99	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ea1	61 72 67 75 6d 65 6e 74 00
>9eaa	53 74 6f 70 00				.text	"Stop",0
>9eaf	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9eb7	6f 6f 20 6c 6f 6e 67 00
>9ebf	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9ec7	6e 20 66 61 69 6c 65 64 00
>9ed0	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9ed8	61 74 61 00
>9edc	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9ee4	65 6e 74 65 64 00
>9eea	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9ef2	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9efe	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9f06	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9f13	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9f1b	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9f28	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9f30	68 6f 75 74 20 57 68 69 6c 65 00
>9f3b	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9f43	68 6f 75 74 20 46 6f 72 00
>9f4c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9f54	61 63 6b 20 66 75 6c 6c 00
>9f5d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9f65	75 63 74 75 72 65 00
>9f6c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9f74	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9f81	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9f89	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9f97	41 72 72 61 79 20 73 69			.text	"Array size",0
>9f9f	7a 65 00
>9fa2	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>9faa	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.93fa					StackOpen:
.93fa	48		pha				pha 								; save frame byte
.93fb	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.93fd	0a		asl a				asl 	a 							; claim twice this for storage
.93fe	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9400	38		sec				sec 								; so basically subtracting from
.9401	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9403	85 34		sta $34				sta 	basicStack
.9405	b0 08		bcs $940f			bcs 	_SONoBorrow
.9407	c6 35		dec $35				dec 	basicStack+1
.9409	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.940b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.940d	90 04		bcc $9413			bcc 	_SOMemory
.940f					_SONoBorrow:
.940f	68		pla				pla 								; get marker back and write at TOS
.9410	92 34		sta ($34)			sta 	(basicStack)
.9412	60		rts				rts
.9413					_SOMemory:
.9413							ERR_STACK
.9413					StackClose:
.9413	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9415	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9417	0a		asl a				asl 	a 							; claim twice this.
.9418	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.941a	85 34		sta $34				sta 	basicStack
.941c	90 02		bcc $9420			bcc 	_SCExit
.941e	e6 35		inc $35				inc 	basicStack+1
.9420					_SCExit:
.9420	60		rts				rts
.9421					StackCheckFrame:
.9421	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9423	29 f0		and #$f0			and 	#$F0 						; check type bits
.9425	d0 01		bne $9428			bne 	_SCFError 					; different, we have structures mixed up
.9427	60		rts				rts
.9428					_SCFError:
.9428	8a		txa				txa 								; report error X
.9429	4c 6a 88	jmp $886a			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.942c					STKSaveCodePosition:
.942c	5a		phy				phy
.942d	98		tya				tya 								; save Y
.942e	a0 05		ldy #$05			ldy 	#5
.9430	91 34		sta ($34),y			sta 	(basicStack),y
.9432	88		dey				dey 								; save Code Pointer
.9433					_STKSaveLoop:
.9433	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9436	91 34		sta ($34),y			sta 	(basicStack),y
.9438	88		dey				dey
.9439	d0 f8		bne $9433			bne 	_STKSaveLoop
.943b	7a		ply				ply
.943c	60		rts				rts
.943d					STKLoadCodePosition:
.943d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.943f					_STKLoadLoop:
.943f	b1 34		lda ($34),y			lda 	(basicStack),y
.9441	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9444	c8		iny				iny
.9445	c0 05		cpy #$05			cpy 	#5
.9447	d0 f6		bne $943f			bne 	_STKLoadLoop
.9449	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.944b	a8		tay				tay
.944c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.944d					StackReset:
.944d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.944f	85 34		sta $34				sta 	0+basicStack
.9451	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9453	85 35		sta $35				sta 	1+basicStack
.9455	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9457	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9459	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9fb2					StringConcrete:
.9fb2	5a		phy				phy 								; save position on stack
.9fb3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9fb6	85 38		sta $38				sta 	zTemp1
.9fb8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9fbb	85 39		sta $39				sta 	zTemp1+1
.9fbd	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9fbf					_SALength:
.9fbf	c8		iny				iny
.9fc0	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fc2	d0 fb		bne $9fbf			bne 	_SALength
.9fc4	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9fc6	b0 3f		bcs $a007			bcs 	_SALengthError
.9fc8	98		tya				tya 				 				; length of the new string
.9fc9	18		clc				clc
.9fca	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9fcc	90 02		bcc $9fd0			bcc 	_SAHaveLength
.9fce	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9fd0					_SAHaveLength:
.9fd0	48		pha				pha 								; save length.
.9fd1	38		sec				sec
.9fd2	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9fd4	6d 0e 07	adc $070e			adc 	StringMemory
.9fd7	8d 0e 07	sta $070e			sta 	StringMemory
.9fda	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9fdc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9fdf	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9fe1	6d 0f 07	adc $070f			adc 	StringMemory+1
.9fe4	8d 0f 07	sta $070f			sta 	StringMemory+1
.9fe7	85 3b		sta $3b				sta 	zTemp2+1
.9fe9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fec	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9fed	38		sec				sec
.9fee	e9 03		sbc #$03			sbc 	#3
.9ff0	92 3a		sta ($3a)			sta 	(zTemp2)
.9ff2	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9ff4	a0 01		ldy #$01			ldy 	#1
.9ff6	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9ff8					_SACopyNewString:
.9ff8	a0 00		ldy #$00			ldy 	#0
.9ffa					_SACopyNSLoop:
.9ffa	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9ffc	c8		iny				iny 								; write two on in string storage
.9ffd	c8		iny				iny
.9ffe	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a000	88		dey				dey 								; this makes it one one.
.a001	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a003	d0 f5		bne $9ffa			bne 	_SACopyNSLoop
.a005	7a		ply				ply
.a006	60		rts				rts
.a007					_SALengthError:
.a007	a9 09		lda #$09		lda	#9
.a009	4c 6a 88	jmp $886a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a00c					StringSystemInitialise:
.a00c	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a00e	8d 0e 07	sta $070e			sta 	0+StringMemory
.a011	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a013	8d 0f 07	sta $070f			sta 	1+StringMemory
.a016	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a019	60		rts				rts
.a01a					StringSpaceInitialise:
.a01a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a01c	8d 10 07	sta $0710			sta 	StringInitialised
.a01f	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a022	8d 11 07	sta $0711			sta 	StringTempPointer
.a025	ad 0f 07	lda $070f			lda 	StringMemory+1
.a028	3a		dec a				dec 	a
.a029	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a02c	60		rts				rts
.a02d					StringTempAllocate:
.a02d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a02f	b0 35		bcs $a066			bcs 	_STALength
.a031	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a034	30 05		bmi $a03b			bmi 	_STAAllocate
.a036	48		pha				pha 								; save value to subtract.
.a037	20 1a a0	jsr $a01a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a03a	68		pla				pla 								; restore it
.a03b					_STAAllocate:
.a03b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a03d	18		clc				clc  								; deliberate allows one more
.a03e	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a041	8d 11 07	sta $0711			sta 	StringTempPointer
.a044	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a047	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a049	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a04c	69 ff		adc #$ff			adc 	#$FF
.a04e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a051	85 3d		sta $3d				sta 	zsTemp+1
.a053	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a056	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a059	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a05c	a9 10		lda #$10			lda 	#NSTString
.a05e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a061	a9 00		lda #$00			lda 	#0 							; clear the target string
.a063	92 3c		sta ($3c)			sta 	(zsTemp)
.a065	60		rts				rts
.a066					_STALength:
.a066	a9 09		lda #$09		lda	#9
.a068	4c 6a 88	jmp $886a		jmp	ErrorHandler
.a06b					StringTempWrite:
.a06b	48		pha				pha
.a06c	92 3c		sta ($3c)			sta 	(zsTemp)
.a06e	e6 3c		inc $3c				inc 	zsTemp
.a070	d0 02		bne $a074			bne 	_STWNoCarry
.a072	e6 3d		inc $3d				inc 	zsTemp+1
.a074					_STWNoCarry:
.a074	a9 00		lda #$00			lda 	#0
.a076	92 3c		sta ($3c)			sta 	(zsTemp)
.a078	68		pla				pla
.a079	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.945a					BackloadProgram:
.945a	a2 ff		ldx #$ff			ldx 	#$FF
.945c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.945f	20 89 94	jsr $9489			jsr 	BLReadByte
.9462	30 1e		bmi $9482			bmi 	_BPExit
.9464					_BPCopy:
.9464	e8		inx				inx  								; copy byte in
.9465	9d 1c 08	sta $081c,x			sta 	lineBuffer,x
.9468	9e 1d 08	stz $081d,x			stz 	lineBuffer+1,x
.946b	20 89 94	jsr $9489			jsr 	BLReadByte 					; read next byte
.946e	30 0a		bmi $947a			bmi 	_BPEndLine 					; -ve = EOL
.9470	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9472	d0 02		bne $9476			bne 	_BPNotTab
.9474	a9 20		lda #$20			lda 	#' '
.9476					_BPNotTab:
.9476	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9478	b0 ea		bcs $9464			bcs 	_BPCopy
.947a					_BPEndLine:
.947a	20 53 96	jsr $9653			jsr 	TokeniseLine 				; tokenise the line.
.947d	20 df 98	jsr $98df			jsr 	MemoryAppend 				; append to current program
.9480	80 d8		bra $945a			bra 	BackloadProgram
.9482					_BPExit:
.9482	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9485	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.9488	60		rts				rts
.9489					BLReadByte:
.9489					_BLLoad:
.9489	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.948c	ee 8a 94	inc $948a			inc 	_BLLoad+1
.948f	d0 03		bne $9494			bne 	_BLNoCarry
.9491	ee 8b 94	inc $948b			inc 	_BLLoad+2
.9494					_BLNoCarry:
.9494	c9 00		cmp #$00			cmp 	#0
.9496	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9497					TokeniseSearchTable:
.9497	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9499	85 36		sta $36				sta 	zTemp0
.949b	a0 00		ldy #$00			ldy 	#0
.949d	a9 80		lda #$80			lda 	#$80 						; token #
.949f	85 38		sta $38				sta 	zTemp1
.94a1					_TSTLoop:
.94a1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.94a3	30 49		bmi $94ee			bmi 	_TSTFail 					; -ve = end of table
.94a5	f0 2e		beq $94d5			beq 	_TSTNext 					; zero, check next it's a dummy
.94a7	c8		iny				iny 								; get the hash
.94a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.94aa	88		dey				dey
.94ab	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.94ae	d0 25		bne $94d5			bne 	_TSTNext
.94b0	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.94b3	38		sec				sec
.94b4	ed 00 07	sbc $0700			sbc 	identStart
.94b7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.94b9	d0 1a		bne $94d5			bne 	_TSTNext
.94bb	5a		phy				phy 								; save Y , we might fail
.94bc	c8		iny				iny 								; point to text
.94bd	c8		iny				iny
.94be	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.94c1					_TSTCompareName:
.94c1	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; compare text.
.94c4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.94c6	d0 0c		bne $94d4			bne 	_TSTNextPullY 				; fail, pullY and do next
.94c8	e8		inx				inx
.94c9	c8		iny				iny
.94ca	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.94cd	d0 f2		bne $94c1			bne 	_TSTCompareName
.94cf	7a		ply				ply 								; throw Y
.94d0	a5 38		lda $38				lda 	zTemp1 						; get token #
.94d2	38		sec				sec 								; return with CS = passed.
.94d3	60		rts				rts
.94d4					_TSTNextPullY:
.94d4	7a		ply				ply 								; restore current, fall through.
.94d5					_TSTNext:
.94d5	e6 38		inc $38				inc 	zTemp1 						; token counter
.94d7	98		tya				tya
.94d8	18		clc				clc
.94d9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.94db	1a		inc a				inc 	a 							; +1
.94dc	1a		inc a				inc 	a 							; +2
.94dd	a8		tay				tay
.94de	10 c1		bpl $94a1			bpl 	_TSTLoop 					; if Y < $80 loop back
.94e0	98		tya				tya 								; add Y to zTemp0 and reset Y
.94e1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.94e3	18		clc				clc  								; but have tables > 255 bytes
.94e4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.94e6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.94e8	90 b7		bcc $94a1			bcc 	_TSTLoop
.94ea	e6 37		inc $37				inc 	zTemp0+1
.94ec	80 b3		bra $94a1			bra 	_TSTLoop
.94ee					_TSTFail:
.94ee	18		clc				clc
.94ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.94f0					KeywordSet0:
>94f0	00 65					.text	0,$65,""               ; $80 !0:EOF
>94f2	00 58					.text	0,$58,""               ; $81 !1:SH1
>94f4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>94f6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>94fc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9504	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>950a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9511	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9518	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>951f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9525	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>952d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9535	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>953b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9542	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9548	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9550	28
>9551	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9557	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>955d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9563	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>956a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9570	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9576	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>957b	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>957f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9585	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>958d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9594	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>959b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>95a3	43
>95a4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>95aa	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>95b0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>95b7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>95bd	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>95c3	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>95c8	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>95ce	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>95d3	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>95db	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>95e1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>95e8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>95ee	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>95f3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>95fa	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9600	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9605	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>960d	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9611	ff					.text	$FF
.9612					KeywordSet1:
>9612	00 65					.text	0,$65,""               ; $80 !0:EOF
>9614	00 58					.text	0,$58,""               ; $81 !1:SH1
>9616	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9618	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9620	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9627	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>962c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9632	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9637	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>963f	45
>9640	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9645	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>964b	ff					.text	$FF
.964c					KeywordSet2:
>964c	00 65					.text	0,$65,""               ; $80 !0:EOF
>964e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9650	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9652	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9653					TokeniseLine:
.9653	20 db 97	jsr $97db			jsr 	FixLineBufferCase 			; fix line case
.9656	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9658	8d 1c 07	sta $071c			sta 	tokenOffset
.965b	9c 1d 07	stz $071d			stz 	tokenLineNumber
.965e	9c 1e 07	stz $071e			stz 	tokenLineNumber+1
.9661	a2 ff		ldx #$ff			ldx 	#$FF
.9663					_TKFindFirst:
.9663	e8		inx				inx
.9664	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9667	f0 79		beq $96e2			beq 	_TKExit
.9669	c9 20		cmp #$20			cmp 	#' '
.966b	90 f6		bcc $9663			bcc 	_TKFindFirst
.966d	c9 30		cmp #$30			cmp 	#'0'
.966f	90 07		bcc $9678			bcc 	_TKNoLineNumber
.9671	c9 3a		cmp #$3a			cmp 	#'9'+1
.9673	b0 03		bcs $9678			bcs 	_TKNoLineNumber
.9675	20 05 98	jsr $9805			jsr 	TokeniseExtractLineNumber
.9678					_TKNoLineNumber:
.9678					_TKTokeniseLoop:
.9678	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.967b	f0 65		beq $96e2			beq 	_TKExit
.967d	e8		inx				inx
.967e	c9 20		cmp #$20			cmp 	#' '
.9680	f0 f6		beq $9678			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9682	ca		dex				dex 								; undo last get, A contains character, X is position.
.9683	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9685	f0 61		beq $96e8			beq 	_TKTokeniseIdentifier
.9687	c9 41		cmp #$41			cmp 	#'A'
.9689	90 04		bcc $968f			bcc 	_TKTokenisePunctuation
.968b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.968d	90 59		bcc $96e8			bcc 	_TKTokeniseIdentifier
.968f					_TKTokenisePunctuation:
.968f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9691	f0 27		beq $96ba			beq 	_TKString
.9693	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9695	f0 28		beq $96bf			beq 	_TKHexConstant
.9697	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9699	f0 29		beq $96c4			beq 	_TKCheckDouble
.969b	c9 3e		cmp #$3e			cmp 	#'>'
.969d	f0 25		beq $96c4			beq 	_TKCheckDouble
.969f					_TKStandardPunctuation:
.969f	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get it back.
.96a2	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.96a4	90 0e		bcc $96b4			bcc 	_TKNoShift
.96a6	48		pha				pha 								; save
.96a7	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.96a9	85 36		sta $36				sta 	zTemp0
.96ab	68		pla				pla
.96ac	29 20		and #$20			and 	#32 						; bit 5
.96ae	4a		lsr a				lsr 	a 							; shift into bit 3
.96af	4a		lsr a				lsr 	a
.96b0	05 36		ora $36				ora 	zTemp0
.96b2	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.96b4					_TKNoShift:
.96b4	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte 			; write the punctuation character
.96b7	e8		inx				inx 								; consume the character
.96b8	80 be		bra $9678			bra 	_TKTokeniseLoop 			; and loop round again.
.96ba					_TKString:
.96ba	20 6a 97	jsr $976a			jsr 	TokeniseString
.96bd	80 b9		bra $9678			bra 	_TKTokeniseLoop
.96bf					_TKHexConstant:
.96bf	20 a5 97	jsr $97a5			jsr 	TokeniseHexConstant
.96c2	80 b4		bra $9678			bra 	_TKTokeniseLoop
.96c4					_TKCheckDouble:
.96c4	bd 1d 08	lda $081d,x			lda 	lineBuffer+1,x 				; get next character
.96c7	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.96c9	90 d4		bcc $969f			bcc 	_TKStandardPunctuation
.96cb	c9 3f		cmp #$3f			cmp 	#'>'+1
.96cd	b0 d0		bcs $969f			bcs 	_TKStandardPunctuation
.96cf	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.96d2	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.96d4	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.96d5	7d 1d 08	adc $081d,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.96d8	38		sec				sec
.96d9	e9 3c		sbc #$3c			sbc 	#'<'
.96db	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.96de	e8		inx				inx 								; consume both
.96df	e8		inx				inx
.96e0	80 96		bra $9678			bra 	_TKTokeniseLoop
.96e2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.96e4	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.96e7	60		rts				rts
.96e8					_TKTokeniseIdentifier:
.96e8	8e 00 07	stx $0700			stx 	identStart 					; save start
.96eb	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.96ee					_TKCheckLoop:
.96ee	e8		inx				inx 								; look at next, we know first is identifier.
.96ef	bd 1c 08	lda $081c,x			lda  	lineBuffer,x
.96f2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.96f4	f0 f8		beq $96ee			beq 	_TKCheckLoop
.96f6	c9 30		cmp #$30			cmp	 	#"0"
.96f8	90 0c		bcc $9706			bcc 	_TKEndIdentifier
.96fa	c9 3a		cmp #$3a			cmp 	#"9"+1
.96fc	90 f0		bcc $96ee			bcc 	_TKCheckLoop
.96fe	c9 41		cmp #$41			cmp	 	#"A"
.9700	90 04		bcc $9706			bcc 	_TKEndIdentifier
.9702	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9704	90 e8		bcc $96ee			bcc 	_TKCheckLoop
.9706					_TKEndIdentifier:
.9706	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9709	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.970b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.970d	f0 06		beq $9715			beq 	_TKHasTypeCharacter
.970f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9711	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9713	d0 07		bne $971c			bne 	_TKNoTypeCharacter
.9715					_TKHasTypeCharacter:
.9715	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9718	e8		inx				inx 								; read next
.9719	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.971c					_TKNoTypeCharacter:
.971c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.971e	d0 09		bne $9729			bne 	_TKNoArray
.9720	e8		inx				inx 								; skip the (
.9721	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9724	09 04		ora #$04			ora 	#$04
.9726	8d 04 07	sta $0704			sta 	identTypeByte
.9729					_TKNoArray:
.9729	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.972c	20 c6 97	jsr $97c6			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.972f	a0 94		ldy #$94			ldy 	#(KeywordSet0) >> 8
.9731	a9 f0		lda #$f0			lda 	#(KeywordSet0) & $FF
.9733	20 97 94	jsr $9497			jsr 	TokeniseSearchTable
.9736	a2 00		ldx #$00			ldx 	#0
.9738	b0 1f		bcs $9759			bcs 	_TKFoundToken
.973a	a0 96		ldy #$96			ldy 	#(KeywordSet1) >> 8
.973c	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.973e	20 97 94	jsr $9497			jsr 	TokeniseSearchTable
.9741	a2 81		ldx #$81			ldx 	#$81
.9743	b0 14		bcs $9759			bcs 	_TKFoundToken
.9745	a0 96		ldy #$96			ldy 	#(KeywordSet1) >> 8
.9747	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.9749	20 97 94	jsr $9497			jsr 	TokeniseSearchTable
.974c	a2 82		ldx #$82			ldx 	#$82
.974e	b0 09		bcs $9759			bcs 	_TKFoundToken
.9750	20 56 98	jsr $9856			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9753	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9756	4c 78 96	jmp $9678			jmp 	_TKTokeniseLoop 			; and go round again.
.9759					_TKFoundToken:
.9759	48		pha				pha 								; save token
.975a	8a		txa				txa 								; shift in X, is there one ?
.975b	f0 03		beq $9760			beq 	_TKNoTShift
.975d	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte 			; if so, write it out
.9760					_TKNoTShift:
.9760	68		pla				pla 								; restore and write token
.9761	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.9764	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9767	4c 78 96	jmp $9678			jmp 	_TKTokeniseLoop 			; and go round again.
.976a					TokeniseString:
.976a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.976c	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.976f	e8		inx				inx									; start of quoted string.
.9770	da		phx				phx 								; push start of string on top
.9771	ca		dex				dex
.9772					_TSFindEnd:
.9772	e8		inx				inx
.9773	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character
.9776	f0 04		beq $977c			beq 	_TSEndOfString
.9778	c9 22		cmp #$22			cmp 	#'"'
.977a	d0 f6		bne $9772			bne 	_TSFindEnd
.977c					_TSEndOfString:
.977c	7a		ply				ply  								; so now Y is first character, X is character after end.
.977d	48		pha				pha 								; save terminating character
.977e	20 86 97	jsr $9786			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9781	68		pla				pla 								; terminating character
.9782	f0 01		beq $9785			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9784	e8		inx				inx
.9785					_TSNotQuote:
.9785	60		rts				rts
.9786					TOWriteBlockXY:
.9786	86 36		stx $36				stx 	zTemp0 						; write end character
.9788	98		tya				tya
.9789	49 ff		eor #$ff			eor 	#$FF
.978b	38		sec				sec
.978c	65 36		adc $36				adc 	zTemp0
.978e	1a		inc a				inc 	a 							; one extra for NULL
.978f	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.9792					_TOBlockLoop:
.9792	c4 36		cpy $36				cpy 	zTemp0
.9794	f0 09		beq $979f			beq 	_TOBlockExit
.9796	b9 1c 08	lda $081c,y			lda 	lineBuffer,y
.9799	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.979c	c8		iny				iny
.979d	80 f3		bra $9792			bra 	_TOBlockLoop
.979f					_TOBlockExit:
.979f	a9 00		lda #$00			lda 	#0
.97a1	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.97a4	60		rts				rts
.97a5					TokeniseHexConstant:
.97a5	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.97a7	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.97aa	e8		inx				inx									; start of quoted string.
.97ab	da		phx				phx 								; push start of constant on top
.97ac	ca		dex				dex
.97ad					_THFindLoop:
.97ad	e8		inx				inx
.97ae	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.97b1	c9 30		cmp #$30			cmp 	#"0"
.97b3	90 0c		bcc $97c1			bcc 	_THFoundEnd
.97b5	c9 3a		cmp #$3a			cmp 	#"9"+1
.97b7	90 f4		bcc $97ad			bcc 	_THFindLoop
.97b9	c9 41		cmp #$41			cmp 	#"A"
.97bb	90 04		bcc $97c1			bcc 	_THFoundEnd
.97bd	c9 47		cmp #$47			cmp 	#"F"+1
.97bf	90 ec		bcc $97ad			bcc 	_THFindLoop
.97c1					_THFoundEnd:
.97c1	7a		ply				ply 								; restore start
.97c2	20 86 97	jsr $9786			jsr 	TOWriteBlockXY 				; output the block
.97c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.97c6					TokeniseCalculateHash:
.97c6	da		phx				phx
.97c7	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.97ca	a9 00		lda #$00			lda 	#0
.97cc					_TCHLoop:
.97cc	18		clc				clc
.97cd	7d 1c 08	adc $081c,x			adc 	lineBuffer,x
.97d0	e8		inx				inx
.97d1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.97d4	d0 f6		bne $97cc			bne 	_TCHLoop
.97d6	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.97d9	fa		plx				plx
.97da	60		rts				rts
.97db					FixLineBufferCase:
.97db	a2 00		ldx #$00			ldx 	#0
.97dd					_FLBCLoop:
.97dd	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next character
.97e0	f0 22		beq $9804			beq 	_FLBCExit 					; end of string.
.97e2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.97e4	f0 11		beq $97f7			beq 	_FLBCInQuotes
.97e6	e8		inx				inx
.97e7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.97e9	90 f2		bcc $97dd			bcc 	_FLBCLoop
.97eb	c9 7b		cmp #$7b			cmp 	#'z'+1
.97ed	b0 ee		bcs $97dd			bcs 	_FLBCLoop
.97ef	38		sec				sec 								; make U/C
.97f0	e9 20		sbc #$20			sbc 	#32
.97f2	9d 1b 08	sta $081b,x			sta	 	lineBuffer-1,x 				; write back
.97f5	80 e6		bra $97dd			bra 	_FLBCLoop
.97f7					_FLBCInQuotes:
.97f7	e8		inx				inx 								; advance
.97f8	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next
.97fb	f0 07		beq $9804			beq 	_FLBCExit 					; exit on EOS
.97fd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.97ff	d0 f6		bne $97f7			bne 	_FLBCInQuotes
.9801	e8		inx				inx 								; skip over it
.9802	80 d9		bra $97dd			bra 	_FLBCLoop
.9804					_FLBCExit:
.9804	60		rts				rts
.9805					TokeniseExtractLineNumber:
.9805	ad 1e 07	lda $071e			lda 	tokenLineNumber+1 			; push current value on stack
.9808	48		pha				pha
.9809	ad 1d 07	lda $071d			lda 	tokenLineNumber
.980c	48		pha				pha
.980d	20 43 98	jsr $9843			jsr 	_TELNTimes2 				; line # x 4
.9810	20 43 98	jsr $9843			jsr 	_TELNTimes2 				; line # x 2
.9813	18		clc				clc 								; add stacked value
.9814	68		pla				pla
.9815	6d 1d 07	adc $071d			adc 	tokenLineNumber
.9818	8d 1d 07	sta $071d			sta 	tokenLineNumber
.981b	68		pla				pla
.981c	6d 1e 07	adc $071e			adc 	tokenLineNumber+1
.981f	8d 1e 07	sta $071e			sta 	tokenLineNumber+1 			; line # x 5
.9822	20 43 98	jsr $9843			jsr 	_TELNTimes2 				; line # x 10
.9825	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get and consume character
.9828	e8		inx				inx
.9829	29 0f		and #$0f			and 	#15 						; add to line #
.982b	18		clc				clc
.982c	6d 1d 07	adc $071d			adc 	tokenLineNumber
.982f	8d 1d 07	sta $071d			sta 	tokenLineNumber
.9832	90 03		bcc $9837			bcc 	_TLENNoCarry
.9834	ee 1e 07	inc $071e			inc 	tokenLineNumber+1
.9837					_TLENNoCarry:
.9837	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; more digits ?
.983a	c9 30		cmp #$30			cmp 	#'0'
.983c	90 04		bcc $9842			bcc 	_TLENExit
.983e	c9 3a		cmp #$3a			cmp 	#'9'+1
.9840	90 c3		bcc $9805			bcc 	TokeniseExtractLineNumber
.9842					_TLENExit:
.9842	60		rts				rts
.9843					_TELNTimes2:
.9843	0e 1d 07	asl $071d			asl 	tokenLineNumber
.9846	2e 1e 07	rol $071e			rol 	tokenLineNumber+1
.9849	60		rts				rts
.984a					TokeniseWriteByte:
.984a	da		phx				phx
.984b	ae 1c 07	ldx $071c			ldx 	tokenOffset 				; next slot to write to
.984e	9d 1c 07	sta $071c,x			sta 	tokenOffset,x 				; write byte out
.9851	ee 1c 07	inc $071c			inc 	tokenOffset 				; advance slot.
.9854	fa		plx				plx
.9855	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9856					CheckCreateVariableRecord:
.9856	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9858	85 36		sta $36				sta 	0+zTemp0
.985a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.985c	85 37		sta $37				sta 	1+zTemp0
.985e					_CCVSearch:
.985e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9860	f0 2c		beq $988e			beq 	_CCVFail
.9862	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9864	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9866	cd 03 07	cmp $0703			cmp 	identHash
.9869	d0 16		bne $9881			bne 	_CCVNext
.986b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.986d	ae 00 07	ldx $0700			ldx 	identStart
.9870					_CCVCompare:
.9870	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9873	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9875	e8		inx				inx 								; advance pointers
.9876	c8		iny				iny
.9877	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9878	d0 07		bne $9881			bne 	_CCVNext  					; didn't match go to next.
.987a	90 f4		bcc $9870			bcc 	_CCVCompare 				; not finished yet.
.987c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.987f	f0 41		beq $98c2			beq 	_CCVFound 					; yes, we were successful
.9881					_CCVNext:
.9881	18		clc				clc
.9882	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9884	65 36		adc $36				adc 	zTemp0
.9886	85 36		sta $36				sta 	zTemp0
.9888	90 d4		bcc $985e			bcc 	_CCVSearch
.988a	e6 37		inc $37				inc 	zTemp0+1
.988c	80 d0		bra $985e			bra 	_CCVSearch
.988e					_CCVFail:
.988e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9890	ad 03 07	lda $0703			lda 	identHash
.9893	91 36		sta ($36),y			sta 	(zTemp0),y
.9895	c8		iny				iny 								; offset 2 is the type byte
.9896	ad 04 07	lda $0704			lda 	identTypeByte
.9899	91 36		sta ($36),y			sta 	(zTemp0),y
.989b	c8		iny				iny
.989c					_CCVData:
.989c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.989e	91 36		sta ($36),y			sta 	(zTemp0),y
.98a0	c8		iny				iny
.98a1	c0 08		cpy #$08			cpy 	#8
.98a3	90 f7		bcc $989c			bcc 	_CCVData
.98a5	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.98a8					_CCVCopyName:
.98a8	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.98ab	91 36		sta ($36),y			sta 	(zTemp0),y
.98ad	e8		inx				inx
.98ae	c8		iny				iny
.98af	ec 02 07	cpx $0702			cpx 	identTypeEnd
.98b2	d0 f4		bne $98a8			bne 	_CCVCopyName
.98b4	98		tya				tya 								; patch offset
.98b5	92 36		sta ($36)			sta 	(zTemp0)
.98b7	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.98b9	91 36		sta ($36),y			sta 	(zTemp0),y
.98bb	88		dey				dey
.98bc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.98be	09 80		ora #$80			ora 	#$80
.98c0	91 36		sta ($36),y			sta 	(zTemp0),y
.98c2					_CCVFound:
.98c2	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.98c4	38		sec				sec
.98c5	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.98c7	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.98c9	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.98cc	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.98ce	20 4a 98	jsr $984a			jsr 	TokeniseWriteByte
.98d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a07a					MemoryPeek:
.a07a	b2 36		lda ($36)			lda 	(zTemp0)
.a07c	60		rts				rts
.a07d					MemoryPoke:
.a07d	92 36		sta ($36)			sta 	(zTemp0)
.a07f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a080					PrintHex:
.a080	48		pha				pha
.a081	4a		lsr a				lsr 	a
.a082	4a		lsr a				lsr 	a
.a083	4a		lsr a				lsr 	a
.a084	4a		lsr a				lsr 	a
.a085	20 89 a0	jsr $a089			jsr 	_PrintNibble
.a088	68		pla				pla
.a089					_PrintNibble:
.a089	29 0f		and #$0f			and 	#15
.a08b	c9 0a		cmp #$0a			cmp 	#10
.a08d	90 02		bcc $a091			bcc 	_NoShift
.a08f	69 06		adc #$06			adc 	#6
.a091					_NoShift:
.a091	69 30		adc #$30			adc 	#48
.a093	4c 96 a0	jmp $a096			jmp 	EXTPrintCharacter
.a096					EXTPrintCharacter:
.a096	48		pha				pha
.a097	da		phx				phx
.a098	5a		phy				phy
.a099	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a09c	7a		ply				ply
.a09d	fa		plx				plx
.a09e	68		pla				pla
.a09f	60		rts				rts
.a0a0					EXTInputSingleCharacter:
.a0a0	da		phx				phx
.a0a1	5a		phy				phy
.a0a2					_EISCWait:
.a0a2	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a0a5	c9 00		cmp #$00			cmp 	#0
.a0a7	f0 f9		beq $a0a2			beq 	_EISCWait
.a0a9	7a		ply				ply
.a0aa	fa		plx				plx
.a0ab	60		rts				rts
.a0ac					EXTInputLine:
.a0ac	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a0ae					_ILLoop:
.a0ae	da		phx				phx 								; read character in
.a0af	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a0b2	fa		plx				plx
.a0b3	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a0b5	f0 12		beq $a0c9			beq 	_ILBackspace
.a0b7	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a0b9	f0 15		beq $a0d0			beq 	_ILExit
.a0bb	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a0bd	90 ef		bcc $a0ae			bcc 	_ILLoop
.a0bf	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a0c1	f0 eb		beq $a0ae			beq 	_ILLoop
.a0c3	9d 1c 08	sta $081c,x			sta 	lineBuffer,x 				; save it
.a0c6	e8		inx				inx
.a0c7	80 e5		bra $a0ae			bra 	_ILLoop
.a0c9					_ILBackspace:
.a0c9	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a0cb	f0 e1		beq $a0ae			beq 	_ILLoop
.a0cd	ca		dex				dex 								; back one.
.a0ce	80 de		bra $a0ae			bra 	_ILLoop
.a0d0					_ILExit:
.a0d0	20 96 a0	jsr $a096			jsr 	EXTPrintCharacter
.a0d3	9e 1c 08	stz $081c,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a0d6	60		rts				rts
.a0d7					EXTBreakCheck:
.a0d7	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.98d2					MemoryNew:
.98d2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.98d4	85 30		sta $30				sta 	codePtr
.98d6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.98d8	85 31		sta $31				sta 	codePtr+1
.98da	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.98dc	92 30		sta ($30)			sta 	(codePtr)
.98de	60		rts				rts
.98df					MemoryAppend:
.98df	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.98e1	85 30		sta $30				sta 	codePtr
.98e3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.98e5	85 31		sta $31				sta 	codePtr+1
.98e7					_MAFindEnd:
.98e7	b2 30		lda ($30)			lda 	(codePtr)
.98e9	f0 0d		beq $98f8			beq 	_MAFoundEnd
.98eb	18		clc				clc
.98ec	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98ee	65 30		adc $30				adc 	codePtr
.98f0	85 30		sta $30				sta 	codePtr
.98f2	90 02		bcc $98f6			bcc 	_CREExit
.98f4	e6 31		inc $31				inc 	codePtr+1
.98f6					_CREExit:
.98f6	80 ef		bra $98e7			bra 	_MAFindEnd
.98f8					_MAFoundEnd:
.98f8	ac 1c 07	ldy $071c			ldy 	tokenOffset 				; bytes to copy
.98fb	c0 04		cpy #$04			cpy 	#4 							; blank line
.98fd	f0 0e		beq $990d			beq 	_MANoLine
.98ff	a9 00		lda #$00			lda 	#0 							; end of program
.9901	91 30		sta ($30),y			sta 	(codePtr),y
.9903					_MACopy:
.9903	88		dey				dey
.9904	b9 1c 07	lda $071c,y			lda 	tokenOffset,y
.9907	91 30		sta ($30),y			sta 	(codePtr),y
.9909	c0 00		cpy #$00			cpy 	#0
.990b	d0 f6		bne $9903			bne 	_MACopy
.990d					_MANoLine:
.990d	60		rts				rts
.990e					MemoryInline:
.990e	98		tya				tya 								; put address into stack,x
.990f	18		clc				clc
.9910	65 30		adc $30				adc 	codePtr
.9912	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9915	a5 31		lda $31				lda 	codePtr+1
.9917	69 00		adc #$00			adc 	#0
.9919	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.991c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.991f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9922	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9923					MemoryTransferAX:
.9923	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9925	86 37		stx $37				stx 	zTemp0+1
.9927	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9929	85 30		sta $30				sta 	codePtr
.992b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.992d	85 31		sta $31				sta 	codePtr+1
.992f					_MTAXLoop:
.992f	b2 30		lda ($30)			lda 	(codePtr)
.9931	f0 1d		beq $9950			beq 	_MTAXError 					; not found.
.9933	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9935	b1 30		lda ($30),y			lda 	(codePtr),y
.9937	c5 36		cmp $36				cmp 	zTemp0
.9939	d0 07		bne $9942			bne 	_MTAXNext
.993b	c8		iny				iny 								; check MSB
.993c	b1 30		lda ($30),y			lda 	(codePtr),y
.993e	c5 37		cmp $37				cmp 	zTemp0+1
.9940	f0 0d		beq $994f			beq 	_MTAXExit 					; success !
.9942					_MTAXNext:
.9942	18		clc				clc
.9943	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9945	65 30		adc $30				adc 	codePtr
.9947	85 30		sta $30				sta 	codePtr
.9949	90 02		bcc $994d			bcc 	_CREExit
.994b	e6 31		inc $31				inc 	codePtr+1
.994d					_CREExit:
.994d	80 e0		bra $992f			bra 	_MTAXLoop
.994f					_MTAXExit:
.994f	60		rts				rts
.9950					_MTAXError:
.9950	a9 0d		lda #$0d		lda	#13
.9952	4c 6a 88	jmp $886a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
