
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Jan 20 14:23:36 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 c7 bb	jsr $bbc7		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 fa bb	jsr $bbfa		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 78 b5	jsr $b578		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 0c b8	jsr $b80c		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a2		09 80		ora #$80			ora 	#$80
.80a4		85 00		sta $00				sta 	0
.80a6		20 c1 a6	jsr $a6c1			jsr		UpdateFont 					; update font if between FPGA updates.
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80cb		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80cd		20 a2 81	jsr $81a2			jsr 	KNLSetDrive
.80d0		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80d2		aa		tax				tax
.80d3		a8		tay				tay
.80d4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d7		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d9		20 75 80	jsr $8075			jsr 	SNDCommand
.80dc		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e1		a9 09		lda #$09			lda 	#9
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e9		64 01		stz $01				stz 	1
.80eb		ad ad d6	lda $d6ad			lda 	$D6AD
.80ee		20 74 83	jsr $8374			jsr 	PrintHex
.80f1		ad ac d6	lda $d6ac			lda 	$D6AC
.80f4		20 74 83	jsr $8374			jsr 	PrintHex
.80f7		ad ab d6	lda $d6ab			lda 	$D6AB
.80fa		20 74 83	jsr $8374			jsr 	PrintHex
.80fd		ad aa d6	lda $d6aa			lda 	$D6AA
.8100		20 74 83	jsr $8374			jsr 	PrintHex
.8103		a9 20		lda #$20			lda 	#32
.8105		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8108		ad a8 d6	lda $d6a8			lda 	$D6A8
.810b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810e		ad a9 d6	lda $d6a9			lda 	$D6A9
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8116		a9 24		lda #$24			lda 	#Prompt & $FF
.8118		20 95 97	jsr $9795			jsr 	PrintStringXA
.811b		20 6b 91	jsr $916b			jsr 	NewProgram 					; erase current program
.811e		4c b7 85	jmp $85b7			jmp 	WarmStart					; make same size.
.8121		4c b7 85	jmp $85b7			jmp 	WarmStart
>8124		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8126		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>812e		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8133		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8137						ProcessEvents:
.8137		20 e1 81	jsr $81e1			jsr 	KNLSetEventPointer
.813a		20 9f 81	jsr $819f			jsr     GetNextEvent 				; get next event
.813d		b0 27		bcs $8166			bcs 	_PEExitZ 					; nothing left to process.
.813f		ad 60 07	lda $0760			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8142		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8144		d0 f1		bne $8137			bne 	ProcessEvents
.8146		ad 66 07	lda $0766			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8149		d0 ec		bne $8137			bne 	ProcessEvents
.814b		ad 65 07	lda $0765			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814e		c9 03		cmp #$03			cmp 	#3
.8150		f0 11		beq $8163			beq 	_PEReturnBreak  			; no, keep going.
.8152		da		phx				phx
.8153		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8156		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8158		f0 06		beq $8160			beq 	_PENoQueue
.815a		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815d		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8160						_PENoQueue:
.8160		fa		plx				plx
.8161		80 d4		bra $8137			bra 	ProcessEvents
.8163						_PEReturnBreak:
.8163		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8165		60		rts				rts
.8166						_PEExitZ:
.8166		a9 00		lda #$00			lda 	#0
.8168		60		rts				rts
.8169						PopKeyboardQueue:
.8169		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.816c		f0 17		beq $8185			beq 	_PKQExit 					; zero, then exit.
.816e		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8171		48		pha				pha
.8172		da		phx				phx 								; drop head of queue
.8173		a2 00		ldx #$00			ldx 	#0
.8175						_PKQLoop:
.8175		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8178		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.817b		e8		inx				inx
.817c		e0 07		cpx #$07			cpx 	#7
.817e		d0 f5		bne $8175			bne 	_PKQLoop
.8180		fa		plx				plx
.8181		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8184		68		pla				pla 								; restore head of queue.
.8185						_PKQExit:
.8185		60		rts				rts
.8186						KNLGetKeyPressed:
.8186		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8189		d0 de		bne $8169			bne 	PopKeyboardQueue 			; if so, pop and return it
.818b		20 37 81	jsr $8137			jsr 	ProcessEvents 				; process any outstanding events
.818e		a9 00		lda #$00			lda 	#0
.8190		60		rts				rts
.8191						KNLGetSingleCharacter:
.8191		20 86 81	jsr $8186			jsr 	KNLGetKeyPressed
.8194		c9 00		cmp #$00			cmp 	#0
.8196		f0 f9		beq $8191			beq 	KNLGetSingleCharacter
.8198		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8199						TickHandler:
.8199		5a		phy				phy 								; need to preserve Y
.819a		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819d		7a		ply				ply
.819e		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819f						GetNextEvent:
.819f		4c 00 ff	jmp $ff00			jmp 	kernel.NextEvent

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.81a2						KNLSetDrive:
.81a2		8d 5f 07	sta $075f			sta 	KNLDefaultDrive
.81a5		60		rts				rts
.81a6						KNLOpenFileWrite:
.81a6		48		pha				pha
.81a7		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.81a9		80 03		bra $81ae			bra 	KNLOpenStart
.81ab						KNLOpenFileRead:
.81ab		48		pha				pha
.81ac		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.81ae						KNLOpenStart:
.81ae		85 f5		sta $f5				sta     kernel.args.file.open.mode
.81b0		68		pla				pla
.81b1		20 ec 81	jsr $81ec			jsr 	KNLSetupFileName
.81b4		20 e1 81	jsr $81e1			jsr 	KNLSetEventPointer
.81b7		ad 5f 07	lda $075f			lda 	KNLDefaultDrive 			; currently drive zero only.
.81ba		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.81bc		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.81bf		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.81c1		b0 1d		bcs $81e0			bcs     _out
.81c3						_loop
.81c3		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81c6		20 9f 81	jsr $819f			jsr     GetNextEvent
.81c9		b0 f8		bcs $81c3			bcs     _loop
.81cb		ad 60 07	lda $0760			lda 	KNLEvent.type
.81ce		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.81d0		f0 0a		beq $81dc			beq 	_success
.81d2		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.81d4		f0 0a		beq $81e0			beq 	_out
.81d6		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81d8		f0 06		beq $81e0			beq 	_out
.81da		80 e7		bra $81c3			bra     _loop
.81dc						_success
.81dc		ad 63 07	lda $0763			lda     KNLEvent.file.stream
.81df		18		clc				clc
.81e0						_out
.81e0		60		rts				rts
.81e1						KNLSetEventPointer:
.81e1		48		pha				pha
.81e2		a9 60		lda #$60			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.81e4		85 f0		sta $f0				sta     kernel.args.events+0
.81e6		a9 07		lda #$07			lda     #KNLEvent >> 8
.81e8		85 f1		sta $f1				sta     kernel.args.events+1
.81ea		68		pla				pla
.81eb		60		rts				rts
.81ec						KNLSetupFileName:
.81ec		5a		phy				phy 								; save Y on stack
.81ed		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.81ef		86 37		stx $37				stx 	zTemp0+1
.81f1		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.81f3		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.81f5		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.81f7						_KNLGetLength:
.81f7		c8		iny				iny
.81f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.81fa		d0 fb		bne $81f7			bne 	_KNLGetLength
.81fc		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.81fe		7a		ply				ply
.81ff		60		rts				rts
.8200						KNLReadBlock:
.8200		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8202		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8204		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8207		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8209		b0 2e		bcs $8239			bcs     _KGNBExitFail               ; report as general error
.820b						_KGRBEventLoop:
.820b		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.820e		20 9f 81	jsr $819f			jsr     GetNextEvent
.8211		b0 f8		bcs $820b			bcs     _KGRBEventLoop
.8213		ad 60 07	lda $0760			lda 	KNLEvent.type 				; get event
.8216		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8218		f0 0a		beq $8224			beq     _KNLRBGetNextByte
.821a		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.821c		f0 1b		beq $8239			beq 	_KGNBExitFail
.821e		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8220		f0 17		beq $8239			beq 	_KGNBExitFail
.8222		80 e7		bra $820b			bra 	_KGRBEventLoop
.8224						_KNLRBGetNextByte:
.8224		a9 5f		lda #$5f			lda     #<KNLReadBuffer 			; Set the target buffer
.8226		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8228		a9 06		lda #$06			lda     #>KNLReadBuffer
.822a		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.822c		ad 66 07	lda $0766			lda     KNLEvent.file.data.read 	; Set the target length
.822f		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8231		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8234		ad 66 07	lda $0766			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8237		18		clc				clc
.8238		60		rts				rts
.8239						_KGNBExitFail:
.8239		38		sec				sec
.823a		60		rts				rts
.823b						KNLWriteBlock:
.823b		da		phx				phx
.823c		5a		phy				phy
.823d		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.823f		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8241		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8243		a5 37		lda $37				lda     zTemp0+1
.8245		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8247		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8249		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.824c		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.824e		b0 21		bcs $8271			bcs 	_KWBFailed
.8250						_KNLWLoop:
.8250		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8253		20 9f 81	jsr $819f			jsr     GetNextEvent
.8256		b0 f8		bcs $8250			bcs     _KNLWLoop
.8258		ad 60 07	lda $0760			lda     KNLEvent.type 				; various errors.
.825b		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.825d		f0 12		beq $8271			beq 	_KWBFailed
.825f		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8261		f0 0e		beq $8271			beq 	_KWBFailed
.8263		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8265		f0 0a		beq $8271			beq 	_KWBFailed
.8267		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8269		d0 e5		bne $8250			bne 	_KNLWLoop
.826b		18		clc				clc
.826c		ad 66 07	lda $0766			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.826f		80 01		bra $8272			bra 	_KWBExit
.8271						_KWBFailed:
.8271		38		sec				sec
.8272						_KWBExit:
.8272		7a		ply				ply
.8273		fa		plx				plx
.8274		60		rts				rts
.8275						KNLCloseFile:
.8275		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8277		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.827a		60		rts				rts
.827b						KNLReadController:
.827b		da		phx				phx
.827c		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.827e		64 01		stz $01				stz 	1 							; switch to I/O 0
.8280		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8283		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8285		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8287		fa		plx				plx
.8288		60		rts				rts
.065f						KNLReadBuffer:
>065f								.fill   256
.075f						KNLDefaultDrive:
>075f								.byte 	?
.0760						KNLEvent
>0760						type        .byte   ?   ; Enum above
>0761						buf         .byte   ?   ; page id or zero
>0762						ext         .byte   ?   ; page id or zero
.0763						key
>0763						keyboard    .byte   ?   ; Keyboard ID
>0764						raw         .byte   ?   ; Raw key ID
>0765						ascii       .byte   ?   ; ASCII value
>0766						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0763						mouse
.0763						delta
>0763						x           .byte   ?
>0764						y           .byte   ?
>0765						z           .byte   ?
>0766						buttons     .byte   ?
.0763						clicks
>0763						inner       .byte   ?
>0764						middle      .byte   ?
>0765						outer       .byte   ?
.0763						joystick
>0763						joy0        .byte   ?
>0764						joy1        .byte   ?
.0763						udp
>0763						token       .byte   ?   ; TODO: break out into fields
.0763						file
>0763						stream      .byte   ?
>0764						cookie      .byte   ?
.0765						data
>0765						requested   .byte   ?   ; Requested number of bytes to read
>0766						read        .byte   ?   ; Number of bytes actually read
.0765						wrote
>0765						requested   .byte   ?   ; Requested number of bytes to read
>0766						wrote       .byte   ?   ; Number of bytes actually read
.0763						directory
>0763						stream      .byte   ?
>0764						cookie      .byte   ?
.0765						volume
>0765						len         .byte   ?   ; Length of volname (in buf)
>0766						flags       .byte   ?   ; block size, text encoding
.0765						file
>0765						len         .byte   ?
>0766						flags       .byte   ?   ; block scale, text encoding, approx size
.0765						free
>0765						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8289						AssembleGroup1:
.8289		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.828b		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.828e		80 02		bra $8292			bra 	AsmGroup12
.8290						AssembleGroup2:
.8290		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8292						AsmGroup12:
.8292		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8295		68		pla				pla 								; pop the return address to access the information following.
.8296		fa		plx				plx
.8297		20 1e 83	jsr $831e			jsr 	AccessParameters 			; get opcode and save as base
.829a		8d 20 04	sta $0420			sta 	BaseOpcode
.829d		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82a0		d0 08		bne $82aa			bne 	_AG12HaveMask
.82a2		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82a4		20 26 83	jsr $8326			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82a7		8d 21 04	sta $0421			sta 	ModeMask
.82aa						_AG12HaveMask:
.82aa		20 5a 84	jsr $845a			jsr 	TypeAndCalculateOperand 	; get zero page type
.82ad		da		phx				phx 								; save found address mode
.82ae		20 8a 83	jsr $838a			jsr 	AssembleModeX
.82b1		fa		plx				plx  								; restore address mode
.82b2		b0 0b		bcs $82bf			bcs 	_AG12Exit
.82b4		20 c0 82	jsr $82c0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82b7		20 8a 83	jsr $838a			jsr 	AssembleModeX
.82ba		b0 03		bcs $82bf			bcs 	_AG12Exit
.82bc		4c 4f b1	jmp $b14f			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82bf						_AG12Exit:
.82bf		60		rts				rts
.82c0						PromoteToAbsolute:
.82c0		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82c2		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82c4		f0 19		beq $82df			beq 	_PTADo
.82c6		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82c8		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82ca		f0 13		beq $82df			beq 	_PTADo
.82cc		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82ce		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82d0		f0 0d		beq $82df			beq 	_PTADo
.82d2		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82d4		e0 d1		cpx #$d1			cpx 	#AM_IND
.82d6		f0 07		beq $82df			beq 	_PTADo
.82d8		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82da		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82dc		f0 01		beq $82df			beq 	_PTADo
.82de		60		rts				rts
.82df						_PTADo:
.82df		aa		tax				tax
.82e0		60		rts				rts
.82e1						AssembleGroup3:
.82e1		68		pla				pla 								; get parameters, which is just the opcode.
.82e2		fa		plx				plx
.82e3		20 1e 83	jsr $831e			jsr 	AccessParameters 			; get and output opcode
.82e6		20 36 83	jsr $8336			jsr 	AssemblerWriteByte
.82e9		20 be 84	jsr $84be			jsr 	CalculateOperand 			; get a 16 bit operand
.82ec		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82ee		38		sec				sec
.82ef		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82f2		48		pha				pha 								; LSB in A
.82f3		a5 60		lda $60				lda 	NSMantissa1
.82f5		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.82f8		aa		tax				tax 								; MSB in X
.82f9		68		pla				pla
.82fa		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82fb		69 7f		adc #$7f			adc 	#$7F
.82fd		90 01		bcc $8300			bcc 	_AG3NoCarry
.82ff		e8		inx				inx
.8300						_AG3NoCarry:
.8300		38		sec				sec 								; fix back and write out anyways.
.8301		e9 80		sbc #$80			sbc 	#$80
.8303		20 36 83	jsr $8336			jsr 	AssemblerWriteByte
.8306		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8308		f0 0a		beq $8314			beq 	_AG3Exit
.830a		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.830d		29 01		and #$01			and 	#1
.830f		f0 03		beq $8314			beq 	_AG3Exit
.8311		4c 54 b1	jmp $b154			jmp 	RangeError 					; no, branch is out of range
.8314						_AG3Exit:
.8314		60		rts				rts
.8315						AssembleGroup4:
.8315		68		pla				pla 								; pop address
.8316		fa		plx				plx
.8317		20 1e 83	jsr $831e			jsr 	AccessParameters 			; access and get first
.831a		20 36 83	jsr $8336			jsr 	AssemblerWriteByte 			; output it.
.831d		60		rts				rts
.831e						AccessParameters:
.831e		8d 1d 04	sta $041d			sta 	ParamStart
.8321		8e 1e 04	stx $041e			stx 	ParamStart+1
.8324		a9 01		lda #$01			lda 	#1
.8326						GetParameter:
.8326		5a		phy				phy
.8327		a8		tay				tay
.8328		ad 1d 04	lda $041d			lda 	ParamStart
.832b		85 36		sta $36				sta 	zTemp0
.832d		ad 1e 04	lda $041e			lda 	ParamStart+1
.8330		85 37		sta $37				sta 	zTemp0+1
.8332		b1 36		lda ($36),y			lda 	(zTemp0),y
.8334		7a		ply				ply
.8335		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8336						AssemblerWriteByte:
.8336		48		pha			pha
.8337		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.833a		29 02		and #$02		and 	#2
.833c		f0 1b		beq $8359		beq 	_AWBNoPrint
.833e		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8341		20 74 83	jsr $8374		jsr 	PrintHex
.8344		ad 1a 04	lda $041a		lda		AssemblerAddress
.8347		20 74 83	jsr $8374		jsr 	PrintHex
.834a		a9 20		lda #$20		lda 	#' '
.834c		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.834f		68		pla			pla 									; print byte
.8350		48		pha			pha
.8351		20 74 83	jsr $8374		jsr 	PrintHex
.8354		a9 0d		lda #$0d		lda 	#13
.8356		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8359						_AWBNoPrint:
.8359		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.835c		85 36		sta $36			sta 	zTemp0
.835e		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8361		f0 0e		beq $8371		beq 	_AWBRange
.8363		85 37		sta $37			sta 	zTemp0+1
.8365		68		pla			pla 									; write byte out
.8366		92 36		sta ($36)		sta 	(zTemp0)
.8368		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.836b		d0 03		bne $8370		bne 	_AWBNoCarry
.836d		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8370						_AWBNoCarry:
.8370		60		rts			rts
.8371						_AWBRange:
.8371		4c 54 b1	jmp $b154		jmp 	RangeError
.8374						PrintHex:
.8374		48		pha				pha
.8375		4a		lsr a				lsr 	a
.8376		4a		lsr a				lsr 	a
.8377		4a		lsr a				lsr 	a
.8378		4a		lsr a				lsr 	a
.8379		20 7d 83	jsr $837d			jsr 	_PrintNibble
.837c		68		pla				pla
.837d						_PrintNibble:
.837d		29 0f		and #$0f			and 	#15
.837f		c9 0a		cmp #$0a			cmp 	#10
.8381		90 02		bcc $8385			bcc 	_NoShift
.8383		69 06		adc #$06			adc 	#6
.8385						_NoShift:
.8385		69 30		adc #$30			adc 	#48
.8387		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.838a						AssembleModeX:
.838a		5a		phy				phy
.838b		ad 1f 04	lda $041f			lda 	IsGroup1
.838e		f0 17		beq $83a7			beq 	_AMXGroup2
.8390		8a		txa				txa 							; is it in group # 1
.8391		29 40		and #$40			and 	#AM_ISG1
.8393		f0 4d		beq $83e2			beq 	_AMXFail 				; no, give up.
.8395		8a		txa				txa 							; get back.
.8396		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8398		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.839a		d0 22		bne $83be			bne 	_AMXHaveInfo
.839c		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.839f		c9 81		cmp #$81			cmp 	#$81
.83a1		f0 3f		beq $83e2			beq 	_AMXFail
.83a3		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83a5		80 17		bra $83be			bra 	_AMXHaveInfo 			; odd design decision there.
.83a7						_AMXGroup2:
.83a7		8a		txa				txa 							; is it in group 2 ?
.83a8		29 20		and #$20			and 	#AM_ISG2
.83aa		f0 36		beq $83e2			beq 	_AMXFail 				; no, give up.
.83ac		8a		txa				txa 							; get the offset into Y
.83ad		29 1f		and #$1f			and 	#$1F
.83af		4a		lsr a				lsr 	a 						; make it 0-7.
.83b0		4a		lsr a				lsr  	a
.83b1		a8		tay				tay
.83b2		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83b5						_AMXCheckOkay:
.83b5		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83b6		88		dey				dey
.83b7		10 fc		bpl $83b5			bpl 	_AMXCheckOkay
.83b9		90 27		bcc $83e2			bcc 	_AMXFail 				; not allowed.
.83bb		8a		txa				txa  							; get mask back
.83bc		29 1f		and #$1f			and 	#$1F
.83be						_AMXHaveInfo:
.83be		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83c0		10 04		bpl $83c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83c2		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83c4		d0 1c		bne $83e2			bne 	_AMXFail
.83c6						_AMXAnySize:
.83c6		18		clc				clc 							; add offset to the base opcode
.83c7		6d 20 04	adc $0420			adc 	BaseOpcode
.83ca						_AMXOutputCode:
.83ca		20 36 83	jsr $8336			jsr 	AssemblerWriteByte 		; write the opcode out.
.83cd		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83cf		f0 0e		beq $83df			beq 	_AMXExit
.83d1		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83d3		20 36 83	jsr $8336			jsr 	AssemblerWriteByte
.83d6		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83d8		30 05		bmi $83df			bmi 	_AMXExit
.83da		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83dc		20 36 83	jsr $8336			jsr 	AssemblerWriteByte
.83df						_AMXExit:
.83df		7a		ply				ply
.83e0		38		sec				sec
.83e1		60		rts				rts
.83e2						_AMXFail:
.83e2		a0 00		ldy #$00			ldy 	#0
.83e4						_AMXCheckOddities:
.83e4		8a		txa				txa
.83e5		d9 0c 84	cmp $840c,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83e8		d0 15		bne $83ff			bne 	_AMXCONext
.83ea		b9 0a 84	lda $840a,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83ed		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83f0		d0 0d		bne $83ff			bne 	_AMXCONext
.83f2		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83f4		10 04		bpl $83fa			bpl 	_AMXCONotZero
.83f6		a5 60		lda $60				lda 	NSMantissa1
.83f8		d0 05		bne $83ff			bne 	_AMXCONext
.83fa						_AMXCONotZero:
.83fa		b9 0b 84	lda $840b,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83fd		80 cb		bra $83ca			bra 	_AMXOutputCode 			; and assemble it
.83ff						_AMXCONext:
.83ff		c8		iny				iny
.8400		c8		iny				iny
.8401		c8		iny				iny
.8402		b9 0a 84	lda $840a,y			lda 	ExtraOpcode+0,y 		; end of table
.8405		d0 dd		bne $83e4			bne 	_AMXCheckOddities
.8407						_AMXCOFail:
.8407		7a		ply				ply
.8408		18		clc				clc
.8409		60		rts				rts
.840a						ExtraOpcode:
>840a		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>840d		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8410		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8413		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8416		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8419		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>841c		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>841f		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8422		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8425		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8428		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8429						LabelHere:
.8429		c8		iny				iny 								; skip .
.842a		a2 00		ldx #$00			ldx 	#0 							; get a term
.842c		20 8a a0	jsr $a08a			jsr 	EvaluateTerm
.842f		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8431		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8433		d0 22		bne $8457			bne 	_ALType 					; otherwise typing error
.8435		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8437		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8439		b5 60		lda $60,x			lda 	NSMantissa1,x
.843b		85 37		sta $37				sta 	zTemp0+1
.843d		5a		phy				phy 								; copy address in (64k)
.843e		a0 01		ldy #$01			ldy 	#1
.8440		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8443		92 36		sta ($36)			sta 	(zTemp0)
.8445		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8448		91 36		sta ($36),y			sta 	(zTemp0),y
.844a		c8		iny				iny
.844b		a9 00		lda #$00			lda 	#0 							; zero the rest.
.844d		91 36		sta ($36),y			sta 	(zTemp0),y
.844f		c8		iny				iny
.8450		91 36		sta ($36),y			sta 	(zTemp0),y
.8452		c8		iny				iny
.8453		91 36		sta ($36),y			sta 	(zTemp0),y
.8455		7a		ply				ply
.8456		60		rts				rts
.8457						_ALType:
.8457		4c 59 b1	jmp $b159			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.845a						TypeAndCalculateOperand:
.845a		b1 30		lda ($30),y			lda 	(codePtr),y
.845c		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.845e		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8460		f0 5b		beq $84bd			beq 	_TACOExit
.8462		c9 80		cmp #$80			cmp 	#KWC_EOL
.8464		f0 57		beq $84bd			beq 	_TACOExit
.8466		c8		iny				iny
.8467		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8469		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.846b		f0 51		beq $84be			beq 	CalculateOperand
.846d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.846f		f0 1f		beq $8490			beq 	_TACOIndirect
.8471		88		dey				dey 								; undo get of first character
.8472		20 be 84	jsr $84be			jsr 	CalculateOperand 			; get operand
.8475		b1 30		lda ($30),y			lda 	(codePtr),y
.8477		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8479		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.847b		d0 40		bne $84bd			bne 	_TACOExit
.847d		c8		iny				iny
.847e		20 c8 84	jsr $84c8			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8481		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8483		c9 58		cmp #$58			cmp 	#'X'
.8485		f0 36		beq $84bd			beq 	_TACOExit
.8487		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8489		c9 59		cmp #$59			cmp 	#'Y'
.848b		f0 30		beq $84bd			beq 	_TACOExit
.848d						_TACOSyntax:
.848d		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.8490						_TACOIndirect:
.8490		20 be 84	jsr $84be			jsr 	CalculateOperand 			; get the operand
.8493		b1 30		lda ($30),y			lda 	(codePtr),y
.8495		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8497		f0 17		beq $84b0			beq 	_TACOIndX
.8499		20 23 97	jsr $9723			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.849c		b1 30		lda ($30),y			lda 	(codePtr),y
.849e		a2 d1		ldx #$d1			ldx 	#AM_IND
.84a0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84a2		d0 19		bne $84bd			bne 	_TACOExit
.84a4		c8		iny				iny
.84a5		20 c8 84	jsr $84c8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84a8		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84aa		d0 e1		bne $848d			bne 	_TACOSyntax
.84ac		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84ae		80 0d		bra $84bd			bra 	_TACOExit
.84b0						_TACOIndX:
.84b0		c8		iny				iny
.84b1		20 c8 84	jsr $84c8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84b4		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84b6		d0 d5		bne $848d			bne 	_TACOSyntax
.84b8		20 23 97	jsr $9723			jsr 	CheckRightBracket			; check )
.84bb		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84bd						_TACOExit:
.84bd		60		rts				rts
.84be						CalculateOperand:
.84be		48		pha				pha
.84bf		da		phx				phx
.84c0		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84c2		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.84c5		fa		plx				plx
.84c6		68		pla				pla
.84c7		60		rts				rts
.84c8						TACOCheckXY:
.84c8		b1 30		lda ($30),y			lda 	(codePtr),y
.84ca		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84cc		c9 40		cmp #$40			cmp 	#$40
.84ce		d0 21		bne $84f1			bne 	_TCXYFail
.84d0		b1 30		lda ($30),y			lda 	(codePtr),y
.84d2		18		clc				clc
.84d3		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84d5		85 37		sta $37				sta 	zTemp0+1
.84d7		c8		iny				iny
.84d8		b1 30		lda ($30),y			lda 	(codePtr),y
.84da		c8		iny				iny
.84db		85 36		sta $36				sta 	zTemp0
.84dd		5a		phy				phy 								; save position
.84de		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84e0		b1 36		lda ($36),y			lda 	(zTemp0),y
.84e2		d0 0c		bne $84f0			bne 	_TCXYPopFail
.84e4		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84e6		b1 36		lda ($36),y			lda 	(zTemp0),y
.84e8		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84ea		f0 08		beq $84f4			beq 	_TCXYFound
.84ec		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84ee		f0 04		beq $84f4			beq 	_TCXYFound
.84f0						_TCXYPopFail:
.84f0		7a		ply				ply
.84f1						_TCXYFail:
.84f1		a9 00		lda #$00			lda 	#0
.84f3		60		rts				rts
.84f4						_TCXYFound:
.84f4		7a		ply				ply 								; restore position
.84f5		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84f7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84f8						BackloadProgram:
.84f8		20 6b 91	jsr $916b			jsr 	NewProgram 					; does the actual NEW.
.84fb		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84fd		a9 4f		lda #$4f			lda 	#_BLLoad & $FF
.84ff		20 95 97	jsr $9795			jsr 	PrintStringXA
.8502		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8504		8d 67 07	sta $0767			sta 	BackLoadPage
.8507		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8509		8d 68 07	sta $0768			sta 	0+BackLoadPointer
.850c		a9 60		lda #$60			lda 	#(($6000) >> 8)
.850e		8d 69 07	sta $0769			sta 	1+BackLoadPointer
.8511		a9 ff		lda #$ff			lda 	#$FF
.8513		8d fa ff	sta $fffa			sta 	$FFFA
.8516						_BPLoop:
.8516		a2 ff		ldx #$ff			ldx 	#$FF
.8518		20 64 85	jsr $8564			jsr 	BLReadByte 					; read a byte
.851b		c9 00		cmp #$00			cmp 	#0
.851d		f0 29		beq $8548			beq 	_BPExit 					; if 0 exit
.851f		30 27		bmi $8548			bmi 	_BPExit 					; if -ve exit
.8521						_BPCopy:
.8521		e8		inx				inx  								; copy byte into the lineBuffer
.8522		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8525		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.8528		20 64 85	jsr $8564			jsr 	BLReadByte 					; read next byte
.852b		30 0a		bmi $8537			bmi 	_BPEndLine 					; -ve = EOL
.852d		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.852f		d0 02		bne $8533			bne 	_BPNotTab
.8531		a9 20		lda #$20			lda 	#' '
.8533						_BPNotTab:
.8533		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8535		b0 ea		bcs $8521			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8537						_BPEndLine:
.8537		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.853a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.853d		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8540		f0 d4		beq $8516			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8542		38		sec				sec 								; append not insert
.8543		20 43 b3	jsr $b343			jsr 	MemoryInsertLine 			; append to current program
.8546		80 ce		bra $8516			bra 	_BPLoop
.8548						_BPExit:
.8548		9c fa ff	stz $fffa			stz 	$FFFA
.854b		20 4d 86	jsr $864d			jsr 	ClearCommand 				; clear variables etc.
.854e		60		rts				rts
.854f						_BLLoad:
>854f		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8557		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8564						BLReadByte:
.8564		da		phx				phx
.8565		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8567		ad 67 07	lda $0767			lda 	BackLoadPage	 			; set current page
.856a		85 0b		sta $0b				sta 	8+3
.856c		ad 68 07	lda $0768			lda 	BackLoadPointer 			; copy pointer to zTemp0
.856f		85 36		sta $36				sta 	zTemp0
.8571		ad 69 07	lda $0769			lda 	BackLoadPointer+1
.8574		85 37		sta $37				sta 	zTemp0+1
.8576		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8578		ee 68 07	inc $0768			inc 	BackLoadPointer 			; bump pointer
.857b		d0 0f		bne $858c			bne 	_BLNoCarry
.857d		ee 69 07	inc $0769			inc 	BackLoadPointer+1
.8580		10 0a		bpl $858c			bpl 	_BLNoCarry 					; need a new page
.8582		48		pha				pha
.8583		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8585		8d 69 07	sta $0769			sta 	BackLoadPointer+1
.8588		ee 67 07	inc $0767			inc 	BackLoadPage 				; next page from source.
.858b		68		pla				pla
.858c						_BLNoCarry:
.858c		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.858e		fa		plx				plx
.858f		c9 00		cmp #$00			cmp 	#0
.8591		60		rts				rts
.0767						BackLoadPage:
>0767								.fill  	1
.0768						BackLoadPointer:
>0768								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8592						EditProgramCode:
.8592		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8595		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.8598		20 e7 b3	jsr $b3e7			jsr 	MemorySearch
.859b		90 05		bcc $85a2			bcc 	_EPCNoDelete 				; reached the end : don't delete
.859d		d0 03		bne $85a2			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.859f		20 0c b3	jsr $b30c			jsr 	MemoryDeleteLine 			; delete the line
.85a2						_EPCNoDelete:
.85a2		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.85a5		c9 80		cmp #$80			cmp 	#KWC_EOL
.85a7		f0 0d		beq $85b6			beq 	_EPCNoInsert
.85a9		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85ac		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85af		20 e7 b3	jsr $b3e7			jsr 	MemorySearch
.85b2		18		clc				clc 								; insert at this point.
.85b3		20 43 b3	jsr $b343			jsr 	MemoryInsertLine 			; insert the line
.85b6						_EPCNoInsert:
.85b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85b7						WarmStart:
.85b7		a2 ff		ldx #$ff			ldx 	#$FF
.85b9		9a		txs				txs
.85ba		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85bc		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.85bf		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.85c2		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.85c5		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.85c8		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85cb		d0 17		bne $85e4			bne 	_WSEditCode 				; if so,edit code.
.85cd		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85d0		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.85d2		85 30		sta $30				sta 	codePtr
.85d4		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85d6		85 31		sta $31				sta 	codePtr+1
.85d8		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.85db		c9 80		cmp #$80			cmp 	#KWC_EOL
.85dd		f0 d8		beq $85b7			beq 	WarmStart
.85df		20 08 93	jsr $9308			jsr 	RUNCodePointerLine 			; execute that line.
.85e2		80 d3		bra $85b7			bra 	WarmStart
.85e4						_WSEditCode:
.85e4		20 92 85	jsr $8592			jsr 	EditProgramCode 			; edit the program code
.85e7		20 4d 86	jsr $864d			jsr 	ClearCommand 				; clear all variables etc.
.85ea		80 cb		bra $85b7			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85ec						AssembleCommand:
.85ec		a2 00		ldx #$00			ldx 	#0
.85ee		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; start address
.85f1		a5 58		lda $58				lda 	NSMantissa0
.85f3		8d 1a 04	sta $041a			sta 	AssemblerAddress
.85f6		a5 60		lda $60				lda 	NSMantissa1
.85f8		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.85fb		20 2b 97	jsr $972b			jsr 	CheckComma
.85fe		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; options 0-3
.8601		a5 58		lda $58				lda 	NSMantissa0
.8603		8d 1c 04	sta $041c			sta 	AssemblerControl
.8606		60		rts				rts
.8607		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8608						AssertCommand:
.8608		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.860a		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; the assert test
.860d		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; exit if result is non zero.
.8610		d0 05		bne $8617			bne 	_ACExit
.8612		a9 0a		lda #$0a		lda	#10
.8614		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8617						_ACExit:
.8617		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8618						CallCommand:
.8618		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.861a		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.861d						_CCClear
.861d		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.861e		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; these are optional sequentially.
.8621		e0 04		cpx #$04			cpx 	#4
.8623		d0 f8		bne $861d			bne 	_CCClear
.8625		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8627						_CCCParam:
.8627		b1 30		lda ($30),y			lda 	(codePtr),y
.8629		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.862b		d0 09		bne $8636			bne 	_CCCRun6502
.862d		c8		iny				iny 								; skip comma
.862e		e8		inx				inx	 								; next level
.862f		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8632		e0 03		cpx #$03			cpx 	#3
.8634		90 f1		bcc $8627			bcc 	_CCCParam 					; done all 3 ?
.8636						_CCCRun6502:
.8636		5a		phy				phy 								; save position
.8637		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8639		85 37		sta $37				sta 	zTemp0+1
.863b		a5 58		lda $58				lda 	NSMantissa0
.863d		85 36		sta $36				sta 	zTemp0
.863f		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8641		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8643		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8645		20 4a 86	jsr $864a			jsr 	_CCCZTemp0 					; call zTemp0
.8648		7a		ply				ply 								; restore position and exit
.8649		60		rts				rts
.864a						_CCCZTemp0:
.864a		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.864d						ClearCommand:
.864d		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.864f		85 36		sta $36				sta 	0+zTemp0
.8651		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8653		85 37		sta $37				sta 	1+zTemp0
.8655						_ClearZeroLoop:
.8655		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8657		f0 24		beq $867d			beq 	_ClearZeroEnd
.8659		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.865b		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.865d						_ClearOneVariable:
.865d		91 36		sta ($36),y			sta 	(zTemp0),y
.865f		c8		iny				iny
.8660		c0 08		cpy #$08			cpy 	#8
.8662		d0 f9		bne $865d			bne 	_ClearOneVariable
.8664		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8666		b1 36		lda ($36),y			lda 	(zTemp0),y
.8668		c9 18		cmp #$18			cmp 	#NSTProcedure
.866a		d0 04		bne $8670			bne 	_ClearNotProcedure
.866c		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.866e		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8670						_ClearNotProcedure:
.8670		18		clc				clc 								; go to the next variable
.8671		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8673		65 36		adc $36				adc 	zTemp0
.8675		85 36		sta $36				sta 	zTemp0
.8677		90 dc		bcc $8655			bcc 	_ClearZeroLoop
.8679		e6 37		inc $37				inc 	zTemp0+1
.867b		80 d8		bra $8655			bra 	_ClearZeroLoop
.867d						_ClearZeroEnd:
.867d		18		clc				clc
.867e		a5 36		lda $36				lda 	zTemp0
.8680		69 01		adc #$01			adc 	#1
.8682		8d 08 04	sta $0408			sta 	lowMemPtr
.8685		a5 37		lda $37				lda 	zTemp0+1
.8687		69 00		adc #$00			adc 	#0
.8689		8d 09 04	sta $0409			sta 	lowMemPtr+1
.868c		20 2f b8	jsr $b82f			jsr 	StackReset
.868f		20 95 b8	jsr $b895			jsr 	StringSystemInitialise
.8692		20 2c 96	jsr $962c			jsr 	ProcedureScan
.8695		20 aa 92	jsr $92aa			jsr 	Command_Restore
.8698		9c 1a 04	stz $041a			stz 	AssemblerAddress
.869b		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.869e		9c 1c 04	stz $041c			stz 	AssemblerControl
.86a1		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.86a4		20 76 a2	jsr $a276			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.86a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.86a8						XLoadCommand:
.86a8		20 6b 91	jsr $916b			jsr 	NewProgram
.86ab		20 f8 84	jsr $84f8			jsr 	BackloadProgram
.86ae		4c b7 85	jmp $85b7			jmp 	WarmStart
.86b1						XGoCommand:
.86b1		20 6b 91	jsr $916b			jsr 	NewProgram
.86b4		20 f8 84	jsr $84f8			jsr 	BackloadProgram
.86b7		4c f6 92	jmp $92f6			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.86ba						Command_Data:
.86ba		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.86bc		a2 80		ldx #$80			ldx 	#KWC_EOL
.86be		20 7e 96	jsr $967e			jsr 	ScanForward
.86c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.86c2						DimCommand:
.86c2		b1 30		lda ($30),y			lda 	(codePtr),y
.86c4		29 c0		and #$c0			and 	#$C0
.86c6		c9 40		cmp #$40			cmp 	#$40
.86c8		d0 7a		bne $8744			bne 	_DCSyntax 				; n o, error.
.86ca		b1 30		lda ($30),y			lda 	(codePtr),y
.86cc		18		clc				clc
.86cd		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86cf		85 3f		sta $3f				sta 	zaTemp+1
.86d1		c8		iny				iny
.86d2		b1 30		lda ($30),y			lda 	(codePtr),y
.86d4		c8		iny				iny
.86d5		85 3e		sta $3e				sta 	zaTemp
.86d7		5a		phy				phy
.86d8		a0 02		ldy #$02			ldy 	#2 						; read type byte
.86da		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86dc		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.86de		c9 18		cmp #$18			cmp 	#NSTProcedure
.86e0		f0 62		beq $8744			beq 	_DCSyntax
.86e2		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.86e4		29 04		and #$04			and 	#NSBIsArray
.86e6		f0 64		beq $874c			beq 	_DCType
.86e8		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.86ea		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86ec		d0 59		bne $8747			bne 	_DCRedefine
.86ee		7a		ply				ply
.86ef		20 4f 87	jsr $874f			jsr 	_DCGetSize 				; get array size, check it.
.86f2		5a		phy				phy
.86f3		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.86f5		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.86f7		7a		ply				ply 							; is there a second (e.g. ,x)
.86f8		b1 30		lda ($30),y			lda 	(codePtr),y
.86fa		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fc		d0 0a		bne $8708			bne 	_DCOneDimension
.86fe		c8		iny				iny 							; skip comma
.86ff		20 4f 87	jsr $874f			jsr 	_DCGetSize 				; get 2nd array size
.8702		5a		phy				phy
.8703		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8705		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8707		7a		ply				ply
.8708						_DCOneDimension:
.8708		5a		phy				phy 							; save position
.8709		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.870b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.870d		aa		tax				tax
.870e		c8		iny				iny
.870f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8711		e8		inx				inx 							; bump them.
.8712		1a		inc a				inc 	a
.8713		20 41 a6	jsr $a641			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8716		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8718		29 e0		and #$e0			and 	#$E0
.871a		d0 23		bne $873f			bne 	_DCSize
.871c		a0 02		ldy #$02			ldy 	#2 						; get base type
.871e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8720		20 5d 87	jsr $875d			jsr 	ScaleByBaseType 		; scale by base type
.8723		a5 36		lda $36				lda 	zTemp0
.8725		a6 37		ldx $37				ldx 	zTemp0+1
.8727		20 38 a2	jsr $a238			jsr 	AllocateXABytes 		; allocate memory
.872a		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.872c		91 3e		sta ($3e),y			sta 	(zaTemp),y
.872e		c8		iny				iny
.872f		8a		txa				txa
.8730		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8732		7a		ply				ply 							; get position back
.8733		20 23 97	jsr $9723			jsr 	CheckRightBracket 		; check )
.8736		b1 30		lda ($30),y			lda 	(codePtr),y
.8738		c8		iny				iny 							; consume in case
.8739		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.873b		f0 85		beq $86c2			beq 	DimCommand
.873d		88		dey				dey 							; undo consume
.873e		60		rts				rts
.873f						_DCSize:
.873f		a9 16		lda #$16		lda	#22
.8741		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8744						_DCSyntax:
.8744		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.8747						_DCRedefine:
.8747		a9 15		lda #$15		lda	#21
.8749		4c 3c 97	jmp $973c		jmp	ErrorHandler
.874c						_DCType:
.874c		4c 59 b1	jmp $b159			jmp 	TypeError
.874f						_DCGetSize:
.874f		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8751		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 	; get array dimension
.8754		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8756		f0 e7		beq $873f			beq 	_DCSize
.8758		c9 fe		cmp #$fe			cmp 	#254
.875a		f0 e3		beq $873f			beq 	_DCSize
.875c		60		rts				rts
.875d						ScaleByBaseType:
.875d		29 10		and #$10			and 	#NSBIsString 			; is it string
.875f		d0 19		bne $877a			bne 	_SBBTString
.8761		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8763		48		pha				pha
.8764		a5 36		lda $36				lda 	zTemp0
.8766		48		pha				pha
.8767		06 36		asl $36				asl 	zTemp0 					; x 2
.8769		26 37		rol $37				rol 	zTemp0+1
.876b		06 36		asl $36				asl 	zTemp0 					; x 4
.876d		26 37		rol $37				rol 	zTemp0+1
.876f		68		pla				pla 							; add stacked value = x 5
.8770		65 36		adc $36				adc 	zTemp0
.8772		85 36		sta $36				sta 	zTemp0
.8774		68		pla				pla
.8775		65 37		adc $37				adc 	zTemp0+1
.8777		85 37		sta $37				sta 	zTemp0+1
.8779		60		rts				rts
.877a						_SBBTString:
.877a		06 36		asl $36				asl 	zTemp0
.877c		26 37		rol $37				rol 	zTemp0+1
.877e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.877f						BootDOS:
.877f		a9 8d		lda #$8d	            lda     #dosName & $FF
.8781		85 fb		sta $fb		            sta     kernel.args.buf+0
.8783		a9 87		lda #$87	            lda     #dosName >> 8
.8785		85 fc		sta $fc		            sta     kernel.args.buf+1
.8787		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.878a		4c b7 85	jmp $85b7	            jmp 	WarmStart
>878d		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8791						EndCommand:
.8791		4c b7 85	jmp $85b7			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.8794						UnaryEvent:
.8794		fa		plx				plx
.8795		20 17 96	jsr $9617			jsr 	TimerToStackX 				; timer in +0
.8798		e8		inx				inx  								; put reference into +1
.8799		20 8a a0	jsr $a08a			jsr 	EvaluateTerm
.879c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.879e		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.87a0		d0 4c		bne $87ee			bne 	_UEType
.87a2		e8		inx				inx 								; put the step in +2
.87a3		20 2b 97	jsr $972b			jsr 	CheckComma
.87a6		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.87a9		20 23 97	jsr $9723			jsr 	CheckRightBracket
.87ac		ca		dex				dex
.87ad		ca		dex				dex
.87ae		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.87b0		85 36		sta $36				sta 	zTemp0
.87b2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.87b4		85 37		sta $37				sta 	zTemp0+1
.87b6		5a		phy				phy
.87b7		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.87b9		b1 36		lda ($36),y			lda 	(zTemp0),y
.87bb		30 2d		bmi $87ea			bmi 	_UEFalse 					; exit if signed.
.87bd		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.87bf		b5 58		lda $58,x			lda 	NSMantissa0,x
.87c1		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87c3		c8		iny				iny
.87c4		b5 60		lda $60,x			lda 	NSMantissa1,x
.87c6		f1 36		sbc ($36),y			sbc		(zTemp0),y
.87c8		c8		iny				iny
.87c9		b5 68		lda $68,x			lda 	NSMantissa2,x
.87cb		f1 36		sbc ($36),y			sbc		(zTemp0),y
.87cd		90 1b		bcc $87ea			bcc 	_UEFalse 					; no, return FALSE.
.87cf		18		clc				clc
.87d0		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.87d2		b5 58		lda $58,x			lda 	NSMantissa0,x
.87d4		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.87d6		91 36		sta ($36),y			sta 	(zTemp0),y
.87d8		c8		iny				iny
.87d9		b5 60		lda $60,x			lda 	NSMantissa1,x
.87db		75 62		adc $62,x			adc 	NSMantissa1+2,x
.87dd		91 36		sta ($36),y			sta 	(zTemp0),y
.87df		c8		iny				iny
.87e0		b5 68		lda $68,x			lda 	NSMantissa2,x
.87e2		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.87e4		91 36		sta ($36),y			sta 	(zTemp0),y
.87e6		7a		ply				ply
.87e7		4c a9 97	jmp $97a9			jmp 	ReturnTrue
.87ea						_UEFalse:
.87ea		7a		ply				ply 								; restore Y
.87eb		4c b4 97	jmp $97b4			jmp 	ReturnFalse 				; and return False
.87ee						_UEType:
.87ee		4c 59 b1	jmp $b159			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.87f1						Command_BLoad:
.87f1		a2 00		ldx #$00			ldx 	#0
.87f3		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; file name to load
.87f6		20 2b 97	jsr $972b			jsr 	CheckComma 					; consume comma
.87f9		e8		inx				inx
.87fa		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; load address (full physical address)
.87fd		5a		phy				phy
.87fe		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8800		a6 60		ldx $60				ldx 	NSMantissa1
.8802		20 ab 81	jsr $81ab			jsr 	KNLOpenFileRead 			; open file for reading
.8805		b0 4e		bcs $8855			bcs 	CBLErrorHandler 			; error, so fail.
.8807		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.880a		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.880c		20 58 88	jsr $8858			jsr 	BLOpenPhysicalMemory 		; open for access.
.880f						_BLReadFile:
.880f		ad 6e 07	lda $076e			lda 	BasicFileStream
.8812		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8814		20 00 82	jsr $8200			jsr 	KNLReadBlock 				; read next block
.8817		b0 22		bcs $883b			bcs 	_BLFileError 				; file error, which might be EOF.
.8819		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.881b		f0 f2		beq $880f			beq 	_BLReadFile
.881d		8d 6c 07	sta $076c			sta 	BLCopyCounter 				; counter.
.8820		ac 6b 07	ldy $076b			ldy 	BLYOffset 					; copy the buffer out here
.8823		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8825						_BLCopyLoop:
.8825		bd 5f 06	lda $065f,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8828		91 3a		sta ($3a),y			sta 	(zTemp2),y
.882a		c8		iny				iny
.882b		d0 03		bne $8830			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.882d		20 80 88	jsr $8880			jsr 	BLAdvancePhysicalMemory
.8830						_BLNoAdjust:
.8830		e8		inx				inx
.8831		ce 6c 07	dec $076c			dec 	BLCopyCounter
.8834		d0 ef		bne $8825			bne 	_BLCopyLoop
.8836		8c 6b 07	sty $076b			sty 	BLYOffset 					; update Y offset
.8839		80 d4		bra $880f			bra 	_BLReadFile 				; go ask for more.
.883b						_BLFileError:
.883b		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.883d		d0 16		bne $8855			bne 	CBLErrorHandler				; no, it's an actual error
.883f		20 7a 88	jsr $887a			jsr 	BLClosePhysicalMemory 		; close the access.
.8842		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close the file
.8845		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8848		7a		ply				ply
.8849		60		rts				rts
.884a						CBLCloseError:
.884a		48		pha				pha
.884b		20 7a 88	jsr $887a			jsr 	BLClosePhysicalMemory
.884e		ad 6e 07	lda $076e			lda 	BasicFileStream
.8851		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8854		68		pla				pla
.8855						CBLErrorHandler:
.8855		4c 3e 8a	jmp $8a3e			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8858						BLOpenPhysicalMemory:
.8858		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.885a		8d 6a 07	sta $076a			sta 	BLNormalMapping
.885d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.885f		8d 6b 07	sta $076b			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8862		64 3a		stz $3a				stz 	zTemp2
.8864		b5 60		lda $60,x			lda 	NSMantissa1,x
.8866		29 1f		and #$1f			and 	#$1F
.8868		09 60		ora #$60			ora 	#BLAccessPage << 5
.886a		85 3b		sta $3b				sta 	zTemp2+1
.886c		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.886e		16 60		asl $60,x			asl 	NSMantissa1,x
.8870		2a		rol a				rol 	a
.8871		16 60		asl $60,x			asl 	NSMantissa1,x
.8873		2a		rol a				rol 	a
.8874		16 60		asl $60,x			asl 	NSMantissa1,x
.8876		2a		rol a				rol 	a
.8877		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8879		60		rts				rts
.887a						BLClosePhysicalMemory:
.887a		ad 6a 07	lda $076a			lda 	BLNormalMapping
.887d		85 0b		sta $0b				sta 	BLAccessPage+8
.887f		60		rts				rts
.8880						BLAdvancePhysicalMemory:
.8880		48		pha				pha
.8881		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8883		a5 3b		lda $3b				lda 	zTemp2+1
.8885		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8887		d0 06		bne $888f			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8889		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.888b		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.888d		85 3b		sta $3b				sta 	zTemp2+1
.888f						_BLAPMExit:
.888f		68		pla				pla
.8890		60		rts				rts
.076a						BLNormalMapping:
>076a								.fill 	1
.076b						BLYOffset:
>076b								.fill 	1
.076c						BLCopyCounter:
>076c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.8891						Command_BSave:
.8891		a2 00		ldx #$00			ldx 	#0
.8893		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; file name to load
.8896		20 2b 97	jsr $972b			jsr 	CheckComma 					; consume comma
.8899		e8		inx				inx
.889a		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; load address (full physical address)
.889d		20 2b 97	jsr $972b			jsr 	CheckComma 					; consume comma
.88a0		e8		inx				inx
.88a1		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; data length (3 bytes only)
.88a4		5a		phy				phy
.88a5		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88a7		a6 60		ldx $60				ldx 	NSMantissa1
.88a9		20 a6 81	jsr $81a6			jsr 	KNLOpenFileWrite 			; open file for reading
.88ac		b0 62		bcs $8910			bcs 	CBSErrorHandler 			; error, so fail.
.88ae		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.88b1		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.88b3		20 58 88	jsr $8858			jsr 	BLOpenPhysicalMemory 		; open for access.
.88b6		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.88b8		ac 6b 07	ldy $076b			ldy 	BLYOffset 					; used for data offset.
.88bb						_BSWriteToFileLoop:
.88bb		38		sec				sec 								; pre decrement count.
.88bc		a5 5a		lda $5a				lda 	NSMantissa0+2
.88be		e9 01		sbc #$01			sbc 	#1
.88c0		85 5a		sta $5a				sta 	NSMantissa0+2
.88c2		a5 62		lda $62				lda 	NSMantissa1+2
.88c4		e9 00		sbc #$00			sbc 	#0
.88c6		85 62		sta $62				sta 	NSMantissa1+2
.88c8		a5 6a		lda $6a				lda 	NSMantissa2+2
.88ca		e9 00		sbc #$00			sbc 	#0
.88cc		85 6a		sta $6a				sta 	NSMantissa2+2
.88ce		30 15		bmi $88e5			bmi 	_BSFileComplete 			; undercounted, so exit.
.88d0		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.88d2		9d 5f 06	sta $065f,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.88d5		e8		inx				inx
.88d6		c8		iny				iny 								; next byte
.88d7		d0 03		bne $88dc			bne 	_BSNoCheck
.88d9		20 80 88	jsr $8880			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.88dc						_BSNoCheck:
.88dc		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.88de		d0 db		bne $88bb			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.88e0		20 f3 88	jsr $88f3			jsr 	BSFlushBuffer 				; yes, flush the buffer
.88e3		80 d6		bra $88bb			bra 	_BSWriteToFileLoop 			; and keep on going
.88e5						_BSFileComplete:
.88e5		20 f3 88	jsr $88f3			jsr 	BSFlushBuffer 				; write the buffer remainder.
.88e8		20 7a 88	jsr $887a			jsr 	BLClosePhysicalMemory 		; close the access.
.88eb		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close the file
.88ee		20 75 82	jsr $8275			jsr 	KNLCloseFile
.88f1		7a		ply				ply
.88f2		60		rts				rts
.88f3						BSFlushBuffer:
.88f3		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.88f5		f0 0d		beq $8904			beq 	_BSFBExit 					; if so, exit.
.88f7		a9 5f		lda #$5f			lda 	#KNLReadBuffer & $FF 		; where to write from.
.88f9		85 36		sta $36				sta 	zTemp0
.88fb		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.88fd		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.88ff		20 fa 8a	jsr $8afa			jsr 	CLWriteByteBlock 			; write it.
.8902		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8904						_BSFBExit:
.8904		60		rts				rts
.8905						CBSSCloseError:
.8905		48		pha				pha
.8906		20 7a 88	jsr $887a			jsr 	BLClosePhysicalMemory
.8909		ad 6e 07	lda $076e			lda 	BasicFileStream
.890c		20 75 82	jsr $8275			jsr 	KNLCloseFile
.890f		68		pla				pla
.8910						CBSErrorHandler:
.8910		4c 3e 8a	jmp $8a3e			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.8913						Command_Dir:
.8913		ad 5f 07	lda $075f			lda     KNLDefaultDrive				; set drive to list.
.8916		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8918		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.891a		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.891d		b0 4f		bcs $896e			bcs     _CDExit
.891f						_CDEventLoop:
.891f		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8922		20 9f 81	jsr $819f			jsr     GetNextEvent
.8925		b0 f8		bcs $891f			bcs     _CDEventLoop
.8927		ad 60 07	lda $0760			lda     KNLEvent.type
.892a		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.892c		f0 40		beq $896e			beq    	_CDExit
.892e		20 33 89	jsr $8933			jsr     _CDMessages 				; handle various messages
.8931		80 ec		bra $891f			bra     _CDEventLoop
.8933						_CDMessages:
.8933		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8935		f0 15		beq $894c			beq     _CDEVRead
.8937		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8939		f0 19		beq $8954			beq     _CDEVVolume
.893b		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.893d		f0 32		beq $8971			beq     _CDEVFile
.893f		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8941		f0 70		beq $89b3			beq     _CDEVFree
.8943		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8945		f0 6e		beq $89b5			beq     _CDEVEOF
.8947		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8949		f0 6a		beq $89b5			beq     _CDEVEOF
.894b		60		rts				rts
.894c						_CDEVRead:
.894c		ad 63 07	lda $0763			lda     KNLEvent.directory.stream
.894f		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8951		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8954						_CDEVVolume:
.8954		a9 5b		lda #$5b			lda 	#"["
.8956		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8959		ad 65 07	lda $0765			lda     KNLEvent.directory.volume.len
.895c		20 bd 89	jsr $89bd			jsr     _CDReadData
.895f		20 95 97	jsr $9795			jsr 	PrintStringXA
.8962		a9 5d		lda #$5d			lda 	#"]"
.8964		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8967		a9 0d		lda #$0d			lda 	#13
.8969		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.896c		80 de		bra $894c			bra     _CDEVRead
.896e						_CDExit:
.896e		4c b7 85	jmp $85b7			jmp 	WarmStart
.8971						_CDEVFile:
.8971		a9 20		lda #$20			lda 	#32
.8973		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8976		ad 65 07	lda $0765			lda     KNLEvent.directory.file.len
.8979		48		pha				pha
.897a		20 bd 89	jsr $89bd			jsr     _CDReadData
.897d		20 95 97	jsr $9795			jsr 	PrintStringXA
.8980		68		pla				pla
.8981		49 ff		eor #$ff			eor 	#$FF
.8983		38		sec				sec
.8984		69 10		adc #$10			adc 	#16
.8986		aa		tax				tax
.8987						_CDEVTab:
.8987		a9 20		lda #$20			lda 	#32
.8989		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.898c		ca		dex				dex
.898d		10 f8		bpl $8987			bpl 	_CDEVTab
.898f		20 d4 89	jsr $89d4			jsr 	_CDReadExtended
.8992		ad 26 05	lda $0526			lda 	lineBuffer
.8995		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8998		20 ab 9b	jsr $9bab			jsr 	ConvertInt16
.899b		20 95 97	jsr $9795			jsr 	PrintStringXA
.899e		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.89a0		a9 a7		lda #$a7			lda 	#_CDEVFMessage & $FF
.89a2		20 95 97	jsr $9795			jsr 	PrintStringXA
.89a5		80 a5		bra $894c			bra     _CDEVRead
.89a7						_CDEVFMessage:
>89a7		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>89af		29 2e 0d 00
.89b3						_CDEVFree:
.89b3		80 00		bra $89b5			bra     _CDEVEOF
.89b5						_CDEVEOF:
.89b5		ad 63 07	lda $0763			lda     KNLEvent.directory.stream
.89b8		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.89ba		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.89bd						_CDReadData:
.89bd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.89bf		a9 26		lda #$26			lda     #lineBuffer & $FF
.89c1		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.89c3		a9 05		lda #$05			lda     #lineBuffer >> 8
.89c5		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.89c7		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.89ca		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.89cc		9e 26 05	stz $0526,x			stz     lineBuffer,x
.89cf		a9 26		lda #$26			lda 	#lineBuffer & $FF
.89d1		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.89d3		60		rts				rts
.89d4						_CDReadExtended:
.89d4		a9 02		lda #$02			lda     #2
.89d6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.89d8		a9 26		lda #$26			lda     #lineBuffer & $FF
.89da		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.89dc		a9 05		lda #$05			lda     #lineBuffer >> 8
.89de		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.89e0		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.89e3						Command_Drive:
.89e3		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.89e6		20 a2 81	jsr $81a2			jsr 	KNLSetDrive
.89e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.89ea						Command_Load:
.89ea		20 f0 89	jsr $89f0			jsr 	LoadFile
.89ed		4c b7 85	jmp $85b7			jmp 	WarmStart
.89f0						LoadFile:
.89f0		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; file name to load
.89f3		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.89f5		a5 36		lda $36				lda 	zTemp0
.89f7		20 ab 81	jsr $81ab			jsr 	KNLOpenFileRead 			; open file for reading
.89fa		b0 42		bcs $8a3e			bcs 	CLErrorHandler 				; error, so fail.
.89fc		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.89ff		20 8e 8a	jsr $8a8e			jsr     LoadReadByteInit            ; Init reader with the stream
.8a02		20 6b 91	jsr $916b			jsr 	NewProgram 					; does the actual NEW.
.8a05		9c 6d 07	stz $076d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a08						_CLLoop:
.8a08		20 4c 8a	jsr $8a4c			jsr 	LoadReadLine 				; get next line.
.8a0b		f0 10		beq $8a1d			beq 	_CLExit 					; end, exit.
.8a0d		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8a10		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8a13		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8a16		f0 f0		beq $8a08			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a18		20 92 85	jsr $8592			jsr 	EditProgramCode 			; do the editing etc.
.8a1b		80 eb		bra $8a08			bra 	_CLLoop
.8a1d						_CLExit:
.8a1d		ad 6e 07	lda $076e			lda 	BasicFileStream
.8a20		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8a23						CLComplete:
.8a23		a9 2b		lda #$2b			lda 	#_CLCMsg & $FF
.8a25		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a27		20 95 97	jsr $9795			jsr 	PrintStringXA
.8a2a		60		rts				rts
.8a2b						_CLCMsg:
>8a2b		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a33		2e 0d 00
.8a36						CLCloseError:
.8a36		48		pha				pha
.8a37		ad 6e 07	lda $076e			lda 	BasicFileStream
.8a3a		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8a3d		68		pla				pla
.8a3e						CLErrorHandler:
.8a3e		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a40		f0 05		beq $8a47			beq 	_CLEHNotFound
.8a42		a9 1a		lda #$1a		lda	#26
.8a44		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8a47						_CLEHNotFound:
.8a47		a9 19		lda #$19		lda	#25
.8a49		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8a4c						LoadReadLine:
.8a4c		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a4e		20 68 8a	jsr $8a68			jsr 	LoadReadCharacter
.8a51		f0 14		beq $8a67			beq 	_LRLExit 					; eof ?
.8a53		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a55		90 f5		bcc $8a4c			bcc 	LoadReadLine
.8a57						_LRLLoop:
.8a57		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8a5a		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a5d		e8		inx				inx
.8a5e		20 68 8a	jsr $8a68			jsr 	LoadReadCharacter 			; next line
.8a61		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a63		b0 f2		bcs $8a57			bcs 	_LRLLoop
.8a65		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a67						_LRLExit:
.8a67		60		rts				rts
.8a68						LoadReadCharacter:
.8a68		da		phx				phx
.8a69		5a		phy				phy
.8a6a		ad 6d 07	lda $076d			lda 	LoadEOFFlag 				; already done EOF.
.8a6d		d0 0c		bne $8a7b			bne 	_LRCIsEOF
.8a6f		20 98 8a	jsr $8a98			jsr 	LoadReadByte 				; read a byte
.8a72		90 09		bcc $8a7d			bcc		_LRCExit 					; read okay.
.8a74		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8a76		d0 be		bne $8a36			bne 	CLCloseError
.8a78		ce 6d 07	dec $076d			dec 	LoadEOFFlag
.8a7b						_LRCIsEOF:
.8a7b		a9 00		lda #$00			lda 	#0
.8a7d						_LRCExit:
.8a7d		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8a7f		d0 02		bne $8a83			bne 	_LRCNotTab
.8a81		a9 20		lda #$20			lda 	#' '
.8a83						_LRCNotTab:
.8a83		c9 0a		cmp #$0a			cmp 	#$0A
.8a85		d0 02		bne $8a89			bne 	_LRCNotLF
.8a87		a9 0d		lda #$0d			lda 	#$0D
.8a89						_LRCNotLF:
.8a89		7a		ply				ply
.8a8a		fa		plx				plx
.8a8b		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8a8d		60		rts				rts
.8a8e						LoadReadByteInit:
.8a8e		8d 6f 07	sta $076f			sta     LoadFileStream 				; save stream
.8a91		9c 70 07	stz $0770			stz     LoadNextCharacter 			; reset buffer
.8a94		9c 71 07	stz $0771			stz     LoadEndCharacter
.8a97		60		rts				rts
.8a98						LoadReadByte:
.8a98		da		phx				phx
.8a99		ae 70 07	ldx $0770			ldx     LoadNextCharacter 					; all data consumed ?
.8a9c		ec 71 07	cpx $0771			cpx     LoadEndCharacter
.8a9f		d0 12		bne $8ab3			bne     _KNLRBGetNextByte
.8aa1		ad 6f 07	lda $076f			lda     LoadFileStream
.8aa4		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8aa6		20 00 82	jsr $8200			jsr     KNLReadBlock 				; read next chunk from the stream
.8aa9		b0 0f		bcs $8aba			bcs     _KNLRBError 				; error has occurred on read.
.8aab		8d 71 07	sta $0771			sta     LoadEndCharacter 						; # read is the number available
.8aae		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8ab0		8e 70 07	stx $0770			stx     LoadNextCharacter
.8ab3						_KNLRBGetNextByte:
.8ab3		bd 5f 06	lda $065f,x			lda     KNLReadBuffer,x 			; get the next data item
.8ab6		ee 70 07	inc $0770			inc     LoadNextCharacter 					; and advance the index
.8ab9		18		clc				clc 								; succeeded
.8aba						_KNLRBError:
.8aba		fa		plx				plx
.8abb		60		rts				rts
.076d						LoadEOFFlag:
>076d								.fill 	1
.076e						BasicFileStream:
>076e								.fill 	1
.076f						LoadFileStream:
>076f								.byte   ?
.0770						LoadNextCharacter:
>0770								.byte   ?
.0771						LoadEndCharacter:
>0771								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8abc						Command_Save:
.8abc		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; file name to load
.8abf		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8ac1		a5 36		lda $36				lda 	zTemp0
.8ac3		20 a6 81	jsr $81a6			jsr 	KNLOpenFileWrite 			; open file for writing
.8ac6		b0 2f		bcs $8af7			bcs 	CSErrorHandler 				; error, so fail.
.8ac8		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8acb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8acd		85 30		sta $30				sta 	codePtr
.8acf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ad1		85 31		sta $31				sta 	codePtr+1
.8ad3						_CSLoop:
.8ad3		b2 30		lda ($30)			lda 	(codePtr)
.8ad5		f0 17		beq $8aee			beq 	_CSExit
.8ad7		20 1b 8b	jsr $8b1b			jsr 	CSGetCleanLine
.8ada		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8adc		85 36		sta $36				sta 	zTemp0
.8ade		20 fa 8a	jsr $8afa			jsr 	CLWriteByteBlock 			; write the block out.
.8ae1		18		clc				clc
.8ae2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ae4		65 30		adc $30				adc 	codePtr
.8ae6		85 30		sta $30				sta 	codePtr
.8ae8		90 02		bcc $8aec			bcc 	_CREExit
.8aea		e6 31		inc $31				inc 	codePtr+1 					; carry
.8aec						_CREExit:
.8aec		80 e5		bra $8ad3			bra 	_CSLoop
.8aee						_CSExit:
.8aee		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close file
.8af1		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8af4		4c 23 8a	jmp $8a23			jmp 	CLComplete 					; display complete message.
.8af7						CSErrorHandler:
.8af7		4c 3e 8a	jmp $8a3e			jmp 	CLErrorHandler
.8afa						CLWriteByteBlock:
.8afa		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8afc		f0 1c		beq $8b1a			beq 	_CLWBBExit					; if so, exit
.8afe		ad 6e 07	lda $076e			lda 	BasicFileStream 			; stream to write, count in X
.8b01		20 3b 82	jsr $823b			jsr 	KNLWriteBlock 				; call one write attempt
.8b04		b0 f1		bcs $8af7			bcs 	CSErrorHandler 				; error occurred
.8b06		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b08		8a		txa				txa 								; subtract bytes written from X, total count.
.8b09		38		sec				sec
.8b0a		e5 38		sbc $38				sbc 	zTemp1
.8b0c		aa		tax				tax
.8b0d		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8b0e		a5 36		lda $36				lda 	zTemp0
.8b10		65 38		adc $38				adc 	zTemp1
.8b12		85 36		sta $36				sta 	zTemp0
.8b14		90 e4		bcc $8afa			bcc 	CLWriteByteBlock
.8b16		e6 37		inc $37				inc 	zTemp0+1
.8b18		80 e0		bra $8afa			bra 	CLWriteByteBlock 			; and retry write out.
.8b1a						_CLWBBExit:
.8b1a		60		rts				rts
.8b1b						CSGetCleanLine:
.8b1b		a9 00		lda #$00			lda 	#0 							; no indent.
.8b1d		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b20		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8b22		a0 00		ldy #$00			ldy 	#0
.8b24						_CSClean:
.8b24		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8b27		f0 09		beq $8b32			beq 	_CSDoneClean
.8b29		30 04		bmi $8b2f			bmi 	_CSIgnoreCharacter
.8b2b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b2e		e8		inx				inx
.8b2f						_CSIgnoreCharacter:
.8b2f		c8		iny				iny
.8b30		80 f2		bra $8b24			bra 	_CSClean
.8b32						_CSDoneClean:
.8b32		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8b34		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b37		e8		inx				inx
.8b38		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8b3b		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8b3d		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8b3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc54						m
.8b40						Command_VERIFY:
.8b40		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; file name to verify
.8b43		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b45		a5 36		lda $36				lda 	zTemp0
.8b47		20 ab 81	jsr $81ab			jsr 	KNLOpenFileRead 			; open file for reading
.8b4a		b0 4b		bcs $8b97			bcs 	_CVErrorHandler 			; error, so fail.
.8b4c		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8b4f		20 8e 8a	jsr $8a8e			jsr     LoadReadByteInit            ; Init reader with the stream
.8b52		9c 6d 07	stz $076d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8b55		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b57		85 30		sta $30				sta 	codePtr
.8b59		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b5b		85 31		sta $31				sta 	codePtr+1
.8b5d						_CVLoop:
.8b5d		20 4c 8a	jsr $8a4c			jsr 	LoadReadLine 				; get next line.
.8b60		f0 27		beq $8b89			beq 	_CVExit 					; end, exit.
.8b62		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8b65		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8b68		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8b6b		f0 f0		beq $8b5d			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8b6d		a0 00		ldy #$00			ldy 	#0 							; start compare
.8b6f						_CVCompareLoop:
.8b6f		b1 30		lda ($30),y			lda 	(codePtr),y
.8b71		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8b74		d0 1c		bne $8b92			bne 	_CVCompareError
.8b76		c8		iny				iny
.8b77		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8b7a		d0 f3		bne $8b6f			bne 	_CVCompareLoop
.8b7c		18		clc				clc
.8b7d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b7f		65 30		adc $30				adc 	codePtr
.8b81		85 30		sta $30				sta 	codePtr
.8b83		90 02		bcc $8b87			bcc 	_CREExit
.8b85		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b87						_CREExit:
.8b87		80 d4		bra $8b5d			bra 	_CVLoop
.8b89						_CVExit:
.8b89		ad 6e 07	lda $076e			lda 	BasicFileStream
.8b8c		20 75 82	jsr $8275			jsr 	KNLCloseFile
.8b8f		4c 23 8a	jmp $8a23			jmp 	CLComplete
.8b92						_CVCompareError:
.8b92		a9 1b		lda #$1b		lda	#27
.8b94		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8b97						_CVErrorHandler:
.8b97		4c 3e 8a	jmp $8a3e			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8b9a						ForCommand:
.8b9a		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8b9c		20 c9 b7	jsr $b7c9			jsr 	StackOpen
.8b9f		a2 00		ldx #$00			ldx 	#0
.8ba1		20 8a a0	jsr $a08a			jsr 	EvaluateTerm
.8ba4		b5 50		lda $50,x			lda 	NSStatus,x
.8ba6		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8ba8		d0 47		bne $8bf1			bne		_FCError
.8baa		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bac		20 33 97	jsr $9733			jsr 	CheckNextA
.8baf		e8		inx				inx
.8bb0		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; <from> in +1
.8bb3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bb5		c8		iny				iny 								; consume it
.8bb6		48		pha				pha 								; save on stack for later
.8bb7		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8bb9		f0 04		beq $8bbf			beq 	_FCNoSyntax
.8bbb		c9 da		cmp #$da			cmp 	#KWD_TO
.8bbd		d0 35		bne $8bf4			bne 	_FCSyntaxError
.8bbf						_FCNoSyntax:
.8bbf		e8		inx				inx
.8bc0		20 03 a6	jsr $a603			jsr 	EvaluateInteger
.8bc3		20 0e b8	jsr $b80e			jsr 	STKSaveCodePosition 		; save loop back position
.8bc6		68		pla				pla 								; restore DOWNTO or TO
.8bc7		5a		phy				phy 								; save Y on the stack
.8bc8		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8bca		f0 02		beq $8bce			beq 	_FCNotDownTo
.8bcc		a9 02		lda #$02			lda 	#2
.8bce						_FCNotDownTo:
.8bce		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8bcf		a0 10		ldy #$10			ldy 	#16
.8bd1		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8bd3		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8bd5		a5 58		lda $58				lda 	NSMantissa0
.8bd7		91 34		sta ($34),y			sta 	(basicStack),y
.8bd9		a5 60		lda $60				lda 	NSMantissa1
.8bdb		c8		iny				iny
.8bdc		91 34		sta ($34),y			sta 	(basicStack),y
.8bde		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8be0		a2 01		ldx #$01			ldx 	#1
.8be2		20 f7 8b	jsr $8bf7			jsr 	FCIntegerToStack
.8be5		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8be7		a2 02		ldx #$02			ldx 	#2
.8be9		20 f7 8b	jsr $8bf7			jsr 	FCIntegerToStack
.8bec		20 12 8c	jsr $8c12			jsr 	CopyIndexToReference
.8bef		7a		ply				ply 								; restore position
.8bf0		60		rts				rts
.8bf1						_FCError:
.8bf1		4c 59 b1	jmp $b159			jmp 	TypeError
.8bf4						_FCSyntaxError:
.8bf4		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.8bf7						FCIntegerToStack:
.8bf7		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8bf9		10 03		bpl $8bfe			bpl	 	_FCNotNegative
.8bfb		20 5f a6	jsr $a65f			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8bfe						_FCNotNegative:
.8bfe		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c00		91 34		sta ($34),y			sta 	(basicStack),y
.8c02		c8		iny				iny
.8c03		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c05		91 34		sta ($34),y			sta 	(basicStack),y
.8c07		c8		iny				iny
.8c08		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c0a		91 34		sta ($34),y			sta 	(basicStack),y
.8c0c		c8		iny				iny
.8c0d		b5 70		lda $70,x			lda 	NSMantissa3,x
.8c0f		91 34		sta ($34),y			sta 	(basicStack),y
.8c11		60		rts				rts
.8c12						CopyIndexToReference:
.8c12		5a		phy				phy
.8c13		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c15		38		sec				sec 								; (because we copy from offset 8)
.8c16		b1 34		lda ($34),y			lda 	(basicStack),y
.8c18		e9 08		sbc #$08			sbc 	#8
.8c1a		85 36		sta $36				sta 	zTemp0
.8c1c		c8		iny				iny
.8c1d		b1 34		lda ($34),y			lda 	(basicStack),y
.8c1f		e9 00		sbc #$00			sbc 	#0
.8c21		85 37		sta $37				sta 	zTemp0+1
.8c23		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c25		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c27		b1 34		lda ($34),y			lda 	(basicStack),y
.8c29		0a		asl a				asl 	a 							; into carry
.8c2a		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c2c		90 14		bcc $8c42			bcc 	_CITRNormal
.8c2e		38		sec				sec
.8c2f						_CITRNegative:
.8c2f		a9 00		lda #$00			lda 	#0
.8c31		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c33		91 36		sta ($36),y			sta 	(zTemp0),y
.8c35		c8		iny				iny
.8c36		ca		dex				dex
.8c37		d0 f6		bne $8c2f			bne 	_CITRNegative
.8c39		88		dey				dey 								; look at MSB of mantissa
.8c3a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c3c		09 80		ora #$80			ora 	#$80
.8c3e		91 36		sta ($36),y			sta 	(zTemp0),y
.8c40		7a		ply				ply
.8c41		60		rts				rts
.8c42						_CITRNormal:
.8c42		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c44		91 36		sta ($36),y			sta 	(zTemp0),y
.8c46		c8		iny				iny
.8c47		ca		dex				dex
.8c48		d0 f8		bne $8c42			bne 	_CITRNormal
.8c4a		7a		ply				ply 								; and exit.
.8c4b		60		rts				rts
.8c4c						NextCommand:
.8c4c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c4e		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c50		20 f6 b7	jsr $b7f6			jsr 	StackCheckFrame
.8c53		5a		phy				phy
.8c54		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c56		b1 34		lda ($34),y			lda 	(basicStack),y
.8c58		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c5a		30 02		bmi $8c5e			bmi 	_NCStepNeg
.8c5c		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c5e						_NCStepNeg:
.8c5e		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c60		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c62		18		clc				clc
.8c63						_NCBump:
.8c63		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c65		91 34		sta ($34),y			sta 	(basicStack),y
.8c67		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c69		c8		iny				iny 								; next byte
.8c6a		ca		dex				dex 								; do four times
.8c6b		d0 f6		bne $8c63			bne 	_NCBump
.8c6d		20 12 8c	jsr $8c12			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c70		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c72		b1 34		lda ($34),y			lda 	(basicStack),y
.8c74		0a		asl a				asl 	a 							; sign bit to carry
.8c75		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c77		85 38		sta $38				sta 	zTemp1
.8c79		90 02		bcc $8c7d			bcc 	_NCCompRev 					; use if step is +ve
.8c7b		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c7d						_NCCompRev:
.8c7d		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c7f		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c81		85 39		sta $39				sta 	zTemp1+1
.8c83		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8c85		38		sec				sec
.8c86						_NCCompare:
.8c86		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8c88		b1 34		lda ($34),y			lda 	(basicStack),y
.8c8a		a4 39		ldy $39				ldy 	zTemp1+1
.8c8c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c8e		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8c90		e6 39		inc $39				inc 	zTemp1+1
.8c92		ca		dex				dex 								; do it 4 times.
.8c93		d0 f1		bne $8c86			bne 	_NCCompare
.8c95		50 02		bvc $8c99			bvc 	_NCNoOverflow 				; convert to signed comparison
.8c97		49 80		eor #$80			eor 	#$80
.8c99						_NCNoOverflow:
.8c99		7a		ply				ply 								; restore Y position
.8c9a		0a		asl a				asl 	a 							; is bit 7 set.
.8c9b		90 04		bcc $8ca1			bcc 	_NCLoopBack 				; if no , >= so loop back
.8c9d		20 e8 b7	jsr $b7e8			jsr 	StackClose 					; exit the loop
.8ca0		60		rts				rts
.8ca1						_NCLoopBack:
.8ca1		20 1f b8	jsr $b81f			jsr 	STKLoadCodePosition 		; loop back
.8ca4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8ca5						Command_GOSUB:
.8ca5		a2 00		ldx #$00			ldx 	#0
.8ca7		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8caa		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cac		20 c9 b7	jsr $b7c9			jsr 	StackOpen 					; create frame
.8caf		20 0e b8	jsr $b80e			jsr 	STKSaveCodePosition 		; save current position
.8cb2		4c c8 8c	jmp $8cc8			jmp 	GotoStackX
.8cb5						Command_RETURN:
.8cb5		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cb7		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cb9		20 f6 b7	jsr $b7f6			jsr 	StackCheckFrame
.8cbc		20 1f b8	jsr $b81f			jsr 	STKLoadCodePosition 		; restore code position
.8cbf		20 e8 b7	jsr $b7e8			jsr 	StackClose
.8cc2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8cc3						GotoCommand:
.8cc3		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8cc5		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.8cc8						GotoStackX:
.8cc8		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8cca		48		pha				pha 								; it is slightly inefficient, just in cases.
.8ccb		b5 58		lda $58,x			lda 	NSMantissa0,x
.8ccd		fa		plx				plx
.8cce		20 e7 b3	jsr $b3e7			jsr 	MemorySearch 				; transfer to line number AX.
.8cd1		90 05		bcc $8cd8			bcc 	_GotoError 					; not found, off end.
.8cd3		d0 03		bne $8cd8			bne 	_GotoError 					; not found exactly
.8cd5		4c 01 93	jmp $9301			jmp 	RunNewLine 					; and go straight to new line code.
.8cd8						_GotoError:
.8cd8		a9 0d		lda #$0d		lda	#13
.8cda		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8cdd						IfCommand:
.8cdd		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8cdf		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber
.8ce2		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce4		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ce6		d0 0a		bne $8cf2			bne 	_IfStructured 				; we still support it.
.8ce8		c8		iny				iny 								; consume THEN
.8ce9		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; is it zero
.8cec		f0 01		beq $8cef			beq 	_IfFail 					; if fail, go to next line
.8cee		60		rts				rts 								; if THEN just continue
.8cef						_IfFail:
.8cef		4c dc 92	jmp $92dc			jmp 	EOLCommand
.8cf2						_IfStructured:
.8cf2		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; is it zero
.8cf5		d0 07		bne $8cfe			bne 	_IfExit 					; if not, then continue normally.
.8cf7		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8cf9		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8cfb		20 7e 96	jsr $967e			jsr 	ScanForward 				; and run from there
.8cfe						_IfExit:
.8cfe		60		rts				rts
.8cff						ElseCode:
.8cff		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d01		aa		tax				tax 								; so just go to the structure exit
.8d02		20 7e 96	jsr $967e			jsr 	ScanForward
.8d05		60		rts				rts
.8d06						EndIf:
.8d06		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d07						Command_Input:
.8d07		9c 24 04	stz $0424			stz 	isPrintFlag
.8d0a		80 0c		bra $8d18			bra 	Command_IP_Main
.8d0c						Command_CPrint:
.8d0c		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8d0e		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d11		80 05		bra $8d18			bra 	Command_IP_Main
.8d13						Command_Print:
.8d13		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8d15		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d18						Command_IP_Main:
.8d18		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d19						_CPLoop:
.8d19		08		php				php 								; save last action flag
.8d1a		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1c		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d1e		f0 54		beq $8d74			beq 	_CPExit
.8d20		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d22		f0 50		beq $8d74			beq 	_CPExit
.8d24		68		pla				pla 								; throw last action flag
.8d25		b1 30		lda ($30),y			lda 	(codePtr),y
.8d27		c8		iny				iny
.8d28		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8d2a		f0 45		beq $8d71			beq 	_CPContinueWithSameLine
.8d2c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8d2e		f0 3c		beq $8d6c			beq 	_CPTab
.8d30		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8d32		f0 34		beq $8d68			beq 	_CPNewLine
.8d34		88		dey				dey 								; undo the get.
.8d35		20 3e 9c	jsr $9c3e			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8d38		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8d3a		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8d3c		f0 0d		beq $8d4b			beq 	_CPIsValue 					; no, display it.
.8d3e		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8d41		d0 05		bne $8d48			bne 	_CPIsPrint 					; otherwise display.
.8d43		20 7d 8d	jsr $8d7d			jsr 	CIInputValue 				; input a value to the reference
.8d46		80 20		bra $8d68			bra 	_CPNewLine
.8d48						_CPIsPrint:
.8d48		20 03 9f	jsr $9f03			jsr 	Dereference 				; dereference if required.
.8d4b						_CPIsValue:
.8d4b		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8d4d		29 10		and #$10			and 	#NSBIsString
.8d4f		f0 09		beq $8d5a			beq 	_CPNumber
.8d51		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8d53		a5 58		lda $58				lda 	NSMantissa0
.8d55		20 e0 8d	jsr $8de0			jsr 	CPPrintStringXA
.8d58		80 be		bra $8d18			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8d5a						_CPNumber:
.8d5a		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8d5c		20 cb a4	jsr $a4cb			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8d5f		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8d61		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8d63		20 e0 8d	jsr $8de0			jsr 	CPPrintStringXA 			; print it.
.8d66		80 b0		bra $8d18			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8d68						_CPNewLine:
.8d68		a9 0d		lda #$0d			lda 	#13
.8d6a		80 02		bra $8d6e			bra 	_CPPrintCharDirect
.8d6c						_CPTab:
.8d6c		a9 09		lda #$09			lda 	#9 							; print TAB
.8d6e						_CPPrintCharDirect:
.8d6e		20 fb 8d	jsr $8dfb			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8d71						_CPContinueWithSameLine:
.8d71		38		sec				sec 								; loop round with carry set, which
.8d72		80 a5		bra $8d19			bra 	_CPLoop 					; will inhibit final CR
.8d74						_CPExit:
.8d74		28		plp				plp 								; get last action flag
.8d75		b0 05		bcs $8d7c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d77		a9 0d		lda #$0d			lda 	#13 						; print new line
.8d79		20 fb 8d	jsr $8dfb			jsr 	CPPVControl
.8d7c						_CPExit2:
.8d7c		60		rts				rts
.8d7d						CIInputValue:
.8d7d		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8d7f						_CIInputLine:
.8d7f		20 fe 8d	jsr $8dfe			jsr 	CPInputVector 				; get key
.8d82		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8d84		f0 1f		beq $8da5			beq 	_CIHaveValue
.8d86		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8d88		f0 11		beq $8d9b			beq 	_CIBackspace
.8d8a		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8d8c		90 f1		bcc $8d7f			bcc 	_CIInputLine
.8d8e		e0 50		cpx #$50			cpx 	#80 						; max length
.8d90		b0 ed		bcs $8d7f			bcs 	_CIInputLine
.8d92		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8d95		e8		inx				inx
.8d96		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8d99		80 e4		bra $8d7f			bra 	_CIInputLine
.8d9b						_CIBackspace:
.8d9b		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8d9d		f0 e0		beq $8d7f			beq 	_CIInputLine
.8d9f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8da2		ca		dex				dex
.8da3		80 da		bra $8d7f			bra 	_CIInputLine
.8da5						_CIHaveValue:
.8da5		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8da8		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8daa		29 10		and #$10			and 	#NSBIsString
.8dac		f0 17		beq $8dc5			beq 	_CIAssignNumber 			; assign a number
.8dae		a2 01		ldx #$01			ldx 	#1
.8db0		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8db2		95 58		sta $58,x			sta 	NSMantissa0,x
.8db4		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8db6		95 60		sta $60,x			sta 	NSMantissa1,x
.8db8		74 68		stz $68,x			stz 	NSMantissa2,x
.8dba		74 70		stz $70,x			stz 	NSMantissa3,x
.8dbc		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8dbe		95 50		sta $50,x			sta  	NSStatus,x
.8dc0		ca		dex				dex 								; X = 0
.8dc1		20 73 8e	jsr $8e73			jsr 	AssignVariable
.8dc4		60		rts				rts
.8dc5						_CIAssignNumber:
.8dc5		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8dc7		85 36		sta $36				sta 	zTemp0
.8dc9		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8dcb		85 37		sta $37				sta 	zTemp0+1
.8dcd		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8dcf		20 ab a3	jsr $a3ab			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8dd2		90 07		bcc $8ddb			bcc 	_CIIsOkay
.8dd4		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8dd6		20 f3 8d	jsr $8df3			jsr 	CPPrintVector
.8dd9		80 a2		bra $8d7d			bra 	CIInputValue
.8ddb						_CIIsOkay:
.8ddb		ca		dex				dex 								; X = 0
.8ddc		20 73 8e	jsr $8e73			jsr 	AssignVariable
.8ddf		60		rts				rts
.8de0						CPPrintStringXA:
.8de0		5a		phy				phy
.8de1		86 37		stx $37				stx 	zTemp0+1
.8de3		85 36		sta $36				sta 	zTemp0
.8de5		a0 00		ldy #$00			ldy 	#0
.8de7						_PSXALoop:
.8de7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8de9		f0 06		beq $8df1			beq 	_PSXAExit
.8deb		20 f3 8d	jsr $8df3			jsr 	CPPrintVector
.8dee		c8		iny				iny
.8def		80 f6		bra $8de7			bra 	_PSXALoop
.8df1						_PSXAExit:
.8df1		7a		ply				ply
.8df2		60		rts				rts
.8df3						CPPrintVector:
.8df3		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8df6		30 03		bmi $8dfb			bmi 	CPPVControl
.8df8		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8dfb						CPPVControl:
.8dfb		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8dfe						CPInputVector:
.8dfe		4c 91 81	jmp $8191			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e01						UnaryJoyX:
.8e01		18		clc				clc
.8e02		80 01		bra $8e05			bra 	JoyMain
.8e04						UnaryJoyY:
.8e04		38		sec				sec
.8e05						JoyMain:
.8e05		fa		plx				plx 								; get pos
.8e06		08		php				php 								; save carry (set for Y)
.8e07		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e0a		20 23 97	jsr $9723			jsr 	CheckRightBracket
.8e0d		20 7b 82	jsr $827b			jsr 	KNLReadController 			; read the controller.
.8e10		28		plp				plp
.8e11		b0 02		bcs $8e15			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8e13		4a		lsr a				lsr 	a
.8e14		4a		lsr a				lsr 	a
.8e15						_JMNoShift:
.8e15		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8e16		b0 07		bcs $8e1f			bcs 	JMIsLeft
.8e18		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8e19		b0 07		bcs $8e22			bcs 	JMIsRight
.8e1b		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; zero result
.8e1e		60		rts				rts
.8e1f						JMIsLeft:
.8e1f		4c a9 97	jmp $97a9			jmp 	ReturnTrue
.8e22						JMIsRight:
.8e22		a9 01		lda #$01			lda 	#1
.8e24		20 98 a6	jsr $a698			jsr 	NSMSetByte
.8e27		60		rts				rts
.8e28						UnaryJoyB:
.8e28		fa		plx				plx 								; get pos
.8e29		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e2c		20 23 97	jsr $9723			jsr 	CheckRightBracket
.8e2f		20 7b 82	jsr $827b			jsr 	KNLReadController 			; read the controller.
.8e32		29 10		and #$10			and 	#$10
.8e34		d0 e9		bne $8e1f			bne 	JMIsLeft
.8e36		20 96 a6	jsr $a696			jsr 	NSMSetZero
.8e39		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8e3a						LetCommand:
.8e3a		a2 00		ldx #$00			ldx 	#0
.8e3c		b1 30		lda ($30),y			lda 	(codePtr),y
.8e3e		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8e40		d0 14		bne $8e56			bne 	_LCStandard
.8e42		c8		iny				iny 								; skip equal
.8e43		20 8a a0	jsr $a08a			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8e46		20 03 9f	jsr $9f03			jsr 	Dereference 				; dereference it to a value
.8e49		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8e4b		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8e4d		95 50		sta $50,x			sta 	NSStatus,x
.8e4f		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8e51		d0 0f		bne $8e62			bne 	_LCMain
.8e53		4c 59 b1	jmp $b159			jmp 	TypeError 					; was a reference before.
.8e56						_LCStandard:
.8e56		ad 28 9c	lda $9c28			lda 	PrecedenceLevel+"*"			; precedence > this
.8e59		20 42 9c	jsr $9c42			jsr 	EvaluateExpressionAtPrecedence
.8e5c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8e5e		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8e60		f0 0e		beq $8e70			beq 	_LetGoProc 					; it's a procedure call.
.8e62						_LCMain:
.8e62		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8e64		20 33 97	jsr $9733			jsr 	CheckNextA
.8e67		e8		inx				inx 								; RHS
.8e68		20 db a5	jsr $a5db			jsr 	EvaluateValue
.8e6b		ca		dex				dex
.8e6c		20 73 8e	jsr $8e73			jsr 	AssignVariable
.8e6f		60		rts				rts
.8e70						_LetGoProc:
.8e70		4c b2 91	jmp $91b2			jmp 	CallProcedure
.8e73						AssignVariable:
.8e73		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8e75		48		pha				pha 								; save a copy
.8e76		55 51		eor $51,x			eor 	NSStatus+1,x
.8e78		29 10		and #$10			and 	#NSBIsString
.8e7a		d0 0b		bne $8e87			bne 	_ASError
.8e7c		68		pla				pla 								; get back
.8e7d		29 10		and #$10			and 	#NSBIsString 				; check type
.8e7f		d0 03		bne $8e84			bne 	_ASString
.8e81		4c 41 9e	jmp $9e41			jmp 	AssignNumber
.8e84						_ASString:
.8e84		4c 9f 9e	jmp $9e9f			jmp 	AssignString
.8e87						_ASError:
.8e87		4c 59 b1	jmp $b159			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8e8a						Command_List:
.8e8a		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8e8d		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8e8f		20 75 80	jsr $8075			jsr 	SNDCommand
.8e92		b1 30		lda ($30),y			lda 	(codePtr),y
.8e94		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8e96		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8e98		f0 72		beq $8f0c			beq 	_CLListProcedure
.8e9a		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8e9c		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8e9e		a9 ff		lda #$ff			lda 	#$FF
.8ea0		85 5f		sta $5f				sta 	NSMantissa0+7
.8ea2		85 67		sta $67				sta 	NSMantissa1+7
.8ea4		b1 30		lda ($30),y			lda 	(codePtr),y
.8ea6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ea8		f0 1a		beq $8ec4			beq 	_CLSecond
.8eaa		20 89 8f	jsr $8f89			jsr 	CLIsDigit 					; if not digit, list all
.8ead		b0 20		bcs $8ecf			bcs 	_CLStart
.8eaf		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8eb1		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.8eb4		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8eb8		f0 0a		beq $8ec4			beq 	_CLSecond 					; if so go get it
.8eba		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8ebc		85 5f		sta $5f				sta 	NSMantissa0+7
.8ebe		a5 64		lda $64				lda 	NSMantissa1+4
.8ec0		85 67		sta $67				sta 	NSMantissa1+7
.8ec2		80 0b		bra $8ecf			bra 	_CLStart
.8ec4						_CLSecond:
.8ec4		c8		iny				iny 								; consume comma
.8ec5		20 89 8f	jsr $8f89			jsr 	CLIsDigit 					; digit found
.8ec8		b0 05		bcs $8ecf			bcs 	_CLStart 					; if not, continue listing
.8eca		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ecc		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.8ecf						_CLStart
.8ecf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ed1		85 30		sta $30				sta 	codePtr
.8ed3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ed5		85 31		sta $31				sta 	codePtr+1
.8ed7						_CLLoop:
.8ed7		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8ed9		f0 03		beq $8ede			beq 	_NoEvents					; if zero, skip with Z flag set.
.8edb		20 37 81	jsr $8137			jsr 	ProcessEvents
.8ede						_NoEvents:
.8ede		d0 27		bne $8f07			bne 	_CLBreak
.8ee0		b2 30		lda ($30)			lda 	(codePtr)
.8ee2		f0 20		beq $8f04			beq 	_CLExit
.8ee4		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ee6		20 78 8f	jsr $8f78			jsr 	CLCompareLineNo
.8ee9		90 0c		bcc $8ef7			bcc 	_CLNext
.8eeb		a2 07		ldx #$07			ldx 	#7
.8eed		20 78 8f	jsr $8f78			jsr 	CLCompareLineNo
.8ef0		f0 02		beq $8ef4			beq 	_CLDoThisOne
.8ef2		b0 03		bcs $8ef7			bcs 	_CLNext
.8ef4						_CLDoThisOne:
.8ef4		20 65 8f	jsr $8f65			jsr 	CLListOneLine 				; routine to list the current line.
.8ef7						_CLNext:
.8ef7		18		clc				clc
.8ef8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8efa		65 30		adc $30				adc 	codePtr
.8efc		85 30		sta $30				sta 	codePtr
.8efe		90 02		bcc $8f02			bcc 	_CREExit
.8f00		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f02						_CREExit:
.8f02		80 d3		bra $8ed7			bra 	_CLLoop
.8f04						_CLExit:
.8f04		4c b7 85	jmp $85b7			jmp 	WarmStart
.8f07						_CLBreak:
.8f07		a9 01		lda #$01		lda	#1
.8f09		4c 3c 97	jmp $973c		jmp	ErrorHandler
.8f0c						_CLListProcedure:
.8f0c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f0e		85 38		sta $38				sta 	zTemp1
.8f10		c8		iny				iny
.8f11		b1 30		lda ($30),y			lda 	(codePtr),y
.8f13		85 39		sta $39				sta 	zTemp1+1
.8f15		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f17		85 30		sta $30				sta 	codePtr
.8f19		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f1b		85 31		sta $31				sta 	codePtr+1
.8f1d						_CLLPSearch:
.8f1d		b2 30		lda ($30)			lda 	(codePtr)
.8f1f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8f21		f0 e1		beq $8f04			beq 	_CLExit
.8f23		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8f25		b1 30		lda ($30),y			lda 	(codePtr),y
.8f27		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8f29		d0 0e		bne $8f39			bne 	_CLLPNext
.8f2b		c8		iny				iny 								; check if PROC this.
.8f2c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f2e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8f30		d0 07		bne $8f39			bne 	_CLLPNext
.8f32		c8		iny				iny
.8f33		b1 30		lda ($30),y			lda 	(codePtr),y
.8f35		c5 39		cmp $39				cmp 	zTemp1+1
.8f37		f0 0d		beq $8f46			beq 	_CLLPFound
.8f39						_CLLPNext:
.8f39		18		clc				clc
.8f3a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f3c		65 30		adc $30				adc 	codePtr
.8f3e		85 30		sta $30				sta 	codePtr
.8f40		90 02		bcc $8f44			bcc 	_CREExit
.8f42		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f44						_CREExit:
.8f44		80 d7		bra $8f1d			bra 	_CLLPSearch
.8f46						_CLLPFound:
.8f46		b2 30		lda ($30)			lda 	(codePtr)
.8f48		f0 ba		beq $8f04			beq 	_CLExit
.8f4a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8f4c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f4e		48		pha				pha
.8f4f		20 65 8f	jsr $8f65			jsr 	CLListOneLine 				; list line and go forward
.8f52		18		clc				clc
.8f53		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f55		65 30		adc $30				adc 	codePtr
.8f57		85 30		sta $30				sta 	codePtr
.8f59		90 02		bcc $8f5d			bcc 	_CREExit
.8f5b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f5d						_CREExit:
.8f5d		68		pla				pla 								; reached ENDPROC ?
.8f5e		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8f60		d0 e4		bne $8f46			bne 	_CLLPFound
.8f62		4c b7 85	jmp $85b7			jmp 	WarmStart
.8f65						CLListOneLine:
.8f65		20 e1 96	jsr $96e1			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8f68		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8f6b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8f6d		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8f6f		20 95 97	jsr $9795			jsr 	PrintStringXA
.8f72		a9 0d		lda #$0d			lda 	#13 						; new line
.8f74		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8f77		60		rts				rts
.8f78						CLCompareLineNo:
.8f78		38		sec				sec
.8f79		a0 01		ldy #$01			ldy 	#1
.8f7b		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7d		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8f7f		85 36		sta $36				sta 	zTemp0
.8f81		c8		iny				iny
.8f82		b1 30		lda ($30),y			lda 	(codePtr),y
.8f84		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8f86		05 36		ora $36				ora 	zTemp0
.8f88		60		rts				rts
.8f89						CLIsDigit:
.8f89		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8b		c9 30		cmp #$30			cmp 	#"0"
.8f8d		90 03		bcc $8f92			bcc	 	_CLIDExitFalse
.8f8f		c9 3a		cmp #$3a			cmp 	#"9"+1
.8f91		60		rts				rts
.8f92						_CLIDExitFalse:
.8f92		38		sec				sec
.8f93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8f94						Command_LOCAL:
.8f94		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8f96		20 a2 8f	jsr $8fa2			jsr 	LocaliseNextTerm 			; convert term to a local.
.8f99		b1 30		lda ($30),y			lda 	(codePtr),y
.8f9b		c8		iny				iny
.8f9c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f9e		f0 f4		beq $8f94			beq 	Command_LOCAL 				; if so, localise another variable.
.8fa0		88		dey				dey 								; unpick pre-get
.8fa1		60		rts				rts
.8fa2						LocaliseNextTerm:
.8fa2		20 8a a0	jsr $a08a			jsr 	EvaluateTerm 				; evaluate the term
.8fa5		b5 50		lda $50,x			lda 	NSStatus,x
.8fa7		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8fa9		f0 5c		beq $9007			beq		_LNTError
.8fab		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8fad		85 36		sta $36				sta 	zTemp0
.8faf		b5 60		lda $60,x			lda 	NSMantissa1,x
.8fb1		85 37		sta $37				sta  	zTemp0+1
.8fb3		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8fb5		29 10		and #$10			and 	#NSBIsString
.8fb7		d0 1e		bne $8fd7			bne 	_LNTPushString
.8fb9		5a		phy				phy
.8fba		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8fbc						_LNTPushNumLoop:
.8fbc		b1 36		lda ($36),y			lda		(zTemp0),y
.8fbe		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8fc1		c8		iny				iny
.8fc2		c0 05		cpy #$05			cpy 	#5
.8fc4		d0 f6		bne $8fbc			bne 	_LNTPushNumLoop
.8fc6		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8fc8		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8fcb		a5 37		lda $37				lda 	zTemp0+1
.8fcd		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8fd0		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8fd2		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8fd5		7a		ply				ply
.8fd6		60		rts				rts
.8fd7						_LNTPushString:
.8fd7		5a		phy				phy
.8fd8		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8fda		85 38		sta $38				sta 	zTemp1
.8fdc		a0 01		ldy #$01			ldy 	#1
.8fde		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fe0		85 39		sta $39				sta 	zTemp1+1
.8fe2		a0 00		ldy #$00			ldy 	#0 							; output string
.8fe4		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8fe6		f0 0a		beq $8ff2			beq 	_LNTStringOut
.8fe8						_LNTPushStrLoop:
.8fe8		b1 38		lda ($38),y			lda 	(zTemp1),y
.8fea		f0 06		beq $8ff2			beq 	_LNTStringOut
.8fec		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8fef		c8		iny				iny
.8ff0		80 f6		bra $8fe8			bra 	_LNTPushStrLoop
.8ff2						_LNTStringOut:
.8ff2		98		tya				tya									; output length (chars written).
.8ff3		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8ff6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8ff8		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.8ffb		b5 60		lda $60,x			lda 	NSMantissa1,x
.8ffd		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.9000		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9002		20 a8 b7	jsr $b7a8			jsr 	StackPushByte
.9005		7a		ply				ply
.9006		60		rts				rts
.9007						_LNTError:
.9007		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.900a						LocalPopValue:
.900a		20 c0 b7	jsr $b7c0			jsr 	StackPopByte
.900d		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.900f		d0 17		bne $9028			bne 	_LPVString
.9011		20 c0 b7	jsr $b7c0			jsr 	StackPopByte 				; address
.9014		85 37		sta $37				sta 	zTemp0+1
.9016		20 c0 b7	jsr $b7c0			jsr 	StackPopByte
.9019		85 36		sta $36				sta 	zTemp0
.901b		5a		phy				phy
.901c		a0 04		ldy #$04			ldy 	#4 							; copy back
.901e						_LPVNumberCopy:
.901e		20 c0 b7	jsr $b7c0			jsr 	StackPopByte
.9021		91 36		sta ($36),y			sta 	(zTemp0),y
.9023		88		dey				dey
.9024		10 f8		bpl $901e			bpl 	_LPVNumberCopy
.9026		7a		ply				ply 								; and complete
.9027		60		rts				rts
.9028						_LPVString:
.9028		20 c0 b7	jsr $b7c0			jsr 	StackPopByte 				; address of record copied to zTemp0
.902b		85 37		sta $37				sta 	zTemp0+1
.902d		20 c0 b7	jsr $b7c0			jsr 	StackPopByte
.9030		85 36		sta $36				sta 	zTemp0
.9032		5a		phy				phy
.9033		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.9035		85 38		sta $38				sta 	zTemp1
.9037		a0 01		ldy #$01			ldy 	#1
.9039		b1 36		lda ($36),y			lda 	(zTemp0),y
.903b		85 39		sta $39				sta 	zTemp1+1
.903d		20 c0 b7	jsr $b7c0			jsr 	StackPopByte 				; # chars to get => y
.9040		a8		tay				tay
.9041		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9043		f0 0e		beq $9053			beq 	_LPVStringCopied
.9045		a9 00		lda #$00			lda 	#0 							; NULL on end
.9047		91 38		sta ($38),y			sta 	(zTemp1),y
.9049						_LPVStringCopy:
.9049		88		dey				dey
.904a		30 07		bmi $9053			bmi 	_LPVStringCopied
.904c		20 c0 b7	jsr $b7c0			jsr 	StackPopByte
.904f		91 38		sta ($38),y			sta 	(zTemp1),y
.9051		80 f6		bra $9049			bra 	_LPVStringCopy
.9053						_LPVStringCopied:
.9053		fa		plx				plx
.9054		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.9055						MCCommand:
.9055		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.9057		48		pha				pha
.9058		64 01		stz $01				stz 	1
.905a		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.905d		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.905f		8d 72 07	sta $0772			sta 	DMAControlByte
.9062		20 10 91	jsr $9110			jsr 	MCPosition 					; start position
.9065		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.9067		20 e1 90	jsr $90e1			jsr 	MCCopyAddress
.906a		a2 08		ldx #$08			ldx 	#8
.906c		20 e1 90	jsr $90e1			jsr 	MCCopyAddress
.906f		b1 30		lda ($30),y			lda 	(codePtr),y
.9071		c8		iny				iny
.9072		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.9074		f0 09		beq $907f			beq 	_MCSize1D
.9076		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.9078		f0 11		beq $908b			beq 	_MCRect2D
.907a						_MCSyntax:
.907a		a9 02		lda #$02		lda	#2
.907c		4c 3c 97	jmp $973c		jmp	ErrorHandler
.907f						_MCSize1D:
.907f		a2 00		ldx #$00			ldx 	#0 							; get size
.9081		20 03 a6	jsr $a603			jsr 	EvaluateInteger
.9084		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9086		20 e1 90	jsr $90e1			jsr 	MCCopyAddress
.9089		80 24		bra $90af			bra 	_MCDestination
.908b						_MCRect2D:
.908b		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.908d		20 fe 90	jsr $90fe			jsr 	MCEvalCopyData16
.9090		20 2b 97	jsr $972b			jsr 	CheckComma
.9093		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.9095		20 fe 90	jsr $90fe			jsr 	MCEvalCopyData16
.9098		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.909a		20 33 97	jsr $9733			jsr 	CheckNextA
.909d		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.909f		20 fe 90	jsr $90fe			jsr 	MCEvalCopyData16
.90a2		a2 12		ldx #$12			ldx 	#$12
.90a4		20 05 91	jsr $9105			jsr 	MCCopyData16
.90a7		ad 72 07	lda $0772			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.90aa		09 02		ora #$02			ora 	#$02
.90ac		8d 72 07	sta $0772			sta 	DMAControlByte
.90af						_MCDestination:
.90af		b1 30		lda ($30),y			lda 	(codePtr),y
.90b1		c8		iny				iny
.90b2		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.90b4		f0 0e		beq $90c4			beq 	_MCDestPoke
.90b6		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.90b8		d0 c0		bne $907a			bne 	_MCSyntax
.90ba		20 10 91	jsr $9110			jsr 	MCPosition 					; get target address
.90bd		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.90bf		20 e1 90	jsr $90e1			jsr 	MCCopyAddress
.90c2		80 0e		bra $90d2			bra 	_MCDoDMA 					; and we can go.
.90c4						_MCDestPoke:
.90c4		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; POKE what
.90c7		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.90ca		ad 72 07	lda $0772			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.90cd		09 04		ora #$04			ora 	#$04
.90cf		8d 72 07	sta $0772			sta 	DMAControlByte
.90d2						_MCDoDMA:
.90d2		ad 72 07	lda $0772			lda 	DMAControlByte 				; set the DMA Control byte to go !
.90d5		8d 00 df	sta $df00			sta 	$DF00
.90d8						_MCWaitBUSD:
.90d8		ad 01 df	lda $df01			lda 	$DF01
.90db		30 fb		bmi $90d8			bmi 	_MCWaitBUSD
.90dd		68		pla				pla 								; restore I/O.
.90de		85 01		sta $01				sta 	1
.90e0		60		rts				rts
.90e1						MCCopyAddress:
.90e1		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.90e3		29 fc		and #$fc			and 	#$FC
.90e5		05 70		ora $70				ora 	NSMantissa3
.90e7		d0 10		bne $90f9			bne 	_MCRange
.90e9		a5 58		lda $58				lda 	NSMantissa0
.90eb		9d 00 df	sta $df00,x			sta 	$DF00,x
.90ee		a5 60		lda $60				lda 	NSMantissa1
.90f0		9d 01 df	sta $df01,x			sta 	$DF01,x
.90f3		a5 68		lda $68				lda 	NSMantissa2
.90f5		9d 02 df	sta $df02,x			sta 	$DF02,x
.90f8		60		rts				rts
.90f9						_MCRange:
.90f9		a9 04		lda #$04		lda	#4
.90fb		4c 3c 97	jmp $973c		jmp	ErrorHandler
.90fe						MCEvalCopyData16:
.90fe		da		phx				phx
.90ff		a2 00		ldx #$00			ldx 	#0
.9101		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.9104		fa		plx				plx
.9105						MCCopyData16:
.9105		a5 58		lda $58				lda 	NSMantissa0
.9107		9d 00 df	sta $df00,x			sta 	$DF00,x
.910a		a5 60		lda $60				lda 	NSMantissa1
.910c		9d 01 df	sta $df01,x			sta 	$DF01,x
.910f		60		rts				rts
.9110						MCPosition:
.9110		a2 00		ldx #$00			ldx 	#0 							; get start address.
.9112		b1 30		lda ($30),y			lda 	(codePtr),y
.9114		c9 b7		cmp #$b7			cmp 	#KWD_AT
.9116		f0 04		beq $911c			beq 	_MCPAt
.9118		20 03 a6	jsr $a603			jsr 	EvaluateInteger
.911b		60		rts				rts
.911c						_MCPAt:
.911c		c8		iny				iny
.911d		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; X position
.9120		48		pha				pha
.9121		20 2b 97	jsr $972b			jsr 	CheckComma
.9124		e8		inx				inx
.9125		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; Y position
.9128		ca		dex				dex
.9129		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.912b		64 58		stz $58				stz 	NSMantissa0
.912d		64 68		stz $68				stz 	NSMantissa2
.912f		64 70		stz $70				stz 	NSMantissa3
.9131		46 60		lsr $60				lsr 	NSMantissa1
.9133		66 58		ror $58				ror 	NSMantissa0
.9135		46 60		lsr $60				lsr 	NSMantissa1
.9137		66 58		ror $58				ror 	NSMantissa0
.9139		68		pla				pla
.913a		18		clc				clc
.913b		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.913d		85 58		sta $58				sta 	NSMantissa0
.913f		a5 60		lda $60				lda 	NSMantissa1
.9141		65 59		adc $59				adc 	NSMantissa0+1
.9143		85 60		sta $60				sta 	NSMantissa1
.9145		90 02		bcc $9149			bcc 	_MCPNoCarry
.9147		e6 68		inc $68				inc 	NSMantissa2
.9149						_MCPNoCarry:
.9149		ad 9b 07	lda $079b			lda 	gxBasePage
.914c		85 69		sta $69				sta 	NSMantissa2+1
.914e		64 59		stz $59				stz 	NSMantissa0+1
.9150		64 61		stz $61				stz 	NSMantissa1+1
.9152		64 71		stz $71				stz 	NSMantissa3+1
.9154		a2 01		ldx #$01			ldx 	#1
.9156		20 af a6	jsr $a6af			jsr 	NSMShiftRight
.9159		20 af a6	jsr $a6af			jsr 	NSMShiftRight
.915c		20 af a6	jsr $a6af			jsr 	NSMShiftRight
.915f		a2 00		ldx #$00			ldx 	#0
.9161		20 36 9a	jsr $9a36			jsr 	AddTopTwoStack
.9164		60		rts				rts
.0772						DMAControlByte:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9165						NewCommand:
.9165		20 6b 91	jsr $916b			jsr 	NewProgram 					; does the actual NEW.
.9168		4c b7 85	jmp $85b7			jmp 	WarmStart 					; and warm starts straight away.
.916b						NewProgram:
.916b		20 c9 b3	jsr $b3c9			jsr 	MemoryNew
.916e		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9171		20 4d 86	jsr $864d			jsr 	ClearCommand 				; clear everything.
.9174		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9175						PokeBCommand:
.9175		a9 01		lda #$01			lda 	#1
.9177		80 0c		bra $9185			bra 	PokeCommand
.9179						PokeWCommand:
.9179		a9 02		lda #$02			lda 	#2
.917b		80 08		bra $9185			bra 	PokeCommand
.917d						PokeLCommand:
.917d		a9 03		lda #$03			lda 	#3
.917f		80 04		bra $9185			bra 	PokeCommand
.9181						PokeDCommand:
.9181		a9 04		lda #$04			lda 	#4
.9183		80 00		bra $9185			bra 	PokeCommand
.9185						PokeCommand:
.9185		48		pha				pha 								; save count on stack
.9186		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9188		20 16 a6	jsr $a616			jsr		Evaluate16BitInteger 		; address
.918b		20 2b 97	jsr $972b			jsr 	CheckComma
.918e		e8		inx				inx
.918f		20 03 a6	jsr $a603			jsr		EvaluateInteger 			; data
.9192		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9194		85 36		sta $36				sta 	zTemp0
.9196		a5 60		lda $60				lda 	NSMantissa1
.9198		85 37		sta $37				sta 	zTemp0+1
.919a		68		pla				pla 								; count -> zTemp1
.919b		85 38		sta $38				sta 	zTemp1
.919d		5a		phy				phy 								; save Y position.
.919e		a0 00		ldy #$00			ldy 	#0 							; index to write
.91a0		a2 00		ldx #$00			ldx 	#0 							; index to read
.91a2						_PCLoop:
.91a2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.91a4		91 36		sta ($36),y			sta 	(zTemp0),y
.91a6		c8		iny				iny 								; next byte to write
.91a7		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.91a8		18		clc				clc
.91a9		69 08		adc #$08			adc 	#MathStackSize
.91ab		aa		tax				tax
.91ac		c6 38		dec $38				dec 	zTemp1 						; done them all
.91ae		d0 f2		bne $91a2			bne 	_PCLoop
.91b0		7a		ply				ply 								; restore position.
.91b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.91b2						CallProcedure:
.91b2		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.91b4		b1 30		lda ($30),y			lda 	(codePtr),y
.91b6		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.91b8		f0 0c		beq $91c6			beq 	_CPEndParam
.91ba						_CPParamLoop:
.91ba		20 db a5	jsr $a5db			jsr 	EvaluateValue 				; get parameter onto stack
.91bd		e8		inx				inx 								; bump next stack
.91be		b1 30		lda ($30),y			lda 	(codePtr),y
.91c0		c8		iny				iny
.91c1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.91c3		f0 f5		beq $91ba			beq 	_CPParamLoop
.91c5		88		dey				dey 								; unpick.
.91c6						_CPEndParam:
.91c6		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.91c9		c8		iny				iny									; skip right bracket
.91ca		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.91cc		20 c9 b7	jsr $b7c9			jsr 	StackOpen
.91cf		20 0e b8	jsr $b80e			jsr 	STKSaveCodePosition 		; save loop position
.91d2		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.91d4		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.91d6		a5 60		lda $60				lda 	NSMantissa1
.91d8		85 37		sta $37				sta 	zTemp0+1
.91da		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.91dc		b2 36		lda ($36)			lda 	(zTemp0)
.91de		85 30		sta $30				sta 	safePtr
.91e0		b1 36		lda ($36),y			lda 	(zTemp0),y
.91e2		85 31		sta $31				sta 	safePtr+1
.91e4		c8		iny				iny
.91e5		b1 36		lda ($36),y			lda 	(zTemp0),y
.91e7		85 32		sta $32				sta 	safePtr+2
.91e9		c8		iny				iny
.91ea		b1 36		lda ($36),y			lda 	(zTemp0),y
.91ec		85 33		sta $33				sta 	safePtr+3
.91ee		c8		iny				iny 								; get Y offset -> Y
.91ef		b1 36		lda ($36),y			lda 	(zTemp0),y
.91f1		a8		tay				tay
.91f2		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.91f4		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.91f7		f0 13		beq $920c			beq 	_ParamExit 					; if so, exit.
.91f9						_ParamExtract:
.91f9		ca		dex				dex 								; put a local term on the level before
.91fa		20 a2 8f	jsr $8fa2			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.91fd		20 73 8e	jsr $8e73			jsr 	AssignVariable 				; assign stacked value to the variable.
.9200		e8		inx				inx 								; advance to next parameter to do.
.9201		e8		inx				inx
.9202		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9205		f0 05		beq $920c			beq 	_ParamExit
.9207		20 2b 97	jsr $972b			jsr 	CheckComma 					; comma seperating parameters
.920a		80 ed		bra $91f9			bra 	_ParamExtract
.920c						_ParamExit:
.920c		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; check )
.920f		60		rts				rts 								; and continue from here
.9210						Command_ENDPROC:
.9210		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9212		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9214		20 f6 b7	jsr $b7f6			jsr 	StackCheckFrame
.9217		20 1f b8	jsr $b81f			jsr 	STKLoadCodePosition 		; restore code position
.921a		20 e8 b7	jsr $b7e8			jsr 	StackClose
.921d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.921e						Command_Read:
.921e		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9220		20 8a a0	jsr $a08a			jsr 	EvaluateTerm
.9223		b5 50		lda $50,x			lda 	NSStatus,x
.9225		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9227		f0 4f		beq $9278			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.9229		20 c1 92	jsr $92c1			jsr 	SwapDataCodePtrs 			; swap code and data
.922c		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.922f		d0 25		bne $9256			bne 	_CRContinueData  			; forward for the next one.
.9231		b2 30		lda ($30)			lda 	(codePtr)
.9233		f0 1c		beq $9251			beq 	_CRNoData
.9235						_CRKeepSearching:
.9235		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.9237		a2 80		ldx #$80			ldx 	#KWC_EOL
.9239		20 7e 96	jsr $967e			jsr 	ScanForward
.923c		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.923e		f0 16		beq $9256			beq 	_CRHaveData 				; found it
.9240		18		clc				clc
.9241		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9243		65 30		adc $30				adc 	codePtr
.9245		85 30		sta $30				sta 	codePtr
.9247		90 02		bcc $924b			bcc 	_CREExit
.9249		e6 31		inc $31				inc 	codePtr+1 					; carry
.924b						_CREExit:
.924b		a0 03		ldy #$03			ldy 	#3 							; start of line.
.924d		b2 30		lda ($30)			lda 	(codePtr)
.924f		d0 e4		bne $9235			bne 	_CRKeepSearching
.9251						_CRNoData:
.9251		a9 0b		lda #$0b		lda	#11
.9253		4c 3c 97	jmp $973c		jmp	ErrorHandler
.9256						_CRHaveData:
.9256						_CRContinueData:
.9256		a2 01		ldx #$01			ldx 	#1
.9258		20 db a5	jsr $a5db			jsr 	EvaluateValue 				; evaluate value into slot # 1
.925b		ca		dex				dex
.925c		20 73 8e	jsr $8e73			jsr		AssignVariable 				; do the assignment
.925f		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.9262		b1 30		lda ($30),y			lda 	(codePtr),y
.9264		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9266		d0 04		bne $926c			bne 	_CRSwapBack
.9268		c8		iny				iny 								; consume comma
.9269		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.926c						_CRSwapBack:
.926c		20 c1 92	jsr $92c1			jsr 	SwapDataCodePtrs			; swap them back.
.926f		b1 30		lda ($30),y			lda 	(codePtr),y
.9271		c8		iny				iny
.9272		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9274		f0 a8		beq $921e			beq 	Command_Read 				; if so go round again.
.9276		88		dey				dey 								; unpick get.
.9277		60		rts				rts
.9278						_CRSyntax:
.9278		4c 4f b1	jmp $b14f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.927b						RemCommand:
.927b		b1 30		lda ($30),y			lda 	(codePtr),y
.927d		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.927f		d0 06		bne $9287			bne 	_RMExit
.9281		c8		iny				iny 								; point to offset
.9282		98		tya				tya 								; A = offset position
.9283		38		sec				sec 								; add size +1 hence SEC
.9284		71 30		adc ($30),y			adc 	(codePtr),y
.9286		a8		tay				tay 								; make current position.
.9287						_RMExit:
.9287		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9288						Command_REPEAT:
.9288		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.928a		20 c9 b7	jsr $b7c9			jsr 	StackOpen
.928d		20 0e b8	jsr $b80e			jsr 	STKSaveCodePosition 		; save loop position
.9290		60		rts				rts
.9291						Command_UNTIL:
.9291		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9293		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9295		20 f6 b7	jsr $b7f6			jsr 	StackCheckFrame
.9298		a2 00		ldx #$00			ldx 	#0
.929a		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; work out the number
.929d		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; check if zero
.92a0		f0 04		beq $92a6			beq 	_CULoopBack 				; if so keep looping
.92a2		20 e8 b7	jsr $b7e8			jsr 	StackClose		 			; return
.92a5		60		rts				rts
.92a6						_CULoopBack:
.92a6		20 1f b8	jsr $b81f			jsr 	STKLoadCodePosition 		; loop back
.92a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.92aa						Command_Restore:
.92aa		20 c1 92	jsr $92c1			jsr 	SwapDataCodePtrs 			; swap code and data
.92ad		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92af		85 30		sta $30				sta 	codePtr
.92b1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92b3		85 31		sta $31				sta 	codePtr+1
.92b5		20 c1 92	jsr $92c1			jsr 	SwapDataCodePtrs 			; put them back
.92b8		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.92ba		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.92bd		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.92c0		60		rts				rts
.92c1						SwapDataCodePtrs:
.92c1		da		phx				phx
.92c2		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.92c4						_SDCPLoop:
.92c4		b5 30		lda $30,x			lda 	safePtr,x
.92c6		48		pha				pha
.92c7		bd 13 04	lda $0413,x			lda 	dataPointer,x
.92ca		95 30		sta $30,x			sta 	safePtr,x
.92cc		68		pla				pla
.92cd		9d 13 04	sta $0413,x			sta 	dataPointer,x
.92d0		ca		dex				dex
.92d1		10 f1		bpl $92c4			bpl 	_SDCPLoop
.92d3		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.92d6		8c 17 04	sty $0417			sty 	dataPointer+4
.92d9		a8		tay				tay
.92da		fa		plx				plx
.92db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.92dc						EOLCommand:
.92dc		18		clc				clc
.92dd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92df		65 30		adc $30				adc 	codePtr
.92e1		85 30		sta $30				sta 	codePtr
.92e3		90 02		bcc $92e7			bcc 	_CREExit
.92e5		e6 31		inc $31				inc 	codePtr+1 					; carry
.92e7						_CREExit:
.92e7		80 18		bra $9301			bra 	RunNewLine
.92e9						CommandRUNOptLoad:
.92e9		b1 30		lda ($30),y			lda 	(codePtr),y
.92eb		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.92ed		f0 07		beq $92f6			beq 	RunCurrentProgram
.92ef		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.92f1		f0 03		beq $92f6			beq 	RunCurrentProgram
.92f3		20 f0 89	jsr $89f0			jsr 	LoadFile 					; load expected name file.
.92f6						RunCurrentProgram:
.92f6		20 4d 86	jsr $864d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.92f9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92fb		85 30		sta $30				sta 	codePtr
.92fd		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92ff		85 31		sta $31				sta 	codePtr+1
.9301						RunNewLine:
.9301		b2 30		lda ($30)			lda 	(codePtr)
.9303		f0 74		beq $9379			beq 	CRNoProgram         		; no then END.
.9305		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9307		9a		txs				txs
.9308						RUNCodePointerLine:
.9308		a0 02		ldy #$02			ldy 	#2 							; start of program
.930a						_CRIncMainLoop:
.930a		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.930c		f0 03		beq $9311			beq 	_NoEvents					; if zero, skip with Z flag set.
.930e		20 37 81	jsr $8137			jsr 	ProcessEvents
.9311						_NoEvents:
.9311		d0 61		bne $9374			bne 	_CRBreak
.9313		a5 01		lda $01				lda 	1 							; save I/O 0
.9315		48		pha				pha
.9316		64 01		stz $01				stz 	1 							; access I/O Page 0
.9318		38		sec				sec 								; calculate timer - LastTick
.9319		ad 59 d6	lda $d659			lda 	$D659
.931c		cd 5e 06	cmp $065e			cmp 	LastTick
.931f		f0 06		beq $9327			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9321		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.9324		20 99 81	jsr $8199			jsr 	TickHandler 							; go do the code.
.9327						_NoFireTick:
.9327		68		pla				pla 								; restore I/O 0
.9328		85 01		sta $01				sta 	1
.932a						_CRNoBreakCheck:
.932a		c8		iny				iny									; next token
.932b						_CRMainLoop:
.932b		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.932e		b1 30		lda ($30),y			lda 	(codePtr),y
.9330		10 10		bpl $9342			bpl 	_CRNotKeyword				; not a token.
.9332		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9334		b0 04		bcs $933a			bcs 	_CRIsKeyword
.9336		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9338		b0 34		bcs $936e			bcs		_CRSyntaxError
.933a						_CRIsKeyword:
.933a		c8		iny				iny 								; consume command
.933b		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.933c		aa		tax				tax 								; put in X for vector jump
.933d		20 71 93	jsr $9371			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9340		80 e9		bra $932b			bra 	_CRMainLoop 				; and loop round
.9342						_CRNotKeyword:
.9342		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9344		f0 c4		beq $930a			beq 	_CRIncMainLoop
.9346		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9348		90 05		bcc $934f			bcc 	_CRNotVariable
.934a						_CRGoLet:
.934a		20 3a 8e	jsr $8e3a			jsr 	LetCommand
.934d		80 dc		bra $932b			bra 	_CRMainLoop
.934f						_CRNotVariable:
.934f		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.9351		f0 f7		beq $934a			beq 	_CRGoLet
.9353		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9355		f0 f3		beq $934a			beq 	_CRGoLet
.9357		c9 21		cmp #$21			cmp 	#KWD_PLING
.9359		f0 ef		beq $934a			beq 	_CRGoLet
.935b		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.935d		f0 09		beq $9368			beq 	_CRGoRem
.935f		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9361		d0 0b		bne $936e			bne 	_CRSyntaxError
.9363		20 29 84	jsr $8429			jsr 	LabelHere
.9366		80 c3		bra $932b			bra 	_CRMainLoop
.9368						_CRGoRem:
.9368		c8		iny				iny
.9369		20 7b 92	jsr $927b			jsr 	RemCommand
.936c		80 bd		bra $932b			bra 	_CRMainLoop
.936e						_CRSyntaxError:
.936e		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.9371						_CRCallVector0:
.9371		7c 10 94	jmp ($9410,x)			jmp 	(VectorSet0,x)
.9374						_CRBreak:
.9374		a9 01		lda #$01		lda	#1
.9376		4c 3c 97	jmp $973c		jmp	ErrorHandler
.9379						CRNoProgram:
.9379		4c 91 87	jmp $8791			jmp 	EndCommand
.937c						Shift1Command:
.937c		b1 30		lda ($30),y			lda 	(codePtr),y
.937e		c8		iny				iny
.937f		0a		asl a				asl 	a
.9380		aa		tax				tax
.9381		7c c6 94	jmp ($94c6,x)			jmp 	(VectorSet1,x)
.9384						Shift2Command:
.9384		b1 30		lda ($30),y			lda 	(codePtr),y
.9386		c8		iny				iny
.9387		0a		asl a				asl 	a
.9388		aa		tax				tax
.9389		7c 12 95	jmp ($9512,x)			jmp 	(VectorSet2,x)
.938c						Unused1:
.938c						Unused2:
.938c						Unused3:
.938c						Unused4:
.938c		4c 4f b1	jmp $b14f			jmp 	SyntaxError
>938f								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9390						VectorSetPunc:
>9390		f4 99					.word	ShiftLeft                        ; $00 <<
>9392		df 97					.word	BinaryCompareLessEqual           ; $01 <=
>9394		d5 97					.word	BinaryCompareNotEqual            ; $02 <>
>9396		4f b1					.word	SyntaxError                      ; $03 !!3
>9398		4f b1					.word	SyntaxError                      ; $04 ><
>939a		e9 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>939c		f7 99					.word	ShiftRight                       ; $06 >>
>939e		4f b1					.word	SyntaxError                      ; $07 !!7
>93a0		4f b1					.word	SyntaxError                      ; $08 !!8
>93a2		4f b1					.word	SyntaxError                      ; $09 !!9
>93a4		4f b1					.word	SyntaxError                      ; $0a !!10
>93a6		4f b1					.word	SyntaxError                      ; $0b !!11
>93a8		4f b1					.word	SyntaxError                      ; $0c !!12
>93aa		4f b1					.word	SyntaxError                      ; $0d !!13
>93ac		4f b1					.word	SyntaxError                      ; $0e !!14
>93ae		4f b1					.word	SyntaxError                      ; $0f !!15
>93b0		4f b1					.word	SyntaxError                      ; $10 @
>93b2		4f b1					.word	SyntaxError                      ; $11 !!17
>93b4		4f b1					.word	SyntaxError                      ; $12 !!18
>93b6		4f b1					.word	SyntaxError                      ; $13 [
>93b8		a0 98					.word	IntegerDivide                    ; $14 \
>93ba		4f b1					.word	SyntaxError                      ; $15 ]
>93bc		32 9b					.word	EorInteger                       ; $16 ^
>93be		4f b1					.word	SyntaxError                      ; $17 _
>93c0		4f b1					.word	SyntaxError                      ; $18 `
>93c2		4f b1					.word	SyntaxError                      ; $19 !!25
>93c4		4f b1					.word	SyntaxError                      ; $1a !!26
>93c6		4f b1					.word	SyntaxError                      ; $1b {
>93c8		fd 9a					.word	OraInteger                       ; $1c |
>93ca		4f b1					.word	SyntaxError                      ; $1d }
>93cc		4f b1					.word	SyntaxError                      ; $1e ~
>93ce		4f b1					.word	SyntaxError                      ; $1f <7F>
>93d0		4f b1					.word	SyntaxError                      ; $20
>93d2		67 9b					.word	WordIndirect                     ; $21 !
>93d4		4f b1					.word	SyntaxError                      ; $22 "
>93d6		4f b1					.word	SyntaxError                      ; $23 #
>93d8		4f b1					.word	SyntaxError                      ; $24 $
>93da		e1 98					.word	IntegerModulus                   ; $25 %
>93dc		c8 9a					.word	AndInteger                       ; $26 &
>93de		4f b1					.word	SyntaxError                      ; $27 '
>93e0		4f b1					.word	SyntaxError                      ; $28 (
>93e2		4f b1					.word	SyntaxError                      ; $29 )
>93e4		4f 99					.word	MulInteger                       ; $2a *
>93e6		6a 9a					.word	AddInteger                       ; $2b +
>93e8		4f b1					.word	SyntaxError                      ; $2c ,
>93ea		a3 9a					.word	SubInteger                       ; $2d -
>93ec		4f b1					.word	SyntaxError                      ; $2e .
>93ee		21 9d					.word	FDivideCommand                   ; $2f /
>93f0		4f b1					.word	SyntaxError                      ; $30 0
>93f2		4f b1					.word	SyntaxError                      ; $31 1
>93f4		4f b1					.word	SyntaxError                      ; $32 2
>93f6		4f b1					.word	SyntaxError                      ; $33 3
>93f8		4f b1					.word	SyntaxError                      ; $34 4
>93fa		4f b1					.word	SyntaxError                      ; $35 5
>93fc		4f b1					.word	SyntaxError                      ; $36 6
>93fe		4f b1					.word	SyntaxError                      ; $37 7
>9400		4f b1					.word	SyntaxError                      ; $38 8
>9402		4f b1					.word	SyntaxError                      ; $39 9
>9404		4f b1					.word	SyntaxError                      ; $3a :
>9406		4f b1					.word	SyntaxError                      ; $3b ;
>9408		c1 97					.word	BinaryCompareLess                ; $3c <
>940a		b7 97					.word	BinaryCompareEqual               ; $3d =
>940c		cb 97					.word	BinaryCompareGreater             ; $3e >
>940e		89 9b					.word	ByteIndirect                     ; $3f ?
.9410						VectorSet0:
>9410		dc 92					.word	EOLCommand                       ; $80 !0:EOF
>9412		7c 93					.word	Shift1Command                    ; $81 !1:SH1
>9414		84 93					.word	Shift2Command                    ; $82 !2:SH2
>9416		0b a2					.word	AbsUnary                         ; $83 ABS(
>9418		19 a2					.word	AllocUnary                       ; $84 ALLOC(
>941a		89 a2					.word	AscUnary                         ; $85 ASC(
>941c		da a3					.word	ChrUnary                         ; $86 CHR$(
>941e		94 87					.word	UnaryEvent                       ; $87 EVENT(
>9420		b3 97					.word	UnaryFalse                       ; $88 FALSE
>9422		96 a2					.word	FracUnary                        ; $89 FRAC(
>9424		6d af					.word	ChrGet                           ; $8a GET$(
>9426		49 af					.word	AscGet                           ; $8b GET(
>9428		f3 ae					.word	UnaryGetDate                     ; $8c GETDATE$(
>942a		ef ae					.word	UnaryGetTime                     ; $8d GETTIME$(
>942c		6a b6					.word	UnaryHit                         ; $8e HIT(
>942e		74 af					.word	ChrInkey                         ; $8f INKEY$(
>9430		62 af					.word	AscInkey                         ; $90 INKEY(
>9432		ab a2					.word	IntUnary                         ; $91 INT(
>9434		99 a3					.word	IsValUnary                       ; $92 ISVAL(
>9436		ec a3					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>9438		10 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>943a		28 8e					.word	UnaryJoyB                        ; $95 JOYB(
>943c		01 8e					.word	UnaryJoyX                        ; $96 JOYX(
>943e		04 8e					.word	UnaryJoyY                        ; $97 JOYY(
>9440		4f a5					.word	Unary_Left                       ; $98 LEFT$(
>9442		bc a2					.word	LenUnary                         ; $99 LEN(
>9444		da a2					.word	Unary_Max                        ; $9a MAX(
>9446		71 a5					.word	Unary_Mid                        ; $9b MID$(
>9448		d6 a2					.word	Unary_Min                        ; $9c MIN(
>944a		25 a3					.word	Unary_Not                        ; $9d NOT(
>944c		38 a3					.word	PeekByteUnary                    ; $9e PEEK(
>944e		44 a3					.word	PeekDUnary                       ; $9f PEEKD(
>9450		40 a3					.word	PeekLUnary                       ; $a0 PEEKL(
>9452		3c a3					.word	PeekWUnary                       ; $a1 PEEKW(
>9454		26 b7					.word	UnaryPlaying                     ; $a2 PLAYING(
>9456		8d af					.word	Unary_Random                     ; $a3 RANDOM(
>9458		5c a5					.word	Unary_Right                      ; $a4 RIGHT$(
>945a		a7 af					.word	Unary_Rnd                        ; $a5 RND(
>945c		71 a3					.word	SgnUnary                         ; $a6 SGN(
>945e		8e a4					.word	SpcUnary                         ; $a7 SPC(
>9460		a9 a4					.word	Unary_Str                        ; $a8 STR$(
>9462		13 96					.word	UnaryTimer                       ; $a9 TIMER(
>9464		a8 97					.word	UnaryTrue                        ; $aa TRUE
>9466		8f a3					.word	ValUnary                         ; $ab VAL(
>9468		9a 8b					.word	ForCommand                       ; $ac FOR
>946a		dd 8c					.word	IfCommand                        ; $ad IF
>946c		8c 93					.word	Unused1                          ; $ae PROC
>946e		88 92					.word	Command_REPEAT                   ; $af REPEAT
>9470		f4 96					.word	Command_WHILE                    ; $b0 WHILE
>9472		06 8d					.word	EndIf                            ; $b1 ENDIF
>9474		10 92					.word	Command_ENDPROC                  ; $b2 ENDPROC
>9476		4c 8c					.word	NextCommand                      ; $b3 NEXT
>9478		8c 93					.word	Unused4                          ; $b4 THEN
>947a		91 92					.word	Command_UNTIL                    ; $b5 UNTIL
>947c		15 97					.word	Command_WEND                     ; $b6 WEND
>947e		4f b1					.word	SyntaxError                      ; $b7 AT
>9480		4f b1					.word	SyntaxError                      ; $b8 BY
>9482		18 86					.word	CallCommand                      ; $b9 CALL
>9484		1e b4					.word	CircleCommand                    ; $ba CIRCLE
>9486		4d 86					.word	ClearCommand                     ; $bb CLEAR
>9488		4f b1					.word	SyntaxError                      ; $bc COLOR
>948a		4f b1					.word	SyntaxError                      ; $bd COLOUR
>948c		ba 86					.word	Command_Data                     ; $be DATA
>948e		c2 86					.word	DimCommand                       ; $bf DIM
>9490		8c 93					.word	Unused3                          ; $c0 DOWNTO
>9492		ff 8c					.word	ElseCode                         ; $c1 ELSE
>9494		4f b1					.word	SyntaxError                      ; $c2 FROM
>9496		3d b6					.word	GfxCommand                       ; $c3 GFX
>9498		4f b1					.word	SyntaxError                      ; $c4 HERE
>949a		47 b4					.word	ImageCommand                     ; $c5 IMAGE
>949c		3a 8e					.word	LetCommand                       ; $c6 LET
>949e		99 b4					.word	LineCommand                      ; $c7 LINE
>94a0		94 8f					.word	Command_LOCAL                    ; $c8 LOCAL
>94a2		55 90					.word	MCCommand                        ; $c9 MEMCOPY
>94a4		4f b1					.word	SyntaxError                      ; $ca OFF
>94a6		4f b1					.word	SyntaxError                      ; $cb ON
>94a8		4f b1					.word	SyntaxError                      ; $cc OUTLINE
>94aa		8e b6					.word	PaletteCommand                   ; $cd PALETTE
>94ac		92 b4					.word	PlotCommand                      ; $ce PLOT
>94ae		75 91					.word	PokeBCommand                     ; $cf POKE
>94b0		81 91					.word	PokeDCommand                     ; $d0 POKED
>94b2		7d 91					.word	PokeLCommand                     ; $d1 POKEL
>94b4		79 91					.word	PokeWCommand                     ; $d2 POKEW
>94b6		1e 92					.word	Command_Read                     ; $d3 READ
>94b8		1a b4					.word	RectangleCommand                 ; $d4 RECT
>94ba		7b 92					.word	RemCommand                       ; $d5 REM
>94bc		4f b1					.word	SyntaxError                      ; $d6 SOLID
>94be		42 b7					.word	SoundCommand                     ; $d7 SOUND
>94c0		29 b4					.word	SpriteCommand                    ; $d8 SPRITE
>94c2		63 b4					.word	TextCommand                      ; $d9 TEXT
>94c4		8c 93					.word	Unused2                          ; $da TO
.94c6						VectorSet1:
>94c6		4f b1					.word	SyntaxError                      ; $80 !0:EOF
>94c8		4f b1					.word	SyntaxError                      ; $81 !1:SH1
>94ca		4f b1					.word	SyntaxError                      ; $82 !2:SH2
>94cc		ec 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>94ce		08 86					.word	AssertCommand                    ; $84 ASSERT
>94d0		dd b5					.word	BitmapCtrl                       ; $85 BITMAP
>94d2		f1 87					.word	Command_BLoad                    ; $86 BLOAD
>94d4		91 88					.word	Command_BSave                    ; $87 BSAVE
>94d6		ce b6					.word	ClearScreen                      ; $88 CLS
>94d8		0c 8d					.word	Command_CPrint                   ; $89 CPRINT
>94da		13 89					.word	Command_Dir                      ; $8a DIR
>94dc		7f 87					.word	BootDOS                          ; $8b DOS
>94de		e3 89					.word	Command_Drive                    ; $8c DRIVE
>94e0		91 87					.word	EndCommand                       ; $8d END
>94e2		fa b6					.word	Explode                          ; $8e EXPLODE
>94e4		4f b1					.word	SyntaxError                      ; $8f GO
>94e6		a5 8c					.word	Command_GOSUB                    ; $90 GOSUB
>94e8		c3 8c					.word	GotoCommand                      ; $91 GOTO
>94ea		4f b1					.word	SyntaxError                      ; $92 HIMEM
>94ec		07 8d					.word	Command_Input                    ; $93 INPUT
>94ee		8a 8e					.word	Command_List                     ; $94 LIST
>94f0		ea 89					.word	Command_Load                     ; $95 LOAD
>94f2		65 91					.word	NewCommand                       ; $96 NEW
>94f4		d6 b6					.word	PingCommand                      ; $97 PING
>94f6		13 8d					.word	Command_Print                    ; $98 PRINT
>94f8		aa 92					.word	Command_Restore                  ; $99 RESTORE
>94fa		b5 8c					.word	Command_RETURN                   ; $9a RETURN
>94fc		e9 92					.word	CommandRUNOptLoad                ; $9b RUN
>94fe		bc 8a					.word	Command_Save                     ; $9c SAVE
>9500		9a 95					.word	CommandSetDate                   ; $9d SETDATE
>9502		9e 95					.word	CommandSetTime                   ; $9e SETTIME
>9504		ee b6					.word	ShootCommand                     ; $9f SHOOT
>9506		22 b6					.word	SpritesCtrl                      ; $a0 SPRITES
>9508		0e 96					.word	StopCommand                      ; $a1 STOP
>950a		40 8b					.word	Command_VERIFY                   ; $a2 VERIFY
>950c		b1 86					.word	XGoCommand                       ; $a3 XGO
>950e		a8 86					.word	XLoadCommand                     ; $a4 XLOAD
>9510		e2 b6					.word	ZapCommand                       ; $a5 ZAP
.9512						VectorSet2:
>9512		4f b1					.word	SyntaxError                      ; $80 !0:EOF
>9514		4f b1					.word	SyntaxError                      ; $81 !1:SH1
>9516		4f b1					.word	SyntaxError                      ; $82 !2:SH2
>9518		0e b0					.word	Assemble_adc                     ; $83 ADC
>951a		06 b0					.word	Assemble_and                     ; $84 AND
>951c		22 b0					.word	Assemble_asl                     ; $85 ASL
>951e		8c b0					.word	Assemble_bcc                     ; $86 BCC
>9520		90 b0					.word	Assemble_bcs                     ; $87 BCS
>9522		98 b0					.word	Assemble_beq                     ; $88 BEQ
>9524		4f b0					.word	Assemble_bit                     ; $89 BIT
>9526		80 b0					.word	Assemble_bmi                     ; $8a BMI
>9528		94 b0					.word	Assemble_bne                     ; $8b BNE
>952a		7c b0					.word	Assemble_bpl                     ; $8c BPL
>952c		9c b0					.word	Assemble_bra                     ; $8d BRA
>952e		a0 b0					.word	Assemble_brk                     ; $8e BRK
>9530		84 b0					.word	Assemble_bvc                     ; $8f BVC
>9532		88 b0					.word	Assemble_bvs                     ; $90 BVS
>9534		a8 b0					.word	Assemble_clc                     ; $91 CLC
>9536		fc b0					.word	Assemble_cld                     ; $92 CLD
>9538		bc b0					.word	Assemble_cli                     ; $93 CLI
>953a		ec b0					.word	Assemble_clv                     ; $94 CLV
>953c		1a b0					.word	Assemble_cmp                     ; $95 CMP
>953e		63 b0					.word	Assemble_cpx                     ; $96 CPX
>9540		5e b0					.word	Assemble_cpy                     ; $97 CPY
>9542		40 b0					.word	Assemble_dec                     ; $98 DEC
>9544		f8 b0					.word	Assemble_dex                     ; $99 DEX
>9546		d4 b0					.word	Assemble_dey                     ; $9a DEY
>9548		0a b0					.word	Assemble_eor                     ; $9b EOR
>954a		45 b0					.word	Assemble_inc                     ; $9c INC
>954c		08 b1					.word	Assemble_inx                     ; $9d INX
>954e		f4 b0					.word	Assemble_iny                     ; $9e INY
>9550		77 b0					.word	Assemble_jmp                     ; $9f JMP
>9552		72 b0					.word	Assemble_jsr                     ; $a0 JSR
>9554		16 b0					.word	Assemble_lda                     ; $a1 LDA
>9556		3b b0					.word	Assemble_ldx                     ; $a2 LDX
>9558		59 b0					.word	Assemble_ldy                     ; $a3 LDY
>955a		2c b0					.word	Assemble_lsr                     ; $a4 LSR
>955c		0c b1					.word	Assemble_nop                     ; $a5 NOP
>955e		02 b0					.word	Assemble_ora                     ; $a6 ORA
>9560		b8 b0					.word	Assemble_pha                     ; $a7 PHA
>9562		a4 b0					.word	Assemble_php                     ; $a8 PHP
>9564		00 b1					.word	Assemble_phx                     ; $a9 PHX
>9566		c0 b0					.word	Assemble_phy                     ; $aa PHY
>9568		c8 b0					.word	Assemble_pla                     ; $ab PLA
>956a		ac b0					.word	Assemble_plp                     ; $ac PLP
>956c		14 b1					.word	Assemble_plx                     ; $ad PLX
>956e		d0 b0					.word	Assemble_ply                     ; $ae PLY
>9570		27 b0					.word	Assemble_rol                     ; $af ROL
>9572		31 b0					.word	Assemble_ror                     ; $b0 ROR
>9574		b4 b0					.word	Assemble_rti                     ; $b1 RTI
>9576		c4 b0					.word	Assemble_rts                     ; $b2 RTS
>9578		1e b0					.word	Assemble_sbc                     ; $b3 SBC
>957a		b0 b0					.word	Assemble_sec                     ; $b4 SEC
>957c		10 b1					.word	Assemble_sed                     ; $b5 SED
>957e		cc b0					.word	Assemble_sei                     ; $b6 SEI
>9580		12 b0					.word	Assemble_sta                     ; $b7 STA
>9582		04 b1					.word	Assemble_stp                     ; $b8 STP
>9584		36 b0					.word	Assemble_stx                     ; $b9 STX
>9586		54 b0					.word	Assemble_sty                     ; $ba STY
>9588		4a b0					.word	Assemble_stz                     ; $bb STZ
>958a		e8 b0					.word	Assemble_tax                     ; $bc TAX
>958c		e4 b0					.word	Assemble_tay                     ; $bd TAY
>958e		6d b0					.word	Assemble_trb                     ; $be TRB
>9590		68 b0					.word	Assemble_tsb                     ; $bf TSB
>9592		f0 b0					.word	Assemble_tsx                     ; $c0 TSX
>9594		d8 b0					.word	Assemble_txa                     ; $c1 TXA
>9596		e0 b0					.word	Assemble_txs                     ; $c2 TXS
>9598		dc b0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.959a						CommandSetDate:
.959a		a9 03		lda #$03			lda 	#3
.959c		80 02		bra $95a0			bra 	CSDTMain
.959e						CommandSetTime:
.959e		a9 00		lda #$00			lda 	#0
.95a0						CSDTMain:
.95a0		48		pha				pha 								; save table offsets 0 or 3
.95a1		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.95a3		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.95a6		20 2b 97	jsr $972b			jsr 	CheckComma
.95a9		e8		inx				inx
.95aa		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.95ad		20 2b 97	jsr $972b			jsr 	CheckComma
.95b0		e8		inx				inx
.95b1		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.95b4		68		pla				pla 								; table offset in Y, saving Y
.95b5		5a		phy				phy
.95b6		a8		tay				tay
.95b7		a2 00		ldx #$00			ldx 	#0 							; first number
.95b9		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.95bb		48		pha				pha
.95bc		64 01		stz $01				stz 	1
.95be						_CSDTCopy:
.95be		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.95c0		d9 02 96	cmp $9602,y			cmp 	RTCWMinValues,y 			; check range
.95c3		90 1b		bcc $95e0			bcc 	_CSDTRange
.95c5		d9 08 96	cmp $9608,y			cmp 	RTCWMaxValues,y
.95c8		b0 16		bcs $95e0			bcs 	_CSDTRange
.95ca		20 e5 95	jsr $95e5			jsr 	CSDTDecimalToBCD
.95cd		da		phx				phx 								; save X
.95ce		be fc 95	ldx $95fc,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.95d1		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.95d4		fa		plx				plx 								; restore X
.95d5		e8		inx				inx 								; next number
.95d6		c8		iny				iny 								; next table entries
.95d7		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.95d9		d0 e3		bne $95be			bne 	_CSDTCopy
.95db		68		pla				pla 								; restore I/O space
.95dc		85 01		sta $01				sta 	1
.95de		7a		ply				ply 								; restore code pos and exit.
.95df		60		rts				rts
.95e0						_CSDTRange:
.95e0		a9 04		lda #$04		lda	#4
.95e2		4c 3c 97	jmp $973c		jmp	ErrorHandler
.95e5						CSDTDecimalToBCD:
.95e5		da		phx				phx 								; 10 count in X
.95e6		a2 00		ldx #$00			ldx 	#0
.95e8						_CSDTDBLoop:
.95e8		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.95ea		90 05		bcc $95f1			bcc 	_CSDTDBExit
.95ec		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.95ee		e8		inx				inx 								; one more 10s.
.95ef		80 f7		bra $95e8			bra 	_CSDTDBLoop
.95f1						_CSDTDBExit:
.95f1		85 36		sta $36				sta 	zTemp0 						; units
.95f3		8a		txa				txa 								; 10s x 16
.95f4		0a		asl a				asl 	a
.95f5		0a		asl a				asl 	a
.95f6		0a		asl a				asl 	a
.95f7		0a		asl a				asl 	a
.95f8		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.95fa		fa		plx				plx
.95fb		60		rts				rts
.95fc						RTCWOffset:
>95fc		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9602						RTCWMinValues:
>9602		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9608						RTCWMaxValues:
>9608		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.960e						StopCommand:
.960e		a9 08		lda #$08		lda	#8
.9610		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.9613						UnaryTimer:
.9613		fa		plx				plx
.9614		20 23 97	jsr $9723			jsr 	CheckRightBracket
.9617						TimerToStackX:
.9617		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; zero result
.961a		64 01		stz $01				stz 	1 							; access I/O
.961c		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.961f		95 58		sta $58,x			sta 	NSMantissa0,x
.9621		ad 5a d6	lda $d65a			lda 	$D65A
.9624		95 60		sta $60,x			sta 	NSMantissa1,x
.9626		ad 5b d6	lda $d65b			lda 	$D65B
.9629		95 68		sta $68,x			sta 	NSMantissa2,x
.962b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.962c						ProcedureScan:
.962c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.962e		85 30		sta $30				sta 	codePtr
.9630		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9632		85 31		sta $31				sta 	codePtr+1
.9634						_PSLoop:
.9634		b2 30		lda ($30)			lda 	(codePtr)
.9636		f0 42		beq $967a			beq 	_PSExit
.9638		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.963a		b1 30		lda ($30),y			lda 	(codePtr),y
.963c		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.963e		d0 2d		bne $966d			bne 	_PSNext
.9640		c8		iny				iny 								; get the address of the record to zTemp0 and
.9641		b1 30		lda ($30),y			lda 	(codePtr),y
.9643		29 c0		and #$c0			and 	#$C0
.9645		c9 40		cmp #$40			cmp 	#$40
.9647		d0 32		bne $967b			bne 	_PSSyntax
.9649		b1 30		lda ($30),y			lda 	(codePtr),y
.964b		18		clc				clc
.964c		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.964e		85 37		sta $37				sta 	zTemp0+1
.9650		c8		iny				iny 								; LSB
.9651		b1 30		lda ($30),y			lda 	(codePtr),y
.9653		85 36		sta $36				sta 	zTemp0
.9655		c8		iny				iny 								; character after variable call.
.9656		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9657		a0 07		ldy #$07			ldy 	#7
.9659		91 36		sta ($36),y			sta 	(zTemp0),y
.965b		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.965d		a0 02		ldy #$02			ldy 	#2
.965f		91 36		sta ($36),y			sta 	(zTemp0),y
.9661		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9663						_PSCopy:
.9663		b5 30		lda $30,x			lda 	safePtr,x
.9665		c8		iny				iny
.9666		91 36		sta ($36),y			sta 	(zTemp0),y
.9668		e8		inx				inx
.9669		e0 04		cpx #$04			cpx 	#4
.966b		d0 f6		bne $9663			bne 	_PSCopy
.966d						_PSNext:
.966d		18		clc				clc
.966e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9670		65 30		adc $30				adc 	codePtr
.9672		85 30		sta $30				sta 	codePtr
.9674		90 02		bcc $9678			bcc 	_CREExit
.9676		e6 31		inc $31				inc 	codePtr+1 					; carry
.9678						_CREExit:
.9678		80 ba		bra $9634			bra 	_PSLoop
.967a						_PSExit:
.967a		60		rts				rts
.967b						_PSSyntax:
.967b		4c 4f b1	jmp $b14f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.967e						ScanForward:
.967e		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9680		86 37		stx $37				stx 	zTemp0+1
.9682		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9684						_ScanLoop:
.9684		b1 30		lda ($30),y			lda 	(codePtr),y
.9686		c8		iny				iny
.9687		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9689		d0 0e		bne $9699			bne 	_ScanGoNext
.968b		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.968d		f0 04		beq $9693			beq 	_ScanMatch
.968f		c5 37		cmp $37				cmp 	zTemp0+1
.9691		d0 06		bne $9699			bne 	_ScanGoNext
.9693						_ScanMatch:
.9693		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9695		d0 01		bne $9698			bne 	_ScanNotEndEOL
.9697		88		dey				dey
.9698						_ScanNotEndEOL:
.9698		60		rts				rts
.9699						_ScanGoNext:
.9699		20 9e 96	jsr $969e			jsr  	ScanForwardOne 				; allows for shifts and so on.
.969c		80 e6		bra $9684			bra 	_ScanLoop
.969e						ScanForwardOne:
.969e		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.96a0		90 3e		bcc $96e0			bcc 	_SFWExit
.96a2		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.96a4		90 18		bcc $96be			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.96a6		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.96a8		b0 2f		bcs $96d9			bcs 	_ScanSkipData
.96aa		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.96ac		90 32		bcc $96e0			bcc 	_SFWExit 					; if not, ordinary keywords.
.96ae		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.96b0		b0 2e		bcs $96e0			bcs 	_SFWExit
.96b2		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.96b4		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.96b6		b0 28		bcs $96e0			bcs 	_SFWExit
.96b8		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.96ba		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.96bc		80 22		bra $96e0			bra 	_SFWExit
.96be						_ScanSkipOne:
.96be		c8		iny				iny 								; consume the extra one.
.96bf		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.96c1		d0 1d		bne $96e0			bne 	_SFWExit
.96c3		18		clc				clc
.96c4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.96c6		65 30		adc $30				adc 	codePtr
.96c8		85 30		sta $30				sta 	codePtr
.96ca		90 02		bcc $96ce			bcc 	_CREExit
.96cc		e6 31		inc $31				inc 	codePtr+1 					; carry
.96ce						_CREExit:
.96ce		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.96d0		b2 30		lda ($30)			lda 	(codePtr)
.96d2		d0 0c		bne $96e0			bne 	_SFWExit 					; if not zero, more to scan
.96d4		a9 13		lda #$13		lda	#19
.96d6		4c 3c 97	jmp $973c		jmp	ErrorHandler
.96d9						_ScanSkipData:
.96d9		88		dey				dey 								; point at data token
.96da		c8		iny				iny 								; point to offset
.96db		98		tya				tya 								; A = offset position
.96dc		38		sec				sec 								; add size +1 hence SEC
.96dd		71 30		adc ($30),y			adc 	(codePtr),y
.96df		a8		tay				tay 								; make current position.
.96e0						_SFWExit:
.96e0		60		rts				rts
.96e1						ScanGetCurrentLineStep:
.96e1		64 38		stz $38				stz 	zTemp1
.96e3		a0 03		ldy #$03			ldy 	#3
.96e5						_SGCLSLoop:
.96e5		b1 30		lda ($30),y			lda 	(codePtr),y
.96e7		c8		iny				iny
.96e8		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.96ea		f0 05		beq $96f1			beq 	_SGCLSExit
.96ec		20 9e 96	jsr $969e			jsr 	ScanForwardOne
.96ef		80 f4		bra $96e5			bra 	_SGCLSLoop
.96f1						_SGCLSExit:
.96f1		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.96f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.96f4						Command_WHILE:
.96f4		5a		phy				phy 								; save position of the test
.96f5		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.96f7		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber
.96fa		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; check if zero
.96fd		f0 0e		beq $970d			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.96ff		98		tya				tya 								; position *after* test.
.9700		7a		ply				ply 								; restore position before test, at WHILE
.9701		88		dey				dey 								; so we execute the WHILE command again.
.9702		48		pha				pha 								; push after test on the stack
.9703		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9705		20 c9 b7	jsr $b7c9			jsr 	StackOpen
.9708		20 0e b8	jsr $b80e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.970b		7a		ply				ply 								; restore the position *after* the test
.970c		60		rts				rts
.970d						_WHExitLoop:
.970d		68		pla				pla 								; throw post loop position
.970e		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.9710		aa		tax				tax
.9711		20 7e 96	jsr $967e			jsr 	ScanForward
.9714		60		rts				rts
.9715						Command_WEND:
.9715		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9717		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9719		20 f6 b7	jsr $b7f6			jsr 	StackCheckFrame
.971c		20 1f b8	jsr $b81f			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.971f		20 e8 b7	jsr $b7e8			jsr 	StackClose		 			; erase the frame
.9722		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9723						CheckRightBracket:
.9723		b1 30		lda ($30),y			lda 	(codePtr),y
.9725		c8		iny				iny
.9726		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9728		d0 0f		bne $9739			bne 	CNAFail
.972a		60		rts				rts
.972b						CheckComma:
.972b		b1 30		lda ($30),y			lda 	(codePtr),y
.972d		c8		iny				iny
.972e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9730		d0 07		bne $9739			bne 	CNAFail
.9732		60		rts				rts
.9733						CheckNextA:
.9733		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9735		d0 02		bne $9739			bne 	CNAFail
.9737		c8		iny				iny 								; skip character
.9738		60		rts				rts 								; and exit
.9739						CNAFail:
.9739		4c 4f b1	jmp $b14f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.973c						ErrorHandler:
.973c		a8		tay				tay 								; find the error text
.973d		f0 49		beq $9788			beq 	_EHEnd
.973f		a2 00		ldx #$00			ldx 	#0
.9741		a9 68		lda #$68			lda 	#((ErrorText) & $FF)
.9743		85 36		sta $36				sta 	0+zTemp0
.9745		a9 b1		lda #$b1			lda 	#((ErrorText) >> 8)
.9747		85 37		sta $37				sta 	1+zTemp0
.9749						_EHFind:
.9749		88		dey				dey 								; keep looking through text
.974a		f0 0e		beq $975a			beq 	_EHFound
.974c						_EHFindZero:
.974c		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.974e		e6 36		inc $36				inc 	zTemp0
.9750		d0 02		bne $9754			bne 	_EHFNoCarry
.9752		e6 37		inc $37				inc 	zTemp0+1
.9754						_EHFNoCarry:
.9754		c9 00		cmp #$00			cmp 	#0
.9756		d0 f4		bne $974c			bne 	_EHFindZero
.9758		80 ef		bra $9749			bra 	_EHFind
.975a						_EHFound:
.975a		a5 36		lda $36				lda 	zTemp0 						; print message
.975c		a6 37		ldx $37				ldx 	zTemp0+1
.975e		20 95 97	jsr $9795			jsr 	PrintStringXA
.9761		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9763		b1 30		lda ($30),y			lda 	(codePtr),y
.9765		d0 05		bne $976c			bne 	_EHAtMsg
.9767		c8		iny				iny
.9768		b1 30		lda ($30),y			lda 	(codePtr),y
.976a		f0 17		beq $9783			beq 	_EHCREnd
.976c						_EHAtMsg:
.976c		a2 97		ldx #$97			ldx 	#_AtMsg >> 8 				; print " at "
.976e		a9 8b		lda #$8b			lda 	#_AtMsg & $FF
.9770		20 95 97	jsr $9795			jsr 	PrintStringXA
.9773		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9775		b1 30		lda ($30),y			lda 	(codePtr),y
.9777		48		pha				pha
.9778		c8		iny				iny
.9779		b1 30		lda ($30),y			lda 	(codePtr),y
.977b		aa		tax				tax
.977c		68		pla				pla
.977d		20 ab 9b	jsr $9bab			jsr 	ConvertInt16 				; convert XA to string
.9780		20 95 97	jsr $9795			jsr 	PrintStringXA 				; and print it.
.9783						_EHCREnd:
.9783		a9 0d		lda #$0d			lda 	#13 						; new line
.9785		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9788						_EHEnd:
.9788		4c b7 85	jmp $85b7			jmp 	WarmStart
>978b		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9793		20 00
.9795						PrintStringXA:
.9795		5a		phy				phy
.9796		86 37		stx $37				stx 	zTemp0+1
.9798		85 36		sta $36				sta 	zTemp0
.979a		a0 00		ldy #$00			ldy 	#0
.979c						_PSXALoop:
.979c		b1 36		lda ($36),y			lda 	(zTemp0),y
.979e		f0 06		beq $97a6			beq 	_PSXAExit
.97a0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.97a3		c8		iny				iny
.97a4		80 f6		bra $979c			bra 	_PSXALoop
.97a6						_PSXAExit:
.97a6		7a		ply				ply
.97a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.97a8						UnaryTrue:
.97a8		fa		plx				plx
.97a9						ReturnTrue:
.97a9		a9 01		lda #$01			lda 	#1  						; set to 1
.97ab		20 98 a6	jsr $a698			jsr 	NSMSetByte
.97ae		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.97b0		95 50		sta $50,x			sta 	NSStatus,x
.97b2		60		rts				rts
.97b3						UnaryFalse:
.97b3		fa		plx				plx
.97b4						ReturnFalse:
.97b4		4c 96 a6	jmp $a696			jmp 	NSMSetZero 					; set it all to zero
.97b7						BinaryCompareEqual:
.97b7		fa		plx				plx
.97b8		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97bb		c9 00		cmp #$00			cmp 	#0
.97bd		f0 ea		beq $97a9			beq 	ReturnTrue
.97bf		80 f3		bra $97b4			bra 	ReturnFalse
.97c1						BinaryCompareLess:
.97c1		fa		plx				plx
.97c2		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97c5		c9 ff		cmp #$ff			cmp 	#$FF
.97c7		f0 e0		beq $97a9			beq 	ReturnTrue
.97c9		80 e9		bra $97b4			bra 	ReturnFalse
.97cb						BinaryCompareGreater:
.97cb		fa		plx				plx
.97cc		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97cf		c9 01		cmp #$01			cmp 	#1
.97d1		f0 d6		beq $97a9			beq 	ReturnTrue
.97d3		80 df		bra $97b4			bra 	ReturnFalse
.97d5						BinaryCompareNotEqual:
.97d5		fa		plx				plx
.97d6		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97d9		c9 00		cmp #$00			cmp 	#0
.97db		d0 cc		bne $97a9			bne 	ReturnTrue
.97dd		80 d5		bra $97b4			bra 	ReturnFalse
.97df						BinaryCompareLessEqual:
.97df		fa		plx				plx
.97e0		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97e3		c9 01		cmp #$01			cmp 	#1
.97e5		d0 c2		bne $97a9			bne 	ReturnTrue
.97e7		80 cb		bra $97b4			bra 	ReturnFalse
.97e9						BinaryCompareGreaterEqual:
.97e9		fa		plx				plx
.97ea		20 f3 97	jsr $97f3			jsr 	CompareBaseCode
.97ed		c9 ff		cmp #$ff			cmp 	#$FF
.97ef		d0 b8		bne $97a9			bne 	ReturnTrue
.97f1		80 c1		bra $97b4			bra 	ReturnFalse
.97f3						CompareBaseCode:
.97f3		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; make both values if references.
.97f6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.97f8		15 51		ora $51,x			ora 	NSStatus+1,x
.97fa		29 10		and #$10			and 	#NSTString
.97fc		d0 37		bne $9835			bne 	_CBCString 					; if so do string code, which will check if both.
.97fe		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9800		15 79		ora $79,x			ora 	NSExponent+1,x
.9802		d0 34		bne $9838			bne 	_CBCFloat
.9804		b5 50		lda $50,x			lda 	NSStatus,x
.9806		15 51		ora $51,x			ora 	NSStatus+1,x
.9808		29 08		and #$08			and 	#NSTFloat
.980a		d0 2c		bne $9838			bne 	_CBCFloat
.980c		20 3b 98	jsr $983b			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.980f		e8		inx				inx
.9810		20 3b 98	jsr $983b			jsr 	CompareFixMinusZero
.9813		ca		dex				dex
.9814		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9816		55 51		eor $51,x			eor 	NSStatus+1,x
.9818		10 0a		bpl $9824			bpl 	_CDCSameSign
.981a		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.981c		30 14		bmi $9832			bmi 	_CBCLess 					; return $FF
.981e						_CBCGreater:
.981e		a9 01		lda #$01			lda 	#1
.9820		60		rts				rts
.9821						_CBCEqual:
.9821		a9 00		lda #$00			lda 	#0
.9823		60		rts				rts
.9824						_CDCSameSign:
.9824		20 50 9a	jsr $9a50			jsr 	SubTopTwoStack 				; unsigned subtract
.9827		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; or the mantissa together
.982a		f0 f5		beq $9821			beq 	_CBCEqual 					; -0 == 0
.982c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.982e		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9830		10 ec		bpl $981e			bpl 	_CBCGreater
.9832						_CBCLess:
.9832		a9 ff		lda #$ff			lda 	#$FF
.9834		60		rts				rts
.9835						_CBCString:
.9835		4c c1 99	jmp $99c1			jmp 	CompareStrings
.9838						_CBCFloat:
.9838		4c 0b 9d	jmp $9d0b			jmp 	CompareFloat
.983b						CompareFixMinusZero:
.983b		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero
.983e		d0 02		bne $9842			bne 	_CFXMZNotZero
.9840		74 50		stz $50,x			stz 	NSStatus,x
.9842						_CFXMZNotZero:
.9842		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9843						StringConcat:
.9843		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9845		35 51		and $51,x			and 	NSStatus+1,x
.9847		29 18		and #$18			and 	#NSBTypeMask
.9849		c9 10		cmp #$10			cmp 	#NSTString
.984b		d0 50		bne $989d			bne		_SCType
.984d		64 38		stz $38				stz 	zTemp1 						; counting total length
.984f		e8		inx				inx
.9850		20 6e 98	jsr $986e			jsr 	_SCSetupZ0 					; setup for second
.9853		20 77 98	jsr $9877			jsr 	_SCLengthZ0 				; length for second
.9856		ca		dex				dex
.9857		20 6e 98	jsr $986e			jsr 	_SCSetupZ0 					; setup for first
.985a		20 77 98	jsr $9877			jsr 	_SCLengthZ0 				; length for first
.985d		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.985f		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.9862		20 8e 98	jsr $988e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9865		e8		inx				inx
.9866		20 6e 98	jsr $986e			jsr 	_SCSetupZ0 					; copy second out
.9869		20 8e 98	jsr $988e			jsr 	_SCCopy
.986c		ca		dex				dex
.986d		60		rts				rts
.986e						_SCSetupZ0:
.986e		b5 58		lda $58,x			lda 	NSMantissa0,x
.9870		85 36		sta $36				sta 	zTemp0
.9872		b5 60		lda $60,x			lda 	NSMantissa1,x
.9874		85 37		sta $37				sta 	zTemp0+1
.9876		60		rts				rts
.9877						_SCLengthZ0:
.9877		5a		phy				phy
.9878		a0 00		ldy #$00			ldy 	#0
.987a						_SCLenLoop:
.987a		b1 36		lda ($36),y			lda 	(zTemp0),y
.987c		f0 0e		beq $988c			beq 	_SCLExit
.987e		c8		iny				iny
.987f		e6 38		inc $38				inc 	zTemp1
.9881		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9883		c9 fd		cmp #$fd			cmp 	#253
.9885		d0 f3		bne $987a			bne		_SCLenLoop
.9887		a9 09		lda #$09		lda	#9
.9889		4c 3c 97	jmp $973c		jmp	ErrorHandler
.988c						_SCLExit:
.988c		7a		ply				ply
.988d		60		rts				rts
.988e						_SCCopy:
.988e		5a		phy				phy
.988f		a0 00		ldy #$00			ldy 	#0
.9891						_SCCopyLoop:
.9891		b1 36		lda ($36),y			lda 	(zTemp0),y
.9893		f0 06		beq $989b			beq 	_SCCExit
.9895		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.9898		c8		iny				iny
.9899		80 f6		bra $9891			bra 	_SCCopyLoop
.989b						_SCCExit:
.989b		7a		ply				ply
.989c		60		rts				rts
.989d						_SCType:
.989d		4c 59 b1	jmp $b159			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.98a0						IntegerDivide:
.98a0		fa		plx				plx
.98a1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98a3		15 51		ora $51,x			ora 	NSStatus+1,x
.98a5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98a6		0a		asl a				asl 	a
.98a7		10 05		bpl $98ae			bpl 	_NotRef
.98a9		48		pha				pha
.98aa		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98ad		68		pla				pla
.98ae						_NotRef:
.98ae		0a		asl a				asl 	a
.98af		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98b1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98b3		15 79		ora $79,x			ora 	NSExponent+1,x
.98b5		f0 03		beq $98ba			beq 	_IntegerCode 				; if clear, then we have two integers
.98b7		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.98ba						_IntegerCode:
.98ba		20 d4 98	jsr $98d4			jsr 	CheckDivideZero 			; do div zero check
.98bd		20 06 99	jsr $9906			jsr 	Int32Divide 				; do the division
.98c0		20 b7 99	jsr $99b7			jsr 	CalculateSign 				; calculate result sign
.98c3						NSMCopyPlusTwoToZero:
.98c3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.98c5		95 58		sta $58,x			sta 	NSMantissa0,x
.98c7		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.98c9		95 60		sta $60,x			sta 	NSMantissa1,x
.98cb		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.98cd		95 68		sta $68,x			sta 	NSMantissa2,x
.98cf		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.98d1		95 70		sta $70,x			sta 	NSMantissa3,x
.98d3		60		rts				rts
.98d4						CheckDivideZero:
.98d4		e8		inx				inx
.98d5		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero
.98d8		f0 02		beq $98dc			beq 	_CDVError
.98da		ca		dex				dex
.98db		60		rts				rts
.98dc						_CDVError:
.98dc		a9 03		lda #$03		lda	#3
.98de		4c 3c 97	jmp $973c		jmp	ErrorHandler
.98e1						IntegerModulus:
.98e1		fa		plx				plx
.98e2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98e4		15 51		ora $51,x			ora 	NSStatus+1,x
.98e6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98e7		0a		asl a				asl 	a
.98e8		10 05		bpl $98ef			bpl 	_NotRef
.98ea		48		pha				pha
.98eb		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98ee		68		pla				pla
.98ef						_NotRef:
.98ef		0a		asl a				asl 	a
.98f0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98f2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98f4		15 79		ora $79,x			ora 	NSExponent+1,x
.98f6		f0 03		beq $98fb			beq 	_IntegerCode 				; if clear, then we have two integers
.98f8		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.98fb						_IntegerCode:
.98fb						IntegerModulusNoCheck:
.98fb		20 d4 98	jsr $98d4			jsr 	CheckDivideZero 			; do div zero check
.98fe		20 06 99	jsr $9906			jsr 	Int32Divide 				; do the division
.9901		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9903		56 50		lsr $50,x			lsr 	NSStatus,x
.9905		60		rts				rts
.9906						Int32Divide:
.9906		48		pha				pha 								; save AXY
.9907		5a		phy				phy
.9908		20 79 a6	jsr $a679			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.990b		20 92 a6	jsr $a692			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.990e		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9910						_I32DivideLoop:
.9910		e8		inx				inx
.9911		e8		inx				inx
.9912		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9915		ca		dex				dex
.9916		ca		dex				dex
.9917		20 a6 a6	jsr $a6a6			jsr 	NSMRotateLeft
.991a		20 45 99	jsr $9945			jsr 	DivideCheckSubtract 		; check if subtract possible
.991d		90 02		bcc $9921			bcc 	_I32DivideNoCarryIn
.991f		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9921						_I32DivideNoCarryIn:
.9921		88		dey				dey 								; loop round till division completed.
.9922		d0 ec		bne $9910			bne 	_I32DivideLoop
.9924		7a		ply				ply 								; restore AXY and exit
.9925		68		pla				pla
.9926		60		rts				rts
.9927						Int32ShiftDivide:
.9927		48		pha				pha 								; save AY
.9928		5a		phy				phy
.9929		e8		inx				inx 								; clear S[X+2]
.992a		e8		inx				inx
.992b		20 96 a6	jsr $a696			jsr 	NSMSetZero
.992e		ca		dex				dex
.992f		ca		dex				dex
.9930		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9932						_I32SDLoop:
.9932		20 45 99	jsr $9945			jsr 	DivideCheckSubtract 		; check if subtract possible
.9935		e8		inx				inx
.9936		e8		inx				inx
.9937		20 a6 a6	jsr $a6a6			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.993a		ca		dex				dex
.993b		ca		dex				dex
.993c		20 a6 a6	jsr $a6a6			jsr 	NSMRotateLeft
.993f		88		dey				dey 	 							; do 31 times
.9940		d0 f0		bne $9932			bne 	_I32SDLoop
.9942		7a		ply				ply 								; restore AY and exit
.9943		68		pla				pla
.9944		60		rts				rts
.9945						DivideCheckSubtract:
.9945		20 50 9a	jsr $9a50			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9948		b0 04		bcs $994e			bcs 	_DCSExit 					; if carry set, then could do, exit
.994a		20 36 9a	jsr $9a36			jsr 	AddTopTwoStack 				; add it back in
.994d		18		clc				clc 								; and return False
.994e						_DCSExit:
.994e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.994f						MulInteger:
.994f		fa		plx				plx
.9950		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9952		15 51		ora $51,x			ora 	NSStatus+1,x
.9954		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9955		0a		asl a				asl 	a
.9956		10 05		bpl $995d			bpl 	_NotRef
.9958		48		pha				pha
.9959		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.995c		68		pla				pla
.995d						_NotRef:
.995d		0a		asl a				asl 	a 							; put MSB of type into A:7
.995e		30 09		bmi $9969			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9960		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9962		15 79		ora $79,x			ora 	NSExponent+1,x
.9964		f0 06		beq $996c			beq 	_IntegerCode 				; if clear, then we have two integers
.9966		4c cd 9d	jmp $9dcd			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9969						_StringData:
.9969		4c 63 b1	jmp $b163			jmp 	NotDoneError							; at least one string - don't know both are strings.
.996c						_IntegerCode:
.996c		20 79 99	jsr $9979			jsr 	MultiplyShort
.996f		c9 00		cmp #$00			cmp 	#0
.9971		f0 05		beq $9978			beq 	_MIExit
.9973		a9 04		lda #$04		lda	#4
.9975		4c 3c 97	jmp $973c		jmp	ErrorHandler
.9978						_MIExit:
.9978		60		rts				rts
.9979						MultiplyShort:
.9979		5a		phy				phy 								; save Y
.997a		20 79 a6	jsr $a679			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.997d		20 92 a6	jsr $a692			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9980		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9982						_I32MLoop:
.9982		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9984		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9986		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9988		15 72		ora $72,x			ora 	NSMantissa3+2,x
.998a		f0 25		beq $99b1			beq 	_I32MExit 					; exit if zero
.998c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.998e		29 01		and #$01			and 	#1
.9990		f0 0d		beq $999f			beq 	_I32MNoAdd
.9992		20 36 9a	jsr $9a36			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9995		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9997		10 06		bpl $999f			bpl 	_I32MNoAdd
.9999						_I32ShiftRight:
.9999		20 af a6	jsr $a6af			jsr 	NSMShiftRight 				; shift S[X] right
.999c		c8		iny				iny 								; increment shift count
.999d		80 09		bra $99a8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.999f						_I32MNoAdd:
.999f		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.99a1		70 f6		bvs $9999			bvs 	_I32ShiftRight 				; instead.
.99a3		e8		inx				inx
.99a4		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.99a7		ca		dex				dex
.99a8						_I32MShiftUpper:
.99a8		e8		inx				inx 								; shift S[X+2] right
.99a9		e8		inx				inx
.99aa		20 af a6	jsr $a6af			jsr 	NSMShiftRight
.99ad		ca		dex				dex
.99ae		ca		dex				dex
.99af		80 d1		bra $9982			bra 	_I32MLoop 					; try again.
.99b1						_I32MExit:
.99b1		20 b7 99	jsr $99b7			jsr 	CalculateSign
.99b4		98		tya				tya 								; shift in A
.99b5		7a		ply				ply 								; restore Y and exit
.99b6		60		rts				rts
.99b7						CalculateSign:
.99b7		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.99b9		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.99bb		55 51		eor $51,x			eor 	NSStatus+1,x
.99bd		0a		asl a				asl 	a 							; shift bit 7 into carry
.99be		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.99c0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.99c1						CompareStrings:
.99c1		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.99c3		35 51		and $51,x			and 	NSStatus+1,x
.99c5		29 10		and #$10			and 	#NSBIsString
.99c7		f0 28		beq $99f1			beq 	_CSTypeError
.99c9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.99cb		85 36		sta $36				sta 	zTemp0
.99cd		b5 60		lda $60,x			lda 	NSMantissa1,x
.99cf		85 37		sta $37				sta 	zTemp0+1
.99d1		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.99d3		85 38		sta $38				sta 	zTemp1
.99d5		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.99d7		85 39		sta $39				sta 	zTemp1+1
.99d9		5a		phy				phy 								; save Y so we can access strings
.99da		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.99dc						_CSLoop:
.99dc		c8		iny				iny
.99dd		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.99df		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.99e1		d0 06		bne $99e9			bne 	_CSDifferent
.99e3		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.99e5		d0 f5		bne $99dc			bne 	_CSLoop 					; still comparing
.99e7						_CSExit:
.99e7		7a		ply				ply 								; reached end, return zero in A from EOS
.99e8		60		rts				rts
.99e9						_CSDifferent:
.99e9		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.99eb		90 fa		bcc $99e7			bcc		_CSExit
.99ed		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.99ef		80 f6		bra $99e7			bra 	_CSExit
.99f1						_CSTypeError:
.99f1		4c 59 b1	jmp $b159			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.99f4						ShiftLeft:
.99f4		38		sec				sec 								; common code, carry determines which way.
.99f5		80 01		bra $99f8			bra 	ShiftMain
.99f7						ShiftRight:
.99f7		18		clc				clc
.99f8						ShiftMain:
.99f8		fa		plx				plx 								; restore X
.99f9		08		php				php 								; save direction
.99fa		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99fc		15 51		ora $51,x			ora 	NSStatus+1,x
.99fe		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99ff		0a		asl a				asl 	a
.9a00		10 05		bpl $9a07			bpl 	_NotRef
.9a02		48		pha				pha
.9a03		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a06		68		pla				pla
.9a07						_NotRef:
.9a07		0a		asl a				asl 	a
.9a08		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a0a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a0c		15 79		ora $79,x			ora 	NSExponent+1,x
.9a0e		f0 03		beq $9a13			beq 	_IntegerCode 				; if clear, then we have two integers
.9a10		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9a13						_IntegerCode:
.9a13		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a15		29 e0		and #$e0			and 	#$E0
.9a17		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9a19		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9a1b		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a1d		d0 12		bne $9a31			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a1f						_SMLoop:
.9a1f		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9a21		30 11		bmi $9a34			bmi 	_SMExit 					; exit if done.
.9a23		28		plp				plp 								; restore direction setting
.9a24		08		php				php
.9a25		90 05		bcc $9a2c			bcc 	_SMRight
.9a27		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; shift left if CS
.9a2a		80 f3		bra $9a1f			bra 	_SMLoop
.9a2c						_SMRight:
.9a2c		20 af a6	jsr $a6af			jsr 	NSMShiftRight 				; shift right if CC
.9a2f		80 ee		bra $9a1f			bra 	_SMLoop
.9a31						_SMExit0:
.9a31		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; return zero.
.9a34						_SMExit:
.9a34		28		plp				plp 								; throw direction
.9a35		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9a36						AddTopTwoStack:
.9a36		18		clc				clc
.9a37		b5 58		lda $58,x			lda		NSMantissa0,x
.9a39		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9a3b		95 58		sta $58,x			sta 	NSMantissa0,x
.9a3d		b5 60		lda $60,x			lda		NSMantissa1,x
.9a3f		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9a41		95 60		sta $60,x			sta 	NSMantissa1,x
.9a43		b5 68		lda $68,x			lda		NSMantissa2,x
.9a45		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9a47		95 68		sta $68,x			sta 	NSMantissa2,x
.9a49		b5 70		lda $70,x			lda		NSMantissa3,x
.9a4b		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9a4d		95 70		sta $70,x			sta 	NSMantissa3,x
.9a4f		60		rts				rts
.9a50						SubTopTwoStack:
.9a50		38		sec				sec
.9a51		b5 58		lda $58,x			lda		NSMantissa0,x
.9a53		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9a55		95 58		sta $58,x			sta 	NSMantissa0,x
.9a57		b5 60		lda $60,x			lda		NSMantissa1,x
.9a59		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9a5b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a5d		b5 68		lda $68,x			lda		NSMantissa2,x
.9a5f		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9a61		95 68		sta $68,x			sta 	NSMantissa2,x
.9a63		b5 70		lda $70,x			lda		NSMantissa3,x
.9a65		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9a67		95 70		sta $70,x			sta 	NSMantissa3,x
.9a69		60		rts				rts
.9a6a						AddInteger:
.9a6a		fa		plx				plx
.9a6b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a6d		15 51		ora $51,x			ora 	NSStatus+1,x
.9a6f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a70		0a		asl a				asl 	a
.9a71		10 05		bpl $9a78			bpl 	_NotRef
.9a73		48		pha				pha
.9a74		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a77		68		pla				pla
.9a78						_NotRef:
.9a78		0a		asl a				asl 	a 							; put MSB of type into A:7
.9a79		30 09		bmi $9a84			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a7b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a7d		15 79		ora $79,x			ora 	NSExponent+1,x
.9a7f		f0 06		beq $9a87			beq 	_IntegerCode 				; if clear, then we have two integers
.9a81		4c 7d 9c	jmp $9c7d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9a84						_StringData:
.9a84		4c 43 98	jmp $9843			jmp 	StringConcat							; at least one string - don't know both are strings.
.9a87						_IntegerCode:
.9a87						AddCode:
.9a87		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9a89		55 51		eor $51,x			eor 	NSStatus+1,x
.9a8b		10 a9		bpl $9a36			bpl 	AddTopTwoStack
.9a8d		20 50 9a	jsr $9a50			jsr 	SubTopTwoStack 				; do a physical subtraction
.9a90		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9a92		10 07		bpl $9a9b			bpl 	_AddExit
.9a94		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9a96		95 50		sta $50,x			sta 	NSStatus,x
.9a98		20 5f a6	jsr $a65f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9a9b						_AddExit:
.9a9b		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; check for -0
.9a9e		d0 02		bne $9aa2			bne 	_AddNonZero
.9aa0		74 50		stz $50,x			stz 	NSStatus,x
.9aa2						_AddNonZero:
.9aa2		60		rts				rts
.9aa3						SubInteger:
.9aa3		fa		plx				plx
.9aa4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9aa6		15 51		ora $51,x			ora 	NSStatus+1,x
.9aa8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aa9		0a		asl a				asl 	a
.9aaa		10 05		bpl $9ab1			bpl 	_NotRef
.9aac		48		pha				pha
.9aad		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ab0		68		pla				pla
.9ab1						_NotRef:
.9ab1		0a		asl a				asl 	a 							; put MSB of type into A:7
.9ab2		30 09		bmi $9abd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ab4		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ab6		15 79		ora $79,x			ora 	NSExponent+1,x
.9ab8		f0 06		beq $9ac0			beq 	_IntegerCode 				; if clear, then we have two integers
.9aba		4c 82 9c	jmp $9c82			jmp 	FloatingPointSub 							; otherwise at least one float.
.9abd						_StringData:
.9abd		4c 63 b1	jmp $b163			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9ac0						_IntegerCode:
.9ac0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9ac2		49 80		eor #$80			eor 	#$80
.9ac4		95 51		sta $51,x			sta 	NSStatus+1,x
.9ac6		80 bf		bra $9a87			bra 	AddCode 					; and do the same code as add.
.9ac8						AndInteger:
.9ac8		fa		plx				plx
.9ac9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9acb		15 51		ora $51,x			ora 	NSStatus+1,x
.9acd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ace		0a		asl a				asl 	a
.9acf		10 05		bpl $9ad6			bpl 	_NotRef
.9ad1		48		pha				pha
.9ad2		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ad5		68		pla				pla
.9ad6						_NotRef:
.9ad6		0a		asl a				asl 	a
.9ad7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ad9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9adb		15 79		ora $79,x			ora 	NSExponent+1,x
.9add		f0 03		beq $9ae2			beq 	_IntegerCode 				; if clear, then we have two integers
.9adf		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9ae2						_IntegerCode:
.9ae2		b5 58		lda $58,x			lda		NSMantissa0,x
.9ae4		35 59		and $59,x			and 		NSMantissa0+1,x
.9ae6		95 58		sta $58,x			sta 	NSMantissa0,x
.9ae8		b5 60		lda $60,x			lda		NSMantissa1,x
.9aea		35 61		and $61,x			and 		NSMantissa1+1,x
.9aec		95 60		sta $60,x			sta 	NSMantissa1,x
.9aee		b5 68		lda $68,x			lda		NSMantissa2,x
.9af0		35 69		and $69,x			and 		NSMantissa2+1,x
.9af2		95 68		sta $68,x			sta 	NSMantissa2,x
.9af4		b5 70		lda $70,x			lda		NSMantissa3,x
.9af6		35 71		and $71,x			and 		NSMantissa3+1,x
.9af8		95 70		sta $70,x			sta 	NSMantissa3,x
.9afa		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9afc		60		rts				rts
.9afd						OraInteger:
.9afd		fa		plx				plx
.9afe		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b00		15 51		ora $51,x			ora 	NSStatus+1,x
.9b02		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b03		0a		asl a				asl 	a
.9b04		10 05		bpl $9b0b			bpl 	_NotRef
.9b06		48		pha				pha
.9b07		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b0a		68		pla				pla
.9b0b						_NotRef:
.9b0b		0a		asl a				asl 	a
.9b0c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b0e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b10		15 79		ora $79,x			ora 	NSExponent+1,x
.9b12		f0 03		beq $9b17			beq 	_IntegerCode 				; if clear, then we have two integers
.9b14		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9b17						_IntegerCode:
.9b17		b5 58		lda $58,x			lda		NSMantissa0,x
.9b19		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9b1b		95 58		sta $58,x			sta 	NSMantissa0,x
.9b1d		b5 60		lda $60,x			lda		NSMantissa1,x
.9b1f		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9b21		95 60		sta $60,x			sta 	NSMantissa1,x
.9b23		b5 68		lda $68,x			lda		NSMantissa2,x
.9b25		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9b27		95 68		sta $68,x			sta 	NSMantissa2,x
.9b29		b5 70		lda $70,x			lda		NSMantissa3,x
.9b2b		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9b2d		95 70		sta $70,x			sta 	NSMantissa3,x
.9b2f		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b31		60		rts				rts
.9b32						EorInteger:
.9b32		fa		plx				plx
.9b33		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b35		15 51		ora $51,x			ora 	NSStatus+1,x
.9b37		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b38		0a		asl a				asl 	a
.9b39		10 05		bpl $9b40			bpl 	_NotRef
.9b3b		48		pha				pha
.9b3c		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b3f		68		pla				pla
.9b40						_NotRef:
.9b40		0a		asl a				asl 	a
.9b41		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b43		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b45		15 79		ora $79,x			ora 	NSExponent+1,x
.9b47		f0 03		beq $9b4c			beq 	_IntegerCode 				; if clear, then we have two integers
.9b49		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9b4c						_IntegerCode:
.9b4c		b5 58		lda $58,x			lda		NSMantissa0,x
.9b4e		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9b50		95 58		sta $58,x			sta 	NSMantissa0,x
.9b52		b5 60		lda $60,x			lda		NSMantissa1,x
.9b54		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9b56		95 60		sta $60,x			sta 	NSMantissa1,x
.9b58		b5 68		lda $68,x			lda		NSMantissa2,x
.9b5a		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9b5c		95 68		sta $68,x			sta 	NSMantissa2,x
.9b5e		b5 70		lda $70,x			lda		NSMantissa3,x
.9b60		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9b62		95 70		sta $70,x			sta 	NSMantissa3,x
.9b64		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b66		60		rts				rts
.9b67						WordIndirect:
.9b67		fa		plx				plx
.9b68		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b6a		15 51		ora $51,x			ora 	NSStatus+1,x
.9b6c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b6d		0a		asl a				asl 	a
.9b6e		10 05		bpl $9b75			bpl 	_NotRef
.9b70		48		pha				pha
.9b71		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b74		68		pla				pla
.9b75						_NotRef:
.9b75		0a		asl a				asl 	a
.9b76		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b78		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b7a		15 79		ora $79,x			ora 	NSExponent+1,x
.9b7c		f0 03		beq $9b81			beq 	_IntegerCode 				; if clear, then we have two integers
.9b7e		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9b81						_IntegerCode:
.9b81		20 87 9a	jsr $9a87			jsr 	AddCode 					; add the two values
.9b84		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9b86		95 50		sta $50,x			sta 	NSStatus,x
.9b88		60		rts				rts
.9b89						ByteIndirect:
.9b89		fa		plx				plx
.9b8a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b8c		15 51		ora $51,x			ora 	NSStatus+1,x
.9b8e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b8f		0a		asl a				asl 	a
.9b90		10 05		bpl $9b97			bpl 	_NotRef
.9b92		48		pha				pha
.9b93		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b96		68		pla				pla
.9b97						_NotRef:
.9b97		0a		asl a				asl 	a
.9b98		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b9a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9c		15 79		ora $79,x			ora 	NSExponent+1,x
.9b9e		f0 03		beq $9ba3			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba0		4c 59 b1	jmp $b159			jmp 	TypeError 					; anything else, type mismatch.
.9ba3						_IntegerCode:
.9ba3		20 87 9a	jsr $9a87			jsr 	AddCode 					; add the two values
.9ba6		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ba8		95 50		sta $50,x			sta 	NSStatus,x
.9baa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9bab						ConvertInt16:
.9bab		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9bad		86 60		stx $60				stx 	NSMantissa1
.9baf		64 68		stz $68				stz 	NSMantissa2
.9bb1		64 70		stz $70				stz 	NSMantissa3
.9bb3		64 50		stz $50				stz 	NSStatus 					; positive integer
.9bb5		a2 00		ldx #$00			ldx 	#0 							; stack level
.9bb7		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9bb9		80 00		bra $9bbb			bra 	ConvertInt32
.9bbb						ConvertInt32:
.9bbb		5a		phy				phy
.9bbc		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9bbe		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9bc0		10 08		bpl $9bca			bpl 	_CI32NotNeg
.9bc2		48		pha				pha
.9bc3		a9 2d		lda #$2d			lda 	#'-'
.9bc5		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9bc8		c8		iny				iny
.9bc9		68		pla				pla
.9bca						_CI32NotNeg:
.9bca		20 d8 9b	jsr $9bd8			jsr 	_CI32DivideConvert 			; recursive conversion
.9bcd		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9bcf		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9bd2		7a		ply				ply
.9bd3		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9bd5		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9bd7		60		rts				rts
.9bd8						_CI32DivideConvert:
.9bd8		e8		inx				inx 								; write to next slot up
.9bd9		20 98 a6	jsr $a698			jsr 	NSMSetByte 		 			; write the base out.
.9bdc		ca		dex				dex
.9bdd		20 06 99	jsr $9906			jsr 	Int32Divide 				; divide
.9be0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9be2		48		pha				pha
.9be3		20 c3 98	jsr $98c3			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9be6		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; is it zero ?
.9be9		f0 05		beq $9bf0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9beb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9bed		20 d8 9b	jsr $9bd8			jsr 	_CI32DivideConvert 			; and recusrively call.
.9bf0						_CI32NoRecurse:
.9bf0		68		pla				pla 								; remainder
.9bf1		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9bf3		90 02		bcc $9bf7			bcc 	_CI32NotHex
.9bf5		69 26		adc #$26			adc 	#6+32
.9bf7						_CI32NotHex:
.9bf7		69 30		adc #$30			adc 	#48
.9bf9		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9bfc		c8		iny				iny
.9bfd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9bfe						PrecedenceLevel:
>9bfe		04					.byte	 4	; $00 <<
>9bff		02					.byte	 2	; $01 <=
>9c00		02					.byte	 2	; $02 <>
>9c01		00					.byte	 0	; $03 !!3
>9c02		00					.byte	 0	; $04 ><
>9c03		02					.byte	 2	; $05 >=
>9c04		04					.byte	 4	; $06 >>
>9c05		00					.byte	 0	; $07 !!7
>9c06		00					.byte	 0	; $08 !!8
>9c07		00					.byte	 0	; $09 !!9
>9c08		00					.byte	 0	; $0a !!10
>9c09		00					.byte	 0	; $0b !!11
>9c0a		00					.byte	 0	; $0c !!12
>9c0b		00					.byte	 0	; $0d !!13
>9c0c		00					.byte	 0	; $0e !!14
>9c0d		00					.byte	 0	; $0f !!15
>9c0e		00					.byte	 0	; $10 @
>9c0f		00					.byte	 0	; $11 !!17
>9c10		00					.byte	 0	; $12 !!18
>9c11		00					.byte	 0	; $13 [
>9c12		04					.byte	 4	; $14 \
>9c13		00					.byte	 0	; $15 ]
>9c14		01					.byte	 1	; $16 ^
>9c15		00					.byte	 0	; $17 _
>9c16		00					.byte	 0	; $18 `
>9c17		00					.byte	 0	; $19 !!25
>9c18		00					.byte	 0	; $1a !!26
>9c19		00					.byte	 0	; $1b {
>9c1a		01					.byte	 1	; $1c |
>9c1b		00					.byte	 0	; $1d }
>9c1c		00					.byte	 0	; $1e ~
>9c1d		00					.byte	 0	; $1f <7F>
>9c1e		00					.byte	 0	; $20
>9c1f		05					.byte	 5	; $21 !
>9c20		00					.byte	 0	; $22 "
>9c21		00					.byte	 0	; $23 #
>9c22		05					.byte	 5	; $24 $
>9c23		04					.byte	 4	; $25 %
>9c24		01					.byte	 1	; $26 &
>9c25		00					.byte	 0	; $27 '
>9c26		00					.byte	 0	; $28 (
>9c27		00					.byte	 0	; $29 )
>9c28		04					.byte	 4	; $2a *
>9c29		03					.byte	 3	; $2b +
>9c2a		00					.byte	 0	; $2c ,
>9c2b		03					.byte	 3	; $2d -
>9c2c		00					.byte	 0	; $2e .
>9c2d		04					.byte	 4	; $2f /
>9c2e		00					.byte	 0	; $30 0
>9c2f		00					.byte	 0	; $31 1
>9c30		00					.byte	 0	; $32 2
>9c31		00					.byte	 0	; $33 3
>9c32		00					.byte	 0	; $34 4
>9c33		00					.byte	 0	; $35 5
>9c34		00					.byte	 0	; $36 6
>9c35		00					.byte	 0	; $37 7
>9c36		00					.byte	 0	; $38 8
>9c37		00					.byte	 0	; $39 9
>9c38		00					.byte	 0	; $3a :
>9c39		00					.byte	 0	; $3b ;
>9c3a		02					.byte	 2	; $3c <
>9c3b		02					.byte	 2	; $3d =
>9c3c		02					.byte	 2	; $3e >
>9c3d		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9c3e						EvaluateExpressionAt0:
.9c3e		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9c40						EvaluateExpression:
.9c40		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9c42						EvaluateExpressionAtPrecedence:
.9c42		48		pha				pha 								; save precedence level
.9c43		20 8a a0	jsr $a08a			jsr 	EvaluateTerm 				; evaluate term into level X.
.9c46		68		pla				pla 								; restore precedence level.
.9c47						_EXPRLoop:
.9c47		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9c49		b1 30		lda ($30),y			lda 	(codePtr),y
.9c4b		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9c4d		b0 25		bcs $9c74			bcs 	_EXPRExit
.9c4f		da		phx				phx 								; read the operator precedence
.9c50		aa		tax				tax
.9c51		bd fe 9b	lda $9bfe,x			lda 	PrecedenceLevel,x
.9c54		fa		plx				plx
.9c55		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9c57		f0 1b		beq $9c74			beq 	_EXPRExit
.9c59		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9c5b		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9c5d		c5 37		cmp $37				cmp 	zTemp0+1
.9c5f		b0 13		bcs $9c74			bcs		_EXPRExit 					; if current >= operator exit
.9c61		48		pha				pha 								; save current precedence.
.9c62		b1 30		lda ($30),y			lda 	(codePtr),y
.9c64		c8		iny				iny
.9c65		48		pha				pha
.9c66		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9c68		e8		inx				inx 								; work out the right hand side.
.9c69		20 42 9c	jsr $9c42			jsr 	EvaluateExpressionAtPrecedence
.9c6c		ca		dex				dex
.9c6d		68		pla				pla 								; get operator, call the code.
.9c6e		20 77 9c	jsr $9c77			jsr 	_EXPRCaller
.9c71		68		pla				pla 								; restore precedence level
.9c72		80 d3		bra $9c47			bra 	_EXPRLoop 					; and go round.
.9c74						_EXPRExit:
.9c74		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9c76		60		rts				rts
.9c77						_EXPRCaller:
.9c77		da		phx				phx 								; save on stack, first thing is to restore it
.9c78		0a		asl a				asl 	a 							; double so can use vectors into X
.9c79		aa		tax				tax
.9c7a		7c 90 93	jmp ($9390,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9c7d						FloatingPointAdd:
.9c7d		20 f3 9d	jsr $9df3			jsr 	FloatPrepare 				; prepare for floats
.9c80		80 09		bra $9c8b			bra 	FloatAdd
.9c82						FloatingPointSub:
.9c82		20 f3 9d	jsr $9df3			jsr 	FloatPrepare 				; prepare for floats
.9c85						FloatSubtract:
.9c85		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9c87		49 80		eor #$80			eor 	#$80
.9c89		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9c8b						FloatAdd:
.9c8b		48		pha				pha
.9c8c		5a		phy				phy
.9c8d		20 02 9e	jsr $9e02			jsr 	NSNormalise 				; normalise S[X]
.9c90		f0 51		beq $9ce3			beq 	_FAReturn1
.9c92		e8		inx				inx 								; normalise S[X+1]
.9c93		20 02 9e	jsr $9e02			jsr 	NSNormalise
.9c96		ca		dex				dex
.9c97		c9 00		cmp #$00			cmp 	#0
.9c99		f0 60		beq $9cfb			beq 	_FAExit 					; if so, just return A
.9c9b		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9c9d		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9c9f		f0 18		beq $9cb9			beq 	_FAExponentsEqual
.9ca1		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9ca3		a8		tay				tay
.9ca4		38		sec				sec 								; do a signed comparison of the exponents.
.9ca5		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9ca7		50 02		bvc $9cab			bvc 	_FANoSignedChange
.9ca9		49 80		eor #$80			eor 	#$80
.9cab						_FANoSignedChange:
.9cab		29 80		and #$80			and 	#$80
.9cad		10 02		bpl $9cb1			bpl 	_FAHaveMax
.9caf		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9cb1						_FAHaveMax:
.9cb1		20 fe 9c	jsr $9cfe			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9cb4		e8		inx				inx
.9cb5		20 fe 9c	jsr $9cfe			jsr 	_FAShiftToExponent
.9cb8		ca		dex				dex
.9cb9						_FAExponentsEqual:
.9cb9		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9cbb		55 51		eor $51,x			eor 	NSStatus+1,x
.9cbd		30 0e		bmi $9ccd			bmi 	_FADifferentSigns
.9cbf		20 36 9a	jsr $9a36			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9cc2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9cc4		10 35		bpl $9cfb			bpl 	_FAExit 					; if no, we are done.
.9cc6		20 af a6	jsr $a6af			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9cc9		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9ccb		80 2e		bra $9cfb			bra 	_FAExit
.9ccd						_FADifferentSigns:
.9ccd		20 50 9a	jsr $9a50			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9cd0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9cd2		10 06		bpl $9cda			bpl 	_FACheckZero 				; if no, check for -0
.9cd4		20 58 a6	jsr $a658			jsr 	NSMNegate 					; netate result
.9cd7		20 5f a6	jsr $a65f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9cda						_FACheckZero:
.9cda		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero	 				; check for -0
.9cdd		d0 1c		bne $9cfb			bne 	_FAExit
.9cdf		74 50		stz $50,x			stz 	NSStatus,x
.9ce1		80 18		bra $9cfb			bra 	_FAExit
.9ce3						_FAReturn1:
.9ce3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9ce5		95 58		sta $58,x			sta 	NSMantissa0,x
.9ce7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ce9		95 60		sta $60,x			sta 	NSMantissa1,x
.9ceb		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9ced		95 68		sta $68,x			sta 	NSMantissa2,x
.9cef		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9cf1		95 70		sta $70,x			sta 	NSMantissa3,x
.9cf3		b5 79		lda $79,x			lda 	NSExponent+1,x
.9cf5		95 78		sta $78,x			sta 	NSExponent,x
.9cf7		b5 51		lda $51,x			lda 	NSStatus+1,x
.9cf9		95 50		sta $50,x			sta 	NSStatus,x
.9cfb						_FAExit:
.9cfb		7a		ply				ply
.9cfc		68		pla				pla
.9cfd		60		rts				rts
.9cfe						_FAShiftToExponent:
.9cfe						_FAShiftToExponent2:
.9cfe		98		tya				tya 								; compare Y to exponent
.9cff		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d01		f0 07		beq $9d0a			beq 	_FASEExit 					; exit if so.
.9d03		20 af a6	jsr $a6af			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d06		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d08		80 f4		bra $9cfe			bra 	_FAShiftToExponent2
.9d0a						_FASEExit:
.9d0a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d0b						CompareFloat:
.9d0b		20 85 9c	jsr $9c85			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d0e		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d10		29 f8		and #$f8			and 	#$F8
.9d12		15 68		ora $68,x			ora 	NSMantissa2,x
.9d14		15 70		ora $70,x			ora 	NSMantissa3,x
.9d16		f0 08		beq $9d20			beq 	_FCExit 					; zero, so approximately identical
.9d18		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d1a		34 50		bit $50,x			bit 	NSStatus,x
.9d1c		10 02		bpl $9d20			bpl 	_FCExit
.9d1e						_FCNegative:
.9d1e		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9d20						_FCExit:
.9d20		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9d21						FDivideCommand:
.9d21		fa		plx				plx	 								; restore stack position
.9d22		20 f3 9d	jsr $9df3			jsr 	FloatPrepare 				; prepare for floats
.9d25						FloatDivide:
.9d25		48		pha				pha
.9d26		e8		inx				inx
.9d27		20 02 9e	jsr $9e02			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d2a		ca		dex				dex
.9d2b		c9 00		cmp #$00			cmp 	#0
.9d2d		f0 1d		beq $9d4c			beq 	_FDZero
.9d2f		20 02 9e	jsr $9e02			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9d32		f0 16		beq $9d4a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9d34		20 27 99	jsr $9927			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9d37		20 c3 98	jsr $98c3			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9d3a		20 02 9e	jsr $9e02			jsr		NSNormalise 				; renormalise
.9d3d		20 b7 99	jsr $99b7			jsr 	CalculateSign 				; calculate result sign
.9d40		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9d42		38		sec				sec
.9d43		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d45		38		sec				sec
.9d46		e9 1e		sbc #$1e			sbc 	#30
.9d48		95 78		sta $78,x			sta 	NSExponent,x
.9d4a						_FDExit:
.9d4a		68		pla				pla
.9d4b		60		rts				rts
.9d4c						_FDZero:
.9d4c		a9 03		lda #$03		lda	#3
.9d4e		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9d51						FloatFractionalPart:
.9d51		5a		phy				phy
.9d52		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9d54		29 7f		and #$7f			and 	#$7F
.9d56		95 50		sta $50,x			sta 	NSStatus,x
.9d58		20 02 9e	jsr $9e02			jsr 	NSNormalise
.9d5b		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9d5d		38		sec				sec
.9d5e		e9 e0		sbc #$e0			sbc 	#$E0
.9d60		90 29		bcc $9d8b			bcc 	_FFPExit 					; already fractional
.9d62		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9d64		b0 22		bcs $9d88			bcs 	_FFPZero
.9d66		a8		tay				tay 								; put count to do in Y
.9d67		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9d69		20 8d 9d	jsr $9d8d			jsr 	_FFPPartial
.9d6c		95 70		sta $70,x			sta 	NSMantissa3,x
.9d6e		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d70		20 8d 9d	jsr $9d8d			jsr 	_FFPPartial
.9d73		95 68		sta $68,x			sta 	NSMantissa2,x
.9d75		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d77		20 8d 9d	jsr $9d8d			jsr 	_FFPPartial
.9d7a		95 60		sta $60,x			sta 	NSMantissa1,x
.9d7c		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d7e		20 8d 9d	jsr $9d8d			jsr 	_FFPPartial
.9d81		95 58		sta $58,x			sta 	NSMantissa0,x
.9d83		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; zeroed check.
.9d86		d0 03		bne $9d8b			bne 	_FFPExit
.9d88						_FFPZero:
.9d88		20 96 a6	jsr $a696			jsr 	NSMSetZero
.9d8b						_FFPExit:
.9d8b		7a		ply				ply
.9d8c		60		rts				rts
.9d8d						_FFPPartial:
.9d8d		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9d8f		f0 17		beq $9da8			beq 	_FFFPPExit
.9d91		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9d93		b0 0c		bcs $9da1			bcs 	_FFFPPWholeByte
.9d95		5a		phy				phy
.9d96						_FFFPPLeft:
.9d96		0a		asl a				asl 	a
.9d97		88		dey				dey
.9d98		d0 fc		bne $9d96			bne 	_FFFPPLeft
.9d9a		7a		ply				ply
.9d9b						_FFFPPRight:
.9d9b		4a		lsr a				lsr 	a
.9d9c		88		dey				dey
.9d9d		d0 fc		bne $9d9b			bne 	_FFFPPRight
.9d9f		80 07		bra $9da8			bra 	_FFFPPExit
.9da1						_FFFPPWholeByte:
.9da1		98		tya				tya 								; subtract 8 from count
.9da2		38		sec				sec
.9da3		e9 08		sbc #$08			sbc 	#8
.9da5		a8		tay				tay
.9da6		a9 00		lda #$00			lda 	#0 							; and clear all
.9da8						_FFFPPExit:
.9da8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9da9						FloatIntegerPart:
.9da9		48		pha				pha
.9daa		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9dac		f0 1d		beq $9dcb			beq 	_FIPExit 					; if so do nothing
.9dae		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; is it zero ?
.9db1		f0 15		beq $9dc8			beq 	_FIPZero 					; if so return zero.
.9db3		20 02 9e	jsr $9e02			jsr 	NSNormalise 				; normalise
.9db6		f0 10		beq $9dc8			beq 	_FIPZero 					; normalised to zero, exit zero
.9db8						_FIPShift:
.9db8		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9dba		10 07		bpl $9dc3			bpl 	_FIPCheckZero
.9dbc		20 af a6	jsr $a6af			jsr 	NSMShiftRight 				; shift mantissa right
.9dbf		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9dc1		80 f5		bra $9db8			bra 	_FIPShift
.9dc3						_FIPCheckZero:
.9dc3		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; avoid -0 problem
.9dc6		d0 03		bne $9dcb			bne 	_FIPExit 					; set to zero if mantissa zero.
.9dc8						_FIPZero:
.9dc8		20 96 a6	jsr $a696			jsr 	NSMSetZero
.9dcb						_FIPExit:
.9dcb		68		pla				pla
.9dcc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9dcd						FloatingPointMultiply:
.9dcd		20 f3 9d	jsr $9df3			jsr 	FloatPrepare 				; prepare for floats
.9dd0						FloatMultiply:
.9dd0		48		pha				pha
.9dd1		20 02 9e	jsr $9e02			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9dd4		f0 18		beq $9dee			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9dd6		e8		inx				inx
.9dd7		20 02 9e	jsr $9e02			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9dda		ca		dex				dex
.9ddb		c9 00		cmp #$00			cmp 	#0
.9ddd		f0 0c		beq $9deb			beq 	_FDSetZero
.9ddf		20 79 99	jsr $9979			jsr 	MultiplyShort 				; calculate the result.
.9de2		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9de4		18		clc				clc
.9de5		75 79		adc $79,x			adc 	NSExponent+1,x
.9de7		95 78		sta $78,x			sta 	NSExponent,x
.9de9		80 03		bra $9dee			bra 	_FDExit
.9deb						_FDSetZero:
.9deb		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; return 0
.9dee						_FDExit:
.9dee		20 02 9e	jsr $9e02			jsr 	NSNormalise 				; normalise the result
.9df1		68		pla				pla
.9df2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9df3						FloatPrepare:
.9df3		20 fe 9e	jsr $9efe			jsr 	DereferenceTopTwo 			; dereference the top two values
.9df6		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9df8		15 51		ora $51,x			ora 	NSStatus+1,x
.9dfa		29 10		and #$10			and 	#NSBIsString
.9dfc		d0 01		bne $9dff			bne 	_FDType
.9dfe		60		rts				rts
.9dff						_FDType:
.9dff		4c 59 b1	jmp $b159			jmp 	TypeError
.9e02						NSNormalise:
.9e02		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e04		29 80		and #$80			and 	#$80
.9e06		09 08		ora #$08			ora 	#NSTFloat
.9e08		95 50		sta $50,x			sta 	NSStatus,x
.9e0a		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; if zero exit
.9e0d		d0 07		bne $9e16			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e0f		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9e11		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9e13		a9 00		lda #$00			lda 	#0 							; set Z flag
.9e15		60		rts				rts
.9e16						_NSNormaliseOptimise:
.9e16		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9e18		d0 19		bne $9e33			bne 	_NSNormaliseLoop
.9e1a		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9e1c		30 15		bmi $9e33			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9e1e		95 70		sta $70,x			sta 	NSMantissa3,x
.9e20		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e22		95 68		sta $68,x			sta 	NSMantissa2,x
.9e24		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e26		95 60		sta $60,x			sta 	NSMantissa1,x
.9e28		74 58		stz $58,x			stz 	NSMantissa0,x
.9e2a		b5 78		lda $78,x			lda 	NSExponent,x
.9e2c		38		sec				sec
.9e2d		e9 08		sbc #$08			sbc 	#8
.9e2f		95 78		sta $78,x			sta 	NSExponent,x
.9e31		80 e3		bra $9e16			bra 	_NSNormaliseOptimise
.9e33						_NSNormaliseLoop:
.9e33		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9e35		70 07		bvs $9e3e			bvs 	_NSNExit 					; exit if so with Z flag clear
.9e37		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; shift mantissa left
.9e3a		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9e3c		80 f5		bra $9e33			bra 	_NSNormaliseLoop
.9e3e						_NSNExit:
.9e3e		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9e40		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e41						AssignNumber:
.9e41		5a		phy				phy
.9e42		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e44		85 36		sta $36				sta 	zTemp0
.9e46		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e48		85 37		sta $37				sta 	zTemp0+1
.9e4a		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9e4c		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9e4e		95 50		sta $50,x			sta 	NSStatus,x
.9e50		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9e52		c9 08		cmp #$08			cmp 	#NSTFloat
.9e54		f0 24		beq $9e7a			beq 	_ANFloat
.9e56		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9e58		f0 03		beq $9e5d			beq		_ANNotFloat
.9e5a		4c 54 b1	jmp $b154			jmp 	RangeError					; if it is, report an error.
.9e5d						_ANNotFloat:
.9e5d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e5f		29 03		and #$03			and 	#3
.9e61		d0 05		bne $9e68			bne 	_ANByteWord
.9e63		20 85 9e	jsr $9e85			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e66		80 1b		bra $9e83			bra 	_ANExit
.9e68						_ANByteWord:
.9e68		48		pha				pha 								; save count
.9e69		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9e6b		92 36		sta ($36)			sta 	(zTemp0)
.9e6d		68		pla				pla
.9e6e		c9 01		cmp #$01			cmp	 	#1
.9e70		f0 11		beq $9e83			beq 	_ANExit
.9e72		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9e74		a0 01		ldy #$01			ldy 	#1
.9e76		91 36		sta ($36),y			sta 	(zTemp0),y
.9e78		80 09		bra $9e83			bra 	_ANExit
.9e7a						_ANFloat:
.9e7a		20 85 9e	jsr $9e85			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e7d		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e7f		a0 04		ldy #$04			ldy 	#4
.9e81		91 36		sta ($36),y			sta 	(zTemp0),y
.9e83						_ANExit:
.9e83		7a		ply				ply
.9e84		60		rts				rts
.9e85						_ANCopy4PackSign:
.9e85		a0 03		ldy #$03			ldy 	#3
.9e87		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9e89		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e8b		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9e8d		91 36		sta ($36),y			sta 	(zTemp0),y
.9e8f		88		dey				dey
.9e90		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9e92		91 36		sta ($36),y			sta 	(zTemp0),y
.9e94		88		dey				dey
.9e95		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e97		91 36		sta ($36),y			sta 	(zTemp0),y
.9e99		88		dey				dey
.9e9a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9e9c		91 36		sta ($36),y			sta 	(zTemp0),y
.9e9e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e9f						AssignString:
.9e9f		5a		phy				phy
.9ea0		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9ea2		85 38		sta $38				sta 	zTemp1
.9ea4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ea6		85 39		sta $39				sta 	zTemp1+1
.9ea8		b5 58		lda $58,x			lda 	NSMantissa0,x
.9eaa		85 36		sta $36				sta 	zTemp0
.9eac		b5 60		lda $60,x			lda 	NSMantissa1,x
.9eae		85 37		sta $37				sta 	zTemp0+1
.9eb0		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9eb2		b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb4		f0 23		beq $9ed9			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9eb6		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9eb7		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9eb9		e9 02		sbc #$02			sbc 	#2
.9ebb		85 3c		sta $3c				sta 	zsTemp
.9ebd		a0 01		ldy #$01			ldy 	#1
.9ebf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ec1		e9 00		sbc #$00			sbc 	#0
.9ec3		85 3d		sta $3d				sta 	zsTemp+1
.9ec5		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9ec7						_ASGetLength:
.9ec7		c8		iny				iny
.9ec8		b1 38		lda ($38),y			lda 	(zTemp1),y
.9eca		d0 fb		bne $9ec7			bne 	_ASGetLength
.9ecc		98		tya				tya 								; is this length <= current length
.9ecd		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ecf		90 1e		bcc $9eef			bcc 	_ASCopyString
.9ed1		f0 1c		beq $9eef			beq 	_ASCopyString
.9ed3		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9ed5		a0 01		ldy #$01			ldy 	#1
.9ed7		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ed9						_ASNewStringRequired:
.9ed9		e8		inx				inx 								; concrete the new string.
.9eda		20 3c b8	jsr $b83c			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9edd		ca		dex				dex
.9ede		18		clc				clc
.9edf		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9ee1		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9ee3		92 36		sta ($36)			sta 	(zTemp0)
.9ee5		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ee7		69 00		adc #$00			adc 	#0
.9ee9		a0 01		ldy #$01			ldy 	#1
.9eeb		91 36		sta ($36),y			sta 	(zTemp0),y
.9eed		80 0d		bra $9efc			bra 	_ASExit
.9eef						_ASCopyString:
.9eef		a0 00		ldy #$00			ldy 	#0
.9ef1						_ASCopyLoop:
.9ef1		b1 38		lda ($38),y			lda 	(zTemp1),y
.9ef3		c8		iny				iny
.9ef4		c8		iny				iny
.9ef5		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ef7		88		dey				dey
.9ef8		c9 00		cmp #$00			cmp 	#0
.9efa		d0 f5		bne $9ef1			bne 	_ASCopyLoop
.9efc						_ASExit:
.9efc		7a		ply				ply
.9efd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9efe						DereferenceTopTwo:
.9efe		e8		inx				inx
.9eff		20 03 9f	jsr $9f03			jsr 	Dereference 				; deref x+1
.9f02		ca		dex				dex  								; falls through to deref x
.9f03						Dereference:
.9f03		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f05		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f07		f0 48		beq $9f51			beq 	_DRFExit 					; not a reference, so exit.
.9f09		5a		phy				phy
.9f0a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f0c		85 36		sta $36				sta 	zTemp0
.9f0e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f10		85 37		sta $37				sta 	zTemp0+1
.9f12		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9f14		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f16		95 58		sta $58,x			sta 	NSMantissa0,x
.9f18		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9f1a		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f1c		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f1e		f0 0e		beq $9f2e			beq 	_DRFDereferenceTwo
.9f20		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f22		f0 2f		beq $9f53			beq 	_DRFFull
.9f24		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f26		29 03		and #$03			and 	#3
.9f28		f0 29		beq $9f53			beq 	_DRFFull 					; the whole word
.9f2a		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f2c		f0 06		beq $9f34			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f2e						_DRFDereferenceTwo:
.9f2e		a0 01		ldy #$01			ldy 	#1
.9f30		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f32		95 60		sta $60,x			sta 	NSMantissa1,x
.9f34						_DRFClear23:
.9f34		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f36		74 70		stz $70,x			stz 	NSMantissa3,x
.9f38		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9f3a		29 18		and #$18			and 	#NSBTypeMask
.9f3c		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9f3e		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f40		d0 0e		bne $9f50			bne 	_DRFNotString
.9f42		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9f44		15 60		ora $60,x			ora 	NSMantissa1,x
.9f46		d0 08		bne $9f50			bne 	_DRFNotString
.9f48		a9 52		lda #$52			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f4a		95 58		sta $58,x			sta 	NSMantissa0,x
.9f4c		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f4e		95 60		sta $60,x			sta 	NSMantissa1,x
.9f50						_DRFNotString
.9f50		7a		ply				ply 								; restore Y and exit
.9f51						_DRFExit:
.9f51		60		rts				rts
.9f52						_DRFNullString:
>9f52		00						.byte 	0
.9f53						_DRFFull:
.9f53		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f55		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f57		95 60		sta $60,x			sta 	NSMantissa1,x
.9f59		c8		iny				iny
.9f5a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f5c		95 68		sta $68,x			sta 	NSMantissa2,x
.9f5e		c8		iny				iny
.9f5f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f61		95 70		sta $70,x			sta 	NSMantissa3,x
.9f63		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9f65		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9f67		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f69		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9f6b		f0 05		beq $9f72			beq 	_DRFNoExponent
.9f6d		c8		iny				iny 								; if not, read the exponent as well.
.9f6e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f70		95 78		sta $78,x			sta 	NSExponent,x
.9f72						_DRFNoExponent:
.9f72		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f74		10 0a		bpl $9f80			bpl 	_DRFExit2 					; if not, then exit.
.9f76		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f78		95 70		sta $70,x			sta 	NSMantissa3,x
.9f7a		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9f7c		09 80		ora #$80			ora 	#NSBIsNegative
.9f7e		95 50		sta $50,x			sta 	NSStatus,x
.9f80						_DRFExit2:
.9f80		7a		ply				ply
.9f81		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9f82						EncodeNumberStart:
.9f82		38		sec				sec
.9f83		80 01		bra $9f86			bra 	EncodeNumberContinue+1
.9f85						EncodeNumberContinue:
.9f85		18		clc				clc
.9f86						EncodeNumber:
.9f86		08		php				php 								; save reset flag.
.9f87		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f89		f0 12		beq $9f9d			beq 	_ENIsOkay
.9f8b		c9 30		cmp #$30			cmp 	#"0"
.9f8d		90 04		bcc $9f93			bcc 	_ENBadNumber
.9f8f		c9 3a		cmp #$3a			cmp 	#"9"+1
.9f91		90 0a		bcc $9f9d			bcc 	_ENIsOkay
.9f93						_ENBadNumber:
.9f93		28		plp				plp 								; throw saved reset
.9f94		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9f97		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f99		f0 7b		beq $a016			beq 	_ENConstructFinal
.9f9b						_ENFail:
.9f9b		18		clc				clc 								; not allowed
.9f9c		60		rts				rts
.9f9d						_ENIsOkay:
.9f9d		28		plp				plp 								; are we restarting
.9f9e		90 15		bcc $9fb5			bcc 	_ENNoRestart
.9fa0						_ENStartEncode:
.9fa0		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9fa2		f0 0c		beq $9fb0			beq 	_ENFirstDP
.9fa4		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9fa6		20 98 a6	jsr $a698			jsr 	NSMSetByte 					; in single byte mode.
.9fa9		a9 01		lda #$01			lda 	#ESTA_Low
.9fab						_ENExitChange:
.9fab		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9fae		38		sec				sec
.9faf		60		rts				rts
.9fb0						_ENFirstDP:
.9fb0		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; clear integer part
.9fb3		80 3c		bra $9ff1			bra 	_ESTASwitchFloat			; go straight to float and exi
.9fb5						_ENNoRestart:
.9fb5		48		pha				pha 								; save digit or DP on stack.
.9fb6		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9fb9		c9 01		cmp #$01			cmp 	#ESTA_Low
.9fbb		f0 09		beq $9fc6			beq  	_ESTALowState
.9fbd		c9 02		cmp #$02			cmp 	#ESTA_High
.9fbf		f0 26		beq $9fe7			beq 	_ESTAHighState
.9fc1		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fc3		f0 38		beq $9ffd			beq 	_ESTADecimalState
>9fc5		db						.byte 	$DB 						; causes a break in the emulator
.9fc6						_ESTALowState:
.9fc6		68		pla				pla 								; get value back
.9fc7		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9fc9		f0 26		beq $9ff1			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9fcb		29 0f		and #$0f			and 	#15 						; make digit
.9fcd		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9fd0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9fd2		0a		asl a				asl 	a
.9fd3		0a		asl a				asl 	a
.9fd4		75 58		adc $58,x			adc 	NSMantissa0,x
.9fd6		0a		asl a				asl 	a
.9fd7		6d 06 04	adc $0406			adc 	digitTemp
.9fda		95 58		sta $58,x			sta 	NSMantissa0,x
.9fdc		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9fde		90 05		bcc $9fe5			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9fe0		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fe2		8d 05 04	sta $0405			sta 	encodeState
.9fe5						_ESTANoSwitch:
.9fe5		38		sec				sec
.9fe6		60		rts				rts
.9fe7						_ESTAHighState:
.9fe7		68		pla				pla 								; get value back
.9fe8		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9fea		f0 05		beq $9ff1			beq 	_ESTASwitchFloat
.9fec		20 4a a0	jsr $a04a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9fef		38		sec				sec
.9ff0		60		rts				rts
.9ff1						_ESTASwitchFloat:
.9ff1		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9ff4		e8		inx				inx 								; zero the decimal additive.
.9ff5		20 96 a6	jsr $a696			jsr 	NSMSetZero
.9ff8		ca		dex				dex
.9ff9		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9ffb		80 ae		bra $9fab			bra 	_ENExitChange
.9ffd						_ESTADecimalState:
.9ffd		68		pla				pla 								; digit.
.9ffe		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a000		f0 99		beq $9f9b			beq 	_ENFail
.a002		e8		inx				inx 								; put digit into fractional part of X+1
.a003		20 4a a0	jsr $a04a			jsr 	ESTAShiftDigitIntoMantissa
.a006		ca		dex				dex
.a007		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a00a		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a00d		c9 0b		cmp #$0b			cmp 	#11
.a00f		f0 02		beq $a013			beq 	_ESTADSFail
.a011		38		sec				sec
.a012		60		rts				rts
.a013						_ESTADSFail:
.a013		4c 54 b1	jmp $b154			jmp 	RangeError
.a016						_ENConstructFinal:
.a016		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a019		f0 2d		beq $a048			beq 	_ENCFExit 					; no decimals
.a01b		5a		phy				phy
.a01c		0a		asl a				asl 	a 							; x 4 and CLC
.a01d		0a		asl a				asl 	a
.a01e		6d 07 04	adc $0407			adc 	decimalCount
.a021		a8		tay				tay
.a022		b9 13 b1	lda $b113,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a025		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a027		b9 14 b1	lda $b114,y			lda 	DecimalScalarTable-5+1,y
.a02a		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a02c		b9 15 b1	lda $b115,y			lda 	DecimalScalarTable-5+2,y
.a02f		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a031		b9 16 b1	lda $b116,y			lda 	DecimalScalarTable-5+3,y
.a034		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a036		b9 17 b1	lda $b117,y			lda 	DecimalScalarTable-5+4,y
.a039		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a03b		a9 08		lda #$08			lda 	#NSTFloat
.a03d		95 52		sta $52,x			sta 	NSStatus+2,x
.a03f		7a		ply				ply
.a040		e8		inx				inx 								; multiply decimal const by decimal scalar
.a041		20 d0 9d	jsr $9dd0			jsr 	FloatMultiply
.a044		ca		dex				dex
.a045		20 8b 9c	jsr $9c8b			jsr 	FloatAdd 					; add to integer part.
.a048						_ENCFExit:
.a048		18		clc				clc 								; reject the digit.
.a049		60		rts				rts
.a04a						ESTAShiftDigitIntoMantissa:
.a04a		29 0f		and #$0f			and 	#15 						; save digit
.a04c		48		pha				pha
.a04d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a04f		48		pha				pha
.a050		b5 68		lda $68,x			lda 	NSMantissa2,x
.a052		48		pha				pha
.a053		b5 60		lda $60,x			lda 	NSMantissa1,x
.a055		48		pha				pha
.a056		b5 58		lda $58,x			lda 	NSMantissa0,x
.a058		48		pha				pha
.a059		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 2
.a05c		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 4
.a05f		18		clc				clc 								; pop mantissa and add
.a060		68		pla				pla
.a061		75 58		adc $58,x			adc 	NSMantissa0,x
.a063		95 58		sta $58,x			sta 	NSMantissa0,x
.a065		68		pla				pla
.a066		75 60		adc $60,x			adc 	NSMantissa1,x
.a068		95 60		sta $60,x			sta 	NSMantissa1,x
.a06a		68		pla				pla
.a06b		75 68		adc $68,x			adc 	NSMantissa2,x
.a06d		95 68		sta $68,x			sta 	NSMantissa2,x
.a06f		68		pla				pla
.a070		75 70		adc $70,x			adc 	NSMantissa3,x
.a072		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a074		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 10
.a077		68		pla				pla 								; add digit
.a078		18		clc				clc
.a079		75 58		adc $58,x			adc 	NSMantissa0,x
.a07b		95 58		sta $58,x			sta 	NSMantissa0,x
.a07d		90 0a		bcc $a089			bcc 	_ESTASDExit
.a07f		f6 60		inc $60,x			inc 	NSMantissa1,x
.a081		d0 06		bne $a089			bne 	_ESTASDExit
.a083		f6 68		inc $68,x			inc 	NSMantissa2,x
.a085		d0 02		bne $a089			bne 	_ESTASDExit
.a087		f6 70		inc $70,x			inc 	NSMantissa3,x
.a089						_ESTASDExit:
.a089		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a08a						EvaluateTerm:
.a08a		b1 30		lda ($30),y			lda 	(codePtr),y
.a08c		30 18		bmi $a0a6			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a08e		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a090		b0 6c		bcs $a0fe			bcs 	_ETVariable
.a092		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a094		90 6b		bcc $a101			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a096		c9 3a		cmp #$3a			cmp 	#'9'+1
.a098		b0 67		bcs $a101			bcs 	_ETPuncUnary
.a09a		20 82 9f	jsr $9f82			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a09d						_ETNumber:
.a09d		c8		iny				iny 								; keep encoding until we have the numbers
.a09e		b1 30		lda ($30),y			lda 	(codePtr),y
.a0a0		20 85 9f	jsr $9f85			jsr 	EncodeNumberContinue
.a0a3		b0 f8		bcs $a09d			bcs 	_ETNumber 					; go back if accepted.
.a0a5		60		rts				rts
.a0a6						_ETCheckUnary:
.a0a6		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a0a8		f0 3f		beq $a0e9			beq 	_ETString
.a0aa		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a0ac		f0 12		beq $a0c0			beq 	_ETHexConstant
.a0ae		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a0b0		90 0b		bcc $a0bd			bcc 	_ETSyntaxError
.a0b2		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.a0b4		b0 07		bcs $a0bd			bcs 	_ETSyntaxError
.a0b6		da		phx				phx 								; push X on the stack
.a0b7		0a		asl a				asl 	a 							; put vector x 2 into X
.a0b8		aa		tax				tax
.a0b9		c8		iny				iny 								; consume unary function token
.a0ba		7c 10 94	jmp ($9410,x)			jmp 	(VectorSet0,x) 				; and do it.
.a0bd						_ETSyntaxError:
.a0bd		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.a0c0						_ETHexConstant:
.a0c0		c8		iny				iny 								; skip #
.a0c1		c8		iny				iny 								; skip count
.a0c2		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; clear result
.a0c5						_ETHLoop:
.a0c5		b1 30		lda ($30),y			lda 	(codePtr),y
.a0c7		c8		iny				iny 								; and consume
.a0c8		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a0ca		f0 1c		beq $a0e8			beq 	_ETHExit
.a0cc		48		pha				pha 								; save on stack.
.a0cd		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 2
.a0d0		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 4
.a0d3		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 8
.a0d6		20 a5 a6	jsr $a6a5			jsr 	NSMShiftLeft 				; x 16
.a0d9		68		pla				pla 								; ASCII
.a0da		c9 41		cmp #$41			cmp 	#'A'
.a0dc		90 02		bcc $a0e0			bcc 	_ETHNotChar
.a0de		e9 07		sbc #$07			sbc 	#7
.a0e0						_ETHNotChar:
.a0e0		29 0f		and #$0f			and 	#15 						; digit now
.a0e2		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0e4		95 58		sta $58,x			sta 	NSMantissa0,x
.a0e6		80 dd		bra $a0c5			bra 	_ETHLoop 					; go round.
.a0e8						_ETHExit:
.a0e8		60		rts				rts
.a0e9						_ETString:
.a0e9		c8		iny				iny 								; look at length
.a0ea		b1 30		lda ($30),y			lda 	(codePtr),y
.a0ec		48		pha				pha
.a0ed		c8		iny				iny 								; first character
.a0ee		20 d6 b3	jsr $b3d6			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0f1		68		pla				pla 								; restore count and save
.a0f2		85 36		sta $36				sta 	zTemp0
.a0f4		98		tya				tya 								; add length to Y to skip it.
.a0f5		18		clc				clc
.a0f6		65 36		adc $36				adc 	zTemp0
.a0f8		a8		tay				tay
.a0f9		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a0fb		95 50		sta $50,x			sta 	NSStatus,x
.a0fd		60		rts				rts
.a0fe						_ETVariable:
.a0fe		4c 53 a1	jmp $a153			jmp 	VariableHandler
.a101						_ETPuncUnary:
.a101		c8		iny				iny 								; consume the unary character
.a102		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a104		f0 2b		beq $a131			beq 	_ETUnaryNegate
.a106		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.a108		f0 36		beq $a140			beq 	_ETDereference
.a10a		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a10c		f0 3e		beq $a14c			beq 	_ETParenthesis
.a10e		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a110		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a112		f0 06		beq $a11a			beq 	_ETIndirection
.a114		e6 36		inc $36				inc 	zTemp0
.a116		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a118		d0 a3		bne $a0bd			bne 	_ETSyntaxError
.a11a						_ETIndirection:
.a11a		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a11c		1a		inc a				inc 	a
.a11d		48		pha				pha
.a11e		20 8a a0	jsr $a08a			jsr 	EvaluateTerm				; evaluate the term
.a121		20 03 9f	jsr $9f03			jsr 	Dereference 				; dereference it.
.a124		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a126		d0 06		bne $a12e			bne 	_ETTypeMismatch
.a128		68		pla				pla 								; indirection 1-2
.a129		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a12b		95 50		sta $50,x			sta 	NSStatus,x
.a12d		60		rts				rts
.a12e						_ETTypeMismatch:
.a12e		4c 59 b1	jmp $b159			jmp 	TypeError
.a131						_ETUnaryNegate:
.a131		20 8a a0	jsr $a08a			jsr 	EvaluateTerm				; evaluate the term
.a134		20 03 9f	jsr $9f03			jsr 	Dereference 				; dereference it.
.a137		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a139		29 10		and #$10			and 	#NSTString
.a13b		d0 f1		bne $a12e			bne 	_ETTypeMismatch
.a13d		4c 58 a6	jmp $a658			jmp 	NSMNegate  					; just toggles the sign bit.
.a140						_ETDereference:
.a140		20 8a a0	jsr $a08a			jsr 	EvaluateTerm				; evaluate the term
.a143		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a145		29 20		and #$20			and 	#NSBIsReference
.a147		f0 e5		beq $a12e			beq 	_ETTypeMismatch
.a149		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a14b		60		rts				rts
.a14c						_ETParenthesis:
.a14c		20 40 9c	jsr $9c40			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a14f		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; check for )
.a152		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a153						VariableHandler:
.a153		b1 30		lda ($30),y			lda 	(codePtr),y
.a155		18		clc				clc
.a156		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a158		85 37		sta $37				sta 	zTemp0+1
.a15a		c8		iny				iny
.a15b		b1 30		lda ($30),y			lda 	(codePtr),y
.a15d		85 36		sta $36				sta 	zTemp0
.a15f		c8		iny				iny
.a160		18		clc				clc									; copy variable address+3 to mantissa
.a161		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a163		95 58		sta $58,x			sta 	NSMantissa0,x
.a165		a5 37		lda $37				lda 	zTemp0+1
.a167		69 00		adc #$00			adc 	#0
.a169		95 60		sta $60,x			sta 	NSMantissa1,x
.a16b		74 68		stz $68,x			stz 	NSMantissa2,x
.a16d		74 70		stz $70,x			stz 	NSMantissa3,x
.a16f		74 78		stz $78,x			stz 	NSExponent,x
.a171		5a		phy				phy
.a172		a0 02		ldy #$02			ldy 	#2 							; read type
.a174		b1 36		lda ($36),y			lda 	(zTemp0),y
.a176		7a		ply				ply
.a177		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a179		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a17b		95 50		sta $50,x			sta 	NSStatus,x
.a17d		29 04		and #$04			and 	#NSBIsArray
.a17f		d0 01		bne $a182			bne 	_VHArray
.a181		60		rts				rts
.a182						_VHArray:
.a182		e8		inx				inx
.a183		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a186		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a188		95 51		sta $51,x			sta 	NSStatus+1,x
.a18a		b1 30		lda ($30),y			lda 	(codePtr),y
.a18c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a18e		d0 06		bne $a196			bne 	_VHNoSecondIndex
.a190		c8		iny				iny 								; skip the comma
.a191		e8		inx				inx
.a192		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a195		ca		dex				dex
.a196						_VHNoSecondIndex:
.a196		ca		dex				dex 								; set X back.
.a197		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; and check the right bracket.
.a19a		5a		phy				phy 								; save position
.a19b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a19d		85 3e		sta $3e				sta 	zaTemp
.a19f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1a1		85 3f		sta $3f				sta 	zaTemp+1
.a1a3		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a1a5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1a7		f0 5d		beq $a206			beq 	_VHBadArray
.a1a9		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1ab		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1ad		f0 02		beq $a1b1			beq 	_VHHas2Mask
.a1af		a9 ff		lda #$ff			lda 	#$FF
.a1b1						_VHHas2Mask:
.a1b1		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a1b3		f0 4c		beq $a201			beq 	_VHBadIndex
.a1b5		0a		asl a				asl 	a 							; carry will be set if a second index
.a1b6		90 08		bcc $a1c0			bcc 	_VHCheckFirstIndex
.a1b8		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1ba		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1bc		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a1be		90 41		bcc $a201			bcc 	_VHBadIndex
.a1c0						_VHCheckFirstIndex:
.a1c0		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1c2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1c4		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a1c6		90 39		bcc $a201			bcc 	_VHBadIndex
.a1c8		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1ca		64 37		stz $37				stz 	zTemp0+1
.a1cc		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1ce		30 0e		bmi $a1de			bmi 	_VHNoMultiply
.a1d0		da		phx				phx
.a1d1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1d3		48		pha				pha
.a1d4		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1d6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1d8		1a		inc a				inc 	a 							; add 1 for zero base
.a1d9		fa		plx				plx
.a1da		20 41 a6	jsr $a641			jsr 	Multiply8x8 				; calculate -> Z0
.a1dd		fa		plx				plx
.a1de						_VHNoMultiply:
.a1de		18		clc				clc
.a1df		a5 36		lda $36				lda 	zTemp0
.a1e1		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1e3		85 36		sta $36				sta 	zTemp0
.a1e5		a5 37		lda $37				lda 	zTemp0+1
.a1e7		69 00		adc #$00			adc 	#0
.a1e9		85 37		sta $37				sta 	zTemp0+1
.a1eb		b5 50		lda $50,x			lda 	NSStatus,x
.a1ed		20 5d 87	jsr $875d			jsr 	ScaleByBaseType
.a1f0		18		clc				clc
.a1f1		b2 3e		lda ($3e)			lda 	(zaTemp)
.a1f3		65 36		adc $36				adc 	zTemp0
.a1f5		95 58		sta $58,x			sta 	NSMantissa0,x
.a1f7		a0 01		ldy #$01			ldy 	#1
.a1f9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1fb		65 37		adc $37				adc 	zTemp0+1
.a1fd		95 60		sta $60,x			sta 	NSMantissa1,x
.a1ff		7a		ply				ply 								; restore position
.a200		60		rts				rts
.a201						_VHBadIndex:
.a201		a9 17		lda #$17		lda	#23
.a203		4c 3c 97	jmp $973c		jmp	ErrorHandler
.a206						_VHBadArray:
.a206		a9 18		lda #$18		lda	#24
.a208		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a20b						AbsUnary:
.a20b		fa		plx				plx 								; restore stack pos
.a20c		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; get a float or int
.a20f		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a212		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a214		29 7f		and #$7f			and 	#$7F
.a216		95 50		sta $50,x			sta 	NSStatus,x
.a218		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a219						AllocUnary:
.a219		fa		plx				plx 								; restore stack pos
.a21a		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger		; get bytes required.
.a21d		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a220		da		phx				phx 								; save X/Y
.a221		5a		phy				phy
.a222		8a		txa				txa 								; copy X into Y
.a223		a8		tay				tay
.a224		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a227		aa		tax				tax
.a228		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a22b		20 38 a2	jsr $a238			jsr 	AllocateXABytes 			; allocate memory
.a22e		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a231		8a		txa				txa 	 							; typing is 16 bit integer.
.a232		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a235		7a		ply				ply
.a236		fa		plx				plx
.a237		60		rts				rts
.a238						AllocateXABytes:
.a238		5a		phy				phy
.a239		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a23c		84 36		sty $36				sty 	zTemp0
.a23e		5a		phy				phy
.a23f		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a242		84 37		sty $37				sty 	zTemp0+1
.a244		5a		phy				phy
.a245		18		clc				clc 								; add to low memory pointer
.a246		6d 08 04	adc $0408			adc 	lowMemPtr
.a249		8d 08 04	sta $0408			sta 	lowMemPtr
.a24c		8a		txa				txa
.a24d		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a250		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a253		b0 2f		bcs $a284			bcs 	CISSMemory
.a255		20 76 a2	jsr $a276			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a258						_ClearMemory:
.a258		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a25b		c5 36		cmp $36				cmp 	zTemp0
.a25d		d0 07		bne $a266			bne 	_CMClearNext
.a25f		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a262		c5 37		cmp $37				cmp 	zTemp0+1
.a264		f0 0c		beq $a272			beq 	_CMExit
.a266						_CMClearNext:
.a266		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a268		92 36		sta ($36)			sta 	(zTemp0)
.a26a		e6 36		inc $36				inc 	zTemp0
.a26c		d0 ea		bne $a258			bne 	_ClearMemory
.a26e		e6 37		inc $37				inc		zTemp0+1
.a270		80 e6		bra $a258			bra 	_ClearMemory
.a272						_CMExit:
.a272		fa		plx				plx
.a273		68		pla				pla
.a274		7a		ply				ply
.a275		60		rts				rts
.a276						CheckIdentifierStringSpace:
.a276		48		pha				pha
.a277		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a27a		18		clc				clc
.a27b		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a27d		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a280		b0 02		bcs $a284			bcs 	CISSMemory
.a282		68		pla				pla
.a283		60		rts				rts
.a284						CISSMemory:
.a284		a9 06		lda #$06		lda	#6
.a286		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a289						AscUnary:
.a289		fa		plx				plx 								; restore stack pos
.a28a		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; get a string
.a28d		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a28f		20 98 a6	jsr $a698			jsr 	NSMSetByte 					; ASC("") will return zero.
.a292		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a295		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a296						FracUnary:
.a296		fa		plx				plx 								; restore stack pos
.a297		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; get a float or int
.a29a		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a29d		b5 50		lda $50,x			lda 	NSStatus,x
.a29f		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2a1		f0 04		beq $a2a7			beq 	_IUZero
.a2a3		20 51 9d	jsr $9d51			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a2a6		60		rts				rts
.a2a7						_IUZero:
.a2a7		20 96 a6	jsr $a696			jsr 	NSMSetZero
.a2aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a2ab						IntUnary:
.a2ab		fa		plx				plx 								; restore stack pos
.a2ac		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; get a float or int
.a2af		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a2b2		b5 50		lda $50,x			lda 	NSStatus,x
.a2b4		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2b6		f0 03		beq $a2bb			beq 	_IUExit
.a2b8		20 a9 9d	jsr $9da9			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a2bb						_IUExit:
.a2bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a2bc						LenUnary:
.a2bc		fa		plx				plx 								; restore stack pos
.a2bd		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; get a string
.a2c0		5a		phy				phy
.a2c1		a0 00		ldy #$00			ldy 	#0 							; find length
.a2c3						_LenFind:
.a2c3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a2c5		f0 06		beq $a2cd			beq 	_LenExit
.a2c7		c8		iny				iny
.a2c8		d0 f9		bne $a2c3			bne 	_LenFind
.a2ca		4c 54 b1	jmp $b154			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a2cd						_LenExit:
.a2cd		98		tya				tya		 							; return length
.a2ce		20 98 a6	jsr $a698			jsr 	NSMSetByte
.a2d1		7a		ply				ply
.a2d2		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a2d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a2d6						Unary_Min:
.a2d6		a9 01		lda #$01			lda 	#1
.a2d8		80 02		bra $a2dc			bra 	UnaryMinMaxMain
.a2da						Unary_Max:
.a2da		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a2dc						UnaryMinMaxMain:
.a2dc		fa		plx				plx 								; get index on number stack
.a2dd		48		pha				pha 								; save comparator
.a2de		20 db a5	jsr $a5db			jsr 	EvaluateValue 				; get the first value.
.a2e1						_UMMMLoop:
.a2e1		b1 30		lda ($30),y			lda 	(codePtr),y
.a2e3		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a2e5		f0 22		beq $a309			beq 	_UMMMDone
.a2e7		20 2b 97	jsr $972b			jsr 	CheckComma 					; must be a comma
.a2ea		e8		inx				inx
.a2eb		20 db a5	jsr $a5db			jsr 	EvaluateValue
.a2ee		ca		dex				dex
.a2ef		20 79 a6	jsr $a679			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a2f2		e8		inx				inx
.a2f3		20 79 a6	jsr $a679			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a2f6		e8		inx				inx
.a2f7		20 f3 97	jsr $97f3			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a2fa		ca		dex				dex
.a2fb		ca		dex				dex
.a2fc		85 36		sta $36				sta 	zTemp0 						; save required result
.a2fe		68		pla				pla 								; get and save comparator
.a2ff		48		pha				pha
.a300		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a302		d0 dd		bne $a2e1			bne 	_UMMMLoop
.a304		20 0c a3	jsr $a30c			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a307		80 d8		bra $a2e1			bra 	_UMMMLoop
.a309						_UMMMDone:
.a309		68		pla				pla 								; throw the comparator
.a30a		c8		iny				iny 								; skip )
.a30b		60		rts				rts
.a30c						ExpCopyAboveDown:
.a30c		b5 51		lda $51,x			lda 	NSStatus+1,x
.a30e		95 50		sta $50,x			sta 	NSStatus,x
.a310		b5 79		lda $79,x			lda 	NSExponent+1,x
.a312		95 78		sta $78,x			sta 	NSExponent,x
.a314		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a316		95 58		sta $58,x			sta 	NSMantissa0,x
.a318		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a31a		95 60		sta $60,x			sta 	NSMantissa1,x
.a31c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a31e		95 68		sta $68,x			sta 	NSMantissa2,x
.a320		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a322		95 70		sta $70,x			sta 	NSMantissa3,x
.a324		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a325						Unary_Not:
.a325		fa		plx				plx
.a326		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; get integer
.a329		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a32c		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; zero mantissa ?
.a32f		f0 04		beq $a335			beq 	_NotZero
.a331		20 96 a6	jsr $a696			jsr 	NSMSetZero
.a334		60		rts				rts
.a335						_NotZero:
.a335		4c a9 97	jmp $97a9			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a338						PeekByteUnary:
.a338		a9 01		lda #$01			lda 	#1
.a33a		80 0a		bra $a346			bra 	PeekUnary
.a33c						PeekWUnary:
.a33c		a9 02		lda #$02			lda 	#2
.a33e		80 06		bra $a346			bra 	PeekUnary
.a340						PeekLUnary:
.a340		a9 03		lda #$03			lda 	#3
.a342		80 02		bra $a346			bra 	PeekUnary
.a344						PeekDUnary:
.a344		a9 04		lda #$04			lda 	#4
.a346						PeekUnary:
.a346		fa		plx				plx 								; restore position.
.a347		48		pha				pha 								; save count to copy on stack
.a348		20 16 a6	jsr $a616			jsr		Evaluate16BitInteger 		; address as constant.
.a34b		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a34e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a350		85 36		sta $36				sta 	zTemp0
.a352		b5 60		lda $60,x			lda 	NSMantissa1,x
.a354		85 37		sta $37				sta 	zTemp0+1
.a356		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; clear the result to zero.
.a359		68		pla				pla 								; count in zTemp2
.a35a		85 3a		sta $3a				sta 	zTemp2
.a35c		da		phx				phx 								; save stack position and offset of read
.a35d		5a		phy				phy
.a35e		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a360						_PULoop:
.a360		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a362		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a364		c8		iny				iny 								; next byte to write
.a365		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a366		18		clc				clc
.a367		69 08		adc #$08			adc 	#MathStackSize
.a369		aa		tax				tax
.a36a		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a36c		d0 f2		bne $a360			bne 	_PULoop
.a36e		7a		ply				ply 								; restore stack/code pos and exit.
.a36f		fa		plx				plx
.a370		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a371						SgnUnary:
.a371		fa		plx				plx 								; restore stack pos
.a372		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; get a float or int
.a375		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a378		20 b8 a6	jsr $a6b8			jsr 	NSMIsZero 					; if zero
.a37b		f0 0e		beq $a38b			beq 	_SGZero  					; return Int Zero
.a37d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a37f		48		pha				pha
.a380		a9 01		lda #$01			lda 	#1 							; set to 1
.a382		20 98 a6	jsr $a698			jsr 	NSMSetByte
.a385		68		pla				pla
.a386		29 80		and #$80			and		#$80 						; copy the sign byte out
.a388		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a38a		60		rts				rts
.a38b		20 96 a6	jsr $a696	_SGZero:jsr 	NSMSetZero
.a38e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a38f						ValUnary:
.a38f		fa		plx				plx 								; restore stack pos
.a390		20 a5 a3	jsr $a3a5			jsr 	ValMainCode 				; do the main val() code
.a393		b0 01		bcs $a396			bcs 	_VUError 					; couldn't convert
.a395		60		rts				rts
.a396						_VUError:
.a396		4c 59 b1	jmp $b159			jmp 	TypeError
.a399						IsValUnary:
.a399		fa		plx				plx 								; restore stack pos
.a39a		20 a5 a3	jsr $a3a5			jsr 	ValMainCode 				; do the main val() code
.a39d		b0 03		bcs $a3a2			bcs 	_VUBad
.a39f		4c a9 97	jmp $97a9			jmp 	ReturnTrue
.a3a2						_VUBad:
.a3a2		4c b4 97	jmp $97b4			jmp 	ReturnFalse
.a3a5						ValMainCode:
.a3a5		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; get a string
.a3a8		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; check right bracket present
.a3ab						ValEvaluateZTemp0:
.a3ab		5a		phy				phy
.a3ac		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a3ae		f0 17		beq $a3c7			beq 	_VMCFail2
.a3b0		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a3b2		48		pha				pha 								; save first character
.a3b3		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a3b5		d0 01		bne $a3b8			bne 	_VMCStart
.a3b7		c8		iny				iny 								; skip over -
.a3b8						_VMCStart:
.a3b8		38		sec				sec 								; initialise first time round.
.a3b9						_VMCNext:
.a3b9		c8		iny				iny 								; pre-increment
.a3ba		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a3bc		f0 0c		beq $a3ca			beq 	_VMCSuccess 				; successful.
.a3be		20 86 9f	jsr $9f86			jsr 	EncodeNumber 				; send it to the number-builder
.a3c1		90 03		bcc $a3c6			bcc 	_VMCFail 					; if failed, give up.
.a3c3		18		clc				clc 								; next time round, countinue
.a3c4		80 f3		bra $a3b9			bra 	_VMCNext
.a3c6						_VMCFail:
.a3c6		68		pla				pla
.a3c7						_VMCFail2:
.a3c7		7a		ply				ply
.a3c8		38		sec				sec
.a3c9		60		rts				rts
.a3ca						_VMCSuccess:
.a3ca		a9 00		lda #$00			lda 	#0 							; construct final
.a3cc		20 86 9f	jsr $9f86			jsr 	EncodeNumber 				; by sending a duff value.
.a3cf		68		pla				pla 								; if it was -ve
.a3d0		c9 2d		cmp #$2d			cmp 	#"-"
.a3d2		d0 03		bne $a3d7			bne 	_VMCNotNegative
.a3d4		20 58 a6	jsr $a658			jsr		NSMNegate 					; negate it.
.a3d7						_VMCNotNegative:
.a3d7		7a		ply				ply
.a3d8		18		clc				clc
.a3d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a3da						ChrUnary:
.a3da		fa		plx				plx 								; restore stack pos
.a3db		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a3de		48		pha				pha
.a3df		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a3e2		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3e4		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.a3e7		68		pla				pla 								; write number to it
.a3e8		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.a3eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a3ec						ItemCountUnary:
.a3ec		fa		plx				plx
.a3ed		20 ee a5	jsr $a5ee			jsr 	EvaluateString
.a3f0		e8		inx				inx
.a3f1		20 64 a4	jsr $a464			jsr 	ICGetSeperator
.a3f4		ca		dex				dex
.a3f5		20 85 a4	jsr $a485			jsr 	ICSetPointer 				; zTemp0 = (string)
.a3f8		20 96 a6	jsr $a696			jsr 	NSMSetZero 					; zero the result.
.a3fb		5a		phy				phy
.a3fc		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a3fe						_ICULoop:
.a3fe		c8		iny				iny
.a3ff		b1 36		lda ($36),y			lda 	(zTemp0),y
.a401		cd 73 07	cmp $0773			cmp 	ICSeperator
.a404		d0 02		bne $a408			bne 	_ICUNoMatch
.a406		f6 58		inc $58,x			inc 	NSMantissa0,x
.a408						_ICUNoMatch:
.a408		c9 00		cmp #$00			cmp 	#0
.a40a		d0 f2		bne $a3fe			bne 	_ICULoop
.a40c		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a40e		7a		ply				ply
.a40f		60		rts				rts
.a410						ItemGetUnary:
.a410		fa		plx				plx
.a411		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; search string
.a414		20 2b 97	jsr $972b			jsr 	CheckComma
.a417		e8		inx				inx 								; get count
.a418		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.a41b		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a41d		f0 61		beq $a480			beq 	ICGSRange
.a41f		e8		inx				inx 								; get seperator.
.a420		20 64 a4	jsr $a464			jsr 	ICGetSeperator
.a423		ca		dex				dex
.a424		ca		dex				dex
.a425		5a		phy				phy
.a426		20 85 a4	jsr $a485			jsr 	ICSetPointer 				; zTemp0 points to string.
.a429		a0 00		ldy #$00			ldy 	#0
.a42b		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a42d		f0 0e		beq $a43d			beq 	_IGUFoundStart
.a42f						_IGUFindNext:
.a42f		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a431		f0 4d		beq $a480			beq 	ICGSRange 					; eol, not found.
.a433		c8		iny				iny
.a434		cd 73 07	cmp $0773			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a437		d0 f6		bne $a42f			bne 	_IGUFindNext
.a439		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a43b		d0 f2		bne $a42f			bne 	_IGUFindNext
.a43d						_IGUFoundStart:
.a43d		84 38		sty $38				sty 	zTemp1 						; save start
.a43f		88		dey				dey
.a440						_IGUFindLength:
.a440		c8		iny				iny 								; forward till seperator/EOS
.a441		b1 36		lda ($36),y			lda 	(zTemp0),y
.a443		f0 05		beq $a44a			beq 	_IGUFoundLength
.a445		cd 73 07	cmp $0773			cmp 	ICSeperator
.a448		d0 f6		bne $a440			bne 	_IGUFindLength
.a44a						_IGUFoundLength:
.a44a		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a44c		98		tya				tya 								; calculate length of new string.
.a44d		38		sec				sec
.a44e		e5 38		sbc $38				sbc 	zTemp1
.a450		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate 			; allocate bytes for it.
.a453		a4 38		ldy $38				ldy 	zTemp1
.a455						_IGUCopySub:
.a455		c4 39		cpy $39				cpy 	zTemp1+1
.a457		f0 08		beq $a461			beq 	_IGUCopyOver
.a459		b1 36		lda ($36),y			lda 	(zTemp0),y
.a45b		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.a45e		c8		iny				iny
.a45f		80 f4		bra $a455			bra 	_IGUCopySub
.a461						_IGUCopyOver:
.a461		7a		ply				ply
.a462		60		rts				rts
>a463		db						.byte 	$DB 						; causes a break in the emulator
.a464						ICGetSeperator:
.a464		20 2b 97	jsr $972b			jsr 	CheckComma 					; preceding comma
.a467		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; seperator string
.a46a		20 85 a4	jsr $a485			jsr 	ICSetPointer 				; access it
.a46d		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a46f		8d 73 07	sta $0773			sta 	ICSeperator
.a472		f0 0c		beq $a480			beq 	ICGSRange 					; check LEN(seperator) = 1
.a474		5a		phy				phy
.a475		a0 01		ldy #$01			ldy 	#1
.a477		b1 36		lda ($36),y			lda 	(zTemp0),y
.a479		d0 05		bne $a480			bne 	ICGSRange
.a47b		7a		ply				ply
.a47c		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; check following )
.a47f		60		rts				rts
.a480						ICGSRange:
.a480		a9 04		lda #$04		lda	#4
.a482		4c 3c 97	jmp $973c		jmp	ErrorHandler
.a485						ICSetPointer:
.a485		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a487		85 36		sta $36				sta 	zTemp0
.a489		b5 60		lda $60,x			lda 	NSMantissa1,x
.a48b		85 37		sta $37				sta 	zTemp0+1
.a48d		60		rts				rts
.0773						ICSeperator:
>0773								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a48e						SpcUnary:
.a48e		fa		plx				plx 								; restore stack pos
.a48f		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger			; get value
.a492		5a		phy				phy
.a493		48		pha				pha 								; save count
.a494		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.a497		7a		ply				ply 								; to do count in Y
.a498						_SpcLoop:
.a498		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a49a		f0 08		beq $a4a4			beq 	_SpcExit
.a49c		a9 20		lda #$20			lda 	#32
.a49e		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.a4a1		88		dey				dey
.a4a2		80 f4		bra $a498			bra 	_SpcLoop
.a4a4						_SpcExit:
.a4a4		7a		ply				ply
.a4a5		20 23 97	jsr $9723			jsr 	CheckRightBracket
.a4a8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4a9						Unary_Str:
.a4a9		fa		plx				plx
.a4aa		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber  			; get number
.a4ad		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; closing bracket
.a4b0		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4b2		20 cb a4	jsr $a4cb			jsr 	ConvertNumberToString 		; do the conversion.
.a4b5		a9 21		lda #$21			lda		#33 						; create buffer
.a4b7		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate 			; allocate memory
.a4ba		da		phx				phx  								; copy the converted string into the buffer.
.a4bb		a2 00		ldx #$00			ldx 	#0
.a4bd						_USCopy:
.a4bd		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4c0		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.a4c3		e8		inx				inx
.a4c4		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4c7		d0 f4		bne $a4bd			bne 	_USCopy
.a4c9		fa		plx				plx
.a4ca		60		rts				rts
.a4cb						ConvertNumberToString:
.a4cb		5a		phy				phy 								; save code position
.a4cc		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a4cf		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a4d2		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a4d4		10 09		bpl $a4df			bpl 	_CNTSNotNegative
.a4d6		29 7f		and #$7f			and 	#$7F 						; make +ve
.a4d8		95 50		sta $50,x			sta 	NSStatus,x
.a4da		a9 2d		lda #$2d			lda 	#"-"
.a4dc		20 40 a5	jsr $a540			jsr 	WriteDecimalBuffer
.a4df						_CNTSNotNegative:
.a4df		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a4e1		f0 12		beq $a4f5			beq 	_CNTSNotFloat
.a4e3		e8		inx				inx 								; round up so we don't get too many 6.999999
.a4e4		a9 01		lda #$01			lda 	#1
.a4e6		20 98 a6	jsr $a698			jsr 	NSMSetByte
.a4e9		ca		dex				dex
.a4ea		b5 78		lda $78,x			lda		NSExponent,x
.a4ec		95 79		sta $79,x			sta 	NSExponent+1,x
.a4ee		a9 08		lda #$08			lda 	#NSTFloat
.a4f0		95 51		sta $51,x			sta 	NSStatus+1,x
.a4f2		20 8b 9c	jsr $9c8b			jsr 	FloatAdd
.a4f5						_CNTSNotFloat:
.a4f5		20 22 a5	jsr $a522			jsr 	MakePlusTwoString 			; do the integer part.
.a4f8		20 51 9d	jsr $9d51			jsr 	FloatFractionalPart 		; get the fractional part
.a4fb		20 02 9e	jsr $9e02			jsr 	NSNormalise					; normalise , exit if zero
.a4fe		f0 20		beq $a520			beq 	_CNTSExit
.a500		a9 2e		lda #$2e			lda 	#"."
.a502		20 40 a5	jsr $a540			jsr 	WriteDecimalBuffer 			; write decimal place
.a505						_CNTSDecimal:
.a505		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a508		30 16		bmi $a520			bmi 	_CNTSExit
.a50a		e8		inx				inx 								; x 10.0
.a50b		a9 0a		lda #$0a			lda 	#10
.a50d		20 98 a6	jsr $a698			jsr 	NSMSetByte
.a510		a9 08		lda #$08			lda 	#NSTFloat
.a512		95 50		sta $50,x			sta 	NSStatus,x
.a514		ca		dex				dex
.a515		20 d0 9d	jsr $9dd0			jsr 	FloatMultiply
.a518		20 22 a5	jsr $a522			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a51b		20 51 9d	jsr $9d51			jsr 	FloatFractionalPart 		; get the fractional part
.a51e		80 e5		bra $a505			bra 	_CNTSDecimal 				; keep going.
.a520						_CNTSExit:
.a520		7a		ply				ply
.a521		60		rts				rts
.a522						MakePlusTwoString:
.a522		da		phx				phx
.a523		20 79 a6	jsr $a679			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a526		e8		inx				inx 								; access it
.a527		e8		inx				inx
.a528		20 a9 9d	jsr $9da9			jsr 	FloatIntegerPart 			; make it an integer
.a52b		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a52d		20 bb 9b	jsr $9bbb			jsr 	ConvertInt32
.a530		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a532						_MPTSCopy:
.a532		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a535		20 40 a5	jsr $a540			jsr 	WriteDecimalBuffer
.a538		e8		inx				inx
.a539		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a53c		d0 f4		bne $a532			bne 	_MPTSCopy
.a53e		fa		plx				plx
.a53f		60		rts				rts
.a540						WriteDecimalBuffer:
.a540		da		phx				phx
.a541		ae 11 04	ldx $0411			ldx 	dbOffset
.a544		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a547		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a54a		ee 11 04	inc $0411			inc 	dbOffset
.a54d		fa		plx				plx
.a54e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a54f						Unary_Left:
.a54f		fa		plx				plx
.a550		18		clc				clc 								; only one parameter
.a551		20 b4 a5	jsr $a5b4			jsr 	SubstringInitial 			; set up.
.a554		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a556		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a558		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a55a		80 25		bra $a581			bra 	SubstringMain
.a55c						Unary_Right:
.a55c		fa		plx				plx
.a55d		18		clc				clc 								; only one parameter
.a55e		20 b4 a5	jsr $a5b4			jsr 	SubstringInitial 			; set up.
.a561		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a563		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a565		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a567		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a569		b0 02		bcs $a56d			bcs 	_URNotUnderflow
.a56b		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a56d						_URNotUnderflow:
.a56d		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a56f		80 10		bra $a581			bra 	SubstringMain
.a571						Unary_Mid:
.a571		fa		plx				plx
.a572		38		sec				sec 								; two parameters
.a573		20 b4 a5	jsr $a5b4			jsr 	SubstringInitial 			; set up.
.a576		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a578		f0 04		beq $a57e			beq 	_UMError
.a57a		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a57c		80 03		bra $a581			bra 	SubstringMain
.a57e						_UMError:
.a57e		4c 5e b1	jmp $b15e			jmp 	ArgumentError
.a581						SubstringMain:
.a581		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a583		d5 78		cmp $78,x			cmp 	NSExponent,x
.a585		b0 27		bcs $a5ae			bcs 	_SSMNull 					; if so, return an empty string.
.a587		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a589		f0 23		beq $a5ae			beq 	_SSMNull 					; return empty string.
.a58b		18		clc				clc 								; add the offset +1 to the address and
.a58c		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a58e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a590		85 36		sta $36				sta 	zTemp0
.a592		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a594		69 00		adc #$00			adc 	#0
.a596		85 37		sta $37				sta 	zTemp0+1
.a598						_SSMNoCarry:
.a598		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a59a		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate 			; allocate that many characters
.a59d		5a		phy				phy 								; save Y
.a59e		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5a0						_SSMCopy:
.a5a0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5a2		f0 08		beq $a5ac			beq 	_SSMEString 				; no more to copy
.a5a4		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite 			; and write it out.
.a5a7		c8		iny				iny
.a5a8		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a5aa		d0 f4		bne $a5a0			bne 	_SSMCopy
.a5ac						_SSMEString:
.a5ac		7a		ply				ply
.a5ad						_SSMExit:
.a5ad		60		rts				rts
.a5ae						_SSMNull:
.a5ae		a9 00		lda #$00			lda 	#0
.a5b0		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.a5b3		60		rts				rts
.a5b4						SubstringInitial:
.a5b4		da		phx				phx 								; save initial stack position
.a5b5		08		php				php 								; save carry on stack indicating 2 parameters
.a5b6		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; get a string
.a5b9		5a		phy				phy 								; calculate length to exponent.
.a5ba		a0 ff		ldy #$ff			ldy 	#$FF
.a5bc						_SIFindLength:
.a5bc		c8		iny				iny
.a5bd		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5bf		d0 fb		bne $a5bc			bne 	_SIFindLength
.a5c1		98		tya				tya
.a5c2		95 78		sta $78,x			sta 	NSExponent,x
.a5c4		7a		ply				ply
.a5c5		e8		inx				inx
.a5c6		20 2b 97	jsr $972b			jsr 	CheckComma 					; comma next
.a5c9		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get next parameter
.a5cc		28		plp				plp 								; is it the last parameter ?
.a5cd		90 07		bcc $a5d6			bcc 	_SSIExit 					; if so, exit.
.a5cf		e8		inx				inx
.a5d0		20 2b 97	jsr $972b			jsr 	CheckComma 					; comma next
.a5d3		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get last parameter
.a5d6						_SSIExit:
.a5d6		fa		plx				plx
.a5d7		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; check closing bracket
.a5da		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a5db						EvaluateValue:
.a5db		48		pha				pha
.a5dc		20 40 9c	jsr $9c40			jsr		EvaluateExpression 			; expression
.a5df		20 03 9f	jsr $9f03			jsr 	Dereference					; derefernce it
.a5e2		68		pla				pla
.a5e3		60		rts				rts
.a5e4						EvaluateNumber:
.a5e4		20 db a5	jsr $a5db			jsr 	EvaluateValue 				; get a value
.a5e7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5e9		29 10		and #$10			and 	#NSBIsString
.a5eb		d0 13		bne $a600			bne 	HelperTypeError
.a5ed		60		rts				rts
.a5ee						EvaluateString:
.a5ee		20 db a5	jsr $a5db			jsr 	EvaluateValue 				; get a value
.a5f1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5f3		29 10		and #$10			and 	#NSBIsString
.a5f5		f0 09		beq $a600			beq 	HelperTypeError
.a5f7						CopyAddressToTemp0:
.a5f7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a5f9		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a5fb		b5 60		lda $60,x			lda 	NSMantissa1,x
.a5fd		85 37		sta $37				sta 	zTemp0+1
.a5ff		60		rts				rts
.a600						HelperTypeError:
.a600		4c 59 b1	jmp $b159			jmp 	TypeError
.a603						EvaluateInteger:
.a603		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber
.a606		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a608		d0 09		bne $a613			bne 	HelperValueError 			; if not, it's a float.
.a60a		60		rts				rts
.a60b						EvaluateUnsignedInteger:
.a60b		20 03 a6	jsr $a603			jsr 	EvaluateInteger 			; check integer is +ve
.a60e		b5 50		lda $50,x			lda 	NSStatus,x
.a610		30 01		bmi $a613			bmi 	HelperValueError
.a612		60		rts				rts
.a613						HelperValueError:
.a613		4c 5e b1	jmp $b15e			jmp 	ArgumentError
.a616						Evaluate16BitInteger:
.a616		20 0b a6	jsr $a60b			jsr	 	EvaluateUnsignedInteger		; get integer
.a619		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a61b		15 68		ora $68,x			ora 	NSMantissa2,x
.a61d		d0 f4		bne $a613			bne 	HelperValueError
.a61f		60		rts				rts
.a620						Evaluate16BitIntegerSigned:
.a620		20 03 a6	jsr $a603			jsr	 	EvaluateInteger				; get integer
.a623		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a625		15 68		ora $68,x			ora 	NSMantissa2,x
.a627		d0 ea		bne $a613			bne 	HelperValueError
.a629		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a62b		10 03		bpl $a630			bpl 	_EISNotSigned
.a62d		20 5f a6	jsr $a65f			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a630						_EISNotSigned:
.a630		60		rts				rts
.a631						Evaluate8BitInteger:
.a631		20 0b a6	jsr $a60b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a634		d0 dd		bne $a613			bne 	HelperValueError
.a636		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a638		15 68		ora $68,x			ora 	NSMantissa2,x
.a63a		15 60		ora $60,x			ora 	NSMantissa1,x
.a63c		d0 d5		bne $a613			bne 	HelperValueError
.a63e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a640		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a641						Multiply8x8:
.a641		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a642		85 36		sta $36			  	sta 	zTemp0
.a644		86 37		stx $37				stx 	zTemp0+1
.a646		a9 00		lda #$00			lda 	#0
.a648		a2 08		ldx #$08			ldx 	#8
.a64a						_M88Loop:
.a64a		90 03		bcc $a64f			bcc 	_M88NoAdd
.a64c		18		clc				clc
.a64d		65 37		adc $37				adc 	zTemp0+1
.a64f						_M88NoAdd:
.a64f		6a		ror a				ror 	a
.a650		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a652		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a653		d0 f5		bne $a64a			bne 	_M88Loop
.a655		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a657		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a658						NSMNegate:
.a658		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a65a		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a65c		95 50		sta $50,x			sta 	NSStatus,x
.a65e		60		rts				rts
.a65f						NSMNegateMantissa:
.a65f		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a660		a9 00		lda #$00			lda 	#0
.a662		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a664		95 58		sta $58,x			sta 	NSMantissa0,x
.a666		a9 00		lda #$00			lda 	#0
.a668		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a66a		95 60		sta $60,x			sta 	NSMantissa1,x
.a66c		a9 00		lda #$00			lda 	#0
.a66e		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a670		95 68		sta $68,x			sta 	NSMantissa2,x
.a672		a9 00		lda #$00			lda 	#0
.a674		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a676		95 70		sta $70,x			sta 	NSMantissa3,x
.a678		60		rts				rts
.a679						NSMShiftUpTwo:
.a679		b5 58		lda $58,x			lda 	NSMantissa0,x
.a67b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a67d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a67f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a681		b5 68		lda $68,x			lda 	NSMantissa2,x
.a683		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a685		b5 70		lda $70,x			lda 	NSMantissa3,x
.a687		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a689		b5 78		lda $78,x			lda 	NSExponent,x
.a68b		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a68d		b5 50		lda $50,x			lda 	NSStatus,x
.a68f		95 52		sta $52,x			sta 	NSStatus+2,x
.a691		60		rts				rts
.a692						NSMSetZeroMantissaOnly:
.a692		a9 00		lda #$00			lda 	#0
.a694		80 06		bra $a69c			bra 	NSMSetMantissa
.a696						NSMSetZero:
.a696		a9 00		lda #$00			lda 	#0
.a698						NSMSetByte:
.a698		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a69a		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a69c						NSMSetMantissa:
.a69c		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a69e		74 60		stz $60,x			stz 	NSMantissa1,x
.a6a0		74 68		stz $68,x			stz 	NSMantissa2,x
.a6a2		74 70		stz $70,x			stz 	NSMantissa3,x
.a6a4		60		rts				rts
.a6a5						NSMShiftLeft:
.a6a5		18		clc				clc
.a6a6						NSMRotateLeft:
.a6a6		36 58		rol $58,x			rol 	NSMantissa0,x
.a6a8		36 60		rol $60,x			rol		NSMantissa1,x
.a6aa		36 68		rol $68,x			rol		NSMantissa2,x
.a6ac		36 70		rol $70,x			rol		NSMantissa3,x
.a6ae		60		rts				rts
.a6af						NSMShiftRight:
.a6af		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a6b1		76 68		ror $68,x			ror		NSMantissa2,x
.a6b3		76 60		ror $60,x			ror		NSMantissa1,x
.a6b5		76 58		ror $58,x			ror		NSMantissa0,x
.a6b7		60		rts				rts
.a6b8						NSMIsZero:
.a6b8		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6ba		15 68		ora $68,x			ora		NSMantissa2,x
.a6bc		15 60		ora $60,x			ora		NSMantissa1,x
.a6be		15 58		ora $58,x			ora		NSMantissa0,x
.a6c0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/font_update/newfont.asm

.a6c1						UpdateFont:
.a6c1		a5 01		lda $01				lda 	1 							; save position
.a6c3		48		pha				pha
.a6c4		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a6c6		85 01		sta $01				sta 	1
.a6c8		a9 ef		lda #$ef			lda 	#((FontBinary) & $FF)
.a6ca		85 36		sta $36				sta 	0+zTemp0
.a6cc		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a6ce		85 37		sta $37				sta 	1+zTemp0
.a6d0		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a6d2		85 38		sta $38				sta 	0+zTemp1
.a6d4		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a6d6		85 39		sta $39				sta 	1+zTemp1
.a6d8						_UFCopy1:
.a6d8		a0 00		ldy #$00			ldy 	#0
.a6da						_UFCopy2:
.a6da		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6dc		91 38		sta ($38),y			sta 	(zTemp1),y
.a6de		c8		iny				iny
.a6df		d0 f9		bne $a6da			bne 	_UFCopy2
.a6e1		e6 37		inc $37				inc 	zTemp0+1
.a6e3		e6 39		inc $39				inc 	zTemp1+1
.a6e5		a5 39		lda $39				lda 	zTemp1+1
.a6e7		c9 c8		cmp #$c8			cmp 	#$C8
.a6e9		d0 ed		bne $a6d8			bne 	_UFCopy1
.a6eb		68		pla				pla 								; restore.
.a6ec		85 01		sta $01				sta 	1
.a6ee		60		rts				rts
.a6ef						FontBinary:
>a6ef		06 09 10 3c 10 21 7e 00				.binary 	"../../common/generated/font.bin"
>a6f7		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a707		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a717		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a727		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a737		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a747		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a757		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a767		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a777		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a787		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a797		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a7a7		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a7b7		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a7c7		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a7d7		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a7e7		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a7f7		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a807		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a817		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a827		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a837		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a847		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a857		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a867		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a877		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a887		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a897		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a8a7		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a8b7		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a8c7		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a8d7		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a8e7		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a8f7		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a907		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>a917		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a927		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a937		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a947		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a957		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a967		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a977		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a987		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a997		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a9a7		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a9b7		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a9c7		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a9d7		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a9e7		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a9f7		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa07		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>aa17		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aa27		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa37		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aa47		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aa57		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aa67		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aa77		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aa87		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aa97		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>aaa7		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aab7		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aac7		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aad7		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>aae7		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aaf7		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab07		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab17		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ab27		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab37		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ab47		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ab57		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ab67		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ab77		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ab87		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ab97		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>aba7		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>abb7		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>abc7		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>abd7		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>abe7		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>abf7		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac07		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac17		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ac27		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac37		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ac47		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ac57		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ac67		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ac77		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ac87		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>ac97		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>aca7		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>acb7		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>acc7		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>acd7		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>ace7		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>acf7		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad07		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad17		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ad27		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad37		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ad47		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ad57		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ad67		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ad77		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ad87		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ad97		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ada7		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>adb7		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>adc7		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>add7		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>ade7		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>adf7		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>ae07		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>ae17		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ae27		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae37		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>ae47		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>ae57		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>ae67		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>ae77		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>ae87		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>ae97		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>aea7		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>aeb7		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>aec7		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>aed7		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>aee7		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.aeef						UnaryGetTime:
.aeef		a9 00		lda #$00			lda 	#0
.aef1		80 02		bra $aef5			bra 	UGDTMain
.aef3						UnaryGetDate:
.aef3		a9 03		lda #$03			lda 	#3
.aef5						UGDTMain:
.aef5		fa		plx				plx 								; get stack position back
.aef6		48		pha				pha 								; save table offset
.aef7		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger			; ignored parameter
.aefa		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; closing )
.aefd		68		pla				pla 								; table offset in A
.aefe		5a		phy				phy 								; saving Y
.aeff		a8		tay				tay 								; table offset in Y
.af00		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.af02		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.af05		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.af07		48		pha				pha
.af08		64 01		stz $01				stz 	1
.af0a		20 1d af	jsr $af1d			jsr 	UGDTDigit 					; do XX:YY:ZZ
.af0d		20 18 af	jsr $af18			jsr 	UGDTColonDigit
.af10		20 18 af	jsr $af18			jsr 	UGDTColonDigit
.af13		68		pla				pla 								; restore I/O select
.af14		85 01		sta $01				sta 	1
.af16		7a		ply				ply  								; restore code position
.af17		60		rts				rts
.af18						UGDTColonDigit:
.af18		a9 3a		lda #$3a			lda 	#':'
.af1a		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.af1d						UGDTDigit:
.af1d		da		phx				phx 								; save X
.af1e		b9 3d af	lda $af3d,y			lda 	RTCROffset,y 				; get offset in RTC register
.af21		aa		tax				tax
.af22		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.af25		39 43 af	and $af43,y			and 	RTCRMask,y 					; and with Mask.
.af28		fa		plx				plx
.af29		48		pha				pha 								; output in BCD
.af2a		4a		lsr a				lsr 	a
.af2b		4a		lsr a				lsr 	a
.af2c		4a		lsr a				lsr 	a
.af2d		4a		lsr a				lsr 	a
.af2e		09 30		ora #$30			ora 	#48
.af30		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.af33		68		pla				pla
.af34		29 0f		and #$0f			and 	#15
.af36		09 30		ora #$30			ora 	#48
.af38		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.af3b		c8		iny				iny
.af3c		60		rts				rts
.af3d						RTCROffset:
>af3d		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.af43						RTCRMask:
>af43		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.af49						AscGet:
.af49		fa		plx				plx 								; restore stack pos
.af4a						AscGet2:
.af4a		20 23 97	jsr $9723			jsr 	CheckRightBracket
.af4d		20 37 81	jsr $8137	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.af50		d0 0b		bne $af5d			bne 	_AGBreak
.af52		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; wait for key.
.af55		c9 00		cmp #$00			cmp 	#0
.af57		f0 f4		beq $af4d			beq 	_AGKey
.af59		20 98 a6	jsr $a698			jsr 	NSMSetByte
.af5c		60		rts				rts
.af5d						_AGBreak:
.af5d		a9 01		lda #$01		lda	#1
.af5f		4c 3c 97	jmp $973c		jmp	ErrorHandler
.af62						AscInkey:
.af62		fa		plx				plx 								; restore stack pos
.af63						AscInkey2:
.af63		20 23 97	jsr $9723			jsr 	CheckRightBracket
.af66		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.af69		20 98 a6	jsr $a698			jsr 	NSMSetByte
.af6c		60		rts				rts
.af6d						ChrGet:
.af6d		fa		plx				plx
.af6e		20 4a af	jsr $af4a			jsr 	AscGet2
.af71		4c 78 af	jmp $af78			jmp 	GetInkeyToString
.af74						ChrInkey:
.af74		fa		plx				plx
.af75		20 63 af	jsr $af63			jsr 	AscInkey2
.af78						GetInkeyToString:
.af78		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.af7a		f0 0b		beq $af87			beq 	_GKISNull
.af7c		48		pha				pha
.af7d		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.af7f		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.af82		68		pla				pla 								; write number to it
.af83		20 f2 b8	jsr $b8f2			jsr 	StringTempWrite
.af86		60		rts				rts
.af87						_GKISNull:
.af87		a9 00		lda #$00			lda 	#0
.af89		20 b9 b8	jsr $b8b9			jsr 	StringTempAllocate
.af8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.af8d						Unary_Random:
.af8d		fa		plx				plx
.af8e		20 de af	jsr $afde			jsr 	URCopyToMantissa  			; put random # in mantissa
.af91		b1 30		lda ($30),y			lda 	(codePtr),y
.af93		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.af95		f0 08		beq $af9f			beq 	_URNoModulus 				; then we return a random 30 bit number.
.af97		e8		inx				inx
.af98		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.af9b		ca		dex				dex
.af9c		20 fb 98	jsr $98fb			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.af9f						_URNoModulus:
.af9f		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.afa1		74 78		stz $78,x			stz 	NSExponent,x
.afa3		20 23 97	jsr $9723			jsr 	CheckRightBracket
.afa6		60		rts				rts
.afa7						Unary_Rnd:
.afa7		fa		plx				plx
.afa8		20 e4 a5	jsr $a5e4			jsr 	EvaluateNumber 				; number to use.
.afab		20 23 97	jsr $9723			jsr 	CheckRightBracket 			; closing bracket
.afae		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.afb0		10 20		bpl $afd2			bpl 	_URDontSeed
.afb2		a5 01		lda $01				lda 	1 							; switch to page 0
.afb4		48		pha				pha
.afb5		64 01		stz $01				stz 	1
.afb7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.afb9		49 17		eor #$17			eor 	#$17
.afbb		8d a4 d6	sta $d6a4			sta 	$D6A4
.afbe		b5 60		lda $60,x			lda 	NSMantissa1,x
.afc0		49 a5		eor #$a5			eor 	#$A5
.afc2		8d a5 d6	sta $d6a5			sta 	$D6A5
.afc5		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.afc7		8d a6 d6	sta $d6a6			sta 	$D6A6
.afca		a9 01		lda #$01			lda 	#1
.afcc		8d a6 d6	sta $d6a6			sta 	$D6A6
.afcf		68		pla				pla
.afd0		85 01		sta $01				sta 	1
.afd2						_URDontSeed:
.afd2		20 de af	jsr $afde			jsr 	URCopyToMantissa 			; copy into mantissa
.afd5		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.afd7		95 78		sta $78,x			sta 	NSExponent,x
.afd9		a9 08		lda #$08			lda 	#NSTFloat
.afdb		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.afdd		60		rts				rts
.afde						URCopyToMantissa:
.afde		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.afe0		48		pha				pha
.afe1		64 01		stz $01				stz 	1
.afe3		a9 01		lda #$01			lda 	#1
.afe5		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.afe8		ad a4 d6	lda $d6a4			lda 	$D6A4
.afeb		95 58		sta $58,x			sta 	NSMantissa0,x
.afed		ad a5 d6	lda $d6a5			lda 	$D6A5
.aff0		95 60		sta $60,x			sta 	NSMantissa1,x
.aff2		ad a4 d6	lda $d6a4			lda 	$D6A4
.aff5		95 68		sta $68,x			sta 	NSMantissa2,x
.aff7		ad a5 d6	lda $d6a5			lda 	$D6A5
.affa		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.affc		95 70		sta $70,x			sta 	NSMantissa3,x
.affe		68		pla				pla
.afff		85 01		sta $01				sta 	1
.b001		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b002						Assemble_ora:
.b002		20 89 82	jsr $8289		jsr	AssembleGroup1
>b005		01					.byte $01
.b006						Assemble_and:
.b006		20 89 82	jsr $8289		jsr	AssembleGroup1
>b009		21					.byte $21
.b00a						Assemble_eor:
.b00a		20 89 82	jsr $8289		jsr	AssembleGroup1
>b00d		41					.byte $41
.b00e						Assemble_adc:
.b00e		20 89 82	jsr $8289		jsr	AssembleGroup1
>b011		61					.byte $61
.b012						Assemble_sta:
.b012		20 89 82	jsr $8289		jsr	AssembleGroup1
>b015		81					.byte $81
.b016						Assemble_lda:
.b016		20 89 82	jsr $8289		jsr	AssembleGroup1
>b019		a1					.byte $a1
.b01a						Assemble_cmp:
.b01a		20 89 82	jsr $8289		jsr	AssembleGroup1
>b01d		c1					.byte $c1
.b01e						Assemble_sbc:
.b01e		20 89 82	jsr $8289		jsr	AssembleGroup1
>b021		e1					.byte $e1
.b022						Assemble_asl:
.b022		20 90 82	jsr $8290		jsr	AssembleGroup2
>b025		02					.byte $02
>b026		75					.byte $75
.b027						Assemble_rol:
.b027		20 90 82	jsr $8290		jsr	AssembleGroup2
>b02a		22					.byte $22
>b02b		75					.byte $75
.b02c						Assemble_lsr:
.b02c		20 90 82	jsr $8290		jsr	AssembleGroup2
>b02f		42					.byte $42
>b030		75					.byte $75
.b031						Assemble_ror:
.b031		20 90 82	jsr $8290		jsr	AssembleGroup2
>b034		62					.byte $62
>b035		75					.byte $75
.b036						Assemble_stx:
.b036		20 90 82	jsr $8290		jsr	AssembleGroup2
>b039		82					.byte $82
>b03a		50					.byte $50
.b03b						Assemble_ldx:
.b03b		20 90 82	jsr $8290		jsr	AssembleGroup2
>b03e		a2					.byte $a2
>b03f		d0					.byte $d0
.b040						Assemble_dec:
.b040		20 90 82	jsr $8290		jsr	AssembleGroup2
>b043		c2					.byte $c2
>b044		55					.byte $55
.b045						Assemble_inc:
.b045		20 90 82	jsr $8290		jsr	AssembleGroup2
>b048		e2					.byte $e2
>b049		55					.byte $55
.b04a						Assemble_stz:
.b04a		20 90 82	jsr $8290		jsr	AssembleGroup2
>b04d		60					.byte $60
>b04e		44					.byte $44
.b04f						Assemble_bit:
.b04f		20 90 82	jsr $8290		jsr	AssembleGroup2
>b052		20					.byte $20
>b053		55					.byte $55
.b054						Assemble_sty:
.b054		20 90 82	jsr $8290		jsr	AssembleGroup2
>b057		80					.byte $80
>b058		54					.byte $54
.b059						Assemble_ldy:
.b059		20 90 82	jsr $8290		jsr	AssembleGroup2
>b05c		a0					.byte $a0
>b05d		d5					.byte $d5
.b05e						Assemble_cpy:
.b05e		20 90 82	jsr $8290		jsr	AssembleGroup2
>b061		c0					.byte $c0
>b062		d4					.byte $d4
.b063						Assemble_cpx:
.b063		20 90 82	jsr $8290		jsr	AssembleGroup2
>b066		e0					.byte $e0
>b067		d0					.byte $d0
.b068						Assemble_tsb:
.b068		20 90 82	jsr $8290		jsr	AssembleGroup2
>b06b		00					.byte $00
>b06c		50					.byte $50
.b06d						Assemble_trb:
.b06d		20 90 82	jsr $8290		jsr	AssembleGroup2
>b070		10					.byte $10
>b071		50					.byte $50
.b072						Assemble_jsr:
.b072		20 90 82	jsr $8290		jsr	AssembleGroup2
>b075		14					.byte $14
>b076		10					.byte $10
.b077						Assemble_jmp:
.b077		20 90 82	jsr $8290		jsr	AssembleGroup2
>b07a		40					.byte $40
>b07b		10					.byte $10
.b07c						Assemble_bpl:
.b07c		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b07f		10					.byte $10
.b080						Assemble_bmi:
.b080		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b083		30					.byte $30
.b084						Assemble_bvc:
.b084		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b087		50					.byte $50
.b088						Assemble_bvs:
.b088		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b08b		70					.byte $70
.b08c						Assemble_bcc:
.b08c		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b08f		90					.byte $90
.b090						Assemble_bcs:
.b090		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b093		b0					.byte $b0
.b094						Assemble_bne:
.b094		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b097		d0					.byte $d0
.b098						Assemble_beq:
.b098		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b09b		f0					.byte $f0
.b09c						Assemble_bra:
.b09c		20 e1 82	jsr $82e1		jsr	AssembleGroup3
>b09f		80					.byte $80
.b0a0						Assemble_brk:
.b0a0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0a3		00					.byte $00
.b0a4						Assemble_php:
.b0a4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0a7		08					.byte $08
.b0a8						Assemble_clc:
.b0a8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0ab		18					.byte $18
.b0ac						Assemble_plp:
.b0ac		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0af		28					.byte $28
.b0b0						Assemble_sec:
.b0b0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0b3		38					.byte $38
.b0b4						Assemble_rti:
.b0b4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0b7		40					.byte $40
.b0b8						Assemble_pha:
.b0b8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0bb		48					.byte $48
.b0bc						Assemble_cli:
.b0bc		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0bf		58					.byte $58
.b0c0						Assemble_phy:
.b0c0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0c3		5a					.byte $5a
.b0c4						Assemble_rts:
.b0c4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0c7		60					.byte $60
.b0c8						Assemble_pla:
.b0c8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0cb		68					.byte $68
.b0cc						Assemble_sei:
.b0cc		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0cf		78					.byte $78
.b0d0						Assemble_ply:
.b0d0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0d3		7a					.byte $7a
.b0d4						Assemble_dey:
.b0d4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0d7		88					.byte $88
.b0d8						Assemble_txa:
.b0d8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0db		8a					.byte $8a
.b0dc						Assemble_tya:
.b0dc		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0df		98					.byte $98
.b0e0						Assemble_txs:
.b0e0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0e3		9a					.byte $9a
.b0e4						Assemble_tay:
.b0e4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0e7		a8					.byte $a8
.b0e8						Assemble_tax:
.b0e8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0eb		aa					.byte $aa
.b0ec						Assemble_clv:
.b0ec		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0ef		b8					.byte $b8
.b0f0						Assemble_tsx:
.b0f0		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0f3		ba					.byte $ba
.b0f4						Assemble_iny:
.b0f4		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0f7		c8					.byte $c8
.b0f8						Assemble_dex:
.b0f8		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0fb		ca					.byte $ca
.b0fc						Assemble_cld:
.b0fc		20 15 83	jsr $8315		jsr	AssembleGroup4
>b0ff		d8					.byte $d8
.b100						Assemble_phx:
.b100		20 15 83	jsr $8315		jsr	AssembleGroup4
>b103		da					.byte $da
.b104						Assemble_stp:
.b104		20 15 83	jsr $8315		jsr	AssembleGroup4
>b107		db					.byte $db
.b108						Assemble_inx:
.b108		20 15 83	jsr $8315		jsr	AssembleGroup4
>b10b		e8					.byte $e8
.b10c						Assemble_nop:
.b10c		20 15 83	jsr $8315		jsr	AssembleGroup4
>b10f		ea					.byte $ea
.b110						Assemble_sed:
.b110		20 15 83	jsr $8315		jsr	AssembleGroup4
>b113		f8					.byte $f8
.b114						Assemble_plx:
.b114		20 15 83	jsr $8315		jsr	AssembleGroup4
>b117		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b118						DecimalScalarTable:
>b118		66 66 66 66				.dword $66666666 ; 0.1
>b11c		de					.byte $de
>b11d		1f 85 eb 51				.dword $51eb851f ; 0.01
>b121		db					.byte $db
>b122		4c 37 89 41				.dword $4189374c ; 0.001
>b126		d8					.byte $d8
>b127		ac 8b db 68				.dword $68db8bac ; 0.0001
>b12b		d4					.byte $d4
>b12c		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b130		d1					.byte $d1
>b131		83 de 1b 43				.dword $431bde83 ; 1e-06
>b135		ce					.byte $ce
>b136		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b13a		ca					.byte $ca
>b13b		89 3b e6 55				.dword $55e63b89 ; 1e-08
>b13f		c7					.byte $c7
>b140		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b144		c4					.byte $c4
>b145		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b149		c0					.byte $c0
>b14a		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b14e		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b14f						SyntaxError:
.b14f		a9 02		lda #$02		lda	#2
.b151		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b154						RangeError:
.b154		a9 04		lda #$04		lda	#4
.b156		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b159						TypeError:
.b159		a9 05		lda #$05		lda	#5
.b15b		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b15e						ArgumentError:
.b15e		a9 07		lda #$07		lda	#7
.b160		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b163						NotDoneError:
.b163		a9 0c		lda #$0c		lda	#12
.b165		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b168						ErrorText:
>b168		42 72 65 61 6b 00			.text	"Break",0
>b16e		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b176		72 72 6f 72 00
>b17b		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b183		20 62 79 20 7a 65 72 6f 00
>b18c		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b194		61 6e 67 65 00
>b199		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b1a1		6d 61 74 63 68 00
>b1a7		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b1af		65 6d 6f 72 79 00
>b1b5		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b1bd		61 72 67 75 6d 65 6e 74 00
>b1c6		53 74 6f 70 00				.text	"Stop",0
>b1cb		53 74 72 69 6e 67 20 74			.text	"String too long",0
>b1d3		6f 6f 20 6c 6f 6e 67 00
>b1db		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b1e3		6e 20 66 61 69 6c 65 64 00
>b1ec		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b1f4		61 74 61 00
>b1f8		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b200		65 6e 74 65 64 00
>b206		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b20e		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b21a		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b222		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b22f		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b237		74 68 6f 75 74 20 52 65 70 65 61 74 00
>b244		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b24c		68 6f 75 74 20 57 68 69 6c 65 00
>b257		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b25f		68 6f 75 74 20 46 6f 72 00
>b268		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b270		61 63 6b 20 66 75 6c 6c 00
>b279		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b281		75 63 74 75 72 65 00
>b288		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b290		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b29d		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b2a5		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b2b3		41 72 72 61 79 20 73 69			.text	"Array size",0
>b2bb		7a 65 00
>b2be		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b2c6		79 20 69 6e 64 65 78 00
>b2ce		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>b2d6		74 20 64 65 63 6c 61 72 65 64 00
>b2e1		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>b2e9		20 66 6f 75 6e 64 00
>b2f0		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>b2f8		65 72 72 6f 72 00
>b2fe		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>b306		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc54		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>dc5c		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.b30c						MemoryDeleteLine:
.b30c		20 2b b3	jsr $b32b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b30f		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b311		a8		tay				tay
.b312						_MDDLLoop:
.b312		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b314		92 30		sta ($30)			sta 	(codePtr)
.b316		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b318		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.b31a		d0 07		bne $b323			bne 	_MDLDLNext
.b31c		a5 31		lda $31				lda 	codePtr+1
.b31e		c5 3b		cmp $3b				cmp 	zTemp2+1
.b320		d0 01		bne $b323			bne 	_MDLDLNext
.b322						_MDDLExit:
.b322		60		rts				rts
.b323						_MDLDLNext:
.b323		e6 30		inc $30				inc 	codePtr						; next byte
.b325		d0 eb		bne $b312			bne 	_MDDLLoop
.b327		e6 31		inc $31				inc 	codePtr+1
.b329		80 e7		bra $b312			bra 	_MDDLLoop
.b32b						IMemoryFindEnd:
.b32b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b32d		85 3a		sta $3a				sta 	0+zTemp2
.b32f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b331		85 3b		sta $3b				sta 	1+zTemp2
.b333						_MDLFELoop:
.b333		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.b335		f0 0b		beq $b342			beq 	_MDLFEExit
.b337		18		clc				clc
.b338		65 3a		adc $3a				adc 	zTemp2
.b33a		85 3a		sta $3a				sta 	zTemp2
.b33c		90 f5		bcc $b333			bcc 	_MDLFELoop
.b33e		e6 3b		inc $3b				inc 	zTemp2+1
.b340		80 f1		bra $b333			bra 	_MDLFELoop
.b342						_MDLFEExit:
.b342		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.b343						MemoryInsertLine:
.b343		08		php				php
.b344		20 2b b3	jsr $b32b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b347		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.b349		1a		inc a				inc 	a
.b34a		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b34c		b0 36		bcs $b384			bcs 	_MDLIError 					; no, fail.
.b34e		28		plp				plp 								; do at a specific point or the end ?
.b34f		90 08		bcc $b359			bcc 	_MDLIFound 					; if specific point already set.
.b351		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.b353		85 30		sta $30				sta 	codePtr 					; end.
.b355		a5 3b		lda $3b				lda 	zTemp2+1
.b357		85 31		sta $31				sta 	codePtr+1
.b359						_MDLIFound:
.b359		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b35c		a8		tay				tay
.b35d						_MDLIInsert:
.b35d		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.b35f		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b361		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.b363		c5 3a		cmp $3a				cmp 	zTemp2
.b365		d0 06		bne $b36d			bne 	_MDLINext
.b367		a5 31		lda $31				lda 	codePtr+1
.b369		c5 3b		cmp $3b				cmp 	zTemp2+1
.b36b		f0 0a		beq $b377			beq 	_MDLIHaveSpace
.b36d						_MDLINext:
.b36d		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.b36f		d0 02		bne $b373			bne 	_MDLINoBorrow
.b371		c6 3b		dec $3b				dec 	zTemp2+1
.b373						_MDLINoBorrow:
.b373		c6 3a		dec $3a				dec 	zTemp2
.b375		80 e6		bra $b35d			bra 	_MDLIInsert
.b377						_MDLIHaveSpace:
.b377		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.b37a		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.b37b						_MDLICopy:
.b37b		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.b37e		91 30		sta ($30),y			sta 	(codePtr),y
.b380		88		dey				dey
.b381		10 f8		bpl $b37b			bpl 	_MDLICopy
.b383		60		rts				rts
.b384						_MDLIError:
.b384		a9 06		lda #$06		lda	#6
.b386		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b389						MDLAppendLine:
.b389		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b38b		85 36		sta $36				sta 	zTemp0
.b38d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b38f		85 38		sta $38				sta 	0+zTemp1
.b391		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b393		85 39		sta $39				sta 	1+zTemp1
.b395		b2 38		lda ($38)			lda 	(zTemp1)
.b397		d0 0a		bne $b3a3			bne 	_MDLANoInitialise
.b399		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b39b		8d 74 07	sta $0774			sta 	0+AppendPointer
.b39e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3a0		8d 75 07	sta $0775			sta 	1+AppendPointer
.b3a3						_MDLANoInitialise:
.b3a3		18		clc				clc
.b3a4		ad 74 07	lda $0774			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b3a7		85 38		sta $38				sta 	zTemp1
.b3a9		72 36		adc ($36)			adc 	(zTemp0)
.b3ab		8d 74 07	sta $0774			sta 	AppendPointer
.b3ae		ad 75 07	lda $0775			lda 	AppendPointer+1
.b3b1		85 39		sta $39				sta 	zTemp1+1
.b3b3		69 00		adc #$00			adc 	#0
.b3b5		8d 75 07	sta $0775			sta 	AppendPointer+1
.b3b8		a0 00		ldy #$00			ldy 	#0
.b3ba						_MDLACopy:
.b3ba		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b3bc		91 38		sta ($38),y			sta 	(zTemp1),y
.b3be		c8		iny				iny
.b3bf		98		tya				tya
.b3c0		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b3c2		d0 f6		bne $b3ba			bne 	_MDLACopy
.b3c4		a9 00		lda #$00			lda 	#0 							; end of program.
.b3c6		91 38		sta ($38),y			sta 	(zTemp1),y
.b3c8		60		rts				rts
.0774						AppendPointer:
>0774								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.b3c9						MemoryNew:
.b3c9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3cb		85 30		sta $30				sta 	codePtr
.b3cd		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3cf		85 31		sta $31				sta 	codePtr+1
.b3d1		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.b3d3		92 30		sta ($30)			sta 	(codePtr)
.b3d5		60		rts				rts
.b3d6						MemoryInline:
.b3d6		98		tya				tya 								; put address into stack,x
.b3d7		18		clc				clc  								; get the offset, add codePtr
.b3d8		65 30		adc $30				adc 	codePtr
.b3da		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.b3dc		a5 31		lda $31				lda 	codePtr+1
.b3de		69 00		adc #$00			adc 	#0
.b3e0		95 60		sta $60,x			sta 	NSMantissa1,x
.b3e2		74 68		stz $68,x			stz 	NSMantissa2,x
.b3e4		74 70		stz $70,x			stz 	NSMantissa3,x
.b3e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.b3e7						MemorySearch:
.b3e7		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.b3e9		86 37		stx $37				stx 	zTemp0+1
.b3eb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3ed		85 30		sta $30				sta 	codePtr
.b3ef		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3f1		85 31		sta $31				sta 	codePtr+1
.b3f3						_MTAXLoop:
.b3f3		b2 30		lda ($30)			lda 	(codePtr)
.b3f5		18		clc				clc
.b3f6		f0 21		beq $b419			beq 	_MTAXExit 					; reached end, exit with CC.
.b3f8		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.b3fa		b1 30		lda ($30),y			lda 	(codePtr),y
.b3fc		38		sec				sec
.b3fd		e5 36		sbc $36				sbc 	zTemp0
.b3ff		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.b401		c8		iny				iny 								; do the MSB
.b402		b1 30		lda ($30),y			lda 	(codePtr),y
.b404		e5 37		sbc $37				sbc 	zTemp0+1
.b406		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.b408		f0 0f		beq $b419			beq 	_MTAXExit	 				; found so exit (CS will be set)
.b40a		b0 0d		bcs $b419			bcs 	_MTAXExit 					; current < required exit
.b40c		18		clc				clc
.b40d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b40f		65 30		adc $30				adc 	codePtr
.b411		85 30		sta $30				sta 	codePtr
.b413		90 02		bcc $b417			bcc 	_CREExit
.b415		e6 31		inc $31				inc 	codePtr+1 					; carry
.b417						_CREExit:
.b417		80 da		bra $b3f3			bra 	_MTAXLoop
.b419						_MTAXExit:
.b419		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.b41a						RectangleCommand:
.b41a		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.b41c		80 02		bra $b420			bra 	ShapeDrawCmd
.b41e						CircleCommand:
.b41e		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.b420						ShapeDrawCmd:
.b420		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b423						ShapeDraw:
.b423		0d 77 07	ora $0777			ora 	gxFillSolid  				; adjust AXY for solid fill.
.b426		4c 9e b4	jmp $b49e			jmp 	ExecuteGraphicCommand	 	; and complete
.b429						SpriteCommand:
.b429		a2 00		ldx #$00			ldx 	#0
.b42b		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get image number.
.b42e		5a		phy				phy
.b42f		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.b431		a6 58		ldx $58				ldx 	NSMantissa0
.b433		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.b435		b0 0d		bcs $b444			bcs 	_SCRange
.b437		a0 ff		ldy #$ff			ldy 	#255
.b439		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b43c		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.b43e		7a		ply				ply
.b43f		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b442		80 5a		bra $b49e			bra 	ExecuteGraphicCommand
.b444						_SCRange:
.b444		4c 54 b1	jmp $b154			jmp 	RangeError
.b447						ImageCommand:
.b447		a2 00		ldx #$00			ldx 	#0
.b449		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get image number.
.b44c		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b44f						ImageRunDraw:
.b44f		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.b451		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b454		ad 7d 07	lda $077d			lda 	gxDrawScale
.b457		0a		asl a				asl 	a
.b458		0a		asl a				asl 	a
.b459		0a		asl a				asl 	a
.b45a		a8		tay				tay
.b45b		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.b45d		a6 58		ldx $58				ldx 	NSMantissa0
.b45f		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b462		60		rts				rts
.b463						TextCommand:
.b463		a2 00		ldx #$00			ldx 	#0
.b465		20 ee a5	jsr $a5ee			jsr 	EvaluateString 				; get text
.b468		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b46b						TextRunDraw:
.b46b		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.b46d		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b470		a0 00		ldy #$00			ldy 	#0
.b472						_IRDLoop:
.b472		a5 60		lda $60				lda 	NSMantissa1 				; access character
.b474		85 37		sta $37				sta 	zTemp0+1
.b476		a5 58		lda $58				lda 	NSMantissa0
.b478		85 36		sta $36				sta 	zTemp0
.b47a		b1 36		lda ($36),y			lda 	(zTemp0),y
.b47c		f0 13		beq $b491			beq 	_IRDExit
.b47e		5a		phy				phy									; save string pos
.b47f		48		pha				pha 								; save char
.b480		ad 7d 07	lda $077d			lda 	gxDrawScale 				; get scale
.b483		0a		asl a				asl 	a
.b484		0a		asl a				asl 	a
.b485		0a		asl a				asl 	a
.b486		a8		tay				tay
.b487		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.b489		fa		plx				plx 								; char to draw
.b48a		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b48d		7a		ply				ply 								; restore string pos
.b48e		c8		iny				iny
.b48f		90 e1		bcc $b472			bcc 	_IRDLoop 					; go back if no error.
.b491						_IRDExit:
.b491		60		rts				rts
.b492						PlotCommand:
.b492		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.b494		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b497		80 05		bra $b49e			bra 	ExecuteGraphicCommand
.b499						LineCommand:
.b499		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.b49b		20 aa b4	jsr $b4aa			jsr 	RunGraphicsCommand
.b49e						ExecuteGraphicCommand:
.b49e		0d 76 07	ora $0776			ora 	gxCommandID 				; make a full command
.b4a1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.b4a4		b0 01		bcs $b4a7			bcs 	_EGCError
.b4a6		60		rts				rts
.b4a7						_EGCError:
.b4a7		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.b4aa						RunGraphicsCommand:
.b4aa		8d 76 07	sta $0776			sta 	gxCommandID					; save TODO graphics command.
.b4ad		68		pla				pla 								; pop handler address
.b4ae		fa		plx				plx
.b4af		1a		inc a				inc 	a
.b4b0		d0 01		bne $b4b3			bne 	_RGINoCarry
.b4b2		e8		inx				inx
.b4b3						_RGINoCarry:
.b4b3		8d 7b 07	sta $077b			sta 	gxHandler
.b4b6		8e 7c 07	stx $077c			stx 	gxHandler+1
.b4b9						_RGICommandLoop:
.b4b9		b1 30		lda ($30),y			lda 	(codePtr),y
.b4bb		c8		iny				iny
.b4bc		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.b4be		f0 53		beq $b513			beq 	_RGI_To
.b4c0		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.b4c2		f0 55		beq $b519			beq 	_RGI_Here
.b4c4		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.b4c6		f0 3d		beq $b505			beq 	_RGI_Exit
.b4c8		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.b4ca		f0 39		beq $b505			beq 	_RGI_Exit
.b4cc		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.b4ce		f0 3e		beq $b50e			beq 	_RGI_Frame
.b4d0		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.b4d2		f0 33		beq $b507			beq 	_RGI_Solid
.b4d4		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.b4d6		f0 4b		beq $b523			beq 	_RGI_By
.b4d8		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.b4da		f0 17		beq $b4f3			beq 	_RGI_Move2
.b4dc		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.b4de		f0 62		beq $b542			beq 	_RGI_Dim
.b4e0		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.b4e2		f0 74		beq $b558			beq 	_RGI_Colour
.b4e4		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.b4e6		f0 70		beq $b558			beq 	_RGI_Colour
.b4e8		ae 76 07	ldx $0776			ldx 	gxCommandID
.b4eb		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.b4ed		d0 03		bne $b4f2			bne 	_RGI_Move 					; move
.b4ef		4c 80 b5	jmp $b580			jmp		_RGI_SpriteInstructions
.b4f2						_RGI_Move:
.b4f2		88		dey				dey 								; unpick get.
.b4f3						_RGI_Move2:
.b4f3		20 a6 b5	jsr $b5a6			jsr 	GCGetCoordinatePair 		; move to here
.b4f6		20 cd b5	jsr $b5cd			jsr 	GCCopyPairToStore 			; save
.b4f9		5a		phy				phy
.b4fa		20 c3 b5	jsr $b5c3			jsr 	GCLoadAXY 					; load in
.b4fd		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.b4ff		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b502		7a		ply				ply
.b503		80 b4		bra $b4b9			bra 	_RGICommandLoop 			; and go round
.b505						_RGI_Exit:
.b505		88		dey				dey 								; unpick : / EOL
.b506		60		rts				rts
.b507						_RGI_Solid:
.b507		a9 02		lda #$02			lda 	#2
.b509		8d 77 07	sta $0777			sta 	gxFillSolid
.b50c		80 ab		bra $b4b9			bra 	_RGICommandLoop
.b50e						_RGI_Frame:
.b50e		9c 77 07	stz $0777			stz 	gxFillSolid
.b511		80 a6		bra $b4b9			bra 	_RGICommandLoop
.b513						_RGI_To:
.b513		20 a6 b5	jsr $b5a6			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.b516		20 cd b5	jsr $b5cd			jsr 	GCCopyPairToStore
.b519						_RGI_Here:
.b519		5a		phy				phy
.b51a		20 c3 b5	jsr $b5c3			jsr 	GCLoadAXY 					; load it into AXY
.b51d		20 7d b5	jsr $b57d			jsr 	_RGICallHandler 			; go do whatever it is.
.b520		7a		ply				ply
.b521		80 96		bra $b4b9			bra 	_RGICommandLoop 			; and go round
.b523						_RGI_By:
.b523		20 b3 b5	jsr $b5b3			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.b526		18		clc				clc
.b527		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b529		6d 78 07	adc $0778			adc 	gxXPos
.b52c		8d 78 07	sta $0778			sta 	gxXPos
.b52f		a5 61		lda $61				lda 	NSMantissa1+1
.b531		6d 79 07	adc $0779			adc 	gxXPos+1
.b534		8d 79 07	sta $0779			sta 	gxXPos+1
.b537		a5 5a		lda $5a				lda 	NSMantissa0+2
.b539		18		clc				clc
.b53a		6d 7a 07	adc $077a			adc 	gxYPos
.b53d		8d 7a 07	sta $077a			sta 	gxYPos
.b540		80 d7		bra $b519			bra 	_RGI_Here
.b542						_RGI_Dim:
.b542		a2 01		ldx #$01			ldx	 	#1
.b544		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.b547		a5 59		lda $59				lda 	NSMantissa0+1
.b549		c9 00		cmp #$00			cmp 	#0
.b54b		f0 2d		beq $b57a			beq 	_RGIRange
.b54d		c9 09		cmp #$09			cmp 	#8+1
.b54f		b0 29		bcs $b57a			bcs		_RGIRange
.b551		3a		dec a				dec 	a
.b552		8d 7d 07	sta $077d			sta 	gxDrawScale
.b555		4c b9 b4	jmp $b4b9			jmp 	_RGICommandLoop
.b558						_RGI_Colour:
.b558		a2 01		ldx #$01			ldx 	#1 							; colour
.b55a		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.b55d		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.b55f		20 96 a6	jsr $a696			jsr 	NSMSetZero
.b562		b1 30		lda ($30),y			lda 	(codePtr),y
.b564		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.b566		d0 04		bne $b56c			bne 	_RGICDefaultMode
.b568		c8		iny				iny
.b569		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.b56c						_RGICDefaultMode:
.b56c		5a		phy				phy
.b56d		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.b56f		a6 59		ldx $59				ldx 	NSMantissa0+1
.b571		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b573		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b576		7a		ply				ply
.b577		4c b9 b4	jmp $b4b9			jmp 	_RGICommandLoop 			; and go round
.b57a						_RGIRange:
.b57a		4c 54 b1	jmp $b154			jmp 	RangeError
.b57d						_RGICallHandler:
.b57d		6c 7b 07	jmp ($077b)			jmp 	(gxHandler)
.b580						_RGI_SpriteInstructions:
.b580		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b582		f0 07		beq $b58b			beq 	_RGISpriteOff
.b584		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.b586		f0 13		beq $b59b			beq 	_RGISetImage
.b588		4c f2 b4	jmp $b4f2			jmp 	_RGI_Move
.b58b						_RGISpriteOff:
.b58b		5a		phy				phy
.b58c		a0 01		ldy #$01			ldy 	#1
.b58e		a2 00		ldx #$00			ldx 	#0
.b590						_RGIDoCommandLoop:
.b590		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.b592		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b595		7a		ply				ply
.b596		b0 e2		bcs $b57a			bcs 	_RGIRange
.b598		4c b9 b4	jmp $b4b9			jmp 	_RGICommandLoop
.b59b						_RGISetImage:
.b59b		a2 01		ldx #$01			ldx 	#1
.b59d		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger
.b5a0		5a		phy				phy
.b5a1		aa		tax				tax
.b5a2		a0 00		ldy #$00			ldy 	#0
.b5a4		80 ea		bra $b590			bra 	_RGIDoCommandLoop
.b5a6						GCGetCoordinatePair:
.b5a6		a2 01		ldx #$01			ldx 	#1
.b5a8		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.b5ab		20 2b 97	jsr $972b			jsr 	CheckComma
.b5ae		e8		inx				inx
.b5af		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger
.b5b2		60		rts				rts
.b5b3						GCSignedCoordinatePair:
.b5b3		a2 01		ldx #$01			ldx 	#1
.b5b5		20 20 a6	jsr $a620			jsr 	Evaluate16BitIntegerSigned
.b5b8		20 2b 97	jsr $972b			jsr 	CheckComma
.b5bb		e8		inx				inx
.b5bc		20 20 a6	jsr $a620			jsr 	Evaluate16BitIntegerSigned
.b5bf		60		rts				rts
.b5c0						_GCCPRange:
.b5c0		4c 54 b1	jmp $b154			jmp 	RangeError
.b5c3						GCLoadAXY:
.b5c3		ad 79 07	lda $0779			lda 	gxXPos+1
.b5c6		ae 78 07	ldx $0778			ldx 	gxXPos
.b5c9		ac 7a 07	ldy $077a			ldy 	gxYPos
.b5cc		60		rts				rts
.b5cd						GCCopyPairToStore:
.b5cd		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b5cf		8d 78 07	sta $0778			sta 	gxXPos
.b5d2		a5 61		lda $61				lda 	NSMantissa1+1
.b5d4		8d 79 07	sta $0779			sta 	gxXPos+1
.b5d7		a5 5a		lda $5a				lda 	NSMantissa0+2
.b5d9		8d 7a 07	sta $077a			sta 	gxYPos
.b5dc		60		rts				rts
.0776						gxCommandID:
>0776								.fill 	1
.0777						gxFillSolid:
>0777								.fill 	1
.0778						gxXPos:
>0778								.fill 	2
.077a						gxYPos:
>077a								.fill 	1
.077b						gxHandler:
>077b								.fill 	2
.077d						gxDrawScale:
>077d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.b5dd						BitmapCtrl:
.b5dd		b1 30		lda ($30),y			lda 	(codePtr),y
.b5df		c8		iny				iny
.b5e0		a2 01		ldx #$01			ldx 	#1
.b5e2		c9 cb		cmp #$cb			cmp 	#KWD_ON
.b5e4		f0 11		beq $b5f7			beq 	BitmapSwitch
.b5e6		ca		dex				dex
.b5e7		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b5e9		f0 0c		beq $b5f7			beq 	BitmapSwitch
.b5eb		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get the colour
.b5ee		5a		phy				phy
.b5ef		aa		tax				tax
.b5f0		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.b5f2		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b5f5		7a		ply				ply
.b5f6		60		rts				rts
.b5f7						BitmapSwitch:
.b5f7		5a		phy				phy
.b5f8		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.b5fa		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.b5fc		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b5ff		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.b601		a0 00		ldy #$00			ldy 	#0
.b603		a2 ff		ldx #$ff			ldx 	#$FF
.b605		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b608		9c 77 07	stz $0777			stz 	gxFillSolid
.b60b		9c 78 07	stz $0778			stz 	gxXPos
.b60e		9c 79 07	stz $0779			stz 	gxXPos+1
.b611		9c 7a 07	stz $077a			stz 	gxYPos
.b614		9c 7d 07	stz $077d			stz 	gxDrawScale
.b617		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.b619		a2 00		ldx #$00			ldx 	#0
.b61b		a0 00		ldy #$00			ldy 	#0
.b61d		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b620		7a		ply				ply
.b621		60		rts				rts
.b622						SpritesCtrl:
.b622		b1 30		lda ($30),y			lda 	(codePtr),y
.b624		c8		iny				iny
.b625		a2 01		ldx #$01			ldx 	#1
.b627		c9 cb		cmp #$cb			cmp 	#KWD_ON
.b629		f0 08		beq $b633			beq 	SpriteSwitch
.b62b		ca		dex				dex
.b62c		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b62e		f0 03		beq $b633			beq 	SpriteSwitch
.b630		4c 4f b1	jmp $b14f			jmp 	SyntaxError
.b633						SpriteSwitch:
.b633		5a		phy				phy
.b634		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.b636		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.b638		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b63b		7a		ply				ply
.b63c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.b63d						GfxCommand:
.b63d		a2 00		ldx #$00			ldx 	#0
.b63f		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; command
.b642		20 2b 97	jsr $972b			jsr 	CheckComma
.b645		e8		inx				inx
.b646		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; X
.b649		20 2b 97	jsr $972b			jsr 	CheckComma
.b64c		e8		inx				inx
.b64d		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; Y
.b650		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.b652		4a		lsr a				lsr 	a
.b653		d0 12		bne $b667			bne 	_GfxError
.b655		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.b657		b0 0e		bcs $b667			bcs 	_GfxError 					; bit 7 should have been zero
.b659		5a		phy				phy 								; save pos
.b65a		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.b65c		a6 59		ldx $59				ldx 	NSMantissa0+1
.b65e		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b660		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b663		b0 02		bcs $b667			bcs 	_GfxError
.b665		7a		ply				ply 								; restore pos and exit.
.b666		60		rts				rts
.b667						_GfxError:
.b667		4c 54 b1	jmp $b154			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.b66a						UnaryHit:
.b66a		fa		plx				plx
.b66b		a9 36		lda #$36			lda 	#zTemp0
.b66d		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get sprite number 0
.b670		20 2b 97	jsr $972b			jsr 	CheckComma
.b673		e8		inx				inx
.b674		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get sprite number 1
.b677		20 23 97	jsr $9723			jsr		CheckRightBracket
.b67a		ca		dex				dex 								; fix back up again.
.b67b		da		phx				phx 								; save X/Y
.b67c		5a		phy				phy
.b67d		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.b67f		b5 58		lda $58,x			lda 	NSMantissa0,x
.b681		aa		tax				tax
.b682		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.b684		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.b687		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.b688		7a		ply				ply 								; restore XY
.b689		fa		plx				plx
.b68a		20 98 a6	jsr $a698			jsr 	NSMSetByte 					; return the hit result
.b68d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.b68e						PaletteCommand:
.b68e		a2 00		ldx #$00			ldx 	#0
.b690		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; colour
.b693		20 2b 97	jsr $972b			jsr 	CheckComma
.b696		e8		inx				inx
.b697		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; r
.b69a		20 2b 97	jsr $972b			jsr 	CheckComma
.b69d		e8		inx				inx
.b69e		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; g
.b6a1		20 2b 97	jsr $972b			jsr 	CheckComma
.b6a4		e8		inx				inx
.b6a5		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; b
.b6a8		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b6aa		85 36		sta $36				sta 	zTemp0
.b6ac		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b6ae		85 37		sta $37				sta 	zTemp0+1
.b6b0		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b6b2		26 37		rol $37				rol	 	zTemp0+1
.b6b4		06 36		asl $36				asl 	zTemp0
.b6b6		26 37		rol $37				rol	 	zTemp0+1
.b6b8		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b6ba		85 01		sta $01				sta 	1
.b6bc		5a		phy				phy
.b6bd		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b6bf		92 36		sta ($36)			sta 	(zTemp0)
.b6c1		a0 01		ldy #$01			ldy 	#1
.b6c3		a5 5a		lda $5a				lda 	NSMantissa0+2
.b6c5		91 36		sta ($36),y			sta 	(zTemp0),y
.b6c7		a5 59		lda $59				lda 	NSMantissa0+1
.b6c9		c8		iny				iny
.b6ca		91 36		sta ($36),y			sta 	(zTemp0),y
.b6cc		7a		ply				ply
.b6cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b6ce						ClearScreen:
.b6ce		5a		phy				phy
.b6cf		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b6d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b6d4		7a		ply				ply
.b6d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b6d6						PingCommand:
.b6d6		5a		phy				phy 								; save pos
.b6d7		a9 01		lda #$01			lda 	#1 						; push channel.
.b6d9		48		pha				pha
.b6da		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b6dc		a2 06		ldx #$06			ldx 	#6 						; length
.b6de		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6e0		80 24		bra $b706			bra 	SoundEffectCommand
.b6e2						ZapCommand:
.b6e2		5a		phy				phy 								; save pos
.b6e3		a9 01		lda #$01			lda 	#1 						; push channel.
.b6e5		48		pha				pha
.b6e6		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b6e8		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6ea		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b6ec		80 18		bra $b706			bra 	SoundEffectCommand
.b6ee						ShootCommand:
.b6ee		5a		phy				phy 								; save pos
.b6ef		a9 03		lda #$03			lda 	#3 						; push channel.
.b6f1		48		pha				pha
.b6f2		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b6f4		a2 04		ldx #$04			ldx 	#4 						; length
.b6f6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6f8		80 0c		bra $b706			bra 	SoundEffectCommand
.b6fa						Explode:
.b6fa		5a		phy				phy 								; save pos
.b6fb		a9 03		lda #$03			lda 	#3 						; push channel.
.b6fd		48		pha				pha
.b6fe		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b700		a2 0a		ldx #$0a			ldx 	#10 						; length
.b702		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b704		80 00		bra $b706			bra 	SoundEffectCommand
.b706						SoundEffectCommand:
.b706		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b709		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b70c		a9 0f		lda #$0f			lda 	#15
.b70e		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b711		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b714		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b717		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b71a		68		pla				pla
.b71b		09 10		ora #$10			ora 	#$10  						; execute command $11
.b71d		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b71f		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b721		20 75 80	jsr $8075			jsr 	SNDCommand
.b724		7a		ply				ply
.b725		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b726						UnaryPlaying:
.b726		fa		plx				plx
.b727		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; get channel #
.b72a		48		pha				pha
.b72b		20 23 97	jsr $9723			jsr		CheckRightBracket
.b72e		68		pla				pla
.b72f		c9 04		cmp #$04			cmp 	#4
.b731		b0 0c		bcs $b73f			bcs 	_UPNotPlaying
.b733		09 20		ora #$20			ora 	#$20 						; query playing ?
.b735		20 75 80	jsr $8075			jsr 	SNDCommand
.b738		c9 00		cmp #$00			cmp 	#0
.b73a		f0 03		beq $b73f			beq 	_UPNotPlaying
.b73c		4c a9 97	jmp $97a9			jmp 	ReturnTrue
.b73f						_UPNotPlaying:
.b73f		4c b4 97	jmp $97b4			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b742						SoundCommand:
.b742		b1 30		lda ($30),y			lda 	(codePtr),y
.b744		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b746		d0 09		bne $b751			bne 	_SNDMain
.b748		c8		iny				iny 								; skip OFF
.b749		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b74b		5a		phy				phy
.b74c		20 75 80	jsr $8075			jsr 	SNDCommand
.b74f		7a		ply				ply
.b750		60		rts				rts
.b751						_SNDMain:
.b751		a2 00		ldx #$00			ldx 	#0
.b753		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; channel
.b756		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b758		b0 4b		bcs $b7a5			bcs 	_SndError
.b75a		e8		inx				inx 								; do the rest in slot 1.
.b75b		20 2b 97	jsr $972b			jsr 	CheckComma
.b75e		20 16 a6	jsr $a616			jsr 	Evaluate16BitInteger 		; Pitch
.b761		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b763		c9 10		cmp #$10			cmp 	#16
.b765		b0 3e		bcs $b7a5			bcs 	_SndError
.b767		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b76a		b5 58		lda $58,x			lda 	NSMantissa0,x
.b76c		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b76f		20 2b 97	jsr $972b			jsr 	CheckComma
.b772		20 31 a6	jsr $a631			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b775		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b778		a9 0f		lda #$0f			lda 	#15
.b77a		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b77d		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b780		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b783		b1 30		lda ($30),y			lda 	(codePtr),y
.b785		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b787		d0 0e		bne $b797			bne 	_SNDPlay
.b789		c8		iny				iny
.b78a		20 20 a6	jsr $a620			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b78d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b78f		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b792		b5 60		lda $60,x			lda 	NSMantissa1,x
.b794		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b797						_SNDPlay:
.b797		5a		phy				phy
.b798		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b79a		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b79c		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b79e		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b7a0		20 75 80	jsr $8075			jsr 	SNDCommand
.b7a3		7a		ply				ply
.b7a4		60		rts				rts
.b7a5						_SndError:
.b7a5		4c 54 b1	jmp $b154			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b7a8						StackPushByte:
.b7a8		48		pha				pha 								; save byte on stack
.b7a9		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b7ab		d0 08		bne $b7b5			bne 	_SPBNoBorrow
.b7ad		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b7af		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b7b1		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7b3		90 06		bcc $b7bb			bcc 	_SPBMemory
.b7b5						_SPBNoBorrow:
.b7b5		c6 34		dec $34				dec 	basicStack
.b7b7		68		pla				pla 								; get back and write
.b7b8		92 34		sta ($34)			sta 	(basicStack)
.b7ba		60		rts				rts
.b7bb						_SPBMemory:
.b7bb		a9 12		lda #$12		lda	#18
.b7bd		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b7c0						StackPopByte:
.b7c0		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b7c2		e6 34		inc $34				inc 	basicStack
.b7c4		d0 02		bne $b7c8			bne 	_SPBNoCarry
.b7c6		e6 35		inc $35				inc 	basicStack+1
.b7c8						_SPBNoCarry:
.b7c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b7c9						StackOpen:
.b7c9		48		pha				pha 								; save frame byte
.b7ca		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b7cc		0a		asl a				asl 	a 							; claim twice this for storage
.b7cd		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b7cf		38		sec				sec 								; so basically subtracting from
.b7d0		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b7d2		85 34		sta $34				sta 	basicStack
.b7d4		b0 09		bcs $b7df			bcs 	_SONoBorrow
>b7d6		db						.byte 	$DB 						; causes a break in the emulator
.b7d7		c6 35		dec $35				dec 	basicStack+1
.b7d9		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b7db		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7dd		90 04		bcc $b7e3			bcc 	_SOMemory
.b7df						_SONoBorrow:
.b7df		68		pla				pla 								; get marker back and write at TOS
.b7e0		92 34		sta ($34)			sta 	(basicStack)
.b7e2		60		rts				rts
.b7e3						_SOMemory:
.b7e3		a9 12		lda #$12		lda	#18
.b7e5		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b7e8						StackClose:
.b7e8		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b7ea		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b7ec		0a		asl a				asl 	a 							; claim twice this.
.b7ed		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b7ef		85 34		sta $34				sta 	basicStack
.b7f1		90 02		bcc $b7f5			bcc 	_SCExit
.b7f3		e6 35		inc $35				inc 	basicStack+1
.b7f5						_SCExit:
.b7f5		60		rts				rts
.b7f6						StackCheckFrame:
.b7f6		48		pha				pha
.b7f7						_StackRemoveLocals:
.b7f7		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b7f9		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b7fb		b0 05		bcs $b802			bcs 	_SCNoLocal
.b7fd		20 0a 90	jsr $900a			jsr 	LocalPopValue 				; restore the local value
.b800		80 f5		bra $b7f7			bra 	_StackRemoveLocals 			; gr round again
.b802						_SCNoLocal:
.b802		68		pla				pla 								; get the frame check.
.b803		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b805		29 f0		and #$f0			and 	#$F0 						; check type bits
.b807		d0 01		bne $b80a			bne 	_SCFError 					; different, we have structures mixed up
.b809		60		rts				rts
.b80a						_SCFError:
.b80a		8a		txa				txa 								; report error X
.b80b		4c 3c 97	jmp $973c			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b80e						STKSaveCodePosition:
.b80e		5a		phy				phy
.b80f		98		tya				tya 								; save Y
.b810		a0 05		ldy #$05			ldy 	#5
.b812		91 34		sta ($34),y			sta 	(basicStack),y
.b814		88		dey				dey 								; save Code Pointer
.b815						_STKSaveLoop:
.b815		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b818		91 34		sta ($34),y			sta 	(basicStack),y
.b81a		88		dey				dey
.b81b		d0 f8		bne $b815			bne 	_STKSaveLoop
.b81d		7a		ply				ply
.b81e		60		rts				rts
.b81f						STKLoadCodePosition:
.b81f		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b821						_STKLoadLoop:
.b821		b1 34		lda ($34),y			lda 	(basicStack),y
.b823		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b826		c8		iny				iny
.b827		c0 05		cpy #$05			cpy 	#5
.b829		d0 f6		bne $b821			bne 	_STKLoadLoop
.b82b		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b82d		a8		tay				tay
.b82e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b82f						StackReset:
.b82f		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b831		85 34		sta $34				sta 	0+basicStack
.b833		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b835		85 35		sta $35				sta 	1+basicStack
.b837		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b839		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b83b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b83c						StringConcrete:
.b83c		5a		phy				phy 								; save position on stack
.b83d		20 76 a2	jsr $a276			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b840		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b842		85 38		sta $38				sta 	zTemp1
.b844		b5 60		lda $60,x			lda 	NSMantissa1,x
.b846		85 39		sta $39				sta 	zTemp1+1
.b848		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b84a						_SALength:
.b84a		c8		iny				iny
.b84b		b1 38		lda ($38),y			lda 	(zTemp1),y
.b84d		d0 fb		bne $b84a			bne 	_SALength
.b84f		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b851		b0 3d		bcs $b890			bcs 	_SALengthError
.b853		98		tya				tya 				 				; length of the new string
.b854		18		clc				clc
.b855		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b857		90 02		bcc $b85b			bcc 	_SAHaveLength
.b859		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b85b						_SAHaveLength:
.b85b		48		pha				pha 								; save length.
.b85c		38		sec				sec
.b85d		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b85f		6d 0a 04	adc $040a			adc 	stringMemory
.b862		8d 0a 04	sta $040a			sta 	stringMemory
.b865		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b867		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b869		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b86b		6d 0b 04	adc $040b			adc 	stringMemory+1
.b86e		8d 0b 04	sta $040b			sta 	stringMemory+1
.b871		85 3b		sta $3b				sta 	zTemp2+1
.b873		95 60		sta $60,x			sta 	NSMantissa1,x
.b875		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b876		38		sec				sec
.b877		e9 03		sbc #$03			sbc 	#3
.b879		92 3a		sta ($3a)			sta 	(zTemp2)
.b87b		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b87d		a0 01		ldy #$01			ldy 	#1
.b87f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b881						_SACopyNewString:
.b881		a0 00		ldy #$00			ldy 	#0
.b883						_SACopyNSLoop:
.b883		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b885		c8		iny				iny 								; write two on in string storage
.b886		c8		iny				iny
.b887		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b889		88		dey				dey 								; this makes it one one.
.b88a		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b88c		d0 f5		bne $b883			bne 	_SACopyNSLoop
.b88e		7a		ply				ply
.b88f		60		rts				rts
.b890						_SALengthError:
.b890		a9 09		lda #$09		lda	#9
.b892		4c 3c 97	jmp $973c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b895						StringSystemInitialise:
.b895		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b897		8d 0a 04	sta $040a			sta 	0+stringMemory
.b89a		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b89c		8d 0b 04	sta $040b			sta 	1+stringMemory
.b89f		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8a2		60		rts				rts
.b8a3						StringSpaceInitialise:
.b8a3		20 76 a2	jsr $a276			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8a6		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8a8		8d 0c 04	sta $040c			sta 	stringInitialised
.b8ab		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b8ae		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b8b1		ad 0b 04	lda $040b			lda 	stringMemory+1
.b8b4		3a		dec a				dec 	a
.b8b5		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8b8		60		rts				rts
.b8b9						StringTempAllocate:
.b8b9		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8bb		b0 30		bcs $b8ed			bcs 	_STALength
.b8bd		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b8c0		30 05		bmi $b8c7			bmi 	_STAAllocate
.b8c2		48		pha				pha 								; save value to subtract.
.b8c3		20 a3 b8	jsr $b8a3			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8c6		68		pla				pla 								; restore it
.b8c7						_STAAllocate:
.b8c7		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8c9		18		clc				clc  								; deliberate allows one more
.b8ca		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b8cd		8d 0d 04	sta $040d			sta 	stringTempPointer
.b8d0		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b8d2		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8d4		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b8d7		69 ff		adc #$ff			adc 	#$FF
.b8d9		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8dc		85 3d		sta $3d				sta 	zsTemp+1
.b8de		95 60		sta $60,x			sta 	NSMantissa1,x
.b8e0		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b8e2		74 70		stz $70,x			stz 	NSMantissa3,x
.b8e4		a9 10		lda #$10			lda 	#NSTString
.b8e6		95 50		sta $50,x			sta 	NSStatus,x
.b8e8		a9 00		lda #$00			lda 	#0 							; clear the target string
.b8ea		92 3c		sta ($3c)			sta 	(zsTemp)
.b8ec		60		rts				rts
.b8ed						_STALength:
.b8ed		a9 09		lda #$09		lda	#9
.b8ef		4c 3c 97	jmp $973c		jmp	ErrorHandler
.b8f2						StringTempWrite:
.b8f2		48		pha				pha
.b8f3		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b8f5		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b8f7		d0 02		bne $b8fb			bne 	_STWNoCarry
.b8f9		e6 3d		inc $3d				inc 	zsTemp+1
.b8fb						_STWNoCarry:
.b8fb		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b8fd		92 3c		sta ($3c)			sta 	(zsTemp)
.b8ff		68		pla				pla
.b900		60		rts				rts

;******  Return to file: _basic.asm

.b901						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 91 81	jsr $8191			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 86 07	sta $0786			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 84 07	lda $0784			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 8b 07	sta $078b			sta 	gxCurrentY
.c7e7	a7e7	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 89 07	sta $0789			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 9d 07	cmp $079d			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c819	a819	9d 91 07	sta $0791,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 2d 08	stz $082d			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c848	a848	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c875	a875	8d 2b 08	sta $082b			sta 	gxYCentre
.c878	a878	8e 2a 08	stx $082a			stx 	gxxCentre
.c87b	a87b	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 2d 08	sta $082d			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 2b 08	lda $082b			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 2a 08	lda $082a			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8bc	a8bc	8d 2b 08	sta $082b			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8d3	a8d3	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 2a 08	lda $082a			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 2a 08	lda $082a			lda 	gxxCentre
.c8fc	a8fc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 2d 08	dec $082d			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 97 07	lda $0797			lda 	gxY1
.c935	a935	ed 93 07	sbc $0793			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 29 08	sta $0829			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 2a 08	stz $082a			stz 	gxxCentre
.c949	a949	ad 29 08	lda $0829			lda 	gxRadius
.c94c	a94c	8d 2b 08	sta $082b			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 95 07	lda $0795,x			lda 	gxX1,x
.c964	a964	7d 91 07	adc $0791,x			adc 	gxX0,x
.c967	a967	9d 95 07	sta $0795,x			sta 	gxX1,x
.c96a	a96a	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c96d	a96d	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c974	a974	7e 95 07	ror $0795,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 9d 07	lda $079d			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 9b 07	adc $079b			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9d1	a9d1	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 9b 07	sta $079b			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 9d 07	stx $079d			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d a1 07	and $07a1			and 	gxANDValue
.ca9e	aa9e	4d a0 07	eor $07a0			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 95 07	eor $0795			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 92 07	lda $0792			lda 	gxX0+1
.cac4	aac4	4d 96 07	eor $0796			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 97 07	lda $0797			lda 	gxY1
.cacb	aacb	4d 93 07	eor $0793			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 32 08	lda $0832			lda 	gxPosition
.cad3	aad3	6d 33 08	adc $0833			adc 	gxAdjust
.cad6	aad6	8d 32 08	sta $0832			sta 	gxPosition
.cad9	aad9	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 34 08	sbc $0834			sbc 	gxTotal
.caea	aaea	8d 32 08	sta $0832			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 35 08	lda $0835			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 35 08	lda $0835			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 31 08	lda $0831			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 91 07	lda $0791			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 92 07	dec $0792			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 91 07	dec $0791			dec 	gxX0
.cb1b	ab1b	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad a3 07	lda $07a3			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 91 07	inc $0791			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 92 07	inc $0792			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 93 07	inc $0793			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 97 07	lda $0797			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 93 07	sbc $0793			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 2f 08	sta $082f			sta 	gxDiffY
.cb63	ab63	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 95 07	lda $0795			lda 	gxX1
.cb6a	ab6a	ed 91 07	sbc $0791			sbc 	gxX0
.cb6d	ab6d	8d 2e 08	sta $082e			sta 	gxDiffX
.cb70	ab70	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 2e 08	ror $082e			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cb83	ab83	8d 2e 08	sta $082e			sta 	gxDiffX
.cb86	ab86	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 33 08	sta $0833			sta 	gxAdjust
.cb92	ab92	ad 2e 08	lda $082e			lda 	gxDiffX
.cb95	ab95	8d 34 08	sta $0834			sta 	gxTotal
.cb98	ab98	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 33 08	sta $0833			sta 	gxAdjust
.cba9	aba9	ad 2f 08	lda $082f			lda 	gxDiffY
.cbac	abac	8d 34 08	sta $0834			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 34 08	lda $0834			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 32 08	sta $0832			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 9f 07	ldx $079f			ldx 	gxColour
.cbc9	abc9	8e a0 07	stx $07a0			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e a1 07	stx $07a1			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c a0 07	stz $07a0			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad a1 07	lda $07a1			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d a1 07	sta $07a1			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac a3 07	ldy $07a3			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d a1 07	and $07a1			and 	gxANDValue
.cbf3	abf3	4d a0 07	eor $07a0			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 97 07	cmp $0797			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc25	ac25	cd 97 07	cmp $0797			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 95 07	lda $0795			lda		gxX1
.cc42	ac42	ed 91 07	sbc $0791			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 96 07	lda $0796			lda 	gxX1+1
.cc4a	ac4a	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad a3 07	lda $07a3			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d a1 07	and $07a1			and 	gxANDValue
.cc67	ac67	4d a0 07	eor $07a0			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d a1 07	and $07a1			and 	gxANDValue
.cc85	ac85	4d a0 07	eor $07a0			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d a1 07	and $07a1			and 	gxANDValue
.cc9d	ac9d	4d a0 07	eor $07a0			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d a3 07	sta $07a3			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 36 08	sta $0836			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.ccc4	acc4	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 3a 08	sta $083a			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 37 08	lda $0837			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.ccfd	acfd	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 36 08	cmp $0836			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 93 07	sta $0793			sta 	gxY0
.cd16	ad16	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 36 08	lda $0836			lda 	gxSize
.cd1d	ad1d	6d 91 07	adc $0791			adc 	gxX0
.cd20	ad20	8d 91 07	sta $0791			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 92 07	inc $0792			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 37 08	lda $0837			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d a1 07	and $07a1			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 36 08	cmp $0836			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 93 07	inc $0793			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 9e 07	eor $079e			eor 	gxMode
.cd84	ad84	8d 3b 08	sta $083b			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 9f 07	lda $079f			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 9e 07	eor $079e			eor 	gxMode
.cdd1	add1	8d 3b 08	sta $083b			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ce92	ae92	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 99 07	lda $0799			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 92 07	lda $0792			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 93 07	adc $0793			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 91 07	ror $0791			ror 	gxX0
.cf3d	af3d	4e 91 07	lsr $0791			lsr 	gxX0
.cf40	af40	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 93 07	lsr $0793			lsr 	gxY0
.cf46	af46	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 91 07	ora $0791			ora 	gxX0
.cf51	af51	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf54	af54	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 93 07	ora $0793			ora 	gxY0
.cf5c	af5c	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d a3 07	sta $07a3			sta 	gxOffset
.cfae	afae	ad 92 07	lda $0792			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad a3 07	lda $07a3			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d a3 07	sta $07a3			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d000	b000	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d02e	b02e	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d07b	b07b	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d07e	b07e	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d081	b081	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d084	b084	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 95 07	cmp $0795			cmp 	gxX1
.d098	b098	ad 92 07	lda $0792			lda 	gxX0+1
.d09b	b09b	ed 96 07	sbc $0796			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 97 07	cmp $0797			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0c8	b0c8	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 91 07	sta $0791,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d183	b183	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d189	b189	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d18f	b18f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d196	b196	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d19c	b19c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1a2	b1a2	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1a9	b1a9	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1b1	b1b1	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1b9	b1b9	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1c1	b1c1	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1c9	b1c9	47 28
>d1cb	b1cb	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1d3	b1d3	28
>d1d4	b1d4	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1dc	b1dc	28
>d1dd	b1dd	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d1e3	b1e3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d1e9	b1e9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d1ef	b1ef	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d1f6	b1f6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d1fe	b1fe	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d204	b204	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d20a	b20a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d20f	b20f	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d213	b213	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d219	b219	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d221	b221	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d228	b228	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d22f	b22f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d237	b237	43
>d238	b238	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d23e	b23e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d244	b244	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d24b	b24b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d251	b251	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d255	b255	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d259	b259	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d25f	b25f	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d267	b267	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d26e	b26e	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d275	b275	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d27d	b27d	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d283	b283	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d288	b288	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d290	b290	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d296	b296	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d29c	b29c	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2a1	b2a1	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2a7	b2a7	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2ae	b2ae	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2b3	b2b3	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2b9	b2b9	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2c0	b2c0	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2c8	b2c8	59
>d2c9	b2c9	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2ce	b2ce	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2d2	b2d2	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2da	b2da	45
>d2db	b2db	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d2e3	b2e3	45
>d2e4	b2e4	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d2ea	b2ea	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d2f0	b2f0	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d2f7	b2f7	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d2fe	b2fe	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d305	b305	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d30b	b30b	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d311	b311	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d316	b316	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d31d	b31d	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d324	b324	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d32c	b32c	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d332	b332	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d336	b336	ff					.text	$FF
.d337	b337					KeywordSet1:
>d337	b337	00 65					.text	0,$65,""               ; $80 !0:EOF
>d339	b339	00 58					.text	0,$58,""               ; $81 !1:SH1
>d33b	b33b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d33d	b33d	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d345	b345	4c 45
>d347	b347	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d34f	b34f	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d357	b357	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d35e	b35e	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d365	b365	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d36a	b36a	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d372	b372	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d377	b377	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d37c	b37c	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d383	b383	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d388	b388	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d390	b390	45
>d391	b391	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d395	b395	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d39c	b39c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3a2	b3a2	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3a9	b3a9	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3b0	b3b0	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3b6	b3b6	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3bc	b3bc	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $96 NEW
>d3c1	b3c1	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $97 PING
>d3c7	b3c7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $98 PRINT
>d3ce	b3ce	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $99 RESTORE
>d3d6	b3d6	45
>d3d7	b3d7	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9a RETURN
>d3df	b3df	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9b RUN
>d3e4	b3e4	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9c SAVE
>d3ea	b3ea	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9d SETDATE
>d3f2	b3f2	45
>d3f3	b3f3	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9e SETTIME
>d3fb	b3fb	45
>d3fc	b3fc	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9f SHOOT
>d403	b403	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a0 SPRITES
>d40b	b40b	53
>d40c	b40c	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a1 STOP
>d412	b412	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a2 VERIFY
>d41a	b41a	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a3 XGO
>d41f	b41f	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a4 XLOAD
>d426	b426	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a5 ZAP
>d42b	b42b	ff					.text	$FF
.d42c	b42c					KeywordSet2:
>d42c	b42c	00 65					.text	0,$65,""               ; $80 !0:EOF
>d42e	b42e	00 58					.text	0,$58,""               ; $81 !1:SH1
>d430	b430	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d432	b432	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d437	b437	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d43c	b43c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d441	b441	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d446	b446	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d44b	b44b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d450	b450	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d455	b455	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d45a	b45a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d45f	b45f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d464	b464	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d469	b469	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d46e	b46e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d473	b473	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d478	b478	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d47d	b47d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d482	b482	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d487	b487	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d48c	b48c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d491	b491	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d496	b496	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d49b	b49b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4a0	b4a0	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4a5	b4a5	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4aa	b4aa	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4af	b4af	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4b4	b4b4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4b9	b4b9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4be	b4be	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4c3	b4c3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4c8	b4c8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4cd	b4cd	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4d2	b4d2	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4d7	b4d7	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4dc	b4dc	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4e1	b4e1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4e6	b4e6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4eb	b4eb	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4f0	b4f0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4f5	b4f5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4fa	b4fa	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4ff	b4ff	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d504	b504	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d509	b509	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d50e	b50e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d513	b513	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d518	b518	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d51d	b51d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d522	b522	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d527	b527	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d52c	b52c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d531	b531	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d536	b536	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d53b	b53b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d540	b540	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d545	b545	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d54a	b54a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d54f	b54f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d554	b554	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d559	b559	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d55e	b55e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d563	b563	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d568	b568	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d56d	b56d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d572	b572	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d577	b577	ff					.text	$FF
.d578	b578					Export_TKListConvertLine:
.d578	b578	48		pha				pha 								; save indent on the stack
.d579	b579	9c 19 04	stz $0419			stz 	tbOffset
.d57c	b57c	9c 29 04	stz $0429			stz 	tokenBuffer
.d57f	b57f	9c 25 04	stz $0425			stz 	currentListColour
.d582	b582	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d584	b584	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d587	b587	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d589	b589	b1 30		lda ($30),y			lda 	(codePtr),y
.d58b	b58b	aa		tax				tax
.d58c	b58c	88		dey				dey
.d58d	b58d	b1 30		lda ($30),y			lda 	(codePtr),y
.d58f	b58f	20 72 b7	jsr $b772			jsr 	LCLWriteNumberXA
.d592	b592	68		pla				pla 								; adjustment to indent
.d593	b593	48		pha				pha 								; save on stack
.d594	b594	10 0c		bpl $b5a2			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d596	b596	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d597	b597	6d 22 04	adc $0422			adc 	listIndent
.d59a	b59a	8d 22 04	sta $0422			sta 	listIndent
.d59d	b59d	10 03		bpl $b5a2			bpl 	_LCNoAdjust
.d59f	b59f	9c 22 04	stz $0422			stz 	listIndent
.d5a2	b5a2					_LCNoAdjust:
.d5a2	b5a2	18		clc				clc		 							; work out actual indent.
.d5a3	b5a3	ad 22 04	lda $0422			lda 	listIndent
.d5a6	b5a6	0a		asl a				asl 	a
.d5a7	b5a7	69 07		adc #$07			adc 	#7
.d5a9	b5a9	85 36		sta $36				sta 	zTemp0
.d5ab	b5ab					_LCPadOut:
.d5ab	b5ab	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5ad	b5ad	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d5b0	b5b0	ad 19 04	lda $0419			lda 	tbOffset
.d5b3	b5b3	c5 36		cmp $36				cmp 	zTemp0
.d5b5	b5b5	d0 f4		bne $b5ab			bne 	_LCPadOut
.d5b7	b5b7	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5b9	b5b9					_LCMainLoop:
.d5b9	b5b9	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5bb	b5bb	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d5be	b5be	b1 30		lda ($30),y			lda 	(codePtr),y
.d5c0	b5c0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5c2	b5c2	f0 17		beq $b5db			beq 	_LCExit
.d5c4	b5c4	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5c6	b5c6	90 1e		bcc $b5e6			bcc 	_LCDoubles
.d5c8	b5c8	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5ca	b5ca	90 2a		bcc $b5f6			bcc 	_LCShiftPunc
.d5cc	b5cc	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5ce	b5ce	90 35		bcc $b605			bcc 	_LCPunctuation
.d5d0	b5d0	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5d2	b5d2	90 51		bcc $b625			bcc 	_LCIdentifiers
.d5d4	b5d4	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5d6	b5d6	90 73		bcc $b64b			bcc 	_LCTokens
.d5d8	b5d8	4c ab b6	jmp $b6ab			jmp 	_LCData 					; 254-5 are data objects
.d5db	b5db					_LCExit:
.d5db	b5db	68		pla				pla 								; get old indent adjust
.d5dc	b5dc	30 07		bmi $b5e5			bmi 	_LCExit2
.d5de	b5de	18		clc				clc 								; add to indent if +ve
.d5df	b5df	6d 22 04	adc $0422			adc 	listIndent
.d5e2	b5e2	8d 22 04	sta $0422			sta 	listIndent
.d5e5	b5e5					_LCExit2:
.d5e5	b5e5	60		rts				rts
.d5e6	b5e6					_LCDoubles:
.d5e6	b5e6	48		pha				pha
.d5e7	b5e7	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5e8	b5e8	29 02		and #$02			and 	#2
.d5ea	b5ea	09 3c		ora #$3c			ora 	#60 						; make < >
.d5ec	b5ec	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d5ef	b5ef	68		pla				pla 								; restore, do lower bit
.d5f0	b5f0	29 03		and #$03			and 	#3
.d5f2	b5f2	09 3c		ora #$3c			ora 	#60
.d5f4	b5f4	80 0f		bra $b605			bra		_LCPunctuation 				; print, increment, loop
.d5f6	b5f6					_LCShiftPunc:
.d5f6	b5f6	aa		tax				tax 								; save in X
.d5f7	b5f7	29 07		and #$07			and 	#7 							; lower 3 bits
.d5f9	b5f9	f0 02		beq $b5fd			beq 	_LCNoAdd
.d5fb	b5fb	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5fd	b5fd					_LCNoAdd:
.d5fd	b5fd	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5ff	b5ff	90 02		bcc $b603			bcc 	_LCNoAdd2
.d601	b601	09 20		ora #$20			ora 	#32 						; adds $20
.d603	b603					_LCNoAdd2:
.d603	b603	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d605	b605					_LCPunctuation:
.d605	b605	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d607	b607	d0 03		bne $b60c			bne 	_LCPContinue
.d609	b609	20 20 b7	jsr $b720			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d60c	b60c					_LCPContinue:
.d60c	b60c	c9 2e		cmp #$2e			cmp 	#'.'
.d60e	b60e	f0 08		beq $b618			beq 	_LCPIsConstant
.d610	b610	c9 30		cmp #$30			cmp 	#'0'
.d612	b612	90 0b		bcc $b61f			bcc 	_LCPNotConstant
.d614	b614	c9 3a		cmp #$3a			cmp 	#'9'+1
.d616	b616	b0 07		bcs $b61f			bcs 	_LCPNotConstant
.d618	b618					_LCPIsConstant:
.d618	b618	48		pha				pha
.d619	b619	a9 87		lda #$87			lda 	#CLIConstant+$80
.d61b	b61b	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d61e	b61e	68		pla				pla
.d61f	b61f					_LCPNotConstant:
.d61f	b61f	c8		iny				iny 								; consume character
.d620	b620	20 0a b7	jsr $b70a			jsr 	LCLWrite 					; write it out.
.d623	b623	80 94		bra $b5b9			bra 	_LCMainLoop 				; go round again.
.d625	b625					_LCIdentifiers:
.d625	b625	18		clc				clc 								; convert to physical address
.d626	b626	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d628	b628	85 37		sta $37				sta 	zTemp0+1
.d62a	b62a	c8		iny				iny
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	85 36		sta $36				sta 	zTemp0
.d62f	b62f	c8		iny				iny
.d630	b630	5a		phy				phy 								; save position
.d631	b631	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d633	b633	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d636	b636	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d638	b638					_LCOutIdentifier:
.d638	b638	c8		iny				iny
.d639	b639	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d63b	b63b	29 7f		and #$7f			and 	#$7F
.d63d	b63d	20 5c b7	jsr $b75c			jsr 	LCLLowerCase
.d640	b640	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d643	b643	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d645	b645	10 f1		bpl $b638			bpl 	_LCOutIdentifier
.d647	b647	7a		ply				ply 								; restore position
.d648	b648	4c b9 b5	jmp $b5b9			jmp 	_LCMainLoop
.d64b	b64b					_LCTokens:
.d64b	b64b	aa		tax				tax 								; token in X
.d64c	b64c	a9 2c		lda #$2c			lda 	#((KeywordSet2) & $FF)
.d64e	b64e	85 36		sta $36				sta 	0+zTemp0
.d650	b650	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d652	b652	85 37		sta $37				sta 	1+zTemp0
.d654	b654	e0 82		cpx #$82			cpx 	#$82
.d656	b656	f0 16		beq $b66e			beq 	_LCUseShift
.d658	b658	a9 37		lda #$37			lda 	#((KeywordSet1) & $FF)
.d65a	b65a	85 36		sta $36				sta 	0+zTemp0
.d65c	b65c	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d65e	b65e	85 37		sta $37				sta 	1+zTemp0
.d660	b660	e0 81		cpx #$81			cpx 	#$81
.d662	b662	f0 0a		beq $b66e			beq 	_LCUseShift
.d664	b664	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d666	b666	85 36		sta $36				sta 	0+zTemp0
.d668	b668	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d66a	b66a	85 37		sta $37				sta 	1+zTemp0
.d66c	b66c	80 01		bra $b66f			bra 	_LCNoShift
.d66e	b66e					_LCUseShift:
.d66e	b66e	c8		iny				iny
.d66f	b66f					_LCNoShift:
.d66f	b66f	20 34 b7	jsr $b734			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d672	b672	b1 30		lda ($30),y			lda 	(codePtr),y
.d674	b674	aa		tax				tax 								; into X
.d675	b675					_LCFindText:
.d675	b675	ca		dex				dex
.d676	b676	10 0e		bpl $b686			bpl 	_LCFoundText 				; found text.
.d678	b678	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d67a	b67a	1a		inc a				inc 	a 							; one extra for size
.d67b	b67b	38		sec				sec 								; one extra for checksum
.d67c	b67c	65 36		adc $36				adc 	zTemp0 						; go to next token
.d67e	b67e	85 36		sta $36				sta 	zTemp0
.d680	b680	90 f3		bcc $b675			bcc 	_LCFindText
.d682	b682	e6 37		inc $37				inc 	zTemp0+1
.d684	b684	80 ef		bra $b675			bra 	_LCFindText
.d686	b686					_LCFoundText:
.d686	b686	5a		phy				phy 								; save List position
.d687	b687	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d689	b689	aa		tax				tax
.d68a	b68a	a9 86		lda #$86			lda 	#CLIToken+$80
.d68c	b68c	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d68f	b68f	a0 02		ldy #$02			ldy 	#2
.d691	b691					_LCCopyToken:
.d691	b691	b1 36		lda ($36),y			lda 	(zTemp0),y
.d693	b693	20 5c b7	jsr $b75c			jsr 	LCLLowerCase
.d696	b696	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d699	b699	c8		iny				iny
.d69a	b69a	ca		dex				dex
.d69b	b69b	d0 f4		bne $b691			bne 	_LCCopyToken
.d69d	b69d	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d69f	b69f	f0 05		beq $b6a6			beq 	_LCNoSpace
.d6a1	b6a1	a9 20		lda #$20			lda 	#' '
.d6a3	b6a3	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6a6	b6a6					_LCNoSpace:
.d6a6	b6a6	7a		ply				ply 								; restore position.
.d6a7	b6a7	c8		iny				iny 								; consume token
.d6a8	b6a8	4c b9 b5	jmp $b5b9			jmp 	_LCMainLoop 				; and go around again.
.d6ab	b6ab					_LCData:
.d6ab	b6ab	48		pha				pha 								; save type $FE/$FF
.d6ac	b6ac	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6ae	b6ae	c9 fe		cmp #$fe			cmp 	#$FE
.d6b0	b6b0	f0 22		beq $b6d4			beq 	_LCHaveOpener
.d6b2	b6b2	a2 22		ldx #$22			ldx 	#'"'
.d6b4	b6b4	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6b6	b6b6	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d6b9	b6b9	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6bb	b6bb	d0 17		bne $b6d4			bne 	_LCHaveOpener
.d6bd	b6bd	88		dey				dey 								; what precedes it ?
.d6be	b6be	b1 30		lda ($30),y			lda 	(codePtr),y
.d6c0	b6c0	c8		iny				iny
.d6c1	b6c1	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6c3	b6c3	d0 0f		bne $b6d4			bne 	_LCHaveOpener
.d6c5	b6c5	a9 09		lda #$09			lda 	#9 							; tab
.d6c7	b6c7	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6ca	b6ca	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6cc	b6cc	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6cf	b6cf	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6d1	b6d1	20 01 b7	jsr $b701			jsr 	LCLWriteColour
.d6d4	b6d4					_LCHaveOpener:
.d6d4	b6d4	8a		txa				txa 								; output prefix (# or ")
.d6d5	b6d5	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6d8	b6d8	c8		iny				iny 								; get count
.d6d9	b6d9	b1 30		lda ($30),y			lda 	(codePtr),y
.d6db	b6db	aa		tax				tax
.d6dc	b6dc	c8		iny				iny 								; point at first character
.d6dd	b6dd					_LCOutData:
.d6dd	b6dd	b1 30		lda ($30),y			lda 	(codePtr),y
.d6df	b6df	c9 00		cmp #$00			cmp 	#0
.d6e1	b6e1	f0 03		beq $b6e6			beq 	_LCNoPrint
.d6e3	b6e3	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6e6	b6e6					_LCNoPrint:
.d6e6	b6e6	c8		iny				iny
.d6e7	b6e7	ca		dex				dex
.d6e8	b6e8	d0 f3		bne $b6dd			bne 	_LCOutData
.d6ea	b6ea	68		pla				pla 								; closing " required ?
.d6eb	b6eb	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6ed	b6ed	d0 0f		bne $b6fe			bne 	_LCNoQuote
.d6ef	b6ef	a9 22		lda #$22			lda 	#'"'
.d6f1	b6f1	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6f4	b6f4	ad 86 07	lda $0786			lda 	EXTTextColour
.d6f7	b6f7	29 0f		and #$0f			and 	#$0F
.d6f9	b6f9	09 90		ora #$90			ora 	#$90
.d6fb	b6fb	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d6fe	b6fe					_LCNoQuote:
.d6fe	b6fe	4c b9 b5	jmp $b5b9			jmp 	_LCMainLoop
.d701	b701					LCLWriteColour:
.d701	b701	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d704	b704	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d707	b707	d0 01		bne $b70a			bne 	LCLWrite 					; if different, output it
.d709	b709	60		rts				rts
.d70a	b70a					LCLWrite:
.d70a	b70a	da		phx				phx
.d70b	b70b	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d70e	b70e	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d711	b711	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d714	b714	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d717	b717	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d719	b719	30 03		bmi $b71e			bmi 	_LCLNoColour
.d71b	b71b	8d 23 04	sta $0423			sta 	lcLastCharacter
.d71e	b71e					_LCLNoColour:
.d71e	b71e	fa		plx				plx
.d71f	b71f	60		rts				rts
.d720	b720					LCLDeleteLastSpace:
.d720	b720	48		pha				pha
.d721	b721	da		phx				phx
.d722	b722	ae 19 04	ldx $0419			ldx 	tbOffset
.d725	b725	f0 0a		beq $b731			beq 	_LCDLSExit
.d727	b727	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d72a	b72a	c9 20		cmp #$20			cmp 	#' '
.d72c	b72c	d0 03		bne $b731			bne 	_LCDLSExit
.d72e	b72e	ce 19 04	dec $0419			dec 	tbOffset
.d731	b731					_LCDLSExit:
.d731	b731	fa		plx				plx
.d732	b732	68		pla				pla
.d733	b733	60		rts				rts
.d734	b734					LCLCheckSpaceRequired:
.d734	b734	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d737	b737	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d739	b739	f0 1b		beq $b756			beq 	_LCCSRSpace
.d73b	b73b	c9 29		cmp #$29			cmp 	#')'
.d73d	b73d	f0 17		beq $b756			beq 	_LCCSRSpace
.d73f	b73f	c9 23		cmp #$23			cmp 	#'#'
.d741	b741	f0 13		beq $b756			beq 	_LCCSRSpace
.d743	b743	20 5c b7	jsr $b75c			jsr 	LCLLowerCase 				; saves a little effort
.d746	b746	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d748	b748	90 11		bcc $b75b			bcc 	_LCCSRExit
.d74a	b74a	c9 3a		cmp #$3a			cmp 	#"9"+1
.d74c	b74c	90 08		bcc $b756			bcc 	_LCCSRSpace
.d74e	b74e	c9 61		cmp #$61			cmp 	#"a"
.d750	b750	90 09		bcc $b75b			bcc 	_LCCSRExit
.d752	b752	c9 7b		cmp #$7b			cmp 	#"z"+1
.d754	b754	b0 05		bcs $b75b			bcs 	_LCCSRExit
.d756	b756					_LCCSRSpace:
.d756	b756	a9 20		lda #$20			lda 	#' '
.d758	b758	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d75b	b75b					_LCCSRExit:
.d75b	b75b	60		rts				rts
.d75c	b75c					LCLLowerCase:
.d75c	b75c	c9 41		cmp #$41			cmp 	#"A"
.d75e	b75e	90 06		bcc $b766			bcc 	_LCLLCOut
.d760	b760	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d762	b762	b0 02		bcs $b766			bcs 	_LCLLCOut
.d764	b764	69 20		adc #$20			adc 	#$20
.d766	b766					_LCLLCOut:
.d766	b766	60		rts				rts
.d767	b767					LCLUpperCase:
.d767	b767	c9 61		cmp #$61			cmp 	#"a"
.d769	b769	90 06		bcc $b771			bcc 	_LCLUCOut
.d76b	b76b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d76d	b76d	b0 02		bcs $b771			bcs 	_LCLUCOut
.d76f	b76f	e9 1f		sbc #$1f			sbc 	#$1F
.d771	b771					_LCLUCOut:
.d771	b771	60		rts				rts
.d772	b772					LCLWriteNumberXA:
.d772	b772	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d774	b774					_LCLWNLoop1:
.d774	b774	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d776	b776					_LCLWNLoop2:
.d776	b776	48		pha				pha 								; save initial LSB
.d777	b777	38		sec				sec
.d778	b778	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d77a	b77a	f9 ab b7	sbc $b7ab,y			sbc 	_LCLWNTable,y
.d77d	b77d	48		pha				pha
.d77e	b77e	8a		txa				txa
.d77f	b77f	f9 ac b7	sbc $b7ac,y			sbc 	_LCLWNTable+1,y
.d782	b782	90 07		bcc $b78b			bcc 	_LCLWNUnderflow
.d784	b784	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d786	b786	aa		tax				tax 								; update X
.d787	b787	68		pla				pla 								; restore A
.d788	b788	7a		ply				ply 								; throw original
.d789	b789	80 eb		bra $b776			bra 	_LCLWNLoop2 				; try again.
.d78b	b78b					_LCLWNUnderflow:
.d78b	b78b	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d78d	b78d	d0 06		bne $b795			bne 	_LCLWNOut
.d78f	b78f	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d792	b792	3a		dec a				dec 	a
.d793	b793	f0 04		beq $b799			beq 	_LCLWNNext
.d795	b795					_LCLWNOut:
.d795	b795	98		tya				tya
.d796	b796	20 a5 b7	jsr $b7a5			jsr 	_LCLWNOutDigit
.d799	b799					_LCLWNNext:
.d799	b799	7a		ply				ply 							 	; restore original value.
.d79a	b79a	68		pla				pla
.d79b	b79b	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d79d	b79d	c8		iny				iny
.d79e	b79e	c8		iny				iny
.d79f	b79f	84 37		sty $37				sty 	zTemp0+1
.d7a1	b7a1	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7a3	b7a3	d0 cf		bne $b774			bne 	_LCLWNLoop1
.d7a5	b7a5					_LCLWNOutDigit:
.d7a5	b7a5	09 30		ora #$30			ora 	#'0'
.d7a7	b7a7	20 0a b7	jsr $b70a			jsr 	LCLWrite
.d7aa	b7aa	60		rts				rts
.d7ab	b7ab					_LCLWNTable:
>d7ab	b7ab	10 27						.word 	10000
>d7ad	b7ad	e8 03						.word 	1000
>d7af	b7af	64 00						.word 	100
>d7b1	b7b1	0a 00						.word 	10
.d7b3	b7b3					TOKSearchTable:
.d7b3	b7b3	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7b5	b7b5	85 36		sta $36				sta 	zTemp0
.d7b7	b7b7	a0 00		ldy #$00			ldy 	#0
.d7b9	b7b9	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7bb	b7bb	85 38		sta $38				sta 	zTemp1
.d7bd	b7bd					_TSTLoop:
.d7bd	b7bd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7bf	b7bf	30 49		bmi $b80a			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7c1	b7c1	f0 2e		beq $b7f1			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7c3	b7c3	c8		iny				iny 								; get the hash
.d7c4	b7c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c6	b7c6	88		dey				dey
.d7c7	b7c7	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7ca	b7ca	d0 25		bne $b7f1			bne 	_TSTNext
.d7cc	b7cc	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7cf	b7cf	38		sec				sec
.d7d0	b7d0	ed 00 04	sbc $0400			sbc 	identStart
.d7d3	b7d3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7d5	b7d5	d0 1a		bne $b7f1			bne 	_TSTNext
.d7d7	b7d7	5a		phy				phy 								; save Y , we might fail to match.
.d7d8	b7d8	c8		iny				iny 								; point to text
.d7d9	b7d9	c8		iny				iny
.d7da	b7da	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7dd	b7dd					_TSTCompareName:
.d7dd	b7dd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7e0	b7e0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7e2	b7e2	d0 0c		bne $b7f0			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7e4	b7e4	e8		inx				inx
.d7e5	b7e5	c8		iny				iny
.d7e6	b7e6	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7e9	b7e9	d0 f2		bne $b7dd			bne 	_TSTCompareName
.d7eb	b7eb	7a		ply				ply 								; throw Y
.d7ec	b7ec	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ee	b7ee	38		sec				sec 								; return with CS = passed.
.d7ef	b7ef	60		rts				rts
.d7f0	b7f0					_TSTNextPullY:
.d7f0	b7f0	7a		ply				ply 								; restore current, fall through.
.d7f1	b7f1					_TSTNext:
.d7f1	b7f1	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7f3	b7f3	98		tya				tya
.d7f4	b7f4	18		clc				clc
.d7f5	b7f5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7f7	b7f7	1a		inc a				inc 	a 							; +1
.d7f8	b7f8	1a		inc a				inc 	a 							; +2
.d7f9	b7f9	a8		tay				tay
.d7fa	b7fa	10 c1		bpl $b7bd			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7fc	b7fc	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7fd	b7fd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7ff	b7ff	18		clc				clc  								; but have tables > 255 bytes
.d800	b800	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d802	b802	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d804	b804	90 b7		bcc $b7bd			bcc 	_TSTLoop
.d806	b806	e6 37		inc $37				inc 	zTemp0+1
.d808	b808	80 b3		bra $b7bd			bra 	_TSTLoop
.d80a	b80a					_TSTFail:
.d80a	b80a	18		clc				clc
.d80b	b80b	60		rts				rts
.d80c	b80c					Export_TKTokeniseLine:
.d80c	b80c	20 d9 b9	jsr $b9d9			jsr 	LCLFixLineBufferCase 		; fix line case
.d80f	b80f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d811	b811	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d814	b814	9c 27 04	stz $0427			stz 	tokenLineNumber
.d817	b817	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d81a	b81a	a2 ff		ldx #$ff			ldx 	#$FF
.d81c	b81c					_TKFindFirst:
.d81c	b81c	e8		inx				inx
.d81d	b81d	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d820	b820	f0 62		beq $b884			beq 	_TKExit
.d822	b822	c9 20		cmp #$20			cmp 	#' '
.d824	b824	90 f6		bcc $b81c			bcc 	_TKFindFirst
.d826	b826	c9 30		cmp #$30			cmp 	#'0'
.d828	b828	90 07		bcc $b831			bcc 	_TKNoLineNumber
.d82a	b82a	c9 3a		cmp #$3a			cmp 	#'9'+1
.d82c	b82c	b0 03		bcs $b831			bcs 	_TKNoLineNumber
.d82e	b82e	20 03 ba	jsr $ba03			jsr 	TOKExtractLineNumber
.d831	b831					_TKNoLineNumber:
.d831	b831					_TKTokeniseLoop:
.d831	b831	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d834	b834	f0 4e		beq $b884			beq 	_TKExit
.d836	b836	e8		inx				inx
.d837	b837	c9 20		cmp #$20			cmp 	#' '
.d839	b839	f0 f6		beq $b831			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d83b	b83b	ca		dex				dex 								; undo last get, A contains character, X is position.
.d83c	b83c	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d83e	b83e	f0 68		beq $b8a8			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d840	b840	c9 41		cmp #$41			cmp 	#'A'
.d842	b842	90 04		bcc $b848			bcc 	_TKTokenisePunctuation
.d844	b844	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d846	b846	90 60		bcc $b8a8			bcc 	_TKTokeniseIdentifier
.d848	b848					_TKTokenisePunctuation:
.d848	b848	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d84a	b84a	f0 2e		beq $b87a			beq 	_TKString
.d84c	b84c	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d84e	b84e	f0 2f		beq $b87f			beq 	_TKHexConstant
.d850	b850	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d852	b852	f0 36		beq $b88a			beq 	_TKCheckDouble
.d854	b854	c9 3e		cmp #$3e			cmp 	#'>'
.d856	b856	f0 32		beq $b88a			beq 	_TKCheckDouble
.d858	b858					_TKStandardPunctuation:
.d858	b858	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d85b	b85b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d85d	b85d	90 0e		bcc $b86d			bcc 	_TKNoShift
.d85f	b85f	48		pha				pha 								; save. we are about to convert this punctuation token from
.d860	b860	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d862	b862	85 36		sta $36				sta 	zTemp0
.d864	b864	68		pla				pla
.d865	b865	29 20		and #$20			and 	#32 						; bit 5
.d867	b867	4a		lsr a				lsr 	a 							; shift into bit 3
.d868	b868	4a		lsr a				lsr 	a
.d869	b869	05 36		ora $36				ora 	zTemp0
.d86b	b86b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d86d	b86d					_TKNoShift:
.d86d	b86d	20 48 ba	jsr $ba48			jsr 	TOKWriteByte 				; write the punctuation character
.d870	b870	e8		inx				inx 								; consume the character
.d871	b871	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d873	b873	d0 bc		bne $b831			bne 	_TKTokeniseLoop 			; and loop round again.
.d875	b875	20 3b b9	jsr $b93b			jsr 	TOKCheckComment 			; comment checl
.d878	b878	80 b7		bra $b831			bra 	_TKTokeniseLoop
.d87a	b87a					_TKString:
.d87a	b87a	20 68 b9	jsr $b968			jsr 	TOKTokenString
.d87d	b87d	80 b2		bra $b831			bra 	_TKTokeniseLoop
.d87f	b87f					_TKHexConstant:
.d87f	b87f	20 a3 b9	jsr $b9a3			jsr 	TOKHexConstant
.d882	b882	80 ad		bra $b831			bra 	_TKTokeniseLoop
.d884	b884	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d886	b886	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d889	b889	60		rts				rts
.d88a	b88a					_TKCheckDouble:
.d88a	b88a	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d88d	b88d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d88f	b88f	90 c7		bcc $b858			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d891	b891	c9 3f		cmp #$3f			cmp 	#'>'+1
.d893	b893	b0 c3		bcs $b858			bcs 	_TKStandardPunctuation
.d895	b895	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d898	b898	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d89a	b89a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d89b	b89b	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d89e	b89e	38		sec				sec
.d89f	b89f	e9 3c		sbc #$3c			sbc 	#'<'
.d8a1	b8a1	20 48 ba	jsr $ba48			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8a4	b8a4	e8		inx				inx 								; consume both
.d8a5	b8a5	e8		inx				inx
.d8a6	b8a6	80 89		bra $b831			bra 	_TKTokeniseLoop
.d8a8	b8a8					_TKTokeniseIdentifier:
.d8a8	b8a8	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8ab	b8ab	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8ae	b8ae					_TKCheckLoop:
.d8ae	b8ae	e8		inx				inx 								; look at next, we know first is identifier already.
.d8af	b8af	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8b2	b8b2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8b4	b8b4	f0 f8		beq $b8ae			beq 	_TKCheckLoop
.d8b6	b8b6	c9 30		cmp #$30			cmp	 	#"0"
.d8b8	b8b8	90 0c		bcc $b8c6			bcc 	_TKEndIdentifier
.d8ba	b8ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8bc	b8bc	90 f0		bcc $b8ae			bcc 	_TKCheckLoop
.d8be	b8be	c9 41		cmp #$41			cmp	 	#"A"
.d8c0	b8c0	90 04		bcc $b8c6			bcc 	_TKEndIdentifier
.d8c2	b8c2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8c4	b8c4	90 e8		bcc $b8ae			bcc 	_TKCheckLoop
.d8c6	b8c6					_TKEndIdentifier:
.d8c6	b8c6	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8c9	b8c9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8cb	b8cb	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8cd	b8cd	f0 06		beq $b8d5			beq 	_TKHasTypeCharacter
.d8cf	b8cf	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8d1	b8d1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8d3	b8d3	d0 07		bne $b8dc			bne 	_TKNoTypeCharacter
.d8d5	b8d5					_TKHasTypeCharacter:
.d8d5	b8d5	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8d8	b8d8	e8		inx				inx 								; consume the type character
.d8d9	b8d9	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8dc	b8dc					_TKNoTypeCharacter:
.d8dc	b8dc	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8de	b8de	d0 09		bne $b8e9			bne 	_TKNoArray
.d8e0	b8e0	e8		inx				inx 								; skip the (
.d8e1	b8e1	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8e4	b8e4	09 04		ora #$04			ora 	#$04
.d8e6	b8e6	8d 04 04	sta $0404			sta 	identTypeByte
.d8e9	b8e9					_TKNoArray:
.d8e9	b8e9	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8ec	b8ec	20 c4 b9	jsr $b9c4			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8ef	b8ef	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8f1	b8f1	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8f3	b8f3	20 b3 b7	jsr $b7b3			jsr 	TOKSearchTable
.d8f6	b8f6	a2 00		ldx #$00			ldx 	#0
.d8f8	b8f8	b0 1f		bcs $b919			bcs 	_TKFoundToken
.d8fa	b8fa	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8fc	b8fc	a9 37		lda #$37			lda 	#(KeywordSet1) & $FF
.d8fe	b8fe	20 b3 b7	jsr $b7b3			jsr 	TOKSearchTable
.d901	b901	a2 81		ldx #$81			ldx 	#$81
.d903	b903	b0 14		bcs $b919			bcs 	_TKFoundToken
.d905	b905	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d907	b907	a9 2c		lda #$2c			lda 	#(KeywordSet2) & $FF
.d909	b909	20 b3 b7	jsr $b7b3			jsr 	TOKSearchTable
.d90c	b90c	a2 82		ldx #$82			ldx 	#$82
.d90e	b90e	b0 09		bcs $b919			bcs 	_TKFoundToken
.d910	b910	20 54 ba	jsr $ba54			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d913	b913	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d916	b916	4c 31 b8	jmp $b831			jmp 	_TKTokeniseLoop 			; and go round again.
.d919	b919					_TKFoundToken:
.d919	b919	48		pha				pha 								; save token
.d91a	b91a	8a		txa				txa 								; shift in X, is there one ?
.d91b	b91b	f0 03		beq $b920			beq 	_TKNoTShift
.d91d	b91d	20 48 ba	jsr $ba48			jsr 	TOKWriteByte 				; if so, write it out
.d920	b920					_TKNoTShift:
.d920	b920	68		pla				pla 								; restore and write token
.d921	b921	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d924	b924	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d926	b926	d0 0d		bne $b935			bne 	_TKNotRem 			 		; not shifted ?
.d928	b928	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d92a	b92a	d0 09		bne $b935			bne 	_TKNotRem
.d92c	b92c	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d92f	b92f	20 3b b9	jsr $b93b			jsr 	TOKCheckComment
.d932	b932	4c 31 b8	jmp $b831			jmp 	_TKTokeniseLoop
.d935	b935					_TKNotRem:
.d935	b935	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d938	b938	4c 31 b8	jmp $b831			jmp 	_TKTokeniseLoop 			; and go round again.
.d93b	b93b					TOKCheckComment:
.d93b	b93b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d93e	b93e	e8		inx				inx
.d93f	b93f	c9 20		cmp #$20			cmp 	#' '
.d941	b941	f0 f8		beq $b93b			beq 	TOKCheckComment
.d943	b943	ca		dex				dex 								; first non space character
.d944	b944	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d946	b946	f0 1f		beq $b967			beq 	_TOKCCExit 					; then we are okay
.d948	b948	c9 00		cmp #$00			cmp 	#0 							; EOL
.d94a	b94a	f0 1b		beq $b967			beq 	_TOKCCExit 					; then we are okay
.d94c	b94c	da		phx				phx
.d94d	b94d					_TOKCCLowerCase:
.d94d	b94d	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d950	b950	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d952	b952	90 09		bcc $b95d			bcc 	_TOKKCNotUC
.d954	b954	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d956	b956	b0 05		bcs $b95d			bcs 	_TOKKCNotUC
.d958	b958	49 20		eor #$20			eor 	#$20
.d95a	b95a	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d95d	b95d					_TOKKCNotUC:
.d95d	b95d	e8		inx				inx
.d95e	b95e	c9 00		cmp #$00			cmp 	#0
.d960	b960	d0 eb		bne $b94d			bne 	_TOKCCLowerCase
.d962	b962	fa		plx				plx
.d963	b963	ca		dex				dex 								; tokenise string expects initial skip.
.d964	b964	20 68 b9	jsr $b968			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d967	b967					_TOKCCExit:
.d967	b967	60		rts				rts
.d968	b968					TOKTokenString:
.d968	b968	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d96a	b96a	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d96d	b96d	e8		inx				inx									; start of quoted string.
.d96e	b96e	da		phx				phx 								; push start of string on top
.d96f	b96f	ca		dex				dex 								; because we pre-increment
.d970	b970					_TSFindEnd:
.d970	b970	e8		inx				inx
.d971	b971	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d974	b974	f0 04		beq $b97a			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d976	b976	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d978	b978	d0 f6		bne $b970			bne 	_TSFindEnd
.d97a	b97a					_TSEndOfString:
.d97a	b97a	7a		ply				ply  								; so now Y is first character, X is character after end.
.d97b	b97b	48		pha				pha 								; save terminating character
.d97c	b97c	20 84 b9	jsr $b984			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d97f	b97f	68		pla				pla 								; terminating character
.d980	b980	f0 01		beq $b983			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d982	b982	e8		inx				inx
.d983	b983					_TSNotQuote:
.d983	b983	60		rts				rts
.d984	b984					TOKWriteBlockXY:
.d984	b984	86 36		stx $36				stx 	zTemp0 						; save end character
.d986	b986	98		tya				tya 								; use 2's complement to work out the byte size
.d987	b987	49 ff		eor #$ff			eor 	#$FF
.d989	b989	38		sec				sec
.d98a	b98a	65 36		adc $36				adc 	zTemp0
.d98c	b98c	1a		inc a				inc 	a 							; one extra for NULL
.d98d	b98d	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d990	b990					_TOBlockLoop:
.d990	b990	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d992	b992	f0 09		beq $b99d			beq 	_TOBlockExit
.d994	b994	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d997	b997	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d99a	b99a	c8		iny				iny
.d99b	b99b	80 f3		bra $b990			bra 	_TOBlockLoop
.d99d	b99d					_TOBlockExit:
.d99d	b99d	a9 00		lda #$00			lda 	#0 							; add NULL.
.d99f	b99f	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d9a2	b9a2	60		rts				rts
.d9a3	b9a3					TOKHexConstant:
.d9a3	b9a3	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9a5	b9a5	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.d9a8	b9a8	e8		inx				inx									; start of quoted string.
.d9a9	b9a9	da		phx				phx 								; push start of constant on top
.d9aa	b9aa	ca		dex				dex
.d9ab	b9ab					_THFindLoop:
.d9ab	b9ab	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9ac	b9ac	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9af	b9af	c9 30		cmp #$30			cmp 	#"0"
.d9b1	b9b1	90 0c		bcc $b9bf			bcc 	_THFoundEnd
.d9b3	b9b3	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9b5	b9b5	90 f4		bcc $b9ab			bcc 	_THFindLoop
.d9b7	b9b7	c9 41		cmp #$41			cmp 	#"A"
.d9b9	b9b9	90 04		bcc $b9bf			bcc 	_THFoundEnd
.d9bb	b9bb	c9 47		cmp #$47			cmp 	#"F"+1
.d9bd	b9bd	90 ec		bcc $b9ab			bcc 	_THFindLoop
.d9bf	b9bf					_THFoundEnd:
.d9bf	b9bf	7a		ply				ply 								; restore start
.d9c0	b9c0	20 84 b9	jsr $b984			jsr 	TOKWriteBlockXY 			; output the block
.d9c3	b9c3	60		rts				rts
.d9c4	b9c4					TOKCalculateHash:
.d9c4	b9c4	da		phx				phx
.d9c5	b9c5	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9c8	b9c8	a9 00		lda #$00			lda 	#0
.d9ca	b9ca					_TCHLoop:
.d9ca	b9ca	18		clc				clc
.d9cb	b9cb	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9ce	b9ce	e8		inx				inx
.d9cf	b9cf	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9d2	b9d2	d0 f6		bne $b9ca			bne 	_TCHLoop
.d9d4	b9d4	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9d7	b9d7	fa		plx				plx
.d9d8	b9d8	60		rts				rts
.d9d9	b9d9					LCLFixLineBufferCase:
.d9d9	b9d9	a2 00		ldx #$00			ldx 	#0
.d9db	b9db					_FLBCLoop:
.d9db	b9db	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9de	b9de	f0 22		beq $ba02			beq 	_FLBCExit 					; end of string.
.d9e0	b9e0	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9e2	b9e2	f0 11		beq $b9f5			beq 	_FLBCInQuotes
.d9e4	b9e4	e8		inx				inx
.d9e5	b9e5	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9e7	b9e7	90 f2		bcc $b9db			bcc 	_FLBCLoop
.d9e9	b9e9	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9eb	b9eb	b0 ee		bcs $b9db			bcs 	_FLBCLoop
.d9ed	b9ed	38		sec				sec 								; make U/C
.d9ee	b9ee	e9 20		sbc #$20			sbc 	#32
.d9f0	b9f0	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d9f3	b9f3	80 e6		bra $b9db			bra 	_FLBCLoop
.d9f5	b9f5					_FLBCInQuotes:
.d9f5	b9f5	e8		inx				inx 								; advance
.d9f6	b9f6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d9f9	b9f9	f0 07		beq $ba02			beq 	_FLBCExit 					; exit on EOS
.d9fb	b9fb	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9fd	b9fd	d0 f6		bne $b9f5			bne 	_FLBCInQuotes
.d9ff	b9ff	e8		inx				inx 								; skip over it
.da00	ba00	80 d9		bra $b9db			bra 	_FLBCLoop
.da02	ba02					_FLBCExit:
.da02	ba02	60		rts				rts
.da03	ba03					TOKExtractLineNumber:
.da03	ba03	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da06	ba06	48		pha				pha
.da07	ba07	ad 27 04	lda $0427			lda 	tokenLineNumber
.da0a	ba0a	48		pha				pha
.da0b	ba0b	20 41 ba	jsr $ba41			jsr 	_LCLNTimes2 				; line # x 2
.da0e	ba0e	20 41 ba	jsr $ba41			jsr 	_LCLNTimes2 				; line # x 4
.da11	ba11	18		clc				clc 								; add stacked value
.da12	ba12	68		pla				pla
.da13	ba13	6d 27 04	adc $0427			adc 	tokenLineNumber
.da16	ba16	8d 27 04	sta $0427			sta 	tokenLineNumber
.da19	ba19	68		pla				pla
.da1a	ba1a	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da1d	ba1d	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da20	ba20	20 41 ba	jsr $ba41			jsr 	_LCLNTimes2 				; line # x 10
.da23	ba23	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da26	ba26	e8		inx				inx
.da27	ba27	29 0f		and #$0f			and 	#15 						; add to line #
.da29	ba29	18		clc				clc
.da2a	ba2a	6d 27 04	adc $0427			adc 	tokenLineNumber
.da2d	ba2d	8d 27 04	sta $0427			sta 	tokenLineNumber
.da30	ba30	90 03		bcc $ba35			bcc 	_TLENNoCarry
.da32	ba32	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da35	ba35					_TLENNoCarry:
.da35	ba35	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da38	ba38	c9 30		cmp #$30			cmp 	#'0'
.da3a	ba3a	90 04		bcc $ba40			bcc 	_TLENExit
.da3c	ba3c	c9 3a		cmp #$3a			cmp 	#'9'+1
.da3e	ba3e	90 c3		bcc $ba03			bcc 	TOKExtractLineNumber
.da40	ba40					_TLENExit:
.da40	ba40	60		rts				rts
.da41	ba41					_LCLNTimes2:
.da41	ba41	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da44	ba44	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da47	ba47	60		rts				rts
.da48	ba48					TOKWriteByte:
.da48	ba48	da		phx				phx
.da49	ba49	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da4c	ba4c	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da4f	ba4f	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da52	ba52	fa		plx				plx
.da53	ba53	60		rts				rts
.da54	ba54					TOKCheckCreateVariableRecord:
.da54	ba54	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da56	ba56	85 36		sta $36				sta 	0+zTemp0
.da58	ba58	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da5a	ba5a	85 37		sta $37				sta 	1+zTemp0
.da5c	ba5c					_CCVSearch:
.da5c	ba5c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da5e	ba5e	f0 2c		beq $ba8c			beq 	_CCVFail
.da60	ba60	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da62	ba62	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da64	ba64	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da67	ba67	d0 16		bne $ba7f			bne 	_CCVNext
.da69	ba69	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da6b	ba6b	ae 00 04	ldx $0400			ldx 	identStart
.da6e	ba6e					_CCVCompare:
.da6e	ba6e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da71	ba71	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da73	ba73	e8		inx				inx 								; advance pointers
.da74	ba74	c8		iny				iny
.da75	ba75	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da76	ba76	d0 07		bne $ba7f			bne 	_CCVNext  					; didn't match go to next.
.da78	ba78	90 f4		bcc $ba6e			bcc 	_CCVCompare 				; not finished yet.
.da7a	ba7a	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da7d	ba7d	f0 41		beq $bac0			beq 	_CCVFound 					; yes, we were successful
.da7f	ba7f					_CCVNext:
.da7f	ba7f	18		clc				clc 								; go to next record.
.da80	ba80	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da82	ba82	65 36		adc $36				adc 	zTemp0
.da84	ba84	85 36		sta $36				sta 	zTemp0
.da86	ba86	90 d4		bcc $ba5c			bcc 	_CCVSearch
.da88	ba88	e6 37		inc $37				inc 	zTemp0+1
.da8a	ba8a	80 d0		bra $ba5c			bra 	_CCVSearch
.da8c	ba8c					_CCVFail:
.da8c	ba8c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da8e	ba8e	ad 03 04	lda $0403			lda 	identHash
.da91	ba91	91 36		sta ($36),y			sta 	(zTemp0),y
.da93	ba93	c8		iny				iny 								; offset 2 is the type byte
.da94	ba94	ad 04 04	lda $0404			lda 	identTypeByte
.da97	ba97	91 36		sta ($36),y			sta 	(zTemp0),y
.da99	ba99	c8		iny				iny
.da9a	ba9a					_CCVData:
.da9a	ba9a	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da9c	ba9c	91 36		sta ($36),y			sta 	(zTemp0),y
.da9e	ba9e	c8		iny				iny
.da9f	ba9f	c0 08		cpy #$08			cpy 	#8
.daa1	baa1	90 f7		bcc $ba9a			bcc 	_CCVData
.daa3	baa3	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daa6	baa6					_CCVCopyName:
.daa6	baa6	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daa9	baa9	91 36		sta ($36),y			sta 	(zTemp0),y
.daab	baab	e8		inx				inx
.daac	baac	c8		iny				iny
.daad	baad	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dab0	bab0	d0 f4		bne $baa6			bne 	_CCVCopyName
.dab2	bab2	98		tya				tya 								; patch offset
.dab3	bab3	92 36		sta ($36)			sta 	(zTemp0)
.dab5	bab5	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dab7	bab7	91 36		sta ($36),y			sta 	(zTemp0),y
.dab9	bab9	88		dey				dey
.daba	baba	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dabc	babc	09 80		ora #$80			ora 	#$80
.dabe	babe	91 36		sta ($36),y			sta 	(zTemp0),y
.dac0	bac0					_CCVFound:
.dac0	bac0	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dac2	bac2	38		sec				sec
.dac3	bac3	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dac5	bac5	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dac7	bac7	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.daca	baca	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dacc	bacc	20 48 ba	jsr $ba48			jsr 	TOKWriteByte
.dacf	bacf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dad0	bad0					SNDCheckChannel:
.dad0	bad0	aa		tax				tax
.dad1	bad1	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dad4	bad4	d0 38		bne $bb0e			bne 	_SNDCCExit
.dad6	bad6	da		phx				phx 								; save current channel
.dad7	bad7	8a		txa				txa 								; put in A
.dad8	bad8	20 54 bb	jsr $bb54			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dadb	badb	68		pla				pla 								; channel # in A
.dadc	badc	90 30		bcc $bb0e			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dade	bade	a8		tay				tay 								; Y is the channel #
.dadf	badf	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dae2	bae2	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.dae5	bae5	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.dae8	bae8	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.daeb	baeb	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.daee	baee	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.daf1	baf1	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.daf4	baf4	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.daf7	baf7	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.dafa	bafa	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.dafd	bafd	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db00	bb00	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db03	bb03	5a		phy				phy 								; save channel #
.db04	bb04	20 6e bb	jsr $bb6e			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db07	bb07	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db0a	bb0a	68		pla				pla
.db0b	bb0b	20 0f bb	jsr $bb0f			jsr 	SNDUpdateNote 				; update channel A
.db0e	bb0e					_SNDCCExit:
.db0e	bb0e	60		rts				rts
.db0f	bb0f					SNDUpdateNote:
.db0f	bb0f	aa		tax				tax 								; so we can access records
.db10	bb10	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db11	bb11	0a		asl a				asl 	a
.db12	bb12	0a		asl a				asl 	a
.db13	bb13	0a		asl a				asl 	a
.db14	bb14	0a		asl a				asl 	a
.db15	bb15	8d 41 08	sta $0841			sta 	SNDChannelBits
.db18	bb18	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db1b	bb1b	f0 2e		beq $bb4b			beq 	_SNDUNIsSilent
.db1d	bb1d	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db20	bb20	48		pha				pha
.db21	bb21	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db24	bb24	29 0f		and #$0f			and 	#$0F
.db26	bb26	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db29	bb29	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db2b	bb2b	20 b8 bb	jsr $bbb8			jsr 	SNDWritePorts
.db2e	bb2e	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db31	bb31	8d 41 08	sta $0841			sta 	SNDChannelBits
.db34	bb34	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db37	bb37	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db3a	bb3a	6a		ror a				ror 	a
.db3b	bb3b	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db3e	bb3e	6a		ror a				ror 	a
.db3f	bb3f	4a		lsr a				lsr 	a 							; put in bits 0-5
.db40	bb40	4a		lsr a				lsr 	a
.db41	bb41	20 b8 bb	jsr $bbb8			jsr 	SNDWritePorts 				; write as rest of pitch register
.db44	bb44	68		pla				pla
.db45	bb45	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db47	bb47	20 b8 bb	jsr $bbb8			jsr 	SNDWritePorts
.db4a	bb4a	60		rts				rts
.db4b	bb4b					_SNDUNIsSilent:
.db4b	bb4b	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db4e	bb4e	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db50	bb50	20 b8 bb	jsr $bbb8			jsr 	SNDWritePorts 				; write to the ports
.db53	bb53	60		rts				rts
.db54	bb54					SNDFindNextNoteForA:
.db54	bb54	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db57	bb57	f0 13		beq $bb6c			beq 	_SNDFNNFail 				; queue empty.
.db59	bb59	a2 00		ldx #$00			ldx 	#0
.db5b	bb5b					_SNDFNNSearch:
.db5b	bb5b	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db5e	bb5e	38		sec				sec
.db5f	bb5f	f0 0c		beq $bb6d			beq 	_SNDFNNExit 				; if so exit with CS.
.db61	bb61	e8		inx				inx 								; next queue slot.
.db62	bb62	e8		inx				inx
.db63	bb63	e8		inx				inx
.db64	bb64	e8		inx				inx
.db65	bb65	e8		inx				inx
.db66	bb66	e8		inx				inx
.db67	bb67	e8		inx				inx
.db68	bb68	e8		inx				inx
.db69	bb69	88		dey				dey 								; done the whole queue
.db6a	bb6a	d0 ef		bne $bb5b			bne 	_SNDFNNSearch 				; no, go back.
.db6c	bb6c					_SNDFNNFail:
.db6c	bb6c	18		clc				clc
.db6d	bb6d					_SNDFNNExit:
.db6d	bb6d	60		rts				rts
.db6e	bb6e					SNDDeleteXFromQueue:
.db6e	bb6e	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db70	bb70	f0 09		beq $bb7b			beq 	_SNDDXExit
.db72	bb72	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db75	bb75	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db78	bb78	e8		inx				inx
.db79	bb79	80 f3		bra $bb6e			bra 	SNDDeleteXFromQueue
.db7b	bb7b					_SNDDXExit:
.db7b	bb7b	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db7c	bb7c					SNDQueueRequest:
.db7c	bb7c	86 36		stx $36				stx 	zTemp0						; save queue address
.db7e	bb7e	84 37		sty $37				sty 	zTemp0+1
.db80	bb80	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.db83	bb83	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db85	bb85	f0 21		beq $bba8			beq 	_SNDQRExit
.db87	bb87	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db89	bb89	48		pha				pha
.db8a	bb8a	8a		txa				txa  								; get offset in queue buffer/
.db8b	bb8b	0a		asl a				asl 	a
.db8c	bb8c	0a		asl a				asl 	a
.db8d	bb8d	0a		asl a				asl 	a
.db8e	bb8e	aa		tax				tax
.db8f	bb8f	68		pla				pla 								; get back and push again
.db90	bb90	48		pha				pha
.db91	bb91	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.db94	bb94	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db96	bb96					_SNDQCopy:
.db96	bb96	b1 36		lda ($36),y			lda 	(zTemp0),y
.db98	bb98	e8		inx				inx
.db99	bb99	c8		iny				iny
.db9a	bb9a	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db9d	bb9d	c0 06		cpy #$06			cpy 	#6
.db9f	bb9f	d0 f5		bne $bb96			bne 	_SNDQCopy
.dba1	bba1	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dba4	bba4	68		pla				pla 								; get channel # back
.dba5	bba5	20 d0 ba	jsr $bad0			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dba8	bba8					_SNDQRExit:
.dba8	bba8	60		rts				rts
.dba9	bba9					SNDSilenceChannel:
.dba9	bba9	aa		tax				tax 								; zero time left.
.dbaa	bbaa	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbad	bbad	0a		asl a				asl 	a 							; shift into position
.dbae	bbae	0a		asl a				asl 	a
.dbaf	bbaf	0a		asl a				asl 	a
.dbb0	bbb0	0a		asl a				asl 	a
.dbb1	bbb1	0a		asl a				asl 	a
.dbb2	bbb2	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbb4	bbb4	20 b8 bb	jsr $bbb8			jsr 	SNDWritePorts
.dbb7	bbb7	60		rts				rts
.dbb8	bbb8					SNDWritePorts:
.dbb8	bbb8	da		phx				phx 								; save X
.dbb9	bbb9	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbbb	bbbb	64 01		stz $01				stz 	1 							; access I/O page 0
.dbbd	bbbd	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbc0	bbc0	8d 10 d6	sta $d610			sta 	$D610
.dbc3	bbc3	86 01		stx $01				stx 	1 							; restore I/O
.dbc5	bbc5	fa		plx				plx 								; restore X
.dbc6	bbc6	60		rts				rts
.dbc7	bbc7					Export_SNDCommand:
.dbc7	bbc7	da		phx				phx 								; save XY
.dbc8	bbc8	5a		phy				phy
.dbc9	bbc9	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbcb	bbcb	f0 1d		beq $bbea			beq 	_SNDInitialise
.dbcd	bbcd	90 28		bcc $bbf7			bcc 	_SNDExit
.dbcf	bbcf	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbd1	bbd1	f0 17		beq $bbea			beq 	_SNDSilence
.dbd3	bbd3	b0 22		bcs $bbf7			bcs 	_SNDExit
.dbd5	bbd5	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbd7	bbd7	b0 09		bcs $bbe2			bcs 	_SNDQueryPlay
.dbd9	bbd9	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbdb	bbdb	b0 1a		bcs $bbf7			bcs 	_SNDExit
.dbdd	bbdd	20 7c bb	jsr $bb7c			jsr 	SNDQueueRequest
.dbe0	bbe0	80 15		bra $bbf7			bra 	_SNDExit
.dbe2	bbe2					_SNDQueryPlay:
.dbe2	bbe2	29 03		and #$03			and 	#3 							; get channel #
.dbe4	bbe4	aa		tax				tax
.dbe5	bbe5	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbe8	bbe8	80 0d		bra $bbf7			bra 	_SNDExit
.dbea	bbea					_SNDInitialise:
.dbea	bbea					_SNDSilence:
.dbea	bbea	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dbed	bbed	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbef	bbef					_SNDSilenceLoop:
.dbef	bbef	48		pha				pha
.dbf0	bbf0	20 a9 bb	jsr $bba9			jsr 	SNDSilenceChannel
.dbf3	bbf3	68		pla				pla
.dbf4	bbf4	3a		dec a				dec 	a
.dbf5	bbf5	10 f8		bpl $bbef			bpl 	_SNDSilenceLoop
.dbf7	bbf7					_SNDExit:
.dbf7	bbf7	7a		ply				ply
.dbf8	bbf8	fa		plx				plx
.dbf9	bbf9	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dbfa	bbfa					Export_SNDUpdate:
.dbfa	bbfa					PagedSNDUpdate:
.dbfa	bbfa	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dbfd	bbfd	f0 05		beq $bc04			beq 	_SNDUNot0 					; not playing
.dbff	bbff	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc01	bc01	20 23 bc	jsr $bc23			jsr 	SNDUpdateChannel 			; update it.
.dc04	bc04					_SNDUNot0:
.dc04	bc04	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc07	bc07	f0 05		beq $bc0e			beq 	_SNDUNot1
.dc09	bc09	a2 01		ldx #$01			ldx 	#1
.dc0b	bc0b	20 23 bc	jsr $bc23			jsr 	SNDUpdateChannel
.dc0e	bc0e					_SNDUNot1:
.dc0e	bc0e	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc11	bc11	f0 05		beq $bc18			beq 	_SNDUNot2
.dc13	bc13	a2 02		ldx #$02			ldx 	#2
.dc15	bc15	20 23 bc	jsr $bc23			jsr 	SNDUpdateChannel
.dc18	bc18					_SNDUNot2:
.dc18	bc18	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc1b	bc1b	f0 05		beq $bc22			beq 	_SNDUNot3
.dc1d	bc1d	a2 03		ldx #$03			ldx 	#3
.dc1f	bc1f	20 23 bc	jsr $bc23			jsr 	SNDUpdateChannel
.dc22	bc22					_SNDUNot3:
.dc22	bc22	60		rts				rts
.dc23	bc23					SNDUpdateChannel:
.dc23	bc23	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc25	bc25	f0 2c		beq $bc53			beq 	_SNDUCExit
.dc27	bc27	3a		dec a				dec 	a 							; decrement and update timer
.dc28	bc28	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc2b	bc2b	f0 1d		beq $bc4a			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc2d	bc2d	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc30	bc30	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc33	bc33	f0 1e		beq $bc53			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc35	bc35	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc36	bc36	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc39	bc39	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc3c	bc3c	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc3f	bc3f	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc42	bc42	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc45	bc45	29 03		and #$03			and 	#3
.dc47	bc47	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc4a	bc4a					_SNDUCUpdate:
.dc4a	bc4a	8a		txa				txa 								; which channel.
.dc4b	bc4b	48		pha				pha
.dc4c	bc4c	20 0f bb	jsr $bb0f			jsr 	SNDUpdateNote 				; update the current note
.dc4f	bc4f	68		pla				pla
.dc50	bc50	20 d0 ba	jsr $bad0			jsr 	SNDCheckChannel 			; more to do ?
.dc53	bc53					_SNDUCExit:
.dc53	bc53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
