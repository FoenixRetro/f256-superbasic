
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Jan  6 16:00:40 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_JOYBLPAREN                       = $93; $93 JOYB(
=$94						KWD_JOYXLPAREN                       = $94; $94 JOYX(
=$95						KWD_JOYYLPAREN                       = $95; $95 JOYY(
=$96						KWD_LEFTDOLLARLPAREN                 = $96; $96 LEFT$(
=$97						KWD_LENLPAREN                        = $97; $97 LEN(
=$98						KWD_MAXLPAREN                        = $98; $98 MAX(
=$99						KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a						KWD_MINLPAREN                        = $9a; $9a MIN(
=$9b						KWD_NOTLPAREN                        = $9b; $9b NOT(
=$9c						KWD_PEEKLPAREN                       = $9c; $9c PEEK(
=$9d						KWD_PEEKDLPAREN                      = $9d; $9d PEEKD(
=$9e						KWD_PEEKLLPAREN                      = $9e; $9e PEEKL(
=$9f						KWD_PEEKWLPAREN                      = $9f; $9f PEEKW(
=$a0						KWD_PLAYINGLPAREN                    = $a0; $a0 PLAYING(
=$a1						KWD_RANDOMLPAREN                     = $a1; $a1 RANDOM(
=$a2						KWD_RIGHTDOLLARLPAREN                = $a2; $a2 RIGHT$(
=$a3						KWD_RNDLPAREN                        = $a3; $a3 RND(
=$a4						KWD_SGNLPAREN                        = $a4; $a4 SGN(
=$a5						KWD_SPCLPAREN                        = $a5; $a5 SPC(
=$a6						KWD_STRDOLLARLPAREN                  = $a6; $a6 STR$(
=$a7						KWD_TIMERLPAREN                      = $a7; $a7 TIMER(
=$a8						KWD_TRUE                             = $a8; $a8 TRUE
=$a9						KWD_VALLPAREN                        = $a9; $a9 VAL(
=$aa						KWD_FOR                              = $aa; $aa FOR
=$ab						KWD_IF                               = $ab; $ab IF
=$ac						KWD_PROC                             = $ac; $ac PROC
=$ad						KWD_REPEAT                           = $ad; $ad REPEAT
=$ae						KWD_WHILE                            = $ae; $ae WHILE
=$af						KWD_ENDIF                            = $af; $af ENDIF
=$b0						KWD_ENDPROC                          = $b0; $b0 ENDPROC
=$b1						KWD_NEXT                             = $b1; $b1 NEXT
=$b2						KWD_THEN                             = $b2; $b2 THEN
=$b3						KWD_UNTIL                            = $b3; $b3 UNTIL
=$b4						KWD_WEND                             = $b4; $b4 WEND
=$b5						KWD_BY                               = $b5; $b5 BY
=$b6						KWD_CALL                             = $b6; $b6 CALL
=$b7						KWD_CIRCLE                           = $b7; $b7 CIRCLE
=$b8						KWD_CLEAR                            = $b8; $b8 CLEAR
=$b9						KWD_COLOR                            = $b9; $b9 COLOR
=$ba						KWD_COLOUR                           = $ba; $ba COLOUR
=$bb						KWD_DATA                             = $bb; $bb DATA
=$bc						KWD_DIM                              = $bc; $bc DIM
=$bd						KWD_DOWNTO                           = $bd; $bd DOWNTO
=$be						KWD_ELSE                             = $be; $be ELSE
=$bf						KWD_FROM                             = $bf; $bf FROM
=$c0						KWD_GFX                              = $c0; $c0 GFX
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_READ                             = $cf; $cf READ
=$d0						KWD_RECT                             = $d0; $d0 RECT
=$d1						KWD_REM                              = $d1; $d1 REM
=$d2						KWD_SOLID                            = $d2; $d2 SOLID
=$d3						KWD_SOUND                            = $d3; $d3 SOUND
=$d4						KWD_SPRITE                           = $d4; $d4 SPRITE
=$d5						KWD_TEXT                             = $d5; $d5 TEXT
=$d6						KWD_TO                               = $d6; $d6 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$aa						KWC_FIRST_STRUCTURE = $aa
=$af						KWC_FIRST_STRUCTURE_DEC = $af
=$b4						KWC_LAST_STRUCTURE = $b4
=$83						KWC_FIRST_UNARY = $83
=$a9						KWC_LAST_UNARY = $a9

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 69 bc	jsr $bc69		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 2b bc	jsr $bc2b		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 7a bc	jsr $bc7a		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 75 bc	jsr $bc75		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 cf bc	jsr $bccf		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 d9 bc	jsr $bcd9		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 fb bc	jsr $bcfb		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 38 bd	jsr $bd38		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 b5 bc	jsr $bcb5		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 9e bb	jsr $bb9e		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 d1 bb	jsr $bbd1		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 4f b5	jsr $b54f		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 e3 b7	jsr $b7e3		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 96 aa	jsr $aa96			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c 68 06	stz $0668			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80da		a9 09		lda #$09			lda 	#9
.80dc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80df		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80e2		64 01		stz $01				stz 	1
.80e4		ad ad d6	lda $d6ad			lda 	$D6AD
.80e7		20 b3 82	jsr $82b3			jsr 	PrintHex
.80ea		ad ac d6	lda $d6ac			lda 	$D6AC
.80ed		20 b3 82	jsr $82b3			jsr 	PrintHex
.80f0		ad ab d6	lda $d6ab			lda 	$D6AB
.80f3		20 b3 82	jsr $82b3			jsr 	PrintHex
.80f6		ad aa d6	lda $d6aa			lda 	$D6AA
.80f9		20 b3 82	jsr $82b3			jsr 	PrintHex
.80fc		a9 20		lda #$20			lda 	#32
.80fe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8101		ad a8 d6	lda $d6a8			lda 	$D6A8
.8104		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8107		ad a9 d6	lda $d6a9			lda 	$D6A9
.810a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.810d		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.810f		a9 1d		lda #$1d			lda 	#Prompt & $FF
.8111		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8114		20 82 8d	jsr $8d82			jsr 	NewProgram 					; erase current program
.8117		4c f6 84	jmp $84f6			jmp 	WarmStart					; make same size.
.811a		4c f6 84	jmp $84f6			jmp 	WarmStart
>811d		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811f		09 09 30 36 2f 30 31 2f			.text 9,9,"06/01/23 25"
>8127		32 33 20 32 35

;******  Return to file: ./common/aa.system/00start.asm

>812c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.8130						ProcessEvents:
.8130		a9 53		lda #$53			lda     #<event 					; tell kernel where events go.
.8132		85 f0		sta $f0				sta     kernel.args.events+0
.8134		a9 08		lda #$08			lda     #>event
.8136		85 f1		sta $f1				sta     kernel.args.events+1
.8138		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.813b		b0 27		bcs $8164			bcs 	_PEExitZ 					; nothing left to process.
.813d		ad 53 08	lda $0853			lda 	event.type 					; go back if event not key.pressed.
.8140		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8142		d0 ec		bne $8130			bne 	ProcessEvents
.8144		ad 59 08	lda $0859			lda	 	event.key.flags 			; is event.key.flags = 0 ?
.8147		d0 e7		bne $8130			bne 	ProcessEvents
.8149		ad 58 08	lda $0858			lda 	event.key.ascii 			; is it Ctrl+C
.814c		c9 03		cmp #$03			cmp 	#3
.814e		f0 11		beq $8161			beq 	_PEReturnBreak  			; no, keep going.
.8150		da		phx				phx
.8151		ae 61 06	ldx $0661			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8154		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8156		f0 06		beq $815e			beq 	_PENoQueue
.8158		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x 			; write into queue
.815b		ee 61 06	inc $0661			inc 	KeyboardQueueEntries 		; bump count
.815e						_PENoQueue:
.815e		fa		plx				plx
.815f		80 cf		bra $8130			bra 	ProcessEvents
.8161						_PEReturnBreak:
.8161		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8163		60		rts				rts
.8164						_PEExitZ:
.8164		a9 00		lda #$00			lda 	#0
.8166		60		rts				rts
.8167						PopKeyboardQueue:
.8167		ad 61 06	lda $0661			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.816a		f0 17		beq $8183			beq 	_PKQExit 					; zero, then exit.
.816c		ad 59 06	lda $0659			lda 	KeyboardQueue 				; save head of keyboard queue
.816f		48		pha				pha
.8170		da		phx				phx 								; drop head of queue
.8171		a2 00		ldx #$00			ldx 	#0
.8173						_PKQLoop:
.8173		bd 5a 06	lda $065a,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8176		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8179		e8		inx				inx
.817a		e0 07		cpx #$07			cpx 	#7
.817c		d0 f5		bne $8173			bne 	_PKQLoop
.817e		fa		plx				plx
.817f		ce 61 06	dec $0661			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8182		68		pla				pla 								; restore head of queue.
.8183						_PKQExit:
.8183		60		rts				rts
=8						KBDQueueSize = 8
.0659						KeyboardQueue:
>0659								.fill 	KBDQueueSize
.0661						KeyboardQueueEntries:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.8184						AscGet:
.8184		fa		plx				plx 								; restore stack pos
.8185						AscGet2:
.8185		20 74 93	jsr $9374			jsr 	CheckRightBracket
.8188		20 30 81	jsr $8130	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.818b		d0 0b		bne $8198			bne 	_AGBreak
.818d		20 67 81	jsr $8167			jsr 	PopKeyboardQueue 			; wait for key.
.8190		c9 00		cmp #$00			cmp 	#0
.8192		f0 f4		beq $8188			beq 	_AGKey
.8194		20 da a2	jsr $a2da			jsr 	NSMSetByte
.8197		60		rts				rts
.8198						_AGBreak:
.8198		a9 01		lda #$01		lda	#1
.819a		4c 8d 93	jmp $938d		jmp	ErrorHandler
.819d						AscInkey:
.819d		fa		plx				plx 								; restore stack pos
.819e						AscInkey2:
.819e		20 74 93	jsr $9374			jsr 	CheckRightBracket
.81a1		20 67 81	jsr $8167			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.81a4		20 da a2	jsr $a2da			jsr 	NSMSetByte
.81a7		60		rts				rts
.81a8						ChrGet:
.81a8		fa		plx				plx
.81a9		20 85 81	jsr $8185			jsr 	AscGet2
.81ac		4c b3 81	jmp $81b3			jmp 	GetInkeyToString
.81af						ChrInkey:
.81af		fa		plx				plx
.81b0		20 9e 81	jsr $819e			jsr 	AscInkey2
.81b3						GetInkeyToString:
.81b3		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.81b5		f0 0b		beq $81c2			beq 	_GKISNull
.81b7		48		pha				pha
.81b8		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.81ba		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.81bd		68		pla				pla 								; write number to it
.81be		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite
.81c1		60		rts				rts
.81c2						_GKISNull:
.81c2		a9 00		lda #$00			lda 	#0
.81c4		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.81c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81c8						AssembleGroup1:
.81c8		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.81ca		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.81cd		80 02		bra $81d1			bra 	AsmGroup12
.81cf						AssembleGroup2:
.81cf		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.81d1						AsmGroup12:
.81d1		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.81d4		68		pla				pla 								; pop the return address to access the information following.
.81d5		fa		plx				plx
.81d6		20 5d 82	jsr $825d			jsr 	AccessParameters 			; get opcode and save as base
.81d9		8d 24 04	sta $0424			sta 	BaseOpcode
.81dc		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81df		d0 08		bne $81e9			bne 	_AG12HaveMask
.81e1		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81e3		20 65 82	jsr $8265			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81e6		8d 25 04	sta $0425			sta 	ModeMask
.81e9						_AG12HaveMask:
.81e9		20 99 83	jsr $8399			jsr 	TypeAndCalculateOperand 	; get zero page type
.81ec		da		phx				phx 								; save found address mode
.81ed		20 c9 82	jsr $82c9			jsr 	AssembleModeX
.81f0		fa		plx				plx  								; restore address mode
.81f1		b0 0b		bcs $81fe			bcs 	_AG12Exit
.81f3		20 ff 81	jsr $81ff			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81f6		20 c9 82	jsr $82c9			jsr 	AssembleModeX
.81f9		b0 03		bcs $81fe			bcs 	_AG12Exit
.81fb		4c 56 a4	jmp $a456			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81fe						_AG12Exit:
.81fe		60		rts				rts
.81ff						PromoteToAbsolute:
.81ff		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8201		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8203		f0 19		beq $821e			beq 	_PTADo
.8205		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8207		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8209		f0 13		beq $821e			beq 	_PTADo
.820b		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.820d		e0 80		cpx #$80			cpx 	#AM_ZEROY
.820f		f0 0d		beq $821e			beq 	_PTADo
.8211		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8213		e0 d1		cpx #$d1			cpx 	#AM_IND
.8215		f0 07		beq $821e			beq 	_PTADo
.8217		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8219		e0 c0		cpx #$c0			cpx 	#AM_INDX
.821b		f0 01		beq $821e			beq 	_PTADo
.821d		60		rts				rts
.821e						_PTADo:
.821e		aa		tax				tax
.821f		60		rts				rts
.8220						AssembleGroup3:
.8220		68		pla				pla 								; get parameters, which is just the opcode.
.8221		fa		plx				plx
.8222		20 5d 82	jsr $825d			jsr 	AccessParameters 			; get and output opcode
.8225		20 75 82	jsr $8275			jsr 	AssemblerWriteByte
.8228		20 fd 83	jsr $83fd			jsr 	CalculateOperand 			; get a 16 bit operand
.822b		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.822d		38		sec				sec
.822e		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8231		48		pha				pha 								; LSB in A
.8232		a5 60		lda $60				lda 	NSMantissa1
.8234		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8237		aa		tax				tax 								; MSB in X
.8238		68		pla				pla
.8239		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.823a		69 7f		adc #$7f			adc 	#$7F
.823c		90 01		bcc $823f			bcc 	_AG3NoCarry
.823e		e8		inx				inx
.823f						_AG3NoCarry:
.823f		38		sec				sec 								; fix back and write out anyways.
.8240		e9 80		sbc #$80			sbc 	#$80
.8242		20 75 82	jsr $8275			jsr 	AssemblerWriteByte
.8245		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8247		f0 0a		beq $8253			beq 	_AG3Exit
.8249		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.824c		29 01		and #$01			and 	#1
.824e		f0 03		beq $8253			beq 	_AG3Exit
.8250		4c 5b a4	jmp $a45b			jmp 	RangeError 					; no, branch is out of range
.8253						_AG3Exit:
.8253		60		rts				rts
.8254						AssembleGroup4:
.8254		68		pla				pla 								; pop address
.8255		fa		plx				plx
.8256		20 5d 82	jsr $825d			jsr 	AccessParameters 			; access and get first
.8259		20 75 82	jsr $8275			jsr 	AssemblerWriteByte 			; output it.
.825c		60		rts				rts
.825d						AccessParameters:
.825d		8d 21 04	sta $0421			sta 	ParamStart
.8260		8e 22 04	stx $0422			stx 	ParamStart+1
.8263		a9 01		lda #$01			lda 	#1
.8265						GetParameter:
.8265		5a		phy				phy
.8266		a8		tay				tay
.8267		ad 21 04	lda $0421			lda 	ParamStart
.826a		85 36		sta $36				sta 	zTemp0
.826c		ad 22 04	lda $0422			lda 	ParamStart+1
.826f		85 37		sta $37				sta 	zTemp0+1
.8271		b1 36		lda ($36),y			lda 	(zTemp0),y
.8273		7a		ply				ply
.8274		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8275						AssemblerWriteByte:
.8275		48		pha			pha
.8276		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8279		29 02		and #$02		and 	#2
.827b		f0 1b		beq $8298		beq 	_AWBNoPrint
.827d		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8280		20 b3 82	jsr $82b3		jsr 	PrintHex
.8283		ad 1e 04	lda $041e		lda		AssemblerAddress
.8286		20 b3 82	jsr $82b3		jsr 	PrintHex
.8289		a9 20		lda #$20		lda 	#' '
.828b		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.828e		68		pla			pla 									; print byte
.828f		48		pha			pha
.8290		20 b3 82	jsr $82b3		jsr 	PrintHex
.8293		a9 0d		lda #$0d		lda 	#13
.8295		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8298						_AWBNoPrint:
.8298		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.829b		85 36		sta $36			sta 	zTemp0
.829d		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.82a0		f0 0e		beq $82b0		beq 	_AWBRange
.82a2		85 37		sta $37			sta 	zTemp0+1
.82a4		68		pla			pla 									; write byte out
.82a5		92 36		sta ($36)		sta 	(zTemp0)
.82a7		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.82aa		d0 03		bne $82af		bne 	_AWBNoCarry
.82ac		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.82af						_AWBNoCarry:
.82af		60		rts			rts
.82b0						_AWBRange:
.82b0		4c 5b a4	jmp $a45b		jmp 	RangeError
.82b3						PrintHex:
.82b3		48		pha				pha
.82b4		4a		lsr a				lsr 	a
.82b5		4a		lsr a				lsr 	a
.82b6		4a		lsr a				lsr 	a
.82b7		4a		lsr a				lsr 	a
.82b8		20 bc 82	jsr $82bc			jsr 	_PrintNibble
.82bb		68		pla				pla
.82bc						_PrintNibble:
.82bc		29 0f		and #$0f			and 	#15
.82be		c9 0a		cmp #$0a			cmp 	#10
.82c0		90 02		bcc $82c4			bcc 	_NoShift
.82c2		69 06		adc #$06			adc 	#6
.82c4						_NoShift:
.82c4		69 30		adc #$30			adc 	#48
.82c6		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82c9						AssembleModeX:
.82c9		5a		phy				phy
.82ca		ad 23 04	lda $0423			lda 	IsGroup1
.82cd		f0 17		beq $82e6			beq 	_AMXGroup2
.82cf		8a		txa				txa 							; is it in group # 1
.82d0		29 40		and #$40			and 	#AM_ISG1
.82d2		f0 4d		beq $8321			beq 	_AMXFail 				; no, give up.
.82d4		8a		txa				txa 							; get back.
.82d5		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.82d7		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.82d9		d0 22		bne $82fd			bne 	_AMXHaveInfo
.82db		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.82de		c9 81		cmp #$81			cmp 	#$81
.82e0		f0 3f		beq $8321			beq 	_AMXFail
.82e2		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82e4		80 17		bra $82fd			bra 	_AMXHaveInfo 			; odd design decision there.
.82e6						_AMXGroup2:
.82e6		8a		txa				txa 							; is it in group 2 ?
.82e7		29 20		and #$20			and 	#AM_ISG2
.82e9		f0 36		beq $8321			beq 	_AMXFail 				; no, give up.
.82eb		8a		txa				txa 							; get the offset into Y
.82ec		29 1f		and #$1f			and 	#$1F
.82ee		4a		lsr a				lsr 	a 						; make it 0-7.
.82ef		4a		lsr a				lsr  	a
.82f0		a8		tay				tay
.82f1		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82f4						_AMXCheckOkay:
.82f4		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82f5		88		dey				dey
.82f6		10 fc		bpl $82f4			bpl 	_AMXCheckOkay
.82f8		90 27		bcc $8321			bcc 	_AMXFail 				; not allowed.
.82fa		8a		txa				txa  							; get mask back
.82fb		29 1f		and #$1f			and 	#$1F
.82fd						_AMXHaveInfo:
.82fd		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82ff		10 04		bpl $8305			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8301		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8303		d0 1c		bne $8321			bne 	_AMXFail
.8305						_AMXAnySize:
.8305		18		clc				clc 							; add offset to the base opcode
.8306		6d 24 04	adc $0424			adc 	BaseOpcode
.8309						_AMXOutputCode:
.8309		20 75 82	jsr $8275			jsr 	AssemblerWriteByte 		; write the opcode out.
.830c		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.830e		f0 0e		beq $831e			beq 	_AMXExit
.8310		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8312		20 75 82	jsr $8275			jsr 	AssemblerWriteByte
.8315		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8317		30 05		bmi $831e			bmi 	_AMXExit
.8319		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.831b		20 75 82	jsr $8275			jsr 	AssemblerWriteByte
.831e						_AMXExit:
.831e		7a		ply				ply
.831f		38		sec				sec
.8320		60		rts				rts
.8321						_AMXFail:
.8321		a0 00		ldy #$00			ldy 	#0
.8323						_AMXCheckOddities:
.8323		8a		txa				txa
.8324		d9 4b 83	cmp $834b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8327		d0 15		bne $833e			bne 	_AMXCONext
.8329		b9 49 83	lda $8349,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.832c		cd 24 04	cmp $0424			cmp 	BaseOpcode
.832f		d0 0d		bne $833e			bne 	_AMXCONext
.8331		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8333		10 04		bpl $8339			bpl 	_AMXCONotZero
.8335		a5 60		lda $60				lda 	NSMantissa1
.8337		d0 05		bne $833e			bne 	_AMXCONext
.8339						_AMXCONotZero:
.8339		b9 4a 83	lda $834a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.833c		80 cb		bra $8309			bra 	_AMXOutputCode 			; and assemble it
.833e						_AMXCONext:
.833e		c8		iny				iny
.833f		c8		iny				iny
.8340		c8		iny				iny
.8341		b9 49 83	lda $8349,y			lda 	ExtraOpcode+0,y 		; end of table
.8344		d0 dd		bne $8323			bne 	_AMXCheckOddities
.8346						_AMXCOFail:
.8346		7a		ply				ply
.8347		18		clc				clc
.8348		60		rts				rts
.8349						ExtraOpcode:
>8349		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>834c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>834f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8352		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8355		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8358		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>835b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>835e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8361		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8364		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8367		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8368						LabelHere:
.8368		c8		iny				iny 								; skip .
.8369		a2 00		ldx #$00			ldx 	#0 							; get a term
.836b		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm
.836e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8370		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8372		d0 22		bne $8396			bne 	_ALType 					; otherwise typing error
.8374		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8376		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8378		b5 60		lda $60,x			lda 	NSMantissa1,x
.837a		85 37		sta $37				sta 	zTemp0+1
.837c		5a		phy				phy 								; copy address in (64k)
.837d		a0 01		ldy #$01			ldy 	#1
.837f		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8382		92 36		sta ($36)			sta 	(zTemp0)
.8384		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8387		91 36		sta ($36),y			sta 	(zTemp0),y
.8389		c8		iny				iny
.838a		a9 00		lda #$00			lda 	#0 							; zero the rest.
.838c		91 36		sta ($36),y			sta 	(zTemp0),y
.838e		c8		iny				iny
.838f		91 36		sta ($36),y			sta 	(zTemp0),y
.8391		c8		iny				iny
.8392		91 36		sta ($36),y			sta 	(zTemp0),y
.8394		7a		ply				ply
.8395		60		rts				rts
.8396						_ALType:
.8396		4c 60 a4	jmp $a460			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8399						TypeAndCalculateOperand:
.8399		b1 30		lda ($30),y			lda 	(codePtr),y
.839b		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.839d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.839f		f0 5b		beq $83fc			beq 	_TACOExit
.83a1		c9 80		cmp #$80			cmp 	#KWC_EOL
.83a3		f0 57		beq $83fc			beq 	_TACOExit
.83a5		c8		iny				iny
.83a6		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83a8		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83aa		f0 51		beq $83fd			beq 	CalculateOperand
.83ac		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83ae		f0 1f		beq $83cf			beq 	_TACOIndirect
.83b0		88		dey				dey 								; undo get of first character
.83b1		20 fd 83	jsr $83fd			jsr 	CalculateOperand 			; get operand
.83b4		b1 30		lda ($30),y			lda 	(codePtr),y
.83b6		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83b8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83ba		d0 40		bne $83fc			bne 	_TACOExit
.83bc		c8		iny				iny
.83bd		20 07 84	jsr $8407			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83c0		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83c2		c9 58		cmp #$58			cmp 	#'X'
.83c4		f0 36		beq $83fc			beq 	_TACOExit
.83c6		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.83c8		c9 59		cmp #$59			cmp 	#'Y'
.83ca		f0 30		beq $83fc			beq 	_TACOExit
.83cc						_TACOSyntax:
.83cc		4c 56 a4	jmp $a456			jmp 	SyntaxError
.83cf						_TACOIndirect:
.83cf		20 fd 83	jsr $83fd			jsr 	CalculateOperand 			; get the operand
.83d2		b1 30		lda ($30),y			lda 	(codePtr),y
.83d4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.83d6		f0 17		beq $83ef			beq 	_TACOIndX
.83d8		20 74 93	jsr $9374			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83db		b1 30		lda ($30),y			lda 	(codePtr),y
.83dd		a2 d1		ldx #$d1			ldx 	#AM_IND
.83df		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83e1		d0 19		bne $83fc			bne 	_TACOExit
.83e3		c8		iny				iny
.83e4		20 07 84	jsr $8407			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83e7		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83e9		d0 e1		bne $83cc			bne 	_TACOSyntax
.83eb		a2 d0		ldx #$d0			ldx 	#AM_INDY
.83ed		80 0d		bra $83fc			bra 	_TACOExit
.83ef						_TACOIndX:
.83ef		c8		iny				iny
.83f0		20 07 84	jsr $8407			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83f3		c9 58		cmp #$58			cmp 	#'X' 						; check X
.83f5		d0 d5		bne $83cc			bne 	_TACOSyntax
.83f7		20 74 93	jsr $9374			jsr 	CheckRightBracket			; check )
.83fa		a2 c0		ldx #$c0			ldx 	#AM_INDX
.83fc						_TACOExit:
.83fc		60		rts				rts
.83fd						CalculateOperand:
.83fd		48		pha				pha
.83fe		da		phx				phx
.83ff		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8401		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.8404		fa		plx				plx
.8405		68		pla				pla
.8406		60		rts				rts
.8407						TACOCheckXY:
.8407		b1 30		lda ($30),y			lda 	(codePtr),y
.8409		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.840b		c9 40		cmp #$40			cmp 	#$40
.840d		d0 21		bne $8430			bne 	_TCXYFail
.840f		b1 30		lda ($30),y			lda 	(codePtr),y
.8411		18		clc				clc
.8412		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8414		85 37		sta $37				sta 	zTemp0+1
.8416		c8		iny				iny
.8417		b1 30		lda ($30),y			lda 	(codePtr),y
.8419		c8		iny				iny
.841a		85 36		sta $36				sta 	zTemp0
.841c		5a		phy				phy 								; save position
.841d		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.841f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8421		d0 0c		bne $842f			bne 	_TCXYPopFail
.8423		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8425		b1 36		lda ($36),y			lda 	(zTemp0),y
.8427		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8429		f0 08		beq $8433			beq 	_TCXYFound
.842b		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.842d		f0 04		beq $8433			beq 	_TCXYFound
.842f						_TCXYPopFail:
.842f		7a		ply				ply
.8430						_TCXYFail:
.8430		a9 00		lda #$00			lda 	#0
.8432		60		rts				rts
.8433						_TCXYFound:
.8433		7a		ply				ply 								; restore position
.8434		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8436		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8437						BackloadProgram:
.8437		20 82 8d	jsr $8d82			jsr 	NewProgram 					; does the actual NEW.
.843a		a2 84		ldx #$84			ldx 	#_BLLoad >> 8
.843c		a9 8e		lda #$8e			lda 	#_BLLoad & $FF
.843e		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8441		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8443		8d 62 06	sta $0662			sta 	BackLoadPage
.8446		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8448		8d 63 06	sta $0663			sta 	0+BackLoadPointer
.844b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.844d		8d 64 06	sta $0664			sta 	1+BackLoadPointer
.8450		a9 ff		lda #$ff			lda 	#$FF
.8452		8d fa ff	sta $fffa			sta 	$FFFA
.8455						_BPLoop:
.8455		a2 ff		ldx #$ff			ldx 	#$FF
.8457		20 a3 84	jsr $84a3			jsr 	BLReadByte 					; read a byte
.845a		c9 00		cmp #$00			cmp 	#0
.845c		f0 29		beq $8487			beq 	_BPExit 					; if 0 exit
.845e		30 27		bmi $8487			bmi 	_BPExit 					; if -ve exit
.8460						_BPCopy:
.8460		e8		inx				inx  								; copy byte into the lineBuffer
.8461		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8464		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8467		20 a3 84	jsr $84a3			jsr 	BLReadByte 					; read next byte
.846a		30 0a		bmi $8476			bmi 	_BPEndLine 					; -ve = EOL
.846c		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.846e		d0 02		bne $8472			bne 	_BPNotTab
.8470		a9 20		lda #$20			lda 	#' '
.8472						_BPNotTab:
.8472		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8474		b0 ea		bcs $8460			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8476						_BPEndLine:
.8476		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8479		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.847c		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.847f		f0 d4		beq $8455			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8481		38		sec				sec 								; append not insert
.8482		20 bf a9	jsr $a9bf			jsr 	MemoryInsertLine 			; append to current program
.8485		80 ce		bra $8455			bra 	_BPLoop
.8487						_BPExit:
.8487		9c fa ff	stz $fffa			stz 	$FFFA
.848a		20 ac 86	jsr $86ac			jsr 	ClearCommand 				; clear variables etc.
.848d		60		rts				rts
.848e						_BLLoad:
>848e		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8496		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.84a3						BLReadByte:
.84a3		da		phx				phx
.84a4		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.84a6		ad 62 06	lda $0662			lda 	BackLoadPage	 			; set current page
.84a9		85 0b		sta $0b				sta 	8+3
.84ab		ad 63 06	lda $0663			lda 	BackLoadPointer 			; copy pointer to zTemp0
.84ae		85 36		sta $36				sta 	zTemp0
.84b0		ad 64 06	lda $0664			lda 	BackLoadPointer+1
.84b3		85 37		sta $37				sta 	zTemp0+1
.84b5		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.84b7		ee 63 06	inc $0663			inc 	BackLoadPointer 			; bump pointer
.84ba		d0 0f		bne $84cb			bne 	_BLNoCarry
.84bc		ee 64 06	inc $0664			inc 	BackLoadPointer+1
.84bf		10 0a		bpl $84cb			bpl 	_BLNoCarry 					; need a new page
.84c1		48		pha				pha
.84c2		a9 60		lda #$60			lda 	#$60 						; reset pointer
.84c4		8d 64 06	sta $0664			sta 	BackLoadPointer+1
.84c7		ee 62 06	inc $0662			inc 	BackLoadPage 				; next page from source.
.84ca		68		pla				pla
.84cb						_BLNoCarry:
.84cb		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.84cd		fa		plx				plx
.84ce		c9 00		cmp #$00			cmp 	#0
.84d0		60		rts				rts
.0662						BackLoadPage:
>0662								.fill  	1
.0663						BackLoadPointer:
>0663								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.84d1						EditProgramCode:
.84d1		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.84d4		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.84d7		20 63 aa	jsr $aa63			jsr 	MemorySearch
.84da		90 05		bcc $84e1			bcc 	_EPCNoDelete 				; reached the end : don't delete
.84dc		d0 03		bne $84e1			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.84de		20 88 a9	jsr $a988			jsr 	MemoryDeleteLine 			; delete the line
.84e1						_EPCNoDelete:
.84e1		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.84e4		c9 80		cmp #$80			cmp 	#KWC_EOL
.84e6		f0 0d		beq $84f5			beq 	_EPCNoInsert
.84e8		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.84eb		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.84ee		20 63 aa	jsr $aa63			jsr 	MemorySearch
.84f1		18		clc				clc 								; insert at this point.
.84f2		20 bf a9	jsr $a9bf			jsr 	MemoryInsertLine 			; insert the line
.84f5						_EPCNoInsert:
.84f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.84f6						WarmStart:
.84f6		a2 ff		ldx #$ff			ldx 	#$FF
.84f8		9a		txs				txs
.84f9		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.84fb		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84fe		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8501		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.8504		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8507		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.850a		d0 17		bne $8523			bne 	_WSEditCode 				; if so,edit code.
.850c		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.850f		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8511		85 30		sta $30				sta 	codePtr
.8513		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8515		85 31		sta $31				sta 	codePtr+1
.8517		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.851a		c9 80		cmp #$80			cmp 	#KWC_EOL
.851c		f0 d8		beq $84f6			beq 	WarmStart
.851e		20 12 8f	jsr $8f12			jsr 	RUNCodePointerLine 			; execute that line.
.8521		80 d3		bra $84f6			bra 	WarmStart
.8523						_WSEditCode:
.8523		20 d1 84	jsr $84d1			jsr 	EditProgramCode 			; edit the program code
.8526		20 ac 86	jsr $86ac			jsr 	ClearCommand 				; clear all variables etc.
.8529		80 cb		bra $84f6			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.852b						AssembleCommand:
.852b		a2 00		ldx #$00			ldx 	#0
.852d		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; start address
.8530		a5 58		lda $58				lda 	NSMantissa0
.8532		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8535		a5 60		lda $60				lda 	NSMantissa1
.8537		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.853a		20 7c 93	jsr $937c			jsr 	CheckComma
.853d		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; options 0-3
.8540		a5 58		lda $58				lda 	NSMantissa0
.8542		8d 20 04	sta $0420			sta 	AssemblerControl
.8545		60		rts				rts
.8546		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8547						AssertCommand:
.8547		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8549		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; the assert test
.854c		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; exit if result is non zero.
.854f		d0 05		bne $8556			bne 	_ACExit
.8551		a9 0a		lda #$0a		lda	#10
.8553		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8556						_ACExit:
.8556		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.8557						Command_BLoad:
.8557		a2 00		ldx #$00			ldx 	#0
.8559		20 30 a2	jsr $a230			jsr 	EvaluateString 				; file name to load
.855c		20 7c 93	jsr $937c			jsr 	CheckComma 					; consume comma
.855f		e8		inx				inx
.8560		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; load address (full physical address)
.8563		5a		phy				phy
.8564		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8566		a6 60		ldx $60				ldx 	NSMantissa1
.8568		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.856b		b0 4c		bcs $85b9			bcs 	CBLErrorHandler 			; error, so fail.
.856d		8d 6a 06	sta $066a			sta 	CurrentFileStream 			; save the reading stream.
.8570		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8572		20 bc 85	jsr $85bc			jsr 	BLOpenPhysicalMemory 		; open for access.
.8575						_BLReadFile:
.8575		ad 6a 06	lda $066a			lda 	CurrentFileStream
.8578		20 67 80	jsr $8067			jsr 	KNLReadBlock 				; read next block
.857b		b0 22		bcs $859f			bcs 	_BLFileError 				; file error, which might be EOF.
.857d		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.857f		f0 f4		beq $8575			beq 	_BLReadFile
.8581		8d 67 06	sta $0667			sta 	BLCopyCounter 				; counter.
.8584		ac 66 06	ldy $0666			ldy 	BLYOffset 					; copy the buffer out here
.8587		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8589						_BLCopyLoop:
.8589		bd 5b 08	lda $085b,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.858c		91 3a		sta ($3a),y			sta 	(zTemp2),y
.858e		c8		iny				iny
.858f		d0 03		bne $8594			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8591		20 e4 85	jsr $85e4			jsr 	BLAdvancePhysicalMemory
.8594						_BLNoAdjust:
.8594		e8		inx				inx
.8595		ce 67 06	dec $0667			dec 	BLCopyCounter
.8598		d0 ef		bne $8589			bne 	_BLCopyLoop
.859a		8c 66 06	sty $0666			sty 	BLYOffset 					; update Y offset
.859d		80 d6		bra $8575			bra 	_BLReadFile 				; go ask for more.
.859f						_BLFileError:
.859f		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.85a1		d0 16		bne $85b9			bne 	CBLErrorHandler				; no, it's an actual error
.85a3		20 de 85	jsr $85de			jsr 	BLClosePhysicalMemory 		; close the access.
.85a6		ad 6a 06	lda $066a			lda 	CurrentFileStream 			; close the file
.85a9		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.85ac		7a		ply				ply
.85ad		60		rts				rts
.85ae						CBLCloseError:
.85ae		48		pha				pha
.85af		20 de 85	jsr $85de			jsr 	BLClosePhysicalMemory
.85b2		ad 6a 06	lda $066a			lda 	CurrentFileStream
.85b5		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.85b8		68		pla				pla
.85b9						CBLErrorHandler:
.85b9		4c 6b 8c	jmp $8c6b			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.85bc						BLOpenPhysicalMemory:
.85bc		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.85be		8d 65 06	sta $0665			sta 	BLNormalMapping
.85c1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.85c3		8d 66 06	sta $0666			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.85c6		64 3a		stz $3a				stz 	zTemp2
.85c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.85ca		29 1f		and #$1f			and 	#$1F
.85cc		09 60		ora #$60			ora 	#BLAccessPage << 5
.85ce		85 3b		sta $3b				sta 	zTemp2+1
.85d0		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.85d2		16 60		asl $60,x			asl 	NSMantissa1,x
.85d4		2a		rol a				rol 	a
.85d5		16 60		asl $60,x			asl 	NSMantissa1,x
.85d7		2a		rol a				rol 	a
.85d8		16 60		asl $60,x			asl 	NSMantissa1,x
.85da		2a		rol a				rol 	a
.85db		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.85dd		60		rts				rts
.85de						BLClosePhysicalMemory:
.85de		ad 65 06	lda $0665			lda 	BLNormalMapping
.85e1		85 0b		sta $0b				sta 	BLAccessPage+8
.85e3		60		rts				rts
.85e4						BLAdvancePhysicalMemory:
.85e4		48		pha				pha
.85e5		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.85e7		a5 3b		lda $3b				lda 	zTemp2+1
.85e9		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.85eb		d0 06		bne $85f3			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.85ed		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.85ef		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.85f1		85 3b		sta $3b				sta 	zTemp2+1
.85f3						_BLAPMExit:
.85f3		68		pla				pla
.85f4		60		rts				rts
.0665						BLNormalMapping:
>0665								.fill 	1
.0666						BLYOffset:
>0666								.fill 	1
.0667						BLCopyCounter:
>0667								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.85f5						Command_BSave:
.85f5		a2 00		ldx #$00			ldx 	#0
.85f7		20 30 a2	jsr $a230			jsr 	EvaluateString 				; file name to load
.85fa		20 7c 93	jsr $937c			jsr 	CheckComma 					; consume comma
.85fd		e8		inx				inx
.85fe		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; load address (full physical address)
.8601		20 7c 93	jsr $937c			jsr 	CheckComma 					; consume comma
.8604		e8		inx				inx
.8605		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8608		5a		phy				phy
.8609		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.860b		a6 60		ldx $60				ldx 	NSMantissa1
.860d		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for reading
.8610		b0 62		bcs $8674			bcs 	CBSErrorHandler 			; error, so fail.
.8612		8d 6a 06	sta $066a			sta 	CurrentFileStream 			; save the reading stream.
.8615		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8617		20 bc 85	jsr $85bc			jsr 	BLOpenPhysicalMemory 		; open for access.
.861a		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.861c		ac 66 06	ldy $0666			ldy 	BLYOffset 					; used for data offset.
.861f						_BSWriteToFileLoop:
.861f		38		sec				sec 								; pre decrement count.
.8620		a5 5a		lda $5a				lda 	NSMantissa0+2
.8622		e9 01		sbc #$01			sbc 	#1
.8624		85 5a		sta $5a				sta 	NSMantissa0+2
.8626		a5 62		lda $62				lda 	NSMantissa1+2
.8628		e9 00		sbc #$00			sbc 	#0
.862a		85 62		sta $62				sta 	NSMantissa1+2
.862c		a5 6a		lda $6a				lda 	NSMantissa2+2
.862e		e9 00		sbc #$00			sbc 	#0
.8630		85 6a		sta $6a				sta 	NSMantissa2+2
.8632		30 15		bmi $8649			bmi 	_BSFileComplete 			; undercounted, so exit.
.8634		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.8636		9d 5b 08	sta $085b,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8639		e8		inx				inx
.863a		c8		iny				iny 								; next byte
.863b		d0 03		bne $8640			bne 	_BSNoCheck
.863d		20 e4 85	jsr $85e4			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8640						_BSNoCheck:
.8640		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8642		d0 db		bne $861f			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8644		20 57 86	jsr $8657			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8647		80 d6		bra $861f			bra 	_BSWriteToFileLoop 			; and keep on going
.8649						_BSFileComplete:
.8649		20 57 86	jsr $8657			jsr 	BSFlushBuffer 				; write the buffer remainder.
.864c		20 de 85	jsr $85de			jsr 	BLClosePhysicalMemory 		; close the access.
.864f		ad 6a 06	lda $066a			lda 	CurrentFileStream 			; close the file
.8652		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8655		7a		ply				ply
.8656		60		rts				rts
.8657						BSFlushBuffer:
.8657		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8659		f0 0d		beq $8668			beq 	_BSFBExit 					; if so, exit.
.865b		a9 5b		lda #$5b			lda 	#KNLReadBuffer & $FF 		; where to write from.
.865d		85 36		sta $36				sta 	zTemp0
.865f		a9 08		lda #$08			lda 	#KNLReadBuffer >> 8
.8661		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8663		20 d8 91	jsr $91d8			jsr 	CLWriteByteBlock 			; write it.
.8666		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8668						_BSFBExit:
.8668		60		rts				rts
.8669						CBSSCloseError:
.8669		48		pha				pha
.866a		20 de 85	jsr $85de			jsr 	BLClosePhysicalMemory
.866d		ad 6a 06	lda $066a			lda 	CurrentFileStream
.8670		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8673		68		pla				pla
.8674						CBSErrorHandler:
.8674		4c 6b 8c	jmp $8c6b			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8677						CallCommand:
.8677		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8679		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.867c						_CCClear
.867c		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.867d		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; these are optional sequentially.
.8680		e0 04		cpx #$04			cpx 	#4
.8682		d0 f8		bne $867c			bne 	_CCClear
.8684		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8686						_CCCParam:
.8686		b1 30		lda ($30),y			lda 	(codePtr),y
.8688		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.868a		d0 09		bne $8695			bne 	_CCCRun6502
.868c		c8		iny				iny 								; skip comma
.868d		e8		inx				inx	 								; next level
.868e		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8691		e0 03		cpx #$03			cpx 	#3
.8693		90 f1		bcc $8686			bcc 	_CCCParam 					; done all 3 ?
.8695						_CCCRun6502:
.8695		5a		phy				phy 								; save position
.8696		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8698		85 37		sta $37				sta 	zTemp0+1
.869a		a5 58		lda $58				lda 	NSMantissa0
.869c		85 36		sta $36				sta 	zTemp0
.869e		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.86a0		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.86a2		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.86a4		20 a9 86	jsr $86a9			jsr 	_CCCZTemp0 					; call zTemp0
.86a7		7a		ply				ply 								; restore position and exit
.86a8		60		rts				rts
.86a9						_CCCZTemp0:
.86a9		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.86ac						ClearCommand:
.86ac		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86ae		85 36		sta $36				sta 	0+zTemp0
.86b0		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86b2		85 37		sta $37				sta 	1+zTemp0
.86b4						_ClearZeroLoop:
.86b4		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.86b6		f0 24		beq $86dc			beq 	_ClearZeroEnd
.86b8		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.86ba		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.86bc						_ClearOneVariable:
.86bc		91 36		sta ($36),y			sta 	(zTemp0),y
.86be		c8		iny				iny
.86bf		c0 08		cpy #$08			cpy 	#8
.86c1		d0 f9		bne $86bc			bne 	_ClearOneVariable
.86c3		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.86c5		b1 36		lda ($36),y			lda 	(zTemp0),y
.86c7		c9 18		cmp #$18			cmp 	#NSTProcedure
.86c9		d0 04		bne $86cf			bne 	_ClearNotProcedure
.86cb		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.86cd		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.86cf						_ClearNotProcedure:
.86cf		18		clc				clc 								; go to the next variable
.86d0		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.86d2		65 36		adc $36				adc 	zTemp0
.86d4		85 36		sta $36				sta 	zTemp0
.86d6		90 dc		bcc $86b4			bcc 	_ClearZeroLoop
.86d8		e6 37		inc $37				inc 	zTemp0+1
.86da		80 d8		bra $86b4			bra 	_ClearZeroLoop
.86dc						_ClearZeroEnd:
.86dc		18		clc				clc
.86dd		a5 36		lda $36				lda 	zTemp0
.86df		69 01		adc #$01			adc 	#1
.86e1		8d 0c 04	sta $040c			sta 	lowMemPtr
.86e4		a5 37		lda $37				lda 	zTemp0+1
.86e6		69 00		adc #$00			adc 	#0
.86e8		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.86eb		20 1d b4	jsr $b41d			jsr 	StackReset
.86ee		20 83 b4	jsr $b483			jsr 	StringSystemInitialise
.86f1		20 23 92	jsr $9223			jsr 	ProcedureScan
.86f4		20 c1 8e	jsr $8ec1			jsr 	Command_Restore
.86f7		9c 1e 04	stz $041e			stz 	AssemblerAddress
.86fa		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.86fd		9c 20 04	stz $0420			stz 	AssemblerControl
.8700		9c 61 06	stz $0661			stz 	KeyboardQueueEntries
.8703		20 c7 9e	jsr $9ec7			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8706		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8707						ClearScreen:
.8707		5a		phy				phy
.8708		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.870a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.870d		7a		ply				ply
.870e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.870f						Command_Data:
.870f		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8711		a2 80		ldx #$80			ldx 	#KWC_EOL
.8713		20 75 92	jsr $9275			jsr 	ScanForward
.8716		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8717						DimCommand:
.8717		b1 30		lda ($30),y			lda 	(codePtr),y
.8719		29 c0		and #$c0			and 	#$C0
.871b		c9 40		cmp #$40			cmp 	#$40
.871d		d0 7a		bne $8799			bne 	_DCSyntax 				; n o, error.
.871f		b1 30		lda ($30),y			lda 	(codePtr),y
.8721		18		clc				clc
.8722		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8724		85 3f		sta $3f				sta 	zaTemp+1
.8726		c8		iny				iny
.8727		b1 30		lda ($30),y			lda 	(codePtr),y
.8729		c8		iny				iny
.872a		85 3e		sta $3e				sta 	zaTemp
.872c		5a		phy				phy
.872d		a0 02		ldy #$02			ldy 	#2 						; read type byte
.872f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8731		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8733		c9 18		cmp #$18			cmp 	#NSTProcedure
.8735		f0 62		beq $8799			beq 	_DCSyntax
.8737		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8739		29 04		and #$04			and 	#NSBIsArray
.873b		f0 64		beq $87a1			beq 	_DCType
.873d		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.873f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8741		d0 59		bne $879c			bne 	_DCRedefine
.8743		7a		ply				ply
.8744		20 a4 87	jsr $87a4			jsr 	_DCGetSize 				; get array size, check it.
.8747		5a		phy				phy
.8748		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.874a		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.874c		7a		ply				ply 							; is there a second (e.g. ,x)
.874d		b1 30		lda ($30),y			lda 	(codePtr),y
.874f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8751		d0 0a		bne $875d			bne 	_DCOneDimension
.8753		c8		iny				iny 							; skip comma
.8754		20 a4 87	jsr $87a4			jsr 	_DCGetSize 				; get 2nd array size
.8757		5a		phy				phy
.8758		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.875a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.875c		7a		ply				ply
.875d						_DCOneDimension:
.875d		5a		phy				phy 							; save position
.875e		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8760		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8762		aa		tax				tax
.8763		c8		iny				iny
.8764		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8766		e8		inx				inx 							; bump them.
.8767		1a		inc a				inc 	a
.8768		20 83 a2	jsr $a283			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.876b		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.876d		29 e0		and #$e0			and 	#$E0
.876f		d0 23		bne $8794			bne 	_DCSize
.8771		a0 02		ldy #$02			ldy 	#2 						; get base type
.8773		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8775		20 b2 87	jsr $87b2			jsr 	ScaleByBaseType 		; scale by base type
.8778		a5 36		lda $36				lda 	zTemp0
.877a		a6 37		ldx $37				ldx 	zTemp0+1
.877c		20 89 9e	jsr $9e89			jsr 	AllocateXABytes 		; allocate memory
.877f		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8781		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8783		c8		iny				iny
.8784		8a		txa				txa
.8785		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8787		7a		ply				ply 							; get position back
.8788		20 74 93	jsr $9374			jsr 	CheckRightBracket 		; check )
.878b		b1 30		lda ($30),y			lda 	(codePtr),y
.878d		c8		iny				iny 							; consume in case
.878e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8790		f0 85		beq $8717			beq 	DimCommand
.8792		88		dey				dey 							; undo consume
.8793		60		rts				rts
.8794						_DCSize:
.8794		a9 16		lda #$16		lda	#22
.8796		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8799						_DCSyntax:
.8799		4c 56 a4	jmp $a456			jmp 	SyntaxError
.879c						_DCRedefine:
.879c		a9 15		lda #$15		lda	#21
.879e		4c 8d 93	jmp $938d		jmp	ErrorHandler
.87a1						_DCType:
.87a1		4c 60 a4	jmp $a460			jmp 	TypeError
.87a4						_DCGetSize:
.87a4		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87a6		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 	; get array dimension
.87a9		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87ab		f0 e7		beq $8794			beq 	_DCSize
.87ad		c9 fe		cmp #$fe			cmp 	#254
.87af		f0 e3		beq $8794			beq 	_DCSize
.87b1		60		rts				rts
.87b2						ScaleByBaseType:
.87b2		29 10		and #$10			and 	#NSBIsString 			; is it string
.87b4		d0 19		bne $87cf			bne 	_SBBTString
.87b6		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.87b8		48		pha				pha
.87b9		a5 36		lda $36				lda 	zTemp0
.87bb		48		pha				pha
.87bc		06 36		asl $36				asl 	zTemp0 					; x 2
.87be		26 37		rol $37				rol 	zTemp0+1
.87c0		06 36		asl $36				asl 	zTemp0 					; x 4
.87c2		26 37		rol $37				rol 	zTemp0+1
.87c4		68		pla				pla 							; add stacked value = x 5
.87c5		65 36		adc $36				adc 	zTemp0
.87c7		85 36		sta $36				sta 	zTemp0
.87c9		68		pla				pla
.87ca		65 37		adc $37				adc 	zTemp0+1
.87cc		85 37		sta $37				sta 	zTemp0+1
.87ce		60		rts				rts
.87cf						_SBBTString:
.87cf		06 36		asl $36				asl 	zTemp0
.87d1		26 37		rol $37				rol 	zTemp0+1
.87d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.87d4						Command_Dir:
.87d4		ad 68 06	lda $0668			lda     DefaultDrive				; set drive to list.
.87d7		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.87d9		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.87db		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.87de		b0 56		bcs $8836			bcs     _CDExit
.87e0						_CDEventLoop:
.87e0		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.87e3		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.87e6		b0 f8		bcs $87e0			bcs     _CDEventLoop
.87e8		ad 53 08	lda $0853			lda     event.type
.87eb		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.87ed		f0 47		beq $8836			beq    	_CDExit
.87ef		20 f4 87	jsr $87f4			jsr     _CDMessages 				; handle various messages
.87f2		80 ec		bra $87e0			bra     _CDEventLoop
.87f4						_CDMessages:
.87f4		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.87f6		f0 15		beq $880d			beq     _CDEVRead
.87f8		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.87fa		f0 19		beq $8815			beq     _CDEVVolume
.87fc		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.87fe		f0 17		beq $8817			beq     _CDEVFile
.8800		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8802		f0 28		beq $882c			beq     _CDEVFree
.8804		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8806		f0 26		beq $882e			beq     _CDEVEOF
.8808		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.880a		f0 22		beq $882e			beq     _CDEVEOF
.880c		60		rts				rts
.880d						_CDEVRead:
.880d		ad 56 08	lda $0856			lda     event.directory.stream
.8810		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8812		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8815						_CDEVVolume:
.8815		80 f6		bra $880d			bra     _CDEVRead
.8817						_CDEVFile:
.8817		a9 20		lda #$20			lda 	#32
.8819		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.881c		ad 58 08	lda $0858			lda     event.directory.file.len
.881f		20 39 88	jsr $8839			jsr     _CDReadData
.8822		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8825		a9 0d		lda #$0d			lda 	#13
.8827		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.882a		80 e1		bra $880d			bra     _CDEVRead
.882c						_CDEVFree:
.882c		80 00		bra $882e			bra     _CDEVEOF
.882e						_CDEVEOF:
.882e		ad 56 08	lda $0856			lda     event.directory.stream
.8831		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8833		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8836						_CDExit:
.8836		4c f6 84	jmp $84f6			jmp 	WarmStart
.8839						_CDReadData:
.8839		85 fd		sta $fd				sta     kernel.args.recv.buflen
.883b		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.883d		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.883f		a9 05		lda #$05			lda     #lineBuffer >> 8
.8841		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8843		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8846		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8848		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.884b		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.884d		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.884f		60		rts				rts
.8850						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8850						Command_Drive:
.8850		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger
.8853		8d 68 06	sta $0668			sta 	DefaultDrive
.8856		60		rts				rts
.0668						DefaultDrive:
>0668								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8857						EndCommand:
.8857		4c f6 84	jmp $84f6			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.885a						ForCommand:
.885a		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.885c		20 b7 b3	jsr $b3b7			jsr 	StackOpen
.885f		a2 00		ldx #$00			ldx 	#0
.8861		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm
.8864		b5 50		lda $50,x			lda 	NSStatus,x
.8866		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8868		d0 47		bne $88b1			bne		_FCError
.886a		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.886c		20 84 93	jsr $9384			jsr 	CheckNextA
.886f		e8		inx				inx
.8870		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; <from> in +1
.8873		b1 30		lda ($30),y			lda 	(codePtr),y
.8875		c8		iny				iny 								; consume it
.8876		48		pha				pha 								; save on stack for later
.8877		c9 bd		cmp #$bd			cmp 	#KWD_DOWNTO
.8879		f0 04		beq $887f			beq 	_FCNoSyntax
.887b		c9 d6		cmp #$d6			cmp 	#KWD_TO
.887d		d0 35		bne $88b4			bne 	_FCSyntaxError
.887f						_FCNoSyntax:
.887f		e8		inx				inx
.8880		20 45 a2	jsr $a245			jsr 	EvaluateInteger
.8883		20 fc b3	jsr $b3fc			jsr 	STKSaveCodePosition 		; save loop back position
.8886		68		pla				pla 								; restore DOWNTO or TO
.8887		5a		phy				phy 								; save Y on the stack
.8888		49 bd		eor #$bd			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.888a		f0 02		beq $888e			beq 	_FCNotDownTo
.888c		a9 02		lda #$02			lda 	#2
.888e						_FCNotDownTo:
.888e		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.888f		a0 10		ldy #$10			ldy 	#16
.8891		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8893		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8895		a5 58		lda $58				lda 	NSMantissa0
.8897		91 34		sta ($34),y			sta 	(basicStack),y
.8899		a5 60		lda $60				lda 	NSMantissa1
.889b		c8		iny				iny
.889c		91 34		sta ($34),y			sta 	(basicStack),y
.889e		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.88a0		a2 01		ldx #$01			ldx 	#1
.88a2		20 b7 88	jsr $88b7			jsr 	FCIntegerToStack
.88a5		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.88a7		a2 02		ldx #$02			ldx 	#2
.88a9		20 b7 88	jsr $88b7			jsr 	FCIntegerToStack
.88ac		20 d2 88	jsr $88d2			jsr 	CopyIndexToReference
.88af		7a		ply				ply 								; restore position
.88b0		60		rts				rts
.88b1						_FCError:
.88b1		4c 60 a4	jmp $a460			jmp 	TypeError
.88b4						_FCSyntaxError:
.88b4		4c 56 a4	jmp $a456			jmp 	SyntaxError
.88b7						FCIntegerToStack:
.88b7		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.88b9		10 03		bpl $88be			bpl	 	_FCNotNegative
.88bb		20 a1 a2	jsr $a2a1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.88be						_FCNotNegative:
.88be		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.88c0		91 34		sta ($34),y			sta 	(basicStack),y
.88c2		c8		iny				iny
.88c3		b5 60		lda $60,x			lda 	NSMantissa1,x
.88c5		91 34		sta ($34),y			sta 	(basicStack),y
.88c7		c8		iny				iny
.88c8		b5 68		lda $68,x			lda 	NSMantissa2,x
.88ca		91 34		sta ($34),y			sta 	(basicStack),y
.88cc		c8		iny				iny
.88cd		b5 70		lda $70,x			lda 	NSMantissa3,x
.88cf		91 34		sta ($34),y			sta 	(basicStack),y
.88d1		60		rts				rts
.88d2						CopyIndexToReference:
.88d2		5a		phy				phy
.88d3		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.88d5		38		sec				sec 								; (because we copy from offset 8)
.88d6		b1 34		lda ($34),y			lda 	(basicStack),y
.88d8		e9 08		sbc #$08			sbc 	#8
.88da		85 36		sta $36				sta 	zTemp0
.88dc		c8		iny				iny
.88dd		b1 34		lda ($34),y			lda 	(basicStack),y
.88df		e9 00		sbc #$00			sbc 	#0
.88e1		85 37		sta $37				sta 	zTemp0+1
.88e3		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.88e5		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.88e7		b1 34		lda ($34),y			lda 	(basicStack),y
.88e9		0a		asl a				asl 	a 							; into carry
.88ea		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.88ec		90 14		bcc $8902			bcc 	_CITRNormal
.88ee		38		sec				sec
.88ef						_CITRNegative:
.88ef		a9 00		lda #$00			lda 	#0
.88f1		f1 34		sbc ($34),y			sbc 	(basicStack),y
.88f3		91 36		sta ($36),y			sta 	(zTemp0),y
.88f5		c8		iny				iny
.88f6		ca		dex				dex
.88f7		d0 f6		bne $88ef			bne 	_CITRNegative
.88f9		88		dey				dey 								; look at MSB of mantissa
.88fa		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.88fc		09 80		ora #$80			ora 	#$80
.88fe		91 36		sta ($36),y			sta 	(zTemp0),y
.8900		7a		ply				ply
.8901		60		rts				rts
.8902						_CITRNormal:
.8902		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8904		91 36		sta ($36),y			sta 	(zTemp0),y
.8906		c8		iny				iny
.8907		ca		dex				dex
.8908		d0 f8		bne $8902			bne 	_CITRNormal
.890a		7a		ply				ply 								; and exit.
.890b		60		rts				rts
.890c						NextCommand:
.890c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.890e		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8910		20 e4 b3	jsr $b3e4			jsr 	StackCheckFrame
.8913		5a		phy				phy
.8914		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8916		b1 34		lda ($34),y			lda 	(basicStack),y
.8918		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.891a		30 02		bmi $891e			bmi 	_NCStepNeg
.891c		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.891e						_NCStepNeg:
.891e		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8920		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8922		18		clc				clc
.8923						_NCBump:
.8923		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8925		91 34		sta ($34),y			sta 	(basicStack),y
.8927		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8929		c8		iny				iny 								; next byte
.892a		ca		dex				dex 								; do four times
.892b		d0 f6		bne $8923			bne 	_NCBump
.892d		20 d2 88	jsr $88d2			jsr		CopyIndexToReference		; copy it to the reference variable.
.8930		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8932		b1 34		lda ($34),y			lda 	(basicStack),y
.8934		0a		asl a				asl 	a 							; sign bit to carry
.8935		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8937		85 38		sta $38				sta 	zTemp1
.8939		90 02		bcc $893d			bcc 	_NCCompRev 					; use if step is +ve
.893b		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.893d						_NCCompRev:
.893d		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.893f		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8941		85 39		sta $39				sta 	zTemp1+1
.8943		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8945		38		sec				sec
.8946						_NCCompare:
.8946		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8948		b1 34		lda ($34),y			lda 	(basicStack),y
.894a		a4 39		ldy $39				ldy 	zTemp1+1
.894c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.894e		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8950		e6 39		inc $39				inc 	zTemp1+1
.8952		ca		dex				dex 								; do it 4 times.
.8953		d0 f1		bne $8946			bne 	_NCCompare
.8955		50 02		bvc $8959			bvc 	_NCNoOverflow 				; convert to signed comparison
.8957		49 80		eor #$80			eor 	#$80
.8959						_NCNoOverflow:
.8959		7a		ply				ply 								; restore Y position
.895a		0a		asl a				asl 	a 							; is bit 7 set.
.895b		90 04		bcc $8961			bcc 	_NCLoopBack 				; if no , >= so loop back
.895d		20 d6 b3	jsr $b3d6			jsr 	StackClose 					; exit the loop
.8960		60		rts				rts
.8961						_NCLoopBack:
.8961		20 0d b4	jsr $b40d			jsr 	STKLoadCodePosition 		; loop back
.8964		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8965						Command_GOSUB:
.8965		a2 00		ldx #$00			ldx 	#0
.8967		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.896a		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.896c		20 b7 b3	jsr $b3b7			jsr 	StackOpen 					; create frame
.896f		20 fc b3	jsr $b3fc			jsr 	STKSaveCodePosition 		; save current position
.8972		4c 88 89	jmp $8988			jmp 	GotoStackX
.8975						Command_RETURN:
.8975		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8977		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8979		20 e4 b3	jsr $b3e4			jsr 	StackCheckFrame
.897c		20 0d b4	jsr $b40d			jsr 	STKLoadCodePosition 		; restore code position
.897f		20 d6 b3	jsr $b3d6			jsr 	StackClose
.8982		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8983						GotoCommand:
.8983		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8985		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.8988						GotoStackX:
.8988		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.898a		48		pha				pha 								; it is slightly inefficient, just in cases.
.898b		b5 58		lda $58,x			lda 	NSMantissa0,x
.898d		fa		plx				plx
.898e		20 63 aa	jsr $aa63			jsr 	MemorySearch 				; transfer to line number AX.
.8991		90 05		bcc $8998			bcc 	_GotoError 					; not found, off end.
.8993		d0 03		bne $8998			bne 	_GotoError 					; not found exactly
.8995		4c 0b 8f	jmp $8f0b			jmp 	RunNewLine 					; and go straight to new line code.
.8998						_GotoError:
.8998		a9 0d		lda #$0d		lda	#13
.899a		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.899d						IfCommand:
.899d		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.899f		20 26 a2	jsr $a226			jsr 	EvaluateNumber
.89a2		b1 30		lda ($30),y			lda 	(codePtr),y
.89a4		c9 b2		cmp #$b2			cmp 	#KWD_THEN  					; could be THEN <stuff>
.89a6		d0 0a		bne $89b2			bne 	_IfStructured 				; we still support it.
.89a8		c8		iny				iny 								; consume THEN
.89a9		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; is it zero
.89ac		f0 01		beq $89af			beq 	_IfFail 					; if fail, go to next line
.89ae		60		rts				rts 								; if THEN just continue
.89af						_IfFail:
.89af		4c f3 8e	jmp $8ef3			jmp 	EOLCommand
.89b2						_IfStructured:
.89b2		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; is it zero
.89b5		d0 07		bne $89be			bne 	_IfExit 					; if not, then continue normally.
.89b7		a9 be		lda #$be			lda 	#KWD_ELSE 					; look for else/endif
.89b9		a2 af		ldx #$af			ldx 	#KWD_ENDIF
.89bb		20 75 92	jsr $9275			jsr 	ScanForward 				; and run from there
.89be						_IfExit:
.89be		60		rts				rts
.89bf						ElseCode:
.89bf		a9 af		lda #$af			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.89c1		aa		tax				tax 								; so just go to the structure exit
.89c2		20 75 92	jsr $9275			jsr 	ScanForward
.89c5		60		rts				rts
.89c6						EndIf:
.89c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.89c7						Command_Input:
.89c7		9c 28 04	stz $0428			stz 	isPrintFlag
.89ca		80 0c		bra $89d8			bra 	Command_IP_Main
.89cc						Command_CPrint:
.89cc		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.89ce		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.89d1		80 05		bra $89d8			bra 	Command_IP_Main
.89d3						Command_Print:
.89d3		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.89d5		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.89d8						Command_IP_Main:
.89d8		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.89d9						_CPLoop:
.89d9		08		php				php 								; save last action flag
.89da		b1 30		lda ($30),y			lda 	(codePtr),y
.89dc		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.89de		f0 54		beq $8a34			beq 	_CPExit
.89e0		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.89e2		f0 50		beq $8a34			beq 	_CPExit
.89e4		68		pla				pla 								; throw last action flag
.89e5		b1 30		lda ($30),y			lda 	(codePtr),y
.89e7		c8		iny				iny
.89e8		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.89ea		f0 45		beq $8a31			beq 	_CPContinueWithSameLine
.89ec		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.89ee		f0 3c		beq $8a2c			beq 	_CPTab
.89f0		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.89f2		f0 34		beq $8a28			beq 	_CPNewLine
.89f4		88		dey				dey 								; undo the get.
.89f5		20 8f 98	jsr $988f			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.89f8		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.89fa		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.89fc		f0 0d		beq $8a0b			beq 	_CPIsValue 					; no, display it.
.89fe		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8a01		d0 05		bne $8a08			bne 	_CPIsPrint 					; otherwise display.
.8a03		20 3d 8a	jsr $8a3d			jsr 	CIInputValue 				; input a value to the reference
.8a06		80 20		bra $8a28			bra 	_CPNewLine
.8a08						_CPIsPrint:
.8a08		20 54 9b	jsr $9b54			jsr 	Dereference 				; dereference if required.
.8a0b						_CPIsValue:
.8a0b		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8a0d		29 10		and #$10			and 	#NSBIsString
.8a0f		f0 09		beq $8a1a			beq 	_CPNumber
.8a11		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8a13		a5 58		lda $58				lda 	NSMantissa0
.8a15		20 a0 8a	jsr $8aa0			jsr 	CPPrintStringXA
.8a18		80 be		bra $89d8			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8a1a						_CPNumber:
.8a1a		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8a1c		20 0d a1	jsr $a10d			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8a1f		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8a21		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8a23		20 a0 8a	jsr $8aa0			jsr 	CPPrintStringXA 			; print it.
.8a26		80 b0		bra $89d8			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8a28						_CPNewLine:
.8a28		a9 0d		lda #$0d			lda 	#13
.8a2a		80 02		bra $8a2e			bra 	_CPPrintCharDirect
.8a2c						_CPTab:
.8a2c		a9 09		lda #$09			lda 	#9 							; print TAB
.8a2e						_CPPrintCharDirect:
.8a2e		20 bb 8a	jsr $8abb			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8a31						_CPContinueWithSameLine:
.8a31		38		sec				sec 								; loop round with carry set, which
.8a32		80 a5		bra $89d9			bra 	_CPLoop 					; will inhibit final CR
.8a34						_CPExit:
.8a34		28		plp				plp 								; get last action flag
.8a35		b0 05		bcs $8a3c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8a37		a9 0d		lda #$0d			lda 	#13 						; print new line
.8a39		20 bb 8a	jsr $8abb			jsr 	CPPVControl
.8a3c						_CPExit2:
.8a3c		60		rts				rts
.8a3d						CIInputValue:
.8a3d		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8a3f						_CIInputLine:
.8a3f		20 be 8a	jsr $8abe			jsr 	CPInputVector 				; get key
.8a42		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8a44		f0 1f		beq $8a65			beq 	_CIHaveValue
.8a46		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8a48		f0 11		beq $8a5b			beq 	_CIBackspace
.8a4a		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8a4c		90 f1		bcc $8a3f			bcc 	_CIInputLine
.8a4e		e0 50		cpx #$50			cpx 	#80 						; max length
.8a50		b0 ed		bcs $8a3f			bcs 	_CIInputLine
.8a52		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8a55		e8		inx				inx
.8a56		20 b3 8a	jsr $8ab3			jsr 	CPPrintVector 				; echo it.
.8a59		80 e4		bra $8a3f			bra 	_CIInputLine
.8a5b						_CIBackspace:
.8a5b		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8a5d		f0 e0		beq $8a3f			beq 	_CIInputLine
.8a5f		20 b3 8a	jsr $8ab3			jsr 	CPPrintVector 				; echo it.
.8a62		ca		dex				dex
.8a63		80 da		bra $8a3f			bra 	_CIInputLine
.8a65						_CIHaveValue:
.8a65		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8a68		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8a6a		29 10		and #$10			and 	#NSBIsString
.8a6c		f0 17		beq $8a85			beq 	_CIAssignNumber 			; assign a number
.8a6e		a2 01		ldx #$01			ldx 	#1
.8a70		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8a72		95 58		sta $58,x			sta 	NSMantissa0,x
.8a74		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8a76		95 60		sta $60,x			sta 	NSMantissa1,x
.8a78		74 68		stz $68,x			stz 	NSMantissa2,x
.8a7a		74 70		stz $70,x			stz 	NSMantissa3,x
.8a7c		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8a7e		95 50		sta $50,x			sta  	NSStatus,x
.8a80		ca		dex				dex 								; X = 0
.8a81		20 fa 8a	jsr $8afa			jsr 	AssignVariable
.8a84		60		rts				rts
.8a85						_CIAssignNumber:
.8a85		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8a87		85 36		sta $36				sta 	zTemp0
.8a89		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8a8b		85 37		sta $37				sta 	zTemp0+1
.8a8d		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8a8f		20 8f a0	jsr $a08f			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8a92		90 07		bcc $8a9b			bcc 	_CIIsOkay
.8a94		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8a96		20 b3 8a	jsr $8ab3			jsr 	CPPrintVector
.8a99		80 a2		bra $8a3d			bra 	CIInputValue
.8a9b						_CIIsOkay:
.8a9b		ca		dex				dex 								; X = 0
.8a9c		20 fa 8a	jsr $8afa			jsr 	AssignVariable
.8a9f		60		rts				rts
.8aa0						CPPrintStringXA:
.8aa0		5a		phy				phy
.8aa1		86 37		stx $37				stx 	zTemp0+1
.8aa3		85 36		sta $36				sta 	zTemp0
.8aa5		a0 00		ldy #$00			ldy 	#0
.8aa7						_PSXALoop:
.8aa7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa9		f0 06		beq $8ab1			beq 	_PSXAExit
.8aab		20 b3 8a	jsr $8ab3			jsr 	CPPrintVector
.8aae		c8		iny				iny
.8aaf		80 f6		bra $8aa7			bra 	_PSXALoop
.8ab1						_PSXAExit:
.8ab1		7a		ply				ply
.8ab2		60		rts				rts
.8ab3						CPPrintVector:
.8ab3		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8ab6		30 03		bmi $8abb			bmi 	CPPVControl
.8ab8		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8abb						CPPVControl:
.8abb		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8abe						CPInputVector:
.8abe		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8ac1						LetCommand:
.8ac1		a2 00		ldx #$00			ldx 	#0
.8ac3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ac5		c9 10		cmp #$10			cmp 	#KWD_AT
.8ac7		d0 14		bne $8add			bne 	_LCStandard
.8ac9		c8		iny				iny 								; skip equal
.8aca		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8acd		20 54 9b	jsr $9b54			jsr 	Dereference 				; dereference it to a value
.8ad0		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8ad2		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ad4		95 50		sta $50,x			sta 	NSStatus,x
.8ad6		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ad8		d0 0f		bne $8ae9			bne 	_LCMain
.8ada		4c 60 a4	jmp $a460			jmp 	TypeError 					; was a reference before.
.8add						_LCStandard:
.8add		ad 79 98	lda $9879			lda 	PrecedenceLevel+"*"			; precedence > this
.8ae0		20 93 98	jsr $9893			jsr 	EvaluateExpressionAtPrecedence
.8ae3		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8ae5		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ae7		f0 0e		beq $8af7			beq 	_LetGoProc 					; it's a procedure call.
.8ae9						_LCMain:
.8ae9		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8aeb		20 84 93	jsr $9384			jsr 	CheckNextA
.8aee		e8		inx				inx 								; RHS
.8aef		20 1d a2	jsr $a21d			jsr 	EvaluateValue
.8af2		ca		dex				dex
.8af3		20 fa 8a	jsr $8afa			jsr 	AssignVariable
.8af6		60		rts				rts
.8af7						_LetGoProc:
.8af7		4c c9 8d	jmp $8dc9			jmp 	CallProcedure
.8afa						AssignVariable:
.8afa		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8afc		48		pha				pha 								; save a copy
.8afd		55 51		eor $51,x			eor 	NSStatus+1,x
.8aff		29 10		and #$10			and 	#NSBIsString
.8b01		d0 0b		bne $8b0e			bne 	_ASError
.8b03		68		pla				pla 								; get back
.8b04		29 10		and #$10			and 	#NSBIsString 				; check type
.8b06		d0 03		bne $8b0b			bne 	_ASString
.8b08		4c 92 9a	jmp $9a92			jmp 	AssignNumber
.8b0b						_ASString:
.8b0b		4c f0 9a	jmp $9af0			jmp 	AssignString
.8b0e						_ASError:
.8b0e		4c 60 a4	jmp $a460			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8b11						Command_List:
.8b11		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8b14		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8b16		20 8f 80	jsr $808f			jsr 	SNDCommand
.8b19		b1 30		lda ($30),y			lda 	(codePtr),y
.8b1b		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8b1d		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8b1f		f0 72		beq $8b93			beq 	_CLListProcedure
.8b21		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8b23		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8b25		a9 ff		lda #$ff			lda 	#$FF
.8b27		85 5f		sta $5f				sta 	NSMantissa0+7
.8b29		85 67		sta $67				sta 	NSMantissa1+7
.8b2b		b1 30		lda ($30),y			lda 	(codePtr),y
.8b2d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b2f		f0 1a		beq $8b4b			beq 	_CLSecond
.8b31		20 10 8c	jsr $8c10			jsr 	CLIsDigit 					; if not digit, list all
.8b34		b0 20		bcs $8b56			bcs 	_CLStart
.8b36		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8b38		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.8b3b		b1 30		lda ($30),y			lda 	(codePtr),y
.8b3d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b3f		f0 0a		beq $8b4b			beq 	_CLSecond 					; if so go get it
.8b41		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8b43		85 5f		sta $5f				sta 	NSMantissa0+7
.8b45		a5 64		lda $64				lda 	NSMantissa1+4
.8b47		85 67		sta $67				sta 	NSMantissa1+7
.8b49		80 0b		bra $8b56			bra 	_CLStart
.8b4b						_CLSecond:
.8b4b		c8		iny				iny 								; consume comma
.8b4c		20 10 8c	jsr $8c10			jsr 	CLIsDigit 					; digit found
.8b4f		b0 05		bcs $8b56			bcs 	_CLStart 					; if not, continue listing
.8b51		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8b53		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.8b56						_CLStart
.8b56		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b58		85 30		sta $30				sta 	codePtr
.8b5a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b5c		85 31		sta $31				sta 	codePtr+1
.8b5e						_CLLoop:
.8b5e		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8b60		f0 03		beq $8b65			beq 	_NoEvents					; if zero, skip with Z flag set.
.8b62		20 30 81	jsr $8130			jsr 	ProcessEvents
.8b65						_NoEvents:
.8b65		d0 27		bne $8b8e			bne 	_CLBreak
.8b67		b2 30		lda ($30)			lda 	(codePtr)
.8b69		f0 20		beq $8b8b			beq 	_CLExit
.8b6b		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8b6d		20 ff 8b	jsr $8bff			jsr 	CLCompareLineNo
.8b70		90 0c		bcc $8b7e			bcc 	_CLNext
.8b72		a2 07		ldx #$07			ldx 	#7
.8b74		20 ff 8b	jsr $8bff			jsr 	CLCompareLineNo
.8b77		f0 02		beq $8b7b			beq 	_CLDoThisOne
.8b79		b0 03		bcs $8b7e			bcs 	_CLNext
.8b7b						_CLDoThisOne:
.8b7b		20 ec 8b	jsr $8bec			jsr 	CLListOneLine 				; routine to list the current line.
.8b7e						_CLNext:
.8b7e		18		clc				clc
.8b7f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b81		65 30		adc $30				adc 	codePtr
.8b83		85 30		sta $30				sta 	codePtr
.8b85		90 02		bcc $8b89			bcc 	_CREExit
.8b87		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b89						_CREExit:
.8b89		80 d3		bra $8b5e			bra 	_CLLoop
.8b8b						_CLExit:
.8b8b		4c f6 84	jmp $84f6			jmp 	WarmStart
.8b8e						_CLBreak:
.8b8e		a9 01		lda #$01		lda	#1
.8b90		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8b93						_CLListProcedure:
.8b93		b1 30		lda ($30),y			lda 	(codePtr),y
.8b95		85 38		sta $38				sta 	zTemp1
.8b97		c8		iny				iny
.8b98		b1 30		lda ($30),y			lda 	(codePtr),y
.8b9a		85 39		sta $39				sta 	zTemp1+1
.8b9c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b9e		85 30		sta $30				sta 	codePtr
.8ba0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ba2		85 31		sta $31				sta 	codePtr+1
.8ba4						_CLLPSearch:
.8ba4		b2 30		lda ($30)			lda 	(codePtr)
.8ba6		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8ba8		f0 e1		beq $8b8b			beq 	_CLExit
.8baa		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8bac		b1 30		lda ($30),y			lda 	(codePtr),y
.8bae		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.8bb0		d0 0e		bne $8bc0			bne 	_CLLPNext
.8bb2		c8		iny				iny 								; check if PROC this.
.8bb3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bb5		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8bb7		d0 07		bne $8bc0			bne 	_CLLPNext
.8bb9		c8		iny				iny
.8bba		b1 30		lda ($30),y			lda 	(codePtr),y
.8bbc		c5 39		cmp $39				cmp 	zTemp1+1
.8bbe		f0 0d		beq $8bcd			beq 	_CLLPFound
.8bc0						_CLLPNext:
.8bc0		18		clc				clc
.8bc1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bc3		65 30		adc $30				adc 	codePtr
.8bc5		85 30		sta $30				sta 	codePtr
.8bc7		90 02		bcc $8bcb			bcc 	_CREExit
.8bc9		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bcb						_CREExit:
.8bcb		80 d7		bra $8ba4			bra 	_CLLPSearch
.8bcd						_CLLPFound:
.8bcd		b2 30		lda ($30)			lda 	(codePtr)
.8bcf		f0 ba		beq $8b8b			beq 	_CLExit
.8bd1		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8bd3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd5		48		pha				pha
.8bd6		20 ec 8b	jsr $8bec			jsr 	CLListOneLine 				; list line and go forward
.8bd9		18		clc				clc
.8bda		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bdc		65 30		adc $30				adc 	codePtr
.8bde		85 30		sta $30				sta 	codePtr
.8be0		90 02		bcc $8be4			bcc 	_CREExit
.8be2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8be4						_CREExit:
.8be4		68		pla				pla 								; reached ENDPROC ?
.8be5		c9 b0		cmp #$b0			cmp 	#KWD_ENDPROC
.8be7		d0 e4		bne $8bcd			bne 	_CLLPFound
.8be9		4c f6 84	jmp $84f6			jmp 	WarmStart
.8bec						CLListOneLine:
.8bec		20 d8 92	jsr $92d8			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8bef		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8bf2		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8bf4		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8bf6		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8bf9		a9 0d		lda #$0d			lda 	#13 						; new line
.8bfb		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8bfe		60		rts				rts
.8bff						CLCompareLineNo:
.8bff		38		sec				sec
.8c00		a0 01		ldy #$01			ldy 	#1
.8c02		b1 30		lda ($30),y			lda 	(codePtr),y
.8c04		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8c06		85 36		sta $36				sta 	zTemp0
.8c08		c8		iny				iny
.8c09		b1 30		lda ($30),y			lda 	(codePtr),y
.8c0b		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8c0d		05 36		ora $36				ora 	zTemp0
.8c0f		60		rts				rts
.8c10						CLIsDigit:
.8c10		b1 30		lda ($30),y			lda 	(codePtr),y
.8c12		c9 30		cmp #$30			cmp 	#"0"
.8c14		90 03		bcc $8c19			bcc	 	_CLIDExitFalse
.8c16		c9 3a		cmp #$3a			cmp 	#"9"+1
.8c18		60		rts				rts
.8c19						_CLIDExitFalse:
.8c19		38		sec				sec
.8c1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8c1b						Command_Load:
.8c1b		20 30 a2	jsr $a230			jsr 	EvaluateString 				; file name to load
.8c1e		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8c20		a5 36		lda $36				lda 	zTemp0
.8c22		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8c25		b0 44		bcs $8c6b			bcs 	CLErrorHandler 				; error, so fail.
.8c27		8d 6a 06	sta $066a			sta 	CurrentFileStream 			; save the reading stream.
.8c2a		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8c2d		20 82 8d	jsr $8d82			jsr 	NewProgram 					; does the actual NEW.
.8c30		9c 69 06	stz $0669			stz 	LoadEOFFlag 				; clear EOF Flag.
.8c33						_CLLoop:
.8c33		20 79 8c	jsr $8c79			jsr 	LoadReadLine 				; get next line.
.8c36		f0 10		beq $8c48			beq 	_CLExit 					; end, exit.
.8c38		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8c3b		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8c3e		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8c41		f0 f0		beq $8c33			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8c43		20 d1 84	jsr $84d1			jsr 	EditProgramCode 			; do the editing etc.
.8c46		80 eb		bra $8c33			bra 	_CLLoop
.8c48						_CLExit:
.8c48		ad 6a 06	lda $066a			lda 	CurrentFileStream
.8c4b		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8c4e						CLComplete:
.8c4e		a9 58		lda #$58			lda 	#_CLCMsg & $FF
.8c50		a2 8c		ldx #$8c			ldx 	#_CLCMsg >> 8
.8c52		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8c55		4c f6 84	jmp $84f6			jmp 	WarmStart
.8c58						_CLCMsg:
>8c58		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8c60		2e 0d 00
.8c63						CLCloseError:
.8c63		48		pha				pha
.8c64		ad 6a 06	lda $066a			lda 	CurrentFileStream
.8c67		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8c6a		68		pla				pla
.8c6b						CLErrorHandler:
.8c6b		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8c6d		f0 05		beq $8c74			beq 	_CLEHNotFound
.8c6f		a9 1a		lda #$1a		lda	#26
.8c71		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8c74						_CLEHNotFound:
.8c74		a9 19		lda #$19		lda	#25
.8c76		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8c79						LoadReadLine:
.8c79		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8c7b		20 95 8c	jsr $8c95			jsr 	LoadReadCharacter
.8c7e		f0 14		beq $8c94			beq 	_LRLExit 					; eof ?
.8c80		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8c82		90 f5		bcc $8c79			bcc 	LoadReadLine
.8c84						_LRLLoop:
.8c84		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8c87		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8c8a		e8		inx				inx
.8c8b		20 95 8c	jsr $8c95			jsr 	LoadReadCharacter 			; next line
.8c8e		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8c90		b0 f2		bcs $8c84			bcs 	_LRLLoop
.8c92		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8c94						_LRLExit:
.8c94		60		rts				rts
.8c95						LoadReadCharacter:
.8c95		da		phx				phx
.8c96		5a		phy				phy
.8c97		ad 69 06	lda $0669			lda 	LoadEOFFlag 				; already done EOF.
.8c9a		d0 0c		bne $8ca8			bne 	_LRCIsEOF
.8c9c		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8c9f		90 09		bcc $8caa			bcc		_LRCExit 					; read okay.
.8ca1		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8ca3		d0 be		bne $8c63			bne 	CLCloseError
.8ca5		ce 69 06	dec $0669			dec 	LoadEOFFlag
.8ca8						_LRCIsEOF:
.8ca8		a9 00		lda #$00			lda 	#0
.8caa						_LRCExit:
.8caa		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8cac		d0 02		bne $8cb0			bne 	_LRCNotTab
.8cae		a9 20		lda #$20			lda 	#' '
.8cb0						_LRCNotTab:
.8cb0		c9 0a		cmp #$0a			cmp 	#$0A
.8cb2		d0 02		bne $8cb6			bne 	_LRCNotLF
.8cb4		a9 0d		lda #$0d			lda 	#$0D
.8cb6						_LRCNotLF:
.8cb6		7a		ply				ply
.8cb7		fa		plx				plx
.8cb8		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8cba		60		rts				rts
.0669						LoadEOFFlag:
>0669								.fill 	1
.066a						CurrentFileStream:
>066a								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8cbb						Command_LOCAL:
.8cbb		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8cbd		20 c9 8c	jsr $8cc9			jsr 	LocaliseNextTerm 			; convert term to a local.
.8cc0		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc2		c8		iny				iny
.8cc3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cc5		f0 f4		beq $8cbb			beq 	Command_LOCAL 				; if so, localise another variable.
.8cc7		88		dey				dey 								; unpick pre-get
.8cc8		60		rts				rts
.8cc9						LocaliseNextTerm:
.8cc9		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm 				; evaluate the term
.8ccc		b5 50		lda $50,x			lda 	NSStatus,x
.8cce		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8cd0		f0 5c		beq $8d2e			beq		_LNTError
.8cd2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8cd4		85 36		sta $36				sta 	zTemp0
.8cd6		b5 60		lda $60,x			lda 	NSMantissa1,x
.8cd8		85 37		sta $37				sta  	zTemp0+1
.8cda		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8cdc		29 10		and #$10			and 	#NSBIsString
.8cde		d0 1e		bne $8cfe			bne 	_LNTPushString
.8ce0		5a		phy				phy
.8ce1		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8ce3						_LNTPushNumLoop:
.8ce3		b1 36		lda ($36),y			lda		(zTemp0),y
.8ce5		20 96 b3	jsr $b396			jsr 	StackPushByte
.8ce8		c8		iny				iny
.8ce9		c0 05		cpy #$05			cpy 	#5
.8ceb		d0 f6		bne $8ce3			bne 	_LNTPushNumLoop
.8ced		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8cef		20 96 b3	jsr $b396			jsr 	StackPushByte
.8cf2		a5 37		lda $37				lda 	zTemp0+1
.8cf4		20 96 b3	jsr $b396			jsr 	StackPushByte
.8cf7		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8cf9		20 96 b3	jsr $b396			jsr 	StackPushByte
.8cfc		7a		ply				ply
.8cfd		60		rts				rts
.8cfe						_LNTPushString:
.8cfe		5a		phy				phy
.8cff		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d01		85 38		sta $38				sta 	zTemp1
.8d03		a0 01		ldy #$01			ldy 	#1
.8d05		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d07		85 39		sta $39				sta 	zTemp1+1
.8d09		a0 00		ldy #$00			ldy 	#0 							; output string
.8d0b		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d0d		f0 0a		beq $8d19			beq 	_LNTStringOut
.8d0f						_LNTPushStrLoop:
.8d0f		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d11		f0 06		beq $8d19			beq 	_LNTStringOut
.8d13		20 96 b3	jsr $b396			jsr 	StackPushByte
.8d16		c8		iny				iny
.8d17		80 f6		bra $8d0f			bra 	_LNTPushStrLoop
.8d19						_LNTStringOut:
.8d19		98		tya				tya									; output length (chars written).
.8d1a		20 96 b3	jsr $b396			jsr 	StackPushByte
.8d1d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d1f		20 96 b3	jsr $b396			jsr 	StackPushByte
.8d22		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d24		20 96 b3	jsr $b396			jsr 	StackPushByte
.8d27		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d29		20 96 b3	jsr $b396			jsr 	StackPushByte
.8d2c		7a		ply				ply
.8d2d		60		rts				rts
.8d2e						_LNTError:
.8d2e		4c 56 a4	jmp $a456			jmp 	SyntaxError
.8d31						LocalPopValue:
.8d31		20 ae b3	jsr $b3ae			jsr 	StackPopByte
.8d34		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8d36		d0 17		bne $8d4f			bne 	_LPVString
.8d38		20 ae b3	jsr $b3ae			jsr 	StackPopByte 				; address
.8d3b		85 37		sta $37				sta 	zTemp0+1
.8d3d		20 ae b3	jsr $b3ae			jsr 	StackPopByte
.8d40		85 36		sta $36				sta 	zTemp0
.8d42		5a		phy				phy
.8d43		a0 04		ldy #$04			ldy 	#4 							; copy back
.8d45						_LPVNumberCopy:
.8d45		20 ae b3	jsr $b3ae			jsr 	StackPopByte
.8d48		91 36		sta ($36),y			sta 	(zTemp0),y
.8d4a		88		dey				dey
.8d4b		10 f8		bpl $8d45			bpl 	_LPVNumberCopy
.8d4d		7a		ply				ply 								; and complete
.8d4e		60		rts				rts
.8d4f						_LPVString:
.8d4f		20 ae b3	jsr $b3ae			jsr 	StackPopByte 				; address of record copied to zTemp0
.8d52		85 37		sta $37				sta 	zTemp0+1
.8d54		20 ae b3	jsr $b3ae			jsr 	StackPopByte
.8d57		85 36		sta $36				sta 	zTemp0
.8d59		5a		phy				phy
.8d5a		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8d5c		85 38		sta $38				sta 	zTemp1
.8d5e		a0 01		ldy #$01			ldy 	#1
.8d60		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d62		85 39		sta $39				sta 	zTemp1+1
.8d64		20 ae b3	jsr $b3ae			jsr 	StackPopByte 				; # chars to get => y
.8d67		a8		tay				tay
.8d68		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8d6a		f0 0e		beq $8d7a			beq 	_LPVStringCopied
.8d6c		a9 00		lda #$00			lda 	#0 							; NULL on end
.8d6e		91 38		sta ($38),y			sta 	(zTemp1),y
.8d70						_LPVStringCopy:
.8d70		88		dey				dey
.8d71		30 07		bmi $8d7a			bmi 	_LPVStringCopied
.8d73		20 ae b3	jsr $b3ae			jsr 	StackPopByte
.8d76		91 38		sta ($38),y			sta 	(zTemp1),y
.8d78		80 f6		bra $8d70			bra 	_LPVStringCopy
.8d7a						_LPVStringCopied:
.8d7a		fa		plx				plx
.8d7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8d7c						NewCommand:
.8d7c		20 82 8d	jsr $8d82			jsr 	NewProgram 					; does the actual NEW.
.8d7f		4c f6 84	jmp $84f6			jmp 	WarmStart 					; and warm starts straight away.
.8d82						NewProgram:
.8d82		20 45 aa	jsr $aa45			jsr 	MemoryNew
.8d85		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8d88		20 ac 86	jsr $86ac			jsr 	ClearCommand 				; clear everything.
.8d8b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8d8c						PokeBCommand:
.8d8c		a9 01		lda #$01			lda 	#1
.8d8e		80 0c		bra $8d9c			bra 	PokeCommand
.8d90						PokeWCommand:
.8d90		a9 02		lda #$02			lda 	#2
.8d92		80 08		bra $8d9c			bra 	PokeCommand
.8d94						PokeLCommand:
.8d94		a9 03		lda #$03			lda 	#3
.8d96		80 04		bra $8d9c			bra 	PokeCommand
.8d98						PokeDCommand:
.8d98		a9 04		lda #$04			lda 	#4
.8d9a		80 00		bra $8d9c			bra 	PokeCommand
.8d9c						PokeCommand:
.8d9c		48		pha				pha 								; save count on stack
.8d9d		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8d9f		20 58 a2	jsr $a258			jsr		Evaluate16BitInteger 		; address
.8da2		20 7c 93	jsr $937c			jsr 	CheckComma
.8da5		e8		inx				inx
.8da6		20 45 a2	jsr $a245			jsr		EvaluateInteger 			; data
.8da9		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8dab		85 36		sta $36				sta 	zTemp0
.8dad		a5 60		lda $60				lda 	NSMantissa1
.8daf		85 37		sta $37				sta 	zTemp0+1
.8db1		68		pla				pla 								; count -> zTemp1
.8db2		85 38		sta $38				sta 	zTemp1
.8db4		5a		phy				phy 								; save Y position.
.8db5		a0 00		ldy #$00			ldy 	#0 							; index to write
.8db7		a2 00		ldx #$00			ldx 	#0 							; index to read
.8db9						_PCLoop:
.8db9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8dbb		91 36		sta ($36),y			sta 	(zTemp0),y
.8dbd		c8		iny				iny 								; next byte to write
.8dbe		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8dbf		18		clc				clc
.8dc0		69 08		adc #$08			adc 	#MathStackSize
.8dc2		aa		tax				tax
.8dc3		c6 38		dec $38				dec 	zTemp1 						; done them all
.8dc5		d0 f2		bne $8db9			bne 	_PCLoop
.8dc7		7a		ply				ply 								; restore position.
.8dc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8dc9						CallProcedure:
.8dc9		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8dcb		b1 30		lda ($30),y			lda 	(codePtr),y
.8dcd		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8dcf		f0 0c		beq $8ddd			beq 	_CPEndParam
.8dd1						_CPParamLoop:
.8dd1		20 1d a2	jsr $a21d			jsr 	EvaluateValue 				; get parameter onto stack
.8dd4		e8		inx				inx 								; bump next stack
.8dd5		b1 30		lda ($30),y			lda 	(codePtr),y
.8dd7		c8		iny				iny
.8dd8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8dda		f0 f5		beq $8dd1			beq 	_CPParamLoop
.8ddc		88		dey				dey 								; unpick.
.8ddd						_CPEndParam:
.8ddd		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8de0		c8		iny				iny									; skip right bracket
.8de1		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8de3		20 b7 b3	jsr $b3b7			jsr 	StackOpen
.8de6		20 fc b3	jsr $b3fc			jsr 	STKSaveCodePosition 		; save loop position
.8de9		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8deb		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ded		a5 60		lda $60				lda 	NSMantissa1
.8def		85 37		sta $37				sta 	zTemp0+1
.8df1		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8df3		b2 36		lda ($36)			lda 	(zTemp0)
.8df5		85 30		sta $30				sta 	safePtr
.8df7		b1 36		lda ($36),y			lda 	(zTemp0),y
.8df9		85 31		sta $31				sta 	safePtr+1
.8dfb		c8		iny				iny
.8dfc		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dfe		85 32		sta $32				sta 	safePtr+2
.8e00		c8		iny				iny
.8e01		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e03		85 33		sta $33				sta 	safePtr+3
.8e05		c8		iny				iny 								; get Y offset -> Y
.8e06		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e08		a8		tay				tay
.8e09		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e0b		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8e0e		f0 13		beq $8e23			beq 	_ParamExit 					; if so, exit.
.8e10						_ParamExtract:
.8e10		ca		dex				dex 								; put a local term on the level before
.8e11		20 c9 8c	jsr $8cc9			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e14		20 fa 8a	jsr $8afa			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e17		e8		inx				inx 								; advance to next parameter to do.
.8e18		e8		inx				inx
.8e19		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8e1c		f0 05		beq $8e23			beq 	_ParamExit
.8e1e		20 7c 93	jsr $937c			jsr 	CheckComma 					; comma seperating parameters
.8e21		80 ed		bra $8e10			bra 	_ParamExtract
.8e23						_ParamExit:
.8e23		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; check )
.8e26		60		rts				rts 								; and continue from here
.8e27						Command_ENDPROC:
.8e27		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e29		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e2b		20 e4 b3	jsr $b3e4			jsr 	StackCheckFrame
.8e2e		20 0d b4	jsr $b40d			jsr 	STKLoadCodePosition 		; restore code position
.8e31		20 d6 b3	jsr $b3d6			jsr 	StackClose
.8e34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e35						Command_Read:
.8e35		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e37		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm
.8e3a		b5 50		lda $50,x			lda 	NSStatus,x
.8e3c		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e3e		f0 4f		beq $8e8f			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8e40		20 d8 8e	jsr $8ed8			jsr 	SwapDataCodePtrs 			; swap code and data
.8e43		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e46		d0 25		bne $8e6d			bne 	_CRContinueData  			; forward for the next one.
.8e48		b2 30		lda ($30)			lda 	(codePtr)
.8e4a		f0 1c		beq $8e68			beq 	_CRNoData
.8e4c						_CRKeepSearching:
.8e4c		a9 bb		lda #$bb			lda 	#KWD_DATA 					; scan for instruction
.8e4e		a2 80		ldx #$80			ldx 	#KWC_EOL
.8e50		20 75 92	jsr $9275			jsr 	ScanForward
.8e53		c9 bb		cmp #$bb			cmp 	#KWD_DATA 					; found data ?
.8e55		f0 16		beq $8e6d			beq 	_CRHaveData 				; found it
.8e57		18		clc				clc
.8e58		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e5a		65 30		adc $30				adc 	codePtr
.8e5c		85 30		sta $30				sta 	codePtr
.8e5e		90 02		bcc $8e62			bcc 	_CREExit
.8e60		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e62						_CREExit:
.8e62		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8e64		b2 30		lda ($30)			lda 	(codePtr)
.8e66		d0 e4		bne $8e4c			bne 	_CRKeepSearching
.8e68						_CRNoData:
.8e68		a9 0b		lda #$0b		lda	#11
.8e6a		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8e6d						_CRHaveData:
.8e6d						_CRContinueData:
.8e6d		a2 01		ldx #$01			ldx 	#1
.8e6f		20 1d a2	jsr $a21d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8e72		ca		dex				dex
.8e73		20 fa 8a	jsr $8afa			jsr		AssignVariable 				; do the assignment
.8e76		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8e79		b1 30		lda ($30),y			lda 	(codePtr),y
.8e7b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8e7d		d0 04		bne $8e83			bne 	_CRSwapBack
.8e7f		c8		iny				iny 								; consume comma
.8e80		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8e83						_CRSwapBack:
.8e83		20 d8 8e	jsr $8ed8			jsr 	SwapDataCodePtrs			; swap them back.
.8e86		b1 30		lda ($30),y			lda 	(codePtr),y
.8e88		c8		iny				iny
.8e89		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e8b		f0 a8		beq $8e35			beq 	Command_Read 				; if so go round again.
.8e8d		88		dey				dey 								; unpick get.
.8e8e		60		rts				rts
.8e8f						_CRSyntax:
.8e8f		4c 56 a4	jmp $a456			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8e92						RemCommand:
.8e92		b1 30		lda ($30),y			lda 	(codePtr),y
.8e94		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8e96		d0 06		bne $8e9e			bne 	_RMExit
.8e98		c8		iny				iny 								; point to offset
.8e99		98		tya				tya 								; A = offset position
.8e9a		38		sec				sec 								; add size +1 hence SEC
.8e9b		71 30		adc ($30),y			adc 	(codePtr),y
.8e9d		a8		tay				tay 								; make current position.
.8e9e						_RMExit:
.8e9e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8e9f						Command_REPEAT:
.8e9f		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ea1		20 b7 b3	jsr $b3b7			jsr 	StackOpen
.8ea4		20 fc b3	jsr $b3fc			jsr 	STKSaveCodePosition 		; save loop position
.8ea7		60		rts				rts
.8ea8						Command_UNTIL:
.8ea8		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8eaa		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8eac		20 e4 b3	jsr $b3e4			jsr 	StackCheckFrame
.8eaf		a2 00		ldx #$00			ldx 	#0
.8eb1		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; work out the number
.8eb4		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; check if zero
.8eb7		f0 04		beq $8ebd			beq 	_CULoopBack 				; if so keep looping
.8eb9		20 d6 b3	jsr $b3d6			jsr 	StackClose		 			; return
.8ebc		60		rts				rts
.8ebd						_CULoopBack:
.8ebd		20 0d b4	jsr $b40d			jsr 	STKLoadCodePosition 		; loop back
.8ec0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8ec1						Command_Restore:
.8ec1		20 d8 8e	jsr $8ed8			jsr 	SwapDataCodePtrs 			; swap code and data
.8ec4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ec6		85 30		sta $30				sta 	codePtr
.8ec8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8eca		85 31		sta $31				sta 	codePtr+1
.8ecc		20 d8 8e	jsr $8ed8			jsr 	SwapDataCodePtrs 			; put them back
.8ecf		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ed1		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8ed4		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8ed7		60		rts				rts
.8ed8						SwapDataCodePtrs:
.8ed8		da		phx				phx
.8ed9		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8edb						_SDCPLoop:
.8edb		b5 30		lda $30,x			lda 	safePtr,x
.8edd		48		pha				pha
.8ede		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8ee1		95 30		sta $30,x			sta 	safePtr,x
.8ee3		68		pla				pla
.8ee4		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8ee7		ca		dex				dex
.8ee8		10 f1		bpl $8edb			bpl 	_SDCPLoop
.8eea		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8eed		8c 1b 04	sty $041b			sty 	dataPointer+4
.8ef0		a8		tay				tay
.8ef1		fa		plx				plx
.8ef2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8ef3						EOLCommand:
.8ef3		18		clc				clc
.8ef4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ef6		65 30		adc $30				adc 	codePtr
.8ef8		85 30		sta $30				sta 	codePtr
.8efa		90 02		bcc $8efe			bcc 	_CREExit
.8efc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8efe						_CREExit:
.8efe		80 0b		bra $8f0b			bra 	RunNewLine
.8f00						CommandRUN:
.8f00		20 ac 86	jsr $86ac			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8f03		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f05		85 30		sta $30				sta 	codePtr
.8f07		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f09		85 31		sta $31				sta 	codePtr+1
.8f0b						RunNewLine:
.8f0b		b2 30		lda ($30)			lda 	(codePtr)
.8f0d		f0 74		beq $8f83			beq 	CRNoProgram         		; no then END.
.8f0f		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f11		9a		txs				txs
.8f12						RUNCodePointerLine:
.8f12		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f14						_CRIncMainLoop:
.8f14		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f16		f0 03		beq $8f1b			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f18		20 30 81	jsr $8130			jsr 	ProcessEvents
.8f1b						_NoEvents:
.8f1b		d0 61		bne $8f7e			bne 	_CRBreak
.8f1d		a5 01		lda $01				lda 	1 							; save I/O 0
.8f1f		48		pha				pha
.8f20		64 01		stz $01				stz 	1 							; access I/O Page 0
.8f22		38		sec				sec 								; calculate timer - LastTick
.8f23		ad 59 d6	lda $d659			lda 	$D659
.8f26		cd 6b 06	cmp $066b			cmp 	LastTick
.8f29		f0 06		beq $8f31			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8f2b		8d 6b 06	sta $066b			sta 	LastTick 					; update last timer
.8f2e		20 03 a3	jsr $a303			jsr 	TickHandler 							; go do the code.
.8f31						_NoFireTick:
.8f31		68		pla				pla 								; restore I/O 0
.8f32		85 01		sta $01				sta 	1
.8f34						_CRNoBreakCheck:
.8f34		c8		iny				iny									; next token
.8f35						_CRMainLoop:
.8f35		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f38		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3a		10 10		bpl $8f4c			bpl 	_CRNotKeyword				; not a token.
.8f3c		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f3e		b0 04		bcs $8f44			bcs 	_CRIsKeyword
.8f40		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8f42		b0 34		bcs $8f78			bcs		_CRSyntaxError
.8f44						_CRIsKeyword:
.8f44		c8		iny				iny 								; consume command
.8f45		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8f46		aa		tax				tax 								; put in X for vector jump
.8f47		20 7b 8f	jsr $8f7b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8f4a		80 e9		bra $8f35			bra 	_CRMainLoop 				; and loop round
.8f4c						_CRNotKeyword:
.8f4c		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8f4e		f0 c4		beq $8f14			beq 	_CRIncMainLoop
.8f50		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8f52		90 05		bcc $8f59			bcc 	_CRNotVariable
.8f54						_CRGoLet:
.8f54		20 c1 8a	jsr $8ac1			jsr 	LetCommand
.8f57		80 dc		bra $8f35			bra 	_CRMainLoop
.8f59						_CRNotVariable:
.8f59		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8f5b		f0 f7		beq $8f54			beq 	_CRGoLet
.8f5d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8f5f		f0 f3		beq $8f54			beq 	_CRGoLet
.8f61		c9 21		cmp #$21			cmp 	#KWD_PLING
.8f63		f0 ef		beq $8f54			beq 	_CRGoLet
.8f65		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8f67		f0 09		beq $8f72			beq 	_CRGoRem
.8f69		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8f6b		d0 0b		bne $8f78			bne 	_CRSyntaxError
.8f6d		20 68 83	jsr $8368			jsr 	LabelHere
.8f70		80 c3		bra $8f35			bra 	_CRMainLoop
.8f72						_CRGoRem:
.8f72		c8		iny				iny
.8f73		20 92 8e	jsr $8e92			jsr 	RemCommand
.8f76		80 bd		bra $8f35			bra 	_CRMainLoop
.8f78						_CRSyntaxError:
.8f78		4c 56 a4	jmp $a456			jmp 	SyntaxError
.8f7b						_CRCallVector0:
.8f7b		7c 1a 90	jmp ($901a,x)			jmp 	(VectorSet0,x)
.8f7e						_CRBreak:
.8f7e		a9 01		lda #$01		lda	#1
.8f80		4c 8d 93	jmp $938d		jmp	ErrorHandler
.8f83						CRNoProgram:
.8f83		4c 57 88	jmp $8857			jmp 	EndCommand
.8f86						Shift1Command:
.8f86		b1 30		lda ($30),y			lda 	(codePtr),y
.8f88		c8		iny				iny
.8f89		0a		asl a				asl 	a
.8f8a		aa		tax				tax
.8f8b		7c c8 90	jmp ($90c8,x)			jmp 	(VectorSet1,x)
.8f8e						Shift2Command:
.8f8e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f90		c8		iny				iny
.8f91		0a		asl a				asl 	a
.8f92		aa		tax				tax
.8f93		7c 12 91	jmp ($9112,x)			jmp 	(VectorSet2,x)
.8f96						Unused1:
.8f96						Unused2:
.8f96						Unused3:
.8f96						Unused4:
.8f96		4c 56 a4	jmp $a456			jmp 	SyntaxError
>8f99								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8f9a						VectorSetPunc:
>8f9a		45 96					.word	ShiftLeft                        ; $00 <<
>8f9c		30 94					.word	BinaryCompareLessEqual           ; $01 <=
>8f9e		26 94					.word	BinaryCompareNotEqual            ; $02 <>
>8fa0		56 a4					.word	SyntaxError                      ; $03 !!3
>8fa2		56 a4					.word	SyntaxError                      ; $04 ><
>8fa4		3a 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>8fa6		48 96					.word	ShiftRight                       ; $06 >>
>8fa8		56 a4					.word	SyntaxError                      ; $07 !!7
>8faa		56 a4					.word	SyntaxError                      ; $08 !!8
>8fac		56 a4					.word	SyntaxError                      ; $09 !!9
>8fae		56 a4					.word	SyntaxError                      ; $0a !!10
>8fb0		56 a4					.word	SyntaxError                      ; $0b !!11
>8fb2		56 a4					.word	SyntaxError                      ; $0c !!12
>8fb4		56 a4					.word	SyntaxError                      ; $0d !!13
>8fb6		56 a4					.word	SyntaxError                      ; $0e !!14
>8fb8		56 a4					.word	SyntaxError                      ; $0f !!15
>8fba		56 a4					.word	SyntaxError                      ; $10 @
>8fbc		56 a4					.word	SyntaxError                      ; $11 !!17
>8fbe		56 a4					.word	SyntaxError                      ; $12 !!18
>8fc0		56 a4					.word	SyntaxError                      ; $13 [
>8fc2		f1 94					.word	IntegerDivide                    ; $14 \
>8fc4		56 a4					.word	SyntaxError                      ; $15 ]
>8fc6		83 97					.word	EorInteger                       ; $16 ^
>8fc8		56 a4					.word	SyntaxError                      ; $17 _
>8fca		56 a4					.word	SyntaxError                      ; $18 `
>8fcc		56 a4					.word	SyntaxError                      ; $19 !!25
>8fce		56 a4					.word	SyntaxError                      ; $1a !!26
>8fd0		56 a4					.word	SyntaxError                      ; $1b {
>8fd2		4e 97					.word	OraInteger                       ; $1c |
>8fd4		56 a4					.word	SyntaxError                      ; $1d }
>8fd6		56 a4					.word	SyntaxError                      ; $1e ~
>8fd8		56 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>8fda		56 a4					.word	SyntaxError                      ; $20
>8fdc		b8 97					.word	WordIndirect                     ; $21 !
>8fde		56 a4					.word	SyntaxError                      ; $22 "
>8fe0		56 a4					.word	SyntaxError                      ; $23 #
>8fe2		56 a4					.word	SyntaxError                      ; $24 $
>8fe4		32 95					.word	IntegerModulus                   ; $25 %
>8fe6		19 97					.word	AndInteger                       ; $26 &
>8fe8		56 a4					.word	SyntaxError                      ; $27 '
>8fea		56 a4					.word	SyntaxError                      ; $28 (
>8fec		56 a4					.word	SyntaxError                      ; $29 )
>8fee		a0 95					.word	MulInteger                       ; $2a *
>8ff0		bb 96					.word	AddInteger                       ; $2b +
>8ff2		56 a4					.word	SyntaxError                      ; $2c ,
>8ff4		f4 96					.word	SubInteger                       ; $2d -
>8ff6		56 a4					.word	SyntaxError                      ; $2e .
>8ff8		72 99					.word	FDivideCommand                   ; $2f /
>8ffa		56 a4					.word	SyntaxError                      ; $30 0
>8ffc		56 a4					.word	SyntaxError                      ; $31 1
>8ffe		56 a4					.word	SyntaxError                      ; $32 2
>9000		56 a4					.word	SyntaxError                      ; $33 3
>9002		56 a4					.word	SyntaxError                      ; $34 4
>9004		56 a4					.word	SyntaxError                      ; $35 5
>9006		56 a4					.word	SyntaxError                      ; $36 6
>9008		56 a4					.word	SyntaxError                      ; $37 7
>900a		56 a4					.word	SyntaxError                      ; $38 8
>900c		56 a4					.word	SyntaxError                      ; $39 9
>900e		56 a4					.word	SyntaxError                      ; $3a :
>9010		56 a4					.word	SyntaxError                      ; $3b ;
>9012		12 94					.word	BinaryCompareLess                ; $3c <
>9014		08 94					.word	BinaryCompareEqual               ; $3d =
>9016		1c 94					.word	BinaryCompareGreater             ; $3e >
>9018		da 97					.word	ByteIndirect                     ; $3f ?
.901a						VectorSet0:
>901a		f3 8e					.word	EOLCommand                       ; $80 !0:EOF
>901c		86 8f					.word	Shift1Command                    ; $81 !1:SH1
>901e		8e 8f					.word	Shift2Command                    ; $82 !2:SH2
>9020		5c 9e					.word	AbsUnary                         ; $83 ABS(
>9022		6a 9e					.word	AllocUnary                       ; $84 ALLOC(
>9024		da 9e					.word	AscUnary                         ; $85 ASC(
>9026		be a0					.word	ChrUnary                         ; $86 CHR$(
>9028		d9 a8					.word	UnaryEvent                       ; $87 EVENT(
>902a		04 94					.word	UnaryFalse                       ; $88 FALSE
>902c		e7 9e					.word	FracUnary                        ; $89 FRAC(
>902e		a8 81					.word	ChrGet                           ; $8a GET$(
>9030		84 81					.word	AscGet                           ; $8b GET(
>9032		56 a4					.word	SyntaxError                      ; $8c GETDATE$(
>9034		56 a4					.word	SyntaxError                      ; $8d GETTIME$(
>9036		63 a8					.word	UnaryHit                         ; $8e HIT(
>9038		af 81					.word	ChrInkey                         ; $8f INKEY$(
>903a		9d 81					.word	AscInkey                         ; $90 INKEY(
>903c		fc 9e					.word	IntUnary                         ; $91 INT(
>903e		7d a0					.word	IsValUnary                       ; $92 ISVAL(
>9040		5d a9					.word	UnaryJoyB                        ; $93 JOYB(
>9042		36 a9					.word	UnaryJoyX                        ; $94 JOYX(
>9044		39 a9					.word	UnaryJoyY                        ; $95 JOYY(
>9046		91 a1					.word	Unary_Left                       ; $96 LEFT$(
>9048		0d 9f					.word	LenUnary                         ; $97 LEN(
>904a		2b 9f					.word	Unary_Max                        ; $98 MAX(
>904c		b3 a1					.word	Unary_Mid                        ; $99 MID$(
>904e		27 9f					.word	Unary_Min                        ; $9a MIN(
>9050		76 9f					.word	Unary_Not                        ; $9b NOT(
>9052		89 9f					.word	PeekByteUnary                    ; $9c PEEK(
>9054		95 9f					.word	PeekDUnary                       ; $9d PEEKD(
>9056		91 9f					.word	PeekLUnary                       ; $9e PEEKL(
>9058		8d 9f					.word	PeekWUnary                       ; $9f PEEKW(
>905a		14 b3					.word	UnaryPlaying                     ; $a0 PLAYING(
>905c		c2 9f					.word	Unary_Random                     ; $a1 RANDOM(
>905e		9e a1					.word	Unary_Right                      ; $a2 RIGHT$(
>9060		df 9f					.word	Unary_Rnd                        ; $a3 RND(
>9062		55 a0					.word	SgnUnary                         ; $a4 SGN(
>9064		d0 a0					.word	SpcUnary                         ; $a5 SPC(
>9066		eb a0					.word	Unary_Str                        ; $a6 STR$(
>9068		6f a9					.word	UnaryTimer                       ; $a7 TIMER(
>906a		f9 93					.word	UnaryTrue                        ; $a8 TRUE
>906c		73 a0					.word	ValUnary                         ; $a9 VAL(
>906e		5a 88					.word	ForCommand                       ; $aa FOR
>9070		9d 89					.word	IfCommand                        ; $ab IF
>9072		96 8f					.word	Unused1                          ; $ac PROC
>9074		9f 8e					.word	Command_REPEAT                   ; $ad REPEAT
>9076		45 93					.word	Command_WHILE                    ; $ae WHILE
>9078		c6 89					.word	EndIf                            ; $af ENDIF
>907a		27 8e					.word	Command_ENDPROC                  ; $b0 ENDPROC
>907c		0c 89					.word	NextCommand                      ; $b1 NEXT
>907e		96 8f					.word	Unused4                          ; $b2 THEN
>9080		a8 8e					.word	Command_UNTIL                    ; $b3 UNTIL
>9082		66 93					.word	Command_WEND                     ; $b4 WEND
>9084		56 a4					.word	SyntaxError                      ; $b5 BY
>9086		77 86					.word	CallCommand                      ; $b6 CALL
>9088		17 a6					.word	CircleCommand                    ; $b7 CIRCLE
>908a		ac 86					.word	ClearCommand                     ; $b8 CLEAR
>908c		56 a4					.word	SyntaxError                      ; $b9 COLOR
>908e		56 a4					.word	SyntaxError                      ; $ba COLOUR
>9090		0f 87					.word	Command_Data                     ; $bb DATA
>9092		17 87					.word	DimCommand                       ; $bc DIM
>9094		96 8f					.word	Unused3                          ; $bd DOWNTO
>9096		bf 89					.word	ElseCode                         ; $be ELSE
>9098		56 a4					.word	SyntaxError                      ; $bf FROM
>909a		36 a8					.word	GfxCommand                       ; $c0 GFX
>909c		56 a4					.word	SyntaxError                      ; $c1 HERE
>909e		40 a6					.word	ImageCommand                     ; $c2 IMAGE
>90a0		c1 8a					.word	LetCommand                       ; $c3 LET
>90a2		92 a6					.word	LineCommand                      ; $c4 LINE
>90a4		bb 8c					.word	Command_LOCAL                    ; $c5 LOCAL
>90a6		56 a4					.word	SyntaxError                      ; $c6 OFF
>90a8		56 a4					.word	SyntaxError                      ; $c7 ON
>90aa		56 a4					.word	SyntaxError                      ; $c8 OUTLINE
>90ac		87 a8					.word	PaletteCommand                   ; $c9 PALETTE
>90ae		8b a6					.word	PlotCommand                      ; $ca PLOT
>90b0		8c 8d					.word	PokeBCommand                     ; $cb POKE
>90b2		98 8d					.word	PokeDCommand                     ; $cc POKED
>90b4		94 8d					.word	PokeLCommand                     ; $cd POKEL
>90b6		90 8d					.word	PokeWCommand                     ; $ce POKEW
>90b8		35 8e					.word	Command_Read                     ; $cf READ
>90ba		13 a6					.word	RectangleCommand                 ; $d0 RECT
>90bc		92 8e					.word	RemCommand                       ; $d1 REM
>90be		56 a4					.word	SyntaxError                      ; $d2 SOLID
>90c0		30 b3					.word	SoundCommand                     ; $d3 SOUND
>90c2		22 a6					.word	SpriteCommand                    ; $d4 SPRITE
>90c4		5c a6					.word	TextCommand                      ; $d5 TEXT
>90c6		96 8f					.word	Unused2                          ; $d6 TO
.90c8						VectorSet1:
>90c8		56 a4					.word	SyntaxError                      ; $80 !0:EOF
>90ca		56 a4					.word	SyntaxError                      ; $81 !1:SH1
>90cc		56 a4					.word	SyntaxError                      ; $82 !2:SH2
>90ce		2b 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>90d0		47 85					.word	AssertCommand                    ; $84 ASSERT
>90d2		d6 a7					.word	BitmapCtrl                       ; $85 BITMAP
>90d4		57 85					.word	Command_BLoad                    ; $86 BLOAD
>90d6		f5 85					.word	Command_BSave                    ; $87 BSAVE
>90d8		07 87					.word	ClearScreen                      ; $88 CLS
>90da		cc 89					.word	Command_CPrint                   ; $89 CPRINT
>90dc		d4 87					.word	Command_Dir                      ; $8a DIR
>90de		50 88					.word	Command_Drive                    ; $8b DRIVE
>90e0		57 88					.word	EndCommand                       ; $8c END
>90e2		e8 b2					.word	Explode                          ; $8d EXPLODE
>90e4		56 a4					.word	SyntaxError                      ; $8e GO
>90e6		65 89					.word	Command_GOSUB                    ; $8f GOSUB
>90e8		83 89					.word	GotoCommand                      ; $90 GOTO
>90ea		56 a4					.word	SyntaxError                      ; $91 HIMEM
>90ec		c7 89					.word	Command_Input                    ; $92 INPUT
>90ee		11 8b					.word	Command_List                     ; $93 LIST
>90f0		1b 8c					.word	Command_Load                     ; $94 LOAD
>90f2		7c 8d					.word	NewCommand                       ; $95 NEW
>90f4		c4 b2					.word	PingCommand                      ; $96 PING
>90f6		d3 89					.word	Command_Print                    ; $97 PRINT
>90f8		c1 8e					.word	Command_Restore                  ; $98 RESTORE
>90fa		75 89					.word	Command_RETURN                   ; $99 RETURN
>90fc		00 8f					.word	CommandRUN                       ; $9a RUN
>90fe		9a 91					.word	Command_Save                     ; $9b SAVE
>9100		56 a4					.word	SyntaxError                      ; $9c SETDATE
>9102		56 a4					.word	SyntaxError                      ; $9d SETTIME
>9104		dc b2					.word	ShootCommand                     ; $9e SHOOT
>9106		1b a8					.word	SpritesCtrl                      ; $9f SPRITES
>9108		1e 92					.word	StopCommand                      ; $a0 STOP
>910a		eb 92					.word	Command_VERIFY                   ; $a1 VERIFY
>910c		d0 a8					.word	XGoCommand                       ; $a2 XGO
>910e		c7 a8					.word	XLoadCommand                     ; $a3 XLOAD
>9110		d0 b2					.word	ZapCommand                       ; $a4 ZAP
.9112						VectorSet2:
>9112		56 a4					.word	SyntaxError                      ; $80 !0:EOF
>9114		56 a4					.word	SyntaxError                      ; $81 !1:SH1
>9116		56 a4					.word	SyntaxError                      ; $82 !2:SH2
>9118		15 a3					.word	Assemble_adc                     ; $83 ADC
>911a		0d a3					.word	Assemble_and                     ; $84 AND
>911c		29 a3					.word	Assemble_asl                     ; $85 ASL
>911e		93 a3					.word	Assemble_bcc                     ; $86 BCC
>9120		97 a3					.word	Assemble_bcs                     ; $87 BCS
>9122		9f a3					.word	Assemble_beq                     ; $88 BEQ
>9124		56 a3					.word	Assemble_bit                     ; $89 BIT
>9126		87 a3					.word	Assemble_bmi                     ; $8a BMI
>9128		9b a3					.word	Assemble_bne                     ; $8b BNE
>912a		83 a3					.word	Assemble_bpl                     ; $8c BPL
>912c		a3 a3					.word	Assemble_bra                     ; $8d BRA
>912e		a7 a3					.word	Assemble_brk                     ; $8e BRK
>9130		8b a3					.word	Assemble_bvc                     ; $8f BVC
>9132		8f a3					.word	Assemble_bvs                     ; $90 BVS
>9134		af a3					.word	Assemble_clc                     ; $91 CLC
>9136		03 a4					.word	Assemble_cld                     ; $92 CLD
>9138		c3 a3					.word	Assemble_cli                     ; $93 CLI
>913a		f3 a3					.word	Assemble_clv                     ; $94 CLV
>913c		21 a3					.word	Assemble_cmp                     ; $95 CMP
>913e		6a a3					.word	Assemble_cpx                     ; $96 CPX
>9140		65 a3					.word	Assemble_cpy                     ; $97 CPY
>9142		47 a3					.word	Assemble_dec                     ; $98 DEC
>9144		ff a3					.word	Assemble_dex                     ; $99 DEX
>9146		db a3					.word	Assemble_dey                     ; $9a DEY
>9148		11 a3					.word	Assemble_eor                     ; $9b EOR
>914a		4c a3					.word	Assemble_inc                     ; $9c INC
>914c		0f a4					.word	Assemble_inx                     ; $9d INX
>914e		fb a3					.word	Assemble_iny                     ; $9e INY
>9150		7e a3					.word	Assemble_jmp                     ; $9f JMP
>9152		79 a3					.word	Assemble_jsr                     ; $a0 JSR
>9154		1d a3					.word	Assemble_lda                     ; $a1 LDA
>9156		42 a3					.word	Assemble_ldx                     ; $a2 LDX
>9158		60 a3					.word	Assemble_ldy                     ; $a3 LDY
>915a		33 a3					.word	Assemble_lsr                     ; $a4 LSR
>915c		13 a4					.word	Assemble_nop                     ; $a5 NOP
>915e		09 a3					.word	Assemble_ora                     ; $a6 ORA
>9160		bf a3					.word	Assemble_pha                     ; $a7 PHA
>9162		ab a3					.word	Assemble_php                     ; $a8 PHP
>9164		07 a4					.word	Assemble_phx                     ; $a9 PHX
>9166		c7 a3					.word	Assemble_phy                     ; $aa PHY
>9168		cf a3					.word	Assemble_pla                     ; $ab PLA
>916a		b3 a3					.word	Assemble_plp                     ; $ac PLP
>916c		1b a4					.word	Assemble_plx                     ; $ad PLX
>916e		d7 a3					.word	Assemble_ply                     ; $ae PLY
>9170		2e a3					.word	Assemble_rol                     ; $af ROL
>9172		38 a3					.word	Assemble_ror                     ; $b0 ROR
>9174		bb a3					.word	Assemble_rti                     ; $b1 RTI
>9176		cb a3					.word	Assemble_rts                     ; $b2 RTS
>9178		25 a3					.word	Assemble_sbc                     ; $b3 SBC
>917a		b7 a3					.word	Assemble_sec                     ; $b4 SEC
>917c		17 a4					.word	Assemble_sed                     ; $b5 SED
>917e		d3 a3					.word	Assemble_sei                     ; $b6 SEI
>9180		19 a3					.word	Assemble_sta                     ; $b7 STA
>9182		0b a4					.word	Assemble_stp                     ; $b8 STP
>9184		3d a3					.word	Assemble_stx                     ; $b9 STX
>9186		5b a3					.word	Assemble_sty                     ; $ba STY
>9188		51 a3					.word	Assemble_stz                     ; $bb STZ
>918a		ef a3					.word	Assemble_tax                     ; $bc TAX
>918c		eb a3					.word	Assemble_tay                     ; $bd TAY
>918e		74 a3					.word	Assemble_trb                     ; $be TRB
>9190		6f a3					.word	Assemble_tsb                     ; $bf TSB
>9192		f7 a3					.word	Assemble_tsx                     ; $c0 TSX
>9194		df a3					.word	Assemble_txa                     ; $c1 TXA
>9196		e7 a3					.word	Assemble_txs                     ; $c2 TXS
>9198		e3 a3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.919a						Command_Save:
.919a		20 30 a2	jsr $a230			jsr 	EvaluateString 				; file name to load
.919d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.919f		a5 36		lda $36				lda 	zTemp0
.91a1		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.91a4		b0 2f		bcs $91d5			bcs 	CSErrorHandler 				; error, so fail.
.91a6		8d 6a 06	sta $066a			sta 	CurrentFileStream 			; save the reading stream.
.91a9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91ab		85 30		sta $30				sta 	codePtr
.91ad		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91af		85 31		sta $31				sta 	codePtr+1
.91b1						_CSLoop:
.91b1		b2 30		lda ($30)			lda 	(codePtr)
.91b3		f0 17		beq $91cc			beq 	_CSExit
.91b5		20 f9 91	jsr $91f9			jsr 	CSGetCleanLine
.91b8		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.91ba		85 36		sta $36				sta 	zTemp0
.91bc		20 d8 91	jsr $91d8			jsr 	CLWriteByteBlock 			; write the block out.
.91bf		18		clc				clc
.91c0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.91c2		65 30		adc $30				adc 	codePtr
.91c4		85 30		sta $30				sta 	codePtr
.91c6		90 02		bcc $91ca			bcc 	_CREExit
.91c8		e6 31		inc $31				inc 	codePtr+1 					; carry
.91ca						_CREExit:
.91ca		80 e5		bra $91b1			bra 	_CSLoop
.91cc						_CSExit:
.91cc		ad 6a 06	lda $066a			lda 	CurrentFileStream 			; close file
.91cf		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.91d2		4c 4e 8c	jmp $8c4e			jmp 	CLComplete 					; display complete message.
.91d5						CSErrorHandler:
.91d5		4c 6b 8c	jmp $8c6b			jmp 	CLErrorHandler
.91d8						CLWriteByteBlock:
.91d8		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.91da		f0 1c		beq $91f8			beq 	_CLWBBExit					; if so, exit
.91dc		ad 6a 06	lda $066a			lda 	CurrentFileStream 			; stream to write, count in X
.91df		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.91e2		b0 f1		bcs $91d5			bcs 	CSErrorHandler 				; error occurred
.91e4		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.91e6		8a		txa				txa 								; subtract bytes written from X, total count.
.91e7		38		sec				sec
.91e8		e5 38		sbc $38				sbc 	zTemp1
.91ea		aa		tax				tax
.91eb		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.91ec		a5 36		lda $36				lda 	zTemp0
.91ee		65 38		adc $38				adc 	zTemp1
.91f0		85 36		sta $36				sta 	zTemp0
.91f2		90 e4		bcc $91d8			bcc 	CLWriteByteBlock
.91f4		e6 37		inc $37				inc 	zTemp0+1
.91f6		80 e0		bra $91d8			bra 	CLWriteByteBlock 			; and retry write out.
.91f8						_CLWBBExit:
.91f8		60		rts				rts
.91f9						CSGetCleanLine:
.91f9		a9 00		lda #$00			lda 	#0 							; no indent.
.91fb		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.91fe		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9200		a0 00		ldy #$00			ldy 	#0
.9202						_CSClean:
.9202		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.9205		f0 09		beq $9210			beq 	_CSDoneClean
.9207		30 04		bmi $920d			bmi 	_CSIgnoreCharacter
.9209		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.920c		e8		inx				inx
.920d						_CSIgnoreCharacter:
.920d		c8		iny				iny
.920e		80 f2		bra $9202			bra 	_CSClean
.9210						_CSDoneClean:
.9210		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9212		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9215		e8		inx				inx
.9216		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.9219		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.921b		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.921d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.921e						StopCommand:
.921e		a9 08		lda #$08		lda	#8
.9220		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9223						ProcedureScan:
.9223		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9225		85 30		sta $30				sta 	codePtr
.9227		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9229		85 31		sta $31				sta 	codePtr+1
.922b						_PSLoop:
.922b		b2 30		lda ($30)			lda 	(codePtr)
.922d		f0 42		beq $9271			beq 	_PSExit
.922f		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9231		b1 30		lda ($30),y			lda 	(codePtr),y
.9233		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.9235		d0 2d		bne $9264			bne 	_PSNext
.9237		c8		iny				iny 								; get the address of the record to zTemp0 and
.9238		b1 30		lda ($30),y			lda 	(codePtr),y
.923a		29 c0		and #$c0			and 	#$C0
.923c		c9 40		cmp #$40			cmp 	#$40
.923e		d0 32		bne $9272			bne 	_PSSyntax
.9240		b1 30		lda ($30),y			lda 	(codePtr),y
.9242		18		clc				clc
.9243		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9245		85 37		sta $37				sta 	zTemp0+1
.9247		c8		iny				iny 								; LSB
.9248		b1 30		lda ($30),y			lda 	(codePtr),y
.924a		85 36		sta $36				sta 	zTemp0
.924c		c8		iny				iny 								; character after variable call.
.924d		98		tya				tya 								; save Y offset at +7 (exponent slot)
.924e		a0 07		ldy #$07			ldy 	#7
.9250		91 36		sta ($36),y			sta 	(zTemp0),y
.9252		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9254		a0 02		ldy #$02			ldy 	#2
.9256		91 36		sta ($36),y			sta 	(zTemp0),y
.9258		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.925a						_PSCopy:
.925a		b5 30		lda $30,x			lda 	safePtr,x
.925c		c8		iny				iny
.925d		91 36		sta ($36),y			sta 	(zTemp0),y
.925f		e8		inx				inx
.9260		e0 04		cpx #$04			cpx 	#4
.9262		d0 f6		bne $925a			bne 	_PSCopy
.9264						_PSNext:
.9264		18		clc				clc
.9265		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9267		65 30		adc $30				adc 	codePtr
.9269		85 30		sta $30				sta 	codePtr
.926b		90 02		bcc $926f			bcc 	_CREExit
.926d		e6 31		inc $31				inc 	codePtr+1 					; carry
.926f						_CREExit:
.926f		80 ba		bra $922b			bra 	_PSLoop
.9271						_PSExit:
.9271		60		rts				rts
.9272						_PSSyntax:
.9272		4c 56 a4	jmp $a456			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9275						ScanForward:
.9275		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9277		86 37		stx $37				stx 	zTemp0+1
.9279		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.927b						_ScanLoop:
.927b		b1 30		lda ($30),y			lda 	(codePtr),y
.927d		c8		iny				iny
.927e		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9280		d0 0e		bne $9290			bne 	_ScanGoNext
.9282		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9284		f0 04		beq $928a			beq 	_ScanMatch
.9286		c5 37		cmp $37				cmp 	zTemp0+1
.9288		d0 06		bne $9290			bne 	_ScanGoNext
.928a						_ScanMatch:
.928a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.928c		d0 01		bne $928f			bne 	_ScanNotEndEOL
.928e		88		dey				dey
.928f						_ScanNotEndEOL:
.928f		60		rts				rts
.9290						_ScanGoNext:
.9290		20 95 92	jsr $9295			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9293		80 e6		bra $927b			bra 	_ScanLoop
.9295						ScanForwardOne:
.9295		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9297		90 3e		bcc $92d7			bcc 	_SFWExit
.9299		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.929b		90 18		bcc $92b5			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.929d		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.929f		b0 2f		bcs $92d0			bcs 	_ScanSkipData
.92a1		c9 aa		cmp #$aa			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.92a3		90 32		bcc $92d7			bcc 	_SFWExit 					; if not, ordinary keywords.
.92a5		c9 b5		cmp #$b5			cmp 	#KWC_LAST_STRUCTURE+1
.92a7		b0 2e		bcs $92d7			bcs 	_SFWExit
.92a9		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.92ab		c9 af		cmp #$af			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.92ad		b0 28		bcs $92d7			bcs 	_SFWExit
.92af		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.92b1		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.92b3		80 22		bra $92d7			bra 	_SFWExit
.92b5						_ScanSkipOne:
.92b5		c8		iny				iny 								; consume the extra one.
.92b6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.92b8		d0 1d		bne $92d7			bne 	_SFWExit
.92ba		18		clc				clc
.92bb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92bd		65 30		adc $30				adc 	codePtr
.92bf		85 30		sta $30				sta 	codePtr
.92c1		90 02		bcc $92c5			bcc 	_CREExit
.92c3		e6 31		inc $31				inc 	codePtr+1 					; carry
.92c5						_CREExit:
.92c5		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.92c7		b2 30		lda ($30)			lda 	(codePtr)
.92c9		d0 0c		bne $92d7			bne 	_SFWExit 					; if not zero, more to scan
.92cb		a9 13		lda #$13		lda	#19
.92cd		4c 8d 93	jmp $938d		jmp	ErrorHandler
.92d0						_ScanSkipData:
.92d0		88		dey				dey 								; point at data token
.92d1		c8		iny				iny 								; point to offset
.92d2		98		tya				tya 								; A = offset position
.92d3		38		sec				sec 								; add size +1 hence SEC
.92d4		71 30		adc ($30),y			adc 	(codePtr),y
.92d6		a8		tay				tay 								; make current position.
.92d7						_SFWExit:
.92d7		60		rts				rts
.92d8						ScanGetCurrentLineStep:
.92d8		64 38		stz $38				stz 	zTemp1
.92da		a0 03		ldy #$03			ldy 	#3
.92dc						_SGCLSLoop:
.92dc		b1 30		lda ($30),y			lda 	(codePtr),y
.92de		c8		iny				iny
.92df		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.92e1		f0 05		beq $92e8			beq 	_SGCLSExit
.92e3		20 95 92	jsr $9295			jsr 	ScanForwardOne
.92e6		80 f4		bra $92dc			bra 	_SGCLSLoop
.92e8						_SGCLSExit:
.92e8		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.92ea		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.92eb						Command_VERIFY:
.92eb		20 30 a2	jsr $a230			jsr 	EvaluateString 				; file name to verify
.92ee		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.92f0		a5 36		lda $36				lda 	zTemp0
.92f2		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.92f5		b0 4b		bcs $9342			bcs 	_CVErrorHandler 			; error, so fail.
.92f7		8d 6a 06	sta $066a			sta 	CurrentFileStream 			; save the reading stream.
.92fa		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.92fd		9c 69 06	stz $0669			stz 	LoadEOFFlag 				; clear EOF Flag.
.9300		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9302		85 30		sta $30				sta 	codePtr
.9304		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9306		85 31		sta $31				sta 	codePtr+1
.9308						_CVLoop:
.9308		20 79 8c	jsr $8c79			jsr 	LoadReadLine 				; get next line.
.930b		f0 27		beq $9334			beq 	_CVExit 					; end, exit.
.930d		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.9310		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.9313		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.9316		f0 f0		beq $9308			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.9318		a0 00		ldy #$00			ldy 	#0 							; start compare
.931a						_CVCompareLoop:
.931a		b1 30		lda ($30),y			lda 	(codePtr),y
.931c		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.931f		d0 1c		bne $933d			bne 	_CVCompareError
.9321		c8		iny				iny
.9322		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.9325		d0 f3		bne $931a			bne 	_CVCompareLoop
.9327		18		clc				clc
.9328		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.932a		65 30		adc $30				adc 	codePtr
.932c		85 30		sta $30				sta 	codePtr
.932e		90 02		bcc $9332			bcc 	_CREExit
.9330		e6 31		inc $31				inc 	codePtr+1 					; carry
.9332						_CREExit:
.9332		80 d4		bra $9308			bra 	_CVLoop
.9334						_CVExit:
.9334		ad 6a 06	lda $066a			lda 	CurrentFileStream
.9337		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.933a		4c 4e 8c	jmp $8c4e			jmp 	CLComplete
.933d						_CVCompareError:
.933d		a9 1b		lda #$1b		lda	#27
.933f		4c 8d 93	jmp $938d		jmp	ErrorHandler
.9342						_CVErrorHandler:
.9342		4c 6b 8c	jmp $8c6b			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9345						Command_WHILE:
.9345		5a		phy				phy 								; save position of the test
.9346		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9348		20 26 a2	jsr $a226			jsr 	EvaluateNumber
.934b		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; check if zero
.934e		f0 0e		beq $935e			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9350		98		tya				tya 								; position *after* test.
.9351		7a		ply				ply 								; restore position before test, at WHILE
.9352		88		dey				dey 								; so we execute the WHILE command again.
.9353		48		pha				pha 								; push after test on the stack
.9354		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9356		20 b7 b3	jsr $b3b7			jsr 	StackOpen
.9359		20 fc b3	jsr $b3fc			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.935c		7a		ply				ply 								; restore the position *after* the test
.935d		60		rts				rts
.935e						_WHExitLoop:
.935e		68		pla				pla 								; throw post loop position
.935f		a9 b4		lda #$b4			lda 	#KWD_WEND 					; scan forward past WEND
.9361		aa		tax				tax
.9362		20 75 92	jsr $9275			jsr 	ScanForward
.9365		60		rts				rts
.9366						Command_WEND:
.9366		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9368		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.936a		20 e4 b3	jsr $b3e4			jsr 	StackCheckFrame
.936d		20 0d b4	jsr $b40d			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9370		20 d6 b3	jsr $b3d6			jsr 	StackClose		 			; erase the frame
.9373		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9374						CheckRightBracket:
.9374		b1 30		lda ($30),y			lda 	(codePtr),y
.9376		c8		iny				iny
.9377		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9379		d0 0f		bne $938a			bne 	CNAFail
.937b		60		rts				rts
.937c						CheckComma:
.937c		b1 30		lda ($30),y			lda 	(codePtr),y
.937e		c8		iny				iny
.937f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9381		d0 07		bne $938a			bne 	CNAFail
.9383		60		rts				rts
.9384						CheckNextA:
.9384		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9386		d0 02		bne $938a			bne 	CNAFail
.9388		c8		iny				iny 								; skip character
.9389		60		rts				rts 								; and exit
.938a						CNAFail:
.938a		4c 56 a4	jmp $a456			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.938d						ErrorHandler:
.938d		a8		tay				tay 								; find the error text
.938e		f0 49		beq $93d9			beq 	_EHEnd
.9390		a2 00		ldx #$00			ldx 	#0
.9392		a9 6f		lda #$6f			lda 	#((ErrorText) & $FF)
.9394		85 36		sta $36				sta 	0+zTemp0
.9396		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.9398		85 37		sta $37				sta 	1+zTemp0
.939a						_EHFind:
.939a		88		dey				dey 								; keep looking through text
.939b		f0 0e		beq $93ab			beq 	_EHFound
.939d						_EHFindZero:
.939d		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.939f		e6 36		inc $36				inc 	zTemp0
.93a1		d0 02		bne $93a5			bne 	_EHFNoCarry
.93a3		e6 37		inc $37				inc 	zTemp0+1
.93a5						_EHFNoCarry:
.93a5		c9 00		cmp #$00			cmp 	#0
.93a7		d0 f4		bne $939d			bne 	_EHFindZero
.93a9		80 ef		bra $939a			bra 	_EHFind
.93ab						_EHFound:
.93ab		a5 36		lda $36				lda 	zTemp0 						; print message
.93ad		a6 37		ldx $37				ldx 	zTemp0+1
.93af		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.93b2		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93b4		b1 30		lda ($30),y			lda 	(codePtr),y
.93b6		d0 05		bne $93bd			bne 	_EHAtMsg
.93b8		c8		iny				iny
.93b9		b1 30		lda ($30),y			lda 	(codePtr),y
.93bb		f0 17		beq $93d4			beq 	_EHCREnd
.93bd						_EHAtMsg:
.93bd		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93bf		a9 dc		lda #$dc			lda 	#_AtMsg & $FF
.93c1		20 e6 93	jsr $93e6			jsr 	PrintStringXA
.93c4		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93c6		b1 30		lda ($30),y			lda 	(codePtr),y
.93c8		48		pha				pha
.93c9		c8		iny				iny
.93ca		b1 30		lda ($30),y			lda 	(codePtr),y
.93cc		aa		tax				tax
.93cd		68		pla				pla
.93ce		20 fc 97	jsr $97fc			jsr 	ConvertInt16 				; convert XA to string
.93d1		20 e6 93	jsr $93e6			jsr 	PrintStringXA 				; and print it.
.93d4						_EHCREnd:
.93d4		a9 0d		lda #$0d			lda 	#13 						; new line
.93d6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.93d9						_EHEnd:
.93d9		4c f6 84	jmp $84f6			jmp 	WarmStart
>93dc		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93e4		20 00
.93e6						PrintStringXA:
.93e6		5a		phy				phy
.93e7		86 37		stx $37				stx 	zTemp0+1
.93e9		85 36		sta $36				sta 	zTemp0
.93eb		a0 00		ldy #$00			ldy 	#0
.93ed						_PSXALoop:
.93ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.93ef		f0 06		beq $93f7			beq 	_PSXAExit
.93f1		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.93f4		c8		iny				iny
.93f5		80 f6		bra $93ed			bra 	_PSXALoop
.93f7						_PSXAExit:
.93f7		7a		ply				ply
.93f8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93f9						UnaryTrue:
.93f9		fa		plx				plx
.93fa						ReturnTrue:
.93fa		a9 01		lda #$01			lda 	#1  						; set to 1
.93fc		20 da a2	jsr $a2da			jsr 	NSMSetByte
.93ff		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9401		95 50		sta $50,x			sta 	NSStatus,x
.9403		60		rts				rts
.9404						UnaryFalse:
.9404		fa		plx				plx
.9405						ReturnFalse:
.9405		4c d8 a2	jmp $a2d8			jmp 	NSMSetZero 					; set it all to zero
.9408						BinaryCompareEqual:
.9408		fa		plx				plx
.9409		20 44 94	jsr $9444			jsr 	CompareBaseCode
.940c		c9 00		cmp #$00			cmp 	#0
.940e		f0 ea		beq $93fa			beq 	ReturnTrue
.9410		80 f3		bra $9405			bra 	ReturnFalse
.9412						BinaryCompareLess:
.9412		fa		plx				plx
.9413		20 44 94	jsr $9444			jsr 	CompareBaseCode
.9416		c9 ff		cmp #$ff			cmp 	#$FF
.9418		f0 e0		beq $93fa			beq 	ReturnTrue
.941a		80 e9		bra $9405			bra 	ReturnFalse
.941c						BinaryCompareGreater:
.941c		fa		plx				plx
.941d		20 44 94	jsr $9444			jsr 	CompareBaseCode
.9420		c9 01		cmp #$01			cmp 	#1
.9422		f0 d6		beq $93fa			beq 	ReturnTrue
.9424		80 df		bra $9405			bra 	ReturnFalse
.9426						BinaryCompareNotEqual:
.9426		fa		plx				plx
.9427		20 44 94	jsr $9444			jsr 	CompareBaseCode
.942a		c9 00		cmp #$00			cmp 	#0
.942c		d0 cc		bne $93fa			bne 	ReturnTrue
.942e		80 d5		bra $9405			bra 	ReturnFalse
.9430						BinaryCompareLessEqual:
.9430		fa		plx				plx
.9431		20 44 94	jsr $9444			jsr 	CompareBaseCode
.9434		c9 01		cmp #$01			cmp 	#1
.9436		d0 c2		bne $93fa			bne 	ReturnTrue
.9438		80 cb		bra $9405			bra 	ReturnFalse
.943a						BinaryCompareGreaterEqual:
.943a		fa		plx				plx
.943b		20 44 94	jsr $9444			jsr 	CompareBaseCode
.943e		c9 ff		cmp #$ff			cmp 	#$FF
.9440		d0 b8		bne $93fa			bne 	ReturnTrue
.9442		80 c1		bra $9405			bra 	ReturnFalse
.9444						CompareBaseCode:
.9444		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; make both values if references.
.9447		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9449		15 51		ora $51,x			ora 	NSStatus+1,x
.944b		29 10		and #$10			and 	#NSTString
.944d		d0 37		bne $9486			bne 	_CBCString 					; if so do string code, which will check if both.
.944f		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9451		15 79		ora $79,x			ora 	NSExponent+1,x
.9453		d0 34		bne $9489			bne 	_CBCFloat
.9455		b5 50		lda $50,x			lda 	NSStatus,x
.9457		15 51		ora $51,x			ora 	NSStatus+1,x
.9459		29 08		and #$08			and 	#NSTFloat
.945b		d0 2c		bne $9489			bne 	_CBCFloat
.945d		20 8c 94	jsr $948c			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9460		e8		inx				inx
.9461		20 8c 94	jsr $948c			jsr 	CompareFixMinusZero
.9464		ca		dex				dex
.9465		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9467		55 51		eor $51,x			eor 	NSStatus+1,x
.9469		10 0a		bpl $9475			bpl 	_CDCSameSign
.946b		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.946d		30 14		bmi $9483			bmi 	_CBCLess 					; return $FF
.946f						_CBCGreater:
.946f		a9 01		lda #$01			lda 	#1
.9471		60		rts				rts
.9472						_CBCEqual:
.9472		a9 00		lda #$00			lda 	#0
.9474		60		rts				rts
.9475						_CDCSameSign:
.9475		20 a1 96	jsr $96a1			jsr 	SubTopTwoStack 				; unsigned subtract
.9478		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; or the mantissa together
.947b		f0 f5		beq $9472			beq 	_CBCEqual 					; -0 == 0
.947d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.947f		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9481		10 ec		bpl $946f			bpl 	_CBCGreater
.9483						_CBCLess:
.9483		a9 ff		lda #$ff			lda 	#$FF
.9485		60		rts				rts
.9486						_CBCString:
.9486		4c 12 96	jmp $9612			jmp 	CompareStrings
.9489						_CBCFloat:
.9489		4c 5c 99	jmp $995c			jmp 	CompareFloat
.948c						CompareFixMinusZero:
.948c		20 fa a2	jsr $a2fa			jsr 	NSMIsZero
.948f		d0 02		bne $9493			bne 	_CFXMZNotZero
.9491		74 50		stz $50,x			stz 	NSStatus,x
.9493						_CFXMZNotZero:
.9493		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9494						StringConcat:
.9494		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9496		35 51		and $51,x			and 	NSStatus+1,x
.9498		29 18		and #$18			and 	#NSBTypeMask
.949a		c9 10		cmp #$10			cmp 	#NSTString
.949c		d0 50		bne $94ee			bne		_SCType
.949e		64 38		stz $38				stz 	zTemp1 						; counting total length
.94a0		e8		inx				inx
.94a1		20 bf 94	jsr $94bf			jsr 	_SCSetupZ0 					; setup for second
.94a4		20 c8 94	jsr $94c8			jsr 	_SCLengthZ0 				; length for second
.94a7		ca		dex				dex
.94a8		20 bf 94	jsr $94bf			jsr 	_SCSetupZ0 					; setup for first
.94ab		20 c8 94	jsr $94c8			jsr 	_SCLengthZ0 				; length for first
.94ae		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94b0		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.94b3		20 df 94	jsr $94df			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94b6		e8		inx				inx
.94b7		20 bf 94	jsr $94bf			jsr 	_SCSetupZ0 					; copy second out
.94ba		20 df 94	jsr $94df			jsr 	_SCCopy
.94bd		ca		dex				dex
.94be		60		rts				rts
.94bf						_SCSetupZ0:
.94bf		b5 58		lda $58,x			lda 	NSMantissa0,x
.94c1		85 36		sta $36				sta 	zTemp0
.94c3		b5 60		lda $60,x			lda 	NSMantissa1,x
.94c5		85 37		sta $37				sta 	zTemp0+1
.94c7		60		rts				rts
.94c8						_SCLengthZ0:
.94c8		5a		phy				phy
.94c9		a0 00		ldy #$00			ldy 	#0
.94cb						_SCLenLoop:
.94cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.94cd		f0 0e		beq $94dd			beq 	_SCLExit
.94cf		c8		iny				iny
.94d0		e6 38		inc $38				inc 	zTemp1
.94d2		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94d4		c9 fd		cmp #$fd			cmp 	#253
.94d6		d0 f3		bne $94cb			bne		_SCLenLoop
.94d8		a9 09		lda #$09		lda	#9
.94da		4c 8d 93	jmp $938d		jmp	ErrorHandler
.94dd						_SCLExit:
.94dd		7a		ply				ply
.94de		60		rts				rts
.94df						_SCCopy:
.94df		5a		phy				phy
.94e0		a0 00		ldy #$00			ldy 	#0
.94e2						_SCCopyLoop:
.94e2		b1 36		lda ($36),y			lda 	(zTemp0),y
.94e4		f0 06		beq $94ec			beq 	_SCCExit
.94e6		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite
.94e9		c8		iny				iny
.94ea		80 f6		bra $94e2			bra 	_SCCopyLoop
.94ec						_SCCExit:
.94ec		7a		ply				ply
.94ed		60		rts				rts
.94ee						_SCType:
.94ee		4c 60 a4	jmp $a460			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94f1						IntegerDivide:
.94f1		fa		plx				plx
.94f2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94f4		15 51		ora $51,x			ora 	NSStatus+1,x
.94f6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f7		0a		asl a				asl 	a
.94f8		10 05		bpl $94ff			bpl 	_NotRef
.94fa		48		pha				pha
.94fb		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94fe		68		pla				pla
.94ff						_NotRef:
.94ff		0a		asl a				asl 	a
.9500		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9502		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9504		15 79		ora $79,x			ora 	NSExponent+1,x
.9506		f0 03		beq $950b			beq 	_IntegerCode 				; if clear, then we have two integers
.9508		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.950b						_IntegerCode:
.950b		20 25 95	jsr $9525			jsr 	CheckDivideZero 			; do div zero check
.950e		20 57 95	jsr $9557			jsr 	Int32Divide 				; do the division
.9511		20 08 96	jsr $9608			jsr 	CalculateSign 				; calculate result sign
.9514						NSMCopyPlusTwoToZero:
.9514		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9516		95 58		sta $58,x			sta 	NSMantissa0,x
.9518		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.951a		95 60		sta $60,x			sta 	NSMantissa1,x
.951c		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.951e		95 68		sta $68,x			sta 	NSMantissa2,x
.9520		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9522		95 70		sta $70,x			sta 	NSMantissa3,x
.9524		60		rts				rts
.9525						CheckDivideZero:
.9525		e8		inx				inx
.9526		20 fa a2	jsr $a2fa			jsr 	NSMIsZero
.9529		f0 02		beq $952d			beq 	_CDVError
.952b		ca		dex				dex
.952c		60		rts				rts
.952d						_CDVError:
.952d		a9 03		lda #$03		lda	#3
.952f		4c 8d 93	jmp $938d		jmp	ErrorHandler
.9532						IntegerModulus:
.9532		fa		plx				plx
.9533		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9535		15 51		ora $51,x			ora 	NSStatus+1,x
.9537		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9538		0a		asl a				asl 	a
.9539		10 05		bpl $9540			bpl 	_NotRef
.953b		48		pha				pha
.953c		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.953f		68		pla				pla
.9540						_NotRef:
.9540		0a		asl a				asl 	a
.9541		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9543		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9545		15 79		ora $79,x			ora 	NSExponent+1,x
.9547		f0 03		beq $954c			beq 	_IntegerCode 				; if clear, then we have two integers
.9549		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.954c						_IntegerCode:
.954c						IntegerModulusNoCheck:
.954c		20 25 95	jsr $9525			jsr 	CheckDivideZero 			; do div zero check
.954f		20 57 95	jsr $9557			jsr 	Int32Divide 				; do the division
.9552		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9554		56 50		lsr $50,x			lsr 	NSStatus,x
.9556		60		rts				rts
.9557						Int32Divide:
.9557		48		pha				pha 								; save AXY
.9558		5a		phy				phy
.9559		20 bb a2	jsr $a2bb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.955c		20 d4 a2	jsr $a2d4			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.955f		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9561						_I32DivideLoop:
.9561		e8		inx				inx
.9562		e8		inx				inx
.9563		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9566		ca		dex				dex
.9567		ca		dex				dex
.9568		20 e8 a2	jsr $a2e8			jsr 	NSMRotateLeft
.956b		20 96 95	jsr $9596			jsr 	DivideCheckSubtract 		; check if subtract possible
.956e		90 02		bcc $9572			bcc 	_I32DivideNoCarryIn
.9570		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9572						_I32DivideNoCarryIn:
.9572		88		dey				dey 								; loop round till division completed.
.9573		d0 ec		bne $9561			bne 	_I32DivideLoop
.9575		7a		ply				ply 								; restore AXY and exit
.9576		68		pla				pla
.9577		60		rts				rts
.9578						Int32ShiftDivide:
.9578		48		pha				pha 								; save AY
.9579		5a		phy				phy
.957a		e8		inx				inx 								; clear S[X+2]
.957b		e8		inx				inx
.957c		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.957f		ca		dex				dex
.9580		ca		dex				dex
.9581		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9583						_I32SDLoop:
.9583		20 96 95	jsr $9596			jsr 	DivideCheckSubtract 		; check if subtract possible
.9586		e8		inx				inx
.9587		e8		inx				inx
.9588		20 e8 a2	jsr $a2e8			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.958b		ca		dex				dex
.958c		ca		dex				dex
.958d		20 e8 a2	jsr $a2e8			jsr 	NSMRotateLeft
.9590		88		dey				dey 	 							; do 31 times
.9591		d0 f0		bne $9583			bne 	_I32SDLoop
.9593		7a		ply				ply 								; restore AY and exit
.9594		68		pla				pla
.9595		60		rts				rts
.9596						DivideCheckSubtract:
.9596		20 a1 96	jsr $96a1			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9599		b0 04		bcs $959f			bcs 	_DCSExit 					; if carry set, then could do, exit
.959b		20 87 96	jsr $9687			jsr 	AddTopTwoStack 				; add it back in
.959e		18		clc				clc 								; and return False
.959f						_DCSExit:
.959f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95a0						MulInteger:
.95a0		fa		plx				plx
.95a1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95a3		15 51		ora $51,x			ora 	NSStatus+1,x
.95a5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95a6		0a		asl a				asl 	a
.95a7		10 05		bpl $95ae			bpl 	_NotRef
.95a9		48		pha				pha
.95aa		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ad		68		pla				pla
.95ae						_NotRef:
.95ae		0a		asl a				asl 	a 							; put MSB of type into A:7
.95af		30 09		bmi $95ba			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95b1		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95b3		15 79		ora $79,x			ora 	NSExponent+1,x
.95b5		f0 06		beq $95bd			beq 	_IntegerCode 				; if clear, then we have two integers
.95b7		4c 1e 9a	jmp $9a1e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95ba						_StringData:
.95ba		4c 6a a4	jmp $a46a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95bd						_IntegerCode:
.95bd		20 ca 95	jsr $95ca			jsr 	MultiplyShort
.95c0		c9 00		cmp #$00			cmp 	#0
.95c2		f0 05		beq $95c9			beq 	_MIExit
.95c4		a9 04		lda #$04		lda	#4
.95c6		4c 8d 93	jmp $938d		jmp	ErrorHandler
.95c9						_MIExit:
.95c9		60		rts				rts
.95ca						MultiplyShort:
.95ca		5a		phy				phy 								; save Y
.95cb		20 bb a2	jsr $a2bb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95ce		20 d4 a2	jsr $a2d4			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95d1		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95d3						_I32MLoop:
.95d3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95d5		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95d7		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95d9		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95db		f0 25		beq $9602			beq 	_I32MExit 					; exit if zero
.95dd		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95df		29 01		and #$01			and 	#1
.95e1		f0 0d		beq $95f0			beq 	_I32MNoAdd
.95e3		20 87 96	jsr $9687			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95e6		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95e8		10 06		bpl $95f0			bpl 	_I32MNoAdd
.95ea						_I32ShiftRight:
.95ea		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight 				; shift S[X] right
.95ed		c8		iny				iny 								; increment shift count
.95ee		80 09		bra $95f9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.95f0						_I32MNoAdd:
.95f0		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95f2		70 f6		bvs $95ea			bvs 	_I32ShiftRight 				; instead.
.95f4		e8		inx				inx
.95f5		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95f8		ca		dex				dex
.95f9						_I32MShiftUpper:
.95f9		e8		inx				inx 								; shift S[X+2] right
.95fa		e8		inx				inx
.95fb		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight
.95fe		ca		dex				dex
.95ff		ca		dex				dex
.9600		80 d1		bra $95d3			bra 	_I32MLoop 					; try again.
.9602						_I32MExit:
.9602		20 08 96	jsr $9608			jsr 	CalculateSign
.9605		98		tya				tya 								; shift in A
.9606		7a		ply				ply 								; restore Y and exit
.9607		60		rts				rts
.9608						CalculateSign:
.9608		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.960a		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.960c		55 51		eor $51,x			eor 	NSStatus+1,x
.960e		0a		asl a				asl 	a 							; shift bit 7 into carry
.960f		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9611		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9612						CompareStrings:
.9612		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9614		35 51		and $51,x			and 	NSStatus+1,x
.9616		29 10		and #$10			and 	#NSBIsString
.9618		f0 28		beq $9642			beq 	_CSTypeError
.961a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.961c		85 36		sta $36				sta 	zTemp0
.961e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9620		85 37		sta $37				sta 	zTemp0+1
.9622		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9624		85 38		sta $38				sta 	zTemp1
.9626		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9628		85 39		sta $39				sta 	zTemp1+1
.962a		5a		phy				phy 								; save Y so we can access strings
.962b		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.962d						_CSLoop:
.962d		c8		iny				iny
.962e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9630		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9632		d0 06		bne $963a			bne 	_CSDifferent
.9634		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9636		d0 f5		bne $962d			bne 	_CSLoop 					; still comparing
.9638						_CSExit:
.9638		7a		ply				ply 								; reached end, return zero in A from EOS
.9639		60		rts				rts
.963a						_CSDifferent:
.963a		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.963c		90 fa		bcc $9638			bcc		_CSExit
.963e		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9640		80 f6		bra $9638			bra 	_CSExit
.9642						_CSTypeError:
.9642		4c 60 a4	jmp $a460			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9645						ShiftLeft:
.9645		38		sec				sec 								; common code, carry determines which way.
.9646		80 01		bra $9649			bra 	ShiftMain
.9648						ShiftRight:
.9648		18		clc				clc
.9649						ShiftMain:
.9649		fa		plx				plx 								; restore X
.964a		08		php				php 								; save direction
.964b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.964d		15 51		ora $51,x			ora 	NSStatus+1,x
.964f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9650		0a		asl a				asl 	a
.9651		10 05		bpl $9658			bpl 	_NotRef
.9653		48		pha				pha
.9654		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9657		68		pla				pla
.9658						_NotRef:
.9658		0a		asl a				asl 	a
.9659		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.965b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.965d		15 79		ora $79,x			ora 	NSExponent+1,x
.965f		f0 03		beq $9664			beq 	_IntegerCode 				; if clear, then we have two integers
.9661		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.9664						_IntegerCode:
.9664		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9666		29 e0		and #$e0			and 	#$E0
.9668		15 61		ora $61,x			ora 	NSMantissa1+1,x
.966a		15 69		ora $69,x			ora 	NSMantissa2+1,x
.966c		15 71		ora $71,x			ora 	NSMantissa3+1,x
.966e		d0 12		bne $9682			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9670						_SMLoop:
.9670		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9672		30 11		bmi $9685			bmi 	_SMExit 					; exit if done.
.9674		28		plp				plp 								; restore direction setting
.9675		08		php				php
.9676		90 05		bcc $967d			bcc 	_SMRight
.9678		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; shift left if CS
.967b		80 f3		bra $9670			bra 	_SMLoop
.967d						_SMRight:
.967d		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight 				; shift right if CC
.9680		80 ee		bra $9670			bra 	_SMLoop
.9682						_SMExit0:
.9682		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; return zero.
.9685						_SMExit:
.9685		28		plp				plp 								; throw direction
.9686		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9687						AddTopTwoStack:
.9687		18		clc				clc
.9688		b5 58		lda $58,x			lda		NSMantissa0,x
.968a		75 59		adc $59,x			adc 		NSMantissa0+1,x
.968c		95 58		sta $58,x			sta 	NSMantissa0,x
.968e		b5 60		lda $60,x			lda		NSMantissa1,x
.9690		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9692		95 60		sta $60,x			sta 	NSMantissa1,x
.9694		b5 68		lda $68,x			lda		NSMantissa2,x
.9696		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9698		95 68		sta $68,x			sta 	NSMantissa2,x
.969a		b5 70		lda $70,x			lda		NSMantissa3,x
.969c		75 71		adc $71,x			adc 		NSMantissa3+1,x
.969e		95 70		sta $70,x			sta 	NSMantissa3,x
.96a0		60		rts				rts
.96a1						SubTopTwoStack:
.96a1		38		sec				sec
.96a2		b5 58		lda $58,x			lda		NSMantissa0,x
.96a4		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96a6		95 58		sta $58,x			sta 	NSMantissa0,x
.96a8		b5 60		lda $60,x			lda		NSMantissa1,x
.96aa		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96ac		95 60		sta $60,x			sta 	NSMantissa1,x
.96ae		b5 68		lda $68,x			lda		NSMantissa2,x
.96b0		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96b2		95 68		sta $68,x			sta 	NSMantissa2,x
.96b4		b5 70		lda $70,x			lda		NSMantissa3,x
.96b6		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96b8		95 70		sta $70,x			sta 	NSMantissa3,x
.96ba		60		rts				rts
.96bb						AddInteger:
.96bb		fa		plx				plx
.96bc		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96be		15 51		ora $51,x			ora 	NSStatus+1,x
.96c0		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96c1		0a		asl a				asl 	a
.96c2		10 05		bpl $96c9			bpl 	_NotRef
.96c4		48		pha				pha
.96c5		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c8		68		pla				pla
.96c9						_NotRef:
.96c9		0a		asl a				asl 	a 							; put MSB of type into A:7
.96ca		30 09		bmi $96d5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96cc		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ce		15 79		ora $79,x			ora 	NSExponent+1,x
.96d0		f0 06		beq $96d8			beq 	_IntegerCode 				; if clear, then we have two integers
.96d2		4c ce 98	jmp $98ce			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96d5						_StringData:
.96d5		4c 94 94	jmp $9494			jmp 	StringConcat							; at least one string - don't know both are strings.
.96d8						_IntegerCode:
.96d8						AddCode:
.96d8		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96da		55 51		eor $51,x			eor 	NSStatus+1,x
.96dc		10 a9		bpl $9687			bpl 	AddTopTwoStack
.96de		20 a1 96	jsr $96a1			jsr 	SubTopTwoStack 				; do a physical subtraction
.96e1		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96e3		10 07		bpl $96ec			bpl 	_AddExit
.96e5		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96e7		95 50		sta $50,x			sta 	NSStatus,x
.96e9		20 a1 a2	jsr $a2a1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96ec						_AddExit:
.96ec		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; check for -0
.96ef		d0 02		bne $96f3			bne 	_AddNonZero
.96f1		74 50		stz $50,x			stz 	NSStatus,x
.96f3						_AddNonZero:
.96f3		60		rts				rts
.96f4						SubInteger:
.96f4		fa		plx				plx
.96f5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96f7		15 51		ora $51,x			ora 	NSStatus+1,x
.96f9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96fa		0a		asl a				asl 	a
.96fb		10 05		bpl $9702			bpl 	_NotRef
.96fd		48		pha				pha
.96fe		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9701		68		pla				pla
.9702						_NotRef:
.9702		0a		asl a				asl 	a 							; put MSB of type into A:7
.9703		30 09		bmi $970e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9705		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9707		15 79		ora $79,x			ora 	NSExponent+1,x
.9709		f0 06		beq $9711			beq 	_IntegerCode 				; if clear, then we have two integers
.970b		4c d3 98	jmp $98d3			jmp 	FloatingPointSub 							; otherwise at least one float.
.970e						_StringData:
.970e		4c 6a a4	jmp $a46a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9711						_IntegerCode:
.9711		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9713		49 80		eor #$80			eor 	#$80
.9715		95 51		sta $51,x			sta 	NSStatus+1,x
.9717		80 bf		bra $96d8			bra 	AddCode 					; and do the same code as add.
.9719						AndInteger:
.9719		fa		plx				plx
.971a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.971c		15 51		ora $51,x			ora 	NSStatus+1,x
.971e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.971f		0a		asl a				asl 	a
.9720		10 05		bpl $9727			bpl 	_NotRef
.9722		48		pha				pha
.9723		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9726		68		pla				pla
.9727						_NotRef:
.9727		0a		asl a				asl 	a
.9728		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.972a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.972c		15 79		ora $79,x			ora 	NSExponent+1,x
.972e		f0 03		beq $9733			beq 	_IntegerCode 				; if clear, then we have two integers
.9730		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.9733						_IntegerCode:
.9733		b5 58		lda $58,x			lda		NSMantissa0,x
.9735		35 59		and $59,x			and 		NSMantissa0+1,x
.9737		95 58		sta $58,x			sta 	NSMantissa0,x
.9739		b5 60		lda $60,x			lda		NSMantissa1,x
.973b		35 61		and $61,x			and 		NSMantissa1+1,x
.973d		95 60		sta $60,x			sta 	NSMantissa1,x
.973f		b5 68		lda $68,x			lda		NSMantissa2,x
.9741		35 69		and $69,x			and 		NSMantissa2+1,x
.9743		95 68		sta $68,x			sta 	NSMantissa2,x
.9745		b5 70		lda $70,x			lda		NSMantissa3,x
.9747		35 71		and $71,x			and 		NSMantissa3+1,x
.9749		95 70		sta $70,x			sta 	NSMantissa3,x
.974b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.974d		60		rts				rts
.974e						OraInteger:
.974e		fa		plx				plx
.974f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9751		15 51		ora $51,x			ora 	NSStatus+1,x
.9753		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9754		0a		asl a				asl 	a
.9755		10 05		bpl $975c			bpl 	_NotRef
.9757		48		pha				pha
.9758		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.975b		68		pla				pla
.975c						_NotRef:
.975c		0a		asl a				asl 	a
.975d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.975f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9761		15 79		ora $79,x			ora 	NSExponent+1,x
.9763		f0 03		beq $9768			beq 	_IntegerCode 				; if clear, then we have two integers
.9765		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.9768						_IntegerCode:
.9768		b5 58		lda $58,x			lda		NSMantissa0,x
.976a		15 59		ora $59,x			ora 		NSMantissa0+1,x
.976c		95 58		sta $58,x			sta 	NSMantissa0,x
.976e		b5 60		lda $60,x			lda		NSMantissa1,x
.9770		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9772		95 60		sta $60,x			sta 	NSMantissa1,x
.9774		b5 68		lda $68,x			lda		NSMantissa2,x
.9776		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9778		95 68		sta $68,x			sta 	NSMantissa2,x
.977a		b5 70		lda $70,x			lda		NSMantissa3,x
.977c		15 71		ora $71,x			ora 		NSMantissa3+1,x
.977e		95 70		sta $70,x			sta 	NSMantissa3,x
.9780		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9782		60		rts				rts
.9783						EorInteger:
.9783		fa		plx				plx
.9784		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9786		15 51		ora $51,x			ora 	NSStatus+1,x
.9788		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9789		0a		asl a				asl 	a
.978a		10 05		bpl $9791			bpl 	_NotRef
.978c		48		pha				pha
.978d		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9790		68		pla				pla
.9791						_NotRef:
.9791		0a		asl a				asl 	a
.9792		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9794		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9796		15 79		ora $79,x			ora 	NSExponent+1,x
.9798		f0 03		beq $979d			beq 	_IntegerCode 				; if clear, then we have two integers
.979a		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.979d						_IntegerCode:
.979d		b5 58		lda $58,x			lda		NSMantissa0,x
.979f		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97a1		95 58		sta $58,x			sta 	NSMantissa0,x
.97a3		b5 60		lda $60,x			lda		NSMantissa1,x
.97a5		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97a7		95 60		sta $60,x			sta 	NSMantissa1,x
.97a9		b5 68		lda $68,x			lda		NSMantissa2,x
.97ab		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97ad		95 68		sta $68,x			sta 	NSMantissa2,x
.97af		b5 70		lda $70,x			lda		NSMantissa3,x
.97b1		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97b3		95 70		sta $70,x			sta 	NSMantissa3,x
.97b5		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97b7		60		rts				rts
.97b8						WordIndirect:
.97b8		fa		plx				plx
.97b9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97bb		15 51		ora $51,x			ora 	NSStatus+1,x
.97bd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97be		0a		asl a				asl 	a
.97bf		10 05		bpl $97c6			bpl 	_NotRef
.97c1		48		pha				pha
.97c2		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97c5		68		pla				pla
.97c6						_NotRef:
.97c6		0a		asl a				asl 	a
.97c7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97c9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97cb		15 79		ora $79,x			ora 	NSExponent+1,x
.97cd		f0 03		beq $97d2			beq 	_IntegerCode 				; if clear, then we have two integers
.97cf		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.97d2						_IntegerCode:
.97d2		20 d8 96	jsr $96d8			jsr 	AddCode 					; add the two values
.97d5		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97d7		95 50		sta $50,x			sta 	NSStatus,x
.97d9		60		rts				rts
.97da						ByteIndirect:
.97da		fa		plx				plx
.97db		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97dd		15 51		ora $51,x			ora 	NSStatus+1,x
.97df		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e0		0a		asl a				asl 	a
.97e1		10 05		bpl $97e8			bpl 	_NotRef
.97e3		48		pha				pha
.97e4		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e7		68		pla				pla
.97e8						_NotRef:
.97e8		0a		asl a				asl 	a
.97e9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97eb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ed		15 79		ora $79,x			ora 	NSExponent+1,x
.97ef		f0 03		beq $97f4			beq 	_IntegerCode 				; if clear, then we have two integers
.97f1		4c 60 a4	jmp $a460			jmp 	TypeError 					; anything else, type mismatch.
.97f4						_IntegerCode:
.97f4		20 d8 96	jsr $96d8			jsr 	AddCode 					; add the two values
.97f7		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.97f9		95 50		sta $50,x			sta 	NSStatus,x
.97fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.97fc						ConvertInt16:
.97fc		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.97fe		86 60		stx $60				stx 	NSMantissa1
.9800		64 68		stz $68				stz 	NSMantissa2
.9802		64 70		stz $70				stz 	NSMantissa3
.9804		64 50		stz $50				stz 	NSStatus 					; positive integer
.9806		a2 00		ldx #$00			ldx 	#0 							; stack level
.9808		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.980a		80 00		bra $980c			bra 	ConvertInt32
.980c						ConvertInt32:
.980c		5a		phy				phy
.980d		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.980f		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9811		10 08		bpl $981b			bpl 	_CI32NotNeg
.9813		48		pha				pha
.9814		a9 2d		lda #$2d			lda 	#'-'
.9816		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9819		c8		iny				iny
.981a		68		pla				pla
.981b						_CI32NotNeg:
.981b		20 29 98	jsr $9829			jsr 	_CI32DivideConvert 			; recursive conversion
.981e		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9820		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9823		7a		ply				ply
.9824		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9826		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9828		60		rts				rts
.9829						_CI32DivideConvert:
.9829		e8		inx				inx 								; write to next slot up
.982a		20 da a2	jsr $a2da			jsr 	NSMSetByte 		 			; write the base out.
.982d		ca		dex				dex
.982e		20 57 95	jsr $9557			jsr 	Int32Divide 				; divide
.9831		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9833		48		pha				pha
.9834		20 14 95	jsr $9514			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9837		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; is it zero ?
.983a		f0 05		beq $9841			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.983c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.983e		20 29 98	jsr $9829			jsr 	_CI32DivideConvert 			; and recusrively call.
.9841						_CI32NoRecurse:
.9841		68		pla				pla 								; remainder
.9842		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9844		90 02		bcc $9848			bcc 	_CI32NotHex
.9846		69 26		adc #$26			adc 	#6+32
.9848						_CI32NotHex:
.9848		69 30		adc #$30			adc 	#48
.984a		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.984d		c8		iny				iny
.984e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.984f						PrecedenceLevel:
>984f		04					.byte	 4	; $00 <<
>9850		02					.byte	 2	; $01 <=
>9851		02					.byte	 2	; $02 <>
>9852		00					.byte	 0	; $03 !!3
>9853		00					.byte	 0	; $04 ><
>9854		02					.byte	 2	; $05 >=
>9855		04					.byte	 4	; $06 >>
>9856		00					.byte	 0	; $07 !!7
>9857		00					.byte	 0	; $08 !!8
>9858		00					.byte	 0	; $09 !!9
>9859		00					.byte	 0	; $0a !!10
>985a		00					.byte	 0	; $0b !!11
>985b		00					.byte	 0	; $0c !!12
>985c		00					.byte	 0	; $0d !!13
>985d		00					.byte	 0	; $0e !!14
>985e		00					.byte	 0	; $0f !!15
>985f		00					.byte	 0	; $10 @
>9860		00					.byte	 0	; $11 !!17
>9861		00					.byte	 0	; $12 !!18
>9862		00					.byte	 0	; $13 [
>9863		04					.byte	 4	; $14 \
>9864		00					.byte	 0	; $15 ]
>9865		01					.byte	 1	; $16 ^
>9866		00					.byte	 0	; $17 _
>9867		00					.byte	 0	; $18 `
>9868		00					.byte	 0	; $19 !!25
>9869		00					.byte	 0	; $1a !!26
>986a		00					.byte	 0	; $1b {
>986b		01					.byte	 1	; $1c |
>986c		00					.byte	 0	; $1d }
>986d		00					.byte	 0	; $1e ~
>986e		00					.byte	 0	; $1f [7m<7F>[m
>986f		00					.byte	 0	; $20
>9870		05					.byte	 5	; $21 !
>9871		00					.byte	 0	; $22 "
>9872		00					.byte	 0	; $23 #
>9873		05					.byte	 5	; $24 $
>9874		04					.byte	 4	; $25 %
>9875		01					.byte	 1	; $26 &
>9876		00					.byte	 0	; $27 '
>9877		00					.byte	 0	; $28 (
>9878		00					.byte	 0	; $29 )
>9879		04					.byte	 4	; $2a *
>987a		03					.byte	 3	; $2b +
>987b		00					.byte	 0	; $2c ,
>987c		03					.byte	 3	; $2d -
>987d		00					.byte	 0	; $2e .
>987e		04					.byte	 4	; $2f /
>987f		00					.byte	 0	; $30 0
>9880		00					.byte	 0	; $31 1
>9881		00					.byte	 0	; $32 2
>9882		00					.byte	 0	; $33 3
>9883		00					.byte	 0	; $34 4
>9884		00					.byte	 0	; $35 5
>9885		00					.byte	 0	; $36 6
>9886		00					.byte	 0	; $37 7
>9887		00					.byte	 0	; $38 8
>9888		00					.byte	 0	; $39 9
>9889		00					.byte	 0	; $3a :
>988a		00					.byte	 0	; $3b ;
>988b		02					.byte	 2	; $3c <
>988c		02					.byte	 2	; $3d =
>988d		02					.byte	 2	; $3e >
>988e		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.988f						EvaluateExpressionAt0:
.988f		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9891						EvaluateExpression:
.9891		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9893						EvaluateExpressionAtPrecedence:
.9893		48		pha				pha 								; save precedence level
.9894		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm 				; evaluate term into level X.
.9897		68		pla				pla 								; restore precedence level.
.9898						_EXPRLoop:
.9898		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.989a		b1 30		lda ($30),y			lda 	(codePtr),y
.989c		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.989e		b0 25		bcs $98c5			bcs 	_EXPRExit
.98a0		da		phx				phx 								; read the operator precedence
.98a1		aa		tax				tax
.98a2		bd 4f 98	lda $984f,x			lda 	PrecedenceLevel,x
.98a5		fa		plx				plx
.98a6		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98a8		f0 1b		beq $98c5			beq 	_EXPRExit
.98aa		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98ac		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98ae		c5 37		cmp $37				cmp 	zTemp0+1
.98b0		b0 13		bcs $98c5			bcs		_EXPRExit 					; if current >= operator exit
.98b2		48		pha				pha 								; save current precedence.
.98b3		b1 30		lda ($30),y			lda 	(codePtr),y
.98b5		c8		iny				iny
.98b6		48		pha				pha
.98b7		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98b9		e8		inx				inx 								; work out the right hand side.
.98ba		20 93 98	jsr $9893			jsr 	EvaluateExpressionAtPrecedence
.98bd		ca		dex				dex
.98be		68		pla				pla 								; get operator, call the code.
.98bf		20 c8 98	jsr $98c8			jsr 	_EXPRCaller
.98c2		68		pla				pla 								; restore precedence level
.98c3		80 d3		bra $9898			bra 	_EXPRLoop 					; and go round.
.98c5						_EXPRExit:
.98c5		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98c7		60		rts				rts
.98c8						_EXPRCaller:
.98c8		da		phx				phx 								; save on stack, first thing is to restore it
.98c9		0a		asl a				asl 	a 							; double so can use vectors into X
.98ca		aa		tax				tax
.98cb		7c 9a 8f	jmp ($8f9a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98ce						FloatingPointAdd:
.98ce		20 44 9a	jsr $9a44			jsr 	FloatPrepare 				; prepare for floats
.98d1		80 09		bra $98dc			bra 	FloatAdd
.98d3						FloatingPointSub:
.98d3		20 44 9a	jsr $9a44			jsr 	FloatPrepare 				; prepare for floats
.98d6						FloatSubtract:
.98d6		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98d8		49 80		eor #$80			eor 	#$80
.98da		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98dc						FloatAdd:
.98dc		48		pha				pha
.98dd		5a		phy				phy
.98de		20 53 9a	jsr $9a53			jsr 	NSNormalise 				; normalise S[X]
.98e1		f0 51		beq $9934			beq 	_FAReturn1
.98e3		e8		inx				inx 								; normalise S[X+1]
.98e4		20 53 9a	jsr $9a53			jsr 	NSNormalise
.98e7		ca		dex				dex
.98e8		c9 00		cmp #$00			cmp 	#0
.98ea		f0 60		beq $994c			beq 	_FAExit 					; if so, just return A
.98ec		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.98ee		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.98f0		f0 18		beq $990a			beq 	_FAExponentsEqual
.98f2		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.98f4		a8		tay				tay
.98f5		38		sec				sec 								; do a signed comparison of the exponents.
.98f6		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.98f8		50 02		bvc $98fc			bvc 	_FANoSignedChange
.98fa		49 80		eor #$80			eor 	#$80
.98fc						_FANoSignedChange:
.98fc		29 80		and #$80			and 	#$80
.98fe		10 02		bpl $9902			bpl 	_FAHaveMax
.9900		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9902						_FAHaveMax:
.9902		20 4f 99	jsr $994f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9905		e8		inx				inx
.9906		20 4f 99	jsr $994f			jsr 	_FAShiftToExponent
.9909		ca		dex				dex
.990a						_FAExponentsEqual:
.990a		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.990c		55 51		eor $51,x			eor 	NSStatus+1,x
.990e		30 0e		bmi $991e			bmi 	_FADifferentSigns
.9910		20 87 96	jsr $9687			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9913		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9915		10 35		bpl $994c			bpl 	_FAExit 					; if no, we are done.
.9917		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.991a		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.991c		80 2e		bra $994c			bra 	_FAExit
.991e						_FADifferentSigns:
.991e		20 a1 96	jsr $96a1			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9921		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9923		10 06		bpl $992b			bpl 	_FACheckZero 				; if no, check for -0
.9925		20 9a a2	jsr $a29a			jsr 	NSMNegate 					; netate result
.9928		20 a1 a2	jsr $a2a1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.992b						_FACheckZero:
.992b		20 fa a2	jsr $a2fa			jsr 	NSMIsZero	 				; check for -0
.992e		d0 1c		bne $994c			bne 	_FAExit
.9930		74 50		stz $50,x			stz 	NSStatus,x
.9932		80 18		bra $994c			bra 	_FAExit
.9934						_FAReturn1:
.9934		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9936		95 58		sta $58,x			sta 	NSMantissa0,x
.9938		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.993a		95 60		sta $60,x			sta 	NSMantissa1,x
.993c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.993e		95 68		sta $68,x			sta 	NSMantissa2,x
.9940		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9942		95 70		sta $70,x			sta 	NSMantissa3,x
.9944		b5 79		lda $79,x			lda 	NSExponent+1,x
.9946		95 78		sta $78,x			sta 	NSExponent,x
.9948		b5 51		lda $51,x			lda 	NSStatus+1,x
.994a		95 50		sta $50,x			sta 	NSStatus,x
.994c						_FAExit:
.994c		7a		ply				ply
.994d		68		pla				pla
.994e		60		rts				rts
.994f						_FAShiftToExponent:
.994f						_FAShiftToExponent2:
.994f		98		tya				tya 								; compare Y to exponent
.9950		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9952		f0 07		beq $995b			beq 	_FASEExit 					; exit if so.
.9954		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight	 			; shift the mantissa right
.9957		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9959		80 f4		bra $994f			bra 	_FAShiftToExponent2
.995b						_FASEExit:
.995b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.995c						CompareFloat:
.995c		20 d6 98	jsr $98d6			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.995f		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9961		29 f8		and #$f8			and 	#$F8
.9963		15 68		ora $68,x			ora 	NSMantissa2,x
.9965		15 70		ora $70,x			ora 	NSMantissa3,x
.9967		f0 08		beq $9971			beq 	_FCExit 					; zero, so approximately identical
.9969		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.996b		34 50		bit $50,x			bit 	NSStatus,x
.996d		10 02		bpl $9971			bpl 	_FCExit
.996f						_FCNegative:
.996f		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9971						_FCExit:
.9971		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9972						FDivideCommand:
.9972		fa		plx				plx	 								; restore stack position
.9973		20 44 9a	jsr $9a44			jsr 	FloatPrepare 				; prepare for floats
.9976						FloatDivide:
.9976		48		pha				pha
.9977		e8		inx				inx
.9978		20 53 9a	jsr $9a53			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.997b		ca		dex				dex
.997c		c9 00		cmp #$00			cmp 	#0
.997e		f0 1d		beq $999d			beq 	_FDZero
.9980		20 53 9a	jsr $9a53			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9983		f0 16		beq $999b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9985		20 78 95	jsr $9578			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9988		20 14 95	jsr $9514			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.998b		20 53 9a	jsr $9a53			jsr		NSNormalise 				; renormalise
.998e		20 08 96	jsr $9608			jsr 	CalculateSign 				; calculate result sign
.9991		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9993		38		sec				sec
.9994		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9996		38		sec				sec
.9997		e9 1e		sbc #$1e			sbc 	#30
.9999		95 78		sta $78,x			sta 	NSExponent,x
.999b						_FDExit:
.999b		68		pla				pla
.999c		60		rts				rts
.999d						_FDZero:
.999d		a9 03		lda #$03		lda	#3
.999f		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99a2						FloatFractionalPart:
.99a2		5a		phy				phy
.99a3		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99a5		29 7f		and #$7f			and 	#$7F
.99a7		95 50		sta $50,x			sta 	NSStatus,x
.99a9		20 53 9a	jsr $9a53			jsr 	NSNormalise
.99ac		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99ae		38		sec				sec
.99af		e9 e0		sbc #$e0			sbc 	#$E0
.99b1		90 29		bcc $99dc			bcc 	_FFPExit 					; already fractional
.99b3		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99b5		b0 22		bcs $99d9			bcs 	_FFPZero
.99b7		a8		tay				tay 								; put count to do in Y
.99b8		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99ba		20 de 99	jsr $99de			jsr 	_FFPPartial
.99bd		95 70		sta $70,x			sta 	NSMantissa3,x
.99bf		b5 68		lda $68,x			lda 	NSMantissa2,x
.99c1		20 de 99	jsr $99de			jsr 	_FFPPartial
.99c4		95 68		sta $68,x			sta 	NSMantissa2,x
.99c6		b5 60		lda $60,x			lda 	NSMantissa1,x
.99c8		20 de 99	jsr $99de			jsr 	_FFPPartial
.99cb		95 60		sta $60,x			sta 	NSMantissa1,x
.99cd		b5 58		lda $58,x			lda 	NSMantissa0,x
.99cf		20 de 99	jsr $99de			jsr 	_FFPPartial
.99d2		95 58		sta $58,x			sta 	NSMantissa0,x
.99d4		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; zeroed check.
.99d7		d0 03		bne $99dc			bne 	_FFPExit
.99d9						_FFPZero:
.99d9		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.99dc						_FFPExit:
.99dc		7a		ply				ply
.99dd		60		rts				rts
.99de						_FFPPartial:
.99de		c0 00		cpy #$00			cpy 	#0 							; no more to do
.99e0		f0 17		beq $99f9			beq 	_FFFPPExit
.99e2		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99e4		b0 0c		bcs $99f2			bcs 	_FFFPPWholeByte
.99e6		5a		phy				phy
.99e7						_FFFPPLeft:
.99e7		0a		asl a				asl 	a
.99e8		88		dey				dey
.99e9		d0 fc		bne $99e7			bne 	_FFFPPLeft
.99eb		7a		ply				ply
.99ec						_FFFPPRight:
.99ec		4a		lsr a				lsr 	a
.99ed		88		dey				dey
.99ee		d0 fc		bne $99ec			bne 	_FFFPPRight
.99f0		80 07		bra $99f9			bra 	_FFFPPExit
.99f2						_FFFPPWholeByte:
.99f2		98		tya				tya 								; subtract 8 from count
.99f3		38		sec				sec
.99f4		e9 08		sbc #$08			sbc 	#8
.99f6		a8		tay				tay
.99f7		a9 00		lda #$00			lda 	#0 							; and clear all
.99f9						_FFFPPExit:
.99f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.99fa						FloatIntegerPart:
.99fa		48		pha				pha
.99fb		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.99fd		f0 1d		beq $9a1c			beq 	_FIPExit 					; if so do nothing
.99ff		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; is it zero ?
.9a02		f0 15		beq $9a19			beq 	_FIPZero 					; if so return zero.
.9a04		20 53 9a	jsr $9a53			jsr 	NSNormalise 				; normalise
.9a07		f0 10		beq $9a19			beq 	_FIPZero 					; normalised to zero, exit zero
.9a09						_FIPShift:
.9a09		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a0b		10 07		bpl $9a14			bpl 	_FIPCheckZero
.9a0d		20 f1 a2	jsr $a2f1			jsr 	NSMShiftRight 				; shift mantissa right
.9a10		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a12		80 f5		bra $9a09			bra 	_FIPShift
.9a14						_FIPCheckZero:
.9a14		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; avoid -0 problem
.9a17		d0 03		bne $9a1c			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a19						_FIPZero:
.9a19		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.9a1c						_FIPExit:
.9a1c		68		pla				pla
.9a1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a1e						FloatingPointMultiply:
.9a1e		20 44 9a	jsr $9a44			jsr 	FloatPrepare 				; prepare for floats
.9a21						FloatMultiply:
.9a21		48		pha				pha
.9a22		20 53 9a	jsr $9a53			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a25		f0 18		beq $9a3f			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a27		e8		inx				inx
.9a28		20 53 9a	jsr $9a53			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a2b		ca		dex				dex
.9a2c		c9 00		cmp #$00			cmp 	#0
.9a2e		f0 0c		beq $9a3c			beq 	_FDSetZero
.9a30		20 ca 95	jsr $95ca			jsr 	MultiplyShort 				; calculate the result.
.9a33		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a35		18		clc				clc
.9a36		75 79		adc $79,x			adc 	NSExponent+1,x
.9a38		95 78		sta $78,x			sta 	NSExponent,x
.9a3a		80 03		bra $9a3f			bra 	_FDExit
.9a3c						_FDSetZero:
.9a3c		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; return 0
.9a3f						_FDExit:
.9a3f		20 53 9a	jsr $9a53			jsr 	NSNormalise 				; normalise the result
.9a42		68		pla				pla
.9a43		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a44						FloatPrepare:
.9a44		20 4f 9b	jsr $9b4f			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a47		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a49		15 51		ora $51,x			ora 	NSStatus+1,x
.9a4b		29 10		and #$10			and 	#NSBIsString
.9a4d		d0 01		bne $9a50			bne 	_FDType
.9a4f		60		rts				rts
.9a50						_FDType:
.9a50		4c 60 a4	jmp $a460			jmp 	TypeError
.9a53						NSNormalise:
.9a53		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a55		29 80		and #$80			and 	#$80
.9a57		09 08		ora #$08			ora 	#NSTFloat
.9a59		95 50		sta $50,x			sta 	NSStatus,x
.9a5b		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; if zero exit
.9a5e		d0 07		bne $9a67			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a60		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a62		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a64		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a66		60		rts				rts
.9a67						_NSNormaliseOptimise:
.9a67		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a69		d0 19		bne $9a84			bne 	_NSNormaliseLoop
.9a6b		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a6d		30 15		bmi $9a84			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a6f		95 70		sta $70,x			sta 	NSMantissa3,x
.9a71		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a73		95 68		sta $68,x			sta 	NSMantissa2,x
.9a75		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a77		95 60		sta $60,x			sta 	NSMantissa1,x
.9a79		74 58		stz $58,x			stz 	NSMantissa0,x
.9a7b		b5 78		lda $78,x			lda 	NSExponent,x
.9a7d		38		sec				sec
.9a7e		e9 08		sbc #$08			sbc 	#8
.9a80		95 78		sta $78,x			sta 	NSExponent,x
.9a82		80 e3		bra $9a67			bra 	_NSNormaliseOptimise
.9a84						_NSNormaliseLoop:
.9a84		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a86		70 07		bvs $9a8f			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a88		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; shift mantissa left
.9a8b		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9a8d		80 f5		bra $9a84			bra 	_NSNormaliseLoop
.9a8f						_NSNExit:
.9a8f		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9a92						AssignNumber:
.9a92		5a		phy				phy
.9a93		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9a95		85 36		sta $36				sta 	zTemp0
.9a97		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a99		85 37		sta $37				sta 	zTemp0+1
.9a9b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9a9d		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9a9f		95 50		sta $50,x			sta 	NSStatus,x
.9aa1		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9aa3		c9 08		cmp #$08			cmp 	#NSTFloat
.9aa5		f0 24		beq $9acb			beq 	_ANFloat
.9aa7		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9aa9		f0 03		beq $9aae			beq		_ANNotFloat
.9aab		4c 5b a4	jmp $a45b			jmp 	RangeError					; if it is, report an error.
.9aae						_ANNotFloat:
.9aae		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ab0		29 03		and #$03			and 	#3
.9ab2		d0 05		bne $9ab9			bne 	_ANByteWord
.9ab4		20 d6 9a	jsr $9ad6			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ab7		80 1b		bra $9ad4			bra 	_ANExit
.9ab9						_ANByteWord:
.9ab9		48		pha				pha 								; save count
.9aba		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9abc		92 36		sta ($36)			sta 	(zTemp0)
.9abe		68		pla				pla
.9abf		c9 01		cmp #$01			cmp	 	#1
.9ac1		f0 11		beq $9ad4			beq 	_ANExit
.9ac3		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ac5		a0 01		ldy #$01			ldy 	#1
.9ac7		91 36		sta ($36),y			sta 	(zTemp0),y
.9ac9		80 09		bra $9ad4			bra 	_ANExit
.9acb						_ANFloat:
.9acb		20 d6 9a	jsr $9ad6			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ace		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ad0		a0 04		ldy #$04			ldy 	#4
.9ad2		91 36		sta ($36),y			sta 	(zTemp0),y
.9ad4						_ANExit:
.9ad4		7a		ply				ply
.9ad5		60		rts				rts
.9ad6						_ANCopy4PackSign:
.9ad6		a0 03		ldy #$03			ldy 	#3
.9ad8		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9ada		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9adc		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9ade		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae0		88		dey				dey
.9ae1		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9ae3		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae5		88		dey				dey
.9ae6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ae8		91 36		sta ($36),y			sta 	(zTemp0),y
.9aea		88		dey				dey
.9aeb		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9aed		91 36		sta ($36),y			sta 	(zTemp0),y
.9aef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9af0						AssignString:
.9af0		5a		phy				phy
.9af1		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9af3		85 38		sta $38				sta 	zTemp1
.9af5		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9af7		85 39		sta $39				sta 	zTemp1+1
.9af9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9afb		85 36		sta $36				sta 	zTemp0
.9afd		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aff		85 37		sta $37				sta 	zTemp0+1
.9b01		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b03		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b05		f0 23		beq $9b2a			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b07		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b08		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b0a		e9 02		sbc #$02			sbc 	#2
.9b0c		85 3c		sta $3c				sta 	zsTemp
.9b0e		a0 01		ldy #$01			ldy 	#1
.9b10		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b12		e9 00		sbc #$00			sbc 	#0
.9b14		85 3d		sta $3d				sta 	zsTemp+1
.9b16		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b18						_ASGetLength:
.9b18		c8		iny				iny
.9b19		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b1b		d0 fb		bne $9b18			bne 	_ASGetLength
.9b1d		98		tya				tya 								; is this length <= current length
.9b1e		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b20		90 1e		bcc $9b40			bcc 	_ASCopyString
.9b22		f0 1c		beq $9b40			beq 	_ASCopyString
.9b24		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b26		a0 01		ldy #$01			ldy 	#1
.9b28		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b2a						_ASNewStringRequired:
.9b2a		e8		inx				inx 								; concrete the new string.
.9b2b		20 2a b4	jsr $b42a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b2e		ca		dex				dex
.9b2f		18		clc				clc
.9b30		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b32		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b34		92 36		sta ($36)			sta 	(zTemp0)
.9b36		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b38		69 00		adc #$00			adc 	#0
.9b3a		a0 01		ldy #$01			ldy 	#1
.9b3c		91 36		sta ($36),y			sta 	(zTemp0),y
.9b3e		80 0d		bra $9b4d			bra 	_ASExit
.9b40						_ASCopyString:
.9b40		a0 00		ldy #$00			ldy 	#0
.9b42						_ASCopyLoop:
.9b42		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b44		c8		iny				iny
.9b45		c8		iny				iny
.9b46		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b48		88		dey				dey
.9b49		c9 00		cmp #$00			cmp 	#0
.9b4b		d0 f5		bne $9b42			bne 	_ASCopyLoop
.9b4d						_ASExit:
.9b4d		7a		ply				ply
.9b4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b4f						DereferenceTopTwo:
.9b4f		e8		inx				inx
.9b50		20 54 9b	jsr $9b54			jsr 	Dereference 				; deref x+1
.9b53		ca		dex				dex  								; falls through to deref x
.9b54						Dereference:
.9b54		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b56		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b58		f0 48		beq $9ba2			beq 	_DRFExit 					; not a reference, so exit.
.9b5a		5a		phy				phy
.9b5b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b5d		85 36		sta $36				sta 	zTemp0
.9b5f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b61		85 37		sta $37				sta 	zTemp0+1
.9b63		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b65		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b67		95 58		sta $58,x			sta 	NSMantissa0,x
.9b69		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b6b		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b6d		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b6f		f0 0e		beq $9b7f			beq 	_DRFDereferenceTwo
.9b71		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b73		f0 2f		beq $9ba4			beq 	_DRFFull
.9b75		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b77		29 03		and #$03			and 	#3
.9b79		f0 29		beq $9ba4			beq 	_DRFFull 					; the whole word
.9b7b		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b7d		f0 06		beq $9b85			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b7f						_DRFDereferenceTwo:
.9b7f		a0 01		ldy #$01			ldy 	#1
.9b81		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b83		95 60		sta $60,x			sta 	NSMantissa1,x
.9b85						_DRFClear23:
.9b85		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b87		74 70		stz $70,x			stz 	NSMantissa3,x
.9b89		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9b8b		29 18		and #$18			and 	#NSBTypeMask
.9b8d		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9b8f		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9b91		d0 0e		bne $9ba1			bne 	_DRFNotString
.9b93		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9b95		15 60		ora $60,x			ora 	NSMantissa1,x
.9b97		d0 08		bne $9ba1			bne 	_DRFNotString
.9b99		a9 a3		lda #$a3			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9b9b		95 58		sta $58,x			sta 	NSMantissa0,x
.9b9d		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9b9f		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba1						_DRFNotString
.9ba1		7a		ply				ply 								; restore Y and exit
.9ba2						_DRFExit:
.9ba2		60		rts				rts
.9ba3						_DRFNullString:
>9ba3		00						.byte 	0
.9ba4						_DRFFull:
.9ba4		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9ba6		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ba8		95 60		sta $60,x			sta 	NSMantissa1,x
.9baa		c8		iny				iny
.9bab		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bad		95 68		sta $68,x			sta 	NSMantissa2,x
.9baf		c8		iny				iny
.9bb0		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bb2		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb4		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9bb6		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9bb8		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9bba		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bbc		f0 05		beq $9bc3			beq 	_DRFNoExponent
.9bbe		c8		iny				iny 								; if not, read the exponent as well.
.9bbf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bc1		95 78		sta $78,x			sta 	NSExponent,x
.9bc3						_DRFNoExponent:
.9bc3		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bc5		10 0a		bpl $9bd1			bpl 	_DRFExit2 					; if not, then exit.
.9bc7		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bc9		95 70		sta $70,x			sta 	NSMantissa3,x
.9bcb		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bcd		09 80		ora #$80			ora 	#NSBIsNegative
.9bcf		95 50		sta $50,x			sta 	NSStatus,x
.9bd1						_DRFExit2:
.9bd1		7a		ply				ply
.9bd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9bd3						EncodeNumberStart:
.9bd3		38		sec				sec
.9bd4		80 01		bra $9bd7			bra 	EncodeNumberContinue+1
.9bd6						EncodeNumberContinue:
.9bd6		18		clc				clc
.9bd7						EncodeNumber:
.9bd7		08		php				php 								; save reset flag.
.9bd8		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bda		f0 12		beq $9bee			beq 	_ENIsOkay
.9bdc		c9 30		cmp #$30			cmp 	#"0"
.9bde		90 04		bcc $9be4			bcc 	_ENBadNumber
.9be0		c9 3a		cmp #$3a			cmp 	#"9"+1
.9be2		90 0a		bcc $9bee			bcc 	_ENIsOkay
.9be4						_ENBadNumber:
.9be4		28		plp				plp 								; throw saved reset
.9be5		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9be8		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9bea		f0 7b		beq $9c67			beq 	_ENConstructFinal
.9bec						_ENFail:
.9bec		18		clc				clc 								; not allowed
.9bed		60		rts				rts
.9bee						_ENIsOkay:
.9bee		28		plp				plp 								; are we restarting
.9bef		90 15		bcc $9c06			bcc 	_ENNoRestart
.9bf1						_ENStartEncode:
.9bf1		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9bf3		f0 0c		beq $9c01			beq 	_ENFirstDP
.9bf5		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9bf7		20 da a2	jsr $a2da			jsr 	NSMSetByte 					; in single byte mode.
.9bfa		a9 01		lda #$01			lda 	#ESTA_Low
.9bfc						_ENExitChange:
.9bfc		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9bff		38		sec				sec
.9c00		60		rts				rts
.9c01						_ENFirstDP:
.9c01		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; clear integer part
.9c04		80 3c		bra $9c42			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c06						_ENNoRestart:
.9c06		48		pha				pha 								; save digit or DP on stack.
.9c07		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c0a		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c0c		f0 09		beq $9c17			beq  	_ESTALowState
.9c0e		c9 02		cmp #$02			cmp 	#ESTA_High
.9c10		f0 26		beq $9c38			beq 	_ESTAHighState
.9c12		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c14		f0 38		beq $9c4e			beq 	_ESTADecimalState
>9c16		db						.byte 	$DB 						; causes a break in the emulator
.9c17						_ESTALowState:
.9c17		68		pla				pla 								; get value back
.9c18		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c1a		f0 26		beq $9c42			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c1c		29 0f		and #$0f			and 	#15 						; make digit
.9c1e		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c21		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c23		0a		asl a				asl 	a
.9c24		0a		asl a				asl 	a
.9c25		75 58		adc $58,x			adc 	NSMantissa0,x
.9c27		0a		asl a				asl 	a
.9c28		6d 06 04	adc $0406			adc 	digitTemp
.9c2b		95 58		sta $58,x			sta 	NSMantissa0,x
.9c2d		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c2f		90 05		bcc $9c36			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c31		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c33		8d 05 04	sta $0405			sta 	encodeState
.9c36						_ESTANoSwitch:
.9c36		38		sec				sec
.9c37		60		rts				rts
.9c38						_ESTAHighState:
.9c38		68		pla				pla 								; get value back
.9c39		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c3b		f0 05		beq $9c42			beq 	_ESTASwitchFloat
.9c3d		20 9b 9c	jsr $9c9b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c40		38		sec				sec
.9c41		60		rts				rts
.9c42						_ESTASwitchFloat:
.9c42		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c45		e8		inx				inx 								; zero the decimal additive.
.9c46		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.9c49		ca		dex				dex
.9c4a		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c4c		80 ae		bra $9bfc			bra 	_ENExitChange
.9c4e						_ESTADecimalState:
.9c4e		68		pla				pla 								; digit.
.9c4f		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c51		f0 99		beq $9bec			beq 	_ENFail
.9c53		e8		inx				inx 								; put digit into fractional part of X+1
.9c54		20 9b 9c	jsr $9c9b			jsr 	ESTAShiftDigitIntoMantissa
.9c57		ca		dex				dex
.9c58		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c5b		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c5e		c9 0b		cmp #$0b			cmp 	#11
.9c60		f0 02		beq $9c64			beq 	_ESTADSFail
.9c62		38		sec				sec
.9c63		60		rts				rts
.9c64						_ESTADSFail:
.9c64		4c 5b a4	jmp $a45b			jmp 	RangeError
.9c67						_ENConstructFinal:
.9c67		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c6a		f0 2d		beq $9c99			beq 	_ENCFExit 					; no decimals
.9c6c		5a		phy				phy
.9c6d		0a		asl a				asl 	a 							; x 4 and CLC
.9c6e		0a		asl a				asl 	a
.9c6f		6d 07 04	adc $0407			adc 	decimalCount
.9c72		a8		tay				tay
.9c73		b9 1a a4	lda $a41a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c76		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c78		b9 1b a4	lda $a41b,y			lda 	DecimalScalarTable-5+1,y
.9c7b		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c7d		b9 1c a4	lda $a41c,y			lda 	DecimalScalarTable-5+2,y
.9c80		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9c82		b9 1d a4	lda $a41d,y			lda 	DecimalScalarTable-5+3,y
.9c85		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9c87		b9 1e a4	lda $a41e,y			lda 	DecimalScalarTable-5+4,y
.9c8a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9c8c		a9 08		lda #$08			lda 	#NSTFloat
.9c8e		95 52		sta $52,x			sta 	NSStatus+2,x
.9c90		7a		ply				ply
.9c91		e8		inx				inx 								; multiply decimal const by decimal scalar
.9c92		20 21 9a	jsr $9a21			jsr 	FloatMultiply
.9c95		ca		dex				dex
.9c96		20 dc 98	jsr $98dc			jsr 	FloatAdd 					; add to integer part.
.9c99						_ENCFExit:
.9c99		18		clc				clc 								; reject the digit.
.9c9a		60		rts				rts
.9c9b						ESTAShiftDigitIntoMantissa:
.9c9b		29 0f		and #$0f			and 	#15 						; save digit
.9c9d		48		pha				pha
.9c9e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9ca0		48		pha				pha
.9ca1		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ca3		48		pha				pha
.9ca4		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ca6		48		pha				pha
.9ca7		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ca9		48		pha				pha
.9caa		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 2
.9cad		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 4
.9cb0		18		clc				clc 								; pop mantissa and add
.9cb1		68		pla				pla
.9cb2		75 58		adc $58,x			adc 	NSMantissa0,x
.9cb4		95 58		sta $58,x			sta 	NSMantissa0,x
.9cb6		68		pla				pla
.9cb7		75 60		adc $60,x			adc 	NSMantissa1,x
.9cb9		95 60		sta $60,x			sta 	NSMantissa1,x
.9cbb		68		pla				pla
.9cbc		75 68		adc $68,x			adc 	NSMantissa2,x
.9cbe		95 68		sta $68,x			sta 	NSMantissa2,x
.9cc0		68		pla				pla
.9cc1		75 70		adc $70,x			adc 	NSMantissa3,x
.9cc3		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cc5		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 10
.9cc8		68		pla				pla 								; add digit
.9cc9		18		clc				clc
.9cca		75 58		adc $58,x			adc 	NSMantissa0,x
.9ccc		95 58		sta $58,x			sta 	NSMantissa0,x
.9cce		90 0a		bcc $9cda			bcc 	_ESTASDExit
.9cd0		f6 60		inc $60,x			inc 	NSMantissa1,x
.9cd2		d0 06		bne $9cda			bne 	_ESTASDExit
.9cd4		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cd6		d0 02		bne $9cda			bne 	_ESTASDExit
.9cd8		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cda						_ESTASDExit:
.9cda		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cdb						EvaluateTerm:
.9cdb		b1 30		lda ($30),y			lda 	(codePtr),y
.9cdd		30 18		bmi $9cf7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9cdf		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ce1		b0 6c		bcs $9d4f			bcs 	_ETVariable
.9ce3		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ce5		90 6b		bcc $9d52			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ce7		c9 3a		cmp #$3a			cmp 	#'9'+1
.9ce9		b0 67		bcs $9d52			bcs 	_ETPuncUnary
.9ceb		20 d3 9b	jsr $9bd3			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9cee						_ETNumber:
.9cee		c8		iny				iny 								; keep encoding until we have the numbers
.9cef		b1 30		lda ($30),y			lda 	(codePtr),y
.9cf1		20 d6 9b	jsr $9bd6			jsr 	EncodeNumberContinue
.9cf4		b0 f8		bcs $9cee			bcs 	_ETNumber 					; go back if accepted.
.9cf6		60		rts				rts
.9cf7						_ETCheckUnary:
.9cf7		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9cf9		f0 3f		beq $9d3a			beq 	_ETString
.9cfb		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9cfd		f0 12		beq $9d11			beq 	_ETHexConstant
.9cff		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d01		90 0b		bcc $9d0e			bcc 	_ETSyntaxError
.9d03		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1
.9d05		b0 07		bcs $9d0e			bcs 	_ETSyntaxError
.9d07		da		phx				phx 								; push X on the stack
.9d08		0a		asl a				asl 	a 							; put vector x 2 into X
.9d09		aa		tax				tax
.9d0a		c8		iny				iny 								; consume unary function token
.9d0b		7c 1a 90	jmp ($901a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d0e						_ETSyntaxError:
.9d0e		4c 56 a4	jmp $a456			jmp 	SyntaxError
.9d11						_ETHexConstant:
.9d11		c8		iny				iny 								; skip #
.9d12		c8		iny				iny 								; skip count
.9d13		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; clear result
.9d16						_ETHLoop:
.9d16		b1 30		lda ($30),y			lda 	(codePtr),y
.9d18		c8		iny				iny 								; and consume
.9d19		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d1b		f0 1c		beq $9d39			beq 	_ETHExit
.9d1d		48		pha				pha 								; save on stack.
.9d1e		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 2
.9d21		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 4
.9d24		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 8
.9d27		20 e7 a2	jsr $a2e7			jsr 	NSMShiftLeft 				; x 16
.9d2a		68		pla				pla 								; ASCII
.9d2b		c9 41		cmp #$41			cmp 	#'A'
.9d2d		90 02		bcc $9d31			bcc 	_ETHNotChar
.9d2f		e9 07		sbc #$07			sbc 	#7
.9d31						_ETHNotChar:
.9d31		29 0f		and #$0f			and 	#15 						; digit now
.9d33		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d35		95 58		sta $58,x			sta 	NSMantissa0,x
.9d37		80 dd		bra $9d16			bra 	_ETHLoop 					; go round.
.9d39						_ETHExit:
.9d39		60		rts				rts
.9d3a						_ETString:
.9d3a		c8		iny				iny 								; look at length
.9d3b		b1 30		lda ($30),y			lda 	(codePtr),y
.9d3d		48		pha				pha
.9d3e		c8		iny				iny 								; first character
.9d3f		20 52 aa	jsr $aa52			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d42		68		pla				pla 								; restore count and save
.9d43		85 36		sta $36				sta 	zTemp0
.9d45		98		tya				tya 								; add length to Y to skip it.
.9d46		18		clc				clc
.9d47		65 36		adc $36				adc 	zTemp0
.9d49		a8		tay				tay
.9d4a		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d4c		95 50		sta $50,x			sta 	NSStatus,x
.9d4e		60		rts				rts
.9d4f						_ETVariable:
.9d4f		4c a4 9d	jmp $9da4			jmp 	VariableHandler
.9d52						_ETPuncUnary:
.9d52		c8		iny				iny 								; consume the unary character
.9d53		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d55		f0 2b		beq $9d82			beq 	_ETUnaryNegate
.9d57		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9d59		f0 36		beq $9d91			beq 	_ETDereference
.9d5b		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d5d		f0 3e		beq $9d9d			beq 	_ETParenthesis
.9d5f		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d61		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d63		f0 06		beq $9d6b			beq 	_ETIndirection
.9d65		e6 36		inc $36				inc 	zTemp0
.9d67		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d69		d0 a3		bne $9d0e			bne 	_ETSyntaxError
.9d6b						_ETIndirection:
.9d6b		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d6d		1a		inc a				inc 	a
.9d6e		48		pha				pha
.9d6f		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm				; evaluate the term
.9d72		20 54 9b	jsr $9b54			jsr 	Dereference 				; dereference it.
.9d75		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d77		d0 06		bne $9d7f			bne 	_ETTypeMismatch
.9d79		68		pla				pla 								; indirection 1-2
.9d7a		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d7c		95 50		sta $50,x			sta 	NSStatus,x
.9d7e		60		rts				rts
.9d7f						_ETTypeMismatch:
.9d7f		4c 60 a4	jmp $a460			jmp 	TypeError
.9d82						_ETUnaryNegate:
.9d82		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm				; evaluate the term
.9d85		20 54 9b	jsr $9b54			jsr 	Dereference 				; dereference it.
.9d88		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9d8a		29 10		and #$10			and 	#NSTString
.9d8c		d0 f1		bne $9d7f			bne 	_ETTypeMismatch
.9d8e		4c 9a a2	jmp $a29a			jmp 	NSMNegate  					; just toggles the sign bit.
.9d91						_ETDereference:
.9d91		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm				; evaluate the term
.9d94		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9d96		29 20		and #$20			and 	#NSBIsReference
.9d98		f0 e5		beq $9d7f			beq 	_ETTypeMismatch
.9d9a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9d9c		60		rts				rts
.9d9d						_ETParenthesis:
.9d9d		20 91 98	jsr $9891			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9da0		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; check for )
.9da3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9da4						VariableHandler:
.9da4		b1 30		lda ($30),y			lda 	(codePtr),y
.9da6		18		clc				clc
.9da7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9da9		85 37		sta $37				sta 	zTemp0+1
.9dab		c8		iny				iny
.9dac		b1 30		lda ($30),y			lda 	(codePtr),y
.9dae		85 36		sta $36				sta 	zTemp0
.9db0		c8		iny				iny
.9db1		18		clc				clc									; copy variable address+3 to mantissa
.9db2		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9db4		95 58		sta $58,x			sta 	NSMantissa0,x
.9db6		a5 37		lda $37				lda 	zTemp0+1
.9db8		69 00		adc #$00			adc 	#0
.9dba		95 60		sta $60,x			sta 	NSMantissa1,x
.9dbc		74 68		stz $68,x			stz 	NSMantissa2,x
.9dbe		74 70		stz $70,x			stz 	NSMantissa3,x
.9dc0		74 78		stz $78,x			stz 	NSExponent,x
.9dc2		5a		phy				phy
.9dc3		a0 02		ldy #$02			ldy 	#2 							; read type
.9dc5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc7		7a		ply				ply
.9dc8		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9dca		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dcc		95 50		sta $50,x			sta 	NSStatus,x
.9dce		29 04		and #$04			and 	#NSBIsArray
.9dd0		d0 01		bne $9dd3			bne 	_VHArray
.9dd2		60		rts				rts
.9dd3						_VHArray:
.9dd3		e8		inx				inx
.9dd4		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9dd7		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9dd9		95 51		sta $51,x			sta 	NSStatus+1,x
.9ddb		b1 30		lda ($30),y			lda 	(codePtr),y
.9ddd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ddf		d0 06		bne $9de7			bne 	_VHNoSecondIndex
.9de1		c8		iny				iny 								; skip the comma
.9de2		e8		inx				inx
.9de3		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9de6		ca		dex				dex
.9de7						_VHNoSecondIndex:
.9de7		ca		dex				dex 								; set X back.
.9de8		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; and check the right bracket.
.9deb		5a		phy				phy 								; save position
.9dec		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9dee		85 3e		sta $3e				sta 	zaTemp
.9df0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df2		85 3f		sta $3f				sta 	zaTemp+1
.9df4		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9df6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9df8		f0 5d		beq $9e57			beq 	_VHBadArray
.9dfa		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9dfc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dfe		f0 02		beq $9e02			beq 	_VHHas2Mask
.9e00		a9 ff		lda #$ff			lda 	#$FF
.9e02						_VHHas2Mask:
.9e02		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e04		f0 4c		beq $9e52			beq 	_VHBadIndex
.9e06		0a		asl a				asl 	a 							; carry will be set if a second index
.9e07		90 08		bcc $9e11			bcc 	_VHCheckFirstIndex
.9e09		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e0b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e0d		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e0f		90 41		bcc $9e52			bcc 	_VHBadIndex
.9e11						_VHCheckFirstIndex:
.9e11		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e13		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e15		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e17		90 39		bcc $9e52			bcc 	_VHBadIndex
.9e19		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e1b		64 37		stz $37				stz 	zTemp0+1
.9e1d		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e1f		30 0e		bmi $9e2f			bmi 	_VHNoMultiply
.9e21		da		phx				phx
.9e22		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e24		48		pha				pha
.9e25		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e27		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e29		1a		inc a				inc 	a 							; add 1 for zero base
.9e2a		fa		plx				plx
.9e2b		20 83 a2	jsr $a283			jsr 	Multiply8x8 				; calculate -> Z0
.9e2e		fa		plx				plx
.9e2f						_VHNoMultiply:
.9e2f		18		clc				clc
.9e30		a5 36		lda $36				lda 	zTemp0
.9e32		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e34		85 36		sta $36				sta 	zTemp0
.9e36		a5 37		lda $37				lda 	zTemp0+1
.9e38		69 00		adc #$00			adc 	#0
.9e3a		85 37		sta $37				sta 	zTemp0+1
.9e3c		b5 50		lda $50,x			lda 	NSStatus,x
.9e3e		20 b2 87	jsr $87b2			jsr 	ScaleByBaseType
.9e41		18		clc				clc
.9e42		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e44		65 36		adc $36				adc 	zTemp0
.9e46		95 58		sta $58,x			sta 	NSMantissa0,x
.9e48		a0 01		ldy #$01			ldy 	#1
.9e4a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e4c		65 37		adc $37				adc 	zTemp0+1
.9e4e		95 60		sta $60,x			sta 	NSMantissa1,x
.9e50		7a		ply				ply 								; restore position
.9e51		60		rts				rts
.9e52						_VHBadIndex:
.9e52		a9 17		lda #$17		lda	#23
.9e54		4c 8d 93	jmp $938d		jmp	ErrorHandler
.9e57						_VHBadArray:
.9e57		a9 18		lda #$18		lda	#24
.9e59		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e5c						AbsUnary:
.9e5c		fa		plx				plx 								; restore stack pos
.9e5d		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; get a float or int
.9e60		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9e63		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e65		29 7f		and #$7f			and 	#$7F
.9e67		95 50		sta $50,x			sta 	NSStatus,x
.9e69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e6a						AllocUnary:
.9e6a		fa		plx				plx 								; restore stack pos
.9e6b		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger		; get bytes required.
.9e6e		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9e71		da		phx				phx 								; save X/Y
.9e72		5a		phy				phy
.9e73		8a		txa				txa 								; copy X into Y
.9e74		a8		tay				tay
.9e75		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e78		aa		tax				tax
.9e79		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e7c		20 89 9e	jsr $9e89			jsr 	AllocateXABytes 			; allocate memory
.9e7f		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9e82		8a		txa				txa 	 							; typing is 16 bit integer.
.9e83		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9e86		7a		ply				ply
.9e87		fa		plx				plx
.9e88		60		rts				rts
.9e89						AllocateXABytes:
.9e89		5a		phy				phy
.9e8a		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9e8d		84 36		sty $36				sty 	zTemp0
.9e8f		5a		phy				phy
.9e90		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9e93		84 37		sty $37				sty 	zTemp0+1
.9e95		5a		phy				phy
.9e96		18		clc				clc 								; add to low memory pointer
.9e97		6d 0c 04	adc $040c			adc 	lowMemPtr
.9e9a		8d 0c 04	sta $040c			sta 	lowMemPtr
.9e9d		8a		txa				txa
.9e9e		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9ea1		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9ea4		b0 2f		bcs $9ed5			bcs 	CISSMemory
.9ea6		20 c7 9e	jsr $9ec7			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ea9						_ClearMemory:
.9ea9		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9eac		c5 36		cmp $36				cmp 	zTemp0
.9eae		d0 07		bne $9eb7			bne 	_CMClearNext
.9eb0		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9eb3		c5 37		cmp $37				cmp 	zTemp0+1
.9eb5		f0 0c		beq $9ec3			beq 	_CMExit
.9eb7						_CMClearNext:
.9eb7		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9eb9		92 36		sta ($36)			sta 	(zTemp0)
.9ebb		e6 36		inc $36				inc 	zTemp0
.9ebd		d0 ea		bne $9ea9			bne 	_ClearMemory
.9ebf		e6 37		inc $37				inc		zTemp0+1
.9ec1		80 e6		bra $9ea9			bra 	_ClearMemory
.9ec3						_CMExit:
.9ec3		fa		plx				plx
.9ec4		68		pla				pla
.9ec5		7a		ply				ply
.9ec6		60		rts				rts
.9ec7						CheckIdentifierStringSpace:
.9ec7		48		pha				pha
.9ec8		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9ecb		18		clc				clc
.9ecc		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ece		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9ed1		b0 02		bcs $9ed5			bcs 	CISSMemory
.9ed3		68		pla				pla
.9ed4		60		rts				rts
.9ed5						CISSMemory:
.9ed5		a9 06		lda #$06		lda	#6
.9ed7		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9eda						AscUnary:
.9eda		fa		plx				plx 								; restore stack pos
.9edb		20 30 a2	jsr $a230			jsr 	EvaluateString 				; get a string
.9ede		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9ee0		20 da a2	jsr $a2da			jsr 	NSMSetByte 					; ASC("") will return zero.
.9ee3		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9ee6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ee7						FracUnary:
.9ee7		fa		plx				plx 								; restore stack pos
.9ee8		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; get a float or int
.9eeb		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9eee		b5 50		lda $50,x			lda 	NSStatus,x
.9ef0		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ef2		f0 04		beq $9ef8			beq 	_IUZero
.9ef4		20 a2 99	jsr $99a2			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ef7		60		rts				rts
.9ef8						_IUZero:
.9ef8		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.9efb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9efc						IntUnary:
.9efc		fa		plx				plx 								; restore stack pos
.9efd		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; get a float or int
.9f00		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9f03		b5 50		lda $50,x			lda 	NSStatus,x
.9f05		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f07		f0 03		beq $9f0c			beq 	_IUExit
.9f09		20 fa 99	jsr $99fa			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f0c						_IUExit:
.9f0c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f0d						LenUnary:
.9f0d		fa		plx				plx 								; restore stack pos
.9f0e		20 30 a2	jsr $a230			jsr 	EvaluateString 				; get a string
.9f11		5a		phy				phy
.9f12		a0 00		ldy #$00			ldy 	#0 							; find length
.9f14						_LenFind:
.9f14		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f16		f0 06		beq $9f1e			beq 	_LenExit
.9f18		c8		iny				iny
.9f19		d0 f9		bne $9f14			bne 	_LenFind
.9f1b		4c 5b a4	jmp $a45b			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f1e						_LenExit:
.9f1e		98		tya				tya		 							; return length
.9f1f		20 da a2	jsr $a2da			jsr 	NSMSetByte
.9f22		7a		ply				ply
.9f23		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9f26		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f27						Unary_Min:
.9f27		a9 01		lda #$01			lda 	#1
.9f29		80 02		bra $9f2d			bra 	UnaryMinMaxMain
.9f2b						Unary_Max:
.9f2b		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f2d						UnaryMinMaxMain:
.9f2d		fa		plx				plx 								; get index on number stack
.9f2e		48		pha				pha 								; save comparator
.9f2f		20 1d a2	jsr $a21d			jsr 	EvaluateValue 				; get the first value.
.9f32						_UMMMLoop:
.9f32		b1 30		lda ($30),y			lda 	(codePtr),y
.9f34		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f36		f0 22		beq $9f5a			beq 	_UMMMDone
.9f38		20 7c 93	jsr $937c			jsr 	CheckComma 					; must be a comma
.9f3b		e8		inx				inx
.9f3c		20 1d a2	jsr $a21d			jsr 	EvaluateValue
.9f3f		ca		dex				dex
.9f40		20 bb a2	jsr $a2bb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f43		e8		inx				inx
.9f44		20 bb a2	jsr $a2bb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f47		e8		inx				inx
.9f48		20 44 94	jsr $9444			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f4b		ca		dex				dex
.9f4c		ca		dex				dex
.9f4d		85 36		sta $36				sta 	zTemp0 						; save required result
.9f4f		68		pla				pla 								; get and save comparator
.9f50		48		pha				pha
.9f51		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f53		d0 dd		bne $9f32			bne 	_UMMMLoop
.9f55		20 5d 9f	jsr $9f5d			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f58		80 d8		bra $9f32			bra 	_UMMMLoop
.9f5a						_UMMMDone:
.9f5a		68		pla				pla 								; throw the comparator
.9f5b		c8		iny				iny 								; skip )
.9f5c		60		rts				rts
.9f5d						ExpCopyAboveDown:
.9f5d		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f5f		95 50		sta $50,x			sta 	NSStatus,x
.9f61		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f63		95 78		sta $78,x			sta 	NSExponent,x
.9f65		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f67		95 58		sta $58,x			sta 	NSMantissa0,x
.9f69		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f6b		95 60		sta $60,x			sta 	NSMantissa1,x
.9f6d		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f6f		95 68		sta $68,x			sta 	NSMantissa2,x
.9f71		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f73		95 70		sta $70,x			sta 	NSMantissa3,x
.9f75		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f76						Unary_Not:
.9f76		fa		plx				plx
.9f77		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; get integer
.9f7a		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9f7d		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; zero mantissa ?
.9f80		f0 04		beq $9f86			beq 	_NotZero
.9f82		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.9f85		60		rts				rts
.9f86						_NotZero:
.9f86		4c fa 93	jmp $93fa			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9f89						PeekByteUnary:
.9f89		a9 01		lda #$01			lda 	#1
.9f8b		80 0a		bra $9f97			bra 	PeekUnary
.9f8d						PeekWUnary:
.9f8d		a9 02		lda #$02			lda 	#2
.9f8f		80 06		bra $9f97			bra 	PeekUnary
.9f91						PeekLUnary:
.9f91		a9 03		lda #$03			lda 	#3
.9f93		80 02		bra $9f97			bra 	PeekUnary
.9f95						PeekDUnary:
.9f95		a9 04		lda #$04			lda 	#4
.9f97						PeekUnary:
.9f97		fa		plx				plx 								; restore position.
.9f98		48		pha				pha 								; save count to copy on stack
.9f99		20 58 a2	jsr $a258			jsr		Evaluate16BitInteger 		; address as constant.
.9f9c		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9f9f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fa1		85 36		sta $36				sta 	zTemp0
.9fa3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fa5		85 37		sta $37				sta 	zTemp0+1
.9fa7		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; clear the result to zero.
.9faa		68		pla				pla 								; count in zTemp2
.9fab		85 3a		sta $3a				sta 	zTemp2
.9fad		da		phx				phx 								; save stack position and offset of read
.9fae		5a		phy				phy
.9faf		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fb1						_PULoop:
.9fb1		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fb3		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fb5		c8		iny				iny 								; next byte to write
.9fb6		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fb7		18		clc				clc
.9fb8		69 08		adc #$08			adc 	#MathStackSize
.9fba		aa		tax				tax
.9fbb		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fbd		d0 f2		bne $9fb1			bne 	_PULoop
.9fbf		7a		ply				ply 								; restore stack/code pos and exit.
.9fc0		fa		plx				plx
.9fc1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9fc2						Unary_Random:
.9fc2		fa		plx				plx
.9fc3		20 34 a0	jsr $a034			jsr 	Random32Bit 				; get a random number
.9fc6		20 1d a0	jsr $a01d			jsr 	URCopyToMantissa  			; put in mantissa
.9fc9		b1 30		lda ($30),y			lda 	(codePtr),y
.9fcb		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9fcd		f0 08		beq $9fd7			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9fcf		e8		inx				inx
.9fd0		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9fd3		ca		dex				dex
.9fd4		20 4c 95	jsr $954c			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9fd7						_URNoModulus:
.9fd7		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9fd9		74 78		stz $78,x			stz 	NSExponent,x
.9fdb		20 74 93	jsr $9374			jsr 	CheckRightBracket
.9fde		60		rts				rts
.9fdf						Unary_Rnd:
.9fdf		fa		plx				plx
.9fe0		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; number to use.
.9fe3		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; closing bracket
.9fe6		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9fe9		f0 26		beq $a011			beq 	_URCopySeed
.9feb		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9fed		10 1f		bpl $a00e			bpl 	_URDontSeed
.9fef		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ff1		49 17		eor #$17			eor 	#$17
.9ff3		8d 08 04	sta $0408			sta 	randomSeed+0
.9ff6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ff8		49 a5		eor #$a5			eor 	#$A5
.9ffa		8d 09 04	sta $0409			sta 	randomSeed+1
.9ffd		b5 68		lda $68,x			lda 	NSMantissa2,x
.9fff		49 c2		eor #$c2			eor 	#$C2
.a001		8d 0a 04	sta $040a			sta 	randomSeed+2
.a004		b5 70		lda $70,x			lda 	NSMantissa3,x
.a006		49 9d		eor #$9d			eor 	#$9D
.a008		8d 0b 04	sta $040b			sta 	randomSeed+3
.a00b		20 34 a0	jsr $a034			jsr 	Random32Bit
.a00e						_URDontSeed:
.a00e		20 34 a0	jsr $a034			jsr 	Random32Bit 				; generate a number
.a011						_URCopySeed:
.a011		20 1d a0	jsr $a01d			jsr 	URCopyToMantissa 			; copy into mantissa
.a014		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a016		95 78		sta $78,x			sta 	NSExponent,x
.a018		a9 08		lda #$08			lda 	#NSTFloat
.a01a		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a01c		60		rts				rts
.a01d						URCopyToMantissa:
.a01d		ad 08 04	lda $0408			lda 	randomSeed+0
.a020		95 58		sta $58,x			sta 	NSMantissa0,x
.a022		ad 09 04	lda $0409			lda 	randomSeed+1
.a025		95 60		sta $60,x			sta 	NSMantissa1,x
.a027		ad 0a 04	lda $040a			lda 	randomSeed+2
.a02a		95 68		sta $68,x			sta 	NSMantissa2,x
.a02c		ad 0b 04	lda $040b			lda 	randomSeed+3
.a02f		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a031		95 70		sta $70,x			sta 	NSMantissa3,x
.a033		60		rts				rts
.a034						Random32Bit:
.a034		5a		phy				phy
.a035		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a037		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.a03a		d0 03		bne $a03f			bne 	_Random1
.a03c		a8		tay				tay 								; if so do it 256 times
.a03d		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a03f						_Random1:
.a03f		0a		asl a				asl 	a 							; LSFR RNG
.a040		2e 09 04	rol $0409			rol 	randomSeed+1
.a043		2e 0a 04	rol $040a			rol 	randomSeed+2
.a046		2e 0b 04	rol $040b			rol 	randomSeed+3
.a049		90 02		bcc $a04d			bcc 	_Random2
.a04b		49 c5		eor #$c5			eor 	#$C5
.a04d						_Random2:
.a04d		88		dey				dey
.a04e		d0 ef		bne $a03f			bne 	_Random1
.a050		8d 08 04	sta $0408			sta 	randomSeed+0
.a053		7a		ply				ply
.a054		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a055						SgnUnary:
.a055		fa		plx				plx 								; restore stack pos
.a056		20 26 a2	jsr $a226			jsr 	EvaluateNumber 				; get a float or int
.a059		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a05c		20 fa a2	jsr $a2fa			jsr 	NSMIsZero 					; if zero
.a05f		f0 0e		beq $a06f			beq 	_SGZero  					; return Int Zero
.a061		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a063		48		pha				pha
.a064		a9 01		lda #$01			lda 	#1 							; set to 1
.a066		20 da a2	jsr $a2da			jsr 	NSMSetByte
.a069		68		pla				pla
.a06a		29 80		and #$80			and		#$80 						; copy the sign byte out
.a06c		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a06e		60		rts				rts
.a06f		20 d8 a2	jsr $a2d8	_SGZero:jsr 	NSMSetZero
.a072		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a073						ValUnary:
.a073		fa		plx				plx 								; restore stack pos
.a074		20 89 a0	jsr $a089			jsr 	ValMainCode 				; do the main val() code
.a077		b0 01		bcs $a07a			bcs 	_VUError 					; couldn't convert
.a079		60		rts				rts
.a07a						_VUError:
.a07a		4c 60 a4	jmp $a460			jmp 	TypeError
.a07d						IsValUnary:
.a07d		fa		plx				plx 								; restore stack pos
.a07e		20 89 a0	jsr $a089			jsr 	ValMainCode 				; do the main val() code
.a081		b0 03		bcs $a086			bcs 	_VUBad
.a083		4c fa 93	jmp $93fa			jmp 	ReturnTrue
.a086						_VUBad:
.a086		4c 05 94	jmp $9405			jmp 	ReturnFalse
.a089						ValMainCode:
.a089		20 30 a2	jsr $a230			jsr 	EvaluateString 				; get a string
.a08c		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; check right bracket present
.a08f						ValEvaluateZTemp0:
.a08f		5a		phy				phy
.a090		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a092		f0 17		beq $a0ab			beq 	_VMCFail2
.a094		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a096		48		pha				pha 								; save first character
.a097		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a099		d0 01		bne $a09c			bne 	_VMCStart
.a09b		c8		iny				iny 								; skip over -
.a09c						_VMCStart:
.a09c		38		sec				sec 								; initialise first time round.
.a09d						_VMCNext:
.a09d		c8		iny				iny 								; pre-increment
.a09e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a0a0		f0 0c		beq $a0ae			beq 	_VMCSuccess 				; successful.
.a0a2		20 d7 9b	jsr $9bd7			jsr 	EncodeNumber 				; send it to the number-builder
.a0a5		90 03		bcc $a0aa			bcc 	_VMCFail 					; if failed, give up.
.a0a7		18		clc				clc 								; next time round, countinue
.a0a8		80 f3		bra $a09d			bra 	_VMCNext
.a0aa						_VMCFail:
.a0aa		68		pla				pla
.a0ab						_VMCFail2:
.a0ab		7a		ply				ply
.a0ac		38		sec				sec
.a0ad		60		rts				rts
.a0ae						_VMCSuccess:
.a0ae		a9 00		lda #$00			lda 	#0 							; construct final
.a0b0		20 d7 9b	jsr $9bd7			jsr 	EncodeNumber 				; by sending a duff value.
.a0b3		68		pla				pla 								; if it was -ve
.a0b4		c9 2d		cmp #$2d			cmp 	#"-"
.a0b6		d0 03		bne $a0bb			bne 	_VMCNotNegative
.a0b8		20 9a a2	jsr $a29a			jsr		NSMNegate 					; negate it.
.a0bb						_VMCNotNegative:
.a0bb		7a		ply				ply
.a0bc		18		clc				clc
.a0bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a0be						ChrUnary:
.a0be		fa		plx				plx 								; restore stack pos
.a0bf		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a0c2		48		pha				pha
.a0c3		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a0c6		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a0c8		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.a0cb		68		pla				pla 								; write number to it
.a0cc		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite
.a0cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0d0						SpcUnary:
.a0d0		fa		plx				plx 								; restore stack pos
.a0d1		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger			; get value
.a0d4		5a		phy				phy
.a0d5		48		pha				pha 								; save count
.a0d6		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.a0d9		7a		ply				ply 								; to do count in Y
.a0da						_SpcLoop:
.a0da		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a0dc		f0 08		beq $a0e6			beq 	_SpcExit
.a0de		a9 20		lda #$20			lda 	#32
.a0e0		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite
.a0e3		88		dey				dey
.a0e4		80 f4		bra $a0da			bra 	_SpcLoop
.a0e6						_SpcExit:
.a0e6		7a		ply				ply
.a0e7		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a0ea		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a0eb						Unary_Str:
.a0eb		fa		plx				plx
.a0ec		20 26 a2	jsr $a226			jsr 	EvaluateNumber  			; get number
.a0ef		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; closing bracket
.a0f2		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a0f4		20 0d a1	jsr $a10d			jsr 	ConvertNumberToString 		; do the conversion.
.a0f7		a9 21		lda #$21			lda		#33 						; create buffer
.a0f9		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate 			; allocate memory
.a0fc		da		phx				phx  								; copy the converted string into the buffer.
.a0fd		a2 00		ldx #$00			ldx 	#0
.a0ff						_USCopy:
.a0ff		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a102		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite
.a105		e8		inx				inx
.a106		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a109		d0 f4		bne $a0ff			bne 	_USCopy
.a10b		fa		plx				plx
.a10c		60		rts				rts
.a10d						ConvertNumberToString:
.a10d		5a		phy				phy 								; save code position
.a10e		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.a111		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.a114		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a116		10 09		bpl $a121			bpl 	_CNTSNotNegative
.a118		29 7f		and #$7f			and 	#$7F 						; make +ve
.a11a		95 50		sta $50,x			sta 	NSStatus,x
.a11c		a9 2d		lda #$2d			lda 	#"-"
.a11e		20 82 a1	jsr $a182			jsr 	WriteDecimalBuffer
.a121						_CNTSNotNegative:
.a121		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a123		f0 12		beq $a137			beq 	_CNTSNotFloat
.a125		e8		inx				inx 								; round up so we don't get too many 6.999999
.a126		a9 01		lda #$01			lda 	#1
.a128		20 da a2	jsr $a2da			jsr 	NSMSetByte
.a12b		ca		dex				dex
.a12c		b5 78		lda $78,x			lda		NSExponent,x
.a12e		95 79		sta $79,x			sta 	NSExponent+1,x
.a130		a9 08		lda #$08			lda 	#NSTFloat
.a132		95 51		sta $51,x			sta 	NSStatus+1,x
.a134		20 dc 98	jsr $98dc			jsr 	FloatAdd
.a137						_CNTSNotFloat:
.a137		20 64 a1	jsr $a164			jsr 	MakePlusTwoString 			; do the integer part.
.a13a		20 a2 99	jsr $99a2			jsr 	FloatFractionalPart 		; get the fractional part
.a13d		20 53 9a	jsr $9a53			jsr 	NSNormalise					; normalise , exit if zero
.a140		f0 20		beq $a162			beq 	_CNTSExit
.a142		a9 2e		lda #$2e			lda 	#"."
.a144		20 82 a1	jsr $a182			jsr 	WriteDecimalBuffer 			; write decimal place
.a147						_CNTSDecimal:
.a147		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.a14a		30 16		bmi $a162			bmi 	_CNTSExit
.a14c		e8		inx				inx 								; x 10.0
.a14d		a9 0a		lda #$0a			lda 	#10
.a14f		20 da a2	jsr $a2da			jsr 	NSMSetByte
.a152		a9 08		lda #$08			lda 	#NSTFloat
.a154		95 50		sta $50,x			sta 	NSStatus,x
.a156		ca		dex				dex
.a157		20 21 9a	jsr $9a21			jsr 	FloatMultiply
.a15a		20 64 a1	jsr $a164			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a15d		20 a2 99	jsr $99a2			jsr 	FloatFractionalPart 		; get the fractional part
.a160		80 e5		bra $a147			bra 	_CNTSDecimal 				; keep going.
.a162						_CNTSExit:
.a162		7a		ply				ply
.a163		60		rts				rts
.a164						MakePlusTwoString:
.a164		da		phx				phx
.a165		20 bb a2	jsr $a2bb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a168		e8		inx				inx 								; access it
.a169		e8		inx				inx
.a16a		20 fa 99	jsr $99fa			jsr 	FloatIntegerPart 			; make it an integer
.a16d		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a16f		20 0c 98	jsr $980c			jsr 	ConvertInt32
.a172		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a174						_MPTSCopy:
.a174		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a177		20 82 a1	jsr $a182			jsr 	WriteDecimalBuffer
.a17a		e8		inx				inx
.a17b		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a17e		d0 f4		bne $a174			bne 	_MPTSCopy
.a180		fa		plx				plx
.a181		60		rts				rts
.a182						WriteDecimalBuffer:
.a182		da		phx				phx
.a183		ae 15 04	ldx $0415			ldx 	dbOffset
.a186		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.a189		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.a18c		ee 15 04	inc $0415			inc 	dbOffset
.a18f		fa		plx				plx
.a190		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a191						Unary_Left:
.a191		fa		plx				plx
.a192		18		clc				clc 								; only one parameter
.a193		20 f6 a1	jsr $a1f6			jsr 	SubstringInitial 			; set up.
.a196		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a198		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a19a		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a19c		80 25		bra $a1c3			bra 	SubstringMain
.a19e						Unary_Right:
.a19e		fa		plx				plx
.a19f		18		clc				clc 								; only one parameter
.a1a0		20 f6 a1	jsr $a1f6			jsr 	SubstringInitial 			; set up.
.a1a3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1a5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1a7		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1a9		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1ab		b0 02		bcs $a1af			bcs 	_URNotUnderflow
.a1ad		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1af						_URNotUnderflow:
.a1af		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1b1		80 10		bra $a1c3			bra 	SubstringMain
.a1b3						Unary_Mid:
.a1b3		fa		plx				plx
.a1b4		38		sec				sec 								; two parameters
.a1b5		20 f6 a1	jsr $a1f6			jsr 	SubstringInitial 			; set up.
.a1b8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1ba		f0 04		beq $a1c0			beq 	_UMError
.a1bc		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1be		80 03		bra $a1c3			bra 	SubstringMain
.a1c0						_UMError:
.a1c0		4c 65 a4	jmp $a465			jmp 	ArgumentError
.a1c3						SubstringMain:
.a1c3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1c5		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1c7		b0 27		bcs $a1f0			bcs 	_SSMNull 					; if so, return an empty string.
.a1c9		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1cb		f0 23		beq $a1f0			beq 	_SSMNull 					; return empty string.
.a1cd		18		clc				clc 								; add the offset +1 to the address and
.a1ce		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a1d0		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1d2		85 36		sta $36				sta 	zTemp0
.a1d4		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a1d6		69 00		adc #$00			adc 	#0
.a1d8		85 37		sta $37				sta 	zTemp0+1
.a1da						_SSMNoCarry:
.a1da		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a1dc		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate 			; allocate that many characters
.a1df		5a		phy				phy 								; save Y
.a1e0		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a1e2						_SSMCopy:
.a1e2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a1e4		f0 08		beq $a1ee			beq 	_SSMEString 				; no more to copy
.a1e6		20 e0 b4	jsr $b4e0			jsr 	StringTempWrite 			; and write it out.
.a1e9		c8		iny				iny
.a1ea		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a1ec		d0 f4		bne $a1e2			bne 	_SSMCopy
.a1ee						_SSMEString:
.a1ee		7a		ply				ply
.a1ef						_SSMExit:
.a1ef		60		rts				rts
.a1f0						_SSMNull:
.a1f0		a9 00		lda #$00			lda 	#0
.a1f2		20 a7 b4	jsr $b4a7			jsr 	StringTempAllocate
.a1f5		60		rts				rts
.a1f6						SubstringInitial:
.a1f6		da		phx				phx 								; save initial stack position
.a1f7		08		php				php 								; save carry on stack indicating 2 parameters
.a1f8		20 30 a2	jsr $a230			jsr 	EvaluateString 				; get a string
.a1fb		5a		phy				phy 								; calculate length to exponent.
.a1fc		a0 ff		ldy #$ff			ldy 	#$FF
.a1fe						_SIFindLength:
.a1fe		c8		iny				iny
.a1ff		b1 36		lda ($36),y			lda 	(zTemp0),y
.a201		d0 fb		bne $a1fe			bne 	_SIFindLength
.a203		98		tya				tya
.a204		95 78		sta $78,x			sta 	NSExponent,x
.a206		7a		ply				ply
.a207		e8		inx				inx
.a208		20 7c 93	jsr $937c			jsr 	CheckComma 					; comma next
.a20b		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get next parameter
.a20e		28		plp				plp 								; is it the last parameter ?
.a20f		90 07		bcc $a218			bcc 	_SSIExit 					; if so, exit.
.a211		e8		inx				inx
.a212		20 7c 93	jsr $937c			jsr 	CheckComma 					; comma next
.a215		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get last parameter
.a218						_SSIExit:
.a218		fa		plx				plx
.a219		20 74 93	jsr $9374			jsr 	CheckRightBracket 			; check closing bracket
.a21c		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a21d						EvaluateValue:
.a21d		48		pha				pha
.a21e		20 91 98	jsr $9891			jsr		EvaluateExpression 			; expression
.a221		20 54 9b	jsr $9b54			jsr 	Dereference					; derefernce it
.a224		68		pla				pla
.a225		60		rts				rts
.a226						EvaluateNumber:
.a226		20 1d a2	jsr $a21d			jsr 	EvaluateValue 				; get a value
.a229		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a22b		29 10		and #$10			and 	#NSBIsString
.a22d		d0 13		bne $a242			bne 	HelperTypeError
.a22f		60		rts				rts
.a230						EvaluateString:
.a230		20 1d a2	jsr $a21d			jsr 	EvaluateValue 				; get a value
.a233		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a235		29 10		and #$10			and 	#NSBIsString
.a237		f0 09		beq $a242			beq 	HelperTypeError
.a239						CopyAddressToTemp0:
.a239		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a23b		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a23d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a23f		85 37		sta $37				sta 	zTemp0+1
.a241		60		rts				rts
.a242						HelperTypeError:
.a242		4c 60 a4	jmp $a460			jmp 	TypeError
.a245						EvaluateInteger:
.a245		20 26 a2	jsr $a226			jsr 	EvaluateNumber
.a248		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a24a		d0 09		bne $a255			bne 	HelperValueError 			; if not, it's a float.
.a24c		60		rts				rts
.a24d						EvaluateUnsignedInteger:
.a24d		20 45 a2	jsr $a245			jsr 	EvaluateInteger 			; check integer is +ve
.a250		b5 50		lda $50,x			lda 	NSStatus,x
.a252		30 01		bmi $a255			bmi 	HelperValueError
.a254		60		rts				rts
.a255						HelperValueError:
.a255		4c 65 a4	jmp $a465			jmp 	ArgumentError
.a258						Evaluate16BitInteger:
.a258		20 4d a2	jsr $a24d			jsr	 	EvaluateUnsignedInteger		; get integer
.a25b		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a25d		15 68		ora $68,x			ora 	NSMantissa2,x
.a25f		d0 f4		bne $a255			bne 	HelperValueError
.a261		60		rts				rts
.a262						Evaluate16BitIntegerSigned:
.a262		20 45 a2	jsr $a245			jsr	 	EvaluateInteger				; get integer
.a265		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a267		15 68		ora $68,x			ora 	NSMantissa2,x
.a269		d0 ea		bne $a255			bne 	HelperValueError
.a26b		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a26d		10 03		bpl $a272			bpl 	_EISNotSigned
.a26f		20 a1 a2	jsr $a2a1			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a272						_EISNotSigned:
.a272		60		rts				rts
.a273						Evaluate8BitInteger:
.a273		20 4d a2	jsr $a24d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a276		d0 dd		bne $a255			bne 	HelperValueError
.a278		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a27a		15 68		ora $68,x			ora 	NSMantissa2,x
.a27c		15 60		ora $60,x			ora 	NSMantissa1,x
.a27e		d0 d5		bne $a255			bne 	HelperValueError
.a280		b5 58		lda $58,x			lda 	NSMantissa0,x
.a282		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a283						Multiply8x8:
.a283		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a284		85 36		sta $36			  	sta 	zTemp0
.a286		86 37		stx $37				stx 	zTemp0+1
.a288		a9 00		lda #$00			lda 	#0
.a28a		a2 08		ldx #$08			ldx 	#8
.a28c						_M88Loop:
.a28c		90 03		bcc $a291			bcc 	_M88NoAdd
.a28e		18		clc				clc
.a28f		65 37		adc $37				adc 	zTemp0+1
.a291						_M88NoAdd:
.a291		6a		ror a				ror 	a
.a292		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a294		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a295		d0 f5		bne $a28c			bne 	_M88Loop
.a297		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a299		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a29a						NSMNegate:
.a29a		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a29c		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a29e		95 50		sta $50,x			sta 	NSStatus,x
.a2a0		60		rts				rts
.a2a1						NSMNegateMantissa:
.a2a1		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2a2		a9 00		lda #$00			lda 	#0
.a2a4		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2a6		95 58		sta $58,x			sta 	NSMantissa0,x
.a2a8		a9 00		lda #$00			lda 	#0
.a2aa		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2ac		95 60		sta $60,x			sta 	NSMantissa1,x
.a2ae		a9 00		lda #$00			lda 	#0
.a2b0		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2b2		95 68		sta $68,x			sta 	NSMantissa2,x
.a2b4		a9 00		lda #$00			lda 	#0
.a2b6		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2b8		95 70		sta $70,x			sta 	NSMantissa3,x
.a2ba		60		rts				rts
.a2bb						NSMShiftUpTwo:
.a2bb		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2bd		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2c1		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2c3		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2c5		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2c7		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2c9		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2cb		b5 78		lda $78,x			lda 	NSExponent,x
.a2cd		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a2cf		b5 50		lda $50,x			lda 	NSStatus,x
.a2d1		95 52		sta $52,x			sta 	NSStatus+2,x
.a2d3		60		rts				rts
.a2d4						NSMSetZeroMantissaOnly:
.a2d4		a9 00		lda #$00			lda 	#0
.a2d6		80 06		bra $a2de			bra 	NSMSetMantissa
.a2d8						NSMSetZero:
.a2d8		a9 00		lda #$00			lda 	#0
.a2da						NSMSetByte:
.a2da		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a2dc		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a2de						NSMSetMantissa:
.a2de		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a2e0		74 60		stz $60,x			stz 	NSMantissa1,x
.a2e2		74 68		stz $68,x			stz 	NSMantissa2,x
.a2e4		74 70		stz $70,x			stz 	NSMantissa3,x
.a2e6		60		rts				rts
.a2e7						NSMShiftLeft:
.a2e7		18		clc				clc
.a2e8						NSMRotateLeft:
.a2e8		36 58		rol $58,x			rol 	NSMantissa0,x
.a2ea		36 60		rol $60,x			rol		NSMantissa1,x
.a2ec		36 68		rol $68,x			rol		NSMantissa2,x
.a2ee		36 70		rol $70,x			rol		NSMantissa3,x
.a2f0		60		rts				rts
.a2f1						NSMShiftRight:
.a2f1		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a2f3		76 68		ror $68,x			ror		NSMantissa2,x
.a2f5		76 60		ror $60,x			ror		NSMantissa1,x
.a2f7		76 58		ror $58,x			ror		NSMantissa0,x
.a2f9		60		rts				rts
.a2fa						NSMIsZero:
.a2fa		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2fc		15 68		ora $68,x			ora		NSMantissa2,x
.a2fe		15 60		ora $60,x			ora		NSMantissa1,x
.a300		15 58		ora $58,x			ora		NSMantissa0,x
.a302		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a303						TickHandler:
.a303		5a		phy				phy 								; need to preserve Y
.a304		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a307		7a		ply				ply
.a308		60		rts				rts
.066b						LastTick:
>066b								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a309						Assemble_ora:
.a309		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a30c		01					.byte $01
.a30d						Assemble_and:
.a30d		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a310		21					.byte $21
.a311						Assemble_eor:
.a311		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a314		41					.byte $41
.a315						Assemble_adc:
.a315		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a318		61					.byte $61
.a319						Assemble_sta:
.a319		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a31c		81					.byte $81
.a31d						Assemble_lda:
.a31d		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a320		a1					.byte $a1
.a321						Assemble_cmp:
.a321		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a324		c1					.byte $c1
.a325						Assemble_sbc:
.a325		20 c8 81	jsr $81c8		jsr	AssembleGroup1
>a328		e1					.byte $e1
.a329						Assemble_asl:
.a329		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a32c		02					.byte $02
>a32d		75					.byte $75
.a32e						Assemble_rol:
.a32e		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a331		22					.byte $22
>a332		75					.byte $75
.a333						Assemble_lsr:
.a333		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a336		42					.byte $42
>a337		75					.byte $75
.a338						Assemble_ror:
.a338		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a33b		62					.byte $62
>a33c		75					.byte $75
.a33d						Assemble_stx:
.a33d		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a340		82					.byte $82
>a341		50					.byte $50
.a342						Assemble_ldx:
.a342		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a345		a2					.byte $a2
>a346		d0					.byte $d0
.a347						Assemble_dec:
.a347		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a34a		c2					.byte $c2
>a34b		55					.byte $55
.a34c						Assemble_inc:
.a34c		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a34f		e2					.byte $e2
>a350		55					.byte $55
.a351						Assemble_stz:
.a351		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a354		60					.byte $60
>a355		44					.byte $44
.a356						Assemble_bit:
.a356		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a359		20					.byte $20
>a35a		55					.byte $55
.a35b						Assemble_sty:
.a35b		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a35e		80					.byte $80
>a35f		54					.byte $54
.a360						Assemble_ldy:
.a360		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a363		a0					.byte $a0
>a364		d5					.byte $d5
.a365						Assemble_cpy:
.a365		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a368		c0					.byte $c0
>a369		d4					.byte $d4
.a36a						Assemble_cpx:
.a36a		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a36d		e0					.byte $e0
>a36e		d0					.byte $d0
.a36f						Assemble_tsb:
.a36f		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a372		00					.byte $00
>a373		50					.byte $50
.a374						Assemble_trb:
.a374		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a377		10					.byte $10
>a378		50					.byte $50
.a379						Assemble_jsr:
.a379		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a37c		14					.byte $14
>a37d		10					.byte $10
.a37e						Assemble_jmp:
.a37e		20 cf 81	jsr $81cf		jsr	AssembleGroup2
>a381		40					.byte $40
>a382		10					.byte $10
.a383						Assemble_bpl:
.a383		20 20 82	jsr $8220		jsr	AssembleGroup3
>a386		10					.byte $10
.a387						Assemble_bmi:
.a387		20 20 82	jsr $8220		jsr	AssembleGroup3
>a38a		30					.byte $30
.a38b						Assemble_bvc:
.a38b		20 20 82	jsr $8220		jsr	AssembleGroup3
>a38e		50					.byte $50
.a38f						Assemble_bvs:
.a38f		20 20 82	jsr $8220		jsr	AssembleGroup3
>a392		70					.byte $70
.a393						Assemble_bcc:
.a393		20 20 82	jsr $8220		jsr	AssembleGroup3
>a396		90					.byte $90
.a397						Assemble_bcs:
.a397		20 20 82	jsr $8220		jsr	AssembleGroup3
>a39a		b0					.byte $b0
.a39b						Assemble_bne:
.a39b		20 20 82	jsr $8220		jsr	AssembleGroup3
>a39e		d0					.byte $d0
.a39f						Assemble_beq:
.a39f		20 20 82	jsr $8220		jsr	AssembleGroup3
>a3a2		f0					.byte $f0
.a3a3						Assemble_bra:
.a3a3		20 20 82	jsr $8220		jsr	AssembleGroup3
>a3a6		80					.byte $80
.a3a7						Assemble_brk:
.a3a7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3aa		00					.byte $00
.a3ab						Assemble_php:
.a3ab		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ae		08					.byte $08
.a3af						Assemble_clc:
.a3af		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3b2		18					.byte $18
.a3b3						Assemble_plp:
.a3b3		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3b6		28					.byte $28
.a3b7						Assemble_sec:
.a3b7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ba		38					.byte $38
.a3bb						Assemble_rti:
.a3bb		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3be		40					.byte $40
.a3bf						Assemble_pha:
.a3bf		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3c2		48					.byte $48
.a3c3						Assemble_cli:
.a3c3		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3c6		58					.byte $58
.a3c7						Assemble_phy:
.a3c7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ca		5a					.byte $5a
.a3cb						Assemble_rts:
.a3cb		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ce		60					.byte $60
.a3cf						Assemble_pla:
.a3cf		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3d2		68					.byte $68
.a3d3						Assemble_sei:
.a3d3		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3d6		78					.byte $78
.a3d7						Assemble_ply:
.a3d7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3da		7a					.byte $7a
.a3db						Assemble_dey:
.a3db		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3de		88					.byte $88
.a3df						Assemble_txa:
.a3df		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3e2		8a					.byte $8a
.a3e3						Assemble_tya:
.a3e3		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3e6		98					.byte $98
.a3e7						Assemble_txs:
.a3e7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ea		9a					.byte $9a
.a3eb						Assemble_tay:
.a3eb		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3ee		a8					.byte $a8
.a3ef						Assemble_tax:
.a3ef		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3f2		aa					.byte $aa
.a3f3						Assemble_clv:
.a3f3		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3f6		b8					.byte $b8
.a3f7						Assemble_tsx:
.a3f7		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3fa		ba					.byte $ba
.a3fb						Assemble_iny:
.a3fb		20 54 82	jsr $8254		jsr	AssembleGroup4
>a3fe		c8					.byte $c8
.a3ff						Assemble_dex:
.a3ff		20 54 82	jsr $8254		jsr	AssembleGroup4
>a402		ca					.byte $ca
.a403						Assemble_cld:
.a403		20 54 82	jsr $8254		jsr	AssembleGroup4
>a406		d8					.byte $d8
.a407						Assemble_phx:
.a407		20 54 82	jsr $8254		jsr	AssembleGroup4
>a40a		da					.byte $da
.a40b						Assemble_stp:
.a40b		20 54 82	jsr $8254		jsr	AssembleGroup4
>a40e		db					.byte $db
.a40f						Assemble_inx:
.a40f		20 54 82	jsr $8254		jsr	AssembleGroup4
>a412		e8					.byte $e8
.a413						Assemble_nop:
.a413		20 54 82	jsr $8254		jsr	AssembleGroup4
>a416		ea					.byte $ea
.a417						Assemble_sed:
.a417		20 54 82	jsr $8254		jsr	AssembleGroup4
>a41a		f8					.byte $f8
.a41b						Assemble_plx:
.a41b		20 54 82	jsr $8254		jsr	AssembleGroup4
>a41e		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a41f						DecimalScalarTable:
>a41f		66 66 66 66				.dword $66666666 ; 0.1
>a423		de					.byte $de
>a424		1f 85 eb 51				.dword $51eb851f ; 0.01
>a428		db					.byte $db
>a429		4c 37 89 41				.dword $4189374c ; 0.001
>a42d		d8					.byte $d8
>a42e		ac 8b db 68				.dword $68db8bac ; 0.0001
>a432		d4					.byte $d4
>a433		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a437		d1					.byte $d1
>a438		83 de 1b 43				.dword $431bde83 ; 1e-06
>a43c		ce					.byte $ce
>a43d		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a441		ca					.byte $ca
>a442		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a446		c7					.byte $c7
>a447		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a44b		c4					.byte $c4
>a44c		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a450		c0					.byte $c0
>a451		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a455		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a456						SyntaxError:
.a456		a9 02		lda #$02		lda	#2
.a458		4c 8d 93	jmp $938d		jmp	ErrorHandler
.a45b						RangeError:
.a45b		a9 04		lda #$04		lda	#4
.a45d		4c 8d 93	jmp $938d		jmp	ErrorHandler
.a460						TypeError:
.a460		a9 05		lda #$05		lda	#5
.a462		4c 8d 93	jmp $938d		jmp	ErrorHandler
.a465						ArgumentError:
.a465		a9 07		lda #$07		lda	#7
.a467		4c 8d 93	jmp $938d		jmp	ErrorHandler
.a46a						NotDoneError:
.a46a		a9 0c		lda #$0c		lda	#12
.a46c		4c 8d 93	jmp $938d		jmp	ErrorHandler
.a46f						ErrorText:
>a46f		42 72 65 61 6b 00			.text	"Break",0
>a475		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a47d		72 72 6f 72 00
>a482		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a48a		20 62 79 20 7a 65 72 6f 00
>a493		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a49b		61 6e 67 65 00
>a4a0		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4a8		6d 61 74 63 68 00
>a4ae		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4b6		65 6d 6f 72 79 00
>a4bc		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4c4		61 72 67 75 6d 65 6e 74 00
>a4cd		53 74 6f 70 00				.text	"Stop",0
>a4d2		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4da		6f 6f 20 6c 6f 6e 67 00
>a4e2		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4ea		6e 20 66 61 69 6c 65 64 00
>a4f3		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a4fb		61 74 61 00
>a4ff		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a507		65 6e 74 65 64 00
>a50d		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a515		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a521		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a529		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a536		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a53e		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a54b		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a553		68 6f 75 74 20 57 68 69 6c 65 00
>a55e		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a566		68 6f 75 74 20 46 6f 72 00
>a56f		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a577		61 63 6b 20 66 75 6c 6c 00
>a580		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a588		75 63 74 75 72 65 00
>a58f		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a597		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5a4		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5ac		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5ba		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5c2		7a 65 00
>a5c5		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5cd		79 20 69 6e 64 65 78 00
>a5d5		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a5dd		74 20 64 65 63 6c 61 72 65 64 00
>a5e8		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a5f0		20 66 6f 75 6e 64 00
>a5f7		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a5ff		65 72 72 6f 72 00
>a605		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a60d		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd72		09 09 30 36 2f 30 31 2f			.text 9,9,"06/01/23 25"
>dd7a		32 33 20 32 35

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a613						RectangleCommand:
.a613		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a615		80 02		bra $a619			bra 	ShapeDrawCmd
.a617						CircleCommand:
.a617		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a619						ShapeDrawCmd:
.a619		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a61c						ShapeDraw:
.a61c		0d 6d 06	ora $066d			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a61f		4c 97 a6	jmp $a697			jmp 	ExecuteGraphicCommand	 	; and complete
.a622						SpriteCommand:
.a622		a2 00		ldx #$00			ldx 	#0
.a624		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get image number.
.a627		5a		phy				phy
.a628		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a62a		a6 58		ldx $58				ldx 	NSMantissa0
.a62c		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a62e		b0 0d		bcs $a63d			bcs 	_SCRange
.a630		a0 ff		ldy #$ff			ldy 	#255
.a632		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a635		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a637		7a		ply				ply
.a638		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a63b		80 5a		bra $a697			bra 	ExecuteGraphicCommand
.a63d						_SCRange:
.a63d		4c 5b a4	jmp $a45b			jmp 	RangeError
.a640						ImageCommand:
.a640		a2 00		ldx #$00			ldx 	#0
.a642		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get image number.
.a645		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a648						ImageRunDraw:
.a648		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a64a		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a64d		ad 73 06	lda $0673			lda 	gxDrawScale
.a650		0a		asl a				asl 	a
.a651		0a		asl a				asl 	a
.a652		0a		asl a				asl 	a
.a653		a8		tay				tay
.a654		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a656		a6 58		ldx $58				ldx 	NSMantissa0
.a658		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a65b		60		rts				rts
.a65c						TextCommand:
.a65c		a2 00		ldx #$00			ldx 	#0
.a65e		20 30 a2	jsr $a230			jsr 	EvaluateString 				; get text
.a661		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a664						TextRunDraw:
.a664		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a666		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a669		a0 00		ldy #$00			ldy 	#0
.a66b						_IRDLoop:
.a66b		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a66d		85 37		sta $37				sta 	zTemp0+1
.a66f		a5 58		lda $58				lda 	NSMantissa0
.a671		85 36		sta $36				sta 	zTemp0
.a673		b1 36		lda ($36),y			lda 	(zTemp0),y
.a675		f0 13		beq $a68a			beq 	_IRDExit
.a677		5a		phy				phy									; save string pos
.a678		48		pha				pha 								; save char
.a679		ad 73 06	lda $0673			lda 	gxDrawScale 				; get scale
.a67c		0a		asl a				asl 	a
.a67d		0a		asl a				asl 	a
.a67e		0a		asl a				asl 	a
.a67f		a8		tay				tay
.a680		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a682		fa		plx				plx 								; char to draw
.a683		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a686		7a		ply				ply 								; restore string pos
.a687		c8		iny				iny
.a688		90 e1		bcc $a66b			bcc 	_IRDLoop 					; go back if no error.
.a68a						_IRDExit:
.a68a		60		rts				rts
.a68b						PlotCommand:
.a68b		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a68d		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a690		80 05		bra $a697			bra 	ExecuteGraphicCommand
.a692						LineCommand:
.a692		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a694		20 a3 a6	jsr $a6a3			jsr 	RunGraphicsCommand
.a697						ExecuteGraphicCommand:
.a697		0d 6c 06	ora $066c			ora 	gxCommandID 				; make a full command
.a69a		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a69d		b0 01		bcs $a6a0			bcs 	_EGCError
.a69f		60		rts				rts
.a6a0						_EGCError:
.a6a0		4c 56 a4	jmp $a456			jmp 	SyntaxError
.a6a3						RunGraphicsCommand:
.a6a3		8d 6c 06	sta $066c			sta 	gxCommandID					; save TODO graphics command.
.a6a6		68		pla				pla 								; pop handler address
.a6a7		fa		plx				plx
.a6a8		1a		inc a				inc 	a
.a6a9		d0 01		bne $a6ac			bne 	_RGINoCarry
.a6ab		e8		inx				inx
.a6ac						_RGINoCarry:
.a6ac		8d 71 06	sta $0671			sta 	gxHandler
.a6af		8e 72 06	stx $0672			stx 	gxHandler+1
.a6b2						_RGICommandLoop:
.a6b2		b1 30		lda ($30),y			lda 	(codePtr),y
.a6b4		c8		iny				iny
.a6b5		c9 d6		cmp #$d6			cmp 	#KWD_TO						; is it TO x,y
.a6b7		f0 53		beq $a70c			beq 	_RGI_To
.a6b9		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a6bb		f0 55		beq $a712			beq 	_RGI_Here
.a6bd		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a6bf		f0 3d		beq $a6fe			beq 	_RGI_Exit
.a6c1		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a6c3		f0 39		beq $a6fe			beq 	_RGI_Exit
.a6c5		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a6c7		f0 3e		beq $a707			beq 	_RGI_Frame
.a6c9		c9 d2		cmp #$d2			cmp 	#KWD_SOLID
.a6cb		f0 33		beq $a700			beq 	_RGI_Solid
.a6cd		c9 b5		cmp #$b5			cmp 	#KWD_BY 					; by offset
.a6cf		f0 4b		beq $a71c			beq 	_RGI_By
.a6d1		c9 bf		cmp #$bf			cmp 	#KWD_FROM 					; from
.a6d3		f0 17		beq $a6ec			beq 	_RGI_Move2
.a6d5		c9 bc		cmp #$bc			cmp 	#KWD_DIM 					; dim (set scale)
.a6d7		f0 62		beq $a73b			beq 	_RGI_Dim
.a6d9		c9 ba		cmp #$ba			cmp 	#KWD_COLOUR 				; colour or Color
.a6db		f0 74		beq $a751			beq 	_RGI_Colour
.a6dd		c9 b9		cmp #$b9			cmp 	#KWD_COLOR
.a6df		f0 70		beq $a751			beq 	_RGI_Colour
.a6e1		ae 6c 06	ldx $066c			ldx 	gxCommandID
.a6e4		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a6e6		d0 03		bne $a6eb			bne 	_RGI_Move 					; move
.a6e8		4c 79 a7	jmp $a779			jmp		_RGI_SpriteInstructions
.a6eb						_RGI_Move:
.a6eb		88		dey				dey 								; unpick get.
.a6ec						_RGI_Move2:
.a6ec		20 9f a7	jsr $a79f			jsr 	GCGetCoordinatePair 		; move to here
.a6ef		20 c6 a7	jsr $a7c6			jsr 	GCCopyPairToStore 			; save
.a6f2		5a		phy				phy
.a6f3		20 bc a7	jsr $a7bc			jsr 	GCLoadAXY 					; load in
.a6f6		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a6f8		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6fb		7a		ply				ply
.a6fc		80 b4		bra $a6b2			bra 	_RGICommandLoop 			; and go round
.a6fe						_RGI_Exit:
.a6fe		88		dey				dey 								; unpick : / EOL
.a6ff		60		rts				rts
.a700						_RGI_Solid:
.a700		a9 02		lda #$02			lda 	#2
.a702		8d 6d 06	sta $066d			sta 	gxFillSolid
.a705		80 ab		bra $a6b2			bra 	_RGICommandLoop
.a707						_RGI_Frame:
.a707		9c 6d 06	stz $066d			stz 	gxFillSolid
.a70a		80 a6		bra $a6b2			bra 	_RGICommandLoop
.a70c						_RGI_To:
.a70c		20 9f a7	jsr $a79f			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a70f		20 c6 a7	jsr $a7c6			jsr 	GCCopyPairToStore
.a712						_RGI_Here:
.a712		5a		phy				phy
.a713		20 bc a7	jsr $a7bc			jsr 	GCLoadAXY 					; load it into AXY
.a716		20 76 a7	jsr $a776			jsr 	_RGICallHandler 			; go do whatever it is.
.a719		7a		ply				ply
.a71a		80 96		bra $a6b2			bra 	_RGICommandLoop 			; and go round
.a71c						_RGI_By:
.a71c		20 ac a7	jsr $a7ac			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a71f		18		clc				clc
.a720		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a722		6d 6e 06	adc $066e			adc 	gxXPos
.a725		8d 6e 06	sta $066e			sta 	gxXPos
.a728		a5 61		lda $61				lda 	NSMantissa1+1
.a72a		6d 6f 06	adc $066f			adc 	gxXPos+1
.a72d		8d 6f 06	sta $066f			sta 	gxXPos+1
.a730		a5 5a		lda $5a				lda 	NSMantissa0+2
.a732		18		clc				clc
.a733		6d 70 06	adc $0670			adc 	gxYPos
.a736		8d 70 06	sta $0670			sta 	gxYPos
.a739		80 d7		bra $a712			bra 	_RGI_Here
.a73b						_RGI_Dim:
.a73b		a2 01		ldx #$01			ldx	 	#1
.a73d		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger
.a740		a5 59		lda $59				lda 	NSMantissa0+1
.a742		c9 00		cmp #$00			cmp 	#0
.a744		f0 2d		beq $a773			beq 	_RGIRange
.a746		c9 09		cmp #$09			cmp 	#8+1
.a748		b0 29		bcs $a773			bcs		_RGIRange
.a74a		3a		dec a				dec 	a
.a74b		8d 73 06	sta $0673			sta 	gxDrawScale
.a74e		4c b2 a6	jmp $a6b2			jmp 	_RGICommandLoop
.a751						_RGI_Colour:
.a751		a2 01		ldx #$01			ldx 	#1 							; colour
.a753		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger
.a756		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a758		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.a75b		b1 30		lda ($30),y			lda 	(codePtr),y
.a75d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a75f		d0 04		bne $a765			bne 	_RGICDefaultMode
.a761		c8		iny				iny
.a762		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger
.a765						_RGICDefaultMode:
.a765		5a		phy				phy
.a766		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a768		a6 59		ldx $59				ldx 	NSMantissa0+1
.a76a		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a76c		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a76f		7a		ply				ply
.a770		4c b2 a6	jmp $a6b2			jmp 	_RGICommandLoop 			; and go round
.a773						_RGIRange:
.a773		4c 5b a4	jmp $a45b			jmp 	RangeError
.a776						_RGICallHandler:
.a776		6c 71 06	jmp ($0671)			jmp 	(gxHandler)
.a779						_RGI_SpriteInstructions:
.a779		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a77b		f0 07		beq $a784			beq 	_RGISpriteOff
.a77d		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a77f		f0 13		beq $a794			beq 	_RGISetImage
.a781		4c eb a6	jmp $a6eb			jmp 	_RGI_Move
.a784						_RGISpriteOff:
.a784		5a		phy				phy
.a785		a0 01		ldy #$01			ldy 	#1
.a787		a2 00		ldx #$00			ldx 	#0
.a789						_RGIDoCommandLoop:
.a789		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a78b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a78e		7a		ply				ply
.a78f		b0 e2		bcs $a773			bcs 	_RGIRange
.a791		4c b2 a6	jmp $a6b2			jmp 	_RGICommandLoop
.a794						_RGISetImage:
.a794		a2 01		ldx #$01			ldx 	#1
.a796		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger
.a799		5a		phy				phy
.a79a		aa		tax				tax
.a79b		a0 00		ldy #$00			ldy 	#0
.a79d		80 ea		bra $a789			bra 	_RGIDoCommandLoop
.a79f						GCGetCoordinatePair:
.a79f		a2 01		ldx #$01			ldx 	#1
.a7a1		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.a7a4		20 7c 93	jsr $937c			jsr 	CheckComma
.a7a7		e8		inx				inx
.a7a8		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.a7ab		60		rts				rts
.a7ac						GCSignedCoordinatePair:
.a7ac		a2 01		ldx #$01			ldx 	#1
.a7ae		20 62 a2	jsr $a262			jsr 	Evaluate16BitIntegerSigned
.a7b1		20 7c 93	jsr $937c			jsr 	CheckComma
.a7b4		e8		inx				inx
.a7b5		20 62 a2	jsr $a262			jsr 	Evaluate16BitIntegerSigned
.a7b8		60		rts				rts
.a7b9						_GCCPRange:
.a7b9		4c 5b a4	jmp $a45b			jmp 	RangeError
.a7bc						GCLoadAXY:
.a7bc		ad 6f 06	lda $066f			lda 	gxXPos+1
.a7bf		ae 6e 06	ldx $066e			ldx 	gxXPos
.a7c2		ac 70 06	ldy $0670			ldy 	gxYPos
.a7c5		60		rts				rts
.a7c6						GCCopyPairToStore:
.a7c6		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a7c8		8d 6e 06	sta $066e			sta 	gxXPos
.a7cb		a5 61		lda $61				lda 	NSMantissa1+1
.a7cd		8d 6f 06	sta $066f			sta 	gxXPos+1
.a7d0		a5 5a		lda $5a				lda 	NSMantissa0+2
.a7d2		8d 70 06	sta $0670			sta 	gxYPos
.a7d5		60		rts				rts
.066c						gxCommandID:
>066c								.fill 	1
.066d						gxFillSolid:
>066d								.fill 	1
.066e						gxXPos:
>066e								.fill 	2
.0670						gxYPos:
>0670								.fill 	1
.0671						gxHandler:
>0671								.fill 	2
.0673						gxDrawScale:
>0673								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a7d6						BitmapCtrl:
.a7d6		b1 30		lda ($30),y			lda 	(codePtr),y
.a7d8		c8		iny				iny
.a7d9		a2 01		ldx #$01			ldx 	#1
.a7db		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a7dd		f0 11		beq $a7f0			beq 	BitmapSwitch
.a7df		ca		dex				dex
.a7e0		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a7e2		f0 0c		beq $a7f0			beq 	BitmapSwitch
.a7e4		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get the colour
.a7e7		5a		phy				phy
.a7e8		aa		tax				tax
.a7e9		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a7eb		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a7ee		7a		ply				ply
.a7ef		60		rts				rts
.a7f0						BitmapSwitch:
.a7f0		5a		phy				phy
.a7f1		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a7f3		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a7f5		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a7f8		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a7fa		a0 00		ldy #$00			ldy 	#0
.a7fc		a2 ff		ldx #$ff			ldx 	#$FF
.a7fe		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a801		9c 6d 06	stz $066d			stz 	gxFillSolid
.a804		9c 6e 06	stz $066e			stz 	gxXPos
.a807		9c 6f 06	stz $066f			stz 	gxXPos+1
.a80a		9c 70 06	stz $0670			stz 	gxYPos
.a80d		9c 73 06	stz $0673			stz 	gxDrawScale
.a810		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a812		a2 00		ldx #$00			ldx 	#0
.a814		a0 00		ldy #$00			ldy 	#0
.a816		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a819		7a		ply				ply
.a81a		60		rts				rts
.a81b						SpritesCtrl:
.a81b		b1 30		lda ($30),y			lda 	(codePtr),y
.a81d		c8		iny				iny
.a81e		a2 01		ldx #$01			ldx 	#1
.a820		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a822		f0 08		beq $a82c			beq 	SpriteSwitch
.a824		ca		dex				dex
.a825		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a827		f0 03		beq $a82c			beq 	SpriteSwitch
.a829		4c 56 a4	jmp $a456			jmp 	SyntaxError
.a82c						SpriteSwitch:
.a82c		5a		phy				phy
.a82d		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a82f		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a831		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a834		7a		ply				ply
.a835		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a836						GfxCommand:
.a836		a2 00		ldx #$00			ldx 	#0
.a838		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; command
.a83b		20 7c 93	jsr $937c			jsr 	CheckComma
.a83e		e8		inx				inx
.a83f		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; X
.a842		20 7c 93	jsr $937c			jsr 	CheckComma
.a845		e8		inx				inx
.a846		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; Y
.a849		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a84b		4a		lsr a				lsr 	a
.a84c		d0 12		bne $a860			bne 	_GfxError
.a84e		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a850		b0 0e		bcs $a860			bcs 	_GfxError 					; bit 7 should have been zero
.a852		5a		phy				phy 								; save pos
.a853		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a855		a6 59		ldx $59				ldx 	NSMantissa0+1
.a857		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a859		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a85c		b0 02		bcs $a860			bcs 	_GfxError
.a85e		7a		ply				ply 								; restore pos and exit.
.a85f		60		rts				rts
.a860						_GfxError:
.a860		4c 5b a4	jmp $a45b			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a863						UnaryHit:
.a863		fa		plx				plx
.a864		a9 36		lda #$36			lda 	#zTemp0
.a866		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a869		20 7c 93	jsr $937c			jsr 	CheckComma
.a86c		e8		inx				inx
.a86d		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a870		20 74 93	jsr $9374			jsr		CheckRightBracket
.a873		ca		dex				dex 								; fix back up again.
.a874		da		phx				phx 								; save X/Y
.a875		5a		phy				phy
.a876		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a878		b5 58		lda $58,x			lda 	NSMantissa0,x
.a87a		aa		tax				tax
.a87b		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a87d		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a880		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a881		7a		ply				ply 								; restore XY
.a882		fa		plx				plx
.a883		20 da a2	jsr $a2da			jsr 	NSMSetByte 					; return the hit result
.a886		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a887						PaletteCommand:
.a887		a2 00		ldx #$00			ldx 	#0
.a889		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; colour
.a88c		20 7c 93	jsr $937c			jsr 	CheckComma
.a88f		e8		inx				inx
.a890		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; r
.a893		20 7c 93	jsr $937c			jsr 	CheckComma
.a896		e8		inx				inx
.a897		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; g
.a89a		20 7c 93	jsr $937c			jsr 	CheckComma
.a89d		e8		inx				inx
.a89e		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; b
.a8a1		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a8a3		85 36		sta $36				sta 	zTemp0
.a8a5		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a8a7		85 37		sta $37				sta 	zTemp0+1
.a8a9		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a8ab		26 37		rol $37				rol	 	zTemp0+1
.a8ad		06 36		asl $36				asl 	zTemp0
.a8af		26 37		rol $37				rol	 	zTemp0+1
.a8b1		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a8b3		85 01		sta $01				sta 	1
.a8b5		5a		phy				phy
.a8b6		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a8b8		92 36		sta ($36)			sta 	(zTemp0)
.a8ba		a0 01		ldy #$01			ldy 	#1
.a8bc		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8be		91 36		sta ($36),y			sta 	(zTemp0),y
.a8c0		a5 59		lda $59				lda 	NSMantissa0+1
.a8c2		c8		iny				iny
.a8c3		91 36		sta ($36),y			sta 	(zTemp0),y
.a8c5		7a		ply				ply
.a8c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a8c7						XLoadCommand:
.a8c7		20 82 8d	jsr $8d82			jsr 	NewProgram
.a8ca		20 37 84	jsr $8437			jsr 	BackloadProgram
.a8cd		4c f6 84	jmp $84f6			jmp 	WarmStart
.a8d0						XGoCommand:
.a8d0		20 82 8d	jsr $8d82			jsr 	NewProgram
.a8d3		20 37 84	jsr $8437			jsr 	BackloadProgram
.a8d6		4c 00 8f	jmp $8f00			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a8d9						UnaryEvent:
.a8d9		fa		plx				plx
.a8da		20 73 a9	jsr $a973			jsr 	TimerToStackX 				; timer in +0
.a8dd		e8		inx				inx  								; put reference into +1
.a8de		20 db 9c	jsr $9cdb			jsr 	EvaluateTerm
.a8e1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a8e3		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a8e5		d0 4c		bne $a933			bne 	_UEType
.a8e7		e8		inx				inx 								; put the step in +2
.a8e8		20 7c 93	jsr $937c			jsr 	CheckComma
.a8eb		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger
.a8ee		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a8f1		ca		dex				dex
.a8f2		ca		dex				dex
.a8f3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a8f5		85 36		sta $36				sta 	zTemp0
.a8f7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a8f9		85 37		sta $37				sta 	zTemp0+1
.a8fb		5a		phy				phy
.a8fc		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a8fe		b1 36		lda ($36),y			lda 	(zTemp0),y
.a900		30 2d		bmi $a92f			bmi 	_UEFalse 					; exit if signed.
.a902		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a904		b5 58		lda $58,x			lda 	NSMantissa0,x
.a906		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a908		c8		iny				iny
.a909		b5 60		lda $60,x			lda 	NSMantissa1,x
.a90b		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a90d		c8		iny				iny
.a90e		b5 68		lda $68,x			lda 	NSMantissa2,x
.a910		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a912		90 1b		bcc $a92f			bcc 	_UEFalse 					; no, return FALSE.
.a914		18		clc				clc
.a915		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a917		b5 58		lda $58,x			lda 	NSMantissa0,x
.a919		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a91b		91 36		sta ($36),y			sta 	(zTemp0),y
.a91d		c8		iny				iny
.a91e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a920		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a922		91 36		sta ($36),y			sta 	(zTemp0),y
.a924		c8		iny				iny
.a925		b5 68		lda $68,x			lda 	NSMantissa2,x
.a927		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a929		91 36		sta ($36),y			sta 	(zTemp0),y
.a92b		7a		ply				ply
.a92c		4c fa 93	jmp $93fa			jmp 	ReturnTrue
.a92f						_UEFalse:
.a92f		7a		ply				ply 								; restore Y
.a930		4c 05 94	jmp $9405			jmp 	ReturnFalse 				; and return False
.a933						_UEType:
.a933		4c 60 a4	jmp $a460			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a936						UnaryJoyX:
.a936		18		clc				clc
.a937		80 01		bra $a93a			bra 	JoyMain
.a939						UnaryJoyY:
.a939		38		sec				sec
.a93a						JoyMain:
.a93a		fa		plx				plx 								; get pos
.a93b		08		php				php 								; save carry (set for Y)
.a93c		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a93f		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a942		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a945		28		plp				plp
.a946		b0 02		bcs $a94a			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a948		4a		lsr a				lsr 	a
.a949		4a		lsr a				lsr 	a
.a94a						_JMNoShift:
.a94a		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a94b		b0 07		bcs $a954			bcs 	JMIsLeft
.a94d		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a94e		b0 07		bcs $a957			bcs 	JMIsRight
.a950		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; zero result
.a953		60		rts				rts
.a954						JMIsLeft:
.a954		4c fa 93	jmp $93fa			jmp 	ReturnTrue
.a957						JMIsRight:
.a957		a9 01		lda #$01			lda 	#1
.a959		20 da a2	jsr $a2da			jsr 	NSMSetByte
.a95c		60		rts				rts
.a95d						UnaryJoyB:
.a95d		fa		plx				plx 								; get pos
.a95e		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a961		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a964		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a967		29 10		and #$10			and 	#$10
.a969		d0 e9		bne $a954			bne 	JMIsLeft
.a96b		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero
.a96e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a96f						UnaryTimer:
.a96f		fa		plx				plx
.a970		20 74 93	jsr $9374			jsr 	CheckRightBracket
.a973						TimerToStackX:
.a973		20 d8 a2	jsr $a2d8			jsr 	NSMSetZero 					; zero result
.a976		64 01		stz $01				stz 	1 							; access I/O
.a978		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a97b		95 58		sta $58,x			sta 	NSMantissa0,x
.a97d		ad 5a d6	lda $d65a			lda 	$D65A
.a980		95 60		sta $60,x			sta 	NSMantissa1,x
.a982		ad 5b d6	lda $d65b			lda 	$D65B
.a985		95 68		sta $68,x			sta 	NSMantissa2,x
.a987		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a988						MemoryDeleteLine:
.a988		20 a7 a9	jsr $a9a7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a98b		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a98d		a8		tay				tay
.a98e						_MDDLLoop:
.a98e		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a990		92 30		sta ($30)			sta 	(codePtr)
.a992		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a994		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a996		d0 07		bne $a99f			bne 	_MDLDLNext
.a998		a5 31		lda $31				lda 	codePtr+1
.a99a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a99c		d0 01		bne $a99f			bne 	_MDLDLNext
.a99e						_MDDLExit:
.a99e		60		rts				rts
.a99f						_MDLDLNext:
.a99f		e6 30		inc $30				inc 	codePtr						; next byte
.a9a1		d0 eb		bne $a98e			bne 	_MDDLLoop
.a9a3		e6 31		inc $31				inc 	codePtr+1
.a9a5		80 e7		bra $a98e			bra 	_MDDLLoop
.a9a7						IMemoryFindEnd:
.a9a7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a9a9		85 3a		sta $3a				sta 	0+zTemp2
.a9ab		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a9ad		85 3b		sta $3b				sta 	1+zTemp2
.a9af						_MDLFELoop:
.a9af		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a9b1		f0 0b		beq $a9be			beq 	_MDLFEExit
.a9b3		18		clc				clc
.a9b4		65 3a		adc $3a				adc 	zTemp2
.a9b6		85 3a		sta $3a				sta 	zTemp2
.a9b8		90 f5		bcc $a9af			bcc 	_MDLFELoop
.a9ba		e6 3b		inc $3b				inc 	zTemp2+1
.a9bc		80 f1		bra $a9af			bra 	_MDLFELoop
.a9be						_MDLFEExit:
.a9be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a9bf						MemoryInsertLine:
.a9bf		08		php				php
.a9c0		20 a7 a9	jsr $a9a7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a9c3		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a9c5		1a		inc a				inc 	a
.a9c6		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a9c8		b0 36		bcs $aa00			bcs 	_MDLIError 					; no, fail.
.a9ca		28		plp				plp 								; do at a specific point or the end ?
.a9cb		90 08		bcc $a9d5			bcc 	_MDLIFound 					; if specific point already set.
.a9cd		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a9cf		85 30		sta $30				sta 	codePtr 					; end.
.a9d1		a5 3b		lda $3b				lda 	zTemp2+1
.a9d3		85 31		sta $31				sta 	codePtr+1
.a9d5						_MDLIFound:
.a9d5		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a9d8		a8		tay				tay
.a9d9						_MDLIInsert:
.a9d9		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a9db		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a9dd		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a9df		c5 3a		cmp $3a				cmp 	zTemp2
.a9e1		d0 06		bne $a9e9			bne 	_MDLINext
.a9e3		a5 31		lda $31				lda 	codePtr+1
.a9e5		c5 3b		cmp $3b				cmp 	zTemp2+1
.a9e7		f0 0a		beq $a9f3			beq 	_MDLIHaveSpace
.a9e9						_MDLINext:
.a9e9		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a9eb		d0 02		bne $a9ef			bne 	_MDLINoBorrow
.a9ed		c6 3b		dec $3b				dec 	zTemp2+1
.a9ef						_MDLINoBorrow:
.a9ef		c6 3a		dec $3a				dec 	zTemp2
.a9f1		80 e6		bra $a9d9			bra 	_MDLIInsert
.a9f3						_MDLIHaveSpace:
.a9f3		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a9f6		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a9f7						_MDLICopy:
.a9f7		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a9fa		91 30		sta ($30),y			sta 	(codePtr),y
.a9fc		88		dey				dey
.a9fd		10 f8		bpl $a9f7			bpl 	_MDLICopy
.a9ff		60		rts				rts
.aa00						_MDLIError:
.aa00		a9 06		lda #$06		lda	#6
.aa02		4c 8d 93	jmp $938d		jmp	ErrorHandler
.aa05						MDLAppendLine:
.aa05		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.aa07		85 36		sta $36				sta 	zTemp0
.aa09		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa0b		85 38		sta $38				sta 	0+zTemp1
.aa0d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa0f		85 39		sta $39				sta 	1+zTemp1
.aa11		b2 38		lda ($38)			lda 	(zTemp1)
.aa13		d0 0a		bne $aa1f			bne 	_MDLANoInitialise
.aa15		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa17		8d 74 06	sta $0674			sta 	0+AppendPointer
.aa1a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa1c		8d 75 06	sta $0675			sta 	1+AppendPointer
.aa1f						_MDLANoInitialise:
.aa1f		18		clc				clc
.aa20		ad 74 06	lda $0674			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.aa23		85 38		sta $38				sta 	zTemp1
.aa25		72 36		adc ($36)			adc 	(zTemp0)
.aa27		8d 74 06	sta $0674			sta 	AppendPointer
.aa2a		ad 75 06	lda $0675			lda 	AppendPointer+1
.aa2d		85 39		sta $39				sta 	zTemp1+1
.aa2f		69 00		adc #$00			adc 	#0
.aa31		8d 75 06	sta $0675			sta 	AppendPointer+1
.aa34		a0 00		ldy #$00			ldy 	#0
.aa36						_MDLACopy:
.aa36		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.aa38		91 38		sta ($38),y			sta 	(zTemp1),y
.aa3a		c8		iny				iny
.aa3b		98		tya				tya
.aa3c		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.aa3e		d0 f6		bne $aa36			bne 	_MDLACopy
.aa40		a9 00		lda #$00			lda 	#0 							; end of program.
.aa42		91 38		sta ($38),y			sta 	(zTemp1),y
.aa44		60		rts				rts
.0674						AppendPointer:
>0674								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.aa45						MemoryNew:
.aa45		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa47		85 30		sta $30				sta 	codePtr
.aa49		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa4b		85 31		sta $31				sta 	codePtr+1
.aa4d		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.aa4f		92 30		sta ($30)			sta 	(codePtr)
.aa51		60		rts				rts
.aa52						MemoryInline:
.aa52		98		tya				tya 								; put address into stack,x
.aa53		18		clc				clc  								; get the offset, add codePtr
.aa54		65 30		adc $30				adc 	codePtr
.aa56		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.aa58		a5 31		lda $31				lda 	codePtr+1
.aa5a		69 00		adc #$00			adc 	#0
.aa5c		95 60		sta $60,x			sta 	NSMantissa1,x
.aa5e		74 68		stz $68,x			stz 	NSMantissa2,x
.aa60		74 70		stz $70,x			stz 	NSMantissa3,x
.aa62		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.aa63						MemorySearch:
.aa63		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.aa65		86 37		stx $37				stx 	zTemp0+1
.aa67		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa69		85 30		sta $30				sta 	codePtr
.aa6b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa6d		85 31		sta $31				sta 	codePtr+1
.aa6f						_MTAXLoop:
.aa6f		b2 30		lda ($30)			lda 	(codePtr)
.aa71		18		clc				clc
.aa72		f0 21		beq $aa95			beq 	_MTAXExit 					; reached end, exit with CC.
.aa74		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.aa76		b1 30		lda ($30),y			lda 	(codePtr),y
.aa78		38		sec				sec
.aa79		e5 36		sbc $36				sbc 	zTemp0
.aa7b		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.aa7d		c8		iny				iny 								; do the MSB
.aa7e		b1 30		lda ($30),y			lda 	(codePtr),y
.aa80		e5 37		sbc $37				sbc 	zTemp0+1
.aa82		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.aa84		f0 0f		beq $aa95			beq 	_MTAXExit	 				; found so exit (CS will be set)
.aa86		b0 0d		bcs $aa95			bcs 	_MTAXExit 					; current < required exit
.aa88		18		clc				clc
.aa89		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.aa8b		65 30		adc $30				adc 	codePtr
.aa8d		85 30		sta $30				sta 	codePtr
.aa8f		90 02		bcc $aa93			bcc 	_CREExit
.aa91		e6 31		inc $31				inc 	codePtr+1 					; carry
.aa93						_CREExit:
.aa93		80 da		bra $aa6f			bra 	_MTAXLoop
.aa95						_MTAXExit:
.aa95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.aa96						UpdateFont:
.aa96		a5 01		lda $01				lda 	1 							; save position
.aa98		48		pha				pha
.aa99		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.aa9b		85 01		sta $01				sta 	1
.aa9d		a9 c4		lda #$c4			lda 	#((FontBinary) & $FF)
.aa9f		85 36		sta $36				sta 	0+zTemp0
.aaa1		a9 aa		lda #$aa			lda 	#((FontBinary) >> 8)
.aaa3		85 37		sta $37				sta 	1+zTemp0
.aaa5		a9 00		lda #$00			lda 	#(($C000) & $FF)
.aaa7		85 38		sta $38				sta 	0+zTemp1
.aaa9		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.aaab		85 39		sta $39				sta 	1+zTemp1
.aaad						_UFCopy1:
.aaad		a0 00		ldy #$00			ldy 	#0
.aaaf						_UFCopy2:
.aaaf		b1 36		lda ($36),y			lda 	(zTemp0),y
.aab1		91 38		sta ($38),y			sta 	(zTemp1),y
.aab3		c8		iny				iny
.aab4		d0 f9		bne $aaaf			bne 	_UFCopy2
.aab6		e6 37		inc $37				inc 	zTemp0+1
.aab8		e6 39		inc $39				inc 	zTemp1+1
.aaba		a5 39		lda $39				lda 	zTemp1+1
.aabc		c9 c8		cmp #$c8			cmp 	#$C8
.aabe		d0 ed		bne $aaad			bne 	_UFCopy1
.aac0		68		pla				pla 								; restore.
.aac1		85 01		sta $01				sta 	1
.aac3		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.aac4						FontBinary:
>aac4		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>aacc		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>aadc		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>aaec		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>aafc		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>ab0c		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>ab1c		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>ab2c		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>ab3c		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>ab4c		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>ab5c		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>ab6c		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>ab7c		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>ab8c		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ab9c		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>abac		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>abbc		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>abcc		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>abdc		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>abec		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>abfc		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>ac0c		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>ac1c		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ac2c		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>ac3c		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>ac4c		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>ac5c		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>ac6c		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>ac7c		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>ac8c		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>ac9c		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>acac		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>acbc		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>accc		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>acdc		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>acec		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>acfc		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ad0c		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ad1c		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ad2c		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ad3c		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ad4c		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ad5c		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ad6c		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ad7c		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ad8c		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ad9c		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>adac		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>adbc		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>adcc		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>addc		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>adec		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>adfc		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ae0c		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ae1c		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ae2c		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ae3c		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ae4c		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ae5c		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ae6c		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ae7c		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ae8c		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ae9c		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aeac		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aebc		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aecc		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aedc		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aeec		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aefc		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>af0c		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>af1c		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>af2c		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>af3c		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>af4c		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>af5c		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>af6c		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>af7c		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>af8c		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>af9c		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>afac		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>afbc		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>afcc		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>afdc		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>afec		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>affc		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b00c		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b01c		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b02c		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b03c		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b04c		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b05c		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>b06c		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>b07c		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>b08c		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>b09c		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>b0ac		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>b0bc		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>b0cc		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b0dc		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b0ec		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b0fc		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b10c		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b11c		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b12c		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b13c		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b14c		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b15c		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b16c		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b17c		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b18c		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b19c		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b1ac		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b1bc		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b1cc		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b1dc		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b1ec		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b1fc		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b20c		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b21c		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b22c		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b23c		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b24c		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b25c		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b26c		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b27c		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b28c		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b29c		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b2ac		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b2bc		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b2c4						PingCommand:
.b2c4		5a		phy				phy 								; save pos
.b2c5		a9 01		lda #$01			lda 	#1 						; push channel.
.b2c7		48		pha				pha
.b2c8		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b2ca		a2 06		ldx #$06			ldx 	#6 						; length
.b2cc		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b2ce		80 24		bra $b2f4			bra 	SoundEffectCommand
.b2d0						ZapCommand:
.b2d0		5a		phy				phy 								; save pos
.b2d1		a9 01		lda #$01			lda 	#1 						; push channel.
.b2d3		48		pha				pha
.b2d4		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b2d6		a2 0a		ldx #$0a			ldx 	#10 						; length
.b2d8		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b2da		80 18		bra $b2f4			bra 	SoundEffectCommand
.b2dc						ShootCommand:
.b2dc		5a		phy				phy 								; save pos
.b2dd		a9 03		lda #$03			lda 	#3 						; push channel.
.b2df		48		pha				pha
.b2e0		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b2e2		a2 04		ldx #$04			ldx 	#4 						; length
.b2e4		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b2e6		80 0c		bra $b2f4			bra 	SoundEffectCommand
.b2e8						Explode:
.b2e8		5a		phy				phy 								; save pos
.b2e9		a9 03		lda #$03			lda 	#3 						; push channel.
.b2eb		48		pha				pha
.b2ec		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b2ee		a2 0a		ldx #$0a			ldx 	#10 						; length
.b2f0		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b2f2		80 00		bra $b2f4			bra 	SoundEffectCommand
.b2f4						SoundEffectCommand:
.b2f4		8d 76 06	sta $0676			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b2f7		9c 77 06	stz $0677			stz 	SoundCommandBlock+1
.b2fa		a9 0f		lda #$0f			lda 	#15
.b2fc		8d 78 06	sta $0678			sta 	SoundCommandBlock+2
.b2ff		8e 79 06	stx $0679			stx 	SoundCommandBlock+3
.b302		8c 7a 06	sty $067a			sty 	SoundCommandBlock+4
.b305		9c 7b 06	stz $067b			stz 	SoundCommandBlock+5
.b308		68		pla				pla
.b309		09 10		ora #$10			ora 	#$10  						; execute command $11
.b30b		a2 76		ldx #$76			ldx 	#(SoundCommandBlock & $FF)
.b30d		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b30f		20 8f 80	jsr $808f			jsr 	SNDCommand
.b312		7a		ply				ply
.b313		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b314						UnaryPlaying:
.b314		fa		plx				plx
.b315		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; get channel #
.b318		48		pha				pha
.b319		20 74 93	jsr $9374			jsr		CheckRightBracket
.b31c		68		pla				pla
.b31d		c9 04		cmp #$04			cmp 	#4
.b31f		b0 0c		bcs $b32d			bcs 	_UPNotPlaying
.b321		09 20		ora #$20			ora 	#$20 						; query playing ?
.b323		20 8f 80	jsr $808f			jsr 	SNDCommand
.b326		c9 00		cmp #$00			cmp 	#0
.b328		f0 03		beq $b32d			beq 	_UPNotPlaying
.b32a		4c fa 93	jmp $93fa			jmp 	ReturnTrue
.b32d						_UPNotPlaying:
.b32d		4c 05 94	jmp $9405			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b330						SoundCommand:
.b330		b1 30		lda ($30),y			lda 	(codePtr),y
.b332		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.b334		d0 09		bne $b33f			bne 	_SNDMain
.b336		c8		iny				iny 								; skip OFF
.b337		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b339		5a		phy				phy
.b33a		20 8f 80	jsr $808f			jsr 	SNDCommand
.b33d		7a		ply				ply
.b33e		60		rts				rts
.b33f						_SNDMain:
.b33f		a2 00		ldx #$00			ldx 	#0
.b341		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; channel
.b344		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b346		b0 4b		bcs $b393			bcs 	_SndError
.b348		e8		inx				inx 								; do the rest in slot 1.
.b349		20 7c 93	jsr $937c			jsr 	CheckComma
.b34c		20 58 a2	jsr $a258			jsr 	Evaluate16BitInteger 		; Pitch
.b34f		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b351		c9 10		cmp #$10			cmp 	#16
.b353		b0 3e		bcs $b393			bcs 	_SndError
.b355		8d 77 06	sta $0677			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b358		b5 58		lda $58,x			lda 	NSMantissa0,x
.b35a		8d 76 06	sta $0676			sta 	SoundCommandBlock
.b35d		20 7c 93	jsr $937c			jsr 	CheckComma
.b360		20 73 a2	jsr $a273			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b363		8d 79 06	sta $0679			sta 	SoundCommandBlock+3
.b366		a9 0f		lda #$0f			lda 	#15
.b368		8d 78 06	sta $0678			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b36b		9c 7a 06	stz $067a			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b36e		9c 7b 06	stz $067b			stz 	SoundCommandBlock+5
.b371		b1 30		lda ($30),y			lda 	(codePtr),y
.b373		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b375		d0 0e		bne $b385			bne 	_SNDPlay
.b377		c8		iny				iny
.b378		20 62 a2	jsr $a262			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b37b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b37d		8d 7a 06	sta $067a			sta 	SoundCommandBlock+4
.b380		b5 60		lda $60,x			lda 	NSMantissa1,x
.b382		8d 7b 06	sta $067b			sta 	SoundCommandBlock+5
.b385						_SNDPlay:
.b385		5a		phy				phy
.b386		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b388		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b38a		a2 76		ldx #$76			ldx 	#(SoundCommandBlock & $FF)
.b38c		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b38e		20 8f 80	jsr $808f			jsr 	SNDCommand
.b391		7a		ply				ply
.b392		60		rts				rts
.b393						_SndError:
.b393		4c 5b a4	jmp $a45b			jmp 	RangeError
.0676						SoundCommandBlock:
>0676								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b396						StackPushByte:
.b396		48		pha				pha 								; save byte on stack
.b397		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b399		d0 08		bne $b3a3			bne 	_SPBNoBorrow
.b39b		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b39d		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b39f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b3a1		90 06		bcc $b3a9			bcc 	_SPBMemory
.b3a3						_SPBNoBorrow:
.b3a3		c6 34		dec $34				dec 	basicStack
.b3a5		68		pla				pla 								; get back and write
.b3a6		92 34		sta ($34)			sta 	(basicStack)
.b3a8		60		rts				rts
.b3a9						_SPBMemory:
.b3a9		a9 12		lda #$12		lda	#18
.b3ab		4c 8d 93	jmp $938d		jmp	ErrorHandler
.b3ae						StackPopByte:
.b3ae		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b3b0		e6 34		inc $34				inc 	basicStack
.b3b2		d0 02		bne $b3b6			bne 	_SPBNoCarry
.b3b4		e6 35		inc $35				inc 	basicStack+1
.b3b6						_SPBNoCarry:
.b3b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b3b7						StackOpen:
.b3b7		48		pha				pha 								; save frame byte
.b3b8		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b3ba		0a		asl a				asl 	a 							; claim twice this for storage
.b3bb		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b3bd		38		sec				sec 								; so basically subtracting from
.b3be		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b3c0		85 34		sta $34				sta 	basicStack
.b3c2		b0 09		bcs $b3cd			bcs 	_SONoBorrow
>b3c4		db						.byte 	$DB 						; causes a break in the emulator
.b3c5		c6 35		dec $35				dec 	basicStack+1
.b3c7		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b3c9		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b3cb		90 04		bcc $b3d1			bcc 	_SOMemory
.b3cd						_SONoBorrow:
.b3cd		68		pla				pla 								; get marker back and write at TOS
.b3ce		92 34		sta ($34)			sta 	(basicStack)
.b3d0		60		rts				rts
.b3d1						_SOMemory:
.b3d1		a9 12		lda #$12		lda	#18
.b3d3		4c 8d 93	jmp $938d		jmp	ErrorHandler
.b3d6						StackClose:
.b3d6		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b3d8		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b3da		0a		asl a				asl 	a 							; claim twice this.
.b3db		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b3dd		85 34		sta $34				sta 	basicStack
.b3df		90 02		bcc $b3e3			bcc 	_SCExit
.b3e1		e6 35		inc $35				inc 	basicStack+1
.b3e3						_SCExit:
.b3e3		60		rts				rts
.b3e4						StackCheckFrame:
.b3e4		48		pha				pha
.b3e5						_StackRemoveLocals:
.b3e5		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b3e7		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b3e9		b0 05		bcs $b3f0			bcs 	_SCNoLocal
.b3eb		20 31 8d	jsr $8d31			jsr 	LocalPopValue 				; restore the local value
.b3ee		80 f5		bra $b3e5			bra 	_StackRemoveLocals 			; gr round again
.b3f0						_SCNoLocal:
.b3f0		68		pla				pla 								; get the frame check.
.b3f1		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b3f3		29 f0		and #$f0			and 	#$F0 						; check type bits
.b3f5		d0 01		bne $b3f8			bne 	_SCFError 					; different, we have structures mixed up
.b3f7		60		rts				rts
.b3f8						_SCFError:
.b3f8		8a		txa				txa 								; report error X
.b3f9		4c 8d 93	jmp $938d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b3fc						STKSaveCodePosition:
.b3fc		5a		phy				phy
.b3fd		98		tya				tya 								; save Y
.b3fe		a0 05		ldy #$05			ldy 	#5
.b400		91 34		sta ($34),y			sta 	(basicStack),y
.b402		88		dey				dey 								; save Code Pointer
.b403						_STKSaveLoop:
.b403		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b406		91 34		sta ($34),y			sta 	(basicStack),y
.b408		88		dey				dey
.b409		d0 f8		bne $b403			bne 	_STKSaveLoop
.b40b		7a		ply				ply
.b40c		60		rts				rts
.b40d						STKLoadCodePosition:
.b40d		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b40f						_STKLoadLoop:
.b40f		b1 34		lda ($34),y			lda 	(basicStack),y
.b411		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b414		c8		iny				iny
.b415		c0 05		cpy #$05			cpy 	#5
.b417		d0 f6		bne $b40f			bne 	_STKLoadLoop
.b419		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b41b		a8		tay				tay
.b41c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b41d						StackReset:
.b41d		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b41f		85 34		sta $34				sta 	0+basicStack
.b421		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b423		85 35		sta $35				sta 	1+basicStack
.b425		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b427		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b429		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b42a						StringConcrete:
.b42a		5a		phy				phy 								; save position on stack
.b42b		20 c7 9e	jsr $9ec7			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b42e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b430		85 38		sta $38				sta 	zTemp1
.b432		b5 60		lda $60,x			lda 	NSMantissa1,x
.b434		85 39		sta $39				sta 	zTemp1+1
.b436		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b438						_SALength:
.b438		c8		iny				iny
.b439		b1 38		lda ($38),y			lda 	(zTemp1),y
.b43b		d0 fb		bne $b438			bne 	_SALength
.b43d		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b43f		b0 3d		bcs $b47e			bcs 	_SALengthError
.b441		98		tya				tya 				 				; length of the new string
.b442		18		clc				clc
.b443		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b445		90 02		bcc $b449			bcc 	_SAHaveLength
.b447		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b449						_SAHaveLength:
.b449		48		pha				pha 								; save length.
.b44a		38		sec				sec
.b44b		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b44d		6d 0e 04	adc $040e			adc 	stringMemory
.b450		8d 0e 04	sta $040e			sta 	stringMemory
.b453		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b455		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b457		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b459		6d 0f 04	adc $040f			adc 	stringMemory+1
.b45c		8d 0f 04	sta $040f			sta 	stringMemory+1
.b45f		85 3b		sta $3b				sta 	zTemp2+1
.b461		95 60		sta $60,x			sta 	NSMantissa1,x
.b463		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b464		38		sec				sec
.b465		e9 03		sbc #$03			sbc 	#3
.b467		92 3a		sta ($3a)			sta 	(zTemp2)
.b469		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b46b		a0 01		ldy #$01			ldy 	#1
.b46d		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b46f						_SACopyNewString:
.b46f		a0 00		ldy #$00			ldy 	#0
.b471						_SACopyNSLoop:
.b471		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b473		c8		iny				iny 								; write two on in string storage
.b474		c8		iny				iny
.b475		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b477		88		dey				dey 								; this makes it one one.
.b478		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b47a		d0 f5		bne $b471			bne 	_SACopyNSLoop
.b47c		7a		ply				ply
.b47d		60		rts				rts
.b47e						_SALengthError:
.b47e		a9 09		lda #$09		lda	#9
.b480		4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b483						StringSystemInitialise:
.b483		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b485		8d 0e 04	sta $040e			sta 	0+stringMemory
.b488		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b48a		8d 0f 04	sta $040f			sta 	1+stringMemory
.b48d		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b490		60		rts				rts
.b491						StringSpaceInitialise:
.b491		20 c7 9e	jsr $9ec7			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b494		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b496		8d 10 04	sta $0410			sta 	stringInitialised
.b499		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b49c		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b49f		ad 0f 04	lda $040f			lda 	stringMemory+1
.b4a2		3a		dec a				dec 	a
.b4a3		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b4a6		60		rts				rts
.b4a7						StringTempAllocate:
.b4a7		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b4a9		b0 30		bcs $b4db			bcs 	_STALength
.b4ab		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b4ae		30 05		bmi $b4b5			bmi 	_STAAllocate
.b4b0		48		pha				pha 								; save value to subtract.
.b4b1		20 91 b4	jsr $b491			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b4b4		68		pla				pla 								; restore it
.b4b5						_STAAllocate:
.b4b5		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b4b7		18		clc				clc  								; deliberate allows one more
.b4b8		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b4bb		8d 11 04	sta $0411			sta 	stringTempPointer
.b4be		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b4c0		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b4c2		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b4c5		69 ff		adc #$ff			adc 	#$FF
.b4c7		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b4ca		85 3d		sta $3d				sta 	zsTemp+1
.b4cc		95 60		sta $60,x			sta 	NSMantissa1,x
.b4ce		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b4d0		74 70		stz $70,x			stz 	NSMantissa3,x
.b4d2		a9 10		lda #$10			lda 	#NSTString
.b4d4		95 50		sta $50,x			sta 	NSStatus,x
.b4d6		a9 00		lda #$00			lda 	#0 							; clear the target string
.b4d8		92 3c		sta ($3c)			sta 	(zsTemp)
.b4da		60		rts				rts
.b4db						_STALength:
.b4db		a9 09		lda #$09		lda	#9
.b4dd		4c 8d 93	jmp $938d		jmp	ErrorHandler
.b4e0						StringTempWrite:
.b4e0		48		pha				pha
.b4e1		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b4e3		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b4e5		d0 02		bne $b4e9			bne 	_STWNoCarry
.b4e7		e6 3d		inc $3d				inc 	zsTemp+1
.b4e9						_STWNoCarry:
.b4e9		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b4eb		92 3c		sta ($3c)			sta 	(zsTemp)
.b4ed		68		pla				pla
.b4ee		60		rts				rts

;******  Return to file: _basic.asm

.b4ef						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 7d 06	ldy $067d			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 7d 06	ldy $067d			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 7e 06	lda $067e			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 7d 06	sty $067d			sty 	EXTColumn
.c02d	a02d	cc 7f 06	cpy $067f			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 7c 06	inc $067c			inc 	EXTRow  					; bump row
.c035	a035	9c 7d 06	stz $067d			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 7c 06	lda $067c			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 80 06	cmp $0680			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 7f 06	adc $067f			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 7d 06	dec $067d			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 7d 06	stz $067d			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 7c 06	dec $067c			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 7c 06	lda $067c			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 7c 06	dec $067c			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 7f 06	sbc $067f			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 7d 06	sty $067d			sty 	EXTColumn
.c08c	a08c	cc 7f 06	cpy $067f			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 7d 06	sty $067d			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 80 06	lda $0680			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 7c 06	cmp $067c			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 7c 06	inc $067c			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 7f 06	adc $067f			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 7d 06	lda $067d			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 7d 06	sta $067d			sta 	EXTColumn
.c0c9	a0c9	cd 7f 06	cmp $067f			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 7d 06	dec $067d			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 7f 06	ldy $067f			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 7f 06	cpy $067f			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 7e 06	and $067e			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 7e 06	sta $067e			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 7e 06	ora $067e			ora 	EXTTextColour
.c13c	a13c	8d 7e 06	sta $067e			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 7e 06	lda $067e			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 7e 06	lda $067e			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 7c 06	stz $067c			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 7d 06	stz $067d			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 7d 06	lda $067d			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 7c 06	lda $067c			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 2b bc	jsr $bc2b			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 7d 06	lda $067d			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 7d 06	ldy $067d			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 7f 06	cpy $067f			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 7d 06	ldy $067d			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 7f 06	cpy $067f			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 7f 06	ldy $067f			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 7d 06	cpy $067d			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 7f 06	lda $067f			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 7f 06	ldy $067f			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.067c						EXTRow:
>067c								.fill 	1
.067d						EXTColumn:
>067d								.fill 	1
.067e						EXTTextColour:
>067e								.fill 	1
.067f						EXTScreenWidth:
>067f								.fill 	1
.0680						EXTScreenHeight:
>0680								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 7e 06	sta $067e			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 7f 06	sta $067f			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 80 06	sta $0680			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 7c 06	lda $067c			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0681						gxCurrentX:
>0681								.fill 	2
.0683						gxCurrentY:
>0683								.fill 	2
.0685						gxLastX:
>0685								.fill 	2
.0687						gxLastY:
>0687								.fill 	2
.0689						gxX0:
>0689								.fill 	2
.068b						gxY0:
>068b								.fill 	2
.068d						gxX1:
>068d								.fill 	2
.068f						gxY1:
>068f								.fill 	2
.0691						gxSpritesOn:
>0691								.fill 	1
.0692						gxBitmapsOn:
>0692								.fill 	1
.0693						gxBasePage:
>0693								.fill 	1
.0694						gxSpritePage:
>0694								.fill 	1
.0695						gxHeight:
>0695								.fill 	1
.0696						gxMode:
>0696								.fill 	1
.0697						gxColour:
>0697								.fill 	1
.0698						gxEORValue:
>0698								.fill 	1
.0699						gxANDValue:
>0699								.fill 	1
.069a						gxOriginalLUTValue:
>069a								.fill 	1
.069b						gxOffset:
>069b								.fill 	1
.069c						GSCurrentSpriteID:
>069c								.fill 	1
.069d						GSCurrentSpriteAddr:
>069d								.fill 	2
.069f						gxSpriteOffsetBase:
>069f								.fill 	2
.06a1						gxSpriteLow:
>06a1								.fill 	64
.06e1						gxSpriteHigh:
>06e1								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 81 06	lda $0681,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 85 06	sta $0685,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 83 06	sta $0683			sta 	gxCurrentY
.c7e7	a7e7	9c 84 06	stz $0684			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 81 06	sta $0681			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 82 06	sta $0682			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 82 06	lda $0682			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 81 06	lda $0681			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 83 06	lda $0683			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 95 06	cmp $0695			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 81 06	lda $0681,x			lda 	gxCurrentX,x
.c819	a819	9d 89 06	sta $0689,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 24 07	sta $0724			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 92 06	lda $0692			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 25 07	stz $0725			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 22 07	lda $0722			lda 	gxxCentre					; while x <= y
.c848	a848	cd 23 07	cmp $0723			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 23 07	lda $0723			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 22 07	lda $0722			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 23 07	ldx $0723			ldx	 	gxYCentre
.c875	a875	8d 23 07	sta $0723			sta 	gxYCentre
.c878	a878	8e 22 07	stx $0722			stx 	gxxCentre
.c87b	a87b	ad 25 07	lda $0725			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 25 07	sta $0725			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 24 07	lda $0724	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 25 07	lda $0725			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 23 07	lda $0723			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 22 07	lda $0722			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 24 07	lda $0724			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 23 07	sbc $0723			sbc 	gxYCentre
.c8bc	a8bc	8d 23 07	sta $0723			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 8d 06	lda $068d,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 89 06	sta $0689,x			sta 	gxX0,x
.c8d3	a8d3	bd 8e 06	lda $068e,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 8a 06	sta $068a,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 25 07	stz $0725			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 22 07	inc $0722			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 22 07	lda $0722			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 22 07	inc $0722			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 23 07	dec $0723			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 22 07	lda $0722			lda 	gxxCentre
.c8fc	a8fc	ed 23 07	sbc $0723			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 25 07	dec $0725			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 8f 06	lda $068f			lda 	gxY1
.c935	a935	ed 8b 06	sbc $068b			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 21 07	sta $0721			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 22 07	stz $0722			stz 	gxxCentre
.c949	a949	ad 21 07	lda $0721			lda 	gxRadius
.c94c	a94c	8d 23 07	sta $0723			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 8d 06	lda $068d,x			lda 	gxX1,x
.c964	a964	7d 89 06	adc $0689,x			adc 	gxX0,x
.c967	a967	9d 8d 06	sta $068d,x			sta 	gxX1,x
.c96a	a96a	bd 8e 06	lda $068e,x			lda 	gxX1+1,x
.c96d	a96d	7d 8a 06	adc $068a,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 8e 06	sta $068e,x			sta 	gxX1+1,x
.c974	a974	7e 8d 06	ror $068d,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0721						gxRadius:
>0721								.fill 	1
.0722						gxxCentre:
>0722								.fill 	1
.0723						gxYCentre:
>0723								.fill 	1
.0724						gxIsFillMode:
>0724								.fill 	1
.0725						gxYChanged:
>0725								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 92 06	lda $0692			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 95 06	lda $0695			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 93 06	adc $0693			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 93 06	cmp $0693			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 91 06	stz $0691			stz 	gxSpritesOn
.c9d1	a9d1	9c 92 06	stz $0692			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 81 06	stz $0681,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 92 06	sta $0692			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 93 06	sta $0693			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 95 06	stx $0695			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 91 06	sta $0691			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 94 06	sta $0694			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 9f 06	sta $069f			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d a0 06	sta $06a0			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 9e 06	stz $069e			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e e1 06	stz $06e1,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d a1 06	sta $06a1,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 92 06	lda $0692			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 9b 06	ldy $069b			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 99 06	and $0699			and 	gxANDValue
.ca9e	aa9e	4d 98 06	eor $0698			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 28 07	lda $0728			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 89 06	lda $0689			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 8d 06	eor $068d			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 8a 06	lda $068a			lda 	gxX0+1
.cac4	aac4	4d 8e 06	eor $068e			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 8f 06	lda $068f			lda 	gxY1
.cacb	aacb	4d 8b 06	eor $068b			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 2a 07	lda $072a			lda 	gxPosition
.cad3	aad3	6d 2b 07	adc $072b			adc 	gxAdjust
.cad6	aad6	8d 2a 07	sta $072a			sta 	gxPosition
.cad9	aad9	9c 2d 07	stz $072d			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 2c 07	cmp $072c			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 2d 07	dec $072d			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 2c 07	sbc $072c			sbc 	gxTotal
.caea	aaea	8d 2a 07	sta $072a			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 28 07	lda $0728			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 2d 07	lda $072d			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 2d 07	lda $072d			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 29 07	lda $0729			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 89 06	lda $0689			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 8a 06	dec $068a			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 89 06	dec $0689			dec 	gxX0
.cb1b	ab1b	ce 9b 06	dec $069b			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 9b 06	lda $069b			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 89 06	inc $0689			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 8a 06	inc $068a			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 9b 06	inc $069b			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 8b 06	inc $068b			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 8f 06	lda $068f			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 8b 06	sbc $068b			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 27 07	sta $0727			sta 	gxDiffY
.cb63	ab63	9c 29 07	stz $0729			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 8d 06	lda $068d			lda 	gxX1
.cb6a	ab6a	ed 89 06	sbc $0689			sbc 	gxX0
.cb6d	ab6d	8d 26 07	sta $0726			sta 	gxDiffX
.cb70	ab70	ad 8e 06	lda $068e			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 8a 06	sbc $068a			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 26 07	ror $0726			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 26 07	sbc $0726			sbc 	gxDiffX
.cb83	ab83	8d 26 07	sta $0726			sta 	gxDiffX
.cb86	ab86	ce 29 07	dec $0729			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 28 07	stz $0728			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 27 07	lda $0727			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 2b 07	sta $072b			sta 	gxAdjust
.cb92	ab92	ad 26 07	lda $0726			lda 	gxDiffX
.cb95	ab95	8d 2c 07	sta $072c			sta 	gxTotal
.cb98	ab98	ad 27 07	lda $0727			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 26 07	cmp $0726			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 28 07	dec $0728			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 26 07	lda $0726			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 2b 07	sta $072b			sta 	gxAdjust
.cba9	aba9	ad 27 07	lda $0727			lda 	gxDiffY
.cbac	abac	8d 2c 07	sta $072c			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 2c 07	lda $072c			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 2a 07	sta $072a			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.0726						gxDiffX:
>0726								.fill 	1
.0727						gxDiffY:
>0727								.fill 	1
.0728						gxIsDiffYLarger:
>0728								.fill 	1
.0729						gxDXNegative:
>0729								.fill 	1
.072a						gxPosition:
>072a								.fill 	1
.072b						gxAdjust:
>072b								.fill 	1
.072c						gxTotal:
>072c								.fill 	1
.072d						gxAddSelect:
>072d								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 97 06	stx $0697			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 96 06	sta $0696			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 99 06	stz $0699			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 97 06	ldx $0697			ldx 	gxColour
.cbc9	abc9	8e 98 06	stx $0698			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 99 06	stx $0699			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 98 06	stz $0698			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 99 06	lda $0699			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 99 06	sta $0699			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 9b 06	ldy $069b			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 99 06	and $0699			and 	gxANDValue
.cbf3	abf3	4d 98 06	eor $0698			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 92 06	lda $0692			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 8b 06	lda $068b			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 8f 06	cmp $068f			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 8b 06	inc $068b			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 8b 06	lda $068b			lda 	gxY0 						; reached last line
.cc25	ac25	cd 8f 06	cmp $068f			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 8d 06	lda $068d			lda		gxX1
.cc42	ac42	ed 89 06	sbc $0689			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 8e 06	lda $068e			lda 	gxX1+1
.cc4a	ac4a	ed 8a 06	sbc $068a			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 9b 06	lda $069b			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 9b 06	ldy $069b			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 99 06	and $0699			and 	gxANDValue
.cc67	ac67	4d 98 06	eor $0698			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 99 06	and $0699			and 	gxANDValue
.cc85	ac85	4d 98 06	eor $0698			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 99 06	and $0699			and 	gxANDValue
.cc9d	ac9d	4d 98 06	eor $0698			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 9b 06	sta $069b			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 2e 07	sta $072e			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 2f 07	sta $072f			sta 	gxMask 						; and mask
.ccc4	acc4	ad 92 06	lda $0692			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 8b 06	lda $068b			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 31 07	sty $0731			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 30 07	stx $0730			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 33 07	lda $0733			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 32 07	sta $0732			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 33 07	bit $0733			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 2f 07	lda $072f			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 32 07	lda $0732			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 8b 06	lda $068b			lda 	gxY0 						; off screen
.ccfd	acfd	cd 95 06	cmp $0695			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 2e 07	cmp $072e			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 8b 06	sta $068b			sta 	gxY0
.cd16	ad16	ae 32 07	ldx $0732			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 2e 07	lda $072e			lda 	gxSize
.cd1d	ad1d	6d 89 06	adc $0689			adc 	gxX0
.cd20	ad20	8d 89 06	sta $0689			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 8a 06	inc $068a			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 30 07	jmp ($0730)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 9b 06	ldy $069b			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 32 07	lda $0732			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 96 06	bit $0696			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 2f 07	lda $072f			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 33 07	lda $0733			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 99 06	and $0699			and 	gxANDValue
.cd61	ad61	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 2e 07	cmp $072e			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 8b 06	inc $068b			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.072e						gxSize:
>072e								.fill 	1
.072f						gxMask:
>072f								.fill 	1
.0730						gxAcquireVector:
>0730								.fill 	2
.0732						gxScale:
>0732								.fill 	1
.0733						gxUseMode:
>0733								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 96 06	eor $0696			eor 	gxMode
.cd84	ad84	8d 33 07	sta $0733			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 97 06	lda $0697			lda 	gxColour
.cdbd	adbd	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 91 06	lda $0691			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 96 06	eor $0696			eor 	gxMode
.cdd1	add1	8d 33 07	sta $0733			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 34 07	lda $0734			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 94 06	lda $0694			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 35 07	ldx $0735			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 37 07	adc $0737			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 38 07	adc $0738			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 34 07	cpy $0734			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 91 06	lda $0691			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 9c 06	sta $069c			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 9e 06	sta $069e			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 9d 06	sta $069d			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 91 06	lda $0691			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 9e 06	lda $069e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 9d 06	lda $069d			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 9e 06	lda $069e			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 37 07	lda $0737			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 38 07	lda $0738			lda 	gxSpriteOffset+1
.ce92	ae92	6d 9f 06	adc $069f			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad a0 06	lda $06a0			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 35 07	lda $0735			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 36 07	ora $0736			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 9c 06	ldx $069c			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd e1 06	lda $06e1,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d e1 06	sta $06e1,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 35 07	lda $0735			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d e1 06	ora $06e1,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d e1 06	sta $06e1,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd a1 06	lda $06a1,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d a1 06	sta $06a1,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 9d 06	lda $069d			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 9e 06	lda $069e			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 9c 06	ldx $069c			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd a1 06	lda $06a1,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d a1 06	sta $06a1,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 91 06	lda $0691			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 9e 06	lda $069e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 9d 06	lda $069d			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 9c 06	ldx $069c			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd e1 06	lda $06e1,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 89 06	adc $0689			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 8a 06	lda $068a			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 8b 06	adc $068b			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 8a 06	lsr $068a			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 89 06	ror $0689			ror 	gxX0
.cf3d	af3d	4e 89 06	lsr $0689			lsr 	gxX0
.cf40	af40	4e 8b 06	lsr $068b			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 8b 06	lsr $068b			lsr 	gxY0
.cf46	af46	ae 9c 06	ldx $069c			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd a1 06	lda $06a1,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 89 06	ora $0689			ora 	gxX0
.cf51	af51	9d a1 06	sta $06a1,x			sta 	gxSpriteLow,x
.cf54	af54	bd e1 06	lda $06e1,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 8b 06	ora $068b			ora 	gxY0
.cf5c	af5c	9d e1 06	sta $06e1,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 9a 06	sta $069a			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 9a 06	lda $069a			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 8b 06	lda $068b			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 89 06	lda $0689			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 9b 06	sta $069b			sta 	gxOffset
.cfae	afae	ad 8a 06	lda $068a			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 93 06	adc $0693			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 9b 06	lda $069b			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 9b 06	sta $069b			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 a1 06	lda $06a1,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d a1 06	ora $06a1,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 e1 06	lda $06e1,y			lda 	gxSpriteHigh,y
.d000	b000	7d e1 06	adc $06e1,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 e1 06	lda $06e1,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd e1 06	lda $06e1,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 a1 06	lda $06a1,y			lda 	gxSpriteLow,y
.d02e	b02e	fd a1 06	sbc $06a1,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 94 06	lda $0694			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 38 07	sta $0738			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 35 07	sta $0735			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 34 07	sta $0734			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 36 07	sta $0736			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 37 07	sta $0737			sta 	gxSpriteOffset
.d07b	b07b	0e 37 07	asl $0737			asl 	gxSpriteOffset
.d07e	b07e	2e 38 07	rol $0738			rol 	gxSpriteOffset+1
.d081	b081	0e 37 07	asl $0737			asl 	gxSpriteOffset
.d084	b084	2e 38 07	rol $0738			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.0734						gxSizePixels:
>0734								.fill 	1
.0735						gxSizeBits:
>0735								.fill 	1
.0736						gxSpriteLUT:
>0736								.fill 	1
.0737						gxSpriteOffset:
>0737								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 89 06	lda $0689			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 8d 06	cmp $068d			cmp 	gxX1
.d098	b098	ad 8a 06	lda $068a			lda 	gxX0+1
.d09b	b09b	ed 8e 06	sbc $068e			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 8b 06	lda $068b			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 8f 06	cmp $068f			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 89 06	lda $0689,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 89 06	lda $0689,y			lda 	gxX0,y
.d0c8	b0c8	9d 89 06	sta $0689,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 89 06	sta $0689,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d156	b156	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d15d	b15d	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d164	b164	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d16c	b16c	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d172	b172	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d178	b178	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d17f	b17f	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d185	b185	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d18b	b18b	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d192	b192	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d19a	b19a	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1a2	b1a2	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1aa	b1aa	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1b2	b1b2	47 28
>d1b4	b1b4	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1bc	b1bc	28
>d1bd	b1bd	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1c5	b1c5	28
>d1c6	b1c6	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1cc	b1cc	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1d2	b1d2	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1d8	b1d8	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d1df	b1df	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d1e7	b1e7	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d1ed	b1ed	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d1f3	b1f3	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d1f8	b1f8	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d1fc	b1fc	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d202	b202	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d20a	b20a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d211	b211	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d218	b218	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d220	b220	43
>d221	b221	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d227	b227	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d22d	b22d	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d234	b234	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d23a	b23a	02 9b 42 59				.text	2,$9b,"BY"             ; $b5 BY
>d23e	b23e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b6 CALL
>d244	b244	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b7 CIRCLE
>d24c	b24c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b8 CLEAR
>d253	b253	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b9 COLOR
>d25a	b25a	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ba COLOUR
>d262	b262	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bb DATA
>d268	b268	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bc DIM
>d26d	b26d	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bd DOWNTO
>d275	b275	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $be ELSE
>d27b	b27b	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bf FROM
>d281	b281	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c0 GFX
>d286	b286	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d28c	b28c	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d293	b293	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d298	b298	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d29e	b29e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d2a5	b2a5	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d2aa	b2aa	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d2ae	b2ae	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2b6	b2b6	45
>d2b7	b2b7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2bf	b2bf	45
>d2c0	b2c0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2c6	b2c6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2cc	b2cc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2d3	b2d3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2da	b2da	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2e1	b2e1	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $cf READ
>d2e7	b2e7	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d0 RECT
>d2ed	b2ed	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d1 REM
>d2f2	b2f2	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d2 SOLID
>d2f9	b2f9	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d3 SOUND
>d300	b300	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d4 SPRITE
>d308	b308	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d5 TEXT
>d30e	b30e	02 a3 54 4f				.text	2,$a3,"TO"             ; $d6 TO
>d312	b312	ff					.text	$FF
.d313	b313					KeywordSet1:
>d313	b313	00 65					.text	0,$65,""               ; $80 !0:EOF
>d315	b315	00 58					.text	0,$58,""               ; $81 !1:SH1
>d317	b317	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d319	b319	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d321	b321	4c 45
>d323	b323	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32b	b32b	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d333	b333	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d33a	b33a	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d341	b341	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d346	b346	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d34e	b34e	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d353	b353	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d35a	b35a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d35f	b35f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d367	b367	45
>d368	b368	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d36c	b36c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d373	b373	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d379	b379	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d380	b380	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d387	b387	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d38d	b38d	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d393	b393	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d398	b398	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d39e	b39e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3a5	b3a5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3ad	b3ad	45
>d3ae	b3ae	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3b6	b3b6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3bb	b3bb	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3c1	b3c1	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3c9	b3c9	45
>d3ca	b3ca	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d3d2	b3d2	45
>d3d3	b3d3	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d3da	b3da	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d3e2	b3e2	53
>d3e3	b3e3	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d3e9	b3e9	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d3f1	b3f1	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d3f6	b3f6	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d3fd	b3fd	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d402	b402	ff					.text	$FF
.d403	b403					KeywordSet2:
>d403	b403	00 65					.text	0,$65,""               ; $80 !0:EOF
>d405	b405	00 58					.text	0,$58,""               ; $81 !1:SH1
>d407	b407	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d409	b409	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d40e	b40e	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d413	b413	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d418	b418	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d41d	b41d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d422	b422	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d427	b427	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d42c	b42c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d431	b431	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d436	b436	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d43b	b43b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d440	b440	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d445	b445	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d44a	b44a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d44f	b44f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d454	b454	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d459	b459	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d45e	b45e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d463	b463	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d468	b468	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d46d	b46d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d472	b472	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d477	b477	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d47c	b47c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d481	b481	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d486	b486	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d48b	b48b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d490	b490	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d495	b495	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d49a	b49a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d49f	b49f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4a4	b4a4	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4a9	b4a9	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4ae	b4ae	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4b3	b4b3	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4b8	b4b8	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4bd	b4bd	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4c2	b4c2	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4c7	b4c7	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4cc	b4cc	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4d1	b4d1	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4d6	b4d6	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4db	b4db	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4e0	b4e0	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4e5	b4e5	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4ea	b4ea	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4ef	b4ef	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4f4	b4f4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4f9	b4f9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4fe	b4fe	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d503	b503	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d508	b508	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d50d	b50d	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d512	b512	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d517	b517	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d51c	b51c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d521	b521	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d526	b526	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d52b	b52b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d530	b530	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d535	b535	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d53a	b53a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d53f	b53f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d544	b544	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d549	b549	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d54e	b54e	ff					.text	$FF
.d54f	b54f					Export_TKListConvertLine:
.d54f	b54f	48		pha				pha 								; save indent on the stack
.d550	b550	9c 1d 04	stz $041d			stz 	tbOffset
.d553	b553	9c 2d 04	stz $042d			stz 	tokenBuffer
.d556	b556	9c 29 04	stz $0429			stz 	currentListColour
.d559	b559	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d55b	b55b	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d55e	b55e	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d560	b560	b1 30		lda ($30),y			lda 	(codePtr),y
.d562	b562	aa		tax				tax
.d563	b563	88		dey				dey
.d564	b564	b1 30		lda ($30),y			lda 	(codePtr),y
.d566	b566	20 49 b7	jsr $b749			jsr 	LCLWriteNumberXA
.d569	b569	68		pla				pla 								; adjustment to indent
.d56a	b56a	48		pha				pha 								; save on stack
.d56b	b56b	10 0c		bpl $b579			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d56d	b56d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d56e	b56e	6d 26 04	adc $0426			adc 	listIndent
.d571	b571	8d 26 04	sta $0426			sta 	listIndent
.d574	b574	10 03		bpl $b579			bpl 	_LCNoAdjust
.d576	b576	9c 26 04	stz $0426			stz 	listIndent
.d579	b579					_LCNoAdjust:
.d579	b579	18		clc				clc		 							; work out actual indent.
.d57a	b57a	ad 26 04	lda $0426			lda 	listIndent
.d57d	b57d	0a		asl a				asl 	a
.d57e	b57e	69 07		adc #$07			adc 	#7
.d580	b580	85 36		sta $36				sta 	zTemp0
.d582	b582					_LCPadOut:
.d582	b582	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d584	b584	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d587	b587	ad 1d 04	lda $041d			lda 	tbOffset
.d58a	b58a	c5 36		cmp $36				cmp 	zTemp0
.d58c	b58c	d0 f4		bne $b582			bne 	_LCPadOut
.d58e	b58e	a0 03		ldy #$03			ldy 	#3 							; start position.
.d590	b590					_LCMainLoop:
.d590	b590	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d592	b592	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d595	b595	b1 30		lda ($30),y			lda 	(codePtr),y
.d597	b597	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d599	b599	f0 17		beq $b5b2			beq 	_LCExit
.d59b	b59b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d59d	b59d	90 1e		bcc $b5bd			bcc 	_LCDoubles
.d59f	b59f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5a1	b5a1	90 2a		bcc $b5cd			bcc 	_LCShiftPunc
.d5a3	b5a3	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5a5	b5a5	90 35		bcc $b5dc			bcc 	_LCPunctuation
.d5a7	b5a7	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5a9	b5a9	90 51		bcc $b5fc			bcc 	_LCIdentifiers
.d5ab	b5ab	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5ad	b5ad	90 73		bcc $b622			bcc 	_LCTokens
.d5af	b5af	4c 82 b6	jmp $b682			jmp 	_LCData 					; 254-5 are data objects
.d5b2	b5b2					_LCExit:
.d5b2	b5b2	68		pla				pla 								; get old indent adjust
.d5b3	b5b3	30 07		bmi $b5bc			bmi 	_LCExit2
.d5b5	b5b5	18		clc				clc 								; add to indent if +ve
.d5b6	b5b6	6d 26 04	adc $0426			adc 	listIndent
.d5b9	b5b9	8d 26 04	sta $0426			sta 	listIndent
.d5bc	b5bc					_LCExit2:
.d5bc	b5bc	60		rts				rts
.d5bd	b5bd					_LCDoubles:
.d5bd	b5bd	48		pha				pha
.d5be	b5be	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5bf	b5bf	29 02		and #$02			and 	#2
.d5c1	b5c1	09 3c		ora #$3c			ora 	#60 						; make < >
.d5c3	b5c3	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d5c6	b5c6	68		pla				pla 								; restore, do lower bit
.d5c7	b5c7	29 03		and #$03			and 	#3
.d5c9	b5c9	09 3c		ora #$3c			ora 	#60
.d5cb	b5cb	80 0f		bra $b5dc			bra		_LCPunctuation 				; print, increment, loop
.d5cd	b5cd					_LCShiftPunc:
.d5cd	b5cd	aa		tax				tax 								; save in X
.d5ce	b5ce	29 07		and #$07			and 	#7 							; lower 3 bits
.d5d0	b5d0	f0 02		beq $b5d4			beq 	_LCNoAdd
.d5d2	b5d2	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5d4	b5d4					_LCNoAdd:
.d5d4	b5d4	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5d6	b5d6	90 02		bcc $b5da			bcc 	_LCNoAdd2
.d5d8	b5d8	09 20		ora #$20			ora 	#32 						; adds $20
.d5da	b5da					_LCNoAdd2:
.d5da	b5da	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5dc	b5dc					_LCPunctuation:
.d5dc	b5dc	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5de	b5de	d0 03		bne $b5e3			bne 	_LCPContinue
.d5e0	b5e0	20 f7 b6	jsr $b6f7			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5e3	b5e3					_LCPContinue:
.d5e3	b5e3	c9 2e		cmp #$2e			cmp 	#'.'
.d5e5	b5e5	f0 08		beq $b5ef			beq 	_LCPIsConstant
.d5e7	b5e7	c9 30		cmp #$30			cmp 	#'0'
.d5e9	b5e9	90 0b		bcc $b5f6			bcc 	_LCPNotConstant
.d5eb	b5eb	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5ed	b5ed	b0 07		bcs $b5f6			bcs 	_LCPNotConstant
.d5ef	b5ef					_LCPIsConstant:
.d5ef	b5ef	48		pha				pha
.d5f0	b5f0	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5f2	b5f2	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d5f5	b5f5	68		pla				pla
.d5f6	b5f6					_LCPNotConstant:
.d5f6	b5f6	c8		iny				iny 								; consume character
.d5f7	b5f7	20 e1 b6	jsr $b6e1			jsr 	LCLWrite 					; write it out.
.d5fa	b5fa	80 94		bra $b590			bra 	_LCMainLoop 				; go round again.
.d5fc	b5fc					_LCIdentifiers:
.d5fc	b5fc	18		clc				clc 								; convert to physical address
.d5fd	b5fd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5ff	b5ff	85 37		sta $37				sta 	zTemp0+1
.d601	b601	c8		iny				iny
.d602	b602	b1 30		lda ($30),y			lda 	(codePtr),y
.d604	b604	85 36		sta $36				sta 	zTemp0
.d606	b606	c8		iny				iny
.d607	b607	5a		phy				phy 								; save position
.d608	b608	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d60a	b60a	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d60d	b60d	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d60f	b60f					_LCOutIdentifier:
.d60f	b60f	c8		iny				iny
.d610	b610	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d612	b612	29 7f		and #$7f			and 	#$7F
.d614	b614	20 33 b7	jsr $b733			jsr 	LCLLowerCase
.d617	b617	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d61a	b61a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d61c	b61c	10 f1		bpl $b60f			bpl 	_LCOutIdentifier
.d61e	b61e	7a		ply				ply 								; restore position
.d61f	b61f	4c 90 b5	jmp $b590			jmp 	_LCMainLoop
.d622	b622					_LCTokens:
.d622	b622	aa		tax				tax 								; token in X
.d623	b623	a9 03		lda #$03			lda 	#((KeywordSet2) & $FF)
.d625	b625	85 36		sta $36				sta 	0+zTemp0
.d627	b627	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d629	b629	85 37		sta $37				sta 	1+zTemp0
.d62b	b62b	e0 82		cpx #$82			cpx 	#$82
.d62d	b62d	f0 16		beq $b645			beq 	_LCUseShift
.d62f	b62f	a9 13		lda #$13			lda 	#((KeywordSet1) & $FF)
.d631	b631	85 36		sta $36				sta 	0+zTemp0
.d633	b633	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d635	b635	85 37		sta $37				sta 	1+zTemp0
.d637	b637	e0 81		cpx #$81			cpx 	#$81
.d639	b639	f0 0a		beq $b645			beq 	_LCUseShift
.d63b	b63b	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d63d	b63d	85 36		sta $36				sta 	0+zTemp0
.d63f	b63f	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d641	b641	85 37		sta $37				sta 	1+zTemp0
.d643	b643	80 01		bra $b646			bra 	_LCNoShift
.d645	b645					_LCUseShift:
.d645	b645	c8		iny				iny
.d646	b646					_LCNoShift:
.d646	b646	20 0b b7	jsr $b70b			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d649	b649	b1 30		lda ($30),y			lda 	(codePtr),y
.d64b	b64b	aa		tax				tax 								; into X
.d64c	b64c					_LCFindText:
.d64c	b64c	ca		dex				dex
.d64d	b64d	10 0e		bpl $b65d			bpl 	_LCFoundText 				; found text.
.d64f	b64f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d651	b651	1a		inc a				inc 	a 							; one extra for size
.d652	b652	38		sec				sec 								; one extra for checksum
.d653	b653	65 36		adc $36				adc 	zTemp0 						; go to next token
.d655	b655	85 36		sta $36				sta 	zTemp0
.d657	b657	90 f3		bcc $b64c			bcc 	_LCFindText
.d659	b659	e6 37		inc $37				inc 	zTemp0+1
.d65b	b65b	80 ef		bra $b64c			bra 	_LCFindText
.d65d	b65d					_LCFoundText:
.d65d	b65d	5a		phy				phy 								; save List position
.d65e	b65e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d660	b660	aa		tax				tax
.d661	b661	a9 86		lda #$86			lda 	#CLIToken+$80
.d663	b663	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d666	b666	a0 02		ldy #$02			ldy 	#2
.d668	b668					_LCCopyToken:
.d668	b668	b1 36		lda ($36),y			lda 	(zTemp0),y
.d66a	b66a	20 33 b7	jsr $b733			jsr 	LCLLowerCase
.d66d	b66d	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d670	b670	c8		iny				iny
.d671	b671	ca		dex				dex
.d672	b672	d0 f4		bne $b668			bne 	_LCCopyToken
.d674	b674	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d676	b676	f0 05		beq $b67d			beq 	_LCNoSpace
.d678	b678	a9 20		lda #$20			lda 	#' '
.d67a	b67a	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d67d	b67d					_LCNoSpace:
.d67d	b67d	7a		ply				ply 								; restore position.
.d67e	b67e	c8		iny				iny 								; consume token
.d67f	b67f	4c 90 b5	jmp $b590			jmp 	_LCMainLoop 				; and go around again.
.d682	b682					_LCData:
.d682	b682	48		pha				pha 								; save type $FE/$FF
.d683	b683	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d685	b685	c9 fe		cmp #$fe			cmp 	#$FE
.d687	b687	f0 22		beq $b6ab			beq 	_LCHaveOpener
.d689	b689	a2 22		ldx #$22			ldx 	#'"'
.d68b	b68b	a9 8f		lda #$8f			lda 	#CLIData+$80
.d68d	b68d	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d690	b690	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d692	b692	d0 17		bne $b6ab			bne 	_LCHaveOpener
.d694	b694	88		dey				dey 								; what precedes it ?
.d695	b695	b1 30		lda ($30),y			lda 	(codePtr),y
.d697	b697	c8		iny				iny
.d698	b698	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d69a	b69a	d0 0f		bne $b6ab			bne 	_LCHaveOpener
.d69c	b69c	a9 09		lda #$09			lda 	#9 							; tab
.d69e	b69e	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6a1	b6a1	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6a3	b6a3	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6a6	b6a6	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6a8	b6a8	20 d8 b6	jsr $b6d8			jsr 	LCLWriteColour
.d6ab	b6ab					_LCHaveOpener:
.d6ab	b6ab	8a		txa				txa 								; output prefix (# or ")
.d6ac	b6ac	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6af	b6af	c8		iny				iny 								; get count
.d6b0	b6b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d6b2	b6b2	aa		tax				tax
.d6b3	b6b3	c8		iny				iny 								; point at first character
.d6b4	b6b4					_LCOutData:
.d6b4	b6b4	b1 30		lda ($30),y			lda 	(codePtr),y
.d6b6	b6b6	c9 00		cmp #$00			cmp 	#0
.d6b8	b6b8	f0 03		beq $b6bd			beq 	_LCNoPrint
.d6ba	b6ba	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6bd	b6bd					_LCNoPrint:
.d6bd	b6bd	c8		iny				iny
.d6be	b6be	ca		dex				dex
.d6bf	b6bf	d0 f3		bne $b6b4			bne 	_LCOutData
.d6c1	b6c1	68		pla				pla 								; closing " required ?
.d6c2	b6c2	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6c4	b6c4	d0 0f		bne $b6d5			bne 	_LCNoQuote
.d6c6	b6c6	a9 22		lda #$22			lda 	#'"'
.d6c8	b6c8	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6cb	b6cb	ad 7e 06	lda $067e			lda 	EXTTextColour
.d6ce	b6ce	29 0f		and #$0f			and 	#$0F
.d6d0	b6d0	09 90		ora #$90			ora 	#$90
.d6d2	b6d2	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d6d5	b6d5					_LCNoQuote:
.d6d5	b6d5	4c 90 b5	jmp $b590			jmp 	_LCMainLoop
.d6d8	b6d8					LCLWriteColour:
.d6d8	b6d8	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6db	b6db	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6de	b6de	d0 01		bne $b6e1			bne 	LCLWrite 					; if different, output it
.d6e0	b6e0	60		rts				rts
.d6e1	b6e1					LCLWrite:
.d6e1	b6e1	da		phx				phx
.d6e2	b6e2	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6e5	b6e5	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6e8	b6e8	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6eb	b6eb	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6ee	b6ee	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6f0	b6f0	30 03		bmi $b6f5			bmi 	_LCLNoColour
.d6f2	b6f2	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6f5	b6f5					_LCLNoColour:
.d6f5	b6f5	fa		plx				plx
.d6f6	b6f6	60		rts				rts
.d6f7	b6f7					LCLDeleteLastSpace:
.d6f7	b6f7	48		pha				pha
.d6f8	b6f8	da		phx				phx
.d6f9	b6f9	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6fc	b6fc	f0 0a		beq $b708			beq 	_LCDLSExit
.d6fe	b6fe	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d701	b701	c9 20		cmp #$20			cmp 	#' '
.d703	b703	d0 03		bne $b708			bne 	_LCDLSExit
.d705	b705	ce 1d 04	dec $041d			dec 	tbOffset
.d708	b708					_LCDLSExit:
.d708	b708	fa		plx				plx
.d709	b709	68		pla				pla
.d70a	b70a	60		rts				rts
.d70b	b70b					LCLCheckSpaceRequired:
.d70b	b70b	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d70e	b70e	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d710	b710	f0 1b		beq $b72d			beq 	_LCCSRSpace
.d712	b712	c9 29		cmp #$29			cmp 	#')'
.d714	b714	f0 17		beq $b72d			beq 	_LCCSRSpace
.d716	b716	c9 23		cmp #$23			cmp 	#'#'
.d718	b718	f0 13		beq $b72d			beq 	_LCCSRSpace
.d71a	b71a	20 33 b7	jsr $b733			jsr 	LCLLowerCase 				; saves a little effort
.d71d	b71d	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d71f	b71f	90 11		bcc $b732			bcc 	_LCCSRExit
.d721	b721	c9 3a		cmp #$3a			cmp 	#"9"+1
.d723	b723	90 08		bcc $b72d			bcc 	_LCCSRSpace
.d725	b725	c9 61		cmp #$61			cmp 	#"a"
.d727	b727	90 09		bcc $b732			bcc 	_LCCSRExit
.d729	b729	c9 7b		cmp #$7b			cmp 	#"z"+1
.d72b	b72b	b0 05		bcs $b732			bcs 	_LCCSRExit
.d72d	b72d					_LCCSRSpace:
.d72d	b72d	a9 20		lda #$20			lda 	#' '
.d72f	b72f	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d732	b732					_LCCSRExit:
.d732	b732	60		rts				rts
.d733	b733					LCLLowerCase:
.d733	b733	c9 41		cmp #$41			cmp 	#"A"
.d735	b735	90 06		bcc $b73d			bcc 	_LCLLCOut
.d737	b737	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d739	b739	b0 02		bcs $b73d			bcs 	_LCLLCOut
.d73b	b73b	69 20		adc #$20			adc 	#$20
.d73d	b73d					_LCLLCOut:
.d73d	b73d	60		rts				rts
.d73e	b73e					LCLUpperCase:
.d73e	b73e	c9 61		cmp #$61			cmp 	#"a"
.d740	b740	90 06		bcc $b748			bcc 	_LCLUCOut
.d742	b742	c9 7b		cmp #$7b			cmp 	#"z"+1
.d744	b744	b0 02		bcs $b748			bcs 	_LCLUCOut
.d746	b746	e9 1f		sbc #$1f			sbc 	#$1F
.d748	b748					_LCLUCOut:
.d748	b748	60		rts				rts
.d749	b749					LCLWriteNumberXA:
.d749	b749	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d74b	b74b					_LCLWNLoop1:
.d74b	b74b	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d74d	b74d					_LCLWNLoop2:
.d74d	b74d	48		pha				pha 								; save initial LSB
.d74e	b74e	38		sec				sec
.d74f	b74f	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d751	b751	f9 82 b7	sbc $b782,y			sbc 	_LCLWNTable,y
.d754	b754	48		pha				pha
.d755	b755	8a		txa				txa
.d756	b756	f9 83 b7	sbc $b783,y			sbc 	_LCLWNTable+1,y
.d759	b759	90 07		bcc $b762			bcc 	_LCLWNUnderflow
.d75b	b75b	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d75d	b75d	aa		tax				tax 								; update X
.d75e	b75e	68		pla				pla 								; restore A
.d75f	b75f	7a		ply				ply 								; throw original
.d760	b760	80 eb		bra $b74d			bra 	_LCLWNLoop2 				; try again.
.d762	b762					_LCLWNUnderflow:
.d762	b762	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d764	b764	d0 06		bne $b76c			bne 	_LCLWNOut
.d766	b766	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d769	b769	3a		dec a				dec 	a
.d76a	b76a	f0 04		beq $b770			beq 	_LCLWNNext
.d76c	b76c					_LCLWNOut:
.d76c	b76c	98		tya				tya
.d76d	b76d	20 7c b7	jsr $b77c			jsr 	_LCLWNOutDigit
.d770	b770					_LCLWNNext:
.d770	b770	7a		ply				ply 							 	; restore original value.
.d771	b771	68		pla				pla
.d772	b772	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d774	b774	c8		iny				iny
.d775	b775	c8		iny				iny
.d776	b776	84 37		sty $37				sty 	zTemp0+1
.d778	b778	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d77a	b77a	d0 cf		bne $b74b			bne 	_LCLWNLoop1
.d77c	b77c					_LCLWNOutDigit:
.d77c	b77c	09 30		ora #$30			ora 	#'0'
.d77e	b77e	20 e1 b6	jsr $b6e1			jsr 	LCLWrite
.d781	b781	60		rts				rts
.d782	b782					_LCLWNTable:
>d782	b782	10 27						.word 	10000
>d784	b784	e8 03						.word 	1000
>d786	b786	64 00						.word 	100
>d788	b788	0a 00						.word 	10
.d78a	b78a					TOKSearchTable:
.d78a	b78a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d78c	b78c	85 36		sta $36				sta 	zTemp0
.d78e	b78e	a0 00		ldy #$00			ldy 	#0
.d790	b790	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d792	b792	85 38		sta $38				sta 	zTemp1
.d794	b794					_TSTLoop:
.d794	b794	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d796	b796	30 49		bmi $b7e1			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d798	b798	f0 2e		beq $b7c8			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d79a	b79a	c8		iny				iny 								; get the hash
.d79b	b79b	b1 36		lda ($36),y			lda 	(zTemp0),y
.d79d	b79d	88		dey				dey
.d79e	b79e	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7a1	b7a1	d0 25		bne $b7c8			bne 	_TSTNext
.d7a3	b7a3	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7a6	b7a6	38		sec				sec
.d7a7	b7a7	ed 00 04	sbc $0400			sbc 	identStart
.d7aa	b7aa	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7ac	b7ac	d0 1a		bne $b7c8			bne 	_TSTNext
.d7ae	b7ae	5a		phy				phy 								; save Y , we might fail to match.
.d7af	b7af	c8		iny				iny 								; point to text
.d7b0	b7b0	c8		iny				iny
.d7b1	b7b1	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7b4	b7b4					_TSTCompareName:
.d7b4	b7b4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d7b7	b7b7	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7b9	b7b9	d0 0c		bne $b7c7			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7bb	b7bb	e8		inx				inx
.d7bc	b7bc	c8		iny				iny
.d7bd	b7bd	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7c0	b7c0	d0 f2		bne $b7b4			bne 	_TSTCompareName
.d7c2	b7c2	7a		ply				ply 								; throw Y
.d7c3	b7c3	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7c5	b7c5	38		sec				sec 								; return with CS = passed.
.d7c6	b7c6	60		rts				rts
.d7c7	b7c7					_TSTNextPullY:
.d7c7	b7c7	7a		ply				ply 								; restore current, fall through.
.d7c8	b7c8					_TSTNext:
.d7c8	b7c8	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ca	b7ca	98		tya				tya
.d7cb	b7cb	18		clc				clc
.d7cc	b7cc	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7ce	b7ce	1a		inc a				inc 	a 							; +1
.d7cf	b7cf	1a		inc a				inc 	a 							; +2
.d7d0	b7d0	a8		tay				tay
.d7d1	b7d1	10 c1		bpl $b794			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7d3	b7d3	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7d4	b7d4	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7d6	b7d6	18		clc				clc  								; but have tables > 255 bytes
.d7d7	b7d7	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7d9	b7d9	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7db	b7db	90 b7		bcc $b794			bcc 	_TSTLoop
.d7dd	b7dd	e6 37		inc $37				inc 	zTemp0+1
.d7df	b7df	80 b3		bra $b794			bra 	_TSTLoop
.d7e1	b7e1					_TSTFail:
.d7e1	b7e1	18		clc				clc
.d7e2	b7e2	60		rts				rts
.d7e3	b7e3					Export_TKTokeniseLine:
.d7e3	b7e3	20 b0 b9	jsr $b9b0			jsr 	LCLFixLineBufferCase 		; fix line case
.d7e6	b7e6	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7e8	b7e8	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7eb	b7eb	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7ee	b7ee	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7f1	b7f1	a2 ff		ldx #$ff			ldx 	#$FF
.d7f3	b7f3					_TKFindFirst:
.d7f3	b7f3	e8		inx				inx
.d7f4	b7f4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7f7	b7f7	f0 62		beq $b85b			beq 	_TKExit
.d7f9	b7f9	c9 20		cmp #$20			cmp 	#' '
.d7fb	b7fb	90 f6		bcc $b7f3			bcc 	_TKFindFirst
.d7fd	b7fd	c9 30		cmp #$30			cmp 	#'0'
.d7ff	b7ff	90 07		bcc $b808			bcc 	_TKNoLineNumber
.d801	b801	c9 3a		cmp #$3a			cmp 	#'9'+1
.d803	b803	b0 03		bcs $b808			bcs 	_TKNoLineNumber
.d805	b805	20 da b9	jsr $b9da			jsr 	TOKExtractLineNumber
.d808	b808					_TKNoLineNumber:
.d808	b808					_TKTokeniseLoop:
.d808	b808	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d80b	b80b	f0 4e		beq $b85b			beq 	_TKExit
.d80d	b80d	e8		inx				inx
.d80e	b80e	c9 20		cmp #$20			cmp 	#' '
.d810	b810	f0 f6		beq $b808			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d812	b812	ca		dex				dex 								; undo last get, A contains character, X is position.
.d813	b813	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d815	b815	f0 68		beq $b87f			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d817	b817	c9 41		cmp #$41			cmp 	#'A'
.d819	b819	90 04		bcc $b81f			bcc 	_TKTokenisePunctuation
.d81b	b81b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d81d	b81d	90 60		bcc $b87f			bcc 	_TKTokeniseIdentifier
.d81f	b81f					_TKTokenisePunctuation:
.d81f	b81f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d821	b821	f0 2e		beq $b851			beq 	_TKString
.d823	b823	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d825	b825	f0 2f		beq $b856			beq 	_TKHexConstant
.d827	b827	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d829	b829	f0 36		beq $b861			beq 	_TKCheckDouble
.d82b	b82b	c9 3e		cmp #$3e			cmp 	#'>'
.d82d	b82d	f0 32		beq $b861			beq 	_TKCheckDouble
.d82f	b82f					_TKStandardPunctuation:
.d82f	b82f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d832	b832	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d834	b834	90 0e		bcc $b844			bcc 	_TKNoShift
.d836	b836	48		pha				pha 								; save. we are about to convert this punctuation token from
.d837	b837	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d839	b839	85 36		sta $36				sta 	zTemp0
.d83b	b83b	68		pla				pla
.d83c	b83c	29 20		and #$20			and 	#32 						; bit 5
.d83e	b83e	4a		lsr a				lsr 	a 							; shift into bit 3
.d83f	b83f	4a		lsr a				lsr 	a
.d840	b840	05 36		ora $36				ora 	zTemp0
.d842	b842	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d844	b844					_TKNoShift:
.d844	b844	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte 				; write the punctuation character
.d847	b847	e8		inx				inx 								; consume the character
.d848	b848	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d84a	b84a	d0 bc		bne $b808			bne 	_TKTokeniseLoop 			; and loop round again.
.d84c	b84c	20 12 b9	jsr $b912			jsr 	TOKCheckComment 			; comment checl
.d84f	b84f	80 b7		bra $b808			bra 	_TKTokeniseLoop
.d851	b851					_TKString:
.d851	b851	20 3f b9	jsr $b93f			jsr 	TOKTokenString
.d854	b854	80 b2		bra $b808			bra 	_TKTokeniseLoop
.d856	b856					_TKHexConstant:
.d856	b856	20 7a b9	jsr $b97a			jsr 	TOKHexConstant
.d859	b859	80 ad		bra $b808			bra 	_TKTokeniseLoop
.d85b	b85b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d85d	b85d	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d860	b860	60		rts				rts
.d861	b861					_TKCheckDouble:
.d861	b861	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d864	b864	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d866	b866	90 c7		bcc $b82f			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d868	b868	c9 3f		cmp #$3f			cmp 	#'>'+1
.d86a	b86a	b0 c3		bcs $b82f			bcs 	_TKStandardPunctuation
.d86c	b86c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d86f	b86f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d871	b871	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d872	b872	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d875	b875	38		sec				sec
.d876	b876	e9 3c		sbc #$3c			sbc 	#'<'
.d878	b878	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte 				; this is in the range 0-7
.d87b	b87b	e8		inx				inx 								; consume both
.d87c	b87c	e8		inx				inx
.d87d	b87d	80 89		bra $b808			bra 	_TKTokeniseLoop
.d87f	b87f					_TKTokeniseIdentifier:
.d87f	b87f	8e 00 04	stx $0400			stx 	identStart 					; save start
.d882	b882	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d885	b885					_TKCheckLoop:
.d885	b885	e8		inx				inx 								; look at next, we know first is identifier already.
.d886	b886	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d889	b889	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d88b	b88b	f0 f8		beq $b885			beq 	_TKCheckLoop
.d88d	b88d	c9 30		cmp #$30			cmp	 	#"0"
.d88f	b88f	90 0c		bcc $b89d			bcc 	_TKEndIdentifier
.d891	b891	c9 3a		cmp #$3a			cmp 	#"9"+1
.d893	b893	90 f0		bcc $b885			bcc 	_TKCheckLoop
.d895	b895	c9 41		cmp #$41			cmp	 	#"A"
.d897	b897	90 04		bcc $b89d			bcc 	_TKEndIdentifier
.d899	b899	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d89b	b89b	90 e8		bcc $b885			bcc 	_TKCheckLoop
.d89d	b89d					_TKEndIdentifier:
.d89d	b89d	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8a0	b8a0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8a2	b8a2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8a4	b8a4	f0 06		beq $b8ac			beq 	_TKHasTypeCharacter
.d8a6	b8a6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8a8	b8a8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8aa	b8aa	d0 07		bne $b8b3			bne 	_TKNoTypeCharacter
.d8ac	b8ac					_TKHasTypeCharacter:
.d8ac	b8ac	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8af	b8af	e8		inx				inx 								; consume the type character
.d8b0	b8b0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d8b3	b8b3					_TKNoTypeCharacter:
.d8b3	b8b3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8b5	b8b5	d0 09		bne $b8c0			bne 	_TKNoArray
.d8b7	b8b7	e8		inx				inx 								; skip the (
.d8b8	b8b8	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8bb	b8bb	09 04		ora #$04			ora 	#$04
.d8bd	b8bd	8d 04 04	sta $0404			sta 	identTypeByte
.d8c0	b8c0					_TKNoArray:
.d8c0	b8c0	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8c3	b8c3	20 9b b9	jsr $b99b			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8c6	b8c6	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8c8	b8c8	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ca	b8ca	20 8a b7	jsr $b78a			jsr 	TOKSearchTable
.d8cd	b8cd	a2 00		ldx #$00			ldx 	#0
.d8cf	b8cf	b0 1f		bcs $b8f0			bcs 	_TKFoundToken
.d8d1	b8d1	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8d3	b8d3	a9 13		lda #$13			lda 	#(KeywordSet1) & $FF
.d8d5	b8d5	20 8a b7	jsr $b78a			jsr 	TOKSearchTable
.d8d8	b8d8	a2 81		ldx #$81			ldx 	#$81
.d8da	b8da	b0 14		bcs $b8f0			bcs 	_TKFoundToken
.d8dc	b8dc	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d8de	b8de	a9 03		lda #$03			lda 	#(KeywordSet2) & $FF
.d8e0	b8e0	20 8a b7	jsr $b78a			jsr 	TOKSearchTable
.d8e3	b8e3	a2 82		ldx #$82			ldx 	#$82
.d8e5	b8e5	b0 09		bcs $b8f0			bcs 	_TKFoundToken
.d8e7	b8e7	20 2b ba	jsr $ba2b			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8ea	b8ea	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8ed	b8ed	4c 08 b8	jmp $b808			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f0	b8f0					_TKFoundToken:
.d8f0	b8f0	48		pha				pha 								; save token
.d8f1	b8f1	8a		txa				txa 								; shift in X, is there one ?
.d8f2	b8f2	f0 03		beq $b8f7			beq 	_TKNoTShift
.d8f4	b8f4	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte 				; if so, write it out
.d8f7	b8f7					_TKNoTShift:
.d8f7	b8f7	68		pla				pla 								; restore and write token
.d8f8	b8f8	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d8fb	b8fb	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8fd	b8fd	d0 0d		bne $b90c			bne 	_TKNotRem 			 		; not shifted ?
.d8ff	b8ff	c9 d1		cmp #$d1			cmp 	#KWD_REM
.d901	b901	d0 09		bne $b90c			bne 	_TKNotRem
.d903	b903	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d906	b906	20 12 b9	jsr $b912			jsr 	TOKCheckComment
.d909	b909	4c 08 b8	jmp $b808			jmp 	_TKTokeniseLoop
.d90c	b90c					_TKNotRem:
.d90c	b90c	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d90f	b90f	4c 08 b8	jmp $b808			jmp 	_TKTokeniseLoop 			; and go round again.
.d912	b912					TOKCheckComment:
.d912	b912	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d915	b915	e8		inx				inx
.d916	b916	c9 20		cmp #$20			cmp 	#' '
.d918	b918	f0 f8		beq $b912			beq 	TOKCheckComment
.d91a	b91a	ca		dex				dex 								; first non space character
.d91b	b91b	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d91d	b91d	f0 1f		beq $b93e			beq 	_TOKCCExit 					; then we are okay
.d91f	b91f	c9 00		cmp #$00			cmp 	#0 							; EOL
.d921	b921	f0 1b		beq $b93e			beq 	_TOKCCExit 					; then we are okay
.d923	b923	da		phx				phx
.d924	b924					_TOKCCLowerCase:
.d924	b924	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d927	b927	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d929	b929	90 09		bcc $b934			bcc 	_TOKKCNotUC
.d92b	b92b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d92d	b92d	b0 05		bcs $b934			bcs 	_TOKKCNotUC
.d92f	b92f	49 20		eor #$20			eor 	#$20
.d931	b931	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d934	b934					_TOKKCNotUC:
.d934	b934	e8		inx				inx
.d935	b935	c9 00		cmp #$00			cmp 	#0
.d937	b937	d0 eb		bne $b924			bne 	_TOKCCLowerCase
.d939	b939	fa		plx				plx
.d93a	b93a	ca		dex				dex 								; tokenise string expects initial skip.
.d93b	b93b	20 3f b9	jsr $b93f			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d93e	b93e					_TOKCCExit:
.d93e	b93e	60		rts				rts
.d93f	b93f					TOKTokenString:
.d93f	b93f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d941	b941	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d944	b944	e8		inx				inx									; start of quoted string.
.d945	b945	da		phx				phx 								; push start of string on top
.d946	b946	ca		dex				dex 								; because we pre-increment
.d947	b947					_TSFindEnd:
.d947	b947	e8		inx				inx
.d948	b948	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d94b	b94b	f0 04		beq $b951			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d94d	b94d	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d94f	b94f	d0 f6		bne $b947			bne 	_TSFindEnd
.d951	b951					_TSEndOfString:
.d951	b951	7a		ply				ply  								; so now Y is first character, X is character after end.
.d952	b952	48		pha				pha 								; save terminating character
.d953	b953	20 5b b9	jsr $b95b			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d956	b956	68		pla				pla 								; terminating character
.d957	b957	f0 01		beq $b95a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d959	b959	e8		inx				inx
.d95a	b95a					_TSNotQuote:
.d95a	b95a	60		rts				rts
.d95b	b95b					TOKWriteBlockXY:
.d95b	b95b	86 36		stx $36				stx 	zTemp0 						; save end character
.d95d	b95d	98		tya				tya 								; use 2's complement to work out the byte size
.d95e	b95e	49 ff		eor #$ff			eor 	#$FF
.d960	b960	38		sec				sec
.d961	b961	65 36		adc $36				adc 	zTemp0
.d963	b963	1a		inc a				inc 	a 							; one extra for NULL
.d964	b964	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d967	b967					_TOBlockLoop:
.d967	b967	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d969	b969	f0 09		beq $b974			beq 	_TOBlockExit
.d96b	b96b	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d96e	b96e	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d971	b971	c8		iny				iny
.d972	b972	80 f3		bra $b967			bra 	_TOBlockLoop
.d974	b974					_TOBlockExit:
.d974	b974	a9 00		lda #$00			lda 	#0 							; add NULL.
.d976	b976	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d979	b979	60		rts				rts
.d97a	b97a					TOKHexConstant:
.d97a	b97a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d97c	b97c	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.d97f	b97f	e8		inx				inx									; start of quoted string.
.d980	b980	da		phx				phx 								; push start of constant on top
.d981	b981	ca		dex				dex
.d982	b982					_THFindLoop:
.d982	b982	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d983	b983	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d986	b986	c9 30		cmp #$30			cmp 	#"0"
.d988	b988	90 0c		bcc $b996			bcc 	_THFoundEnd
.d98a	b98a	c9 3a		cmp #$3a			cmp 	#"9"+1
.d98c	b98c	90 f4		bcc $b982			bcc 	_THFindLoop
.d98e	b98e	c9 41		cmp #$41			cmp 	#"A"
.d990	b990	90 04		bcc $b996			bcc 	_THFoundEnd
.d992	b992	c9 47		cmp #$47			cmp 	#"F"+1
.d994	b994	90 ec		bcc $b982			bcc 	_THFindLoop
.d996	b996					_THFoundEnd:
.d996	b996	7a		ply				ply 								; restore start
.d997	b997	20 5b b9	jsr $b95b			jsr 	TOKWriteBlockXY 			; output the block
.d99a	b99a	60		rts				rts
.d99b	b99b					TOKCalculateHash:
.d99b	b99b	da		phx				phx
.d99c	b99c	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d99f	b99f	a9 00		lda #$00			lda 	#0
.d9a1	b9a1					_TCHLoop:
.d9a1	b9a1	18		clc				clc
.d9a2	b9a2	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d9a5	b9a5	e8		inx				inx
.d9a6	b9a6	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9a9	b9a9	d0 f6		bne $b9a1			bne 	_TCHLoop
.d9ab	b9ab	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9ae	b9ae	fa		plx				plx
.d9af	b9af	60		rts				rts
.d9b0	b9b0					LCLFixLineBufferCase:
.d9b0	b9b0	a2 00		ldx #$00			ldx 	#0
.d9b2	b9b2					_FLBCLoop:
.d9b2	b9b2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d9b5	b9b5	f0 22		beq $b9d9			beq 	_FLBCExit 					; end of string.
.d9b7	b9b7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9b9	b9b9	f0 11		beq $b9cc			beq 	_FLBCInQuotes
.d9bb	b9bb	e8		inx				inx
.d9bc	b9bc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9be	b9be	90 f2		bcc $b9b2			bcc 	_FLBCLoop
.d9c0	b9c0	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9c2	b9c2	b0 ee		bcs $b9b2			bcs 	_FLBCLoop
.d9c4	b9c4	38		sec				sec 								; make U/C
.d9c5	b9c5	e9 20		sbc #$20			sbc 	#32
.d9c7	b9c7	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ca	b9ca	80 e6		bra $b9b2			bra 	_FLBCLoop
.d9cc	b9cc					_FLBCInQuotes:
.d9cc	b9cc	e8		inx				inx 								; advance
.d9cd	b9cd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9d0	b9d0	f0 07		beq $b9d9			beq 	_FLBCExit 					; exit on EOS
.d9d2	b9d2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9d4	b9d4	d0 f6		bne $b9cc			bne 	_FLBCInQuotes
.d9d6	b9d6	e8		inx				inx 								; skip over it
.d9d7	b9d7	80 d9		bra $b9b2			bra 	_FLBCLoop
.d9d9	b9d9					_FLBCExit:
.d9d9	b9d9	60		rts				rts
.d9da	b9da					TOKExtractLineNumber:
.d9da	b9da	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9dd	b9dd	48		pha				pha
.d9de	b9de	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9e1	b9e1	48		pha				pha
.d9e2	b9e2	20 18 ba	jsr $ba18			jsr 	_LCLNTimes2 				; line # x 2
.d9e5	b9e5	20 18 ba	jsr $ba18			jsr 	_LCLNTimes2 				; line # x 4
.d9e8	b9e8	18		clc				clc 								; add stacked value
.d9e9	b9e9	68		pla				pla
.d9ea	b9ea	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9ed	b9ed	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9f0	b9f0	68		pla				pla
.d9f1	b9f1	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9f4	b9f4	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9f7	b9f7	20 18 ba	jsr $ba18			jsr 	_LCLNTimes2 				; line # x 10
.d9fa	b9fa	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9fd	b9fd	e8		inx				inx
.d9fe	b9fe	29 0f		and #$0f			and 	#15 						; add to line #
.da00	ba00	18		clc				clc
.da01	ba01	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da04	ba04	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da07	ba07	90 03		bcc $ba0c			bcc 	_TLENNoCarry
.da09	ba09	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.da0c	ba0c					_TLENNoCarry:
.da0c	ba0c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.da0f	ba0f	c9 30		cmp #$30			cmp 	#'0'
.da11	ba11	90 04		bcc $ba17			bcc 	_TLENExit
.da13	ba13	c9 3a		cmp #$3a			cmp 	#'9'+1
.da15	ba15	90 c3		bcc $b9da			bcc 	TOKExtractLineNumber
.da17	ba17					_TLENExit:
.da17	ba17	60		rts				rts
.da18	ba18					_LCLNTimes2:
.da18	ba18	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da1b	ba1b	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da1e	ba1e	60		rts				rts
.da1f	ba1f					TOKWriteByte:
.da1f	ba1f	da		phx				phx
.da20	ba20	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da23	ba23	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da26	ba26	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da29	ba29	fa		plx				plx
.da2a	ba2a	60		rts				rts
.da2b	ba2b					TOKCheckCreateVariableRecord:
.da2b	ba2b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da2d	ba2d	85 36		sta $36				sta 	0+zTemp0
.da2f	ba2f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da31	ba31	85 37		sta $37				sta 	1+zTemp0
.da33	ba33					_CCVSearch:
.da33	ba33	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da35	ba35	f0 2c		beq $ba63			beq 	_CCVFail
.da37	ba37	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da39	ba39	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da3b	ba3b	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da3e	ba3e	d0 16		bne $ba56			bne 	_CCVNext
.da40	ba40	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da42	ba42	ae 00 04	ldx $0400			ldx 	identStart
.da45	ba45					_CCVCompare:
.da45	ba45	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da48	ba48	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da4a	ba4a	e8		inx				inx 								; advance pointers
.da4b	ba4b	c8		iny				iny
.da4c	ba4c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da4d	ba4d	d0 07		bne $ba56			bne 	_CCVNext  					; didn't match go to next.
.da4f	ba4f	90 f4		bcc $ba45			bcc 	_CCVCompare 				; not finished yet.
.da51	ba51	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da54	ba54	f0 41		beq $ba97			beq 	_CCVFound 					; yes, we were successful
.da56	ba56					_CCVNext:
.da56	ba56	18		clc				clc 								; go to next record.
.da57	ba57	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da59	ba59	65 36		adc $36				adc 	zTemp0
.da5b	ba5b	85 36		sta $36				sta 	zTemp0
.da5d	ba5d	90 d4		bcc $ba33			bcc 	_CCVSearch
.da5f	ba5f	e6 37		inc $37				inc 	zTemp0+1
.da61	ba61	80 d0		bra $ba33			bra 	_CCVSearch
.da63	ba63					_CCVFail:
.da63	ba63	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da65	ba65	ad 03 04	lda $0403			lda 	identHash
.da68	ba68	91 36		sta ($36),y			sta 	(zTemp0),y
.da6a	ba6a	c8		iny				iny 								; offset 2 is the type byte
.da6b	ba6b	ad 04 04	lda $0404			lda 	identTypeByte
.da6e	ba6e	91 36		sta ($36),y			sta 	(zTemp0),y
.da70	ba70	c8		iny				iny
.da71	ba71					_CCVData:
.da71	ba71	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da73	ba73	91 36		sta ($36),y			sta 	(zTemp0),y
.da75	ba75	c8		iny				iny
.da76	ba76	c0 08		cpy #$08			cpy 	#8
.da78	ba78	90 f7		bcc $ba71			bcc 	_CCVData
.da7a	ba7a	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da7d	ba7d					_CCVCopyName:
.da7d	ba7d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da80	ba80	91 36		sta ($36),y			sta 	(zTemp0),y
.da82	ba82	e8		inx				inx
.da83	ba83	c8		iny				iny
.da84	ba84	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da87	ba87	d0 f4		bne $ba7d			bne 	_CCVCopyName
.da89	ba89	98		tya				tya 								; patch offset
.da8a	ba8a	92 36		sta ($36)			sta 	(zTemp0)
.da8c	ba8c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da8e	ba8e	91 36		sta ($36),y			sta 	(zTemp0),y
.da90	ba90	88		dey				dey
.da91	ba91	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da93	ba93	09 80		ora #$80			ora 	#$80
.da95	ba95	91 36		sta ($36),y			sta 	(zTemp0),y
.da97	ba97					_CCVFound:
.da97	ba97	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da99	ba99	38		sec				sec
.da9a	ba9a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da9c	ba9c	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da9e	ba9e	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.daa1	baa1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daa3	baa3	20 1f ba	jsr $ba1f			jsr 	TOKWriteByte
.daa6	baa6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daa7	baa7					SNDCheckChannel:
.daa7	baa7	aa		tax				tax
.daa8	baa8	bd 47 08	lda $0847,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daab	baab	d0 38		bne $bae5			bne 	_SNDCCExit
.daad	baad	da		phx				phx 								; save current channel
.daae	baae	8a		txa				txa 								; put in A
.daaf	baaf	20 2b bb	jsr $bb2b			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dab2	bab2	68		pla				pla 								; channel # in A
.dab3	bab3	90 30		bcc $bae5			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dab5	bab5	a8		tay				tay 								; Y is the channel #
.dab6	bab6	bd 3c 07	lda $073c,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dab9	bab9	99 3b 08	sta $083b,y			sta 	SNDPitchLow,y
.dabc	babc	bd 3d 07	lda $073d,x			lda 	SNDQueue+2,x
.dabf	babf	99 3f 08	sta $083f,y			sta 	SNDPitchHigh,y
.dac2	bac2	bd 3e 07	lda $073e,x			lda 	SNDQueue+3,x
.dac5	bac5	99 43 08	sta $0843,y			sta 	SNDVolume,y
.dac8	bac8	bd 3f 07	lda $073f,x			lda 	SNDQueue+4,x
.dacb	bacb	99 47 08	sta $0847,y			sta 	SNDTimeLeft,y
.dace	bace	bd 40 07	lda $0740,x			lda 	SNDQueue+5,x
.dad1	bad1	99 4b 08	sta $084b,y			sta 	SNDAdjustLow,y
.dad4	bad4	bd 41 07	lda $0741,x			lda 	SNDQueue+6,x
.dad7	bad7	99 4f 08	sta $084f,y			sta 	SNDAdjustHigh,y
.dada	bada	5a		phy				phy 								; save channel #
.dadb	badb	20 45 bb	jsr $bb45			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dade	bade	ce 3a 07	dec $073a			dec 	SNDLength 					; reduce the queue length.
.dae1	bae1	68		pla				pla
.dae2	bae2	20 e6 ba	jsr $bae6			jsr 	SNDUpdateNote 				; update channel A
.dae5	bae5					_SNDCCExit:
.dae5	bae5	60		rts				rts
.dae6	bae6					SNDUpdateNote:
.dae6	bae6	aa		tax				tax 								; so we can access records
.dae7	bae7	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.dae8	bae8	0a		asl a				asl 	a
.dae9	bae9	0a		asl a				asl 	a
.daea	baea	0a		asl a				asl 	a
.daeb	baeb	0a		asl a				asl 	a
.daec	baec	8d 39 07	sta $0739			sta 	SNDChannelBits
.daef	baef	bd 47 08	lda $0847,x			lda 	SNDTimeLeft,x 				; are we silent
.daf2	baf2	f0 2e		beq $bb22			beq 	_SNDUNIsSilent
.daf4	baf4	ad 39 07	lda $0739			lda 	SNDChannelBits 				; push channel bits on stack
.daf7	baf7	48		pha				pha
.daf8	baf8	bd 3b 08	lda $083b,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dafb	bafb	29 0f		and #$0f			and 	#$0F
.dafd	bafd	0d 39 07	ora $0739			ora 	SNDChannelBits 				; set channel bits
.db00	bb00	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db02	bb02	20 8f bb	jsr $bb8f			jsr 	SNDWritePorts
.db05	bb05	bd 3f 08	lda $083f,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db08	bb08	8d 39 07	sta $0739			sta 	SNDChannelBits
.db0b	bb0b	bd 3b 08	lda $083b,x			lda 	SNDPitchLow,x
.db0e	bb0e	4e 39 07	lsr $0739			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db11	bb11	6a		ror a				ror 	a
.db12	bb12	4e 39 07	lsr $0739			lsr 	SNDChannelBits
.db15	bb15	6a		ror a				ror 	a
.db16	bb16	4a		lsr a				lsr 	a 							; put in bits 0-5
.db17	bb17	4a		lsr a				lsr 	a
.db18	bb18	20 8f bb	jsr $bb8f			jsr 	SNDWritePorts 				; write as rest of pitch register
.db1b	bb1b	68		pla				pla
.db1c	bb1c	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db1e	bb1e	20 8f bb	jsr $bb8f			jsr 	SNDWritePorts
.db21	bb21	60		rts				rts
.db22	bb22					_SNDUNIsSilent:
.db22	bb22	ad 39 07	lda $0739			lda 	SNDChannelBits 				; channel bits
.db25	bb25	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db27	bb27	20 8f bb	jsr $bb8f			jsr 	SNDWritePorts 				; write to the ports
.db2a	bb2a	60		rts				rts
.db2b	bb2b					SNDFindNextNoteForA:
.db2b	bb2b	ac 3a 07	ldy $073a			ldy 	SNDLength 					; queue size into Y
.db2e	bb2e	f0 13		beq $bb43			beq 	_SNDFNNFail 				; queue empty.
.db30	bb30	a2 00		ldx #$00			ldx 	#0
.db32	bb32					_SNDFNNSearch:
.db32	bb32	dd 3b 07	cmp $073b,x			cmp 	SNDQueue,x 					; does it match the channel
.db35	bb35	38		sec				sec
.db36	bb36	f0 0c		beq $bb44			beq 	_SNDFNNExit 				; if so exit with CS.
.db38	bb38	e8		inx				inx 								; next queue slot.
.db39	bb39	e8		inx				inx
.db3a	bb3a	e8		inx				inx
.db3b	bb3b	e8		inx				inx
.db3c	bb3c	e8		inx				inx
.db3d	bb3d	e8		inx				inx
.db3e	bb3e	e8		inx				inx
.db3f	bb3f	e8		inx				inx
.db40	bb40	88		dey				dey 								; done the whole queue
.db41	bb41	d0 ef		bne $bb32			bne 	_SNDFNNSearch 				; no, go back.
.db43	bb43					_SNDFNNFail:
.db43	bb43	18		clc				clc
.db44	bb44					_SNDFNNExit:
.db44	bb44	60		rts				rts
.db45	bb45					SNDDeleteXFromQueue:
.db45	bb45	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db47	bb47	f0 09		beq $bb52			beq 	_SNDDXExit
.db49	bb49	bd 43 07	lda $0743,x			lda 	SNDQueue+8,x
.db4c	bb4c	9d 3b 07	sta $073b,x			sta 	SNDQueue,x
.db4f	bb4f	e8		inx				inx
.db50	bb50	80 f3		bra $bb45			bra 	SNDDeleteXFromQueue
.db52	bb52					_SNDDXExit:
.db52	bb52	60		rts				rts
.0739						SNDChannelBits:
>0739								.fill 	1
.db53	bb53					SNDQueueRequest:
.db53	bb53	86 36		stx $36				stx 	zTemp0						; save queue address
.db55	bb55	84 37		sty $37				sty 	zTemp0+1
.db57	bb57	ae 3a 07	ldx $073a			ldx 	SNDLength 					; queue is full, can't take any more.
.db5a	bb5a	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db5c	bb5c	f0 21		beq $bb7f			beq 	_SNDQRExit
.db5e	bb5e	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db60	bb60	48		pha				pha
.db61	bb61	8a		txa				txa  								; get offset in queue buffer/
.db62	bb62	0a		asl a				asl 	a
.db63	bb63	0a		asl a				asl 	a
.db64	bb64	0a		asl a				asl 	a
.db65	bb65	aa		tax				tax
.db66	bb66	68		pla				pla 								; get back and push again
.db67	bb67	48		pha				pha
.db68	bb68	9d 3b 07	sta $073b,x			sta 	SNDQueue+0,x 				; save the channel #
.db6b	bb6b	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db6d	bb6d					_SNDQCopy:
.db6d	bb6d	b1 36		lda ($36),y			lda 	(zTemp0),y
.db6f	bb6f	e8		inx				inx
.db70	bb70	c8		iny				iny
.db71	bb71	9d 3b 07	sta $073b,x			sta 	SNDQueue,x
.db74	bb74	c0 06		cpy #$06			cpy 	#6
.db76	bb76	d0 f5		bne $bb6d			bne 	_SNDQCopy
.db78	bb78	ee 3a 07	inc $073a			inc 	SNDLength 					; bump queue length.
.db7b	bb7b	68		pla				pla 								; get channel # back
.db7c	bb7c	20 a7 ba	jsr $baa7			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db7f	bb7f					_SNDQRExit:
.db7f	bb7f	60		rts				rts
.db80	bb80					SNDSilenceChannel:
.db80	bb80	aa		tax				tax 								; zero time left.
.db81	bb81	9e 47 08	stz $0847,x			stz 	SNDTimeLeft,x
.db84	bb84	0a		asl a				asl 	a 							; shift into position
.db85	bb85	0a		asl a				asl 	a
.db86	bb86	0a		asl a				asl 	a
.db87	bb87	0a		asl a				asl 	a
.db88	bb88	0a		asl a				asl 	a
.db89	bb89	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db8b	bb8b	20 8f bb	jsr $bb8f			jsr 	SNDWritePorts
.db8e	bb8e	60		rts				rts
.db8f	bb8f					SNDWritePorts:
.db8f	bb8f	da		phx				phx 								; save X
.db90	bb90	a6 01		ldx $01				ldx 	1 							; save I/O status
.db92	bb92	64 01		stz $01				stz 	1 							; access I/O page 0
.db94	bb94	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db97	bb97	8d 10 d6	sta $d610			sta 	$D610
.db9a	bb9a	86 01		stx $01				stx 	1 							; restore I/O
.db9c	bb9c	fa		plx				plx 								; restore X
.db9d	bb9d	60		rts				rts
.db9e	bb9e					Export_SNDCommand:
.db9e	bb9e	da		phx				phx 								; save XY
.db9f	bb9f	5a		phy				phy
.dba0	bba0	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dba2	bba2	f0 1d		beq $bbc1			beq 	_SNDInitialise
.dba4	bba4	90 28		bcc $bbce			bcc 	_SNDExit
.dba6	bba6	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dba8	bba8	f0 17		beq $bbc1			beq 	_SNDSilence
.dbaa	bbaa	b0 22		bcs $bbce			bcs 	_SNDExit
.dbac	bbac	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbae	bbae	b0 09		bcs $bbb9			bcs 	_SNDQueryPlay
.dbb0	bbb0	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbb2	bbb2	b0 1a		bcs $bbce			bcs 	_SNDExit
.dbb4	bbb4	20 53 bb	jsr $bb53			jsr 	SNDQueueRequest
.dbb7	bbb7	80 15		bra $bbce			bra 	_SNDExit
.dbb9	bbb9					_SNDQueryPlay:
.dbb9	bbb9	29 03		and #$03			and 	#3 							; get channel #
.dbbb	bbbb	aa		tax				tax
.dbbc	bbbc	bd 47 08	lda $0847,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbbf	bbbf	80 0d		bra $bbce			bra 	_SNDExit
.dbc1	bbc1					_SNDInitialise:
.dbc1	bbc1					_SNDSilence:
.dbc1	bbc1	9c 3a 07	stz $073a			stz 	SNDLength 					; empty the queue.
.dbc4	bbc4	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbc6	bbc6					_SNDSilenceLoop:
.dbc6	bbc6	48		pha				pha
.dbc7	bbc7	20 80 bb	jsr $bb80			jsr 	SNDSilenceChannel
.dbca	bbca	68		pla				pla
.dbcb	bbcb	3a		dec a				dec 	a
.dbcc	bbcc	10 f8		bpl $bbc6			bpl 	_SNDSilenceLoop
.dbce	bbce					_SNDExit:
.dbce	bbce	7a		ply				ply
.dbcf	bbcf	fa		plx				plx
.dbd0	bbd0	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.073a						SNDLength:
>073a								.fill 	1
.073b						SNDQueue:
>073b								.fill 	SNDQueueSize * 8
.083b						SNDPitchLow:
>083b								.fill 	4
.083f						SNDPitchHigh:
>083f								.fill 	4
.0843						SNDVolume:
>0843								.fill 	4
.0847						SNDTimeLeft:
>0847								.fill 	4
.084b						SNDAdjustLow:
>084b								.fill 	4
.084f						SNDAdjustHigh:
>084f								.fill 	4
.dbd1	bbd1					Export_SNDUpdate:
.dbd1	bbd1					PagedSNDUpdate:
.dbd1	bbd1	ad 47 08	lda $0847			lda 	SNDTimeLeft+0 				; look at time remaining
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot0 					; not playing
.dbd6	bbd6	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbd8	bbd8	20 fa bb	jsr $bbfa			jsr 	SNDUpdateChannel 			; update it.
.dbdb	bbdb					_SNDUNot0:
.dbdb	bbdb	ad 48 08	lda $0848			lda 	SNDTimeLeft+1
.dbde	bbde	f0 05		beq $bbe5			beq 	_SNDUNot1
.dbe0	bbe0	a2 01		ldx #$01			ldx 	#1
.dbe2	bbe2	20 fa bb	jsr $bbfa			jsr 	SNDUpdateChannel
.dbe5	bbe5					_SNDUNot1:
.dbe5	bbe5	ad 49 08	lda $0849			lda 	SNDTimeLeft+2
.dbe8	bbe8	f0 05		beq $bbef			beq 	_SNDUNot2
.dbea	bbea	a2 02		ldx #$02			ldx 	#2
.dbec	bbec	20 fa bb	jsr $bbfa			jsr 	SNDUpdateChannel
.dbef	bbef					_SNDUNot2:
.dbef	bbef	ad 4a 08	lda $084a			lda 	SNDTimeLeft+3
.dbf2	bbf2	f0 05		beq $bbf9			beq 	_SNDUNot3
.dbf4	bbf4	a2 03		ldx #$03			ldx 	#3
.dbf6	bbf6	20 fa bb	jsr $bbfa			jsr 	SNDUpdateChannel
.dbf9	bbf9					_SNDUNot3:
.dbf9	bbf9	60		rts				rts
.dbfa	bbfa					SNDUpdateChannel:
.dbfa	bbfa	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbfc	bbfc	f0 2c		beq $bc2a			beq 	_SNDUCExit
.dbfe	bbfe	3a		dec a				dec 	a 							; decrement and update timer
.dbff	bbff	9d 47 08	sta $0847,x			sta 	SNDTimeLeft,x
.dc02	bc02	f0 1d		beq $bc21			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc04	bc04	bd 4b 08	lda $084b,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc07	bc07	1d 4f 08	ora $084f,x			ora 	SNDAdjustHigh,x
.dc0a	bc0a	f0 1e		beq $bc2a			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc0c	bc0c	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc0d	bc0d	bd 3b 08	lda $083b,x			lda 	SNDPitchLow,x
.dc10	bc10	7d 4b 08	adc $084b,x			adc 	SNDAdjustLow,x
.dc13	bc13	9d 3b 08	sta $083b,x			sta 	SNDPitchLow,x
.dc16	bc16	bd 3f 08	lda $083f,x			lda 	SNDPitchHigh,x
.dc19	bc19	7d 4f 08	adc $084f,x			adc 	SNDAdjustHigh,x
.dc1c	bc1c	29 03		and #$03			and 	#3
.dc1e	bc1e	9d 3f 08	sta $083f,x			sta 	SNDPitchHigh,x
.dc21	bc21					_SNDUCUpdate:
.dc21	bc21	8a		txa				txa 								; which channel.
.dc22	bc22	48		pha				pha
.dc23	bc23	20 e6 ba	jsr $bae6			jsr 	SNDUpdateNote 				; update the current note
.dc26	bc26	68		pla				pla
.dc27	bc27	20 a7 ba	jsr $baa7			jsr 	SNDCheckChannel 			; more to do ?
.dc2a	bc2a					_SNDUCExit:
.dc2a	bc2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc2b	bc2b					Export_KNLInputSingleCharacter:
.dc2b	bc2b					PagedInputSingleCharacter:
.dc2b	bc2b	da		phx				phx
.dc2c	bc2c	5a		phy				phy
.dc2d	bc2d					_EISCWait:
.dc2d	bc2d	a5 01		lda $01				lda 	1 							; save I/O 0
.dc2f	bc2f	48		pha				pha
.dc30	bc30	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc32	bc32	38		sec				sec 								; calculate timer - LastTick
.dc33	bc33	ad 59 d6	lda $d659			lda 	$D659
.dc36	bc36	cd 6b 06	cmp $066b			cmp 	LastTick
.dc39	bc39	f0 06		beq $bc41			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc3b	bc3b	8d 6b 06	sta $066b			sta 	LastTick 					; update last timer
.dc3e	bc3e	20 d1 bb	jsr $bbd1			jsr 	PagedSNDUpdate 							; go do the code.
.dc41	bc41					_NoFireTick:
.dc41	bc41	68		pla				pla 								; restore I/O 0
.dc42	bc42	85 01		sta $01				sta 	1
.dc44	bc44	20 4e bc	jsr $bc4e			jsr 	CheckKeyPressed
.dc47	bc47	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc49	bc49	f0 e2		beq $bc2d			beq 	_EISCWait
.dc4b	bc4b	7a		ply				ply
.dc4c	bc4c	fa		plx				plx
.dc4d	bc4d	60		rts				rts
.dc4e	bc4e					Export_KNLInkey:
.dc4e	bc4e					CheckKeyPressed:
.dc4e	bc4e	a9 53		lda #$53			lda     #<event 					; tell kernel where events go.
.dc50	bc50	85 f0		sta $f0				sta     kernel.args.events+0
.dc52	bc52	a9 08		lda #$08			lda     #>event
.dc54	bc54	85 f1		sta $f1				sta     kernel.args.events+1
.dc56	bc56	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc59	bc59	b0 0b		bcs $bc66			bcs 	_CKPNoEvent 				; no event
.dc5b	bc5b	ad 53 08	lda $0853			lda     event.type
.dc5e	bc5e	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc60	bc60	d0 04		bne $bc66			bne 	_CKPNoEvent
.dc62	bc62	ad 58 08	lda $0858			lda     event.key.ascii
.dc65	bc65	60		rts				rts
.dc66	bc66					_CKPNoEvent:
.dc66	bc66	a9 00		lda #$00			lda 	#0
.dc68	bc68	60		rts				rts
.dc69	bc69					Export_EXTReadController:
.dc69	bc69	da		phx				phx
.dc6a	bc6a	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc6c	bc6c	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc6e	bc6e	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc71	bc71	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc73	bc73	fa		plx				plx
.dc74	bc74	60		rts				rts
.0853						event
>0853						type        .byte   ?   ; Enum above
>0854						buf         .byte   ?   ; page id or zero
>0855						ext         .byte   ?   ; page id or zero
.0856						key
>0856						keyboard    .byte   ?   ; Keyboard ID
>0857						raw         .byte   ?   ; Raw key ID
>0858						ascii       .byte   ?   ; ASCII value
>0859						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0856						mouse
.0856						delta
>0856						x           .byte   ?
>0857						y           .byte   ?
>0858						z           .byte   ?
>0859						buttons     .byte   ?
.0856						clicks
>0856						inner       .byte   ?
>0857						middle      .byte   ?
>0858						outer       .byte   ?
.0856						joystick
>0856						joy0        .byte   ?
>0857						joy1        .byte   ?
.0856						udp
>0856						token       .byte   ?   ; TODO: break out into fields
.0856						file
>0856						stream      .byte   ?
>0857						cookie      .byte   ?
.0858						data
>0858						requested   .byte   ?   ; Requested number of bytes to read
>0859						read        .byte   ?   ; Number of bytes actually read
.0858						wrote
>0858						requested   .byte   ?   ; Requested number of bytes to read
>0859						wrote       .byte   ?   ; Number of bytes actually read
.0856						directory
>0856						stream      .byte   ?
>0857						cookie      .byte   ?
.0858						volume
>0858						len         .byte   ?   ; Length of volname (in buf)
>0859						flags       .byte   ?   ; block size, text encoding
.0858						file
>0858						len         .byte   ?
>0859						flags       .byte   ?   ; block scale, text encoding, approx size
.0858						free
>0858						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc75	bc75					Export_KNLOpenFileWrite:
.dc75	bc75	48		pha				pha
.dc76	bc76	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc78	bc78	80 03		bra $bc7d			bra 	KNLOpenStart
.dc7a	bc7a					Export_KNLOpenFileRead:
.dc7a	bc7a	48		pha				pha
.dc7b	bc7b	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc7d	bc7d					KNLOpenStart:
.dc7d	bc7d	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc7f	bc7f	68		pla				pla
.dc80	bc80	20 bb bc	jsr $bcbb			jsr 	KNLSetupFileName
.dc83	bc83	a9 53		lda #$53			lda     #event & $FF 				; tell kernel where to store event data
.dc85	bc85	85 f0		sta $f0				sta     kernel.args.events+0
.dc87	bc87	a9 08		lda #$08			lda     #event >> 8
.dc89	bc89	85 f1		sta $f1				sta     kernel.args.events+1
.dc8b	bc8b	ad 68 06	lda $0668			lda 	DefaultDrive 				; currently drive zero only.
.dc8e	bc8e	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc90	bc90	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc93	bc93	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc95	bc95	b0 1d		bcs $bcb4			bcs     _out
.dc97	bc97					_loop
.dc97	bc97	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc9a	bc9a	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc9d	bc9d	b0 f8		bcs $bc97			bcs     _loop
.dc9f	bc9f	ad 53 08	lda $0853			lda 	event.type
.dca2	bca2	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dca4	bca4	f0 0a		beq $bcb0			beq 	_success
.dca6	bca6	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dca8	bca8	f0 0a		beq $bcb4			beq 	_out
.dcaa	bcaa	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dcac	bcac	f0 06		beq $bcb4			beq 	_out
.dcae	bcae	80 e7		bra $bc97			bra     _loop
.dcb0	bcb0					_success
.dcb0	bcb0	ad 56 08	lda $0856			lda     event.file.stream
.dcb3	bcb3	18		clc				clc
.dcb4	bcb4					_out
.dcb4	bcb4	60		rts				rts
.dcb5	bcb5					Export_KNLCloseFile:
.dcb5	bcb5	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dcb7	bcb7	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dcba	bcba	60		rts				rts
.dcbb	bcbb					KNLSetupFileName:
.dcbb	bcbb	5a		phy				phy 								; save Y on stack
.dcbc	bcbc	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dcbe	bcbe	86 37		stx $37				stx 	zTemp0+1
.dcc0	bcc0	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dcc2	bcc2	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dcc4	bcc4	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dcc6	bcc6					_KNLGetLength:
.dcc6	bcc6	c8		iny				iny
.dcc7	bcc7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcc9	bcc9	d0 fb		bne $bcc6			bne 	_KNLGetLength
.dccb	bccb	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dccd	bccd	7a		ply				ply
.dcce	bcce	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.085a						KNLStream:
>085a								.byte   ?
.085b						KNLReadBuffer:
>085b								.fill   KNLReadBufferLen
.089b						KNLNext:
>089b								.byte   ?
.089c						KNLEnd:
>089c								.byte   ?
.dccf	bccf					Export_KNLReadByteInit:
.dccf	bccf	8d 5a 08	sta $085a			sta     KNLStream 					; save stream
.dcd2	bcd2	9c 9b 08	stz $089b			stz     KNLNext 					; reset buffer
.dcd5	bcd5	9c 9c 08	stz $089c			stz     KNLEnd
.dcd8	bcd8	60		rts				rts
.dcd9	bcd9					Export_KNLReadByte:
.dcd9	bcd9	da		phx				phx
.dcda	bcda	ae 9b 08	ldx $089b			ldx     KNLNext 					; all data consumed ?
.dcdd	bcdd	ec 9c 08	cpx $089c			cpx     KNLEnd
.dce0	bce0	d0 10		bne $bcf2			bne     _KNLRBGetNextByte
.dce2	bce2	ad 5a 08	lda $085a			lda     KNLStream
.dce5	bce5	20 fb bc	jsr $bcfb			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dce8	bce8	b0 0f		bcs $bcf9			bcs     _KNLRBError 				; error has occurred on read.
.dcea	bcea	8d 9c 08	sta $089c			sta     KNLEnd 						; # read is the number available
.dced	bced	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcef	bcef	8e 9b 08	stx $089b			stx     KNLNext
.dcf2	bcf2					_KNLRBGetNextByte:
.dcf2	bcf2	bd 5b 08	lda $085b,x			lda     KNLReadBuffer,x 			; get the next data item
.dcf5	bcf5	ee 9b 08	inc $089b			inc     KNLNext 					; and advance the index
.dcf8	bcf8	18		clc				clc 								; succeeded
.dcf9	bcf9					_KNLRBError:
.dcf9	bcf9	fa		plx				plx
.dcfa	bcfa	60		rts				rts
.dcfb	bcfb					Export_KNLReadBlock:
.dcfb	bcfb					KNLRBGetNextBlock:
.dcfb	bcfb	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcfd	bcfd	a9 40		lda #$40			lda     #KNLReadBufferLen 			; set bytes to read.
.dcff	bcff	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dd01	bd01	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dd04	bd04	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dd06	bd06	b0 2e		bcs $bd36			bcs     _KGNBExitFail               ; report as general error
.dd08	bd08					_KGRBEventLoop:
.dd08	bd08	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dd0b	bd0b	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd0e	bd0e	b0 f8		bcs $bd08			bcs     _KGRBEventLoop
.dd10	bd10	ad 53 08	lda $0853			lda 	event.type 					; get event
.dd13	bd13	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dd15	bd15	f0 0a		beq $bd21			beq     _KNLRBGetNextByte
.dd17	bd17	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dd19	bd19	f0 1b		beq $bd36			beq 	_KGNBExitFail
.dd1b	bd1b	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd1d	bd1d	f0 17		beq $bd36			beq 	_KGNBExitFail
.dd1f	bd1f	80 e7		bra $bd08			bra 	_KGRBEventLoop
.dd21	bd21					_KNLRBGetNextByte:
.dd21	bd21	a9 5b		lda #$5b			lda     #<KNLReadBuffer 					; Set the target buffer
.dd23	bd23	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd25	bd25	a9 08		lda #$08			lda     #>KNLReadBuffer
.dd27	bd27	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd29	bd29	ad 59 08	lda $0859			lda     event.file.data.read 		; Set the target length
.dd2c	bd2c	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd2e	bd2e	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd31	bd31	ad 59 08	lda $0859			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd34	bd34	18		clc				clc
.dd35	bd35	60		rts				rts
.dd36	bd36					_KGNBExitFail:
.dd36	bd36	38		sec				sec
.dd37	bd37	60		rts				rts
.dd38	bd38					Export_KNLWriteBlock:
.dd38	bd38	da		phx				phx
.dd39	bd39	5a		phy				phy
.dd3a	bd3a	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd3c	bd3c	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd3e	bd3e	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd40	bd40	a5 37		lda $37				lda     zTemp0+1
.dd42	bd42	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd44	bd44	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd46	bd46	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd49	bd49	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd4b	bd4b	b0 21		bcs $bd6e			bcs 	_KWBFailed
.dd4d	bd4d					_KNLWLoop:
.dd4d	bd4d	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd50	bd50	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd53	bd53	b0 f8		bcs $bd4d			bcs     _KNLWLoop
.dd55	bd55	ad 53 08	lda $0853			lda     event.type 					; various errors.
.dd58	bd58	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd5a	bd5a	f0 12		beq $bd6e			beq 	_KWBFailed
.dd5c	bd5c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd5e	bd5e	f0 0e		beq $bd6e			beq 	_KWBFailed
.dd60	bd60	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd62	bd62	f0 0a		beq $bd6e			beq 	_KWBFailed
.dd64	bd64	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd66	bd66	d0 e5		bne $bd4d			bne 	_KNLWLoop
.dd68	bd68	18		clc				clc
.dd69	bd69	ad 59 08	lda $0859			lda    event.file.wrote.wrote 		; get bytes written.
.dd6c	bd6c	80 01		bra $bd6f			bra 	_KWBExit
.dd6e	bd6e					_KWBFailed:
.dd6e	bd6e	38		sec				sec
.dd6f	bd6f					_KWBExit:
.dd6f	bd6f	7a		ply				ply
.dd70	bd70	fa		plx				plx
.dd71	bd71	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
