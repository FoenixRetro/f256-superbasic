
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 22 14:07:13 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_ASSERT                           = $a4; $a4 ASSERT
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 3f 81	jsr $813f			jsr 	NewCommand 					; erase current program
.8016	20 50 87	jsr $8750			jsr 	BackloadProgram
.8019	4c 56 81	jmp $8156			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.8023					VectorSetPunc:
>8023	9a 81					.word	ShiftLeft                        ; $00 <<
>8025	18 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8027	0f 8c					.word	BinaryCompareNotEqual            ; $02 <>
>8029	a4 8d					.word	SyntaxError                      ; $03 !!3
>802b	a4 8d					.word	SyntaxError                      ; $04 ><
>802d	21 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>802f	9d 81					.word	ShiftRight                       ; $06 >>
>8031	a4 8d					.word	SyntaxError                      ; $07 !!7
>8033	a4 8d					.word	SyntaxError                      ; $08 !!8
>8035	a4 8d					.word	SyntaxError                      ; $09 !!9
>8037	a4 8d					.word	SyntaxError                      ; $0a !!10
>8039	a4 8d					.word	SyntaxError                      ; $0b !!11
>803b	a4 8d					.word	SyntaxError                      ; $0c !!12
>803d	a4 8d					.word	SyntaxError                      ; $0d !!13
>803f	a4 8d					.word	SyntaxError                      ; $0e !!14
>8041	a4 8d					.word	SyntaxError                      ; $0f !!15
>8043	a4 8d					.word	SyntaxError                      ; $10 @
>8045	a4 8d					.word	SyntaxError                      ; $11 !!17
>8047	a4 8d					.word	SyntaxError                      ; $12 !!18
>8049	a4 8d					.word	SyntaxError                      ; $13 [
>804b	67 8c					.word	IntegerDivide                    ; $14 \
>804d	a4 8d					.word	SyntaxError                      ; $15 ]
>804f	1a 83					.word	EorInteger                       ; $16 ^
>8051	a4 8d					.word	SyntaxError                      ; $17 _
>8053	a4 8d					.word	SyntaxError                      ; $18 `
>8055	a4 8d					.word	SyntaxError                      ; $19 !!25
>8057	a4 8d					.word	SyntaxError                      ; $1a !!26
>8059	a4 8d					.word	SyntaxError                      ; $1b {
>805b	d8 82					.word	OraInteger                       ; $1c |
>805d	a4 8d					.word	SyntaxError                      ; $1d }
>805f	a4 8d					.word	SyntaxError                      ; $1e ~
>8061	a4 8d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8063	a4 8d					.word	SyntaxError                      ; $20
>8065	a4 8d					.word	SyntaxError                      ; $21 !
>8067	a4 8d					.word	SyntaxError                      ; $22 "
>8069	a4 8d					.word	SyntaxError                      ; $23 #
>806b	a4 8d					.word	SyntaxError                      ; $24 $
>806d	b3 8c					.word	IntegerModulus                   ; $25 %
>806f	96 82					.word	AndInteger                       ; $26 &
>8071	a4 8d					.word	SyntaxError                      ; $27 '
>8073	a4 8d					.word	SyntaxError                      ; $28 (
>8075	a4 8d					.word	SyntaxError                      ; $29 )
>8077	23 8d					.word	MulInteger                       ; $2a *
>8079	30 82					.word	AddInteger                       ; $2b +
>807b	a4 8d					.word	SyntaxError                      ; $2c ,
>807d	6b 82					.word	SubInteger                       ; $2d -
>807f	a4 8d					.word	SyntaxError                      ; $2e .
>8081	a4 8d					.word	SyntaxError                      ; $2f /
>8083	a4 8d					.word	SyntaxError                      ; $30 0
>8085	a4 8d					.word	SyntaxError                      ; $31 1
>8087	a4 8d					.word	SyntaxError                      ; $32 2
>8089	a4 8d					.word	SyntaxError                      ; $33 3
>808b	a4 8d					.word	SyntaxError                      ; $34 4
>808d	a4 8d					.word	SyntaxError                      ; $35 5
>808f	a4 8d					.word	SyntaxError                      ; $36 6
>8091	a4 8d					.word	SyntaxError                      ; $37 7
>8093	a4 8d					.word	SyntaxError                      ; $38 8
>8095	a4 8d					.word	SyntaxError                      ; $39 9
>8097	a4 8d					.word	SyntaxError                      ; $3a :
>8099	a4 8d					.word	SyntaxError                      ; $3b ;
>809b	fb 8b					.word	BinaryCompareLess                ; $3c <
>809d	f1 8b					.word	BinaryCompareEqual               ; $3d =
>809f	05 8c					.word	BinaryCompareGreater             ; $3e >
>80a1	a4 8d					.word	SyntaxError                      ; $3f ?
.80a3					VectorSet0:
>80a3	8d 81					.word	EOLCommand                       ; $80 !0:EOF
>80a5	a4 8d					.word	SyntaxError                      ; $81 !1:SH1
>80a7	a4 8d					.word	SyntaxError                      ; $82 !2:SH2
>80a9	a4 8d					.word	SyntaxError                      ; $83 ABS(
>80ab	a4 8d					.word	SyntaxError                      ; $84 ALLOC(
>80ad	a4 8d					.word	SyntaxError                      ; $85 ASC(
>80af	a4 8d					.word	SyntaxError                      ; $86 CHR$(
>80b1	a4 8d					.word	SyntaxError                      ; $87 DEC(
>80b3	ee 8b					.word	ReturnFalse                      ; $88 FALSE
>80b5	a4 8d					.word	SyntaxError                      ; $89 GETDATE$(
>80b7	a4 8d					.word	SyntaxError                      ; $8a GETTIME$(
>80b9	a4 8d					.word	SyntaxError                      ; $8b HEX$(
>80bb	a4 8d					.word	SyntaxError                      ; $8c INT(
>80bd	a4 8d					.word	SyntaxError                      ; $8d ISVAL(
>80bf	a4 8d					.word	SyntaxError                      ; $8e LEFT$(
>80c1	a4 8d					.word	SyntaxError                      ; $8f LEN(
>80c3	a4 8d					.word	SyntaxError                      ; $90 MID$(
>80c5	a4 8d					.word	SyntaxError                      ; $91 NOT
>80c7	a4 8d					.word	SyntaxError                      ; $92 PAGE
>80c9	a4 8d					.word	SyntaxError                      ; $93 RIGHT$(
>80cb	a4 8d					.word	SyntaxError                      ; $94 RND(
>80cd	a4 8d					.word	SyntaxError                      ; $95 SGN(
>80cf	a4 8d					.word	SyntaxError                      ; $96 SPC(
>80d1	a4 8d					.word	SyntaxError                      ; $97 STR$(
>80d3	e3 8b					.word	ReturnTrue                       ; $98 TRUE
>80d5	a4 8d					.word	SyntaxError                      ; $99 VAL(
>80d7	a4 8d					.word	SyntaxError                      ; $9a FOR
>80d9	a4 8d					.word	SyntaxError                      ; $9b IF
>80db	a4 8d					.word	SyntaxError                      ; $9c PROC
>80dd	a4 8d					.word	SyntaxError                      ; $9d REPEAT
>80df	a4 8d					.word	SyntaxError                      ; $9e WHILE
>80e1	a4 8d					.word	SyntaxError                      ; $9f ENDIF
>80e3	a4 8d					.word	SyntaxError                      ; $a0 ENDPROC
>80e5	a4 8d					.word	SyntaxError                      ; $a1 NEXT
>80e7	a4 8d					.word	SyntaxError                      ; $a2 UNTIL
>80e9	a4 8d					.word	SyntaxError                      ; $a3 WEND
>80eb	21 81					.word	AssertCommand                    ; $a4 ASSERT
>80ed	2f 81					.word	CallCommand                      ; $a5 CALL
>80ef	a4 8d					.word	SyntaxError                      ; $a6 CLS
>80f1	a4 8d					.word	SyntaxError                      ; $a7 DATA
>80f3	a4 8d					.word	SyntaxError                      ; $a8 DIM
>80f5	a4 8d					.word	SyntaxError                      ; $a9 GOSUB
>80f7	a4 8d					.word	SyntaxError                      ; $aa GOTO
>80f9	a4 8d					.word	SyntaxError                      ; $ab LET
>80fb	a4 8d					.word	SyntaxError                      ; $ac PRINT
>80fd	a4 8d					.word	SyntaxError                      ; $ad READ
>80ff	49 81					.word	RemCommand                       ; $ae REM
>8101	a4 8d					.word	SyntaxError                      ; $af RETURN
>8103	a4 8d					.word	SyntaxError                      ; $b0 THEN
>8105	a4 8d					.word	SyntaxError                      ; $b1 TO
.8107					VectorSet1:
>8107	a4 8d					.word	SyntaxError                      ; $80 !0:EOF
>8109	a4 8d					.word	SyntaxError                      ; $81 !1:SH1
>810b	a4 8d					.word	SyntaxError                      ; $82 !2:SH2
>810d	3b 81					.word	ClearCommand                     ; $83 CLEAR
>810f	3c 81					.word	EndCommand                       ; $84 END
>8111	a4 8d					.word	SyntaxError                      ; $85 LIST
>8113	3f 81					.word	NewCommand                       ; $86 NEW
>8115	a4 8d					.word	SyntaxError                      ; $87 RESTORE
>8117	56 81					.word	CommandRUN                       ; $88 RUN
>8119	a4 8d					.word	SyntaxError                      ; $89 STOP
.811b					VectorSet2:
>811b	a4 8d					.word	SyntaxError                      ; $80 !0:EOF
>811d	a4 8d					.word	SyntaxError                      ; $81 !1:SH1
>811f	a4 8d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8121					AssertCommand:
.8121	20 3a 86	jsr $863a			jsr 	EvaluateInteger 			; the assert test
.8124	20 f0 86	jsr $86f0			jsr 	NSMIsZero 					; exit if result is non zero.
.8127	d0 05		bne $812e			bne 	_ACExit
.8129	a9 0a		lda #$0a		lda	#10
.812b	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812e					_ACExit:
.812e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.812f					CallCommand:
.812f	20 4f 86	jsr $864f			jsr 	Evaluate16BitInteger
.8132	ad 10 06	lda $0610			lda 	NSMantissa1
.8135	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8138	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813b					ClearCommand:
.813b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813c					EndCommand:
.813c	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.813f					NewCommand:
.813f	20 fd 86	jsr $86fd			jsr 	MemoryNew
.8142	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8145	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear everything.
.8148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8149					RemCommand:
.8149	b1 30		lda ($30),y			lda 	(codePtr),y
.814b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.814d	d0 06		bne $8155			bne 	_RMExit
.814f	c8		iny				iny
.8150	98		tya				tya
.8151	38		sec				sec
.8152	71 30		adc ($30),y			adc 	(codePtr),y
.8154	a8		tay				tay
.8155					_RMExit:
.8155	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8156					CommandRUN:
.8156	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8159	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.815b	85 30		sta $30				sta 	codePtr
.815d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.815f	85 31		sta $31				sta 	codePtr+1
.8161					RUNNewLine:
.8161	b2 30		lda ($30)			lda 	(codePtr)
.8163	f0 25		beq $818a			beq 	CRNoProgram         		; no then END.
.8165	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8167	9a		txs				txs
.8168					RUNCodePointerLine:
.8168	a0 02		ldy #$02			ldy 	#2 							; start of program
.816a					_CRIncMainLoop:
.816a	c8		iny				iny
.816b					_CRMainLoop:
.816b	b1 30		lda ($30),y			lda 	(codePtr),y
.816d	10 10		bpl $817f			bpl 	_CRNotKeyword
.816f	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8171	b0 04		bcs $8177			bcs 	_CRIsKeyword
.8173	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8175	b0 0d		bcs $8184			bcs		_CRSyntaxError
.8177					_CRIsKeyword:
.8177	c8		iny				iny 								; consume command
.8178	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8179	aa		tax				tax 								; put in X for vector jump
.817a	20 87 81	jsr $8187			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.817d	80 ec		bra $816b			bra 	_CRMainLoop 				; and loop round
.817f					_CRNotKeyword:
.817f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8181	f0 e7		beq $816a			beq 	_CRIncMainLoop
>8183	db						.byte 	$DB 						; causes a break in the emulator
.8184					_CRSyntaxError:
.8184	4c a4 8d	jmp $8da4			jmp 	SyntaxError
.8187					_CRCallVector0:
.8187	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x)
.818a					CRNoProgram:
.818a	4c 3c 81	jmp $813c			jmp 	EndCommand
.818d					EOLCommand:
.818d	18		clc				clc
.818e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8190	65 30		adc $30				adc 	codePtr
.8192	85 30		sta $30				sta 	codePtr
.8194	90 02		bcc $8198			bcc 	_CREExit
.8196	e6 31		inc $31				inc 	codePtr+1
.8198					_CREExit:
.8198	80 c7		bra $8161			bra 	RunNewLine

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8bca					CheckRightBracket:
.8bca	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcc	c8		iny				iny
.8bcd	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8bcf	d0 0f		bne $8be0			bne 	CNAFail
.8bd1	60		rts				rts
.8bd2					CheckComma:
.8bd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd4	c8		iny				iny
.8bd5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8bd7	d0 07		bne $8be0			bne 	CNAFail
.8bd9	60		rts				rts
.8bda					CheckNextA:
.8bda	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8bdc	d0 02		bne $8be0			bne 	CNAFail
.8bde	c8		iny				iny 								; skip character
.8bdf	60		rts				rts 								; and exit
.8be0					CNAFail:
.8be0	4c a4 8d	jmp $8da4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8be3					ReturnTrue:
.8be3	a9 01		lda #$01			lda 	#1  						; set to 1
.8be5	20 c2 86	jsr $86c2			jsr 	NSMSetByte
.8be8	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8bea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bed	60		rts				rts
.8bee					ReturnFalse:
.8bee	4c c0 86	jmp $86c0			jmp 	NSMSetZero 					; set it all to zero
.8bf1					BinaryCompareEqual:
.8bf1	fa		plx				plx
.8bf2	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8bf5	c9 00		cmp #$00			cmp 	#0
.8bf7	f0 ea		beq $8be3			beq 	ReturnTrue
.8bf9	80 f3		bra $8bee			bra 	ReturnFalse
.8bfb					BinaryCompareLess:
.8bfb	fa		plx				plx
.8bfc	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8bff	c9 ff		cmp #$ff			cmp 	#$FF
.8c01	f0 e0		beq $8be3			beq 	ReturnTrue
.8c03	80 e9		bra $8bee			bra 	ReturnFalse
.8c05					BinaryCompareGreater:
.8c05	fa		plx				plx
.8c06	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8c09	c9 01		cmp #$01			cmp 	#1
.8c0b	f0 d6		beq $8be3			beq 	ReturnTrue
.8c0d	80 df		bra $8bee			bra 	ReturnFalse
.8c0f					BinaryCompareNotEqual:
.8c0f	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8c12	c9 00		cmp #$00			cmp 	#0
.8c14	d0 cd		bne $8be3			bne 	ReturnTrue
.8c16	80 d6		bra $8bee			bra 	ReturnFalse
.8c18					BinaryCompareLessEqual:
.8c18	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8c1b	c9 01		cmp #$01			cmp 	#1
.8c1d	d0 c4		bne $8be3			bne 	ReturnTrue
.8c1f	80 cd		bra $8bee			bra 	ReturnFalse
.8c21					BinaryCompareGreaterEqual:
.8c21	20 2a 8c	jsr $8c2a			jsr 	CompareBaseCode
.8c24	c9 ff		cmp #$ff			cmp 	#$FF
.8c26	d0 bb		bne $8be3			bne 	ReturnTrue
.8c28	80 c4		bra $8bee			bra 	ReturnFalse
.8c2a					CompareBaseCode:
.8c2a	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; make both values if references.
.8c2d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c30	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c33	29 10		and #$10			and 	#NSTString
.8c35	d0 2e		bne $8c65			bne 	_CBCString
.8c37	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c3a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c3d	d0 27		bne $8c66			bne 	_CBCFloat
.8c3f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c42	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c45	10 0b		bpl $8c52			bpl 	_CDCSameSign
.8c47	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c4a	30 16		bmi $8c62			bmi 	_CBCLess 					; return $FF
.8c4c					_CBCGreater:
.8c4c	a9 01		lda #$01			lda 	#1
.8c4e	60		rts				rts
.8c4f					_CBCEqual:
.8c4f	a9 00		lda #$00			lda 	#0
.8c51	60		rts				rts
.8c52					_CDCSameSign:
.8c52	20 0a 82	jsr $820a			jsr 	SubTopTwoStack 				; unsigned subtract
.8c55	20 f0 86	jsr $86f0			jsr 	NSMIsZero 					; or the mantissa together
.8c58	f0 f5		beq $8c4f			beq 	_CBCEqual
.8c5a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c5d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c60	10 ea		bpl $8c4c			bpl 	_CBCGreater
.8c62					_CBCLess:
.8c62	a9 ff		lda #$ff			lda 	#$FF
.8c64	60		rts				rts
.8c65					_CBCString:
>8c65	db						.byte 	$DB 						; causes a break in the emulator
.8c66					_CBCFloat:
>8c66	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8c67					IntegerDivide:
.8c67	fa		plx				plx
.8c68	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c6b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c6e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c6f	0a		asl a				asl 	a
.8c70	10 05		bpl $8c77			bpl 	_NotRef
.8c72	48		pha				pha
.8c73	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c76	68		pla				pla
.8c77					_NotRef:
.8c77	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c79	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c7c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c7f	f0 03		beq $8c84			beq 	_IntegerCode 				; if clear, then we have two integers
.8c81	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.8c84					_IntegerCode:
.8c84	20 a6 8c	jsr $8ca6			jsr 	CheckDivideZero 			; do div zero check
.8c87	20 dd 8c	jsr $8cdd			jsr 	Int32Divide 				; do the division
.8c8a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8c8d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c90	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8c93	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c96	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8c99	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c9c	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8c9f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ca2	20 96 8d	jsr $8d96			jsr 	CalculateSign 				; calculate result sign
.8ca5	60		rts				rts
.8ca6					CheckDivideZero:
.8ca6	e8		inx				inx
.8ca7	20 f0 86	jsr $86f0			jsr 	NSMIsZero
.8caa	f0 02		beq $8cae			beq 	_CDVError
.8cac	ca		dex				dex
.8cad	60		rts				rts
.8cae					_CDVError:
.8cae	a9 03		lda #$03		lda	#3
.8cb0	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8cb3					IntegerModulus:
.8cb3	fa		plx				plx
.8cb4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cb7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cbb	0a		asl a				asl 	a
.8cbc	10 05		bpl $8cc3			bpl 	_NotRef
.8cbe	48		pha				pha
.8cbf	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8cc2	68		pla				pla
.8cc3					_NotRef:
.8cc3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8cc5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8cc8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ccb	f0 03		beq $8cd0			beq 	_IntegerCode 				; if clear, then we have two integers
.8ccd	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.8cd0					_IntegerCode:
.8cd0	20 a6 8c	jsr $8ca6			jsr 	CheckDivideZero 			; do div zero check
.8cd3	20 dd 8c	jsr $8cdd			jsr 	Int32Divide 				; do the division
.8cd6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8cd9	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8cdc	60		rts				rts
.8cdd					Int32Divide:
.8cdd	48		pha				pha 								; save AXY
.8cde	5a		phy				phy
.8cdf	20 97 86	jsr $8697			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ce2	20 bc 86	jsr $86bc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8ce5	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8ce7					_I32DivideLoop:
.8ce7	e8		inx				inx
.8ce8	e8		inx				inx
.8ce9	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8cec	ca		dex				dex
.8ced	ca		dex				dex
.8cee	20 d6 86	jsr $86d6			jsr 	NSMRotateLeft
.8cf1	20 19 8d	jsr $8d19			jsr 	DivideCheckSubtract 		; check if subtract possible
.8cf4	90 03		bcc $8cf9			bcc 	_I32DivideNoCarryIn
.8cf6	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8cf9					_I32DivideNoCarryIn:
.8cf9	88		dey				dey 								; loop round till division completed.
.8cfa	d0 eb		bne $8ce7			bne 	_I32DivideLoop
.8cfc	7a		ply				ply 								; restore AXY and exit
.8cfd	68		pla				pla
.8cfe	60		rts				rts
.8cff					Int32ShiftDivide:
.8cff	48		pha				pha 								; save AXY
.8d00	5a		phy				phy
.8d01	20 97 86	jsr $8697			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d04	20 bc 86	jsr $86bc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d07	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8d09					_I32SDLoop:
.8d09	20 19 8d	jsr $8d19			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d0c	20 d6 86	jsr $86d6			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8d0f	e8		inx				inx
.8d10	20 d6 86	jsr $86d6			jsr 	NSMRotateLeft
.8d13	88		dey				dey 	 							; do 31 times
.8d14	d0 f3		bne $8d09			bne 	_I32SDLoop
.8d16	7a		ply				ply 								; restore AXY and exit
.8d17	68		pla				pla
.8d18	60		rts				rts
.8d19					DivideCheckSubtract:
.8d19	20 0a 82	jsr $820a			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8d1c	b0 04		bcs $8d22			bcs 	_DCSExit 					; if carry set, then could do, exit
.8d1e	20 e4 81	jsr $81e4			jsr 	AddTopTwoStack 				; add it back in
.8d21	18		clc				clc 								; and return False
.8d22					_DCSExit:
.8d22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8d23					MulInteger:
.8d23	fa		plx				plx
.8d24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d27	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d2a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d2b	0a		asl a				asl 	a
.8d2c	10 05		bpl $8d33			bpl 	_NotRef
.8d2e	48		pha				pha
.8d2f	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d32	68		pla				pla
.8d33					_NotRef:
.8d33	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d34	30 0b		bmi $8d41			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d36	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d39	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d3c	f0 06		beq $8d44			beq 	_IntegerCode 				; if clear, then we have two integers
.8d3e	4c b8 8d	jmp $8db8			jmp 	NotDoneError 							; otherwise at least one float.
.8d41					_StringData:
.8d41	4c b8 8d	jmp $8db8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8d44					_IntegerCode:
.8d44	20 51 8d	jsr $8d51			jsr 	MultiplyShort
.8d47	c9 00		cmp #$00			cmp 	#0
.8d49	f0 05		beq $8d50			beq 	_MIExit
.8d4b	a9 04		lda #$04		lda	#4
.8d4d	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d50					_MIExit:
.8d50	60		rts				rts
.8d51					MultiplyShort:
.8d51	5a		phy				phy 								; save Y
.8d52	20 97 86	jsr $8697			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d55	20 bc 86	jsr $86bc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8d58	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8d5a					_I32MLoop:
.8d5a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8d5d	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8d60	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8d63	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8d66	f0 28		beq $8d90			beq 	_I32MExit 					; exit if zero
.8d68	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8d6b	29 01		and #$01			and 	#1
.8d6d	f0 0e		beq $8d7d			beq 	_I32MNoAdd
.8d6f	20 e4 81	jsr $81e4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8d72	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8d75	10 06		bpl $8d7d			bpl 	_I32MNoAdd
.8d77					_I32ShiftRight:
.8d77	20 e3 86	jsr $86e3			jsr 	NSMShiftRight 				; shift S[X] right
.8d7a	c8		iny				iny 								; increment shift count
.8d7b	80 0a		bra $8d87			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8d7d					_I32MNoAdd:
.8d7d	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8d80	70 f5		bvs $8d77			bvs 	_I32ShiftRight 				; instead.
.8d82	e8		inx				inx
.8d83	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8d86	ca		dex				dex
.8d87					_I32MShiftUpper:
.8d87	e8		inx				inx 								; shift S[X+2] right
.8d88	e8		inx				inx
.8d89	20 e3 86	jsr $86e3			jsr 	NSMShiftRight
.8d8c	ca		dex				dex
.8d8d	ca		dex				dex
.8d8e	80 ca		bra $8d5a			bra 	_I32MLoop 					; try again.
.8d90					_I32MExit:
.8d90	20 96 8d	jsr $8d96			jsr 	CalculateSign
.8d93	98		tya				tya 								; shift in A
.8d94	7a		ply				ply 								; restore Y and exit
.8d95	60		rts				rts
.8d96					CalculateSign:
.8d96	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8d99	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8d9c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d9f	0a		asl a				asl 	a 							; shift bit 7 into carry
.8da0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8da3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.819a					ShiftLeft:
.819a	38		sec				sec
.819b	80 01		bra $819e			bra 	ShiftMain
.819d					ShiftRight:
.819d	18		clc				clc
.819e					ShiftMain:
.819e	fa		plx				plx 								; restore X
.819f	08		php				php 								; save direction
.81a0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81a3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81a6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81a7	0a		asl a				asl 	a
.81a8	10 05		bpl $81af			bpl 	_NotRef
.81aa	48		pha				pha
.81ab	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81ae	68		pla				pla
.81af					_NotRef:
.81af	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81b1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81b4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81b7	f0 03		beq $81bc			beq 	_IntegerCode 				; if clear, then we have two integers
.81b9	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.81bc					_IntegerCode:
.81bc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.81bf	29 e0		and #$e0			and 	#$E0
.81c1	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.81c4	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.81c7	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.81ca	d0 13		bne $81df			bne 	_SMExit0 					; if >= 32 it will always return zero.
.81cc					_SMLoop:
.81cc	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.81cf	30 11		bmi $81e2			bmi 	_SMExit 					; exit if done.
.81d1	28		plp				plp 								; restore direcition setting
.81d2	08		php				php
.81d3	90 05		bcc $81da			bcc 	_SMRight
.81d5	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; shift left if CS
.81d8	80 f2		bra $81cc			bra 	_SMLoop
.81da					_SMRight:
.81da	20 e3 86	jsr $86e3			jsr 	NSMShiftRight 				; shift right if CC
.81dd	80 ed		bra $81cc			bra 	_SMLoop
.81df					_SMExit0:
.81df	20 c0 86	jsr $86c0			jsr 	NSMSetZero 					; return zero.
.81e2					_SMExit:
.81e2	28		plp				plp 								; throw direction
.81e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.81e4					AddTopTwoStack:
.81e4	18		clc				clc
.81e5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81e8	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81eb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81ee	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81f1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81f4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81f7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81fa	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81fd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8200	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8203	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8206	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8209	60		rts				rts
.820a					SubTopTwoStack:
.820a	38		sec				sec
.820b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.820e	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8211	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8214	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8217	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.821a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.821d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8220	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8223	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8226	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8229	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.822c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.822f	60		rts				rts
.8230					AddInteger:
.8230	fa		plx				plx
.8231	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8234	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8237	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8238	0a		asl a				asl 	a
.8239	10 05		bpl $8240			bpl 	_NotRef
.823b	48		pha				pha
.823c	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.823f	68		pla				pla
.8240					_NotRef:
.8240	0a		asl a				asl 	a 							; put MSB of type into A:7
.8241	30 0b		bmi $824e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8243	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8246	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8249	f0 06		beq $8251			beq 	_IntegerCode 				; if clear, then we have two integers
.824b	4c b8 8d	jmp $8db8			jmp 	NotDoneError 							; otherwise at least one float.
.824e					_StringData:
.824e	4c b8 8d	jmp $8db8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8251					_IntegerCode:
.8251					AddCode:
.8251	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8254	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8257	10 8b		bpl $81e4			bpl 	AddTopTwoStack
.8259	20 0a 82	jsr $820a			jsr 	SubTopTwoStack 				; do a physical subtraction
.825c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.825f	10 09		bpl $826a			bpl 	_AddExit
.8261	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8264	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8267	20 75 86	jsr $8675			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.826a					_AddExit:
.826a	60		rts				rts
.826b					SubInteger:
.826b	fa		plx				plx
.826c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.826f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8272	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8273	0a		asl a				asl 	a
.8274	10 05		bpl $827b			bpl 	_NotRef
.8276	48		pha				pha
.8277	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.827a	68		pla				pla
.827b					_NotRef:
.827b	0a		asl a				asl 	a 							; put MSB of type into A:7
.827c	30 0b		bmi $8289			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.827e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8281	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8284	f0 06		beq $828c			beq 	_IntegerCode 				; if clear, then we have two integers
.8286	4c b8 8d	jmp $8db8			jmp 	NotDoneError 							; otherwise at least one float.
.8289					_StringData:
.8289	4c b8 8d	jmp $8db8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.828c					_IntegerCode:
.828c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.828f	49 80		eor #$80			eor 	#$80
.8291	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8294	80 bb		bra $8251			bra 	AddCode 					; and do the same code as add.
.8296					AndInteger:
.8296	fa		plx				plx
.8297	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.829a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.829d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.829e	0a		asl a				asl 	a
.829f	10 05		bpl $82a6			bpl 	_NotRef
.82a1	48		pha				pha
.82a2	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a5	68		pla				pla
.82a6					_NotRef:
.82a6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82a8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ab	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82ae	f0 03		beq $82b3			beq 	_IntegerCode 				; if clear, then we have two integers
.82b0	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.82b3					_IntegerCode:
.82b3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82b6	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.82b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82bc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82bf	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.82c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82c5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82c8	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.82cb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82ce	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82d1	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.82d4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82d7	60		rts				rts
.82d8					OraInteger:
.82d8	fa		plx				plx
.82d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82dc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82df	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82e0	0a		asl a				asl 	a
.82e1	10 05		bpl $82e8			bpl 	_NotRef
.82e3	48		pha				pha
.82e4	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82e7	68		pla				pla
.82e8					_NotRef:
.82e8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82ea	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ed	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82f0	f0 03		beq $82f5			beq 	_IntegerCode 				; if clear, then we have two integers
.82f2	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.82f5					_IntegerCode:
.82f5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82f8	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.82fb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82fe	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8301	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8304	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8307	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.830a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.830d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8310	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8313	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8316	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8319	60		rts				rts
.831a					EorInteger:
.831a	fa		plx				plx
.831b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.831e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8321	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8322	0a		asl a				asl 	a
.8323	10 05		bpl $832a			bpl 	_NotRef
.8325	48		pha				pha
.8326	20 db 83	jsr $83db			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8329	68		pla				pla
.832a					_NotRef:
.832a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.832c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.832f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8332	f0 03		beq $8337			beq 	_IntegerCode 				; if clear, then we have two integers
.8334	4c ae 8d	jmp $8dae			jmp 	TypeError 					; anything else, type mismatch.
.8337					_IntegerCode:
.8337	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.833a	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.833d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8340	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8343	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8346	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8349	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.834c	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.834f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8352	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8355	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8358	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.835b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.835c					PrecedenceLevel:
>835c	04					.byte	 4	; $00 <<
>835d	02					.byte	 2	; $01 <=
>835e	02					.byte	 2	; $02 <>
>835f	00					.byte	 0	; $03 !!3
>8360	00					.byte	 0	; $04 ><
>8361	02					.byte	 2	; $05 >=
>8362	04					.byte	 4	; $06 >>
>8363	00					.byte	 0	; $07 !!7
>8364	00					.byte	 0	; $08 !!8
>8365	00					.byte	 0	; $09 !!9
>8366	00					.byte	 0	; $0a !!10
>8367	00					.byte	 0	; $0b !!11
>8368	00					.byte	 0	; $0c !!12
>8369	00					.byte	 0	; $0d !!13
>836a	00					.byte	 0	; $0e !!14
>836b	00					.byte	 0	; $0f !!15
>836c	00					.byte	 0	; $10 @
>836d	00					.byte	 0	; $11 !!17
>836e	00					.byte	 0	; $12 !!18
>836f	00					.byte	 0	; $13 [
>8370	04					.byte	 4	; $14 \
>8371	00					.byte	 0	; $15 ]
>8372	01					.byte	 1	; $16 ^
>8373	00					.byte	 0	; $17 _
>8374	00					.byte	 0	; $18 `
>8375	00					.byte	 0	; $19 !!25
>8376	00					.byte	 0	; $1a !!26
>8377	00					.byte	 0	; $1b {
>8378	01					.byte	 1	; $1c |
>8379	00					.byte	 0	; $1d }
>837a	00					.byte	 0	; $1e ~
>837b	00					.byte	 0	; $1f [7m<7F>[m
>837c	00					.byte	 0	; $20
>837d	05					.byte	 5	; $21 !
>837e	00					.byte	 0	; $22 "
>837f	00					.byte	 0	; $23 #
>8380	05					.byte	 5	; $24 $
>8381	04					.byte	 4	; $25 %
>8382	01					.byte	 1	; $26 &
>8383	00					.byte	 0	; $27 '
>8384	00					.byte	 0	; $28 (
>8385	00					.byte	 0	; $29 )
>8386	04					.byte	 4	; $2a *
>8387	03					.byte	 3	; $2b +
>8388	00					.byte	 0	; $2c ,
>8389	03					.byte	 3	; $2d -
>838a	00					.byte	 0	; $2e .
>838b	04					.byte	 4	; $2f /
>838c	00					.byte	 0	; $30 0
>838d	00					.byte	 0	; $31 1
>838e	00					.byte	 0	; $32 2
>838f	00					.byte	 0	; $33 3
>8390	00					.byte	 0	; $34 4
>8391	00					.byte	 0	; $35 5
>8392	00					.byte	 0	; $36 6
>8393	00					.byte	 0	; $37 7
>8394	00					.byte	 0	; $38 8
>8395	00					.byte	 0	; $39 9
>8396	00					.byte	 0	; $3a :
>8397	00					.byte	 0	; $3b ;
>8398	02					.byte	 2	; $3c <
>8399	02					.byte	 2	; $3d =
>839a	02					.byte	 2	; $3e >
>839b	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.839c					EvaluateExpressionAt0:
.839c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.839e					EvaluateExpression:
.839e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.83a0					EvaluateExpressionAtPrecedence:
.83a0	48		pha				pha 								; save precedence level
.83a1	20 28 85	jsr $8528			jsr 	EvaluateTerm 				; evaluate term into level X.
.83a4	68		pla				pla 								; restore precedence level.
.83a5					_EXPRLoop:
.83a5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.83a7	b1 30		lda ($30),y			lda 	(codePtr),y
.83a9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.83ab	b0 25		bcs $83d2			bcs 	_EXPRExit
.83ad	da		phx				phx 								; read the operator precedence
.83ae	aa		tax				tax
.83af	bd 5c 83	lda $835c,x			lda 	PrecedenceLevel,x
.83b2	fa		plx				plx
.83b3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.83b5	f0 1b		beq $83d2			beq 	_EXPRExit
.83b7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.83b9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.83bb	c5 37		cmp $37				cmp 	zTemp0+1
.83bd	b0 13		bcs $83d2			bcs		_EXPRExit 					; if current >= operator exit
.83bf	48		pha				pha 								; save current precedence.
.83c0	b1 30		lda ($30),y			lda 	(codePtr),y
.83c2	c8		iny				iny
.83c3	48		pha				pha
.83c4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.83c6	e8		inx				inx 								; work out the right hand side.
.83c7	20 a0 83	jsr $83a0			jsr 	EvaluateExpressionAtPrecedence
.83ca	ca		dex				dex
.83cb	68		pla				pla 								; get operator, call the code.
.83cc	20 d5 83	jsr $83d5			jsr 	_EXPRCaller
.83cf	68		pla				pla 								; restore precedence level
.83d0	80 d3		bra $83a5			bra 	_EXPRLoop 					; and go round.
.83d2					_EXPRExit:
.83d2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.83d4	60		rts				rts
.83d5					_EXPRCaller:
.83d5	da		phx				phx 								; save on stack, first thing is to restore it
.83d6	0a		asl a				asl 	a 							; double so can use vectors into X
.83d7	aa		tax				tax
.83d8	7c 23 80	jmp ($8023,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.83db					DereferenceTopTwo:
.83db	e8		inx				inx
.83dc	20 e0 83	jsr $83e0			jsr 	Dereference 				; deref x+1
.83df	ca		dex				dex  								; falls through to deref x
.83e0					Dereference:
.83e0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.83e3	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.83e5	f0 57		beq $843e			beq 	_DRFExit 					; not a reference
.83e7	5a		phy				phy
.83e8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.83eb	85 36		sta $36				sta 	zTemp0
.83ed	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83f0	85 37		sta $37				sta 	zTemp0+1
.83f2	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.83f5	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.83f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83fa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.83fd	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.83ff	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8401	f0 0f		beq $8412			beq 	_DRFDereferenceTwo
.8403	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8405	f0 39		beq $8440			beq 	_DRFFull
.8407	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.840a	29 03		and #$03			and 	#3
.840c	f0 32		beq $8440			beq 	_DRFFull 					; the whole word
.840e	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8410	f0 07		beq $8419			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8412					_DRFDereferenceTwo:
.8412	a0 01		ldy #$01			ldy 	#1
.8414	b1 36		lda ($36),y			lda 	(zTemp0),y
.8416	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8419					_DRFClear23:
.8419	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.841c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.841f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8422	29 18		and #$18			and 	#NSBTypeMask
.8424	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8427	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8429	d0 12		bne $843d			bne 	_DRFNotString
.842b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.842e	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8431	d0 0a		bne $843d			bne 	_DRFNotString
.8433	a9 3f		lda #$3f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8435	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8438	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.843a	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.843d					_DRFNotString
.843d	7a		ply				ply 								; restore Y and exit
.843e					_DRFExit:
.843e	60		rts				rts
.843f					_DRFNullString:
>843f	00						.byte 	0
.8440					_DRFFull:
.8440	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8442	b1 36		lda ($36),y			lda 	(zTemp0),y
.8444	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8447	c8		iny				iny
.8448	b1 36		lda ($36),y			lda 	(zTemp0),y
.844a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.844d	c8		iny				iny
.844e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8450	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8453	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8456	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8459	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.845b	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.845e	f0 06		beq $8466			beq 	_DRFNoExponent
.8460	c8		iny				iny 								; if not, read the exponent as well.
.8461	b1 36		lda ($36),y			lda 	(zTemp0),y
.8463	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8466					_DRFNoExponent:
.8466	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8469	10 0d		bpl $8478			bpl 	_DRFExit2 					; if not, then exit.
.846b	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.846d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8470	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8473	09 80		ora #$80			ora 	#NSBIsNegative
.8475	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8478					_DRFExit2:
.8478	7a		ply				ply
.8479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.847a					EncodeNumberStart:
.847a	38		sec				sec
.847b	80 01		bra $847e			bra 	EncodeNumberContinue+1
.847d					EncodeNumberContinue:
.847d	18		clc				clc
.847e	08		php				php 								; save reset.
.847f	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8481	f0 0b		beq $848e			beq 	_ENIsOkay
.8483	c9 30		cmp #$30			cmp 	#"0"
.8485	90 04		bcc $848b			bcc 	_ENBadNumber
.8487	c9 3a		cmp #$3a			cmp 	#"9"+1
.8489	90 03		bcc $848e			bcc 	_ENIsOkay
.848b					_ENBadNumber:
.848b	28		plp				plp 								; throw saved reset
.848c					_ENFail:
.848c	18		clc				clc 								; not allowed
.848d	60		rts				rts
.848e					_ENIsOkay:
.848e	28		plp				plp 								; are we restarting
.848f	90 0c		bcc $849d			bcc 	_ENNoRestart
.8491					_ENStartEncode:
.8491	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8493	20 c2 86	jsr $86c2			jsr 	NSMSetByte
.8496	a9 01		lda #$01			lda 	#ESTA_Low
.8498					_ENExitChange:
.8498	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.849b	38		sec				sec
.849c	60		rts				rts
.849d					_ENNoRestart:
.849d	48		pha				pha 								; save on stack.
.849e	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.84a1	c9 01		cmp #$01			cmp 	#ESTA_Low
.84a3	f0 05		beq $84aa			beq  	_ESTALowState
.84a5	c9 02		cmp #$02			cmp 	#ESTA_High
.84a7	f0 23		beq $84cc			beq 	_ESTAHighState
>84a9	db						.byte 	$DB 						; causes a break in the emulator
.84aa					_ESTALowState:
.84aa	68		pla				pla 								; get value back
.84ab	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.84ad	f0 27		beq $84d6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.84af	29 0f		and #$0f			and 	#15 						; make digit
.84b1	85 36		sta $36				sta 	zTemp0 						; save it.
.84b3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.84b6	0a		asl a				asl 	a
.84b7	0a		asl a				asl 	a
.84b8	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84bb	0a		asl a				asl 	a
.84bc	65 36		adc $36				adc 	zTemp0
.84be	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84c1	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.84c3	90 05		bcc $84ca			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.84c5	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.84c7	8d 05 07	sta $0705			sta 	EncodeState
.84ca					_ESTANoSwitch:
.84ca	38		sec				sec
.84cb	60		rts				rts
.84cc					_ESTAHighState:
.84cc	68		pla				pla 								; get value back
.84cd	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.84cf	f0 05		beq $84d6			beq 	_ESTASwitchFloat
.84d1	20 d7 84	jsr $84d7			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.84d4	38		sec				sec
.84d5	60		rts				rts
.84d6					_ESTASwitchFloat:
>84d6	db						.byte 	$DB 						; causes a break in the emulator
.84d7					ESTAShiftDigitIntoMantissa:
.84d7	29 0f		and #$0f			and 	#15 						; save digit
.84d9	48		pha				pha
.84da	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.84dd	48		pha				pha
.84de	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.84e1	48		pha				pha
.84e2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84e5	48		pha				pha
.84e6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84e9	48		pha				pha
.84ea	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 2
.84ed	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 4
.84f0	18		clc				clc 								; pop mantissa and add
.84f1	68		pla				pla
.84f2	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84f5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84f8	68		pla				pla
.84f9	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.84fc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84ff	68		pla				pla
.8500	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8503	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8506	68		pla				pla
.8507	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.850a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.850d	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 10
.8510	68		pla				pla 								; add digit
.8511	18		clc				clc
.8512	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8515	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8518	90 0d		bcc $8527			bcc 	_ESTASDExit
.851a	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.851d	d0 08		bne $8527			bne 	_ESTASDExit
.851f	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8522	d0 03		bne $8527			bne 	_ESTASDExit
.8524	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8527					_ESTASDExit:
.8527	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8528					EvaluateTerm:
.8528	b1 30		lda ($30),y			lda 	(codePtr),y
.852a	30 18		bmi $8544			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.852c	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.852e	b0 6e		bcs $859e			bcs 	_ETVariable
.8530	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8532	90 6e		bcc $85a2			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8534	c9 3a		cmp #$3a			cmp 	#'9'+1
.8536	b0 6a		bcs $85a2			bcs 	_ETPuncUnary
.8538	20 7a 84	jsr $847a			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.853b					_ETNumber:
.853b	c8		iny				iny 								; keep encoding until we have the numbers
.853c	b1 30		lda ($30),y			lda 	(codePtr),y
.853e	20 7d 84	jsr $847d			jsr 	EncodeNumberContinue
.8541	b0 f8		bcs $853b			bcs 	_ETNumber 					; go back if accepted.
.8543	60		rts				rts
.8544					_ETCheckUnary:
.8544	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8546	f0 40		beq $8588			beq 	_ETString
.8548	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.854a	f0 11		beq $855d			beq 	_ETHexConstant
.854c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.854e	90 0a		bcc $855a			bcc 	_ETSyntaxError
.8550	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.8552	b0 06		bcs $855a			bcs 	_ETSyntaxError
.8554	da		phx				phx 								; push X on the stack
.8555	0a		asl a				asl 	a 							; put vector x 2 into X
.8556	aa		tax				tax
.8557	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x) 				; and do it.
.855a					_ETSyntaxError:
.855a	4c a4 8d	jmp $8da4			jmp 	SyntaxError
.855d					_ETHexConstant:
.855d	c8		iny				iny 								; skip #
.855e	c8		iny				iny 								; skip count
.855f	20 c0 86	jsr $86c0			jsr 	NSMSetZero 					; clear result
.8562					_ETHLoop:
.8562	b1 30		lda ($30),y			lda 	(codePtr),y
.8564	c8		iny				iny 								; and consume
.8565	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8567	f0 1e		beq $8587			beq 	_ETHExit
.8569	48		pha				pha 								; save on stack.
.856a	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 2
.856d	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 4
.8570	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 8
.8573	20 d5 86	jsr $86d5			jsr 	NSMShiftLeft 				; x 16
.8576	68		pla				pla 								; ASCII
.8577	c9 41		cmp #$41			cmp 	#'A'
.8579	90 02		bcc $857d			bcc 	_ETHNotChar
.857b	e9 07		sbc #$07			sbc 	#7
.857d					_ETHNotChar:
.857d	29 0f		and #$0f			and 	#15 						; digit now
.857f	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8582	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8585	80 db		bra $8562			bra 	_ETHLoop 					; go round.
.8587					_ETHExit:
.8587	60		rts				rts
.8588					_ETString:
.8588	c8		iny				iny 								; look at length
.8589	b1 30		lda ($30),y			lda 	(codePtr),y
.858b	48		pha				pha
.858c	c8		iny				iny 								; first character
.858d	20 39 87	jsr $8739			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8590	68		pla				pla 								; restore count and save
.8591	85 36		sta $36				sta 	zTemp0
.8593	98		tya				tya 								; add length to Y to skip it.
.8594	18		clc				clc
.8595	65 36		adc $36				adc 	zTemp0
.8597	a8		tay				tay
.8598	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.859a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.859d	60		rts				rts
.859e					_ETVariable:
>859e	db						.byte 	$DB 						; causes a break in the emulator
.859f	4c ff ff	jmp $ffff			jmp 	$FFFF
.85a2					_ETPuncUnary:
.85a2	c8		iny				iny 								; consume the unary character
.85a3	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.85a5	f0 31		beq $85d8			beq 	_ETUnaryNegate
.85a7	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.85a9	f0 3d		beq $85e8			beq 	_ETDereference
.85ab	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.85ad	f0 58		beq $8607			beq 	_ETParenthesis
.85af	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.85b1	f0 43		beq $85f6			beq 	_ETStringReference
.85b3	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.85b5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.85b7	f0 06		beq $85bf			beq 	_ETIndirection
.85b9	e6 36		inc $36				inc 	zTemp0
.85bb	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.85bd	d0 9b		bne $855a			bne 	_ETSyntaxError
.85bf					_ETIndirection:
.85bf	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.85c1	1a		inc a				inc 	a
.85c2	48		pha				pha
.85c3	20 28 85	jsr $8528			jsr 	EvaluateTerm				; evaluate the term
.85c6	20 e0 83	jsr $83e0			jsr 	Dereference 				; dereference it.
.85c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85cc	d0 07		bne $85d5			bne 	_ETTypeMismatch
.85ce	68		pla				pla 								; indirection 1-2
.85cf	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.85d1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85d4	60		rts				rts
.85d5					_ETTypeMismatch:
.85d5	4c ae 8d	jmp $8dae			jmp 	TypeError
.85d8					_ETUnaryNegate:
.85d8	20 28 85	jsr $8528			jsr 	EvaluateTerm				; evaluate the term
.85db	20 e0 83	jsr $83e0			jsr 	Dereference 				; dereference it.
.85de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.85e1	29 10		and #$10			and 	#NSTString
.85e3	d0 f0		bne $85d5			bne 	_ETTypeMismatch
.85e5	4c 6c 86	jmp $866c			jmp 	NSMNegate  					; just toggles the sign bit.
.85e8					_ETDereference:
.85e8	20 28 85	jsr $8528			jsr 	EvaluateTerm				; evaluate the term
.85eb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.85ee	29 20		and #$20			and 	#NSBIsReference
.85f0	f0 e3		beq $85d5			beq 	_ETTypeMismatch
.85f2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.85f5	60		rts				rts
.85f6					_ETStringReference:
.85f6	20 28 85	jsr $8528			jsr 	EvaluateTerm				; evaluate the term
.85f9	20 e0 83	jsr $83e0			jsr 	Dereference 				; dereference it.
.85fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85ff	d0 d4		bne $85d5			bne 	_ETTypeMismatch
.8601	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8603	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8606	60		rts				rts
.8607					_ETParenthesis:
.8607	20 9e 83	jsr $839e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.860a	20 ca 8b	jsr $8bca			jsr 	CheckRightBracket 			; check for )
.860d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.860e					EvaluateValue:
.860e	48		pha				pha
.860f	20 9c 83	jsr $839c			jsr		EvaluateExpressionAt0 		; expression
.8612	20 e0 83	jsr $83e0			jsr 	Dereference					; derefernce it
.8615	68		pla				pla
.8616	60		rts				rts
.8617					EvaluateNumber:
.8617	20 0e 86	jsr $860e			jsr 	EvaluateValue 				; get a value
.861a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.861d	29 10		and #$10			and 	#NSBIsString
.861f	d0 16		bne $8637			bne 	HelperTypeError
.8621	60		rts				rts
.8622					EvaluateString:
.8622	20 0e 86	jsr $860e			jsr 	EvaluateValue 				; get a value
.8625	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8628	29 10		and #$10			and 	#NSBIsString
.862a	f0 0b		beq $8637			beq 	HelperTypeError
.862c					CopyAddressToTemp0:
.862c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.862f	85 36		sta $36				sta 	zTemp0
.8631	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8634	85 37		sta $37				sta 	zTemp0+1
.8636	60		rts				rts
.8637					HelperTypeError:
.8637	4c ae 8d	jmp $8dae			jmp 	TypeError
.863a					EvaluateInteger:
.863a	20 17 86	jsr $8617			jsr 	EvaluateNumber
.863d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8640	d0 0a		bne $864c			bne 	HelperValueError 			; if not, it's a float.
.8642	60		rts				rts
.8643					EvaluateUnsignedInteger:
.8643	20 3a 86	jsr $863a			jsr 	EvaluateInteger 			; check integer is +ve
.8646	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8649	30 01		bmi $864c			bmi 	HelperValueError
.864b	60		rts				rts
.864c					HelperValueError:
.864c	4c b3 8d	jmp $8db3			jmp 	ArgumentError
.864f					Evaluate16BitInteger:
.864f	20 43 86	jsr $8643			jsr	 	EvaluateUnsignedInteger		; get integer
.8652	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8655	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8658	d0 f2		bne $864c			bne 	HelperValueError
.865a	60		rts				rts
.865b					Evaluate8BitInteger:
.865b	20 43 86	jsr $8643			jsr	 	EvaluateUnsignedInteger 	; get an integer
.865e	d0 ec		bne $864c			bne 	HelperValueError
.8660	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8663	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8666	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8669	d0 e1		bne $864c			bne 	HelperValueError
.866b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.866c					NSMNegate:
.866c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.866f	49 80		eor #$80			eor 	#NSBIsNegative
.8671	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8674	60		rts				rts
.8675					NSMNegateMantissa:
.8675	38		sec				sec
.8676	a9 00		lda #$00			lda 	#0
.8678	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.867b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.867e	a9 00		lda #$00			lda 	#0
.8680	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8683	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8686	a9 00		lda #$00			lda 	#0
.8688	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.868b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.868e	a9 00		lda #$00			lda 	#0
.8690	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8693	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8696	60		rts				rts
.8697					NSMShiftUpTwo:
.8697	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.869a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.869d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a0	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.86a3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.86a6	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.86a9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86ac	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.86af	bd 28 06	lda $0628,x			lda 	NSExponent,x
.86b2	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.86b5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86b8	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.86bb	60		rts				rts
.86bc					NSMSetZeroMantissaOnly:
.86bc	a9 00		lda #$00			lda 	#0
.86be	80 08		bra $86c8			bra 	NSMSetMantissa
.86c0					NSMSetZero:
.86c0	a9 00		lda #$00			lda 	#0
.86c2					NSMSetByte:
.86c2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.86c5	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.86c8					NSMSetMantissa:
.86c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.86cb	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.86ce	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.86d1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86d4	60		rts				rts
.86d5					NSMShiftLeft:
.86d5	18		clc				clc
.86d6					NSMRotateLeft:
.86d6	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.86d9	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.86dc	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.86df	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.86e2	60		rts				rts
.86e3					NSMShiftRight:
.86e3	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.86e6	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.86e9	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.86ec	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.86ef	60		rts				rts
.86f0					NSMIsZero:
.86f0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86f3	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.86f6	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.86f9	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.86fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8da4					SyntaxError:
.8da4	a9 02		lda #$02		lda	#2
.8da6	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8da9					RangeError:
.8da9	a9 04		lda #$04		lda	#4
.8dab	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dae					TypeError:
.8dae	a9 05		lda #$05		lda	#5
.8db0	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8db3					ArgumentError:
.8db3	a9 07		lda #$07		lda	#7
.8db5	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8db8					NotDoneError:
.8db8	a9 0c		lda #$0c		lda	#12
.8dba	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dbd					ErrorText:
>8dbd	42 72 65 61 6b 00			.text	"Break",0
>8dc3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8dcb	72 72 6f 72 00
>8dd0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8dd8	20 62 79 20 7a 65 72 6f 00
>8de1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8de9	61 6e 67 65 00
>8dee	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8df6	6d 61 74 63 68 00
>8dfc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8e04	65 6d 6f 72 79 00
>8e0a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8e12	61 72 67 75 6d 65 6e 74 00
>8e1b	53 74 6f 70 00				.text	"Stop",0
>8e20	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8e28	6f 6f 20 6c 6f 6e 67 00
>8e30	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8e38	6e 20 66 61 69 6c 65 64 00
>8e41	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8e49	61 74 61 00
>8e4d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8e55	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.86fd					MemoryNew:
.86fd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86ff	85 30		sta $30				sta 	codePtr
.8701	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8703	85 31		sta $31				sta 	codePtr+1
.8705	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8707	92 30		sta ($30)			sta 	(codePtr)
.8709	60		rts				rts
.870a					MemoryAppend:
.870a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.870c	85 30		sta $30				sta 	codePtr
.870e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8710	85 31		sta $31				sta 	codePtr+1
.8712					_MAFindEnd:
.8712	b2 30		lda ($30)			lda 	(codePtr)
.8714	f0 0d		beq $8723			beq 	_MAFoundEnd
.8716	18		clc				clc
.8717	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8719	65 30		adc $30				adc 	codePtr
.871b	85 30		sta $30				sta 	codePtr
.871d	90 02		bcc $8721			bcc 	_CREExit
.871f	e6 31		inc $31				inc 	codePtr+1
.8721					_CREExit:
.8721	80 ef		bra $8712			bra 	_MAFindEnd
.8723					_MAFoundEnd:
.8723	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8726	c0 04		cpy #$04			cpy 	#4 							; blank line
.8728	f0 0e		beq $8738			beq 	_MANoLine
.872a	a9 00		lda #$00			lda 	#0 							; end of program
.872c	91 30		sta ($30),y			sta 	(codePtr),y
.872e					_MACopy:
.872e	88		dey				dey
.872f	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.8732	91 30		sta ($30),y			sta 	(codePtr),y
.8734	c0 00		cpy #$00			cpy 	#0
.8736	d0 f6		bne $872e			bne 	_MACopy
.8738					_MANoLine:
.8738	60		rts				rts
.8739					MemoryInline:
.8739	98		tya				tya 								; put address into stack,x
.873a	18		clc				clc
.873b	65 30		adc $30				adc 	codePtr
.873d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8740	a5 31		lda $31				lda 	codePtr+1
.8742	69 00		adc #$00			adc 	#0
.8744	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8747	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.874a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.874d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.874e					VariableOpen:
.874e	60		rts				rts
.874f					VariableClose:
.874f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8750					BackloadProgram:
.8750	a2 ff		ldx #$ff			ldx 	#$FF
.8752	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8755	30 1e		bmi $8775			bmi 	_BPExit
.8757					_BPCopy:
.8757	e8		inx				inx  								; copy byte in
.8758	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.875b	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.875e	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8761	30 0a		bmi $876d			bmi 	_BPEndLine 					; -ve = EOL
.8763	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8765	d0 02		bne $8769			bne 	_BPNotTab
.8767	a9 20		lda #$20			lda 	#' '
.8769					_BPNotTab:
.8769	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.876b	b0 ea		bcs $8757			bcs 	_BPCopy
.876d					_BPEndLine:
.876d	20 45 89	jsr $8945			jsr 	TokeniseLine 				; tokenise the line.
.8770	20 0a 87	jsr $870a			jsr 	MemoryAppend 				; append to current program
.8773	80 db		bra $8750			bra 	BackloadProgram
.8775					_BPExit:
.8775	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8776					TokeniseSearchTable:
.8776	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8778	85 36		sta $36				sta 	zTemp0
.877a	a0 00		ldy #$00			ldy 	#0
.877c	a9 80		lda #$80			lda 	#$80 						; token #
.877e	85 38		sta $38				sta 	zTemp1
.8780					_TSTLoop:
.8780	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8782	30 49		bmi $87cd			bmi 	_TSTFail 					; -ve = end of table
.8784	f0 2e		beq $87b4			beq 	_TSTNext 					; zero, check next it's a dummy
.8786	c8		iny				iny 								; get the hash
.8787	b1 36		lda ($36),y			lda 	(zTemp0),y
.8789	88		dey				dey
.878a	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.878d	d0 25		bne $87b4			bne 	_TSTNext
.878f	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8792	38		sec				sec
.8793	ed 00 07	sbc $0700			sbc 	identStart
.8796	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8798	d0 1a		bne $87b4			bne 	_TSTNext
.879a	5a		phy				phy 								; save Y , we might fail
.879b	c8		iny				iny 								; point to text
.879c	c8		iny				iny
.879d	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.87a0					_TSTCompareName:
.87a0	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.87a3	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87a5	d0 0c		bne $87b3			bne 	_TSTNextPullY 				; fail, pullY and do next
.87a7	e8		inx				inx
.87a8	c8		iny				iny
.87a9	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.87ac	d0 f2		bne $87a0			bne 	_TSTCompareName
.87ae	7a		ply				ply 								; throw Y
.87af	a5 38		lda $38				lda 	zTemp1 						; get token #
.87b1	38		sec				sec 								; return with CS = passed.
.87b2	60		rts				rts
.87b3					_TSTNextPullY:
.87b3	7a		ply				ply 								; restore current, fall through.
.87b4					_TSTNext:
.87b4	e6 38		inc $38				inc 	zTemp1 						; token counter
.87b6	98		tya				tya
.87b7	18		clc				clc
.87b8	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.87ba	1a		inc a				inc 	a 							; +1
.87bb	1a		inc a				inc 	a 							; +2
.87bc	a8		tay				tay
.87bd	10 c1		bpl $8780			bpl 	_TSTLoop 					; if Y < $80 loop back
.87bf	98		tya				tya 								; add Y to zTemp0 and reset Y
.87c0	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.87c2	18		clc				clc  								; but have tables > 255 bytes
.87c3	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.87c5	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.87c7	90 b7		bcc $8780			bcc 	_TSTLoop
.87c9	e6 37		inc $37				inc 	zTemp0+1
.87cb	80 b3		bra $8780			bra 	_TSTLoop
.87cd					_TSTFail:
.87cd	18		clc				clc
.87ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.87cf					KeywordSet0:
>87cf	00 65					.text	0,$65,""               ; $80 !0:EOF
>87d1	00 58					.text	0,$58,""               ; $81 !1:SH1
>87d3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87d5	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>87db	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>87e3	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>87e9	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>87f0	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>87f6	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>87fd	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>8805	45 24 28
>8808	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>8810	45 24 28
>8813	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>881a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>8820	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>8828	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>8830	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>8836	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>883d	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>8842	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>8848	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>8850	28
>8851	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>8857	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>885d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>8863	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>886a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>8870	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>8876	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>887b	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>887f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>8885	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>888d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>8894	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>889b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>88a3	43
>88a4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>88aa	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>88b1	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>88b7	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $a4 ASSERT
>88bf	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>88c5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>88ca	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>88d0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>88d5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>88dc	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>88e2	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>88e7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>88ee	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>88f4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>88f9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>8901	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>8907	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>890b	ff					.text	$FF
.890c					KeywordSet1:
>890c	00 65					.text	0,$65,""               ; $80 !0:EOF
>890e	00 58					.text	0,$58,""               ; $81 !1:SH1
>8910	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8912	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $83 CLEAR
>8919	03 d7 45 4e 44				.text	3,$d7,"END"            ; $84 END
>891e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $85 LIST
>8924	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $86 NEW
>8929	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $87 RESTORE
>8931	45
>8932	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $88 RUN
>8937	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $89 STOP
>893d	ff					.text	$FF
.893e					KeywordSet2:
>893e	00 65					.text	0,$65,""               ; $80 !0:EOF
>8940	00 58					.text	0,$58,""               ; $81 !1:SH1
>8942	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8944	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8945					TokeniseLine:
.8945	20 cd 8a	jsr $8acd			jsr 	FixLineBufferCase 			; fix line case
.8948	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.894a	8d 06 07	sta $0706			sta 	tokenOffset
.894d	9c 07 07	stz $0707			stz 	tokenLineNumber
.8950	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8953	a2 ff		ldx #$ff			ldx 	#$FF
.8955					_TKFindFirst:
.8955	e8		inx				inx
.8956	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8959	f0 79		beq $89d4			beq 	_TKExit
.895b	c9 20		cmp #$20			cmp 	#' '
.895d	90 f6		bcc $8955			bcc 	_TKFindFirst
.895f	c9 30		cmp #$30			cmp 	#'0'
.8961	90 07		bcc $896a			bcc 	_TKNoLineNumber
.8963	c9 3a		cmp #$3a			cmp 	#'9'+1
.8965	b0 03		bcs $896a			bcs 	_TKNoLineNumber
.8967	20 f7 8a	jsr $8af7			jsr 	TokeniseExtractLineNumber
.896a					_TKNoLineNumber:
.896a					_TKTokeniseLoop:
.896a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.896d	f0 65		beq $89d4			beq 	_TKExit
.896f	e8		inx				inx
.8970	c9 20		cmp #$20			cmp 	#' '
.8972	f0 f6		beq $896a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8974	ca		dex				dex 								; undo last get, A contains character, X is position.
.8975	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8977	f0 61		beq $89da			beq 	_TKTokeniseIdentifier
.8979	c9 41		cmp #$41			cmp 	#'A'
.897b	90 04		bcc $8981			bcc 	_TKTokenisePunctuation
.897d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.897f	90 59		bcc $89da			bcc 	_TKTokeniseIdentifier
.8981					_TKTokenisePunctuation:
.8981	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8983	f0 27		beq $89ac			beq 	_TKString
.8985	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8987	f0 28		beq $89b1			beq 	_TKHexConstant
.8989	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.898b	f0 29		beq $89b6			beq 	_TKCheckDouble
.898d	c9 3e		cmp #$3e			cmp 	#'>'
.898f	f0 25		beq $89b6			beq 	_TKCheckDouble
.8991					_TKStandardPunctuation:
.8991	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8994	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8996	90 0e		bcc $89a6			bcc 	_TKNoShift
.8998	48		pha				pha 								; save
.8999	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.899b	85 36		sta $36				sta 	zTemp0
.899d	68		pla				pla
.899e	29 20		and #$20			and 	#32 						; bit 5
.89a0	4a		lsr a				lsr 	a 							; shift into bit 3
.89a1	4a		lsr a				lsr 	a
.89a2	05 36		ora $36				ora 	zTemp0
.89a4	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.89a6					_TKNoShift:
.89a6	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte 			; write the punctuation character
.89a9	e8		inx				inx 								; consume the character
.89aa	80 be		bra $896a			bra 	_TKTokeniseLoop 			; and loop round again.
.89ac					_TKString:
.89ac	20 5c 8a	jsr $8a5c			jsr 	TokeniseString
.89af	80 b9		bra $896a			bra 	_TKTokeniseLoop
.89b1					_TKHexConstant:
.89b1	20 97 8a	jsr $8a97			jsr 	TokeniseHexConstant
.89b4	80 b4		bra $896a			bra 	_TKTokeniseLoop
.89b6					_TKCheckDouble:
.89b6	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.89b9	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.89bb	90 d4		bcc $8991			bcc 	_TKStandardPunctuation
.89bd	c9 3f		cmp #$3f			cmp 	#'>'+1
.89bf	b0 d0		bcs $8991			bcs 	_TKStandardPunctuation
.89c1	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.89c4	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.89c6	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.89c7	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.89ca	38		sec				sec
.89cb	e9 3c		sbc #$3c			sbc 	#'<'
.89cd	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.89d0	e8		inx				inx 								; consume both
.89d1	e8		inx				inx
.89d2	80 96		bra $896a			bra 	_TKTokeniseLoop
.89d4	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.89d6	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.89d9	60		rts				rts
.89da					_TKTokeniseIdentifier:
.89da	8e 00 07	stx $0700			stx 	identStart 					; save start
.89dd	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.89e0					_TKCheckLoop:
.89e0	e8		inx				inx 								; look at next, we know first is identifier.
.89e1	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.89e4	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.89e6	f0 f8		beq $89e0			beq 	_TKCheckLoop
.89e8	c9 30		cmp #$30			cmp	 	#"0"
.89ea	90 0c		bcc $89f8			bcc 	_TKEndIdentifier
.89ec	c9 3a		cmp #$3a			cmp 	#"9"+1
.89ee	90 f0		bcc $89e0			bcc 	_TKCheckLoop
.89f0	c9 41		cmp #$41			cmp	 	#"A"
.89f2	90 04		bcc $89f8			bcc 	_TKEndIdentifier
.89f4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.89f6	90 e8		bcc $89e0			bcc 	_TKCheckLoop
.89f8					_TKEndIdentifier:
.89f8	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.89fb	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.89fd	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.89ff	f0 06		beq $8a07			beq 	_TKHasTypeCharacter
.8a01	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8a03	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8a05	d0 07		bne $8a0e			bne 	_TKNoTypeCharacter
.8a07					_TKHasTypeCharacter:
.8a07	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8a0a	e8		inx				inx 								; read next
.8a0b	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a0e					_TKNoTypeCharacter:
.8a0e	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a10	d0 09		bne $8a1b			bne 	_TKNoArray
.8a12	e8		inx				inx 								; skip the (
.8a13	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a16	09 04		ora #$04			ora 	#$04
.8a18	8d 04 07	sta $0704			sta 	identTypeByte
.8a1b					_TKNoArray:
.8a1b	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a1e	20 b8 8a	jsr $8ab8			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a21	a0 87		ldy #$87			ldy 	#(KeywordSet0) >> 8
.8a23	a9 cf		lda #$cf			lda 	#(KeywordSet0) & $FF
.8a25	20 76 87	jsr $8776			jsr 	TokeniseSearchTable
.8a28	a2 00		ldx #$00			ldx 	#0
.8a2a	b0 1f		bcs $8a4b			bcs 	_TKFoundToken
.8a2c	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a2e	a9 0c		lda #$0c			lda 	#(KeywordSet1) & $FF
.8a30	20 76 87	jsr $8776			jsr 	TokeniseSearchTable
.8a33	a2 81		ldx #$81			ldx 	#$81
.8a35	b0 14		bcs $8a4b			bcs 	_TKFoundToken
.8a37	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a39	a9 0c		lda #$0c			lda 	#(KeywordSet1) & $FF
.8a3b	20 76 87	jsr $8776			jsr 	TokeniseSearchTable
.8a3e	a2 82		ldx #$82			ldx 	#$82
.8a40	b0 09		bcs $8a4b			bcs 	_TKFoundToken
.8a42	20 48 8b	jsr $8b48			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a45	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a48	4c 6a 89	jmp $896a			jmp 	_TKTokeniseLoop 			; and go round again.
.8a4b					_TKFoundToken:
.8a4b	48		pha				pha 								; save token
.8a4c	8a		txa				txa 								; shift in X, is there one ?
.8a4d	f0 03		beq $8a52			beq 	_TKNoTShift
.8a4f	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte 			; if so, write it out
.8a52					_TKNoTShift:
.8a52	68		pla				pla 								; restore and write token
.8a53	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a56	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a59	4c 6a 89	jmp $896a			jmp 	_TKTokeniseLoop 			; and go round again.
.8a5c					TokeniseString:
.8a5c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8a5e	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a61	e8		inx				inx									; start of quoted string.
.8a62	da		phx				phx 								; push start of string on top
.8a63	ca		dex				dex
.8a64					_TSFindEnd:
.8a64	e8		inx				inx
.8a65	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8a68	f0 04		beq $8a6e			beq 	_TSEndOfString
.8a6a	c9 22		cmp #$22			cmp 	#'"'
.8a6c	d0 f6		bne $8a64			bne 	_TSFindEnd
.8a6e					_TSEndOfString:
.8a6e	7a		ply				ply  								; so now Y is first character, X is character after end.
.8a6f	48		pha				pha 								; save terminating character
.8a70	20 78 8a	jsr $8a78			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8a73	68		pla				pla 								; terminating character
.8a74	f0 01		beq $8a77			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8a76	e8		inx				inx
.8a77					_TSNotQuote:
.8a77	60		rts				rts
.8a78					TOWriteBlockXY:
.8a78	86 36		stx $36				stx 	zTemp0 						; write end character
.8a7a	98		tya				tya
.8a7b	49 ff		eor #$ff			eor 	#$FF
.8a7d	38		sec				sec
.8a7e	65 36		adc $36				adc 	zTemp0
.8a80	1a		inc a				inc 	a 							; one extra for NULL
.8a81	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a84					_TOBlockLoop:
.8a84	c4 36		cpy $36				cpy 	zTemp0
.8a86	f0 09		beq $8a91			beq 	_TOBlockExit
.8a88	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8a8b	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a8e	c8		iny				iny
.8a8f	80 f3		bra $8a84			bra 	_TOBlockLoop
.8a91					_TOBlockExit:
.8a91	a9 00		lda #$00			lda 	#0
.8a93	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a96	60		rts				rts
.8a97					TokeniseHexConstant:
.8a97	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8a99	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8a9c	e8		inx				inx									; start of quoted string.
.8a9d	da		phx				phx 								; push start of constant on top
.8a9e	ca		dex				dex
.8a9f					_THFindLoop:
.8a9f	e8		inx				inx
.8aa0	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8aa3	c9 30		cmp #$30			cmp 	#"0"
.8aa5	90 0c		bcc $8ab3			bcc 	_THFoundEnd
.8aa7	c9 3a		cmp #$3a			cmp 	#"9"+1
.8aa9	90 f4		bcc $8a9f			bcc 	_THFindLoop
.8aab	c9 41		cmp #$41			cmp 	#"A"
.8aad	90 04		bcc $8ab3			bcc 	_THFoundEnd
.8aaf	c9 47		cmp #$47			cmp 	#"F"+1
.8ab1	90 ec		bcc $8a9f			bcc 	_THFindLoop
.8ab3					_THFoundEnd:
.8ab3	7a		ply				ply 								; restore start
.8ab4	20 78 8a	jsr $8a78			jsr 	TOWriteBlockXY 				; output the block
.8ab7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8ab8					TokeniseCalculateHash:
.8ab8	da		phx				phx
.8ab9	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8abc	a9 00		lda #$00			lda 	#0
.8abe					_TCHLoop:
.8abe	18		clc				clc
.8abf	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8ac2	e8		inx				inx
.8ac3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8ac6	d0 f6		bne $8abe			bne 	_TCHLoop
.8ac8	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8acb	fa		plx				plx
.8acc	60		rts				rts
.8acd					FixLineBufferCase:
.8acd	a2 00		ldx #$00			ldx 	#0
.8acf					_FLBCLoop:
.8acf	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8ad2	f0 22		beq $8af6			beq 	_FLBCExit 					; end of string.
.8ad4	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8ad6	f0 11		beq $8ae9			beq 	_FLBCInQuotes
.8ad8	e8		inx				inx
.8ad9	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8adb	90 f2		bcc $8acf			bcc 	_FLBCLoop
.8add	c9 7b		cmp #$7b			cmp 	#'z'+1
.8adf	b0 ee		bcs $8acf			bcs 	_FLBCLoop
.8ae1	38		sec				sec 								; make U/C
.8ae2	e9 20		sbc #$20			sbc 	#32
.8ae4	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8ae7	80 e6		bra $8acf			bra 	_FLBCLoop
.8ae9					_FLBCInQuotes:
.8ae9	e8		inx				inx 								; advance
.8aea	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8aed	f0 07		beq $8af6			beq 	_FLBCExit 					; exit on EOS
.8aef	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8af1	d0 f6		bne $8ae9			bne 	_FLBCInQuotes
.8af3	e8		inx				inx 								; skip over it
.8af4	80 d9		bra $8acf			bra 	_FLBCLoop
.8af6					_FLBCExit:
.8af6	60		rts				rts
.8af7					TokeniseExtractLineNumber:
.8af7	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8afa	48		pha				pha
.8afb	ad 07 07	lda $0707			lda 	tokenLineNumber
.8afe	48		pha				pha
.8aff	20 35 8b	jsr $8b35			jsr 	_TELNTimes2 				; line # x 4
.8b02	20 35 8b	jsr $8b35			jsr 	_TELNTimes2 				; line # x 2
.8b05	18		clc				clc 								; add stacked value
.8b06	68		pla				pla
.8b07	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b0a	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b0d	68		pla				pla
.8b0e	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b11	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b14	20 35 8b	jsr $8b35			jsr 	_TELNTimes2 				; line # x 10
.8b17	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b1a	e8		inx				inx
.8b1b	29 0f		and #$0f			and 	#15 						; add to line #
.8b1d	18		clc				clc
.8b1e	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b21	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b24	90 03		bcc $8b29			bcc 	_TLENNoCarry
.8b26	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b29					_TLENNoCarry:
.8b29	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b2c	c9 30		cmp #$30			cmp 	#'0'
.8b2e	90 04		bcc $8b34			bcc 	_TLENExit
.8b30	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b32	90 c3		bcc $8af7			bcc 	TokeniseExtractLineNumber
.8b34					_TLENExit:
.8b34	60		rts				rts
.8b35					_TELNTimes2:
.8b35	0e 07 07	asl $0707			asl 	tokenLineNumber
.8b38	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8b3b	60		rts				rts
.8b3c					TokeniseWriteByte:
.8b3c	da		phx				phx
.8b3d	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b40	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b43	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b46	fa		plx				plx
.8b47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b48					CheckCreateVariableRecord:
.8b48	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b4a	85 36		sta $36				sta 	0+zTemp0
.8b4c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b4e	85 37		sta $37				sta 	1+zTemp0
.8b50	20 4e 87	jsr $874e			jsr 	VariableOpen 				; make variable space available
.8b53					_CCVSearch:
.8b53	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8b55	f0 2c		beq $8b83			beq 	_CCVFail
.8b57	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8b59	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8b5b	cd 03 07	cmp $0703			cmp 	identHash
.8b5e	d0 16		bne $8b76			bne 	_CCVNext
.8b60	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8b62	ae 00 07	ldx $0700			ldx 	identStart
.8b65					_CCVCompare:
.8b65	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8b68	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8b6a	e8		inx				inx 								; advance pointers
.8b6b	c8		iny				iny
.8b6c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8b6d	d0 07		bne $8b76			bne 	_CCVNext  					; didn't match go to next.
.8b6f	90 f4		bcc $8b65			bcc 	_CCVCompare 				; not finished yet.
.8b71	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8b74	f0 41		beq $8bb7			beq 	_CCVFound 					; yes, we were successful
.8b76					_CCVNext:
.8b76	18		clc				clc
.8b77	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8b79	65 36		adc $36				adc 	zTemp0
.8b7b	85 36		sta $36				sta 	zTemp0
.8b7d	90 d4		bcc $8b53			bcc 	_CCVSearch
.8b7f	e6 37		inc $37				inc 	zTemp0+1
.8b81	80 d0		bra $8b53			bra 	_CCVSearch
.8b83					_CCVFail:
.8b83	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8b85	ad 03 07	lda $0703			lda 	identHash
.8b88	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8a	c8		iny				iny 								; offset 2 is the type byte
.8b8b	ad 04 07	lda $0704			lda 	identTypeByte
.8b8e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b90	c8		iny				iny
.8b91					_CCVData:
.8b91	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8b93	91 36		sta ($36),y			sta 	(zTemp0),y
.8b95	c8		iny				iny
.8b96	c0 08		cpy #$08			cpy 	#8
.8b98	90 f7		bcc $8b91			bcc 	_CCVData
.8b9a	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8b9d					_CCVCopyName:
.8b9d	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8ba0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba2	e8		inx				inx
.8ba3	c8		iny				iny
.8ba4	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8ba7	d0 f4		bne $8b9d			bne 	_CCVCopyName
.8ba9	98		tya				tya 								; patch offset
.8baa	92 36		sta ($36)			sta 	(zTemp0)
.8bac	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8bae	91 36		sta ($36),y			sta 	(zTemp0),y
.8bb0	88		dey				dey
.8bb1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8bb3	09 80		ora #$80			ora 	#$80
.8bb5	91 36		sta ($36),y			sta 	(zTemp0),y
.8bb7					_CCVFound:
.8bb7	20 4f 87	jsr $874f			jsr 	VariableClose 				; map out variables, perhaps.
.8bba	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8bbc	38		sec				sec
.8bbd	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8bbf	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8bc1	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8bc4	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8bc6	20 3c 8b	jsr $8b3c			jsr 	TokeniseWriteByte
.8bc9	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
