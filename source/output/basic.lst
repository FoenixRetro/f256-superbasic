
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan 18 19:12:08 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 e5 bb	jsr $bbe5		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 18 bc	jsr $bc18		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 96 b5	jsr $b596		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 2a b8	jsr $b82a		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 5c ae	jsr $ae5c			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.8076		c9 42		cmp #$42			cmp 	#"B"
.8078		d0 18		bne $8092			bne 	_NoMachineCode
.807a		ad 03 20	lda $2003			lda 	$2003
.807d		c9 54		cmp #$54			cmp 	#"T"
.807f		d0 11		bne $8092			bne 	_NoMachineCode
.8081		ad 04 20	lda $2004			lda 	$2004
.8084		c9 36		cmp #$36			cmp 	#"6"
.8086		d0 0a		bne $8092			bne 	_NoMachineCode
.8088		ad 05 20	lda $2005			lda 	$2005
.808b		c9 35		cmp #$35			cmp 	#"5"
.808d		d0 03		bne $8092			bne 	_NoMachineCode
.808f		4c 00 20	jmp $2000			jmp 	$2000
.8092						_NoMachineCode:
.8092		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8095		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8097		20 50 81	jsr $8150			jsr 	KNLSetDrive
.809a		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.809c		aa		tax				tax
.809d		a8		tay				tay
.809e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.80a1		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80a3		20 3f 80	jsr $803f			jsr 	SNDCommand
.80a6		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80a8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80ab		a9 09		lda #$09			lda 	#9
.80ad		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		64 01		stz $01				stz 	1
.80b5		ad ad d6	lda $d6ad			lda 	$D6AD
.80b8		20 36 83	jsr $8336			jsr 	PrintHex
.80bb		ad ac d6	lda $d6ac			lda 	$D6AC
.80be		20 36 83	jsr $8336			jsr 	PrintHex
.80c1		ad ab d6	lda $d6ab			lda 	$D6AB
.80c4		20 36 83	jsr $8336			jsr 	PrintHex
.80c7		ad aa d6	lda $d6aa			lda 	$D6AA
.80ca		20 36 83	jsr $8336			jsr 	PrintHex
.80cd		a9 20		lda #$20			lda 	#32
.80cf		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80d2		ad a8 d6	lda $d6a8			lda 	$D6A8
.80d5		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80d8		ad a9 d6	lda $d6a9			lda 	$D6A9
.80db		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80de		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80e0		a9 ee		lda #$ee			lda 	#Prompt & $FF
.80e2		20 8a 96	jsr $968a			jsr 	PrintStringXA
.80e5		20 9d 8f	jsr $8f9d			jsr 	NewProgram 					; erase current program
.80e8		4c 79 85	jmp $8579			jmp 	WarmStart					; make same size.
.80eb		4c 79 85	jmp $8579			jmp 	WarmStart
>80ee		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80f0		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>80f8		32 33 20 33 31

;******  Return to file: ./common/aa.system/00start.asm

>80fd		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.8101						ProcessEvents:
.8101		20 8f 81	jsr $818f			jsr 	KNLSetEventPointer
.8104		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8107		b0 27		bcs $8130			bcs 	_PEExitZ 					; nothing left to process.
.8109		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; go back if event not key.pressed.
.810c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.810e		d0 f1		bne $8101			bne 	ProcessEvents
.8110		ad 65 07	lda $0765			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8113		d0 ec		bne $8101			bne 	ProcessEvents
.8115		ad 64 07	lda $0764			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8118		c9 03		cmp #$03			cmp 	#3
.811a		f0 11		beq $812d			beq 	_PEReturnBreak  			; no, keep going.
.811c		da		phx				phx
.811d		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8120		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8122		f0 06		beq $812a			beq 	_PENoQueue
.8124		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8127		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.812a						_PENoQueue:
.812a		fa		plx				plx
.812b		80 d4		bra $8101			bra 	ProcessEvents
.812d						_PEReturnBreak:
.812d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.812f		60		rts				rts
.8130						_PEExitZ:
.8130		a9 00		lda #$00			lda 	#0
.8132		60		rts				rts
.8133						PopKeyboardQueue:
.8133		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8136		f0 17		beq $814f			beq 	_PKQExit 					; zero, then exit.
.8138		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.813b		48		pha				pha
.813c		da		phx				phx 								; drop head of queue
.813d		a2 00		ldx #$00			ldx 	#0
.813f						_PKQLoop:
.813f		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8142		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8145		e8		inx				inx
.8146		e0 07		cpx #$07			cpx 	#7
.8148		d0 f5		bne $813f			bne 	_PKQLoop
.814a		fa		plx				plx
.814b		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.814e		68		pla				pla 								; restore head of queue.
.814f						_PKQExit:
.814f		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8150						KNLSetDrive:
.8150		8d 5e 07	sta $075e			sta 	KNLDefaultDrive
.8153		60		rts				rts
.8154						KNLOpenFileWrite:
.8154		48		pha				pha
.8155		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8157		80 03		bra $815c			bra 	KNLOpenStart
.8159						KNLOpenFileRead:
.8159		48		pha				pha
.815a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.815c						KNLOpenStart:
.815c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.815e		68		pla				pla
.815f		20 9a 81	jsr $819a			jsr 	KNLSetupFileName
.8162		20 8f 81	jsr $818f			jsr 	KNLSetEventPointer
.8165		ad 5e 07	lda $075e			lda 	KNLDefaultDrive 			; currently drive zero only.
.8168		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.816a		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.816d		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.816f		b0 1d		bcs $818e			bcs     _out
.8171						_loop
.8171		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8174		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8177		b0 f8		bcs $8171			bcs     _loop
.8179		ad 5f 07	lda $075f			lda 	KNLEvent.type
.817c		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.817e		f0 0a		beq $818a			beq 	_success
.8180		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8182		f0 0a		beq $818e			beq 	_out
.8184		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8186		f0 06		beq $818e			beq 	_out
.8188		80 e7		bra $8171			bra     _loop
.818a						_success
.818a		ad 62 07	lda $0762			lda     KNLEvent.file.stream
.818d		18		clc				clc
.818e						_out
.818e		60		rts				rts
.818f						KNLSetEventPointer:
.818f		48		pha				pha
.8190		a9 5f		lda #$5f			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8192		85 f0		sta $f0				sta     kernel.args.events+0
.8194		a9 07		lda #$07			lda     #KNLEvent >> 8
.8196		85 f1		sta $f1				sta     kernel.args.events+1
.8198		68		pla				pla
.8199		60		rts				rts
.819a						KNLSetupFileName:
.819a		5a		phy				phy 								; save Y on stack
.819b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.819d		86 37		stx $37				stx 	zTemp0+1
.819f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.81a1		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.81a3		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.81a5						_KNLGetLength:
.81a5		c8		iny				iny
.81a6		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a8		d0 fb		bne $81a5			bne 	_KNLGetLength
.81aa		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.81ac		7a		ply				ply
.81ad		60		rts				rts
.81ae						KNLReadBlock:
.81ae		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81b0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81b2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81b5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81b7		b0 2e		bcs $81e7			bcs     _KGNBExitFail               ; report as general error
.81b9						_KGRBEventLoop:
.81b9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81bc		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81bf		b0 f8		bcs $81b9			bcs     _KGRBEventLoop
.81c1		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; get event
.81c4		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81c6		f0 0a		beq $81d2			beq     _KNLRBGetNextByte
.81c8		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81ca		f0 1b		beq $81e7			beq 	_KGNBExitFail
.81cc		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81ce		f0 17		beq $81e7			beq 	_KGNBExitFail
.81d0		80 e7		bra $81b9			bra 	_KGRBEventLoop
.81d2						_KNLRBGetNextByte:
.81d2		a9 5e		lda #$5e			lda     #<KNLReadBuffer 			; Set the target buffer
.81d4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81d6		a9 06		lda #$06			lda     #>KNLReadBuffer
.81d8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81da		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Set the target length
.81dd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81df		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81e2		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.81e5		18		clc				clc
.81e6		60		rts				rts
.81e7						_KGNBExitFail:
.81e7		38		sec				sec
.81e8		60		rts				rts
.81e9						KNLWriteBlock:
.81e9		da		phx				phx
.81ea		5a		phy				phy
.81eb		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81ed		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81ef		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81f1		a5 37		lda $37				lda     zTemp0+1
.81f3		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81f5		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81f7		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81fa		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81fc		b0 21		bcs $821f			bcs 	_KWBFailed
.81fe						_KNLWLoop:
.81fe		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8201		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8204		b0 f8		bcs $81fe			bcs     _KNLWLoop
.8206		ad 5f 07	lda $075f			lda     KNLEvent.type 				; various errors.
.8209		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.820b		f0 12		beq $821f			beq 	_KWBFailed
.820d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.820f		f0 0e		beq $821f			beq 	_KWBFailed
.8211		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8213		f0 0a		beq $821f			beq 	_KWBFailed
.8215		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8217		d0 e5		bne $81fe			bne 	_KNLWLoop
.8219		18		clc				clc
.821a		ad 65 07	lda $0765			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.821d		80 01		bra $8220			bra 	_KWBExit
.821f						_KWBFailed:
.821f		38		sec				sec
.8220						_KWBExit:
.8220		7a		ply				ply
.8221		fa		plx				plx
.8222		60		rts				rts
.8223						KNLCloseFile:
.8223		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8225		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8228		60		rts				rts
.8229						KNLCheckKeyPressed:
.8229		20 8f 81	jsr $818f			jsr 	KNLSetEventPointer
.822c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.822f		b0 0b		bcs $823c			bcs 	_CKPNoEvent 				; no event
.8231		ad 5f 07	lda $075f			lda     KNLEvent.type
.8234		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8236		d0 04		bne $823c			bne 	_CKPNoEvent
.8238		ad 64 07	lda $0764			lda     KNLEvent.key.ascii
.823b		60		rts				rts
.823c						_CKPNoEvent:
.823c		a9 00		lda #$00			lda 	#0
.823e		60		rts				rts
.823f						EXTReadController:
.823f		da		phx				phx
.8240		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8242		64 01		stz $01				stz 	1 							; switch to I/O 0
.8244		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8247		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8249		fa		plx				plx
.824a		60		rts				rts
.065e						KNLReadBuffer:
>065e								.fill   256
.075e						KNLDefaultDrive:
>075e								.byte 	?
.075f						KNLEvent
>075f						type        .byte   ?   ; Enum above
>0760						buf         .byte   ?   ; page id or zero
>0761						ext         .byte   ?   ; page id or zero
.0762						key
>0762						keyboard    .byte   ?   ; Keyboard ID
>0763						raw         .byte   ?   ; Raw key ID
>0764						ascii       .byte   ?   ; ASCII value
>0765						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0762						mouse
.0762						delta
>0762						x           .byte   ?
>0763						y           .byte   ?
>0764						z           .byte   ?
>0765						buttons     .byte   ?
.0762						clicks
>0762						inner       .byte   ?
>0763						middle      .byte   ?
>0764						outer       .byte   ?
.0762						joystick
>0762						joy0        .byte   ?
>0763						joy1        .byte   ?
.0762						udp
>0762						token       .byte   ?   ; TODO: break out into fields
.0762						file
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						data
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						read        .byte   ?   ; Number of bytes actually read
.0764						wrote
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						wrote       .byte   ?   ; Number of bytes actually read
.0762						directory
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						volume
>0764						len         .byte   ?   ; Length of volname (in buf)
>0765						flags       .byte   ?   ; block size, text encoding
.0764						file
>0764						len         .byte   ?
>0765						flags       .byte   ?   ; block scale, text encoding, approx size
.0764						free
>0764						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.824b						AssembleGroup1:
.824b		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.824d		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8250		80 02		bra $8254			bra 	AsmGroup12
.8252						AssembleGroup2:
.8252		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8254						AsmGroup12:
.8254		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8257		68		pla				pla 								; pop the return address to access the information following.
.8258		fa		plx				plx
.8259		20 e0 82	jsr $82e0			jsr 	AccessParameters 			; get opcode and save as base
.825c		8d 20 04	sta $0420			sta 	BaseOpcode
.825f		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8262		d0 08		bne $826c			bne 	_AG12HaveMask
.8264		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8266		20 e8 82	jsr $82e8			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8269		8d 21 04	sta $0421			sta 	ModeMask
.826c						_AG12HaveMask:
.826c		20 1c 84	jsr $841c			jsr 	TypeAndCalculateOperand 	; get zero page type
.826f		da		phx				phx 								; save found address mode
.8270		20 4c 83	jsr $834c			jsr 	AssembleModeX
.8273		fa		plx				plx  								; restore address mode
.8274		b0 0b		bcs $8281			bcs 	_AG12Exit
.8276		20 82 82	jsr $8282			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8279		20 4c 83	jsr $834c			jsr 	AssembleModeX
.827c		b0 03		bcs $8281			bcs 	_AG12Exit
.827e		4c 1c a8	jmp $a81c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8281						_AG12Exit:
.8281		60		rts				rts
.8282						PromoteToAbsolute:
.8282		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8284		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8286		f0 19		beq $82a1			beq 	_PTADo
.8288		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.828a		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.828c		f0 13		beq $82a1			beq 	_PTADo
.828e		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8290		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8292		f0 0d		beq $82a1			beq 	_PTADo
.8294		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8296		e0 d1		cpx #$d1			cpx 	#AM_IND
.8298		f0 07		beq $82a1			beq 	_PTADo
.829a		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.829c		e0 c0		cpx #$c0			cpx 	#AM_INDX
.829e		f0 01		beq $82a1			beq 	_PTADo
.82a0		60		rts				rts
.82a1						_PTADo:
.82a1		aa		tax				tax
.82a2		60		rts				rts
.82a3						AssembleGroup3:
.82a3		68		pla				pla 								; get parameters, which is just the opcode.
.82a4		fa		plx				plx
.82a5		20 e0 82	jsr $82e0			jsr 	AccessParameters 			; get and output opcode
.82a8		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte
.82ab		20 80 84	jsr $8480			jsr 	CalculateOperand 			; get a 16 bit operand
.82ae		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82b0		38		sec				sec
.82b1		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82b4		48		pha				pha 								; LSB in A
.82b5		a5 60		lda $60				lda 	NSMantissa1
.82b7		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.82ba		aa		tax				tax 								; MSB in X
.82bb		68		pla				pla
.82bc		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82bd		69 7f		adc #$7f			adc 	#$7F
.82bf		90 01		bcc $82c2			bcc 	_AG3NoCarry
.82c1		e8		inx				inx
.82c2						_AG3NoCarry:
.82c2		38		sec				sec 								; fix back and write out anyways.
.82c3		e9 80		sbc #$80			sbc 	#$80
.82c5		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte
.82c8		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82ca		f0 0a		beq $82d6			beq 	_AG3Exit
.82cc		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.82cf		29 01		and #$01			and 	#1
.82d1		f0 03		beq $82d6			beq 	_AG3Exit
.82d3		4c 21 a8	jmp $a821			jmp 	RangeError 					; no, branch is out of range
.82d6						_AG3Exit:
.82d6		60		rts				rts
.82d7						AssembleGroup4:
.82d7		68		pla				pla 								; pop address
.82d8		fa		plx				plx
.82d9		20 e0 82	jsr $82e0			jsr 	AccessParameters 			; access and get first
.82dc		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte 			; output it.
.82df		60		rts				rts
.82e0						AccessParameters:
.82e0		8d 1d 04	sta $041d			sta 	ParamStart
.82e3		8e 1e 04	stx $041e			stx 	ParamStart+1
.82e6		a9 01		lda #$01			lda 	#1
.82e8						GetParameter:
.82e8		5a		phy				phy
.82e9		a8		tay				tay
.82ea		ad 1d 04	lda $041d			lda 	ParamStart
.82ed		85 36		sta $36				sta 	zTemp0
.82ef		ad 1e 04	lda $041e			lda 	ParamStart+1
.82f2		85 37		sta $37				sta 	zTemp0+1
.82f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.82f6		7a		ply				ply
.82f7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82f8						AssemblerWriteByte:
.82f8		48		pha			pha
.82f9		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.82fc		29 02		and #$02		and 	#2
.82fe		f0 1b		beq $831b		beq 	_AWBNoPrint
.8300		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8303		20 36 83	jsr $8336		jsr 	PrintHex
.8306		ad 1a 04	lda $041a		lda		AssemblerAddress
.8309		20 36 83	jsr $8336		jsr 	PrintHex
.830c		a9 20		lda #$20		lda 	#' '
.830e		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8311		68		pla			pla 									; print byte
.8312		48		pha			pha
.8313		20 36 83	jsr $8336		jsr 	PrintHex
.8316		a9 0d		lda #$0d		lda 	#13
.8318		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.831b						_AWBNoPrint:
.831b		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.831e		85 36		sta $36			sta 	zTemp0
.8320		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8323		f0 0e		beq $8333		beq 	_AWBRange
.8325		85 37		sta $37			sta 	zTemp0+1
.8327		68		pla			pla 									; write byte out
.8328		92 36		sta ($36)		sta 	(zTemp0)
.832a		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.832d		d0 03		bne $8332		bne 	_AWBNoCarry
.832f		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8332						_AWBNoCarry:
.8332		60		rts			rts
.8333						_AWBRange:
.8333		4c 21 a8	jmp $a821		jmp 	RangeError
.8336						PrintHex:
.8336		48		pha				pha
.8337		4a		lsr a				lsr 	a
.8338		4a		lsr a				lsr 	a
.8339		4a		lsr a				lsr 	a
.833a		4a		lsr a				lsr 	a
.833b		20 3f 83	jsr $833f			jsr 	_PrintNibble
.833e		68		pla				pla
.833f						_PrintNibble:
.833f		29 0f		and #$0f			and 	#15
.8341		c9 0a		cmp #$0a			cmp 	#10
.8343		90 02		bcc $8347			bcc 	_NoShift
.8345		69 06		adc #$06			adc 	#6
.8347						_NoShift:
.8347		69 30		adc #$30			adc 	#48
.8349		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.834c						AssembleModeX:
.834c		5a		phy				phy
.834d		ad 1f 04	lda $041f			lda 	IsGroup1
.8350		f0 17		beq $8369			beq 	_AMXGroup2
.8352		8a		txa				txa 							; is it in group # 1
.8353		29 40		and #$40			and 	#AM_ISG1
.8355		f0 4d		beq $83a4			beq 	_AMXFail 				; no, give up.
.8357		8a		txa				txa 							; get back.
.8358		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.835a		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.835c		d0 22		bne $8380			bne 	_AMXHaveInfo
.835e		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8361		c9 81		cmp #$81			cmp 	#$81
.8363		f0 3f		beq $83a4			beq 	_AMXFail
.8365		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8367		80 17		bra $8380			bra 	_AMXHaveInfo 			; odd design decision there.
.8369						_AMXGroup2:
.8369		8a		txa				txa 							; is it in group 2 ?
.836a		29 20		and #$20			and 	#AM_ISG2
.836c		f0 36		beq $83a4			beq 	_AMXFail 				; no, give up.
.836e		8a		txa				txa 							; get the offset into Y
.836f		29 1f		and #$1f			and 	#$1F
.8371		4a		lsr a				lsr 	a 						; make it 0-7.
.8372		4a		lsr a				lsr  	a
.8373		a8		tay				tay
.8374		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8377						_AMXCheckOkay:
.8377		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8378		88		dey				dey
.8379		10 fc		bpl $8377			bpl 	_AMXCheckOkay
.837b		90 27		bcc $83a4			bcc 	_AMXFail 				; not allowed.
.837d		8a		txa				txa  							; get mask back
.837e		29 1f		and #$1f			and 	#$1F
.8380						_AMXHaveInfo:
.8380		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8382		10 04		bpl $8388			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8384		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8386		d0 1c		bne $83a4			bne 	_AMXFail
.8388						_AMXAnySize:
.8388		18		clc				clc 							; add offset to the base opcode
.8389		6d 20 04	adc $0420			adc 	BaseOpcode
.838c						_AMXOutputCode:
.838c		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte 		; write the opcode out.
.838f		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8391		f0 0e		beq $83a1			beq 	_AMXExit
.8393		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8395		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte
.8398		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.839a		30 05		bmi $83a1			bmi 	_AMXExit
.839c		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.839e		20 f8 82	jsr $82f8			jsr 	AssemblerWriteByte
.83a1						_AMXExit:
.83a1		7a		ply				ply
.83a2		38		sec				sec
.83a3		60		rts				rts
.83a4						_AMXFail:
.83a4		a0 00		ldy #$00			ldy 	#0
.83a6						_AMXCheckOddities:
.83a6		8a		txa				txa
.83a7		d9 ce 83	cmp $83ce,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83aa		d0 15		bne $83c1			bne 	_AMXCONext
.83ac		b9 cc 83	lda $83cc,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83af		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83b2		d0 0d		bne $83c1			bne 	_AMXCONext
.83b4		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83b6		10 04		bpl $83bc			bpl 	_AMXCONotZero
.83b8		a5 60		lda $60				lda 	NSMantissa1
.83ba		d0 05		bne $83c1			bne 	_AMXCONext
.83bc						_AMXCONotZero:
.83bc		b9 cd 83	lda $83cd,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83bf		80 cb		bra $838c			bra 	_AMXOutputCode 			; and assemble it
.83c1						_AMXCONext:
.83c1		c8		iny				iny
.83c2		c8		iny				iny
.83c3		c8		iny				iny
.83c4		b9 cc 83	lda $83cc,y			lda 	ExtraOpcode+0,y 		; end of table
.83c7		d0 dd		bne $83a6			bne 	_AMXCheckOddities
.83c9						_AMXCOFail:
.83c9		7a		ply				ply
.83ca		18		clc				clc
.83cb		60		rts				rts
.83cc						ExtraOpcode:
>83cc		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>83cf		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>83d2		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>83d5		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>83d8		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>83db		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>83de		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>83e1		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>83e4		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>83e7		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83ea		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83eb						LabelHere:
.83eb		c8		iny				iny 								; skip .
.83ec		a2 00		ldx #$00			ldx 	#0 							; get a term
.83ee		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm
.83f1		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.83f3		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83f5		d0 22		bne $8419			bne 	_ALType 					; otherwise typing error
.83f7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83f9		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.83fb		b5 60		lda $60,x			lda 	NSMantissa1,x
.83fd		85 37		sta $37				sta 	zTemp0+1
.83ff		5a		phy				phy 								; copy address in (64k)
.8400		a0 01		ldy #$01			ldy 	#1
.8402		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8405		92 36		sta ($36)			sta 	(zTemp0)
.8407		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.840a		91 36		sta ($36),y			sta 	(zTemp0),y
.840c		c8		iny				iny
.840d		a9 00		lda #$00			lda 	#0 							; zero the rest.
.840f		91 36		sta ($36),y			sta 	(zTemp0),y
.8411		c8		iny				iny
.8412		91 36		sta ($36),y			sta 	(zTemp0),y
.8414		c8		iny				iny
.8415		91 36		sta ($36),y			sta 	(zTemp0),y
.8417		7a		ply				ply
.8418		60		rts				rts
.8419						_ALType:
.8419		4c 26 a8	jmp $a826			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.841c						TypeAndCalculateOperand:
.841c		b1 30		lda ($30),y			lda 	(codePtr),y
.841e		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8420		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8422		f0 5b		beq $847f			beq 	_TACOExit
.8424		c9 80		cmp #$80			cmp 	#KWC_EOL
.8426		f0 57		beq $847f			beq 	_TACOExit
.8428		c8		iny				iny
.8429		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.842b		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.842d		f0 51		beq $8480			beq 	CalculateOperand
.842f		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8431		f0 1f		beq $8452			beq 	_TACOIndirect
.8433		88		dey				dey 								; undo get of first character
.8434		20 80 84	jsr $8480			jsr 	CalculateOperand 			; get operand
.8437		b1 30		lda ($30),y			lda 	(codePtr),y
.8439		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.843b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.843d		d0 40		bne $847f			bne 	_TACOExit
.843f		c8		iny				iny
.8440		20 8a 84	jsr $848a			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8443		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8445		c9 58		cmp #$58			cmp 	#'X'
.8447		f0 36		beq $847f			beq 	_TACOExit
.8449		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.844b		c9 59		cmp #$59			cmp 	#'Y'
.844d		f0 30		beq $847f			beq 	_TACOExit
.844f						_TACOSyntax:
.844f		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.8452						_TACOIndirect:
.8452		20 80 84	jsr $8480			jsr 	CalculateOperand 			; get the operand
.8455		b1 30		lda ($30),y			lda 	(codePtr),y
.8457		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8459		f0 17		beq $8472			beq 	_TACOIndX
.845b		20 18 96	jsr $9618			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.845e		b1 30		lda ($30),y			lda 	(codePtr),y
.8460		a2 d1		ldx #$d1			ldx 	#AM_IND
.8462		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8464		d0 19		bne $847f			bne 	_TACOExit
.8466		c8		iny				iny
.8467		20 8a 84	jsr $848a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.846a		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.846c		d0 e1		bne $844f			bne 	_TACOSyntax
.846e		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8470		80 0d		bra $847f			bra 	_TACOExit
.8472						_TACOIndX:
.8472		c8		iny				iny
.8473		20 8a 84	jsr $848a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8476		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8478		d0 d5		bne $844f			bne 	_TACOSyntax
.847a		20 18 96	jsr $9618			jsr 	CheckRightBracket			; check )
.847d		a2 c0		ldx #$c0			ldx 	#AM_INDX
.847f						_TACOExit:
.847f		60		rts				rts
.8480						CalculateOperand:
.8480		48		pha				pha
.8481		da		phx				phx
.8482		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8484		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8487		fa		plx				plx
.8488		68		pla				pla
.8489		60		rts				rts
.848a						TACOCheckXY:
.848a		b1 30		lda ($30),y			lda 	(codePtr),y
.848c		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.848e		c9 40		cmp #$40			cmp 	#$40
.8490		d0 21		bne $84b3			bne 	_TCXYFail
.8492		b1 30		lda ($30),y			lda 	(codePtr),y
.8494		18		clc				clc
.8495		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8497		85 37		sta $37				sta 	zTemp0+1
.8499		c8		iny				iny
.849a		b1 30		lda ($30),y			lda 	(codePtr),y
.849c		c8		iny				iny
.849d		85 36		sta $36				sta 	zTemp0
.849f		5a		phy				phy 								; save position
.84a0		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84a2		b1 36		lda ($36),y			lda 	(zTemp0),y
.84a4		d0 0c		bne $84b2			bne 	_TCXYPopFail
.84a6		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84a8		b1 36		lda ($36),y			lda 	(zTemp0),y
.84aa		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84ac		f0 08		beq $84b6			beq 	_TCXYFound
.84ae		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84b0		f0 04		beq $84b6			beq 	_TCXYFound
.84b2						_TCXYPopFail:
.84b2		7a		ply				ply
.84b3						_TCXYFail:
.84b3		a9 00		lda #$00			lda 	#0
.84b5		60		rts				rts
.84b6						_TCXYFound:
.84b6		7a		ply				ply 								; restore position
.84b7		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84ba						BackloadProgram:
.84ba		20 9d 8f	jsr $8f9d			jsr 	NewProgram 					; does the actual NEW.
.84bd		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84bf		a9 11		lda #$11			lda 	#_BLLoad & $FF
.84c1		20 8a 96	jsr $968a			jsr 	PrintStringXA
.84c4		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84c6		8d 66 07	sta $0766			sta 	BackLoadPage
.84c9		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84cb		8d 67 07	sta $0767			sta 	0+BackLoadPointer
.84ce		a9 60		lda #$60			lda 	#(($6000) >> 8)
.84d0		8d 68 07	sta $0768			sta 	1+BackLoadPointer
.84d3		a9 ff		lda #$ff			lda 	#$FF
.84d5		8d fa ff	sta $fffa			sta 	$FFFA
.84d8						_BPLoop:
.84d8		a2 ff		ldx #$ff			ldx 	#$FF
.84da		20 26 85	jsr $8526			jsr 	BLReadByte 					; read a byte
.84dd		c9 00		cmp #$00			cmp 	#0
.84df		f0 29		beq $850a			beq 	_BPExit 					; if 0 exit
.84e1		30 27		bmi $850a			bmi 	_BPExit 					; if -ve exit
.84e3						_BPCopy:
.84e3		e8		inx				inx  								; copy byte into the lineBuffer
.84e4		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.84e7		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.84ea		20 26 85	jsr $8526			jsr 	BLReadByte 					; read next byte
.84ed		30 0a		bmi $84f9			bmi 	_BPEndLine 					; -ve = EOL
.84ef		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.84f1		d0 02		bne $84f5			bne 	_BPNotTab
.84f3		a9 20		lda #$20			lda 	#' '
.84f5						_BPNotTab:
.84f5		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.84f7		b0 ea		bcs $84e3			bcs 	_BPCopy 					; until a control character, should be 13 received.
.84f9						_BPEndLine:
.84f9		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.84fc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.84ff		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8502		f0 d4		beq $84d8			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8504		38		sec				sec 								; append not insert
.8505		20 85 ad	jsr $ad85			jsr 	MemoryInsertLine 			; append to current program
.8508		80 ce		bra $84d8			bra 	_BPLoop
.850a						_BPExit:
.850a		9c fa ff	stz $fffa			stz 	$FFFA
.850d		20 31 87	jsr $8731			jsr 	ClearCommand 				; clear variables etc.
.8510		60		rts				rts
.8511						_BLLoad:
>8511		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8519		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8526						BLReadByte:
.8526		da		phx				phx
.8527		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8529		ad 66 07	lda $0766			lda 	BackLoadPage	 			; set current page
.852c		85 0b		sta $0b				sta 	8+3
.852e		ad 67 07	lda $0767			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8531		85 36		sta $36				sta 	zTemp0
.8533		ad 68 07	lda $0768			lda 	BackLoadPointer+1
.8536		85 37		sta $37				sta 	zTemp0+1
.8538		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.853a		ee 67 07	inc $0767			inc 	BackLoadPointer 			; bump pointer
.853d		d0 0f		bne $854e			bne 	_BLNoCarry
.853f		ee 68 07	inc $0768			inc 	BackLoadPointer+1
.8542		10 0a		bpl $854e			bpl 	_BLNoCarry 					; need a new page
.8544		48		pha				pha
.8545		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8547		8d 68 07	sta $0768			sta 	BackLoadPointer+1
.854a		ee 66 07	inc $0766			inc 	BackLoadPage 				; next page from source.
.854d		68		pla				pla
.854e						_BLNoCarry:
.854e		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8550		fa		plx				plx
.8551		c9 00		cmp #$00			cmp 	#0
.8553		60		rts				rts
.0766						BackLoadPage:
>0766								.fill  	1
.0767						BackLoadPointer:
>0767								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8554						EditProgramCode:
.8554		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8557		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.855a		20 29 ae	jsr $ae29			jsr 	MemorySearch
.855d		90 05		bcc $8564			bcc 	_EPCNoDelete 				; reached the end : don't delete
.855f		d0 03		bne $8564			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8561		20 4e ad	jsr $ad4e			jsr 	MemoryDeleteLine 			; delete the line
.8564						_EPCNoDelete:
.8564		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8567		c9 80		cmp #$80			cmp 	#KWC_EOL
.8569		f0 0d		beq $8578			beq 	_EPCNoInsert
.856b		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.856e		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8571		20 29 ae	jsr $ae29			jsr 	MemorySearch
.8574		18		clc				clc 								; insert at this point.
.8575		20 85 ad	jsr $ad85			jsr 	MemoryInsertLine 			; insert the line
.8578						_EPCNoInsert:
.8578		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8579						WarmStart:
.8579		a2 ff		ldx #$ff			ldx 	#$FF
.857b		9a		txs				txs
.857c		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.857e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8581		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.8584		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.8587		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.858a		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.858d		d0 17		bne $85a6			bne 	_WSEditCode 				; if so,edit code.
.858f		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8592		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8594		85 30		sta $30				sta 	codePtr
.8596		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8598		85 31		sta $31				sta 	codePtr+1
.859a		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.859d		c9 80		cmp #$80			cmp 	#KWC_EOL
.859f		f0 d8		beq $8579			beq 	WarmStart
.85a1		20 3a 91	jsr $913a			jsr 	RUNCodePointerLine 			; execute that line.
.85a4		80 d3		bra $8579			bra 	WarmStart
.85a6						_WSEditCode:
.85a6		20 54 85	jsr $8554			jsr 	EditProgramCode 			; edit the program code
.85a9		20 31 87	jsr $8731			jsr 	ClearCommand 				; clear all variables etc.
.85ac		80 cb		bra $8579			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85ae						AssembleCommand:
.85ae		a2 00		ldx #$00			ldx 	#0
.85b0		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; start address
.85b3		a5 58		lda $58				lda 	NSMantissa0
.85b5		8d 1a 04	sta $041a			sta 	AssemblerAddress
.85b8		a5 60		lda $60				lda 	NSMantissa1
.85ba		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.85bd		20 20 96	jsr $9620			jsr 	CheckComma
.85c0		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; options 0-3
.85c3		a5 58		lda $58				lda 	NSMantissa0
.85c5		8d 1c 04	sta $041c			sta 	AssemblerControl
.85c8		60		rts				rts
.85c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85ca						AssertCommand:
.85ca		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.85cc		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; the assert test
.85cf		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; exit if result is non zero.
.85d2		d0 05		bne $85d9			bne 	_ACExit
.85d4		a9 0a		lda #$0a		lda	#10
.85d6		4c 31 96	jmp $9631		jmp	ErrorHandler
.85d9						_ACExit:
.85d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.85da						Command_BLoad:
.85da		a2 00		ldx #$00			ldx 	#0
.85dc		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; file name to load
.85df		20 20 96	jsr $9620			jsr 	CheckComma 					; consume comma
.85e2		e8		inx				inx
.85e3		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; load address (full physical address)
.85e6		5a		phy				phy
.85e7		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.85e9		a6 60		ldx $60				ldx 	NSMantissa1
.85eb		20 59 81	jsr $8159			jsr 	KNLOpenFileRead 			; open file for reading
.85ee		b0 4e		bcs $863e			bcs 	CBLErrorHandler 			; error, so fail.
.85f0		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.85f3		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.85f5		20 41 86	jsr $8641			jsr 	BLOpenPhysicalMemory 		; open for access.
.85f8						_BLReadFile:
.85f8		ad 6d 07	lda $076d			lda 	BasicFileStream
.85fb		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.85fd		20 ae 81	jsr $81ae			jsr 	KNLReadBlock 				; read next block
.8600		b0 22		bcs $8624			bcs 	_BLFileError 				; file error, which might be EOF.
.8602		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8604		f0 f2		beq $85f8			beq 	_BLReadFile
.8606		8d 6b 07	sta $076b			sta 	BLCopyCounter 				; counter.
.8609		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; copy the buffer out here
.860c		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.860e						_BLCopyLoop:
.860e		bd 5e 06	lda $065e,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8611		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8613		c8		iny				iny
.8614		d0 03		bne $8619			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8616		20 69 86	jsr $8669			jsr 	BLAdvancePhysicalMemory
.8619						_BLNoAdjust:
.8619		e8		inx				inx
.861a		ce 6b 07	dec $076b			dec 	BLCopyCounter
.861d		d0 ef		bne $860e			bne 	_BLCopyLoop
.861f		8c 6a 07	sty $076a			sty 	BLYOffset 					; update Y offset
.8622		80 d4		bra $85f8			bra 	_BLReadFile 				; go ask for more.
.8624						_BLFileError:
.8624		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8626		d0 16		bne $863e			bne 	CBLErrorHandler				; no, it's an actual error
.8628		20 63 86	jsr $8663			jsr 	BLClosePhysicalMemory 		; close the access.
.862b		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.862e		20 23 82	jsr $8223			jsr 	KNLCloseFile
.8631		7a		ply				ply
.8632		60		rts				rts
.8633						CBLCloseError:
.8633		48		pha				pha
.8634		20 63 86	jsr $8663			jsr 	BLClosePhysicalMemory
.8637		ad 6d 07	lda $076d			lda 	BasicFileStream
.863a		20 23 82	jsr $8223			jsr 	KNLCloseFile
.863d		68		pla				pla
.863e						CBLErrorHandler:
.863e		4c 48 8d	jmp $8d48			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8641						BLOpenPhysicalMemory:
.8641		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8643		8d 69 07	sta $0769			sta 	BLNormalMapping
.8646		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8648		8d 6a 07	sta $076a			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.864b		64 3a		stz $3a				stz 	zTemp2
.864d		b5 60		lda $60,x			lda 	NSMantissa1,x
.864f		29 1f		and #$1f			and 	#$1F
.8651		09 60		ora #$60			ora 	#BLAccessPage << 5
.8653		85 3b		sta $3b				sta 	zTemp2+1
.8655		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8657		16 60		asl $60,x			asl 	NSMantissa1,x
.8659		2a		rol a				rol 	a
.865a		16 60		asl $60,x			asl 	NSMantissa1,x
.865c		2a		rol a				rol 	a
.865d		16 60		asl $60,x			asl 	NSMantissa1,x
.865f		2a		rol a				rol 	a
.8660		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8662		60		rts				rts
.8663						BLClosePhysicalMemory:
.8663		ad 69 07	lda $0769			lda 	BLNormalMapping
.8666		85 0b		sta $0b				sta 	BLAccessPage+8
.8668		60		rts				rts
.8669						BLAdvancePhysicalMemory:
.8669		48		pha				pha
.866a		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.866c		a5 3b		lda $3b				lda 	zTemp2+1
.866e		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8670		d0 06		bne $8678			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8672		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8674		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8676		85 3b		sta $3b				sta 	zTemp2+1
.8678						_BLAPMExit:
.8678		68		pla				pla
.8679		60		rts				rts
.0769						BLNormalMapping:
>0769								.fill 	1
.076a						BLYOffset:
>076a								.fill 	1
.076b						BLCopyCounter:
>076b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.867a						Command_BSave:
.867a		a2 00		ldx #$00			ldx 	#0
.867c		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; file name to load
.867f		20 20 96	jsr $9620			jsr 	CheckComma 					; consume comma
.8682		e8		inx				inx
.8683		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; load address (full physical address)
.8686		20 20 96	jsr $9620			jsr 	CheckComma 					; consume comma
.8689		e8		inx				inx
.868a		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; data length (3 bytes only)
.868d		5a		phy				phy
.868e		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8690		a6 60		ldx $60				ldx 	NSMantissa1
.8692		20 54 81	jsr $8154			jsr 	KNLOpenFileWrite 			; open file for reading
.8695		b0 62		bcs $86f9			bcs 	CBSErrorHandler 			; error, so fail.
.8697		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.869a		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.869c		20 41 86	jsr $8641			jsr 	BLOpenPhysicalMemory 		; open for access.
.869f		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86a1		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; used for data offset.
.86a4						_BSWriteToFileLoop:
.86a4		38		sec				sec 								; pre decrement count.
.86a5		a5 5a		lda $5a				lda 	NSMantissa0+2
.86a7		e9 01		sbc #$01			sbc 	#1
.86a9		85 5a		sta $5a				sta 	NSMantissa0+2
.86ab		a5 62		lda $62				lda 	NSMantissa1+2
.86ad		e9 00		sbc #$00			sbc 	#0
.86af		85 62		sta $62				sta 	NSMantissa1+2
.86b1		a5 6a		lda $6a				lda 	NSMantissa2+2
.86b3		e9 00		sbc #$00			sbc 	#0
.86b5		85 6a		sta $6a				sta 	NSMantissa2+2
.86b7		30 15		bmi $86ce			bmi 	_BSFileComplete 			; undercounted, so exit.
.86b9		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86bb		9d 5e 06	sta $065e,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86be		e8		inx				inx
.86bf		c8		iny				iny 								; next byte
.86c0		d0 03		bne $86c5			bne 	_BSNoCheck
.86c2		20 69 86	jsr $8669			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86c5						_BSNoCheck:
.86c5		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86c7		d0 db		bne $86a4			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86c9		20 dc 86	jsr $86dc			jsr 	BSFlushBuffer 				; yes, flush the buffer
.86cc		80 d6		bra $86a4			bra 	_BSWriteToFileLoop 			; and keep on going
.86ce						_BSFileComplete:
.86ce		20 dc 86	jsr $86dc			jsr 	BSFlushBuffer 				; write the buffer remainder.
.86d1		20 63 86	jsr $8663			jsr 	BLClosePhysicalMemory 		; close the access.
.86d4		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.86d7		20 23 82	jsr $8223			jsr 	KNLCloseFile
.86da		7a		ply				ply
.86db		60		rts				rts
.86dc						BSFlushBuffer:
.86dc		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.86de		f0 0d		beq $86ed			beq 	_BSFBExit 					; if so, exit.
.86e0		a9 5e		lda #$5e			lda 	#KNLReadBuffer & $FF 		; where to write from.
.86e2		85 36		sta $36				sta 	zTemp0
.86e4		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.86e6		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.86e8		20 08 94	jsr $9408			jsr 	CLWriteByteBlock 			; write it.
.86eb		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.86ed						_BSFBExit:
.86ed		60		rts				rts
.86ee						CBSSCloseError:
.86ee		48		pha				pha
.86ef		20 63 86	jsr $8663			jsr 	BLClosePhysicalMemory
.86f2		ad 6d 07	lda $076d			lda 	BasicFileStream
.86f5		20 23 82	jsr $8223			jsr 	KNLCloseFile
.86f8		68		pla				pla
.86f9						CBSErrorHandler:
.86f9		4c 48 8d	jmp $8d48			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86fc						CallCommand:
.86fc		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.86fe		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8701						_CCClear
.8701		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8702		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; these are optional sequentially.
.8705		e0 04		cpx #$04			cpx 	#4
.8707		d0 f8		bne $8701			bne 	_CCClear
.8709		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.870b						_CCCParam:
.870b		b1 30		lda ($30),y			lda 	(codePtr),y
.870d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870f		d0 09		bne $871a			bne 	_CCCRun6502
.8711		c8		iny				iny 								; skip comma
.8712		e8		inx				inx	 								; next level
.8713		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8716		e0 03		cpx #$03			cpx 	#3
.8718		90 f1		bcc $870b			bcc 	_CCCParam 					; done all 3 ?
.871a						_CCCRun6502:
.871a		5a		phy				phy 								; save position
.871b		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.871d		85 37		sta $37				sta 	zTemp0+1
.871f		a5 58		lda $58				lda 	NSMantissa0
.8721		85 36		sta $36				sta 	zTemp0
.8723		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8725		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8727		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8729		20 2e 87	jsr $872e			jsr 	_CCCZTemp0 					; call zTemp0
.872c		7a		ply				ply 								; restore position and exit
.872d		60		rts				rts
.872e						_CCCZTemp0:
.872e		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8731						ClearCommand:
.8731		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8733		85 36		sta $36				sta 	0+zTemp0
.8735		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8737		85 37		sta $37				sta 	1+zTemp0
.8739						_ClearZeroLoop:
.8739		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.873b		f0 24		beq $8761			beq 	_ClearZeroEnd
.873d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.873f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8741						_ClearOneVariable:
.8741		91 36		sta ($36),y			sta 	(zTemp0),y
.8743		c8		iny				iny
.8744		c0 08		cpy #$08			cpy 	#8
.8746		d0 f9		bne $8741			bne 	_ClearOneVariable
.8748		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.874a		b1 36		lda ($36),y			lda 	(zTemp0),y
.874c		c9 18		cmp #$18			cmp 	#NSTProcedure
.874e		d0 04		bne $8754			bne 	_ClearNotProcedure
.8750		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8752		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8754						_ClearNotProcedure:
.8754		18		clc				clc 								; go to the next variable
.8755		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8757		65 36		adc $36				adc 	zTemp0
.8759		85 36		sta $36				sta 	zTemp0
.875b		90 dc		bcc $8739			bcc 	_ClearZeroLoop
.875d		e6 37		inc $37				inc 	zTemp0+1
.875f		80 d8		bra $8739			bra 	_ClearZeroLoop
.8761						_ClearZeroEnd:
.8761		18		clc				clc
.8762		a5 36		lda $36				lda 	zTemp0
.8764		69 01		adc #$01			adc 	#1
.8766		8d 08 04	sta $0408			sta 	lowMemPtr
.8769		a5 37		lda $37				lda 	zTemp0+1
.876b		69 00		adc #$00			adc 	#0
.876d		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8770		20 e3 b7	jsr $b7e3			jsr 	StackReset
.8773		20 49 b8	jsr $b849			jsr 	StringSystemInitialise
.8776		20 c7 94	jsr $94c7			jsr 	ProcedureScan
.8779		20 dc 90	jsr $90dc			jsr 	Command_Restore
.877c		9c 1a 04	stz $041a			stz 	AssemblerAddress
.877f		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.8782		9c 1c 04	stz $041c			stz 	AssemblerControl
.8785		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.8788		20 6b a1	jsr $a16b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.878b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.878c						ClearScreen:
.878c		5a		phy				phy
.878d		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.878f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8792		7a		ply				ply
.8793		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8794						Command_Data:
.8794		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8796		a2 80		ldx #$80			ldx 	#KWC_EOL
.8798		20 19 95	jsr $9519			jsr 	ScanForward
.879b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.879c						DimCommand:
.879c		b1 30		lda ($30),y			lda 	(codePtr),y
.879e		29 c0		and #$c0			and 	#$C0
.87a0		c9 40		cmp #$40			cmp 	#$40
.87a2		d0 7a		bne $881e			bne 	_DCSyntax 				; n o, error.
.87a4		b1 30		lda ($30),y			lda 	(codePtr),y
.87a6		18		clc				clc
.87a7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87a9		85 3f		sta $3f				sta 	zaTemp+1
.87ab		c8		iny				iny
.87ac		b1 30		lda ($30),y			lda 	(codePtr),y
.87ae		c8		iny				iny
.87af		85 3e		sta $3e				sta 	zaTemp
.87b1		5a		phy				phy
.87b2		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87b4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b6		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87b8		c9 18		cmp #$18			cmp 	#NSTProcedure
.87ba		f0 62		beq $881e			beq 	_DCSyntax
.87bc		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87be		29 04		and #$04			and 	#NSBIsArray
.87c0		f0 64		beq $8826			beq 	_DCType
.87c2		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87c4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c6		d0 59		bne $8821			bne 	_DCRedefine
.87c8		7a		ply				ply
.87c9		20 29 88	jsr $8829			jsr 	_DCGetSize 				; get array size, check it.
.87cc		5a		phy				phy
.87cd		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87cf		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87d1		7a		ply				ply 							; is there a second (e.g. ,x)
.87d2		b1 30		lda ($30),y			lda 	(codePtr),y
.87d4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87d6		d0 0a		bne $87e2			bne 	_DCOneDimension
.87d8		c8		iny				iny 							; skip comma
.87d9		20 29 88	jsr $8829			jsr 	_DCGetSize 				; get 2nd array size
.87dc		5a		phy				phy
.87dd		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87df		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87e1		7a		ply				ply
.87e2						_DCOneDimension:
.87e2		5a		phy				phy 							; save position
.87e3		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87e5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87e7		aa		tax				tax
.87e8		c8		iny				iny
.87e9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87eb		e8		inx				inx 							; bump them.
.87ec		1a		inc a				inc 	a
.87ed		20 49 a6	jsr $a649			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87f0		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87f2		29 e0		and #$e0			and 	#$E0
.87f4		d0 23		bne $8819			bne 	_DCSize
.87f6		a0 02		ldy #$02			ldy 	#2 						; get base type
.87f8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87fa		20 37 88	jsr $8837			jsr 	ScaleByBaseType 		; scale by base type
.87fd		a5 36		lda $36				lda 	zTemp0
.87ff		a6 37		ldx $37				ldx 	zTemp0+1
.8801		20 2d a1	jsr $a12d			jsr 	AllocateXABytes 		; allocate memory
.8804		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8806		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8808		c8		iny				iny
.8809		8a		txa				txa
.880a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.880c		7a		ply				ply 							; get position back
.880d		20 18 96	jsr $9618			jsr 	CheckRightBracket 		; check )
.8810		b1 30		lda ($30),y			lda 	(codePtr),y
.8812		c8		iny				iny 							; consume in case
.8813		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8815		f0 85		beq $879c			beq 	DimCommand
.8817		88		dey				dey 							; undo consume
.8818		60		rts				rts
.8819						_DCSize:
.8819		a9 16		lda #$16		lda	#22
.881b		4c 31 96	jmp $9631		jmp	ErrorHandler
.881e						_DCSyntax:
.881e		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.8821						_DCRedefine:
.8821		a9 15		lda #$15		lda	#21
.8823		4c 31 96	jmp $9631		jmp	ErrorHandler
.8826						_DCType:
.8826		4c 26 a8	jmp $a826			jmp 	TypeError
.8829						_DCGetSize:
.8829		a2 00		ldx #$00			ldx 	#0 						; get first index.
.882b		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 	; get array dimension
.882e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8830		f0 e7		beq $8819			beq 	_DCSize
.8832		c9 fe		cmp #$fe			cmp 	#254
.8834		f0 e3		beq $8819			beq 	_DCSize
.8836		60		rts				rts
.8837						ScaleByBaseType:
.8837		29 10		and #$10			and 	#NSBIsString 			; is it string
.8839		d0 19		bne $8854			bne 	_SBBTString
.883b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.883d		48		pha				pha
.883e		a5 36		lda $36				lda 	zTemp0
.8840		48		pha				pha
.8841		06 36		asl $36				asl 	zTemp0 					; x 2
.8843		26 37		rol $37				rol 	zTemp0+1
.8845		06 36		asl $36				asl 	zTemp0 					; x 4
.8847		26 37		rol $37				rol 	zTemp0+1
.8849		68		pla				pla 							; add stacked value = x 5
.884a		65 36		adc $36				adc 	zTemp0
.884c		85 36		sta $36				sta 	zTemp0
.884e		68		pla				pla
.884f		65 37		adc $37				adc 	zTemp0+1
.8851		85 37		sta $37				sta 	zTemp0+1
.8853		60		rts				rts
.8854						_SBBTString:
.8854		06 36		asl $36				asl 	zTemp0
.8856		26 37		rol $37				rol 	zTemp0+1
.8858		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8859						Command_Dir:
.8859		ad 5e 07	lda $075e			lda     KNLDefaultDrive				; set drive to list.
.885c		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.885e		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8860		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8863		b0 4f		bcs $88b4			bcs     _CDExit
.8865						_CDEventLoop:
.8865		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8868		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.886b		b0 f8		bcs $8865			bcs     _CDEventLoop
.886d		ad 5f 07	lda $075f			lda     KNLEvent.type
.8870		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8872		f0 40		beq $88b4			beq    	_CDExit
.8874		20 79 88	jsr $8879			jsr     _CDMessages 				; handle various messages
.8877		80 ec		bra $8865			bra     _CDEventLoop
.8879						_CDMessages:
.8879		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.887b		f0 15		beq $8892			beq     _CDEVRead
.887d		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.887f		f0 19		beq $889a			beq     _CDEVVolume
.8881		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8883		f0 32		beq $88b7			beq     _CDEVFile
.8885		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8887		f0 70		beq $88f9			beq     _CDEVFree
.8889		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.888b		f0 6e		beq $88fb			beq     _CDEVEOF
.888d		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.888f		f0 6a		beq $88fb			beq     _CDEVEOF
.8891		60		rts				rts
.8892						_CDEVRead:
.8892		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.8895		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8897		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.889a						_CDEVVolume:
.889a		a9 5b		lda #$5b			lda 	#"["
.889c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.889f		ad 64 07	lda $0764			lda     KNLEvent.directory.volume.len
.88a2		20 03 89	jsr $8903			jsr     _CDReadData
.88a5		20 8a 96	jsr $968a			jsr 	PrintStringXA
.88a8		a9 5d		lda #$5d			lda 	#"]"
.88aa		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88ad		a9 0d		lda #$0d			lda 	#13
.88af		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88b2		80 de		bra $8892			bra     _CDEVRead
.88b4						_CDExit:
.88b4		4c 79 85	jmp $8579			jmp 	WarmStart
.88b7						_CDEVFile:
.88b7		a9 20		lda #$20			lda 	#32
.88b9		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88bc		ad 64 07	lda $0764			lda     KNLEvent.directory.file.len
.88bf		48		pha				pha
.88c0		20 03 89	jsr $8903			jsr     _CDReadData
.88c3		20 8a 96	jsr $968a			jsr 	PrintStringXA
.88c6		68		pla				pla
.88c7		49 ff		eor #$ff			eor 	#$FF
.88c9		38		sec				sec
.88ca		69 10		adc #$10			adc 	#16
.88cc		aa		tax				tax
.88cd						_CDEVTab:
.88cd		a9 20		lda #$20			lda 	#32
.88cf		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d2		ca		dex				dex
.88d3		10 f8		bpl $88cd			bpl 	_CDEVTab
.88d5		20 1a 89	jsr $891a			jsr 	_CDReadExtended
.88d8		ad 26 05	lda $0526			lda 	lineBuffer
.88db		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.88de		20 a0 9a	jsr $9aa0			jsr 	ConvertInt16
.88e1		20 8a 96	jsr $968a			jsr 	PrintStringXA
.88e4		a2 88		ldx #$88			ldx 	#_CDEVFMessage >> 8
.88e6		a9 ed		lda #$ed			lda 	#_CDEVFMessage & $FF
.88e8		20 8a 96	jsr $968a			jsr 	PrintStringXA
.88eb		80 a5		bra $8892			bra     _CDEVRead
.88ed						_CDEVFMessage:
>88ed		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>88f5		29 2e 0d 00
.88f9						_CDEVFree:
.88f9		80 00		bra $88fb			bra     _CDEVEOF
.88fb						_CDEVEOF:
.88fb		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.88fe		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8900		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8903						_CDReadData:
.8903		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8905		a9 26		lda #$26			lda     #lineBuffer & $FF
.8907		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8909		a9 05		lda #$05			lda     #lineBuffer >> 8
.890b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.890d		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8910		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8912		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8915		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8917		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8919		60		rts				rts
.891a						_CDReadExtended:
.891a		a9 02		lda #$02			lda     #2
.891c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.891e		a9 26		lda #$26			lda     #lineBuffer & $FF
.8920		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8922		a9 05		lda #$05			lda     #lineBuffer >> 8
.8924		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8926		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8929						Command_Drive:
.8929		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.892c		20 50 81	jsr $8150			jsr 	KNLSetDrive
.892f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8930						EndCommand:
.8930		4c 79 85	jmp $8579			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8933						ForCommand:
.8933		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8935		20 7d b7	jsr $b77d			jsr 	StackOpen
.8938		a2 00		ldx #$00			ldx 	#0
.893a		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm
.893d		b5 50		lda $50,x			lda 	NSStatus,x
.893f		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8941		d0 47		bne $898a			bne		_FCError
.8943		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8945		20 28 96	jsr $9628			jsr 	CheckNextA
.8948		e8		inx				inx
.8949		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; <from> in +1
.894c		b1 30		lda ($30),y			lda 	(codePtr),y
.894e		c8		iny				iny 								; consume it
.894f		48		pha				pha 								; save on stack for later
.8950		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8952		f0 04		beq $8958			beq 	_FCNoSyntax
.8954		c9 da		cmp #$da			cmp 	#KWD_TO
.8956		d0 35		bne $898d			bne 	_FCSyntaxError
.8958						_FCNoSyntax:
.8958		e8		inx				inx
.8959		20 0b a6	jsr $a60b			jsr 	EvaluateInteger
.895c		20 c2 b7	jsr $b7c2			jsr 	STKSaveCodePosition 		; save loop back position
.895f		68		pla				pla 								; restore DOWNTO or TO
.8960		5a		phy				phy 								; save Y on the stack
.8961		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8963		f0 02		beq $8967			beq 	_FCNotDownTo
.8965		a9 02		lda #$02			lda 	#2
.8967						_FCNotDownTo:
.8967		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8968		a0 10		ldy #$10			ldy 	#16
.896a		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.896c		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.896e		a5 58		lda $58				lda 	NSMantissa0
.8970		91 34		sta ($34),y			sta 	(basicStack),y
.8972		a5 60		lda $60				lda 	NSMantissa1
.8974		c8		iny				iny
.8975		91 34		sta ($34),y			sta 	(basicStack),y
.8977		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8979		a2 01		ldx #$01			ldx 	#1
.897b		20 90 89	jsr $8990			jsr 	FCIntegerToStack
.897e		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8980		a2 02		ldx #$02			ldx 	#2
.8982		20 90 89	jsr $8990			jsr 	FCIntegerToStack
.8985		20 ab 89	jsr $89ab			jsr 	CopyIndexToReference
.8988		7a		ply				ply 								; restore position
.8989		60		rts				rts
.898a						_FCError:
.898a		4c 26 a8	jmp $a826			jmp 	TypeError
.898d						_FCSyntaxError:
.898d		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.8990						FCIntegerToStack:
.8990		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8992		10 03		bpl $8997			bpl	 	_FCNotNegative
.8994		20 67 a6	jsr $a667			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8997						_FCNotNegative:
.8997		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8999		91 34		sta ($34),y			sta 	(basicStack),y
.899b		c8		iny				iny
.899c		b5 60		lda $60,x			lda 	NSMantissa1,x
.899e		91 34		sta ($34),y			sta 	(basicStack),y
.89a0		c8		iny				iny
.89a1		b5 68		lda $68,x			lda 	NSMantissa2,x
.89a3		91 34		sta ($34),y			sta 	(basicStack),y
.89a5		c8		iny				iny
.89a6		b5 70		lda $70,x			lda 	NSMantissa3,x
.89a8		91 34		sta ($34),y			sta 	(basicStack),y
.89aa		60		rts				rts
.89ab						CopyIndexToReference:
.89ab		5a		phy				phy
.89ac		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89ae		38		sec				sec 								; (because we copy from offset 8)
.89af		b1 34		lda ($34),y			lda 	(basicStack),y
.89b1		e9 08		sbc #$08			sbc 	#8
.89b3		85 36		sta $36				sta 	zTemp0
.89b5		c8		iny				iny
.89b6		b1 34		lda ($34),y			lda 	(basicStack),y
.89b8		e9 00		sbc #$00			sbc 	#0
.89ba		85 37		sta $37				sta 	zTemp0+1
.89bc		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89be		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89c0		b1 34		lda ($34),y			lda 	(basicStack),y
.89c2		0a		asl a				asl 	a 							; into carry
.89c3		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89c5		90 14		bcc $89db			bcc 	_CITRNormal
.89c7		38		sec				sec
.89c8						_CITRNegative:
.89c8		a9 00		lda #$00			lda 	#0
.89ca		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89cc		91 36		sta ($36),y			sta 	(zTemp0),y
.89ce		c8		iny				iny
.89cf		ca		dex				dex
.89d0		d0 f6		bne $89c8			bne 	_CITRNegative
.89d2		88		dey				dey 								; look at MSB of mantissa
.89d3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89d5		09 80		ora #$80			ora 	#$80
.89d7		91 36		sta ($36),y			sta 	(zTemp0),y
.89d9		7a		ply				ply
.89da		60		rts				rts
.89db						_CITRNormal:
.89db		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89dd		91 36		sta ($36),y			sta 	(zTemp0),y
.89df		c8		iny				iny
.89e0		ca		dex				dex
.89e1		d0 f8		bne $89db			bne 	_CITRNormal
.89e3		7a		ply				ply 								; and exit.
.89e4		60		rts				rts
.89e5						NextCommand:
.89e5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89e7		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89e9		20 aa b7	jsr $b7aa			jsr 	StackCheckFrame
.89ec		5a		phy				phy
.89ed		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89ef		b1 34		lda ($34),y			lda 	(basicStack),y
.89f1		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89f3		30 02		bmi $89f7			bmi 	_NCStepNeg
.89f5		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89f7						_NCStepNeg:
.89f7		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89f9		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89fb		18		clc				clc
.89fc						_NCBump:
.89fc		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89fe		91 34		sta ($34),y			sta 	(basicStack),y
.8a00		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a02		c8		iny				iny 								; next byte
.8a03		ca		dex				dex 								; do four times
.8a04		d0 f6		bne $89fc			bne 	_NCBump
.8a06		20 ab 89	jsr $89ab			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a09		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a0b		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0d		0a		asl a				asl 	a 							; sign bit to carry
.8a0e		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a10		85 38		sta $38				sta 	zTemp1
.8a12		90 02		bcc $8a16			bcc 	_NCCompRev 					; use if step is +ve
.8a14		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a16						_NCCompRev:
.8a16		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a18		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a1a		85 39		sta $39				sta 	zTemp1+1
.8a1c		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a1e		38		sec				sec
.8a1f						_NCCompare:
.8a1f		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a21		b1 34		lda ($34),y			lda 	(basicStack),y
.8a23		a4 39		ldy $39				ldy 	zTemp1+1
.8a25		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a27		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a29		e6 39		inc $39				inc 	zTemp1+1
.8a2b		ca		dex				dex 								; do it 4 times.
.8a2c		d0 f1		bne $8a1f			bne 	_NCCompare
.8a2e		50 02		bvc $8a32			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a30		49 80		eor #$80			eor 	#$80
.8a32						_NCNoOverflow:
.8a32		7a		ply				ply 								; restore Y position
.8a33		0a		asl a				asl 	a 							; is bit 7 set.
.8a34		90 04		bcc $8a3a			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a36		20 9c b7	jsr $b79c			jsr 	StackClose 					; exit the loop
.8a39		60		rts				rts
.8a3a						_NCLoopBack:
.8a3a		20 d3 b7	jsr $b7d3			jsr 	STKLoadCodePosition 		; loop back
.8a3d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a3e						Command_GOSUB:
.8a3e		a2 00		ldx #$00			ldx 	#0
.8a40		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a43		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a45		20 7d b7	jsr $b77d			jsr 	StackOpen 					; create frame
.8a48		20 c2 b7	jsr $b7c2			jsr 	STKSaveCodePosition 		; save current position
.8a4b		4c 61 8a	jmp $8a61			jmp 	GotoStackX
.8a4e						Command_RETURN:
.8a4e		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a50		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a52		20 aa b7	jsr $b7aa			jsr 	StackCheckFrame
.8a55		20 d3 b7	jsr $b7d3			jsr 	STKLoadCodePosition 		; restore code position
.8a58		20 9c b7	jsr $b79c			jsr 	StackClose
.8a5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a5c						GotoCommand:
.8a5c		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a5e		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8a61						GotoStackX:
.8a61		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a63		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a64		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a66		fa		plx				plx
.8a67		20 29 ae	jsr $ae29			jsr 	MemorySearch 				; transfer to line number AX.
.8a6a		90 05		bcc $8a71			bcc 	_GotoError 					; not found, off end.
.8a6c		d0 03		bne $8a71			bne 	_GotoError 					; not found exactly
.8a6e		4c 33 91	jmp $9133			jmp 	RunNewLine 					; and go straight to new line code.
.8a71						_GotoError:
.8a71		a9 0d		lda #$0d		lda	#13
.8a73		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a76						IfCommand:
.8a76		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a78		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber
.8a7b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a7d		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a7f		d0 0a		bne $8a8b			bne 	_IfStructured 				; we still support it.
.8a81		c8		iny				iny 								; consume THEN
.8a82		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; is it zero
.8a85		f0 01		beq $8a88			beq 	_IfFail 					; if fail, go to next line
.8a87		60		rts				rts 								; if THEN just continue
.8a88						_IfFail:
.8a88		4c 0e 91	jmp $910e			jmp 	EOLCommand
.8a8b						_IfStructured:
.8a8b		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; is it zero
.8a8e		d0 07		bne $8a97			bne 	_IfExit 					; if not, then continue normally.
.8a90		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8a92		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8a94		20 19 95	jsr $9519			jsr 	ScanForward 				; and run from there
.8a97						_IfExit:
.8a97		60		rts				rts
.8a98						ElseCode:
.8a98		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a9a		aa		tax				tax 								; so just go to the structure exit
.8a9b		20 19 95	jsr $9519			jsr 	ScanForward
.8a9e		60		rts				rts
.8a9f						EndIf:
.8a9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8aa0						Command_Input:
.8aa0		9c 24 04	stz $0424			stz 	isPrintFlag
.8aa3		80 0c		bra $8ab1			bra 	Command_IP_Main
.8aa5						Command_CPrint:
.8aa5		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8aa7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aaa		80 05		bra $8ab1			bra 	Command_IP_Main
.8aac						Command_Print:
.8aac		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8aae		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ab1						Command_IP_Main:
.8ab1		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ab2						_CPLoop:
.8ab2		08		php				php 								; save last action flag
.8ab3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab5		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ab7		f0 54		beq $8b0d			beq 	_CPExit
.8ab9		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8abb		f0 50		beq $8b0d			beq 	_CPExit
.8abd		68		pla				pla 								; throw last action flag
.8abe		b1 30		lda ($30),y			lda 	(codePtr),y
.8ac0		c8		iny				iny
.8ac1		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8ac3		f0 45		beq $8b0a			beq 	_CPContinueWithSameLine
.8ac5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ac7		f0 3c		beq $8b05			beq 	_CPTab
.8ac9		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8acb		f0 34		beq $8b01			beq 	_CPNewLine
.8acd		88		dey				dey 								; undo the get.
.8ace		20 33 9b	jsr $9b33			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8ad1		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8ad3		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8ad5		f0 0d		beq $8ae4			beq 	_CPIsValue 					; no, display it.
.8ad7		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8ada		d0 05		bne $8ae1			bne 	_CPIsPrint 					; otherwise display.
.8adc		20 16 8b	jsr $8b16			jsr 	CIInputValue 				; input a value to the reference
.8adf		80 20		bra $8b01			bra 	_CPNewLine
.8ae1						_CPIsPrint:
.8ae1		20 f8 9d	jsr $9df8			jsr 	Dereference 				; dereference if required.
.8ae4						_CPIsValue:
.8ae4		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8ae6		29 10		and #$10			and 	#NSBIsString
.8ae8		f0 09		beq $8af3			beq 	_CPNumber
.8aea		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8aec		a5 58		lda $58				lda 	NSMantissa0
.8aee		20 79 8b	jsr $8b79			jsr 	CPPrintStringXA
.8af1		80 be		bra $8ab1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8af3						_CPNumber:
.8af3		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8af5		20 d3 a4	jsr $a4d3			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8af8		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8afa		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8afc		20 79 8b	jsr $8b79			jsr 	CPPrintStringXA 			; print it.
.8aff		80 b0		bra $8ab1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b01						_CPNewLine:
.8b01		a9 0d		lda #$0d			lda 	#13
.8b03		80 02		bra $8b07			bra 	_CPPrintCharDirect
.8b05						_CPTab:
.8b05		a9 09		lda #$09			lda 	#9 							; print TAB
.8b07						_CPPrintCharDirect:
.8b07		20 94 8b	jsr $8b94			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b0a						_CPContinueWithSameLine:
.8b0a		38		sec				sec 								; loop round with carry set, which
.8b0b		80 a5		bra $8ab2			bra 	_CPLoop 					; will inhibit final CR
.8b0d						_CPExit:
.8b0d		28		plp				plp 								; get last action flag
.8b0e		b0 05		bcs $8b15			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b10		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b12		20 94 8b	jsr $8b94			jsr 	CPPVControl
.8b15						_CPExit2:
.8b15		60		rts				rts
.8b16						CIInputValue:
.8b16		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b18						_CIInputLine:
.8b18		20 97 8b	jsr $8b97			jsr 	CPInputVector 				; get key
.8b1b		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b1d		f0 1f		beq $8b3e			beq 	_CIHaveValue
.8b1f		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b21		f0 11		beq $8b34			beq 	_CIBackspace
.8b23		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b25		90 f1		bcc $8b18			bcc 	_CIInputLine
.8b27		e0 50		cpx #$50			cpx 	#80 						; max length
.8b29		b0 ed		bcs $8b18			bcs 	_CIInputLine
.8b2b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b2e		e8		inx				inx
.8b2f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b32		80 e4		bra $8b18			bra 	_CIInputLine
.8b34						_CIBackspace:
.8b34		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b36		f0 e0		beq $8b18			beq 	_CIInputLine
.8b38		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b3b		ca		dex				dex
.8b3c		80 da		bra $8b18			bra 	_CIInputLine
.8b3e						_CIHaveValue:
.8b3e		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b41		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b43		29 10		and #$10			and 	#NSBIsString
.8b45		f0 17		beq $8b5e			beq 	_CIAssignNumber 			; assign a number
.8b47		a2 01		ldx #$01			ldx 	#1
.8b49		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b4b		95 58		sta $58,x			sta 	NSMantissa0,x
.8b4d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b4f		95 60		sta $60,x			sta 	NSMantissa1,x
.8b51		74 68		stz $68,x			stz 	NSMantissa2,x
.8b53		74 70		stz $70,x			stz 	NSMantissa3,x
.8b55		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b57		95 50		sta $50,x			sta  	NSStatus,x
.8b59		ca		dex				dex 								; X = 0
.8b5a		20 d3 8b	jsr $8bd3			jsr 	AssignVariable
.8b5d		60		rts				rts
.8b5e						_CIAssignNumber:
.8b5e		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b60		85 36		sta $36				sta 	zTemp0
.8b62		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b64		85 37		sta $37				sta 	zTemp0+1
.8b66		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b68		20 15 a3	jsr $a315			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b6b		90 07		bcc $8b74			bcc 	_CIIsOkay
.8b6d		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b6f		20 8c 8b	jsr $8b8c			jsr 	CPPrintVector
.8b72		80 a2		bra $8b16			bra 	CIInputValue
.8b74						_CIIsOkay:
.8b74		ca		dex				dex 								; X = 0
.8b75		20 d3 8b	jsr $8bd3			jsr 	AssignVariable
.8b78		60		rts				rts
.8b79						CPPrintStringXA:
.8b79		5a		phy				phy
.8b7a		86 37		stx $37				stx 	zTemp0+1
.8b7c		85 36		sta $36				sta 	zTemp0
.8b7e		a0 00		ldy #$00			ldy 	#0
.8b80						_PSXALoop:
.8b80		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b82		f0 06		beq $8b8a			beq 	_PSXAExit
.8b84		20 8c 8b	jsr $8b8c			jsr 	CPPrintVector
.8b87		c8		iny				iny
.8b88		80 f6		bra $8b80			bra 	_PSXALoop
.8b8a						_PSXAExit:
.8b8a		7a		ply				ply
.8b8b		60		rts				rts
.8b8c						CPPrintVector:
.8b8c		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b8f		30 03		bmi $8b94			bmi 	CPPVControl
.8b91		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b94						CPPVControl:
.8b94		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b97						CPInputVector:
.8b97		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b9a						LetCommand:
.8b9a		a2 00		ldx #$00			ldx 	#0
.8b9c		b1 30		lda ($30),y			lda 	(codePtr),y
.8b9e		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8ba0		d0 14		bne $8bb6			bne 	_LCStandard
.8ba2		c8		iny				iny 								; skip equal
.8ba3		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8ba6		20 f8 9d	jsr $9df8			jsr 	Dereference 				; dereference it to a value
.8ba9		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bab		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bad		95 50		sta $50,x			sta 	NSStatus,x
.8baf		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bb1		d0 0f		bne $8bc2			bne 	_LCMain
.8bb3		4c 26 a8	jmp $a826			jmp 	TypeError 					; was a reference before.
.8bb6						_LCStandard:
.8bb6		ad 1d 9b	lda $9b1d			lda 	PrecedenceLevel+"*"			; precedence > this
.8bb9		20 37 9b	jsr $9b37			jsr 	EvaluateExpressionAtPrecedence
.8bbc		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bbe		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bc0		f0 0e		beq $8bd0			beq 	_LetGoProc 					; it's a procedure call.
.8bc2						_LCMain:
.8bc2		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bc4		20 28 96	jsr $9628			jsr 	CheckNextA
.8bc7		e8		inx				inx 								; RHS
.8bc8		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue
.8bcb		ca		dex				dex
.8bcc		20 d3 8b	jsr $8bd3			jsr 	AssignVariable
.8bcf		60		rts				rts
.8bd0						_LetGoProc:
.8bd0		4c e4 8f	jmp $8fe4			jmp 	CallProcedure
.8bd3						AssignVariable:
.8bd3		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bd5		48		pha				pha 								; save a copy
.8bd6		55 51		eor $51,x			eor 	NSStatus+1,x
.8bd8		29 10		and #$10			and 	#NSBIsString
.8bda		d0 0b		bne $8be7			bne 	_ASError
.8bdc		68		pla				pla 								; get back
.8bdd		29 10		and #$10			and 	#NSBIsString 				; check type
.8bdf		d0 03		bne $8be4			bne 	_ASString
.8be1		4c 36 9d	jmp $9d36			jmp 	AssignNumber
.8be4						_ASString:
.8be4		4c 94 9d	jmp $9d94			jmp 	AssignString
.8be7						_ASError:
.8be7		4c 26 a8	jmp $a826			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bea						Command_List:
.8bea		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8bed		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bef		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bf2		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf4		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bf6		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bf8		f0 72		beq $8c6c			beq 	_CLListProcedure
.8bfa		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bfc		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8bfe		a9 ff		lda #$ff			lda 	#$FF
.8c00		85 5f		sta $5f				sta 	NSMantissa0+7
.8c02		85 67		sta $67				sta 	NSMantissa1+7
.8c04		b1 30		lda ($30),y			lda 	(codePtr),y
.8c06		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c08		f0 1a		beq $8c24			beq 	_CLSecond
.8c0a		20 e9 8c	jsr $8ce9			jsr 	CLIsDigit 					; if not digit, list all
.8c0d		b0 20		bcs $8c2f			bcs 	_CLStart
.8c0f		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c11		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8c14		b1 30		lda ($30),y			lda 	(codePtr),y
.8c16		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c18		f0 0a		beq $8c24			beq 	_CLSecond 					; if so go get it
.8c1a		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c1c		85 5f		sta $5f				sta 	NSMantissa0+7
.8c1e		a5 64		lda $64				lda 	NSMantissa1+4
.8c20		85 67		sta $67				sta 	NSMantissa1+7
.8c22		80 0b		bra $8c2f			bra 	_CLStart
.8c24						_CLSecond:
.8c24		c8		iny				iny 								; consume comma
.8c25		20 e9 8c	jsr $8ce9			jsr 	CLIsDigit 					; digit found
.8c28		b0 05		bcs $8c2f			bcs 	_CLStart 					; if not, continue listing
.8c2a		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c2c		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8c2f						_CLStart
.8c2f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c31		85 30		sta $30				sta 	codePtr
.8c33		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c35		85 31		sta $31				sta 	codePtr+1
.8c37						_CLLoop:
.8c37		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c39		f0 03		beq $8c3e			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c3b		20 01 81	jsr $8101			jsr 	ProcessEvents
.8c3e						_NoEvents:
.8c3e		d0 27		bne $8c67			bne 	_CLBreak
.8c40		b2 30		lda ($30)			lda 	(codePtr)
.8c42		f0 20		beq $8c64			beq 	_CLExit
.8c44		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c46		20 d8 8c	jsr $8cd8			jsr 	CLCompareLineNo
.8c49		90 0c		bcc $8c57			bcc 	_CLNext
.8c4b		a2 07		ldx #$07			ldx 	#7
.8c4d		20 d8 8c	jsr $8cd8			jsr 	CLCompareLineNo
.8c50		f0 02		beq $8c54			beq 	_CLDoThisOne
.8c52		b0 03		bcs $8c57			bcs 	_CLNext
.8c54						_CLDoThisOne:
.8c54		20 c5 8c	jsr $8cc5			jsr 	CLListOneLine 				; routine to list the current line.
.8c57						_CLNext:
.8c57		18		clc				clc
.8c58		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c5a		65 30		adc $30				adc 	codePtr
.8c5c		85 30		sta $30				sta 	codePtr
.8c5e		90 02		bcc $8c62			bcc 	_CREExit
.8c60		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c62						_CREExit:
.8c62		80 d3		bra $8c37			bra 	_CLLoop
.8c64						_CLExit:
.8c64		4c 79 85	jmp $8579			jmp 	WarmStart
.8c67						_CLBreak:
.8c67		a9 01		lda #$01		lda	#1
.8c69		4c 31 96	jmp $9631		jmp	ErrorHandler
.8c6c						_CLListProcedure:
.8c6c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e		85 38		sta $38				sta 	zTemp1
.8c70		c8		iny				iny
.8c71		b1 30		lda ($30),y			lda 	(codePtr),y
.8c73		85 39		sta $39				sta 	zTemp1+1
.8c75		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c77		85 30		sta $30				sta 	codePtr
.8c79		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c7b		85 31		sta $31				sta 	codePtr+1
.8c7d						_CLLPSearch:
.8c7d		b2 30		lda ($30)			lda 	(codePtr)
.8c7f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c81		f0 e1		beq $8c64			beq 	_CLExit
.8c83		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c85		b1 30		lda ($30),y			lda 	(codePtr),y
.8c87		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8c89		d0 0e		bne $8c99			bne 	_CLLPNext
.8c8b		c8		iny				iny 								; check if PROC this.
.8c8c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c90		d0 07		bne $8c99			bne 	_CLLPNext
.8c92		c8		iny				iny
.8c93		b1 30		lda ($30),y			lda 	(codePtr),y
.8c95		c5 39		cmp $39				cmp 	zTemp1+1
.8c97		f0 0d		beq $8ca6			beq 	_CLLPFound
.8c99						_CLLPNext:
.8c99		18		clc				clc
.8c9a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c9c		65 30		adc $30				adc 	codePtr
.8c9e		85 30		sta $30				sta 	codePtr
.8ca0		90 02		bcc $8ca4			bcc 	_CREExit
.8ca2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ca4						_CREExit:
.8ca4		80 d7		bra $8c7d			bra 	_CLLPSearch
.8ca6						_CLLPFound:
.8ca6		b2 30		lda ($30)			lda 	(codePtr)
.8ca8		f0 ba		beq $8c64			beq 	_CLExit
.8caa		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cac		b1 30		lda ($30),y			lda 	(codePtr),y
.8cae		48		pha				pha
.8caf		20 c5 8c	jsr $8cc5			jsr 	CLListOneLine 				; list line and go forward
.8cb2		18		clc				clc
.8cb3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cb5		65 30		adc $30				adc 	codePtr
.8cb7		85 30		sta $30				sta 	codePtr
.8cb9		90 02		bcc $8cbd			bcc 	_CREExit
.8cbb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cbd						_CREExit:
.8cbd		68		pla				pla 								; reached ENDPROC ?
.8cbe		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8cc0		d0 e4		bne $8ca6			bne 	_CLLPFound
.8cc2		4c 79 85	jmp $8579			jmp 	WarmStart
.8cc5						CLListOneLine:
.8cc5		20 7c 95	jsr $957c			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8cc8		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ccb		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ccd		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8ccf		20 8a 96	jsr $968a			jsr 	PrintStringXA
.8cd2		a9 0d		lda #$0d			lda 	#13 						; new line
.8cd4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cd7		60		rts				rts
.8cd8						CLCompareLineNo:
.8cd8		38		sec				sec
.8cd9		a0 01		ldy #$01			ldy 	#1
.8cdb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cdd		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cdf		85 36		sta $36				sta 	zTemp0
.8ce1		c8		iny				iny
.8ce2		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8ce6		05 36		ora $36				ora 	zTemp0
.8ce8		60		rts				rts
.8ce9						CLIsDigit:
.8ce9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ceb		c9 30		cmp #$30			cmp 	#"0"
.8ced		90 03		bcc $8cf2			bcc	 	_CLIDExitFalse
.8cef		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cf1		60		rts				rts
.8cf2						_CLIDExitFalse:
.8cf2		38		sec				sec
.8cf3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cf4						Command_Load:
.8cf4		20 fa 8c	jsr $8cfa			jsr 	LoadFile
.8cf7		4c 79 85	jmp $8579			jmp 	WarmStart
.8cfa						LoadFile:
.8cfa		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; file name to load
.8cfd		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cff		a5 36		lda $36				lda 	zTemp0
.8d01		20 59 81	jsr $8159			jsr 	KNLOpenFileRead 			; open file for reading
.8d04		b0 42		bcs $8d48			bcs 	CLErrorHandler 				; error, so fail.
.8d06		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8d09		20 98 8d	jsr $8d98			jsr     LoadReadByteInit            ; Init reader with the stream
.8d0c		20 9d 8f	jsr $8f9d			jsr 	NewProgram 					; does the actual NEW.
.8d0f		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8d12						_CLLoop:
.8d12		20 56 8d	jsr $8d56			jsr 	LoadReadLine 				; get next line.
.8d15		f0 10		beq $8d27			beq 	_CLExit 					; end, exit.
.8d17		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8d1a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8d1d		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8d20		f0 f0		beq $8d12			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8d22		20 54 85	jsr $8554			jsr 	EditProgramCode 			; do the editing etc.
.8d25		80 eb		bra $8d12			bra 	_CLLoop
.8d27						_CLExit:
.8d27		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d2a		20 23 82	jsr $8223			jsr 	KNLCloseFile
.8d2d						CLComplete:
.8d2d		a9 35		lda #$35			lda 	#_CLCMsg & $FF
.8d2f		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d31		20 8a 96	jsr $968a			jsr 	PrintStringXA
.8d34		60		rts				rts
.8d35						_CLCMsg:
>8d35		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d3d		2e 0d 00
.8d40						CLCloseError:
.8d40		48		pha				pha
.8d41		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d44		20 23 82	jsr $8223			jsr 	KNLCloseFile
.8d47		68		pla				pla
.8d48						CLErrorHandler:
.8d48		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d4a		f0 05		beq $8d51			beq 	_CLEHNotFound
.8d4c		a9 1a		lda #$1a		lda	#26
.8d4e		4c 31 96	jmp $9631		jmp	ErrorHandler
.8d51						_CLEHNotFound:
.8d51		a9 19		lda #$19		lda	#25
.8d53		4c 31 96	jmp $9631		jmp	ErrorHandler
.8d56						LoadReadLine:
.8d56		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d58		20 72 8d	jsr $8d72			jsr 	LoadReadCharacter
.8d5b		f0 14		beq $8d71			beq 	_LRLExit 					; eof ?
.8d5d		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d5f		90 f5		bcc $8d56			bcc 	LoadReadLine
.8d61						_LRLLoop:
.8d61		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8d64		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d67		e8		inx				inx
.8d68		20 72 8d	jsr $8d72			jsr 	LoadReadCharacter 			; next line
.8d6b		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d6d		b0 f2		bcs $8d61			bcs 	_LRLLoop
.8d6f		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d71						_LRLExit:
.8d71		60		rts				rts
.8d72						LoadReadCharacter:
.8d72		da		phx				phx
.8d73		5a		phy				phy
.8d74		ad 6c 07	lda $076c			lda 	LoadEOFFlag 				; already done EOF.
.8d77		d0 0c		bne $8d85			bne 	_LRCIsEOF
.8d79		20 a2 8d	jsr $8da2			jsr 	LoadReadByte 				; read a byte
.8d7c		90 09		bcc $8d87			bcc		_LRCExit 					; read okay.
.8d7e		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d80		d0 be		bne $8d40			bne 	CLCloseError
.8d82		ce 6c 07	dec $076c			dec 	LoadEOFFlag
.8d85						_LRCIsEOF:
.8d85		a9 00		lda #$00			lda 	#0
.8d87						_LRCExit:
.8d87		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d89		d0 02		bne $8d8d			bne 	_LRCNotTab
.8d8b		a9 20		lda #$20			lda 	#' '
.8d8d						_LRCNotTab:
.8d8d		c9 0a		cmp #$0a			cmp 	#$0A
.8d8f		d0 02		bne $8d93			bne 	_LRCNotLF
.8d91		a9 0d		lda #$0d			lda 	#$0D
.8d93						_LRCNotLF:
.8d93		7a		ply				ply
.8d94		fa		plx				plx
.8d95		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d97		60		rts				rts
.8d98						LoadReadByteInit:
.8d98		8d 6e 07	sta $076e			sta     LoadFileStream 				; save stream
.8d9b		9c 6f 07	stz $076f			stz     LoadNextCharacter 			; reset buffer
.8d9e		9c 70 07	stz $0770			stz     LoadEndCharacter
.8da1		60		rts				rts
.8da2						LoadReadByte:
.8da2		da		phx				phx
.8da3		ae 6f 07	ldx $076f			ldx     LoadNextCharacter 					; all data consumed ?
.8da6		ec 70 07	cpx $0770			cpx     LoadEndCharacter
.8da9		d0 12		bne $8dbd			bne     _KNLRBGetNextByte
.8dab		ad 6e 07	lda $076e			lda     LoadFileStream
.8dae		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8db0		20 ae 81	jsr $81ae			jsr     KNLReadBlock 				; read next chunk from the stream
.8db3		b0 0f		bcs $8dc4			bcs     _KNLRBError 				; error has occurred on read.
.8db5		8d 70 07	sta $0770			sta     LoadEndCharacter 						; # read is the number available
.8db8		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8dba		8e 6f 07	stx $076f			stx     LoadNextCharacter
.8dbd						_KNLRBGetNextByte:
.8dbd		bd 5e 06	lda $065e,x			lda     KNLReadBuffer,x 			; get the next data item
.8dc0		ee 6f 07	inc $076f			inc     LoadNextCharacter 					; and advance the index
.8dc3		18		clc				clc 								; succeeded
.8dc4						_KNLRBError:
.8dc4		fa		plx				plx
.8dc5		60		rts				rts
.076c						LoadEOFFlag:
>076c								.fill 	1
.076d						BasicFileStream:
>076d								.fill 	1
.076e						LoadFileStream:
>076e								.byte   ?
.076f						LoadNextCharacter:
>076f								.byte   ?
.0770						LoadEndCharacter:
>0770								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8dc6						Command_LOCAL:
.8dc6		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8dc8		20 d4 8d	jsr $8dd4			jsr 	LocaliseNextTerm 			; convert term to a local.
.8dcb		b1 30		lda ($30),y			lda 	(codePtr),y
.8dcd		c8		iny				iny
.8dce		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dd0		f0 f4		beq $8dc6			beq 	Command_LOCAL 				; if so, localise another variable.
.8dd2		88		dey				dey 								; unpick pre-get
.8dd3		60		rts				rts
.8dd4						LocaliseNextTerm:
.8dd4		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm 				; evaluate the term
.8dd7		b5 50		lda $50,x			lda 	NSStatus,x
.8dd9		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8ddb		f0 5c		beq $8e39			beq		_LNTError
.8ddd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ddf		85 36		sta $36				sta 	zTemp0
.8de1		b5 60		lda $60,x			lda 	NSMantissa1,x
.8de3		85 37		sta $37				sta  	zTemp0+1
.8de5		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8de7		29 10		and #$10			and 	#NSBIsString
.8de9		d0 1e		bne $8e09			bne 	_LNTPushString
.8deb		5a		phy				phy
.8dec		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dee						_LNTPushNumLoop:
.8dee		b1 36		lda ($36),y			lda		(zTemp0),y
.8df0		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8df3		c8		iny				iny
.8df4		c0 05		cpy #$05			cpy 	#5
.8df6		d0 f6		bne $8dee			bne 	_LNTPushNumLoop
.8df8		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dfa		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8dfd		a5 37		lda $37				lda 	zTemp0+1
.8dff		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e02		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e04		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e07		7a		ply				ply
.8e08		60		rts				rts
.8e09						_LNTPushString:
.8e09		5a		phy				phy
.8e0a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e0c		85 38		sta $38				sta 	zTemp1
.8e0e		a0 01		ldy #$01			ldy 	#1
.8e10		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e12		85 39		sta $39				sta 	zTemp1+1
.8e14		a0 00		ldy #$00			ldy 	#0 							; output string
.8e16		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8e18		f0 0a		beq $8e24			beq 	_LNTStringOut
.8e1a						_LNTPushStrLoop:
.8e1a		b1 38		lda ($38),y			lda 	(zTemp1),y
.8e1c		f0 06		beq $8e24			beq 	_LNTStringOut
.8e1e		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e21		c8		iny				iny
.8e22		80 f6		bra $8e1a			bra 	_LNTPushStrLoop
.8e24						_LNTStringOut:
.8e24		98		tya				tya									; output length (chars written).
.8e25		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e28		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e2a		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e2d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e2f		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e32		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e34		20 5c b7	jsr $b75c			jsr 	StackPushByte
.8e37		7a		ply				ply
.8e38		60		rts				rts
.8e39						_LNTError:
.8e39		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.8e3c						LocalPopValue:
.8e3c		20 74 b7	jsr $b774			jsr 	StackPopByte
.8e3f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e41		d0 17		bne $8e5a			bne 	_LPVString
.8e43		20 74 b7	jsr $b774			jsr 	StackPopByte 				; address
.8e46		85 37		sta $37				sta 	zTemp0+1
.8e48		20 74 b7	jsr $b774			jsr 	StackPopByte
.8e4b		85 36		sta $36				sta 	zTemp0
.8e4d		5a		phy				phy
.8e4e		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e50						_LPVNumberCopy:
.8e50		20 74 b7	jsr $b774			jsr 	StackPopByte
.8e53		91 36		sta ($36),y			sta 	(zTemp0),y
.8e55		88		dey				dey
.8e56		10 f8		bpl $8e50			bpl 	_LPVNumberCopy
.8e58		7a		ply				ply 								; and complete
.8e59		60		rts				rts
.8e5a						_LPVString:
.8e5a		20 74 b7	jsr $b774			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e5d		85 37		sta $37				sta 	zTemp0+1
.8e5f		20 74 b7	jsr $b774			jsr 	StackPopByte
.8e62		85 36		sta $36				sta 	zTemp0
.8e64		5a		phy				phy
.8e65		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e67		85 38		sta $38				sta 	zTemp1
.8e69		a0 01		ldy #$01			ldy 	#1
.8e6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6d		85 39		sta $39				sta 	zTemp1+1
.8e6f		20 74 b7	jsr $b774			jsr 	StackPopByte 				; # chars to get => y
.8e72		a8		tay				tay
.8e73		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e75		f0 0e		beq $8e85			beq 	_LPVStringCopied
.8e77		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e79		91 38		sta ($38),y			sta 	(zTemp1),y
.8e7b						_LPVStringCopy:
.8e7b		88		dey				dey
.8e7c		30 07		bmi $8e85			bmi 	_LPVStringCopied
.8e7e		20 74 b7	jsr $b774			jsr 	StackPopByte
.8e81		91 38		sta ($38),y			sta 	(zTemp1),y
.8e83		80 f6		bra $8e7b			bra 	_LPVStringCopy
.8e85						_LPVStringCopied:
.8e85		fa		plx				plx
.8e86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8e87						MCCommand:
.8e87		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8e89		48		pha				pha
.8e8a		64 01		stz $01				stz 	1
.8e8c		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8e8f		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8e91		8d 71 07	sta $0771			sta 	DMAControlByte
.8e94		20 42 8f	jsr $8f42			jsr 	MCPosition 					; start position
.8e97		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8e99		20 13 8f	jsr $8f13			jsr 	MCCopyAddress
.8e9c		a2 08		ldx #$08			ldx 	#8
.8e9e		20 13 8f	jsr $8f13			jsr 	MCCopyAddress
.8ea1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ea3		c8		iny				iny
.8ea4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8ea6		f0 09		beq $8eb1			beq 	_MCSize1D
.8ea8		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8eaa		f0 11		beq $8ebd			beq 	_MCRect2D
.8eac						_MCSyntax:
.8eac		a9 02		lda #$02		lda	#2
.8eae		4c 31 96	jmp $9631		jmp	ErrorHandler
.8eb1						_MCSize1D:
.8eb1		a2 00		ldx #$00			ldx 	#0 							; get size
.8eb3		20 0b a6	jsr $a60b			jsr 	EvaluateInteger
.8eb6		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8eb8		20 13 8f	jsr $8f13			jsr 	MCCopyAddress
.8ebb		80 24		bra $8ee1			bra 	_MCDestination
.8ebd						_MCRect2D:
.8ebd		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8ebf		20 30 8f	jsr $8f30			jsr 	MCEvalCopyData16
.8ec2		20 20 96	jsr $9620			jsr 	CheckComma
.8ec5		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8ec7		20 30 8f	jsr $8f30			jsr 	MCEvalCopyData16
.8eca		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.8ecc		20 28 96	jsr $9628			jsr 	CheckNextA
.8ecf		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8ed1		20 30 8f	jsr $8f30			jsr 	MCEvalCopyData16
.8ed4		a2 12		ldx #$12			ldx 	#$12
.8ed6		20 37 8f	jsr $8f37			jsr 	MCCopyData16
.8ed9		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8edc		09 02		ora #$02			ora 	#$02
.8ede		8d 71 07	sta $0771			sta 	DMAControlByte
.8ee1						_MCDestination:
.8ee1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee3		c8		iny				iny
.8ee4		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.8ee6		f0 0e		beq $8ef6			beq 	_MCDestPoke
.8ee8		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.8eea		d0 c0		bne $8eac			bne 	_MCSyntax
.8eec		20 42 8f	jsr $8f42			jsr 	MCPosition 					; get target address
.8eef		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8ef1		20 13 8f	jsr $8f13			jsr 	MCCopyAddress
.8ef4		80 0e		bra $8f04			bra 	_MCDoDMA 					; and we can go.
.8ef6						_MCDestPoke:
.8ef6		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; POKE what
.8ef9		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8efc		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8eff		09 04		ora #$04			ora 	#$04
.8f01		8d 71 07	sta $0771			sta 	DMAControlByte
.8f04						_MCDoDMA:
.8f04		ad 71 07	lda $0771			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8f07		8d 00 df	sta $df00			sta 	$DF00
.8f0a						_MCWaitBUSD:
.8f0a		ad 01 df	lda $df01			lda 	$DF01
.8f0d		30 fb		bmi $8f0a			bmi 	_MCWaitBUSD
.8f0f		68		pla				pla 								; restore I/O.
.8f10		85 01		sta $01				sta 	1
.8f12		60		rts				rts
.8f13						MCCopyAddress:
.8f13		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8f15		29 fc		and #$fc			and 	#$FC
.8f17		05 70		ora $70				ora 	NSMantissa3
.8f19		d0 10		bne $8f2b			bne 	_MCRange
.8f1b		a5 58		lda $58				lda 	NSMantissa0
.8f1d		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f20		a5 60		lda $60				lda 	NSMantissa1
.8f22		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f25		a5 68		lda $68				lda 	NSMantissa2
.8f27		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f2a		60		rts				rts
.8f2b						_MCRange:
.8f2b		a9 04		lda #$04		lda	#4
.8f2d		4c 31 96	jmp $9631		jmp	ErrorHandler
.8f30						MCEvalCopyData16:
.8f30		da		phx				phx
.8f31		a2 00		ldx #$00			ldx 	#0
.8f33		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.8f36		fa		plx				plx
.8f37						MCCopyData16:
.8f37		a5 58		lda $58				lda 	NSMantissa0
.8f39		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f3c		a5 60		lda $60				lda 	NSMantissa1
.8f3e		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f41		60		rts				rts
.8f42						MCPosition:
.8f42		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f44		b1 30		lda ($30),y			lda 	(codePtr),y
.8f46		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8f48		f0 04		beq $8f4e			beq 	_MCPAt
.8f4a		20 0b a6	jsr $a60b			jsr 	EvaluateInteger
.8f4d		60		rts				rts
.8f4e						_MCPAt:
.8f4e		c8		iny				iny
.8f4f		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; X position
.8f52		48		pha				pha
.8f53		20 20 96	jsr $9620			jsr 	CheckComma
.8f56		e8		inx				inx
.8f57		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; Y position
.8f5a		ca		dex				dex
.8f5b		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8f5d		64 58		stz $58				stz 	NSMantissa0
.8f5f		64 68		stz $68				stz 	NSMantissa2
.8f61		64 70		stz $70				stz 	NSMantissa3
.8f63		46 60		lsr $60				lsr 	NSMantissa1
.8f65		66 58		ror $58				ror 	NSMantissa0
.8f67		46 60		lsr $60				lsr 	NSMantissa1
.8f69		66 58		ror $58				ror 	NSMantissa0
.8f6b		68		pla				pla
.8f6c		18		clc				clc
.8f6d		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8f6f		85 58		sta $58				sta 	NSMantissa0
.8f71		a5 60		lda $60				lda 	NSMantissa1
.8f73		65 59		adc $59				adc 	NSMantissa0+1
.8f75		85 60		sta $60				sta 	NSMantissa1
.8f77		90 02		bcc $8f7b			bcc 	_MCPNoCarry
.8f79		e6 68		inc $68				inc 	NSMantissa2
.8f7b						_MCPNoCarry:
.8f7b		ad 9b 07	lda $079b			lda 	gxBasePage
.8f7e		85 69		sta $69				sta 	NSMantissa2+1
.8f80		64 59		stz $59				stz 	NSMantissa0+1
.8f82		64 61		stz $61				stz 	NSMantissa1+1
.8f84		64 71		stz $71				stz 	NSMantissa3+1
.8f86		a2 01		ldx #$01			ldx 	#1
.8f88		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight
.8f8b		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight
.8f8e		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight
.8f91		a2 00		ldx #$00			ldx 	#0
.8f93		20 2b 99	jsr $992b			jsr 	AddTopTwoStack
.8f96		60		rts				rts
.0771						DMAControlByte:
>0771								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f97						NewCommand:
.8f97		20 9d 8f	jsr $8f9d			jsr 	NewProgram 					; does the actual NEW.
.8f9a		4c 79 85	jmp $8579			jmp 	WarmStart 					; and warm starts straight away.
.8f9d						NewProgram:
.8f9d		20 0b ae	jsr $ae0b			jsr 	MemoryNew
.8fa0		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8fa3		20 31 87	jsr $8731			jsr 	ClearCommand 				; clear everything.
.8fa6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8fa7						PokeBCommand:
.8fa7		a9 01		lda #$01			lda 	#1
.8fa9		80 0c		bra $8fb7			bra 	PokeCommand
.8fab						PokeWCommand:
.8fab		a9 02		lda #$02			lda 	#2
.8fad		80 08		bra $8fb7			bra 	PokeCommand
.8faf						PokeLCommand:
.8faf		a9 03		lda #$03			lda 	#3
.8fb1		80 04		bra $8fb7			bra 	PokeCommand
.8fb3						PokeDCommand:
.8fb3		a9 04		lda #$04			lda 	#4
.8fb5		80 00		bra $8fb7			bra 	PokeCommand
.8fb7						PokeCommand:
.8fb7		48		pha				pha 								; save count on stack
.8fb8		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8fba		20 1e a6	jsr $a61e			jsr		Evaluate16BitInteger 		; address
.8fbd		20 20 96	jsr $9620			jsr 	CheckComma
.8fc0		e8		inx				inx
.8fc1		20 0b a6	jsr $a60b			jsr		EvaluateInteger 			; data
.8fc4		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8fc6		85 36		sta $36				sta 	zTemp0
.8fc8		a5 60		lda $60				lda 	NSMantissa1
.8fca		85 37		sta $37				sta 	zTemp0+1
.8fcc		68		pla				pla 								; count -> zTemp1
.8fcd		85 38		sta $38				sta 	zTemp1
.8fcf		5a		phy				phy 								; save Y position.
.8fd0		a0 00		ldy #$00			ldy 	#0 							; index to write
.8fd2		a2 00		ldx #$00			ldx 	#0 							; index to read
.8fd4						_PCLoop:
.8fd4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8fd6		91 36		sta ($36),y			sta 	(zTemp0),y
.8fd8		c8		iny				iny 								; next byte to write
.8fd9		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8fda		18		clc				clc
.8fdb		69 08		adc #$08			adc 	#MathStackSize
.8fdd		aa		tax				tax
.8fde		c6 38		dec $38				dec 	zTemp1 						; done them all
.8fe0		d0 f2		bne $8fd4			bne 	_PCLoop
.8fe2		7a		ply				ply 								; restore position.
.8fe3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8fe4						CallProcedure:
.8fe4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8fe6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe8		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8fea		f0 0c		beq $8ff8			beq 	_CPEndParam
.8fec						_CPParamLoop:
.8fec		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue 				; get parameter onto stack
.8fef		e8		inx				inx 								; bump next stack
.8ff0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ff2		c8		iny				iny
.8ff3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8ff5		f0 f5		beq $8fec			beq 	_CPParamLoop
.8ff7		88		dey				dey 								; unpick.
.8ff8						_CPEndParam:
.8ff8		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8ffb		c8		iny				iny									; skip right bracket
.8ffc		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ffe		20 7d b7	jsr $b77d			jsr 	StackOpen
.9001		20 c2 b7	jsr $b7c2			jsr 	STKSaveCodePosition 		; save loop position
.9004		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9006		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9008		a5 60		lda $60				lda 	NSMantissa1
.900a		85 37		sta $37				sta 	zTemp0+1
.900c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.900e		b2 36		lda ($36)			lda 	(zTemp0)
.9010		85 30		sta $30				sta 	safePtr
.9012		b1 36		lda ($36),y			lda 	(zTemp0),y
.9014		85 31		sta $31				sta 	safePtr+1
.9016		c8		iny				iny
.9017		b1 36		lda ($36),y			lda 	(zTemp0),y
.9019		85 32		sta $32				sta 	safePtr+2
.901b		c8		iny				iny
.901c		b1 36		lda ($36),y			lda 	(zTemp0),y
.901e		85 33		sta $33				sta 	safePtr+3
.9020		c8		iny				iny 								; get Y offset -> Y
.9021		b1 36		lda ($36),y			lda 	(zTemp0),y
.9023		a8		tay				tay
.9024		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9026		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9029		f0 13		beq $903e			beq 	_ParamExit 					; if so, exit.
.902b						_ParamExtract:
.902b		ca		dex				dex 								; put a local term on the level before
.902c		20 d4 8d	jsr $8dd4			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.902f		20 d3 8b	jsr $8bd3			jsr 	AssignVariable 				; assign stacked value to the variable.
.9032		e8		inx				inx 								; advance to next parameter to do.
.9033		e8		inx				inx
.9034		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9037		f0 05		beq $903e			beq 	_ParamExit
.9039		20 20 96	jsr $9620			jsr 	CheckComma 					; comma seperating parameters
.903c		80 ed		bra $902b			bra 	_ParamExtract
.903e						_ParamExit:
.903e		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; check )
.9041		60		rts				rts 								; and continue from here
.9042						Command_ENDPROC:
.9042		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9044		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9046		20 aa b7	jsr $b7aa			jsr 	StackCheckFrame
.9049		20 d3 b7	jsr $b7d3			jsr 	STKLoadCodePosition 		; restore code position
.904c		20 9c b7	jsr $b79c			jsr 	StackClose
.904f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9050						Command_Read:
.9050		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9052		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm
.9055		b5 50		lda $50,x			lda 	NSStatus,x
.9057		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9059		f0 4f		beq $90aa			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.905b		20 f3 90	jsr $90f3			jsr 	SwapDataCodePtrs 			; swap code and data
.905e		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9061		d0 25		bne $9088			bne 	_CRContinueData  			; forward for the next one.
.9063		b2 30		lda ($30)			lda 	(codePtr)
.9065		f0 1c		beq $9083			beq 	_CRNoData
.9067						_CRKeepSearching:
.9067		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.9069		a2 80		ldx #$80			ldx 	#KWC_EOL
.906b		20 19 95	jsr $9519			jsr 	ScanForward
.906e		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.9070		f0 16		beq $9088			beq 	_CRHaveData 				; found it
.9072		18		clc				clc
.9073		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9075		65 30		adc $30				adc 	codePtr
.9077		85 30		sta $30				sta 	codePtr
.9079		90 02		bcc $907d			bcc 	_CREExit
.907b		e6 31		inc $31				inc 	codePtr+1 					; carry
.907d						_CREExit:
.907d		a0 03		ldy #$03			ldy 	#3 							; start of line.
.907f		b2 30		lda ($30)			lda 	(codePtr)
.9081		d0 e4		bne $9067			bne 	_CRKeepSearching
.9083						_CRNoData:
.9083		a9 0b		lda #$0b		lda	#11
.9085		4c 31 96	jmp $9631		jmp	ErrorHandler
.9088						_CRHaveData:
.9088						_CRContinueData:
.9088		a2 01		ldx #$01			ldx 	#1
.908a		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue 				; evaluate value into slot # 1
.908d		ca		dex				dex
.908e		20 d3 8b	jsr $8bd3			jsr		AssignVariable 				; do the assignment
.9091		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.9094		b1 30		lda ($30),y			lda 	(codePtr),y
.9096		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9098		d0 04		bne $909e			bne 	_CRSwapBack
.909a		c8		iny				iny 								; consume comma
.909b		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.909e						_CRSwapBack:
.909e		20 f3 90	jsr $90f3			jsr 	SwapDataCodePtrs			; swap them back.
.90a1		b1 30		lda ($30),y			lda 	(codePtr),y
.90a3		c8		iny				iny
.90a4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90a6		f0 a8		beq $9050			beq 	Command_Read 				; if so go round again.
.90a8		88		dey				dey 								; unpick get.
.90a9		60		rts				rts
.90aa						_CRSyntax:
.90aa		4c 1c a8	jmp $a81c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.90ad						RemCommand:
.90ad		b1 30		lda ($30),y			lda 	(codePtr),y
.90af		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.90b1		d0 06		bne $90b9			bne 	_RMExit
.90b3		c8		iny				iny 								; point to offset
.90b4		98		tya				tya 								; A = offset position
.90b5		38		sec				sec 								; add size +1 hence SEC
.90b6		71 30		adc ($30),y			adc 	(codePtr),y
.90b8		a8		tay				tay 								; make current position.
.90b9						_RMExit:
.90b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.90ba						Command_REPEAT:
.90ba		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.90bc		20 7d b7	jsr $b77d			jsr 	StackOpen
.90bf		20 c2 b7	jsr $b7c2			jsr 	STKSaveCodePosition 		; save loop position
.90c2		60		rts				rts
.90c3						Command_UNTIL:
.90c3		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90c5		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90c7		20 aa b7	jsr $b7aa			jsr 	StackCheckFrame
.90ca		a2 00		ldx #$00			ldx 	#0
.90cc		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; work out the number
.90cf		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; check if zero
.90d2		f0 04		beq $90d8			beq 	_CULoopBack 				; if so keep looping
.90d4		20 9c b7	jsr $b79c			jsr 	StackClose		 			; return
.90d7		60		rts				rts
.90d8						_CULoopBack:
.90d8		20 d3 b7	jsr $b7d3			jsr 	STKLoadCodePosition 		; loop back
.90db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.90dc						Command_Restore:
.90dc		20 f3 90	jsr $90f3			jsr 	SwapDataCodePtrs 			; swap code and data
.90df		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90e1		85 30		sta $30				sta 	codePtr
.90e3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90e5		85 31		sta $31				sta 	codePtr+1
.90e7		20 f3 90	jsr $90f3			jsr 	SwapDataCodePtrs 			; put them back
.90ea		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.90ec		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.90ef		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.90f2		60		rts				rts
.90f3						SwapDataCodePtrs:
.90f3		da		phx				phx
.90f4		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.90f6						_SDCPLoop:
.90f6		b5 30		lda $30,x			lda 	safePtr,x
.90f8		48		pha				pha
.90f9		bd 13 04	lda $0413,x			lda 	dataPointer,x
.90fc		95 30		sta $30,x			sta 	safePtr,x
.90fe		68		pla				pla
.90ff		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9102		ca		dex				dex
.9103		10 f1		bpl $90f6			bpl 	_SDCPLoop
.9105		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9108		8c 17 04	sty $0417			sty 	dataPointer+4
.910b		a8		tay				tay
.910c		fa		plx				plx
.910d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.910e						EOLCommand:
.910e		18		clc				clc
.910f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9111		65 30		adc $30				adc 	codePtr
.9113		85 30		sta $30				sta 	codePtr
.9115		90 02		bcc $9119			bcc 	_CREExit
.9117		e6 31		inc $31				inc 	codePtr+1 					; carry
.9119						_CREExit:
.9119		80 18		bra $9133			bra 	RunNewLine
.911b						CommandRUNOptLoad:
.911b		b1 30		lda ($30),y			lda 	(codePtr),y
.911d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.911f		f0 07		beq $9128			beq 	RunCurrentProgram
.9121		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9123		f0 03		beq $9128			beq 	RunCurrentProgram
.9125		20 fa 8c	jsr $8cfa			jsr 	LoadFile 					; load expected name file.
.9128						RunCurrentProgram:
.9128		20 31 87	jsr $8731			jsr 	ClearCommand 				; clear variable/stacks/etc.
.912b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.912d		85 30		sta $30				sta 	codePtr
.912f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9131		85 31		sta $31				sta 	codePtr+1
.9133						RunNewLine:
.9133		b2 30		lda ($30)			lda 	(codePtr)
.9135		f0 74		beq $91ab			beq 	CRNoProgram         		; no then END.
.9137		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9139		9a		txs				txs
.913a						RUNCodePointerLine:
.913a		a0 02		ldy #$02			ldy 	#2 							; start of program
.913c						_CRIncMainLoop:
.913c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.913e		f0 03		beq $9143			beq 	_NoEvents					; if zero, skip with Z flag set.
.9140		20 01 81	jsr $8101			jsr 	ProcessEvents
.9143						_NoEvents:
.9143		d0 61		bne $91a6			bne 	_CRBreak
.9145		a5 01		lda $01				lda 	1 							; save I/O 0
.9147		48		pha				pha
.9148		64 01		stz $01				stz 	1 							; access I/O Page 0
.914a		38		sec				sec 								; calculate timer - LastTick
.914b		ad 59 d6	lda $d659			lda 	$D659
.914e		cd 73 07	cmp $0773			cmp 	LastTick
.9151		f0 06		beq $9159			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9153		8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.9156		20 c9 a6	jsr $a6c9			jsr 	TickHandler 							; go do the code.
.9159						_NoFireTick:
.9159		68		pla				pla 								; restore I/O 0
.915a		85 01		sta $01				sta 	1
.915c						_CRNoBreakCheck:
.915c		c8		iny				iny									; next token
.915d						_CRMainLoop:
.915d		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9160		b1 30		lda ($30),y			lda 	(codePtr),y
.9162		10 10		bpl $9174			bpl 	_CRNotKeyword				; not a token.
.9164		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9166		b0 04		bcs $916c			bcs 	_CRIsKeyword
.9168		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.916a		b0 34		bcs $91a0			bcs		_CRSyntaxError
.916c						_CRIsKeyword:
.916c		c8		iny				iny 								; consume command
.916d		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.916e		aa		tax				tax 								; put in X for vector jump
.916f		20 a3 91	jsr $91a3			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9172		80 e9		bra $915d			bra 	_CRMainLoop 				; and loop round
.9174						_CRNotKeyword:
.9174		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9176		f0 c4		beq $913c			beq 	_CRIncMainLoop
.9178		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.917a		90 05		bcc $9181			bcc 	_CRNotVariable
.917c						_CRGoLet:
.917c		20 9a 8b	jsr $8b9a			jsr 	LetCommand
.917f		80 dc		bra $915d			bra 	_CRMainLoop
.9181						_CRNotVariable:
.9181		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.9183		f0 f7		beq $917c			beq 	_CRGoLet
.9185		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9187		f0 f3		beq $917c			beq 	_CRGoLet
.9189		c9 21		cmp #$21			cmp 	#KWD_PLING
.918b		f0 ef		beq $917c			beq 	_CRGoLet
.918d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.918f		f0 09		beq $919a			beq 	_CRGoRem
.9191		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9193		d0 0b		bne $91a0			bne 	_CRSyntaxError
.9195		20 eb 83	jsr $83eb			jsr 	LabelHere
.9198		80 c3		bra $915d			bra 	_CRMainLoop
.919a						_CRGoRem:
.919a		c8		iny				iny
.919b		20 ad 90	jsr $90ad			jsr 	RemCommand
.919e		80 bd		bra $915d			bra 	_CRMainLoop
.91a0						_CRSyntaxError:
.91a0		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.91a3						_CRCallVector0:
.91a3		7c 42 92	jmp ($9242,x)			jmp 	(VectorSet0,x)
.91a6						_CRBreak:
.91a6		a9 01		lda #$01		lda	#1
.91a8		4c 31 96	jmp $9631		jmp	ErrorHandler
.91ab						CRNoProgram:
.91ab		4c 30 89	jmp $8930			jmp 	EndCommand
.91ae						Shift1Command:
.91ae		b1 30		lda ($30),y			lda 	(codePtr),y
.91b0		c8		iny				iny
.91b1		0a		asl a				asl 	a
.91b2		aa		tax				tax
.91b3		7c f8 92	jmp ($92f8,x)			jmp 	(VectorSet1,x)
.91b6						Shift2Command:
.91b6		b1 30		lda ($30),y			lda 	(codePtr),y
.91b8		c8		iny				iny
.91b9		0a		asl a				asl 	a
.91ba		aa		tax				tax
.91bb		7c 42 93	jmp ($9342,x)			jmp 	(VectorSet2,x)
.91be						Unused1:
.91be						Unused2:
.91be						Unused3:
.91be						Unused4:
.91be		4c 1c a8	jmp $a81c			jmp 	SyntaxError
>91c1								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.91c2						VectorSetPunc:
>91c2		e9 98					.word	ShiftLeft                        ; $00 <<
>91c4		d4 96					.word	BinaryCompareLessEqual           ; $01 <=
>91c6		ca 96					.word	BinaryCompareNotEqual            ; $02 <>
>91c8		1c a8					.word	SyntaxError                      ; $03 !!3
>91ca		1c a8					.word	SyntaxError                      ; $04 ><
>91cc		de 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>91ce		ec 98					.word	ShiftRight                       ; $06 >>
>91d0		1c a8					.word	SyntaxError                      ; $07 !!7
>91d2		1c a8					.word	SyntaxError                      ; $08 !!8
>91d4		1c a8					.word	SyntaxError                      ; $09 !!9
>91d6		1c a8					.word	SyntaxError                      ; $0a !!10
>91d8		1c a8					.word	SyntaxError                      ; $0b !!11
>91da		1c a8					.word	SyntaxError                      ; $0c !!12
>91dc		1c a8					.word	SyntaxError                      ; $0d !!13
>91de		1c a8					.word	SyntaxError                      ; $0e !!14
>91e0		1c a8					.word	SyntaxError                      ; $0f !!15
>91e2		1c a8					.word	SyntaxError                      ; $10 @
>91e4		1c a8					.word	SyntaxError                      ; $11 !!17
>91e6		1c a8					.word	SyntaxError                      ; $12 !!18
>91e8		1c a8					.word	SyntaxError                      ; $13 [
>91ea		95 97					.word	IntegerDivide                    ; $14 \
>91ec		1c a8					.word	SyntaxError                      ; $15 ]
>91ee		27 9a					.word	EorInteger                       ; $16 ^
>91f0		1c a8					.word	SyntaxError                      ; $17 _
>91f2		1c a8					.word	SyntaxError                      ; $18 `
>91f4		1c a8					.word	SyntaxError                      ; $19 !!25
>91f6		1c a8					.word	SyntaxError                      ; $1a !!26
>91f8		1c a8					.word	SyntaxError                      ; $1b {
>91fa		f2 99					.word	OraInteger                       ; $1c |
>91fc		1c a8					.word	SyntaxError                      ; $1d }
>91fe		1c a8					.word	SyntaxError                      ; $1e ~
>9200		1c a8					.word	SyntaxError                      ; $1f <7F>
>9202		1c a8					.word	SyntaxError                      ; $20
>9204		5c 9a					.word	WordIndirect                     ; $21 !
>9206		1c a8					.word	SyntaxError                      ; $22 "
>9208		1c a8					.word	SyntaxError                      ; $23 #
>920a		1c a8					.word	SyntaxError                      ; $24 $
>920c		d6 97					.word	IntegerModulus                   ; $25 %
>920e		bd 99					.word	AndInteger                       ; $26 &
>9210		1c a8					.word	SyntaxError                      ; $27 '
>9212		1c a8					.word	SyntaxError                      ; $28 (
>9214		1c a8					.word	SyntaxError                      ; $29 )
>9216		44 98					.word	MulInteger                       ; $2a *
>9218		5f 99					.word	AddInteger                       ; $2b +
>921a		1c a8					.word	SyntaxError                      ; $2c ,
>921c		98 99					.word	SubInteger                       ; $2d -
>921e		1c a8					.word	SyntaxError                      ; $2e .
>9220		16 9c					.word	FDivideCommand                   ; $2f /
>9222		1c a8					.word	SyntaxError                      ; $30 0
>9224		1c a8					.word	SyntaxError                      ; $31 1
>9226		1c a8					.word	SyntaxError                      ; $32 2
>9228		1c a8					.word	SyntaxError                      ; $33 3
>922a		1c a8					.word	SyntaxError                      ; $34 4
>922c		1c a8					.word	SyntaxError                      ; $35 5
>922e		1c a8					.word	SyntaxError                      ; $36 6
>9230		1c a8					.word	SyntaxError                      ; $37 7
>9232		1c a8					.word	SyntaxError                      ; $38 8
>9234		1c a8					.word	SyntaxError                      ; $39 9
>9236		1c a8					.word	SyntaxError                      ; $3a :
>9238		1c a8					.word	SyntaxError                      ; $3b ;
>923a		b6 96					.word	BinaryCompareLess                ; $3c <
>923c		ac 96					.word	BinaryCompareEqual               ; $3d =
>923e		c0 96					.word	BinaryCompareGreater             ; $3e >
>9240		7e 9a					.word	ByteIndirect                     ; $3f ?
.9242						VectorSet0:
>9242		0e 91					.word	EOLCommand                       ; $80 !0:EOF
>9244		ae 91					.word	Shift1Command                    ; $81 !1:SH1
>9246		b6 91					.word	Shift2Command                    ; $82 !2:SH2
>9248		00 a1					.word	AbsUnary                         ; $83 ABS(
>924a		0e a1					.word	AllocUnary                       ; $84 ALLOC(
>924c		7e a1					.word	AscUnary                         ; $85 ASC(
>924e		44 a3					.word	ChrUnary                         ; $86 CHR$(
>9250		9f ac					.word	UnaryEvent                       ; $87 EVENT(
>9252		a8 96					.word	UnaryFalse                       ; $88 FALSE
>9254		8b a1					.word	FracUnary                        ; $89 FRAC(
>9256		d4 a3					.word	ChrGet                           ; $8a GET$(
>9258		b0 a3					.word	AscGet                           ; $8b GET(
>925a		5a a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>925c		56 a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>925e		29 ac					.word	UnaryHit                         ; $8e HIT(
>9260		db a3					.word	ChrInkey                         ; $8f INKEY$(
>9262		c9 a3					.word	AscInkey                         ; $90 INKEY(
>9264		a0 a1					.word	IntUnary                         ; $91 INT(
>9266		03 a3					.word	IsValUnary                       ; $92 ISVAL(
>9268		f4 a3					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>926a		18 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>926c		23 ad					.word	UnaryJoyB                        ; $95 JOYB(
>926e		fc ac					.word	UnaryJoyX                        ; $96 JOYX(
>9270		ff ac					.word	UnaryJoyY                        ; $97 JOYY(
>9272		57 a5					.word	Unary_Left                       ; $98 LEFT$(
>9274		b1 a1					.word	LenUnary                         ; $99 LEN(
>9276		cf a1					.word	Unary_Max                        ; $9a MAX(
>9278		79 a5					.word	Unary_Mid                        ; $9b MID$(
>927a		cb a1					.word	Unary_Min                        ; $9c MIN(
>927c		1a a2					.word	Unary_Not                        ; $9d NOT(
>927e		2d a2					.word	PeekByteUnary                    ; $9e PEEK(
>9280		39 a2					.word	PeekDUnary                       ; $9f PEEKD(
>9282		35 a2					.word	PeekLUnary                       ; $a0 PEEKL(
>9284		31 a2					.word	PeekWUnary                       ; $a1 PEEKW(
>9286		da b6					.word	UnaryPlaying                     ; $a2 PLAYING(
>9288		66 a2					.word	Unary_Random                     ; $a3 RANDOM(
>928a		64 a5					.word	Unary_Right                      ; $a4 RIGHT$(
>928c		80 a2					.word	Unary_Rnd                        ; $a5 RND(
>928e		db a2					.word	SgnUnary                         ; $a6 SGN(
>9290		96 a4					.word	SpcUnary                         ; $a7 SPC(
>9292		b1 a4					.word	Unary_Str                        ; $a8 STR$(
>9294		35 ad					.word	UnaryTimer                       ; $a9 TIMER(
>9296		9d 96					.word	UnaryTrue                        ; $aa TRUE
>9298		f9 a2					.word	ValUnary                         ; $ab VAL(
>929a		33 89					.word	ForCommand                       ; $ac FOR
>929c		76 8a					.word	IfCommand                        ; $ad IF
>929e		be 91					.word	Unused1                          ; $ae PROC
>92a0		ba 90					.word	Command_REPEAT                   ; $af REPEAT
>92a2		e9 95					.word	Command_WHILE                    ; $b0 WHILE
>92a4		9f 8a					.word	EndIf                            ; $b1 ENDIF
>92a6		42 90					.word	Command_ENDPROC                  ; $b2 ENDPROC
>92a8		e5 89					.word	NextCommand                      ; $b3 NEXT
>92aa		be 91					.word	Unused4                          ; $b4 THEN
>92ac		c3 90					.word	Command_UNTIL                    ; $b5 UNTIL
>92ae		0a 96					.word	Command_WEND                     ; $b6 WEND
>92b0		1c a8					.word	SyntaxError                      ; $b7 AT
>92b2		1c a8					.word	SyntaxError                      ; $b8 BY
>92b4		fc 86					.word	CallCommand                      ; $b9 CALL
>92b6		dd a9					.word	CircleCommand                    ; $ba CIRCLE
>92b8		31 87					.word	ClearCommand                     ; $bb CLEAR
>92ba		1c a8					.word	SyntaxError                      ; $bc COLOR
>92bc		1c a8					.word	SyntaxError                      ; $bd COLOUR
>92be		94 87					.word	Command_Data                     ; $be DATA
>92c0		9c 87					.word	DimCommand                       ; $bf DIM
>92c2		be 91					.word	Unused3                          ; $c0 DOWNTO
>92c4		98 8a					.word	ElseCode                         ; $c1 ELSE
>92c6		1c a8					.word	SyntaxError                      ; $c2 FROM
>92c8		fc ab					.word	GfxCommand                       ; $c3 GFX
>92ca		1c a8					.word	SyntaxError                      ; $c4 HERE
>92cc		06 aa					.word	ImageCommand                     ; $c5 IMAGE
>92ce		9a 8b					.word	LetCommand                       ; $c6 LET
>92d0		58 aa					.word	LineCommand                      ; $c7 LINE
>92d2		c6 8d					.word	Command_LOCAL                    ; $c8 LOCAL
>92d4		87 8e					.word	MCCommand                        ; $c9 MEMCOPY
>92d6		1c a8					.word	SyntaxError                      ; $ca OFF
>92d8		1c a8					.word	SyntaxError                      ; $cb ON
>92da		1c a8					.word	SyntaxError                      ; $cc OUTLINE
>92dc		4d ac					.word	PaletteCommand                   ; $cd PALETTE
>92de		51 aa					.word	PlotCommand                      ; $ce PLOT
>92e0		a7 8f					.word	PokeBCommand                     ; $cf POKE
>92e2		b3 8f					.word	PokeDCommand                     ; $d0 POKED
>92e4		af 8f					.word	PokeLCommand                     ; $d1 POKEL
>92e6		ab 8f					.word	PokeWCommand                     ; $d2 POKEW
>92e8		50 90					.word	Command_Read                     ; $d3 READ
>92ea		d9 a9					.word	RectangleCommand                 ; $d4 RECT
>92ec		ad 90					.word	RemCommand                       ; $d5 REM
>92ee		1c a8					.word	SyntaxError                      ; $d6 SOLID
>92f0		f6 b6					.word	SoundCommand                     ; $d7 SOUND
>92f2		e8 a9					.word	SpriteCommand                    ; $d8 SPRITE
>92f4		22 aa					.word	TextCommand                      ; $d9 TEXT
>92f6		be 91					.word	Unused2                          ; $da TO
.92f8						VectorSet1:
>92f8		1c a8					.word	SyntaxError                      ; $80 !0:EOF
>92fa		1c a8					.word	SyntaxError                      ; $81 !1:SH1
>92fc		1c a8					.word	SyntaxError                      ; $82 !2:SH2
>92fe		ae 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>9300		ca 85					.word	AssertCommand                    ; $84 ASSERT
>9302		9c ab					.word	BitmapCtrl                       ; $85 BITMAP
>9304		da 85					.word	Command_BLoad                    ; $86 BLOAD
>9306		7a 86					.word	Command_BSave                    ; $87 BSAVE
>9308		8c 87					.word	ClearScreen                      ; $88 CLS
>930a		a5 8a					.word	Command_CPrint                   ; $89 CPRINT
>930c		59 88					.word	Command_Dir                      ; $8a DIR
>930e		29 89					.word	Command_Drive                    ; $8b DRIVE
>9310		30 89					.word	EndCommand                       ; $8c END
>9312		ae b6					.word	Explode                          ; $8d EXPLODE
>9314		1c a8					.word	SyntaxError                      ; $8e GO
>9316		3e 8a					.word	Command_GOSUB                    ; $8f GOSUB
>9318		5c 8a					.word	GotoCommand                      ; $90 GOTO
>931a		1c a8					.word	SyntaxError                      ; $91 HIMEM
>931c		a0 8a					.word	Command_Input                    ; $92 INPUT
>931e		ea 8b					.word	Command_List                     ; $93 LIST
>9320		f4 8c					.word	Command_Load                     ; $94 LOAD
>9322		97 8f					.word	NewCommand                       ; $95 NEW
>9324		8a b6					.word	PingCommand                      ; $96 PING
>9326		ac 8a					.word	Command_Print                    ; $97 PRINT
>9328		dc 90					.word	Command_Restore                  ; $98 RESTORE
>932a		4e 8a					.word	Command_RETURN                   ; $99 RETURN
>932c		1b 91					.word	CommandRUNOptLoad                ; $9a RUN
>932e		ca 93					.word	Command_Save                     ; $9b SAVE
>9330		4e 94					.word	CommandSetDate                   ; $9c SETDATE
>9332		52 94					.word	CommandSetTime                   ; $9d SETTIME
>9334		a2 b6					.word	ShootCommand                     ; $9e SHOOT
>9336		e1 ab					.word	SpritesCtrl                      ; $9f SPRITES
>9338		c2 94					.word	StopCommand                      ; $a0 STOP
>933a		8f 95					.word	Command_VERIFY                   ; $a1 VERIFY
>933c		96 ac					.word	XGoCommand                       ; $a2 XGO
>933e		8d ac					.word	XLoadCommand                     ; $a3 XLOAD
>9340		96 b6					.word	ZapCommand                       ; $a4 ZAP
.9342						VectorSet2:
>9342		1c a8					.word	SyntaxError                      ; $80 !0:EOF
>9344		1c a8					.word	SyntaxError                      ; $81 !1:SH1
>9346		1c a8					.word	SyntaxError                      ; $82 !2:SH2
>9348		db a6					.word	Assemble_adc                     ; $83 ADC
>934a		d3 a6					.word	Assemble_and                     ; $84 AND
>934c		ef a6					.word	Assemble_asl                     ; $85 ASL
>934e		59 a7					.word	Assemble_bcc                     ; $86 BCC
>9350		5d a7					.word	Assemble_bcs                     ; $87 BCS
>9352		65 a7					.word	Assemble_beq                     ; $88 BEQ
>9354		1c a7					.word	Assemble_bit                     ; $89 BIT
>9356		4d a7					.word	Assemble_bmi                     ; $8a BMI
>9358		61 a7					.word	Assemble_bne                     ; $8b BNE
>935a		49 a7					.word	Assemble_bpl                     ; $8c BPL
>935c		69 a7					.word	Assemble_bra                     ; $8d BRA
>935e		6d a7					.word	Assemble_brk                     ; $8e BRK
>9360		51 a7					.word	Assemble_bvc                     ; $8f BVC
>9362		55 a7					.word	Assemble_bvs                     ; $90 BVS
>9364		75 a7					.word	Assemble_clc                     ; $91 CLC
>9366		c9 a7					.word	Assemble_cld                     ; $92 CLD
>9368		89 a7					.word	Assemble_cli                     ; $93 CLI
>936a		b9 a7					.word	Assemble_clv                     ; $94 CLV
>936c		e7 a6					.word	Assemble_cmp                     ; $95 CMP
>936e		30 a7					.word	Assemble_cpx                     ; $96 CPX
>9370		2b a7					.word	Assemble_cpy                     ; $97 CPY
>9372		0d a7					.word	Assemble_dec                     ; $98 DEC
>9374		c5 a7					.word	Assemble_dex                     ; $99 DEX
>9376		a1 a7					.word	Assemble_dey                     ; $9a DEY
>9378		d7 a6					.word	Assemble_eor                     ; $9b EOR
>937a		12 a7					.word	Assemble_inc                     ; $9c INC
>937c		d5 a7					.word	Assemble_inx                     ; $9d INX
>937e		c1 a7					.word	Assemble_iny                     ; $9e INY
>9380		44 a7					.word	Assemble_jmp                     ; $9f JMP
>9382		3f a7					.word	Assemble_jsr                     ; $a0 JSR
>9384		e3 a6					.word	Assemble_lda                     ; $a1 LDA
>9386		08 a7					.word	Assemble_ldx                     ; $a2 LDX
>9388		26 a7					.word	Assemble_ldy                     ; $a3 LDY
>938a		f9 a6					.word	Assemble_lsr                     ; $a4 LSR
>938c		d9 a7					.word	Assemble_nop                     ; $a5 NOP
>938e		cf a6					.word	Assemble_ora                     ; $a6 ORA
>9390		85 a7					.word	Assemble_pha                     ; $a7 PHA
>9392		71 a7					.word	Assemble_php                     ; $a8 PHP
>9394		cd a7					.word	Assemble_phx                     ; $a9 PHX
>9396		8d a7					.word	Assemble_phy                     ; $aa PHY
>9398		95 a7					.word	Assemble_pla                     ; $ab PLA
>939a		79 a7					.word	Assemble_plp                     ; $ac PLP
>939c		e1 a7					.word	Assemble_plx                     ; $ad PLX
>939e		9d a7					.word	Assemble_ply                     ; $ae PLY
>93a0		f4 a6					.word	Assemble_rol                     ; $af ROL
>93a2		fe a6					.word	Assemble_ror                     ; $b0 ROR
>93a4		81 a7					.word	Assemble_rti                     ; $b1 RTI
>93a6		91 a7					.word	Assemble_rts                     ; $b2 RTS
>93a8		eb a6					.word	Assemble_sbc                     ; $b3 SBC
>93aa		7d a7					.word	Assemble_sec                     ; $b4 SEC
>93ac		dd a7					.word	Assemble_sed                     ; $b5 SED
>93ae		99 a7					.word	Assemble_sei                     ; $b6 SEI
>93b0		df a6					.word	Assemble_sta                     ; $b7 STA
>93b2		d1 a7					.word	Assemble_stp                     ; $b8 STP
>93b4		03 a7					.word	Assemble_stx                     ; $b9 STX
>93b6		21 a7					.word	Assemble_sty                     ; $ba STY
>93b8		17 a7					.word	Assemble_stz                     ; $bb STZ
>93ba		b5 a7					.word	Assemble_tax                     ; $bc TAX
>93bc		b1 a7					.word	Assemble_tay                     ; $bd TAY
>93be		3a a7					.word	Assemble_trb                     ; $be TRB
>93c0		35 a7					.word	Assemble_tsb                     ; $bf TSB
>93c2		bd a7					.word	Assemble_tsx                     ; $c0 TSX
>93c4		a5 a7					.word	Assemble_txa                     ; $c1 TXA
>93c6		ad a7					.word	Assemble_txs                     ; $c2 TXS
>93c8		a9 a7					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.93ca						Command_Save:
.93ca		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; file name to load
.93cd		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.93cf		a5 36		lda $36				lda 	zTemp0
.93d1		20 54 81	jsr $8154			jsr 	KNLOpenFileWrite 			; open file for writing
.93d4		b0 2f		bcs $9405			bcs 	CSErrorHandler 				; error, so fail.
.93d6		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.93d9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93db		85 30		sta $30				sta 	codePtr
.93dd		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93df		85 31		sta $31				sta 	codePtr+1
.93e1						_CSLoop:
.93e1		b2 30		lda ($30)			lda 	(codePtr)
.93e3		f0 17		beq $93fc			beq 	_CSExit
.93e5		20 29 94	jsr $9429			jsr 	CSGetCleanLine
.93e8		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.93ea		85 36		sta $36				sta 	zTemp0
.93ec		20 08 94	jsr $9408			jsr 	CLWriteByteBlock 			; write the block out.
.93ef		18		clc				clc
.93f0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93f2		65 30		adc $30				adc 	codePtr
.93f4		85 30		sta $30				sta 	codePtr
.93f6		90 02		bcc $93fa			bcc 	_CREExit
.93f8		e6 31		inc $31				inc 	codePtr+1 					; carry
.93fa						_CREExit:
.93fa		80 e5		bra $93e1			bra 	_CSLoop
.93fc						_CSExit:
.93fc		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close file
.93ff		20 23 82	jsr $8223			jsr 	KNLCloseFile
.9402		4c 2d 8d	jmp $8d2d			jmp 	CLComplete 					; display complete message.
.9405						CSErrorHandler:
.9405		4c 48 8d	jmp $8d48			jmp 	CLErrorHandler
.9408						CLWriteByteBlock:
.9408		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.940a		f0 1c		beq $9428			beq 	_CLWBBExit					; if so, exit
.940c		ad 6d 07	lda $076d			lda 	BasicFileStream 			; stream to write, count in X
.940f		20 e9 81	jsr $81e9			jsr 	KNLWriteBlock 				; call one write attempt
.9412		b0 f1		bcs $9405			bcs 	CSErrorHandler 				; error occurred
.9414		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9416		8a		txa				txa 								; subtract bytes written from X, total count.
.9417		38		sec				sec
.9418		e5 38		sbc $38				sbc 	zTemp1
.941a		aa		tax				tax
.941b		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.941c		a5 36		lda $36				lda 	zTemp0
.941e		65 38		adc $38				adc 	zTemp1
.9420		85 36		sta $36				sta 	zTemp0
.9422		90 e4		bcc $9408			bcc 	CLWriteByteBlock
.9424		e6 37		inc $37				inc 	zTemp0+1
.9426		80 e0		bra $9408			bra 	CLWriteByteBlock 			; and retry write out.
.9428						_CLWBBExit:
.9428		60		rts				rts
.9429						CSGetCleanLine:
.9429		a9 00		lda #$00			lda 	#0 							; no indent.
.942b		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.942e		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9430		a0 00		ldy #$00			ldy 	#0
.9432						_CSClean:
.9432		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.9435		f0 09		beq $9440			beq 	_CSDoneClean
.9437		30 04		bmi $943d			bmi 	_CSIgnoreCharacter
.9439		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.943c		e8		inx				inx
.943d						_CSIgnoreCharacter:
.943d		c8		iny				iny
.943e		80 f2		bra $9432			bra 	_CSClean
.9440						_CSDoneClean:
.9440		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9442		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9445		e8		inx				inx
.9446		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.9449		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.944b		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.944d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.944e						CommandSetDate:
.944e		a9 03		lda #$03			lda 	#3
.9450		80 02		bra $9454			bra 	CSDTMain
.9452						CommandSetTime:
.9452		a9 00		lda #$00			lda 	#0
.9454						CSDTMain:
.9454		48		pha				pha 								; save table offsets 0 or 3
.9455		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9457		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.945a		20 20 96	jsr $9620			jsr 	CheckComma
.945d		e8		inx				inx
.945e		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.9461		20 20 96	jsr $9620			jsr 	CheckComma
.9464		e8		inx				inx
.9465		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.9468		68		pla				pla 								; table offset in Y, saving Y
.9469		5a		phy				phy
.946a		a8		tay				tay
.946b		a2 00		ldx #$00			ldx 	#0 							; first number
.946d		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.946f		48		pha				pha
.9470		64 01		stz $01				stz 	1
.9472						_CSDTCopy:
.9472		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9474		d9 b6 94	cmp $94b6,y			cmp 	RTCWMinValues,y 			; check range
.9477		90 1b		bcc $9494			bcc 	_CSDTRange
.9479		d9 bc 94	cmp $94bc,y			cmp 	RTCWMaxValues,y
.947c		b0 16		bcs $9494			bcs 	_CSDTRange
.947e		20 99 94	jsr $9499			jsr 	CSDTDecimalToBCD
.9481		da		phx				phx 								; save X
.9482		be b0 94	ldx $94b0,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9485		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9488		fa		plx				plx 								; restore X
.9489		e8		inx				inx 								; next number
.948a		c8		iny				iny 								; next table entries
.948b		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.948d		d0 e3		bne $9472			bne 	_CSDTCopy
.948f		68		pla				pla 								; restore I/O space
.9490		85 01		sta $01				sta 	1
.9492		7a		ply				ply 								; restore code pos and exit.
.9493		60		rts				rts
.9494						_CSDTRange:
.9494		a9 04		lda #$04		lda	#4
.9496		4c 31 96	jmp $9631		jmp	ErrorHandler
.9499						CSDTDecimalToBCD:
.9499		da		phx				phx 								; 10 count in X
.949a		a2 00		ldx #$00			ldx 	#0
.949c						_CSDTDBLoop:
.949c		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.949e		90 05		bcc $94a5			bcc 	_CSDTDBExit
.94a0		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.94a2		e8		inx				inx 								; one more 10s.
.94a3		80 f7		bra $949c			bra 	_CSDTDBLoop
.94a5						_CSDTDBExit:
.94a5		85 36		sta $36				sta 	zTemp0 						; units
.94a7		8a		txa				txa 								; 10s x 16
.94a8		0a		asl a				asl 	a
.94a9		0a		asl a				asl 	a
.94aa		0a		asl a				asl 	a
.94ab		0a		asl a				asl 	a
.94ac		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.94ae		fa		plx				plx
.94af		60		rts				rts
.94b0						RTCWOffset:
>94b0		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.94b6						RTCWMinValues:
>94b6		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.94bc						RTCWMaxValues:
>94bc		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.94c2						StopCommand:
.94c2		a9 08		lda #$08		lda	#8
.94c4		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.94c7						ProcedureScan:
.94c7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94c9		85 30		sta $30				sta 	codePtr
.94cb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94cd		85 31		sta $31				sta 	codePtr+1
.94cf						_PSLoop:
.94cf		b2 30		lda ($30)			lda 	(codePtr)
.94d1		f0 42		beq $9515			beq 	_PSExit
.94d3		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.94d5		b1 30		lda ($30),y			lda 	(codePtr),y
.94d7		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.94d9		d0 2d		bne $9508			bne 	_PSNext
.94db		c8		iny				iny 								; get the address of the record to zTemp0 and
.94dc		b1 30		lda ($30),y			lda 	(codePtr),y
.94de		29 c0		and #$c0			and 	#$C0
.94e0		c9 40		cmp #$40			cmp 	#$40
.94e2		d0 32		bne $9516			bne 	_PSSyntax
.94e4		b1 30		lda ($30),y			lda 	(codePtr),y
.94e6		18		clc				clc
.94e7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94e9		85 37		sta $37				sta 	zTemp0+1
.94eb		c8		iny				iny 								; LSB
.94ec		b1 30		lda ($30),y			lda 	(codePtr),y
.94ee		85 36		sta $36				sta 	zTemp0
.94f0		c8		iny				iny 								; character after variable call.
.94f1		98		tya				tya 								; save Y offset at +7 (exponent slot)
.94f2		a0 07		ldy #$07			ldy 	#7
.94f4		91 36		sta ($36),y			sta 	(zTemp0),y
.94f6		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.94f8		a0 02		ldy #$02			ldy 	#2
.94fa		91 36		sta ($36),y			sta 	(zTemp0),y
.94fc		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.94fe						_PSCopy:
.94fe		b5 30		lda $30,x			lda 	safePtr,x
.9500		c8		iny				iny
.9501		91 36		sta ($36),y			sta 	(zTemp0),y
.9503		e8		inx				inx
.9504		e0 04		cpx #$04			cpx 	#4
.9506		d0 f6		bne $94fe			bne 	_PSCopy
.9508						_PSNext:
.9508		18		clc				clc
.9509		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.950b		65 30		adc $30				adc 	codePtr
.950d		85 30		sta $30				sta 	codePtr
.950f		90 02		bcc $9513			bcc 	_CREExit
.9511		e6 31		inc $31				inc 	codePtr+1 					; carry
.9513						_CREExit:
.9513		80 ba		bra $94cf			bra 	_PSLoop
.9515						_PSExit:
.9515		60		rts				rts
.9516						_PSSyntax:
.9516		4c 1c a8	jmp $a81c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9519						ScanForward:
.9519		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.951b		86 37		stx $37				stx 	zTemp0+1
.951d		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.951f						_ScanLoop:
.951f		b1 30		lda ($30),y			lda 	(codePtr),y
.9521		c8		iny				iny
.9522		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9524		d0 0e		bne $9534			bne 	_ScanGoNext
.9526		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9528		f0 04		beq $952e			beq 	_ScanMatch
.952a		c5 37		cmp $37				cmp 	zTemp0+1
.952c		d0 06		bne $9534			bne 	_ScanGoNext
.952e						_ScanMatch:
.952e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9530		d0 01		bne $9533			bne 	_ScanNotEndEOL
.9532		88		dey				dey
.9533						_ScanNotEndEOL:
.9533		60		rts				rts
.9534						_ScanGoNext:
.9534		20 39 95	jsr $9539			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9537		80 e6		bra $951f			bra 	_ScanLoop
.9539						ScanForwardOne:
.9539		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.953b		90 3e		bcc $957b			bcc 	_SFWExit
.953d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.953f		90 18		bcc $9559			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9541		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9543		b0 2f		bcs $9574			bcs 	_ScanSkipData
.9545		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9547		90 32		bcc $957b			bcc 	_SFWExit 					; if not, ordinary keywords.
.9549		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.954b		b0 2e		bcs $957b			bcs 	_SFWExit
.954d		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.954f		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9551		b0 28		bcs $957b			bcs 	_SFWExit
.9553		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9555		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9557		80 22		bra $957b			bra 	_SFWExit
.9559						_ScanSkipOne:
.9559		c8		iny				iny 								; consume the extra one.
.955a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.955c		d0 1d		bne $957b			bne 	_SFWExit
.955e		18		clc				clc
.955f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9561		65 30		adc $30				adc 	codePtr
.9563		85 30		sta $30				sta 	codePtr
.9565		90 02		bcc $9569			bcc 	_CREExit
.9567		e6 31		inc $31				inc 	codePtr+1 					; carry
.9569						_CREExit:
.9569		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.956b		b2 30		lda ($30)			lda 	(codePtr)
.956d		d0 0c		bne $957b			bne 	_SFWExit 					; if not zero, more to scan
.956f		a9 13		lda #$13		lda	#19
.9571		4c 31 96	jmp $9631		jmp	ErrorHandler
.9574						_ScanSkipData:
.9574		88		dey				dey 								; point at data token
.9575		c8		iny				iny 								; point to offset
.9576		98		tya				tya 								; A = offset position
.9577		38		sec				sec 								; add size +1 hence SEC
.9578		71 30		adc ($30),y			adc 	(codePtr),y
.957a		a8		tay				tay 								; make current position.
.957b						_SFWExit:
.957b		60		rts				rts
.957c						ScanGetCurrentLineStep:
.957c		64 38		stz $38				stz 	zTemp1
.957e		a0 03		ldy #$03			ldy 	#3
.9580						_SGCLSLoop:
.9580		b1 30		lda ($30),y			lda 	(codePtr),y
.9582		c8		iny				iny
.9583		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9585		f0 05		beq $958c			beq 	_SGCLSExit
.9587		20 39 95	jsr $9539			jsr 	ScanForwardOne
.958a		80 f4		bra $9580			bra 	_SGCLSLoop
.958c						_SGCLSExit:
.958c		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.958e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc72						m
.958f						Command_VERIFY:
.958f		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; file name to verify
.9592		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9594		a5 36		lda $36				lda 	zTemp0
.9596		20 59 81	jsr $8159			jsr 	KNLOpenFileRead 			; open file for reading
.9599		b0 4b		bcs $95e6			bcs 	_CVErrorHandler 			; error, so fail.
.959b		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.959e		20 98 8d	jsr $8d98			jsr     LoadReadByteInit            ; Init reader with the stream
.95a1		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.95a4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95a6		85 30		sta $30				sta 	codePtr
.95a8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95aa		85 31		sta $31				sta 	codePtr+1
.95ac						_CVLoop:
.95ac		20 56 8d	jsr $8d56			jsr 	LoadReadLine 				; get next line.
.95af		f0 27		beq $95d8			beq 	_CVExit 					; end, exit.
.95b1		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.95b4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.95b7		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.95ba		f0 f0		beq $95ac			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.95bc		a0 00		ldy #$00			ldy 	#0 							; start compare
.95be						_CVCompareLoop:
.95be		b1 30		lda ($30),y			lda 	(codePtr),y
.95c0		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.95c3		d0 1c		bne $95e1			bne 	_CVCompareError
.95c5		c8		iny				iny
.95c6		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.95c9		d0 f3		bne $95be			bne 	_CVCompareLoop
.95cb		18		clc				clc
.95cc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.95ce		65 30		adc $30				adc 	codePtr
.95d0		85 30		sta $30				sta 	codePtr
.95d2		90 02		bcc $95d6			bcc 	_CREExit
.95d4		e6 31		inc $31				inc 	codePtr+1 					; carry
.95d6						_CREExit:
.95d6		80 d4		bra $95ac			bra 	_CVLoop
.95d8						_CVExit:
.95d8		ad 6d 07	lda $076d			lda 	BasicFileStream
.95db		20 23 82	jsr $8223			jsr 	KNLCloseFile
.95de		4c 2d 8d	jmp $8d2d			jmp 	CLComplete
.95e1						_CVCompareError:
.95e1		a9 1b		lda #$1b		lda	#27
.95e3		4c 31 96	jmp $9631		jmp	ErrorHandler
.95e6						_CVErrorHandler:
.95e6		4c 48 8d	jmp $8d48			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.95e9						Command_WHILE:
.95e9		5a		phy				phy 								; save position of the test
.95ea		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.95ec		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber
.95ef		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; check if zero
.95f2		f0 0e		beq $9602			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.95f4		98		tya				tya 								; position *after* test.
.95f5		7a		ply				ply 								; restore position before test, at WHILE
.95f6		88		dey				dey 								; so we execute the WHILE command again.
.95f7		48		pha				pha 								; push after test on the stack
.95f8		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.95fa		20 7d b7	jsr $b77d			jsr 	StackOpen
.95fd		20 c2 b7	jsr $b7c2			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9600		7a		ply				ply 								; restore the position *after* the test
.9601		60		rts				rts
.9602						_WHExitLoop:
.9602		68		pla				pla 								; throw post loop position
.9603		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.9605		aa		tax				tax
.9606		20 19 95	jsr $9519			jsr 	ScanForward
.9609		60		rts				rts
.960a						Command_WEND:
.960a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.960c		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.960e		20 aa b7	jsr $b7aa			jsr 	StackCheckFrame
.9611		20 d3 b7	jsr $b7d3			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9614		20 9c b7	jsr $b79c			jsr 	StackClose		 			; erase the frame
.9617		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9618						CheckRightBracket:
.9618		b1 30		lda ($30),y			lda 	(codePtr),y
.961a		c8		iny				iny
.961b		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.961d		d0 0f		bne $962e			bne 	CNAFail
.961f		60		rts				rts
.9620						CheckComma:
.9620		b1 30		lda ($30),y			lda 	(codePtr),y
.9622		c8		iny				iny
.9623		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9625		d0 07		bne $962e			bne 	CNAFail
.9627		60		rts				rts
.9628						CheckNextA:
.9628		d1 30		cmp ($30),y			cmp 	(codePtr),y
.962a		d0 02		bne $962e			bne 	CNAFail
.962c		c8		iny				iny 								; skip character
.962d		60		rts				rts 								; and exit
.962e						CNAFail:
.962e		4c 1c a8	jmp $a81c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9631						ErrorHandler:
.9631		a8		tay				tay 								; find the error text
.9632		f0 49		beq $967d			beq 	_EHEnd
.9634		a2 00		ldx #$00			ldx 	#0
.9636		a9 35		lda #$35			lda 	#((ErrorText) & $FF)
.9638		85 36		sta $36				sta 	0+zTemp0
.963a		a9 a8		lda #$a8			lda 	#((ErrorText) >> 8)
.963c		85 37		sta $37				sta 	1+zTemp0
.963e						_EHFind:
.963e		88		dey				dey 								; keep looking through text
.963f		f0 0e		beq $964f			beq 	_EHFound
.9641						_EHFindZero:
.9641		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9643		e6 36		inc $36				inc 	zTemp0
.9645		d0 02		bne $9649			bne 	_EHFNoCarry
.9647		e6 37		inc $37				inc 	zTemp0+1
.9649						_EHFNoCarry:
.9649		c9 00		cmp #$00			cmp 	#0
.964b		d0 f4		bne $9641			bne 	_EHFindZero
.964d		80 ef		bra $963e			bra 	_EHFind
.964f						_EHFound:
.964f		a5 36		lda $36				lda 	zTemp0 						; print message
.9651		a6 37		ldx $37				ldx 	zTemp0+1
.9653		20 8a 96	jsr $968a			jsr 	PrintStringXA
.9656		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9658		b1 30		lda ($30),y			lda 	(codePtr),y
.965a		d0 05		bne $9661			bne 	_EHAtMsg
.965c		c8		iny				iny
.965d		b1 30		lda ($30),y			lda 	(codePtr),y
.965f		f0 17		beq $9678			beq 	_EHCREnd
.9661						_EHAtMsg:
.9661		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.9663		a9 80		lda #$80			lda 	#_AtMsg & $FF
.9665		20 8a 96	jsr $968a			jsr 	PrintStringXA
.9668		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.966a		b1 30		lda ($30),y			lda 	(codePtr),y
.966c		48		pha				pha
.966d		c8		iny				iny
.966e		b1 30		lda ($30),y			lda 	(codePtr),y
.9670		aa		tax				tax
.9671		68		pla				pla
.9672		20 a0 9a	jsr $9aa0			jsr 	ConvertInt16 				; convert XA to string
.9675		20 8a 96	jsr $968a			jsr 	PrintStringXA 				; and print it.
.9678						_EHCREnd:
.9678		a9 0d		lda #$0d			lda 	#13 						; new line
.967a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.967d						_EHEnd:
.967d		4c 79 85	jmp $8579			jmp 	WarmStart
>9680		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9688		20 00
.968a						PrintStringXA:
.968a		5a		phy				phy
.968b		86 37		stx $37				stx 	zTemp0+1
.968d		85 36		sta $36				sta 	zTemp0
.968f		a0 00		ldy #$00			ldy 	#0
.9691						_PSXALoop:
.9691		b1 36		lda ($36),y			lda 	(zTemp0),y
.9693		f0 06		beq $969b			beq 	_PSXAExit
.9695		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9698		c8		iny				iny
.9699		80 f6		bra $9691			bra 	_PSXALoop
.969b						_PSXAExit:
.969b		7a		ply				ply
.969c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.969d						UnaryTrue:
.969d		fa		plx				plx
.969e						ReturnTrue:
.969e		a9 01		lda #$01			lda 	#1  						; set to 1
.96a0		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.96a3		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96a5		95 50		sta $50,x			sta 	NSStatus,x
.96a7		60		rts				rts
.96a8						UnaryFalse:
.96a8		fa		plx				plx
.96a9						ReturnFalse:
.96a9		4c 9e a6	jmp $a69e			jmp 	NSMSetZero 					; set it all to zero
.96ac						BinaryCompareEqual:
.96ac		fa		plx				plx
.96ad		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96b0		c9 00		cmp #$00			cmp 	#0
.96b2		f0 ea		beq $969e			beq 	ReturnTrue
.96b4		80 f3		bra $96a9			bra 	ReturnFalse
.96b6						BinaryCompareLess:
.96b6		fa		plx				plx
.96b7		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96ba		c9 ff		cmp #$ff			cmp 	#$FF
.96bc		f0 e0		beq $969e			beq 	ReturnTrue
.96be		80 e9		bra $96a9			bra 	ReturnFalse
.96c0						BinaryCompareGreater:
.96c0		fa		plx				plx
.96c1		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96c4		c9 01		cmp #$01			cmp 	#1
.96c6		f0 d6		beq $969e			beq 	ReturnTrue
.96c8		80 df		bra $96a9			bra 	ReturnFalse
.96ca						BinaryCompareNotEqual:
.96ca		fa		plx				plx
.96cb		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96ce		c9 00		cmp #$00			cmp 	#0
.96d0		d0 cc		bne $969e			bne 	ReturnTrue
.96d2		80 d5		bra $96a9			bra 	ReturnFalse
.96d4						BinaryCompareLessEqual:
.96d4		fa		plx				plx
.96d5		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96d8		c9 01		cmp #$01			cmp 	#1
.96da		d0 c2		bne $969e			bne 	ReturnTrue
.96dc		80 cb		bra $96a9			bra 	ReturnFalse
.96de						BinaryCompareGreaterEqual:
.96de		fa		plx				plx
.96df		20 e8 96	jsr $96e8			jsr 	CompareBaseCode
.96e2		c9 ff		cmp #$ff			cmp 	#$FF
.96e4		d0 b8		bne $969e			bne 	ReturnTrue
.96e6		80 c1		bra $96a9			bra 	ReturnFalse
.96e8						CompareBaseCode:
.96e8		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; make both values if references.
.96eb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.96ed		15 51		ora $51,x			ora 	NSStatus+1,x
.96ef		29 10		and #$10			and 	#NSTString
.96f1		d0 37		bne $972a			bne 	_CBCString 					; if so do string code, which will check if both.
.96f3		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.96f5		15 79		ora $79,x			ora 	NSExponent+1,x
.96f7		d0 34		bne $972d			bne 	_CBCFloat
.96f9		b5 50		lda $50,x			lda 	NSStatus,x
.96fb		15 51		ora $51,x			ora 	NSStatus+1,x
.96fd		29 08		and #$08			and 	#NSTFloat
.96ff		d0 2c		bne $972d			bne 	_CBCFloat
.9701		20 30 97	jsr $9730			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9704		e8		inx				inx
.9705		20 30 97	jsr $9730			jsr 	CompareFixMinusZero
.9708		ca		dex				dex
.9709		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.970b		55 51		eor $51,x			eor 	NSStatus+1,x
.970d		10 0a		bpl $9719			bpl 	_CDCSameSign
.970f		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9711		30 14		bmi $9727			bmi 	_CBCLess 					; return $FF
.9713						_CBCGreater:
.9713		a9 01		lda #$01			lda 	#1
.9715		60		rts				rts
.9716						_CBCEqual:
.9716		a9 00		lda #$00			lda 	#0
.9718		60		rts				rts
.9719						_CDCSameSign:
.9719		20 45 99	jsr $9945			jsr 	SubTopTwoStack 				; unsigned subtract
.971c		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; or the mantissa together
.971f		f0 f5		beq $9716			beq 	_CBCEqual 					; -0 == 0
.9721		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9723		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9725		10 ec		bpl $9713			bpl 	_CBCGreater
.9727						_CBCLess:
.9727		a9 ff		lda #$ff			lda 	#$FF
.9729		60		rts				rts
.972a						_CBCString:
.972a		4c b6 98	jmp $98b6			jmp 	CompareStrings
.972d						_CBCFloat:
.972d		4c 00 9c	jmp $9c00			jmp 	CompareFloat
.9730						CompareFixMinusZero:
.9730		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero
.9733		d0 02		bne $9737			bne 	_CFXMZNotZero
.9735		74 50		stz $50,x			stz 	NSStatus,x
.9737						_CFXMZNotZero:
.9737		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9738						StringConcat:
.9738		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.973a		35 51		and $51,x			and 	NSStatus+1,x
.973c		29 18		and #$18			and 	#NSBTypeMask
.973e		c9 10		cmp #$10			cmp 	#NSTString
.9740		d0 50		bne $9792			bne		_SCType
.9742		64 38		stz $38				stz 	zTemp1 						; counting total length
.9744		e8		inx				inx
.9745		20 63 97	jsr $9763			jsr 	_SCSetupZ0 					; setup for second
.9748		20 6c 97	jsr $976c			jsr 	_SCLengthZ0 				; length for second
.974b		ca		dex				dex
.974c		20 63 97	jsr $9763			jsr 	_SCSetupZ0 					; setup for first
.974f		20 6c 97	jsr $976c			jsr 	_SCLengthZ0 				; length for first
.9752		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9754		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.9757		20 83 97	jsr $9783			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.975a		e8		inx				inx
.975b		20 63 97	jsr $9763			jsr 	_SCSetupZ0 					; copy second out
.975e		20 83 97	jsr $9783			jsr 	_SCCopy
.9761		ca		dex				dex
.9762		60		rts				rts
.9763						_SCSetupZ0:
.9763		b5 58		lda $58,x			lda 	NSMantissa0,x
.9765		85 36		sta $36				sta 	zTemp0
.9767		b5 60		lda $60,x			lda 	NSMantissa1,x
.9769		85 37		sta $37				sta 	zTemp0+1
.976b		60		rts				rts
.976c						_SCLengthZ0:
.976c		5a		phy				phy
.976d		a0 00		ldy #$00			ldy 	#0
.976f						_SCLenLoop:
.976f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9771		f0 0e		beq $9781			beq 	_SCLExit
.9773		c8		iny				iny
.9774		e6 38		inc $38				inc 	zTemp1
.9776		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9778		c9 fd		cmp #$fd			cmp 	#253
.977a		d0 f3		bne $976f			bne		_SCLenLoop
.977c		a9 09		lda #$09		lda	#9
.977e		4c 31 96	jmp $9631		jmp	ErrorHandler
.9781						_SCLExit:
.9781		7a		ply				ply
.9782		60		rts				rts
.9783						_SCCopy:
.9783		5a		phy				phy
.9784		a0 00		ldy #$00			ldy 	#0
.9786						_SCCopyLoop:
.9786		b1 36		lda ($36),y			lda 	(zTemp0),y
.9788		f0 06		beq $9790			beq 	_SCCExit
.978a		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.978d		c8		iny				iny
.978e		80 f6		bra $9786			bra 	_SCCopyLoop
.9790						_SCCExit:
.9790		7a		ply				ply
.9791		60		rts				rts
.9792						_SCType:
.9792		4c 26 a8	jmp $a826			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9795						IntegerDivide:
.9795		fa		plx				plx
.9796		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9798		15 51		ora $51,x			ora 	NSStatus+1,x
.979a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.979b		0a		asl a				asl 	a
.979c		10 05		bpl $97a3			bpl 	_NotRef
.979e		48		pha				pha
.979f		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a2		68		pla				pla
.97a3						_NotRef:
.97a3		0a		asl a				asl 	a
.97a4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97a6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97a8		15 79		ora $79,x			ora 	NSExponent+1,x
.97aa		f0 03		beq $97af			beq 	_IntegerCode 				; if clear, then we have two integers
.97ac		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.97af						_IntegerCode:
.97af		20 c9 97	jsr $97c9			jsr 	CheckDivideZero 			; do div zero check
.97b2		20 fb 97	jsr $97fb			jsr 	Int32Divide 				; do the division
.97b5		20 ac 98	jsr $98ac			jsr 	CalculateSign 				; calculate result sign
.97b8						NSMCopyPlusTwoToZero:
.97b8		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.97ba		95 58		sta $58,x			sta 	NSMantissa0,x
.97bc		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.97be		95 60		sta $60,x			sta 	NSMantissa1,x
.97c0		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.97c2		95 68		sta $68,x			sta 	NSMantissa2,x
.97c4		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.97c6		95 70		sta $70,x			sta 	NSMantissa3,x
.97c8		60		rts				rts
.97c9						CheckDivideZero:
.97c9		e8		inx				inx
.97ca		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero
.97cd		f0 02		beq $97d1			beq 	_CDVError
.97cf		ca		dex				dex
.97d0		60		rts				rts
.97d1						_CDVError:
.97d1		a9 03		lda #$03		lda	#3
.97d3		4c 31 96	jmp $9631		jmp	ErrorHandler
.97d6						IntegerModulus:
.97d6		fa		plx				plx
.97d7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d9		15 51		ora $51,x			ora 	NSStatus+1,x
.97db		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97dc		0a		asl a				asl 	a
.97dd		10 05		bpl $97e4			bpl 	_NotRef
.97df		48		pha				pha
.97e0		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e3		68		pla				pla
.97e4						_NotRef:
.97e4		0a		asl a				asl 	a
.97e5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97e7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e9		15 79		ora $79,x			ora 	NSExponent+1,x
.97eb		f0 03		beq $97f0			beq 	_IntegerCode 				; if clear, then we have two integers
.97ed		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.97f0						_IntegerCode:
.97f0						IntegerModulusNoCheck:
.97f0		20 c9 97	jsr $97c9			jsr 	CheckDivideZero 			; do div zero check
.97f3		20 fb 97	jsr $97fb			jsr 	Int32Divide 				; do the division
.97f6		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.97f8		56 50		lsr $50,x			lsr 	NSStatus,x
.97fa		60		rts				rts
.97fb						Int32Divide:
.97fb		48		pha				pha 								; save AXY
.97fc		5a		phy				phy
.97fd		20 81 a6	jsr $a681			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9800		20 9a a6	jsr $a69a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9803		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9805						_I32DivideLoop:
.9805		e8		inx				inx
.9806		e8		inx				inx
.9807		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.980a		ca		dex				dex
.980b		ca		dex				dex
.980c		20 ae a6	jsr $a6ae			jsr 	NSMRotateLeft
.980f		20 3a 98	jsr $983a			jsr 	DivideCheckSubtract 		; check if subtract possible
.9812		90 02		bcc $9816			bcc 	_I32DivideNoCarryIn
.9814		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9816						_I32DivideNoCarryIn:
.9816		88		dey				dey 								; loop round till division completed.
.9817		d0 ec		bne $9805			bne 	_I32DivideLoop
.9819		7a		ply				ply 								; restore AXY and exit
.981a		68		pla				pla
.981b		60		rts				rts
.981c						Int32ShiftDivide:
.981c		48		pha				pha 								; save AY
.981d		5a		phy				phy
.981e		e8		inx				inx 								; clear S[X+2]
.981f		e8		inx				inx
.9820		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.9823		ca		dex				dex
.9824		ca		dex				dex
.9825		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9827						_I32SDLoop:
.9827		20 3a 98	jsr $983a			jsr 	DivideCheckSubtract 		; check if subtract possible
.982a		e8		inx				inx
.982b		e8		inx				inx
.982c		20 ae a6	jsr $a6ae			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.982f		ca		dex				dex
.9830		ca		dex				dex
.9831		20 ae a6	jsr $a6ae			jsr 	NSMRotateLeft
.9834		88		dey				dey 	 							; do 31 times
.9835		d0 f0		bne $9827			bne 	_I32SDLoop
.9837		7a		ply				ply 								; restore AY and exit
.9838		68		pla				pla
.9839		60		rts				rts
.983a						DivideCheckSubtract:
.983a		20 45 99	jsr $9945			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.983d		b0 04		bcs $9843			bcs 	_DCSExit 					; if carry set, then could do, exit
.983f		20 2b 99	jsr $992b			jsr 	AddTopTwoStack 				; add it back in
.9842		18		clc				clc 								; and return False
.9843						_DCSExit:
.9843		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9844						MulInteger:
.9844		fa		plx				plx
.9845		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9847		15 51		ora $51,x			ora 	NSStatus+1,x
.9849		0a		asl a				asl 	a 							; shift reference bit into sign bit
.984a		0a		asl a				asl 	a
.984b		10 05		bpl $9852			bpl 	_NotRef
.984d		48		pha				pha
.984e		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9851		68		pla				pla
.9852						_NotRef:
.9852		0a		asl a				asl 	a 							; put MSB of type into A:7
.9853		30 09		bmi $985e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9855		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9857		15 79		ora $79,x			ora 	NSExponent+1,x
.9859		f0 06		beq $9861			beq 	_IntegerCode 				; if clear, then we have two integers
.985b		4c c2 9c	jmp $9cc2			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.985e						_StringData:
.985e		4c 30 a8	jmp $a830			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9861						_IntegerCode:
.9861		20 6e 98	jsr $986e			jsr 	MultiplyShort
.9864		c9 00		cmp #$00			cmp 	#0
.9866		f0 05		beq $986d			beq 	_MIExit
.9868		a9 04		lda #$04		lda	#4
.986a		4c 31 96	jmp $9631		jmp	ErrorHandler
.986d						_MIExit:
.986d		60		rts				rts
.986e						MultiplyShort:
.986e		5a		phy				phy 								; save Y
.986f		20 81 a6	jsr $a681			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9872		20 9a a6	jsr $a69a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9875		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9877						_I32MLoop:
.9877		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9879		15 62		ora $62,x			ora 	NSMantissa1+2,x
.987b		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.987d		15 72		ora $72,x			ora 	NSMantissa3+2,x
.987f		f0 25		beq $98a6			beq 	_I32MExit 					; exit if zero
.9881		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9883		29 01		and #$01			and 	#1
.9885		f0 0d		beq $9894			beq 	_I32MNoAdd
.9887		20 2b 99	jsr $992b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.988a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.988c		10 06		bpl $9894			bpl 	_I32MNoAdd
.988e						_I32ShiftRight:
.988e		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight 				; shift S[X] right
.9891		c8		iny				iny 								; increment shift count
.9892		80 09		bra $989d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9894						_I32MNoAdd:
.9894		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9896		70 f6		bvs $988e			bvs 	_I32ShiftRight 				; instead.
.9898		e8		inx				inx
.9899		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.989c		ca		dex				dex
.989d						_I32MShiftUpper:
.989d		e8		inx				inx 								; shift S[X+2] right
.989e		e8		inx				inx
.989f		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight
.98a2		ca		dex				dex
.98a3		ca		dex				dex
.98a4		80 d1		bra $9877			bra 	_I32MLoop 					; try again.
.98a6						_I32MExit:
.98a6		20 ac 98	jsr $98ac			jsr 	CalculateSign
.98a9		98		tya				tya 								; shift in A
.98aa		7a		ply				ply 								; restore Y and exit
.98ab		60		rts				rts
.98ac						CalculateSign:
.98ac		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.98ae		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.98b0		55 51		eor $51,x			eor 	NSStatus+1,x
.98b2		0a		asl a				asl 	a 							; shift bit 7 into carry
.98b3		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.98b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.98b6						CompareStrings:
.98b6		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.98b8		35 51		and $51,x			and 	NSStatus+1,x
.98ba		29 10		and #$10			and 	#NSBIsString
.98bc		f0 28		beq $98e6			beq 	_CSTypeError
.98be		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.98c0		85 36		sta $36				sta 	zTemp0
.98c2		b5 60		lda $60,x			lda 	NSMantissa1,x
.98c4		85 37		sta $37				sta 	zTemp0+1
.98c6		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.98c8		85 38		sta $38				sta 	zTemp1
.98ca		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98cc		85 39		sta $39				sta 	zTemp1+1
.98ce		5a		phy				phy 								; save Y so we can access strings
.98cf		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.98d1						_CSLoop:
.98d1		c8		iny				iny
.98d2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.98d4		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.98d6		d0 06		bne $98de			bne 	_CSDifferent
.98d8		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.98da		d0 f5		bne $98d1			bne 	_CSLoop 					; still comparing
.98dc						_CSExit:
.98dc		7a		ply				ply 								; reached end, return zero in A from EOS
.98dd		60		rts				rts
.98de						_CSDifferent:
.98de		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.98e0		90 fa		bcc $98dc			bcc		_CSExit
.98e2		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.98e4		80 f6		bra $98dc			bra 	_CSExit
.98e6						_CSTypeError:
.98e6		4c 26 a8	jmp $a826			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.98e9						ShiftLeft:
.98e9		38		sec				sec 								; common code, carry determines which way.
.98ea		80 01		bra $98ed			bra 	ShiftMain
.98ec						ShiftRight:
.98ec		18		clc				clc
.98ed						ShiftMain:
.98ed		fa		plx				plx 								; restore X
.98ee		08		php				php 								; save direction
.98ef		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98f1		15 51		ora $51,x			ora 	NSStatus+1,x
.98f3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98f4		0a		asl a				asl 	a
.98f5		10 05		bpl $98fc			bpl 	_NotRef
.98f7		48		pha				pha
.98f8		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98fb		68		pla				pla
.98fc						_NotRef:
.98fc		0a		asl a				asl 	a
.98fd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98ff		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9901		15 79		ora $79,x			ora 	NSExponent+1,x
.9903		f0 03		beq $9908			beq 	_IntegerCode 				; if clear, then we have two integers
.9905		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.9908						_IntegerCode:
.9908		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.990a		29 e0		and #$e0			and 	#$E0
.990c		15 61		ora $61,x			ora 	NSMantissa1+1,x
.990e		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9910		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9912		d0 12		bne $9926			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9914						_SMLoop:
.9914		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9916		30 11		bmi $9929			bmi 	_SMExit 					; exit if done.
.9918		28		plp				plp 								; restore direction setting
.9919		08		php				php
.991a		90 05		bcc $9921			bcc 	_SMRight
.991c		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; shift left if CS
.991f		80 f3		bra $9914			bra 	_SMLoop
.9921						_SMRight:
.9921		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight 				; shift right if CC
.9924		80 ee		bra $9914			bra 	_SMLoop
.9926						_SMExit0:
.9926		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; return zero.
.9929						_SMExit:
.9929		28		plp				plp 								; throw direction
.992a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.992b						AddTopTwoStack:
.992b		18		clc				clc
.992c		b5 58		lda $58,x			lda		NSMantissa0,x
.992e		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9930		95 58		sta $58,x			sta 	NSMantissa0,x
.9932		b5 60		lda $60,x			lda		NSMantissa1,x
.9934		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9936		95 60		sta $60,x			sta 	NSMantissa1,x
.9938		b5 68		lda $68,x			lda		NSMantissa2,x
.993a		75 69		adc $69,x			adc 		NSMantissa2+1,x
.993c		95 68		sta $68,x			sta 	NSMantissa2,x
.993e		b5 70		lda $70,x			lda		NSMantissa3,x
.9940		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9942		95 70		sta $70,x			sta 	NSMantissa3,x
.9944		60		rts				rts
.9945						SubTopTwoStack:
.9945		38		sec				sec
.9946		b5 58		lda $58,x			lda		NSMantissa0,x
.9948		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.994a		95 58		sta $58,x			sta 	NSMantissa0,x
.994c		b5 60		lda $60,x			lda		NSMantissa1,x
.994e		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9950		95 60		sta $60,x			sta 	NSMantissa1,x
.9952		b5 68		lda $68,x			lda		NSMantissa2,x
.9954		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9956		95 68		sta $68,x			sta 	NSMantissa2,x
.9958		b5 70		lda $70,x			lda		NSMantissa3,x
.995a		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.995c		95 70		sta $70,x			sta 	NSMantissa3,x
.995e		60		rts				rts
.995f						AddInteger:
.995f		fa		plx				plx
.9960		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9962		15 51		ora $51,x			ora 	NSStatus+1,x
.9964		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9965		0a		asl a				asl 	a
.9966		10 05		bpl $996d			bpl 	_NotRef
.9968		48		pha				pha
.9969		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.996c		68		pla				pla
.996d						_NotRef:
.996d		0a		asl a				asl 	a 							; put MSB of type into A:7
.996e		30 09		bmi $9979			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9970		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9972		15 79		ora $79,x			ora 	NSExponent+1,x
.9974		f0 06		beq $997c			beq 	_IntegerCode 				; if clear, then we have two integers
.9976		4c 72 9b	jmp $9b72			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9979						_StringData:
.9979		4c 38 97	jmp $9738			jmp 	StringConcat							; at least one string - don't know both are strings.
.997c						_IntegerCode:
.997c						AddCode:
.997c		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.997e		55 51		eor $51,x			eor 	NSStatus+1,x
.9980		10 a9		bpl $992b			bpl 	AddTopTwoStack
.9982		20 45 99	jsr $9945			jsr 	SubTopTwoStack 				; do a physical subtraction
.9985		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9987		10 07		bpl $9990			bpl 	_AddExit
.9989		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.998b		95 50		sta $50,x			sta 	NSStatus,x
.998d		20 67 a6	jsr $a667			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9990						_AddExit:
.9990		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; check for -0
.9993		d0 02		bne $9997			bne 	_AddNonZero
.9995		74 50		stz $50,x			stz 	NSStatus,x
.9997						_AddNonZero:
.9997		60		rts				rts
.9998						SubInteger:
.9998		fa		plx				plx
.9999		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.999b		15 51		ora $51,x			ora 	NSStatus+1,x
.999d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.999e		0a		asl a				asl 	a
.999f		10 05		bpl $99a6			bpl 	_NotRef
.99a1		48		pha				pha
.99a2		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99a5		68		pla				pla
.99a6						_NotRef:
.99a6		0a		asl a				asl 	a 							; put MSB of type into A:7
.99a7		30 09		bmi $99b2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99a9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99ab		15 79		ora $79,x			ora 	NSExponent+1,x
.99ad		f0 06		beq $99b5			beq 	_IntegerCode 				; if clear, then we have two integers
.99af		4c 77 9b	jmp $9b77			jmp 	FloatingPointSub 							; otherwise at least one float.
.99b2						_StringData:
.99b2		4c 30 a8	jmp $a830			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99b5						_IntegerCode:
.99b5		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.99b7		49 80		eor #$80			eor 	#$80
.99b9		95 51		sta $51,x			sta 	NSStatus+1,x
.99bb		80 bf		bra $997c			bra 	AddCode 					; and do the same code as add.
.99bd						AndInteger:
.99bd		fa		plx				plx
.99be		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99c0		15 51		ora $51,x			ora 	NSStatus+1,x
.99c2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c3		0a		asl a				asl 	a
.99c4		10 05		bpl $99cb			bpl 	_NotRef
.99c6		48		pha				pha
.99c7		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ca		68		pla				pla
.99cb						_NotRef:
.99cb		0a		asl a				asl 	a
.99cc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99ce		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99d0		15 79		ora $79,x			ora 	NSExponent+1,x
.99d2		f0 03		beq $99d7			beq 	_IntegerCode 				; if clear, then we have two integers
.99d4		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.99d7						_IntegerCode:
.99d7		b5 58		lda $58,x			lda		NSMantissa0,x
.99d9		35 59		and $59,x			and 		NSMantissa0+1,x
.99db		95 58		sta $58,x			sta 	NSMantissa0,x
.99dd		b5 60		lda $60,x			lda		NSMantissa1,x
.99df		35 61		and $61,x			and 		NSMantissa1+1,x
.99e1		95 60		sta $60,x			sta 	NSMantissa1,x
.99e3		b5 68		lda $68,x			lda		NSMantissa2,x
.99e5		35 69		and $69,x			and 		NSMantissa2+1,x
.99e7		95 68		sta $68,x			sta 	NSMantissa2,x
.99e9		b5 70		lda $70,x			lda		NSMantissa3,x
.99eb		35 71		and $71,x			and 		NSMantissa3+1,x
.99ed		95 70		sta $70,x			sta 	NSMantissa3,x
.99ef		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99f1		60		rts				rts
.99f2						OraInteger:
.99f2		fa		plx				plx
.99f3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99f5		15 51		ora $51,x			ora 	NSStatus+1,x
.99f7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99f8		0a		asl a				asl 	a
.99f9		10 05		bpl $9a00			bpl 	_NotRef
.99fb		48		pha				pha
.99fc		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ff		68		pla				pla
.9a00						_NotRef:
.9a00		0a		asl a				asl 	a
.9a01		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a03		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a05		15 79		ora $79,x			ora 	NSExponent+1,x
.9a07		f0 03		beq $9a0c			beq 	_IntegerCode 				; if clear, then we have two integers
.9a09		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.9a0c						_IntegerCode:
.9a0c		b5 58		lda $58,x			lda		NSMantissa0,x
.9a0e		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9a10		95 58		sta $58,x			sta 	NSMantissa0,x
.9a12		b5 60		lda $60,x			lda		NSMantissa1,x
.9a14		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9a16		95 60		sta $60,x			sta 	NSMantissa1,x
.9a18		b5 68		lda $68,x			lda		NSMantissa2,x
.9a1a		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9a1c		95 68		sta $68,x			sta 	NSMantissa2,x
.9a1e		b5 70		lda $70,x			lda		NSMantissa3,x
.9a20		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9a22		95 70		sta $70,x			sta 	NSMantissa3,x
.9a24		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a26		60		rts				rts
.9a27						EorInteger:
.9a27		fa		plx				plx
.9a28		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a2a		15 51		ora $51,x			ora 	NSStatus+1,x
.9a2c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a2d		0a		asl a				asl 	a
.9a2e		10 05		bpl $9a35			bpl 	_NotRef
.9a30		48		pha				pha
.9a31		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a34		68		pla				pla
.9a35						_NotRef:
.9a35		0a		asl a				asl 	a
.9a36		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a38		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a3a		15 79		ora $79,x			ora 	NSExponent+1,x
.9a3c		f0 03		beq $9a41			beq 	_IntegerCode 				; if clear, then we have two integers
.9a3e		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.9a41						_IntegerCode:
.9a41		b5 58		lda $58,x			lda		NSMantissa0,x
.9a43		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a45		95 58		sta $58,x			sta 	NSMantissa0,x
.9a47		b5 60		lda $60,x			lda		NSMantissa1,x
.9a49		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a4b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a4d		b5 68		lda $68,x			lda		NSMantissa2,x
.9a4f		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9a51		95 68		sta $68,x			sta 	NSMantissa2,x
.9a53		b5 70		lda $70,x			lda		NSMantissa3,x
.9a55		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9a57		95 70		sta $70,x			sta 	NSMantissa3,x
.9a59		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a5b		60		rts				rts
.9a5c						WordIndirect:
.9a5c		fa		plx				plx
.9a5d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a5f		15 51		ora $51,x			ora 	NSStatus+1,x
.9a61		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a62		0a		asl a				asl 	a
.9a63		10 05		bpl $9a6a			bpl 	_NotRef
.9a65		48		pha				pha
.9a66		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a69		68		pla				pla
.9a6a						_NotRef:
.9a6a		0a		asl a				asl 	a
.9a6b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a6d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a6f		15 79		ora $79,x			ora 	NSExponent+1,x
.9a71		f0 03		beq $9a76			beq 	_IntegerCode 				; if clear, then we have two integers
.9a73		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.9a76						_IntegerCode:
.9a76		20 7c 99	jsr $997c			jsr 	AddCode 					; add the two values
.9a79		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a7b		95 50		sta $50,x			sta 	NSStatus,x
.9a7d		60		rts				rts
.9a7e						ByteIndirect:
.9a7e		fa		plx				plx
.9a7f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a81		15 51		ora $51,x			ora 	NSStatus+1,x
.9a83		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a84		0a		asl a				asl 	a
.9a85		10 05		bpl $9a8c			bpl 	_NotRef
.9a87		48		pha				pha
.9a88		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a8b		68		pla				pla
.9a8c						_NotRef:
.9a8c		0a		asl a				asl 	a
.9a8d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a8f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a91		15 79		ora $79,x			ora 	NSExponent+1,x
.9a93		f0 03		beq $9a98			beq 	_IntegerCode 				; if clear, then we have two integers
.9a95		4c 26 a8	jmp $a826			jmp 	TypeError 					; anything else, type mismatch.
.9a98						_IntegerCode:
.9a98		20 7c 99	jsr $997c			jsr 	AddCode 					; add the two values
.9a9b		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a9d		95 50		sta $50,x			sta 	NSStatus,x
.9a9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9aa0						ConvertInt16:
.9aa0		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9aa2		86 60		stx $60				stx 	NSMantissa1
.9aa4		64 68		stz $68				stz 	NSMantissa2
.9aa6		64 70		stz $70				stz 	NSMantissa3
.9aa8		64 50		stz $50				stz 	NSStatus 					; positive integer
.9aaa		a2 00		ldx #$00			ldx 	#0 							; stack level
.9aac		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9aae		80 00		bra $9ab0			bra 	ConvertInt32
.9ab0						ConvertInt32:
.9ab0		5a		phy				phy
.9ab1		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ab3		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9ab5		10 08		bpl $9abf			bpl 	_CI32NotNeg
.9ab7		48		pha				pha
.9ab8		a9 2d		lda #$2d			lda 	#'-'
.9aba		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9abd		c8		iny				iny
.9abe		68		pla				pla
.9abf						_CI32NotNeg:
.9abf		20 cd 9a	jsr $9acd			jsr 	_CI32DivideConvert 			; recursive conversion
.9ac2		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ac4		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9ac7		7a		ply				ply
.9ac8		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9aca		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9acc		60		rts				rts
.9acd						_CI32DivideConvert:
.9acd		e8		inx				inx 								; write to next slot up
.9ace		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte 		 			; write the base out.
.9ad1		ca		dex				dex
.9ad2		20 fb 97	jsr $97fb			jsr 	Int32Divide 				; divide
.9ad5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9ad7		48		pha				pha
.9ad8		20 b8 97	jsr $97b8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9adb		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; is it zero ?
.9ade		f0 05		beq $9ae5			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9ae0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9ae2		20 cd 9a	jsr $9acd			jsr 	_CI32DivideConvert 			; and recusrively call.
.9ae5						_CI32NoRecurse:
.9ae5		68		pla				pla 								; remainder
.9ae6		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9ae8		90 02		bcc $9aec			bcc 	_CI32NotHex
.9aea		69 26		adc #$26			adc 	#6+32
.9aec						_CI32NotHex:
.9aec		69 30		adc #$30			adc 	#48
.9aee		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9af1		c8		iny				iny
.9af2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9af3						PrecedenceLevel:
>9af3		04					.byte	 4	; $00 <<
>9af4		02					.byte	 2	; $01 <=
>9af5		02					.byte	 2	; $02 <>
>9af6		00					.byte	 0	; $03 !!3
>9af7		00					.byte	 0	; $04 ><
>9af8		02					.byte	 2	; $05 >=
>9af9		04					.byte	 4	; $06 >>
>9afa		00					.byte	 0	; $07 !!7
>9afb		00					.byte	 0	; $08 !!8
>9afc		00					.byte	 0	; $09 !!9
>9afd		00					.byte	 0	; $0a !!10
>9afe		00					.byte	 0	; $0b !!11
>9aff		00					.byte	 0	; $0c !!12
>9b00		00					.byte	 0	; $0d !!13
>9b01		00					.byte	 0	; $0e !!14
>9b02		00					.byte	 0	; $0f !!15
>9b03		00					.byte	 0	; $10 @
>9b04		00					.byte	 0	; $11 !!17
>9b05		00					.byte	 0	; $12 !!18
>9b06		00					.byte	 0	; $13 [
>9b07		04					.byte	 4	; $14 \
>9b08		00					.byte	 0	; $15 ]
>9b09		01					.byte	 1	; $16 ^
>9b0a		00					.byte	 0	; $17 _
>9b0b		00					.byte	 0	; $18 `
>9b0c		00					.byte	 0	; $19 !!25
>9b0d		00					.byte	 0	; $1a !!26
>9b0e		00					.byte	 0	; $1b {
>9b0f		01					.byte	 1	; $1c |
>9b10		00					.byte	 0	; $1d }
>9b11		00					.byte	 0	; $1e ~
>9b12		00					.byte	 0	; $1f <7F>
>9b13		00					.byte	 0	; $20
>9b14		05					.byte	 5	; $21 !
>9b15		00					.byte	 0	; $22 "
>9b16		00					.byte	 0	; $23 #
>9b17		05					.byte	 5	; $24 $
>9b18		04					.byte	 4	; $25 %
>9b19		01					.byte	 1	; $26 &
>9b1a		00					.byte	 0	; $27 '
>9b1b		00					.byte	 0	; $28 (
>9b1c		00					.byte	 0	; $29 )
>9b1d		04					.byte	 4	; $2a *
>9b1e		03					.byte	 3	; $2b +
>9b1f		00					.byte	 0	; $2c ,
>9b20		03					.byte	 3	; $2d -
>9b21		00					.byte	 0	; $2e .
>9b22		04					.byte	 4	; $2f /
>9b23		00					.byte	 0	; $30 0
>9b24		00					.byte	 0	; $31 1
>9b25		00					.byte	 0	; $32 2
>9b26		00					.byte	 0	; $33 3
>9b27		00					.byte	 0	; $34 4
>9b28		00					.byte	 0	; $35 5
>9b29		00					.byte	 0	; $36 6
>9b2a		00					.byte	 0	; $37 7
>9b2b		00					.byte	 0	; $38 8
>9b2c		00					.byte	 0	; $39 9
>9b2d		00					.byte	 0	; $3a :
>9b2e		00					.byte	 0	; $3b ;
>9b2f		02					.byte	 2	; $3c <
>9b30		02					.byte	 2	; $3d =
>9b31		02					.byte	 2	; $3e >
>9b32		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b33						EvaluateExpressionAt0:
.9b33		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b35						EvaluateExpression:
.9b35		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b37						EvaluateExpressionAtPrecedence:
.9b37		48		pha				pha 								; save precedence level
.9b38		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b3b		68		pla				pla 								; restore precedence level.
.9b3c						_EXPRLoop:
.9b3c		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b3e		b1 30		lda ($30),y			lda 	(codePtr),y
.9b40		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b42		b0 25		bcs $9b69			bcs 	_EXPRExit
.9b44		da		phx				phx 								; read the operator precedence
.9b45		aa		tax				tax
.9b46		bd f3 9a	lda $9af3,x			lda 	PrecedenceLevel,x
.9b49		fa		plx				plx
.9b4a		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b4c		f0 1b		beq $9b69			beq 	_EXPRExit
.9b4e		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b50		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b52		c5 37		cmp $37				cmp 	zTemp0+1
.9b54		b0 13		bcs $9b69			bcs		_EXPRExit 					; if current >= operator exit
.9b56		48		pha				pha 								; save current precedence.
.9b57		b1 30		lda ($30),y			lda 	(codePtr),y
.9b59		c8		iny				iny
.9b5a		48		pha				pha
.9b5b		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b5d		e8		inx				inx 								; work out the right hand side.
.9b5e		20 37 9b	jsr $9b37			jsr 	EvaluateExpressionAtPrecedence
.9b61		ca		dex				dex
.9b62		68		pla				pla 								; get operator, call the code.
.9b63		20 6c 9b	jsr $9b6c			jsr 	_EXPRCaller
.9b66		68		pla				pla 								; restore precedence level
.9b67		80 d3		bra $9b3c			bra 	_EXPRLoop 					; and go round.
.9b69						_EXPRExit:
.9b69		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9b6b		60		rts				rts
.9b6c						_EXPRCaller:
.9b6c		da		phx				phx 								; save on stack, first thing is to restore it
.9b6d		0a		asl a				asl 	a 							; double so can use vectors into X
.9b6e		aa		tax				tax
.9b6f		7c c2 91	jmp ($91c2,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9b72						FloatingPointAdd:
.9b72		20 e8 9c	jsr $9ce8			jsr 	FloatPrepare 				; prepare for floats
.9b75		80 09		bra $9b80			bra 	FloatAdd
.9b77						FloatingPointSub:
.9b77		20 e8 9c	jsr $9ce8			jsr 	FloatPrepare 				; prepare for floats
.9b7a						FloatSubtract:
.9b7a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9b7c		49 80		eor #$80			eor 	#$80
.9b7e		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9b80						FloatAdd:
.9b80		48		pha				pha
.9b81		5a		phy				phy
.9b82		20 f7 9c	jsr $9cf7			jsr 	NSNormalise 				; normalise S[X]
.9b85		f0 51		beq $9bd8			beq 	_FAReturn1
.9b87		e8		inx				inx 								; normalise S[X+1]
.9b88		20 f7 9c	jsr $9cf7			jsr 	NSNormalise
.9b8b		ca		dex				dex
.9b8c		c9 00		cmp #$00			cmp 	#0
.9b8e		f0 60		beq $9bf0			beq 	_FAExit 					; if so, just return A
.9b90		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b92		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9b94		f0 18		beq $9bae			beq 	_FAExponentsEqual
.9b96		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9b98		a8		tay				tay
.9b99		38		sec				sec 								; do a signed comparison of the exponents.
.9b9a		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9b9c		50 02		bvc $9ba0			bvc 	_FANoSignedChange
.9b9e		49 80		eor #$80			eor 	#$80
.9ba0						_FANoSignedChange:
.9ba0		29 80		and #$80			and 	#$80
.9ba2		10 02		bpl $9ba6			bpl 	_FAHaveMax
.9ba4		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9ba6						_FAHaveMax:
.9ba6		20 f3 9b	jsr $9bf3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9ba9		e8		inx				inx
.9baa		20 f3 9b	jsr $9bf3			jsr 	_FAShiftToExponent
.9bad		ca		dex				dex
.9bae						_FAExponentsEqual:
.9bae		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9bb0		55 51		eor $51,x			eor 	NSStatus+1,x
.9bb2		30 0e		bmi $9bc2			bmi 	_FADifferentSigns
.9bb4		20 2b 99	jsr $992b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9bb7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9bb9		10 35		bpl $9bf0			bpl 	_FAExit 					; if no, we are done.
.9bbb		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9bbe		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9bc0		80 2e		bra $9bf0			bra 	_FAExit
.9bc2						_FADifferentSigns:
.9bc2		20 45 99	jsr $9945			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9bc5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9bc7		10 06		bpl $9bcf			bpl 	_FACheckZero 				; if no, check for -0
.9bc9		20 60 a6	jsr $a660			jsr 	NSMNegate 					; netate result
.9bcc		20 67 a6	jsr $a667			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9bcf						_FACheckZero:
.9bcf		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero	 				; check for -0
.9bd2		d0 1c		bne $9bf0			bne 	_FAExit
.9bd4		74 50		stz $50,x			stz 	NSStatus,x
.9bd6		80 18		bra $9bf0			bra 	_FAExit
.9bd8						_FAReturn1:
.9bd8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9bda		95 58		sta $58,x			sta 	NSMantissa0,x
.9bdc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bde		95 60		sta $60,x			sta 	NSMantissa1,x
.9be0		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9be2		95 68		sta $68,x			sta 	NSMantissa2,x
.9be4		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9be6		95 70		sta $70,x			sta 	NSMantissa3,x
.9be8		b5 79		lda $79,x			lda 	NSExponent+1,x
.9bea		95 78		sta $78,x			sta 	NSExponent,x
.9bec		b5 51		lda $51,x			lda 	NSStatus+1,x
.9bee		95 50		sta $50,x			sta 	NSStatus,x
.9bf0						_FAExit:
.9bf0		7a		ply				ply
.9bf1		68		pla				pla
.9bf2		60		rts				rts
.9bf3						_FAShiftToExponent:
.9bf3						_FAShiftToExponent2:
.9bf3		98		tya				tya 								; compare Y to exponent
.9bf4		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9bf6		f0 07		beq $9bff			beq 	_FASEExit 					; exit if so.
.9bf8		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight	 			; shift the mantissa right
.9bfb		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9bfd		80 f4		bra $9bf3			bra 	_FAShiftToExponent2
.9bff						_FASEExit:
.9bff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9c00						CompareFloat:
.9c00		20 7a 9b	jsr $9b7a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9c03		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9c05		29 f8		and #$f8			and 	#$F8
.9c07		15 68		ora $68,x			ora 	NSMantissa2,x
.9c09		15 70		ora $70,x			ora 	NSMantissa3,x
.9c0b		f0 08		beq $9c15			beq 	_FCExit 					; zero, so approximately identical
.9c0d		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9c0f		34 50		bit $50,x			bit 	NSStatus,x
.9c11		10 02		bpl $9c15			bpl 	_FCExit
.9c13						_FCNegative:
.9c13		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9c15						_FCExit:
.9c15		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9c16						FDivideCommand:
.9c16		fa		plx				plx	 								; restore stack position
.9c17		20 e8 9c	jsr $9ce8			jsr 	FloatPrepare 				; prepare for floats
.9c1a						FloatDivide:
.9c1a		48		pha				pha
.9c1b		e8		inx				inx
.9c1c		20 f7 9c	jsr $9cf7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c1f		ca		dex				dex
.9c20		c9 00		cmp #$00			cmp 	#0
.9c22		f0 1d		beq $9c41			beq 	_FDZero
.9c24		20 f7 9c	jsr $9cf7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c27		f0 16		beq $9c3f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c29		20 1c 98	jsr $981c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9c2c		20 b8 97	jsr $97b8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9c2f		20 f7 9c	jsr $9cf7			jsr		NSNormalise 				; renormalise
.9c32		20 ac 98	jsr $98ac			jsr 	CalculateSign 				; calculate result sign
.9c35		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c37		38		sec				sec
.9c38		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c3a		38		sec				sec
.9c3b		e9 1e		sbc #$1e			sbc 	#30
.9c3d		95 78		sta $78,x			sta 	NSExponent,x
.9c3f						_FDExit:
.9c3f		68		pla				pla
.9c40		60		rts				rts
.9c41						_FDZero:
.9c41		a9 03		lda #$03		lda	#3
.9c43		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c46						FloatFractionalPart:
.9c46		5a		phy				phy
.9c47		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c49		29 7f		and #$7f			and 	#$7F
.9c4b		95 50		sta $50,x			sta 	NSStatus,x
.9c4d		20 f7 9c	jsr $9cf7			jsr 	NSNormalise
.9c50		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c52		38		sec				sec
.9c53		e9 e0		sbc #$e0			sbc 	#$E0
.9c55		90 29		bcc $9c80			bcc 	_FFPExit 					; already fractional
.9c57		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c59		b0 22		bcs $9c7d			bcs 	_FFPZero
.9c5b		a8		tay				tay 								; put count to do in Y
.9c5c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9c5e		20 82 9c	jsr $9c82			jsr 	_FFPPartial
.9c61		95 70		sta $70,x			sta 	NSMantissa3,x
.9c63		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c65		20 82 9c	jsr $9c82			jsr 	_FFPPartial
.9c68		95 68		sta $68,x			sta 	NSMantissa2,x
.9c6a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c6c		20 82 9c	jsr $9c82			jsr 	_FFPPartial
.9c6f		95 60		sta $60,x			sta 	NSMantissa1,x
.9c71		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c73		20 82 9c	jsr $9c82			jsr 	_FFPPartial
.9c76		95 58		sta $58,x			sta 	NSMantissa0,x
.9c78		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; zeroed check.
.9c7b		d0 03		bne $9c80			bne 	_FFPExit
.9c7d						_FFPZero:
.9c7d		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.9c80						_FFPExit:
.9c80		7a		ply				ply
.9c81		60		rts				rts
.9c82						_FFPPartial:
.9c82		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9c84		f0 17		beq $9c9d			beq 	_FFFPPExit
.9c86		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9c88		b0 0c		bcs $9c96			bcs 	_FFFPPWholeByte
.9c8a		5a		phy				phy
.9c8b						_FFFPPLeft:
.9c8b		0a		asl a				asl 	a
.9c8c		88		dey				dey
.9c8d		d0 fc		bne $9c8b			bne 	_FFFPPLeft
.9c8f		7a		ply				ply
.9c90						_FFFPPRight:
.9c90		4a		lsr a				lsr 	a
.9c91		88		dey				dey
.9c92		d0 fc		bne $9c90			bne 	_FFFPPRight
.9c94		80 07		bra $9c9d			bra 	_FFFPPExit
.9c96						_FFFPPWholeByte:
.9c96		98		tya				tya 								; subtract 8 from count
.9c97		38		sec				sec
.9c98		e9 08		sbc #$08			sbc 	#8
.9c9a		a8		tay				tay
.9c9b		a9 00		lda #$00			lda 	#0 							; and clear all
.9c9d						_FFFPPExit:
.9c9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c9e						FloatIntegerPart:
.9c9e		48		pha				pha
.9c9f		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9ca1		f0 1d		beq $9cc0			beq 	_FIPExit 					; if so do nothing
.9ca3		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; is it zero ?
.9ca6		f0 15		beq $9cbd			beq 	_FIPZero 					; if so return zero.
.9ca8		20 f7 9c	jsr $9cf7			jsr 	NSNormalise 				; normalise
.9cab		f0 10		beq $9cbd			beq 	_FIPZero 					; normalised to zero, exit zero
.9cad						_FIPShift:
.9cad		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9caf		10 07		bpl $9cb8			bpl 	_FIPCheckZero
.9cb1		20 b7 a6	jsr $a6b7			jsr 	NSMShiftRight 				; shift mantissa right
.9cb4		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9cb6		80 f5		bra $9cad			bra 	_FIPShift
.9cb8						_FIPCheckZero:
.9cb8		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; avoid -0 problem
.9cbb		d0 03		bne $9cc0			bne 	_FIPExit 					; set to zero if mantissa zero.
.9cbd						_FIPZero:
.9cbd		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.9cc0						_FIPExit:
.9cc0		68		pla				pla
.9cc1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9cc2						FloatingPointMultiply:
.9cc2		20 e8 9c	jsr $9ce8			jsr 	FloatPrepare 				; prepare for floats
.9cc5						FloatMultiply:
.9cc5		48		pha				pha
.9cc6		20 f7 9c	jsr $9cf7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9cc9		f0 18		beq $9ce3			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9ccb		e8		inx				inx
.9ccc		20 f7 9c	jsr $9cf7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9ccf		ca		dex				dex
.9cd0		c9 00		cmp #$00			cmp 	#0
.9cd2		f0 0c		beq $9ce0			beq 	_FDSetZero
.9cd4		20 6e 98	jsr $986e			jsr 	MultiplyShort 				; calculate the result.
.9cd7		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9cd9		18		clc				clc
.9cda		75 79		adc $79,x			adc 	NSExponent+1,x
.9cdc		95 78		sta $78,x			sta 	NSExponent,x
.9cde		80 03		bra $9ce3			bra 	_FDExit
.9ce0						_FDSetZero:
.9ce0		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; return 0
.9ce3						_FDExit:
.9ce3		20 f7 9c	jsr $9cf7			jsr 	NSNormalise 				; normalise the result
.9ce6		68		pla				pla
.9ce7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9ce8						FloatPrepare:
.9ce8		20 f3 9d	jsr $9df3			jsr 	DereferenceTopTwo 			; dereference the top two values
.9ceb		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9ced		15 51		ora $51,x			ora 	NSStatus+1,x
.9cef		29 10		and #$10			and 	#NSBIsString
.9cf1		d0 01		bne $9cf4			bne 	_FDType
.9cf3		60		rts				rts
.9cf4						_FDType:
.9cf4		4c 26 a8	jmp $a826			jmp 	TypeError
.9cf7						NSNormalise:
.9cf7		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9cf9		29 80		and #$80			and 	#$80
.9cfb		09 08		ora #$08			ora 	#NSTFloat
.9cfd		95 50		sta $50,x			sta 	NSStatus,x
.9cff		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; if zero exit
.9d02		d0 07		bne $9d0b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9d04		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9d06		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9d08		a9 00		lda #$00			lda 	#0 							; set Z flag
.9d0a		60		rts				rts
.9d0b						_NSNormaliseOptimise:
.9d0b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9d0d		d0 19		bne $9d28			bne 	_NSNormaliseLoop
.9d0f		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9d11		30 15		bmi $9d28			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9d13		95 70		sta $70,x			sta 	NSMantissa3,x
.9d15		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d17		95 68		sta $68,x			sta 	NSMantissa2,x
.9d19		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d1b		95 60		sta $60,x			sta 	NSMantissa1,x
.9d1d		74 58		stz $58,x			stz 	NSMantissa0,x
.9d1f		b5 78		lda $78,x			lda 	NSExponent,x
.9d21		38		sec				sec
.9d22		e9 08		sbc #$08			sbc 	#8
.9d24		95 78		sta $78,x			sta 	NSExponent,x
.9d26		80 e3		bra $9d0b			bra 	_NSNormaliseOptimise
.9d28						_NSNormaliseLoop:
.9d28		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9d2a		70 07		bvs $9d33			bvs 	_NSNExit 					; exit if so with Z flag clear
.9d2c		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; shift mantissa left
.9d2f		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9d31		80 f5		bra $9d28			bra 	_NSNormaliseLoop
.9d33						_NSNExit:
.9d33		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d35		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d36						AssignNumber:
.9d36		5a		phy				phy
.9d37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d39		85 36		sta $36				sta 	zTemp0
.9d3b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d3d		85 37		sta $37				sta 	zTemp0+1
.9d3f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d41		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d43		95 50		sta $50,x			sta 	NSStatus,x
.9d45		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d47		c9 08		cmp #$08			cmp 	#NSTFloat
.9d49		f0 24		beq $9d6f			beq 	_ANFloat
.9d4b		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9d4d		f0 03		beq $9d52			beq		_ANNotFloat
.9d4f		4c 21 a8	jmp $a821			jmp 	RangeError					; if it is, report an error.
.9d52						_ANNotFloat:
.9d52		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d54		29 03		and #$03			and 	#3
.9d56		d0 05		bne $9d5d			bne 	_ANByteWord
.9d58		20 7a 9d	jsr $9d7a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d5b		80 1b		bra $9d78			bra 	_ANExit
.9d5d						_ANByteWord:
.9d5d		48		pha				pha 								; save count
.9d5e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9d60		92 36		sta ($36)			sta 	(zTemp0)
.9d62		68		pla				pla
.9d63		c9 01		cmp #$01			cmp	 	#1
.9d65		f0 11		beq $9d78			beq 	_ANExit
.9d67		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9d69		a0 01		ldy #$01			ldy 	#1
.9d6b		91 36		sta ($36),y			sta 	(zTemp0),y
.9d6d		80 09		bra $9d78			bra 	_ANExit
.9d6f						_ANFloat:
.9d6f		20 7a 9d	jsr $9d7a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d72		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d74		a0 04		ldy #$04			ldy 	#4
.9d76		91 36		sta ($36),y			sta 	(zTemp0),y
.9d78						_ANExit:
.9d78		7a		ply				ply
.9d79		60		rts				rts
.9d7a						_ANCopy4PackSign:
.9d7a		a0 03		ldy #$03			ldy 	#3
.9d7c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9d7e		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d80		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9d82		91 36		sta ($36),y			sta 	(zTemp0),y
.9d84		88		dey				dey
.9d85		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d87		91 36		sta ($36),y			sta 	(zTemp0),y
.9d89		88		dey				dey
.9d8a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d8c		91 36		sta ($36),y			sta 	(zTemp0),y
.9d8e		88		dey				dey
.9d8f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d91		91 36		sta ($36),y			sta 	(zTemp0),y
.9d93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d94						AssignString:
.9d94		5a		phy				phy
.9d95		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d97		85 38		sta $38				sta 	zTemp1
.9d99		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d9b		85 39		sta $39				sta 	zTemp1+1
.9d9d		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d9f		85 36		sta $36				sta 	zTemp0
.9da1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9da3		85 37		sta $37				sta 	zTemp0+1
.9da5		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9da7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9da9		f0 23		beq $9dce			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dab		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dac		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dae		e9 02		sbc #$02			sbc 	#2
.9db0		85 3c		sta $3c				sta 	zsTemp
.9db2		a0 01		ldy #$01			ldy 	#1
.9db4		b1 36		lda ($36),y			lda 	(zTemp0),y
.9db6		e9 00		sbc #$00			sbc 	#0
.9db8		85 3d		sta $3d				sta 	zsTemp+1
.9dba		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dbc						_ASGetLength:
.9dbc		c8		iny				iny
.9dbd		b1 38		lda ($38),y			lda 	(zTemp1),y
.9dbf		d0 fb		bne $9dbc			bne 	_ASGetLength
.9dc1		98		tya				tya 								; is this length <= current length
.9dc2		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9dc4		90 1e		bcc $9de4			bcc 	_ASCopyString
.9dc6		f0 1c		beq $9de4			beq 	_ASCopyString
.9dc8		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9dca		a0 01		ldy #$01			ldy 	#1
.9dcc		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dce						_ASNewStringRequired:
.9dce		e8		inx				inx 								; concrete the new string.
.9dcf		20 f0 b7	jsr $b7f0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9dd2		ca		dex				dex
.9dd3		18		clc				clc
.9dd4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9dd6		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9dd8		92 36		sta ($36)			sta 	(zTemp0)
.9dda		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ddc		69 00		adc #$00			adc 	#0
.9dde		a0 01		ldy #$01			ldy 	#1
.9de0		91 36		sta ($36),y			sta 	(zTemp0),y
.9de2		80 0d		bra $9df1			bra 	_ASExit
.9de4						_ASCopyString:
.9de4		a0 00		ldy #$00			ldy 	#0
.9de6						_ASCopyLoop:
.9de6		b1 38		lda ($38),y			lda 	(zTemp1),y
.9de8		c8		iny				iny
.9de9		c8		iny				iny
.9dea		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dec		88		dey				dey
.9ded		c9 00		cmp #$00			cmp 	#0
.9def		d0 f5		bne $9de6			bne 	_ASCopyLoop
.9df1						_ASExit:
.9df1		7a		ply				ply
.9df2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9df3						DereferenceTopTwo:
.9df3		e8		inx				inx
.9df4		20 f8 9d	jsr $9df8			jsr 	Dereference 				; deref x+1
.9df7		ca		dex				dex  								; falls through to deref x
.9df8						Dereference:
.9df8		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9dfa		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9dfc		f0 48		beq $9e46			beq 	_DRFExit 					; not a reference, so exit.
.9dfe		5a		phy				phy
.9dff		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e01		85 36		sta $36				sta 	zTemp0
.9e03		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e05		85 37		sta $37				sta 	zTemp0+1
.9e07		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9e09		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e0b		95 58		sta $58,x			sta 	NSMantissa0,x
.9e0d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9e0f		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e11		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e13		f0 0e		beq $9e23			beq 	_DRFDereferenceTwo
.9e15		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e17		f0 2f		beq $9e48			beq 	_DRFFull
.9e19		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e1b		29 03		and #$03			and 	#3
.9e1d		f0 29		beq $9e48			beq 	_DRFFull 					; the whole word
.9e1f		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e21		f0 06		beq $9e29			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e23						_DRFDereferenceTwo:
.9e23		a0 01		ldy #$01			ldy 	#1
.9e25		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e27		95 60		sta $60,x			sta 	NSMantissa1,x
.9e29						_DRFClear23:
.9e29		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e2b		74 70		stz $70,x			stz 	NSMantissa3,x
.9e2d		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9e2f		29 18		and #$18			and 	#NSBTypeMask
.9e31		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9e33		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e35		d0 0e		bne $9e45			bne 	_DRFNotString
.9e37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e39		15 60		ora $60,x			ora 	NSMantissa1,x
.9e3b		d0 08		bne $9e45			bne 	_DRFNotString
.9e3d		a9 47		lda #$47			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e3f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e41		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e43		95 60		sta $60,x			sta 	NSMantissa1,x
.9e45						_DRFNotString
.9e45		7a		ply				ply 								; restore Y and exit
.9e46						_DRFExit:
.9e46		60		rts				rts
.9e47						_DRFNullString:
>9e47		00						.byte 	0
.9e48						_DRFFull:
.9e48		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e4a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e4c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e4e		c8		iny				iny
.9e4f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e51		95 68		sta $68,x			sta 	NSMantissa2,x
.9e53		c8		iny				iny
.9e54		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e56		95 70		sta $70,x			sta 	NSMantissa3,x
.9e58		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9e5a		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9e5c		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e5e		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9e60		f0 05		beq $9e67			beq 	_DRFNoExponent
.9e62		c8		iny				iny 								; if not, read the exponent as well.
.9e63		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e65		95 78		sta $78,x			sta 	NSExponent,x
.9e67						_DRFNoExponent:
.9e67		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e69		10 0a		bpl $9e75			bpl 	_DRFExit2 					; if not, then exit.
.9e6b		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e6d		95 70		sta $70,x			sta 	NSMantissa3,x
.9e6f		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9e71		09 80		ora #$80			ora 	#NSBIsNegative
.9e73		95 50		sta $50,x			sta 	NSStatus,x
.9e75						_DRFExit2:
.9e75		7a		ply				ply
.9e76		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9e77						EncodeNumberStart:
.9e77		38		sec				sec
.9e78		80 01		bra $9e7b			bra 	EncodeNumberContinue+1
.9e7a						EncodeNumberContinue:
.9e7a		18		clc				clc
.9e7b						EncodeNumber:
.9e7b		08		php				php 								; save reset flag.
.9e7c		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9e7e		f0 12		beq $9e92			beq 	_ENIsOkay
.9e80		c9 30		cmp #$30			cmp 	#"0"
.9e82		90 04		bcc $9e88			bcc 	_ENBadNumber
.9e84		c9 3a		cmp #$3a			cmp 	#"9"+1
.9e86		90 0a		bcc $9e92			bcc 	_ENIsOkay
.9e88						_ENBadNumber:
.9e88		28		plp				plp 								; throw saved reset
.9e89		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9e8c		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e8e		f0 7b		beq $9f0b			beq 	_ENConstructFinal
.9e90						_ENFail:
.9e90		18		clc				clc 								; not allowed
.9e91		60		rts				rts
.9e92						_ENIsOkay:
.9e92		28		plp				plp 								; are we restarting
.9e93		90 15		bcc $9eaa			bcc 	_ENNoRestart
.9e95						_ENStartEncode:
.9e95		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9e97		f0 0c		beq $9ea5			beq 	_ENFirstDP
.9e99		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9e9b		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte 					; in single byte mode.
.9e9e		a9 01		lda #$01			lda 	#ESTA_Low
.9ea0						_ENExitChange:
.9ea0		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9ea3		38		sec				sec
.9ea4		60		rts				rts
.9ea5						_ENFirstDP:
.9ea5		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; clear integer part
.9ea8		80 3c		bra $9ee6			bra 	_ESTASwitchFloat			; go straight to float and exi
.9eaa						_ENNoRestart:
.9eaa		48		pha				pha 								; save digit or DP on stack.
.9eab		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9eae		c9 01		cmp #$01			cmp 	#ESTA_Low
.9eb0		f0 09		beq $9ebb			beq  	_ESTALowState
.9eb2		c9 02		cmp #$02			cmp 	#ESTA_High
.9eb4		f0 26		beq $9edc			beq 	_ESTAHighState
.9eb6		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eb8		f0 38		beq $9ef2			beq 	_ESTADecimalState
>9eba		db						.byte 	$DB 						; causes a break in the emulator
.9ebb						_ESTALowState:
.9ebb		68		pla				pla 								; get value back
.9ebc		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ebe		f0 26		beq $9ee6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ec0		29 0f		and #$0f			and 	#15 						; make digit
.9ec2		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9ec5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ec7		0a		asl a				asl 	a
.9ec8		0a		asl a				asl 	a
.9ec9		75 58		adc $58,x			adc 	NSMantissa0,x
.9ecb		0a		asl a				asl 	a
.9ecc		6d 06 04	adc $0406			adc 	digitTemp
.9ecf		95 58		sta $58,x			sta 	NSMantissa0,x
.9ed1		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9ed3		90 05		bcc $9eda			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ed5		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ed7		8d 05 04	sta $0405			sta 	encodeState
.9eda						_ESTANoSwitch:
.9eda		38		sec				sec
.9edb		60		rts				rts
.9edc						_ESTAHighState:
.9edc		68		pla				pla 								; get value back
.9edd		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9edf		f0 05		beq $9ee6			beq 	_ESTASwitchFloat
.9ee1		20 3f 9f	jsr $9f3f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9ee4		38		sec				sec
.9ee5		60		rts				rts
.9ee6						_ESTASwitchFloat:
.9ee6		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9ee9		e8		inx				inx 								; zero the decimal additive.
.9eea		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.9eed		ca		dex				dex
.9eee		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9ef0		80 ae		bra $9ea0			bra 	_ENExitChange
.9ef2						_ESTADecimalState:
.9ef2		68		pla				pla 								; digit.
.9ef3		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ef5		f0 99		beq $9e90			beq 	_ENFail
.9ef7		e8		inx				inx 								; put digit into fractional part of X+1
.9ef8		20 3f 9f	jsr $9f3f			jsr 	ESTAShiftDigitIntoMantissa
.9efb		ca		dex				dex
.9efc		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9eff		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9f02		c9 0b		cmp #$0b			cmp 	#11
.9f04		f0 02		beq $9f08			beq 	_ESTADSFail
.9f06		38		sec				sec
.9f07		60		rts				rts
.9f08						_ESTADSFail:
.9f08		4c 21 a8	jmp $a821			jmp 	RangeError
.9f0b						_ENConstructFinal:
.9f0b		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9f0e		f0 2d		beq $9f3d			beq 	_ENCFExit 					; no decimals
.9f10		5a		phy				phy
.9f11		0a		asl a				asl 	a 							; x 4 and CLC
.9f12		0a		asl a				asl 	a
.9f13		6d 07 04	adc $0407			adc 	decimalCount
.9f16		a8		tay				tay
.9f17		b9 e0 a7	lda $a7e0,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f1a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9f1c		b9 e1 a7	lda $a7e1,y			lda 	DecimalScalarTable-5+1,y
.9f1f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f21		b9 e2 a7	lda $a7e2,y			lda 	DecimalScalarTable-5+2,y
.9f24		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f26		b9 e3 a7	lda $a7e3,y			lda 	DecimalScalarTable-5+3,y
.9f29		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f2b		b9 e4 a7	lda $a7e4,y			lda 	DecimalScalarTable-5+4,y
.9f2e		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f30		a9 08		lda #$08			lda 	#NSTFloat
.9f32		95 52		sta $52,x			sta 	NSStatus+2,x
.9f34		7a		ply				ply
.9f35		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f36		20 c5 9c	jsr $9cc5			jsr 	FloatMultiply
.9f39		ca		dex				dex
.9f3a		20 80 9b	jsr $9b80			jsr 	FloatAdd 					; add to integer part.
.9f3d						_ENCFExit:
.9f3d		18		clc				clc 								; reject the digit.
.9f3e		60		rts				rts
.9f3f						ESTAShiftDigitIntoMantissa:
.9f3f		29 0f		and #$0f			and 	#15 						; save digit
.9f41		48		pha				pha
.9f42		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f44		48		pha				pha
.9f45		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f47		48		pha				pha
.9f48		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f4a		48		pha				pha
.9f4b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f4d		48		pha				pha
.9f4e		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 2
.9f51		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 4
.9f54		18		clc				clc 								; pop mantissa and add
.9f55		68		pla				pla
.9f56		75 58		adc $58,x			adc 	NSMantissa0,x
.9f58		95 58		sta $58,x			sta 	NSMantissa0,x
.9f5a		68		pla				pla
.9f5b		75 60		adc $60,x			adc 	NSMantissa1,x
.9f5d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f5f		68		pla				pla
.9f60		75 68		adc $68,x			adc 	NSMantissa2,x
.9f62		95 68		sta $68,x			sta 	NSMantissa2,x
.9f64		68		pla				pla
.9f65		75 70		adc $70,x			adc 	NSMantissa3,x
.9f67		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9f69		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 10
.9f6c		68		pla				pla 								; add digit
.9f6d		18		clc				clc
.9f6e		75 58		adc $58,x			adc 	NSMantissa0,x
.9f70		95 58		sta $58,x			sta 	NSMantissa0,x
.9f72		90 0a		bcc $9f7e			bcc 	_ESTASDExit
.9f74		f6 60		inc $60,x			inc 	NSMantissa1,x
.9f76		d0 06		bne $9f7e			bne 	_ESTASDExit
.9f78		f6 68		inc $68,x			inc 	NSMantissa2,x
.9f7a		d0 02		bne $9f7e			bne 	_ESTASDExit
.9f7c		f6 70		inc $70,x			inc 	NSMantissa3,x
.9f7e						_ESTASDExit:
.9f7e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9f7f						EvaluateTerm:
.9f7f		b1 30		lda ($30),y			lda 	(codePtr),y
.9f81		30 18		bmi $9f9b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9f83		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9f85		b0 6c		bcs $9ff3			bcs 	_ETVariable
.9f87		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9f89		90 6b		bcc $9ff6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9f8b		c9 3a		cmp #$3a			cmp 	#'9'+1
.9f8d		b0 67		bcs $9ff6			bcs 	_ETPuncUnary
.9f8f		20 77 9e	jsr $9e77			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9f92						_ETNumber:
.9f92		c8		iny				iny 								; keep encoding until we have the numbers
.9f93		b1 30		lda ($30),y			lda 	(codePtr),y
.9f95		20 7a 9e	jsr $9e7a			jsr 	EncodeNumberContinue
.9f98		b0 f8		bcs $9f92			bcs 	_ETNumber 					; go back if accepted.
.9f9a		60		rts				rts
.9f9b						_ETCheckUnary:
.9f9b		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9f9d		f0 3f		beq $9fde			beq 	_ETString
.9f9f		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fa1		f0 12		beq $9fb5			beq 	_ETHexConstant
.9fa3		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9fa5		90 0b		bcc $9fb2			bcc 	_ETSyntaxError
.9fa7		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.9fa9		b0 07		bcs $9fb2			bcs 	_ETSyntaxError
.9fab		da		phx				phx 								; push X on the stack
.9fac		0a		asl a				asl 	a 							; put vector x 2 into X
.9fad		aa		tax				tax
.9fae		c8		iny				iny 								; consume unary function token
.9faf		7c 42 92	jmp ($9242,x)			jmp 	(VectorSet0,x) 				; and do it.
.9fb2						_ETSyntaxError:
.9fb2		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.9fb5						_ETHexConstant:
.9fb5		c8		iny				iny 								; skip #
.9fb6		c8		iny				iny 								; skip count
.9fb7		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; clear result
.9fba						_ETHLoop:
.9fba		b1 30		lda ($30),y			lda 	(codePtr),y
.9fbc		c8		iny				iny 								; and consume
.9fbd		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9fbf		f0 1c		beq $9fdd			beq 	_ETHExit
.9fc1		48		pha				pha 								; save on stack.
.9fc2		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 2
.9fc5		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 4
.9fc8		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 8
.9fcb		20 ad a6	jsr $a6ad			jsr 	NSMShiftLeft 				; x 16
.9fce		68		pla				pla 								; ASCII
.9fcf		c9 41		cmp #$41			cmp 	#'A'
.9fd1		90 02		bcc $9fd5			bcc 	_ETHNotChar
.9fd3		e9 07		sbc #$07			sbc 	#7
.9fd5						_ETHNotChar:
.9fd5		29 0f		and #$0f			and 	#15 						; digit now
.9fd7		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9fd9		95 58		sta $58,x			sta 	NSMantissa0,x
.9fdb		80 dd		bra $9fba			bra 	_ETHLoop 					; go round.
.9fdd						_ETHExit:
.9fdd		60		rts				rts
.9fde						_ETString:
.9fde		c8		iny				iny 								; look at length
.9fdf		b1 30		lda ($30),y			lda 	(codePtr),y
.9fe1		48		pha				pha
.9fe2		c8		iny				iny 								; first character
.9fe3		20 18 ae	jsr $ae18			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9fe6		68		pla				pla 								; restore count and save
.9fe7		85 36		sta $36				sta 	zTemp0
.9fe9		98		tya				tya 								; add length to Y to skip it.
.9fea		18		clc				clc
.9feb		65 36		adc $36				adc 	zTemp0
.9fed		a8		tay				tay
.9fee		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9ff0		95 50		sta $50,x			sta 	NSStatus,x
.9ff2		60		rts				rts
.9ff3						_ETVariable:
.9ff3		4c 48 a0	jmp $a048			jmp 	VariableHandler
.9ff6						_ETPuncUnary:
.9ff6		c8		iny				iny 								; consume the unary character
.9ff7		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9ff9		f0 2b		beq $a026			beq 	_ETUnaryNegate
.9ffb		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.9ffd		f0 36		beq $a035			beq 	_ETDereference
.9fff		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a001		f0 3e		beq $a041			beq 	_ETParenthesis
.a003		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a005		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a007		f0 06		beq $a00f			beq 	_ETIndirection
.a009		e6 36		inc $36				inc 	zTemp0
.a00b		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a00d		d0 a3		bne $9fb2			bne 	_ETSyntaxError
.a00f						_ETIndirection:
.a00f		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a011		1a		inc a				inc 	a
.a012		48		pha				pha
.a013		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm				; evaluate the term
.a016		20 f8 9d	jsr $9df8			jsr 	Dereference 				; dereference it.
.a019		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a01b		d0 06		bne $a023			bne 	_ETTypeMismatch
.a01d		68		pla				pla 								; indirection 1-2
.a01e		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a020		95 50		sta $50,x			sta 	NSStatus,x
.a022		60		rts				rts
.a023						_ETTypeMismatch:
.a023		4c 26 a8	jmp $a826			jmp 	TypeError
.a026						_ETUnaryNegate:
.a026		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm				; evaluate the term
.a029		20 f8 9d	jsr $9df8			jsr 	Dereference 				; dereference it.
.a02c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a02e		29 10		and #$10			and 	#NSTString
.a030		d0 f1		bne $a023			bne 	_ETTypeMismatch
.a032		4c 60 a6	jmp $a660			jmp 	NSMNegate  					; just toggles the sign bit.
.a035						_ETDereference:
.a035		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm				; evaluate the term
.a038		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a03a		29 20		and #$20			and 	#NSBIsReference
.a03c		f0 e5		beq $a023			beq 	_ETTypeMismatch
.a03e		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a040		60		rts				rts
.a041						_ETParenthesis:
.a041		20 35 9b	jsr $9b35			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a044		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; check for )
.a047		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a048						VariableHandler:
.a048		b1 30		lda ($30),y			lda 	(codePtr),y
.a04a		18		clc				clc
.a04b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a04d		85 37		sta $37				sta 	zTemp0+1
.a04f		c8		iny				iny
.a050		b1 30		lda ($30),y			lda 	(codePtr),y
.a052		85 36		sta $36				sta 	zTemp0
.a054		c8		iny				iny
.a055		18		clc				clc									; copy variable address+3 to mantissa
.a056		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a058		95 58		sta $58,x			sta 	NSMantissa0,x
.a05a		a5 37		lda $37				lda 	zTemp0+1
.a05c		69 00		adc #$00			adc 	#0
.a05e		95 60		sta $60,x			sta 	NSMantissa1,x
.a060		74 68		stz $68,x			stz 	NSMantissa2,x
.a062		74 70		stz $70,x			stz 	NSMantissa3,x
.a064		74 78		stz $78,x			stz 	NSExponent,x
.a066		5a		phy				phy
.a067		a0 02		ldy #$02			ldy 	#2 							; read type
.a069		b1 36		lda ($36),y			lda 	(zTemp0),y
.a06b		7a		ply				ply
.a06c		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a06e		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a070		95 50		sta $50,x			sta 	NSStatus,x
.a072		29 04		and #$04			and 	#NSBIsArray
.a074		d0 01		bne $a077			bne 	_VHArray
.a076		60		rts				rts
.a077						_VHArray:
.a077		e8		inx				inx
.a078		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a07b		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a07d		95 51		sta $51,x			sta 	NSStatus+1,x
.a07f		b1 30		lda ($30),y			lda 	(codePtr),y
.a081		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a083		d0 06		bne $a08b			bne 	_VHNoSecondIndex
.a085		c8		iny				iny 								; skip the comma
.a086		e8		inx				inx
.a087		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a08a		ca		dex				dex
.a08b						_VHNoSecondIndex:
.a08b		ca		dex				dex 								; set X back.
.a08c		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; and check the right bracket.
.a08f		5a		phy				phy 								; save position
.a090		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a092		85 3e		sta $3e				sta 	zaTemp
.a094		b5 60		lda $60,x			lda 	NSMantissa1,x
.a096		85 3f		sta $3f				sta 	zaTemp+1
.a098		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a09a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a09c		f0 5d		beq $a0fb			beq 	_VHBadArray
.a09e		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0a0		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0a2		f0 02		beq $a0a6			beq 	_VHHas2Mask
.a0a4		a9 ff		lda #$ff			lda 	#$FF
.a0a6						_VHHas2Mask:
.a0a6		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a0a8		f0 4c		beq $a0f6			beq 	_VHBadIndex
.a0aa		0a		asl a				asl 	a 							; carry will be set if a second index
.a0ab		90 08		bcc $a0b5			bcc 	_VHCheckFirstIndex
.a0ad		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a0af		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0b1		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a0b3		90 41		bcc $a0f6			bcc 	_VHBadIndex
.a0b5						_VHCheckFirstIndex:
.a0b5		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a0b7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0b9		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a0bb		90 39		bcc $a0f6			bcc 	_VHBadIndex
.a0bd		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a0bf		64 37		stz $37				stz 	zTemp0+1
.a0c1		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a0c3		30 0e		bmi $a0d3			bmi 	_VHNoMultiply
.a0c5		da		phx				phx
.a0c6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a0c8		48		pha				pha
.a0c9		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a0cb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0cd		1a		inc a				inc 	a 							; add 1 for zero base
.a0ce		fa		plx				plx
.a0cf		20 49 a6	jsr $a649			jsr 	Multiply8x8 				; calculate -> Z0
.a0d2		fa		plx				plx
.a0d3						_VHNoMultiply:
.a0d3		18		clc				clc
.a0d4		a5 36		lda $36				lda 	zTemp0
.a0d6		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0d8		85 36		sta $36				sta 	zTemp0
.a0da		a5 37		lda $37				lda 	zTemp0+1
.a0dc		69 00		adc #$00			adc 	#0
.a0de		85 37		sta $37				sta 	zTemp0+1
.a0e0		b5 50		lda $50,x			lda 	NSStatus,x
.a0e2		20 37 88	jsr $8837			jsr 	ScaleByBaseType
.a0e5		18		clc				clc
.a0e6		b2 3e		lda ($3e)			lda 	(zaTemp)
.a0e8		65 36		adc $36				adc 	zTemp0
.a0ea		95 58		sta $58,x			sta 	NSMantissa0,x
.a0ec		a0 01		ldy #$01			ldy 	#1
.a0ee		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f0		65 37		adc $37				adc 	zTemp0+1
.a0f2		95 60		sta $60,x			sta 	NSMantissa1,x
.a0f4		7a		ply				ply 								; restore position
.a0f5		60		rts				rts
.a0f6						_VHBadIndex:
.a0f6		a9 17		lda #$17		lda	#23
.a0f8		4c 31 96	jmp $9631		jmp	ErrorHandler
.a0fb						_VHBadArray:
.a0fb		a9 18		lda #$18		lda	#24
.a0fd		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a100						AbsUnary:
.a100		fa		plx				plx 								; restore stack pos
.a101		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; get a float or int
.a104		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a107		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a109		29 7f		and #$7f			and 	#$7F
.a10b		95 50		sta $50,x			sta 	NSStatus,x
.a10d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a10e						AllocUnary:
.a10e		fa		plx				plx 								; restore stack pos
.a10f		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger		; get bytes required.
.a112		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a115		da		phx				phx 								; save X/Y
.a116		5a		phy				phy
.a117		8a		txa				txa 								; copy X into Y
.a118		a8		tay				tay
.a119		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a11c		aa		tax				tax
.a11d		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a120		20 2d a1	jsr $a12d			jsr 	AllocateXABytes 			; allocate memory
.a123		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a126		8a		txa				txa 	 							; typing is 16 bit integer.
.a127		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a12a		7a		ply				ply
.a12b		fa		plx				plx
.a12c		60		rts				rts
.a12d						AllocateXABytes:
.a12d		5a		phy				phy
.a12e		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a131		84 36		sty $36				sty 	zTemp0
.a133		5a		phy				phy
.a134		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a137		84 37		sty $37				sty 	zTemp0+1
.a139		5a		phy				phy
.a13a		18		clc				clc 								; add to low memory pointer
.a13b		6d 08 04	adc $0408			adc 	lowMemPtr
.a13e		8d 08 04	sta $0408			sta 	lowMemPtr
.a141		8a		txa				txa
.a142		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a145		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a148		b0 2f		bcs $a179			bcs 	CISSMemory
.a14a		20 6b a1	jsr $a16b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a14d						_ClearMemory:
.a14d		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a150		c5 36		cmp $36				cmp 	zTemp0
.a152		d0 07		bne $a15b			bne 	_CMClearNext
.a154		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a157		c5 37		cmp $37				cmp 	zTemp0+1
.a159		f0 0c		beq $a167			beq 	_CMExit
.a15b						_CMClearNext:
.a15b		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a15d		92 36		sta ($36)			sta 	(zTemp0)
.a15f		e6 36		inc $36				inc 	zTemp0
.a161		d0 ea		bne $a14d			bne 	_ClearMemory
.a163		e6 37		inc $37				inc		zTemp0+1
.a165		80 e6		bra $a14d			bra 	_ClearMemory
.a167						_CMExit:
.a167		fa		plx				plx
.a168		68		pla				pla
.a169		7a		ply				ply
.a16a		60		rts				rts
.a16b						CheckIdentifierStringSpace:
.a16b		48		pha				pha
.a16c		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a16f		18		clc				clc
.a170		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a172		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a175		b0 02		bcs $a179			bcs 	CISSMemory
.a177		68		pla				pla
.a178		60		rts				rts
.a179						CISSMemory:
.a179		a9 06		lda #$06		lda	#6
.a17b		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a17e						AscUnary:
.a17e		fa		plx				plx 								; restore stack pos
.a17f		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; get a string
.a182		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a184		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte 					; ASC("") will return zero.
.a187		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a18a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a18b						FracUnary:
.a18b		fa		plx				plx 								; restore stack pos
.a18c		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; get a float or int
.a18f		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a192		b5 50		lda $50,x			lda 	NSStatus,x
.a194		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a196		f0 04		beq $a19c			beq 	_IUZero
.a198		20 46 9c	jsr $9c46			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a19b		60		rts				rts
.a19c						_IUZero:
.a19c		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.a19f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1a0						IntUnary:
.a1a0		fa		plx				plx 								; restore stack pos
.a1a1		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; get a float or int
.a1a4		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a1a7		b5 50		lda $50,x			lda 	NSStatus,x
.a1a9		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1ab		f0 03		beq $a1b0			beq 	_IUExit
.a1ad		20 9e 9c	jsr $9c9e			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a1b0						_IUExit:
.a1b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a1b1						LenUnary:
.a1b1		fa		plx				plx 								; restore stack pos
.a1b2		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; get a string
.a1b5		5a		phy				phy
.a1b6		a0 00		ldy #$00			ldy 	#0 							; find length
.a1b8						_LenFind:
.a1b8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a1ba		f0 06		beq $a1c2			beq 	_LenExit
.a1bc		c8		iny				iny
.a1bd		d0 f9		bne $a1b8			bne 	_LenFind
.a1bf		4c 21 a8	jmp $a821			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a1c2						_LenExit:
.a1c2		98		tya				tya		 							; return length
.a1c3		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a1c6		7a		ply				ply
.a1c7		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a1ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a1cb						Unary_Min:
.a1cb		a9 01		lda #$01			lda 	#1
.a1cd		80 02		bra $a1d1			bra 	UnaryMinMaxMain
.a1cf						Unary_Max:
.a1cf		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a1d1						UnaryMinMaxMain:
.a1d1		fa		plx				plx 								; get index on number stack
.a1d2		48		pha				pha 								; save comparator
.a1d3		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue 				; get the first value.
.a1d6						_UMMMLoop:
.a1d6		b1 30		lda ($30),y			lda 	(codePtr),y
.a1d8		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a1da		f0 22		beq $a1fe			beq 	_UMMMDone
.a1dc		20 20 96	jsr $9620			jsr 	CheckComma 					; must be a comma
.a1df		e8		inx				inx
.a1e0		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue
.a1e3		ca		dex				dex
.a1e4		20 81 a6	jsr $a681			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a1e7		e8		inx				inx
.a1e8		20 81 a6	jsr $a681			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a1eb		e8		inx				inx
.a1ec		20 e8 96	jsr $96e8			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a1ef		ca		dex				dex
.a1f0		ca		dex				dex
.a1f1		85 36		sta $36				sta 	zTemp0 						; save required result
.a1f3		68		pla				pla 								; get and save comparator
.a1f4		48		pha				pha
.a1f5		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a1f7		d0 dd		bne $a1d6			bne 	_UMMMLoop
.a1f9		20 01 a2	jsr $a201			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a1fc		80 d8		bra $a1d6			bra 	_UMMMLoop
.a1fe						_UMMMDone:
.a1fe		68		pla				pla 								; throw the comparator
.a1ff		c8		iny				iny 								; skip )
.a200		60		rts				rts
.a201						ExpCopyAboveDown:
.a201		b5 51		lda $51,x			lda 	NSStatus+1,x
.a203		95 50		sta $50,x			sta 	NSStatus,x
.a205		b5 79		lda $79,x			lda 	NSExponent+1,x
.a207		95 78		sta $78,x			sta 	NSExponent,x
.a209		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a20b		95 58		sta $58,x			sta 	NSMantissa0,x
.a20d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a20f		95 60		sta $60,x			sta 	NSMantissa1,x
.a211		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a213		95 68		sta $68,x			sta 	NSMantissa2,x
.a215		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a217		95 70		sta $70,x			sta 	NSMantissa3,x
.a219		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a21a						Unary_Not:
.a21a		fa		plx				plx
.a21b		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; get integer
.a21e		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a221		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; zero mantissa ?
.a224		f0 04		beq $a22a			beq 	_NotZero
.a226		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.a229		60		rts				rts
.a22a						_NotZero:
.a22a		4c 9e 96	jmp $969e			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a22d						PeekByteUnary:
.a22d		a9 01		lda #$01			lda 	#1
.a22f		80 0a		bra $a23b			bra 	PeekUnary
.a231						PeekWUnary:
.a231		a9 02		lda #$02			lda 	#2
.a233		80 06		bra $a23b			bra 	PeekUnary
.a235						PeekLUnary:
.a235		a9 03		lda #$03			lda 	#3
.a237		80 02		bra $a23b			bra 	PeekUnary
.a239						PeekDUnary:
.a239		a9 04		lda #$04			lda 	#4
.a23b						PeekUnary:
.a23b		fa		plx				plx 								; restore position.
.a23c		48		pha				pha 								; save count to copy on stack
.a23d		20 1e a6	jsr $a61e			jsr		Evaluate16BitInteger 		; address as constant.
.a240		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a243		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a245		85 36		sta $36				sta 	zTemp0
.a247		b5 60		lda $60,x			lda 	NSMantissa1,x
.a249		85 37		sta $37				sta 	zTemp0+1
.a24b		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; clear the result to zero.
.a24e		68		pla				pla 								; count in zTemp2
.a24f		85 3a		sta $3a				sta 	zTemp2
.a251		da		phx				phx 								; save stack position and offset of read
.a252		5a		phy				phy
.a253		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a255						_PULoop:
.a255		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a257		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a259		c8		iny				iny 								; next byte to write
.a25a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a25b		18		clc				clc
.a25c		69 08		adc #$08			adc 	#MathStackSize
.a25e		aa		tax				tax
.a25f		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a261		d0 f2		bne $a255			bne 	_PULoop
.a263		7a		ply				ply 								; restore stack/code pos and exit.
.a264		fa		plx				plx
.a265		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a266						Unary_Random:
.a266		fa		plx				plx
.a267		20 b7 a2	jsr $a2b7			jsr 	URCopyToMantissa  			; put random # in mantissa
.a26a		b1 30		lda ($30),y			lda 	(codePtr),y
.a26c		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a26e		f0 08		beq $a278			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a270		e8		inx				inx
.a271		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a274		ca		dex				dex
.a275		20 f0 97	jsr $97f0			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a278						_URNoModulus:
.a278		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a27a		74 78		stz $78,x			stz 	NSExponent,x
.a27c		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a27f		60		rts				rts
.a280						Unary_Rnd:
.a280		fa		plx				plx
.a281		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; number to use.
.a284		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; closing bracket
.a287		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a289		10 20		bpl $a2ab			bpl 	_URDontSeed
.a28b		a5 01		lda $01				lda 	1 							; switch to page 0
.a28d		48		pha				pha
.a28e		64 01		stz $01				stz 	1
.a290		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a292		49 17		eor #$17			eor 	#$17
.a294		8d a4 d6	sta $d6a4			sta 	$D6A4
.a297		b5 60		lda $60,x			lda 	NSMantissa1,x
.a299		49 a5		eor #$a5			eor 	#$A5
.a29b		8d a5 d6	sta $d6a5			sta 	$D6A5
.a29e		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a2a0		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2a3		a9 01		lda #$01			lda 	#1
.a2a5		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2a8		68		pla				pla
.a2a9		85 01		sta $01				sta 	1
.a2ab						_URDontSeed:
.a2ab		20 b7 a2	jsr $a2b7			jsr 	URCopyToMantissa 			; copy into mantissa
.a2ae		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a2b0		95 78		sta $78,x			sta 	NSExponent,x
.a2b2		a9 08		lda #$08			lda 	#NSTFloat
.a2b4		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a2b6		60		rts				rts
.a2b7						URCopyToMantissa:
.a2b7		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a2b9		48		pha				pha
.a2ba		64 01		stz $01				stz 	1
.a2bc		a9 01		lda #$01			lda 	#1
.a2be		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a2c1		ad a4 d6	lda $d6a4			lda 	$D6A4
.a2c4		95 58		sta $58,x			sta 	NSMantissa0,x
.a2c6		ad a5 d6	lda $d6a5			lda 	$D6A5
.a2c9		95 60		sta $60,x			sta 	NSMantissa1,x
.a2cb		ad a4 d6	lda $d6a4			lda 	$D6A4
.a2ce		95 68		sta $68,x			sta 	NSMantissa2,x
.a2d0		ad a5 d6	lda $d6a5			lda 	$D6A5
.a2d3		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2d5		95 70		sta $70,x			sta 	NSMantissa3,x
.a2d7		68		pla				pla
.a2d8		85 01		sta $01				sta 	1
.a2da		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2db						SgnUnary:
.a2db		fa		plx				plx 								; restore stack pos
.a2dc		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber 				; get a float or int
.a2df		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a2e2		20 c0 a6	jsr $a6c0			jsr 	NSMIsZero 					; if zero
.a2e5		f0 0e		beq $a2f5			beq 	_SGZero  					; return Int Zero
.a2e7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a2e9		48		pha				pha
.a2ea		a9 01		lda #$01			lda 	#1 							; set to 1
.a2ec		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a2ef		68		pla				pla
.a2f0		29 80		and #$80			and		#$80 						; copy the sign byte out
.a2f2		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a2f4		60		rts				rts
.a2f5		20 9e a6	jsr $a69e	_SGZero:jsr 	NSMSetZero
.a2f8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2f9						ValUnary:
.a2f9		fa		plx				plx 								; restore stack pos
.a2fa		20 0f a3	jsr $a30f			jsr 	ValMainCode 				; do the main val() code
.a2fd		b0 01		bcs $a300			bcs 	_VUError 					; couldn't convert
.a2ff		60		rts				rts
.a300						_VUError:
.a300		4c 26 a8	jmp $a826			jmp 	TypeError
.a303						IsValUnary:
.a303		fa		plx				plx 								; restore stack pos
.a304		20 0f a3	jsr $a30f			jsr 	ValMainCode 				; do the main val() code
.a307		b0 03		bcs $a30c			bcs 	_VUBad
.a309		4c 9e 96	jmp $969e			jmp 	ReturnTrue
.a30c						_VUBad:
.a30c		4c a9 96	jmp $96a9			jmp 	ReturnFalse
.a30f						ValMainCode:
.a30f		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; get a string
.a312		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; check right bracket present
.a315						ValEvaluateZTemp0:
.a315		5a		phy				phy
.a316		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a318		f0 17		beq $a331			beq 	_VMCFail2
.a31a		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a31c		48		pha				pha 								; save first character
.a31d		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a31f		d0 01		bne $a322			bne 	_VMCStart
.a321		c8		iny				iny 								; skip over -
.a322						_VMCStart:
.a322		38		sec				sec 								; initialise first time round.
.a323						_VMCNext:
.a323		c8		iny				iny 								; pre-increment
.a324		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a326		f0 0c		beq $a334			beq 	_VMCSuccess 				; successful.
.a328		20 7b 9e	jsr $9e7b			jsr 	EncodeNumber 				; send it to the number-builder
.a32b		90 03		bcc $a330			bcc 	_VMCFail 					; if failed, give up.
.a32d		18		clc				clc 								; next time round, countinue
.a32e		80 f3		bra $a323			bra 	_VMCNext
.a330						_VMCFail:
.a330		68		pla				pla
.a331						_VMCFail2:
.a331		7a		ply				ply
.a332		38		sec				sec
.a333		60		rts				rts
.a334						_VMCSuccess:
.a334		a9 00		lda #$00			lda 	#0 							; construct final
.a336		20 7b 9e	jsr $9e7b			jsr 	EncodeNumber 				; by sending a duff value.
.a339		68		pla				pla 								; if it was -ve
.a33a		c9 2d		cmp #$2d			cmp 	#"-"
.a33c		d0 03		bne $a341			bne 	_VMCNotNegative
.a33e		20 60 a6	jsr $a660			jsr		NSMNegate 					; negate it.
.a341						_VMCNotNegative:
.a341		7a		ply				ply
.a342		18		clc				clc
.a343		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a344						ChrUnary:
.a344		fa		plx				plx 								; restore stack pos
.a345		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a348		48		pha				pha
.a349		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a34c		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a34e		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a351		68		pla				pla 								; write number to it
.a352		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a355		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a356						UnaryGetTime:
.a356		a9 00		lda #$00			lda 	#0
.a358		80 02		bra $a35c			bra 	UGDTMain
.a35a						UnaryGetDate:
.a35a		a9 03		lda #$03			lda 	#3
.a35c						UGDTMain:
.a35c		fa		plx				plx 								; get stack position back
.a35d		48		pha				pha 								; save table offset
.a35e		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger			; ignored parameter
.a361		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; closing )
.a364		68		pla				pla 								; table offset in A
.a365		5a		phy				phy 								; saving Y
.a366		a8		tay				tay 								; table offset in Y
.a367		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a369		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a36c		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a36e		48		pha				pha
.a36f		64 01		stz $01				stz 	1
.a371		20 84 a3	jsr $a384			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a374		20 7f a3	jsr $a37f			jsr 	UGDTColonDigit
.a377		20 7f a3	jsr $a37f			jsr 	UGDTColonDigit
.a37a		68		pla				pla 								; restore I/O select
.a37b		85 01		sta $01				sta 	1
.a37d		7a		ply				ply  								; restore code position
.a37e		60		rts				rts
.a37f						UGDTColonDigit:
.a37f		a9 3a		lda #$3a			lda 	#':'
.a381		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a384						UGDTDigit:
.a384		da		phx				phx 								; save X
.a385		b9 a4 a3	lda $a3a4,y			lda 	RTCROffset,y 				; get offset in RTC register
.a388		aa		tax				tax
.a389		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a38c		39 aa a3	and $a3aa,y			and 	RTCRMask,y 					; and with Mask.
.a38f		fa		plx				plx
.a390		48		pha				pha 								; output in BCD
.a391		4a		lsr a				lsr 	a
.a392		4a		lsr a				lsr 	a
.a393		4a		lsr a				lsr 	a
.a394		4a		lsr a				lsr 	a
.a395		09 30		ora #$30			ora 	#48
.a397		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a39a		68		pla				pla
.a39b		29 0f		and #$0f			and 	#15
.a39d		09 30		ora #$30			ora 	#48
.a39f		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a3a2		c8		iny				iny
.a3a3		60		rts				rts
.a3a4						RTCROffset:
>a3a4		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a3aa						RTCRMask:
>a3aa		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getinkey.asm

.a3b0						AscGet:
.a3b0		fa		plx				plx 								; restore stack pos
.a3b1						AscGet2:
.a3b1		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a3b4		20 01 81	jsr $8101	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a3b7		d0 0b		bne $a3c4			bne 	_AGBreak
.a3b9		20 33 81	jsr $8133			jsr 	PopKeyboardQueue 			; wait for key.
.a3bc		c9 00		cmp #$00			cmp 	#0
.a3be		f0 f4		beq $a3b4			beq 	_AGKey
.a3c0		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a3c3		60		rts				rts
.a3c4						_AGBreak:
.a3c4		a9 01		lda #$01		lda	#1
.a3c6		4c 31 96	jmp $9631		jmp	ErrorHandler
.a3c9						AscInkey:
.a3c9		fa		plx				plx 								; restore stack pos
.a3ca						AscInkey2:
.a3ca		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a3cd		20 33 81	jsr $8133			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a3d0		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a3d3		60		rts				rts
.a3d4						ChrGet:
.a3d4		fa		plx				plx
.a3d5		20 b1 a3	jsr $a3b1			jsr 	AscGet2
.a3d8		4c df a3	jmp $a3df			jmp 	GetInkeyToString
.a3db						ChrInkey:
.a3db		fa		plx				plx
.a3dc		20 ca a3	jsr $a3ca			jsr 	AscInkey2
.a3df						GetInkeyToString:
.a3df		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a3e1		f0 0b		beq $a3ee			beq 	_GKISNull
.a3e3		48		pha				pha
.a3e4		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3e6		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a3e9		68		pla				pla 								; write number to it
.a3ea		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a3ed		60		rts				rts
.a3ee						_GKISNull:
.a3ee		a9 00		lda #$00			lda 	#0
.a3f0		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a3f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a3f4						ItemCountUnary:
.a3f4		fa		plx				plx
.a3f5		20 f6 a5	jsr $a5f6			jsr 	EvaluateString
.a3f8		e8		inx				inx
.a3f9		20 6c a4	jsr $a46c			jsr 	ICGetSeperator
.a3fc		ca		dex				dex
.a3fd		20 8d a4	jsr $a48d			jsr 	ICSetPointer 				; zTemp0 = (string)
.a400		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; zero the result.
.a403		5a		phy				phy
.a404		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a406						_ICULoop:
.a406		c8		iny				iny
.a407		b1 36		lda ($36),y			lda 	(zTemp0),y
.a409		cd 72 07	cmp $0772			cmp 	ICSeperator
.a40c		d0 02		bne $a410			bne 	_ICUNoMatch
.a40e		f6 58		inc $58,x			inc 	NSMantissa0,x
.a410						_ICUNoMatch:
.a410		c9 00		cmp #$00			cmp 	#0
.a412		d0 f2		bne $a406			bne 	_ICULoop
.a414		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a416		7a		ply				ply
.a417		60		rts				rts
.a418						ItemGetUnary:
.a418		fa		plx				plx
.a419		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; search string
.a41c		20 20 96	jsr $9620			jsr 	CheckComma
.a41f		e8		inx				inx 								; get count
.a420		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.a423		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a425		f0 61		beq $a488			beq 	ICGSRange
.a427		e8		inx				inx 								; get seperator.
.a428		20 6c a4	jsr $a46c			jsr 	ICGetSeperator
.a42b		ca		dex				dex
.a42c		ca		dex				dex
.a42d		5a		phy				phy
.a42e		20 8d a4	jsr $a48d			jsr 	ICSetPointer 				; zTemp0 points to string.
.a431		a0 00		ldy #$00			ldy 	#0
.a433		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a435		f0 0e		beq $a445			beq 	_IGUFoundStart
.a437						_IGUFindNext:
.a437		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a439		f0 4d		beq $a488			beq 	ICGSRange 					; eol, not found.
.a43b		c8		iny				iny
.a43c		cd 72 07	cmp $0772			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a43f		d0 f6		bne $a437			bne 	_IGUFindNext
.a441		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a443		d0 f2		bne $a437			bne 	_IGUFindNext
.a445						_IGUFoundStart:
.a445		84 38		sty $38				sty 	zTemp1 						; save start
.a447		88		dey				dey
.a448						_IGUFindLength:
.a448		c8		iny				iny 								; forward till seperator/EOS
.a449		b1 36		lda ($36),y			lda 	(zTemp0),y
.a44b		f0 05		beq $a452			beq 	_IGUFoundLength
.a44d		cd 72 07	cmp $0772			cmp 	ICSeperator
.a450		d0 f6		bne $a448			bne 	_IGUFindLength
.a452						_IGUFoundLength:
.a452		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a454		98		tya				tya 								; calculate length of new string.
.a455		38		sec				sec
.a456		e5 38		sbc $38				sbc 	zTemp1
.a458		20 6d b8	jsr $b86d			jsr 	StringTempAllocate 			; allocate bytes for it.
.a45b		a4 38		ldy $38				ldy 	zTemp1
.a45d						_IGUCopySub:
.a45d		c4 39		cpy $39				cpy 	zTemp1+1
.a45f		f0 08		beq $a469			beq 	_IGUCopyOver
.a461		b1 36		lda ($36),y			lda 	(zTemp0),y
.a463		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a466		c8		iny				iny
.a467		80 f4		bra $a45d			bra 	_IGUCopySub
.a469						_IGUCopyOver:
.a469		7a		ply				ply
.a46a		60		rts				rts
>a46b		db						.byte 	$DB 						; causes a break in the emulator
.a46c						ICGetSeperator:
.a46c		20 20 96	jsr $9620			jsr 	CheckComma 					; preceding comma
.a46f		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; seperator string
.a472		20 8d a4	jsr $a48d			jsr 	ICSetPointer 				; access it
.a475		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a477		8d 72 07	sta $0772			sta 	ICSeperator
.a47a		f0 0c		beq $a488			beq 	ICGSRange 					; check LEN(seperator) = 1
.a47c		5a		phy				phy
.a47d		a0 01		ldy #$01			ldy 	#1
.a47f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a481		d0 05		bne $a488			bne 	ICGSRange
.a483		7a		ply				ply
.a484		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; check following )
.a487		60		rts				rts
.a488						ICGSRange:
.a488		a9 04		lda #$04		lda	#4
.a48a		4c 31 96	jmp $9631		jmp	ErrorHandler
.a48d						ICSetPointer:
.a48d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a48f		85 36		sta $36				sta 	zTemp0
.a491		b5 60		lda $60,x			lda 	NSMantissa1,x
.a493		85 37		sta $37				sta 	zTemp0+1
.a495		60		rts				rts
.0772						ICSeperator:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a496						SpcUnary:
.a496		fa		plx				plx 								; restore stack pos
.a497		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger			; get value
.a49a		5a		phy				phy
.a49b		48		pha				pha 								; save count
.a49c		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a49f		7a		ply				ply 								; to do count in Y
.a4a0						_SpcLoop:
.a4a0		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a4a2		f0 08		beq $a4ac			beq 	_SpcExit
.a4a4		a9 20		lda #$20			lda 	#32
.a4a6		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a4a9		88		dey				dey
.a4aa		80 f4		bra $a4a0			bra 	_SpcLoop
.a4ac						_SpcExit:
.a4ac		7a		ply				ply
.a4ad		20 18 96	jsr $9618			jsr 	CheckRightBracket
.a4b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4b1						Unary_Str:
.a4b1		fa		plx				plx
.a4b2		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber  			; get number
.a4b5		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; closing bracket
.a4b8		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4ba		20 d3 a4	jsr $a4d3			jsr 	ConvertNumberToString 		; do the conversion.
.a4bd		a9 21		lda #$21			lda		#33 						; create buffer
.a4bf		20 6d b8	jsr $b86d			jsr 	StringTempAllocate 			; allocate memory
.a4c2		da		phx				phx  								; copy the converted string into the buffer.
.a4c3		a2 00		ldx #$00			ldx 	#0
.a4c5						_USCopy:
.a4c5		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4c8		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite
.a4cb		e8		inx				inx
.a4cc		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4cf		d0 f4		bne $a4c5			bne 	_USCopy
.a4d1		fa		plx				plx
.a4d2		60		rts				rts
.a4d3						ConvertNumberToString:
.a4d3		5a		phy				phy 								; save code position
.a4d4		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a4d7		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a4da		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a4dc		10 09		bpl $a4e7			bpl 	_CNTSNotNegative
.a4de		29 7f		and #$7f			and 	#$7F 						; make +ve
.a4e0		95 50		sta $50,x			sta 	NSStatus,x
.a4e2		a9 2d		lda #$2d			lda 	#"-"
.a4e4		20 48 a5	jsr $a548			jsr 	WriteDecimalBuffer
.a4e7						_CNTSNotNegative:
.a4e7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a4e9		f0 12		beq $a4fd			beq 	_CNTSNotFloat
.a4eb		e8		inx				inx 								; round up so we don't get too many 6.999999
.a4ec		a9 01		lda #$01			lda 	#1
.a4ee		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a4f1		ca		dex				dex
.a4f2		b5 78		lda $78,x			lda		NSExponent,x
.a4f4		95 79		sta $79,x			sta 	NSExponent+1,x
.a4f6		a9 08		lda #$08			lda 	#NSTFloat
.a4f8		95 51		sta $51,x			sta 	NSStatus+1,x
.a4fa		20 80 9b	jsr $9b80			jsr 	FloatAdd
.a4fd						_CNTSNotFloat:
.a4fd		20 2a a5	jsr $a52a			jsr 	MakePlusTwoString 			; do the integer part.
.a500		20 46 9c	jsr $9c46			jsr 	FloatFractionalPart 		; get the fractional part
.a503		20 f7 9c	jsr $9cf7			jsr 	NSNormalise					; normalise , exit if zero
.a506		f0 20		beq $a528			beq 	_CNTSExit
.a508		a9 2e		lda #$2e			lda 	#"."
.a50a		20 48 a5	jsr $a548			jsr 	WriteDecimalBuffer 			; write decimal place
.a50d						_CNTSDecimal:
.a50d		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a510		30 16		bmi $a528			bmi 	_CNTSExit
.a512		e8		inx				inx 								; x 10.0
.a513		a9 0a		lda #$0a			lda 	#10
.a515		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.a518		a9 08		lda #$08			lda 	#NSTFloat
.a51a		95 50		sta $50,x			sta 	NSStatus,x
.a51c		ca		dex				dex
.a51d		20 c5 9c	jsr $9cc5			jsr 	FloatMultiply
.a520		20 2a a5	jsr $a52a			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a523		20 46 9c	jsr $9c46			jsr 	FloatFractionalPart 		; get the fractional part
.a526		80 e5		bra $a50d			bra 	_CNTSDecimal 				; keep going.
.a528						_CNTSExit:
.a528		7a		ply				ply
.a529		60		rts				rts
.a52a						MakePlusTwoString:
.a52a		da		phx				phx
.a52b		20 81 a6	jsr $a681			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a52e		e8		inx				inx 								; access it
.a52f		e8		inx				inx
.a530		20 9e 9c	jsr $9c9e			jsr 	FloatIntegerPart 			; make it an integer
.a533		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a535		20 b0 9a	jsr $9ab0			jsr 	ConvertInt32
.a538		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a53a						_MPTSCopy:
.a53a		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a53d		20 48 a5	jsr $a548			jsr 	WriteDecimalBuffer
.a540		e8		inx				inx
.a541		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a544		d0 f4		bne $a53a			bne 	_MPTSCopy
.a546		fa		plx				plx
.a547		60		rts				rts
.a548						WriteDecimalBuffer:
.a548		da		phx				phx
.a549		ae 11 04	ldx $0411			ldx 	dbOffset
.a54c		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a54f		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a552		ee 11 04	inc $0411			inc 	dbOffset
.a555		fa		plx				plx
.a556		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a557						Unary_Left:
.a557		fa		plx				plx
.a558		18		clc				clc 								; only one parameter
.a559		20 bc a5	jsr $a5bc			jsr 	SubstringInitial 			; set up.
.a55c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a55e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a560		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a562		80 25		bra $a589			bra 	SubstringMain
.a564						Unary_Right:
.a564		fa		plx				plx
.a565		18		clc				clc 								; only one parameter
.a566		20 bc a5	jsr $a5bc			jsr 	SubstringInitial 			; set up.
.a569		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a56b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a56d		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a56f		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a571		b0 02		bcs $a575			bcs 	_URNotUnderflow
.a573		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a575						_URNotUnderflow:
.a575		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a577		80 10		bra $a589			bra 	SubstringMain
.a579						Unary_Mid:
.a579		fa		plx				plx
.a57a		38		sec				sec 								; two parameters
.a57b		20 bc a5	jsr $a5bc			jsr 	SubstringInitial 			; set up.
.a57e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a580		f0 04		beq $a586			beq 	_UMError
.a582		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a584		80 03		bra $a589			bra 	SubstringMain
.a586						_UMError:
.a586		4c 2b a8	jmp $a82b			jmp 	ArgumentError
.a589						SubstringMain:
.a589		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a58b		d5 78		cmp $78,x			cmp 	NSExponent,x
.a58d		b0 27		bcs $a5b6			bcs 	_SSMNull 					; if so, return an empty string.
.a58f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a591		f0 23		beq $a5b6			beq 	_SSMNull 					; return empty string.
.a593		18		clc				clc 								; add the offset +1 to the address and
.a594		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a596		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a598		85 36		sta $36				sta 	zTemp0
.a59a		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a59c		69 00		adc #$00			adc 	#0
.a59e		85 37		sta $37				sta 	zTemp0+1
.a5a0						_SSMNoCarry:
.a5a0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5a2		20 6d b8	jsr $b86d			jsr 	StringTempAllocate 			; allocate that many characters
.a5a5		5a		phy				phy 								; save Y
.a5a6		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5a8						_SSMCopy:
.a5a8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5aa		f0 08		beq $a5b4			beq 	_SSMEString 				; no more to copy
.a5ac		20 a6 b8	jsr $b8a6			jsr 	StringTempWrite 			; and write it out.
.a5af		c8		iny				iny
.a5b0		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a5b2		d0 f4		bne $a5a8			bne 	_SSMCopy
.a5b4						_SSMEString:
.a5b4		7a		ply				ply
.a5b5						_SSMExit:
.a5b5		60		rts				rts
.a5b6						_SSMNull:
.a5b6		a9 00		lda #$00			lda 	#0
.a5b8		20 6d b8	jsr $b86d			jsr 	StringTempAllocate
.a5bb		60		rts				rts
.a5bc						SubstringInitial:
.a5bc		da		phx				phx 								; save initial stack position
.a5bd		08		php				php 								; save carry on stack indicating 2 parameters
.a5be		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; get a string
.a5c1		5a		phy				phy 								; calculate length to exponent.
.a5c2		a0 ff		ldy #$ff			ldy 	#$FF
.a5c4						_SIFindLength:
.a5c4		c8		iny				iny
.a5c5		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5c7		d0 fb		bne $a5c4			bne 	_SIFindLength
.a5c9		98		tya				tya
.a5ca		95 78		sta $78,x			sta 	NSExponent,x
.a5cc		7a		ply				ply
.a5cd		e8		inx				inx
.a5ce		20 20 96	jsr $9620			jsr 	CheckComma 					; comma next
.a5d1		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get next parameter
.a5d4		28		plp				plp 								; is it the last parameter ?
.a5d5		90 07		bcc $a5de			bcc 	_SSIExit 					; if so, exit.
.a5d7		e8		inx				inx
.a5d8		20 20 96	jsr $9620			jsr 	CheckComma 					; comma next
.a5db		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get last parameter
.a5de						_SSIExit:
.a5de		fa		plx				plx
.a5df		20 18 96	jsr $9618			jsr 	CheckRightBracket 			; check closing bracket
.a5e2		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a5e3						EvaluateValue:
.a5e3		48		pha				pha
.a5e4		20 35 9b	jsr $9b35			jsr		EvaluateExpression 			; expression
.a5e7		20 f8 9d	jsr $9df8			jsr 	Dereference					; derefernce it
.a5ea		68		pla				pla
.a5eb		60		rts				rts
.a5ec						EvaluateNumber:
.a5ec		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue 				; get a value
.a5ef		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5f1		29 10		and #$10			and 	#NSBIsString
.a5f3		d0 13		bne $a608			bne 	HelperTypeError
.a5f5		60		rts				rts
.a5f6						EvaluateString:
.a5f6		20 e3 a5	jsr $a5e3			jsr 	EvaluateValue 				; get a value
.a5f9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5fb		29 10		and #$10			and 	#NSBIsString
.a5fd		f0 09		beq $a608			beq 	HelperTypeError
.a5ff						CopyAddressToTemp0:
.a5ff		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a601		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a603		b5 60		lda $60,x			lda 	NSMantissa1,x
.a605		85 37		sta $37				sta 	zTemp0+1
.a607		60		rts				rts
.a608						HelperTypeError:
.a608		4c 26 a8	jmp $a826			jmp 	TypeError
.a60b						EvaluateInteger:
.a60b		20 ec a5	jsr $a5ec			jsr 	EvaluateNumber
.a60e		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a610		d0 09		bne $a61b			bne 	HelperValueError 			; if not, it's a float.
.a612		60		rts				rts
.a613						EvaluateUnsignedInteger:
.a613		20 0b a6	jsr $a60b			jsr 	EvaluateInteger 			; check integer is +ve
.a616		b5 50		lda $50,x			lda 	NSStatus,x
.a618		30 01		bmi $a61b			bmi 	HelperValueError
.a61a		60		rts				rts
.a61b						HelperValueError:
.a61b		4c 2b a8	jmp $a82b			jmp 	ArgumentError
.a61e						Evaluate16BitInteger:
.a61e		20 13 a6	jsr $a613			jsr	 	EvaluateUnsignedInteger		; get integer
.a621		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a623		15 68		ora $68,x			ora 	NSMantissa2,x
.a625		d0 f4		bne $a61b			bne 	HelperValueError
.a627		60		rts				rts
.a628						Evaluate16BitIntegerSigned:
.a628		20 0b a6	jsr $a60b			jsr	 	EvaluateInteger				; get integer
.a62b		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a62d		15 68		ora $68,x			ora 	NSMantissa2,x
.a62f		d0 ea		bne $a61b			bne 	HelperValueError
.a631		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a633		10 03		bpl $a638			bpl 	_EISNotSigned
.a635		20 67 a6	jsr $a667			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a638						_EISNotSigned:
.a638		60		rts				rts
.a639						Evaluate8BitInteger:
.a639		20 13 a6	jsr $a613			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a63c		d0 dd		bne $a61b			bne 	HelperValueError
.a63e		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a640		15 68		ora $68,x			ora 	NSMantissa2,x
.a642		15 60		ora $60,x			ora 	NSMantissa1,x
.a644		d0 d5		bne $a61b			bne 	HelperValueError
.a646		b5 58		lda $58,x			lda 	NSMantissa0,x
.a648		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a649						Multiply8x8:
.a649		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a64a		85 36		sta $36			  	sta 	zTemp0
.a64c		86 37		stx $37				stx 	zTemp0+1
.a64e		a9 00		lda #$00			lda 	#0
.a650		a2 08		ldx #$08			ldx 	#8
.a652						_M88Loop:
.a652		90 03		bcc $a657			bcc 	_M88NoAdd
.a654		18		clc				clc
.a655		65 37		adc $37				adc 	zTemp0+1
.a657						_M88NoAdd:
.a657		6a		ror a				ror 	a
.a658		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a65a		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a65b		d0 f5		bne $a652			bne 	_M88Loop
.a65d		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a65f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a660						NSMNegate:
.a660		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a662		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a664		95 50		sta $50,x			sta 	NSStatus,x
.a666		60		rts				rts
.a667						NSMNegateMantissa:
.a667		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a668		a9 00		lda #$00			lda 	#0
.a66a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a66c		95 58		sta $58,x			sta 	NSMantissa0,x
.a66e		a9 00		lda #$00			lda 	#0
.a670		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a672		95 60		sta $60,x			sta 	NSMantissa1,x
.a674		a9 00		lda #$00			lda 	#0
.a676		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a678		95 68		sta $68,x			sta 	NSMantissa2,x
.a67a		a9 00		lda #$00			lda 	#0
.a67c		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a67e		95 70		sta $70,x			sta 	NSMantissa3,x
.a680		60		rts				rts
.a681						NSMShiftUpTwo:
.a681		b5 58		lda $58,x			lda 	NSMantissa0,x
.a683		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a685		b5 60		lda $60,x			lda 	NSMantissa1,x
.a687		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a689		b5 68		lda $68,x			lda 	NSMantissa2,x
.a68b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a68d		b5 70		lda $70,x			lda 	NSMantissa3,x
.a68f		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a691		b5 78		lda $78,x			lda 	NSExponent,x
.a693		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a695		b5 50		lda $50,x			lda 	NSStatus,x
.a697		95 52		sta $52,x			sta 	NSStatus+2,x
.a699		60		rts				rts
.a69a						NSMSetZeroMantissaOnly:
.a69a		a9 00		lda #$00			lda 	#0
.a69c		80 06		bra $a6a4			bra 	NSMSetMantissa
.a69e						NSMSetZero:
.a69e		a9 00		lda #$00			lda 	#0
.a6a0						NSMSetByte:
.a6a0		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6a2		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a6a4						NSMSetMantissa:
.a6a4		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a6a6		74 60		stz $60,x			stz 	NSMantissa1,x
.a6a8		74 68		stz $68,x			stz 	NSMantissa2,x
.a6aa		74 70		stz $70,x			stz 	NSMantissa3,x
.a6ac		60		rts				rts
.a6ad						NSMShiftLeft:
.a6ad		18		clc				clc
.a6ae						NSMRotateLeft:
.a6ae		36 58		rol $58,x			rol 	NSMantissa0,x
.a6b0		36 60		rol $60,x			rol		NSMantissa1,x
.a6b2		36 68		rol $68,x			rol		NSMantissa2,x
.a6b4		36 70		rol $70,x			rol		NSMantissa3,x
.a6b6		60		rts				rts
.a6b7						NSMShiftRight:
.a6b7		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a6b9		76 68		ror $68,x			ror		NSMantissa2,x
.a6bb		76 60		ror $60,x			ror		NSMantissa1,x
.a6bd		76 58		ror $58,x			ror		NSMantissa0,x
.a6bf		60		rts				rts
.a6c0						NSMIsZero:
.a6c0		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6c2		15 68		ora $68,x			ora		NSMantissa2,x
.a6c4		15 60		ora $60,x			ora		NSMantissa1,x
.a6c6		15 58		ora $58,x			ora		NSMantissa0,x
.a6c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a6c9						TickHandler:
.a6c9		5a		phy				phy 								; need to preserve Y
.a6ca		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a6cd		7a		ply				ply
.a6ce		60		rts				rts
.0773						LastTick:
>0773								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a6cf						Assemble_ora:
.a6cf		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6d2		01					.byte $01
.a6d3						Assemble_and:
.a6d3		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6d6		21					.byte $21
.a6d7						Assemble_eor:
.a6d7		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6da		41					.byte $41
.a6db						Assemble_adc:
.a6db		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6de		61					.byte $61
.a6df						Assemble_sta:
.a6df		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6e2		81					.byte $81
.a6e3						Assemble_lda:
.a6e3		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6e6		a1					.byte $a1
.a6e7						Assemble_cmp:
.a6e7		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6ea		c1					.byte $c1
.a6eb						Assemble_sbc:
.a6eb		20 4b 82	jsr $824b		jsr	AssembleGroup1
>a6ee		e1					.byte $e1
.a6ef						Assemble_asl:
.a6ef		20 52 82	jsr $8252		jsr	AssembleGroup2
>a6f2		02					.byte $02
>a6f3		75					.byte $75
.a6f4						Assemble_rol:
.a6f4		20 52 82	jsr $8252		jsr	AssembleGroup2
>a6f7		22					.byte $22
>a6f8		75					.byte $75
.a6f9						Assemble_lsr:
.a6f9		20 52 82	jsr $8252		jsr	AssembleGroup2
>a6fc		42					.byte $42
>a6fd		75					.byte $75
.a6fe						Assemble_ror:
.a6fe		20 52 82	jsr $8252		jsr	AssembleGroup2
>a701		62					.byte $62
>a702		75					.byte $75
.a703						Assemble_stx:
.a703		20 52 82	jsr $8252		jsr	AssembleGroup2
>a706		82					.byte $82
>a707		50					.byte $50
.a708						Assemble_ldx:
.a708		20 52 82	jsr $8252		jsr	AssembleGroup2
>a70b		a2					.byte $a2
>a70c		d0					.byte $d0
.a70d						Assemble_dec:
.a70d		20 52 82	jsr $8252		jsr	AssembleGroup2
>a710		c2					.byte $c2
>a711		55					.byte $55
.a712						Assemble_inc:
.a712		20 52 82	jsr $8252		jsr	AssembleGroup2
>a715		e2					.byte $e2
>a716		55					.byte $55
.a717						Assemble_stz:
.a717		20 52 82	jsr $8252		jsr	AssembleGroup2
>a71a		60					.byte $60
>a71b		44					.byte $44
.a71c						Assemble_bit:
.a71c		20 52 82	jsr $8252		jsr	AssembleGroup2
>a71f		20					.byte $20
>a720		55					.byte $55
.a721						Assemble_sty:
.a721		20 52 82	jsr $8252		jsr	AssembleGroup2
>a724		80					.byte $80
>a725		54					.byte $54
.a726						Assemble_ldy:
.a726		20 52 82	jsr $8252		jsr	AssembleGroup2
>a729		a0					.byte $a0
>a72a		d5					.byte $d5
.a72b						Assemble_cpy:
.a72b		20 52 82	jsr $8252		jsr	AssembleGroup2
>a72e		c0					.byte $c0
>a72f		d4					.byte $d4
.a730						Assemble_cpx:
.a730		20 52 82	jsr $8252		jsr	AssembleGroup2
>a733		e0					.byte $e0
>a734		d0					.byte $d0
.a735						Assemble_tsb:
.a735		20 52 82	jsr $8252		jsr	AssembleGroup2
>a738		00					.byte $00
>a739		50					.byte $50
.a73a						Assemble_trb:
.a73a		20 52 82	jsr $8252		jsr	AssembleGroup2
>a73d		10					.byte $10
>a73e		50					.byte $50
.a73f						Assemble_jsr:
.a73f		20 52 82	jsr $8252		jsr	AssembleGroup2
>a742		14					.byte $14
>a743		10					.byte $10
.a744						Assemble_jmp:
.a744		20 52 82	jsr $8252		jsr	AssembleGroup2
>a747		40					.byte $40
>a748		10					.byte $10
.a749						Assemble_bpl:
.a749		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a74c		10					.byte $10
.a74d						Assemble_bmi:
.a74d		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a750		30					.byte $30
.a751						Assemble_bvc:
.a751		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a754		50					.byte $50
.a755						Assemble_bvs:
.a755		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a758		70					.byte $70
.a759						Assemble_bcc:
.a759		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a75c		90					.byte $90
.a75d						Assemble_bcs:
.a75d		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a760		b0					.byte $b0
.a761						Assemble_bne:
.a761		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a764		d0					.byte $d0
.a765						Assemble_beq:
.a765		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a768		f0					.byte $f0
.a769						Assemble_bra:
.a769		20 a3 82	jsr $82a3		jsr	AssembleGroup3
>a76c		80					.byte $80
.a76d						Assemble_brk:
.a76d		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a770		00					.byte $00
.a771						Assemble_php:
.a771		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a774		08					.byte $08
.a775						Assemble_clc:
.a775		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a778		18					.byte $18
.a779						Assemble_plp:
.a779		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a77c		28					.byte $28
.a77d						Assemble_sec:
.a77d		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a780		38					.byte $38
.a781						Assemble_rti:
.a781		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a784		40					.byte $40
.a785						Assemble_pha:
.a785		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a788		48					.byte $48
.a789						Assemble_cli:
.a789		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a78c		58					.byte $58
.a78d						Assemble_phy:
.a78d		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a790		5a					.byte $5a
.a791						Assemble_rts:
.a791		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a794		60					.byte $60
.a795						Assemble_pla:
.a795		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a798		68					.byte $68
.a799						Assemble_sei:
.a799		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a79c		78					.byte $78
.a79d						Assemble_ply:
.a79d		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7a0		7a					.byte $7a
.a7a1						Assemble_dey:
.a7a1		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7a4		88					.byte $88
.a7a5						Assemble_txa:
.a7a5		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7a8		8a					.byte $8a
.a7a9						Assemble_tya:
.a7a9		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7ac		98					.byte $98
.a7ad						Assemble_txs:
.a7ad		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7b0		9a					.byte $9a
.a7b1						Assemble_tay:
.a7b1		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7b4		a8					.byte $a8
.a7b5						Assemble_tax:
.a7b5		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7b8		aa					.byte $aa
.a7b9						Assemble_clv:
.a7b9		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7bc		b8					.byte $b8
.a7bd						Assemble_tsx:
.a7bd		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7c0		ba					.byte $ba
.a7c1						Assemble_iny:
.a7c1		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7c4		c8					.byte $c8
.a7c5						Assemble_dex:
.a7c5		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7c8		ca					.byte $ca
.a7c9						Assemble_cld:
.a7c9		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7cc		d8					.byte $d8
.a7cd						Assemble_phx:
.a7cd		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7d0		da					.byte $da
.a7d1						Assemble_stp:
.a7d1		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7d4		db					.byte $db
.a7d5						Assemble_inx:
.a7d5		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7d8		e8					.byte $e8
.a7d9						Assemble_nop:
.a7d9		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7dc		ea					.byte $ea
.a7dd						Assemble_sed:
.a7dd		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7e0		f8					.byte $f8
.a7e1						Assemble_plx:
.a7e1		20 d7 82	jsr $82d7		jsr	AssembleGroup4
>a7e4		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a7e5						DecimalScalarTable:
>a7e5		66 66 66 66				.dword $66666666 ; 0.1
>a7e9		de					.byte $de
>a7ea		1f 85 eb 51				.dword $51eb851f ; 0.01
>a7ee		db					.byte $db
>a7ef		4c 37 89 41				.dword $4189374c ; 0.001
>a7f3		d8					.byte $d8
>a7f4		ac 8b db 68				.dword $68db8bac ; 0.0001
>a7f8		d4					.byte $d4
>a7f9		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a7fd		d1					.byte $d1
>a7fe		83 de 1b 43				.dword $431bde83 ; 1e-06
>a802		ce					.byte $ce
>a803		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a807		ca					.byte $ca
>a808		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a80c		c7					.byte $c7
>a80d		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a811		c4					.byte $c4
>a812		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a816		c0					.byte $c0
>a817		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a81b		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a81c						SyntaxError:
.a81c		a9 02		lda #$02		lda	#2
.a81e		4c 31 96	jmp $9631		jmp	ErrorHandler
.a821						RangeError:
.a821		a9 04		lda #$04		lda	#4
.a823		4c 31 96	jmp $9631		jmp	ErrorHandler
.a826						TypeError:
.a826		a9 05		lda #$05		lda	#5
.a828		4c 31 96	jmp $9631		jmp	ErrorHandler
.a82b						ArgumentError:
.a82b		a9 07		lda #$07		lda	#7
.a82d		4c 31 96	jmp $9631		jmp	ErrorHandler
.a830						NotDoneError:
.a830		a9 0c		lda #$0c		lda	#12
.a832		4c 31 96	jmp $9631		jmp	ErrorHandler
.a835						ErrorText:
>a835		42 72 65 61 6b 00			.text	"Break",0
>a83b		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a843		72 72 6f 72 00
>a848		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a850		20 62 79 20 7a 65 72 6f 00
>a859		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a861		61 6e 67 65 00
>a866		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a86e		6d 61 74 63 68 00
>a874		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a87c		65 6d 6f 72 79 00
>a882		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a88a		61 72 67 75 6d 65 6e 74 00
>a893		53 74 6f 70 00				.text	"Stop",0
>a898		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a8a0		6f 6f 20 6c 6f 6e 67 00
>a8a8		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a8b0		6e 20 66 61 69 6c 65 64 00
>a8b9		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a8c1		61 74 61 00
>a8c5		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a8cd		65 6e 74 65 64 00
>a8d3		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a8db		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a8e7		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a8ef		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a8fc		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a904		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a911		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a919		68 6f 75 74 20 57 68 69 6c 65 00
>a924		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a92c		68 6f 75 74 20 46 6f 72 00
>a935		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a93d		61 63 6b 20 66 75 6c 6c 00
>a946		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a94e		75 63 74 75 72 65 00
>a955		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a95d		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a96a		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a972		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a980		41 72 72 61 79 20 73 69			.text	"Array size",0
>a988		7a 65 00
>a98b		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a993		79 20 69 6e 64 65 78 00
>a99b		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a9a3		74 20 64 65 63 6c 61 72 65 64 00
>a9ae		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a9b6		20 66 6f 75 6e 64 00
>a9bd		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a9c5		65 72 72 6f 72 00
>a9cb		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a9d3		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc72		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>dc7a		32 33 20 33 31

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a9d9						RectangleCommand:
.a9d9		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a9db		80 02		bra $a9df			bra 	ShapeDrawCmd
.a9dd						CircleCommand:
.a9dd		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a9df						ShapeDrawCmd:
.a9df		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.a9e2						ShapeDraw:
.a9e2		0d 75 07	ora $0775			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a9e5		4c 5d aa	jmp $aa5d			jmp 	ExecuteGraphicCommand	 	; and complete
.a9e8						SpriteCommand:
.a9e8		a2 00		ldx #$00			ldx 	#0
.a9ea		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get image number.
.a9ed		5a		phy				phy
.a9ee		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a9f0		a6 58		ldx $58				ldx 	NSMantissa0
.a9f2		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a9f4		b0 0d		bcs $aa03			bcs 	_SCRange
.a9f6		a0 ff		ldy #$ff			ldy 	#255
.a9f8		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9fb		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a9fd		7a		ply				ply
.a9fe		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.aa01		80 5a		bra $aa5d			bra 	ExecuteGraphicCommand
.aa03						_SCRange:
.aa03		4c 21 a8	jmp $a821			jmp 	RangeError
.aa06						ImageCommand:
.aa06		a2 00		ldx #$00			ldx 	#0
.aa08		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get image number.
.aa0b		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.aa0e						ImageRunDraw:
.aa0e		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.aa10		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa13		ad 7b 07	lda $077b			lda 	gxDrawScale
.aa16		0a		asl a				asl 	a
.aa17		0a		asl a				asl 	a
.aa18		0a		asl a				asl 	a
.aa19		a8		tay				tay
.aa1a		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.aa1c		a6 58		ldx $58				ldx 	NSMantissa0
.aa1e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa21		60		rts				rts
.aa22						TextCommand:
.aa22		a2 00		ldx #$00			ldx 	#0
.aa24		20 f6 a5	jsr $a5f6			jsr 	EvaluateString 				; get text
.aa27		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.aa2a						TextRunDraw:
.aa2a		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.aa2c		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa2f		a0 00		ldy #$00			ldy 	#0
.aa31						_IRDLoop:
.aa31		a5 60		lda $60				lda 	NSMantissa1 				; access character
.aa33		85 37		sta $37				sta 	zTemp0+1
.aa35		a5 58		lda $58				lda 	NSMantissa0
.aa37		85 36		sta $36				sta 	zTemp0
.aa39		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa3b		f0 13		beq $aa50			beq 	_IRDExit
.aa3d		5a		phy				phy									; save string pos
.aa3e		48		pha				pha 								; save char
.aa3f		ad 7b 07	lda $077b			lda 	gxDrawScale 				; get scale
.aa42		0a		asl a				asl 	a
.aa43		0a		asl a				asl 	a
.aa44		0a		asl a				asl 	a
.aa45		a8		tay				tay
.aa46		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.aa48		fa		plx				plx 								; char to draw
.aa49		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa4c		7a		ply				ply 								; restore string pos
.aa4d		c8		iny				iny
.aa4e		90 e1		bcc $aa31			bcc 	_IRDLoop 					; go back if no error.
.aa50						_IRDExit:
.aa50		60		rts				rts
.aa51						PlotCommand:
.aa51		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.aa53		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.aa56		80 05		bra $aa5d			bra 	ExecuteGraphicCommand
.aa58						LineCommand:
.aa58		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.aa5a		20 69 aa	jsr $aa69			jsr 	RunGraphicsCommand
.aa5d						ExecuteGraphicCommand:
.aa5d		0d 74 07	ora $0774			ora 	gxCommandID 				; make a full command
.aa60		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.aa63		b0 01		bcs $aa66			bcs 	_EGCError
.aa65		60		rts				rts
.aa66						_EGCError:
.aa66		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.aa69						RunGraphicsCommand:
.aa69		8d 74 07	sta $0774			sta 	gxCommandID					; save TODO graphics command.
.aa6c		68		pla				pla 								; pop handler address
.aa6d		fa		plx				plx
.aa6e		1a		inc a				inc 	a
.aa6f		d0 01		bne $aa72			bne 	_RGINoCarry
.aa71		e8		inx				inx
.aa72						_RGINoCarry:
.aa72		8d 79 07	sta $0779			sta 	gxHandler
.aa75		8e 7a 07	stx $077a			stx 	gxHandler+1
.aa78						_RGICommandLoop:
.aa78		b1 30		lda ($30),y			lda 	(codePtr),y
.aa7a		c8		iny				iny
.aa7b		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.aa7d		f0 53		beq $aad2			beq 	_RGI_To
.aa7f		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.aa81		f0 55		beq $aad8			beq 	_RGI_Here
.aa83		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.aa85		f0 3d		beq $aac4			beq 	_RGI_Exit
.aa87		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.aa89		f0 39		beq $aac4			beq 	_RGI_Exit
.aa8b		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.aa8d		f0 3e		beq $aacd			beq 	_RGI_Frame
.aa8f		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.aa91		f0 33		beq $aac6			beq 	_RGI_Solid
.aa93		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.aa95		f0 4b		beq $aae2			beq 	_RGI_By
.aa97		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.aa99		f0 17		beq $aab2			beq 	_RGI_Move2
.aa9b		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.aa9d		f0 62		beq $ab01			beq 	_RGI_Dim
.aa9f		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.aaa1		f0 74		beq $ab17			beq 	_RGI_Colour
.aaa3		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.aaa5		f0 70		beq $ab17			beq 	_RGI_Colour
.aaa7		ae 74 07	ldx $0774			ldx 	gxCommandID
.aaaa		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.aaac		d0 03		bne $aab1			bne 	_RGI_Move 					; move
.aaae		4c 3f ab	jmp $ab3f			jmp		_RGI_SpriteInstructions
.aab1						_RGI_Move:
.aab1		88		dey				dey 								; unpick get.
.aab2						_RGI_Move2:
.aab2		20 65 ab	jsr $ab65			jsr 	GCGetCoordinatePair 		; move to here
.aab5		20 8c ab	jsr $ab8c			jsr 	GCCopyPairToStore 			; save
.aab8		5a		phy				phy
.aab9		20 82 ab	jsr $ab82			jsr 	GCLoadAXY 					; load in
.aabc		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.aabe		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aac1		7a		ply				ply
.aac2		80 b4		bra $aa78			bra 	_RGICommandLoop 			; and go round
.aac4						_RGI_Exit:
.aac4		88		dey				dey 								; unpick : / EOL
.aac5		60		rts				rts
.aac6						_RGI_Solid:
.aac6		a9 02		lda #$02			lda 	#2
.aac8		8d 75 07	sta $0775			sta 	gxFillSolid
.aacb		80 ab		bra $aa78			bra 	_RGICommandLoop
.aacd						_RGI_Frame:
.aacd		9c 75 07	stz $0775			stz 	gxFillSolid
.aad0		80 a6		bra $aa78			bra 	_RGICommandLoop
.aad2						_RGI_To:
.aad2		20 65 ab	jsr $ab65			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.aad5		20 8c ab	jsr $ab8c			jsr 	GCCopyPairToStore
.aad8						_RGI_Here:
.aad8		5a		phy				phy
.aad9		20 82 ab	jsr $ab82			jsr 	GCLoadAXY 					; load it into AXY
.aadc		20 3c ab	jsr $ab3c			jsr 	_RGICallHandler 			; go do whatever it is.
.aadf		7a		ply				ply
.aae0		80 96		bra $aa78			bra 	_RGICommandLoop 			; and go round
.aae2						_RGI_By:
.aae2		20 72 ab	jsr $ab72			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.aae5		18		clc				clc
.aae6		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aae8		6d 76 07	adc $0776			adc 	gxXPos
.aaeb		8d 76 07	sta $0776			sta 	gxXPos
.aaee		a5 61		lda $61				lda 	NSMantissa1+1
.aaf0		6d 77 07	adc $0777			adc 	gxXPos+1
.aaf3		8d 77 07	sta $0777			sta 	gxXPos+1
.aaf6		a5 5a		lda $5a				lda 	NSMantissa0+2
.aaf8		18		clc				clc
.aaf9		6d 78 07	adc $0778			adc 	gxYPos
.aafc		8d 78 07	sta $0778			sta 	gxYPos
.aaff		80 d7		bra $aad8			bra 	_RGI_Here
.ab01						_RGI_Dim:
.ab01		a2 01		ldx #$01			ldx	 	#1
.ab03		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.ab06		a5 59		lda $59				lda 	NSMantissa0+1
.ab08		c9 00		cmp #$00			cmp 	#0
.ab0a		f0 2d		beq $ab39			beq 	_RGIRange
.ab0c		c9 09		cmp #$09			cmp 	#8+1
.ab0e		b0 29		bcs $ab39			bcs		_RGIRange
.ab10		3a		dec a				dec 	a
.ab11		8d 7b 07	sta $077b			sta 	gxDrawScale
.ab14		4c 78 aa	jmp $aa78			jmp 	_RGICommandLoop
.ab17						_RGI_Colour:
.ab17		a2 01		ldx #$01			ldx 	#1 							; colour
.ab19		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.ab1c		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ab1e		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.ab21		b1 30		lda ($30),y			lda 	(codePtr),y
.ab23		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ab25		d0 04		bne $ab2b			bne 	_RGICDefaultMode
.ab27		c8		iny				iny
.ab28		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.ab2b						_RGICDefaultMode:
.ab2b		5a		phy				phy
.ab2c		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.ab2e		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab30		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab32		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab35		7a		ply				ply
.ab36		4c 78 aa	jmp $aa78			jmp 	_RGICommandLoop 			; and go round
.ab39						_RGIRange:
.ab39		4c 21 a8	jmp $a821			jmp 	RangeError
.ab3c						_RGICallHandler:
.ab3c		6c 79 07	jmp ($0779)			jmp 	(gxHandler)
.ab3f						_RGI_SpriteInstructions:
.ab3f		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab41		f0 07		beq $ab4a			beq 	_RGISpriteOff
.ab43		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.ab45		f0 13		beq $ab5a			beq 	_RGISetImage
.ab47		4c b1 aa	jmp $aab1			jmp 	_RGI_Move
.ab4a						_RGISpriteOff:
.ab4a		5a		phy				phy
.ab4b		a0 01		ldy #$01			ldy 	#1
.ab4d		a2 00		ldx #$00			ldx 	#0
.ab4f						_RGIDoCommandLoop:
.ab4f		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ab51		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab54		7a		ply				ply
.ab55		b0 e2		bcs $ab39			bcs 	_RGIRange
.ab57		4c 78 aa	jmp $aa78			jmp 	_RGICommandLoop
.ab5a						_RGISetImage:
.ab5a		a2 01		ldx #$01			ldx 	#1
.ab5c		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger
.ab5f		5a		phy				phy
.ab60		aa		tax				tax
.ab61		a0 00		ldy #$00			ldy 	#0
.ab63		80 ea		bra $ab4f			bra 	_RGIDoCommandLoop
.ab65						GCGetCoordinatePair:
.ab65		a2 01		ldx #$01			ldx 	#1
.ab67		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.ab6a		20 20 96	jsr $9620			jsr 	CheckComma
.ab6d		e8		inx				inx
.ab6e		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.ab71		60		rts				rts
.ab72						GCSignedCoordinatePair:
.ab72		a2 01		ldx #$01			ldx 	#1
.ab74		20 28 a6	jsr $a628			jsr 	Evaluate16BitIntegerSigned
.ab77		20 20 96	jsr $9620			jsr 	CheckComma
.ab7a		e8		inx				inx
.ab7b		20 28 a6	jsr $a628			jsr 	Evaluate16BitIntegerSigned
.ab7e		60		rts				rts
.ab7f						_GCCPRange:
.ab7f		4c 21 a8	jmp $a821			jmp 	RangeError
.ab82						GCLoadAXY:
.ab82		ad 77 07	lda $0777			lda 	gxXPos+1
.ab85		ae 76 07	ldx $0776			ldx 	gxXPos
.ab88		ac 78 07	ldy $0778			ldy 	gxYPos
.ab8b		60		rts				rts
.ab8c						GCCopyPairToStore:
.ab8c		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ab8e		8d 76 07	sta $0776			sta 	gxXPos
.ab91		a5 61		lda $61				lda 	NSMantissa1+1
.ab93		8d 77 07	sta $0777			sta 	gxXPos+1
.ab96		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab98		8d 78 07	sta $0778			sta 	gxYPos
.ab9b		60		rts				rts
.0774						gxCommandID:
>0774								.fill 	1
.0775						gxFillSolid:
>0775								.fill 	1
.0776						gxXPos:
>0776								.fill 	2
.0778						gxYPos:
>0778								.fill 	1
.0779						gxHandler:
>0779								.fill 	2
.077b						gxDrawScale:
>077b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.ab9c						BitmapCtrl:
.ab9c		b1 30		lda ($30),y			lda 	(codePtr),y
.ab9e		c8		iny				iny
.ab9f		a2 01		ldx #$01			ldx 	#1
.aba1		c9 cb		cmp #$cb			cmp 	#KWD_ON
.aba3		f0 11		beq $abb6			beq 	BitmapSwitch
.aba5		ca		dex				dex
.aba6		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.aba8		f0 0c		beq $abb6			beq 	BitmapSwitch
.abaa		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get the colour
.abad		5a		phy				phy
.abae		aa		tax				tax
.abaf		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.abb1		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abb4		7a		ply				ply
.abb5		60		rts				rts
.abb6						BitmapSwitch:
.abb6		5a		phy				phy
.abb7		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.abb9		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.abbb		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abbe		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.abc0		a0 00		ldy #$00			ldy 	#0
.abc2		a2 ff		ldx #$ff			ldx 	#$FF
.abc4		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abc7		9c 75 07	stz $0775			stz 	gxFillSolid
.abca		9c 76 07	stz $0776			stz 	gxXPos
.abcd		9c 77 07	stz $0777			stz 	gxXPos+1
.abd0		9c 78 07	stz $0778			stz 	gxYPos
.abd3		9c 7b 07	stz $077b			stz 	gxDrawScale
.abd6		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.abd8		a2 00		ldx #$00			ldx 	#0
.abda		a0 00		ldy #$00			ldy 	#0
.abdc		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abdf		7a		ply				ply
.abe0		60		rts				rts
.abe1						SpritesCtrl:
.abe1		b1 30		lda ($30),y			lda 	(codePtr),y
.abe3		c8		iny				iny
.abe4		a2 01		ldx #$01			ldx 	#1
.abe6		c9 cb		cmp #$cb			cmp 	#KWD_ON
.abe8		f0 08		beq $abf2			beq 	SpriteSwitch
.abea		ca		dex				dex
.abeb		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.abed		f0 03		beq $abf2			beq 	SpriteSwitch
.abef		4c 1c a8	jmp $a81c			jmp 	SyntaxError
.abf2						SpriteSwitch:
.abf2		5a		phy				phy
.abf3		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.abf5		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.abf7		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.abfa		7a		ply				ply
.abfb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.abfc						GfxCommand:
.abfc		a2 00		ldx #$00			ldx 	#0
.abfe		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; command
.ac01		20 20 96	jsr $9620			jsr 	CheckComma
.ac04		e8		inx				inx
.ac05		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; X
.ac08		20 20 96	jsr $9620			jsr 	CheckComma
.ac0b		e8		inx				inx
.ac0c		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; Y
.ac0f		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.ac11		4a		lsr a				lsr 	a
.ac12		d0 12		bne $ac26			bne 	_GfxError
.ac14		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.ac16		b0 0e		bcs $ac26			bcs 	_GfxError 					; bit 7 should have been zero
.ac18		5a		phy				phy 								; save pos
.ac19		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.ac1b		a6 59		ldx $59				ldx 	NSMantissa0+1
.ac1d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ac1f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ac22		b0 02		bcs $ac26			bcs 	_GfxError
.ac24		7a		ply				ply 								; restore pos and exit.
.ac25		60		rts				rts
.ac26						_GfxError:
.ac26		4c 21 a8	jmp $a821			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.ac29						UnaryHit:
.ac29		fa		plx				plx
.ac2a		a9 36		lda #$36			lda 	#zTemp0
.ac2c		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get sprite number 0
.ac2f		20 20 96	jsr $9620			jsr 	CheckComma
.ac32		e8		inx				inx
.ac33		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ac36		20 18 96	jsr $9618			jsr		CheckRightBracket
.ac39		ca		dex				dex 								; fix back up again.
.ac3a		da		phx				phx 								; save X/Y
.ac3b		5a		phy				phy
.ac3c		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ac3e		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac40		aa		tax				tax
.ac41		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ac43		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.ac46		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ac47		7a		ply				ply 								; restore XY
.ac48		fa		plx				plx
.ac49		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte 					; return the hit result
.ac4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.ac4d						PaletteCommand:
.ac4d		a2 00		ldx #$00			ldx 	#0
.ac4f		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; colour
.ac52		20 20 96	jsr $9620			jsr 	CheckComma
.ac55		e8		inx				inx
.ac56		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; r
.ac59		20 20 96	jsr $9620			jsr 	CheckComma
.ac5c		e8		inx				inx
.ac5d		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; g
.ac60		20 20 96	jsr $9620			jsr 	CheckComma
.ac63		e8		inx				inx
.ac64		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; b
.ac67		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.ac69		85 36		sta $36				sta 	zTemp0
.ac6b		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.ac6d		85 37		sta $37				sta 	zTemp0+1
.ac6f		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.ac71		26 37		rol $37				rol	 	zTemp0+1
.ac73		06 36		asl $36				asl 	zTemp0
.ac75		26 37		rol $37				rol	 	zTemp0+1
.ac77		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.ac79		85 01		sta $01				sta 	1
.ac7b		5a		phy				phy
.ac7c		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.ac7e		92 36		sta ($36)			sta 	(zTemp0)
.ac80		a0 01		ldy #$01			ldy 	#1
.ac82		a5 5a		lda $5a				lda 	NSMantissa0+2
.ac84		91 36		sta ($36),y			sta 	(zTemp0),y
.ac86		a5 59		lda $59				lda 	NSMantissa0+1
.ac88		c8		iny				iny
.ac89		91 36		sta ($36),y			sta 	(zTemp0),y
.ac8b		7a		ply				ply
.ac8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.ac8d						XLoadCommand:
.ac8d		20 9d 8f	jsr $8f9d			jsr 	NewProgram
.ac90		20 ba 84	jsr $84ba			jsr 	BackloadProgram
.ac93		4c 79 85	jmp $8579			jmp 	WarmStart
.ac96						XGoCommand:
.ac96		20 9d 8f	jsr $8f9d			jsr 	NewProgram
.ac99		20 ba 84	jsr $84ba			jsr 	BackloadProgram
.ac9c		4c 28 91	jmp $9128			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.ac9f						UnaryEvent:
.ac9f		fa		plx				plx
.aca0		20 39 ad	jsr $ad39			jsr 	TimerToStackX 				; timer in +0
.aca3		e8		inx				inx  								; put reference into +1
.aca4		20 7f 9f	jsr $9f7f			jsr 	EvaluateTerm
.aca7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.aca9		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.acab		d0 4c		bne $acf9			bne 	_UEType
.acad		e8		inx				inx 								; put the step in +2
.acae		20 20 96	jsr $9620			jsr 	CheckComma
.acb1		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger
.acb4		20 18 96	jsr $9618			jsr 	CheckRightBracket
.acb7		ca		dex				dex
.acb8		ca		dex				dex
.acb9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.acbb		85 36		sta $36				sta 	zTemp0
.acbd		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.acbf		85 37		sta $37				sta 	zTemp0+1
.acc1		5a		phy				phy
.acc2		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.acc4		b1 36		lda ($36),y			lda 	(zTemp0),y
.acc6		30 2d		bmi $acf5			bmi 	_UEFalse 					; exit if signed.
.acc8		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.acca		b5 58		lda $58,x			lda 	NSMantissa0,x
.accc		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.acce		c8		iny				iny
.accf		b5 60		lda $60,x			lda 	NSMantissa1,x
.acd1		f1 36		sbc ($36),y			sbc		(zTemp0),y
.acd3		c8		iny				iny
.acd4		b5 68		lda $68,x			lda 	NSMantissa2,x
.acd6		f1 36		sbc ($36),y			sbc		(zTemp0),y
.acd8		90 1b		bcc $acf5			bcc 	_UEFalse 					; no, return FALSE.
.acda		18		clc				clc
.acdb		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.acdd		b5 58		lda $58,x			lda 	NSMantissa0,x
.acdf		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ace1		91 36		sta ($36),y			sta 	(zTemp0),y
.ace3		c8		iny				iny
.ace4		b5 60		lda $60,x			lda 	NSMantissa1,x
.ace6		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ace8		91 36		sta ($36),y			sta 	(zTemp0),y
.acea		c8		iny				iny
.aceb		b5 68		lda $68,x			lda 	NSMantissa2,x
.aced		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.acef		91 36		sta ($36),y			sta 	(zTemp0),y
.acf1		7a		ply				ply
.acf2		4c 9e 96	jmp $969e			jmp 	ReturnTrue
.acf5						_UEFalse:
.acf5		7a		ply				ply 								; restore Y
.acf6		4c a9 96	jmp $96a9			jmp 	ReturnFalse 				; and return False
.acf9						_UEType:
.acf9		4c 26 a8	jmp $a826			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.acfc						UnaryJoyX:
.acfc		18		clc				clc
.acfd		80 01		bra $ad00			bra 	JoyMain
.acff						UnaryJoyY:
.acff		38		sec				sec
.ad00						JoyMain:
.ad00		fa		plx				plx 								; get pos
.ad01		08		php				php 								; save carry (set for Y)
.ad02		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad05		20 18 96	jsr $9618			jsr 	CheckRightBracket
.ad08		20 3f 82	jsr $823f			jsr 	EXTReadController 			; read the controller.
.ad0b		28		plp				plp
.ad0c		b0 02		bcs $ad10			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.ad0e		4a		lsr a				lsr 	a
.ad0f		4a		lsr a				lsr 	a
.ad10						_JMNoShift:
.ad10		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ad11		b0 07		bcs $ad1a			bcs 	JMIsLeft
.ad13		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ad14		b0 07		bcs $ad1d			bcs 	JMIsRight
.ad16		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; zero result
.ad19		60		rts				rts
.ad1a						JMIsLeft:
.ad1a		4c 9e 96	jmp $969e			jmp 	ReturnTrue
.ad1d						JMIsRight:
.ad1d		a9 01		lda #$01			lda 	#1
.ad1f		20 a0 a6	jsr $a6a0			jsr 	NSMSetByte
.ad22		60		rts				rts
.ad23						UnaryJoyB:
.ad23		fa		plx				plx 								; get pos
.ad24		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad27		20 18 96	jsr $9618			jsr 	CheckRightBracket
.ad2a		20 3f 82	jsr $823f			jsr 	EXTReadController 			; read the controller.
.ad2d		29 10		and #$10			and 	#$10
.ad2f		d0 e9		bne $ad1a			bne 	JMIsLeft
.ad31		20 9e a6	jsr $a69e			jsr 	NSMSetZero
.ad34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ad35						UnaryTimer:
.ad35		fa		plx				plx
.ad36		20 18 96	jsr $9618			jsr 	CheckRightBracket
.ad39						TimerToStackX:
.ad39		20 9e a6	jsr $a69e			jsr 	NSMSetZero 					; zero result
.ad3c		64 01		stz $01				stz 	1 							; access I/O
.ad3e		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ad41		95 58		sta $58,x			sta 	NSMantissa0,x
.ad43		ad 5a d6	lda $d65a			lda 	$D65A
.ad46		95 60		sta $60,x			sta 	NSMantissa1,x
.ad48		ad 5b d6	lda $d65b			lda 	$D65B
.ad4b		95 68		sta $68,x			sta 	NSMantissa2,x
.ad4d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		80 fe		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ad4e						MemoryDeleteLine:
.ad4e		20 6d ad	jsr $ad6d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad51		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad53		a8		tay				tay
.ad54						_MDDLLoop:
.ad54		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad56		92 30		sta ($30)			sta 	(codePtr)
.ad58		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad5a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ad5c		d0 07		bne $ad65			bne 	_MDLDLNext
.ad5e		a5 31		lda $31				lda 	codePtr+1
.ad60		c5 3b		cmp $3b				cmp 	zTemp2+1
.ad62		d0 01		bne $ad65			bne 	_MDLDLNext
.ad64						_MDDLExit:
.ad64		60		rts				rts
.ad65						_MDLDLNext:
.ad65		e6 30		inc $30				inc 	codePtr						; next byte
.ad67		d0 eb		bne $ad54			bne 	_MDDLLoop
.ad69		e6 31		inc $31				inc 	codePtr+1
.ad6b		80 e7		bra $ad54			bra 	_MDDLLoop
.ad6d						IMemoryFindEnd:
.ad6d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad6f		85 3a		sta $3a				sta 	0+zTemp2
.ad71		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad73		85 3b		sta $3b				sta 	1+zTemp2
.ad75						_MDLFELoop:
.ad75		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ad77		f0 0b		beq $ad84			beq 	_MDLFEExit
.ad79		18		clc				clc
.ad7a		65 3a		adc $3a				adc 	zTemp2
.ad7c		85 3a		sta $3a				sta 	zTemp2
.ad7e		90 f5		bcc $ad75			bcc 	_MDLFELoop
.ad80		e6 3b		inc $3b				inc 	zTemp2+1
.ad82		80 f1		bra $ad75			bra 	_MDLFELoop
.ad84						_MDLFEExit:
.ad84		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.ad85						MemoryInsertLine:
.ad85		08		php				php
.ad86		20 6d ad	jsr $ad6d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad89		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ad8b		1a		inc a				inc 	a
.ad8c		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ad8e		b0 36		bcs $adc6			bcs 	_MDLIError 					; no, fail.
.ad90		28		plp				plp 								; do at a specific point or the end ?
.ad91		90 08		bcc $ad9b			bcc 	_MDLIFound 					; if specific point already set.
.ad93		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ad95		85 30		sta $30				sta 	codePtr 					; end.
.ad97		a5 3b		lda $3b				lda 	zTemp2+1
.ad99		85 31		sta $31				sta 	codePtr+1
.ad9b						_MDLIFound:
.ad9b		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ad9e		a8		tay				tay
.ad9f						_MDLIInsert:
.ad9f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ada1		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ada3		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ada5		c5 3a		cmp $3a				cmp 	zTemp2
.ada7		d0 06		bne $adaf			bne 	_MDLINext
.ada9		a5 31		lda $31				lda 	codePtr+1
.adab		c5 3b		cmp $3b				cmp 	zTemp2+1
.adad		f0 0a		beq $adb9			beq 	_MDLIHaveSpace
.adaf						_MDLINext:
.adaf		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.adb1		d0 02		bne $adb5			bne 	_MDLINoBorrow
.adb3		c6 3b		dec $3b				dec 	zTemp2+1
.adb5						_MDLINoBorrow:
.adb5		c6 3a		dec $3a				dec 	zTemp2
.adb7		80 e6		bra $ad9f			bra 	_MDLIInsert
.adb9						_MDLIHaveSpace:
.adb9		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.adbc		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.adbd						_MDLICopy:
.adbd		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.adc0		91 30		sta ($30),y			sta 	(codePtr),y
.adc2		88		dey				dey
.adc3		10 f8		bpl $adbd			bpl 	_MDLICopy
.adc5		60		rts				rts
.adc6						_MDLIError:
.adc6		a9 06		lda #$06		lda	#6
.adc8		4c 31 96	jmp $9631		jmp	ErrorHandler
.adcb						MDLAppendLine:
.adcb		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.adcd		85 36		sta $36				sta 	zTemp0
.adcf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.add1		85 38		sta $38				sta 	0+zTemp1
.add3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.add5		85 39		sta $39				sta 	1+zTemp1
.add7		b2 38		lda ($38)			lda 	(zTemp1)
.add9		d0 0a		bne $ade5			bne 	_MDLANoInitialise
.addb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.addd		8d 7c 07	sta $077c			sta 	0+AppendPointer
.ade0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ade2		8d 7d 07	sta $077d			sta 	1+AppendPointer
.ade5						_MDLANoInitialise:
.ade5		18		clc				clc
.ade6		ad 7c 07	lda $077c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ade9		85 38		sta $38				sta 	zTemp1
.adeb		72 36		adc ($36)			adc 	(zTemp0)
.aded		8d 7c 07	sta $077c			sta 	AppendPointer
.adf0		ad 7d 07	lda $077d			lda 	AppendPointer+1
.adf3		85 39		sta $39				sta 	zTemp1+1
.adf5		69 00		adc #$00			adc 	#0
.adf7		8d 7d 07	sta $077d			sta 	AppendPointer+1
.adfa		a0 00		ldy #$00			ldy 	#0
.adfc						_MDLACopy:
.adfc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.adfe		91 38		sta ($38),y			sta 	(zTemp1),y
.ae00		c8		iny				iny
.ae01		98		tya				tya
.ae02		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae04		d0 f6		bne $adfc			bne 	_MDLACopy
.ae06		a9 00		lda #$00			lda 	#0 							; end of program.
.ae08		91 38		sta ($38),y			sta 	(zTemp1),y
.ae0a		60		rts				rts
.077c						AppendPointer:
>077c								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ae0b						MemoryNew:
.ae0b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae0d		85 30		sta $30				sta 	codePtr
.ae0f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae11		85 31		sta $31				sta 	codePtr+1
.ae13		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ae15		92 30		sta ($30)			sta 	(codePtr)
.ae17		60		rts				rts
.ae18						MemoryInline:
.ae18		98		tya				tya 								; put address into stack,x
.ae19		18		clc				clc  								; get the offset, add codePtr
.ae1a		65 30		adc $30				adc 	codePtr
.ae1c		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ae1e		a5 31		lda $31				lda 	codePtr+1
.ae20		69 00		adc #$00			adc 	#0
.ae22		95 60		sta $60,x			sta 	NSMantissa1,x
.ae24		74 68		stz $68,x			stz 	NSMantissa2,x
.ae26		74 70		stz $70,x			stz 	NSMantissa3,x
.ae28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ae29						MemorySearch:
.ae29		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ae2b		86 37		stx $37				stx 	zTemp0+1
.ae2d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae2f		85 30		sta $30				sta 	codePtr
.ae31		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae33		85 31		sta $31				sta 	codePtr+1
.ae35						_MTAXLoop:
.ae35		b2 30		lda ($30)			lda 	(codePtr)
.ae37		18		clc				clc
.ae38		f0 21		beq $ae5b			beq 	_MTAXExit 					; reached end, exit with CC.
.ae3a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ae3c		b1 30		lda ($30),y			lda 	(codePtr),y
.ae3e		38		sec				sec
.ae3f		e5 36		sbc $36				sbc 	zTemp0
.ae41		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ae43		c8		iny				iny 								; do the MSB
.ae44		b1 30		lda ($30),y			lda 	(codePtr),y
.ae46		e5 37		sbc $37				sbc 	zTemp0+1
.ae48		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ae4a		f0 0f		beq $ae5b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ae4c		b0 0d		bcs $ae5b			bcs 	_MTAXExit 					; current < required exit
.ae4e		18		clc				clc
.ae4f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae51		65 30		adc $30				adc 	codePtr
.ae53		85 30		sta $30				sta 	codePtr
.ae55		90 02		bcc $ae59			bcc 	_CREExit
.ae57		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae59						_CREExit:
.ae59		80 da		bra $ae35			bra 	_MTAXLoop
.ae5b						_MTAXExit:
.ae5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ae5c						UpdateFont:
.ae5c		a5 01		lda $01				lda 	1 							; save position
.ae5e		48		pha				pha
.ae5f		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ae61		85 01		sta $01				sta 	1
.ae63		a9 8a		lda #$8a			lda 	#((FontBinary) & $FF)
.ae65		85 36		sta $36				sta 	0+zTemp0
.ae67		a9 ae		lda #$ae			lda 	#((FontBinary) >> 8)
.ae69		85 37		sta $37				sta 	1+zTemp0
.ae6b		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ae6d		85 38		sta $38				sta 	0+zTemp1
.ae6f		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ae71		85 39		sta $39				sta 	1+zTemp1
.ae73						_UFCopy1:
.ae73		a0 00		ldy #$00			ldy 	#0
.ae75						_UFCopy2:
.ae75		b1 36		lda ($36),y			lda 	(zTemp0),y
.ae77		91 38		sta ($38),y			sta 	(zTemp1),y
.ae79		c8		iny				iny
.ae7a		d0 f9		bne $ae75			bne 	_UFCopy2
.ae7c		e6 37		inc $37				inc 	zTemp0+1
.ae7e		e6 39		inc $39				inc 	zTemp1+1
.ae80		a5 39		lda $39				lda 	zTemp1+1
.ae82		c9 c8		cmp #$c8			cmp 	#$C8
.ae84		d0 ed		bne $ae73			bne 	_UFCopy1
.ae86		68		pla				pla 								; restore.
.ae87		85 01		sta $01				sta 	1
.ae89		60		rts				rts
.ae8a						FontBinary:
>ae8a		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>ae92		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>aea2		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>aeb2		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>aec2		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>aed2		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>aee2		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>aef2		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>af02		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>af12		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>af22		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>af32		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>af42		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>af52		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>af62		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>af72		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>af82		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>af92		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>afa2		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>afb2		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>afc2		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>afd2		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>afe2		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>aff2		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>b002		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>b012		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>b022		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>b032		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>b042		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>b052		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>b062		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>b072		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>b082		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>b092		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>b0a2		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>b0b2		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>b0c2		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>b0d2		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>b0e2		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>b0f2		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b102		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b112		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b122		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b132		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b142		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b152		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b162		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b172		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b182		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b192		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b1a2		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b1b2		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b1c2		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b1d2		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b1e2		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b1f2		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b202		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b212		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b222		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b232		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b242		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b252		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b262		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b272		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b282		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b292		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b2a2		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b2b2		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b2c2		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b2d2		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b2e2		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b2f2		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b302		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b312		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b322		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b332		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b342		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b352		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b362		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b372		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b382		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b392		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b3a2		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b3b2		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b3c2		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b3d2		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b3e2		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b3f2		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b402		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b412		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b422		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b432		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b442		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b452		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b462		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b472		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b482		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b492		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b4a2		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b4b2		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b4c2		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b4d2		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b4e2		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b4f2		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b502		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b512		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b522		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b532		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b542		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b552		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b562		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b572		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b582		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b592		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b5a2		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b5b2		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b5c2		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b5d2		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b5e2		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b5f2		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b602		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b612		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b622		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b632		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b642		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b652		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b662		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b672		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b682		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b68a						PingCommand:
.b68a		5a		phy				phy 								; save pos
.b68b		a9 01		lda #$01			lda 	#1 						; push channel.
.b68d		48		pha				pha
.b68e		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b690		a2 06		ldx #$06			ldx 	#6 						; length
.b692		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b694		80 24		bra $b6ba			bra 	SoundEffectCommand
.b696						ZapCommand:
.b696		5a		phy				phy 								; save pos
.b697		a9 01		lda #$01			lda 	#1 						; push channel.
.b699		48		pha				pha
.b69a		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b69c		a2 0a		ldx #$0a			ldx 	#10 						; length
.b69e		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b6a0		80 18		bra $b6ba			bra 	SoundEffectCommand
.b6a2						ShootCommand:
.b6a2		5a		phy				phy 								; save pos
.b6a3		a9 03		lda #$03			lda 	#3 						; push channel.
.b6a5		48		pha				pha
.b6a6		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b6a8		a2 04		ldx #$04			ldx 	#4 						; length
.b6aa		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6ac		80 0c		bra $b6ba			bra 	SoundEffectCommand
.b6ae						Explode:
.b6ae		5a		phy				phy 								; save pos
.b6af		a9 03		lda #$03			lda 	#3 						; push channel.
.b6b1		48		pha				pha
.b6b2		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b6b4		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6b6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6b8		80 00		bra $b6ba			bra 	SoundEffectCommand
.b6ba						SoundEffectCommand:
.b6ba		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b6bd		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b6c0		a9 0f		lda #$0f			lda 	#15
.b6c2		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b6c5		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b6c8		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b6cb		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b6ce		68		pla				pla
.b6cf		09 10		ora #$10			ora 	#$10  						; execute command $11
.b6d1		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b6d3		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b6d5		20 3f 80	jsr $803f			jsr 	SNDCommand
.b6d8		7a		ply				ply
.b6d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b6da						UnaryPlaying:
.b6da		fa		plx				plx
.b6db		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; get channel #
.b6de		48		pha				pha
.b6df		20 18 96	jsr $9618			jsr		CheckRightBracket
.b6e2		68		pla				pla
.b6e3		c9 04		cmp #$04			cmp 	#4
.b6e5		b0 0c		bcs $b6f3			bcs 	_UPNotPlaying
.b6e7		09 20		ora #$20			ora 	#$20 						; query playing ?
.b6e9		20 3f 80	jsr $803f			jsr 	SNDCommand
.b6ec		c9 00		cmp #$00			cmp 	#0
.b6ee		f0 03		beq $b6f3			beq 	_UPNotPlaying
.b6f0		4c 9e 96	jmp $969e			jmp 	ReturnTrue
.b6f3						_UPNotPlaying:
.b6f3		4c a9 96	jmp $96a9			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b6f6						SoundCommand:
.b6f6		b1 30		lda ($30),y			lda 	(codePtr),y
.b6f8		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b6fa		d0 09		bne $b705			bne 	_SNDMain
.b6fc		c8		iny				iny 								; skip OFF
.b6fd		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b6ff		5a		phy				phy
.b700		20 3f 80	jsr $803f			jsr 	SNDCommand
.b703		7a		ply				ply
.b704		60		rts				rts
.b705						_SNDMain:
.b705		a2 00		ldx #$00			ldx 	#0
.b707		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; channel
.b70a		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b70c		b0 4b		bcs $b759			bcs 	_SndError
.b70e		e8		inx				inx 								; do the rest in slot 1.
.b70f		20 20 96	jsr $9620			jsr 	CheckComma
.b712		20 1e a6	jsr $a61e			jsr 	Evaluate16BitInteger 		; Pitch
.b715		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b717		c9 10		cmp #$10			cmp 	#16
.b719		b0 3e		bcs $b759			bcs 	_SndError
.b71b		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b71e		b5 58		lda $58,x			lda 	NSMantissa0,x
.b720		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b723		20 20 96	jsr $9620			jsr 	CheckComma
.b726		20 39 a6	jsr $a639			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b729		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b72c		a9 0f		lda #$0f			lda 	#15
.b72e		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b731		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b734		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b737		b1 30		lda ($30),y			lda 	(codePtr),y
.b739		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b73b		d0 0e		bne $b74b			bne 	_SNDPlay
.b73d		c8		iny				iny
.b73e		20 28 a6	jsr $a628			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b741		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b743		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b746		b5 60		lda $60,x			lda 	NSMantissa1,x
.b748		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b74b						_SNDPlay:
.b74b		5a		phy				phy
.b74c		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b74e		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b750		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b752		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b754		20 3f 80	jsr $803f			jsr 	SNDCommand
.b757		7a		ply				ply
.b758		60		rts				rts
.b759						_SndError:
.b759		4c 21 a8	jmp $a821			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b75c						StackPushByte:
.b75c		48		pha				pha 								; save byte on stack
.b75d		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b75f		d0 08		bne $b769			bne 	_SPBNoBorrow
.b761		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b763		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b765		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b767		90 06		bcc $b76f			bcc 	_SPBMemory
.b769						_SPBNoBorrow:
.b769		c6 34		dec $34				dec 	basicStack
.b76b		68		pla				pla 								; get back and write
.b76c		92 34		sta ($34)			sta 	(basicStack)
.b76e		60		rts				rts
.b76f						_SPBMemory:
.b76f		a9 12		lda #$12		lda	#18
.b771		4c 31 96	jmp $9631		jmp	ErrorHandler
.b774						StackPopByte:
.b774		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b776		e6 34		inc $34				inc 	basicStack
.b778		d0 02		bne $b77c			bne 	_SPBNoCarry
.b77a		e6 35		inc $35				inc 	basicStack+1
.b77c						_SPBNoCarry:
.b77c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b77d						StackOpen:
.b77d		48		pha				pha 								; save frame byte
.b77e		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b780		0a		asl a				asl 	a 							; claim twice this for storage
.b781		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b783		38		sec				sec 								; so basically subtracting from
.b784		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b786		85 34		sta $34				sta 	basicStack
.b788		b0 09		bcs $b793			bcs 	_SONoBorrow
>b78a		db						.byte 	$DB 						; causes a break in the emulator
.b78b		c6 35		dec $35				dec 	basicStack+1
.b78d		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b78f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b791		90 04		bcc $b797			bcc 	_SOMemory
.b793						_SONoBorrow:
.b793		68		pla				pla 								; get marker back and write at TOS
.b794		92 34		sta ($34)			sta 	(basicStack)
.b796		60		rts				rts
.b797						_SOMemory:
.b797		a9 12		lda #$12		lda	#18
.b799		4c 31 96	jmp $9631		jmp	ErrorHandler
.b79c						StackClose:
.b79c		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b79e		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b7a0		0a		asl a				asl 	a 							; claim twice this.
.b7a1		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b7a3		85 34		sta $34				sta 	basicStack
.b7a5		90 02		bcc $b7a9			bcc 	_SCExit
.b7a7		e6 35		inc $35				inc 	basicStack+1
.b7a9						_SCExit:
.b7a9		60		rts				rts
.b7aa						StackCheckFrame:
.b7aa		48		pha				pha
.b7ab						_StackRemoveLocals:
.b7ab		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b7ad		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b7af		b0 05		bcs $b7b6			bcs 	_SCNoLocal
.b7b1		20 3c 8e	jsr $8e3c			jsr 	LocalPopValue 				; restore the local value
.b7b4		80 f5		bra $b7ab			bra 	_StackRemoveLocals 			; gr round again
.b7b6						_SCNoLocal:
.b7b6		68		pla				pla 								; get the frame check.
.b7b7		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b7b9		29 f0		and #$f0			and 	#$F0 						; check type bits
.b7bb		d0 01		bne $b7be			bne 	_SCFError 					; different, we have structures mixed up
.b7bd		60		rts				rts
.b7be						_SCFError:
.b7be		8a		txa				txa 								; report error X
.b7bf		4c 31 96	jmp $9631			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b7c2						STKSaveCodePosition:
.b7c2		5a		phy				phy
.b7c3		98		tya				tya 								; save Y
.b7c4		a0 05		ldy #$05			ldy 	#5
.b7c6		91 34		sta ($34),y			sta 	(basicStack),y
.b7c8		88		dey				dey 								; save Code Pointer
.b7c9						_STKSaveLoop:
.b7c9		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b7cc		91 34		sta ($34),y			sta 	(basicStack),y
.b7ce		88		dey				dey
.b7cf		d0 f8		bne $b7c9			bne 	_STKSaveLoop
.b7d1		7a		ply				ply
.b7d2		60		rts				rts
.b7d3						STKLoadCodePosition:
.b7d3		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b7d5						_STKLoadLoop:
.b7d5		b1 34		lda ($34),y			lda 	(basicStack),y
.b7d7		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b7da		c8		iny				iny
.b7db		c0 05		cpy #$05			cpy 	#5
.b7dd		d0 f6		bne $b7d5			bne 	_STKLoadLoop
.b7df		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b7e1		a8		tay				tay
.b7e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b7e3						StackReset:
.b7e3		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b7e5		85 34		sta $34				sta 	0+basicStack
.b7e7		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b7e9		85 35		sta $35				sta 	1+basicStack
.b7eb		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b7ed		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b7ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b7f0						StringConcrete:
.b7f0		5a		phy				phy 								; save position on stack
.b7f1		20 6b a1	jsr $a16b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b7f4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b7f6		85 38		sta $38				sta 	zTemp1
.b7f8		b5 60		lda $60,x			lda 	NSMantissa1,x
.b7fa		85 39		sta $39				sta 	zTemp1+1
.b7fc		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b7fe						_SALength:
.b7fe		c8		iny				iny
.b7ff		b1 38		lda ($38),y			lda 	(zTemp1),y
.b801		d0 fb		bne $b7fe			bne 	_SALength
.b803		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b805		b0 3d		bcs $b844			bcs 	_SALengthError
.b807		98		tya				tya 				 				; length of the new string
.b808		18		clc				clc
.b809		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b80b		90 02		bcc $b80f			bcc 	_SAHaveLength
.b80d		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b80f						_SAHaveLength:
.b80f		48		pha				pha 								; save length.
.b810		38		sec				sec
.b811		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b813		6d 0a 04	adc $040a			adc 	stringMemory
.b816		8d 0a 04	sta $040a			sta 	stringMemory
.b819		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b81b		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b81d		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b81f		6d 0b 04	adc $040b			adc 	stringMemory+1
.b822		8d 0b 04	sta $040b			sta 	stringMemory+1
.b825		85 3b		sta $3b				sta 	zTemp2+1
.b827		95 60		sta $60,x			sta 	NSMantissa1,x
.b829		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b82a		38		sec				sec
.b82b		e9 03		sbc #$03			sbc 	#3
.b82d		92 3a		sta ($3a)			sta 	(zTemp2)
.b82f		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b831		a0 01		ldy #$01			ldy 	#1
.b833		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b835						_SACopyNewString:
.b835		a0 00		ldy #$00			ldy 	#0
.b837						_SACopyNSLoop:
.b837		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b839		c8		iny				iny 								; write two on in string storage
.b83a		c8		iny				iny
.b83b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b83d		88		dey				dey 								; this makes it one one.
.b83e		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b840		d0 f5		bne $b837			bne 	_SACopyNSLoop
.b842		7a		ply				ply
.b843		60		rts				rts
.b844						_SALengthError:
.b844		a9 09		lda #$09		lda	#9
.b846		4c 31 96	jmp $9631		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b849						StringSystemInitialise:
.b849		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b84b		8d 0a 04	sta $040a			sta 	0+stringMemory
.b84e		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b850		8d 0b 04	sta $040b			sta 	1+stringMemory
.b853		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b856		60		rts				rts
.b857						StringSpaceInitialise:
.b857		20 6b a1	jsr $a16b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b85a		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b85c		8d 0c 04	sta $040c			sta 	stringInitialised
.b85f		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b862		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b865		ad 0b 04	lda $040b			lda 	stringMemory+1
.b868		3a		dec a				dec 	a
.b869		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b86c		60		rts				rts
.b86d						StringTempAllocate:
.b86d		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b86f		b0 30		bcs $b8a1			bcs 	_STALength
.b871		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b874		30 05		bmi $b87b			bmi 	_STAAllocate
.b876		48		pha				pha 								; save value to subtract.
.b877		20 57 b8	jsr $b857			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b87a		68		pla				pla 								; restore it
.b87b						_STAAllocate:
.b87b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b87d		18		clc				clc  								; deliberate allows one more
.b87e		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b881		8d 0d 04	sta $040d			sta 	stringTempPointer
.b884		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b886		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b888		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b88b		69 ff		adc #$ff			adc 	#$FF
.b88d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b890		85 3d		sta $3d				sta 	zsTemp+1
.b892		95 60		sta $60,x			sta 	NSMantissa1,x
.b894		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b896		74 70		stz $70,x			stz 	NSMantissa3,x
.b898		a9 10		lda #$10			lda 	#NSTString
.b89a		95 50		sta $50,x			sta 	NSStatus,x
.b89c		a9 00		lda #$00			lda 	#0 							; clear the target string
.b89e		92 3c		sta ($3c)			sta 	(zsTemp)
.b8a0		60		rts				rts
.b8a1						_STALength:
.b8a1		a9 09		lda #$09		lda	#9
.b8a3		4c 31 96	jmp $9631		jmp	ErrorHandler
.b8a6						StringTempWrite:
.b8a6		48		pha				pha
.b8a7		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b8a9		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b8ab		d0 02		bne $b8af			bne 	_STWNoCarry
.b8ad		e6 3d		inc $3d				inc 	zsTemp+1
.b8af						_STWNoCarry:
.b8af		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b8b1		92 3c		sta ($3c)			sta 	(zsTemp)
.b8b3		68		pla				pla
.b8b4		60		rts				rts

;******  Return to file: _basic.asm

.b8b5						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 73 07	cmp $0773			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 18 bc	jsr $bc18			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 29 82	jsr $8229			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 86 07	sta $0786			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 84 07	lda $0784			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c800	a800	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8b 07	sta $078b			sta 	gxCurrentY
.c80a	a80a	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 89 07	sta $0789			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9d 07	cmp $079d			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c83c	a83c	9d 91 07	sta $0791,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2d 08	stz $082d			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c898	a898	8d 2b 08	sta $082b			sta 	gxYCentre
.c89b	a89b	8e 2a 08	stx $082a			stx 	gxxCentre
.c89e	a89e	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2d 08	sta $082d			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2b 08	lda $082b			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2a 08	lda $082a			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8df	a8df	8d 2b 08	sta $082b			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8f6	a8f6	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2a 08	lda $082a			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c918	a918	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2a 08	lda $082a			lda 	gxxCentre
.c91f	a91f	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2d 08	dec $082d			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 97 07	lda $0797			lda 	gxY1
.c958	a958	ed 93 07	sbc $0793			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 29 08	sta $0829			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2a 08	stz $082a			stz 	gxxCentre
.c96c	a96c	ad 29 08	lda $0829			lda 	gxRadius
.c96f	a96f	8d 2b 08	sta $082b			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 95 07	lda $0795,x			lda 	gxX1,x
.c987	a987	7d 91 07	adc $0791,x			adc 	gxX0,x
.c98a	a98a	9d 95 07	sta $0795,x			sta 	gxX1,x
.c98d	a98d	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c990	a990	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c997	a997	7e 95 07	ror $0795,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9d 07	lda $079d			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9b 07	adc $079b			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9f4	a9f4	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9b 07	sta $079b			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9d 07	stx $079d			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a1 07	and $07a1			and 	gxANDValue
.cac1	aac1	4d a0 07	eor $07a0			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 95 07	eor $0795			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 92 07	lda $0792			lda 	gxX0+1
.cae7	aae7	4d 96 07	eor $0796			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 97 07	lda $0797			lda 	gxY1
.caee	aaee	4d 93 07	eor $0793			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 32 08	lda $0832			lda 	gxPosition
.caf6	aaf6	6d 33 08	adc $0833			adc 	gxAdjust
.caf9	aaf9	8d 32 08	sta $0832			sta 	gxPosition
.cafc	aafc	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 34 08	sbc $0834			sbc 	gxTotal
.cb0d	ab0d	8d 32 08	sta $0832			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 35 08	lda $0835			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 35 08	lda $0835			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 31 08	lda $0831			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 91 07	lda $0791			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 92 07	dec $0792			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 91 07	dec $0791			dec 	gxX0
.cb3e	ab3e	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a3 07	lda $07a3			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 91 07	inc $0791			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 92 07	inc $0792			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 93 07	inc $0793			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 97 07	lda $0797			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 93 07	sbc $0793			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2f 08	sta $082f			sta 	gxDiffY
.cb86	ab86	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 95 07	lda $0795			lda 	gxX1
.cb8d	ab8d	ed 91 07	sbc $0791			sbc 	gxX0
.cb90	ab90	8d 2e 08	sta $082e			sta 	gxDiffX
.cb93	ab93	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2e 08	ror $082e			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cba6	aba6	8d 2e 08	sta $082e			sta 	gxDiffX
.cba9	aba9	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 33 08	sta $0833			sta 	gxAdjust
.cbb5	abb5	ad 2e 08	lda $082e			lda 	gxDiffX
.cbb8	abb8	8d 34 08	sta $0834			sta 	gxTotal
.cbbb	abbb	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 33 08	sta $0833			sta 	gxAdjust
.cbcc	abcc	ad 2f 08	lda $082f			lda 	gxDiffY
.cbcf	abcf	8d 34 08	sta $0834			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 34 08	lda $0834			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 32 08	sta $0832			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9f 07	ldx $079f			ldx 	gxColour
.cbec	abec	8e a0 07	stx $07a0			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a1 07	stx $07a1			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a0 07	stz $07a0			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a1 07	lda $07a1			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a1 07	sta $07a1			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a3 07	ldy $07a3			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a1 07	and $07a1			and 	gxANDValue
.cc16	ac16	4d a0 07	eor $07a0			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 97 07	cmp $0797			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc48	ac48	cd 97 07	cmp $0797			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 95 07	lda $0795			lda		gxX1
.cc65	ac65	ed 91 07	sbc $0791			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 96 07	lda $0796			lda 	gxX1+1
.cc6d	ac6d	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a3 07	lda $07a3			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a1 07	and $07a1			and 	gxANDValue
.cc8a	ac8a	4d a0 07	eor $07a0			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a1 07	and $07a1			and 	gxANDValue
.cca8	aca8	4d a0 07	eor $07a0			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a1 07	and $07a1			and 	gxANDValue
.ccc0	acc0	4d a0 07	eor $07a0			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a3 07	sta $07a3			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 36 08	sta $0836			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.cce7	ace7	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3a 08	sta $083a			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 37 08	lda $0837			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.cd20	ad20	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 36 08	cmp $0836			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 93 07	sta $0793			sta 	gxY0
.cd39	ad39	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 36 08	lda $0836			lda 	gxSize
.cd40	ad40	6d 91 07	adc $0791			adc 	gxX0
.cd43	ad43	8d 91 07	sta $0791			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 92 07	inc $0792			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 37 08	lda $0837			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a1 07	and $07a1			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 36 08	cmp $0836			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 93 07	inc $0793			inc 	gxY0
.cda1	ada1	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9e 07	eor $079e			eor 	gxMode
.cda7	ada7	8d 3b 08	sta $083b			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9f 07	lda $079f			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9e 07	eor $079e			eor 	gxMode
.cdf4	adf4	8d 3b 08	sta $083b			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 99 07	lda $0799			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 92 07	lda $0792			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 93 07	adc $0793			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 91 07	ror $0791			ror 	gxX0
.cf60	af60	4e 91 07	lsr $0791			lsr 	gxX0
.cf63	af63	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 93 07	lsr $0793			lsr 	gxY0
.cf69	af69	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 91 07	ora $0791			ora 	gxX0
.cf74	af74	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf77	af77	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 93 07	ora $0793			ora 	gxY0
.cf7f	af7f	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a3 07	sta $07a3			sta 	gxOffset
.cfd1	afd1	ad 92 07	lda $0792			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a3 07	lda $07a3			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a3 07	sta $07a3			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d023	b023	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d051	b051	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d09e	b09e	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a1	b0a1	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a7	b0a7	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 95 07	cmp $0795			cmp 	gxX1
.d0bb	b0bb	ad 92 07	lda $0792			lda 	gxX0+1
.d0be	b0be	ed 96 07	sbc $0796			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 97 07	cmp $0797			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0eb	b0eb	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 91 07	sta $0791,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d17a	b17a	55 4e 54 28
>d17e	b17e	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d186	b186	54 24 28
>d189	b189	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d190	b190	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d197	b197	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d19e	b19e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d1a6	b1a6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d1ac	b1ac	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d1b2	b1b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d1b9	b1b9	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d1bf	b1bf	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1c5	b1c5	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1cc	b1cc	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1d4	b1d4	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1dc	b1dc	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1e4	b1e4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1ec	b1ec	47 28
>d1ee	b1ee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1f6	b1f6	28
>d1f7	b1f7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1ff	b1ff	28
>d200	b200	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d206	b206	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d20c	b20c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d212	b212	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d219	b219	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d221	b221	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d227	b227	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d22d	b22d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d232	b232	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d236	b236	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d23c	b23c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d244	b244	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d24b	b24b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d252	b252	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d25a	b25a	43
>d25b	b25b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d261	b261	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d267	b267	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d26e	b26e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d274	b274	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d278	b278	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d27c	b27c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d282	b282	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d28a	b28a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d291	b291	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d298	b298	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d2a0	b2a0	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d2a6	b2a6	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d2ab	b2ab	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d2b3	b2b3	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d2b9	b2b9	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d2bf	b2bf	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2c4	b2c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2ca	b2ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2d1	b2d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2d6	b2d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2dc	b2dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2e3	b2e3	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2eb	b2eb	59
>d2ec	b2ec	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2f1	b2f1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2f5	b2f5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2fd	b2fd	45
>d2fe	b2fe	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d306	b306	45
>d307	b307	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d30d	b30d	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d313	b313	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d31a	b31a	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d321	b321	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d328	b328	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d32e	b32e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d334	b334	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d339	b339	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d340	b340	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d347	b347	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d34f	b34f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d355	b355	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d359	b359	ff					.text	$FF
.d35a	b35a					KeywordSet1:
>d35a	b35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d35c	b35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d35e	b35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d360	b360	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d368	b368	4c 45
>d36a	b36a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d372	b372	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d37a	b37a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d381	b381	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d388	b388	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d38d	b38d	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d395	b395	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d39a	b39a	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d3a1	b3a1	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d3a6	b3a6	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d3ae	b3ae	45
>d3af	b3af	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d3b3	b3b3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d3ba	b3ba	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3c0	b3c0	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3c7	b3c7	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3ce	b3ce	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3d4	b3d4	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3da	b3da	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3df	b3df	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3e5	b3e5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3ec	b3ec	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3f4	b3f4	45
>d3f5	b3f5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3fd	b3fd	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d402	b402	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d408	b408	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d410	b410	45
>d411	b411	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d419	b419	45
>d41a	b41a	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d421	b421	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d429	b429	53
>d42a	b42a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d430	b430	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d438	b438	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d43d	b43d	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d444	b444	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d449	b449	ff					.text	$FF
.d44a	b44a					KeywordSet2:
>d44a	b44a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d44c	b44c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d44e	b44e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d450	b450	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d455	b455	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d45a	b45a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d45f	b45f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d464	b464	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d469	b469	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d46e	b46e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d473	b473	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d478	b478	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d47d	b47d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d482	b482	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d487	b487	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d48c	b48c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d491	b491	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d496	b496	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d49b	b49b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d4a0	b4a0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d4a5	b4a5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d4aa	b4aa	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4af	b4af	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4b4	b4b4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4b9	b4b9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4be	b4be	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4c3	b4c3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4c8	b4c8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4cd	b4cd	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4d2	b4d2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4d7	b4d7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4dc	b4dc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4e1	b4e1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4e6	b4e6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4eb	b4eb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4f0	b4f0	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4f5	b4f5	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4fa	b4fa	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4ff	b4ff	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d504	b504	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d509	b509	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d50e	b50e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d513	b513	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d518	b518	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d51d	b51d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d522	b522	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d527	b527	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d52c	b52c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d531	b531	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d536	b536	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d53b	b53b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d540	b540	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d545	b545	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d54a	b54a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d54f	b54f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d554	b554	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d559	b559	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d55e	b55e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d563	b563	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d568	b568	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d56d	b56d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d572	b572	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d577	b577	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d57c	b57c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d581	b581	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d586	b586	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d58b	b58b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d590	b590	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d595	b595	ff					.text	$FF
.d596	b596					Export_TKListConvertLine:
.d596	b596	48		pha				pha 								; save indent on the stack
.d597	b597	9c 19 04	stz $0419			stz 	tbOffset
.d59a	b59a	9c 29 04	stz $0429			stz 	tokenBuffer
.d59d	b59d	9c 25 04	stz $0425			stz 	currentListColour
.d5a0	b5a0	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d5a2	b5a2	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5a5	b5a5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d5a7	b5a7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a9	b5a9	aa		tax				tax
.d5aa	b5aa	88		dey				dey
.d5ab	b5ab	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ad	b5ad	20 90 b7	jsr $b790			jsr 	LCLWriteNumberXA
.d5b0	b5b0	68		pla				pla 								; adjustment to indent
.d5b1	b5b1	48		pha				pha 								; save on stack
.d5b2	b5b2	10 0c		bpl $b5c0			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5b4	b5b4	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5b5	b5b5	6d 22 04	adc $0422			adc 	listIndent
.d5b8	b5b8	8d 22 04	sta $0422			sta 	listIndent
.d5bb	b5bb	10 03		bpl $b5c0			bpl 	_LCNoAdjust
.d5bd	b5bd	9c 22 04	stz $0422			stz 	listIndent
.d5c0	b5c0					_LCNoAdjust:
.d5c0	b5c0	18		clc				clc		 							; work out actual indent.
.d5c1	b5c1	ad 22 04	lda $0422			lda 	listIndent
.d5c4	b5c4	0a		asl a				asl 	a
.d5c5	b5c5	69 07		adc #$07			adc 	#7
.d5c7	b5c7	85 36		sta $36				sta 	zTemp0
.d5c9	b5c9					_LCPadOut:
.d5c9	b5c9	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5cb	b5cb	20 28 b7	jsr $b728			jsr 	LCLWrite
.d5ce	b5ce	ad 19 04	lda $0419			lda 	tbOffset
.d5d1	b5d1	c5 36		cmp $36				cmp 	zTemp0
.d5d3	b5d3	d0 f4		bne $b5c9			bne 	_LCPadOut
.d5d5	b5d5	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5d7	b5d7					_LCMainLoop:
.d5d7	b5d7	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5d9	b5d9	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d5dc	b5dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d5de	b5de	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5e0	b5e0	f0 17		beq $b5f9			beq 	_LCExit
.d5e2	b5e2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5e4	b5e4	90 1e		bcc $b604			bcc 	_LCDoubles
.d5e6	b5e6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5e8	b5e8	90 2a		bcc $b614			bcc 	_LCShiftPunc
.d5ea	b5ea	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5ec	b5ec	90 35		bcc $b623			bcc 	_LCPunctuation
.d5ee	b5ee	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5f0	b5f0	90 51		bcc $b643			bcc 	_LCIdentifiers
.d5f2	b5f2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5f4	b5f4	90 73		bcc $b669			bcc 	_LCTokens
.d5f6	b5f6	4c c9 b6	jmp $b6c9			jmp 	_LCData 					; 254-5 are data objects
.d5f9	b5f9					_LCExit:
.d5f9	b5f9	68		pla				pla 								; get old indent adjust
.d5fa	b5fa	30 07		bmi $b603			bmi 	_LCExit2
.d5fc	b5fc	18		clc				clc 								; add to indent if +ve
.d5fd	b5fd	6d 22 04	adc $0422			adc 	listIndent
.d600	b600	8d 22 04	sta $0422			sta 	listIndent
.d603	b603					_LCExit2:
.d603	b603	60		rts				rts
.d604	b604					_LCDoubles:
.d604	b604	48		pha				pha
.d605	b605	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d606	b606	29 02		and #$02			and 	#2
.d608	b608	09 3c		ora #$3c			ora 	#60 						; make < >
.d60a	b60a	20 28 b7	jsr $b728			jsr 	LCLWrite
.d60d	b60d	68		pla				pla 								; restore, do lower bit
.d60e	b60e	29 03		and #$03			and 	#3
.d610	b610	09 3c		ora #$3c			ora 	#60
.d612	b612	80 0f		bra $b623			bra		_LCPunctuation 				; print, increment, loop
.d614	b614					_LCShiftPunc:
.d614	b614	aa		tax				tax 								; save in X
.d615	b615	29 07		and #$07			and 	#7 							; lower 3 bits
.d617	b617	f0 02		beq $b61b			beq 	_LCNoAdd
.d619	b619	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d61b	b61b					_LCNoAdd:
.d61b	b61b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d61d	b61d	90 02		bcc $b621			bcc 	_LCNoAdd2
.d61f	b61f	09 20		ora #$20			ora 	#32 						; adds $20
.d621	b621					_LCNoAdd2:
.d621	b621	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d623	b623					_LCPunctuation:
.d623	b623	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d625	b625	d0 03		bne $b62a			bne 	_LCPContinue
.d627	b627	20 3e b7	jsr $b73e			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d62a	b62a					_LCPContinue:
.d62a	b62a	c9 2e		cmp #$2e			cmp 	#'.'
.d62c	b62c	f0 08		beq $b636			beq 	_LCPIsConstant
.d62e	b62e	c9 30		cmp #$30			cmp 	#'0'
.d630	b630	90 0b		bcc $b63d			bcc 	_LCPNotConstant
.d632	b632	c9 3a		cmp #$3a			cmp 	#'9'+1
.d634	b634	b0 07		bcs $b63d			bcs 	_LCPNotConstant
.d636	b636					_LCPIsConstant:
.d636	b636	48		pha				pha
.d637	b637	a9 87		lda #$87			lda 	#CLIConstant+$80
.d639	b639	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d63c	b63c	68		pla				pla
.d63d	b63d					_LCPNotConstant:
.d63d	b63d	c8		iny				iny 								; consume character
.d63e	b63e	20 28 b7	jsr $b728			jsr 	LCLWrite 					; write it out.
.d641	b641	80 94		bra $b5d7			bra 	_LCMainLoop 				; go round again.
.d643	b643					_LCIdentifiers:
.d643	b643	18		clc				clc 								; convert to physical address
.d644	b644	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d646	b646	85 37		sta $37				sta 	zTemp0+1
.d648	b648	c8		iny				iny
.d649	b649	b1 30		lda ($30),y			lda 	(codePtr),y
.d64b	b64b	85 36		sta $36				sta 	zTemp0
.d64d	b64d	c8		iny				iny
.d64e	b64e	5a		phy				phy 								; save position
.d64f	b64f	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d651	b651	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d654	b654	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d656	b656					_LCOutIdentifier:
.d656	b656	c8		iny				iny
.d657	b657	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d659	b659	29 7f		and #$7f			and 	#$7F
.d65b	b65b	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d65e	b65e	20 28 b7	jsr $b728			jsr 	LCLWrite
.d661	b661	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d663	b663	10 f1		bpl $b656			bpl 	_LCOutIdentifier
.d665	b665	7a		ply				ply 								; restore position
.d666	b666	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d669	b669					_LCTokens:
.d669	b669	aa		tax				tax 								; token in X
.d66a	b66a	a9 4a		lda #$4a			lda 	#((KeywordSet2) & $FF)
.d66c	b66c	85 36		sta $36				sta 	0+zTemp0
.d66e	b66e	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d670	b670	85 37		sta $37				sta 	1+zTemp0
.d672	b672	e0 82		cpx #$82			cpx 	#$82
.d674	b674	f0 16		beq $b68c			beq 	_LCUseShift
.d676	b676	a9 5a		lda #$5a			lda 	#((KeywordSet1) & $FF)
.d678	b678	85 36		sta $36				sta 	0+zTemp0
.d67a	b67a	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d67c	b67c	85 37		sta $37				sta 	1+zTemp0
.d67e	b67e	e0 81		cpx #$81			cpx 	#$81
.d680	b680	f0 0a		beq $b68c			beq 	_LCUseShift
.d682	b682	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d684	b684	85 36		sta $36				sta 	0+zTemp0
.d686	b686	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d688	b688	85 37		sta $37				sta 	1+zTemp0
.d68a	b68a	80 01		bra $b68d			bra 	_LCNoShift
.d68c	b68c					_LCUseShift:
.d68c	b68c	c8		iny				iny
.d68d	b68d					_LCNoShift:
.d68d	b68d	20 52 b7	jsr $b752			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d690	b690	b1 30		lda ($30),y			lda 	(codePtr),y
.d692	b692	aa		tax				tax 								; into X
.d693	b693					_LCFindText:
.d693	b693	ca		dex				dex
.d694	b694	10 0e		bpl $b6a4			bpl 	_LCFoundText 				; found text.
.d696	b696	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d698	b698	1a		inc a				inc 	a 							; one extra for size
.d699	b699	38		sec				sec 								; one extra for checksum
.d69a	b69a	65 36		adc $36				adc 	zTemp0 						; go to next token
.d69c	b69c	85 36		sta $36				sta 	zTemp0
.d69e	b69e	90 f3		bcc $b693			bcc 	_LCFindText
.d6a0	b6a0	e6 37		inc $37				inc 	zTemp0+1
.d6a2	b6a2	80 ef		bra $b693			bra 	_LCFindText
.d6a4	b6a4					_LCFoundText:
.d6a4	b6a4	5a		phy				phy 								; save List position
.d6a5	b6a5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d6a7	b6a7	aa		tax				tax
.d6a8	b6a8	a9 86		lda #$86			lda 	#CLIToken+$80
.d6aa	b6aa	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6ad	b6ad	a0 02		ldy #$02			ldy 	#2
.d6af	b6af					_LCCopyToken:
.d6af	b6af	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6b1	b6b1	20 7a b7	jsr $b77a			jsr 	LCLLowerCase
.d6b4	b6b4	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6b7	b6b7	c8		iny				iny
.d6b8	b6b8	ca		dex				dex
.d6b9	b6b9	d0 f4		bne $b6af			bne 	_LCCopyToken
.d6bb	b6bb	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6bd	b6bd	f0 05		beq $b6c4			beq 	_LCNoSpace
.d6bf	b6bf	a9 20		lda #$20			lda 	#' '
.d6c1	b6c1	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6c4	b6c4					_LCNoSpace:
.d6c4	b6c4	7a		ply				ply 								; restore position.
.d6c5	b6c5	c8		iny				iny 								; consume token
.d6c6	b6c6	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop 				; and go around again.
.d6c9	b6c9					_LCData:
.d6c9	b6c9	48		pha				pha 								; save type $FE/$FF
.d6ca	b6ca	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6cc	b6cc	c9 fe		cmp #$fe			cmp 	#$FE
.d6ce	b6ce	f0 22		beq $b6f2			beq 	_LCHaveOpener
.d6d0	b6d0	a2 22		ldx #$22			ldx 	#'"'
.d6d2	b6d2	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6d4	b6d4	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6d7	b6d7	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6d9	b6d9	d0 17		bne $b6f2			bne 	_LCHaveOpener
.d6db	b6db	88		dey				dey 								; what precedes it ?
.d6dc	b6dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6de	b6de	c8		iny				iny
.d6df	b6df	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6e1	b6e1	d0 0f		bne $b6f2			bne 	_LCHaveOpener
.d6e3	b6e3	a9 09		lda #$09			lda 	#9 							; tab
.d6e5	b6e5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6e8	b6e8	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6ea	b6ea	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6ed	b6ed	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6ef	b6ef	20 1f b7	jsr $b71f			jsr 	LCLWriteColour
.d6f2	b6f2					_LCHaveOpener:
.d6f2	b6f2	8a		txa				txa 								; output prefix (# or ")
.d6f3	b6f3	20 28 b7	jsr $b728			jsr 	LCLWrite
.d6f6	b6f6	c8		iny				iny 								; get count
.d6f7	b6f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f9	b6f9	aa		tax				tax
.d6fa	b6fa	c8		iny				iny 								; point at first character
.d6fb	b6fb					_LCOutData:
.d6fb	b6fb	b1 30		lda ($30),y			lda 	(codePtr),y
.d6fd	b6fd	c9 00		cmp #$00			cmp 	#0
.d6ff	b6ff	f0 03		beq $b704			beq 	_LCNoPrint
.d701	b701	20 28 b7	jsr $b728			jsr 	LCLWrite
.d704	b704					_LCNoPrint:
.d704	b704	c8		iny				iny
.d705	b705	ca		dex				dex
.d706	b706	d0 f3		bne $b6fb			bne 	_LCOutData
.d708	b708	68		pla				pla 								; closing " required ?
.d709	b709	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d70b	b70b	d0 0f		bne $b71c			bne 	_LCNoQuote
.d70d	b70d	a9 22		lda #$22			lda 	#'"'
.d70f	b70f	20 28 b7	jsr $b728			jsr 	LCLWrite
.d712	b712	ad 86 07	lda $0786			lda 	EXTTextColour
.d715	b715	29 0f		and #$0f			and 	#$0F
.d717	b717	09 90		ora #$90			ora 	#$90
.d719	b719	20 28 b7	jsr $b728			jsr 	LCLWrite
.d71c	b71c					_LCNoQuote:
.d71c	b71c	4c d7 b5	jmp $b5d7			jmp 	_LCMainLoop
.d71f	b71f					LCLWriteColour:
.d71f	b71f	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d722	b722	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d725	b725	d0 01		bne $b728			bne 	LCLWrite 					; if different, output it
.d727	b727	60		rts				rts
.d728	b728					LCLWrite:
.d728	b728	da		phx				phx
.d729	b729	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d72c	b72c	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d72f	b72f	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d732	b732	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d735	b735	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d737	b737	30 03		bmi $b73c			bmi 	_LCLNoColour
.d739	b739	8d 23 04	sta $0423			sta 	lcLastCharacter
.d73c	b73c					_LCLNoColour:
.d73c	b73c	fa		plx				plx
.d73d	b73d	60		rts				rts
.d73e	b73e					LCLDeleteLastSpace:
.d73e	b73e	48		pha				pha
.d73f	b73f	da		phx				phx
.d740	b740	ae 19 04	ldx $0419			ldx 	tbOffset
.d743	b743	f0 0a		beq $b74f			beq 	_LCDLSExit
.d745	b745	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d748	b748	c9 20		cmp #$20			cmp 	#' '
.d74a	b74a	d0 03		bne $b74f			bne 	_LCDLSExit
.d74c	b74c	ce 19 04	dec $0419			dec 	tbOffset
.d74f	b74f					_LCDLSExit:
.d74f	b74f	fa		plx				plx
.d750	b750	68		pla				pla
.d751	b751	60		rts				rts
.d752	b752					LCLCheckSpaceRequired:
.d752	b752	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d755	b755	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d757	b757	f0 1b		beq $b774			beq 	_LCCSRSpace
.d759	b759	c9 29		cmp #$29			cmp 	#')'
.d75b	b75b	f0 17		beq $b774			beq 	_LCCSRSpace
.d75d	b75d	c9 23		cmp #$23			cmp 	#'#'
.d75f	b75f	f0 13		beq $b774			beq 	_LCCSRSpace
.d761	b761	20 7a b7	jsr $b77a			jsr 	LCLLowerCase 				; saves a little effort
.d764	b764	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d766	b766	90 11		bcc $b779			bcc 	_LCCSRExit
.d768	b768	c9 3a		cmp #$3a			cmp 	#"9"+1
.d76a	b76a	90 08		bcc $b774			bcc 	_LCCSRSpace
.d76c	b76c	c9 61		cmp #$61			cmp 	#"a"
.d76e	b76e	90 09		bcc $b779			bcc 	_LCCSRExit
.d770	b770	c9 7b		cmp #$7b			cmp 	#"z"+1
.d772	b772	b0 05		bcs $b779			bcs 	_LCCSRExit
.d774	b774					_LCCSRSpace:
.d774	b774	a9 20		lda #$20			lda 	#' '
.d776	b776	20 28 b7	jsr $b728			jsr 	LCLWrite
.d779	b779					_LCCSRExit:
.d779	b779	60		rts				rts
.d77a	b77a					LCLLowerCase:
.d77a	b77a	c9 41		cmp #$41			cmp 	#"A"
.d77c	b77c	90 06		bcc $b784			bcc 	_LCLLCOut
.d77e	b77e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d780	b780	b0 02		bcs $b784			bcs 	_LCLLCOut
.d782	b782	69 20		adc #$20			adc 	#$20
.d784	b784					_LCLLCOut:
.d784	b784	60		rts				rts
.d785	b785					LCLUpperCase:
.d785	b785	c9 61		cmp #$61			cmp 	#"a"
.d787	b787	90 06		bcc $b78f			bcc 	_LCLUCOut
.d789	b789	c9 7b		cmp #$7b			cmp 	#"z"+1
.d78b	b78b	b0 02		bcs $b78f			bcs 	_LCLUCOut
.d78d	b78d	e9 1f		sbc #$1f			sbc 	#$1F
.d78f	b78f					_LCLUCOut:
.d78f	b78f	60		rts				rts
.d790	b790					LCLWriteNumberXA:
.d790	b790	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d792	b792					_LCLWNLoop1:
.d792	b792	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d794	b794					_LCLWNLoop2:
.d794	b794	48		pha				pha 								; save initial LSB
.d795	b795	38		sec				sec
.d796	b796	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d798	b798	f9 c9 b7	sbc $b7c9,y			sbc 	_LCLWNTable,y
.d79b	b79b	48		pha				pha
.d79c	b79c	8a		txa				txa
.d79d	b79d	f9 ca b7	sbc $b7ca,y			sbc 	_LCLWNTable+1,y
.d7a0	b7a0	90 07		bcc $b7a9			bcc 	_LCLWNUnderflow
.d7a2	b7a2	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d7a4	b7a4	aa		tax				tax 								; update X
.d7a5	b7a5	68		pla				pla 								; restore A
.d7a6	b7a6	7a		ply				ply 								; throw original
.d7a7	b7a7	80 eb		bra $b794			bra 	_LCLWNLoop2 				; try again.
.d7a9	b7a9					_LCLWNUnderflow:
.d7a9	b7a9	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d7ab	b7ab	d0 06		bne $b7b3			bne 	_LCLWNOut
.d7ad	b7ad	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7b0	b7b0	3a		dec a				dec 	a
.d7b1	b7b1	f0 04		beq $b7b7			beq 	_LCLWNNext
.d7b3	b7b3					_LCLWNOut:
.d7b3	b7b3	98		tya				tya
.d7b4	b7b4	20 c3 b7	jsr $b7c3			jsr 	_LCLWNOutDigit
.d7b7	b7b7					_LCLWNNext:
.d7b7	b7b7	7a		ply				ply 							 	; restore original value.
.d7b8	b7b8	68		pla				pla
.d7b9	b7b9	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7bb	b7bb	c8		iny				iny
.d7bc	b7bc	c8		iny				iny
.d7bd	b7bd	84 37		sty $37				sty 	zTemp0+1
.d7bf	b7bf	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7c1	b7c1	d0 cf		bne $b792			bne 	_LCLWNLoop1
.d7c3	b7c3					_LCLWNOutDigit:
.d7c3	b7c3	09 30		ora #$30			ora 	#'0'
.d7c5	b7c5	20 28 b7	jsr $b728			jsr 	LCLWrite
.d7c8	b7c8	60		rts				rts
.d7c9	b7c9					_LCLWNTable:
>d7c9	b7c9	10 27						.word 	10000
>d7cb	b7cb	e8 03						.word 	1000
>d7cd	b7cd	64 00						.word 	100
>d7cf	b7cf	0a 00						.word 	10
.d7d1	b7d1					TOKSearchTable:
.d7d1	b7d1	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7d3	b7d3	85 36		sta $36				sta 	zTemp0
.d7d5	b7d5	a0 00		ldy #$00			ldy 	#0
.d7d7	b7d7	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7d9	b7d9	85 38		sta $38				sta 	zTemp1
.d7db	b7db					_TSTLoop:
.d7db	b7db	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7dd	b7dd	30 49		bmi $b828			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7df	b7df	f0 2e		beq $b80f			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7e1	b7e1	c8		iny				iny 								; get the hash
.d7e2	b7e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7e4	b7e4	88		dey				dey
.d7e5	b7e5	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7e8	b7e8	d0 25		bne $b80f			bne 	_TSTNext
.d7ea	b7ea	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7ed	b7ed	38		sec				sec
.d7ee	b7ee	ed 00 04	sbc $0400			sbc 	identStart
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7f3	b7f3	d0 1a		bne $b80f			bne 	_TSTNext
.d7f5	b7f5	5a		phy				phy 								; save Y , we might fail to match.
.d7f6	b7f6	c8		iny				iny 								; point to text
.d7f7	b7f7	c8		iny				iny
.d7f8	b7f8	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7fb	b7fb					_TSTCompareName:
.d7fb	b7fb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7fe	b7fe	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d800	b800	d0 0c		bne $b80e			bne 	_TSTNextPullY 				; fail, pullY and do next
.d802	b802	e8		inx				inx
.d803	b803	c8		iny				iny
.d804	b804	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d807	b807	d0 f2		bne $b7fb			bne 	_TSTCompareName
.d809	b809	7a		ply				ply 								; throw Y
.d80a	b80a	a5 38		lda $38				lda 	zTemp1 						; get token #
.d80c	b80c	38		sec				sec 								; return with CS = passed.
.d80d	b80d	60		rts				rts
.d80e	b80e					_TSTNextPullY:
.d80e	b80e	7a		ply				ply 								; restore current, fall through.
.d80f	b80f					_TSTNext:
.d80f	b80f	e6 38		inc $38				inc 	zTemp1 						; token counter
.d811	b811	98		tya				tya
.d812	b812	18		clc				clc
.d813	b813	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d815	b815	1a		inc a				inc 	a 							; +1
.d816	b816	1a		inc a				inc 	a 							; +2
.d817	b817	a8		tay				tay
.d818	b818	10 c1		bpl $b7db			bpl 	_TSTLoop 					; if Y < $80 loop back
.d81a	b81a	98		tya				tya 								; add Y to zTemp0 and reset Y
.d81b	b81b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d81d	b81d	18		clc				clc  								; but have tables > 255 bytes
.d81e	b81e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d820	b820	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d822	b822	90 b7		bcc $b7db			bcc 	_TSTLoop
.d824	b824	e6 37		inc $37				inc 	zTemp0+1
.d826	b826	80 b3		bra $b7db			bra 	_TSTLoop
.d828	b828					_TSTFail:
.d828	b828	18		clc				clc
.d829	b829	60		rts				rts
.d82a	b82a					Export_TKTokeniseLine:
.d82a	b82a	20 f7 b9	jsr $b9f7			jsr 	LCLFixLineBufferCase 		; fix line case
.d82d	b82d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d82f	b82f	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d832	b832	9c 27 04	stz $0427			stz 	tokenLineNumber
.d835	b835	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d838	b838	a2 ff		ldx #$ff			ldx 	#$FF
.d83a	b83a					_TKFindFirst:
.d83a	b83a	e8		inx				inx
.d83b	b83b	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d83e	b83e	f0 62		beq $b8a2			beq 	_TKExit
.d840	b840	c9 20		cmp #$20			cmp 	#' '
.d842	b842	90 f6		bcc $b83a			bcc 	_TKFindFirst
.d844	b844	c9 30		cmp #$30			cmp 	#'0'
.d846	b846	90 07		bcc $b84f			bcc 	_TKNoLineNumber
.d848	b848	c9 3a		cmp #$3a			cmp 	#'9'+1
.d84a	b84a	b0 03		bcs $b84f			bcs 	_TKNoLineNumber
.d84c	b84c	20 21 ba	jsr $ba21			jsr 	TOKExtractLineNumber
.d84f	b84f					_TKNoLineNumber:
.d84f	b84f					_TKTokeniseLoop:
.d84f	b84f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d852	b852	f0 4e		beq $b8a2			beq 	_TKExit
.d854	b854	e8		inx				inx
.d855	b855	c9 20		cmp #$20			cmp 	#' '
.d857	b857	f0 f6		beq $b84f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d859	b859	ca		dex				dex 								; undo last get, A contains character, X is position.
.d85a	b85a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d85c	b85c	f0 68		beq $b8c6			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d85e	b85e	c9 41		cmp #$41			cmp 	#'A'
.d860	b860	90 04		bcc $b866			bcc 	_TKTokenisePunctuation
.d862	b862	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d864	b864	90 60		bcc $b8c6			bcc 	_TKTokeniseIdentifier
.d866	b866					_TKTokenisePunctuation:
.d866	b866	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d868	b868	f0 2e		beq $b898			beq 	_TKString
.d86a	b86a	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d86c	b86c	f0 2f		beq $b89d			beq 	_TKHexConstant
.d86e	b86e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d870	b870	f0 36		beq $b8a8			beq 	_TKCheckDouble
.d872	b872	c9 3e		cmp #$3e			cmp 	#'>'
.d874	b874	f0 32		beq $b8a8			beq 	_TKCheckDouble
.d876	b876					_TKStandardPunctuation:
.d876	b876	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d879	b879	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d87b	b87b	90 0e		bcc $b88b			bcc 	_TKNoShift
.d87d	b87d	48		pha				pha 								; save. we are about to convert this punctuation token from
.d87e	b87e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d880	b880	85 36		sta $36				sta 	zTemp0
.d882	b882	68		pla				pla
.d883	b883	29 20		and #$20			and 	#32 						; bit 5
.d885	b885	4a		lsr a				lsr 	a 							; shift into bit 3
.d886	b886	4a		lsr a				lsr 	a
.d887	b887	05 36		ora $36				ora 	zTemp0
.d889	b889	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d88b	b88b					_TKNoShift:
.d88b	b88b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; write the punctuation character
.d88e	b88e	e8		inx				inx 								; consume the character
.d88f	b88f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d891	b891	d0 bc		bne $b84f			bne 	_TKTokeniseLoop 			; and loop round again.
.d893	b893	20 59 b9	jsr $b959			jsr 	TOKCheckComment 			; comment checl
.d896	b896	80 b7		bra $b84f			bra 	_TKTokeniseLoop
.d898	b898					_TKString:
.d898	b898	20 86 b9	jsr $b986			jsr 	TOKTokenString
.d89b	b89b	80 b2		bra $b84f			bra 	_TKTokeniseLoop
.d89d	b89d					_TKHexConstant:
.d89d	b89d	20 c1 b9	jsr $b9c1			jsr 	TOKHexConstant
.d8a0	b8a0	80 ad		bra $b84f			bra 	_TKTokeniseLoop
.d8a2	b8a2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d8a4	b8a4	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d8a7	b8a7	60		rts				rts
.d8a8	b8a8					_TKCheckDouble:
.d8a8	b8a8	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d8ab	b8ab	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8ad	b8ad	90 c7		bcc $b876			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8af	b8af	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8b1	b8b1	b0 c3		bcs $b876			bcs 	_TKStandardPunctuation
.d8b3	b8b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8b6	b8b6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8b8	b8b8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8b9	b8b9	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8bc	b8bc	38		sec				sec
.d8bd	b8bd	e9 3c		sbc #$3c			sbc 	#'<'
.d8bf	b8bf	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8c2	b8c2	e8		inx				inx 								; consume both
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	80 89		bra $b84f			bra 	_TKTokeniseLoop
.d8c6	b8c6					_TKTokeniseIdentifier:
.d8c6	b8c6	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8c9	b8c9	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8cc	b8cc					_TKCheckLoop:
.d8cc	b8cc	e8		inx				inx 								; look at next, we know first is identifier already.
.d8cd	b8cd	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8d0	b8d0	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8d2	b8d2	f0 f8		beq $b8cc			beq 	_TKCheckLoop
.d8d4	b8d4	c9 30		cmp #$30			cmp	 	#"0"
.d8d6	b8d6	90 0c		bcc $b8e4			bcc 	_TKEndIdentifier
.d8d8	b8d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8da	b8da	90 f0		bcc $b8cc			bcc 	_TKCheckLoop
.d8dc	b8dc	c9 41		cmp #$41			cmp	 	#"A"
.d8de	b8de	90 04		bcc $b8e4			bcc 	_TKEndIdentifier
.d8e0	b8e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e2	b8e2	90 e8		bcc $b8cc			bcc 	_TKCheckLoop
.d8e4	b8e4					_TKEndIdentifier:
.d8e4	b8e4	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8e7	b8e7	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8e9	b8e9	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8eb	b8eb	f0 06		beq $b8f3			beq 	_TKHasTypeCharacter
.d8ed	b8ed	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8ef	b8ef	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8f1	b8f1	d0 07		bne $b8fa			bne 	_TKNoTypeCharacter
.d8f3	b8f3					_TKHasTypeCharacter:
.d8f3	b8f3	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8f6	b8f6	e8		inx				inx 								; consume the type character
.d8f7	b8f7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8fa	b8fa					_TKNoTypeCharacter:
.d8fa	b8fa	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8fc	b8fc	d0 09		bne $b907			bne 	_TKNoArray
.d8fe	b8fe	e8		inx				inx 								; skip the (
.d8ff	b8ff	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d902	b902	09 04		ora #$04			ora 	#$04
.d904	b904	8d 04 04	sta $0404			sta 	identTypeByte
.d907	b907					_TKNoArray:
.d907	b907	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d90a	b90a	20 e2 b9	jsr $b9e2			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d90d	b90d	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d90f	b90f	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d911	b911	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d914	b914	a2 00		ldx #$00			ldx 	#0
.d916	b916	b0 1f		bcs $b937			bcs 	_TKFoundToken
.d918	b918	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d91a	b91a	a9 5a		lda #$5a			lda 	#(KeywordSet1) & $FF
.d91c	b91c	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d91f	b91f	a2 81		ldx #$81			ldx 	#$81
.d921	b921	b0 14		bcs $b937			bcs 	_TKFoundToken
.d923	b923	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d925	b925	a9 4a		lda #$4a			lda 	#(KeywordSet2) & $FF
.d927	b927	20 d1 b7	jsr $b7d1			jsr 	TOKSearchTable
.d92a	b92a	a2 82		ldx #$82			ldx 	#$82
.d92c	b92c	b0 09		bcs $b937			bcs 	_TKFoundToken
.d92e	b92e	20 72 ba	jsr $ba72			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d931	b931	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d934	b934	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d937	b937					_TKFoundToken:
.d937	b937	48		pha				pha 								; save token
.d938	b938	8a		txa				txa 								; shift in X, is there one ?
.d939	b939	f0 03		beq $b93e			beq 	_TKNoTShift
.d93b	b93b	20 66 ba	jsr $ba66			jsr 	TOKWriteByte 				; if so, write it out
.d93e	b93e					_TKNoTShift:
.d93e	b93e	68		pla				pla 								; restore and write token
.d93f	b93f	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d942	b942	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d944	b944	d0 0d		bne $b953			bne 	_TKNotRem 			 		; not shifted ?
.d946	b946	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d948	b948	d0 09		bne $b953			bne 	_TKNotRem
.d94a	b94a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d94d	b94d	20 59 b9	jsr $b959			jsr 	TOKCheckComment
.d950	b950	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop
.d953	b953					_TKNotRem:
.d953	b953	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d956	b956	4c 4f b8	jmp $b84f			jmp 	_TKTokeniseLoop 			; and go round again.
.d959	b959					TOKCheckComment:
.d959	b959	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d95c	b95c	e8		inx				inx
.d95d	b95d	c9 20		cmp #$20			cmp 	#' '
.d95f	b95f	f0 f8		beq $b959			beq 	TOKCheckComment
.d961	b961	ca		dex				dex 								; first non space character
.d962	b962	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d964	b964	f0 1f		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d966	b966	c9 00		cmp #$00			cmp 	#0 							; EOL
.d968	b968	f0 1b		beq $b985			beq 	_TOKCCExit 					; then we are okay
.d96a	b96a	da		phx				phx
.d96b	b96b					_TOKCCLowerCase:
.d96b	b96b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d96e	b96e	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d970	b970	90 09		bcc $b97b			bcc 	_TOKKCNotUC
.d972	b972	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d974	b974	b0 05		bcs $b97b			bcs 	_TOKKCNotUC
.d976	b976	49 20		eor #$20			eor 	#$20
.d978	b978	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d97b	b97b					_TOKKCNotUC:
.d97b	b97b	e8		inx				inx
.d97c	b97c	c9 00		cmp #$00			cmp 	#0
.d97e	b97e	d0 eb		bne $b96b			bne 	_TOKCCLowerCase
.d980	b980	fa		plx				plx
.d981	b981	ca		dex				dex 								; tokenise string expects initial skip.
.d982	b982	20 86 b9	jsr $b986			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d985	b985					_TOKCCExit:
.d985	b985	60		rts				rts
.d986	b986					TOKTokenString:
.d986	b986	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d988	b988	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d98b	b98b	e8		inx				inx									; start of quoted string.
.d98c	b98c	da		phx				phx 								; push start of string on top
.d98d	b98d	ca		dex				dex 								; because we pre-increment
.d98e	b98e					_TSFindEnd:
.d98e	b98e	e8		inx				inx
.d98f	b98f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d992	b992	f0 04		beq $b998			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d994	b994	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d996	b996	d0 f6		bne $b98e			bne 	_TSFindEnd
.d998	b998					_TSEndOfString:
.d998	b998	7a		ply				ply  								; so now Y is first character, X is character after end.
.d999	b999	48		pha				pha 								; save terminating character
.d99a	b99a	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d99d	b99d	68		pla				pla 								; terminating character
.d99e	b99e	f0 01		beq $b9a1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d9a0	b9a0	e8		inx				inx
.d9a1	b9a1					_TSNotQuote:
.d9a1	b9a1	60		rts				rts
.d9a2	b9a2					TOKWriteBlockXY:
.d9a2	b9a2	86 36		stx $36				stx 	zTemp0 						; save end character
.d9a4	b9a4	98		tya				tya 								; use 2's complement to work out the byte size
.d9a5	b9a5	49 ff		eor #$ff			eor 	#$FF
.d9a7	b9a7	38		sec				sec
.d9a8	b9a8	65 36		adc $36				adc 	zTemp0
.d9aa	b9aa	1a		inc a				inc 	a 							; one extra for NULL
.d9ab	b9ab	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9ae	b9ae					_TOBlockLoop:
.d9ae	b9ae	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9b0	b9b0	f0 09		beq $b9bb			beq 	_TOBlockExit
.d9b2	b9b2	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9b5	b9b5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9b8	b9b8	c8		iny				iny
.d9b9	b9b9	80 f3		bra $b9ae			bra 	_TOBlockLoop
.d9bb	b9bb					_TOBlockExit:
.d9bb	b9bb	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9bd	b9bd	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c0	b9c0	60		rts				rts
.d9c1	b9c1					TOKHexConstant:
.d9c1	b9c1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9c3	b9c3	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.d9c6	b9c6	e8		inx				inx									; start of quoted string.
.d9c7	b9c7	da		phx				phx 								; push start of constant on top
.d9c8	b9c8	ca		dex				dex
.d9c9	b9c9					_THFindLoop:
.d9c9	b9c9	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9ca	b9ca	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9cd	b9cd	c9 30		cmp #$30			cmp 	#"0"
.d9cf	b9cf	90 0c		bcc $b9dd			bcc 	_THFoundEnd
.d9d1	b9d1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9d3	b9d3	90 f4		bcc $b9c9			bcc 	_THFindLoop
.d9d5	b9d5	c9 41		cmp #$41			cmp 	#"A"
.d9d7	b9d7	90 04		bcc $b9dd			bcc 	_THFoundEnd
.d9d9	b9d9	c9 47		cmp #$47			cmp 	#"F"+1
.d9db	b9db	90 ec		bcc $b9c9			bcc 	_THFindLoop
.d9dd	b9dd					_THFoundEnd:
.d9dd	b9dd	7a		ply				ply 								; restore start
.d9de	b9de	20 a2 b9	jsr $b9a2			jsr 	TOKWriteBlockXY 			; output the block
.d9e1	b9e1	60		rts				rts
.d9e2	b9e2					TOKCalculateHash:
.d9e2	b9e2	da		phx				phx
.d9e3	b9e3	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9e6	b9e6	a9 00		lda #$00			lda 	#0
.d9e8	b9e8					_TCHLoop:
.d9e8	b9e8	18		clc				clc
.d9e9	b9e9	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9ec	b9ec	e8		inx				inx
.d9ed	b9ed	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9f0	b9f0	d0 f6		bne $b9e8			bne 	_TCHLoop
.d9f2	b9f2	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9f5	b9f5	fa		plx				plx
.d9f6	b9f6	60		rts				rts
.d9f7	b9f7					LCLFixLineBufferCase:
.d9f7	b9f7	a2 00		ldx #$00			ldx 	#0
.d9f9	b9f9					_FLBCLoop:
.d9f9	b9f9	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9fc	b9fc	f0 22		beq $ba20			beq 	_FLBCExit 					; end of string.
.d9fe	b9fe	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.da00	ba00	f0 11		beq $ba13			beq 	_FLBCInQuotes
.da02	ba02	e8		inx				inx
.da03	ba03	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.da05	ba05	90 f2		bcc $b9f9			bcc 	_FLBCLoop
.da07	ba07	c9 7b		cmp #$7b			cmp 	#'z'+1
.da09	ba09	b0 ee		bcs $b9f9			bcs 	_FLBCLoop
.da0b	ba0b	38		sec				sec 								; make U/C
.da0c	ba0c	e9 20		sbc #$20			sbc 	#32
.da0e	ba0e	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da11	ba11	80 e6		bra $b9f9			bra 	_FLBCLoop
.da13	ba13					_FLBCInQuotes:
.da13	ba13	e8		inx				inx 								; advance
.da14	ba14	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da17	ba17	f0 07		beq $ba20			beq 	_FLBCExit 					; exit on EOS
.da19	ba19	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da1b	ba1b	d0 f6		bne $ba13			bne 	_FLBCInQuotes
.da1d	ba1d	e8		inx				inx 								; skip over it
.da1e	ba1e	80 d9		bra $b9f9			bra 	_FLBCLoop
.da20	ba20					_FLBCExit:
.da20	ba20	60		rts				rts
.da21	ba21					TOKExtractLineNumber:
.da21	ba21	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da24	ba24	48		pha				pha
.da25	ba25	ad 27 04	lda $0427			lda 	tokenLineNumber
.da28	ba28	48		pha				pha
.da29	ba29	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 2
.da2c	ba2c	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 4
.da2f	ba2f	18		clc				clc 								; add stacked value
.da30	ba30	68		pla				pla
.da31	ba31	6d 27 04	adc $0427			adc 	tokenLineNumber
.da34	ba34	8d 27 04	sta $0427			sta 	tokenLineNumber
.da37	ba37	68		pla				pla
.da38	ba38	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da3b	ba3b	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da3e	ba3e	20 5f ba	jsr $ba5f			jsr 	_LCLNTimes2 				; line # x 10
.da41	ba41	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da44	ba44	e8		inx				inx
.da45	ba45	29 0f		and #$0f			and 	#15 						; add to line #
.da47	ba47	18		clc				clc
.da48	ba48	6d 27 04	adc $0427			adc 	tokenLineNumber
.da4b	ba4b	8d 27 04	sta $0427			sta 	tokenLineNumber
.da4e	ba4e	90 03		bcc $ba53			bcc 	_TLENNoCarry
.da50	ba50	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da53	ba53					_TLENNoCarry:
.da53	ba53	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da56	ba56	c9 30		cmp #$30			cmp 	#'0'
.da58	ba58	90 04		bcc $ba5e			bcc 	_TLENExit
.da5a	ba5a	c9 3a		cmp #$3a			cmp 	#'9'+1
.da5c	ba5c	90 c3		bcc $ba21			bcc 	TOKExtractLineNumber
.da5e	ba5e					_TLENExit:
.da5e	ba5e	60		rts				rts
.da5f	ba5f					_LCLNTimes2:
.da5f	ba5f	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da62	ba62	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da65	ba65	60		rts				rts
.da66	ba66					TOKWriteByte:
.da66	ba66	da		phx				phx
.da67	ba67	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da6a	ba6a	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da6d	ba6d	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da70	ba70	fa		plx				plx
.da71	ba71	60		rts				rts
.da72	ba72					TOKCheckCreateVariableRecord:
.da72	ba72	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da74	ba74	85 36		sta $36				sta 	0+zTemp0
.da76	ba76	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da78	ba78	85 37		sta $37				sta 	1+zTemp0
.da7a	ba7a					_CCVSearch:
.da7a	ba7a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da7c	ba7c	f0 2c		beq $baaa			beq 	_CCVFail
.da7e	ba7e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da80	ba80	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da82	ba82	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da85	ba85	d0 16		bne $ba9d			bne 	_CCVNext
.da87	ba87	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da89	ba89	ae 00 04	ldx $0400			ldx 	identStart
.da8c	ba8c					_CCVCompare:
.da8c	ba8c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da8f	ba8f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da91	ba91	e8		inx				inx 								; advance pointers
.da92	ba92	c8		iny				iny
.da93	ba93	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da94	ba94	d0 07		bne $ba9d			bne 	_CCVNext  					; didn't match go to next.
.da96	ba96	90 f4		bcc $ba8c			bcc 	_CCVCompare 				; not finished yet.
.da98	ba98	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da9b	ba9b	f0 41		beq $bade			beq 	_CCVFound 					; yes, we were successful
.da9d	ba9d					_CCVNext:
.da9d	ba9d	18		clc				clc 								; go to next record.
.da9e	ba9e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.daa0	baa0	65 36		adc $36				adc 	zTemp0
.daa2	baa2	85 36		sta $36				sta 	zTemp0
.daa4	baa4	90 d4		bcc $ba7a			bcc 	_CCVSearch
.daa6	baa6	e6 37		inc $37				inc 	zTemp0+1
.daa8	baa8	80 d0		bra $ba7a			bra 	_CCVSearch
.daaa	baaa					_CCVFail:
.daaa	baaa	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.daac	baac	ad 03 04	lda $0403			lda 	identHash
.daaf	baaf	91 36		sta ($36),y			sta 	(zTemp0),y
.dab1	bab1	c8		iny				iny 								; offset 2 is the type byte
.dab2	bab2	ad 04 04	lda $0404			lda 	identTypeByte
.dab5	bab5	91 36		sta ($36),y			sta 	(zTemp0),y
.dab7	bab7	c8		iny				iny
.dab8	bab8					_CCVData:
.dab8	bab8	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	c8		iny				iny
.dabd	babd	c0 08		cpy #$08			cpy 	#8
.dabf	babf	90 f7		bcc $bab8			bcc 	_CCVData
.dac1	bac1	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dac4	bac4					_CCVCopyName:
.dac4	bac4	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dac7	bac7	91 36		sta ($36),y			sta 	(zTemp0),y
.dac9	bac9	e8		inx				inx
.daca	baca	c8		iny				iny
.dacb	bacb	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dace	bace	d0 f4		bne $bac4			bne 	_CCVCopyName
.dad0	bad0	98		tya				tya 								; patch offset
.dad1	bad1	92 36		sta ($36)			sta 	(zTemp0)
.dad3	bad3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dad5	bad5	91 36		sta ($36),y			sta 	(zTemp0),y
.dad7	bad7	88		dey				dey
.dad8	bad8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dada	bada	09 80		ora #$80			ora 	#$80
.dadc	badc	91 36		sta ($36),y			sta 	(zTemp0),y
.dade	bade					_CCVFound:
.dade	bade	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dae0	bae0	38		sec				sec
.dae1	bae1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dae3	bae3	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dae5	bae5	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.dae8	bae8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daea	baea	20 66 ba	jsr $ba66			jsr 	TOKWriteByte
.daed	baed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daee	baee					SNDCheckChannel:
.daee	baee	aa		tax				tax
.daef	baef	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daf2	baf2	d0 38		bne $bb2c			bne 	_SNDCCExit
.daf4	baf4	da		phx				phx 								; save current channel
.daf5	baf5	8a		txa				txa 								; put in A
.daf6	baf6	20 72 bb	jsr $bb72			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daf9	baf9	68		pla				pla 								; channel # in A
.dafa	bafa	90 30		bcc $bb2c			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dafc	bafc	a8		tay				tay 								; Y is the channel #
.dafd	bafd	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.db00	bb00	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.db03	bb03	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.db06	bb06	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.db09	bb09	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.db0c	bb0c	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.db0f	bb0f	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.db12	bb12	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.db15	bb15	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.db18	bb18	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.db1b	bb1b	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db1e	bb1e	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db21	bb21	5a		phy				phy 								; save channel #
.db22	bb22	20 8c bb	jsr $bb8c			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db25	bb25	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db28	bb28	68		pla				pla
.db29	bb29	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update channel A
.db2c	bb2c					_SNDCCExit:
.db2c	bb2c	60		rts				rts
.db2d	bb2d					SNDUpdateNote:
.db2d	bb2d	aa		tax				tax 								; so we can access records
.db2e	bb2e	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db2f	bb2f	0a		asl a				asl 	a
.db30	bb30	0a		asl a				asl 	a
.db31	bb31	0a		asl a				asl 	a
.db32	bb32	0a		asl a				asl 	a
.db33	bb33	8d 41 08	sta $0841			sta 	SNDChannelBits
.db36	bb36	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db39	bb39	f0 2e		beq $bb69			beq 	_SNDUNIsSilent
.db3b	bb3b	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db3e	bb3e	48		pha				pha
.db3f	bb3f	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db42	bb42	29 0f		and #$0f			and 	#$0F
.db44	bb44	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db47	bb47	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db49	bb49	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db4c	bb4c	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db4f	bb4f	8d 41 08	sta $0841			sta 	SNDChannelBits
.db52	bb52	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db55	bb55	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db58	bb58	6a		ror a				ror 	a
.db59	bb59	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db5c	bb5c	6a		ror a				ror 	a
.db5d	bb5d	4a		lsr a				lsr 	a 							; put in bits 0-5
.db5e	bb5e	4a		lsr a				lsr 	a
.db5f	bb5f	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write as rest of pitch register
.db62	bb62	68		pla				pla
.db63	bb63	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db65	bb65	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.db68	bb68	60		rts				rts
.db69	bb69					_SNDUNIsSilent:
.db69	bb69	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db6c	bb6c	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db6e	bb6e	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts 				; write to the ports
.db71	bb71	60		rts				rts
.db72	bb72					SNDFindNextNoteForA:
.db72	bb72	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db75	bb75	f0 13		beq $bb8a			beq 	_SNDFNNFail 				; queue empty.
.db77	bb77	a2 00		ldx #$00			ldx 	#0
.db79	bb79					_SNDFNNSearch:
.db79	bb79	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db7c	bb7c	38		sec				sec
.db7d	bb7d	f0 0c		beq $bb8b			beq 	_SNDFNNExit 				; if so exit with CS.
.db7f	bb7f	e8		inx				inx 								; next queue slot.
.db80	bb80	e8		inx				inx
.db81	bb81	e8		inx				inx
.db82	bb82	e8		inx				inx
.db83	bb83	e8		inx				inx
.db84	bb84	e8		inx				inx
.db85	bb85	e8		inx				inx
.db86	bb86	e8		inx				inx
.db87	bb87	88		dey				dey 								; done the whole queue
.db88	bb88	d0 ef		bne $bb79			bne 	_SNDFNNSearch 				; no, go back.
.db8a	bb8a					_SNDFNNFail:
.db8a	bb8a	18		clc				clc
.db8b	bb8b					_SNDFNNExit:
.db8b	bb8b	60		rts				rts
.db8c	bb8c					SNDDeleteXFromQueue:
.db8c	bb8c	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db8e	bb8e	f0 09		beq $bb99			beq 	_SNDDXExit
.db90	bb90	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db93	bb93	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db96	bb96	e8		inx				inx
.db97	bb97	80 f3		bra $bb8c			bra 	SNDDeleteXFromQueue
.db99	bb99					_SNDDXExit:
.db99	bb99	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db9a	bb9a					SNDQueueRequest:
.db9a	bb9a	86 36		stx $36				stx 	zTemp0						; save queue address
.db9c	bb9c	84 37		sty $37				sty 	zTemp0+1
.db9e	bb9e	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.dba1	bba1	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dba3	bba3	f0 21		beq $bbc6			beq 	_SNDQRExit
.dba5	bba5	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dba7	bba7	48		pha				pha
.dba8	bba8	8a		txa				txa  								; get offset in queue buffer/
.dba9	bba9	0a		asl a				asl 	a
.dbaa	bbaa	0a		asl a				asl 	a
.dbab	bbab	0a		asl a				asl 	a
.dbac	bbac	aa		tax				tax
.dbad	bbad	68		pla				pla 								; get back and push again
.dbae	bbae	48		pha				pha
.dbaf	bbaf	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.dbb2	bbb2	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dbb4	bbb4					_SNDQCopy:
.dbb4	bbb4	b1 36		lda ($36),y			lda 	(zTemp0),y
.dbb6	bbb6	e8		inx				inx
.dbb7	bbb7	c8		iny				iny
.dbb8	bbb8	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.dbbb	bbbb	c0 06		cpy #$06			cpy 	#6
.dbbd	bbbd	d0 f5		bne $bbb4			bne 	_SNDQCopy
.dbbf	bbbf	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dbc2	bbc2	68		pla				pla 								; get channel # back
.dbc3	bbc3	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbc6	bbc6					_SNDQRExit:
.dbc6	bbc6	60		rts				rts
.dbc7	bbc7					SNDSilenceChannel:
.dbc7	bbc7	aa		tax				tax 								; zero time left.
.dbc8	bbc8	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbcb	bbcb	0a		asl a				asl 	a 							; shift into position
.dbcc	bbcc	0a		asl a				asl 	a
.dbcd	bbcd	0a		asl a				asl 	a
.dbce	bbce	0a		asl a				asl 	a
.dbcf	bbcf	0a		asl a				asl 	a
.dbd0	bbd0	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbd2	bbd2	20 d6 bb	jsr $bbd6			jsr 	SNDWritePorts
.dbd5	bbd5	60		rts				rts
.dbd6	bbd6					SNDWritePorts:
.dbd6	bbd6	da		phx				phx 								; save X
.dbd7	bbd7	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbd9	bbd9	64 01		stz $01				stz 	1 							; access I/O page 0
.dbdb	bbdb	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbde	bbde	8d 10 d6	sta $d610			sta 	$D610
.dbe1	bbe1	86 01		stx $01				stx 	1 							; restore I/O
.dbe3	bbe3	fa		plx				plx 								; restore X
.dbe4	bbe4	60		rts				rts
.dbe5	bbe5					Export_SNDCommand:
.dbe5	bbe5	da		phx				phx 								; save XY
.dbe6	bbe6	5a		phy				phy
.dbe7	bbe7	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbe9	bbe9	f0 1d		beq $bc08			beq 	_SNDInitialise
.dbeb	bbeb	90 28		bcc $bc15			bcc 	_SNDExit
.dbed	bbed	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbef	bbef	f0 17		beq $bc08			beq 	_SNDSilence
.dbf1	bbf1	b0 22		bcs $bc15			bcs 	_SNDExit
.dbf3	bbf3	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbf5	bbf5	b0 09		bcs $bc00			bcs 	_SNDQueryPlay
.dbf7	bbf7	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbf9	bbf9	b0 1a		bcs $bc15			bcs 	_SNDExit
.dbfb	bbfb	20 9a bb	jsr $bb9a			jsr 	SNDQueueRequest
.dbfe	bbfe	80 15		bra $bc15			bra 	_SNDExit
.dc00	bc00					_SNDQueryPlay:
.dc00	bc00	29 03		and #$03			and 	#3 							; get channel #
.dc02	bc02	aa		tax				tax
.dc03	bc03	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dc06	bc06	80 0d		bra $bc15			bra 	_SNDExit
.dc08	bc08					_SNDInitialise:
.dc08	bc08					_SNDSilence:
.dc08	bc08	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dc0b	bc0b	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc0d	bc0d					_SNDSilenceLoop:
.dc0d	bc0d	48		pha				pha
.dc0e	bc0e	20 c7 bb	jsr $bbc7			jsr 	SNDSilenceChannel
.dc11	bc11	68		pla				pla
.dc12	bc12	3a		dec a				dec 	a
.dc13	bc13	10 f8		bpl $bc0d			bpl 	_SNDSilenceLoop
.dc15	bc15					_SNDExit:
.dc15	bc15	7a		ply				ply
.dc16	bc16	fa		plx				plx
.dc17	bc17	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dc18	bc18					Export_SNDUpdate:
.dc18	bc18					PagedSNDUpdate:
.dc18	bc18	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dc1b	bc1b	f0 05		beq $bc22			beq 	_SNDUNot0 					; not playing
.dc1d	bc1d	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc1f	bc1f	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel 			; update it.
.dc22	bc22					_SNDUNot0:
.dc22	bc22	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc25	bc25	f0 05		beq $bc2c			beq 	_SNDUNot1
.dc27	bc27	a2 01		ldx #$01			ldx 	#1
.dc29	bc29	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc2c	bc2c					_SNDUNot1:
.dc2c	bc2c	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc2f	bc2f	f0 05		beq $bc36			beq 	_SNDUNot2
.dc31	bc31	a2 02		ldx #$02			ldx 	#2
.dc33	bc33	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc36	bc36					_SNDUNot2:
.dc36	bc36	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc39	bc39	f0 05		beq $bc40			beq 	_SNDUNot3
.dc3b	bc3b	a2 03		ldx #$03			ldx 	#3
.dc3d	bc3d	20 41 bc	jsr $bc41			jsr 	SNDUpdateChannel
.dc40	bc40					_SNDUNot3:
.dc40	bc40	60		rts				rts
.dc41	bc41					SNDUpdateChannel:
.dc41	bc41	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc43	bc43	f0 2c		beq $bc71			beq 	_SNDUCExit
.dc45	bc45	3a		dec a				dec 	a 							; decrement and update timer
.dc46	bc46	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc49	bc49	f0 1d		beq $bc68			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc4b	bc4b	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc4e	bc4e	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc51	bc51	f0 1e		beq $bc71			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc53	bc53	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc54	bc54	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc57	bc57	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc5a	bc5a	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc5d	bc5d	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc60	bc60	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc63	bc63	29 03		and #$03			and 	#3
.dc65	bc65	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc68	bc68					_SNDUCUpdate:
.dc68	bc68	8a		txa				txa 								; which channel.
.dc69	bc69	48		pha				pha
.dc6a	bc6a	20 2d bb	jsr $bb2d			jsr 	SNDUpdateNote 				; update the current note
.dc6d	bc6d	68		pla				pla
.dc6e	bc6e	20 ee ba	jsr $baee			jsr 	SNDCheckChannel 			; more to do ?
.dc71	bc71					_SNDUCExit:
.dc71	bc71	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
