
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Feb 11 20:43:48 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DOS                              = $8b; $8b DOS
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TRY                              = $a4; $a4 TRY
=$a5						KWD1_VERIFY                           = $a5; $a5 VERIFY
=$a6						KWD1_XGO                              = $a6; $a6 XGO
=$a7						KWD1_XLOAD                            = $a7; $a7 XLOAD
=$a8						KWD1_ZAP                              = $a8; $a8 ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 57 b7	jsr $b757		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 8a b7	jsr $b78a		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 08 b1	jsr $b108		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 9c b3	jsr $b39c		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 9e 83	jsr $839e			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 73 85	jsr $8573			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 73 85	jsr $8573			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 73 85	jsr $8573			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 73 85	jsr $8573			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8109		a9 1a		lda #$1a			lda 	#Prompt & $FF
.810b		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.810e		20 55 82	jsr $8255			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8111		20 c5 8d	jsr $8dc5			jsr 	NewProgram 					; erase current program
.8114		4c df 87	jmp $87df			jmp 	WarmStart					; make same size.
.8117		4c df 87	jmp $87df			jmp 	WarmStart
>811a		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811c		09 09 31 31 2f 30 32 2f			.text 9,9,"11/02/23 34"
>8124		32 33 20 33 34

;******  Return to file: ./common/aa.system/00start.asm

>8129		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.812d						ProcessEvents:
.812d		20 dd 83	jsr $83dd			jsr 	KNLSetEventPointer
.8130		20 5e 82	jsr $825e			jsr     GetNextEvent 				; get next event
.8133		b0 27		bcs $815c			bcs 	_PEExitZ 					; nothing left to process.
.8135		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8138		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.813a		d0 f1		bne $812d			bne 	ProcessEvents
.813c		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.813f		d0 ec		bne $812d			bne 	ProcessEvents
.8141		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8144		c9 03		cmp #$03			cmp 	#3
.8146		f0 11		beq $8159			beq 	_PEReturnBreak  			; no, keep going.
.8148		da		phx				phx
.8149		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.814c		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.814e		f0 06		beq $8156			beq 	_PENoQueue
.8150		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8153		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8156						_PENoQueue:
.8156		fa		plx				plx
.8157		80 d4		bra $812d			bra 	ProcessEvents
.8159						_PEReturnBreak:
.8159		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.815b		60		rts				rts
.815c						_PEExitZ:
.815c		a9 00		lda #$00			lda 	#0
.815e		60		rts				rts
.815f						PopKeyboardQueue:
.815f		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8162		f0 17		beq $817b			beq 	_PKQExit 					; zero, then exit.
.8164		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8167		48		pha				pha
.8168		da		phx				phx 								; drop head of queue
.8169		a2 00		ldx #$00			ldx 	#0
.816b						_PKQLoop:
.816b		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.816e		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8171		e8		inx				inx
.8172		e0 07		cpx #$07			cpx 	#7
.8174		d0 f5		bne $816b			bne 	_PKQLoop
.8176		fa		plx				plx
.8177		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.817a		68		pla				pla 								; restore head of queue.
.817b						_PKQExit:
.817b		60		rts				rts
.817c						KNLGetKeyPressed:
.817c		a5 01		lda $01				lda 	1 							; save I/O 0
.817e		48		pha				pha
.817f		64 01		stz $01				stz 	1 							; access I/O Page 0
.8181		38		sec				sec 								; calculate timer - LastTick
.8182		ad 59 d6	lda $d659			lda 	$D659
.8185		cd 5e 06	cmp $065e			cmp 	LastTick
.8188		f0 06		beq $8190			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.818a		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.818d		20 4d 82	jsr $824d			jsr 	TickHandler 							; go do the code.
.8190						_NoFireTick:
.8190		68		pla				pla 								; restore I/O 0
.8191		85 01		sta $01				sta 	1
.8193		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8196		d0 c7		bne $815f			bne 	PopKeyboardQueue 			; if so, pop and return it
.8198		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process any outstanding events
.819b		a9 00		lda #$00			lda 	#0
.819d		60		rts				rts
.819e						KNLGetSingleCharacter:
.819e		20 7c 81	jsr $817c			jsr 	KNLGetKeyPressed
.81a1		c9 00		cmp #$00			cmp 	#0
.81a3		f0 f9		beq $819e			beq 	KNLGetSingleCharacter
.81a5		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81a6						EXTInputLine:
.81a6		48		pha				pha
.81a7		da		phx				phx
.81a8		5a		phy				phy
.81a9		a5 01		lda $01				lda 	1 							; save I/O page
.81ab		48		pha				pha
.81ac						_EILLoop:
.81ac		20 9e 81	jsr $819e			jsr 	KNLGetSingleCharacter 		; get one single character
.81af		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81b1		f0 44		beq $81f7			beq 	_EILExit
.81b3		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81b5		f0 2a		beq $81e1			beq 	_EILDelete
.81b7		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81b9		f0 1c		beq $81d7			beq 	_EILBackspace
.81bb		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81bd		90 12		bcc $81d1			bcc 	_EILPrintLoop
.81bf		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81c1		b0 0e		bcs $81d1			bcs 	_EILPrintLoop
.81c3		48		pha				pha 								; save character
.81c4		a9 02		lda #$02			lda 	#2  						; insert a space
.81c6		85 01		sta $01				sta 	1
.81c8		20 3b 82	jsr $823b			jsr 	EXTILInsert 				; insert in text screen
.81cb		e6 01		inc $01				inc 	1
.81cd		20 3b 82	jsr $823b			jsr 	EXTILInsert 				; insert in colour screen
.81d0		68		pla				pla 								; get character back.
.81d1						_EILPrintLoop:
.81d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81d4		80 d6		bra $81ac			bra 	_EILLoop
.81d6		60		rts				rts
.81d7						_EILBackspace:
.81d7		ad c4 07	lda $07c4			lda 	EXTColumn					; can we backspace ?
.81da		f0 d0		beq $81ac			beq 	_EILLoop
.81dc		a9 02		lda #$02			lda 	#2 							; move cursor left
.81de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81e1						_EILDelete
.81e1		a9 02		lda #$02			lda 	#2 							; text block
.81e3		85 01		sta $01				sta 	1
.81e5		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.81e7		20 26 82	jsr $8226			jsr 	EXTILDelete
.81ea		e6 01		inc $01				inc 	1 							; colour block
.81ec		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; get attribute of last character
.81ef		88		dey				dey
.81f0		b1 40		lda ($40),y			lda 	(EXTAddress),y
.81f2		20 26 82	jsr $8226			jsr 	EXTILDelete 				; backspace attribute
.81f5		80 b5		bra $81ac			bra 	_EILLoop 					; and go round.
.81f7						_EILExit:
.81f7		a9 02		lda #$02			lda 	#2 							; switch to page 2
.81f9		85 01		sta $01				sta 	1
.81fb		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.81fd						_EILScrapeLine:
.81fd		b1 40		lda ($40),y			lda 	(EXTAddress),y
.81ff		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8202		c8		iny				iny
.8203		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8206		d0 f5		bne $81fd			bne 	_EILScrapeLine
.8208						_EILTrimSpaces:
.8208		88		dey				dey
.8209		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.820b		f0 07		beq $8214			beq 	_EILEndTrim		 			; zero the input line.
.820d		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.8210		c9 20		cmp #$20			cmp 	#' '
.8212		f0 f4		beq $8208			beq 	_EILTrimSpaces 				; if fail this found non space character
.8214						_EILEndTrim:
.8214		c8		iny				iny 								; trim after non space character.
.8215		a9 00		lda #$00			lda 	#0 							; trim here.
.8217		99 26 05	sta $0526,y			sta 	lineBuffer,y
.821a		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.821c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.821f		68		pla				pla 								; reset I/O page
.8220		85 01		sta $01				sta 	1
.8222		7a		ply				ply
.8223		fa		plx				plx
.8224		68		pla				pla
.8225		60		rts				rts
.8226						EXTILDelete:
.8226		48		pha				pha 								; save the new character
.8227		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; start copying from here.
.822a						_EXTDLoop:
.822a		c8		iny				iny 								; copy one byte down.
.822b		b1 40		lda ($40),y			lda 	(EXTAddress),y
.822d		88		dey				dey
.822e		91 40		sta ($40),y			sta 	(EXTAddress),y
.8230		c8		iny				iny 								; do till end of line.
.8231		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8234		90 f4		bcc $822a			bcc 	_EXTDLoop
.8236		88		dey				dey 	 							; write in last slot.
.8237		68		pla				pla
.8238		91 40		sta ($40),y			sta 	(EXTAddress),y
.823a		60		rts				rts
.823b						EXTILInsert:
.823b		ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; end position
.823e						_EXTILoop:
.823e		88		dey				dey 								; back one
.823f		cc c4 07	cpy $07c4			cpy 	EXTColumn 					; exit if reached insert point.
.8242		f0 08		beq $824c			beq 	_EXTIExit
.8244		88		dey				dey 								; copy one byte up.
.8245		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8247		c8		iny				iny
.8248		91 40		sta ($40),y			sta 	(EXTAddress),y
.824a		80 f2		bra $823e			bra 	_EXTILoop
.824c						_EXTIExit:
.824c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.824d						TickHandler:
.824d		da		phx				phx
.824e		5a		phy				phy 								; need to preserve Y
.824f		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8252		7a		ply				ply
.8253		fa		plx				plx
.8254		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8255						ResetIOTracking:
.8255		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8257						_RIOLoop:
.8257		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.825a		ca		dex				dex
.825b		10 fa		bpl $8257			bpl 	_RIOLoop
.825d		60		rts				rts
.825e						GetNextEvent:
.825e		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8261		08		php				php									; save yes/no flag.
.8262		b0 29		bcs $828d			bcs 	_GNEExit
.8264		48		pha				pha 								; save registers
.8265		da		phx				phx
.8266		5a		phy				phy
.8267		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.826a		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.826c		f0 04		beq $8272			beq 	_GNEKeyEvent
.826e		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.8270		d0 08		bne $827a			bne 	_GNECheckMouseEvent
.8272						_GNEKeyEvent:
.8272		20 4c 83	jsr $834c			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8275		20 69 83	jsr $8369			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.8278		80 10		bra $828a			bra 	_GNEEventExit
.827a						_GNECheckMouseEvent:
.827a		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.827c		d0 05		bne $8283			bne 	_GNENotDelta
.827e		20 8f 82	jsr $828f			jsr 	ProcessMouseDeltaEvent 		; process them.
.8281		80 07		bra $828a			bra 	_GNEEventExit
.8283						_GNENotDelta:
.8283		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.8285		d0 03		bne $828a			bne 	_GNEEventExit
.8287		20 be 82	jsr $82be			jsr 	ProcessMouseClickEvent 		; process them.
.828a						_GNEEventExit:
.828a		7a		ply				ply 								; restore registers
.828b		fa		plx				plx
.828c		68		pla				pla
.828d						_GNEExit:
.828d		28		plp				plp
.828e		60		rts				rts
.828f						ProcessMouseDeltaEvent:
.828f		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.8291		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.8294		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.8297		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.829a		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.829d		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.82a0		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.82a3		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82a6		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.82a9		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.82ac		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82af		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82b1		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82b4		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82b7		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82ba		20 f4 82	jsr $82f4			jsr 	PMKClipMouseCoord
.82bd		60		rts				rts
.82be						ProcessMouseClickEvent:
.82be		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82c0		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82c3		20 2c 83	jsr $832c			jsr 	PMKAdd
.82c6		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82c9		20 2c 83	jsr $832c			jsr 	PMKAdd
.82cc		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82cf		20 2c 83	jsr $832c			jsr 	PMKAdd
.82d2		60		rts				rts
.82d3						PMKOutputButton:
.82d3		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82d6		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82d9		6a		ror a				ror 	a 							; shift LSB into carry
.82da		90 06		bcc $82e2			bcc 	_PMKOBExit
.82dc		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.82df		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.82e2						_PMKOBExit:
.82e2		e8		inx				inx  								; next button
.82e3		e8		inx				inx
.82e4		60		rts				rts
.82e5						PMKAdjustTotal:
.82e5		48		pha				pha 								; save offset A index X
.82e6		da		phx				phx
.82e7		48		pha				pha 								; point X to the position
.82e8		8a		txa				txa
.82e9		18		clc				clc
.82ea		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.82ec		aa		tax				tax
.82ed		68		pla				pla
.82ee		20 28 83	jsr $8328			jsr 	PMKAddSubtract 				; reuse the addition code.
.82f1		fa		plx				plx 								; restore XA
.82f2		68		pla				pla
.82f3		60		rts				rts
.82f4						PMKClipMouseCoord:
.82f4		a2 00		ldx #$00			ldx 	#0
.82f6						_PCMCLoop:
.82f6		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.82f9		10 06		bpl $8301			bpl 	_PCMCNotNeg
.82fb		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.82fe		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8301						_PCMCNotNeg:
.8301		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8304		dd 22 83	cmp $8322,x			cmp 	_PCMCExtent,x
.8307		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.830a		fd 23 83	sbc $8323,x			sbc 	_PCMCExtent+1,x
.830d		90 0c		bcc $831b			bcc 	_PCMCNotOver 				; in range ?
.830f		bd 22 83	lda $8322,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8312		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8315		bd 23 83	lda $8323,x			lda 	_PCMCExtent+1,x
.8318		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.831b						_PCMCNotOver:
.831b		e8		inx				inx
.831c		e8		inx				inx
.831d		e0 06		cpx #$06			cpx 	#3*2
.831f		d0 d5		bne $82f6			bne 	_PCMCLoop
.8321		60		rts				rts
.8322						_PCMCExtent:
>8322		3f 01 ef 00 ff 00				.word 	319,239,255
.8328						PMKAddSubtract:
.8328		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.832a		30 0e		bmi $833a			bmi 	PMKSubtract
.832c						PMKAdd:
.832c		18		clc				clc
.832d		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8330		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8333		90 14		bcc $8349			bcc 	PMKExit
.8335		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8338		80 0f		bra $8349			bra 	PMKExit
.833a						PMKSubtract:
.833a		18		clc				clc
.833b		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.833e		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8341		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8344		69 ff		adc #$ff			adc 	#$FF
.8346		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.8349						PMKExit:
.8349		e8		inx				inx 								; next slot ?
.834a		e8		inx				inx
.834b		60		rts				rts
.834c						ProcessKeyboardEvent:
.834c		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.834f		20 8a 83	jsr $838a			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8352		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8355		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8357		f0 07		beq $8360			beq 	_PKERelease
.8359		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.835c		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.835f		60		rts				rts
.8360						_PKERelease:
.8360		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8362		3d 60 06	and $0660,x			and 	KeyStatus,x
.8365		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8368		60		rts				rts
.8369						UpdateKeyboardJoystick:
.8369		9c 81 06	stz $0681			stz 	KeyJoystick
.836c		a2 00		ldx #$00			ldx 	#0
.836e						_UKJLoop:
.836e		bd 85 83	lda $8385,x			lda 	_UKJKeys,x 					; which key
.8371		29 1f		and #$1f			and 	#$1F
.8373		a8		tay				tay
.8374		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8377		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8379		18		clc				clc  								; set C if bit set
.837a		69 ff		adc #$ff			adc 	#$FF
.837c		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.837f		e8		inx				inx
.8380		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8382		d0 ea		bne $836e			bne 	_UKJLoop
.8384		60		rts				rts
.8385						_UKJKeys:
>8385		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.838a						KeyboardConvertXA:
.838a		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.838c		8e 80 06	stx $0680			stx 	KeyMaskTemp
.838f						_KCCALoop:
.838f		18		clc				clc
.8390		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.8392		b0 05		bcs $8399			bcs 	_KCCADone
.8394		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.8397		80 f6		bra $838f			bra 	_KCCALoop
.8399						_KCCADone:
.8399		aa		tax				tax 								; table entry in X
.839a		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.839d		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.839e						KNLSetDrive:
.839e		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83a1		60		rts				rts
.83a2						KNLOpenFileWrite:
.83a2		48		pha				pha
.83a3		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83a5		80 03		bra $83aa			bra 	KNLOpenStart
.83a7						KNLOpenFileRead:
.83a7		48		pha				pha
.83a8		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83aa						KNLOpenStart:
.83aa		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83ac		68		pla				pla
.83ad		20 e8 83	jsr $83e8			jsr 	KNLSetupFileName
.83b0		20 dd 83	jsr $83dd			jsr 	KNLSetEventPointer
.83b3		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83b6		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83b8		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83bb		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83bd		b0 1d		bcs $83dc			bcs     _out
.83bf						_loop
.83bf		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83c2		20 5e 82	jsr $825e			jsr     GetNextEvent
.83c5		b0 f8		bcs $83bf			bcs     _loop
.83c7		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83ca		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83cc		f0 0a		beq $83d8			beq 	_success
.83ce		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83d0		f0 0a		beq $83dc			beq 	_out
.83d2		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83d4		f0 06		beq $83dc			beq 	_out
.83d6		80 e7		bra $83bf			bra     _loop
.83d8						_success
.83d8		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83db		18		clc				clc
.83dc						_out
.83dc		60		rts				rts
.83dd						KNLSetEventPointer:
.83dd		48		pha				pha
.83de		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.83e0		85 f0		sta $f0				sta     kernel.args.events+0
.83e2		a9 07		lda #$07			lda     #KNLEvent >> 8
.83e4		85 f1		sta $f1				sta     kernel.args.events+1
.83e6		68		pla				pla
.83e7		60		rts				rts
.83e8						KNLSetupFileName:
.83e8		5a		phy				phy 								; save Y on stack
.83e9		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.83eb		86 37		stx $37				stx 	zTemp0+1
.83ed		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.83ef		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.83f1		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.83f3						_KNLGetLength:
.83f3		c8		iny				iny
.83f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.83f6		d0 fb		bne $83f3			bne 	_KNLGetLength
.83f8		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.83fa		7a		ply				ply
.83fb		60		rts				rts
.83fc						KNLReadBlock:
.83fc		85 f3		sta $f3				sta     kernel.args.file.read.stream
.83fe		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8400		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8403		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8405		b0 2e		bcs $8435			bcs     _KGNBExitFail               ; report as general error
.8407						_KGRBEventLoop:
.8407		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.840a		20 5e 82	jsr $825e			jsr     GetNextEvent
.840d		b0 f8		bcs $8407			bcs     _KGRBEventLoop
.840f		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8412		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8414		f0 0a		beq $8420			beq     _KNLRBGetNextByte
.8416		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8418		f0 1b		beq $8435			beq 	_KGNBExitFail
.841a		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.841c		f0 17		beq $8435			beq 	_KGNBExitFail
.841e		80 e7		bra $8407			bra 	_KGRBEventLoop
.8420						_KNLRBGetNextByte:
.8420		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8422		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8424		a9 06		lda #$06			lda     #>KNLReadBuffer
.8426		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8428		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.842b		85 fd		sta $fd				sta     kernel.args.recv.buflen
.842d		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8430		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8433		18		clc				clc
.8434		60		rts				rts
.8435						_KGNBExitFail:
.8435		38		sec				sec
.8436		60		rts				rts
.8437						KNLWriteBlock:
.8437		da		phx				phx
.8438		5a		phy				phy
.8439		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.843b		a5 36		lda $36				lda     zTemp0 						; save the data location.
.843d		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.843f		a5 37		lda $37				lda     zTemp0+1
.8441		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8443		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8445		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8448		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.844a		b0 21		bcs $846d			bcs 	_KWBFailed
.844c						_KNLWLoop:
.844c		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.844f		20 5e 82	jsr $825e			jsr     GetNextEvent
.8452		b0 f8		bcs $844c			bcs     _KNLWLoop
.8454		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8457		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8459		f0 12		beq $846d			beq 	_KWBFailed
.845b		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.845d		f0 0e		beq $846d			beq 	_KWBFailed
.845f		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8461		f0 0a		beq $846d			beq 	_KWBFailed
.8463		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8465		d0 e5		bne $844c			bne 	_KNLWLoop
.8467		18		clc				clc
.8468		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.846b		80 01		bra $846e			bra 	_KWBExit
.846d						_KWBFailed:
.846d		38		sec				sec
.846e						_KWBExit:
.846e		7a		ply				ply
.846f		fa		plx				plx
.8470		60		rts				rts
.8471						KNLCloseFile:
.8471		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8473		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8476		60		rts				rts
.8477						KNLReadController:
.8477		da		phx				phx
.8478		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.847a		64 01		stz $01				stz 	1 							; switch to I/O 0
.847c		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.847f		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8481		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.8484		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8486		fa		plx				plx
.8487		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4
>ff84						RmDir       .fill   4
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8488						AssembleGroup1:
.8488		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.848a		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.848d		80 02		bra $8491			bra 	AsmGroup12
.848f						AssembleGroup2:
.848f		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8491						AsmGroup12:
.8491		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8494		68		pla				pla 								; pop the return address to access the information following.
.8495		fa		plx				plx
.8496		20 1d 85	jsr $851d			jsr 	AccessParameters 			; get opcode and save as base
.8499		8d 20 04	sta $0420			sta 	BaseOpcode
.849c		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.849f		d0 08		bne $84a9			bne 	_AG12HaveMask
.84a1		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84a3		20 25 85	jsr $8525			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84a6		8d 21 04	sta $0421			sta 	ModeMask
.84a9						_AG12HaveMask:
.84a9		20 59 86	jsr $8659			jsr 	TypeAndCalculateOperand 	; get zero page type
.84ac		da		phx				phx 								; save found address mode
.84ad		20 89 85	jsr $8589			jsr 	AssembleModeX
.84b0		fa		plx				plx  								; restore address mode
.84b1		b0 0b		bcs $84be			bcs 	_AG12Exit
.84b3		20 bf 84	jsr $84bf			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84b6		20 89 85	jsr $8589			jsr 	AssembleModeX
.84b9		b0 03		bcs $84be			bcs 	_AG12Exit
.84bb		4c 4d a4	jmp $a44d			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84be						_AG12Exit:
.84be		60		rts				rts
.84bf						PromoteToAbsolute:
.84bf		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84c1		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84c3		f0 19		beq $84de			beq 	_PTADo
.84c5		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84c7		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84c9		f0 13		beq $84de			beq 	_PTADo
.84cb		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84cd		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84cf		f0 0d		beq $84de			beq 	_PTADo
.84d1		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84d3		e0 d1		cpx #$d1			cpx 	#AM_IND
.84d5		f0 07		beq $84de			beq 	_PTADo
.84d7		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84d9		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84db		f0 01		beq $84de			beq 	_PTADo
.84dd		60		rts				rts
.84de						_PTADo:
.84de		aa		tax				tax
.84df		60		rts				rts
.84e0						AssembleGroup3:
.84e0		68		pla				pla 								; get parameters, which is just the opcode.
.84e1		fa		plx				plx
.84e2		20 1d 85	jsr $851d			jsr 	AccessParameters 			; get and output opcode
.84e5		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.84e8		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get a 16 bit operand
.84eb		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.84ed		38		sec				sec
.84ee		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.84f1		48		pha				pha 								; LSB in A
.84f2		a5 60		lda $60				lda 	NSMantissa1
.84f4		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.84f7		aa		tax				tax 								; MSB in X
.84f8		68		pla				pla
.84f9		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.84fa		69 7f		adc #$7f			adc 	#$7F
.84fc		90 01		bcc $84ff			bcc 	_AG3NoCarry
.84fe		e8		inx				inx
.84ff						_AG3NoCarry:
.84ff		38		sec				sec 								; fix back and write out anyways.
.8500		e9 80		sbc #$80			sbc 	#$80
.8502		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.8505		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8507		f0 0a		beq $8513			beq 	_AG3Exit
.8509		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.850c		29 01		and #$01			and 	#1
.850e		f0 03		beq $8513			beq 	_AG3Exit
.8510		4c 52 a4	jmp $a452			jmp 	RangeError 					; no, branch is out of range
.8513						_AG3Exit:
.8513		60		rts				rts
.8514						AssembleGroup4:
.8514		68		pla				pla 								; pop address
.8515		fa		plx				plx
.8516		20 1d 85	jsr $851d			jsr 	AccessParameters 			; access and get first
.8519		20 35 85	jsr $8535			jsr 	AssemblerWriteByte 			; output it.
.851c		60		rts				rts
.851d						AccessParameters:
.851d		8d 1d 04	sta $041d			sta 	ParamStart
.8520		8e 1e 04	stx $041e			stx 	ParamStart+1
.8523		a9 01		lda #$01			lda 	#1
.8525						GetParameter:
.8525		5a		phy				phy
.8526		a8		tay				tay
.8527		ad 1d 04	lda $041d			lda 	ParamStart
.852a		85 36		sta $36				sta 	zTemp0
.852c		ad 1e 04	lda $041e			lda 	ParamStart+1
.852f		85 37		sta $37				sta 	zTemp0+1
.8531		b1 36		lda ($36),y			lda 	(zTemp0),y
.8533		7a		ply				ply
.8534		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8535						AssemblerWriteByte:
.8535		48		pha			pha
.8536		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8539		29 02		and #$02		and 	#2
.853b		f0 1b		beq $8558		beq 	_AWBNoPrint
.853d		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8540		20 73 85	jsr $8573		jsr 	PrintHex
.8543		ad 1a 04	lda $041a		lda		AssemblerAddress
.8546		20 73 85	jsr $8573		jsr 	PrintHex
.8549		a9 20		lda #$20		lda 	#' '
.854b		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.854e		68		pla			pla 									; print byte
.854f		48		pha			pha
.8550		20 73 85	jsr $8573		jsr 	PrintHex
.8553		a9 0d		lda #$0d		lda 	#13
.8555		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8558						_AWBNoPrint:
.8558		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.855b		85 36		sta $36			sta 	zTemp0
.855d		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8560		f0 0e		beq $8570		beq 	_AWBRange
.8562		85 37		sta $37			sta 	zTemp0+1
.8564		68		pla			pla 									; write byte out
.8565		92 36		sta ($36)		sta 	(zTemp0)
.8567		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.856a		d0 03		bne $856f		bne 	_AWBNoCarry
.856c		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.856f						_AWBNoCarry:
.856f		60		rts			rts
.8570						_AWBRange:
.8570		4c 52 a4	jmp $a452		jmp 	RangeError
.8573						PrintHex:
.8573		48		pha				pha
.8574		4a		lsr a				lsr 	a
.8575		4a		lsr a				lsr 	a
.8576		4a		lsr a				lsr 	a
.8577		4a		lsr a				lsr 	a
.8578		20 7c 85	jsr $857c			jsr 	_PrintNibble
.857b		68		pla				pla
.857c						_PrintNibble:
.857c		29 0f		and #$0f			and 	#15
.857e		c9 0a		cmp #$0a			cmp 	#10
.8580		90 02		bcc $8584			bcc 	_NoShift
.8582		69 06		adc #$06			adc 	#6
.8584						_NoShift:
.8584		69 30		adc #$30			adc 	#48
.8586		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8589						AssembleModeX:
.8589		5a		phy				phy
.858a		ad 1f 04	lda $041f			lda 	IsGroup1
.858d		f0 17		beq $85a6			beq 	_AMXGroup2
.858f		8a		txa				txa 							; is it in group # 1
.8590		29 40		and #$40			and 	#AM_ISG1
.8592		f0 4d		beq $85e1			beq 	_AMXFail 				; no, give up.
.8594		8a		txa				txa 							; get back.
.8595		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8597		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8599		d0 22		bne $85bd			bne 	_AMXHaveInfo
.859b		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.859e		c9 81		cmp #$81			cmp 	#$81
.85a0		f0 3f		beq $85e1			beq 	_AMXFail
.85a2		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85a4		80 17		bra $85bd			bra 	_AMXHaveInfo 			; odd design decision there.
.85a6						_AMXGroup2:
.85a6		8a		txa				txa 							; is it in group 2 ?
.85a7		29 20		and #$20			and 	#AM_ISG2
.85a9		f0 36		beq $85e1			beq 	_AMXFail 				; no, give up.
.85ab		8a		txa				txa 							; get the offset into Y
.85ac		29 1f		and #$1f			and 	#$1F
.85ae		4a		lsr a				lsr 	a 						; make it 0-7.
.85af		4a		lsr a				lsr  	a
.85b0		a8		tay				tay
.85b1		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85b4						_AMXCheckOkay:
.85b4		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85b5		88		dey				dey
.85b6		10 fc		bpl $85b4			bpl 	_AMXCheckOkay
.85b8		90 27		bcc $85e1			bcc 	_AMXFail 				; not allowed.
.85ba		8a		txa				txa  							; get mask back
.85bb		29 1f		and #$1f			and 	#$1F
.85bd						_AMXHaveInfo:
.85bd		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85bf		10 04		bpl $85c5			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85c1		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85c3		d0 1c		bne $85e1			bne 	_AMXFail
.85c5						_AMXAnySize:
.85c5		18		clc				clc 							; add offset to the base opcode
.85c6		6d 20 04	adc $0420			adc 	BaseOpcode
.85c9						_AMXOutputCode:
.85c9		20 35 85	jsr $8535			jsr 	AssemblerWriteByte 		; write the opcode out.
.85cc		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85ce		f0 0e		beq $85de			beq 	_AMXExit
.85d0		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85d2		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.85d5		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85d7		30 05		bmi $85de			bmi 	_AMXExit
.85d9		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85db		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.85de						_AMXExit:
.85de		7a		ply				ply
.85df		38		sec				sec
.85e0		60		rts				rts
.85e1						_AMXFail:
.85e1		a0 00		ldy #$00			ldy 	#0
.85e3						_AMXCheckOddities:
.85e3		8a		txa				txa
.85e4		d9 0b 86	cmp $860b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.85e7		d0 15		bne $85fe			bne 	_AMXCONext
.85e9		b9 09 86	lda $8609,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.85ec		cd 20 04	cmp $0420			cmp 	BaseOpcode
.85ef		d0 0d		bne $85fe			bne 	_AMXCONext
.85f1		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.85f3		10 04		bpl $85f9			bpl 	_AMXCONotZero
.85f5		a5 60		lda $60				lda 	NSMantissa1
.85f7		d0 05		bne $85fe			bne 	_AMXCONext
.85f9						_AMXCONotZero:
.85f9		b9 0a 86	lda $860a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.85fc		80 cb		bra $85c9			bra 	_AMXOutputCode 			; and assemble it
.85fe						_AMXCONext:
.85fe		c8		iny				iny
.85ff		c8		iny				iny
.8600		c8		iny				iny
.8601		b9 09 86	lda $8609,y			lda 	ExtraOpcode+0,y 		; end of table
.8604		d0 dd		bne $85e3			bne 	_AMXCheckOddities
.8606						_AMXCOFail:
.8606		7a		ply				ply
.8607		18		clc				clc
.8608		60		rts				rts
.8609						ExtraOpcode:
>8609		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>860c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>860f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8612		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8615		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8618		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>861b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>861e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8621		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8624		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8627		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8628						LabelHere:
.8628		c8		iny				iny 								; skip .
.8629		a2 00		ldx #$00			ldx 	#0 							; get a term
.862b		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm
.862e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8630		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8632		d0 22		bne $8656			bne 	_ALType 					; otherwise typing error
.8634		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8636		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8638		b5 60		lda $60,x			lda 	NSMantissa1,x
.863a		85 37		sta $37				sta 	zTemp0+1
.863c		5a		phy				phy 								; copy address in (64k)
.863d		a0 01		ldy #$01			ldy 	#1
.863f		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8642		92 36		sta ($36)			sta 	(zTemp0)
.8644		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8647		91 36		sta ($36),y			sta 	(zTemp0),y
.8649		c8		iny				iny
.864a		a9 00		lda #$00			lda 	#0 							; zero the rest.
.864c		91 36		sta ($36),y			sta 	(zTemp0),y
.864e		c8		iny				iny
.864f		91 36		sta ($36),y			sta 	(zTemp0),y
.8651		c8		iny				iny
.8652		91 36		sta ($36),y			sta 	(zTemp0),y
.8654		7a		ply				ply
.8655		60		rts				rts
.8656						_ALType:
.8656		4c 57 a4	jmp $a457			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8659						TypeAndCalculateOperand:
.8659		b1 30		lda ($30),y			lda 	(codePtr),y
.865b		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.865d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.865f		f0 5b		beq $86bc			beq 	_TACOExit
.8661		c9 80		cmp #$80			cmp 	#KWC_EOL
.8663		f0 57		beq $86bc			beq 	_TACOExit
.8665		c8		iny				iny
.8666		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8668		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.866a		f0 51		beq $86bd			beq 	CalculateOperand
.866c		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.866e		f0 1f		beq $868f			beq 	_TACOIndirect
.8670		88		dey				dey 								; undo get of first character
.8671		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get operand
.8674		b1 30		lda ($30),y			lda 	(codePtr),y
.8676		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8678		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.867a		d0 40		bne $86bc			bne 	_TACOExit
.867c		c8		iny				iny
.867d		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8680		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8682		c9 58		cmp #$58			cmp 	#'X'
.8684		f0 36		beq $86bc			beq 	_TACOExit
.8686		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8688		c9 59		cmp #$59			cmp 	#'Y'
.868a		f0 30		beq $86bc			beq 	_TACOExit
.868c						_TACOSyntax:
.868c		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.868f						_TACOIndirect:
.868f		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get the operand
.8692		b1 30		lda ($30),y			lda 	(codePtr),y
.8694		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8696		f0 17		beq $86af			beq 	_TACOIndX
.8698		20 5c 93	jsr $935c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.869b		b1 30		lda ($30),y			lda 	(codePtr),y
.869d		a2 d1		ldx #$d1			ldx 	#AM_IND
.869f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86a1		d0 19		bne $86bc			bne 	_TACOExit
.86a3		c8		iny				iny
.86a4		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86a7		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86a9		d0 e1		bne $868c			bne 	_TACOSyntax
.86ab		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86ad		80 0d		bra $86bc			bra 	_TACOExit
.86af						_TACOIndX:
.86af		c8		iny				iny
.86b0		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86b3		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86b5		d0 d5		bne $868c			bne 	_TACOSyntax
.86b7		20 5c 93	jsr $935c			jsr 	CheckRightBracket			; check )
.86ba		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86bc						_TACOExit:
.86bc		60		rts				rts
.86bd						CalculateOperand:
.86bd		48		pha				pha
.86be		da		phx				phx
.86bf		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86c1		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.86c4		fa		plx				plx
.86c5		68		pla				pla
.86c6		60		rts				rts
.86c7						TACOCheckXY:
.86c7		b1 30		lda ($30),y			lda 	(codePtr),y
.86c9		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86cb		c9 40		cmp #$40			cmp 	#$40
.86cd		d0 21		bne $86f0			bne 	_TCXYFail
.86cf		b1 30		lda ($30),y			lda 	(codePtr),y
.86d1		18		clc				clc
.86d2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86d4		85 37		sta $37				sta 	zTemp0+1
.86d6		c8		iny				iny
.86d7		b1 30		lda ($30),y			lda 	(codePtr),y
.86d9		c8		iny				iny
.86da		85 36		sta $36				sta 	zTemp0
.86dc		5a		phy				phy 								; save position
.86dd		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.86df		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e1		d0 0c		bne $86ef			bne 	_TCXYPopFail
.86e3		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.86e5		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e7		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.86e9		f0 08		beq $86f3			beq 	_TCXYFound
.86eb		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.86ed		f0 04		beq $86f3			beq 	_TCXYFound
.86ef						_TCXYPopFail:
.86ef		7a		ply				ply
.86f0						_TCXYFail:
.86f0		a9 00		lda #$00			lda 	#0
.86f2		60		rts				rts
.86f3						_TCXYFound:
.86f3		7a		ply				ply 								; restore position
.86f4		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.86f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.86f7						BackloadProgram:
.86f7		20 c5 8d	jsr $8dc5			jsr 	NewProgram 					; does the actual NEW.
.86fa		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.86fc		a9 57		lda #$57			lda 	#_BLLoad & $FF
.86fe		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.8701		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8703		8d a2 07	sta $07a2			sta 	BackLoadPage
.8706		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8708		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.870b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.870d		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.8710		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8713		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8716		a9 ff		lda #$ff			lda 	#$FF
.8718		8d fa ff	sta $fffa			sta 	$FFFA
.871b						_BPLoop:
.871b		a2 ff		ldx #$ff			ldx 	#$FF
.871d		20 8c 87	jsr $878c			jsr 	BLReadByte 					; read a byte
.8720		c9 00		cmp #$00			cmp 	#0
.8722		f0 2c		beq $8750			beq 	_BPExit 					; if 0 exit
.8724		30 2a		bmi $8750			bmi 	_BPExit 					; if -ve exit
.8726						_BPCopy:
.8726		e8		inx				inx  								; copy byte into the lineBuffer
.8727		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.872a		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.872d		20 8c 87	jsr $878c			jsr 	BLReadByte 					; read next byte
.8730		30 0a		bmi $873c			bmi 	_BPEndLine 					; -ve = EOL
.8732		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8734		d0 02		bne $8738			bne 	_BPNotTab
.8736		a9 20		lda #$20			lda 	#' '
.8738						_BPNotTab:
.8738		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.873a		b0 ea		bcs $8726			bcs 	_BPCopy 					; until a control character, should be 13 received.
.873c						_BPEndLine:
.873c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.873f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8742		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8745		f0 d4		beq $871b			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8747		20 6c 87	jsr $876c			jsr 	BLCheckLast 				; check last backload okay.
.874a		38		sec				sec 								; append not insert
.874b		20 41 a6	jsr $a641			jsr 	MemoryInsertLine 			; append to current program
.874e		80 cb		bra $871b			bra 	_BPLoop
.8750						_BPExit:
.8750		9c fa ff	stz $fffa			stz 	$FFFA
.8753		20 01 92	jsr $9201			jsr 	ClearSystem 				; clear variables etc.
.8756		60		rts				rts
.8757						_BLLoad:
>8757		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>875f		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.876c						BLCheckLast:
.876c		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.876f		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8772		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8775		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.8778		b0 0d		bcs $8787			bcs 	_BLCheckFail
.877a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.877d		8d a5 07	sta $07a5			sta 	BackLoadLast
.8780		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.8783		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.8786		60		rts				rts
.8787						_BLCheckFail:
.8787		a9 02		lda #$02		lda	#2
.8789		4c 75 93	jmp $9375		jmp	ErrorHandler
.878c						BLReadByte:
.878c		da		phx				phx
.878d		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.878f		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.8792		85 0b		sta $0b				sta 	8+3
.8794		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8797		85 36		sta $36				sta 	zTemp0
.8799		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.879c		85 37		sta $37				sta 	zTemp0+1
.879e		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87a0		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87a3		d0 0f		bne $87b4			bne 	_BLNoCarry
.87a5		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87a8		10 0a		bpl $87b4			bpl 	_BLNoCarry 					; need a new page
.87aa		48		pha				pha
.87ab		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87ad		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87b0		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87b3		68		pla				pla
.87b4						_BLNoCarry:
.87b4		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87b6		fa		plx				plx
.87b7		c9 00		cmp #$00			cmp 	#0
.87b9		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87ba						EditProgramCode:
.87ba		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87bd		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87c0		20 e5 a6	jsr $a6e5			jsr 	MemorySearch
.87c3		90 05		bcc $87ca			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87c5		d0 03		bne $87ca			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87c7		20 0a a6	jsr $a60a			jsr 	MemoryDeleteLine 			; delete the line
.87ca						_EPCNoDelete:
.87ca		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87cd		c9 80		cmp #$80			cmp 	#KWC_EOL
.87cf		f0 0d		beq $87de			beq 	_EPCNoInsert
.87d1		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87d4		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87d7		20 e5 a6	jsr $a6e5			jsr 	MemorySearch
.87da		18		clc				clc 								; insert at this point.
.87db		20 41 a6	jsr $a641			jsr 	MemoryInsertLine 			; insert the line
.87de						_EPCNoInsert:
.87de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87df						WarmStart:
.87df		a2 ff		ldx #$ff			ldx 	#$FF
.87e1		9a		txs				txs
.87e2		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.87e4		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87e7		20 a6 81	jsr $81a6			jsr 	EXTInputLine 				; get line to lineBuffer
.87ea		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.87ed		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.87f0		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.87f3		d0 17		bne $880c			bne 	_WSEditCode 				; if so,edit code.
.87f5		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.87f8		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.87fa		85 30		sta $30				sta 	codePtr
.87fc		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.87fe		85 31		sta $31				sta 	codePtr+1
.8800		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8803		c9 80		cmp #$80			cmp 	#KWC_EOL
.8805		f0 d8		beq $87df			beq 	WarmStart
.8807		20 62 8f	jsr $8f62			jsr 	RUNCodePointerLine 			; execute that line.
.880a		80 d3		bra $87df			bra 	WarmStart
.880c						_WSEditCode:
.880c		20 ba 87	jsr $87ba			jsr 	EditProgramCode 			; edit the program code
.880f		20 01 92	jsr $9201			jsr 	ClearSystem 				; clear all variables etc.
.8812		80 cb		bra $87df			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8814						AssembleCommand:
.8814		a2 00		ldx #$00			ldx 	#0
.8816		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; start address
.8819		a5 58		lda $58				lda 	NSMantissa0
.881b		8d 1a 04	sta $041a			sta 	AssemblerAddress
.881e		a5 60		lda $60				lda 	NSMantissa1
.8820		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8823		20 64 93	jsr $9364			jsr 	CheckComma
.8826		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; options 0-3
.8829		a5 58		lda $58				lda 	NSMantissa0
.882b		8d 1c 04	sta $041c			sta 	AssemblerControl
.882e		60		rts				rts
.882f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8830						AssertCommand:
.8830		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8832		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; the assert test
.8835		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; exit if result is non zero.
.8838		d0 05		bne $883f			bne 	_ACExit
.883a		a9 0a		lda #$0a		lda	#10
.883c		4c 75 93	jmp $9375		jmp	ErrorHandler
.883f						_ACExit:
.883f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8840						CallCommand:
.8840		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8842		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.8845						_CCClear
.8845		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8846		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; these are optional sequentially.
.8849		e0 04		cpx #$04			cpx 	#4
.884b		d0 f8		bne $8845			bne 	_CCClear
.884d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.884f						_CCCParam:
.884f		b1 30		lda ($30),y			lda 	(codePtr),y
.8851		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8853		d0 09		bne $885e			bne 	_CCCRun6502
.8855		c8		iny				iny 								; skip comma
.8856		e8		inx				inx	 								; next level
.8857		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get A/X/Y
.885a		e0 03		cpx #$03			cpx 	#3
.885c		90 f1		bcc $884f			bcc 	_CCCParam 					; done all 3 ?
.885e						_CCCRun6502:
.885e		5a		phy				phy 								; save position
.885f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8861		85 37		sta $37				sta 	zTemp0+1
.8863		a5 58		lda $58				lda 	NSMantissa0
.8865		85 36		sta $36				sta 	zTemp0
.8867		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8869		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.886b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.886d		20 72 88	jsr $8872			jsr 	_CCCZTemp0 					; call zTemp0
.8870		7a		ply				ply 								; restore position and exit
.8871		60		rts				rts
.8872						_CCCZTemp0:
.8872		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8875						Command_Data:
.8875		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8877		a2 80		ldx #$80			ldx 	#KWC_EOL
.8879		20 b7 92	jsr $92b7			jsr 	ScanForward
.887c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.887d						DimCommand:
.887d		b1 30		lda ($30),y			lda 	(codePtr),y
.887f		29 c0		and #$c0			and 	#$C0
.8881		c9 40		cmp #$40			cmp 	#$40
.8883		d0 7a		bne $88ff			bne 	_DCSyntax 				; n o, error.
.8885		b1 30		lda ($30),y			lda 	(codePtr),y
.8887		18		clc				clc
.8888		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.888a		85 3f		sta $3f				sta 	zaTemp+1
.888c		c8		iny				iny
.888d		b1 30		lda ($30),y			lda 	(codePtr),y
.888f		c8		iny				iny
.8890		85 3e		sta $3e				sta 	zaTemp
.8892		5a		phy				phy
.8893		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8895		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8897		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8899		c9 18		cmp #$18			cmp 	#NSTProcedure
.889b		f0 62		beq $88ff			beq 	_DCSyntax
.889d		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.889f		29 04		and #$04			and 	#NSBIsArray
.88a1		f0 64		beq $8907			beq 	_DCType
.88a3		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88a5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88a7		d0 59		bne $8902			bne 	_DCRedefine
.88a9		7a		ply				ply
.88aa		20 0a 89	jsr $890a			jsr 	_DCGetSize 				; get array size, check it.
.88ad		5a		phy				phy
.88ae		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88b0		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88b2		7a		ply				ply 							; is there a second (e.g. ,x)
.88b3		b1 30		lda ($30),y			lda 	(codePtr),y
.88b5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88b7		d0 0a		bne $88c3			bne 	_DCOneDimension
.88b9		c8		iny				iny 							; skip comma
.88ba		20 0a 89	jsr $890a			jsr 	_DCGetSize 				; get 2nd array size
.88bd		5a		phy				phy
.88be		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88c0		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88c2		7a		ply				ply
.88c3						_DCOneDimension:
.88c3		5a		phy				phy 							; save position
.88c4		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88c6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88c8		aa		tax				tax
.88c9		c8		iny				iny
.88ca		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88cc		e8		inx				inx 							; bump them.
.88cd		1a		inc a				inc 	a
.88ce		20 80 a2	jsr $a280			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.88d1		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.88d3		29 e0		and #$e0			and 	#$E0
.88d5		d0 23		bne $88fa			bne 	_DCSize
.88d7		a0 02		ldy #$02			ldy 	#2 						; get base type
.88d9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88db		20 18 89	jsr $8918			jsr 	ScaleByBaseType 		; scale by base type
.88de		a5 36		lda $36				lda 	zTemp0
.88e0		a6 37		ldx $37				ldx 	zTemp0+1
.88e2		20 77 9e	jsr $9e77			jsr 	AllocateXABytes 		; allocate memory
.88e5		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.88e7		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88e9		c8		iny				iny
.88ea		8a		txa				txa
.88eb		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88ed		7a		ply				ply 							; get position back
.88ee		20 5c 93	jsr $935c			jsr 	CheckRightBracket 		; check )
.88f1		b1 30		lda ($30),y			lda 	(codePtr),y
.88f3		c8		iny				iny 							; consume in case
.88f4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.88f6		f0 85		beq $887d			beq 	DimCommand
.88f8		88		dey				dey 							; undo consume
.88f9		60		rts				rts
.88fa						_DCSize:
.88fa		a9 16		lda #$16		lda	#22
.88fc		4c 75 93	jmp $9375		jmp	ErrorHandler
.88ff						_DCSyntax:
.88ff		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.8902						_DCRedefine:
.8902		a9 15		lda #$15		lda	#21
.8904		4c 75 93	jmp $9375		jmp	ErrorHandler
.8907						_DCType:
.8907		4c 57 a4	jmp $a457			jmp 	TypeError
.890a						_DCGetSize:
.890a		a2 00		ldx #$00			ldx 	#0 						; get first index.
.890c		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 	; get array dimension
.890f		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8911		f0 e7		beq $88fa			beq 	_DCSize
.8913		c9 fe		cmp #$fe			cmp 	#254
.8915		f0 e3		beq $88fa			beq 	_DCSize
.8917		60		rts				rts
.8918						ScaleByBaseType:
.8918		29 10		and #$10			and 	#NSBIsString 			; is it string
.891a		d0 19		bne $8935			bne 	_SBBTString
.891c		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.891e		48		pha				pha
.891f		a5 36		lda $36				lda 	zTemp0
.8921		48		pha				pha
.8922		06 36		asl $36				asl 	zTemp0 					; x 2
.8924		26 37		rol $37				rol 	zTemp0+1
.8926		06 36		asl $36				asl 	zTemp0 					; x 4
.8928		26 37		rol $37				rol 	zTemp0+1
.892a		68		pla				pla 							; add stacked value = x 5
.892b		65 36		adc $36				adc 	zTemp0
.892d		85 36		sta $36				sta 	zTemp0
.892f		68		pla				pla
.8930		65 37		adc $37				adc 	zTemp0+1
.8932		85 37		sta $37				sta 	zTemp0+1
.8934		60		rts				rts
.8935						_SBBTString:
.8935		06 36		asl $36				asl 	zTemp0
.8937		26 37		rol $37				rol 	zTemp0+1
.8939		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.893a						EndCommand:
.893a		4c df 87	jmp $87df			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.893d						ForCommand:
.893d		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.893f		20 f6 b2	jsr $b2f6			jsr 	StackOpen
.8942		a2 00		ldx #$00			ldx 	#0
.8944		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm
.8947		b5 50		lda $50,x			lda 	NSStatus,x
.8949		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.894b		d0 47		bne $8994			bne		_FCError
.894d		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.894f		20 6c 93	jsr $936c			jsr 	CheckNextA
.8952		e8		inx				inx
.8953		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; <from> in +1
.8956		b1 30		lda ($30),y			lda 	(codePtr),y
.8958		c8		iny				iny 								; consume it
.8959		48		pha				pha 								; save on stack for later
.895a		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.895c		f0 04		beq $8962			beq 	_FCNoSyntax
.895e		c9 db		cmp #$db			cmp 	#KWD_TO
.8960		d0 35		bne $8997			bne 	_FCSyntaxError
.8962						_FCNoSyntax:
.8962		e8		inx				inx
.8963		20 42 a2	jsr $a242			jsr 	EvaluateInteger
.8966		20 3b b3	jsr $b33b			jsr 	STKSaveCodePosition 		; save loop back position
.8969		68		pla				pla 								; restore DOWNTO or TO
.896a		5a		phy				phy 								; save Y on the stack
.896b		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.896d		f0 02		beq $8971			beq 	_FCNotDownTo
.896f		a9 02		lda #$02			lda 	#2
.8971						_FCNotDownTo:
.8971		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8972		a0 10		ldy #$10			ldy 	#16
.8974		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8976		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8978		a5 58		lda $58				lda 	NSMantissa0
.897a		91 34		sta ($34),y			sta 	(basicStack),y
.897c		a5 60		lda $60				lda 	NSMantissa1
.897e		c8		iny				iny
.897f		91 34		sta ($34),y			sta 	(basicStack),y
.8981		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8983		a2 01		ldx #$01			ldx 	#1
.8985		20 9a 89	jsr $899a			jsr 	FCIntegerToStack
.8988		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.898a		a2 02		ldx #$02			ldx 	#2
.898c		20 9a 89	jsr $899a			jsr 	FCIntegerToStack
.898f		20 b5 89	jsr $89b5			jsr 	CopyIndexToReference
.8992		7a		ply				ply 								; restore position
.8993		60		rts				rts
.8994						_FCError:
.8994		4c 57 a4	jmp $a457			jmp 	TypeError
.8997						_FCSyntaxError:
.8997		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.899a						FCIntegerToStack:
.899a		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.899c		10 03		bpl $89a1			bpl	 	_FCNotNegative
.899e		20 9e a2	jsr $a29e			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89a1						_FCNotNegative:
.89a1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89a3		91 34		sta ($34),y			sta 	(basicStack),y
.89a5		c8		iny				iny
.89a6		b5 60		lda $60,x			lda 	NSMantissa1,x
.89a8		91 34		sta ($34),y			sta 	(basicStack),y
.89aa		c8		iny				iny
.89ab		b5 68		lda $68,x			lda 	NSMantissa2,x
.89ad		91 34		sta ($34),y			sta 	(basicStack),y
.89af		c8		iny				iny
.89b0		b5 70		lda $70,x			lda 	NSMantissa3,x
.89b2		91 34		sta ($34),y			sta 	(basicStack),y
.89b4		60		rts				rts
.89b5						CopyIndexToReference:
.89b5		5a		phy				phy
.89b6		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89b8		38		sec				sec 								; (because we copy from offset 8)
.89b9		b1 34		lda ($34),y			lda 	(basicStack),y
.89bb		e9 08		sbc #$08			sbc 	#8
.89bd		85 36		sta $36				sta 	zTemp0
.89bf		c8		iny				iny
.89c0		b1 34		lda ($34),y			lda 	(basicStack),y
.89c2		e9 00		sbc #$00			sbc 	#0
.89c4		85 37		sta $37				sta 	zTemp0+1
.89c6		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89c8		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89ca		b1 34		lda ($34),y			lda 	(basicStack),y
.89cc		0a		asl a				asl 	a 							; into carry
.89cd		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89cf		90 14		bcc $89e5			bcc 	_CITRNormal
.89d1		38		sec				sec
.89d2						_CITRNegative:
.89d2		a9 00		lda #$00			lda 	#0
.89d4		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89d6		91 36		sta ($36),y			sta 	(zTemp0),y
.89d8		c8		iny				iny
.89d9		ca		dex				dex
.89da		d0 f6		bne $89d2			bne 	_CITRNegative
.89dc		88		dey				dey 								; look at MSB of mantissa
.89dd		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89df		09 80		ora #$80			ora 	#$80
.89e1		91 36		sta ($36),y			sta 	(zTemp0),y
.89e3		7a		ply				ply
.89e4		60		rts				rts
.89e5						_CITRNormal:
.89e5		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89e7		91 36		sta ($36),y			sta 	(zTemp0),y
.89e9		c8		iny				iny
.89ea		ca		dex				dex
.89eb		d0 f8		bne $89e5			bne 	_CITRNormal
.89ed		7a		ply				ply 								; and exit.
.89ee		60		rts				rts
.89ef						NextCommand:
.89ef		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89f1		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89f3		20 23 b3	jsr $b323			jsr 	StackCheckFrame
.89f6		5a		phy				phy
.89f7		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89f9		b1 34		lda ($34),y			lda 	(basicStack),y
.89fb		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89fd		30 02		bmi $8a01			bmi 	_NCStepNeg
.89ff		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a01						_NCStepNeg:
.8a01		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a03		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a05		18		clc				clc
.8a06						_NCBump:
.8a06		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a08		91 34		sta ($34),y			sta 	(basicStack),y
.8a0a		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a0c		c8		iny				iny 								; next byte
.8a0d		ca		dex				dex 								; do four times
.8a0e		d0 f6		bne $8a06			bne 	_NCBump
.8a10		20 b5 89	jsr $89b5			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a13		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a15		b1 34		lda ($34),y			lda 	(basicStack),y
.8a17		0a		asl a				asl 	a 							; sign bit to carry
.8a18		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a1a		85 38		sta $38				sta 	zTemp1
.8a1c		90 02		bcc $8a20			bcc 	_NCCompRev 					; use if step is +ve
.8a1e		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a20						_NCCompRev:
.8a20		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a22		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a24		85 39		sta $39				sta 	zTemp1+1
.8a26		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a28		38		sec				sec
.8a29						_NCCompare:
.8a29		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a2b		b1 34		lda ($34),y			lda 	(basicStack),y
.8a2d		a4 39		ldy $39				ldy 	zTemp1+1
.8a2f		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a31		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a33		e6 39		inc $39				inc 	zTemp1+1
.8a35		ca		dex				dex 								; do it 4 times.
.8a36		d0 f1		bne $8a29			bne 	_NCCompare
.8a38		50 02		bvc $8a3c			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a3a		49 80		eor #$80			eor 	#$80
.8a3c						_NCNoOverflow:
.8a3c		7a		ply				ply 								; restore Y position
.8a3d		0a		asl a				asl 	a 							; is bit 7 set.
.8a3e		90 04		bcc $8a44			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a40		20 15 b3	jsr $b315			jsr 	StackClose 					; exit the loop
.8a43		60		rts				rts
.8a44						_NCLoopBack:
.8a44		20 4c b3	jsr $b34c			jsr 	STKLoadCodePosition 		; loop back
.8a47		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a48						Command_GOSUB:
.8a48		a2 00		ldx #$00			ldx 	#0
.8a4a		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a4d		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a4f		20 f6 b2	jsr $b2f6			jsr 	StackOpen 					; create frame
.8a52		20 3b b3	jsr $b33b			jsr 	STKSaveCodePosition 		; save current position
.8a55		4c 6b 8a	jmp $8a6b			jmp 	GotoStackX
.8a58						Command_RETURN:
.8a58		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a5a		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a5c		20 23 b3	jsr $b323			jsr 	StackCheckFrame
.8a5f		20 4c b3	jsr $b34c			jsr 	STKLoadCodePosition 		; restore code position
.8a62		20 15 b3	jsr $b315			jsr 	StackClose
.8a65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a66						GotoCommand:
.8a66		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a68		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.8a6b						GotoStackX:
.8a6b		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a6d		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a6e		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a70		fa		plx				plx
.8a71		20 e5 a6	jsr $a6e5			jsr 	MemorySearch 				; transfer to line number AX.
.8a74		90 05		bcc $8a7b			bcc 	_GotoError 					; not found, off end.
.8a76		d0 03		bne $8a7b			bne 	_GotoError 					; not found exactly
.8a78		4c 5b 8f	jmp $8f5b			jmp 	RunNewLine 					; and go straight to new line code.
.8a7b						_GotoError:
.8a7b		a9 0d		lda #$0d		lda	#13
.8a7d		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a80						IfCommand:
.8a80		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a82		20 23 a2	jsr $a223			jsr 	EvaluateNumber
.8a85		b1 30		lda ($30),y			lda 	(codePtr),y
.8a87		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a89		d0 0a		bne $8a95			bne 	_IfStructured 				; we still support it.
.8a8b		c8		iny				iny 								; consume THEN
.8a8c		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; is it zero
.8a8f		f0 01		beq $8a92			beq 	_IfFail 					; if fail, go to next line
.8a91		60		rts				rts 								; if THEN just continue
.8a92						_IfFail:
.8a92		4c 36 8f	jmp $8f36			jmp 	EOLCommand
.8a95						_IfStructured:
.8a95		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; is it zero
.8a98		d0 07		bne $8aa1			bne 	_IfExit 					; if not, then continue normally.
.8a9a		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8a9c		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8a9e		20 b7 92	jsr $92b7			jsr 	ScanForward 				; and run from there
.8aa1						_IfExit:
.8aa1		60		rts				rts
.8aa2						ElseCode:
.8aa2		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8aa4		aa		tax				tax 								; so just go to the structure exit
.8aa5		20 b7 92	jsr $92b7			jsr 	ScanForward
.8aa8		60		rts				rts
.8aa9						EndIf:
.8aa9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8aaa						Command_Input:
.8aaa		9c 24 04	stz $0424			stz 	isPrintFlag
.8aad		80 0c		bra $8abb			bra 	Command_IP_Main
.8aaf						Command_CPrint:
.8aaf		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ab1		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ab4		80 05		bra $8abb			bra 	Command_IP_Main
.8ab6						Command_Print:
.8ab6		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ab8		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8abb						Command_IP_Main:
.8abb		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8abc						_CPLoop:
.8abc		08		php				php 								; save last action flag
.8abd		b1 30		lda ($30),y			lda 	(codePtr),y
.8abf		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ac1		f0 54		beq $8b17			beq 	_CPExit
.8ac3		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ac5		f0 50		beq $8b17			beq 	_CPExit
.8ac7		68		pla				pla 								; throw last action flag
.8ac8		b1 30		lda ($30),y			lda 	(codePtr),y
.8aca		c8		iny				iny
.8acb		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8acd		f0 45		beq $8b14			beq 	_CPContinueWithSameLine
.8acf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ad1		f0 3c		beq $8b0f			beq 	_CPTab
.8ad3		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ad5		f0 34		beq $8b0b			beq 	_CPNewLine
.8ad7		88		dey				dey 								; undo the get.
.8ad8		20 7d 98	jsr $987d			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8adb		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8add		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8adf		f0 0d		beq $8aee			beq 	_CPIsValue 					; no, display it.
.8ae1		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8ae4		d0 05		bne $8aeb			bne 	_CPIsPrint 					; otherwise display.
.8ae6		20 20 8b	jsr $8b20			jsr 	CIInputValue 				; input a value to the reference
.8ae9		80 20		bra $8b0b			bra 	_CPNewLine
.8aeb						_CPIsPrint:
.8aeb		20 42 9b	jsr $9b42			jsr 	Dereference 				; dereference if required.
.8aee						_CPIsValue:
.8aee		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8af0		29 10		and #$10			and 	#NSBIsString
.8af2		f0 09		beq $8afd			beq 	_CPNumber
.8af4		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8af6		a5 58		lda $58				lda 	NSMantissa0
.8af8		20 83 8b	jsr $8b83			jsr 	CPPrintStringXA
.8afb		80 be		bra $8abb			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8afd						_CPNumber:
.8afd		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8aff		20 0a a1	jsr $a10a			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b02		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b04		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b06		20 83 8b	jsr $8b83			jsr 	CPPrintStringXA 			; print it.
.8b09		80 b0		bra $8abb			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b0b						_CPNewLine:
.8b0b		a9 0d		lda #$0d			lda 	#13
.8b0d		80 02		bra $8b11			bra 	_CPPrintCharDirect
.8b0f						_CPTab:
.8b0f		a9 09		lda #$09			lda 	#9 							; print TAB
.8b11						_CPPrintCharDirect:
.8b11		20 9e 8b	jsr $8b9e			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b14						_CPContinueWithSameLine:
.8b14		38		sec				sec 								; loop round with carry set, which
.8b15		80 a5		bra $8abc			bra 	_CPLoop 					; will inhibit final CR
.8b17						_CPExit:
.8b17		28		plp				plp 								; get last action flag
.8b18		b0 05		bcs $8b1f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b1a		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b1c		20 9e 8b	jsr $8b9e			jsr 	CPPVControl
.8b1f						_CPExit2:
.8b1f		60		rts				rts
.8b20						CIInputValue:
.8b20		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b22						_CIInputLine:
.8b22		20 a1 8b	jsr $8ba1			jsr 	CPInputVector 				; get key
.8b25		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b27		f0 1f		beq $8b48			beq 	_CIHaveValue
.8b29		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b2b		f0 11		beq $8b3e			beq 	_CIBackspace
.8b2d		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b2f		90 f1		bcc $8b22			bcc 	_CIInputLine
.8b31		e0 50		cpx #$50			cpx 	#80 						; max length
.8b33		b0 ed		bcs $8b22			bcs 	_CIInputLine
.8b35		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b38		e8		inx				inx
.8b39		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b3c		80 e4		bra $8b22			bra 	_CIInputLine
.8b3e						_CIBackspace:
.8b3e		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b40		f0 e0		beq $8b22			beq 	_CIInputLine
.8b42		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b45		ca		dex				dex
.8b46		80 da		bra $8b22			bra 	_CIInputLine
.8b48						_CIHaveValue:
.8b48		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b4b		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b4d		29 10		and #$10			and 	#NSBIsString
.8b4f		f0 17		beq $8b68			beq 	_CIAssignNumber 			; assign a number
.8b51		a2 01		ldx #$01			ldx 	#1
.8b53		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b55		95 58		sta $58,x			sta 	NSMantissa0,x
.8b57		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b59		95 60		sta $60,x			sta 	NSMantissa1,x
.8b5b		74 68		stz $68,x			stz 	NSMantissa2,x
.8b5d		74 70		stz $70,x			stz 	NSMantissa3,x
.8b5f		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b61		95 50		sta $50,x			sta  	NSStatus,x
.8b63		ca		dex				dex 								; X = 0
.8b64		20 dd 8b	jsr $8bdd			jsr 	AssignVariable
.8b67		60		rts				rts
.8b68						_CIAssignNumber:
.8b68		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b6a		85 36		sta $36				sta 	zTemp0
.8b6c		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b6e		85 37		sta $37				sta 	zTemp0+1
.8b70		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b72		20 ea 9f	jsr $9fea			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b75		90 07		bcc $8b7e			bcc 	_CIIsOkay
.8b77		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b79		20 96 8b	jsr $8b96			jsr 	CPPrintVector
.8b7c		80 a2		bra $8b20			bra 	CIInputValue
.8b7e						_CIIsOkay:
.8b7e		ca		dex				dex 								; X = 0
.8b7f		20 dd 8b	jsr $8bdd			jsr 	AssignVariable
.8b82		60		rts				rts
.8b83						CPPrintStringXA:
.8b83		5a		phy				phy
.8b84		86 37		stx $37				stx 	zTemp0+1
.8b86		85 36		sta $36				sta 	zTemp0
.8b88		a0 00		ldy #$00			ldy 	#0
.8b8a						_PSXALoop:
.8b8a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b8c		f0 06		beq $8b94			beq 	_PSXAExit
.8b8e		20 96 8b	jsr $8b96			jsr 	CPPrintVector
.8b91		c8		iny				iny
.8b92		80 f6		bra $8b8a			bra 	_PSXALoop
.8b94						_PSXAExit:
.8b94		7a		ply				ply
.8b95		60		rts				rts
.8b96						CPPrintVector:
.8b96		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b99		30 03		bmi $8b9e			bmi 	CPPVControl
.8b9b		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8b9e						CPPVControl:
.8b9e		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8ba1						CPInputVector:
.8ba1		4c 9e 81	jmp $819e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8ba4						LetCommand:
.8ba4		a2 00		ldx #$00			ldx 	#0
.8ba6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ba8		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8baa		d0 14		bne $8bc0			bne 	_LCStandard
.8bac		c8		iny				iny 								; skip equal
.8bad		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bb0		20 42 9b	jsr $9b42			jsr 	Dereference 				; dereference it to a value
.8bb3		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bb5		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bb7		95 50		sta $50,x			sta 	NSStatus,x
.8bb9		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bbb		d0 0f		bne $8bcc			bne 	_LCMain
.8bbd		4c 57 a4	jmp $a457			jmp 	TypeError 					; was a reference before.
.8bc0						_LCStandard:
.8bc0		ad 67 98	lda $9867			lda 	PrecedenceLevel+"*"			; precedence > this
.8bc3		20 81 98	jsr $9881			jsr 	EvaluateExpressionAtPrecedence
.8bc6		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bc8		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bca		f0 0e		beq $8bda			beq 	_LetGoProc 					; it's a procedure call.
.8bcc						_LCMain:
.8bcc		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bce		20 6c 93	jsr $936c			jsr 	CheckNextA
.8bd1		e8		inx				inx 								; RHS
.8bd2		20 1a a2	jsr $a21a			jsr 	EvaluateValue
.8bd5		ca		dex				dex
.8bd6		20 dd 8b	jsr $8bdd			jsr 	AssignVariable
.8bd9		60		rts				rts
.8bda						_LetGoProc:
.8bda		4c 0c 8e	jmp $8e0c			jmp 	CallProcedure
.8bdd						AssignVariable:
.8bdd		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bdf		48		pha				pha 								; save a copy
.8be0		55 51		eor $51,x			eor 	NSStatus+1,x
.8be2		29 10		and #$10			and 	#NSBIsString
.8be4		d0 0b		bne $8bf1			bne 	_ASError
.8be6		68		pla				pla 								; get back
.8be7		29 10		and #$10			and 	#NSBIsString 				; check type
.8be9		d0 03		bne $8bee			bne 	_ASString
.8beb		4c 80 9a	jmp $9a80			jmp 	AssignNumber
.8bee						_ASString:
.8bee		4c de 9a	jmp $9ade			jmp 	AssignString
.8bf1						_ASError:
.8bf1		4c 57 a4	jmp $a457			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bf4						Command_List:
.8bf4		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8bf7		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bf9		20 6b 80	jsr $806b			jsr 	SNDCommand
.8bfc		b1 30		lda ($30),y			lda 	(codePtr),y
.8bfe		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c00		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c02		f0 72		beq $8c76			beq 	_CLListProcedure
.8c04		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c06		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c08		a9 ff		lda #$ff			lda 	#$FF
.8c0a		85 5f		sta $5f				sta 	NSMantissa0+7
.8c0c		85 67		sta $67				sta 	NSMantissa1+7
.8c0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c10		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c12		f0 1a		beq $8c2e			beq 	_CLSecond
.8c14		20 f3 8c	jsr $8cf3			jsr 	CLIsDigit 					; if not digit, list all
.8c17		b0 20		bcs $8c39			bcs 	_CLStart
.8c19		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c1b		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.8c1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c20		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c22		f0 0a		beq $8c2e			beq 	_CLSecond 					; if so go get it
.8c24		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c26		85 5f		sta $5f				sta 	NSMantissa0+7
.8c28		a5 64		lda $64				lda 	NSMantissa1+4
.8c2a		85 67		sta $67				sta 	NSMantissa1+7
.8c2c		80 0b		bra $8c39			bra 	_CLStart
.8c2e						_CLSecond:
.8c2e		c8		iny				iny 								; consume comma
.8c2f		20 f3 8c	jsr $8cf3			jsr 	CLIsDigit 					; digit found
.8c32		b0 05		bcs $8c39			bcs 	_CLStart 					; if not, continue listing
.8c34		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c36		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.8c39						_CLStart
.8c39		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c3b		85 30		sta $30				sta 	codePtr
.8c3d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c3f		85 31		sta $31				sta 	codePtr+1
.8c41						_CLLoop:
.8c41		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c43		f0 03		beq $8c48			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c45		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8c48						_NoEvents:
.8c48		d0 27		bne $8c71			bne 	_CLBreak
.8c4a		b2 30		lda ($30)			lda 	(codePtr)
.8c4c		f0 20		beq $8c6e			beq 	_CLExit
.8c4e		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c50		20 e2 8c	jsr $8ce2			jsr 	CLCompareLineNo
.8c53		90 0c		bcc $8c61			bcc 	_CLNext
.8c55		a2 07		ldx #$07			ldx 	#7
.8c57		20 e2 8c	jsr $8ce2			jsr 	CLCompareLineNo
.8c5a		f0 02		beq $8c5e			beq 	_CLDoThisOne
.8c5c		b0 03		bcs $8c61			bcs 	_CLNext
.8c5e						_CLDoThisOne:
.8c5e		20 cf 8c	jsr $8ccf			jsr 	CLListOneLine 				; routine to list the current line.
.8c61						_CLNext:
.8c61		18		clc				clc
.8c62		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c64		65 30		adc $30				adc 	codePtr
.8c66		85 30		sta $30				sta 	codePtr
.8c68		90 02		bcc $8c6c			bcc 	_CREExit
.8c6a		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c6c						_CREExit:
.8c6c		80 d3		bra $8c41			bra 	_CLLoop
.8c6e						_CLExit:
.8c6e		4c df 87	jmp $87df			jmp 	WarmStart
.8c71						_CLBreak:
.8c71		a9 01		lda #$01		lda	#1
.8c73		4c 75 93	jmp $9375		jmp	ErrorHandler
.8c76						_CLListProcedure:
.8c76		b1 30		lda ($30),y			lda 	(codePtr),y
.8c78		85 38		sta $38				sta 	zTemp1
.8c7a		c8		iny				iny
.8c7b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c7d		85 39		sta $39				sta 	zTemp1+1
.8c7f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c81		85 30		sta $30				sta 	codePtr
.8c83		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c85		85 31		sta $31				sta 	codePtr+1
.8c87						_CLLPSearch:
.8c87		b2 30		lda ($30)			lda 	(codePtr)
.8c89		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c8b		f0 e1		beq $8c6e			beq 	_CLExit
.8c8d		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c8f		b1 30		lda ($30),y			lda 	(codePtr),y
.8c91		c9 af		cmp #$af			cmp 	#KWD_PROC
.8c93		d0 0e		bne $8ca3			bne 	_CLLPNext
.8c95		c8		iny				iny 								; check if PROC this.
.8c96		b1 30		lda ($30),y			lda 	(codePtr),y
.8c98		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c9a		d0 07		bne $8ca3			bne 	_CLLPNext
.8c9c		c8		iny				iny
.8c9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c9f		c5 39		cmp $39				cmp 	zTemp1+1
.8ca1		f0 0d		beq $8cb0			beq 	_CLLPFound
.8ca3						_CLLPNext:
.8ca3		18		clc				clc
.8ca4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ca6		65 30		adc $30				adc 	codePtr
.8ca8		85 30		sta $30				sta 	codePtr
.8caa		90 02		bcc $8cae			bcc 	_CREExit
.8cac		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cae						_CREExit:
.8cae		80 d7		bra $8c87			bra 	_CLLPSearch
.8cb0						_CLLPFound:
.8cb0		b2 30		lda ($30)			lda 	(codePtr)
.8cb2		f0 ba		beq $8c6e			beq 	_CLExit
.8cb4		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cb6		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb8		48		pha				pha
.8cb9		20 cf 8c	jsr $8ccf			jsr 	CLListOneLine 				; list line and go forward
.8cbc		18		clc				clc
.8cbd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cbf		65 30		adc $30				adc 	codePtr
.8cc1		85 30		sta $30				sta 	codePtr
.8cc3		90 02		bcc $8cc7			bcc 	_CREExit
.8cc5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cc7						_CREExit:
.8cc7		68		pla				pla 								; reached ENDPROC ?
.8cc8		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8cca		d0 e4		bne $8cb0			bne 	_CLLPFound
.8ccc		4c df 87	jmp $87df			jmp 	WarmStart
.8ccf						CLListOneLine:
.8ccf		20 1a 93	jsr $931a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8cd2		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cd5		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cd7		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8cd9		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.8cdc		a9 0d		lda #$0d			lda 	#13 						; new line
.8cde		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8ce1		60		rts				rts
.8ce2						CLCompareLineNo:
.8ce2		38		sec				sec
.8ce3		a0 01		ldy #$01			ldy 	#1
.8ce5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce7		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8ce9		85 36		sta $36				sta 	zTemp0
.8ceb		c8		iny				iny
.8cec		b1 30		lda ($30),y			lda 	(codePtr),y
.8cee		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cf0		05 36		ora $36				ora 	zTemp0
.8cf2		60		rts				rts
.8cf3						CLIsDigit:
.8cf3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf5		c9 30		cmp #$30			cmp 	#"0"
.8cf7		90 03		bcc $8cfc			bcc	 	_CLIDExitFalse
.8cf9		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cfb		60		rts				rts
.8cfc						_CLIDExitFalse:
.8cfc		38		sec				sec
.8cfd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8cfe						Command_LOCAL:
.8cfe		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d00		20 0c 8d	jsr $8d0c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d03		b1 30		lda ($30),y			lda 	(codePtr),y
.8d05		c8		iny				iny
.8d06		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d08		f0 f4		beq $8cfe			beq 	Command_LOCAL 				; if so, localise another variable.
.8d0a		88		dey				dey 								; unpick pre-get
.8d0b		60		rts				rts
.8d0c						LocaliseNextTerm:
.8d0c		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm 				; evaluate the term
.8d0f		b5 50		lda $50,x			lda 	NSStatus,x
.8d11		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d13		f0 5c		beq $8d71			beq		_LNTError
.8d15		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d17		85 36		sta $36				sta 	zTemp0
.8d19		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d1b		85 37		sta $37				sta  	zTemp0+1
.8d1d		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d1f		29 10		and #$10			and 	#NSBIsString
.8d21		d0 1e		bne $8d41			bne 	_LNTPushString
.8d23		5a		phy				phy
.8d24		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d26						_LNTPushNumLoop:
.8d26		b1 36		lda ($36),y			lda		(zTemp0),y
.8d28		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d2b		c8		iny				iny
.8d2c		c0 05		cpy #$05			cpy 	#5
.8d2e		d0 f6		bne $8d26			bne 	_LNTPushNumLoop
.8d30		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d32		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d35		a5 37		lda $37				lda 	zTemp0+1
.8d37		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d3a		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d3c		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d3f		7a		ply				ply
.8d40		60		rts				rts
.8d41						_LNTPushString:
.8d41		5a		phy				phy
.8d42		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d44		85 38		sta $38				sta 	zTemp1
.8d46		a0 01		ldy #$01			ldy 	#1
.8d48		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d4a		85 39		sta $39				sta 	zTemp1+1
.8d4c		a0 00		ldy #$00			ldy 	#0 							; output string
.8d4e		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d50		f0 0a		beq $8d5c			beq 	_LNTStringOut
.8d52						_LNTPushStrLoop:
.8d52		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d54		f0 06		beq $8d5c			beq 	_LNTStringOut
.8d56		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d59		c8		iny				iny
.8d5a		80 f6		bra $8d52			bra 	_LNTPushStrLoop
.8d5c						_LNTStringOut:
.8d5c		98		tya				tya									; output length (chars written).
.8d5d		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d60		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d62		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d65		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d67		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d6a		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d6c		20 d5 b2	jsr $b2d5			jsr 	StackPushByte
.8d6f		7a		ply				ply
.8d70		60		rts				rts
.8d71						_LNTError:
.8d71		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.8d74						LocalPopValue:
.8d74		20 ed b2	jsr $b2ed			jsr 	StackPopByte
.8d77		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8d79		d0 17		bne $8d92			bne 	_LPVString
.8d7b		20 ed b2	jsr $b2ed			jsr 	StackPopByte 				; address
.8d7e		85 37		sta $37				sta 	zTemp0+1
.8d80		20 ed b2	jsr $b2ed			jsr 	StackPopByte
.8d83		85 36		sta $36				sta 	zTemp0
.8d85		5a		phy				phy
.8d86		a0 04		ldy #$04			ldy 	#4 							; copy back
.8d88						_LPVNumberCopy:
.8d88		20 ed b2	jsr $b2ed			jsr 	StackPopByte
.8d8b		91 36		sta ($36),y			sta 	(zTemp0),y
.8d8d		88		dey				dey
.8d8e		10 f8		bpl $8d88			bpl 	_LPVNumberCopy
.8d90		7a		ply				ply 								; and complete
.8d91		60		rts				rts
.8d92						_LPVString:
.8d92		20 ed b2	jsr $b2ed			jsr 	StackPopByte 				; address of record copied to zTemp0
.8d95		85 37		sta $37				sta 	zTemp0+1
.8d97		20 ed b2	jsr $b2ed			jsr 	StackPopByte
.8d9a		85 36		sta $36				sta 	zTemp0
.8d9c		5a		phy				phy
.8d9d		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8d9f		85 38		sta $38				sta 	zTemp1
.8da1		a0 01		ldy #$01			ldy 	#1
.8da3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8da5		85 39		sta $39				sta 	zTemp1+1
.8da7		20 ed b2	jsr $b2ed			jsr 	StackPopByte 				; # chars to get => y
.8daa		a8		tay				tay
.8dab		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8dad		f0 0e		beq $8dbd			beq 	_LPVStringCopied
.8daf		a9 00		lda #$00			lda 	#0 							; NULL on end
.8db1		91 38		sta ($38),y			sta 	(zTemp1),y
.8db3						_LPVStringCopy:
.8db3		88		dey				dey
.8db4		30 07		bmi $8dbd			bmi 	_LPVStringCopied
.8db6		20 ed b2	jsr $b2ed			jsr 	StackPopByte
.8db9		91 38		sta ($38),y			sta 	(zTemp1),y
.8dbb		80 f6		bra $8db3			bra 	_LPVStringCopy
.8dbd						_LPVStringCopied:
.8dbd		fa		plx				plx
.8dbe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8dbf						NewCommand:
.8dbf		20 c5 8d	jsr $8dc5			jsr 	NewProgram 					; does the actual NEW.
.8dc2		4c df 87	jmp $87df			jmp 	WarmStart 					; and warm starts straight away.
.8dc5						NewProgram:
.8dc5		20 c7 a6	jsr $a6c7			jsr 	MemoryNew
.8dc8		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dcb		20 01 92	jsr $9201			jsr 	ClearSystem					; clear everything.
.8dce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8dcf						PokeBCommand:
.8dcf		a9 01		lda #$01			lda 	#1
.8dd1		80 0c		bra $8ddf			bra 	PokeCommand
.8dd3						PokeWCommand:
.8dd3		a9 02		lda #$02			lda 	#2
.8dd5		80 08		bra $8ddf			bra 	PokeCommand
.8dd7						PokeLCommand:
.8dd7		a9 03		lda #$03			lda 	#3
.8dd9		80 04		bra $8ddf			bra 	PokeCommand
.8ddb						PokeDCommand:
.8ddb		a9 04		lda #$04			lda 	#4
.8ddd		80 00		bra $8ddf			bra 	PokeCommand
.8ddf						PokeCommand:
.8ddf		48		pha				pha 								; save count on stack
.8de0		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8de2		20 55 a2	jsr $a255			jsr		Evaluate16BitInteger 		; address
.8de5		20 64 93	jsr $9364			jsr 	CheckComma
.8de8		e8		inx				inx
.8de9		20 42 a2	jsr $a242			jsr		EvaluateInteger 			; data
.8dec		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8dee		85 36		sta $36				sta 	zTemp0
.8df0		a5 60		lda $60				lda 	NSMantissa1
.8df2		85 37		sta $37				sta 	zTemp0+1
.8df4		68		pla				pla 								; count -> zTemp1
.8df5		85 38		sta $38				sta 	zTemp1
.8df7		5a		phy				phy 								; save Y position.
.8df8		a0 00		ldy #$00			ldy 	#0 							; index to write
.8dfa		a2 00		ldx #$00			ldx 	#0 							; index to read
.8dfc						_PCLoop:
.8dfc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8dfe		91 36		sta ($36),y			sta 	(zTemp0),y
.8e00		c8		iny				iny 								; next byte to write
.8e01		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e02		18		clc				clc
.8e03		69 08		adc #$08			adc 	#MathStackSize
.8e05		aa		tax				tax
.8e06		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e08		d0 f2		bne $8dfc			bne 	_PCLoop
.8e0a		7a		ply				ply 								; restore position.
.8e0b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e0c						CallProcedure:
.8e0c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8e10		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e12		f0 0c		beq $8e20			beq 	_CPEndParam
.8e14						_CPParamLoop:
.8e14		20 1a a2	jsr $a21a			jsr 	EvaluateValue 				; get parameter onto stack
.8e17		e8		inx				inx 								; bump next stack
.8e18		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1a		c8		iny				iny
.8e1b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e1d		f0 f5		beq $8e14			beq 	_CPParamLoop
.8e1f		88		dey				dey 								; unpick.
.8e20						_CPEndParam:
.8e20		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e23		c8		iny				iny									; skip right bracket
.8e24		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e26		20 f6 b2	jsr $b2f6			jsr 	StackOpen
.8e29		20 3b b3	jsr $b33b			jsr 	STKSaveCodePosition 		; save loop position
.8e2c		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e2e		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e30		a5 60		lda $60				lda 	NSMantissa1
.8e32		85 37		sta $37				sta 	zTemp0+1
.8e34		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e36		b2 36		lda ($36)			lda 	(zTemp0)
.8e38		85 30		sta $30				sta 	safePtr
.8e3a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e3c		85 31		sta $31				sta 	safePtr+1
.8e3e		c8		iny				iny
.8e3f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e41		85 32		sta $32				sta 	safePtr+2
.8e43		c8		iny				iny
.8e44		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e46		85 33		sta $33				sta 	safePtr+3
.8e48		c8		iny				iny 								; get Y offset -> Y
.8e49		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4b		a8		tay				tay
.8e4c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e4e		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e51		f0 13		beq $8e66			beq 	_ParamExit 					; if so, exit.
.8e53						_ParamExtract:
.8e53		ca		dex				dex 								; put a local term on the level before
.8e54		20 0c 8d	jsr $8d0c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e57		20 dd 8b	jsr $8bdd			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e5a		e8		inx				inx 								; advance to next parameter to do.
.8e5b		e8		inx				inx
.8e5c		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e5f		f0 05		beq $8e66			beq 	_ParamExit
.8e61		20 64 93	jsr $9364			jsr 	CheckComma 					; comma seperating parameters
.8e64		80 ed		bra $8e53			bra 	_ParamExtract
.8e66						_ParamExit:
.8e66		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; check )
.8e69		60		rts				rts 								; and continue from here
.8e6a						Command_ENDPROC:
.8e6a		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e6c		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e6e		20 23 b3	jsr $b323			jsr 	StackCheckFrame
.8e71		20 4c b3	jsr $b34c			jsr 	STKLoadCodePosition 		; restore code position
.8e74		20 15 b3	jsr $b315			jsr 	StackClose
.8e77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e78						Command_Read:
.8e78		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e7a		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm
.8e7d		b5 50		lda $50,x			lda 	NSStatus,x
.8e7f		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e81		f0 4f		beq $8ed2			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8e83		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs 			; swap code and data
.8e86		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e89		d0 25		bne $8eb0			bne 	_CRContinueData  			; forward for the next one.
.8e8b		b2 30		lda ($30)			lda 	(codePtr)
.8e8d		f0 1c		beq $8eab			beq 	_CRNoData
.8e8f						_CRKeepSearching:
.8e8f		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.8e91		a2 80		ldx #$80			ldx 	#KWC_EOL
.8e93		20 b7 92	jsr $92b7			jsr 	ScanForward
.8e96		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.8e98		f0 16		beq $8eb0			beq 	_CRHaveData 				; found it
.8e9a		18		clc				clc
.8e9b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e9d		65 30		adc $30				adc 	codePtr
.8e9f		85 30		sta $30				sta 	codePtr
.8ea1		90 02		bcc $8ea5			bcc 	_CREExit
.8ea3		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ea5						_CREExit:
.8ea5		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ea7		b2 30		lda ($30)			lda 	(codePtr)
.8ea9		d0 e4		bne $8e8f			bne 	_CRKeepSearching
.8eab						_CRNoData:
.8eab		a9 0b		lda #$0b		lda	#11
.8ead		4c 75 93	jmp $9375		jmp	ErrorHandler
.8eb0						_CRHaveData:
.8eb0						_CRContinueData:
.8eb0		a2 01		ldx #$01			ldx 	#1
.8eb2		20 1a a2	jsr $a21a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8eb5		ca		dex				dex
.8eb6		20 dd 8b	jsr $8bdd			jsr		AssignVariable 				; do the assignment
.8eb9		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8ebc		b1 30		lda ($30),y			lda 	(codePtr),y
.8ebe		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8ec0		d0 04		bne $8ec6			bne 	_CRSwapBack
.8ec2		c8		iny				iny 								; consume comma
.8ec3		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8ec6						_CRSwapBack:
.8ec6		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs			; swap them back.
.8ec9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ecb		c8		iny				iny
.8ecc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ece		f0 a8		beq $8e78			beq 	Command_Read 				; if so go round again.
.8ed0		88		dey				dey 								; unpick get.
.8ed1		60		rts				rts
.8ed2						_CRSyntax:
.8ed2		4c 4d a4	jmp $a44d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ed5						RemCommand:
.8ed5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ed7		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ed9		d0 06		bne $8ee1			bne 	_RMExit
.8edb		c8		iny				iny 								; point to offset
.8edc		98		tya				tya 								; A = offset position
.8edd		38		sec				sec 								; add size +1 hence SEC
.8ede		71 30		adc ($30),y			adc 	(codePtr),y
.8ee0		a8		tay				tay 								; make current position.
.8ee1						_RMExit:
.8ee1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ee2						Command_REPEAT:
.8ee2		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ee4		20 f6 b2	jsr $b2f6			jsr 	StackOpen
.8ee7		20 3b b3	jsr $b33b			jsr 	STKSaveCodePosition 		; save loop position
.8eea		60		rts				rts
.8eeb						Command_UNTIL:
.8eeb		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8eed		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8eef		20 23 b3	jsr $b323			jsr 	StackCheckFrame
.8ef2		a2 00		ldx #$00			ldx 	#0
.8ef4		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; work out the number
.8ef7		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; check if zero
.8efa		f0 04		beq $8f00			beq 	_CULoopBack 				; if so keep looping
.8efc		20 15 b3	jsr $b315			jsr 	StackClose		 			; return
.8eff		60		rts				rts
.8f00						_CULoopBack:
.8f00		20 4c b3	jsr $b34c			jsr 	STKLoadCodePosition 		; loop back
.8f03		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f04						Command_Restore:
.8f04		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs 			; swap code and data
.8f07		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f09		85 30		sta $30				sta 	codePtr
.8f0b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f0d		85 31		sta $31				sta 	codePtr+1
.8f0f		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs 			; put them back
.8f12		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f14		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f17		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f1a		60		rts				rts
.8f1b						SwapDataCodePtrs:
.8f1b		da		phx				phx
.8f1c		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f1e						_SDCPLoop:
.8f1e		b5 30		lda $30,x			lda 	safePtr,x
.8f20		48		pha				pha
.8f21		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f24		95 30		sta $30,x			sta 	safePtr,x
.8f26		68		pla				pla
.8f27		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f2a		ca		dex				dex
.8f2b		10 f1		bpl $8f1e			bpl 	_SDCPLoop
.8f2d		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f30		8c 17 04	sty $0417			sty 	dataPointer+4
.8f33		a8		tay				tay
.8f34		fa		plx				plx
.8f35		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f36						EOLCommand:
.8f36		18		clc				clc
.8f37		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f39		65 30		adc $30				adc 	codePtr
.8f3b		85 30		sta $30				sta 	codePtr
.8f3d		90 02		bcc $8f41			bcc 	_CREExit
.8f3f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f41						_CREExit:
.8f41		80 18		bra $8f5b			bra 	RunNewLine
.8f43						CommandRUNOptLoad:
.8f43		b1 30		lda ($30),y			lda 	(codePtr),y
.8f45		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f47		f0 07		beq $8f50			beq 	RunCurrentProgram
.8f49		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f4b		f0 03		beq $8f50			beq 	RunCurrentProgram
.8f4d		20 a8 ac	jsr $aca8			jsr 	LoadFile 					; load expected name file.
.8f50						RunCurrentProgram:
.8f50		20 01 92	jsr $9201			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f53		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f55		85 30		sta $30				sta 	codePtr
.8f57		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f59		85 31		sta $31				sta 	codePtr+1
.8f5b						RunNewLine:
.8f5b		b2 30		lda ($30)			lda 	(codePtr)
.8f5d		f0 74		beq $8fd3			beq 	CRNoProgram         		; no then END.
.8f5f		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f61		9a		txs				txs
.8f62						RUNCodePointerLine:
.8f62		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f64						_CRIncMainLoop:
.8f64		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f66		f0 03		beq $8f6b			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f68		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8f6b						_NoEvents:
.8f6b		d0 61		bne $8fce			bne 	_CRBreak
.8f6d		a5 01		lda $01				lda 	1 							; save I/O 0
.8f6f		48		pha				pha
.8f70		64 01		stz $01				stz 	1 							; access I/O Page 0
.8f72		38		sec				sec 								; calculate timer - LastTick
.8f73		ad 59 d6	lda $d659			lda 	$D659
.8f76		cd 5e 06	cmp $065e			cmp 	LastTick
.8f79		f0 06		beq $8f81			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8f7b		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8f7e		20 4d 82	jsr $824d			jsr 	TickHandler 							; go do the code.
.8f81						_NoFireTick:
.8f81		68		pla				pla 								; restore I/O 0
.8f82		85 01		sta $01				sta 	1
.8f84						_CRNoBreakCheck:
.8f84		c8		iny				iny									; next token
.8f85						_CRMainLoop:
.8f85		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f88		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8a		10 10		bpl $8f9c			bpl 	_CRNotKeyword				; not a token.
.8f8c		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f8e		b0 04		bcs $8f94			bcs 	_CRIsKeyword
.8f90		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8f92		b0 34		bcs $8fc8			bcs		_CRSyntaxError
.8f94						_CRIsKeyword:
.8f94		c8		iny				iny 								; consume command
.8f95		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8f96		aa		tax				tax 								; put in X for vector jump
.8f97		20 cb 8f	jsr $8fcb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8f9a		80 e9		bra $8f85			bra 	_CRMainLoop 				; and loop round
.8f9c						_CRNotKeyword:
.8f9c		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8f9e		f0 c4		beq $8f64			beq 	_CRIncMainLoop
.8fa0		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fa2		90 05		bcc $8fa9			bcc 	_CRNotVariable
.8fa4						_CRGoLet:
.8fa4		20 a4 8b	jsr $8ba4			jsr 	LetCommand
.8fa7		80 dc		bra $8f85			bra 	_CRMainLoop
.8fa9						_CRNotVariable:
.8fa9		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.8fab		f0 f7		beq $8fa4			beq 	_CRGoLet
.8fad		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8faf		f0 f3		beq $8fa4			beq 	_CRGoLet
.8fb1		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fb3		f0 ef		beq $8fa4			beq 	_CRGoLet
.8fb5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fb7		f0 09		beq $8fc2			beq 	_CRGoRem
.8fb9		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fbb		d0 0b		bne $8fc8			bne 	_CRSyntaxError
.8fbd		20 28 86	jsr $8628			jsr 	LabelHere
.8fc0		80 c3		bra $8f85			bra 	_CRMainLoop
.8fc2						_CRGoRem:
.8fc2		c8		iny				iny
.8fc3		20 d5 8e	jsr $8ed5			jsr 	RemCommand
.8fc6		80 bd		bra $8f85			bra 	_CRMainLoop
.8fc8						_CRSyntaxError:
.8fc8		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.8fcb						_CRCallVector0:
.8fcb		7c 6a 90	jmp ($906a,x)			jmp 	(VectorSet0,x)
.8fce						_CRBreak:
.8fce		a9 01		lda #$01		lda	#1
.8fd0		4c 75 93	jmp $9375		jmp	ErrorHandler
.8fd3						CRNoProgram:
.8fd3		4c 3a 89	jmp $893a			jmp 	EndCommand
.8fd6						Shift1Command:
.8fd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fd8		c8		iny				iny
.8fd9		0a		asl a				asl 	a
.8fda		aa		tax				tax
.8fdb		7c 22 91	jmp ($9122,x)			jmp 	(VectorSet1,x)
.8fde						Shift2Command:
.8fde		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe0		c8		iny				iny
.8fe1		0a		asl a				asl 	a
.8fe2		aa		tax				tax
.8fe3		7c 74 91	jmp ($9174,x)			jmp 	(VectorSet2,x)
.8fe6						Unused1:
.8fe6						Unused2:
.8fe6						Unused3:
.8fe6						Unused4:
.8fe6		4c 4d a4	jmp $a44d			jmp 	SyntaxError
>8fe9								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8fea						VectorSetPunc:
>8fea		33 96					.word	ShiftLeft                        ; $00 <<
>8fec		1e 94					.word	BinaryCompareLessEqual           ; $01 <=
>8fee		14 94					.word	BinaryCompareNotEqual            ; $02 <>
>8ff0		4d a4					.word	SyntaxError                      ; $03 !!3
>8ff2		4d a4					.word	SyntaxError                      ; $04 ><
>8ff4		28 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>8ff6		36 96					.word	ShiftRight                       ; $06 >>
>8ff8		4d a4					.word	SyntaxError                      ; $07 !!7
>8ffa		4d a4					.word	SyntaxError                      ; $08 !!8
>8ffc		4d a4					.word	SyntaxError                      ; $09 !!9
>8ffe		4d a4					.word	SyntaxError                      ; $0a !!10
>9000		4d a4					.word	SyntaxError                      ; $0b !!11
>9002		4d a4					.word	SyntaxError                      ; $0c !!12
>9004		4d a4					.word	SyntaxError                      ; $0d !!13
>9006		4d a4					.word	SyntaxError                      ; $0e !!14
>9008		4d a4					.word	SyntaxError                      ; $0f !!15
>900a		4d a4					.word	SyntaxError                      ; $10 @
>900c		4d a4					.word	SyntaxError                      ; $11 !!17
>900e		4d a4					.word	SyntaxError                      ; $12 !!18
>9010		4d a4					.word	SyntaxError                      ; $13 [
>9012		df 94					.word	IntegerDivide                    ; $14 \
>9014		4d a4					.word	SyntaxError                      ; $15 ]
>9016		71 97					.word	EorInteger                       ; $16 ^
>9018		4d a4					.word	SyntaxError                      ; $17 _
>901a		4d a4					.word	SyntaxError                      ; $18 `
>901c		4d a4					.word	SyntaxError                      ; $19 !!25
>901e		4d a4					.word	SyntaxError                      ; $1a !!26
>9020		4d a4					.word	SyntaxError                      ; $1b {
>9022		3c 97					.word	OraInteger                       ; $1c |
>9024		4d a4					.word	SyntaxError                      ; $1d }
>9026		4d a4					.word	SyntaxError                      ; $1e ~
>9028		4d a4					.word	SyntaxError                      ; $1f <7F>
>902a		4d a4					.word	SyntaxError                      ; $20
>902c		a6 97					.word	WordIndirect                     ; $21 !
>902e		4d a4					.word	SyntaxError                      ; $22 "
>9030		4d a4					.word	SyntaxError                      ; $23 #
>9032		4d a4					.word	SyntaxError                      ; $24 $
>9034		20 95					.word	IntegerModulus                   ; $25 %
>9036		07 97					.word	AndInteger                       ; $26 &
>9038		4d a4					.word	SyntaxError                      ; $27 '
>903a		4d a4					.word	SyntaxError                      ; $28 (
>903c		4d a4					.word	SyntaxError                      ; $29 )
>903e		8e 95					.word	MulInteger                       ; $2a *
>9040		a9 96					.word	AddInteger                       ; $2b +
>9042		4d a4					.word	SyntaxError                      ; $2c ,
>9044		e2 96					.word	SubInteger                       ; $2d -
>9046		4d a4					.word	SyntaxError                      ; $2e .
>9048		60 99					.word	FDivideCommand                   ; $2f /
>904a		4d a4					.word	SyntaxError                      ; $30 0
>904c		4d a4					.word	SyntaxError                      ; $31 1
>904e		4d a4					.word	SyntaxError                      ; $32 2
>9050		4d a4					.word	SyntaxError                      ; $33 3
>9052		4d a4					.word	SyntaxError                      ; $34 4
>9054		4d a4					.word	SyntaxError                      ; $35 5
>9056		4d a4					.word	SyntaxError                      ; $36 6
>9058		4d a4					.word	SyntaxError                      ; $37 7
>905a		4d a4					.word	SyntaxError                      ; $38 8
>905c		4d a4					.word	SyntaxError                      ; $39 9
>905e		4d a4					.word	SyntaxError                      ; $3a :
>9060		4d a4					.word	SyntaxError                      ; $3b ;
>9062		00 94					.word	BinaryCompareLess                ; $3c <
>9064		f6 93					.word	BinaryCompareEqual               ; $3d =
>9066		0a 94					.word	BinaryCompareGreater             ; $3e >
>9068		c8 97					.word	ByteIndirect                     ; $3f ?
.906a						VectorSet0:
>906a		36 8f					.word	EOLCommand                       ; $80 !0:EOF
>906c		d6 8f					.word	Shift1Command                    ; $81 !1:SH1
>906e		de 8f					.word	Shift2Command                    ; $82 !2:SH2
>9070		4a 9e					.word	AbsUnary                         ; $83 ABS(
>9072		58 9e					.word	AllocUnary                       ; $84 ALLOC(
>9074		c8 9e					.word	AscUnary                         ; $85 ASC(
>9076		19 a0					.word	ChrUnary                         ; $86 CHR$(
>9078		3f aa					.word	UnaryEvent                       ; $87 EVENT(
>907a		f2 93					.word	UnaryFalse                       ; $88 FALSE
>907c		d5 9e					.word	FracUnary                        ; $89 FRAC(
>907e		54 b1					.word	ChrGet                           ; $8a GET$(
>9080		39 b1					.word	AscGet                           ; $8b GET(
>9082		e3 b0					.word	UnaryGetDate                     ; $8c GETDATE$(
>9084		df b0					.word	UnaryGetTime                     ; $8d GETTIME$(
>9086		af a9					.word	UnaryHit                         ; $8e HIT(
>9088		5b b1					.word	ChrInkey                         ; $8f INKEY$(
>908a		49 b1					.word	AscInkey                         ; $90 INKEY(
>908c		ea 9e					.word	IntUnary                         ; $91 INT(
>908e		d8 9f					.word	IsValUnary                       ; $92 ISVAL(
>9090		2b a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>9092		4f a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>9094		b6 ae					.word	UnaryJoyB                        ; $95 JOYB(
>9096		8f ae					.word	UnaryJoyX                        ; $96 JOYX(
>9098		92 ae					.word	UnaryJoyY                        ; $97 JOYY(
>909a		74 b1					.word	KeyDown                          ; $98 KEYDOWN(
>909c		8e a1					.word	Unary_Left                       ; $99 LEFT$(
>909e		fb 9e					.word	LenUnary                         ; $9a LEN(
>90a0		19 9f					.word	Unary_Max                        ; $9b MAX(
>90a2		b0 a1					.word	Unary_Mid                        ; $9c MID$(
>90a4		15 9f					.word	Unary_Min                        ; $9d MIN(
>90a6		64 9f					.word	Unary_Not                        ; $9e NOT(
>90a8		77 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90aa		83 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90ac		7f 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90ae		7b 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90b0		53 b2					.word	UnaryPlaying                     ; $a3 PLAYING(
>90b2		8e b1					.word	Unary_Random                     ; $a4 RANDOM(
>90b4		9b a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90b6		a8 b1					.word	Unary_Rnd                        ; $a6 RND(
>90b8		b0 9f					.word	SgnUnary                         ; $a7 SGN(
>90ba		cd a0					.word	SpcUnary                         ; $a8 SPC(
>90bc		e8 a0					.word	Unary_Str                        ; $a9 STR$(
>90be		c6 b0					.word	UnaryTimer                       ; $aa TIMER(
>90c0		e7 93					.word	UnaryTrue                        ; $ab TRUE
>90c2		ce 9f					.word	ValUnary                         ; $ac VAL(
>90c4		3d 89					.word	ForCommand                       ; $ad FOR
>90c6		80 8a					.word	IfCommand                        ; $ae IF
>90c8		e6 8f					.word	Unused1                          ; $af PROC
>90ca		e2 8e					.word	Command_REPEAT                   ; $b0 REPEAT
>90cc		2d 93					.word	Command_WHILE                    ; $b1 WHILE
>90ce		a9 8a					.word	EndIf                            ; $b2 ENDIF
>90d0		6a 8e					.word	Command_ENDPROC                  ; $b3 ENDPROC
>90d2		ef 89					.word	NextCommand                      ; $b4 NEXT
>90d4		e6 8f					.word	Unused4                          ; $b5 THEN
>90d6		eb 8e					.word	Command_UNTIL                    ; $b6 UNTIL
>90d8		4e 93					.word	Command_WEND                     ; $b7 WEND
>90da		4d a4					.word	SyntaxError                      ; $b8 AT
>90dc		4d a4					.word	SyntaxError                      ; $b9 BY
>90de		40 88					.word	CallCommand                      ; $ba CALL
>90e0		1c a7					.word	CircleCommand                    ; $bb CIRCLE
>90e2		4d a4					.word	SyntaxError                      ; $bc CLEAR
>90e4		4d a4					.word	SyntaxError                      ; $bd COLOR
>90e6		4d a4					.word	SyntaxError                      ; $be COLOUR
>90e8		75 88					.word	Command_Data                     ; $bf DATA
>90ea		7d 88					.word	DimCommand                       ; $c0 DIM
>90ec		e6 8f					.word	Unused3                          ; $c1 DOWNTO
>90ee		a2 8a					.word	ElseCode                         ; $c2 ELSE
>90f0		4d a4					.word	SyntaxError                      ; $c3 FROM
>90f2		82 a9					.word	GfxCommand                       ; $c4 GFX
>90f4		4d a4					.word	SyntaxError                      ; $c5 HERE
>90f6		45 a7					.word	ImageCommand                     ; $c6 IMAGE
>90f8		a4 8b					.word	LetCommand                       ; $c7 LET
>90fa		97 a7					.word	LineCommand                      ; $c8 LINE
>90fc		fe 8c					.word	Command_LOCAL                    ; $c9 LOCAL
>90fe		c8 ae					.word	MCCommand                        ; $ca MEMCOPY
>9100		4d a4					.word	SyntaxError                      ; $cb OFF
>9102		4d a4					.word	SyntaxError                      ; $cc ON
>9104		4d a4					.word	SyntaxError                      ; $cd OUTLINE
>9106		d3 a9					.word	PaletteCommand                   ; $ce PALETTE
>9108		90 a7					.word	PlotCommand                      ; $cf PLOT
>910a		cf 8d					.word	PokeBCommand                     ; $d0 POKE
>910c		db 8d					.word	PokeDCommand                     ; $d1 POKED
>910e		d7 8d					.word	PokeLCommand                     ; $d2 POKEL
>9110		d3 8d					.word	PokeWCommand                     ; $d3 POKEW
>9112		78 8e					.word	Command_Read                     ; $d4 READ
>9114		18 a7					.word	RectangleCommand                 ; $d5 RECT
>9116		d5 8e					.word	RemCommand                       ; $d6 REM
>9118		4d a4					.word	SyntaxError                      ; $d7 SOLID
>911a		6f b2					.word	SoundCommand                     ; $d8 SOUND
>911c		27 a7					.word	SpriteCommand                    ; $d9 SPRITE
>911e		61 a7					.word	TextCommand                      ; $da TEXT
>9120		e6 8f					.word	Unused2                          ; $db TO
.9122						VectorSet1:
>9122		4d a4					.word	SyntaxError                      ; $80 !0:EOF
>9124		4d a4					.word	SyntaxError                      ; $81 !1:SH1
>9126		4d a4					.word	SyntaxError                      ; $82 !2:SH2
>9128		14 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>912a		30 88					.word	AssertCommand                    ; $84 ASSERT
>912c		e2 a8					.word	BitmapCtrl                       ; $85 BITMAP
>912e		9c aa					.word	Command_BLoad                    ; $86 BLOAD
>9130		48 ab					.word	Command_BSave                    ; $87 BSAVE
>9132		13 aa					.word	ClearScreen                      ; $88 CLS
>9134		af 8a					.word	Command_CPrint                   ; $89 CPRINT
>9136		cb ab					.word	Command_Dir                      ; $8a DIR
>9138		2d aa					.word	BootDOS                          ; $8b DOS
>913a		9b ac					.word	Command_Drive                    ; $8c DRIVE
>913c		3a 89					.word	EndCommand                       ; $8d END
>913e		27 b2					.word	Explode                          ; $8e EXPLODE
>9140		4d a4					.word	SyntaxError                      ; $8f GO
>9142		48 8a					.word	Command_GOSUB                    ; $90 GOSUB
>9144		66 8a					.word	GotoCommand                      ; $91 GOTO
>9146		4d a4					.word	SyntaxError                      ; $92 HIMEM
>9148		aa 8a					.word	Command_Input                    ; $93 INPUT
>914a		f4 8b					.word	Command_List                     ; $94 LIST
>914c		a2 ac					.word	Command_Load                     ; $95 LOAD
>914e		dc af					.word	MouseDeltaStatus                 ; $96 MDELTA
>9150		d8 af					.word	MouseStatus                      ; $97 MOUSE
>9152		bf 8d					.word	NewCommand                       ; $98 NEW
>9154		03 b2					.word	PingCommand                      ; $99 PING
>9156		b6 8a					.word	Command_Print                    ; $9a PRINT
>9158		04 8f					.word	Command_Restore                  ; $9b RESTORE
>915a		58 8a					.word	Command_RETURN                   ; $9c RETURN
>915c		43 8f					.word	CommandRUNOptLoad                ; $9d RUN
>915e		74 ad					.word	Command_Save                     ; $9e SAVE
>9160		52 b0					.word	CommandSetDate                   ; $9f SETDATE
>9162		56 b0					.word	CommandSetTime                   ; $a0 SETTIME
>9164		1b b2					.word	ShootCommand                     ; $a1 SHOOT
>9166		3c a9					.word	SpritesCtrl                      ; $a2 SPRITES
>9168		fc 91					.word	StopCommand                      ; $a3 STOP
>916a		f8 ad					.word	Command_Try                      ; $a4 TRY
>916c		35 ae					.word	Command_VERIFY                   ; $a5 VERIFY
>916e		24 aa					.word	XGoCommand                       ; $a6 XGO
>9170		1b aa					.word	XLoadCommand                     ; $a7 XLOAD
>9172		0f b2					.word	ZapCommand                       ; $a8 ZAP
.9174						VectorSet2:
>9174		4d a4					.word	SyntaxError                      ; $80 !0:EOF
>9176		4d a4					.word	SyntaxError                      ; $81 !1:SH1
>9178		4d a4					.word	SyntaxError                      ; $82 !2:SH2
>917a		0c a3					.word	Assemble_adc                     ; $83 ADC
>917c		04 a3					.word	Assemble_and                     ; $84 AND
>917e		20 a3					.word	Assemble_asl                     ; $85 ASL
>9180		8a a3					.word	Assemble_bcc                     ; $86 BCC
>9182		8e a3					.word	Assemble_bcs                     ; $87 BCS
>9184		96 a3					.word	Assemble_beq                     ; $88 BEQ
>9186		4d a3					.word	Assemble_bit                     ; $89 BIT
>9188		7e a3					.word	Assemble_bmi                     ; $8a BMI
>918a		92 a3					.word	Assemble_bne                     ; $8b BNE
>918c		7a a3					.word	Assemble_bpl                     ; $8c BPL
>918e		9a a3					.word	Assemble_bra                     ; $8d BRA
>9190		9e a3					.word	Assemble_brk                     ; $8e BRK
>9192		82 a3					.word	Assemble_bvc                     ; $8f BVC
>9194		86 a3					.word	Assemble_bvs                     ; $90 BVS
>9196		a6 a3					.word	Assemble_clc                     ; $91 CLC
>9198		fa a3					.word	Assemble_cld                     ; $92 CLD
>919a		ba a3					.word	Assemble_cli                     ; $93 CLI
>919c		ea a3					.word	Assemble_clv                     ; $94 CLV
>919e		18 a3					.word	Assemble_cmp                     ; $95 CMP
>91a0		61 a3					.word	Assemble_cpx                     ; $96 CPX
>91a2		5c a3					.word	Assemble_cpy                     ; $97 CPY
>91a4		3e a3					.word	Assemble_dec                     ; $98 DEC
>91a6		f6 a3					.word	Assemble_dex                     ; $99 DEX
>91a8		d2 a3					.word	Assemble_dey                     ; $9a DEY
>91aa		08 a3					.word	Assemble_eor                     ; $9b EOR
>91ac		43 a3					.word	Assemble_inc                     ; $9c INC
>91ae		06 a4					.word	Assemble_inx                     ; $9d INX
>91b0		f2 a3					.word	Assemble_iny                     ; $9e INY
>91b2		75 a3					.word	Assemble_jmp                     ; $9f JMP
>91b4		70 a3					.word	Assemble_jsr                     ; $a0 JSR
>91b6		14 a3					.word	Assemble_lda                     ; $a1 LDA
>91b8		39 a3					.word	Assemble_ldx                     ; $a2 LDX
>91ba		57 a3					.word	Assemble_ldy                     ; $a3 LDY
>91bc		2a a3					.word	Assemble_lsr                     ; $a4 LSR
>91be		0a a4					.word	Assemble_nop                     ; $a5 NOP
>91c0		00 a3					.word	Assemble_ora                     ; $a6 ORA
>91c2		b6 a3					.word	Assemble_pha                     ; $a7 PHA
>91c4		a2 a3					.word	Assemble_php                     ; $a8 PHP
>91c6		fe a3					.word	Assemble_phx                     ; $a9 PHX
>91c8		be a3					.word	Assemble_phy                     ; $aa PHY
>91ca		c6 a3					.word	Assemble_pla                     ; $ab PLA
>91cc		aa a3					.word	Assemble_plp                     ; $ac PLP
>91ce		12 a4					.word	Assemble_plx                     ; $ad PLX
>91d0		ce a3					.word	Assemble_ply                     ; $ae PLY
>91d2		25 a3					.word	Assemble_rol                     ; $af ROL
>91d4		2f a3					.word	Assemble_ror                     ; $b0 ROR
>91d6		b2 a3					.word	Assemble_rti                     ; $b1 RTI
>91d8		c2 a3					.word	Assemble_rts                     ; $b2 RTS
>91da		1c a3					.word	Assemble_sbc                     ; $b3 SBC
>91dc		ae a3					.word	Assemble_sec                     ; $b4 SEC
>91de		0e a4					.word	Assemble_sed                     ; $b5 SED
>91e0		ca a3					.word	Assemble_sei                     ; $b6 SEI
>91e2		10 a3					.word	Assemble_sta                     ; $b7 STA
>91e4		02 a4					.word	Assemble_stp                     ; $b8 STP
>91e6		34 a3					.word	Assemble_stx                     ; $b9 STX
>91e8		52 a3					.word	Assemble_sty                     ; $ba STY
>91ea		48 a3					.word	Assemble_stz                     ; $bb STZ
>91ec		e6 a3					.word	Assemble_tax                     ; $bc TAX
>91ee		e2 a3					.word	Assemble_tay                     ; $bd TAY
>91f0		6b a3					.word	Assemble_trb                     ; $be TRB
>91f2		66 a3					.word	Assemble_tsb                     ; $bf TSB
>91f4		ee a3					.word	Assemble_tsx                     ; $c0 TSX
>91f6		d6 a3					.word	Assemble_txa                     ; $c1 TXA
>91f8		de a3					.word	Assemble_txs                     ; $c2 TXS
>91fa		da a3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.91fc						StopCommand:
.91fc		a9 08		lda #$08		lda	#8
.91fe		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9201						ClearSystem:
.9201		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9203		85 36		sta $36				sta 	0+zTemp0
.9205		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9207		85 37		sta $37				sta 	1+zTemp0
.9209						_ClearZeroLoop:
.9209		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.920b		f0 24		beq $9231			beq 	_ClearZeroEnd
.920d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.920f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9211						_ClearOneVariable:
.9211		91 36		sta ($36),y			sta 	(zTemp0),y
.9213		c8		iny				iny
.9214		c0 08		cpy #$08			cpy 	#8
.9216		d0 f9		bne $9211			bne 	_ClearOneVariable
.9218		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.921a		b1 36		lda ($36),y			lda 	(zTemp0),y
.921c		c9 18		cmp #$18			cmp 	#NSTProcedure
.921e		d0 04		bne $9224			bne 	_ClearNotProcedure
.9220		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9222		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9224						_ClearNotProcedure:
.9224		18		clc				clc 								; go to the next variable
.9225		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9227		65 36		adc $36				adc 	zTemp0
.9229		85 36		sta $36				sta 	zTemp0
.922b		90 dc		bcc $9209			bcc 	_ClearZeroLoop
.922d		e6 37		inc $37				inc 	zTemp0+1
.922f		80 d8		bra $9209			bra 	_ClearZeroLoop
.9231						_ClearZeroEnd:
.9231		18		clc				clc
.9232		a5 36		lda $36				lda 	zTemp0
.9234		69 01		adc #$01			adc 	#1
.9236		8d 08 04	sta $0408			sta 	lowMemPtr
.9239		a5 37		lda $37				lda 	zTemp0+1
.923b		69 00		adc #$00			adc 	#0
.923d		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9240		20 5c b3	jsr $b35c			jsr 	StackReset
.9243		20 c2 b3	jsr $b3c2			jsr 	StringSystemInitialise
.9246		20 5f 92	jsr $925f			jsr 	ProcedureScan
.9249		20 04 8f	jsr $8f04			jsr 	Command_Restore
.924c		9c 1a 04	stz $041a			stz 	AssemblerAddress
.924f		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9252		9c 1c 04	stz $041c			stz 	AssemblerControl
.9255		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.9258		20 b5 9e	jsr $9eb5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.925b		20 db a8	jsr $a8db			jsr 	ResetBitmapSprites
.925e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.925f						ProcedureScan:
.925f		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs 			; swap code and data
.9262		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9264		85 30		sta $30				sta 	codePtr
.9266		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9268		85 31		sta $31				sta 	codePtr+1
.926a						_PSLoop:
.926a		b2 30		lda ($30)			lda 	(codePtr)
.926c		f0 42		beq $92b0			beq 	_PSExit
.926e		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9270		b1 30		lda ($30),y			lda 	(codePtr),y
.9272		c9 af		cmp #$af			cmp 	#KWD_PROC
.9274		d0 2d		bne $92a3			bne 	_PSNext
.9276		c8		iny				iny 								; get the address of the record to zTemp0 and
.9277		b1 30		lda ($30),y			lda 	(codePtr),y
.9279		29 c0		and #$c0			and 	#$C0
.927b		c9 40		cmp #$40			cmp 	#$40
.927d		d0 35		bne $92b4			bne 	_PSSyntax
.927f		b1 30		lda ($30),y			lda 	(codePtr),y
.9281		18		clc				clc
.9282		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9284		85 37		sta $37				sta 	zTemp0+1
.9286		c8		iny				iny 								; LSB
.9287		b1 30		lda ($30),y			lda 	(codePtr),y
.9289		85 36		sta $36				sta 	zTemp0
.928b		c8		iny				iny 								; character after variable call.
.928c		98		tya				tya 								; save Y offset at +7 (exponent slot)
.928d		a0 07		ldy #$07			ldy 	#7
.928f		91 36		sta ($36),y			sta 	(zTemp0),y
.9291		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9293		a0 02		ldy #$02			ldy 	#2
.9295		91 36		sta ($36),y			sta 	(zTemp0),y
.9297		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9299						_PSCopy:
.9299		b5 30		lda $30,x			lda 	safePtr,x
.929b		c8		iny				iny
.929c		91 36		sta ($36),y			sta 	(zTemp0),y
.929e		e8		inx				inx
.929f		e0 04		cpx #$04			cpx 	#4
.92a1		d0 f6		bne $9299			bne 	_PSCopy
.92a3						_PSNext:
.92a3		18		clc				clc
.92a4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92a6		65 30		adc $30				adc 	codePtr
.92a8		85 30		sta $30				sta 	codePtr
.92aa		90 02		bcc $92ae			bcc 	_CREExit
.92ac		e6 31		inc $31				inc 	codePtr+1 					; carry
.92ae						_CREExit:
.92ae		80 ba		bra $926a			bra 	_PSLoop
.92b0						_PSExit:
.92b0		20 1b 8f	jsr $8f1b			jsr 	SwapDataCodePtrs 			; swap code and data
.92b3		60		rts				rts
.92b4						_PSSyntax:
.92b4		4c 4d a4	jmp $a44d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92b7						ScanForward:
.92b7		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92b9		86 37		stx $37				stx 	zTemp0+1
.92bb		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92bd						_ScanLoop:
.92bd		b1 30		lda ($30),y			lda 	(codePtr),y
.92bf		c8		iny				iny
.92c0		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92c2		d0 0e		bne $92d2			bne 	_ScanGoNext
.92c4		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92c6		f0 04		beq $92cc			beq 	_ScanMatch
.92c8		c5 37		cmp $37				cmp 	zTemp0+1
.92ca		d0 06		bne $92d2			bne 	_ScanGoNext
.92cc						_ScanMatch:
.92cc		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.92ce		d0 01		bne $92d1			bne 	_ScanNotEndEOL
.92d0		88		dey				dey
.92d1						_ScanNotEndEOL:
.92d1		60		rts				rts
.92d2						_ScanGoNext:
.92d2		20 d7 92	jsr $92d7			jsr  	ScanForwardOne 				; allows for shifts and so on.
.92d5		80 e6		bra $92bd			bra 	_ScanLoop
.92d7						ScanForwardOne:
.92d7		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.92d9		90 3e		bcc $9319			bcc 	_SFWExit
.92db		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.92dd		90 18		bcc $92f7			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.92df		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.92e1		b0 2f		bcs $9312			bcs 	_ScanSkipData
.92e3		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.92e5		90 32		bcc $9319			bcc 	_SFWExit 					; if not, ordinary keywords.
.92e7		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.92e9		b0 2e		bcs $9319			bcs 	_SFWExit
.92eb		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.92ed		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.92ef		b0 28		bcs $9319			bcs 	_SFWExit
.92f1		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.92f3		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.92f5		80 22		bra $9319			bra 	_SFWExit
.92f7						_ScanSkipOne:
.92f7		c8		iny				iny 								; consume the extra one.
.92f8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.92fa		d0 1d		bne $9319			bne 	_SFWExit
.92fc		18		clc				clc
.92fd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ff		65 30		adc $30				adc 	codePtr
.9301		85 30		sta $30				sta 	codePtr
.9303		90 02		bcc $9307			bcc 	_CREExit
.9305		e6 31		inc $31				inc 	codePtr+1 					; carry
.9307						_CREExit:
.9307		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9309		b2 30		lda ($30)			lda 	(codePtr)
.930b		d0 0c		bne $9319			bne 	_SFWExit 					; if not zero, more to scan
.930d		a9 13		lda #$13		lda	#19
.930f		4c 75 93	jmp $9375		jmp	ErrorHandler
.9312						_ScanSkipData:
.9312		88		dey				dey 								; point at data token
.9313		c8		iny				iny 								; point to offset
.9314		98		tya				tya 								; A = offset position
.9315		38		sec				sec 								; add size +1 hence SEC
.9316		71 30		adc ($30),y			adc 	(codePtr),y
.9318		a8		tay				tay 								; make current position.
.9319						_SFWExit:
.9319		60		rts				rts
.931a						ScanGetCurrentLineStep:
.931a		64 38		stz $38				stz 	zTemp1
.931c		a0 03		ldy #$03			ldy 	#3
.931e						_SGCLSLoop:
.931e		b1 30		lda ($30),y			lda 	(codePtr),y
.9320		c8		iny				iny
.9321		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9323		f0 05		beq $932a			beq 	_SGCLSExit
.9325		20 d7 92	jsr $92d7			jsr 	ScanForwardOne
.9328		80 f4		bra $931e			bra 	_SGCLSLoop
.932a						_SGCLSExit:
.932a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.932c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.932d						Command_WHILE:
.932d		5a		phy				phy 								; save position of the test
.932e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9330		20 23 a2	jsr $a223			jsr 	EvaluateNumber
.9333		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; check if zero
.9336		f0 0e		beq $9346			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9338		98		tya				tya 								; position *after* test.
.9339		7a		ply				ply 								; restore position before test, at WHILE
.933a		88		dey				dey 								; so we execute the WHILE command again.
.933b		48		pha				pha 								; push after test on the stack
.933c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.933e		20 f6 b2	jsr $b2f6			jsr 	StackOpen
.9341		20 3b b3	jsr $b33b			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9344		7a		ply				ply 								; restore the position *after* the test
.9345		60		rts				rts
.9346						_WHExitLoop:
.9346		68		pla				pla 								; throw post loop position
.9347		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.9349		aa		tax				tax
.934a		20 b7 92	jsr $92b7			jsr 	ScanForward
.934d		60		rts				rts
.934e						Command_WEND:
.934e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9350		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9352		20 23 b3	jsr $b323			jsr 	StackCheckFrame
.9355		20 4c b3	jsr $b34c			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9358		20 15 b3	jsr $b315			jsr 	StackClose		 			; erase the frame
.935b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.935c						CheckRightBracket:
.935c		b1 30		lda ($30),y			lda 	(codePtr),y
.935e		c8		iny				iny
.935f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9361		d0 0f		bne $9372			bne 	CNAFail
.9363		60		rts				rts
.9364						CheckComma:
.9364		b1 30		lda ($30),y			lda 	(codePtr),y
.9366		c8		iny				iny
.9367		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9369		d0 07		bne $9372			bne 	CNAFail
.936b		60		rts				rts
.936c						CheckNextA:
.936c		d1 30		cmp ($30),y			cmp 	(codePtr),y
.936e		d0 02		bne $9372			bne 	CNAFail
.9370		c8		iny				iny 								; skip character
.9371		60		rts				rts 								; and exit
.9372						CNAFail:
.9372		4c 4d a4	jmp $a44d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9375						ErrorHandler:
.9375		48		pha				pha 								; save error #
.9376		a8		tay				tay 								; find the error text
.9377		f0 4e		beq $93c7			beq 	_EHEnd
.9379		a2 00		ldx #$00			ldx 	#0
.937b		a9 66		lda #$66			lda 	#((ErrorText) & $FF)
.937d		85 36		sta $36				sta 	0+zTemp0
.937f		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.9381		85 37		sta $37				sta 	1+zTemp0
.9383						_EHFind:
.9383		88		dey				dey 								; keep looking through text
.9384		f0 0e		beq $9394			beq 	_EHFound
.9386						_EHFindZero:
.9386		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9388		e6 36		inc $36				inc 	zTemp0
.938a		d0 02		bne $938e			bne 	_EHFNoCarry
.938c		e6 37		inc $37				inc 	zTemp0+1
.938e						_EHFNoCarry:
.938e		c9 00		cmp #$00			cmp 	#0
.9390		d0 f4		bne $9386			bne 	_EHFindZero
.9392		80 ef		bra $9383			bra 	_EHFind
.9394						_EHFound:
.9394		a5 36		lda $36				lda 	zTemp0 						; print message
.9396		a6 37		ldx $37				ldx 	zTemp0+1
.9398		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.939b		68		pla				pla  								; check if error is 'open structure'
.939c		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.939e		f0 22		beq $93c2			beq 	_EHCREnd
.93a0		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93a2		b1 30		lda ($30),y			lda 	(codePtr),y
.93a4		d0 05		bne $93ab			bne 	_EHAtMsg
.93a6		c8		iny				iny
.93a7		b1 30		lda ($30),y			lda 	(codePtr),y
.93a9		f0 17		beq $93c2			beq 	_EHCREnd
.93ab						_EHAtMsg:
.93ab		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93ad		a9 ca		lda #$ca			lda 	#_AtMsg & $FF
.93af		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.93b2		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93b4		b1 30		lda ($30),y			lda 	(codePtr),y
.93b6		48		pha				pha
.93b7		c8		iny				iny
.93b8		b1 30		lda ($30),y			lda 	(codePtr),y
.93ba		aa		tax				tax
.93bb		68		pla				pla
.93bc		20 ea 97	jsr $97ea			jsr 	ConvertInt16 				; convert XA to string
.93bf		20 d4 93	jsr $93d4			jsr 	PrintStringXA 				; and print it.
.93c2						_EHCREnd:
.93c2		a9 0d		lda #$0d			lda 	#13 						; new line
.93c4		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93c7						_EHEnd:
.93c7		4c df 87	jmp $87df			jmp 	WarmStart
>93ca		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93d2		20 00
.93d4						PrintStringXA:
.93d4		5a		phy				phy
.93d5		86 37		stx $37				stx 	zTemp0+1
.93d7		85 36		sta $36				sta 	zTemp0
.93d9		a0 00		ldy #$00			ldy 	#0
.93db						_PSXALoop:
.93db		b1 36		lda ($36),y			lda 	(zTemp0),y
.93dd		f0 06		beq $93e5			beq 	_PSXAExit
.93df		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93e2		c8		iny				iny
.93e3		80 f6		bra $93db			bra 	_PSXALoop
.93e5						_PSXAExit:
.93e5		7a		ply				ply
.93e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93e7						UnaryTrue:
.93e7		fa		plx				plx
.93e8						ReturnTrue:
.93e8		a9 01		lda #$01			lda 	#1  						; set to 1
.93ea		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.93ed		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.93ef		95 50		sta $50,x			sta 	NSStatus,x
.93f1		60		rts				rts
.93f2						UnaryFalse:
.93f2		fa		plx				plx
.93f3						ReturnFalse:
.93f3		4c d5 a2	jmp $a2d5			jmp 	NSMSetZero 					; set it all to zero
.93f6						BinaryCompareEqual:
.93f6		fa		plx				plx
.93f7		20 32 94	jsr $9432			jsr 	CompareBaseCode
.93fa		c9 00		cmp #$00			cmp 	#0
.93fc		f0 ea		beq $93e8			beq 	ReturnTrue
.93fe		80 f3		bra $93f3			bra 	ReturnFalse
.9400						BinaryCompareLess:
.9400		fa		plx				plx
.9401		20 32 94	jsr $9432			jsr 	CompareBaseCode
.9404		c9 ff		cmp #$ff			cmp 	#$FF
.9406		f0 e0		beq $93e8			beq 	ReturnTrue
.9408		80 e9		bra $93f3			bra 	ReturnFalse
.940a						BinaryCompareGreater:
.940a		fa		plx				plx
.940b		20 32 94	jsr $9432			jsr 	CompareBaseCode
.940e		c9 01		cmp #$01			cmp 	#1
.9410		f0 d6		beq $93e8			beq 	ReturnTrue
.9412		80 df		bra $93f3			bra 	ReturnFalse
.9414						BinaryCompareNotEqual:
.9414		fa		plx				plx
.9415		20 32 94	jsr $9432			jsr 	CompareBaseCode
.9418		c9 00		cmp #$00			cmp 	#0
.941a		d0 cc		bne $93e8			bne 	ReturnTrue
.941c		80 d5		bra $93f3			bra 	ReturnFalse
.941e						BinaryCompareLessEqual:
.941e		fa		plx				plx
.941f		20 32 94	jsr $9432			jsr 	CompareBaseCode
.9422		c9 01		cmp #$01			cmp 	#1
.9424		d0 c2		bne $93e8			bne 	ReturnTrue
.9426		80 cb		bra $93f3			bra 	ReturnFalse
.9428						BinaryCompareGreaterEqual:
.9428		fa		plx				plx
.9429		20 32 94	jsr $9432			jsr 	CompareBaseCode
.942c		c9 ff		cmp #$ff			cmp 	#$FF
.942e		d0 b8		bne $93e8			bne 	ReturnTrue
.9430		80 c1		bra $93f3			bra 	ReturnFalse
.9432						CompareBaseCode:
.9432		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; make both values if references.
.9435		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9437		15 51		ora $51,x			ora 	NSStatus+1,x
.9439		29 10		and #$10			and 	#NSTString
.943b		d0 37		bne $9474			bne 	_CBCString 					; if so do string code, which will check if both.
.943d		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.943f		15 79		ora $79,x			ora 	NSExponent+1,x
.9441		d0 34		bne $9477			bne 	_CBCFloat
.9443		b5 50		lda $50,x			lda 	NSStatus,x
.9445		15 51		ora $51,x			ora 	NSStatus+1,x
.9447		29 08		and #$08			and 	#NSTFloat
.9449		d0 2c		bne $9477			bne 	_CBCFloat
.944b		20 7a 94	jsr $947a			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.944e		e8		inx				inx
.944f		20 7a 94	jsr $947a			jsr 	CompareFixMinusZero
.9452		ca		dex				dex
.9453		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9455		55 51		eor $51,x			eor 	NSStatus+1,x
.9457		10 0a		bpl $9463			bpl 	_CDCSameSign
.9459		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.945b		30 14		bmi $9471			bmi 	_CBCLess 					; return $FF
.945d						_CBCGreater:
.945d		a9 01		lda #$01			lda 	#1
.945f		60		rts				rts
.9460						_CBCEqual:
.9460		a9 00		lda #$00			lda 	#0
.9462		60		rts				rts
.9463						_CDCSameSign:
.9463		20 8f 96	jsr $968f			jsr 	SubTopTwoStack 				; unsigned subtract
.9466		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; or the mantissa together
.9469		f0 f5		beq $9460			beq 	_CBCEqual 					; -0 == 0
.946b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.946d		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.946f		10 ec		bpl $945d			bpl 	_CBCGreater
.9471						_CBCLess:
.9471		a9 ff		lda #$ff			lda 	#$FF
.9473		60		rts				rts
.9474						_CBCString:
.9474		4c 00 96	jmp $9600			jmp 	CompareStrings
.9477						_CBCFloat:
.9477		4c 4a 99	jmp $994a			jmp 	CompareFloat
.947a						CompareFixMinusZero:
.947a		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero
.947d		d0 02		bne $9481			bne 	_CFXMZNotZero
.947f		74 50		stz $50,x			stz 	NSStatus,x
.9481						_CFXMZNotZero:
.9481		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9482						StringConcat:
.9482		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9484		35 51		and $51,x			and 	NSStatus+1,x
.9486		29 18		and #$18			and 	#NSBTypeMask
.9488		c9 10		cmp #$10			cmp 	#NSTString
.948a		d0 50		bne $94dc			bne		_SCType
.948c		64 38		stz $38				stz 	zTemp1 						; counting total length
.948e		e8		inx				inx
.948f		20 ad 94	jsr $94ad			jsr 	_SCSetupZ0 					; setup for second
.9492		20 b6 94	jsr $94b6			jsr 	_SCLengthZ0 				; length for second
.9495		ca		dex				dex
.9496		20 ad 94	jsr $94ad			jsr 	_SCSetupZ0 					; setup for first
.9499		20 b6 94	jsr $94b6			jsr 	_SCLengthZ0 				; length for first
.949c		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.949e		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.94a1		20 cd 94	jsr $94cd			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94a4		e8		inx				inx
.94a5		20 ad 94	jsr $94ad			jsr 	_SCSetupZ0 					; copy second out
.94a8		20 cd 94	jsr $94cd			jsr 	_SCCopy
.94ab		ca		dex				dex
.94ac		60		rts				rts
.94ad						_SCSetupZ0:
.94ad		b5 58		lda $58,x			lda 	NSMantissa0,x
.94af		85 36		sta $36				sta 	zTemp0
.94b1		b5 60		lda $60,x			lda 	NSMantissa1,x
.94b3		85 37		sta $37				sta 	zTemp0+1
.94b5		60		rts				rts
.94b6						_SCLengthZ0:
.94b6		5a		phy				phy
.94b7		a0 00		ldy #$00			ldy 	#0
.94b9						_SCLenLoop:
.94b9		b1 36		lda ($36),y			lda 	(zTemp0),y
.94bb		f0 0e		beq $94cb			beq 	_SCLExit
.94bd		c8		iny				iny
.94be		e6 38		inc $38				inc 	zTemp1
.94c0		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94c2		c9 fd		cmp #$fd			cmp 	#253
.94c4		d0 f3		bne $94b9			bne		_SCLenLoop
.94c6		a9 09		lda #$09		lda	#9
.94c8		4c 75 93	jmp $9375		jmp	ErrorHandler
.94cb						_SCLExit:
.94cb		7a		ply				ply
.94cc		60		rts				rts
.94cd						_SCCopy:
.94cd		5a		phy				phy
.94ce		a0 00		ldy #$00			ldy 	#0
.94d0						_SCCopyLoop:
.94d0		b1 36		lda ($36),y			lda 	(zTemp0),y
.94d2		f0 06		beq $94da			beq 	_SCCExit
.94d4		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.94d7		c8		iny				iny
.94d8		80 f6		bra $94d0			bra 	_SCCopyLoop
.94da						_SCCExit:
.94da		7a		ply				ply
.94db		60		rts				rts
.94dc						_SCType:
.94dc		4c 57 a4	jmp $a457			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94df						IntegerDivide:
.94df		fa		plx				plx
.94e0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94e2		15 51		ora $51,x			ora 	NSStatus+1,x
.94e4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94e5		0a		asl a				asl 	a
.94e6		10 05		bpl $94ed			bpl 	_NotRef
.94e8		48		pha				pha
.94e9		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ec		68		pla				pla
.94ed						_NotRef:
.94ed		0a		asl a				asl 	a
.94ee		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94f0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94f2		15 79		ora $79,x			ora 	NSExponent+1,x
.94f4		f0 03		beq $94f9			beq 	_IntegerCode 				; if clear, then we have two integers
.94f6		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.94f9						_IntegerCode:
.94f9		20 13 95	jsr $9513			jsr 	CheckDivideZero 			; do div zero check
.94fc		20 45 95	jsr $9545			jsr 	Int32Divide 				; do the division
.94ff		20 f6 95	jsr $95f6			jsr 	CalculateSign 				; calculate result sign
.9502						NSMCopyPlusTwoToZero:
.9502		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9504		95 58		sta $58,x			sta 	NSMantissa0,x
.9506		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9508		95 60		sta $60,x			sta 	NSMantissa1,x
.950a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.950c		95 68		sta $68,x			sta 	NSMantissa2,x
.950e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9510		95 70		sta $70,x			sta 	NSMantissa3,x
.9512		60		rts				rts
.9513						CheckDivideZero:
.9513		e8		inx				inx
.9514		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero
.9517		f0 02		beq $951b			beq 	_CDVError
.9519		ca		dex				dex
.951a		60		rts				rts
.951b						_CDVError:
.951b		a9 03		lda #$03		lda	#3
.951d		4c 75 93	jmp $9375		jmp	ErrorHandler
.9520						IntegerModulus:
.9520		fa		plx				plx
.9521		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9523		15 51		ora $51,x			ora 	NSStatus+1,x
.9525		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9526		0a		asl a				asl 	a
.9527		10 05		bpl $952e			bpl 	_NotRef
.9529		48		pha				pha
.952a		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952d		68		pla				pla
.952e						_NotRef:
.952e		0a		asl a				asl 	a
.952f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9531		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9533		15 79		ora $79,x			ora 	NSExponent+1,x
.9535		f0 03		beq $953a			beq 	_IntegerCode 				; if clear, then we have two integers
.9537		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.953a						_IntegerCode:
.953a						IntegerModulusNoCheck:
.953a		20 13 95	jsr $9513			jsr 	CheckDivideZero 			; do div zero check
.953d		20 45 95	jsr $9545			jsr 	Int32Divide 				; do the division
.9540		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9542		56 50		lsr $50,x			lsr 	NSStatus,x
.9544		60		rts				rts
.9545						Int32Divide:
.9545		48		pha				pha 								; save AXY
.9546		5a		phy				phy
.9547		20 b8 a2	jsr $a2b8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.954a		20 d1 a2	jsr $a2d1			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.954d		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.954f						_I32DivideLoop:
.954f		e8		inx				inx
.9550		e8		inx				inx
.9551		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9554		ca		dex				dex
.9555		ca		dex				dex
.9556		20 e5 a2	jsr $a2e5			jsr 	NSMRotateLeft
.9559		20 84 95	jsr $9584			jsr 	DivideCheckSubtract 		; check if subtract possible
.955c		90 02		bcc $9560			bcc 	_I32DivideNoCarryIn
.955e		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9560						_I32DivideNoCarryIn:
.9560		88		dey				dey 								; loop round till division completed.
.9561		d0 ec		bne $954f			bne 	_I32DivideLoop
.9563		7a		ply				ply 								; restore AXY and exit
.9564		68		pla				pla
.9565		60		rts				rts
.9566						Int32ShiftDivide:
.9566		48		pha				pha 								; save AY
.9567		5a		phy				phy
.9568		e8		inx				inx 								; clear S[X+2]
.9569		e8		inx				inx
.956a		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.956d		ca		dex				dex
.956e		ca		dex				dex
.956f		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9571						_I32SDLoop:
.9571		20 84 95	jsr $9584			jsr 	DivideCheckSubtract 		; check if subtract possible
.9574		e8		inx				inx
.9575		e8		inx				inx
.9576		20 e5 a2	jsr $a2e5			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9579		ca		dex				dex
.957a		ca		dex				dex
.957b		20 e5 a2	jsr $a2e5			jsr 	NSMRotateLeft
.957e		88		dey				dey 	 							; do 31 times
.957f		d0 f0		bne $9571			bne 	_I32SDLoop
.9581		7a		ply				ply 								; restore AY and exit
.9582		68		pla				pla
.9583		60		rts				rts
.9584						DivideCheckSubtract:
.9584		20 8f 96	jsr $968f			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9587		b0 04		bcs $958d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9589		20 75 96	jsr $9675			jsr 	AddTopTwoStack 				; add it back in
.958c		18		clc				clc 								; and return False
.958d						_DCSExit:
.958d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.958e						MulInteger:
.958e		fa		plx				plx
.958f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9591		15 51		ora $51,x			ora 	NSStatus+1,x
.9593		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9594		0a		asl a				asl 	a
.9595		10 05		bpl $959c			bpl 	_NotRef
.9597		48		pha				pha
.9598		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.959b		68		pla				pla
.959c						_NotRef:
.959c		0a		asl a				asl 	a 							; put MSB of type into A:7
.959d		30 09		bmi $95a8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.959f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a1		15 79		ora $79,x			ora 	NSExponent+1,x
.95a3		f0 06		beq $95ab			beq 	_IntegerCode 				; if clear, then we have two integers
.95a5		4c 0c 9a	jmp $9a0c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95a8						_StringData:
.95a8		4c 61 a4	jmp $a461			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95ab						_IntegerCode:
.95ab		20 b8 95	jsr $95b8			jsr 	MultiplyShort
.95ae		c9 00		cmp #$00			cmp 	#0
.95b0		f0 05		beq $95b7			beq 	_MIExit
.95b2		a9 04		lda #$04		lda	#4
.95b4		4c 75 93	jmp $9375		jmp	ErrorHandler
.95b7						_MIExit:
.95b7		60		rts				rts
.95b8						MultiplyShort:
.95b8		5a		phy				phy 								; save Y
.95b9		20 b8 a2	jsr $a2b8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95bc		20 d1 a2	jsr $a2d1			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95bf		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95c1						_I32MLoop:
.95c1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95c3		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95c5		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95c7		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95c9		f0 25		beq $95f0			beq 	_I32MExit 					; exit if zero
.95cb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95cd		29 01		and #$01			and 	#1
.95cf		f0 0d		beq $95de			beq 	_I32MNoAdd
.95d1		20 75 96	jsr $9675			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95d4		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95d6		10 06		bpl $95de			bpl 	_I32MNoAdd
.95d8						_I32ShiftRight:
.95d8		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight 				; shift S[X] right
.95db		c8		iny				iny 								; increment shift count
.95dc		80 09		bra $95e7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.95de						_I32MNoAdd:
.95de		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95e0		70 f6		bvs $95d8			bvs 	_I32ShiftRight 				; instead.
.95e2		e8		inx				inx
.95e3		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95e6		ca		dex				dex
.95e7						_I32MShiftUpper:
.95e7		e8		inx				inx 								; shift S[X+2] right
.95e8		e8		inx				inx
.95e9		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight
.95ec		ca		dex				dex
.95ed		ca		dex				dex
.95ee		80 d1		bra $95c1			bra 	_I32MLoop 					; try again.
.95f0						_I32MExit:
.95f0		20 f6 95	jsr $95f6			jsr 	CalculateSign
.95f3		98		tya				tya 								; shift in A
.95f4		7a		ply				ply 								; restore Y and exit
.95f5		60		rts				rts
.95f6						CalculateSign:
.95f6		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.95f8		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.95fa		55 51		eor $51,x			eor 	NSStatus+1,x
.95fc		0a		asl a				asl 	a 							; shift bit 7 into carry
.95fd		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.95ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9600						CompareStrings:
.9600		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9602		35 51		and $51,x			and 	NSStatus+1,x
.9604		29 10		and #$10			and 	#NSBIsString
.9606		f0 28		beq $9630			beq 	_CSTypeError
.9608		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.960a		85 36		sta $36				sta 	zTemp0
.960c		b5 60		lda $60,x			lda 	NSMantissa1,x
.960e		85 37		sta $37				sta 	zTemp0+1
.9610		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9612		85 38		sta $38				sta 	zTemp1
.9614		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9616		85 39		sta $39				sta 	zTemp1+1
.9618		5a		phy				phy 								; save Y so we can access strings
.9619		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.961b						_CSLoop:
.961b		c8		iny				iny
.961c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.961e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9620		d0 06		bne $9628			bne 	_CSDifferent
.9622		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9624		d0 f5		bne $961b			bne 	_CSLoop 					; still comparing
.9626						_CSExit:
.9626		7a		ply				ply 								; reached end, return zero in A from EOS
.9627		60		rts				rts
.9628						_CSDifferent:
.9628		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.962a		90 fa		bcc $9626			bcc		_CSExit
.962c		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.962e		80 f6		bra $9626			bra 	_CSExit
.9630						_CSTypeError:
.9630		4c 57 a4	jmp $a457			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9633						ShiftLeft:
.9633		38		sec				sec 								; common code, carry determines which way.
.9634		80 01		bra $9637			bra 	ShiftMain
.9636						ShiftRight:
.9636		18		clc				clc
.9637						ShiftMain:
.9637		fa		plx				plx 								; restore X
.9638		08		php				php 								; save direction
.9639		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.963b		15 51		ora $51,x			ora 	NSStatus+1,x
.963d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.963e		0a		asl a				asl 	a
.963f		10 05		bpl $9646			bpl 	_NotRef
.9641		48		pha				pha
.9642		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9645		68		pla				pla
.9646						_NotRef:
.9646		0a		asl a				asl 	a
.9647		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9649		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.964b		15 79		ora $79,x			ora 	NSExponent+1,x
.964d		f0 03		beq $9652			beq 	_IntegerCode 				; if clear, then we have two integers
.964f		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.9652						_IntegerCode:
.9652		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9654		29 e0		and #$e0			and 	#$E0
.9656		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9658		15 69		ora $69,x			ora 	NSMantissa2+1,x
.965a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.965c		d0 12		bne $9670			bne 	_SMExit0 					; if >= 32 it will always return zero.
.965e						_SMLoop:
.965e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9660		30 11		bmi $9673			bmi 	_SMExit 					; exit if done.
.9662		28		plp				plp 								; restore direction setting
.9663		08		php				php
.9664		90 05		bcc $966b			bcc 	_SMRight
.9666		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; shift left if CS
.9669		80 f3		bra $965e			bra 	_SMLoop
.966b						_SMRight:
.966b		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight 				; shift right if CC
.966e		80 ee		bra $965e			bra 	_SMLoop
.9670						_SMExit0:
.9670		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; return zero.
.9673						_SMExit:
.9673		28		plp				plp 								; throw direction
.9674		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9675						AddTopTwoStack:
.9675		18		clc				clc
.9676		b5 58		lda $58,x			lda		NSMantissa0,x
.9678		75 59		adc $59,x			adc 		NSMantissa0+1,x
.967a		95 58		sta $58,x			sta 	NSMantissa0,x
.967c		b5 60		lda $60,x			lda		NSMantissa1,x
.967e		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9680		95 60		sta $60,x			sta 	NSMantissa1,x
.9682		b5 68		lda $68,x			lda		NSMantissa2,x
.9684		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9686		95 68		sta $68,x			sta 	NSMantissa2,x
.9688		b5 70		lda $70,x			lda		NSMantissa3,x
.968a		75 71		adc $71,x			adc 		NSMantissa3+1,x
.968c		95 70		sta $70,x			sta 	NSMantissa3,x
.968e		60		rts				rts
.968f						SubTopTwoStack:
.968f		38		sec				sec
.9690		b5 58		lda $58,x			lda		NSMantissa0,x
.9692		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9694		95 58		sta $58,x			sta 	NSMantissa0,x
.9696		b5 60		lda $60,x			lda		NSMantissa1,x
.9698		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.969a		95 60		sta $60,x			sta 	NSMantissa1,x
.969c		b5 68		lda $68,x			lda		NSMantissa2,x
.969e		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96a0		95 68		sta $68,x			sta 	NSMantissa2,x
.96a2		b5 70		lda $70,x			lda		NSMantissa3,x
.96a4		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96a6		95 70		sta $70,x			sta 	NSMantissa3,x
.96a8		60		rts				rts
.96a9						AddInteger:
.96a9		fa		plx				plx
.96aa		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96ac		15 51		ora $51,x			ora 	NSStatus+1,x
.96ae		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96af		0a		asl a				asl 	a
.96b0		10 05		bpl $96b7			bpl 	_NotRef
.96b2		48		pha				pha
.96b3		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96b6		68		pla				pla
.96b7						_NotRef:
.96b7		0a		asl a				asl 	a 							; put MSB of type into A:7
.96b8		30 09		bmi $96c3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96ba		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96bc		15 79		ora $79,x			ora 	NSExponent+1,x
.96be		f0 06		beq $96c6			beq 	_IntegerCode 				; if clear, then we have two integers
.96c0		4c bc 98	jmp $98bc			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96c3						_StringData:
.96c3		4c 82 94	jmp $9482			jmp 	StringConcat							; at least one string - don't know both are strings.
.96c6						_IntegerCode:
.96c6						AddCode:
.96c6		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96c8		55 51		eor $51,x			eor 	NSStatus+1,x
.96ca		10 a9		bpl $9675			bpl 	AddTopTwoStack
.96cc		20 8f 96	jsr $968f			jsr 	SubTopTwoStack 				; do a physical subtraction
.96cf		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96d1		10 07		bpl $96da			bpl 	_AddExit
.96d3		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96d5		95 50		sta $50,x			sta 	NSStatus,x
.96d7		20 9e a2	jsr $a29e			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96da						_AddExit:
.96da		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; check for -0
.96dd		d0 02		bne $96e1			bne 	_AddNonZero
.96df		74 50		stz $50,x			stz 	NSStatus,x
.96e1						_AddNonZero:
.96e1		60		rts				rts
.96e2						SubInteger:
.96e2		fa		plx				plx
.96e3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96e5		15 51		ora $51,x			ora 	NSStatus+1,x
.96e7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e8		0a		asl a				asl 	a
.96e9		10 05		bpl $96f0			bpl 	_NotRef
.96eb		48		pha				pha
.96ec		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ef		68		pla				pla
.96f0						_NotRef:
.96f0		0a		asl a				asl 	a 							; put MSB of type into A:7
.96f1		30 09		bmi $96fc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96f3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96f5		15 79		ora $79,x			ora 	NSExponent+1,x
.96f7		f0 06		beq $96ff			beq 	_IntegerCode 				; if clear, then we have two integers
.96f9		4c c1 98	jmp $98c1			jmp 	FloatingPointSub 							; otherwise at least one float.
.96fc						_StringData:
.96fc		4c 61 a4	jmp $a461			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96ff						_IntegerCode:
.96ff		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9701		49 80		eor #$80			eor 	#$80
.9703		95 51		sta $51,x			sta 	NSStatus+1,x
.9705		80 bf		bra $96c6			bra 	AddCode 					; and do the same code as add.
.9707						AndInteger:
.9707		fa		plx				plx
.9708		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.970a		15 51		ora $51,x			ora 	NSStatus+1,x
.970c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.970d		0a		asl a				asl 	a
.970e		10 05		bpl $9715			bpl 	_NotRef
.9710		48		pha				pha
.9711		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9714		68		pla				pla
.9715						_NotRef:
.9715		0a		asl a				asl 	a
.9716		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9718		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971a		15 79		ora $79,x			ora 	NSExponent+1,x
.971c		f0 03		beq $9721			beq 	_IntegerCode 				; if clear, then we have two integers
.971e		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.9721						_IntegerCode:
.9721		b5 58		lda $58,x			lda		NSMantissa0,x
.9723		35 59		and $59,x			and 		NSMantissa0+1,x
.9725		95 58		sta $58,x			sta 	NSMantissa0,x
.9727		b5 60		lda $60,x			lda		NSMantissa1,x
.9729		35 61		and $61,x			and 		NSMantissa1+1,x
.972b		95 60		sta $60,x			sta 	NSMantissa1,x
.972d		b5 68		lda $68,x			lda		NSMantissa2,x
.972f		35 69		and $69,x			and 		NSMantissa2+1,x
.9731		95 68		sta $68,x			sta 	NSMantissa2,x
.9733		b5 70		lda $70,x			lda		NSMantissa3,x
.9735		35 71		and $71,x			and 		NSMantissa3+1,x
.9737		95 70		sta $70,x			sta 	NSMantissa3,x
.9739		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.973b		60		rts				rts
.973c						OraInteger:
.973c		fa		plx				plx
.973d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.973f		15 51		ora $51,x			ora 	NSStatus+1,x
.9741		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9742		0a		asl a				asl 	a
.9743		10 05		bpl $974a			bpl 	_NotRef
.9745		48		pha				pha
.9746		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9749		68		pla				pla
.974a						_NotRef:
.974a		0a		asl a				asl 	a
.974b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.974d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.974f		15 79		ora $79,x			ora 	NSExponent+1,x
.9751		f0 03		beq $9756			beq 	_IntegerCode 				; if clear, then we have two integers
.9753		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.9756						_IntegerCode:
.9756		b5 58		lda $58,x			lda		NSMantissa0,x
.9758		15 59		ora $59,x			ora 		NSMantissa0+1,x
.975a		95 58		sta $58,x			sta 	NSMantissa0,x
.975c		b5 60		lda $60,x			lda		NSMantissa1,x
.975e		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9760		95 60		sta $60,x			sta 	NSMantissa1,x
.9762		b5 68		lda $68,x			lda		NSMantissa2,x
.9764		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9766		95 68		sta $68,x			sta 	NSMantissa2,x
.9768		b5 70		lda $70,x			lda		NSMantissa3,x
.976a		15 71		ora $71,x			ora 		NSMantissa3+1,x
.976c		95 70		sta $70,x			sta 	NSMantissa3,x
.976e		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9770		60		rts				rts
.9771						EorInteger:
.9771		fa		plx				plx
.9772		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9774		15 51		ora $51,x			ora 	NSStatus+1,x
.9776		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9777		0a		asl a				asl 	a
.9778		10 05		bpl $977f			bpl 	_NotRef
.977a		48		pha				pha
.977b		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.977e		68		pla				pla
.977f						_NotRef:
.977f		0a		asl a				asl 	a
.9780		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9782		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9784		15 79		ora $79,x			ora 	NSExponent+1,x
.9786		f0 03		beq $978b			beq 	_IntegerCode 				; if clear, then we have two integers
.9788		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.978b						_IntegerCode:
.978b		b5 58		lda $58,x			lda		NSMantissa0,x
.978d		55 59		eor $59,x			eor 		NSMantissa0+1,x
.978f		95 58		sta $58,x			sta 	NSMantissa0,x
.9791		b5 60		lda $60,x			lda		NSMantissa1,x
.9793		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9795		95 60		sta $60,x			sta 	NSMantissa1,x
.9797		b5 68		lda $68,x			lda		NSMantissa2,x
.9799		55 69		eor $69,x			eor 		NSMantissa2+1,x
.979b		95 68		sta $68,x			sta 	NSMantissa2,x
.979d		b5 70		lda $70,x			lda		NSMantissa3,x
.979f		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97a1		95 70		sta $70,x			sta 	NSMantissa3,x
.97a3		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97a5		60		rts				rts
.97a6						WordIndirect:
.97a6		fa		plx				plx
.97a7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97a9		15 51		ora $51,x			ora 	NSStatus+1,x
.97ab		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ac		0a		asl a				asl 	a
.97ad		10 05		bpl $97b4			bpl 	_NotRef
.97af		48		pha				pha
.97b0		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b3		68		pla				pla
.97b4						_NotRef:
.97b4		0a		asl a				asl 	a
.97b5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97b7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b9		15 79		ora $79,x			ora 	NSExponent+1,x
.97bb		f0 03		beq $97c0			beq 	_IntegerCode 				; if clear, then we have two integers
.97bd		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.97c0						_IntegerCode:
.97c0		20 c6 96	jsr $96c6			jsr 	AddCode 					; add the two values
.97c3		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97c5		95 50		sta $50,x			sta 	NSStatus,x
.97c7		60		rts				rts
.97c8						ByteIndirect:
.97c8		fa		plx				plx
.97c9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97cb		15 51		ora $51,x			ora 	NSStatus+1,x
.97cd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ce		0a		asl a				asl 	a
.97cf		10 05		bpl $97d6			bpl 	_NotRef
.97d1		48		pha				pha
.97d2		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97d5		68		pla				pla
.97d6						_NotRef:
.97d6		0a		asl a				asl 	a
.97d7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97d9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97db		15 79		ora $79,x			ora 	NSExponent+1,x
.97dd		f0 03		beq $97e2			beq 	_IntegerCode 				; if clear, then we have two integers
.97df		4c 57 a4	jmp $a457			jmp 	TypeError 					; anything else, type mismatch.
.97e2						_IntegerCode:
.97e2		20 c6 96	jsr $96c6			jsr 	AddCode 					; add the two values
.97e5		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.97e7		95 50		sta $50,x			sta 	NSStatus,x
.97e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.97ea						ConvertInt16:
.97ea		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.97ec		86 60		stx $60				stx 	NSMantissa1
.97ee		64 68		stz $68				stz 	NSMantissa2
.97f0		64 70		stz $70				stz 	NSMantissa3
.97f2		64 50		stz $50				stz 	NSStatus 					; positive integer
.97f4		a2 00		ldx #$00			ldx 	#0 							; stack level
.97f6		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.97f8		80 00		bra $97fa			bra 	ConvertInt32
.97fa						ConvertInt32:
.97fa		5a		phy				phy
.97fb		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.97fd		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.97ff		10 08		bpl $9809			bpl 	_CI32NotNeg
.9801		48		pha				pha
.9802		a9 2d		lda #$2d			lda 	#'-'
.9804		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9807		c8		iny				iny
.9808		68		pla				pla
.9809						_CI32NotNeg:
.9809		20 17 98	jsr $9817			jsr 	_CI32DivideConvert 			; recursive conversion
.980c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.980e		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9811		7a		ply				ply
.9812		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9814		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9816		60		rts				rts
.9817						_CI32DivideConvert:
.9817		e8		inx				inx 								; write to next slot up
.9818		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte 		 			; write the base out.
.981b		ca		dex				dex
.981c		20 45 95	jsr $9545			jsr 	Int32Divide 				; divide
.981f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9821		48		pha				pha
.9822		20 02 95	jsr $9502			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9825		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; is it zero ?
.9828		f0 05		beq $982f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.982a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.982c		20 17 98	jsr $9817			jsr 	_CI32DivideConvert 			; and recusrively call.
.982f						_CI32NoRecurse:
.982f		68		pla				pla 								; remainder
.9830		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9832		90 02		bcc $9836			bcc 	_CI32NotHex
.9834		69 26		adc #$26			adc 	#6+32
.9836						_CI32NotHex:
.9836		69 30		adc #$30			adc 	#48
.9838		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.983b		c8		iny				iny
.983c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.983d						PrecedenceLevel:
>983d		04					.byte	 4	; $00 <<
>983e		02					.byte	 2	; $01 <=
>983f		02					.byte	 2	; $02 <>
>9840		00					.byte	 0	; $03 !!3
>9841		00					.byte	 0	; $04 ><
>9842		02					.byte	 2	; $05 >=
>9843		04					.byte	 4	; $06 >>
>9844		00					.byte	 0	; $07 !!7
>9845		00					.byte	 0	; $08 !!8
>9846		00					.byte	 0	; $09 !!9
>9847		00					.byte	 0	; $0a !!10
>9848		00					.byte	 0	; $0b !!11
>9849		00					.byte	 0	; $0c !!12
>984a		00					.byte	 0	; $0d !!13
>984b		00					.byte	 0	; $0e !!14
>984c		00					.byte	 0	; $0f !!15
>984d		00					.byte	 0	; $10 @
>984e		00					.byte	 0	; $11 !!17
>984f		00					.byte	 0	; $12 !!18
>9850		00					.byte	 0	; $13 [
>9851		04					.byte	 4	; $14 \
>9852		00					.byte	 0	; $15 ]
>9853		01					.byte	 1	; $16 ^
>9854		00					.byte	 0	; $17 _
>9855		00					.byte	 0	; $18 `
>9856		00					.byte	 0	; $19 !!25
>9857		00					.byte	 0	; $1a !!26
>9858		00					.byte	 0	; $1b {
>9859		01					.byte	 1	; $1c |
>985a		00					.byte	 0	; $1d }
>985b		00					.byte	 0	; $1e ~
>985c		00					.byte	 0	; $1f <7F>
>985d		00					.byte	 0	; $20
>985e		05					.byte	 5	; $21 !
>985f		00					.byte	 0	; $22 "
>9860		00					.byte	 0	; $23 #
>9861		05					.byte	 5	; $24 $
>9862		04					.byte	 4	; $25 %
>9863		01					.byte	 1	; $26 &
>9864		00					.byte	 0	; $27 '
>9865		00					.byte	 0	; $28 (
>9866		00					.byte	 0	; $29 )
>9867		04					.byte	 4	; $2a *
>9868		03					.byte	 3	; $2b +
>9869		00					.byte	 0	; $2c ,
>986a		03					.byte	 3	; $2d -
>986b		00					.byte	 0	; $2e .
>986c		04					.byte	 4	; $2f /
>986d		00					.byte	 0	; $30 0
>986e		00					.byte	 0	; $31 1
>986f		00					.byte	 0	; $32 2
>9870		00					.byte	 0	; $33 3
>9871		00					.byte	 0	; $34 4
>9872		00					.byte	 0	; $35 5
>9873		00					.byte	 0	; $36 6
>9874		00					.byte	 0	; $37 7
>9875		00					.byte	 0	; $38 8
>9876		00					.byte	 0	; $39 9
>9877		00					.byte	 0	; $3a :
>9878		00					.byte	 0	; $3b ;
>9879		02					.byte	 2	; $3c <
>987a		02					.byte	 2	; $3d =
>987b		02					.byte	 2	; $3e >
>987c		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.987d						EvaluateExpressionAt0:
.987d		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.987f						EvaluateExpression:
.987f		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9881						EvaluateExpressionAtPrecedence:
.9881		48		pha				pha 								; save precedence level
.9882		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm 				; evaluate term into level X.
.9885		68		pla				pla 								; restore precedence level.
.9886						_EXPRLoop:
.9886		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9888		b1 30		lda ($30),y			lda 	(codePtr),y
.988a		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.988c		b0 25		bcs $98b3			bcs 	_EXPRExit
.988e		da		phx				phx 								; read the operator precedence
.988f		aa		tax				tax
.9890		bd 3d 98	lda $983d,x			lda 	PrecedenceLevel,x
.9893		fa		plx				plx
.9894		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9896		f0 1b		beq $98b3			beq 	_EXPRExit
.9898		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.989a		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.989c		c5 37		cmp $37				cmp 	zTemp0+1
.989e		b0 13		bcs $98b3			bcs		_EXPRExit 					; if current >= operator exit
.98a0		48		pha				pha 								; save current precedence.
.98a1		b1 30		lda ($30),y			lda 	(codePtr),y
.98a3		c8		iny				iny
.98a4		48		pha				pha
.98a5		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98a7		e8		inx				inx 								; work out the right hand side.
.98a8		20 81 98	jsr $9881			jsr 	EvaluateExpressionAtPrecedence
.98ab		ca		dex				dex
.98ac		68		pla				pla 								; get operator, call the code.
.98ad		20 b6 98	jsr $98b6			jsr 	_EXPRCaller
.98b0		68		pla				pla 								; restore precedence level
.98b1		80 d3		bra $9886			bra 	_EXPRLoop 					; and go round.
.98b3						_EXPRExit:
.98b3		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98b5		60		rts				rts
.98b6						_EXPRCaller:
.98b6		da		phx				phx 								; save on stack, first thing is to restore it
.98b7		0a		asl a				asl 	a 							; double so can use vectors into X
.98b8		aa		tax				tax
.98b9		7c ea 8f	jmp ($8fea,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98bc						FloatingPointAdd:
.98bc		20 32 9a	jsr $9a32			jsr 	FloatPrepare 				; prepare for floats
.98bf		80 09		bra $98ca			bra 	FloatAdd
.98c1						FloatingPointSub:
.98c1		20 32 9a	jsr $9a32			jsr 	FloatPrepare 				; prepare for floats
.98c4						FloatSubtract:
.98c4		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98c6		49 80		eor #$80			eor 	#$80
.98c8		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98ca						FloatAdd:
.98ca		48		pha				pha
.98cb		5a		phy				phy
.98cc		20 41 9a	jsr $9a41			jsr 	NSNormalise 				; normalise S[X]
.98cf		f0 51		beq $9922			beq 	_FAReturn1
.98d1		e8		inx				inx 								; normalise S[X+1]
.98d2		20 41 9a	jsr $9a41			jsr 	NSNormalise
.98d5		ca		dex				dex
.98d6		c9 00		cmp #$00			cmp 	#0
.98d8		f0 60		beq $993a			beq 	_FAExit 					; if so, just return A
.98da		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.98dc		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.98de		f0 18		beq $98f8			beq 	_FAExponentsEqual
.98e0		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.98e2		a8		tay				tay
.98e3		38		sec				sec 								; do a signed comparison of the exponents.
.98e4		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.98e6		50 02		bvc $98ea			bvc 	_FANoSignedChange
.98e8		49 80		eor #$80			eor 	#$80
.98ea						_FANoSignedChange:
.98ea		29 80		and #$80			and 	#$80
.98ec		10 02		bpl $98f0			bpl 	_FAHaveMax
.98ee		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.98f0						_FAHaveMax:
.98f0		20 3d 99	jsr $993d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.98f3		e8		inx				inx
.98f4		20 3d 99	jsr $993d			jsr 	_FAShiftToExponent
.98f7		ca		dex				dex
.98f8						_FAExponentsEqual:
.98f8		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.98fa		55 51		eor $51,x			eor 	NSStatus+1,x
.98fc		30 0e		bmi $990c			bmi 	_FADifferentSigns
.98fe		20 75 96	jsr $9675			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9901		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9903		10 35		bpl $993a			bpl 	_FAExit 					; if no, we are done.
.9905		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9908		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.990a		80 2e		bra $993a			bra 	_FAExit
.990c						_FADifferentSigns:
.990c		20 8f 96	jsr $968f			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.990f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9911		10 06		bpl $9919			bpl 	_FACheckZero 				; if no, check for -0
.9913		20 97 a2	jsr $a297			jsr 	NSMNegate 					; netate result
.9916		20 9e a2	jsr $a29e			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9919						_FACheckZero:
.9919		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero	 				; check for -0
.991c		d0 1c		bne $993a			bne 	_FAExit
.991e		74 50		stz $50,x			stz 	NSStatus,x
.9920		80 18		bra $993a			bra 	_FAExit
.9922						_FAReturn1:
.9922		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9924		95 58		sta $58,x			sta 	NSMantissa0,x
.9926		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9928		95 60		sta $60,x			sta 	NSMantissa1,x
.992a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.992c		95 68		sta $68,x			sta 	NSMantissa2,x
.992e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9930		95 70		sta $70,x			sta 	NSMantissa3,x
.9932		b5 79		lda $79,x			lda 	NSExponent+1,x
.9934		95 78		sta $78,x			sta 	NSExponent,x
.9936		b5 51		lda $51,x			lda 	NSStatus+1,x
.9938		95 50		sta $50,x			sta 	NSStatus,x
.993a						_FAExit:
.993a		7a		ply				ply
.993b		68		pla				pla
.993c		60		rts				rts
.993d						_FAShiftToExponent:
.993d						_FAShiftToExponent2:
.993d		98		tya				tya 								; compare Y to exponent
.993e		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9940		f0 07		beq $9949			beq 	_FASEExit 					; exit if so.
.9942		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight	 			; shift the mantissa right
.9945		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9947		80 f4		bra $993d			bra 	_FAShiftToExponent2
.9949						_FASEExit:
.9949		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.994a						CompareFloat:
.994a		20 c4 98	jsr $98c4			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.994d		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.994f		29 f8		and #$f8			and 	#$F8
.9951		15 68		ora $68,x			ora 	NSMantissa2,x
.9953		15 70		ora $70,x			ora 	NSMantissa3,x
.9955		f0 08		beq $995f			beq 	_FCExit 					; zero, so approximately identical
.9957		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9959		34 50		bit $50,x			bit 	NSStatus,x
.995b		10 02		bpl $995f			bpl 	_FCExit
.995d						_FCNegative:
.995d		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.995f						_FCExit:
.995f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9960						FDivideCommand:
.9960		fa		plx				plx	 								; restore stack position
.9961		20 32 9a	jsr $9a32			jsr 	FloatPrepare 				; prepare for floats
.9964						FloatDivide:
.9964		48		pha				pha
.9965		e8		inx				inx
.9966		20 41 9a	jsr $9a41			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9969		ca		dex				dex
.996a		c9 00		cmp #$00			cmp 	#0
.996c		f0 1d		beq $998b			beq 	_FDZero
.996e		20 41 9a	jsr $9a41			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9971		f0 16		beq $9989			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9973		20 66 95	jsr $9566			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9976		20 02 95	jsr $9502			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9979		20 41 9a	jsr $9a41			jsr		NSNormalise 				; renormalise
.997c		20 f6 95	jsr $95f6			jsr 	CalculateSign 				; calculate result sign
.997f		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9981		38		sec				sec
.9982		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9984		38		sec				sec
.9985		e9 1e		sbc #$1e			sbc 	#30
.9987		95 78		sta $78,x			sta 	NSExponent,x
.9989						_FDExit:
.9989		68		pla				pla
.998a		60		rts				rts
.998b						_FDZero:
.998b		a9 03		lda #$03		lda	#3
.998d		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9990						FloatFractionalPart:
.9990		5a		phy				phy
.9991		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9993		29 7f		and #$7f			and 	#$7F
.9995		95 50		sta $50,x			sta 	NSStatus,x
.9997		20 41 9a	jsr $9a41			jsr 	NSNormalise
.999a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.999c		38		sec				sec
.999d		e9 e0		sbc #$e0			sbc 	#$E0
.999f		90 29		bcc $99ca			bcc 	_FFPExit 					; already fractional
.99a1		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99a3		b0 22		bcs $99c7			bcs 	_FFPZero
.99a5		a8		tay				tay 								; put count to do in Y
.99a6		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99a8		20 cc 99	jsr $99cc			jsr 	_FFPPartial
.99ab		95 70		sta $70,x			sta 	NSMantissa3,x
.99ad		b5 68		lda $68,x			lda 	NSMantissa2,x
.99af		20 cc 99	jsr $99cc			jsr 	_FFPPartial
.99b2		95 68		sta $68,x			sta 	NSMantissa2,x
.99b4		b5 60		lda $60,x			lda 	NSMantissa1,x
.99b6		20 cc 99	jsr $99cc			jsr 	_FFPPartial
.99b9		95 60		sta $60,x			sta 	NSMantissa1,x
.99bb		b5 58		lda $58,x			lda 	NSMantissa0,x
.99bd		20 cc 99	jsr $99cc			jsr 	_FFPPartial
.99c0		95 58		sta $58,x			sta 	NSMantissa0,x
.99c2		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; zeroed check.
.99c5		d0 03		bne $99ca			bne 	_FFPExit
.99c7						_FFPZero:
.99c7		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.99ca						_FFPExit:
.99ca		7a		ply				ply
.99cb		60		rts				rts
.99cc						_FFPPartial:
.99cc		c0 00		cpy #$00			cpy 	#0 							; no more to do
.99ce		f0 17		beq $99e7			beq 	_FFFPPExit
.99d0		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99d2		b0 0c		bcs $99e0			bcs 	_FFFPPWholeByte
.99d4		5a		phy				phy
.99d5						_FFFPPLeft:
.99d5		0a		asl a				asl 	a
.99d6		88		dey				dey
.99d7		d0 fc		bne $99d5			bne 	_FFFPPLeft
.99d9		7a		ply				ply
.99da						_FFFPPRight:
.99da		4a		lsr a				lsr 	a
.99db		88		dey				dey
.99dc		d0 fc		bne $99da			bne 	_FFFPPRight
.99de		80 07		bra $99e7			bra 	_FFFPPExit
.99e0						_FFFPPWholeByte:
.99e0		98		tya				tya 								; subtract 8 from count
.99e1		38		sec				sec
.99e2		e9 08		sbc #$08			sbc 	#8
.99e4		a8		tay				tay
.99e5		a9 00		lda #$00			lda 	#0 							; and clear all
.99e7						_FFFPPExit:
.99e7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.99e8						FloatIntegerPart:
.99e8		48		pha				pha
.99e9		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.99eb		f0 1d		beq $9a0a			beq 	_FIPExit 					; if so do nothing
.99ed		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; is it zero ?
.99f0		f0 15		beq $9a07			beq 	_FIPZero 					; if so return zero.
.99f2		20 41 9a	jsr $9a41			jsr 	NSNormalise 				; normalise
.99f5		f0 10		beq $9a07			beq 	_FIPZero 					; normalised to zero, exit zero
.99f7						_FIPShift:
.99f7		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.99f9		10 07		bpl $9a02			bpl 	_FIPCheckZero
.99fb		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight 				; shift mantissa right
.99fe		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a00		80 f5		bra $99f7			bra 	_FIPShift
.9a02						_FIPCheckZero:
.9a02		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; avoid -0 problem
.9a05		d0 03		bne $9a0a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a07						_FIPZero:
.9a07		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.9a0a						_FIPExit:
.9a0a		68		pla				pla
.9a0b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a0c						FloatingPointMultiply:
.9a0c		20 32 9a	jsr $9a32			jsr 	FloatPrepare 				; prepare for floats
.9a0f						FloatMultiply:
.9a0f		48		pha				pha
.9a10		20 41 9a	jsr $9a41			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a13		f0 18		beq $9a2d			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a15		e8		inx				inx
.9a16		20 41 9a	jsr $9a41			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a19		ca		dex				dex
.9a1a		c9 00		cmp #$00			cmp 	#0
.9a1c		f0 0c		beq $9a2a			beq 	_FDSetZero
.9a1e		20 b8 95	jsr $95b8			jsr 	MultiplyShort 				; calculate the result.
.9a21		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a23		18		clc				clc
.9a24		75 79		adc $79,x			adc 	NSExponent+1,x
.9a26		95 78		sta $78,x			sta 	NSExponent,x
.9a28		80 03		bra $9a2d			bra 	_FDExit
.9a2a						_FDSetZero:
.9a2a		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; return 0
.9a2d						_FDExit:
.9a2d		20 41 9a	jsr $9a41			jsr 	NSNormalise 				; normalise the result
.9a30		68		pla				pla
.9a31		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a32						FloatPrepare:
.9a32		20 3d 9b	jsr $9b3d			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a35		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a37		15 51		ora $51,x			ora 	NSStatus+1,x
.9a39		29 10		and #$10			and 	#NSBIsString
.9a3b		d0 01		bne $9a3e			bne 	_FDType
.9a3d		60		rts				rts
.9a3e						_FDType:
.9a3e		4c 57 a4	jmp $a457			jmp 	TypeError
.9a41						NSNormalise:
.9a41		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a43		29 80		and #$80			and 	#$80
.9a45		09 08		ora #$08			ora 	#NSTFloat
.9a47		95 50		sta $50,x			sta 	NSStatus,x
.9a49		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; if zero exit
.9a4c		d0 07		bne $9a55			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a4e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a50		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a52		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a54		60		rts				rts
.9a55						_NSNormaliseOptimise:
.9a55		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a57		d0 19		bne $9a72			bne 	_NSNormaliseLoop
.9a59		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a5b		30 15		bmi $9a72			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a5d		95 70		sta $70,x			sta 	NSMantissa3,x
.9a5f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a61		95 68		sta $68,x			sta 	NSMantissa2,x
.9a63		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a65		95 60		sta $60,x			sta 	NSMantissa1,x
.9a67		74 58		stz $58,x			stz 	NSMantissa0,x
.9a69		b5 78		lda $78,x			lda 	NSExponent,x
.9a6b		38		sec				sec
.9a6c		e9 08		sbc #$08			sbc 	#8
.9a6e		95 78		sta $78,x			sta 	NSExponent,x
.9a70		80 e3		bra $9a55			bra 	_NSNormaliseOptimise
.9a72						_NSNormaliseLoop:
.9a72		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a74		70 07		bvs $9a7d			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a76		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; shift mantissa left
.9a79		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9a7b		80 f5		bra $9a72			bra 	_NSNormaliseLoop
.9a7d						_NSNExit:
.9a7d		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9a80						AssignNumber:
.9a80		5a		phy				phy
.9a81		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9a83		85 36		sta $36				sta 	zTemp0
.9a85		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a87		85 37		sta $37				sta 	zTemp0+1
.9a89		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9a8b		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9a8d		95 50		sta $50,x			sta 	NSStatus,x
.9a8f		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9a91		c9 08		cmp #$08			cmp 	#NSTFloat
.9a93		f0 24		beq $9ab9			beq 	_ANFloat
.9a95		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9a97		f0 03		beq $9a9c			beq		_ANNotFloat
.9a99		4c 52 a4	jmp $a452			jmp 	RangeError					; if it is, report an error.
.9a9c						_ANNotFloat:
.9a9c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9a9e		29 03		and #$03			and 	#3
.9aa0		d0 05		bne $9aa7			bne 	_ANByteWord
.9aa2		20 c4 9a	jsr $9ac4			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9aa5		80 1b		bra $9ac2			bra 	_ANExit
.9aa7						_ANByteWord:
.9aa7		48		pha				pha 								; save count
.9aa8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9aaa		92 36		sta ($36)			sta 	(zTemp0)
.9aac		68		pla				pla
.9aad		c9 01		cmp #$01			cmp	 	#1
.9aaf		f0 11		beq $9ac2			beq 	_ANExit
.9ab1		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ab3		a0 01		ldy #$01			ldy 	#1
.9ab5		91 36		sta ($36),y			sta 	(zTemp0),y
.9ab7		80 09		bra $9ac2			bra 	_ANExit
.9ab9						_ANFloat:
.9ab9		20 c4 9a	jsr $9ac4			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9abc		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9abe		a0 04		ldy #$04			ldy 	#4
.9ac0		91 36		sta ($36),y			sta 	(zTemp0),y
.9ac2						_ANExit:
.9ac2		7a		ply				ply
.9ac3		60		rts				rts
.9ac4						_ANCopy4PackSign:
.9ac4		a0 03		ldy #$03			ldy 	#3
.9ac6		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9ac8		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9aca		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9acc		91 36		sta ($36),y			sta 	(zTemp0),y
.9ace		88		dey				dey
.9acf		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9ad1		91 36		sta ($36),y			sta 	(zTemp0),y
.9ad3		88		dey				dey
.9ad4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ad6		91 36		sta ($36),y			sta 	(zTemp0),y
.9ad8		88		dey				dey
.9ad9		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9adb		91 36		sta ($36),y			sta 	(zTemp0),y
.9add		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9ade						AssignString:
.9ade		5a		phy				phy
.9adf		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9ae1		85 38		sta $38				sta 	zTemp1
.9ae3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ae5		85 39		sta $39				sta 	zTemp1+1
.9ae7		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ae9		85 36		sta $36				sta 	zTemp0
.9aeb		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aed		85 37		sta $37				sta 	zTemp0+1
.9aef		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9af1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9af3		f0 23		beq $9b18			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9af5		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9af6		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9af8		e9 02		sbc #$02			sbc 	#2
.9afa		85 3c		sta $3c				sta 	zsTemp
.9afc		a0 01		ldy #$01			ldy 	#1
.9afe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b00		e9 00		sbc #$00			sbc 	#0
.9b02		85 3d		sta $3d				sta 	zsTemp+1
.9b04		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b06						_ASGetLength:
.9b06		c8		iny				iny
.9b07		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b09		d0 fb		bne $9b06			bne 	_ASGetLength
.9b0b		98		tya				tya 								; is this length <= current length
.9b0c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b0e		90 1e		bcc $9b2e			bcc 	_ASCopyString
.9b10		f0 1c		beq $9b2e			beq 	_ASCopyString
.9b12		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b14		a0 01		ldy #$01			ldy 	#1
.9b16		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b18						_ASNewStringRequired:
.9b18		e8		inx				inx 								; concrete the new string.
.9b19		20 69 b3	jsr $b369			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b1c		ca		dex				dex
.9b1d		18		clc				clc
.9b1e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b20		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b22		92 36		sta ($36)			sta 	(zTemp0)
.9b24		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b26		69 00		adc #$00			adc 	#0
.9b28		a0 01		ldy #$01			ldy 	#1
.9b2a		91 36		sta ($36),y			sta 	(zTemp0),y
.9b2c		80 0d		bra $9b3b			bra 	_ASExit
.9b2e						_ASCopyString:
.9b2e		a0 00		ldy #$00			ldy 	#0
.9b30						_ASCopyLoop:
.9b30		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b32		c8		iny				iny
.9b33		c8		iny				iny
.9b34		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b36		88		dey				dey
.9b37		c9 00		cmp #$00			cmp 	#0
.9b39		d0 f5		bne $9b30			bne 	_ASCopyLoop
.9b3b						_ASExit:
.9b3b		7a		ply				ply
.9b3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b3d						DereferenceTopTwo:
.9b3d		e8		inx				inx
.9b3e		20 42 9b	jsr $9b42			jsr 	Dereference 				; deref x+1
.9b41		ca		dex				dex  								; falls through to deref x
.9b42						Dereference:
.9b42		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b44		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b46		f0 48		beq $9b90			beq 	_DRFExit 					; not a reference, so exit.
.9b48		5a		phy				phy
.9b49		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b4b		85 36		sta $36				sta 	zTemp0
.9b4d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4f		85 37		sta $37				sta 	zTemp0+1
.9b51		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b53		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b55		95 58		sta $58,x			sta 	NSMantissa0,x
.9b57		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b59		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b5b		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b5d		f0 0e		beq $9b6d			beq 	_DRFDereferenceTwo
.9b5f		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b61		f0 2f		beq $9b92			beq 	_DRFFull
.9b63		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b65		29 03		and #$03			and 	#3
.9b67		f0 29		beq $9b92			beq 	_DRFFull 					; the whole word
.9b69		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b6b		f0 06		beq $9b73			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b6d						_DRFDereferenceTwo:
.9b6d		a0 01		ldy #$01			ldy 	#1
.9b6f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b71		95 60		sta $60,x			sta 	NSMantissa1,x
.9b73						_DRFClear23:
.9b73		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b75		74 70		stz $70,x			stz 	NSMantissa3,x
.9b77		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9b79		29 18		and #$18			and 	#NSBTypeMask
.9b7b		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9b7d		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9b7f		d0 0e		bne $9b8f			bne 	_DRFNotString
.9b81		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9b83		15 60		ora $60,x			ora 	NSMantissa1,x
.9b85		d0 08		bne $9b8f			bne 	_DRFNotString
.9b87		a9 91		lda #$91			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9b89		95 58		sta $58,x			sta 	NSMantissa0,x
.9b8b		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9b8d		95 60		sta $60,x			sta 	NSMantissa1,x
.9b8f						_DRFNotString
.9b8f		7a		ply				ply 								; restore Y and exit
.9b90						_DRFExit:
.9b90		60		rts				rts
.9b91						_DRFNullString:
>9b91		00						.byte 	0
.9b92						_DRFFull:
.9b92		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9b94		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b96		95 60		sta $60,x			sta 	NSMantissa1,x
.9b98		c8		iny				iny
.9b99		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b9b		95 68		sta $68,x			sta 	NSMantissa2,x
.9b9d		c8		iny				iny
.9b9e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ba0		95 70		sta $70,x			sta 	NSMantissa3,x
.9ba2		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9ba4		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9ba6		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9ba8		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9baa		f0 05		beq $9bb1			beq 	_DRFNoExponent
.9bac		c8		iny				iny 								; if not, read the exponent as well.
.9bad		b1 36		lda ($36),y			lda 	(zTemp0),y
.9baf		95 78		sta $78,x			sta 	NSExponent,x
.9bb1						_DRFNoExponent:
.9bb1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bb3		10 0a		bpl $9bbf			bpl 	_DRFExit2 					; if not, then exit.
.9bb5		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bb7		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb9		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bbb		09 80		ora #$80			ora 	#NSBIsNegative
.9bbd		95 50		sta $50,x			sta 	NSStatus,x
.9bbf						_DRFExit2:
.9bbf		7a		ply				ply
.9bc0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9bc1						EncodeNumberStart:
.9bc1		38		sec				sec
.9bc2		80 01		bra $9bc5			bra 	EncodeNumberContinue+1
.9bc4						EncodeNumberContinue:
.9bc4		18		clc				clc
.9bc5						EncodeNumber:
.9bc5		08		php				php 								; save reset flag.
.9bc6		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bc8		f0 12		beq $9bdc			beq 	_ENIsOkay
.9bca		c9 30		cmp #$30			cmp 	#"0"
.9bcc		90 04		bcc $9bd2			bcc 	_ENBadNumber
.9bce		c9 3a		cmp #$3a			cmp 	#"9"+1
.9bd0		90 0a		bcc $9bdc			bcc 	_ENIsOkay
.9bd2						_ENBadNumber:
.9bd2		28		plp				plp 								; throw saved reset
.9bd3		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9bd6		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9bd8		f0 7b		beq $9c55			beq 	_ENConstructFinal
.9bda						_ENFail:
.9bda		18		clc				clc 								; not allowed
.9bdb		60		rts				rts
.9bdc						_ENIsOkay:
.9bdc		28		plp				plp 								; are we restarting
.9bdd		90 15		bcc $9bf4			bcc 	_ENNoRestart
.9bdf						_ENStartEncode:
.9bdf		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9be1		f0 0c		beq $9bef			beq 	_ENFirstDP
.9be3		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9be5		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte 					; in single byte mode.
.9be8		a9 01		lda #$01			lda 	#ESTA_Low
.9bea						_ENExitChange:
.9bea		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9bed		38		sec				sec
.9bee		60		rts				rts
.9bef						_ENFirstDP:
.9bef		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; clear integer part
.9bf2		80 3c		bra $9c30			bra 	_ESTASwitchFloat			; go straight to float and exi
.9bf4						_ENNoRestart:
.9bf4		48		pha				pha 								; save digit or DP on stack.
.9bf5		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9bf8		c9 01		cmp #$01			cmp 	#ESTA_Low
.9bfa		f0 09		beq $9c05			beq  	_ESTALowState
.9bfc		c9 02		cmp #$02			cmp 	#ESTA_High
.9bfe		f0 26		beq $9c26			beq 	_ESTAHighState
.9c00		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c02		f0 38		beq $9c3c			beq 	_ESTADecimalState
>9c04		db						.byte 	$DB 						; causes a break in the emulator
.9c05						_ESTALowState:
.9c05		68		pla				pla 								; get value back
.9c06		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c08		f0 26		beq $9c30			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c0a		29 0f		and #$0f			and 	#15 						; make digit
.9c0c		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c0f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c11		0a		asl a				asl 	a
.9c12		0a		asl a				asl 	a
.9c13		75 58		adc $58,x			adc 	NSMantissa0,x
.9c15		0a		asl a				asl 	a
.9c16		6d 06 04	adc $0406			adc 	digitTemp
.9c19		95 58		sta $58,x			sta 	NSMantissa0,x
.9c1b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c1d		90 05		bcc $9c24			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c1f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c21		8d 05 04	sta $0405			sta 	encodeState
.9c24						_ESTANoSwitch:
.9c24		38		sec				sec
.9c25		60		rts				rts
.9c26						_ESTAHighState:
.9c26		68		pla				pla 								; get value back
.9c27		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c29		f0 05		beq $9c30			beq 	_ESTASwitchFloat
.9c2b		20 89 9c	jsr $9c89			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c2e		38		sec				sec
.9c2f		60		rts				rts
.9c30						_ESTASwitchFloat:
.9c30		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c33		e8		inx				inx 								; zero the decimal additive.
.9c34		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.9c37		ca		dex				dex
.9c38		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c3a		80 ae		bra $9bea			bra 	_ENExitChange
.9c3c						_ESTADecimalState:
.9c3c		68		pla				pla 								; digit.
.9c3d		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c3f		f0 99		beq $9bda			beq 	_ENFail
.9c41		e8		inx				inx 								; put digit into fractional part of X+1
.9c42		20 89 9c	jsr $9c89			jsr 	ESTAShiftDigitIntoMantissa
.9c45		ca		dex				dex
.9c46		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c49		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c4c		c9 0b		cmp #$0b			cmp 	#11
.9c4e		f0 02		beq $9c52			beq 	_ESTADSFail
.9c50		38		sec				sec
.9c51		60		rts				rts
.9c52						_ESTADSFail:
.9c52		4c 52 a4	jmp $a452			jmp 	RangeError
.9c55						_ENConstructFinal:
.9c55		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c58		f0 2d		beq $9c87			beq 	_ENCFExit 					; no decimals
.9c5a		5a		phy				phy
.9c5b		0a		asl a				asl 	a 							; x 4 and CLC
.9c5c		0a		asl a				asl 	a
.9c5d		6d 07 04	adc $0407			adc 	decimalCount
.9c60		a8		tay				tay
.9c61		b9 11 a4	lda $a411,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c64		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c66		b9 12 a4	lda $a412,y			lda 	DecimalScalarTable-5+1,y
.9c69		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c6b		b9 13 a4	lda $a413,y			lda 	DecimalScalarTable-5+2,y
.9c6e		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9c70		b9 14 a4	lda $a414,y			lda 	DecimalScalarTable-5+3,y
.9c73		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9c75		b9 15 a4	lda $a415,y			lda 	DecimalScalarTable-5+4,y
.9c78		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9c7a		a9 08		lda #$08			lda 	#NSTFloat
.9c7c		95 52		sta $52,x			sta 	NSStatus+2,x
.9c7e		7a		ply				ply
.9c7f		e8		inx				inx 								; multiply decimal const by decimal scalar
.9c80		20 0f 9a	jsr $9a0f			jsr 	FloatMultiply
.9c83		ca		dex				dex
.9c84		20 ca 98	jsr $98ca			jsr 	FloatAdd 					; add to integer part.
.9c87						_ENCFExit:
.9c87		18		clc				clc 								; reject the digit.
.9c88		60		rts				rts
.9c89						ESTAShiftDigitIntoMantissa:
.9c89		29 0f		and #$0f			and 	#15 						; save digit
.9c8b		48		pha				pha
.9c8c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9c8e		48		pha				pha
.9c8f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c91		48		pha				pha
.9c92		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c94		48		pha				pha
.9c95		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c97		48		pha				pha
.9c98		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 2
.9c9b		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 4
.9c9e		18		clc				clc 								; pop mantissa and add
.9c9f		68		pla				pla
.9ca0		75 58		adc $58,x			adc 	NSMantissa0,x
.9ca2		95 58		sta $58,x			sta 	NSMantissa0,x
.9ca4		68		pla				pla
.9ca5		75 60		adc $60,x			adc 	NSMantissa1,x
.9ca7		95 60		sta $60,x			sta 	NSMantissa1,x
.9ca9		68		pla				pla
.9caa		75 68		adc $68,x			adc 	NSMantissa2,x
.9cac		95 68		sta $68,x			sta 	NSMantissa2,x
.9cae		68		pla				pla
.9caf		75 70		adc $70,x			adc 	NSMantissa3,x
.9cb1		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cb3		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 10
.9cb6		68		pla				pla 								; add digit
.9cb7		18		clc				clc
.9cb8		75 58		adc $58,x			adc 	NSMantissa0,x
.9cba		95 58		sta $58,x			sta 	NSMantissa0,x
.9cbc		90 0a		bcc $9cc8			bcc 	_ESTASDExit
.9cbe		f6 60		inc $60,x			inc 	NSMantissa1,x
.9cc0		d0 06		bne $9cc8			bne 	_ESTASDExit
.9cc2		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cc4		d0 02		bne $9cc8			bne 	_ESTASDExit
.9cc6		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cc8						_ESTASDExit:
.9cc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cc9						EvaluateTerm:
.9cc9		b1 30		lda ($30),y			lda 	(codePtr),y
.9ccb		30 18		bmi $9ce5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9ccd		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ccf		b0 6c		bcs $9d3d			bcs 	_ETVariable
.9cd1		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9cd3		90 6b		bcc $9d40			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9cd5		c9 3a		cmp #$3a			cmp 	#'9'+1
.9cd7		b0 67		bcs $9d40			bcs 	_ETPuncUnary
.9cd9		20 c1 9b	jsr $9bc1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9cdc						_ETNumber:
.9cdc		c8		iny				iny 								; keep encoding until we have the numbers
.9cdd		b1 30		lda ($30),y			lda 	(codePtr),y
.9cdf		20 c4 9b	jsr $9bc4			jsr 	EncodeNumberContinue
.9ce2		b0 f8		bcs $9cdc			bcs 	_ETNumber 					; go back if accepted.
.9ce4		60		rts				rts
.9ce5						_ETCheckUnary:
.9ce5		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9ce7		f0 3f		beq $9d28			beq 	_ETString
.9ce9		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ceb		f0 12		beq $9cff			beq 	_ETHexConstant
.9ced		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9cef		90 0b		bcc $9cfc			bcc 	_ETSyntaxError
.9cf1		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.9cf3		b0 07		bcs $9cfc			bcs 	_ETSyntaxError
.9cf5		da		phx				phx 								; push X on the stack
.9cf6		0a		asl a				asl 	a 							; put vector x 2 into X
.9cf7		aa		tax				tax
.9cf8		c8		iny				iny 								; consume unary function token
.9cf9		7c 6a 90	jmp ($906a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9cfc						_ETSyntaxError:
.9cfc		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.9cff						_ETHexConstant:
.9cff		c8		iny				iny 								; skip #
.9d00		c8		iny				iny 								; skip count
.9d01		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; clear result
.9d04						_ETHLoop:
.9d04		b1 30		lda ($30),y			lda 	(codePtr),y
.9d06		c8		iny				iny 								; and consume
.9d07		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d09		f0 1c		beq $9d27			beq 	_ETHExit
.9d0b		48		pha				pha 								; save on stack.
.9d0c		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 2
.9d0f		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 4
.9d12		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 8
.9d15		20 e4 a2	jsr $a2e4			jsr 	NSMShiftLeft 				; x 16
.9d18		68		pla				pla 								; ASCII
.9d19		c9 41		cmp #$41			cmp 	#'A'
.9d1b		90 02		bcc $9d1f			bcc 	_ETHNotChar
.9d1d		e9 07		sbc #$07			sbc 	#7
.9d1f						_ETHNotChar:
.9d1f		29 0f		and #$0f			and 	#15 						; digit now
.9d21		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d23		95 58		sta $58,x			sta 	NSMantissa0,x
.9d25		80 dd		bra $9d04			bra 	_ETHLoop 					; go round.
.9d27						_ETHExit:
.9d27		60		rts				rts
.9d28						_ETString:
.9d28		c8		iny				iny 								; look at length
.9d29		b1 30		lda ($30),y			lda 	(codePtr),y
.9d2b		48		pha				pha
.9d2c		c8		iny				iny 								; first character
.9d2d		20 d4 a6	jsr $a6d4			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d30		68		pla				pla 								; restore count and save
.9d31		85 36		sta $36				sta 	zTemp0
.9d33		98		tya				tya 								; add length to Y to skip it.
.9d34		18		clc				clc
.9d35		65 36		adc $36				adc 	zTemp0
.9d37		a8		tay				tay
.9d38		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d3a		95 50		sta $50,x			sta 	NSStatus,x
.9d3c		60		rts				rts
.9d3d						_ETVariable:
.9d3d		4c 92 9d	jmp $9d92			jmp 	VariableHandler
.9d40						_ETPuncUnary:
.9d40		c8		iny				iny 								; consume the unary character
.9d41		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d43		f0 2b		beq $9d70			beq 	_ETUnaryNegate
.9d45		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.9d47		f0 36		beq $9d7f			beq 	_ETDereference
.9d49		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d4b		f0 3e		beq $9d8b			beq 	_ETParenthesis
.9d4d		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d4f		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d51		f0 06		beq $9d59			beq 	_ETIndirection
.9d53		e6 36		inc $36				inc 	zTemp0
.9d55		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d57		d0 a3		bne $9cfc			bne 	_ETSyntaxError
.9d59						_ETIndirection:
.9d59		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d5b		1a		inc a				inc 	a
.9d5c		48		pha				pha
.9d5d		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm				; evaluate the term
.9d60		20 42 9b	jsr $9b42			jsr 	Dereference 				; dereference it.
.9d63		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d65		d0 06		bne $9d6d			bne 	_ETTypeMismatch
.9d67		68		pla				pla 								; indirection 1-2
.9d68		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d6a		95 50		sta $50,x			sta 	NSStatus,x
.9d6c		60		rts				rts
.9d6d						_ETTypeMismatch:
.9d6d		4c 57 a4	jmp $a457			jmp 	TypeError
.9d70						_ETUnaryNegate:
.9d70		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm				; evaluate the term
.9d73		20 42 9b	jsr $9b42			jsr 	Dereference 				; dereference it.
.9d76		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9d78		29 10		and #$10			and 	#NSTString
.9d7a		d0 f1		bne $9d6d			bne 	_ETTypeMismatch
.9d7c		4c 97 a2	jmp $a297			jmp 	NSMNegate  					; just toggles the sign bit.
.9d7f						_ETDereference:
.9d7f		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm				; evaluate the term
.9d82		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9d84		29 20		and #$20			and 	#NSBIsReference
.9d86		f0 e5		beq $9d6d			beq 	_ETTypeMismatch
.9d88		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9d8a		60		rts				rts
.9d8b						_ETParenthesis:
.9d8b		20 7f 98	jsr $987f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9d8e		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; check for )
.9d91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9d92						VariableHandler:
.9d92		b1 30		lda ($30),y			lda 	(codePtr),y
.9d94		18		clc				clc
.9d95		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9d97		85 37		sta $37				sta 	zTemp0+1
.9d99		c8		iny				iny
.9d9a		b1 30		lda ($30),y			lda 	(codePtr),y
.9d9c		85 36		sta $36				sta 	zTemp0
.9d9e		c8		iny				iny
.9d9f		18		clc				clc									; copy variable address+3 to mantissa
.9da0		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9da2		95 58		sta $58,x			sta 	NSMantissa0,x
.9da4		a5 37		lda $37				lda 	zTemp0+1
.9da6		69 00		adc #$00			adc 	#0
.9da8		95 60		sta $60,x			sta 	NSMantissa1,x
.9daa		74 68		stz $68,x			stz 	NSMantissa2,x
.9dac		74 70		stz $70,x			stz 	NSMantissa3,x
.9dae		74 78		stz $78,x			stz 	NSExponent,x
.9db0		5a		phy				phy
.9db1		a0 02		ldy #$02			ldy 	#2 							; read type
.9db3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9db5		7a		ply				ply
.9db6		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9db8		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dba		95 50		sta $50,x			sta 	NSStatus,x
.9dbc		29 04		and #$04			and 	#NSBIsArray
.9dbe		d0 01		bne $9dc1			bne 	_VHArray
.9dc0		60		rts				rts
.9dc1						_VHArray:
.9dc1		e8		inx				inx
.9dc2		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9dc5		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9dc7		95 51		sta $51,x			sta 	NSStatus+1,x
.9dc9		b1 30		lda ($30),y			lda 	(codePtr),y
.9dcb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9dcd		d0 06		bne $9dd5			bne 	_VHNoSecondIndex
.9dcf		c8		iny				iny 								; skip the comma
.9dd0		e8		inx				inx
.9dd1		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9dd4		ca		dex				dex
.9dd5						_VHNoSecondIndex:
.9dd5		ca		dex				dex 								; set X back.
.9dd6		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; and check the right bracket.
.9dd9		5a		phy				phy 								; save position
.9dda		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9ddc		85 3e		sta $3e				sta 	zaTemp
.9dde		b5 60		lda $60,x			lda 	NSMantissa1,x
.9de0		85 3f		sta $3f				sta 	zaTemp+1
.9de2		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9de4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9de6		f0 5d		beq $9e45			beq 	_VHBadArray
.9de8		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9dea		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dec		f0 02		beq $9df0			beq 	_VHHas2Mask
.9dee		a9 ff		lda #$ff			lda 	#$FF
.9df0						_VHHas2Mask:
.9df0		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9df2		f0 4c		beq $9e40			beq 	_VHBadIndex
.9df4		0a		asl a				asl 	a 							; carry will be set if a second index
.9df5		90 08		bcc $9dff			bcc 	_VHCheckFirstIndex
.9df7		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9df9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dfb		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9dfd		90 41		bcc $9e40			bcc 	_VHBadIndex
.9dff						_VHCheckFirstIndex:
.9dff		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e01		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e03		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e05		90 39		bcc $9e40			bcc 	_VHBadIndex
.9e07		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e09		64 37		stz $37				stz 	zTemp0+1
.9e0b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e0d		30 0e		bmi $9e1d			bmi 	_VHNoMultiply
.9e0f		da		phx				phx
.9e10		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e12		48		pha				pha
.9e13		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e15		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e17		1a		inc a				inc 	a 							; add 1 for zero base
.9e18		fa		plx				plx
.9e19		20 80 a2	jsr $a280			jsr 	Multiply8x8 				; calculate -> Z0
.9e1c		fa		plx				plx
.9e1d						_VHNoMultiply:
.9e1d		18		clc				clc
.9e1e		a5 36		lda $36				lda 	zTemp0
.9e20		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e22		85 36		sta $36				sta 	zTemp0
.9e24		a5 37		lda $37				lda 	zTemp0+1
.9e26		69 00		adc #$00			adc 	#0
.9e28		85 37		sta $37				sta 	zTemp0+1
.9e2a		b5 50		lda $50,x			lda 	NSStatus,x
.9e2c		20 18 89	jsr $8918			jsr 	ScaleByBaseType
.9e2f		18		clc				clc
.9e30		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e32		65 36		adc $36				adc 	zTemp0
.9e34		95 58		sta $58,x			sta 	NSMantissa0,x
.9e36		a0 01		ldy #$01			ldy 	#1
.9e38		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e3a		65 37		adc $37				adc 	zTemp0+1
.9e3c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e3e		7a		ply				ply 								; restore position
.9e3f		60		rts				rts
.9e40						_VHBadIndex:
.9e40		a9 17		lda #$17		lda	#23
.9e42		4c 75 93	jmp $9375		jmp	ErrorHandler
.9e45						_VHBadArray:
.9e45		a9 18		lda #$18		lda	#24
.9e47		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e4a						AbsUnary:
.9e4a		fa		plx				plx 								; restore stack pos
.9e4b		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; get a float or int
.9e4e		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9e51		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e53		29 7f		and #$7f			and 	#$7F
.9e55		95 50		sta $50,x			sta 	NSStatus,x
.9e57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e58						AllocUnary:
.9e58		fa		plx				plx 								; restore stack pos
.9e59		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger		; get bytes required.
.9e5c		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9e5f		da		phx				phx 								; save X/Y
.9e60		5a		phy				phy
.9e61		8a		txa				txa 								; copy X into Y
.9e62		a8		tay				tay
.9e63		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e66		aa		tax				tax
.9e67		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e6a		20 77 9e	jsr $9e77			jsr 	AllocateXABytes 			; allocate memory
.9e6d		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9e70		8a		txa				txa 	 							; typing is 16 bit integer.
.9e71		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9e74		7a		ply				ply
.9e75		fa		plx				plx
.9e76		60		rts				rts
.9e77						AllocateXABytes:
.9e77		5a		phy				phy
.9e78		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9e7b		84 36		sty $36				sty 	zTemp0
.9e7d		5a		phy				phy
.9e7e		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9e81		84 37		sty $37				sty 	zTemp0+1
.9e83		5a		phy				phy
.9e84		18		clc				clc 								; add to low memory pointer
.9e85		6d 08 04	adc $0408			adc 	lowMemPtr
.9e88		8d 08 04	sta $0408			sta 	lowMemPtr
.9e8b		8a		txa				txa
.9e8c		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9e8f		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9e92		b0 2f		bcs $9ec3			bcs 	CISSMemory
.9e94		20 b5 9e	jsr $9eb5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9e97						_ClearMemory:
.9e97		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9e9a		c5 36		cmp $36				cmp 	zTemp0
.9e9c		d0 07		bne $9ea5			bne 	_CMClearNext
.9e9e		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9ea1		c5 37		cmp $37				cmp 	zTemp0+1
.9ea3		f0 0c		beq $9eb1			beq 	_CMExit
.9ea5						_CMClearNext:
.9ea5		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9ea7		92 36		sta ($36)			sta 	(zTemp0)
.9ea9		e6 36		inc $36				inc 	zTemp0
.9eab		d0 ea		bne $9e97			bne 	_ClearMemory
.9ead		e6 37		inc $37				inc		zTemp0+1
.9eaf		80 e6		bra $9e97			bra 	_ClearMemory
.9eb1						_CMExit:
.9eb1		fa		plx				plx
.9eb2		68		pla				pla
.9eb3		7a		ply				ply
.9eb4		60		rts				rts
.9eb5						CheckIdentifierStringSpace:
.9eb5		48		pha				pha
.9eb6		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9eb9		18		clc				clc
.9eba		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ebc		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9ebf		b0 02		bcs $9ec3			bcs 	CISSMemory
.9ec1		68		pla				pla
.9ec2		60		rts				rts
.9ec3						CISSMemory:
.9ec3		a9 06		lda #$06		lda	#6
.9ec5		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ec8						AscUnary:
.9ec8		fa		plx				plx 								; restore stack pos
.9ec9		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; get a string
.9ecc		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9ece		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte 					; ASC("") will return zero.
.9ed1		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9ed4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ed5						FracUnary:
.9ed5		fa		plx				plx 								; restore stack pos
.9ed6		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; get a float or int
.9ed9		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9edc		b5 50		lda $50,x			lda 	NSStatus,x
.9ede		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ee0		f0 04		beq $9ee6			beq 	_IUZero
.9ee2		20 90 99	jsr $9990			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ee5		60		rts				rts
.9ee6						_IUZero:
.9ee6		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.9ee9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9eea						IntUnary:
.9eea		fa		plx				plx 								; restore stack pos
.9eeb		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; get a float or int
.9eee		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9ef1		b5 50		lda $50,x			lda 	NSStatus,x
.9ef3		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ef5		f0 03		beq $9efa			beq 	_IUExit
.9ef7		20 e8 99	jsr $99e8			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9efa						_IUExit:
.9efa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9efb						LenUnary:
.9efb		fa		plx				plx 								; restore stack pos
.9efc		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; get a string
.9eff		5a		phy				phy
.9f00		a0 00		ldy #$00			ldy 	#0 							; find length
.9f02						_LenFind:
.9f02		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f04		f0 06		beq $9f0c			beq 	_LenExit
.9f06		c8		iny				iny
.9f07		d0 f9		bne $9f02			bne 	_LenFind
.9f09		4c 52 a4	jmp $a452			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f0c						_LenExit:
.9f0c		98		tya				tya		 							; return length
.9f0d		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.9f10		7a		ply				ply
.9f11		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9f14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f15						Unary_Min:
.9f15		a9 01		lda #$01			lda 	#1
.9f17		80 02		bra $9f1b			bra 	UnaryMinMaxMain
.9f19						Unary_Max:
.9f19		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f1b						UnaryMinMaxMain:
.9f1b		fa		plx				plx 								; get index on number stack
.9f1c		48		pha				pha 								; save comparator
.9f1d		20 1a a2	jsr $a21a			jsr 	EvaluateValue 				; get the first value.
.9f20						_UMMMLoop:
.9f20		b1 30		lda ($30),y			lda 	(codePtr),y
.9f22		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f24		f0 22		beq $9f48			beq 	_UMMMDone
.9f26		20 64 93	jsr $9364			jsr 	CheckComma 					; must be a comma
.9f29		e8		inx				inx
.9f2a		20 1a a2	jsr $a21a			jsr 	EvaluateValue
.9f2d		ca		dex				dex
.9f2e		20 b8 a2	jsr $a2b8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f31		e8		inx				inx
.9f32		20 b8 a2	jsr $a2b8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f35		e8		inx				inx
.9f36		20 32 94	jsr $9432			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f39		ca		dex				dex
.9f3a		ca		dex				dex
.9f3b		85 36		sta $36				sta 	zTemp0 						; save required result
.9f3d		68		pla				pla 								; get and save comparator
.9f3e		48		pha				pha
.9f3f		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f41		d0 dd		bne $9f20			bne 	_UMMMLoop
.9f43		20 4b 9f	jsr $9f4b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f46		80 d8		bra $9f20			bra 	_UMMMLoop
.9f48						_UMMMDone:
.9f48		68		pla				pla 								; throw the comparator
.9f49		c8		iny				iny 								; skip )
.9f4a		60		rts				rts
.9f4b						ExpCopyAboveDown:
.9f4b		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f4d		95 50		sta $50,x			sta 	NSStatus,x
.9f4f		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f51		95 78		sta $78,x			sta 	NSExponent,x
.9f53		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f55		95 58		sta $58,x			sta 	NSMantissa0,x
.9f57		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f59		95 60		sta $60,x			sta 	NSMantissa1,x
.9f5b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f5d		95 68		sta $68,x			sta 	NSMantissa2,x
.9f5f		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f61		95 70		sta $70,x			sta 	NSMantissa3,x
.9f63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f64						Unary_Not:
.9f64		fa		plx				plx
.9f65		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; get integer
.9f68		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9f6b		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; zero mantissa ?
.9f6e		f0 04		beq $9f74			beq 	_NotZero
.9f70		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.9f73		60		rts				rts
.9f74						_NotZero:
.9f74		4c e8 93	jmp $93e8			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9f77						PeekByteUnary:
.9f77		a9 01		lda #$01			lda 	#1
.9f79		80 0a		bra $9f85			bra 	PeekUnary
.9f7b						PeekWUnary:
.9f7b		a9 02		lda #$02			lda 	#2
.9f7d		80 06		bra $9f85			bra 	PeekUnary
.9f7f						PeekLUnary:
.9f7f		a9 03		lda #$03			lda 	#3
.9f81		80 02		bra $9f85			bra 	PeekUnary
.9f83						PeekDUnary:
.9f83		a9 04		lda #$04			lda 	#4
.9f85						PeekUnary:
.9f85		fa		plx				plx 								; restore position.
.9f86		48		pha				pha 								; save count to copy on stack
.9f87		20 55 a2	jsr $a255			jsr		Evaluate16BitInteger 		; address as constant.
.9f8a		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9f8d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9f8f		85 36		sta $36				sta 	zTemp0
.9f91		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f93		85 37		sta $37				sta 	zTemp0+1
.9f95		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; clear the result to zero.
.9f98		68		pla				pla 								; count in zTemp2
.9f99		85 3a		sta $3a				sta 	zTemp2
.9f9b		da		phx				phx 								; save stack position and offset of read
.9f9c		5a		phy				phy
.9f9d		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9f9f						_PULoop:
.9f9f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fa1		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fa3		c8		iny				iny 								; next byte to write
.9fa4		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fa5		18		clc				clc
.9fa6		69 08		adc #$08			adc 	#MathStackSize
.9fa8		aa		tax				tax
.9fa9		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fab		d0 f2		bne $9f9f			bne 	_PULoop
.9fad		7a		ply				ply 								; restore stack/code pos and exit.
.9fae		fa		plx				plx
.9faf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9fb0						SgnUnary:
.9fb0		fa		plx				plx 								; restore stack pos
.9fb1		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; get a float or int
.9fb4		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.9fb7		20 f7 a2	jsr $a2f7			jsr 	NSMIsZero 					; if zero
.9fba		f0 0e		beq $9fca			beq 	_SGZero  					; return Int Zero
.9fbc		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9fbe		48		pha				pha
.9fbf		a9 01		lda #$01			lda 	#1 							; set to 1
.9fc1		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.9fc4		68		pla				pla
.9fc5		29 80		and #$80			and		#$80 						; copy the sign byte out
.9fc7		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9fc9		60		rts				rts
.9fca		20 d5 a2	jsr $a2d5	_SGZero:jsr 	NSMSetZero
.9fcd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9fce						ValUnary:
.9fce		fa		plx				plx 								; restore stack pos
.9fcf		20 e4 9f	jsr $9fe4			jsr 	ValMainCode 				; do the main val() code
.9fd2		b0 01		bcs $9fd5			bcs 	_VUError 					; couldn't convert
.9fd4		60		rts				rts
.9fd5						_VUError:
.9fd5		4c 57 a4	jmp $a457			jmp 	TypeError
.9fd8						IsValUnary:
.9fd8		fa		plx				plx 								; restore stack pos
.9fd9		20 e4 9f	jsr $9fe4			jsr 	ValMainCode 				; do the main val() code
.9fdc		b0 03		bcs $9fe1			bcs 	_VUBad
.9fde		4c e8 93	jmp $93e8			jmp 	ReturnTrue
.9fe1						_VUBad:
.9fe1		4c f3 93	jmp $93f3			jmp 	ReturnFalse
.9fe4						ValMainCode:
.9fe4		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; get a string
.9fe7		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; check right bracket present
.9fea						ValEvaluateZTemp0:
.9fea		5a		phy				phy
.9feb		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9fed		f0 17		beq $a006			beq 	_VMCFail2
.9fef		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9ff1		48		pha				pha 								; save first character
.9ff2		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9ff4		d0 01		bne $9ff7			bne 	_VMCStart
.9ff6		c8		iny				iny 								; skip over -
.9ff7						_VMCStart:
.9ff7		38		sec				sec 								; initialise first time round.
.9ff8						_VMCNext:
.9ff8		c8		iny				iny 								; pre-increment
.9ff9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9ffb		f0 0c		beq $a009			beq 	_VMCSuccess 				; successful.
.9ffd		20 c5 9b	jsr $9bc5			jsr 	EncodeNumber 				; send it to the number-builder
.a000		90 03		bcc $a005			bcc 	_VMCFail 					; if failed, give up.
.a002		18		clc				clc 								; next time round, countinue
.a003		80 f3		bra $9ff8			bra 	_VMCNext
.a005						_VMCFail:
.a005		68		pla				pla
.a006						_VMCFail2:
.a006		7a		ply				ply
.a007		38		sec				sec
.a008		60		rts				rts
.a009						_VMCSuccess:
.a009		a9 00		lda #$00			lda 	#0 							; construct final
.a00b		20 c5 9b	jsr $9bc5			jsr 	EncodeNumber 				; by sending a duff value.
.a00e		68		pla				pla 								; if it was -ve
.a00f		c9 2d		cmp #$2d			cmp 	#"-"
.a011		d0 03		bne $a016			bne 	_VMCNotNegative
.a013		20 97 a2	jsr $a297			jsr		NSMNegate 					; negate it.
.a016						_VMCNotNegative:
.a016		7a		ply				ply
.a017		18		clc				clc
.a018		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a019						ChrUnary:
.a019		fa		plx				plx 								; restore stack pos
.a01a		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a01d		48		pha				pha
.a01e		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.a021		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a023		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.a026		68		pla				pla 								; write number to it
.a027		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.a02a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a02b						ItemCountUnary:
.a02b		fa		plx				plx
.a02c		20 2d a2	jsr $a22d			jsr 	EvaluateString
.a02f		e8		inx				inx
.a030		20 a3 a0	jsr $a0a3			jsr 	ICGetSeperator
.a033		ca		dex				dex
.a034		20 c4 a0	jsr $a0c4			jsr 	ICSetPointer 				; zTemp0 = (string)
.a037		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; zero the result.
.a03a		5a		phy				phy
.a03b		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a03d						_ICULoop:
.a03d		c8		iny				iny
.a03e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a040		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a043		d0 02		bne $a047			bne 	_ICUNoMatch
.a045		f6 58		inc $58,x			inc 	NSMantissa0,x
.a047						_ICUNoMatch:
.a047		c9 00		cmp #$00			cmp 	#0
.a049		d0 f2		bne $a03d			bne 	_ICULoop
.a04b		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a04d		7a		ply				ply
.a04e		60		rts				rts
.a04f						ItemGetUnary:
.a04f		fa		plx				plx
.a050		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; search string
.a053		20 64 93	jsr $9364			jsr 	CheckComma
.a056		e8		inx				inx 								; get count
.a057		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.a05a		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a05c		f0 61		beq $a0bf			beq 	ICGSRange
.a05e		e8		inx				inx 								; get seperator.
.a05f		20 a3 a0	jsr $a0a3			jsr 	ICGetSeperator
.a062		ca		dex				dex
.a063		ca		dex				dex
.a064		5a		phy				phy
.a065		20 c4 a0	jsr $a0c4			jsr 	ICSetPointer 				; zTemp0 points to string.
.a068		a0 00		ldy #$00			ldy 	#0
.a06a		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a06c		f0 0e		beq $a07c			beq 	_IGUFoundStart
.a06e						_IGUFindNext:
.a06e		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a070		f0 4d		beq $a0bf			beq 	ICGSRange 					; eol, not found.
.a072		c8		iny				iny
.a073		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a076		d0 f6		bne $a06e			bne 	_IGUFindNext
.a078		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a07a		d0 f2		bne $a06e			bne 	_IGUFindNext
.a07c						_IGUFoundStart:
.a07c		84 38		sty $38				sty 	zTemp1 						; save start
.a07e		88		dey				dey
.a07f						_IGUFindLength:
.a07f		c8		iny				iny 								; forward till seperator/EOS
.a080		b1 36		lda ($36),y			lda 	(zTemp0),y
.a082		f0 05		beq $a089			beq 	_IGUFoundLength
.a084		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a087		d0 f6		bne $a07f			bne 	_IGUFindLength
.a089						_IGUFoundLength:
.a089		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a08b		98		tya				tya 								; calculate length of new string.
.a08c		38		sec				sec
.a08d		e5 38		sbc $38				sbc 	zTemp1
.a08f		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate 			; allocate bytes for it.
.a092		a4 38		ldy $38				ldy 	zTemp1
.a094						_IGUCopySub:
.a094		c4 39		cpy $39				cpy 	zTemp1+1
.a096		f0 08		beq $a0a0			beq 	_IGUCopyOver
.a098		b1 36		lda ($36),y			lda 	(zTemp0),y
.a09a		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.a09d		c8		iny				iny
.a09e		80 f4		bra $a094			bra 	_IGUCopySub
.a0a0						_IGUCopyOver:
.a0a0		7a		ply				ply
.a0a1		60		rts				rts
>a0a2		db						.byte 	$DB 						; causes a break in the emulator
.a0a3						ICGetSeperator:
.a0a3		20 64 93	jsr $9364			jsr 	CheckComma 					; preceding comma
.a0a6		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; seperator string
.a0a9		20 c4 a0	jsr $a0c4			jsr 	ICSetPointer 				; access it
.a0ac		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0ae		8d a7 07	sta $07a7			sta 	ICSeperator
.a0b1		f0 0c		beq $a0bf			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0b3		5a		phy				phy
.a0b4		a0 01		ldy #$01			ldy 	#1
.a0b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b8		d0 05		bne $a0bf			bne 	ICGSRange
.a0ba		7a		ply				ply
.a0bb		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; check following )
.a0be		60		rts				rts
.a0bf						ICGSRange:
.a0bf		a9 04		lda #$04		lda	#4
.a0c1		4c 75 93	jmp $9375		jmp	ErrorHandler
.a0c4						ICSetPointer:
.a0c4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a0c6		85 36		sta $36				sta 	zTemp0
.a0c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0ca		85 37		sta $37				sta 	zTemp0+1
.a0cc		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0cd						SpcUnary:
.a0cd		fa		plx				plx 								; restore stack pos
.a0ce		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger			; get value
.a0d1		5a		phy				phy
.a0d2		48		pha				pha 								; save count
.a0d3		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.a0d6		7a		ply				ply 								; to do count in Y
.a0d7						_SpcLoop:
.a0d7		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a0d9		f0 08		beq $a0e3			beq 	_SpcExit
.a0db		a9 20		lda #$20			lda 	#32
.a0dd		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.a0e0		88		dey				dey
.a0e1		80 f4		bra $a0d7			bra 	_SpcLoop
.a0e3						_SpcExit:
.a0e3		7a		ply				ply
.a0e4		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.a0e7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a0e8						Unary_Str:
.a0e8		fa		plx				plx
.a0e9		20 23 a2	jsr $a223			jsr 	EvaluateNumber  			; get number
.a0ec		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; closing bracket
.a0ef		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a0f1		20 0a a1	jsr $a10a			jsr 	ConvertNumberToString 		; do the conversion.
.a0f4		a9 21		lda #$21			lda		#33 						; create buffer
.a0f6		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate 			; allocate memory
.a0f9		da		phx				phx  								; copy the converted string into the buffer.
.a0fa		a2 00		ldx #$00			ldx 	#0
.a0fc						_USCopy:
.a0fc		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a0ff		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.a102		e8		inx				inx
.a103		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a106		d0 f4		bne $a0fc			bne 	_USCopy
.a108		fa		plx				plx
.a109		60		rts				rts
.a10a						ConvertNumberToString:
.a10a		5a		phy				phy 								; save code position
.a10b		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a10e		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a111		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a113		10 09		bpl $a11e			bpl 	_CNTSNotNegative
.a115		29 7f		and #$7f			and 	#$7F 						; make +ve
.a117		95 50		sta $50,x			sta 	NSStatus,x
.a119		a9 2d		lda #$2d			lda 	#"-"
.a11b		20 7f a1	jsr $a17f			jsr 	WriteDecimalBuffer
.a11e						_CNTSNotNegative:
.a11e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a120		f0 12		beq $a134			beq 	_CNTSNotFloat
.a122		e8		inx				inx 								; round up so we don't get too many 6.999999
.a123		a9 01		lda #$01			lda 	#1
.a125		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.a128		ca		dex				dex
.a129		b5 78		lda $78,x			lda		NSExponent,x
.a12b		95 79		sta $79,x			sta 	NSExponent+1,x
.a12d		a9 08		lda #$08			lda 	#NSTFloat
.a12f		95 51		sta $51,x			sta 	NSStatus+1,x
.a131		20 ca 98	jsr $98ca			jsr 	FloatAdd
.a134						_CNTSNotFloat:
.a134		20 61 a1	jsr $a161			jsr 	MakePlusTwoString 			; do the integer part.
.a137		20 90 99	jsr $9990			jsr 	FloatFractionalPart 		; get the fractional part
.a13a		20 41 9a	jsr $9a41			jsr 	NSNormalise					; normalise , exit if zero
.a13d		f0 20		beq $a15f			beq 	_CNTSExit
.a13f		a9 2e		lda #$2e			lda 	#"."
.a141		20 7f a1	jsr $a17f			jsr 	WriteDecimalBuffer 			; write decimal place
.a144						_CNTSDecimal:
.a144		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a147		30 16		bmi $a15f			bmi 	_CNTSExit
.a149		e8		inx				inx 								; x 10.0
.a14a		a9 0a		lda #$0a			lda 	#10
.a14c		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.a14f		a9 08		lda #$08			lda 	#NSTFloat
.a151		95 50		sta $50,x			sta 	NSStatus,x
.a153		ca		dex				dex
.a154		20 0f 9a	jsr $9a0f			jsr 	FloatMultiply
.a157		20 61 a1	jsr $a161			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a15a		20 90 99	jsr $9990			jsr 	FloatFractionalPart 		; get the fractional part
.a15d		80 e5		bra $a144			bra 	_CNTSDecimal 				; keep going.
.a15f						_CNTSExit:
.a15f		7a		ply				ply
.a160		60		rts				rts
.a161						MakePlusTwoString:
.a161		da		phx				phx
.a162		20 b8 a2	jsr $a2b8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a165		e8		inx				inx 								; access it
.a166		e8		inx				inx
.a167		20 e8 99	jsr $99e8			jsr 	FloatIntegerPart 			; make it an integer
.a16a		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a16c		20 fa 97	jsr $97fa			jsr 	ConvertInt32
.a16f		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a171						_MPTSCopy:
.a171		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a174		20 7f a1	jsr $a17f			jsr 	WriteDecimalBuffer
.a177		e8		inx				inx
.a178		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a17b		d0 f4		bne $a171			bne 	_MPTSCopy
.a17d		fa		plx				plx
.a17e		60		rts				rts
.a17f						WriteDecimalBuffer:
.a17f		da		phx				phx
.a180		ae 11 04	ldx $0411			ldx 	dbOffset
.a183		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a186		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a189		ee 11 04	inc $0411			inc 	dbOffset
.a18c		fa		plx				plx
.a18d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a18e						Unary_Left:
.a18e		fa		plx				plx
.a18f		18		clc				clc 								; only one parameter
.a190		20 f3 a1	jsr $a1f3			jsr 	SubstringInitial 			; set up.
.a193		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a195		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a197		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a199		80 25		bra $a1c0			bra 	SubstringMain
.a19b						Unary_Right:
.a19b		fa		plx				plx
.a19c		18		clc				clc 								; only one parameter
.a19d		20 f3 a1	jsr $a1f3			jsr 	SubstringInitial 			; set up.
.a1a0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1a2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1a4		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1a6		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1a8		b0 02		bcs $a1ac			bcs 	_URNotUnderflow
.a1aa		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1ac						_URNotUnderflow:
.a1ac		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1ae		80 10		bra $a1c0			bra 	SubstringMain
.a1b0						Unary_Mid:
.a1b0		fa		plx				plx
.a1b1		38		sec				sec 								; two parameters
.a1b2		20 f3 a1	jsr $a1f3			jsr 	SubstringInitial 			; set up.
.a1b5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1b7		f0 04		beq $a1bd			beq 	_UMError
.a1b9		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1bb		80 03		bra $a1c0			bra 	SubstringMain
.a1bd						_UMError:
.a1bd		4c 5c a4	jmp $a45c			jmp 	ArgumentError
.a1c0						SubstringMain:
.a1c0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1c2		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1c4		b0 27		bcs $a1ed			bcs 	_SSMNull 					; if so, return an empty string.
.a1c6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1c8		f0 23		beq $a1ed			beq 	_SSMNull 					; return empty string.
.a1ca		18		clc				clc 								; add the offset +1 to the address and
.a1cb		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a1cd		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1cf		85 36		sta $36				sta 	zTemp0
.a1d1		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a1d3		69 00		adc #$00			adc 	#0
.a1d5		85 37		sta $37				sta 	zTemp0+1
.a1d7						_SSMNoCarry:
.a1d7		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a1d9		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate 			; allocate that many characters
.a1dc		5a		phy				phy 								; save Y
.a1dd		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a1df						_SSMCopy:
.a1df		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a1e1		f0 08		beq $a1eb			beq 	_SSMEString 				; no more to copy
.a1e3		20 1f b4	jsr $b41f			jsr 	StringTempWrite 			; and write it out.
.a1e6		c8		iny				iny
.a1e7		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a1e9		d0 f4		bne $a1df			bne 	_SSMCopy
.a1eb						_SSMEString:
.a1eb		7a		ply				ply
.a1ec						_SSMExit:
.a1ec		60		rts				rts
.a1ed						_SSMNull:
.a1ed		a9 00		lda #$00			lda 	#0
.a1ef		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.a1f2		60		rts				rts
.a1f3						SubstringInitial:
.a1f3		da		phx				phx 								; save initial stack position
.a1f4		08		php				php 								; save carry on stack indicating 2 parameters
.a1f5		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; get a string
.a1f8		5a		phy				phy 								; calculate length to exponent.
.a1f9		a0 ff		ldy #$ff			ldy 	#$FF
.a1fb						_SIFindLength:
.a1fb		c8		iny				iny
.a1fc		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1fe		d0 fb		bne $a1fb			bne 	_SIFindLength
.a200		98		tya				tya
.a201		95 78		sta $78,x			sta 	NSExponent,x
.a203		7a		ply				ply
.a204		e8		inx				inx
.a205		20 64 93	jsr $9364			jsr 	CheckComma 					; comma next
.a208		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get next parameter
.a20b		28		plp				plp 								; is it the last parameter ?
.a20c		90 07		bcc $a215			bcc 	_SSIExit 					; if so, exit.
.a20e		e8		inx				inx
.a20f		20 64 93	jsr $9364			jsr 	CheckComma 					; comma next
.a212		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get last parameter
.a215						_SSIExit:
.a215		fa		plx				plx
.a216		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; check closing bracket
.a219		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a21a						EvaluateValue:
.a21a		48		pha				pha
.a21b		20 7f 98	jsr $987f			jsr		EvaluateExpression 			; expression
.a21e		20 42 9b	jsr $9b42			jsr 	Dereference					; derefernce it
.a221		68		pla				pla
.a222		60		rts				rts
.a223						EvaluateNumber:
.a223		20 1a a2	jsr $a21a			jsr 	EvaluateValue 				; get a value
.a226		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a228		29 10		and #$10			and 	#NSBIsString
.a22a		d0 13		bne $a23f			bne 	HelperTypeError
.a22c		60		rts				rts
.a22d						EvaluateString:
.a22d		20 1a a2	jsr $a21a			jsr 	EvaluateValue 				; get a value
.a230		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a232		29 10		and #$10			and 	#NSBIsString
.a234		f0 09		beq $a23f			beq 	HelperTypeError
.a236						CopyAddressToTemp0:
.a236		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a238		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a23a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a23c		85 37		sta $37				sta 	zTemp0+1
.a23e		60		rts				rts
.a23f						HelperTypeError:
.a23f		4c 57 a4	jmp $a457			jmp 	TypeError
.a242						EvaluateInteger:
.a242		20 23 a2	jsr $a223			jsr 	EvaluateNumber
.a245		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a247		d0 09		bne $a252			bne 	HelperValueError 			; if not, it's a float.
.a249		60		rts				rts
.a24a						EvaluateUnsignedInteger:
.a24a		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; check integer is +ve
.a24d		b5 50		lda $50,x			lda 	NSStatus,x
.a24f		30 01		bmi $a252			bmi 	HelperValueError
.a251		60		rts				rts
.a252						HelperValueError:
.a252		4c 5c a4	jmp $a45c			jmp 	ArgumentError
.a255						Evaluate16BitInteger:
.a255		20 4a a2	jsr $a24a			jsr	 	EvaluateUnsignedInteger		; get integer
.a258		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a25a		15 68		ora $68,x			ora 	NSMantissa2,x
.a25c		d0 f4		bne $a252			bne 	HelperValueError
.a25e		60		rts				rts
.a25f						Evaluate16BitIntegerSigned:
.a25f		20 42 a2	jsr $a242			jsr	 	EvaluateInteger				; get integer
.a262		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a264		15 68		ora $68,x			ora 	NSMantissa2,x
.a266		d0 ea		bne $a252			bne 	HelperValueError
.a268		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a26a		10 03		bpl $a26f			bpl 	_EISNotSigned
.a26c		20 9e a2	jsr $a29e			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a26f						_EISNotSigned:
.a26f		60		rts				rts
.a270						Evaluate8BitInteger:
.a270		20 4a a2	jsr $a24a			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a273		d0 dd		bne $a252			bne 	HelperValueError
.a275		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a277		15 68		ora $68,x			ora 	NSMantissa2,x
.a279		15 60		ora $60,x			ora 	NSMantissa1,x
.a27b		d0 d5		bne $a252			bne 	HelperValueError
.a27d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a27f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a280						Multiply8x8:
.a280		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a281		85 36		sta $36			  	sta 	zTemp0
.a283		86 37		stx $37				stx 	zTemp0+1
.a285		a9 00		lda #$00			lda 	#0
.a287		a2 08		ldx #$08			ldx 	#8
.a289						_M88Loop:
.a289		90 03		bcc $a28e			bcc 	_M88NoAdd
.a28b		18		clc				clc
.a28c		65 37		adc $37				adc 	zTemp0+1
.a28e						_M88NoAdd:
.a28e		6a		ror a				ror 	a
.a28f		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a291		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a292		d0 f5		bne $a289			bne 	_M88Loop
.a294		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a296		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a297						NSMNegate:
.a297		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a299		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a29b		95 50		sta $50,x			sta 	NSStatus,x
.a29d		60		rts				rts
.a29e						NSMNegateMantissa:
.a29e		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a29f		a9 00		lda #$00			lda 	#0
.a2a1		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2a3		95 58		sta $58,x			sta 	NSMantissa0,x
.a2a5		a9 00		lda #$00			lda 	#0
.a2a7		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2a9		95 60		sta $60,x			sta 	NSMantissa1,x
.a2ab		a9 00		lda #$00			lda 	#0
.a2ad		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2af		95 68		sta $68,x			sta 	NSMantissa2,x
.a2b1		a9 00		lda #$00			lda 	#0
.a2b3		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2b5		95 70		sta $70,x			sta 	NSMantissa3,x
.a2b7		60		rts				rts
.a2b8						NSMShiftUpTwo:
.a2b8		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2ba		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2bc		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2be		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2c0		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2c2		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2c4		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2c6		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2c8		b5 78		lda $78,x			lda 	NSExponent,x
.a2ca		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a2cc		b5 50		lda $50,x			lda 	NSStatus,x
.a2ce		95 52		sta $52,x			sta 	NSStatus+2,x
.a2d0		60		rts				rts
.a2d1						NSMSetZeroMantissaOnly:
.a2d1		a9 00		lda #$00			lda 	#0
.a2d3		80 06		bra $a2db			bra 	NSMSetMantissa
.a2d5						NSMSetZero:
.a2d5		a9 00		lda #$00			lda 	#0
.a2d7						NSMSetByte:
.a2d7		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a2d9		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a2db						NSMSetMantissa:
.a2db		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a2dd		74 60		stz $60,x			stz 	NSMantissa1,x
.a2df		74 68		stz $68,x			stz 	NSMantissa2,x
.a2e1		74 70		stz $70,x			stz 	NSMantissa3,x
.a2e3		60		rts				rts
.a2e4						NSMShiftLeft:
.a2e4		18		clc				clc
.a2e5						NSMRotateLeft:
.a2e5		36 58		rol $58,x			rol 	NSMantissa0,x
.a2e7		36 60		rol $60,x			rol		NSMantissa1,x
.a2e9		36 68		rol $68,x			rol		NSMantissa2,x
.a2eb		36 70		rol $70,x			rol		NSMantissa3,x
.a2ed		60		rts				rts
.a2ee						NSMShiftRight:
.a2ee		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a2f0		76 68		ror $68,x			ror		NSMantissa2,x
.a2f2		76 60		ror $60,x			ror		NSMantissa1,x
.a2f4		76 58		ror $58,x			ror		NSMantissa0,x
.a2f6		60		rts				rts
.a2f7						NSMIsZero:
.a2f7		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2f9		15 68		ora $68,x			ora		NSMantissa2,x
.a2fb		15 60		ora $60,x			ora		NSMantissa1,x
.a2fd		15 58		ora $58,x			ora		NSMantissa0,x
.a2ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a300						Assemble_ora:
.a300		20 88 84	jsr $8488		jsr	AssembleGroup1
>a303		01					.byte $01
.a304						Assemble_and:
.a304		20 88 84	jsr $8488		jsr	AssembleGroup1
>a307		21					.byte $21
.a308						Assemble_eor:
.a308		20 88 84	jsr $8488		jsr	AssembleGroup1
>a30b		41					.byte $41
.a30c						Assemble_adc:
.a30c		20 88 84	jsr $8488		jsr	AssembleGroup1
>a30f		61					.byte $61
.a310						Assemble_sta:
.a310		20 88 84	jsr $8488		jsr	AssembleGroup1
>a313		81					.byte $81
.a314						Assemble_lda:
.a314		20 88 84	jsr $8488		jsr	AssembleGroup1
>a317		a1					.byte $a1
.a318						Assemble_cmp:
.a318		20 88 84	jsr $8488		jsr	AssembleGroup1
>a31b		c1					.byte $c1
.a31c						Assemble_sbc:
.a31c		20 88 84	jsr $8488		jsr	AssembleGroup1
>a31f		e1					.byte $e1
.a320						Assemble_asl:
.a320		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a323		02					.byte $02
>a324		75					.byte $75
.a325						Assemble_rol:
.a325		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a328		22					.byte $22
>a329		75					.byte $75
.a32a						Assemble_lsr:
.a32a		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a32d		42					.byte $42
>a32e		75					.byte $75
.a32f						Assemble_ror:
.a32f		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a332		62					.byte $62
>a333		75					.byte $75
.a334						Assemble_stx:
.a334		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a337		82					.byte $82
>a338		50					.byte $50
.a339						Assemble_ldx:
.a339		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a33c		a2					.byte $a2
>a33d		d0					.byte $d0
.a33e						Assemble_dec:
.a33e		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a341		c2					.byte $c2
>a342		55					.byte $55
.a343						Assemble_inc:
.a343		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a346		e2					.byte $e2
>a347		55					.byte $55
.a348						Assemble_stz:
.a348		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a34b		60					.byte $60
>a34c		44					.byte $44
.a34d						Assemble_bit:
.a34d		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a350		20					.byte $20
>a351		55					.byte $55
.a352						Assemble_sty:
.a352		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a355		80					.byte $80
>a356		54					.byte $54
.a357						Assemble_ldy:
.a357		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a35a		a0					.byte $a0
>a35b		d5					.byte $d5
.a35c						Assemble_cpy:
.a35c		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a35f		c0					.byte $c0
>a360		d4					.byte $d4
.a361						Assemble_cpx:
.a361		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a364		e0					.byte $e0
>a365		d0					.byte $d0
.a366						Assemble_tsb:
.a366		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a369		00					.byte $00
>a36a		50					.byte $50
.a36b						Assemble_trb:
.a36b		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a36e		10					.byte $10
>a36f		50					.byte $50
.a370						Assemble_jsr:
.a370		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a373		14					.byte $14
>a374		10					.byte $10
.a375						Assemble_jmp:
.a375		20 8f 84	jsr $848f		jsr	AssembleGroup2
>a378		40					.byte $40
>a379		10					.byte $10
.a37a						Assemble_bpl:
.a37a		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a37d		10					.byte $10
.a37e						Assemble_bmi:
.a37e		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a381		30					.byte $30
.a382						Assemble_bvc:
.a382		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a385		50					.byte $50
.a386						Assemble_bvs:
.a386		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a389		70					.byte $70
.a38a						Assemble_bcc:
.a38a		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a38d		90					.byte $90
.a38e						Assemble_bcs:
.a38e		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a391		b0					.byte $b0
.a392						Assemble_bne:
.a392		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a395		d0					.byte $d0
.a396						Assemble_beq:
.a396		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a399		f0					.byte $f0
.a39a						Assemble_bra:
.a39a		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>a39d		80					.byte $80
.a39e						Assemble_brk:
.a39e		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3a1		00					.byte $00
.a3a2						Assemble_php:
.a3a2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3a5		08					.byte $08
.a3a6						Assemble_clc:
.a3a6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3a9		18					.byte $18
.a3aa						Assemble_plp:
.a3aa		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3ad		28					.byte $28
.a3ae						Assemble_sec:
.a3ae		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3b1		38					.byte $38
.a3b2						Assemble_rti:
.a3b2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3b5		40					.byte $40
.a3b6						Assemble_pha:
.a3b6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3b9		48					.byte $48
.a3ba						Assemble_cli:
.a3ba		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3bd		58					.byte $58
.a3be						Assemble_phy:
.a3be		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3c1		5a					.byte $5a
.a3c2						Assemble_rts:
.a3c2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3c5		60					.byte $60
.a3c6						Assemble_pla:
.a3c6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3c9		68					.byte $68
.a3ca						Assemble_sei:
.a3ca		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3cd		78					.byte $78
.a3ce						Assemble_ply:
.a3ce		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3d1		7a					.byte $7a
.a3d2						Assemble_dey:
.a3d2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3d5		88					.byte $88
.a3d6						Assemble_txa:
.a3d6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3d9		8a					.byte $8a
.a3da						Assemble_tya:
.a3da		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3dd		98					.byte $98
.a3de						Assemble_txs:
.a3de		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3e1		9a					.byte $9a
.a3e2						Assemble_tay:
.a3e2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3e5		a8					.byte $a8
.a3e6						Assemble_tax:
.a3e6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3e9		aa					.byte $aa
.a3ea						Assemble_clv:
.a3ea		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3ed		b8					.byte $b8
.a3ee						Assemble_tsx:
.a3ee		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3f1		ba					.byte $ba
.a3f2						Assemble_iny:
.a3f2		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3f5		c8					.byte $c8
.a3f6						Assemble_dex:
.a3f6		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3f9		ca					.byte $ca
.a3fa						Assemble_cld:
.a3fa		20 14 85	jsr $8514		jsr	AssembleGroup4
>a3fd		d8					.byte $d8
.a3fe						Assemble_phx:
.a3fe		20 14 85	jsr $8514		jsr	AssembleGroup4
>a401		da					.byte $da
.a402						Assemble_stp:
.a402		20 14 85	jsr $8514		jsr	AssembleGroup4
>a405		db					.byte $db
.a406						Assemble_inx:
.a406		20 14 85	jsr $8514		jsr	AssembleGroup4
>a409		e8					.byte $e8
.a40a						Assemble_nop:
.a40a		20 14 85	jsr $8514		jsr	AssembleGroup4
>a40d		ea					.byte $ea
.a40e						Assemble_sed:
.a40e		20 14 85	jsr $8514		jsr	AssembleGroup4
>a411		f8					.byte $f8
.a412						Assemble_plx:
.a412		20 14 85	jsr $8514		jsr	AssembleGroup4
>a415		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a416						DecimalScalarTable:
>a416		66 66 66 66				.dword $66666666 ; 0.1
>a41a		de					.byte $de
>a41b		1f 85 eb 51				.dword $51eb851f ; 0.01
>a41f		db					.byte $db
>a420		4c 37 89 41				.dword $4189374c ; 0.001
>a424		d8					.byte $d8
>a425		ac 8b db 68				.dword $68db8bac ; 0.0001
>a429		d4					.byte $d4
>a42a		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a42e		d1					.byte $d1
>a42f		83 de 1b 43				.dword $431bde83 ; 1e-06
>a433		ce					.byte $ce
>a434		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a438		ca					.byte $ca
>a439		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a43d		c7					.byte $c7
>a43e		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a442		c4					.byte $c4
>a443		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a447		c0					.byte $c0
>a448		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a44c		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a44d						SyntaxError:
.a44d		a9 02		lda #$02		lda	#2
.a44f		4c 75 93	jmp $9375		jmp	ErrorHandler
.a452						RangeError:
.a452		a9 04		lda #$04		lda	#4
.a454		4c 75 93	jmp $9375		jmp	ErrorHandler
.a457						TypeError:
.a457		a9 05		lda #$05		lda	#5
.a459		4c 75 93	jmp $9375		jmp	ErrorHandler
.a45c						ArgumentError:
.a45c		a9 07		lda #$07		lda	#7
.a45e		4c 75 93	jmp $9375		jmp	ErrorHandler
.a461						NotDoneError:
.a461		a9 0c		lda #$0c		lda	#12
.a463		4c 75 93	jmp $9375		jmp	ErrorHandler
.a466						ErrorText:
>a466		42 72 65 61 6b 00			.text	"Break",0
>a46c		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a474		72 72 6f 72 00
>a479		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a481		20 62 79 20 7a 65 72 6f 00
>a48a		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a492		61 6e 67 65 00
>a497		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a49f		6d 61 74 63 68 00
>a4a5		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4ad		65 6d 6f 72 79 00
>a4b3		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4bb		61 72 67 75 6d 65 6e 74 00
>a4c4		53 74 6f 70 00				.text	"Stop",0
>a4c9		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4d1		6f 6f 20 6c 6f 6e 67 00
>a4d9		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4e1		6e 20 66 61 69 6c 65 64 00
>a4ea		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a4f2		61 74 61 00
>a4f6		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a4fe		65 6e 74 65 64 00
>a504		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a50c		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a518		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a520		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a52d		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a535		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a542		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a54a		68 6f 75 74 20 57 68 69 6c 65 00
>a555		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a55d		68 6f 75 74 20 46 6f 72 00
>a566		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a56e		61 63 6b 20 66 75 6c 6c 00
>a577		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a57f		75 63 74 75 72 65 00
>a586		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a58e		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a59b		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5a3		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5b1		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5b9		7a 65 00
>a5bc		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5c4		79 20 69 6e 64 65 78 00
>a5cc		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a5d4		74 20 64 65 63 6c 61 72 65 64 00
>a5df		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a5e7		20 66 6f 75 6e 64 00
>a5ee		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a5f6		65 72 72 6f 72 00
>a5fc		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a604		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e7fa		09 09 31 31 2f 30 32 2f			.text 9,9,"11/02/23 34"
>e802		32 33 20 33 34

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a60a						MemoryDeleteLine:
.a60a		20 29 a6	jsr $a629			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a60d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a60f		a8		tay				tay
.a610						_MDDLLoop:
.a610		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a612		92 30		sta ($30)			sta 	(codePtr)
.a614		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a616		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a618		d0 07		bne $a621			bne 	_MDLDLNext
.a61a		a5 31		lda $31				lda 	codePtr+1
.a61c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a61e		d0 01		bne $a621			bne 	_MDLDLNext
.a620						_MDDLExit:
.a620		60		rts				rts
.a621						_MDLDLNext:
.a621		e6 30		inc $30				inc 	codePtr						; next byte
.a623		d0 eb		bne $a610			bne 	_MDDLLoop
.a625		e6 31		inc $31				inc 	codePtr+1
.a627		80 e7		bra $a610			bra 	_MDDLLoop
.a629						IMemoryFindEnd:
.a629		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a62b		85 3a		sta $3a				sta 	0+zTemp2
.a62d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a62f		85 3b		sta $3b				sta 	1+zTemp2
.a631						_MDLFELoop:
.a631		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a633		f0 0b		beq $a640			beq 	_MDLFEExit
.a635		18		clc				clc
.a636		65 3a		adc $3a				adc 	zTemp2
.a638		85 3a		sta $3a				sta 	zTemp2
.a63a		90 f5		bcc $a631			bcc 	_MDLFELoop
.a63c		e6 3b		inc $3b				inc 	zTemp2+1
.a63e		80 f1		bra $a631			bra 	_MDLFELoop
.a640						_MDLFEExit:
.a640		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a641						MemoryInsertLine:
.a641		08		php				php
.a642		20 29 a6	jsr $a629			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a645		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a647		1a		inc a				inc 	a
.a648		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a64a		b0 36		bcs $a682			bcs 	_MDLIError 					; no, fail.
.a64c		28		plp				plp 								; do at a specific point or the end ?
.a64d		90 08		bcc $a657			bcc 	_MDLIFound 					; if specific point already set.
.a64f		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a651		85 30		sta $30				sta 	codePtr 					; end.
.a653		a5 3b		lda $3b				lda 	zTemp2+1
.a655		85 31		sta $31				sta 	codePtr+1
.a657						_MDLIFound:
.a657		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a65a		a8		tay				tay
.a65b						_MDLIInsert:
.a65b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a65d		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a65f		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a661		c5 3a		cmp $3a				cmp 	zTemp2
.a663		d0 06		bne $a66b			bne 	_MDLINext
.a665		a5 31		lda $31				lda 	codePtr+1
.a667		c5 3b		cmp $3b				cmp 	zTemp2+1
.a669		f0 0a		beq $a675			beq 	_MDLIHaveSpace
.a66b						_MDLINext:
.a66b		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a66d		d0 02		bne $a671			bne 	_MDLINoBorrow
.a66f		c6 3b		dec $3b				dec 	zTemp2+1
.a671						_MDLINoBorrow:
.a671		c6 3a		dec $3a				dec 	zTemp2
.a673		80 e6		bra $a65b			bra 	_MDLIInsert
.a675						_MDLIHaveSpace:
.a675		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a678		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a679						_MDLICopy:
.a679		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a67c		91 30		sta ($30),y			sta 	(codePtr),y
.a67e		88		dey				dey
.a67f		10 f8		bpl $a679			bpl 	_MDLICopy
.a681		60		rts				rts
.a682						_MDLIError:
.a682		a9 06		lda #$06		lda	#6
.a684		4c 75 93	jmp $9375		jmp	ErrorHandler
.a687						MDLAppendLine:
.a687		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a689		85 36		sta $36				sta 	zTemp0
.a68b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a68d		85 38		sta $38				sta 	0+zTemp1
.a68f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a691		85 39		sta $39				sta 	1+zTemp1
.a693		b2 38		lda ($38)			lda 	(zTemp1)
.a695		d0 0a		bne $a6a1			bne 	_MDLANoInitialise
.a697		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a699		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a69c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a69e		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6a1						_MDLANoInitialise:
.a6a1		18		clc				clc
.a6a2		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6a5		85 38		sta $38				sta 	zTemp1
.a6a7		72 36		adc ($36)			adc 	(zTemp0)
.a6a9		8d a8 07	sta $07a8			sta 	AppendPointer
.a6ac		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6af		85 39		sta $39				sta 	zTemp1+1
.a6b1		69 00		adc #$00			adc 	#0
.a6b3		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6b6		a0 00		ldy #$00			ldy 	#0
.a6b8						_MDLACopy:
.a6b8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6ba		91 38		sta ($38),y			sta 	(zTemp1),y
.a6bc		c8		iny				iny
.a6bd		98		tya				tya
.a6be		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6c0		d0 f6		bne $a6b8			bne 	_MDLACopy
.a6c2		a9 00		lda #$00			lda 	#0 							; end of program.
.a6c4		91 38		sta ($38),y			sta 	(zTemp1),y
.a6c6		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a6c7						MemoryNew:
.a6c7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6c9		85 30		sta $30				sta 	codePtr
.a6cb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6cd		85 31		sta $31				sta 	codePtr+1
.a6cf		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6d1		92 30		sta ($30)			sta 	(codePtr)
.a6d3		60		rts				rts
.a6d4						MemoryInline:
.a6d4		98		tya				tya 								; put address into stack,x
.a6d5		18		clc				clc  								; get the offset, add codePtr
.a6d6		65 30		adc $30				adc 	codePtr
.a6d8		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a6da		a5 31		lda $31				lda 	codePtr+1
.a6dc		69 00		adc #$00			adc 	#0
.a6de		95 60		sta $60,x			sta 	NSMantissa1,x
.a6e0		74 68		stz $68,x			stz 	NSMantissa2,x
.a6e2		74 70		stz $70,x			stz 	NSMantissa3,x
.a6e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a6e5						MemorySearch:
.a6e5		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a6e7		86 37		stx $37				stx 	zTemp0+1
.a6e9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6eb		85 30		sta $30				sta 	codePtr
.a6ed		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6ef		85 31		sta $31				sta 	codePtr+1
.a6f1						_MTAXLoop:
.a6f1		b2 30		lda ($30)			lda 	(codePtr)
.a6f3		18		clc				clc
.a6f4		f0 21		beq $a717			beq 	_MTAXExit 					; reached end, exit with CC.
.a6f6		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a6f8		b1 30		lda ($30),y			lda 	(codePtr),y
.a6fa		38		sec				sec
.a6fb		e5 36		sbc $36				sbc 	zTemp0
.a6fd		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a6ff		c8		iny				iny 								; do the MSB
.a700		b1 30		lda ($30),y			lda 	(codePtr),y
.a702		e5 37		sbc $37				sbc 	zTemp0+1
.a704		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a706		f0 0f		beq $a717			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a708		b0 0d		bcs $a717			bcs 	_MTAXExit 					; current < required exit
.a70a		18		clc				clc
.a70b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a70d		65 30		adc $30				adc 	codePtr
.a70f		85 30		sta $30				sta 	codePtr
.a711		90 02		bcc $a715			bcc 	_CREExit
.a713		e6 31		inc $31				inc 	codePtr+1 					; carry
.a715						_CREExit:
.a715		80 da		bra $a6f1			bra 	_MTAXLoop
.a717						_MTAXExit:
.a717		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a718						RectangleCommand:
.a718		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a71a		80 02		bra $a71e			bra 	ShapeDrawCmd
.a71c						CircleCommand:
.a71c		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a71e						ShapeDrawCmd:
.a71e		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a721						ShapeDraw:
.a721		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a724		4c 9c a7	jmp $a79c			jmp 	ExecuteGraphicCommand	 	; and complete
.a727						SpriteCommand:
.a727		a2 00		ldx #$00			ldx 	#0
.a729		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get image number.
.a72c		5a		phy				phy
.a72d		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a72f		a6 58		ldx $58				ldx 	NSMantissa0
.a731		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a733		b0 0d		bcs $a742			bcs 	_SCRange
.a735		a0 ff		ldy #$ff			ldy 	#255
.a737		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a73a		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a73c		7a		ply				ply
.a73d		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a740		80 5a		bra $a79c			bra 	ExecuteGraphicCommand
.a742						_SCRange:
.a742		4c 52 a4	jmp $a452			jmp 	RangeError
.a745						ImageCommand:
.a745		a2 00		ldx #$00			ldx 	#0
.a747		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get image number.
.a74a		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a74d						ImageRunDraw:
.a74d		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a74f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a752		ad b1 07	lda $07b1			lda 	gxDrawScale
.a755		0a		asl a				asl 	a
.a756		0a		asl a				asl 	a
.a757		0a		asl a				asl 	a
.a758		a8		tay				tay
.a759		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a75b		a6 58		ldx $58				ldx 	NSMantissa0
.a75d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a760		60		rts				rts
.a761						TextCommand:
.a761		a2 00		ldx #$00			ldx 	#0
.a763		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; get text
.a766		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a769						TextRunDraw:
.a769		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a76b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a76e		a0 00		ldy #$00			ldy 	#0
.a770						_IRDLoop:
.a770		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a772		85 37		sta $37				sta 	zTemp0+1
.a774		a5 58		lda $58				lda 	NSMantissa0
.a776		85 36		sta $36				sta 	zTemp0
.a778		b1 36		lda ($36),y			lda 	(zTemp0),y
.a77a		f0 13		beq $a78f			beq 	_IRDExit
.a77c		5a		phy				phy									; save string pos
.a77d		48		pha				pha 								; save char
.a77e		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a781		0a		asl a				asl 	a
.a782		0a		asl a				asl 	a
.a783		0a		asl a				asl 	a
.a784		a8		tay				tay
.a785		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a787		fa		plx				plx 								; char to draw
.a788		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a78b		7a		ply				ply 								; restore string pos
.a78c		c8		iny				iny
.a78d		90 e1		bcc $a770			bcc 	_IRDLoop 					; go back if no error.
.a78f						_IRDExit:
.a78f		60		rts				rts
.a790						PlotCommand:
.a790		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a792		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a795		80 05		bra $a79c			bra 	ExecuteGraphicCommand
.a797						LineCommand:
.a797		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a799		20 a8 a7	jsr $a7a8			jsr 	RunGraphicsCommand
.a79c						ExecuteGraphicCommand:
.a79c		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a79f		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7a2		b0 01		bcs $a7a5			bcs 	_EGCError
.a7a4		60		rts				rts
.a7a5						_EGCError:
.a7a5		4c 4d a4	jmp $a44d			jmp 	SyntaxError
.a7a8						RunGraphicsCommand:
.a7a8		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7ab		68		pla				pla 								; pop handler address
.a7ac		fa		plx				plx
.a7ad		1a		inc a				inc 	a
.a7ae		d0 01		bne $a7b1			bne 	_RGINoCarry
.a7b0		e8		inx				inx
.a7b1						_RGINoCarry:
.a7b1		8d af 07	sta $07af			sta 	gxHandler
.a7b4		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7b7						_RGICommandLoop:
.a7b7		b1 30		lda ($30),y			lda 	(codePtr),y
.a7b9		c8		iny				iny
.a7ba		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.a7bc		f0 53		beq $a811			beq 	_RGI_To
.a7be		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.a7c0		f0 55		beq $a817			beq 	_RGI_Here
.a7c2		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7c4		f0 3d		beq $a803			beq 	_RGI_Exit
.a7c6		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7c8		f0 39		beq $a803			beq 	_RGI_Exit
.a7ca		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.a7cc		f0 3e		beq $a80c			beq 	_RGI_Frame
.a7ce		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.a7d0		f0 33		beq $a805			beq 	_RGI_Solid
.a7d2		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.a7d4		f0 4b		beq $a821			beq 	_RGI_By
.a7d6		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.a7d8		f0 17		beq $a7f1			beq 	_RGI_Move2
.a7da		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.a7dc		f0 62		beq $a840			beq 	_RGI_Dim
.a7de		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.a7e0		f0 74		beq $a856			beq 	_RGI_Colour
.a7e2		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.a7e4		f0 70		beq $a856			beq 	_RGI_Colour
.a7e6		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a7e9		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a7eb		d0 03		bne $a7f0			bne 	_RGI_Move 					; move
.a7ed		4c 7e a8	jmp $a87e			jmp		_RGI_SpriteInstructions
.a7f0						_RGI_Move:
.a7f0		88		dey				dey 								; unpick get.
.a7f1						_RGI_Move2:
.a7f1		20 a4 a8	jsr $a8a4			jsr 	GCGetCoordinatePair 		; move to here
.a7f4		20 cb a8	jsr $a8cb			jsr 	GCCopyPairToStore 			; save
.a7f7		5a		phy				phy
.a7f8		20 c1 a8	jsr $a8c1			jsr 	GCLoadAXY 					; load in
.a7fb		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a7fd		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a800		7a		ply				ply
.a801		80 b4		bra $a7b7			bra 	_RGICommandLoop 			; and go round
.a803						_RGI_Exit:
.a803		88		dey				dey 								; unpick : / EOL
.a804		60		rts				rts
.a805						_RGI_Solid:
.a805		a9 02		lda #$02			lda 	#2
.a807		8d ab 07	sta $07ab			sta 	gxFillSolid
.a80a		80 ab		bra $a7b7			bra 	_RGICommandLoop
.a80c						_RGI_Frame:
.a80c		9c ab 07	stz $07ab			stz 	gxFillSolid
.a80f		80 a6		bra $a7b7			bra 	_RGICommandLoop
.a811						_RGI_To:
.a811		20 a4 a8	jsr $a8a4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a814		20 cb a8	jsr $a8cb			jsr 	GCCopyPairToStore
.a817						_RGI_Here:
.a817		5a		phy				phy
.a818		20 c1 a8	jsr $a8c1			jsr 	GCLoadAXY 					; load it into AXY
.a81b		20 7b a8	jsr $a87b			jsr 	_RGICallHandler 			; go do whatever it is.
.a81e		7a		ply				ply
.a81f		80 96		bra $a7b7			bra 	_RGICommandLoop 			; and go round
.a821						_RGI_By:
.a821		20 b1 a8	jsr $a8b1			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a824		18		clc				clc
.a825		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a827		6d ac 07	adc $07ac			adc 	gxXPos
.a82a		8d ac 07	sta $07ac			sta 	gxXPos
.a82d		a5 61		lda $61				lda 	NSMantissa1+1
.a82f		6d ad 07	adc $07ad			adc 	gxXPos+1
.a832		8d ad 07	sta $07ad			sta 	gxXPos+1
.a835		a5 5a		lda $5a				lda 	NSMantissa0+2
.a837		18		clc				clc
.a838		6d ae 07	adc $07ae			adc 	gxYPos
.a83b		8d ae 07	sta $07ae			sta 	gxYPos
.a83e		80 d7		bra $a817			bra 	_RGI_Here
.a840						_RGI_Dim:
.a840		a2 01		ldx #$01			ldx	 	#1
.a842		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.a845		a5 59		lda $59				lda 	NSMantissa0+1
.a847		c9 00		cmp #$00			cmp 	#0
.a849		f0 2d		beq $a878			beq 	_RGIRange
.a84b		c9 09		cmp #$09			cmp 	#8+1
.a84d		b0 29		bcs $a878			bcs		_RGIRange
.a84f		3a		dec a				dec 	a
.a850		8d b1 07	sta $07b1			sta 	gxDrawScale
.a853		4c b7 a7	jmp $a7b7			jmp 	_RGICommandLoop
.a856						_RGI_Colour:
.a856		a2 01		ldx #$01			ldx 	#1 							; colour
.a858		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.a85b		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a85d		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.a860		b1 30		lda ($30),y			lda 	(codePtr),y
.a862		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a864		d0 04		bne $a86a			bne 	_RGICDefaultMode
.a866		c8		iny				iny
.a867		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.a86a						_RGICDefaultMode:
.a86a		5a		phy				phy
.a86b		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a86d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a86f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a871		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a874		7a		ply				ply
.a875		4c b7 a7	jmp $a7b7			jmp 	_RGICommandLoop 			; and go round
.a878						_RGIRange:
.a878		4c 52 a4	jmp $a452			jmp 	RangeError
.a87b						_RGICallHandler:
.a87b		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a87e						_RGI_SpriteInstructions:
.a87e		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a880		f0 07		beq $a889			beq 	_RGISpriteOff
.a882		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.a884		f0 13		beq $a899			beq 	_RGISetImage
.a886		4c f0 a7	jmp $a7f0			jmp 	_RGI_Move
.a889						_RGISpriteOff:
.a889		5a		phy				phy
.a88a		a0 01		ldy #$01			ldy 	#1
.a88c		a2 00		ldx #$00			ldx 	#0
.a88e						_RGIDoCommandLoop:
.a88e		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a890		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a893		7a		ply				ply
.a894		b0 e2		bcs $a878			bcs 	_RGIRange
.a896		4c b7 a7	jmp $a7b7			jmp 	_RGICommandLoop
.a899						_RGISetImage:
.a899		a2 01		ldx #$01			ldx 	#1
.a89b		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.a89e		5a		phy				phy
.a89f		aa		tax				tax
.a8a0		a0 00		ldy #$00			ldy 	#0
.a8a2		80 ea		bra $a88e			bra 	_RGIDoCommandLoop
.a8a4						GCGetCoordinatePair:
.a8a4		a2 01		ldx #$01			ldx 	#1
.a8a6		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.a8a9		20 64 93	jsr $9364			jsr 	CheckComma
.a8ac		e8		inx				inx
.a8ad		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.a8b0		60		rts				rts
.a8b1						GCSignedCoordinatePair:
.a8b1		a2 01		ldx #$01			ldx 	#1
.a8b3		20 5f a2	jsr $a25f			jsr 	Evaluate16BitIntegerSigned
.a8b6		20 64 93	jsr $9364			jsr 	CheckComma
.a8b9		e8		inx				inx
.a8ba		20 5f a2	jsr $a25f			jsr 	Evaluate16BitIntegerSigned
.a8bd		60		rts				rts
.a8be						_GCCPRange:
.a8be		4c 52 a4	jmp $a452			jmp 	RangeError
.a8c1						GCLoadAXY:
.a8c1		ad ad 07	lda $07ad			lda 	gxXPos+1
.a8c4		ae ac 07	ldx $07ac			ldx 	gxXPos
.a8c7		ac ae 07	ldy $07ae			ldy 	gxYPos
.a8ca		60		rts				rts
.a8cb						GCCopyPairToStore:
.a8cb		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8cd		8d ac 07	sta $07ac			sta 	gxXPos
.a8d0		a5 61		lda $61				lda 	NSMantissa1+1
.a8d2		8d ad 07	sta $07ad			sta 	gxXPos+1
.a8d5		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8d7		8d ae 07	sta $07ae			sta 	gxYPos
.a8da		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a8db						ResetBitmapSprites:
.a8db		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a8de		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a8e1		60		rts				rts
.a8e2						BitmapCtrl:
.a8e2						BitmapCtrlLoop:
.a8e2		b1 30		lda ($30),y			lda 	(codePtr),y
.a8e4		c8		iny				iny
.a8e5		a2 01		ldx #$01			ldx 	#1
.a8e7		c9 cc		cmp #$cc			cmp 	#KWD_ON
.a8e9		f0 24		beq $a90f			beq 	BitmapSwitch
.a8eb		ca		dex				dex
.a8ec		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a8ee		f0 1f		beq $a90f			beq 	BitmapSwitch
.a8f0		c9 b8		cmp #$b8			cmp 	#KWD_AT  					; set address
.a8f2		f0 13		beq $a907			beq 	BitmapAddress
.a8f4		c9 bc		cmp #$bc			cmp 	#KWD_CLEAR
.a8f6		f0 02		beq $a8fa			beq 	BitmapClear
.a8f8		88		dey				dey
.a8f9		60		rts				rts
.a8fa						BitmapClear:
.a8fa		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get the colour
.a8fd		5a		phy				phy
.a8fe		aa		tax				tax
.a8ff		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a901		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a904		7a		ply				ply
.a905		80 db		bra $a8e2			bra 	BitmapCtrlLoop
.a907						BitmapAddress:
.a907		20 64 a9	jsr $a964			jsr 	GetPageNumber
.a90a		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a90d		80 d3		bra $a8e2			bra 	BitmapCtrlLoop
.a90f						BitmapSwitch:
.a90f		5a		phy				phy
.a910		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a913		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a915		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a918		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a91a		a0 00		ldy #$00			ldy 	#0
.a91c		a2 ff		ldx #$ff			ldx 	#$FF
.a91e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a921		9c ab 07	stz $07ab			stz 	gxFillSolid
.a924		9c ac 07	stz $07ac			stz 	gxXPos
.a927		9c ad 07	stz $07ad			stz 	gxXPos+1
.a92a		9c ae 07	stz $07ae			stz 	gxYPos
.a92d		9c b1 07	stz $07b1			stz 	gxDrawScale
.a930		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a932		a2 00		ldx #$00			ldx 	#0
.a934		a0 00		ldy #$00			ldy 	#0
.a936		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a939		7a		ply				ply
.a93a		80 a6		bra $a8e2			bra 	BitmapCtrlLoop
.a93c						SpritesCtrl:
.a93c						SpritesCtrlLoop:
.a93c		b1 30		lda ($30),y			lda 	(codePtr),y
.a93e		c8		iny				iny
.a93f		a2 01		ldx #$01			ldx 	#1
.a941		c9 cc		cmp #$cc			cmp 	#KWD_ON
.a943		f0 13		beq $a958			beq 	SpriteSwitch
.a945		ca		dex				dex
.a946		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a948		f0 0e		beq $a958			beq 	SpriteSwitch
.a94a		c9 b8		cmp #$b8			cmp 	#KWD_AT
.a94c		f0 02		beq $a950			beq 	SpriteSetAddress
.a94e		88		dey				dey
.a94f		60		rts				rts
.a950						SpriteSetAddress:
.a950		20 64 a9	jsr $a964			jsr 	GetPageNumber
.a953		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a956		80 e4		bra $a93c			bra 	SpritesCtrlLoop
.a958						SpriteSwitch:
.a958		5a		phy				phy
.a959		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a95c		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a95e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a961		7a		ply				ply
.a962		80 d8		bra $a93c			bra 	SpritesCtrlLoop
.a964						GetPageNumber:
.a964		a2 00		ldx #$00			ldx 	#0
.a966		20 4a a2	jsr $a24a			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.a969		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.a96b		29 1f		and #$1f			and 	#$1F
.a96d		05 58		ora $58				ora 	NSMantissa0
.a96f		d0 0c		bne $a97d			bne 	_GPNError
.a971		a5 68		lda $68				lda 	NSMantissa2
.a973		06 60		asl $60				asl 	NSMantissa1					; get page number
.a975		2a		rol a				rol 	a
.a976		06 60		asl $60				asl 	NSMantissa1
.a978		2a		rol a				rol 	a
.a979		06 60		asl $60				asl 	NSMantissa1
.a97b		2a		rol a				rol 	a
.a97c		60		rts				rts
.a97d						_GPNError:
.a97d		a9 07		lda #$07		lda	#7
.a97f		4c 75 93	jmp $9375		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.a982						GfxCommand:
.a982		a2 00		ldx #$00			ldx 	#0
.a984		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; command
.a987		20 64 93	jsr $9364			jsr 	CheckComma
.a98a		e8		inx				inx
.a98b		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; X
.a98e		20 64 93	jsr $9364			jsr 	CheckComma
.a991		e8		inx				inx
.a992		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; Y
.a995		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a997		4a		lsr a				lsr 	a
.a998		d0 12		bne $a9ac			bne 	_GfxError
.a99a		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a99c		b0 0e		bcs $a9ac			bcs 	_GfxError 					; bit 7 should have been zero
.a99e		5a		phy				phy 								; save pos
.a99f		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a9a1		a6 59		ldx $59				ldx 	NSMantissa0+1
.a9a3		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a9a5		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9a8		b0 02		bcs $a9ac			bcs 	_GfxError
.a9aa		7a		ply				ply 								; restore pos and exit.
.a9ab		60		rts				rts
.a9ac						_GfxError:
.a9ac		4c 52 a4	jmp $a452			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.a9af						UnaryHit:
.a9af		fa		plx				plx
.a9b0		a9 36		lda #$36			lda 	#zTemp0
.a9b2		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a9b5		20 64 93	jsr $9364			jsr 	CheckComma
.a9b8		e8		inx				inx
.a9b9		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a9bc		20 5c 93	jsr $935c			jsr		CheckRightBracket
.a9bf		ca		dex				dex 								; fix back up again.
.a9c0		da		phx				phx 								; save X/Y
.a9c1		5a		phy				phy
.a9c2		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a9c4		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9c6		aa		tax				tax
.a9c7		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a9c9		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.a9cc		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a9cd		7a		ply				ply 								; restore XY
.a9ce		fa		plx				plx
.a9cf		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte 					; return the hit result
.a9d2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.a9d3						PaletteCommand:
.a9d3		a2 00		ldx #$00			ldx 	#0
.a9d5		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; colour
.a9d8		20 64 93	jsr $9364			jsr 	CheckComma
.a9db		e8		inx				inx
.a9dc		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; r
.a9df		20 64 93	jsr $9364			jsr 	CheckComma
.a9e2		e8		inx				inx
.a9e3		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; g
.a9e6		20 64 93	jsr $9364			jsr 	CheckComma
.a9e9		e8		inx				inx
.a9ea		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; b
.a9ed		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a9ef		85 36		sta $36				sta 	zTemp0
.a9f1		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a9f3		85 37		sta $37				sta 	zTemp0+1
.a9f5		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a9f7		26 37		rol $37				rol	 	zTemp0+1
.a9f9		06 36		asl $36				asl 	zTemp0
.a9fb		26 37		rol $37				rol	 	zTemp0+1
.a9fd		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a9ff		85 01		sta $01				sta 	1
.aa01		5a		phy				phy
.aa02		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aa04		92 36		sta ($36)			sta 	(zTemp0)
.aa06		a0 01		ldy #$01			ldy 	#1
.aa08		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa0a		91 36		sta ($36),y			sta 	(zTemp0),y
.aa0c		a5 59		lda $59				lda 	NSMantissa0+1
.aa0e		c8		iny				iny
.aa0f		91 36		sta ($36),y			sta 	(zTemp0),y
.aa11		7a		ply				ply
.aa12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.aa13						ClearScreen:
.aa13		5a		phy				phy
.aa14		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.aa16		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.aa19		7a		ply				ply
.aa1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.aa1b						XLoadCommand:
.aa1b		20 c5 8d	jsr $8dc5			jsr 	NewProgram
.aa1e		20 f7 86	jsr $86f7			jsr 	BackloadProgram
.aa21		4c df 87	jmp $87df			jmp 	WarmStart
.aa24						XGoCommand:
.aa24		20 c5 8d	jsr $8dc5			jsr 	NewProgram
.aa27		20 f7 86	jsr $86f7			jsr 	BackloadProgram
.aa2a		4c 50 8f	jmp $8f50			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.aa2d						BootDOS:
.aa2d		a9 3b		lda #$3b	            lda     #dosName & $FF
.aa2f		85 fb		sta $fb		            sta     kernel.args.buf+0
.aa31		a9 aa		lda #$aa	            lda     #dosName >> 8
.aa33		85 fc		sta $fc		            sta     kernel.args.buf+1
.aa35		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.aa38		4c df 87	jmp $87df	            jmp 	WarmStart
>aa3b		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.aa3f						UnaryEvent:
.aa3f		fa		plx				plx
.aa40		20 ca b0	jsr $b0ca			jsr 	TimerToStackX 				; timer in +0
.aa43		e8		inx				inx  								; put reference into +1
.aa44		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm
.aa47		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.aa49		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.aa4b		d0 4c		bne $aa99			bne 	_UEType
.aa4d		e8		inx				inx 								; put the step in +2
.aa4e		20 64 93	jsr $9364			jsr 	CheckComma
.aa51		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.aa54		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.aa57		ca		dex				dex
.aa58		ca		dex				dex
.aa59		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.aa5b		85 36		sta $36				sta 	zTemp0
.aa5d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.aa5f		85 37		sta $37				sta 	zTemp0+1
.aa61		5a		phy				phy
.aa62		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.aa64		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa66		30 2d		bmi $aa95			bmi 	_UEFalse 					; exit if signed.
.aa68		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.aa6a		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa6c		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.aa6e		c8		iny				iny
.aa6f		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa71		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa73		c8		iny				iny
.aa74		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa76		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa78		90 1b		bcc $aa95			bcc 	_UEFalse 					; no, return FALSE.
.aa7a		18		clc				clc
.aa7b		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.aa7d		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa7f		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.aa81		91 36		sta ($36),y			sta 	(zTemp0),y
.aa83		c8		iny				iny
.aa84		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa86		75 62		adc $62,x			adc 	NSMantissa1+2,x
.aa88		91 36		sta ($36),y			sta 	(zTemp0),y
.aa8a		c8		iny				iny
.aa8b		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa8d		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aa8f		91 36		sta ($36),y			sta 	(zTemp0),y
.aa91		7a		ply				ply
.aa92		4c e8 93	jmp $93e8			jmp 	ReturnTrue
.aa95						_UEFalse:
.aa95		7a		ply				ply 								; restore Y
.aa96		4c f3 93	jmp $93f3			jmp 	ReturnFalse 				; and return False
.aa99						_UEType:
.aa99		4c 57 a4	jmp $a457			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.aa9c						Command_BLoad:
.aa9c		20 a7 aa	jsr $aaa7			jsr 	BLOADHandler
.aa9f		c9 00		cmp #$00			cmp 	#0
.aaa1		d0 01		bne $aaa4			bne 	_BLError
.aaa3		60		rts				rts
.aaa4						_BLError:
.aaa4		4c f6 ac	jmp $acf6			jmp 	CLErrorHandler
.aaa7						BLOADHandler:
.aaa7		a2 00		ldx #$00			ldx 	#0
.aaa9		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; file name to load
.aaac		20 64 93	jsr $9364			jsr 	CheckComma 					; consume comma
.aaaf		e8		inx				inx
.aab0		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; load address (full physical address)
.aab3		5a		phy				phy
.aab4		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.aab6		a6 60		ldx $60				ldx 	NSMantissa1
.aab8		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.aabb		b0 50		bcs $ab0d			bcs 	_BLErrorExit 				; error, so fail.
.aabd		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.aac0		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.aac2		20 0f ab	jsr $ab0f			jsr 	BLOpenPhysicalMemory 		; open for access.
.aac5						_BLReadFile:
.aac5		ad b8 07	lda $07b8			lda 	BasicFileStream
.aac8		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aaca		20 fc 83	jsr $83fc			jsr 	KNLReadBlock 				; read next block
.aacd		b0 22		bcs $aaf1			bcs 	_BLFileError 				; file error, which might be EOF.
.aacf		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.aad1		f0 f2		beq $aac5			beq 	_BLReadFile
.aad3		8d b6 07	sta $07b6			sta 	BLCopyCounter 				; counter.
.aad6		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; copy the buffer out here
.aad9		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.aadb						_BLCopyLoop:
.aadb		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.aade		91 3a		sta ($3a),y			sta 	(zTemp2),y
.aae0		c8		iny				iny
.aae1		d0 03		bne $aae6			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.aae3		20 37 ab	jsr $ab37			jsr 	BLAdvancePhysicalMemory
.aae6						_BLNoAdjust:
.aae6		e8		inx				inx
.aae7		ce b6 07	dec $07b6			dec 	BLCopyCounter
.aaea		d0 ef		bne $aadb			bne 	_BLCopyLoop
.aaec		8c b5 07	sty $07b5			sty 	BLYOffset 					; update Y offset
.aaef		80 d4		bra $aac5			bra 	_BLReadFile 				; go ask for more.
.aaf1						_BLFileError:
.aaf1		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.aaf3		d0 0d		bne $ab02			bne 	_BLErrorHandler				; no, it's an actual error
.aaf5		20 31 ab	jsr $ab31			jsr 	BLClosePhysicalMemory 		; close the access.
.aaf8		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.aafb		20 71 84	jsr $8471			jsr 	KNLCloseFile
.aafe		a9 00		lda #$00			lda 	#0 							; and return zero.
.ab00		7a		ply				ply
.ab01		60		rts				rts
.ab02						_BLErrorHandler:
.ab02		48		pha				pha 								; save code
.ab03		20 31 ab	jsr $ab31			jsr 	BLClosePhysicalMemory 		; close access
.ab06		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the open file
.ab09		20 71 84	jsr $8471			jsr 	KNLCloseFile
.ab0c		68		pla				pla 								; get error code
.ab0d						_BLErrorExit:
.ab0d		7a		ply				ply 								; restore position and exit.
.ab0e		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ab0f						BLOpenPhysicalMemory:
.ab0f		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ab11		8d b4 07	sta $07b4			sta 	BLNormalMapping
.ab14		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ab16		8d b5 07	sta $07b5			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ab19		64 3a		stz $3a				stz 	zTemp2
.ab1b		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab1d		29 1f		and #$1f			and 	#$1F
.ab1f		09 60		ora #$60			ora 	#BLAccessPage << 5
.ab21		85 3b		sta $3b				sta 	zTemp2+1
.ab23		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ab25		16 60		asl $60,x			asl 	NSMantissa1,x
.ab27		2a		rol a				rol 	a
.ab28		16 60		asl $60,x			asl 	NSMantissa1,x
.ab2a		2a		rol a				rol 	a
.ab2b		16 60		asl $60,x			asl 	NSMantissa1,x
.ab2d		2a		rol a				rol 	a
.ab2e		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.ab30		60		rts				rts
.ab31						BLClosePhysicalMemory:
.ab31		ad b4 07	lda $07b4			lda 	BLNormalMapping
.ab34		85 0b		sta $0b				sta 	BLAccessPage+8
.ab36		60		rts				rts
.ab37						BLAdvancePhysicalMemory:
.ab37		48		pha				pha
.ab38		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ab3a		a5 3b		lda $3b				lda 	zTemp2+1
.ab3c		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ab3e		d0 06		bne $ab46			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ab40		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ab42		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.ab44		85 3b		sta $3b				sta 	zTemp2+1
.ab46						_BLAPMExit:
.ab46		68		pla				pla
.ab47		60		rts				rts
.07b4						BLNormalMapping:
>07b4								.fill 	1
.07b5						BLYOffset:
>07b5								.fill 	1
.07b6						BLCopyCounter:
>07b6								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.ab48						Command_BSave:
.ab48		20 53 ab	jsr $ab53			jsr 	BSaveHandler
.ab4b		c9 00		cmp #$00			cmp 	#0
.ab4d		d0 01		bne $ab50			bne 	_BSError
.ab4f		60		rts				rts
.ab50						_BSError:
.ab50		4c f6 ac	jmp $acf6			jmp 	CLErrorHandler
.ab53						BSaveHandler:
.ab53		a2 00		ldx #$00			ldx 	#0
.ab55		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; file name to load
.ab58		20 64 93	jsr $9364			jsr 	CheckComma 					; consume comma
.ab5b		e8		inx				inx
.ab5c		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; load address (full physical address)
.ab5f		20 64 93	jsr $9364			jsr 	CheckComma 					; consume comma
.ab62		e8		inx				inx
.ab63		20 42 a2	jsr $a242			jsr 	EvaluateInteger 			; data length (3 bytes only)
.ab66		5a		phy				phy
.ab67		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ab69		a6 60		ldx $60				ldx 	NSMantissa1
.ab6b		20 a2 83	jsr $83a2			jsr 	KNLOpenFileWrite 			; open file for reading
.ab6e		b0 47		bcs $abb7			bcs 	_BSErrorExit 				; error, so fail.
.ab70		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ab73		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ab75		20 0f ab	jsr $ab0f			jsr 	BLOpenPhysicalMemory 		; open for access.
.ab78		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.ab7a		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; used for data offset.
.ab7d						_BSWriteToFileLoop:
.ab7d		38		sec				sec 								; pre decrement count.
.ab7e		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab80		e9 01		sbc #$01			sbc 	#1
.ab82		85 5a		sta $5a				sta 	NSMantissa0+2
.ab84		a5 62		lda $62				lda 	NSMantissa1+2
.ab86		e9 00		sbc #$00			sbc 	#0
.ab88		85 62		sta $62				sta 	NSMantissa1+2
.ab8a		a5 6a		lda $6a				lda 	NSMantissa2+2
.ab8c		e9 00		sbc #$00			sbc 	#0
.ab8e		85 6a		sta $6a				sta 	NSMantissa2+2
.ab90		30 15		bmi $aba7			bmi 	_BSFileComplete 			; undercounted, so exit.
.ab92		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.ab94		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.ab97		e8		inx				inx
.ab98		c8		iny				iny 								; next byte
.ab99		d0 03		bne $ab9e			bne 	_BSNoCheck
.ab9b		20 37 ab	jsr $ab37			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.ab9e						_BSNoCheck:
.ab9e		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.aba0		d0 db		bne $ab7d			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.aba2		20 b9 ab	jsr $abb9			jsr 	BSFlushBuffer 				; yes, flush the buffer
.aba5		80 d6		bra $ab7d			bra 	_BSWriteToFileLoop 			; and keep on going
.aba7						_BSFileComplete:
.aba7		20 b9 ab	jsr $abb9			jsr 	BSFlushBuffer 				; write the buffer remainder.
.abaa		20 31 ab	jsr $ab31			jsr 	BLClosePhysicalMemory 		; close the access.
.abad		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.abb0		20 71 84	jsr $8471			jsr 	KNLCloseFile
.abb3		a9 00		lda #$00			lda 	#0
.abb5		7a		ply				ply
.abb6		60		rts				rts
.abb7						_BSErrorExit:
.abb7		7a		ply				ply
.abb8		60		rts				rts
.abb9						BSFlushBuffer:
.abb9		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.abbb		f0 0d		beq $abca			beq 	_BSFBExit 					; if so, exit.
.abbd		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.abbf		85 36		sta $36				sta 	zTemp0
.abc1		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.abc3		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.abc5		20 b2 ad	jsr $adb2			jsr 	CLWriteByteBlock 			; write it.
.abc8		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.abca						_BSFBExit:
.abca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.abcb						Command_Dir:
.abcb		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.abce		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.abd0		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.abd2		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.abd5		b0 4f		bcs $ac26			bcs     _CDExit
.abd7						_CDEventLoop:
.abd7		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.abda		20 5e 82	jsr $825e			jsr     GetNextEvent
.abdd		b0 f8		bcs $abd7			bcs     _CDEventLoop
.abdf		ad 9b 07	lda $079b			lda     KNLEvent.type
.abe2		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.abe4		f0 40		beq $ac26			beq    	_CDExit
.abe6		20 eb ab	jsr $abeb			jsr     _CDMessages 				; handle various messages
.abe9		80 ec		bra $abd7			bra     _CDEventLoop
.abeb						_CDMessages:
.abeb		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.abed		f0 15		beq $ac04			beq     _CDEVRead
.abef		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.abf1		f0 19		beq $ac0c			beq     _CDEVVolume
.abf3		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.abf5		f0 32		beq $ac29			beq     _CDEVFile
.abf7		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.abf9		f0 70		beq $ac6b			beq     _CDEVFree
.abfb		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.abfd		f0 6e		beq $ac6d			beq     _CDEVEOF
.abff		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.ac01		f0 6a		beq $ac6d			beq     _CDEVEOF
.ac03		60		rts				rts
.ac04						_CDEVRead:
.ac04		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac07		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ac09		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.ac0c						_CDEVVolume:
.ac0c		a9 5b		lda #$5b			lda 	#"["
.ac0e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac11		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ac14		20 75 ac	jsr $ac75			jsr     _CDReadData
.ac17		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.ac1a		a9 5d		lda #$5d			lda 	#"]"
.ac1c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac1f		a9 0d		lda #$0d			lda 	#13
.ac21		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac24		80 de		bra $ac04			bra     _CDEVRead
.ac26						_CDExit:
.ac26		4c df 87	jmp $87df			jmp 	WarmStart
.ac29						_CDEVFile:
.ac29		a9 20		lda #$20			lda 	#32
.ac2b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac2e		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ac31		48		pha				pha
.ac32		20 75 ac	jsr $ac75			jsr     _CDReadData
.ac35		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.ac38		68		pla				pla
.ac39		49 ff		eor #$ff			eor 	#$FF
.ac3b		38		sec				sec
.ac3c		69 10		adc #$10			adc 	#16
.ac3e		aa		tax				tax
.ac3f						_CDEVTab:
.ac3f		a9 20		lda #$20			lda 	#32
.ac41		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac44		ca		dex				dex
.ac45		10 f8		bpl $ac3f			bpl 	_CDEVTab
.ac47		20 8c ac	jsr $ac8c			jsr 	_CDReadExtended
.ac4a		ad 26 05	lda $0526			lda 	lineBuffer
.ac4d		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.ac50		20 ea 97	jsr $97ea			jsr 	ConvertInt16
.ac53		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.ac56		a2 ac		ldx #$ac			ldx 	#_CDEVFMessage >> 8
.ac58		a9 5f		lda #$5f			lda 	#_CDEVFMessage & $FF
.ac5a		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.ac5d		80 a5		bra $ac04			bra     _CDEVRead
.ac5f						_CDEVFMessage:
>ac5f		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>ac67		29 2e 0d 00
.ac6b						_CDEVFree:
.ac6b		80 00		bra $ac6d			bra     _CDEVEOF
.ac6d						_CDEVEOF:
.ac6d		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac70		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ac72		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.ac75						_CDReadData:
.ac75		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac77		a9 26		lda #$26			lda     #lineBuffer & $FF
.ac79		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ac7b		a9 05		lda #$05			lda     #lineBuffer >> 8
.ac7d		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ac7f		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.ac82		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.ac84		9e 26 05	stz $0526,x			stz     lineBuffer,x
.ac87		a9 26		lda #$26			lda 	#lineBuffer & $FF
.ac89		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ac8b		60		rts				rts
.ac8c						_CDReadExtended:
.ac8c		a9 02		lda #$02			lda     #2
.ac8e		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac90		a9 26		lda #$26			lda     #lineBuffer & $FF
.ac92		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ac94		a9 05		lda #$05			lda     #lineBuffer >> 8
.ac96		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ac98		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.ac9b						Command_Drive:
.ac9b		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.ac9e		20 9e 83	jsr $839e			jsr 	KNLSetDrive
.aca1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.aca2						Command_Load:
.aca2		20 a8 ac	jsr $aca8			jsr 	LoadFile
.aca5		4c df 87	jmp $87df			jmp 	WarmStart
.aca8						LoadFile:
.aca8		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; file name to load
.acab		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.acad		a5 36		lda $36				lda 	zTemp0
.acaf		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.acb2		b0 42		bcs $acf6			bcs 	CLErrorHandler 				; error, so fail.
.acb4		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.acb7		20 46 ad	jsr $ad46			jsr     LoadReadByteInit            ; Init reader with the stream
.acba		20 c5 8d	jsr $8dc5			jsr 	NewProgram 					; does the actual NEW.
.acbd		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.acc0						_CLLoop:
.acc0		20 04 ad	jsr $ad04			jsr 	LoadReadLine 				; get next line.
.acc3		f0 10		beq $acd5			beq 	_CLExit 					; end, exit.
.acc5		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.acc8		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.accb		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.acce		f0 f0		beq $acc0			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.acd0		20 ba 87	jsr $87ba			jsr 	EditProgramCode 			; do the editing etc.
.acd3		80 eb		bra $acc0			bra 	_CLLoop
.acd5						_CLExit:
.acd5		ad b8 07	lda $07b8			lda 	BasicFileStream
.acd8		20 71 84	jsr $8471			jsr 	KNLCloseFile
.acdb						CLComplete:
.acdb		a9 e3		lda #$e3			lda 	#_CLCMsg & $FF
.acdd		a2 ac		ldx #$ac			ldx 	#_CLCMsg >> 8
.acdf		20 d4 93	jsr $93d4			jsr 	PrintStringXA
.ace2		60		rts				rts
.ace3						_CLCMsg:
>ace3		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>aceb		2e 0d 00
.acee						CLCloseError:
.acee		48		pha				pha
.acef		ad b8 07	lda $07b8			lda 	BasicFileStream
.acf2		20 71 84	jsr $8471			jsr 	KNLCloseFile
.acf5		68		pla				pla
.acf6						CLErrorHandler:
.acf6		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.acf8		f0 05		beq $acff			beq 	_CLEHNotFound
.acfa		a9 1a		lda #$1a		lda	#26
.acfc		4c 75 93	jmp $9375		jmp	ErrorHandler
.acff						_CLEHNotFound:
.acff		a9 19		lda #$19		lda	#25
.ad01		4c 75 93	jmp $9375		jmp	ErrorHandler
.ad04						LoadReadLine:
.ad04		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ad06		20 20 ad	jsr $ad20			jsr 	LoadReadCharacter
.ad09		f0 14		beq $ad1f			beq 	_LRLExit 					; eof ?
.ad0b		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ad0d		90 f5		bcc $ad04			bcc 	LoadReadLine
.ad0f						_LRLLoop:
.ad0f		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ad12		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ad15		e8		inx				inx
.ad16		20 20 ad	jsr $ad20			jsr 	LoadReadCharacter 			; next line
.ad19		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ad1b		b0 f2		bcs $ad0f			bcs 	_LRLLoop
.ad1d		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ad1f						_LRLExit:
.ad1f		60		rts				rts
.ad20						LoadReadCharacter:
.ad20		da		phx				phx
.ad21		5a		phy				phy
.ad22		ad b7 07	lda $07b7			lda 	LoadEOFFlag 				; already done EOF.
.ad25		d0 0c		bne $ad33			bne 	_LRCIsEOF
.ad27		20 50 ad	jsr $ad50			jsr 	LoadReadByte 				; read a byte
.ad2a		90 09		bcc $ad35			bcc		_LRCExit 					; read okay.
.ad2c		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.ad2e		d0 be		bne $acee			bne 	CLCloseError
.ad30		ce b7 07	dec $07b7			dec 	LoadEOFFlag
.ad33						_LRCIsEOF:
.ad33		a9 00		lda #$00			lda 	#0
.ad35						_LRCExit:
.ad35		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.ad37		d0 02		bne $ad3b			bne 	_LRCNotTab
.ad39		a9 20		lda #$20			lda 	#' '
.ad3b						_LRCNotTab:
.ad3b		c9 0a		cmp #$0a			cmp 	#$0A
.ad3d		d0 02		bne $ad41			bne 	_LRCNotLF
.ad3f		a9 0d		lda #$0d			lda 	#$0D
.ad41						_LRCNotLF:
.ad41		7a		ply				ply
.ad42		fa		plx				plx
.ad43		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.ad45		60		rts				rts
.ad46						LoadReadByteInit:
.ad46		8d b9 07	sta $07b9			sta     LoadFileStream 				; save stream
.ad49		9c ba 07	stz $07ba			stz     LoadNextCharacter 			; reset buffer
.ad4c		9c bb 07	stz $07bb			stz     LoadEndCharacter
.ad4f		60		rts				rts
.ad50						LoadReadByte:
.ad50		da		phx				phx
.ad51		ae ba 07	ldx $07ba			ldx     LoadNextCharacter 					; all data consumed ?
.ad54		ec bb 07	cpx $07bb			cpx     LoadEndCharacter
.ad57		d0 12		bne $ad6b			bne     _KNLRBGetNextByte
.ad59		ad b9 07	lda $07b9			lda     LoadFileStream
.ad5c		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ad5e		20 fc 83	jsr $83fc			jsr     KNLReadBlock 				; read next chunk from the stream
.ad61		b0 0f		bcs $ad72			bcs     _KNLRBError 				; error has occurred on read.
.ad63		8d bb 07	sta $07bb			sta     LoadEndCharacter 						; # read is the number available
.ad66		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.ad68		8e ba 07	stx $07ba			stx     LoadNextCharacter
.ad6b						_KNLRBGetNextByte:
.ad6b		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.ad6e		ee ba 07	inc $07ba			inc     LoadNextCharacter 					; and advance the index
.ad71		18		clc				clc 								; succeeded
.ad72						_KNLRBError:
.ad72		fa		plx				plx
.ad73		60		rts				rts
.07b7						LoadEOFFlag:
>07b7								.fill 	1
.07b8						BasicFileStream:
>07b8								.fill 	1
.07b9						LoadFileStream:
>07b9								.byte   ?
.07ba						LoadNextCharacter:
>07ba								.byte   ?
.07bb						LoadEndCharacter:
>07bb								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.ad74						Command_Save:
.ad74		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; file name to load
.ad77		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ad79		a5 36		lda $36				lda 	zTemp0
.ad7b		20 a2 83	jsr $83a2			jsr 	KNLOpenFileWrite 			; open file for writing
.ad7e		b0 2f		bcs $adaf			bcs 	CSErrorHandler 				; error, so fail.
.ad80		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ad83		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad85		85 30		sta $30				sta 	codePtr
.ad87		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad89		85 31		sta $31				sta 	codePtr+1
.ad8b						_CSLoop:
.ad8b		b2 30		lda ($30)			lda 	(codePtr)
.ad8d		f0 17		beq $ada6			beq 	_CSExit
.ad8f		20 d3 ad	jsr $add3			jsr 	CSGetCleanLine
.ad92		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.ad94		85 36		sta $36				sta 	zTemp0
.ad96		20 b2 ad	jsr $adb2			jsr 	CLWriteByteBlock 			; write the block out.
.ad99		18		clc				clc
.ad9a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ad9c		65 30		adc $30				adc 	codePtr
.ad9e		85 30		sta $30				sta 	codePtr
.ada0		90 02		bcc $ada4			bcc 	_CREExit
.ada2		e6 31		inc $31				inc 	codePtr+1 					; carry
.ada4						_CREExit:
.ada4		80 e5		bra $ad8b			bra 	_CSLoop
.ada6						_CSExit:
.ada6		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close file
.ada9		20 71 84	jsr $8471			jsr 	KNLCloseFile
.adac		4c db ac	jmp $acdb			jmp 	CLComplete 					; display complete message.
.adaf						CSErrorHandler:
.adaf		4c f6 ac	jmp $acf6			jmp 	CLErrorHandler
.adb2						CLWriteByteBlock:
.adb2		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.adb4		f0 1c		beq $add2			beq 	_CLWBBExit					; if so, exit
.adb6		ad b8 07	lda $07b8			lda 	BasicFileStream 			; stream to write, count in X
.adb9		20 37 84	jsr $8437			jsr 	KNLWriteBlock 				; call one write attempt
.adbc		b0 f1		bcs $adaf			bcs 	CSErrorHandler 				; error occurred
.adbe		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.adc0		8a		txa				txa 								; subtract bytes written from X, total count.
.adc1		38		sec				sec
.adc2		e5 38		sbc $38				sbc 	zTemp1
.adc4		aa		tax				tax
.adc5		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.adc6		a5 36		lda $36				lda 	zTemp0
.adc8		65 38		adc $38				adc 	zTemp1
.adca		85 36		sta $36				sta 	zTemp0
.adcc		90 e4		bcc $adb2			bcc 	CLWriteByteBlock
.adce		e6 37		inc $37				inc 	zTemp0+1
.add0		80 e0		bra $adb2			bra 	CLWriteByteBlock 			; and retry write out.
.add2						_CLWBBExit:
.add2		60		rts				rts
.add3						CSGetCleanLine:
.add3		a9 00		lda #$00			lda 	#0 							; no indent.
.add5		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.add8		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.adda		a0 00		ldy #$00			ldy 	#0
.addc						_CSClean:
.addc		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.addf		f0 09		beq $adea			beq 	_CSDoneClean
.ade1		30 04		bmi $ade7			bmi 	_CSIgnoreCharacter
.ade3		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.ade6		e8		inx				inx
.ade7						_CSIgnoreCharacter:
.ade7		c8		iny				iny
.ade8		80 f2		bra $addc			bra 	_CSClean
.adea						_CSDoneClean:
.adea		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.adec		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.adef		e8		inx				inx
.adf0		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.adf3		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.adf5		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.adf7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.adf8						Command_Try:
.adf8		b1 30		lda ($30),y			lda 	(codePtr),y
.adfa		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.adfc		d0 0c		bne $ae0a			bne 	_TrySyntax
.adfe		c8		iny				iny 								; get second
.adff		b1 30		lda ($30),y			lda 	(codePtr),y
.ae01		c8		iny				iny 								; and consume it.
.ae02		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.ae04		f0 09		beq $ae0f			beq 	_TryBLoad
.ae06		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.ae08		f0 0a		beq $ae14			beq 	_TryBSave
.ae0a						_TrySyntax:
.ae0a		a9 02		lda #$02		lda	#2
.ae0c		4c 75 93	jmp $9375		jmp	ErrorHandler
.ae0f						_TryBLoad:
.ae0f		20 a7 aa	jsr $aaa7			jsr 	BLOADHandler
.ae12		80 03		bra $ae17			bra 	_TryExit
.ae14						_TryBSave:
.ae14		20 53 ab	jsr $ab53			jsr 	BSaveHandler
.ae17						_TryExit:
.ae17		48		pha				pha 								; save result
.ae18		b1 30		lda ($30),y			lda 	(codePtr),y
.ae1a		c8		iny				iny
.ae1b		c9 db		cmp #$db			cmp 	#KWD_TO
.ae1d		d0 eb		bne $ae0a			bne 	_TrySyntax
.ae1f		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.ae21		20 c9 9c	jsr $9cc9			jsr 	EvaluateTerm
.ae24		b5 50		lda $50,x			lda 	NSStatus,x
.ae26		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.ae28		d0 e0		bne $ae0a			bne		_TrySyntax
.ae2a		68		pla				pla 								; error code.
.ae2b		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.ae2d		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.ae30		ca		dex				dex
.ae31		20 dd 8b	jsr $8bdd			jsr 	AssignVariable 				; do the assign and exit
.ae34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e807						m
.ae35						Command_VERIFY:
.ae35		20 2d a2	jsr $a22d			jsr 	EvaluateString 				; file name to verify
.ae38		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae3a		a5 36		lda $36				lda 	zTemp0
.ae3c		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.ae3f		b0 4b		bcs $ae8c			bcs 	_CVErrorHandler 			; error, so fail.
.ae41		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ae44		20 46 ad	jsr $ad46			jsr     LoadReadByteInit            ; Init reader with the stream
.ae47		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae4a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae4c		85 30		sta $30				sta 	codePtr
.ae4e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae50		85 31		sta $31				sta 	codePtr+1
.ae52						_CVLoop:
.ae52		20 04 ad	jsr $ad04			jsr 	LoadReadLine 				; get next line.
.ae55		f0 27		beq $ae7e			beq 	_CVExit 					; end, exit.
.ae57		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae5a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae5d		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae60		f0 f0		beq $ae52			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.ae62		a0 00		ldy #$00			ldy 	#0 							; start compare
.ae64						_CVCompareLoop:
.ae64		b1 30		lda ($30),y			lda 	(codePtr),y
.ae66		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.ae69		d0 1c		bne $ae87			bne 	_CVCompareError
.ae6b		c8		iny				iny
.ae6c		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.ae6f		d0 f3		bne $ae64			bne 	_CVCompareLoop
.ae71		18		clc				clc
.ae72		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae74		65 30		adc $30				adc 	codePtr
.ae76		85 30		sta $30				sta 	codePtr
.ae78		90 02		bcc $ae7c			bcc 	_CREExit
.ae7a		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae7c						_CREExit:
.ae7c		80 d4		bra $ae52			bra 	_CVLoop
.ae7e						_CVExit:
.ae7e		ad b8 07	lda $07b8			lda 	BasicFileStream
.ae81		20 71 84	jsr $8471			jsr 	KNLCloseFile
.ae84		4c db ac	jmp $acdb			jmp 	CLComplete
.ae87						_CVCompareError:
.ae87		a9 1b		lda #$1b		lda	#27
.ae89		4c 75 93	jmp $9375		jmp	ErrorHandler
.ae8c						_CVErrorHandler:
.ae8c		4c f6 ac	jmp $acf6			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.ae8f						UnaryJoyX:
.ae8f		18		clc				clc
.ae90		80 01		bra $ae93			bra 	JoyMain
.ae92						UnaryJoyY:
.ae92		38		sec				sec
.ae93						JoyMain:
.ae93		fa		plx				plx 								; get pos
.ae94		08		php				php 								; save carry (set for Y)
.ae95		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ae98		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.ae9b		20 77 84	jsr $8477			jsr 	KNLReadController 			; read the controller.
.ae9e		28		plp				plp
.ae9f		b0 02		bcs $aea3			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aea1		4a		lsr a				lsr 	a
.aea2		4a		lsr a				lsr 	a
.aea3						_JMNoShift:
.aea3		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aea4		b0 07		bcs $aead			bcs 	JMIsLeft
.aea6		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aea7		b0 07		bcs $aeb0			bcs 	JMIsRight
.aea9		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; zero result
.aeac		60		rts				rts
.aead						JMIsLeft:
.aead		4c e8 93	jmp $93e8			jmp 	ReturnTrue
.aeb0						JMIsRight:
.aeb0		a9 01		lda #$01			lda 	#1
.aeb2		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.aeb5		60		rts				rts
.aeb6						UnaryJoyB:
.aeb6		fa		plx				plx 								; get pos
.aeb7		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aeba		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.aebd		20 77 84	jsr $8477			jsr 	KNLReadController 			; read the controller.
.aec0		29 10		and #$10			and 	#$10
.aec2		d0 e9		bne $aead			bne 	JMIsLeft
.aec4		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero
.aec7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.aec8						MCCommand:
.aec8		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.aeca		48		pha				pha
.aecb		64 01		stz $01				stz 	1
.aecd		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.aed0		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.aed2		8d bc 07	sta $07bc			sta 	DMAControlByte
.aed5		20 83 af	jsr $af83			jsr 	MCPosition 					; start position
.aed8		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.aeda		20 54 af	jsr $af54			jsr 	MCCopyAddress
.aedd		a2 08		ldx #$08			ldx 	#8
.aedf		20 54 af	jsr $af54			jsr 	MCCopyAddress
.aee2		b1 30		lda ($30),y			lda 	(codePtr),y
.aee4		c8		iny				iny
.aee5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.aee7		f0 09		beq $aef2			beq 	_MCSize1D
.aee9		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.aeeb		f0 11		beq $aefe			beq 	_MCRect2D
.aeed						_MCSyntax:
.aeed		a9 02		lda #$02		lda	#2
.aeef		4c 75 93	jmp $9375		jmp	ErrorHandler
.aef2						_MCSize1D:
.aef2		a2 00		ldx #$00			ldx 	#0 							; get size
.aef4		20 42 a2	jsr $a242			jsr 	EvaluateInteger
.aef7		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.aef9		20 54 af	jsr $af54			jsr 	MCCopyAddress
.aefc		80 24		bra $af22			bra 	_MCDestination
.aefe						_MCRect2D:
.aefe		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.af00		20 71 af	jsr $af71			jsr 	MCEvalCopyData16
.af03		20 64 93	jsr $9364			jsr 	CheckComma
.af06		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.af08		20 71 af	jsr $af71			jsr 	MCEvalCopyData16
.af0b		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.af0d		20 6c 93	jsr $936c			jsr 	CheckNextA
.af10		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.af12		20 71 af	jsr $af71			jsr 	MCEvalCopyData16
.af15		a2 12		ldx #$12			ldx 	#$12
.af17		20 78 af	jsr $af78			jsr 	MCCopyData16
.af1a		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.af1d		09 02		ora #$02			ora 	#$02
.af1f		8d bc 07	sta $07bc			sta 	DMAControlByte
.af22						_MCDestination:
.af22		b1 30		lda ($30),y			lda 	(codePtr),y
.af24		c8		iny				iny
.af25		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.af27		f0 0e		beq $af37			beq 	_MCDestPoke
.af29		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.af2b		d0 c0		bne $aeed			bne 	_MCSyntax
.af2d		20 83 af	jsr $af83			jsr 	MCPosition 					; get target address
.af30		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.af32		20 54 af	jsr $af54			jsr 	MCCopyAddress
.af35		80 0e		bra $af45			bra 	_MCDoDMA 					; and we can go.
.af37						_MCDestPoke:
.af37		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; POKE what
.af3a		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.af3d		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.af40		09 04		ora #$04			ora 	#$04
.af42		8d bc 07	sta $07bc			sta 	DMAControlByte
.af45						_MCDoDMA:
.af45		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set the DMA Control byte to go !
.af48		8d 00 df	sta $df00			sta 	$DF00
.af4b						_MCWaitBUSD:
.af4b		ad 01 df	lda $df01			lda 	$DF01
.af4e		30 fb		bmi $af4b			bmi 	_MCWaitBUSD
.af50		68		pla				pla 								; restore I/O.
.af51		85 01		sta $01				sta 	1
.af53		60		rts				rts
.af54						MCCopyAddress:
.af54		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.af56		29 fc		and #$fc			and 	#$FC
.af58		05 70		ora $70				ora 	NSMantissa3
.af5a		d0 10		bne $af6c			bne 	_MCRange
.af5c		a5 58		lda $58				lda 	NSMantissa0
.af5e		9d 00 df	sta $df00,x			sta 	$DF00,x
.af61		a5 60		lda $60				lda 	NSMantissa1
.af63		9d 01 df	sta $df01,x			sta 	$DF01,x
.af66		a5 68		lda $68				lda 	NSMantissa2
.af68		9d 02 df	sta $df02,x			sta 	$DF02,x
.af6b		60		rts				rts
.af6c						_MCRange:
.af6c		a9 04		lda #$04		lda	#4
.af6e		4c 75 93	jmp $9375		jmp	ErrorHandler
.af71						MCEvalCopyData16:
.af71		da		phx				phx
.af72		a2 00		ldx #$00			ldx 	#0
.af74		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger
.af77		fa		plx				plx
.af78						MCCopyData16:
.af78		a5 58		lda $58				lda 	NSMantissa0
.af7a		9d 00 df	sta $df00,x			sta 	$DF00,x
.af7d		a5 60		lda $60				lda 	NSMantissa1
.af7f		9d 01 df	sta $df01,x			sta 	$DF01,x
.af82		60		rts				rts
.af83						MCPosition:
.af83		a2 00		ldx #$00			ldx 	#0 							; get start address.
.af85		b1 30		lda ($30),y			lda 	(codePtr),y
.af87		c9 b8		cmp #$b8			cmp 	#KWD_AT
.af89		f0 04		beq $af8f			beq 	_MCPAt
.af8b		20 42 a2	jsr $a242			jsr 	EvaluateInteger
.af8e		60		rts				rts
.af8f						_MCPAt:
.af8f		c8		iny				iny
.af90		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; X position
.af93		48		pha				pha
.af94		20 64 93	jsr $9364			jsr 	CheckComma
.af97		e8		inx				inx
.af98		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; Y position
.af9b		ca		dex				dex
.af9c		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.af9e		64 58		stz $58				stz 	NSMantissa0
.afa0		64 68		stz $68				stz 	NSMantissa2
.afa2		64 70		stz $70				stz 	NSMantissa3
.afa4		46 60		lsr $60				lsr 	NSMantissa1
.afa6		66 58		ror $58				ror 	NSMantissa0
.afa8		46 60		lsr $60				lsr 	NSMantissa1
.afaa		66 58		ror $58				ror 	NSMantissa0
.afac		68		pla				pla
.afad		18		clc				clc
.afae		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.afb0		85 58		sta $58				sta 	NSMantissa0
.afb2		a5 60		lda $60				lda 	NSMantissa1
.afb4		65 59		adc $59				adc 	NSMantissa0+1
.afb6		85 60		sta $60				sta 	NSMantissa1
.afb8		90 02		bcc $afbc			bcc 	_MCPNoCarry
.afba		e6 68		inc $68				inc 	NSMantissa2
.afbc						_MCPNoCarry:
.afbc		ad da 07	lda $07da			lda 	gxBasePage
.afbf		85 69		sta $69				sta 	NSMantissa2+1
.afc1		64 59		stz $59				stz 	NSMantissa0+1
.afc3		64 61		stz $61				stz 	NSMantissa1+1
.afc5		64 71		stz $71				stz 	NSMantissa3+1
.afc7		a2 01		ldx #$01			ldx 	#1
.afc9		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight
.afcc		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight
.afcf		20 ee a2	jsr $a2ee			jsr 	NSMShiftRight
.afd2		a2 00		ldx #$00			ldx 	#0
.afd4		20 75 96	jsr $9675			jsr 	AddTopTwoStack
.afd7		60		rts				rts
.07bc						DMAControlByte:
>07bc								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.afd8						MouseStatus:
.afd8		a9 ff		lda #$ff	        lda     #255
.afda		80 02		bra $afde	        bra     MouseCommand
.afdc						MouseDeltaStatus:
.afdc		a9 00		lda #$00	        lda     #0
.afde						MouseCommand:
.afde		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.afe1		a2 00		ldx #$00	        ldx     #0
.afe3						_MouseCommandLoop:
.afe3		da		phx		        phx                                 ; save slot.
.afe4		20 7d 98	jsr $987d	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.afe7		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.afe9		c9 20		cmp #$20	        cmp     #NSBIsReference
.afeb		d0 60		bne $b04d	        bne     _MouseNotRef
.afed		b1 30		lda ($30),y			lda 	(codePtr),y
.afef		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.aff1		d0 01		bne $aff4	        bne     _MouseNoSkipComma
.aff3		c8		iny		        iny
.aff4						_MouseNoSkipComma:
.aff4		fa		plx		        plx                                 ; restore X
.aff5		5a		phy		        phy                                 ; save Y
.aff6		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.aff8		85 36		sta $36		        sta     zTemp0
.affa		a5 60		lda $60		        lda     NSMantissa1
.affc		85 37		sta $37		        sta     zTemp0+1
.affe		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b000		a9 00		lda #$00	        lda     #0
.b002		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b004		88		dey		        dey
.b005		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b007		88		dey		        dey
.b008		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b00a		88		dey		        dey
.b00b		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b00e		30 12		bmi $b022	        bmi     _MouseMouseCommand
.b010						_MouseMDeltaCommand:
.b010		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b013		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b015		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b018		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b01a		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b01d		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b020		80 0a		bra $b02c	        bra     _MouseProcessData
.b022						_MouseMouseCommand:
.b022		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b025		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b027		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b02a		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b02c						_MouseProcessData:
.b02c		b1 36		lda ($36),y	        lda     (zTemp0),y
.b02e		10 15		bpl $b045	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b030		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b031		a9 00		lda #$00	        lda     #0
.b033		f2 36		sbc ($36)	        sbc     (zTemp0)
.b035		92 36		sta ($36)	        sta     (zTemp0)
.b037		a9 00		lda #$00	        lda     #0
.b039		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b03b		91 36		sta ($36),y	        sta     (zTemp0),y
.b03d		a0 03		ldy #$03	        ldy     #3
.b03f		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b041		09 80		ora #$80	        ora     #$80
.b043		91 36		sta ($36),y	        sta     (zTemp0),y
.b045						_MouseDataPos:
.b045		7a		ply		        ply                                 ; restore Y.
.b046		e8		inx		        inx                                 ; next entry
.b047		e8		inx		        inx
.b048		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b04a		d0 97		bne $afe3	        bne     _MouseCommandLoop
.b04c		60		rts		        rts
.b04d						_MouseNotRef:
.b04d		a9 07		lda #$07		lda	#7
.b04f		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b052						CommandSetDate:
.b052		a9 03		lda #$03			lda 	#3
.b054		80 02		bra $b058			bra 	CSDTMain
.b056						CommandSetTime:
.b056		a9 00		lda #$00			lda 	#0
.b058						CSDTMain:
.b058		48		pha				pha 								; save table offsets 0 or 3
.b059		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b05b		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.b05e		20 64 93	jsr $9364			jsr 	CheckComma
.b061		e8		inx				inx
.b062		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.b065		20 64 93	jsr $9364			jsr 	CheckComma
.b068		e8		inx				inx
.b069		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger
.b06c		68		pla				pla 								; table offset in Y, saving Y
.b06d		5a		phy				phy
.b06e		a8		tay				tay
.b06f		a2 00		ldx #$00			ldx 	#0 							; first number
.b071		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b073		48		pha				pha
.b074		64 01		stz $01				stz 	1
.b076						_CSDTCopy:
.b076		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b078		d9 ba b0	cmp $b0ba,y			cmp 	RTCWMinValues,y 			; check range
.b07b		90 1b		bcc $b098			bcc 	_CSDTRange
.b07d		d9 c0 b0	cmp $b0c0,y			cmp 	RTCWMaxValues,y
.b080		b0 16		bcs $b098			bcs 	_CSDTRange
.b082		20 9d b0	jsr $b09d			jsr 	CSDTDecimalToBCD
.b085		da		phx				phx 								; save X
.b086		be b4 b0	ldx $b0b4,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b089		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b08c		fa		plx				plx 								; restore X
.b08d		e8		inx				inx 								; next number
.b08e		c8		iny				iny 								; next table entries
.b08f		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b091		d0 e3		bne $b076			bne 	_CSDTCopy
.b093		68		pla				pla 								; restore I/O space
.b094		85 01		sta $01				sta 	1
.b096		7a		ply				ply 								; restore code pos and exit.
.b097		60		rts				rts
.b098						_CSDTRange:
.b098		a9 04		lda #$04		lda	#4
.b09a		4c 75 93	jmp $9375		jmp	ErrorHandler
.b09d						CSDTDecimalToBCD:
.b09d		da		phx				phx 								; 10 count in X
.b09e		a2 00		ldx #$00			ldx 	#0
.b0a0						_CSDTDBLoop:
.b0a0		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b0a2		90 05		bcc $b0a9			bcc 	_CSDTDBExit
.b0a4		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b0a6		e8		inx				inx 								; one more 10s.
.b0a7		80 f7		bra $b0a0			bra 	_CSDTDBLoop
.b0a9						_CSDTDBExit:
.b0a9		85 36		sta $36				sta 	zTemp0 						; units
.b0ab		8a		txa				txa 								; 10s x 16
.b0ac		0a		asl a				asl 	a
.b0ad		0a		asl a				asl 	a
.b0ae		0a		asl a				asl 	a
.b0af		0a		asl a				asl 	a
.b0b0		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b0b2		fa		plx				plx
.b0b3		60		rts				rts
.b0b4						RTCWOffset:
>b0b4		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b0ba						RTCWMinValues:
>b0ba		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b0c0						RTCWMaxValues:
>b0c0		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b0c6						UnaryTimer:
.b0c6		fa		plx				plx
.b0c7		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.b0ca						TimerToStackX:
.b0ca		20 d5 a2	jsr $a2d5			jsr 	NSMSetZero 					; zero result
.b0cd		64 01		stz $01				stz 	1 							; access I/O
.b0cf		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b0d2		95 58		sta $58,x			sta 	NSMantissa0,x
.b0d4		ad 5a d6	lda $d65a			lda 	$D65A
.b0d7		95 60		sta $60,x			sta 	NSMantissa1,x
.b0d9		ad 5b d6	lda $d65b			lda 	$D65B
.b0dc		95 68		sta $68,x			sta 	NSMantissa2,x
.b0de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b0df						UnaryGetTime:
.b0df		a9 00		lda #$00			lda 	#0
.b0e1		80 02		bra $b0e5			bra 	UGDTMain
.b0e3						UnaryGetDate:
.b0e3		a9 03		lda #$03			lda 	#3
.b0e5						UGDTMain:
.b0e5		fa		plx				plx 								; get stack position back
.b0e6		48		pha				pha 								; save table offset
.b0e7		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger			; ignored parameter
.b0ea		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; closing )
.b0ed		68		pla				pla 								; table offset in A
.b0ee		5a		phy				phy 								; saving Y
.b0ef		a8		tay				tay 								; table offset in Y
.b0f0		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b0f2		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.b0f5		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b0f7		48		pha				pha
.b0f8		64 01		stz $01				stz 	1
.b0fa		20 0d b1	jsr $b10d			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b0fd		20 08 b1	jsr $b108			jsr 	UGDTColonDigit
.b100		20 08 b1	jsr $b108			jsr 	UGDTColonDigit
.b103		68		pla				pla 								; restore I/O select
.b104		85 01		sta $01				sta 	1
.b106		7a		ply				ply  								; restore code position
.b107		60		rts				rts
.b108						UGDTColonDigit:
.b108		a9 3a		lda #$3a			lda 	#':'
.b10a		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.b10d						UGDTDigit:
.b10d		da		phx				phx 								; save X
.b10e		b9 2d b1	lda $b12d,y			lda 	RTCROffset,y 				; get offset in RTC register
.b111		aa		tax				tax
.b112		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b115		39 33 b1	and $b133,y			and 	RTCRMask,y 					; and with Mask.
.b118		fa		plx				plx
.b119		48		pha				pha 								; output in BCD
.b11a		4a		lsr a				lsr 	a
.b11b		4a		lsr a				lsr 	a
.b11c		4a		lsr a				lsr 	a
.b11d		4a		lsr a				lsr 	a
.b11e		09 30		ora #$30			ora 	#48
.b120		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.b123		68		pla				pla
.b124		29 0f		and #$0f			and 	#15
.b126		09 30		ora #$30			ora 	#48
.b128		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.b12b		c8		iny				iny
.b12c		60		rts				rts
.b12d						RTCROffset:
>b12d		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b133						RTCRMask:
>b133		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b139						AscGet:
.b139		fa		plx				plx 								; restore stack pos
.b13a						AscGet2:
.b13a		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.b13d		20 9e 81	jsr $819e			jsr 	KNLGetSingleCharacter
.b140		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.b143		60		rts				rts
.b144						_AGBreak:
.b144		a9 01		lda #$01		lda	#1
.b146		4c 75 93	jmp $9375		jmp	ErrorHandler
.b149						AscInkey:
.b149		fa		plx				plx 								; restore stack pos
.b14a						AscInkey2:
.b14a		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.b14d		20 7c 81	jsr $817c			jsr 	KNLGetKeyPressed
.b150		20 d7 a2	jsr $a2d7			jsr 	NSMSetByte
.b153		60		rts				rts
.b154						ChrGet:
.b154		fa		plx				plx
.b155		20 3a b1	jsr $b13a			jsr 	AscGet2
.b158		4c 5f b1	jmp $b15f			jmp 	GetInkeyToString
.b15b						ChrInkey:
.b15b		fa		plx				plx
.b15c		20 4a b1	jsr $b14a			jsr 	AscInkey2
.b15f						GetInkeyToString:
.b15f		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b161		f0 0b		beq $b16e			beq 	_GKISNull
.b163		48		pha				pha
.b164		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b166		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.b169		68		pla				pla 								; write number to it
.b16a		20 1f b4	jsr $b41f			jsr 	StringTempWrite
.b16d		60		rts				rts
.b16e						_GKISNull:
.b16e		a9 00		lda #$00			lda 	#0
.b170		20 e6 b3	jsr $b3e6			jsr 	StringTempAllocate
.b173		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b174						KeyDown:
.b174		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process outstanding events.
.b177		fa		plx				plx 								; restore stack pos
.b178		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; key to check.
.b17b		48		pha				pha 								; check right bracket.
.b17c		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.b17f		68		pla				pla
.b180		20 8a 83	jsr $838a			jsr 	KeyboardConvertXA 			; get offset and mask.
.b183		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b186		f0 03		beq $b18b			beq 	_KeyUp
.b188		4c e8 93	jmp $93e8			jmp 	ReturnTrue
.b18b		4c f3 93	jmp $93f3	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b18e						Unary_Random:
.b18e		fa		plx				plx
.b18f		20 df b1	jsr $b1df			jsr 	URCopyToMantissa  			; put random # in mantissa
.b192		b1 30		lda ($30),y			lda 	(codePtr),y
.b194		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b196		f0 08		beq $b1a0			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b198		e8		inx				inx
.b199		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b19c		ca		dex				dex
.b19d		20 3a 95	jsr $953a			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b1a0						_URNoModulus:
.b1a0		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b1a2		74 78		stz $78,x			stz 	NSExponent,x
.b1a4		20 5c 93	jsr $935c			jsr 	CheckRightBracket
.b1a7		60		rts				rts
.b1a8						Unary_Rnd:
.b1a8		fa		plx				plx
.b1a9		20 23 a2	jsr $a223			jsr 	EvaluateNumber 				; number to use.
.b1ac		20 5c 93	jsr $935c			jsr 	CheckRightBracket 			; closing bracket
.b1af		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b1b1		10 20		bpl $b1d3			bpl 	_URDontSeed
.b1b3		a5 01		lda $01				lda 	1 							; switch to page 0
.b1b5		48		pha				pha
.b1b6		64 01		stz $01				stz 	1
.b1b8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b1ba		49 17		eor #$17			eor 	#$17
.b1bc		8d a4 d6	sta $d6a4			sta 	$D6A4
.b1bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1c1		49 a5		eor #$a5			eor 	#$A5
.b1c3		8d a5 d6	sta $d6a5			sta 	$D6A5
.b1c6		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b1c8		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1cb		a9 01		lda #$01			lda 	#1
.b1cd		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1d0		68		pla				pla
.b1d1		85 01		sta $01				sta 	1
.b1d3						_URDontSeed:
.b1d3		20 df b1	jsr $b1df			jsr 	URCopyToMantissa 			; copy into mantissa
.b1d6		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b1d8		95 78		sta $78,x			sta 	NSExponent,x
.b1da		a9 08		lda #$08			lda 	#NSTFloat
.b1dc		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b1de		60		rts				rts
.b1df						URCopyToMantissa:
.b1df		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b1e1		48		pha				pha
.b1e2		64 01		stz $01				stz 	1
.b1e4		a9 01		lda #$01			lda 	#1
.b1e6		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b1e9		ad a4 d6	lda $d6a4			lda 	$D6A4
.b1ec		95 58		sta $58,x			sta 	NSMantissa0,x
.b1ee		ad a5 d6	lda $d6a5			lda 	$D6A5
.b1f1		95 60		sta $60,x			sta 	NSMantissa1,x
.b1f3		ad a4 d6	lda $d6a4			lda 	$D6A4
.b1f6		95 68		sta $68,x			sta 	NSMantissa2,x
.b1f8		ad a5 d6	lda $d6a5			lda 	$D6A5
.b1fb		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b1fd		95 70		sta $70,x			sta 	NSMantissa3,x
.b1ff		68		pla				pla
.b200		85 01		sta $01				sta 	1
.b202		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b203						PingCommand:
.b203		5a		phy				phy 								; save pos
.b204		a9 01		lda #$01			lda 	#1 						; push channel.
.b206		48		pha				pha
.b207		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b209		a2 06		ldx #$06			ldx 	#6 						; length
.b20b		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b20d		80 24		bra $b233			bra 	SoundEffectCommand
.b20f						ZapCommand:
.b20f		5a		phy				phy 								; save pos
.b210		a9 01		lda #$01			lda 	#1 						; push channel.
.b212		48		pha				pha
.b213		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b215		a2 0a		ldx #$0a			ldx 	#10 						; length
.b217		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b219		80 18		bra $b233			bra 	SoundEffectCommand
.b21b						ShootCommand:
.b21b		5a		phy				phy 								; save pos
.b21c		a9 03		lda #$03			lda 	#3 						; push channel.
.b21e		48		pha				pha
.b21f		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b221		a2 04		ldx #$04			ldx 	#4 						; length
.b223		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b225		80 0c		bra $b233			bra 	SoundEffectCommand
.b227						Explode:
.b227		5a		phy				phy 								; save pos
.b228		a9 03		lda #$03			lda 	#3 						; push channel.
.b22a		48		pha				pha
.b22b		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b22d		a2 0a		ldx #$0a			ldx 	#10 						; length
.b22f		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b231		80 00		bra $b233			bra 	SoundEffectCommand
.b233						SoundEffectCommand:
.b233		8d bd 07	sta $07bd			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b236		9c be 07	stz $07be			stz 	SoundCommandBlock+1
.b239		a9 0f		lda #$0f			lda 	#15
.b23b		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2
.b23e		8e c0 07	stx $07c0			stx 	SoundCommandBlock+3
.b241		8c c1 07	sty $07c1			sty 	SoundCommandBlock+4
.b244		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b247		68		pla				pla
.b248		09 10		ora #$10			ora 	#$10  						; execute command $11
.b24a		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b24c		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b24e		20 6b 80	jsr $806b			jsr 	SNDCommand
.b251		7a		ply				ply
.b252		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b253						UnaryPlaying:
.b253		fa		plx				plx
.b254		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; get channel #
.b257		48		pha				pha
.b258		20 5c 93	jsr $935c			jsr		CheckRightBracket
.b25b		68		pla				pla
.b25c		c9 04		cmp #$04			cmp 	#4
.b25e		b0 0c		bcs $b26c			bcs 	_UPNotPlaying
.b260		09 20		ora #$20			ora 	#$20 						; query playing ?
.b262		20 6b 80	jsr $806b			jsr 	SNDCommand
.b265		c9 00		cmp #$00			cmp 	#0
.b267		f0 03		beq $b26c			beq 	_UPNotPlaying
.b269		4c e8 93	jmp $93e8			jmp 	ReturnTrue
.b26c						_UPNotPlaying:
.b26c		4c f3 93	jmp $93f3			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b26f						SoundCommand:
.b26f		b1 30		lda ($30),y			lda 	(codePtr),y
.b271		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b273		d0 09		bne $b27e			bne 	_SNDMain
.b275		c8		iny				iny 								; skip OFF
.b276		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b278		5a		phy				phy
.b279		20 6b 80	jsr $806b			jsr 	SNDCommand
.b27c		7a		ply				ply
.b27d		60		rts				rts
.b27e						_SNDMain:
.b27e		a2 00		ldx #$00			ldx 	#0
.b280		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; channel
.b283		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b285		b0 4b		bcs $b2d2			bcs 	_SndError
.b287		e8		inx				inx 								; do the rest in slot 1.
.b288		20 64 93	jsr $9364			jsr 	CheckComma
.b28b		20 55 a2	jsr $a255			jsr 	Evaluate16BitInteger 		; Pitch
.b28e		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b290		c9 10		cmp #$10			cmp 	#16
.b292		b0 3e		bcs $b2d2			bcs 	_SndError
.b294		8d be 07	sta $07be			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b297		b5 58		lda $58,x			lda 	NSMantissa0,x
.b299		8d bd 07	sta $07bd			sta 	SoundCommandBlock
.b29c		20 64 93	jsr $9364			jsr 	CheckComma
.b29f		20 70 a2	jsr $a270			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b2a2		8d c0 07	sta $07c0			sta 	SoundCommandBlock+3
.b2a5		a9 0f		lda #$0f			lda 	#15
.b2a7		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b2aa		9c c1 07	stz $07c1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b2ad		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b2b0		b1 30		lda ($30),y			lda 	(codePtr),y
.b2b2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b2b4		d0 0e		bne $b2c4			bne 	_SNDPlay
.b2b6		c8		iny				iny
.b2b7		20 5f a2	jsr $a25f			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b2ba		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b2bc		8d c1 07	sta $07c1			sta 	SoundCommandBlock+4
.b2bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2c1		8d c2 07	sta $07c2			sta 	SoundCommandBlock+5
.b2c4						_SNDPlay:
.b2c4		5a		phy				phy
.b2c5		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b2c7		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b2c9		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b2cb		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b2cd		20 6b 80	jsr $806b			jsr 	SNDCommand
.b2d0		7a		ply				ply
.b2d1		60		rts				rts
.b2d2						_SndError:
.b2d2		4c 52 a4	jmp $a452			jmp 	RangeError
.07bd						SoundCommandBlock:
>07bd								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b2d5						StackPushByte:
.b2d5		48		pha				pha 								; save byte on stack
.b2d6		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b2d8		d0 08		bne $b2e2			bne 	_SPBNoBorrow
.b2da		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b2dc		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b2de		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2e0		90 06		bcc $b2e8			bcc 	_SPBMemory
.b2e2						_SPBNoBorrow:
.b2e2		c6 34		dec $34				dec 	basicStack
.b2e4		68		pla				pla 								; get back and write
.b2e5		92 34		sta ($34)			sta 	(basicStack)
.b2e7		60		rts				rts
.b2e8						_SPBMemory:
.b2e8		a9 12		lda #$12		lda	#18
.b2ea		4c 75 93	jmp $9375		jmp	ErrorHandler
.b2ed						StackPopByte:
.b2ed		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b2ef		e6 34		inc $34				inc 	basicStack
.b2f1		d0 02		bne $b2f5			bne 	_SPBNoCarry
.b2f3		e6 35		inc $35				inc 	basicStack+1
.b2f5						_SPBNoCarry:
.b2f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b2f6						StackOpen:
.b2f6		48		pha				pha 								; save frame byte
.b2f7		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b2f9		0a		asl a				asl 	a 							; claim twice this for storage
.b2fa		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b2fc		38		sec				sec 								; so basically subtracting from
.b2fd		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b2ff		85 34		sta $34				sta 	basicStack
.b301		b0 09		bcs $b30c			bcs 	_SONoBorrow
>b303		db						.byte 	$DB 						; causes a break in the emulator
.b304		c6 35		dec $35				dec 	basicStack+1
.b306		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b308		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b30a		90 04		bcc $b310			bcc 	_SOMemory
.b30c						_SONoBorrow:
.b30c		68		pla				pla 								; get marker back and write at TOS
.b30d		92 34		sta ($34)			sta 	(basicStack)
.b30f		60		rts				rts
.b310						_SOMemory:
.b310		a9 12		lda #$12		lda	#18
.b312		4c 75 93	jmp $9375		jmp	ErrorHandler
.b315						StackClose:
.b315		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b317		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b319		0a		asl a				asl 	a 							; claim twice this.
.b31a		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b31c		85 34		sta $34				sta 	basicStack
.b31e		90 02		bcc $b322			bcc 	_SCExit
.b320		e6 35		inc $35				inc 	basicStack+1
.b322						_SCExit:
.b322		60		rts				rts
.b323						StackCheckFrame:
.b323		48		pha				pha
.b324						_StackRemoveLocals:
.b324		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b326		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b328		b0 05		bcs $b32f			bcs 	_SCNoLocal
.b32a		20 74 8d	jsr $8d74			jsr 	LocalPopValue 				; restore the local value
.b32d		80 f5		bra $b324			bra 	_StackRemoveLocals 			; gr round again
.b32f						_SCNoLocal:
.b32f		68		pla				pla 								; get the frame check.
.b330		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b332		29 f0		and #$f0			and 	#$F0 						; check type bits
.b334		d0 01		bne $b337			bne 	_SCFError 					; different, we have structures mixed up
.b336		60		rts				rts
.b337						_SCFError:
.b337		8a		txa				txa 								; report error X
.b338		4c 75 93	jmp $9375			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b33b						STKSaveCodePosition:
.b33b		5a		phy				phy
.b33c		98		tya				tya 								; save Y
.b33d		a0 05		ldy #$05			ldy 	#5
.b33f		91 34		sta ($34),y			sta 	(basicStack),y
.b341		88		dey				dey 								; save Code Pointer
.b342						_STKSaveLoop:
.b342		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b345		91 34		sta ($34),y			sta 	(basicStack),y
.b347		88		dey				dey
.b348		d0 f8		bne $b342			bne 	_STKSaveLoop
.b34a		7a		ply				ply
.b34b		60		rts				rts
.b34c						STKLoadCodePosition:
.b34c		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b34e						_STKLoadLoop:
.b34e		b1 34		lda ($34),y			lda 	(basicStack),y
.b350		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b353		c8		iny				iny
.b354		c0 05		cpy #$05			cpy 	#5
.b356		d0 f6		bne $b34e			bne 	_STKLoadLoop
.b358		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b35a		a8		tay				tay
.b35b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b35c						StackReset:
.b35c		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b35e		85 34		sta $34				sta 	0+basicStack
.b360		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b362		85 35		sta $35				sta 	1+basicStack
.b364		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b366		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b368		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b369						StringConcrete:
.b369		5a		phy				phy 								; save position on stack
.b36a		20 b5 9e	jsr $9eb5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b36d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b36f		85 38		sta $38				sta 	zTemp1
.b371		b5 60		lda $60,x			lda 	NSMantissa1,x
.b373		85 39		sta $39				sta 	zTemp1+1
.b375		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b377						_SALength:
.b377		c8		iny				iny
.b378		b1 38		lda ($38),y			lda 	(zTemp1),y
.b37a		d0 fb		bne $b377			bne 	_SALength
.b37c		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b37e		b0 3d		bcs $b3bd			bcs 	_SALengthError
.b380		98		tya				tya 				 				; length of the new string
.b381		18		clc				clc
.b382		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b384		90 02		bcc $b388			bcc 	_SAHaveLength
.b386		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b388						_SAHaveLength:
.b388		48		pha				pha 								; save length.
.b389		38		sec				sec
.b38a		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b38c		6d 0a 04	adc $040a			adc 	stringMemory
.b38f		8d 0a 04	sta $040a			sta 	stringMemory
.b392		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b394		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b396		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b398		6d 0b 04	adc $040b			adc 	stringMemory+1
.b39b		8d 0b 04	sta $040b			sta 	stringMemory+1
.b39e		85 3b		sta $3b				sta 	zTemp2+1
.b3a0		95 60		sta $60,x			sta 	NSMantissa1,x
.b3a2		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b3a3		38		sec				sec
.b3a4		e9 03		sbc #$03			sbc 	#3
.b3a6		92 3a		sta ($3a)			sta 	(zTemp2)
.b3a8		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b3aa		a0 01		ldy #$01			ldy 	#1
.b3ac		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3ae						_SACopyNewString:
.b3ae		a0 00		ldy #$00			ldy 	#0
.b3b0						_SACopyNSLoop:
.b3b0		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b3b2		c8		iny				iny 								; write two on in string storage
.b3b3		c8		iny				iny
.b3b4		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3b6		88		dey				dey 								; this makes it one one.
.b3b7		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3b9		d0 f5		bne $b3b0			bne 	_SACopyNSLoop
.b3bb		7a		ply				ply
.b3bc		60		rts				rts
.b3bd						_SALengthError:
.b3bd		a9 09		lda #$09		lda	#9
.b3bf		4c 75 93	jmp $9375		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3c2						StringSystemInitialise:
.b3c2		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3c4		8d 0a 04	sta $040a			sta 	0+stringMemory
.b3c7		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3c9		8d 0b 04	sta $040b			sta 	1+stringMemory
.b3cc		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3cf		60		rts				rts
.b3d0						StringSpaceInitialise:
.b3d0		20 b5 9e	jsr $9eb5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3d3		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b3d5		8d 0c 04	sta $040c			sta 	stringInitialised
.b3d8		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b3db		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b3de		ad 0b 04	lda $040b			lda 	stringMemory+1
.b3e1		3a		dec a				dec 	a
.b3e2		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b3e5		60		rts				rts
.b3e6						StringTempAllocate:
.b3e6		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3e8		b0 30		bcs $b41a			bcs 	_STALength
.b3ea		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b3ed		30 05		bmi $b3f4			bmi 	_STAAllocate
.b3ef		48		pha				pha 								; save value to subtract.
.b3f0		20 d0 b3	jsr $b3d0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b3f3		68		pla				pla 								; restore it
.b3f4						_STAAllocate:
.b3f4		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b3f6		18		clc				clc  								; deliberate allows one more
.b3f7		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b3fa		8d 0d 04	sta $040d			sta 	stringTempPointer
.b3fd		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b3ff		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b401		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b404		69 ff		adc #$ff			adc 	#$FF
.b406		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b409		85 3d		sta $3d				sta 	zsTemp+1
.b40b		95 60		sta $60,x			sta 	NSMantissa1,x
.b40d		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b40f		74 70		stz $70,x			stz 	NSMantissa3,x
.b411		a9 10		lda #$10			lda 	#NSTString
.b413		95 50		sta $50,x			sta 	NSStatus,x
.b415		a9 00		lda #$00			lda 	#0 							; clear the target string
.b417		92 3c		sta ($3c)			sta 	(zsTemp)
.b419		60		rts				rts
.b41a						_STALength:
.b41a		a9 09		lda #$09		lda	#9
.b41c		4c 75 93	jmp $9375		jmp	ErrorHandler
.b41f						StringTempWrite:
.b41f		48		pha				pha
.b420		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b422		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b424		d0 02		bne $b428			bne 	_STWNoCarry
.b426		e6 3d		inc $3d				inc 	zsTemp+1
.b428						_STWNoCarry:
.b428		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b42a		92 3c		sta ($3c)			sta 	(zsTemp)
.b42c		68		pla				pla
.b42d		60		rts				rts

;******  Return to file: _basic.asm

.b42e						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c5 07	lda $07c5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c4 07	sty $07c4			sty 	EXTColumn
.c02d	a02d	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c3 07	inc $07c3			inc 	EXTRow  					; bump row
.c035	a035	9c c4 07	stz $07c4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c3 07	lda $07c3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd c7 07	cmp $07c7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c4 07	dec $07c4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c4 07	stz $07c4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c3 07	dec $07c3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c3 07	lda $07c3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c3 07	dec $07c3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed c6 07	sbc $07c6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c4 07	sty $07c4			sty 	EXTColumn
.c08c	a08c	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c4 07	sty $07c4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad c7 07	lda $07c7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c3 07	cmp $07c3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c3 07	inc $07c3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c4 07	lda $07c4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c4 07	sta $07c4			sta 	EXTColumn
.c0c9	a0c9	cd c6 07	cmp $07c6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c4 07	dec $07c4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c5 07	and $07c5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c5 07	sta $07c5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c5 07	ora $07c5			ora 	EXTTextColour
.c13c	a13c	8d c5 07	sta $07c5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c5 07	lda $07c5			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c5 07	lda $07c5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c3 07	stz $07c3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c4 07	stz $07c4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c4 07	lda $07c4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c3 07	lda $07c3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c3						EXTRow:
>07c3								.fill 	1
.07c4						EXTColumn:
>07c4								.fill 	1
.07c5						EXTTextColour:
>07c5								.fill 	1
.07c6						EXTScreenWidth:
>07c6								.fill 	1
.07c7						EXTScreenHeight:
>07c7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c5 07	sta $07c5			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d c6 07	sta $07c6			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d c7 07	sta $07c7			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c3 07	lda $07c3			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 b2		ldx #$b2			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 b0		ldx #$b0			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 e2		ldx #$e2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd b2 67	lda $67b2,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad c6 07	lda $07c6			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	38 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	52 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	9a a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e8 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	29 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f1 a8					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	39 a9					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	aa a9					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	d3 a9					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	5a ab					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	9a a3					.word	GRUndefined              ; $0a
>c2fd	a2fd	9a a3					.word	GRUndefined              ; $0b
>c2ff	a2ff	9a a3					.word	GRUndefined              ; $0c
>c301	a301	9a a3					.word	GRUndefined              ; $0d
>c303	a303	9a a3					.word	GRUndefined              ; $0e
>c305	a305	9a a3					.word	GRUndefined              ; $0f
>c307	a307	9a a3					.word	GRUndefined              ; $10
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	f7 a5					.word	GXLine                   ; $21 Line
>c32b	a32b	72 a7					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	6f a7					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	9f a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9b a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	57 a7					.word	GXPlotPoint              ; $28 Plot
>c339	a339	69 aa					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07c8						gxCurrentX:
>07c8								.fill 	2
.07ca						gxCurrentY:
>07ca								.fill 	2
.07cc						gxLastX:
>07cc								.fill 	2
.07ce						gxLastY:
>07ce								.fill 	2
.07d0						gxX0:
>07d0								.fill 	2
.07d2						gxY0:
>07d2								.fill 	2
.07d4						gxX1:
>07d4								.fill 	2
.07d6						gxY1:
>07d6								.fill 	2
.07d8						gxSpritesOn:
>07d8								.fill 	1
.07d9						gxBitmapsOn:
>07d9								.fill 	1
.07da						gxBasePage:
>07da								.fill 	1
.07db						gxSpritePage:
>07db								.fill 	1
.07dc						gxHeight:
>07dc								.fill 	1
.07dd						gxMode:
>07dd								.fill 	1
.07de						gxColour:
>07de								.fill 	1
.07df						gxEORValue:
>07df								.fill 	1
.07e0						gxANDValue:
>07e0								.fill 	1
.07e1						gxOriginalLUTValue:
>07e1								.fill 	1
.07e2						gxOffset:
>07e2								.fill 	1
.07e3						GSCurrentSpriteID:
>07e3								.fill 	1
.07e4						GSCurrentSpriteAddr:
>07e4								.fill 	2
.07e6						gxSpriteOffsetBase:
>07e6								.fill 	2
.07e8						gxSpriteLow:
>07e8								.fill 	64
.0828						gxSpriteHigh:
>0828								.fill 	64
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c34d	a34d	9d cc 07	sta $07cc,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ca 07	sta $07ca			sta 	gxCurrentY
.c357	a357	9c cb 07	stz $07cb			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d c8 07	sta $07c8			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d c9 07	sta $07c9			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad c9 07	lda $07c9			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad c8 07	lda $07c8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ca 07	lda $07ca			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd dc 07	cmp $07dc			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c389	a389	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
>c39a	a39a	db						.byte 	$DB 						; causes a break in the emulator
.c39b	a39b					GXFillCircle:
.c39b	a39b	a9 ff		lda #$ff			lda 	#255
.c39d	a39d	80 02		bra $a3a1			bra 	GXCircle
.c39f	a39f					GXFrameCircle:
.c39f	a39f	a9 00		lda #$00			lda 	#0
.c3a1	a3a1					GXCircle:
.c3a1	a3a1	8d 6b 08	sta $086b			sta 	gxIsFillMode					; save Fill flag
.c3a4	a3a4	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c3a7	a3a7	f0 26		beq $a3cf			beq 	_GXCFail
.c3a9	a3a9	20 01 ac	jsr $ac01			jsr 	GXSortXY 					; topleft/bottomright
.c3ac	a3ac	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c3af	a3af	20 a1 a4	jsr $a4a1			jsr 	GXCircleSetup 				; set up for drawing
.c3b2	a3b2	9c 6c 08	stz $086c			stz 	gxYChanged
.c3b5	a3b5					_GXCircleDraw:
.c3b5	a3b5	ad 69 08	lda $0869			lda 	gxxCentre					; while x <= y
.c3b8	a3b8	cd 6a 08	cmp $086a			cmp 	gxYCentre
.c3bb	a3bb	90 0a		bcc $a3c7			bcc 	_GXCircleContinue
.c3bd	a3bd	d0 03		bne $a3c2			bne 	_GXNoLast
.c3bf	a3bf	20 d4 a3	jsr $a3d4			jsr 	GXPlot1
.c3c2	a3c2					_GXNoLast:
.c3c2	a3c2	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; close the bitmap
.c3c5	a3c5	18		clc				clc
.c3c6	a3c6	60		rts				rts
.c3c7	a3c7					_GXCircleContinue:
.c3c7	a3c7	20 d1 a3	jsr $a3d1			jsr 	GXPlot2 					; draw it
.c3ca	a3ca	20 4e a4	jsr $a44e			jsr 	GXCircleMove 				; adjust the coordinates
.c3cd	a3cd	80 e6		bra $a3b5			bra 	_GXCircleDraw
.c3cf	a3cf					_GXCFail:
.c3cf	a3cf	38		sec				sec
.c3d0	a3d0	60		rts				rts
.c3d1	a3d1					GXPlot2:
.c3d1	a3d1	20 d4 a3	jsr $a3d4			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d4	a3d4					GXPlot1:
.c3d4	a3d4	ad 6a 08	lda $086a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d7	a3d7	f0 03		beq $a3dc			beq 	_GXPlot1Only
.c3d9	a3d9	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; plot and negate
.c3dc	a3dc					_GXPlot1Only:
.c3dc	a3dc	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; twice, undoing negation
.c3df	a3df	ad 69 08	lda $0869			lda 	gxxCentre 						; swap X and Y
.c3e2	a3e2	ae 6a 08	ldx $086a			ldx	 	gxYCentre
.c3e5	a3e5	8d 6a 08	sta $086a			sta 	gxYCentre
.c3e8	a3e8	8e 69 08	stx $0869			stx 	gxxCentre
.c3eb	a3eb	ad 6c 08	lda $086c			lda 	gxYChanged 						; toggle Y Changed flag
.c3ee	a3ee	a9 ff		lda #$ff			lda 	#$FF
.c3f0	a3f0	8d 6c 08	sta $086c			sta 	gxYChanged
.c3f3	a3f3	60		rts				rts
.c3f4	a3f4	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; do once
.c3f7	a3f7	60		rts				rts
.c3f8	a3f8	ad 6b 08	lda $086b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fb	a3fb	f0 05		beq $a402			beq 	_GXPlot0Always
.c3fd	a3fd	ad 6c 08	lda $086c			lda 	gxYChanged						; fill mode, only draw if changed.
.c400	a400	f0 2d		beq $a42f			beq 	GXPlot0Exit
.c402	a402					_GXPlot0Always:
.c402	a402	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c404	a404	ad 6a 08	lda $086a			lda 	gxYCentre
.c407	a407	20 30 a4	jsr $a430			jsr 	GXSubCopy
.c40a	a40a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40c	a40c	ad 69 08	lda $0869			lda 	gxxCentre
.c40f	a40f	20 30 a4	jsr $a430			jsr 	GXSubCopy
.c412	a412	48		pha				pha 									; save last offset X
.c413	a413	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 					; calculate position/offset.
.c416	a416	68		pla				pla
.c417	a417	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c418	a418	85 36		sta $36				sta 	gxzTemp0
.c41a	a41a	64 37		stz $37				stz 	gxzTemp0+1
.c41c	a41c	26 37		rol $37				rol 	gxzTemp0+1
.c41e	a41e	ad 6b 08	lda $086b			lda 	gxIsFillMode
.c421	a421	69 80		adc #$80			adc 	#128
.c423	a423	20 c2 a7	jsr $a7c2			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c426	a426	38		sec				sec 									; GY = -GY
.c427	a427	a9 00		lda #$00			lda 	#0
.c429	a429	ed 6a 08	sbc $086a			sbc 	gxYCentre
.c42c	a42c	8d 6a 08	sta $086a			sta 	gxYCentre
.c42f	a42f					GXPlot0Exit:
.c42f	a42f	60		rts				rts
.c430	a430					GXSubCopy:
.c430	a430	85 36		sta $36				sta 	gxzTemp0
.c432	a432	64 37		stz $37				stz 	gxzTemp0+1
.c434	a434	29 80		and #$80			and 	#$80
.c436	a436	f0 02		beq $a43a			beq 	_GXNoSx
.c438	a438	c6 37		dec $37				dec 	gxzTemp0+1
.c43a	a43a					_GXNoSx:
.c43a	a43a	38		sec				sec
.c43b	a43b	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c43e	a43e	e5 36		sbc $36				sbc 	gxzTemp0
.c440	a440	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c443	a443	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c446	a446	e5 37		sbc $37				sbc 	gxzTemp0+1
.c448	a448	9d d1 07	sta $07d1,x			sta 	gxX0+1,x
.c44b	a44b	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44d	a44d	60		rts				rts
.c44e	a44e					GXCircleMove:
.c44e	a44e	9c 6c 08	stz $086c			stz 	gxYChanged 					; clear Y changed flag
.c451	a451	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c453	a453	10 0d		bpl $a462			bpl 	_GXEMPositive
.c455	a455	ee 69 08	inc $0869			inc 	gxxCentre 					; X++
.c458	a458	ad 69 08	lda $0869			lda 	gxxCentre
.c45b	a45b	20 81 a4	jsr $a481			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45e	a45e	a9 06		lda #$06			lda 	#6  						; and add 6
.c460	a460	80 15		bra $a477			bra 	_GXEMAddD
.c462	a462					_GXEMPositive:
.c462	a462	ee 69 08	inc $0869			inc 	gxxCentre					; X++
.c465	a465	ce 6a 08	dec $086a			dec 	gxYCentre 					; Y--
.c468	a468	38		sec				sec 								; calculate X-Y
.c469	a469	ad 69 08	lda $0869			lda 	gxxCentre
.c46c	a46c	ed 6a 08	sbc $086a			sbc 	gxYCentre
.c46f	a46f	20 81 a4	jsr $a481			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c472	a472	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c474	a474	ce 6c 08	dec $086c			dec 	gxYChanged
.c477	a477					_GXEMAddD:
.c477	a477	18		clc				clc
.c478	a478	65 38		adc $38				adc 	gxzTemp1
.c47a	a47a	85 38		sta $38				sta 	gxzTemp1
.c47c	a47c	90 02		bcc $a480			bcc 	_GXEMNoCarry
.c47e	a47e	e6 39		inc $39				inc 	gxzTemp1+1
.c480	a480					_GXEMNoCarry:
.c480	a480	60		rts				rts
.c481	a481					_GXAdd4TimesToD:
.c481	a481	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c483	a483	29 80		and #$80			and 	#$80
.c485	a485	f0 02		beq $a489			beq 	_GXA4Unsigned
.c487	a487	a9 ff		lda #$ff			lda 	#$FF
.c489	a489					_GXA4Unsigned:
.c489	a489	85 37		sta $37				sta 	gxzTemp0+1
.c48b	a48b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48d	a48d	26 37		rol $37				rol 	gxzTemp0+1
.c48f	a48f	06 36		asl $36				asl 	gxzTemp0
.c491	a491	26 37		rol $37				rol 	gxzTemp0+1
.c493	a493	18		clc				clc 								; add
.c494	a494	a5 36		lda $36				lda		gxzTemp0
.c496	a496	65 38		adc $38				adc 	gxzTemp1
.c498	a498	85 38		sta $38				sta 	gxzTemp1
.c49a	a49a	a5 37		lda $37				lda		gxzTemp0+1
.c49c	a49c	65 39		adc $39				adc 	gxzTemp1+1
.c49e	a49e	85 39		sta $39				sta 	gxzTemp1+1
.c4a0	a4a0	60		rts				rts
.c4a1	a4a1					GXCircleSetup:
.c4a1	a4a1	38		sec				sec
.c4a2	a4a2	ad d6 07	lda $07d6			lda 	gxY1
.c4a5	a4a5	ed d2 07	sbc $07d2			sbc 	gxY0
.c4a8	a4a8	4a		lsr a				lsr 	a
.c4a9	a4a9	8d 68 08	sta $0868			sta 	gxRadius
.c4ac	a4ac	a2 00		ldx #$00			ldx 	#0
.c4ae	a4ae	20 d0 a4	jsr $a4d0			jsr 	_GXCalculateCentre
.c4b1	a4b1	a2 02		ldx #$02			ldx 	#2
.c4b3	a4b3	20 d0 a4	jsr $a4d0			jsr 	_GXCalculateCentre
.c4b6	a4b6	9c 69 08	stz $0869			stz 	gxxCentre
.c4b9	a4b9	ad 68 08	lda $0868			lda 	gxRadius
.c4bc	a4bc	8d 6a 08	sta $086a			sta 	gxYCentre
.c4bf	a4bf	0a		asl a				asl 	a 							; R x 2
.c4c0	a4c0	85 36		sta $36				sta 	gxzTemp0
.c4c2	a4c2	38		sec				sec
.c4c3	a4c3	a9 03		lda #$03			lda 	#3
.c4c5	a4c5	e5 36		sbc $36				sbc 	gxzTemp0
.c4c7	a4c7	85 38		sta $38				sta 	gxzTemp1
.c4c9	a4c9	a9 00		lda #$00			lda 	#0
.c4cb	a4cb	e9 00		sbc #$00			sbc 	#0
.c4cd	a4cd	85 39		sta $39				sta 	gxzTemp1+1
.c4cf	a4cf	60		rts				rts
.c4d0	a4d0					_GXCalculateCentre:
.c4d0	a4d0	38		sec				sec
.c4d1	a4d1	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c4d4	a4d4	7d d0 07	adc $07d0,x			adc 	gxX0,x
.c4d7	a4d7	9d d4 07	sta $07d4,x			sta 	gxX1,x
.c4da	a4da	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c4dd	a4dd	7d d1 07	adc $07d1,x			adc 	gxX0+1,x
.c4e0	a4e0	4a		lsr a				lsr 	a
.c4e1	a4e1	9d d5 07	sta $07d5,x			sta 	gxX1+1,x
.c4e4	a4e4	7e d4 07	ror $07d4,x			ror 	gxX1,x
.c4e7	a4e7	60		rts				rts
.0868						gxRadius:
>0868								.fill 	1
.0869						gxxCentre:
>0869								.fill 	1
.086a						gxYCentre:
>086a								.fill 	1
.086b						gxIsFillMode:
>086b								.fill 	1
.086c						gxYChanged:
>086c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e8	a4e8					GXClearBitmap:
.c4e8	a4e8	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP turned on.
.c4eb	a4eb	f0 26		beq $a513			beq 	_GXCBFail
.c4ed	a4ed	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start access
.c4f0	a4f0	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f2	a4f2	ad dc 07	lda $07dc			lda 	gxHeight
.c4f5	a4f5	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f7	a4f7	f0 02		beq $a4fb			beq 	_GXCalcLastPage
.c4f9	a4f9	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fb	a4fb					_GXCalcLastPage:
.c4fb	a4fb	98		tya				tya 								; add to base page
.c4fc	a4fc	18		clc				clc
.c4fd	a4fd	6d da 07	adc $07da			adc 	gxBasePage
.c500	a500	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c502	a502					_GXClearAll:
.c502	a502	20 15 a5	jsr $a515			jsr 	_GXClearBlock 				; clear 8k block
.c505	a505	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c507	a507	a5 0b		lda $0b				lda 	GXEditSlot
.c509	a509	cd da 07	cmp $07da			cmp 	gxBasePage 					; until before base page
.c50c	a50c	b0 f4		bcs $a502			bcs 	_GXClearAll
.c50e	a50e	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap	 			; stop access
.c511	a511	18		clc				clc
.c512	a512	60		rts				rts
.c513	a513					_GXCBFail:
.c513	a513	38		sec				sec
.c514	a514	60		rts				rts
.c515	a515					_GXClearBlock:
.c515	a515	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c517	a517	85 38		sta $38				sta 	0+gxzTemp1
.c519	a519	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51b	a51b	85 39		sta $39				sta 	1+gxzTemp1
.c51d	a51d					_GXCB0:
.c51d	a51d	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c51f	a51f	a0 00		ldy #$00			ldy 	#0
.c521	a521					_GXCB1:
.c521	a521	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c523	a523	c8		iny				iny
.c524	a524	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c526	a526	c8		iny				iny
.c527	a527	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c529	a529	c8		iny				iny
.c52a	a52a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52c	a52c	c8		iny				iny
.c52d	a52d	d0 f2		bne $a521			bne 	_GXCB1
.c52f	a52f	e6 39		inc $39				inc 	gxzTemp1+1
.c531	a531	a5 39		lda $39				lda 	gxzTemp1+1
.c533	a533	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c535	a535	d0 e6		bne $a51d			bne 	_GXCB0
.c537	a537	60		rts				rts
.c538	a538					GXInitialise:
.c538	a538	64 01		stz $01				stz 	1
.c53a	a53a	a9 01		lda #$01			lda 	#1
.c53c	a53c	8d 00 d0	sta $d000			sta 	$D000
.c53f	a53f	18		clc				clc
.c540	a540	9c d8 07	stz $07d8			stz 	gxSpritesOn
.c543	a543	9c d9 07	stz $07d9			stz 	gxBitmapsOn
.c546	a546	a2 0f		ldx #$0f			ldx 	#15
.c548	a548					_GXIClear:
.c548	a548	9e c8 07	stz $07c8,x			stz 	gxCurrentX,x
.c54b	a54b	ca		dex				dex
.c54c	a54c	10 fa		bpl $a548			bpl 	_GXIClear
.c54e	a54e	20 e9 a5	jsr $a5e9			jsr 	GXClearSpriteStore
.c551	a551	60		rts				rts
.c552	a552					GXControlBitmap:
.c552	a552	64 01		stz $01				stz 	1
.c554	a554	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c556	a556	29 01		and #$01			and 	#1 							; set bitmap flag
.c558	a558	8d d9 07	sta $07d9			sta 	gxBitmapsOn
.c55b	a55b	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c55c	a55c	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c55f	a55f	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c561	a561	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c563	a563	90 02		bcc $a567			bcc 	_CBNotOn
.c565	a565	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c567	a567					_CBNotOn:
.c567	a567	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c56a	a56a	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c56c	a56c	29 07		and #$07			and 	#7
.c56e	a56e	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c571	a571	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c573	a573	d0 02		bne $a577			bne 	_CBNotDefault
.c575	a575	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c577	a577					_CBNotDefault:
.c577	a577	8d da 07	sta $07da			sta 	gxBasePage
.c57a	a57a	20 db a5	jsr $a5db			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c57d	a57d	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c57f	a57f	8d 03 d1	sta $d103			sta 	$D103
.c582	a582	a5 36		lda $36				lda 	gxzTemp0
.c584	a584	8d 02 d1	sta $d102			sta 	$D102
.c587	a587	9c 01 d1	stz $d101			stz 	$D101
.c58a	a58a	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.c58c	a58c	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c58f	a58f	29 01		and #$01			and 	#1
.c591	a591	f0 02		beq $a595			beq 	_CBHaveHeight
.c593	a593	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c595	a595					_CBHaveHeight
.c595	a595	8e dc 07	stx $07dc			stx 	gxHeight
.c598	a598	18		clc				clc
.c599	a599	60		rts				rts
.c59a	a59a					GXControlSprite:
.c59a	a59a	64 01		stz $01				stz 	1
.c59c	a59c	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c59e	a59e	29 01		and #$01			and 	#1 							; set sprites flag
.c5a0	a5a0	8d d8 07	sta $07d8			sta 	gxSpritesOn
.c5a3	a5a3	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c5a4	a5a4	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5a7	a5a7	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5a9	a5a9	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5ab	a5ab	90 02		bcc $a5af			bcc 	_CSNotOn
.c5ad	a5ad	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5af	a5af					_CSNotOn:
.c5af	a5af	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5b2	a5b2	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5b4	a5b4	d0 02		bne $a5b8			bne 	_CSNotDefault
.c5b6	a5b6	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5b8	a5b8					_CSNotDefault:
.c5b8	a5b8	8d db 07	sta $07db			sta 	gxSpritePage
.c5bb	a5bb	20 db a5	jsr $a5db			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5be	a5be	a5 36		lda $36				lda 	gxzTemp0
.c5c0	a5c0	8d e6 07	sta $07e6			sta 	gxSpriteOffsetBase
.c5c3	a5c3	a5 37		lda $37				lda 	gxzTemp0+1
.c5c5	a5c5	8d e7 07	sta $07e7			sta 	gxSpriteOffsetBase+1
.c5c8	a5c8	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5ca	a5ca					_CSClear:
.c5ca	a5ca	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5cd	a5cd	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5d0	a5d0	ca		dex				dex
.c5d1	a5d1	d0 f7		bne $a5ca			bne 	_CSClear
.c5d3	a5d3	9c e5 07	stz $07e5			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5d6	a5d6	20 e9 a5	jsr $a5e9			jsr 	GXClearSpriteStore
.c5d9	a5d9	18		clc				clc
.c5da	a5da	60		rts				rts
.c5db	a5db					GXCalculateBaseAddress:
.c5db	a5db	85 36		sta $36				sta 	gxzTemp0
.c5dd	a5dd	64 37		stz $37				stz 	gxzTemp0+1
.c5df	a5df	a9 05		lda #$05			lda 	#5
.c5e1	a5e1					_GXShift:
.c5e1	a5e1	06 36		asl $36				asl 	gxzTemp0
.c5e3	a5e3	26 37		rol $37				rol 	gxzTemp0+1
.c5e5	a5e5	3a		dec a				dec		a
.c5e6	a5e6	d0 f9		bne $a5e1			bne 	_GXShift
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXClearSpriteStore:
.c5e9	a5e9	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c5eb	a5eb					_GXCSSLoop:
.c5eb	a5eb	9e 28 08	stz $0828,x			stz 	gxSpriteHigh,x
.c5ee	a5ee	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c5f0	a5f0	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.c5f3	a5f3	ca		dex				dex
.c5f4	a5f4	10 f5		bpl $a5eb			bpl 	_GXCSSLoop
.c5f6	a5f6	60		rts				rts
.c5f7	a5f7					GXLine:
.c5f7	a5f7	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c5fa	a5fa	f0 28		beq $a624			beq 	_GXLFail
.c5fc	a5fc	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap
.c5ff	a5ff	20 1f ac	jsr $ac1f			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c602	a602	20 ca a6	jsr $a6ca			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c605	a605	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; calculate position/offset.
.c608	a608					_GXDrawLoop:
.c608	a608	ac e2 07	ldy $07e2			ldy 	gxOffset 					; draw the pixel
.c60b	a60b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c60d	a60d	2d e0 07	and $07e0			and 	gxANDValue
.c610	a610	4d df 07	eor $07df			eor 	gxEORValue
.c613	a613	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c615	a615	20 26 a6	jsr $a626			jsr 	GXLineIsComplete 			; is the line complete ?
.c618	a618	f0 05		beq $a61f			beq 	_GXLExit
.c61a	a61a	20 41 a6	jsr $a641			jsr 	GXLineAdvance 				; code as per advance method
.c61d	a61d	80 e9		bra $a608			bra 	_GXDrawLoop
.c61f	a61f					_GXLExit:
.c61f	a61f	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c622	a622	18		clc				clc
.c623	a623	60		rts				rts
.c624	a624					_GXLFail:
.c624	a624	38		sec				sec
.c625	a625	60		rts				rts
.c626	a626					GXLineIsComplete:
.c626	a626	ad 6f 08	lda $086f			lda 	gxIsDiffYLarger 			; is dy larger
.c629	a629	d0 0f		bne $a63a			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.c62b	a62b	ad d0 07	lda $07d0			lda 	gxX0 						; compare X, LSB and MSB
.c62e	a62e	4d d4 07	eor $07d4			eor 	gxX1
.c631	a631	d0 06		bne $a639			bne 	_GXLICExit
.c633	a633	ad d1 07	lda $07d1			lda 	gxX0+1
.c636	a636	4d d5 07	eor $07d5			eor 	gxX1+1
.c639	a639					_GXLICExit:
.c639	a639	60		rts				rts
.c63a	a63a					_GXLICCompareY:
.c63a	a63a	ad d6 07	lda $07d6			lda 	gxY1
.c63d	a63d	4d d2 07	eor $07d2			eor 	gxY0
.c640	a640	60		rts				rts
.c641	a641					GXLineAdvance:
.c641	a641	18		clc				clc 								; add adjust to position
.c642	a642	ad 71 08	lda $0871			lda 	gxPosition
.c645	a645	6d 72 08	adc $0872			adc 	gxAdjust
.c648	a648	8d 71 08	sta $0871			sta 	gxPosition
.c64b	a64b	9c 74 08	stz $0874			stz 	gxAddSelect 				; clear add select flag
.c64e	a64e	b0 05		bcs $a655			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c650	a650	cd 73 08	cmp $0873			cmp 	gxTotal 					; if exceeded total
.c653	a653	90 0a		bcc $a65f			bcc 	_GXLANoExtra
.c655	a655					_GXLAOverflow:
.c655	a655	ce 74 08	dec $0874			dec 	gxAddSelect 				; set addselect to $FF
.c658	a658	38		sec				sec 								; subtract total and write back
.c659	a659	ed 73 08	sbc $0873			sbc 	gxTotal
.c65c	a65c	8d 71 08	sta $0871			sta 	gxPosition
.c65f	a65f					_GXLANoExtra:
.c65f	a65f	ad 6f 08	lda $086f			lda 	gxIsDiffYLarger
.c662	a662	f0 0d		beq $a671			beq 	_GXDXLarger
.c664	a664	20 c3 a6	jsr $a6c3			jsr 	GXIncrementY
.c667	a667	ad 74 08	lda $0874			lda 	gxAddSelect
.c66a	a66a	f0 10		beq $a67c			beq 	_GXLAExit
.c66c	a66c	20 7d a6	jsr $a67d			jsr 	gxAdjustX
.c66f	a66f	80 0b		bra $a67c			bra 	_GXLAExit
.c671	a671					_GXDXLarger:
.c671	a671	20 7d a6	jsr $a67d			jsr 	gxAdjustX
.c674	a674	ad 74 08	lda $0874			lda 	gxAddSelect
.c677	a677	f0 03		beq $a67c			beq 	_GXLAExit
.c679	a679	20 c3 a6	jsr $a6c3			jsr 	GXIncrementY
.c67c	a67c					_GXLAExit:
.c67c	a67c	60		rts				rts
.c67d	a67d					gxAdjustX:
.c67d	a67d	ad 70 08	lda $0870			lda 	gxDXNegative
.c680	a680	10 25		bpl $a6a7			bpl 	_GXAXRight
.c682	a682	ad d0 07	lda $07d0			lda 	gxX0
.c685	a685	d0 03		bne $a68a			bne 	_GXAXNoBorrow
.c687	a687	ce d1 07	dec $07d1			dec 	gxX0+1
.c68a	a68a					_GXAXNoBorrow:
.c68a	a68a	ce d0 07	dec $07d0			dec 	gxX0
.c68d	a68d	ce e2 07	dec $07e2			dec 	gxOffset 					; pixel left
.c690	a690	ad e2 07	lda $07e2			lda 	gxOffset
.c693	a693	c9 ff		cmp #$ff			cmp 	#$FF
.c695	a695	d0 0f		bne $a6a6			bne 	_GXAYExit 					; underflow
.c697	a697	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c699	a699	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c69b	a69b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c69d	a69d	b0 07		bcs $a6a6			bcs 	_GXAYExit
.c69f	a69f	18		clc				clc
.c6a0	a6a0	69 20		adc #$20			adc 	#$20 						; fix up
.c6a2	a6a2	85 3d		sta $3d				sta 	gxzScreen+1
.c6a4	a6a4	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c6a6	a6a6					_GXAYExit:
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					_GXAXRight:
.c6a7	a6a7	ee d0 07	inc $07d0			inc 	gxX0
.c6aa	a6aa	d0 03		bne $a6af			bne 	_GXAXNoCarry
.c6ac	a6ac	ee d1 07	inc $07d1			inc 	gxX0+1
.c6af	a6af					_GXAXNoCarry:
.c6af	a6af	ee e2 07	inc $07e2			inc 	gxOffset 					; pixel right
.c6b2	a6b2	d0 0e		bne $a6c2			bne 	_GXAXExit 					; if not overflowed, exit.
.c6b4	a6b4	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c6b6	a6b6	a5 3d		lda $3d				lda 	gxzScreen+1
.c6b8	a6b8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c6ba	a6ba	90 06		bcc $a6c2			bcc 	_GXAXExit
.c6bc	a6bc	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c6be	a6be	85 3d		sta $3d				sta 	gxzScreen+1
.c6c0	a6c0	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c6c2	a6c2					_GXAXExit:
.c6c2	a6c2	60		rts				rts
.c6c3	a6c3					GXIncrementY:
.c6c3	a6c3	ee d2 07	inc $07d2			inc 	gxY0
.c6c6	a6c6	20 3f ab	jsr $ab3f			jsr 	GXMovePositionDown
.c6c9	a6c9	60		rts				rts
.c6ca	a6ca					GXLineSetup:
.c6ca	a6ca	ad d6 07	lda $07d6			lda 	gxY1
.c6cd	a6cd	38		sec				sec
.c6ce	a6ce	ed d2 07	sbc $07d2			sbc 	gxY0
.c6d1	a6d1	4a		lsr a				lsr 	a
.c6d2	a6d2	8d 6e 08	sta $086e			sta 	gxDiffY
.c6d5	a6d5	9c 70 08	stz $0870			stz 	gxDXNegative 				; clear -ve flag
.c6d8	a6d8	38		sec				sec
.c6d9	a6d9	ad d4 07	lda $07d4			lda 	gxX1
.c6dc	a6dc	ed d0 07	sbc $07d0			sbc 	gxX0
.c6df	a6df	8d 6d 08	sta $086d			sta 	gxDiffX
.c6e2	a6e2	ad d5 07	lda $07d5			lda 	gxX1+1 						; calculate MSB
.c6e5	a6e5	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c6e8	a6e8	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c6e9	a6e9	6e 6d 08	ror $086d			ror 	gxDiffX
.c6ec	a6ec	0a		asl a				asl 	a
.c6ed	a6ed	10 0c		bpl $a6fb			bpl 	_GDXNotNegative
.c6ef	a6ef	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c6f1	a6f1	38		sec				sec
.c6f2	a6f2	ed 6d 08	sbc $086d			sbc 	gxDiffX
.c6f5	a6f5	8d 6d 08	sta $086d			sta 	gxDiffX
.c6f8	a6f8	ce 70 08	dec $0870			dec 	gxDXNegative 				; -ve flag = $FF.
.c6fb	a6fb					_GDXNotNegative:
.c6fb	a6fb	9c 6f 08	stz $086f			stz 	gxIsDiffYLarger 			; clear larger flag
.c6fe	a6fe	ad 6e 08	lda $086e			lda 	gxDiffY 					; set adjust and total.
.c701	a701	8d 72 08	sta $0872			sta 	gxAdjust
.c704	a704	ad 6d 08	lda $086d			lda 	gxDiffX
.c707	a707	8d 73 08	sta $0873			sta 	gxTotal
.c70a	a70a	ad 6e 08	lda $086e			lda 	gxDiffY 					; if dy > dx
.c70d	a70d	cd 6d 08	cmp $086d			cmp 	gxDiffX
.c710	a710	90 0f		bcc $a721			bcc 	_GDXNotLarger
.c712	a712	ce 6f 08	dec $086f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c715	a715	ad 6d 08	lda $086d			lda 	gxDiffX 					; set adjust and total other way round
.c718	a718	8d 72 08	sta $0872			sta 	gxAdjust
.c71b	a71b	ad 6e 08	lda $086e			lda 	gxDiffY
.c71e	a71e	8d 73 08	sta $0873			sta 	gxTotal
.c721	a721					_GDXNotLarger:
.c721	a721	ad 73 08	lda $0873			lda 	gxTotal
.c724	a724	4a		lsr a				lsr 	a
.c725	a725	8d 71 08	sta $0871			sta 	gxPosition
.c728	a728	60		rts				rts
.086d						gxDiffX:
>086d								.fill 	1
.086e						gxDiffY:
>086e								.fill 	1
.086f						gxIsDiffYLarger:
>086f								.fill 	1
.0870						gxDXNegative:
>0870								.fill 	1
.0871						gxPosition:
>0871								.fill 	1
.0872						gxAdjust:
>0872								.fill 	1
.0873						gxTotal:
>0873								.fill 	1
.0874						gxAddSelect:
>0874								.fill 	1
.c729	a729					GXSetColourMode:
.c729	a729	a6 36		ldx $36				ldx 	gxzTemp0
.c72b	a72b	8e de 07	stx $07de			stx 	gxColour 								; set colour
.c72e	a72e	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c730	a730	8d dd 07	sta $07dd			sta 	gxMode 									; set mode
.c733	a733	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c735	a735	9c e0 07	stz $07e0			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c738	a738	ae de 07	ldx $07de			ldx 	gxColour
.c73b	a73b	8e df 07	stx $07df			stx 	gxEORValue
.c73e	a73e	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c740	a740	90 03		bcc $a745			bcc 	_GXSDCNotAndColour
.c742	a742	8e e0 07	stx $07e0			stx 	gxANDValue
.c745	a745					_GXSDCNotAndColour:
.c745	a745	d0 03		bne $a74a			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c747	a747	9c df 07	stz $07df			stz 	gxEORValue
.c74a	a74a					_GXSDCNotAnd:
.c74a	a74a	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c74b	a74b	90 08		bcc $a755			bcc 	_GXSDCNoFlip
.c74d	a74d	ad e0 07	lda $07e0			lda	 	gxANDValue
.c750	a750	49 ff		eor #$ff			eor 	#$FF
.c752	a752	8d e0 07	sta $07e0			sta 	gxANDValue
.c755	a755					_GXSDCNoFlip:
.c755	a755	18		clc				clc
.c756	a756	60		rts				rts
.c757	a757					GXPlotPoint:
.c757	a757	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c75a	a75a	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c75d	a75d	ac e2 07	ldy $07e2			ldy 	gxOffset
.c760	a760	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c762	a762	2d e0 07	and $07e0			and 	gxANDValue
.c765	a765	4d df 07	eor $07df			eor 	gxEORValue
.c768	a768	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c76a	a76a	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; stop drawing and exit
.c76d	a76d	18		clc				clc
.c76e	a76e	60		rts				rts
.c76f	a76f					GXFillRectangle:
.c76f	a76f	38		sec				sec
.c770	a770	80 01		bra $a773			bra 	GXRectangle
.c772	a772					GXFrameRectangle:
.c772	a772	18		clc				clc
.c773	a773					GXRectangle:
.c773	a773	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c776	a776	f0 35		beq $a7ad			beq 	_GXRFail
.c778	a778	08		php				php 								; save Fill flag (CS)
.c779	a779	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c77c	a77c	20 01 ac	jsr $ac01			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c77f	a77f	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c782	a782	38		sec				sec 								; sec = Draw line
.c783	a783	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c786	a786	ad d2 07	lda $07d2			lda 	gxY0 						; reached end of rectangle ?
.c789	a789	cd d6 07	cmp $07d6			cmp 	gxY1
.c78c	a78c	f0 19		beq $a7a7			beq 	_GXRectangleExit
.c78e	a78e					_GXRectLoop:
.c78e	a78e	20 3f ab	jsr $ab3f			jsr 	GXMovePositionDown 			; down one.
.c791	a791	ee d2 07	inc $07d2			inc 	gxY0 						; change Y pos
.c794	a794	ad d2 07	lda $07d2			lda 	gxY0 						; reached last line
.c797	a797	cd d6 07	cmp $07d6			cmp 	gxY1
.c79a	a79a	f0 07		beq $a7a3			beq 	_GXLastLine
.c79c	a79c	28		plp				plp 								; get flag back
.c79d	a79d	08		php				php
.c79e	a79e	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c7a1	a7a1	80 eb		bra $a78e			bra 	_GXRectLoop
.c7a3	a7a3					_GXLastLine:
.c7a3	a7a3	38		sec				sec
.c7a4	a7a4	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0
.c7a7	a7a7					_GXRectangleExit:
.c7a7	a7a7	68		pla				pla 								; throw fill flag.
.c7a8	a7a8	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; stop drawing and exit
.c7ab	a7ab	18		clc				clc
.c7ac	a7ac	60		rts				rts
.c7ad	a7ad					_GXRFail:
.c7ad	a7ad	38		sec				sec
.c7ae	a7ae	60		rts				rts
.c7af	a7af					GXDrawLineX1X0:
.c7af	a7af	08		php				php 								; save solid/either-end
.c7b0	a7b0	38		sec				sec
.c7b1	a7b1	ad d4 07	lda $07d4			lda		gxX1
.c7b4	a7b4	ed d0 07	sbc $07d0			sbc 	gxX0
.c7b7	a7b7	85 36		sta $36				sta 	gxzTemp0
.c7b9	a7b9	ad d5 07	lda $07d5			lda 	gxX1+1
.c7bc	a7bc	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c7bf	a7bf	85 37		sta $37				sta 	gxzTemp0+1
.c7c1	a7c1	28		plp				plp
.c7c2	a7c2					GXDrawLineTemp0:
.c7c2	a7c2	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.c7c4	a7c4	48		pha				pha
.c7c5	a7c5	a5 3d		lda $3d				lda 	gxzScreen+1
.c7c7	a7c7	48		pha				pha
.c7c8	a7c8	ad e2 07	lda $07e2			lda 	gxOffset
.c7cb	a7cb	48		pha				pha
.c7cc	a7cc	a5 0b		lda $0b				lda 	GXEditSlot
.c7ce	a7ce	48		pha				pha
.c7cf	a7cf	ac e2 07	ldy $07e2			ldy 	gxOffset 					; Y offset
.c7d2	a7d2	90 1e		bcc $a7f2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c7d4	a7d4					_GXDLTLine:
.c7d4	a7d4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c7d6	a7d6	2d e0 07	and $07e0			and 	gxANDValue
.c7d9	a7d9	4d df 07	eor $07df			eor 	gxEORValue
.c7dc	a7dc	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7de	a7de	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c7e0	a7e0	d0 04		bne $a7e6			bne 	_GXDLTNoBorrow
.c7e2	a7e2	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c7e4	a7e4	30 2e		bmi $a814			bmi 	_GXDLTExit
.c7e6	a7e6					_GXDLTNoBorrow:
.c7e6	a7e6	c6 36		dec $36				dec 	gxzTemp0
.c7e8	a7e8	c8		iny				iny 								; next slot.
.c7e9	a7e9	d0 e9		bne $a7d4			bne 	_GXDLTLine
.c7eb	a7eb	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.c7ed	a7ed	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap				; check for new page.
.c7f0	a7f0	80 e2		bra $a7d4			bra 	_GXDLTLine
.c7f2	a7f2					_GXDLTEndPoints:
.c7f2	a7f2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c7f4	a7f4	2d e0 07	and $07e0			and 	gxANDValue
.c7f7	a7f7	4d df 07	eor $07df			eor 	gxEORValue
.c7fa	a7fa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7fc	a7fc	98		tya				tya 								; advance to right side
.c7fd	a7fd	18		clc				clc
.c7fe	a7fe	65 36		adc $36				adc 	gxzTemp0
.c800	a800	a8		tay				tay
.c801	a801	a5 3d		lda $3d				lda 	gxzScreen+1
.c803	a803	65 37		adc $37				adc 	gxzTemp0+1
.c805	a805	85 3d		sta $3d				sta 	gxzScreen+1
.c807	a807	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap 			; fix up.
.c80a	a80a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c80c	a80c	2d e0 07	and $07e0			and 	gxANDValue
.c80f	a80f	4d df 07	eor $07df			eor 	gxEORValue
.c812	a812	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c814	a814					_GXDLTExit:
.c814	a814	68		pla				pla
.c815	a815	85 0b		sta $0b				sta 	GXEditSlot
.c817	a817	68		pla				pla
.c818	a818	8d e2 07	sta $07e2			sta 	gxOffset
.c81b	a81b	68		pla				pla
.c81c	a81c	85 3d		sta $3d				sta 	gxzScreen+1
.c81e	a81e	68		pla				pla
.c81f	a81f	85 3c		sta $3c				sta 	gxzScreen
.c821	a821	60		rts				rts
.c822	a822					GXDLTCheckWrap:
.c822	a822	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.c824	a824	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c826	a826	90 06		bcc $a82e			bcc 	_GXDLTCWExit
.c828	a828	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c82a	a82a	85 3d		sta $3d				sta 	gxzScreen+1
.c82c	a82c	e6 0b		inc $0b				inc 	GXEditSlot
.c82e	a82e					_GXDLTCWExit:
.c82e	a82e	60		rts				rts
.c82f	a82f					GXDrawGraphicElement:
.c82f	a82f	8d 75 08	sta $0875			sta 	gxSize 						; save size
.c832	a832	3a		dec a				dec 	a
.c833	a833	8d 76 08	sta $0876			sta 	gxMask 						; and mask
.c836	a836	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP on
.c839	a839	f0 67		beq $a8a2			beq 	_GXSLFail
.c83b	a83b	ad d2 07	lda $07d2			lda 	gxY0 						; push Y on stack
.c83e	a83e	48		pha				pha
.c83f	a83f	8c 78 08	sty $0878			sty 	gxAcquireVector+1 			; and acquisition vector
.c842	a842	8e 77 08	stx $0877			stx 	gxAcquireVector
.c845	a845	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; open the bitmap.
.c848	a848	ad 7a 08	lda $087a			lda 	gxUseMode 					; scale bits
.c84b	a84b	4a		lsr a				lsr 	a
.c84c	a84c	4a		lsr a				lsr 	a
.c84d	a84d	4a		lsr a				lsr 	a
.c84e	a84e	29 07		and #$07			and		#7
.c850	a850	1a		inc a				inc 	a
.c851	a851	8d 79 08	sta $0879			sta 	gxScale
.c854	a854	64 38		stz $38				stz 	gxzTemp1					; start first line
.c856	a856					_GXGELoop:
.c856	a856	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c858	a858	2c 7a 08	bit $087a			bit 	gxUseMode 					; check for flip.
.c85b	a85b	10 06		bpl $a863			bpl		_GXNoVFlip
.c85d	a85d	ad 76 08	lda $0876			lda 	gxMask
.c860	a860	38		sec				sec
.c861	a861	e5 38		sbc $38				sbc 	gxzTemp1
.c863	a863					_GXNoVFlip:
.c863	a863	aa		tax				tax 								; get the Xth line.
.c864	a864	20 a4 a8	jsr $a8a4			jsr 	_GXCallAcquire 				; get that data.
.c867	a867	ad 79 08	lda $0879			lda 	gxScale 					; do scale identical copies of that line.
.c86a	a86a	85 39		sta $39				sta 	gxzTemp1+1
.c86c	a86c					_GXGELoop2:
.c86c	a86c	ad d2 07	lda $07d2			lda 	gxY0 						; off screen
.c86f	a86f	cd dc 07	cmp $07dc			cmp 	gxHeight
.c872	a872	b0 10		bcs $a884			bcs 	_GXDGEExit
.c874	a874	20 a7 a8	jsr $a8a7			jsr 	GXRenderOneLine 			; render line
.c877	a877	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c879	a879	d0 f1		bne $a86c			bne 	_GXGELoop2
.c87b	a87b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c87d	a87d	a5 38		lda $38				lda 	gxzTemp1
.c87f	a87f	cd 75 08	cmp $0875			cmp 	gxSize
.c882	a882	d0 d2		bne $a856			bne 	_GXGELoop
.c884	a884					_GXDGEExit:
.c884	a884	68		pla				pla 								; restore Y for next time
.c885	a885	8d d2 07	sta $07d2			sta 	gxY0
.c888	a888	ae 79 08	ldx $0879			ldx 	gxScale 					; get scale (1-8)
.c88b	a88b					_GXShiftLeft:
.c88b	a88b	18		clc				clc
.c88c	a88c	ad 75 08	lda $0875			lda 	gxSize
.c88f	a88f	6d d0 07	adc $07d0			adc 	gxX0
.c892	a892	8d d0 07	sta $07d0			sta 	gxX0
.c895	a895	90 03		bcc $a89a			bcc 	_GXSLNoCarry
.c897	a897	ee d1 07	inc $07d1			inc 	gxX0+1
.c89a	a89a					_GXSLNoCarry:
.c89a	a89a	ca		dex				dex
.c89b	a89b	d0 ee		bne $a88b			bne 	_GXShiftLeft
.c89d	a89d	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c8a0	a8a0	18		clc				clc
.c8a1	a8a1	60		rts				rts
.c8a2	a8a2					_GXSLFail:
.c8a2	a8a2	38		sec				sec
.c8a3	a8a3	60		rts				rts
.c8a4	a8a4					_GXCallAcquire:
.c8a4	a8a4	6c 77 08	jmp ($0877)			jmp 	(gxAcquireVector)
.c8a7	a8a7					GXRenderOneLine:
.c8a7	a8a7	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; calculate position/offset.
.c8aa	a8aa	ac e2 07	ldy $07e2			ldy 	gxOffset 					; Y contains position.
.c8ad	a8ad	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c8af	a8af					_GXROLLoop1:
.c8af	a8af	ad 79 08	lda $0879			lda 	gxScale 					; set to do 'scale' times
.c8b2	a8b2	85 3b		sta $3b				sta 	gxzTemp2+1
.c8b4	a8b4					_GXROLLoop2:
.c8b4	a8b4	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c8b6	a8b6	2c dd 07	bit $07dd			bit 	gxMode 						; check H Flip
.c8b9	a8b9	50 06		bvc $a8c1			bvc 	_GXNoHFlip
.c8bb	a8bb	ad 76 08	lda $0876			lda 	gxMask
.c8be	a8be	38		sec				sec
.c8bf	a8bf	e5 3a		sbc $3a				sbc 	gxzTemp2
.c8c1	a8c1					_GXNoHFlip:
.c8c1	a8c1	aa		tax				tax 								; read from the pixel buffer
.c8c2	a8c2	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c8c5	a8c5	d0 07		bne $a8ce			bne 	_GXDraw 					; draw if non zero
.c8c7	a8c7	ad 7a 08	lda $087a			lda 	gxUseMode 					; check to see if solid background
.c8ca	a8ca	29 04		and #$04			and 	#4
.c8cc	a8cc	f0 0a		beq $a8d8			beq 	_GXZeroPixel
.c8ce	a8ce					_GXDraw:
.c8ce	a8ce	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c8d0	a8d0	2d e0 07	and $07e0			and 	gxANDValue
.c8d3	a8d3	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c8d6	a8d6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8d8	a8d8					_GXZeroPixel:
.c8d8	a8d8	c8		iny				iny 								; advance pointer
.c8d9	a8d9	d0 05		bne $a8e0			bne 	_GXNoShift
.c8db	a8db	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c8dd	a8dd	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap				; check for new page.
.c8e0	a8e0					_GXNoShift:
.c8e0	a8e0	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c8e2	a8e2	d0 d0		bne $a8b4			bne 	_GXROLLoop2
.c8e4	a8e4	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c8e6	a8e6	a5 3a		lda $3a				lda 	gxzTemp2
.c8e8	a8e8	cd 75 08	cmp $0875			cmp 	gxSize
.c8eb	a8eb	d0 c2		bne $a8af			bne 	_GXROLLoop1
.c8ed	a8ed	ee d2 07	inc $07d2			inc 	gxY0
.c8f0	a8f0	60		rts				rts
.0875						gxSize:
>0875								.fill 	1
.0876						gxMask:
>0876								.fill 	1
.0877						gxAcquireVector:
>0877								.fill 	2
.0879						gxScale:
>0879								.fill 	1
.087a						gxUseMode:
>087a								.fill 	1
.c8f1	a8f1					GXFontHandler:
.c8f1	a8f1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c8f3	a8f3	4d dd 07	eor $07dd			eor 	gxMode
.c8f6	a8f6	8d 7a 08	sta $087a			sta 	gxUseMode
.c8f9	a8f9	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c8fb	a8fb	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c8fd	a8fd	26 37		rol $37				rol	 	gxzTemp0+1
.c8ff	a8ff	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.c901	a901	26 37		rol $37				rol	 	gxzTemp0+1
.c903	a903	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.c905	a905	26 37		rol $37				rol	 	gxzTemp0+1
.c907	a907	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.c909	a909	09 c0		ora #$c0			ora 	#$C0
.c90b	a90b	85 37		sta $37				sta 	gxzTemp0+1
.c90d	a90d	a9 08		lda #$08			lda 	#8 							; size 8x8
.c90f	a90f	a2 17		ldx #$17			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.c911	a911	a0 a9		ldy #$a9			ldy 	#GXGetGraphicDataFont >> 8
.c913	a913	20 2f a8	jsr $a82f			jsr 	GXDrawGraphicElement
.c916	a916	60		rts				rts
.c917	a917					GXGetGraphicDataFont:
.c917	a917	8a		txa				txa 								; X->Y
.c918	a918	a8		tay				tay
.c919	a919	a6 01		ldx $01				ldx 	1 							; preserve old value
.c91b	a91b	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.c91d	a91d	85 01		sta $01				sta 	1
.c91f	a91f	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.c921	a921	86 01		stx $01				stx 	1 							; put old value back.
.c923	a923	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.c925	a925					_GXExpand:
.c925	a925	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.c928	a928	0a		asl a				asl 	a 							; shift bit 7 into C
.c929	a929	90 08		bcc $a933			bcc 	_GXNoPixel
.c92b	a92b	48		pha				pha 								; if set, set pixel buffer to current colour.
.c92c	a92c	ad de 07	lda $07de			lda 	gxColour
.c92f	a92f	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.c932	a932	68		pla				pla
.c933	a933					_GXNoPixel:
.c933	a933	e8		inx				inx 								; do the whole byte.
.c934	a934	e0 08		cpx #$08			cpx 	#8
.c936	a936	d0 ed		bne $a925			bne 	_GXExpand
.c938	a938	60		rts				rts
.c939	a939					GXSpriteHandler:
.c939	a939	ad d8 07	lda $07d8			lda 	gxSpritesOn 				; sprites on ?
.c93c	a93c	f0 23		beq $a961			beq 	_GXSHExit
.c93e	a93e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c940	a940	4d dd 07	eor $07dd			eor 	gxMode
.c943	a943	8d 7a 08	sta $087a			sta 	gxUseMode
.c946	a946	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.c948	a948	da		phx				phx
.c949	a949	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; can access sprite information
.c94c	a94c	68		pla				pla
.c94d	a94d	20 ba ab	jsr $abba			jsr 	GXFindSprite 				; get the sprite address
.c950	a950	08		php				php
.c951	a951	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c954	a954	28		plp				plp
.c955	a955	b0 0a		bcs $a961			bcs		_GXSHExit 					; exit if find failed.
.c957	a957	ad 7b 08	lda $087b			lda 	gxSizePixels 				; return size
.c95a	a95a	a2 62		ldx #$62			ldx 	#GXSpriteAcquire & $FF
.c95c	a95c	a0 a9		ldy #$a9			ldy 	#GXSpriteAcquire >> 8
.c95e	a95e	20 2f a8	jsr $a82f			jsr 	GXDrawGraphicElement
.c961	a961					_GXSHExit:
.c961	a961	60		rts				rts
.c962	a962					GXSpriteAcquire:
.c962	a962	ad db 07	lda $07db			lda 	gxSpritePage				; point to base page
.c965	a965	85 0b		sta $0b				sta 	GXEditSlot
.c967	a967	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.c969	a969	a9 00		lda #$00			lda 	#0
.c96b	a96b	ae 7c 08	ldx $087c			ldx 	gxSizeBits
.c96e	a96e					_GXTimesRowNumber:
.c96e	a96e	18		clc				clc
.c96f	a96f	65 36		adc $36				adc 	gxzTemp0
.c971	a971	ca		dex				dex
.c972	a972	10 fa		bpl $a96e			bpl 	_GXTimesRowNumber
.c974	a974	64 37		stz $37				stz 	gxzTemp0+1
.c976	a976	0a		asl a				asl 	a 							; row x 2,4,6,8
.c977	a977	26 37		rol $37				rol 	gxzTemp0+1
.c979	a979	0a		asl a				asl 	a 							; row x 4,8,12,16
.c97a	a97a	26 37		rol $37				rol 	gxzTemp0+1
.c97c	a97c	0a		asl a				asl 	a 							; row x 8,16,24,32
.c97d	a97d	26 37		rol $37				rol 	gxzTemp0+1
.c97f	a97f	85 36		sta $36				sta 	gxzTemp0
.c981	a981	18		clc				clc 								; add base address.
.c982	a982	a5 36		lda $36				lda 	gxzTemp0
.c984	a984	6d 7e 08	adc $087e			adc 	gxSpriteOffset
.c987	a987	85 36		sta $36				sta 	gxzTemp0
.c989	a989	a5 37		lda $37				lda 	gxzTemp0+1
.c98b	a98b	6d 7f 08	adc $087f			adc 	gxSpriteOffset+1
.c98e	a98e					_GXSAFindPage:
.c98e	a98e	c9 20		cmp #$20			cmp 	#$20 						; on this page
.c990	a990	90 06		bcc $a998			bcc 	_GXSAFoundPage
.c992	a992	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.c994	a994	e6 0b		inc $0b				inc 	GXEditSlot
.c996	a996	80 f6		bra $a98e			bra 	_GXSAFindPage
.c998	a998					_GXSAFoundPage:
.c998	a998	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.c99a	a99a	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.c99c	a99c	a0 00		ldy #$00			ldy 	#0
.c99e	a99e					_GXSACopyLoop:
.c99e	a99e	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.c9a0	a9a0	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.c9a3	a9a3	c8		iny				iny
.c9a4	a9a4	cc 7b 08	cpy $087b			cpy 	gxSizePixels
.c9a7	a9a7	d0 f5		bne $a99e			bne 	_GXSACopyLoop
.c9a9	a9a9	60		rts				rts
.c9aa	a9aa					GXSelect:
.c9aa	a9aa	ad d8 07	lda $07d8			lda 	gxSpritesOn
.c9ad	a9ad	f0 22		beq $a9d1			beq 	_GXSFail
.c9af	a9af	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.c9b1	a9b1	c9 40		cmp #$40			cmp 	#64
.c9b3	a9b3	b0 1c		bcs $a9d1			bcs 	_GXSFail
.c9b5	a9b5	8d e3 07	sta $07e3			sta 	GSCurrentSpriteID
.c9b8	a9b8	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.c9ba	a9ba	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.c9bc	a9bc	06 36		asl $36				asl 	gxzTemp0
.c9be	a9be	06 36		asl $36				asl 	gxzTemp0
.c9c0	a9c0	06 36		asl $36				asl 	gxzTemp0
.c9c2	a9c2	2a		rol a				rol 	a
.c9c3	a9c3	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.c9c5	a9c5	8d e5 07	sta $07e5			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.c9c8	a9c8	85 37		sta $37				sta 	gxzTemp0+1
.c9ca	a9ca	a5 36		lda $36				lda 	gxzTemp0
.c9cc	a9cc	8d e4 07	sta $07e4			sta 	GSCurrentSpriteAddr
.c9cf	a9cf	18		clc				clc
.c9d0	a9d0	60		rts				rts
.c9d1	a9d1					_GXSFail:
.c9d1	a9d1	38		sec				sec
.c9d2	a9d2	60		rts				rts
.c9d3	a9d3					GXSelectImage:
.c9d3	a9d3	ad d8 07	lda $07d8			lda 	gxSpritesOn
.c9d6	a9d6	f0 74		beq $aa4c			beq 	_GXSIFail
.c9d8	a9d8	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.c9db	a9db	f0 6f		beq $aa4c			beq 	_GXSIFail 					; (checking the MSB)
.c9dd	a9dd	64 01		stz $01				stz 	1
.c9df	a9df	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.c9e1	a9e1	d0 6b		bne $aa4e			bne 	_GXSIHide
.c9e3	a9e3	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.c9e5	a9e5	48		pha				pha
.c9e6	a9e6	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap
.c9e9	a9e9	68		pla				pla
.c9ea	a9ea	20 ba ab	jsr $abba			jsr 	GXFindSprite
.c9ed	a9ed	b0 5a		bcs $aa49			bcs 	_GXSICloseFail 				; no image
.c9ef	a9ef	a0 01		ldy #$01			ldy 	#1
.c9f1	a9f1	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr
.c9f4	a9f4	85 36		sta $36				sta 	gxzTemp0
.c9f6	a9f6	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1
.c9f9	a9f9	85 37		sta $37				sta 	gxzTemp0+1
.c9fb	a9fb	ad 7e 08	lda $087e			lda 	gxSpriteOffset
.c9fe	a9fe	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca00	aa00	18		clc				clc
.ca01	aa01	ad 7f 08	lda $087f			lda 	gxSpriteOffset+1
.ca04	aa04	6d e6 07	adc $07e6			adc 	gxSpriteOffsetBase
.ca07	aa07	c8		iny				iny
.ca08	aa08	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca0a	aa0a	ad e7 07	lda $07e7			lda 	gxSpriteOffsetBase+1
.ca0d	aa0d	69 00		adc #$00			adc 	#0
.ca0f	aa0f	c8		iny				iny
.ca10	aa10	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca12	aa12	ad 7c 08	lda $087c			lda 	gxSizeBits 					; get raw size
.ca15	aa15	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ca17	aa17	2a		rol a				rol 	a 							; x 2
.ca18	aa18	0a		asl a				asl 	a 							; x 4
.ca19	aa19	0a		asl a				asl 	a 							; x 8
.ca1a	aa1a	0a		asl a				asl 	a 							; x 16
.ca1b	aa1b	0d 7d 08	ora $087d			ora 	gxSpriteLUT 				; Or with LUT
.ca1e	aa1e	0a		asl a				asl 	a 							; 1 shift
.ca1f	aa1f	09 01		ora #$01			ora 	#1 							; enable sprite.
.ca21	aa21	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ca23	aa23	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.ca26	aa26	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ca29	aa29	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ca2c	aa2c	29 3f		and #$3f			and 	#$3F
.ca2e	aa2e	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.ca31	aa31	ad 7c 08	lda $087c			lda 	gxSizeBits 					; get bit size
.ca34	aa34	6a		ror a				ror 	a 							; shift into bits 6/7
.ca35	aa35	6a		ror a				ror 	a
.ca36	aa36	6a		ror a				ror 	a
.ca37	aa37	29 c0		and #$c0			and 	#$C0
.ca39	aa39	1d 28 08	ora $0828,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ca3c	aa3c	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.ca3f	aa3f	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ca42	aa42	29 7f		and #$7f			and 	#$7F
.ca44	aa44	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.ca47	aa47	18		clc				clc
.ca48	aa48	60		rts				rts
.ca49	aa49					_GXSICloseFail:
.ca49	aa49	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.ca4c	aa4c					_GXSIFail:
.ca4c	aa4c	38		sec				sec
.ca4d	aa4d	60		rts				rts
.ca4e	aa4e					_GXSIHide:
.ca4e	aa4e	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ca51	aa51	85 36		sta $36				sta 	gxzTemp0
.ca53	aa53	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1
.ca56	aa56	85 37		sta $37				sta 	gxzTemp0+1
.ca58	aa58	a9 00		lda #$00			lda 	#0
.ca5a	aa5a	92 36		sta ($36)			sta 	(gxzTemp0)
.ca5c	aa5c	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; get sprite ID
.ca5f	aa5f	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.ca62	aa62	09 80		ora #$80			ora 	#$80
.ca64	aa64	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXMoveSprite:
.ca69	aa69	ad d8 07	lda $07d8			lda 	gxSpritesOn
.ca6c	aa6c	f0 65		beq $aad3			beq 	_GXSIFail
.ca6e	aa6e	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ca71	aa71	f0 60		beq $aad3			beq 	_GXSIFail
.ca73	aa73	85 37		sta $37				sta 	gxzTemp0+1
.ca75	aa75	a0 04		ldy #$04			ldy 	#4
.ca77	aa77	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr
.ca7a	aa7a	85 36		sta $36				sta 	gxzTemp0
.ca7c	aa7c	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.ca7f	aa7f	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.ca82	aa82	2a		rol a				rol 	a	 						; into bits 0,1.
.ca83	aa83	2a		rol a				rol 	a
.ca84	aa84	2a		rol a				rol 	a
.ca85	aa85	29 03		and #$03			and 	#3
.ca87	aa87	aa		tax				tax
.ca88	aa88	bd d5 aa	lda $aad5,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.ca8b	aa8b	48		pha				pha
.ca8c	aa8c	18		clc				clc
.ca8d	aa8d	6d d0 07	adc $07d0			adc 	gxX0						; copy position.
.ca90	aa90	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca92	aa92	c8		iny				iny
.ca93	aa93	ad d1 07	lda $07d1			lda 	gxX0+1
.ca96	aa96	69 00		adc #$00			adc 	#0
.ca98	aa98	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca9a	aa9a	c8		iny				iny
.ca9b	aa9b	68		pla				pla
.ca9c	aa9c	18		clc				clc
.ca9d	aa9d	6d d2 07	adc $07d2			adc 	gxY0
.caa0	aaa0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa2	aaa2	a9 00		lda #$00			lda 	#0
.caa4	aaa4	69 00		adc #$00			adc 	#0
.caa6	aaa6	c8		iny				iny
.caa7	aaa7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa9	aaa9	4e d1 07	lsr $07d1			lsr 	gxX0+1 						; divide X by 4
.caac	aaac	6e d0 07	ror $07d0			ror 	gxX0
.caaf	aaaf	4e d0 07	lsr $07d0			lsr 	gxX0
.cab2	aab2	4e d2 07	lsr $07d2			lsr 	gxY0 						; divide Y by 4
.cab5	aab5	4e d2 07	lsr $07d2			lsr 	gxY0
.cab8	aab8	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cabb	aabb	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x
.cabe	aabe	29 80		and #$80			and 	#$80
.cac0	aac0	0d d0 07	ora $07d0			ora 	gxX0
.cac3	aac3	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.cac6	aac6	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.cac9	aac9	29 c0		and #$c0			and 	#$C0
.cacb	aacb	0d d2 07	ora $07d2			ora 	gxY0
.cace	aace	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.cad1	aad1	18		clc				clc
.cad2	aad2	60		rts				rts
.cad3	aad3					_GXSIFail:
.cad3	aad3	38		sec				sec
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXMSOffset:
>cad5	aad5	1c						.byte 	32-8/2
>cad6	aad6	18						.byte 	32-16/2
>cad7	aad7	14						.byte 	32-24/2
>cad8	aad8	10						.byte 	32-32/2
.cad9	aad9					GXOpenBitmap:
.cad9	aad9	78		sei				sei 								; no interrupts here
.cada	aada	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cadc	aadc	8d e1 07	sta $07e1			sta 	gxOriginalLUTValue
.cadf	aadf	58		cli				cli
.cae0	aae0	60		rts				rts
.cae1	aae1					GXCloseBitmap:
.cae1	aae1	78		sei				sei
.cae2	aae2	ad e1 07	lda $07e1			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cae5	aae5	85 0b		sta $0b				sta 	GXEditSlot
.cae7	aae7	58		cli				cli
.cae8	aae8	60		rts				rts
.cae9	aae9					gxPositionCalc:
.cae9	aae9	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.caeb	aaeb	48		pha				pha
.caec	aaec	ad d2 07	lda $07d2			lda 	gxY0 							; gxzScreen = Y0
.caef	aaef	85 3c		sta $3c				sta 	gxzScreen
.caf1	aaf1	64 3d		stz $3d				stz 	gxzScreen+1
.caf3	aaf3	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.caf5	aaf5	26 3d		rol $3d				rol 	gxzScreen+1
.caf7	aaf7	06 3c		asl $3c				asl 	gxzScreen
.caf9	aaf9	26 3d		rol $3d				rol 	gxzScreen+1
.cafb	aafb	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cafc	aafc	65 3c		adc $3c				adc 	gxzScreen
.cafe	aafe	85 3c		sta $3c				sta 	gxzScreen
.cb00	ab00	90 02		bcc $ab04			bcc 	_GXPCNoCarry
.cb02	ab02	e6 3d		inc $3d				inc 	gxzScreen+1
.cb04	ab04					_GXPCNoCarry:
.cb04	ab04	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.cb06	ab06	26 3d		rol $3d				rol 	gxzScreen+1
.cb08	ab08	a5 3d		lda $3d				lda	 	gxzScreen+1
.cb0a	ab0a	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.cb0c	ab0c	64 3d		stz $3d				stz 	gxzScreen+1
.cb0e	ab0e	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.cb10	ab10					_GXPCMultiply32:
.cb10	ab10	06 3c		asl $3c				asl 	gxzScreen
.cb12	ab12	26 3d		rol $3d				rol 	gxzScreen+1
.cb14	ab14	3a		dec a				dec 	a
.cb15	ab15	d0 f9		bne $ab10			bne 	_GXPCMultiply32
.cb17	ab17	18		clc				clc
.cb18	ab18	ad d0 07	lda $07d0			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cb1b	ab1b	65 3c		adc $3c				adc 	gxzScreen
.cb1d	ab1d	8d e2 07	sta $07e2			sta 	gxOffset
.cb20	ab20	ad d1 07	lda $07d1			lda 	gxX0+1
.cb23	ab23	65 3d		adc $3d				adc 	gxzScreen+1
.cb25	ab25	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cb27	ab27	90 04		bcc $ab2d			bcc 	_GXPCNoOverflow
.cb29	ab29	29 1f		and #$1f			and 	#$1F 						; fix it up
.cb2b	ab2b	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cb2d	ab2d					_GXPCNoOverflow:
.cb2d	ab2d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cb2f	ab2f	85 3d		sta $3d				sta 	gxzScreen+1
.cb31	ab31	64 3c		stz $3c				stz 	gxzScreen
.cb33	ab33	18		clc				clc
.cb34	ab34	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cb36	ab36	6d da 07	adc $07da			adc 	gxBasePage 					; by adding the base page
.cb39	ab39	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cb3b	ab3b	68		pla				pla
.cb3c	ab3c	85 36		sta $36				sta 	gxzTemp0
.cb3e	ab3e	60		rts				rts
.cb3f	ab3f					GXMovePositionDown:
.cb3f	ab3f	18		clc				clc 								; add 320 to offset/temp+1
.cb40	ab40	ad e2 07	lda $07e2			lda 	gxOffset
.cb43	ab43	69 40		adc #$40			adc 	#64
.cb45	ab45	8d e2 07	sta $07e2			sta 	gxOffset
.cb48	ab48	a5 3d		lda $3d				lda 	gxzScreen+1
.cb4a	ab4a	69 01		adc #$01			adc 	#1
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb50	ab50	90 07		bcc $ab59			bcc 	_GXMPDExit
.cb52	ab52	38		sec				sec  								; next page, adjust address
.cb53	ab53	e9 20		sbc #$20			sbc 	#$20
.cb55	ab55	85 3d		sta $3d				sta 	gxzScreen+1
.cb57	ab57	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.cb59	ab59					_GXMPDExit:
.cb59	ab59	60		rts				rts
.cb5a	ab5a					GXCollide:
.cb5a	ab5a	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cb5c	ab5c	aa		tax				tax
.cb5d	ab5d	05 37		ora $37				ora 	gxzTemp0+1
.cb5f	ab5f	29 c0		and #$c0			and 	#$C0
.cb61	ab61	38		sec				sec
.cb62	ab62	d0 53		bne $abb7			bne 	_GXCollideFail 				; if either >= 64, fail.
.cb64	ab64	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cb66	ab66	b9 e8 07	lda $07e8,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cb69	ab69	1d e8 07	ora $07e8,x			ora 	gxSpriteLow,x
.cb6c	ab6c	30 48		bmi $abb6			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cb6e	ab6e	18		clc				clc 								; need to calculate sum of sizes.
.cb6f	ab6f	b9 28 08	lda $0828,y			lda 	gxSpriteHigh,y
.cb72	ab72	7d 28 08	adc $0828,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cb75	ab75	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cb77	ab77	6a		ror a				ror 	a 							; 5/6/7
.cb78	ab78	4a		lsr a				lsr 	a 							; 4/5/6
.cb79	ab79	4a		lsr a				lsr 	a 							; 3/4/5
.cb7a	ab7a	4a		lsr a				lsr 	a 							; 2/3/4
.cb7b	ab7b	18		clc				clc
.cb7c	ab7c	69 08		adc #$08			adc 	#$08
.cb7e	ab7e	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cb7f	ab7f	4a		lsr a				lsr 	a
.cb80	ab80	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cb82	ab82	b9 28 08	lda $0828,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cb85	ab85	29 3f		and #$3f			and 	#$3F
.cb87	ab87	85 39		sta $39				sta 	gxzTemp1+1
.cb89	ab89	38		sec				sec
.cb8a	ab8a	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.cb8d	ab8d	29 3f		and #$3f			and 	#$3F
.cb8f	ab8f	e5 39		sbc $39				sbc 	gxzTemp1+1
.cb91	ab91	b0 03		bcs $ab96			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cb93	ab93	49 ff		eor #$ff			eor 	#$FF
.cb95	ab95	1a		inc a				inc 	a
.cb96	ab96					_GXCAbs1:
.cb96	ab96	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cb98	ab98	b0 1c		bcs $abb6			bcs 	_GXOkayFail
.cb9a	ab9a	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cb9c	ab9c	38		sec				sec 								; calculate |x1-x0|
.cb9d	ab9d	b9 e8 07	lda $07e8,y			lda 	gxSpriteLow,y
.cba0	aba0	fd e8 07	sbc $07e8,x			sbc 	gxSpriteLow,x
.cba3	aba3	b0 03		bcs $aba8			bcs 	_GXCAbs2
.cba5	aba5	49 ff		eor #$ff			eor 	#$FF
.cba7	aba7	1a		inc a				inc 	a
.cba8	aba8					_GXCAbs2:
.cba8	aba8	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cbaa	abaa	b0 0a		bcs $abb6			bcs 	_GXOkayFail
.cbac	abac	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cbae	abae	90 02		bcc $abb2			bcc 	_GXCHaveLowest
.cbb0	abb0	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cbb2	abb2					_GXCHaveLowest:
.cbb2	abb2	0a		asl a				asl 	a 							; scale to allow for >> 2
.cbb3	abb3	0a		asl a				asl 	a
.cbb4	abb4	18		clc				clc
.cbb5	abb5	60		rts				rts
.cbb6	abb6					_GXOkayFail:
.cbb6	abb6	18		clc				clc
.cbb7	abb7					_GXCollideFail:
.cbb7	abb7	a9 ff		lda #$ff			lda 	#$FF
.cbb9	abb9	60		rts				rts
.cbba	abba					GXFindSprite:
.cbba	abba	aa		tax				tax
.cbbb	abbb	ad db 07	lda $07db			lda 	gxSpritePage 				; access the base page of the sprite
.cbbe	abbe	85 0b		sta $0b				sta 	GXEditSlot
.cbc0	abc0	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cbc3	abc3	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cbc6	abc6	f0 33		beq $abfb			beq 	_GXFSFail
.cbc8	abc8	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cbcb	abcb	8d 7f 08	sta $087f			sta 	gxSpriteOffset+1
.cbce	abce	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cbd1	abd1	48		pha				pha 								; save twice
.cbd2	abd2	48		pha				pha
.cbd3	abd3	29 03		and #$03			and 	#3 							; get sprite size
.cbd5	abd5	8d 7c 08	sta $087c			sta 	gxSizeBits 					; save raw (0-3)
.cbd8	abd8	aa		tax				tax
.cbd9	abd9	bd fd ab	lda $abfd,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cbdc	abdc	8d 7b 08	sta $087b			sta 	gxSizePixels 					; save (8/16/24/32)
.cbdf	abdf	68		pla				pla 								; get LUT
.cbe0	abe0	4a		lsr a				lsr		a
.cbe1	abe1	4a		lsr a				lsr		a
.cbe2	abe2	29 03		and #$03			and 	#3
.cbe4	abe4	8d 7d 08	sta $087d			sta 	gxSpriteLUT
.cbe7	abe7	68		pla				pla 								; address, neeeds to be x 4
.cbe8	abe8	29 f0		and #$f0			and 	#$F0
.cbea	abea	8d 7e 08	sta $087e			sta 	gxSpriteOffset
.cbed	abed	0e 7e 08	asl $087e			asl 	gxSpriteOffset
.cbf0	abf0	2e 7f 08	rol $087f			rol 	gxSpriteOffset+1
.cbf3	abf3	0e 7e 08	asl $087e			asl 	gxSpriteOffset
.cbf6	abf6	2e 7f 08	rol $087f			rol 	gxSpriteOffset+1
.cbf9	abf9	18		clc				clc
.cbfa	abfa	60		rts				rts
.cbfb	abfb					_GXFSFail:
.cbfb	abfb	38		sec				sec
.cbfc	abfc	60		rts				rts
.cbfd	abfd					_GXFXSSTTable:
>cbfd	abfd	08 10 18 20					.byte 	8,16,24,32
.087b						gxSizePixels:
>087b								.fill 	1
.087c						gxSizeBits:
>087c								.fill 	1
.087d						gxSpriteLUT:
>087d								.fill 	1
.087e						gxSpriteOffset:
>087e								.fill 	2
.cc01	ac01					GXSortXY:
.cc01	ac01	20 1f ac	jsr $ac1f			jsr 	GXSortY 					; will be sorted on Y now
.cc04	ac04	ad d0 07	lda $07d0			lda 	gxX0 						; compare X0 v X1
.cc07	ac07	cd d4 07	cmp $07d4			cmp 	gxX1
.cc0a	ac0a	ad d1 07	lda $07d1			lda 	gxX0+1
.cc0d	ac0d	ed d5 07	sbc $07d5			sbc 	gxX1+1
.cc10	ac10	90 0c		bcc $ac1e			bcc 	_GXSXYExit 					; X0 < X1 exit
.cc12	ac12	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cc14	ac14	a0 04		ldy #$04			ldy 	#4
.cc16	ac16	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc19	ac19	e8		inx				inx
.cc1a	ac1a	c8		iny				iny
.cc1b	ac1b	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc1e	ac1e					_GXSXYExit:
.cc1e	ac1e	60		rts				rts
.cc1f	ac1f					GXSortY:
.cc1f	ac1f	ad d2 07	lda $07d2			lda 	gxY0 						; if Y0 >= Y1
.cc22	ac22	cd d6 07	cmp $07d6			cmp 	gxY1
.cc25	ac25	90 0b		bcc $ac32			bcc 	_GXSYSorted
.cc27	ac27	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cc29	ac29	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cc2b	ac2b					_GXSwap1:
.cc2b	ac2b	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc2e	ac2e	88		dey				dey
.cc2f	ac2f	ca		dex				dex
.cc30	ac30	10 f9		bpl $ac2b			bpl 	_GXSwap1
.cc32	ac32					_GXSYSorted:
.cc32	ac32	60		rts				rts
.cc33	ac33					GXSwapXY:
.cc33	ac33	bd d0 07	lda $07d0,x			lda 	gxX0,x
.cc36	ac36	48		pha				pha
.cc37	ac37	b9 d0 07	lda $07d0,y			lda 	gxX0,y
.cc3a	ac3a	9d d0 07	sta $07d0,x			sta 	gxX0,x
.cc3d	ac3d	68		pla				pla
.cc3e	ac3e	99 d0 07	sta $07d0,y			sta 	gxX0,y
.cc41	ac41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cc42	ac42					KeywordSet0:
>cc42	ac42	00 65					.text	0,$65,""               ; $80 !0:EOF
>cc44	ac44	00 58					.text	0,$58,""               ; $81 !1:SH1
>cc46	ac46	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cc48	ac48	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cc4e	ac4e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cc56	ac56	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cc5c	ac5c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cc63	ac63	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cc6b	ac6b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cc72	ac72	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cc79	ac79	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cc80	ac80	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cc86	ac86	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cc8e	ac8e	45 24 28
>cc91	ac91	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cc99	ac99	45 24 28
>cc9c	ac9c	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cca2	aca2	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ccaa	acaa	28
>ccab	acab	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ccb3	acb3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>ccb9	acb9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>ccc1	acc1	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ccc9	acc9	55 4e 54 28
>cccd	accd	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>ccd5	acd5	54 24 28
>ccd8	acd8	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>ccdf	acdf	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cce6	ace6	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cced	aced	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>ccf5	acf5	4e 28
>ccf7	acf7	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ccff	acff	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cd05	ad05	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cd0b	ad0b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cd12	ad12	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cd18	ad18	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cd1e	ad1e	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cd25	ad25	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cd2d	ad2d	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cd35	ad35	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cd3d	ad3d	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cd45	ad45	47 28
>cd47	ad47	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cd4f	ad4f	28
>cd50	ad50	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cd58	ad58	28
>cd59	ad59	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cd5f	ad5f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cd65	ad65	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cd6b	ad6b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cd72	ad72	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>cd7a	ad7a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>cd80	ad80	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>cd86	ad86	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>cd8b	ad8b	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>cd8f	ad8f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>cd95	ad95	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>cd9d	ad9d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>cda4	ada4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>cdab	adab	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>cdb3	adb3	43
>cdb4	adb4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>cdba	adba	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>cdc0	adc0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>cdc7	adc7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>cdcd	adcd	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>cdd1	add1	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>cdd5	add5	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>cddb	addb	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>cde3	ade3	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>cdea	adea	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>cdf1	adf1	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>cdf9	adf9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cdff	adff	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>ce04	ae04	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>ce0c	ae0c	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>ce12	ae12	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>ce18	ae18	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>ce1d	ae1d	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>ce23	ae23	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>ce2a	ae2a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>ce2f	ae2f	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>ce35	ae35	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>ce3c	ae3c	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>ce44	ae44	59
>ce45	ae45	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>ce4a	ae4a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>ce4e	ae4e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>ce56	ae56	45
>ce57	ae57	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>ce5f	ae5f	45
>ce60	ae60	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>ce66	ae66	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>ce6c	ae6c	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>ce73	ae73	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>ce7a	ae7a	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>ce81	ae81	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>ce87	ae87	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>ce8d	ae8d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>ce92	ae92	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>ce99	ae99	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>cea0	aea0	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cea8	aea8	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>ceae	aeae	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>ceb2	aeb2	ff					.text	$FF
.ceb3	aeb3					KeywordSet1:
>ceb3	aeb3	00 65					.text	0,$65,""               ; $80 !0:EOF
>ceb5	aeb5	00 58					.text	0,$58,""               ; $81 !1:SH1
>ceb7	aeb7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ceb9	aeb9	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cec1	aec1	4c 45
>cec3	aec3	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cecb	aecb	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ced3	aed3	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>ceda	aeda	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cee1	aee1	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cee6	aee6	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>ceee	aeee	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cef3	aef3	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cef8	aef8	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>ceff	aeff	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>cf04	af04	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>cf0c	af0c	45
>cf0d	af0d	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>cf11	af11	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>cf18	af18	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>cf1e	af1e	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>cf25	af25	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>cf2c	af2c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>cf32	af32	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>cf38	af38	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>cf40	af40	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>cf47	af47	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>cf4c	af4c	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>cf52	af52	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>cf59	af59	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>cf61	af61	45
>cf62	af62	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>cf6a	af6a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>cf6f	af6f	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>cf75	af75	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>cf7d	af7d	45
>cf7e	af7e	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>cf86	af86	45
>cf87	af87	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>cf8e	af8e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>cf96	af96	53
>cf97	af97	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>cf9d	af9d	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a4 TRY
>cfa2	afa2	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a5 VERIFY
>cfaa	afaa	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a6 XGO
>cfaf	afaf	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a7 XLOAD
>cfb6	afb6	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a8 ZAP
>cfbb	afbb	ff					.text	$FF
.cfbc	afbc					KeywordSet2:
>cfbc	afbc	00 65					.text	0,$65,""               ; $80 !0:EOF
>cfbe	afbe	00 58					.text	0,$58,""               ; $81 !1:SH1
>cfc0	afc0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cfc2	afc2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>cfc7	afc7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>cfcc	afcc	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>cfd1	afd1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>cfd6	afd6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>cfdb	afdb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>cfe0	afe0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>cfe5	afe5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>cfea	afea	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>cfef	afef	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>cff4	aff4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>cff9	aff9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>cffe	affe	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d003	b003	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d008	b008	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d00d	b00d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d012	b012	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d017	b017	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d01c	b01c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d021	b021	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d026	b026	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d02b	b02b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d030	b030	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d035	b035	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d03a	b03a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d03f	b03f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d044	b044	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d049	b049	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d04e	b04e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d053	b053	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d058	b058	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d05d	b05d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d062	b062	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d067	b067	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d06c	b06c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d071	b071	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d076	b076	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d07b	b07b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d080	b080	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d085	b085	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d08a	b08a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d08f	b08f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d094	b094	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d099	b099	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d09e	b09e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d0a3	b0a3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d0a8	b0a8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d0ad	b0ad	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d0b2	b0b2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d0b7	b0b7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d0bc	b0bc	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d0c1	b0c1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d0c6	b0c6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d0cb	b0cb	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d0d0	b0d0	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d0d5	b0d5	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d0da	b0da	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d0df	b0df	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d0e4	b0e4	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d0e9	b0e9	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d0ee	b0ee	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d0f3	b0f3	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d0f8	b0f8	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d0fd	b0fd	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d102	b102	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d107	b107	ff					.text	$FF
.d108	b108					Export_TKListConvertLine:
.d108	b108	48		pha				pha 								; save indent on the stack
.d109	b109	9c 19 04	stz $0419			stz 	tbOffset
.d10c	b10c	9c 29 04	stz $0429			stz 	tokenBuffer
.d10f	b10f	9c 25 04	stz $0425			stz 	currentListColour
.d112	b112	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d114	b114	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d117	b117	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d119	b119	b1 30		lda ($30),y			lda 	(codePtr),y
.d11b	b11b	aa		tax				tax
.d11c	b11c	88		dey				dey
.d11d	b11d	b1 30		lda ($30),y			lda 	(codePtr),y
.d11f	b11f	20 02 b3	jsr $b302			jsr 	LCLWriteNumberXA
.d122	b122	68		pla				pla 								; adjustment to indent
.d123	b123	48		pha				pha 								; save on stack
.d124	b124	10 0c		bpl $b132			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d126	b126	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d127	b127	6d 22 04	adc $0422			adc 	listIndent
.d12a	b12a	8d 22 04	sta $0422			sta 	listIndent
.d12d	b12d	10 03		bpl $b132			bpl 	_LCNoAdjust
.d12f	b12f	9c 22 04	stz $0422			stz 	listIndent
.d132	b132					_LCNoAdjust:
.d132	b132	18		clc				clc		 							; work out actual indent.
.d133	b133	ad 22 04	lda $0422			lda 	listIndent
.d136	b136	0a		asl a				asl 	a
.d137	b137	69 07		adc #$07			adc 	#7
.d139	b139	85 36		sta $36				sta 	zTemp0
.d13b	b13b					_LCPadOut:
.d13b	b13b	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d13d	b13d	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d140	b140	ad 19 04	lda $0419			lda 	tbOffset
.d143	b143	c5 36		cmp $36				cmp 	zTemp0
.d145	b145	d0 f4		bne $b13b			bne 	_LCPadOut
.d147	b147	a0 03		ldy #$03			ldy 	#3 							; start position.
.d149	b149					_LCMainLoop:
.d149	b149	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d14b	b14b	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d14e	b14e	b1 30		lda ($30),y			lda 	(codePtr),y
.d150	b150	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d152	b152	f0 17		beq $b16b			beq 	_LCExit
.d154	b154	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d156	b156	90 1e		bcc $b176			bcc 	_LCDoubles
.d158	b158	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d15a	b15a	90 2a		bcc $b186			bcc 	_LCShiftPunc
.d15c	b15c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d15e	b15e	90 35		bcc $b195			bcc 	_LCPunctuation
.d160	b160	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d162	b162	90 51		bcc $b1b5			bcc 	_LCIdentifiers
.d164	b164	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d166	b166	90 73		bcc $b1db			bcc 	_LCTokens
.d168	b168	4c 3b b2	jmp $b23b			jmp 	_LCData 					; 254-5 are data objects
.d16b	b16b					_LCExit:
.d16b	b16b	68		pla				pla 								; get old indent adjust
.d16c	b16c	30 07		bmi $b175			bmi 	_LCExit2
.d16e	b16e	18		clc				clc 								; add to indent if +ve
.d16f	b16f	6d 22 04	adc $0422			adc 	listIndent
.d172	b172	8d 22 04	sta $0422			sta 	listIndent
.d175	b175					_LCExit2:
.d175	b175	60		rts				rts
.d176	b176					_LCDoubles:
.d176	b176	48		pha				pha
.d177	b177	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d178	b178	29 02		and #$02			and 	#2
.d17a	b17a	09 3c		ora #$3c			ora 	#60 						; make < >
.d17c	b17c	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d17f	b17f	68		pla				pla 								; restore, do lower bit
.d180	b180	29 03		and #$03			and 	#3
.d182	b182	09 3c		ora #$3c			ora 	#60
.d184	b184	80 0f		bra $b195			bra		_LCPunctuation 				; print, increment, loop
.d186	b186					_LCShiftPunc:
.d186	b186	aa		tax				tax 								; save in X
.d187	b187	29 07		and #$07			and 	#7 							; lower 3 bits
.d189	b189	f0 02		beq $b18d			beq 	_LCNoAdd
.d18b	b18b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d18d	b18d					_LCNoAdd:
.d18d	b18d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d18f	b18f	90 02		bcc $b193			bcc 	_LCNoAdd2
.d191	b191	09 20		ora #$20			ora 	#32 						; adds $20
.d193	b193					_LCNoAdd2:
.d193	b193	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d195	b195					_LCPunctuation:
.d195	b195	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d197	b197	d0 03		bne $b19c			bne 	_LCPContinue
.d199	b199	20 b0 b2	jsr $b2b0			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d19c	b19c					_LCPContinue:
.d19c	b19c	c9 2e		cmp #$2e			cmp 	#'.'
.d19e	b19e	f0 08		beq $b1a8			beq 	_LCPIsConstant
.d1a0	b1a0	c9 30		cmp #$30			cmp 	#'0'
.d1a2	b1a2	90 0b		bcc $b1af			bcc 	_LCPNotConstant
.d1a4	b1a4	c9 3a		cmp #$3a			cmp 	#'9'+1
.d1a6	b1a6	b0 07		bcs $b1af			bcs 	_LCPNotConstant
.d1a8	b1a8					_LCPIsConstant:
.d1a8	b1a8	48		pha				pha
.d1a9	b1a9	a9 87		lda #$87			lda 	#CLIConstant+$80
.d1ab	b1ab	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d1ae	b1ae	68		pla				pla
.d1af	b1af					_LCPNotConstant:
.d1af	b1af	c8		iny				iny 								; consume character
.d1b0	b1b0	20 9a b2	jsr $b29a			jsr 	LCLWrite 					; write it out.
.d1b3	b1b3	80 94		bra $b149			bra 	_LCMainLoop 				; go round again.
.d1b5	b1b5					_LCIdentifiers:
.d1b5	b1b5	18		clc				clc 								; convert to physical address
.d1b6	b1b6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d1b8	b1b8	85 37		sta $37				sta 	zTemp0+1
.d1ba	b1ba	c8		iny				iny
.d1bb	b1bb	b1 30		lda ($30),y			lda 	(codePtr),y
.d1bd	b1bd	85 36		sta $36				sta 	zTemp0
.d1bf	b1bf	c8		iny				iny
.d1c0	b1c0	5a		phy				phy 								; save position
.d1c1	b1c1	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d1c3	b1c3	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d1c6	b1c6	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d1c8	b1c8					_LCOutIdentifier:
.d1c8	b1c8	c8		iny				iny
.d1c9	b1c9	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d1cb	b1cb	29 7f		and #$7f			and 	#$7F
.d1cd	b1cd	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase
.d1d0	b1d0	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d1d3	b1d3	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d1d5	b1d5	10 f1		bpl $b1c8			bpl 	_LCOutIdentifier
.d1d7	b1d7	7a		ply				ply 								; restore position
.d1d8	b1d8	4c 49 b1	jmp $b149			jmp 	_LCMainLoop
.d1db	b1db					_LCTokens:
.d1db	b1db	aa		tax				tax 								; token in X
.d1dc	b1dc	a9 bc		lda #$bc			lda 	#((KeywordSet2) & $FF)
.d1de	b1de	85 36		sta $36				sta 	0+zTemp0
.d1e0	b1e0	a9 af		lda #$af			lda 	#((KeywordSet2) >> 8)
.d1e2	b1e2	85 37		sta $37				sta 	1+zTemp0
.d1e4	b1e4	e0 82		cpx #$82			cpx 	#$82
.d1e6	b1e6	f0 16		beq $b1fe			beq 	_LCUseShift
.d1e8	b1e8	a9 b3		lda #$b3			lda 	#((KeywordSet1) & $FF)
.d1ea	b1ea	85 36		sta $36				sta 	0+zTemp0
.d1ec	b1ec	a9 ae		lda #$ae			lda 	#((KeywordSet1) >> 8)
.d1ee	b1ee	85 37		sta $37				sta 	1+zTemp0
.d1f0	b1f0	e0 81		cpx #$81			cpx 	#$81
.d1f2	b1f2	f0 0a		beq $b1fe			beq 	_LCUseShift
.d1f4	b1f4	a9 42		lda #$42			lda 	#((KeywordSet0) & $FF)
.d1f6	b1f6	85 36		sta $36				sta 	0+zTemp0
.d1f8	b1f8	a9 ac		lda #$ac			lda 	#((KeywordSet0) >> 8)
.d1fa	b1fa	85 37		sta $37				sta 	1+zTemp0
.d1fc	b1fc	80 01		bra $b1ff			bra 	_LCNoShift
.d1fe	b1fe					_LCUseShift:
.d1fe	b1fe	c8		iny				iny
.d1ff	b1ff					_LCNoShift:
.d1ff	b1ff	20 c4 b2	jsr $b2c4			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d202	b202	b1 30		lda ($30),y			lda 	(codePtr),y
.d204	b204	aa		tax				tax 								; into X
.d205	b205					_LCFindText:
.d205	b205	ca		dex				dex
.d206	b206	10 0e		bpl $b216			bpl 	_LCFoundText 				; found text.
.d208	b208	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d20a	b20a	1a		inc a				inc 	a 							; one extra for size
.d20b	b20b	38		sec				sec 								; one extra for checksum
.d20c	b20c	65 36		adc $36				adc 	zTemp0 						; go to next token
.d20e	b20e	85 36		sta $36				sta 	zTemp0
.d210	b210	90 f3		bcc $b205			bcc 	_LCFindText
.d212	b212	e6 37		inc $37				inc 	zTemp0+1
.d214	b214	80 ef		bra $b205			bra 	_LCFindText
.d216	b216					_LCFoundText:
.d216	b216	5a		phy				phy 								; save List position
.d217	b217	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d219	b219	aa		tax				tax
.d21a	b21a	a9 86		lda #$86			lda 	#CLIToken+$80
.d21c	b21c	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d21f	b21f	a0 02		ldy #$02			ldy 	#2
.d221	b221					_LCCopyToken:
.d221	b221	b1 36		lda ($36),y			lda 	(zTemp0),y
.d223	b223	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase
.d226	b226	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d229	b229	c8		iny				iny
.d22a	b22a	ca		dex				dex
.d22b	b22b	d0 f4		bne $b221			bne 	_LCCopyToken
.d22d	b22d	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d22f	b22f	f0 05		beq $b236			beq 	_LCNoSpace
.d231	b231	a9 20		lda #$20			lda 	#' '
.d233	b233	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d236	b236					_LCNoSpace:
.d236	b236	7a		ply				ply 								; restore position.
.d237	b237	c8		iny				iny 								; consume token
.d238	b238	4c 49 b1	jmp $b149			jmp 	_LCMainLoop 				; and go around again.
.d23b	b23b					_LCData:
.d23b	b23b	48		pha				pha 								; save type $FE/$FF
.d23c	b23c	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d23e	b23e	c9 fe		cmp #$fe			cmp 	#$FE
.d240	b240	f0 22		beq $b264			beq 	_LCHaveOpener
.d242	b242	a2 22		ldx #$22			ldx 	#'"'
.d244	b244	a9 8f		lda #$8f			lda 	#CLIData+$80
.d246	b246	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d249	b249	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d24b	b24b	d0 17		bne $b264			bne 	_LCHaveOpener
.d24d	b24d	88		dey				dey 								; what precedes it ?
.d24e	b24e	b1 30		lda ($30),y			lda 	(codePtr),y
.d250	b250	c8		iny				iny
.d251	b251	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d253	b253	d0 0f		bne $b264			bne 	_LCHaveOpener
.d255	b255	a9 09		lda #$09			lda 	#9 							; tab
.d257	b257	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d25a	b25a	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d25c	b25c	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d25f	b25f	a9 85		lda #$85			lda 	#CLIFComment+$80
.d261	b261	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d264	b264					_LCHaveOpener:
.d264	b264	8a		txa				txa 								; output prefix (# or ")
.d265	b265	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d268	b268	c8		iny				iny 								; get count
.d269	b269	b1 30		lda ($30),y			lda 	(codePtr),y
.d26b	b26b	aa		tax				tax
.d26c	b26c	c8		iny				iny 								; point at first character
.d26d	b26d					_LCOutData:
.d26d	b26d	b1 30		lda ($30),y			lda 	(codePtr),y
.d26f	b26f	c9 00		cmp #$00			cmp 	#0
.d271	b271	f0 03		beq $b276			beq 	_LCNoPrint
.d273	b273	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d276	b276					_LCNoPrint:
.d276	b276	c8		iny				iny
.d277	b277	ca		dex				dex
.d278	b278	d0 f3		bne $b26d			bne 	_LCOutData
.d27a	b27a	68		pla				pla 								; closing " required ?
.d27b	b27b	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d27d	b27d	d0 0f		bne $b28e			bne 	_LCNoQuote
.d27f	b27f	a9 22		lda #$22			lda 	#'"'
.d281	b281	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d284	b284	ad c5 07	lda $07c5			lda 	EXTTextColour
.d287	b287	29 0f		and #$0f			and 	#$0F
.d289	b289	09 90		ora #$90			ora 	#$90
.d28b	b28b	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d28e	b28e					_LCNoQuote:
.d28e	b28e	4c 49 b1	jmp $b149			jmp 	_LCMainLoop
.d291	b291					LCLWriteColour:
.d291	b291	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d294	b294	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d297	b297	d0 01		bne $b29a			bne 	LCLWrite 					; if different, output it
.d299	b299	60		rts				rts
.d29a	b29a					LCLWrite:
.d29a	b29a	da		phx				phx
.d29b	b29b	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d29e	b29e	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d2a1	b2a1	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d2a4	b2a4	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d2a7	b2a7	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d2a9	b2a9	30 03		bmi $b2ae			bmi 	_LCLNoColour
.d2ab	b2ab	8d 23 04	sta $0423			sta 	lcLastCharacter
.d2ae	b2ae					_LCLNoColour:
.d2ae	b2ae	fa		plx				plx
.d2af	b2af	60		rts				rts
.d2b0	b2b0					LCLDeleteLastSpace:
.d2b0	b2b0	48		pha				pha
.d2b1	b2b1	da		phx				phx
.d2b2	b2b2	ae 19 04	ldx $0419			ldx 	tbOffset
.d2b5	b2b5	f0 0a		beq $b2c1			beq 	_LCDLSExit
.d2b7	b2b7	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d2ba	b2ba	c9 20		cmp #$20			cmp 	#' '
.d2bc	b2bc	d0 03		bne $b2c1			bne 	_LCDLSExit
.d2be	b2be	ce 19 04	dec $0419			dec 	tbOffset
.d2c1	b2c1					_LCDLSExit:
.d2c1	b2c1	fa		plx				plx
.d2c2	b2c2	68		pla				pla
.d2c3	b2c3	60		rts				rts
.d2c4	b2c4					LCLCheckSpaceRequired:
.d2c4	b2c4	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d2c7	b2c7	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d2c9	b2c9	f0 1b		beq $b2e6			beq 	_LCCSRSpace
.d2cb	b2cb	c9 29		cmp #$29			cmp 	#')'
.d2cd	b2cd	f0 17		beq $b2e6			beq 	_LCCSRSpace
.d2cf	b2cf	c9 23		cmp #$23			cmp 	#'#'
.d2d1	b2d1	f0 13		beq $b2e6			beq 	_LCCSRSpace
.d2d3	b2d3	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase 				; saves a little effort
.d2d6	b2d6	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d2d8	b2d8	90 11		bcc $b2eb			bcc 	_LCCSRExit
.d2da	b2da	c9 3a		cmp #$3a			cmp 	#"9"+1
.d2dc	b2dc	90 08		bcc $b2e6			bcc 	_LCCSRSpace
.d2de	b2de	c9 61		cmp #$61			cmp 	#"a"
.d2e0	b2e0	90 09		bcc $b2eb			bcc 	_LCCSRExit
.d2e2	b2e2	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2e4	b2e4	b0 05		bcs $b2eb			bcs 	_LCCSRExit
.d2e6	b2e6					_LCCSRSpace:
.d2e6	b2e6	a9 20		lda #$20			lda 	#' '
.d2e8	b2e8	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d2eb	b2eb					_LCCSRExit:
.d2eb	b2eb	60		rts				rts
.d2ec	b2ec					LCLLowerCase:
.d2ec	b2ec	c9 41		cmp #$41			cmp 	#"A"
.d2ee	b2ee	90 06		bcc $b2f6			bcc 	_LCLLCOut
.d2f0	b2f0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d2f2	b2f2	b0 02		bcs $b2f6			bcs 	_LCLLCOut
.d2f4	b2f4	69 20		adc #$20			adc 	#$20
.d2f6	b2f6					_LCLLCOut:
.d2f6	b2f6	60		rts				rts
.d2f7	b2f7					LCLUpperCase:
.d2f7	b2f7	c9 61		cmp #$61			cmp 	#"a"
.d2f9	b2f9	90 06		bcc $b301			bcc 	_LCLUCOut
.d2fb	b2fb	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2fd	b2fd	b0 02		bcs $b301			bcs 	_LCLUCOut
.d2ff	b2ff	e9 1f		sbc #$1f			sbc 	#$1F
.d301	b301					_LCLUCOut:
.d301	b301	60		rts				rts
.d302	b302					LCLWriteNumberXA:
.d302	b302	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d304	b304					_LCLWNLoop1:
.d304	b304	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d306	b306					_LCLWNLoop2:
.d306	b306	48		pha				pha 								; save initial LSB
.d307	b307	38		sec				sec
.d308	b308	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d30a	b30a	f9 3b b3	sbc $b33b,y			sbc 	_LCLWNTable,y
.d30d	b30d	48		pha				pha
.d30e	b30e	8a		txa				txa
.d30f	b30f	f9 3c b3	sbc $b33c,y			sbc 	_LCLWNTable+1,y
.d312	b312	90 07		bcc $b31b			bcc 	_LCLWNUnderflow
.d314	b314	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d316	b316	aa		tax				tax 								; update X
.d317	b317	68		pla				pla 								; restore A
.d318	b318	7a		ply				ply 								; throw original
.d319	b319	80 eb		bra $b306			bra 	_LCLWNLoop2 				; try again.
.d31b	b31b					_LCLWNUnderflow:
.d31b	b31b	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d31d	b31d	d0 06		bne $b325			bne 	_LCLWNOut
.d31f	b31f	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d322	b322	3a		dec a				dec 	a
.d323	b323	f0 04		beq $b329			beq 	_LCLWNNext
.d325	b325					_LCLWNOut:
.d325	b325	98		tya				tya
.d326	b326	20 35 b3	jsr $b335			jsr 	_LCLWNOutDigit
.d329	b329					_LCLWNNext:
.d329	b329	7a		ply				ply 							 	; restore original value.
.d32a	b32a	68		pla				pla
.d32b	b32b	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d32d	b32d	c8		iny				iny
.d32e	b32e	c8		iny				iny
.d32f	b32f	84 37		sty $37				sty 	zTemp0+1
.d331	b331	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d333	b333	d0 cf		bne $b304			bne 	_LCLWNLoop1
.d335	b335					_LCLWNOutDigit:
.d335	b335	09 30		ora #$30			ora 	#'0'
.d337	b337	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d33a	b33a	60		rts				rts
.d33b	b33b					_LCLWNTable:
>d33b	b33b	10 27						.word 	10000
>d33d	b33d	e8 03						.word 	1000
>d33f	b33f	64 00						.word 	100
>d341	b341	0a 00						.word 	10
.d343	b343					TOKSearchTable:
.d343	b343	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d345	b345	85 36		sta $36				sta 	zTemp0
.d347	b347	a0 00		ldy #$00			ldy 	#0
.d349	b349	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d34b	b34b	85 38		sta $38				sta 	zTemp1
.d34d	b34d					_TSTLoop:
.d34d	b34d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d34f	b34f	30 49		bmi $b39a			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d351	b351	f0 2e		beq $b381			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d353	b353	c8		iny				iny 								; get the hash
.d354	b354	b1 36		lda ($36),y			lda 	(zTemp0),y
.d356	b356	88		dey				dey
.d357	b357	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d35a	b35a	d0 25		bne $b381			bne 	_TSTNext
.d35c	b35c	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d35f	b35f	38		sec				sec
.d360	b360	ed 00 04	sbc $0400			sbc 	identStart
.d363	b363	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d365	b365	d0 1a		bne $b381			bne 	_TSTNext
.d367	b367	5a		phy				phy 								; save Y , we might fail to match.
.d368	b368	c8		iny				iny 								; point to text
.d369	b369	c8		iny				iny
.d36a	b36a	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d36d	b36d					_TSTCompareName:
.d36d	b36d	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d370	b370	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d372	b372	d0 0c		bne $b380			bne 	_TSTNextPullY 				; fail, pullY and do next
.d374	b374	e8		inx				inx
.d375	b375	c8		iny				iny
.d376	b376	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d379	b379	d0 f2		bne $b36d			bne 	_TSTCompareName
.d37b	b37b	7a		ply				ply 								; throw Y
.d37c	b37c	a5 38		lda $38				lda 	zTemp1 						; get token #
.d37e	b37e	38		sec				sec 								; return with CS = passed.
.d37f	b37f	60		rts				rts
.d380	b380					_TSTNextPullY:
.d380	b380	7a		ply				ply 								; restore current, fall through.
.d381	b381					_TSTNext:
.d381	b381	e6 38		inc $38				inc 	zTemp1 						; token counter
.d383	b383	98		tya				tya
.d384	b384	18		clc				clc
.d385	b385	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d387	b387	1a		inc a				inc 	a 							; +1
.d388	b388	1a		inc a				inc 	a 							; +2
.d389	b389	a8		tay				tay
.d38a	b38a	10 c1		bpl $b34d			bpl 	_TSTLoop 					; if Y < $80 loop back
.d38c	b38c	98		tya				tya 								; add Y to zTemp0 and reset Y
.d38d	b38d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d38f	b38f	18		clc				clc  								; but have tables > 255 bytes
.d390	b390	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d392	b392	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d394	b394	90 b7		bcc $b34d			bcc 	_TSTLoop
.d396	b396	e6 37		inc $37				inc 	zTemp0+1
.d398	b398	80 b3		bra $b34d			bra 	_TSTLoop
.d39a	b39a					_TSTFail:
.d39a	b39a	18		clc				clc
.d39b	b39b	60		rts				rts
.d39c	b39c					Export_TKTokeniseLine:
.d39c	b39c	20 69 b5	jsr $b569			jsr 	LCLFixLineBufferCase 		; fix line case
.d39f	b39f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d3a1	b3a1	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d3a4	b3a4	9c 27 04	stz $0427			stz 	tokenLineNumber
.d3a7	b3a7	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d3aa	b3aa	a2 ff		ldx #$ff			ldx 	#$FF
.d3ac	b3ac					_TKFindFirst:
.d3ac	b3ac	e8		inx				inx
.d3ad	b3ad	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d3b0	b3b0	f0 62		beq $b414			beq 	_TKExit
.d3b2	b3b2	c9 20		cmp #$20			cmp 	#' '
.d3b4	b3b4	90 f6		bcc $b3ac			bcc 	_TKFindFirst
.d3b6	b3b6	c9 30		cmp #$30			cmp 	#'0'
.d3b8	b3b8	90 07		bcc $b3c1			bcc 	_TKNoLineNumber
.d3ba	b3ba	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3bc	b3bc	b0 03		bcs $b3c1			bcs 	_TKNoLineNumber
.d3be	b3be	20 93 b5	jsr $b593			jsr 	TOKExtractLineNumber
.d3c1	b3c1					_TKNoLineNumber:
.d3c1	b3c1					_TKTokeniseLoop:
.d3c1	b3c1	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d3c4	b3c4	f0 4e		beq $b414			beq 	_TKExit
.d3c6	b3c6	e8		inx				inx
.d3c7	b3c7	c9 20		cmp #$20			cmp 	#' '
.d3c9	b3c9	f0 f6		beq $b3c1			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d3cb	b3cb	ca		dex				dex 								; undo last get, A contains character, X is position.
.d3cc	b3cc	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d3ce	b3ce	f0 68		beq $b438			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d3d0	b3d0	c9 41		cmp #$41			cmp 	#'A'
.d3d2	b3d2	90 04		bcc $b3d8			bcc 	_TKTokenisePunctuation
.d3d4	b3d4	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d3d6	b3d6	90 60		bcc $b438			bcc 	_TKTokeniseIdentifier
.d3d8	b3d8					_TKTokenisePunctuation:
.d3d8	b3d8	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d3da	b3da	f0 2e		beq $b40a			beq 	_TKString
.d3dc	b3dc	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d3de	b3de	f0 2f		beq $b40f			beq 	_TKHexConstant
.d3e0	b3e0	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d3e2	b3e2	f0 36		beq $b41a			beq 	_TKCheckDouble
.d3e4	b3e4	c9 3e		cmp #$3e			cmp 	#'>'
.d3e6	b3e6	f0 32		beq $b41a			beq 	_TKCheckDouble
.d3e8	b3e8					_TKStandardPunctuation:
.d3e8	b3e8	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d3eb	b3eb	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d3ed	b3ed	90 0e		bcc $b3fd			bcc 	_TKNoShift
.d3ef	b3ef	48		pha				pha 								; save. we are about to convert this punctuation token from
.d3f0	b3f0	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d3f2	b3f2	85 36		sta $36				sta 	zTemp0
.d3f4	b3f4	68		pla				pla
.d3f5	b3f5	29 20		and #$20			and 	#32 						; bit 5
.d3f7	b3f7	4a		lsr a				lsr 	a 							; shift into bit 3
.d3f8	b3f8	4a		lsr a				lsr 	a
.d3f9	b3f9	05 36		ora $36				ora 	zTemp0
.d3fb	b3fb	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d3fd	b3fd					_TKNoShift:
.d3fd	b3fd	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; write the punctuation character
.d400	b400	e8		inx				inx 								; consume the character
.d401	b401	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d403	b403	d0 bc		bne $b3c1			bne 	_TKTokeniseLoop 			; and loop round again.
.d405	b405	20 cb b4	jsr $b4cb			jsr 	TOKCheckComment 			; comment checl
.d408	b408	80 b7		bra $b3c1			bra 	_TKTokeniseLoop
.d40a	b40a					_TKString:
.d40a	b40a	20 f8 b4	jsr $b4f8			jsr 	TOKTokenString
.d40d	b40d	80 b2		bra $b3c1			bra 	_TKTokeniseLoop
.d40f	b40f					_TKHexConstant:
.d40f	b40f	20 33 b5	jsr $b533			jsr 	TOKHexConstant
.d412	b412	80 ad		bra $b3c1			bra 	_TKTokeniseLoop
.d414	b414	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d416	b416	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d419	b419	60		rts				rts
.d41a	b41a					_TKCheckDouble:
.d41a	b41a	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d41d	b41d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d41f	b41f	90 c7		bcc $b3e8			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d421	b421	c9 3f		cmp #$3f			cmp 	#'>'+1
.d423	b423	b0 c3		bcs $b3e8			bcs 	_TKStandardPunctuation
.d425	b425	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d428	b428	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d42a	b42a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d42b	b42b	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d42e	b42e	38		sec				sec
.d42f	b42f	e9 3c		sbc #$3c			sbc 	#'<'
.d431	b431	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; this is in the range 0-7
.d434	b434	e8		inx				inx 								; consume both
.d435	b435	e8		inx				inx
.d436	b436	80 89		bra $b3c1			bra 	_TKTokeniseLoop
.d438	b438					_TKTokeniseIdentifier:
.d438	b438	8e 00 04	stx $0400			stx 	identStart 					; save start
.d43b	b43b	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d43e	b43e					_TKCheckLoop:
.d43e	b43e	e8		inx				inx 								; look at next, we know first is identifier already.
.d43f	b43f	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d442	b442	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d444	b444	f0 f8		beq $b43e			beq 	_TKCheckLoop
.d446	b446	c9 30		cmp #$30			cmp	 	#"0"
.d448	b448	90 0c		bcc $b456			bcc 	_TKEndIdentifier
.d44a	b44a	c9 3a		cmp #$3a			cmp 	#"9"+1
.d44c	b44c	90 f0		bcc $b43e			bcc 	_TKCheckLoop
.d44e	b44e	c9 41		cmp #$41			cmp	 	#"A"
.d450	b450	90 04		bcc $b456			bcc 	_TKEndIdentifier
.d452	b452	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d454	b454	90 e8		bcc $b43e			bcc 	_TKCheckLoop
.d456	b456					_TKEndIdentifier:
.d456	b456	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d459	b459	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d45b	b45b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d45d	b45d	f0 06		beq $b465			beq 	_TKHasTypeCharacter
.d45f	b45f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d461	b461	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d463	b463	d0 07		bne $b46c			bne 	_TKNoTypeCharacter
.d465	b465					_TKHasTypeCharacter:
.d465	b465	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d468	b468	e8		inx				inx 								; consume the type character
.d469	b469	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d46c	b46c					_TKNoTypeCharacter:
.d46c	b46c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d46e	b46e	d0 09		bne $b479			bne 	_TKNoArray
.d470	b470	e8		inx				inx 								; skip the (
.d471	b471	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d474	b474	09 04		ora #$04			ora 	#$04
.d476	b476	8d 04 04	sta $0404			sta 	identTypeByte
.d479	b479					_TKNoArray:
.d479	b479	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d47c	b47c	20 54 b5	jsr $b554			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d47f	b47f	a0 ac		ldy #$ac			ldy 	#(KeywordSet0) >> 8
.d481	b481	a9 42		lda #$42			lda 	#(KeywordSet0) & $FF
.d483	b483	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d486	b486	a2 00		ldx #$00			ldx 	#0
.d488	b488	b0 1f		bcs $b4a9			bcs 	_TKFoundToken
.d48a	b48a	a0 ae		ldy #$ae			ldy 	#(KeywordSet1) >> 8
.d48c	b48c	a9 b3		lda #$b3			lda 	#(KeywordSet1) & $FF
.d48e	b48e	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d491	b491	a2 81		ldx #$81			ldx 	#$81
.d493	b493	b0 14		bcs $b4a9			bcs 	_TKFoundToken
.d495	b495	a0 af		ldy #$af			ldy 	#(KeywordSet2) >> 8
.d497	b497	a9 bc		lda #$bc			lda 	#(KeywordSet2) & $FF
.d499	b499	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d49c	b49c	a2 82		ldx #$82			ldx 	#$82
.d49e	b49e	b0 09		bcs $b4a9			bcs 	_TKFoundToken
.d4a0	b4a0	20 e4 b5	jsr $b5e4			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d4a3	b4a3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4a6	b4a6	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop 			; and go round again.
.d4a9	b4a9					_TKFoundToken:
.d4a9	b4a9	48		pha				pha 								; save token
.d4aa	b4aa	8a		txa				txa 								; shift in X, is there one ?
.d4ab	b4ab	f0 03		beq $b4b0			beq 	_TKNoTShift
.d4ad	b4ad	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; if so, write it out
.d4b0	b4b0					_TKNoTShift:
.d4b0	b4b0	68		pla				pla 								; restore and write token
.d4b1	b4b1	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d4b4	b4b4	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d4b6	b4b6	d0 0d		bne $b4c5			bne 	_TKNotRem 			 		; not shifted ?
.d4b8	b4b8	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d4ba	b4ba	d0 09		bne $b4c5			bne 	_TKNotRem
.d4bc	b4bc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d4bf	b4bf	20 cb b4	jsr $b4cb			jsr 	TOKCheckComment
.d4c2	b4c2	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop
.d4c5	b4c5					_TKNotRem:
.d4c5	b4c5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4c8	b4c8	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop 			; and go round again.
.d4cb	b4cb					TOKCheckComment:
.d4cb	b4cb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d4ce	b4ce	e8		inx				inx
.d4cf	b4cf	c9 20		cmp #$20			cmp 	#' '
.d4d1	b4d1	f0 f8		beq $b4cb			beq 	TOKCheckComment
.d4d3	b4d3	ca		dex				dex 								; first non space character
.d4d4	b4d4	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d4d6	b4d6	f0 1f		beq $b4f7			beq 	_TOKCCExit 					; then we are okay
.d4d8	b4d8	c9 00		cmp #$00			cmp 	#0 							; EOL
.d4da	b4da	f0 1b		beq $b4f7			beq 	_TOKCCExit 					; then we are okay
.d4dc	b4dc	da		phx				phx
.d4dd	b4dd					_TOKCCLowerCase:
.d4dd	b4dd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d4e0	b4e0	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d4e2	b4e2	90 09		bcc $b4ed			bcc 	_TOKKCNotUC
.d4e4	b4e4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4e6	b4e6	b0 05		bcs $b4ed			bcs 	_TOKKCNotUC
.d4e8	b4e8	49 20		eor #$20			eor 	#$20
.d4ea	b4ea	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d4ed	b4ed					_TOKKCNotUC:
.d4ed	b4ed	e8		inx				inx
.d4ee	b4ee	c9 00		cmp #$00			cmp 	#0
.d4f0	b4f0	d0 eb		bne $b4dd			bne 	_TOKCCLowerCase
.d4f2	b4f2	fa		plx				plx
.d4f3	b4f3	ca		dex				dex 								; tokenise string expects initial skip.
.d4f4	b4f4	20 f8 b4	jsr $b4f8			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d4f7	b4f7					_TOKCCExit:
.d4f7	b4f7	60		rts				rts
.d4f8	b4f8					TOKTokenString:
.d4f8	b4f8	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d4fa	b4fa	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d4fd	b4fd	e8		inx				inx									; start of quoted string.
.d4fe	b4fe	da		phx				phx 								; push start of string on top
.d4ff	b4ff	ca		dex				dex 								; because we pre-increment
.d500	b500					_TSFindEnd:
.d500	b500	e8		inx				inx
.d501	b501	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d504	b504	f0 04		beq $b50a			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d506	b506	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d508	b508	d0 f6		bne $b500			bne 	_TSFindEnd
.d50a	b50a					_TSEndOfString:
.d50a	b50a	7a		ply				ply  								; so now Y is first character, X is character after end.
.d50b	b50b	48		pha				pha 								; save terminating character
.d50c	b50c	20 14 b5	jsr $b514			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d50f	b50f	68		pla				pla 								; terminating character
.d510	b510	f0 01		beq $b513			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d512	b512	e8		inx				inx
.d513	b513					_TSNotQuote:
.d513	b513	60		rts				rts
.d514	b514					TOKWriteBlockXY:
.d514	b514	86 36		stx $36				stx 	zTemp0 						; save end character
.d516	b516	98		tya				tya 								; use 2's complement to work out the byte size
.d517	b517	49 ff		eor #$ff			eor 	#$FF
.d519	b519	38		sec				sec
.d51a	b51a	65 36		adc $36				adc 	zTemp0
.d51c	b51c	1a		inc a				inc 	a 							; one extra for NULL
.d51d	b51d	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d520	b520					_TOBlockLoop:
.d520	b520	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d522	b522	f0 09		beq $b52d			beq 	_TOBlockExit
.d524	b524	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d527	b527	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d52a	b52a	c8		iny				iny
.d52b	b52b	80 f3		bra $b520			bra 	_TOBlockLoop
.d52d	b52d					_TOBlockExit:
.d52d	b52d	a9 00		lda #$00			lda 	#0 							; add NULL.
.d52f	b52f	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d532	b532	60		rts				rts
.d533	b533					TOKHexConstant:
.d533	b533	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d535	b535	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d538	b538	e8		inx				inx									; start of quoted string.
.d539	b539	da		phx				phx 								; push start of constant on top
.d53a	b53a	ca		dex				dex
.d53b	b53b					_THFindLoop:
.d53b	b53b	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d53c	b53c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d53f	b53f	c9 30		cmp #$30			cmp 	#"0"
.d541	b541	90 0c		bcc $b54f			bcc 	_THFoundEnd
.d543	b543	c9 3a		cmp #$3a			cmp 	#"9"+1
.d545	b545	90 f4		bcc $b53b			bcc 	_THFindLoop
.d547	b547	c9 41		cmp #$41			cmp 	#"A"
.d549	b549	90 04		bcc $b54f			bcc 	_THFoundEnd
.d54b	b54b	c9 47		cmp #$47			cmp 	#"F"+1
.d54d	b54d	90 ec		bcc $b53b			bcc 	_THFindLoop
.d54f	b54f					_THFoundEnd:
.d54f	b54f	7a		ply				ply 								; restore start
.d550	b550	20 14 b5	jsr $b514			jsr 	TOKWriteBlockXY 			; output the block
.d553	b553	60		rts				rts
.d554	b554					TOKCalculateHash:
.d554	b554	da		phx				phx
.d555	b555	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d558	b558	a9 00		lda #$00			lda 	#0
.d55a	b55a					_TCHLoop:
.d55a	b55a	18		clc				clc
.d55b	b55b	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d55e	b55e	e8		inx				inx
.d55f	b55f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d562	b562	d0 f6		bne $b55a			bne 	_TCHLoop
.d564	b564	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d567	b567	fa		plx				plx
.d568	b568	60		rts				rts
.d569	b569					LCLFixLineBufferCase:
.d569	b569	a2 00		ldx #$00			ldx 	#0
.d56b	b56b					_FLBCLoop:
.d56b	b56b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d56e	b56e	f0 22		beq $b592			beq 	_FLBCExit 					; end of string.
.d570	b570	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d572	b572	f0 11		beq $b585			beq 	_FLBCInQuotes
.d574	b574	e8		inx				inx
.d575	b575	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d577	b577	90 f2		bcc $b56b			bcc 	_FLBCLoop
.d579	b579	c9 7b		cmp #$7b			cmp 	#'z'+1
.d57b	b57b	b0 ee		bcs $b56b			bcs 	_FLBCLoop
.d57d	b57d	38		sec				sec 								; make U/C
.d57e	b57e	e9 20		sbc #$20			sbc 	#32
.d580	b580	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d583	b583	80 e6		bra $b56b			bra 	_FLBCLoop
.d585	b585					_FLBCInQuotes:
.d585	b585	e8		inx				inx 								; advance
.d586	b586	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d589	b589	f0 07		beq $b592			beq 	_FLBCExit 					; exit on EOS
.d58b	b58b	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d58d	b58d	d0 f6		bne $b585			bne 	_FLBCInQuotes
.d58f	b58f	e8		inx				inx 								; skip over it
.d590	b590	80 d9		bra $b56b			bra 	_FLBCLoop
.d592	b592					_FLBCExit:
.d592	b592	60		rts				rts
.d593	b593					TOKExtractLineNumber:
.d593	b593	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d596	b596	48		pha				pha
.d597	b597	ad 27 04	lda $0427			lda 	tokenLineNumber
.d59a	b59a	48		pha				pha
.d59b	b59b	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 2
.d59e	b59e	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 4
.d5a1	b5a1	18		clc				clc 								; add stacked value
.d5a2	b5a2	68		pla				pla
.d5a3	b5a3	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5a6	b5a6	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5a9	b5a9	68		pla				pla
.d5aa	b5aa	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d5ad	b5ad	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d5b0	b5b0	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 10
.d5b3	b5b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d5b6	b5b6	e8		inx				inx
.d5b7	b5b7	29 0f		and #$0f			and 	#15 						; add to line #
.d5b9	b5b9	18		clc				clc
.d5ba	b5ba	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5bd	b5bd	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5c0	b5c0	90 03		bcc $b5c5			bcc 	_TLENNoCarry
.d5c2	b5c2	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d5c5	b5c5					_TLENNoCarry:
.d5c5	b5c5	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d5c8	b5c8	c9 30		cmp #$30			cmp 	#'0'
.d5ca	b5ca	90 04		bcc $b5d0			bcc 	_TLENExit
.d5cc	b5cc	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5ce	b5ce	90 c3		bcc $b593			bcc 	TOKExtractLineNumber
.d5d0	b5d0					_TLENExit:
.d5d0	b5d0	60		rts				rts
.d5d1	b5d1					_LCLNTimes2:
.d5d1	b5d1	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d5d4	b5d4	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d5d7	b5d7	60		rts				rts
.d5d8	b5d8					TOKWriteByte:
.d5d8	b5d8	da		phx				phx
.d5d9	b5d9	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d5dc	b5dc	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d5df	b5df	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d5e2	b5e2	fa		plx				plx
.d5e3	b5e3	60		rts				rts
.d5e4	b5e4					TOKCheckCreateVariableRecord:
.d5e4	b5e4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d5e6	b5e6	85 36		sta $36				sta 	0+zTemp0
.d5e8	b5e8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d5ea	b5ea	85 37		sta $37				sta 	1+zTemp0
.d5ec	b5ec					_CCVSearch:
.d5ec	b5ec	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d5ee	b5ee	f0 2c		beq $b61c			beq 	_CCVFail
.d5f0	b5f0	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d5f4	b5f4	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d5f7	b5f7	d0 16		bne $b60f			bne 	_CCVNext
.d5f9	b5f9	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d5fb	b5fb	ae 00 04	ldx $0400			ldx 	identStart
.d5fe	b5fe					_CCVCompare:
.d5fe	b5fe	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d601	b601	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d603	b603	e8		inx				inx 								; advance pointers
.d604	b604	c8		iny				iny
.d605	b605	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d606	b606	d0 07		bne $b60f			bne 	_CCVNext  					; didn't match go to next.
.d608	b608	90 f4		bcc $b5fe			bcc 	_CCVCompare 				; not finished yet.
.d60a	b60a	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d60d	b60d	f0 41		beq $b650			beq 	_CCVFound 					; yes, we were successful
.d60f	b60f					_CCVNext:
.d60f	b60f	18		clc				clc 								; go to next record.
.d610	b610	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d612	b612	65 36		adc $36				adc 	zTemp0
.d614	b614	85 36		sta $36				sta 	zTemp0
.d616	b616	90 d4		bcc $b5ec			bcc 	_CCVSearch
.d618	b618	e6 37		inc $37				inc 	zTemp0+1
.d61a	b61a	80 d0		bra $b5ec			bra 	_CCVSearch
.d61c	b61c					_CCVFail:
.d61c	b61c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d61e	b61e	ad 03 04	lda $0403			lda 	identHash
.d621	b621	91 36		sta ($36),y			sta 	(zTemp0),y
.d623	b623	c8		iny				iny 								; offset 2 is the type byte
.d624	b624	ad 04 04	lda $0404			lda 	identTypeByte
.d627	b627	91 36		sta ($36),y			sta 	(zTemp0),y
.d629	b629	c8		iny				iny
.d62a	b62a					_CCVData:
.d62a	b62a	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d62c	b62c	91 36		sta ($36),y			sta 	(zTemp0),y
.d62e	b62e	c8		iny				iny
.d62f	b62f	c0 08		cpy #$08			cpy 	#8
.d631	b631	90 f7		bcc $b62a			bcc 	_CCVData
.d633	b633	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d636	b636					_CCVCopyName:
.d636	b636	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d639	b639	91 36		sta ($36),y			sta 	(zTemp0),y
.d63b	b63b	e8		inx				inx
.d63c	b63c	c8		iny				iny
.d63d	b63d	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d640	b640	d0 f4		bne $b636			bne 	_CCVCopyName
.d642	b642	98		tya				tya 								; patch offset
.d643	b643	92 36		sta ($36)			sta 	(zTemp0)
.d645	b645	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d647	b647	91 36		sta ($36),y			sta 	(zTemp0),y
.d649	b649	88		dey				dey
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d64c	b64c	09 80		ora #$80			ora 	#$80
.d64e	b64e	91 36		sta ($36),y			sta 	(zTemp0),y
.d650	b650					_CCVFound:
.d650	b650	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d652	b652	38		sec				sec
.d653	b653	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d655	b655	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d657	b657	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d65a	b65a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d65c	b65c	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d65f	b65f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d660	b660					SNDCheckChannel:
.d660	b660	aa		tax				tax
.d661	b661	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d664	b664	d0 38		bne $b69e			bne 	_SNDCCExit
.d666	b666	da		phx				phx 								; save current channel
.d667	b667	8a		txa				txa 								; put in A
.d668	b668	20 e4 b6	jsr $b6e4			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d66b	b66b	68		pla				pla 								; channel # in A
.d66c	b66c	90 30		bcc $b69e			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d66e	b66e	a8		tay				tay 								; Y is the channel #
.d66f	b66f	bd 83 08	lda $0883,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d672	b672	99 82 09	sta $0982,y			sta 	SNDPitchLow,y
.d675	b675	bd 84 08	lda $0884,x			lda 	SNDQueue+2,x
.d678	b678	99 86 09	sta $0986,y			sta 	SNDPitchHigh,y
.d67b	b67b	bd 85 08	lda $0885,x			lda 	SNDQueue+3,x
.d67e	b67e	99 8a 09	sta $098a,y			sta 	SNDVolume,y
.d681	b681	bd 86 08	lda $0886,x			lda 	SNDQueue+4,x
.d684	b684	99 8e 09	sta $098e,y			sta 	SNDTimeLeft,y
.d687	b687	bd 87 08	lda $0887,x			lda 	SNDQueue+5,x
.d68a	b68a	99 92 09	sta $0992,y			sta 	SNDAdjustLow,y
.d68d	b68d	bd 88 08	lda $0888,x			lda 	SNDQueue+6,x
.d690	b690	99 96 09	sta $0996,y			sta 	SNDAdjustHigh,y
.d693	b693	5a		phy				phy 								; save channel #
.d694	b694	20 fe b6	jsr $b6fe			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d697	b697	ce 81 08	dec $0881			dec 	SNDLength 					; reduce the queue length.
.d69a	b69a	68		pla				pla
.d69b	b69b	20 9f b6	jsr $b69f			jsr 	SNDUpdateNote 				; update channel A
.d69e	b69e					_SNDCCExit:
.d69e	b69e	60		rts				rts
.d69f	b69f					SNDUpdateNote:
.d69f	b69f	aa		tax				tax 								; so we can access records
.d6a0	b6a0	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d6a1	b6a1	0a		asl a				asl 	a
.d6a2	b6a2	0a		asl a				asl 	a
.d6a3	b6a3	0a		asl a				asl 	a
.d6a4	b6a4	0a		asl a				asl 	a
.d6a5	b6a5	8d 80 08	sta $0880			sta 	SNDChannelBits
.d6a8	b6a8	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; are we silent
.d6ab	b6ab	f0 2e		beq $b6db			beq 	_SNDUNIsSilent
.d6ad	b6ad	ad 80 08	lda $0880			lda 	SNDChannelBits 				; push channel bits on stack
.d6b0	b6b0	48		pha				pha
.d6b1	b6b1	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d6b4	b6b4	29 0f		and #$0f			and 	#$0F
.d6b6	b6b6	0d 80 08	ora $0880			ora 	SNDChannelBits 				; set channel bits
.d6b9	b6b9	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d6bb	b6bb	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d6be	b6be	bd 86 09	lda $0986,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d6c1	b6c1	8d 80 08	sta $0880			sta 	SNDChannelBits
.d6c4	b6c4	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x
.d6c7	b6c7	4e 80 08	lsr $0880			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d6ca	b6ca	6a		ror a				ror 	a
.d6cb	b6cb	4e 80 08	lsr $0880			lsr 	SNDChannelBits
.d6ce	b6ce	6a		ror a				ror 	a
.d6cf	b6cf	4a		lsr a				lsr 	a 							; put in bits 0-5
.d6d0	b6d0	4a		lsr a				lsr 	a
.d6d1	b6d1	20 48 b7	jsr $b748			jsr 	SNDWritePorts 				; write as rest of pitch register
.d6d4	b6d4	68		pla				pla
.d6d5	b6d5	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d6d7	b6d7	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d6da	b6da	60		rts				rts
.d6db	b6db					_SNDUNIsSilent:
.d6db	b6db	ad 80 08	lda $0880			lda 	SNDChannelBits 				; channel bits
.d6de	b6de	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d6e0	b6e0	20 48 b7	jsr $b748			jsr 	SNDWritePorts 				; write to the ports
.d6e3	b6e3	60		rts				rts
.d6e4	b6e4					SNDFindNextNoteForA:
.d6e4	b6e4	ac 81 08	ldy $0881			ldy 	SNDLength 					; queue size into Y
.d6e7	b6e7	f0 13		beq $b6fc			beq 	_SNDFNNFail 				; queue empty.
.d6e9	b6e9	a2 00		ldx #$00			ldx 	#0
.d6eb	b6eb					_SNDFNNSearch:
.d6eb	b6eb	dd 82 08	cmp $0882,x			cmp 	SNDQueue,x 					; does it match the channel
.d6ee	b6ee	38		sec				sec
.d6ef	b6ef	f0 0c		beq $b6fd			beq 	_SNDFNNExit 				; if so exit with CS.
.d6f1	b6f1	e8		inx				inx 								; next queue slot.
.d6f2	b6f2	e8		inx				inx
.d6f3	b6f3	e8		inx				inx
.d6f4	b6f4	e8		inx				inx
.d6f5	b6f5	e8		inx				inx
.d6f6	b6f6	e8		inx				inx
.d6f7	b6f7	e8		inx				inx
.d6f8	b6f8	e8		inx				inx
.d6f9	b6f9	88		dey				dey 								; done the whole queue
.d6fa	b6fa	d0 ef		bne $b6eb			bne 	_SNDFNNSearch 				; no, go back.
.d6fc	b6fc					_SNDFNNFail:
.d6fc	b6fc	18		clc				clc
.d6fd	b6fd					_SNDFNNExit:
.d6fd	b6fd	60		rts				rts
.d6fe	b6fe					SNDDeleteXFromQueue:
.d6fe	b6fe	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d700	b700	f0 09		beq $b70b			beq 	_SNDDXExit
.d702	b702	bd 8a 08	lda $088a,x			lda 	SNDQueue+8,x
.d705	b705	9d 82 08	sta $0882,x			sta 	SNDQueue,x
.d708	b708	e8		inx				inx
.d709	b709	80 f3		bra $b6fe			bra 	SNDDeleteXFromQueue
.d70b	b70b					_SNDDXExit:
.d70b	b70b	60		rts				rts
.0880						SNDChannelBits:
>0880								.fill 	1
.d70c	b70c					SNDQueueRequest:
.d70c	b70c	86 36		stx $36				stx 	zTemp0						; save queue address
.d70e	b70e	84 37		sty $37				sty 	zTemp0+1
.d710	b710	ae 81 08	ldx $0881			ldx 	SNDLength 					; queue is full, can't take any more.
.d713	b713	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d715	b715	f0 21		beq $b738			beq 	_SNDQRExit
.d717	b717	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d719	b719	48		pha				pha
.d71a	b71a	8a		txa				txa  								; get offset in queue buffer/
.d71b	b71b	0a		asl a				asl 	a
.d71c	b71c	0a		asl a				asl 	a
.d71d	b71d	0a		asl a				asl 	a
.d71e	b71e	aa		tax				tax
.d71f	b71f	68		pla				pla 								; get back and push again
.d720	b720	48		pha				pha
.d721	b721	9d 82 08	sta $0882,x			sta 	SNDQueue+0,x 				; save the channel #
.d724	b724	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d726	b726					_SNDQCopy:
.d726	b726	b1 36		lda ($36),y			lda 	(zTemp0),y
.d728	b728	e8		inx				inx
.d729	b729	c8		iny				iny
.d72a	b72a	9d 82 08	sta $0882,x			sta 	SNDQueue,x
.d72d	b72d	c0 06		cpy #$06			cpy 	#6
.d72f	b72f	d0 f5		bne $b726			bne 	_SNDQCopy
.d731	b731	ee 81 08	inc $0881			inc 	SNDLength 					; bump queue length.
.d734	b734	68		pla				pla 								; get channel # back
.d735	b735	20 60 b6	jsr $b660			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d738	b738					_SNDQRExit:
.d738	b738	60		rts				rts
.d739	b739					SNDSilenceChannel:
.d739	b739	aa		tax				tax 								; zero time left.
.d73a	b73a	9e 8e 09	stz $098e,x			stz 	SNDTimeLeft,x
.d73d	b73d	0a		asl a				asl 	a 							; shift into position
.d73e	b73e	0a		asl a				asl 	a
.d73f	b73f	0a		asl a				asl 	a
.d740	b740	0a		asl a				asl 	a
.d741	b741	0a		asl a				asl 	a
.d742	b742	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d744	b744	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d747	b747	60		rts				rts
.d748	b748					SNDWritePorts:
.d748	b748	da		phx				phx 								; save X
.d749	b749	a6 01		ldx $01				ldx 	1 							; save I/O status
.d74b	b74b	64 01		stz $01				stz 	1 							; access I/O page 0
.d74d	b74d	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d750	b750	8d 10 d6	sta $d610			sta 	$D610
.d753	b753	86 01		stx $01				stx 	1 							; restore I/O
.d755	b755	fa		plx				plx 								; restore X
.d756	b756	60		rts				rts
.d757	b757					Export_SNDCommand:
.d757	b757	da		phx				phx 								; save XY
.d758	b758	5a		phy				phy
.d759	b759	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d75b	b75b	f0 1d		beq $b77a			beq 	_SNDInitialise
.d75d	b75d	90 28		bcc $b787			bcc 	_SNDExit
.d75f	b75f	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d761	b761	f0 17		beq $b77a			beq 	_SNDSilence
.d763	b763	b0 22		bcs $b787			bcs 	_SNDExit
.d765	b765	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d767	b767	b0 09		bcs $b772			bcs 	_SNDQueryPlay
.d769	b769	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d76b	b76b	b0 1a		bcs $b787			bcs 	_SNDExit
.d76d	b76d	20 0c b7	jsr $b70c			jsr 	SNDQueueRequest
.d770	b770	80 15		bra $b787			bra 	_SNDExit
.d772	b772					_SNDQueryPlay:
.d772	b772	29 03		and #$03			and 	#3 							; get channel #
.d774	b774	aa		tax				tax
.d775	b775	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d778	b778	80 0d		bra $b787			bra 	_SNDExit
.d77a	b77a					_SNDInitialise:
.d77a	b77a					_SNDSilence:
.d77a	b77a	9c 81 08	stz $0881			stz 	SNDLength 					; empty the queue.
.d77d	b77d	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d77f	b77f					_SNDSilenceLoop:
.d77f	b77f	48		pha				pha
.d780	b780	20 39 b7	jsr $b739			jsr 	SNDSilenceChannel
.d783	b783	68		pla				pla
.d784	b784	3a		dec a				dec 	a
.d785	b785	10 f8		bpl $b77f			bpl 	_SNDSilenceLoop
.d787	b787					_SNDExit:
.d787	b787	7a		ply				ply
.d788	b788	fa		plx				plx
.d789	b789	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0881						SNDLength:
>0881								.fill 	1
.0882						SNDQueue:
>0882								.fill 	SNDQueueSize * 8
.0982						SNDPitchLow:
>0982								.fill 	4
.0986						SNDPitchHigh:
>0986								.fill 	4
.098a						SNDVolume:
>098a								.fill 	4
.098e						SNDTimeLeft:
>098e								.fill 	4
.0992						SNDAdjustLow:
>0992								.fill 	4
.0996						SNDAdjustHigh:
>0996								.fill 	4
.d78a	b78a					Export_SNDUpdate:
.d78a	b78a					PagedSNDUpdate:
.d78a	b78a	ad 8e 09	lda $098e			lda 	SNDTimeLeft+0 				; look at time remaining
.d78d	b78d	f0 05		beq $b794			beq 	_SNDUNot0 					; not playing
.d78f	b78f	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d791	b791	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel 			; update it.
.d794	b794					_SNDUNot0:
.d794	b794	ad 8f 09	lda $098f			lda 	SNDTimeLeft+1
.d797	b797	f0 05		beq $b79e			beq 	_SNDUNot1
.d799	b799	a2 01		ldx #$01			ldx 	#1
.d79b	b79b	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d79e	b79e					_SNDUNot1:
.d79e	b79e	ad 90 09	lda $0990			lda 	SNDTimeLeft+2
.d7a1	b7a1	f0 05		beq $b7a8			beq 	_SNDUNot2
.d7a3	b7a3	a2 02		ldx #$02			ldx 	#2
.d7a5	b7a5	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d7a8	b7a8					_SNDUNot2:
.d7a8	b7a8	ad 91 09	lda $0991			lda 	SNDTimeLeft+3
.d7ab	b7ab	f0 05		beq $b7b2			beq 	_SNDUNot3
.d7ad	b7ad	a2 03		ldx #$03			ldx 	#3
.d7af	b7af	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d7b2	b7b2					_SNDUNot3:
.d7b2	b7b2	60		rts				rts
.d7b3	b7b3					SNDUpdateChannel:
.d7b3	b7b3	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d7b5	b7b5	f0 2c		beq $b7e3			beq 	_SNDUCExit
.d7b7	b7b7	3a		dec a				dec 	a 							; decrement and update timer
.d7b8	b7b8	9d 8e 09	sta $098e,x			sta 	SNDTimeLeft,x
.d7bb	b7bb	f0 1d		beq $b7da			beq 	_SNDUCUpdate 				; if zero, silence channel
.d7bd	b7bd	bd 92 09	lda $0992,x			lda 	SNDAdjustLow,x 				; adjust ?
.d7c0	b7c0	1d 96 09	ora $0996,x			ora 	SNDAdjustHigh,x
.d7c3	b7c3	f0 1e		beq $b7e3			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d7c5	b7c5	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d7c6	b7c6	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x
.d7c9	b7c9	7d 92 09	adc $0992,x			adc 	SNDAdjustLow,x
.d7cc	b7cc	9d 82 09	sta $0982,x			sta 	SNDPitchLow,x
.d7cf	b7cf	bd 86 09	lda $0986,x			lda 	SNDPitchHigh,x
.d7d2	b7d2	7d 96 09	adc $0996,x			adc 	SNDAdjustHigh,x
.d7d5	b7d5	29 03		and #$03			and 	#3
.d7d7	b7d7	9d 86 09	sta $0986,x			sta 	SNDPitchHigh,x
.d7da	b7da					_SNDUCUpdate:
.d7da	b7da	8a		txa				txa 								; which channel.
.d7db	b7db	48		pha				pha
.d7dc	b7dc	20 9f b6	jsr $b69f			jsr 	SNDUpdateNote 				; update the current note
.d7df	b7df	68		pla				pla
.d7e0	b7e0	20 60 b6	jsr $b660			jsr 	SNDCheckChannel 			; more to do ?
.d7e3	b7e3					_SNDUCExit:
.d7e3	b7e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff 05 21 05 0d ff 05 16			.byte	255,5,33,5,13,255,5,22,5,14,255,5,29,5,255,13,7,13,255,5,2,5,255,13,6,13,255,5,2,5,255,13,8,13,255,5,2,5,255,13,6,13,255,5,8,5,14,13,13,5,5,255,13,7,13,255,5,17,5,6,6,255,5,7,5,6,6,255,5,4,5,6,6,5,5,6,6,255,5,8,5,6,6,255,5,4,5,6,6,255,5,7,5,14,13,13,5,5,13,13,255,5,4,5,13,13,255,5,16,5,14,14,255,5,14,5,14,14,5,5,14,14,255,5,8,5,14,14,255,5,14,5,14,13,13,5,5,13,13,255,5,4,5,13,13,255,5,16,5,255,3,5,3,255,5,4,5,255,3,6,3,255,5,2,5,255,3,7,3,255,5,2,5,255,3,7,3,255,5,8,5,14,13,13,5,5,255,13,7,13,255,5,17,5,7,7,255,5,7,5,7,7,255,5,15,5,7,7,5,5,7,7,255,5,4,5,7,7,5,5,13,13,255,5,3,5,14,13,13,5,5,13,13,255,5,2,5,13,13,255,5,18,5,10,10,255,5,7,5,10,10,255,5,8,5,10,10,255,5,4,5,10,10,5,5,10,10,255,5,4,5,10,10,5,5,13,13,255,5,3,5,14,13,13,5,5,13,13,255,5,3,5,13,13,255,5,17,5,4,4,255,5,7,5,255,4,8,4,5,4,5,255,4,6,4,255,5,3,5,255,4,6,4,255,5,3,5,255,13,6,13,255,5,2,5,13,13,255,5,4,5,13,13,255,5,41,5,13,255,5,22,5,14,255,5,20,5,255,7,80,7,255,14,7,14,255,9,19,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,10,14,255,9,16,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,9,14,255,9,17,9,7,255,9,4,9,255,7,18,7,255,12,24,12,255,7,80,7,255,0
>e008	a008	05 0e ff 05 1d 05 ff 0d 07 0d ff 05 02 05 ff 0d
>e018	a018	06 0d ff 05 02 05 ff 0d 08 0d ff 05 02 05 ff 0d
>e028	a028	06 0d ff 05 08 05 0e 0d 0d 05 05 ff 0d 07 0d ff
>e038	a038	05 11 05 06 06 ff 05 07 05 06 06 ff 05 04 05 06
>e048	a048	06 05 05 06 06 ff 05 08 05 06 06 ff 05 04 05 06
>e058	a058	06 ff 05 07 05 0e 0d 0d 05 05 0d 0d ff 05 04 05
>e068	a068	0d 0d ff 05 10 05 0e 0e ff 05 0e 05 0e 0e 05 05
>e078	a078	0e 0e ff 05 08 05 0e 0e ff 05 0e 05 0e 0d 0d 05
>e088	a088	05 0d 0d ff 05 04 05 0d 0d ff 05 10 05 ff 03 05
>e098	a098	03 ff 05 04 05 ff 03 06 03 ff 05 02 05 ff 03 07
>e0a8	a0a8	03 ff 05 02 05 ff 03 07 03 ff 05 08 05 0e 0d 0d
>e0b8	a0b8	05 05 ff 0d 07 0d ff 05 11 05 07 07 ff 05 07 05
>e0c8	a0c8	07 07 ff 05 0f 05 07 07 05 05 07 07 ff 05 04 05
>e0d8	a0d8	07 07 05 05 0d 0d ff 05 03 05 0e 0d 0d 05 05 0d
>e0e8	a0e8	0d ff 05 02 05 0d 0d ff 05 12 05 0a 0a ff 05 07
>e0f8	a0f8	05 0a 0a ff 05 08 05 0a 0a ff 05 04 05 0a 0a 05
>e108	a108	05 0a 0a ff 05 04 05 0a 0a 05 05 0d 0d ff 05 03
>e118	a118	05 0e 0d 0d 05 05 0d 0d ff 05 03 05 0d 0d ff 05
>e128	a128	11 05 04 04 ff 05 07 05 ff 04 08 04 05 04 05 ff
>e138	a138	04 06 04 ff 05 03 05 ff 04 06 04 ff 05 03 05 ff
>e148	a148	0d 06 0d ff 05 02 05 0d 0d ff 05 04 05 0d 0d ff
>e158	a158	05 29 05 0d ff 05 16 05 0e ff 05 14 05 ff 07 50
>e168	a168	07 ff 0e 07 0e ff 09 13 09 07 ff 09 04 09 ff 07
>e178	a178	12 07 ff 0c 18 0c 07 07 ff 0e 0a 0e ff 09 10 09
>e188	a188	07 ff 09 04 09 ff 07 12 07 ff 0c 18 0c 07 07 ff
>e198	a198	0e 09 0e ff 09 11 09 07 ff 09 04 09 ff 07 12 07
>e1a8	a1a8	ff 0c 18 0c ff 07 50 07 ff 00
.e1b2	a1b2					Header_jchars:
>e1b2	a1b2	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e1ba	a1ba	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1ca	a1ca	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1da	a1da	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ea	a1ea	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1fa	a1fa	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e20a	a20a	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e21a	a21a	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e22a	a22a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e23a	a23a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e24a	a24a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e25a	a25a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e26a	a26a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e27a	a27a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e28a	a28a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e29a	a29a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e2aa	a2aa	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e2ba	a2ba	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2ca	a2ca	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2da	a2da	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ea	a2ea	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2fa	a2fa	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e30a	a30a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e31a	a31a	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e32a	a32a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e33a	a33a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e34a	a34a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e35a	a35a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e36a	a36a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e37a	a37a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e38a	a38a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e39a	a39a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e3aa	a3aa	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e3ba	a3ba	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3ca	a3ca	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3da	a3da	9d ff 96 18 96 a3 ff 00
.e3e2	a3e2					Header_kattrs:
>e3e2	a3e2	07 ff 06 09 06 ff 07 38			.byte	7,255,6,9,6,255,7,56,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,255,13,7,13,255,7,2,7,255,13,6,13,255,7,2,7,255,13,8,13,255,7,2,7,255,13,6,13,255,7,2,7,13,13,255,7,3,7,13,13,7,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,6,6,255,7,7,7,6,6,255,7,4,7,6,6,7,7,6,6,255,7,8,7,6,6,255,7,4,7,6,6,7,7,13,13,255,7,2,7,13,13,255,7,2,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,14,14,255,7,14,7,14,14,7,7,14,14,255,7,8,7,14,14,255,7,8,7,13,13,7,7,13,13,255,7,3,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,255,3,5,3,255,7,4,7,255,3,6,3,255,7,2,7,255,3,7,3,255,7,2,7,255,3,7,3,255,7,2,7,255,13,4,13,255,7,4,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,46,7,13,13,7,7,13,13,255,7,3,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,10,10,255,7,7,7,10,10,255,7,8,7,10,10,255,7,4,7,10,10,7,7,10,10,255,7,4,7,10,10,7,7,13,13,255,7,2,7,13,13,255,7,2,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,4,4,255,7,7,7,255,4,8,4,255,7,2,7,255,4,6,4,255,7,3,7,255,4,6,4,255,7,2,7,13,13,255,7,3,7,13,13,7,7,255,6,8,6,255,7,2,7,255,0,79,0,255,7,80,7,255,14,7,14,255,9,19,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,10,14,255,9,16,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,9,14,255,9,17,9,7,255,9,4,9,255,7,18,7,255,12,24,12,255,7,80,7,255,0
>e3ea	a3ea	07 ff 06 08 06 ff 07 03 07 ff 06 09 06 ff 07 03
>e3fa	a3fa	07 ff 0d 07 0d ff 07 02 07 ff 0d 06 0d ff 07 02
>e40a	a40a	07 ff 0d 08 0d ff 07 02 07 ff 0d 06 0d ff 07 02
>e41a	a41a	07 0d 0d ff 07 03 07 0d 0d 07 07 ff 06 08 06 ff
>e42a	a42a	07 03 07 ff 06 09 06 ff 07 03 07 06 06 ff 07 07
>e43a	a43a	07 06 06 ff 07 04 07 06 06 07 07 06 06 ff 07 08
>e44a	a44a	07 06 06 ff 07 04 07 06 06 07 07 0d 0d ff 07 02
>e45a	a45a	07 0d 0d ff 07 02 07 ff 06 08 06 ff 07 03 07 ff
>e46a	a46a	06 09 06 ff 07 03 07 0e 0e ff 07 0e 07 0e 0e 07
>e47a	a47a	07 0e 0e ff 07 08 07 0e 0e ff 07 08 07 0d 0d 07
>e48a	a48a	07 0d 0d ff 07 03 07 ff 06 08 06 ff 07 03 07 ff
>e49a	a49a	06 09 06 ff 07 03 07 ff 03 05 03 ff 07 04 07 ff
>e4aa	a4aa	03 06 03 ff 07 02 07 ff 03 07 03 ff 07 02 07 ff
>e4ba	a4ba	03 07 03 ff 07 02 07 ff 0d 04 0d ff 07 04 07 ff
>e4ca	a4ca	06 08 06 ff 07 03 07 ff 06 09 06 ff 07 2e 07 0d
>e4da	a4da	0d 07 07 0d 0d ff 07 03 07 ff 06 08 06 ff 07 03
>e4ea	a4ea	07 ff 06 09 06 ff 07 03 07 0a 0a ff 07 07 07 0a
>e4fa	a4fa	0a ff 07 08 07 0a 0a ff 07 04 07 0a 0a 07 07 0a
>e50a	a50a	0a ff 07 04 07 0a 0a 07 07 0d 0d ff 07 02 07 0d
>e51a	a51a	0d ff 07 02 07 ff 06 08 06 ff 07 03 07 ff 06 09
>e52a	a52a	06 ff 07 03 07 04 04 ff 07 07 07 ff 04 08 04 ff
>e53a	a53a	07 02 07 ff 04 06 04 ff 07 03 07 ff 04 06 04 ff
>e54a	a54a	07 02 07 0d 0d ff 07 03 07 0d 0d 07 07 ff 06 08
>e55a	a55a	06 ff 07 02 07 ff 00 4f 00 ff 07 50 07 ff 0e 07
>e56a	a56a	0e ff 09 13 09 07 ff 09 04 09 ff 07 12 07 ff 0c
>e57a	a57a	18 0c 07 07 ff 0e 0a 0e ff 09 10 09 07 ff 09 04
>e58a	a58a	09 ff 07 12 07 ff 0c 18 0c 07 07 ff 0e 09 0e ff
>e59a	a59a	09 11 09 07 ff 09 04 09 ff 07 12 07 ff 0c 18 0c
>e5aa	a5aa	ff 07 50 07 ff 00
.e5b0	a5b0					Header_kchars:
>e5b0	a5b0	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e5b8	a5b8	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e5c8	a5c8	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e5d8	a5d8	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e5e8	a5e8	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e5f8	a5f8	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e608	a608	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e618	a618	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e628	a628	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e638	a638	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e648	a648	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e658	a658	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e668	a668	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e678	a678	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e688	a688	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e698	a698	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e6a8	a6a8	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e6b8	a6b8	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e6c8	a6c8	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e6d8	a6d8	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e6e8	a6e8	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e6f8	a6f8	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e708	a708	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e718	a718	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e728	a728	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e738	a738	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e748	a748	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e758	a758	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e768	a768	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e778	a778	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e788	a788	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e798	a798	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e7a8	a7a8	16 96 9d ff 96 18 96 bf ff 00
.e7b2	a7b2					Header_Palette:
>e7b2	a7b2	00 00 00 00				.dword $000000
>e7b6	a7b6	66 66 66 00				.dword $666666
>e7ba	a7ba	aa 00 00 00				.dword $0000aa
>e7be	a7be	00 aa 00 00				.dword $00aa00
>e7c2	a7c2	ea 41 c0 00				.dword $c041ea
>e7c6	a7c6	00 48 87 00				.dword $874800
>e7ca	a7ca	00 9c ff 00				.dword $ff9c00
>e7ce	a7ce	ff db 57 00				.dword $57dbff
>e7d2	a7d2	28 3f 3f 00				.dword $3f3f28
>e7d6	a7d6	8a aa aa 00				.dword $aaaa8a
>e7da	a7da	ff 55 55 00				.dword $5555ff
>e7de	a7de	55 ff 55 00				.dword $55ff55
>e7e2	a7e2	ed 8d ff 00				.dword $ff8ded
>e7e6	a7e6	00 00 ff 00				.dword $ff0000
>e7ea	a7ea	55 ff ff 00				.dword $ffff55
>e7ee	a7ee	ff ff ff 00				.dword $ffffff
>e7f2	a7f2	ff ff ff 00				.dword $ffffff
>e7f6	a7f6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
